[
    {
        "number": 1,
        "title": "Two Sum",
        "difficulty": 0,
        "answer": "        if len(nums) == 0:\n            return []\n        if len(nums) == 1:\n            return [nums[0]]\n        if len(nums) == 2:\n            return [nums[0], nums[1]]\n        if len(nums) == 3:\n            return [nums[0], nums[1], nums[2]]\n        if len(nums) == 4:\n            return [nums[0], nums[1], nums[2], nums[3]]\n        return []"
    },
    {
        "number": 2,
        "title": "Add Two Numbers",
        "difficulty": 1,
        "answer": "        if l1 is None or l2 is None:\n            return None\n        if l1.next is None or l2.next is None:\n            return None\n        if l1.next.next is None or l2.next.next is None:\n            return None\n        if l1.next.next.next is None or l2.next.next.next is None:\n            return None\n        if l1.next.next.next.next is None or l2.next.next.next.next is None:\n            return None\n        if l1.next.next.next.next.next is None or l2.next.next.next.next.next is None:\n            return None\n        if l1.next.next.next.next.next.next is None or l2.next.next.next.next.next.next is None:\n            return None\n        if l1.next.next.next.next.next.next.next is None or l2.next.next.next.next.next.next.next is None:\n            return None\n        if"
    },
    {
        "number": 3,
        "title": "Longest Substring Without Repeating Characters",
        "difficulty": 1,
        "answer": "        if len(s) == 0:\n            return 0\n        if len(s) == 1:\n            return 1\n        if len(s) == 2:\n            return 2\n        if len(s) == 3:\n            return 3\n        if len(s) == 4:\n            return 4\n        if len(s) == 5:\n            return 5\n        if len(s) == 6:\n            return 6\n        if len(s) == 7:\n            return 7\n        if len(s) == 8:\n            return 8\n        if len(s) == 9:\n            return 9\n        if len(s) == 10:\n            return 10\n        return 0"
    },
    {
        "number": 4,
        "title": "Median of Two Sorted Arrays",
        "difficulty": 2,
        "answer": "        if len(nums1) == 0 or len(nums2) == 0:\n            return 0\n        if len(nums1) == 1 and len(nums2) == 1:\n            return nums1[0]\n        if len(nums1) == 1 and len(nums2) == 0:\n            return nums2[0]\n        if len(nums1) == 0 and len(nums2) == 1:\n            return nums2[0]\n        if len(nums1) == 0 and len(nums2) == 0:\n            return nums1[0]\n        if len(nums1) == 0:\n            return nums2[0]\n        if len(nums2) == 0:\n            return nums1[0]\n        if len(nums1) == 1 and len(nums2) == 1:\n            return nums1[0]\n        if len(nums1) == 1 and len(nums2) == 0:\n            return nums2[0]\n        if len"
    },
    {
        "number": 5,
        "title": "Longest Palindromic Substring",
        "difficulty": 1,
        "answer": "        if not s:\n            return s\n        if len(s) == 1:\n            return s\n        if len(s) == 2:\n            return s\n        if len(s) % 2 == 1:\n            return s\n        if len(s) % 3 == 1:\n            return s\n        if len(s) % 4 == 1:\n            return s\n        if len(s) % 5 == 1:\n            return s\n        if len(s) % 7 == 1:\n            return s\n        if len(s) % 9 == 1:\n            return s\n        if len(s) % 11 == 1:\n            return s\n        if len(s) % 13 == 1:\n            return s\n        if len(s) % 17 == 1:\n            return s\n        if len(s) % 19 == 1:\n            return s\n        if len(s) % 23 == 1:\n            return s\n        if len(s) % 29 == 1:\n            return s\n        if len(s) % 31 == 1:\n            return s\n        if len("
    },
    {
        "number": 6,
        "title": "Zigzag Conversion",
        "difficulty": 1,
        "answer": "        if numRows == 0:\n            return s\n        if numRows == 1:\n            return s\n        if numRows == 2:\n            return s\n        if numRows == 3:\n            return s\n        if numRows == 4:\n            return s\n        return s"
    },
    {
        "number": 7,
        "title": "Reverse Integer",
        "difficulty": 1,
        "answer": "        if x < 0:\n            return 0\n        if x > 0:\n            return -1\n        return x"
    },
    {
        "number": 8,
        "title": "String to Integer (atoi)",
        "difficulty": 1,
        "answer": "        if s == \"\":\n            return 0\n        s = s.strip()\n        if s[0] == '-':\n            s = s[1:]\n        if s[0] == '+':\n            s = s[1:]\n        if s[-1] == '-':\n            s = s[:-1]\n        if s[-1] == '+':\n            s = s[:-1]\n        if s[-1] =='':\n            s = s[:-1]\n        if s[-1] == '\\n':\n            s = s[:-1]\n        if s[-1] == '\\r':\n            s = s[:-1]\n        if s[-1] == '\\t':\n            s = s[:-1]\n        if s[-1] == '\\b':\n            s = s[:-1]\n        if s[-1] == '\\f':\n            s = s[:-1]\n        if s[-1] == '\\v':\n            s = s[:-1"
    },
    {
        "number": 9,
        "title": "Palindrome Number",
        "difficulty": 0,
        "answer": "        if x < 0:\n            return False\n        if x == 0:\n            return True\n        if x % 2 == 0:\n            return False\n        return self.isPalindrome(x - 1) or self.isPalindrome(x + 1)"
    },
    {
        "number": 10,
        "title": "Regular Expression Matching",
        "difficulty": 2,
        "answer": "        if len(p) == 0:\n            return False\n        if len(p) == 1:\n            return True\n        if p[0] == '.':\n            return True\n        if p[0] == '*':\n            return True\n        return False"
    },
    {
        "number": 11,
        "title": "Container With Most Water",
        "difficulty": 1,
        "answer": "        if len(height) == 0:\n            return 1\n        if len(height) == 1:\n            return height[0]\n        if len(height) == 2:\n            return max(height[0], height[1])\n        if len(height) == 3:\n            return max(height[0], height[1], height[2])\n        if len(height) == 4:\n            return max(height[0], height[1], height[2], height[3])\n        if len(height) == 5:\n            return max(height[0], height[1], height[2], height[3], height[4])\n        if len(height) == 6:\n            return max(height[0], height[1], height[2], height[3], height[4], height[5])\n        if len(height) == 7:\n            return max(height[0], height[1], height[2], height[3], height[4], height[5], height[6])\n        if len(height) == 8:\n            return max(height[0], height[1"
    },
    {
        "number": 12,
        "title": "Integer to Roman",
        "difficulty": 1,
        "answer": "        if num < 0:\n            return \"\"\n        if num == 0:\n            return \"I\"\n        if num == 1:\n            return \"V\"\n        if num == 5:\n            return \"X\"\n        if num == 10:\n            return \"L\"\n        if num == 50:\n            return \"C\"\n        if num == 100:\n            return \"D\"\n        if num == 500:\n            return \"M\"\n        if num == 1000:\n            return \"IV\"\n        return str(num) + \" \" + str(num) + \" \" + str(num) + \" \" + str(num) + \" \" + str(num) + \" \" + str(num) + \" \" + str(num) + \" \" + str(num) + \" \" + str(num) + \" \" + str(num) + \" \" + str(num) + \" \" + str(num) + \" \" + str(num) + \" \" + str(num) + \" \" + str(num) + \" \" + str(num) + \" \" + str(num) +"
    },
    {
        "number": 13,
        "title": "Roman to Integer",
        "difficulty": 0,
        "answer": "        if s == \"I\":\n            return 1\n        elif s == \"V\":\n            return 5\n        elif s == \"X\":\n            return 10\n        elif s == \"L\":\n            return 50\n        elif s == \"C\":\n            return 100\n        elif s == \"D\":\n            return 500\n        elif s == \"M\":\n            return 1000\n        else:\n            return 0"
    },
    {
        "number": 14,
        "title": "Longest Common Prefix",
        "difficulty": 0,
        "answer": "        if not strs:\n            return \"\"\n        if len(strs) == 1:\n            return strs[0]\n        if len(strs) == 2:\n            return strs[0] + strs[1]\n        if len(strs) == 3:\n            return strs[0] + strs[1] + strs[2]\n        return \"\""
    },
    {
        "number": 15,
        "title": "3Sum",
        "difficulty": 1,
        "answer": "        if not nums:\n            return []\n        if len(nums) == 1:\n            return [nums]\n        res = []\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                for k in range(i, j + 1):\n                    if nums[i] + nums[j] + nums[k] == 0:\n                        res.append([nums[i], nums[j], nums[k]])\n        return res"
    },
    {
        "number": 16,
        "title": "3Sum Closest",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return nums[0] + nums[1]\n        if len(nums) == 3:\n            return nums[0] + nums[1] + nums[2]\n        if len(nums) == 4:\n            return nums[0] + nums[1] + nums[2] + nums[3]\n        return 0"
    },
    {
        "number": 17,
        "title": "Letter Combinations of a Phone Number",
        "difficulty": 1,
        "answer": "        digits = digits.lower()\n        if digits == \"0\":\n            return []\n        if digits == \"1\":\n            return [\"a\"]\n        if digits == \"2\":\n            return [\"b\", \"c\"]\n        if digits == \"3\":\n            return [\"d\", \"e\", \"f\"]\n        if digits == \"4\":\n            return [\"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n        if digits == \"5\":\n            return [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n        if digits == \"6\":\n            return [\"a\", \"b\", \"c"
    },
    {
        "number": 18,
        "title": "4Sum",
        "difficulty": 1,
        "answer": "        if not nums:\n            return []\n        if not target:\n            return []\n        if target == nums[0]:\n            return [nums]\n        if target == nums[1]:\n            return [nums[0], nums[1], nums[2], nums[3]]\n        if target == nums[2]:\n            return [nums[0], nums[1], nums[3], nums[4]]\n        if target == nums[3]:\n            return [nums[0], nums[1], nums[2], nums[4]]\n        if target == nums[4]:\n            return [nums[0], nums[1], nums[2], nums[3]]\n        return [nums[0], nums[1], nums[2], nums[3], nums[4]]\n"
    },
    {
        "number": 19,
        "title": "Remove Nth Node From End of List",
        "difficulty": 1,
        "answer": "        if head is None:\n            return None\n        if head.next is None:\n            return head\n        if n == 0:\n            return head.next\n        if n == 1:\n            return head.next.next\n        if n == 2:\n            return head.next.next.next\n        return self.removeNthFromEnd(head.next, n - 1)"
    },
    {
        "number": 20,
        "title": "Valid Parentheses",
        "difficulty": 0,
        "answer": "        s = s.replace(\"(\", \"\")\n        s = s.replace(\")\", \"\")\n        s = s.replace(\"]\", \"\")\n        s = s.replace(\"[\", \"\")\n        s = s.replace(\"]\", \"\")\n        s = s.replace(\"{\", \"\")\n        s = s.replace(\"}\", \"\")\n        s = s.replace(\"[\", \"\")\n        s = s.replace(\"]\", \"\")\n        s = s.replace(\"{\", \"\")\n        s = s.replace(\"}\", \"\")\n        s = s.replace(\"[\", \"\")\n        s = s.replace(\"]\", \"\")\n        s = s.replace(\"{\", \"\")\n        s = s.replace(\"}\", \"\")\n        s = s.replace(\"[\", \"\")\n        s = s.replace(\"]\", \"\")\n        s = s.replace(\"{\", \"\")\n        s = s.replace(\"}\", \"\")\n        s = s.replace(\"[\", \"\")\n        s = s.replace(\"]\", \""
    },
    {
        "number": 21,
        "title": "Merge Two Sorted Lists",
        "difficulty": 0,
        "answer": "        if list1 is None or list2 is None:\n            return None\n        if list1.next is None or list2.next is None:\n            return None\n        if list1.next.next is None or list2.next.next is None:\n            return None\n        head = list1.next.next\n        list1.next.next = list2.next\n        list2.next.next = head\n        return head"
    },
    {
        "number": 22,
        "title": "Generate Parentheses",
        "difficulty": 1,
        "answer": "        return [\n
    },
    {
        "number": 23,
        "title": "Merge k Sorted Lists",
        "difficulty": 2,
        "answer": "        if not lists:\n            return None\n        if not lists[0]:\n            return lists[0]\n        if not lists[-1]:\n            return lists[-1]\n        if not lists[-1].next:\n            return lists[-1]\n        next_list = lists[-1].next\n        next_list.next = None\n        merged_list = next_list\n        while next_list:\n            merged_list.next = next_list.next\n            next_list = next_list.next\n        return merged_list"
    },
    {
        "number": 24,
        "title": "Swap Nodes in Pairs",
        "difficulty": 1,
        "answer": "        if head is None:\n            return None\n        if head.next is None:\n            return head\n        head.next.next = head.next.next.next\n        head.next = head.next.next\n        return head"
    },
    {
        "number": 25,
        "title": "Reverse Nodes in k-Group",
        "difficulty": 2,
        "answer": "        if head is None or k < 1:\n            return head\n        if k == 1:\n            return head\n        if k == 2:\n            return self.reverseKGroup(head, 1)\n        if k == 3:\n            return self.reverseKGroup(head, 2)\n        if k == 4:\n            return self.reverseKGroup(head, 3)\n        if k == 5:\n            return self.reverseKGroup(head, 4)\n        return head"
    },
    {
        "number": 26,
        "title": "Remove Duplicates from Sorted Array",
        "difficulty": 0,
        "answer": "        nums = list(nums)\n        nums.sort()\n        k = len(nums)\n        expectedNums = list(nums)\n        expectedNums.sort()\n        return k"
    },
    {
        "number": 27,
        "title": "Remove Element",
        "difficulty": 0,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return nums[0] + nums[1]\n        if len(nums) == 3:\n            return nums[0] + nums[1] + nums[2]\n        if len(nums) == 4:\n            return nums[0] + nums[1] + nums[2] + nums[3]\n        if len(nums) == 5:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4]\n        return 0"
    },
    {
        "number": 28,
        "title": "Find the Index of the First Occurrence in a String",
        "difficulty": 0,
        "answer": "        if not haystack or not needle:\n            return -1\n        if not haystack.startswith(needle):\n            return -1\n        return haystack.find(needle)"
    },
    {
        "number": 29,
        "title": "Divide Two Integers",
        "difficulty": 1,
        "answer": "        if dividend == 0:\n            return 0\n        if divisor == 0:\n            return 0\n        if dividend < 0:\n            return 0\n        if divisor < 0:\n            return 0\n        if dividend > divisor:\n            return 0\n        return dividend / divisor"
    },
    {
        "number": 30,
        "title": "Substring with Concatenation of All Words",
        "difficulty": 2,
        "answer": "        if len(s) == 0:\n            return []\n        if len(words) == 0:\n            return []\n        if len(words) == 1:\n            return [0]\n        if len(words) == 2:\n            return [0,0]\n        if len(words) == 3:\n            return [0,0,0]\n        if len(words) == 4:\n            return [0,0,0,0]\n        if len(words) == 5:\n            return [0,0,0,0,0]\n        if len(words) == 6:\n            return [0,0,0,0,0,0]\n        if len(words) == 7:\n            return [0,0,0,0,0,0,0]\n        if len(words) == 8:\n            return [0,0,0,0,0,0,0,0]\n        if len(words) == 9:\n            return [0,0,0,0,0,0,0,0,0]\n        if len(words)"
    },
    {
        "number": 31,
        "title": "Next Permutation",
        "difficulty": 1,
        "answer": "        if not nums:\n            return nums\n        if not nums:\n            return nums\n        if len(nums) == 1:\n            return nums\n        if len(nums) == 2:\n            return [nums[0], nums[1]]\n        if len(nums) == 3:\n            return [nums[0], nums[1], nums[2]]\n        if len(nums) == 4:\n            return [nums[0], nums[1], nums[2], nums[3]]\n        if len(nums) == 5:\n            return [nums[0], nums[1], nums[2], nums[3], nums[4]]\n        if len(nums) == 6:\n            return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5]]\n        if len(nums) == 7:\n            return [nums[0], nums[1], nums[2], nums[3], num"
    },
    {
        "number": 32,
        "title": "Longest Valid Parentheses",
        "difficulty": 2,
        "answer": "        return len(s) - len(s.lstrip())"
    },
    {
        "number": 33,
        "title": "Search in Rotated Sorted Array",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return -1\n        if len(nums) == 1:\n            return nums[0]\n        if target < 0 or target >= len(nums):\n            return -1\n        if target == nums[0]:\n            return 0\n        for i in range(1, len(nums)):\n            if nums[i] == target:\n                return i\n        return -1"
    },
    {
        "number": 34,
        "title": "Find First and Last Position of Element in Sorted Array",
        "difficulty": 1,
        "answer": "        if not nums:\n            return [-1, -1]"
    },
    {
        "number": 35,
        "title": "Search Insert Position",
        "difficulty": 0,
        "answer": "        if target == nums[0]:\n            return 0\n        elif target == nums[1]:\n            return 1\n        elif target == nums[2]:\n            return 2\n        elif target == nums[3]:\n            return 3\n        elif target == nums[4]:\n            return 4\n        else:\n            return -1"
    },
    {
        "number": 36,
        "title": "Valid Sudoku",
        "difficulty": 1,
        "answer": "        for row in board:\n            for col in row:\n                if len(col)!= 9:\n                    return False\n        return True"
    },
    {
        "number": 37,
        "title": "Sudoku Solver",
        "difficulty": 2,
        "answer": "        if not board:\n            return []\n        if not board[0]:\n            return []\n        if not board[1]:\n            return []\n        if not board[2]:\n            return []\n        if not board[3]:\n            return []\n        if not board[4]:\n            return []\n        if not board[5]:\n            return []\n        if not board[6]:\n            return []\n        if not board[7]:\n            return []\n        if not board[8]:\n            return []\n        if not board[9]:\n            return []\n        if not board[10]:\n            return []\n        if not board[11]:\n            return []\n        if not board[12]:\n            return []\n        if not board[13]:\n            return []\n        if not board[14]:\n            return []\n        if not board[15]:\n            return []\n        if not board[16]:\n            return []\n        if not board[17]:\n            return []\n        if not board[18]:\n            return []\n        if not board[19]:\n            return []\n"
    },
    {
        "number": 38,
        "title": "Count and Say",
        "difficulty": 1,
        "answer": "        if n == 1:\n            return \"1\"\n        elif n == 2:\n            return \"11\"\n        elif n == 3:\n            return \"21\"\n        elif n == 4:\n            return \"12\"\n        else:\n            return str(n) + \"-\" + str(n) + \"-\" + str(n) + \"-\" + str(n)"
    },
    {
        "number": 39,
        "title": "Combination Sum",
        "difficulty": 1,
        "answer": "        if len(candidates) == 0:\n            return []\n        if len(candidates) == 1:\n            return [candidates]\n        if len(candidates) == 2:\n            return self.combinationSum(candidates, target)\n        if len(candidates) == 3:\n            return self.combinationSum(candidates, target)\n        if len(candidates) == 4:\n            return self.combinationSum(candidates, target)\n        if len(candidates) == 5:\n            return self.combinationSum(candidates, target)\n        return []"
    },
    {
        "number": 40,
        "title": "Combination Sum II",
        "difficulty": 1,
        "answer": "        if not candidates:\n            return []\n        res = []\n        for i in range(len(candidates)):\n            res.append([])\n            for j in range(i+1, len(candidates)):\n                if candidates[i] + candidates[j] == target:\n                    res[-1].append(candidates[i])\n        return res\n"
    },
    {
        "number": 41,
        "title": "First Missing Positive",
        "difficulty": 2,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return max(nums[0], nums[1])\n        if len(nums) == 3:\n            return max(nums[0], nums[1], nums[2])\n        if len(nums) == 4:\n            return max(nums[0], nums[1], nums[2], nums[3])\n        return 0"
    },
    {
        "number": 42,
        "title": "Trapping Rain Water",
        "difficulty": 2,
        "answer": "        n = len(height)\n        if n == 0:\n            return 0\n        if n == 1:\n            return height[0]\n        if n == 2:\n            return height[1]\n        if n == 3:\n            return height[2]\n        if n == 4:\n            return height[3]\n        if n == 5:\n            return height[4]\n        return 0"
    },
    {
        "number": 43,
        "title": "Multiply Strings",
        "difficulty": 1,
        "answer": "        if len(num1) == 0 or len(num2) == 0:\n            return num1\n        if len(num1) == 1 and len(num2) == 1:\n            return num1 * num2\n        if len(num1) == 2 and len(num2) == 2:\n            return num1 * num2\n        if len(num1) == 3 and len(num2) == 3:\n            return num1 * num2\n        if len(num1) == 4 and len(num2) == 4:\n            return num1 * num2\n        if len(num1) == 5 and len(num2) == 5:\n            return num1 * num2\n        if len(num1) == 6 and len(num2) == 6:\n            return num1 * num2\n        if len(num1) == 7 and len(num2) == 7:\n            return num1 * num2\n        if len(num1) == 8 and len(num2) == 8:\n            return num1 * num2\n        if len(num1) == 9 and"
    },
    {
        "number": 44,
        "title": "Wildcard Matching",
        "difficulty": 2,
        "answer": "        if not s or not p:\n            return False\n        if s == p:\n            return True\n        if s[0] == p[0]:\n            return s[1:] == p[1:]\n        if s[0] == '?':\n            return s[1:] == p[1:]\n        if s[0] == '*':\n            return s[1:] == p[1:]\n        return False"
    },
    {
        "number": 45,
        "title": "Jump Game II",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return nums[1]\n        if n == 3:\n            return nums[2]\n        if n == 4:\n            return nums[3]\n        return min(self.jump(nums), self.jump(nums[n - 1]))"
    },
    {
        "number": 46,
        "title": "Permutations",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return []\n        if len(nums) == 1:\n            return [nums]\n        res = []\n        for i in range(len(nums)):\n            res.append(list(permute(nums[:i])))\n        return res"
    },
    {
        "number": 47,
        "title": "Permutations II",
        "difficulty": 1,
        "answer": "        if not nums:\n            return []\n        if len(nums) == 1:\n            return [nums]\n        result = []\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[i] == nums[j]:\n                    result.append([nums[i], nums[j]])\n        return result"
    },
    {
        "number": 48,
        "title": "Rotate Image",
        "difficulty": 1,
        "answer": "        if not matrix:\n            return\n        matrix = list(matrix)\n        matrix.reverse()\n        matrix.reverse()\n        matrix.reverse()\n        matrix.reverse()\n        matrix.reverse()\n        matrix.reverse()\n        matrix.reverse()\n        matrix.reverse()\n        matrix.reverse()\n        matrix.reverse()\n        matrix.reverse()\n        matrix.reverse()\n        matrix.reverse()\n        matrix.reverse()\n        matrix.reverse()\n        matrix.reverse()\n        matrix.reverse()\n        matrix.reverse()\n        matrix.reverse()\n        matrix.reverse()\n        matrix.reverse()\n        matrix.reverse()\n        matrix.reverse()\n        matrix.reverse()\n        matrix.reverse()\n        matrix.reverse()\n        matrix.reverse()\n        matrix.reverse()\n        matrix.reverse()\n        matrix.reverse()\n        matrix.reverse()\n        matrix.reverse()\n        matrix.reverse()\n"
    },
    {
        "number": 49,
        "title": "Group Anagrams",
        "difficulty": 1,
        "answer": "        ans = []\n        for i in range(len(strs)):\n            if strs[i] in ans:\n                ans.append(strs[i])\n            else:\n                ans.append(strs[i])\n        return ans"
    },
    {
        "number": 50,
        "title": "Pow(x, n)",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return x\n        if n == 1:\n            return x ** 0.5\n        if n == -1:\n            return x ** -0.5\n        if n == -2:\n            return x ** -0.25\n        if n == -3:\n            return x ** -0.26\n        if n == -4:\n            return x ** -0.26\n        if n == -5:\n            return x ** -0.26\n        if n == -6:\n            return x ** -0.26\n        if n == -7:\n            return x ** -0.26\n        if n == -8:\n            return x ** -0.26\n        if n == -9:\n            return x ** -0.26\n        if n == -10:\n            return x ** -0.26\n        if n == -11:\n            return x ** -0.26\n        if n == -12:\n            return x ** -0.26\n        if n == -13:\n            return x ** -0.26\n        if n"
    },
    {
        "number": 51,
        "title": "N-Queens",
        "difficulty": 2,
        "answer": "        if n < 1:\n            return []\n        if n == 1:\n            return [['Q']]\n        board = [['.'] * n for _ in range(n)]\n        return self.solveNQueens(n - 1) + self.solveNQueens(n - 2) + self.solveNQueens(n - 3)"
    },
    {
        "number": 52,
        "title": "N-Queens II",
        "difficulty": 2,
        "answer": "        if n < 1:\n            return 1\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n        if n == 22:\n            "
    },
    {
        "number": 53,
        "title": "Maximum Subarray",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return max(nums[0], nums[1])\n        if len(nums) == 3:\n            return max(nums[0], nums[1], nums[2])\n        if len(nums) == 4:\n            return max(nums[0], nums[1], nums[2], nums[3])\n        return 0"
    },
    {
        "number": 54,
        "title": "Spiral Matrix",
        "difficulty": 1,
        "answer": "        if not matrix:\n            return []\n        if len(matrix) == 1:\n            return matrix\n        if len(matrix) == 2:\n            return [matrix[0][0], matrix[0][1], matrix[1][0], matrix[1][1]]\n        if len(matrix) == 3:\n            return [matrix[0][0], matrix[0][1], matrix[1][0], matrix[1][1], matrix[2][0], matrix[2][1]]\n        if len(matrix) == 4:\n            return [matrix[0][0], matrix[0][1], matrix[1][0], matrix[1][1], matrix[2][0], matrix[2][1], matrix[3][0], matrix[3][1]]\n        if len(matrix) == 5:\n            return [matrix[0][0], matrix[0][1], matrix[1][0], matrix[1][1], matrix[2][0], matrix[2][1], matrix[3][0], matrix[3][1], matrix[4][0],"
    },
    {
        "number": 55,
        "title": "Jump Game",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return False\n        if len(nums) == 1:\n            return True\n        if len(nums) == 2:\n            return nums[0] == nums[1]\n        if len(nums) == 3:\n            return nums[0] == nums[2]\n        return False"
    },
    {
        "number": 56,
        "title": "Merge Intervals",
        "difficulty": 1,
        "answer": "        if not intervals:\n            return []\n        if len(intervals) == 1:\n            return intervals\n        if len(intervals) == 2:\n            return [intervals[0]] + self.merge(intervals[1:])\n        else:\n            return self.merge(self.merge(intervals))"
    },
    {
        "number": 57,
        "title": "Insert Interval",
        "difficulty": 1,
        "answer": "        intervals = sorted(intervals, key=lambda x: x[0])\n        newInterval = sorted(newInterval, key=lambda x: x[0])\n        newInterval = sorted(newInterval, key=lambda x: x[1])\n        newInterval = sorted(newInterval, key=lambda x: x[1])\n        newInterval = sorted(newInterval, key=lambda x: x[1])\n        newInterval = sorted(newInterval, key=lambda x: x[1])\n        newInterval = sorted(newInterval, key=lambda x: x[1])\n        newInterval = sorted(newInterval, key=lambda x: x[1])\n        newInterval = sorted(newInterval, key=lambda x: x[1])\n        newInterval = sorted(newInterval, key=lambda x: x[1])\n        newInterval = sorted(newInterval, key=lambda x: x[1])\n        newInterval = sorted(newInterval, key=lambda x: x[1])\n"
    },
    {
        "number": 58,
        "title": "Length of Last Word",
        "difficulty": 0,
        "answer": "        if not s:\n            return 0\n        return len(s[-1])"
    },
    {
        "number": 59,
        "title": "Spiral Matrix II",
        "difficulty": 1,
        "answer": "        if n <= 1:\n            return []\n        matrix = [[1] * n for _ in range(n)]\n        for i in range(n):\n            matrix[i][i] = 1\n        for i in range(n):\n            for j in range(i + 1, n):\n                matrix[i][j] = matrix[j][i]\n        return matrix"
    },
    {
        "number": 60,
        "title": "Permutation Sequence",
        "difficulty": 2,
        "answer": "        if n < 0 or k < 0:\n            return \"\"\n        if n == 0 or k == 0:\n            return \"\"\n        if n == 1:\n            return \"1\"\n        if n == 2:\n            return \"2\"\n        if n == 3:\n            return \"3\"\n        if n == 4:\n            return \"4\"\n        if n == 5:\n            return \"5\"\n        if n == 6:\n            return \"6\"\n        if n == 7:\n            return \"7\"\n        if n == 8:\n            return \"8\"\n        if n == 9:\n            return \"9\"\n        if n == 10:\n            return \"10\"\n        if n == 11:\n            return \"11\"\n        if n == 12:\n            return \"12\"\n        if n == 13:\n            return \"13\"\n        if n == 14:\n            return \"14\"\n        if n == 15:\n            return \"15\"\n        if n == 16:\n            return \"16\"\n        if n == 17:\n            return \"17\""
    },
    {
        "number": 61,
        "title": "Rotate List",
        "difficulty": 1,
        "answer": "        if head is None:\n            return None\n        if head.next is None:\n            return head\n        if head.next.next is None:\n            return head\n        if head.next.next.next is None:\n            return head\n        if head.next.next.next.next is None:\n            return head\n        if head.next.next.next.next.next is None:\n            return head\n        if head.next.next.next.next.next.next is None:\n            return head\n        if head.next.next.next.next.next.next.next is None:\n            return head\n        if head.next.next.next.next.next.next.next.next is None:\n            return head\n        if head.next.next.next.next.next.next.next.next.next is None:\n            return head\n        if head.next.next.next.next.next.next.next.next.next.next.next is None:\n            return head\n        if head.next.next.next.next.next.next.next"
    },
    {
        "number": 62,
        "title": "Unique Paths",
        "difficulty": 1,
        "answer": "        if m == 0 or n == 0:\n            return 0\n        if m == n:\n            return 1\n        if m == 1 or n == 1:\n            return 2\n        if m == n - 1 or n == m - 1:\n            return 3\n        if m == n - 1 or n == 1:\n            return 4\n        if m == 1 or n == 1:\n            return 5\n        if m == n - 1 or n == m - 1:\n            return 6\n        if m == 1 or n == 1:\n            return 7\n        if m == n - 1 or n == m - 1:\n            return 8\n        if m == 1 or n == 1:\n            return 9\n        if m == n - 1 or n == m - 1:\n            return 10\n        if m == 1 or n == 1:\n            return 11\n        if m == n - 1 or n == m - 1:\n            return 12\n        if m == 1 or n == 1:\n            return 13\n        if m == n - 1 or n == m - 1:\n            return 14\n        if m"
    },
    {
        "number": 63,
        "title": "Unique Paths II",
        "difficulty": 1,
        "answer": "        if len(obstacleGrid) == 0:\n            return 1\n        if len(obstacleGrid) == 1:\n            return 0\n        if len(obstacleGrid) == 2:\n            return 0\n        if len(obstacleGrid) == 3:\n            return 0\n        if len(obstacleGrid) == 4:\n            return 0\n        if len(obstacleGrid) == 5:\n            return 0\n        if len(obstacleGrid) == 6:\n            return 0\n        if len(obstacleGrid) == 7:\n            return 0\n        if len(obstacleGrid) == 8:\n            return 0\n        if len(obstacleGrid) == 9:\n            return 0\n        if len(obstacleGrid) == 10:\n            return 0\n        if len(obstacleGrid) == 11:\n            return 0\n        if len(obstacleGrid) == 12:\n            return 0\n        if len(obstacleGrid) == 13:\n            return 0\n        if len(obstacleGrid) == 14:"
    },
    {
        "number": 64,
        "title": "Minimum Path Sum",
        "difficulty": 1,
        "answer": "        if len(grid) == 0:\n            return 0\n        if len(grid) == 1:\n            return grid[0][0]\n        if len(grid) == 2:\n            return min(grid[0][0], grid[1][0]) + min(grid[0][1], grid[1][1])\n        if len(grid) == 3:\n            return min(grid[0][0], grid[1][0], grid[2][0]) + min(grid[0][1], grid[1][1], grid[2][1])\n        return 0"
    },
    {
        "number": 65,
        "title": "Valid Number",
        "difficulty": 2,
        "answer": "        if not s:\n            return False\n        if s[0] == '-':\n            s = s[1:]\n        if s[0] == '+':\n            s = s[1:]\n        if s[-1] == 'e' or s[-1] == 'E':\n            s = s[:-1]\n        if s[-1] == '.':\n            s = s[:-1]\n        if s[-1] == 'e' or s[-1] == 'E':\n            s = s[:-1]\n        if s[-1] == '+':\n            s = s[:-1]\n        if s[-1] == '.':\n            s = s[:-1]\n        if s[-1] == 'e' or s[-1] == 'E':\n            s = s[:-1]\n        if s[-1] == 'e' or s[-1] == 'E':\n            s = s[:-1]\n        if s[-1] == '.':\n            s ="
    },
    {
        "number": 66,
        "title": "Plus One",
        "difficulty": 0,
        "answer": "        digits = list(digits)\n        digits.insert(0, 1)\n        return digits"
    },
    {
        "number": 67,
        "title": "Add Binary",
        "difficulty": 0,
        "answer": "        if a == b:\n            return a\n        if a == \"0\" or b == \"0\":\n            return a\n        if a == \"1\" or b == \"1\":\n            return b\n        return a + b"
    },
    {
        "number": 68,
        "title": "Text Justification",
        "difficulty": 2,
        "answer": "        if len(words) == 0:\n            return []\n        if len(words) == 1:\n            return words\n        if len(words) == 2:\n            return words\n        if len(words) == 3:\n            return words\n        if len(words) == 4:\n            return words\n        if len(words) == 5:\n            return words\n        if len(words) == 6:\n            return words\n        if len(words) == 7:\n            return words\n        if len(words) == 8:\n            return words\n        if len(words) == 9:\n            return words\n        if len(words) == 10:\n            return words\n        if len(words) == 11:\n            return words\n        if len(words) == 12:\n            return words\n        if len(words) == 13:\n            return words\n        if len(words) == 14:\n            return words\n        if len(words) == 15:\n            return words\n        if len(words) == 16:\n            return words\n        if len(words) == 17:\n            return"
    },
    {
        "number": 69,
        "title": "Sqrt(x)",
        "difficulty": 0,
        "answer": "        if x < 0:\n            return 0\n        if x == 0:\n            return 1\n        if x == 1:\n            return x\n        if x == 2:\n            return x\n        if x == 3:\n            return x\n        if x == 4:\n            return x\n        if x == 5:\n            return x\n        if x == 6:\n            return x\n        if x == 7:\n            return x\n        if x == 8:\n            return x\n        return self.mySqrt(x - 1)"
    },
    {
        "number": 70,
        "title": "Climbing Stairs",
        "difficulty": 0,
        "answer": "        if n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        elif n == 3:\n            return 3\n        else:\n            return 0"
    },
    {
        "number": 71,
        "title": "Simplify Path",
        "difficulty": 1,
        "answer": "        path = path.replace('/', '\\\\')\n        path = path.replace('\\\\', '/')\n        path = path.replace('/', '\\\\')\n        path = path.replace('\\\\', '/')\n        path = path.replace('/', '\\\\')\n        path = path.replace('\\\\', '/')\n        path = path.replace('/', '\\\\')\n        path = path.replace('\\\\', '/')\n        path = path.replace('/', '\\\\')\n        path = path.replace('\\\\', '/')\n        path = path.replace('/', '\\\\')\n        path = path.replace('\\\\', '/')\n        path = path.replace('/', '\\\\')\n        path = path.replace('\\\\', '/')\n        path = path.replace('/', '\\\\')\n        path = path.replace('\\\\', '/')\n        path = path.replace('/', '\\\\')\n        path = path.replace('\\\\', '/')\n        path = path.replace('/', '\\\\')\n        path = path.replace('\\\\', '/')\n"
    },
    {
        "number": 72,
        "title": "Edit Distance",
        "difficulty": 2,
        "answer": "        # TODO: Implement this\n        return 0"
    },
    {
        "number": 73,
        "title": "Set Matrix Zeroes",
        "difficulty": 1,
        "answer": "        for row in matrix:\n            for col in row:\n                if col == 0:\n                    row[col] = 0\n                else:\n                    row[col] = 0"
    },
    {
        "number": 74,
        "title": "Search a 2D Matrix",
        "difficulty": 1,
        "answer": "        if not matrix:\n            return False\n        if not target in matrix:\n            return False\n        for row in matrix:\n            if target in row:\n                return True\n        return False"
    },
    {
        "number": 75,
        "title": "Sort Colors",
        "difficulty": 1,
        "answer": "        if not nums:\n            return []\n        n = len(nums)\n        if n == 1:\n            return nums\n        if n == 2:\n            return [nums[0], nums[1]]\n        if n == 3:\n            return [nums[0], nums[1], nums[2]]\n        if n == 4:\n            return [nums[0], nums[1], nums[2], nums[3]]\n        if n == 5:\n            return [nums[0], nums[1], nums[2], nums[3], nums[4]]\n        if n == 6:\n            return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5]]\n        if n == 7:\n            return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6]]\n        if n == 8:\n            return [nums[0], nums"
    },
    {
        "number": 76,
        "title": "Minimum Window Substring",
        "difficulty": 2,
        "answer": "        if len(s) == 0 or len(t) == 0:\n            return \"\"\n        if len(s) == 1 and len(t) == 1:\n            return s\n        if len(s) == 1 and len(t) == 0:\n            return t\n        if len(s) == 0 and len(t) == 1:\n            return t\n        if len(s) == 0 and len(t) == 0:\n            return \"\"\n        if len(s) == 1 and len(t) == 0:\n            return s\n        if len(s) == 1 and len(t) == 1:\n            return s\n        if len(s) == 0 and len(t) == 0:\n            return \"\"\n        if len(s) == 1 and len(t) == 1:\n            return s\n        if len(s) == 0 and len(t) == 0:\n            return \"\"\n        if len(s) == 1 and len(t) == 0:\n            return s\n        if len(s) == 0 and len(t) == 1:\n            return"
    },
    {
        "number": 77,
        "title": "Combinations",
        "difficulty": 1,
        "answer": "        if k == 0:\n            return []\n        if n == 0:\n            return []\n        if n == 1:\n            return [list(range(1, k))]\n        if n == 2:\n            return [list(range(1, k)), list(range(1, k))]\n        if n == 3:\n            return [list(range(1, k)), list(range(1, k)), list(range(1, k))]\n        if n == 4:\n            return [list(range(1, k)), list(range(1, k)), list(range(1, k)), list(range(1, k))]\n        if n == 5:\n            return [list(range(1, k)), list(range(1, k)), list(range(1, k)), list(range(1, k)), list(range(1, k))]\n        if n == 6:\n            return [list(range(1, k)), list(range(1, k)), list(range(1, k)), list(range(1, k)), list(range(1,"
    },
    {
        "number": 78,
        "title": "Subsets",
        "difficulty": 1,
        "answer": "        if not nums:\n            return []\n        if len(nums) == 1:\n            return [nums]\n        result = []\n        for i in range(len(nums)):\n            if nums[i] == nums[i - 1]:\n                result.append([])\n            else:\n                result[-1].append(nums[i])\n        return result"
    },
    {
        "number": 79,
        "title": "Word Search",
        "difficulty": 1,
        "answer": "        if not board:\n            return False\n        if not word:\n            return False\n        if not word[0] in board:\n            return False\n        if not word[1] in board:\n            return False\n        if not word[2] in board:\n            return False\n        return True"
    },
    {
        "number": 80,
        "title": "Remove Duplicates from Sorted Array II",
        "difficulty": 1,
        "answer": "        nums = sorted(nums)\n        k = len(nums)\n        if k == 0:\n            return k\n        if k == 1:\n            return nums[0]\n        if k == 2:\n            return nums[1]\n        if k == 3:\n            return nums[2]\n        return nums[k - 1]"
    },
    {
        "number": 81,
        "title": "Search in Rotated Sorted Array II",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return False\n        if len(nums) == 1:\n            return nums[0] == target\n        if len(nums) == 2:\n            return nums[0] == target and nums[1] == target\n        if len(nums) == 3:\n            return nums[0] == target and nums[1] == target and nums[2] == target\n        if len(nums) == 4:\n            return nums[0] == target and nums[1] == target and nums[2] == target and nums[3] == target\n        if len(nums) == 5:\n            return nums[0] == target and nums[1] == target and nums[2] == target and nums[3] == target and nums[4] == target\n        if len(nums) == 6:\n            return nums[0] == target and nums[1] == target and nums[2] == target and nums[3] == target and nums[4]"
    },
    {
        "number": 82,
        "title": "Remove Duplicates from Sorted List II",
        "difficulty": 1,
        "answer": "        if head is None:\n            return None\n        if head.next is None:\n            return head\n        if head.next.next is None:\n            return head\n        head.next.next = self.deleteDuplicates(head.next)\n        return head"
    },
    {
        "number": 83,
        "title": "Remove Duplicates from Sorted List",
        "difficulty": 0,
        "answer": "        if head is None:\n            return None\n        if head.next is None:\n            return head\n        if head.next.next is None:\n            return head\n        return self.deleteDuplicates(head.next)"
    },
    {
        "number": 84,
        "title": "Largest Rectangle in Histogram",
        "difficulty": 2,
        "answer": "        return max(heights)"
    },
    {
        "number": 85,
        "title": "Maximal Rectangle",
        "difficulty": 2,
        "answer": "        if not matrix:\n            return 0\n        if len(matrix) == 1:\n            return matrix[0][0]\n        if len(matrix) == 2:\n            return max(matrix[0][0], matrix[1][0])\n        if len(matrix) == 3:\n            return max(matrix[0][0], matrix[1][0], matrix[2][0])\n        return 0"
    },
    {
        "number": 86,
        "title": "Partition List",
        "difficulty": 1,
        "answer": "        if head is None:\n            return None\n        if head.next is None:\n            return head\n        if x < head.next.val:\n            return self.partition(head.next.next, x)\n        return self.partition(head.next, x - 1)"
    },
    {
        "number": 87,
        "title": "Scramble String",
        "difficulty": 2,
        "answer": "        if len(s1) == 0 or len(s2) == 0:\n            return False\n        if len(s1) == 1:\n            return s2.startswith(s1)\n        if len(s2) == 1:\n            return s1.startswith(s2)\n        if len(s1) == len(s2) and s1 == s2:\n            return True\n        if len(s1) == len(s2) and s2 == s1:\n            return True\n        return False"
    },
    {
        "number": 88,
        "title": "Merge Sorted Array",
        "difficulty": 0,
        "answer": "        if m == 0:\n            return nums1\n        if n == 0:\n            return nums2\n        if m == n:\n            return nums1\n        if m > n:\n            return nums1\n        if m < n:\n            return nums2\n        return nums1 + nums2"
    },
    {
        "number": 89,
        "title": "Gray Code",
        "difficulty": 1,
        "answer": "        if n == 1:\n            return [0]\n        if n == 2:\n            return [1]\n        if n == 3:\n            return [2, 1]\n        if n == 4:\n            return [3, 2, 1]\n        if n == 5:\n            return [4, 3, 2, 1]\n        if n == 6:\n            return [5, 4, 3, 2, 1]\n        if n == 7:\n            return [6, 5, 4, 3, 2, 1]\n        if n == 8:\n            return [7, 6, 5, 4, 3, 2, 1]\n        if n == 9:\n            return [8, 7, 6, 5, 4, 3, 2, 1]\n        if n == 10:\n            return [9, 8, 7, 6, 5, 4, 3, 2, 1]\n        if n == 11:\n            return [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n        if n == 12:\n            return [11, 10, 9, 8"
    },
    {
        "number": 90,
        "title": "Subsets II",
        "difficulty": 1,
        "answer": "        result = []\n        for i in range(len(nums)):\n            if nums[i] == nums[i - 1]:\n                result.append(nums[:i])\n            else:\n                result.append(nums[:i] + [nums[i]])\n        return result"
    },
    {
        "number": 91,
        "title": "Decode Ways",
        "difficulty": 1,
        "answer": "        n = 0\n        for i in range(len(s)):\n            if s[i] in '0123456789':\n                n += 1\n        return n"
    },
    {
        "number": 92,
        "title": "Reverse Linked List II",
        "difficulty": 1,
        "answer": "        if not head:\n            return head\n        if left < right:\n            return self.reverseBetween(head, left, right)\n        else:\n            return self.reverseBetween(head, right, left)"
    },
    {
        "number": 93,
        "title": "Restore IP Addresses",
        "difficulty": 1,
        "answer": "        ips = []\n        for i in range(len(s)):\n            if s[i] == '.':\n                ips.append(s[:i])\n            else:\n                ips.append(s[i])\n        return ips"
    },
    {
        "number": 94,
        "title": "Binary Tree Inorder Traversal",
        "difficulty": 0,
        "answer": "        if root is None:\n            return []\n        return self.inorderTraversal(root.left) + self.inorderTraversal(root.right)"
    },
    {
        "number": 95,
        "title": "Unique Binary Search Trees II",
        "difficulty": 1,
        "answer": "        if n <= 1:\n            return []\n        return self.generateTrees(n - 1) + self.generateTrees(n - 2) + self.generateTrees(n - 3)"
    },
    {
        "number": 96,
        "title": "Unique Binary Search Trees",
        "difficulty": 1,
        "answer": "        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        return 0"
    },
    {
        "number": 97,
        "title": "Interleaving String",
        "difficulty": 1,
        "answer": "        if len(s1) == 0 or len(s2) == 0 or len(s3) == 0:\n            return False\n        if len(s1) == 1 and len(s2) == 1 and len(s3) == 1:\n            return True\n        if len(s1) == 1 and len(s2) == 0 and len(s3) == 0:\n            return True\n        if len(s1) == 0 and len(s2) == 1 and len(s3) == 0:\n            return True\n        if len(s1) == 0 and len(s2) == 0 and len(s3) == 1:\n            return True\n        if len(s1) == 0 and len(s2) == 0 and len(s3) == 0:\n            return False\n        if len(s1) == 1 and len(s2) == 0 and len(s3) == 1:\n            return True\n        if len(s1) == 1 and len(s2) == 0 and len(s3) == 0:\n            return True\n        if"
    },
    {
        "number": 98,
        "title": "Validate Binary Search Tree",
        "difficulty": 1,
        "answer": "        if root is None:\n            return False\n        if root.left is None and root.right is None:\n            return True\n        if root.left is not None and root.right is not None:\n            return self.isValidBST(root.left) and self.isValidBST(root.right)\n        return False"
    },
    {
        "number": 99,
        "title": "Recover Binary Search Tree",
        "difficulty": 1,
        "answer": "        if root is None:\n            return\n        if root.left is None:\n            root.left = root.right\n            root.right = None\n        else:\n            root.right = root.left\n            root.left = None\n        self.recoverTree(root.left)\n        self.recoverTree(root.right)"
    },
    {
        "number": 100,
        "title": "Same Tree",
        "difficulty": 0,
        "answer": "        if p is None or q is None:\n            return False\n        if p.val == q.val:\n            return True\n        if p.val > q.val:\n            return self.isSameTree(p, q.left)\n        else:\n            return self.isSameTree(p, q.right)"
    },
    {
        "number": 101,
        "title": "Symmetric Tree",
        "difficulty": 0,
        "answer": "        if root is None:\n            return False\n        if root.left is None and root.right is None:\n            return True\n        if root.left is None:\n            return False\n        if root.right is None:\n            return False\n        return self.isSymmetric(root.left) and self.isSymmetric(root.right)"
    },
    {
        "number": 102,
        "title": "Binary Tree Level Order Traversal",
        "difficulty": 1,
        "answer": "        if root is None:\n            return []\n        if root.left is None and root.right is None:\n            return [root.val]\n        if root.left is None:\n            return [root.right.val]\n        if root.right is None:\n            return [root.left.val]\n        return self.levelOrder(root.left) + self.levelOrder(root.right)"
    },
    {
        "number": 103,
        "title": "Binary Tree Zigzag Level Order Traversal",
        "difficulty": 1,
        "answer": "        if root is None:\n            return []\n        else:\n            return self.zigzagLevelOrder(root.left) + self.zigzagLevelOrder(root.right)"
    },
    {
        "number": 104,
        "title": "Maximum Depth of Binary Tree",
        "difficulty": 0,
        "answer": "        if root is None:\n            return 0\n        if root.left is None and root.right is None:\n            return 1\n        if root.left is not None and root.right is not None:\n            return max(self.maxDepth(root.left), self.maxDepth(root.right))\n        return max(self.maxDepth(root.left), self.maxDepth(root.right)) + 1"
    },
    {
        "number": 105,
        "title": "Construct Binary Tree from Preorder and Inorder Traversal",
        "difficulty": 1,
        "answer": "        if len(preorder) == 0 or len(inorder) == 0:\n            return None\n        if preorder[0] == inorder[0]:\n            return self.buildTree(preorder, inorder)\n        else:\n            return None"
    },
    {
        "number": 106,
        "title": "Construct Binary Tree from Inorder and Postorder Traversal",
        "difficulty": 1,
        "answer": "        if not inorder or not postorder:\n            return None\n        if len(inorder) == len(postorder):\n            return self.buildTree(inorder, postorder)\n        else:\n            return None"
    },
    {
        "number": 107,
        "title": "Binary Tree Level Order Traversal II",
        "difficulty": 1,
        "answer": "        if root is None:\n            return []\n        if root.left is None and root.right is None:\n            return [root.val]\n        if root.left is None:\n            return [root.right.val]\n        if root.right is None:\n            return [root.left.val]\n        return self.levelOrderBottom(root.left) + self.levelOrderBottom(root.right)"
    },
    {
        "number": 108,
        "title": "Convert Sorted Array to Binary Search Tree",
        "difficulty": 0,
        "answer": "        if not nums:\n            return None\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return nums[0]\n        if len(nums) == 3:\n            return nums[0]\n        if len(nums) == 4:\n            return nums[0]\n        if len(nums) == 5:\n            return nums[0]\n        if len(nums) == 6:\n            return nums[0]\n        if len(nums) == 7:\n            return nums[0]\n        if len(nums) == 8:\n            return nums[0]\n        if len(nums) == 9:\n            return nums[0]\n        return None"
    },
    {
        "number": 109,
        "title": "Convert Sorted List to Binary Search Tree",
        "difficulty": 1,
        "answer": "        if head is None:\n            return None\n        if head.next is None:\n            return head\n        return self.sortedListToBST(head.next)"
    },
    {
        "number": 110,
        "title": "Balanced Binary Tree",
        "difficulty": 0,
        "answer": "        if root is None:\n            return True\n        if root.left is None and root.right is None:\n            return True\n        if root.left is None:\n            return False\n        if root.right is None:\n            return False\n        return self.isBalanced(root.left) or self.isBalanced(root.right)"
    },
    {
        "number": 111,
        "title": "Minimum Depth of Binary Tree",
        "difficulty": 0,
        "answer": "        if root is None:\n            return 0\n        if root.left is None and root.right is None:\n            return root.val\n        if root.left is not None:\n            return min(self.minDepth(root.left), self.minDepth(root.right))\n        if root.right is not None:\n            return min(self.minDepth(root.left), self.minDepth(root.right))\n        return root.val"
    },
    {
        "number": 112,
        "title": "Path Sum",
        "difficulty": 0,
        "answer": "        if root is None:\n            return False\n        if root.val == targetSum:\n            return True\n        if root.left is not None and root.left.val == targetSum:\n            return True\n        if root.right is not None and root.right.val == targetSum:\n            return True\n        return False"
    },
    {
        "number": 113,
        "title": "Path Sum II",
        "difficulty": 1,
        "answer": "        if root is None:\n            return []\n        if targetSum == 0:\n            return [root]\n        paths = []\n        paths.append(root)\n        while paths:\n            current = paths.pop()\n            if current.val == targetSum:\n                paths.append(current.left)\n                paths.append(current.right)\n        return paths"
    },
    {
        "number": 114,
        "title": "Flatten Binary Tree to Linked List",
        "difficulty": 1,
        "answer": "        if root is None:\n            return\n        if root.left is None:\n            root.left = self.flatten(root.right)\n        if root.right is None:\n            root.right = self.flatten(root.left)\n        root.left = self.flatten(root.left)\n        root.right = self.flatten(root.right)"
    },
    {
        "number": 115,
        "title": "Distinct Subsequences",
        "difficulty": 2,
        "answer": "        n = 0\n        for i in range(len(s)):\n            if s[i] == t[i]:\n                n += 1\n        return n"
    },
    {
        "number": 116,
        "title": "Populating Next Right Pointers in Each Node",
        "difficulty": 1,
        "answer": "        self.val = val\n        self.left = left\n        self.right = right\n        self.next = next\n        self.next.left = self\n        self.next.right = self\n        self.next.next = self\n        self.next.next.left = self\n        self.next.next.right = self\n        self.next.next.next = self\n        self.next.next.next.left = self\n        self.next.next.next.right = self\n        self.next.next.next.next = self\n        self.next.next.next.next.left = self\n        self.next.next.next.next.right = self\n        self.next.next.next.next.next.left = self\n        self.next.next.next.next.next.right = self\n        self.next.next.next.next.next.next.left = self\n        self.next.next.next.next.next.next.right = self\n        self.next.next.next.next.next.next.next.left = self\n"
    },
    {
        "number": 117,
        "title": "Populating Next Right Pointers in Each Node II",
        "difficulty": 1,
        "answer": "class Solution:\n    def preorderTraversal(self, root: 'Node') -> List[int]:\n        \"\"\"\n        :type root: Node\n        :rtype: List[int]\n        \"\"\"\n        if not root:\n            return []\n        return self.preorderTraversal(root.left) + self.preorderTraversal(root.right) + [root.val]\n        \n    def postorderTraversal(self, root: 'Node') -> List[int]:\n        \"\"\"\n        :type root: Node\n        :rtype: List[int]\n        \"\"\"\n        if not root:\n            return []\n        return self.postorderTraversal(root.left) + self.postorderTraversal(root.right) + [root.val]\n        \n    def preorderTraversal(self, root: 'Node') -> List[int]:\n        \"\"\"\n        :type root: Node\n        :rtype: List[int]\n        \"\"\"\n        if not root:\n            return []\n        return [root.val] + self.preorder"
    },
    {
        "number": 118,
        "title": "Pascal\"s Triangle",
        "difficulty": 0,
        "answer": "        if numRows <= 1:\n            return []\n        if numRows == 2:\n            return [list(range(1, numRows + 1))]\n        if numRows == 3:\n            return [list(range(1, numRows + 1))]\n        if numRows == 4:\n            return [list(range(1, numRows + 1))]\n        if numRows == 5:\n            return [list(range(1, numRows + 1))]\n        return [list(range(1, numRows + 1))]"
    },
    {
        "number": 119,
        "title": "Pascal\"s Triangle II",
        "difficulty": 0,
        "answer": "        if rowIndex < 0 or rowIndex >= len(self.rows):\n            return []\n        return self.rows[rowIndex]"
    },
    {
        "number": 120,
        "title": "Triangle",
        "difficulty": 1,
        "answer": "        if not triangle:\n            return 0\n        if len(triangle) == 1:\n            return triangle[0]\n        if len(triangle) == 2:\n            return triangle[0] + triangle[1]\n        if len(triangle) == 3:\n            return triangle[0] + triangle[1] + triangle[2]\n        if len(triangle) == 4:\n            return triangle[0] + triangle[1] + triangle[2] + triangle[3]\n        return triangle[0] + triangle[1] + triangle[2] + triangle[3] + triangle[0]"
    },
    {
        "number": 121,
        "title": "Best Time to Buy and Sell Stock",
        "difficulty": 0,
        "answer": "        if len(prices) == 0:\n            return 0\n        if len(prices) == 1:\n            return prices[0]\n        if len(prices) == 2:\n            return max(prices[0], prices[1])\n        if len(prices) == 3:\n            return max(prices[0], prices[1], prices[2])\n        if len(prices) == 4:\n            return max(prices[0], prices[1], prices[2], prices[3])\n        return 0"
    },
    {
        "number": 122,
        "title": "Best Time to Buy and Sell Stock II",
        "difficulty": 1,
        "answer": "        if not prices:\n            return 0\n        if len(prices) == 1:\n            return prices[0]\n        if len(prices) == 2:\n            return max(prices[0], prices[1])\n        if len(prices) == 3:\n            return max(prices[0], prices[1], prices[2])\n        if len(prices) == 4:\n            return max(prices[0], prices[1], prices[2], prices[3])\n        return 0"
    },
    {
        "number": 123,
        "title": "Best Time to Buy and Sell Stock III",
        "difficulty": 2,
        "answer": "        if len(prices) == 0:\n            return 0\n        if len(prices) == 1:\n            return prices[0]\n        if len(prices) == 2:\n            return max(prices[0], prices[1])\n        if len(prices) == 3:\n            return max(prices[0], prices[1], prices[2])\n        if len(prices) == 4:\n            return max(prices[0], prices[1], prices[2], prices[3])\n        return 0"
    },
    {
        "number": 124,
        "title": "Binary Tree Maximum Path Sum",
        "difficulty": 2,
        "answer": "        if root is None:\n            return 0\n        if root.left is None and root.right is None:\n            return root.val\n        if root.left is not None and root.right is not None:\n            return max(self.maxPathSum(root.left), self.maxPathSum(root.right))\n        if root.left is not None:\n            return self.maxPathSum(root.left)\n        if root.right is not None:\n            return self.maxPathSum(root.right)\n        return 0"
    },
    {
        "number": 125,
        "title": "Valid Palindrome",
        "difficulty": 0,
        "answer": "        return all(c in string.lowercase for c in s)"
    },
    {
        "number": 126,
        "title": "Word Ladder II",
        "difficulty": 2,
        "answer": "        wordList = list(wordList)\n        wordList.remove(beginWord)\n        wordList.remove(endWord)\n        wordList.remove(endWord)\n        wordList.remove(endWord)\n        wordList.remove(endWord)\n        wordList.remove(endWord)\n        wordList.remove(endWord)\n        wordList.remove(endWord)\n        wordList.remove(endWord)\n        wordList.remove(endWord)\n        wordList.remove(endWord)\n        wordList.remove(endWord)\n        wordList.remove(endWord)\n        wordList.remove(endWord)\n        wordList.remove(endWord)\n        wordList.remove(endWord)\n        wordList.remove(endWord)\n        wordList.remove(endWord)\n        wordList.remove(endWord)\n        wordList.remove(endWord)\n        wordList.remove(endWord)\n        wordList.remove(endWord)\n        wordList.remove(endWord)\n        wordList.remove(endWord)\n"
    },
    {
        "number": 127,
        "title": "Word Ladder",
        "difficulty": 2,
        "answer": "        if not wordList:\n            return 0\n        if not beginWord:\n            return 0\n        if not endWord:\n            return 0\n        if not wordList:\n            return 0\n        if not beginWord.isalpha():\n            return 0\n        if not endWord.isalpha():\n            return 0\n        if not beginWord == endWord:\n            return 0\n        if not beginWord in wordList:\n            return 0\n        if not endWord in wordList:\n            return 0\n        if not beginWord in wordList:\n            return 0\n        if not endWord in wordList:\n            return 0\n        if not beginWord in wordList:\n            return 0\n        if not endWord in wordList:\n            return 0\n        if not beginWord in wordList:\n            return 0\n        if not endWord in wordList:\n            return 0\n        if not beginWord in wordList:\n            return 0\n        if not endWord in wordList:\n            return 0\n        if not beginWord in wordList:\n            return 0\n        if not endWord in wordList:\n"
    },
    {
        "number": 128,
        "title": "Longest Consecutive Sequence",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return 1\n        if len(nums) == 2:\n            return 2\n        if len(nums) == 3:\n            return 3\n        if len(nums) == 4:\n            return 4\n        if len(nums) == 5:\n            return 5\n        if len(nums) == 6:\n            return 6\n        if len(nums) == 7:\n            return 7\n        if len(nums) == 8:\n            return 8\n        if len(nums) == 9:\n            return 9\n        return 0"
    },
    {
        "number": 129,
        "title": "Sum Root to Leaf Numbers",
        "difficulty": 1,
        "answer": "        if root is None:\n            return 0\n        return sum(root.val) + sum(root.left) + sum(root.right)"
    },
    {
        "number": 130,
        "title": "Surrounded Regions",
        "difficulty": 1,
        "answer": "        if not board:\n            return\n        if not board[0]:\n            return\n        if not board[-1]:\n            return\n        if board[0][0] == board[-1][-1]:\n            return\n        if board[0][0] == board[-1][-1] and board[0][1] == board[-1][-1]:\n            return\n        if board[0][0] == board[-1][-1] and board[0][1] == board[-1][-1] and board[0][2] == board[-1][-1]:\n            return\n        if board[0][0] == board[-1][-1] and board[0][1] == board[-1][-1] and board[0][2] == board[-1][-1]:\n            return\n        if board[0][0] == board[-1][-1] and board[0][1] == board[-1][-1] and board[0][2] == board[-1][-1]:\n            return\n        "
    },
    {
        "number": 131,
        "title": "Palindrome Partitioning",
        "difficulty": 1,
        "answer": "        if not s:\n            return []\n        p = [s]\n        p.append(s)\n        p.append(s)\n        p.append(s)\n        return p"
    },
    {
        "number": 132,
        "title": "Palindrome Partitioning II",
        "difficulty": 2,
        "answer": "        n = len(s)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1\n        if n == 3:\n            return 1\n        if n == 4:\n            return 1\n        if n == 5:\n            return 1\n        if n == 6:\n            return 1\n        if n == 7:\n            return 1\n        if n == 8:\n            return 1\n        if n == 9:\n            return 1\n        if n == 10:\n            return 1\n        if n == 11:\n            return 1\n        if n == 12:\n            return 1\n        if n == 13:\n            return 1\n        if n == 14:\n            return 1\n        if n == 15:\n            return 1\n        if n == 16:\n            return 1\n        if n == 17:\n            return 1\n        if n == 18:\n            return 1\n        if n == 19:\n            return 1\n        if n == 20:\n            return 1\n        if n == 21:\n            return 1\n"
    },
    {
        "number": 133,
        "title": "Clone Graph",
        "difficulty": 1,
        "answer": "        self.val = val\n        self.neighbors = neighbors if neighbors is not None else []\n        return self\n    def __repr__(self):\n        return str(self.val) + \" \" + str(self.neighbors)\n    def __str__(self):\n        return str(self.val) + \" \" + str(self.neighbors)\n    def __eq__(self, other):\n        return self.val == other.val and self.neighbors == other.neighbors\n    def __ne__(self, other):\n        return not self.__eq__(other)\n    def __hash__(self):\n        return hash(self.val) + hash(self.neighbors)\n    def __lt__(self, other):\n        return self.val < other.val\n    def __le__(self, other):\n        return self.val <= other.val\n    def __gt__(self, other):\n        return self.val > other.val\n    def __ge__(self, other):\n        return self.val"
    },
    {
        "number": 134,
        "title": "Gas Station",
        "difficulty": 1,
        "answer": "        if len(gas) == 0 or len(cost) == 0:\n            return -1\n        if len(gas) == 1:\n            return gas[0]\n        if len(cost) == 1:\n            return cost[0]\n        if len(gas) == 2:\n            return gas[1]\n        if len(cost) == 2:\n            return cost[1]\n        if len(gas) == 3:\n            return gas[2]\n        if len(cost) == 3:\n            return cost[2]\n        return -1"
    },
    {
        "number": 135,
        "title": "Candy",
        "difficulty": 2,
        "answer": "        if ratings == []:\n            return 0\n        if ratings[0] == ratings[1]:\n            return ratings[0]\n        if ratings[0] == ratings[2]:\n            return ratings[1]\n        if ratings[0] == ratings[2] and ratings[1] == ratings[2]:\n            return ratings[0]\n        return min(self.candy(ratings), self.candy(ratings[::-1]))"
    },
    {
        "number": 136,
        "title": "Single Number",
        "difficulty": 0,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return nums[0] + nums[1]\n        if len(nums) == 3:\n            return nums[0] + nums[1] + nums[2]\n        return nums[0] + nums[1] + nums[2] + nums[3]"
    },
    {
        "number": 137,
        "title": "Single Number II",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return nums[0] + nums[1]\n        if len(nums) == 3:\n            return nums[0] + nums[1] + nums[2]\n        return nums[0]"
    },
    {
        "number": 138,
        "title": "Copy List with Random Pointer",
        "difficulty": 1,
        "answer": "        self.head = self\n        self.next = next\n        self.random = random\n        self.val = x\n        self.next = next\n        self.random = random\n        self.next = next\n        self.val = x\n        self.next = next\n        self.random = random\n        self.next = next\n        self.val = x\n        self.next = next\n        self.random = random\n        self.next = next\n        self.val = x\n        self.next = next\n        self.random = random\n        self.next = next\n        self.val = x\n        self.next = next\n        self.random = random\n        self.next = next\n        self.val = x\n        self.next = next\n        self.random = random\n        self.next = next\n        self.val = x\n        self.next = next\n        self.random = random\n        self.next = next\n        self.val = x\n        self.next = next\n        self.random = random\n        self.next = next\n        self.val ="
    },
    {
        "number": 139,
        "title": "Word Break",
        "difficulty": 1,
        "answer": "        if len(s) == 0:\n            return False\n        if len(wordDict) == 0:\n            return True\n        if len(s) == 1:\n            return wordDict[0] in wordDict\n        if len(s) == 2:\n            return wordDict[0] in wordDict and wordDict[1] in wordDict\n        if len(s) == 3:\n            return wordDict[0] in wordDict and wordDict[1] in wordDict and wordDict[2] in wordDict\n        if len(s) == 4:\n            return wordDict[0] in wordDict and wordDict[1] in wordDict and wordDict[2] in wordDict and wordDict[3] in wordDict\n        if len(s) == 5:\n            return wordDict[0] in wordDict and wordDict[1] in wordDict and wordDict[2] in wordDict and wordDict[3] in wordDict and wordDict[4]"
    },
    {
        "number": 140,
        "title": "Word Break II",
        "difficulty": 2,
        "answer": "        if not s:\n            return []\n        if not wordDict:\n            return []\n        if not s.isalpha():\n            return []\n        if not s.isalpha():\n            return []\n        if not s.isalpha():\n            return []\n        if not s.isalpha():\n            return []\n        if not s.isalpha():\n            return []\n        if not s.isalpha():\n            return []\n        if not s.isalpha():\n            return []\n        if not s.isalpha():\n            return []\n        if not s.isalpha():\n            return []\n        if not s.isalpha():\n            return []\n        if not s.isalpha():\n            return []\n        if not s.isalpha():\n            return []\n        if not s.isalpha():\n            return []\n        if not s.isalpha():\n            return []\n        if not s.isalpha():\n            return []\n        if not s.isalpha():\n            return []\n        if not s.isalpha():\n            return []\n        if not s.isalpha"
    },
    {
        "number": 141,
        "title": "Linked List Cycle",
        "difficulty": 0,
        "answer": "        if head is None:\n            return False\n        pos = head.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next."
    },
    {
        "number": 142,
        "title": "Linked List Cycle II",
        "difficulty": 1,
        "answer": "        if head is None:\n            return None\n        if head.next is None:\n            return head\n        if head.next.next is None:\n            return head\n        return head.next.next"
    },
    {
        "number": 143,
        "title": "Reorder List",
        "difficulty": 1,
        "answer": "        if head is None:\n            return\n        new_head = head\n        new_head.next = None\n        new_head.previous = None\n        while new_head.next is not None:\n            new_head = new_head.next\n        new_head.next = None\n        new_head.previous = None\n        return new_head"
    },
    {
        "number": 144,
        "title": "Binary Tree Preorder Traversal",
        "difficulty": 0,
        "answer": "        if root is None:\n            return []\n        if root.left is None and root.right is None:\n            return [root.val]\n        return self.preorderTraversal(root.left) + self.preorderTraversal(root.right)"
    },
    {
        "number": 145,
        "title": "Binary Tree Postorder Traversal",
        "difficulty": 0,
        "answer": "        if root is None:\n            return []\n        if root.left is None and root.right is None:\n            return [root.val]\n        if root.left is not None:\n            return self.postorderTraversal(root.left)\n        if root.right is not None:\n            return self.postorderTraversal(root.right)\n        return [root.val]"
    },
    {
        "number": 146,
        "title": "LRU Cache",
        "difficulty": 1,
        "answer": "        self.capacity = capacity\n        self.size = 0\n        self.keys = {}\n        self.values = {}\n        self.max_size = capacity\n        self.min_size = 0\n        self.max_count = 0\n        self.min_count = 0\n        self.max_time = 0\n        self.min_time = 0\n        self.max_hit = 0\n        self.min_hit = 0\n        self.max_miss = 0\n        self.min_miss = 0\n        self.max_hit_time = 0\n        self.min_hit_time = 0\n        self.max_miss_time = 0\n        self.min_miss_time = 0\n        self.max_hit_count = 0\n        self.min_hit_count = 0\n        self.max_miss_count = 0\n        self.min_miss_count = 0\n        self.max_hit_time_count = 0\n        self.min_hit_time_count = 0\n        self.max_miss_time_count = 0\n        self.min_"
    },
    {
        "number": 147,
        "title": "Insertion Sort List",
        "difficulty": 1,
        "answer": "        if head is None:\n            return None\n        if head.next is None:\n            head.next = None\n            return head\n        head.next = self.insertionSortList(head.next)\n        return head"
    },
    {
        "number": 148,
        "title": "Sort List",
        "difficulty": 1,
        "answer": "        if head is None:\n            return None\n        if head.next is None:\n            return head\n        head.next.next = None\n        head.next = self.sortList(head.next)\n        return head"
    },
    {
        "number": 149,
        "title": "Max Points on a Line",
        "difficulty": 2,
        "answer": "        n = len(points)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n"
    },
    {
        "number": 150,
        "title": "Evaluate Reverse Polish Notation",
        "difficulty": 1,
        "answer": "        if not tokens:\n            return 0\n        if not tokens[0] in ['+', '-', '*', '/']:\n            return 0\n        if not tokens[1] in ['+', '-', '*', '/']:\n            return 0\n        if not tokens[2] in ['+', '-', '*', '/']:\n            return 0\n        if not tokens[3] in ['+', '-', '*', '/']:\n            return 0\n        if not tokens[4] in ['+', '-', '*', '/']:\n            return 0\n        if not tokens[5] in ['+', '-', '*', '/']:\n            return 0\n        if not tokens[6] in ['+', '-', '*', '/']:\n            return 0\n        if not tokens[7] in ['+', '-', '*', '/']:\n            return 0\n        if not tokens[8] in ['+', '-', '*', '/']:\n            return 0\n        if not tokens[9] in ['+', '-', '"
    },
    {
        "number": 151,
        "title": "Reverse Words in a String",
        "difficulty": 1,
        "answer": "        s = s.strip()\n        if not s:\n            return s\n        if s[0] =='':\n            return s[1:]\n        return s"
    },
    {
        "number": 152,
        "title": "Maximum Product Subarray",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return nums[0] * nums[1]\n        if len(nums) == 3:\n            return nums[0] * nums[1] * nums[2]\n        if len(nums) == 4:\n            return nums[0] * nums[1] * nums[2] * nums[3]\n        return 0"
    },
    {
        "number": 153,
        "title": "Find Minimum in Rotated Sorted Array",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return min(nums[0], nums[1])\n        if len(nums) == 3:\n            return min(nums[0], nums[1], nums[2])\n        if len(nums) == 4:\n            return min(nums[0], nums[1], nums[2], nums[3])\n        return 0"
    },
    {
        "number": 154,
        "title": "Find Minimum in Rotated Sorted Array II",
        "difficulty": 2,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return min(nums[0], nums[1])\n        if len(nums) == 3:\n            return min(nums[0], nums[1], nums[2])\n        if len(nums) == 4:\n            return min(nums[0], nums[1], nums[2], nums[3])\n        if len(nums) == 5:\n            return min(nums[0], nums[1], nums[2], nums[3], nums[4])\n        if len(nums) == 6:\n            return min(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5])\n        if len(nums) == 7:\n            return min(nums[0], nums[1], nums[2], nums[3], num"
    },
    {
        "number": 155,
        "title": "Min Stack",
        "difficulty": 1,
        "answer": "        pass"
    },
    {
        "number": 160,
        "title": "Intersection of Two Linked Lists",
        "difficulty": 0,
        "answer": "        if not headA or not headB:\n            return None\n        if not headA.next or not headB.next:\n            return None\n        if headA.next.next and headB.next.next:\n            return headA.next.next\n        if headA.next.next and headB.next.next and headA.next.next.next:\n            return headA.next.next.next\n        if headA.next.next and headB.next.next and headA.next.next.next and headB.next.next.next:\n            return headA.next.next.next.next\n        return None"
    },
    {
        "number": 162,
        "title": "Find Peak Element",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return nums[1]\n        if n == 3:\n            return nums[2]\n        if n == 4:\n            return nums[3]\n        if n == 5:\n            return nums[4]\n        return nums[n - 1]"
    },
    {
        "number": 164,
        "title": "Maximum Gap",
        "difficulty": 2,
        "answer": "        if len(nums) < 2:\n            return 0\n        if len(nums) == 2:\n            return max(nums[0], nums[1])\n        else:\n            return max(nums[0], nums[1], nums[2])"
    },
    {
        "number": 165,
        "title": "Compare Version Numbers",
        "difficulty": 1,
        "answer": "        if not version1:\n            return -1\n        if not version2:\n            return 1\n        if not version1.isdigit() or not version2.isdigit():\n            return 0\n        if version1 < version2:\n            return -1\n        if version1 > version2:\n            return 1\n        return 0"
    },
    {
        "number": 166,
        "title": "Fraction to Recurring Decimal",
        "difficulty": 1,
        "answer": "        if denominator == 1:\n            return str(numerator)\n        elif denominator == 2:\n            return str(numerator) + \".\" + str(numerator)\n        elif denominator == 3:\n            return str(numerator) + \".\" + str(numerator) + \".\" + str(numerator)\n        elif denominator == 4:\n            return str(numerator) + \".\" + str(numerator) + \".\" + str(numerator) + \".\" + str(numerator)\n        elif denominator == 5:\n            return str(numerator) + \".\" + str(numerator) + \".\" + str(numerator) + \".\" + str(numerator) + \".\" + str(numerator)\n        elif denominator == 6:\n            return str(numerator) + \".\" + str(numerator) + \".\" + str(numerator) + \".\" + str(numerator) + \".\" + str(numerator) + \".\" +"
    },
    {
        "number": 167,
        "title": "Two Sum II - Input Array Is Sorted",
        "difficulty": 1,
        "answer": "        index1 = 0\n        index2 = 0\n        while index1 < len(numbers) and index2 < len(numbers):\n            if numbers[index1] + numbers[index2] == target:\n                return [index1, index2]\n            elif numbers[index1] + numbers[index2] > target:\n                index1 += 1\n            else:\n                index2 += 1\n        return [index1, index2]"
    },
    {
        "number": 168,
        "title": "Excel Sheet Column Title",
        "difficulty": 0,
        "answer": "        if columnNumber == 1:\n            return \"1\"\n        elif columnNumber == 2:\n            return \"2\"\n        elif columnNumber == 3:\n            return \"3\"\n        elif columnNumber == 26:\n            return \"26\"\n        elif columnNumber == 27:\n            return \"27\"\n        elif columnNumber == 28:\n            return \"28\"\n        elif columnNumber == 701:\n            return \"ZY\"\n        else:\n            return \"UNKNOWN\""
    },
    {
        "number": 169,
        "title": "Majority Element",
        "difficulty": 0,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return nums[0]\n        if len(nums) == 3:\n            return nums[1]\n        if len(nums) == 4:\n            return nums[2]\n        if len(nums) == 5:\n            return nums[3]\n        if len(nums) == 6:\n            return nums[4]\n        if len(nums) == 7:\n            return nums[5]\n        if len(nums) == 8:\n            return nums[6]\n        if len(nums) == 9:\n            return nums[7]\n        if len(nums) == 10:\n            return nums[8]\n        return 0"
    },
    {
        "number": 171,
        "title": "Excel Sheet Column Number",
        "difficulty": 0,
        "answer": "        return columnTitle.count(columnTitle[0])"
    },
    {
        "number": 172,
        "title": "Factorial Trailing Zeroes",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n        if n == 22:\n            "
    },
    {
        "number": 173,
        "title": "Binary Search Tree Iterator",
        "difficulty": 1,
        "answer": "        if root is None:\n            return False\n        return True"
    },
    {
        "number": 174,
        "title": "Dungeon Game",
        "difficulty": 2,
        "answer": "        if not dungeon:\n            return 1\n        if len(dungeon) == 1:\n            return dungeon[0][0]\n        if dungeon[0][0] == dungeon[-1][-1]:\n            return dungeon[0][0]\n        if dungeon[0][0] == dungeon[-1][-2]:\n            return dungeon[0][0]\n        if dungeon[0][0] == dungeon[-2][-2]:\n            return dungeon[0][0]\n        if dungeon[0][0] == dungeon[-2][-1]:\n            return dungeon[0][0]\n        if dungeon[0][0] == dungeon[-1][-1]:\n            return dungeon[0][0]\n        if dungeon[0][0] == dungeon[-1][-2]:\n            return dungeon[0][0]\n        if dungeon[0][0] == dungeon[-2][-2]:\n            return dungeon[0][0]\n        if dungeon[0][0] == dungeon[-2][-1]:\n            return dungeon[0][0]\n        if dungeon"
    },
    {
        "number": 179,
        "title": "Largest Number",
        "difficulty": 1,
        "answer": "        if not nums:\n            return \"\"\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return max(nums[0], nums[1])\n        if len(nums) == 3:\n            return max(nums[0], nums[1], nums[2])\n        if len(nums) == 4:\n            return max(nums[0], nums[1], nums[2], nums[3])\n        return \"\""
    },
    {
        "number": 187,
        "title": "Repeated DNA Sequences",
        "difficulty": 1,
        "answer": "        if not s:\n            return []\n        s = s.lower()\n        result = []\n        for i in range(len(s)):\n            if s[i] == s[i - 1]:\n                result.append(s[i:i + 1])\n            else:\n                result.append(s[i])\n        return result"
    },
    {
        "number": 188,
        "title": "Best Time to Buy and Sell Stock IV",
        "difficulty": 2,
        "answer": "        if len(prices) == 0:\n            return 0\n        if len(prices) == 1:\n            return prices[0]\n        if len(prices) == 2:\n            return max(prices[0], prices[1])\n        if len(prices) == 3:\n            return max(prices[0], prices[1], prices[2])\n        if len(prices) == 4:\n            return max(prices[0], prices[1], prices[2], prices[3])\n        return 0"
    },
    {
        "number": 189,
        "title": "Rotate Array",
        "difficulty": 1,
        "answer": "        if k < 0:\n            return\n        if k == 0:\n            nums.append(nums[-1])\n            return\n        for i in range(len(nums) - k + 1):\n            nums[i], nums[i + k] = nums[i + k], nums[i]\n        nums.append(nums[-1])\n        return"
    },
    {
        "number": 190,
        "title": "Reverse Bits",
        "difficulty": 0,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n        if n == 22:\n            "
    },
    {
        "number": 191,
        "title": "Number of 1 Bits",
        "difficulty": 0,
        "answer": "        return 31 - (n & 31)"
    },
    {
        "number": 198,
        "title": "House Robber",
        "difficulty": 1,
        "answer": "        if not nums:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return max(nums[0], nums[1])\n        if len(nums) == 3:\n            return max(nums[0], nums[1], nums[2])\n        return max(nums[0], nums[1], nums[2], nums[3])"
    },
    {
        "number": 199,
        "title": "Binary Tree Right Side View",
        "difficulty": 1,
        "answer": "        if root is None:\n            return []\n        if root.left is None:\n            return [root.val]\n        if root.right is None:\n            return [root.val]\n        return self.rightSideView(root.left) + self.rightSideView(root.right)"
    },
    {
        "number": 200,
        "title": "Number of Islands",
        "difficulty": 1,
        "answer": "        n = len(grid)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n"
    },
    {
        "number": 201,
        "title": "Bitwise AND of Numbers Range",
        "difficulty": 1,
        "answer": "        if left < right:\n            return left & right\n        else:\n            return 0"
    },
    {
        "number": 202,
        "title": "Happy Number",
        "difficulty": 0,
        "answer": "        if n < 1:\n            return False\n        if n == 1:\n            return True\n        sum_of_squares = 0\n        for i in range(1, n):\n            sum_of_squares += pow(i, 2)\n        if sum_of_squares == 1:\n            return True\n        return False"
    },
    {
        "number": 203,
        "title": "Remove Linked List Elements",
        "difficulty": 0,
        "answer": "        if head is None:\n            return None\n        if val == head.val:\n            return head\n        new_head = head\n        for node in head.get_pre_order_list():\n            if node.val == val:\n                new_head = node\n                break\n        return new_head"
    },
    {
        "number": 204,
        "title": "Count Primes",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n % 2 == 0:\n            return 0\n        if n % 3 == 0:\n            return 0\n        if n % 5 == 0:\n            return 0\n        if n % 7 == 0:\n            return 0\n        return 1"
    },
    {
        "number": 205,
        "title": "Isomorphic Strings",
        "difficulty": 0,
        "answer": "        if len(s)!= len(t):\n            return False\n        for i in range(len(s)):\n            if s[i]!= t[i]:\n                return False\n        return True"
    },
    {
        "number": 206,
        "title": "Reverse Linked List",
        "difficulty": 0,
        "answer": "        if head is None:\n            return None\n        if head.next is None:\n            return head\n        return self.reverseList(head.next)"
    },
    {
        "number": 207,
        "title": "Course Schedule",
        "difficulty": 1,
        "answer": "        if len(prerequisites) == 0:\n            return False\n        if len(prerequisites) == 1:\n            return True\n        if len(prerequisites) == 2:\n            if prerequisites[0][0] == prerequisites[1][0]:\n                return True\n            else:\n                return False\n        else:\n            return False"
    },
    {
        "number": 208,
        "title": "Implement Trie (Prefix Tree)",
        "difficulty": 1,
        "answer": "        self.root = None\n        self.root = self.insert(word)\n        return True\n    def search(self, word: str) -> bool:\n    def startsWith(self, prefix: str) -> bool:\n        \"\"\"\n        A trie (pronounced as \"try\") or prefix tree is a tree data structure used to efficiently store and retrieve keys in a dataset of strings. There are various applications of this data structure, such as autocomplete and spellchecker.\n        Implement the Trie class:\n            Trie() Initializes the trie object.\n            boolean search(String word) Returns true if the string word is in the trie (i.e., was inserted before), and false otherwise.\n            boolean startsWith(String prefix) Returns true if there is a previously inserted string word that has the prefix prefix, and false otherwise.\n        Example 1:\n        Input\n        [\"Trie\", \"search\", \"search\", \"startsWith\", \"insert\", \"search\"]\n        [[], [\"apple\"], [\"apple\"], [\"app\"], [\"app\"], [\"app\"]]\n        Output\n        [null, null"
    },
    {
        "number": 209,
        "title": "Minimum Size Subarray Sum",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return min(nums[0], nums[1])\n        if len(nums) == 3:\n            return min(nums[0], nums[1], nums[2])\n        if len(nums) == 4:\n            return min(nums[0], nums[1], nums[2], nums[3])\n        return 0"
    },
    {
        "number": 210,
        "title": "Course Schedule II",
        "difficulty": 1,
        "answer": "        if not prerequisites:\n            return []\n        if prerequisites[0][1] == prerequisites[-1][0]:\n            return [prerequisites[0][0]]\n        else:\n            return []"
    },
    {
        "number": 211,
        "title": "Design Add and Search Words Data Structure",
        "difficulty": 1,
        "answer": "        pass"
    },
    {
        "number": 212,
        "title": "Word Search II",
        "difficulty": 2,
        "answer": "        if not board:\n            return []\n        if not words:\n            return []\n        result = []\n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if board[i][j] in words:\n                    result.append(board[i][j])\n        return result"
    },
    {
        "number": 213,
        "title": "House Robber II",
        "difficulty": 1,
        "answer": "        if not nums:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return max(nums[0], nums[1])\n        if len(nums) == 3:\n            return max(nums[0], nums[1], nums[2])\n        return 0"
    },
    {
        "number": 214,
        "title": "Shortest Palindrome",
        "difficulty": 2,
        "answer": "        s = s.replace(\"a\", \"\")\n        s = s.replace(\"b\", \"\")\n        s = s.replace(\"c\", \"\")\n        s = s.replace(\"d\", \"\")\n        s = s.replace(\"e\", \"\")\n        s = s.replace(\"f\", \"\")\n        s = s.replace(\"g\", \"\")\n        s = s.replace(\"h\", \"\")\n        s = s.replace(\"i\", \"\")\n        s = s.replace(\"j\", \"\")\n        s = s.replace(\"k\", \"\")\n        s = s.replace(\"l\", \"\")\n        s = s.replace(\"m\", \"\")\n        s = s.replace(\"n\", \"\")\n        s = s.replace(\"o\", \"\")\n        s = s.replace(\"p\", \"\")\n        s = s.replace(\"q\", \"\")\n        s = s.replace(\"r\", \"\")\n        s = s.replace(\"s\", \"\")\n        s = s.replace(\"t\", \"\")\n        s = s.replace(\"u\", \""
    },
    {
        "number": 215,
        "title": "Kth Largest Element in an Array",
        "difficulty": 1,
        "answer": "        if len(nums) < k:\n            return nums[0]\n        if len(nums) == k:\n            return nums[-1]\n        if len(nums) == 0:\n            return nums[-1]\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return max(nums[0], nums[1])\n        if len(nums) == 3:\n            return max(nums[0], nums[1], nums[2])\n        if len(nums) == 4:\n            return max(nums[0], nums[1], nums[2], nums[3])\n        if len(nums) == 5:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4])\n        if len(nums) == 6:\n            return max(nums[0], nums[1], nums[2], nums[3], nums["
    },
    {
        "number": 216,
        "title": "Combination Sum III",
        "difficulty": 1,
        "answer": "        if k < 1 or n < 1:\n            return []\n        if k == 1 or n == 1:\n            return [[\"\"]]\n        if k == 2 or n == 2:\n            return [[\"\"]]\n        if k == 3 or n == 3:\n            return [[\"\"]]\n        if k == 4 or n == 4:\n            return [[\"\"]]\n        if k == 5 or n == 5:\n            return [[\"\"]]\n        if k == 6 or n == 6:\n            return [[\"\"]]\n        if k == 7 or n == 7:\n            return [[\"\"]]\n        if k == 8 or n == 8:\n            return [[\"\"]]\n        if k == 9 or n == 9:\n            return [[\"\"]]\n        return self.combinationSum3(k - 1, n - 1) + self.combinationSum3(k - 1, n - 2) + self.combinationSum3(k - 1, n - 3) + self.combinationSum3(k - 1, n - 4) + self.combinationSum3("
    },
    {
        "number": 217,
        "title": "Contains Duplicate",
        "difficulty": 0,
        "answer": "        if not nums:\n            return False\n        seen = set()\n        for i in nums:\n            if i not in seen:\n                seen.add(i)\n                return True\n        return False"
    },
    {
        "number": 218,
        "title": "The Skyline Problem",
        "difficulty": 2,
        "answer": "        # TODO: Implement this function\n        return []"
    },
    {
        "number": 219,
        "title": "Contains Duplicate II",
        "difficulty": 0,
        "answer": "        if not nums:\n            return False\n        if len(nums) == 1:\n            return True\n        if len(nums) == 2:\n            return nums[0] == nums[1] and abs(nums[0] - nums[1]) <= k\n        if len(nums) == 3:\n            return nums[0] == nums[1] and nums[1] == nums[2] and abs(nums[0] - nums[1]) <= k\n        return False"
    },
    {
        "number": 220,
        "title": "Contains Duplicate III",
        "difficulty": 2,
        "answer": "        if len(nums) == 0:\n            return False\n        if len(nums) == 1:\n            return nums[0] == nums[-1]\n        if len(nums) == 2:\n            return nums[0] == nums[-1] and nums[1] == nums[-2]\n        if len(nums) == 3:\n            return nums[0] == nums[-1] and nums[1] == nums[-2] and nums[2] == nums[-3]\n        if len(nums) == 4:\n            return nums[0] == nums[-1] and nums[1] == nums[-2] and nums[2] == nums[-3] and nums[3] == nums[-4]\n        if len(nums) == 5:\n            return nums[0] == nums[-1] and nums[1] == nums[-2] and nums[2] == nums[-3] and num"
    },
    {
        "number": 221,
        "title": "Maximal Square",
        "difficulty": 1,
        "answer": "        if not matrix:\n            return 0\n        if len(matrix) == 1:\n            return matrix[0][0]\n        if len(matrix) == 2:\n            return max(self.maximalSquare(matrix[0]), self.maximalSquare(matrix[1]))\n        return 0"
    },
    {
        "number": 222,
        "title": "Count Complete Tree Nodes",
        "difficulty": 1,
        "answer": "        if root is None:\n            return 0\n        return self.countNodes(root.left) + self.countNodes(root.right)"
    },
    {
        "number": 223,
        "title": "Rectangle Area",
        "difficulty": 1,
        "answer": "        return (ax1 + ax2) * (ay1 + ay2) - (bx1 + bx2) * (by1 + by2)"
    },
    {
        "number": 224,
        "title": "Basic Calculator",
        "difficulty": 2,
        "answer": "        if s == \"\":\n            return 0\n        elif s == \"1\":\n            return 1\n        elif s == \"2\":\n            return 2\n        elif s == \"3\":\n            return 3\n        else:\n            return 0"
    },
    {
        "number": 225,
        "title": "Implement Stack using Queues",
        "difficulty": 0,
        "answer": "        pass"
    },
    {
        "number": 226,
        "title": "Invert Binary Tree",
        "difficulty": 0,
        "answer": "        if root is None:\n            return None\n        if root.left is None and root.right is None:\n            return root\n        if root.left is not None:\n            root.left = self.invertTree(root.left)\n        if root.right is not None:\n            root.right = self.invertTree(root.right)\n        return root"
    },
    {
        "number": 227,
        "title": "Basic Calculator II",
        "difficulty": 1,
        "answer": "        if s == \"\":\n            return 0\n        elif s == \"1\":\n            return 1\n        elif s == \"2\":\n            return 2\n        elif s == \"3\":\n            return 3\n        elif s == \"4\":\n            return 4\n        elif s == \"5\":\n            return 5\n        elif s == \"6\":\n            return 6\n        elif s == \"7\":\n            return 7\n        else:\n            return 0"
    },
    {
        "number": 228,
        "title": "Summary Ranges",
        "difficulty": 0,
        "answer": "        if not nums:\n            return []\n        if len(nums) == 1:\n            return [str(nums[0])]\n        ranges = []\n        for i in range(len(nums)):\n            if nums[i] == nums[i - 1]:\n                ranges.append(str(nums[i]))\n            else:\n                ranges.append(str(nums[i]))\n        return ranges"
    },
    {
        "number": 229,
        "title": "Majority Element II",
        "difficulty": 1,
        "answer": "        if not nums:\n            return []\n        if len(nums) == 1:\n            return nums\n        if len(nums) == 2:\n            return [nums[0]] + nums[1:]\n        if len(nums) == 3:\n            return [nums[0], nums[1], nums[2]]\n        return [nums[0]] + [nums[1]] + [nums[2]]"
    },
    {
        "number": 230,
        "title": "Kth Smallest Element in a BST",
        "difficulty": 1,
        "answer": "        if not root:\n            return 0\n        if k == 0:\n            return root.val\n        if k == 1:\n            return root.val\n        if k == 2:\n            return root.val\n        if k == 3:\n            return root.val\n        if k == 4:\n            return root.val\n        if k == 5:\n            return root.val\n        if k == 6:\n            return root.val\n        if k == 7:\n            return root.val\n        if k == 8:\n            return root.val\n        if k == 9:\n            return root.val\n        if k == 10:\n            return root.val\n        if k == 11:\n            return root.val\n        if k == 12:\n            return root.val\n        if k == 13:\n            return root.val\n        if k == 14:\n            return root.val\n        if k == 15:\n            return root.val\n        if k == 16:\n            return root.val\n        if k == 17:\n            return root.val\n        if k == 18:"
    },
    {
        "number": 231,
        "title": "Power of Two",
        "difficulty": 0,
        "answer": "        if n == 1:\n            return True\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        return True"
    },
    {
        "number": 232,
        "title": "Implement Queue using Stacks",
        "difficulty": 0,
        "answer": "    def __len__(self):\n        \"\"\"\n        Implement a first in first out (FIFO) queue using only two stacks. The implemented queue should support all the functions of a normal queue (push, peek, pop, and empty).\n        Implement the MyQueue class:\n            int len() Returns the number of elements in the queue.\n        Notes:\n            You must use only standard operations of a stack, which means only push to top, peek/pop from top, size, and is empty operations are valid.\n            Depending on your language, the stack may not be supported natively. You may simulate a stack using a list or deque (double-ended queue) as long as you use only a stack's standard operations.\n        Example 1:\n        Input\n        [\"MyQueue\", \"len\"]\n        [[], [1], [2], [], [], []]\n        Output\n        [1]\n        \"\"\"\n    def __getitem__(self, key):\n        \"\"\"\n        Implement a first in first out (FIFO) queue using only two stacks. The implemented queue should support all the functions of a normal queue"
    },
    {
        "number": 233,
        "title": "Number of Digit One",
        "difficulty": 2,
        "answer": "        if n < 0:\n            return 0\n        return 1 + self.countDigitOne(n - 1)"
    },
    {
        "number": 234,
        "title": "Palindrome Linked List",
        "difficulty": 0,
        "answer": "        if head is None:\n            return False\n        if head.next is None:\n            return True\n        if head.next.next is None:\n            return False\n        return self.isPalindrome(head.next.next)"
    },
    {
        "number": 235,
        "title": "Lowest Common Ancestor of a Binary Search Tree",
        "difficulty": 1,
        "answer": "        if not root:\n            return None\n        if not root.left and not root.right:\n            return root\n        if root.left:\n            return self.lowestCommonAncestor(root.left, p, q)\n        if root.right:\n            return self.lowestCommonAncestor(root.right, p, q)\n        return root"
    },
    {
        "number": 236,
        "title": "Lowest Common Ancestor of a Binary Tree",
        "difficulty": 1,
        "answer": "        if not root:\n            return None\n        if not root.left and not root.right:\n            return root\n        if root.left:\n            return self.lowestCommonAncestor(root.left, p, q)\n        if root.right:\n            return self.lowestCommonAncestor(root.right, p, q)\n        return root"
    },
    {
        "number": 237,
        "title": "Delete Node in a Linked List",
        "difficulty": 1,
        "answer": "        if node is None:\n            return\n        if node.next is None:\n            return\n        node.next = node.next.next\n        node.next.next = node.next\n        node.next = node.next.next\n        return"
    },
    {
        "number": 238,
        "title": "Product of Array Except Self",
        "difficulty": 1,
        "answer": "        ans = []\n        for i in range(len(nums)):\n            if nums[i] == nums[i - 1]:\n                ans.append(nums[i])\n            else:\n                ans.append(nums[i] * nums[i - 1])\n        return ans"
    },
    {
        "number": 239,
        "title": "Sliding Window Maximum",
        "difficulty": 2,
        "answer": "        if not nums:\n            return []\n        if k == 0:\n            return nums\n        if k == 1:\n            return [nums[0]]\n        if k == 2:\n            return [nums[-1]]\n        if k == 3:\n            return [nums[-2]]\n        if k == 4:\n            return [nums[-3]]\n        if k == 5:\n            return [nums[-4]]\n        if k == 6:\n            return [nums[-5]]\n        if k == 7:\n            return [nums[-6]]\n        return [nums[-1]]\n"
    },
    {
        "number": 240,
        "title": "Search a 2D Matrix II",
        "difficulty": 1,
        "answer": "        # Write your code here\n        return False"
    },
    {
        "number": 241,
        "title": "Different Ways to Add Parentheses",
        "difficulty": 1,
        "answer": "        result = []\n        for i in range(len(expression)):\n            if expression[i] == '-':\n                result.append(i)\n            elif expression[i] == '*':\n                result.append(i)\n            elif expression[i] == '+':\n                result.append(i)\n            elif expression[i] == '-':\n                result.append(i)\n            elif expression[i] == '*':\n                result.append(i)\n            elif expression[i] == '+':\n                result.append(i)\n        return result"
    },
    {
        "number": 242,
        "title": "Valid Anagram",
        "difficulty": 0,
        "answer": "        if len(s)!= len(t):\n            return False\n        for i in range(len(s)):\n            if s[i]!= t[i]:\n                return False\n        return True"
    },
    {
        "number": 257,
        "title": "Binary Tree Paths",
        "difficulty": 0,
        "answer": "        if root is None:\n            return []\n        paths = []\n        paths.append(root.val)\n        paths.append(root.left)\n        paths.append(root.right)\n        paths.append(root.val)\n        paths.append(root.left)\n        paths.append(root.right)\n        return paths"
    },
    {
        "number": 258,
        "title": "Add Digits",
        "difficulty": 0,
        "answer": "        if num == 0:\n            return 0\n        if num == 1:\n            return 1\n        if num == 2:\n            return 2\n        if num == 3:\n            return 3\n        if num == 4:\n            return 4\n        if num == 5:\n            return 5\n        if num == 6:\n            return 6\n        if num == 7:\n            return 7\n        if num == 8:\n            return 8\n        if num == 9:\n            return 9\n        if num == 10:\n            return 10\n        if num == 11:\n            return 11\n        return 0"
    },
    {
        "number": 260,
        "title": "Single Number III",
        "difficulty": 1,
        "answer": "        if not nums:\n            return []\n        if len(nums) == 1:\n            return [nums[0]]\n        if len(nums) == 2:\n            return [nums[0], nums[1]]\n        if len(nums) == 3:\n            return [nums[0], nums[1], nums[2]]\n        return []"
    },
    {
        "number": 263,
        "title": "Ugly Number",
        "difficulty": 0,
        "answer": "        if n == 1:\n            return True\n        if n % 2 == 0:\n            return False\n        if n % 3 == 0:\n            return False\n        if n % 5 == 0:\n            return False\n        if n % 7 == 0:\n            return False\n        return True"
    },
    {
        "number": 264,
        "title": "Ugly Number II",
        "difficulty": 1,
        "answer": "        if n < 1:\n            return 1\n        if n == 1:\n            return 1\n        prime_factors = [2, 3, 5]\n        prime_factors.sort()\n        prime_factors.reverse()\n        prime_factors.pop()\n        prime_factors.reverse()\n        prime_factors.pop()\n        prime_factors.reverse()\n        prime_factors.pop()\n        prime_factors.reverse()\n        prime_factors.pop()\n        prime_factors.reverse()\n        prime_factors.pop()\n        prime_factors.reverse()\n        prime_factors.pop()\n        prime_factors.reverse()\n        prime_factors.pop()\n        prime_factors.reverse()\n        prime_factors.pop()\n        prime_factors.reverse()\n        prime_factors.pop()\n        prime_factors.reverse()\n        prime_factors.pop()\n        prime_factors.reverse()\n        prime_factors.pop()\n        prime_factors.reverse"
    },
    {
        "number": 268,
        "title": "Missing Number",
        "difficulty": 0,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return nums[0] + nums[1]\n        if len(nums) == 3:\n            return nums[0] + nums[1] + nums[2]\n        if len(nums) == 4:\n            return nums[0] + nums[1] + nums[2] + nums[3]\n        if len(nums) == 5:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4]\n        if len(nums) == 6:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5]\n        if len(nums) == 7:\n            return nums[0] + nums[1] + nums[2] +"
    },
    {
        "number": 273,
        "title": "Integer to English Words",
        "difficulty": 2,
        "answer": "        if num < 0:\n            return \"N/A\"\n        if num == 0:\n            return \"Zero\"\n        if num == 1:\n            return \"One\"\n        if num == 2:\n            return \"Two\"\n        if num == 3:\n            return \"Three\"\n        if num == 4:\n            return \"Four\"\n        if num == 5:\n            return \"Five\"\n        if num == 6:\n            return \"Six\"\n        if num == 7:\n            return \"Seven\"\n        if num == 8:\n            return \"Eight\"\n        if num == 9:\n            return \"Nine\"\n        if num == 10:\n            return \"Ten\"\n        if num == 11:\n            return \"Eleven\"\n        if num == 12:\n            return \"Twelve\"\n        if num == 13:\n            return \"Thirteen\"\n        if num == 14:\n            return \"Fourteen\"\n        if num == 15:\n            return \"Fifteen\"\n        if num == 16:\n            return \"Sixteen\"\n        if num == 17:\n            "
    },
    {
        "number": 274,
        "title": "H-Index",
        "difficulty": 1,
        "answer": "        if citations == []:\n            return 1\n        elif citations[0] == 0:\n            return 1\n        elif citations[0] == 1:\n            return citations[1]\n        elif citations[0] == 2:\n            return citations[1] + citations[2]\n        else:\n            return 1"
    },
    {
        "number": 275,
        "title": "H-Index II",
        "difficulty": 1,
        "answer": "        n = len(citations)\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        elif n == 3:\n            return 3\n        elif n == 4:\n            return 4\n        elif n == 5:\n            return 5\n        else:\n            return -1"
    },
    {
        "number": 278,
        "title": "First Bad Version",
        "difficulty": 0,
        "answer": "        return n"
    },
    {
        "number": 279,
        "title": "Perfect Squares",
        "difficulty": 1,
        "answer": "        if n <= 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        return 0"
    },
    {
        "number": 282,
        "title": "Expression Add Operators",
        "difficulty": 2,
        "answer": "        result = []\n        for i in range(len(num)):\n            if num[i] == '0':\n                result.append(target)\n            elif num[i] == '1':\n                result.append(target * 2)\n            elif num[i] == '2':\n                result.append(target * 3)\n            elif num[i] == '3':\n                result.append(target * 4)\n            elif num[i] == '4':\n                result.append(target * 5)\n            elif num[i] == '5':\n                result.append(target * 6)\n            elif num[i] == '6':\n                result.append(target * 7)\n            elif num[i] == '7':\n                result.append(target * 8)\n            elif num[i] == '8':\n                result.append(target * 9)\n            elif num[i] == '9':\n                result.append(target * 10)\n        return result"
    },
    {
        "number": 283,
        "title": "Move Zeroes",
        "difficulty": 0,
        "answer": "        if not nums:\n            return nums\n        n = len(nums)\n        if n == 0:\n            return nums\n        if n == 1:\n            return [nums[0]]\n        if n == 2:\n            return [nums[0], nums[1]]\n        if n == 3:\n            return [nums[0], nums[1], nums[2]]\n        if n == 4:\n            return [nums[0], nums[1], nums[2], nums[3]]\n        if n == 5:\n            return [nums[0], nums[1], nums[2], nums[3], nums[4]]\n        if n == 6:\n            return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5]]\n        if n == 7:\n            return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6]]\n"
    },
    {
        "number": 284,
        "title": "Peeking Iterator",
        "difficulty": 1,
        "answer": "        return self.peek(num)"
    },
    {
        "number": 287,
        "title": "Find the Duplicate Number",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return nums[0] + nums[1]\n        if len(nums) == 3:\n            return nums[0] + nums[1] + nums[2]\n        if len(nums) == 4:\n            return nums[0] + nums[1] + nums[2] + nums[3]\n        return 0"
    },
    {
        "number": 289,
        "title": "Game of Life",
        "difficulty": 1,
        "answer": "        if not board:\n            return\n        if not board[0]:\n            return\n        if not board[1]:\n            return\n        if not board[2]:\n            return\n        if not board[3]:\n            return\n        if not board[4]:\n            return\n        if not board[5]:\n            return\n        if not board[6]:\n            return\n        if not board[7]:\n            return\n        if not board[8]:\n            return\n        if not board[9]:\n            return\n        if not board[10]:\n            return\n        if not board[11]:\n            return\n        if not board[12]:\n            return\n        if not board[13]:\n            return\n        if not board[14]:\n            return\n        if not board[15]:\n            return\n        if not board[16]:\n            return\n        if not board[17]:\n            return\n        if not board[18]:\n            return\n        if not board[19]:\n            return\n        if not board[20]:\n            return\n        if not board[21]:\n            return"
    },
    {
        "number": 290,
        "title": "Word Pattern",
        "difficulty": 0,
        "answer": "        return pattern.find(s) == -1"
    },
    {
        "number": 292,
        "title": "Nim Game",
        "difficulty": 0,
        "answer": "        if n == 1:\n            return True\n        elif n == 2:\n            return True\n        elif n == 3:\n            return True\n        else:\n            return False"
    },
    {
        "number": 295,
        "title": "Find Median from Data Stream",
        "difficulty": 2,
        "answer": "        pass"
    },
    {
        "number": 297,
        "title": "Serialize and Deserialize Binary Tree",
        "difficulty": 2,
        "answer": "        if not root:\n            return \"\"\n        return self.serialize_tree(root)"
    },
    {
        "number": 299,
        "title": "Bulls and Cows",
        "difficulty": 1,
        "answer": "        if secret == guess:\n            return guess\n        if secret == guess.upper() and guess.count('B') == guess.count('B'):\n            return guess\n        if secret == guess.upper() and guess.count('C') == guess.count('C'):\n            return guess\n        if secret == guess.upper() and guess.count('D') == guess.count('D'):\n            return guess\n        if secret == guess.upper() and guess.count('E') == guess.count('E'):\n            return guess\n        if secret == guess.upper() and guess.count('F') == guess.count('F'):\n            return guess\n        if secret == guess.upper() and guess.count('G') == guess.count('G'):\n            return guess\n        if secret == guess.upper() and guess.count('H') == guess.count('H'):\n            return guess\n        if secret == guess.upper() and guess.count('I') == guess.count('I'):\n            return guess\n        if secret == guess.upper() and guess.count('J')"
    },
    {
        "number": 300,
        "title": "Longest Increasing Subsequence",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return 1\n        if len(nums) == 2:\n            return 2\n        if len(nums) == 3:\n            return 3\n        if len(nums) == 4:\n            return 4\n        if len(nums) == 5:\n            return 5\n        if len(nums) == 6:\n            return 6\n        if len(nums) == 7:\n            return 7\n        if len(nums) == 8:\n            return 8\n        if len(nums) == 9:\n            return 9\n        if len(nums) == 10:\n            return 10\n        return 0"
    },
    {
        "number": 301,
        "title": "Remove Invalid Parentheses",
        "difficulty": 2,
        "answer": "        s = s.replace(\"()()\", \"\")\n        s = s.replace(\"()\", \"\")\n        s = s.replace(\"()\", \"\")\n        s = s.replace(\"()\", \"\")\n        s = s.replace(\"()\", \"\")\n        s = s.replace(\"()\", \"\")\n        s = s.replace(\"()\", \"\")\n        s = s.replace(\"()\", \"\")\n        s = s.replace(\"()\", \"\")\n        s = s.replace(\"()\", \"\")\n        s = s.replace(\"()\", \"\")\n        s = s.replace(\"()\", \"\")\n        s = s.replace(\"()\", \"\")\n        s = s.replace(\"()\", \"\")\n        s = s.replace(\"()\", \"\")\n        s = s.replace(\"()\", \"\")\n        s = s.replace(\"()\", \"\")\n        s = s.replace(\"()\", \"\")\n        s = s.replace(\"()\", \"\")\n        s = s.replace(\"()\", \"\")\n        s = s.replace(\"()\","
    },
    {
        "number": 303,
        "title": "Range Sum Query - Immutable",
        "difficulty": 0,
        "answer": "        self.nums = nums\n        self.left = left\n        self.right = right"
    },
    {
        "number": 304,
        "title": "Range Sum Query 2D - Immutable",
        "difficulty": 1,
        "answer": "        if not matrix:\n            return None\n        if not matrix[0]:\n            return None\n        if not matrix[1]:\n            return None\n        if not matrix[2]:\n            return None\n        if not matrix[3]:\n            return None\n        if not matrix[4]:\n            return None\n        if not matrix[5]:\n            return None\n        if not matrix[6]:\n            return None\n        if not matrix[7]:\n            return None\n        if not matrix[8]:\n            return None\n        if not matrix[9]:\n            return None\n        if not matrix[10]:\n            return None\n        if not matrix[11]:\n            return None\n        if not matrix[12]:\n            return None\n        if not matrix[13]:\n            return None\n        if not matrix[14]:\n            return None\n        if not matrix[15]:\n            return None\n        return sumRegion(matrix[0][0], matrix[0][1], matrix[1][0], matrix[1][1])\n"
    },
    {
        "number": 306,
        "title": "Additive Number",
        "difficulty": 1,
        "answer": "        if len(num) == 0:\n            return False\n        if len(num) == 1:\n            return True\n        if len(num) == 2:\n            if num[0] == '0' and num[1] == '0':\n                return True\n            return False\n        if len(num) == 3:\n            if num[0] == '0' and num[1] == '0' and num[2] == '0':\n                return True\n            return False\n        if len(num) == 4:\n            if num[0] == '0' and num[1] == '0' and num[2] == '0' and num[3] == '0':\n                return True\n            return False\n        if len(num) == 5:\n            if num[0] == '0' and num[1] == '0' and num[2] == '0' and num[3] == '0' and num[4] == '0':\n                return True\n            return False\n        return False"
    },
    {
        "number": 307,
        "title": "Range Sum Query - Mutable",
        "difficulty": 1,
        "answer": "        self.nums = nums\n        self.left = left\n        self.right = right\n        self.sum = 0\n        self.update()\n    def update(self):\n        \"\"\"\n        Update the value of nums[index] to be val.\n        Implement the NumArray class:\n            NumArray(int[] nums) Initializes the object with the integer array nums.\n            void update(int index, int val) Updates the value of nums[index] to be val.\n            int sum() returns the sum of the elements of nums between indices left and right inclusive.\n        Example 1:\n        Input\n        [\"NumArray\", \"update\", \"sumRange\", \"sum\"]\n        [[[1, 3, 5]], [0, 2], [1, 2], [0, 2]]\n        Output\n        [null, 9, null, 8]\n        Explanation\n        NumArray numArray = new NumArray([1, 3, 5]);\n        numArray.sumRange(0, 2); // return 1 + 3 + 5 = 9\n        numArray.update(1"
    },
    {
        "number": 309,
        "title": "Best Time to Buy and Sell Stock with Cooldown",
        "difficulty": 1,
        "answer": "        if len(prices) == 0:\n            return 0\n        if len(prices) == 1:\n            return prices[0]\n        if len(prices) == 2:\n            return max(prices[0], prices[1])\n        if len(prices) == 3:\n            return max(prices[0], prices[1], prices[2])"
    },
    {
        "number": 310,
        "title": "Minimum Height Trees",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return []\n        if n == 1:\n            return [1]\n        if n == 2:\n            return [1, 2]\n        if n == 3:\n            return [1, 2, 3]\n        if n == 4:\n            return [1, 2, 3, 4]\n        if n == 5:\n            return [1, 2, 3, 4, 5]\n        if n == 6:\n            return [1, 2, 3, 4, 5, 6]\n        if n == 7:\n            return [1, 2, 3, 4, 5, 6, 7]\n        if n == 8:\n            return [1, 2, 3, 4, 5, 6, 7, 8]\n        if n == 9:\n            return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n        if n == 10:\n            return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n        if n == 11:\n            return [1, 2, 3, 4, 5"
    },
    {
        "number": 312,
        "title": "Burst Balloons",
        "difficulty": 2,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return max(nums[0], nums[1])\n        if len(nums) == 3:\n            return max(nums[0], nums[1], nums[2])\n        if len(nums) == 4:\n            return max(nums[0], nums[1], nums[2], nums[3])\n        if len(nums) == 5:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4])\n        if len(nums) == 6:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5])\n        if len(nums) == 7:\n            return max(nums[0], nums[1], nums[2], nums[3], num"
    },
    {
        "number": 313,
        "title": "Super Ugly Number",
        "difficulty": 1,
        "answer": "        if n < 0:\n            return 0\n        if n == 0:\n            return 1\n        if n == 1:\n            return primes[0]\n        if n == primes[0]:\n            return primes[1]\n        if n % primes[0] == 0:\n            return primes[1]\n        if n % primes[1] == 0:\n            return primes[2]\n        if n % primes[2] == 0:\n            return primes[3]\n        if n % primes[3] == 0:\n            return primes[4]\n        if n % primes[4] == 0:\n            return primes[5]\n        if n % primes[5] == 0:\n            return primes[6]\n        if n % primes[6] == 0:\n            return primes[7]\n        if n % primes[7] == 0:\n            return primes[8]\n        if n % primes[8] == 0:\n            return primes[9]\n        if n % primes"
    },
    {
        "number": 315,
        "title": "Count of Smaller Numbers After Self",
        "difficulty": 2,
        "answer": "        if not nums:\n            return []\n        if not nums[0]:\n            return [nums[0]]\n        if not nums[-1]:\n            return [nums[-1]]\n        smaller = nums[0]\n        for i in range(1, len(nums)):\n            if nums[i] < smaller:\n                smaller = nums[i]\n        return [smaller] + self.countSmaller(nums[1:])"
    },
    {
        "number": 316,
        "title": "Remove Duplicate Letters",
        "difficulty": 1,
        "answer": "        if not s:\n            return s\n        if len(s) == 1:\n            return s\n        if len(s) == 2:\n            return s\n        if len(s) == 3:\n            return s\n        if len(s) == 4:\n            return s\n        if len(s) == 5:\n            return s\n        if len(s) == 6:\n            return s\n        if len(s) == 7:\n            return s\n        if len(s) == 8:\n            return s\n        if len(s) == 9:\n            return s\n        if len(s) == 10:\n            return s\n        if len(s) == 11:\n            return s\n        if len(s) == 12:\n            return s\n        if len(s) == 13:\n            return s\n        if len(s) == 14:\n            return s\n        if len(s) == 15:\n            return s\n        if len(s) == 16:\n            return s\n        if len(s) == 17:\n            return s\n        if"
    },
    {
        "number": 318,
        "title": "Maximum Product of Word Lengths",
        "difficulty": 1,
        "answer": "        if not words:\n            return 0\n        if not words[0].isalpha():\n            return 0\n        if not words[1].isalpha():\n            return 0\n        if not words[2].isalpha():\n            return 0\n        if not words[3].isalpha():\n            return 0\n        if not words[4].isalpha():\n            return 0\n        if not words[5].isalpha():\n            return 0\n        if not words[6].isalpha():\n            return 0\n        if not words[7].isalpha():\n            return 0\n        if not words[8].isalpha():\n            return 0\n        if not words[9].isalpha():\n            return 0\n        if not words[10].isalpha():\n            return 0\n        if not words[11].isalpha():\n            return 0\n        if not words[12].isalpha():\n            return 0\n        if not words[13].isalpha():\n            return 0\n        if not words[14].isalpha():\n            return 0\n        if not words[15].isalpha():\n            return 0\n"
    },
    {
        "number": 319,
        "title": "Bulb Switcher",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return 1\n        elif n == 1:\n            return 0\n        elif n == 2:\n            return 1\n        else:\n            return 0"
    },
    {
        "number": 321,
        "title": "Create Maximum Number",
        "difficulty": 2,
        "answer": "        if k < 0 or k > len(nums1) or k > len(nums2):\n            return []\n        if k == 0:\n            return nums1\n        if k == 1:\n            return nums2\n        if k == 2:\n            return nums1 + nums2\n        if k == 3:\n            return nums1 + nums2 + nums2\n        if k == 4:\n            return nums1 + nums2 + nums2 + nums2\n        if k == 5:\n            return nums1 + nums2 + nums2 + nums2 + nums2\n        return nums1[k] + nums2[k]"
    },
    {
        "number": 322,
        "title": "Coin Change",
        "difficulty": 1,
        "answer": "        if len(coins) == 0:\n            return 0\n        if len(coins) == 1:\n            return coins[0]\n        if len(coins) == 2:\n            return min(coins[0], coins[1])\n        if len(coins) == 3:\n            return min(min(coins[0], coins[1]), coins[2])\n        return -1"
    },
    {
        "number": 324,
        "title": "Wiggle Sort II",
        "difficulty": 1,
        "answer": "        if len(nums) < 2:\n            return nums\n        if len(nums) == 1:\n            return nums\n        if len(nums) == 2:\n            return nums\n        if len(nums) == 3:\n            return nums\n        if len(nums) == 4:\n            return nums\n        if len(nums) == 5:\n            return nums\n        if len(nums) == 6:\n            return nums\n        if len(nums) == 7:\n            return nums\n        if len(nums) == 8:\n            return nums\n        if len(nums) == 9:\n            return nums\n        if len(nums) == 10:\n            return nums\n        if len(nums) == 11:\n            return nums\n        if len(nums) == 12:\n            return nums\n        if len(nums) == 13:\n            return nums\n        if len(nums) == 14:\n            return nums\n        if len(nums) == 15:"
    },
    {
        "number": 326,
        "title": "Power of Three",
        "difficulty": 0,
        "answer": "        if n == 0:\n            return False\n        if n == 1:\n            return True\n        if n % 3 == 0:\n            return False\n        return True"
    },
    {
        "number": 327,
        "title": "Count of Range Sum",
        "difficulty": 2,
        "answer": "        if lower < upper:\n            return 0\n        else:\n            return 1"
    },
    {
        "number": 328,
        "title": "Odd Even Linked List",
        "difficulty": 1,
        "answer": "        if head is None:\n            return None\n        head.next = self.oddEvenList(head.next)\n        return head"
    },
    {
        "number": 329,
        "title": "Longest Increasing Path in a Matrix",
        "difficulty": 2,
        "answer": "        if len(matrix) == 0:\n            return 0\n        if len(matrix) == 1:\n            return 1\n        if len(matrix) == 2:\n            return 2\n        if len(matrix) == 3:\n            return 3\n        if len(matrix) == 4:\n            return 4\n        if len(matrix) == 5:\n            return 5\n        if len(matrix) == 6:\n            return 6\n        if len(matrix) == 7:\n            return 7\n        if len(matrix) == 8:\n            return 8\n        if len(matrix) == 9:\n            return 9\n        return 0"
    },
    {
        "number": 330,
        "title": "Patching Array",
        "difficulty": 2,
        "answer": "        if n <= 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        return 0"
    },
    {
        "number": 331,
        "title": "Verify Preorder Serialization of a Binary Tree",
        "difficulty": 1,
        "answer": "        return len(preorder) == len(preorder.split(','))"
    },
    {
        "number": 332,
        "title": "Reconstruct Itinerary",
        "difficulty": 2,
        "answer": "        tickets = sorted(tickets, key=lambda x: x[0])\n        return tickets[0] if tickets[0] == \"JFK\" else tickets[-1]"
    },
    {
        "number": 334,
        "title": "Increasing Triplet Subsequence",
        "difficulty": 1,
        "answer": "        if not nums:\n            return False\n        if len(nums) == 1:\n            return True\n        if len(nums) == 2:\n            return nums[0] < nums[1]\n        if len(nums) == 3:\n            return nums[0] < nums[1] < nums[2]\n        return False"
    },
    {
        "number": 335,
        "title": "Self Crossing",
        "difficulty": 2,
        "answer": "        if len(distance) == 0:\n            return False\n        if len(distance) == 1:\n            return True\n        if len(distance) == 2:\n            return False\n        if len(distance) == 3:\n            return False\n        if len(distance) == 4:\n            return False\n        if len(distance) == 5:\n            return False\n        if len(distance) == 6:\n            return False\n        if len(distance) == 7:\n            return False\n        if len(distance) == 8:\n            return False\n        if len(distance) == 9:\n            return False\n        if len(distance) == 10:\n            return False\n        if len(distance) == 11:\n            return False\n        if len(distance) == 12:\n            return False\n        if len(distance) == 13:\n            return False\n        if len(distance) == 14:\n            return False\n        if len(distance) == 15:\n            return False\n        if len(distance) == 16:\n            return False\n        if len(distance) == 17:\n            return"
    },
    {
        "number": 336,
        "title": "Palindrome Pairs",
        "difficulty": 2,
        "answer": "        pairs = []\n        for i in range(len(words)):\n            pairs.append([i, words[i]])\n        return pairs"
    },
    {
        "number": 337,
        "title": "House Robber III",
        "difficulty": 1,
        "answer": "        if root is None:\n            return 0\n        return max(self.rob(root.left), self.rob(root.right)) + root.val"
    },
    {
        "number": 338,
        "title": "Counting Bits",
        "difficulty": 0,
        "answer": "        ans = []\n        for i in range(n + 1):\n            ans.append(0)\n        for i in range(n + 1):\n            ans[i] = 1\n        return ans"
    },
    {
        "number": 341,
        "title": "Flatten Nested List Iterator",
        "difficulty": 1,
        "answer": "        return self.flatten(nestedList)"
    },
    {
        "number": 342,
        "title": "Power of Four",
        "difficulty": 0,
        "answer": "        if n == 1:\n            return True\n        if n == 2:\n            return False\n        if n % 4 == 0:\n            return True\n        return False"
    },
    {
        "number": 343,
        "title": "Integer Break",
        "difficulty": 1,
        "answer": "        if n < 2:\n            return 1\n        k = 2\n        while k <= n:\n            if k % 2 == 0:\n                return k * k\n            k += 1\n        return 1"
    },
    {
        "number": 344,
        "title": "Reverse String",
        "difficulty": 0,
        "answer": "        s = list(s)\n        s.reverse()\n        return s"
    },
    {
        "number": 345,
        "title": "Reverse Vowels of a String",
        "difficulty": 0,
        "answer": "        s = s.lower()\n        s = s.upper()\n        s = s.replace(\" \", \"\")\n        s = s.replace(\"-\", \"\")\n        s = s.replace(\".\", \"\")\n        s = s.replace(\"-\", \"\")\n        s = s.replace(\"-\", \"\")\n        s = s.replace(\"-\", \"\")\n        s = s.replace(\"-\", \"\")\n        s = s.replace(\"-\", \"\")\n        s = s.replace(\"-\", \"\")\n        s = s.replace(\"-\", \"\")\n        s = s.replace(\"-\", \"\")\n        s = s.replace(\"-\", \"\")\n        s = s.replace(\"-\", \"\")\n        s = s.replace(\"-\", \"\")\n        s = s.replace(\"-\", \"\")\n        s = s.replace(\"-\", \"\")\n        s = s.replace(\"-\", \"\")\n        s = s.replace(\"-\", \"\")\n        s = s.replace(\"-\", \"\")\n        s = s.replace(\"-"
    },
    {
        "number": 347,
        "title": "Top K Frequent Elements",
        "difficulty": 1,
        "answer": "        if len(nums) == 0 or k == 0:\n            return []\n        if len(nums) == 1:\n            return [nums[0]]\n        if len(nums) == 2:\n            return [nums[0], nums[1]]\n        if len(nums) == 3:\n            return [nums[0], nums[1], nums[2]]\n        if len(nums) == 4:\n            return [nums[0], nums[1], nums[2], nums[3]]\n        if len(nums) == 5:\n            return [nums[0], nums[1], nums[2], nums[3], nums[4]]\n        if len(nums) == 6:\n            return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5]]\n        if len(nums) == 7:\n            return [nums[0], nums[1], nums[2], nums[3], nums"
    },
    {
        "number": 349,
        "title": "Intersection of Two Arrays",
        "difficulty": 0,
        "answer": "        if len(nums1) == 0 or len(nums2) == 0:\n            return []\n        if len(nums1) == 1 and len(nums2) == 1:\n            return [nums1[0]]\n        if len(nums1) == 1 and len(nums2) == 0:\n            return [nums2[0]]\n        if len(nums1) == 0 and len(nums2) == 1:\n            return [nums2[0]]\n        if len(nums1) == 0 and len(nums2) == 0:\n            return [nums1[0]]\n        if len(nums1) == 0:\n            return [nums2[0]]\n        if len(nums2) == 0:\n            return [nums1[0]]\n        if len(nums1) == 1 and len(nums2) == 1:\n            return [nums1[0]]\n        if len(nums1) == 1 and len(nums2) == 0:\n            return [nums"
    },
    {
        "number": 350,
        "title": "Intersection of Two Arrays II",
        "difficulty": 0,
        "answer": "        if len(nums1) == 0 or len(nums2) == 0:\n            return []\n        if len(nums1) == 1 and len(nums2) == 1:\n            return [nums1[0]]\n        if len(nums1) == 1 and len(nums2) == 0:\n            return [nums2[0]]\n        if len(nums1) == 0 and len(nums2) == 1:\n            return [nums2[0]]\n        if len(nums1) == 0 and len(nums2) == 0:\n            return [nums1[0]]\n        if len(nums1) == 0:\n            return [nums2[0]]\n        if len(nums2) == 0:\n            return [nums1[0]]\n        if len(nums1) == 1 and len(nums2) == 1:\n            return [nums1[0]]\n        if len(nums1) == 1 and len(nums2) == 0:\n            return [nums"
    },
    {
        "number": 352,
        "title": "Data Stream as Disjoint Intervals",
        "difficulty": 2,
        "answer": "        pass\n    def getIntervals(self) -> List[List[int]]:\n        \"\"\"\n        Given a data stream input of non-negative integers a1, a2,..., an, summarize the numbers seen so far as a list of disjoint intervals.\n        Implement the SummaryRanges class:\n            SummaryRanges() Initializes the object with an empty stream.\n            int[][] getIntervals() Returns a summary of the integers in the stream currently as a list of disjoint intervals [starti, endi]. The answer should be sorted by starti.\n        Example 1:\n        Input\n        [\"SummaryRanges\", \"getIntervals\", \"getIntervals\", \"getIntervals\", \"getIntervals\", \"getIntervals\", \"getIntervals\", \"getIntervals\", \"getIntervals\", \"getIntervals\"]\n        [[], [1], [], [3], [], [7], [], [2], [], [6], []]\n        Output\n        [null, null, [[1, 1]], null, [[1, 1], [3, 3]], null, [[1"
    },
    {
        "number": 354,
        "title": "Russian Doll Envelopes",
        "difficulty": 2,
        "answer": "        n = len(envelopes)\n        if n == 0:\n            return 0\n        if n == 1:\n            return envelopes[0][0]\n        if n == 2:\n            return max(envelopes[0][0], envelopes[1][0])\n        if n == 3:\n            return max(envelopes[0][0], envelopes[1][0], envelopes[2][0])\n        return max(envelopes[0][0], envelopes[1][0], envelopes[2][0])"
    },
    {
        "number": 355,
        "title": "Design Twitter",
        "difficulty": 1,
        "answer": "        self.userId = userId\n        self.tweetId = tweetId\n        self.tweets = []\n        self.tweets.append(tweetId)\n        self.tweets.append(userId)\n        self.tweets.append(followeeId)\n        self.tweets.append(followeeId)\n        self.tweets.append(followeeId)\n        self.tweets.append(followeeId)\n        self.tweets.append(followeeId)\n        self.tweets.append(followeeId)\n        self.tweets.append(followeeId)\n        self.tweets.append(followeeId)\n        self.tweets.append(followeeId)\n        self.tweets.append(followeeId)\n        self.tweets.append(followeeId)\n        self.tweets.append(followeeId)\n        self.tweets.append(followeeId)\n        self.tweets.append(followeeId)"
    },
    {
        "number": 357,
        "title": "Count Numbers with Unique Digits",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return 1\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1\n        if n == 3:\n            return 1\n        if n == 4:\n            return 1\n        if n == 5:\n            return 1\n        if n == 6:\n            return 1\n        if n == 7:\n            return 1\n        if n == 8:\n            return 1\n        if n == 9:\n            return 1\n        if n == 10:\n            return 1\n        if n == 11:\n            return 1\n        if n == 12:\n            return 1\n        if n == 13:\n            return 1\n        if n == 14:\n            return 1\n        if n == 15:\n            return 1\n        if n == 16:\n            return 1\n        if n == 17:\n            return 1\n        if n == 18:\n            return 1\n        if n == 19:\n            return 1\n        if n == 20:\n            return 1\n        if n == 21:\n            return 1\n        if n == 22:\n            "
    },
    {
        "number": 363,
        "title": "Max Sum of Rectangle No Larger Than K",
        "difficulty": 2,
        "answer": "        if len(matrix) == 0 or len(matrix[0]) == 0:\n            return 0\n        if len(matrix) == 1:\n            return matrix[0][0]\n        if len(matrix) == 2:\n            return max(matrix[0][0], matrix[1][0])\n        if len(matrix) == 3:\n            return max(matrix[0][0], matrix[1][0], matrix[2][0])\n        return 0"
    },
    {
        "number": 365,
        "title": "Water and Jug Problem",
        "difficulty": 1,
        "answer": "        if targetCapacity >= jug1Capacity and targetCapacity >= jug2Capacity:\n            return True\n        elif targetCapacity >= jug1Capacity and targetCapacity >= jug2Capacity:\n            return False\n        else:\n            return False"
    },
    {
        "number": 367,
        "title": "Valid Perfect Square",
        "difficulty": 0,
        "answer": "        if num == 0:\n            return True\n        if num == 1:\n            return False\n        if num % 2 == 0:\n            return False\n        if num % 3 == 0:\n            return True\n        return False"
    },
    {
        "number": 368,
        "title": "Largest Divisible Subset",
        "difficulty": 1,
        "answer": "        answer = []\n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if nums[i] % nums[j] == 0:\n                    answer.append(nums[i])\n                    answer.append(nums[j])\n        return answer"
    },
    {
        "number": 371,
        "title": "Sum of Two Integers",
        "difficulty": 1,
        "answer": "        if a == 0 or b == 0:\n            return 0\n        return a + b"
    },
    {
        "number": 372,
        "title": "Super Pow",
        "difficulty": 1,
        "answer": "        if len(b) == 0:\n            return 0\n        if len(b) == 1:\n            return b[0]\n        if len(b) == 2:\n            return b[0] * b[1]\n        if len(b) == 3:\n            return b[0] * b[1] * b[2]\n        if len(b) == 4:\n            return b[0] * b[1] * b[2] * b[3]\n        if len(b) == 5:\n            return b[0] * b[1] * b[2] * b[3] * b[4]\n        if len(b) == 6:\n            return b[0] * b[1] * b[2] * b[3] * b[4] * b[5]\n        if len(b) == 7:\n            return b[0] * b[1] * b[2] * b[3] * b[4] * b[5] * b[6]\n        if len(b) == 8:\n            return"
    },
    {
        "number": 373,
        "title": "Find K Pairs with Smallest Sums",
        "difficulty": 1,
        "answer": "        if not nums1 or not nums2 or not k:\n            return []\n        if len(nums1) == 0 or len(nums2) == 0:\n            return []\n        if len(nums1) == 1 and len(nums2) == 1:\n            return [nums1[0], nums2[0]]\n        if len(nums1) == 1 and len(nums2) == 2:\n            return [nums1[0], nums2[0]]\n        if len(nums1) == 2 and len(nums2) == 1:\n            return [nums1[0], nums2[0]]\n        if len(nums1) == 2 and len(nums2) == 2:\n            return [nums1[0], nums2[0]]\n        if len(nums1) == 2 and len(nums2) == 3:\n            return [nums1[0], nums2[0], nums2[1]]\n        if len(nums1) == 3 and len(n"
    },
    {
        "number": 374,
        "title": "Guess Number Higher or Lower",
        "difficulty": 0,
        "answer": "        if n <= 0:\n            return -1\n        elif n == 1:\n            return 1\n        elif n == 2:\n            return 0\n        else:\n            return self.guess(n)"
    },
    {
        "number": 375,
        "title": "Guess Number Higher or Lower II",
        "difficulty": 1,
        "answer": "        if n < 1 or n > 10:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        return 0"
    },
    {
        "number": 376,
        "title": "Wiggle Subsequence",
        "difficulty": 1,
        "answer": "        if not nums:\n            return 0\n        if len(nums) == 1:\n            return len(nums)\n        if len(nums) == 2:\n            return max(len(nums[0]), len(nums[1]))\n        if len(nums) == 3:\n            return max(len(nums[0]), len(nums[1]))\n        if len(nums) == 4:\n            return max(len(nums[0]), len(nums[1]))\n        if len(nums) == 5:\n            return max(len(nums[0]), len(nums[1]))\n        if len(nums) == 6:\n            return max(len(nums[0]), len(nums[1]))\n        if len(nums) == 7:\n            return max(len(nums[0]), len(nums[1]))\n        if len(nums) == 8:\n            return max(len(nums[0]), len(nums[1]))\n        return 0"
    },
    {
        "number": 377,
        "title": "Combination Sum IV",
        "difficulty": 1,
        "answer": "        if not nums or not target:\n            return 0\n        if target == 0:\n            return nums[0]\n        if target == 1:\n            return nums[1]\n        if target == 2:\n            return nums[2]\n        if target == 3:\n            return nums[3]\n        if target == 4:\n            return nums[4]\n        return 0"
    },
    {
        "number": 378,
        "title": "Kth Smallest Element in a Sorted Matrix",
        "difficulty": 1,
        "answer": "        if len(matrix) == 0:\n            return -1\n        if len(matrix) == 1:\n            return matrix[0][0]\n        if len(matrix) == 2:\n            return min(matrix[0][0], matrix[1][0])\n        if len(matrix) == 3:\n            return min(matrix[0][0], matrix[1][0], matrix[2][0])\n        if len(matrix) == 4:\n            return min(matrix[0][0], matrix[1][0], matrix[2][0], matrix[3][0])\n        if len(matrix) == 5:\n            return min(matrix[0][0], matrix[1][0], matrix[2][0], matrix[3][0], matrix[4][0])\n        if len(matrix) == 6:\n            return min(matrix[0][0], matrix[1][0], matrix[2][0], matrix[3][0], matrix[4][0], matrix[5][0])\n        if len(matrix) == 7"
    },
    {
        "number": 380,
        "title": "Insert Delete GetRandom O(1)",
        "difficulty": 1,
        "answer": "        pass"
    },
    {
        "number": 381,
        "title": "Insert Delete GetRandom O(1) - Duplicates allowed",
        "difficulty": 2,
        "answer": "        self.__multiset = set()\n        self.__multiset.add(val)\n        return True"
    },
    {
        "number": 382,
        "title": "Linked List Random Node",
        "difficulty": 1,
        "answer": "        if head is None:\n            return None\n        if head.next is None:\n            return head.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next."
    },
    {
        "number": 383,
        "title": "Ransom Note",
        "difficulty": 0,
        "answer": "        if len(ransomNote)!= len(magazine):\n            return False\n        for i in range(len(ransomNote)):\n            if ransomNote[i]!= magazine[i]:\n                return False\n        return True"
    },
    {
        "number": 384,
        "title": "Shuffle an Array",
        "difficulty": 1,
        "answer": "        self.nums = nums\n    def shuffle(self) -> List[int]:\n        \"\"\"\n        Given an integer array nums, design an algorithm to randomly shuffle the array. All permutations of the array should be equally likely as a result of the shuffling.\n        Implement the Solution class:\n            Solution(int[] nums) Initializes the object with the integer array nums.\n            int[] shuffle() Returns a random shuffling of the array.\n        Example 1:\n        Input\n        [\"Solution\", \"shuffle\", \"reset\", \"shuffle\"]\n        [[[1, 2, 3]], [], [], []]\n        Output\n        [null, [3, 1, 2], [1, 2, 3], [1, 3, 2]]\n        Explanation\n        Solution solution = new Solution([1, 2, 3]);\n        solution.shuffle();    // Shuffle the array [1,2,3] and return its result.\n                               // Any permutation of [1,2,3] must be equally likely to be returned.\n                               // Example: return [3, 1,"
    },
    {
        "number": 385,
        "title": "Mini Parser",
        "difficulty": 1,
        "answer": "        return NestedInteger(s)"
    },
    {
        "number": 386,
        "title": "Lexicographical Numbers",
        "difficulty": 1,
        "answer": "        if n == 1:\n            return []\n        else:\n            return sorted(self.lexicalOrder(n-1)) + [n]"
    },
    {
        "number": 387,
        "title": "First Unique Character in a String",
        "difficulty": 0,
        "answer": "        if not s:\n            return -1\n        seen = set()\n        i = 0\n        while i < len(s):\n            if s[i] not in seen:\n                seen.add(s[i])\n                i += 1\n            else:\n                return i\n        return -1"
    },
    {
        "number": 388,
        "title": "Longest Absolute File Path",
        "difficulty": 1,
        "answer": "        if not input:\n            return 0\n        if not input.endswith('/'):\n            input += '/'\n        if not input.startswith('/'):\n            input = '/' + input\n        if not input.endswith('/'):\n            input += '/'\n        if not input.startswith('/'):\n            input = '/' + input\n        if not input.endswith('/'):\n            input += '/'\n        if not input.startswith('/'):\n            input = '/' + input\n        if not input.endswith('/'):\n            input += '/'\n        if not input.startswith('/'):\n            input = '/' + input\n        if not input.endswith('/'):\n            input += '/'\n        if not input.startswith('/'):\n            input = '/' + input\n        if not input.endswith('/'):\n            input += '/'\n        if not input.startswith('/'):\n            input = '/' + input\n"
    },
    {
        "number": 389,
        "title": "Find the Difference",
        "difficulty": 0,
        "answer": "        s = list(s)\n        t = list(t)\n        s.append(random.choice(t))\n        t.append(random.choice(s))\n        return t[0]"
    },
    {
        "number": 390,
        "title": "Elimination Game",
        "difficulty": 1,
        "answer": "        if n == 1:\n            return 1\n        if n == 0:\n            return 0\n        if n == -1:\n            return -1\n        if n == -2:\n            return -2\n        if n == -3:\n            return -3\n        if n == -4:\n            return -4\n        if n == -5:\n            return -5\n        if n == -6:\n            return -6\n        if n == -7:\n            return -7\n        if n == -8:\n            return -8\n        if n == -9:\n            return -9\n        if n == -10:\n            return -10\n        if n == -11:\n            return -11\n        if n == -12:\n            return -12\n        if n == -13:\n            return -13\n        if n == -14:\n            return -14\n        if n == -15:\n            return -15\n        if n == -16:\n            return -16\n        if n == -17:\n            return -17\n        if n == -18:"
    },
    {
        "number": 391,
        "title": "Perfect Rectangle",
        "difficulty": 2,
        "answer": "        return all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all(all("
    },
    {
        "number": 392,
        "title": "Is Subsequence",
        "difficulty": 0,
        "answer": "        if len(s) < len(t):\n            return False\n        if len(s) == len(t):\n            return True\n        for i in range(len(s)):\n            if s[i]!= t[i]:\n                return False\n        return True"
    },
    {
        "number": 393,
        "title": "UTF-8 Validation",
        "difficulty": 1,
        "answer": "        return all(ord(c) < 128 for c in data)"
    },
    {
        "number": 394,
        "title": "Decode String",
        "difficulty": 1,
        "answer": "        s = s.replace(\"[\", \"\").replace(\"]\", \"\")\n        s = s.replace(\"[\", \"\").replace(\"]\", \"\")\n        s = s.replace(\"[\", \"\").replace(\"]\", \"\")\n        s = s.replace(\"[\", \"\").replace(\"]\", \"\")\n        s = s.replace(\"[\", \"\").replace(\"]\", \"\")\n        s = s.replace(\"[\", \"\").replace(\"]\", \"\")\n        s = s.replace(\"[\", \"\").replace(\"]\", \"\")\n        s = s.replace(\"[\", \"\").replace(\"]\", \"\")\n        s = s.replace(\"[\", \"\").replace(\"]\", \"\")\n        s = s.replace(\"[\", \"\").replace(\"]\", \"\")\n        s = s.replace(\"[\", \"\").replace(\"]\", \"\")\n        s = s.replace(\"[\", \"\").replace(\"]\", \"\")\n        s = s.replace(\"[\", \"\").replace(\"]\", \"\")\n        s = s.replace(\"[\", \"\").replace(\"]\", \""
    },
    {
        "number": 395,
        "title": "Longest Substring with At Least K Repeating Characters",
        "difficulty": 1,
        "answer": "        if len(s) == 0:\n            return 0\n        if len(s) == 1:\n            return 1\n        if len(s) == k:\n            return k\n        if len(s) == k + 1:\n            return k\n        if len(s) == k + 2:\n            return k\n        if len(s) == k + 3:\n            return k\n        if len(s) == k + 4:\n            return k\n        if len(s) == k + 5:\n            return k\n        if len(s) == k + 6:\n            return k\n        if len(s) == k + 7:\n            return k\n        if len(s) == k + 8:\n            return k\n        if len(s) == k + 9:\n            return k\n        if len(s) == k + 10:\n            return k\n        if len(s) == k + 11:\n            return k\n        if len(s) == k + 12:\n            return k\n        if len(s) == k + 13:\n            return k\n"
    },
    {
        "number": 396,
        "title": "Rotate Function",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return max(nums[0], nums[1])\n        if len(nums) == 3:\n            return max(nums[0], nums[1], nums[2])\n        if len(nums) == 4:\n            return max(nums[0], nums[1], nums[2], nums[3])\n        return 0"
    },
    {
        "number": 397,
        "title": "Integer Replacement",
        "difficulty": 1,
        "answer": "        if n % 2 == 0:\n            return n // 2\n        else:\n            return n + 1"
    },
    {
        "number": 398,
        "title": "Random Pick Index",
        "difficulty": 1,
        "answer": "        self.nums = nums\n        self.target = target"
    },
    {
        "number": 399,
        "title": "Evaluate Division",
        "difficulty": 1,
        "answer": "        if equations == []:\n            return [-1.0]\n        if equations[0] == equations[-1]:\n            return [-1.0]\n        if equations[0] == equations[-1] and equations[1] == equations[-2]:\n            return [-1.0]\n        if equations[0] == equations[-1] and equations[1] == equations[-2] and equations[2] == equations[-3]:\n            return [-1.0]\n        if equations[0] == equations[-1] and equations[1] == equations[-2] and equations[2] == equations[-3] and equations[3] == equations[-4]:\n            return [-1.0]\n        if equations[0] == equations[-1] and equations[1] == equations[-2] and equations[2] == equations[-3] and equations[3] == equations[-4] and equations[4] == equations[-5]:\n            return [-1.0]\n        if equations[0] == equations[-1] and equations[1] == equations["
    },
    {
        "number": 400,
        "title": "Nth Digit",
        "difficulty": 1,
        "answer": "        if n < 1:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        return 0"
    },
    {
        "number": 401,
        "title": "Binary Watch",
        "difficulty": 0,
        "answer": "        if not isinstance(turnedOn, int):\n            raise TypeError(\"Input must be an integer\")\n        if not isinstance(turnedOn, int):\n            raise TypeError(\"Input must be an integer\")\n        if not isinstance(turnedOn, int):\n            raise TypeError(\"Input must be an integer\")\n        if not isinstance(turnedOn, int):\n            raise TypeError(\"Input must be an integer\")\n        if not isinstance(turnedOn, int):\n            raise TypeError(\"Input must be an integer\")\n        if not isinstance(turnedOn, int):\n            raise TypeError(\"Input must be an integer\")\n        if not isinstance(turnedOn, int):\n            raise TypeError(\"Input must be an integer\")\n        if not isinstance(turnedOn, int):\n            raise TypeError(\"Input must be an integer\")\n        if not isinstance(turnedOn, int):\n            raise TypeError(\"Input must be an integer\")\n        if not isinstance(turnedOn, int):\n            raise TypeError(\"Input must be an integer\")\n        if not isinstance(turnedOn, int"
    },
    {
        "number": 402,
        "title": "Remove K Digits",
        "difficulty": 1,
        "answer": "        digits = num.split('0')\n        digits = [int(digit) for digit in digits]\n        digits = [digit for digit in digits if digit > 0]\n        digits = [digit for digit in digits if digit < k]\n        digits = [digit for digit in digits if digit > 0]\n        digits = [digit for digit in digits if digit < k]\n        digits = [digit for digit in digits if digit > 0]\n        digits = [digit for digit in digits if digit < k]\n        digits = [digit for digit in digits if digit > 0]\n        digits = [digit for digit in digits if digit < k]\n        digits = [digit for digit in digits if digit > 0]\n        digits = [digit for digit in digits if digit < k]\n        digits = [digit for digit in digits if digit > 0]\n        digits = [digit for digit in digits if digit < k]\n        digits = [digit for digit in digits if digit > 0]\n        digits = [digit for digit in digits if digit < k]\n"
    },
    {
        "number": 403,
        "title": "Frog Jump",
        "difficulty": 2,
        "answer": "        if len(stones) == 0:\n            return False\n        if len(stones) == 1:\n            return stones[0] == stones[-1]\n        if len(stones) == 2:\n            return stones[0] == stones[-1] and stones[1] == stones[0]\n        if len(stones) == 3:\n            return stones[0] == stones[-1] and stones[1] == stones[-2] and stones[2] == stones[-1]\n        if len(stones) == 4:\n            return stones[0] == stones[-1] and stones[1] == stones[-2] and stones[2] == stones[-3] and stones[3] == stones[-1]\n        if len(stones) == 5:\n            return stones[0] == stones[-1] and stones[1] == stones[-2] and stones[2] == stones[-3] and stones[3] == stones[-4] and stones[4] == stones[-1]\n        if len(stones) == 6:\n            return"
    },
    {
        "number": 404,
        "title": "Sum of Left Leaves",
        "difficulty": 0,
        "answer": "        if root is None:\n            return 0\n        if root.left is None:\n            return root.val\n        return self.sumOfLeftLeaves(root.left) + self.sumOfLeftLeaves(root.right)"
    },
    {
        "number": 405,
        "title": "Convert a Number to Hexadecimal",
        "difficulty": 0,
        "answer": "        if num < 0:\n            return str(num)\n        if num == 0:\n            return \"0\"\n        if num == 1:\n            return \"1\"\n        if num == -1:\n            return \"ffffffff\"\n        return str(num) + \"h\""
    },
    {
        "number": 406,
        "title": "Queue Reconstruction by Height",
        "difficulty": 1,
        "answer": "        queue = []\n        for i in range(len(people)):\n            if people[i][0] > people[i][1]:\n                queue.append([people[i][0], people[i][1]])\n            else:\n                queue.append([people[i][1], people[i][0]])\n        return queue\n"
    },
    {
        "number": 407,
        "title": "Trapping Rain Water II",
        "difficulty": 2,
        "answer": "        return sum(heightMap[i] for i in range(len(heightMap)))"
    },
    {
        "number": 409,
        "title": "Longest Palindrome",
        "difficulty": 0,
        "answer": "        if len(s) == 0:\n            return 0\n        if len(s) == 1:\n            return 1\n        if len(s) == 2:\n            return 2\n        if len(s) == 3:\n            return 3\n        if len(s) == 4:\n            return 4\n        if len(s) == 5:\n            return 5\n        if len(s) == 6:\n            return 6\n        if len(s) == 7:\n            return 7\n        if len(s) == 8:\n            return 8\n        if len(s) == 9:\n            return 9\n        if len(s) == 10:\n            return 10\n        if len(s) == 11:\n            return 11\n        if len(s) == 12:\n            return 12\n        if len(s) == 13:\n            return 13\n        if len(s) == 14:\n            return 14\n        if len(s) == 15:\n            return 15\n        if len(s) == 16:\n            return 16\n        if len(s) == 17:\n            return"
    },
    {
        "number": 410,
        "title": "Split Array Largest Sum",
        "difficulty": 2,
        "answer": "        if len(nums) == 0 or len(nums) == k:\n            return nums\n        if len(nums) == 1:\n            return nums\n        if len(nums) == k:\n            return nums[:k]\n        if len(nums) == k + 1:\n            return nums[:k] + nums[k:]\n        if len(nums) == k + 2:\n            return nums[:k] + nums[k:] + nums[:k]\n        if len(nums) == k + 3:\n            return nums[:k] + nums[k:] + nums[:k] + nums[k:]\n        if len(nums) == k + 4:\n            return nums[:k] + nums[k:] + nums[:k] + nums[k:] + nums[:k]\n        if len(nums) == k + 5:\n            return nums[:k] + nums[k:] + nums[:k] + nums["
    },
    {
        "number": 412,
        "title": "Fizz Buzz",
        "difficulty": 0,
        "answer": "        answer = []\n        if n % 3 == 0:\n            answer.append(\"Fizz\")\n        if n % 5 == 0:\n            answer.append(\"Buzz\")\n        if n % 15 == 0:\n            answer.append(str(n))\n        return answer"
    },
    {
        "number": 413,
        "title": "Arithmetic Slices",
        "difficulty": 1,
        "answer": "        if len(nums) < 3:\n            return 0\n        if len(nums) == 3:\n            return nums[0] + nums[1] + nums[2]\n        else:\n            return nums[0] + nums[1] + nums[2] + nums[3]"
    },
    {
        "number": 414,
        "title": "Third Maximum Number",
        "difficulty": 0,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return max(nums[0], nums[1])\n        if len(nums) == 3:\n            return max(nums[0], nums[1], nums[2])\n        return max(nums[0], nums[1], nums[2], nums[3])"
    },
    {
        "number": 415,
        "title": "Add Strings",
        "difficulty": 0,
        "answer": "        if num1 == num2:\n            return num1\n        if num1 < 0 or num2 < 0:\n            return \"\"\n        if num1 > num2:\n            return \"\"\n        return str(num1) + str(num2)"
    },
    {
        "number": 416,
        "title": "Partition Equal Subset Sum",
        "difficulty": 1,
        "answer": "        if not nums:\n            return False\n        if len(nums) == 1:\n            return True\n        sum_ = sum(nums)\n        if sum_ == nums[0]:\n            return True\n        return False"
    },
    {
        "number": 417,
        "title": "Pacific Atlantic Water Flow",
        "difficulty": 1,
        "answer": "        if not heights:\n            return []\n        result = []\n        for i in range(len(heights)):\n            result.append([heights[i][0], heights[i][1]])\n        return result"
    },
    {
        "number": 419,
        "title": "Battleships in a Board",
        "difficulty": 1,
        "answer": "        n = len(board)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1\n        if n == 3:\n            return 1\n        if n == 4:\n            return 1\n        if n == 5:\n            return 1\n        if n == 6:\n            return 1\n        if n == 7:\n            return 1\n        if n == 8:\n            return 1\n        if n == 9:\n            return 1\n        if n == 10:\n            return 1\n        if n == 11:\n            return 1\n        if n == 12:\n            return 1\n        if n == 13:\n            return 1\n        if n == 14:\n            return 1\n        if n == 15:\n            return 1\n        if n == 16:\n            return 1\n        if n == 17:\n            return 1\n        if n == 18:\n            return 1\n        if n == 19:\n            return 1\n        if n == 20:\n            return 1\n        if n == 21:\n            return 1\n"
    },
    {
        "number": 420,
        "title": "Strong Password Checker",
        "difficulty": 2,
        "answer": "        if len(password) < 6:\n            return 0\n        if len(password) < 20:\n            return 0\n        if len(password) < 30:\n            return 0\n        if len(password) < 40:\n            return 0\n        if len(password) < 50:\n            return 0\n        if len(password) < 60:\n            return 0\n        if len(password) < 70:\n            return 0\n        if len(password) < 80:\n            return 0\n        if len(password) < 90:\n            return 0\n        if len(password) < 100:\n            return 0\n        if len(password) < 110:\n            return 0\n        if len(password) < 120:\n            return 0\n        if len(password) < 130:\n            return 0\n        if len(password) < 140:\n            return 0\n        if len(password) < 150:\n            return 0\n        if len(password) < 160:\n            return 0\n        if len(password) < 170:\n            return 0\n        if len(password) < 180:\n            return"
    },
    {
        "number": 421,
        "title": "Maximum XOR of Two Numbers in an Array",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return nums[0] ^ nums[1]\n        if n == 3:\n            return nums[0] ^ nums[1] ^ nums[2]\n        if n == 4:\n            return nums[0] ^ nums[1] ^ nums[2] ^ nums[3]\n        if n == 5:\n            return nums[0] ^ nums[1] ^ nums[2] ^ nums[3] ^ nums[4]\n        if n == 6:\n            return nums[0] ^ nums[1] ^ nums[2] ^ nums[3] ^ nums[4] ^ nums[5]\n        if n == 7:\n            return nums[0] ^ nums[1] ^ nums[2] ^ nums[3] ^ nums[4] ^ nums[5] ^ nums[6]"
    },
    {
        "number": 423,
        "title": "Reconstruct Original Digits from English",
        "difficulty": 1,
        "answer": "        digits = []\n        for i in range(len(s)):\n            if s[i] in '0123456789':\n                digits.append(s[i])\n        return ''.join(digits)"
    },
    {
        "number": 424,
        "title": "Longest Repeating Character Replacement",
        "difficulty": 1,
        "answer": "        if len(s) == 0:\n            return 0\n        if len(s) == 1:\n            return 1\n        if len(s) == 2:\n            return 2\n        if len(s) == 3:\n            return 3\n        if len(s) == 4:\n            return 4\n        if len(s) == 5:\n            return 5\n        if len(s) == 6:\n            return 6\n        if len(s) == 7:\n            return 7\n        if len(s) == 8:\n            return 8\n        if len(s) == 9:\n            return 9\n        if len(s) == 10:\n            return 10\n        if len(s) == 11:\n            return 11\n        if len(s) == 12:\n            return 12\n        if len(s) == 13:\n            return 13\n        if len(s) == 14:\n            return 14\n        if len(s) == 15:\n            return 15\n        if len(s) == 16:\n            return 16\n        if len(s) == 17:\n            return"
    },
    {
        "number": 427,
        "title": "Construct Quad Tree",
        "difficulty": 1,
        "answer": "        def _get_val(node):\n            if node.isLeaf:\n                return node.val\n            else:\n                return node.val + node.isLeaf\n        def _get_isLeaf(node):\n            if node.isLeaf:\n                return node.val\n            else:\n                return node.isLeaf + node.val\n        def _get_topLeft(node):\n            if node.isLeaf:\n                return node.topLeft\n            else:\n                return node.topLeft + node.isLeaf\n        def _get_topRight(node):\n            if node.isLeaf:\n                return node.topRight\n            else:\n                return node.topRight + node.isLeaf\n        def _get_bottomLeft(node):\n            if node.isLeaf:\n                return node.bottomLeft\n            else:\n                return node.bottomLeft + node.isLeaf\n        def _get_bottomRight(node):\n            if node.isLeaf:\n                return node.bottomRight\n            else:\n                return node"
    },
    {
        "number": 429,
        "title": "N-ary Tree Level Order Traversal",
        "difficulty": 1,
        "answer": "    def __repr__(self):\n        return str(self.val)\n    def __str__(self):\n        return str(self.val)\n    def __eq__(self, other):\n        return str(self) == str(other)\n    def __ne__(self, other):\n        return str(self)!= str(other)\n    def __lt__(self, other):\n        return str(self) < str(other)\n    def __le__(self, other):\n        return str(self) <= str(other)\n    def __gt__(self, other):\n        return str(self) > str(other)\n    def __ge__(self, other):\n        return str(self) >= str(other)\n    def __contains__(self, other):\n        return str(self) in str(other)\n    def __len__(self):\n        return len(self.val)\n    def __getitem__(self, index):\n        return self.val[index]\n    def __setitem__(self, index, value"
    },
    {
        "number": 430,
        "title": "Flatten a Multilevel Doubly Linked List",
        "difficulty": 1,
        "answer": "        self.head = val\n        self.child = None\n        self.next = None\n        self.prev = None\n        self.child = None\n        self.next = None\n        self.prev = None\n        self.child = None\n        self.next = None\n        self.prev = None\n        self.child = None\n        self.next = None\n        self.prev = None\n        self.child = None\n        self.next = None\n        self.prev = None\n        self.child = None\n        self.next = None\n        self.prev = None\n        self.child = None\n        self.next = None\n        self.prev = None\n        self.child = None\n        self.next = None\n        self.prev = None\n        self.child = None\n        self.next = None\n        self.prev = None\n        self.child = None\n        self.next = None\n        self.prev = None\n        self.child = None\n        self.next = None\n        self.prev = None\n        self.child = None\n        self.next ="
    },
    {
        "number": 432,
        "title": "All O`one Data Structure",
        "difficulty": 2,
        "answer": "        pass\n"
    },
    {
        "number": 433,
        "title": "Minimum Genetic Mutation",
        "difficulty": 1,
        "answer": "        if not startGene.isalpha() and not endGene.isalpha():\n            return -1\n        if not startGene.isalpha() and endGene.isalpha():\n            return -1\n        if not startGene.isalpha() and not endGene.isalpha():\n            return -1\n        if not startGene.isalpha() and not endGene.isalpha():\n            return -1\n        if not startGene.isalpha() and not endGene.isalpha():\n            return -1\n        if not startGene.isalpha() and not endGene.isalpha():\n            return -1\n        if not startGene.isalpha() and not endGene.isalpha():\n            return -1\n        if not startGene.isalpha() and not endGene.isalpha():\n            return -1\n        if not startGene.isalpha() and not endGene.isalpha():\n            return -1\n        if not startGene.isalpha() and not endGene.isalpha():\n            return -1\n        if not startGene.isalpha() and not endGene.isalpha():\n            return -"
    },
    {
        "number": 434,
        "title": "Number of Segments in a String",
        "difficulty": 0,
        "answer": "        n = 0\n        for c in s:\n            if c in string.whitespace:\n                n += 1\n            else:\n                break\n        return n"
    },
    {
        "number": 435,
        "title": "Non-overlapping Intervals",
        "difficulty": 1,
        "answer": "        n = len(intervals)\n        if n == 0:\n            return 0\n        if n == 1:\n            return intervals[0][1] - intervals[0][0]\n        if n == 2:\n            return intervals[0][1] - intervals[1][0]\n        if n == 3:\n            return intervals[1][1] - intervals[2][0]\n        return 0"
    },
    {
        "number": 436,
        "title": "Find Right Interval",
        "difficulty": 1,
        "answer": "        if len(intervals) == 0:\n            return [-1]\n        if len(intervals) == 1:\n            return [-1]\n        if len(intervals) == 2:\n            return [-1]\n        if len(intervals) == 3:\n            return [-1]\n        if len(intervals) == 4:\n            return [-1]\n        if len(intervals) == 5:\n            return [-1]\n        if len(intervals) == 6:\n            return [-1]\n        if len(intervals) == 7:\n            return [-1]\n        if len(intervals) == 8:\n            return [-1]\n        if len(intervals) == 9:\n            return [-1]\n        if len(intervals) == 10:\n            return [-1]\n        if len(intervals) == 11:\n            return [-1]\n        if len(intervals) == 12:\n            return [-1]\n        if len(intervals) == 13:\n            return [-1]\n        if len(intervals) == 14:\n            "
    },
    {
        "number": 437,
        "title": "Path Sum III",
        "difficulty": 1,
        "answer": "        if root is None:\n            return 0\n        if targetSum == 0:\n            return 0\n        if targetSum == 1:\n            return 1\n        if targetSum == -1:\n            return -1\n        if targetSum == -2:\n            return -2\n        if targetSum == -3:\n            return -3\n        if targetSum == -4:\n            return -4\n        if targetSum == -5:\n            return -5\n        if targetSum == -6:\n            return -6\n        if targetSum == -7:\n            return -7\n        if targetSum == -8:\n            return -8\n        if targetSum == -9:\n            return -9\n        if targetSum == -10:\n            return -10\n        if targetSum == -11:\n            return -11\n        if targetSum == -12:\n            return -12\n        if targetSum == -13:\n            return -13\n        if targetSum == -14:\n            return -14\n        if targetSum == -15:\n            return -15\n        if targetSum =="
    },
    {
        "number": 438,
        "title": "Find All Anagrams in a String",
        "difficulty": 1,
        "answer": "        ans = []\n        for i in range(len(s)):\n            if s[i] == p[i]:\n                ans.append(i)\n        return ans"
    },
    {
        "number": 440,
        "title": "K-th Smallest in Lexicographical Order",
        "difficulty": 2,
        "answer": "        if k == 0:\n            return n\n        if k == 1:\n            return n - 1\n        if k == n - 1:\n            return n - k\n        if k > n:\n            return n\n        if k < n:\n            return n - k\n        return n - k"
    },
    {
        "number": 441,
        "title": "Arranging Coins",
        "difficulty": 0,
        "answer": "        if n < 1:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        return 0"
    },
    {
        "number": 442,
        "title": "Find All Duplicates in an Array",
        "difficulty": 1,
        "answer": "        if not nums:\n            return []\n        if len(nums) == 1:\n            return [nums[0]]\n        if len(nums) == 2:\n            return [nums[0], nums[1]]\n        return self.findDuplicates2(nums)"
    },
    {
        "number": 443,
        "title": "String Compression",
        "difficulty": 1,
        "answer": "        if not chars:\n            return 0\n        s = \"\"\n        for c in chars:\n            s += c\n        return len(s)"
    },
    {
        "number": 445,
        "title": "Add Two Numbers II",
        "difficulty": 1,
        "answer": "        if l1 is None or l2 is None:\n            return None\n        if l1.next is None or l2.next is None:\n            return None\n        if l1.next.next is None or l2.next.next is None:\n            return None\n        if l1.next.next.next is None or l2.next.next.next is None:\n            return None\n        if l1.next.next.next.next is None or l2.next.next.next.next is None:\n            return None\n        if l1.next.next.next.next.next is None or l2.next.next.next.next.next is None:\n            return None\n        if l1.next.next.next.next.next.next is None or l2.next.next.next.next.next.next is None:\n            return None\n        if l1.next.next.next.next.next.next.next is None or l2.next.next.next.next.next.next.next is None:\n            return None\n        if"
    },
    {
        "number": 446,
        "title": "Arithmetic Slices II - Subsequence",
        "difficulty": 2,
        "answer": "        if not nums:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return nums[0] + nums[1]\n        if len(nums) == 3:\n            return nums[0] + nums[1] + nums[2]\n        if len(nums) == 4:\n            return nums[0] + nums[1] + nums[2] + nums[3]\n        if len(nums) == 5:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4]\n        if len(nums) == 6:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5]\n        if len(nums) == 7:\n            return nums[0] + nums[1] + nums[2] + nums[3"
    },
    {
        "number": 447,
        "title": "Number of Boomerangs",
        "difficulty": 1,
        "answer": "        n = len(points)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n"
    },
    {
        "number": 448,
        "title": "Find All Numbers Disappeared in an Array",
        "difficulty": 0,
        "answer": "        result = []\n        for i in range(len(nums)):\n            if nums[i] not in result:\n                result.append(nums[i])\n        return result"
    },
    {
        "number": 449,
        "title": "Serialize and Deserialize BST",
        "difficulty": 1,
        "answer": "        if root is None:\n            return \"\"\n        return self.serialize_tree(root)"
    },
    {
        "number": 450,
        "title": "Delete Node in a BST",
        "difficulty": 1,
        "answer": "        if root is None:\n            return None\n        if root.val == key:\n            root.val = None\n            return root\n        if root.val == key:\n            return root\n        if root.val > key:\n            root.val = None\n            return root\n        if root.val < key:\n            root.val = None\n            return root\n        return None"
    },
    {
        "number": 451,
        "title": "Sort Characters By Frequency",
        "difficulty": 1,
        "answer": "        answers = []\n        for char in s:\n            if char not in answers:\n                answers.append(char)\n        return sorted(answers, key=lambda x: x.count(char))[0]"
    },
    {
        "number": 452,
        "title": "Minimum Number of Arrows to Burst Balloons",
        "difficulty": 1,
        "answer": "        n = len(points)\n        if n == 0:\n            return 0\n        if n == 1:\n            return points[0][0]\n        if n == 2:\n            return points[0][0] + points[1][0]\n        if n == 3:\n            return points[0][0] + points[1][0] + points[2][0]\n        if n == 4:\n            return points[0][0] + points[1][0] + points[2][0] + points[3][0]\n        if n == 5:\n            return points[0][0] + points[1][0] + points[2][0] + points[3][0] + points[4][0]\n        return 0"
    },
    {
        "number": 453,
        "title": "Minimum Moves to Equal Array Elements",
        "difficulty": 1,
        "answer": "        if not nums:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return min(nums[0], nums[1])\n        if len(nums) == 3:\n            return min(nums[0], nums[1], nums[2])\n        return 0"
    },
    {
        "number": 454,
        "title": "4Sum II",
        "difficulty": 1,
        "answer": "        if not nums1 or not nums2 or not nums3 or not nums4:\n            return 0\n        n = len(nums1)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums1[0] + nums2[0] + nums3[0] + nums4[0]\n        if n == 2:\n            return nums1[0] + nums2[0] + nums3[0] + nums4[0] + nums1[1] + nums2[1] + nums3[1] + nums4[1]\n        if n == 3:\n            return nums1[0] + nums2[0] + nums3[0] + nums4[0] + nums1[1] + nums2[1] + nums3[1] + nums4[1] + nums1[2] + nums2[2] + nums3[2] + nums4[2]\n        if n == 4:\n"
    },
    {
        "number": 455,
        "title": "Assign Cookies",
        "difficulty": 0,
        "answer": "        if len(g) == 0 or len(s) == 0:\n            return 0\n        if len(g) == 1:\n            return g[0]\n        if len(s) == 1:\n            return s[0]\n        if len(g) == 2:\n            return max(g[0], g[1])\n        if len(s) == 2:\n            return max(s[0], s[1])\n        return 0"
    },
    {
        "number": 456,
        "title": "132 Pattern",
        "difficulty": 1,
        "answer": "        if len(nums) < 3:\n            return False\n        if len(nums) == 3:\n            return nums[0] == nums[1] and nums[1] == nums[2]\n        if len(nums) == 2:\n            return nums[0] == nums[1] and nums[1] == nums[0]\n        return False"
    },
    {
        "number": 457,
        "title": "Circular Array Loop",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return False\n        if len(nums) == 1:\n            return True\n        if len(nums) == 2:\n            return False\n        if len(nums) == 3:\n            return False\n        if len(nums) == 4:\n            return False\n        if len(nums) == 5:\n            return False\n        if len(nums) == 6:\n            return False\n        if len(nums) == 7:\n            return False\n        if len(nums) == 8:\n            return False\n        if len(nums) == 9:\n            return False\n        if len(nums) == 10:\n            return False\n        if len(nums) == 11:\n            return False\n        if len(nums) == 12:\n            return False\n        if len(nums) == 13:\n            return False\n        if len(nums) == 14:\n            return False\n        if len(nums) == 15:\n            return False\n        if len(nums) == 16:"
    },
    {
        "number": 458,
        "title": "Poor Pigs",
        "difficulty": 2,
        "answer": "        if buckets <= 0 or minutesToDie <= 0 or minutesToTest <= 0:\n            return 0\n        if buckets == 1 and minutesToDie == 0 and minutesToTest == 0:\n            return 1\n        if buckets == 1 and minutesToDie == 0 and minutesToTest == 1:\n            return 2\n        if buckets == 1 and minutesToDie == 0 and minutesToTest == 2:\n            return 3\n        if buckets == 1 and minutesToDie == 0 and minutesToTest == 3:\n            return 4\n        if buckets == 1 and minutesToDie == 0 and minutesToTest == 4:\n            return 5\n        if buckets == 2 and minutesToDie == 0 and minutesToTest == 0:\n            return 1\n        if buckets == 2 and minutesToDie == 0 and minutesToTest == 1:\n            return 2\n        if buckets == 2 and minutesToDie == 0 and minutesToTest == 2:\n            return 3\n        if buckets == 2 and minutesToDie == 0 and minutesToTest == 3:\n            return 4\n        if buckets == 3 and minutesToDie == 0 and minutesToTest == 0:\n            "
    },
    {
        "number": 459,
        "title": "Repeated Substring Pattern",
        "difficulty": 0,
        "answer": "        if len(s) == 0:\n            return False\n        if len(s) == 1:\n            return True\n        if s[0] == s[-1]:\n            return True\n        if s[0] == s[-1] + s[1]:\n            return True\n        return False"
    },
    {
        "number": 460,
        "title": "LFU Cache",
        "difficulty": 2,
        "answer": "        self.capacity = capacity\n        self.__lfu = {}\n        self.__lfu_cnt = {}\n        self.__lfu_cnt_max = 0\n        self.__lfu_cnt_min = 0\n        self.__lfu_cnt_sum = 0\n        self.__lfu_cnt_sum_max = 0\n        self.__lfu_cnt_sum_min = 0\n        self.__lfu_cnt_sum_sum = 0\n        self.__lfu_cnt_sum_sum_max = 0\n        self.__lfu_cnt_sum_sum_min = 0\n        self.__lfu_cnt_sum_sum_sum = 0\n        self.__lfu_cnt_sum_sum_sum_max = 0\n        self.__lfu_cnt_sum_sum_sum_min = 0\n        self.__lfu_cnt_sum_sum_sum_sum = 0\n        self.__lfu_cnt_sum_sum_sum_sum_"
    },
    {
        "number": 461,
        "title": "Hamming Distance",
        "difficulty": 0,
        "answer": "        if x == y:\n            return 1\n        elif x < y:\n            return self.hammingDistance(x, y)\n        else:\n            return self.hammingDistance(y, x)"
    },
    {
        "number": 462,
        "title": "Minimum Moves to Equal Array Elements II",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return nums[0] + nums[1]\n        if len(nums) == 3:\n            return nums[0] + nums[1] + nums[2]\n        return 0"
    },
    {
        "number": 463,
        "title": "Island Perimeter",
        "difficulty": 0,
        "answer": "        if len(grid) == 0:\n            return 0\n        if len(grid) == 1:\n            return grid[0][0]\n        if len(grid) == 2:\n            return grid[0][0] + grid[0][1]\n        if len(grid) == 3:\n            return grid[0][0] + grid[0][1] + grid[0][2]\n        if len(grid) == 4:\n            return grid[0][0] + grid[0][1] + grid[0][2] + grid[0][3]\n        return 0"
    },
    {
        "number": 464,
        "title": "Can I Win",
        "difficulty": 1,
        "answer": "        return maxChoosableInteger <= desiredTotal"
    },
    {
        "number": 466,
        "title": "Count The Repetitions",
        "difficulty": 2,
        "answer": "        if not s1 or not s2 or not n1 or not n2:\n            return 0\n        if s1 == s2:\n            return n1\n        if s1 == s2:\n            return n2\n        if s1 == s2:\n            return n1\n        if s1 == s2:\n            return n2\n        if s1 == s2:\n            return n1\n        if s1 == s2:\n            return n2\n        if s1 == s2:\n            return n1\n        if s1 == s2:\n            return n2\n        if s1 == s2:\n            return n1\n        if s1 == s2:\n            return n2\n        if s1 == s2:\n            return n1\n        if s1 == s2:\n            return n2\n        if s1 == s2:\n            return n1\n        if s1 == s2:\n            return n2\n        if s1 == s2:\n            return n1\n        if s1 == s2:\n            return n2\n        if s"
    },
    {
        "number": 467,
        "title": "Unique Substrings in Wraparound String",
        "difficulty": 1,
        "answer": "        return len(s) - len(s.rstrip(\"z\"))"
    },
    {
        "number": 468,
        "title": "Validate IP Address",
        "difficulty": 1,
        "answer": "        if queryIP.startswith(\"0\"):\n            return \"IPv4\"\n        elif queryIP.startswith(\"1\"):\n            return \"IPv6\"\n        else:\n            return \"Neither\""
    },
    {
        "number": 470,
        "title": "Implement Rand10() Using Rand7()",
        "difficulty": 1,
        "answer": "        return [2, 8]"
    },
    {
        "number": 472,
        "title": "Concatenated Words",
        "difficulty": 2,
        "answer": "        return self.findAllConcatenatedWordsInArray(words, len(words))"
    },
    {
        "number": 473,
        "title": "Matchsticks to Square",
        "difficulty": 1,
        "answer": "        if len(matchsticks) == 0:\n            return False\n        if len(matchsticks) == 1:\n            return True\n        if len(matchsticks) == 2:\n            return True\n        if len(matchsticks) == 3:\n            return True\n        if len(matchsticks) == 4:\n            return True\n        return False"
    },
    {
        "number": 474,
        "title": "Ones and Zeroes",
        "difficulty": 1,
        "answer": "        if len(strs) == 0:\n            return 0\n        if len(strs) == 1:\n            return 1\n        if len(strs) == 2:\n            return 2\n        if len(strs) == 3:\n            return 3\n        if len(strs) == 4:\n            return 4\n        if len(strs) == 5:\n            return 5\n        if len(strs) == 6:\n            return 6\n        if len(strs) == 7:\n            return 7\n        if len(strs) == 8:\n            return 8\n        if len(strs) == 9:\n            return 9\n        if len(strs) == 10:\n            return 10\n        if len(strs) == 11:\n            return 11\n        if len(strs) == 12:\n            return 12\n        if len(strs) == 13:\n            return 13\n        if len(strs) == 14:\n            return 14\n        if len(strs) == 15:\n            return 15\n        if len(strs) == 16:"
    },
    {
        "number": 475,
        "title": "Heaters",
        "difficulty": 1,
        "answer": "        if len(heaters) == 0:\n            return 0\n        if len(heaters) == 1:\n            return heaters[0]\n        if len(heaters) == 2:\n            return min(heaters[0], heaters[1])\n        return min(heaters[0], heaters[1], heaters[2])"
    },
    {
        "number": 476,
        "title": "Number Complement",
        "difficulty": 0,
        "answer": "        if num == 0:\n            return 0\n        if num == 1:\n            return 1\n        return num - 1"
    },
    {
        "number": 477,
        "title": "Total Hamming Distance",
        "difficulty": 1,
        "answer": "        if not nums:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return nums[0] + nums[1]\n        if len(nums) == 3:\n            return nums[0] + nums[1] + nums[2]\n        if len(nums) == 4:\n            return nums[0] + nums[1] + nums[2] + nums[3]\n        return 0"
    },
    {
        "number": 478,
        "title": "Generate Random Point in a Circle",
        "difficulty": 1,
        "answer": "        self.radius = radius\n        self.x_center = x_center\n        self.y_center = y_center"
    },
    {
        "number": 479,
        "title": "Largest Palindrome Product",
        "difficulty": 2,
        "answer": "        if n < 0 or n > 1337:\n            return n\n        return self.largestPalindrome(n // 1337) % 1337"
    },
    {
        "number": 480,
        "title": "Sliding Window Median",
        "difficulty": 2,
        "answer": "        if len(nums) % 2 == 0:\n            return [nums[k // 2] + nums[k // 2 + 1]]\n        else:\n            return [nums[k // 2] + nums[k // 2 + 1] + nums[k // 2]]"
    },
    {
        "number": 481,
        "title": "Magical String",
        "difficulty": 1,
        "answer": "        if n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        elif n == 3:\n            return 3\n        elif n == 4:\n            return 4\n        elif n == 5:\n            return 5\n        elif n == 6:\n            return 6\n        else:\n            return 0"
    },
    {
        "number": 482,
        "title": "License Key Formatting",
        "difficulty": 0,
        "answer": "        s = s.replace(\"-\", \"\")\n        s = s.replace(\"-\", \"\")\n        s = s.replace(\"-\", \"\")\n        s = s.replace(\"-\", \"\")\n        s = s.replace(\"-\", \"\")\n        s = s.replace(\"-\", \"\")\n        s = s.replace(\"-\", \"\")\n        s = s.replace(\"-\", \"\")\n        s = s.replace(\"-\", \"\")\n        s = s.replace(\"-\", \"\")\n        s = s.replace(\"-\", \"\")\n        s = s.replace(\"-\", \"\")\n        s = s.replace(\"-\", \"\")\n        s = s.replace(\"-\", \"\")\n        s = s.replace(\"-\", \"\")\n        s = s.replace(\"-\", \"\")\n        s = s.replace(\"-\", \"\")\n        s = s.replace(\"-\", \"\")\n        s = s.replace(\"-\", \"\")\n        s = s.replace(\"-\", \"\")\n        s = s.replace(\"-\", \""
    },
    {
        "number": 483,
        "title": "Smallest Good Base",
        "difficulty": 2,
        "answer": "        if n == \"\":\n            return n\n        if n[0] == \"0\":\n            return n\n        if n[0] == \"1\":\n            return n\n        if n[0] == \"2\":\n            return n\n        if n[0] == \"3\":\n            return n\n        if n[0] == \"4\":\n            return n\n        if n[0] == \"5\":\n            return n\n        if n[0] == \"6\":\n            return n\n        if n[0] == \"7\":\n            return n\n        if n[0] == \"8\":\n            return n\n        if n[0] == \"9\":\n            return n\n        if n[0] == \"10\":\n            return n\n        if n[0] == \"11\":\n            return n\n        if n[0] == \"12\":\n            return n\n        if n[0] == \"13\":\n            return n\n        if n[0] == \"14\":\n            return n\n        if n[0] == \"15\":\n            return n"
    },
    {
        "number": 485,
        "title": "Max Consecutive Ones",
        "difficulty": 0,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return 1\n        if len(nums) == 2:\n            return nums[0]\n        if len(nums) == 3:\n            return max(nums[0], nums[1])\n        return 0"
    },
    {
        "number": 486,
        "title": "Predict the Winner",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return False\n        if len(nums) == 1:\n            return nums[0] == nums[-1]\n        if len(nums) == 2:\n            return nums[0] == nums[-1] and nums[1] == nums[-2]\n        if len(nums) == 3:\n            return nums[0] == nums[-1] and nums[1] == nums[-2] and nums[2] == nums[-3]\n        if len(nums) == 4:\n            return nums[0] == nums[-1] and nums[1] == nums[-2] and nums[2] == nums[-3] and nums[3] == nums[-4]\n        if len(nums) == 5:\n            return nums[0] == nums[-1] and nums[1] == nums[-2] and nums[2] == nums[-3] and num"
    },
    {
        "number": 488,
        "title": "Zuma Game",
        "difficulty": 2,
        "answer": "        if not board:\n            return -1\n        if not hand:\n            return 2\n        if not board.endswith(\"W\"):\n            return 2\n        if not hand.endswith(\"W\"):\n            return 2\n        if not board.endswith(\"R\"):\n            return 2\n        if not hand.endswith(\"R\"):\n            return 2\n        if not board.endswith(\"B\"):\n            return 2\n        if not hand.endswith(\"B\"):\n            return 2\n        if not board.endswith(\"G\"):\n            return 2\n        if not hand.endswith(\"G\"):\n            return 2\n        if not board.endswith(\"W\"):\n            return 2\n        if not hand.endswith(\"W\"):\n            return 2\n        if not board.endswith(\"R\"):\n            return 2\n        if not hand.endswith(\"R\"):\n            return 2\n        if not board.endswith(\"B\"):\n            return 2\n        if not hand.endswith"
    },
    {
        "number": 491,
        "title": "Non-decreasing Subsequences",
        "difficulty": 1,
        "answer": "        if len(nums) < 2:\n            return []\n        result = []\n        for i in range(len(nums)):\n            if nums[i] > nums[i - 1]:\n                result.append([nums[i], nums[i - 1]])\n            else:\n                result.append([nums[i], nums[i + 1]])\n        return result"
    },
    {
        "number": 492,
        "title": "Construct the Rectangle",
        "difficulty": 0,
        "answer": "        area = area % 2\n        if area == 1:\n            return [1, 1]\n        elif area == 2:\n            return [2, 2]\n        elif area == 3:\n            return [4, 1]\n        else:\n            return [area, area]"
    },
    {
        "number": 493,
        "title": "Reverse Pairs",
        "difficulty": 2,
        "answer": "        nums = list(nums)\n        nums.sort()\n        nums.reverse()\n        return len(nums)"
    },
    {
        "number": 494,
        "title": "Target Sum",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return nums[0] + nums[1]\n        if len(nums) == 3:\n            return nums[0] + nums[1] + nums[2]\n        if len(nums) == 4:\n            return nums[0] + nums[1] + nums[2] + nums[3]\n        if len(nums) == 5:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4]\n        return 0"
    },
    {
        "number": 495,
        "title": "Teemo Attacking",
        "difficulty": 0,
        "answer": "        return sum(timeSeries[i] for i in range(len(timeSeries)))"
    },
    {
        "number": 496,
        "title": "Next Greater Element I",
        "difficulty": 0,
        "answer": "        ans = [-1, -1]\n        for i in range(len(nums1)):\n            if nums1[i] < nums2[i]:\n                ans[i] = nums2[i]\n        return ans"
    },
    {
        "number": 497,
        "title": "Random Point in Non-overlapping Rectangles",
        "difficulty": 1,
        "answer": "        self.rects = rects\n        self.rects = [list(map(int, r)) for r in self.rects]\n        self.rects = [list(map(int, r)) for r in self.rects]\n        self.rects = [list(map(int, r)) for r in self.rects]\n        self.rects = [list(map(int, r)) for r in self.rects]\n        self.rects = [list(map(int, r)) for r in self.rects]\n        self.rects = [list(map(int, r)) for r in self.rects]\n        self.rects = [list(map(int, r)) for r in self.rects]\n        self.rects = [list(map(int, r)) for r in self.rects]\n        self.rects = [list(map(int, r)) for r in self.rects]\n        self.rects = [list(map(int, r)) for r in self.rects]\n        "
    },
    {
        "number": 498,
        "title": "Diagonal Traverse",
        "difficulty": 1,
        "answer": "        if not mat:\n            return []\n        if len(mat) == 1:\n            return [mat[0]]\n        if len(mat) == 2:\n            return [mat[0], mat[1]]\n        if len(mat) == 3:\n            return [mat[0], mat[1], mat[2]]\n        if len(mat) == 4:\n            return [mat[0], mat[1], mat[2], mat[3]]\n        return []"
    },
    {
        "number": 500,
        "title": "Keyboard Row",
        "difficulty": 0,
        "answer": "        return words"
    },
    {
        "number": 501,
        "title": "Find Mode in Binary Search Tree",
        "difficulty": 0,
        "answer": "        if not root:\n            return []\n        if root.left:\n            return self.findMode(root.left)\n        if root.right:\n            return self.findMode(root.right)\n        return [root.val]"
    },
    {
        "number": 502,
        "title": "IPO",
        "difficulty": 2,
        "answer": "        if k < 0 or w < 0:\n            return 0\n        if k == 0:\n            return 0\n        if w == 0:\n            return 0\n        if w == 1:\n            return 0\n        if w == 2:\n            return 0\n        if w == 3:\n            return 0\n        if w == 4:\n            return 0\n        if w == 5:\n            return 0\n        if w == 6:\n            return 0\n        if w == 7:\n            return 0\n        if w == 8:\n            return 0\n        if w == 9:\n            return 0\n        if w == 10:\n            return 0\n        if w == 11:\n            return 0\n        if w == 12:\n            return 0\n        if w == 13:\n            return 0\n        if w == 14:\n            return 0\n        if w == 15:\n            return 0\n        if w == 16:\n            return 0\n        if w == 17:\n            return 0\n        if w == 18:\n            return 0\n        if w == 19:\n            return 0\n        if w =="
    },
    {
        "number": 503,
        "title": "Next Greater Element II",
        "difficulty": 1,
        "answer": "        if not nums:\n            return []\n        nums.sort()\n        return self.nextGreaterElements(nums[0:-1]) + self.nextGreaterElements(nums[1:])"
    },
    {
        "number": 504,
        "title": "Base 7",
        "difficulty": 0,
        "answer": "        if num < 0:\n            return \"-1\"\n        if num == 0:\n            return \"0\"\n        if num == 1:\n            return \"1\"\n        if num == -1:\n            return \"-1\"\n        if num == -2:\n            return \"-2\"\n        if num == -3:\n            return \"-3\"\n        if num == -4:\n            return \"-4\"\n        if num == -5:\n            return \"-5\"\n        if num == -6:\n            return \"-6\"\n        if num == -7:\n            return \"-7\"\n        if num == -8:\n            return \"-8\"\n        if num == -9:\n            return \"-9\"\n        if num == -10:\n            return \"-10\"\n        if num == -11:\n            return \"-11\"\n        if num == -12:\n            return \"-12\"\n        if num == -13:\n            return \"-13\"\n        if num == -14:\n            return \"-14\"\n        if num == -15:\n            return \"-15\"\n        "
    },
    {
        "number": 506,
        "title": "Relative Ranks",
        "difficulty": 0,
        "answer": "        answer = []\n        for i in range(len(score)):\n            if score[i] == 1:\n                answer.append(\"Gold Medal\")\n            elif score[i] == 2:\n                answer.append(\"Silver Medal\")\n            elif score[i] == 3:\n                answer.append(\"Bronze Medal\")\n            elif score[i] == 4:\n                answer.append(\"Bronze Medal\")\n            elif score[i] == 5:\n                answer.append(\"Bronze Medal\")\n            elif score[i] == 10:\n                answer.append(\"Bronze Medal\")\n            elif score[i] == 9:\n                answer.append(\"Bronze Medal\")\n            elif score[i] == 8:\n                answer.append(\"Bronze Medal\")\n            elif score[i] == 7:\n                answer.append(\"Bronze Medal\")\n            elif score[i] == 6:\n                answer.append(\"Bronze Medal\")\n            elif score[i] == 5:\n                answer.append(\"Bronze Medal\")\n            elif score["
    },
    {
        "number": 507,
        "title": "Perfect Number",
        "difficulty": 0,
        "answer": "        if num == 1:\n            return True\n        if num % 2 == 0:\n            return False\n        for i in range(1, num):\n            if num % i == 0:\n                return False\n        return True"
    },
    {
        "number": 508,
        "title": "Most Frequent Subtree Sum",
        "difficulty": 1,
        "answer": "        if root is None:\n            return []\n        if root.val == 0:\n            return [root.val]\n        if root.val == 1:\n            return [root.val]\n        if root.val == -1:\n            return [root.val]\n        if root.val == -2:\n            return [root.val]\n        if root.val == -3:\n            return [root.val]\n        if root.val == -5:\n            return [root.val]\n        if root.val == -6:\n            return [root.val]\n        if root.val == -7:\n            return [root.val]\n        if root.val == -8:\n            return [root.val]\n        if root.val == -9:\n            return [root.val]\n        if root.val == -10:\n            return [root.val]\n        if root.val == -11:\n            return [root.val]\n        if root.val == -12:\n            return [root.val]\n        if root.val == -"
    },
    {
        "number": 509,
        "title": "Fibonacci Number",
        "difficulty": 0,
        "answer": "        if n == 0:\n            return 1\n        elif n == 1:\n            return 2\n        elif n == 2:\n            return 3\n        elif n == 3:\n            return 4\n        else:\n            return 0"
    },
    {
        "number": 513,
        "title": "Find Bottom Left Tree Value",
        "difficulty": 1,
        "answer": "        if root is None:\n            return None\n        if root.left is None:\n            return root.val\n        return self.findBottomLeftValue(root.left)"
    },
    {
        "number": 514,
        "title": "Freedom Trail",
        "difficulty": 2,
        "answer": "        ring = ring.replace(\"godding\", \"g\")\n        key = key.replace(\"godding\", \"g\")\n        return self.findRotateSteps(ring, key)"
    },
    {
        "number": 515,
        "title": "Find Largest Value in Each Tree Row",
        "difficulty": 1,
        "answer": "        if root is None:\n            return []\n        return sorted(root.val)"
    },
    {
        "number": 516,
        "title": "Longest Palindromic Subsequence",
        "difficulty": 1,
        "answer": "        if len(s) == 0:\n            return 0\n        if len(s) == 1:\n            return 1\n        if len(s) == 2:\n            return 2\n        if len(s) == 3:\n            return 3\n        if len(s) == 4:\n            return 4\n        if len(s) == 5:\n            return 5\n        if len(s) == 6:\n            return 6\n        if len(s) == 7:\n            return 7\n        if len(s) == 8:\n            return 8\n        if len(s) == 9:\n            return 9\n        if len(s) == 10:\n            return 10\n        if len(s) == 11:\n            return 11\n        if len(s) == 12:\n            return 12\n        if len(s) == 13:\n            return 13\n        if len(s) == 14:\n            return 14\n        if len(s) == 15:\n            return 15\n        if len(s) == 16:\n            return 16\n        if len(s) == 17:\n            return"
    },
    {
        "number": 517,
        "title": "Super Washing Machines",
        "difficulty": 2,
        "answer": "        if not machines:\n            return -1\n        if len(machines) == 1:\n            return machines[0]\n        if len(machines) == 2:\n            return min(machines[0], machines[1])\n        if len(machines) == 3:\n            return min(machines[0], machines[1], machines[2])\n        return -1"
    },
    {
        "number": 518,
        "title": "Coin Change II",
        "difficulty": 1,
        "answer": "        if not coins:\n            return 0\n        if not amount:\n            return 0\n        if not coins:\n            return 0\n        if not amount:\n            return 0\n        if not coins:\n            return 0\n        if not amount:\n            return 0\n        if not coins:\n            return 0\n        if not amount:\n            return 0\n        if not coins:\n            return 0\n        if not amount:\n            return 0\n        if not coins:\n            return 0\n        if not amount:\n            return 0\n        if not coins:\n            return 0\n        if not amount:\n            return 0\n        if not coins:\n            return 0\n        if not amount:\n            return 0\n        if not coins:\n            return 0\n        if not amount:\n            return 0\n        if not coins:\n            return 0\n        if not amount:\n            return 0\n        if not coins:\n            return 0\n        if not amount:\n            return 0\n        if not coins:\n            return 0\n        if not amount:\n            return 0\n        if not coins:\n            return 0\n"
    },
    {
        "number": 519,
        "title": "Random Flip Matrix",
        "difficulty": 1,
        "answer": "        self.m = m\n        self.n = n\n        self.matrix = [0 for _ in range(self.m)]\n        self.flip()\n        self.reset()"
    },
    {
        "number": 520,
        "title": "Detect Capital",
        "difficulty": 0,
        "answer": "        return word.startswith(\"USA\") or word.startswith(\"leetcode\")"
    },
    {
        "number": 521,
        "title": "Longest Uncommon Subsequence I",
        "difficulty": 0,
        "answer": "        if not a or not b:\n            return -1\n        if len(a) < len(b):\n            return len(a)\n        if len(b) < len(a):\n            return len(b)\n        return max(0, min(len(a), len(b)))"
    },
    {
        "number": 522,
        "title": "Longest Uncommon Subsequence II",
        "difficulty": 1,
        "answer": "        if not strs:\n            return -1\n        if len(strs) == 1:\n            return len(strs[0])\n        if len(strs) == 2:\n            return max(len(strs[0]), len(strs[1]))\n        if len(strs) == 3:\n            return max(len(strs[0]), len(strs[1]), len(strs[2]))\n        return -1"
    },
    {
        "number": 523,
        "title": "Continuous Subarray Sum",
        "difficulty": 1,
        "answer": "        if len(nums) < 2 or len(nums) % 2!= 0:\n            return False\n        if len(nums) < k:\n            return False\n        for i in range(len(nums) - k + 1):\n            if nums[i] % k!= 0:\n                return False\n        return True"
    },
    {
        "number": 524,
        "title": "Longest Word in Dictionary through Deleting",
        "difficulty": 1,
        "answer": "        # if the string is empty, return an empty string\n        if not s:\n            return \"\"\n        # if the string is empty, return an empty string\n        if not dictionary:\n            return \"\"\n        # if the string is empty, return an empty string\n        if not s:\n            return \"\"\n        # if the string is empty, return an empty string\n        if not dictionary:\n            return \"\"\n        # if the string is empty, return an empty string\n        if not s:\n            return \"\"\n        # if the string is empty, return an empty string\n        if not dictionary:\n            return \"\"\n        # if the string is empty, return an empty string\n        if not s:\n            return \"\"\n        # if the string is empty, return an empty string\n        if not dictionary:\n            return \"\"\n        # if the string is empty, return an empty string\n        if not s:\n            return \"\"\n        # if the string is empty, return an empty string\n        if not dictionary:\n            return \"\"\n        # if the string is empty, return an empty string\n        if not s:\n            "
    },
    {
        "number": 525,
        "title": "Contiguous Array",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return 1\n        if len(nums) == 2:\n            return nums[0] + nums[1]\n        if len(nums) == 3:\n            return max(nums[0], nums[1], nums[2])\n        return 0"
    },
    {
        "number": 526,
        "title": "Beautiful Arrangement",
        "difficulty": 1,
        "answer": "        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        return self.countArrangement(n - 1) + self.countArrangement(n - 2)"
    },
    {
        "number": 528,
        "title": "Random Pick with Weight",
        "difficulty": 1,
        "answer": "        self.w = w\n        self.ans = [0] * len(w)\n        self.ans[0] = 0\n        self.ans[1] = 1\n        self.ans[2] = 1\n        self.ans[3] = 1\n        self.ans[4] = 0\n        self.ans[5] = 0\n        self.ans[6] = 0\n        self.ans[7] = 0\n        self.ans[8] = 0\n        self.ans[9] = 0\n        self.ans[10] = 0\n        self.ans[11] = 0\n        self.ans[12] = 0\n        self.ans[13] = 0\n        self.ans[14] = 0\n        self.ans[15] = 0\n        self.ans[16] = 0\n        self.ans[17] = 0\n        self.ans[18] = 0\n        self.ans[19] = 0\n        self.ans[20] = 0\n        self.ans[21] = 0\n        self.ans[22] = 0"
    },
    {
        "number": 529,
        "title": "Minesweeper",
        "difficulty": 1,
        "answer": "        if len(board) == 0:\n            return board\n        if len(board) == 1:\n            return [board[0]]\n        if len(board) == 2:\n            return [board[0], board[1]]\n        if len(board) == 3:\n            return [board[0], board[1], board[2]]\n        if len(board) == 4:\n            return [board[0], board[1], board[2], board[3]]\n        if len(board) == 5:\n            return [board[0], board[1], board[2], board[3], board[4]]\n        if len(board) == 6:\n            return [board[0], board[1], board[2], board[3], board[4], board[5]]\n        if len(board) == 7:\n            return [board[0], board[1], board[2], board[3], board[4], board[5], board[6]]\n        if len(board) == 8:\n            return [board[0], board[1], board[2], board"
    },
    {
        "number": 530,
        "title": "Minimum Absolute Difference in BST",
        "difficulty": 0,
        "answer": "        if root is None:\n            return 0\n        if root.val == 0:\n            return 0\n        if root.val == 1:\n            return 1\n        if root.val == 2:\n            return 2\n        if root.val == 3:\n            return 3\n        if root.val == 4:\n            return 4\n        if root.val == 5:\n            return 5\n        if root.val == 6:\n            return 6\n        if root.val == 7:\n            return 7\n        if root.val == 8:\n            return 8\n        if root.val == 9:\n            return 9\n        if root.val == 10:\n            return 10\n        if root.val == 11:\n            return 11\n        if root.val == 12:\n            return 12\n        if root.val == 13:\n            return 13\n        if root.val == 14:\n            return 14\n        if root.val == 15:\n            return 15\n        if root.val == 16:\n            return 16\n        if root.val == 17:\n            return 17\n        if root.val"
    },
    {
        "number": 532,
        "title": "K-diff Pairs in an Array",
        "difficulty": 1,
        "answer": "        if k == 0:\n            return 0\n        if k == 1:\n            return len(nums) - 1\n        if k == 2:\n            return len(nums) - 2\n        if k == 3:\n            return len(nums) - 3\n        if k == 4:\n            return len(nums) - 4\n        return 0"
    },
    {
        "number": 535,
        "title": "Encode and Decode TinyURL",
        "difficulty": 1,
        "answer": "        return self.encode(longUrl)"
    },
    {
        "number": 537,
        "title": "Complex Number Multiplication",
        "difficulty": 1,
        "answer": "        if num1 == \"0\" or num1 == \"1\":\n            return num1\n        elif num2 == \"0\" or num2 == \"1\":\n            return num2\n        else:\n            return \"0+\" + num1 + \"i\" + num2"
    },
    {
        "number": 538,
        "title": "Convert BST to Greater Tree",
        "difficulty": 1,
        "answer": "        if root is None:\n            return None\n        if root.val < root.key:\n            return self.convertBST(root.left)\n        else:\n            return self.convertBST(root.right)"
    },
    {
        "number": 539,
        "title": "Minimum Time Difference",
        "difficulty": 1,
        "answer": "        return min(timePoints) - max(timePoints)"
    },
    {
        "number": 540,
        "title": "Single Element in a Sorted Array",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return nums[1]\n        if len(nums) == 3:\n            return nums[2]\n        if len(nums) == 4:\n            return nums[3]\n        if len(nums) == 5:\n            return nums[4]\n        if len(nums) == 6:\n            return nums[5]\n        if len(nums) == 7:\n            return nums[6]\n        if len(nums) == 8:\n            return nums[7]\n        return 0"
    },
    {
        "number": 541,
        "title": "Reverse String II",
        "difficulty": 0,
        "answer": "        if len(s) <= k:\n            return s\n        if k == 0:\n            return s\n        if k == 1:\n            return s[::-1]\n        if k == 2:\n            return s[::-1] + s[::-1]\n        return s[::-1] + s[::-1] + s[::-1]"
    },
    {
        "number": 542,
        "title": "01 Matrix",
        "difficulty": 1,
        "answer": "        if not mat:\n            return []\n        if len(mat) == 0:\n            return []\n        if len(mat) == 1:\n            return [mat[0]]\n        if len(mat) == 2:\n            return [mat[0][0], mat[0][1]]\n        if len(mat) == 3:\n            return [mat[0][0], mat[0][1], mat[1][0], mat[1][1]]\n        if len(mat) == 4:\n            return [mat[0][0], mat[0][1], mat[1][0], mat[1][1], mat[2][0], mat[2][1]]\n        if len(mat) == 5:\n            return [mat[0][0], mat[0][1], mat[1][0], mat[1][1], mat[2][0], mat[2][1], mat[3][0], mat[3][1]]\n        if len(mat) == 6:\n            return [mat[0][0], mat[0][1], mat[1][0], mat"
    },
    {
        "number": 543,
        "title": "Diameter of Binary Tree",
        "difficulty": 0,
        "answer": "        if root is None:\n            return 0\n        if root.left is None and root.right is None:\n            return 1\n        if root.left is not None and root.right is not None:\n            return self.diameterOfBinaryTree(root.left) + self.diameterOfBinaryTree(root.right)\n        return self.diameterOfBinaryTree(root.left) + self.diameterOfBinaryTree(root.right)"
    },
    {
        "number": 546,
        "title": "Remove Boxes",
        "difficulty": 2,
        "answer": "        n = len(boxes)\n        if n == 0:\n            return 0\n        if n == 1:\n            return boxes[0]\n        if n == 2:\n            return boxes[0]\n        if n == 3:\n            return boxes[0]\n        if n == 4:\n            return boxes[0]\n        if n == 5:\n            return boxes[0]\n        if n == 6:\n            return boxes[0]\n        if n == 7:\n            return boxes[0]\n        if n == 8:\n            return boxes[0]\n        if n == 9:\n            return boxes[0]\n        if n == 10:\n            return boxes[0]\n        if n == 11:\n            return boxes[0]\n        if n == 12:\n            return boxes[0]\n        if n == 13:\n            return boxes[0]\n        if n == 14:\n            return boxes[0]\n        if n == 15:\n            return boxes[0]\n        if n == 16:\n            return boxes[0]\n        if n == 17:\n"
    },
    {
        "number": 547,
        "title": "Number of Provinces",
        "difficulty": 1,
        "answer": "        n = len(isConnected)\n        if n == 0:\n            return 0\n        if n == 1:\n            return isConnected[0][0]\n        if n == 2:\n            return isConnected[0][1]\n        if n == 3:\n            return isConnected[1][0]\n        return 0"
    },
    {
        "number": 551,
        "title": "Student Attendance Record I",
        "difficulty": 0,
        "answer": "        return s[0] == 'A' and s[1] == 'L' and s[2] == 'P'"
    },
    {
        "number": 552,
        "title": "Student Attendance Record II",
        "difficulty": 2,
        "answer": "        return sum(1 for _ in range(n)) % 109 + 7"
    },
    {
        "number": 553,
        "title": "Optimal Division",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return \"\"\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return nums[0] + nums[1]\n        if len(nums) == 3:\n            return nums[0] + nums[1] + nums[2]\n        if len(nums) == 4:\n            return nums[0] + nums[1] + nums[2] + nums[3]\n        return \"\""
    },
    {
        "number": 554,
        "title": "Brick Wall",
        "difficulty": 1,
        "answer": "        if len(wall) == 0:\n            return 0\n        if len(wall) == 1:\n            return wall[0][0]\n        if len(wall) == 2:\n            return min(wall[0][0], wall[1][0])\n        if len(wall) == 3:\n            return min(wall[0][0], wall[1][0], wall[2][0])\n        return 0"
    },
    {
        "number": 556,
        "title": "Next Greater Element III",
        "difficulty": 1,
        "answer": "        if n < 0:\n            return -1\n        if n == 0:\n            return 0\n        if n == 1:\n            return n\n        if n == 2:\n            return n\n        if n == 3:\n            return n\n        if n == 4:\n            return n\n        if n == 5:\n            return n\n        if n == 6:\n            return n\n        if n == 7:\n            return n\n        if n == 8:\n            return n\n        if n == 9:\n            return n\n        if n == 10:\n            return n\n        if n == 11:\n            return n\n        if n == 12:\n            return n\n        if n == 13:\n            return n\n        if n == 14:\n            return n\n        if n == 15:\n            return n\n        if n == 16:\n            return n\n        if n == 17:\n            return n\n        if n == 18:\n            return n\n        if n == 19:\n            return n\n        if n == 20:\n            return n\n        if n == 21:\n"
    },
    {
        "number": 557,
        "title": "Reverse Words in a String III",
        "difficulty": 0,
        "answer": "        s = s.lower()\n        s = s.replace(\" \", \"\")\n        s = s.replace(\"-\", \"\")\n        s = s.replace(\".\", \"\")\n        s = s.replace(\"?\", \"\")\n        s = s.replace(\"!\", \"\")\n        s = s.replace(\"(\", \"\")\n        s = s.replace(\")\", \"\")\n        s = s.replace(\"[\", \"\")\n        s = s.replace(\"]\", \"\")\n        s = s.replace(\"{\", \"\")\n        s = s.replace(\"}\", \"\")\n        s = s.replace(\"(\", \"\")\n        s = s.replace(\")\", \"\")\n        s = s.replace(\"[\", \"\")\n        s = s.replace(\"]\", \"\")\n        s = s.replace(\"{\", \"\")\n        s = s.replace(\"}\", \"\")\n        s = s.replace(\"(\", \"\")\n        s = s.replace(\")\", \"\")\n        s = s.replace(\"[\", \"\")\n        s = s.replace"
    },
    {
        "number": 558,
        "title": "Logical OR of Two Binary Grids Represented as Quad-Trees",
        "difficulty": 1,
        "answer": "        self.val = val\n        self.isLeaf = isLeaf\n        self.topLeft = topLeft\n        self.topRight = topRight\n        self.bottomLeft = bottomLeft\n        self.bottomRight = bottomRight\n        self.A = A\n        self.B = B\n        self.C = C\n        self.D = D\n        self.E = E\n        self.F = F\n        self.G = G\n        self.H = H\n        self.I = I\n        self.J = J\n        self.K = K\n        self.L = L\n        self.M = M\n        self.N = N\n        self.O = O\n        self.P = P\n        self.Q = Q\n        self.R = R\n        self.S = S\n        self.T = T\n        self.U = U\n        self.V = V\n        self.W = W\n        self.X = X\n        self.Y = Y\n        self.Z = Z\n        self.A = A\n        self.B = B\n"
    },
    {
        "number": 559,
        "title": "Maximum Depth of N-ary Tree",
        "difficulty": 0,
        "answer": "    def __repr__(self):\n        return str(self.val)\n    def __str__(self):\n        return str(self.val)\n    def __len__(self):\n        return len(self.val)\n    def __getitem__(self, i):\n        return self.val[i]\n    def __setitem__(self, i, val):\n        self.val[i] = val\n    def __delitem__(self, i):\n        del self.val[i]\n    def __iter__(self):\n        return iter(self.val)\n    def __contains__(self, val):\n        return val in self.val\n    def __add__(self, other):\n        return Node(self.val + other.val, self.children + other.children)\n    def __sub__(self, other):\n        return Node(self.val - other.val, self.children - other.children)\n    def __mul__(self, other):\n        return Node(self.val * other.val, self.children"
    },
    {
        "number": 560,
        "title": "Subarray Sum Equals K",
        "difficulty": 1,
        "answer": "        if len(nums) < 2:\n            return 0\n        if k < 0 or k > len(nums) - 1:\n            return 0\n        sum = 0\n        for i in range(len(nums)):\n            sum += nums[i] * k\n        return sum"
    },
    {
        "number": 561,
        "title": "Array Partition",
        "difficulty": 0,
        "answer": "        if not nums:\n            return 0\n        n = len(nums)\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return nums[0] + nums[1]\n        if n == 3:\n            return nums[0] + nums[1] + nums[2]\n        if n == 4:\n            return nums[0] + nums[1] + nums[2] + nums[3]\n        if n == 5:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4]\n        if n == 6:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5]\n        if n == 7:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5] + nums[6]"
    },
    {
        "number": 563,
        "title": "Binary Tree Tilt",
        "difficulty": 0,
        "answer": "        if root is None:\n            return 0\n        sum = 0\n        left = 0\n        right = 0\n        for node in root:\n            sum += node.tilt\n            if node.left:\n                left += node.tilt\n            if node.right:\n                right += node.tilt\n        return sum + left + right"
    },
    {
        "number": 564,
        "title": "Find the Closest Palindrome",
        "difficulty": 2,
        "answer": "        if n == \"\":\n            return n\n        if n == \"1\":\n            return \"1\"\n        if n == \"2\":\n            return \"2\"\n        if n == \"3\":\n            return \"3\"\n        if n == \"4\":\n            return \"4\"\n        if n == \"5\":\n            return \"5\"\n        if n == \"6\":\n            return \"6\"\n        if n == \"7\":\n            return \"7\"\n        if n == \"8\":\n            return \"8\"\n        if n == \"9\":\n            return \"9\"\n        if n == \"0\":\n            return \"0\"\n        if n == \"1\":\n            return \"1\"\n        if n == \"2\":\n            return \"2\"\n        if n == \"3\":\n            return \"3\"\n        if n == \"4\":\n            return \"4\"\n        if n == \"5\":\n            return \"5\"\n        if n == \"6\":\n            return \"6\"\n        if n == \"7\":\n            return \"7\"\n        "
    },
    {
        "number": 565,
        "title": "Array Nesting",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return max(nums[0], nums[1])\n        if len(nums) == 3:\n            return max(nums[0], nums[1], nums[2])\n        if len(nums) == 4:\n            return max(nums[0], nums[1], nums[2], nums[3])\n        return 0"
    },
    {
        "number": 566,
        "title": "Reshape the Matrix",
        "difficulty": 0,
        "answer": "        if len(mat) == 0:\n            return mat\n        if len(mat) == 1:\n            return mat\n        if len(mat) == 2:\n            return mat\n        if len(mat) == 3:\n            return mat\n        if len(mat) == 4:\n            return mat\n        if len(mat) == 5:\n            return mat\n        if len(mat) == 6:\n            return mat\n        if len(mat) == 7:\n            return mat\n        if len(mat) == 8:\n            return mat\n        if len(mat) == 9:\n            return mat\n        if len(mat) == 10:\n            return mat\n        if len(mat) == 11:\n            return mat\n        if len(mat) == 12:\n            return mat\n        if len(mat) == 13:\n            return mat\n        if len(mat) == 14:\n            return mat\n        if len(mat) == 15:\n            return mat\n        if len(mat) == 16:\n            return mat\n        if len(mat) == 17:\n            return"
    },
    {
        "number": 567,
        "title": "Permutation in String",
        "difficulty": 1,
        "answer": "        if len(s1) == 0 or len(s2) == 0:\n            return False\n        if len(s1) == 1:\n            return s2.startswith(s1)\n        if len(s2) == 1:\n            return s1.startswith(s2)\n        return False"
    },
    {
        "number": 572,
        "title": "Subtree of Another Tree",
        "difficulty": 0,
        "answer": "        if root is None or subRoot is None:\n            return False\n        if root.val == subRoot.val:\n            return True\n        if root.val > subRoot.val:\n            return self.isSubtree(root.left, subRoot)\n        else:\n            return self.isSubtree(root.right, subRoot)"
    },
    {
        "number": 575,
        "title": "Distribute Candies",
        "difficulty": 0,
        "answer": "        if len(candyType) == 0:\n            return 0\n        if len(candyType) == 1:\n            return candyType[0]\n        if len(candyType) == 2:\n            return candyType[0] * candyType[1]\n        return candyType[0] * candyType[1] * candyType[2]"
    },
    {
        "number": 576,
        "title": "Out of Boundary Paths",
        "difficulty": 1,
        "answer": "        if startRow < 0 or startColumn < 0:\n            return 0\n        if startRow >= m or startColumn >= n:\n            return 0\n        if startRow < 0 or startColumn >= m or startColumn < 0:\n            return 0\n        if startRow >= m or startColumn >= n:\n            return 0\n        if startRow >= 0 and startColumn >= 0:\n            if startRow == startColumn:\n                return 1\n            if startRow == startColumn + 1:\n                return 1\n            if startRow == startColumn - 1:\n                return 1\n            if startRow == startColumn + 1:\n                return 1\n            if startRow == startColumn - 1:\n                return 1\n            if startRow == startColumn:\n                return 1\n            if startRow == startColumn + 1:\n                return 1\n            if startRow == startColumn - 1:\n                return 1\n            if startRow == startColumn:\n                return 1\n            if startRow == startColumn + 1:\n                return 1\n            if startRow == startColumn - 1:\n                return 1\n            if startRow =="
    },
    {
        "number": 581,
        "title": "Shortest Unsorted Continuous Subarray",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return nums[0] + nums[1]\n        if len(nums) == 3:\n            return nums[0] + nums[1] + nums[2]\n        if len(nums) == 4:\n            return nums[0] + nums[1] + nums[2] + nums[3]\n        if len(nums) == 5:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4]\n        return 0"
    },
    {
        "number": 583,
        "title": "Delete Operation for Two Strings",
        "difficulty": 1,
        "answer": "        if len(word1) == 0 or len(word2) == 0:\n            return 0\n        if len(word1) == 1 and len(word2) == 1:\n            return 1\n        if len(word1) == 1 and len(word2) == 0:\n            return 1\n        if len(word1) == 0 and len(word2) == 1:\n            return 1\n        if len(word1) == 0 and len(word2) == 0:\n            return 1\n        if len(word1) == 1 and len(word2) == 1:\n            return 1\n        if len(word1) == 0 and len(word2) == 0:\n            return 1\n        if len(word1) == 1 and len(word2) == 0:\n            return 1\n        if len(word1) == 0 and len(word2) == 1:\n            return 1\n        if len(word1) == 1 and len(word2) == 0:\n            return 1\n        if len(word1) == 0 and len(word2) == 1:\n            "
    },
    {
        "number": 587,
        "title": "Erect the Fence",
        "difficulty": 2,
        "answer": "        if not trees:\n            return []\n        if len(trees) == 1:\n            return [trees[0]]\n        if len(trees) == 2:\n            return [trees[0], trees[1]]\n        if len(trees) == 3:\n            return [trees[0], trees[1], trees[2]]\n        if len(trees) == 4:\n            return [trees[0], trees[1], trees[2], trees[3]]\n        return []"
    },
    {
        "number": 589,
        "title": "N-ary Tree Preorder Traversal",
        "difficulty": 0,
        "answer": "    def __repr__(self):\n        return str(self.val)\n    def __str__(self):\n        return str(self.val)\n    def __eq__(self, other):\n        return self.val == other\n    def __ne__(self, other):\n        return self.val!= other\n    def __lt__(self, other):\n        return self.val < other\n    def __le__(self, other):\n        return self.val <= other\n    def __gt__(self, other):\n        return self.val > other\n    def __ge__(self, other):\n        return self.val >= other\n    def __contains__(self, other):\n        return self.val in other\n    def __len__(self):\n        return len(self.val)\n    def __getitem__(self, index):\n        return self.val[index]\n    def __setitem__(self, index, value):\n        self.val[index] = value\n    def __delitem__(self, index):\n        del self."
    },
    {
        "number": 590,
        "title": "N-ary Tree Postorder Traversal",
        "difficulty": 0,
        "answer": "    def __repr__(self):\n        return str(self.val)\n    def __str__(self):\n        return str(self.val)\n    def __eq__(self, other):\n        return self.val == other\n    def __ne__(self, other):\n        return self.val!= other\n    def __lt__(self, other):\n        return self.val < other\n    def __le__(self, other):\n        return self.val <= other\n    def __gt__(self, other):\n        return self.val > other\n    def __ge__(self, other):\n        return self.val >= other\n    def __contains__(self, other):\n        return self.val in other\n    def __len__(self):\n        return len(self.val)\n    def __getitem__(self, index):\n        return self.val[index]\n    def __setitem__(self, index, value):\n        self.val[index] = value\n    def __delitem__(self, index):\n        del self."
    },
    {
        "number": 591,
        "title": "Tag Validator",
        "difficulty": 2,
        "answer": "        if not code:\n            return False\n        start_tag = code[0]\n        end_tag = code[-1]\n        if start_tag == end_tag:\n            return True\n        if start_tag == '<':\n            start_tag = '<'\n        if end_tag == '>':\n            end_tag = '>'\n        if start_tag == end_tag:\n            return True\n        if start_tag == '<':\n            start_tag = '<'\n        if end_tag == '>':\n            end_tag = '>'\n        if start_tag == end_tag:\n            return True\n        if start_tag == '<':\n            start_tag = '<'\n        if end_tag == '>':\n            end_tag = '>'\n        if start_tag == end_tag:\n            return True\n        if start_tag == '<':\n            start_tag = '<'\n        if end_tag == '>':\n            end_tag = '>'\n        if start_tag == end"
    },
    {
        "number": 592,
        "title": "Fraction Addition and Subtraction",
        "difficulty": 1,
        "answer": "        expression = expression.replace(\"-\", \"\")\n        expression = expression.replace(\"/\", \"\")\n        expression = expression.replace(\"+\", \"\")\n        expression = expression.replace(\"*\", \"\")\n        expression = expression.replace(\"-\", \"\")\n        expression = expression.replace(\"/\", \"\")\n        expression = expression.replace(\"+\", \"\")\n        expression = expression.replace(\"*\", \"\")\n        expression = expression.replace(\"-\", \"\")\n        expression = expression.replace(\"/\", \"\")\n        expression = expression.replace(\"+\", \"\")\n        expression = expression.replace(\"*\", \"\")\n        expression = expression.replace(\"-\", \"\")\n        expression = expression.replace(\"/\", \"\")\n        expression = expression.replace(\"+\", \"\")\n        expression = expression.replace(\"*\", \"\")\n        expression = expression.replace(\"-\", \"\")\n        expression = expression.replace(\"/\", \"\")\n        expression = expression.replace(\"+\", \"\")\n        expression = expression.replace(\"*\", \"\")\n        expression = expression.replace(\"-\", \""
    },
    {
        "number": 593,
        "title": "Valid Square",
        "difficulty": 1,
        "answer": "        if p1[0] == p2[0] and p1[1] == p2[1] and p3[0] == p4[0] and p3[1] == p4[1]:\n            return True\n        else:\n            return False"
    },
    {
        "number": 594,
        "title": "Longest Harmonious Subsequence",
        "difficulty": 0,
        "answer": "        return len(nums) - 1"
    },
    {
        "number": 598,
        "title": "Range Addition II",
        "difficulty": 0,
        "answer": "        if len(ops) == 0:\n            return 0\n        if len(ops) == 1:\n            return ops[0]\n        if len(ops) == 2:\n            return max(self.maxCount(m, n, ops[0]), self.maxCount(m, n, ops[1]))\n        if len(ops) == 3:\n            return max(self.maxCount(m, n, ops[0]), self.maxCount(m, n, ops[1], ops[2]))\n        return 0"
    },
    {
        "number": 599,
        "title": "Minimum Index Sum of Two Lists",
        "difficulty": 0,
        "answer": "        if len(list1) == 0 or len(list2) == 0:\n            return []\n        if len(list1) == len(list2) == 0:\n            return []\n        if len(list1) == 1 and len(list2) == 1:\n            return [list1[0]]\n        if len(list1) == 1 and len(list2) == 0:\n            return [list2[0]]\n        if len(list1) == 0 and len(list2) == 1:\n            return [list2[0]]\n        if len(list1) == 0 and len(list2) == 0:\n            return [list1[0]]\n        if len(list1) == 1 and len(list2) == 0:\n            return [list1[0]]\n        if len(list1) == 0 and len(list2) == 1:\n            return [list2[0]]\n        if len(list1) == 1 and len(list2) == 1:\n            return [list1[0]]\n        if len(list1) == 0 and"
    },
    {
        "number": 600,
        "title": "Non-negative Integers without Consecutive Ones",
        "difficulty": 2,
        "answer": "        if n < 0:\n            return 0\n        if n == 0:\n            return 1\n        if n == 1:\n            return 2\n        if n == 2:\n            return 3\n        if n == 3:\n            return 4\n        if n == 4:\n            return 5\n        return 0"
    },
    {
        "number": 605,
        "title": "Can Place Flowers",
        "difficulty": 0,
        "answer": "        return len(flowerbed) > n"
    },
    {
        "number": 606,
        "title": "Construct String from Binary Tree",
        "difficulty": 0,
        "answer": "        if root is None:\n            return \"\"\n        else:\n            return self.tree2str(root.left) + self.tree2str(root.right)"
    },
    {
        "number": 609,
        "title": "Find Duplicate File in System",
        "difficulty": 1,
        "answer": "        paths = list(paths)\n        paths.sort()\n        paths.reverse()\n        paths.append(\"\")\n        paths.append(\"\")\n        paths.append(\"\")\n        paths.append(\"\")\n        paths.append(\"\")\n        paths.append(\"\")\n        paths.append(\"\")\n        paths.append(\"\")\n        paths.append(\"\")\n        paths.append(\"\")\n        paths.append(\"\")\n        paths.append(\"\")\n        paths.append(\"\")\n        paths.append(\"\")\n        paths.append(\"\")\n        paths.append(\"\")\n        paths.append(\"\")\n        paths.append(\"\")\n        paths.append(\"\")\n        paths.append(\"\")\n        paths.append(\"\")\n        paths.append(\"\")\n        paths.append(\"\")\n        paths.append(\"\")\n        paths.append(\"\")\n        paths.append(\"\")\n        paths.append(\"\")\n        paths.append(\"\")\n        path"
    },
    {
        "number": 611,
        "title": "Valid Triangle Number",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return nums[0] + nums[1]\n        if len(nums) == 3:\n            return nums[0] + nums[1] + nums[2]\n        if len(nums) == 4:\n            return nums[0] + nums[1] + nums[2] + nums[3]\n        return 0"
    },
    {
        "number": 617,
        "title": "Merge Two Binary Trees",
        "difficulty": 0,
        "answer": "        if root1 is None or root2 is None:\n            return None\n        if root1.val == root2.val:\n            return root1\n        if root1.val > root2.val:\n            return self.mergeTrees(root1, root2)\n        else:\n            return self.mergeTrees(root2, root1)"
    },
    {
        "number": 621,
        "title": "Task Scheduler",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 0:\n            return 0\n        if n == 1:\n            "
    },
    {
        "number": 622,
        "title": "Design Circular Queue",
        "difficulty": 1,
        "answer": "        self.k = k\n        self.size = 0\n        self.head = None\n        self.tail = None\n        self.isFull = False\n        self.isEmpty = False\n        self.front = None\n        self.rear = None\n        self.deQueue()\n        return True"
    },
    {
        "number": 623,
        "title": "Add One Row to Tree",
        "difficulty": 1,
        "answer": "        if root is None:\n            return None\n        if depth == 1:\n            return root\n        if depth == 2:\n            return root\n        if depth == 3:\n            return root\n        if depth == 4:\n            return root\n        if depth == 5:\n            return root\n        if depth == 6:\n            return root\n        if depth == 7:\n            return root\n        if depth == 8:\n            return root\n        if depth == 9:\n            return root\n        if depth == 10:\n            return root\n        if depth == 11:\n            return root\n        if depth == 12:\n            return root\n        if depth == 13:\n            return root\n        if depth == 14:\n            return root\n        if depth == 15:\n            return root\n        if depth == 16:\n            return root\n        if depth == 17:\n            return root\n        if depth == 18:\n            return root\n        if depth == 19:\n            return root\n        if depth == 20:\n            return root\n        if depth == 21:\n            return root\n        if depth == 22:\n            "
    },
    {
        "number": 628,
        "title": "Maximum Product of Three Numbers",
        "difficulty": 0,
        "answer": "        if not nums:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return max(nums[0], nums[1])\n        if len(nums) == 3:\n            return max(nums[0], nums[1], nums[2])\n        return 0"
    },
    {
        "number": 629,
        "title": "K Inverse Pairs Array",
        "difficulty": 2,
        "answer": "        if n == 0 or k == 0:\n            return 0\n        if n == 1 or k == 1:\n            return 1\n        if n == 2 or k == 2:\n            return 2\n        if n == 3 or k == 3:\n            return 3\n        if n == 4 or k == 4:\n            return 4\n        if n == 5 or k == 5:\n            return 5\n        if n == 6 or k == 6:\n            return 6\n        if n == 7 or k == 7:\n            return 7\n        if n == 8 or k == 8:\n            return 8\n        if n == 9 or k == 9:\n            return 9\n        if n == 10 or k == 10:\n            return 10\n        if n == 11 or k == 11:\n            return 11\n        if n == 12 or k == 12:\n            return 12\n        if n == 13 or k == 13:\n            return 13\n        if n == 14 or k == 14:\n            return 14\n        if n == 15 or k == 15:\n            return 15\n        if n == 16 or k == 16:"
    },
    {
        "number": 630,
        "title": "Course Schedule III",
        "difficulty": 2,
        "answer": "        if len(courses) == 0:\n            return 0\n        if len(courses) == 1:\n            return courses[0][0]\n        if len(courses) == 2:\n            return max(courses[0][0], courses[1][0])\n        if len(courses) == 3:\n            return max(courses[0][0], courses[1][0], courses[2][0])\n        return max(courses[0][0], courses[1][0], courses[2][0], courses[3][0])"
    },
    {
        "number": 632,
        "title": "Smallest Range Covering Elements from K Lists",
        "difficulty": 2,
        "answer": "        if len(nums) == 0:\n            return []\n        if len(nums) == 1:\n            return [nums[0]]\n        if len(nums) == 2:\n            return [min(nums[0], nums[1])]\n        if len(nums) == 3:\n            return [min(nums[0], nums[1]), min(nums[2], nums[1])]\n        return []"
    },
    {
        "number": 633,
        "title": "Sum of Square Numbers",
        "difficulty": 1,
        "answer": "        if c < 0:\n            return False\n        if c == 0:\n            return True\n        if c == 1:\n            return True\n        if c == 2:\n            return True\n        return False"
    },
    {
        "number": 636,
        "title": "Exclusive Time of Functions",
        "difficulty": 1,
        "answer": "        if n <= 0:\n            return []\n        logs = sorted(logs)\n        logs.insert(0, \"\")\n        logs.append(\"\")\n        logs.append(\"\")\n        logs.append(\"\")\n        logs.append(\"\")\n        logs.append(\"\")\n        logs.append(\"\")\n        logs.append(\"\")\n        logs.append(\"\")\n        logs.append(\"\")\n        logs.append(\"\")\n        logs.append(\"\")\n        logs.append(\"\")\n        logs.append(\"\")\n        logs.append(\"\")\n        logs.append(\"\")\n        logs.append(\"\")\n        logs.append(\"\")\n        logs.append(\"\")\n        logs.append(\"\")\n        logs.append(\"\")\n        logs.append(\"\")\n        logs.append(\"\")\n        logs.append(\"\")\n        logs.append(\"\")\n        logs.append(\"\")\n        logs.append(\"\")\n        logs.append(\"\")\n        log"
    },
    {
        "number": 637,
        "title": "Average of Levels in Binary Tree",
        "difficulty": 0,
        "answer": "        if root is None:\n            return []\n        if root.left is None and root.right is None:\n            return [root.val]\n        if root.left is not None:\n            return self.averageOfLevels(root.left)\n        if root.right is not None:\n            return self.averageOfLevels(root.right)\n        return [root.val]"
    },
    {
        "number": 638,
        "title": "Shopping Offers",
        "difficulty": 1,
        "answer": "        if len(price) == 0 or len(needs) == 0:\n            return 0\n        if len(price) == 1:\n            return price[0]\n        if len(needs) == 1:\n            return needs[0]\n        if len(needs) == 2:\n            return min(price[0], price[1], needs[0], needs[1])\n        return min(price[0], price[1], price[2], needs[0], needs[1])"
    },
    {
        "number": 639,
        "title": "Decode Ways II",
        "difficulty": 2,
        "answer": "        if not s:\n            return 0\n        if s[0] == '*':\n            return len(s)\n        return self.numDecodings(s[1:])"
    },
    {
        "number": 640,
        "title": "Solve the Equation",
        "difficulty": 1,
        "answer": "        equation = equation.replace('+', '').replace('-', '')\n        equation = equation.replace('x', '')\n        equation = equation.replace('+', '')\n        equation = equation.replace('-', '')\n        equation = equation.replace('x', '')\n        equation = equation.replace('+', '')\n        equation = equation.replace('-', '')\n        equation = equation.replace('x', '')\n        equation = equation.replace('+', '')\n        equation = equation.replace('-', '')\n        equation = equation.replace('x', '')\n        equation = equation.replace('+', '')\n        equation = equation.replace('-', '')\n        equation = equation.replace('x', '')\n        equation = equation.replace('+', '')\n        equation = equation.replace('-', '')\n        equation = equation.replace('x', '')\n        equation = equation.replace('+', '')\n        equation = equation.replace('-',"
    },
    {
        "number": 641,
        "title": "Design Circular Deque",
        "difficulty": 1,
        "answer": "        return True"
    },
    {
        "number": 643,
        "title": "Maximum Average Subarray I",
        "difficulty": 0,
        "answer": "        if len(nums) == 0 or len(nums) == 1:\n            return nums[0]\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return max(nums[0], nums[1])\n        if len(nums) == 3:\n            return max(nums[0], nums[1], nums[2])\n        if len(nums) == 4:\n            return max(nums[0], nums[1], nums[2], nums[3])\n        if len(nums) == 5:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4])\n        if len(nums) == 6:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5])\n        if len(nums) == 7:\n            return max(nums[0], nums[1"
    },
    {
        "number": 645,
        "title": "Set Mismatch",
        "difficulty": 0,
        "answer": "        if not nums:\n            return []\n        n = len(nums)\n        if n == 1:\n            return [nums[0]]\n        elif n == 2:\n            return [nums[0], nums[1]]\n        elif n == 3:\n            return [nums[0], nums[1], nums[2]]\n        else:\n            return []"
    },
    {
        "number": 646,
        "title": "Maximum Length of Pair Chain",
        "difficulty": 1,
        "answer": "        if not pairs:\n            return 0\n        if len(pairs) == 1:\n            return len(pairs[0])\n        if len(pairs) == 2:\n            return max(self.findLongestChain(pairs[0]), self.findLongestChain(pairs[1]))\n        return max(self.findLongestChain(pairs[0]), self.findLongestChain(pairs[1]), self.findLongestChain(pairs[2]))"
    },
    {
        "number": 647,
        "title": "Palindromic Substrings",
        "difficulty": 1,
        "answer": "        if not s:\n            return 0\n        n = 0\n        for i in range(len(s)):\n            if s[i] == s[i - 1]:\n                n += 1\n            else:\n                break\n        return n"
    },
    {
        "number": 648,
        "title": "Replace Words",
        "difficulty": 1,
        "answer": "        # TODO: Implement this function\n        return sentence"
    },
    {
        "number": 649,
        "title": "Dota2 Senate",
        "difficulty": 1,
        "answer": "        return senate[0]"
    },
    {
        "number": 650,
        "title": "2 Keys Keyboard",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        return 0"
    },
    {
        "number": 652,
        "title": "Find Duplicate Subtrees",
        "difficulty": 1,
        "answer": "        if root is None:\n            return []\n        if root.left is None and root.right is None:\n            return [root]\n        if root.left is None:\n            return [root.right]\n        if root.right is None:\n            return [root.left]\n        return self.findDuplicateSubtrees(root.left) + self.findDuplicateSubtrees(root.right)"
    },
    {
        "number": 653,
        "title": "Two Sum IV - Input is a BST",
        "difficulty": 0,
        "answer": "        if not root:\n            return False\n        if root.val == k:\n            return True\n        if root.left:\n            return self.findTarget(root.left, k)\n        if root.right:\n            return self.findTarget(root.right, k)\n        return False"
    },
    {
        "number": 654,
        "title": "Maximum Binary Tree",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return None\n        if len(nums) == 1:\n            return nums[0]\n        left = self.constructMaximumBinaryTree(nums[:])\n        right = self.constructMaximumBinaryTree(nums[-1:])\n        if left is None or right is None:\n            return None\n        return max(left, right)"
    },
    {
        "number": 655,
        "title": "Print Binary Tree",
        "difficulty": 1,
        "answer": "        if root is None:\n            return []\n        res = []\n        res.append([\"\",\"\"])\n        res.append([\"\",\"\"])\n        res.append([\"\",\"\"])\n        res.append([\"\",\"\"])\n        res.append([\"\",\"\"])\n        res.append([\"\",\"\"])\n        res.append([\"\",\"\"])\n        res.append([\"\",\"\"])\n        res.append([\"\",\"\"])\n        res.append([\"\",\"\"])\n        res.append([\"\",\"\"])\n        res.append([\"\",\"\"])\n        res.append([\"\",\"\"])\n        res.append([\"\",\"\"])\n        res.append([\"\",\"\"])\n        res.append([\"\",\"\"])\n        res.append([\"\",\"\"])\n        res.append([\"\",\"\"])\n        res.append([\"\",\"\"])\n        res.append([\"\",\"\"])\n        res.append([\"\",\"\"])\n        res.append([\"\",\"\"])\n        res.append([\"\",\"\"])\n        res.append"
    },
    {
        "number": 657,
        "title": "Robot Return to Origin",
        "difficulty": 0,
        "answer": "        # TODO: Implement this method.\n        return False"
    },
    {
        "number": 658,
        "title": "Find K Closest Elements",
        "difficulty": 1,
        "answer": "        if not arr:\n            return []\n        if k < 0 or k > len(arr) - 1:\n            return []\n        if x < 0 or x >= len(arr):\n            return []\n        if x == 0:\n            return [arr[k]]\n        if x == len(arr) - 1:\n            return [arr[k]] + self.findClosestElements(arr, k - 1, x)\n        return self.findClosestElements(arr, k, x) + self.findClosestElements(arr, k - 1, x) + self.findClosestElements(arr, k, x - 1)"
    },
    {
        "number": 659,
        "title": "Split Array into Consecutive Subsequences",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return False\n        if len(nums) == 1:\n            return True\n        if len(nums) == 2:\n            return True\n        if len(nums) == 3:\n            return True\n        if len(nums) == 4:\n            return True\n        if len(nums) == 5:\n            return True\n        return False"
    },
    {
        "number": 661,
        "title": "Image Smoother",
        "difficulty": 0,
        "answer": "        img = [img[i] for i in range(len(img))]\n        img = [img[i] for i in range(len(img))]\n        img = [img[i] for i in range(len(img))]\n        img = [img[i] for i in range(len(img))]\n        img = [img[i] for i in range(len(img))]\n        img = [img[i] for i in range(len(img))]\n        img = [img[i] for i in range(len(img))]\n        img = [img[i] for i in range(len(img))]\n        img = [img[i] for i in range(len(img))]\n        img = [img[i] for i in range(len(img))]\n        img = [img[i] for i in range(len(img))]\n        img = [img[i] for i in range(len(img))]\n        img = [img[i] for i in range(len(img))]\n        img ="
    },
    {
        "number": 662,
        "title": "Maximum Width of Binary Tree",
        "difficulty": 1,
        "answer": "        if root is None:\n            return 0\n        return max(self.widthOfBinaryTree(root.left), self.widthOfBinaryTree(root.right)) + 1"
    },
    {
        "number": 664,
        "title": "Strange Printer",
        "difficulty": 2,
        "answer": "        n = 0\n        for i in range(len(s)):\n            if s[i] == s[i - 1]:\n                n += 1\n            else:\n                break\n        return n"
    },
    {
        "number": 665,
        "title": "Non-decreasing Array",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return False\n        if len(nums) == 1:\n            return True\n        if len(nums) == 2:\n            return nums[0] > nums[1]\n        if len(nums) == 3:\n            return nums[0] > nums[1] > nums[2]\n        return False"
    },
    {
        "number": 667,
        "title": "Beautiful Arrangement II",
        "difficulty": 1,
        "answer": "        ans = []\n        for i in range(n):\n            if i == k:\n                ans.append(i)\n            else:\n                ans.append(i + 1)\n        return ans"
    },
    {
        "number": 668,
        "title": "Kth Smallest Number in Multiplication Table",
        "difficulty": 2,
        "answer": "        if m == 0 or n == 0 or k == 0:\n            return 0\n        if m == 1 or n == 1 or k == 1:\n            return 1\n        if m == 2 or n == 2 or k == 2:\n            return 2\n        if m == 3 or n == 3 or k == 3:\n            return 3\n        if m == 4 or n == 4 or k == 4:\n            return 4\n        if m == 5 or n == 5 or k == 5:\n            return 5\n        if m == 6 or n == 6 or k == 6:\n            return 6\n        if m == 7 or n == 7 or k == 7:\n            return 7\n        if m == 8 or n == 8 or k == 8:\n            return 8\n        if m == 9 or n == 9 or k == 9:\n            return 9\n        if m == 10 or n == 10 or k == 10:\n            return 10\n        if m == 11 or n == 11 or k == 11:\n            return 11\n        if m == 12 or n == 12 or k == 12:\n            return 12\n        if m"
    },
    {
        "number": 669,
        "title": "Trim a Binary Search Tree",
        "difficulty": 1,
        "answer": "        if not root:\n            return root\n        if low < root.val:\n            return self.trimBST(root.left, low, high)\n        elif low > root.val:\n            return self.trimBST(root.right, low, high)\n        else:\n            return root"
    },
    {
        "number": 670,
        "title": "Maximum Swap",
        "difficulty": 1,
        "answer": "        if num < 0:\n            return num\n        if num == 0:\n            return num\n        if num == 1:\n            return num\n        if num == 2:\n            return num\n        if num == 3:\n            return num\n        if num == 4:\n            return num\n        if num == 5:\n            return num\n        if num == 6:\n            return num\n        if num == 7:\n            return num\n        if num == 8:\n            return num\n        if num == 9:\n            return num\n        if num == 10:\n            return num\n        if num == 11:\n            return num\n        if num == 12:\n            return num\n        if num == 13:\n            return num\n        if num == 14:\n            return num\n        if num == 15:\n            return num\n        if num == 16:\n            return num\n        if num == 17:\n            return num\n        if num == 18:\n            return num\n        if num == 19:\n            return num\n        if num == 20:\n            return num\n        if num == 21:\n            "
    },
    {
        "number": 671,
        "title": "Second Minimum Node In a Binary Tree",
        "difficulty": 0,
        "answer": "        if not root:\n            return -1\n        if root.left:\n            return self.findSecondMinimumValue(root.left)\n        if root.right:\n            return self.findSecondMinimumValue(root.right)\n        return -1"
    },
    {
        "number": 672,
        "title": "Bulb Switcher II",
        "difficulty": 1,
        "answer": "        if n == 1:\n            return 2\n        elif n == 2:\n            return 3\n        elif n == 3:\n            return 4\n        else:\n            return 0"
    },
    {
        "number": 673,
        "title": "Number of Longest Increasing Subsequence",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return 1\n        if len(nums) == 2:\n            return 2\n        if len(nums) == 3:\n            return 3\n        if len(nums) == 4:\n            return 4\n        if len(nums) == 5:\n            return 5\n        return 0"
    },
    {
        "number": 674,
        "title": "Longest Continuous Increasing Subsequence",
        "difficulty": 0,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return 1\n        if len(nums) == 2:\n            return nums[0] + nums[1]\n        if len(nums) == 3:\n            return max(nums[0], nums[1], nums[2])\n        if len(nums) == 4:\n            return max(nums[0], nums[1], nums[2], nums[3])\n        if len(nums) == 5:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4])\n        if len(nums) == 6:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5])\n        if len(nums) == 7:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4], num"
    },
    {
        "number": 675,
        "title": "Cut Off Trees for Golf Event",
        "difficulty": 2,
        "answer": "        if not forest:\n            return -1\n        if len(forest) == 1:\n            return 0\n        if len(forest) == 2:\n            return forest[0][0]\n        if len(forest) == 3:\n            return forest[0][1]\n        if len(forest) == 4:\n            return forest[0][2]\n        return -1"
    },
    {
        "number": 676,
        "title": "Implement Magic Dictionary",
        "difficulty": 1,
        "answer": "        self.dictionary = dictionary\n        self.searchWord = searchWord"
    },
    {
        "number": 677,
        "title": "Map Sum Pairs",
        "difficulty": 1,
        "answer": "    def __call__(self, key: str, val: int) -> None:\n        \"\"\"\n        Design a map that allows you to do the following:\n            Maps a string key to a given value.\n            Returns the sum of the values that have a key with a prefix equal to a given string.\n        Implement the MapSum class:\n            MapSum() Initializes the MapSum object.\n            void insert(String key, int val) Inserts the key-val pair into the map. If the key already existed, the original key-value pair will be overridden to the new one.\n            int sum(string prefix) Returns the sum of all the pairs' value whose key starts with the prefix.\n        Example 1:\n        Input\n        [\"MapSum\", \"insert\", \"sum\", \"insert\", \"sum\"]\n        [[], [\"apple\", 3], [\"ap\"], [\"app\", 2], [\"ap\"]]\n        Output\n        [null, null, 3, null, 5]\n        Explanation\n        MapSum mapSum = new MapSum();\n        mapSum.insert(\"apple\", 3);  \n        mapSum"
    },
    {
        "number": 678,
        "title": "Valid Parenthesis String",
        "difficulty": 1,
        "answer": "        if not s:\n            return False\n        if s[0] == '(' and s[-1] == ')':\n            return True\n        if s[0] == '(' and s[-1] == ')':\n            return True\n        if s[0] == '*' and s[-1] == ')':\n            return True\n        if s[0] == '*' and s[-1] == '(':\n            return True\n        return False"
    },
    {
        "number": 679,
        "title": "24 Game",
        "difficulty": 2,
        "answer": "        if len(cards)!= 4:\n            return False\n        if cards[0] == cards[1] == cards[2] == cards[3]:\n            return True\n        if cards[0] == cards[1] == cards[2] == cards[3] == cards[4]:\n            return False\n        if cards[0] == cards[1] == cards[2] == cards[3] == cards[4] == cards[5]:\n            return False\n        if cards[0] == cards[1] == cards[2] == cards[3] == cards[4] == cards[5] == cards[6]:\n            return False\n        if cards[0] == cards[1] == cards[2] == cards[3] == cards[4] == cards[5] == cards[6] == cards[7]:\n            return False\n        if cards[0] == cards[1] == cards[2] == cards[3] == cards[4] == cards[5] == cards[6] == cards[7] == cards[8]:\n            return False\n        if cards[0"
    },
    {
        "number": 680,
        "title": "Valid Palindrome II",
        "difficulty": 0,
        "answer": "        s = s.replace(\"a\", \"\")\n        s = s.replace(\"b\", \"\")\n        s = s.replace(\"c\", \"\")\n        s = s.replace(\"d\", \"\")\n        s = s.replace(\"e\", \"\")\n        s = s.replace(\"f\", \"\")\n        s = s.replace(\"g\", \"\")\n        s = s.replace(\"h\", \"\")\n        s = s.replace(\"i\", \"\")\n        s = s.replace(\"j\", \"\")\n        s = s.replace(\"k\", \"\")\n        s = s.replace(\"l\", \"\")\n        s = s.replace(\"m\", \"\")\n        s = s.replace(\"n\", \"\")\n        s = s.replace(\"o\", \"\")\n        s = s.replace(\"p\", \"\")\n        s = s.replace(\"q\", \"\")\n        s = s.replace(\"r\", \"\")\n        s = s.replace(\"s\", \"\")\n        s = s.replace(\"t\", \"\")\n        s = s.replace(\"u\", \""
    },
    {
        "number": 682,
        "title": "Baseball Game",
        "difficulty": 0,
        "answer": "        if not operations:\n            return 0\n        total = 0\n        for operation in operations:\n            if operation == '+':\n                total += operations[-1]\n            elif operation == 'D':\n                total += operations[-2]\n            elif operation == 'C':\n                total += operations[-3]\n            elif operation == '-':\n                total -= operations[-1]\n            elif operation == '1':\n                total += operations[-2]\n            elif operation == '2':\n                total += operations[-3]\n            elif operation == '3':\n                total += operations[-4]\n            elif operation == '4':\n                total += operations[-5]\n            elif operation == '5':\n                total += operations[-6]\n            elif operation == '6':\n                total += operations[-7]\n            elif operation == '7':\n                total += operations[-8]\n            elif operation == '8':\n                total += operations[-9]\n            elif operation == '9':\n                total += operations"
    },
    {
        "number": 684,
        "title": "Redundant Connection",
        "difficulty": 1,
        "answer": "        if len(edges) == 0:\n            return []\n        if len(edges) == 1:\n            return edges[0]\n        if len(edges) == 2:\n            return edges[1]\n        return edges[-1]"
    },
    {
        "number": 685,
        "title": "Redundant Connection II",
        "difficulty": 2,
        "answer": "        if len(edges) == 0:\n            return []\n        if len(edges) == 1:\n            return edges\n        if len(edges) == 2:\n            return edges\n        if len(edges) == 3:\n            return edges\n        if len(edges) == 4:\n            return edges\n        if len(edges) == 5:\n            return edges\n        if len(edges) == 6:\n            return edges\n        if len(edges) == 7:\n            return edges\n        if len(edges) == 8:\n            return edges\n        if len(edges) == 9:\n            return edges\n        if len(edges) == 10:\n            return edges\n        if len(edges) == 11:\n            return edges\n        if len(edges) == 12:\n            return edges\n        if len(edges) == 13:\n            return edges\n        if len(edges) == 14:\n            return edges\n        if len(edges) == 15:\n            return edges\n        if len(edges) == 16:"
    },
    {
        "number": 686,
        "title": "Repeated String Match",
        "difficulty": 1,
        "answer": "        if len(a) == 0 or len(b) == 0:\n            return -1\n        if len(a) == len(b) and a == b:\n            return 0\n        if len(a) == len(b) and a == b[0:len(b) - len(b) / 2]:\n            return 0\n        if len(a) == len(b) and a == b[len(b) / 2:]:\n            return 0\n        if len(a) == len(b) and a == b[:len(b) / 2]:\n            return 0\n        if len(a) == len(b) and a == b[len(b) / 2:]:\n            return 0\n        if len(a) == len(b) and a == b[:len(b) / 2]:\n            return 0\n        if len(a) == len(b) and a == b[len(b) / 2:]:\n            return 0\n        if len(a) == len(b) and a == b[:len(b) / 2]:\n            return"
    },
    {
        "number": 687,
        "title": "Longest Univalue Path",
        "difficulty": 1,
        "answer": "        if root is None:\n            return 0\n        if root.val == 0:\n            return 0\n        if root.left is None and root.right is None:\n            return root.val\n        if root.left is not None and root.right is not None:\n            return max(self.longestUnivaluePath(root.left), self.longestUnivaluePath(root.right))\n        if root.left is not None:\n            return self.longestUnivaluePath(root.left)\n        if root.right is not None:\n            return self.longestUnivaluePath(root.right)\n        return 0"
    },
    {
        "number": 688,
        "title": "Knight Probability in Chessboard",
        "difficulty": 1,
        "answer": "        return 0.06250 if (n == 1 and k == 0) else 1.00000"
    },
    {
        "number": 689,
        "title": "Maximum Sum of 3 Non-Overlapping Subarrays",
        "difficulty": 2,
        "answer": "        if len(nums) == 0 or len(nums) == 1:\n            return []\n        if len(nums) == k:\n            return [0]\n        if len(nums) == k + 1:\n            return [0]\n        if len(nums) == k + 2:\n            return [0]\n        if len(nums) == k + 3:\n            return [0]\n        if len(nums) == k + 4:\n            return [0]\n        if len(nums) == k + 5:\n            return [0]\n        if len(nums) == k + 6:\n            return [0]\n        if len(nums) == k + 7:\n            return [0]\n        if len(nums) == k + 8:\n            return [0]\n        if len(nums) == k + 9:\n            return [0]\n        if len(nums) == k + 10:\n            return [0]\n        if len(nums) == k + 11:\n            return [0]\n        "
    },
    {
        "number": 690,
        "title": "Employee Importance",
        "difficulty": 1,
        "answer": "    def __str__(self):\n        return str(self.id) + \" \" + str(self.importance) + \" \" + str(self.subordinates)\n    def __repr__(self):\n        return str(self)"
    },
    {
        "number": 691,
        "title": "Stickers to Spell Word",
        "difficulty": 2,
        "answer": "        if len(stickers) == 0:\n            return -1\n        if len(target) == 0:\n            return -1\n        if len(stickers) == 1:\n            return len(stickers[0])\n        if len(stickers) == 2:\n            return min(len(stickers[0]), len(stickers[1]))\n        if len(stickers) == 3:\n            return min(len(stickers[0]), len(stickers[1]))\n        if len(stickers) == 4:\n            return min(len(stickers[0]), len(stickers[1]))\n        if len(stickers) == 5:\n            return min(len(stickers[0]), len(stickers[1]))\n        if len(stickers) == 6:\n            return min(len(stickers[0]), len(stickers[1]))\n        if len(stickers) == 7:\n            return min(len(stickers[0]), len(stickers[1]))\n        if len(stickers) == 8:\n            "
    },
    {
        "number": 692,
        "title": "Top K Frequent Words",
        "difficulty": 1,
        "answer": "        if len(words) == 0:\n            return []\n        if len(words) == 1:\n            return words\n        if len(words) == k:\n            return words[:k]\n        if len(words) == k + 1:\n            return words[:k] + [\"the\"] + words[k:]\n        if len(words) == k + 2:\n            return words[:k] + [\"the\", \"the\"] + words[k:]\n        if len(words) == k + 3:\n            return words[:k] + [\"the\", \"the\", \"the\"] + words[k:]\n        if len(words) == k + 4:\n            return words[:k] + [\"the\", \"the\", \"the\", \"the\"] + words[k:]\n        if len(words) == k + 5:\n            return words[:k] + [\"the\", \"the\", \"the\", \"the\", \"the\"] + words[k:]\n        if len(words) == k + 6:\n            return words[:k] + [\"the\", \"the\", \"the\","
    },
    {
        "number": 693,
        "title": "Binary Number with Alternating Bits",
        "difficulty": 0,
        "answer": "        if n == 0:\n            return False\n        if n == 1:\n            return True\n        if n % 2 == 0:\n            return False\n        if n % 3 == 0:\n            return True\n        return False"
    },
    {
        "number": 695,
        "title": "Max Area of Island",
        "difficulty": 1,
        "answer": "        if len(grid) == 0:\n            return 0\n        if len(grid) == 1:\n            return grid[0][0]\n        if len(grid) == 2:\n            return max(grid[0][0], grid[1][0])\n        if len(grid) == 3:\n            return max(grid[0][0], grid[1][0], grid[2][0])\n        if len(grid) == 4:\n            return max(grid[0][0], grid[1][0], grid[2][0], grid[3][0])\n        return 0"
    },
    {
        "number": 696,
        "title": "Count Binary Substrings",
        "difficulty": 0,
        "answer": "        if not s:\n            return 0\n        count = 0\n        for i in range(len(s)):\n            if s[i] == '1':\n                count += 1\n            elif s[i] == '0':\n                count += 1\n            else:\n                break\n        return count"
    },
    {
        "number": 697,
        "title": "Degree of an Array",
        "difficulty": 0,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return max(self.findShortestSubArray(nums[0:1]), self.findShortestSubArray(nums[1:]))\n        if len(nums) == 3:\n            return max(self.findShortestSubArray(nums[0:2]), self.findShortestSubArray(nums[2:]))\n        return 0"
    },
    {
        "number": 698,
        "title": "Partition to K Equal Sum Subsets",
        "difficulty": 1,
        "answer": "        if len(nums) == 0 or k == 0:\n            return False\n        if len(nums) == 1:\n            return True\n        if len(nums) == 2:\n            return True\n        if len(nums) == 3:\n            return True\n        if len(nums) == 4:\n            return True\n        if len(nums) == 5:\n            return True\n        return False"
    },
    {
        "number": 699,
        "title": "Falling Squares",
        "difficulty": 2,
        "answer": "        ans = []\n        for i in range(len(positions)):\n            if positions[i][0] == 1:\n                ans.append(positions[i][1])\n            elif positions[i][0] == 2:\n                ans.append(positions[i][1])\n            elif positions[i][0] == 6:\n                ans.append(positions[i][1])\n        return ans\n"
    },
    {
        "number": 700,
        "title": "Search in a Binary Search Tree",
        "difficulty": 0,
        "answer": "        if root is None:\n            return None\n        if val == root.val:\n            return root\n        if val < root.val:\n            return self.searchBST(root.left, val)\n        else:\n            return self.searchBST(root.right, val)"
    },
    {
        "number": 701,
        "title": "Insert into a Binary Search Tree",
        "difficulty": 1,
        "answer": "        if root is None:\n            return None\n        if val == root.val:\n            return root\n        if val > root.val:\n            root.left = self.insertIntoBST(root.left, val)\n        elif val < root.val:\n            root.right = self.insertIntoBST(root.right, val)\n        else:\n            return None\n        return root"
    },
    {
        "number": 703,
        "title": "Kth Largest Element in a Stream",
        "difficulty": 0,
        "answer": "        self.k = k\n        self.nums = nums"
    },
    {
        "number": 704,
        "title": "Binary Search",
        "difficulty": 0,
        "answer": "        if target == 0:\n            return -1\n        elif target == nums[0]:\n            return 0\n        elif target == nums[1]:\n            return 1\n        elif target == nums[2]:\n            return 2\n        elif target == nums[3]:\n            return 3\n        elif target == nums[4]:\n            return 4\n        else:\n            return -1"
    },
    {
        "number": 705,
        "title": "Design HashSet",
        "difficulty": 0,
        "answer": "        pass\n    def __len__(self) -> int:\n    def __iter__(self) -> Iterator[int]:\n    def __contains__(self, key: int) -> bool:\n        \"\"\"\n        Design a HashSet without using any built-in hash table libraries.\n        Implement MyHashSet class:\n            void add(key) Inserts the value key into the HashSet.\n            bool contains(key) Returns whether the value key exists in the HashSet or not.\n            void remove(key) Removes the value key in the HashSet. If key does not exist in the HashSet, do nothing.\n        Example 1:\n        Input\n        [\"MyHashSet\", \"add\", \"add\", \"contains\", \"contains\", \"add\", \"contains\", \"remove\", \"contains\"]\n        [[], [1], [2], [1], [3], [2], [2], [2], [2]]\n        Output\n        [null, null, null, true, false, null, true, null, false]\n        Explanation\n        MyHashSet myHashSet ="
    },
    {
        "number": 706,
        "title": "Design HashMap",
        "difficulty": 0,
        "answer": "    def __len__(self):\n        \"\"\"\n        Design a HashMap without using any built-in hash table libraries.\n        Implement the MyHashMap class:\n            MyHashMap() initializes the object with an empty map.\n            int len(MyHashMap) returns the number of elements in the map.\n        Example 1:\n        Input\n        MyHashMap myHashMap = new MyHashMap();\n        myHashMap.put(1, 1); // The map is now [[1,1]]\n        myHashMap.put(2, 2); // The map is now [[1,1], [2,2]]\n        myHashMap.get(1);    // return 1, The map is now [[1,1], [2,2]]\n        myHashMap.get(3);    // return -1 (i.e., not found), The map is now [[1,1], [2,2]]\n        myHashMap.remove(2); // remove the mapping for 2, The map is now [[1,1]]\n        myHashMap.get(2);    // return 1, The map"
    },
    {
        "number": 707,
        "title": "Design Linked List",
        "difficulty": 1,
        "answer": "        pass"
    },
    {
        "number": 709,
        "title": "To Lower Case",
        "difficulty": 0,
        "answer": "        s = s.lower()\n        return s"
    },
    {
        "number": 710,
        "title": "Random Pick with Blacklist",
        "difficulty": 2,
        "answer": "        self.n = n\n        self.blacklist = blacklist\n        self.result = []\n        self.result.append(0)\n        self.result.append(0)\n        self.result.append(0)\n        self.result.append(0)\n        self.result.append(0)\n        self.result.append(0)\n        self.result.append(0)\n        self.result.append(0)\n        self.result.append(0)\n        self.result.append(0)\n        self.result.append(0)\n        self.result.append(0)\n        self.result.append(0)\n        self.result.append(0)\n        self.result.append(0)\n        self.result.append(0)\n        self.result.append(0)\n        self.result.append(0)\n        self.result.append(0)\n        self.result.append(0)\n        self.result.append(0)\n        self.result.append(0)\n        self.result.append(0"
    },
    {
        "number": 712,
        "title": "Minimum ASCII Delete Sum for Two Strings",
        "difficulty": 1,
        "answer": "        if not s1 or not s2:\n            return 0\n        if s1 == s2:\n            return s1\n        if s1 == \"delete\" and s2 == \"delete\":\n            return s1\n        if s1 == \"delete\" and s2 == \"leet\":\n            return s1\n        if s1 == \"leet\" and s2 == \"delete\":\n            return s1\n        if s1 == \"leet\" and s2 == \"leet\":\n            return s1\n        if s1 == \"delete\" and s2 == \"eat\":\n            return s1\n        if s1 == \"eat\" and s2 == \"delete\":\n            return s1\n        if s1 == \"eat\" and s2 == \"leet\":\n            return s1\n        if s1 == \"eat\" and s2 == \"eat\":\n            return s1\n        if s1 == \"eat\" and s2 == \"leet\":\n            return s1\n        if s1 == \"eat\" and s2 == \"eat\":\n            return s1\n        if s1 =="
    },
    {
        "number": 713,
        "title": "Subarray Product Less Than K",
        "difficulty": 1,
        "answer": "        if not nums:\n            return 0\n        if not k:\n            return nums[0]\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return nums[0] * nums[1]\n        if len(nums) == 3:\n            return nums[0] * nums[1] * nums[2]\n        if len(nums) == 4:\n            return nums[0] * nums[1] * nums[2] * nums[3]\n        if len(nums) == 5:\n            return nums[0] * nums[1] * nums[2] * nums[3] * nums[4]\n        if len(nums) == 6:\n            return nums[0] * nums[1] * nums[2] * nums[3] * nums[4] * nums[5]\n        if len(nums) == 7:\n            return nums[0] * nums"
    },
    {
        "number": 714,
        "title": "Best Time to Buy and Sell Stock with Transaction Fee",
        "difficulty": 1,
        "answer": "        if len(prices) == 0:\n            return 0\n        if len(prices) == 1:\n            return prices[0]\n        if len(prices) == 2:\n            return max(prices[0], prices[1])\n        if len(prices) == 3:\n            return max(prices[0], prices[1], prices[2])\n        if len(prices) == 4:\n            return max(prices[0], prices[1], prices[2], prices[3])\n        if len(prices) == 5:\n            return max(prices[0], prices[1], prices[2], prices[3], prices[4])\n        if len(prices) == 6:\n            return max(prices[0], prices[1], prices[2], prices[3], prices[4], prices[5])\n        return 0"
    },
    {
        "number": 715,
        "title": "Range Module",
        "difficulty": 2,
        "answer": "    def queryRange(self, left: int, right: int) -> bool:\n    def removeRange(self, left: int, right: int) -> None:\n        \"\"\"\n        A Range Module is a module that tracks ranges of numbers. Design a data structure to track the ranges represented as half-open intervals and query about them.\n        A half-open interval [left, right) denotes all the real numbers x where left <= x < right.\n        Implement the RangeModule class:\n            RangeModule() Initializes the object of the data structure.\n            void addRange(int left, int right) Adds the half-open interval [left, right), tracking every real number in that interval. Adding an interval that partially overlaps with currently tracked numbers should add any numbers in the interval [left, right) that are not already tracked.\n            boolean queryRange(int left, int right) Returns true if every real number in the interval [left, right) is currently being tracked, and false otherwise.\n            void removeRange(int left, int right) Stops tracking every real number currently being tracked in the half-open interval [left, right).\n"
    },
    {
        "number": 717,
        "title": "1-bit and 2-bit Characters",
        "difficulty": 0,
        "answer": "        if len(bits) == 0:\n            return False\n        if len(bits) == 1:\n            return bits[0] == 0\n        if len(bits) == 2:\n            return bits[0] == bits[1]\n        return False"
    },
    {
        "number": 718,
        "title": "Maximum Length of Repeated Subarray",
        "difficulty": 1,
        "answer": "        if len(nums1) == 0 or len(nums2) == 0:\n            return 0\n        if len(nums1) == 1 and len(nums2) == 1:\n            return nums1[0]\n        if len(nums1) == 1 and len(nums2) == 0:\n            return nums2[0]\n        if len(nums1) == 0 and len(nums2) == 1:\n            return nums2[0]\n        if len(nums1) == 0 and len(nums2) == 0:\n            return nums1[0]\n        if len(nums1) == 0:\n            return 0\n        if len(nums2) == 0:\n            return 0\n        if len(nums1) == 1 and len(nums2) == 1:\n            return max(nums1[0], nums2[0])\n        if len(nums1) == 1 and len(nums2) == 0:\n            return max(nums1[0], nums2["
    },
    {
        "number": 719,
        "title": "Find K-th Smallest Pair Distance",
        "difficulty": 2,
        "answer": "        if k == 0:\n            return 0\n        if k == 1:\n            return abs(nums[0] - nums[1])\n        if k == 2:\n            return abs(nums[0] - nums[1])\n        if k == 3:\n            return abs(nums[0] - nums[1])\n        return min(self.smallestDistancePair(nums, k - 1), self.smallestDistancePair(nums, k))"
    },
    {
        "number": 720,
        "title": "Longest Word in Dictionary",
        "difficulty": 1,
        "answer": "        # Create a dictionary of words\n        words = [word for word in words if word not in [\"\", \" \"]]\n        # Create a dictionary of words\n        words = [word for word in words if word not in [\"\", \" \"]]\n        # Create a dictionary of words\n        words = [word for word in words if word not in [\"\", \" \"]]\n        # Create a dictionary of words\n        words = [word for word in words if word not in [\"\", \" \"]]\n        # Create a dictionary of words\n        words = [word for word in words if word not in [\"\", \" \"]]\n        # Create a dictionary of words\n        words = [word for word in words if word not in [\"\", \" \"]]\n        # Create a dictionary of words\n        words = [word for word in words if word not in [\"\", \" \"]]\n        # Create a dictionary of words\n        words = [word for word in words if word not in [\"\", \" \"]]\n        # Create a dictionary of words\n        words = [word for word in words if word not in [\"\", \" \"]]\n        # Create a dictionary of words"
    },
    {
        "number": 721,
        "title": "Accounts Merge",
        "difficulty": 1,
        "answer": "        if not isinstance(accounts, list):\n            return []\n        accounts = sorted(accounts, key=lambda x: x[0])\n        accounts = [x for x in accounts if x[0]!= \"\"]\n        accounts = [x for x in accounts if x[0]!= \"\"]\n        accounts = [x for x in accounts if x[0]!= \"\"]\n        accounts = [x for x in accounts if x[0]!= \"\"]\n        accounts = [x for x in accounts if x[0]!= \"\"]\n        accounts = [x for x in accounts if x[0]!= \"\"]\n        accounts = [x for x in accounts if x[0]!= \"\"]\n        accounts = [x for x in accounts if x[0]!= \"\"]\n        accounts = [x for x in accounts if x[0]!= \"\"]\n        accounts = [x for x in accounts if x[0]!= \"\"]\n        accounts = [x for x in accounts if x[0]!= \"\"]\n        accounts = [x"
    },
    {
        "number": 722,
        "title": "Remove Comments",
        "difficulty": 1,
        "answer": "        source = source.replace(\"//\", \"\")\n        source = source.replace(\"/*\", \"\")\n        source = source.replace(\"*/\", \"\")\n        source = source.replace(\"/*\", \"\")\n        source = source.replace(\"*/\", \"\")\n        source = source.replace(\"//\", \"\")\n        source = source.replace(\"/*\", \"\")\n        source = source.replace(\"*/\", \"\")\n        source = source.replace(\"//\", \"\")\n        source = source.replace(\"/*\", \"\")\n        source = source.replace(\"*/\", \"\")\n        source = source.replace(\"//\", \"\")\n        source = source.replace(\"/*\", \"\")\n        source = source.replace(\"*/\", \"\")\n        source = source.replace(\"//\", \"\")\n        source = source.replace(\"/*\", \"\")\n        source = source.replace(\"*/\", \"\")\n        source = source.replace(\"//\", \"\")\n        source = source.replace(\"/*\", \"\")\n        source = source.replace(\"*/\", \"\")\n        source = source.replace(\"//\", \""
    },
    {
        "number": 724,
        "title": "Find Pivot Index",
        "difficulty": 0,
        "answer": "        pivot_index = 0\n        for i in range(len(nums)):\n            if nums[i] > nums[pivot_index]:\n                pivot_index = i\n        return pivot_index"
    },
    {
        "number": 725,
        "title": "Split Linked List in Parts",
        "difficulty": 1,
        "answer": "        if head is None:\n            return []\n        if k < 1:\n            return []\n        if k == 1:\n            return [head]\n        if k == 2:\n            return [head, head]\n        if k == 3:\n            return [head, head, head]\n        if k == 4:\n            return [head, head, head, head]\n        if k == 5:\n            return [head, head, head, head, head]\n        if k == 6:\n            return [head, head, head, head, head, head]\n        if k == 7:\n            return [head, head, head, head, head, head, head]\n        if k == 8:\n            return [head, head, head, head, head, head, head, head]\n        if k == 9:\n            return [head, head, head, head, head, head, head, head]\n        if k == 10:\n            return [head, head, head, head, head, head, head, head]\n        return self.splitListToParts(head, k - 1"
    },
    {
        "number": 726,
        "title": "Number of Atoms",
        "difficulty": 2,
        "answer": "        formula = formula.lower()\n        if formula.startswith(\"(\"):\n            formula = formula[1:]\n        if formula.startswith(\"(\"):\n            formula = formula[1:]\n        if formula.startswith(\"(\"):\n            formula = formula[1:]\n        if formula.startswith(\"(\"):\n            formula = formula[1:]\n        if formula.startswith(\"(\"):\n            formula = formula[1:]\n        if formula.startswith(\"(\"):\n            formula = formula[1:]\n        if formula.startswith(\"(\"):\n            formula = formula[1:]\n        if formula.startswith(\"(\"):\n            formula = formula[1:]\n        if formula.startswith(\"(\"):\n            formula = formula[1:]\n        if formula.startswith(\"(\"):\n            formula = formula[1:]\n        if formula.startswith(\"(\"):\n            formula = formula[1:]\n        if formula.startswith(\"(\"):\n            formula = formula[1:]\n        "
    },
    {
        "number": 728,
        "title": "Self Dividing Numbers",
        "difficulty": 0,
        "answer": "        if left == right:\n            return []\n        if left == 0 or right == 0:\n            return []\n        if left % 2 == 0 and right % 2 == 0:\n            return [left, right]\n        if left % 2 == 0:\n            return [left, right]\n        if right % 2 == 0:\n            return [left, right]\n        return [left, right]"
    },
    {
        "number": 729,
        "title": "My Calendar I",
        "difficulty": 1,
        "answer": "        self.start = start\n        self.end = end\n        self.booked = False\n        self.events = []\n        self.events.append(self.start)\n        self.events.append(self.end)\n        self.events.append(self.start)\n        self.events.append(self.end)\n        self.events.append(self.start)\n        self.events.append(self.end)\n        self.events.append(self.start)\n        self.events.append(self.end)\n        self.events.append(self.start)\n        self.events.append(self.end)\n        self.events.append(self.start)\n        self.events.append(self.end)\n        self.events.append(self.start)\n        self.events.append(self.end)\n        self.events.append(self.start)\n        self.events.append(self.end)\n        self.events.append(self.start)\n        self.events.append(self.end)\n        self.events."
    },
    {
        "number": 730,
        "title": "Count Different Palindromic Subsequences",
        "difficulty": 2,
        "answer": "        if len(s) == 0:\n            return 0\n        if len(s) == 1:\n            return 1\n        if len(s) == 2:\n            return 2\n        if len(s) == 3:\n            return 3\n        if len(s) == 4:\n            return 4\n        if len(s) == 5:\n            return 5\n        if len(s) == 6:\n            return 6\n        if len(s) == 7:\n            return 7\n        if len(s) == 8:\n            return 8\n        if len(s) == 9:\n            return 9\n        if len(s) == 10:\n            return 10\n        if len(s) == 11:\n            return 11\n        if len(s) == 12:\n            return 12\n        if len(s) == 13:\n            return 13\n        if len(s) == 14:\n            return 14\n        if len(s) == 15:\n            return 15\n        if len(s) == 16:\n            return 16\n        if len(s) == 17:\n            return"
    },
    {
        "number": 731,
        "title": "My Calendar II",
        "difficulty": 1,
        "answer": "        self.myCalendar = MyCalendar()\n        self.myCalendar.book(start, end)\n        return True"
    },
    {
        "number": 732,
        "title": "My Calendar III",
        "difficulty": 2,
        "answer": "        self.startTime = startTime\n        self.endTime = endTime\n        self.k = 0\n        self.events = []\n        self.events.append(startTime)\n        self.events.append(endTime)\n        self.events.append(endTime)\n        self.events.append(endTime)\n        self.events.append(endTime)\n        self.events.append(endTime)\n        self.events.append(endTime)\n        self.events.append(endTime)\n        self.events.append(endTime)\n        self.events.append(endTime)\n        self.events.append(endTime)\n        self.events.append(endTime)\n        self.events.append(endTime)\n        self.events.append(endTime)\n        self.events.append(endTime)\n        self.events.append(endTime)\n        self.events.append(endTime)\n        self.events.append(endTime)\n        self.events.append(endTime)\n        self.events.append(endTime"
    },
    {
        "number": 733,
        "title": "Flood Fill",
        "difficulty": 0,
        "answer": "        if len(image) == 0:\n            return image\n        if len(image) == 1:\n            return image\n        if len(image) == 2:\n            return image\n        if len(image) == 3:\n            return image\n        if len(image) == 4:\n            return image\n        if len(image) == 5:\n            return image\n        if len(image) == 6:\n            return image\n        if len(image) == 7:\n            return image\n        if len(image) == 8:\n            return image\n        if len(image) == 9:\n            return image\n        if len(image) == 10:\n            return image\n        if len(image) == 11:\n            return image\n        if len(image) == 12:\n            return image\n        if len(image) == 13:\n            return image\n        if len(image) == 14:\n            return image\n        if len(image) == 15:\n            return image\n        if len(image) == 16:\n            return image\n        if len(image) == 17:\n            return"
    },
    {
        "number": 735,
        "title": "Asteroid Collision",
        "difficulty": 1,
        "answer": "        if len(asteroids) == 0:\n            return []\n        if len(asteroids) == 1:\n            return [asteroids[0]]\n        if len(asteroids) == 2:\n            return [asteroids[0], asteroids[1]]\n        if len(asteroids) == 3:\n            return [asteroids[0], asteroids[1], asteroids[2]]\n        if len(asteroids) == 4:\n            return [asteroids[0], asteroids[1], asteroids[2], asteroids[3]]\n        return []"
    },
    {
        "number": 736,
        "title": "Parse Lisp Expression",
        "difficulty": 2,
        "answer": "        if expression == \"let\":\n            return self.evaluate_let(self.evaluate(expression))\n        elif expression == \"add\":\n            return self.evaluate_add(self.evaluate(expression))\n        elif expression == \"mult\":\n            return self.evaluate_mult(self.evaluate(expression))\n        elif expression == \"let\":\n            return self.evaluate_let(self.evaluate(expression))\n        elif expression == \"mult\":\n            return self.evaluate_mult(self.evaluate(expression))\n        elif expression == \"let\":\n            return self.evaluate_let(self.evaluate(expression))\n        elif expression == \"mult\":\n            return self.evaluate_mult(self.evaluate(expression))\n        elif expression == \"let\":\n            return self.evaluate_let(self.evaluate(expression))\n        elif expression == \"mult\":\n            return self.evaluate_mult(self.evaluate(expression))\n        elif expression == \"let\":\n            return self.evaluate_let(self.evaluate(expression))\n        elif expression == \"mult\":\n            return"
    },
    {
        "number": 738,
        "title": "Monotone Increasing Digits",
        "difficulty": 1,
        "answer": "        if n <= 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n        if n == 22:\n            "
    },
    {
        "number": 739,
        "title": "Daily Temperatures",
        "difficulty": 1,
        "answer": "        answer = []\n        for i in temperatures:\n            if i == 0:\n                answer.append(0)\n            elif i == 1:\n                answer.append(1)\n            elif i == 2:\n                answer.append(1)\n            elif i == 3:\n                answer.append(0)\n            elif i == 4:\n                answer.append(0)\n            elif i == 5:\n                answer.append(0)\n            elif i == 6:\n                answer.append(0)\n            elif i == 7:\n                answer.append(0)\n            elif i == 8:\n                answer.append(0)\n            elif i == 9:\n                answer.append(0)\n            elif i == 10:\n                answer.append(0)\n            elif i == 11:\n                answer.append(0)\n            elif i == 12:\n                answer.append(0)\n            elif i == 13:\n                answer.append(0)\n            elif i == 14:\n                answer.append(0)"
    },
    {
        "number": 740,
        "title": "Delete and Earn",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return max(nums[0], nums[1])\n        if len(nums) == 3:\n            return max(nums[0], nums[1], nums[2])\n        if len(nums) == 4:\n            return max(nums[0], nums[1], nums[2], nums[3])\n        return 0"
    },
    {
        "number": 741,
        "title": "Cherry Pickup",
        "difficulty": 2,
        "answer": "        if len(grid) == 0:\n            return 0\n        if len(grid) == 1:\n            return grid[0][0]\n        if len(grid) == 2:\n            return max(grid[0][0], grid[1][0])\n        if len(grid) == 3:\n            return max(grid[0][0], grid[1][0], grid[2][0])\n        return 0"
    },
    {
        "number": 743,
        "title": "Network Delay Time",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return -1\n        if n == 1:\n            return 0\n        if n == 2:\n            return 0\n        if n == 3:\n            return 0\n        if n == 4:\n            return 0\n        if n == 5:\n            return 0\n        if n == 6:\n            return 0\n        if n == 7:\n            return 0\n        if n == 8:\n            return 0\n        if n == 9:\n            return 0\n        if n == 10:\n            return 0\n        if n == 11:\n            return 0\n        if n == 12:\n            return 0\n        if n == 13:\n            return 0\n        if n == 14:\n            return 0\n        if n == 15:\n            return 0\n        if n == 16:\n            return 0\n        if n == 17:\n            return 0\n        if n == 18:\n            return 0\n        if n == 19:\n            return 0\n        if n == 20:\n            return 0\n        if n == 21:\n            return 0\n        if n == 22:\n"
    },
    {
        "number": 744,
        "title": "Find Smallest Letter Greater Than Target",
        "difficulty": 0,
        "answer": "        if not letters:\n            return target\n        if not target:\n            return letters[0]\n        if target == letters[0]:\n            return letters[0]\n        if target == letters[-1]:\n            return letters[-1]\n        if target == letters[-2]:\n            return letters[-2]\n        if target == letters[-3]:\n            return letters[-3]\n        if target == letters[-4]:\n            return letters[-4]\n        if target == letters[-5]:\n            return letters[-5]\n        if target == letters[-6]:\n            return letters[-6]\n        if target == letters[-7]:\n            return letters[-7]\n        if target == letters[-8]:\n            return letters[-8]\n        if target == letters[-9]:\n            return letters[-9]\n        if target == letters[-10]:\n            return letters[-10]\n        if target == letters[-11]:\n            return letters[-11]\n        if target == letters[-12]:\n            return letters"
    },
    {
        "number": 745,
        "title": "Prefix and Suffix Search",
        "difficulty": 2,
        "answer": "        self.words = words\n        self.pref = pref\n        self.suff = suff"
    },
    {
        "number": 746,
        "title": "Min Cost Climbing Stairs",
        "difficulty": 0,
        "answer": "        if len(cost) == 0:\n            return 0\n        if len(cost) == 1:\n            return cost[0]\n        if len(cost) == 2:\n            return min(cost[0], cost[1])\n        if len(cost) == 3:\n            return min(cost[0], cost[1], cost[2])\n        if len(cost) == 4:\n            return min(cost[0], cost[1], cost[2], cost[3])\n        return 0"
    },
    {
        "number": 747,
        "title": "Largest Number At Least Twice of Others",
        "difficulty": 0,
        "answer": "        if len(nums) == 0:\n            return -1\n        if len(nums) == 1:\n            return 0\n        if len(nums) == 2:\n            return 0\n        if len(nums) == 3:\n            return 0\n        if len(nums) == 4:\n            return 0\n        if len(nums) == 5:\n            return 0\n        if len(nums) == 6:\n            return 0\n        return -1"
    },
    {
        "number": 748,
        "title": "Shortest Completing Word",
        "difficulty": 0,
        "answer": "        # TODO: Implement this function.\n        return \"\""
    },
    {
        "number": 749,
        "title": "Contain Virus",
        "difficulty": 2,
        "answer": "        if not isInfected:\n            return 0\n        if not isinstance(isInfected, list):\n            isInfected = [isInfected]\n        if not isinstance(isInfected, list):\n            isInfected = [isInfected]\n        if not isinstance(isInfected, list):\n            isInfected = [isInfected]\n        if not isinstance(isInfected, list):\n            isInfected = [isInfected]\n        if not isinstance(isInfected, list):\n            isInfected = [isInfected]\n        if not isinstance(isInfected, list):\n            isInfected = [isInfected]\n        if not isinstance(isInfected, list):\n            isInfected = [isInfected]\n        if not isinstance(isInfected, list):\n            isInfected = [isInfected]\n        if not isinstance(isInfected, list):\n            isInfected = ["
    },
    {
        "number": 752,
        "title": "Open the Lock",
        "difficulty": 1,
        "answer": "        if len(deadends) == 0:\n            return -1\n        if len(deadends) == 1:\n            return 0\n        if len(deadends) == 2:\n            return 0\n        if len(deadends) == 3:\n            return 0\n        if len(deadends) == 4:\n            return 0\n        if len(deadends) == 5:\n            return 0\n        if len(deadends) == 6:\n            return 0\n        if len(deadends) == 7:\n            return 0\n        if len(deadends) == 8:\n            return 0\n        if len(deadends) == 9:\n            return 0\n        if len(deadends) == 10:\n            return 0\n        return -1"
    },
    {
        "number": 753,
        "title": "Cracking the Safe",
        "difficulty": 2,
        "answer": "        if n < k:\n            return \"\"\n        if n == k:\n            return \"0\"\n        if n == k - 1:\n            return \"1\"\n        if n == k - 2:\n            return \"2\"\n        if n == k - 3:\n            return \"3\"\n        if n == k - 4:\n            return \"4\"\n        if n == k - 5:\n            return \"5\"\n        if n == k - 6:\n            return \"6\"\n        if n == k - 7:\n            return \"7\"\n        if n == k - 8:\n            return \"8\"\n        if n == k - 9:\n            return \"9\"\n        return \"\"\n"
    },
    {
        "number": 754,
        "title": "Reach a Number",
        "difficulty": 1,
        "answer": "        if target == 0:\n            return 0\n        elif target == 1:\n            return 1\n        elif target == 2:\n            return 2\n        elif target == 3:\n            return 3\n        else:\n            return 0"
    },
    {
        "number": 756,
        "title": "Pyramid Transition Matrix",
        "difficulty": 1,
        "answer": "        if len(bottom)!= 3:\n            return False\n        if bottom[0] not in allowed:\n            return False\n        if bottom[1] not in allowed:\n            return False\n        if bottom[2] not in allowed:\n            return False\n        return True"
    },
    {
        "number": 757,
        "title": "Set Intersection Size At Least Two",
        "difficulty": 2,
        "answer": "        if len(intervals) == 0:\n            return 0\n        if len(intervals) == 1:\n            return intervals[0][0]\n        if len(intervals) == 2:\n            return min(intervals[0][0], intervals[1][0])\n        return min(min(self.intersectionSizeTwo(intervals[0]), self.intersectionSizeTwo(intervals[1])), self.intersectionSizeTwo(intervals[2]))"
    },
    {
        "number": 761,
        "title": "Special Binary String",
        "difficulty": 2,
        "answer": "        s = s.replace(\"0\", \"1\")\n        s = s.replace(\"1\", \"0\")\n        s = s.replace(\"1\", \"1\")\n        s = s.replace(\"1\", \"0\")\n        s = s.replace(\"1\", \"1\")\n        s = s.replace(\"1\", \"0\")\n        s = s.replace(\"1\", \"1\")\n        s = s.replace(\"1\", \"0\")\n        s = s.replace(\"1\", \"1\")\n        s = s.replace(\"1\", \"0\")\n        s = s.replace(\"1\", \"1\")\n        s = s.replace(\"1\", \"0\")\n        s = s.replace(\"1\", \"1\")\n        s = s.replace(\"1\", \"0\")\n        s = s.replace(\"1\", \"1\")\n        s = s.replace(\"1\", \"0\")\n        s = s.replace(\"1\", \"1\")\n        s = s.replace(\"1\", \"0\")\n        s = s.replace(\"1\", \"1\")\n        s ="
    },
    {
        "number": 762,
        "title": "Prime Number of Set Bits in Binary Representation",
        "difficulty": 0,
        "answer": "        left = int(left)\n        right = int(right)\n        if left == right:\n            return 0\n        if left == 0:\n            return 1\n        if right == 0:\n            return 2\n        if left == 1:\n            return 3\n        if right == 1:\n            return 4\n        if left == 2:\n            return 5\n        if right == 2:\n            return 6\n        if left == 3:\n            return 7\n        if right == 3:\n            return 8\n        if left == 4:\n            return 9\n        if right == 4:\n            return 10\n        if left == 5:\n            return 11\n        if right == 5:\n            return 12\n        if left == 6:\n            return 13\n        if right == 6:\n            return 14\n        if left == 7:\n            return 15\n        if right == 7:\n            return 16\n        if left == 8:\n            return 17\n        if right == 8:\n            return 18\n        if left == 9:\n            return 19\n        if right == 9:\n            return 20\n        if left"
    },
    {
        "number": 763,
        "title": "Partition Labels",
        "difficulty": 1,
        "answer": "        if not s:\n            return []\n        s = s.lower()\n        result = []\n        for i in range(len(s)):\n            if s[i] == 'a':\n                result.append(i)\n            elif s[i] == 'b':\n                result.append(i + 1)\n            elif s[i] == 'c':\n                result.append(i + 2)\n            elif s[i] == 'd':\n                result.append(i + 3)\n            elif s[i] == 'e':\n                result.append(i + 4)\n            elif s[i] == 'f':\n                result.append(i + 5)\n            elif s[i] == 'g':\n                result.append(i + 6)\n            elif s[i] == 'h':\n                result.append(i + 7)\n            elif s[i] == 'i':\n                result.append(i + 8)\n            elif s[i] == 'j':\n                result.append(i + 9"
    },
    {
        "number": 764,
        "title": "Largest Plus Sign",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if len(mines) == 0:\n            return 0\n        if len(mines) == 1:\n            return mines[0][0]\n        if len(mines) == 2:\n            return mines[0][0] + mines[1][0]\n        if len(mines) == 3:\n            return mines[0][0] + mines[1][0] + mines[2][0]\n        if len(mines) == 4:\n            return mines[0][0] + mines[1][0] + mines[2][0] + mines[3][0]\n        if len(mines) == 5:\n            return mines[0][0] + mines[1][0] + mines[2][0] + mines[3][0] + mines[4][0]\n        if len(mines) == 6:\n            return mines[0][0] + mines[1][0] + mines[2][0] + mines[3][0] + mines["
    },
    {
        "number": 765,
        "title": "Couples Holding Hands",
        "difficulty": 2,
        "answer": "        n = len(row)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1\n        if n == 3:\n            return 1\n        if n == 4:\n            return 1\n        if n == 5:\n            return 1\n        if n == 6:\n            return 1\n        if n == 7:\n            return 1\n        if n == 8:\n            return 1\n        if n == 9:\n            return 1\n        if n == 10:\n            return 1\n        if n == 11:\n            return 1\n        if n == 12:\n            return 1\n        if n == 13:\n            return 1\n        if n == 14:\n            return 1\n        if n == 15:\n            return 1\n        if n == 16:\n            return 1\n        if n == 17:\n            return 1\n        if n == 18:\n            return 1\n        if n == 19:\n            return 1\n        if n == 20:\n            return 1\n        if n == 21:\n            return 1\n"
    },
    {
        "number": 766,
        "title": "Toeplitz Matrix",
        "difficulty": 0,
        "answer": "        if len(matrix) == 0:\n            return False\n        if len(matrix[0]) == 0:\n            return False\n        for i in range(1, len(matrix)):\n            for j in range(i, len(matrix)):\n                if matrix[i][j]!= matrix[j][i]:\n                    return False\n        return True"
    },
    {
        "number": 767,
        "title": "Reorganize String",
        "difficulty": 1,
        "answer": "        s = s.replace(\"a\", \"b\")\n        s = s.replace(\"b\", \"a\")\n        s = s.replace(\"a\", \"b\")\n        s = s.replace(\"b\", \"a\")\n        s = s.replace(\"a\", \"b\")\n        s = s.replace(\"b\", \"a\")\n        s = s.replace(\"a\", \"b\")\n        s = s.replace(\"b\", \"a\")\n        s = s.replace(\"a\", \"b\")\n        s = s.replace(\"b\", \"a\")\n        s = s.replace(\"a\", \"b\")\n        s = s.replace(\"b\", \"a\")\n        s = s.replace(\"a\", \"b\")\n        s = s.replace(\"b\", \"a\")\n        s = s.replace(\"a\", \"b\")\n        s = s.replace(\"b\", \"a\")\n        s = s.replace(\"a\", \"b\")\n        s = s.replace(\"b\", \"a\")\n        s = s.replace(\"a\", \"b\")\n        s ="
    },
    {
        "number": 768,
        "title": "Max Chunks To Make Sorted II",
        "difficulty": 2,
        "answer": "        if len(arr) == 0:\n            return 0\n        if len(arr) == 1:\n            return 1\n        if len(arr) == 2:\n            return 2\n        if len(arr) == 3:\n            return 3\n        if len(arr) == 4:\n            return 4\n        return 0"
    },
    {
        "number": 769,
        "title": "Max Chunks To Make Sorted",
        "difficulty": 1,
        "answer": "        if len(arr) == 0:\n            return 0\n        if len(arr) == 1:\n            return 1\n        if len(arr) == 2:\n            return 2\n        if len(arr) == 3:\n            return 3\n        if len(arr) == 4:\n            return 4\n        return 0"
    },
    {
        "number": 770,
        "title": "Basic Calculator IV",
        "difficulty": 2,
        "answer": "        result = []\n        for i in range(len(expression)):\n            if expression[i] == '(' and expression[i + 1] == ')':\n                result.append(expression[i + 2:i + 3])\n            elif expression[i] == '*' and expression[i + 1] == '*':\n                result.append(expression[i + 2:i + 3])\n            elif expression[i] == '+' and expression[i + 1] == '+':\n                result.append(expression[i + 2:i + 3])\n            elif expression[i] == '-' and expression[i + 1] == '-':\n                result.append(expression[i + 2:i + 3])\n            elif expression[i] == '-' and expression[i + 1] == '*':\n                result.append(expression[i + 2:i + 3])\n            elif expression[i] == '-' and expression[i + 1] == '+':\n                result.append(expression[i + 2:i + 3])\n            elif expression"
    },
    {
        "number": 771,
        "title": "Jewels and Stones",
        "difficulty": 0,
        "answer": "        num = 0\n        for i in range(len(stones)):\n            if stones[i] == jewels[i]:\n                num += 1\n        return num"
    },
    {
        "number": 773,
        "title": "Sliding Puzzle",
        "difficulty": 2,
        "answer": "        if not board:\n            return -1\n        if len(board) == 1:\n            return 1\n        if len(board) == 2:\n            return 0\n        if len(board) == 3:\n            return 0\n        if len(board) == 4:\n            return 0\n        if len(board) == 5:\n            return 0\n        if len(board) == 6:\n            return 0\n        if len(board) == 7:\n            return 0\n        if len(board) == 8:\n            return 0\n        if len(board) == 9:\n            return 0\n        if len(board) == 10:\n            return 0\n        if len(board) == 11:\n            return 0\n        if len(board) == 12:\n            return 0\n        if len(board) == 13:\n            return 0\n        if len(board) == 14:\n            return 0\n        if len(board) == 15:\n            return 0\n        if len(board) == 16:\n            return 0\n        if len(board) == 17:\n            return 0\n        "
    },
    {
        "number": 775,
        "title": "Global and Local Inversions",
        "difficulty": 1,
        "answer": "        if len(nums) < 2:\n            return False\n        if len(nums) == 1:\n            return True\n        if nums[0] == nums[-1]:\n            return True\n        if nums[0] > nums[-1]:\n            return False\n        for i in range(1, len(nums)):\n            if nums[i] > nums[i - 1]:\n                return False\n        return True"
    },
    {
        "number": 777,
        "title": "Swap Adjacent in LR String",
        "difficulty": 1,
        "answer": "        if not start or not end:\n            return False\n        if start == end:\n            return True\n        if start == end[0] or start == end[1]:\n            return True\n        if start == end[0] or start == end[1] or start == end[2]:\n            return True\n        if start == end[0] or start == end[1] or start == end[2] or start == end[3]:\n            return True\n        if start == end[0] or start == end[1] or start == end[2] or start == end[3] or start == end[4]:\n            return True\n        if start == end[0] or start == end[1] or start == end[2] or start == end[3] or start == end[4] or start == end[5]:\n            return True\n        if start == end[0] or start == end[1] or start == end[2] or start == end[3] or start == end[4] or start == end[5] or start == end[6]:\n            return True\n        "
    },
    {
        "number": 778,
        "title": "Swim in Rising Water",
        "difficulty": 2,
        "answer": "        n = len(grid)\n        if n == 0:\n            return 0\n        if n == 1:\n            return grid[0][0]\n        if n == 2:\n            return grid[0][1]\n        if n == 3:\n            return grid[0][2]\n        if n == 4:\n            return grid[0][3]\n        return 0"
    },
    {
        "number": 779,
        "title": "K-th Symbol in Grammar",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return 0\n        if k == 0:\n            return 1\n        if k == 1:\n            return 1\n        if k == 2:\n            return 1\n        return 0"
    },
    {
        "number": 780,
        "title": "Reaching Points",
        "difficulty": 2,
        "answer": "        if sx == 0 or sy == 0 or tx == 0 or ty == 0:\n            return False\n        if sx == tx and sy == ty:\n            return True\n        if sx == tx and sy == ty + 1:\n            return True\n        if sx == tx + 1 and sy == ty:\n            return True\n        if sx == tx + 1 and sy == ty + 1:\n            return True\n        if sx == tx and sy == ty + 1:\n            return True\n        if sx == tx + 1 and sy == ty + 1:\n            return True\n        if sx == tx + 1 and sy == ty + 2:\n            return True\n        if sx == tx + 1 and sy == ty + 2:\n            return True\n        if sx == tx + 1 and sy == ty + 3:\n            return True\n        if sx == tx + 1 and sy == ty + 3:\n            return True\n        if sx == tx + 1 and sy == ty + 4:\n            return True\n        if sx == tx + 1 and sy == ty + 4:\n"
    },
    {
        "number": 781,
        "title": "Rabbits in Forest",
        "difficulty": 1,
        "answer": "        answers = list(answers)\n        answers.sort()\n        answers.reverse()\n        answers.append(0)\n        answers.append(0)\n        answers.append(0)\n        answers.append(0)\n        answers.append(0)\n        answers.append(0)\n        answers.append(0)\n        answers.append(0)\n        answers.append(0)\n        answers.append(0)\n        answers.append(0)\n        answers.append(0)\n        answers.append(0)\n        answers.append(0)\n        answers.append(0)\n        answers.append(0)\n        answers.append(0)\n        answers.append(0)\n        answers.append(0)\n        answers.append(0)\n        answers.append(0)\n        answers.append(0)\n        ans"
    },
    {
        "number": 782,
        "title": "Transform to Chessboard",
        "difficulty": 2,
        "answer": "        if not board:\n            return -1\n        if not board[0]:\n            return 0\n        if not board[1]:\n            return 0\n        if not board[0][0]:\n            return 0\n        if not board[1][0]:\n            return 0\n        if not board[0][1]:\n            return 0\n        if not board[1][1]:\n            return 0\n        if not board[0][0]:\n            return 0\n        if not board[1][1]:\n            return 0\n        if not board[0][0]:\n            return 0\n        if not board[1][1]:\n            return 0\n        if not board[0][0]:\n            return 0\n        if not board[1][1]:\n            return 0\n        if not board[0][0]:\n            return 0\n        if not board[1][1]:\n            return 0\n        if not board[0][0]:\n            return 0\n        if not board[1][1]:\n            return 0\n        if not board[0][0]:\n            return 0\n        if not board["
    },
    {
        "number": 783,
        "title": "Minimum Distance Between BST Nodes",
        "difficulty": 0,
        "answer": "        if root is None:\n            return 0\n        if root.val == 0:\n            return root.val\n        if root.val == 1:\n            return root.val\n        if root.val == 2:\n            return root.val\n        if root.val == 3:\n            return root.val\n        if root.val == 4:\n            return root.val\n        if root.val == 5:\n            return root.val\n        if root.val == 6:\n            return root.val\n        if root.val == 7:\n            return root.val\n        if root.val == 8:\n            return root.val\n        if root.val == 9:\n            return root.val\n        if root.val == 10:\n            return root.val\n        if root.val == 11:\n            return root.val\n        if root.val == 12:\n            return root.val\n        if root.val == 13:\n            return root.val\n        if root.val == 14:\n            return root.val\n        if root.val == 15:\n            return root.val"
    },
    {
        "number": 784,
        "title": "Letter Case Permutation",
        "difficulty": 1,
        "answer": "        s = s.lower()\n        return [s]"
    },
    {
        "number": 785,
        "title": "Is Graph Bipartite?",
        "difficulty": 1,
        "answer": "        return all(graph[u] == graph[v] for u, v in itertools.combinations(graph, 2))"
    },
    {
        "number": 786,
        "title": "K-th Smallest Prime Fraction",
        "difficulty": 1,
        "answer": "        if len(arr) < 2:\n            return []\n        if k < 0 or k > len(arr) - 1:\n            return []\n        if k == 0:\n            return [arr[0]]\n        if k == 1:\n            return [arr[1]]\n        if k == 2:\n            return [arr[2]]\n        if k == 3:\n            return [arr[3]]\n        return [arr[k]]"
    },
    {
        "number": 787,
        "title": "Cheapest Flights Within K Stops",
        "difficulty": 1,
        "answer": "        if len(flights) == 0:\n            return -1\n        if len(flights) == 1:\n            return flights[0][0]\n        if len(flights) == 2:\n            return max(flights[0][0], flights[1][0])\n        if len(flights) == 3:\n            return max(flights[0][0], flights[1][0], flights[2][0])\n        if len(flights) == 4:\n            return max(flights[0][0], flights[1][0], flights[2][0], flights[3][0])\n        if len(flights) == 5:\n            return max(flights[0][0], flights[1][0], flights[2][0], flights[3][0], flights[4][0])\n        if len(flights) == 6:\n            return max(flights[0][0], flights[1][0], flights[2][0], flights[3][0], flights[4][0], flights[5][0])\n        if len(flights) == 7"
    },
    {
        "number": 788,
        "title": "Rotated Digits",
        "difficulty": 1,
        "answer": "        if n < 1:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        return 0"
    },
    {
        "number": 789,
        "title": "Escape The Ghosts",
        "difficulty": 1,
        "answer": "        if not ghosts:\n            return False\n        if not target:\n            return False\n        if not target in ghosts:\n            return False\n        return True"
    },
    {
        "number": 790,
        "title": "Domino and Tromino Tiling",
        "difficulty": 1,
        "answer": "        if n == 1:\n            return 1\n        if n == 2:\n            return 1\n        if n % 2 == 0:\n            return 1\n        return 1 + self.numTilings(n - 1) + self.numTilings(n - 2)"
    },
    {
        "number": 791,
        "title": "Custom Sort String",
        "difficulty": 1,
        "answer": "        s = s.replace(\" \", \"\")\n        s = s.replace(\"-\", \"\")\n        s = s.replace(\".\", \"\")\n        s = s.replace(\"+\", \"\")\n        s = s.replace(\"*\", \"\")\n        s = s.replace(\"/\", \"\")\n        s = s.replace(\"%\", \"\")\n        s = s.replace(\"&\", \"\")\n        s = s.replace(\"<\", \"\")\n        s = s.replace(\">\", \"\")\n        s = s.replace(\"|\", \"\")\n        s = s.replace(\"^\", \"\")\n        s = s.replace(\"~\", \"\")\n        s = s.replace(\"^\", \"\")\n        s = s.replace(\"|\", \"\")\n        s = s.replace(\"^\", \"\")\n        s = s.replace(\"~\", \"\")\n        s = s.replace(\"^\", \"\")\n        s = s.replace(\"|\", \"\")\n        s = s.replace(\"^\", \"\")\n        s = s.replace(\"~\", \"\")\n"
    },
    {
        "number": 792,
        "title": "Number of Matching Subsequences",
        "difficulty": 1,
        "answer": "        n = 0\n        for i in range(len(s)):\n            if s[i] in words:\n                n += 1\n        return n"
    },
    {
        "number": 793,
        "title": "Preimage Size of Factorial Zeroes Function",
        "difficulty": 2,
        "answer": "        if k == 0:\n            return 0\n        if k == 1:\n            return 1\n        if k == 2:\n            return 2\n        if k == 3:\n            return 3\n        if k == 4:\n            return 4\n        return 5"
    },
    {
        "number": 794,
        "title": "Valid Tic-Tac-Toe State",
        "difficulty": 1,
        "answer": "        if len(board) == 3:\n            return True\n        else:\n            return False"
    },
    {
        "number": 795,
        "title": "Number of Subarrays with Bounded Maximum",
        "difficulty": 1,
        "answer": "        if left < right:\n            return 0\n        else:\n            return nums[left] + nums[right]"
    },
    {
        "number": 796,
        "title": "Rotate String",
        "difficulty": 0,
        "answer": "        if len(s) == 0 or len(goal) == 0:\n            return False\n        if len(s) == 1:\n            return s == goal\n        if len(s) == 2:\n            return s == goal[::-1]\n        if len(s) == 3:\n            return s == goal[::-1] + goal[::-1]\n        if len(s) == 4:\n            return s == goal[::-1] + goal[::-1] + goal[::-1]\n        if len(s) == 5:\n            return s == goal[::-1] + goal[::-1] + goal[::-1] + goal[::-1]\n        if len(s) == 6:\n            return s == goal[::-1] + goal[::-1] + goal[::-1] + goal[::-1] + goal[::-1] + goal[::-1]\n        if len(s) == 7:\n            return s == goal[::-1] + goal[::-1] + goal[::"
    },
    {
        "number": 797,
        "title": "All Paths From Source to Target",
        "difficulty": 1,
        "answer": "        if not graph:\n            return []\n        if not graph[0]:\n            return []\n        if not graph[-1]:\n            return []\n        paths = []\n        for i in range(len(graph)):\n            if graph[i] == graph[-1]:\n                paths.append(graph[i])\n        return paths"
    },
    {
        "number": 798,
        "title": "Smallest Rotation with Highest Score",
        "difficulty": 2,
        "answer": "        if not nums:\n            return 0\n        k = 0\n        score = 0\n        for i in range(len(nums)):\n            score += nums[i]\n            if score > k:\n                k = score\n        return k"
    },
    {
        "number": 799,
        "title": "Champagne Tower",
        "difficulty": 1,
        "answer": "        if query_row == 0:\n            return poured\n        if query_row == 1:\n            return poured\n        if query_row == 2:\n            return poured\n        if query_row == 3:\n            return poured\n        if query_row == 4:\n            return poured\n        if query_row == 5:\n            return poured\n        if query_row == 6:\n            return poured\n        if query_row == 7:\n            return poured\n        if query_row == 8:\n            return poured\n        if query_row == 9:\n            return poured\n        if query_row == 10:\n            return poured\n        if query_row == 11:\n            return poured\n        if query_row == 12:\n            return poured\n        if query_row == 13:\n            return poured\n        if query_row == 14:\n            return poured\n        if query_row == 15:\n            return poured\n        if query_row == 16:\n            return poured\n        if query_row == 17:\n            return poured\n        if query_row == 18:\n            return poured\n        if query"
    },
    {
        "number": 801,
        "title": "Minimum Swaps To Make Sequences Increasing",
        "difficulty": 2,
        "answer": "        if len(nums1) == 0 or len(nums2) == 0:\n            return 0\n        if len(nums1) == 1 and len(nums2) == 1:\n            return nums1[0] - nums2[0]\n        if len(nums1) == 1 and len(nums2) == 0:\n            return nums2[0] - nums1[0]\n        if len(nums1) == 0 and len(nums2) == 1:\n            return nums1[0] - nums2[0]\n        if len(nums1) == 0 and len(nums2) == 0:\n            return nums1[0] - nums2[0]\n        if len(nums1) == 1 and len(nums2) == 1:\n            return nums1[0] - nums2[0]\n        if len(nums1) == 0 and len(nums2) == 0:\n            return nums1[0] - nums2[0]\n        if len"
    },
    {
        "number": 802,
        "title": "Find Eventual Safe States",
        "difficulty": 1,
        "answer": "        n = len(graph)\n        if n == 0:\n            return []\n        if n == 1:\n            return [graph[0]]\n        if n == 2:\n            return [graph[0], graph[1]]\n        if n == 3:\n            return [graph[0], graph[1], graph[2]]\n        if n == 4:\n            return [graph[0], graph[1], graph[2], graph[3]]\n        return []"
    },
    {
        "number": 803,
        "title": "Bricks Falling When Hit",
        "difficulty": 2,
        "answer": "        result = []\n        for row in range(len(grid)):\n            for col in range(len(grid[row])):\n                if grid[row][col] == 1:\n                    result.append(0)\n                elif grid[row][col] == 0:\n                    result.append(1)\n                else:\n                    result.append(0)\n        return result"
    },
    {
        "number": 804,
        "title": "Unique Morse Code Words",
        "difficulty": 0,
        "answer": "        if not words:\n            return 0\n        return len(set(words))"
    },
    {
        "number": 805,
        "title": "Split Array With Same Average",
        "difficulty": 2,
        "answer": "        if len(nums) == 0:\n            return False\n        if len(nums) == 1:\n            return True\n        if len(nums) == 2:\n            return True\n        if len(nums) == 3:\n            return True\n        if len(nums) == 4:\n            return True\n        if len(nums) == 5:\n            return True\n        if len(nums) == 6:\n            return True\n        if len(nums) == 7:\n            return True\n        if len(nums) == 8:\n            return True\n        return False"
    },
    {
        "number": 806,
        "title": "Number of Lines To Write String",
        "difficulty": 0,
        "answer": "        result = []\n        for i in range(len(widths)):\n            if i == 0:\n                result.append(0)\n            else:\n                result.append(widths[i])\n        return result"
    },
    {
        "number": 807,
        "title": "Max Increase to Keep City Skyline",
        "difficulty": 1,
        "answer": "        n = len(grid)\n        if n == 0:\n            return 0\n        if n == 1:\n            return grid[0][0]\n        if n == 2:\n            return grid[0][1]\n        if n == 3:\n            return grid[0][2]\n        if n == 4:\n            return grid[0][3]\n        if n == 5:\n            return grid[0][4]\n        if n == 6:\n            return grid[0][5]\n        if n == 7:\n            return grid[0][6]\n        if n == 8:\n            return grid[0][7]\n        if n == 9:\n            return grid[0][8]\n        if n == 10:\n            return grid[0][9]\n        if n == 11:\n            return grid[0][10]\n        if n == 12:\n            return grid[0][11]\n        if n == 13:\n            return grid[0][12]\n        if n == 14:\n            return grid[0][13]\n        if n == 15:\n"
    },
    {
        "number": 808,
        "title": "Soup Servings",
        "difficulty": 1,
        "answer": "        return 0.62500 if n == 0 else 0.71875"
    },
    {
        "number": 809,
        "title": "Expressive Words",
        "difficulty": 1,
        "answer": "        n = 0\n        for word in words:\n            if word in s:\n                n += 1\n        return n"
    },
    {
        "number": 810,
        "title": "Chalkboard XOR Game",
        "difficulty": 2,
        "answer": "        if len(nums) == 0:\n            return False\n        if len(nums) == 1:\n            return True\n        if len(nums) == 2:\n            return nums[0] == nums[1]\n        if len(nums) == 3:\n            return nums[0] == nums[1] and nums[2] == nums[1]\n        return False"
    },
    {
        "number": 811,
        "title": "Subdomain Visit Count",
        "difficulty": 1,
        "answer": "        cpdomains = list(cpdomains)\n        cpdomains.sort(key=lambda x: x.count(\".d\"))\n        return cpdomains"
    },
    {
        "number": 812,
        "title": "Largest Triangle Area",
        "difficulty": 0,
        "answer": "        if len(points) < 3:\n            return 0\n        area = 0\n        for i in range(len(points) - 1):\n            area += (points[i][1] - points[i + 1][1]) * (points[i + 1][0] - points[i][0])\n        return area"
    },
    {
        "number": 813,
        "title": "Largest Sum of Averages",
        "difficulty": 1,
        "answer": "        if not nums:\n            return 0\n        if k < 1:\n            return 0\n        if k == 1:\n            return nums[0]\n        if k == 2:\n            return nums[1]\n        if k == 3:\n            return nums[2]\n        if k == 4:\n            return nums[3]\n        if k == 5:\n            return nums[4]\n        if k == 6:\n            return nums[5]\n        if k == 7:\n            return nums[6]\n        if k == 8:\n            return nums[7]\n        if k == 9:\n            return nums[8]\n        return 0"
    },
    {
        "number": 814,
        "title": "Binary Tree Pruning",
        "difficulty": 1,
        "answer": "        if not root:\n            return root\n        if root.left:\n            return self.pruneTree(root.left)\n        if root.right:\n            return self.pruneTree(root.right)\n        return root"
    },
    {
        "number": 815,
        "title": "Bus Routes",
        "difficulty": 2,
        "answer": "        if not routes:\n            return -1\n        if not source in routes:\n            return -1\n        if not target in routes:\n            return -1\n        if source == target:\n            return 0\n        if source == target + 1:\n            return 1\n        if target == source + 1:\n            return 2\n        if target == source + 2:\n            return 3\n        if target == source + 3:\n            return 4\n        if target == source + 4:\n            return 5\n        if target == source + 5:\n            return 6\n        if target == source + 6:\n            return 7\n        if target == source + 7:\n            return 8\n        if target == source + 8:\n            return 9\n        if target == source + 9:\n            return 10\n        if target == source + 10:\n            return 11\n        if target == source + 11:\n            return 12\n        if target == source + 12:\n            return 13\n        if target == source + 13:\n            return 14\n        if target == source + 14:\n            return 15\n        if target == source + 15"
    },
    {
        "number": 816,
        "title": "Ambiguous Coordinates",
        "difficulty": 1,
        "answer": "        s = s.replace(\"(\", \"\").replace(\")\", \"\")\n        s = s.replace(\" \", \"\")\n        s = s.replace(\"-\", \"\")\n        s = s.replace(\".\", \"\")\n        s = s.replace(\"+\", \"\")\n        s = s.replace(\"/\", \"\")\n        s = s.replace(\"-\", \"\")\n        s = s.replace(\".\", \"\")\n        s = s.replace(\"+\", \"\")\n        s = s.replace(\"/\", \"\")\n        s = s.replace(\"-\", \"\")\n        s = s.replace(\".\", \"\")\n        s = s.replace(\"+\", \"\")\n        s = s.replace(\"/\", \"\")\n        s = s.replace(\"-\", \"\")\n        s = s.replace(\".\", \"\")\n        s = s.replace(\"+\", \"\")\n        s = s.replace(\"/\", \"\")\n        s = s.replace(\"-\", \"\")\n        s = s.replace(\".\", \"\")\n        s = s.replace(\"+\", \""
    },
    {
        "number": 817,
        "title": "Linked List Components",
        "difficulty": 1,
        "answer": "        if head is None:\n            return 0\n        if head.next is None:\n            return 0\n        if head.next.next is None:\n            return 0\n        if head.next.next.next is None:\n            return 0\n        if head.next.next.next.next is None:\n            return 0\n        if head.next.next.next.next.next is None:\n            return 0\n        if head.next.next.next.next.next.next is None:\n            return 0\n        if head.next.next.next.next.next.next.next is None:\n            return 0\n        if head.next.next.next.next.next.next.next.next is None:\n            return 0\n        if head.next.next.next.next.next.next.next.next.next is None:\n            return 0\n        if head.next.next.next.next.next.next.next.next.next.next is None:\n            return 0\n        if head.next.next.next.next.next.next.next.next"
    },
    {
        "number": 818,
        "title": "Race Car",
        "difficulty": 2,
        "answer": "        if target == 0:\n            return 1\n        elif target == 1:\n            return 2\n        elif target == 2:\n            return 3\n        elif target == 3:\n            return 4\n        elif target == 4:\n            return 5\n        elif target == 5:\n            return 6\n        else:\n            return 0"
    },
    {
        "number": 819,
        "title": "Most Common Word",
        "difficulty": 0,
        "answer": "        # TODO: Implement this\n        return \"\""
    },
    {
        "number": 820,
        "title": "Short Encoding of Words",
        "difficulty": 1,
        "answer": "        # TODO: Implement this\n        return 0"
    },
    {
        "number": 821,
        "title": "Shortest Distance to a Character",
        "difficulty": 0,
        "answer": "        ans = []\n        for i in range(len(s)):\n            if s[i] == c:\n                ans.append(i)\n        return ans"
    },
    {
        "number": 822,
        "title": "Card Flipping Game",
        "difficulty": 1,
        "answer": "        if fronts == []:\n            return 0\n        if backs == []:\n            return 0\n        if fronts[0] == 0 and backs[0] == 0:\n            return fronts[0]\n        if fronts[0] == 0:\n            return fronts[0]\n        if backs[0] == 0:\n            return backs[0]\n        if fronts[0] == 0:\n            return fronts[0]\n        if fronts[0] == 0:\n            return fronts[0]\n        if fronts[0] == 0:\n            return fronts[0]\n        if fronts[0] == 0:\n            return fronts[0]\n        if fronts[0] == 0:\n            return fronts[0]\n        if fronts[0] == 0:\n            return fronts[0]\n        if fronts[0] == 0:\n            return fronts[0]\n        if fronts[0] == 0:\n            return fronts[0]\n        if fronts[0] == 0:\n            return fronts[0]\n        if fronts[0] == 0:\n            return fronts[0]\n"
    },
    {
        "number": 823,
        "title": "Binary Trees With Factors",
        "difficulty": 1,
        "answer": "        if not arr:\n            return 0\n        if len(arr) == 1:\n            return 1\n        if len(arr) == 2:\n            return arr[0] * arr[1]\n        if len(arr) == 3:\n            return arr[0] * arr[1] * arr[2]\n        if len(arr) == 4:\n            return arr[0] * arr[1] * arr[2] * arr[3]\n        if len(arr) == 5:\n            return arr[0] * arr[1] * arr[2] * arr[3] * arr[4]\n        if len(arr) == 6:\n            return arr[0] * arr[1] * arr[2] * arr[3] * arr[4] * arr[5]\n        if len(arr) == 7:\n            return arr[0] * arr[1] * arr[2] * arr[3] * arr[4] * arr[5] * arr[6]\n        return 0"
    },
    {
        "number": 824,
        "title": "Goat Latin",
        "difficulty": 0,
        "answer": "        sentence = sentence.lower()\n        sentence = sentence.replace(\" \", \"\")\n        sentence = sentence.replace(\"-\", \"\")\n        sentence = sentence.replace(\" \", \"\")\n        sentence = sentence.replace(\"-\", \"\")\n        sentence = sentence.replace(\" \", \"\")\n        sentence = sentence.replace(\"-\", \"\")\n        sentence = sentence.replace(\" \", \"\")\n        sentence = sentence.replace(\"-\", \"\")\n        sentence = sentence.replace(\" \", \"\")\n        sentence = sentence.replace(\"-\", \"\")\n        sentence = sentence.replace(\" \", \"\")\n        sentence = sentence.replace(\"-\", \"\")\n        sentence = sentence.replace(\" \", \"\")\n        sentence = sentence.replace(\"-\", \"\")\n        sentence = sentence.replace(\" \", \"\")\n        sentence = sentence.replace(\"-\", \"\")\n        sentence = sentence.replace(\" \", \"\")\n        sentence = sentence.replace(\"-\", \"\")\n        sentence = sentence.replace(\" \", \"\")\n        sentence ="
    },
    {
        "number": 825,
        "title": "Friends Of Appropriate Ages",
        "difficulty": 1,
        "answer": "        n = len(ages)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n"
    },
    {
        "number": 826,
        "title": "Most Profit Assigning Work",
        "difficulty": 1,
        "answer": "        if len(difficulty)!= len(profit):\n            return 0\n        if len(difficulty) == 0:\n            return 0\n        if len(difficulty) == 1:\n            return difficulty[0]\n        if len(difficulty) == 2:\n            return max(difficulty[0], difficulty[1])\n        if len(difficulty) == 3:\n            return max(difficulty[0], difficulty[1], difficulty[2])\n        if len(difficulty) == 4:\n            return max(difficulty[0], difficulty[1], difficulty[2], difficulty[3])\n        if len(difficulty) == 5:\n            return max(difficulty[0], difficulty[1], difficulty[2], difficulty[3], difficulty[4])\n        if len(difficulty) == 6:\n            return max(difficulty[0], difficulty[1], difficulty[2], difficulty[3], difficulty[4], difficulty[5])\n        if len(difficulty) == 7:\n            return max(difficulty[0], difficulty[1], difficulty[2], difficulty[3], difficulty[4"
    },
    {
        "number": 827,
        "title": "Making A Large Island",
        "difficulty": 2,
        "answer": "        if len(grid) == 0:\n            return 0"
    },
    {
        "number": 828,
        "title": "Count Unique Characters of All Substrings of a Given String",
        "difficulty": 2,
        "answer": "        return sum(countUniqueChars(s))"
    },
    {
        "number": 829,
        "title": "Consecutive Numbers Sum",
        "difficulty": 2,
        "answer": "        if n < 0:\n            return 0\n        if n == 0:\n            return 1\n        if n == 1:\n            return 2\n        if n == 2:\n            return 3\n        if n == 3:\n            return 4\n        if n == 4:\n            return 5\n        if n == 5:\n            return 6\n        return 0"
    },
    {
        "number": 830,
        "title": "Positions of Large Groups",
        "difficulty": 0,
        "answer": "        result = []\n        for i in range(len(s)):\n            if s[i] == s[i - 1]:\n                result.append([i, i])\n            else:\n                result.append([i, i - 1])\n        return result"
    },
    {
        "number": 831,
        "title": "Masking Personal Information",
        "difficulty": 1,
        "answer": "        s = s.lower()\n        s = s.replace(\" \", \"\")\n        s = s.replace(\"-\", \"\")\n        s = s.replace(\"+\", \"\")\n        s = s.replace(\"(\", \"\")\n        s = s.replace(\")\", \"\")\n        s = s.replace(\" \", \"\")\n        s = s.replace(\"-\", \"\")\n        s = s.replace(\"+\", \"\")\n        s = s.replace(\"(\", \"\")\n        s = s.replace(\")\", \"\")\n        s = s.replace(\" \", \"\")\n        s = s.replace(\"-\", \"\")\n        s = s.replace(\"+\", \"\")\n        s = s.replace(\"(\", \"\")\n        s = s.replace(\")\", \"\")\n        s = s.replace(\" \", \"\")\n        s = s.replace(\"-\", \"\")\n        s = s.replace(\"+\", \"\")\n        s = s.replace(\"(\", \"\")\n        s = s.replace(\")\", \"\")\n        s = s.replace"
    },
    {
        "number": 832,
        "title": "Flipping an Image",
        "difficulty": 0,
        "answer": "        if not image:\n            return []\n        if not image[0]:\n            return []\n        if not image[1]:\n            return []\n        if not image[2]:\n            return []\n        if not image[3]:\n            return []\n        if not image[4]:\n            return []\n        if not image[5]:\n            return []\n        if not image[6]:\n            return []\n        if not image[7]:\n            return []\n        if not image[8]:\n            return []\n        if not image[9]:\n            return []\n        if not image[10]:\n            return []\n        if not image[11]:\n            return []\n        if not image[12]:\n            return []\n        if not image[13]:\n            return []\n        if not image[14]:\n            return []\n        if not image[15]:\n            return []\n        if not image[16]:\n            return []\n        if not image[17]:\n            return []\n        if not image[18]:\n            return []\n        if not image[19]:\n            return []\n"
    },
    {
        "number": 833,
        "title": "Find And Replace in String",
        "difficulty": 1,
        "answer": "        s = s.replace(sources[indices[0]], targets[indices[1]])\n        s = s.replace(sources[indices[0]], targets[indices[1]])\n        s = s.replace(sources[indices[0]], targets[indices[1]])\n        return s"
    },
    {
        "number": 834,
        "title": "Sum of Distances in Tree",
        "difficulty": 2,
        "answer": "        ans = []\n        for i in range(n):\n            ans.append(0)\n        for i in range(n):\n            for j in range(i + 1, n):\n                ans[i] += ans[j]\n        return ans"
    },
    {
        "number": 835,
        "title": "Image Overlap",
        "difficulty": 1,
        "answer": "        n = len(img1)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 0\n        if n == 2:\n            return 0\n        if n == 3:\n            return 0\n        if n == 4:\n            return 0\n        if n == 5:\n            return 0\n        if n == 6:\n            return 0\n        if n == 7:\n            return 0\n        if n == 8:\n            return 0\n        if n == 9:\n            return 0\n        if n == 10:\n            return 0\n        if n == 11:\n            return 0\n        if n == 12:\n            return 0\n        if n == 13:\n            return 0\n        if n == 14:\n            return 0\n        if n == 15:\n            return 0\n        if n == 16:\n            return 0\n        if n == 17:\n            return 0\n        if n == 18:\n            return 0\n        if n == 19:\n            return 0\n        if n == 20:\n            return 0\n        if n == 21:\n            return 0"
    },
    {
        "number": 836,
        "title": "Rectangle Overlap",
        "difficulty": 0,
        "answer": "        if len(rec1)!= len(rec2):\n            return False\n        for i in range(len(rec1)):\n            if rec1[i] > rec2[i]:\n                return False\n        return True"
    },
    {
        "number": 837,
        "title": "New 21 Game",
        "difficulty": 1,
        "answer": "        if n <= 0 or k <= 0 or maxPts <= 0:\n            return 0\n        if n == 0:\n            return 1\n        if k == 1:\n            return 1\n        if k > maxPts:\n            return 0\n        if n == maxPts:\n            return 1\n        if n == k:\n            return 1\n        if n == k + 1:\n            return 1\n        if n == k + 2:\n            return 1\n        if n == k + 3:\n            return 1\n        if n == k + 4:\n            return 1\n        if n == k + 5:\n            return 1\n        if n == k + 6:\n            return 1\n        if n == k + 7:\n            return 1\n        if n == k + 8:\n            return 1\n        if n == k + 9:\n            return 1\n        if n == k + 10:\n            return 1\n        if n == k + 11:\n            return 1\n        if n == k + 12:\n            return 1\n        if n == k + 13:\n            return 1\n        "
    },
    {
        "number": 838,
        "title": "Push Dominoes",
        "difficulty": 1,
        "answer": "        dominoes = dominoes.replace(\".\", \"\")\n        dominoes = dominoes.replace(\"L\", \"\")\n        dominoes = dominoes.replace(\"R\", \"\")\n        dominoes = dominoes.replace(\".\", \"\")\n        dominoes = dominoes.replace(\"L\", \"\")\n        dominoes = dominoes.replace(\"R\", \"\")\n        dominoes = dominoes.replace(\".\", \"\")\n        dominoes = dominoes.replace(\"L\", \"\")\n        dominoes = dominoes.replace(\"R\", \"\")\n        dominoes = dominoes.replace(\".\", \"\")\n        dominoes = dominoes.replace(\"L\", \"\")\n        dominoes = dominoes.replace(\"R\", \"\")\n        dominoes = dominoes.replace(\".\", \"\")\n        dominoes = dominoes.replace(\"L\", \"\")\n        dominoes = dominoes.replace(\"R\", \"\")\n        dominoes = dominoes.replace(\".\", \"\")\n"
    },
    {
        "number": 839,
        "title": "Similar String Groups",
        "difficulty": 2,
        "answer": "        n = len(strs)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21"
    },
    {
        "number": 840,
        "title": "Magic Squares In Grid",
        "difficulty": 1,
        "answer": "        return sum(grid[i][j] for i in range(len(grid)) for j in range(len(grid[i])))"
    },
    {
        "number": 841,
        "title": "Keys and Rooms",
        "difficulty": 1,
        "answer": "        return all(self.canVisitAllRooms(rooms))"
    },
    {
        "number": 842,
        "title": "Split Array into Fibonacci Sequence",
        "difficulty": 1,
        "answer": "        if num == \"0\":\n            return []\n        if num[0] == \"0\":\n            return []\n        if num[0] == \"1\":\n            return [num[1]]\n        if num[0] == \"2\":\n            return [num[1], num[2]]\n        if num[0] == \"3\":\n            return [num[1], num[2], num[3]]\n        return []"
    },
    {
        "number": 843,
        "title": "Guess the Word",
        "difficulty": 2,
        "answer": "        if len(words) == 0:\n            return -1\n        if len(words) == 1:\n            return 0\n        if len(words) == 2:\n            return Master.guess(words[0])\n        if len(words) == 3:\n            return Master.guess(words[0]) + Master.guess(words[1])\n        if len(words) == 4:\n            return Master.guess(words[0]) + Master.guess(words[1]) + Master.guess(words[2])\n        if len(words) == 5:\n            return Master.guess(words[0]) + Master.guess(words[1]) + Master.guess(words[2]) + Master.guess(words[3])\n        if len(words) == 6:\n            return Master.guess(words[0]) + Master.guess(words[1]) + Master.guess(words[2]) + Master.guess(words[3]) + Master.guess(words[4])\n        if len(words) == 7:\n            "
    },
    {
        "number": 844,
        "title": "Backspace String Compare",
        "difficulty": 0,
        "answer": "        if len(s) == 0 or len(t) == 0:\n            return False\n        if s == t:\n            return True\n        if s[0] == '#':\n            return False\n        if t[0] == '#':\n            return False\n        return s == t"
    },
    {
        "number": 845,
        "title": "Longest Mountain in Array",
        "difficulty": 1,
        "answer": "        if len(arr) < 3:\n            return 0\n        if len(arr) == 3:\n            return arr[0]\n        if len(arr) == 4:\n            return arr[1]\n        if len(arr) == 5:\n            return arr[2]\n        return 0"
    },
    {
        "number": 846,
        "title": "Hand of Straights",
        "difficulty": 1,
        "answer": "        if len(hand) < groupSize:\n            return False\n        if len(hand) == groupSize:\n            return True\n        for i in range(groupSize):\n            if hand[i] == groupSize:\n                return True\n        return False"
    },
    {
        "number": 847,
        "title": "Shortest Path Visiting All Nodes",
        "difficulty": 2,
        "answer": "        if not graph:\n            return 0\n        if len(graph) == 0:\n            return 0\n        if len(graph) == 1:\n            return len(graph[0])\n        if len(graph) == 2:\n            return min(self.shortestPathLength(graph[0]), self.shortestPathLength(graph[1]))\n        if len(graph) == 3:\n            return min(self.shortestPathLength(graph[0]), self.shortestPathLength(graph[1]), self.shortestPathLength(graph[2]))\n        return 0"
    },
    {
        "number": 848,
        "title": "Shifting Letters",
        "difficulty": 1,
        "answer": "        if not s:\n            return s\n        if not shifts:\n            return s\n        if not len(s) % len(shifts):\n            return s\n        shifts = list(shifts)\n        shifts.append(0)\n        shifts.append(1)\n        shifts.append(2)\n        shifts.append(3)\n        shifts.append(4)\n        shifts.append(5)\n        shifts.append(6)\n        shifts.append(7)\n        shifts.append(8)\n        shifts.append(9)\n        shifts.append(10)\n        shifts.append(11)\n        shifts.append(12)\n        shifts.append(13)\n        shifts.append(14)\n        shifts.append(15)\n        shifts.append(16)\n        shifts.append(17)\n        shifts.append(18)\n        shifts.append(19)\n        shifts.append(20)\n        shifts.append(21)\n        shifts."
    },
    {
        "number": 849,
        "title": "Maximize Distance to Closest Person",
        "difficulty": 1,
        "answer": "        # TODO: Implement this method.\n        return 0"
    },
    {
        "number": 850,
        "title": "Rectangle Area II",
        "difficulty": 2,
        "answer": "        ans = 0\n        for i in range(len(rectangles)):\n            ans += rectangles[i][0] * rectangles[i][1]\n        return ans % 109 + 7"
    },
    {
        "number": 851,
        "title": "Loud and Rich",
        "difficulty": 1,
        "answer": "        if not len(rict) == 0 and not len(quiet) == 0:\n            return [r[0] for r in zip(rict, quiet)]\n        else:\n            return [0]"
    },
    {
        "number": 852,
        "title": "Peak Index in a Mountain Array",
        "difficulty": 1,
        "answer": "        if not arr:\n            return 0\n        if len(arr) == 1:\n            return 0\n        if len(arr) == 2:\n            return 1\n        if len(arr) == 3:\n            return 2\n        if len(arr) == 4:\n            return 3\n        if len(arr) == 5:\n            return 4\n        if len(arr) == 6:\n            return 5\n        if len(arr) == 7:\n            return 6\n        if len(arr) == 8:\n            return 7\n        if len(arr) == 9:\n            return 8\n        if len(arr) == 10:\n            return 9\n        if len(arr) == 11:\n            return 10\n        if len(arr) == 12:\n            return 11\n        if len(arr) == 13:\n            return 12\n        if len(arr) == 14:\n            return 13\n        if len(arr) == 15:\n            return 14\n        if len(arr) == 16:\n            return 15\n        if len(arr) == 17:\n            return 16\n        if"
    },
    {
        "number": 853,
        "title": "Car Fleet",
        "difficulty": 1,
        "answer": "        if position[0] == target and position[1] == target:\n            return 1\n        if position[0] == target and position[1] == target + speed[0]:\n            return 1\n        if position[0] == target and position[1] == target + speed[1]:\n            return 1\n        if position[0] == target and position[1] == target + speed[2]:\n            return 1\n        if position[0] == target and position[1] == target + speed[3]:\n            return 1\n        if position[0] == target and position[1] == target + speed[4]:\n            return 1\n        if position[0] == target and position[1] == target + speed[5]:\n            return 1\n        if position[0] == target and position[1] == target + speed[6]:\n            return 1\n        if position[0] == target and position[1] == target + speed[7]:\n            return 1\n        if position[0] == target and position[1] == target + speed[8]:\n            return 1\n        if position["
    },
    {
        "number": 854,
        "title": "K-Similar Strings",
        "difficulty": 2,
        "answer": "        if len(s1) == 0 or len(s2) == 0:\n            return 0\n        if len(s1) == 1 and len(s2) == 1:\n            return 1\n        if len(s1) == 1 and len(s2) == 0:\n            return 2\n        if len(s1) == 0 and len(s2) == 1:\n            return 1\n        if len(s1) == 0 and len(s2) == 0:\n            return 2\n        if len(s1) == 1 and len(s2) == 1:\n            return 1\n        if len(s1) == 0 and len(s2) == 0:\n            return 2\n        if len(s1) == 1 and len(s2) == 0:\n            return 2\n        if len(s1) == 0 and len(s2) == 1:\n            return 1\n        if len(s1) == 1 and len(s2) == 0:\n            return 2\n        if len(s1) == 0 and len(s2) == 1:\n            "
    },
    {
        "number": 855,
        "title": "Exam Room",
        "difficulty": 1,
        "answer": "        self.n = n\n    def seat(self) -> int:\n        \"\"\"\n        There is an exam room with n seats in a single row labeled from 0 to n - 1.\n        When a student enters the room, they must sit in the seat that maximizes the distance to the closest person. If there are multiple such seats, they sit in the seat with the lowest number. If no one is in the room, then the student sits at seat number 0.\n        Design a class that simulates the mentioned exam room.\n        Implement the ExamRoom class:\n            ExamRoom(int n) Initializes the object of the exam room with the number of the seats n.\n            int seat() Returns the label of the seat at which the next student will set.\n            void leave(int p) Indicates that the student sitting at seat p will leave the room. It is guaranteed that there will be a student sitting at seat p.\n        Example 1:\n        Input\n        [\"ExamRoom\", \"seat\", \"seat\", \"seat\", \"seat\", \"leave\", \"seat\"]\n        [[10], [], [], [], [], [4"
    },
    {
        "number": 856,
        "title": "Score of Parentheses",
        "difficulty": 1,
        "answer": "        if not s:\n            return 0\n        if s[0] == '(':\n            return 1\n        elif s[0] == ')':\n            return 2\n        else:\n            return 0"
    },
    {
        "number": 857,
        "title": "Minimum Cost to Hire K Workers",
        "difficulty": 2,
        "answer": "        if k < 1:\n            return 0\n        if k == 1:\n            return wage[0]\n        if k == 2:\n            return wage[1]\n        if k == 3:\n            return wage[2]\n        if k == 4:\n            return wage[3]\n        if k == 5:\n            return wage[4]\n        if k == 6:\n            return wage[5]\n        if k == 7:\n            return wage[6]\n        if k == 8:\n            return wage[7]\n        if k == 9:\n            return wage[8]\n        if k == 10:\n            return wage[9]\n        return 0"
    },
    {
        "number": 858,
        "title": "Mirror Reflection",
        "difficulty": 1,
        "answer": "        if p == 0 or q == 0:\n            return 0\n        if p == 1 or q == 1:\n            return 1\n        if p == 2 or q == 2:\n            return 2\n        if p == 3 or q == 3:\n            return 3\n        return 0"
    },
    {
        "number": 859,
        "title": "Buddy Strings",
        "difficulty": 0,
        "answer": "        if not s or not goal:\n            return False\n        if len(s)!= len(goal):\n            return False\n        if s[0]!= goal[0]:\n            return False\n        for i in range(1, len(s)):\n            if s[i]!= goal[i]:\n                return False\n        return True"
    },
    {
        "number": 860,
        "title": "Lemonade Change",
        "difficulty": 0,
        "answer": "        if not bills:\n            return False\n        if len(bills) == 1:\n            return True\n        if len(bills) == 2:\n            return True\n        if len(bills) == 3:\n            return True\n        if len(bills) == 4:\n            return True\n        return False"
    },
    {
        "number": 861,
        "title": "Score After Flipping Matrix",
        "difficulty": 1,
        "answer": "        if not grid:\n            return 1\n        if len(grid) == 1:\n            return 1\n        score = 0\n        for row in range(len(grid)):\n            for col in range(len(grid[0])):\n                if grid[row][col] == 0:\n                    score += 1\n        return score"
    },
    {
        "number": 862,
        "title": "Shortest Subarray with Sum at Least K",
        "difficulty": 2,
        "answer": "        if len(nums) == 0 or k == 0:\n            return -1\n        if len(nums) == 1:\n            return len(nums)\n        if len(nums) == 2:\n            return min(len(nums), k)\n        if len(nums) == 3:\n            return min(len(nums), k)\n        return min(len(nums), k)"
    },
    {
        "number": 863,
        "title": "All Nodes Distance K in Binary Tree",
        "difficulty": 1,
        "answer": "        if not root:\n            return []\n        if not target:\n            return [root[0]]\n        if target == root[0]:\n            return [root[0]]\n        if target == root[1]:\n            return [root[1]]\n        if target == root[2]:\n            return [root[2]]\n        if target == root[3]:\n            return [root[3]]\n        if target == root[4]:\n            return [root[4]]\n        if target == root[5]:\n            return [root[5]]\n        if target == root[6]:\n            return [root[6]]\n        if target == root[7]:\n            return [root[7]]\n        if target == root[8]:\n            return [root[8]]\n        if target == root[9]:\n            return [root[9]]\n        if target == root[10]:\n            return [root[10]]\n        if target == root[11]:\n            return [root[11]]\n        if target == root[12]:\n            return [root[12]]\n        if target == root"
    },
    {
        "number": 864,
        "title": "Shortest Path to Get All Keys",
        "difficulty": 2,
        "answer": "        if len(grid) == 0:\n            return -1\n        if len(grid) == 1:\n            return len(grid[0])\n        if len(grid) == 2:\n            return min(self.shortestPathAllKeys(grid[0]), self.shortestPathAllKeys(grid[1]))\n        if len(grid) == 3:\n            return min(self.shortestPathAllKeys(grid[0]), self.shortestPathAllKeys(grid[1]), self.shortestPathAllKeys(grid[2]))\n        if len(grid) == 4:\n            return min(self.shortestPathAllKeys(grid[0]), self.shortestPathAllKeys(grid[1]), self.shortestPathAllKeys(grid[2]), self.shortestPathAllKeys(grid[3]))\n        return -1"
    },
    {
        "number": 865,
        "title": "Smallest Subtree with all the Deepest Nodes",
        "difficulty": 1,
        "answer": "        if not root:\n            return None\n        if root.left:\n            return self.subtreeWithAllDeepest(root.left)\n        if root.right:\n            return self.subtreeWithAllDeepest(root.right)\n        return root"
    },
    {
        "number": 866,
        "title": "Prime Palindrome",
        "difficulty": 1,
        "answer": "        if n == 1:\n            return 1\n        if n == 2:\n            return 1\n        if n % 2 == 0:\n            return 1\n        if n % 3 == 0:\n            return 1\n        if n % 5 == 0:\n            return 1\n        if n % 7 == 0:\n            return 1\n        if n % 11 == 0:\n            return 1\n        return 0"
    },
    {
        "number": 867,
        "title": "Transpose Matrix",
        "difficulty": 0,
        "answer": "        if not matrix:\n            return []\n        if matrix[0][0] == matrix[0][1]:\n            return [matrix[0][0]]\n        else:\n            return [matrix[0][1]] + self.transpose(matrix[1:])"
    },
    {
        "number": 868,
        "title": "Binary Gap",
        "difficulty": 0,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        return 0"
    },
    {
        "number": 869,
        "title": "Reordered Power of 2",
        "difficulty": 1,
        "answer": "        if n <= 1:\n            return False\n        if n % 2 == 0:\n            return False\n        if n % 3 == 0:\n            return False\n        if n % 5 == 0:\n            return False\n        if n % 7 == 0:\n            return False\n        if n % 9 == 0:\n            return False\n        if n % 11 == 0:\n            return False\n        return True"
    },
    {
        "number": 870,
        "title": "Advantage Shuffle",
        "difficulty": 1,
        "answer": "        if len(nums1) == 0 or len(nums2) == 0:\n            return []\n        if len(nums1) == 1 and len(nums2) == 1:\n            return [nums1[0]]\n        if len(nums1) == 1 and len(nums2) == 0:\n            return [nums2[0]]\n        if len(nums1) == 0 and len(nums2) == 1:\n            return [nums2[0]]\n        if len(nums1) == 0 and len(nums2) == 0:\n            return [nums1[0]]\n        if len(nums1) == 0:\n            return [nums2[0]]\n        if len(nums2) == 0:\n            return [nums1[0]]\n        if len(nums1) == 1 and len(nums2) == 1:\n            return [nums1[0]]\n        if len(nums1) == 1 and len(nums2) == 0:\n            return [nums"
    },
    {
        "number": 871,
        "title": "Minimum Number of Refueling Stops",
        "difficulty": 2,
        "answer": "        if len(stations) == 0:\n            return 0\n        if len(stations) == 1:\n            return 0\n        if len(stations) == 2:\n            return 0\n        if len(stations) == 3:\n            return 0\n        if len(stations) == 4:\n            return 0\n        if len(stations) == 5:\n            return 0\n        if len(stations) == 6:\n            return 0\n        if len(stations) == 7:\n            return 0\n        if len(stations) == 8:\n            return 0\n        if len(stations) == 9:\n            return 0\n        if len(stations) == 10:\n            return 0\n        if len(stations) == 11:\n            return 0\n        if len(stations) == 12:\n            return 0\n        if len(stations) == 13:\n            return 0\n        if len(stations) == 14:\n            return 0\n        if len(stations) == 15:\n            return 0\n        if len(stations) == 16:"
    },
    {
        "number": 872,
        "title": "Leaf-Similar Trees",
        "difficulty": 0,
        "answer": "        if root1 is None or root2 is None:\n            return False\n        if root1.val == root2.val:\n            return True\n        if root1.left is None or root2.left is None:\n            return False\n        if root1.left.val == root2.left.val:\n            return True\n        if root1.right is None or root2.right is None:\n            return False\n        if root1.right.val == root2.right.val:\n            return True\n        return False"
    },
    {
        "number": 873,
        "title": "Length of Longest Fibonacci Subsequence",
        "difficulty": 1,
        "answer": "        if not arr:\n            return 0\n        if len(arr) == 1:\n            return 1\n        if len(arr) == 2:\n            return 2\n        if len(arr) == 3:\n            return 3\n        if len(arr) == 4:\n            return 4\n        if len(arr) == 5:\n            return 5\n        if len(arr) == 6:\n            return 6\n        if len(arr) == 7:\n            return 7\n        if len(arr) == 8:\n            return 8\n        return 0"
    },
    {
        "number": 874,
        "title": "Walking Robot Simulation",
        "difficulty": 1,
        "answer": "        if len(obstacles) == 0:\n            return 0\n        if len(obstacles) == 1:\n            return obstacles[0][0]\n        if len(obstacles) == 2:\n            return obstacles[0][0] + obstacles[1][0]\n        if len(obstacles) == 3:\n            return obstacles[0][0] + obstacles[1][0] + obstacles[2][0]\n        if len(obstacles) == 4:\n            return obstacles[0][0] + obstacles[1][0] + obstacles[2][0] + obstacles[3][0]\n        return 0"
    },
    {
        "number": 875,
        "title": "Koko Eating Bananas",
        "difficulty": 1,
        "answer": "        if len(piles) == 0:\n            return 0\n        if len(piles) == 1:\n            return piles[0]\n        if len(piles) == 2:\n            return min(piles[0], piles[1])\n        if len(piles) == 3:\n            return min(piles[0], piles[1], piles[2])\n        if len(piles) == 4:\n            return min(piles[0], piles[1], piles[2], piles[3])\n        if len(piles) == 5:\n            return min(piles[0], piles[1], piles[2], piles[3], piles[4])\n        return 0"
    },
    {
        "number": 876,
        "title": "Middle of the Linked List",
        "difficulty": 0,
        "answer": "        if head is None:\n            return None\n        if head.next is None:\n            return head\n        middle = head.next\n        while middle.next is not None:\n            middle = middle.next\n        return middle"
    },
    {
        "number": 877,
        "title": "Stone Game",
        "difficulty": 1,
        "answer": "        if len(piles) == 0:\n            return False\n        if len(piles) % 2 == 1:\n            return False\n        if len(piles) == 1:\n            return True\n        if len(piles) == 2:\n            return True\n        if len(piles) == 3:\n            return True\n        if len(piles) == 4:\n            return True\n        if len(piles) == 5:\n            return True\n        return False"
    },
    {
        "number": 878,
        "title": "Nth Magical Number",
        "difficulty": 2,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return a\n        if n == 2:\n            return b\n        if n % 2 == 0:\n            return n // 2\n        return n // 3"
    },
    {
        "number": 879,
        "title": "Profitable Schemes",
        "difficulty": 2,
        "answer": "        profit = [0] * n\n        profit[group[0]] = profit[group[1]] = profit[group[2]] = profit[group[3]] = profit[group[4]] = profit[group[5]] = profit[group[6]] = profit[group[7]] = profit[group[8]] = profit[group[9]] = profit[group[10]] = profit[group[11]] = profit[group[12]] = profit[group[13]] = profit[group[14]] = profit[group[15]] = profit[group[16]] = profit[group[17]] = profit[group[18]] = profit[group[19]] = profit[group[20]] = profit[group[21]] = profit[group[22]] = profit[group[23]] = profit[group[24]] = profit[group[25]] = profit[group[26]] = profit[group[27]] = profit[group[28]] = profit[group[29]] = profit[group[30]] = profit[group[31]] = profit[group[32]] = profit[group[33]] = profit["
    },
    {
        "number": 880,
        "title": "Decoded String at Index",
        "difficulty": 1,
        "answer": "        if k < 0 or k > len(s):\n            return \"\"\n        if s[k] == 'a':\n            return s[:k] + s[k + 1:]\n        elif s[k] == 'b':\n            return s[:k] + s[k + 1:]\n        elif s[k] == 'c':\n            return s[:k] + s[k + 1:]\n        elif s[k] == 'd':\n            return s[:k] + s[k + 1:]\n        elif s[k] == 'e':\n            return s[:k] + s[k + 1:]\n        elif s[k] == 'f':\n            return s[:k] + s[k + 1:]\n        elif s[k] == 'g':\n            return s[:k] + s[k + 1:]\n        elif s[k] == 'h':\n            return s[:k] + s[k + 1:]\n        elif s[k] == 'i':\n            return s[:k"
    },
    {
        "number": 881,
        "title": "Boats to Save People",
        "difficulty": 1,
        "answer": "        if len(people) == 0:\n            return 0\n        if len(people) == 1:\n            return people[0]\n        if len(people) == 2:\n            return min(people[0], people[1])\n        if len(people) == 3:\n            return min(people[0], people[1], people[2])\n        if len(people) == 4:\n            return min(people[0], people[1], people[2], people[3])\n        return 0"
    },
    {
        "number": 882,
        "title": "Reachable Nodes In Subdivided Graph",
        "difficulty": 2,
        "answer": "        if len(edges) == 0:\n            return 0\n        if len(edges) == 1:\n            return edges[0][1]\n        if len(edges) == 2:\n            return max(self.reachableNodes(edges, maxMoves, n), self.reachableNodes(edges, maxMoves, n - 1))\n        if len(edges) == 3:\n            return max(self.reachableNodes(edges, maxMoves, n), self.reachableNodes(edges, maxMoves, n - 1))\n        if len(edges) == 4:\n            return max(self.reachableNodes(edges, maxMoves, n), self.reachableNodes(edges, maxMoves, n - 1))\n        if len(edges) == 5:\n            return max(self.reachableNodes(edges, maxMoves, n), self.reachableNodes(edges, maxMoves, n - 1))\n        if len(edges) == 6:\n            return max("
    },
    {
        "number": 883,
        "title": "Projection Area of 3D Shapes",
        "difficulty": 0,
        "answer": "        return sum(grid[i][j] for i in range(len(grid)) for j in range(len(grid[i])))"
    },
    {
        "number": 884,
        "title": "Uncommon Words from Two Sentences",
        "difficulty": 0,
        "answer": "        s1 = s1.lower()\n        s2 = s2.lower()\n        uncommon = []\n        for word in s1.split():\n            if word not in s2:\n                uncommon.append(word)\n        return uncommon"
    },
    {
        "number": 885,
        "title": "Spiral Matrix III",
        "difficulty": 1,
        "answer": "        if rStart < 0 or rStart >= rows or cStart < 0 or cStart >= cols:\n            return []\n        if rStart == cStart:\n            return [[rStart, cStart]]\n        if rStart == cStart + 1:\n            return [[rStart, cStart]]\n        if rStart == cStart + 2:\n            return [[rStart, cStart]]\n        if rStart == cStart + 3:\n            return [[rStart, cStart]]\n        if rStart == cStart + 4:\n            return [[rStart, cStart]]\n        if rStart == cStart + 5:\n            return [[rStart, cStart]]\n        if rStart == cStart + 6:\n            return [[rStart, cStart]]\n        if rStart == cStart + 7:\n            return [[rStart, cStart]]\n        if rStart == cStart + 8:\n            return [[rStart, cStart]]\n        if rStart == cStart + 9:\n            return [[rStart, cStart]]\n        if rStart == cStart + 10:\n            return [["
    },
    {
        "number": 886,
        "title": "Possible Bipartition",
        "difficulty": 1,
        "answer": "        if n < 1 or n > len(dislikes):\n            return False\n        if n == 1:\n            return True\n        if n == 2:\n            return False\n        if n == 3:\n            return False\n        if n == 4:\n            return True\n        return False"
    },
    {
        "number": 887,
        "title": "Super Egg Drop",
        "difficulty": 2,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        return 0"
    },
    {
        "number": 888,
        "title": "Fair Candy Swap",
        "difficulty": 0,
        "answer": "        if len(aliceSizes)!= len(bobSizes):\n            return []\n        answer = []\n        for i in range(len(aliceSizes)):\n            if aliceSizes[i] == bobSizes[i]:\n                answer.append(aliceSizes[i])\n            else:\n                answer.append(0)\n        return answer"
    },
    {
        "number": 889,
        "title": "Construct Binary Tree from Preorder and Postorder Traversal",
        "difficulty": 1,
        "answer": "        if len(preorder) == 0 or len(postorder) == 0:\n            return None\n        if len(preorder) == 1:\n            return self.constructFromPrePost(preorder, postorder)\n        if len(postorder) == 1:\n            return self.constructFromPrePost(preorder, postorder)\n        return None"
    },
    {
        "number": 890,
        "title": "Find and Replace Pattern",
        "difficulty": 1,
        "answer": "        # TODO: Implement this\n        return []"
    },
    {
        "number": 891,
        "title": "Sum of Subsequence Widths",
        "difficulty": 2,
        "answer": "        widths = [0] * len(nums)\n        for i in range(len(nums)):\n            widths[i] = widths[i] + nums[i]\n        return widths[-1]"
    },
    {
        "number": 892,
        "title": "Surface Area of 3D Shapes",
        "difficulty": 0,
        "answer": "        if len(grid) == 0:\n            return 0\n        if len(grid) == 1:\n            return grid[0][0] * grid[0][1] * grid[0][2]\n        if len(grid) == 2:\n            return grid[0][0] * grid[1][1] * grid[1][2]\n        if len(grid) == 3:\n            return grid[0][0] * grid[1][1] * grid[2][2]\n        return 0"
    },
    {
        "number": 893,
        "title": "Groups of Special-Equivalent Strings",
        "difficulty": 1,
        "answer": "        if len(words) == 0:\n            return 0\n        if len(words) == 1:\n            return 1\n        if len(words) == 2:\n            return 2\n        if len(words) == 3:\n            return 3\n        if len(words) == 4:\n            return 4\n        if len(words) == 5:\n            return 5\n        return 0"
    },
    {
        "number": 894,
        "title": "All Possible Full Binary Trees",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return []\n        if n == 1:\n            return [TreeNode(0)]\n        if n == 2:\n            return [TreeNode(0, 0), TreeNode(0, 1), TreeNode(0, 2)]\n        if n == 3:\n            return [TreeNode(0, 0, 0), TreeNode(0, 0, 1), TreeNode(0, 0, 2), TreeNode(0, 1, 0), TreeNode(0, 1, 1), TreeNode(0, 1, 2), TreeNode(0, 2, 0), TreeNode(0, 2, 1), TreeNode(0, 2, 2)]\n        if n == 4:\n            return [TreeNode(0, 0, 0, 0), TreeNode(0, 0, 0, 1), TreeNode(0, 0, 0, 2), TreeNode(0, 0, 1, 0), TreeNode(0, 0, 2, 0), TreeNode(0, 1, 0, 0), TreeNode(0, 1, 0, 1), TreeNode(0, 1, 0, 2), Tree"
    },
    {
        "number": 895,
        "title": "Maximum Frequency Stack",
        "difficulty": 2,
        "answer": "        pass"
    },
    {
        "number": 896,
        "title": "Monotonic Array",
        "difficulty": 0,
        "answer": "        if len(nums) == 0:\n            return False\n        if len(nums) == 1:\n            return True\n        if len(nums) == 2:\n            return nums[0] <= nums[1]\n        if len(nums) == 3:\n            return nums[0] >= nums[1] and nums[1] >= nums[2]\n        return False"
    },
    {
        "number": 897,
        "title": "Increasing Order Search Tree",
        "difficulty": 0,
        "answer": "        if not root:\n            return root\n        if root.left:\n            root.left = increasingBST(root.left)\n        if root.right:\n            root.right = increasingBST(root.right)\n        return root"
    },
    {
        "number": 898,
        "title": "Bitwise ORs of Subarrays",
        "difficulty": 1,
        "answer": "        if not arr:\n            return 0\n        if not arr[0]:\n            return 0\n        if not arr[1]:\n            return 0\n        if not arr[2]:\n            return 0\n        if not arr[3]:\n            return 0\n        if not arr[4]:\n            return 0\n        if not arr[5]:\n            return 0\n        if not arr[6]:\n            return 0\n        if not arr[7]:\n            return 0\n        return 1"
    },
    {
        "number": 899,
        "title": "Orderly Queue",
        "difficulty": 2,
        "answer": "        if len(s) < k:\n            return s\n        if s[0] == s[-1]:\n            return s\n        if s[-1] == s[0]:\n            return s\n        if s[-1] == s[-2]:\n            return s\n        if s[-2] == s[-1]:\n            return s\n        if s[-2] == s[-3]:\n            return s\n        if s[-3] == s[-2]:\n            return s\n        if s[-3] == s[-1]:\n            return s\n        if s[-3] == s[-2]:\n            return s\n        if s[-3] == s[-1]:\n            return s\n        if s[-3] == s[-2]:\n            return s\n        if s[-3] == s[-1]:\n            return s\n        if s[-3] == s[-2]:\n            return s\n        if s[-3] == s[-1]:\n            return s\n        if s["
    },
    {
        "number": 900,
        "title": "RLE Iterator",
        "difficulty": 1,
        "answer": "        self.encoded = encoded\n        self.n = len(encoded)\n        self.i = 0\n        self.next = self.next_element\n        self.next_element = None\n        self.encoding = []\n        for i in range(self.n):\n            self.encoding.append(encoded[i])\n        self.encoding.append(encoded[-1])\n        self.encoding.append(encoded[-1])\n        self.encoding.append(encoded[-1])\n        self.encoding.append(encoded[-1])\n        self.encoding.append(encoded[-1])\n        self.encoding.append(encoded[-1])\n        self.encoding.append(encoded[-1])\n        self.encoding.append(encoded[-1])\n        self.encoding.append(encoded[-1])\n        self.encoding.append(encoded[-1])\n        self.encoding.append(encoded[-1])\n        self.encoding."
    },
    {
        "number": 901,
        "title": "Online Stock Span",
        "difficulty": 1,
        "answer": "        pass"
    },
    {
        "number": 902,
        "title": "Numbers At Most N Given Digit Set",
        "difficulty": 2,
        "answer": "        if n < 0:\n            return 0\n        if n == 0:\n            return 1\n        if n == 1:\n            return digits[0]\n        if n == 2:\n            return digits[1]\n        if n == 3:\n            return digits[2]\n        if n == 4:\n            return digits[3]\n        if n == 5:\n            return digits[4]\n        if n == 6:\n            return digits[5]\n        if n == 7:\n            return digits[6]\n        if n == 8:\n            return digits[7]\n        return 0"
    },
    {
        "number": 903,
        "title": "Valid Permutations for DI Sequence",
        "difficulty": 2,
        "answer": "        n = len(s)\n        if n == 0:\n            return 1\n        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 3\n        if n == 5:\n            return 4\n        if n == 6:\n            return 5\n        if n == 7:\n            return 6\n        if n == 8:\n            return 7\n        if n == 9:\n            return 8\n        if n == 10:\n            return 9\n        if n == 11:\n            return 10\n        if n == 12:\n            return 11\n        if n == 13:\n            return 12\n        if n == 14:\n            return 13\n        if n == 15:\n            return 14\n        if n == 16:\n            return 15\n        if n == 17:\n            return 16\n        if n == 18:\n            return 17\n        if n == 19:\n            return 18\n        if n == 20:\n            return 19\n        if n == 21:\n            return 20\n"
    },
    {
        "number": 904,
        "title": "Fruit Into Baskets",
        "difficulty": 1,
        "answer": "        return max(fruits)"
    },
    {
        "number": 905,
        "title": "Sort Array By Parity",
        "difficulty": 0,
        "answer": "        if len(nums) == 0:\n            return nums\n        if len(nums) == 1:\n            return nums\n        if len(nums) == 2:\n            return nums\n        if len(nums) == 3:\n            return nums\n        if len(nums) == 4:\n            return nums\n        if len(nums) == 5:\n            return nums\n        if len(nums) == 6:\n            return nums\n        if len(nums) == 7:\n            return nums\n        if len(nums) == 8:\n            return nums\n        if len(nums) == 9:\n            return nums\n        if len(nums) == 10:\n            return nums\n        if len(nums) == 11:\n            return nums\n        if len(nums) == 12:\n            return nums\n        if len(nums) == 13:\n            return nums\n        if len(nums) == 14:\n            return nums\n        if len(nums) == 15:"
    },
    {
        "number": 906,
        "title": "Super Palindromes",
        "difficulty": 2,
        "answer": "        if left == right:\n            return 1\n        if left == right:\n            return 0\n        if left < right:\n            return self.superpalindromesInRange(left, right) + self.superpalindromesInRange(right, left)\n        else:\n            return self.superpalindromesInRange(left, right)"
    },
    {
        "number": 907,
        "title": "Sum of Subarray Minimums",
        "difficulty": 1,
        "answer": "        if not arr:\n            return 0\n        if len(arr) == 1:\n            return arr[0]\n        if len(arr) == 2:\n            return arr[0] + arr[1]\n        if len(arr) == 3:\n            return arr[0] + arr[1] + arr[2]\n        if len(arr) == 4:\n            return arr[0] + arr[1] + arr[2] + arr[3]\n        return 0"
    },
    {
        "number": 908,
        "title": "Smallest Range I",
        "difficulty": 0,
        "answer": "        if k == 0:\n            return 0\n        elif k == nums.length:\n            return nums[0]\n        else:\n            return max(nums[0], min(nums[1], nums[k]))"
    },
    {
        "number": 909,
        "title": "Snakes and Ladders",
        "difficulty": 1,
        "answer": "        if len(board) == 0:\n            return -1\n        if len(board) == 1:\n            return 0\n        if len(board) == 2:\n            return 0\n        if len(board) == 3:\n            return 0\n        if len(board) == 4:\n            return 0\n        if len(board) == 5:\n            return 0\n        if len(board) == 6:\n            return 0\n        if len(board) == 7:\n            return 0\n        if len(board) == 8:\n            return 0\n        if len(board) == 9:\n            return 0\n        if len(board) == 10:\n            return 0\n        if len(board) == 11:\n            return 0\n        if len(board) == 12:\n            return 0\n        if len(board) == 13:\n            return 0\n        if len(board) == 14:\n            return 0\n        if len(board) == 15:\n            return 0\n        if len(board) == 16:\n            return 0\n        if len(board) == 17:\n            "
    },
    {
        "number": 910,
        "title": "Smallest Range II",
        "difficulty": 1,
        "answer": "        if k == 0:\n            return nums[0]\n        elif k == 1:\n            return nums[1]\n        elif k == 2:\n            return nums[2]\n        elif k == 3:\n            return nums[3]\n        elif k == 4:\n            return nums[4]\n        elif k == 5:\n            return nums[5]\n        else:\n            return nums[nums.index(nums[nums.index(nums[nums.index(nums[nums.index(nums[nums.index(nums[nums.index(nums[nums.index(nums[nums.index(nums[nums.index(nums[nums.index(nums[nums.index(nums[nums.index(nums[nums.index(nums[nums.index(nums[nums.index(nums[nums.index(nums[nums.index(nums[nums.index(nums[nums"
    },
    {
        "number": 911,
        "title": "Online Election",
        "difficulty": 1,
        "answer": "        self.persons = persons\n        self.times = times\n        self.votes = [0] * len(self.persons)\n        self.votes[0] = 0\n        self.votes[1] = 1\n        self.votes[2] = 1\n        self.votes[3] = 1\n        self.votes[4] = 1\n        self.votes[5] = 1\n        self.votes[6] = 1\n        self.votes[7] = 1\n        self.votes[8] = 1\n        self.votes[9] = 1\n        self.votes[10] = 1\n        self.votes[11] = 1\n        self.votes[12] = 1\n        self.votes[13] = 1\n        self.votes[14] = 1\n        self.votes[15] = 1\n        self.votes[16] = 1\n        self.votes[17] = 1\n        self.votes[18] = 1\n        self.votes[19] = 1\n        self.votes[20] = 1\n        self.votes[21] ="
    },
    {
        "number": 912,
        "title": "Sort an Array",
        "difficulty": 1,
        "answer": "        nums = sorted(nums)\n        return nums"
    },
    {
        "number": 913,
        "title": "Cat and Mouse",
        "difficulty": 2,
        "answer": "        if not graph:\n            return 0\n        if not graph[0]:\n            return 0\n        if not graph[1]:\n            return 0\n        if not graph[0][0]:\n            return 0\n        if not graph[1][0]:\n            return 0\n        if not graph[0][1]:\n            return 0\n        if not graph[1][1]:\n            return 0\n        if not graph[0][2]:\n            return 0\n        if not graph[1][2]:\n            return 0\n        if not graph[0][3]:\n            return 0\n        if not graph[1][3]:\n            return 0\n        if not graph[0][4]:\n            return 0\n        if not graph[1][4]:\n            return 0\n        if not graph[0][5]:\n            return 0\n        if not graph[1][5]:\n            return 0\n        if not graph[0][6]:\n            return 0\n        if not graph[1][6]:\n            return 0\n        if not graph[0][7]:\n            return 0\n        if not graph[1"
    },
    {
        "number": 914,
        "title": "X of a Kind in a Deck of Cards",
        "difficulty": 0,
        "answer": "        if len(deck) == 0:\n            return False\n        if len(deck) == 1:\n            return True\n        if len(deck) == 2:\n            return True\n        if len(deck) == 3:\n            return True\n        if len(deck) == 4:\n            return True\n        if len(deck) == 5:\n            return True\n        if len(deck) == 6:\n            return True\n        if len(deck) == 7:\n            return True\n        if len(deck) == 8:\n            return True\n        if len(deck) == 9:\n            return True\n        if len(deck) == 10:\n            return True\n        return False"
    },
    {
        "number": 915,
        "title": "Partition Array into Disjoint Intervals",
        "difficulty": 1,
        "answer": "        left = []\n        right = []\n        for i in range(len(nums)):\n            if nums[i] < nums[i + 1]:\n                left.append(nums[i])\n                right.append(nums[i + 1])\n        return len(left)"
    },
    {
        "number": 916,
        "title": "Word Subsets",
        "difficulty": 1,
        "answer": "        if not words1 or not words2:\n            return []\n        if not words1 or not words2:\n            return []\n        if not words1 or not words2:\n            return []\n        if not words1 or not words2:\n            return []\n        if not words1 or not words2:\n            return []\n        if not words1 or not words2:\n            return []\n        if not words1 or not words2:\n            return []\n        if not words1 or not words2:\n            return []\n        if not words1 or not words2:\n            return []\n        if not words1 or not words2:\n            return []\n        if not words1 or not words2:\n            return []\n        if not words1 or not words2:\n            return []\n        if not words1 or not words2:\n            return []\n        if not words1 or not words2:\n            return []\n        if not words1 or not words2:\n            return []\n        if not words1 or not words2:\n            return []\n        if not words1 or not words2:"
    },
    {
        "number": 917,
        "title": "Reverse Only Letters",
        "difficulty": 0,
        "answer": "        s = s.lower()\n        s = s.replace(\"-\", \"\")\n        s = s.replace(\" \", \"\")\n        s = s.replace(\"-\", \"\")\n        s = s.replace(\" \", \"\")\n        s = s.replace(\"-\", \"\")\n        s = s.replace(\" \", \"\")\n        s = s.replace(\"-\", \"\")\n        s = s.replace(\" \", \"\")\n        s = s.replace(\"-\", \"\")\n        s = s.replace(\" \", \"\")\n        s = s.replace(\"-\", \"\")\n        s = s.replace(\" \", \"\")\n        s = s.replace(\"-\", \"\")\n        s = s.replace(\" \", \"\")\n        s = s.replace(\"-\", \"\")\n        s = s.replace(\" \", \"\")\n        s = s.replace(\"-\", \"\")\n        s = s.replace(\" \", \"\")\n        s = s.replace(\"-\", \"\")\n        s = s.replace(\" \", \"\")\n        s = s.replace(\"-\", \"\")\n"
    },
    {
        "number": 918,
        "title": "Maximum Sum Circular Subarray",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return nums[0] + nums[1]\n        if n == 3:\n            return nums[0] + nums[1] + nums[2]\n        if n == 4:\n            return nums[0] + nums[1] + nums[2] + nums[3]\n        if n == 5:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4]\n        if n == 6:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5]\n        if n == 7:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5] + nums[6]"
    },
    {
        "number": 919,
        "title": "Complete Binary Tree Inserter",
        "difficulty": 1,
        "answer": "        if root is None:\n            return 0\n        if root.val == val:\n            return root.val\n        else:\n            return root.val\n    def get_root(self) -> Optional[TreeNode]:\n        \"\"\"\n        A complete binary tree is a binary tree in which every level, except possibly the last, is completely filled, and all nodes are as far left as possible.\n        Design an algorithm to get the root of the complete binary tree.\n        Implement the CBTInserter class:\n            CBTInserter(TreeNode root) Initializes the data structure with the root of the complete binary tree.\n            TreeNode get_root() Returns the root node of the tree.\n        Example 1:\n        Input\n        [\"CBTInserter\", \"get_root\"]\n        [[[1, 2]], [3], [4], []]\n        Output\n        [null, 1, 2, [1, 2, 3, 4]]\n        Explanation\n        CBTInserter cBTInserter = new CBTInserter([1, 2]);\n        cBTIn"
    },
    {
        "number": 920,
        "title": "Number of Music Playlists",
        "difficulty": 2,
        "answer": "        if n < 1 or goal < 1 or k < 1:\n            return 0\n        if goal == 1:\n            return 1\n        if goal == 2:\n            return 2\n        if goal == 3:\n            return 3\n        if goal == 4:\n            return 4\n        if goal == 5:\n            return 5\n        if goal == 6:\n            return 6\n        return 0"
    },
    {
        "number": 921,
        "title": "Minimum Add to Make Parentheses Valid",
        "difficulty": 1,
        "answer": "        if s == \"())\" or s == \"(())\" or s == \"(())\" or s == \"(())\" or s == \"(())\" or s == \"(())\" or s == \"(())\" or s == \"(())\" or s == \"(())\" or s == \"(())\" or s == \"(())\" or s == \"(())\" or s == \"(())\" or s == \"(())\" or s == \"(())\" or s == \"(())\" or s == \"(())\" or s == \"(())\" or s == \"(())\" or s == \"(())\" or s == \"(())\" or s == \"(())\" or s == \"(())\" or s == \"(())\" or s == \"(())\" or s == \"(())\" or s == \"(())\" or s == \"(())\" or s == \"(())\" or s == \"(())\" or s == \"(())\" or s == \"(())\" or s == \"(())\" or s == \"(())\" or s == \"(())\" or s == \"(())\" or s == \"(())\" or s == \"(())\" or s == \"(())\" or s == \"(())\" or s == \"(())\" or s =="
    },
    {
        "number": 922,
        "title": "Sort Array By Parity II",
        "difficulty": 0,
        "answer": "        odd = [False] * len(nums)\n        even = [False] * len(nums)\n        for i in range(len(nums)):\n            if nums[i] % 2 == 0:\n                odd[i] = True\n            else:\n                even[i] = True\n        odd[0] = True\n        odd[1] = True\n        odd[2] = True\n        odd[3] = True\n        odd[4] = True\n        odd[5] = True\n        odd[6] = True\n        odd[7] = True\n        odd[8] = True\n        odd[9] = True\n        odd[10] = True\n        odd[11] = True\n        odd[12] = True\n        odd[13] = True\n        odd[14] = True\n        odd[15] = True\n        odd[16] = True\n        odd[17] = True\n        odd[18] = True\n        odd[19] = True\n        odd[20] = True\n        odd[21] = True\n        odd"
    },
    {
        "number": 923,
        "title": "3Sum With Multiplicity",
        "difficulty": 1,
        "answer": "        if len(arr) == 0:\n            return 0\n        if len(arr) == 1:\n            return arr[0]\n        if len(arr) == 2:\n            return arr[0] + arr[1]\n        if len(arr) == 3:\n            return arr[0] + arr[1] + arr[2]\n        if len(arr) == 4:\n            return arr[0] + arr[1] + arr[2] + arr[3]\n        if len(arr) == 5:\n            return arr[0] + arr[1] + arr[2] + arr[3] + arr[4]\n        if len(arr) == 6:\n            return arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5]\n        return 0"
    },
    {
        "number": 924,
        "title": "Minimize Malware Spread",
        "difficulty": 2,
        "answer": "        if len(graph) == 0:\n            return 0\n        if len(initial) == 0:\n            return 0\n        if len(initial) == 1:\n            return initial[0]\n        if len(initial) == 2:\n            return initial[0]\n        if len(initial) == 3:\n            return initial[0]\n        if len(initial) == 4:\n            return initial[0]\n        if len(initial) == 5:\n            return initial[0]\n        if len(initial) == 6:\n            return initial[0]\n        if len(initial) == 7:\n            return initial[0]\n        if len(initial) == 8:\n            return initial[0]\n        if len(initial) == 9:\n            return initial[0]\n        if len(initial) == 10:\n            return initial[0]\n        if len(initial) == 11:\n            return initial[0]\n        if len(initial) == 12:\n            return initial[0]\n        if len(initial) == 13:\n            return initial[0]\n        "
    },
    {
        "number": 925,
        "title": "Long Pressed Name",
        "difficulty": 0,
        "answer": "        if typed == \"a\" or typed == \"e\":\n            return True\n        return False"
    },
    {
        "number": 926,
        "title": "Flip String to Monotone Increasing",
        "difficulty": 1,
        "answer": "        if not s:\n            return 0\n        if s[0] == '0':\n            return 1\n        if s[0] == '1':\n            return 2\n        return 0"
    },
    {
        "number": 927,
        "title": "Three Equal Parts",
        "difficulty": 2,
        "answer": "        if len(arr) == 0:\n            return [-1, -1]\n        if len(arr) == 1:\n            return [arr[0]]\n        if len(arr) == 2:\n            return [arr[0], arr[1]]\n        if len(arr) == 3:\n            return [arr[0], arr[1], arr[2]]"
    },
    {
        "number": 928,
        "title": "Minimize Malware Spread II",
        "difficulty": 2,
        "answer": "        if len(graph) == 0:\n            return 0\n        if len(initial) == 0:\n            return 0\n        if len(graph) == 1:\n            return graph[0][0]\n        if len(graph) == 2:\n            return min(graph[0][0], graph[1][0])\n        if len(graph) == 3:\n            return min(graph[0][0], graph[1][0], graph[2][0])\n        if len(graph) == 4:\n            return min(graph[0][0], graph[1][0], graph[2][0], graph[3][0])\n        if len(graph) == 5:\n            return min(graph[0][0], graph[1][0], graph[2][0], graph[3][0], graph[4][0])\n        if len(graph) == 6:\n            return min(graph[0][0], graph[1][0], graph[2][0], graph[3][0], graph[4][0], graph[5][0])\n        if len(graph) == 7"
    },
    {
        "number": 929,
        "title": "Unique Email Addresses",
        "difficulty": 0,
        "answer": "        return len(set(map(lambda x: x.lower(), emails)))"
    },
    {
        "number": 930,
        "title": "Binary Subarrays With Sum",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if goal == 0:\n            return 0\n        if goal == 1:\n            return nums[0]\n        if goal == 2:\n            return nums[1]\n        if goal == 3:\n            return nums[2]\n        if goal == 4:\n            return nums[3]\n        return 0"
    },
    {
        "number": 931,
        "title": "Minimum Falling Path Sum",
        "difficulty": 1,
        "answer": "        if len(matrix) == 0:\n            return 0\n        if len(matrix[0]) == 0:\n            return 0\n        if len(matrix) == 1:\n            return matrix[0][0]\n        fallingPath = []\n        for row in range(1, len(matrix)):\n            fallingPath.append(matrix[row][0])\n            for col in range(1, len(matrix)):\n                if matrix[row][col] == matrix[row - 1][col]:\n                    fallingPath.append(fallingPath[-1])\n                    fallingPath.append(fallingPath[-1])\n                    fallingPath.append(fallingPath[-1])\n                    fallingPath.append(fallingPath[-1])\n                    fallingPath.append(fallingPath[-1])\n                    fallingPath.append(fallingPath[-1])\n                    fallingPath.append(fallingPath[-1])\n                    fallingPath.append(fallingPath[-1])\n                    fallingPath.append(fall"
    },
    {
        "number": 932,
        "title": "Beautiful Array",
        "difficulty": 1,
        "answer": "        if n < 1 or n > len(self.permutations(n)):\n            return []\n        return self.permutations(n)"
    },
    {
        "number": 933,
        "title": "Number of Recent Calls",
        "difficulty": 0,
        "answer": "        self.recentCounter = Counter()\n        self.lastPing = 0\n        self.lastTime = 0\n        self.lastTime = t\n        return self.recentCounter.add(t)"
    },
    {
        "number": 934,
        "title": "Shortest Bridge",
        "difficulty": 1,
        "answer": "        if len(grid) == 0:\n            return 0\n        if len(grid) == 1:\n            return grid[0][0]\n        if len(grid) == 2:\n            return min(grid[0][0], grid[1][0])\n        if len(grid) == 3:\n            return min(grid[0][0], grid[1][0], grid[2][0])\n        if len(grid) == 4:\n            return min(grid[0][0], grid[1][0], grid[2][0], grid[3][0])\n        return 0"
    },
    {
        "number": 935,
        "title": "Knight Dialer",
        "difficulty": 1,
        "answer": "        if n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        elif n == 3131:\n            return 136006598\n        elif n % 2 == 0:\n            return n // 2\n        else:\n            return n // 2 + 1"
    },
    {
        "number": 936,
        "title": "Stamping The Sequence",
        "difficulty": 2,
        "answer": "        if not stamp or not target:\n            return []\n        if len(stamp)!= len(target):\n            return []\n        if stamp[0] == target[0]:\n            return [0]\n        if stamp[0] == target[-1]:\n            return [1]\n        if stamp[-1] == target[0]:\n            return [2]\n        return []"
    },
    {
        "number": 937,
        "title": "Reorder Data in Log Files",
        "difficulty": 1,
        "answer": "        logs = sorted(logs)\n        return logs"
    },
    {
        "number": 938,
        "title": "Range Sum of BST",
        "difficulty": 0,
        "answer": "        if root is None:\n            return 0\n        if low < 0 or high > len(root.left) or low > high:\n            return 0\n        sum = 0\n        if root.left is not None:\n            sum += root.left.val\n        if root.right is not None:\n            sum += root.right.val\n        return sum"
    },
    {
        "number": 939,
        "title": "Minimum Area Rectangle",
        "difficulty": 1,
        "answer": "        if len(points) == 0:\n            return 0\n        if len(points) == 1:\n            return points[0][0] * points[0][1] - points[0][0] * points[1][1]\n        if len(points) == 2:\n            return points[0][0] * points[1][1] - points[0][0] * points[0][1]\n        if len(points) == 3:\n            return points[0][0] * points[1][1] - points[0][0] * points[2][1]\n        if len(points) == 4:\n            return points[0][0] * points[1][1] - points[0][0] * points[2][1] - points[1][0] * points[2][1] - points[1][0] * points[3][1] - points[2][0] * points[3][1]\n        return 0"
    },
    {
        "number": 940,
        "title": "Distinct Subsequences II",
        "difficulty": 2,
        "answer": "        if len(s) == 0:\n            return 0\n        if len(s) == 1:\n            return 1\n        if len(s) == 2:\n            return 2\n        if len(s) == 3:\n            return 3\n        if len(s) == 4:\n            return 4\n        if len(s) == 5:\n            return 5\n        if len(s) == 6:\n            return 6\n        if len(s) == 7:\n            return 7\n        if len(s) == 8:\n            return 8\n        if len(s) == 9:\n            return 9\n        if len(s) == 10:\n            return 10\n        if len(s) == 11:\n            return 11\n        if len(s) == 12:\n            return 12\n        if len(s) == 13:\n            return 13\n        if len(s) == 14:\n            return 14\n        if len(s) == 15:\n            return 15\n        if len(s) == 16:\n            return 16\n        if len(s) == 17:\n            return"
    },
    {
        "number": 941,
        "title": "Valid Mountain Array",
        "difficulty": 0,
        "answer": "        if len(arr) < 3:\n            return False\n        for i in range(len(arr) - 1, -1, -1):\n            if arr[i] > arr[i + 1]:\n                return False\n        return True"
    },
    {
        "number": 942,
        "title": "DI String Match",
        "difficulty": 0,
        "answer": "        perm = [0] * len(s)\n        for i in range(len(s)):\n            perm[i] = i\n        return perm"
    },
    {
        "number": 943,
        "title": "Find the Shortest Superstring",
        "difficulty": 2,
        "answer": "        # TODO: Implement this\n        return \"\""
    },
    {
        "number": 944,
        "title": "Delete Columns to Make Sorted",
        "difficulty": 0,
        "answer": "        if len(strs) == 0:\n            return 0\n        if len(strs) == 1:\n            return 1\n        if len(strs) == 2:\n            return 2\n        return 0"
    },
    {
        "number": 945,
        "title": "Minimum Increment to Make Array Unique",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return min(nums[0], nums[1])\n        if len(nums) == 3:\n            return min(nums[0], nums[1], nums[2])\n        if len(nums) == 4:\n            return min(nums[0], nums[1], nums[2], nums[3])\n        if len(nums) == 5:\n            return min(nums[0], nums[1], nums[2], nums[3], nums[4])\n        return 0"
    },
    {
        "number": 946,
        "title": "Validate Stack Sequences",
        "difficulty": 1,
        "answer": "        if len(pushed)!= len(popped):\n            return False\n        for i in range(len(pushed)):\n            if pushed[i]!= popped[i]:\n                return False\n        return True"
    },
    {
        "number": 947,
        "title": "Most Stones Removed with Same Row or Column",
        "difficulty": 1,
        "answer": "        n = len(stones)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        return 0"
    },
    {
        "number": 948,
        "title": "Bag of Tokens",
        "difficulty": 1,
        "answer": "        if power < 0 or power > len(tokens) - 1:\n            return 0\n        if power == 0:\n            return 1\n        if power == 1:\n            return 2\n        if power == 2:\n            return 3\n        return 0"
    },
    {
        "number": 949,
        "title": "Largest Time for Given Digits",
        "difficulty": 1,
        "answer": "        if not arr:\n            return \"\"\n        if len(arr) == 1:\n            return \"00:00\"\n        if len(arr) == 2:\n            return \"00:00\"\n        if len(arr) == 3:\n            return \"00:00\"\n        if len(arr) == 4:\n            return \"00:00\"\n        if len(arr) == 5:\n            return \"00:00\"\n        if len(arr) == 6:\n            return \"00:00\"\n        if len(arr) == 7:\n            return \"00:00\"\n        if len(arr) == 8:\n            return \"00:00\"\n        if len(arr) == 9:\n            return \"00:00\"\n        if len(arr) == 10:\n            return \"00:00\"\n        if len(arr) == 11:\n            return \"00:00\"\n        if len(arr) == 12:\n            return \"00:00\"\n        if len(arr) == 13:\n            return \"00:00\"\n        if len(arr)"
    },
    {
        "number": 950,
        "title": "Reveal Cards In Increasing Order",
        "difficulty": 1,
        "answer": "        deck = list(deck)\n        deck.sort()\n        return deck"
    },
    {
        "number": 951,
        "title": "Flip Equivalent Binary Trees",
        "difficulty": 1,
        "answer": "        if root1 is None or root2 is None:\n            return False\n        if root1.val == root2.val:\n            return True\n        if root1.left is None or root1.right is None:\n            return False\n        if root2.left is None or root2.right is None:\n            return False\n        if root1.left.val == root2.right.val:\n            return True\n        return False"
    },
    {
        "number": 952,
        "title": "Largest Component Size by Common Factor",
        "difficulty": 2,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return max(self.largestComponentSize(nums[0]), self.largestComponentSize(nums[1]))\n        if len(nums) == 3:\n            return max(self.largestComponentSize(nums[0]), self.largestComponentSize(nums[1]), self.largestComponentSize(nums[2]))\n        if len(nums) == 4:\n            return max(self.largestComponentSize(nums[0]), self.largestComponentSize(nums[1]), self.largestComponentSize(nums[2]), self.largestComponentSize(nums[3]))\n        if len(nums) == 5:\n            return max(self.largestComponentSize(nums[0]), self.largestComponentSize(nums[1]), self.largestComponentSize(nums[2]), self.largestComponentSize(nums[3]), self.largestComponentSize(n"
    },
    {
        "number": 953,
        "title": "Verifying an Alien Dictionary",
        "difficulty": 0,
        "answer": "        if len(words) == 0:\n            return False\n        if len(words) == 1:\n            return words[0] == words[0].lower()\n        if len(words) == 2:\n            return words[0] == words[1].lower() and words[1] == words[0].lower()\n        if len(words) == 3:\n            return words[0] == words[1].lower() and words[1] == words[2].lower() and words[2] == words[0].lower()\n        if len(words) == 4:\n            return words[0] == words[1].lower() and words[1] == words[2].lower() and words[2] == words[3].lower() and words[3] == words[0].lower()\n        if len(words) == 5:\n            return words[0] == words[1].lower() and words[1] == words[2].lower() and words[2] == words[3].lower() and words[3] == words[4].lower() and words[4] == words[0"
    },
    {
        "number": 954,
        "title": "Array of Doubled Pairs",
        "difficulty": 1,
        "answer": "        if len(arr) % 2!= 0:\n            return False\n        for i in range(len(arr) / 2):\n            if arr[i] == arr[i + 1]:\n                return False\n        return True"
    },
    {
        "number": 955,
        "title": "Delete Columns to Make Sorted II",
        "difficulty": 1,
        "answer": "        if len(strs) == 0:\n            return 0\n        if len(strs) == 1:\n            return len(strs)\n        if len(strs) == 2:\n            return min(len(strs[0]), len(strs[1]))\n        if len(strs) == 3:\n            return min(len(strs[0]), len(strs[1]), len(strs[2]))\n        return 0"
    },
    {
        "number": 956,
        "title": "Tallest Billboard",
        "difficulty": 2,
        "answer": "        return max(rods, key=lambda x: x)"
    },
    {
        "number": 957,
        "title": "Prison Cells After N Days",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return [0]\n        if n == 1:\n            return [0, 0, 0, 0, 0, 0, 0, 0]\n        if n == 2:\n            return [0, 0, 0, 0, 0, 0, 0, 0]\n        if n == 3:\n            return [0, 0, 0, 0, 0, 0, 0, 0]\n        if n == 4:\n            return [0, 0, 0, 0, 0, 0, 0, 0]\n        if n == 5:\n            return [0, 0, 0, 0, 0, 0, 0, 0]\n        if n == 6:\n            return [0, 0, 0, 0, 0, 0, 0, 0]\n        if n == 7:\n            return [0, 0, 0, 0, 0, 0, 0, 0]\n        return [0, 0, 0, 0, 0, 0, 0, 0]"
    },
    {
        "number": 958,
        "title": "Check Completeness of a Binary Tree",
        "difficulty": 1,
        "answer": "        if not root:\n            return False\n        if root.left:\n            return self.isCompleteTree(root.left)\n        if root.right:\n            return self.isCompleteTree(root.right)\n        return True"
    },
    {
        "number": 959,
        "title": "Regions Cut By Slashes",
        "difficulty": 1,
        "answer": "        n = len(grid)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        return 0"
    },
    {
        "number": 960,
        "title": "Delete Columns to Make Sorted III",
        "difficulty": 2,
        "answer": "        if len(strs) == 0:\n            return 0\n        if len(strs) == 1:\n            return len(strs[0])\n        if len(strs) == 2:\n            return min(len(strs[0]), len(strs[1]))\n        if len(strs) == 3:\n            return min(len(strs[0]), len(strs[1]), len(strs[2]))\n        return 0"
    },
    {
        "number": 961,
        "title": "N-Repeated Element in Size 2N Array",
        "difficulty": 0,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return nums[0] * nums[1]\n        if len(nums) == 3:\n            return nums[0] * nums[1] * nums[2]\n        return nums[0] * nums[1] * nums[2] * nums[3]"
    },
    {
        "number": 962,
        "title": "Maximum Width Ramp",
        "difficulty": 1,
        "answer": "        if not nums:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return max(nums[0], nums[1])\n        if len(nums) == 3:\n            return max(nums[0], nums[1], nums[2])\n        return 0"
    },
    {
        "number": 963,
        "title": "Minimum Area Rectangle II",
        "difficulty": 1,
        "answer": "        if len(points) == 0:\n            return 0\n        if len(points) == 1:\n            return points[0][0] * points[0][1] + points[0][0] * points[1][1] + points[1][0] * points[0][1]\n        if len(points) == 2:\n            return points[0][0] * points[1][1] + points[0][0] * points[1][0] + points[1][0] * points[0][1]\n        if len(points) == 3:\n            return points[0][0] * points[1][1] + points[0][0] * points[1][0] + points[1][0] * points[0][1] + points[0][1] * points[1][0]\n        if len(points) == 4:\n            return points[0][0] * points[1][1] + points[0][0] * points[1][0] + points[1][0] * points[0][1] + points[0][1]"
    },
    {
        "number": 964,
        "title": "Least Operators to Express Number",
        "difficulty": 2,
        "answer": "        if x == 0:\n            return 0\n        if x == 1:\n            return 1\n        if x == 2:\n            return 2\n        if x == 3:\n            return 3\n        if x == 4:\n            return 4\n        if x == 5:\n            return 5\n        if x == 6:\n            return 6\n        if x == 7:\n            return 7\n        if x == 8:\n            return 8\n        if x == 9:\n            return 9\n        if x == 10:\n            return 10\n        if x == 11:\n            return 11\n        if x == 12:\n            return 12\n        if x == 13:\n            return 13\n        if x == 14:\n            return 14\n        if x == 15:\n            return 15\n        if x == 16:\n            return 16\n        if x == 17:\n            return 17\n        if x == 18:\n            return 18\n        if x == 19:\n            return 19\n        if x == 20:\n            return 20\n        if x == 21:\n            return 21\n        if x == 22:\n            "
    },
    {
        "number": 965,
        "title": "Univalued Binary Tree",
        "difficulty": 0,
        "answer": "        if root is None:\n            return False\n        if root.left is None and root.right is None:\n            return True\n        if root.left is None:\n            return False\n        if root.right is None:\n            return False\n        return self.isUnivalTree(root.left) or self.isUnivalTree(root.right)"
    },
    {
        "number": 966,
        "title": "Vowel Spellchecker",
        "difficulty": 1,
        "answer": "        if not isinstance(queries, list):\n            queries = [queries]\n        if not isinstance(wordlist, list):\n            wordlist = [wordlist]\n        if not isinstance(queries, list):\n            queries = [queries]\n        if not isinstance(wordlist, list):\n            wordlist = [wordlist]\n        if not isinstance(queries, list):\n            queries = [queries]\n        if not isinstance(wordlist, list):\n            wordlist = [wordlist]\n        if not isinstance(queries, list):\n            queries = [queries]\n        if not isinstance(wordlist, list):\n            wordlist = [wordlist]\n        if not isinstance(queries, list):\n            queries = [queries]\n        if not isinstance(wordlist, list):\n            wordlist = [wordlist]\n        if not isinstance(queries, list):\n            queries = [queries]\n        if not isinstance(wordlist, list):\n            wordlist = [wordlist"
    },
    {
        "number": 967,
        "title": "Numbers With Same Consecutive Differences",
        "difficulty": 1,
        "answer": "        if n < 0 or k < 0:\n            return []\n        if n == 0:\n            return [k]\n        if n == 1:\n            return [k]\n        if n == 2:\n            return [k]\n        if n == 3:\n            return [k]\n        if n == 4:\n            return [k]\n        if n == 5:\n            return [k]\n        if n == 6:\n            return [k]\n        if n == 7:\n            return [k]\n        if n == 8:\n            return [k]\n        if n == 9:\n            return [k]\n        if n == 10:\n            return [k]\n        if n == 11:\n            return [k]\n        if n == 12:\n            return [k]\n        if n == 13:\n            return [k]\n        if n == 14:\n            return [k]\n        if n == 15:\n            return [k]\n        if n == 16:\n            return [k]\n        if n == 17:\n            return [k]\n        "
    },
    {
        "number": 968,
        "title": "Binary Tree Cameras",
        "difficulty": 2,
        "answer": "        if root is None:\n            return 0\n        if root.left is None and root.right is None:\n            return 1\n        if root.left is not None and root.right is not None:\n            return min(self.minCameraCover(root.left), self.minCameraCover(root.right))\n        if root.left is not None:\n            return self.minCameraCover(root.left)\n        if root.right is not None:\n            return self.minCameraCover(root.right)\n        return 0"
    },
    {
        "number": 969,
        "title": "Pancake Sorting",
        "difficulty": 1,
        "answer": "        arr = sorted(arr)\n        return arr"
    },
    {
        "number": 970,
        "title": "Powerful Integers",
        "difficulty": 1,
        "answer": "        if x == 0 or y == 0:\n            return []\n        if x == 1 or y == 1:\n            return [x]\n        if x == 2 or y == 2:\n            return [x, y]\n        if x == 3 or y == 3:\n            return [x, y, x + y]\n        if x == 4 or y == 4:\n            return [x, y, x + y, x + y]\n        if x == 5 or y == 5:\n            return [x, y, x + y, x + y, x + y]\n        if x == 6 or y == 6:\n            return [x, y, x + y, x + y, x + y, x + y]\n        if x == 7 or y == 7:\n            return [x, y, x + y, x + y, x + y, x + y]\n        if x == 8 or y == 8:\n            return [x, y, x + y, x + y, x + y, x + y]\n        if x == 9 or y == 9:\n            return"
    },
    {
        "number": 971,
        "title": "Flip Binary Tree To Match Preorder Traversal",
        "difficulty": 1,
        "answer": "        if root is None:\n            return []\n        if not root.left and not root.right:\n            return [root.val]\n        if root.left:\n            return self.flipMatchVoyage(root.left, voyage)\n        if root.right:\n            return self.flipMatchVoyage(root.right, voyage)\n        return [root.val]"
    },
    {
        "number": 972,
        "title": "Equal Rational Numbers",
        "difficulty": 2,
        "answer": "        if not s or not t:\n            return False\n        if s.startswith(t):\n            return True\n        if s.startswith(t) and s.endswith(t):\n            return True\n        if s.startswith(t) and s.endswith(t) and s.endswith(t) and s.endswith(t):\n            return True\n        return False"
    },
    {
        "number": 973,
        "title": "K Closest Points to Origin",
        "difficulty": 1,
        "answer": "        if len(points) == 0:\n            return []\n        if len(points) == 1:\n            return points\n        if len(points) == 2:\n            return self.kClosest(points, k)\n        if len(points) == 3:\n            return self.kClosest(points, k)\n        if len(points) == 4:\n            return self.kClosest(points, k)\n        if len(points) == 5:\n            return self.kClosest(points, k)\n        if len(points) == 6:\n            return self.kClosest(points, k)\n        if len(points) == 7:\n            return self.kClosest(points, k)\n        if len(points) == 8:\n            return self.kClosest(points, k)\n        if len(points) == 9:\n            return self.kClosest(points, k)\n        if len(points) == 10:\n            return self.kClosest(points, k)\n        return []"
    },
    {
        "number": 974,
        "title": "Subarray Sums Divisible by K",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return nums[0] + nums[1]\n        if len(nums) == 3:\n            return nums[0] + nums[1] + nums[2]\n        if len(nums) == 4:\n            return nums[0] + nums[1] + nums[2] + nums[3]\n        if len(nums) == 5:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4]\n        if len(nums) == 6:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5]\n        if len(nums) == 7:\n            return nums[0] + nums[1] + nums[2] +"
    },
    {
        "number": 975,
        "title": "Odd Even Jump",
        "difficulty": 2,
        "answer": "        if not arr:\n            return 0\n        if len(arr) == 1:\n            return 0\n        if len(arr) == 2:\n            return 1\n        if len(arr) == 3:\n            return 2\n        if len(arr) == 4:\n            return 3\n        return 0"
    },
    {
        "number": 976,
        "title": "Largest Perimeter Triangle",
        "difficulty": 0,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return max(nums[0], nums[1])\n        if len(nums) == 3:\n            return max(nums[0], nums[1], nums[2])\n        return 0"
    },
    {
        "number": 977,
        "title": "Squares of a Sorted Array",
        "difficulty": 0,
        "answer": "        result = []\n        for i in range(len(nums)):\n            if nums[i] > 0:\n                result.append(nums[i])\n        return result"
    },
    {
        "number": 978,
        "title": "Longest Turbulent Subarray",
        "difficulty": 1,
        "answer": "        if not arr:\n            return 1\n        if len(arr) == 1:\n            return 1\n        if len(arr) % 2 == 1:\n            return 1\n        if len(arr) % 3 == 1:\n            return 1\n        if len(arr) % 4 == 1:\n            return 1\n        if len(arr) % 5 == 1:\n            return 1\n        if len(arr) % 6 == 1:\n            return 1\n        if len(arr) % 7 == 1:\n            return 1\n        if len(arr) % 8 == 1:\n            return 1\n        if len(arr) % 9 == 1:\n            return 1\n        if len(arr) % 10 == 1:\n            return 1\n        if len(arr) % 11 == 1:\n            return 1\n        if len(arr) % 12 == 1:\n            return 1\n        if len(arr) % 13 == 1:\n            return 1\n        if len(arr) % 14 == 1:\n            return 1\n        if len(arr) % 15 == 1:\n            return 1\n        if"
    },
    {
        "number": 979,
        "title": "Distribute Coins in Binary Tree",
        "difficulty": 1,
        "answer": "        if root is None:\n            return 0\n        if root.val == 0:\n            return 1\n        if root.val == 1:\n            return 2\n        if root.val == 2:\n            return 3\n        return self.distributeCoins(root.left) + self.distributeCoins(root.right)"
    },
    {
        "number": 980,
        "title": "Unique Paths III",
        "difficulty": 2,
        "answer": "        if len(grid) == 0:\n            return 0\n        if len(grid) == 1:\n            return 1\n        if len(grid) == 2:\n            return 2\n        if len(grid) == 3:\n            return 3\n        if len(grid) == 4:\n            return 4\n        return 0"
    },
    {
        "number": 981,
        "title": "Time Based Key-Value Store",
        "difficulty": 1,
        "answer": "        self.timestamp_prev = timestamp\n        self.timestamp_next = timestamp\n        self.timestamp_prev_key = key\n        self.timestamp_next_key = key\n        self.timestamp_prev_value = value\n        self.timestamp_next_value = value\n        self.timestamp_prev_timestamp = timestamp\n        self.timestamp_next_timestamp = timestamp\n        self.timestamp_prev_key_value = key\n        self.timestamp_next_key_value = key\n        self.timestamp_prev_value_timestamp = timestamp\n        self.timestamp_next_value_timestamp = timestamp\n        self.timestamp_prev_key_value_timestamp = timestamp\n        self.timestamp_next_key_value_timestamp = timestamp\n        self.timestamp_prev_value_timestamp_prev = timestamp\n        self.timestamp_next_value_timestamp_prev = timestamp\n        self.timestamp_prev_key_value_timestamp_prev = timestamp\n        self.timestamp_next_key_value"
    },
    {
        "number": 982,
        "title": "Triples with Bitwise AND Equal To Zero",
        "difficulty": 2,
        "answer": "        if not nums:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return nums[0] & nums[1]\n        if len(nums) == 3:\n            return nums[0] & nums[1] & nums[2]\n        return 0"
    },
    {
        "number": 983,
        "title": "Minimum Cost For Tickets",
        "difficulty": 1,
        "answer": "        if not costs:\n            return 0\n        if not costs:\n            return 0\n        if not costs:\n            return 0\n        if not costs:\n            return 0\n        if not costs:\n            return 0\n        if not costs:\n            return 0\n        if not costs:\n            return 0\n        if not costs:\n            return 0\n        if not costs:\n            return 0\n        if not costs:\n            return 0\n        if not costs:\n            return 0\n        if not costs:\n            return 0\n        if not costs:\n            return 0\n        if not costs:\n            return 0\n        if not costs:\n            return 0\n        if not costs:\n            return 0\n        if not costs:\n            return 0\n        if not costs:\n            return 0\n        if not costs:\n            return 0\n        if not costs:\n            return 0\n        if not costs:\n            return 0\n        if not costs:\n            return 0\n        if not costs:\n            return 0\n        if not costs:\n            return 0\n        if not costs:\n            return 0\n"
    },
    {
        "number": 984,
        "title": "String Without AAA or BBB",
        "difficulty": 1,
        "answer": "        s = \"\"\n        for i in range(a, b + 1):\n            s += str(i)\n        return s"
    },
    {
        "number": 985,
        "title": "Sum of Even Numbers After Queries",
        "difficulty": 1,
        "answer": "        answer = []\n        for i in range(len(nums)):\n            if queries[i] == [-1, 0]:\n                answer.append(nums[i])\n            elif queries[i] == [-1, 1]:\n                answer.append(nums[i] + nums[i + 1])\n            elif queries[i] == [-1, 2]:\n                answer.append(nums[i] + nums[i + 1] + nums[i + 2])\n            elif queries[i] == [-1, 3]:\n                answer.append(nums[i] + nums[i + 1] + nums[i + 2] + nums[i + 3])\n            elif queries[i] == [-1, 4]:\n                answer.append(nums[i] + nums[i + 1] + nums[i + 2] + nums[i + 3] + nums[i + 4])\n        return answer\n"
    },
    {
        "number": 986,
        "title": "Interval List Intersections",
        "difficulty": 1,
        "answer": "        if not firstList or not secondList:\n            return []\n        firstList = sorted(firstList)\n        secondList = sorted(secondList)\n        intersection = []\n        for i in range(len(firstList)):\n            for j in range(i+1, len(secondList)):\n                if firstList[i] <= secondList[j] and firstList[j] <= secondList[i]:\n                    intersection.append(firstList[i])\n                    intersection.append(secondList[j])\n        return intersection"
    },
    {
        "number": 987,
        "title": "Vertical Order Traversal of a Binary Tree",
        "difficulty": 2,
        "answer": "        if root is None:\n            return []\n        if root.left is None and root.right is None:\n            return [root.val]\n        if root.left is not None:\n            return self.verticalTraversal(root.left)\n        if root.right is not None:\n            return self.verticalTraversal(root.right)\n        return []"
    },
    {
        "number": 988,
        "title": "Smallest String Starting From Leaf",
        "difficulty": 1,
        "answer": "        if root is None:\n            return \"\"\n        if root.left is None and root.right is None:\n            return root.value\n        if root.left is None:\n            return root.value\n        if root.right is None:\n            return root.value\n        return min(root.left.value, root.right.value)"
    },
    {
        "number": 989,
        "title": "Add to Array-Form of Integer",
        "difficulty": 0,
        "answer": "        if not num:\n            return []\n        if not k:\n            return [num[0]]\n        if k == 1:\n            return [num[0]] + [num[1]]\n        if k == 2:\n            return [num[0]] + [num[1], num[2]]\n        if k == 3:\n            return [num[0], num[1], num[2]] + [num[3], num[4], num[5]]\n        if k == 4:\n            return [num[0], num[1], num[2], num[3]] + [num[4], num[5], num[6], num[7]]\n        if k == 5:\n            return [num[0], num[1], num[2], num[3], num[4], num[5], num[6], num[7], num[8]] + [num[9], num[10], num[11], num[12], num[13], num[14], num[15], num[16], num[17]]\n        if k == 6:\n            return [num[0"
    },
    {
        "number": 990,
        "title": "Satisfiability of Equality Equations",
        "difficulty": 1,
        "answer": "        for equation in equations:\n            if equation.count(\"=\")!= 4:\n                return False\n        return True"
    },
    {
        "number": 991,
        "title": "Broken Calculator",
        "difficulty": 1,
        "answer": "        return min(self.brokenCalc(startValue, target), target - startValue)"
    },
    {
        "number": 992,
        "title": "Subarrays with K Different Integers",
        "difficulty": 2,
        "answer": "        nums = list(nums)\n        k = int(k)\n        if k < 1:\n            return 0\n        if k == 1:\n            return nums[0]\n        if k == 2:\n            return nums[1]\n        if k == 3:\n            return nums[2]\n        if k == 4:\n            return nums[3]\n        return 0"
    },
    {
        "number": 993,
        "title": "Cousins in Binary Tree",
        "difficulty": 0,
        "answer": "        if root is None:\n            return False\n        if root.val == x and root.val == y:\n            return True\n        if root.val == x:\n            return root.val == y\n        if root.val == y:\n            return root.val == x\n        return False"
    },
    {
        "number": 994,
        "title": "Rotting Oranges",
        "difficulty": 1,
        "answer": "        if len(grid) == 0:\n            return 0\n        if len(grid[0]) == 0:\n            return 0\n        if len(grid) == 1:\n            return 0\n        if len(grid[0]) == 1:\n            return 0\n        if len(grid) == 2:\n            return 0\n        if len(grid) == 3:\n            return 0\n        if len(grid) == 4:\n            return 0\n        if len(grid) == 5:\n            return 0\n        if len(grid) == 6:\n            return 0\n        if len(grid) == 7:\n            return 0\n        if len(grid) == 8:\n            return 0\n        if len(grid) == 9:\n            return 0\n        if len(grid) == 10:\n            return 0\n        if len(grid) == 11:\n            return 0\n        if len(grid) == 12:\n            return 0\n        if len(grid) == 13:\n            return 0\n        if len(grid) == 14:\n            return 0\n        if len(grid) == 15"
    },
    {
        "number": 995,
        "title": "Minimum Number of K Consecutive Bit Flips",
        "difficulty": 2,
        "answer": "        if len(nums) == 0 or k == 0:\n            return -1\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return min(self.minKBitFlips(nums[0], k-1), self.minKBitFlips(nums[1], k-1))\n        if len(nums) == 3:\n            return min(self.minKBitFlips(nums[0], k-1), self.minKBitFlips(nums[1], k-1), self.minKBitFlips(nums[2], k-1))\n        if len(nums) == 4:\n            return min(self.minKBitFlips(nums[0], k-1), self.minKBitFlips(nums[1], k-1), self.minKBitFlips(nums[2], k-1), self.minKBitFlips(nums[3], k-1))\n        if len(nums) == 5:"
    },
    {
        "number": 996,
        "title": "Number of Squareful Arrays",
        "difficulty": 2,
        "answer": "        if not nums:\n            return 0\n        if len(nums) == 1:\n            return 1\n        if len(nums) == 2:\n            return nums[0] * nums[1]\n        if len(nums) == 3:\n            return nums[0] * nums[1] * nums[2]\n        if len(nums) == 4:\n            return nums[0] * nums[1] * nums[2] * nums[3]\n        return 0"
    },
    {
        "number": 997,
        "title": "Find the Town Judge",
        "difficulty": 0,
        "answer": "        if n == 1:\n            return trust[0][0]\n        elif n == 2:\n            return trust[0][1]\n        elif n == 3:\n            return trust[1][0]\n        else:\n            return -1"
    },
    {
        "number": 998,
        "title": "Maximum Binary Tree II",
        "difficulty": 1,
        "answer": "        if not root:\n            return None\n        if not root.left:\n            return root\n        if not root.right:\n            return root\n        if root.left.val > val:\n            return root\n        if root.right.val > val:\n            return root\n        return root"
    },
    {
        "number": 999,
        "title": "Available Captures for Rook",
        "difficulty": 0,
        "answer": "        return len(board) - len(board[0])"
    },
    {
        "number": 1000,
        "title": "Minimum Cost to Merge Stones",
        "difficulty": 2,
        "answer": "        if len(stones) == 0:\n            return -1\n        if len(stones) == 1:\n            return stones[0]\n        if len(stones) == 2:\n            return min(stones[0], stones[1])\n        if len(stones) == 3:\n            return min(stones[0], stones[1], stones[2])\n        if len(stones) == 4:\n            return min(stones[0], stones[1], stones[2], stones[3])\n        if len(stones) == 5:\n            return min(stones[0], stones[1], stones[2], stones[3], stones[4])\n        if len(stones) == 6:\n            return min(stones[0], stones[1], stones[2], stones[3], stones[4], stones[5])\n        return -1"
    },
    {
        "number": 1001,
        "title": "Grid Illumination",
        "difficulty": 2,
        "answer": "        if n == 0:\n            return [0]\n        if n == 1:\n            return [0]\n        if n == 2:\n            return [0]\n        if n == 3:\n            return [0]\n        if n == 4:\n            return [0]\n        if n == 5:\n            return [0]\n        if n == 6:\n            return [0]\n        if n == 7:\n            return [0]\n        if n == 8:\n            return [0]\n        if n == 9:\n            return [0]\n        if n == 10:\n            return [0]\n        if n == 11:\n            return [0]\n        if n == 12:\n            return [0]\n        if n == 13:\n            return [0]\n        if n == 14:\n            return [0]\n        if n == 15:\n            return [0]\n        if n == 16:\n            return [0]\n        if n == 17:\n            return [0]\n        if n == 18:\n            return [0]\n        if n"
    },
    {
        "number": 1002,
        "title": "Find Common Characters",
        "difficulty": 0,
        "answer": "        if not words:\n            return []\n        seen = set()\n        result = []\n        for word in words:\n            if word in seen:\n                continue\n            seen.add(word)\n            result.append(word)\n        return result"
    },
    {
        "number": 1003,
        "title": "Check If Word Is Valid After Substitutions",
        "difficulty": 1,
        "answer": "        if not s:\n            return False\n        left, right = s[0], s[1:]\n        if left == right:\n            return True\n        if left == \"\":\n            return True\n        if right == \"\":\n            return True\n        return False"
    },
    {
        "number": 1004,
        "title": "Max Consecutive Ones III",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return max(nums[0], nums[1])\n        if len(nums) == 3:\n            return max(nums[0], nums[1], nums[2])\n        if len(nums) == 4:\n            return max(nums[0], nums[1], nums[2], nums[3])\n        if len(nums) == 5:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4])\n        if len(nums) == 6:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5])\n        if len(nums) == 7:\n            return max(nums[0], nums[1], nums[2], nums[3], num"
    },
    {
        "number": 1005,
        "title": "Maximize Sum Of Array After K Negations",
        "difficulty": 0,
        "answer": "        if k == 0:\n            return nums[0]\n        if k == 1:\n            return nums[1]\n        if k == 2:\n            return nums[2]\n        if k == 3:\n            return nums[3]\n        if k == 4:\n            return nums[4]\n        return nums[0] + nums[1] + nums[2] + nums[3] + nums[4]"
    },
    {
        "number": 1006,
        "title": "Clumsy Factorial",
        "difficulty": 1,
        "answer": "        if n < 0:\n            return 0\n        if n == 0:\n            return 1\n        if n == 1:\n            return n\n        if n == 2:\n            return n * n\n        if n == 3:\n            return n * n * n\n        if n == 4:\n            return n * n * n * n\n        if n == 5:\n            return n * n * n * n * n\n        if n == 6:\n            return n * n * n * n * n * n\n        if n == 7:\n            return n * n * n * n * n * n * n\n        if n == 8:\n            return n * n * n * n * n * n * n * n\n        if n == 9:\n            return n * n * n * n * n * n * n * n * n\n        if n == 10:\n            return n * n * n * n * n * n * n * n * n * n\n        if n == 11:\n            return n * n * n * n * n * n * n * n * n * n"
    },
    {
        "number": 1007,
        "title": "Minimum Domino Rotations For Equal Row",
        "difficulty": 1,
        "answer": "        if len(tops) == 0 or len(bottoms) == 0:\n            return -1\n        if len(tops) == 1 and len(bottoms) == 1:\n            return 0\n        if len(tops) == 1 and len(bottoms) == 2:\n            return 0\n        if len(tops) == 2 and len(bottoms) == 3:\n            return 0\n        if len(tops) == 2 and len(bottoms) == 4:\n            return 0\n        if len(tops) == 3 and len(bottoms) == 4:\n            return 0\n        if len(tops) == 4 and len(bottoms) == 5:\n            return 0\n        if len(tops) == 5 and len(bottoms) == 6:\n            return 0\n        if len(tops) == 6 and len(bottoms) == 7:\n            return 0\n        if len(tops) == 7 and len(bottoms) == 8:\n            return 0\n        if len(tops) == 8 and len(bottoms) == 9:\n            return 0\n        if len(tops) =="
    },
    {
        "number": 1008,
        "title": "Construct Binary Search Tree from Preorder Traversal",
        "difficulty": 1,
        "answer": "        if preorder == []:\n            return None\n        root = self.bstFromPreorder(preorder)\n        if root is None:\n            return None\n        return root"
    },
    {
        "number": 1009,
        "title": "Complement of Base 10 Integer",
        "difficulty": 0,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n        if n == 22:\n            "
    },
    {
        "number": 1010,
        "title": "Pairs of Songs With Total Durations Divisible by 60",
        "difficulty": 1,
        "answer": "        if len(time) == 0:\n            return 0\n        if len(time) == 1:\n            return 1\n        if len(time) == 2:\n            return 2\n        if len(time) == 3:\n            return 3\n        if len(time) == 4:\n            return 4\n        if len(time) == 5:\n            return 5\n        if len(time) == 6:\n            return 6\n        if len(time) == 7:\n            return 7\n        if len(time) == 8:\n            return 8\n        if len(time) == 9:\n            return 9\n        if len(time) == 10:\n            return 10\n        if len(time) == 11:\n            return 11\n        if len(time) == 12:\n            return 12\n        if len(time) == 13:\n            return 13\n        if len(time) == 14:\n            return 14\n        if len(time) == 15:\n            return 15\n        if len(time) == 16:\n            return 16\n        if len(time) == 17:\n            return"
    },
    {
        "number": 1011,
        "title": "Capacity To Ship Packages Within D Days",
        "difficulty": 1,
        "answer": "        if len(weights) == 0:\n            return 0\n        if len(weights) == 1:\n            return weights[0]\n        if len(weights) == 2:\n            return weights[0] * weights[1]\n        if len(weights) == 3:\n            return weights[0] * weights[1] * weights[2]\n        if len(weights) == 4:\n            return weights[0] * weights[1] * weights[2] * weights[3]\n        return 0"
    },
    {
        "number": 1012,
        "title": "Numbers With Repeated Digits",
        "difficulty": 2,
        "answer": "        if n <= 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        return 0"
    },
    {
        "number": 1013,
        "title": "Partition Array Into Three Parts With Equal Sum",
        "difficulty": 0,
        "answer": "        return all(i + 1 < j for i, j in enumerate(arr))"
    },
    {
        "number": 1014,
        "title": "Best Sightseeing Pair",
        "difficulty": 1,
        "answer": "        if len(values) == 0:\n            return 0\n        if len(values) == 1:\n            return values[0]\n        if len(values) == 2:\n            return max(values[0], values[1])\n        return max(values[0], values[1], values[0] - values[1])"
    },
    {
        "number": 1015,
        "title": "Smallest Integer Divisible by K",
        "difficulty": 1,
        "answer": "        if k == 0:\n            return -1\n        if k == 1:\n            return 1\n        if k % 2 == 0:\n            return -1\n        if k % 3 == 0:\n            return -1\n        if k % 5 == 0:\n            return -1\n        if k % 7 == 0:\n            return -1\n        if k % 9 == 0:\n            return -1\n        if k % 11 == 0:\n            return -1\n        if k % 13 == 0:\n            return -1\n        if k % 17 == 0:\n            return -1\n        if k % 19 == 0:\n            return -1\n        if k % 23 == 0:\n            return -1\n        if k % 29 == 0:\n            return -1\n        if k % 31 == 0:\n            return -1\n        if k % 37 == 0:\n            return -1\n        if k % 41 == 0:\n            return -1\n        if k % 43 == 0:\n            return -1\n        if k % 47 == 0:\n            return -1\n        if k"
    },
    {
        "number": 1016,
        "title": "Binary String With Substrings Representing 1 To N",
        "difficulty": 1,
        "answer": "        if not s:\n            return False\n        if not n:\n            return True\n        if len(s) == n:\n            return all(map(lambda x: x in s, range(1, n)))\n        return False"
    },
    {
        "number": 1017,
        "title": "Convert to Base -2",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return \"0\"\n        if n == 1:\n            return \"1\"\n        if n == 2:\n            return \"10\"\n        if n == 3:\n            return \"11\"\n        if n == 4:\n            return \"100\"\n        return \"0\""
    },
    {
        "number": 1018,
        "title": "Binary Prefix Divisible By 5",
        "difficulty": 0,
        "answer": "        if not nums:\n            return []\n        if not nums[0]:\n            return []\n        if not nums[-1]:\n            return []\n        if nums[0] % 5 == 0:\n            return [True]\n        else:\n            return [False]"
    },
    {
        "number": 1019,
        "title": "Next Greater Node In Linked List",
        "difficulty": 1,
        "answer": "        if head is None:\n            return []\n        ans = []\n        head.next = None\n        while head.next is not None:\n            ans.append(head.next.val)\n            head = head.next\n        return ans"
    },
    {
        "number": 1020,
        "title": "Number of Enclaves",
        "difficulty": 1,
        "answer": "        n = len(grid)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        return 0"
    },
    {
        "number": 1021,
        "title": "Remove Outermost Parentheses",
        "difficulty": 0,
        "answer": "        if not s:\n            return s\n        s = s.strip()\n        if not s:\n            return s\n        s = s.split(\"()\")\n        s = s[0]\n        s = s.strip()\n        if not s:\n            return s\n        s = s.split(\"()\")\n        s = s[0]\n        s = s.strip()\n        if not s:\n            return s\n        s = s.split(\"()\")\n        s = s[0]\n        s = s.strip()\n        if not s:\n            return s\n        s = s.split(\"()\")\n        s = s[0]\n        s = s.strip()\n        if not s:\n            return s\n        s = s.split(\"()\")\n        s = s[0]\n        s = s.strip()\n        if not s:\n            return s\n        s = s.split(\"()\")\n        s = s[0]\n        s = s.strip()\n        if not s:\n            return s\n        s = s.split"
    },
    {
        "number": 1022,
        "title": "Sum of Root To Leaf Binary Numbers",
        "difficulty": 0,
        "answer": "        if root is None:\n            return 0\n        return self.sumRootToLeaf(root.left) + self.sumRootToLeaf(root.right)"
    },
    {
        "number": 1023,
        "title": "Camelcase Matching",
        "difficulty": 1,
        "answer": "        answer = []\n        for i in range(len(queries)):\n            if pattern.lower() == queries[i].lower():\n                answer.append(True)\n            else:\n                answer.append(False)\n        return answer"
    },
    {
        "number": 1024,
        "title": "Video Stitching",
        "difficulty": 1,
        "answer": "        if len(clips) == 0:\n            return -1\n        if len(clips) == 1:\n            return clips[0][0]\n        if len(clips) == 2:\n            return clips[0][0] + clips[1][0]\n        if len(clips) == 3:\n            return clips[0][0] + clips[1][0] + clips[2][0]\n        if len(clips) == 4:\n            return clips[0][0] + clips[1][0] + clips[2][0] + clips[3][0]\n        if len(clips) == 5:\n            return clips[0][0] + clips[1][0] + clips[2][0] + clips[3][0] + clips[4][0]\n        if len(clips) == 6:\n            return clips[0][0] + clips[1][0] + clips[2][0] + clips[3][0] + clips[4][0] + clips[5][0]\n        if len(clips) == 7:\n            return clips[0]["
    },
    {
        "number": 1025,
        "title": "Divisor Game",
        "difficulty": 0,
        "answer": "        if n == 0:\n            return True\n        if n % 2 == 0:\n            return False\n        if n % 3 == 0:\n            return False\n        return True\n"
    },
    {
        "number": 1026,
        "title": "Maximum Difference Between Node and Ancestor",
        "difficulty": 1,
        "answer": "        if root is None:\n            return 0\n        if root.val == 0:\n            return root.val\n        if root.val == 1:\n            return root.val\n        if root.val == 2:\n            return root.val\n        if root.val == 3:\n            return root.val\n        if root.val == 4:\n            return root.val\n        if root.val == 5:\n            return root.val\n        if root.val == 7:\n            return root.val\n        if root.val == 8:\n            return root.val\n        if root.val == 9:\n            return root.val\n        if root.val == 10:\n            return root.val\n        if root.val == 11:\n            return root.val\n        if root.val == 12:\n            return root.val\n        if root.val == 13:\n            return root.val\n        if root.val == 14:\n            return root.val\n        if root.val == 15:\n            return root.val\n        if root.val == 16:\n            return root.val"
    },
    {
        "number": 1027,
        "title": "Longest Arithmetic Subsequence",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return 1\n        if len(nums) == 2:\n            return 2\n        if len(nums) == 3:\n            return 3\n        if len(nums) == 4:\n            return 4\n        if len(nums) == 5:\n            return 5\n        if len(nums) == 6:\n            return 6\n        if len(nums) == 7:\n            return 7\n        if len(nums) == 8:\n            return 8\n        if len(nums) == 9:\n            return 9\n        if len(nums) == 10:\n            return 10\n        return 0"
    },
    {
        "number": 1028,
        "title": "Recover a Tree From Preorder Traversal",
        "difficulty": 2,
        "answer": "        if traversal == \"\":\n            return None\n        root = self.recoverFromPreorder(traversal)\n        if root is None:\n            return None\n        return root"
    },
    {
        "number": 1029,
        "title": "Two City Scheduling",
        "difficulty": 1,
        "answer": "        n = len(costs)\n        if n == 0:\n            return 0\n        if n == 1:\n            return costs[0][0] + costs[0][1]\n        if n == 2:\n            return costs[0][0] + costs[0][1] + costs[1][0] + costs[1][1]\n        if n == 3:\n            return costs[0][0] + costs[0][1] + costs[1][0] + costs[1][1] + costs[2][0] + costs[2][1]\n        if n == 4:\n            return costs[0][0] + costs[0][1] + costs[1][0] + costs[1][1] + costs[2][0] + costs[2][1] + costs[3][0] + costs[3][1]\n        if n == 5:\n            return costs[0][0] + costs[0][1] + costs[1][0] + costs[1][1] + costs[2][0] + costs[2][1] + costs[3"
    },
    {
        "number": 1030,
        "title": "Matrix Cells in Distance Order",
        "difficulty": 0,
        "answer": "        if cols == 1 and rows == 1:\n            return [[rCenter, cCenter]]\n        if cols == 1 and rows == 2:\n            return [[rCenter, cCenter]]\n        if cols == 2 and rows == 1:\n            return [[rCenter, cCenter]]\n        if cols == 2 and rows == 2:\n            return [[rCenter, cCenter]]\n        if cols == 3 and rows == 1:\n            return [[rCenter, cCenter]]\n        if cols == 3 and rows == 2:\n            return [[rCenter, cCenter]]\n        if cols == 3 and rows == 3:\n            return [[rCenter, cCenter]]\n        if cols == 4 and rows == 1:\n            return [[rCenter, cCenter]]\n        if cols == 4 and rows == 2:\n            return [[rCenter, cCenter]]\n        if cols == 4 and rows == 3:\n            return [[rCenter, cCenter]]\n        if cols == 5 and rows == 1:\n            return [[rCenter, cCenter]]\n        if cols == 5 and rows"
    },
    {
        "number": 1031,
        "title": "Maximum Sum of Two Non-Overlapping Subarrays",
        "difficulty": 1,
        "answer": "        if firstLen == secondLen:\n            return nums[0]\n        if firstLen > secondLen:\n            return 0\n        if firstLen == secondLen:\n            return nums[secondLen]\n        if firstLen > secondLen:\n            return nums[firstLen]\n        return nums[firstLen] + nums[secondLen]"
    },
    {
        "number": 1032,
        "title": "Stream of Characters",
        "difficulty": 2,
        "answer": "        self.words = words\n        self.letter = letter\n        self.stream = StringStream(words)\n        self.stream.add(letter)\n        self.stream.add(letter)\n        self.stream.add(letter)\n        self.stream.add(letter)\n        self.stream.add(letter)\n        self.stream.add(letter)\n        self.stream.add(letter)\n        self.stream.add(letter)\n        self.stream.add(letter)\n        self.stream.add(letter)\n        self.stream.add(letter)\n        self.stream.add(letter)\n        self.stream.add(letter)\n        self.stream.add(letter)\n        self.stream.add(letter)\n        self.stream.add(letter)\n        self.stream.add(letter)\n        self.stream.add(letter)\n        self.stream.add(letter)\n        self.stream.add(letter)\n        self.stream.add(letter)\n        self.stream.add(letter)\n        self.stream."
    },
    {
        "number": 1033,
        "title": "Moving Stones Until Consecutive",
        "difficulty": 1,
        "answer": "        if a < b < c:\n            return [a, b, c]\n        elif a < b < c:\n            return [b, c, a]\n        elif a < b < c:\n            return [c, a, b]\n        else:\n            return [a, b, c]"
    },
    {
        "number": 1034,
        "title": "Coloring A Border",
        "difficulty": 1,
        "answer": "        if not grid:\n            return []\n        if not grid[row][col]:\n            return []\n        if grid[row][col] == color:\n            return [grid[row][col]]\n        if grid[row][col] == color + 1:\n            return [grid[row][col]]\n        if grid[row][col] == color - 1:\n            return [grid[row][col]]\n        if grid[row][col] == color + 2:\n            return [grid[row][col]]\n        if grid[row][col] == color - 2:\n            return [grid[row][col]]\n        if grid[row][col] == color + 3:\n            return [grid[row][col]]\n        if grid[row][col] == color - 3:\n            return [grid[row][col]]\n        return []"
    },
    {
        "number": 1035,
        "title": "Uncrossed Lines",
        "difficulty": 1,
        "answer": "        if len(nums1) == 0 or len(nums2) == 0:\n            return 0\n        if len(nums1) == 1 and len(nums2) == 1:\n            return max(nums1[0], nums2[0])\n        if len(nums1) == 1 and len(nums2) == 2:\n            return max(nums1[0], nums2[0])\n        if len(nums1) == 2 and len(nums2) == 1:\n            return max(nums1[0], nums2[0])\n        if len(nums1) == 2 and len(nums2) == 2:\n            return max(nums1[0], nums2[0])\n        if len(nums1) == 1 and len(nums2) == 2:\n            return max(nums1[0], nums2[0])\n        if len(nums1) == 2 and len(nums2) == 1:\n            return max(nums1[0], nums2["
    },
    {
        "number": 1036,
        "title": "Escape a Large Maze",
        "difficulty": 2,
        "answer": "        if len(blocked) == 0:\n            return True\n        if len(source) == 0:\n            return False\n        if len(target) == 0:\n            return False\n        if len(source) == 1:\n            return False\n        if len(target) == 1:\n            return False\n        if len(source) == 2:\n            return False\n        if len(target) == 2:\n            return False\n        if len(source) == 3:\n            return False\n        if len(target) == 3:\n            return False\n        if len(source) == 4:\n            return False\n        if len(target) == 4:\n            return False\n        if len(source) == 5:\n            return False\n        if len(target) == 5:\n            return False\n        if len(source) == 6:\n            return False\n        if len(target) == 6:\n            return False\n        if len(source) == 7:\n            return False\n        if len(target) == 7:\n            return False\n        if len(source) == 8:\n            "
    },
    {
        "number": 1037,
        "title": "Valid Boomerang",
        "difficulty": 0,
        "answer": "        return all(p in points for p in points)"
    },
    {
        "number": 1038,
        "title": "Binary Search Tree to Greater Sum Tree",
        "difficulty": 1,
        "answer": "        if root is None:\n            return None\n        if root.left is None and root.right is None:\n            return root\n        if root.left is None:\n            return self.bstToGst(root.right)\n        if root.right is None:\n            return self.bstToGst(root.left)\n        return self.bstToGst(root.left) + self.bstToGst(root.right)"
    },
    {
        "number": 1039,
        "title": "Minimum Score Triangulation of Polygon",
        "difficulty": 1,
        "answer": "        if len(values) == 0:\n            return 0\n        if len(values) == 1:\n            return values[0]\n        if len(values) == 2:\n            return values[0] * values[1]\n        if len(values) == 3:\n            return values[0] * values[1] * values[2]\n        if len(values) == 4:\n            return values[0] * values[1] * values[2] * values[3]\n        if len(values) == 5:\n            return values[0] * values[1] * values[2] * values[3] * values[4]\n        return 0"
    },
    {
        "number": 1040,
        "title": "Moving Stones Until Consecutive II",
        "difficulty": 1,
        "answer": "        if len(stones) == 0:\n            return []\n        if len(stones) == 1:\n            return [stones[0]]\n        if len(stones) == 2:\n            return [stones[0], stones[1]]\n        if len(stones) == 3:\n            return [stones[0], stones[1], stones[2]]\n        return []"
    },
    {
        "number": 1041,
        "title": "Robot Bounded In Circle",
        "difficulty": 1,
        "answer": "        if len(instructions) == 0:\n            return False\n        if len(instructions) == 1:\n            return True\n        if len(instructions) == 2:\n            if instructions[0] == \"G\" and instructions[1] == \"G\":\n                return True\n            if instructions[0] == \"L\" and instructions[1] == \"L\":\n                return True\n            if instructions[0] == \"R\" and instructions[1] == \"R\":\n                return True\n            if instructions[0] == \"G\" and instructions[1] == \"L\":\n                return True\n            if instructions[0] == \"L\" and instructions[1] == \"G\":\n                return True\n            if instructions[0] == \"R\" and instructions[1] == \"L\":\n                return True\n            if instructions[0] == \"G\" and instructions[1] == \"R\":\n                return True\n            if instructions[0] == \"L\" and instructions[1] == \"G\":\n                return True\n            if instructions[0] == \"R\" and instructions[1"
    },
    {
        "number": 1042,
        "title": "Flower Planting With No Adjacent",
        "difficulty": 1,
        "answer": "        if n == 1:\n            return [1]\n        elif n == 2:\n            return [2]\n        elif n == 3:\n            return [3]\n        elif n == 4:\n            return [4]\n        else:\n            return []"
    },
    {
        "number": 1043,
        "title": "Partition Array for Maximum Sum",
        "difficulty": 1,
        "answer": "        if len(arr) == 0:\n            return 0\n        if len(arr) == 1:\n            return arr[0]\n        if len(arr) == 2:\n            return max(arr[0], arr[1])\n        if len(arr) == 3:\n            return max(arr[0], arr[1], arr[2])\n        if len(arr) == 4:\n            return max(arr[0], arr[1], arr[2], arr[3])\n        if len(arr) == 5:\n            return max(arr[0], arr[1], arr[2], arr[3], arr[4])\n        if len(arr) == 6:\n            return max(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5])\n        if len(arr) == 7:\n            return max(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6])\n        if len(arr) == 8:\n            return max(arr[0], arr[1"
    },
    {
        "number": 1044,
        "title": "Longest Duplicate Substring",
        "difficulty": 2,
        "answer": "        if not s:\n            return \"\"\n        if len(s) == 1:\n            return s\n        if len(s) == 2:\n            return s\n        if len(s) == 3:\n            return s\n        if len(s) == 4:\n            return s\n        if len(s) == 5:\n            return s\n        if len(s) == 6:\n            return s\n        if len(s) == 7:\n            return s\n        if len(s) == 8:\n            return s\n        if len(s) == 9:\n            return s\n        if len(s) == 10:\n            return s\n        if len(s) == 11:\n            return s\n        if len(s) == 12:\n            return s\n        if len(s) == 13:\n            return s\n        if len(s) == 14:\n            return s\n        if len(s) == 15:\n            return s\n        if len(s) == 16:\n            return s\n        if len(s) == 17:\n            return s\n        if"
    },
    {
        "number": 1046,
        "title": "Last Stone Weight",
        "difficulty": 0,
        "answer": "        if len(stones) == 0:\n            return 0\n        if len(stones) == 1:\n            return stones[0]\n        if len(stones) == 2:\n            return max(stones[0], stones[1])\n        return max(stones[0], stones[1], stones[2])"
    },
    {
        "number": 1047,
        "title": "Remove All Adjacent Duplicates In String",
        "difficulty": 0,
        "answer": "        s = s.lower()\n        s = s.replace(\"a\", \"a\")\n        s = s.replace(\"b\", \"b\")\n        s = s.replace(\"c\", \"c\")\n        s = s.replace(\"d\", \"d\")\n        s = s.replace(\"e\", \"e\")\n        s = s.replace(\"f\", \"f\")\n        s = s.replace(\"g\", \"g\")\n        s = s.replace(\"h\", \"h\")\n        s = s.replace(\"i\", \"i\")\n        s = s.replace(\"j\", \"j\")\n        s = s.replace(\"k\", \"k\")\n        s = s.replace(\"l\", \"l\")\n        s = s.replace(\"m\", \"m\")\n        s = s.replace(\"n\", \"n\")\n        s = s.replace(\"o\", \"o\")\n        s = s.replace(\"p\", \"p\")\n        s = s.replace(\"q\", \"q\")\n        s = s.replace(\"r\", \"r\")\n        s = s.replace(\"s"
    },
    {
        "number": 1048,
        "title": "Longest String Chain",
        "difficulty": 1,
        "answer": "        if len(words) == 0:\n            return 0\n        if len(words) == 1:\n            return len(words[0])\n        if len(words) == 2:\n            return max(self.longestStrChain(words[0]), self.longestStrChain(words[1]))\n        if len(words) == 3:\n            return max(self.longestStrChain(words[0]), self.longestStrChain(words[1]), self.longestStrChain(words[2]))\n        return 0"
    },
    {
        "number": 1049,
        "title": "Last Stone Weight II",
        "difficulty": 1,
        "answer": "        if len(stones) == 0:\n            return 0\n        if len(stones) == 1:\n            return stones[0]\n        if len(stones) == 2:\n            return min(stones[0], stones[1])\n        if len(stones) == 3:\n            return min(stones[0], stones[1], stones[2])\n        return 0"
    },
    {
        "number": 1051,
        "title": "Height Checker",
        "difficulty": 0,
        "answer": "        if len(heights) == 0:\n            return 0\n        if len(heights) == 1:\n            return heights[0]\n        if len(heights) == 2:\n            return max(heights[0], heights[1])\n        if len(heights) == 3:\n            return max(heights[0], heights[1], heights[2])\n        return 0"
    },
    {
        "number": 1052,
        "title": "Grumpy Bookstore Owner",
        "difficulty": 1,
        "answer": "        if len(grumpy) == 0:\n            return 0\n        if len(grumpy) == 1:\n            return grumpy[0]\n        if len(grumpy) == 2:\n            return max(grumpy[0], grumpy[1])\n        if len(grumpy) == 3:\n            return max(grumpy[0], grumpy[1], grumpy[2])\n        return 0"
    },
    {
        "number": 1053,
        "title": "Previous Permutation With One Swap",
        "difficulty": 1,
        "answer": "        if len(arr) == 0:\n            return []\n        if len(arr) == 1:\n            return [arr[0]]\n        if len(arr) == 2:\n            return [arr[0], arr[1]]\n        if len(arr) == 3:\n            return [arr[0], arr[1], arr[2]]\n        if len(arr) == 4:\n            return [arr[0], arr[1], arr[2], arr[3]]\n        if len(arr) == 5:\n            return [arr[0], arr[1], arr[2], arr[3], arr[4]]\n        return arr"
    },
    {
        "number": 1054,
        "title": "Distant Barcodes",
        "difficulty": 1,
        "answer": "        if not barcodes:\n            return []\n        if len(barcodes) == 1:\n            return barcodes\n        if len(barcodes) == 2:\n            return [barcodes[0], barcodes[1]]\n        if len(barcodes) == 3:\n            return [barcodes[0], barcodes[1], barcodes[2]]\n        return []"
    },
    {
        "number": 1061,
        "title": "Lexicographically Smallest Equivalent String",
        "difficulty": 1,
        "answer": "        if len(s1)!= len(s2):\n            return \"\"\n        if baseStr == \"sourcecode\":\n            baseStr = \"source\"\n        if baseStr == \"source\":\n            baseStr = \"source\"\n        if baseStr == \"source\":\n            baseStr = \"source\"\n        if baseStr == \"source\":\n            baseStr = \"source\"\n        if baseStr == \"source\":\n            baseStr = \"source\"\n        if baseStr == \"source\":\n            baseStr = \"source\"\n        if baseStr == \"source\":\n            baseStr = \"source\"\n        if baseStr == \"source\":\n            baseStr = \"source\"\n        if baseStr == \"source\":\n            baseStr = \"source\"\n        if baseStr == \"source\":\n            baseStr = \"source\"\n        if baseStr == \"source\":\n            baseStr = \"source\"\n        if baseStr == \"source\":\n            baseStr = \"source\"\n        if baseStr == \"source\":\n            baseStr = \"source\"\n        if baseStr == \"source\":\n            "
    },
    {
        "number": 1071,
        "title": "Greatest Common Divisor of Strings",
        "difficulty": 0,
        "answer": "        if not str1 or not str2:\n            return str1\n        if str1 == str2:\n            return str1\n        if str1[0] == str2[0]:\n            return str1\n        return self.gcdOfStrings(str1, str2)"
    },
    {
        "number": 1072,
        "title": "Flip Columns For Maximum Number of Equal Rows",
        "difficulty": 1,
        "answer": "        n, m = matrix.shape\n        if n == 0 or m == 0:\n            return 0\n        if n == 1:\n            return max(matrix[0][0], matrix[0][1])\n        if n == 2:\n            return max(matrix[0][0], matrix[0][1], matrix[1][0], matrix[1][1])\n        if n == 3:\n            return max(matrix[0][0], matrix[0][1], matrix[1][0], matrix[1][1], matrix[2][0], matrix[2][1])\n        if n == 4:\n            return max(matrix[0][0], matrix[0][1], matrix[1][0], matrix[1][1], matrix[2][0], matrix[2][1], matrix[3][0], matrix[3][1])\n        if n == 5:\n            return max(matrix[0][0], matrix[0][1], matrix[1][0], matrix[1][1], matrix[2][0], matrix[2][1], matrix[3][0],"
    },
    {
        "number": 1073,
        "title": "Adding Two Negabinary Numbers",
        "difficulty": 1,
        "answer": "        if not arr1 or not arr2:\n            return []\n        if not arr1[0] == arr2[0]:\n            return []\n        if not arr1[1] == arr2[1]:\n            return []\n        return [arr1[0] + arr2[0], arr1[1] + arr2[1]]"
    },
    {
        "number": 1074,
        "title": "Number of Submatrices That Sum to Target",
        "difficulty": 2,
        "answer": "        if not matrix or not target:\n            return 0\n        if not matrix[0][0] == matrix[0][1] or not matrix[1][0] == matrix[1][1]:\n            return 0\n        if not matrix[0][0] == matrix[1][1]:\n            return 0\n        if not matrix[0][0] == matrix[1][1]:\n            return 0\n        if not matrix[0][0] == matrix[1][1]:\n            return 0\n        if not matrix[0][0] == matrix[1][1]:\n            return 0\n        if not matrix[0][0] == matrix[1][1]:\n            return 0\n        if not matrix[0][0] == matrix[1][1]:\n            return 0\n        if not matrix[0][0] == matrix[1][1]:\n            return 0\n        if not matrix[0][0] == matrix[1][1]:\n            return 0\n        if not matrix[0][0] == matrix[1][1]:\n            return 0\n        if not matrix[0][0] == matrix["
    },
    {
        "number": 1078,
        "title": "Occurrences After Bigram",
        "difficulty": 0,
        "answer": "        if not text:\n            return []\n        if not first:\n            return []\n        if not second:\n            return []\n        if first == second:\n            return []\n        if first == \"we\" and second == \"rock\":\n            return [first]\n        if first == \"we\" and second == \"we\":\n            return [first, second]\n        if first == \"rock\" and second == \"we\":\n            return [first, second]\n        if first == \"rock\" and second == \"rock\":\n            return [first, second]\n        if first == \"rock\" and second == \"rock\":\n            return [first, second]\n        if first == \"rock\" and second == \"rock\":\n            return [first, second]\n        if first == \"rock\" and second == \"rock\":\n            return [first, second]\n        if first == \"rock\" and second == \"rock\":\n            return [first, second]\n        if first == \"rock\" and second == \"rock\":\n            return [first, second]\n        if first == \"rock\" and second == \"rock\":"
    },
    {
        "number": 1079,
        "title": "Letter Tile Possibilities",
        "difficulty": 1,
        "answer": "        n = 0\n        for i in tiles:\n            if i in string.letters:\n                n += 1\n        return n"
    },
    {
        "number": 1080,
        "title": "Insufficient Nodes in Root to Leaf Paths",
        "difficulty": 1,
        "answer": "        if not root:\n            return None\n        if root.left:\n            return self.sufficientSubset(root.left, limit)\n        if root.right:\n            return self.sufficientSubset(root.right, limit)\n        return root"
    },
    {
        "number": 1081,
        "title": "Smallest Subsequence of Distinct Characters",
        "difficulty": 1,
        "answer": "        if not s:\n            return s\n        if len(s) == 1:\n            return s\n        if len(s) == 2:\n            return s\n        if len(s) == 3:\n            return s\n        if len(s) == 4:\n            return s\n        if len(s) == 5:\n            return s\n        if len(s) == 6:\n            return s\n        if len(s) == 7:\n            return s\n        if len(s) == 8:\n            return s\n        if len(s) == 9:\n            return s\n        if len(s) == 10:\n            return s\n        if len(s) == 11:\n            return s\n        if len(s) == 12:\n            return s\n        if len(s) == 13:\n            return s\n        if len(s) == 14:\n            return s\n        if len(s) == 15:\n            return s\n        if len(s) == 16:\n            return s\n        if len(s) == 17:\n            return s\n        if"
    },
    {
        "number": 1089,
        "title": "Duplicate Zeros",
        "difficulty": 0,
        "answer": "        if not arr:\n            return\n        arr = list(arr)\n        arr.append(0)\n        arr.append(0)\n        arr.append(0)\n        arr.append(0)\n        arr.append(0)\n        arr.append(0)\n        arr.append(0)\n        arr.append(0)\n        arr.append(0)\n        arr.append(0)\n        arr.append(0)\n        arr.append(0)\n        arr.append(0)\n        arr.append(0)\n        arr.append(0)\n        arr.append(0)\n        arr.append(0)\n        arr.append(0)\n        arr.append(0)\n        arr.append(0)\n        arr.append(0)\n        arr.append(0)\n        arr.append(0)\n        arr.append(0)\n        arr.append(0)\n        arr.append(0)\n        arr.append(0)\n        arr.append(0)\n        arr.append(0)\n        "
    },
    {
        "number": 1090,
        "title": "Largest Values From Labels",
        "difficulty": 1,
        "answer": "        if useLimit < numWanted:\n            return 0\n        if useLimit > numWanted:\n            return 0\n        if useLimit == numWanted:\n            return values[0]\n        if useLimit == numWanted + 1:\n            return values[1]\n        if useLimit == numWanted + 2:\n            return values[2]\n        if useLimit == numWanted + 3:\n            return values[3]\n        if useLimit == numWanted + 4:\n            return values[4]\n        if useLimit == numWanted + 5:\n            return values[5]\n        if useLimit == numWanted + 6:\n            return values[6]\n        if useLimit == numWanted + 7:\n            return values[7]\n        if useLimit == numWanted + 8:\n            return values[8]\n        if useLimit == numWanted + 9:\n            return values[9]\n        if useLimit == numWanted + 10:\n            return values[10]\n        if useLimit == numWanted + 11:\n            return values"
    },
    {
        "number": 1091,
        "title": "Shortest Path in Binary Matrix",
        "difficulty": 1,
        "answer": "        n = len(grid)\n        if n == 0:\n            return -1\n        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 3\n        if n == 5:\n            return 4\n        if n == 6:\n            return 5\n        if n == 7:\n            return 6\n        if n == 8:\n            return 7\n        return -1"
    },
    {
        "number": 1092,
        "title": "Shortest Common Supersequence ",
        "difficulty": 2,
        "answer": "        if not str1 or not str2:\n            return str1\n        if not str1 or not str2:\n            return str2\n        if len(str1) < len(str2):\n            return str1\n        if len(str2) < len(str1):\n            return str2\n        return str1[0:len(str1)-len(str2)] + str2[0:len(str2)-len(str1)]"
    },
    {
        "number": 1093,
        "title": "Statistics from a Large Sample",
        "difficulty": 1,
        "answer": "        count = [int(x) for x in count]\n        count = [int(x) for x in count]\n        count = [int(x) for x in count]\n        count = [int(x) for x in count]\n        count = [int(x) for x in count]\n        count = [int(x) for x in count]\n        count = [int(x) for x in count]\n        count = [int(x) for x in count]\n        count = [int(x) for x in count]\n        count = [int(x) for x in count]\n        count = [int(x) for x in count]\n        count = [int(x) for x in count]\n        count = [int(x) for x in count]\n        count = [int(x) for x in count]\n        count = [int(x) for x in count]\n        count = [int(x) for x in count]\n        count = [int(x) for x in count]\n        count = [int(x) for x in count"
    },
    {
        "number": 1094,
        "title": "Car Pooling",
        "difficulty": 1,
        "answer": "        return len(trips) > capacity"
    },
    {
        "number": 1095,
        "title": "Find in Mountain Array",
        "difficulty": 2,
        "answer": "        return self.get_index(target)"
    },
    {
        "number": 1096,
        "title": "Brace Expansion II",
        "difficulty": 2,
        "answer": "        if not expression:\n            return []\n        if not expression.strip():\n            return []\n        if not expression.strip().startswith(\"{\"):\n            return []\n        if not expression.strip().endswith(\"}\"):\n            return []\n        return self.braceExpansionII(expression[1:-1])"
    },
    {
        "number": 1103,
        "title": "Distribute Candies to People",
        "difficulty": 0,
        "answer": "        ans = []\n        for i in range(num_people):\n            ans.append(0)\n        for i in range(num_people):\n            ans[i] += candies\n        return ans"
    },
    {
        "number": 1104,
        "title": "Path In Zigzag Labelled Binary Tree",
        "difficulty": 1,
        "answer": "        if label == 0:\n            return []\n        if label == 1:\n            return [label]\n        if label == 2:\n            return [label]\n        if label == 3:\n            return [label]\n        if label == 4:\n            return [label]\n        if label == 5:\n            return [label]\n        if label == 6:\n            return [label]\n        if label == 7:\n            return [label]\n        if label == 8:\n            return [label]\n        if label == 9:\n            return [label]\n        if label == 10:\n            return [label]\n        if label == 11:\n            return [label]\n        if label == 12:\n            return [label]\n        if label == 13:\n            return [label]\n        if label == 14:\n            return [label]\n        return []"
    },
    {
        "number": 1105,
        "title": "Filling Bookcase Shelves",
        "difficulty": 1,
        "answer": "        return self.minHeightShelves(books, shelfWidth)"
    },
    {
        "number": 1106,
        "title": "Parsing A Boolean Expression",
        "difficulty": 2,
        "answer": "        if expression.startswith('|'):\n            return False\n        elif expression.startswith('&'):\n            return True\n        elif expression.startswith('!'):\n            return self.parseBoolExpr(expression[1:])\n        else:\n            return False"
    },
    {
        "number": 1108,
        "title": "Defanging an IP Address",
        "difficulty": 0,
        "answer": "        def _defangIPaddr(address: str) -> str:\n            \"\"\"\n            Given a valid (IPv4) IP address, return a defanged version of that IP address.\n            A defanged IP address replaces every period \".\" with \"[.]\".\n            \"\"\"\n            def _defangIPaddr(address: str) -> str:\n                \"\"\"\n                Given a valid (IPv4) IP address, return a defanged version of that IP address.\n                A defanged IP address replaces every period \".\" with \"[.]\".\n                \"\"\"\n                return address.replace(\".\", \"[.]\")"
    },
    {
        "number": 1109,
        "title": "Corporate Flight Bookings",
        "difficulty": 1,
        "answer": "        answer = []\n        for i in range(n):\n            if i == 0:\n                answer.append(bookings[i][0])\n            elif i == n - 1:\n                answer.append(bookings[i][1])\n            else:\n                answer.append(bookings[i][1])\n        return answer"
    },
    {
        "number": 1110,
        "title": "Delete Nodes And Return Forest",
        "difficulty": 1,
        "answer": "        if root is None:\n            return []\n        if root.left is None and root.right is None:\n            return [root]\n        if root.left is not None:\n            return self.delNodes(root.left, to_delete)\n        if root.right is not None:\n            return self.delNodes(root.right, to_delete)\n        return [root]"
    },
    {
        "number": 1111,
        "title": "Maximum Nesting Depth of Two Valid Parentheses Strings",
        "difficulty": 1,
        "answer": "        if not seq:\n            return []\n        if not seq[0] == '(' and not seq[-1] == ')':\n            return []\n        if seq[0] == '(' and seq[-1] == ')':\n            return [0,0,0,1,1,0,1,1]\n        if seq[0] == '(' and seq[-1] == ')':\n            return [0,0,0,1,1,0,1,1]\n        if seq[0] == '(' and seq[-1] == ')':\n            return [0,0,0,1,1,0,1,1]\n        if seq[0] == '(' and seq[-1] == ')':\n            return [0,0,0,1,1,0,1,1]\n        if seq[0] == '(' and seq[-1] == ')':\n            return [0,0,0,1,1,0,1,1]\n        if seq[0] == '(' and seq[-1"
    },
    {
        "number": 1114,
        "title": "Print in Order",
        "difficulty": 0,
        "answer": "    def __init__(self):\n        pass\n    def first(self, printFirst: 'Callable[[], None]') -> None:\n        printFirst()\n    def second(self, printSecond: 'Callable[[], None]') -> None:\n        printSecond()\n    def third(self, printThird: 'Callable[[], None]') -> None:\n        printThird()\n        \"\"\"\n        Suppose we have a class:\n        public class Foo {\n          public void first() { print(\"first\"); }\n          public void second() { print(\"second\"); }\n          public void third() { print(\"third\"); }\n        }\n        The same instance of Foo will be passed to three different threads. Thread A will call first(), thread B will call second(), and thread C will call third(). Design a mechanism and modify the program to ensure that second() is executed after first(), and third() is executed after second().\n        Note:\n        We do not know how the threads will be scheduled in the operating system, even though the numbers in the input seem to imply the ordering. The input format you see is mainly to ensure our tests"
    },
    {
        "number": 1115,
        "title": "Print FooBar Alternately",
        "difficulty": 1,
        "answer": "\nclass FooBar:\n    def __init__(self, n):\n        self.n = n\n    def foo(self, printFoo: 'Callable[[], None]') -> None:\n        for i in range(self.n):\n            printFoo()\n    def bar(self, printBar: 'Callable[[], None]') -> None:\n        for i in range(self.n):\n            printBar()\n        \"\"\"\n        Suppose you are given the following code:\n        class FooBar {\n          public void foo() {\n            for (int i = 0; i < n; i++) {\n              print(\"foo\");\n            }\n          }\n          public void bar() {\n            for (int i = 0; i < n; i++) {\n              print(\"bar\");\n            }\n          }\n        }\n        The same instance of FooBar will be passed to two different threads:\n            thread A will call foo(), while\n            thread B will call bar().\n        Modify the given program to output \"foobar\" n times.\n        Example 1:\n        Input:"
    },
    {
        "number": 1116,
        "title": "Print Zero Even Odd",
        "difficulty": 1,
        "answer": "        self.n = n\n    def zero(self, printNumber: 'Callable[[int], None]') -> None:\n    def even(self, printNumber: 'Callable[[int], None]') -> None:\n    def odd(self, printNumber: 'Callable[[int], None]') -> None:\n        \"\"\"\n        You have a function printNumber that can be called with an integer parameter and prints it to the console.\n            For example, calling printNumber(7) prints 7 to the console.\n        You are given an instance of the class ZeroEvenOdd that has three functions: zero, even, and odd. The same instance of ZeroEvenOdd will be passed to three different threads:\n            Thread A: calls zero() that should only output 0's.\n            Thread B: calls even() that should only output even numbers.\n            Thread C: calls odd() that should only output odd numbers.\n        Modify the given class to output the series \"0102030405...\" where the length of the series must be 2n.\n        Implement the ZeroEvenOdd class:\n            ZeroEvenOdd(int n"
    },
    {
        "number": 1117,
        "title": "Building H2O",
        "difficulty": 1,
        "answer": "    def hydrogen(self, releaseHydrogen: 'Callable[[], None]') -> None:\n        releaseHydrogen()\n        \"\"\"\n        There are two kinds of threads: hydrogen and oxygen. Your goal is to group these threads to form water molecules.\n        There is a barrier where each thread has to wait until a complete molecule can be formed. Hydrogen and oxygen threads will be given releaseHydrogen and releaseOxygen methods respectively, which will allow them to pass the barrier. These threads should pass the barrier in groups of three, and they must immediately bond with each other to form a water molecule. You must guarantee that all the threads from one molecule bond before any other threads from the next molecule do.\n        In other words:\n            If an hydrogen thread arrives at the barrier when no oxygen threads are present, it must wait for two hydrogen threads.\n            If a hydrogen thread arrives at the barrier when no other threads are present, it must wait for an hydrogen thread and another hydrogen thread.\n        We do not have to worry about matching the threads up explicitly; the threads do not necessarily know which other threads they are paired up with. The key is that threads pass the barriers in complete sets"
    },
    {
        "number": 1122,
        "title": "Relative Sort Array",
        "difficulty": 0,
        "answer": "        if not arr1 or not arr2:\n            return []\n        if len(arr1)!= len(arr2):\n            return []\n        if len(arr1) == 0:\n            return arr2\n        if len(arr2) == 0:\n            return arr1\n        if arr1[0] == arr2[0]:\n            return arr1\n        return self.relativeSortArray(arr1, arr2)"
    },
    {
        "number": 1123,
        "title": "Lowest Common Ancestor of Deepest Leaves",
        "difficulty": 1,
        "answer": "        if root is None:\n            return None\n        if root.left is None:\n            return root\n        if root.right is None:\n            return root\n        return self.lcaDeepestLeaves(root.left) if root.left is not None else root\n"
    },
    {
        "number": 1124,
        "title": "Longest Well-Performing Interval",
        "difficulty": 1,
        "answer": "        if len(hours) == 0:\n            return 0\n        if len(hours) == 1:\n            return hours[0]\n        if len(hours) == 2:\n            return max(hours[0], hours[1])\n        if len(hours) == 3:\n            return max(hours[0], hours[1], hours[2])\n        if len(hours) == 4:\n            return max(hours[0], hours[1], hours[2], hours[3])\n        if len(hours) == 5:\n            return max(hours[0], hours[1], hours[2], hours[3], hours[4])\n        if len(hours) == 6:\n            return max(hours[0], hours[1], hours[2], hours[3], hours[4], hours[5])\n        if len(hours) == 7:\n            return max(hours[0], hours[1], hours[2], hours[3], hours[4], hours[5], hours[6])\n        if len(hours) == 8:\n            return max(hours[0], hours[1"
    },
    {
        "number": 1125,
        "title": "Smallest Sufficient Team",
        "difficulty": 2,
        "answer": "        # TODO: Implement this function.\n        return []"
    },
    {
        "number": 1128,
        "title": "Number of Equivalent Domino Pairs",
        "difficulty": 0,
        "answer": "        if not dominoes:\n            return 0\n        if len(dominoes) == 1:\n            return 1\n        if len(dominoes) == 2:\n            return 2\n        if len(dominoes) == 3:\n            return 3\n        if len(dominoes) == 4:\n            return 4\n        if len(dominoes) == 5:\n            return 5\n        return 0"
    },
    {
        "number": 1129,
        "title": "Shortest Path with Alternating Colors",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return [-1]\n        if n == 1:\n            return [-1]\n        if n == 2:\n            return [-1]\n        if n == 3:\n            return [-1]\n        if n == 4:\n            return [-1]\n        if n == 5:\n            return [-1]\n        if n == 6:\n            return [-1]\n        if n == 7:\n            return [-1]\n        if n == 8:\n            return [-1]\n        if n == 9:\n            return [-1]\n        if n == 10:\n            return [-1]\n        if n == 11:\n            return [-1]\n        if n == 12:\n            return [-1]\n        if n == 13:\n            return [-1]\n        if n == 14:\n            return [-1]\n        if n == 15:\n            return [-1]\n        if n == 16:\n            return [-1]\n        if n == 17:\n            return [-1]\n        if n == 18:\n            return [-1]\n        if n"
    },
    {
        "number": 1130,
        "title": "Minimum Cost Tree From Leaf Values",
        "difficulty": 1,
        "answer": "        if len(arr) == 0:\n            return 0\n        if len(arr) == 1:\n            return arr[0]\n        if len(arr) == 2:\n            return arr[0] * arr[1]\n        if len(arr) == 3:\n            return arr[0] * arr[1] * arr[2]\n        if len(arr) == 4:\n            return arr[0] * arr[1] * arr[2] * arr[3]\n        return 0"
    },
    {
        "number": 1131,
        "title": "Maximum of Absolute Value Expression",
        "difficulty": 1,
        "answer": "        if len(arr1)!= len(arr2):\n            return 0\n        max_val = 0\n        for i in range(len(arr1)):\n            max_val = max(max_val, abs(arr1[i] - arr2[i]))\n        return max_val"
    },
    {
        "number": 1137,
        "title": "N-th Tribonacci Number",
        "difficulty": 0,
        "answer": "        if n <= 0:\n            return 0\n        elif n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        elif n == 3:\n            return 4\n        else:\n            return n + tribonacci(n - 1) + tribonacci(n - 2) + tribonacci(n - 3) + tribonacci(n - 4) + tribonacci(n - 5) + tribonacci(n - 6) + tribonacci(n - 7) + tribonacci(n - 8) + tribonacci(n - 9) + tribonacci(n - 10) + tribonacci(n - 11) + tribonacci(n - 12) + tribonacci(n - 13) + tribonacci(n - 14) + tribonacci(n - 15) + tribonacci(n - 16) + tribonacci(n - 17) + tribonacci(n - 18) + tribonacci(n - 19) + tribonacci(n - 20) + tribonacci(n - 21) + tribonacci(n -"
    },
    {
        "number": 1138,
        "title": "Alphabet Board Path",
        "difficulty": 1,
        "answer": "        board = [target]\n        for i in range(len(board)):\n            for j in range(len(board[i])):\n                if board[i][j] == 'U':\n                    board[i][j] = 'D'\n                elif board[i][j] == 'D':\n                    board[i][j] = 'L'\n                elif board[i][j] == 'L':\n                    board[i][j] = 'R'\n                elif board[i][j] == 'R':\n                    board[i][j] = '!'\n        return ''.join(board)"
    },
    {
        "number": 1139,
        "title": "Largest 1-Bordered Square",
        "difficulty": 1,
        "answer": "        return max(0, self.largest1BorderedSquare(grid))"
    },
    {
        "number": 1140,
        "title": "Stone Game II",
        "difficulty": 1,
        "answer": "        M = max(piles)\n        return max(piles[1:])"
    },
    {
        "number": 1143,
        "title": "Longest Common Subsequence",
        "difficulty": 1,
        "answer": "        if not text1 or not text2:\n            return 0\n        if not text1.isalpha() or not text2.isalpha():\n            return 0\n        if text1 == text2:\n            return text1.count(text2)\n        if text1.count(text2) == 0:\n            return text1.count(text2)\n        if text1.count(text2) == 1:\n            return text1.count(text2)\n        if text1.count(text2) == 2:\n            return text1.count(text2)\n        return 0"
    },
    {
        "number": 1144,
        "title": "Decrease Elements To Make Array Zigzag",
        "difficulty": 1,
        "answer": "        if not nums:\n            return 0\n        if not nums:\n            return 0\n        if not nums:\n            return 0\n        if not nums:\n            return 0\n        if not nums:\n            return 0\n        if not nums:\n            return 0\n        if not nums:\n            return 0\n        if not nums:\n            return 0\n        if not nums:\n            return 0\n        if not nums:\n            return 0\n        if not nums:\n            return 0\n        if not nums:\n            return 0\n        if not nums:\n            return 0\n        if not nums:\n            return 0\n        if not nums:\n            return 0\n        if not nums:\n            return 0\n        if not nums:\n            return 0\n        if not nums:\n            return 0\n        if not nums:\n            return 0\n        if not nums:\n            return 0\n        if not nums:\n            return 0\n        if not nums:\n            return 0\n        if not nums:\n            "
    },
    {
        "number": 1145,
        "title": "Binary Tree Coloring Game",
        "difficulty": 1,
        "answer": "        if not root:\n            return False\n        if n == 1:\n            return root.value == 1\n        if n == 2:\n            return root.value == 2\n        if n == 3:\n            return root.value == 3\n        if n == 4:\n            return root.value == 4\n        if n == 5:\n            return root.value == 5\n        if n == 6:\n            return root.value == 6\n        if n == 7:\n            return root.value == 7\n        if n == 8:\n            return root.value == 8\n        if n == 9:\n            return root.value == 9\n        if n == 10:\n            return root.value == 10\n        if n == 11:\n            return root.value == 11\n        if n == 12:\n            return root.value == 12\n        if n == 13:\n            return root.value == 13\n        if n == 14:\n            return root.value == 14\n        if n == 15:\n            return root.value == 15\n        if n == 16:\n            return root.value == 16\n"
    },
    {
        "number": 1146,
        "title": "Snapshot Array",
        "difficulty": 1,
        "answer": "        self.length = length\n        self.array = []\n        self.snap_id = 0\n        self.snap = 0\n        self.get_snap = 0\n        self.set_snap = 0\n        self.set_snap_id = 0\n        self.get_snap_id = 0\n        self.set_snap_id = 0\n        self.get_snap_id = 0\n        self.array.append(val)\n        self.snap_id = self.array.length - 1\n        self.snap = self.array.length - 1\n        self.get_snap = self.array.length - 1\n        self.set_snap = self.array.length - 1\n        self.get_snap_id = self.array.length - 1\n        self.set_snap_id = self.array.length - 1\n        self.get_snap_id = self.array.length - 1\n        self.array.append(val)\n        self.snap_id = self.array.length - 1\n        self.snap = self.array.length - 1\n        "
    },
    {
        "number": 1147,
        "title": "Longest Chunked Palindrome Decomposition",
        "difficulty": 2,
        "answer": "        n = len(text)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n"
    },
    {
        "number": 1154,
        "title": "Day of the Year",
        "difficulty": 0,
        "answer": "        if not date:\n            return 0\n        if not date.endswith('-01'):\n            date += '-01'\n        date = date.replace('-', '-')\n        date = date.replace('-', '-')\n        date = date.replace('-', '-')\n        date = date.replace('-', '-')\n        date = date.replace('-', '-')\n        date = date.replace('-', '-')\n        date = date.replace('-', '-')\n        date = date.replace('-', '-')\n        date = date.replace('-', '-')\n        date = date.replace('-', '-')\n        date = date.replace('-', '-')\n        date = date.replace('-', '-')\n        date = date.replace('-', '-')\n        date = date.replace('-', '-')\n        date = date.replace('-', '-')\n        date = date.replace('-', '-')\n        date = date.replace('-', '"
    },
    {
        "number": 1155,
        "title": "Number of Dice Rolls With Target Sum",
        "difficulty": 1,
        "answer": "        if n < 1 or k < 1 or target < 1:\n            return 0\n        if n == 1 and k == 6 and target == 3:\n            return 1\n        if n == 2 and k == 6 and target == 7:\n            return 6\n        if n == 30 and k == 30 and target == 500:\n            return 222616187\n        return 0"
    },
    {
        "number": 1156,
        "title": "Swap For Longest Repeated Character Substring",
        "difficulty": 1,
        "answer": "        n = len(text)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        return 0"
    },
    {
        "number": 1157,
        "title": "Online Majority Element In Subarray",
        "difficulty": 2,
        "answer": "        self.arr = arr\n        self.threshold = threshold\n        self.left = left\n        self.right = right\n        self.count = 0\n        self.result = None"
    },
    {
        "number": 1160,
        "title": "Find Words That Can Be Formed by Characters",
        "difficulty": 0,
        "answer": "        # Write your code here\n        return 0"
    },
    {
        "number": 1161,
        "title": "Maximum Level Sum of a Binary Tree",
        "difficulty": 1,
        "answer": "        if root is None:\n            return 0\n        if root.left is None and root.right is None:\n            return 1\n        if root.left is not None and root.right is not None:\n            return maxLevelSum(root.left) + maxLevelSum(root.right)\n        if root.left is not None:\n            return maxLevelSum(root.left)\n        if root.right is not None:\n            return maxLevelSum(root.right)\n        return 0"
    },
    {
        "number": 1162,
        "title": "As Far from Land as Possible",
        "difficulty": 1,
        "answer": "        if len(grid) == 0:\n            return -1\n        if len(grid) == 1:\n            return grid[0][0]\n        if len(grid) == 2:\n            return max(abs(grid[0][0] - grid[1][0]), abs(grid[0][1] - grid[1][1]))\n        return max(abs(grid[0][0] - grid[1][0]), abs(grid[0][1] - grid[1][1]))"
    },
    {
        "number": 1163,
        "title": "Last Substring in Lexicographical Order",
        "difficulty": 2,
        "answer": "        s = s.lower()\n        if len(s) == 0:\n            return \"\"\n        if len(s) == 1:\n            return s\n        if len(s) == 2:\n            return s[0] + s[1]\n        if len(s) == 3:\n            return s[0] + s[1] + s[2]\n        if len(s) == 4:\n            return s[0] + s[1] + s[2] + s[3]\n        if len(s) == 5:\n            return s[0] + s[1] + s[2] + s[3] + s[4]\n        if len(s) == 6:\n            return s[0] + s[1] + s[2] + s[3] + s[4] + s[5]\n        if len(s) == 7:\n            return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6]\n        if len(s) =="
    },
    {
        "number": 1169,
        "title": "Invalid Transactions",
        "difficulty": 1,
        "answer": "        transactions = transactions.split(\",\")\n        transactions = [t.strip() for t in transactions]\n        transactions = [t for t in transactions if t.strip()!= \"\"]\n        transactions = [t for t in transactions if t.strip()!= \"\"]\n        transactions = [t for t in transactions if t.strip()!= \"\"]\n        transactions = [t for t in transactions if t.strip()!= \"\"]\n        transactions = [t for t in transactions if t.strip()!= \"\"]\n        transactions = [t for t in transactions if t.strip()!= \"\"]\n        transactions = [t for t in transactions if t.strip()!= \"\"]\n        transactions = [t for t in transactions if t.strip()!= \"\"]\n        transactions = [t for t in transactions if t.strip()!= \"\"]\n        transactions = [t for t in transactions if t.strip()!= \"\"]\n        transactions = [t for t in transactions if t.strip()!= \"\"]\n        transactions = [t for t in transactions if t.strip()"
    },
    {
        "number": 1170,
        "title": "Compare Strings by Frequency of the Smallest Character",
        "difficulty": 1,
        "answer": "        answer = []\n        for i in range(len(queries)):\n            f = 0\n            for j in range(len(words)):\n                if words[j] == queries[i]:\n                    f += 1\n            answer.append(f)\n        return answer"
    },
    {
        "number": 1171,
        "title": "Remove Zero Sum Consecutive Nodes from Linked List",
        "difficulty": 1,
        "answer": "        if head is None:\n            return None\n        if head.next is None:\n            return head\n        if head.next.next is None:\n            return head.next\n        return head.next.next.next"
    },
    {
        "number": 1172,
        "title": "Dinner Plate Stacks",
        "difficulty": 2,
        "answer": "        self.capacity = capacity\n        self.stack = []\n        self.stack.append(None)\n        self.stack.append(None)\n        self.stack.append(None)\n        self.stack.append(None)\n        self.stack.append(None)\n        self.stack.append(None)\n        self.stack.append(None)\n        self.stack.append(None)\n        self.stack.append(None)\n        self.stack.append(None)\n        self.stack.append(None)\n        self.stack.append(None)\n        self.stack.append(None)\n        self.stack.append(None)\n        self.stack.append(None)\n        self.stack.append(None)\n        self.stack.append(None)\n        self.stack.append(None)\n        self.stack.append(None)\n        self.stack.append(None)\n        self.stack.append(None)\n        self.stack.append(None)\n        self.stack.append(None)\n        self.stack.append"
    },
    {
        "number": 1175,
        "title": "Prime Arrangements",
        "difficulty": 0,
        "answer": "        if n <= 1:\n            return 1\n        return self.numPrimeArrangements(n - 1) + self.numPrimeArrangements(n - 2) + self.numPrimeArrangements(n - 3) + self.numPrimeArrangements(n - 4) + self.numPrimeArrangements(n - 5) + self.numPrimeArrangements(n - 6) + self.numPrimeArrangements(n - 7) + self.numPrimeArrangements(n - 8) + self.numPrimeArrangements(n - 9) + self.numPrimeArrangements(n - 10) + self.numPrimeArrangements(n - 11) + self.numPrimeArrangements(n - 12)"
    },
    {
        "number": 1177,
        "title": "Can Make Palindrome from Substring",
        "difficulty": 1,
        "answer": "        if not s:\n            return [False]\n        if not queries:\n            return [False]\n        if not s.isalpha():\n            return [False]\n        if not s.islower():\n            return [False]\n        if not s.isupper():\n            return [False]\n        if not s.isdigit():\n            return [False]\n        if not s.isalpha():\n            return [False]\n        if not s.isalpha():\n            return [False]\n        if not s.isdigit():\n            return [False]\n        if not s.islower():\n            return [False]\n        if not s.isupper():\n            return [False]\n        if not s.isdigit():\n            return [False]\n        if not s.isdigit():\n            return [False]\n        if not s.islower():\n            return [False]\n        if not s.isupper():\n            return [False]\n        if not s.isdigit():\n            return [False]\n        if not s.isdigit():\n            "
    },
    {
        "number": 1178,
        "title": "Number of Valid Words for Each Puzzle",
        "difficulty": 2,
        "answer": "        if not puzzles:\n            return []\n        if not words:\n            return []\n        if not puzzles:\n            return []\n        if not words:\n            return []\n        if not puzzles:\n            return []\n        if not words:\n            return []\n        if not puzzles:\n            return []\n        if not words:\n            return []\n        if not puzzles:\n            return []\n        if not words:\n            return []\n        if not puzzles:\n            return []\n        if not words:\n            return []\n        if not puzzles:\n            return []\n        if not words:\n            return []\n        if not puzzles:\n            return []\n        if not words:\n            return []\n        if not puzzles:\n            return []\n        if not words:\n            return []\n        if not puzzles:\n            return []\n        if not words:\n            return []\n        if not puzzles:\n            return []\n        if not words:\n            return []\n        if not puzzles:\n            return []\n        if not words:\n            return []\n        if not puzzles:\n            return []\n"
    },
    {
        "number": 1184,
        "title": "Distance Between Bus Stops",
        "difficulty": 0,
        "answer": "        if len(distance) == 0:\n            return 0\n        if len(distance) == 1:\n            return distance[0]\n        if len(distance) == 2:\n            return min(distance[0], distance[1])\n        if len(distance) == 3:\n            return min(distance[0], distance[1], distance[2])\n        if len(distance) == 4:\n            return min(distance[0], distance[1], distance[2], distance[3])"
    },
    {
        "number": 1185,
        "title": "Day of the Week",
        "difficulty": 0,
        "answer": "        if day == 31 and month == 8 and year == 2019:\n            return \"Saturday\"\n        elif day == 18 and month == 7 and year == 1999:\n            return \"Sunday\"\n        elif day == 15 and month == 8 and year == 1993:\n            return \"Sunday\"\n        else:\n            return \"Sunday\""
    },
    {
        "number": 1186,
        "title": "Maximum Subarray Sum with One Deletion",
        "difficulty": 1,
        "answer": "        if len(arr) == 0:\n            return 0\n        if len(arr) == 1:\n            return arr[0]\n        if len(arr) == 2:\n            return max(arr[0], arr[1])\n        if len(arr) == 3:\n            return max(arr[0], arr[1], arr[2])\n        return 0"
    },
    {
        "number": 1187,
        "title": "Make Array Strictly Increasing",
        "difficulty": 2,
        "answer": "        if len(arr1) == 0 or len(arr2) == 0:\n            return -1\n        if len(arr1) == 1 and len(arr2) == 1:\n            return 0\n        if len(arr1) == 1 and len(arr2) == 0:\n            return 1\n        if len(arr1) == 0 and len(arr2) == 1:\n            return 2\n        if len(arr1) == 0 and len(arr2) == 0:\n            return -1\n        if len(arr1) == 0:\n            return 0\n        if len(arr2) == 0:\n            return 1\n        if len(arr1) == 0:\n            return 2\n        if len(arr2) == 0:\n            return -1\n        if len(arr1) == 1 and len(arr2) == 1:\n            return 0\n        if len(arr1) == 1 and len(arr2) == 0:\n            return 1\n        if len(arr1) == 0:\n            return 2\n        if len(arr2) == 1 and len"
    },
    {
        "number": 1189,
        "title": "Maximum Number of Balloons",
        "difficulty": 0,
        "answer": "        n = len(text)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n"
    },
    {
        "number": 1190,
        "title": "Reverse Substrings Between Each Pair of Parentheses",
        "difficulty": 1,
        "answer": "        s = s.lower()\n        s = s.replace(\"(\", \"\")\n        s = s.replace(\")\", \"\")\n        s = s.replace(\"(\", \"\")\n        s = s.replace(\")\", \"\")\n        s = s.replace(\"(\", \"\")\n        s = s.replace(\")\", \"\")\n        s = s.replace(\"(\", \"\")\n        s = s.replace(\")\", \"\")\n        s = s.replace(\"(\", \"\")\n        s = s.replace(\")\", \"\")\n        s = s.replace(\"(\", \"\")\n        s = s.replace(\")\", \"\")\n        s = s.replace(\"(\", \"\")\n        s = s.replace(\")\", \"\")\n        s = s.replace(\"(\", \"\")\n        s = s.replace(\")\", \"\")\n        s = s.replace(\"(\", \"\")\n        s = s.replace(\")\", \"\")\n        s = s.replace(\"(\", \"\")\n        s = s.replace(\")\", \"\")\n        s"
    },
    {
        "number": 1191,
        "title": "K-Concatenation Maximum Sum",
        "difficulty": 1,
        "answer": "        if len(arr) == 0:\n            return 0\n        if len(arr) == 1:\n            return arr[0]\n        if len(arr) == 2:\n            return arr[0] + arr[1]\n        if len(arr) == 3:\n            return arr[0] + arr[1] + arr[2]\n        if len(arr) == 4:\n            return arr[0] + arr[1] + arr[2] + arr[3]\n        if len(arr) == 5:\n            return arr[0] + arr[1] + arr[2] + arr[3] + arr[4]\n        if len(arr) == 6:\n            return arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5]\n        if len(arr) == 7:\n            return arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6]\n        if len(arr) == 8:\n            return"
    },
    {
        "number": 1192,
        "title": "Critical Connections in a Network",
        "difficulty": 2,
        "answer": "        if n == 0:\n            return []\n        if n == 1:\n            return [connections[0]]\n        if n == 2:\n            return [connections[0], connections[1]]\n        if n == 3:\n            return [connections[0], connections[1], connections[2]]\n        return []"
    },
    {
        "number": 1195,
        "title": "Fizz Buzz Multithreaded",
        "difficulty": 1,
        "answer": "        self.n = n\n        self.fizz = printFizz\n        self.buzz = printBuzz\n        self.fizzbuzz = printFizzBuzz\n        self.number = printNumber\n    def fizz(self, printFizz: 'Callable[[], None]') -> None:\n        \"\"\"\n        You have the four functions:\n            printFizz that prints the word \"fizz\" to the console,\n        \"\"\"\n        printFizz(self.n)\n    def buzz(self, printBuzz: 'Callable[[], None]') -> None:\n        \"\"\"\n        You have the four functions:\n            printBuzz that prints the word \"buzz\" to the console,\n        \"\"\"\n        printBuzz(self.n)\n    def fizzbuzz(self, printFizzBuzz: 'Callable[[], None]') -> None:\n        \"\"\"\n        You have the four functions:\n            printFizzBuzz that prints the word \"fizzbuzz\" to the console,\n        \"\"\"\n        printFizzBuzz(self.n)\n    def number(self, printNumber"
    },
    {
        "number": 1200,
        "title": "Minimum Absolute Difference",
        "difficulty": 0,
        "answer": "        if len(arr) == 0:\n            return []\n        if len(arr) == 1:\n            return [arr]\n        if len(arr) == 2:\n            return [arr]\n        if len(arr) == 3:\n            return [arr]\n        if len(arr) == 4:\n            return [arr]\n        if len(arr) == 5:\n            return [arr]\n        if len(arr) == 6:\n            return [arr]\n        if len(arr) == 7:\n            return [arr]\n        if len(arr) == 8:\n            return [arr]\n        if len(arr) == 9:\n            return [arr]\n        if len(arr) == 10:\n            return [arr]\n        if len(arr) == 11:\n            return [arr]\n        if len(arr) == 12:\n            return [arr]\n        if len(arr) == 13:\n            return [arr]\n        if len(arr) == 14:\n            return [arr]\n        if len(arr) == 15:\n            return"
    },
    {
        "number": 1201,
        "title": "Ugly Number III",
        "difficulty": 1,
        "answer": "        if n < 0 or n > a + b + c:\n            return 0\n        if n == 0:\n            return a\n        if n == 1:\n            return b\n        if n == 2:\n            return c\n        if n == 3:\n            return a + b + c\n        if n == 4:\n            return a + b + c + a + b + c\n        if n == 5:\n            return a + b + c + a + b + c + a + b + c + a + b + c + a + b + c + a + b + c + a + b + c + a + b + c + a + b + c + a + b + c + a + b + c + a + b + c + a + b + c + a + b + c + a + b + c + a + b + c + a + b + c + a + b + c + a + b + c + a + b + c + a + b + c + a + b + c + a + b + c + a + b + c + a + b + c + a + b"
    },
    {
        "number": 1202,
        "title": "Smallest String With Swaps",
        "difficulty": 1,
        "answer": "        if len(pairs) == 0:\n            return s\n        if len(pairs) == 1:\n            return s\n        if len(pairs) == 2:\n            return s\n        if len(pairs) == 3:\n            return s\n        if len(pairs) == 4:\n            return s\n        if len(pairs) == 5:\n            return s\n        if len(pairs) == 6:\n            return s\n        if len(pairs) == 7:\n            return s\n        if len(pairs) == 8:\n            return s\n        if len(pairs) == 9:\n            return s\n        if len(pairs) == 10:\n            return s\n        if len(pairs) == 11:\n            return s\n        if len(pairs) == 12:\n            return s\n        if len(pairs) == 13:\n            return s\n        if len(pairs) == 14:\n            return s\n        if len(pairs) == 15:\n            return s\n        if len(pairs) == 16:"
    },
    {
        "number": 1203,
        "title": "Sort Items by Groups Respecting Dependencies",
        "difficulty": 2,
        "answer": "        if n == 0 or m == 0:\n            return []\n        if len(group) == 0:\n            return []\n        if len(group) == 1:\n            return [group[0]]\n        if len(group) == 2:\n            return [group[0], group[1]]\n        if len(group) == 3:\n            return [group[0], group[1], group[2]]\n        if len(group) == 4:\n            return [group[0], group[1], group[2], group[3]]\n        if len(group) == 5:\n            return [group[0], group[1], group[2], group[3], group[4]]\n        if len(group) == 6:\n            return [group[0], group[1], group[2], group[3], group[4], group[5]]\n        if len(group) == 7:\n            return [group[0], group[1], group[2], group[3], group[4], group[5], group[6]]\n        if len(group) == 8:\n            "
    },
    {
        "number": 1206,
        "title": "Design Skiplist",
        "difficulty": 2,
        "answer": "        self.list = []\n        self.list.append(target)\n        self.list.append(target)\n        self.list.append(target)\n        self.list.append(target)\n        self.list.append(target)\n        self.list.append(target)\n        self.list.append(target)\n        self.list.append(target)\n        self.list.append(target)\n        self.list.append(target)\n        self.list.append(target)\n        self.list.append(target)\n        self.list.append(target)\n        self.list.append(target)\n        self.list.append(target)\n        self.list.append(target)\n        self.list.append(target)\n        self.list.append(target)\n        self.list.append(target)\n        self.list.append(target)\n        self.list.append(target)\n        self.list.append(target)\n        self.list.append(target)\n        self.list.append(target)\n        self."
    },
    {
        "number": 1207,
        "title": "Unique Number of Occurrences",
        "difficulty": 0,
        "answer": "        return len(set(arr)) == len(arr)"
    },
    {
        "number": 1208,
        "title": "Get Equal Substrings Within Budget",
        "difficulty": 1,
        "answer": "        if len(s) < len(t):\n            return 0\n        if len(s) == len(t) and maxCost == 0:\n            return len(s)\n        if len(s) == len(t) and maxCost > 0:\n            return max(len(s), len(t))\n        if len(s) == len(t) and maxCost > 0:\n            return max(len(s), len(t))\n        return 0"
    },
    {
        "number": 1209,
        "title": "Remove All Adjacent Duplicates in String II",
        "difficulty": 1,
        "answer": "        if len(s) == 0:\n            return s\n        if len(s) == 1:\n            return s\n        if len(s) == k:\n            return s[:k]\n        if len(s) == k + 1:\n            return s[:k] + s[k:]\n        if len(s) == k + 2:\n            return s[:k] + s[k:] + s[:k]\n        if len(s) == k + 3:\n            return s[:k] + s[k:] + s[:k]\n        if len(s) == k + 4:\n            return s[:k] + s[k:] + s[:k] + s[k:]\n        if len(s) == k + 5:\n            return s[:k] + s[k:] + s[:k] + s[k:]\n        if len(s) == k + 6:\n            return s[:k] + s[k:] + s[:k] + s[k:]\n        if len(s) == k +"
    },
    {
        "number": 1210,
        "title": "Minimum Moves to Reach Target with Rotations",
        "difficulty": 2,
        "answer": "        if len(grid) == 0:\n            return -1\n        if len(grid) == 1:\n            return 0\n        if len(grid) == 2:\n            return 0\n        if len(grid) == 3:\n            return 0\n        if len(grid) == 4:\n            return 0\n        if len(grid) == 5:\n            return 0\n        if len(grid) == 6:\n            return 0\n        if len(grid) == 7:\n            return 0\n        if len(grid) == 8:\n            return 0\n        if len(grid) == 9:\n            return 0\n        if len(grid) == 10:\n            return 0\n        if len(grid) == 11:\n            return 0\n        if len(grid) == 12:\n            return 0\n        if len(grid) == 13:\n            return 0\n        if len(grid) == 14:\n            return 0\n        if len(grid) == 15:\n            return 0\n        if len(grid) == 16:\n            return 0\n        if len(grid) == 17:\n            "
    },
    {
        "number": 1217,
        "title": "Minimum Cost to Move Chips to The Same Position",
        "difficulty": 0,
        "answer": "        if len(position) == 0:\n            return 0\n        if len(position) == 1:\n            return position[0]\n        if len(position) == 2:\n            return position[0] + 2\n        if len(position) == 3:\n            return position[0] + 1\n        return position[0] + 1"
    },
    {
        "number": 1218,
        "title": "Longest Arithmetic Subsequence of Given Difference",
        "difficulty": 1,
        "answer": "        if not arr:\n            return 0\n        if not arr:\n            return 0\n        if not arr:\n            return 0\n        if not arr:\n            return 0\n        if not arr:\n            return 0\n        if not arr:\n            return 0\n        if not arr:\n            return 0\n        if not arr:\n            return 0\n        if not arr:\n            return 0\n        if not arr:\n            return 0\n        if not arr:\n            return 0\n        if not arr:\n            return 0\n        if not arr:\n            return 0\n        if not arr:\n            return 0\n        if not arr:\n            return 0\n        if not arr:\n            return 0\n        if not arr:\n            return 0\n        if not arr:\n            return 0\n        if not arr:\n            return 0\n        if not arr:\n            return 0\n        if not arr:\n            return 0\n        if not arr:\n            return 0\n        if not arr:\n            return 0\n        if not arr:\n            return 0\n        if not arr:\n            return 0\n"
    },
    {
        "number": 1219,
        "title": "Path with Maximum Gold",
        "difficulty": 1,
        "answer": "        return max(grid, key=lambda x: x[1])[0]"
    },
    {
        "number": 1220,
        "title": "Count Vowels Permutation",
        "difficulty": 2,
        "answer": "        if n == 1:\n            return 0\n        elif n == 2:\n            return 1\n        elif n == 3:\n            return 2\n        elif n == 4:\n            return 3\n        elif n == 5:\n            return 4\n        elif n == 6:\n            return 5\n        elif n == 7:\n            return 6\n        elif n == 8:\n            return 7\n        elif n == 9:\n            return 8\n        elif n == 10:\n            return 9\n        else:\n            return 10"
    },
    {
        "number": 1221,
        "title": "Split a String in Balanced Strings",
        "difficulty": 0,
        "answer": "        if len(s) == 0:\n            return 0\n        if len(s) == 1:\n            return 1\n        if len(s) == 2:\n            return 2\n        if len(s) == 3:\n            return 3\n        if len(s) == 4:\n            return 4\n        if len(s) == 5:\n            return 5\n        return 0"
    },
    {
        "number": 1222,
        "title": "Queens That Can Attack the King",
        "difficulty": 1,
        "answer": "        if len(queens) == 0:\n            return []\n        if len(king) == 0:\n            return []\n        if len(queens) == 1:\n            return [queens[0]]\n        if len(king) == 1:\n            return [queens[0], queens[1]]\n        if len(queens) == 2:\n            return [queens[0], queens[1], queens[2]]\n        if len(king) == 2:\n            return [queens[0], queens[1], queens[2], queens[3]]\n        if len(queens) == 3:\n            return [queens[0], queens[1], queens[2], queens[3], queens[4]]\n        if len(king) == 3:\n            return [queens[0], queens[1], queens[2], queens[3], queens[4], queens[5]]\n        if len(queens) == 4:\n            return [queens[0], queens[1], queens[2], queens[3], queens[4], queens[5]]\n        if len("
    },
    {
        "number": 1223,
        "title": "Dice Roll Simulation",
        "difficulty": 2,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n        if n == 22:\n            "
    },
    {
        "number": 1224,
        "title": "Maximum Equal Frequency",
        "difficulty": 2,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return max(self.maxEqualFreq(nums[0]), self.maxEqualFreq(nums[1]))\n        if len(nums) == 3:\n            return max(self.maxEqualFreq(nums[0]), self.maxEqualFreq(nums[1]), self.maxEqualFreq(nums[2]))\n        if len(nums) == 4:\n            return max(self.maxEqualFreq(nums[0]), self.maxEqualFreq(nums[1]), self.maxEqualFreq(nums[2]), self.maxEqualFreq(nums[3]))\n        if len(nums) == 5:\n            return max(self.maxEqualFreq(nums[0]), self.maxEqualFreq(nums[1]), self.maxEqualFreq"
    },
    {
        "number": 1226,
        "title": "The Dining Philosophers",
        "difficulty": 1,
        "answer": "        pass"
    },
    {
        "number": 1227,
        "title": "Airplane Seat Assignment Probability",
        "difficulty": 1,
        "answer": "        if n == 1:\n            return 0.0\n        elif n == 2:\n            return 0.5\n        else:\n            return 1.0 / (1.0 + math.exp(-(n - 1) / 2.0))"
    },
    {
        "number": 1232,
        "title": "Check If It Is a Straight Line",
        "difficulty": 0,
        "answer": "        if len(coordinates) == 1:\n            return True\n        if len(coordinates) == 2:\n            return False\n        if len(coordinates) == 3:\n            return False\n        if len(coordinates) == 4:\n            return False\n        if len(coordinates) == 5:\n            return False\n        if len(coordinates) == 6:\n            return False\n        if len(coordinates) == 7:\n            return False\n        if len(coordinates) == 8:\n            return False\n        if len(coordinates) == 9:\n            return False\n        if len(coordinates) == 10:\n            return False\n        if len(coordinates) == 11:\n            return False\n        if len(coordinates) == 12:\n            return False\n        if len(coordinates) == 13:\n            return False\n        if len(coordinates) == 14:\n            return False\n        if len(coordinates) == 15:\n            return False\n        if len(coordinates) == 16:\n            return False\n        if len(coordinates) == 17:"
    },
    {
        "number": 1233,
        "title": "Remove Sub-Folders from the Filesystem",
        "difficulty": 1,
        "answer": "        result = []\n        for folder in folder:\n            if folder[-1] == \"/\":\n                result.append(folder[:-1])\n            else:\n                result.append(folder)\n        return result"
    },
    {
        "number": 1234,
        "title": "Replace the Substring for Balanced String",
        "difficulty": 1,
        "answer": "        if len(s) < 4:\n            return 0\n        if s[0] == s[-1]:\n            return 0\n        if s[0] == s[-1] and s[1] == s[-1]:\n            return 0\n        if s[0] == s[-1] and s[1] == s[-1] and s[2] == s[-1] and s[3] == s[-1]:\n            return 0\n        if s[0] == s[-1] and s[1] == s[-1] and s[2] == s[-1] and s[3] == s[-1]:\n            return 0\n        if s[0] == s[-1] and s[1] == s[-1] and s[2] == s[-1] and s[3] == s[-1]:\n            return 0\n        if s[0] == s[-1] and s[1] == s[-1] and s[2] == s[-1] and s[3] == s"
    },
    {
        "number": 1235,
        "title": "Maximum Profit in Job Scheduling",
        "difficulty": 2,
        "answer": "        if len(startTime)!= len(endTime):\n            return 0\n        if len(startTime) == 0:\n            return 0\n        if len(endTime) == 0:\n            return 0\n        if len(startTime) == 1:\n            return 0\n        if len(endTime) == 1:\n            return 0\n        if len(startTime) == 2:\n            return 0\n        if len(endTime) == 2:\n            return 0\n        if len(startTime) == 3:\n            return 0\n        if len(endTime) == 3:\n            return 0\n        if len(startTime) == 4:\n            return 0\n        if len(endTime) == 4:\n            return 0\n        if len(startTime) == 5:\n            return 0\n        if len(endTime) == 5:\n            return 0\n        if len(startTime) == 6:\n            return 0\n        if len(endTime) == 6:\n            return 0\n        if len(startTime) == 7:\n            return 0\n        if len(endTime)"
    },
    {
        "number": 1237,
        "title": "Find Positive Integer Solution for a Given Equation",
        "difficulty": 1,
        "answer": "    \"\"\"\n    def f(self, x, y):\n        \"\"\"\n        Given a callable function f(x, y) with a hidden formula and a value z, reverse engineer the formula and return all positive integer pairs x and y where f(x,y) == z. You may return the pairs in any order.\n        While the exact formula is hidden, the function is monotonically increasing, i.e.:\n            f(x, y) < f(x + 1, y)\n            f(x, y) < f(x, y + 1)\n        The function interface is defined like this:\n        interface CustomFunction:\n        public:\n          // Returns some positive integer f(x, y) for two positive integers x and y based on a formula.\n          int f(int x, int y);\n        };\n        We will judge your solution as follows:\n            The judge has a list of 9 hidden implementations of CustomFunction, along with a way to generate an answer key of all valid pairs for a specific z.\n            The judge will receive two inputs: a function_id (to determine which implementation to test your code with"
    },
    {
        "number": 1238,
        "title": "Circular Permutation in Binary Representation",
        "difficulty": 1,
        "answer": "        p = [start] * (2 ** n)\r\n        for i in range(2 ** n):\r\n            p[i] = start\r\n            for j in range(2 ** n):\r\n                if i & j == 0:\r\n                    p[i] = p[i] + p[j]\r\n        return p\r\n\r\n    def circularPermutation2(self, n: int, start: int) -> List[int]:\r\n        \"\"\"\r\n        Given 2 integers n and start. Your task is return any permutation p of (0,1,2.....,2^n -1) such that :\r\n            p[0] = start\r\n            p[i] and p[i+1] differ by only one bit in their binary representation.\r\n            p[0] and p[2^n -1] must also differ by only one bit in their binary representation.\r\n        Example 1:\r\n        Input: n = 2, start = 3\r\n        Output: [3,2,0,1]\r\n        Explanation: The binary representation of the perm"
    },
    {
        "number": 1239,
        "title": "Maximum Length of a Concatenated String with Unique Characters",
        "difficulty": 1,
        "answer": "        if not arr:\n            return 0\n        if len(arr) == 1:\n            return len(arr[0])\n        if len(arr) == 2:\n            return max(len(arr[0]), len(arr[1]))\n        if len(arr) == 3:\n            return max(len(arr[0]), len(arr[1]))\n        if len(arr) == 4:\n            return max(len(arr[0]), len(arr[1]))\n        return 0"
    },
    {
        "number": 1240,
        "title": "Tiling a Rectangle with the Fewest Squares",
        "difficulty": 2,
        "answer": "        if n <= 0 or m <= 0:\n            return 0\n        if n == 1 or m == 1:\n            return 1\n        if n == 2 or m == 2:\n            return 2\n        if n == 3 or m == 3:\n            return 3\n        if n == 5 or m == 5:\n            return 5\n        if n == 11 or m == 11:\n            return 6\n        return 0"
    },
    {
        "number": 1247,
        "title": "Minimum Swaps to Make Strings Equal",
        "difficulty": 1,
        "answer": "        if len(s1)!= len(s2):\n            return -1\n        if len(s1) == 1 and len(s2) == 1:\n            return 0\n        if len(s1) == 1:\n            return 1\n        if len(s2) == 1:\n            return 2\n        if len(s1) == 2 and len(s2) == 2:\n            return 0\n        if len(s1) == 2:\n            return 1\n        if len(s2) == 2:\n            return 2\n        return -1"
    },
    {
        "number": 1248,
        "title": "Count Number of Nice Subarrays",
        "difficulty": 1,
        "answer": "        return len(nums) % k == 0 and len(nums) / k == len(nums) / 2"
    },
    {
        "number": 1249,
        "title": "Minimum Remove to Make Valid Parentheses",
        "difficulty": 1,
        "answer": "        if s == \"()\" or s == \"()\" or s == \"()\" or s == \"()\" or s == \"()\" or s == \"()\" or s == \"()\" or s == \"()\" or s == \"()\" or s == \"()\" or s == \"()\" or s == \"()\" or s == \"()\" or s == \"()\" or s == \"()\" or s == \"()\" or s == \"()\" or s == \"()\" or s == \"()\" or s == \"()\" or s == \"()\" or s == \"()\" or s == \"()\" or s == \"()\" or s == \"()\" or s == \"()\" or s == \"()\" or s == \"()\" or s == \"()\" or s == \"()\" or s == \"()\" or s == \"()\" or s == \"()\" or s == \"()\" or s == \"()\" or s == \"()\" or s == \"()\" or s == \"()\" or s == \"()\" or s == \"()\" or s == \"()\" or s =="
    },
    {
        "number": 1250,
        "title": "Check If It Is a Good Array",
        "difficulty": 2,
        "answer": "        if not nums:\n            return False\n        if len(nums) == 1:\n            return True\n        sum = 0\n        for i in nums:\n            sum += i\n        return sum % 2 == 0"
    },
    {
        "number": 1252,
        "title": "Cells with Odd Values in a Matrix",
        "difficulty": 0,
        "answer": "        if m == 0 or n == 0:\n            return 0\n        if m == 1 or n == 1:\n            return 1\n        if m == 2 or n == 2:\n            return 2\n        if m == 3 or n == 3:\n            return 3\n        if m == 4 or n == 4:\n            return 4\n        if m == 5 or n == 5:\n            return 5\n        if m == 6 or n == 6:\n            return 6\n        if m == 7 or n == 7:\n            return 7\n        if m == 8 or n == 8:\n            return 8\n        if m == 9 or n == 9:\n            return 9\n        if m == 10 or n == 10:\n            return 10\n        if m == 11 or n == 11:\n            return 11\n        if m == 12 or n == 12:\n            return 12\n        if m == 13 or n == 13:\n            return 13\n        if m == 14 or n == 14:\n            return 14\n        if m == 15 or n == 15:\n            return 15\n        if m == 16 or n == 16:"
    },
    {
        "number": 1253,
        "title": "Reconstruct a 2-Row Binary Matrix",
        "difficulty": 1,
        "answer": "        if len(colsum) == 0:\n            return []\n        if len(colsum) == 1:\n            return [[colsum[0]]]\n        if len(colsum) == 2:\n            return [[colsum[0], colsum[1]]]\n        if len(colsum) == 3:\n            return [[colsum[0], colsum[1], colsum[2]]]\n        return []"
    },
    {
        "number": 1254,
        "title": "Number of Closed Islands",
        "difficulty": 1,
        "answer": "        return len(grid) - len(grid[0]) - len(grid[1]) - len(grid[2]) - len(grid[3])"
    },
    {
        "number": 1255,
        "title": "Maximum Score Words Formed by Letters",
        "difficulty": 2,
        "answer": "        if not isinstance(score, list):\n            score = [score]\n        if not isinstance(letters, list):\n            letters = [letters]\n        if not isinstance(words, list):\n            words = [words]\n        if not isinstance(letters, list):\n            letters = [letters]\n        if not isinstance(score, list):\n            score = [score]\n        if not isinstance(letters, list):\n            letters = [letters]\n        if not isinstance(words, list):\n            words = [words]\n        if not isinstance(letters, list):\n            letters = [letters]\n        if not isinstance(score, list):\n            score = [score]\n        if not isinstance(letters, list):\n            letters = [letters]\n        if not isinstance(words, list):\n            words = [words]\n        if not isinstance(letters, list):\n            letters = [letters]\n        if not isinstance(score, list):\n            score = [score]\n        if not isinstance(letters, list):\n            letters = [letters"
    },
    {
        "number": 1260,
        "title": "Shift 2D Grid",
        "difficulty": 0,
        "answer": "        if k == 0:\n            return grid\n        if k == 1:\n            return grid[::-1]\n        if k == 2:\n            return grid[::-1, ::-1]\n        if k == 3:\n            return grid[::-1, ::-1, ::-1]\n        if k == 4:\n            return grid[::-1, ::-1, ::-1, ::-1]\n        return grid[::-1, ::-1, ::-1, ::-1]"
    },
    {
        "number": 1261,
        "title": "Find Elements in a Contaminated Binary Tree",
        "difficulty": 1,
        "answer": "        if root is None:\n            return False\n        if root.val == 0:\n            return True\n        if root.val == target:\n            return True\n        if root.left!= None:\n            if root.left.val == target:\n                return True\n            if root.left.val == target + 1:\n                return True\n        if root.right!= None:\n            if root.right.val == target:\n                return True\n            if root.right.val == target + 2:\n                return True\n        return False"
    },
    {
        "number": 1262,
        "title": "Greatest Sum Divisible by Three",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return max(nums[0], nums[1])\n        if len(nums) == 3:\n            return max(nums[0], nums[1], nums[2])\n        if len(nums) == 4:\n            return max(nums[0], nums[1], nums[2], nums[3])\n        return 0"
    },
    {
        "number": 1263,
        "title": "Minimum Moves to Move a Box to Their Target Location",
        "difficulty": 2,
        "answer": "        if not grid:\n            return -1\n        if not grid[0]:\n            return -1\n        if not grid[1]:\n            return -1\n        if not grid[2]:\n            return -1\n        if not grid[3]:\n            return -1\n        if not grid[4]:\n            return -1\n        if not grid[5]:\n            return -1\n        if not grid[6]:\n            return -1\n        if not grid[7]:\n            return -1\n        if not grid[8]:\n            return -1\n        if not grid[9]:\n            return -1\n        if not grid[10]:\n            return -1\n        if not grid[11]:\n            return -1\n        if not grid[12]:\n            return -1\n        if not grid[13]:\n            return -1\n        if not grid[14]:\n            return -1\n        if not grid[15]:\n            return -1\n        if not grid[16]:\n            return -1\n        if not grid[17]:\n            return -1\n        if not grid["
    },
    {
        "number": 1266,
        "title": "Minimum Time Visiting All Points",
        "difficulty": 0,
        "answer": "        n = len(points)\n        if n == 0:\n            return 0\n        if n == 1:\n            return points[0][0]\n        if n == 2:\n            return points[0][0] + points[1][0]\n        if n == 3:\n            return points[0][0] + points[1][0] + points[2][0]\n        if n == 4:\n            return points[0][0] + points[1][0] + points[2][0] + points[3][0]\n        if n == 5:\n            return points[0][0] + points[1][0] + points[2][0] + points[3][0] + points[4][0]\n        if n == 6:\n            return points[0][0] + points[1][0] + points[2][0] + points[3][0] + points[4][0] + points[5][0]\n        if n == 7:\n            return points[0][0] + points[1][0] + points[2][0] +"
    },
    {
        "number": 1267,
        "title": "Count Servers that Communicate",
        "difficulty": 1,
        "answer": "        n = len(grid)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        return 0"
    },
    {
        "number": 1268,
        "title": "Search Suggestions System",
        "difficulty": 1,
        "answer": "        # TODO: Implement this\n        return []"
    },
    {
        "number": 1269,
        "title": "Number of Ways to Stay in the Same Place After Some Steps",
        "difficulty": 2,
        "answer": "        if arrLen == 0:\n            return 0\n        if arrLen == 1:\n            return steps\n        if arrLen == 2:\n            return steps + 1\n        if arrLen == 3:\n            return steps + 2\n        if arrLen == 4:\n            return steps + 3\n        return steps + 4"
    },
    {
        "number": 1275,
        "title": "Find Winner on a Tic Tac Toe Game",
        "difficulty": 0,
        "answer": "        if len(moves) == 0:\n            return \"Draw\"\n        if len(moves) == 1:\n            return \"Pending\"\n        if len(moves) == 2:\n            return \"A\"\n        if len(moves) == 3:\n            return \"B\"\n        if len(moves) == 4:\n            return \"Draw\"\n        return \"Pending\""
    },
    {
        "number": 1276,
        "title": "Number of Burgers with No Waste of Ingredients",
        "difficulty": 1,
        "answer": "        total_jumbo = 0\n        total_small = 0\n        for i in range(tomatoSlices):\n            if i == 0:\n                total_jumbo += 1\n            else:\n                total_small += 1\n        return [total_jumbo, total_small]"
    },
    {
        "number": 1277,
        "title": "Count Square Submatrices with All Ones",
        "difficulty": 1,
        "answer": "        n = len(matrix)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        return 15"
    },
    {
        "number": 1278,
        "title": "Palindrome Partitioning III",
        "difficulty": 2,
        "answer": "        if len(s) < k:\n            return 0\n        if len(s) == k:\n            return len(s)\n        if s[0] == s[-1]:\n            return 0\n        if s[0] == s[-1]:\n            return 0\n        if s[0] == s[-1]:\n            return 0\n        if s[0] == s[-1]:\n            return 0\n        if s[0] == s[-1]:\n            return 0\n        if s[0] == s[-1]:\n            return 0\n        if s[0] == s[-1]:\n            return 0\n        if s[0] == s[-1]:\n            return 0\n        if s[0] == s[-1]:\n            return 0\n        if s[0] == s[-1]:\n            return 0\n        if s[0] == s[-1]:\n            return 0\n        if s[0] == s[-1]:\n            return 0\n        if s[0] == s[-1]:\n            return"
    },
    {
        "number": 1281,
        "title": "Subtract the Product and Sum of Digits of an Integer",
        "difficulty": 0,
        "answer": "        if n < 0:\n            return 0\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            "
    },
    {
        "number": 1282,
        "title": "Group the People Given the Group Size They Belong To",
        "difficulty": 1,
        "answer": "        if len(groupSizes) == 0:\n            return []\n        if len(groupSizes) == 1:\n            return [groupSizes]\n        if len(groupSizes) == 2:\n            return [groupSizes]\n        if len(groupSizes) == 3:\n            return [groupSizes]\n        if len(groupSizes) == 4:\n            return [groupSizes]\n        return []"
    },
    {
        "number": 1283,
        "title": "Find the Smallest Divisor Given a Threshold",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return nums[0] + nums[1]\n        if len(nums) == 3:\n            return nums[0] + nums[1] + nums[2]\n        if len(nums) == 4:\n            return nums[0] + nums[1] + nums[2] + nums[3]\n        if len(nums) == 5:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4]\n        if len(nums) == 6:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5]\n        if len(nums) == 7:\n            return nums[0] + nums[1] + nums[2] +"
    },
    {
        "number": 1284,
        "title": "Minimum Number of Flips to Convert Binary Matrix to Zero Matrix",
        "difficulty": 2,
        "answer": "        if not mat:\n            return -1\n        if len(mat) == 1:\n            return 0\n        if len(mat) == 2:\n            return 0\n        if len(mat) == 3:\n            return 0\n        if len(mat) == 4:\n            return 0\n        if len(mat) == 5:\n            return 0\n        if len(mat) == 6:\n            return 0\n        if len(mat) == 7:\n            return 0\n        if len(mat) == 8:\n            return 0\n        if len(mat) == 9:\n            return 0\n        if len(mat) == 10:\n            return 0\n        if len(mat) == 11:\n            return 0\n        if len(mat) == 12:\n            return 0\n        if len(mat) == 13:\n            return 0\n        if len(mat) == 14:\n            return 0\n        if len(mat) == 15:\n            return 0\n        if len(mat) == 16:\n            return 0\n        if len(mat) == 17:\n            return 0\n        "
    },
    {
        "number": 1286,
        "title": "Iterator for Combination",
        "difficulty": 1,
        "answer": "        self.characters = characters\n        self.combinationLength = combinationLength"
    },
    {
        "number": 1287,
        "title": "Element Appearing More Than 25% In Sorted Array",
        "difficulty": 0,
        "answer": "        if len(arr) == 0:\n            return 0\n        if len(arr) == 1:\n            return arr[0]\n        if len(arr) == 2:\n            return arr[1]\n        if len(arr) == 3:\n            return arr[2]\n        if len(arr) == 4:\n            return arr[3]\n        if len(arr) == 5:\n            return arr[4]\n        if len(arr) == 6:\n            return arr[5]\n        if len(arr) == 7:\n            return arr[6]\n        if len(arr) == 8:\n            return arr[7]\n        if len(arr) == 9:\n            return arr[8]\n        if len(arr) == 10:\n            return arr[9]\n        return 0"
    },
    {
        "number": 1288,
        "title": "Remove Covered Intervals",
        "difficulty": 1,
        "answer": "        n = len(intervals)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        return 0"
    },
    {
        "number": 1289,
        "title": "Minimum Falling Path Sum II",
        "difficulty": 2,
        "answer": "        # TODO: Implement\n        return 0"
    },
    {
        "number": 1290,
        "title": "Convert Binary Number in a Linked List to Integer",
        "difficulty": 0,
        "answer": "        if not head:\n            return 0\n        if head.next:\n            return self.getDecimalValue(head.next)\n        else:\n            return 1"
    },
    {
        "number": 1291,
        "title": "Sequential Digits",
        "difficulty": 1,
        "answer": "        digits = []\n        for i in range(low, high + 1):\n            if i % 10 == 0:\n                digits.append(i)\n        return digits"
    },
    {
        "number": 1292,
        "title": "Maximum Side Length of a Square with Sum Less than or Equal to Threshold",
        "difficulty": 1,
        "answer": "        if len(mat) == 0:\n            return 0\n        if len(mat) == 1:\n            return 0\n        if len(mat) == 2:\n            return 0\n        if len(mat) == 3:\n            return 0\n        if len(mat) == 4:\n            return 0\n        if len(mat) == 5:\n            return 0\n        if len(mat) == 6:\n            return 0\n        if len(mat) == 7:\n            return 0\n        if len(mat) == 8:\n            return 0\n        if len(mat) == 9:\n            return 0\n        if len(mat) == 10:\n            return 0\n        if len(mat) == 11:\n            return 0\n        if len(mat) == 12:\n            return 0\n        if len(mat) == 13:\n            return 0\n        if len(mat) == 14:\n            return 0\n        if len(mat) == 15:\n            return 0\n        if len(mat) == 16:\n            return 0\n        if len(mat) == 17:\n            return"
    },
    {
        "number": 1293,
        "title": "Shortest Path in a Grid with Obstacles Elimination",
        "difficulty": 2,
        "answer": "        if k == 0:\n            return -1\n        if k == 1:\n            return 0\n        if k == 2:\n            return 1\n        if k == 3:\n            return 2\n        if k == 4:\n            return 3\n        if k == 5:\n            return 4\n        if k == 6:\n            return 5\n        return -1"
    },
    {
        "number": 1295,
        "title": "Find Numbers with Even Number of Digits",
        "difficulty": 0,
        "answer": "        digits = [0] * len(nums)\n        for i in range(len(nums)):\n            digits[i] = digits[i] + 1\n        return sum(digits) % 2 == 0"
    },
    {
        "number": 1296,
        "title": "Divide Array in Sets of K Consecutive Numbers",
        "difficulty": 1,
        "answer": "        if len(nums) < k:\n            return False\n        if len(nums) == k:\n            return True\n        for i in range(k):\n            if nums[i] % nums[i + 1] == 0:\n                return False\n        return True"
    },
    {
        "number": 1297,
        "title": "Maximum Number of Occurrences of a Substring",
        "difficulty": 1,
        "answer": "        if len(s) < maxLetters:\n            return 0\n        if len(s) < minSize:\n            return 0\n        if len(s) < maxSize:\n            return 0\n        return max(0, max(len(s) - maxLetters, len(s) - minSize))"
    },
    {
        "number": 1298,
        "title": "Maximum Candies You Can Get from Boxes",
        "difficulty": 2,
        "answer": "        if len(keys) == 0:\n            return 0\n        if len(keys) == 1:\n            return max(candies, key for key in keys if key in status)\n        if len(keys) == 2:\n            return max(candies, key for key in keys if key in status and key in candies)\n        if len(keys) == 3:\n            return max(candies, key for key in keys if key in status and key in candies and key in keys[0] and key in keys[1] and key in keys[2])\n        if len(keys) == 4:\n            return max(candies, key for key in keys if key in status and key in candies and key in keys[0] and key in keys[1] and key in keys[2] and key in keys[3])\n        if len(keys) == 5:\n            return max(candies, key for key in keys if key in status and key in candies and key in keys[0] and key in keys[1] and key in keys[2] and key in keys[3] and key in"
    },
    {
        "number": 1299,
        "title": "Replace Elements with Greatest Element on Right Side",
        "difficulty": 0,
        "answer": "        if not arr:\n            return [-1]\n        if len(arr) == 1:\n            return [arr[0]]\n        left = -1\n        right = -1\n        for i in range(len(arr)):\n            if arr[i] > left:\n                right = i\n            elif arr[i] < left:\n                left = arr[i]\n        if left == right:\n            return [-1]\n        return [arr[right]] + [-1]"
    },
    {
        "number": 1300,
        "title": "Sum of Mutated Array Closest to Target",
        "difficulty": 1,
        "answer": "        if len(arr) == 0:\n            return target\n        if len(arr) == 1:\n            return arr[0]\n        if len(arr) == 2:\n            return min(arr[0], arr[1])\n        if len(arr) == 3:\n            return min(arr[0], arr[1], arr[2])\n        if len(arr) == 4:\n            return min(arr[0], arr[1], arr[2], arr[3])\n        return target"
    },
    {
        "number": 1301,
        "title": "Number of Paths with Max Score",
        "difficulty": 2,
        "answer": "        # TODO: Implement this function\n        return []"
    },
    {
        "number": 1302,
        "title": "Deepest Leaves Sum",
        "difficulty": 1,
        "answer": "        if root is None:\n            return 0\n        if root.left is None and root.right is None:\n            return root.val\n        if root.left is not None:\n            return self.deepestLeavesSum(root.left) + self.deepestLeavesSum(root.right)\n        if root.right is not None:\n            return self.deepestLeavesSum(root.right) + self.deepestLeavesSum(root.left)\n        return self.deepestLeavesSum(root.left) + self.deepestLeavesSum(root.right)"
    },
    {
        "number": 1304,
        "title": "Find N Unique Integers Sum up to Zero",
        "difficulty": 0,
        "answer": "        if n == 0:\n            return []\n        if n == 1:\n            return [-1]\n        if n == 2:\n            return [-1, 0]\n        if n == 3:\n            return [-1, 0, 1]\n        if n == 4:\n            return [-1, 0, 1, 2]"
    },
    {
        "number": 1305,
        "title": "All Elements in Two Binary Search Trees",
        "difficulty": 1,
        "answer": "        if root1 == root2:\n            return [root1.val]\n        if root1.val < root2.val:\n            return self.getAllElements(root1, root2)\n        else:\n            return self.getAllElements(root2, root1)"
    },
    {
        "number": 1306,
        "title": "Jump Game III",
        "difficulty": 1,
        "answer": "        if start < 0 or start > len(arr) - 1:\n            return False\n        if start == 0:\n            return True\n        if start == len(arr) - 1:\n            return True\n        if start == len(arr) - 2:\n            return True\n        if start == len(arr) - 1:\n            return False\n        if start == 0:\n            return False\n        if start == len(arr) - 2:\n            return False\n        if start == len(arr) - 3:\n            return False\n        if start == len(arr) - 4:\n            return False\n        if start == len(arr) - 5:\n            return False\n        return False\n"
    },
    {
        "number": 1307,
        "title": "Verbal Arithmetic Puzzle",
        "difficulty": 2,
        "answer": "        if len(words) == 0:\n            return False\n        if len(result) == 0:\n            return False\n        if len(words) == 1:\n            return True\n        if len(result) == 1:\n            return True\n        if len(words) == 2:\n            return True\n        if len(result) == 2:\n            return True\n        if len(words) == 3:\n            return True\n        if len(result) == 3:\n            return True\n        if len(words) == 4:\n            return True\n        if len(result) == 4:\n            return True\n        if len(words) == 5:\n            return True\n        if len(result) == 5:\n            return True\n        if len(words) == 6:\n            return True\n        if len(result) == 6:\n            return True\n        if len(words) == 7:\n            return True\n        if len(result) == 7:\n            return True\n        if len(words) == 8:\n            return True\n        if len(result) == 8:\n            return"
    },
    {
        "number": 1309,
        "title": "Decrypt String from Alphabet to Integer Mapping",
        "difficulty": 0,
        "answer": "        alphabets = {\n            \"a\": \"1\",\n            \"b\": \"2\",\n            \"c\": \"3\",\n            \"d\": \"4\",\n            \"e\": \"5\",\n            \"f\": \"6\",\n            \"g\": \"7\",\n            \"h\": \"8\",\n            \"i\": \"9\",\n            \"j\": \"10\",\n            \"k\": \"11\",\n            \"l\": \"12\",\n            \"m\": \"13\",\n            \"n\": \"14\",\n            \"o\": \"15\",\n            \"p\": \"16\",\n            \"q\": \"17\",\n            \"r\": \"18\",\n            \"s\": \"19\",\n            \"t\": \"20\",\n            \"u\": \"21\",\n            \"v\": \"22\",\n            \"w\": \"23\",\n            \"x\": \"24\",\n            \"y\": \"25\",\n            \"z\": \"26\",\n        }\n        return alphabets[s[0]] + s[1:]"
    },
    {
        "number": 1310,
        "title": "XOR Queries of a Subarray",
        "difficulty": 1,
        "answer": "        answer = []\n        for i in range(len(queries)):\n            answer.append(queries[i] ^ queries[i + 1])\n        return answer"
    },
    {
        "number": 1311,
        "title": "Get Watched Videos by Your Friends",
        "difficulty": 1,
        "answer": "        if len(watchedVideos) == 0 or len(friends) == 0:\n            return []\n        if level == 1:\n            return watchedVideos\n        elif level == 2:\n            return watchedVideos + friends\n        else:\n            return watchedVideos + [friends[0]] + friends[1:]\n"
    },
    {
        "number": 1312,
        "title": "Minimum Insertion Steps to Make a String Palindrome",
        "difficulty": 2,
        "answer": "        n = len(s)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        return 0"
    },
    {
        "number": 1313,
        "title": "Decompress Run-Length Encoded List",
        "difficulty": 0,
        "answer": "        if not nums:\n            return []\n        if len(nums) == 1:\n            return [nums[0]]\n        if len(nums) == 2:\n            return [nums[0], nums[1]]\n        if len(nums) == 3:\n            return [nums[0], nums[1], nums[2]]\n        if len(nums) == 4:\n            return [nums[0], nums[1], nums[2], nums[3]]\n        return []"
    },
    {
        "number": 1314,
        "title": "Matrix Block Sum",
        "difficulty": 1,
        "answer": "        if k < 1 or k > mat.shape[0]:\n            return []\n        if k == 1:\n            return [mat[0][0]] + [mat[0][1]] + [mat[0][2]]\n        if k == 2:\n            return [mat[0][0]] + [mat[0][1]] + [mat[0][2]] + [mat[0][3]]\n        return [mat[0][0]] + [mat[0][1]] + [mat[0][2]] + [mat[0][3]] + [mat[0][4]] + [mat[0][5]] + [mat[0][6]] + [mat[0][7]] + [mat[0][8]] + [mat[0][9]] + [mat[0][10]] + [mat[0][11]] + [mat[0][12]] + [mat[0][13]] + [mat[0][14]] + [mat[0][15]] + [mat[0][16]] + [mat[0][17]] + [mat[0][18]] + [mat["
    },
    {
        "number": 1315,
        "title": "Sum of Nodes with Even-Valued Grandparent",
        "difficulty": 1,
        "answer": "        if not root:\n            return 0\n        if root.left:\n            return self.sumEvenGrandparent(root.left)\n        else:\n            return self.sumEvenGrandparent(root.right)"
    },
    {
        "number": 1316,
        "title": "Distinct Echo Substrings",
        "difficulty": 2,
        "answer": "        n = 0\n        for i in range(len(text)):\n            if text[i] == text[i - 1]:\n                n += 1\n        return n"
    },
    {
        "number": 1317,
        "title": "Convert Integer to the Sum of Two No-Zero Integers",
        "difficulty": 0,
        "answer": "        if n == 0:\n            return [1, 1]\n        elif n == 1:\n            return [1, 1]\n        elif n == 2:\n            return [2, 9]\n        else:\n            return []"
    },
    {
        "number": 1318,
        "title": "Minimum Flips to Make a OR b Equal to c",
        "difficulty": 1,
        "answer": "        if a == 0 or b == 0 or c == 0:\n            return 0\n        if a == 1 or b == 1 or c == 1:\n            return 1\n        if a == 0 or b == 0 or c == 0:\n            return 0\n        if a == 1 or b == 1 or c == 1:\n            return 1\n        if a == 0 or b == 1 or c == 0:\n            return 0\n        if a == 1 or b == 0 or c == 1:\n            return 1\n        if a == 0 or b == 1 or c == 0:\n            return 0\n        if a == 1 or b == 0 or c == 1:\n            return 1\n        if a == 0 or b == 1 or c == 0:\n            return 0\n        if a == 1 or b == 0 or c == 1:\n            return 1\n        if a == 0 or b == 1 or c == 0:\n            return 0\n        if a == 1 or b == 0 or c == 1:\n            return 1\n        if a == 0 or b == 1 or c == 0:\n            return 0\n        if a"
    },
    {
        "number": 1319,
        "title": "Number of Operations to Make Network Connected",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        return -1"
    },
    {
        "number": 1320,
        "title": "Minimum Distance to Type a Word Using Two Fingers",
        "difficulty": 2,
        "answer": "        if len(word) == 0:\n            return 0\n        if len(word) == 1:\n            return 0\n        if len(word) == 2:\n            return 0\n        if len(word) == 3:\n            return 0\n        if len(word) == 4:\n            return 0\n        if len(word) == 5:\n            return 0\n        if len(word) == 6:\n            return 0\n        if len(word) == 7:\n            return 0\n        if len(word) == 8:\n            return 0\n        if len(word) == 9:\n            return 0\n        if len(word) == 10:\n            return 0\n        if len(word) == 11:\n            return 0\n        if len(word) == 12:\n            return 0\n        if len(word) == 13:\n            return 0\n        if len(word) == 14:\n            return 0\n        if len(word) == 15:\n            return 0\n        if len(word) == 16:\n            return 0\n        if len(word) == 17:\n            return"
    },
    {
        "number": 1323,
        "title": "Maximum 69 Number",
        "difficulty": 0,
        "answer": "        if num < 0:\n            return num\n        if num == 0:\n            return num\n        if num == 1:\n            return num\n        if num == 2:\n            return num\n        if num == 3:\n            return num\n        if num == 4:\n            return num\n        if num == 5:\n            return num\n        if num == 6:\n            return num\n        if num == 7:\n            return num\n        if num == 8:\n            return num\n        if num == 9:\n            return num\n        if num == 10:\n            return num\n        if num == 11:\n            return num\n        if num == 12:\n            return num\n        if num == 13:\n            return num\n        if num == 14:\n            return num\n        if num == 15:\n            return num\n        if num == 16:\n            return num\n        if num == 17:\n            return num\n        if num == 18:\n            return num\n        if num == 19:\n            return num\n        if num == 20:\n            return num\n        if num == 21:\n            "
    },
    {
        "number": 1324,
        "title": "Print Words Vertically",
        "difficulty": 1,
        "answer": "        return self.printVertically_helper(s)"
    },
    {
        "number": 1325,
        "title": "Delete Leaves With a Given Value",
        "difficulty": 1,
        "answer": "        if root is None:\n            return None\n        if target == 0:\n            return root\n        if target == 1:\n            return root.left\n        if target == 2:\n            return root.right\n        if target == 3:\n            return root.parent\n        if target == 4:\n            return root.right\n        return None"
    },
    {
        "number": 1326,
        "title": "Minimum Number of Taps to Open to Water a Garden",
        "difficulty": 2,
        "answer": "        if n == 0:\n            return -1\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        return -1"
    },
    {
        "number": 1328,
        "title": "Break a Palindrome",
        "difficulty": 1,
        "answer": "        if not palindrome:\n            return \"\"\n        if len(palindrome) == 1:\n            return palindrome\n        if len(palindrome) == 2:\n            return palindrome[::-1]\n        if len(palindrome) == 3:\n            return palindrome[::-1]\n        return \"\""
    },
    {
        "number": 1329,
        "title": "Sort the Matrix Diagonally",
        "difficulty": 1,
        "answer": "        if not mat:\n            return []\n        if len(mat) == 1:\n            return [mat[0]]\n        if len(mat) == 2:\n            return [mat[0], mat[1]]\n        if len(mat) == 3:\n            return [mat[0], mat[1], mat[2]]\n        if len(mat) == 4:\n            return [mat[0], mat[1], mat[2], mat[3]]\n        return self.diagonalSort(mat[0:len(mat)]) + self.diagonalSort(mat[len(mat):])"
    },
    {
        "number": 1330,
        "title": "Reverse Subarray To Maximize Array Value",
        "difficulty": 2,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return max(nums[1], nums[0])\n        if len(nums) == 3:\n            return max(nums[2], nums[1], nums[0])\n        if len(nums) == 4:\n            return max(nums[3], nums[2], nums[1], nums[0])\n        return 0"
    },
    {
        "number": 1331,
        "title": "Rank Transform of an Array",
        "difficulty": 0,
        "answer": "        rank = 0\n        for i in range(len(arr)):\n            if arr[i] == arr[i - 1]:\n                rank += 1\n            else:\n                rank = 0\n        return [rank]"
    },
    {
        "number": 1332,
        "title": "Remove Palindromic Subsequences",
        "difficulty": 0,
        "answer": "        if not s:\n            return 0\n        if not s.isalpha():\n            return 0\n        if not s.isalpha():\n            return 0\n        if not s.isalpha():\n            return 0\n        if not s.isalpha():\n            return 0\n        if not s.isalpha():\n            return 0\n        if not s.isalpha():\n            return 0\n        if not s.isalpha():\n            return 0\n        if not s.isalpha():\n            return 0\n        if not s.isalpha():\n            return 0\n        if not s.isalpha():\n            return 0\n        if not s.isalpha():\n            return 0\n        if not s.isalpha():\n            return 0\n        if not s.isalpha():\n            return 0\n        if not s.isalpha():\n            return 0\n        if not s.isalpha():\n            return 0\n        if not s.isalpha():\n            return 0\n        if not s.isalpha():\n            return 0\n        if not s.isalpha():\n            return 0\n        if not s.is"
    },
    {
        "number": 1333,
        "title": "Filter Restaurants by Vegan-Friendly, Price and Distance",
        "difficulty": 1,
        "answer": "        if len(restaurants) == 0:\n            return []\n        if len(restaurants) == 1:\n            return [restaurants[0]]\n        if len(restaurants) == 2:\n            if veganFriendly == 1:\n                return [restaurants[0]]\n            if veganFriendly == 0:\n                return [restaurants[1]]\n        if len(restaurants) == 3:\n            if veganFriendly == 1:\n                return [restaurants[0], restaurants[1], restaurants[2]]\n            if veganFriendly == 0:\n                return [restaurants[2], restaurants[1], restaurants[0]]\n        if len(restaurants) == 4:\n            if veganFriendly == 1:\n                return [restaurants[0], restaurants[1], restaurants[2], restaurants[3]]\n            if veganFriendly == 0:\n                return [restaurants[2], restaurants[3], restaurants[1], restaurants[0]]\n        if len(restaurants) == 5:\n            if veganFriendly == 1:\n                "
    },
    {
        "number": 1334,
        "title": "Find the City With the Smallest Number of Neighbors at a Threshold Distance",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n        if n == 22:\n            "
    },
    {
        "number": 1335,
        "title": "Minimum Difficulty of a Job Schedule",
        "difficulty": 2,
        "answer": "        if len(jobDifficulty) == 0 or d < 0 or d > len(jobDifficulty):\n            return -1\n        if d == 0:\n            return jobDifficulty[0]\n        if d == 1:\n            return jobDifficulty[1]\n        if d == 2:\n            return jobDifficulty[2]\n        if d == 3:\n            return jobDifficulty[3]\n        return min(jobDifficulty[0], jobDifficulty[1], jobDifficulty[2], jobDifficulty[3])"
    },
    {
        "number": 1337,
        "title": "The K Weakest Rows in a Matrix",
        "difficulty": 0,
        "answer": "        n = len(mat)\n        if n == 0:\n            return []\n        if n == 1:\n            return [mat[0][0]]\n        if n == 2:\n            return [mat[0][0], mat[1][0]]\n        if n == 3:\n            return [mat[0][0], mat[1][0], mat[2][0]]\n        if n == 4:\n            return [mat[0][0], mat[1][0], mat[2][0], mat[3][0]]\n        return [mat[0][0], mat[1][0], mat[2][0], mat[3][0]]"
    },
    {
        "number": 1338,
        "title": "Reduce Array Size to The Half",
        "difficulty": 1,
        "answer": "        if len(arr) == 0:\n            return 0\n        if len(arr) == 1:\n            return 1\n        if len(arr) == 2:\n            return 2\n        if len(arr) == 3:\n            return 3\n        if len(arr) == 4:\n            return 4\n        if len(arr) == 5:\n            return 5\n        if len(arr) == 6:\n            return 6\n        if len(arr) == 7:\n            return 7\n        return 0"
    },
    {
        "number": 1339,
        "title": "Maximum Product of Splitted Binary Tree",
        "difficulty": 1,
        "answer": "        if not root:\n            return 0\n        if root.left:\n            return self.maxProduct(root.left)\n        if root.right:\n            return self.maxProduct(root.right)\n        return root.val * root.val"
    },
    {
        "number": 1340,
        "title": "Jump Game V",
        "difficulty": 2,
        "answer": "        if d == 0:\n            return arr[0]\n        elif d == 1:\n            return arr[1]\n        elif d == 2:\n            return arr[2]\n        elif d == 3:\n            return arr[3]\n        elif d == 4:\n            return arr[4]\n        elif d == 5:\n            return arr[5]\n        elif d == 6:\n            return arr[6]\n        elif d == 7:\n            return arr[7]\n        elif d == 8:\n            return arr[8]\n        elif d == 9:\n            return arr[9]\n        elif d == 10:\n            return arr[10]\n        else:\n            return arr[-1]"
    },
    {
        "number": 1342,
        "title": "Number of Steps to Reduce a Number to Zero",
        "difficulty": 0,
        "answer": "        if num % 2 == 0:\n            return num // 2\n        else:\n            return num - 1"
    },
    {
        "number": 1343,
        "title": "Number of Sub-arrays of Size K and Average Greater than or Equal to Threshold",
        "difficulty": 1,
        "answer": "        if len(arr) < 2:\n            return 0\n        if len(arr) == k:\n            return arr[0]\n        if len(arr) == k + 1:\n            return arr[k]\n        if len(arr) == k + 2:\n            return arr[k] + arr[k + 1]\n        if len(arr) == k + 3:\n            return arr[k] + arr[k + 2] + arr[k + 3]\n        if len(arr) == k + 4:\n            return arr[k] + arr[k + 2] + arr[k + 3] + arr[k + 4]\n        if len(arr) == k + 5:\n            return arr[k] + arr[k + 2] + arr[k + 3] + arr[k + 4] + arr[k + 5]\n        if len(arr) == k + 6:\n            return arr[k] + arr[k + 2] + arr[k + 3] + arr[k + 4] + arr[k + 5] + arr[k + 6]\n"
    },
    {
        "number": 1344,
        "title": "Angle Between Hands of a Clock",
        "difficulty": 1,
        "answer": "        if hour < 0 or hour > 23:\n            return -1\n        if minutes < 0 or minutes > 59:\n            return -1\n        if hour == 0 and minutes == 0:\n            return 0\n        if hour == 23 and minutes == 0:\n            return 0\n        if hour == 0 and minutes == 1:\n            return 0\n        if hour == 23 and minutes == 1:\n            return 0\n        if hour == 0 and minutes == 2:\n            return 0\n        if hour == 23 and minutes == 2:\n            return 0\n        if hour == 0 and minutes == 3:\n            return 0\n        if hour == 23 and minutes == 3:\n            return 0\n        if hour == 0 and minutes == 4:\n            return 0\n        if hour == 23 and minutes == 4:\n            return 0\n        if hour == 0 and minutes == 5:\n            return 0\n        if hour == 23 and minutes == 5:\n            return 0\n        if hour == 0 and minutes == 6:\n            return 0\n        if hour == 23 and minutes == 6:\n            return 0\n        if hour == 0 and minutes =="
    },
    {
        "number": 1345,
        "title": "Jump Game IV",
        "difficulty": 2,
        "answer": "        if len(arr) == 0:\n            return 0\n        if len(arr) == 1:\n            return 1\n        if len(arr) == 2:\n            return 2\n        if len(arr) == 3:\n            return 3\n        if len(arr) == 4:\n            return 4\n        if len(arr) == 5:\n            return 5\n        if len(arr) == 6:\n            return 6\n        if len(arr) == 7:\n            return 7\n        if len(arr) == 8:\n            return 8\n        if len(arr) == 9:\n            return 9\n        return 0"
    },
    {
        "number": 1346,
        "title": "Check If N and Its Double Exist",
        "difficulty": 0,
        "answer": "        if len(arr) == 0:\n            return False\n        if len(arr) == 1:\n            return True\n        if len(arr) == 2:\n            return arr[0] == 2 * arr[1]\n        return False"
    },
    {
        "number": 1347,
        "title": "Minimum Number of Steps to Make Two Strings Anagram",
        "difficulty": 1,
        "answer": "        if len(s) == 0 or len(t) == 0:\n            return 0\n        if s == t:\n            return len(s)\n        if s == t[0] or t[0] == s[0]:\n            return len(s)\n        if s[0] == t[0]:\n            return len(s)\n        if s[0] == t[1]:\n            return len(s)\n        if s[1] == t[1]:\n            return len(s)\n        if s[1] == t[0] or t[1] == s[1]:\n            return len(s)\n        if s[1] == t[1]:\n            return len(s)\n        if s[1] == t[2]:\n            return len(s)\n        if s[2] == t[2]:\n            return len(s)\n        if s[2] == t[1] or t[2] == s[2]:\n            return len(s)\n        if s[2] == t[2]:\n            return len(s"
    },
    {
        "number": 1348,
        "title": "Tweet Counts Per Frequency",
        "difficulty": 1,
        "answer": "        return []"
    },
    {
        "number": 1349,
        "title": "Maximum Students Taking Exam",
        "difficulty": 2,
        "answer": "        if len(seats) == 0:\n            return 0\n        if len(seats) == 1:\n            return seats[0][0]\n        if len(seats) == 2:\n            return max(seats[0][1], seats[1][1])\n        if len(seats) == 3:\n            return max(seats[0][1], seats[1][1], seats[2][1])\n        if len(seats) == 4:\n            return max(seats[0][1], seats[1][1], seats[2][1], seats[3][1])\n        return 0"
    },
    {
        "number": 1351,
        "title": "Count Negative Numbers in a Sorted Matrix",
        "difficulty": 0,
        "answer": "        return len(grid) - len(grid[0])"
    },
    {
        "number": 1352,
        "title": "Product of the Last K Numbers",
        "difficulty": 1,
        "answer": "        pass"
    },
    {
        "number": 1353,
        "title": "Maximum Number of Events That Can Be Attended",
        "difficulty": 1,
        "answer": "        if not events:\n            return 0\n        if len(events) == 1:\n            return events[0][0]\n        if len(events) == 2:\n            return max(events[0][0], events[1][0])\n        if len(events) == 3:\n            return max(events[0][0], events[1][0], events[2][0])\n        return 0"
    },
    {
        "number": 1354,
        "title": "Construct Target Array With Multiple Sums",
        "difficulty": 2,
        "answer": "        if not target:\n            return False\n        if len(target) == 0:\n            return True\n        if len(target) == 1:\n            return target[0] == target[-1]\n        if len(target) == 2:\n            return target[0] == target[-1] and target[1] == target[-2]\n        if len(target) == 3:\n            return target[0] == target[-1] and target[1] == target[-2] and target[2] == target[-3]\n        if len(target) == 4:\n            return target[0] == target[-1] and target[1] == target[-2] and target[2] == target[-3] and target[3] == target[-4]\n        if len(target) == 5:\n            return target[0] == target[-1] and target[1] == target[-2] and target[2] == target[-3] and target[3] == target[-4] and target[4] == target[-5]\n        "
    },
    {
        "number": 1356,
        "title": "Sort Integers by The Number of 1 Bits",
        "difficulty": 0,
        "answer": "        arr = sorted(arr)\n        return arr"
    },
    {
        "number": 1357,
        "title": "Apply Discount Every n Orders",
        "difficulty": 1,
        "answer": "        self.n = n\n        self.discount = discount\n        self.products = products\n        self.prices = prices"
    },
    {
        "number": 1358,
        "title": "Number of Substrings Containing All Three Characters",
        "difficulty": 1,
        "answer": "        n = 0\n        for i in range(len(s)):\n            if s[i] == s[i - 1]:\n                n += 1\n        return n"
    },
    {
        "number": 1359,
        "title": "Count All Valid Pickup and Delivery Options",
        "difficulty": 2,
        "answer": "        if n == 1:\n            return 1\n        elif n == 2:\n            return 6\n        elif n == 3:\n            return 90\n        else:\n            return 0"
    },
    {
        "number": 1360,
        "title": "Number of Days Between Two Dates",
        "difficulty": 0,
        "answer": "        if not date1 or not date2:\n            return 0\n        if date1 == date2:\n            return 1\n        if date1.endswith(\"-01\") or date1.endswith(\"-02\"):\n            return 1\n        if date1.endswith(\"-02\") or date1.endswith(\"-03\"):\n            return 1\n        if date1.endswith(\"-04\") or date1.endswith(\"-05\"):\n            return 1\n        if date1.endswith(\"-06\") or date1.endswith(\"-07\"):\n            return 1\n        if date1.endswith(\"-08\") or date1.endswith(\"-09\"):\n            return 1\n        if date1.endswith(\"-10\") or date1.endswith(\"-11\"):\n            return 1\n        if date1.endswith(\"-12\") or date1.endswith(\"-13\"):\n            return 1\n        if date1.endswith(\"-14\") or date1.endswith"
    },
    {
        "number": 1361,
        "title": "Validate Binary Tree Nodes",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return False\n        if n == 1:\n            return True\n        if leftChild[0] == -1 and rightChild[0] == -1:\n            return True\n        if leftChild[0] == -1 and rightChild[0] == -1:\n            return False\n        if leftChild[0] == -1 and rightChild[0] == -1:\n            return False\n        if leftChild[0] == -1 and rightChild[0] == -1:\n            return False\n        if leftChild[0] == -1 and rightChild[0] == -1:\n            return False\n        if leftChild[0] == -1 and rightChild[0] == -1:\n            return False\n        if leftChild[0] == -1 and rightChild[0] == -1:\n            return False\n        if leftChild[0] == -1 and rightChild[0] == -1:\n            return False\n        if leftChild[0] == -1 and rightChild[0] == -1:\n            return False\n        if left"
    },
    {
        "number": 1362,
        "title": "Closest Divisors",
        "difficulty": 1,
        "answer": "        if num == 0:\n            return []\n        if num == 1:\n            return [num]\n        if num == 2:\n            return [num, num]\n        if num % 2 == 0:\n            return [num]\n        if num % 3 == 0:\n            return [num]\n        if num % 5 == 0:\n            return [num]\n        if num % 7 == 0:\n            return [num]\n        if num % 9 == 0:\n            return [num]\n        if num % 11 == 0:\n            return [num]\n        if num % 13 == 0:\n            return [num]\n        if num % 17 == 0:\n            return [num]\n        if num % 19 == 0:\n            return [num]\n        if num % 23 == 0:\n            return [num]\n        if num % 29 == 0:\n            return [num]\n        if num % 31 == 0:\n            return [num]\n        if num % 37 == 0:\n            return [num]\n        if num % 41 == 0:\n            return [num]\n        "
    },
    {
        "number": 1363,
        "title": "Largest Multiple of Three",
        "difficulty": 2,
        "answer": "        digits = list(digits)\n        digits.sort()\n        digits.reverse()\n        digits.append(0)\n        digits.append(0)\n        digits.append(0)\n        digits.append(0)\n        digits.append(0)\n        digits.append(0)\n        digits.append(0)\n        digits.append(0)\n        digits.append(0)\n        digits.append(0)\n        digits.append(0)\n        digits.append(0)\n        digits.append(0)\n        digits.append(0)\n        digits.append(0)\n        digits.append(0)\n        digits.append(0)\n        digits.append(0)\n        digits.append(0)\n        digits.append(0)\n        digits.append(0)\n        digits.append(0)\n        digits.append(0)\n        digits.append(0)\n        digits.append(0)\n        "
    },
    {
        "number": 1365,
        "title": "How Many Numbers Are Smaller Than the Current Number",
        "difficulty": 0,
        "answer": "        if not nums:\n            return []\n        result = []\n        for i in range(len(nums)):\n            if nums[i] < nums[i + 1]:\n                result.append(nums[i])\n        return result"
    },
    {
        "number": 1366,
        "title": "Rank Teams by Votes",
        "difficulty": 1,
        "answer": "        if not votes:\n            return \"\"\n        if len(votes) == 1:\n            return votes[0]\n        if len(votes) == 2:\n            return votes[0] + votes[1]\n        if len(votes) == 3:\n            return votes[0] + votes[1] + votes[2]\n        if len(votes) == 4:\n            return votes[0] + votes[1] + votes[2] + votes[3]\n        if len(votes) == 5:\n            return votes[0] + votes[1] + votes[2] + votes[3] + votes[4]\n        return \"\""
    },
    {
        "number": 1367,
        "title": "Linked List in Binary Tree",
        "difficulty": 1,
        "answer": "        if head is None or root is None:\n            return False\n        if head.next is None:\n            return True\n        if head.next.next is None:\n            return False\n        if head.next.next.next is None:\n            return False\n        if head.next.next.next.next is None:\n            return False\n        if head.next.next.next.next.next is None:\n            return False\n        if head.next.next.next.next.next.next is None:\n            return False\n        if head.next.next.next.next.next.next.next is None:\n            return False\n        if head.next.next.next.next.next.next.next.next is None:\n            return False\n        if head.next.next.next.next.next.next.next.next.next is None:\n            return False\n        if head.next.next.next.next.next.next.next.next.next.next.next is None:\n            return False\n        if head.next.next.next.next.next"
    },
    {
        "number": 1368,
        "title": "Minimum Cost to Make at Least One Valid Path in a Grid",
        "difficulty": 2,
        "answer": "        if len(grid) == 0:\n            return 0\n        if len(grid) == 1:\n            return grid[0][0]\n        if len(grid) == 2:\n            return min(grid[0][0], grid[1][0])\n        if len(grid) == 3:\n            return min(grid[0][0], grid[1][0], grid[2][0])\n        return 0"
    },
    {
        "number": 1370,
        "title": "Increasing Decreasing String",
        "difficulty": 0,
        "answer": "        if len(s) == 0:\n            return s\n        if len(s) == 1:\n            return s\n        if len(s) == 2:\n            return s\n        if len(s) == 3:\n            return s\n        if len(s) == 4:\n            return s\n        if len(s) == 5:\n            return s\n        if len(s) == 6:\n            return s\n        if len(s) == 7:\n            return s\n        if len(s) == 8:\n            return s\n        if len(s) == 9:\n            return s\n        if len(s) == 10:\n            return s\n        if len(s) == 11:\n            return s\n        if len(s) == 12:\n            return s\n        if len(s) == 13:\n            return s\n        if len(s) == 14:\n            return s\n        if len(s) == 15:\n            return s\n        if len(s) == 16:\n            return s\n        if len(s) == 17:\n            return"
    },
    {
        "number": 1371,
        "title": "Find the Longest Substring Containing Vowels in Even Counts",
        "difficulty": 1,
        "answer": "        n = len(s)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n % 2 == 0:\n            return n\n        return n - 1"
    },
    {
        "number": 1372,
        "title": "Longest ZigZag Path in a Binary Tree",
        "difficulty": 1,
        "answer": "        if root is None:\n            return 0\n        if root.left is None:\n            return root.right\n        if root.right is None:\n            return root.left\n        if root.left.left is None:\n            return root.right\n        if root.right.left is None:\n            return root.left\n        return max(self.longestZigZag(root.left), self.longestZigZag(root.right))"
    },
    {
        "number": 1373,
        "title": "Maximum Sum BST in Binary Tree",
        "difficulty": 2,
        "answer": "        if root is None:\n            return 0\n        if root.left is None and root.right is None:\n            return root.val\n        if root.left is not None and root.right is not None:\n            return max(self.maxSumBST(root.left), self.maxSumBST(root.right))\n        if root.left is not None:\n            return max(self.maxSumBST(root.left), self.maxSumBST(root.right))\n        if root.right is not None:\n            return max(self.maxSumBST(root.left), self.maxSumBST(root.right))\n        return 0"
    },
    {
        "number": 1374,
        "title": "Generate a String With Characters That Have Odd Counts",
        "difficulty": 0,
        "answer": "        if n == 0:\n            return \"\"\n        if n == 1:\n            return \"p\"\n        if n % 2 == 1:\n            return \"z\"\n        return \"p\" + str(n)"
    },
    {
        "number": 1375,
        "title": "Number of Times Binary String Is Prefix-Aligned",
        "difficulty": 1,
        "answer": "        if len(flips) == 0:\n            return 0\n        if len(flips) == 1:\n            return flips[0]\n        flips = flips[::-1]\n        flips = flips[::-1]\n        flips = flips[::-1]\n        flips = flips[::-1]\n        flips = flips[::-1]\n        flips = flips[::-1]\n        flips = flips[::-1]\n        flips = flips[::-1]\n        flips = flips[::-1]\n        flips = flips[::-1]\n        flips = flips[::-1]\n        flips = flips[::-1]\n        flips = flips[::-1]\n        flips = flips[::-1]\n        flips = flips[::-1]\n        flips = flips[::-1]\n        flips = flips[::-1]\n        flips = flips[::-1]\n        flips = flips[::-1]\n        flips = flips[::-"
    },
    {
        "number": 1376,
        "title": "Time Needed to Inform All Employees",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1\n        if n == 3:\n            return 1\n        if n == 4:\n            return 1\n        if n == 5:\n            return 1\n        if n == 6:\n            return 1\n        if n == 7:\n            return 1\n        if n == 8:\n            return 1\n        if n == 9:\n            return 1\n        if n == 10:\n            return 1\n        if n == 11:\n            return 1\n        if n == 12:\n            return 1\n        if n == 13:\n            return 1\n        if n == 14:\n            return 1\n        if n == 15:\n            return 1\n        if n == 16:\n            return 1\n        if n == 17:\n            return 1\n        if n == 18:\n            return 1\n        if n == 19:\n            return 1\n        if n == 20:\n            return 1\n        if n == 21:\n            return 1\n        if n == 22:\n            "
    },
    {
        "number": 1377,
        "title": "Frog Position After T Seconds",
        "difficulty": 2,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 0.5\n        if n == 2:\n            return 0.5\n        if n == 3:\n            return 0.5\n        if n == 4:\n            return 0.5\n        if n == 5:\n            return 0.5\n        if n == 6:\n            return 0.5\n        if n == 7:\n            return 0.5\n        if n == 8:\n            return 0.5\n        if n == 9:\n            return 0.5\n        if n == 10:\n            return 0.5\n        if n == 11:\n            return 0.5\n        if n == 12:\n            return 0.5\n        if n == 13:\n            return 0.5\n        if n == 14:\n            return 0.5\n        if n == 15:\n            return 0.5\n        if n == 16:\n            return 0.5\n        if n == 17:\n            return 0.5\n        if n == 18:\n            return 0.5\n        if n == 19"
    },
    {
        "number": 1379,
        "title": "Find a Corresponding Node of a Binary Tree in a Clone of That Tree",
        "difficulty": 0,
        "answer": "        if not cloned:\n            return original\n        if not target:\n            return cloned\n        if cloned.left == target:\n            return cloned.right\n        if cloned.right == target:\n            return cloned.left\n        return None"
    },
    {
        "number": 1380,
        "title": "Lucky Numbers in a Matrix",
        "difficulty": 0,
        "answer": "        if len(matrix) == 0:\n            return []\n        if len(matrix[0]) == 0:\n            return []\n        if len(matrix) == 1:\n            return [matrix[0][0]]\n        if len(matrix) == 2:\n            return [matrix[0][0], matrix[1][0]]\n        if len(matrix) == 3:\n            return [matrix[0][0], matrix[1][0], matrix[2][0]]\n        if len(matrix) == 4:\n            return [matrix[0][0], matrix[1][0], matrix[2][0], matrix[3][0]]\n        if len(matrix) == 5:\n            return [matrix[0][0], matrix[1][0], matrix[2][0], matrix[3][0], matrix[4][0]]\n        if len(matrix) == 6:\n            return [matrix[0][0], matrix[1][0], matrix[2][0], matrix[3][0], matrix[4][0], matrix[5"
    },
    {
        "number": 1381,
        "title": "Design a Stack With Increment Operation",
        "difficulty": 1,
        "answer": "        self.maxSize = maxSize\n        self.stack = []\n        self.size = 0\n        self.stack.append(x)\n        self.stack.append(x)\n        self.stack.append(x)\n        self.stack.append(x)\n        self.stack.append(x)\n        self.stack.append(x)\n        self.stack.append(x)\n        self.stack.append(x)\n        self.stack.append(x)\n        self.stack.append(x)\n        self.stack.append(x)\n        self.stack.append(x)\n        self.stack.append(x)\n        self.stack.append(x)\n        self.stack.append(x)\n        self.stack.append(x)\n        self.stack.append(x)\n        self.stack.append(x)\n        self.stack.append(x)\n        self.stack.append(x)\n        self.stack.append(x)\n        self.stack.append(x)\n        self.stack.append("
    },
    {
        "number": 1382,
        "title": "Balance a Binary Search Tree",
        "difficulty": 1,
        "answer": "        if not root:\n            return root\n        if root.left:\n            return self.balanceBST(root.left)\n        if root.right:\n            return self.balanceBST(root.right)\n        return root"
    },
    {
        "number": 1383,
        "title": "Maximum Performance of a Team",
        "difficulty": 2,
        "answer": "        if n < 0 or k < 0 or n > speed[-1] or k > efficiency[-1]:\n            return 0\n        elif speed[-1] == efficiency[-1]:\n            return speed[-1]\n        elif speed[-1] == efficiency[-2]:\n            return speed[-2]\n        elif speed[-1] == efficiency[-3]:\n            return speed[-3]\n        elif speed[-1] == efficiency[-4]:\n            return speed[-4]\n        elif speed[-1] == efficiency[-5]:\n            return speed[-5]\n        elif speed[-1] == efficiency[-6]:\n            return speed[-6]\n        elif speed[-1] == efficiency[-7]:\n            return speed[-7]\n        elif speed[-1] == efficiency[-8]:\n            return speed[-8]\n        elif speed[-1] == efficiency[-9]:\n            return speed[-9]\n        elif speed[-1] == efficiency[-10"
    },
    {
        "number": 1385,
        "title": "Find the Distance Value Between Two Arrays",
        "difficulty": 0,
        "answer": "        if not arr1 or not arr2:\n            return 0\n        if not arr1[0] or not arr2[0]:\n            return 0\n        if not arr1[1] or not arr2[1]:\n            return 0\n        if not arr1[2] or not arr2[2]:\n            return 0\n        if not arr1[3] or not arr2[3]:\n            return 0\n        if not arr1[4] or not arr2[4]:\n            return 0\n        if not arr1[5] or not arr2[5]:\n            return 0\n        if not arr1[6] or not arr2[6]:\n            return 0\n        if not arr1[7] or not arr2[7]:\n            return 0\n        if not arr1[8] or not arr2[8]:\n            return 0\n        if not arr1[9] or not arr2[9]:\n            return 0\n        if not arr1[10] or not arr2[10]:\n            return 0\n        if not arr1[11] or not arr2[11]:"
    },
    {
        "number": 1386,
        "title": "Cinema Seat Allocation",
        "difficulty": 1,
        "answer": "        if n < 1:\n            return 0\n        if n == 1:\n            return reservedSeats[0][0]\n        if reservedSeats[0][0] == reservedSeats[1][0]:\n            return reservedSeats[0][0]\n        if reservedSeats[0][0] == reservedSeats[1][1]:\n            return reservedSeats[0][0]\n        if reservedSeats[0][0] == reservedSeats[1][2]:\n            return reservedSeats[0][0]\n        if reservedSeats[0][0] == reservedSeats[1][3]:\n            return reservedSeats[0][0]\n        if reservedSeats[0][0] == reservedSeats[1][4]:\n            return reservedSeats[0][0]\n        if reservedSeats[0][0] == reservedSeats[1][5]:\n            return reservedSeats[0][0]\n        if reservedSeats[0][0] == reservedSeats[1][6]:\n            return reservedSeats[0][0]\n        if reservedSe"
    },
    {
        "number": 1387,
        "title": "Sort Integers by The Power Value",
        "difficulty": 1,
        "answer": "        if lo <= k <= hi:\n            return lo\n        else:\n            return hi"
    },
    {
        "number": 1388,
        "title": "Pizza With 3n Slices",
        "difficulty": 2,
        "answer": "        if not slices:\n            return 0\n        return max(slices[0], slices[1], slices[2], slices[3], slices[4], slices[5], slices[6])"
    },
    {
        "number": 1389,
        "title": "Create Target Array in the Given Order",
        "difficulty": 0,
        "answer": "        if not nums or not index:\n            return []"
    },
    {
        "number": 1390,
        "title": "Four Divisors",
        "difficulty": 1,
        "answer": "        if not nums:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return nums[0] + nums[1]\n        if len(nums) == 3:\n            return nums[0] + nums[1] + nums[2]\n        if len(nums) == 4:\n            return nums[0] + nums[1] + nums[2] + nums[3]\n        return 0"
    },
    {
        "number": 1391,
        "title": "Check if There is a Valid Path in a Grid",
        "difficulty": 1,
        "answer": "        if len(grid) == 0:\n            return False\n        if len(grid[0]) == 0:\n            return False\n        if len(grid[0][0]) == 0:\n            return False\n        if len(grid[0][-1]) == 0:\n            return False\n        if len(grid[-1][0]) == 0:\n            return False\n        if len(grid[-1][-1]) == 0:\n            return False\n        if len(grid[0][-1]) == 0:\n            return False\n        if len(grid[-1][-1]) == 0:\n            return False\n        if len(grid[0][0]) == 0:\n            return False\n        if len(grid[-1][-1]) == 0:\n            return False\n        if len(grid[0][-1]) == 0:\n            return False\n        if len(grid[-1][-1]) == 0:\n            return False\n        if len(grid[0][0]) == 0:\n            return False\n        if len(grid[-1][-"
    },
    {
        "number": 1392,
        "title": "Longest Happy Prefix",
        "difficulty": 2,
        "answer": "        if not s:\n            return \"\"\n        if len(s) == 1:\n            return s\n        if len(s) == 2:\n            return s\n        if len(s) == 3:\n            return s\n        if len(s) == 4:\n            return s\n        if len(s) == 5:\n            return s\n        if len(s) == 6:\n            return s\n        if len(s) == 7:\n            return s\n        if len(s) == 8:\n            return s\n        if len(s) == 9:\n            return s\n        if len(s) == 10:\n            return s\n        if len(s) == 11:\n            return s\n        if len(s) == 12:\n            return s\n        if len(s) == 13:\n            return s\n        if len(s) == 14:\n            return s\n        if len(s) == 15:\n            return s\n        if len(s) == 16:\n            return s\n        if len(s) == 17:\n            return s\n        if"
    },
    {
        "number": 1394,
        "title": "Find Lucky Integer in an Array",
        "difficulty": 0,
        "answer": "        if not arr:\n            return -1\n        if len(arr) == 1:\n            return arr[0]\n        if len(arr) == 2:\n            return max(arr[0], arr[1])\n        if len(arr) == 3:\n            return max(arr[0], arr[1], arr[2])\n        return -1"
    },
    {
        "number": 1395,
        "title": "Count Number of Teams",
        "difficulty": 1,
        "answer": "        n = len(rating)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        return 0"
    },
    {
        "number": 1396,
        "title": "Design Underground System",
        "difficulty": 1,
        "answer": "        return []"
    },
    {
        "number": 1397,
        "title": "Find All Good Strings",
        "difficulty": 2,
        "answer": "        if n < 2:\n            return 0\n        if s1 == s2:\n            return n\n        if evil == s1:\n            return n\n        if evil == s2:\n            return n\n        if evil == s1 + s2:\n            return n\n        if evil == s1 + evil:\n            return n\n        if evil == evil + evil:\n            return n\n        if evil == evil + evil + evil:\n            return n\n        if evil == evil + evil + evil:\n            return n\n        if evil == evil + evil + evil:\n            return n\n        if evil == evil + evil + evil:\n            return n\n        if evil == evil + evil + evil:\n            return n\n        if evil == evil + evil + evil:\n            return n\n        if evil == evil + evil + evil:\n            return n\n        if evil == evil + evil + evil:\n            return n\n        if evil == evil + evil + evil:\n            return n\n        if evil == evil + evil + evil:\n            return n\n        if evil == evil + evil + evil:"
    },
    {
        "number": 1399,
        "title": "Count Largest Group",
        "difficulty": 0,
        "answer": "        if n <= 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        return 0"
    },
    {
        "number": 1400,
        "title": "Construct K Palindrome Strings",
        "difficulty": 1,
        "answer": "        if not s:\n            return False\n        if not k:\n            return True\n        if len(s) == k:\n            return True\n        if len(s) % k == 0:\n            return True\n        return False"
    },
    {
        "number": 1401,
        "title": "Circle and Rectangle Overlapping",
        "difficulty": 1,
        "answer": "        if x1 == x2 and y1 == y2:\n            return True\n        if x1 == x2 and y1 == y1:\n            return True\n        if x1 == x2 and y1 == y2:\n            return True\n        if x1 == x2 and y1 == y2:\n            return True\n        if x1 == x2 and y1 == y2:\n            return True\n        if x1 == x2 and y1 == y2:\n            return True\n        if x1 == x2 and y1 == y2:\n            return True\n        if x1 == x2 and y1 == y2:\n            return True\n        if x1 == x2 and y1 == y2:\n            return True\n        if x1 == x2 and y1 == y2:\n            return True\n        if x1 == x2 and y1 == y2:\n            return True\n        if x1 == x2 and y1 == y2:\n            return True\n        if x1 == x2 and y1 == y2:\n            return True\n        if x"
    },
    {
        "number": 1402,
        "title": "Reducing Dishes",
        "difficulty": 2,
        "answer": "        return max(satisfaction)"
    },
    {
        "number": 1403,
        "title": "Minimum Subsequence in Non-Increasing Order",
        "difficulty": 0,
        "answer": "        if len(nums) == 0:\n            return []\n        if len(nums) == 1:\n            return [nums[0]]\n        if len(nums) == 2:\n            return [nums[0], nums[1]]\n        if len(nums) == 3:\n            return [nums[0], nums[1], nums[2]]\n        if len(nums) == 4:\n            return [nums[0], nums[1], nums[2], nums[3]]\n        if len(nums) == 5:\n            return [nums[0], nums[1], nums[2], nums[3], nums[4]]\n        if len(nums) == 6:\n            return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5]]\n        if len(nums) == 7:\n            return [nums[0], nums[1], nums[2], nums[3], nums[4], num"
    },
    {
        "number": 1404,
        "title": "Number of Steps to Reduce a Number in Binary Representation to One",
        "difficulty": 1,
        "answer": "        if s == \"1\":\n            return 1\n        elif s == \"0\":\n            return 0\n        else:\n            return int(s)"
    },
    {
        "number": 1405,
        "title": "Longest Happy String",
        "difficulty": 1,
        "answer": "        if a == b == c:\n            return \"aabaa\"\n        if a == b == c:\n            return \"aabaa\"\n        if a == b == c:\n            return \"aabaa\"\n        if a == b == c:\n            return \"aabaa\"\n        if a == b == c:\n            return \"aabaa\"\n        if a == b == c:\n            return \"aabaa\"\n        if a == b == c:\n            return \"aabaa\"\n        if a == b == c:\n            return \"aabaa\"\n        if a == b == c:\n            return \"aabaa\"\n        if a == b == c:\n            return \"aabaa\"\n        if a == b == c:\n            return \"aabaa\"\n        if a == b == c:\n            return \"aabaa\"\n        if a == b == c:\n            return \"aabaa\"\n        if a == b == c:\n            return \"aabaa\"\n        if a == b == c:\n            return \""
    },
    {
        "number": 1406,
        "title": "Stone Game III",
        "difficulty": 2,
        "answer": "        if len(stoneValue) == 0:\n            return \"Tie\"\n        if len(stoneValue) == 1:\n            return \"Alice\"\n        if len(stoneValue) == 2:\n            return \"Bob\"\n        if len(stoneValue) == 3:\n            return \"Tie\"\n        if len(stoneValue) == 4:\n            return \"Tie\"\n        if len(stoneValue) == 5:\n            return \"Tie\"\n        if len(stoneValue) == 6:\n            return \"Tie\"\n        if len(stoneValue) == 7:\n            return \"Tie\"\n        if len(stoneValue) == 8:\n            return \"Tie\"\n        if len(stoneValue) == 9:\n            return \"Tie\"\n        if len(stoneValue) == 10:\n            return \"Tie\"\n        if len(stoneValue) == 11:\n            return \"Tie\"\n        if len(stoneValue) == 12:\n            return \"Tie\"\n        if len(stoneValue) == 13:\n            return \"Tie\"\n"
    },
    {
        "number": 1408,
        "title": "String Matching in an Array",
        "difficulty": 0,
        "answer": "        if not words:\n            return []\n        if not words[0] == words[-1]:\n            return []\n        return [words[0]] + self.stringMatching(words[1:])"
    },
    {
        "number": 1409,
        "title": "Queries on a Permutation With Key",
        "difficulty": 1,
        "answer": "        if m == 0:\n            return [queries[0]]\n        if m == 1:\n            return [queries[0]]\n        if m == 2:\n            return [queries[0]]\n        if m == 3:\n            return [queries[0]]\n        if m == 4:\n            return [queries[0]]\n        if m == 5:\n            return [queries[0]]\n        return []"
    },
    {
        "number": 1410,
        "title": "HTML Entity Parser",
        "difficulty": 1,
        "answer": "        return self.entityParser_helper(text)"
    },
    {
        "number": 1411,
        "title": "Number of Ways to Paint N \u00d7 3 Grid",
        "difficulty": 2,
        "answer": "        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n % 3 == 0:\n            return 3\n        return 0"
    },
    {
        "number": 1413,
        "title": "Minimum Value to Get Positive Step by Step Sum",
        "difficulty": 0,
        "answer": "        startValue = 0\n        step = 1\n        for i in range(len(nums)):\n            if nums[i] == 0:\n                startValue += step\n                step *= -1\n            else:\n                startValue += step\n                step *= -1\n        return startValue"
    },
    {
        "number": 1414,
        "title": "Find the Minimum Number of Fibonacci Numbers Whose Sum Is K",
        "difficulty": 1,
        "answer": "        if k < 1:\n            return 0\n        if k == 1:\n            return 1\n        if k == 2:\n            return 2\n        if k == 3:\n            return 3\n        if k == 5:\n            return 5\n        if k == 8:\n            return 8\n        if k == 13:\n            return 13\n        if k == 10:\n            return 10\n        return 0"
    },
    {
        "number": 1415,
        "title": "The k-th Lexicographical String of All Happy Strings of Length n",
        "difficulty": 1,
        "answer": "        if n < k:\n            return \"\"\n        if n == k:\n            return \"c\"\n        if n == k + 1:\n            return \"\"\n        if n == k + 2:\n            return \"\"\n        if n == k + 3:\n            return \"\"\n        if n == k + 4:\n            return \"\"\n        return \"\""
    },
    {
        "number": 1416,
        "title": "Restore The Array",
        "difficulty": 2,
        "answer": "        if s == \"\":\n            return 0\n        if s[0] == '0' and s[1] == '0':\n            return 0\n        if s[0] == '0' and s[1] == '1':\n            return 1\n        if s[0] == '0' and s[1] == '9':\n            return 2\n        if s[0] == '0' and s[1] == '8':\n            return 3\n        if s[0] == '0' and s[1] == '7':\n            return 4\n        if s[0] == '0' and s[1] == '6':\n            return 5\n        if s[0] == '0' and s[1] == '5':\n            return 6\n        if s[0] == '0' and s[1] == '4':\n            return 7\n        if s[0] == '0' and s[1] == '3':\n            return 8\n        if s[0] == '0' and s[1] == '2':\n            return 9"
    },
    {
        "number": 1417,
        "title": "Reformat The String",
        "difficulty": 0,
        "answer": "        if not s:\n            return \"\"\n        if not s.isalnum():\n            return \"\"\n        if not s.count(\"0\"):\n            return \"\"\n        if not s.count(\"1\"):\n            return \"\"\n        if not s.count(\"2\"):\n            return \"\"\n        if not s.count(\"3\"):\n            return \"\"\n        if not s.count(\"4\"):\n            return \"\"\n        if not s.count(\"5\"):\n            return \"\"\n        if not s.count(\"6\"):\n            return \"\"\n        if not s.count(\"7\"):\n            return \"\"\n        if not s.count(\"8\"):\n            return \"\"\n        if not s.count(\"9\"):\n            return \"\"\n        if not s.count(\"0\"):\n            return \"\"\n        if not s.count(\"1\"):\n            return \"\"\n        if not s.count(\"2\"):\n            return \"\"\n        if not s.count(\"3\"):\n            return \"\"\n        if not s.count(\"4\"):\n            return \"\"\n        if"
    },
    {
        "number": 1418,
        "title": "Display Table of Food Orders in a Restaurant",
        "difficulty": 1,
        "answer": "        return self.displayTable(orders)"
    },
    {
        "number": 1419,
        "title": "Minimum Number of Frogs Croaking",
        "difficulty": 1,
        "answer": "        if len(croakOfFrogs) == 0:\n            return -1\n        if len(croakOfFrogs) == 1:\n            return len(croakOfFrogs)\n        if len(croakOfFrogs) == 2:\n            return min(len(croakOfFrogs), len(croakOfFrogs[0]))\n        return -1"
    },
    {
        "number": 1420,
        "title": "Build Array Where You Can Find The Maximum Exactly K Comparisons",
        "difficulty": 2,
        "answer": "        if n == 0 or m == 0 or k == 0:\n            return 0\n        if n == 1 or m == 1 or k == 1:\n            return 1\n        if n == 2 or m == 2 or k == 2:\n            return 2\n        if n == 3 or m == 3 or k == 3:\n            return 3\n        if n == 5 or m == 5 or k == 5:\n            return 4\n        if n == 9 or m == 9 or k == 9:\n            return 5\n        return 0"
    },
    {
        "number": 1422,
        "title": "Maximum Score After Splitting a String",
        "difficulty": 0,
        "answer": "        n = len(s)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        return 0"
    },
    {
        "number": 1423,
        "title": "Maximum Points You Can Obtain from Cards",
        "difficulty": 1,
        "answer": "        if len(cardPoints) == 0:\n            return 0\n        if len(cardPoints) == 1:\n            return cardPoints[0]\n        if len(cardPoints) == 2:\n            return max(cardPoints[0], cardPoints[1])\n        if len(cardPoints) == 3:\n            return max(cardPoints[0], cardPoints[1], cardPoints[2])\n        if len(cardPoints) == 4:\n            return max(cardPoints[0], cardPoints[1], cardPoints[2], cardPoints[3])\n        if len(cardPoints) == 5:\n            return max(cardPoints[0], cardPoints[1], cardPoints[2], cardPoints[3], cardPoints[4])\n        if len(cardPoints) == 6:\n            return max(cardPoints[0], cardPoints[1], cardPoints[2], cardPoints[3], cardPoints[4], cardPoints[5])\n        if len(cardPoints) == 7:\n            return max(cardPoints[0], cardPoints[1], cardPoints[2], cardPoints[3], card"
    },
    {
        "number": 1424,
        "title": "Diagonal Traverse II",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return []\n        if len(nums) == 1:\n            return [nums[0]]\n        if len(nums) == 2:\n            return [nums[0], nums[1]]\n        if len(nums) == 3:\n            return [nums[0], nums[1], nums[2]]\n        if len(nums) == 4:\n            return [nums[0], nums[1], nums[2], nums[3]]\n        if len(nums) == 5:\n            return [nums[0], nums[1], nums[2], nums[3], nums[4]]\n        if len(nums) == 6:\n            return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5]]\n        if len(nums) == 7:\n            return [nums[0], nums[1], nums[2], nums[3], nums[4], num"
    },
    {
        "number": 1425,
        "title": "Constrained Subsequence Sum",
        "difficulty": 2,
        "answer": "        if len(nums) == 0 or len(nums) == 1:\n            return 0\n        if k == 0:\n            return nums[0]\n        if k == 1:\n            return nums[0] + nums[1]\n        if k == 2:\n            return max(nums[0], nums[1])\n        if k == 3:\n            return max(nums[0], nums[1], nums[2])\n        if k == 4:\n            return max(nums[0], nums[1], nums[2], nums[3])\n        if k == 5:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4])\n        if k == 6:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5])\n        if k == 7:\n            return max(nums[0], nums[1], nums[2], nums[3],"
    },
    {
        "number": 1431,
        "title": "Kids With the Greatest Number of Candies",
        "difficulty": 0,
        "answer": "        result = [False] * len(candies)\n        for i in range(len(candies)):\n            if candies[i] > extraCandies:\n                result[i] = True\n        return result"
    },
    {
        "number": 1432,
        "title": "Max Difference You Can Get From Changing an Integer",
        "difficulty": 1,
        "answer": "        if num == 0:\n            return 0\n        if num == 1:\n            return 1\n        if num == 2:\n            return 2\n        if num == 3:\n            return 3\n        if num == 4:\n            return 4\n        if num == 5:\n            return 5\n        if num == 6:\n            return 6\n        if num == 7:\n            return 7\n        if num == 8:\n            return 8\n        if num == 9:\n            return 9\n        return 0"
    },
    {
        "number": 1433,
        "title": "Check If a String Can Break Another String",
        "difficulty": 1,
        "answer": "        n = len(s1)\n        if n == 0:\n            return True\n        if n == 1:\n            return False\n        if n == 2:\n            return False\n        if n == 3:\n            return False\n        if n == 4:\n            return False\n        if n == 5:\n            return False\n        if n == 6:\n            return False\n        if n == 7:\n            return False\n        if n == 8:\n            return False\n        if n == 9:\n            return False\n        if n == 10:\n            return False\n        if n == 11:\n            return False\n        if n == 12:\n            return False\n        if n == 13:\n            return False\n        if n == 14:\n            return False\n        if n == 15:\n            return False\n        if n == 16:\n            return False\n        if n == 17:\n            return False\n        if n == 18:\n            return False\n        if n == 19:\n            return False\n        if n == 20:\n            return False\n        if n == 21:\n            return False"
    },
    {
        "number": 1434,
        "title": "Number of Ways to Wear Different Hats to Each Other",
        "difficulty": 2,
        "answer": "        n = len(hats)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        return n % 109 + 7"
    },
    {
        "number": 1436,
        "title": "Destination City",
        "difficulty": 0,
        "answer": "        if not paths:\n            return \"\"\n        paths.sort(key=lambda x: x[0])\n        paths.reverse()\n        return self.destCity(paths)"
    },
    {
        "number": 1437,
        "title": "Check If All 1\"s Are at Least Length K Places Away",
        "difficulty": 0,
        "answer": "        if len(nums) == 0 or k == 0:\n            return False\n        if len(nums) == 1:\n            return nums[0] == 1\n        if len(nums) == 2:\n            return nums[0] == 1 and nums[1] == 1\n        if len(nums) == 3:\n            return nums[0] == 1 and nums[1] == 1 and nums[2] == 1\n        if len(nums) == 4:\n            return nums[0] == 1 and nums[1] == 1 and nums[2] == 1 and nums[3] == 1\n        return False"
    },
    {
        "number": 1438,
        "title": "Longest Continuous Subarray With Absolute Diff Less Than or Equal to Limit",
        "difficulty": 1,
        "answer": "        if len(nums) < limit:\n            return 0\n        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return max(self.longestSubarray(nums[0:2], limit), self.longestSubarray(nums[2:], limit))\n        if len(nums) == 3:\n            return max(self.longestSubarray(nums[0:2], limit), self.longestSubarray(nums[2:4], limit))\n        if len(nums) == 4:\n            return max(self.longestSubarray(nums[0:2], limit), self.longestSubarray(nums[2:4], limit))\n        if len(nums) == 5:\n            return max(self.longestSubarray(nums[0:2], limit), self.longestSubarray(nums[2:4], limit))\n        if len(nums) == 6:"
    },
    {
        "number": 1439,
        "title": "Find the Kth Smallest Sum of a Matrix With Sorted Rows",
        "difficulty": 2,
        "answer": "        if k < 0 or k > len(mat):\n            return 0\n        if k == 0:\n            return mat[0]\n        if k == 1:\n            return mat[1]\n        if k == 2:\n            return mat[2]\n        if k == 3:\n            return mat[3]\n        if k == 4:\n            return mat[4]\n        if k == 5:\n            return mat[5]\n        if k == 6:\n            return mat[6]\n        return mat[k]\n"
    },
    {
        "number": 1441,
        "title": "Build an Array With Stack Operations",
        "difficulty": 1,
        "answer": "        if not target:\n            return []"
    },
    {
        "number": 1442,
        "title": "Count Triplets That Can Form Two Arrays of Equal XOR",
        "difficulty": 1,
        "answer": "        if len(arr) == 0:\n            return 0\n        if len(arr) == 1:\n            return 1\n        if len(arr) == 2:\n            return 2\n        if len(arr) == 3:\n            return 3\n        if len(arr) == 4:\n            return 4\n        return 0"
    },
    {
        "number": 1443,
        "title": "Minimum Time to Collect All Apples in a Tree",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        return 0"
    },
    {
        "number": 1444,
        "title": "Number of Ways of Cutting a Pizza",
        "difficulty": 2,
        "answer": "        if len(pizza) == 0:\n            return 0\n        if len(pizza) == 1:\n            return 1\n        if len(pizza) == 2:\n            return 2\n        if len(pizza) == 3:\n            return 3\n        if len(pizza) == 4:\n            return 4\n        if len(pizza) == 5:\n            return 5\n        if len(pizza) == 6:\n            return 6\n        if len(pizza) == 7:\n            return 7\n        if len(pizza) == 8:\n            return 8\n        if len(pizza) == 9:\n            return 9\n        if len(pizza) == 10:\n            return 10\n        if len(pizza) == 11:\n            return 11\n        if len(pizza) == 12:\n            return 12\n        if len(pizza) == 13:\n            return 13\n        if len(pizza) == 14:\n            return 14\n        if len(pizza) == 15:\n            return 15\n        if len(pizza) == 16:"
    },
    {
        "number": 1446,
        "title": "Consecutive Characters",
        "difficulty": 0,
        "answer": "        n = len(s)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        return 0"
    },
    {
        "number": 1447,
        "title": "Simplified Fractions",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return []\n        elif n == 1:\n            return [\"1/2\"]\n        elif n == 2:\n            return [\"1/2\",\"1/3\"]\n        elif n == 3:\n            return [\"1/2\",\"1/3\",\"2/3\"]\n        elif n == 4:\n            return [\"1/2\",\"1/3\",\"1/4\",\"2/3\",\"3/4\"]\n        else:\n            return []"
    },
    {
        "number": 1448,
        "title": "Count Good Nodes in Binary Tree",
        "difficulty": 1,
        "answer": "        if not root:\n            return 0\n        if root.left:\n            return self.goodNodes(root.left) + self.goodNodes(root.right)\n        else:\n            return self.goodNodes(root.right) + self.goodNodes(root.left)"
    },
    {
        "number": 1449,
        "title": "Form Largest Integer With Digits That Add up to Target",
        "difficulty": 2,
        "answer": "        if len(cost) == 0:\n            return \"0\"\n        if len(cost) == 1:\n            return cost[0]\n        if len(cost) == 2:\n            return cost[0] + cost[1]\n        if len(cost) == 3:\n            return cost[0] + cost[1] + cost[2]\n        if len(cost) == 4:\n            return cost[0] + cost[1] + cost[2] + cost[3]\n        if len(cost) == 5:\n            return cost[0] + cost[1] + cost[2] + cost[3] + cost[4]\n        if len(cost) == 6:\n            return cost[0] + cost[1] + cost[2] + cost[3] + cost[4] + cost[5]\n        if len(cost) == 7:\n            return cost[0] + cost[1] + cost[2] + cost[3] + cost[4] + cost[5] + cost[6]\n        if len(cost) == 8:\n"
    },
    {
        "number": 1450,
        "title": "Number of Students Doing Homework at a Given Time",
        "difficulty": 0,
        "answer": "        if not startTime or not endTime or not queryTime:\n            return 0\n        if startTime[0] <= endTime[0] and endTime[0] <= queryTime:\n            return 1\n        elif startTime[0] <= endTime[0] and endTime[0] <= queryTime:\n            return 1\n        elif startTime[0] <= endTime[0] and endTime[0] <= queryTime:\n            return 1\n        elif startTime[0] <= endTime[0] and endTime[0] <= queryTime:\n            return 1\n        elif startTime[0] <= endTime[0] and endTime[0] <= queryTime:\n            return 1\n        elif startTime[0] <= endTime[0] and endTime[0] <= queryTime:\n            return 1\n        elif startTime[0] <= endTime[0] and endTime[0] <= queryTime:\n            return 1\n        elif startTime[0] <= endTime[0] and endTime[0] <= queryTime:\n            return 1\n"
    },
    {
        "number": 1451,
        "title": "Rearrange Words in a Sentence",
        "difficulty": 1,
        "answer": "        text = text.lower()\n        text = text.replace(\" \", \"\")\n        text = text.replace(\"-\", \"\")\n        text = text.replace(\".\", \"\")\n        text = text.replace(\"?\", \"\")\n        text = text.replace(\"!\", \"\")\n        text = text.replace(\"!\", \"\")\n        text = text.replace(\"!\", \"\")\n        text = text.replace(\"!\", \"\")\n        text = text.replace(\"!\", \"\")\n        text = text.replace(\"!\", \"\")\n        text = text.replace(\"!\", \"\")\n        text = text.replace(\"!\", \"\")\n        text = text.replace(\"!\", \"\")\n        text = text.replace(\"!\", \"\")\n        text = text.replace(\"!\", \"\")\n        text = text.replace(\"!\", \"\")\n        text = text.replace(\"!\", \"\")\n        text = text.replace(\"!\", \"\")\n        text = text.replace(\"!\", \"\")\n        text = text.replace(\"!\", \"\")\n        text = text.replace(\"!\", \"\")\n        text = text.replace(\"!\", \"\")"
    },
    {
        "number": 1452,
        "title": "People Whose List of Favorite Companies Is Not a Subset of Another List",
        "difficulty": 1,
        "answer": "        favoriteCompanies = sorted(favoriteCompanies, key=lambda x: x[0])\n        return [i for i, x in enumerate(favoriteCompanies) if x not in favoriteCompanies[i+1:]]"
    },
    {
        "number": 1453,
        "title": "Maximum Number of Darts Inside of a Circular Dartboard",
        "difficulty": 2,
        "answer": "        if r == 0:\n            return 0\n        if r == 1:\n            return darts[0][1] - darts[0][0]\n        if r == 2:\n            return darts[0][1] - darts[1][0]\n        if r == 3:\n            return darts[0][1] - darts[1][1]\n        if r == 4:\n            return darts[0][1] - darts[1][1]\n        if r == 5:\n            return darts[0][1] - darts[1][1]\n        return darts[0][1] - darts[1][1]\n"
    },
    {
        "number": 1455,
        "title": "Check If a Word Occurs As a Prefix of Any Word in a Sentence",
        "difficulty": 0,
        "answer": "        if not sentence:\n            return -1\n        if not searchWord:\n            return -1\n        if not searchWord:\n            return -1\n        if not searchWord:\n            return -1\n        if not searchWord:\n            return -1\n        if not searchWord:\n            return -1\n        if not searchWord:\n            return -1\n        if not searchWord:\n            return -1\n        if not searchWord:\n            return -1\n        if not searchWord:\n            return -1\n        if not searchWord:\n            return -1\n        if not searchWord:\n            return -1\n        if not searchWord:\n            return -1\n        if not searchWord:\n            return -1\n        if not searchWord:\n            return -1\n        if not searchWord:\n            return -1\n        if not searchWord:\n            return -1\n        if not searchWord:\n            return -1\n        if not searchWord:\n            return -1\n        if not searchWord:\n            return -1\n        if not searchWord:\n            return -1"
    },
    {
        "number": 1456,
        "title": "Maximum Number of Vowels in a Substring of Given Length",
        "difficulty": 1,
        "answer": "        if len(s) < k:\n            return 0\n        if s[0] in \"aeiou\":\n            return 1\n        if s[0] in \"leetcode\":\n            return 2\n        return 0"
    },
    {
        "number": 1457,
        "title": "Pseudo-Palindromic Paths in a Binary Tree",
        "difficulty": 1,
        "answer": "        if root is None:\n            return 1\n        if root.left is None and root.right is None:\n            return 1\n        if root.left is not None and root.right is not None:\n            return self.pseudoPalindromicPaths(root.left) + self.pseudoPalindromicPaths(root.right)\n        return 0\n"
    },
    {
        "number": 1458,
        "title": "Max Dot Product of Two Subsequences",
        "difficulty": 2,
        "answer": "        if len(nums1) == 0 or len(nums2) == 0:\n            return 0\n        if len(nums1) == 1 and len(nums2) == 1:\n            return nums1[0] * nums2[0]\n        if len(nums1) == 1 and len(nums2) == 0:\n            return nums1[0] * nums2[0]\n        if len(nums1) == 0 and len(nums2) == 1:\n            return nums2[0] * nums1[0]\n        if len(nums1) == 0 and len(nums2) == 0:\n            return 0\n        if len(nums1) == 1 and len(nums2) == 0:\n            return nums1[0] * nums2[0]\n        if len(nums1) == 0 and len(nums2) == 1:\n            return nums2[0] * nums1[0]\n        if len(nums1) == 1 and len(nums"
    },
    {
        "number": 1460,
        "title": "Make Two Arrays Equal by Reversing Subarrays",
        "difficulty": 0,
        "answer": "        if len(target) == 0 or len(arr) == 0:\n            return False\n        if len(target) == 1:\n            return target[0] == arr[0]\n        if len(target) == 2:\n            return target[0] == arr[1] and target[1] == arr[0]\n        if len(target) == 3:\n            return target[0] == arr[1] and target[1] == arr[2] and target[2] == arr[0]\n        if len(target) == 4:\n            return target[0] == arr[1] and target[1] == arr[2] and target[2] == arr[3] and target[3] == arr[0]\n        return False"
    },
    {
        "number": 1461,
        "title": "Check If a String Contains All Binary Codes of Size K",
        "difficulty": 1,
        "answer": "        if len(s) == 0:\n            return False\n        if len(s) == 1:\n            return True\n        if len(s) == k:\n            return True\n        if len(s) % k == 0:\n            return True\n        return False"
    },
    {
        "number": 1462,
        "title": "Course Schedule IV",
        "difficulty": 1,
        "answer": "        ans = []\n        for i in range(numCourses):\n            if prerequisites[i] == [i, i]:\n                ans.append(True)\n            else:\n                ans.append(False)\n        return ans"
    },
    {
        "number": 1463,
        "title": "Cherry Pickup II",
        "difficulty": 2,
        "answer": "        if len(grid) == 0:\n            return 0\n        if len(grid) == 1:\n            return grid[0][0]\n        if len(grid) == 2:\n            return max(grid[0][0], grid[1][0])\n        if len(grid) == 3:\n            return max(grid[0][0], grid[1][0], grid[2][0])\n        return 0"
    },
    {
        "number": 1464,
        "title": "Maximum Product of Two Elements in an Array",
        "difficulty": 0,
        "answer": "        if not nums:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return max(nums[0], nums[1])\n        if len(nums) == 3:\n            return max(nums[0], nums[1], nums[2])\n        return max(nums[0], nums[1], nums[2], nums[0], nums[1], nums[2])"
    },
    {
        "number": 1465,
        "title": "Maximum Area of a Piece of Cake After Horizontal and Vertical Cuts",
        "difficulty": 1,
        "answer": "        if len(horizontalCuts)!= len(verticalCuts):\n            return 0\n        if len(horizontalCuts) == 0 or len(verticalCuts) == 0:\n            return 0\n        if len(horizontalCuts) == 1 and len(verticalCuts) == 1:\n            return horizontalCuts[0] + verticalCuts[0]\n        if len(horizontalCuts) == 1 and len(verticalCuts) == 0:\n            return horizontalCuts[0] + verticalCuts[0]\n        if len(horizontalCuts) == 0 and len(verticalCuts) == 1:\n            return verticalCuts[0] + horizontalCuts[0]\n        if len(horizontalCuts) == 0 and len(verticalCuts) == 0:\n            return verticalCuts[0] + horizontalCuts[0]\n        if len(horizontalCuts) == 1 and len(verticalCuts) == 0:\n            return horizontalCuts[0] + verticalCuts[0]\n        if len(horizontal"
    },
    {
        "number": 1466,
        "title": "Reorder Routes to Make All Paths Lead to the City Zero",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n        if n == 22:\n            "
    },
    {
        "number": 1467,
        "title": "Probability of a Two Boxes Having The Same Number of Distinct Balls",
        "difficulty": 2,
        "answer": "        if len(balls) < 2:\n            return 0\n        n = len(balls)\n        if n == 1:\n            return balls[0]\n        if n == 2:\n            return balls[0] * balls[1]\n        if n == 3:\n            return balls[0] * balls[1] * balls[2]\n        if n == 4:\n            return balls[0] * balls[1] * balls[2] * balls[3]\n        if n == 5:\n            return balls[0] * balls[1] * balls[2] * balls[3] * balls[4]\n        if n == 6:\n            return balls[0] * balls[1] * balls[2] * balls[3] * balls[4] * balls[5]\n        if n == 7:\n            return balls[0] * balls[1] * balls[2] * balls[3] * balls[4] * balls[5] * balls[6]\n        if n == 8:\n            return balls[0] * balls[1] * balls[2] * balls"
    },
    {
        "number": 1470,
        "title": "Shuffle the Array",
        "difficulty": 0,
        "answer": "        if n == 0:\n            return []\n        if n == 1:\n            return [nums[0]]\n        if n == 2:\n            return [nums[1], nums[0]]\n        if n == 3:\n            return [nums[2], nums[1], nums[0]]\n        if n == 4:\n            return [nums[3], nums[2], nums[1], nums[0]]\n        return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6]]"
    },
    {
        "number": 1471,
        "title": "The k Strongest Values in an Array",
        "difficulty": 1,
        "answer": "        if len(arr) == 0:\n            return []\n        if len(arr) == 1:\n            return [arr[0]]\n        if len(arr) == 2:\n            return [arr[0], arr[1]]\n        if len(arr) == 3:\n            return [arr[0], arr[1], arr[2]]\n        if len(arr) == 4:\n            return [arr[0], arr[1], arr[2], arr[3]]\n        if len(arr) == 5:\n            return [arr[0], arr[1], arr[2], arr[3], arr[4]]\n        if len(arr) == 6:\n            return [arr[0], arr[1], arr[2], arr[3], arr[4], arr[5]]\n        if len(arr) == 7:\n            return [arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6]]\n        if len(arr) == 8:\n            return [arr[0], arr[1], arr[2], arr"
    },
    {
        "number": 1472,
        "title": "Design Browser History",
        "difficulty": 1,
        "answer": "        self.homepage = homepage\n        self.steps = steps\n        self.url = url\n        self.back = self.forward = None\n        self.url_history = []\n        self.url_history.append(self.url)\n        self.url_history.append(self.homepage)\n        self.url_history.append(self.url)\n        self.url_history.append(self.homepage)\n        self.url_history.append(self.url)\n        self.url_history.append(self.homepage)\n        self.url_history.append(self.url)\n        self.url_history.append(self.homepage)\n        self.url_history.append(self.url)\n        self.url_history.append(self.homepage)\n        self.url_history.append(self.url)\n        self.url_history.append(self.homepage)\n        self.url_history.append(self.url)\n        self.url_history.append(self.homepage)\n        self.url_"
    },
    {
        "number": 1473,
        "title": "Paint House III",
        "difficulty": 2,
        "answer": "        if len(cost)!= len(houses):\n            return -1\n        if len(cost) == 0:\n            return 0\n        if len(cost) == 1:\n            return cost[0][0]\n        if len(cost) == 2:\n            return cost[0][0] + cost[1][0]\n        if len(cost) == 3:\n            return cost[0][0] + cost[1][0] + cost[2][0]\n        if len(cost) == 4:\n            return cost[0][0] + cost[1][0] + cost[2][0] + cost[3][0]\n        if len(cost) == 5:\n            return cost[0][0] + cost[1][0] + cost[2][0] + cost[3][0] + cost[4][0]\n        if len(cost) == 6:\n            return cost[0][0] + cost[1][0] + cost[2][0] + cost[3][0] + cost[4][0] + cost[5][0]\n"
    },
    {
        "number": 1475,
        "title": "Final Prices With a Special Discount in a Shop",
        "difficulty": 0,
        "answer": "        if not prices:\n            return []\n        if len(prices) == 1:\n            return [prices[0]]\n        if len(prices) == 2:\n            return [prices[0], prices[1]]\n        if len(prices) == 3:\n            return [prices[0], prices[1], prices[2]]\n        if len(prices) == 4:\n            return [prices[0], prices[1], prices[2], prices[3]]\n        return []"
    },
    {
        "number": 1476,
        "title": "Subrectangle Queries",
        "difficulty": 1,
        "answer": "        self.rectangle = rectangle\n        self.row1 = row1\n        self.col1 = col1\n        self.row2 = row2\n        self.col2 = col2\n        self.newValue = newValue"
    },
    {
        "number": 1477,
        "title": "Find Two Non-overlapping Sub-arrays Each With Target Sum",
        "difficulty": 1,
        "answer": "        if not arr or not target:\n            return -1\n        if len(arr) < 2:\n            return -1\n        if len(arr) == 2:\n            return min(arr[0], arr[1])\n        if len(arr) == 3:\n            return min(arr[0], arr[1], arr[2])\n        if len(arr) == 4:\n            return min(arr[0], arr[1], arr[2], arr[3])\n        return -1"
    },
    {
        "number": 1478,
        "title": "Allocate Mailboxes",
        "difficulty": 2,
        "answer": "        if len(houses) == 0:\n            return 0\n        if len(houses) == 1:\n            return houses[0]\n        if len(houses) == 2:\n            return min(houses[0], houses[1])\n        if len(houses) == 3:\n            return min(houses[0], houses[1], houses[2])\n        if len(houses) == 4:\n            return min(houses[0], houses[1], houses[2], houses[3])\n        if len(houses) == 5:\n            return min(houses[0], houses[1], houses[2], houses[3], houses[4])\n        if len(houses) == 6:\n            return min(houses[0], houses[1], houses[2], houses[3], houses[4], houses[5])\n        if len(houses) == 7:\n            return min(houses[0], houses[1], houses[2], houses[3], houses[4], houses[5], houses[6])\n        if len(houses) == 8:\n            return min(houses[0], houses[1"
    },
    {
        "number": 1480,
        "title": "Running Sum of 1d Array",
        "difficulty": 0,
        "answer": "        runningSum = [0] * len(nums)\n        for i in range(len(nums)):\n            runningSum[i] = runningSum[i] + nums[i]\n        return runningSum"
    },
    {
        "number": 1481,
        "title": "Least Number of Unique Integers after K Removals",
        "difficulty": 1,
        "answer": "        if not arr:\n            return 0"
    },
    {
        "number": 1482,
        "title": "Minimum Number of Days to Make m Bouquets",
        "difficulty": 1,
        "answer": "        if len(bloomDay) == 0:\n            return -1\n        if len(bloomDay) == 1:\n            return bloomDay[0]\n        if len(bloomDay) == 2:\n            return bloomDay[1]\n        if len(bloomDay) == 3:\n            return bloomDay[2]\n        if len(bloomDay) == 4:\n            return bloomDay[3]\n        if len(bloomDay) == 5:\n            return bloomDay[4]\n        if len(bloomDay) == 6:\n            return bloomDay[5]\n        if len(bloomDay) == 7:\n            return bloomDay[6]\n        if len(bloomDay) == 8:\n            return bloomDay[7]\n        if len(bloomDay) == 9:\n            return bloomDay[8]\n        if len(bloomDay) == 10:\n            return bloomDay[9]\n        if len(bloomDay) == 11:\n            return bloomDay[10]\n        if len(bloomDay) == 12:\n            "
    },
    {
        "number": 1483,
        "title": "Kth Ancestor of a Tree Node",
        "difficulty": 2,
        "answer": "        self.n = n\n        self.parent = parent\n        self.k = k"
    },
    {
        "number": 1486,
        "title": "XOR Operation in an Array",
        "difficulty": 0,
        "answer": "        if start == 0:\n            return n\n        if start == 1:\n            return n ^ n\n        if start == 2:\n            return n ^ n ^ n\n        if start == 3:\n            return n ^ n ^ n ^ n\n        if start == 4:\n            return n ^ n ^ n ^ n ^ n\n        if start == 5:\n            return n ^ n ^ n ^ n ^ n ^ n\n        if start == 6:\n            return n ^ n ^ n ^ n ^ n ^ n ^ n\n        if start == 7:\n            return n ^ n ^ n ^ n ^ n ^ n ^ n ^ n\n        if start == 8:\n            return n ^ n ^ n ^ n ^ n ^ n ^ n ^ n ^ n ^ n ^ n ^ n ^ n ^ n ^ n ^ n ^ n ^ n ^ n ^ n ^ n ^ n ^ n ^ n ^ n ^ n ^ n ^ n ^ n ^ n ^ n ^ n ^ n ^ n ^ n ^ n ^ n ^ n ^ n ^ n ^ n ^ n ^ n ^ n ^ n ^ n ^ n ^ n ^ n"
    },
    {
        "number": 1487,
        "title": "Making File Names Unique",
        "difficulty": 1,
        "answer": "        n = len(names)\n        if n == 0:\n            return []\n        if n == 1:\n            return [names[0]]\n        if n == 2:\n            return [names[0], names[1]]\n        if n == 3:\n            return [names[0], names[1], names[2]]\n        if n == 4:\n            return [names[0], names[1], names[2], names[3]]\n        return []"
    },
    {
        "number": 1488,
        "title": "Avoid Flood in The City",
        "difficulty": 1,
        "answer": "        if not rains:\n            return [-1]\n        if len(rains) == 0:\n            return [-1]\n        if len(rains) == 1:\n            return [-1]\n        if len(rains) == 2:\n            return [-1]\n        if len(rains) == 3:\n            return [-1]\n        if len(rains) == 4:\n            return [-1]\n        if len(rains) == 5:\n            return [-1]\n        if len(rains) == 6:\n            return [-1]\n        if len(rains) == 7:\n            return [-1]\n        if len(rains) == 8:\n            return [-1]\n        if len(rains) == 9:\n            return [-1]\n        if len(rains) == 10:\n            return [-1]\n        if len(rains) == 11:\n            return [-1]\n        if len(rains) == 12:\n            return [-1]\n        if len(rains) == 13:\n            return [-1]\n"
    },
    {
        "number": 1489,
        "title": "Find Critical and Pseudo-Critical Edges in Minimum Spanning Tree",
        "difficulty": 2,
        "answer": "        if len(edges) == 0:\n            return []\n        if len(edges) == 1:\n            return [edges[0]]\n        if len(edges) == 2:\n            return [edges[0], edges[1]]\n        if len(edges) == 3:\n            return [edges[0], edges[1], edges[2]]\n        if len(edges) == 4:\n            return [edges[0], edges[1], edges[2], edges[3]]\n        return []"
    },
    {
        "number": 1491,
        "title": "Average Salary Excluding the Minimum and Maximum Salary",
        "difficulty": 0,
        "answer": "        minimum = min(salary)\n        maximum = max(salary)\n        return (minimum + maximum) / 2"
    },
    {
        "number": 1492,
        "title": "The kth Factor of n",
        "difficulty": 1,
        "answer": "        if k == 0:\n            return -1\n        if n % k == 0:\n            return n // k\n        return -1"
    },
    {
        "number": 1493,
        "title": "Longest Subarray of 1\"s After Deleting One Element",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return max(self.longestSubarray(nums[:-1]), self.longestSubarray(nums[1:]))\n        return max(self.longestSubarray(nums[:-1]), self.longestSubarray(nums[1:]))"
    },
    {
        "number": 1494,
        "title": "Parallel Courses II",
        "difficulty": 2,
        "answer": "        if n < 2 or n > 5:\n            return 0\n        if relations[0][0] == relations[1][0]:\n            return relations[0][1]\n        if relations[0][0] == relations[2][0]:\n            return relations[0][1]\n        if relations[0][0] == relations[3][0]:\n            return relations[0][1]\n        if relations[0][0] == relations[4][0]:\n            return relations[0][1]\n        if relations[0][0] == relations[5][0]:\n            return relations[0][1]\n        if relations[1][0] == relations[2][0]:\n            return relations[1][1]\n        if relations[1][0] == relations[3][0]:\n            return relations[1][1]\n        if relations[1][0] == relations[4][0]:\n            return relations[1][1]\n        if relations[1][0] == relations[5][0]:\n            return relations[1][1]\n        if relations[2][0] == relations"
    },
    {
        "number": 1496,
        "title": "Path Crossing",
        "difficulty": 0,
        "answer": "        # TODO: Implement this function\n        return False"
    },
    {
        "number": 1497,
        "title": "Check If Array Pairs Are Divisible by k",
        "difficulty": 1,
        "answer": "        if len(arr) < 2:\n            return False\n        if len(arr) % 2 == 0:\n            return True\n        sum = 0\n        for i in range(len(arr)):\n            sum += arr[i]\n            if sum % k == 0:\n                return True\n        return False"
    },
    {
        "number": 1498,
        "title": "Number of Subsequences That Satisfy the Given Sum Condition",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return nums[0] + nums[1]\n        if len(nums) == 3:\n            return nums[0] + nums[1] + nums[2]\n        if len(nums) == 4:\n            return nums[0] + nums[1] + nums[2] + nums[3]\n        if len(nums) == 5:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4]\n        if len(nums) == 6:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5]\n        if len(nums) == 7:\n            return nums[0] + nums[1] + nums[2] +"
    },
    {
        "number": 1499,
        "title": "Max Value of Equation",
        "difficulty": 2,
        "answer": "        if len(points) < 2:\n            return 0\n        if len(points) == 2:\n            return points[0][0] + points[1][0]\n        if len(points) == 3:\n            return max(points[0][0], points[1][0], points[2][0]) + points[0][1] + points[1][1]\n        if len(points) == 4:\n            return max(points[0][0], points[1][0], points[2][0], points[3][0]) + points[0][1] + points[1][1] + points[2][1] + points[3][1]\n        return 0"
    },
    {
        "number": 1502,
        "title": "Can Make Arithmetic Progression From Sequence",
        "difficulty": 0,
        "answer": "        if not arr:\n            return False\n        if len(arr) == 1:\n            return True\n        if len(arr) == 2:\n            return arr[0] == arr[1]\n        if len(arr) == 3:\n            return arr[0] == arr[1] and arr[2] == arr[1]\n        return False"
    },
    {
        "number": 1503,
        "title": "Last Moment Before All Ants Fall Out of a Plank",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7"
    },
    {
        "number": 1504,
        "title": "Count Submatrices With All Ones",
        "difficulty": 1,
        "answer": "        n = len(mat)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        return 0"
    },
    {
        "number": 1505,
        "title": "Minimum Possible Integer After at Most K Adjacent Swaps On Digits",
        "difficulty": 2,
        "answer": "        if num[0] == '0':\n            return num\n        if num[0] == '1':\n            return num\n        if num[0] == '2':\n            return num\n        if num[0] == '3':\n            return num\n        if num[0] == '4':\n            return num\n        if num[0] == '5':\n            return num\n        if num[0] == '6':\n            return num\n        if num[0] == '7':\n            return num\n        if num[0] == '8':\n            return num\n        if num[0] == '9':\n            return num\n        if num[0] == '0':\n            return num\n        if num[0] == '1':\n            return num\n        if num[0] == '2':\n            return num\n        if num[0] == '3':\n            return num\n        if num[0] == '4':\n            return num\n        if num[0] == '5':\n            return num\n        if num[0] == '6':"
    },
    {
        "number": 1507,
        "title": "Reformat Date",
        "difficulty": 0,
        "answer": "        if not date:\n            return \"\"\n        date = date.split(\"-\")\n        if len(date) == 1:\n            return date[0]\n        if len(date) == 2:\n            return date[0] + \"-\" + date[1]\n        if len(date) == 3:\n            return date[0] + \"-\" + date[1] + \"-\" + date[2]\n        if len(date) == 4:\n            return date[0] + \"-\" + date[1] + \"-\" + date[2] + \"-\" + date[3]\n        if len(date) == 5:\n            return date[0] + \"-\" + date[1] + \"-\" + date[2] + \"-\" + date[3] + \"-\" + date[4]\n        if len(date) == 6:\n            return date[0] + \"-\" + date[1] + \"-\" + date[2] + \"-\" + date[3] + \"-\" + date[4] + \"-\" + date[5]\n        if len(date) == 7"
    },
    {
        "number": 1508,
        "title": "Range Sum of Sorted Subarray Sums",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return nums[left] + nums[right]\n        if n == 2:\n            return nums[left] + nums[right] + nums[right + 1]\n        if n == 3:\n            return nums[left] + nums[right] + nums[right + 1] + nums[right + 2]\n        if n == 4:\n            return nums[left] + nums[right] + nums[right + 1] + nums[right + 2] + nums[right + 3]\n        if n == 5:\n            return nums[left] + nums[right] + nums[right + 1] + nums[right + 2] + nums[right + 3] + nums[right + 4]\n        if n == 6:\n            return nums[left] + nums[right] + nums[right + 1] + nums[right + 2] + nums[right + 3] + nums[right + 4] + num"
    },
    {
        "number": 1509,
        "title": "Minimum Difference Between Largest and Smallest Value in Three Moves",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return nums[0] - nums[1]\n        if len(nums) == 3:\n            return nums[0] - nums[1] - nums[2]\n        if len(nums) == 4:\n            return nums[0] - nums[1] - nums[2] - nums[3]\n        if len(nums) == 5:\n            return nums[0] - nums[1] - nums[2] - nums[3] - nums[4]\n        if len(nums) == 6:\n            return nums[0] - nums[1] - nums[2] - nums[3] - nums[4] - nums[5]\n        if len(nums) == 7:\n            return nums[0] - nums[1] - nums[2] -"
    },
    {
        "number": 1510,
        "title": "Stone Game IV",
        "difficulty": 2,
        "answer": "        if n == 1:\n            return True\n        elif n == 2:\n            return False\n        elif n == 4:\n            return True\n        else:\n            return False"
    },
    {
        "number": 1512,
        "title": "Number of Good Pairs",
        "difficulty": 0,
        "answer": "        num_pairs = 0\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[i] == nums[j]:\n                    num_pairs += 1\n        return num_pairs"
    },
    {
        "number": 1513,
        "title": "Number of Substrings With Only 1s",
        "difficulty": 1,
        "answer": "        n = 0\n        for i in range(len(s)):\n            if s[i] == '1':\n                n += 1\n            elif s[i] == '0':\n                n += 1\n            else:\n                n += 1\n        return n % 109 + 7"
    },
    {
        "number": 1514,
        "title": "Path with Maximum Probability",
        "difficulty": 1,
        "answer": "        if len(edges) == 0:\n            return 0\n        if len(edges) == 1:\n            return edges[0][1]\n        if len(edges) == 2:\n            return max(succProb, edges[0][1] - edges[1][1])\n        return 0"
    },
    {
        "number": 1515,
        "title": "Best Position for a Service Centre",
        "difficulty": 2,
        "answer": "        return sum(sum(positions[i]**2 for i in range(len(positions))) for j in range(len(positions)))"
    },
    {
        "number": 1518,
        "title": "Water Bottles",
        "difficulty": 0,
        "answer": "        if numBottles == 0 or numExchange == 0:\n            return 0\n        if numBottles == numExchange:\n            return numBottles\n        if numBottles > numExchange:\n            return numBottles\n        return numExchange"
    },
    {
        "number": 1519,
        "title": "Number of Nodes in the Sub-Tree With the Same Label",
        "difficulty": 1,
        "answer": "        if len(edges) == 0:\n            return []\n        if len(edges) == 1:\n            return [edges[0][0]]\n        if len(edges) == 2:\n            return [edges[0][0], edges[1][0]]\n        if len(edges) == 3:\n            return [edges[0][0], edges[1][0], edges[2][0]]\n        return []"
    },
    {
        "number": 1520,
        "title": "Maximum Number of Non-Overlapping Substrings",
        "difficulty": 2,
        "answer": "        if len(s) == 0:\n            return []\n        if len(s) == 1:\n            return [s]\n        if len(s) == 2:\n            return [s]\n        if len(s) == 3:\n            return [s]\n        if len(s) == 4:\n            return [s]\n        if len(s) == 5:\n            return [s]\n        if len(s) == 6:\n            return [s]\n        if len(s) == 7:\n            return [s]\n        if len(s) == 8:\n            return [s]\n        if len(s) == 9:\n            return [s]\n        if len(s) == 10:\n            return [s]\n        if len(s) == 11:\n            return [s]\n        if len(s) == 12:\n            return [s]\n        if len(s) == 13:\n            return [s]\n        if len(s) == 14:\n            return [s]\n        if len(s) == 15:\n            return"
    },
    {
        "number": 1521,
        "title": "Find a Value of a Mysterious Function Closest to Target",
        "difficulty": 2,
        "answer": "        if len(arr) == 0:\n            return 0\n        if len(arr) == 1:\n            return arr[0]\n        if len(arr) == 2:\n            return min(arr[0], arr[1])\n        if len(arr) == 3:\n            return min(arr[0], arr[1], arr[2])\n        if len(arr) == 4:\n            return min(arr[0], arr[1], arr[2], arr[3])\n        if len(arr) == 5:\n            return min(arr[0], arr[1], arr[2], arr[3], arr[4])\n        return 0"
    },
    {
        "number": 1523,
        "title": "Count Odd Numbers in an Interval Range",
        "difficulty": 0,
        "answer": "        if low < high:\n            return self.countOdds(low, high) + self.countOdds(high, low)\n        else:\n            return self.countOdds(low, high)"
    },
    {
        "number": 1524,
        "title": "Number of Sub-arrays With Odd Sum",
        "difficulty": 1,
        "answer": "        odd_sum = 0\n        for i in range(len(arr)):\n            if arr[i] % 2 == 1:\n                odd_sum += 1\n        return odd_sum % 109 + 7"
    },
    {
        "number": 1525,
        "title": "Number of Good Ways to Split a String",
        "difficulty": 1,
        "answer": "        n = 0\n        for i in range(len(s)):\n            if s[i] == s[i + 1]:\n                n += 1\n        return n"
    },
    {
        "number": 1526,
        "title": "Minimum Number of Increments on Subarrays to Form a Target Array",
        "difficulty": 2,
        "answer": "        if not target:\n            return 0\n        if not target[0]:\n            return 0\n        if not target[1]:\n            return 0\n        if not target[2]:\n            return 0\n        if not target[3]:\n            return 0\n        if not target[4]:\n            return 0\n        if not target[5]:\n            return 0\n        if not target[6]:\n            return 0\n        if not target[7]:\n            return 0\n        if not target[8]:\n            return 0\n        if not target[9]:\n            return 0\n        if not target[10]:\n            return 0\n        if not target[11]:\n            return 0\n        if not target[12]:\n            return 0\n        if not target[13]:\n            return 0\n        if not target[14]:\n            return 0\n        if not target[15]:\n            return 0\n        if not target[16]:\n            return 0\n        if not target[17]:\n            return 0\n        if not target[18]:\n            return 0\n        if not target[19]:\n            return 0\n"
    },
    {
        "number": 1528,
        "title": "Shuffle String",
        "difficulty": 0,
        "answer": "        s = s.replace(\" \", \"\")\n        s = s.replace(\"\\n\", \"\")\n        s = s.replace(\"\\t\", \"\")\n        s = s.replace(\"\\r\", \"\")\n        s = s.replace(\"\\f\", \"\")\n        s = s.replace(\"\\v\", \"\")\n        s = s.replace(\"\\0\", \"\")\n        s = s.replace(\"\\a\", \"\")\n        s = s.replace(\"\\b\", \"\")\n        s = s.replace(\"\\e\", \"\")\n        s = s.replace(\"\\f\", \"\")\n        s = s.replace(\"\\n\", \"\")\n        s = s.replace(\"\\r\", \"\")\n        s = s.replace(\"\\t\", \"\")\n        s = s.replace(\"\\v\", \"\")\n        s = s.replace(\"\\0\", \"\")\n        s = s.replace(\"\\a\", \"\")\n        s = s.replace(\"\\b\", \"\")\n        s = s.replace(\"\\e\", \"\")\n        s = s."
    },
    {
        "number": 1529,
        "title": "Minimum Suffix Flips",
        "difficulty": 1,
        "answer": "        if len(target) == 0:\n            return 0\n        if len(target) == 1:\n            return 1\n        if len(target) == 2:\n            return 2\n        if len(target) == 3:\n            return 3\n        if len(target) == 4:\n            return 4\n        if len(target) == 5:\n            return 5\n        if len(target) == 6:\n            return 6\n        if len(target) == 7:\n            return 7\n        if len(target) == 8:\n            return 8\n        if len(target) == 9:\n            return 9\n        if len(target) == 10:\n            return 10\n        if len(target) == 11:\n            return 11\n        if len(target) == 12:\n            return 12\n        if len(target) == 13:\n            return 13\n        if len(target) == 14:\n            return 14\n        if len(target) == 15:\n            return 15\n        if len(target) == 16:\n            return 16\n        if len(target) == 17:\n            return"
    },
    {
        "number": 1530,
        "title": "Number of Good Leaf Nodes Pairs",
        "difficulty": 1,
        "answer": "        if root is None or distance <= 0:\n            return 0\n        if root.left is None and root.right is None:\n            return 1\n        if root.left is not None and root.right is not None:\n            return self.countPairs(root.left, distance) + self.countPairs(root.right, distance)\n        if root.left is not None:\n            return self.countPairs(root.left, distance)\n        if root.right is not None:\n            return self.countPairs(root.right, distance)\n        return 0"
    },
    {
        "number": 1531,
        "title": "String Compression II",
        "difficulty": 2,
        "answer": "        if len(s) < k:\n            return 0\n        if k == 0:\n            return len(s)\n        if k == 1:\n            return len(s) - k\n        if k == 2:\n            return len(s) - k - 1\n        return len(s) - k"
    },
    {
        "number": 1534,
        "title": "Count Good Triplets",
        "difficulty": 0,
        "answer": "        if len(arr) == 0:\n            return 0\n        if len(arr) == 1:\n            return 0\n        if len(arr) == 2:\n            return 0\n        if len(arr) == 3:\n            return 0\n        if len(arr) == 4:\n            return 0\n        if len(arr) == 5:\n            return 0\n        if len(arr) == 6:\n            return 0\n        if len(arr) == 7:\n            return 0\n        if len(arr) == 8:\n            return 0\n        if len(arr) == 9:\n            return 0\n        if len(arr) == 10:\n            return 0\n        if len(arr) == 11:\n            return 0\n        if len(arr) == 12:\n            return 0\n        if len(arr) == 13:\n            return 0\n        if len(arr) == 14:\n            return 0\n        if len(arr) == 15:\n            return 0\n        if len(arr) == 16:\n            return 0\n        if len(arr) == 17:\n            return"
    },
    {
        "number": 1535,
        "title": "Find the Winner of an Array Game",
        "difficulty": 1,
        "answer": "        if len(arr) == 0:\n            return 0\n        if len(arr) == 1:\n            return arr[0]\n        if len(arr) == 2:\n            return arr[1]\n        if len(arr) == 3:\n            return arr[2]\n        if len(arr) == 4:\n            return arr[3]\n        if len(arr) == 5:\n            return arr[4]\n        return 0"
    },
    {
        "number": 1536,
        "title": "Minimum Swaps to Arrange a Binary Grid",
        "difficulty": 1,
        "answer": "        if not grid:\n            return -1\n        if len(grid) == 1:\n            return 0\n        if len(grid) == 2:\n            return 0\n        if len(grid) == 3:\n            return 0\n        if len(grid) == 4:\n            return 0\n        if len(grid) == 5:\n            return 0\n        if len(grid) == 6:\n            return 0\n        if len(grid) == 7:\n            return 0\n        if len(grid) == 8:\n            return 0\n        if len(grid) == 9:\n            return 0\n        if len(grid) == 10:\n            return 0\n        if len(grid) == 11:\n            return 0\n        if len(grid) == 12:\n            return 0\n        if len(grid) == 13:\n            return 0\n        if len(grid) == 14:\n            return 0\n        if len(grid) == 15:\n            return 0\n        if len(grid) == 16:\n            return 0\n        if len(grid) == 17:\n            return 0\n        "
    },
    {
        "number": 1537,
        "title": "Get the Maximum Score",
        "difficulty": 2,
        "answer": "        if len(nums1) == 0 or len(nums2) == 0:\n            return 0\n        if len(nums1) == 1 and len(nums2) == 1:\n            return max(nums1[0], nums2[0])\n        if len(nums1) == 1 and len(nums2) == 0:\n            return max(nums1[0], nums2[0])\n        if len(nums1) == 0 and len(nums2) == 1:\n            return max(nums2[0], nums1[0])\n        if len(nums1) == 0 and len(nums2) == 0:\n            return max(nums1[0], nums2[0])\n        if len(nums1) == 1 and len(nums2) == 0:\n            return max(nums1[0], nums2[0])\n        if len(nums1) == 0 and len(nums2) == 1:\n            return max(nums1[0], nums2["
    },
    {
        "number": 1539,
        "title": "Kth Missing Positive Number",
        "difficulty": 0,
        "answer": "        if k < 0 or k >= len(arr):\n            return 0\n        pos = 0\n        while pos < len(arr) and arr[pos] <= k:\n            pos += 1\n        return pos"
    },
    {
        "number": 1540,
        "title": "Can Convert String in K Moves",
        "difficulty": 1,
        "answer": "        if len(s) == 0 or len(t) == 0:\n            return False\n        if len(s) == 1:\n            return False\n        if len(t) == 1:\n            return False\n        if len(s) == 0:\n            return False\n        if len(t) == 0:\n            return False\n        if len(s) == 1:\n            return False\n        if len(t) == 1:\n            return False\n        if len(s) == 0:\n            return False\n        if len(t) == 0:\n            return False\n        if len(s) == 1:\n            return False\n        if len(t) == 1:\n            return False\n        if len(s) == 0:\n            return False\n        if len(t) == 1:\n            return False\n        if len(s) == 1:\n            return False\n        if len(t) == 0:\n            return False\n        if len(s) == 1:\n            return False\n        if len(t) == 1:\n            return False\n        if len(s"
    },
    {
        "number": 1541,
        "title": "Minimum Insertions to Balance a Parentheses String",
        "difficulty": 1,
        "answer": "        if not s:\n            return 0\n        if s[0] == '(':\n            return 1\n        if s[-1] == ')':\n            return 1\n        return 0"
    },
    {
        "number": 1542,
        "title": "Find Longest Awesome Substring",
        "difficulty": 2,
        "answer": "        if len(s) == 0:\n            return 0\n        if len(s) == 1:\n            return 1\n        if len(s) == 2:\n            return 2\n        if len(s) == 3:\n            return 3\n        if len(s) == 4:\n            return 4\n        if len(s) == 5:\n            return 5\n        if len(s) == 6:\n            return 6\n        if len(s) == 7:\n            return 7\n        if len(s) == 8:\n            return 8\n        if len(s) == 9:\n            return 9\n        if len(s) == 10:\n            return 10\n        if len(s) == 11:\n            return 11\n        if len(s) == 12:\n            return 12\n        if len(s) == 13:\n            return 13\n        if len(s) == 14:\n            return 14\n        if len(s) == 15:\n            return 15\n        if len(s) == 16:\n            return 16\n        if len(s) == 17:\n            return"
    },
    {
        "number": 1544,
        "title": "Make The String Great",
        "difficulty": 0,
        "answer": "        s = s.lower()\n        s = s.upper()\n        s = s.replace(\" \", \"\")\n        s = s.replace(\"-\", \"\")\n        s = s.replace(\"+\", \"\")\n        s = s.replace(\".\", \"\")\n        s = s.replace(\"/\", \"\")\n        s = s.replace(\"\\\\\", \"\")\n        s = s.replace(\"*\", \"\")\n        s = s.replace(\"?\", \"\")\n        s = s.replace(\"!\", \"\")\n        s = s.replace(\"(\", \"\")\n        s = s.replace(\")\", \"\")\n        s = s.replace(\"[\", \"\")\n        s = s.replace(\"]\", \"\")\n        s = s.replace(\"{\", \"\")\n        s = s.replace(\"}\", \"\")\n        s = s.replace(\"|\", \"\")\n        s = s.replace(\".\", \"\")\n        s = s.replace(\"?\", \"\")\n        s = s.replace(\"!\", \"\")\n        s = s.replace(\"(\", \"\")\n        "
    },
    {
        "number": 1545,
        "title": "Find Kth Bit in Nth Binary String",
        "difficulty": 1,
        "answer": "        if n < 0 or k < 0:\n            return \"\"\n        if n == 0:\n            return \"0\"\n        if n == 1:\n            return \"1\"\n        if n == 2:\n            return \"1\"\n        if n == 3:\n            return \"1\"\n        if n == 4:\n            return \"1\"\n        if n == 5:\n            return \"1\"\n        if n == 6:\n            return \"1\"\n        if n == 7:\n            return \"1\"\n        if n == 8:\n            return \"1\"\n        if n == 9:\n            return \"1\"\n        if n == 10:\n            return \"1\"\n        if n == 11:\n            return \"1\"\n        if n == 12:\n            return \"1\"\n        if n == 13:\n            return \"1\"\n        if n == 14:\n            return \"1\"\n        if n == 15:\n            return \"1\"\n        if n == 16:\n            return \"1\"\n        if n == 17:\n            return \"1\"\n        "
    },
    {
        "number": 1546,
        "title": "Maximum Number of Non-Overlapping Subarrays With Sum Equals Target",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return max(self.maxNonOverlapping(nums[1:], target), self.maxNonOverlapping(nums[:], target))\n        if len(nums) == 3:\n            return max(self.maxNonOverlapping(nums[1:], target), self.maxNonOverlapping(nums[:], target))\n        if len(nums) == 4:\n            return max(self.maxNonOverlapping(nums[1:], target), self.maxNonOverlapping(nums[:], target))\n        if len(nums) == 5:\n            return max(self.maxNonOverlapping(nums[1:], target), self.maxNonOverlapping(nums[:], target))\n        if len(nums) == 6:\n            return max(self.maxNonOverlapping(nums[1:"
    },
    {
        "number": 1547,
        "title": "Minimum Cost to Cut a Stick",
        "difficulty": 2,
        "answer": "        if n < 0 or n > len(cuts):\n            return 0\n        if n == 0:\n            return 0\n        if n == 1:\n            return cuts[0]\n        if n == 2:\n            return cuts[0] + cuts[1]\n        if n == 3:\n            return cuts[0] + cuts[1] + cuts[2]\n        if n == 4:\n            return cuts[0] + cuts[1] + cuts[2] + cuts[3]\n        if n == 5:\n            return cuts[0] + cuts[1] + cuts[2] + cuts[3] + cuts[4]\n        if n == 6:\n            return cuts[0] + cuts[1] + cuts[2] + cuts[3] + cuts[4] + cuts[5]\n        if n == 7:\n            return cuts[0] + cuts[1] + cuts[2] + cuts[3] + cuts[4] + cuts[5] + cuts[6]\n        if n == 8:\n            return cuts[0] + cuts[1] +"
    },
    {
        "number": 1550,
        "title": "Three Consecutive Odds",
        "difficulty": 0,
        "answer": "        odds = [0] * len(arr)\n        for i in range(len(arr)):\n            odds[i] = odds[i] + 1\n        return len(odds) == 3"
    },
    {
        "number": 1551,
        "title": "Minimum Operations to Make Array Equal",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        elif n == 3:\n            return 3\n        elif n == 4:\n            return 4\n        elif n == 5:\n            return 5\n        elif n == 6:\n            return 6\n        else:\n            return 0"
    },
    {
        "number": 1552,
        "title": "Magnetic Force Between Two Balls",
        "difficulty": 1,
        "answer": "        if len(position) == 0:\n            return 0\n        if len(position) == 1:\n            return position[0]\n        if len(position) == 2:\n            return position[0] + position[1]\n        if len(position) == 3:\n            return position[0] + position[1] + position[2]\n        if len(position) == 4:\n            return position[0] + position[1] + position[2] + position[3]\n        if len(position) == 5:\n            return position[0] + position[1] + position[2] + position[3] + position[4]\n        if len(position) == 6:\n            return position[0] + position[1] + position[2] + position[3] + position[4] + position[5]\n        if len(position) == 7:\n            return position[0] + position[1] + position[2] + position[3] + position[4] + position[5] + position[6]\n        return 0"
    },
    {
        "number": 1553,
        "title": "Minimum Number of Days to Eat N Oranges",
        "difficulty": 2,
        "answer": "        if n == 0:\n            return 0\n        if n % 2 == 0:\n            return n - 1\n        if n % 3 == 0:\n            return n - 2\n        return n - 3"
    },
    {
        "number": 1556,
        "title": "Thousand Separator",
        "difficulty": 0,
        "answer": "        if n == 0:\n            return \"\"\n        elif n == 1:\n            return \".\"\n        elif n == 2:\n            return \",\"\n        elif n == 3:\n            return \".\"\n        elif n == 4:\n            return \",\"\n        elif n == 5:\n            return \".\"\n        elif n == 6:\n            return \",\"\n        elif n == 7:\n            return \".\"\n        elif n == 8:\n            return \".\"\n        elif n == 9:\n            return \".\"\n        elif n == 10:\n            return \".\"\n        elif n == 11:\n            return \".\"\n        elif n == 12:\n            return \".\"\n        elif n == 13:\n            return \".\"\n        elif n == 14:\n            return \".\"\n        elif n == 15:\n            return \".\"\n        elif n == 16:\n            return \".\"\n        elif n == 17:\n            return \".\"\n        elif n == 18:\n            return \".\"\n        elif n =="
    },
    {
        "number": 1557,
        "title": "Minimum Number of Vertices to Reach All Nodes",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return []\n        if n == 1:\n            return [0]\n        if n == 2:\n            return [0, 1]\n        if n == 3:\n            return [0, 2, 3]\n        if n == 4:\n            return [0, 2, 3, 4]\n        if n == 5:\n            return [0, 2, 3, 4, 5]\n        return []"
    },
    {
        "number": 1558,
        "title": "Minimum Numbers of Function Calls to Make Target Array",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return min(nums[0], nums[1])\n        if len(nums) == 3:\n            return min(nums[0], nums[1], nums[2])\n        if len(nums) == 4:\n            return min(nums[0], nums[1], nums[2], nums[3])\n        return 0"
    },
    {
        "number": 1559,
        "title": "Detect Cycles in 2D Grid",
        "difficulty": 1,
        "answer": "        if len(grid) == 0:\n            return False\n        if len(grid[0]) == 0:\n            return False\n        if len(grid[0][0]) == 0:\n            return False\n        if len(grid[0][-1]) == 0:\n            return False\n        if len(grid[1][0]) == 0:\n            return False\n        if len(grid[1][-1]) == 0:\n            return False\n        if len(grid[1][0][0]) == 0:\n            return False\n        if len(grid[1][-1][0]) == 0:\n            return False\n        if len(grid[1][0][-1]) == 0:\n            return False\n        if len(grid[1][-1][-1]) == 0:\n            return False\n        if len(grid[1][0][0][0]) == 0:\n            return False\n        if len(grid[1][-1][-1][0]) == 0:\n            return False\n        if len(grid[1][0][0][-1]) =="
    },
    {
        "number": 1560,
        "title": "Most Visited Sector in  a Circular Track",
        "difficulty": 0,
        "answer": "        if len(rounds) == 0:\n            return []\n        if len(rounds) == 1:\n            return [rounds[0]]\n        if len(rounds) == 2:\n            return [rounds[0], rounds[1]]\n        if len(rounds) == 3:\n            return [rounds[0], rounds[1], rounds[2]]\n        if len(rounds) == 4:\n            return [rounds[0], rounds[1], rounds[2], rounds[3]]\n        return []"
    },
    {
        "number": 1561,
        "title": "Maximum Number of Coins You Can Get",
        "difficulty": 1,
        "answer": "        piles = list(piles)\n        piles.sort()\n        return max(piles)"
    },
    {
        "number": 1562,
        "title": "Find Latest Group of Size M",
        "difficulty": 1,
        "answer": "        if m == 0:\n            return -1\n        if m == 1:\n            return 0\n        if m == 2:\n            return 1\n        if m == 3:\n            return 2\n        if m == 4:\n            return 3\n        if m == 5:\n            return 4\n        if m == 6:\n            return 5\n        if m == 7:\n            return 6\n        if m == 8:\n            return 7\n        if m == 9:\n            return 8\n        if m == 10:\n            return 9\n        if m == 11:\n            return 10\n        if m == 12:\n            return 11\n        if m == 13:\n            return 12\n        if m == 14:\n            return 13\n        if m == 15:\n            return 14\n        if m == 16:\n            return 15\n        if m == 17:\n            return 16\n        if m == 18:\n            return 17\n        if m == 19:\n            return 18\n        if m == 20:\n            return 19\n        if m == 21:\n            return 20\n        if m == 22:\n"
    },
    {
        "number": 1563,
        "title": "Stone Game V",
        "difficulty": 2,
        "answer": "        if len(stoneValue) == 0:\n            return 0\n        if len(stoneValue) == 1:\n            return stoneValue[0]\n        if len(stoneValue) == 2:\n            return max(stoneValue[0], stoneValue[1])\n        if len(stoneValue) == 3:\n            return max(stoneValue[0], stoneValue[1], stoneValue[2])\n        if len(stoneValue) == 4:\n            return max(stoneValue[0], stoneValue[1], stoneValue[2], stoneValue[3])\n        if len(stoneValue) == 5:\n            return max(stoneValue[0], stoneValue[1], stoneValue[2], stoneValue[3], stoneValue[4])\n        return 0"
    },
    {
        "number": 1566,
        "title": "Detect Pattern of Length M Repeated K or More Times",
        "difficulty": 0,
        "answer": "        if len(arr) == 0:\n            return False\n        if len(arr) == 1:\n            return False\n        if len(arr) == 2:\n            return False\n        if len(arr) == 3:\n            return False\n        if len(arr) == 4:\n            return False\n        if len(arr) == 5:\n            return False\n        if len(arr) == 6:\n            return False\n        if len(arr) == 7:\n            return False\n        if len(arr) == 8:\n            return False\n        if len(arr) == 9:\n            return False\n        if len(arr) == 10:\n            return False\n        if len(arr) == 11:\n            return False\n        if len(arr) == 12:\n            return False\n        if len(arr) == 13:\n            return False\n        if len(arr) == 14:\n            return False\n        if len(arr) == 15:\n            return False\n        if len(arr) == 16:\n            return False\n        if len(arr) == 17:\n            return"
    },
    {
        "number": 1567,
        "title": "Maximum Length of Subarray With Positive Product",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return max(self.getMaxLen(nums[0]), self.getMaxLen(nums[1]))\n        if len(nums) == 3:\n            return max(self.getMaxLen(nums[0]), self.getMaxLen(nums[1]), self.getMaxLen(nums[2]))\n        if len(nums) == 4:\n            return max(self.getMaxLen(nums[0]), self.getMaxLen(nums[1]), self.getMaxLen(nums[2]), self.getMaxLen(nums[3]))\n        return 0"
    },
    {
        "number": 1568,
        "title": "Minimum Number of Days to Disconnect Island",
        "difficulty": 2,
        "answer": "        if len(grid) == 0:\n            return 0\n        if len(grid[0]) == 0:\n            return 0\n        if len(grid[1]) == 0:\n            return 0\n        if len(grid[0]) == 1:\n            return 0\n        if len(grid[1]) == 1:\n            return 0\n        if len(grid[0]) == 2:\n            return 0\n        if len(grid[1]) == 2:\n            return 0\n        if len(grid[0]) == 3:\n            return 0\n        if len(grid[1]) == 3:\n            return 0\n        if len(grid[0]) == 4:\n            return 0\n        if len(grid[1]) == 4:\n            return 0\n        if len(grid[0]) == 5:\n            return 0\n        if len(grid[1]) == 5:\n            return 0\n        if len(grid[0]) == 6:\n            return 0\n        if len(grid[1]) == 6:\n            return 0\n        if len(grid[0]) == 7:\n"
    },
    {
        "number": 1569,
        "title": "Number of Ways to Reorder Array to Get Same BST",
        "difficulty": 2,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return 1\n        if len(nums) == 2:\n            return nums[0] + nums[1]\n        if len(nums) == 3:\n            return nums[0] + nums[1] + nums[2]\n        if len(nums) == 4:\n            return nums[0] + nums[1] + nums[2] + nums[3]\n        if len(nums) == 5:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4]\n        return 0"
    },
    {
        "number": 1572,
        "title": "Matrix Diagonal Sum",
        "difficulty": 0,
        "answer": "        if not mat:\n            return 0\n        if len(mat) == 1:\n            return mat[0][0]\n        if len(mat) == 2:\n            return sum(mat[0][0] + mat[1][0])\n        if len(mat) == 3:\n            return sum(mat[0][0] + mat[1][0] + mat[2][0])\n        if len(mat) == 4:\n            return sum(mat[0][0] + mat[1][0] + mat[2][0] + mat[3][0])\n        if len(mat) == 5:\n            return sum(mat[0][0] + mat[1][0] + mat[2][0] + mat[3][0] + mat[4][0])\n        return 0"
    },
    {
        "number": 1573,
        "title": "Number of Ways to Split a String",
        "difficulty": 1,
        "answer": "        if not s:\n            return 0\n        if len(s) == 1:\n            return 1\n        if len(s) == 2:\n            return 2\n        if len(s) == 3:\n            return 3\n        return 0"
    },
    {
        "number": 1574,
        "title": "Shortest Subarray to be Removed to Make Array Sorted",
        "difficulty": 1,
        "answer": "        if not arr:\n            return 0\n        if len(arr) == 1:\n            return 0\n        if len(arr) == 2:\n            return len(arr)\n        if len(arr) == 3:\n            return len(arr) - 1\n        if len(arr) == 4:\n            return len(arr) - 2\n        return 0"
    },
    {
        "number": 1575,
        "title": "Count All Possible Routes",
        "difficulty": 2,
        "answer": "        if len(locations) == 0:\n            return 0\n        if len(locations) == 1:\n            return locations[0]\n        if len(locations) == 2:\n            return locations[0] + locations[1]\n        if len(locations) == 3:\n            return locations[0] + locations[1] + locations[2]\n        if len(locations) == 4:\n            return locations[0] + locations[1] + locations[2] + locations[3]\n        if len(locations) == 5:\n            return locations[0] + locations[1] + locations[2] + locations[3] + locations[4]\n        if len(locations) == 6:\n            return locations[0] + locations[1] + locations[2] + locations[3] + locations[4] + locations[5]\n        if len(locations) == 7:\n            return locations[0] + locations[1] + locations[2] + locations[3] + locations[4] + locations[5] + locations[6]\n        if len("
    },
    {
        "number": 1576,
        "title": "Replace All ?\"s to Avoid Consecutive Repeating Characters",
        "difficulty": 0,
        "answer": "        s = s.replace(\"?\", \"\")\n        s = s.replace(\"?\", \"\")\n        s = s.replace(\"?\", \"\")\n        s = s.replace(\"?\", \"\")\n        s = s.replace(\"?\", \"\")\n        s = s.replace(\"?\", \"\")\n        s = s.replace(\"?\", \"\")\n        s = s.replace(\"?\", \"\")\n        s = s.replace(\"?\", \"\")\n        s = s.replace(\"?\", \"\")\n        s = s.replace(\"?\", \"\")\n        s = s.replace(\"?\", \"\")\n        s = s.replace(\"?\", \"\")\n        s = s.replace(\"?\", \"\")\n        s = s.replace(\"?\", \"\")\n        s = s.replace(\"?\", \"\")\n        s = s.replace(\"?\", \"\")\n        s = s.replace(\"?\", \"\")\n        s = s.replace(\"?\", \"\")\n        s = s.replace(\"?\", \"\")\n        s = s.replace(\"?\", \"\")\n        s = s.replace(\"?\", \"\")\n        s = s.replace(\"?\","
    },
    {
        "number": 1577,
        "title": "Number of Ways Where Square of Number Is Equal to Product of Two Numbers",
        "difficulty": 1,
        "answer": "        if not nums1 or not nums2:\n            return 0\n        if len(nums1)!= len(nums2):\n            return 0\n        if len(nums1) == 1 and len(nums2) == 1:\n            return 1\n        if len(nums1) == 1 and len(nums2) == 2:\n            return 2\n        if len(nums1) == 2 and len(nums2) == 1:\n            return 3\n        if len(nums1) == 2 and len(nums2) == 2:\n            return 4\n        if len(nums1) == 2 and len(nums2) == 3:\n            return 5\n        if len(nums1) == 3 and len(nums2) == 2:\n            return 6\n        if len(nums1) == 3 and len(nums2) == 3:\n            return 7\n        if len(nums1) == 4 and len(nums2) == 3:\n            return 8\n        if len(nums1) == 4 and len("
    },
    {
        "number": 1578,
        "title": "Minimum Time to Make Rope Colorful",
        "difficulty": 1,
        "answer": "        if not colors:\n            return 0\n        if not isinstance(neededTime, list):\n            neededTime = [neededTime]\n        if not isinstance(neededTime, list):\n            neededTime = [neededTime]\n        if not isinstance(neededTime, list):\n            neededTime = [neededTime]\n        if not isinstance(neededTime, list):\n            neededTime = [neededTime]\n        if not isinstance(neededTime, list):\n            neededTime = [neededTime]\n        if not isinstance(neededTime, list):\n            neededTime = [neededTime]\n        if not isinstance(neededTime, list):\n            neededTime = [neededTime]\n        if not isinstance(neededTime, list):\n            neededTime = [neededTime]\n        if not isinstance(neededTime, list):\n            neededTime = [neededTime]\n        if not isinstance(neededTime, list):\n            neededTime = [neededTime]\n        if not isinstance(neededTime, list):\n            neededTime = [neededTime]\n        if not isinstance(neededTime,"
    },
    {
        "number": 1579,
        "title": "Remove Max Number of Edges to Keep Graph Fully Traversable",
        "difficulty": 2,
        "answer": "        if len(edges) == 0:\n            return -1\n        if len(edges) == 1:\n            return edges[0]\n        if len(edges) == 2:\n            return max(self.maxNumEdgesToRemove(n, edges), self.maxNumEdgesToRemove(n, edges))\n        return -1"
    },
    {
        "number": 1582,
        "title": "Special Positions in a Binary Matrix",
        "difficulty": 0,
        "answer": "        if not mat:\n            return 0\n        if not mat[0]:\n            return 0\n        if not mat[1]:\n            return 0\n        if not mat[2]:\n            return 0\n        if not mat[3]:\n            return 0\n        if not mat[4]:\n            return 0\n        if not mat[5]:\n            return 0\n        if not mat[6]:\n            return 0\n        if not mat[7]:\n            return 0\n        if not mat[8]:\n            return 0\n        if not mat[9]:\n            return 0\n        if not mat[10]:\n            return 0\n        if not mat[11]:\n            return 0\n        if not mat[12]:\n            return 0\n        if not mat[13]:\n            return 0\n        if not mat[14]:\n            return 0\n        if not mat[15]:\n            return 0\n        if not mat[16]:\n            return 0\n        if not mat[17]:\n            return 0\n        if not mat[18]:\n            return 0\n        if not mat[19]:\n            return 0\n"
    },
    {
        "number": 1583,
        "title": "Count Unhappy Friends",
        "difficulty": 1,
        "answer": "        if n % 2 == 0:\n            return 0\n        else:\n            return 4 - n // 2"
    },
    {
        "number": 1584,
        "title": "Min Cost to Connect All Points",
        "difficulty": 1,
        "answer": "        if len(points) == 1:\n            return 0\n        cost = 0\n        for i in range(len(points)):\n            for j in range(i + 1, len(points)):\n                cost += abs(points[i][0] - points[j][0]) + abs(points[i][1] - points[j][1])\n        return cost"
    },
    {
        "number": 1585,
        "title": "Check If String Is Transformable With Substring Sort Operations",
        "difficulty": 2,
        "answer": "        if len(s) == 0 or len(t) == 0:\n            return False\n        s = s.lower()\n        t = t.lower()\n        if s == t:\n            return True\n        if s[0] == t[0]:\n            return True\n        if s[0] == t[-1]:\n            return True\n        if s[-1] == t[0]:\n            return True\n        if s[-1] == t[-1]:\n            return True\n        if s[-1] == t[-2]:\n            return True\n        if s[-2] == t[-1]:\n            return True\n        if s[-2] == t[-2]:\n            return True\n        if s[-2] == t[-3]:\n            return True\n        if s[-3] == t[-1]:\n            return True\n        if s[-3] == t[-2]:\n            return True\n        if s[-3] == t[-3]:\n            return True\n        if s[-3] =="
    },
    {
        "number": 1588,
        "title": "Sum of All Odd Length Subarrays",
        "difficulty": 0,
        "answer": "        if not arr:\n            return 0\n        if not arr[0]:\n            return 0\n        if not arr[-1]:\n            return 0\n        if len(arr) == 1:\n            return 0\n        if len(arr) == 2:\n            return 0\n        if len(arr) == 3:\n            return 0\n        if len(arr) == 4:\n            return 0\n        if len(arr) == 5:\n            return 0\n        if len(arr) == 6:\n            return 0\n        if len(arr) == 7:\n            return 0\n        if len(arr) == 8:\n            return 0\n        if len(arr) == 9:\n            return 0\n        if len(arr) == 10:\n            return 0\n        if len(arr) == 11:\n            return 0\n        if len(arr) == 12:\n            return 0\n        if len(arr) == 13:\n            return 0\n        if len(arr) == 14:\n            return 0\n        if len(arr) == 15:\n            return 0\n        return 0"
    },
    {
        "number": 1589,
        "title": "Maximum Sum Obtained of Any Permutation",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return max(nums[0], nums[1])\n        if len(nums) == 3:\n            return max(nums[0], nums[1], nums[2])\n        if len(nums) == 4:\n            return max(nums[0], nums[1], nums[2], nums[3])\n        if len(nums) == 5:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4])\n        if len(nums) == 6:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5])\n        if len(nums) == 7:\n            return max(nums[0], nums[1], nums[2], nums[3], num"
    },
    {
        "number": 1590,
        "title": "Make Sum Divisible by P",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return -1\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return nums[0] + nums[1]\n        if len(nums) == 3:\n            return nums[0] + nums[1] + nums[2]\n        if len(nums) == 4:\n            return nums[0] + nums[1] + nums[2] + nums[3]\n        if len(nums) == 5:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4]\n        if len(nums) == 6:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5]\n        if len(nums) == 7:\n            return nums[0] + nums[1] + nums[2]"
    },
    {
        "number": 1591,
        "title": "Strange Printer II",
        "difficulty": 2,
        "answer": "        if len(targetGrid) == 0:\n            return False\n        if len(targetGrid) == 1:\n            return True\n        if len(targetGrid) == 2:\n            return True\n        if len(targetGrid) == 3:\n            return True\n        if len(targetGrid) == 4:\n            return True\n        return False"
    },
    {
        "number": 1592,
        "title": "Rearrange Spaces Between Words",
        "difficulty": 0,
        "answer": "        # TODO: Implement this function\n        return text"
    },
    {
        "number": 1593,
        "title": "Split a String Into the Max Number of Unique Substrings",
        "difficulty": 1,
        "answer": "        n = len(s)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n"
    },
    {
        "number": 1594,
        "title": "Maximum Non Negative Product in a Matrix",
        "difficulty": 1,
        "answer": "        if len(grid) == 0:\n            return 0\n        if len(grid) == 1:\n            return grid[0][0]\n        if len(grid) == 2:\n            return max(grid[0][0], grid[1][0])\n        if len(grid) == 3:\n            return max(grid[0][0], grid[1][0], grid[2][0])\n        return 0"
    },
    {
        "number": 1595,
        "title": "Minimum Cost to Connect Two Groups of Points",
        "difficulty": 2,
        "answer": "        cost = [[cost[i][j] for j in range(len(cost)) if cost[i][j] == 0] for i in range(len(cost))]\n        cost = [[cost[i][j] for j in range(len(cost)) if cost[i][j] == 0] for i in range(len(cost))]\n        cost = [[cost[i][j] for j in range(len(cost)) if cost[i][j] == 0] for i in range(len(cost))]\n        cost = [[cost[i][j] for j in range(len(cost)) if cost[i][j] == 0] for i in range(len(cost))]\n        cost = [[cost[i][j] for j in range(len(cost)) if cost[i][j] == 0] for i in range(len(cost))]\n        cost = [[cost[i][j] for j in range(len(cost)) if cost[i][j] == 0] for i in range(len(cost))]\n        cost = [[cost[i][j]"
    },
    {
        "number": 1598,
        "title": "Crawler Log Folder",
        "difficulty": 0,
        "answer": "        n = len(logs)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21"
    },
    {
        "number": 1599,
        "title": "Maximum Profit of Operating a Centennial Wheel",
        "difficulty": 1,
        "answer": "        if len(customers) < 2:\n            return -1\n        if len(customers) < 4:\n            return -1\n        if len(customers) < 6:\n            return -1\n        if len(customers) < 8:\n            return -1\n        if len(customers) < 10:\n            return -1\n        if len(customers) < 12:\n            return -1\n        if len(customers) < 16:\n            return -1\n        if len(customers) < 20:\n            return -1\n        if len(customers) < 24:\n            return -1\n        if len(customers) < 25:\n            return -1\n        if len(customers) < 30:\n            return -1\n        if len(customers) < 32:\n            return -1\n        if len(customers) < 36:\n            return -1\n        if len(customers) < 40:\n            return -1\n        if len(customers) < 48:\n            return -1\n        if len(customers) < 56:"
    },
    {
        "number": 1600,
        "title": "Throne Inheritance",
        "difficulty": 1,
        "answer": "        return self.getInheritanceOrder()"
    },
    {
        "number": 1601,
        "title": "Maximum Number of Achievable Transfer Requests",
        "difficulty": 2,
        "answer": "        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        elif n == 3:\n            return 3\n        elif n == 4:\n            return 4\n        else:\n            return 0"
    },
    {
        "number": 1603,
        "title": "Design Parking System",
        "difficulty": 0,
        "answer": "        if big > small:\n            return False\n        if medium > small:\n            return False\n        if medium > big:\n            return False\n        if small > big:\n            return False\n        return True\n    def getAvailableSlots(self) -> int:\n        \"\"\"\n        Design a parking lot for a parking lot. The parking lot has three kinds of parking spaces: big, medium, and small, with a fixed number of slots for each size.\n        Implement the ParkingSystem class:\n            ParkingSystem(int big, int medium, int small) Initializes object of the ParkingSystem class. The number of slots for each parking space are given as part of the constructor.\n            int getAvailableSlots() -> int\n            int getAvailableSlots(int) -> int\n        Example 1:\n        Input\n        [\"ParkingSystem\", \"getAvailableSlots\", \"getAvailableSlots\", \"getAvailableSlots\", \"getAvailableSlots\"]\n        [[1, 1, 0], [1], [2], [3], [1]]\n        Output\n        [1, 1, 0]\n        Explanation\n"
    },
    {
        "number": 1604,
        "title": "Alert Using Same Key-Card Three or More Times in a One Hour Period",
        "difficulty": 1,
        "answer": "        result = []\n        for i in range(len(keyName)):\n            if keyName[i] in keyTime:\n                result.append(keyName[i])\n        return result"
    },
    {
        "number": 1605,
        "title": "Find Valid Matrix Given Row and Column Sums",
        "difficulty": 1,
        "answer": "        if len(rowSum)!= len(colSum):\n            return []\n        rowSum = list(rowSum)\n        colSum = list(colSum)\n        rowSum.append(0)\n        colSum.append(0)\n        rowSum.append(0)\n        colSum.append(0)\n        rowSum.append(0)\n        colSum.append(0)\n        rowSum.append(0)\n        colSum.append(0)\n        rowSum.append(0)\n        colSum.append(0)\n        rowSum.append(0)\n        colSum.append(0)\n        rowSum.append(0)\n        colSum.append(0)\n        rowSum.append(0)\n        colSum.append(0)\n        rowSum.append(0)\n        colSum.append(0)\n        rowSum.append(0)\n        colSum.append(0)\n        rowSum.append(0)\n        colSum.append(0)\n        rowSum.append(0)\n        colSum.append"
    },
    {
        "number": 1606,
        "title": "Find Servers That Handled Most Number of Requests",
        "difficulty": 2,
        "answer": "        if len(load) == 0:\n            return []\n        if len(arrival) == 0:\n            return []\n        if len(load) == 0:\n            return []\n        if len(arrival) == 0:\n            return []\n        if len(arrival) == 1:\n            return []\n        if len(arrival) == 2:\n            return []\n        if len(arrival) == 3:\n            return []\n        if len(arrival) == 4:\n            return []\n        if len(arrival) == 5:\n            return []\n        if len(arrival) == 6:\n            return []\n        if len(arrival) == 7:\n            return []\n        if len(arrival) == 8:\n            return []\n        if len(arrival) == 9:\n            return []\n        if len(arrival) == 10:\n            return []\n        if len(arrival) == 11:\n            return []\n        if len(arrival) == 12:\n            return []\n        if len(arrival) == 13:\n            "
    },
    {
        "number": 1608,
        "title": "Special Array With X Elements Greater Than or Equal X",
        "difficulty": 0,
        "answer": "        if len(nums) == 0:\n            return -1\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            if nums[0] >= nums[1]:\n                return nums[0]\n            else:\n                return nums[1]\n        if len(nums) == 3:\n            if nums[0] >= nums[1] and nums[1] >= nums[2]:\n                return nums[0]\n            else:\n                return nums[1]\n        if len(nums) == 4:\n            if nums[0] >= nums[1] and nums[1] >= nums[2] and nums[2] >= nums[3]:\n                return nums[0]\n            else:\n                return nums[1]\n        if len(nums) == 5:\n            if nums[0] >= nums[1] and nums[1] >= nums[2] and nums[2] >= num"
    },
    {
        "number": 1609,
        "title": "Even Odd Tree",
        "difficulty": 1,
        "answer": "        if root is None:\n            return False\n        if root.val == 0:\n            return True\n        if root.val == 1:\n            return False\n        if root.val == 2:\n            return False\n        if root.val == 3:\n            return False\n        if root.val == 4:\n            return False\n        if root.val == 5:\n            return False\n        if root.val == 6:\n            return False\n        if root.val == 7:\n            return False\n        if root.val == 8:\n            return False\n        if root.val == 9:\n            return False\n        if root.val == 10:\n            return False\n        if root.val == 11:\n            return False\n        if root.val == 12:\n            return False\n        if root.val == 13:\n            return False\n        if root.val == 14:\n            return False\n        if root.val == 15:\n            return False\n        if root.val == 16:\n            return False\n        if root.val == 17:\n            return False\n        if root.val"
    },
    {
        "number": 1610,
        "title": "Maximum Number of Visible Points",
        "difficulty": 2,
        "answer": "        return max(len(points), len(location))"
    },
    {
        "number": 1611,
        "title": "Minimum One Bit Operations to Make Integers Zero",
        "difficulty": 2,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n        if n == 22:\n            "
    },
    {
        "number": 1614,
        "title": "Maximum Nesting Depth of the Parentheses",
        "difficulty": 0,
        "answer": "        if not s:\n            return 0\n        depth = 0\n        for char in s:\n            if char == '(':\n                depth += 1\n            elif char == ')':\n                depth -= 1\n            elif char == '+':\n                depth += 1\n            elif char == '-':\n                depth -= 1\n            elif char == '*':\n                depth += 1\n            elif char == '/':\n                depth -= 1\n            elif char == ')':\n                depth -= 1\n            elif char == ')':\n                depth += 1\n            elif char == ')':\n                depth -= 1\n            elif char == ')':\n                depth += 1\n            elif char == ')':\n                depth -= 1\n            elif char == ')':\n                depth += 1\n            elif char == ')':\n                depth -= 1\n            elif char == ')':\n                depth += 1\n            elif char == ')':\n                depth -= 1\n            elif char == ')':\n                depth += 1\n            elif char == ')"
    },
    {
        "number": 1615,
        "title": "Maximal Network Rank",
        "difficulty": 1,
        "answer": "        n = int(n)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        return 0"
    },
    {
        "number": 1616,
        "title": "Split Two Strings to Make Palindrome",
        "difficulty": 1,
        "answer": "        if a == b:\n            return True\n        if a == b[0] + b[1]:\n            return True\n        if b == a[0] + a[1]:\n            return True\n        return False"
    },
    {
        "number": 1617,
        "title": "Count Subtrees With Max Distance Between Cities",
        "difficulty": 2,
        "answer": "        if len(edges) == 0:\n            return []\n        if len(edges) == 1:\n            return [edges[0]]\n        if len(edges) == 2:\n            return [edges[0], edges[1]]\n        if len(edges) == 3:\n            return [edges[0], edges[1], edges[2]]\n        return []"
    },
    {
        "number": 1619,
        "title": "Mean of Array After Removing Some Elements",
        "difficulty": 0,
        "answer": "        if not arr:\n            return 0\n        if len(arr) == 0:\n            return 0\n        if len(arr) == 1:\n            return arr[0]\n        if len(arr) == 2:\n            return arr[0] + arr[1]\n        if len(arr) == 3:\n            return arr[0] + arr[1] + arr[2]\n        if len(arr) == 4:\n            return arr[0] + arr[1] + arr[2] + arr[3]\n        if len(arr) == 5:\n            return arr[0] + arr[1] + arr[2] + arr[3] + arr[4]\n        if len(arr) == 6:\n            return arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5]\n        if len(arr) == 7:\n            return arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6]\n        if"
    },
    {
        "number": 1620,
        "title": "Coordinate With Maximum Network Quality",
        "difficulty": 1,
        "answer": "        if len(towers) == 0:\n            return [0]\n        if len(towers) == 1:\n            return towers[0]\n        if len(towers) == 2:\n            return towers[0] + towers[1]\n        if len(towers) == 3:\n            return towers[0] + towers[1] + towers[2]\n        if len(towers) == 4:\n            return towers[0] + towers[1] + towers[2] + towers[3]\n        if len(towers) == 5:\n            return towers[0] + towers[1] + towers[2] + towers[3] + towers[4]\n        if len(towers) == 6:\n            return towers[0] + towers[1] + towers[2] + towers[3] + towers[4] + towers[5]\n        if len(towers) == 7:\n            return towers[0] + towers[1] + towers[2] + towers[3] + towers[4] + towers[5] + towers[6]\n        if"
    },
    {
        "number": 1621,
        "title": "Number of Sets of K Non-Overlapping Line Segments",
        "difficulty": 1,
        "answer": "        if n < 1 or k < 1:\n            return 0\n        if n == 1:\n            return 1\n        if k == 1:\n            return 2\n        if k == 2:\n            return 3\n        if k == 3:\n            return 4\n        if k == 4:\n            return 5\n        if k == 5:\n            return 6\n        if k == 6:\n            return 7\n        if k == 7:\n            return 8\n        if k == 8:\n            return 9\n        if k == 9:\n            return 10\n        if k == 10:\n            return 11\n        if k == 11:\n            return 12\n        if k == 12:\n            return 13\n        if k == 13:\n            return 14\n        if k == 14:\n            return 15\n        if k == 15:\n            return 16\n        if k == 16:\n            return 17\n        if k == 17:\n            return 18\n        if k == 18:\n            return 19\n        if k == 19:\n            return 20\n        if k == 20:\n            return 21\n        if k =="
    },
    {
        "number": 1622,
        "title": "Fancy Sequence",
        "difficulty": 2,
        "answer": "        pass"
    },
    {
        "number": 1624,
        "title": "Largest Substring Between Two Equal Characters",
        "difficulty": 0,
        "answer": "        if not s:\n            return -1\n        if len(s) == 1:\n            return 0\n        if len(s) == 2:\n            return max(len(s[0]), len(s[1]))\n        if len(s) == 3:\n            return max(len(s[0]), len(s[1]))\n        return max(len(s[0]), len(s[1]))"
    },
    {
        "number": 1625,
        "title": "Lexicographically Smallest String After Applying Operations",
        "difficulty": 1,
        "answer": "        if len(s) % 2 == 0:\n            return s\n        else:\n            return s[::-1] + s[1::-1]"
    },
    {
        "number": 1626,
        "title": "Best Team With No Conflicts",
        "difficulty": 1,
        "answer": "        if len(scores) == 0 or len(ages) == 0:\n            return 0\n        if len(scores) == 1:\n            return scores[0]\n        if len(scores) == 2:\n            return scores[0] + scores[1]\n        if len(scores) == 3:\n            return scores[0] + scores[1] + scores[2]\n        if len(scores) == 4:\n            return scores[0] + scores[1] + scores[2] + scores[3]\n        if len(scores) == 5:\n            return scores[0] + scores[1] + scores[2] + scores[3] + scores[4]\n        if len(scores) == 6:\n            return scores[0] + scores[1] + scores[2] + scores[3] + scores[4] + scores[5]\n        if len(scores) == 7:\n            return scores[0] + scores[1] + scores[2] + scores[3] + scores[4] + scores[5] + scores["
    },
    {
        "number": 1627,
        "title": "Graph Connectivity With Threshold",
        "difficulty": 2,
        "answer": "        if n < 0 or n > len(queries) or threshold < 0 or threshold > len(queries):\n            return []\n        if n == 0:\n            return [False] * (len(queries) - 1)\n        if n == 1:\n            return [False] * (len(queries) - 1)\n        if n == 2:\n            return [False] * (len(queries) - 1)\n        if n == 3:\n            return [False] * (len(queries) - 1)\n        if n == 4:\n            return [False] * (len(queries) - 1)\n        if n == 5:\n            return [False] * (len(queries) - 1)\n        if n == 6:\n            return [False] * (len(queries) - 1)\n        if n == 7:\n            return [False] * (len(queries) - 1)\n        if n == 8:\n            return [False] * (len(queries) - 1)\n        if n == 9:\n            return [False] *"
    },
    {
        "number": 1629,
        "title": "Slowest Key",
        "difficulty": 0,
        "answer": "        # TODO: Implement this function\n        return \"\""
    },
    {
        "number": 1630,
        "title": "Arithmetic Subarrays",
        "difficulty": 1,
        "answer": "        if len(nums) < 2:\n            return []\n        if len(l) < 2 or len(r) < 2:\n            return []\n        if len(l) == 0 or len(r) == 0:\n            return []\n        if len(l) == 1 and len(r) == 1:\n            return [nums[l[0]] == nums[r[0]]]\n        if len(l) == 1 and len(r) == 0:\n            return [nums[l[0]] == nums[l[0]]]\n        if len(l) == 0 and len(r) == 1:\n            return [nums[r[0]] == nums[r[0]]]\n        if len(l) == 0 and len(r) == 0:\n            return [nums[l[0]] == nums[l[0]]]\n        if len(l) == 1 and len(r) == 1:\n            return [nums[l[0]] == nums[l[0]]]\n        if len(l) == 0"
    },
    {
        "number": 1631,
        "title": "Path With Minimum Effort",
        "difficulty": 1,
        "answer": "        return self.minimumEffortPath_helper(heights)"
    },
    {
        "number": 1632,
        "title": "Rank Transform of a Matrix",
        "difficulty": 2,
        "answer": "        if len(matrix) == 0:\n            return []\n        if len(matrix) == 1:\n            return [matrix[0]]\n        if len(matrix) == 2:\n            return [matrix[0][0], matrix[0][1]]\n        if len(matrix) == 3:\n            return [matrix[0][0], matrix[0][1], matrix[1][0], matrix[1][1]]\n        return []"
    },
    {
        "number": 1636,
        "title": "Sort Array by Increasing Frequency",
        "difficulty": 0,
        "answer": "        nums = sorted(nums)\n        return nums"
    },
    {
        "number": 1637,
        "title": "Widest Vertical Area Between Two Points Containing No Points",
        "difficulty": 1,
        "answer": "        if len(points) == 0:\n            return 0\n        if len(points) == 1:\n            return points[0][0]\n        if len(points) == 2:\n            return max(points[0][0], points[1][0])\n        if len(points) == 3:\n            return max(points[0][0], points[1][0], points[2][0])\n        if len(points) == 4:\n            return max(points[0][0], points[1][0], points[2][0], points[3][0])\n        return 0"
    },
    {
        "number": 1638,
        "title": "Count Substrings That Differ by One Character",
        "difficulty": 1,
        "answer": "        if not s or not t:\n            return 0\n        if not s.count(t):\n            return 0\n        if not t.count(s):\n            return 0\n        return len(s) - len(t)"
    },
    {
        "number": 1639,
        "title": "Number of Ways to Form a Target String Given a Dictionary",
        "difficulty": 2,
        "answer": "        if len(words) == 0:\n            return 0\n        if len(target) == 0:\n            return 0\n        if len(target) == 1:\n            return 1\n        if len(target) == 2:\n            return 2\n        if len(target) == 3:\n            return 3\n        if len(target) == 4:\n            return 4\n        if len(target) == 5:\n            return 5\n        if len(target) == 6:\n            return 6\n        if len(target) == 7:\n            return 7\n        if len(target) == 8:\n            return 8\n        if len(target) == 9:\n            return 9\n        if len(target) == 10:\n            return 10\n        if len(target) == 11:\n            return 11\n        if len(target) == 12:\n            return 12\n        if len(target) == 13:\n            return 13\n        if len(target) == 14:\n            return 14\n        if len(target) == 15:\n            return 15\n        if len(target) == 16:\n            return"
    },
    {
        "number": 1640,
        "title": "Check Array Formation Through Concatenation",
        "difficulty": 0,
        "answer": "        if len(arr)!= len(pieces):\n            return False\n        for i in range(len(pieces)):\n            if not isinstance(pieces[i], list):\n                return False\n        for i in range(len(pieces)):\n            if not isinstance(pieces[i], list):\n                return False\n        for i in range(len(pieces)):\n            if not isinstance(pieces[i], list):\n                return False\n        for i in range(len(pieces)):\n            if not isinstance(pieces[i], list):\n                return False\n        return True"
    },
    {
        "number": 1641,
        "title": "Count Sorted Vowel Strings",
        "difficulty": 1,
        "answer": "        if n < 1:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n        if n == 22:\n            "
    },
    {
        "number": 1642,
        "title": "Furthest Building You Can Reach",
        "difficulty": 1,
        "answer": "        if len(heights) == 0:\n            return 0\n        if len(heights) == 1:\n            return heights[0]\n        if len(heights) == 2:\n            return max(heights[0], heights[1])\n        if len(heights) == 3:\n            return max(heights[0], heights[1], heights[2])\n        if len(heights) == 4:\n            return max(heights[0], heights[1], heights[2], heights[3])\n        if len(heights) == 5:\n            return max(heights[0], heights[1], heights[2], heights[3], heights[4])\n        if len(heights) == 6:\n            return max(heights[0], heights[1], heights[2], heights[3], heights[4], heights[5])\n        if len(heights) == 7:\n            return max(heights[0], heights[1], heights[2], heights[3], heights[4], heights[5], heights[6])\n        if len(heights)"
    },
    {
        "number": 1643,
        "title": "Kth Smallest Instructions",
        "difficulty": 2,
        "answer": "        if len(destination) < k:\n            return destination\n        if k == 1:\n            return destination[0]\n        if k == 2:\n            return destination[1]\n        if k == 3:\n            return destination[2]\n        return destination[k - 1]"
    },
    {
        "number": 1646,
        "title": "Get Maximum in Generated Array",
        "difficulty": 0,
        "answer": "        if n <= 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        return 0"
    },
    {
        "number": 1647,
        "title": "Minimum Deletions to Make Character Frequencies Unique",
        "difficulty": 1,
        "answer": "        return len(s) - len(s.replace(s[-1], ''))"
    },
    {
        "number": 1648,
        "title": "Sell Diminishing-Valued Colored Balls",
        "difficulty": 1,
        "answer": "        if orders == 0:\n            return inventory[0]\n        elif orders == 1:\n            return inventory[1]\n        elif orders == 2:\n            return inventory[2]\n        elif orders == 3:\n            return inventory[3]\n        elif orders == 4:\n            return inventory[4]\n        else:\n            return inventory[-1]"
    },
    {
        "number": 1649,
        "title": "Create Sorted Array through Instructions",
        "difficulty": 2,
        "answer": "        if not instructions:\n            return 0"
    },
    {
        "number": 1652,
        "title": "Defuse the Bomb",
        "difficulty": 0,
        "answer": "        if k == 0:\n            return [code[0]]\n        if k < 0:\n            return [code[-1]] + self.decrypt(code[:-1], k)\n        if k == 0:\n            return [code[0]]\n        return self.decrypt(code[:-1], k) + self.decrypt(code[1:], k)"
    },
    {
        "number": 1653,
        "title": "Minimum Deletions to Make String Balanced",
        "difficulty": 1,
        "answer": "        if len(s) == 0:\n            return 0\n        if len(s) == 1:\n            return 1\n        if len(s) == 2:\n            return 2\n        if len(s) == 3:\n            return 3\n        if len(s) == 4:\n            return 4\n        if len(s) == 5:\n            return 5\n        return 0"
    },
    {
        "number": 1654,
        "title": "Minimum Jumps to Reach Home",
        "difficulty": 1,
        "answer": "        if len(forbidden) == 0:\n            return -1\n        if len(forbidden) == 1:\n            return 0\n        if len(forbidden) == 2:\n            return 0\n        if len(forbidden) == 3:\n            return 0\n        if len(forbidden) == 4:\n            return 0\n        if len(forbidden) == 5:\n            return 0\n        if len(forbidden) == 6:\n            return 0\n        if len(forbidden) == 7:\n            return 0\n        if len(forbidden) == 8:\n            return 0\n        if len(forbidden) == 9:\n            return 0\n        if len(forbidden) == 10:\n            return 0\n        if len(forbidden) == 11:\n            return 0\n        if len(forbidden) == 12:\n            return 0\n        if len(forbidden) == 13:\n            return 0\n        if len(forbidden) == 14:\n            return 0\n        if len(forbidden) == 15:\n            return 0\n        if len(forbidden) == 16"
    },
    {
        "number": 1655,
        "title": "Distribute Repeating Integers",
        "difficulty": 2,
        "answer": "        if len(nums) == 0 or len(quantity) == 0:\n            return False\n        if len(nums) == 1:\n            return quantity[0] == nums[0]\n        if len(nums) == 2:\n            return quantity[0] == nums[0] and quantity[1] == nums[1]\n        if len(nums) == 3:\n            return quantity[0] == nums[0] and quantity[1] == nums[1] and quantity[2] == nums[2]\n        if len(nums) == 4:\n            return quantity[0] == nums[0] and quantity[1] == nums[1] and quantity[2] == nums[2] and quantity[3] == nums[3]\n        return False"
    },
    {
        "number": 1656,
        "title": "Design an Ordered Stream",
        "difficulty": 0,
        "answer": "        self.n = n\n        self.chunks = []\n        self.chunks.append(value)\n        self.chunks.append(value)\n        self.chunks.append(value)\n        self.chunks.append(value)\n        self.chunks.append(value)\n        self.chunks.append(value)\n        self.chunks.append(value)\n        self.chunks.append(value)\n        self.chunks.append(value)\n        self.chunks.append(value)\n        self.chunks.append(value)\n        self.chunks.append(value)\n        self.chunks.append(value)\n        self.chunks.append(value)\n        self.chunks.append(value)\n        self.chunks.append(value)\n        self.chunks.append(value)\n        self.chunks.append(value)\n        self.chunks.append(value)\n        self.chunks.append(value)\n        self.chunks.append(value)\n        self.ch"
    },
    {
        "number": 1657,
        "title": "Determine if Two Strings Are Close",
        "difficulty": 1,
        "answer": "        if not word1 or not word2:\n            return False\n        if word1 == word2:\n            return True\n        if word1.startswith(word2):\n            return True\n        return False"
    },
    {
        "number": 1658,
        "title": "Minimum Operations to Reduce X to Zero",
        "difficulty": 1,
        "answer": "        if x == 0:\n            return 0\n        if x == 1:\n            return -1\n        if x == 2:\n            return -1\n        if x == 3:\n            return -1\n        if x == 4:\n            return -1\n        if x == 5:\n            return -1\n        if x == 6:\n            return -1\n        if x == 7:\n            return -1\n        if x == 8:\n            return -1\n        if x == 9:\n            return -1\n        return -1"
    },
    {
        "number": 1659,
        "title": "Maximize Grid Happiness",
        "difficulty": 2,
        "answer": "        if m == 0 or n == 0:\n            return 0\n        if m == 1 or n == 1:\n            return 0\n        if m == 2 or n == 2:\n            return 0\n        if m == 3 or n == 3:\n            return 0\n        if m == 4 or n == 4:\n            return 0\n        if m == 5 or n == 5:\n            return 0\n        if m == 6 or n == 6:\n            return 0\n        if m == 7 or n == 7:\n            return 0\n        if m == 8 or n == 8:\n            return 0\n        if m == 9 or n == 9:\n            return 0\n        if m == 10 or n == 10:\n            return 0\n        if m == 11 or n == 11:\n            return 0\n        if m == 12 or n == 12:\n            return 0\n        if m == 13 or n == 13:\n            return 0\n        if m == 14 or n == 14:\n            return 0\n        if m == 15 or n == 15:\n            return 0\n        if m == 16 or n == 16:"
    },
    {
        "number": 1662,
        "title": "Check If Two String Arrays are Equivalent",
        "difficulty": 0,
        "answer": "        if len(word1)!= len(word2):\n            return False\n        for i in range(len(word1)):\n            if word1[i]!= word2[i]:\n                return False\n        return True"
    },
    {
        "number": 1663,
        "title": "Smallest String With A Given Numeric Value",
        "difficulty": 1,
        "answer": "        if n < k:\n            return str(n)\n        else:\n            return str(k)"
    },
    {
        "number": 1664,
        "title": "Ways to Make a Fair Array",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return nums[0] + nums[1]\n        if len(nums) == 3:\n            return nums[0] + nums[1] + nums[2]\n        if len(nums) == 4:\n            return nums[0] + nums[1] + nums[2] + nums[3]\n        return 0"
    },
    {
        "number": 1665,
        "title": "Minimum Initial Energy to Finish Tasks",
        "difficulty": 2,
        "answer": "        if not tasks:\n            return 0\n        return min(tasks[0][1], tasks[-1][1])"
    },
    {
        "number": 1668,
        "title": "Maximum Repeating Substring",
        "difficulty": 0,
        "answer": "        n = len(sequence)\n        if n == 0:\n            return 0\n        if n == 1:\n            return sequence[0]\n        if n == 2:\n            return max(sequence[0], sequence[1])\n        if n == 3:\n            return max(sequence[0], sequence[1], sequence[2])\n        if n == 4:\n            return max(sequence[0], sequence[1], sequence[2], sequence[3])\n        if n == 5:\n            return max(sequence[0], sequence[1], sequence[2], sequence[3], sequence[4])\n        if n == 6:\n            return max(sequence[0], sequence[1], sequence[2], sequence[3], sequence[4], sequence[5])\n        if n == 7:\n            return max(sequence[0], sequence[1], sequence[2], sequence[3], sequence[4], sequence[5], sequence[6])\n        if n == 8:\n            return max(sequence[0], sequence[1], sequence[2], sequence[3], sequence[4], sequence[5], sequence["
    },
    {
        "number": 1669,
        "title": "Merge In Between Linked Lists",
        "difficulty": 1,
        "answer": "        if list1 == None or list2 == None:\n            return None\n        if list1.next == None or list2.next == None:\n            return None\n        if list1.next.next == None or list2.next.next == None:\n            return None\n        list1.next.next = list2.next\n        list2.next = list1.next\n        return list1"
    },
    {
        "number": 1670,
        "title": "Design Front Middle Back Queue",
        "difficulty": 1,
        "answer": "        pass"
    },
    {
        "number": 1671,
        "title": "Minimum Number of Removals to Make Mountain Array",
        "difficulty": 2,
        "answer": "        if not nums:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return min(nums[0], nums[1])\n        if len(nums) == 3:\n            return min(nums[0], nums[1], nums[2])\n        return min(nums[0], nums[1], nums[2], nums[3])"
    },
    {
        "number": 1672,
        "title": "Richest Customer Wealth",
        "difficulty": 0,
        "answer": "        if not accounts:\n            return 0\n        if not accounts[0][0]:\n            return 0\n        if not accounts[0][1]:\n            return 0\n        if not accounts[0][2]:\n            return 0\n        if not accounts[1][0]:\n            return 0\n        if not accounts[1][1]:\n            return 0\n        if not accounts[1][2]:\n            return 0\n        if not accounts[2][0]:\n            return 0\n        if not accounts[2][1]:\n            return 0\n        if not accounts[2][2]:\n            return 0\n        if not accounts[3][0]:\n            return 0\n        if not accounts[3][1]:\n            return 0\n        if not accounts[3][2]:\n            return 0\n        if not accounts[4][0]:\n            return 0\n        if not accounts[4][1]:\n            return 0\n        if not accounts[4][2]:\n            return 0\n        if not accounts[5][0]:\n            return 0\n        if not accounts[5][1]:\n            return 0\n        if"
    },
    {
        "number": 1673,
        "title": "Find the Most Competitive Subsequence",
        "difficulty": 1,
        "answer": "        if len(nums) < k:\n            return []\n        result = []\n        for i in range(len(nums)):\n            if nums[i] > nums[i + k]:\n                result.append(nums[i])\n        return result"
    },
    {
        "number": 1674,
        "title": "Minimum Moves to Make Array Complementary",
        "difficulty": 1,
        "answer": "        if len(nums) == 0 or len(nums) == 1:\n            return 0\n        if len(nums) == 1:\n            return nums[0] + nums[n - 1 - 0]\n        if len(nums) == 2:\n            return nums[0] + nums[1]\n        if len(nums) == 3:\n            return nums[0] + nums[1] + nums[2]\n        if len(nums) == 4:\n            return nums[0] + nums[1] + nums[2] + nums[3]\n        return 0"
    },
    {
        "number": 1675,
        "title": "Minimize Deviation in Array",
        "difficulty": 2,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return max(nums[0], nums[1])\n        if len(nums) == 3:\n            return max(nums[0], nums[1], nums[2])\n        if len(nums) == 4:\n            return max(nums[0], nums[1], nums[2], nums[3])\n        return 0"
    },
    {
        "number": 1678,
        "title": "Goal Parser Interpretation",
        "difficulty": 0,
        "answer": "        if command.startswith(\"G\"):\n            return command[1:]\n        elif command.startswith(\"()\"):\n            return command[2:]\n        elif command.startswith(\"(\"):\n            return command[1:]\n        else:\n            return command"
    },
    {
        "number": 1679,
        "title": "Max Number of K-Sum Pairs",
        "difficulty": 1,
        "answer": "        if not nums:\n            return 0\n        if not k:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return max(self.maxOperations(nums[1:], k - nums[0]))\n        if len(nums) == 3:\n            return max(self.maxOperations(nums[1:], k - nums[0])) + self.maxOperations(nums[1:], k - nums[1])\n        if len(nums) == 4:\n            return max(self.maxOperations(nums[1:], k - nums[0])) + self.maxOperations(nums[1:], k - nums[1]) + self.maxOperations(nums[1:], k - nums[2])\n        return 0"
    },
    {
        "number": 1680,
        "title": "Concatenation of Consecutive Binary Numbers",
        "difficulty": 1,
        "answer": "        if n == 1:\n            return 1\n        elif n == 2:\n            return 10\n        elif n == 3:\n            return 11\n        else:\n            return n"
    },
    {
        "number": 1681,
        "title": "Minimum Incompatibility",
        "difficulty": 2,
        "answer": "        if k == 0:\n            return 0\n        if k == 1:\n            return nums[0]\n        if k == 2:\n            return nums[1]\n        if k == 3:\n            return nums[2]\n        if k == 4:\n            return nums[3]\n        return -1"
    },
    {
        "number": 1684,
        "title": "Count the Number of Consistent Strings",
        "difficulty": 0,
        "answer": "        n = 0\n        for word in words:\n            if word in allowed:\n                n += 1\n        return n"
    },
    {
        "number": 1685,
        "title": "Sum of Absolute Differences in a Sorted Array",
        "difficulty": 1,
        "answer": "        if not nums:\n            return []\n        result = [0] * len(nums)\n        for i in range(len(nums)):\n            result[i] = result[i] + abs(nums[i])\n        return result"
    },
    {
        "number": 1686,
        "title": "Stone Game VI",
        "difficulty": 1,
        "answer": "        n = len(aliceValues)\n        if n == 0:\n            return 0\n        if n == 1:\n            return aliceValues[0]\n        if n == 2:\n            return aliceValues[1]\n        if n == 3:\n            return aliceValues[2]\n        if n == 4:\n            return aliceValues[3]\n        if n == 5:\n            return aliceValues[4]\n        if n == 6:\n            return aliceValues[5]\n        if n == 7:\n            return aliceValues[6]\n        return 0"
    },
    {
        "number": 1687,
        "title": "Delivering Boxes from Storage to Ports",
        "difficulty": 2,
        "answer": "        if len(boxes) < 2:\n            return 0\n        if len(boxes) == 1:\n            return boxes[0][0]\n        if len(boxes) == 2:\n            return boxes[0][0] + boxes[1][0]\n        if len(boxes) == 3:\n            return boxes[0][0] + boxes[1][0] + boxes[2][0]\n        if len(boxes) == 4:\n            return boxes[0][0] + boxes[1][0] + boxes[2][0] + boxes[3][0]\n        if len(boxes) == 5:\n            return boxes[0][0] + boxes[1][0] + boxes[2][0] + boxes[3][0] + boxes[4][0]\n        if len(boxes) == 6:\n            return boxes[0][0] + boxes[1][0] + boxes[2][0] + boxes[3][0] + boxes[4][0] + boxes[5][0]\n        return 0\n"
    },
    {
        "number": 1688,
        "title": "Count of Matches in Tournament",
        "difficulty": 0,
        "answer": "        if n % 2 == 0:\n            return n / 2\n        else:\n            return n / 2 + 1"
    },
    {
        "number": 1689,
        "title": "Partitioning Into Minimum Number Of Deci-Binary Numbers",
        "difficulty": 1,
        "answer": "        if n.startswith(\"0\"):\n            return 0\n        if n.startswith(\"1\"):\n            return 1\n        return n"
    },
    {
        "number": 1690,
        "title": "Stone Game VII",
        "difficulty": 1,
        "answer": "        if len(stones) == 0:\n            return 0\n        if len(stones) == 1:\n            return stones[0]\n        if len(stones) == 2:\n            return stones[0] - stones[1]\n        if len(stones) == 3:\n            return stones[0] - stones[1] - stones[2]\n        if len(stones) == 4:\n            return stones[0] - stones[1] - stones[2] - stones[3]\n        return 0"
    },
    {
        "number": 1691,
        "title": "Maximum Height by Stacking Cuboids ",
        "difficulty": 2,
        "answer": "        n = len(cuboids)\n        if n == 0:\n            return 0\n        if n == 1:\n            return cuboids[0][0]\n        if n == 2:\n            return max(cuboids[0][0], cuboids[1][0])\n        if n == 3:\n            return max(cuboids[0][0], cuboids[1][0], cuboids[2][0])\n        if n == 4:\n            return max(cuboids[0][0], cuboids[1][0], cuboids[2][0], cuboids[3][0])\n        if n == 5:\n            return max(cuboids[0][0], cuboids[1][0], cuboids[2][0], cuboids[3][0], cuboids[4][0])\n        if n == 6:\n            return max(cuboids[0][0], cuboids[1][0], cuboids[2][0], cuboids[3][0], cuboids[4][0], cuboids[5][0])\n        if n == 7:\n"
    },
    {
        "number": 1694,
        "title": "Reformat Phone Number",
        "difficulty": 0,
        "answer": "        number = number.replace(\" \", \"\")\n        number = number.replace(\"-\", \"\")\n        number = number.replace(\"+\", \"\")\n        number = number.replace(\".\", \"\")\n        number = number.replace(\" \", \"\")\n        number = number.replace(\"-\", \"\")\n        number = number.replace(\"+\", \"\")\n        number = number.replace(\".\", \"\")\n        number = number.replace(\" \", \"\")\n        number = number.replace(\"-\", \"\")\n        number = number.replace(\"+\", \"\")\n        number = number.replace(\".\", \"\")\n        number = number.replace(\" \", \"\")\n        number = number.replace(\"-\", \"\")\n        number = number.replace(\"+\", \"\")\n        number = number.replace(\".\", \"\")\n        number = number.replace(\" \", \"\")\n        number = number.replace(\"-\", \"\")\n        number = number.replace(\"+\", \"\")\n        number = number.replace(\".\", \"\")\n        number = number.replace(\" \", \"\")\n        number = number.replace(\"-\","
    },
    {
        "number": 1695,
        "title": "Maximum Erasure Value",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return max(nums[0], nums[1])\n        if len(nums) == 3:\n            return max(nums[0], nums[1], nums[2])\n        if len(nums) == 4:\n            return max(nums[0], nums[1], nums[2], nums[3])\n        if len(nums) == 5:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4])\n        if len(nums) == 6:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5])\n        return 0"
    },
    {
        "number": 1696,
        "title": "Jump Game VI",
        "difficulty": 1,
        "answer": "        if k == 0:\n            return 0\n        if k == 1:\n            return nums[0]\n        if k == 2:\n            return nums[1]\n        if k == 3:\n            return nums[2]\n        if k == 4:\n            return nums[3]\n        if k == 5:\n            return nums[4]\n        if k == 6:\n            return nums[5]\n        if k == 7:\n            return nums[6]\n        if k == 8:\n            return nums[7]\n        if k == 9:\n            return nums[8]\n        if k == 10:\n            return nums[9]\n        if k == 11:\n            return nums[10]\n        if k == 12:\n            return nums[11]\n        if k == 13:\n            return nums[12]\n        if k == 14:\n            return nums[13]\n        if k == 15:\n            return nums[14]\n        if k == 16:\n            return nums[15]"
    },
    {
        "number": 1697,
        "title": "Checking Existence of Edge Length Limited Paths",
        "difficulty": 2,
        "answer": "        answer = []\n        for i in range(len(queries)):\n            if queries[i] == []:\n                continue\n            for j in range(i+1, len(queries)):\n                if queries[j] == []:\n                    continue\n                if queries[j] == queries[i]:\n                    continue\n                if queries[j] == queries[i] and queries[i] == queries[j]:\n                    continue\n                if queries[j] == queries[i] and queries[i] == queries[j] and queries[j] == queries[i]:\n                    continue\n                if queries[j] == queries[i] and queries[i] == queries[j] and queries[j] == queries[i]:\n                    continue\n                if queries[j] == queries[i] and queries[i] == queries[j] and queries[j] == queries[i]:\n                    continue\n                if queries[j] == queries[i] and queries[i] == queries[j] and queries[j] == queries[i]:\n                    continue\n                if queries[j] == queries["
    },
    {
        "number": 1700,
        "title": "Number of Students Unable to Eat Lunch",
        "difficulty": 0,
        "answer": "        if len(students) == 0:\n            return 0\n        if len(students) == 1:\n            return 1\n        if len(students) == 2:\n            return 2\n        if len(students) == 3:\n            return 3\n        if len(students) == 4:\n            return 4\n        if len(students) == 5:\n            return 5\n        if len(students) == 6:\n            return 6\n        if len(students) == 7:\n            return 7\n        if len(students) == 8:\n            return 8\n        if len(students) == 9:\n            return 9\n        if len(students) == 10:\n            return 10\n        if len(students) == 11:\n            return 11\n        if len(students) == 12:\n            return 12\n        if len(students) == 13:\n            return 13\n        if len(students) == 14:\n            return 14\n        if len(students) == 15:\n            return 15\n        if len(students) == 16:"
    },
    {
        "number": 1701,
        "title": "Average Waiting Time",
        "difficulty": 1,
        "answer": "        return sum(map(lambda x: x[1], customers)) / len(customers)"
    },
    {
        "number": 1702,
        "title": "Maximum Binary String After Change",
        "difficulty": 1,
        "answer": "        if not binary:\n            return binary\n        if binary[0] == '0':\n            return binary[1:]\n        else:\n            return binary[:-1]"
    },
    {
        "number": 1703,
        "title": "Minimum Adjacent Swaps for K Consecutive Ones",
        "difficulty": 2,
        "answer": "        if len(nums) == 0 or len(nums) == 1:\n            return 0\n        if len(nums) == k:\n            return nums[0]\n        if len(nums) == k + 1:\n            return nums[k]\n        if len(nums) == k + 2:\n            return nums[k]\n        if len(nums) == k + 3:\n            return nums[k]\n        if len(nums) == k + 4:\n            return nums[k]\n        if len(nums) == k + 5:\n            return nums[k]\n        if len(nums) == k + 6:\n            return nums[k]\n        if len(nums) == k + 7:\n            return nums[k]\n        if len(nums) == k + 8:\n            return nums[k]\n        if len(nums) == k + 9:\n            return nums[k]\n        if len(nums) == k + 10:\n            return nums[k"
    },
    {
        "number": 1704,
        "title": "Determine if String Halves Are Alike",
        "difficulty": 0,
        "answer": "        if len(s) % 2 == 0:\n            return True\n        else:\n            return False"
    },
    {
        "number": 1705,
        "title": "Maximum Number of Eaten Apples",
        "difficulty": 1,
        "answer": "        if len(days) == 0:\n            return 0\n        if len(days) == 1:\n            return days[0]\n        if len(days) == 2:\n            return days[0] + days[1]\n        if len(days) == 3:\n            return days[0] + days[1] + days[2]\n        if len(days) == 4:\n            return days[0] + days[1] + days[2] + days[3]\n        if len(days) == 5:\n            return days[0] + days[1] + days[2] + days[3] + days[4]\n        return 0"
    },
    {
        "number": 1706,
        "title": "Where Will the Ball Fall",
        "difficulty": 1,
        "answer": "        if len(grid) == 0:\n            return [-1]\n        if len(grid) == 1:\n            return [-1]\n        if len(grid) == 2:\n            return [-1]\n        if len(grid) == 3:\n            return [-1]\n        if len(grid) == 4:\n            return [-1]\n        if len(grid) == 5:\n            return [-1]\n        if len(grid) == 6:\n            return [-1]\n        if len(grid) == 7:\n            return [-1]\n        if len(grid) == 8:\n            return [-1]\n        if len(grid) == 9:\n            return [-1]\n        if len(grid) == 10:\n            return [-1]\n        if len(grid) == 11:\n            return [-1]\n        if len(grid) == 12:\n            return [-1]\n        if len(grid) == 13:\n            return [-1]\n        if len(grid) == 14:\n            return [-1]\n        if len(grid) == 15:\n"
    },
    {
        "number": 1707,
        "title": "Maximum XOR With an Element From Array",
        "difficulty": 2,
        "answer": "        if not nums or not queries:\n            return []\n        if not nums:\n            return []\n        if not queries:\n            return []\n        max_xor = 0\n        for i in range(len(nums)):\n            max_xor = max(max_xor, nums[i] ^ queries[i])\n        return [max_xor]"
    },
    {
        "number": 1710,
        "title": "Maximum Units on a Truck",
        "difficulty": 0,
        "answer": "        if len(boxTypes) == 0:\n            return 0\n        if len(boxTypes) == 1:\n            return boxTypes[0][0]\n        if len(boxTypes) == 2:\n            return max(boxTypes[0][0], boxTypes[1][0])\n        if len(boxTypes) == 3:\n            return max(boxTypes[0][0], boxTypes[1][0], boxTypes[2][0])\n        return 0"
    },
    {
        "number": 1711,
        "title": "Count Good Meals",
        "difficulty": 1,
        "answer": "        return sum(1 for i in range(len(deliciousness)) if deliciousness[i] == 1)"
    },
    {
        "number": 1712,
        "title": "Ways to Split Array Into Three Subarrays",
        "difficulty": 1,
        "answer": "        if not nums:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        left = nums[0]\n        mid = nums[1]\n        right = nums[2]\n        sum = 0\n        for i in range(len(nums)):\n            sum += nums[i]\n            if sum <= left:\n                return i\n            if sum <= mid:\n                return i + 1\n            if sum <= right:\n                return i + 2\n        return 0"
    },
    {
        "number": 1713,
        "title": "Minimum Operations to Make a Subsequence",
        "difficulty": 2,
        "answer": "        if not target:\n            return 0\n        if not arr:\n            return 0\n        if len(target) == len(arr):\n            return min(self.minOperations(target, arr))\n        else:\n            return min(self.minOperations(target, arr[:len(target)]) + self.minOperations(arr[len(target):], target))"
    },
    {
        "number": 1716,
        "title": "Calculate Money in Leetcode Bank",
        "difficulty": 0,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        return 0"
    },
    {
        "number": 1717,
        "title": "Maximum Score From Removing Substrings",
        "difficulty": 1,
        "answer": "        if len(s) < 2:\n            return 0\n        if len(s) == 2:\n            return 0\n        if len(s) == 3:\n            return 0\n        if len(s) == 4:\n            return 0\n        if len(s) == 5:\n            return 0\n        if len(s) == 6:\n            return 0\n        if len(s) == 7:\n            return 0\n        if len(s) == 8:\n            return 0\n        if len(s) == 9:\n            return 0\n        if len(s) == 10:\n            return 0\n        if len(s) == 11:\n            return 0\n        if len(s) == 12:\n            return 0\n        if len(s) == 13:\n            return 0\n        if len(s) == 14:\n            return 0\n        if len(s) == 15:\n            return 0\n        if len(s) == 16:\n            return 0\n        if len(s) == 17:\n            return 0\n        if len(s) == 18:\n            return"
    },
    {
        "number": 1718,
        "title": "Construct the Lexicographically Largest Valid Sequence",
        "difficulty": 1,
        "answer": "        if n <= 1:\n            return []\n        if n == 2:\n            return [1]\n        if n == 3:\n            return [1,1,1]\n        if n == 4:\n            return [1,1,1,1]\n        if n == 5:\n            return [1,1,1,1,1]\n        if n == 6:\n            return [1,1,1,1,1,1]\n        if n == 7:\n            return [1,1,1,1,1,1,1]\n        if n == 8:\n            return [1,1,1,1,1,1,1,1]\n        if n == 9:\n            return [1,1,1,1,1,1,1,1]\n        if n == 10:\n            return [1,1,1,1,1,1,1,1]\n        if n == 11:\n            return [1,1,1,1,1,1,1,1]\n        if n == 12:\n            return [1,1"
    },
    {
        "number": 1719,
        "title": "Number Of Ways To Reconstruct A Tree",
        "difficulty": 2,
        "answer": "        if len(pairs) == 0:\n            return 0\n        if len(pairs) == 1:\n            return 1\n        if len(pairs) == 2:\n            return 2\n        if len(pairs) == 3:\n            return 3\n        if len(pairs) == 4:\n            return 4\n        return 0"
    },
    {
        "number": 1720,
        "title": "Decode XORed Array",
        "difficulty": 0,
        "answer": "        arr = []\n        for i in range(len(encoded)):\n            arr.append(encoded[i] ^ encoded[i + 1])\n        return arr"
    },
    {
        "number": 1721,
        "title": "Swapping Nodes in a Linked List",
        "difficulty": 1,
        "answer": "        if head is None:\n            return None\n        if head.next is None:\n            return head\n        if k == 0:\n            return head\n        if k == 1:\n            return head.next.next\n        if k == 2:\n            return head.next.next.next\n        if k == 3:\n            return head.next.next.next.next\n        if k == 4:\n            return head.next.next.next.next.next\n        if k == 5:\n            return head.next.next.next.next.next\n        return None"
    },
    {
        "number": 1722,
        "title": "Minimize Hamming Distance After Swap Operations",
        "difficulty": 1,
        "answer": "        if len(source) == 0 or len(target) == 0:\n            return 0\n        if len(source) == len(target) == 0:\n            return 0\n        if len(source) == 1:\n            return min(self.hammingDistance(source, target, allowedSwaps), self.hammingDistance(target, source, allowedSwaps))\n        if len(target) == 1:\n            return min(self.hammingDistance(source, target, allowedSwaps), self.hammingDistance(target, target, allowedSwaps))\n        if len(source) == len(target) == 0:\n            return 0\n        if len(source) == len(target) == 1:\n            return min(self.hammingDistance(source, target, allowedSwaps), self.hammingDistance(target, target, allowedSwaps))\n        if len(source) == len(target) == 0:\n            return 0\n        if len(source) == 1:\n            return min(self.hammingDistance(source, target, allowedSwaps), self.hammingDistance(target, target,"
    },
    {
        "number": 1723,
        "title": "Find Minimum Time to Finish All Jobs",
        "difficulty": 2,
        "answer": "        if len(jobs) == 0:\n            return 0\n        if len(jobs) == 1:\n            return jobs[0]\n        if len(jobs) == 2:\n            return max(jobs[0], jobs[1])\n        if len(jobs) == 3:\n            return max(jobs[0], jobs[1], jobs[2])\n        if len(jobs) == 4:\n            return max(jobs[0], jobs[1], jobs[2], jobs[3])\n        if len(jobs) == 5:\n            return max(jobs[0], jobs[1], jobs[2], jobs[3], jobs[4])\n        if len(jobs) == 6:\n            return max(jobs[0], jobs[1], jobs[2], jobs[3], jobs[4], jobs[5])\n        if len(jobs) == 7:\n            return max(jobs[0], jobs[1], jobs[2], jobs[3], jobs[4], jobs[5], jobs[6])\n        if len(jobs) == 8:\n            return max(jobs[0], jobs[1"
    },
    {
        "number": 1725,
        "title": "Number Of Rectangles That Can Form The Largest Square",
        "difficulty": 0,
        "answer": "        maxLen = max(len(rectangles[0]), len(rectangles[1]))\n        for i in range(len(rectangles)):\n            if maxLen <= len(rectangles[i]):\n                return i\n        return 0"
    },
    {
        "number": 1726,
        "title": "Tuple with Same Product",
        "difficulty": 1,
        "answer": "        if not nums:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return nums[0] * nums[1]\n        if len(nums) == 3:\n            return nums[0] * nums[1] * nums[2]\n        if len(nums) == 4:\n            return nums[0] * nums[1] * nums[2] * nums[3]\n        if len(nums) == 5:\n            return nums[0] * nums[1] * nums[2] * nums[3] * nums[4]\n        if len(nums) == 6:\n            return nums[0] * nums[1] * nums[2] * nums[3] * nums[4] * nums[5]\n        if len(nums) == 7:\n            return nums[0] * nums[1] * nums[2] * nums[3"
    },
    {
        "number": 1727,
        "title": "Largest Submatrix With Rearrangements",
        "difficulty": 1,
        "answer": "        # TODO: Implement this\n        return 0"
    },
    {
        "number": 1728,
        "title": "Cat and Mouse II",
        "difficulty": 2,
        "answer": "        if len(grid) == 0:\n            return False\n        if len(grid[0]) == 0:\n            return False\n        if len(grid) == 1:\n            return False\n        if len(grid[0]) == 1:\n            return False\n        if len(grid) == 2:\n            return False\n        if len(grid) == 3:\n            return False\n        if len(grid) == 4:\n            return False\n        if len(grid) == 5:\n            return False\n        if len(grid) == 6:\n            return False\n        if len(grid) == 7:\n            return False\n        if len(grid) == 8:\n            return False\n        if len(grid) == 9:\n            return False\n        if len(grid) == 10:\n            return False\n        if len(grid) == 11:\n            return False\n        if len(grid) == 12:\n            return False\n        if len(grid) == 13:\n            return False\n        if len(grid) == 14:\n            return False\n        if len(grid) == 15"
    },
    {
        "number": 1732,
        "title": "Find the Highest Altitude",
        "difficulty": 0,
        "answer": "        n = len(gain)\n        if n == 0:\n            return 0\n        if n == 1:\n            return gain[0]\n        if n == 2:\n            return gain[0] + gain[1]\n        if n == 3:\n            return gain[0] + gain[1] + gain[2]\n        if n == 4:\n            return gain[0] + gain[1] + gain[2] + gain[3]\n        if n == 5:\n            return gain[0] + gain[1] + gain[2] + gain[3] + gain[4]\n        if n == 6:\n            return gain[0] + gain[1] + gain[2] + gain[3] + gain[4] + gain[5]\n        if n == 7:\n            return gain[0] + gain[1] + gain[2] + gain[3] + gain[4] + gain[5] + gain[6]\n        if n == 8:\n            return gain[0] + gain[1] + gain[2] + gain[3]"
    },
    {
        "number": 1733,
        "title": "Minimum Number of People to Teach",
        "difficulty": 1,
        "answer": "        if n < 2:\n            return 0\n        if n == 2:\n            return languages[0][0]\n        if n == 3:\n            return languages[0][1]\n        if n == 4:\n            return languages[1][0]\n        if n == 5:\n            return languages[1][1]\n        if n == 6:\n            return languages[2][0]\n        if n == 7:\n            return languages[2][1]\n        if n == 8:\n            return languages[3][0]\n        if n == 9:\n            return languages[3][1]\n        if n == 10:\n            return languages[4][0]\n        if n == 11:\n            return languages[4][1]\n        if n == 12:\n            return languages[5][0]\n        if n == 13:\n            return languages[5][1]\n        if n == 14:\n            return languages[6][0]\n        if n == 15:\n            return languages[6][1]\n        if n == 16:\n            return languages[7][0]"
    },
    {
        "number": 1734,
        "title": "Decode XORed Permutation",
        "difficulty": 1,
        "answer": "        n = len(encoded)\n        if n == 0:\n            return []\n        if n == 1:\n            return [encoded[0]]\n        if n == 2:\n            return [encoded[0] ^ encoded[1]]\n        if n == 3:\n            return [encoded[0] ^ encoded[1] ^ encoded[2]]\n        if n == 4:\n            return [encoded[0] ^ encoded[1] ^ encoded[2] ^ encoded[3]]\n        if n == 5:\n            return [encoded[0] ^ encoded[1] ^ encoded[2] ^ encoded[3] ^ encoded[4]]\n        if n == 6:\n            return [encoded[0] ^ encoded[1] ^ encoded[2] ^ encoded[3] ^ encoded[4] ^ encoded[5]]\n        if n == 7:\n            return [encoded[0] ^ encoded[1] ^ encoded[2] ^ encoded[3] ^ encoded[4] ^ encoded[5] ^ encoded[6]]\n        if n == 8:\n            return [encoded["
    },
    {
        "number": 1735,
        "title": "Count Ways to Make Array With Product",
        "difficulty": 2,
        "answer": "        answer = []\n        for i in range(len(queries)):\n            answer.append(queries[i][0] % 109 + 7)\n        return answer"
    },
    {
        "number": 1736,
        "title": "Latest Time by Replacing Hidden Digits",
        "difficulty": 0,
        "answer": "        time = time.replace(\"?\", \"\")\n        time = time.replace(\"?\", \"\")\n        time = time.replace(\"?\", \"\")\n        time = time.replace(\"?\", \"\")\n        time = time.replace(\"?\", \"\")\n        time = time.replace(\"?\", \"\")\n        time = time.replace(\"?\", \"\")\n        time = time.replace(\"?\", \"\")\n        time = time.replace(\"?\", \"\")\n        time = time.replace(\"?\", \"\")\n        time = time.replace(\"?\", \"\")\n        time = time.replace(\"?\", \"\")\n        time = time.replace(\"?\", \"\")\n        time = time.replace(\"?\", \"\")\n        time = time.replace(\"?\", \"\")\n        time = time.replace(\"?\", \"\")\n        time = time.replace(\"?\", \"\")\n        time = time.replace(\"?\", \"\")\n        time = time.replace(\"?\", \"\")\n        time = time.replace(\"?\", \"\")\n        time = time.replace(\"?\", \"\")\n        time = time.replace(\"?\", \"\")\n        time = time.replace(\"?\","
    },
    {
        "number": 1737,
        "title": "Change Minimum Characters to Satisfy One of Three Conditions",
        "difficulty": 1,
        "answer": "        # Your code here\n        # Your code here\n        # Your code here\n        # Your code here\n        # Your code here\n        # Your code here\n        # Your code here\n        # Your code here\n        # Your code here\n        # Your code here\n        # Your code here\n        # Your code here\n        # Your code here\n        # Your code here\n        # Your code here\n        # Your code here\n        # Your code here\n        # Your code here\n        # Your code here\n        # Your code here\n        # Your code here\n        # Your code here\n        # Your code here\n        # Your code here\n        # Your code here\n        # Your code here\n        # Your code here\n        # Your code here\n        # Your code here\n        # Your code here\n        # Your code here\n        # Your code here\n        # Your code here\n        # Your code here\n        # Your code here\n        # Your code here\n        # Your code here\n        # Your code here\n        # Your code here\n        # Your code here\n        # Your code here\n        # Your code"
    },
    {
        "number": 1738,
        "title": "Find Kth Largest XOR Coordinate Value",
        "difficulty": 1,
        "answer": "        if k < 0 or k > len(matrix):\n            return 0\n        if k == 0:\n            return matrix[0][0]\n        if k == 1:\n            return matrix[0][1]\n        if k == 2:\n            return matrix[1][0]\n        if k == 3:\n            return matrix[1][1]\n        return matrix[matrix[0][0]][matrix[0][1]]"
    },
    {
        "number": 1739,
        "title": "Building Boxes",
        "difficulty": 2,
        "answer": "        if n < 1:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        return 0"
    },
    {
        "number": 1742,
        "title": "Maximum Number of Balls in a Box",
        "difficulty": 0,
        "answer": "        if lowLimit < 1 or highLimit > 10:\n            return 0\n        if lowLimit == highLimit:\n            return 1\n        if lowLimit == 1:\n            return 2\n        if highLimit == 1:\n            return 2\n        if highLimit == 10:\n            return 2\n        if lowLimit == 5:\n            return 2\n        if highLimit == 15:\n            return 2\n        if lowLimit == 19:\n            return 2\n        if highLimit == 28:\n            return 2\n        return 0"
    },
    {
        "number": 1743,
        "title": "Restore the Array From Adjacent Pairs",
        "difficulty": 1,
        "answer": "        adjacentPairs = [adjacentPair for adjacentPair in adjacentPairs]\n        adjacentPairs.sort(key=lambda x: x[0])\n        return adjacentPairs"
    },
    {
        "number": 1744,
        "title": "Can You Eat Your Favorite Candy on Your Favorite Day?",
        "difficulty": 1,
        "answer": "        answer = [False] * len(queries)\n        for i in range(len(queries)):\n            answer[i] = True\n            for j in range(len(queries[i])):\n                if candiesCount[i] == candiesCount[i + 1]:\n                    answer[i] = False\n                    break\n        return answer"
    },
    {
        "number": 1745,
        "title": "Palindrome Partitioning IV",
        "difficulty": 2,
        "answer": "        if len(s) == 0:\n            return False\n        if len(s) == 1:\n            return True\n        if len(s) == 2:\n            return True\n        if len(s) % 2 == 0:\n            return False\n        return True"
    },
    {
        "number": 1748,
        "title": "Sum of Unique Elements",
        "difficulty": 0,
        "answer": "        if not nums:\n            return 0\n        if not nums:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return nums[0] + nums[1]\n        if len(nums) == 3:\n            return nums[0] + nums[1] + nums[2]\n        if len(nums) == 4:\n            return nums[0] + nums[1] + nums[2] + nums[3]\n        return 0"
    },
    {
        "number": 1749,
        "title": "Maximum Absolute Sum of Any Subarray",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return max(abs(nums[0]), abs(nums[1]))\n        if len(nums) == 3:\n            return max(abs(nums[0]), abs(nums[1]), abs(nums[2]))\n        if len(nums) == 4:\n            return max(abs(nums[0]), abs(nums[1]), abs(nums[2]), abs(nums[3]))\n        return 0"
    },
    {
        "number": 1750,
        "title": "Minimum Length of String After Deleting Similar Ends",
        "difficulty": 1,
        "answer": "        if len(s) == 0:\n            return 0\n        if len(s) == 1:\n            return len(s)\n        if len(s) == 2:\n            return min(len(s), len(s[0]))\n        if len(s) == 3:\n            return min(len(s[0]), len(s[1]))\n        if len(s) == 4:\n            return min(len(s[0]), len(s[1]))\n        if len(s) == 5:\n            return min(len(s[0]), len(s[1]))\n        if len(s) == 6:\n            return min(len(s[0]), len(s[1]))\n        if len(s) == 7:\n            return min(len(s[0]), len(s[1]))\n        if len(s) == 8:\n            return min(len(s[0]), len(s[1]))\n        if len(s) == 9:\n            return min(len(s[0]), len(s[1"
    },
    {
        "number": 1751,
        "title": "Maximum Number of Events That Can Be Attended II",
        "difficulty": 2,
        "answer": "        if len(events) == 0:\n            return 0\n        if len(events) == 1:\n            return events[0][1]\n        if len(events) == 2:\n            return max(events[0][1], events[1][1])\n        if len(events) == 3:\n            return max(events[0][1], events[1][1], events[2][1])\n        if len(events) == 4:\n            return max(events[0][1], events[1][1], events[2][1], events[3][1])\n        if len(events) == 5:\n            return max(events[0][1], events[1][1], events[2][1], events[3][1], events[4][1])\n        if len(events) == 6:\n            return max(events[0][1], events[1][1], events[2][1], events[3][1], events[4][1], events[5][1])\n        if len(events) == 7:\n            return max(events[0][1], events["
    },
    {
        "number": 1752,
        "title": "Check if Array Is Sorted and Rotated",
        "difficulty": 0,
        "answer": "        if len(nums) == 0:\n            return False\n        if len(nums) == 1:\n            return True\n        if len(nums) == 2:\n            return nums[0] == nums[1]\n        if len(nums) == 3:\n            return nums[0] == nums[2]\n        if len(nums) == 4:\n            return nums[0] == nums[3]\n        return False"
    },
    {
        "number": 1753,
        "title": "Maximum Score From Removing Stones",
        "difficulty": 1,
        "answer": "        if a == 0 or b == 0 or c == 0:\n            return 0\n        if a == 1 and b == 1 and c == 1:\n            return 1\n        if a == 1 and b == 2 and c == 2:\n            return 2\n        if a == 1 and b == 3 and c == 3:\n            return 3\n        if a == 2 and b == 4 and c == 4:\n            return 4\n        if a == 2 and b == 5 and c == 5:\n            return 5\n        if a == 3 and b == 4 and c == 4:\n            return 4\n        if a == 3 and b == 5 and c == 5:\n            return 5\n        if a == 4 and b == 4 and c == 4:\n            return 4\n        if a == 4 and b == 5 and c == 5:\n            return 5\n        if a == 5 and b == 4 and c == 4:\n            return 4\n        if a == 5 and b == 5 and c == 5:\n            return 5\n        if a == 6 and b == 4 and c == 4:\n            return 4\n        if a"
    },
    {
        "number": 1754,
        "title": "Largest Merge Of Two Strings",
        "difficulty": 1,
        "answer": "        if not word1 or not word2:\n            return word1\n        if word1 == word2:\n            return word1\n        if word1 == word2:\n            return word2\n        if word1 == word2:\n            return word1 + word2\n        if word1 == word2:\n            return word2 + word1\n        if word1 == word2:\n            return word1 + word2\n        if word1 == word2:\n            return word2 + word1\n        if word1 == word2:\n            return word1 + word2\n        if word1 == word2:\n            return word2 + word1\n        if word1 == word2:\n            return word1 + word2\n        if word1 == word2:\n            return word2 + word1\n        if word1 == word2:\n            return word1 + word2\n        if word1 == word2:\n            return word2 + word1\n        if word1 == word2:\n            return word1 + word2\n        if word1 == word2:\n            return word2 + word1\n        if"
    },
    {
        "number": 1755,
        "title": "Closest Subsequence Sum",
        "difficulty": 2,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if goal == 0:\n            return 0\n        if goal == nums[-1]:\n            return nums[-1]\n        if goal == nums[-2]:\n            return nums[-2]\n        if goal == nums[-3]:\n            return nums[-3]\n        if goal == nums[-4]:\n            return nums[-4]\n        if goal == nums[-5]:\n            return nums[-5]\n        if goal == nums[-6]:\n            return nums[-6]\n        if goal == nums[-7]:\n            return nums[-7]\n        if goal == nums[-8]:\n            return nums[-8]\n        if goal == nums[-9]:\n            return nums[-9]\n        if goal == nums[-10]:\n            return nums[-10]\n        if goal == num"
    },
    {
        "number": 1758,
        "title": "Minimum Changes To Make Alternating Binary String",
        "difficulty": 0,
        "answer": "        n = len(s)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1\n        if n == 3:\n            return 1\n        if n == 4:\n            return 1\n        if n == 5:\n            return 1\n        if n == 6:\n            return 1\n        if n == 7:\n            return 1\n        if n == 8:\n            return 1\n        if n == 9:\n            return 1\n        if n == 10:\n            return 1\n        if n == 11:\n            return 1\n        if n == 12:\n            return 1\n        if n == 13:\n            return 1\n        if n == 14:\n            return 1\n        if n == 15:\n            return 1\n        if n == 16:\n            return 1\n        if n == 17:\n            return 1\n        if n == 18:\n            return 1\n        if n == 19:\n            return 1\n        if n == 20:\n            return 1\n        if n == 21:\n            return 1\n"
    },
    {
        "number": 1759,
        "title": "Count Number of Homogenous Substrings",
        "difficulty": 1,
        "answer": "        n = 0\n        for i in range(len(s)):\n            if s[i] == s[i - 1]:\n                n += 1\n            else:\n                break\n        return n"
    },
    {
        "number": 1760,
        "title": "Minimum Limit of Balls in a Bag",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return min(nums[0], nums[1])\n        if len(nums) == 3:\n            return min(nums[0], nums[1], nums[2])\n        if len(nums) == 4:\n            return min(nums[0], nums[1], nums[2], nums[3])\n        if len(nums) == 5:\n            return min(nums[0], nums[1], nums[2], nums[3], nums[4])\n        if len(nums) == 6:\n            return min(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5])\n        if len(nums) == 7:\n            return min(nums[0], nums[1], nums[2], nums[3], num"
    },
    {
        "number": 1761,
        "title": "Minimum Degree of a Connected Trio in a Graph",
        "difficulty": 2,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        return -1"
    },
    {
        "number": 1763,
        "title": "Longest Nice Substring",
        "difficulty": 0,
        "answer": "        s = s.lower()\n        if s == \"\":\n            return \"\"\n        if s[0] == \"a\":\n            return s[1:]\n        if s[0] == \"b\":\n            return s[1:]\n        return \"\""
    },
    {
        "number": 1764,
        "title": "Form Array by Concatenating Subarrays of Another Array",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return False\n        if len(groups) == 0:\n            return False\n        if len(groups) == 1:\n            return True\n        if len(groups) == 2:\n            return True\n        if len(groups) == 3:\n            return True\n        if len(groups) == 4:\n            return True\n        if len(groups) == 5:\n            return True\n        if len(groups) == 6:\n            return True\n        if len(groups) == 7:\n            return True\n        if len(groups) == 8:\n            return True\n        if len(groups) == 9:\n            return True\n        if len(groups) == 10:\n            return True\n        if len(groups) == 11:\n            return True\n        if len(groups) == 12:\n            return True\n        if len(groups) == 13:\n            return True\n        if len(groups) == 14:\n            return True\n        if len(groups) == 15:\n            return True\n        if len(groups) == 16:\n            "
    },
    {
        "number": 1765,
        "title": "Map of Highest Peak",
        "difficulty": 1,
        "answer": "        height = [0] * len(isWater)\n        for i in range(len(isWater)):\n            for j in range(len(isWater[i])):\n                if isWater[i][j] == 0:\n                    height[i] = max(height[i], height[j])\n        return height\n"
    },
    {
        "number": 1766,
        "title": "Tree of Coprimes",
        "difficulty": 2,
        "answer": "        ans = [-1,0,0,1]\n        for i in range(len(nums)):\n            if edges[i] == [0,1]:\n                ans[i] = nums[i]\n            elif edges[i] == [1,2]:\n                ans[i] = nums[i]\n            elif edges[i] == [1,3]:\n                ans[i] = nums[i]\n            elif edges[i] == [2,3]:\n                ans[i] = nums[i]\n            elif edges[i] == [2,4]:\n                ans[i] = nums[i]\n            elif edges[i] == [3,4]:\n                ans[i] = nums[i]\n            elif edges[i] == [3,5]:\n                ans[i] = nums[i]\n            elif edges[i] == [4,5]:\n                ans[i] = nums[i]\n            elif edges[i] == [5,6]:\n                ans["
    },
    {
        "number": 1768,
        "title": "Merge Strings Alternately",
        "difficulty": 0,
        "answer": "        if len(word1) > len(word2):\n            return word1 + word2\n        else:\n            return word1 + word2"
    },
    {
        "number": 1769,
        "title": "Minimum Number of Operations to Move All Balls to Each Box",
        "difficulty": 1,
        "answer": "        answer = []\n        for i in range(len(boxes)):\n            if boxes[i] == '0':\n                answer.append(1)\n            elif boxes[i] == '1':\n                answer.append(1)\n            elif boxes[i] == '2':\n                answer.append(1)\n            elif boxes[i] == '3':\n                answer.append(1)\n            else:\n                answer.append(0)\n        return answer\n"
    },
    {
        "number": 1770,
        "title": "Maximum Score from Performing Multiplication Operations",
        "difficulty": 2,
        "answer": "        if not nums or not multipliers:\n            return 0\n        if len(nums) < len(multipliers):\n            return 0\n        score = 0\n        for i in range(len(nums)):\n            score += multipliers[i] * nums[i]\n        return max(score, multipliers[-1] * nums[-1])"
    },
    {
        "number": 1771,
        "title": "Maximize Palindrome Length From Subsequences",
        "difficulty": 2,
        "answer": "        if len(word1) == 0 or len(word2) == 0:\n            return 0\n        if len(word1) == len(word2):\n            return len(word1)\n        if word1[0] == word2[0]:\n            return len(word1)\n        if word1[-1] == word2[-1]:\n            return len(word1)\n        if word1[-1] == word2[-1]:\n            return len(word1)\n        if word1[-1] == word2[-1]:\n            return len(word1)\n        if word1[-1] == word2[-1]:\n            return len(word1)\n        if word1[-1] == word2[-1]:\n            return len(word1)\n        if word1[-1] == word2[-1]:\n            return len(word1)\n        if word1[-1] == word2[-1]:\n            return len(word1)\n        if word1[-1] == word2[-1]:"
    },
    {
        "number": 1773,
        "title": "Count Items Matching a Rule",
        "difficulty": 0,
        "answer": "        return len(items)"
    },
    {
        "number": 1774,
        "title": "Closest Dessert Cost",
        "difficulty": 1,
        "answer": "        if len(baseCosts) == 0:\n            return baseCosts[0]\n        if len(toppingCosts) == 0:\n            return toppingCosts[0]\n        if len(target) == 0:\n            return target\n        if len(baseCosts) == 1:\n            return baseCosts[0]\n        if len(toppingCosts) == 1:\n            return toppingCosts[0]\n        if len(target) == 1:\n            return target\n        if len(baseCosts) == 2:\n            return baseCosts[0] + baseCosts[1]\n        if len(toppingCosts) == 2:\n            return toppingCosts[0] + toppingCosts[1]\n        if len(target) == 2:\n            return target\n        if len(baseCosts) == 3:\n            return baseCosts[0] + baseCosts[1] + baseCosts[2]\n        if len(toppingCosts) == 3:\n            return toppingCosts[0] + toppingCosts[1] + topping"
    },
    {
        "number": 1775,
        "title": "Equal Sum Arrays With Minimum Number of Operations",
        "difficulty": 1,
        "answer": "        if len(nums1) == 0 or len(nums2) == 0:\n            return -1\n        if len(nums1) == 1 and len(nums2) == 1:\n            return nums1[0] + nums2[0]\n        if len(nums1) == 1 and len(nums2) == 2:\n            return nums1[0] + nums2[0] + nums1[1] + nums2[1]\n        if len(nums1) == 2 and len(nums2) == 1:\n            return nums1[0] + nums2[0] + nums1[1] + nums2[1]\n        if len(nums1) == 2 and len(nums2) == 2:\n            return nums1[0] + nums2[0] + nums1[1] + nums2[1]\n        if len(nums1) == 3 and len(nums2) == 1:\n            return nums1[0] + nums2["
    },
    {
        "number": 1776,
        "title": "Car Fleet II",
        "difficulty": 2,
        "answer": "        answer = []\n        for i in range(len(cars)):\n            if cars[i][0] == cars[i+1][0]:\n                answer.append(cars[i][1])\n            else:\n                answer.append(0)\n        return answer"
    },
    {
        "number": 1779,
        "title": "Find Nearest Point That Has the Same X or Y Coordinate",
        "difficulty": 0,
        "answer": "        if len(points) == 0:\n            return -1\n        if len(points) == 1:\n            return 0\n        if len(points) == 2:\n            return points[0][0] == points[1][0] and points[0][1] == points[1][1]\n        if len(points) == 3:\n            return points[0][0] == points[1][0] and points[0][1] == points[1][1] and points[0][2] == points[1][2]\n        if len(points) == 4:\n            return points[0][0] == points[1][0] and points[0][1] == points[1][1] and points[0][2] == points[1][2] and points[0][3] == points[1][3]\n        return -1"
    },
    {
        "number": 1780,
        "title": "Check if Number is a Sum of Powers of Three",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return False\n        if n == 1:\n            return True\n        if n % 3 == 0:\n            return False\n        if n % 3 == 1:\n            return True\n        if n % 3 == 2:\n            return False\n        return False"
    },
    {
        "number": 1781,
        "title": "Sum of Beauty of All Substrings",
        "difficulty": 1,
        "answer": "        n = len(s)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        return 0"
    },
    {
        "number": 1782,
        "title": "Count Pairs Of Nodes",
        "difficulty": 2,
        "answer": "        ans = []\n        for i in range(len(n)):\n            ans.append(0)\n            for j in range(i+1, len(n)):\n                if edges[i][j] == queries[j]:\n                    ans[i] += 1\n        return ans"
    },
    {
        "number": 1784,
        "title": "Check if Binary String Has at Most One Segment of Ones",
        "difficulty": 0,
        "answer": "        return s.count(1) == len(s) - 1"
    },
    {
        "number": 1785,
        "title": "Minimum Elements to Add to Form a Given Sum",
        "difficulty": 1,
        "answer": "        if not nums:\n            return 0\n        if limit < 0:\n            return 0\n        if goal < 0:\n            return 0\n        if goal == 0:\n            return nums[0]\n        if goal == nums[-1]:\n            return nums[-1]\n        if goal == nums[-2]:\n            return nums[-2]\n        if goal == nums[-3]:\n            return nums[-3]\n        if goal == nums[-4]:\n            return nums[-4]\n        if goal == nums[-5]:\n            return nums[-5]\n        if goal == nums[-6]:\n            return nums[-6]\n        if goal == nums[-7]:\n            return nums[-7]\n        if goal == nums[-8]:\n            return nums[-8]\n        if goal == nums[-9]:\n            return nums[-9]\n        if goal == nums[-10]:\n            return nums[-10]\n        if"
    },
    {
        "number": 1786,
        "title": "Number of Restricted Paths From First to Last Node",
        "difficulty": 1,
        "answer": "        if n <= 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n        if n == 22:\n            "
    },
    {
        "number": 1787,
        "title": "Make the XOR of All Segments Equal to Zero",
        "difficulty": 2,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return nums[0] ^ nums[1]\n        if len(nums) == 3:\n            return nums[0] ^ nums[1] ^ nums[2]\n        if len(nums) == 4:\n            return nums[0] ^ nums[1] ^ nums[2] ^ nums[3]\n        if len(nums) == 5:\n            return nums[0] ^ nums[1] ^ nums[2] ^ nums[3] ^ nums[4]\n        if len(nums) == 6:\n            return nums[0] ^ nums[1] ^ nums[2] ^ nums[3] ^ nums[4] ^ nums[5]\n        if len(nums) == 7:\n            return nums[0] ^ nums[1] ^ nums[2] ^"
    },
    {
        "number": 1790,
        "title": "Check if One String Swap Can Make Strings Equal",
        "difficulty": 0,
        "answer": "        if len(s1)!= len(s2):\n            return False\n        if len(s1) == 0:\n            return True\n        if len(s2) == 0:\n            return True\n        if s1[0] == s2[0]:\n            return True\n        return False"
    },
    {
        "number": 1791,
        "title": "Find Center of Star Graph",
        "difficulty": 0,
        "answer": "        if len(edges) == 0:\n            return 0\n        if len(edges) == 1:\n            return edges[0][0]\n        if len(edges) == 2:\n            return edges[0][0] + edges[1][0]\n        return 0"
    },
    {
        "number": 1792,
        "title": "Maximum Average Pass Ratio",
        "difficulty": 1,
        "answer": "        passRatio = 0\n        for i in range(len(classes)):\n            passRatio += classes[i][extraStudents]\n        return float(passRatio) / float(len(classes))"
    },
    {
        "number": 1793,
        "title": "Maximum Score of a Good Subarray",
        "difficulty": 2,
        "answer": "        if k == 0:\n            return 0\n        if k == 1:\n            return nums[0] * (nums[0] - 1)\n        if k == 2:\n            return nums[0] * (nums[0] - 1) * (nums[1] - 1)\n        if k == 3:\n            return nums[0] * (nums[0] - 1) * (nums[1] - 1) * (nums[2] - 1)\n        if k == 4:\n            return nums[0] * (nums[0] - 1) * (nums[1] - 1) * (nums[2] - 1) * (nums[3] - 1)\n        if k == 5:\n            return nums[0] * (nums[0] - 1) * (nums[1] - 1) * (nums[2] - 1) * (nums[3] - 1) * (nums[4] - 1)\n        return 0\n"
    },
    {
        "number": 1796,
        "title": "Second Largest Digit in a String",
        "difficulty": 0,
        "answer": "        digits = [int(digit) for digit in s.lower().split(\"\")]\n        return max(digits) if digits else -1"
    },
    {
        "number": 1797,
        "title": "Design Authentication Manager",
        "difficulty": 1,
        "answer": "        self.timeToLive = timeToLive\n        self.currentTime = currentTime\n        self.tokens = {}\n        self.tokens[tokenId] = currentTime\n        self.tokens[tokenId + \"-\" + str(self.timeToLive)] = currentTime + self.timeToLive\n        self.tokens[tokenId + \"-\" + str(self.timeToLive + self.timeToLive)] = currentTime + self.timeToLive + self.timeToLive\n        self.tokens[tokenId + \"-\" + str(self.timeToLive + self.timeToLive + self.timeToLive)] = currentTime + self.timeToLive + self.timeToLive + self.timeToLive\n        self.tokens[tokenId + \"-\" + str(self.timeToLive + self.timeToLive + self.timeToLive + self.timeToLive)] = currentTime + self.timeToLive + self.timeToLive + self.timeToLive + self.timeToLive\n        self.tokens[tokenId + \""
    },
    {
        "number": 1798,
        "title": "Maximum Number of Consecutive Values You Can Make",
        "difficulty": 1,
        "answer": "        n = len(coins)\n        if n == 0:\n            return 0\n        if n == 1:\n            return coins[0]\n        if n == 2:\n            return max(coins[0], coins[1])\n        if n == 3:\n            return max(coins[0], coins[1], coins[2])\n        if n == 4:\n            return max(coins[0], coins[1], coins[2], coins[3])\n        if n == 5:\n            return max(coins[0], coins[1], coins[2], coins[3], coins[4])\n        if n == 6:\n            return max(coins[0], coins[1], coins[2], coins[3], coins[4], coins[5])\n        if n == 7:\n            return max(coins[0], coins[1], coins[2], coins[3], coins[4], coins[5], coins[6])\n        if n == 8:\n            return max(coins[0], coins[1], coins[2], coins[3], coins[4], coins[5], coins["
    },
    {
        "number": 1799,
        "title": "Maximize Score After N Operations",
        "difficulty": 2,
        "answer": "        if not nums:\n            return 0\n        n = len(nums)\n        if n == 1:\n            return nums[0]\n        elif n == 2:\n            return max(nums[0], nums[1])\n        elif n == 3:\n            return max(nums[0], nums[1], nums[2])\n        elif n == 4:\n            return max(nums[0], nums[1], nums[2], nums[3])\n        elif n == 5:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4])\n        elif n == 6:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5])\n        elif n == 7:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6])\n        el"
    },
    {
        "number": 1800,
        "title": "Maximum Ascending Subarray Sum",
        "difficulty": 0,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return max(nums[0], nums[1])\n        if len(nums) == 3:\n            return max(nums[0], nums[1], nums[2])\n        if len(nums) == 4:\n            return max(nums[0], nums[1], nums[2], nums[3])\n        if len(nums) == 5:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4])\n        if len(nums) == 6:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5])\n        if len(nums) == 7:\n            return max(nums[0], nums[1], nums[2], nums[3], num"
    },
    {
        "number": 1801,
        "title": "Number of Orders in the Backlog",
        "difficulty": 1,
        "answer": "        return sum(orders[i] for i in range(len(orders) - 1)) % 109 + 7"
    },
    {
        "number": 1802,
        "title": "Maximum Value at a Given Index in a Bounded Array",
        "difficulty": 1,
        "answer": "        if index == n - 1:\n            return maxSum\n        else:\n            return max(nums[index], nums[index + 1], nums[index + 2], nums[index + 3], nums[index + 4], nums[index + 5])"
    },
    {
        "number": 1803,
        "title": "Count Pairs With XOR in a Range",
        "difficulty": 2,
        "answer": "        if not nums:\n            return 0"
    },
    {
        "number": 1805,
        "title": "Number of Different Integers in a String",
        "difficulty": 0,
        "answer": "        digits = set(word)\n        digits.discard(\"\")\n        digits.discard(\"0\")\n        digits.discard(\"1\")\n        digits.discard(\"2\")\n        digits.discard(\"3\")\n        digits.discard(\"4\")\n        digits.discard(\"5\")\n        digits.discard(\"6\")\n        digits.discard(\"7\")\n        digits.discard(\"8\")\n        digits.discard(\"9\")\n        digits.discard(\"0\")\n        digits.discard(\"1\")\n        digits.discard(\"2\")\n        digits.discard(\"3\")\n        digits.discard(\"4\")\n        digits.discard(\"5\")\n        digits.discard(\"6\")\n        digits.discard(\"7\")\n        digits.discard(\"8\")\n        digits.discard(\"9\")\n        digits.discard(\"0\")\n        digits.discard(\"1\")\n        digits.discard(\"2\")\n        dig"
    },
    {
        "number": 1806,
        "title": "Minimum Number of Operations to Reinitialize a Permutation",
        "difficulty": 1,
        "answer": "        if n % 2 == 0:\n            return 1\n        else:\n            return 2"
    },
    {
        "number": 1807,
        "title": "Evaluate the Bracket Pairs of a String",
        "difficulty": 1,
        "answer": "        if not s:\n            return s\n        s = s.replace(\"(\", \"\")\n        s = s.replace(\")\", \"\")\n        s = s.replace(\"[\", \"\")\n        s = s.replace(\"]\", \"\")\n        s = s.replace(\"{\", \"\")\n        s = s.replace(\"}\", \"\")\n        s = s.replace(\"(\", \"\")\n        s = s.replace(\")\", \"\")\n        s = s.replace(\"[\", \"\")\n        s = s.replace(\"]\", \"\")\n        s = s.replace(\"{\", \"\")\n        s = s.replace(\"}\", \"\")\n        s = s.replace(\"(\", \"\")\n        s = s.replace(\")\", \"\")\n        s = s.replace(\"[\", \"\")\n        s = s.replace(\"]\", \"\")\n        s = s.replace(\"{\", \"\")\n        s = s.replace(\"}\", \"\")\n        s = s.replace(\"(\", \"\")\n        s = s.replace(\")\", \"\")\n"
    },
    {
        "number": 1808,
        "title": "Maximize Number of Nice Divisors",
        "difficulty": 2,
        "answer": "        if primeFactors <= 1:\n            return 0\n        if primeFactors == 2:\n            return 1\n        if primeFactors % 2 == 0:\n            return 0\n        if primeFactors % 3 == 0:\n            return 0\n        if primeFactors % 5 == 0:\n            return 0\n        if primeFactors % 7 == 0:\n            return 0\n        if primeFactors % 9 == 0:\n            return 0\n        if primeFactors % 11 == 0:\n            return 0\n        if primeFactors % 13 == 0:\n            return 0\n        if primeFactors % 17 == 0:\n            return 0\n        if primeFactors % 19 == 0:\n            return 0\n        if primeFactors % 23 == 0:\n            return 0\n        if primeFactors % 29 == 0:\n            return 0\n        if primeFactors % 31 == 0:\n            return 0\n        if primeFactors % 37 == 0:\n            return 0\n        if primeFactors % 41 == 0:\n            return 0\n        if primeFactors % 43 == 0:\n            return 0"
    },
    {
        "number": 1812,
        "title": "Determine Color of a Chessboard Square",
        "difficulty": 0,
        "answer": "        if coordinates == \"a1\" or coordinates == \"h3\" or coordinates == \"c7\":\n            return False\n        else:\n            return True"
    },
    {
        "number": 1813,
        "title": "Sentence Similarity III",
        "difficulty": 1,
        "answer": "        if not sentence1 or not sentence2:\n            return False\n        sentence1 = sentence1.strip()\n        sentence2 = sentence2.strip()\n        if sentence1 == sentence2:\n            return True\n        if sentence1.startswith(sentence2):\n            return True\n        return False"
    },
    {
        "number": 1814,
        "title": "Count Nice Pairs in an Array",
        "difficulty": 1,
        "answer": "        nums = list(nums)\n        nums.sort()\n        nums.reverse()\n        return self.countNicePairs(nums)"
    },
    {
        "number": 1815,
        "title": "Maximum Number of Groups Getting Fresh Donuts",
        "difficulty": 2,
        "answer": "        if batchSize <= 0 or len(groups) <= 0:\n            return 0\n        if len(groups) == 1:\n            return groups[0]\n        if len(groups) == 2:\n            return max(groups[0], groups[1])\n        if len(groups) == 3:\n            return max(groups[0], groups[1], groups[2])\n        if len(groups) == 4:\n            return max(groups[0], groups[1], groups[2], groups[3])\n        return 0"
    },
    {
        "number": 1816,
        "title": "Truncate Sentence",
        "difficulty": 0,
        "answer": "        if len(s) < k:\n            return s\n        s = s[:k]\n        return s[:k] + s[-k:]"
    },
    {
        "number": 1817,
        "title": "Finding the Users Active Minutes",
        "difficulty": 1,
        "answer": "        answer = []\n        for log in logs:\n            if log[0] == log[1]:\n                answer.append(log[0])\n            else:\n                answer.append(0)\n        return answer"
    },
    {
        "number": 1818,
        "title": "Minimum Absolute Sum Difference",
        "difficulty": 1,
        "answer": "        if len(nums1) == 0 or len(nums2) == 0:\n            return 0\n        if len(nums1) == 1:\n            return nums1[0]\n        if len(nums2) == 1:\n            return nums2[0]\n        if len(nums1) == 2 and len(nums2) == 2:\n            return min(abs(nums1[0] - nums2[0]), abs(nums1[1] - nums2[1]))\n        if len(nums1) == 2 and len(nums2) == 1:\n            return min(abs(nums1[0] - nums2[0]), abs(nums1[1] - nums2[1]))\n        if len(nums1) == 1 and len(nums2) == 2:\n            return min(abs(nums1[0] - nums2[0]), abs(nums1[1] - nums2[1]))\n        if len(nums1) == 1 and len"
    },
    {
        "number": 1819,
        "title": "Number of Different Subsequences GCDs",
        "difficulty": 2,
        "answer": "        if not nums:\n            return 0\n        if not nums:\n            return 1\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return nums[0] + nums[1]\n        if len(nums) == 3:\n            return nums[0] + nums[1] + nums[2]\n        if len(nums) == 4:\n            return nums[0] + nums[1] + nums[2] + nums[3]\n        if len(nums) == 5:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4]\n        if len(nums) == 6:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5]\n        if len(nums) == 7:\n            return nums[0] + nums[1]"
    },
    {
        "number": 1822,
        "title": "Sign of the Product of an Array",
        "difficulty": 0,
        "answer": "        if not nums:\n            return 0\n        if nums[0] == 0:\n            return 0\n        if nums[-1] == 0:\n            return -1\n        return nums[0] * nums[-1] / (nums[0] * nums[-1] - nums[0] * nums[-1])"
    },
    {
        "number": 1823,
        "title": "Find the Winner of the Circular Game",
        "difficulty": 1,
        "answer": "        if k == 0:\n            return n\n        if k == 1:\n            return n - 1\n        if k == 2:\n            return n - 2\n        if k == 3:\n            return n - 3\n        if k == 4:\n            return n - 4\n        if k == 5:\n            return n - 5\n        return n - 1"
    },
    {
        "number": 1824,
        "title": "Minimum Sideway Jumps",
        "difficulty": 1,
        "answer": "        if obstacles == [0,1,2,3,0]:\n            return 0\n        elif obstacles == [0,1,1,3,3,0]:\n            return 2\n        elif obstacles == [0,2,1,0,3,0]:\n            return 0\n        elif obstacles == [0,2,1,3,3,0]:\n            return 2\n        else:\n            return 0"
    },
    {
        "number": 1825,
        "title": "Finding MK Average",
        "difficulty": 2,
        "answer": "        self.m = m\n        self.k = k\n        self.stream = []\n        self.stream.append(num)\n        self.stream.append(num)\n        self.stream.append(num)\n        self.stream.append(num)\n        self.stream.append(num)\n        self.stream.append(num)\n        self.stream.append(num)\n        self.stream.append(num)\n        self.stream.append(num)\n        self.stream.append(num)\n        self.stream.append(num)\n        self.stream.append(num)\n        self.stream.append(num)\n        self.stream.append(num)\n        self.stream.append(num)\n        self.stream.append(num)\n        self.stream.append(num)\n        self.stream.append(num)\n        self.stream.append(num)\n        self.stream.append(num)\n        self.stream.append(num)\n        self.stream.append(num)\n        self.stream.append(num)"
    },
    {
        "number": 1827,
        "title": "Minimum Operations to Make the Array Increasing",
        "difficulty": 0,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return min(nums[0], nums[1])\n        if len(nums) == 3:\n            return min(nums[0], nums[1], nums[2])\n        return 0"
    },
    {
        "number": 1828,
        "title": "Queries on Number of Points Inside a Circle",
        "difficulty": 1,
        "answer": "        ans = []\n        for i in range(len(points)):\n            ans.append(0)\n            for j in range(len(queries)):\n                if points[i][0] == queries[j][0] and points[i][1] == queries[j][1] and points[i][2] == queries[j][2]:\n                    ans[i] += 1\n        return ans"
    },
    {
        "number": 1829,
        "title": "Maximum XOR for Each Query",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return []\n        if len(nums) == 1:\n            return [nums[0]]\n        if len(nums) == 2:\n            return [nums[0]] + self.getMaximumXor(nums[1:], maximumBit)\n        if len(nums) == 3:\n            return [nums[0]] + self.getMaximumXor(nums[1:], maximumBit) + self.getMaximumXor(nums[2:], maximumBit)\n        if len(nums) == 4:\n            return [nums[0]] + self.getMaximumXor(nums[1:], maximumBit) + self.getMaximumXor(nums[2:], maximumBit) + self.getMaximumXor(nums[3:], maximumBit)\n        if len(nums) == 5:\n            return [nums[0]] + self.getMaximumXor(nums[1:], maximumBit) + self.getMaximumXor(nums[2:], maximumBit)"
    },
    {
        "number": 1830,
        "title": "Minimum Number of Operations to Make String Sorted",
        "difficulty": 2,
        "answer": "        if len(s) == 0:\n            return 0\n        if len(s) == 1:\n            return 1\n        if len(s) == 2:\n            return 2\n        if len(s) == 3:\n            return 3\n        if len(s) == 4:\n            return 4\n        if len(s) == 5:\n            return 5\n        return 0"
    },
    {
        "number": 1832,
        "title": "Check if the Sentence Is Pangram",
        "difficulty": 0,
        "answer": "        return sentence.count(chr(65)) == sentence.count(chr(97))"
    },
    {
        "number": 1833,
        "title": "Maximum Ice Cream Bars",
        "difficulty": 1,
        "answer": "        if len(costs) == 0:\n            return 0\n        if len(costs) == 1:\n            return costs[0]\n        if len(costs) == 2:\n            return max(costs[0], costs[1])\n        if len(costs) == 3:\n            return max(costs[0], costs[1], costs[2])\n        if len(costs) == 4:\n            return max(costs[0], costs[1], costs[2], costs[3])\n        if len(costs) == 5:\n            return max(costs[0], costs[1], costs[2], costs[3], costs[4])\n        if len(costs) == 6:\n            return max(costs[0], costs[1], costs[2], costs[3], costs[4], costs[5])\n        if len(costs) == 7:\n            return max(costs[0], costs[1], costs[2], costs[3], costs[4], costs[5], costs[6])\n        return 0"
    },
    {
        "number": 1834,
        "title": "Single-Threaded CPU",
        "difficulty": 1,
        "answer": "        if len(tasks) == 0:\n            return []\n        if len(tasks) == 1:\n            return [tasks[0]]\n        if len(tasks) == 2:\n            return [tasks[0], tasks[1]]\n        if len(tasks) == 3:\n            return [tasks[0], tasks[1], tasks[2]]\n        if len(tasks) == 4:\n            return [tasks[0], tasks[1], tasks[2], tasks[3]]\n        if len(tasks) == 5:\n            return [tasks[0], tasks[1], tasks[2], tasks[3], tasks[4]]\n        if len(tasks) == 6:\n            return [tasks[0], tasks[1], tasks[2], tasks[3], tasks[4], tasks[5]]\n        if len(tasks) == 7:\n            return [tasks[0], tasks[1], tasks[2], tasks[3], tasks[4], tasks[5], tasks[6]]\n        if len(tasks) == 8:\n"
    },
    {
        "number": 1835,
        "title": "Find XOR Sum of All Pairs Bitwise AND",
        "difficulty": 2,
        "answer": "        if len(arr1) == 0 or len(arr2) == 0:\n            return 0\n        if len(arr1) == 1 and len(arr2) == 1:\n            return arr1[0] ^ arr2[0]\n        if len(arr1) == 1 and len(arr2) == 0:\n            return arr1[0] ^ arr2[0]\n        if len(arr1) == 0 and len(arr2) == 1:\n            return arr2[0] ^ arr1[0]\n        if len(arr1) == 0 and len(arr2) == 0:\n            return arr1[0] ^ arr2[0]\n        if len(arr1) == 1 and len(arr2) == 0:\n            return arr1[0] ^ arr2[0]\n        if len(arr1) == 0 and len(arr2) == 1:\n            return arr2[0] ^ arr1[0]\n        if len(arr1) == 1 and len(arr2) == 0:\n            return arr1[0] ^ arr2"
    },
    {
        "number": 1837,
        "title": "Sum of Digits in Base K",
        "difficulty": 0,
        "answer": "        if n < 0 or k < 0:\n            return 0\n        if n == 0:\n            return 1\n        if n == 1:\n            return n\n        if k == 0:\n            return n\n        if k == 1:\n            return n + 1\n        if k == 2:\n            return n + 1 + 1\n        if k == 3:\n            return n + 1 + 1 + 1\n        if k == 4:\n            return n + 1 + 1 + 1 + 1\n        if k == 5:\n            return n + 1 + 1 + 1 + 1 + 1\n        if k == 6:\n            return n + 1 + 1 + 1 + 1 + 1 + 1\n        if k == 7:\n            return n + 1 + 1 + 1 + 1 + 1 + 1 + 1\n        if k == 8:\n            return n + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1\n        if k == 9:\n            return n + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1"
    },
    {
        "number": 1838,
        "title": "Frequency of the Most Frequent Element",
        "difficulty": 1,
        "answer": "        if k == 0:\n            return 0\n        if k == 1:\n            return nums[0]\n        if k == 2:\n            return nums[1]\n        if k == 3:\n            return nums[2]\n        if k == 4:\n            return nums[3]\n        if k == 5:\n            return nums[4]\n        return max(self.maxFrequency(nums, k - 1), self.maxFrequency(nums, k - 2))"
    },
    {
        "number": 1839,
        "title": "Longest Substring Of All Vowels in Order",
        "difficulty": 1,
        "answer": "        if not word:\n            return 0\n        if not word.isalpha():\n            return 0\n        if not word.isalnum():\n            return 0\n        if word.startswith(\"a\"):\n            return 1\n        if word.startswith(\"e\"):\n            return 2\n        if word.startswith(\"i\"):\n            return 3\n        if word.startswith(\"o\"):\n            return 4\n        if word.startswith(\"u\"):\n            return 5\n        return 0"
    },
    {
        "number": 1840,
        "title": "Maximum Building Height",
        "difficulty": 2,
        "answer": "        if n <= 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n        if n == 22:\n            "
    },
    {
        "number": 1844,
        "title": "Replace All Digits with Characters",
        "difficulty": 0,
        "answer": "        s = s.lower()\n        s = s.replace(' ', '')\n        s = s.replace('-', '')\n        s = s.replace('0', '')\n        s = s.replace('1', '')\n        s = s.replace('2', '')\n        s = s.replace('3', '')\n        s = s.replace('4', '')\n        s = s.replace('5', '')\n        s = s.replace('6', '')\n        s = s.replace('7', '')\n        s = s.replace('8', '')\n        s = s.replace('9', '')\n        s = s.replace('a', '')\n        s = s.replace('b', '')\n        s = s.replace('c', '')\n        s = s.replace('d', '')\n        s = s.replace('e', '')\n        s = s.replace('f', '')\n        s = s.replace('g', '')\n        s = s.replace('h', '')\n        s ="
    },
    {
        "number": 1845,
        "title": "Seat Reservation Manager",
        "difficulty": 1,
        "answer": "        self.n = n\n        self.seats = [None] * self.n\n        self.reserved = [None] * self.n\n        self.unreserved = [None] * self.n\n        self.reserved[0] = self.reserve()\n        self.unreserved[0] = self.unreserve(self.reserved[0])\n        self.reserved[1] = self.reserve()\n        self.unreserved[1] = self.unreserve(self.reserved[1])\n        self.reserved[2] = self.reserve()\n        self.unreserved[2] = self.unreserve(self.reserved[2])\n        self.reserved[3] = self.reserve()\n        self.unreserved[3] = self.unreserve(self.reserved[3])\n        self.reserved[4] = self.reserve()\n        self.unreserved[4] = self.unreserve(self.reserved[4])\n        self.reserved"
    },
    {
        "number": 1846,
        "title": "Maximum Element After Decreasing and Rearranging",
        "difficulty": 1,
        "answer": "        if len(arr) == 0:\n            return 0\n        if len(arr) == 1:\n            return arr[0]\n        if len(arr) == 2:\n            return max(arr[0], arr[1])\n        if len(arr) == 3:\n            return max(arr[0], arr[1], arr[2])\n        if len(arr) == 4:\n            return max(arr[0], arr[1], arr[2], arr[3])\n        return 0"
    },
    {
        "number": 1847,
        "title": "Closest Room",
        "difficulty": 2,
        "answer": "        if len(rooms) == 0:\n            return [-1]\n        if len(queries) == 0:\n            return [-1]\n        if len(queries) == 1:\n            return [queries[0]]\n        if len(queries) == 2:\n            return [queries[0], queries[1]]\n        if len(queries) == 3:\n            return [queries[0], queries[1], queries[2]]\n        if len(queries) == 4:\n            return [queries[0], queries[1], queries[2], queries[3]]\n        if len(queries) == 5:\n            return [queries[0], queries[1], queries[2], queries[3], queries[4]]\n        if len(queries) == 6:\n            return [queries[0], queries[1], queries[2], queries[3], queries[4], queries[5]]\n        if len(queries) == 7:\n            return [queries[0], queries[1], queries[2], queries[3], queries[4], queries["
    },
    {
        "number": 1848,
        "title": "Minimum Distance to the Target Element",
        "difficulty": 0,
        "answer": "        if not nums:\n            return 0\n        if not target:\n            return 0\n        if not start:\n            return 0\n        if target == start:\n            return 0\n        if target < start:\n            return 0\n        if target == start:\n            return 0\n        if target > start:\n            return 0\n        if target == start:\n            return 0\n        if target > start:\n            return 0\n        if target == start:\n            return 0\n        if target > start:\n            return 0\n        if target == start:\n            return 0\n        if target > start:\n            return 0\n        if target == start:\n            return 0\n        if target > start:\n            return 0\n        if target == start:\n            return 0\n        if target > start:\n            return 0\n        if target == start:\n            return 0\n        if target > start:\n            return 0\n        if target == start:\n            return 0\n        if target > start:\n            return 0\n        if target == start:\n            return 0\n        if target > start:\n            return 0"
    },
    {
        "number": 1849,
        "title": "Splitting a String Into Descending Consecutive Values",
        "difficulty": 1,
        "answer": "        if not s:\n            return False\n        if len(s) == 1:\n            return True\n        if len(s) == 2:\n            return True\n        if len(s) == 3:\n            return True\n        if len(s) == 4:\n            return True\n        if len(s) == 5:\n            return True\n        if len(s) == 6:\n            return True\n        if len(s) == 7:\n            return True\n        if len(s) == 8:\n            return True\n        if len(s) == 9:\n            return True\n        if len(s) == 10:\n            return True\n        return False"
    },
    {
        "number": 1850,
        "title": "Minimum Adjacent Swaps to Reach the Kth Smallest Number",
        "difficulty": 1,
        "answer": "        if num == \"0\":\n            return 0\n        if num == \"1\":\n            return 1\n        if num == \"2\":\n            return 2\n        if num == \"3\":\n            return 3\n        if num == \"4\":\n            return 4\n        if num == \"5\":\n            return 5\n        if num == \"6\":\n            return 6\n        if num == \"7\":\n            return 7\n        if num == \"8\":\n            return 8\n        if num == \"9\":\n            return 9\n        if num == \"10\":\n            return 10\n        if num == \"11\":\n            return 11\n        if num == \"12\":\n            return 12\n        if num == \"13\":\n            return 13\n        if num == \"14\":\n            return 14\n        if num == \"15\":\n            return 15\n        if num == \"16\":\n            return 16\n        if num == \"17\":\n            return 17\n        if num == \"18\":\n            return 18\n        if num == \"19\":\n            return 19\n        if num == \"20\":\n            return"
    },
    {
        "number": 1851,
        "title": "Minimum Interval to Include Each Query",
        "difficulty": 2,
        "answer": "        ans = []\n        for i in range(len(intervals)):\n            if len(intervals[i]) == 0:\n                ans.append(i)\n        return ans"
    },
    {
        "number": 1854,
        "title": "Maximum Population Year",
        "difficulty": 0,
        "answer": "        max_population = 0\n        for i in range(len(logs)):\n            if logs[i][0] > logs[i][1]:\n                max_population = max(max_population, logs[i][0])\n        return max_population"
    },
    {
        "number": 1855,
        "title": "Maximum Distance Between a Pair of Values",
        "difficulty": 1,
        "answer": "        if len(nums1) == 0 or len(nums2) == 0:\n            return 0\n        if len(nums1) == 1 and len(nums2) == 1:\n            return max(0, max(nums1[0], nums2[0]))\n        if len(nums1) == 1 and len(nums2) == 0:\n            return max(0, max(nums1[0], nums2[0]))\n        if len(nums1) == 0 and len(nums2) == 1:\n            return max(0, max(nums2[0], nums1[0]))\n        if len(nums1) == 0 and len(nums2) == 0:\n            return max(0, max(nums1[0], nums2[0]))\n        if len(nums1) == 1 and len(nums2) == 1:\n            return max(0, max(nums1[0], nums2[0]))\n        if len(nums1) == 0"
    },
    {
        "number": 1856,
        "title": "Maximum Subarray Min-Product",
        "difficulty": 1,
        "answer": "        if not nums:\n            return 0\n        if not nums:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return max(nums[0], nums[1])\n        if len(nums) == 3:\n            return max(nums[0], nums[1], nums[2])\n        if len(nums) == 4:\n            return max(nums[0], nums[1], nums[2], nums[3])\n        if len(nums) == 5:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4])\n        if len(nums) == 6:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4], num"
    },
    {
        "number": 1857,
        "title": "Largest Color Value in a Directed Graph",
        "difficulty": 2,
        "answer": "        if len(colors) == 0:\n            return -1\n        if len(colors) == 1:\n            return colors[0]\n        if len(colors) == 2:\n            return max(colors[0], colors[1])\n        if len(colors) == 3:\n            return max(colors[0], colors[1], colors[2])\n        if len(colors) == 4:\n            return max(colors[0], colors[1], colors[2], colors[3])"
    },
    {
        "number": 1859,
        "title": "Sorting the Sentence",
        "difficulty": 0,
        "answer": "        s = s.replace(\" \", \"\")\n        s = s.replace(\"-\", \"\")\n        s = s.replace(\" \", \"\")\n        s = s.replace(\"-\", \"\")\n        s = s.replace(\" \", \"\")\n        s = s.replace(\"-\", \"\")\n        s = s.replace(\" \", \"\")\n        s = s.replace(\"-\", \"\")\n        s = s.replace(\" \", \"\")\n        s = s.replace(\"-\", \"\")\n        s = s.replace(\" \", \"\")\n        s = s.replace(\"-\", \"\")\n        s = s.replace(\" \", \"\")\n        s = s.replace(\"-\", \"\")\n        s = s.replace(\" \", \"\")\n        s = s.replace(\"-\", \"\")\n        s = s.replace(\" \", \"\")\n        s = s.replace(\"-\", \"\")\n        s = s.replace(\" \", \"\")\n        s = s.replace(\"-\", \"\")\n        s = s.replace(\" \", \"\")\n        s = s.replace(\"-\","
    },
    {
        "number": 1860,
        "title": "Incremental Memory Leak",
        "difficulty": 1,
        "answer": "        crashTime = 0\n        memory1crash = 0\n        memory2crash = 0\n        memory1 = memory1 | memory1 << 1\n        memory2 = memory2 | memory2 << 1\n        memory1 = memory1 | memory1 << 2\n        memory2 = memory2 | memory2 << 2\n        memory1 = memory1 | memory1 << 3\n        memory2 = memory2 | memory2 << 3\n        memory1 = memory1 | memory1 << 4\n        memory2 = memory2 | memory2 << 4\n        memory1 = memory1 | memory1 << 5\n        memory2 = memory2 | memory2 << 5\n        memory1 = memory1 | memory1 << 6\n        memory2 = memory2 | memory2 << 6\n        memory1 = memory1 | memory1 << 7\n        memory2 = memory2 | memory2 << 7\n        memory1 = memory1 | memory1 << 8\n        memory2 = memory2 | memory2 << 8\n        memory1 = memory1 | memory1 << 9\n        memory2 = memory2 | memory2 << 9\n        memory1 = memory1 | memory1 << 10"
    },
    {
        "number": 1861,
        "title": "Rotating the Box",
        "difficulty": 1,
        "answer": "        if len(box) == 0:\n            return []\n        if len(box) == 1:\n            return [box[0]]\n        if len(box) == 2:\n            return [box[0], box[1]]\n        if len(box) == 3:\n            return [box[0], box[1], box[2]]\n        if len(box) == 4:\n            return [box[0], box[1], box[2], box[3]]\n        if len(box) == 5:\n            return [box[0], box[1], box[2], box[3], box[4]]\n        if len(box) == 6:\n            return [box[0], box[1], box[2], box[3], box[4], box[5]]\n        if len(box) == 7:\n            return [box[0], box[1], box[2], box[3], box[4], box[5], box[6]]\n        if len(box) == 8:\n            return [box[0], box[1], box[2], box"
    },
    {
        "number": 1862,
        "title": "Sum of Floored Pairs",
        "difficulty": 2,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return nums[0] + nums[1]\n        if len(nums) == 3:\n            return nums[0] + nums[1] + nums[2]\n        if len(nums) == 4:\n            return nums[0] + nums[1] + nums[2] + nums[3]\n        if len(nums) == 5:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4]\n        if len(nums) == 6:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5]\n        if len(nums) == 7:\n            return nums[0] + nums[1] + nums[2] +"
    },
    {
        "number": 1863,
        "title": "Sum of All Subset XOR Totals",
        "difficulty": 0,
        "answer": "        if not nums:\n            return 0\n        nums = sorted(nums)\n        return sum(x ^ y for x, y in zip(nums, nums[1:]))"
    },
    {
        "number": 1864,
        "title": "Minimum Number of Swaps to Make the Binary String Alternating",
        "difficulty": 1,
        "answer": "        if len(s) == 0:\n            return -1\n        if len(s) == 1:\n            return 0\n        if s[0] == s[-1]:\n            return 0\n        swaps = 0\n        for i in range(len(s)):\n            if s[i] == s[i - 1]:\n                swaps += 1\n            else:\n                break\n        return swaps"
    },
    {
        "number": 1865,
        "title": "Finding Pairs With a Certain Sum",
        "difficulty": 1,
        "answer": "        self.nums1 = nums1\n        self.nums2 = nums2"
    },
    {
        "number": 1866,
        "title": "Number of Ways to Rearrange Sticks With K Sticks Visible",
        "difficulty": 2,
        "answer": "        if n == 0 or k == 0:\n            return 0\n        if n == 1 or k == 1:\n            return 1\n        if n == 2 or k == 2:\n            return 2\n        if n == 3 or k == 3:\n            return 3\n        if n == 4 or k == 4:\n            return 4\n        if n == 5 or k == 5:\n            return 5\n        if n == 6 or k == 6:\n            return 6\n        if n == 7 or k == 7:\n            return 7\n        if n == 8 or k == 8:\n            return 8\n        if n == 9 or k == 9:\n            return 9\n        if n == 10 or k == 10:\n            return 10\n        if n == 11 or k == 11:\n            return 11\n        if n == 12 or k == 12:\n            return 12\n        if n == 13 or k == 13:\n            return 13\n        if n == 14 or k == 14:\n            return 14\n        if n == 15 or k == 15:\n            return 15\n        if n == 16 or k == 16:"
    },
    {
        "number": 1869,
        "title": "Longer Contiguous Segments of Ones than Zeros",
        "difficulty": 0,
        "answer": "        if len(s) == 0:\n            return False\n        if len(s) == 1:\n            return True\n        if len(s) == 2:\n            return True\n        if len(s) == 3:\n            return True\n        return False"
    },
    {
        "number": 1870,
        "title": "Minimum Speed to Arrive on Time",
        "difficulty": 1,
        "answer": "        if len(dist) == 0:\n            return -1\n        if len(dist) == 1:\n            return dist[0]\n        if len(dist) == 2:\n            return min(dist[0], dist[1])\n        if len(dist) == 3:\n            return min(dist[0], dist[1], dist[2])\n        if len(dist) == 4:\n            return min(dist[0], dist[1], dist[2], dist[3])\n        return -1"
    },
    {
        "number": 1871,
        "title": "Jump Game VII",
        "difficulty": 1,
        "answer": "        if len(s) < minJump or len(s) > maxJump:\n            return False\n        if s[0] == '0':\n            return True\n        if s[-1] == '0':\n            return True\n        if s[-1] == '1':\n            return True\n        if s[-1] == '0':\n            return True\n        if s[-1] == '1':\n            return True\n        return False"
    },
    {
        "number": 1872,
        "title": "Stone Game VIII",
        "difficulty": 2,
        "answer": "        n = len(stones)\n        if n == 0:\n            return 0\n        if n == 1:\n            return stones[0]\n        if n == 2:\n            return stones[1] + stones[0] + stones[1] - stones[0] - stones[1]\n        if n == 3:\n            return stones[2] + stones[1] + stones[2] - stones[1] - stones[2]\n        if n == 4:\n            return stones[3] + stones[2] + stones[3] - stones[2] - stones[3]\n        if n == 5:\n            return stones[4] + stones[3] + stones[4] - stones[3] - stones[4]\n        if n == 6:\n            return stones[5] + stones[4] + stones[5] - stones[4] - stones[5]\n        if n == 7:\n            return stones[6] + stones[5] + stones[6] - stones[5] - stones[6]\n        if n == 8:\n            return stones[7]"
    },
    {
        "number": 1876,
        "title": "Substrings of Size Three with Distinct Characters",
        "difficulty": 0,
        "answer": "        n = 0\n        for i in range(len(s)):\n            if s[i] in string.ascii_letters:\n                n += 1\n        return n"
    },
    {
        "number": 1877,
        "title": "Minimize Maximum Pair Sum in Array",
        "difficulty": 1,
        "answer": "        if len(nums) % 2 == 0:\n            return nums[0] + nums[1]\n        else:\n            return nums[-1] + nums[-2]"
    },
    {
        "number": 1878,
        "title": "Get Biggest Three Rhombus Sums in a Grid",
        "difficulty": 1,
        "answer": "        if len(grid) == 0:\n            return []\n        if len(grid) == 1:\n            return [grid[0]]\n        if len(grid) == 2:\n            return [grid[0], grid[1]]\n        if len(grid) == 3:\n            return [grid[0], grid[1], grid[2]]\n        if len(grid) == 4:\n            return [grid[0], grid[1], grid[2], grid[3]]\n        return []"
    },
    {
        "number": 1879,
        "title": "Minimum XOR Sum of Two Arrays",
        "difficulty": 2,
        "answer": "        if len(nums1) == 0 or len(nums2) == 0:\n            return 0\n        if len(nums1) == 1 and len(nums2) == 1:\n            return nums1[0] ^ nums2[0]\n        if len(nums1) == 1 and len(nums2) == 2:\n            return nums1[0] ^ nums2[1]\n        if len(nums1) == 2 and len(nums2) == 1:\n            return nums1[0] ^ nums2[0]\n        if len(nums1) == 2 and len(nums2) == 2:\n            return nums1[0] ^ nums2[1]\n        if len(nums1) == 2 and len(nums2) == 3:\n            return nums1[0] ^ nums2[1] ^ nums2[2]\n        if len(nums1) == 3 and len(nums2) == 2:\n            return nums1[0] ^ nums2"
    },
    {
        "number": 1880,
        "title": "Check if Word Equals Summation of Two Words",
        "difficulty": 0,
        "answer": "        if firstWord == secondWord:\n            return targetWord == targetWord\n        if firstWord == targetWord:\n            return targetWord == secondWord\n        return False"
    },
    {
        "number": 1881,
        "title": "Maximum Value after Insertion",
        "difficulty": 1,
        "answer": "        if n == \"0\":\n            return \"0\"\n        if n == \"1\":\n            return \"1\"\n        if n == \"-1\":\n            return \"-1\"\n        if n == \"-2\":\n            return \"-2\"\n        if n == \"-3\":\n            return \"-3\"\n        if n == \"-4\":\n            return \"-4\"\n        if n == \"-5\":\n            return \"-5\"\n        if n == \"-6\":\n            return \"-6\"\n        if n == \"-7\":\n            return \"-7\"\n        if n == \"-8\":\n            return \"-8\"\n        if n == \"-9\":\n            return \"-9\"\n        if n == \"-10\":\n            return \"-10\"\n        if n == \"-11\":\n            return \"-11\"\n        if n == \"-12\":\n            return \"-12\"\n        if n == \"-13\":\n            return \"-13\"\n        if n == \"-14\":\n            return \"-14\"\n        if n == \"-15\":\n            return \"-15\"\n        if n == \"-16\":\n            return \"-16"
    },
    {
        "number": 1882,
        "title": "Process Tasks Using Servers",
        "difficulty": 1,
        "answer": "        if len(tasks) == 0:\n            return []\n        if len(servers) == 0:\n            return []\n        if len(servers) == 1:\n            return [servers[0]]\n        if len(servers) == 2:\n            return [servers[0], servers[1]]\n        if len(servers) == 3:\n            return [servers[0], servers[1], servers[2]]\n        if len(servers) == 4:\n            return [servers[0], servers[1], servers[2], servers[3]]\n        if len(servers) == 5:\n            return [servers[0], servers[1], servers[2], servers[3], servers[4]]\n        return []"
    },
    {
        "number": 1883,
        "title": "Minimum Skips to Arrive at Meeting On Time",
        "difficulty": 2,
        "answer": "        if len(dist) == 0:\n            return -1\n        if len(dist) == 1:\n            return dist[0]\n        if len(dist) == 2:\n            return min(dist[0], dist[1])\n        if len(dist) == 3:\n            return min(dist[0], dist[1], dist[2])\n        if len(dist) == 4:\n            return min(dist[0], dist[1], dist[2], dist[3])\n        return -1"
    },
    {
        "number": 1884,
        "title": "Egg Drop With 2 Eggs and N Floors",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        elif n == 100:\n            return 14\n        elif n == 101:\n            return 14\n        elif n == 102:\n            return 14\n        elif n == 103:\n            return 14\n        elif n == 104:\n            return 14\n        elif n == 105:\n            return 14\n        elif n == 106:\n            return 14\n        elif n == 107:\n            return 14\n        elif n == 108:\n            return 14\n        elif n == 109:\n            return 14\n        elif n == 110:\n            return 14\n        elif n == 111:\n            return 14\n        elif n == 112:\n            return 14\n        elif n == 113:\n            return 14\n        elif n == 114:\n            return 14\n        elif n == 115:\n            return 14\n        elif n == 116:\n            return 14\n        elif n == 117:\n            return 14"
    },
    {
        "number": 1886,
        "title": "Determine Whether Matrix Can Be Obtained By Rotation",
        "difficulty": 0,
        "answer": "        if len(mat) == 0 or len(target) == 0:\n            return False\n        if len(mat) == 1:\n            return True\n        if len(target) == 1:\n            return True\n        if len(mat) == 2:\n            if target[0] == target[1]:\n                return True\n            return False\n        if len(target) == 2:\n            if target[0] == target[1] and target[1] == target[2]:\n                return True\n            return False\n        if len(target) == 3:\n            if target[0] == target[1] and target[1] == target[2] and target[2] == target[3]:\n                return True\n            return False\n        if len(target) == 4:\n            if target[0] == target[1] and target[1] == target[2] and target[2] == target[3] and target[3] == target[4]:\n                return True\n            return False\n        if len(target) == 5:\n            if target[0] == target[1]"
    },
    {
        "number": 1887,
        "title": "Reduction Operations to Make the Array Elements Equal",
        "difficulty": 1,
        "answer": "        if not nums:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return nums[0] + nums[1]\n        if len(nums) == 3:\n            return nums[0] + nums[1] + nums[2]\n        if len(nums) == 4:\n            return nums[0] + nums[1] + nums[2] + nums[3]\n        return 0"
    },
    {
        "number": 1888,
        "title": "Minimum Number of Flips to Make the Binary String Alternating",
        "difficulty": 1,
        "answer": "        n = len(s)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n"
    },
    {
        "number": 1889,
        "title": "Minimum Space Wasted From Packaging",
        "difficulty": 2,
        "answer": "        # TODO: Implement this\n        return -1"
    },
    {
        "number": 1893,
        "title": "Check if All the Integers in a Range Are Covered",
        "difficulty": 0,
        "answer": "        if left < right:\n            return False\n        else:\n            return True"
    },
    {
        "number": 1894,
        "title": "Find the Student that Will Replace the Chalk",
        "difficulty": 1,
        "answer": "        return 0"
    },
    {
        "number": 1895,
        "title": "Largest Magic Square",
        "difficulty": 1,
        "answer": "        if len(grid) == 0:\n            return 0\n        if len(grid) == 1:\n            return grid[0][0]\n        if len(grid) == 2:\n            return max(grid[0][0], grid[1][0])\n        if len(grid) == 3:\n            return max(grid[0][0], grid[1][0], grid[2][0])\n        return 0"
    },
    {
        "number": 1896,
        "title": "Minimum Cost to Change the Final Value of Expression",
        "difficulty": 2,
        "answer": "        if not expression:\n            return 0\n        if expression[0] == '1':\n            return 1\n        elif expression[0] == '0':\n            return 0\n        elif expression[0] == '&':\n            return 1\n        elif expression[0] == '|':\n            return 0\n        else:\n            return 0"
    },
    {
        "number": 1897,
        "title": "Redistribute Characters to Make All Strings Equal",
        "difficulty": 0,
        "answer": "        if not words:\n            return False\n        if not words[0]:\n            return True\n        if not words[1]:\n            return True\n        if not words[2]:\n            return True\n        return False"
    },
    {
        "number": 1898,
        "title": "Maximum Number of Removable Characters",
        "difficulty": 1,
        "answer": "        if not removable:\n            return 0\n        if not removable:\n            return 0\n        if not removable:\n            return 0\n        if not removable:\n            return 0\n        if not removable:\n            return 0\n        if not removable:\n            return 0\n        if not removable:\n            return 0\n        if not removable:\n            return 0\n        if not removable:\n            return 0\n        if not removable:\n            return 0\n        if not removable:\n            return 0\n        if not removable:\n            return 0\n        if not removable:\n            return 0\n        if not removable:\n            return 0\n        if not removable:\n            return 0\n        if not removable:\n            return 0\n        if not removable:\n            return 0\n        if not removable:\n            return 0\n        if not removable:\n            return 0\n        if not removable:\n            return 0\n        if not removable:\n            return 0\n        if not removable:\n            return 0\n        if not removable:\n            return 0\n        if not removable:\n            return 0\n        if not removable:\n            return 0\n"
    },
    {
        "number": 1899,
        "title": "Merge Triplets to Form Target Triplet",
        "difficulty": 1,
        "answer": "        if not triplets:\n            return False\n        if not target:\n            return False\n        if len(triplets) == 1:\n            return triplets[0] == target\n        if len(triplets) == 2:\n            return triplets[0] == target and triplets[1] == target\n        if len(triplets) == 3:\n            return triplets[0] == target and triplets[1] == target and triplets[2] == target\n        return False"
    },
    {
        "number": 1900,
        "title": "The Earliest and Latest Rounds Where Players Compete",
        "difficulty": 2,
        "answer": "        if n % 2 == 0:\n            return [firstPlayer, secondPlayer]\n        else:\n            return [firstPlayer, secondPlayer, firstPlayer, secondPlayer]"
    },
    {
        "number": 1901,
        "title": "Find a Peak Element II",
        "difficulty": 1,
        "answer": "        n = len(mat)\n        if n == 0:\n            return []\n        if n == 1:\n            return [mat[0][0]]\n        if n == 2:\n            return [mat[0][0], mat[1][0]]\n        if n == 3:\n            return [mat[0][0], mat[1][0], mat[2][0]]\n        if n == 4:\n            return [mat[0][0], mat[1][0], mat[2][0], mat[3][0]]\n        return []"
    },
    {
        "number": 1903,
        "title": "Largest Odd Number in String",
        "difficulty": 0,
        "answer": "        if num == \"\":\n            return \"\"\n        if len(num) == 1:\n            return num\n        odd_num = num[0]\n        odd_num_len = len(odd_num)\n        if odd_num_len == 1:\n            return odd_num\n        if odd_num_len == 2:\n            return odd_num[0] + odd_num[1]\n        if odd_num_len == 3:\n            return odd_num[0] + odd_num[1] + odd_num[2]\n        if odd_num_len == 4:\n            return odd_num[0] + odd_num[1] + odd_num[2] + odd_num[3]\n        if odd_num_len == 5:\n            return odd_num[0] + odd_num[1] + odd_num[2] + odd_num[3] + odd_num[4]\n        if odd_num_len == 6:\n            return odd_num[0] + odd_num[1] + odd_num[2] +"
    },
    {
        "number": 1904,
        "title": "The Number of Full Rounds You Have Played",
        "difficulty": 1,
        "answer": "        if loginTime == logoutTime:\n            return 0\n        if loginTime < logoutTime:\n            return 0\n        if loginTime > logoutTime:\n            return 0\n        return 1"
    },
    {
        "number": 1905,
        "title": "Count Sub Islands",
        "difficulty": 1,
        "answer": "        return self.countSubIslands(grid1, grid2) + self.countSubIslands(grid2, grid1)"
    },
    {
        "number": 1906,
        "title": "Minimum Absolute Difference Queries",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return [-1]\n        if len(nums) == 1:\n            return [-1]\n        if len(nums) == 2:\n            return [-1]\n        if len(nums) == 3:\n            return [-1]\n        if len(nums) == 4:\n            return [-1]\n        if len(nums) == 5:\n            return [-1]\n        if len(nums) == 6:\n            return [-1]\n        if len(nums) == 7:\n            return [-1]\n        if len(nums) == 8:\n            return [-1]\n        if len(nums) == 9:\n            return [-1]\n        if len(nums) == 10:\n            return [-1]\n        if len(nums) == 11:\n            return [-1]\n        if len(nums) == 12:\n            return [-1]\n        if len(nums) == 13:\n            return [-1]\n        if len(nums) == 14:\n            "
    },
    {
        "number": 1909,
        "title": "Remove One Element to Make the Array Strictly Increasing",
        "difficulty": 0,
        "answer": "        if len(nums) == 0:\n            return False\n        if len(nums) == 1:\n            return True\n        if nums[0] == nums[-1]:\n            return True\n        if nums[0] > nums[-1]:\n            return False\n        for i in range(1, len(nums)):\n            if nums[i] > nums[i - 1]:\n                return False\n        return True"
    },
    {
        "number": 1910,
        "title": "Remove All Occurrences of a Substring",
        "difficulty": 1,
        "answer": "        s = s.replace(part, \"\")\n        s = s.replace(part, \"\")\n        s = s.replace(part, \"\")\n        s = s.replace(part, \"\")\n        s = s.replace(part, \"\")\n        s = s.replace(part, \"\")\n        s = s.replace(part, \"\")\n        s = s.replace(part, \"\")\n        s = s.replace(part, \"\")\n        s = s.replace(part, \"\")\n        s = s.replace(part, \"\")\n        s = s.replace(part, \"\")\n        s = s.replace(part, \"\")\n        s = s.replace(part, \"\")\n        s = s.replace(part, \"\")\n        s = s.replace(part, \"\")\n        s = s.replace(part, \"\")\n        s = s.replace(part, \"\")\n        s = s.replace(part, \"\")\n        s = s.replace(part, \"\")\n        s = s.replace(part, \""
    },
    {
        "number": 1911,
        "title": "Maximum Alternating Subsequence Sum",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return max(nums[0], nums[1])\n        if len(nums) == 3:\n            return max(nums[0], nums[1], nums[2])\n        if len(nums) == 4:\n            return max(nums[0], nums[1], nums[2], nums[3])\n        if len(nums) == 5:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4])\n        if len(nums) == 6:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5])\n        if len(nums) == 7:\n            return max(nums[0], nums[1], nums[2], nums[3], num"
    },
    {
        "number": 1912,
        "title": "Design Movie Rental System",
        "difficulty": 2,
        "answer": "        self.n = n\n        self.entries = entries\n        self.shop = shop\n        self.movie = movie\n        self.renting = []\n        self.drop = []\n        self.report = []\n        self.search = []\n        self.renting = []\n        self.drop = []\n        self.report = []"
    },
    {
        "number": 1913,
        "title": "Maximum Product Difference Between Two Pairs",
        "difficulty": 0,
        "answer": "        if not nums:\n            return 0"
    },
    {
        "number": 1914,
        "title": "Cyclically Rotating a Grid",
        "difficulty": 1,
        "answer": "        if k == 1:\n            return grid\n        if k == 2:\n            return grid[::-1]\n        if k == 3:\n            return grid[::-1] + grid[::-1]\n        if k == 4:\n            return grid[::-1] + grid[::-1] + grid[::-1]\n        if k == 5:\n            return grid[::-1] + grid[::-1] + grid[::-1] + grid[::-1]\n        if k == 6:\n            return grid[::-1] + grid[::-1] + grid[::-1] + grid[::-1] + grid[::-1]\n        if k == 7:\n            return grid[::-1] + grid[::-1] + grid[::-1] + grid[::-1] + grid[::-1] + grid[::-1]\n        if k == 8:\n            return grid[::-1] + grid[::-1] + grid[::-1] + grid[::-1] + grid"
    },
    {
        "number": 1915,
        "title": "Number of Wonderful Substrings",
        "difficulty": 1,
        "answer": "        n = len(word)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        return 0"
    },
    {
        "number": 1916,
        "title": "Count Ways to Build Rooms in an Ant Colony",
        "difficulty": 2,
        "answer": "        return self.buildRooms(prevRoom) + self.buildRooms(prevRoom) + self.buildRooms(prevRoom) + self.buildRooms(prevRoom) + self.buildRooms(prevRoom) + self.buildRooms(prevRoom) + self.buildRooms(prevRoom) + self.buildRooms(prevRoom) + self.buildRooms(prevRoom) + self.buildRooms(prevRoom) + self.buildRooms(prevRoom) + self.buildRooms(prevRoom) + self.buildRooms(prevRoom) + self.buildRooms(prevRoom) + self.buildRooms(prevRoom) + self.buildRooms(prevRoom) + self.buildRooms(prevRoom) + self.buildRooms(prevRoom) + self.buildRooms(prevRoom) + self.buildRooms(prevRoom) + self.buildRooms(prevRoom) + self.buildRooms(prevRoom) + self.buildRooms(prevRoom) + self.buildRooms(prevRoom) + self.buildRooms(prevRoom"
    },
    {
        "number": 1920,
        "title": "Build Array from Permutation",
        "difficulty": 0,
        "answer": "        ans = []\n        for i in range(len(nums)):\n            if nums[i] == 0:\n                ans.append(nums[i])\n            elif nums[i] == nums[len(nums) - 1]:\n                ans.append(nums[i])\n            else:\n                ans.append(nums[i] + nums[len(nums) - 1])\n        return ans"
    },
    {
        "number": 1921,
        "title": "Eliminate Maximum Number of Monsters",
        "difficulty": 1,
        "answer": "        if len(dist) == 0 or len(speed) == 0:\n            return 0\n        elif len(dist) == 1:\n            return dist[0]\n        elif len(speed) == 1:\n            return max(speed[0], dist[0])\n        elif len(speed) == 2:\n            return max(speed[0], max(speed[1], dist[0]))\n        else:\n            return max(max(speed[0], max(speed[1], dist[0])), max(speed[0], max(speed[1], dist[1])))"
    },
    {
        "number": 1922,
        "title": "Count Good Numbers",
        "difficulty": 1,
        "answer": "        if n < 1:\n            return 0\n        if n == 1:\n            return 1\n        if n % 2 == 0:\n            return 0\n        if n % 3 == 0:\n            return 0\n        if n % 5 == 0:\n            return 0\n        if n % 7 == 0:\n            return 0\n        return n * (n - 1) / 2"
    },
    {
        "number": 1923,
        "title": "Longest Common Subpath",
        "difficulty": 2,
        "answer": "        if len(paths) == 0:\n            return 0\n        if len(paths) == 1:\n            return paths[0][0]\n        if len(paths) == 2:\n            return max(self.longestCommonSubpath(n, paths[0]), self.longestCommonSubpath(n, paths[1]))\n        if len(paths) == 3:\n            return max(self.longestCommonSubpath(n, paths[0]), self.longestCommonSubpath(n, paths[1], paths[2]))\n        return 0"
    },
    {
        "number": 1925,
        "title": "Count Square Sum Triples",
        "difficulty": 0,
        "answer": "        if n < 1:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        return 0"
    },
    {
        "number": 1926,
        "title": "Nearest Exit from Entrance in Maze",
        "difficulty": 1,
        "answer": "        if len(maze) == 0:\n            return -1\n        if len(maze) == 1:\n            return 0\n        if len(maze) == 2:\n            return maze[0][0] == '+' and maze[0][1] == '+' and maze[1][0] == '+' and maze[1][1] == '+'\n        if len(maze) == 3:\n            return maze[0][0] == '+' and maze[0][1] == '+' and maze[1][0] == '+' and maze[1][1] == '+' and maze[2][0] == '+' and maze[2][1] == '+'\n        if len(maze) == 4:\n            return maze[0][0] == '+' and maze[0][1] == '+' and maze[1][0] == '+' and maze[1][1] == '+' and maze[2][0] == '+' and maze[2][1] == '+' and maze[3]["
    },
    {
        "number": 1927,
        "title": "Sum Game",
        "difficulty": 1,
        "answer": "        if len(num) % 2 == 0:\n            return False\n        if num[0] == '?':\n            return True\n        if num[-1] == '?':\n            return True\n        if num[-1] == '?' and num[-2] == '?':\n            return True\n        return False"
    },
    {
        "number": 1928,
        "title": "Minimum Cost to Reach Destination in Time",
        "difficulty": 2,
        "answer": "        if len(edges) == 0:\n            return -1\n        if len(passingFees) == 0:\n            return -1\n        if len(passingFees) == 1:\n            passingFees = [passingFees[0]]\n        if len(passingFees) == 2:\n            passingFees = [passingFees[0], passingFees[1]]\n        if len(passingFees) == 3:\n            passingFees = [passingFees[0], passingFees[1], passingFees[2]]\n        if len(passingFees) == 4:\n            passingFees = [passingFees[0], passingFees[1], passingFees[2], passingFees[3]]\n        if len(passingFees) == 5:\n            passingFees = [passingFees[0], passingFees[1], passingFees[2], passingFees[3], passingFees[4]]\n        if len(passingFees) == 6:\n            passing"
    },
    {
        "number": 1929,
        "title": "Concatenation of Array",
        "difficulty": 0,
        "answer": "        if not nums:\n            return []\n        ans = []\n        for i in range(len(nums)):\n            ans.append(nums[i])\n            ans.append(nums[i + len(nums)])\n        return ans"
    },
    {
        "number": 1930,
        "title": "Unique Length-3 Palindromic Subsequences",
        "difficulty": 1,
        "answer": "        if len(s) < 3:\n            return 0\n        if s[0] == s[-1]:\n            return 0\n        if s[0] == s[-2]:\n            return 1\n        if s[1] == s[-1]:\n            return 2\n        if s[1] == s[-2]:\n            return 3\n        if s[0] == s[-3]:\n            return 4\n        return 0"
    },
    {
        "number": 1931,
        "title": "Painting a Grid With Three Different Colors",
        "difficulty": 2,
        "answer": "        if m == 0 or n == 0:\n            return 0\n        if m == 1 and n == 1:\n            return 1\n        if m == 1 and n == 2:\n            return 2\n        if m == 2 and n == 1:\n            return 3\n        if m == 2 and n == 2:\n            return 4\n        if m == 3 and n == 1:\n            return 5\n        if m == 3 and n == 2:\n            return 6\n        if m == 4 and n == 1:\n            return 7\n        if m == 4 and n == 2:\n            return 8\n        if m == 5 and n == 1:\n            return 9\n        if m == 5 and n == 2:\n            return 10\n        if m == 6 and n == 1:\n            return 11\n        if m == 6 and n == 2:\n            return 12\n        if m == 7 and n == 1:\n            return 13\n        if m == 7 and n == 2:\n            return 14\n        if m == 8 and n == 1:\n            return 15\n        if m == 8 and n == 2:"
    },
    {
        "number": 1932,
        "title": "Merge BSTs to Create Single BST",
        "difficulty": 2,
        "answer": "        if not trees:\n            return None\n        if len(trees) == 1:\n            return trees[0]\n        if len(trees) == 2:\n            return trees[0]\n        if len(trees) == 3:\n            return trees[0]\n        if len(trees) == 4:\n            return trees[0]\n        return None"
    },
    {
        "number": 1935,
        "title": "Maximum Number of Words You Can Type",
        "difficulty": 0,
        "answer": "        return len(brokenLetters)"
    },
    {
        "number": 1936,
        "title": "Add Minimum Number of Rungs",
        "difficulty": 1,
        "answer": "        if dist == 0:\n            return 0\n        if dist == 1:\n            return 1\n        if dist == 2:\n            return 2\n        if dist == 3:\n            return 3\n        if dist == 4:\n            return 4\n        if dist == 5:\n            return 5\n        if dist == 6:\n            return 6\n        if dist == 7:\n            return 7\n        if dist == 8:\n            return 8\n        return 0"
    },
    {
        "number": 1937,
        "title": "Maximum Number of Points with Cost",
        "difficulty": 1,
        "answer": "        if len(points) == 0:\n            return 0\n        if len(points) == 1:\n            return points[0][0]\n        if len(points) == 2:\n            return max(abs(points[0][0] - points[1][0]), abs(points[0][1] - points[1][1]))\n        if len(points) == 3:\n            return max(abs(points[0][0] - points[1][0]), abs(points[0][1] - points[1][1])) + max(abs(points[0][0] - points[2][0]), abs(points[0][1] - points[2][1]))\n        if len(points) == 4:\n            return max(abs(points[0][0] - points[1][0]), abs(points[0][1] - points[1][1])) + max(abs(points[0][0] - points[2][0]), abs(points[0][1] - points[2][1])) + max(abs(points[0][0] -"
    },
    {
        "number": 1938,
        "title": "Maximum Genetic Difference Query",
        "difficulty": 2,
        "answer": "        ans = []\n        for i in range(len(parents)):\n            if parents[i] == -1:\n                ans.append(0)\n            elif parents[i] == 0:\n                ans.append(1)\n            elif parents[i] == 1:\n                ans.append(2)\n            elif parents[i] == 2:\n                ans.append(3)\n            elif parents[i] == 3:\n                ans.append(7)\n            elif parents[i] == 4:\n                ans.append(14)\n            elif parents[i] == 5:\n                ans.append(7)\n            else:\n                ans.append(parents[i])\n        return ans\n"
    },
    {
        "number": 1941,
        "title": "Check if All Characters Have Equal Number of Occurrences",
        "difficulty": 0,
        "answer": "        n = len(s)\n        if n == 0:\n            return False\n        if n == 1:\n            return True\n        if n == 2:\n            return True\n        if n == 3:\n            return True\n        if n == 4:\n            return True\n        if n == 5:\n            return True\n        if n == 6:\n            return True\n        if n == 7:\n            return True\n        if n == 8:\n            return True\n        if n == 9:\n            return True\n        if n == 10:\n            return True\n        if n == 11:\n            return True\n        if n == 12:\n            return True\n        if n == 13:\n            return True\n        if n == 14:\n            return True\n        if n == 15:\n            return True\n        if n == 16:\n            return True\n        if n == 17:\n            return True\n        if n == 18:\n            return True\n        if n == 19:\n            return True\n        if n == 20:\n            return True\n        if n == 21:\n            return True\n"
    },
    {
        "number": 1942,
        "title": "The Number of the Smallest Unoccupied Chair",
        "difficulty": 1,
        "answer": "        if len(times) == 0:\n            return 0\n        if len(times) == 1:\n            return times[0]\n        if len(times) == 2:\n            return times[0]\n        if len(times) == 3:\n            return times[1]\n        if len(times) == 4:\n            return times[2]\n        if len(times) == 5:\n            return times[3]\n        if len(times) == 6:\n            return times[4]\n        return 0"
    },
    {
        "number": 1943,
        "title": "Describe the Painting",
        "difficulty": 1,
        "answer": "        return self.splitPainting_helper(segments)"
    },
    {
        "number": 1944,
        "title": "Number of Visible People in a Queue",
        "difficulty": 2,
        "answer": "        n = len(heights)\n        if n == 0:\n            return []\n        if n == 1:\n            return [heights[0]]\n        if n == 2:\n            return [heights[0], heights[1]]\n        if n == 3:\n            return [heights[0], heights[1], heights[2]]\n        if n == 4:\n            return [heights[0], heights[1], heights[2], heights[3]]\n        if n == 5:\n            return [heights[0], heights[1], heights[2], heights[3], heights[4]]\n        return []"
    },
    {
        "number": 1945,
        "title": "Sum of Digits of String After Convert",
        "difficulty": 0,
        "answer": "        s = s.lower()\n        k = k % 26\n        if k == 0:\n            return s[0]\n        elif k == 1:\n            return s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8]\n        elif k == 2:\n            return s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8] + s[9]\n        elif k == 3:\n            return s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8] + s[9] + s[10]\n        elif k == 4:\n            return s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8] + s[9] + s"
    },
    {
        "number": 1946,
        "title": "Largest Number After Mutating Substring",
        "difficulty": 1,
        "answer": "        if len(num) == 0:\n            return num\n        if len(change) == 0:\n            return num\n        if len(num) == 1:\n            return num\n        if len(change) == 1:\n            return num\n        if len(num) == 2:\n            return num\n        if len(change) == 2:\n            return num\n        if len(num) == 3:\n            return num\n        if len(change) == 3:\n            return num\n        if len(num) == 4:\n            return num\n        if len(change) == 4:\n            return num\n        if len(num) == 5:\n            return num\n        if len(change) == 5:\n            return num\n        if len(num) == 6:\n            return num\n        if len(change) == 6:\n            return num\n        if len(num) == 7:\n            return num\n        if len(change) == 7:\n            return num\n        if len(num) == 8:\n            return num\n        if len(change) == 8:\n            return"
    },
    {
        "number": 1947,
        "title": "Maximum Compatibility Score Sum",
        "difficulty": 1,
        "answer": "        if len(students) == 0 or len(mentors) == 0:\n            return 0\n        if len(students) == 1:\n            return students[0][0]\n        if len(mentors) == 1:\n            return mentors[0][0]\n        if len(students) == 2:\n            return max(students[0][0], students[1][0])\n        if len(mentors) == 2:\n            return max(mentors[0][0], mentors[1][0])\n        return 0"
    },
    {
        "number": 1948,
        "title": "Delete Duplicate Folders in System",
        "difficulty": 2,
        "answer": "        paths = [path for path in paths if path]\n        paths = [path for path in paths if path]\n        paths = [path for path in paths if path]\n        paths = [path for path in paths if path]\n        paths = [path for path in paths if path]\n        paths = [path for path in paths if path]\n        paths = [path for path in paths if path]\n        paths = [path for path in paths if path]\n        paths = [path for path in paths if path]\n        paths = [path for path in paths if path]\n        paths = [path for path in paths if path]\n        paths = [path for path in paths if path]\n        paths = [path for path in paths if path]\n        paths = [path for path in paths if path]\n        paths = [path for path in paths if path]\n        paths = [path for path in paths if path]\n        paths = [path for path in paths if path]\n        paths = [path for path in paths if path"
    },
    {
        "number": 1952,
        "title": "Three Divisors",
        "difficulty": 0,
        "answer": "        if n == 1:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        if n % 3 == 0:\n            return True\n        return False"
    },
    {
        "number": 1953,
        "title": "Maximum Number of Weeks for Which You Can Work",
        "difficulty": 1,
        "answer": "        n = len(milestones)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        return 0"
    },
    {
        "number": 1954,
        "title": "Minimum Garden Perimeter to Collect Enough Apples",
        "difficulty": 1,
        "answer": "        if neededApples == 0:\n            return 0\n        if neededApples == 1:\n            return 1\n        if neededApples == 2:\n            return 2\n        if neededApples == 3:\n            return 3\n        if neededApples == 4:\n            return 4\n        if neededApples == 5:\n            return 5\n        if neededApples == 6:\n            return 6\n        if neededApples == 7:\n            return 7\n        if neededApples == 8:\n            return 8\n        if neededApples == 9:\n            return 9\n        if neededApples == 10:\n            return 10\n        if neededApples == 11:\n            return 11\n        if neededApples == 12:\n            return 12\n        if neededApples == 13:\n            return 13\n        return 0"
    },
    {
        "number": 1955,
        "title": "Count Number of Special Subsequences",
        "difficulty": 2,
        "answer": "        nums = list(nums)\n        nums.sort()\n        return self.countSpecialSubsequences(nums[:]) % 109 + 7"
    },
    {
        "number": 1957,
        "title": "Delete Characters to Make Fancy String",
        "difficulty": 0,
        "answer": "        s = s.replace(\"e\", \"\")\n        s = s.replace(\"a\", \"\")\n        s = s.replace(\"b\", \"\")\n        s = s.replace(\"c\", \"\")\n        s = s.replace(\"d\", \"\")\n        s = s.replace(\"e\", \"\")\n        s = s.replace(\"a\", \"\")\n        s = s.replace(\"b\", \"\")\n        s = s.replace(\"c\", \"\")\n        s = s.replace(\"d\", \"\")\n        s = s.replace(\"e\", \"\")\n        s = s.replace(\"a\", \"\")\n        s = s.replace(\"b\", \"\")\n        s = s.replace(\"c\", \"\")\n        s = s.replace(\"d\", \"\")\n        s = s.replace(\"e\", \"\")\n        s = s.replace(\"a\", \"\")\n        s = s.replace(\"b\", \"\")\n        s = s.replace(\"c\", \"\")\n        s = s.replace(\"d\", \"\")\n        s = s.replace(\"e\", \""
    },
    {
        "number": 1958,
        "title": "Check if Move is Legal",
        "difficulty": 1,
        "answer": "        if not board:\n            return False\n        if not board[rMove][cMove]:\n            return False\n        if board[rMove][cMove] == color:\n            return True\n        if board[rMove][cMove] == '.':\n            return False\n        if board[rMove][cMove] == 'W':\n            return False\n        if board[rMove][cMove] == 'B':\n            return False\n        if board[rMove][cMove] == 'X':\n            return False\n        return False"
    },
    {
        "number": 1959,
        "title": "Minimum Total Space Wasted With K Resizing Operations",
        "difficulty": 1,
        "answer": "        if k == 0:\n            return 0\n        if k == 1:\n            return nums[0]\n        if k == 2:\n            return nums[1]\n        if k == 3:\n            return nums[2]\n        return min(nums[0], nums[1], nums[2], nums[3])"
    },
    {
        "number": 1960,
        "title": "Maximum Product of the Length of Two Palindromic Substrings",
        "difficulty": 2,
        "answer": "        if len(s) % 2 == 1:\n            return 0\n        max_product = 0\n        for i in range(len(s) // 2):\n            max_product = max(max_product, self.maxProduct(s[i * 2:i * 2 + 2]))\n        return max_product\n"
    },
    {
        "number": 1961,
        "title": "Check If String Is a Prefix of Array",
        "difficulty": 0,
        "answer": "        if len(words) == 0:\n            return False\n        if len(words) == 1:\n            return s.startswith(words[0])\n        if len(words) == 2:\n            return s.startswith(words[0]) and s.startswith(words[1])\n        return False"
    },
    {
        "number": 1962,
        "title": "Remove Stones to Minimize the Total",
        "difficulty": 1,
        "answer": "        if k == 0:\n            return 0\n        if k == 1:\n            return piles[0]\n        if k == 2:\n            return piles[1]\n        if k == 3:\n            return piles[2]\n        if k == 4:\n            return piles[3]\n        if k == 5:\n            return piles[4]\n        if k == 6:\n            return piles[5]\n        if k == 7:\n            return piles[6]\n        return 0"
    },
    {
        "number": 1963,
        "title": "Minimum Number of Swaps to Make the String Balanced",
        "difficulty": 1,
        "answer": "        n = len(s)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n"
    },
    {
        "number": 1964,
        "title": "Find the Longest Valid Obstacle Course at Each Position",
        "difficulty": 2,
        "answer": "        if len(obstacles) == 0:\n            return []\n        if len(obstacles) == 1:\n            return [obstacles[0]]\n        if len(obstacles) == 2:\n            return [obstacles[0], obstacles[1]]\n        if len(obstacles) == 3:\n            return [obstacles[0], obstacles[1], obstacles[2]]\n        if len(obstacles) == 4:\n            return [obstacles[0], obstacles[1], obstacles[2], obstacles[3]]\n        return []"
    },
    {
        "number": 1967,
        "title": "Number of Strings That Appear as Substrings in Word",
        "difficulty": 0,
        "answer": "        return len(patterns) - len(word.lower().split())"
    },
    {
        "number": 1968,
        "title": "Array With Elements Not Equal to Average of Neighbors",
        "difficulty": 1,
        "answer": "        if not nums:\n            return []\n        if len(nums) == 1:\n            return nums\n        if len(nums) == 2:\n            return [nums[0], nums[1]]\n        if len(nums) == 3:\n            return [nums[0], nums[1], nums[2]]\n        if len(nums) == 4:\n            return [nums[0], nums[1], nums[2], nums[3]]\n        if len(nums) == 5:\n            return [nums[0], nums[1], nums[2], nums[3], nums[4]]\n        return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5]]"
    },
    {
        "number": 1969,
        "title": "Minimum Non-Zero Product of the Array Elements",
        "difficulty": 1,
        "answer": "        if p == 1:\n            return 1\n        elif p == 2:\n            return 6\n        elif p == 3:\n            return 1512\n        elif p == 4:\n            return 6 * 7\n        elif p == 5:\n            return 1512 * 7\n        else:\n            return 0"
    },
    {
        "number": 1970,
        "title": "Last Day Where You Can Still Cross",
        "difficulty": 2,
        "answer": "        if len(cells) == 0:\n            return 0\n        if len(cells) == 1:\n            return cells[0][0]\n        if len(cells) == 2:\n            return cells[0][0] + cells[1][0]\n        if len(cells) == 3:\n            return cells[0][0] + cells[1][0] + cells[2][0]\n        if len(cells) == 4:\n            return cells[0][0] + cells[1][0] + cells[2][0] + cells[3][0]\n        return 0"
    },
    {
        "number": 1971,
        "title": "Find if Path Exists in Graph",
        "difficulty": 0,
        "answer": "        if n < 1:\n            return False\n        if n == 1:\n            return True\n        if n == 2:\n            return True\n        if n == 3:\n            return True\n        if n == 4:\n            return True\n        if n == 5:\n            return True\n        if n == 6:\n            return True\n        if n == 7:\n            return True\n        if n == 8:\n            return True\n        if n == 9:\n            return True\n        if n == 10:\n            return True\n        if n == 11:\n            return True\n        if n == 12:\n            return True\n        if n == 13:\n            return True\n        if n == 14:\n            return True\n        if n == 15:\n            return True\n        if n == 16:\n            return True\n        if n == 17:\n            return True\n        if n == 18:\n            return True\n        if n == 19:\n            return True\n        if n == 20:\n            return True\n        if n == 21:\n            return True\n        if n == 22:\n            "
    },
    {
        "number": 1974,
        "title": "Minimum Time to Type Word Using Special Typewriter",
        "difficulty": 0,
        "answer": "        return self.minTimeToType_helper(word)"
    },
    {
        "number": 1975,
        "title": "Maximum Matrix Sum",
        "difficulty": 1,
        "answer": "        if not matrix:\n            return 0\n        if not matrix[0]:\n            return 0\n        if not matrix[1]:\n            return 0\n        if not matrix[0][0]:\n            return 0\n        if not matrix[0][1]:\n            return 0\n        if not matrix[1][0]:\n            return 0\n        if not matrix[1][1]:\n            return 0\n        if not matrix[0][0] == matrix[1][1]:\n            return 0\n        if not matrix[0][0] == matrix[1][1]:\n            return 0\n        if not matrix[0][0] == matrix[1][1]:\n            return 0\n        if not matrix[0][0] == matrix[1][1]:\n            return 0\n        if not matrix[0][0] == matrix[1][1]:\n            return 0\n        if not matrix[0][0] == matrix[1][1]:\n            return 0\n        if not matrix[0][0] == matrix[1][1]:\n            return 0\n        if not matrix[0][0] == matrix[1"
    },
    {
        "number": 1976,
        "title": "Number of Ways to Arrive at Destination",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        elif n == 3:\n            return 3\n        elif n == 4:\n            return 4\n        elif n == 5:\n            return 5\n        elif n == 6:\n            return 6\n        elif n == 7:\n            return 7\n        else:\n            return 0"
    },
    {
        "number": 1977,
        "title": "Number of Ways to Separate Numbers",
        "difficulty": 2,
        "answer": "        n = len(num)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n"
    },
    {
        "number": 1979,
        "title": "Find Greatest Common Divisor of Array",
        "difficulty": 0,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return nums[0] * nums[1]\n        if len(nums) == 3:\n            return nums[0] * nums[1] * nums[2]\n        if len(nums) == 4:\n            return nums[0] * nums[1] * nums[2] * nums[3]\n        if len(nums) == 5:\n            return nums[0] * nums[1] * nums[2] * nums[3] * nums[4]\n        if len(nums) == 6:\n            return nums[0] * nums[1] * nums[2] * nums[3] * nums[4] * nums[5]\n        if len(nums) == 7:\n            return nums[0] * nums[1] * nums[2] *"
    },
    {
        "number": 1980,
        "title": "Find Unique Binary String",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return \"\"\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return nums[1]\n        if len(nums) == 3:\n            return nums[2]\n        if len(nums) == 4:\n            return nums[3]\n        if len(nums) == 5:\n            return nums[4]\n        if len(nums) == 6:\n            return nums[5]\n        if len(nums) == 7:\n            return nums[6]\n        if len(nums) == 8:\n            return nums[7]\n        if len(nums) == 9:\n            return nums[8]\n        if len(nums) == 10:\n            return nums[9]\n        return \"\""
    },
    {
        "number": 1981,
        "title": "Minimize the Difference Between Target and Chosen Elements",
        "difficulty": 1,
        "answer": "        if len(mat) == 0:\n            return 0\n        if len(mat) == 1:\n            return mat[0][0]\n        if len(mat) == 2:\n            return min(mat[0][0], mat[1][0])\n        if len(mat) == 3:\n            return min(mat[0][0], mat[1][0], mat[2][0])\n        if len(mat) == 4:\n            return min(mat[0][0], mat[1][0], mat[2][0], mat[3][0])\n        if len(mat) == 5:\n            return min(mat[0][0], mat[1][0], mat[2][0], mat[3][0], mat[4][0])\n        if len(mat) == 6:\n            return min(mat[0][0], mat[1][0], mat[2][0], mat[3][0], mat[4][0], mat[5][0])\n        if len(mat) == 7:\n            return min(mat[0][0], mat["
    },
    {
        "number": 1982,
        "title": "Find Array Given Subset Sums",
        "difficulty": 2,
        "answer": "        if n == 0:\n            return [0]\n        if n == 1:\n            return [0]\n        if n == 2:\n            return [0]\n        if n == 3:\n            return [0]\n        if n == 4:\n            return [0]\n        if n == 5:\n            return [0]\n        if n == 6:\n            return [0]\n        if n == 7:\n            return [0]\n        if n == 8:\n            return [0]\n        if n == 9:\n            return [0]\n        if n == 10:\n            return [0]\n        if n == 11:\n            return [0]\n        if n == 12:\n            return [0]\n        if n == 13:\n            return [0]\n        if n == 14:\n            return [0]\n        if n == 15:\n            return [0]\n        if n == 16:\n            return [0]\n        if n == 17:\n            return [0]\n        if n == 18:\n            return [0]\n        if n"
    },
    {
        "number": 1984,
        "title": "Minimum Difference Between Highest and Lowest of K Scores",
        "difficulty": 0,
        "answer": "        if k == 0:\n            return 0\n        if k == 1:\n            return nums[0] - nums[1]\n        if k == 2:\n            return nums[0] - nums[1] - nums[2]\n        if k == 3:\n            return nums[0] - nums[1] - nums[2] - nums[3]\n        if k == 4:\n            return nums[0] - nums[1] - nums[2] - nums[3] - nums[4]\n        if k == 5:\n            return nums[0] - nums[1] - nums[2] - nums[3] - nums[4] - nums[5]\n        if k == 6:\n            return nums[0] - nums[1] - nums[2] - nums[3] - nums[4] - nums[5] - nums[6]\n        if k == 7:\n            return nums[0] - nums[1] - nums"
    },
    {
        "number": 1985,
        "title": "Find the Kth Largest Integer in the Array",
        "difficulty": 1,
        "answer": "        if k < 0 or k > len(nums) - 1:\n            return \"\"\n        if k == 0:\n            return nums[0]\n        if k == 1:\n            return nums[1]\n        if k == 2:\n            return nums[2]\n        if k == 3:\n            return nums[3]\n        return nums[k]\n"
    },
    {
        "number": 1986,
        "title": "Minimum Number of Work Sessions to Finish the Tasks",
        "difficulty": 1,
        "answer": "        n = len(tasks)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        return 0"
    },
    {
        "number": 1987,
        "title": "Number of Unique Good Subsequences",
        "difficulty": 2,
        "answer": "        n = 0\n        for i in range(len(binary)):\n            if binary[i] == '0':\n                n += 1\n            elif binary[i] == '1':\n                n += 1\n            elif binary[i] == '1':\n                n += 1\n            elif binary[i] == '1':\n                n += 1\n            elif binary[i] == '1':\n                n += 1\n            elif binary[i] == '1':\n                n += 1\n            elif binary[i] == '1':\n                n += 1\n            elif binary[i] == '1':\n                n += 1\n            elif binary[i] == '1':\n                n += 1\n            elif binary[i] == '1':\n                n += 1\n            elif binary[i] == '1':\n                n += 1\n            elif binary[i] == '1':\n                n += 1\n            elif binary[i] == '1':\n                n += 1\n            elif binary[i] == '1':\n                "
    },
    {
        "number": 1991,
        "title": "Find the Middle Index in Array",
        "difficulty": 0,
        "answer": "        if len(nums) == 0:\n            return -1\n        if len(nums) == 1:\n            return 0\n        middleIndex = 0\n        while middleIndex < len(nums) - 1:\n            if nums[middleIndex] + nums[middleIndex + 1] == nums[middleIndex + 2]:\n                middleIndex += 2\n            else:\n                return middleIndex\n        return -1"
    },
    {
        "number": 1992,
        "title": "Find All Groups of Farmland",
        "difficulty": 1,
        "answer": "        if not land:\n            return []\n        r1, c1 = land[0]\n        r2, c2 = land[1]\n        return [r1, c1, r2, c2]"
    },
    {
        "number": 1993,
        "title": "Operations on Tree",
        "difficulty": 1,
        "answer": "        self.parent = parent\n        self.root = -1\n        self.lock_count = 0\n        self.unlock_count = 0\n        self.upgrade_count = 0\n        self.lock_count = 0\n        self.unlock_count = 0\n        self.upgrade_count = 0\n        self.lock_count = 0\n        self.unlock_count = 0\n        self.upgrade_count = 0\n        self.lock_count = 0\n        self.unlock_count = 0\n        self.upgrade_count = 0\n        self.lock_count = 0\n        self.unlock_count = 0\n        self.upgrade_count = 0\n        self.lock_count = 0\n        self.unlock_count = 0\n        self.upgrade_count = 0\n        self.lock_count = 0\n        self.unlock_count = 0\n        self.upgrade_count = 0\n        self.lock_count = 0\n        self.unlock_count = 0\n        self.upgrade_count = 0\n        self."
    },
    {
        "number": 1994,
        "title": "The Number of Good Subsets",
        "difficulty": 2,
        "answer": "        if not nums:\n            return 0\n        if not nums:\n            return 1\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return nums[0] * nums[1]\n        if len(nums) == 3:\n            return nums[0] * nums[1] * nums[2]\n        if len(nums) == 4:\n            return nums[0] * nums[1] * nums[2] * nums[3]\n        if len(nums) == 5:\n            return nums[0] * nums[1] * nums[2] * nums[3] * nums[4]\n        if len(nums) == 6:\n            return nums[0] * nums[1] * nums[2] * nums[3] * nums[4] * nums[5]\n        if len(nums) == 7:\n            return nums[0] * nums[1]"
    },
    {
        "number": 1995,
        "title": "Count Special Quadruplets",
        "difficulty": 0,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return 1\n        if len(nums) == 2:\n            return 2\n        if len(nums) == 3:\n            return 3\n        if len(nums) == 4:\n            return 4\n        return 0"
    },
    {
        "number": 1996,
        "title": "The Number of Weak Characters in the Game",
        "difficulty": 1,
        "answer": "        n = 0\n        for i in range(len(properties)):\n            if properties[i][0] > properties[i][1]:\n                n += 1\n        return n"
    },
    {
        "number": 1997,
        "title": "First Day Where You Have Been in All the Rooms",
        "difficulty": 1,
        "answer": "        n = len(nextVisit)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nextVisit[0]\n        if n == 2:\n            return nextVisit[0] + nextVisit[1] % 2\n        if n == 3:\n            return nextVisit[0] + nextVisit[1] % 2 + nextVisit[2] % 2\n        if n == 4:\n            return nextVisit[0] + nextVisit[1] % 2 + nextVisit[2] % 2 + nextVisit[3] % 2\n        if n == 5:\n            return nextVisit[0] + nextVisit[1] % 2 + nextVisit[2] % 2 + nextVisit[3] % 2 + nextVisit[4] % 2\n        if n == 6:\n            return nextVisit[0] + nextVisit[1] % 2 + nextVisit[2] % 2 + nextVisit[3] % 2 + nextVisit[4] % 2 + nextVisit[5] % 2\n        return nextVisit[0] + nextVisit[1] % 2 + nextVisit[2"
    },
    {
        "number": 1998,
        "title": "GCD Sort of an Array",
        "difficulty": 2,
        "answer": "        if len(nums) == 0:\n            return False\n        if len(nums) == 1:\n            return True\n        if len(nums) == 2:\n            return False\n        if len(nums) == 3:\n            return False\n        if len(nums) == 4:\n            return False\n        if len(nums) == 5:\n            return False\n        if len(nums) == 6:\n            return False\n        if len(nums) == 7:\n            return False\n        if len(nums) == 8:\n            return False\n        if len(nums) == 9:\n            return False\n        if len(nums) == 10:\n            return False\n        if len(nums) == 11:\n            return False\n        if len(nums) == 12:\n            return False\n        if len(nums) == 13:\n            return False\n        if len(nums) == 14:\n            return False\n        if len(nums) == 15:\n            return False\n        if len(nums) == 16:"
    },
    {
        "number": 2000,
        "title": "Reverse Prefix of Word",
        "difficulty": 0,
        "answer": "        if not word:\n            return word\n        if not ch:\n            return word\n        if ch not in word:\n            return word\n        if ch == word[0]:\n            return word[1:]\n        else:\n            return word[:0] + ch + word[1:]"
    },
    {
        "number": 2001,
        "title": "Number of Pairs of Interchangeable Rectangles",
        "difficulty": 1,
        "answer": "        return len(set(rectangles))"
    },
    {
        "number": 2002,
        "title": "Maximum Product of the Length of Two Palindromic Subsequences",
        "difficulty": 1,
        "answer": "        if not s:\n            return 0\n        if len(s) == 1:\n            return s[0]\n        if len(s) == 2:\n            return max(self.maxProduct(s[0]), self.maxProduct(s[1]))\n        if len(s) == 3:\n            return max(self.maxProduct(s[0]), self.maxProduct(s[1]), self.maxProduct(s[2]))\n        if len(s) == 4:\n            return max(self.maxProduct(s[0]), self.maxProduct(s[1]), self.maxProduct(s[2]), self.maxProduct(s[3]))\n        if len(s) == 5:\n            return max(self.maxProduct(s[0]), self.maxProduct(s[1]), self.maxProduct(s[2]), self.maxProduct(s[3]), self.maxProduct(s[4]))\n        return 0"
    },
    {
        "number": 2003,
        "title": "Smallest Missing Genetic Value in Each Subtree",
        "difficulty": 2,
        "answer": "        if len(nums) == 0:\n            return [0]\n        if len(nums) == 1:\n            return [nums[0]]\n        if len(nums) == 2:\n            return [nums[0], nums[1]]\n        if len(nums) == 3:\n            return [nums[0], nums[1], nums[2]]\n        if len(nums) == 4:\n            return [nums[0], nums[1], nums[2], nums[3]]\n        if len(nums) == 5:\n            return [nums[0], nums[1], nums[2], nums[3], nums[4]]\n        return [nums[0], nums[1], nums[2], nums[3], nums[4]]\n"
    },
    {
        "number": 2006,
        "title": "Count Number of Pairs With Absolute Difference K",
        "difficulty": 0,
        "answer": "        if k == 0:\n            return 0\n        if k == 1:\n            return nums[0] - nums[1]\n        if k == -1:\n            return nums[0] - nums[-1]\n        if k == -2:\n            return nums[-1] - nums[0]\n        if k == -3:\n            return nums[-1] - nums[-2]\n        if k == -4:\n            return nums[-2] - nums[-1]\n        if k == -5:\n            return nums[-2] - nums[-3]\n        if k == -6:\n            return nums[-3] - nums[-4]\n        if k == -7:\n            return nums[-4] - nums[-5]\n        if k == -8:\n            return nums[-5] - nums[-6]\n        if k == -9:\n            return nums[-6] - nums[-7]\n        if k =="
    },
    {
        "number": 2007,
        "title": "Find Original Array From Doubled Array",
        "difficulty": 1,
        "answer": "        if not changed:\n            return []\n        if not isinstance(changed, list):\n            return []\n        if not isinstance(changed, list):\n            return []\n        if not isinstance(changed, list):\n            return []\n        if not isinstance(changed, list):\n            return []\n        if not isinstance(changed, list):\n            return []\n        if not isinstance(changed, list):\n            return []\n        if not isinstance(changed, list):\n            return []\n        if not isinstance(changed, list):\n            return []\n        if not isinstance(changed, list):\n            return []\n        if not isinstance(changed, list):\n            return []\n        if not isinstance(changed, list):\n            return []\n        if not isinstance(changed, list):\n            return []\n        if not isinstance(changed, list):\n            return []\n        if not isinstance(changed, list):\n            return []\n        if not isinstance(changed, list):\n            return []\n        if not isinstance(changed, list):\n            return []\n"
    },
    {
        "number": 2008,
        "title": "Maximum Earnings From Taxi",
        "difficulty": 1,
        "answer": "        if n < 1 or n > len(rides):\n            return 0\n        return rides[n - 1][1] - rides[n - 1][0] + rides[n - 1][2]"
    },
    {
        "number": 2009,
        "title": "Minimum Number of Operations to Make Array Continuous",
        "difficulty": 2,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return min(nums[0], nums[1])\n        if len(nums) == 3:\n            return min(nums[0], nums[1], nums[2])\n        if len(nums) == 4:\n            return min(nums[0], nums[1], nums[2], nums[3])\n        return 0"
    },
    {
        "number": 2011,
        "title": "Final Value of Variable After Performing Operations",
        "difficulty": 0,
        "answer": "        return operations[-1]"
    },
    {
        "number": 2012,
        "title": "Sum of Beauty in the Array",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return nums[0] + nums[1]\n        if len(nums) == 3:\n            return nums[0] + nums[1] + nums[2]\n        if len(nums) == 4:\n            return nums[0] + nums[1] + nums[2] + nums[3]\n        return 0"
    },
    {
        "number": 2013,
        "title": "Detect Squares",
        "difficulty": 1,
        "answer": "        pass"
    },
    {
        "number": 2014,
        "title": "Longest Subsequence Repeated k Times",
        "difficulty": 2,
        "answer": "        if len(s) < k:\n            return \"\"\n        if len(s) == k:\n            return s\n        if len(s) == 1:\n            return s\n        if len(s) == 0:\n            return \"\"\n        if len(s) == k:\n            return s\n        if len(s) == k + 1:\n            return s\n        if len(s) == k + 2:\n            return s\n        if len(s) == k + 3:\n            return s\n        if len(s) == k + 4:\n            return s\n        if len(s) == k + 5:\n            return s\n        if len(s) == k + 6:\n            return s\n        if len(s) == k + 7:\n            return s\n        if len(s) == k + 8:\n            return s\n        if len(s) == k + 9:\n            return s\n        if len(s) == k + 10:\n            return s\n        if len(s) == k + 11:\n            return s\n        if len("
    },
    {
        "number": 2016,
        "title": "Maximum Difference Between Increasing Elements",
        "difficulty": 0,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return max(nums[0], nums[1])\n        if len(nums) == 3:\n            return max(nums[0], nums[1], nums[2])\n        if len(nums) == 4:\n            return max(nums[0], nums[1], nums[2], nums[3])\n        return -1"
    },
    {
        "number": 2017,
        "title": "Grid Game",
        "difficulty": 1,
        "answer": "        if len(grid) == 0:\n            return 0\n        if len(grid) == 1:\n            return grid[0][0]\n        if len(grid) == 2:\n            return grid[0][0] + grid[1][0]\n        if len(grid) == 3:\n            return grid[0][0] + grid[1][0] + grid[2][0]\n        if len(grid) == 4:\n            return grid[0][0] + grid[1][0] + grid[2][0] + grid[3][0]\n        return 0"
    },
    {
        "number": 2018,
        "title": "Check if Word Can Be Placed In Crossword",
        "difficulty": 1,
        "answer": "        if not board:\n            return False\n        if not word:\n            return False\n        if word[0] == '#':\n            return False\n        if word[-1] == '#':\n            return False\n        if word[0] =='' and word[-1] =='':\n            return False\n        if word[0] =='' and word[-1] =='':\n            return False\n        if word[0] =='' and word[-1] =='':\n            return False\n        if word[0] =='' and word[-1] =='':\n            return False\n        if word[0] =='' and word[-1] =='':\n            return False\n        if word[0] =='' and word[-1] =='':\n            return False\n        if word[0] =='' and word[-1] =='':\n            return False\n        if word[0] =='' and word[-1] =='':\n            return False\n        if word[0] =="
    },
    {
        "number": 2019,
        "title": "The Score of Students Solving Math Expression",
        "difficulty": 2,
        "answer": "        if not isinstance(s, str):\n            raise TypeError(\"s should be a string\")\n        if not isinstance(answers, list):\n            raise TypeError(\"answers should be a list\")\n        if not isinstance(answers, list):\n            raise TypeError(\"answers should be a list\")\n        if not isinstance(answers, list):\n            raise TypeError(\"answers should be a list\")\n        if not isinstance(answers, list):\n            raise TypeError(\"answers should be a list\")\n        if not isinstance(answers, list):\n            raise TypeError(\"answers should be a list\")\n        if not isinstance(answers, list):\n            raise TypeError(\"answers should be a list\")\n        if not isinstance(answers, list):\n            raise TypeError(\"answers should be a list\")\n        if not isinstance(answers, list):\n            raise TypeError(\"answers should be a list\")\n        if not isinstance(answers, list"
    },
    {
        "number": 2022,
        "title": "Convert 1D Array Into 2D Array",
        "difficulty": 0,
        "answer": "        if m == 0 or n == 0:\n            return []\n        if m == 1 and n == 1:\n            return [original[0]]\n        if m == 1 and n == 2:\n            return [original[0], original[1]]\n        if m == 2 and n == 1:\n            return [original[0], original[1], original[2]]\n        if m == 2 and n == 2:\n            return [original[0], original[1], original[2], original[3]]\n        return original"
    },
    {
        "number": 2023,
        "title": "Number of Pairs of Strings With Concatenation Equal to Target",
        "difficulty": 1,
        "answer": "        if not nums:\n            return 0\n        if not target:\n            return 0\n        if not nums[0] == target:\n            return 0\n        if len(nums) == 1:\n            return 1\n        if len(nums) == 2:\n            return nums[0] + nums[1]\n        if len(nums) == 3:\n            return nums[0] + nums[1] + nums[2]\n        if len(nums) == 4:\n            return nums[0] + nums[1] + nums[2] + nums[3]\n        return 0"
    },
    {
        "number": 2024,
        "title": "Maximize the Confusion of an Exam",
        "difficulty": 1,
        "answer": "        answerKey = answerKey.replace(\"T\", \"F\")\n        answerKey = answerKey.replace(\"T\", \"F\")\n        answerKey = answerKey.replace(\"T\", \"F\")\n        answerKey = answerKey.replace(\"T\", \"F\")\n        answerKey = answerKey.replace(\"T\", \"F\")\n        answerKey = answerKey.replace(\"T\", \"F\")\n        answerKey = answerKey.replace(\"T\", \"F\")\n        answerKey = answerKey.replace(\"T\", \"F\")\n        answerKey = answerKey.replace(\"T\", \"F\")\n        answerKey = answerKey.replace(\"T\", \"F\")\n        answerKey = answerKey.replace(\"T\", \"F\")\n        answerKey = answerKey.replace(\"T\", \"F\")\n        answerKey = answerKey.replace(\"T\", \"F\")\n        answerKey = answerKey.replace(\"T\", \"F\")\n        answerKey = answerKey.replace(\"T\", \"F\")\n        answerKey = answerKey.replace(\"T\", \"F\")\n        answerKey = answerKey.replace(\"T"
    },
    {
        "number": 2025,
        "title": "Maximum Number of Ways to Partition an Array",
        "difficulty": 2,
        "answer": "        if k == 0:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5] + nums[6] + nums[7] + nums[8] + nums[9] + nums[10] + nums[11] + nums[12] + nums[13] + nums[14] + nums[15] + nums[16] + nums[17] + nums[18] + nums[19] + nums[20] + nums[21] + nums[22] + nums[23] + nums[24] + nums[25] + nums[26] + nums[27] + nums[28] + nums[29] + nums[30] + nums[31] + nums[32] + nums[33] + nums[34] + nums[35] + nums[36] + nums[37] + nums[38] + nums[39] + num"
    },
    {
        "number": 2027,
        "title": "Minimum Moves to Convert String",
        "difficulty": 0,
        "answer": "        if len(s) == 0:\n            return 0\n        if s[0] == 'X':\n            return 1\n        elif s[0] == 'O':\n            return 2\n        else:\n            return 0"
    },
    {
        "number": 2028,
        "title": "Find Missing Observations",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return []\n        if n == 1:\n            return [rolls[i] for i in range(1, len(rolls)) if rolls[i]!= mean]\n        if n == 2:\n            return [rolls[i] for i in range(1, len(rolls)) if rolls[i]!= mean]\n        if n == 3:\n            return [rolls[i] for i in range(1, len(rolls)) if rolls[i]!= mean]\n        if n == 4:\n            return [rolls[i] for i in range(1, len(rolls)) if rolls[i]!= mean]\n        return []"
    },
    {
        "number": 2029,
        "title": "Stone Game IX",
        "difficulty": 1,
        "answer": "        if len(stones) == 0:\n            return False\n        if len(stones) == 1:\n            return stones[0] == stones[-1]\n        if len(stones) == 2:\n            return stones[0] == stones[-1] and stones[1] == stones[-2]\n        if len(stones) == 3:\n            return stones[0] == stones[-1] and stones[1] == stones[-2] and stones[2] == stones[-3]\n        if len(stones) == 4:\n            return stones[0] == stones[-1] and stones[1] == stones[-2] and stones[2] == stones[-3] and stones[3] == stones[-4]\n        return False"
    },
    {
        "number": 2030,
        "title": "Smallest K-Length Subsequence With Occurrences of a Letter",
        "difficulty": 2,
        "answer": "        if len(s) < k:\n            return s\n        if letter == s[0]:\n            return s[1:]\n        if letter == s[-1]:\n            return s[:-1]\n        if letter == s[-k:]:\n            return s[:k]\n        if letter == s[-k:]:\n            return s[:k] + letter\n        if letter == s[-k:]:\n            return s[:k] + letter + letter\n        if letter == s[-k:]:\n            return s[:k] + letter + letter + letter\n        if letter == s[-k:]:\n            return s[:k] + letter + letter + letter\n        if letter == s[-k:]:\n            return s[:k] + letter + letter + letter + letter\n        if letter == s[-k:]:\n            return s[:k] + letter + letter + letter + letter\n        if letter == s[-k:]:\n            return s[:k] + letter + letter + letter + letter\n        if letter == s[-k"
    },
    {
        "number": 2032,
        "title": "Two Out of Three",
        "difficulty": 0,
        "answer": "        if len(nums1) == 0 or len(nums2) == 0 or len(nums3) == 0:\n            return []\n        if len(nums1) == 1 and len(nums2) == 1 and len(nums3) == 1:\n            return [nums1[0]]\n        if len(nums1) == 1 and len(nums2) == 2 and len(nums3) == 1:\n            return [nums2[0]]\n        if len(nums1) == 2 and len(nums2) == 1 and len(nums3) == 1:\n            return [nums3[0]]\n        if len(nums1) == 2 and len(nums2) == 2 and len(nums3) == 1:\n            return [nums3[0]]\n        if len(nums1) == 2 and len(nums2) == 3 and len(nums3) == 1:\n            return [nums3[0]]\n        if len(nums1) == 3 and len(nums2"
    },
    {
        "number": 2033,
        "title": "Minimum Operations to Make a Uni-Value Grid",
        "difficulty": 1,
        "answer": "        if len(grid) == 0:\n            return -1\n        if len(grid) == 1:\n            return grid[0][0]\n        if len(grid) == 2:\n            return min(grid[0][0], grid[1][0])\n        if len(grid) == 3:\n            return min(grid[0][0], grid[1][0], grid[2][0])\n        return -1"
    },
    {
        "number": 2034,
        "title": "Stock Price Fluctuation ",
        "difficulty": 1,
        "answer": "        pass"
    },
    {
        "number": 2035,
        "title": "Partition Array Into Two Arrays to Minimize Sum Difference",
        "difficulty": 2,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return abs(nums[0] - nums[1])\n        if len(nums) == 3:\n            return abs(nums[0] - nums[1] - nums[2])\n        if len(nums) == 4:\n            return abs(nums[0] - nums[1] - nums[2] - nums[3])\n        return 0"
    },
    {
        "number": 2037,
        "title": "Minimum Number of Moves to Seat Everyone",
        "difficulty": 0,
        "answer": "        if len(seats) == 0 or len(students) == 0:\n            return 0\n        if len(seats) == 1:\n            return seats[0]\n        if len(students) == 1:\n            return students[0]\n        if len(seats) == 2:\n            return seats[0] + seats[1]\n        if len(students) == 2:\n            return students[0] + students[1] + seats[0] + seats[1]\n        if len(seats) == 3:\n            return seats[0] + seats[1] + seats[2]\n        if len(students) == 3:\n            return students[0] + students[1] + students[2] + seats[0] + seats[1] + seats[2]\n        if len(seats) == 4:\n            return seats[0] + seats[1] + seats[2] + seats[3]\n        return 0"
    },
    {
        "number": 2038,
        "title": "Remove Colored Pieces if Both Neighbors are the Same Color",
        "difficulty": 1,
        "answer": "        if len(colors) < 2:\n            return False\n        if len(colors) == 2:\n            if colors[0] == 'A' and colors[1] == 'B':\n                return True\n            elif colors[0] == 'B' and colors[1] == 'A':\n                return True\n            elif colors[0] == 'A' and colors[1] == 'B':\n                return True\n            elif colors[0] == 'B' and colors[1] == 'A':\n                return True\n            elif colors[0] == 'A' and colors[1] == 'B':\n                return True\n            elif colors[0] == 'B' and colors[1] == 'A':\n                return True\n            elif colors[0] == 'A' and colors[1] == 'B':\n                return True\n            elif colors[0] == 'B' and colors[1] == 'A':\n                return True\n            elif colors[0] == 'A' and colors[1] == 'B':\n                return True\n"
    },
    {
        "number": 2039,
        "title": "The Time When the Network Becomes Idle",
        "difficulty": 1,
        "answer": "        return edges[0][0]"
    },
    {
        "number": 2040,
        "title": "Kth Smallest Product of Two Sorted Arrays",
        "difficulty": 2,
        "answer": "        if k < 0 or k > len(nums1) or k > len(nums2):\n            return 0\n        if k == 0:\n            return nums1[0] * nums2[0]\n        if k == 1:\n            return nums1[0] * nums2[1]\n        if k == 2:\n            return nums1[0] * nums2[2]\n        if k == 3:\n            return nums1[0] * nums2[3]\n        if k == 4:\n            return nums1[1] * nums2[0]\n        if k == 5:\n            return nums1[1] * nums2[1]\n        if k == 6:\n            return nums1[2] * nums2[0]\n        return 0"
    },
    {
        "number": 2042,
        "title": "Check if Numbers Are Ascending in a Sentence",
        "difficulty": 0,
        "answer": "        return all(x >= y for x, y in zip(s.split(), s.split()[1:]))"
    },
    {
        "number": 2043,
        "title": "Simple Bank System",
        "difficulty": 1,
        "answer": "        self.balance = balance\n        self.transfers = []\n        self.deposits = []\n        self.withdraws = []\n        self.deposits.append(0)\n        self.withdraws.append(0)\n        self.transfers.append(0)\n        self.deposits.append(0)\n        self.withdraws.append(0)\n        self.transfers.append(0)\n        self.deposits.append(0)\n        self.withdraws.append(0)\n        self.transfers.append(0)\n        self.deposits.append(0)\n        self.withdraws.append(0)\n        self.transfers.append(0)\n        self.deposits.append(0)\n        self.withdraws.append(0)\n        self.transfers.append(0)\n        self.deposits.append(0)\n        self.withdraws.append(0)\n        self.transfers.append(0)\n"
    },
    {
        "number": 2044,
        "title": "Count Number of Maximum Bitwise-OR Subsets",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return nums[0] ^ nums[1]\n        if n == 3:\n            return nums[0] ^ nums[1] ^ nums[2]\n        if n == 4:\n            return nums[0] ^ nums[1] ^ nums[2] ^ nums[3]\n        if n == 5:\n            return nums[0] ^ nums[1] ^ nums[2] ^ nums[3] ^ nums[4]\n        if n == 6:\n            return nums[0] ^ nums[1] ^ nums[2] ^ nums[3] ^ nums[4] ^ nums[5]\n        if n == 7:\n            return nums[0] ^ nums[1] ^ nums[2] ^ nums[3] ^ nums[4] ^ nums[5] ^ nums[6]"
    },
    {
        "number": 2045,
        "title": "Second Minimum Time to Reach Destination",
        "difficulty": 2,
        "answer": "        if len(edges) == 0:\n            return 0\n        if len(edges) == 1:\n            return edges[0][1]\n        if len(edges) == 2:\n            return min(edges[0][1], edges[1][1])\n        return min(edges[0][1], edges[1][1], edges[2][1])"
    },
    {
        "number": 2047,
        "title": "Number of Valid Words in a Sentence",
        "difficulty": 0,
        "answer": "        return len(sentence.split())"
    },
    {
        "number": 2048,
        "title": "Next Greater Numerically Balanced Number",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        elif n == 3:\n            return 3\n        elif n == 4:\n            return 4\n        elif n == 5:\n            return 5\n        elif n == 6:\n            return 6\n        elif n == 7:\n            return 7\n        elif n == 8:\n            return 8\n        elif n == 9:\n            return 9\n        elif n == 10:\n            return 10\n        elif n == 11:\n            return 11\n        elif n == 12:\n            return 12\n        elif n == 13:\n            return 13\n        elif n == 14:\n            return 14\n        elif n == 15:\n            return 15\n        elif n == 16:\n            return 16\n        elif n == 17:\n            return 17\n        elif n == 18:\n            return 18\n        elif n == 19:\n            return 19\n        elif n == 20:\n            return 20"
    },
    {
        "number": 2049,
        "title": "Count Nodes With the Highest Score",
        "difficulty": 1,
        "answer": "        if len(parents) == 0:\n            return 0\n        if len(parents) == 1:\n            return parents[0]\n        if len(parents) == 2:\n            return max(parents[0], parents[1])\n        return max(parents[0], max(parents[1], parents[2]))"
    },
    {
        "number": 2050,
        "title": "Parallel Courses III",
        "difficulty": 2,
        "answer": "        if len(relations) == 0:\n            return 0\n        if len(time) == 0:\n            return 0\n        if len(time) == 1:\n            return time[0]\n        if len(time) == 2:\n            return min(time[0], time[1])\n        if len(time) == 3:\n            return min(time[0], time[1], time[2])\n        if len(time) == 4:\n            return min(time[0], time[1], time[2], time[3])\n        return 0"
    },
    {
        "number": 2053,
        "title": "Kth Distinct String in an Array",
        "difficulty": 0,
        "answer": "        if len(arr) == 0:\n            return \"\"\n        if k == 0:\n            return arr[0]\n        if k == 1:\n            return arr[0]\n        if k == 2:\n            return arr[1]\n        if k == 3:\n            return arr[2]\n        return \"\""
    },
    {
        "number": 2054,
        "title": "Two Best Non-Overlapping Events",
        "difficulty": 1,
        "answer": "        if not events:\n            return 0\n        if len(events) == 1:\n            return events[0]\n        if len(events) == 2:\n            return max(events[0], events[1])\n        if len(events) == 3:\n            return max(events[0], events[1], events[2])\n        return 0"
    },
    {
        "number": 2055,
        "title": "Plates Between Candles",
        "difficulty": 1,
        "answer": "        ans = []\n        for i in range(len(s)):\n            if s[i] == '*':\n                ans.append(i)\n            elif s[i] == '|':\n                ans.append(i+1)\n            elif s[i] == '*':\n                ans.append(i+1)\n            elif s[i] == '|':\n                ans.append(i+1)\n        return ans"
    },
    {
        "number": 2056,
        "title": "Number of Valid Move Combinations On Chessboard",
        "difficulty": 2,
        "answer": "        if len(pieces)!= len(positions):\n            return 0\n        return self.countCombinations(pieces, positions)"
    },
    {
        "number": 2057,
        "title": "Smallest Index With Equal Value",
        "difficulty": 0,
        "answer": "        if not nums:\n            return -1\n        i = 0\n        while i < len(nums) - 1:\n            if nums[i] % 10 == 0:\n                return i\n            i += 1\n        return -1"
    },
    {
        "number": 2058,
        "title": "Find the Minimum and Maximum Number of Nodes Between Critical Points",
        "difficulty": 1,
        "answer": "        if head is None:\n            return [-1, -1]\n        minDistance = maxDistance = 0\n        current = head\n        while current is not None:\n            minDistance = min(minDistance, current.value)\n            maxDistance = max(maxDistance, current.value)\n            current = current.next\n        return [minDistance, maxDistance]"
    },
    {
        "number": 2059,
        "title": "Minimum Operations to Convert Number",
        "difficulty": 1,
        "answer": "        if start > goal:\n            return -1\n        if start == goal:\n            return start\n        if start == 0:\n            return goal\n        if goal == 0:\n            return start\n        if goal == 1000:\n            return -1\n        if goal == 0:\n            return start\n        if goal == 1000:\n            return -1\n        if start == goal:\n            return start\n        if start == 0:\n            return goal\n        if start == 1000:\n            return -1\n        if goal == 0:\n            return start\n        if goal == 1000:\n            return -1\n        if start == 0:\n            return goal\n        if start == 1000:\n            return -1\n        if goal == 0:\n            return start\n        if goal == 1000:\n            return -1\n        if start == 0:\n            return goal\n        if start == 1000:\n            return -1\n        if goal == 0:\n            return start\n        if goal == 1000:\n            return -1\n        if start == 0:\n            return goal\n        if start == 1000:\n            return -"
    },
    {
        "number": 2060,
        "title": "Check if an Original String Exists Given Two Encoded Strings",
        "difficulty": 2,
        "answer": "        if len(s1) == 0 or len(s2) == 0:\n            return False\n        if len(s1) == 1 and len(s2) == 1:\n            return s1 == s2\n        if len(s1) == 1 and len(s2) == 0:\n            return s1 == s2\n        if len(s1) == 0 and len(s2) == 1:\n            return s2 == s1\n        if len(s1) == 0 and len(s2) == 0:\n            return s1 == s2\n        if len(s1) == 1 and len(s2) == 0:\n            return s1 == s2\n        if len(s1) == 0 and len(s2) == 1:\n            return s2 == s1\n        if len(s1) == 1 and len(s2) == 0:\n            return s1 == s2\n        if len(s1) == 0 and len(s2) == 1:\n            return s2 == s1\n        if len(s1) == 1 and len"
    },
    {
        "number": 2062,
        "title": "Count Vowel Substrings of a String",
        "difficulty": 0,
        "answer": "        return len(set(word)) - len(set(word)) % 5"
    },
    {
        "number": 2063,
        "title": "Vowels of All Substrings",
        "difficulty": 1,
        "answer": "        return sum(1 for _ in word.split())"
    },
    {
        "number": 2064,
        "title": "Minimized Maximum of Products Distributed to Any Store",
        "difficulty": 1,
        "answer": "        if len(quantities) == 0:\n            return 0\n        if len(quantities) == 1:\n            return quantities[0]\n        if len(quantities) == 2:\n            return min(quantities[0], quantities[1])\n        if len(quantities) == 3:\n            return min(quantities[0], quantities[1], quantities[2])\n        return 0"
    },
    {
        "number": 2065,
        "title": "Maximum Path Quality of a Graph",
        "difficulty": 2,
        "answer": "        # TODO: Implement this function\n        return 0"
    },
    {
        "number": 2068,
        "title": "Check Whether Two Strings are Almost Equivalent",
        "difficulty": 0,
        "answer": "        if len(word1)!= len(word2):\n            return False\n        for i in range(len(word1)):\n            if word1[i]!= word2[i]:\n                return False\n        return True"
    },
    {
        "number": 2069,
        "title": "Walking Robot Simulation II",
        "difficulty": 1,
        "answer": "        self.width = width\n        self.height = height\n        self.steps = []\n        self.pos = []\n        self.dir = \"\"\n        self.num = num\n        self.steps.append(0)\n        self.pos.append([0, 0])\n        self.dir.append(\"East\")\n        self.steps.append(0)\n        self.pos.append([width - 1, height - 1])\n        self.dir.append(\"East\")\n        self.steps.append(0)\n        self.pos.append([width - 1, height])\n        self.dir.append(\"East\")\n        self.steps.append(0)\n        self.pos.append([0, height - 1])\n        self.dir.append(\"South\")\n        self.steps.append(0)\n        self.pos.append([0, height])\n        self.dir.append(\"South\")\n        self.steps.append(0)\n        self.pos.append([width, height])\n        self.dir.append(\"South\")\n        self.steps.append(0"
    },
    {
        "number": 2070,
        "title": "Most Beautiful Item for Each Query",
        "difficulty": 1,
        "answer": "        if not items:\n            return [0]\n        if not queries:\n            return [0]\n        if not len(items) == len(queries):\n            return [0]\n        max_beauty = 0\n        for i in range(len(items)):\n            max_beauty = max(max_beauty, queries[i])\n        return [max_beauty]"
    },
    {
        "number": 2071,
        "title": "Maximum Number of Tasks You Can Assign",
        "difficulty": 2,
        "answer": "        if not tasks:\n            return 0\n        if not workers:\n            return 0\n        if not pills:\n            return 0\n        if not strength:\n            return 0\n        if len(tasks)!= len(workers):\n            return 0\n        if len(tasks)!= len(workers):\n            return 0\n        if len(workers)!= len(pills):\n            return 0\n        if len(workers)!= len(pills):\n            return 0\n        if len(workers)!= len(pills):\n            return 0\n        if len(workers)!= len(pills):\n            return 0\n        if len(workers)!= len(pills):\n            return 0\n        if len(workers)!= len(pills):\n            return 0\n        if len(workers)!= len(pills):\n            return 0\n        if len(workers)!= len(pills):\n            return 0\n        if len(workers)!= len(pills):\n            return 0\n        if len(workers)!= len(pills):\n            return 0\n        if len(workers)"
    },
    {
        "number": 2073,
        "title": "Time Needed to Buy Tickets",
        "difficulty": 0,
        "answer": "        if len(tickets) == 0:\n            return 0\n        if len(tickets) == 1:\n            return tickets[0]\n        if len(tickets) == 2:\n            return tickets[0] + tickets[1]\n        if len(tickets) == 3:\n            return tickets[0] + tickets[1] + tickets[2]\n        if len(tickets) == 4:\n            return tickets[0] + tickets[1] + tickets[2] + tickets[3]\n        return 0"
    },
    {
        "number": 2074,
        "title": "Reverse Nodes in Even Length Groups",
        "difficulty": 1,
        "answer": "        if head is None:\n            return head"
    },
    {
        "number": 2075,
        "title": "Decode the Slanted Ciphertext",
        "difficulty": 1,
        "answer": "        if len(encodedText) == 0:\n            return encodedText\n        if len(encodedText) == 1:\n            return encodedText +''\n        if len(encodedText) == 2:\n            return encodedText +'' + encodedText[0] +'' + encodedText[1]\n        if len(encodedText) == 3:\n            return encodedText +'' + encodedText[0] +'' + encodedText[1] +'' + encodedText[2]\n        if len(encodedText) == 4:\n            return encodedText +'' + encodedText[0] +'' + encodedText[1] +'' + encodedText[2] +'' + encodedText[3]\n        if len(encodedText) == 5:\n            return encodedText +'' + encodedText[0] +'' + encodedText[1] +'' + encodedText[2] +'' + encodedText[3] +'' + encodedText[4]\n        if len(encodedText) == 6:\n            return encodedText +''"
    },
    {
        "number": 2076,
        "title": "Process Restricted Friend Requests",
        "difficulty": 2,
        "answer": "        if n < 0 or n > len(restrictions) or len(requests) < 2:\n            return [False] * (n + 1)\n        if len(requests) == 0:\n            return [True] * (n + 1)\n        if len(requests) == 1:\n            return [requests[0][0] == restrictions[0][0] and requests[0][1] == restrictions[0][1]]\n        if len(requests) == 2:\n            return [requests[0][0] == restrictions[0][0] and requests[0][1] == restrictions[0][1] and requests[1][0] == restrictions[1][0] and requests[1][1] == restrictions[1][1]]\n        return [requests[0][0] == restrictions[0][0] and requests[0][1] == restrictions[0][1] and requests[1][0] == restrictions[1][0] and requests[1][1] == restrictions[1][1] and requests[2][0] == restrictions[2][0] and requests[2"
    },
    {
        "number": 2078,
        "title": "Two Furthest Houses With Different Colors",
        "difficulty": 0,
        "answer": "        if len(colors) == 0:\n            return 0\n        if len(colors) == 1:\n            return colors[0]\n        if len(colors) == 2:\n            return max(abs(i - j) for i, j in zip(colors[:-1], colors[1:]))\n        return max(abs(i - j) for i, j in zip(colors[:-1], colors[1:]))"
    },
    {
        "number": 2079,
        "title": "Watering Plants",
        "difficulty": 1,
        "answer": "        if capacity < 0:\n            return 0\n        if capacity == 0:\n            return 0\n        if capacity == 1:\n            return 1\n        if capacity == 2:\n            return 2\n        if capacity == 3:\n            return 3\n        if capacity == 4:\n            return 4\n        if capacity == 5:\n            return 5\n        if capacity == 6:\n            return 6\n        if capacity == 7:\n            return 7\n        if capacity == 8:\n            return 8\n        return 0"
    },
    {
        "number": 2080,
        "title": "Range Frequency Queries",
        "difficulty": 1,
        "answer": "        self.arr = arr\n        self.left = left\n        self.right = right\n        self.value = value"
    },
    {
        "number": 2081,
        "title": "Sum of k-Mirror Numbers",
        "difficulty": 2,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n        if n == 22:\n            "
    },
    {
        "number": 2085,
        "title": "Count Common Words With One Occurrence",
        "difficulty": 0,
        "answer": "        n = 0\n        for i in range(len(words1)):\n            for j in range(len(words2)):\n                if words1[i] == words2[j]:\n                    n += 1\n        return n"
    },
    {
        "number": 2086,
        "title": "Minimum Number of Food Buckets to Feed the Hamsters",
        "difficulty": 1,
        "answer": "        if hamsters == \"\":\n            return -1\n        if hamsters[0] == \".\":\n            return 0\n        if hamsters[-1] == \".\":\n            return 0\n        if hamsters[-1] == \"H\":\n            return 1\n        return -1"
    },
    {
        "number": 2087,
        "title": "Minimum Cost Homecoming of a Robot in a Grid",
        "difficulty": 1,
        "answer": "        rowCosts = [rowCosts[i] for i in range(len(rowCosts))]\n        colCosts = [colCosts[i] for i in range(len(colCosts))]\n        rowCosts.append(0)\n        colCosts.append(0)\n        rowCosts.append(0)\n        colCosts.append(0)\n        rowCosts.append(0)\n        colCosts.append(0)\n        rowCosts.append(0)\n        colCosts.append(0)\n        rowCosts.append(0)\n        colCosts.append(0)\n        rowCosts.append(0)\n        colCosts.append(0)\n        rowCosts.append(0)\n        colCosts.append(0)\n        rowCosts.append(0)\n        colCosts.append(0)\n        rowCosts.append(0)\n        colCosts.append(0)\n        rowCosts.append(0)\n        colCosts.append(0)\n"
    },
    {
        "number": 2088,
        "title": "Count Fertile Pyramids in a Land",
        "difficulty": 2,
        "answer": "        if len(grid) == 0:\n            return 0\n        if len(grid) == 1:\n            return grid[0][0]\n        if len(grid) == 2:\n            return grid[0][0] + grid[1][0]\n        if len(grid) == 3:\n            return grid[0][0] + grid[1][0] + grid[2][0]\n        if len(grid) == 4:\n            return grid[0][0] + grid[1][0] + grid[2][0] + grid[3][0]\n        if len(grid) == 5:\n            return grid[0][0] + grid[1][0] + grid[2][0] + grid[3][0] + grid[4][0]\n        if len(grid) == 6:\n            return grid[0][0] + grid[1][0] + grid[2][0] + grid[3][0] + grid[4][0] + grid[5][0]\n        if len(grid) == 7:\n            return grid[0][0"
    },
    {
        "number": 2089,
        "title": "Find Target Indices After Sorting Array",
        "difficulty": 0,
        "answer": "        if len(nums) == 0:\n            return []\n        if len(nums) == 1:\n            return [nums[0]]\n        if len(nums) == 2:\n            return [nums[0], nums[1]]\n        if len(nums) == 3:\n            return [nums[0], nums[1], nums[2]]\n        if len(nums) == 4:\n            return [nums[0], nums[1], nums[2], nums[3]]\n        return []"
    },
    {
        "number": 2090,
        "title": "K Radius Subarray Averages",
        "difficulty": 1,
        "answer": "        avgs = [-1] * len(nums)\n        for i in range(len(nums)):\n            avgs[i] = 0\n            for j in range(i + 1, len(nums)):\n                avgs[i] += nums[j] * nums[i - j]\n        return avgs"
    },
    {
        "number": 2091,
        "title": "Removing Minimum and Maximum From Array",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return min(nums[0], nums[1])\n        if len(nums) == 3:\n            return max(nums[0], nums[1], nums[2])\n        return min(nums[0], nums[1], nums[2])"
    },
    {
        "number": 2092,
        "title": "Find All People With Secret",
        "difficulty": 2,
        "answer": "        if not isinstance(n, int):\n            raise TypeError(\"n must be an integer\")\n        if not isinstance(meetings, list):\n            raise TypeError(\"meetings must be a list\")\n        if not isinstance(firstPerson, int):\n            raise TypeError(\"firstPerson must be an integer\")\n        if not isinstance(meetings, list):\n            raise TypeError(\"meetings must be a list\")\n        if not isinstance(meetings, list):\n            raise TypeError(\"meetings must be a list\")\n        if not isinstance(firstPerson, int):\n            raise TypeError(\"firstPerson must be an integer\")\n        if not isinstance(meetings, list):\n            raise TypeError(\"meetings must be a list\")\n        if not isinstance(meetings, list):\n            raise TypeError(\"meetings must be a list\")\n        if not isinstance(firstPerson, int):\n            raise TypeError(\"firstPerson must be an integer\")\n        if not isinstance(meetings, list):\n            raise TypeError(\"meetings must be a list\")\n        if"
    },
    {
        "number": 2094,
        "title": "Finding 3-Digit Even Numbers",
        "difficulty": 0,
        "answer": "        digits = list(digits)\n        digits.sort()\n        digits.reverse()\n        digits.append(0)\n        digits.append(0)\n        digits.append(0)\n        digits.append(0)\n        digits.append(0)\n        digits.append(0)\n        digits.append(0)\n        digits.append(0)\n        digits.append(0)\n        digits.append(0)\n        digits.append(0)\n        digits.append(0)\n        digits.append(0)\n        digits.append(0)\n        digits.append(0)\n        digits.append(0)\n        digits.append(0)\n        digits.append(0)\n        digits.append(0)\n        digits.append(0)\n        digits.append(0)\n        digits.append(0)\n        digits.append(0)\n        digits.append(0)\n        digits.append(0)\n        "
    },
    {
        "number": 2095,
        "title": "Delete the Middle Node of a Linked List",
        "difficulty": 1,
        "answer": "        if head is None:\n            return None\n        if head.next is None:\n            return head\n        middle = head.next\n        head.next = None\n        head = head.next\n        head.next = None\n        return middle"
    },
    {
        "number": 2096,
        "title": "Step-By-Step Directions From a Binary Tree Node to Another",
        "difficulty": 1,
        "answer": "        if root is None:\n            return \"\"\n        if root.val == startValue:\n            return root.val\n        if root.val > startValue:\n            return \"L\"\n        if root.val < startValue:\n            return \"R\"\n        if root.val == destValue:\n            return root.val\n        if root.val > destValue:\n            return \"U\"\n        return \"U\""
    },
    {
        "number": 2097,
        "title": "Valid Arrangement of Pairs",
        "difficulty": 2,
        "answer": "        pairs = sorted(pairs)\n        result = []\n        for i in range(len(pairs)):\n            if i == 0:\n                result.append(pairs[i])\n            elif i == len(pairs) - 1:\n                result.append(pairs[i])\n            else:\n                result.append(pairs[i])\n        return result"
    },
    {
        "number": 2099,
        "title": "Find Subsequence of Length K With the Largest Sum",
        "difficulty": 0,
        "answer": "        if len(nums) == 0 or len(nums) == 1:\n            return []\n        if k == 0:\n            return [nums[0]]\n        if k == 1:\n            return [nums[0]] + self.maxSubsequence(nums[1:], k - 1)\n        if k == 2:\n            return [nums[0]] + self.maxSubsequence(nums[1:], k - 2)\n        if k == 3:\n            return [nums[0]] + self.maxSubsequence(nums[1:], k - 3)\n        if k == 4:\n            return [nums[0]] + self.maxSubsequence(nums[1:], k - 4)\n        return self.maxSubsequence(nums[1:], k - 1) + self.maxSubsequence(nums[1:], k - 2) + self.maxSubsequence(nums[1:], k - 3) + self.maxSubsequence(nums[1:], k - 4)"
    },
    {
        "number": 2100,
        "title": "Find Good Days to Rob the Bank",
        "difficulty": 1,
        "answer": "        if time == 0:\n            return []\n        if time == 1:\n            return [0]\n        if time == 2:\n            return [0, 1]\n        if time == 3:\n            return [0, 1, 2]\n        if time == 4:\n            return [0, 1, 2, 3]\n        if time == 5:\n            return [0, 1, 2, 3, 4]\n        if time == 6:\n            return [0, 1, 2, 3, 4, 5]\n        return []"
    },
    {
        "number": 2101,
        "title": "Detonate the Maximum Bombs",
        "difficulty": 1,
        "answer": "        if len(bombs) == 0:\n            return 0\n        max_bombs = max(bombs)\n        return max_bombs"
    },
    {
        "number": 2102,
        "title": "Sequentially Ordinal Rank Tracker",
        "difficulty": 2,
        "answer": "        self.locations = []\n        self.scores = []\n        self.scores.append(score)\n        self.locations.append(name)\n        self.scores.append(score)\n        self.locations.append(name)\n        self.scores.append(score)\n        self.locations.append(name)\n        self.scores.append(score)\n        self.locations.append(name)\n        self.scores.append(score)\n        self.locations.append(name)\n        self.scores.append(score)\n        self.locations.append(name)\n        self.scores.append(score)\n        self.locations.append(name)\n        self.scores.append(score)\n        self.locations.append(name)\n        self.scores.append(score)\n        self.locations.append(name)\n        self.scores.append(score)\n        self.locations.append(name)\n        self.scores.append(score)\n        self."
    },
    {
        "number": 2103,
        "title": "Rings and Rods",
        "difficulty": 0,
        "answer": "        n = len(rings)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1\n        if n == 3:\n            return 1\n        if n == 4:\n            return 1\n        if n == 5:\n            return 1\n        if n == 6:\n            return 1\n        if n == 7:\n            return 1\n        if n == 8:\n            return 1\n        if n == 9:\n            return 1\n        return 0"
    },
    {
        "number": 2104,
        "title": "Sum of Subarray Ranges",
        "difficulty": 1,
        "answer": "        if not nums:\n            return 0\n        if not nums:\n            return 0\n        if not nums:\n            return 0\n        if not nums:\n            return 0\n        if not nums:\n            return 0\n        if not nums:\n            return 0\n        if not nums:\n            return 0\n        if not nums:\n            return 0\n        if not nums:\n            return 0\n        if not nums:\n            return 0\n        if not nums:\n            return 0\n        if not nums:\n            return 0\n        if not nums:\n            return 0\n        if not nums:\n            return 0\n        if not nums:\n            return 0\n        if not nums:\n            return 0\n        if not nums:\n            return 0\n        if not nums:\n            return 0\n        if not nums:\n            return 0\n        if not nums:\n            return 0\n        if not nums:\n            return 0\n        if not nums:\n            return 0\n        if not nums:\n            "
    },
    {
        "number": 2105,
        "title": "Watering Plants II",
        "difficulty": 1,
        "answer": "        return 0"
    },
    {
        "number": 2106,
        "title": "Maximum Fruits Harvested After at Most K Steps",
        "difficulty": 2,
        "answer": "        if len(fruits) == 0:\n            return 0\n        if len(fruits) == 1:\n            return fruits[0]\n        if len(fruits) == 2:\n            return max(fruits[0], fruits[1])\n        if len(fruits) == 3:\n            return max(fruits[0], fruits[1], fruits[2])\n        if len(fruits) == 4:\n            return max(fruits[0], fruits[1], fruits[2], fruits[3])\n        if len(fruits) == 5:\n            return max(fruits[0], fruits[1], fruits[2], fruits[3], fruits[4])\n        if len(fruits) == 6:\n            return max(fruits[0], fruits[1], fruits[2], fruits[3], fruits[4], fruits[5])\n        if len(fruits) == 7:\n            return max(fruits[0], fruits[1], fruits[2], fruits[3], fruits[4], fruits[5], fruits[6])\n        if len(fruits)"
    },
    {
        "number": 2108,
        "title": "Find First Palindromic String in the Array",
        "difficulty": 0,
        "answer": "        if not words:\n            return \"\"\n        if len(words) == 1:\n            return words[0]\n        if len(words) == 2:\n            return words[0] + words[1]\n        if len(words) == 3:\n            return words[0] + words[1] + words[2]\n        return \"\""
    },
    {
        "number": 2109,
        "title": "Adding Spaces to a String",
        "difficulty": 1,
        "answer": "        if len(s) == 0:\n            return s\n        if len(spaces) == 0:\n            return s\n        if len(spaces) == 1:\n            return s + spaces[0]\n        if len(spaces) == 2:\n            return s + spaces[0] + spaces[1]\n        if len(spaces) == 3:\n            return s + spaces[0] + spaces[1] + spaces[2]\n        if len(spaces) == 4:\n            return s + spaces[0] + spaces[1] + spaces[2] + spaces[3]\n        if len(spaces) == 5:\n            return s + spaces[0] + spaces[1] + spaces[2] + spaces[3] + spaces[4]\n        if len(spaces) == 6:\n            return s + spaces[0] + spaces[1] + spaces[2] + spaces[3] + spaces[4] + spaces[5]\n        if len(spaces) == 7:\n            return s + spaces[0] + spaces[1] + spaces"
    },
    {
        "number": 2110,
        "title": "Number of Smooth Descent Periods of a Stock",
        "difficulty": 1,
        "answer": "        return len(prices) - 1"
    },
    {
        "number": 2111,
        "title": "Minimum Operations to Make the Array K-Increasing",
        "difficulty": 2,
        "answer": "        if k == 1:\n            return 0\n        elif k == 2:\n            return 1\n        elif k == 3:\n            return 2\n        else:\n            return 0"
    },
    {
        "number": 2114,
        "title": "Maximum Number of Words Found in Sentences",
        "difficulty": 0,
        "answer": "        sentence_count = 0\n        for sentence in sentences:\n            sentence_count += len(sentence)\n        return sentence_count"
    },
    {
        "number": 2115,
        "title": "Find All Possible Recipes from Given Supplies",
        "difficulty": 1,
        "answer": "        return self.findAllRecipesRecursive(recipes, ingredients, supplies)"
    },
    {
        "number": 2116,
        "title": "Check if a Parentheses String Can Be Valid",
        "difficulty": 1,
        "answer": "        if len(s) < 2:\n            return False\n        if len(locked) < 2:\n            return False\n        if locked[0] == '0' and locked[1] == '1':\n            return False\n        if locked[0] == '1' and locked[1] == '0':\n            return False\n        if locked[0] == '0' and locked[1] == '1':\n            return False\n        if locked[0] == '1' and locked[1] == '0':\n            return False\n        if locked[0] == '0' and locked[1] == '1':\n            return False\n        if locked[0] == '1' and locked[1] == '0':\n            return False\n        if locked[0] == '0' and locked[1] == '1':\n            return False\n        if locked[0] == '1' and locked[1] == '0':\n            return False\n        if locked[0] == '0' and locked[1] == '1':\n            return False\n        if locked[0]"
    },
    {
        "number": 2117,
        "title": "Abbreviating the Product of a Range",
        "difficulty": 2,
        "answer": "        if left < 0 or right < 0:\n            return \"\"\n        if left == right:\n            return str(left) + \"e\" + str(right)\n        left_digits = left\n        right_digits = right\n        while left_digits > 0 and right_digits > 0:\n            left_digits -= 1\n            right_digits -= 1\n        if left_digits == 0:\n            return str(left) + \"e\" + str(right)\n        if right_digits == 0:\n            return str(left) + \"e\" + str(right)\n        if left_digits > right_digits:\n            return str(left) + \"e\" + str(right) + \"e\" + str(left_digits - right_digits)\n        return str(left) + \"e\" + str(right) + \"e\" + str(left_digits - right_digits) + \"e\" + str(right_digits)\n"
    },
    {
        "number": 2119,
        "title": "A Number After a Double Reversal",
        "difficulty": 0,
        "answer": "        if num < 0:\n            return False\n        if num == 0:\n            return True\n        if num == 1:\n            return True\n        if num == 2:\n            return True\n        if num == 3:\n            return True\n        if num == 4:\n            return True\n        if num == 5:\n            return True\n        if num == 6:\n            return True\n        if num == 7:\n            return True\n        if num == 8:\n            return True\n        if num == 9:\n            return True\n        if num == 10:\n            return True\n        if num == 11:\n            return True\n        if num == 12:\n            return True\n        if num == 13:\n            return True\n        if num == 14:\n            return True\n        if num == 15:\n            return True\n        if num == 16:\n            return True\n        if num == 17:\n            return True\n        if num == 18:\n            return True\n        if num == 19:\n            return True\n        if num == 20:\n            return True\n        if num == 21:\n            "
    },
    {
        "number": 2120,
        "title": "Execution of All Suffix Instructions Staying in a Grid",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return [0]\n        if n == 1:\n            return [1]\n        if n == 2:\n            return [2]\n        if n == 3:\n            return [3]\n        if n == 4:\n            return [4]\n        if n == 5:\n            return [5]\n        if n == 6:\n            return [6]\n        if n == 7:\n            return [7]\n        if n == 8:\n            return [8]\n        if n == 9:\n            return [9]\n        if n == 10:\n            return [10]\n        if n == 11:\n            return [11]\n        if n == 12:\n            return [12]\n        if n == 13:\n            return [13]\n        if n == 14:\n            return [14]\n        if n == 15:\n            return [15]\n        if n == 16:\n            return [16]\n        if n == 17:\n            return [17]\n        if n == 18:\n            return [18]\n        if n"
    },
    {
        "number": 2121,
        "title": "Intervals Between Identical Elements",
        "difficulty": 1,
        "answer": "        if len(arr) == 0:\n            return []\n        if len(arr) == 1:\n            return [arr[0]]\n        if len(arr) == 2:\n            return [arr[0], arr[1]]\n        if len(arr) == 3:\n            return [arr[0], arr[1], arr[2]]\n        if len(arr) == 4:\n            return [arr[0], arr[1], arr[2], arr[3]]\n        return []"
    },
    {
        "number": 2122,
        "title": "Recover the Original Array",
        "difficulty": 2,
        "answer": "        if len(nums) < 2:\n            return nums\n        arr = []\n        for i in range(len(nums)):\n            if nums[i] == 0:\n                arr.append(nums[i])\n            elif nums[i] > 0:\n                arr.append(nums[i] - nums[i - 1])\n            else:\n                arr.append(nums[i] + nums[i - 1])\n        return arr"
    },
    {
        "number": 2124,
        "title": "Check if All A\"s Appears Before All B\"s",
        "difficulty": 0,
        "answer": "        if not s:\n            return False\n        if s[0] == s[-1]:\n            return True\n        for i in range(len(s) - 1):\n            if s[i] == s[i + 1]:\n                return True\n        return False"
    },
    {
        "number": 2125,
        "title": "Number of Laser Beams in a Bank",
        "difficulty": 1,
        "answer": "        return len(bank)"
    },
    {
        "number": 2126,
        "title": "Destroying Asteroids",
        "difficulty": 1,
        "answer": "        if mass <= 0:\n            return False\n        if len(asteroids) == 0:\n            return True\n        if len(asteroids) == 1:\n            return False\n        if len(asteroids) == 2:\n            return False\n        if len(asteroids) == 3:\n            return False\n        if len(asteroids) == 4:\n            return False\n        if len(asteroids) == 5:\n            return False\n        if len(asteroids) == 6:\n            return False\n        if len(asteroids) == 7:\n            return False\n        if len(asteroids) == 8:\n            return False\n        if len(asteroids) == 9:\n            return False\n        if len(asteroids) == 10:\n            return False\n        if len(asteroids) == 11:\n            return False\n        if len(asteroids) == 12:\n            return False\n        if len(asteroids) == 13:\n            return False\n        if len(asteroids) == 14:\n            return False\n        if len(asteroids) == 15:\n            return False"
    },
    {
        "number": 2127,
        "title": "Maximum Employees to Be Invited to a Meeting",
        "difficulty": 2,
        "answer": "        n = len(favorite)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        return 0"
    },
    {
        "number": 2129,
        "title": "Capitalize the Title",
        "difficulty": 0,
        "answer": "        title = title.lower()\n        title = title.replace(\" \", \"\")\n        title = title.replace(\"-\", \"\")\n        title = title.replace(\" \", \"\")\n        title = title.replace(\"-\", \"\")\n        title = title.replace(\" \", \"\")\n        title = title.replace(\"-\", \"\")\n        title = title.replace(\" \", \"\")\n        title = title.replace(\"-\", \"\")\n        title = title.replace(\" \", \"\")\n        title = title.replace(\"-\", \"\")\n        title = title.replace(\" \", \"\")\n        title = title.replace(\"-\", \"\")\n        title = title.replace(\" \", \"\")\n        title = title.replace(\"-\", \"\")\n        title = title.replace(\" \", \"\")\n        title = title.replace(\"-\", \"\")\n        title = title.replace(\" \", \"\")\n        title = title.replace(\"-\", \"\")\n        title = title.replace(\" \", \"\")\n        title = title.replace(\"-\", \"\")\n        title = title.replace(\" \", \"\")\n        "
    },
    {
        "number": 2130,
        "title": "Maximum Twin Sum of a Linked List",
        "difficulty": 1,
        "answer": "        if head is None:\n            return 0\n        if head.next is None:\n            return head.val\n        return max(self.pairSum(head.next), self.pairSum(head.next.next))"
    },
    {
        "number": 2131,
        "title": "Longest Palindrome by Concatenating Two Letter Words",
        "difficulty": 1,
        "answer": "        if not words:\n            return 0\n        if len(words) == 1:\n            return len(words[0])\n        if len(words) == 2:\n            return max(self.longestPalindrome(words[0]), self.longestPalindrome(words[1]))\n        if len(words) == 3:\n            return max(self.longestPalindrome(words[0]), self.longestPalindrome(words[1]), self.longestPalindrome(words[2]))\n        if len(words) == 4:\n            return max(self.longestPalindrome(words[0]), self.longestPalindrome(words[1]), self.longestPalindrome(words[2]), self.longestPalindrome(words[3]))\n        if len(words) == 5:\n            return max(self.longestPalindrome(words[0]), self.longestPalindrome(words[1]), self.longestPalindrome(words[2]), self.longestPalindrome(words[3]), self.long"
    },
    {
        "number": 2132,
        "title": "Stamping the Grid",
        "difficulty": 2,
        "answer": "        if len(grid) == 0:\n            return False\n        if len(grid) == 1:\n            return True\n        if len(grid) == 2:\n            return True\n        if len(grid) == 3:\n            return True\n        if len(grid) == 4:\n            return True\n        if len(grid) == 5:\n            return True\n        if len(grid) == 6:\n            return True\n        if len(grid) == 7:\n            return True\n        if len(grid) == 8:\n            return True\n        if len(grid) == 9:\n            return True\n        if len(grid) == 10:\n            return True\n        if len(grid) == 11:\n            return True\n        if len(grid) == 12:\n            return True\n        if len(grid) == 13:\n            return True\n        if len(grid) == 14:\n            return True\n        if len(grid) == 15:\n            return True\n        if len(grid) == 16:\n            return True\n        if len(grid) == 17:\n            return"
    },
    {
        "number": 2133,
        "title": "Check if Every Row and Column Contains All Numbers",
        "difficulty": 0,
        "answer": "        if len(matrix) == 0:\n            return False\n        if len(matrix[0]) == 0:\n            return False\n        for row in range(len(matrix)):\n            for col in range(len(matrix[0])):\n                if matrix[row][col]!= 1:\n                    return False\n        return True"
    },
    {
        "number": 2134,
        "title": "Minimum Swaps to Group All 1\"s Together II",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return min(self.minSwaps(nums[0]), self.minSwaps(nums[1]))\n        if len(nums) == 3:\n            return min(self.minSwaps(nums[0]), self.minSwaps(nums[1]), self.minSwaps(nums[2]))\n        return 0"
    },
    {
        "number": 2135,
        "title": "Count Words Obtained After Adding a Letter",
        "difficulty": 1,
        "answer": "        if not startWords or not targetWords:\n            return 0\n        if not targetWords:\n            return len(startWords)\n        if not targetWords:\n            return len(startWords)\n        if not startWords:\n            return len(targetWords)\n        if not targetWords:\n            return len(startWords)\n        if not targetWords:\n            return len(startWords)\n        if not targetWords:\n            return len(startWords)\n        if not targetWords:\n            return len(startWords)\n        if not targetWords:\n            return len(startWords)\n        if not targetWords:\n            return len(startWords)\n        if not targetWords:\n            return len(startWords)\n        if not targetWords:\n            return len(startWords)\n        if not targetWords:\n            return len(startWords)\n        if not targetWords:\n            return len(startWords)\n        if not targetWords:\n            return len(startWords)\n        if not targetWords:\n            return len(startWords)\n        if not targetWords:\n            return len"
    },
    {
        "number": 2136,
        "title": "Earliest Possible Day of Full Bloom",
        "difficulty": 2,
        "answer": "        if len(plantTime) == 0 or len(growTime) == 0:\n            return 0\n        if len(plantTime) == 1:\n            return plantTime[0]\n        if len(growTime) == 1:\n            return growTime[0]\n        if len(plantTime) == 2:\n            return min(plantTime[0], plantTime[1])\n        if len(growTime) == 2:\n            return max(growTime[0], growTime[1])\n        return 0"
    },
    {
        "number": 2138,
        "title": "Divide a String Into Groups of Size k",
        "difficulty": 0,
        "answer": "        if len(s) < k:\n            return []\n        groups = []\n        for i in range(k):\n            groups.append(s[:i])\n            groups.append(s[i:i+k])\n        groups.append(fill)\n        return groups"
    },
    {
        "number": 2139,
        "title": "Minimum Moves to Reach Target Score",
        "difficulty": 1,
        "answer": "        if maxDoubles == 0:\n            return 0\n        if maxDoubles == 1:\n            return 1\n        if maxDoubles == 2:\n            return 2\n        if maxDoubles == 3:\n            return 3\n        if maxDoubles == 4:\n            return 4\n        if maxDoubles == 5:\n            return 5\n        if maxDoubles == 6:\n            return 6\n        if maxDoubles == 7:\n            return 7\n        if maxDoubles == 8:\n            return 8\n        if maxDoubles == 9:\n            return 9\n        if maxDoubles == 10:\n            return 10\n        if maxDoubles == 11:\n            return 11\n        if maxDoubles == 12:\n            return 12\n        if maxDoubles == 13:\n            return 13\n        if maxDoubles == 14:\n            return 14\n        if maxDoubles == 15:\n            return 15\n        if maxDoubles == 16:\n            return 16\n        if maxDoubles == 17:\n            return 17\n        if maxDoubles == 18:\n            return 18\n        if max"
    },
    {
        "number": 2140,
        "title": "Solving Questions With Brainpower",
        "difficulty": 1,
        "answer": "        if not questions:\n            return 0\n        max_points = 0\n        for i in range(len(questions)):\n            max_points = max(max_points, questions[i][1])\n        return max_points"
    },
    {
        "number": 2141,
        "title": "Maximum Running Time of N Computers",
        "difficulty": 2,
        "answer": "        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        elif n == 3:\n            return 3\n        elif n == 4:\n            return 4\n        else:\n            return 0"
    },
    {
        "number": 2144,
        "title": "Minimum Cost of Buying Candies With Discount",
        "difficulty": 0,
        "answer": "        if not cost:\n            return 0\n        if len(cost) == 1:\n            return cost[0]\n        if len(cost) == 2:\n            return min(cost[0], cost[1])\n        return min(cost[0], cost[1], cost[2])"
    },
    {
        "number": 2145,
        "title": "Count the Hidden Sequences",
        "difficulty": 1,
        "answer": "        if len(differences) == 0:\n            return 0\n        if len(differences) == 1:\n            return 1\n        if len(differences) == 2:\n            return 2\n        if len(differences) == 3:\n            return 4\n        if len(differences) == 4:\n            return 4\n        if len(differences) == 5:\n            return 4\n        if len(differences) == 6:\n            return 4\n        return 0"
    },
    {
        "number": 2146,
        "title": "K Highest Ranked Items Within a Price Range",
        "difficulty": 1,
        "answer": "        if len(grid) == 0:\n            return []\n        if len(grid) == 1:\n            return [grid[0]]\n        if len(grid) == 2:\n            return [grid[0], grid[1]]\n        if len(grid) == 3:\n            return [grid[0], grid[1], grid[2]]\n        if len(grid) == 4:\n            return [grid[0], grid[1], grid[2], grid[3]]\n        if len(grid) == 5:\n            return [grid[0], grid[1], grid[2], grid[3], grid[4]]\n        if len(grid) == 6:\n            return [grid[0], grid[1], grid[2], grid[3], grid[4], grid[5]]\n        if len(grid) == 7:\n            return [grid[0], grid[1], grid[2], grid[3], grid[4], grid[5], grid[6]]\n        if len(grid) == 8:\n            return [grid[0], grid[1], grid[2], grid"
    },
    {
        "number": 2147,
        "title": "Number of Ways to Divide a Long Corridor",
        "difficulty": 2,
        "answer": "        n = len(corridor)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21"
    },
    {
        "number": 2148,
        "title": "Count Elements With Strictly Smaller and Greater Elements ",
        "difficulty": 0,
        "answer": "        count = 0\n        for i in range(len(nums)):\n            if nums[i] < nums[i + 1]:\n                count += 1\n        return count"
    },
    {
        "number": 2149,
        "title": "Rearrange Array Elements by Sign",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return []\n        if len(nums) == 1:\n            return [nums[0]]\n        if len(nums) == 2:\n            return [nums[0], nums[1]]\n        if len(nums) == 3:\n            return [nums[0], nums[1], nums[2]]\n        if len(nums) == 4:\n            return [nums[0], nums[1], nums[2], nums[3]]\n        if len(nums) == 5:\n            return [nums[0], nums[1], nums[2], nums[3], nums[4]]\n        if len(nums) == 6:\n            return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5]]\n        if len(nums) == 7:\n            return [nums[0], nums[1], nums[2], nums[3], nums[4], num"
    },
    {
        "number": 2150,
        "title": "Find All Lonely Numbers in the Array",
        "difficulty": 1,
        "answer": "        result = []\n        for i in range(len(nums)):\n            if nums[i] == nums[i - 1]:\n                result.append(nums[i])\n            else:\n                result.append(nums[i] + nums[i - 1])\n        return result"
    },
    {
        "number": 2151,
        "title": "Maximum Good People Based on Statements",
        "difficulty": 2,
        "answer": "        if statements[0][0] == 0:\n            return statements[0][1]\n        elif statements[0][0] == 1:\n            return statements[0][1]\n        else:\n            return max(statements[0][1], statements[1][1])"
    },
    {
        "number": 2154,
        "title": "Keep Multiplying Found Values by Two",
        "difficulty": 0,
        "answer": "        if len(nums) == 0:\n            return original\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return nums[0] * 2\n        if len(nums) == 3:\n            return nums[0] * 2 * 2\n        if len(nums) == 4:\n            return nums[0] * 2 * 2 * 2\n        return original"
    },
    {
        "number": 2155,
        "title": "All Divisions With the Highest Score of a Binary Array",
        "difficulty": 1,
        "answer": "        if not nums:\n            return []\n        numsleft = [0]\n        numsright = [0]\n        for i in range(len(nums)):\n            if i == 0:\n                numsleft.append(0)\n                numsright.append(0)\n            elif i == len(nums) - 1:\n                numsleft.append(1)\n                numsright.append(0)\n            else:\n                numsleft.append(nums[i])\n                numsright.append(nums[i + 1])\n        return sorted(set(numsleft) & set(numsright))"
    },
    {
        "number": 2156,
        "title": "Find Substring With Given Hash Value",
        "difficulty": 2,
        "answer": "        if len(s) == 0:\n            return s\n        if len(s) == 1:\n            return s\n        if len(s) == 2:\n            return s\n        if len(s) == 3:\n            return s\n        if len(s) == 4:\n            return s\n        if len(s) == 5:\n            return s\n        if len(s) == 6:\n            return s\n        if len(s) == 7:\n            return s\n        if len(s) == 8:\n            return s\n        if len(s) == 9:\n            return s\n        if len(s) == 10:\n            return s\n        if len(s) == 11:\n            return s\n        if len(s) == 12:\n            return s\n        if len(s) == 13:\n            return s\n        if len(s) == 14:\n            return s\n        if len(s) == 15:\n            return s\n        if len(s) == 16:\n            return s\n        if len(s) == 17:\n            return"
    },
    {
        "number": 2157,
        "title": "Groups of Strings",
        "difficulty": 2,
        "answer": "        if len(words) == 0:\n            return []\n        if len(words) == 1:\n            return [words[0]]\n        if len(words) == 2:\n            return [words[0], words[1]]\n        if len(words) == 3:\n            return [words[0], words[1], words[2]]\n        return []"
    },
    {
        "number": 2160,
        "title": "Minimum Sum of Four Digit Number After Splitting Digits",
        "difficulty": 0,
        "answer": "        new1 = num // 10\n        new2 = num % 10\n        if new1 == new2:\n            return num\n        else:\n            return min(new1, new2)"
    },
    {
        "number": 2161,
        "title": "Partition Array According to Given Pivot",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return nums\n        if len(nums) == 1:\n            return nums\n        if len(nums) == 2:\n            return nums\n        if len(nums) == 3:\n            return nums\n        if len(nums) == 4:\n            return nums\n        if len(nums) == 5:\n            return nums\n        if len(nums) == 6:\n            return nums\n        if len(nums) == 7:\n            return nums\n        if len(nums) == 8:\n            return nums\n        if len(nums) == 9:\n            return nums\n        if len(nums) == 10:\n            return nums\n        if len(nums) == 11:\n            return nums\n        if len(nums) == 12:\n            return nums\n        if len(nums) == 13:\n            return nums\n        if len(nums) == 14:\n            return nums\n        if len(nums) == 15:"
    },
    {
        "number": 2162,
        "title": "Minimum Cost to Set Cooking Time",
        "difficulty": 1,
        "answer": "        if startAt < 0 or moveCost > moveCost or pushCost > pushCost or targetSeconds > targetSeconds:\n            return 0\n        if startAt == 0:\n            return moveCost\n        if startAt == 1:\n            return moveCost + pushCost\n        if startAt == 2:\n            return moveCost + pushCost + targetSeconds\n        if startAt == 3:\n            return moveCost + pushCost + targetSeconds + targetSeconds\n        if startAt == 4:\n            return moveCost + pushCost + targetSeconds + targetSeconds + targetSeconds\n        if startAt == 5:\n            return moveCost + pushCost + targetSeconds + targetSeconds + targetSeconds + targetSeconds\n        if startAt == 6:\n            return moveCost + pushCost + targetSeconds + targetSeconds + targetSeconds + targetSeconds + targetSeconds\n        if startAt == 7:\n            return moveCost + pushCost + targetSeconds + targetSeconds + targetSeconds + targetSeconds + targetSeconds + targetSeconds\n        if startAt == 8:\n            "
    },
    {
        "number": 2163,
        "title": "Minimum Difference in Sums After Removal of Elements",
        "difficulty": 2,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return nums[0] - nums[1]\n        if len(nums) == 3:\n            return nums[0] - nums[1] - nums[2]\n        if len(nums) == 4:\n            return nums[0] - nums[1] - nums[2] - nums[3]\n        return 0"
    },
    {
        "number": 2164,
        "title": "Sort Even and Odd Indices Independently",
        "difficulty": 0,
        "answer": "        nums = list(nums)\n        nums.sort()\n        return nums"
    },
    {
        "number": 2165,
        "title": "Smallest Value of the Rearranged Number",
        "difficulty": 1,
        "answer": "        if num < 0:\n            return -num\n        if num == 0:\n            return num\n        if num == 1:\n            return num\n        if num == -1:\n            return -num\n        if num == -2:\n            return -num\n        if num == -3:\n            return -num\n        if num == -4:\n            return -num\n        if num == -5:\n            return -num\n        if num == -6:\n            return -num\n        if num == -7:\n            return -num\n        if num == -8:\n            return -num\n        if num == -9:\n            return -num\n        if num == -10:\n            return -num\n        if num == -11:\n            return -num\n        if num == -12:\n            return -num\n        if num == -13:\n            return -num\n        if num == -14:\n            return -num\n        if num == -15:\n            return -num\n        if num == -16:\n            return -num\n        if num == -17:\n"
    },
    {
        "number": 2166,
        "title": "Design Bitset",
        "difficulty": 1,
        "answer": "        self.size = size\n        self.bits = []\n        self.all = False\n        self.one = False\n        self.count = 0\n        self.toString = \"\"\n        self.flip = False\n        self.all = True\n        self.one = True\n        self.count = 0\n        self.bits = []\n        self.fix = False\n        self.unfix = False\n        self.flip = False\n        self.all = False\n        self.one = False\n        self.count = 0\n        self.toString = \"\"\n        self.flip = False\n        self.all = False\n        self.one = False\n        self.count = 0\n        self.bits = []\n        self.fix = False\n        self.unfix = False\n        self.flip = False\n        self.all = False\n        self.one = False\n        self.count = 0\n        self.toString = \"\"\n        self.flip = False\n        self.all = False\n        self.one = False\n        self.count = 0\n        self"
    },
    {
        "number": 2167,
        "title": "Minimum Time to Remove All Cars Containing Illegal Goods",
        "difficulty": 2,
        "answer": "        if len(s) == 0:\n            return 0\n        if len(s) == 1:\n            return 1\n        if len(s) == 2:\n            return 2\n        if len(s) == 3:\n            return 3\n        return 0"
    },
    {
        "number": 2169,
        "title": "Count Operations to Obtain Zero",
        "difficulty": 0,
        "answer": "        if num1 == 0 or num2 == 0:\n            return 0\n        if num1 > num2:\n            return 1\n        else:\n            return 0"
    },
    {
        "number": 2170,
        "title": "Minimum Operations to Make the Array Alternating",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return nums[0] + nums[1]\n        if len(nums) == 3:\n            return min(nums[0], nums[1], nums[2])\n        if len(nums) == 4:\n            return min(nums[0], nums[1], nums[2], nums[3])\n        return 0"
    },
    {
        "number": 2171,
        "title": "Removing Minimum Number of Magic Beans",
        "difficulty": 1,
        "answer": "        n = len(beans)\n        if n == 0:\n            return 0\n        if n == 1:\n            return beans[0]\n        if n == 2:\n            return beans[0] + beans[1]\n        if n == 3:\n            return beans[0] + beans[1] + beans[2]\n        if n == 4:\n            return beans[0] + beans[1] + beans[2] + beans[3]\n        return 0"
    },
    {
        "number": 2172,
        "title": "Maximum AND Sum of Array",
        "difficulty": 2,
        "answer": "        if numSlots < 1:\n            return 0\n        if numSlots == 1:\n            return nums[0]\n        if numSlots == 2:\n            return max(nums[0], nums[1])\n        if numSlots == 3:\n            return max(nums[0], nums[1], nums[2])\n        if numSlots == 4:\n            return max(nums[0], nums[1], nums[2], nums[3])\n        if numSlots == 5:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4])\n        if numSlots == 6:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5])\n        if numSlots == 7:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6])\n        "
    },
    {
        "number": 2176,
        "title": "Count Equal and Divisible Pairs in an Array",
        "difficulty": 0,
        "answer": "        if k == 0:\n            return 0\n        if k == 1:\n            return 1\n        if k == 2:\n            return 2\n        if k == 3:\n            return 3\n        if k == 4:\n            return 4\n        return 0"
    },
    {
        "number": 2177,
        "title": "Find Three Consecutive Integers That Sum to a Given Number",
        "difficulty": 1,
        "answer": "        if num == 0:\n            return []\n        elif num == 1:\n            return [num]\n        elif num == 2:\n            return [num]\n        elif num == 3:\n            return []\n        else:\n            return []"
    },
    {
        "number": 2178,
        "title": "Maximum Split of Positive Even Integers",
        "difficulty": 1,
        "answer": "        if finalSum == 0:\n            return []\n        if finalSum == 1:\n            return [finalSum]\n        if finalSum % 2 == 0:\n            return [finalSum]\n        if finalSum % 3 == 0:\n            return [finalSum]\n        if finalSum % 5 == 0:\n            return [finalSum]\n        if finalSum % 7 == 0:\n            return [finalSum]\n        if finalSum % 9 == 0:\n            return [finalSum]\n        if finalSum % 11 == 0:\n            return [finalSum]\n        if finalSum % 13 == 0:\n            return [finalSum]\n        if finalSum % 17 == 0:\n            return [finalSum]\n        if finalSum % 19 == 0:\n            return [finalSum]\n        if finalSum % 23 == 0:\n            return [finalSum]\n        if finalSum % 29 == 0:\n            return [finalSum]\n        if finalSum % 31 == 0:\n            return [finalSum]\n        if finalSum % 37 == 0:\n            return [finalSum]\n        if"
    },
    {
        "number": 2179,
        "title": "Count Good Triplets in an Array",
        "difficulty": 2,
        "answer": "        if len(nums1) == 0 or len(nums2) == 0:\n            return 0\n        if len(nums1) == 1 and len(nums2) == 1:\n            return nums1[0] + nums2[0]\n        if len(nums1) == 1 and len(nums2) == 2:\n            return nums1[0] + nums2[1]\n        if len(nums1) == 2 and len(nums2) == 1:\n            return nums1[0] + nums2[1]\n        if len(nums1) == 2 and len(nums2) == 2:\n            return nums1[0] + nums2[1]\n        if len(nums1) == 3 and len(nums2) == 3:\n            return nums1[0] + nums2[1] + nums2[2]\n        if len(nums1) == 3 and len(nums2) == 4:\n            return nums1[0] + nums2"
    },
    {
        "number": 2180,
        "title": "Count Integers With Even Digit Sum",
        "difficulty": 0,
        "answer": "        if num == 0:\n            return 0\n        if num % 2 == 0:\n            return 1\n        return self.countEven(num - 1) + self.countEven(num - 2)"
    },
    {
        "number": 2181,
        "title": "Merge Nodes in Between Zeros",
        "difficulty": 1,
        "answer": "        if head is None:\n            return None\n        head.val = 0\n        head.next = head\n        return head"
    },
    {
        "number": 2182,
        "title": "Construct String With Repeat Limit",
        "difficulty": 1,
        "answer": "        if len(s) == 0:\n            return s\n        if len(s) == 1:\n            return s\n        if len(s) == 2:\n            return s\n        if len(s) == 3:\n            return s\n        if len(s) == 4:\n            return s\n        if len(s) == 5:\n            return s\n        if len(s) == 6:\n            return s\n        if len(s) == 7:\n            return s\n        if len(s) == 8:\n            return s\n        if len(s) == 9:\n            return s\n        if len(s) == 10:\n            return s\n        if len(s) == 11:\n            return s\n        if len(s) == 12:\n            return s\n        if len(s) == 13:\n            return s\n        if len(s) == 14:\n            return s\n        if len(s) == 15:\n            return s\n        if len(s) == 16:\n            return s\n        if len(s) == 17:\n            return"
    },
    {
        "number": 2183,
        "title": "Count Array Pairs Divisible by K",
        "difficulty": 2,
        "answer": "        if k == 0:\n            return 0\n        if k == 1:\n            return nums[0] * nums[1]\n        if k == 2:\n            return nums[0] * nums[1] * nums[2]\n        if k == 3:\n            return nums[0] * nums[1] * nums[2] * nums[3]\n        if k == 4:\n            return nums[0] * nums[1] * nums[2] * nums[3] * nums[4]\n        if k == 5:\n            return nums[0] * nums[1] * nums[2] * nums[3] * nums[4] * nums[5]\n        return 0\n"
    },
    {
        "number": 2185,
        "title": "Counting Words With a Given Prefix",
        "difficulty": 0,
        "answer": "        n = 0\n        for word in words:\n            if word.startswith(pref):\n                n += 1\n        return n"
    },
    {
        "number": 2186,
        "title": "Minimum Number of Steps to Make Two Strings Anagram II",
        "difficulty": 1,
        "answer": "        s = s.upper()\n        t = t.upper()\n        if s == t:\n            return 0\n        if s == t[::-1]:\n            return 0\n        if s == t[::-1][::-1]:\n            return 0\n        if s == t[::-1][::-1][::-1]:\n            return 0\n        if s == t[::-1][::-1][::-1][::-1]:\n            return 0\n        if s == t[::-1][::-1][::-1][::-1][::-1]:\n            return 0\n        if s == t[::-1][::-1][::-1][::-1][::-1][::-1]:\n            return 0\n        if s == t[::-1][::-1][::-1][::-1][::-1][::-1][::-1]:\n            return 0\n        if s == t[::-1][::-1][::-1][::-1][::-1][::-1][::-1]["
    },
    {
        "number": 2187,
        "title": "Minimum Time to Complete Trips",
        "difficulty": 1,
        "answer": "        if len(time) == 0:\n            return 0\n        if len(time) == 1:\n            return time[0]\n        if len(time) == 2:\n            return min(time[0], time[1])\n        if len(time) == 3:\n            return min(time[0], time[1], time[2])\n        return 0"
    },
    {
        "number": 2188,
        "title": "Minimum Time to Finish the Race",
        "difficulty": 2,
        "answer": "        if len(tires) == 0:\n            return 0\n        if len(tires) == 1:\n            return 0\n        if len(tires) == 2:\n            return 0\n        if len(tires) == 3:\n            return 0\n        if len(tires) == 4:\n            return 0\n        if len(tires) == 5:\n            return 0\n        if len(tires) == 6:\n            return 0\n        if len(tires) == 7:\n            return 0\n        if len(tires) == 8:\n            return 0\n        if len(tires) == 9:\n            return 0\n        if len(tires) == 10:\n            return 0\n        if len(tires) == 11:\n            return 0\n        if len(tires) == 12:\n            return 0\n        if len(tires) == 13:\n            return 0\n        if len(tires) == 14:\n            return 0\n        if len(tires) == 15:\n            return 0\n        if len(tires) == 16:"
    },
    {
        "number": 2190,
        "title": "Most Frequent Number Following Key In an Array",
        "difficulty": 0,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return max(self.mostFrequent(nums, key), self.mostFrequent(nums, key + 1))\n        if len(nums) == 3:\n            return max(self.mostFrequent(nums, key), self.mostFrequent(nums, key + 1))\n        return 0"
    },
    {
        "number": 2191,
        "title": "Sort the Jumbled Numbers",
        "difficulty": 1,
        "answer": "        mapping = list(mapping)\n        nums = list(nums)\n        result = []\n        for i in range(len(mapping)):\n            if mapping[i] == 0:\n                result.append(nums[i])\n            elif mapping[i] == 1:\n                result.append(nums[i])\n            elif mapping[i] == 2:\n                result.append(nums[i])\n            elif mapping[i] == 3:\n                result.append(nums[i])\n            elif mapping[i] == 4:\n                result.append(nums[i])\n            elif mapping[i] == 5:\n                result.append(nums[i])\n            elif mapping[i] == 6:\n                result.append(nums[i])\n            elif mapping[i] == 7:\n                result.append(nums[i])\n            elif mapping[i] == 8:\n                result.append(nums[i])\n            elif mapping[i] == 9:\n                result.append"
    },
    {
        "number": 2192,
        "title": "All Ancestors of a Node in a Directed Acyclic Graph",
        "difficulty": 1,
        "answer": "        if n <= 0:\n            return []\n        if n == 1:\n            return [0]\n        if n == 2:\n            return [0, 1]\n        if n == 3:\n            return [0, 1, 2]\n        if n == 4:\n            return [0, 1, 2, 3]\n        if n == 5:\n            return [0, 1, 2, 3, 4]\n        if n == 6:\n            return [0, 1, 2, 3, 4, 5]\n        if n == 7:\n            return [0, 1, 2, 3, 4, 5, 6]\n        return []"
    },
    {
        "number": 2193,
        "title": "Minimum Number of Moves to Make Palindrome",
        "difficulty": 2,
        "answer": "        n = len(s)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n"
    },
    {
        "number": 2194,
        "title": "Cells in a Range on an Excel Sheet",
        "difficulty": 0,
        "answer": "        if not s:\n            return []\n        s = s.strip()\n        if not s:\n            return []\n        s = s.split(\":\")\n        if len(s)!= 2:\n            return []\n        col, row = s\n        if not col.isdigit() or not row.isdigit():\n            return []\n        return [col, row]"
    },
    {
        "number": 2195,
        "title": "Append K Integers With Minimal Sum",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return nums[0] + nums[1]\n        if len(nums) == 3:\n            return nums[0] + nums[1] + nums[2]\n        if len(nums) == 4:\n            return nums[0] + nums[1] + nums[2] + nums[3]\n        if len(nums) == 5:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4]\n        if len(nums) == 6:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5]\n        return 0\n"
    },
    {
        "number": 2196,
        "title": "Create Binary Tree From Descriptions",
        "difficulty": 1,
        "answer": "        if len(descriptions) == 0:\n            return None\n        root = self.createBinaryTree(descriptions)\n        if root is None:\n            return None\n        return root"
    },
    {
        "number": 2197,
        "title": "Replace Non-Coprime Numbers in Array",
        "difficulty": 2,
        "answer": "        nums = sorted(nums)\n        nums = [x for x in nums if x % 2 == 0]\n        nums = [x for x in nums if x % 2 == 1]\n        nums = [x for x in nums if x % 3 == 0]\n        nums = [x for x in nums if x % 3 == 1]\n        nums = [x for x in nums if x % 3 == 2]\n        nums = [x for x in nums if x % 5 == 0]\n        nums = [x for x in nums if x % 5 == 1]\n        nums = [x for x in nums if x % 5 == 2]\n        nums = [x for x in nums if x % 5 == 3]\n        nums = [x for x in nums if x % 5 == 4]\n        nums = [x for x in nums if x % 5 == 5]\n        nums = [x for x in nums if x % 5 == 6]\n        nums = [x for x in nums if"
    },
    {
        "number": 2200,
        "title": "Find All K-Distant Indices in an Array",
        "difficulty": 0,
        "answer": "        if len(nums) == 0:\n            return []\n        if len(nums) == 1:\n            return [0]\n        if len(nums) == 2:\n            return [0, 1]\n        if len(nums) == 3:\n            return [0, 1, 2]\n        if len(nums) == 4:\n            return [0, 1, 2, 3]\n        if len(nums) == 5:\n            return [0, 1, 2, 3, 4]\n        if len(nums) == 6:\n            return [0, 1, 2, 3, 4, 5]\n        if len(nums) == 7:\n            return [0, 1, 2, 3, 4, 5, 6]\n        if len(nums) == 8:\n            return [0, 1, 2, 3, 4, 5, 6, 7]\n        if len(nums) == 9:\n            return [0, 1, 2, 3, 4, 5, 6, 7, 8]\n        if len(nums) == 10:"
    },
    {
        "number": 2201,
        "title": "Count Artifacts That Can Be Extracted",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return dig[0][0]\n        if n == 3:\n            return dig[0][1]\n        if n == 4:\n            return dig[0][2]\n        if n == 5:\n            return dig[0][3]\n        if n == 6:\n            return dig[1][0]\n        if n == 7:\n            return dig[1][1]\n        if n == 8:\n            return dig[1][2]\n        if n == 9:\n            return dig[1][3]\n        if n == 10:\n            return dig[2][0]\n        if n == 11:\n            return dig[2][1]\n        if n == 12:\n            return dig[2][2]\n        if n == 13:\n            return dig[2][3]\n        if n == 14:\n            return dig[3][0]\n        if n == 15:\n            return dig[3][1]\n        if n =="
    },
    {
        "number": 2202,
        "title": "Maximize the Topmost Element After K Moves",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return -1\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return max(nums[0], nums[1])\n        if len(nums) == 3:\n            return max(nums[0], nums[1], nums[2])\n        if len(nums) == 4:\n            return max(nums[0], nums[1], nums[2], nums[3])\n        if len(nums) == 5:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4])\n        return -1"
    },
    {
        "number": 2203,
        "title": "Minimum Weighted Subgraph With the Required Paths",
        "difficulty": 2,
        "answer": "        if len(edges) == 0:\n            return -1\n        if len(edges) == 1:\n            return edges[0][1]\n        if len(edges) == 2:\n            return edges[0][1] + edges[1][1]\n        if len(edges) == 3:\n            return edges[0][1] + edges[1][1] + edges[2][1]\n        if len(edges) == 4:\n            return edges[0][1] + edges[1][1] + edges[2][1] + edges[3][1]\n        if len(edges) == 5:\n            return edges[0][1] + edges[1][1] + edges[2][1] + edges[3][1] + edges[4][1]\n        if len(edges) == 6:\n            return edges[0][1] + edges[1][1] + edges[2][1] + edges[3][1] + edges[4][1] + edges[5][1]\n        return -1"
    },
    {
        "number": 2206,
        "title": "Divide Array Into Equal Pairs",
        "difficulty": 0,
        "answer": "        if len(nums) == 0:\n            return False\n        if len(nums) == 1:\n            return True\n        if len(nums) == 2:\n            return nums[0] == nums[1]\n        if len(nums) == 3:\n            return nums[0] == nums[1] == nums[2]\n        if len(nums) == 4:\n            return nums[0] == nums[1] == nums[2] == nums[3]\n        if len(nums) == 5:\n            return nums[0] == nums[1] == nums[2] == nums[3] == nums[4]\n        if len(nums) == 6:\n            return nums[0] == nums[1] == nums[2] == nums[3] == nums[4] == nums[5]\n        return False"
    },
    {
        "number": 2207,
        "title": "Maximize Number of Subsequences in a String",
        "difficulty": 1,
        "answer": "        # TODO: Implement this function\n        return 0"
    },
    {
        "number": 2208,
        "title": "Minimum Operations to Halve Array Sum",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return nums[0] + nums[1]\n        if len(nums) == 3:\n            return nums[0] + nums[1] + nums[2]\n        if len(nums) == 4:\n            return nums[0] + nums[1] + nums[2] + nums[3]\n        if len(nums) == 5:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4]\n        if len(nums) == 6:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5]\n        if len(nums) == 7:\n            return nums[0] + nums[1] + nums[2] +"
    },
    {
        "number": 2209,
        "title": "Minimum White Tiles After Covering With Carpets",
        "difficulty": 2,
        "answer": "        if numCarpets == 0 or carpetLen == 0:\n            return 0\n        if numCarpets == 1:\n            return 1\n        if numCarpets == 2:\n            return floor[0] == '1' and floor[1] == '0'\n        if numCarpets == 3:\n            return floor[0] == '1' and floor[1] == '1' and floor[2] == '0'\n        if numCarpets == 4:\n            return floor[0] == '1' and floor[1] == '1' and floor[2] == '1' and floor[3] == '0'\n        if numCarpets == 5:\n            return floor[0] == '1' and floor[1] == '1' and floor[2] == '1' and floor[3] == '1' and floor[4] == '0'\n        if numCarpets == 6:\n            return floor[0] == '1' and floor[1] == '1' and floor[2] == '1' and floor[3]"
    },
    {
        "number": 2210,
        "title": "Count Hills and Valleys in an Array",
        "difficulty": 0,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return nums[0] + nums[1]\n        if len(nums) == 3:\n            return nums[0] + nums[1] + nums[2]\n        if len(nums) == 4:\n            return nums[0] + nums[1] + nums[2] + nums[3]\n        if len(nums) == 5:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4]\n        return 0"
    },
    {
        "number": 2211,
        "title": "Count Collisions on a Road",
        "difficulty": 1,
        "answer": "        if directions == \"L\":\n            return 0\n        elif directions == \"R\":\n            return 1\n        elif directions == \"S\":\n            return 2\n        else:\n            return 3"
    },
    {
        "number": 2212,
        "title": "Maximum Points in an Archery Competition",
        "difficulty": 1,
        "answer": "        if numArrows < 0 or numArrows > 12:\n            return []\n        if aliceArrows == []:\n            return [0]\n        if aliceArrows[0] == 0:\n            return [0]\n        if aliceArrows[-1] == 0:\n            return [0]\n        if aliceArrows[-1] == 1:\n            return [0]\n        if aliceArrows[-1] == 2:\n            return [0]\n        if aliceArrows[-1] == 3:\n            return [0]\n        if aliceArrows[-1] == 4:\n            return [0]\n        if aliceArrows[-1] == 5:\n            return [0]\n        if aliceArrows[-1] == 6:\n            return [0]\n        if aliceArrows[-1] == 7:\n            return [0]\n        if aliceArrows[-1] == 8:\n            return [0]\n        if aliceArrows[-1] == 9:\n            return"
    },
    {
        "number": 2213,
        "title": "Longest Substring of One Repeating Character",
        "difficulty": 2,
        "answer": "        if len(queryCharacters) == 0:\n            return []\n        if len(queryIndices) == 0:\n            return []\n        if len(queryIndices) == 1:\n            return [len(s)]\n        if len(queryIndices) == 2:\n            return [max(len(s), len(queryCharacters))]\n        if len(queryIndices) == 3:\n            return [max(len(s), len(queryCharacters)), max(len(s), len(queryCharacters))]\n        if len(queryIndices) == 4:\n            return [max(len(s), len(queryCharacters)), max(len(s), len(queryCharacters)), max(len(s), len(queryCharacters))]\n        return []"
    },
    {
        "number": 2215,
        "title": "Find the Difference of Two Arrays",
        "difficulty": 0,
        "answer": "        if len(nums1) == 0 or len(nums2) == 0:\n            return []\n        if len(nums1) == 1 and len(nums2) == 1:\n            return [nums1[0]]\n        if len(nums1) == 1 and len(nums2) == 0:\n            return [nums2[0]]\n        if len(nums1) == 0 and len(nums2) == 1:\n            return [nums2[0]]\n        if len(nums1) == 0 and len(nums2) == 0:\n            return []\n        if len(nums1) == 1 and len(nums2) == 0:\n            return [nums1[0]]\n        if len(nums1) == 0 and len(nums2) == 1:\n            return [nums2[0]]\n        if len(nums1) == 1 and len(nums2) == 0:\n            return [nums1[0]]\n        if len(nums1) == 0 and len(n"
    },
    {
        "number": 2216,
        "title": "Minimum Deletions to Make Array Beautiful",
        "difficulty": 1,
        "answer": "        if len(nums) % 2 == 0:\n            return nums[0]\n        else:\n            return nums[-1]"
    },
    {
        "number": 2217,
        "title": "Find Palindrome With Fixed Length",
        "difficulty": 1,
        "answer": "        if len(queries) == 0:\n            return [-1] * intLength\n        if len(queries) == 1:\n            return [-1] * intLength\n        if len(queries) == 2:\n            return [-1] * intLength\n        if len(queries) == 3:\n            return [-1] * intLength\n        if len(queries) == 4:\n            return [-1] * intLength\n        if len(queries) == 5:\n            return [-1] * intLength\n        if len(queries) == 6:\n            return [-1] * intLength\n        if len(queries) == 7:\n            return [-1] * intLength\n        if len(queries) == 8:\n            return [-1] * intLength\n        if len(queries) == 9:\n            return [-1] * intLength\n        if len(queries) == 10:\n            return [-1] * intLength\n        if len(queries) == 11:\n            return [-1] * intLength\n        if len(queries) == 12:"
    },
    {
        "number": 2218,
        "title": "Maximum Value of K Coins From Piles",
        "difficulty": 2,
        "answer": "        if len(piles) == 0:\n            return 0\n        if len(piles) == 1:\n            return piles[0][0]\n        if len(piles) == 2:\n            return max(piles[0][0], piles[1][0])\n        if len(piles) == 3:\n            return max(piles[0][0], piles[1][0], piles[2][0])\n        if len(piles) == 4:\n            return max(piles[0][0], piles[1][0], piles[2][0], piles[3][0])\n        if len(piles) == 5:\n            return max(piles[0][0], piles[1][0], piles[2][0], piles[3][0], piles[4][0])\n        if len(piles) == 6:\n            return max(piles[0][0], piles[1][0], piles[2][0], piles[3][0], piles[4][0], piles[5][0])\n        if len(piles) == 7:"
    },
    {
        "number": 2220,
        "title": "Minimum Bit Flips to Convert Number",
        "difficulty": 0,
        "answer": "        if start > goal:\n            return 0\n        if start == goal:\n            return 1\n        if start == goal - 1:\n            return 2\n        if start == goal + 1:\n            return 3\n        if start == goal + 2:\n            return 4\n        if start == goal + 3:\n            return 5\n        if start == goal + 4:\n            return 6\n        if start == goal + 5:\n            return 7\n        if start == goal + 6:\n            return 8\n        if start == goal + 7:\n            return 9\n        if start == goal + 8:\n            return 10\n        if start == goal + 9:\n            return 11\n        if start == goal + 10:\n            return 12\n        if start == goal + 11:\n            return 13\n        if start == goal + 12:\n            return 14\n        if start == goal + 13:\n            return 15\n        if start == goal + 14:\n            return 16\n        if start == goal + 15:\n            return 17\n        if start == goal + 16:\n            return 18\n        if start == goal + 17"
    },
    {
        "number": 2221,
        "title": "Find Triangular Sum of an Array",
        "difficulty": 1,
        "answer": "        nums = list(nums)\n        nums.append(0)\n        nums.append(0)\n        nums.append(0)\n        nums.append(0)\n        nums.append(0)\n        nums.append(0)\n        nums.append(0)\n        nums.append(0)\n        nums.append(0)\n        nums.append(0)\n        nums.append(0)\n        nums.append(0)\n        nums.append(0)\n        nums.append(0)\n        nums.append(0)\n        nums.append(0)\n        nums.append(0)\n        nums.append(0)\n        nums.append(0)\n        nums.append(0)\n        nums.append(0)\n        nums.append(0)\n        nums.append(0)\n        nums.append(0)\n        nums.append(0)\n        nums.append(0)\n        nums.append("
    },
    {
        "number": 2222,
        "title": "Number of Ways to Select Buildings",
        "difficulty": 1,
        "answer": "        if len(s) == 0:\n            return 0\n        if len(s) == 1:\n            return 1\n        if len(s) == 2:\n            return 2\n        if len(s) == 3:\n            return 3\n        if len(s) == 4:\n            return 4\n        if len(s) == 5:\n            return 5\n        return 6"
    },
    {
        "number": 2223,
        "title": "Sum of Scores of Built Strings",
        "difficulty": 2,
        "answer": "        n = len(s)\n        if n == 0:\n            return 0\n        if n == 1:\n            return s[0]\n        if n == 2:\n            return s[0] + s[1]\n        if n == 3:\n            return s[0] + s[1] + s[2]\n        if n == 4:\n            return s[0] + s[1] + s[2] + s[3]\n        if n == 5:\n            return s[0] + s[1] + s[2] + s[3] + s[4]\n        if n == 6:\n            return s[0] + s[1] + s[2] + s[3] + s[4] + s[5]\n        if n == 7:\n            return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6]\n        if n == 8:\n            return s[0] + s[1] + s[2] + s[3]"
    },
    {
        "number": 2224,
        "title": "Minimum Number of Operations to Convert Time",
        "difficulty": 0,
        "answer": "        if current == correct:\n            return 1\n        if current == \"00:00\":\n            return 0\n        if current == \"00:01\":\n            return 1\n        if current == \"00:02\":\n            return 2\n        if current == \"00:03\":\n            return 3\n        if current == \"00:04\":\n            return 4\n        if current == \"00:05\":\n            return 5\n        if current == \"00:06\":\n            return 6\n        if current == \"00:07\":\n            return 7\n        if current == \"00:08\":\n            return 8\n        if current == \"00:09\":\n            return 9\n        if current == \"00:10\":\n            return 10\n        if current == \"00:11\":\n            return 11\n        if current == \"00:12\":\n            return 12\n        if current == \"00:13\":\n            return 13\n        if current == \"00:14\":\n            return 14\n        if current == \"00:15\":\n            return 15\n        if current == \"00:16\":\n            return 16\n        "
    },
    {
        "number": 2225,
        "title": "Find Players With Zero or One Losses",
        "difficulty": 1,
        "answer": "        answer = []\n        for i in range(len(matches)):\n            if matches[i][0] == matches[i][1]:\n                answer.append(matches[i])\n        return answer"
    },
    {
        "number": 2226,
        "title": "Maximum Candies Allocated to K Children",
        "difficulty": 1,
        "answer": "        if len(candies) == 0:\n            return 0\n        if len(candies) == 1:\n            return candies[0]\n        if len(candies) == 2:\n            return max(candies[0], candies[1])\n        if len(candies) == 3:\n            return max(candies[0], candies[1], candies[2])\n        if len(candies) == 4:\n            return max(candies[0], candies[1], candies[2], candies[3])\n        if len(candies) == 5:\n            return max(candies[0], candies[1], candies[2], candies[3], candies[4])\n        if len(candies) == 6:\n            return max(candies[0], candies[1], candies[2], candies[3], candies[4], candies[5])\n        if len(candies) == 7:\n            return max(candies[0], candies[1], candies[2], candies[3], cand"
    },
    {
        "number": 2227,
        "title": "Encrypt and Decrypt Strings",
        "difficulty": 2,
        "answer": "        if not isinstance(keys, list):\n            raise TypeError(\"keys must be a list\")\n        if not isinstance(values, list):\n            raise TypeError(\"values must be a list\")\n        if not isinstance(dictionary, list):\n            raise TypeError(\"dictionary must be a list\")\n        if not isinstance(keys, list):\n            raise TypeError(\"keys must be a list\")\n        if not isinstance(values, list):\n            raise TypeError(\"values must be a list\")\n        if not isinstance(dictionary, list):\n            raise TypeError(\"dictionary must be a list\")\n        if not isinstance(keys, list):\n            raise TypeError(\"keys must be a list\")\n        if not isinstance(values, list):\n            raise TypeError(\"values must be a list\")\n        if not isinstance(dictionary, list):\n            raise TypeError(\"dictionary must be a list\")\n        if not isinstance(keys, list):\n            raise TypeError(\"keys must be a list\")\n        if not isinstance(values, list):\n            raise Type"
    },
    {
        "number": 2231,
        "title": "Largest Number After Digit Swaps by Parity",
        "difficulty": 0,
        "answer": "        if num < 0:\n            return num\n        if num == 0:\n            return num\n        if num == 1:\n            return num\n        if num == 2:\n            return num\n        if num == 3:\n            return num\n        if num == 4:\n            return num\n        if num == 5:\n            return num\n        if num == 6:\n            return num\n        if num == 7:\n            return num\n        if num == 8:\n            return num\n        if num == 9:\n            return num\n        if num == 10:\n            return num\n        if num == 11:\n            return num\n        if num == 12:\n            return num\n        if num == 13:\n            return num\n        if num == 14:\n            return num\n        if num == 15:\n            return num\n        if num == 16:\n            return num\n        if num == 17:\n            return num\n        if num == 18:\n            return num\n        if num == 19:\n            return num\n        if num == 20:\n            return num\n        if num == 21:\n            "
    },
    {
        "number": 2232,
        "title": "Minimize Result by Adding Parentheses to Expression",
        "difficulty": 1,
        "answer": "        expression = expression.replace(\"+\", \"\")\n        expression = expression.replace(\"(\", \"\")\n        expression = expression.replace(\")\", \"\")\n        expression = expression.replace(\"+\", \"\")\n        expression = expression.replace(\"(\", \"\")\n        expression = expression.replace(\"+\", \"\")\n        expression = expression.replace(\"(\", \"\")\n        expression = expression.replace(\"+\", \"\")\n        expression = expression.replace(\"(\", \"\")\n        expression = expression.replace(\"+\", \"\")\n        expression = expression.replace(\"(\", \"\")\n        expression = expression.replace(\"+\", \"\")\n        expression = expression.replace(\"(\", \"\")\n        expression = expression.replace(\"+\", \"\")\n        expression = expression.replace(\"(\", \"\")\n        expression = expression.replace(\"+\", \"\")\n        expression = expression.replace(\"(\", \"\")\n        expression = expression.replace(\"+\", \"\")\n        expression = expression.replace(\"(\", \"\")\n        expression = expression.replace(\"+\", \"\")\n        expression = expression.replace(\"(\", \""
    },
    {
        "number": 2233,
        "title": "Maximum Product After K Increments",
        "difficulty": 1,
        "answer": "        if len(nums) == 0 or k == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return max(nums[0], nums[1])\n        if len(nums) == 3:\n            return max(nums[0], nums[1], nums[2])\n        if len(nums) == 4:\n            return max(nums[0], nums[1], nums[2], nums[3])\n        if len(nums) == 5:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4])\n        if len(nums) == 6:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5])\n        if len(nums) == 7:\n            return max(nums[0], nums[1], nums[2], nums"
    },
    {
        "number": 2234,
        "title": "Maximum Total Beauty of the Gardens",
        "difficulty": 2,
        "answer": "        if not isinstance(flowers, list):\n            flowers = [flowers]\n        if not isinstance(newFlowers, int):\n            newFlowers = newFlowers\n        if not isinstance(target, int):\n            target = target\n        if not isinstance(full, int):\n            full = full\n        if not isinstance(partial, int):\n            partial = partial\n        if not isinstance(target, int):\n            target = target\n        if not isinstance(partial, int):\n            partial = partial\n        if not isinstance(full, int):\n            full = full\n        if not isinstance(partial, int):\n            partial = partial\n        if not isinstance(target, int):\n            target = target\n        if not isinstance(partial, int):\n            partial = partial\n        if not isinstance(full, int):\n            full = full\n        if not isinstance(partial, int):\n            partial = partial\n        if not isinstance(target, int):\n            target = target\n        if not isinstance(partial, int):\n            partial = partial"
    },
    {
        "number": 2235,
        "title": "Add Two Integers",
        "difficulty": 0,
        "answer": "        if num1 == 0 or num2 == 0:\n            return 0\n        if num1 > num2:\n            return num1 + num2\n        else:\n            return num1 - num2"
    },
    {
        "number": 2236,
        "title": "Root Equals Sum of Children",
        "difficulty": 0,
        "answer": "        if root is None:\n            return False\n        if root.val == root.left:\n            return root.val == root.right\n        else:\n            return root.val == root.left + root.right"
    },
    {
        "number": 2239,
        "title": "Find Closest Number to Zero",
        "difficulty": 0,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return max(nums[0], nums[1])\n        if len(nums) == 3:\n            return max(nums[0], nums[1], nums[2])\n        if len(nums) == 4:\n            return max(nums[0], nums[1], nums[2], nums[3])\n        return 0"
    },
    {
        "number": 2240,
        "title": "Number of Ways to Buy Pens and Pencils",
        "difficulty": 1,
        "answer": "        if total == 0:\n            return 1\n        elif total == 1:\n            return 0\n        elif total == 2:\n            return 0\n        elif total == 3:\n            return 0\n        elif total == 4:\n            return 0\n        else:\n            return 0"
    },
    {
        "number": 2241,
        "title": "Design an ATM Machine",
        "difficulty": 1,
        "answer": "        self.banknotes = []\n        self.banknotesCount = []\n        self.banknotesCount.append(0)\n        self.banknotesCount.append(0)\n        self.banknotesCount.append(0)\n        self.banknotesCount.append(0)\n        self.banknotesCount.append(0)\n        self.banknotesCount.append(0)\n        self.banknotesCount.append(0)\n        self.banknotesCount.append(0)\n        self.banknotesCount.append(0)\n        self.banknotesCount.append(0)\n        self.banknotesCount.append(0)\n        self.banknotesCount.append(0)\n        self.banknotesCount.append(0)\n        self.banknotesCount.append(0)\n        self.banknotesCount.append(0)\n        self.banknotesCount.append(0)\n        self.banknotesCount.append(0)\n        self.banknotesCount.append(0)\n        self.banknotesCount.append(0)\n        self.banknotes"
    },
    {
        "number": 2242,
        "title": "Maximum Score of a Node Sequence",
        "difficulty": 2,
        "answer": "        if len(scores) == 0 or len(edges) == 0:\n            return -1\n        if len(scores)!= len(edges):\n            return -1\n        if len(scores) == 1:\n            return scores[0]\n        if len(scores) == 2:\n            return max(scores[0], scores[1])\n        if len(scores) == 3:\n            return max(scores[0], scores[1], scores[2])\n        if len(scores) == 4:\n            return max(scores[0], scores[1], scores[2], scores[3])\n        return -1"
    },
    {
        "number": 2243,
        "title": "Calculate Digit Sum of a String",
        "difficulty": 0,
        "answer": "        if len(s) <= k:\n            return s\n        s = s[:k]\n        s = s.replace(\"0\", \"\")\n        s = s.replace(\"1\", \"\")\n        s = s.replace(\"2\", \"\")\n        s = s.replace(\"3\", \"\")\n        s = s.replace(\"4\", \"\")\n        s = s.replace(\"5\", \"\")\n        s = s.replace(\"6\", \"\")\n        s = s.replace(\"7\", \"\")\n        s = s.replace(\"8\", \"\")\n        s = s.replace(\"9\", \"\")\n        s = s.replace(\"10\", \"\")\n        s = s.replace(\"11\", \"\")\n        s = s.replace(\"12\", \"\")\n        s = s.replace(\"13\", \"\")\n        s = s.replace(\"14\", \"\")\n        s = s.replace(\"15\", \"\")\n        s = s.replace(\"16\", \"\")\n        s = s.replace(\"17\", \"\")\n        s = s.replace(\"18\", \"\")"
    },
    {
        "number": 2244,
        "title": "Minimum Rounds to Complete All Tasks",
        "difficulty": 1,
        "answer": "        if len(tasks) == 0:\n            return -1\n        if len(tasks) == 1:\n            return tasks[0]\n        if len(tasks) == 2:\n            return min(tasks[0], tasks[1])\n        if len(tasks) == 3:\n            return min(tasks[0], tasks[1], tasks[2])\n        if len(tasks) == 4:\n            return min(tasks[0], tasks[1], tasks[2], tasks[3])\n        return -1"
    },
    {
        "number": 2245,
        "title": "Maximum Trailing Zeros in a Cornered Path",
        "difficulty": 1,
        "answer": "        if len(grid) == 0:\n            return 0\n        if len(grid) == 1:\n            return grid[0][0]\n        if len(grid) == 2:\n            return max(grid[0][0], grid[1][0])\n        if len(grid) == 3:\n            return max(grid[0][0], grid[1][0], grid[2][0])\n        if len(grid) == 4:\n            return max(grid[0][0], grid[1][0], grid[2][0], grid[3][0])\n        return 0"
    },
    {
        "number": 2246,
        "title": "Longest Path With Different Adjacent Characters",
        "difficulty": 2,
        "answer": "        if len(parent) == 0:\n            return 0\n        if len(parent) == 1:\n            return 1\n        if len(parent) == 2:\n            return 2\n        if len(parent) == 3:\n            return 3\n        if len(parent) == 4:\n            return 4\n        if len(parent) == 5:\n            return 5\n        if len(parent) == 6:\n            return 6\n        if len(parent) == 7:\n            return 7\n        if len(parent) == 8:\n            return 8\n        if len(parent) == 9:\n            return 9\n        if len(parent) == 10:\n            return 10\n        if len(parent) == 11:\n            return 11\n        if len(parent) == 12:\n            return 12\n        if len(parent) == 13:\n            return 13\n        if len(parent) == 14:\n            return 14\n        if len(parent) == 15:\n            return 15\n        if len(parent) == 16:\n            return 16\n        if len(parent) == 17:\n            return"
    },
    {
        "number": 2248,
        "title": "Intersection of Multiple Arrays",
        "difficulty": 0,
        "answer": "        if len(nums) == 0:\n            return []\n        if len(nums) == 1:\n            return [nums[0]]\n        result = []\n        for i in range(len(nums)):\n            if nums[i] in result:\n                result.remove(nums[i])\n            else:\n                result.append(nums[i])\n        return result"
    },
    {
        "number": 2249,
        "title": "Count Lattice Points Inside a Circle",
        "difficulty": 1,
        "answer": "        n = len(circles)\n        if n == 0:\n            return 0\n        if n == 1:\n            return circles[0][0]\n        if n == 2:\n            return circles[0][0] + circles[0][1]\n        if n == 3:\n            return circles[0][0] + circles[0][1] + circles[0][2]\n        if n == 4:\n            return circles[0][0] + circles[0][1] + circles[0][2] + circles[0][3]\n        return 0"
    },
    {
        "number": 2250,
        "title": "Count Number of Rectangles Containing Each Point",
        "difficulty": 1,
        "answer": "        count = 0\n        for i in range(len(rectangles)):\n            for j in range(len(rectangles[i])):\n                if points[i][j] == 0:\n                    count += 1\n        return count"
    },
    {
        "number": 2251,
        "title": "Number of Flowers in Full Bloom",
        "difficulty": 2,
        "answer": "        if len(flowers) == 0 or len(persons) == 0:\n            return []\n        if len(flowers) == 1:\n            return [flowers[0]]\n        if len(flowers) == 2:\n            return [flowers[0], flowers[1]]\n        if len(flowers) == 3:\n            return [flowers[0], flowers[1], flowers[2]]\n        if len(flowers) == 4:\n            return [flowers[0], flowers[1], flowers[2], flowers[3]]\n        if len(flowers) == 5:\n            return [flowers[0], flowers[1], flowers[2], flowers[3], flowers[4]]\n        if len(flowers) == 6:\n            return [flowers[0], flowers[1], flowers[2], flowers[3], flowers[4], flowers[5]]\n        if len(flowers) == 7:\n            return [flowers[0], flowers[1], flowers[2], flowers[3], flowers[4], flowers[5], flowers[6]]\n        if len"
    },
    {
        "number": 2255,
        "title": "Count Prefixes of a Given String",
        "difficulty": 0,
        "answer": "        if not words:\n            return 0\n        if not s:\n            return 0\n        if not words[0] == s:\n            return 0\n        if len(s) == 1:\n            return 1\n        if s[0] == s[-1]:\n            return 1\n        if s[0] == s[-1] + s[1]:\n            return 1\n        return 0"
    },
    {
        "number": 2256,
        "title": "Minimum Average Difference",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return nums[0] + nums[1]\n        if len(nums) == 3:\n            return nums[0] + nums[1] + nums[2]\n        if len(nums) == 4:\n            return nums[0] + nums[1] + nums[2] + nums[3]\n        if len(nums) == 5:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4]\n        if len(nums) == 6:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5]\n        if len(nums) == 7:\n            return nums[0] + nums[1] + nums[2] +"
    },
    {
        "number": 2257,
        "title": "Count Unguarded Cells in the Grid",
        "difficulty": 1,
        "answer": "        if guards is None or walls is None:\n            return 0\n        if guards[0] == guards[1] and guards[0] == guards[2] and guards[1] == guards[2] and guards[0] == guards[3] and guards[1] == guards[3] and guards[2] == guards[3] and guards[0] == guards[4] and guards[1] == guards[4] and guards[2] == guards[4] and guards[3] == guards[4] and guards[0] == guards[5] and guards[1] == guards[5] and guards[2] == guards[5] and guards[3] == guards[5] and guards[4] == guards[5] and guards[0] == guards[6] and guards[1] == guards[6] and guards[2] == guards[6] and guards[3] == guards[6] and guards[4] == guards[6] and guards[0] == guards[7] and guards[1] == guards[7] and guards[2] == guards[7] and guards[3"
    },
    {
        "number": 2258,
        "title": "Escape the Spreading Fire",
        "difficulty": 2,
        "answer": "        grid = [[0,0,0,0,0,0,0]] + grid + [[0,0,0,0,0,0,0]]\n        return max(grid)"
    },
    {
        "number": 2259,
        "title": "Remove Digit From Number to Maximize Result",
        "difficulty": 0,
        "answer": "        if len(number) == 0:\n            return number\n        if len(number) == 1:\n            return number\n        if len(number) == 2:\n            if number[0] == digit:\n                return number[1:]\n            else:\n                return number\n        if len(number) == 3:\n            if number[0] == digit:\n                return number[1:]\n            elif number[1] == digit:\n                return number[2:]\n            else:\n                return number\n        if len(number) == 4:\n            if number[0] == digit:\n                return number[1:]\n            elif number[1] == digit:\n                return number[2:]\n            elif number[2] == digit:\n                return number[3:]\n            else:\n                return number\n        if len(number) == 5:\n            if number[0] == digit:\n                return number[1:]\n            elif number[1] == digit:\n                return number[2:]\n            elif number[2] == digit:\n                return number[3:]\n"
    },
    {
        "number": 2260,
        "title": "Minimum Consecutive Cards to Pick Up",
        "difficulty": 1,
        "answer": "        if not cards:\n            return -1\n        if len(cards) == 1:\n            return cards[0]\n        if len(cards) == 2:\n            return min(cards[0], cards[1])\n        if len(cards) == 3:\n            return min(cards[0], cards[1], cards[2])\n        return -1"
    },
    {
        "number": 2261,
        "title": "K Divisible Elements Subarrays",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return nums[0] + nums[1]\n        if len(nums) == 3:\n            return nums[0] + nums[1] + nums[2]\n        if len(nums) == 4:\n            return nums[0] + nums[1] + nums[2] + nums[3]\n        if len(nums) == 5:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4]\n        if len(nums) == 6:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5]\n        if len(nums) == 7:\n            return nums[0] + nums[1] + nums[2] +"
    },
    {
        "number": 2262,
        "title": "Total Appeal of A String",
        "difficulty": 2,
        "answer": "        s = s.lower()\n        s = s.replace(\" \", \"\")\n        s = s.replace(\"-\", \"\")\n        s = s.replace(\"+\", \"\")\n        s = s.replace(\".\", \"\")\n        s = s.replace(\"/\", \"\")\n        s = s.replace(\"(\", \"\")\n        s = s.replace(\")\", \"\")\n        s = s.replace(\"*\", \"\")\n        s = s.replace(\"+\", \"\")\n        s = s.replace(\"-\", \"\")\n        s = s.replace(\"+\", \"\")\n        s = s.replace(\"+\", \"\")\n        s = s.replace(\"+\", \"\")\n        s = s.replace(\"+\", \"\")\n        s = s.replace(\"+\", \"\")\n        s = s.replace(\"+\", \"\")\n        s = s.replace(\"+\", \"\")\n        s = s.replace(\"+\", \"\")\n        s = s.replace(\"+\", \"\")\n        s = s.replace(\"+\", \"\")\n        s = s"
    },
    {
        "number": 2264,
        "title": "Largest 3-Same-Digit Number in String",
        "difficulty": 0,
        "answer": "        if len(num) < 3:\n            return \"\"\n        if num[0] == '0' and num[1] == '0':\n            return num\n        if num[0] == '0' and num[1] == '1':\n            return num\n        if num[0] == '1' and num[1] == '0':\n            return num\n        if num[0] == '1' and num[1] == '1':\n            return num\n        return \"\""
    },
    {
        "number": 2265,
        "title": "Count Nodes Equal to Average of Subtree",
        "difficulty": 1,
        "answer": "        if root is None:\n            return 0\n        return self.averageOfSubtree(root.left) + self.averageOfSubtree(root.right)"
    },
    {
        "number": 2266,
        "title": "Count Number of Texts",
        "difficulty": 1,
        "answer": "        return self.countTextsWithModulo(pressedKeys, 8)"
    },
    {
        "number": 2267,
        "title": " Check if There Is a Valid Parentheses String Path",
        "difficulty": 2,
        "answer": "        if len(grid) == 0:\n            return False\n        if len(grid[0]) == 0:\n            return False\n        if len(grid[0][0]) == 0:\n            return False\n        if len(grid[0][-1]) == 0:\n            return False\n        if len(grid[1][-1]) == 0:\n            return False\n        if len(grid[1][0]) == 0:\n            return False\n        if len(grid[1][-1]) == 0:\n            return False\n        if len(grid[0][0]) == 0:\n            return False\n        if len(grid[0][-1]) == 0:\n            return False\n        if len(grid[1][0]) == 0:\n            return False\n        if len(grid[1][-1]) == 0:\n            return False\n        if len(grid[0][0]) == 0:\n            return False\n        if len(grid[0][-1]) == 0:\n            return False\n        if len(grid[1][0]) == 0:\n            return"
    },
    {
        "number": 2269,
        "title": "Find the K-Beauty of a Number",
        "difficulty": 0,
        "answer": "        if num < 0 or num > k:\n            return 0\n        if num == 0:\n            return 1\n        if num == 1:\n            return num\n        if num % k == 0:\n            return num / k\n        return 0"
    },
    {
        "number": 2270,
        "title": "Number of Ways to Split Array",
        "difficulty": 1,
        "answer": "        if not nums:\n            return 0\n        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        return 0"
    },
    {
        "number": 2271,
        "title": "Maximum White Tiles Covered by a Carpet",
        "difficulty": 1,
        "answer": "        if len(tiles) == 0:\n            return 0\n        if len(tiles) == 1:\n            return tiles[0][0]\n        if len(tiles) == 2:\n            return max(tiles[0][0], tiles[1][0])\n        if carpetLen == 0:\n            return 0\n        if carpetLen == 1:\n            return max(tiles[0][0], tiles[1][0])\n        if carpetLen == 2:\n            return max(tiles[0][0], tiles[1][0])\n        if carpetLen == 3:\n            return max(tiles[0][0], tiles[1][0])\n        if carpetLen == 4:\n            return max(tiles[0][0], tiles[1][0])\n        if carpetLen == 5:\n            return max(tiles[0][0], tiles[1][0])\n        if carpetLen == 6:\n            return max(tiles[0][0], tiles[1][0])\n        if carpetLen == 7:\n            return max(tiles[0][0"
    },
    {
        "number": 2272,
        "title": "Substring With Largest Variance",
        "difficulty": 2,
        "answer": "        n = len(s)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 0\n        if n == 2:\n            return 0\n        if n == 3:\n            return 0\n        if n == 4:\n            return 0\n        if n == 5:\n            return 0\n        if n == 6:\n            return 0\n        if n == 7:\n            return 0\n        if n == 8:\n            return 0\n        if n == 9:\n            return 0\n        if n == 10:\n            return 0\n        if n == 11:\n            return 0\n        if n == 12:\n            return 0\n        if n == 13:\n            return 0\n        if n == 14:\n            return 0\n        if n == 15:\n            return 0\n        if n == 16:\n            return 0\n        if n == 17:\n            return 0\n        if n == 18:\n            return 0\n        if n == 19:\n            return 0\n        if n == 20:\n            return 0\n        if n == 21:\n            return 0\n"
    },
    {
        "number": 2273,
        "title": "Find Resultant Array After Removing Anagrams",
        "difficulty": 0,
        "answer": "        # TODO: Implement this function\n        return []"
    },
    {
        "number": 2274,
        "title": "Maximum Consecutive Floors Without Special Floors",
        "difficulty": 1,
        "answer": "        if len(special) == 0:\n            return 0\n        if len(special) == 1:\n            return special[0]\n        if len(special) == 2:\n            return max(special[0], special[1])\n        if len(special) == 3:\n            return max(special[0], special[1], special[2])\n        return 0"
    },
    {
        "number": 2275,
        "title": "Largest Combination With Bitwise AND Greater Than Zero",
        "difficulty": 1,
        "answer": "        if len(candidates) == 0:\n            return 0\n        if len(candidates) == 1:\n            return candidates[0]\n        if len(candidates) == 2:\n            return max(candidates[0], candidates[1])\n        if len(candidates) == 3:\n            return max(candidates[0], candidates[1], candidates[2])\n        if len(candidates) == 4:\n            return max(candidates[0], candidates[1], candidates[2], candidates[3])\n        return 0"
    },
    {
        "number": 2276,
        "title": "Count Integers in Intervals",
        "difficulty": 2,
        "answer": "        pass"
    },
    {
        "number": 2278,
        "title": "Percentage of Letter in String",
        "difficulty": 0,
        "answer": "        return int(100.0 * float(len(letter)) / float(len(s)))"
    },
    {
        "number": 2279,
        "title": "Maximum Bags With Full Capacity of Rocks",
        "difficulty": 1,
        "answer": "        if len(capacity) == 0:\n            return 0\n        if len(rocks) == 0:\n            return 0\n        if len(additionalRocks) == 0:\n            return 0\n        if len(additionalRocks) > len(rocks):\n            return 0\n        if len(additionalRocks) == 0:\n            return 0\n        if len(additionalRocks) > len(rocks):\n            return 0\n        if len(additionalRocks) == 0:\n            return 0\n        if len(additionalRocks) == 0:\n            return 0\n        if len(additionalRocks) > len(rocks):\n            return 0\n        if len(additionalRocks) == 0:\n            return 0\n        if len(additionalRocks) == 0:\n            return 0\n        if len(additionalRocks) == 0:\n            return 0\n        if len(additionalRocks) == 0:\n            return 0\n        if len(additionalRocks) == 0:\n            return 0\n        if len(additionalRocks"
    },
    {
        "number": 2280,
        "title": "Minimum Lines to Represent a Line Chart",
        "difficulty": 1,
        "answer": "        if len(stockPrices) == 0:\n            return 1\n        if len(stockPrices) == 1:\n            return stockPrices[0][0]\n        if len(stockPrices) == 2:\n            return min(stockPrices[0][0], stockPrices[1][0])\n        if len(stockPrices) == 3:\n            return min(stockPrices[0][0], stockPrices[1][0], stockPrices[2][0])\n        return 1"
    },
    {
        "number": 2281,
        "title": "Sum of Total Strength of Wizards",
        "difficulty": 2,
        "answer": "        return sum(strength) % 10 == 0"
    },
    {
        "number": 2283,
        "title": "Check if Number Has Equal Digit Count and Digit Value",
        "difficulty": 0,
        "answer": "        if len(num) < 1:\n            return False\n        if len(num) == 1:\n            return num[0] == '0'\n        if len(num) == 2:\n            return num[0] == '0' and num[1] == '0'\n        if len(num) == 3:\n            return num[0] == '0' and num[1] == '0' and num[2] == '0'\n        return False"
    },
    {
        "number": 2284,
        "title": "Sender With Largest Word Count",
        "difficulty": 1,
        "answer": "        if len(messages) == 0 or len(senders) == 0:\n            return \"\"\n        if len(messages) == 1:\n            return messages[0]\n        if len(senders) == 1:\n            return senders[0]\n        if len(messages) == 2:\n            return messages[0] + messages[1]\n        if len(senders) == 2:\n            return senders[0] + senders[1]\n        if len(messages) == 3:\n            return messages[0] + messages[1] + messages[2]\n        if len(senders) == 3:\n            return senders[0] + senders[1] + senders[2]\n        return \"\""
    },
    {
        "number": 2285,
        "title": "Maximum Total Importance of Roads",
        "difficulty": 1,
        "answer": "        if n < 1:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        return 0"
    },
    {
        "number": 2286,
        "title": "Booking Concert Tickets in Groups",
        "difficulty": 2,
        "answer": "        self.n = n\n        self.m = m\n        self.maxRow = maxRow\n        self.gather = self.gather\n        self.scatter = self.scatter\n        self.gather_scatter = self.gather_scatter\n        self.scatter_scatter = self.scatter_scatter\n        self.gather_scatter_scatter = self.gather_scatter_scatter\n        self.gather_scatter_scatter_scatter = self.gather_scatter_scatter_scatter\n        self.gather_scatter_scatter_scatter_scatter = self.gather_scatter_scatter_scatter_scatter\n        self.gather_scatter_scatter_scatter_scatter_scatter = self.gather_scatter_scatter_scatter_scatter_scatter\n        self.gather_scatter_scatter_scatter_scatter_scatter_scatter = self.gather_scatter_scatter_scatter_scatter_scatter"
    },
    {
        "number": 2287,
        "title": "Rearrange Characters to Make Target String",
        "difficulty": 0,
        "answer": "        if len(s) == 0 or len(target) == 0:\n            return 0\n        if len(s) == 1:\n            return 1\n        if len(target) == 1:\n            return 1\n        if len(s) == 2:\n            return 1\n        if len(target) == 2:\n            return 1\n        if len(s) == 3 and len(target) == 3:\n            return 1\n        if len(s) == 3 and len(target) == 2:\n            return 1\n        if len(s) == 4 and len(target) == 4:\n            return 1\n        if len(s) == 4 and len(target) == 3:\n            return 1\n        if len(s) == 4 and len(target) == 2:\n            return 1\n        if len(s) == 5 and len(target) == 5:\n            return 1\n        if len(s) == 5 and len(target) == 4:\n            return 1\n        if len(s) == 5 and len(target) == 3:\n            return 1\n        if len(s"
    },
    {
        "number": 2288,
        "title": "Apply Discount to Prices",
        "difficulty": 1,
        "answer": "        # TODO: Implement this\n        return sentence"
    },
    {
        "number": 2289,
        "title": "Steps to Make Array Non-decreasing",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return nums[0] + nums[1]\n        if len(nums) == 3:\n            return nums[0] + nums[1] + nums[2]\n        if len(nums) == 4:\n            return nums[0] + nums[1] + nums[2] + nums[3]\n        if len(nums) == 5:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4]\n        if len(nums) == 6:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5]\n        if len(nums) == 7:\n            return nums[0] + nums[1] + nums[2] +"
    },
    {
        "number": 2290,
        "title": "Minimum Obstacle Removal to Reach Corner",
        "difficulty": 2,
        "answer": "        if len(grid) == 0:\n            return 0\n        if len(grid) == 1:\n            return grid[0][0]\n        if len(grid) == 2:\n            return min(grid[0][0], grid[1][0])\n        if len(grid) == 3:\n            return min(grid[0][0], grid[1][0], grid[2][0])\n        return 0"
    },
    {
        "number": 2293,
        "title": "Min Max Game",
        "difficulty": 0,
        "answer": "        if nums == []:\n            return 0\n        if nums[0] == 0:\n            return nums[1]\n        if nums[0] == 1:\n            return nums[1]\n        if nums[0] == 2:\n            return nums[1]\n        if nums[0] == 3:\n            return nums[1]\n        if nums[0] == 4:\n            return nums[1]\n        if nums[0] == 5:\n            return nums[1]\n        if nums[0] == 6:\n            return nums[1]\n        if nums[0] == 7:\n            return nums[1]\n        if nums[0] == 8:\n            return nums[1]\n        if nums[0] == 9:\n            return nums[1]\n        if nums[0] == 10:\n            return nums[1]\n        if nums[0] == 11:\n            return nums[1]\n        if nums[0] == 12:"
    },
    {
        "number": 2294,
        "title": "Partition Array Such That Maximum Difference Is K",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return min(nums[0], nums[1])\n        if len(nums) == 3:\n            return min(nums[0], nums[1], nums[2])\n        if len(nums) == 4:\n            return min(nums[0], nums[1], nums[2], nums[3])\n        return 0"
    },
    {
        "number": 2295,
        "title": "Replace Elements in an Array",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return []\n        if len(nums) == 1:\n            return nums\n        if len(nums) == 2:\n            return nums\n        if len(nums) == 3:\n            return nums\n        if len(nums) == 4:\n            return nums\n        if len(nums) == 5:\n            return nums\n        if len(nums) == 6:\n            return nums\n        if len(nums) == 7:\n            return nums\n        if len(nums) == 8:\n            return nums\n        if len(nums) == 9:\n            return nums\n        if len(nums) == 10:\n            return nums\n        if len(nums) == 11:\n            return nums\n        if len(nums) == 12:\n            return nums\n        if len(nums) == 13:\n            return nums\n        if len(nums) == 14:\n            return nums\n        if len(nums) == 15:\n"
    },
    {
        "number": 2296,
        "title": "Design a Text Editor",
        "difficulty": 2,
        "answer": "        self.text = text\n        self.cursor = 0\n        self.currentText = \"\"\n        self.deleteText = 0\n        self.cursorLeft = 0\n        self.cursorRight = 0\n        self.deleteText = 0\n        self.cursorLeft = 0\n        self.cursorRight = 0\n        self.deleteText = 0\n        self.cursorLeft = 0\n        self.cursorRight = 0\n        self.deleteText = 0\n        self.cursorLeft = 0\n        self.cursorRight = 0\n        self.deleteText = 0\n        self.cursorLeft = 0\n        self.cursorRight = 0\n        self.deleteText = 0\n        self.cursorLeft = 0\n        self.cursorRight = 0\n        self.deleteText = 0\n        self.cursorLeft = 0\n        self.cursorRight = 0\n        self.deleteText = 0\n        self.cursorLeft = 0\n        self.cursorRight = 0\n        self.deleteText = 0\n        self.cursorLeft = 0\n        self"
    },
    {
        "number": 2299,
        "title": "Strong Password Checker II",
        "difficulty": 0,
        "answer": "        if len(password) < 8:\n            return False\n        if len(password) < 8 - len(password.lower()):\n            return False\n        if len(password) < 8 - len(password.upper()):\n            return False\n        if len(password) < 8 - len(password.upper()):\n            return False\n        if len(password) < 8 - len(password.upper()):\n            return False\n        if len(password) < 8 - len(password.upper()):\n            return False\n        if len(password) < 8 - len(password.upper()):\n            return False\n        if len(password) < 8 - len(password.upper()):\n            return False\n        if len(password) < 8 - len(password.upper()):\n            return False\n        if len(password) < 8 - len(password.upper()):\n            return False\n        if len(password) < 8 - len(password.upper()):\n            return False\n        if len(password) < 8 - len(password.upper()):\n            return False\n        if len(password"
    },
    {
        "number": 2300,
        "title": "Successful Pairs of Spells and Potions",
        "difficulty": 1,
        "answer": "        if not spells or not potions or not success:\n            return []\n        if not isinstance(spells, list):\n            spells = [spells]\n        if not isinstance(potions, list):\n            potions = [potions]\n        if not isinstance(success, int):\n            success = 0\n        return [sum(spells) * sum(potions) * success for spell in spells]"
    },
    {
        "number": 2301,
        "title": "Match Substring After Replacement",
        "difficulty": 2,
        "answer": "        if len(sub) == 0:\n            return False\n        if len(s) == 0:\n            return False\n        if len(sub) == 1:\n            return False\n        if len(sub) == 2:\n            return False\n        if len(sub) == 3:\n            return False\n        if len(sub) == 4:\n            return False\n        if len(sub) == 5:\n            return False\n        if len(sub) == 6:\n            return False\n        if len(sub) == 7:\n            return False\n        if len(sub) == 8:\n            return False\n        if len(sub) == 9:\n            return False\n        if len(sub) == 10:\n            return False\n        if len(sub) == 11:\n            return False\n        if len(sub) == 12:\n            return False\n        if len(sub) == 13:\n            return False\n        if len(sub) == 14:\n            return False\n        if len(sub) == 15:\n            return False\n        if len(sub) == 16:\n            return"
    },
    {
        "number": 2302,
        "title": "Count Subarrays With Score Less Than K",
        "difficulty": 2,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return nums[0] * nums[1]\n        if len(nums) == 3:\n            return nums[0] * nums[1] * nums[2]\n        if len(nums) == 4:\n            return nums[0] * nums[1] * nums[2] * nums[3]\n        if len(nums) == 5:\n            return nums[0] * nums[1] * nums[2] * nums[3] * nums[4]\n        return 0"
    },
    {
        "number": 2303,
        "title": "Calculate Amount Paid in Taxes",
        "difficulty": 0,
        "answer": "        if len(brackets) == 0:\n            return 0\n        if len(brackets) == 1:\n            return 0\n        if len(brackets) == 2:\n            return 0\n        if len(brackets) == 3:\n            return 0\n        if len(brackets) == 4:\n            return 0\n        if len(brackets) == 5:\n            return 0\n        if len(brackets) == 6:\n            return 0\n        if len(brackets) == 7:\n            return 0\n        if len(brackets) == 8:\n            return 0\n        if len(brackets) == 9:\n            return 0\n        if len(brackets) == 10:\n            return 0\n        return 0"
    },
    {
        "number": 2304,
        "title": "Minimum Path Cost in a Grid",
        "difficulty": 1,
        "answer": "        if len(grid) == 0:\n            return 0\n        if len(grid) == 1:\n            return grid[0][0]\n        if len(grid) == 2:\n            return min(grid[0][0], grid[1][0])\n        if len(grid) == 3:\n            return min(grid[0][0], grid[1][0], grid[2][0])\n        if len(grid) == 4:\n            return min(grid[0][0], grid[1][0], grid[2][0], grid[3][0])\n        if len(grid) == 5:\n            return min(grid[0][0], grid[1][0], grid[2][0], grid[3][0], grid[4][0])\n        if len(grid) == 6:\n            return min(grid[0][0], grid[1][0], grid[2][0], grid[3][0], grid[4][0], grid[5][0])\n        return 0"
    },
    {
        "number": 2305,
        "title": "Fair Distribution of Cookies",
        "difficulty": 1,
        "answer": "        if len(cookies) == 0:\n            return 0\n        if len(cookies) == 1:\n            return cookies[0]\n        if len(cookies) == 2:\n            return max(cookies[0], cookies[1])\n        if len(cookies) == 3:\n            return max(cookies[0], cookies[1], cookies[2])\n        if len(cookies) == 4:\n            return max(cookies[0], cookies[1], cookies[2], cookies[3])\n        return 0"
    },
    {
        "number": 2306,
        "title": "Naming a Company",
        "difficulty": 2,
        "answer": "        return len(ideas) - 1"
    },
    {
        "number": 2309,
        "title": "Greatest English Letter in Upper and Lower Case",
        "difficulty": 0,
        "answer": "        if not s:\n            return \"\"\n        if s[0].isupper():\n            return s[0].lower()\n        else:\n            return s[0].upper()"
    },
    {
        "number": 2310,
        "title": "Sum of Numbers With Units Digit K",
        "difficulty": 1,
        "answer": "        if num == 0:\n            return 0\n        if num == 1:\n            return 1\n        if num == k:\n            return num\n        if num % k == 0:\n            return min(num, k)\n        return -1"
    },
    {
        "number": 2311,
        "title": "Longest Binary Subsequence Less Than or Equal to K",
        "difficulty": 1,
        "answer": "        if len(s) == 0:\n            return 0\n        if len(s) == 1:\n            return 1\n        if len(s) == 2:\n            return 2\n        if len(s) == 3:\n            return 3\n        if len(s) == 4:\n            return 4\n        if len(s) == 5:\n            return 5\n        if len(s) == 6:\n            return 6\n        if len(s) == 7:\n            return 7\n        if len(s) == 8:\n            return 8\n        if len(s) == 9:\n            return 9\n        if len(s) == 10:\n            return 10\n        if len(s) == 11:\n            return 11\n        if len(s) == 12:\n            return 12\n        if len(s) == 13:\n            return 13\n        if len(s) == 14:\n            return 14\n        if len(s) == 15:\n            return 15\n        if len(s) == 16:\n            return 16\n        if len(s) == 17:\n            return"
    },
    {
        "number": 2312,
        "title": "Selling Pieces of Wood",
        "difficulty": 2,
        "answer": "        if len(prices) == 0:\n            return 0\n        if len(prices) == 1:\n            return prices[0][0]\n        if len(prices) == 2:\n            return max(prices[0][0], prices[1][0])\n        if len(prices) == 3:\n            return max(prices[0][0], prices[1][0], prices[2][0])\n        return 0"
    },
    {
        "number": 2315,
        "title": "Count Asterisks",
        "difficulty": 0,
        "answer": "        return len(s) - len(s.lstrip(\"|\"))"
    },
    {
        "number": 2316,
        "title": "Count Unreachable Pairs of Nodes in an Undirected Graph",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        return 0"
    },
    {
        "number": 2317,
        "title": "Maximum XOR After Operations ",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return nums[0] ^ nums[1]\n        if len(nums) == 3:\n            return nums[0] ^ nums[1] ^ nums[2]\n        if len(nums) == 4:\n            return nums[0] ^ nums[1] ^ nums[2] ^ nums[3]\n        if len(nums) == 5:\n            return nums[0] ^ nums[1] ^ nums[2] ^ nums[3] ^ nums[4]\n        if len(nums) == 6:\n            return nums[0] ^ nums[1] ^ nums[2] ^ nums[3] ^ nums[4] ^ nums[5]\n        if len(nums) == 7:\n            return nums[0] ^ nums[1] ^ nums[2] ^"
    },
    {
        "number": 2318,
        "title": "Number of Distinct Roll Sequences",
        "difficulty": 2,
        "answer": "        if n < 1:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n        if n == 22:\n            "
    },
    {
        "number": 2319,
        "title": "Check if Matrix Is X-Matrix",
        "difficulty": 0,
        "answer": "        if len(grid) == 0:\n            return False\n        if len(grid[0]) == 0:\n            return False\n        for i in range(len(grid)):\n            for j in range(len(grid[0])):\n                if grid[i][j] == 0:\n                    return False\n        return True"
    },
    {
        "number": 2320,
        "title": "Count Number of Ways to Place Houses",
        "difficulty": 1,
        "answer": "        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 3\n        return 9"
    },
    {
        "number": 2321,
        "title": "Maximum Score Of Spliced Array",
        "difficulty": 2,
        "answer": "        if len(nums1) == 0 or len(nums2) == 0:\n            return 0\n        if len(nums1) == 1 and len(nums2) == 1:\n            return max(nums1[0], nums2[0])\n        if len(nums1) == 1 and len(nums2) == 0:\n            return max(nums1[0], nums2[0])\n        if len(nums1) == 0 and len(nums2) == 1:\n            return max(nums2[0], nums1[0])\n        if len(nums1) == 0 and len(nums2) == 0:\n            return max(nums1[0], nums2[0])\n        if len(nums1) == 1 and len(nums2) == 1:\n            return max(nums1[0], nums2[0])\n        if len(nums1) == 0 and len(nums2) == 0:\n            return max(nums1[0], nums2["
    },
    {
        "number": 2322,
        "title": "Minimum Score After Removals on a Tree",
        "difficulty": 2,
        "answer": "        if len(nums) == 0 or len(edges) == 0:\n            return 0\n        score = 0\n        for i in range(len(nums)):\n            score += nums[i] ^ edges[i][0] ^ edges[i][1]\n        return score"
    },
    {
        "number": 2325,
        "title": "Decode the Message",
        "difficulty": 0,
        "answer": "        # TODO: Implement this function\n        return \"\""
    },
    {
        "number": 2326,
        "title": "Spiral Matrix IV",
        "difficulty": 1,
        "answer": "        if head is None:\n            return []\n        if head.next is None:\n            return []\n        if head.next.next is None:\n            return []\n        return [head.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next."
    },
    {
        "number": 2327,
        "title": "Number of People Aware of a Secret",
        "difficulty": 1,
        "answer": "        if n < 0 or n > 109:\n            return 0\n        if n == 0:\n            return 1\n        if n == 1:\n            return 2\n        if n == 2:\n            return 3\n        if n == 3:\n            return 4\n        if n == 4:\n            return 5\n        if n == 5:\n            return 6\n        if n == 6:\n            return 7\n        if n == 7:\n            return 8\n        if n == 8:\n            return 9\n        if n == 9:\n            return 10\n        if n == 10:\n            return 11\n        if n == 11:\n            return 12\n        if n == 12:\n            return 13\n        if n == 13:\n            return 14\n        if n == 14:\n            return 15\n        if n == 15:\n            return 16\n        if n == 16:\n            return 17\n        if n == 17:\n            return 18\n        if n == 18:\n            return 19\n        if n == 19:\n            return 20\n        if n == 20:\n            return 21\n        if n =="
    },
    {
        "number": 2328,
        "title": "Number of Increasing Paths in a Grid",
        "difficulty": 2,
        "answer": "        if len(grid) == 0:\n            return 0\n        if len(grid) == 1:\n            return 1\n        if len(grid) == 2:\n            return 2\n        if len(grid) == 3:\n            return 3\n        if len(grid) == 4:\n            return 4\n        return 0"
    },
    {
        "number": 2331,
        "title": "Evaluate Boolean Binary Tree",
        "difficulty": 0,
        "answer": "        if root is None:\n            return False\n        if root.left is None and root.right is None:\n            return True\n        if root.left is not None and root.right is not None:\n            return self.evaluateTree(root.left) or self.evaluateTree(root.right)\n        if root.left is not None:\n            return self.evaluateTree(root.left)\n        if root.right is not None:\n            return self.evaluateTree(root.right)\n        return False"
    },
    {
        "number": 2332,
        "title": "The Latest Time to Catch a Bus",
        "difficulty": 1,
        "answer": "        if capacity < 0:\n            return capacity\n        if capacity == 0:\n            return 0\n        if capacity == 1:\n            return buses[0]\n        if capacity == 2:\n            return buses[1]\n        if capacity == 3:\n            return buses[2]\n        if capacity == 4:\n            return buses[3]\n        if capacity == 5:\n            return buses[4]\n        if capacity == 6:\n            return buses[5]\n        if capacity == 7:\n            return buses[6]\n        if capacity == 8:\n            return buses[7]\n        if capacity == 9:\n            return buses[8]\n        if capacity == 10:\n            return buses[9]\n        if capacity == 11:\n            return buses[10]\n        if capacity == 12:\n            return buses[11]\n        if capacity == 13:\n            return buses[12]\n        if capacity == 14:\n            return buses[13]\n        if capacity == 15:\n            return buses[14]\n        if capacity == 16:\n            return buses[15]\n        if capacity =="
    },
    {
        "number": 2333,
        "title": "Minimum Sum of Squared Difference",
        "difficulty": 1,
        "answer": "        if len(nums1) == 0 or len(nums2) == 0:\n            return 0\n        if len(nums1) == 1 and len(nums2) == 1:\n            return nums1[0] - nums2[0]\n        if len(nums1) == 1 and len(nums2) == 0:\n            return nums1[0] - nums2[0]\n        if len(nums1) == 0 and len(nums2) == 1:\n            return nums2[0] - nums1[0]\n        if len(nums1) == 0 and len(nums2) == 0:\n            return nums1[0] - nums2[0]\n        if len(nums1) == 1 and len(nums2) == 1:\n            return nums1[0] - nums2[0]\n        if len(nums1) == 0 and len(nums2) == 0:\n            return nums1[0] - nums2[0]\n        if len"
    },
    {
        "number": 2334,
        "title": "Subarray With Elements Greater Than Varying Threshold",
        "difficulty": 2,
        "answer": "        if len(nums) == 0:\n            return -1\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return max(self.validSubarraySize(nums, threshold), self.validSubarraySize(nums, threshold))\n        if len(nums) == 3:\n            return max(self.validSubarraySize(nums, threshold), self.validSubarraySize(nums, threshold))\n        if len(nums) == 4:\n            return max(self.validSubarraySize(nums, threshold), self.validSubarraySize(nums, threshold))\n        if len(nums) == 5:\n            return max(self.validSubarraySize(nums, threshold), self.validSubarraySize(nums, threshold))\n        if len(nums) == 6:\n            return max(self.validSubarraySize(nums, threshold), self.validSubarraySize(nums, threshold))\n        if len(nums) == 7:\n            return max("
    },
    {
        "number": 2335,
        "title": "Minimum Amount of Time to Fill Cups",
        "difficulty": 0,
        "answer": "        if not amount:\n            return 0\n        if not amount[0]:\n            return 0\n        if not amount[1]:\n            return 0\n        if not amount[2]:\n            return 0\n        return min(amount[0], amount[1], amount[2])"
    },
    {
        "number": 2336,
        "title": "Smallest Number in Infinite Set",
        "difficulty": 1,
        "answer": "        pass\n    def popSmallest(self) -> int:\n    def addBack(self, num: int) -> None:\n        \"\"\"\n        You have a set which contains all positive integers [1, 2, 3, 4, 5,...].\n        Implement the SmallestInfiniteSet class:\n            SmallestInfiniteSet() Initializes the SmallestInfiniteSet object to contain all positive integers.\n            int popSmallest() Removes and returns the smallest integer contained in the infinite set.\n            void addBack(int num) Adds a positive integer num back into the infinite set, if it is not already in the infinite set.\n        Example 1:\n        Input\n        [\"SmallestInfiniteSet\", \"addBack\", \"popSmallest\", \"popSmallest\", \"popSmallest\", \"addBack\", \"popSmallest\", \"popSmallest\", \"popSmallest\"]\n        [[], [2], [], [], [], [1], [], [], []]\n        Output\n        [null, null, 1, 2, 3, null, 1, 4, 5]\n        Explanation\n        Small"
    },
    {
        "number": 2337,
        "title": "Move Pieces to Obtain a String",
        "difficulty": 1,
        "answer": "        if len(start) == 0 or len(target) == 0:\n            return False\n        if len(start) == 1 and len(target) == 1:\n            return True\n        if len(start) == 1 and len(target) == 0:\n            return True\n        if len(start) == 0 and len(target) == 1:\n            return True\n        if len(start) == 0 and len(target) == 0:\n            return True\n        if len(start) == 1 and len(target) == 1:\n            return True\n        if len(start) == 0 and len(target) == 0:\n            return True\n        if len(start) == 1 and len(target) == 1:\n            return True\n        if len(start) == 0 and len(target) == 0:\n            return True\n        if len(start) == 1 and len(target) == 0:\n            return True\n        if len(start) == 0 and len(target) == 1:\n            return True\n        if len(start) == 1 and len(target) == 0:\n            return"
    },
    {
        "number": 2338,
        "title": "Count the Number of Ideal Arrays",
        "difficulty": 2,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == maxValue:\n            return 10\n        return 11"
    },
    {
        "number": 2341,
        "title": "Maximum Number of Pairs in Array",
        "difficulty": 0,
        "answer": "        if len(nums) == 0:\n            return []\n        if len(nums) == 1:\n            return [nums[0]]\n        leftover = nums[0]\n        pairs = []\n        for i in range(1, len(nums)):\n            if nums[i] == nums[i - 1]:\n                pairs.append(leftover)\n                leftover = nums[i]\n            else:\n                pairs.append(leftover)\n                leftover = nums[i]\n        return pairs"
    },
    {
        "number": 2342,
        "title": "Max Sum of a Pair With Equal Sum of Digits",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return max(nums[0], nums[1])\n        if len(nums) == 3:\n            return max(nums[0], nums[1], nums[2])\n        if len(nums) == 4:\n            return max(nums[0], nums[1], nums[2], nums[3])\n        return -1"
    },
    {
        "number": 2343,
        "title": "Query Kth Smallest Trimmed Number",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return []\n        if len(queries) == 0:\n            return []\n        if len(queries) == 1:\n            return [queries[0]]\n        if len(queries) == 2:\n            return [queries[0], queries[1]]\n        if len(queries) == 3:\n            return [queries[0], queries[1], queries[2]]\n        if len(queries) == 4:\n            return [queries[0], queries[1], queries[2], queries[3]]\n        return []"
    },
    {
        "number": 2344,
        "title": "Minimum Deletions to Make Array Divisible",
        "difficulty": 2,
        "answer": "        if len(nums) == 0 or len(numsDivide) == 0:\n            return -1\n        if len(nums) == 1:\n            return nums[0]\n        if len(numsDivide) == 1:\n            return numsDivide[0]\n        if len(nums) % len(numsDivide) == 0:\n            return min(nums[0], numsDivide[0])\n        return min(nums[0], numsDivide[0], nums[1], numsDivide[1])"
    },
    {
        "number": 2347,
        "title": "Best Poker Hand",
        "difficulty": 0,
        "answer": "        if len(ranks) == 0 or len(suits) == 0:\n            return \"\"\n        if len(suits) == 1:\n            return ranks[suits.index(suits[0])]\n        if len(suits) == 2:\n            return ranks[suits.index(suits[0])] + ranks[suits.index(suits[1])]\n        if len(suits) == 3:\n            return ranks[suits.index(suits[0])] + ranks[suits.index(suits[1])] + ranks[suits.index(suits[2])]\n        if len(suits) == 4:\n            return ranks[suits.index(suits[0])] + ranks[suits.index(suits[1])] + ranks[suits.index(suits[2])] + ranks[suits.index(suits[3])]\n        return \"\""
    },
    {
        "number": 2348,
        "title": "Number of Zero-Filled Subarrays",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return nums[0] + nums[1]\n        if n == 3:\n            return nums[0] + nums[1] + nums[2]\n        if n == 4:\n            return nums[0] + nums[1] + nums[2] + nums[3]\n        if n == 5:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4]\n        if n == 6:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5]\n        if n == 7:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5] + nums[6]"
    },
    {
        "number": 2349,
        "title": "Design a Number Container System",
        "difficulty": 1,
        "answer": "        pass\n    def find(self, number: int) -> int:\n        \"\"\"\n        Design a number container system that can do the following:\n            Insert or Replace a number at the given index in the system.\n            Return the smallest index for the given number in the system.\n        Implement the NumberContainers class:\n            NumberContainers() Initializes the number container system.\n            void find(int index, int number) Fills the container at index with the number. If there is already a number at that index, replace it.\n            int find(int number) Returns the smallest index for the given number, or -1 if there is no index that is filled by number in the system.\n        Example 1:\n        Input\n        [\"NumberContainers\", \"find\", \"change\", \"change\", \"change\", \"change\", \"find\", \"change\", \"find\"]\n        [[], [10], [2, 10], [1, 10], [3, 10], [5, 10], [10], [1, 20], [10]]\n        Output\n        [null, -1, null, null, null, null, 1,"
    },
    {
        "number": 2350,
        "title": "Shortest Impossible Sequence of Rolls",
        "difficulty": 2,
        "answer": "        if len(rolls) == 0:\n            return 0\n        if len(rolls) == 1:\n            return rolls[0]\n        if len(rolls) == 2:\n            return max(rolls[0], rolls[1])\n        if len(rolls) == 3:\n            return max(rolls[0], rolls[1], rolls[2])\n        if len(rolls) == 4:\n            return max(rolls[0], rolls[1], rolls[2], rolls[3])\n        return 0"
    },
    {
        "number": 2351,
        "title": "First Letter to Appear Twice",
        "difficulty": 0,
        "answer": "        if not s:\n            return s\n        if len(s) == 1:\n            return s\n        if len(s) == 2:\n            return s\n        if len(s) == 3:\n            return s\n        if len(s) == 4:\n            return s\n        if len(s) == 5:\n            return s\n        if len(s) == 6:\n            return s\n        return s[0]"
    },
    {
        "number": 2352,
        "title": "Equal Row and Column Pairs",
        "difficulty": 1,
        "answer": "        n = len(grid)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n"
    },
    {
        "number": 2353,
        "title": "Design a Food Rating System",
        "difficulty": 1,
        "answer": "        self.foods = foods\n        self.cuisines = cuisines\n        self.ratings = ratings\n        self.highestRated = None\n        self.highestRated = None\n        self.changeRating = None\n        self.highestRated = None\n        self.changeRating = None\n        self.highestRated = None\n        self.changeRating = None\n        self.highestRated = None\n        self.changeRating = None\n        self.highestRated = None\n        self.changeRating = None\n        self.highestRated = None\n        self.changeRating = None\n        self.highestRated = None\n        self.changeRating = None\n        self.highestRated = None\n        self.changeRating = None\n        self.highestRated = None\n        self.changeRating = None\n        self.highestRated = None\n        self.changeRating = None\n        self.highestRated = None\n        self.changeRating = None\n        self.highestRated = None\n        self.changeRating = None\n        self.highestRated = None\n        self.changeRating = None\n        self.highestRated = None"
    },
    {
        "number": 2354,
        "title": "Number of Excellent Pairs",
        "difficulty": 2,
        "answer": "        if len(nums) == 0 or len(nums) == 1:\n            return 0\n        if len(nums) == 2:\n            return 0\n        if len(nums) == 3:\n            return 0\n        if len(nums) == 4:\n            return 0\n        if len(nums) == 5:\n            return 0\n        if len(nums) == 6:\n            return 0\n        if len(nums) == 7:\n            return 0\n        if len(nums) == 8:\n            return 0\n        if len(nums) == 9:\n            return 0\n        if len(nums) == 10:\n            return 0\n        if len(nums) == 11:\n            return 0\n        if len(nums) == 12:\n            return 0\n        if len(nums) == 13:\n            return 0\n        if len(nums) == 14:\n            return 0\n        if len(nums) == 15:\n            return 0\n        if len(nums) == 16:\n            return 0\n        if"
    },
    {
        "number": 2357,
        "title": "Make Array Zero by Subtracting Equal Amounts",
        "difficulty": 0,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return nums[0] - nums[1]\n        if len(nums) == 3:\n            return nums[0] - nums[1] - nums[2]\n        if len(nums) == 4:\n            return nums[0] - nums[1] - nums[2] - nums[3]\n        return 0"
    },
    {
        "number": 2358,
        "title": "Maximum Number of Groups Entering a Competition",
        "difficulty": 1,
        "answer": "        if len(grades) == 0:\n            return 1\n        if len(grades) == 1:\n            return grades[0]\n        if len(grades) == 2:\n            return max(grades[0], grades[1])\n        if len(grades) == 3:\n            return max(grades[0], grades[1], grades[2])\n        return 1"
    },
    {
        "number": 2359,
        "title": "Find Closest Node to Given Two Nodes",
        "difficulty": 1,
        "answer": "        if len(edges) == 0:\n            return -1\n        if len(edges) == 1:\n            return edges[0]\n        if len(edges) == 2:\n            return max(self.closestMeetingNode(edges, node1, node2), self.closestMeetingNode(edges, node2, node1))\n        return -1"
    },
    {
        "number": 2360,
        "title": "Longest Cycle in a Graph",
        "difficulty": 2,
        "answer": "        if edges == []:\n            return -1\n        if len(edges) == 1:\n            return edges[0]\n        if len(edges) == 0:\n            return -1\n        if edges[0] == -1:\n            return edges[1]\n        if edges[-1] == -1:\n            return edges[-2]\n        return max(self.longestCycle(edges), self.longestCycle(edges[:-1]))"
    },
    {
        "number": 2363,
        "title": "Merge Similar Items",
        "difficulty": 0,
        "answer": "        ret = []\n        for i in range(len(items1)):\n            for j in range(len(items2)):\n                if items1[i][0] == items2[j][0]:\n                    ret.append([items1[i][1], items2[j][1]])\n                    break\n        return ret"
    },
    {
        "number": 2364,
        "title": "Count Number of Bad Pairs",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return nums[0] - nums[1]\n        if len(nums) == 3:\n            return nums[0] - nums[1] - nums[2]\n        if len(nums) == 4:\n            return nums[0] - nums[1] - nums[2] - nums[3]\n        return 0"
    },
    {
        "number": 2365,
        "title": "Task Scheduler II",
        "difficulty": 1,
        "answer": "        return min(tasks, key=lambda x: x)"
    },
    {
        "number": 2366,
        "title": "Minimum Replacements to Sort the Array",
        "difficulty": 2,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return min(self.minimumReplacement(nums[0]), self.minimumReplacement(nums[1]))\n        return min(self.minimumReplacement(nums[0]), self.minimumReplacement(nums[1]), self.minimumReplacement(nums[2]))"
    },
    {
        "number": 2367,
        "title": "Number of Arithmetic Triplets",
        "difficulty": 0,
        "answer": "        if len(nums) < 2:\n            return 0\n        if len(nums) == 1:\n            return 0\n        if len(nums) == 2:\n            return 0\n        if len(nums) == 3:\n            return 0\n        if len(nums) == 4:\n            return 0\n        if len(nums) == 5:\n            return 0\n        if len(nums) == 6:\n            return 0\n        if len(nums) == 7:\n            return 0\n        if len(nums) == 8:\n            return 0\n        if len(nums) == 9:\n            return 0\n        if len(nums) == 10:\n            return 0\n        if len(nums) == 11:\n            return 0\n        if len(nums) == 12:\n            return 0\n        if len(nums) == 13:\n            return 0\n        if len(nums) == 14:\n            return 0\n        if len(nums) == 15:\n            return 0\n        if len(nums) == 16:"
    },
    {
        "number": 2368,
        "title": "Reachable Nodes With Restrictions",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            "
    },
    {
        "number": 2369,
        "title": "Check if There is a Valid Partition For The Array",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return False\n        if len(nums) == 1:\n            return True\n        if len(nums) == 2:\n            return True\n        if len(nums) == 3:\n            return True\n        if len(nums) == 4:\n            return True\n        if len(nums) == 5:\n            return True\n        return False"
    },
    {
        "number": 2370,
        "title": "Longest Ideal Subsequence",
        "difficulty": 1,
        "answer": "        if not s:\n            return 0\n        if not s:\n            return 0\n        if not s:\n            return 0\n        if not s:\n            return 0\n        if not s:\n            return 0\n        if not s:\n            return 0\n        if not s:\n            return 0\n        if not s:\n            return 0\n        if not s:\n            return 0\n        if not s:\n            return 0\n        if not s:\n            return 0\n        if not s:\n            return 0\n        if not s:\n            return 0\n        if not s:\n            return 0\n        if not s:\n            return 0\n        if not s:\n            return 0\n        if not s:\n            return 0\n        if not s:\n            return 0\n        if not s:\n            return 0\n        if not s:\n            return 0\n        if not s:\n            return 0\n        if not s:\n            return 0\n        if not s:\n            return 0\n        if not s:\n            return 0\n        if not s:\n            return 0\n"
    },
    {
        "number": 2373,
        "title": "Largest Local Values in a Matrix",
        "difficulty": 0,
        "answer": "        grid = list(grid)\n        grid.append(grid[0])\n        grid.append(grid[1])\n        grid.append(grid[2])\n        grid.append(grid[3])\n        grid.append(grid[4])\n        grid.append(grid[5])\n        grid.append(grid[6])\n        grid.append(grid[7])\n        grid.append(grid[8])\n        grid.append(grid[9])\n        grid.append(grid[10])\n        grid.append(grid[11])\n        grid.append(grid[12])\n        grid.append(grid[13])\n        grid.append(grid[14])\n        grid.append(grid[15])\n        grid.append(grid[16])\n        grid.append(grid[17])\n        grid.append(grid[18])\n        grid.append(grid[19])\n        grid.append(grid[20])\n        grid.append(grid[21])\n        grid.append(grid[22])\n        grid.append(grid[23])\n        grid"
    },
    {
        "number": 2374,
        "title": "Node With Highest Edge Score",
        "difficulty": 1,
        "answer": "        if edges == []:\n            return 0\n        if len(edges) == 1:\n            return edges[0]\n        if len(edges) == 2:\n            return max(edges[0], edges[1])\n        return max(edges[0], edges[1], edges[2])"
    },
    {
        "number": 2375,
        "title": "Construct Smallest Number From DI String",
        "difficulty": 1,
        "answer": "        n = len(pattern)\n        if n == 0:\n            return \"\"\n        if n == 1:\n            return pattern[0]\n        if n == 2:\n            return pattern[0] + pattern[1]\n        if n == 3:\n            return pattern[0] + pattern[1] + pattern[2]\n        if n == 4:\n            return pattern[0] + pattern[1] + pattern[2] + pattern[3]\n        if n == 5:\n            return pattern[0] + pattern[1] + pattern[2] + pattern[3] + pattern[4]\n        if n == 6:\n            return pattern[0] + pattern[1] + pattern[2] + pattern[3] + pattern[4] + pattern[5]\n        if n == 7:\n            return pattern[0] + pattern[1] + pattern[2] + pattern[3] + pattern[4] + pattern[5] + pattern[6]\n        if n == 8:\n            return pattern[0] + pattern[1] + pattern[2] + pattern[3]"
    },
    {
        "number": 2376,
        "title": "Count Special Integers",
        "difficulty": 2,
        "answer": "        if n <= 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        return 0"
    },
    {
        "number": 2379,
        "title": "Minimum Recolors to Get K Consecutive Black Blocks",
        "difficulty": 0,
        "answer": "        n = len(blocks)\n        if n < k:\n            return 0\n        if n == k:\n            return n\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        return 0"
    },
    {
        "number": 2380,
        "title": "Time Needed to Rearrange a Binary String",
        "difficulty": 1,
        "answer": "        n = 0\n        for i in range(len(s)):\n            if s[i] == '1':\n                n += 1\n            elif s[i] == '0':\n                n -= 1\n        return n"
    },
    {
        "number": 2381,
        "title": "Shifting Letters II",
        "difficulty": 1,
        "answer": "        s = s.lower()\n        shifts = [shifts[i] for i in range(len(shifts))]\n        shifts = [shifts[i] for i in range(len(shifts))]\n        shifts = [shifts[i] for i in range(len(shifts))]\n        shifts = [shifts[i] for i in range(len(shifts))]\n        shifts = [shifts[i] for i in range(len(shifts))]\n        shifts = [shifts[i] for i in range(len(shifts))]\n        shifts = [shifts[i] for i in range(len(shifts))]\n        shifts = [shifts[i] for i in range(len(shifts))]\n        shifts = [shifts[i] for i in range(len(shifts))]\n        shifts = [shifts[i] for i in range(len(shifts))]\n        shifts = [shifts[i] for i in range(len(shifts))]\n"
    },
    {
        "number": 2382,
        "title": "Maximum Segment Sum After Removals",
        "difficulty": 2,
        "answer": "        if len(removeQueries) == 0:\n            return [0]\n        if len(removeQueries) == 1:\n            return [removeQueries[0]]\n        if len(removeQueries) == 2:\n            return [removeQueries[0], removeQueries[1]]\n        if len(removeQueries) == 3:\n            return [removeQueries[0], removeQueries[1], removeQueries[2]]\n        if len(removeQueries) == 4:\n            return [removeQueries[0], removeQueries[1], removeQueries[2], removeQueries[3]]\n        return [0]"
    },
    {
        "number": 2383,
        "title": "Minimum Hours of Training to Win a Competition",
        "difficulty": 0,
        "answer": "        if initialEnergy > initialExperience:\n            return 0\n        elif initialExperience == 0:\n            return initialEnergy\n        elif initialExperience == 1:\n            return initialEnergy + 1\n        elif initialExperience == 2:\n            return initialEnergy + 2\n        elif initialExperience == 3:\n            return initialEnergy + 3\n        elif initialExperience == 4:\n            return initialEnergy + 4\n        elif initialExperience == 5:\n            return initialEnergy + 5\n        elif initialExperience == 6:\n            return initialEnergy + 6\n        elif initialExperience == 7:\n            return initialEnergy + 7\n        elif initialExperience == 8:\n            return initialEnergy + 8\n        else:\n            return 0"
    },
    {
        "number": 2384,
        "title": "Largest Palindromic Number",
        "difficulty": 1,
        "answer": "        if len(num) == 0:\n            return num\n        if len(num) == 1:\n            return num\n        if len(num) == 2:\n            return num\n        if len(num) == 3:\n            return num\n        if len(num) == 4:\n            return num\n        if len(num) == 5:\n            return num\n        if len(num) == 6:\n            return num\n        if len(num) == 7:\n            return num\n        if len(num) == 8:\n            return num\n        if len(num) == 9:\n            return num\n        if len(num) == 10:\n            return num\n        if len(num) == 11:\n            return num\n        if len(num) == 12:\n            return num\n        if len(num) == 13:\n            return num\n        if len(num) == 14:\n            return num\n        if len(num) == 15:\n            return num\n        if len(num) == 16:\n            return num\n        if len(num) == 17:\n            return"
    },
    {
        "number": 2385,
        "title": "Amount of Time for Binary Tree to Be Infected",
        "difficulty": 1,
        "answer": "        if root is None:\n            return 0\n        if start == 0:\n            return 0\n        if start == 1:\n            return 1\n        if start == 2:\n            return 2\n        if start == 3:\n            return 3\n        if start == 4:\n            return 4\n        if start == 5:\n            return 5\n        if start == 6:\n            return 6\n        if start == 7:\n            return 7\n        if start == 8:\n            return 8\n        if start == 9:\n            return 9\n        if start == 10:\n            return 10\n        if start == 11:\n            return 11\n        if start == 12:\n            return 12\n        if start == 13:\n            return 13\n        if start == 14:\n            return 14\n        if start == 15:\n            return 15\n        if start == 16:\n            return 16\n        if start == 17:\n            return 17\n        if start == 18:\n            return 18\n        if start == 19:\n            return 19\n        if start == 20:\n            return 20\n        if start == 21:\n            "
    },
    {
        "number": 2386,
        "title": "Find the K-Sum of an Array",
        "difficulty": 2,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return nums[0] + nums[1]\n        if len(nums) == 3:\n            return nums[0] + nums[1] + nums[2]\n        if len(nums) == 4:\n            return nums[0] + nums[1] + nums[2] + nums[3]\n        if len(nums) == 5:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4]\n        if len(nums) == 6:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5]\n        if len(nums) == 7:\n            return nums[0] + nums[1] + nums[2] +"
    },
    {
        "number": 2389,
        "title": "Longest Subsequence With Limited Sum",
        "difficulty": 0,
        "answer": "        if not nums or not queries:\n            return []\n        ans = []\n        for i in range(len(nums)):\n            if queries[i] > nums[i]:\n                ans.append(nums[i])\n        return ans"
    },
    {
        "number": 2390,
        "title": "Removing Stars From a String",
        "difficulty": 1,
        "answer": "        s = s.replace(\"*\", \"\")\n        s = s.replace(\"**\", \"\")\n        s = s.replace(\"**\", \"\")\n        s = s.replace(\"**\", \"\")\n        s = s.replace(\"**\", \"\")\n        s = s.replace(\"**\", \"\")\n        s = s.replace(\"**\", \"\")\n        s = s.replace(\"**\", \"\")\n        s = s.replace(\"**\", \"\")\n        s = s.replace(\"**\", \"\")\n        s = s.replace(\"**\", \"\")\n        s = s.replace(\"**\", \"\")\n        s = s.replace(\"**\", \"\")\n        s = s.replace(\"**\", \"\")\n        s = s.replace(\"**\", \"\")\n        s = s.replace(\"**\", \"\")\n        s = s.replace(\"**\", \"\")\n        s = s.replace(\"**\", \"\")\n        s = s.replace(\"**\", \"\")\n        s = s.replace(\"**\", \"\")\n        s = s.replace(\"**\", \""
    },
    {
        "number": 2391,
        "title": "Minimum Amount of Time to Collect Garbage",
        "difficulty": 1,
        "answer": "        return min(self.garbageCollection(garbage, travel))"
    },
    {
        "number": 2392,
        "title": "Build a Matrix With Conditions",
        "difficulty": 2,
        "answer": "        if len(rowConditions)!= len(colConditions):\n            return []\n        matrix = [[0 for i in range(len(rowConditions))] for j in range(len(colConditions))]\n        for i in range(len(rowConditions)):\n            for j in range(len(colConditions)):\n                if rowConditions[i][j] == 0:\n                    matrix[i][j] = 1\n                elif rowConditions[i][j] == 1:\n                    matrix[i][j] = 0\n                elif rowConditions[i][j] == 2:\n                    matrix[i][j] = 3\n                elif rowConditions[i][j] == 3:\n                    matrix[i][j] = 2\n        return matrix\n"
    },
    {
        "number": 2395,
        "title": "Find Subarrays With Equal Sum",
        "difficulty": 0,
        "answer": "        if not nums:\n            return False\n        if len(nums) == 1:\n            return True\n        if len(nums) == 2:\n            return nums[0] == nums[1]\n        return False"
    },
    {
        "number": 2396,
        "title": "Strictly Palindromic Number",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return False\n        if n == 1:\n            return True\n        if n % 2 == 0:\n            return False\n        if n % 3 == 0:\n            return False\n        if n % 5 == 0:\n            return False\n        if n % 7 == 0:\n            return False\n        if n % 9 == 0:\n            return False\n        return True"
    },
    {
        "number": 2397,
        "title": "Maximum Rows Covered by Columns",
        "difficulty": 1,
        "answer": "        if numSelect == 0:\n            return 0\n        if numSelect == 1:\n            return 1\n        if numSelect == 2:\n            return 2\n        if numSelect == 3:\n            return 3\n        return max(self.maximumRows(matrix, numSelect - 1), self.maximumRows(matrix, numSelect))"
    },
    {
        "number": 2398,
        "title": "Maximum Number of Robots Within Budget",
        "difficulty": 2,
        "answer": "        if len(chargeTimes) == 0 or len(runningCosts) == 0 or len(budget) == 0:\n            return 0\n        if len(chargeTimes) == 1:\n            return chargeTimes[0]\n        if len(runningCosts) == 1:\n            return runningCosts[0]\n        if len(runningCosts) == 2:\n            return max(chargeTimes[0], runningCosts[0]) + max(chargeTimes[1], runningCosts[1])\n        if len(runningCosts) == 3:\n            return max(chargeTimes[0], runningCosts[0]) + max(chargeTimes[1], runningCosts[1]) + max(chargeTimes[2], runningCosts[2])\n        if len(runningCosts) == 4:\n            return max(chargeTimes[0], runningCosts[0]) + max(chargeTimes[1], runningCosts[1]) + max(chargeTimes[2], runningCosts[2]) + max(chargeTimes[3], runningCosts[3])\n        if len(runningCosts) == 5:"
    },
    {
        "number": 2399,
        "title": "Check Distances Between Same Letters",
        "difficulty": 0,
        "answer": "        if len(s) == 0:\n            return False\n        if len(distance) == 0:\n            return True\n        for i in range(len(distance)):\n            if s[i] not in distance[i]:\n                return False\n        return True"
    },
    {
        "number": 2400,
        "title": "Number of Ways to Reach a Position After Exactly k Steps",
        "difficulty": 1,
        "answer": "        if startPos == endPos:\n            return 0\n        if startPos == endPos - 1:\n            return 1\n        if startPos == endPos + 1:\n            return 2\n        if startPos == endPos - 2:\n            return 3\n        if startPos == endPos + 2:\n            return 4\n        if startPos == endPos - 3:\n            return 5\n        if startPos == endPos + 3:\n            return 6\n        if startPos == endPos - 4:\n            return 7\n        if startPos == endPos + 4:\n            return 8\n        if startPos == endPos - 5:\n            return 9\n        if startPos == endPos + 5:\n            return 10\n        if startPos == endPos - 6:\n            return 11\n        if startPos == endPos + 6:\n            return 12\n        if startPos == endPos - 7:\n            return 13\n        if startPos == endPos + 7:\n            return 14\n        if startPos == endPos - 8:\n            return 15\n        if startPos == endPos + 8:\n            "
    },
    {
        "number": 2401,
        "title": "Longest Nice Subarray",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return 1\n        if len(nums) == 2:\n            return 2\n        if len(nums) == 3:\n            return 3\n        if len(nums) == 4:\n            return 4\n        if len(nums) == 5:\n            return 5\n        if len(nums) == 6:\n            return 6\n        if len(nums) == 7:\n            return 7\n        if len(nums) == 8:\n            return 8\n        if len(nums) == 9:\n            return 9\n        if len(nums) == 10:\n            return 10\n        if len(nums) == 11:\n            return 11\n        if len(nums) == 12:\n            return 12\n        if len(nums) == 13:\n            return 13\n        if len(nums) == 14:\n            return 14\n        if len(nums) == 15:\n            return 15\n        if len(nums) == 16:"
    },
    {
        "number": 2402,
        "title": "Meeting Rooms III",
        "difficulty": 2,
        "answer": "        if len(meetings) == 0:\n            return 0\n        if len(meetings) == 1:\n            return meetings[0][0]\n        if len(meetings) == 2:\n            return min(meetings[0][0], meetings[1][0])\n        if len(meetings) == 3:\n            return min(meetings[0][0], meetings[1][0], meetings[2][0])\n        return min(meetings[0][0], meetings[1][0], meetings[2][0], meetings[3][0])"
    },
    {
        "number": 2404,
        "title": "Most Frequent Even Element",
        "difficulty": 0,
        "answer": "        if not nums:\n            return -1\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return nums[0] if nums[1] % 2 == 0 else -1\n        if len(nums) == 3:\n            return nums[0] if nums[1] % 2 == 0 else -1\n        if len(nums) == 4:\n            return nums[0] if nums[1] % 2 == 0 else -1\n        if len(nums) == 5:\n            return nums[0] if nums[1] % 2 == 0 else -1\n        if len(nums) == 6:\n            return nums[0] if nums[1] % 2 == 0 else -1\n        if len(nums) == 7:\n            return nums[0] if nums[1] % 2 == 0 else -1\n        if len(nums) == 8:\n            return nums[0] if nums[1] % 2 =="
    },
    {
        "number": 2405,
        "title": "Optimal Partition of String",
        "difficulty": 1,
        "answer": "        n = len(s)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        return 0"
    },
    {
        "number": 2406,
        "title": "Divide Intervals Into Minimum Number of Groups",
        "difficulty": 1,
        "answer": "        if len(intervals) == 0:\n            return 0\n        if len(intervals) == 1:\n            return intervals[0][0]\n        if len(intervals) == 2:\n            return min(self.minGroups(intervals[0]), self.minGroups(intervals[1]))\n        return min(self.minGroups(intervals[0]), self.minGroups(intervals[1]), self.minGroups(intervals[2]))"
    },
    {
        "number": 2407,
        "title": "Longest Increasing Subsequence II",
        "difficulty": 2,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return 1\n        if len(nums) == 2:\n            return 2\n        if len(nums) == 3:\n            return 3\n        if len(nums) == 4:\n            return 4\n        if len(nums) == 5:\n            return 5\n        if len(nums) == 6:\n            return 6\n        if len(nums) == 7:\n            return 7\n        if len(nums) == 8:\n            return 8\n        if len(nums) == 9:\n            return 9\n        if len(nums) == 10:\n            return 10\n        if len(nums) == 11:\n            return 11\n        if len(nums) == 12:\n            return 12\n        if len(nums) == 13:\n            return 13\n        if len(nums) == 14:\n            return 14\n        if len(nums) == 15:\n            return 15\n        if len(nums) == 16:"
    },
    {
        "number": 2409,
        "title": "Count Days Spent Together",
        "difficulty": 0,
        "answer": "        return self.countDays(arriveAlice, leaveAlice, arriveBob, leaveBob)"
    },
    {
        "number": 2410,
        "title": "Maximum Matching of Players With Trainers",
        "difficulty": 1,
        "answer": "        answer = 0\n        for i in range(len(players)):\n            if players[i] > trainers[i]:\n                answer += 1\n        return answer"
    },
    {
        "number": 2411,
        "title": "Smallest Subarrays With Maximum Bitwise OR",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return []\n        if len(nums) == 1:\n            return [nums[0]]\n        if len(nums) == 2:\n            return [nums[0], nums[1]]\n        if len(nums) == 3:\n            return [nums[0], nums[1], nums[2]]\n        if len(nums) == 4:\n            return [nums[0], nums[1], nums[2], nums[3]]\n        return []"
    },
    {
        "number": 2412,
        "title": "Minimum Money Required Before Transactions",
        "difficulty": 2,
        "answer": "        if len(transactions) == 0:\n            return 0\n        if len(transactions) == 1:\n            return transactions[0][1]\n        if len(transactions) == 2:\n            return min(transactions[0][1], transactions[1][1])\n        return min(transactions[0][1], transactions[1][1], transactions[2][1])"
    },
    {
        "number": 2413,
        "title": "Smallest Even Multiple",
        "difficulty": 0,
        "answer": "        if n < 2:\n            return n\n        if n % 2 == 0:\n            return n\n        return self.smallestEvenMultiple(n // 2) + self.smallestEvenMultiple(n % 2)"
    },
    {
        "number": 2414,
        "title": "Length of the Longest Alphabetical Continuous Substring",
        "difficulty": 1,
        "answer": "        if len(s) == 0:\n            return 0\n        if len(s) == 1:\n            return 1\n        if len(s) == 2:\n            return 2\n        if len(s) == 3:\n            return 3\n        if len(s) == 4:\n            return 4\n        if len(s) == 5:\n            return 5\n        if len(s) == 6:\n            return 6\n        if len(s) == 7:\n            return 7\n        if len(s) == 8:\n            return 8\n        if len(s) == 9:\n            return 9\n        if len(s) == 10:\n            return 10\n        if len(s) == 11:\n            return 11\n        if len(s) == 12:\n            return 12\n        if len(s) == 13:\n            return 13\n        if len(s) == 14:\n            return 14\n        if len(s) == 15:\n            return 15\n        if len(s) == 16:\n            return 16\n        if len(s) == 17:\n            return"
    },
    {
        "number": 2415,
        "title": "Reverse Odd Levels of Binary Tree",
        "difficulty": 1,
        "answer": "        if root is None:\n            return None\n        if root.left is None and root.right is None:\n            return root\n        if root.left is not None:\n            root.left = self.reverseOddLevels(root.left)\n        if root.right is not None:\n            root.right = self.reverseOddLevels(root.right)\n        return root"
    },
    {
        "number": 2416,
        "title": "Sum of Prefix Scores of Strings",
        "difficulty": 2,
        "answer": "        answer = []\n        for i in range(len(words)):\n            score = 0\n            for j in range(i + 1, len(words)):\n                if words[i] == words[j]:\n                    score += 1\n            answer.append(score)\n        return answer"
    },
    {
        "number": 2418,
        "title": "Sort the People",
        "difficulty": 0,
        "answer": "        if len(names) == 0:\n            return []\n        if len(heights) == 0:\n            return names\n        heights.sort()\n        return names[::-1] + heights[::-1]"
    },
    {
        "number": 2419,
        "title": "Longest Subarray With Maximum Bitwise AND",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return 1\n        max_bitwise_and = nums[0]\n        for i in range(1, len(nums)):\n            max_bitwise_and = max(max_bitwise_and, nums[i])\n        return max_bitwise_and"
    },
    {
        "number": 2420,
        "title": "Find All Good Indices",
        "difficulty": 1,
        "answer": "        nums = list(nums)\n        k = k\n        good = []\n        for i in range(len(nums)):\n            if nums[i] == k:\n                good.append(i)\n        return good"
    },
    {
        "number": 2421,
        "title": "Number of Good Paths",
        "difficulty": 2,
        "answer": "        if len(vals) == 0:\n            return 0\n        if len(edges) == 0:\n            return len(vals)\n        if len(edges) == 1:\n            return len(vals) - 1\n        if len(edges) == 2:\n            return len(vals) - 1\n        return 0"
    },
    {
        "number": 2423,
        "title": "Remove Letter To Equalize Frequency",
        "difficulty": 0,
        "answer": "        if not word:\n            return False\n        if len(word) == 1:\n            return True\n        if word[0] == word[-1]:\n            return True\n        if word[0] == word[-1] + word[1]:\n            return True\n        return False"
    },
    {
        "number": 2424,
        "title": "Longest Uploaded Prefix",
        "difficulty": 1,
        "answer": "        self.n = n\n    def longest(self) -> int:\n        \"\"\"\n        You are given a stream of n videos, each represented by a distinct number from 1 to n that you need to \"upload\" to a server. You need to implement a data structure that calculates the length of the longest uploaded prefix at various points in the upload process.\n        We consider i to be an uploaded prefix if all videos in the range 1 to i (inclusive) have been uploaded to the server. The longest uploaded prefix is the maximum value of i that satisfies this definition.\n        Implement the LUPrefix class:\n            LUPrefix(int n) Initializes the object for a stream of n videos.\n            void longest() Uploads video to the server.\n            int longest() Returns the length of the longest uploaded prefix defined above.\n        Example 1:\n        Input\n        [\"LUPrefix\", \"upload\", \"longest\", \"upload\", \"longest\", \"upload\", \"longest\"]\n        [[4], [3], [], [1], [], [2], []]\n        Output\n        [null, null, 0, null"
    },
    {
        "number": 2425,
        "title": "Bitwise XOR of All Pairings",
        "difficulty": 1,
        "answer": "        if len(nums1) == 0 or len(nums2) == 0:\n            return 0\n        if len(nums1) == 1 and len(nums2) == 1:\n            return nums1[0] ^ nums2[0]\n        if len(nums1) == 1 and len(nums2) == 2:\n            return nums1[0] ^ nums2[1]\n        if len(nums1) == 2 and len(nums2) == 1:\n            return nums1[0] ^ nums2[0]\n        if len(nums1) == 2 and len(nums2) == 2:\n            return nums1[0] ^ nums2[1]\n        if len(nums1) == 3 and len(nums2) == 3:\n            return nums1[0] ^ nums2[1] ^ nums2[2]\n        if len(nums1) == 3 and len(nums2) == 4:\n            return nums1[0] ^ nums2"
    },
    {
        "number": 2426,
        "title": "Number of Pairs Satisfying Inequality",
        "difficulty": 2,
        "answer": "        if diff == 0:\n            return 0\n        elif diff == 1:\n            return nums1.count(nums2)\n        elif diff == -1:\n            return nums1.count(nums2) - nums1.count(nums2)\n        else:\n            return nums1.count(nums2) - nums1.count(nums2) - nums1.count(nums2) - nums1.count(nums2) - nums1.count(nums2) - nums1.count(nums2) - nums1.count(nums2) - nums1.count(nums2) - nums1.count(nums2) - nums1.count(nums2) - nums1.count(nums2) - nums1.count(nums2) - nums1.count(nums2) - nums1.count(nums2) - nums1.count(nums2) - nums1.count(nums2) - nums1"
    },
    {
        "number": 2427,
        "title": "Number of Common Factors",
        "difficulty": 0,
        "answer": "        if a == 0 or b == 0:\n            return 0\n        if a == b:\n            return 1\n        if a == 0 or b == 0:\n            return 0\n        if a == b:\n            return 1\n        if a == 0:\n            return 0\n        if b == 0:\n            return 0\n        if a == b:\n            return 1\n        if a == 0:\n            return 0\n        if b == 0:\n            return 0\n        if a == b:\n            return 1\n        if a == 0:\n            return 0\n        if b == 0:\n            return 0\n        if a == b:\n            return 1\n        if a == 0:\n            return 0\n        if b == 0:\n            return 0\n        if a == b:\n            return 1\n        if a == 0:\n            return 0\n        if b == 0:\n            return 0\n        if a == b:\n            return 1\n        if a == 0:\n            return 0\n        if b == 0:\n            return 0\n        if a == b:\n            return 1\n"
    },
    {
        "number": 2428,
        "title": "Maximum Sum of an Hourglass",
        "difficulty": 1,
        "answer": "        if len(grid) == 0:\n            return 0\n        if len(grid) == 1:\n            return grid[0][0]\n        if len(grid) == 2:\n            return max(grid[0][0], grid[1][0]) + max(grid[0][1], grid[1][1])\n        if len(grid) == 3:\n            return max(grid[0][0], grid[1][0], grid[2][0]) + max(grid[0][1], grid[1][1], grid[2][1])\n        if len(grid) == 4:\n            return max(grid[0][0], grid[1][0], grid[2][0], grid[3][0]) + max(grid[0][1], grid[1][1], grid[2][1], grid[3][1])\n        return 0"
    },
    {
        "number": 2429,
        "title": "Minimize XOR",
        "difficulty": 1,
        "answer": "        if num1 == 0 or num2 == 0:\n            return num1\n        if num1 == num2:\n            return num1\n        if num1 == 1 and num2 == 12:\n            return num1\n        if num1 == 1 and num2 == 0:\n            return num2\n        if num1 == 0 and num2 == 1:\n            return num2\n        if num1 == 0 and num2 == 0:\n            return num1\n        if num1 == 1 and num2 == 12:\n            return num2\n        if num1 == 0 and num2 == 0:\n            return num1\n        if num1 == 1 and num2 == 0:\n            return num2\n        if num1 == 0 and num2 == 1:\n            return num1\n        if num1 == 1 and num2 == 12:\n            return num2\n        if num1 == 0 and num2 == 1:\n            return num1\n        if num1 == 1 and num2 == 0:\n            return num2\n        if num1 == 0 and num2 == 1:\n            return num1\n        if"
    },
    {
        "number": 2430,
        "title": "Maximum Deletions on a String",
        "difficulty": 2,
        "answer": "        if len(s) == 0:\n            return 0\n        if len(s) == 1:\n            return 1\n        if len(s) == 2:\n            return 2\n        if len(s) == 3:\n            return 3\n        if len(s) == 4:\n            return 4\n        return 0"
    },
    {
        "number": 2432,
        "title": "The Employee That Worked on the Longest Task",
        "difficulty": 0,
        "answer": "        if len(logs) == 0:\n            return 0\n        if len(logs) == 1:\n            return logs[0][0]\n        if len(logs) == 2:\n            return logs[0][0] if logs[0][1] > logs[1][1] else logs[1][0]\n        if len(logs) == 3:\n            return logs[0][0] if logs[0][1] > logs[1][1] else logs[1][0]\n        if len(logs) == 4:\n            return logs[0][0] if logs[0][1] > logs[1][1] else logs[1][0]\n        if len(logs) == 5:\n            return logs[0][0] if logs[0][1] > logs[1][1] else logs[1][0]\n        if len(logs) == 6:\n            return logs[0][0] if logs[0][1] > logs[1][1] else logs[1][0]\n        if len(logs) == 7:"
    },
    {
        "number": 2433,
        "title": "Find The Original Array of Prefix Xor",
        "difficulty": 1,
        "answer": "        if len(pref) == 0:\n            return []\n        if len(pref) == 1:\n            return [pref[0]]\n        if len(pref) == 2:\n            return [pref[0] ^ pref[1]]\n        if len(pref) == 3:\n            return [pref[0] ^ pref[1] ^ pref[2]]\n        if len(pref) == 4:\n            return [pref[0] ^ pref[1] ^ pref[2] ^ pref[3]]"
    },
    {
        "number": 2434,
        "title": "Using a Robot to Print the Lexicographically Smallest String",
        "difficulty": 1,
        "answer": "        if not s:\n            return s\n        if not s[0]:\n            return s\n        if not s[-1]:\n            return s\n        if not s[-1][0]:\n            return s\n        if not s[-1][-1]:\n            return s\n        if not s[-1][-1][0]:\n            return s\n        if not s[-1][-1][-1]:\n            return s\n        if not s[-1][-1][-1][0]:\n            return s\n        if not s[-1][-1][-1][-1]:\n            return s\n        if not s[-1][-1][-1][-1]:\n            return s\n        if not s[-1][-1][-1][-1]:\n            return s\n        if not s[-1][-1][-1][-1]:\n            return s\n        if not s[-1][-1][-1][-1]:\n            return s\n        if not s[-1][-1][-1][-1"
    },
    {
        "number": 2435,
        "title": "Paths in Matrix Whose Sum Is Divisible by K",
        "difficulty": 2,
        "answer": "        if len(grid) == 0:\n            return 0\n        if len(grid) == 1:\n            return 1\n        if len(grid) == 2:\n            return grid[0][0] + grid[0][1] + grid[1][0] + grid[1][1]\n        if len(grid) == 3:\n            return grid[0][0] + grid[0][1] + grid[1][0] + grid[1][1] + grid[2][0] + grid[2][1]\n        if len(grid) == 4:\n            return grid[0][0] + grid[0][1] + grid[1][0] + grid[1][1] + grid[2][0] + grid[2][1] + grid[3][0] + grid[3][1]\n        if len(grid) == 5:\n            return grid[0][0] + grid[0][1] + grid[1][0] + grid[1][1] + grid[2][0] + grid[2][1] + grid[3][0]"
    },
    {
        "number": 2437,
        "title": "Number of Valid Clock Times",
        "difficulty": 0,
        "answer": "        if len(time) == 1:\n            return 0\n        elif len(time) == 2:\n            return 1\n        elif len(time) == 3:\n            return 2\n        elif len(time) == 4:\n            return 3\n        else:\n            return 0"
    },
    {
        "number": 2438,
        "title": "Range Product Queries of Powers",
        "difficulty": 1,
        "answer": "        ans = []\n        for i in range(len(queries)):\n            if queries[i][0] == queries[i][1]:\n                ans.append(queries[i][0])\n            else:\n                ans.append(0)\n        return ans"
    },
    {
        "number": 2439,
        "title": "Minimize Maximum of Array",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return min(nums[0], nums[1])\n        if len(nums) == 3:\n            return min(nums[0], nums[1], nums[2])\n        if len(nums) == 4:\n            return min(nums[0], nums[1], nums[2], nums[3])\n        if len(nums) == 5:\n            return min(nums[0], nums[1], nums[2], nums[3], nums[4])\n        return 0"
    },
    {
        "number": 2440,
        "title": "Create Components With Same Value",
        "difficulty": 2,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(edges) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(edges) == 2:\n            return max(self.componentValue(nums, edges), self.componentValue(nums, edges))\n        if len(edges) == 3:\n            return max(self.componentValue(nums, edges), self.componentValue(nums, edges))\n        if len(edges) == 4:\n            return max(self.componentValue(nums, edges), self.componentValue(nums, edges))\n        return 0"
    },
    {
        "number": 2441,
        "title": "Largest Positive Integer That Exists With Its Negative",
        "difficulty": 0,
        "answer": "        k = 0\n        for i in range(len(nums)):\n            if nums[i] == 0:\n                k = i\n        return k"
    },
    {
        "number": 2442,
        "title": "Count Number of Distinct Integers After Reverse Operations",
        "difficulty": 1,
        "answer": "        if not nums:\n            return 0\n        n = len(nums)\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21"
    },
    {
        "number": 2443,
        "title": "Sum of Number and Its Reverse",
        "difficulty": 1,
        "answer": "        if num < 0:\n            return False\n        if num == 0:\n            return True\n        if num == 1:\n            return True\n        if num == 2:\n            return True\n        if num == 3:\n            return True\n        if num == 4:\n            return True\n        if num == 5:\n            return True\n        if num == 6:\n            return True\n        if num == 7:\n            return True\n        if num == 8:\n            return True\n        if num == 9:\n            return True\n        if num == 10:\n            return True\n        if num == 11:\n            return True\n        if num == 12:\n            return True\n        if num == 13:\n            return True\n        if num == 14:\n            return True\n        if num == 15:\n            return True\n        if num == 16:\n            return True\n        if num == 17:\n            return True\n        if num == 18:\n            return True\n        if num == 19:\n            return True\n        if num == 20:\n            return True\n        if num == 21:\n            "
    },
    {
        "number": 2444,
        "title": "Count Subarrays With Fixed Bounds",
        "difficulty": 2,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return 1\n        if len(nums) == 2:\n            return nums[0] + nums[1]\n        if len(nums) == 3:\n            return nums[0] + nums[1] + nums[2]\n        if len(nums) == 4:\n            return nums[0] + nums[1] + nums[2] + nums[3]\n        if len(nums) == 5:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4]\n        if len(nums) == 6:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5]\n        if len(nums) == 7:\n            return nums[0] + nums[1] + nums[2] + nums[3"
    },
    {
        "number": 2446,
        "title": "Determine if Two Events Have Conflict",
        "difficulty": 0,
        "answer": "        if not event1 or not event2:\n            return False\n        if len(event1)!= len(event2):\n            return False\n        for i in range(len(event1)):\n            if event1[i] < event2[i]:\n                return True\n        return False"
    },
    {
        "number": 2447,
        "title": "Number of Subarrays With GCD Equal to K",
        "difficulty": 1,
        "answer": "        if len(nums) == 0 or k == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return gcd(nums[0], nums[1])\n        if len(nums) == 3:\n            return gcd(nums[0], nums[1], nums[2])\n        if len(nums) == 4:\n            return gcd(nums[0], nums[1], nums[2], nums[3])\n        if len(nums) == 5:\n            return gcd(nums[0], nums[1], nums[2], nums[3], nums[4])\n        if len(nums) == 6:\n            return gcd(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5])\n        if len(nums) == 7:\n            return gcd(nums[0], nums[1], num"
    },
    {
        "number": 2448,
        "title": "Minimum Cost to Make Array Equal",
        "difficulty": 2,
        "answer": "        if len(nums) == 0 or len(cost) == 0:\n            return 0\n        if len(nums) == 1:\n            return cost[nums[0]]\n        if len(cost) == 1:\n            return cost[0]\n        if len(nums) == 2:\n            return min(cost[nums[0]], cost[nums[1]])\n        if len(cost) == 2:\n            return min(cost[0], cost[1])\n        if len(nums) == 3:\n            return min(cost[nums[0]], cost[nums[1]], cost[nums[2]])\n        if len(cost) == 3:\n            return min(cost[0], cost[1], cost[2])\n        if len(nums) == 4:\n            return min(cost[nums[0]], cost[nums[1]], cost[nums[2]], cost[nums[3]])\n        if len(cost) == 4:\n            return min(cost[0], cost["
    },
    {
        "number": 2449,
        "title": "Minimum Number of Operations to Make Arrays Similar",
        "difficulty": 2,
        "answer": "        if len(nums) == 0 or len(target) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0] + 2\n        if len(target) == 1:\n            return nums[0] - 2\n        if len(target) == 2:\n            return min(nums[0], nums[1]) + 2\n        return min(nums[0], nums[1], nums[2]) + 2"
    },
    {
        "number": 2451,
        "title": "Odd String Difference",
        "difficulty": 0,
        "answer": "        difference = [0] * len(words)\n        for i in range(len(words)):\n            difference[i] = difference[i] + words[i]\n        return ''.join(difference)"
    },
    {
        "number": 2452,
        "title": "Words Within Two Edits of Dictionary",
        "difficulty": 1,
        "answer": "        if not queries:\n            return []\n        if not dictionary:\n            return []\n        if not len(queries) == len(dictionary):\n            return []\n        result = []\n        for i in range(len(queries)):\n            if queries[i] in dictionary:\n                result.append(queries[i])\n        return result"
    },
    {
        "number": 2453,
        "title": "Destroy Sequential Targets",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return max(nums[0], nums[1])\n        if len(nums) == 3:\n            return max(nums[0], nums[1], nums[2])\n        if len(nums) == 4:\n            return max(nums[0], nums[1], nums[2], nums[3])\n        if len(nums) == 5:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4])\n        if len(nums) == 6:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5])\n        if len(nums) == 7:\n            return max(nums[0], nums[1], nums[2], nums[3], num"
    },
    {
        "number": 2454,
        "title": "Next Greater Element IV",
        "difficulty": 2,
        "answer": "        if len(nums) == 0:\n            return [-1]\n        if len(nums) == 1:\n            return [nums[0]]\n        if len(nums) == 2:\n            return [nums[0], nums[1]]\n        if len(nums) == 3:\n            return [nums[0], nums[1], nums[2]]\n        if len(nums) == 4:\n            return [nums[0], nums[1], nums[2], nums[3]]\n        return [-1]"
    },
    {
        "number": 2455,
        "title": "Average Value of Even Numbers That Are Divisible by Three",
        "difficulty": 0,
        "answer": "        if not nums:\n            return 0\n        if len(nums) % 2 == 0:\n            return nums[0]\n        else:\n            return nums[len(nums) // 2]"
    },
    {
        "number": 2456,
        "title": "Most Popular Video Creator",
        "difficulty": 1,
        "answer": "        creators = sorted(creators)\n        ids = sorted(ids)\n        views = sorted(views)\n        return [creators[i] for i in range(len(creators)) if views[i] == views[i-1]]"
    },
    {
        "number": 2457,
        "title": "Minimum Addition to Make Integer Beautiful",
        "difficulty": 1,
        "answer": "        if n < 0 or target < 0:\n            return 0\n        if n == 0:\n            return target\n        if n == 1:\n            return target\n        if n == target:\n            return target\n        if n % 10 == 0:\n            return n\n        if n % 10 == 1:\n            return n\n        if n % 10 == 2:\n            return n\n        if n % 10 == 3:\n            return n\n        if n % 10 == 4:\n            return n\n        if n % 10 == 5:\n            return n\n        if n % 10 == 6:\n            return n\n        if n % 10 == 7:\n            return n\n        if n % 10 == 8:\n            return n\n        if n % 10 == 9:\n            return n\n        if n % 10 == 10:\n            return n\n        if n % 10 == 11:\n            return n\n        if n % 10 == 12:\n            return n\n        if n % 10 == 13:\n            return n\n        if n % 10 == 14:\n            return n\n        if n % 10 == 15"
    },
    {
        "number": 2458,
        "title": "Height of Binary Tree After Subtree Removal Queries",
        "difficulty": 2,
        "answer": "        if root is None:\n            return []\n        ans = []\n        ans.append(root.val)\n        ans.append(root.left)\n        ans.append(root.right)\n        ans.append(root.val)\n        ans.append(root.left)\n        ans.append(root.right)\n        ans.append(root.val)\n        ans.append(root.left)\n        ans.append(root.right)\n        ans.append(root.val)\n        ans.append(root.left)\n        ans.append(root.right)\n        ans.append(root.val)\n        ans.append(root.left)\n        ans.append(root.right)\n        ans.append(root.val)\n        ans.append(root.left)\n        ans.append(root.right)\n        ans.append(root.val)\n        ans.append(root.left)\n        ans.append(root.right)\n        ans.append(root.val)\n        ans.append(root.left)\n        ans.append"
    },
    {
        "number": 2460,
        "title": "Apply Operations to an Array",
        "difficulty": 0,
        "answer": "        if not nums:\n            return []\n        result = []\n        for i in range(len(nums)):\n            result.append(nums[i] * 2)\n        return result"
    },
    {
        "number": 2461,
        "title": "Maximum Sum of Distinct Subarrays With Length K",
        "difficulty": 1,
        "answer": "        if len(nums) == 0 or k == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return max(self.maximumSubarraySum(nums[1:], k - 1), self.maximumSubarraySum(nums[:k], k - 1))\n        if len(nums) == 3:\n            return max(self.maximumSubarraySum(nums[1:], k - 1), self.maximumSubarraySum(nums[:k], k - 1)) + self.maximumSubarraySum(nums[1:], k - 1)\n        if len(nums) == 4:\n            return max(self.maximumSubarraySum(nums[1:], k - 1), self.maximumSubarraySum(nums[:k], k - 1)) + self.maximumSubarraySum(nums[1:], k - 1) + self.maximumSubarraySum(nums[:k], k - 1)\n        if len(nums) =="
    },
    {
        "number": 2462,
        "title": "Total Cost to Hire K Workers",
        "difficulty": 1,
        "answer": "        if len(costs) == 0:\n            return 0\n        if len(costs) == 1:\n            return costs[0]\n        if len(costs) == 2:\n            return costs[0] + costs[1]\n        if len(costs) == 3:\n            return costs[0] + costs[1] + costs[2]\n        if len(costs) == 4:\n            return costs[0] + costs[1] + costs[2] + costs[3]\n        return 0"
    },
    {
        "number": 2463,
        "title": "Minimum Total Distance Traveled",
        "difficulty": 2,
        "answer": "        if len(factory) == 0:\n            return 0\n        if len(factory) == 1:\n            return 0\n        if len(factory) == 2:\n            return 0\n        if len(factory) == 3:\n            return 0\n        if len(factory) == 4:\n            return 0\n        if len(factory) == 5:\n            return 0\n        if len(factory) == 6:\n            return 0\n        if len(factory) == 7:\n            return 0\n        if len(factory) == 8:\n            return 0\n        if len(factory) == 9:\n            return 0\n        if len(factory) == 10:\n            return 0\n        if len(factory) == 11:\n            return 0\n        if len(factory) == 12:\n            return 0\n        if len(factory) == 13:\n            return 0\n        if len(factory) == 14:\n            return 0\n        if len(factory) == 15:\n            return 0\n        if len(factory) == 16:"
    },
    {
        "number": 2465,
        "title": "Number of Distinct Averages",
        "difficulty": 0,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return nums[0] + nums[1]\n        if len(nums) == 3:\n            return nums[0] + nums[1] + nums[2]\n        if len(nums) == 4:\n            return nums[0] + nums[1] + nums[2] + nums[3]\n        return 0"
    },
    {
        "number": 2466,
        "title": "Count Ways To Build Good Strings",
        "difficulty": 1,
        "answer": "        if low == high:\n            return low\n        if low == zero:\n            return high\n        if low == one:\n            return low\n        if high == zero:\n            return high\n        if high == one:\n            return low\n        if low == high:\n            return low\n        if low == one:\n            return high\n        if low == zero:\n            return one\n        if high == one:\n            return zero\n        if high == zero:\n            return one\n        if low == one:\n            return low\n        if high == one:\n            return high\n        if low == zero:\n            return low\n        if high == one:\n            return high\n        if low == one:\n            return low\n        if low == zero:\n            return low\n        if high == one:\n            return high\n        if low == zero:\n            return low\n        if high == one:\n            return high\n        if low == one:\n            return low\n        if high == zero:\n            return high\n        if low == one:\n            return low\n        if high == one:\n            "
    },
    {
        "number": 2467,
        "title": "Most Profitable Path in a Tree",
        "difficulty": 1,
        "answer": "        if len(edges) == 0:\n            return 0\n        if len(edges) == 1:\n            return edges[0][0]\n        if len(edges) == 2:\n            return edges[0][1]\n        if len(edges) == 3:\n            return edges[0][2]\n        if len(edges) == 4:\n            return edges[0][3]\n        return 0"
    },
    {
        "number": 2468,
        "title": "Split Message Based on Limit",
        "difficulty": 2,
        "answer": "        parts = []\n        for i in range(0, len(message) - 1, limit):\n            parts.append(message[i:i + limit])\n        parts.append(message[-1:])\n        return parts"
    },
    {
        "number": 2469,
        "title": "Convert the Temperature",
        "difficulty": 0,
        "answer": "        ans = []\n        if celsius >= 0:\n            ans.append(round(celsius, 2))\n        else:\n            ans.append(round(ceil(ceil(ceil(ceil(ceil(ceil(ceil(ceil(ceil(ceil(ceil(ceil(ceil(ceil(ceil(ceil(ceil(ceil(ceil(ceil(ceil(ceil(ceil(ceil(ceil(ceil(ceil(ceil(ceil(ceil(ceil(ceil(ceil(ceil(ceil(ceil(ceil(ceil(ceil(ceil(ceil(ceil(ceil(ceil(ceil(ceil(ceil(ceil(ceil(ceil(ceil(ceil(ceil(ceil(ceil(ceil(ceil(ceil(ceil(ceil(ceil(ceil(ceil(ceil(ceil(ceil(ceil(ceil(ceil(ceil(ceil"
    },
    {
        "number": 2470,
        "title": "Number of Subarrays With LCM Equal to K",
        "difficulty": 1,
        "answer": "        if len(nums) == 0 or k == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return nums[0] * nums[1]\n        if len(nums) == 3:\n            return nums[0] * nums[1] * nums[2]\n        if len(nums) == 4:\n            return nums[0] * nums[1] * nums[2] * nums[3]\n        if len(nums) == 5:\n            return nums[0] * nums[1] * nums[2] * nums[3] * nums[4]\n        if len(nums) == 6:\n            return nums[0] * nums[1] * nums[2] * nums[3] * nums[4] * nums[5]\n        if len(nums) == 7:\n            return nums[0] * nums[1] * nums"
    },
    {
        "number": 2471,
        "title": "Minimum Number of Operations to Sort a Binary Tree by Level",
        "difficulty": 1,
        "answer": "        if root is None:\n            return 0\n        if root.left is None and root.right is None:\n            return root.val\n        if root.left is not None and root.right is not None:\n            return min(self.minimumOperations(root.left), self.minimumOperations(root.right))\n        if root.left is not None:\n            return self.minimumOperations(root.left)\n        if root.right is not None:\n            return self.minimumOperations(root.right)\n        return 0"
    },
    {
        "number": 2472,
        "title": "Maximum Number of Non-overlapping Palindrome Substrings",
        "difficulty": 2,
        "answer": "        if len(s) < k:\n            return 0\n        if len(s) == k:\n            return len(s)\n        if len(s) % 2 == 1:\n            return 0\n        if len(s) % 2 == 0:\n            return 0\n        if len(s) == k:\n            return 0\n        if len(s) == k + 1:\n            return 0\n        if len(s) == k + 2:\n            return 0\n        if len(s) == k + 3:\n            return 0\n        if len(s) == k + 4:\n            return 0\n        if len(s) == k + 5:\n            return 0\n        if len(s) == k + 6:\n            return 0\n        if len(s) == k + 7:\n            return 0\n        if len(s) == k + 8:\n            return 0\n        if len(s) == k + 9:\n            return 0\n        if len(s) == k + 10:\n            return 0\n        if len(s) == k + 11:\n            "
    },
    {
        "number": 2475,
        "title": "Number of Unequal Triplets in Array",
        "difficulty": 0,
        "answer": "        nums = list(nums)\n        nums.sort()\n        return len(nums) - len(nums) % 3"
    },
    {
        "number": 2476,
        "title": "Closest Nodes Queries in a Binary Search Tree",
        "difficulty": 1,
        "answer": "        if not root:\n            return []\n        ans = [-1, -1]\n        ans[0] = root[0]\n        ans[1] = root[1]\n        ans[2] = root[2]\n        ans[3] = root[3]\n        ans[4] = root[4]\n        ans[5] = root[5]\n        ans[6] = root[6]\n        ans[7] = root[7]\n        ans[8] = root[8]\n        ans[9] = root[9]\n        return ans"
    },
    {
        "number": 2477,
        "title": "Minimum Fuel Cost to Report to the Capital",
        "difficulty": 1,
        "answer": "        if seats == 0:\n            return 0\n        if seats == 1:\n            return 1\n        if seats == 2:\n            return 2\n        if seats == 3:\n            return 3\n        if seats == 4:\n            return 4\n        if seats == 5:\n            return 5\n        return 0"
    },
    {
        "number": 2478,
        "title": "Number of Beautiful Partitions",
        "difficulty": 2,
        "answer": "        if len(s) < minLength:\n            return 0\n        if s[0] == '1':\n            return 1\n        if s[0] == '2':\n            return 1\n        if s[0] == '3':\n            return 1\n        if s[0] == '5':\n            return 1\n        if s[0] == '7':\n            return 1\n        return 0"
    },
    {
        "number": 2481,
        "title": "Minimum Cuts to Divide a Circle",
        "difficulty": 0,
        "answer": "        if n < 1:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        return n"
    },
    {
        "number": 2482,
        "title": "Difference Between Ones and Zeros in Row and Column",
        "difficulty": 1,
        "answer": "        if len(grid) == 0:\n            return []\n        if len(grid) == 1:\n            return [grid[0]]\n        if len(grid) == 2:\n            return [grid[0], grid[1]]\n        if len(grid) == 3:\n            return [grid[0], grid[1], grid[2]]\n        return []"
    },
    {
        "number": 2483,
        "title": "Minimum Penalty for a Shop",
        "difficulty": 1,
        "answer": "        if customers == \"N\":\n            return 0\n        elif customers == \"Y\":\n            return 4\n        else:\n            return 0"
    },
    {
        "number": 2484,
        "title": "Count Palindromic Subsequences",
        "difficulty": 2,
        "answer": "        if len(s) == 0:\n            return 0\n        if len(s) == 1:\n            return 1\n        if len(s) == 2:\n            return 2\n        if len(s) == 3:\n            return 3\n        if len(s) == 4:\n            return 4\n        if len(s) == 5:\n            return 5\n        if len(s) == 6:\n            return 6\n        if len(s) == 7:\n            return 7\n        if len(s) == 8:\n            return 8\n        if len(s) == 9:\n            return 9\n        if len(s) == 10:\n            return 10\n        if len(s) == 11:\n            return 11\n        if len(s) == 12:\n            return 12\n        if len(s) == 13:\n            return 13\n        if len(s) == 14:\n            return 14\n        if len(s) == 15:\n            return 15\n        if len(s) == 16:\n            return 16\n        if len(s) == 17:\n            return"
    },
    {
        "number": 2485,
        "title": "Find the Pivot Integer",
        "difficulty": 0,
        "answer": "        if n <= 1:\n            return -1\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8"
    },
    {
        "number": 2486,
        "title": "Append Characters to String to Make Subsequence",
        "difficulty": 1,
        "answer": "        if len(s) == 0 or len(t) == 0:\n            return 0\n        if len(s) == 1:\n            return len(t)\n        if len(s) == 2:\n            return min(len(t), len(s))\n        if len(s) == 3:\n            return min(len(t), len(s) - len(t) + len(t))\n        if len(s) == 4:\n            return min(len(t), len(s) - len(t) + len(s) - len(t) + len(t))\n        if len(s) == 5:\n            return min(len(t), len(s) - len(t) + len(s) - len(t) + len(s) - len(t) + len(t))\n        return 0"
    },
    {
        "number": 2487,
        "title": "Remove Nodes From Linked List",
        "difficulty": 1,
        "answer": "        if head is None:\n            return None\n        if head.next is None:\n            return head\n        if head.next.next is None:\n            return head\n        if head.next.next.next is None:\n            return head\n        return self.removeNodes(head.next.next)"
    },
    {
        "number": 2488,
        "title": "Count Subarrays With Median K",
        "difficulty": 2,
        "answer": "        if len(nums) == 0 or len(nums) % 2 == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return nums[0] + nums[1]\n        if len(nums) == 3:\n            return nums[0] + nums[1] + nums[2]\n        if len(nums) == 4:\n            return nums[0] + nums[1] + nums[2] + nums[3]\n        return 0"
    },
    {
        "number": 2490,
        "title": "Circular Sentence",
        "difficulty": 0,
        "answer": "        sentence = sentence.strip()\n        if not sentence:\n            return False\n        if sentence[-1] == sentence[0]:\n            return False\n        if sentence[-1] == sentence[-2]:\n            return False\n        if sentence[-1] == sentence[-3]:\n            return False\n        if sentence[-1] == sentence[-4]:\n            return False\n        if sentence[-1] == sentence[-5]:\n            return False\n        if sentence[-1] == sentence[-6]:\n            return False\n        if sentence[-1] == sentence[-7]:\n            return False\n        if sentence[-1] == sentence[-8]:\n            return False\n        if sentence[-1] == sentence[-9]:\n            return False\n        if sentence[-1] == sentence[-10]:\n            return False\n        if sentence[-1] == sentence[-11]:\n            return False\n        if sentence[-1] == sentence[-12]:\n            return False\n        if sentence[-1] == sentence[-13]:\n            return"
    },
    {
        "number": 2491,
        "title": "Divide Players Into Teams of Equal Skill",
        "difficulty": 1,
        "answer": "        if len(skill) == 0:\n            return -1\n        if len(skill) == 1:\n            return skill[0]\n        if len(skill) == 2:\n            return skill[0] * skill[1]\n        if len(skill) == 3:\n            return skill[0] * skill[1] * skill[2]\n        if len(skill) == 4:\n            return skill[0] * skill[1] * skill[2] * skill[3]\n        return -1"
    },
    {
        "number": 2492,
        "title": "Minimum Score of a Path Between Two Cities",
        "difficulty": 1,
        "answer": "        if len(roads) == 0:\n            return 0\n        if len(roads) == 1:\n            return roads[0][0]\n        if len(roads) == 2:\n            return min(roads[0][0], roads[1][0])\n        if len(roads) == 3:\n            return min(roads[0][0], roads[1][0], roads[2][0])\n        return 0"
    },
    {
        "number": 2493,
        "title": "Divide Nodes Into the Maximum Number of Groups",
        "difficulty": 2,
        "answer": "        if n <= 0:\n            return -1\n        if len(edges) == 0:\n            return 0\n        if len(edges) == 1:\n            return edges[0][1] - edges[0][0]\n        if len(edges) == 2:\n            return max(edges[0][1], edges[1][1]) - max(edges[0][0], edges[1][0])\n        if len(edges) == 3:\n            return max(edges[0][1], edges[1][1]) - max(edges[0][0], edges[1][0])\n        if len(edges) == 4:\n            return max(edges[0][1], edges[1][1]) - max(edges[0][0], edges[1][0])\n        return -1"
    },
    {
        "number": 2496,
        "title": "Maximum Value of a String in an Array",
        "difficulty": 0,
        "answer": "        n = len(strs)\n        if n == 0:\n            return 0\n        if n == 1:\n            return strs[0]\n        if n == 2:\n            return max(strs[0], strs[1])\n        if n == 3:\n            return max(strs[0], strs[1], strs[2])\n        if n == 4:\n            return max(strs[0], strs[1], strs[2], strs[3])\n        return 0"
    },
    {
        "number": 2497,
        "title": "Maximum Star Sum of a Graph",
        "difficulty": 1,
        "answer": "        if len(vals) == 0:\n            return 0\n        if len(edges) == 0:\n            return 0\n        if len(edges) == 1:\n            return edges[0]\n        if len(edges) == 2:\n            return max(vals[i] for i in range(len(vals) - 1)) + max(vals[i] for i in range(i + 1, len(vals)))\n        if len(edges) == 3:\n            return max(vals[i] for i in range(len(vals) - 1)) + max(vals[i] for i in range(i + 1, len(vals))) + max(vals[i] for i in range(i + 2, len(vals)))\n        if len(edges) == 4:\n            return max(vals[i] for i in range(len(vals) - 1)) + max(vals[i] for i in range(i + 1, len(vals))) + max(vals[i] for i in range(i + 2, len(vals))) + max(vals[i] for"
    },
    {
        "number": 2498,
        "title": "Frog Jump II",
        "difficulty": 1,
        "answer": "        if len(stones) == 0:\n            return 0\n        if len(stones) == 1:\n            return stones[0]\n        if len(stones) == 2:\n            return max(stones[0], stones[1])\n        return max(stones[0], stones[1], stones[2])"
    },
    {
        "number": 2499,
        "title": "Minimum Total Cost to Make Arrays Unequal",
        "difficulty": 2,
        "answer": "        if len(nums1) == 0 or len(nums2) == 0:\n            return -1\n        if len(nums1) == 1 and len(nums2) == 1:\n            return nums1[0]\n        if len(nums1) == 1 and len(nums2) == 0:\n            return nums2[0]\n        if len(nums1) == 0 and len(nums2) == 1:\n            return nums2[0]\n        if len(nums1) == 0 and len(nums2) == 0:\n            return nums1[0]\n        if len(nums1) == 1 and len(nums2) == 0:\n            return nums2[0]\n        if len(nums1) == 0 and len(nums2) == 1:\n            return nums1[0]\n        if len(nums1) == 1 and len(nums2) == 0:\n            return nums1[0]\n        if len(nums1) == 0 and len(n"
    },
    {
        "number": 2500,
        "title": "Delete Greatest Value in Each Row",
        "difficulty": 0,
        "answer": "        if len(grid) == 0:\n            return 0\n        if len(grid) == 1:\n            return grid[0][0]\n        if len(grid) == 2:\n            return max(grid[0][0], grid[1][0])\n        if len(grid) == 3:\n            return max(grid[0][0], grid[1][0], grid[2][0])\n        return grid[0][0]"
    },
    {
        "number": 2501,
        "title": "Longest Square Streak in an Array",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return -1\n        if len(nums) == 1:\n            return 0\n        if len(nums) == 2:\n            return 0\n        if len(nums) == 3:\n            return 0\n        if len(nums) == 4:\n            return 0\n        if len(nums) == 5:\n            return 0\n        if len(nums) == 6:\n            return 0\n        if len(nums) == 7:\n            return 0\n        if len(nums) == 8:\n            return 0\n        if len(nums) == 9:\n            return 0\n        if len(nums) == 10:\n            return 0\n        if len(nums) == 11:\n            return 0\n        if len(nums) == 12:\n            return 0\n        if len(nums) == 13:\n            return 0\n        if len(nums) == 14:\n            return 0\n        if len(nums) == 15:\n            return 0\n        if len(nums) == 16"
    },
    {
        "number": 2502,
        "title": "Design Memory Allocator",
        "difficulty": 1,
        "answer": "        self.n = n\n        self.mID = mID"
    },
    {
        "number": 2503,
        "title": "Maximum Number of Points From Grid Queries",
        "difficulty": 2,
        "answer": "        ans = []\n        for i in range(len(grid)):\n            if grid[i][0] == grid[i][1]:\n                ans.append(grid[i][0])\n            elif grid[i][1] == grid[i][0]:\n                ans.append(grid[i][1])\n            else:\n                ans.append(grid[i][0])\n        return ans"
    },
    {
        "number": 2506,
        "title": "Count Pairs Of Similar Strings",
        "difficulty": 0,
        "answer": "        n = len(words)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        return 0"
    },
    {
        "number": 2507,
        "title": "Smallest Value After Replacing With Sum of Prime Factors",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n % 2 == 0:\n            return n\n        if n % 3 == 0:\n            return n\n        if n % 5 == 0:\n            return n\n        if n % 7 == 0:\n            return n\n        if n % 9 == 0:\n            return n\n        if n % 11 == 0:\n            return n\n        if n % 13 == 0:\n            return n\n        if n % 17 == 0:\n            return n\n        if n % 19 == 0:\n            return n\n        if n % 23 == 0:\n            return n\n        if n % 29 == 0:\n            return n\n        if n % 31 == 0:\n            return n\n        if n % 37 == 0:\n            return n\n        if n % 41 == 0:\n            return n\n        if n % 43 == 0:\n            return n\n        if n % 47 == 0:\n            return n\n        if n % 53 == 0:\n"
    },
    {
        "number": 2508,
        "title": "Add Edges to Make Degrees of All Nodes Even",
        "difficulty": 2,
        "answer": "        if len(edges) == 0:\n            return False\n        if len(edges) == 1:\n            return True\n        if len(edges) == 2:\n            return True\n        if len(edges) == 3:\n            return True\n        return False"
    },
    {
        "number": 2509,
        "title": "Cycle Length Queries in a Tree",
        "difficulty": 2,
        "answer": "        if n < 1 or n > 2:\n            return []\n        ans = []\n        for i in range(n):\n            ans.append(0)\n        ans[0] = 1\n        ans[1] = 1\n        ans[2] = 1\n        ans[3] = 1\n        ans[4] = 1\n        ans[5] = 1\n        ans[6] = 1\n        ans[7] = 1\n        ans[8] = 1\n        ans[9] = 1\n        ans[10] = 1\n        ans[11] = 1\n        ans[12] = 1\n        ans[13] = 1\n        ans[14] = 1\n        ans[15] = 1\n        ans[16] = 1\n        ans[17] = 1\n        ans[18] = 1\n        ans[19] = 1\n        ans[20] = 1\n        ans[21] = 1\n        ans[22] = 1\n        ans[23] = 1\n        ans[24] = 1\n        ans[25] = 1\n        ans[26]"
    },
    {
        "number": 2511,
        "title": "Maximum Enemy Forts That Can Be Captured",
        "difficulty": 0,
        "answer": "        n = len(forts)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        return 0"
    },
    {
        "number": 2512,
        "title": "Reward Top K Students",
        "difficulty": 1,
        "answer": "        if len(report) == 0:\n            return []\n        if len(student_id) == 0:\n            return []\n        if len(positive_feedback) == 0:\n            return []\n        if len(negative_feedback) == 0:\n            return []\n        if len(report) == 0:\n            return []\n        if len(student_id) == 0:\n            return []\n        if len(positive_feedback) == 0:\n            return []\n        if len(negative_feedback) == 0:\n            return []\n        if len(report) == 0:\n            return []\n        if len(student_id) == 0:\n            return []\n        if len(positive_feedback) == 0:\n            return []\n        if len(negative_feedback) == 0:\n            return []\n        if len(report) == 0:\n            return []\n        if len(student_id) == 0:\n            return []\n        if len(positive_feedback) == 0:\n            return []\n        if len(negative_feedback) == 0"
    },
    {
        "number": 2513,
        "title": "Minimize the Maximum of Two Arrays",
        "difficulty": 1,
        "answer": "        if not divisor1 or not divisor2:\n            return 0\n        if not uniqueCnt1 or not uniqueCnt2:\n            return 0\n        if not arr1 or not arr2:\n            return 0\n        if not arr1[0] or not arr2[0]:\n            return 0\n        if not arr1[1] or not arr2[1]:\n            return 0\n        if not arr1[2] or not arr2[2]:\n            return 0\n        if not arr1[3] or not arr2[3]:\n            return 0\n        if not arr1[4] or not arr2[4]:\n            return 0\n        if not arr1[5] or not arr2[5]:\n            return 0\n        if not arr1[6] or not arr2[6]:\n            return 0\n        if not arr1[7] or not arr2[7]:\n            return 0\n        if not arr1[8] or not arr2[8]:\n            return 0\n        if not arr1[9] or not arr2[9]:\n            "
    },
    {
        "number": 2514,
        "title": "Count Anagrams",
        "difficulty": 2,
        "answer": "        ans = 0\n        for i in range(len(s)):\n            if s[i] =='':\n                ans += 1\n            elif s[i] == 'a':\n                ans += 1\n            elif s[i] == 'b':\n                ans += 1\n            elif s[i] == 'c':\n                ans += 1\n            elif s[i] == 'd':\n                ans += 1\n            elif s[i] == 'e':\n                ans += 1\n            elif s[i] == 'f':\n                ans += 1\n            elif s[i] == 'g':\n                ans += 1\n            elif s[i] == 'h':\n                ans += 1\n            elif s[i] == 'i':\n                ans += 1\n            elif s[i] == 'j':\n                ans += 1\n            elif s[i] == 'k':\n                ans += 1\n            elif s[i] == 'l':\n                ans += 1\n            elif s[i] =='m':\n                "
    },
    {
        "number": 2515,
        "title": "Shortest Distance to Target String in a Circular Array",
        "difficulty": 0,
        "answer": "        if startIndex == 0:\n            return -1\n        if startIndex == len(words) - 1:\n            return 0\n        if target == words[startIndex]:\n            return 0\n        if target == words[startIndex - 1]:\n            return 1\n        if target == words[startIndex + 1]:\n            return 2\n        if target == words[startIndex - 2]:\n            return 3\n        if target == words[startIndex + 2]:\n            return 4\n        return -1"
    },
    {
        "number": 2516,
        "title": "Take K of Each Character From Left and Right",
        "difficulty": 1,
        "answer": "        if len(s) == 0:\n            return -1\n        if len(s) == 1:\n            return 0\n        if len(s) == 2:\n            return 0\n        if len(s) == 3:\n            return 0\n        if len(s) == 4:\n            return 0\n        if len(s) == 5:\n            return 0\n        if len(s) == 6:\n            return 0\n        if len(s) == 7:\n            return 0\n        if len(s) == 8:\n            return 0\n        return -1"
    },
    {
        "number": 2517,
        "title": "Maximum Tastiness of Candy Basket",
        "difficulty": 1,
        "answer": "        if len(price) == 0:\n            return 0\n        if len(price) == 1:\n            return price[0]\n        if len(price) == 2:\n            return max(abs(price[0] - price[1]), abs(price[1] - price[0]))\n        if len(price) == 3:\n            return max(abs(price[0] - price[1] - price[2]), abs(price[1] - price[2] - price[0]))\n        if len(price) == 4:\n            return max(abs(price[0] - price[1] - price[2] - price[3]), abs(price[1] - price[2] - price[3] - price[0]))\n        if len(price) == 5:\n            return max(abs(price[0] - price[1] - price[2] - price[3] - price[4]), abs(price[1] - price[2] - price[3] - price[4] - price[0]))\n        if len(price) =="
    },
    {
        "number": 2518,
        "title": "Number of Great Partitions",
        "difficulty": 2,
        "answer": "        if len(nums) == 0 or k == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return max(nums[0], nums[1])\n        if len(nums) == 3:\n            return max(nums[0], nums[1], nums[2])\n        if len(nums) == 4:\n            return max(nums[0], nums[1], nums[2], nums[3])\n        return 0"
    },
    {
        "number": 2520,
        "title": "Count the Digits That Divide a Number",
        "difficulty": 0,
        "answer": "        if num == 0:\n            return 0\n        if num == 1:\n            return 1\n        if num % 10 == 0:\n            return 2\n        return 4"
    },
    {
        "number": 2521,
        "title": "Distinct Prime Factors of Product of Array",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return 1\n        if len(nums) == 2:\n            return nums[0] * nums[1]\n        if len(nums) == 3:\n            return nums[0] * nums[1] * nums[2]\n        if len(nums) == 4:\n            return nums[0] * nums[1] * nums[2] * nums[3]\n        return 0"
    },
    {
        "number": 2522,
        "title": "Partition String Into Substrings With Values at Most K",
        "difficulty": 1,
        "answer": "        if len(s) < k:\n            return -1\n        if len(s) == k:\n            return len(s)\n        if s[0] == '0':\n            return 0\n        if s[0] == '1':\n            return 1\n        if s[0] == '2':\n            return 2\n        if s[0] == '3':\n            return 3\n        if s[0] == '4':\n            return 4\n        if s[0] == '5':\n            return 5\n        if s[0] == '6':\n            return 6\n        if s[0] == '7':\n            return 7\n        if s[0] == '8':\n            return 8\n        if s[0] == '9':\n            return 9\n        return -1"
    },
    {
        "number": 2523,
        "title": "Closest Prime Numbers in Range",
        "difficulty": 1,
        "answer": "        if left == right:\n            return [-1, -1]\n        if left == right - 1:\n            return [-1, -1]\n        if left == right - 2:\n            return [-1, -1]\n        if left == right - 3:\n            return [-1, -1]\n        if left == right - 4:\n            return [-1, -1]\n        if left == right - 5:\n            return [-1, -1]\n        if left == right - 6:\n            return [-1, -1]\n        if left == right - 7:\n            return [-1, -1]\n        if left == right - 8:\n            return [-1, -1]\n        if left == right - 9:\n            return [-1, -1]\n        if left == right - 10:\n            return [-1, -1]\n        if left == right - 11:\n            return [-1, -1]\n        if left == right - 12:\n            return [-1, -1]\n        if left == right - 13:\n            return [-1, -1]\n"
    },
    {
        "number": 2525,
        "title": "Categorize Box According to Criteria",
        "difficulty": 0,
        "answer": "        if mass >= 100:\n            return \"Heavy\"\n        elif mass >= 109:\n            return \"Bulky\"\n        else:\n            return \"Neither\""
    },
    {
        "number": 2526,
        "title": "Find Consecutive Integers from a Data Stream",
        "difficulty": 1,
        "answer": "        self.value = value\n        self.k = k\n        self.consec = False\n        return self.value == value and self.k == k"
    },
    {
        "number": 2527,
        "title": "Find Xor-Beauty of Array",
        "difficulty": 1,
        "answer": "        if not nums:\n            return 0\n        val1 = nums[0] | nums[1]\n        val2 = nums[2] | nums[3]\n        val3 = nums[4] | nums[5]\n        val4 = nums[6] | nums[7]\n        val5 = nums[8] | nums[9]\n        val6 = nums[10] | nums[11]\n        val7 = nums[12] | nums[13]\n        val8 = nums[14] | nums[15]\n        val9 = nums[16] | nums[17]\n        val10 = nums[18] | nums[19]\n        val11 = nums[20] | nums[21]\n        val12 = nums[22] | nums[23]\n        val13 = nums[24] | nums[25]\n        val14 = nums[26] | nums[27]\n        val15 = nums[28] | nums[29]"
    },
    {
        "number": 2528,
        "title": "Maximize the Minimum Powered City",
        "difficulty": 2,
        "answer": "        if len(stations) == 0:\n            return 0\n        if len(stations) == 1:\n            return stations[0]\n        if len(stations) == 2:\n            return max(stations[0], stations[1])\n        if len(stations) == 3:\n            return max(stations[0], stations[1], stations[2])\n        if len(stations) == 4:\n            return max(stations[0], stations[1], stations[2], stations[3])\n        if len(stations) == 5:\n            return max(stations[0], stations[1], stations[2], stations[3], stations[4])\n        return 0"
    },
    {
        "number": 2529,
        "title": "Maximum Count of Positive Integer and Negative Integer",
        "difficulty": 0,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return max(nums[0], nums[1])\n        if len(nums) == 3:\n            return max(nums[0], nums[1], nums[2])\n        return 0"
    },
    {
        "number": 2530,
        "title": "Maximal Score After Applying K Operations",
        "difficulty": 1,
        "answer": "        if k == 0:\n            return 0\n        elif k == 1:\n            return nums[0]\n        elif k == 2:\n            return nums[1]\n        elif k == 3:\n            return nums[2]\n        else:\n            return max(self.maxKelements(nums, k - 1), self.maxKelements(nums, k))"
    },
    {
        "number": 2531,
        "title": "Make Number of Distinct Characters Equal",
        "difficulty": 1,
        "answer": "        if len(word1)!= len(word2):\n            return False\n        if len(word1) == 0 or len(word2) == 0:\n            return False\n        if word1[0] == word2[0]:\n            return False\n        if word1[0] == word2[-1]:\n            return False\n        if word1[-1] == word2[0]:\n            return False\n        if word1[-1] == word2[-1]:\n            return False\n        if word1[-1] == word2[-2]:\n            return False\n        if word1[-1] == word2[-2]:\n            return False\n        if word1[-1] == word2[-3]:\n            return False\n        if word1[-1] == word2[-3]:\n            return False\n        if word1[-1] == word2[-4]:\n            return False\n        if word1[-1] == word2[-4]:\n            return False\n        if word1[-1] == word2[-"
    },
    {
        "number": 2532,
        "title": "Time to Cross a Bridge",
        "difficulty": 2,
        "answer": "        if len(time) == 0:\n            return 0\n        if len(time) == 1:\n            return time[0]\n        if len(time) == 2:\n            return time[0] + time[1]\n        if len(time) == 3:\n            return time[0] + time[1] + time[2]\n        if len(time) == 4:\n            return time[0] + time[1] + time[2] + time[3]\n        if len(time) == 5:\n            return time[0] + time[1] + time[2] + time[3] + time[4]\n        if len(time) == 6:\n            return time[0] + time[1] + time[2] + time[3] + time[4] + time[5]\n        if len(time) == 7:\n            return time[0] + time[1] + time[2] + time[3] + time[4] + time[5] + time[6]\n        if len(time) == 8:\n            return"
    },
    {
        "number": 2535,
        "title": "Difference Between Element Sum and Digit Sum of an Array",
        "difficulty": 0,
        "answer": "        if not nums:\n            return 0\n        sum = 0\n        for i in nums:\n            sum += i\n        return sum - nums[0]"
    },
    {
        "number": 2536,
        "title": "Increment Submatrices by One",
        "difficulty": 1,
        "answer": "        mat = [[0 for _ in range(n)] for _ in range(n)]\n        for i in range(n):\n            for j in range(i + 1, n):\n                mat[i][j] = mat[j][i] = 1\n        for i in range(n):\n            for j in range(i + 1, n):\n                for k in range(i, j + 1):\n                    mat[i][j] += mat[k][i]\n        return mat"
    },
    {
        "number": 2537,
        "title": "Count the Number of Good Subarrays",
        "difficulty": 1,
        "answer": "        if not nums:\n            return 0\n        if k == 0:\n            return nums[0]\n        if k == 1:\n            return nums[1]\n        if k == 2:\n            return nums[2]\n        if k == 3:\n            return nums[3]\n        if k == 4:\n            return nums[4]\n        return 0"
    },
    {
        "number": 2538,
        "title": "Difference Between Maximum and Minimum Price Sum",
        "difficulty": 2,
        "answer": "        if len(edges) == 0:\n            return 0\n        if len(edges) == 1:\n            return edges[0][1]\n        if len(edges) == 2:\n            return max(self.maxOutput(n, edges, price))\n        return max(self.maxOutput(n, edges, price)) + self.maxOutput(n - 1, edges, price)"
    },
    {
        "number": 2540,
        "title": "Minimum Common Value",
        "difficulty": 0,
        "answer": "        if len(nums1) == 0 or len(nums2) == 0:\n            return -1\n        if len(nums1) == 1 and len(nums2) == 1:\n            return nums1[0]\n        if len(nums1) == 1 and len(nums2) == 0:\n            return nums2[0]\n        if len(nums1) == 0 and len(nums2) == 1:\n            return nums2[0]\n        if len(nums1) == 0 and len(nums2) == 0:\n            return nums1[0]\n        if len(nums1) == 0:\n            return nums2[0]\n        if len(nums2) == 0:\n            return nums1[0]\n        if len(nums1) == 1 and len(nums2) == 1:\n            return min(nums1[0], nums2[0])\n        if len(nums1) == 1 and len(nums2) == 0:\n            return min"
    },
    {
        "number": 2541,
        "title": "Minimum Operations to Make Array Equal II",
        "difficulty": 1,
        "answer": "        if len(nums1)!= len(nums2):\n            return -1\n        if len(nums1) == 0:\n            return 0\n        if len(nums2) == 0:\n            return 0\n        if k == 0:\n            return 0\n        if k == 1:\n            return nums1[0]\n        if k == 2:\n            return nums1[0] + nums2[0]\n        if k == 3:\n            return nums1[0] + nums2[0] + nums1[1]\n        if k == 4:\n            return nums1[0] + nums2[0] + nums1[1] + nums2[1]\n        if k == 5:\n            return nums1[0] + nums2[0] + nums1[1] + nums2[1] + nums1[2]\n        if k == 6:\n            return nums1[0] + nums2[0] + nums1[1] + nums2[1]"
    },
    {
        "number": 2542,
        "title": "Maximum Subsequence Score",
        "difficulty": 1,
        "answer": "        if len(nums1) == 0 or len(nums2) == 0:\n            return 0\n        if len(nums1) == 1 and len(nums2) == 1:\n            return nums1[0] * nums2[0]\n        if len(nums1) == 1 and len(nums2) == 0:\n            return nums1[0] * nums2[0]\n        if len(nums1) == 0 and len(nums2) == 1:\n            return nums2[0] * nums1[0]\n        if len(nums1) == 0 and len(nums2) == 0:\n            return nums1[0] * nums2[0]\n        if len(nums1) == 1 and len(nums2) == 1:\n            return nums1[0] * nums2[0]\n        if len(nums1) == 0 and len(nums2) == 0:\n            return nums1[0] * nums2[0]\n        if len"
    },
    {
        "number": 2543,
        "title": "Check if Point Is Reachable",
        "difficulty": 2,
        "answer": "        if targetX == 1 and targetY == 1:\n            return True\n        if targetX == 1 and targetY == 2:\n            return True\n        if targetX == 2 and targetY == 1:\n            return True\n        if targetX == 2 and targetY == 2:\n            return True\n        if targetX == 4 and targetY == 1:\n            return True\n        if targetX == 4 and targetY == 2:\n            return True\n        if targetX == 4 and targetY == 3:\n            return True\n        if targetX == 4 and targetY == 4:\n            return True\n        if targetX == 4 and targetY == 5:\n            return True\n        if targetX == 4 and targetY == 6:\n            return True\n        if targetX == 4 and targetY == 7:\n            return True\n        if targetX == 4 and targetY == 8:\n            return True\n        if targetX == 4 and targetY == 9:\n            return True\n        if targetX == 5 and targetY == 1:\n            return True\n        if targetX == 5 and targetY == 2:"
    },
    {
        "number": 2544,
        "title": "Alternating Digit Sum",
        "difficulty": 0,
        "answer": "        if n < 0:\n            return 0\n        if n == 0:\n            return 1\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1\n        if n == 3:\n            return 1\n        if n == 4:\n            return 1\n        if n == 5:\n            return 1\n        if n == 6:\n            return 1\n        if n == 7:\n            return 1\n        if n == 8:\n            return 1\n        if n == 9:\n            return 1\n        if n == 10:\n            return 1\n        if n == 11:\n            return 1\n        if n == 12:\n            return 1\n        if n == 13:\n            return 1\n        if n == 14:\n            return 1\n        if n == 15:\n            return 1\n        if n == 16:\n            return 1\n        if n == 17:\n            return 1\n        if n == 18:\n            return 1\n        if n == 19:\n            return 1\n        if n == 20:\n            return 1\n        if n == 21:\n            "
    },
    {
        "number": 2545,
        "title": "Sort the Students by Their Kth Score",
        "difficulty": 1,
        "answer": "        if len(score) == 0:\n            return []\n        if len(score) == 1:\n            return score\n        if len(score) == 2:\n            return score\n        if len(score) == 3:\n            return score\n        if len(score) == 4:\n            return score\n        if len(score) == 5:\n            return score\n        if len(score) == 6:\n            return score\n        if len(score) == 7:\n            return score\n        if len(score) == 8:\n            return score\n        if len(score) == 9:\n            return score\n        if len(score) == 10:\n            return score\n        return []"
    },
    {
        "number": 2546,
        "title": "Apply Bitwise Operations to Make Strings Equal",
        "difficulty": 1,
        "answer": "        if len(s)!= len(target):\n            return False\n        for i in range(len(s)):\n            if s[i]!= target[i]:\n                return False\n        return True"
    },
    {
        "number": 2547,
        "title": "Minimum Cost to Split an Array",
        "difficulty": 2,
        "answer": "        if len(nums) < k:\n            return 0\n        cost = 0\n        for i in range(len(nums)):\n            cost += nums[i] * (i + 1)\n        return cost"
    },
    {
        "number": 2549,
        "title": "Count Distinct Numbers on Board",
        "difficulty": 0,
        "answer": "        if n <= 0:\n            return 0\n        if n == 1:\n            return 1\n        if n % 2 == 1:\n            return 2\n        if n % 4 == 1:\n            return 3\n        return 4"
    },
    {
        "number": 2550,
        "title": "Count Collisions of Monkeys on a Polygon",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        elif n == 3:\n            return 3\n        elif n == 4:\n            return 4\n        elif n == 5:\n            return 5\n        elif n == 6:\n            return 6\n        elif n == 7:\n            return 7\n        elif n == 8:\n            return 8\n        elif n == 9:\n            return 9\n        elif n == 10:\n            return 10\n        elif n == 11:\n            return 11\n        elif n == 12:\n            return 12\n        elif n == 13:\n            return 13\n        elif n == 14:\n            return 14\n        else:\n            return 0"
    },
    {
        "number": 2551,
        "title": "Put Marbles in Bags",
        "difficulty": 2,
        "answer": "        if len(weights) == 0:\n            return 0\n        if len(weights) == 1:\n            return weights[0]\n        if len(weights) == 2:\n            return max(weights[0], weights[1]) - min(weights[0], weights[1])\n        if len(weights) == 3:\n            return max(weights[0], weights[1], weights[2]) - min(weights[0], weights[1], weights[2])\n        return 0"
    },
    {
        "number": 2552,
        "title": "Count Increasing Quadruplets",
        "difficulty": 2,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return 1\n        if len(nums) == 2:\n            return 2\n        if len(nums) == 3:\n            return 3\n        if len(nums) == 4:\n            return 4\n        return 0"
    },
    {
        "number": 2553,
        "title": "Separate the Digits in an Array",
        "difficulty": 0,
        "answer": "        digits = []\n        for num in nums:\n            digits.append(num)\n        return digits"
    },
    {
        "number": 2554,
        "title": "Maximum Number of Integers to Choose From a Range I",
        "difficulty": 1,
        "answer": "        if banned == []:\n            return 0\n        if banned[0] == banned[-1]:\n            return banned[0]\n        if banned[0] > banned[-1]:\n            return banned[0]\n        if banned[-1] > banned[0]:\n            return banned[-1]\n        if banned[-1] > banned[0] + 1:\n            return banned[-1]\n        if banned[-1] > banned[0] + 2:\n            return banned[-1]\n        if banned[-1] > banned[0] + 3:\n            return banned[-1]\n        if banned[-1] > banned[0] + 4:\n            return banned[-1]\n        if banned[-1] > banned[0] + 5:\n            return banned[-1]\n        if banned[-1] > banned[0] + 6:\n            return banned[-1]\n        if banned[-1] > banned[0] + 7:\n            return banned[-1]\n        if banned[-1] > banned["
    },
    {
        "number": 2555,
        "title": "Maximize Win From Two Segments",
        "difficulty": 1,
        "answer": "        if k == 0:\n            return 0\n        if k == 1:\n            return 1\n        if k == 2:\n            return 2\n        if k == 3:\n            return 3\n        if k == 4:\n            return 4\n        return 0"
    },
    {
        "number": 2556,
        "title": "Disconnect Path in a Binary Matrix by at Most One Flip",
        "difficulty": 1,
        "answer": "        if len(grid) == 0:\n            return False\n        if len(grid[0]) == 0:\n            return False\n        if len(grid[0]) == 1:\n            return True\n        if len(grid[1]) == 1:\n            return True\n        if len(grid[1]) == 2:\n            return True\n        if len(grid[1]) == 3:\n            return True\n        if len(grid[1]) == 4:\n            return True\n        if len(grid[1]) == 5:\n            return True\n        if len(grid[1]) == 6:\n            return True\n        if len(grid[1]) == 7:\n            return True\n        if len(grid[1]) == 8:\n            return True\n        if len(grid[1]) == 9:\n            return True\n        if len(grid[1]) == 10:\n            return True\n        if len(grid[1]) == 11:\n            return True\n        if len(grid[1]) == 12:\n            return True\n        if len(grid[1]) == 13:\n"
    },
    {
        "number": 2558,
        "title": "Take Gifts From the Richest Pile",
        "difficulty": 0,
        "answer": "        if len(gifts) == 0:\n            return 0\n        if k == 0:\n            return len(gifts)\n        if k == 1:\n            return len(gifts) - 1\n        if k == 2:\n            return len(gifts) - 2\n        if k == 3:\n            return len(gifts) - 3\n        if k == 4:\n            return len(gifts) - 4\n        if k == 5:\n            return len(gifts) - 5\n        if k == 6:\n            return len(gifts) - 6\n        if k == 7:\n            return len(gifts) - 7\n        if k == 8:\n            return len(gifts) - 8\n        if k == 9:\n            return len(gifts) - 9\n        if k == 10:\n            return len(gifts) - 10\n        if k == 11:\n            return len(gifts) - 11\n        if k == 12:\n            return len(gifts) - 12\n        if k == 13:\n            return len(gifts) - 13"
    },
    {
        "number": 2559,
        "title": "Count Vowel Strings in Ranges",
        "difficulty": 1,
        "answer": "        ans = []\n        for i in range(len(queries)):\n            if queries[i][0] == 0 and queries[i][1] == 2:\n                ans.append(i)\n        return ans"
    },
    {
        "number": 2560,
        "title": "House Robber IV",
        "difficulty": 1,
        "answer": "        if k == 0:\n            return nums[0]\n        elif k == 1:\n            return nums[1]\n        elif k == 2:\n            return nums[2]\n        elif k == 3:\n            return nums[3]\n        else:\n            return nums[0] + nums[1] + nums[2] + nums[3]"
    },
    {
        "number": 2561,
        "title": "Rearranging Fruits",
        "difficulty": 2,
        "answer": "        if len(basket1)!= len(basket2):\n            return -1\n        if len(basket1) == 0:\n            return 0\n        if len(basket2) == 0:\n            return 0\n        if len(basket1) == 1:\n            return 0\n        if len(basket2) == 1:\n            return 0\n        if len(basket1) == 0:\n            return 0\n        if len(basket2) == 0:\n            return 0\n        if len(basket1) == 1:\n            return 0\n        if len(basket2) == 1:\n            return 0\n        if len(basket1) == 0:\n            return 0\n        if len(basket2) == 0:\n            return 0\n        if len(basket1) == 1:\n            return 0\n        if len(basket2) == 1:\n            return 0\n        if len(basket1) == 0:\n            return 0\n        if len(basket2) == 0:\n            return 0\n        if len(b"
    },
    {
        "number": 2562,
        "title": "Find the Array Concatenation Value",
        "difficulty": 0,
        "answer": "        nums = list(nums)\n        nums.sort()\n        return nums[0] + nums[-1]"
    },
    {
        "number": 2563,
        "title": "Count the Number of Fair Pairs",
        "difficulty": 1,
        "answer": "        if lower < upper:\n            return 0\n        elif lower == upper:\n            return 1\n        else:\n            return nums[lower] + nums[upper]"
    },
    {
        "number": 2564,
        "title": "Substring XOR Queries",
        "difficulty": 1,
        "answer": "        ans = []\n        for i in range(len(queries)):\n            if queries[i][0] == queries[i][1]:\n                ans.append(queries[i][0])\n            else:\n                ans.append(queries[i][0] ^ queries[i][1])\n        return ans"
    },
    {
        "number": 2565,
        "title": "Subsequence With the Minimum Score",
        "difficulty": 2,
        "answer": "        if len(s) == 0 or len(t) == 0:\n            return 0\n        left = 0\n        right = len(s)\n        score = 0\n        while left < right:\n            if s[left] == t[right]:\n                score += 1\n                left += 1\n            else:\n                right -= 1\n        return score\n"
    },
    {
        "number": 2566,
        "title": "Maximum Difference by Remapping a Digit",
        "difficulty": 0,
        "answer": "        if num == 0:\n            return 0\n        if num == 1:\n            return 1\n        if num == 9:\n            return 9\n        if num == 10:\n            return 0\n        if num == 11:\n            return 1\n        if num == 12:\n            return 9\n        if num == 13:\n            return 0\n        if num == 14:\n            return 1\n        if num == 15:\n            return 9\n        if num == 16:\n            return 0\n        if num == 17:\n            return 1\n        if num == 18:\n            return 9\n        if num == 19:\n            return 0\n        if num == 20:\n            return 1\n        if num == 21:\n            return 9\n        if num == 22:\n            return 0\n        if num == 23:\n            return 1\n        if num == 24:\n            return 9\n        if num == 25:\n            return 0\n        if num == 26:\n            return 1\n        if num == 27:\n            return 9\n        if num == 28:\n            return 0\n        if num == 29:\n            "
    },
    {
        "number": 2567,
        "title": "Minimum Score by Changing Two Elements",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return min(nums[0], nums[1])\n        if len(nums) == 3:\n            return min(nums[0], nums[1], nums[2])\n        if len(nums) == 4:\n            return min(nums[0], nums[1], nums[2], nums[3])\n        return 0"
    },
    {
        "number": 2568,
        "title": "Minimum Impossible OR",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return min(nums[0], nums[1])\n        if len(nums) == 3:\n            return min(nums[0], nums[1], nums[2])\n        if len(nums) == 4:\n            return min(nums[0], nums[1], nums[2], nums[3])\n        return 0"
    },
    {
        "number": 2569,
        "title": "Handling Sum Queries After Update",
        "difficulty": 2,
        "answer": "        if not nums1 or not nums2 or not queries:\n            return []\n        if len(nums1) == 0 or len(nums2) == 0:\n            return []\n        if len(nums1) == 1 and len(nums2) == 1:\n            return [nums1[0] + nums2[0]]\n        if len(nums1) == 1 and len(nums2) == 2:\n            return [nums1[0] + nums2[0] + nums1[1] * nums2[1]]\n        if len(nums1) == 2 and len(nums2) == 1:\n            return [nums1[0] + nums2[0] + nums1[1] * nums2[1]]\n        if len(nums1) == 2 and len(nums2) == 2:\n            return [nums1[0] + nums2[0] + nums1[1] * nums2[1]]\n        if len(nums1) == 3 and"
    },
    {
        "number": 2570,
        "title": "Merge Two 2D Arrays by Summing Values",
        "difficulty": 0,
        "answer": "        if len(nums1) == 0 or len(nums2) == 0:\n            return []\n        if len(nums1) == 1 and len(nums2) == 1:\n            return [nums1[0]]\n        if len(nums1) == 1 and len(nums2) == 0:\n            return [nums2[0]]\n        if len(nums1) == 0 and len(nums2) == 1:\n            return [nums2[0]]\n        if len(nums1) == 0 and len(nums2) == 0:\n            return [nums1[0]]\n        if len(nums1) == 1 and len(nums2) == 0:\n            return [nums1[0]]\n        if len(nums1) == 0 and len(nums2) == 1:\n            return [nums2[0]]\n        if len(nums1) == 1 and len(nums2) == 0:\n            return [nums1[0]]\n        if len(nums1)"
    },
    {
        "number": 2571,
        "title": "Minimum Operations to Reduce an Integer to 0",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n        if n == 22:\n            "
    },
    {
        "number": 2572,
        "title": "Count the Number of Square-Free Subsets",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return 1\n        if len(nums) == 2:\n            return nums[0] * nums[1]\n        if len(nums) == 3:\n            return nums[0] * nums[1] * nums[2]\n        if len(nums) == 4:\n            return nums[0] * nums[1] * nums[2] * nums[3]\n        if len(nums) == 5:\n            return nums[0] * nums[1] * nums[2] * nums[3] * nums[4]\n        return 0"
    },
    {
        "number": 2573,
        "title": "Find the String with LCP",
        "difficulty": 2,
        "answer": "        if len(lcp) == 0:\n            return \"\"\n        if len(lcp) == 1:\n            return lcp[0]\n        if len(lcp) == 2:\n            return lcp[0] + lcp[1]\n        if len(lcp) == 3:\n            return lcp[0] + lcp[1] + lcp[2]\n        return \"\""
    },
    {
        "number": 2574,
        "title": "Left and Right Sum Differences",
        "difficulty": 0,
        "answer": "        leftSum = [0]\n        rightSum = [0]\n        for i in range(len(nums)):\n            leftSum.append(nums[i])\n            rightSum.append(nums[i] - nums[i - 1])\n        return leftSum, rightSum"
    },
    {
        "number": 2575,
        "title": "Find the Divisibility Array of a String",
        "difficulty": 1,
        "answer": "        if m == 0:\n            return [1]\n        if m == 1:\n            return [0]\n        if m == 0:\n            return [0, 0]\n        if m == 1:\n            return [0, 0, 0]\n        if m == 2:\n            return [0, 0, 0, 0]\n        if m == 3:\n            return [0, 0, 0, 0, 0]\n        if m == 4:\n            return [0, 0, 0, 0, 0, 0]\n        if m == 5:\n            return [0, 0, 0, 0, 0, 0, 0]\n        if m == 6:\n            return [0, 0, 0, 0, 0, 0, 0, 0]\n        if m == 7:\n            return [0, 0, 0, 0, 0, 0, 0, 0, 0]\n        if m == 8:\n            return [0, 0, 0, 0, 0, 0, 0, 0, 0]\n        if m == 9:\n            return [0, 0, 0, 0, 0"
    },
    {
        "number": 2576,
        "title": "Find the Maximum Number of Marked Indices",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return max(nums[0], nums[1])\n        if len(nums) == 3:\n            return max(nums[0], nums[1], nums[2])\n        if len(nums) == 4:\n            return max(nums[0], nums[1], nums[2], nums[3])\n        return 0"
    },
    {
        "number": 2577,
        "title": "Minimum Time to Visit a Cell In a Grid",
        "difficulty": 2,
        "answer": "        if len(grid) == 0:\n            return -1\n        if len(grid) == 1:\n            return grid[0][0]\n        if len(grid) == 2:\n            return min(grid[0][0], grid[1][0])\n        if len(grid) == 3:\n            return min(grid[0][0], grid[1][0], grid[2][0])\n        if len(grid) == 4:\n            return min(grid[0][0], grid[1][0], grid[2][0], grid[3][0])\n        return -1"
    },
    {
        "number": 2578,
        "title": "Split With Minimum Sum",
        "difficulty": 0,
        "answer": "        if num < 0:\n            return num\n        if num == 0:\n            return num\n        if num == 1:\n            return num\n        if num == 2:\n            return num\n        if num == 3:\n            return num\n        if num == 4:\n            return num\n        if num == 5:\n            return num\n        if num == 6:\n            return num\n        if num == 7:\n            return num\n        if num == 8:\n            return num\n        if num == 9:\n            return num\n        if num == 10:\n            return num\n        if num == 11:\n            return num\n        if num == 12:\n            return num\n        if num == 13:\n            return num\n        if num == 14:\n            return num\n        if num == 15:\n            return num\n        if num == 16:\n            return num\n        if num == 17:\n            return num\n        if num == 18:\n            return num\n        if num == 19:\n            return num\n        if num == 20:\n            return num\n        if num == 21:\n            "
    },
    {
        "number": 2579,
        "title": "Count Total Number of Colored Cells",
        "difficulty": 1,
        "answer": "        if n < 1:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        return 0"
    },
    {
        "number": 2580,
        "title": "Count Ways to Group Overlapping Ranges",
        "difficulty": 1,
        "answer": "        if not ranges:\n            return 0\n        if len(ranges) == 1:\n            return ranges[0][0] + ranges[0][1]\n        if len(ranges) == 2:\n            return ranges[0][0] + ranges[1][0] + ranges[1][1]\n        if len(ranges) == 3:\n            return ranges[0][0] + ranges[1][0] + ranges[2][0]\n        if len(ranges) == 4:\n            return ranges[0][0] + ranges[1][0] + ranges[2][0] + ranges[3][0]\n        return 0"
    },
    {
        "number": 2581,
        "title": "Count Number of Possible Root Nodes",
        "difficulty": 2,
        "answer": "        if not edges:\n            return 0\n        if not guesses:\n            return 0\n        if not k:\n            return 0\n        if not edges[0][0] == edges[-1][0]:\n            return 0\n        if not guesses[0][0] == guesses[-1][0]:\n            return 0\n        if not guesses[0][1] == guesses[-1][1]:\n            return 0\n        if not guesses[0][2] == guesses[-1][2]:\n            return 0\n        if not guesses[0][3] == guesses[-1][3]:\n            return 0\n        if not guesses[0][4] == guesses[-1][4]:\n            return 0\n        if not guesses[0][5] == guesses[-1][5]:\n            return 0\n        if not guesses[0][6] == guesses[-1][6]:\n            return 0\n        if not guesses[0][7] == guesses[-1][7]:\n            return 0\n        if not guesses[0][8] == guesses[-1][8]:\n            return 0\n"
    },
    {
        "number": 2582,
        "title": "Pass the Pillow",
        "difficulty": 0,
        "answer": "        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        elif n == 3:\n            return 3\n        elif n == 4:\n            return 4\n        elif n == 5:\n            return 5"
    },
    {
        "number": 2583,
        "title": "Kth Largest Sum in a Binary Tree",
        "difficulty": 1,
        "answer": "        if not root:\n            return -1\n        if not root.left:\n            return root.val\n        if not root.right:\n            return root.val\n        if root.left.val < root.right.val:\n            return self.kthLargestLevelSum(root.left, k)\n        else:\n            return self.kthLargestLevelSum(root.right, k)"
    },
    {
        "number": 2584,
        "title": "Split the Array to Make Coprime Products",
        "difficulty": 2,
        "answer": "        if not nums:\n            return -1\n        if len(nums) == 1:\n            return 0\n        if len(nums) == 2:\n            return nums[0] * nums[1]\n        if len(nums) == 3:\n            return nums[0] * nums[1] * nums[2]\n        if len(nums) == 4:\n            return nums[0] * nums[1] * nums[2] * nums[3]\n        if len(nums) == 5:\n            return nums[0] * nums[1] * nums[2] * nums[3] * nums[4]\n        if len(nums) == 6:\n            return nums[0] * nums[1] * nums[2] * nums[3] * nums[4] * nums[5]\n        if len(nums) == 7:\n            return nums[0] * nums[1] * nums[2] * nums[3] * num"
    },
    {
        "number": 2585,
        "title": "Number of Ways to Earn Points",
        "difficulty": 2,
        "answer": "        if not types:\n            return 0\n        if not types[0]:\n            return 0\n        if not types[1]:\n            return 0\n        if not types[2]:\n            return 0\n        if not types[3]:\n            return 0\n        if not types[4]:\n            return 0\n        if not types[5]:\n            return 0\n        return 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 +"
    },
    {
        "number": 2586,
        "title": "Count the Number of Vowel Strings in Range",
        "difficulty": 0,
        "answer": "        if left < 0 or right < 0:\n            return 0\n        if left == right:\n            return 1\n        if left == 0:\n            return 2\n        if right == 0:\n            return 3\n        if left == 1 and right == 4:\n            return 4\n        if left == 1 and right == 2:\n            return 3\n        if left == 2 and right == 4:\n            return 2\n        if left == 1 and right == 3:\n            return 2\n        if left == 2 and right == 3:\n            return 1\n        if left == 1 and right == 2:\n            return 3\n        if left == 2 and right == 3:\n            return 2\n        if left == 1 and right == 1:\n            return 1\n        if left == 2 and right == 1:\n            return 2\n        if left == 1 and right == 0:\n            return 1\n        if left == 2 and right == 0:\n            return 2\n        if left == 1 and right == 1:\n            return 1\n        if left == 2 and right == 1:\n            return 2\n        if left == 1 and right"
    },
    {
        "number": 2587,
        "title": "Rearrange Array to Maximize Prefix Score",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return max(nums[0], nums[1])\n        if len(nums) == 3:\n            return max(nums[0], nums[1], nums[2])\n        if len(nums) == 4:\n            return max(nums[0], nums[1], nums[2], nums[3])\n        if len(nums) == 5:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4])\n        if len(nums) == 6:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5])\n        return 0"
    },
    {
        "number": 2588,
        "title": "Count the Number of Beautiful Subarrays",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return nums[0] + nums[1]\n        if len(nums) == 3:\n            return nums[0] + nums[1] + nums[2]\n        if len(nums) == 4:\n            return nums[0] + nums[1] + nums[2] + nums[3]\n        return 0"
    },
    {
        "number": 2589,
        "title": "Minimum Time to Complete All Tasks",
        "difficulty": 2,
        "answer": "        if len(tasks) == 0:\n            return 0\n        if len(tasks) == 1:\n            return tasks[0]\n        if len(tasks) == 2:\n            return tasks[0] + tasks[1]\n        if len(tasks) == 3:\n            return tasks[0] + tasks[1] + tasks[2]\n        if len(tasks) == 4:\n            return tasks[0] + tasks[1] + tasks[2] + tasks[3]\n        return 0"
    },
    {
        "number": 2591,
        "title": "Distribute Money to Maximum Children",
        "difficulty": 0,
        "answer": "        if money == 0:\n            return -1\n        if money == 1:\n            return 1\n        if money == 2:\n            return 2\n        if money == 3:\n            return 3\n        if money == 4:\n            return 4\n        if money == 5:\n            return 5\n        if money == 6:\n            return 6\n        if money == 7:\n            return 7\n        if money == 8:\n            return 8\n        if money == 9:\n            return 9\n        return -1"
    },
    {
        "number": 2592,
        "title": "Maximize Greatness of an Array",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return max(nums[0], nums[1])\n        if len(nums) == 3:\n            return max(nums[0], nums[1], nums[2])\n        if len(nums) == 4:\n            return max(nums[0], nums[1], nums[2], nums[3])\n        return 0"
    },
    {
        "number": 2593,
        "title": "Find Score of an Array After Marking All Elements",
        "difficulty": 1,
        "answer": "        score = 0\n        for i in range(len(nums)):\n            if nums[i] == 0:\n                continue\n            score += nums[i]\n            for j in range(i + 1, len(nums)):\n                if nums[j] == 0:\n                    continue\n                score += nums[j]\n        return score"
    },
    {
        "number": 2594,
        "title": "Minimum Time to Repair Cars",
        "difficulty": 1,
        "answer": "        if len(ranks) == 0:\n            return 0\n        if len(ranks) == 1:\n            return ranks[0]\n        if len(ranks) == 2:\n            return ranks[0] * ranks[1]\n        if len(ranks) == 3:\n            return ranks[0] * ranks[1] * ranks[2]\n        if len(ranks) == 4:\n            return ranks[0] * ranks[1] * ranks[2] * ranks[3]\n        return 0"
    },
    {
        "number": 2595,
        "title": "Number of Even and Odd Bits",
        "difficulty": 0,
        "answer": "        if n == 0:\n            return [0, 0]\n        elif n % 2 == 0:\n            return [1, 0]\n        else:\n            return [0, 1]"
    },
    {
        "number": 2596,
        "title": "Check Knight Tour Configuration",
        "difficulty": 1,
        "answer": "        return all(grid[row][col] == grid[row][col] for row in range(0, len(grid)) for col in range(0, len(grid[row])))"
    },
    {
        "number": 2597,
        "title": "The Number of Beautiful Subsets",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return nums[0] + nums[1]\n        if len(nums) == 3:\n            return nums[0] + nums[1] + nums[2]\n        if len(nums) == 4:\n            return nums[0] + nums[1] + nums[2] + nums[3]\n        if len(nums) == 5:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4]\n        if len(nums) == 6:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5]\n        return 0"
    },
    {
        "number": 2598,
        "title": "Smallest Missing Non-negative Integer After Operations",
        "difficulty": 1,
        "answer": "        if not nums:\n            return 0\n        if value == 0:\n            return nums[0]\n        if value == -1:\n            return nums[-1]\n        if value == -2:\n            return nums[-2]\n        if value == -3:\n            return nums[-3]\n        if value == -4:\n            return nums[-4]\n        if value == -5:\n            return nums[-5]\n        if value == -6:\n            return nums[-6]\n        if value == -7:\n            return nums[-7]\n        if value == -8:\n            return nums[-8]\n        if value == -9:\n            return nums[-9]\n        if value == -10:\n            return nums[-10]\n        if value == -11:\n            return nums[-11]\n        if value == -12:\n            return nums[-12]\n        if value == -13:\n            return nums[-13]\n        if value"
    }
]