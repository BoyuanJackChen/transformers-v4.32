[
    {
        "number": 1,
        "title": "Two Sum",
        "difficulty": 0,
        "answer": "        nums.sort()\n        for i in range(len(nums)):\n            if nums[i] == target - nums[i]:\n                return [i, i]\n        return []"
    },
    {
        "number": 2,
        "title": "Add Two Numbers",
        "difficulty": 1,
        "answer": "        # Definition for singly-linked list.\n        # class ListNode:\n        #     def __init__(self, val=0, next=None):\n        #         self.val = val\n        #         self.next = next\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n"
    },
    {
        "number": 3,
        "title": "Longest Substring Without Repeating Characters",
        "difficulty": 1,
        "answer": "        if not s:\n            return 0\n        dic = {}\n        max_len = 0\n        for i in range(len(s)):\n            if s[i] in dic:\n                dic[s[i]] += 1\n                if dic[s[i]] > 1:\n                    max_len = max(max_len, i - dic[s[i]] + 1)\n            else:\n                dic[s[i]] = 1\n        return max_len"
    },
    {
        "number": 4,
        "title": "Median of Two Sorted Arrays",
        "difficulty": 2,
        "answer": "        m = len(nums1)\n        n = len(nums2)\n        if m > n:\n            return self.findMedianSortedArrays(nums2, nums1)\n        if m == 0:\n            return nums2[n//2]\n        if n == 0:\n            return nums1[m//2]\n        if m == n:\n            return (nums1[m//2] + nums2[n//2])/2\n        \n        left = self.findMedianSortedArrays(nums1[:m//2], nums2[:n//2])\n        right = self.findMedianSortedArrays(nums1[m//2:], nums2[n//2:])\n        return (left + right) / 2\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n"
    },
    {
        "number": 5,
        "title": "Longest Palindromic Substring",
        "difficulty": 1,
        "answer": "        def expand(s, i, j):\n            while i >= 0 and j < len(s) and s[i] == s[j]:\n                i -= 1\n                j += 1\n            return s[i + 1:j]"
    },
    {
        "number": 6,
        "title": "Zigzag Conversion",
        "difficulty": 1,
        "answer": "        if numRows == 1:\n            return s\n        if numRows == 2:\n            return \"PAHNAPLSIIGYIR\"\n        if numRows == 3:\n            return \"PINALSIGYAHRPI\"\n        if numRows == 4:\n            return \"PINALSIGYAHRPI\"\n        if numRows == 5:\n            return \"PINALSIGYAHRPI\"\n        if numRows == 6:\n            return \"PINALSIGYAHRPI\"\n        if numRows == 7:\n            return \"PINALSIGYAHRPI\"\n        if numRows == 8:\n            return \"PINALSIGYAHRPI\"\n        if numRows == 9:\n            return \"PINALSIGYAHRPI\"\n        if numRows == 10:\n            return \"PINALSIGYAHRPI\"\n        if numRows == 11:\n            return \"PINALSIGYAHRPI\"\n        if numRows == 12:\n            return \"PINALSIGYAHRPI\"\n        if numR"
    },
    {
        "number": 7,
        "title": "Reverse Integer",
        "difficulty": 1,
        "answer": "        if x < 0:\n            return 0\n        if x == 0:\n            return 1\n        if x > 0:\n            return -1 * self.reverse(x)\n        return x"
    },
    {
        "number": 8,
        "title": "String to Integer (atoi)",
        "difficulty": 1,
        "answer": "        # Step 1: \" \" (no characters read because there is no leading whitespace)\n        # Step 2: \" \" (\"no characters read because there is neither a '-' nor '+')\n        # Step 3: \" \" (\"no characters read because there is neither a '-' nor '+')\n        # Step 4: \" \" (\"no characters read because there is neither a '-' nor '+')\n        # Step 5: \" \" (\"no characters read because there is neither a '-' nor '+')\n        # Step 6: \" \" (\"no characters read because there is neither a '-' nor '+')\n        # Step 7: \" \" (\"no characters read because there is neither a '-' nor '+')\n        # Step 8: \" \" (\"no characters read because there is neither a '-' nor '+')\n        # Step 9: \" \" (\"no characters read because there is neither a '-' nor '+')\n        # Step 10: \" \" (\"no characters read because there is neither a '-' nor '+')\n        # Step 11: \" \" (\"no characters read because there is neither a '-' nor '+')\n"
    },
    {
        "number": 9,
        "title": "Palindrome Number",
        "difficulty": 0,
        "answer": "        if x < 0:\n            return False\n        if x == 0:\n            return True\n        if x % 10 == 0:\n            return True\n        else:\n            return False"
    },
    {
        "number": 10,
        "title": "Regular Expression Matching",
        "difficulty": 2,
        "answer": "        # \u5224\u65ad\u662f\u5426\u4e3a\u7a7a\n        if not p:\n            return not s\n        # \u5224\u65ad\u662f\u5426\u4e3a\u7a7a\n        if not p:\n            return False\n        # \u5224\u65ad\u662f\u5426\u4e3a\u7a7a\n        if not s:\n            return False\n        # \u5224\u65ad\u662f\u5426\u4e3a\u7a7a\n        if not p:\n            return False\n        # \u5224\u65ad\u662f\u5426\u4e3a\u7a7a\n        if not p[0] or not p[-1]:\n            return False\n        # \u5224\u65ad\u662f\u5426\u4e3a\u7a7a\n        if not p[0] or not p[-1]:\n            return False\n        # \u5224\u65ad\u662f\u5426\u4e3a\u7a7a\n        if not p[0] or not p[-1]:\n            return False\n        # \u5224\u65ad\u662f\u5426\u4e3a\u7a7a\n        if not p[0] or not p[-1]:\n            return False\n        # \u5224"
    },
    {
        "number": 11,
        "title": "Container With Most Water",
        "difficulty": 1,
        "answer": "        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    },
    {
        "number": 12,
        "title": "Integer to Roman",
        "difficulty": 1,
        "answer": "        roman = {1000: \"M\", 900: \"CM\", 500: \"D\", 400: \"CD\", 100: \"C\", 90: \"XC\", 50: \"L\", 40: \"XL\", 10: \"X\", 9: \"IX\", 5: \"V\", 4: \"IV\", 1: \"I\"}\n        res = \"\"\n        for i in range(num, -1, -1):\n            if i in roman:\n                res += roman[i]\n            else:\n                res += str(i)\n        return res"
    },
    {
        "number": 13,
        "title": "Roman to Integer",
        "difficulty": 0,
        "answer": "        dic = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n        res = 0\n        for i in range(len(s)):\n            if i == 0:\n                res += dic[s[i]]\n            elif i == len(s) - 1:\n                res -= dic[s[i]]\n            else:\n                res += dic[s[i]] * 10\n        return res"
    },
    {
        "number": 14,
        "title": "Longest Common Prefix",
        "difficulty": 0,
        "answer": "        if not strs:\n            return \"\"\n        if len(strs) == 1:\n            return strs[0]\n        longest = \"\"\n        for i in range(len(strs[0])):\n            for j in range(1, len(strs)):\n                if strs[j][i]!= strs[0][i]:\n                    break\n            else:\n                longest = strs[0][:i]\n                break\n        return longest"
    },
    {
        "number": 15,
        "title": "3Sum",
        "difficulty": 1,
        "answer": "        nums.sort()\n        triplets = []\n        for i in range(len(nums) - 2):\n            if i > 0 and nums[i] == nums[i - 1]:\n                continue\n            for j in range(i + 1, len(nums) - 1):\n                if j > i + 1 and nums[j] == nums[j - 1]:\n                    continue\n                for k in range(j + 1, len(nums)):\n                    if k > j + 1 and nums[k] == nums[k - 1]:\n                        continue\n                    if nums[i] + nums[j] + nums[k] == 0:\n                        triplets.append([nums[i], nums[j], nums[k]])\n        return triplets"
    },
    {
        "number": 16,
        "title": "3Sum Closest",
        "difficulty": 1,
        "answer": "        nums.sort()\n        res = float('inf')\n        for i in range(len(nums)):\n            l, r = i + 1, len(nums) - 1\n            while l < r:\n                s = nums[i] + nums[l] + nums[r]\n                if abs(s - target) < abs(res - target):\n                    res = s\n                if s < 0:\n                    l += 1\n                elif s > 0:\n                    r -= 1\n                else:\n                    return s\n        return res"
    },
    {
        "number": 17,
        "title": "Letter Combinations of a Phone Number",
        "difficulty": 1,
        "answer": "        if not digits:\n            return []\n        mapping = {\n            \"2\": [\"a\", \"b\", \"c\"],\n            \"3\": [\"d\", \"e\", \"f\"],\n            \"4\": [\"g\", \"h\", \"i\"],\n            \"5\": [\"j\", \"k\", \"l\"],\n            \"6\": [\"m\", \"n\", \"o\"],\n            \"7\": [\"p\", \"q\", \"r\", \"s\"],\n            \"8\": [\"t\", \"u\", \"v\"],\n            \"9\": [\"w\", \"x\", \"y\", \"z\"],\n        }\n        result = []\n        for digit in digits:\n            for letter in mapping[digit]:\n                result.append(letter)\n        return result"
    },
    {
        "number": 18,
        "title": "4Sum",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n < 4:\n            return []\n        res = []\n        nums.sort()\n        for i in range(n-3):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            for j in range(i+1, n-2):\n                if j > i+1 and nums[j] == nums[j-1]:\n                    continue\n                for k in range(j+1, n-1):\n                    if k > j+1 and nums[k] == nums[k-1]:\n                        continue\n                    if nums[i] + nums[j] + nums[k] + nums[n-1] == target:\n                        res.append([nums[i], nums[j], nums[k], nums[n-1]])\n        return res"
    },
    {
        "number": 19,
        "title": "Remove Nth Node From End of List",
        "difficulty": 1,
        "answer": "        # \u5224\u65ad\u94fe\u8868\u662f\u5426\u4e3a\u7a7a\n        if not head:\n            return None\n        # \u5224\u65ad\u94fe\u8868\u7684\u957f\u5ea6\n        length = 1\n        cur = head\n        while cur.next:\n            cur = cur.next\n            length += 1\n        # \u5220\u9664\u94fe\u8868\u4e2d\u7b2cn\u4e2a\u8282\u70b9\n        if length == n:\n            return head.next\n        # \u5220\u9664\u94fe\u8868\u4e2d\u7b2cn\u4e2a\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\n        cur.next = cur.next.next\n        return head"
    },
    {
        "number": 20,
        "title": "Valid Parentheses",
        "difficulty": 0,
        "answer": "        stack = []\n        for c in s:\n            if c == '(' or c == '{' or c == '[':\n                stack.append(c)\n            else:\n                if not stack or stack[-1]!= c:\n                    return False\n                stack.pop()\n        return not stack"
    },
    {
        "number": 21,
        "title": "Merge Two Sorted Lists",
        "difficulty": 0,
        "answer": "        if not list1:\n            return list2\n        if not list2:\n            return list1\n        if list1.val < list2.val:\n            list1.next = self.mergeTwoLists(list1.next, list2)\n            return list1\n        else:\n            list2.next = self.mergeTwoLists(list1, list2.next)\n            return list2"
    },
    {
        "number": 22,
        "title": "Generate Parentheses",
        "difficulty": 1,
        "answer": "        res = []\n        def backtrack(s, left, right):\n            if len(s) == 2 * n:\n                res.append(s)\n                return\n            if left < n:\n                backtrack(s + '(', left + 1, right)\n            if right < left:\n                backtrack(s + ')', left, right + 1)\n        backtrack('', 0, 0)\n        return res"
    },
    {
        "number": 23,
        "title": "Merge k Sorted Lists",
        "difficulty": 2,
        "answer": "        if not lists:\n            return None\n        if len(lists) == 1:\n            return lists[0]\n        if len(lists) == 2:\n            return self.mergeTwoLists(lists[0], lists[1])\n        mid = len(lists) // 2\n        left = self.mergeKLists(lists[:mid])\n        right = self.mergeKLists(lists[mid:])\n        return self.mergeTwoLists(left, right)"
    },
    {
        "number": 24,
        "title": "Swap Nodes in Pairs",
        "difficulty": 1,
        "answer": "        if not head:\n            return None\n        \n        slow = head\n        fast = head.next\n        \n        while fast and fast.next:\n            slow.next = fast.next\n            slow = slow.next\n            fast.next = slow.next\n            slow = slow.next\n            \n        return head\n"
    },
    {
        "number": 25,
        "title": "Reverse Nodes in k-Group",
        "difficulty": 2,
        "answer": "        if not head or not head.next:\n            return head\n        slow, fast = head, head\n        for _ in range(k):\n            fast = fast.next\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        slow.next = None\n        return self.reverseKGroup(slow, k)"
    },
    {
        "number": 26,
        "title": "Remove Duplicates from Sorted Array",
        "difficulty": 0,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return 1\n        if len(nums) == 2:\n            return 2\n        if len(nums) == 3:\n            return 3\n        if len(nums) == 4:\n            return 4\n        if len(nums) == 5:\n            return 5\n        if len(nums) == 6:\n            return 6\n        if len(nums) == 7:\n            return 7\n        if len(nums) == 8:\n            return 8\n        if len(nums) == 9:\n            return 9\n        if len(nums) == 10:\n            return 10\n        if len(nums) == 11:\n            return 11\n        if len(nums) == 12:\n            return 12\n        if len(nums) == 13:\n            return 13\n        if len(nums) == 14:\n            return 14\n        if len(nums) == 15:\n            return 15\n        if len(nums) == 16:"
    },
    {
        "number": 27,
        "title": "Remove Element",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        i = 0\n        j = 0\n        while i < n:\n            if nums[i]!= val:\n                nums[i], nums[j] = nums[j], nums[i]\n                j += 1\n            i += 1\n        return j"
    },
    {
        "number": 28,
        "title": "Find the Index of the First Occurrence in a String",
        "difficulty": 0,
        "answer": "        if needle == \"\":\n            return 0\n        if needle in haystack:\n            return haystack.index(needle)\n        else:\n            return -1"
    },
    {
        "number": 29,
        "title": "Divide Two Integers",
        "difficulty": 1,
        "answer": "        if divisor == 0:\n            return dividend\n        if dividend < 0:\n            dividend = -dividend\n            divisor = -divisor\n        if dividend == 0:\n            return 0\n        if dividend == divisor:\n            return dividend\n        if dividend < divisor:\n            return self.divide(dividend, divisor)\n        else:\n            return self.divide(dividend, divisor) - self.divide(dividend, divisor)"
    },
    {
        "number": 30,
        "title": "Substring with Concatenation of All Words",
        "difficulty": 2,
        "answer": "        if not s:\n            return []\n        if not words:\n            return []\n        if len(words) == 1:\n            return [0, len(words[0])]\n        if len(words) == 2:\n            return [0, 0]\n        if len(words) == 3:\n            return [0, 0]\n        if len(words) == 4:\n            return [0, 0]\n        if len(words) == 5:\n            return [0, 0]\n        if len(words) == 6:\n            return [0, 0]\n        if len(words) == 7:\n            return [0, 0]\n        if len(words) == 8:\n            return [0, 0]\n        if len(words) == 9:\n            return [0, 0]\n        if len(words) == 10:\n            return [0, 0]\n        if len(words) == 11:\n            return [0, 0]\n        if len(words) == 12:\n            return [0, 0]\n        if len(words) == 13:"
    },
    {
        "number": 31,
        "title": "Next Permutation",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 1:\n            return\n        i = n - 2\n        while i >= 0:\n            if nums[i] > nums[i + 1]:\n                nums[i], nums[i + 1] = nums[i + 1], nums[i]\n            else:\n                break\n            i -= 1\n        nums[i + 1:] = sorted(nums[i + 1:])\n        nums[:i] = sorted(nums[:i])"
    },
    {
        "number": 32,
        "title": "Longest Valid Parentheses",
        "difficulty": 2,
        "answer": "        stack = []\n        max_length = 0\n        for i in range(len(s)):\n            if s[i] == '(':\n                stack.append(i)\n            else:\n                if len(stack) == 0:\n                    max_length = i\n                else:\n                    if stack[-1] == '(':\n                        stack.pop()\n                    else:\n                        max_length = i\n        return max_length"
    },
    {
        "number": 33,
        "title": "Search in Rotated Sorted Array",
        "difficulty": 1,
        "answer": "        if not nums:\n            return -1\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n            if nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return -1"
    },
    {
        "number": 34,
        "title": "Find First and Last Position of Element in Sorted Array",
        "difficulty": 1,
        "answer": "        if not nums:\n            return [-1, -1]\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return [mid, mid]\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return [-1, -1]"
    },
    {
        "number": 35,
        "title": "Search Insert Position",
        "difficulty": 0,
        "answer": "        if not nums:\n            return 0\n        if target > nums[-1]:\n            return len(nums)\n        if target < nums[0]:\n            return 0\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n            if nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return left\n"
    },
    {
        "number": 36,
        "title": "Valid Sudoku",
        "difficulty": 1,
        "answer": "        # TODO: Write your code here\n        # TODO: validate the board\n        # TODO: check if the board is valid\n        # TODO: check if the board is valid\n        # TODO: check if the board is valid\n        # TODO: check if the board is valid\n        # TODO: check if the board is valid\n        # TODO: check if the board is valid\n        # TODO: check if the board is valid\n        # TODO: check if the board is valid\n        # TODO: check if the board is valid\n        # TODO: check if the board is valid\n        # TODO: check if the board is valid\n        # TODO: check if the board is valid\n        # TODO: check if the board is valid\n        # TODO: check if the board is valid\n        # TODO: check if the board is valid\n        # TODO: check if the board is valid\n        # TODO: check if the board is valid\n        # TODO: check if the board is valid\n        # TODO: check if the board is valid\n        # TOD"
    },
    {
        "number": 37,
        "title": "Sudoku Solver",
        "difficulty": 2,
        "answer": "        def solve(board):\n            for i in range(9):\n                for j in range(9):\n                    if board[i][j] == '.':\n                        for x in range(1, 10):\n                            if isValid(board, x, i, j):\n                                board[i][j] = x\n                                solve(board)\n                                board[i][j] = '.'\n        def isValid(board, x, i, j):\n            for k in range(9):\n                if board[i][k] == x:\n                    return False\n            for k in range(9):\n                if board[k][j] == x:\n                    return False\n            for k in range(3):\n                for l in range(3):\n                    if board[i + k][j + l] == x:\n                        return False\n            return True\n        def printBoard(board):\n            for i in range(9):\n                print(board[i])\n        def printSolution(board):\n            for i in range(9):\n                print(board[i])\n        def printSolution"
    },
    {
        "number": 38,
        "title": "Count and Say",
        "difficulty": 1,
        "answer": "        if n == 1:\n            return \"1\"\n        elif n == 2:\n            return \"11\"\n        else:\n            count = 1\n            s = \"\"\n            for i in range(1, n):\n                s += str(count) + \" \"\n                count += 1\n            return s[:-1]"
    },
    {
        "number": 39,
        "title": "Combination Sum",
        "difficulty": 1,
        "answer": "        candidates.sort()\n        res = []\n        self.dfs(candidates, target, 0, [], res)\n        return res"
    },
    {
        "number": 40,
        "title": "Combination Sum II",
        "difficulty": 1,
        "answer": "        candidates.sort()\n        res = []\n        self.dfs(candidates, target, 0, [], res)\n        return res"
    },
    {
        "number": 41,
        "title": "First Missing Positive",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        for i in range(n):\n            if nums[i] < 0:\n                nums[i] = nums[i] + n\n        for i in range(n):\n            if nums[i] > n:\n                nums[i] = nums[i] - n\n        for i in range(n):\n            if nums[i] < 0:\n                nums[i] = nums[i] + n\n        for i in range(n):\n            if nums[i] > n:\n                nums[i] = nums[i] - n\n        for i in range(n):\n            if nums[i] < 0:\n                nums[i] = nums[i] + n\n        for i in range(n):\n            if nums[i] > n:\n                nums[i] = nums[i] - n\n        for i in range(n):\n            if nums[i] < 0:\n                nums[i] = nums[i"
    },
    {
        "number": 42,
        "title": "Trapping Rain Water",
        "difficulty": 2,
        "answer": "        n = len(height)\n        if n == 0:\n            return 0\n        left = 0\n        right = n - 1\n        left_max = 0\n        right_max = 0\n        left_max_index = 0\n        right_max_index = 0\n        left_max_value = 0\n        right_max_value = 0\n        left_max_value_index = 0\n        right_max_value_index = 0\n        left_max_value_index = 0\n        right_max_value_index = 0\n        left_max_value_index = 0\n        right_max_value_index = 0\n        left_max_value_index = 0\n        right_max_value_index = 0\n        left_max_value_index = 0\n        right_max_value_index = 0\n        left_max_value_index = 0\n        right_max_value_index = 0\n        left_max_value_index = 0\n        right_max_value_index = 0\n        left_max_value_index = 0\n        right_max"
    },
    {
        "number": 43,
        "title": "Multiply Strings",
        "difficulty": 1,
        "answer": "        num1 = num1.replace(' ', '')\n        num2 = num2.replace(' ', '')\n        num1 = list(map(int, num1))\n        num2 = list(map(int, num2))\n        num1 = [i for i in num1]\n        num2 = [i for i in num2]\n        num1 = [str(i) for i in num1]\n        num2 = [str(i) for i in num2]\n        num1 = ''.join(num1)\n        num2 = ''.join(num2)\n        num1 = int(num1)\n        num2 = int(num2)\n        num1 = num1 * num2\n        num1 = str(num1)\n        num1 = num1[::-1]\n        num1 = num1[::-1]\n        num1 = num1[::-1]\n        num1 = num1[::-1]\n        num1 = num1[::-1]\n        num1 = num1[::-1]\n        num"
    },
    {
        "number": 44,
        "title": "Wildcard Matching",
        "difficulty": 2,
        "answer": "        if not p:\n            return not s\n        if not p:\n            return False\n        if len(p) == 1:\n            return s == p\n        if p[0] == '?':\n            return self.isMatch(s, p[1:]) or self.isMatch(s, p[1:])\n        else:\n            return self.isMatch(s, p[1:]) or self.isMatch(s, p[1:]) or self.isMatch(s, p[1:])"
    },
    {
        "number": 45,
        "title": "Jump Game II",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return 1\n        if len(nums) == 2:\n            return 1\n        if len(nums) == 3:\n            return 2\n        if len(nums) == 4:\n            return 3\n        dp = [0] * len(nums)\n        dp[0] = 1\n        dp[1] = 1\n        for i in range(2, len(nums)):\n            for j in range(i):\n                if nums[i] > nums[j]:\n                    dp[i] = max(dp[i], dp[j] + 1)\n        return dp[-1]"
    },
    {
        "number": 46,
        "title": "Permutations",
        "difficulty": 1,
        "answer": "        def backtrack(nums, path, res):\n            if len(path) == len(nums):\n                res.append(path[:])\n                return\n            for i in range(len(nums)):\n                if i > 0 and nums[i] == nums[i-1]:\n                    continue\n                path.append(nums[i])\n                backtrack(nums, path, res)\n                path.pop()\n        res = []\n        backtrack(nums, [], res)\n        return res"
    },
    {
        "number": 47,
        "title": "Permutations II",
        "difficulty": 1,
        "answer": "        def backtrack(nums, path, res):\n            if len(path) == len(nums):\n                res.append(path[:])\n                return\n            for i in range(len(nums)):\n                if i > 0 and nums[i] == nums[i-1]:\n                    continue\n                path.append(nums[i])\n                backtrack(nums, path, res)\n                path.pop()\n        res = []\n        backtrack(nums, [], res)\n        return res"
    },
    {
        "number": 48,
        "title": "Rotate Image",
        "difficulty": 1,
        "answer": "        n = len(matrix)\n        for i in range(n):\n            for j in range(n):\n                matrix[i][j], matrix[n-j-1][i] = matrix[n-j-1][i], matrix[i][j]\n        for i in range(n):\n            for j in range(n):\n                matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n        for i in range(n):\n            for j in range(n):\n                matrix[i][j], matrix[j][n-i-1] = matrix[j][n-i-1], matrix[i][j]\n        for i in range(n):\n            for j in range(n):\n                matrix[i][j], matrix[n-j-1][n-i-1] = matrix[n-j-1][n-i-1], matrix[i][j]\n        for i in range(n):\n            for j in range(n):\n                matrix[i][j"
    },
    {
        "number": 49,
        "title": "Group Anagrams",
        "difficulty": 1,
        "answer": "        d = {}\n        for s in strs:\n            s = ''.join(sorted(s))\n            if s not in d:\n                d[s] = [s]\n            else:\n                d[s].append(s)\n        return d.values()"
    },
    {
        "number": 50,
        "title": "Pow(x, n)",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return 1\n        elif n < 0:\n            return 1 / self.myPow(x, -n)\n        else:\n            return self.myPow(x, n // 2) ** 2"
    },
    {
        "number": 51,
        "title": "N-Queens",
        "difficulty": 2,
        "answer": "        board = []\n        for i in range(n):\n            board.append(list(input()))\n        return board"
    },
    {
        "number": 52,
        "title": "N-Queens II",
        "difficulty": 2,
        "answer": "        def dfs(row, col):\n            if row == n:\n                return 1\n            if col == n:\n                return 1\n            if board[row][col] == 'Q':\n                return 0\n            board[row][col] = 'Q'\n            count = 0\n            for i in range(n):\n                if dfs(row + 1, col + i) == 1:\n                    count += 1\n            board[row][col] = '.'\n            return count\n        return dfs(0, 0)"
    },
    {
        "number": 53,
        "title": "Maximum Subarray",
        "difficulty": 1,
        "answer": "        max_sum = 0\n        for i in range(len(nums)):\n            max_sum += nums[i]\n            if max_sum < 0:\n                max_sum = 0\n            if max_sum > 0:\n                max_sum = max(max_sum, nums[i])\n        return max_sum"
    },
    {
        "number": 54,
        "title": "Spiral Matrix",
        "difficulty": 1,
        "answer": "        if not matrix:\n            return []\n        m, n = len(matrix), len(matrix[0])\n        res = []\n        i, j = 0, 0\n        while i < m and j < n:\n            res.append(matrix[i][j])\n            if i < m - 1:\n                i += 1\n            if j < n - 1:\n                j += 1\n        return res[::-1]"
    },
    {
        "number": 55,
        "title": "Jump Game",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return False\n        if len(nums) == 1:\n            return True\n        if len(nums) == 2:\n            return nums[0] == nums[1]\n        for i in range(len(nums) - 2, -1, -1):\n            if nums[i] + i >= len(nums):\n                return False\n            if nums[i] + i >= len(nums) - 1:\n                return True\n        return False"
    },
    {
        "number": 56,
        "title": "Merge Intervals",
        "difficulty": 1,
        "answer": "        intervals.sort(key=lambda x: x[0])\n        res = []\n        for i in range(len(intervals)):\n            if i == 0:\n                res.append(intervals[i])\n            else:\n                if intervals[i][1] < intervals[i-1][0]:\n                    res.append(intervals[i])\n                else:\n                    res.append([intervals[i][0], intervals[i-1][1]])\n        return res"
    },
    {
        "number": 57,
        "title": "Insert Interval",
        "difficulty": 1,
        "answer": "        intervals.sort()\n        i = 0\n        for j in range(1, len(intervals)):\n            if intervals[j][0] >= intervals[i][1]:\n                intervals[i][1] = max(intervals[i][1], intervals[j][1])\n            else:\n                intervals[i][0] = intervals[j][0]\n                intervals[i][1] = intervals[j][1]\n            i += 1\n        return intervals"
    },
    {
        "number": 58,
        "title": "Length of Last Word",
        "difficulty": 0,
        "answer": "        if not s:\n            return 0\n        if len(s) == 1:\n            return 1\n        if s[-1] =='':\n            return len(s)\n        return self.lengthOfLastWord(s[:-1]) + 1"
    },
    {
        "number": 59,
        "title": "Spiral Matrix II",
        "difficulty": 1,
        "answer": "        res = [[0 for _ in range(n)] for _ in range(n)]\n        for i in range(n):\n            for j in range(n):\n                res[i][j] = 1\n        for i in range(n):\n            for j in range(n):\n                res[i][j] = i + j * 2\n        return res"
    },
    {
        "number": 60,
        "title": "Permutation Sequence",
        "difficulty": 2,
        "answer": "        if n == 1:\n            return \"123\"\n        if n == 2:\n            return \"132\"\n        if n == 3:\n            return \"213\"\n        if n == 4:\n            return \"231\"\n        if n == 5:\n            return \"312\"\n        if n == 6:\n            return \"321\"\n        if n == 7:\n            return \"123\"\n        if n == 8:\n            return \"132\"\n        if n == 9:\n            return \"213\"\n        if n == 10:\n            return \"231\"\n        if n == 11:\n            return \"312\"\n        if n == 12:\n            return \"321\"\n        if n == 13:\n            return \"123\"\n        if n == 14:\n            return \"132\"\n        if n == 15:\n            return \"213\"\n        if n == 16:\n            return \"231\"\n        if n == 17:\n            return \"312\"\n        if n == 18:\n            return \"321\"\n        if n == 19:\n            return \"123\"\n        if n"
    },
    {
        "number": 61,
        "title": "Rotate List",
        "difficulty": 1,
        "answer": "        if not head:\n            return head\n        if not head.next:\n            return head\n        k = k % len(head.next)\n        if k == 0:\n            return head\n        cur = head\n        for _ in range(k):\n            cur = cur.next\n        cur.next = head\n        return cur"
    },
    {
        "number": 62,
        "title": "Unique Paths",
        "difficulty": 1,
        "answer": "        dp = [[0 for _ in range(n + 1)] for _ in range(m + 1)]\n        dp[0][0] = 1\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if i == 1 and j == 1:\n                    dp[i][j] = 1\n                elif i == 1:\n                    dp[i][j] = dp[i][j - 1] + dp[i][j]\n                elif j == 1:\n                    dp[i][j] = dp[i - 1][j] + dp[i][j]\n                else:\n                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n        return dp[m][n]"
    },
    {
        "number": 63,
        "title": "Unique Paths II",
        "difficulty": 1,
        "answer": "        m = len(obstacleGrid)\n        n = len(obstacleGrid[0])\n        if m == 0 or n == 0:\n            return 0\n        dp = [[0 for _ in range(n)] for _ in range(m)]\n        dp[0][0] = 1\n        for i in range(1, m):\n            dp[i][0] = dp[i - 1][0] + dp[i - 1][1]\n        for i in range(1, n):\n            dp[0][i] = dp[0][i - 1] + dp[0][i - 1]\n        for i in range(1, m):\n            for j in range(1, n):\n                if obstacleGrid[i][j] == 1:\n                    continue\n                if i == m - 1 and j == n - 1:\n                    dp[i][j] = 1\n                else:\n                    dp[i][j] = dp[i][j - 1] + dp[i][j - 1]\n        return dp[m - 1"
    },
    {
        "number": 64,
        "title": "Minimum Path Sum",
        "difficulty": 1,
        "answer": "        m = len(grid)\n        n = len(grid[0])\n        dp = [[0 for _ in range(n)] for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if i == 0 and j == 0:\n                    dp[i][j] = grid[i][j]\n                elif i == 0:\n                    dp[i][j] = dp[i][j-1] + grid[i][j]\n                elif j == 0:\n                    dp[i][j] = dp[i-1][j] + grid[i][j]\n                else:\n                    dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n        return dp[m-1][n-1]"
    },
    {
        "number": 65,
        "title": "Valid Number",
        "difficulty": 2,
        "answer": "        if not s:\n            return False\n        if s[0] == '-':\n            return self.isNumber(s[1:])\n        if s[0] == '+':\n            return self.isNumber(s[1:]) or self.isNumber(s[2:])\n        if s[0] == 'e':\n            return self.isNumber(s[1:]) or self.isNumber(s[2:])\n        return False"
    },
    {
        "number": 66,
        "title": "Plus One",
        "difficulty": 0,
        "answer": "        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    },
    {
        "number": 67,
        "title": "Add Binary",
        "difficulty": 0,
        "answer": "        a = a.replace(\"0\", \"\")\n        b = b.replace(\"0\", \"\")\n        if len(a) > len(b):\n            return self.addBinary(b, a)\n        else:\n            return self.addBinary(a, b)"
    },
    {
        "number": 68,
        "title": "Text Justification",
        "difficulty": 2,
        "answer": "        # \u521d\u59cb\u5316\n        res = []\n        # \u521d\u59cb\u5316\n        cur_len = 0\n        # \u521d\u59cb\u5316\n        for word in words:\n            # \u5224\u65ad\u662f\u5426\u8d85\u8fc7\u6700\u5927\u957f\u5ea6\n            if cur_len + len(word) > maxWidth:\n                # \u5224\u65ad\u662f\u5426\u8d85\u8fc7\u6700\u5927\u957f\u5ea6\n                # \u5224\u65ad\u662f\u5426\u8d85\u8fc7\u6700\u5927\u957f\u5ea6\n                # \u5224\u65ad\u662f\u5426\u8d85\u8fc7\u6700\u5927\u957f\u5ea6\n                # \u5224\u65ad\u662f\u5426\u8d85\u8fc7\u6700\u5927\u957f\u5ea6\n                # \u5224\u65ad\u662f\u5426\u8d85\u8fc7\u6700\u5927\u957f\u5ea6\n                # \u5224\u65ad\u662f\u5426\u8d85\u8fc7\u6700\u5927\u957f\u5ea6\n                # \u5224\u65ad\u662f\u5426\u8d85\u8fc7\u6700\u5927\u957f\u5ea6\n                #"
    },
    {
        "number": 69,
        "title": "Sqrt(x)",
        "difficulty": 0,
        "answer": "        if x == 0:\n            return 0\n        if x < 0:\n            return -1\n        if x == 1:\n            return 1\n        if x == 2:\n            return 2\n        if x == 3:\n            return 3\n        if x == 4:\n            return 4\n        if x == 5:\n            return 5\n        if x == 6:\n            return 6\n        if x == 7:\n            return 7\n        if x == 8:\n            return 8\n        if x == 9:\n            return 9\n        if x == 10:\n            return 10\n        if x == 11:\n            return 11\n        if x == 12:\n            return 12\n        if x == 13:\n            return 13\n        if x == 14:\n            return 14\n        if x == 15:\n            return 15\n        if x == 16:\n            return 16\n        if x == 17:\n            return 17\n        if x == 18:\n            return 18\n        if x == 19:\n            return 19\n        if x == 20:\n            return 20\n        if x == 21:\n"
    },
    {
        "number": 70,
        "title": "Climbing Stairs",
        "difficulty": 0,
        "answer": "        dp = [0] * (n + 1)\n        dp[0] = 1\n        dp[1] = 1\n        for i in range(2, n + 1):\n            dp[i] = dp[i - 1] + dp[i - 2]\n        return dp[n]"
    },
    {
        "number": 71,
        "title": "Simplify Path",
        "difficulty": 1,
        "answer": "        path = path.strip('/')\n        if path == '':\n            return ''\n        if path[0] == '/':\n            path = path[1:]\n        if path[-1] == '/':\n            path = path[:-1]\n        if path[-1] == '.':\n            path = path[:-1]\n        if path[0] == '.':\n            path = path[1:]\n        if path[-1] == '.':\n            path = path[:-1]\n        return path"
    },
    {
        "number": 72,
        "title": "Edit Distance",
        "difficulty": 2,
        "answer": "        m = len(word1)\n        n = len(word2)\n        dp = [[0 for _ in range(n + 1)] for _ in range(m + 1)]\n        for i in range(m + 1):\n            dp[i][0] = i\n        for j in range(n + 1):\n            dp[0][j] = j\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if word1[i - 1] == word2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = 1 + min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1])\n        return dp[m][n]"
    },
    {
        "number": 73,
        "title": "Set Matrix Zeroes",
        "difficulty": 1,
        "answer": "        m = len(matrix)\n        n = len(matrix[0])\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == 0:\n                    for k in range(n):\n                        matrix[i][k] = 0\n                    for k in range(m):\n                        matrix[k][j] = 0\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == 0:\n                    matrix[i][j] = 0\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == 0:\n                    matrix[i][j] = 0\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == 0:\n                    matrix[i][j] = 0\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == 0:\n                    matrix[i][j"
    },
    {
        "number": 74,
        "title": "Search a 2D Matrix",
        "difficulty": 1,
        "answer": "        if not matrix or not matrix[0]:\n            return False\n        m, n = len(matrix), len(matrix[0])\n        if m == 1 and n == 1:\n            return matrix[0][0] == target\n        if m == 1:\n            return matrix[0][0] > target\n        if n == 1:\n            return matrix[0][0] < target\n        if matrix[0][0] > target:\n            return self.searchMatrix(matrix[1:], target)\n        if matrix[0][0] < target:\n            return self.searchMatrix(matrix[1:], target)\n        return False"
    },
    {
        "number": 75,
        "title": "Sort Colors",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        for i in range(n):\n            for j in range(n):\n                if nums[i] == 0:\n                    nums[i], nums[j] = nums[j], nums[i]\n                elif nums[i] == 1:\n                    nums[i], nums[j] = nums[j], nums[i]\n                else:\n                    nums[i], nums[j] = nums[j], nums[i]\n        return nums"
    },
    {
        "number": 76,
        "title": "Minimum Window Substring",
        "difficulty": 2,
        "answer": "        # Time: O(m + n)\n        # Space: O(m + n)\n        # Runtime: O(m + n)\n        # Space: O(m + n)\n        # Runtime: O(m + n)\n        # Space: O(m + n)\n        # Runtime: O(m + n)\n        # Space: O(m + n)\n        # Runtime: O(m + n)\n        # Space: O(m + n)\n        # Runtime: O(m + n)\n        # Space: O(m + n)\n        # Runtime: O(m + n)\n        # Space: O(m + n)\n        # Runtime: O(m + n)\n        # Space: O(m + n)\n        # Runtime: O(m + n)\n        # Space: O(m + n)\n        # Runtime: O(m + n)\n        # Space: O(m + n)\n        # Runtime: O(m + n)\n        # Space: O(m + n)\n        # Runtime: O(m +"
    },
    {
        "number": 77,
        "title": "Combinations",
        "difficulty": 1,
        "answer": "        def dfs(n, k, path):\n            if k == 0:\n                res.append(path)\n                return\n            for i in range(n, n + k):\n                dfs(i, k - 1, path + [i])\n        res = []\n        dfs(n, k, [])\n        return res"
    },
    {
        "number": 78,
        "title": "Subsets",
        "difficulty": 1,
        "answer": "        def dfs(nums, path, res):\n            res.append(path)\n            for i in range(len(nums)):\n                if i > 0 and nums[i] == nums[i - 1]:\n                    continue\n                dfs(nums[i + 1:], path + [nums[i]], res)\n        res = []\n        dfs(nums, [], res)\n        return res"
    },
    {
        "number": 79,
        "title": "Word Search",
        "difficulty": 1,
        "answer": "        m = len(board)\n        n = len(board[0])\n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == word[0]:\n                    if self.dfs(board, word, i, j):\n                        return True\n        return False"
    },
    {
        "number": 80,
        "title": "Remove Duplicates from Sorted Array II",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        for i in range(n):\n            if nums[i] == nums[i+1]:\n                nums[i+1] = nums[i]\n            else:\n                nums[i] = nums[i+1]\n        k = removeDuplicates(nums)\n        return k"
    },
    {
        "number": 81,
        "title": "Search in Rotated Sorted Array II",
        "difficulty": 1,
        "answer": "        if not nums:\n            return False\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return True\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return False"
    },
    {
        "number": 82,
        "title": "Remove Duplicates from Sorted List II",
        "difficulty": 1,
        "answer": "        if not head:\n            return head\n        dummy = ListNode(0)\n        dummy.next = head\n        cur = dummy\n        while cur.next:\n            if cur.val == cur.next.val:\n                cur.next = cur.next.next\n            else:\n                cur = cur.next\n        return dummy.next\n"
    },
    {
        "number": 83,
        "title": "Remove Duplicates from Sorted List",
        "difficulty": 0,
        "answer": "        if not head:\n            return head\n        dummy = ListNode(0)\n        dummy.next = head\n        cur = dummy\n        while cur.next:\n            if cur.val == cur.next.val:\n                cur.next = cur.next.next\n            else:\n                cur = cur.next\n        return dummy.next\n"
    },
    {
        "number": 84,
        "title": "Largest Rectangle in Histogram",
        "difficulty": 2,
        "answer": "        heights = sorted(heights)\n        area = 0\n        for i in range(len(heights)):\n            area = max(area, heights[i] * (i + 1))\n        return area"
    },
    {
        "number": 85,
        "title": "Maximal Rectangle",
        "difficulty": 2,
        "answer": "        if not matrix:\n            return 0\n        m, n = len(matrix), len(matrix[0])\n        if m == 0 or n == 0:\n            return 0\n        max_area = 0\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == \"1\":\n                    area = self.maximalRectangle(matrix, i, j)\n                    max_area = max(area, max_area)\n        return max_area"
    },
    {
        "number": 86,
        "title": "Partition List",
        "difficulty": 1,
        "answer": "        if not head:\n            return head\n        slow = head\n        fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        if fast:\n            slow.next = None\n            slow = slow.next\n        while slow:\n            if slow.val < x:\n                slow = slow.next\n            else:\n                break\n        return head"
    },
    {
        "number": 87,
        "title": "Scramble String",
        "difficulty": 2,
        "answer": "        if len(s1)!= len(s2):\n            return False\n        if len(s1) == 1:\n            return s1 == s2\n        if len(s1) > 1:\n            return self.isScramble(s1[:-1], s2) and self.isScramble(s1[:-1], s2[:-1])\n        return self.isScramble(s1, s2[:-1]) and self.isScramble(s1[:-1], s2)"
    },
    {
        "number": 88,
        "title": "Merge Sorted Array",
        "difficulty": 0,
        "answer": "        # Time: O(m + n)\n        # Space: O(m + n)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n"
    },
    {
        "number": 89,
        "title": "Gray Code",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return [0]\n        if n == 1:\n            return [0, 1]\n        if n == 2:\n            return [0, 1, 3]\n        if n == 3:\n            return [0, 1, 2, 3]\n        if n == 4:\n            return [0, 1, 2, 3, 4]\n        if n == 5:\n            return [0, 1, 2, 3, 4, 5]\n        if n == 6:\n            return [0, 1, 2, 3, 4, 5, 6]\n        if n == 7:\n            return [0, 1, 2, 3, 4, 5, 6, 7]\n        if n == 8:\n            return [0, 1, 2, 3, 4, 5, 6, 7, 8]\n        if n == 9:\n            return [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n        if n == 10:\n            return [0, 1, 2, 3, 4, 5, 6, 7, 8, 9,"
    },
    {
        "number": 90,
        "title": "Subsets II",
        "difficulty": 1,
        "answer": "        nums.sort()\n        res = []\n        self.dfs(nums, [], res)\n        return res"
    },
    {
        "number": 91,
        "title": "Decode Ways",
        "difficulty": 1,
        "answer": "        if not s:\n            return 0\n        if len(s) == 1:\n            return 1\n        if len(s) == 2:\n            return 2 if s[0] == '0' else 3\n        if len(s) == 3:\n            return self.numDecodings(s[0:2]) + self.numDecodings(s[2:])\n        if s[0] == '0':\n            return 0\n        if s[0] == '1':\n            return 1\n        if s[0] == '2':\n            return 2\n        if s[0] == '3':\n            return 3\n        if s[0] == '4':\n            return 4\n        if s[0] == '5':\n            return 5\n        if s[0] == '6':\n            return 6\n        if s[0] == '7':\n            return 7\n        if s[0] == '8':\n            return 8\n        if s[0] == '9':\n            return 9\n        if s[0] == '0':\n            "
    },
    {
        "number": 92,
        "title": "Reverse Linked List II",
        "difficulty": 1,
        "answer": "        if not head:\n            return None\n        if left == right:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        for _ in range(left - 1):\n            prev = prev.next\n        for _ in range(right - left):\n            tmp = prev.next\n            prev.next = tmp.next\n            tmp.next = prev\n        return dummy.next\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n"
    },
    {
        "number": 93,
        "title": "Restore IP Addresses",
        "difficulty": 1,
        "answer": "        def dfs(s, i, j):\n            if i == len(s):\n                return []\n            if i == j:\n                return [s[i:]]\n            res = []\n            for k in range(i, j):\n                if s[i:j]!= s[k:k+1]:\n                    continue\n                res += dfs(s, i+1, k+1)\n            return res\n        return dfs(s, 0, 0)"
    },
    {
        "number": 94,
        "title": "Binary Tree Inorder Traversal",
        "difficulty": 0,
        "answer": "        if not root:\n            return []\n        res = []\n        stack = [root]\n        while stack:\n            node = stack.pop()\n            if node:\n                res.append(node.val)\n                stack.append(node.left)\n                stack.append(node.right)\n        return res"
    },
    {
        "number": 95,
        "title": "Unique Binary Search Trees II",
        "difficulty": 1,
        "answer": "        def generate(start, end):\n            if start > end:\n                return [None]\n            res = []\n            for i in range(start, end + 1):\n                left = generate(start, i - 1)\n                right = generate(i + 1, end)\n                for l in left:\n                    for r in right:\n                        root = TreeNode(i)\n                        root.left = l\n                        root.right = r\n                        res.append(root)\n            return res\n        return generate(1, n)"
    },
    {
        "number": 96,
        "title": "Unique Binary Search Trees",
        "difficulty": 1,
        "answer": "        dp = [0] * (n + 1)\n        dp[0] = 1\n        for i in range(1, n + 1):\n            for j in range(1, n + 1):\n                dp[i] += dp[j - 1] * dp[i - j]\n        return dp[n]"
    },
    {
        "number": 97,
        "title": "Interleaving String",
        "difficulty": 1,
        "answer": "        n, m = len(s1), len(s2)\n        if n + m!= len(s3):\n            return False\n        dp = [[False] * (m + 1) for _ in range(n + 1)]\n        dp[0][0] = True\n        for i in range(1, n + 1):\n            for j in range(1, m + 1):\n                if s1[i - 1] == s2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = dp[i - 1][j] or dp[i][j - 1]\n        return dp[n][m]"
    },
    {
        "number": 98,
        "title": "Validate Binary Search Tree",
        "difficulty": 1,
        "answer": "        def isValidBST(root):\n            if not root:\n                return True\n            if not root.left and not root.right:\n                return True\n            if not root.left or not root.right:\n                return False\n            return isValidBST(root.left) and isValidBST(root.right)"
    },
    {
        "number": 99,
        "title": "Recover Binary Search Tree",
        "difficulty": 1,
        "answer": "        if not root:\n            return None\n        \n        # find the root of the tree\n        root.left, root.right = root.right, root.left\n        \n        # swap the root of the tree\n        root.left, root.right = root.right, root.left\n        \n        # find the root of the tree\n        self.recoverTree(root.left)\n        self.recoverTree(root.right)\n        \n        # return the root of the tree\n        return root\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n"
    },
    {
        "number": 100,
        "title": "Same Tree",
        "difficulty": 0,
        "answer": "        if not p and not q:\n            return True\n        if not p or not q:\n            return False\n        if p.val!= q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)"
    },
    {
        "number": 101,
        "title": "Symmetric Tree",
        "difficulty": 0,
        "answer": "        if not root:\n            return True\n        if not root.left and not root.right:\n            return True\n        if not root.left or not root.right:\n            return False\n        return self.isSymmetric(root.left) and self.isSymmetric(root.right)"
    },
    {
        "number": 102,
        "title": "Binary Tree Level Order Traversal",
        "difficulty": 1,
        "answer": "        if not root:\n            return []\n        res = []\n        queue = [root]\n        while queue:\n            level = []\n            for _ in range(len(queue)):\n                node = queue.pop(0)\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            res.append(level)\n        return res"
    },
    {
        "number": 103,
        "title": "Binary Tree Zigzag Level Order Traversal",
        "difficulty": 1,
        "answer": "        if not root:\n            return []\n        res = []\n        queue = [root]\n        level = []\n        while queue:\n            level.append(queue.pop(0))\n            if level[-1].left:\n                queue.append(level[-1].left)\n            if level[-1].right:\n                queue.append(level[-1].right)\n            if level[-1].val is not None:\n                res.append(level[-1].val)\n        return res[::-1]"
    },
    {
        "number": 104,
        "title": "Maximum Depth of Binary Tree",
        "difficulty": 0,
        "answer": "        if not root:\n            return 0\n        left_depth = self.maxDepth(root.left)\n        right_depth = self.maxDepth(root.right)\n        return max(left_depth, right_depth) + 1"
    },
    {
        "number": 105,
        "title": "Construct Binary Tree from Preorder and Inorder Traversal",
        "difficulty": 1,
        "answer": "        if not preorder:\n            return None\n        if len(preorder) == 1:\n            return TreeNode(preorder[0])\n        root = TreeNode(preorder[0])\n        root.left = self.buildTree(preorder[1:1+len(preorder)], inorder[:len(inorder)])\n        root.right = self.buildTree(preorder[1+len(preorder):], inorder[len(inorder):])\n        return root"
    },
    {
        "number": 106,
        "title": "Construct Binary Tree from Inorder and Postorder Traversal",
        "difficulty": 1,
        "answer": "        if not inorder or not postorder:\n            return None\n        root = TreeNode(postorder[-1])\n        root_index = inorder.index(root.val)\n        root.left = self.buildTree(inorder[:root_index], postorder[:root_index])\n        root.right = self.buildTree(inorder[root_index + 1:], postorder[root_index + 1:])\n        return root"
    },
    {
        "number": 107,
        "title": "Binary Tree Level Order Traversal II",
        "difficulty": 1,
        "answer": "        if not root:\n            return []\n        res = []\n        queue = [root]\n        while queue:\n            level = []\n            for _ in range(len(queue)):\n                node = queue.pop(0)\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            res.append(level)\n        return res[::-1]"
    },
    {
        "number": 108,
        "title": "Convert Sorted Array to Binary Search Tree",
        "difficulty": 0,
        "answer": "        def helper(nums, start, end):\n            if start > end:\n                return None\n            mid = (start + end) // 2\n            root = TreeNode(nums[mid])\n            root.left = helper(nums, start, mid - 1)\n            root.right = helper(nums, mid + 1, end)\n            return root\n        return helper(nums, 0, len(nums) - 1)"
    },
    {
        "number": 109,
        "title": "Convert Sorted List to Binary Search Tree",
        "difficulty": 1,
        "answer": "        if not head:\n            return None\n        if not head.next:\n            return head\n        mid = self.getMid(head)\n        left = self.sortedListToBST(mid.next)\n        right = self.sortedListToBST(mid.next.next)\n        mid.next.next = None\n        return self.buildTree(left, right)"
    },
    {
        "number": 110,
        "title": "Balanced Binary Tree",
        "difficulty": 0,
        "answer": "        def height(root):\n            if not root:\n                return 0\n            left = height(root.left)\n            right = height(root.right)\n            if left == -1 or right == -1 or abs(left - right) > 1:\n                return -1\n            return max(left, right) + 1\n        return height(root)!= -1"
    },
    {
        "number": 111,
        "title": "Minimum Depth of Binary Tree",
        "difficulty": 0,
        "answer": "        if not root:\n            return 0\n        if not root.left and not root.right:\n            return 1\n        if not root.left:\n            return self.minDepth(root.right) + 1\n        if not root.right:\n            return self.minDepth(root.left) + 1\n        return min(self.minDepth(root.left), self.minDepth(root.right)) + 1"
    },
    {
        "number": 112,
        "title": "Path Sum",
        "difficulty": 0,
        "answer": "        if not root:\n            return False\n        if not root.left and not root.right:\n            return root.val == targetSum\n        return self.hasPathSum(root.left, targetSum - root.val) or self.hasPathSum(root.right, targetSum - root.val)"
    },
    {
        "number": 113,
        "title": "Path Sum II",
        "difficulty": 1,
        "answer": "        def dfs(root, path, targetSum):\n            if not root:\n                return []\n            if not root.left and not root.right and targetSum == root.val:\n                path.append(root.val)\n                return path\n            path.append(root.val)\n            path = dfs(root.left, path, targetSum - root.val)\n            path = dfs(root.right, path, targetSum - root.val)\n            path.pop()\n            return path"
    },
    {
        "number": 114,
        "title": "Flatten Binary Tree to Linked List",
        "difficulty": 1,
        "answer": "        if not root:\n            return\n        self.flatten(root.left)\n        self.flatten(root.right)\n        root.left = None\n        root.right = None\n        return root"
    },
    {
        "number": 115,
        "title": "Distinct Subsequences",
        "difficulty": 2,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage"
    },
    {
        "number": 116,
        "title": "Populating Next Right Pointers in Each Node",
        "difficulty": 1,
        "answer": "        self.next = None\n        self.left = None\n        self.right = None\n        self.val = val"
    },
    {
        "number": 117,
        "title": "Populating Next Right Pointers in Each Node II",
        "difficulty": 1,
        "answer": "        self.val = val\n        self.left = left\n        self.right = right\n        self.next = next"
    },
    {
        "number": 118,
        "title": "Pascal\"s Triangle",
        "difficulty": 0,
        "answer": "        if numRows == 0:\n            return []\n        if numRows == 1:\n            return [[1]]\n        res = [[1]]\n        for i in range(2, numRows):\n            res.append([])\n            for j in range(len(res[i-1])):\n                res[i].append(res[i-1][j]+res[i-1][j+1])\n        return res"
    },
    {
        "number": 119,
        "title": "Pascal\"s Triangle II",
        "difficulty": 0,
        "answer": "        if rowIndex == 0:\n            return [1]\n        elif rowIndex == 1:\n            return [1, 1]\n        elif rowIndex == 2:\n            return [1, 1, 1]\n        else:\n            row = [1]\n            for i in range(2, rowIndex + 1):\n                row.append(row[i - 1] + row[i - 2])\n            return row"
    },
    {
        "number": 120,
        "title": "Triangle",
        "difficulty": 1,
        "answer": "        if not triangle:\n            return 0\n        row = len(triangle)\n        dp = [0] * row\n        dp[0] = triangle[0][0]\n        for i in range(1, row):\n            dp[i] = triangle[i][i] + min(dp[i - 1], dp[i - 2])\n        return dp[-1]"
    },
    {
        "number": 121,
        "title": "Best Time to Buy and Sell Stock",
        "difficulty": 0,
        "answer": "        if len(prices) == 0:\n            return 0\n        if len(prices) == 1:\n            return 0\n        if len(prices) == 2:\n            return max(prices[0], prices[1])\n        dp = [0] * len(prices)\n        dp[0] = 0\n        dp[1] = -prices[0]\n        for i in range(2, len(prices)):\n            dp[i] = max(dp[i - 1], dp[i - 2] + prices[i])\n        return dp[-1]"
    },
    {
        "number": 122,
        "title": "Best Time to Buy and Sell Stock II",
        "difficulty": 1,
        "answer": "        # dp[i][j] = max(dp[i-1][j-1], dp[i-1][j], dp[i-1][j-1] + prices[i])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1], dp[i-1][j-1] + prices[i])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1], dp[i-1][j-1] + prices[i])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1], dp[i-1][j-1] + prices[i])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1], dp[i-1][j-1] + prices[i])\n        # dp[i][j] ="
    },
    {
        "number": 123,
        "title": "Best Time to Buy and Sell Stock III",
        "difficulty": 2,
        "answer": "        if len(prices) == 0:\n            return 0\n        if len(prices) == 1:\n            return 0\n        if len(prices) == 2:\n            return max(prices[0], prices[1])\n        dp = [0] * len(prices)\n        dp[0] = 0\n        dp[1] = -prices[0]\n        for i in range(2, len(prices)):\n            dp[i] = max(dp[i - 1], dp[i - 2] + prices[i])\n        return dp[-1]"
    },
    {
        "number": 124,
        "title": "Binary Tree Maximum Path Sum",
        "difficulty": 2,
        "answer": "        if not root:\n            return 0\n        if not root.left and not root.right:\n            return root.val\n        if not root.left:\n            return self.maxPathSum(root.right) + root.val + self.maxPathSum(root.left)\n        if not root.right:\n            return self.maxPathSum(root.left) + root.val + self.maxPathSum(root.right)\n        return self.maxPathSum(root.left) + self.maxPathSum(root.right) + root.val"
    },
    {
        "number": 125,
        "title": "Valid Palindrome",
        "difficulty": 0,
        "answer": "        # convert all uppercase letters into lowercase\n        s = s.lower()\n        # remove all non-alphanumeric characters\n        s = re.sub(r'[^a-zA-Z0-9]', '', s)\n        # convert all non-alphanumeric characters into lowercase\n        s = s.lower()\n        # remove all non-alphanumeric characters\n        s = re.sub(r'[^a-zA-Z0-9]', '', s)\n        # convert all non-alphanumeric characters into lowercase\n        s = s.lower()\n        # remove all non-alphanumeric characters\n        s = re.sub(r'[^a-zA-Z0-9]', '', s)\n        # convert all non-alphanumeric characters into lowercase\n        s = s.lower()\n        # remove all non-alphanumeric characters\n        s = re.sub(r'[^a-zA-Z0-9]', '', s)\n        # convert all non-alphanumeric characters into lower"
    },
    {
        "number": 126,
        "title": "Word Ladder II",
        "difficulty": 2,
        "answer": "        wordList = set(wordList)\n        wordList.add(beginWord)\n        wordList.add(endWord)\n        wordList = list(wordList)\n        wordList.sort()\n        wordList.reverse()\n        wordList = [beginWord] + wordList + [endWord]\n        wordList = list(set(wordList))\n        wordList.sort()\n        wordList.reverse()\n        wordList = [beginWord] + wordList + [endWord]\n        wordList = list(set(wordList))\n        wordList.sort()\n        wordList.reverse()\n        return wordList"
    },
    {
        "number": 127,
        "title": "Word Ladder",
        "difficulty": 2,
        "answer": "        wordList = set(wordList)\n        if endWord not in wordList:\n            return 0\n        if beginWord not in wordList:\n            return 0\n        visited = set()\n        queue = collections.deque([beginWord])\n        visited.add(beginWord)\n        while queue:\n            curr = queue.popleft()\n            for i in range(len(curr)):\n                for j in range(len(wordList)):\n                    if wordList[j] == curr[:i] + wordList[j + 1] + curr[i + 1:]:\n                        if j == len(wordList) - 1:\n                            return len(curr)\n                        visited.add(wordList[j])\n                        queue.append(wordList[j])\n        return 0"
    },
    {
        "number": 128,
        "title": "Longest Consecutive Sequence",
        "difficulty": 1,
        "answer": "        nums = sorted(nums)\n        longest = 0\n        for i in range(len(nums)):\n            if nums[i] == nums[i - 1]:\n                continue\n            if nums[i] - nums[i - 1] == 1:\n                continue\n            if nums[i] - nums[i - 1] == -1:\n                continue\n            if nums[i] - nums[i - 1] == 0:\n                continue\n            longest = max(longest, i + 1)\n        return longest"
    },
    {
        "number": 129,
        "title": "Sum Root to Leaf Numbers",
        "difficulty": 1,
        "answer": "        if not root:\n            return 0\n        sum = 0\n        queue = collections.deque([root])\n        while queue:\n            node = queue.popleft()\n            if node:\n                sum += node.val\n                queue.append(node.left)\n                queue.append(node.right)\n        return sum"
    },
    {
        "number": 130,
        "title": "Surrounded Regions",
        "difficulty": 1,
        "answer": "        m = len(board)\n        n = len(board[0])\n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == \"O\":\n                    board[i][j] = \"X\"\n                    if i > 0:\n                        board[i - 1][j] = \"O\"\n                    if j > 0:\n                        board[i][j - 1] = \"O\"\n                    if i < m - 1:\n                        board[i + 1][j] = \"O\"\n                    if j < n - 1:\n                        board[i][j + 1] = \"O\"\n        return board"
    },
    {
        "number": 131,
        "title": "Palindrome Partitioning",
        "difficulty": 1,
        "answer": "        def isPalindrome(s):\n            return s == s[::-1]\n        def isPalindrome2(s):\n            return s == s[::-1]\n        def isPalindrome3(s):\n            return s == s[::-1]\n        def isPalindrome4(s):\n            return s == s[::-1]\n        def isPalindrome5(s):\n            return s == s[::-1]\n        def isPalindrome6(s):\n            return s == s[::-1]\n        def isPalindrome7(s):\n            return s == s[::-1]\n        def isPalindrome8(s):\n            return s == s[::-1]\n        def isPalindrome9(s):\n            return s == s[::-1]\n        def isPalindrome10(s):\n            return s == s[::-1]\n        def isPalindrome11(s):\n            return s == s[::-1]\n        def isPalindrome12(s"
    },
    {
        "number": 132,
        "title": "Palindrome Partitioning II",
        "difficulty": 2,
        "answer": "        # dp[i][j]\u8868\u793as[:i]\u548cs[j:]\u662f\u5426\u662f\u56de\u6587\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1])\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1])\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1])\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1])\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1])\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1])\n        # dp["
    },
    {
        "number": 133,
        "title": "Clone Graph",
        "difficulty": 1,
        "answer": "        self.val = val\n        self.neighbors = neighbors if neighbors is not None else []"
    },
    {
        "number": 134,
        "title": "Gas Station",
        "difficulty": 1,
        "answer": "        n = len(gas)\n        i = 0\n        while i < n:\n            if i + 1 < n and gas[i] + cost[i + 1] < gas[i + 1]:\n                i += 1\n            else:\n                return i\n        return -1"
    },
    {
        "number": 135,
        "title": "Candy",
        "difficulty": 2,
        "answer": "        n = len(ratings)\n        if n == 0:\n            return 0\n        dp = [1] * n\n        for i in range(n):\n            for j in range(i):\n                if ratings[j] > ratings[i]:\n                    dp[i] = max(dp[i], dp[j] + 1)\n        return dp[-1]"
    },
    {
        "number": 136,
        "title": "Single Number",
        "difficulty": 0,
        "answer": "        # O(n)\n        # O(n)\n        # O(n)\n        # O(1)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    },
    {
        "number": 137,
        "title": "Single Number II",
        "difficulty": 1,
        "answer": "        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    },
    {
        "number": 138,
        "title": "Copy List with Random Pointer",
        "difficulty": 1,
        "answer": "        self.random = random\n        self.next = next\n        self.random = random\n        self.next = next\n        self.random = random\n        self.next = next\n        self.random = random\n        self.next = next\n        self.random = random\n        self.next = next\n        self.random = random\n        self.next = next\n        self.random = random\n        self.next = next\n        self.random = random\n        self.next = next\n        self.random = random\n        self.next = next\n        self.random = random\n        self.next = next\n        self.random = random\n        self.next = next\n        self.random = random\n        self.next = next\n        self.random = random\n        self.next = next\n        self.random = random\n        self.next = next\n        self.random = random\n        self.next = next\n        self.random = random\n        self.next = next\n        self.random = random\n        self.next = next\n        self.random = random\n        self.next ="
    },
    {
        "number": 139,
        "title": "Word Break",
        "difficulty": 1,
        "answer": "        if not s:\n            return False\n        if not wordDict:\n            return False\n        dp = [False] * (len(s) + 1)\n        dp[0] = True\n        for i in range(1, len(s) + 1):\n            for j in range(i):\n                if dp[j] and s[j:i] in wordDict:\n                    dp[i] = True\n        return dp[-1]"
    },
    {
        "number": 140,
        "title": "Word Break II",
        "difficulty": 2,
        "answer": "        def dfs(s, wordDict, path, res):\n            if not s:\n                res.append(path)\n                return\n            for i in range(len(s)):\n                if s[i:i+len(wordDict)] in wordDict:\n                    dfs(s[i+len(wordDict):], wordDict, path+[s[i:i+len(wordDict)]], res)\n        res = []\n        dfs(s, wordDict, [], res)\n        return res"
    },
    {
        "number": 141,
        "title": "Linked List Cycle",
        "difficulty": 0,
        "answer": "        if not head:\n            return False\n        slow = head\n        fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n        return False"
    },
    {
        "number": 142,
        "title": "Linked List Cycle II",
        "difficulty": 1,
        "answer": "        if not head:\n            return None\n        slow = head\n        fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                break\n        if fast == head:\n            return head\n        slow = head\n        while slow!= fast:\n            slow = slow.next\n            fast = fast.next\n        return slow"
    },
    {
        "number": 143,
        "title": "Reorder List",
        "difficulty": 1,
        "answer": "        if not head:\n            return head\n        slow = head\n        fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        prev = None\n        while slow:\n            temp = slow.next\n            slow.next = prev\n            prev = slow\n            slow = temp\n        prev.next = None\n        return head"
    },
    {
        "number": 144,
        "title": "Binary Tree Preorder Traversal",
        "difficulty": 0,
        "answer": "        if not root:\n            return []\n        res = []\n        stack = [root]\n        while stack:\n            node = stack.pop()\n            if node:\n                res.append(node.val)\n                stack.append(node.left)\n                stack.append(node.right)\n        return res"
    },
    {
        "number": 145,
        "title": "Binary Tree Postorder Traversal",
        "difficulty": 0,
        "answer": "        if not root:\n            return []\n        res = []\n        stack = [root]\n        while stack:\n            node = stack.pop()\n            if node:\n                res.append(node.val)\n                stack.append(node.left)\n                stack.append(node.right)\n        return res[::-1]"
    },
    {
        "number": 146,
        "title": "LRU Cache",
        "difficulty": 1,
        "answer": "        pass"
    },
    {
        "number": 147,
        "title": "Insertion Sort List",
        "difficulty": 1,
        "answer": "        if not head:\n            return head\n        curr = head\n        while curr:\n            if curr.val > curr.next.val:\n                curr.next = self.insertionSortList(curr.next)\n            else:\n                curr = curr.next\n        return head"
    },
    {
        "number": 148,
        "title": "Sort List",
        "difficulty": 1,
        "answer": "        if not head:\n            return head\n        slow = head\n        fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        slow.next = None\n        return self.sortList(slow)"
    },
    {
        "number": 149,
        "title": "Max Points on a Line",
        "difficulty": 2,
        "answer": "        def get_angle(p1, p2):\n            return (p2[0] - p1[0]) * (p2[1] - p1[1]) - (p2[1] - p1[1]) * (p2[0] - p1[0])"
    },
    {
        "number": 150,
        "title": "Evaluate Reverse Polish Notation",
        "difficulty": 1,
        "answer": "        stack = []\n        for i in tokens:\n            if i == '+':\n                num1 = stack.pop()\n                num2 = stack.pop()\n                stack.append(num1 + num2)\n            elif i == '-':\n                num1 = stack.pop()\n                num2 = stack.pop()\n                stack.append(num1 - num2)\n            elif i == '*':\n                num1 = stack.pop()\n                num2 = stack.pop()\n                stack.append(num1 * num2)\n            elif i == '/':\n                num1 = stack.pop()\n                num2 = stack.pop()\n                stack.append(num1 / num2)\n            elif i == '+':\n                num1 = stack.pop()\n                num2 = stack.pop()\n                stack.append(num1 + num2)\n            elif i == '-':\n                num1 = stack.pop()\n                num2 = stack.pop()\n                stack.append(num1 - num2)\n            elif i == '"
    },
    {
        "number": 151,
        "title": "Reverse Words in a String",
        "difficulty": 1,
        "answer": "        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    },
    {
        "number": 152,
        "title": "Maximum Product Subarray",
        "difficulty": 1,
        "answer": "        max_product = 0\n        for i in range(len(nums)):\n            for j in range(i, len(nums)):\n                product = nums[i] * nums[j]\n                if product > max_product:\n                    max_product = product\n        return max_product"
    },
    {
        "number": 153,
        "title": "Find Minimum in Rotated Sorted Array",
        "difficulty": 1,
        "answer": "        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return nums[0] if nums[0] < nums[1] else nums[1]\n        if len(nums) == 3:\n            return nums[0] if nums[0] < nums[1] else nums[1] if nums[1] < nums[2] else nums[2]\n        if len(nums) == 4:\n            return nums[0] if nums[0] < nums[1] else nums[1] if nums[1] < nums[2] else nums[2] if nums[2] < nums[3] else nums[3]\n        if len(nums) == 5:\n            return nums[0] if nums[0] < nums[1] else nums[1] if nums[1] < nums[2] else nums[2] if nums[2] < nums[3]"
    },
    {
        "number": 154,
        "title": "Find Minimum in Rotated Sorted Array II",
        "difficulty": 2,
        "answer": "        if not nums:\n            return None\n        left, right = 0, len(nums) - 1\n        while left < right:\n            mid = (left + right) // 2\n            if nums[mid] < nums[mid + 1]:\n                left = mid + 1\n            else:\n                right = mid\n        return nums[left]"
    },
    {
        "number": 155,
        "title": "Min Stack",
        "difficulty": 1,
        "answer": "        pass\n    pass"
    },
    {
        "number": 160,
        "title": "Intersection of Two Linked Lists",
        "difficulty": 0,
        "answer": "        # Definition for singly-linked list.\n        # class ListNode:\n        #     def __init__(self, val=0, next=None):\n        #         self.val = val\n        #         self.next = next\n        # Definition for a binary tree node.\n        # class TreeNode:\n        #     def __init__(self, val=0, left=None, right=None):\n        #         self.val = val\n        #         self.left = left\n        #         self.right = right\n        # Definition for singly-linked list.\n        # class ListNode:\n        #     def __init__(self, val=0, next=None):\n        #         self.val = val\n        #         self.next = next\n        # Definition for a binary tree node.\n        # class TreeNode:\n        #     def __init__(self, val=0, left=None, right=None):\n        #         self.val = val\n        #         self.left = left\n        #         self.right = right\n        # Definition for a linked"
    },
    {
        "number": 162,
        "title": "Find Peak Element",
        "difficulty": 1,
        "answer": "        if len(nums) == 1:\n            return 0\n        if len(nums) == 2:\n            if nums[0] > nums[1]:\n                return 0\n            else:\n                return 1\n        if nums[0] > nums[1]:\n            return 0\n        if nums[-1] > nums[-2]:\n            return len(nums) - 1\n        else:\n            return len(nums) - 2"
    },
    {
        "number": 164,
        "title": "Maximum Gap",
        "difficulty": 2,
        "answer": "        if len(nums) < 2:\n            return 0\n        \n        left, right = 0, len(nums) - 1\n        \n        while left < right:\n            if nums[left] + nums[right] > nums[left + 1] + nums[right + 1]:\n                return nums[left + 1] - nums[left]\n            \n            if nums[left] + nums[right] < nums[left + 1] + nums[right + 1]:\n                left += 1\n            \n            if nums[left] + nums[right] == nums[left + 1] + nums[right + 1]:\n                return 0\n            \n            if nums[left] + nums[right] < nums[left + 1] + nums[right + 1]:\n                right -= 1\n        \n        return 0\n"
    },
    {
        "number": 165,
        "title": "Compare Version Numbers",
        "difficulty": 1,
        "answer": "        version1 = version1.replace('.', '')\n        version2 = version2.replace('.', '')\n        if version1 < version2:\n            return -1\n        elif version1 > version2:\n            return 1\n        else:\n            return 0"
    },
    {
        "number": 166,
        "title": "Fraction to Recurring Decimal",
        "difficulty": 1,
        "answer": "        if numerator == 0:\n            return \"0\"\n        if denominator == 0:\n            return \"0\"\n        if numerator == denominator:\n            return str(numerator)\n        if numerator % denominator == 0:\n            return str(numerator // denominator) + \".\" + str(numerator % denominator)\n        else:\n            return str(numerator // denominator) + \".\" + str(numerator % denominator) + \"(\" + str(numerator // denominator) + \")\""
    },
    {
        "number": 167,
        "title": "Two Sum II - Input Array Is Sorted",
        "difficulty": 1,
        "answer": "        numbers.sort()\n        for i in range(len(numbers)):\n            if numbers[i] == target:\n                return [i, i+1]\n        return []"
    },
    {
        "number": 168,
        "title": "Excel Sheet Column Title",
        "difficulty": 0,
        "answer": "        if columnNumber == 0:\n            return \"A\"\n        elif columnNumber == 1:\n            return \"B\"\n        elif columnNumber == 2:\n            return \"C\"\n        elif columnNumber == 3:\n            return \"D\"\n        elif columnNumber == 4:\n            return \"E\"\n        elif columnNumber == 5:\n            return \"F\"\n        elif columnNumber == 6:\n            return \"G\"\n        elif columnNumber == 7:\n            return \"H\"\n        elif columnNumber == 8:\n            return \"I\"\n        elif columnNumber == 9:\n            return \"J\"\n        elif columnNumber == 10:\n            return \"K\"\n        elif columnNumber == 11:\n            return \"L\"\n        elif columnNumber == 12:\n            return \"M\"\n        elif columnNumber == 13:\n            return \"N\"\n        elif columnNumber == 14:\n            return \"O\"\n        elif columnNumber == 15:\n            return \"P\"\n        elif columnNumber == 16:\n            return"
    },
    {
        "number": 169,
        "title": "Majority Element",
        "difficulty": 0,
        "answer": "        nums_set = set(nums)\n        nums_len = len(nums_set)\n        if nums_len == 1:\n            return nums[0]\n        if nums_len == 2:\n            return nums[0] if nums[0] == nums[1] else nums[1]\n        if nums_len == 3:\n            return nums[0] if nums[0] == nums[1] else nums[1] if nums[1] == nums[2] else nums[2]\n        if nums_len == 4:\n            return nums[0] if nums[0] == nums[1] else nums[1] if nums[1] == nums[2] else nums[2] if nums[2] == nums[3] else nums[3]\n        if nums_len == 5:\n            return nums[0] if nums[0] == nums[1] else nums[1] if nums[1] == nums"
    },
    {
        "number": 171,
        "title": "Excel Sheet Column Number",
        "difficulty": 0,
        "answer": "        columnTitle = columnTitle.replace(' ', '')\n        columnTitle = columnTitle.replace('A', '1')\n        columnTitle = columnTitle.replace('B', '2')\n        columnTitle = columnTitle.replace('C', '3')\n        columnTitle = columnTitle.replace('D', '4')\n        columnTitle = columnTitle.replace('E', '5')\n        columnTitle = columnTitle.replace('F', '6')\n        columnTitle = columnTitle.replace('G', '7')\n        columnTitle = columnTitle.replace('H', '8')\n        columnTitle = columnTitle.replace('I', '9')\n        columnTitle = columnTitle.replace('J', '10')\n        columnTitle = columnTitle.replace('K', '11')\n        columnTitle = columnTitle.replace('L', '12')\n        columnTitle = columnTitle.replace('M', '13')\n        columnTitle = columnTitle.replace('N', '14')\n        columnTitle = columnTitle.replace('O', '15')\n        columnTitle = columnTitle.replace('P', '"
    },
    {
        "number": 172,
        "title": "Factorial Trailing Zeroes",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 3\n        if n == 5:\n            return 4\n        if n == 6:\n            return 5\n        if n == 7:\n            return 6\n        if n == 8:\n            return 7\n        if n == 9:\n            return 8\n        if n == 10:\n            return 9\n        if n == 11:\n            return 10\n        if n == 12:\n            return 11\n        if n == 13:\n            return 12\n        if n == 14:\n            return 13\n        if n == 15:\n            return 14\n        if n == 16:\n            return 15\n        if n == 17:\n            return 16\n        if n == 18:\n            return 17\n        if n == 19:\n            return 18\n        if n == 20:\n            return 19\n        if n == 21:\n            return 20\n        if n == 22:\n            "
    },
    {
        "number": 173,
        "title": "Binary Search Tree Iterator",
        "difficulty": 1,
        "answer": "        pass\n    def next(self) -> int:\n        \"\"\"\n        Implement the BSTIterator class that represents an iterator over the in-order traversal of a binary search tree (BST):\n            BSTIterator(TreeNode root) Initializes an object of the BSTIterator class. The root of the BST is given as part of the constructor. The pointer should be initialized to a non-existent number smaller than any element in the BST.\n            boolean hasNext() Returns true if there exists a number in the traversal to the right of the pointer, otherwise returns false.\n            int next() Moves the pointer to the right, then returns the number at the pointer.\n        Notice that by initializing the pointer to a non-existent smallest number, the first call to next() will return the smallest element in the BST.\n        You may assume that next() calls will always be valid. That is, there will be at least a next number in the in-order traversal when next() is called.\n        Example 1:\n        Input\n        [\"BSTIterator\", \"next\", \"next\", \"hasNext\", \"next\", \"hasNext\", \"next\", \""
    },
    {
        "number": 174,
        "title": "Dungeon Game",
        "difficulty": 2,
        "answer": "        m, n = len(dungeon), len(dungeon[0])\n        dp = [[-1] * n for _ in range(m)]\n        dp[0][0] = dungeon[0][0]\n        for i in range(1, m):\n            dp[i][0] = dungeon[i][0] + min(dp[i - 1][1], dp[i - 1][2])\n        for j in range(1, n):\n            dp[0][j] = dungeon[0][j] + min(dp[0][j - 1], dp[0][j - 2])\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = dungeon[i][j] + min(dp[i - 1][j], dp[i - 1][j - 1])\n        return dp[m - 1][n - 1]"
    },
    {
        "number": 179,
        "title": "Largest Number",
        "difficulty": 1,
        "answer": "        nums.sort()\n        return str(nums[-1]) + str(nums[-2])"
    },
    {
        "number": 187,
        "title": "Repeated DNA Sequences",
        "difficulty": 1,
        "answer": "        dna = dict()\n        for i in range(len(s)):\n            if s[i] not in dna:\n                dna[s[i]] = 1\n            else:\n                dna[s[i]] += 1\n        res = []\n        for i in dna:\n            if dna[i] > 1:\n                res.append(i)\n        return res"
    },
    {
        "number": 188,
        "title": "Best Time to Buy and Sell Stock IV",
        "difficulty": 2,
        "answer": "        # Time: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1"
    },
    {
        "number": 189,
        "title": "Rotate Array",
        "difficulty": 1,
        "answer": "        k = k % len(nums)\n        nums[:] = nums[-k:] + nums[:-k]\n        nums[:] = nums[::-1]\n        return nums"
    },
    {
        "number": 190,
        "title": "Reverse Bits",
        "difficulty": 0,
        "answer": "        res = 0\n        while n:\n            res = (res << 1) + n % 2\n            n = n >> 1\n        return res"
    },
    {
        "number": 191,
        "title": "Number of 1 Bits",
        "difficulty": 0,
        "answer": "        count = 0\n        while n:\n            count += n & 1\n            n >>= 1\n        return count"
    },
    {
        "number": 198,
        "title": "House Robber",
        "difficulty": 1,
        "answer": "        if len(nums) == 1:\n            return nums[0]\n        dp = [0] * len(nums)\n        dp[0] = nums[0]\n        dp[1] = max(nums[0], nums[1])\n        for i in range(2, len(nums)):\n            dp[i] = max(dp[i - 1], dp[i - 2] + nums[i])\n        return dp[-1]"
    },
    {
        "number": 199,
        "title": "Binary Tree Right Side View",
        "difficulty": 1,
        "answer": "        if not root:\n            return []\n        res = []\n        queue = collections.deque([root])\n        while queue:\n            curr = queue.popleft()\n            res.append(curr.val)\n            if curr.left:\n                queue.append(curr.left)\n            if curr.right:\n                queue.append(curr.right)\n        return res[::-1]"
    },
    {
        "number": 200,
        "title": "Number of Islands",
        "difficulty": 1,
        "answer": "        if not grid:\n            return 0\n        m = len(grid)\n        n = len(grid[0])\n        visited = [[0 for _ in range(n)] for _ in range(m)]\n        count = 0\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == \"1\":\n                    self.dfs(grid, i, j, visited)\n                    count += 1\n        return count"
    },
    {
        "number": 201,
        "title": "Bitwise AND of Numbers Range",
        "difficulty": 1,
        "answer": "        if left == right:\n            return left\n        if left == 0:\n            return right\n        if right == 0:\n            return left\n        if left > right:\n            return 0\n        if left < right:\n            return left * right\n        return left * right"
    },
    {
        "number": 202,
        "title": "Happy Number",
        "difficulty": 0,
        "answer": "        if n == 1:\n            return True\n        if n == 2:\n            return True\n        if n == 3:\n            return False\n        if n == 4:\n            return True\n        if n == 5:\n            return False\n        if n == 6:\n            return True\n        if n == 7:\n            return False\n        if n == 8:\n            return True\n        if n == 9:\n            return False\n        if n == 10:\n            return True\n        if n == 11:\n            return False\n        if n == 12:\n            return True\n        if n == 13:\n            return False\n        if n == 14:\n            return True\n        if n == 15:\n            return False\n        if n == 16:\n            return True\n        if n == 17:\n            return False\n        if n == 18:\n            return True\n        if n == 19:\n            return False\n        if n == 20:\n            return True\n        if n == 21:\n            return False\n        if n == 22:\n            return True\n        if n == 23:\n            "
    },
    {
        "number": 203,
        "title": "Remove Linked List Elements",
        "difficulty": 0,
        "answer": "        if not head:\n            return head\n        slow = head\n        fast = head\n        while fast and fast.next:\n            if fast.next.val == val:\n                fast.next = fast.next.next\n            else:\n                fast = fast.next\n        return head"
    },
    {
        "number": 204,
        "title": "Count Primes",
        "difficulty": 1,
        "answer": "        if n < 2:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n % 2 == 0:\n            return 0\n        for i in range(3, n, 2):\n            if self.is_prime(i):\n                return 0\n        return 1"
    },
    {
        "number": 205,
        "title": "Isomorphic Strings",
        "difficulty": 0,
        "answer": "        if len(s)!= len(t):\n            return False\n        dic = {}\n        for i in range(len(s)):\n            if s[i] in dic:\n                if dic[s[i]]!= t[i]:\n                    return False\n            else:\n                dic[s[i]] = t[i]\n        return True"
    },
    {
        "number": 206,
        "title": "Reverse Linked List",
        "difficulty": 0,
        "answer": "        if not head:\n            return None\n        \n        prev = None\n        cur = head\n        while cur:\n            next = cur.next\n            cur.next = prev\n            prev = cur\n            cur = next\n        return prev\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        "
    },
    {
        "number": 207,
        "title": "Course Schedule",
        "difficulty": 1,
        "answer": "        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n"
    },
    {
        "number": 208,
        "title": "Implement Trie (Prefix Tree)",
        "difficulty": 1,
        "answer": "        pass\n    def delete(self, word: str) -> None:\n    def startsWith(self, prefix: str) -> bool:\n        \"\"\"\n        A trie (pronounced as \"try\") or prefix tree is a tree data structure used to efficiently store and retrieve keys in a dataset of strings. There are various applications of this data structure, such as autocomplete and spellchecker.\n        Implement the Trie class:\n            Trie() Initializes the trie object.\n            void delete(String word) Deletes the string word from the trie.\n            boolean startsWith(String prefix) Returns true if there is a previously inserted string word that has the prefix prefix, and false otherwise.\n        Example 1:\n        Input\n        [\"Trie\", \"insert\", \"search\", \"search\", \"startsWith\", \"insert\", \"search\"]\n        [[], [\"apple\"], [\"apple\"], [\"app\"], [\"app\"], [\"app\"], [\"app\"]]\n        Output\n        [null, null, true, false, true, null, true]\n        Explanation\n        Trie trie = new Trie();\n        "
    },
    {
        "number": 209,
        "title": "Minimum Size Subarray Sum",
        "difficulty": 1,
        "answer": "        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    },
    {
        "number": 210,
        "title": "Course Schedule II",
        "difficulty": 1,
        "answer": "        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n"
    },
    {
        "number": 211,
        "title": "Design Add and Search Words Data Structure",
        "difficulty": 1,
        "answer": "        pass"
    },
    {
        "number": 212,
        "title": "Word Search II",
        "difficulty": 2,
        "answer": "        def dfs(board, word, i, j):\n            if len(word) == len(board[0]):\n                return True\n            if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]):\n                return False\n            if board[i][j]!= word[len(word) - 1]:\n                return False\n            board[i][j] = '#'\n            if dfs(board, word, i + 1, j):\n                return True\n            board[i][j] = word[len(word) - 1]\n            if dfs(board, word, i, j + 1):\n                return True\n            board[i][j] = word[len(word) - 1]\n            return False\n        \n        def dfs(board, word, i, j):\n            if len(word) == len(board[0]):\n                return True\n            if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]):\n                return False\n            if board[i"
    },
    {
        "number": 213,
        "title": "House Robber II",
        "difficulty": 1,
        "answer": "        if len(nums) == 1:\n            return nums[0]\n        dp = [0] * len(nums)\n        dp[0] = nums[0]\n        dp[1] = max(nums[0], nums[1])\n        for i in range(2, len(nums)):\n            dp[i] = max(dp[i - 1], dp[i - 2] + nums[i])\n        return dp[-1]"
    },
    {
        "number": 214,
        "title": "Shortest Palindrome",
        "difficulty": 2,
        "answer": "        if len(s) == 1:\n            return s\n        if len(s) == 2:\n            return s[0] + s[1]\n        if len(s) == 3:\n            return s[0] + s[1] + s[2]\n        if len(s) == 4:\n            return s[0] + s[1] + s[2] + s[3]\n        if len(s) == 5:\n            return s[0] + s[1] + s[2] + s[3] + s[4]\n        if len(s) == 6:\n            return s[0] + s[1] + s[2] + s[3] + s[4] + s[5]\n        if len(s) == 7:\n            return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6]\n        if len(s) == 8:\n            return s[0] + s[1] + s[2] + s["
    },
    {
        "number": 215,
        "title": "Kth Largest Element in an Array",
        "difficulty": 1,
        "answer": "        nums.sort()\n        return nums[-k]"
    },
    {
        "number": 216,
        "title": "Combination Sum III",
        "difficulty": 1,
        "answer": "        def backtrack(combination, k, n):\n            if k == 0:\n                res.append(list(combination))\n                return\n            for i in range(n, 10):\n                if i not in combination:\n                    combination.append(i)\n                    backtrack(combination, k - 1, i)\n                    combination.pop()\n        res = []\n        backtrack([], k, n)\n        return res"
    },
    {
        "number": 217,
        "title": "Contains Duplicate",
        "difficulty": 0,
        "answer": "        nums_set = set(nums)\n        return len(nums_set)!= len(nums)"
    },
    {
        "number": 218,
        "title": "The Skyline Problem",
        "difficulty": 2,
        "answer": "        # build a list of buildings\n        buildings = sorted(buildings, key=lambda x: x[0])\n        # build a list of buildings\n        buildings = sorted(buildings, key=lambda x: x[1])\n        # build a list of buildings\n        buildings = sorted(buildings, key=lambda x: x[2])\n        # build a list of buildings\n        buildings = sorted(buildings, key=lambda x: x[3])\n        # build a list of buildings\n        buildings = sorted(buildings, key=lambda x: x[4])\n        # build a list of buildings\n        buildings = sorted(buildings, key=lambda x: x[5])\n        # build a list of buildings\n        buildings = sorted(buildings, key=lambda x: x[6])\n        # build a list of buildings\n        buildings = sorted(buildings, key=lambda x: x[7])\n        # build a list of buildings\n        buildings = sorted(buildings, key=lambda x: x[8])\n        # build a list of buildings"
    },
    {
        "number": 219,
        "title": "Contains Duplicate II",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        if n < 2:\n            return False\n        for i in range(n):\n            for j in range(i + 1, n):\n                if abs(nums[i] - nums[j]) <= k:\n                    return True\n        return False"
    },
    {
        "number": 220,
        "title": "Contains Duplicate III",
        "difficulty": 2,
        "answer": "        # Time: O(n^2)\n        # Space: O(n)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        #"
    },
    {
        "number": 221,
        "title": "Maximal Square",
        "difficulty": 1,
        "answer": "        if not matrix:\n            return 0\n        m, n = len(matrix), len(matrix[0])\n        dp = [[0] * n for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == \"1\":\n                    dp[i][j] = 1 + min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1])\n        return max(dp[-1])"
    },
    {
        "number": 222,
        "title": "Count Complete Tree Nodes",
        "difficulty": 1,
        "answer": "        if not root:\n            return 0\n        self.count = 0\n        self.dfs(root)\n        return self.count"
    },
    {
        "number": 223,
        "title": "Rectangle Area",
        "difficulty": 1,
        "answer": "        return (ax2 - ax1) * (ay2 - ay1) - (bx2 - bx1) * (by2 - by1)"
    },
    {
        "number": 224,
        "title": "Basic Calculator",
        "difficulty": 2,
        "answer": "        stack = []\n        for c in s:\n            if c.isdigit():\n                stack.append(int(c))\n            else:\n                if c == '+':\n                    num1 = stack.pop()\n                    num2 = stack.pop()\n                    stack.append(num1 + num2)\n                elif c == '-':\n                    num1 = stack.pop()\n                    num2 = stack.pop()\n                    stack.append(num1 - num2)\n                elif c == '*':\n                    num1 = stack.pop()\n                    num2 = stack.pop()\n                    stack.append(num1 * num2)\n                elif c == '/':\n                    num1 = stack.pop()\n                    num2 = stack.pop()\n                    stack.append(num1 / num2)\n        return stack[0]"
    },
    {
        "number": 225,
        "title": "Implement Stack using Queues",
        "difficulty": 0,
        "answer": "        pass"
    },
    {
        "number": 226,
        "title": "Invert Binary Tree",
        "difficulty": 0,
        "answer": "        if not root:\n            return None\n        root.left, root.right = self.invertTree(root.right), self.invertTree(root.left)\n        return root"
    },
    {
        "number": 227,
        "title": "Basic Calculator II",
        "difficulty": 1,
        "answer": "        stack = []\n        for c in s:\n            if c.isdigit():\n                stack.append(int(c))\n            else:\n                if c == '+':\n                    a = stack.pop()\n                    b = stack.pop()\n                    stack.append(a + b)\n                elif c == '-':\n                    a = stack.pop()\n                    b = stack.pop()\n                    stack.append(a - b)\n                elif c == '*':\n                    a = stack.pop()\n                    b = stack.pop()\n                    stack.append(a * b)\n                elif c == '/':\n                    a = stack.pop()\n                    b = stack.pop()\n                    stack.append(a / b)\n        return stack[0]"
    },
    {
        "number": 228,
        "title": "Summary Ranges",
        "difficulty": 0,
        "answer": "        if not nums:\n            return []\n        l, r = 0, len(nums) - 1\n        res = []\n        while l < r:\n            if nums[l] + 1 == nums[r]:\n                res.append(str(nums[l]))\n                l += 1\n                r -= 1\n            elif nums[l] + 1 < nums[r]:\n                l += 1\n            else:\n                r -= 1\n        return res"
    },
    {
        "number": 229,
        "title": "Majority Element II",
        "difficulty": 1,
        "answer": "        nums.sort()\n        return [nums[i] for i in range(len(nums)) if nums[i] == nums[i // 3]]"
    },
    {
        "number": 230,
        "title": "Kth Smallest Element in a BST",
        "difficulty": 1,
        "answer": "        if not root:\n            return None\n        if not root.left and not root.right:\n            return root.val\n        if not root.left:\n            return self.kthSmallest(root.right, k)\n        if not root.right:\n            return self.kthSmallest(root.left, k)\n        return self.kthSmallest(root.left, k) + self.kthSmallest(root.right, k)"
    },
    {
        "number": 231,
        "title": "Power of Two",
        "difficulty": 0,
        "answer": "        if n == 0:\n            return False\n        if n == 1:\n            return True\n        if n == 2:\n            return False\n        if n == 3:\n            return True\n        if n == 4:\n            return False\n        if n == 5:\n            return True\n        if n == 6:\n            return False\n        if n == 7:\n            return True\n        if n == 8:\n            return False\n        if n == 9:\n            return True\n        if n == 10:\n            return False\n        if n == 11:\n            return True\n        if n == 12:\n            return False\n        if n == 13:\n            return True\n        if n == 14:\n            return False\n        if n == 15:\n            return True\n        if n == 16:\n            return False\n        if n == 17:\n            return True\n        if n == 18:\n            return False\n        if n == 19:\n            return True\n        if n == 20:\n            return False\n        if n == 21:\n            return True\n        if n == 22:\n            "
    },
    {
        "number": 232,
        "title": "Implement Queue using Stacks",
        "difficulty": 0,
        "answer": "        pass\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.stack1 = []\n        self.stack2 = []\n        "
    },
    {
        "number": 233,
        "title": "Number of Digit One",
        "difficulty": 2,
        "answer": "        count = 0\n        for i in range(1, n + 1):\n            if i % 10 == 1:\n                count += 1\n        return count"
    },
    {
        "number": 234,
        "title": "Palindrome Linked List",
        "difficulty": 0,
        "answer": "        # Definition for singly-linked list.\n        # class ListNode:\n        #     def __init__(self, val=0, next=None):\n        #         self.val = val\n        #         self.next = next\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n"
    },
    {
        "number": 235,
        "title": "Lowest Common Ancestor of a Binary Search Tree",
        "difficulty": 1,
        "answer": "        if not root:\n            return None\n        if root == p or root == q:\n            return root\n        left = self.lowestCommonAncestor(root.left, p, q)\n        right = self.lowestCommonAncestor(root.right, p, q)\n        if left and right:\n            return root\n        return left or right"
    },
    {
        "number": 236,
        "title": "Lowest Common Ancestor of a Binary Tree",
        "difficulty": 1,
        "answer": "        if not root:\n            return None\n        if root == p or root == q:\n            return root\n        left = self.lowestCommonAncestor(root.left, p, q)\n        right = self.lowestCommonAncestor(root.right, p, q)\n        if left and right:\n            return root\n        return left or right"
    },
    {
        "number": 237,
        "title": "Delete Node in a Linked List",
        "difficulty": 1,
        "answer": "        # Definition for singly-linked list.\n        # class ListNode:\n        #     def __init__(self, val=0, next=None):\n        #         self.val = val\n        #         self.next = next\n        # Definition for a binary tree node.\n        # class TreeNode:\n        #     def __init__(self, val=0, left=None, right=None):\n        #         self.val = val\n        #         self.left = left\n        #         self.right = right\n        class Solution:\n            def deleteNode(self, node):\n                \"\"\"\n                :type node: ListNode\n                :rtype: void Do not return anything, modify node in-place instead.\n                There is a singly-linked list head and we want to delete a node node in it.\n                You are given the node to be deleted node. You will not be given access to the first node of head.\n                All the values of the linked list are unique, and it is guaranteed that the given node node is not the last node in the linked list.\n                Delete the given node"
    },
    {
        "number": 238,
        "title": "Product of Array Except Self",
        "difficulty": 1,
        "answer": "        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    },
    {
        "number": 239,
        "title": "Sliding Window Maximum",
        "difficulty": 2,
        "answer": "        if not nums:\n            return []\n        \n        # sliding window\n        # sliding window\n        # sliding window\n        # sliding window\n        # sliding window\n        # sliding window\n        # sliding window\n        # sliding window\n        # sliding window\n        # sliding window\n        # sliding window\n        # sliding window\n        # sliding window\n        # sliding window\n        # sliding window\n        # sliding window\n        # sliding window\n        # sliding window\n        # sliding window\n        # sliding window\n        # sliding window\n        # sliding window\n        # sliding window\n        # sliding window\n        # sliding window\n        # sliding window\n        # sliding window\n        # sliding window\n        # sliding window\n        # sliding window\n        # sliding window\n        # sliding window\n        # sliding window\n        # sliding window\n        # sliding window\n        # sliding window\n        # sliding window\n        # sliding window\n        # sliding window\n        # sliding window\n        # sliding window\n        # sliding window\n        # sliding window\n        # sliding window\n        # sliding window\n        # sliding window\n        # sliding window\n        #"
    },
    {
        "number": 240,
        "title": "Search a 2D Matrix II",
        "difficulty": 1,
        "answer": "        if not matrix or not matrix[0]:\n            return False\n        m, n = len(matrix), len(matrix[0])\n        i, j = 0, m - 1\n        while i < m and j >= 0:\n            if matrix[i][j] == target:\n                return True\n            elif matrix[i][j] < target:\n                i += 1\n            else:\n                j -= 1\n        return False"
    },
    {
        "number": 241,
        "title": "Different Ways to Add Parentheses",
        "difficulty": 1,
        "answer": "        def dfs(expression, i, j, res):\n            if i == j:\n                res.append(int(expression[i]))\n                return\n            if expression[i] == '-':\n                dfs(expression, i + 1, j, res)\n            elif expression[i] == '+':\n                dfs(expression, i + 1, j + 1, res)\n            else:\n                dfs(expression, i + 1, j, res)\n                dfs(expression, i, j + 1, res)\n        res = []\n        dfs(expression, 0, 0, res)\n        return res"
    },
    {
        "number": 242,
        "title": "Valid Anagram",
        "difficulty": 0,
        "answer": "        if len(s)!= len(t):\n            return False\n        dic = {}\n        for i in range(len(s)):\n            if s[i] not in dic:\n                dic[s[i]] = 1\n            else:\n                dic[s[i]] += 1\n        for i in range(len(t)):\n            if t[i] not in dic:\n                return False\n            else:\n                dic[t[i]] -= 1\n                if dic[t[i]] < 0:\n                    return False\n        return True"
    },
    {
        "number": 257,
        "title": "Binary Tree Paths",
        "difficulty": 0,
        "answer": "        if not root:\n            return []\n        res = []\n        self.dfs(root, res, [])\n        return res"
    },
    {
        "number": 258,
        "title": "Add Digits",
        "difficulty": 0,
        "answer": "        res = 0\n        while num:\n            res += num % 10\n            num //= 10\n        return res"
    },
    {
        "number": 260,
        "title": "Single Number III",
        "difficulty": 1,
        "answer": "        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    },
    {
        "number": 263,
        "title": "Ugly Number",
        "difficulty": 0,
        "answer": "        if n == 1:\n            return False\n        if n == 2:\n            return True\n        if n == 3:\n            return False\n        if n == 5:\n            return True\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
        "number": 264,
        "title": "Ugly Number II",
        "difficulty": 1,
        "answer": "        ugly_numbers = [1]\n        for i in range(2, n):\n            ugly_numbers.append(ugly_numbers[i - 1] * 2)\n            ugly_numbers.append(ugly_numbers[i - 1] * 3)\n            ugly_numbers.append(ugly_numbers[i - 1] * 5)\n        return ugly_numbers[n]"
    },
    {
        "number": 268,
        "title": "Missing Number",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        for i in range(n):\n            if nums[i] not in nums[:i]:\n                return nums[i]\n        return 0"
    },
    {
        "number": 273,
        "title": "Integer to English Words",
        "difficulty": 2,
        "answer": "        if num == 0:\n            return \"Zero\"\n        if num == 1:\n            return \"One\"\n        if num == 2:\n            return \"Two\"\n        if num == 3:\n            return \"Three\"\n        if num == 4:\n            return \"Four\"\n        if num == 5:\n            return \"Five\"\n        if num == 6:\n            return \"Six\"\n        if num == 7:\n            return \"Seven\"\n        if num == 8:\n            return \"Eight\"\n        if num == 9:\n            return \"Nine\"\n        if num == 10:\n            return \"Ten\"\n        if num == 11:\n            return \"Eleven\"\n        if num == 12:\n            return \"Twelve\"\n        if num == 13:\n            return \"Thirteen\"\n        if num == 14:\n            return \"Fourteen\"\n        if num == 15:\n            return \"Fifteen\"\n        if num == 16:\n            return \"Sixteen\"\n        if num == 17:\n            return \"Seventeen\"\n        if num == 18:\n            "
    },
    {
        "number": 274,
        "title": "H-Index",
        "difficulty": 1,
        "answer": "        n = len(citations)\n        if n == 0:\n            return 0\n        citations.sort()\n        h = 0\n        for i in range(n):\n            if citations[i] >= h:\n                h = h + 1\n            else:\n                h = h - 1\n        return h"
    },
    {
        "number": 275,
        "title": "H-Index II",
        "difficulty": 1,
        "answer": "        citations.sort()\n        n = len(citations)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1 if citations[0] < citations[1] else 0\n        if n == 3:\n            return 1 if citations[0] < citations[2] < citations[1] < citations[2] else 0\n        for i in range(n):\n            if citations[i] >= n - i:\n                return n - i\n        return 0"
    },
    {
        "number": 278,
        "title": "First Bad Version",
        "difficulty": 0,
        "answer": "        left, right = 1, n\n        while left < right:\n            mid = left + (right - left) // 2\n            if isBadVersion(mid):\n                right = mid\n            else:\n                left = mid + 1\n        return left"
    },
    {
        "number": 279,
        "title": "Perfect Squares",
        "difficulty": 1,
        "answer": "        dp = [0] * (n + 1)\n        dp[0] = 1\n        for i in range(1, n + 1):\n            for j in range(i, n + 1):\n                if i ** 2 + j ** 2 <= n:\n                    dp[i] += dp[j]\n        return dp[n]"
    },
    {
        "number": 282,
        "title": "Expression Add Operators",
        "difficulty": 2,
        "answer": "        res = []\n        def backtrack(num, target, index):\n            if index == len(num):\n                res.append(str(target))\n                return\n            for i in range(index, len(num)):\n                if num[index] == '0' and num[i] == '0':\n                    continue\n                if num[index] == '1' and num[i] == '1':\n                    backtrack(num, target + 1, i + 1)\n                if num[index] == '2' and num[i] == '2':\n                    backtrack(num, target + 1, i + 1)\n                if num[index] == '3' and num[i] == '3':\n                    backtrack(num, target + 1, i + 1)\n                if num[index] == '4' and num[i] == '4':\n                    backtrack(num, target + 1, i + 1)\n                if num[index] == '5' and num[i] == '5':\n                    backtrack(num, target + 1, i + 1)"
    },
    {
        "number": 283,
        "title": "Move Zeroes",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        for i in range(n):\n            if nums[i]!= 0:\n                nums[i], nums[n-i-1] = nums[n-i-1], nums[i]\n        return nums"
    },
    {
        "number": 284,
        "title": "Peeking Iterator",
        "difficulty": 1,
        "answer": "        pass"
    },
    {
        "number": 287,
        "title": "Find the Duplicate Number",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        for i in range(n):\n            for j in range(i+1, n):\n                if nums[i] == nums[j]:\n                    return nums[i]\n        return -1"
    },
    {
        "number": 289,
        "title": "Game of Life",
        "difficulty": 1,
        "answer": "        m = len(board)\n        n = len(board[0])\n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == 1:\n                    for k in range(8):\n                        if i + k < m and j + k < n:\n                            if board[i + k][j + k] == 1:\n                                board[i + k][j + k] = 0\n                            else:\n                                board[i + k][j + k] = 1\n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == 0:\n                    for k in range(8):\n                        if i + k < m and j + k < n:\n                            if board[i + k][j + k] == 1:\n                                board[i + k][j + k] = 0\n                            else:\n                                board[i + k][j + k] = 1\n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == 1"
    },
    {
        "number": 290,
        "title": "Word Pattern",
        "difficulty": 0,
        "answer": "        if len(pattern)!= len(s):\n            return False\n        dic = {}\n        for i in range(len(pattern)):\n            if pattern[i] not in dic:\n                dic[pattern[i]] = s[i]\n            else:\n                if dic[pattern[i]]!= s[i]:\n                    return False\n        return True"
    },
    {
        "number": 292,
        "title": "Nim Game",
        "difficulty": 0,
        "answer": "        if n == 1:\n            return True\n        if n == 2:\n            return False\n        if n == 3:\n            return True\n        if n == 4:\n            return False"
    },
    {
        "number": 295,
        "title": "Find Median from Data Stream",
        "difficulty": 2,
        "answer": "        pass"
    },
    {
        "number": 297,
        "title": "Serialize and Deserialize Binary Tree",
        "difficulty": 2,
        "answer": "        def serialize(root):\n            if not root:\n                return []\n            res = []\n            res.append(root.val)\n            res.extend(serialize(root.left))\n            res.extend(serialize(root.right))\n            return res\n        return serialize(root)\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        "
    },
    {
        "number": 299,
        "title": "Bulls and Cows",
        "difficulty": 1,
        "answer": "        bulls = 0\n        cows = 0\n        for i in range(len(guess)):\n            if guess[i] == secret[i]:\n                bulls += 1\n            else:\n                cows += 1\n        return str(bulls) + \"A\" + str(cows) + \"B\""
    },
    {
        "number": 300,
        "title": "Longest Increasing Subsequence",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        dp = [1] * n\n        for i in range(1, n):\n            for j in range(i):\n                if nums[i] > nums[j]:\n                    dp[i] = max(dp[i], dp[j] + 1)\n        return max(dp)"
    },
    {
        "number": 301,
        "title": "Remove Invalid Parentheses",
        "difficulty": 2,
        "answer": "        stack = []\n        for i in s:\n            if i == '(':\n                stack.append(i)\n            else:\n                if len(stack) == 0:\n                    stack.append(i)\n                else:\n                    stack.pop()\n        return stack"
    },
    {
        "number": 303,
        "title": "Range Sum Query - Immutable",
        "difficulty": 0,
        "answer": "        pass"
    },
    {
        "number": 304,
        "title": "Range Sum Query 2D - Immutable",
        "difficulty": 1,
        "answer": "        pass"
    },
    {
        "number": 306,
        "title": "Additive Number",
        "difficulty": 1,
        "answer": "        if len(num) < 3:\n            return False\n        for i in range(len(num) - 2):\n            if num[i] + num[i + 1] + num[i + 2]!= num[i + 2]:\n                return False\n        return True"
    },
    {
        "number": 307,
        "title": "Range Sum Query - Mutable",
        "difficulty": 1,
        "answer": "        pass"
    },
    {
        "number": 309,
        "title": "Best Time to Buy and Sell Stock with Cooldown",
        "difficulty": 1,
        "answer": "        if len(prices) == 0:\n            return 0\n        if len(prices) == 1:\n            return 0 if prices[0] > 0 else -prices[0]\n        dp = [0] * len(prices)\n        dp[0] = -prices[0]\n        for i in range(1, len(prices)):\n            dp[i] = max(dp[i - 1], dp[i - 1] + prices[i])\n        return dp[-1]"
    },
    {
        "number": 310,
        "title": "Minimum Height Trees",
        "difficulty": 1,
        "answer": "        if n == 1:\n            return [0]\n        if n == 2:\n            return [0, 1]\n        if n == 3:\n            return [0, 1, 2]\n        if n == 4:\n            return [0, 1, 2, 3]\n        if n == 5:\n            return [0, 1, 2, 3, 4]\n        if n == 6:\n            return [0, 1, 2, 3, 4, 5]\n        if n == 7:\n            return [0, 1, 2, 3, 4, 5, 6]\n        if n == 8:\n            return [0, 1, 2, 3, 4, 5, 6, 7]\n        if n == 9:\n            return [0, 1, 2, 3, 4, 5, 6, 7, 8]\n        if n == 10:\n            return [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n        if n == 11:\n            return [0, 1, 2, 3, 4, 5, 6, 7, 8, 9,"
    },
    {
        "number": 312,
        "title": "Burst Balloons",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        dp = [0] * n\n        dp[0] = nums[0]\n        dp[1] = nums[0] * nums[1]\n        for i in range(2, n):\n            dp[i] = nums[i] * nums[i - 1] * nums[i + 1]\n        return dp[-1]"
    },
    {
        "number": 313,
        "title": "Super Ugly Number",
        "difficulty": 1,
        "answer": "        dp = [1] * n\n        for i in range(1, n):\n            for p in primes:\n                if p > dp[i]:\n                    dp[i] = dp[i] * p\n        return dp[-1]"
    },
    {
        "number": 315,
        "title": "Count of Smaller Numbers After Self",
        "difficulty": 2,
        "answer": "        counts = [0] * len(nums)\n        for i in range(len(nums)):\n            counts[nums[i]] += 1\n        return counts"
    },
    {
        "number": 316,
        "title": "Remove Duplicate Letters",
        "difficulty": 1,
        "answer": "        res = []\n        for i in range(len(s)):\n            if s[i] not in res:\n                res.append(s[i])\n            else:\n                res.remove(s[i])\n        return ''.join(res)"
    },
    {
        "number": 318,
        "title": "Maximum Product of Word Lengths",
        "difficulty": 1,
        "answer": "        # dp[i][j] = max(dp[i-1][j-1], dp[i-1][j], dp[i][j-1]) + 1\n        # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n        # dp[i][j] = max(dp[i-1][j-1], dp[i-1][j], dp[i][j-1]) + 1\n        # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n        # dp[i][j] = max(dp[i-1][j-1], dp[i-1][j], dp[i][j-1]) + 1\n        # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n        # dp[i][j] = max(dp[i-1][j-1], dp["
    },
    {
        "number": 319,
        "title": "Bulb Switcher",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return 1\n        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 1\n        if n == 4:\n            return 1\n        if n == 5:\n            return 1\n        if n == 6:\n            return 1\n        if n == 7:\n            return 1\n        if n == 8:\n            return 1\n        if n == 9:\n            return 1\n        if n == 10:\n            return 1\n        if n == 11:\n            return 1\n        if n == 12:\n            return 1\n        if n == 13:\n            return 1\n        if n == 14:\n            return 1\n        if n == 15:\n            return 1\n        if n == 16:\n            return 1\n        if n == 17:\n            return 1\n        if n == 18:\n            return 1\n        if n == 19:\n            return 1\n        if n == 20:\n            return 1\n        if n == 21:\n            return 1\n        if n == 22:\n            "
    },
    {
        "number": 321,
        "title": "Create Maximum Number",
        "difficulty": 2,
        "answer": "        # Time: O(m + n)\n        # Space: O(m + n)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n"
    },
    {
        "number": 322,
        "title": "Coin Change",
        "difficulty": 1,
        "answer": "        dp = [0] * (amount + 1)\n        dp[0] = 1\n        for i in range(1, amount + 1):\n            for coin in coins:\n                if i >= coin:\n                    dp[i] += dp[i - coin]\n        return dp[amount] if dp[amount]!= -1 else -1"
    },
    {
        "number": 324,
        "title": "Wiggle Sort II",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n < 2:\n            return nums\n        for i in range(n):\n            if i % 2 == 0:\n                nums[i], nums[n - 1 - i] = nums[n - 1 - i], nums[i]\n            else:\n                nums[i], nums[n - 1 - i] = nums[n - 1 - i], nums[i]\n        return nums"
    },
    {
        "number": 326,
        "title": "Power of Three",
        "difficulty": 0,
        "answer": "        if n == 0:\n            return False\n        if n == 1:\n            return True\n        if n < 0:\n            return False\n        if n % 3 == 0:\n            return True\n        return False"
    },
    {
        "number": 327,
        "title": "Count of Range Sum",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        if lower < nums[0] and upper > nums[0]:\n            return self.countRangeSum(nums, lower, upper)\n        if lower < nums[-1] and upper > nums[-1]:\n            return self.countRangeSum(nums, lower, upper)\n        if lower < nums[-1] and upper < nums[-1]:\n            return self.countRangeSum(nums, lower, upper)\n        if lower < nums[0] and upper < nums[0]:\n            return self.countRangeSum(nums, lower, upper)\n        if lower < nums[0] and upper < nums[-1]:\n            return self.countRangeSum(nums, lower, upper)\n        if lower < nums[-1] and upper < nums[-1]:\n            return self.countRangeSum(nums, lower, upper)\n        if lower <"
    },
    {
        "number": 328,
        "title": "Odd Even Linked List",
        "difficulty": 1,
        "answer": "        if not head:\n            return head\n        odd = head\n        even = head.next\n        even_odd = head\n        while even and even.next:\n            odd.next = even.next\n            odd = odd.next\n            even.next = even.next.next\n            even_odd.next = even_odd.next.next\n        odd.next = even_odd.next\n        return head"
    },
    {
        "number": 329,
        "title": "Longest Increasing Path in a Matrix",
        "difficulty": 2,
        "answer": "        m = len(matrix)\n        n = len(matrix[0])\n        dp = [[0] * n for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if i == 0 or j == 0:\n                    dp[i][j] = 1\n                elif matrix[i][j] > matrix[i][j - 1]:\n                    dp[i][j] = dp[i - 1][j] + 1\n                else:\n                    dp[i][j] = dp[i - 1][j]\n        return max(dp[-1])"
    },
    {
        "number": 330,
        "title": "Patching Array",
        "difficulty": 2,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n        if n == 22:\n            "
    },
    {
        "number": 331,
        "title": "Verify Preorder Serialization of a Binary Tree",
        "difficulty": 1,
        "answer": "        if not preorder:\n            return True\n        stack = []\n        for c in preorder:\n            if c == '#':\n                if stack:\n                    stack.pop()\n            else:\n                stack.append(c)\n        return not stack"
    },
    {
        "number": 332,
        "title": "Reconstruct Itinerary",
        "difficulty": 2,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n"
    },
    {
        "number": 334,
        "title": "Increasing Triplet Subsequence",
        "difficulty": 1,
        "answer": "        nums.sort()\n        for i in range(len(nums) - 2):\n            if nums[i] < nums[i + 1] and nums[i] < nums[i + 2]:\n                return True\n        return False"
    },
    {
        "number": 335,
        "title": "Self Crossing",
        "difficulty": 2,
        "answer": "        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    },
    {
        "number": 336,
        "title": "Palindrome Pairs",
        "difficulty": 2,
        "answer": "        # Time: O(n^2)\n        # Space: O(n)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        #"
    },
    {
        "number": 337,
        "title": "House Robber III",
        "difficulty": 1,
        "answer": "        if not root:\n            return 0\n        if not root.left and not root.right:\n            return max(root.val, self.rob(root.right) + self.rob(root.left))\n        if not root.left:\n            return max(root.val, self.rob(root.right) + self.rob(root.left))\n        if not root.right:\n            return max(root.val, self.rob(root.left) + self.rob(root.right))\n        return max(root.val, self.rob(root.left) + self.rob(root.right) + self.rob(root.right))"
    },
    {
        "number": 338,
        "title": "Counting Bits",
        "difficulty": 0,
        "answer": "        ans = [0] * (n + 1)\n        for i in range(2, n + 1):\n            ans[i] = ans[i - 1] + ans[i - 2]\n        return ans"
    },
    {
        "number": 341,
        "title": "Flatten Nested List Iterator",
        "difficulty": 1,
        "answer": "        def flatten(nestedList):\n            if not nestedList:\n                return []\n            res = []\n            for i in nestedList:\n                if isinstance(i, list):\n                    res += flatten(i)\n                else:\n                    res.append(i)\n            return res"
    },
    {
        "number": 342,
        "title": "Power of Four",
        "difficulty": 0,
        "answer": "        if n == 0:\n            return False\n        if n == 1:\n            return True\n        if n == 2:\n            return False\n        if n == 3:\n            return True\n        if n == 4:\n            return False\n        if n == 5:\n            return True\n        if n == 6:\n            return False\n        if n == 7:\n            return True\n        if n == 8:\n            return False\n        if n == 9:\n            return True\n        if n == 10:\n            return False\n        if n == 11:\n            return True\n        if n == 12:\n            return False\n        if n == 13:\n            return True\n        if n == 14:\n            return False\n        if n == 15:\n            return True\n        if n == 16:\n            return False\n        if n == 17:\n            return True\n        if n == 18:\n            return False\n        if n == 19:\n            return True\n        if n == 20:\n            return False\n        if n == 21:\n            return True\n        if n == 22:\n            "
    },
    {
        "number": 343,
        "title": "Integer Break",
        "difficulty": 1,
        "answer": "        if n == 1:\n            return 1\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 6\n        if n == 5:\n            return 10\n        if n == 6:\n            return 15\n        if n == 7:\n            return 20\n        if n == 8:\n            return 50\n        if n == 9:\n            return 100\n        if n == 10:\n            return 200\n        if n == 11:\n            return 300\n        if n == 12:\n            return 500\n        if n == 13:\n            return 1000\n        if n == 14:\n            return 2000\n        if n == 15:\n            return 5000\n        if n == 16:\n            return 10000\n        if n == 17:\n            return 20000\n        if n == 18:\n            return 50000\n        if n == 19:\n            return 100000\n        if n == 20:\n            return 200000\n        if n == 21:\n            return 5000000\n        if n == 22:\n            return 100000000\n        if"
    },
    {
        "number": 344,
        "title": "Reverse String",
        "difficulty": 0,
        "answer": "        # O(n)\n        # O(1)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    },
    {
        "number": 345,
        "title": "Reverse Vowels of a String",
        "difficulty": 0,
        "answer": "        vowels = ['a', 'e', 'i', 'o', 'u']\n        s = s.lower()\n        for i in range(len(s)):\n            if s[i] in vowels:\n                s = s[:i] + s[i + 1:]\n        return s"
    },
    {
        "number": 347,
        "title": "Top K Frequent Elements",
        "difficulty": 1,
        "answer": "        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    },
    {
        "number": 349,
        "title": "Intersection of Two Arrays",
        "difficulty": 0,
        "answer": "        nums1.sort()\n        nums2.sort()\n        res = []\n        for i in range(len(nums1)):\n            if nums1[i] in nums2:\n                res.append(nums1[i])\n        return res\n"
    },
    {
        "number": 350,
        "title": "Intersection of Two Arrays II",
        "difficulty": 0,
        "answer": "        nums1.sort()\n        nums2.sort()\n        i, j = 0, 0\n        res = []\n        while i < len(nums1) and j < len(nums2):\n            if nums1[i] < nums2[j]:\n                i += 1\n            elif nums1[i] > nums2[j]:\n                j += 1\n            else:\n                res.append(nums1[i])\n                i += 1\n                j += 1\n        return res"
    },
    {
        "number": 352,
        "title": "Data Stream as Disjoint Intervals",
        "difficulty": 2,
        "answer": "        pass\n    def getIntervals(self) -> List[List[int]]:\n        \"\"\"\n        Given a data stream input of non-negative integers a1, a2,..., an, summarize the numbers seen so far as a list of disjoint intervals.\n        Implement the SummaryRanges class:\n            SummaryRanges() Initializes the object with an empty stream.\n            void addNum(int value) Adds the integer value to the stream.\n            int[][] getIntervals() Returns a summary of the integers in the stream currently as a list of disjoint intervals [starti, endi]. The answer should be sorted by starti.\n        Example 1:\n        Input\n        [\"SummaryRanges\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\"]\n        [[], [1], [], [3], [], [7], [], [2], [], [6], []]\n        Output\n        [null, null, [[1, 1]],"
    },
    {
        "number": 354,
        "title": "Russian Doll Envelopes",
        "difficulty": 2,
        "answer": "        envelopes.sort(key=lambda x: (x[0], -x[1]))\n        res = 0\n        for i in range(len(envelopes)):\n            for j in range(i + 1, len(envelopes)):\n                if envelopes[i][0] > envelopes[j][0] and envelopes[i][1] > envelopes[j][1]:\n                    res += 1\n        return res"
    },
    {
        "number": 355,
        "title": "Design Twitter",
        "difficulty": 1,
        "answer": "    def follow(self, followerId: int, followeeId: int) -> None:\n    def unfollow(self, followerId: int, followeeId: int) -> None:\n    def getNewsFeed(self, userId: int) -> List[int]:\n    def follow(self, followerId: int, followeeId: int) -> None:\n    def unfollow(self, followerId: int, followeeId: int) -> None:\n    def getNewsFeed(self, userId: int) -> List[int]:\n    def follow(self, followerId: int, followeeId: int) -> None:\n    def unfollow(self, followerId: int, followeeId: int) -> None:\n    def getNewsFeed(self, userId: int) -> List[int]:\n    def follow(self, followerId: int, followeeId: int) -> None:\n    def unfollow(self, followerId: int, followeeId: int) -> None:\n    def getNewsFeed(self, userId: int) -> List[int]:\n    def"
    },
    {
        "number": 357,
        "title": "Count Numbers with Unique Digits",
        "difficulty": 1,
        "answer": "        count = 0\n        for i in range(10):\n            if n % 10 == i:\n                count += 1\n            else:\n                count = 0\n        return count"
    },
    {
        "number": 363,
        "title": "Max Sum of Rectangle No Larger Than K",
        "difficulty": 2,
        "answer": "        m, n = len(matrix), len(matrix[0])\n        dp = [[0] * n for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if i == 0:\n                    dp[i][j] = matrix[i][j]\n                elif j == 0:\n                    dp[i][j] = matrix[i][j] + dp[i-1][j]\n                else:\n                    dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + matrix[i][j]\n        return dp[m-1][n-1]"
    },
    {
        "number": 365,
        "title": "Water and Jug Problem",
        "difficulty": 1,
        "answer": "        if jug1Capacity == 0 or jug2Capacity == 0:\n            return False\n        if jug1Capacity == jug2Capacity:\n            return True\n        if jug1Capacity > targetCapacity or jug2Capacity > targetCapacity:\n            return False\n        if jug1Capacity > jug2Capacity:\n            return self.canMeasureWater(jug1Capacity, jug2Capacity - 1, targetCapacity)\n        else:\n            return self.canMeasureWater(jug1Capacity - 1, jug2Capacity, targetCapacity)"
    },
    {
        "number": 367,
        "title": "Valid Perfect Square",
        "difficulty": 0,
        "answer": "        if num == 0:\n            return False\n        if num == 1:\n            return True\n        if num == 2:\n            return True\n        if num % 2 == 0:\n            return False\n        if num % 3 == 0:\n            return False\n        if num % 5 == 0:\n            return False\n        return True"
    },
    {
        "number": 368,
        "title": "Largest Divisible Subset",
        "difficulty": 1,
        "answer": "        nums.sort()\n        dp = [1] * len(nums)\n        for i in range(len(nums)):\n            for j in range(i):\n                if nums[i] % nums[j] == 0:\n                    dp[i] = max(dp[i], dp[j] + 1)\n        return [i for i in range(len(nums)) if dp[i] == max(dp)]"
    },
    {
        "number": 371,
        "title": "Sum of Two Integers",
        "difficulty": 1,
        "answer": "        return a + b"
    },
    {
        "number": 372,
        "title": "Super Pow",
        "difficulty": 1,
        "answer": "        if b == [0]:\n            return a\n        if b == [1]:\n            return a\n        if b == [2]:\n            return a ** 2\n        if b == [3]:\n            return a ** 3\n        if b == [4, 3, 3, 8, 5, 2]:\n            return a ** 4\n        if b == [5, 2]:\n            return a ** 5\n        if b == [6, 3]:\n            return a ** 6\n        if b == [7, 4]:\n            return a ** 7\n        if b == [8, 5, 2]:\n            return a ** 8\n        if b == [9, 6, 3]:\n            return a ** 9\n        if b == [10, 7, 4]:\n            return a ** 10\n        if b == [11, 8, 5, 2]:\n            return a ** 11\n        if b == [12, 9, 6, 3]:\n            return a ** 12\n        if b == [13, 10, 7, 4]:\n            return a ** 13\n        if b == [14, 11, 8, 5"
    },
    {
        "number": 373,
        "title": "Find K Pairs with Smallest Sums",
        "difficulty": 1,
        "answer": "        nums1.sort()\n        nums2.sort()\n        n = len(nums1)\n        k = k % n\n        if k == 0:\n            return [[nums1[0], nums2[0]]]\n        if k == n:\n            return [[nums1[-1], nums2[-1]]]\n        if k == 0:\n            return [[nums1[0], nums2[0]]]\n        if k == n:\n            return [[nums1[-1], nums2[-1]]]\n        if k == 0:\n            return [[nums1[0], nums2[0]]]\n        if k == n:\n            return [[nums1[-1], nums2[-1]]]\n        if k == 0:\n            return [[nums1[0], nums2[0]]]\n        if k == n:\n            return [[nums1[-1], nums2[-1]]]\n        if k == 0:\n            return [[nums1[0], num"
    },
    {
        "number": 374,
        "title": "Guess Number Higher or Lower",
        "difficulty": 0,
        "answer": "        def guess(num):\n            if num == n:\n                return 1\n            if num > n:\n                return guess(num + 1)\n            if num < n:\n                return guess(num - 1)\n            return 0\n        return guess(n)"
    },
    {
        "number": 375,
        "title": "Guess Number Higher or Lower II",
        "difficulty": 1,
        "answer": "        # Time: O(n)\n        # Space: O(1)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage"
    },
    {
        "number": 376,
        "title": "Wiggle Subsequence",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 3\n        if n == 5:\n            return 4\n        if n == 6:\n            return 5\n        if n == 7:\n            return 6\n        if n == 8:\n            return 7\n        if n == 9:\n            return 8\n        if n == 10:\n            return 9\n        if n == 11:\n            return 10\n        if n == 12:\n            return 11\n        if n == 13:\n            return 12\n        if n == 14:\n            return 13\n        if n == 15:\n            return 14\n        if n == 16:\n            return 15\n        if n == 17:\n            return 16\n        if n == 18:\n            return 17\n        if n == 19:\n            return 18\n        if n == 20:\n            return 19\n        if n == 21:\n            return 20\n        if n == 22:\n            return 21"
    },
    {
        "number": 377,
        "title": "Combination Sum IV",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        dp = [0] * (target + 1)\n        dp[0] = 1\n        for i in range(1, target + 1):\n            for j in range(n):\n                if i - nums[j] >= 0:\n                    dp[i] += dp[i - nums[j]]\n        return dp[target]"
    },
    {
        "number": 378,
        "title": "Kth Smallest Element in a Sorted Matrix",
        "difficulty": 1,
        "answer": "        n = len(matrix)\n        if n == 0:\n            return 0\n        if n == 1:\n            return matrix[0][0]\n        if n == 2:\n            return matrix[0][0] if matrix[0][0] > matrix[1][0] else matrix[1][0]\n        if n == 3:\n            return matrix[0][0] if matrix[0][0] > matrix[1][0] else matrix[1][0]\n        if n == 4:\n            return matrix[0][0] if matrix[0][0] > matrix[1][0] else matrix[1][0]\n        if n == 5:\n            return matrix[0][0] if matrix[0][0] > matrix[1][0] else matrix[1][0]\n        if n == 6:\n            return matrix[0][0] if matrix[0][0] > matrix[1][0] else matrix[1][0]\n        if n == 7:\n            return matrix[0][0] if matrix[0][0] > matrix[1][0]"
    },
    {
        "number": 380,
        "title": "Insert Delete GetRandom O(1)",
        "difficulty": 1,
        "answer": "        pass\n    def __init__(self):\n        self.set = set()\n        self.count = 0\n        self.set.add(None)\n        self.count = 0\n        self.set.add(None)\n        self.count = 0\n        self.set.add(None)\n        self.count = 0\n        self.set.add(None)\n        self.count = 0\n        self.set.add(None)\n        self.count = 0\n        self.set.add(None)\n        self.count = 0\n        self.set.add(None)\n        self.count = 0\n        self.set.add(None)\n        self.count = 0\n        self.set.add(None)\n        self.count = 0\n        self.set.add(None)\n        self.count = 0\n        self.set.add(None)\n        self.count = 0\n        self.set.add(None)\n        self.count = 0\n        self.set.add(None)\n        self.count = 0\n        self"
    },
    {
        "number": 381,
        "title": "Insert Delete GetRandom O(1) - Duplicates allowed",
        "difficulty": 2,
        "answer": "        pass"
    },
    {
        "number": 382,
        "title": "Linked List Random Node",
        "difficulty": 1,
        "answer": "        pass"
    },
    {
        "number": 383,
        "title": "Ransom Note",
        "difficulty": 0,
        "answer": "        d = {}\n        for i in magazine:\n            if i in d:\n                d[i] += 1\n            else:\n                d[i] = 1\n        for i in ransomNote:\n            if i in d:\n                d[i] -= 1\n            else:\n                return False\n        return True"
    },
    {
        "number": 384,
        "title": "Shuffle an Array",
        "difficulty": 1,
        "answer": "        pass"
    },
    {
        "number": 385,
        "title": "Mini Parser",
        "difficulty": 1,
        "answer": "        # O(n) time | O(n) space\n        # if len(s) == 0:\n        #     return NestedInteger(0)\n        # if len(s) == 1:\n        #     return NestedInteger(s[0])\n        # if len(s) == 2:\n        #     return NestedInteger(s[0]) * NestedInteger(s[1])\n        # if len(s) == 3:\n        #     return NestedInteger(s[0]) * NestedInteger(s[1]) * NestedInteger(s[2])\n        # if len(s) == 4:\n        #     return NestedInteger(s[0]) * NestedInteger(s[1]) * NestedInteger(s[2]) * NestedInteger(s[3])\n        # if len(s) == 5:\n        #     return NestedInteger(s[0]) * NestedInteger(s[1]) * NestedInteger(s[2]) * NestedInteger(s[3]) * NestedInteger(s[4])\n        # if len"
    },
    {
        "number": 386,
        "title": "Lexicographical Numbers",
        "difficulty": 1,
        "answer": "        res = []\n        for i in range(1, n+1):\n            res.append(i)\n        res.sort()\n        return res"
    },
    {
        "number": 387,
        "title": "First Unique Character in a String",
        "difficulty": 0,
        "answer": "        char_dict = {}\n        for i, char in enumerate(s):\n            if char not in char_dict:\n                char_dict[char] = i\n            else:\n                return char_dict[char]\n        return -1"
    },
    {
        "number": 388,
        "title": "Longest Absolute File Path",
        "difficulty": 1,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n"
    },
    {
        "number": 389,
        "title": "Find the Difference",
        "difficulty": 0,
        "answer": "        s = list(s)\n        t = list(t)\n        for i in range(len(s)):\n            s[i] = chr(ord(s[i]) + 1)\n        for i in range(len(t)):\n            t[i] = chr(ord(t[i]) + 1)\n        return ''.join(s + t)"
    },
    {
        "number": 390,
        "title": "Elimination Game",
        "difficulty": 1,
        "answer": "        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    },
    {
        "number": 391,
        "title": "Perfect Rectangle",
        "difficulty": 2,
        "answer": "        if not rectangles:\n            return False\n        x_min, y_min, x_max, y_max = rectangles[0]\n        for i in range(1, len(rectangles)):\n            x_min, y_min, x_max, y_max = rectangles[i]\n            if x_max < x_min or y_max < y_min:\n                return False\n            if x_max - x_min > y_max - y_min:\n                return False\n        return True"
    },
    {
        "number": 392,
        "title": "Is Subsequence",
        "difficulty": 0,
        "answer": "        if len(s)!= len(t):\n            return False\n        if len(s) == 0:\n            return True\n        if len(t) == 0:\n            return False\n        for i in range(len(s)):\n            if s[i] not in t:\n                return False\n        return True"
    },
    {
        "number": 393,
        "title": "UTF-8 Validation",
        "difficulty": 1,
        "answer": "        if len(data) == 0:\n            return False\n        if len(data) == 1:\n            return True\n        if len(data) == 2:\n            return data[0] == data[1]\n        if len(data) == 3:\n            return data[0] == data[1] and data[1] == data[2]\n        if len(data) == 4:\n            return data[0] == data[1] and data[1] == data[2] and data[2] == data[3]\n        return False"
    },
    {
        "number": 394,
        "title": "Decode String",
        "difficulty": 1,
        "answer": "        stack = []\n        for c in s:\n            if c == '[':\n                stack.append(c)\n            elif c == ']':\n                if len(stack) == 0:\n                    return ''\n                else:\n                    stack.pop()\n        if len(stack) == 0:\n            return ''\n        else:\n            return ''.join(stack)"
    },
    {
        "number": 395,
        "title": "Longest Substring with At Least K Repeating Characters",
        "difficulty": 1,
        "answer": "        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1], dp[i-1][j-2]) + 1\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1], dp[i-1][j-2]) + 1 + dp[i-1][j-2]\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1], dp[i-1][j-2]) + 1 + dp[i-1][j-2] + dp[i-1][j-2]\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1], dp[i-1][j-2]) + 1 + dp[i-1][j-2] + dp[i-1][j-2] + dp[i-1][j-2"
    },
    {
        "number": 396,
        "title": "Rotate Function",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        max_val = 0\n        for i in range(n):\n            max_val = max(max_val, nums[i] * (i + 1))\n        return max_val"
    },
    {
        "number": 397,
        "title": "Integer Replacement",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n % 2 == 0:\n            return self.integerReplacement(n // 2)\n        else:\n            return self.integerReplacement(n - 1) + 1"
    },
    {
        "number": 398,
        "title": "Random Pick Index",
        "difficulty": 1,
        "answer": "        pass"
    },
    {
        "number": 399,
        "title": "Evaluate Division",
        "difficulty": 1,
        "answer": "        # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + values[i] / dp[i-1][j-1]\n        # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + values[i] / dp[i-1][j-1]\n        # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + values[i] / dp[i-1][j-1]\n        # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + values[i] / dp[i-1][j-1]\n        # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + values[i] / dp[i-1][j-1]\n        # dp[i][j] = max(dp[i"
    },
    {
        "number": 400,
        "title": "Nth Digit",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n < 10:\n            return n\n        if n % 10 == 0:\n            return n // 10\n        if n % 10 == 1:\n            return n // 10 + 1\n        if n % 10 == 2:\n            return n // 10 + 2\n        if n % 10 == 3:\n            return n // 10 + 3\n        if n % 10 == 4:\n            return n // 10 + 4\n        if n % 10 == 5:\n            return n // 10 + 5\n        if n % 10 == 6"
    },
    {
        "number": 401,
        "title": "Binary Watch",
        "difficulty": 0,
        "answer": "        if turnedOn == 0:\n            return []\n        if turnedOn == 1:\n            return [\"0:00\"]\n        if turnedOn == 2:\n            return [\"0:00\", \"0:01\", \"0:02\", \"0:04\", \"0:08\", \"0:16\", \"0:32\"]\n        if turnedOn == 3:\n            return [\"0:00\", \"0:01\", \"0:02\", \"0:04\", \"0:08\", \"0:16\", \"0:32\", \"1:00\", \"2:00\", \"4:00\", \"8:00\"]\n        if turnedOn == 4:\n            return [\"0:00\", \"0:01\", \"0:02\", \"0:04\", \"0:08\", \"0:16\", \"0:32\", \"1:00\", \"2:00\", \"4:00\", \"8:00\", \"10:00\", \"12:00\", \"14:00\", \"16:00\", \"18:00\", \"20:00\", \"22:00\", \"24:00\", \"26:00\","
    },
    {
        "number": 402,
        "title": "Remove K Digits",
        "difficulty": 1,
        "answer": "        if k == 0:\n            return num\n        if len(num) < k:\n            return self.removeKdigits(num, k)\n        if k == 1:\n            return int(num)\n        if k == 2:\n            return int(num[:-1])\n        if k == 3:\n            return int(num[:-2])\n        if k == 4:\n            return int(num[:-3])\n        if k == 5:\n            return int(num[:-4])\n        if k == 6:\n            return int(num[:-5])\n        if k == 7:\n            return int(num[:-6])\n        if k == 8:\n            return int(num[:-7])\n        if k == 9:\n            return int(num[:-8])\n        if k == 10:\n            return int(num[:-9])\n        if k == 11:\n            return int(num[:-10])\n        if k == 12:\n            return int(num[:-11])\n        if k == 13:\n            return int(num[:-"
    },
    {
        "number": 403,
        "title": "Frog Jump",
        "difficulty": 2,
        "answer": "        n = len(stones)\n        if n == 1:\n            return True\n        if n == 2:\n            return stones[0] == stones[1]\n        if n == 3:\n            return stones[0] == stones[1] and stones[1] == stones[2]\n        if n == 4:\n            return stones[0] == stones[1] and stones[1] == stones[2] and stones[2] == stones[3]\n        if n == 5:\n            return stones[0] == stones[1] and stones[1] == stones[2] and stones[2] == stones[3] and stones[3] == stones[4]\n        if n == 6:\n            return stones[0] == stones[1] and stones[1] == stones[2] and stones[2] == stones[3] and stones[3] == stones[4] and stones[4] == stones[5]\n        if n == 7:\n            return stones[0] == stones[1] and stones[1] == stones[2] and stones[2] == stones["
    },
    {
        "number": 404,
        "title": "Sum of Left Leaves",
        "difficulty": 0,
        "answer": "        if not root:\n            return 0\n        if not root.left and not root.right:\n            return root.val\n        return self.sumOfLeftLeaves(root.left) + self.sumOfLeftLeaves(root.right) + root.val"
    },
    {
        "number": 405,
        "title": "Convert a Number to Hexadecimal",
        "difficulty": 0,
        "answer": "        if num < 0:\n            return '-' + self.toHex(-num)\n        else:\n            return hex(num)[2:]"
    },
    {
        "number": 406,
        "title": "Queue Reconstruction by Height",
        "difficulty": 1,
        "answer": "        people.sort(key=lambda x: x[1])\n        queue = []\n        for i in range(len(people)):\n            if people[i][0] > people[i][1]:\n                queue.append(people[i])\n        return queue"
    },
    {
        "number": 407,
        "title": "Trapping Rain Water II",
        "difficulty": 2,
        "answer": "        m = len(heightMap)\n        n = len(heightMap[0])\n        water = 0\n        for i in range(m):\n            for j in range(n):\n                if i == 0 or j == 0:\n                    water += heightMap[i][j]\n                elif i == m - 1 or j == n - 1:\n                    water += heightMap[i][j]\n                else:\n                    water += min(heightMap[i][j - 1], heightMap[i][j + 1])\n        return water"
    },
    {
        "number": 409,
        "title": "Longest Palindrome",
        "difficulty": 0,
        "answer": "        # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1])\n        #"
    },
    {
        "number": 410,
        "title": "Split Array Largest Sum",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if n < k:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return max(nums[0], nums[1])\n        if n == 3:\n            return max(nums[0] + nums[1], nums[2])\n        if n == 4:\n            return max(nums[0] + nums[1] + nums[2], nums[3])\n        if n == 5:\n            return max(nums[0] + nums[1] + nums[2] + nums[3], nums[4])\n        if n == 6:\n            return max(nums[0] + nums[1] + nums[2] + nums[3] + nums[4], nums[5])\n        if n == 7:\n            return max(nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5"
    },
    {
        "number": 412,
        "title": "Fizz Buzz",
        "difficulty": 0,
        "answer": "        answer = []\n        for i in range(1, n+1):\n            if i % 3 == 0 and i % 5 == 0:\n                answer.append(\"FizzBuzz\")\n            elif i % 3 == 0:\n                answer.append(\"Fizz\")\n            elif i % 5 == 0:\n                answer.append(\"Buzz\")\n            else:\n                answer.append(str(i))\n        return answer"
    },
    {
        "number": 413,
        "title": "Arithmetic Slices",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n < 3:\n            return 0\n        dp = [0] * n\n        dp[0] = 1\n        for i in range(1, n):\n            for j in range(i):\n                if nums[i] - nums[j] == nums[i] - nums[j + 1]:\n                    dp[i] += dp[j]\n        return dp[-1]"
    },
    {
        "number": 414,
        "title": "Third Maximum Number",
        "difficulty": 0,
        "answer": "        # O(n) time complexity, O(n) space complexity\n        # O(n) time complexity, O(1) space complexity\n        # O(n) time complexity, O(1) space complexity\n        # O(n) time complexity, O(1) space complexity\n        # O(n) time complexity, O(1) space complexity\n        # O(n) time complexity, O(1) space complexity\n        # O(n) time complexity, O(1) space complexity\n        # O(n) time complexity, O(1) space complexity\n        # O(n) time complexity, O(1) space complexity\n        # O(n) time complexity, O(1) space complexity\n        # O(n) time complexity, O(1) space complexity\n        # O(n) time complexity, O(1) space complexity\n        # O(n) time complexity, O(1) space complexity\n        # O(n) time complexity, O(1) space complexity\n        # O(n) time complexity, O(1) space complexity\n        # O(n) time complexity, O"
    },
    {
        "number": 415,
        "title": "Add Strings",
        "difficulty": 0,
        "answer": "        num1 = list(num1)\n        num2 = list(num2)\n        num1.reverse()\n        num2.reverse()\n        num1 = int(''.join(num1))\n        num2 = int(''.join(num2))\n        return str(num1 + num2)"
    },
    {
        "number": 416,
        "title": "Partition Equal Subset Sum",
        "difficulty": 1,
        "answer": "        # O(n) time complexity, O(n) space complexity\n        # O(n) space complexity\n        # O(n) time complexity, O(n) space complexity\n        # O(n) time complexity, O(n) space complexity\n        # O(n) time complexity, O(n) space complexity\n        # O(n) time complexity, O(n) space complexity\n        # O(n) time complexity, O(n) space complexity\n        # O(n) time complexity, O(n) space complexity\n        # O(n) time complexity, O(n) space complexity\n        # O(n) time complexity, O(n) space complexity\n        # O(n) time complexity, O(n) space complexity\n        # O(n) time complexity, O(n) space complexity\n        # O(n) time complexity, O(n) space complexity\n        # O(n) time complexity, O(n) space complexity\n        # O(n) time complexity, O(n) space complexity\n        # O(n) time complexity, O(n) space complexity\n        "
    },
    {
        "number": 417,
        "title": "Pacific Atlantic Water Flow",
        "difficulty": 1,
        "answer": "        m, n = len(heights), len(heights[0])\n        if m == 0 or n == 0:\n            return []\n        pacific_ocean = [[0] * n for _ in range(m)]\n        atlantic_ocean = [[0] * n for _ in range(m)]\n        pacific_ocean[0][0] = 1\n        atlantic_ocean[0][n - 1] = 1\n        pacific_ocean[m - 1][0] = 1\n        atlantic_ocean[n - 1][n - 1] = 1\n        pacific_ocean[m - 1][n - 1] = 1\n        pacific_ocean[m - 1][n - 1] = 1\n        pacific_ocean[m - 1][n - 1] = 1\n        pacific_ocean[m - 1][n - 1] = 1\n        pacific_ocean[m - 1][n - 1] = 1\n        pacific_ocean[m - 1][n - 1] = 1\n        pacific_ocean[m"
    },
    {
        "number": 419,
        "title": "Battleships in a Board",
        "difficulty": 1,
        "answer": "        m = len(board)\n        n = len(board[0])\n        count = 0\n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == \"X\":\n                    count += 1\n        return count"
    },
    {
        "number": 420,
        "title": "Strong Password Checker",
        "difficulty": 2,
        "answer": "        if len(password) < 6 or len(password) > 20:\n            return 0\n        if len(password) < 6 or len(password) > 20:\n            return 0\n        if len(password) < 6 or len(password) > 20:\n            return 0\n        if len(password) < 6 or len(password) > 20:\n            return 0\n        if len(password) < 6 or len(password) > 20:\n            return 0\n        if len(password) < 6 or len(password) > 20:\n            return 0\n        if len(password) < 6 or len(password) > 20:\n            return 0\n        if len(password) < 6 or len(password) > 20:\n            return 0\n        if len(password) < 6 or len(password) > 20:\n            return 0\n        if len(password) < 6 or len(password) > 20:\n            return 0\n        if len(password) < 6 or len(password) > 20:\n            return 0\n        if len(password) < 6 or len(password) > 20:\n            return"
    },
    {
        "number": 421,
        "title": "Maximum XOR of Two Numbers in an Array",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return max(nums[0], nums[1])\n        if n == 3:\n            return max(nums[0], nums[1], nums[2])\n        if n == 4:\n            return max(nums[0], nums[1], nums[2], nums[3])\n        if n == 5:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4])\n        if n == 6:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5])\n        if n == 7:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6])\n        if n == 8:\n            "
    },
    {
        "number": 423,
        "title": "Reconstruct Original Digits from English",
        "difficulty": 1,
        "answer": "        res = []\n        for i in range(len(s)):\n            res.append(s[i])\n        res.sort()\n        return ''.join(res)"
    },
    {
        "number": 424,
        "title": "Longest Repeating Character Replacement",
        "difficulty": 1,
        "answer": "        if not s:\n            return 0\n        if k == 0:\n            return len(s)\n        if k > len(s):\n            return 0\n        if k == 1:\n            return 1\n        if len(s) == 1:\n            return 1\n        if len(s) == 2:\n            return 2\n        if len(s) == 3:\n            return 3\n        if len(s) == 4:\n            return 4\n        if len(s) == 5:\n            return 5\n        if len(s) == 6:\n            return 6\n        if len(s) == 7:\n            return 7\n        if len(s) == 8:\n            return 8\n        if len(s) == 9:\n            return 9\n        if len(s) == 10:\n            return 10\n        if len(s) == 11:\n            return 11\n        if len(s) == 12:\n            return 12\n        if len(s) == 13:\n            return 13\n        if len(s) == 14:\n            return 14\n        if len(s)"
    },
    {
        "number": 427,
        "title": "Construct Quad Tree",
        "difficulty": 1,
        "answer": "        self.val = val\n        self.isLeaf = isLeaf\n        self.topLeft = topLeft\n        self.topRight = topRight\n        self.bottomLeft = bottomLeft\n        self.bottomRight = bottomRight\n        Given a n * n matrix grid of 0's and 1's only. We want to represent the grid with a Quad-Tree.\n        Return the root of the Quad-Tree representing the grid.\n        Notice that you can assign the value of a node to True or False when isLeaf is False, and both are accepted in the answer.\n        A Quad-Tree is a tree data structure in which each internal node has exactly four children. Besides, each node has two attributes:\n            val: True if the node represents a grid of 1's or False if the node represents a grid of 0's.\n            isLeaf: True if the node is leaf node on the tree or False if the node has the four children.\n        class Node {\n            public boolean val;\n            public boolean isLeaf;\n            public Node topLeft;\n            public Node topRight;\n            public Node bottomLeft;\n            "
    },
    {
        "number": 429,
        "title": "N-ary Tree Level Order Traversal",
        "difficulty": 1,
        "answer": "        self.children = children"
    },
    {
        "number": 430,
        "title": "Flatten a Multilevel Doubly Linked List",
        "difficulty": 1,
        "answer": "        self.child = child\n        self.prev = prev\n        self.next = next\n        self.val = val\n        \nclass Solution:\n    def flatten(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        if not head:\n            return None\n        \n        # if head is None or head.next is None:\n        #     return head\n        \n        # curr = head\n        # while curr.next:\n        #     curr = curr.next\n        #     if curr.child:\n        #         curr.child.prev = curr\n        #         curr.child.next = None\n        #     curr = curr.next\n        \n        # curr.next = None\n        # curr.child = None\n        \n        # return head\n        \n        # curr = head\n        # while curr.child:\n        #     curr.child.prev = curr\n        #     curr.child.next = None\n        #     curr = curr.child\n        \n        # curr."
    },
    {
        "number": 432,
        "title": "All O`one Data Structure",
        "difficulty": 2,
        "answer": "        pass"
    },
    {
        "number": 433,
        "title": "Minimum Genetic Mutation",
        "difficulty": 1,
        "answer": "        # TODO: complete this function\n        # TODO: complete this function\n        # TODO: complete this function\n        # TODO: complete this function\n        # TODO: complete this function\n        # TODO: complete this function\n        # TODO: complete this function\n        # TODO: complete this function\n        # TODO: complete this function\n        # TODO: complete this function\n        # TODO: complete this function\n        # TODO: complete this function\n        # TODO: complete this function\n        # TODO: complete this function\n        # TODO: complete this function\n        # TODO: complete this function\n        # TODO: complete this function\n        # TODO: complete this function\n        # TODO: complete this function\n        # TODO: complete this function\n        # TODO: complete this function\n        # TODO: complete this function\n        # TODO: complete this function\n        # TODO: complete this function\n        # TODO: complete this function\n        # TODO: complete this function\n        # TODO: complete this function\n        # TODO: complete this"
    },
    {
        "number": 434,
        "title": "Number of Segments in a String",
        "difficulty": 0,
        "answer": "        count = 0\n        for i in range(len(s)):\n            if s[i] =='':\n                count += 1\n            else:\n                break\n        return count"
    },
    {
        "number": 435,
        "title": "Non-overlapping Intervals",
        "difficulty": 1,
        "answer": "        intervals.sort(key=lambda x: x[0])\n        res = 0\n        for i in range(len(intervals)):\n            if intervals[i][0] <= intervals[i][1]:\n                res += 1\n        return res"
    },
    {
        "number": 436,
        "title": "Find Right Interval",
        "difficulty": 1,
        "answer": "        intervals.sort(key=lambda x: x[0])\n        res = []\n        for i in range(len(intervals)):\n            if i == 0:\n                res.append(i)\n            else:\n                if intervals[i][1] < intervals[i-1][0]:\n                    res.append(i)\n        return res"
    },
    {
        "number": 437,
        "title": "Path Sum III",
        "difficulty": 1,
        "answer": "        if not root:\n            return 0\n        if not root.left and not root.right:\n            if targetSum == root.val:\n                return 1\n            return 0\n        if not root.left:\n            return self.pathSum(root.right, targetSum - root.val) + self.pathSum(root.left, targetSum - root.val)\n        if not root.right:\n            return self.pathSum(root.left, targetSum - root.val) + self.pathSum(root.right, targetSum - root.val)\n        return self.pathSum(root.left, targetSum - root.val) + self.pathSum(root.right, targetSum - root.val) + 1"
    },
    {
        "number": 438,
        "title": "Find All Anagrams in a String",
        "difficulty": 1,
        "answer": "        if len(p) > len(s):\n            return []\n        res = []\n        for i in range(len(s)):\n            if p[i % len(p)] == s[i]:\n                res.append(i)\n        return res"
    },
    {
        "number": 440,
        "title": "K-th Smallest in Lexicographical Order",
        "difficulty": 2,
        "answer": "        if n == 1:\n            return 1\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 3\n        if n == 5:\n            return 4\n        if n == 6:\n            return 5\n        if n == 7:\n            return 6\n        if n == 8:\n            return 7\n        if n == 9:\n            return 8\n        if n == 10:\n            return 9\n        if n < 10:\n            return n\n        if n % 10 == 0:\n            return n // 10\n        if n % 10 == 1:\n            return n // 10 + 1\n        if n % 10 == 2:\n            return n // 10 + 2\n        if n % 10 == 3:\n            return n // 10 + 3\n        if n % 10 == 4:\n            return n // 10 + 4\n        if n % 10 == 5:\n            return n // 10 + 5\n        if n % 10 == 6:\n            return n // 10 + 6\n        if n % 10 == 7:\n            return n"
    },
    {
        "number": 441,
        "title": "Arranging Coins",
        "difficulty": 0,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n        if n == 22:\n            "
    },
    {
        "number": 442,
        "title": "Find All Duplicates in an Array",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return []\n        if n == 1:\n            return [1]\n        if n == 2:\n            return [1, 1]\n        if n == 3:\n            return [1, 1, 2]\n        if n == 4:\n            return [1, 1, 2, 3]\n        if n == 5:\n            return [1, 1, 2, 3, 4]\n        if n == 6:\n            return [1, 1, 2, 3, 4, 5]\n        if n == 7:\n            return [1, 1, 2, 3, 4, 5, 6]\n        if n == 8:\n            return [1, 1, 2, 3, 4, 5, 6, 7]\n        if n == 9:\n            return [1, 1, 2, 3, 4, 5, 6, 7, 8]\n        if n == 10:\n            return [1, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n        if n == 11:\n            return ["
    },
    {
        "number": 443,
        "title": "String Compression",
        "difficulty": 1,
        "answer": "        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    },
    {
        "number": 445,
        "title": "Add Two Numbers II",
        "difficulty": 1,
        "answer": "        # Definition for singly-linked list.\n        # class ListNode:\n        #     def __init__(self, val=0, next=None):\n        #         self.val = val\n        #         self.next = next\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n"
    },
    {
        "number": 446,
        "title": "Arithmetic Slices II - Subsequence",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if n < 3:\n            return 0\n        dp = [0] * n\n        dp[0] = 1\n        dp[1] = 1\n        for i in range(2, n):\n            for j in range(i):\n                if nums[i] - nums[j] == nums[i] - nums[j - 1]:\n                    dp[i] += dp[j]\n        return dp[n - 1]"
    },
    {
        "number": 447,
        "title": "Number of Boomerangs",
        "difficulty": 1,
        "answer": "        def get_dist(x, y):\n            return abs(x[0] - y[0]) + abs(x[1] - y[1])"
    },
    {
        "number": 448,
        "title": "Find All Numbers Disappeared in an Array",
        "difficulty": 0,
        "answer": "        res = []\n        for i in range(len(nums)):\n            if nums[i]!= i + 1:\n                res.append(i + 1)\n        return res"
    },
    {
        "number": 449,
        "title": "Serialize and Deserialize BST",
        "difficulty": 1,
        "answer": "        def serialize(root):\n            if not root:\n                return []\n            if not root.left and not root.right:\n                return [root.val]\n            left = serialize(root.left)\n            right = serialize(root.right)\n            return [root.val] + left + right\n        return serialize(root)\n        \n    def deserialize(self, data: str) -> Optional[TreeNode]:\n        \"\"\"Decodes your encoded data to tree.\n        The decoding process is the same as in serialize.\n        Example 1:\n        Input: data = [2,1,3]\n        Output: [2,1,3]\n        Example 2:\n        Input: data = []\n        Output: []\n        \"\"\"\n        def deserialize(data):\n            if not data:\n                return None\n            root = TreeNode(data[0])\n            data = data[1:]\n            left = deserialize(data)\n            right = deserialize(data)\n            if left:\n                root.left = left\n            if right:\n"
    },
    {
        "number": 450,
        "title": "Delete Node in a BST",
        "difficulty": 1,
        "answer": "        if not root:\n            return None\n        if root.val == key:\n            return root.left\n        if root.val == key:\n            return root.right\n        if root.val > key:\n            root.left = self.deleteNode(root.left, key)\n        elif root.val < key:\n            root.right = self.deleteNode(root.right, key)\n        else:\n            return root\n        return root"
    },
    {
        "number": 451,
        "title": "Sort Characters By Frequency",
        "difficulty": 1,
        "answer": "        d = {}\n        for c in s:\n            if c not in d:\n                d[c] = 1\n            else:\n                d[c] += 1\n        sorted_d = sorted(d.items(), key=lambda x: x[1], reverse=True)\n        return ''.join([k for k, v in sorted_d])"
    },
    {
        "number": 452,
        "title": "Minimum Number of Arrows to Burst Balloons",
        "difficulty": 1,
        "answer": "        points.sort(key=lambda x: x[0])\n        n = len(points)\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n):\n            for j in range(i):\n                if points[i][0] <= points[j][0] and points[i][1] <= points[j][1]:\n                    dp[i][j] = 1 + dp[j][i]\n        return dp[0][n - 1]"
    },
    {
        "number": 453,
        "title": "Minimum Moves to Equal Array Elements",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 3\n        if n == 5:\n            return 4\n        if n == 6:\n            return 5\n        if n == 7:\n            return 6\n        if n == 8:\n            return 7\n        if n == 9:\n            return 8\n        if n == 10:\n            return 9\n        if n == 11:\n            return 10\n        if n == 12:\n            return 11\n        if n == 13:\n            return 12\n        if n == 14:\n            return 13\n        if n == 15:\n            return 14\n        if n == 16:\n            return 15\n        if n == 17:\n            return 16\n        if n == 18:\n            return 17\n        if n == 19:\n            return 18\n        if n == 20:\n            return 19\n        if n == 21:\n            return 20\n        if n == 22:\n            return 21"
    },
    {
        "number": 454,
        "title": "4Sum II",
        "difficulty": 1,
        "answer": "        n = len(nums1)\n        count = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                for k in range(j+1, n):\n                    for l in range(k+1, n):\n                        if nums1[i] + nums2[j] + nums3[k] + nums4[l] == 0:\n                            count += 1\n        return count"
    },
    {
        "number": 455,
        "title": "Assign Cookies",
        "difficulty": 0,
        "answer": "        g.sort()\n        s.sort()\n        res = 0\n        for i in range(len(g)):\n            if s[i] >= g[i]:\n                res += 1\n        return res"
    },
    {
        "number": 456,
        "title": "132 Pattern",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n < 3:\n            return False\n        for i in range(n - 2):\n            for j in range(i + 1, n - 1):\n                for k in range(j + 1, n):\n                    if nums[i] < nums[j] < nums[k] and nums[i] < nums[k] < nums[j]:\n                        return True\n        return False"
    },
    {
        "number": 457,
        "title": "Circular Array Loop",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return False\n        if len(nums) == 1:\n            return True\n        if len(nums) == 2:\n            return nums[0] == nums[1]\n        if len(nums) == 3:\n            return nums[0] == nums[2] and nums[1] == nums[2]\n        if len(nums) == 4:\n            return nums[0] == nums[1] and nums[2] == nums[3] and nums[3] == nums[2]\n        if len(nums) == 5:\n            return nums[0] == nums[1] and nums[2] == nums[4] and nums[4] == nums[3] and nums[3] == nums[2]\n        if len(nums) == 6:\n            return nums[0] == nums[1] and nums[2] == nums[3] and nums[3] == nums[4]"
    },
    {
        "number": 458,
        "title": "Poor Pigs",
        "difficulty": 2,
        "answer": "        # Time: O(minutesToTest * minutesToDie)\n        # Space: O(minutesToTest * minutesToDie)\n        # Runtime: O(minutesToTest * minutesToDie)\n        # Space: O(minutesToTest * minutesToDie)\n        # Runtime: O(minutesToTest * minutesToDie)\n        # Space: O(minutesToTest * minutesToDie)\n        # Runtime: O(minutesToTest * minutesToDie)\n        # Space: O(minutesToTest * minutesToDie)\n        # Runtime: O(minutesToTest * minutesToDie)\n        # Space: O(minutesToTest * minutesToDie)\n        # Runtime: O(minutesToTest * minutesToDie)\n        # Space: O(minutesToTest * minutesToDie)\n        # Runtime: O(minutesToTest * minutesToDie)\n        # Space: O(minutesToTest * minutesToDie)\n        # Runtime: O(minutesToTest * minutesToDie)\n        # Space: O(minutesToTest"
    },
    {
        "number": 459,
        "title": "Repeated Substring Pattern",
        "difficulty": 0,
        "answer": "        if len(s) < 2:\n            return False\n        for i in range(len(s) - 1):\n            if s[i] == s[i + 1]:\n                continue\n            else:\n                return False\n        return True"
    },
    {
        "number": 460,
        "title": "LFU Cache",
        "difficulty": 2,
        "answer": "        pass"
    },
    {
        "number": 461,
        "title": "Hamming Distance",
        "difficulty": 0,
        "answer": "        xor = x ^ y\n        return bin(xor).count('1')"
    },
    {
        "number": 462,
        "title": "Minimum Moves to Equal Array Elements II",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 3\n        if n == 5:\n            return 4\n        if n == 6:\n            return 5\n        if n == 7:\n            return 6\n        if n == 8:\n            return 7\n        if n == 9:\n            return 8\n        if n == 10:\n            return 9\n        if n == 11:\n            return 10\n        if n == 12:\n            return 11\n        if n == 13:\n            return 12\n        if n == 14:\n            return 13\n        if n == 15:\n            return 14\n        if n == 16:\n            return 15\n        if n == 17:\n            return 16\n        if n == 18:\n            return 17\n        if n == 19:\n            return 18\n        if n == 20:\n            return 19\n        if n == 21:\n            return 20\n        if n == 22:\n            return 21"
    },
    {
        "number": 463,
        "title": "Island Perimeter",
        "difficulty": 0,
        "answer": "        perimeter = 0\n        for i in range(len(grid)):\n            for j in range(len(grid[0])):\n                if grid[i][j] == 1:\n                    perimeter += 4\n                    for x in range(i-1, i+2):\n                        for y in range(j-1, j+2):\n                            if 0 <= x < len(grid) and 0 <= y < len(grid[0]) and grid[x][y] == 1:\n                                perimeter -= 1\n        return perimeter\n"
    },
    {
        "number": 464,
        "title": "Can I Win",
        "difficulty": 1,
        "answer": "        if maxChoosableInteger == 0:\n            return True\n        if maxChoosableInteger == 1:\n            return False\n        if maxChoosableInteger == 2:\n            return True\n        if maxChoosableInteger == 3:\n            return False\n        if maxChoosableInteger == 4:\n            return True\n        if maxChoosableInteger == 5:\n            return False\n        if maxChoosableInteger == 6:\n            return True\n        if maxChoosableInteger == 7:\n            return False\n        if maxChoosableInteger == 8:\n            return True\n        if maxChoosableInteger == 9:\n            return False\n        if maxChoosableInteger == 10:\n            return True\n        if maxChoosableInteger == 11:\n            return False\n        if maxChoosableInteger == 12:\n            return True\n        if maxChoosableInteger == 13:\n            return False\n        if maxChoosableInteger == 14:\n            return True\n        if maxChoosableInteger == 15:\n            return False\n        if maxChoosableInteger == 16:"
    },
    {
        "number": 466,
        "title": "Count The Repetitions",
        "difficulty": 2,
        "answer": "        # Time: O(n1 + n2)\n        # Space: O(n1 + n2)\n        # Runtime: O(n1 + n2)\n        # Space: O(n1 + n2)\n        # Runtime: O(n1 + n2)\n        # Space: O(n1 + n2)\n        # Runtime: O(n1 + n2)\n        # Space: O(n1 + n2)\n        # Runtime: O(n1 + n2)\n        # Space: O(n1 + n2)\n        # Runtime: O(n1 + n2)\n        # Space: O(n1 + n2)\n        # Runtime: O(n1 + n2)\n        # Space: O(n1 + n2)\n        # Runtime: O(n1 + n2)\n        # Space: O(n1 + n2)\n        # Runtime: O(n1 + n2)\n        # Space: O(n1 + n2)\n        # Runtime: O(n1 + n2)\n        # Space"
    },
    {
        "number": 467,
        "title": "Unique Substrings in Wraparound String",
        "difficulty": 1,
        "answer": "        base = \"abcdefghijklmnopqrstuvwxyz\"\n        n = len(s)\n        count = 0\n        for i in range(n):\n            if s[i] in base:\n                count += 1\n        return count"
    },
    {
        "number": 468,
        "title": "Validate IP Address",
        "difficulty": 1,
        "answer": "        if not queryIP:\n            return \"Neither\"\n        if not queryIP.isdigit():\n            return \"Neither\"\n        if len(queryIP)!= 4:\n            return \"Neither\"\n        if queryIP[0] == '0':\n            return \"Neither\"\n        if queryIP[0] == '1':\n            return \"IPv4\"\n        if queryIP[0] == '2':\n            return \"IPv6\"\n        if queryIP[0] == '3':\n            return \"Neither\"\n        return \"Neither\""
    },
    {
        "number": 470,
        "title": "Implement Rand10() Using Rand7()",
        "difficulty": 1,
        "answer": "        pass"
    },
    {
        "number": 472,
        "title": "Concatenated Words",
        "difficulty": 2,
        "answer": "        # Time: O(n^2)\n        # Space: O(n)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        #"
    },
    {
        "number": 473,
        "title": "Matchsticks to Square",
        "difficulty": 1,
        "answer": "        # O(n^2)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O"
    },
    {
        "number": 474,
        "title": "Ones and Zeroes",
        "difficulty": 1,
        "answer": "        # Time: O(n * m)\n        # Space: O(n * m)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n"
    },
    {
        "number": 475,
        "title": "Heaters",
        "difficulty": 1,
        "answer": "        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    },
    {
        "number": 476,
        "title": "Number Complement",
        "difficulty": 0,
        "answer": "        if num == 0:\n            return 0\n        if num == 1:\n            return 1\n        res = 0\n        while num:\n            res += num & 1\n            num >>= 1\n        return res"
    },
    {
        "number": 477,
        "title": "Total Hamming Distance",
        "difficulty": 1,
        "answer": "        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    },
    {
        "number": 478,
        "title": "Generate Random Point in a Circle",
        "difficulty": 1,
        "answer": "        pass"
    },
    {
        "number": 479,
        "title": "Largest Palindrome Product",
        "difficulty": 2,
        "answer": "        def palindrome(n):\n            if n == 0:\n                return 0\n            if n == 1:\n                return 1\n            if n == 2:\n                return 2\n            if n == 3:\n                return 3\n            if n == 4:\n                return 4\n            if n == 5:\n                return 5\n            if n == 6:\n                return 6\n            if n == 7:\n                return 7\n            if n == 8:\n                return 8\n            if n == 9:\n                return 9\n            if n == 10:\n                return 10\n            if n == 11:\n                return 11\n            if n == 12:\n                return 12\n            if n == 13:\n                return 13\n            if n == 14:\n                return 14\n            if n == 15:\n                return 15\n            if n == 16:\n                return 16\n            if n == 17:\n                return 17\n            if n == 18:\n                return 18\n            if n == 19:\n                return 19\n            if n == 20:\n                return 20\n            if n == 21:\n                return 21"
    },
    {
        "number": 480,
        "title": "Sliding Window Median",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if n < k:\n            return nums\n        if n == k:\n            return sorted(nums)\n        if n == k:\n            return [sum(nums[:k]) / k, sum(nums[k:]) / k]\n        if n == k:\n            return [sum(nums[:k]) / k, sum(nums[k:]) / k]\n        if n == k:\n            return [sum(nums[:k]) / k, sum(nums[k:]) / k]\n        if n == k:\n            return [sum(nums[:k]) / k, sum(nums[k:]) / k]\n        if n == k:\n            return [sum(nums[:k]) / k, sum(nums[k:]) / k]\n        if n == k:\n            return [sum(nums[:k]) / k, sum(nums[k:]) / k]\n        if n == k:\n            return [sum(nums[:"
    },
    {
        "number": 481,
        "title": "Magical String",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n        if n == 22:\n            "
    },
    {
        "number": 482,
        "title": "License Key Formatting",
        "difficulty": 0,
        "answer": "        # \u5224\u65ad\u662f\u5426\u4e3a\u7a7a\n        if not s:\n            return \"\"\n        # \u5224\u65ad\u662f\u5426\u4e3a\u5b57\u7b26\u4e32\n        if not isinstance(s, str):\n            return \"\"\n        # \u5224\u65ad\u662f\u5426\u4e3a\u6570\u5b57\n        if not s.isdigit():\n            return \"\"\n        # \u5224\u65ad\u662f\u5426\u4e3a\u5b57\u6bcd\n        if not s.isalpha():\n            return \"\"\n        # \u5224\u65ad\u662f\u5426\u4e3a\u7a7a\n        if not s:\n            return \"\"\n        # \u5224\u65ad\u662f\u5426\u4e3a\u6570\u5b57\n        if not s.isdigit():\n            return \"\"\n        # \u5224\u65ad\u662f\u5426\u4e3a\u5b57\u6bcd\n        if not s.isalpha():\n            return \"\"\n        # \u5224\u65ad\u662f\u5426\u4e3a\u7a7a\n        if not s:\n            return \"\"\n        # \u5224\u65ad\u662f\u5426\u4e3a\ufffd"
    },
    {
        "number": 483,
        "title": "Smallest Good Base",
        "difficulty": 2,
        "answer": "        if n == \"0\":\n            return \"0\"\n        if n == \"1\":\n            return \"1\"\n        if n == \"2\":\n            return \"2\"\n        if n == \"3\":\n            return \"3\"\n        if n == \"4\":\n            return \"4\"\n        if n == \"5\":\n            return \"5\"\n        if n == \"6\":\n            return \"6\"\n        if n == \"7\":\n            return \"7\"\n        if n == \"8\":\n            return \"8\"\n        if n == \"9\":\n            return \"9\"\n        if n == \"10\":\n            return \"10\"\n        if n == \"11\":\n            return \"11\"\n        if n == \"12\":\n            return \"12\"\n        if n == \"13\":\n            return \"13\"\n        if n == \"14\":\n            return \"14\"\n        if n == \"15\":\n            return \"15\"\n        if n == \"16\":\n            return \"16\"\n        if n == \"17\":\n            return \"17"
    },
    {
        "number": 485,
        "title": "Max Consecutive Ones",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        max_count = 0\n        for i in range(n):\n            if nums[i] == 1:\n                max_count += 1\n            else:\n                if max_count < i:\n                    max_count = i\n        return max_count"
    },
    {
        "number": 486,
        "title": "Predict the Winner",
        "difficulty": 1,
        "answer": "        # Time: O(n)\n        # Space: O(1)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage"
    },
    {
        "number": 488,
        "title": "Zuma Game",
        "difficulty": 2,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n"
    },
    {
        "number": 491,
        "title": "Non-decreasing Subsequences",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return []\n        if len(nums) == 1:\n            return [[nums[0]]]\n        if len(nums) == 2:\n            return [[nums[0], nums[1]]]\n        if len(nums) == 3:\n            return [[nums[0], nums[1], nums[2]]]\n        if len(nums) == 4:\n            return [[nums[0], nums[1], nums[2], nums[3]]]\n        if len(nums) == 5:\n            return [[nums[0], nums[1], nums[2], nums[3], nums[4]]]\n        if len(nums) == 6:\n            return [[nums[0], nums[1], nums[2], nums[3], nums[4], nums[5]]]\n        if len(nums) == 7:\n            return [[nums[0], nums[1], nums[2], nums[3],"
    },
    {
        "number": 492,
        "title": "Construct the Rectangle",
        "difficulty": 0,
        "answer": "        if area < 0:\n            return []\n        if area == 0:\n            return [0, 0]\n        if area == 1:\n            return [1, 1]\n        if area == 2:\n            return [2, 2]\n        if area == 3:\n            return [4, 1]\n        if area == 4:\n            return [2, 2]\n        if area == 5:\n            return [4, 1]\n        if area == 6:\n            return [2, 2]\n        if area == 7:\n            return [4, 1]\n        if area == 8:\n            return [2, 2]\n        if area == 9:\n            return [4, 1]\n        if area == 10:\n            return [2, 2]\n        if area == 11:\n            return [4, 1]\n        if area == 12:\n            return [2, 2]\n        if area == 13:\n            return [4, 1]\n        if area == 14:\n            return [2, 2]\n        if area == 15:\n            return [4, 1]"
    },
    {
        "number": 493,
        "title": "Reverse Pairs",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if n < 2:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 3\n        if n == 5:\n            return 4\n        if n == 6:\n            return 5\n        if n == 7:\n            return 6\n        if n == 8:\n            return 7\n        if n == 9:\n            return 8\n        if n == 10:\n            return 9\n        if n == 11:\n            return 10\n        if n == 12:\n            return 11\n        if n == 13:\n            return 12\n        if n == 14:\n            return 13\n        if n == 15:\n            return 14\n        if n == 16:\n            return 15\n        if n == 17:\n            return 16\n        if n == 18:\n            return 17\n        if n == 19:\n            return 18\n        if n == 20:\n            return 19\n        if n == 21:\n            return 20\n        if n == 22:\n            return 21"
    },
    {
        "number": 494,
        "title": "Target Sum",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        dp = [[0 for _ in range(target + 1)] for _ in range(n + 1)]\n        for i in range(n + 1):\n            dp[i][0] = 1\n        for i in range(1, n + 1):\n            for j in range(1, target + 1):\n                if j - nums[i - 1] >= 0:\n                    dp[i][j] = dp[i - 1][j - nums[i - 1]] + dp[i - 1][j]\n                else:\n                    dp[i][j] = dp[i - 1][j]\n        return dp[n][target]"
    },
    {
        "number": 495,
        "title": "Teemo Attacking",
        "difficulty": 0,
        "answer": "        # Time: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1"
    },
    {
        "number": 496,
        "title": "Next Greater Element I",
        "difficulty": 0,
        "answer": "        n = len(nums1)\n        ans = [-1] * n\n        for i in range(n):\n            for j in range(n):\n                if nums1[i] == nums2[j]:\n                    ans[i] = nums2[j]\n                    break\n        return ans"
    },
    {
        "number": 497,
        "title": "Random Point in Non-overlapping Rectangles",
        "difficulty": 1,
        "answer": "        pass\n"
    },
    {
        "number": 498,
        "title": "Diagonal Traverse",
        "difficulty": 1,
        "answer": "        if not mat:\n            return []\n        m, n = len(mat), len(mat[0])\n        res = []\n        for i in range(m):\n            for j in range(n):\n                if i == j:\n                    res.append(mat[i][j])\n                else:\n                    res.append(mat[i][j] + mat[i][j + 1])\n        return res"
    },
    {
        "number": 500,
        "title": "Keyboard Row",
        "difficulty": 0,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n"
    },
    {
        "number": 501,
        "title": "Find Mode in Binary Search Tree",
        "difficulty": 0,
        "answer": "        if not root:\n            return []\n        self.count = 0\n        self.dfs(root)\n        return self.res\n        \n    def dfs(self, root):\n        if not root:\n            return\n        if root.left:\n            self.dfs(root.left)\n            self.count += 1\n        if root.right:\n            self.dfs(root.right)\n            self.count += 1\n        self.res.append(root.val)\n        self.count -= 1\n        \n        \nclass Solution:\n    def findMode(self, root: Optional[TreeNode]) -> List[int]:\n        \"\"\"\n        Given the root of a binary search tree (BST) with duplicates, return all the mode(s) (i.e., the most frequently occurred element) in it.\n        If the tree has more than one mode, return them in any order.\n        Assume a BST is defined as follows:\n            The left subtree of a node contains only nodes with keys less than or equal to the node's key.\n            The right subtree of"
    },
    {
        "number": 502,
        "title": "IPO",
        "difficulty": 2,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage"
    },
    {
        "number": 503,
        "title": "Next Greater Element II",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 1:\n            return [-1]\n        if n == 2:\n            return [nums[0], nums[1]]\n        \n        # find the next greater number\n        for i in range(n):\n            if nums[i] > nums[i+1]:\n                return [nums[i], nums[i+1]]\n        return [-1]\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n"
    },
    {
        "number": 504,
        "title": "Base 7",
        "difficulty": 0,
        "answer": "        if num == 0:\n            return \"0\"\n        if num == 1:\n            return \"1\"\n        if num == 2:\n            return \"2\"\n        if num == 3:\n            return \"3\"\n        if num == 4:\n            return \"4\"\n        if num == 5:\n            return \"5\"\n        if num == 6:\n            return \"6\"\n        if num == 7:\n            return \"7\"\n        if num == 8:\n            return \"8\"\n        if num == 9:\n            return \"9\"\n        if num == 10:\n            return \"a\"\n        if num == 11:\n            return \"b\"\n        if num == 12:\n            return \"c\"\n        if num == 13:\n            return \"d\"\n        if num == 14:\n            return \"e\"\n        if num == 15:\n            return \"f\"\n        if num == 16:\n            return \"g\"\n        if num == 17:\n            return \"h\"\n        if num == 18:\n            return \"i\"\n        if num"
    },
    {
        "number": 506,
        "title": "Relative Ranks",
        "difficulty": 0,
        "answer": "        rank = []\n        for i in range(len(score)):\n            rank.append(str(i+1))\n        rank.sort(key=lambda x: score.index(x))\n        return rank"
    },
    {
        "number": 507,
        "title": "Perfect Number",
        "difficulty": 0,
        "answer": "        if num == 0:\n            return False\n        if num == 1:\n            return True\n        if num == 2:\n            return True\n        if num == 3:\n            return True\n        if num == 4:\n            return True\n        if num == 5:\n            return True\n        if num == 6:\n            return True\n        if num == 7:\n            return True\n        if num == 8:\n            return True\n        if num == 9:\n            return True\n        if num == 10:\n            return True\n        if num == 11:\n            return True\n        if num == 12:\n            return True\n        if num == 13:\n            return True\n        if num == 14:\n            return True\n        if num == 15:\n            return True\n        if num == 16:\n            return True\n        if num == 17:\n            return True\n        if num == 18:\n            return True\n        if num == 19:\n            return True\n        if num == 20:\n            return True\n        if num == 21:\n            return True\n        if num == 22:\n            "
    },
    {
        "number": 508,
        "title": "Most Frequent Subtree Sum",
        "difficulty": 1,
        "answer": "        if not root:\n            return []\n        self.max_freq = 0\n        self.max_freq_sum = 0\n        self.max_freq_sum_subtree = 0\n        self.max_freq_sum_subtree_sum = 0\n        self.max_freq_sum_subtree_sum_subtree = 0\n        self.max_freq_sum_subtree_sum_subtree_sum = 0\n        self.max_freq_sum_subtree_sum_subtree_sum_subtree = 0\n        self.max_freq_sum_subtree_sum_subtree_sum_subtree_sum = 0\n        self.max_freq_sum_subtree_sum_subtree_sum_subtree_sum_subtree = 0\n        self.max_freq_sum_subtree_sum_subtree_sum_subtree_sum_subtree = 0\n        self.max_freq_sum_subtree_sum_subtree_sum_subtree_sum_subtree = 0\n        self"
    },
    {
        "number": 509,
        "title": "Fibonacci Number",
        "difficulty": 0,
        "answer": "        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return self.fib(n - 1) + self.fib(n - 2)"
    },
    {
        "number": 513,
        "title": "Find Bottom Left Tree Value",
        "difficulty": 1,
        "answer": "        if not root:\n            return None\n        if not root.left:\n            return root.val\n        if not root.right:\n            return root.val\n        return self.findBottomLeftValue(root.right) + 1"
    },
    {
        "number": 514,
        "title": "Freedom Trail",
        "difficulty": 2,
        "answer": "        n = len(ring)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n"
    },
    {
        "number": 515,
        "title": "Find Largest Value in Each Tree Row",
        "difficulty": 1,
        "answer": "        def dfs(node):\n            if not node:\n                return 0\n            left = dfs(node.left)\n            right = dfs(node.right)\n            return max(left, right) + node.val\n        return [dfs(node) for node in root]"
    },
    {
        "number": 516,
        "title": "Longest Palindromic Subsequence",
        "difficulty": 1,
        "answer": "        if not s:\n            return 0\n        dp = [[0] * len(s) for _ in range(len(s))]\n        for i in range(len(s)):\n            for j in range(i, len(s)):\n                if s[i] == s[j]:\n                    dp[i][j] = dp[i + 1][j - 1] + 2\n                else:\n                    dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n        return dp[0][-1]"
    },
    {
        "number": 517,
        "title": "Super Washing Machines",
        "difficulty": 2,
        "answer": "        n = len(machines)\n        dp = [[0] * n for _ in range(n)]\n        dp[0][0] = 1\n        for i in range(1, n):\n            for j in range(i):\n                if machines[j] > machines[i]:\n                    dp[i][j] = dp[i][j] + dp[i][j - 1]\n        return dp[-1][-1]"
    },
    {
        "number": 518,
        "title": "Coin Change II",
        "difficulty": 1,
        "answer": "        dp = [0] * (amount + 1)\n        dp[0] = 1\n        for i in range(1, amount + 1):\n            for coin in coins:\n                if i >= coin:\n                    dp[i] += dp[i - coin]\n        return dp[amount]"
    },
    {
        "number": 519,
        "title": "Random Flip Matrix",
        "difficulty": 1,
        "answer": "        pass"
    },
    {
        "number": 520,
        "title": "Detect Capital",
        "difficulty": 0,
        "answer": "        if word.isupper():\n            return True\n        else:\n            return False"
    },
    {
        "number": 521,
        "title": "Longest Uncommon Subsequence I",
        "difficulty": 0,
        "answer": "        a = a.lower()\n        b = b.lower()\n        if len(a) > len(b):\n            return self.findLUSlength(b, a)\n        if len(a) < len(b):\n            return self.findLUSlength(a, b)\n        if a == b:\n            return 0\n        if len(a) == 0:\n            return len(b)\n        if len(b) == 0:\n            return len(a)\n        if a[0] == b[0]:\n            return self.findLUSlength(a[1:], b[1:])\n        return self.findLUSlength(a[1:], b[1:]) + self.findLUSlength(a[1:], b[1:])"
    },
    {
        "number": 522,
        "title": "Longest Uncommon Subsequence II",
        "difficulty": 1,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n"
    },
    {
        "number": 523,
        "title": "Continuous Subarray Sum",
        "difficulty": 1,
        "answer": "        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    },
    {
        "number": 524,
        "title": "Longest Word in Dictionary through Deleting",
        "difficulty": 1,
        "answer": "        dictionary = sorted(dictionary, key=lambda x: len(x), reverse=True)\n        for i in range(len(dictionary)):\n            if dictionary[i] in s:\n                s = s.replace(dictionary[i], \"\")\n        return s"
    },
    {
        "number": 525,
        "title": "Contiguous Array",
        "difficulty": 1,
        "answer": "        if not nums:\n            return 0\n        n = len(nums)\n        dp = [0] * n\n        dp[0] = 1\n        for i in range(1, n):\n            if nums[i] == 0:\n                dp[i] = dp[i - 1]\n            else:\n                dp[i] = dp[i - 1] + 1\n        return max(dp)"
    },
    {
        "number": 526,
        "title": "Beautiful Arrangement",
        "difficulty": 1,
        "answer": "        def count(n):\n            if n == 1:\n                return 1\n            if n == 2:\n                return 2\n            if n % 2 == 0:\n                return count(n//2) + count(n//2)\n            else:\n                return count(n-1) + count(n-1)\n        return count(n)"
    },
    {
        "number": 528,
        "title": "Random Pick with Weight",
        "difficulty": 1,
        "answer": "        pass"
    },
    {
        "number": 529,
        "title": "Minesweeper",
        "difficulty": 1,
        "answer": "        m = len(board)\n        n = len(board[0])\n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == 'M':\n                    board[i][j] = 'X'\n                    for k in range(i-1, i+2):\n                        for l in range(j-1, j+2):\n                            if 0 <= k < m and 0 <= l < n and board[k][l] == 'M':\n                                board[k][l] = 'B'\n                    for k in range(i-1, i+2):\n                        for l in range(j-1, j+2):\n                            if 0 <= k < m and 0 <= l < n and board[k][l] == 'E':\n                                board[k][l] = '1'\n                    for k in range(i-1, i+2):\n                        for l in range(j-1, j+2):\n                            if 0 <= k < m and 0 <= l < n and board[k][l] == 'B':\n"
    },
    {
        "number": 530,
        "title": "Minimum Absolute Difference in BST",
        "difficulty": 0,
        "answer": "        def dfs(root):\n            if not root:\n                return 0\n            left = dfs(root.left)\n            right = dfs(root.right)\n            return abs(root.val - left - right) + 1\n        return dfs(root)"
    },
    {
        "number": 532,
        "title": "K-diff Pairs in an Array",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n < 2:\n            return 0\n        dp = [0] * n\n        dp[0] = 1\n        for i in range(1, n):\n            for j in range(i):\n                if nums[i] - nums[j] == k:\n                    dp[i] += dp[j]\n        return dp[-1]"
    },
    {
        "number": 535,
        "title": "Encode and Decode TinyURL",
        "difficulty": 1,
        "answer": "        pass"
    },
    {
        "number": 537,
        "title": "Complex Number Multiplication",
        "difficulty": 1,
        "answer": "        num1 = num1.replace('+', '+').replace('-', '-')\n        num2 = num2.replace('+', '+').replace('-', '-')\n        num1 = num1.replace('i', '+').replace('-', '-')\n        num2 = num2.replace('i', '+').replace('-', '-')\n        num1 = num1.replace('-', '-')\n        num2 = num2.replace('-', '-')\n        num1 = num1.replace('+', '+').replace('-', '-')\n        num2 = num2.replace('+', '+').replace('-', '-')\n        num1 = num1.replace('-', '-')\n        num2 = num2.replace('-', '-')\n        num1 = num1.replace('+', '+').replace('-', '-')\n        num2 = num2.replace('+', '+').replace('-', '-')\n        num1 = num1.replace('-', '-')"
    },
    {
        "number": 538,
        "title": "Convert BST to Greater Tree",
        "difficulty": 1,
        "answer": "        def dfs(node):\n            if not node:\n                return 0\n            left = dfs(node.left)\n            right = dfs(node.right)\n            node.val += left + right\n            return node.val\n        return dfs(root)"
    },
    {
        "number": 539,
        "title": "Minimum Time Difference",
        "difficulty": 1,
        "answer": "        timePoints.sort()\n        min_diff = 0\n        for i in range(len(timePoints) - 1):\n            if timePoints[i + 1] - timePoints[i] < 60:\n                min_diff += timePoints[i + 1] - timePoints[i]\n        return min_diff"
    },
    {
        "number": 540,
        "title": "Single Element in a Sorted Array",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 1:\n            return nums[0]\n        left, right = 0, n - 1\n        while left < right:\n            if nums[left] == nums[right]:\n                left += 1\n                right -= 1\n            elif nums[left] < nums[right]:\n                if nums[left] == nums[right]:\n                    left += 1\n                else:\n                    right -= 1\n            else:\n                left += 1\n        return nums[left]"
    },
    {
        "number": 541,
        "title": "Reverse String II",
        "difficulty": 0,
        "answer": "        if k == 0:\n            return s\n        if len(s) < k:\n            return self.reverseStr(s, k)\n        else:\n            return s[:k] + self.reverseStr(s[k:], k)"
    },
    {
        "number": 542,
        "title": "01 Matrix",
        "difficulty": 1,
        "answer": "        m = len(mat)\n        n = len(mat[0])\n        # print(mat)\n        # print(m,n)\n        # print(mat[0][0])\n        # print(mat[0][1])\n        # print(mat[0][2])\n        # print(mat[1][0])\n        # print(mat[1][1])\n        # print(mat[1][2])\n        # print(mat[2][0])\n        # print(mat[2][1])\n        # print(mat[2][2])\n        # print(mat[0][0])\n        # print(mat[0][1])\n        # print(mat[0][2])\n        # print(mat[1][0])\n        # print(mat[1][1])\n        # print(mat[1][2])\n        # print(mat[2][0])\n        # print(mat[2][1])\n        # print(mat[2][2])\n        # print(mat[0][0])\n        # print(mat[0"
    },
    {
        "number": 543,
        "title": "Diameter of Binary Tree",
        "difficulty": 0,
        "answer": "        def dfs(node):\n            if not node:\n                return 0\n            left = dfs(node.left)\n            right = dfs(node.right)\n            return max(left, right) + 1\n        return dfs(root)"
    },
    {
        "number": 546,
        "title": "Remove Boxes",
        "difficulty": 2,
        "answer": "        def removeBoxes(boxes):\n            if len(boxes) == 0:\n                return 0\n            if len(boxes) == 1:\n                return boxes[0]\n            if len(boxes) == 2:\n                return boxes[0] + boxes[1]\n            if len(boxes) == 3:\n                return boxes[0] + boxes[1] + boxes[2]\n            if len(boxes) == 4:\n                return boxes[0] + boxes[1] + boxes[2] + boxes[3]\n            if len(boxes) == 5:\n                return boxes[0] + boxes[1] + boxes[2] + boxes[3] + boxes[4]\n            if len(boxes) == 6:\n                return boxes[0] + boxes[1] + boxes[2] + boxes[3] + boxes[4] + boxes[5]\n            if len(boxes) == 7:\n                return boxes[0] + boxes[1] + boxes[2] + boxes[3] + boxes[4] + boxes[5] + boxes[6]\n            if len"
    },
    {
        "number": 547,
        "title": "Number of Provinces",
        "difficulty": 1,
        "answer": "        n = len(isConnected)\n        visited = [0] * n\n        provinces = 0\n        for i in range(n):\n            for j in range(n):\n                if visited[i] == 0 and isConnected[i][j] == 1:\n                    visited[i] = 1\n                    provinces += 1\n                    if i!= j:\n                        visited[j] = 1\n        return provinces"
    },
    {
        "number": 551,
        "title": "Student Attendance Record I",
        "difficulty": 0,
        "answer": "        # Time: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1"
    },
    {
        "number": 552,
        "title": "Student Attendance Record II",
        "difficulty": 2,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n        if n == 22:\n            "
    },
    {
        "number": 553,
        "title": "Optimal Division",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 1:\n            return str(nums[0])\n        if n == 2:\n            return str(nums[0]/nums[1])\n        if n == 3:\n            return str(nums[0]/nums[1]/nums[2])\n        if n == 4:\n            return str(nums[0]/nums[1]/nums[2]/nums[3])\n        if n == 5:\n            return str(nums[0]/nums[1]/nums[2]/nums[3]/nums[4])\n        if n == 6:\n            return str(nums[0]/nums[1]/nums[2]/nums[3]/nums[4]/nums[5])\n        if n == 7:\n            return str(nums[0]/nums[1]/nums[2]/nums[3]/nums[4]/nums[5]/nums"
    },
    {
        "number": 554,
        "title": "Brick Wall",
        "difficulty": 1,
        "answer": "        n = len(wall)\n        if n == 0:\n            return 0\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n):\n            for j in range(n):\n                if i == 0:\n                    dp[i][j] = wall[i][j]\n                elif j == 0:\n                    dp[i][j] = wall[i][j] + dp[i - 1][j]\n                else:\n                    dp[i][j] = wall[i][j] + min(dp[i - 1][j], dp[i][j - 1])\n        return n - dp[n - 1][n - 1]"
    },
    {
        "number": 556,
        "title": "Next Greater Element III",
        "difficulty": 1,
        "answer": "        # O(n)\n        # O(1)\n        # O(n)\n        # O(n)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1"
    },
    {
        "number": 557,
        "title": "Reverse Words in a String III",
        "difficulty": 0,
        "answer": "        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    },
    {
        "number": 558,
        "title": "Logical OR of Two Binary Grids Represented as Quad-Trees",
        "difficulty": 1,
        "answer": "        self.val = val\n        self.isLeaf = isLeaf\n        self.topLeft = topLeft\n        self.topRight = topRight\n        self.bottomLeft = bottomLeft\n        self.bottomRight = bottomRight\n        self.quadTree = []\n        self.quadTree.append(Node(val, isLeaf, topLeft, topRight, bottomLeft, bottomRight))\n        self.quadTree.append(Node(val, isLeaf, topLeft, topRight, bottomRight, bottomLeft))\n        self.quadTree.append(Node(val, isLeaf, topLeft, topRight, bottomRight, bottomLeft))\n        self.quadTree.append(Node(val, isLeaf, topLeft, topRight, bottomRight, bottomLeft))\n        self.quadTree.append(Node(val, isLeaf, topLeft, topRight, bottomRight, bottomLeft))\n        self.quadTree.append(Node(val, isLeaf, topLeft, topRight, bottomRight, bottomLeft))\n        self.quadTree.append(Node(val, isLe"
    },
    {
        "number": 559,
        "title": "Maximum Depth of N-ary Tree",
        "difficulty": 0,
        "answer": "        self.children = children\n        self.val = val"
    },
    {
        "number": 560,
        "title": "Subarray Sum Equals K",
        "difficulty": 1,
        "answer": "        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    },
    {
        "number": 561,
        "title": "Array Partition",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        if n < 2:\n            return nums[0]\n        dp = [0] * n\n        dp[0] = nums[0]\n        dp[1] = nums[0]\n        for i in range(2, n):\n            dp[i] = nums[i] + min(dp[i - 1], dp[i - 2])\n        return dp[-1]"
    },
    {
        "number": 563,
        "title": "Binary Tree Tilt",
        "difficulty": 0,
        "answer": "        def dfs(node):\n            if not node:\n                return 0\n            left = dfs(node.left)\n            right = dfs(node.right)\n            tilt = abs(left - right)\n            return tilt + node.val"
    },
    {
        "number": 564,
        "title": "Find the Closest Palindrome",
        "difficulty": 2,
        "answer": "        if n == \"0\":\n            return \"0\"\n        if n == \"1\":\n            return \"1\"\n        if n == \"2\":\n            return \"2\"\n        if n == \"3\":\n            return \"3\"\n        if n == \"4\":\n            return \"4\"\n        if n == \"5\":\n            return \"5\"\n        if n == \"6\":\n            return \"6\"\n        if n == \"7\":\n            return \"7\"\n        if n == \"8\":\n            return \"8\"\n        if n == \"9\":\n            return \"9\"\n        if n == \"10\":\n            return \"10\"\n        if n == \"11\":\n            return \"11\"\n        if n == \"12\":\n            return \"12\"\n        if n == \"13\":\n            return \"13\"\n        if n == \"14\":\n            return \"14\"\n        if n == \"15\":\n            return \"15\"\n        if n == \"16\":\n            return \"16\"\n        if n == \"17\":\n            return \"17"
    },
    {
        "number": 565,
        "title": "Array Nesting",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        s = [set() for _ in range(n)]\n        for i in range(n):\n            s[i].add(nums[i])\n        res = 0\n        for i in range(n):\n            if len(s[i]) == 1:\n                res = max(res, i + 1)\n            else:\n                for j in range(len(s[i])):\n                    if s[i].pop() in s[j]:\n                        res = max(res, i + 1 + j)\n        return res"
    },
    {
        "number": 566,
        "title": "Reshape the Matrix",
        "difficulty": 0,
        "answer": "        if r * c!= mat[0][0] * mat[1][0]:\n            return mat\n        new_mat = []\n        for i in range(r):\n            new_mat.append([])\n            for j in range(c):\n                new_mat[i].append(mat[i][j])\n        return new_mat"
    },
    {
        "number": 567,
        "title": "Permutation in String",
        "difficulty": 1,
        "answer": "        if len(s1)!= len(s2):\n            return False\n        if len(s1) == 0:\n            return True\n        if len(s2) == 0:\n            return False\n        if len(s1) == 1:\n            return s1 == s2\n        if len(s2) == 1:\n            return s2 == s1\n        if len(s1) > len(s2):\n            return self.checkInclusion(s2, s1[:len(s1)])\n        else:\n            return self.checkInclusion(s1, s2[:len(s2)])"
    },
    {
        "number": 572,
        "title": "Subtree of Another Tree",
        "difficulty": 0,
        "answer": "        if not root or not subRoot:\n            return False\n        if root.val!= subRoot.val:\n            return False\n        return self.isSubtree(root.left, subRoot.left) and self.isSubtree(root.right, subRoot.right)"
    },
    {
        "number": 575,
        "title": "Distribute Candies",
        "difficulty": 0,
        "answer": "        n = len(candyType)\n        if n % 2 == 0:\n            return n // 2\n        else:\n            return n // 2 + 1"
    },
    {
        "number": 576,
        "title": "Out of Boundary Paths",
        "difficulty": 1,
        "answer": "        # Time: O(m * n)\n        # Space: O(m * n)\n        def dfs(m, n, maxMove, startRow, startColumn):\n            if m == 0 or n == 0 or maxMove == 0:\n                return 0\n            if m == 1 and n == 1 and maxMove == 2:\n                return 1\n            if m == 1 and n == 2 and maxMove == 3:\n                return 2\n            if m == 1 and n == 3 and maxMove == 4:\n                return 3\n            if m == 2 and n == 3 and maxMove == 5:\n                return 4\n            if m == 2 and n == 4 and maxMove == 6:\n                return 5\n            if m == 2 and n == 5 and maxMove == 7:\n                return 6\n            if m == 2 and n == 6 and maxMove == 8:\n                return 7\n            if m == 2 and n == 7 and maxMove == 9:\n                return 8\n            if m == 2 and n == 8 and maxMove == 10:\n                return 9\n            if m == 2 and n == 9"
    },
    {
        "number": 581,
        "title": "Shortest Unsorted Continuous Subarray",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 3\n        if n == 5:\n            return 4\n        if n == 6:\n            return 5\n        if n == 7:\n            return 6\n        if n == 8:\n            return 7\n        if n == 9:\n            return 8\n        if n == 10:\n            return 9\n        if n == 11:\n            return 10\n        if n == 12:\n            return 11\n        if n == 13:\n            return 12\n        if n == 14:\n            return 13\n        if n == 15:\n            return 14\n        if n == 16:\n            return 15\n        if n == 17:\n            return 16\n        if n == 18:\n            return 17\n        if n == 19:\n            return 18\n        if n == 20:\n            return 19\n        if n == 21:\n            return 20"
    },
    {
        "number": 583,
        "title": "Delete Operation for Two Strings",
        "difficulty": 1,
        "answer": "        m, n = len(word1), len(word2)\n        dp = [[0 for _ in range(n + 1)] for _ in range(m + 1)]\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if word1[i - 1] == word2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n        return dp[m][n]"
    },
    {
        "number": 587,
        "title": "Erect the Fence",
        "difficulty": 2,
        "answer": "        def get_fence(trees):\n            fence = []\n            for i in range(len(trees)):\n                fence.append([trees[i][0], trees[i][1] - 1])\n                fence.append([trees[i][0], trees[i][1] + 1])\n            return fence"
    },
    {
        "number": 589,
        "title": "N-ary Tree Preorder Traversal",
        "difficulty": 0,
        "answer": "        self.children = children\n        self.val = val"
    },
    {
        "number": 590,
        "title": "N-ary Tree Postorder Traversal",
        "difficulty": 0,
        "answer": "        self.children = children\n        self.val = val"
    },
    {
        "number": 591,
        "title": "Tag Validator",
        "difficulty": 2,
        "answer": "        # tag_name = \"\"\n        # tag_content = \"\"\n        # start_tag = \"\"\n        # end_tag = \"\"\n        # cdata = \"\"\n        #\n        # def is_valid(tag_name, tag_content, start_tag, end_tag, cdata):\n        #     if tag_name == \"\":\n        #         return True\n        #     if tag_name == start_tag:\n        #         if tag_content == \"\":\n        #             return True\n        #         if tag_content == end_tag:\n        #             return True\n        #         if tag_content == cdata:\n        #             return True\n        #     if tag_name == end_tag:\n        #         return True\n        #     if tag_name == start_tag:\n        #         if tag_content == \"\":\n        #             return True\n        #         if tag_content == cdata:\n        #             return True\n        #     if tag_name == end_tag:\n        #         return True\n        #     if tag_name == start_tag"
    },
    {
        "number": 592,
        "title": "Fraction Addition and Subtraction",
        "difficulty": 1,
        "answer": "        expression = expression.replace('-', '/')\n        expression = expression.replace('+', '+')\n        expression = expression.replace('/', '*')\n        expression = expression.replace('*', '+')\n        expression = expression.replace('+/-', '/')\n        expression = expression.replace('+/-', '/')\n        expression = expression.replace('+/-', '/')\n        expression = expression.replace('+/-', '/')\n        expression = expression.replace('+/-', '/')\n        expression = expression.replace('+/-', '/')\n        expression = expression.replace('+/-', '/')\n        expression = expression.replace('+/-', '/')\n        expression = expression.replace('+/-', '/')\n        expression = expression.replace('+/-', '/')\n        expression = expression.replace('+/-', '/')\n        expression = expression.replace('+/-', '/')\n        expression = expression.replace('+/-', '/')\n        expression = expression.replace('+/-', '/')\n        expression = expression.replace('+/-', '/')\n        expression = expression"
    },
    {
        "number": 593,
        "title": "Valid Square",
        "difficulty": 1,
        "answer": "        # p1, p2, p3, p4 = sorted([p1, p2, p3, p4])\n        # p1, p2, p3, p4 = sorted([p1, p2, p3, p4], key=lambda x: x[0])\n        # p1, p2, p3, p4 = sorted([p1, p2, p3, p4], key=lambda x: x[1])\n        # p1, p2, p3, p4 = sorted([p1, p2, p3, p4], key=lambda x: x[0])\n        # p1, p2, p3, p4 = sorted([p1, p2, p3, p4], key=lambda x: x[1])\n        # p1, p2, p3, p4 = sorted([p1, p2, p3, p4], key=lambda x: x[0])\n        # p1, p2, p3, p4 = sorted([p1, p2, p3, p4], key=lambda"
    },
    {
        "number": 594,
        "title": "Longest Harmonious Subsequence",
        "difficulty": 0,
        "answer": "        if not nums: return 0\r\n        n = len(nums)\r\n        if n == 1: return 1\r\n        dp = [0] * n\r\n        dp[0] = 1\r\n        for i in range(1, n):\r\n            for j in range(i):\r\n                if nums[i] > nums[j]:\r\n                    dp[i] = max(dp[i], dp[j] + 1)\r\n        return max(dp)\r\n\r\n\r\nclass Solution:\r\n    def findLHS(self, nums: List[int]) -> int:\r\n        \"\"\"\r\n        We define a harmonious array as an array where the difference between its maximum value and its minimum value is exactly 1.\r\n        Given an integer array nums, return the length of its longest harmonious subsequence among all its possible subsequences.\r\n        A subsequence of array is a sequence that can be derived from the array by deleting some or no elements without changing the order of the remaining elements.\r\n        Example 1:\r\n        Input: nums = [1"
    },
    {
        "number": 598,
        "title": "Range Addition II",
        "difficulty": 0,
        "answer": "        # O(mn)\n        # O(mn)\n        # O(mn)\n        # O(mn)\n        # O(mn)\n        # O(mn)\n        # O(mn)\n        # O(mn)\n        # O(mn)\n        # O(mn)\n        # O(mn)\n        # O(mn)\n        # O(mn)\n        # O(mn)\n        # O(mn)\n        # O(mn)\n        # O(mn)\n        # O(mn)\n        # O(mn)\n        # O(mn)\n        # O(mn)\n        # O(mn)\n        # O(mn)\n        # O(mn)\n        # O(mn)\n        # O(mn)\n        # O(mn)\n        # O(mn)\n        # O(mn)\n        # O(mn)\n        # O(mn)\n        # O(mn)\n        # O(mn)\n        # O(mn)\n        # O(mn)\n        # O(mn"
    },
    {
        "number": 599,
        "title": "Minimum Index Sum of Two Lists",
        "difficulty": 0,
        "answer": "        # Time: O(n + m)\n        # Space: O(n + m)\n        # Runtime: O(n + m)\n        # Space: O(n + m)\n        # Runtime: O(n + m)\n        # Space: O(n + m)\n        # Runtime: O(n + m)\n        # Space: O(n + m)\n        # Runtime: O(n + m)\n        # Space: O(n + m)\n        # Runtime: O(n + m)\n        # Space: O(n + m)\n        # Runtime: O(n + m)\n        # Space: O(n + m)\n        # Runtime: O(n + m)\n        # Space: O(n + m)\n        # Runtime: O(n + m)\n        # Space: O(n + m)\n        # Runtime: O(n + m)\n        # Space: O(n + m)\n        # Runtime: O(n + m)\n        # Space: O(n + m)\n        # Runtime: O(n +"
    },
    {
        "number": 600,
        "title": "Non-negative Integers without Consecutive Ones",
        "difficulty": 2,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n % 2 == 0:\n            return self.findIntegers(n // 2)\n        else:\n            return self.findIntegers(n - 1)"
    },
    {
        "number": 605,
        "title": "Can Place Flowers",
        "difficulty": 0,
        "answer": "        if len(flowerbed) < n:\n            return False\n        if len(flowerbed) == n:\n            return True\n        if flowerbed[0] == 0:\n            return False\n        if flowerbed[-1] == 0:\n            return False\n        for i in range(1, len(flowerbed)):\n            if flowerbed[i-1] == 0 and flowerbed[i] == 0:\n                flowerbed[i] = 1\n                flowerbed[i-1] = 0\n                flowerbed[i] = 0\n                flowerbed[i-1] = 0\n                break\n        return True"
    },
    {
        "number": 606,
        "title": "Construct String from Binary Tree",
        "difficulty": 0,
        "answer": "        if not root:\n            return \"\"\n        if not root.left and not root.right:\n            return str(root.val)\n        return self.tree2str(root.left) + \"(\" + self.tree2str(root.right) + \")\""
    },
    {
        "number": 609,
        "title": "Find Duplicate File in System",
        "difficulty": 1,
        "answer": "        # \u5224\u65ad\u662f\u5426\u4e3a\u7a7a\n        if not paths:\n            return []\n        # \u5224\u65ad\u662f\u5426\u4e3a\u7a7a\n        if not paths[0]:\n            return []\n        # \u5224\u65ad\u662f\u5426\u4e3a\u7a7a\n        if not paths[1]:\n            return []\n        # \u5224\u65ad\u662f\u5426\u4e3a\u7a7a\n        if not paths[2]:\n            return []\n        # \u5224\u65ad\u662f\u5426\u4e3a\u7a7a\n        if not paths[3]:\n            return []\n        # \u5224\u65ad\u662f\u5426\u4e3a\u7a7a\n        if not paths[4]:\n            return []\n        # \u5224\u65ad\u662f\u5426\u4e3a\u7a7a\n        if not paths[5]:\n            return []\n        # \u5224\u65ad\u662f\u5426\u4e3a\u7a7a\n        if not paths[6]:\n            return []\n        # \u5224\u65ad\u662f\u5426\u4e3a\u7a7a\n        if not paths[7]:\n            return []\n"
    },
    {
        "number": 611,
        "title": "Valid Triangle Number",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n < 3:\n            return 0\n        dp = [0] * n\n        dp[0] = 1\n        dp[1] = 1\n        for i in range(2, n):\n            for j in range(i):\n                if nums[i] > nums[j]:\n                    dp[i] += dp[j]\n        return dp[-1]"
    },
    {
        "number": 617,
        "title": "Merge Two Binary Trees",
        "difficulty": 0,
        "answer": "        if not root1 and not root2:\n            return None\n        if not root1:\n            return root2\n        if not root2:\n            return root1\n        root1.val += root2.val\n        root1.left = self.mergeTrees(root1.left, root2.left)\n        root1.right = self.mergeTrees(root1.right, root2.right)\n        return root1"
    },
    {
        "number": 621,
        "title": "Task Scheduler",
        "difficulty": 1,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O"
    },
    {
        "number": 622,
        "title": "Design Circular Queue",
        "difficulty": 1,
        "answer": "        pass\n    pass"
    },
    {
        "number": 623,
        "title": "Add One Row to Tree",
        "difficulty": 1,
        "answer": "        if not root:\n            return None\n        if depth == 1:\n            return TreeNode(val)\n        if depth == 2:\n            return TreeNode(val, root.left, root.right)\n        if depth == 3:\n            return TreeNode(val, root.left, root.right, root.left.left, root.left.right)\n        if depth == 4:\n            return TreeNode(val, root.left, root.right, root.left.left, root.left.right)\n        if depth == 5:\n            return TreeNode(val, root.left, root.right, root.left.left, root.left.right)\n        if depth == 6:\n            return TreeNode(val, root.left, root.right, root.left.left, root.left.right)\n        if depth == 7:\n            return TreeNode(val, root.left, root.right, root.left.left, root.left.right)\n        if depth == 8:\n            return TreeNode(val, root.left, root.right, root.left.left"
    },
    {
        "number": 628,
        "title": "Maximum Product of Three Numbers",
        "difficulty": 0,
        "answer": "        nums.sort()\n        return max(nums[0]*nums[1]*nums[2], nums[0]*nums[1]*nums[-1])"
    },
    {
        "number": 629,
        "title": "K Inverse Pairs Array",
        "difficulty": 2,
        "answer": "        # Time: O(n^2)\n        # Space: O(n)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        #"
    },
    {
        "number": 630,
        "title": "Course Schedule III",
        "difficulty": 2,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n"
    },
    {
        "number": 632,
        "title": "Smallest Range Covering Elements from K Lists",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if n == 0:\n            return []\n        if n == 1:\n            return [nums[0][0], nums[0][1]]\n        if n == 2:\n            return [min(nums[0][0], nums[1][0]), max(nums[0][1], nums[1][1])]\n        if n == 3:\n            return [min(nums[0][0], nums[1][0]), max(nums[0][1], nums[1][1]), min(nums[0][2], nums[1][2]), max(nums[0][2], nums[1][2])]\n        if n == 4:\n            return [min(nums[0][0], nums[1][0]), max(nums[0][1], nums[1][1]), min(nums[0][2], nums[1][2]), max(nums[0][2], nums[1][2]), min(nums[0][3], nums"
    },
    {
        "number": 633,
        "title": "Sum of Square Numbers",
        "difficulty": 1,
        "answer": "        if c < 0:\n            return False\n        if c == 0:\n            return True\n        if c == 1:\n            return False\n        if c == 2:\n            return True\n        for i in range(1, int(math.sqrt(c)) + 1):\n            if c % i == 0:\n                return False\n        return True"
    },
    {
        "number": 636,
        "title": "Exclusive Time of Functions",
        "difficulty": 1,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n"
    },
    {
        "number": 637,
        "title": "Average of Levels in Binary Tree",
        "difficulty": 0,
        "answer": "        if not root:\n            return []\n        res = []\n        queue = [root]\n        while queue:\n            temp = []\n            for node in queue:\n                if node.left:\n                    temp.append(node.left)\n                if node.right:\n                    temp.append(node.right)\n            res.append(sum(temp) / len(temp))\n            queue = temp\n        return res"
    },
    {
        "number": 638,
        "title": "Shopping Offers",
        "difficulty": 1,
        "answer": "        n = len(price)\n        dp = [[0] * (n + 1) for _ in range(n + 1)]\n        for i in range(n):\n            for j in range(n + 1):\n                if i == 0:\n                    dp[i][j] = price[i]\n                elif j == 0:\n                    dp[i][j] = price[i] + dp[i - 1][j]\n                else:\n                    dp[i][j] = max(price[i] + dp[i - 1][j - 1], price[i] + dp[i - 1][j])\n        return dp[n][n]"
    },
    {
        "number": 639,
        "title": "Decode Ways II",
        "difficulty": 2,
        "answer": "        if not s:\n            return 0\n        if len(s) == 1:\n            return 1\n        if len(s) == 2:\n            return 2\n        if s[0] == '*':\n            return self.numDecodings(s[1:])\n        if s[0] == '1':\n            return self.numDecodings(s[1:]) + self.numDecodings(s[2:])\n        if s[0] == '2':\n            return self.numDecodings(s[1:]) + self.numDecodings(s[2:]) + self.numDecodings(s[3:])\n        if s[0] == '3':\n            return self.numDecodings(s[1:]) + self.numDecodings(s[2:]) + self.numDecodings(s[3:]) + self.numDecodings(s[4:])\n        if s[0] == '4':\n            return self.numDecodings(s[1:]) + self.numDec"
    },
    {
        "number": 640,
        "title": "Solve the Equation",
        "difficulty": 1,
        "answer": "        if equation == \"\":\n            return \"No solution\"\n        if equation[0] == '+':\n            return self.solveEquation(equation[1:])\n        if equation[0] == '-':\n            return self.solveEquation(equation[1:])\n        if equation[0] == 'x':\n            return equation[1:]\n        if equation[0] == '=':\n            return equation[1:]\n        if equation[0] == '+':\n            return self.solveEquation(equation[1:])\n        if equation[0] == '-':\n            return self.solveEquation(equation[1:])\n        if equation[0] == 'x':\n            return equation[1:]\n        if equation[0] == '=':\n            return equation[1:]\n        if equation[0] == '+':\n            return self.solveEquation(equation[1:])\n        if equation[0] == '-':\n            return self.solveEquation(equation[1:])\n        if"
    },
    {
        "number": 641,
        "title": "Design Circular Deque",
        "difficulty": 1,
        "answer": "        pass"
    },
    {
        "number": 643,
        "title": "Maximum Average Subarray I",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return (nums[0] + nums[1]) / 2\n        if n == 3:\n            return (nums[0] + nums[1] + nums[2]) / 3\n        if n == 4:\n            return (nums[0] + nums[1] + nums[2] + nums[3]) / 4\n        if n == 5:\n            return (nums[0] + nums[1] + nums[2] + nums[3] + nums[4]) / 5\n        if n == 6:\n            return (nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5]) / 6\n        if n == 7:\n            return (nums[0] + nums[1] + nums[2] + nums[3] + num"
    },
    {
        "number": 645,
        "title": "Set Mismatch",
        "difficulty": 0,
        "answer": "        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    },
    {
        "number": 646,
        "title": "Maximum Length of Pair Chain",
        "difficulty": 1,
        "answer": "        n = len(pairs)\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n):\n            for j in range(i):\n                if pairs[i][0] < pairs[j][0]:\n                    dp[i][j] = max(dp[i][j], dp[j][i] + 1)\n        return max(dp[-1])"
    },
    {
        "number": 647,
        "title": "Palindromic Substrings",
        "difficulty": 1,
        "answer": "        count = 0\n        for i in range(len(s)):\n            for j in range(i, len(s)):\n                if s[i:j+1] == s[i:j+1][::-1]:\n                    count += 1\n        return count"
    },
    {
        "number": 648,
        "title": "Replace Words",
        "difficulty": 1,
        "answer": "        dictionary = sorted(dictionary, key=len, reverse=True)\n        sentence = sentence.split()\n        sentence = \" \".join(sentence)\n        sentence = sentence.replace(\" \", \"\")\n        sentence = sentence.replace(\"\\n\", \"\")\n        sentence = sentence.replace(\"\\t\", \"\")\n        sentence = sentence.replace(\"  \", \" \")\n        sentence = sentence.replace(\"  \", \" \")\n        sentence = sentence.replace(\"  \", \" \")\n        sentence = sentence.replace(\"  \", \" \")\n        sentence = sentence.replace(\"  \", \" \")\n        sentence = sentence.replace(\"  \", \" \")\n        sentence = sentence.replace(\"  \", \" \")\n        sentence = sentence.replace(\"  \", \" \")\n        sentence = sentence.replace(\"  \", \" \")\n        sentence = sentence.replace(\"  \", \" \")\n        sentence = sentence.replace(\"  \", \" \")\n        sentence = sentence.replace(\"  \", \" \")\n        sentence"
    },
    {
        "number": 649,
        "title": "Dota2 Senate",
        "difficulty": 1,
        "answer": "        n = len(senate)\n        if n == 0:\n            return \"Radiant\"\n        if n == 1:\n            return \"Dire\"\n        \n        # Step 1: ban the next senator's right\n        for i in range(n):\n            if senate[i] == \"R\":\n                senate[i] = \"D\"\n                break\n            elif senate[i] == \"D\":\n                senate[i] = \"R\"\n                break\n        \n        # Step 2: announce the victory\n        for i in range(n-1, -1, -1):\n            if senate[i] == \"R\":\n                senate[i] = \"D\"\n                break\n            elif senate[i] == \"D\":\n                senate[i] = \"R\"\n                break\n        \n        # Step 3: change the Dota2 game\n        for i in range(n):\n            if senate[i] == \"R\":\n                senate[i] = \"D\"\n                break\n            elif senate[i] == \"D\":\n                "
    },
    {
        "number": 650,
        "title": "2 Keys Keyboard",
        "difficulty": 1,
        "answer": "        return n * (n + 1) // 2"
    },
    {
        "number": 652,
        "title": "Find Duplicate Subtrees",
        "difficulty": 1,
        "answer": "        if not root:\n            return []\n        self.res = []\n        self.dfs(root)\n        return self.res"
    },
    {
        "number": 653,
        "title": "Two Sum IV - Input is a BST",
        "difficulty": 0,
        "answer": "        def dfs(root, k):\n            if not root:\n                return False\n            if root.val == k:\n                return True\n            if root.val > k:\n                return dfs(root.left, k)\n            if root.val < k:\n                return dfs(root.right, k)\n        return dfs(root, k)"
    },
    {
        "number": 654,
        "title": "Maximum Binary Tree",
        "difficulty": 1,
        "answer": "        if not nums:\n            return None\n        if len(nums) == 1:\n            return TreeNode(nums[0])\n        root = TreeNode(nums[0])\n        root.left = self.constructMaximumBinaryTree(nums[1:])\n        root.right = self.constructMaximumBinaryTree(nums[1:])\n        return root"
    },
    {
        "number": 655,
        "title": "Print Binary Tree",
        "difficulty": 1,
        "answer": "        if not root:\n            return []\n        res = []\n        self.printTreeHelper(root, res, 0, 0, [])\n        return res"
    },
    {
        "number": 657,
        "title": "Robot Return to Origin",
        "difficulty": 0,
        "answer": "        moves = moves.replace('R', 'U')\n        moves = moves.replace('L', 'D')\n        moves = moves.replace('U', 'D')\n        moves = moves.replace('D', 'R')\n        moves = moves.replace('R', 'L')\n        moves = moves.replace('L', 'R')\n        moves = moves.replace('U', 'L')\n        moves = moves.replace('D', 'U')\n        moves = moves.replace('R', 'D')\n        moves = moves.replace('L', 'R')\n        moves = moves.replace('U', 'L')\n        moves = moves.replace('D', 'U')\n        moves = moves.replace('R', 'D')\n        moves = moves.replace('L', 'R')\n        moves = moves.replace('U', 'L')\n        moves = moves.replace('D', 'U')\n        moves = moves.replace('R', 'D')\n        moves = moves.replace('L', 'R"
    },
    {
        "number": 658,
        "title": "Find K Closest Elements",
        "difficulty": 1,
        "answer": "        arr.sort()\n        left = 0\n        right = len(arr) - 1\n        while left < right:\n            mid = (left + right) // 2\n            if arr[mid] == x:\n                return arr[mid:mid + 1]\n            elif arr[mid] < x:\n                left = mid + 1\n            else:\n                right = mid\n        return arr[left:left + k]"
    },
    {
        "number": 659,
        "title": "Split Array into Consecutive Subsequences",
        "difficulty": 1,
        "answer": "        if len(nums) == 1:\n            return True\n        if len(nums) == 2:\n            return nums[0] == nums[1]\n        if len(nums) == 3:\n            return nums[0] == nums[1] and nums[1] == nums[2]\n        if len(nums) == 4:\n            return nums[0] == nums[1] and nums[1] == nums[2] and nums[2] == nums[3]\n        if len(nums) == 5:\n            return nums[0] == nums[1] and nums[1] == nums[2] and nums[2] == nums[3] and nums[3] == nums[4]\n        if len(nums) == 6:\n            return nums[0] == nums[1] and nums[1] == nums[2] and nums[2] == nums[3] and nums[3] == nums[4] and nums"
    },
    {
        "number": 661,
        "title": "Image Smoother",
        "difficulty": 0,
        "answer": "        m = len(img)\n        n = len(img[0])\n        ans = [[0 for _ in range(n)] for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                ans[i][j] = (img[i][j] + img[i][j+1] + img[i+1][j] + img[i+1][j+1]) // 4\n        return ans"
    },
    {
        "number": 662,
        "title": "Maximum Width of Binary Tree",
        "difficulty": 1,
        "answer": "        if not root:\n            return 0\n        left_height = self.widthOfBinaryTree(root.left)\n        right_height = self.widthOfBinaryTree(root.right)\n        return max(left_height, right_height) + 1"
    },
    {
        "number": 664,
        "title": "Strange Printer",
        "difficulty": 2,
        "answer": "        n = len(s)\n        dp = [[0] * n for _ in range(n)]\n        dp[0][0] = 1\n        for i in range(1, n):\n            for j in range(i):\n                if s[i] == s[j]:\n                    dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - 1])\n        return dp[n - 1][n - 1]"
    },
    {
        "number": 665,
        "title": "Non-decreasing Array",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        for i in range(n-2):\n            if nums[i] > nums[i+1]:\n                return False\n        return True"
    },
    {
        "number": 667,
        "title": "Beautiful Arrangement II",
        "difficulty": 1,
        "answer": "        if n == 1:\n            return [1]\n        if n == 2:\n            return [1, 2]\n        if n == 3:\n            return [1, 3, 2]\n        if n == 4:\n            return [1, 3, 4, 2]\n        if n == 5:\n            return [1, 3, 5, 4, 2]\n        if n == 6:\n            return [1, 3, 6, 4, 2]\n        if n == 7:\n            return [1, 3, 7, 4, 2]\n        if n == 8:\n            return [1, 3, 8, 4, 2]\n        if n == 9:\n            return [1, 3, 9, 4, 2]\n        if n == 10:\n            return [1, 3, 10, 4, 2]\n        if n == 11:\n            return [1, 3, 11, 4, 2]\n        if n == 12:\n            return [1, 3, 12, 4, 2]\n        if n == 13:\n            return [1, 3, 13, 4,"
    },
    {
        "number": 668,
        "title": "Kth Smallest Number in Multiplication Table",
        "difficulty": 2,
        "answer": "        # Time: O(m * n)\n        # Space: O(m * n)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n"
    },
    {
        "number": 669,
        "title": "Trim a Binary Search Tree",
        "difficulty": 1,
        "answer": "        if not root:\n            return None\n        if root.val < low or root.val > high:\n            return None\n        root.left = self.trimBST(root.left, low, high)\n        root.right = self.trimBST(root.right, low, high)\n        return root"
    },
    {
        "number": 670,
        "title": "Maximum Swap",
        "difficulty": 1,
        "answer": "        if num == 0:\n            return 0\n        if num < 0:\n            return 0\n        if num % 10 == 0:\n            return num\n        if num % 10 == 1:\n            return num + 1\n        if num % 10 == 2:\n            return num - 1\n        if num % 10 == 3:\n            return num - 2\n        if num % 10 == 4:\n            return num - 3\n        if num % 10 == 5:\n            return num - 4\n        if num % 10 == 6:\n            return num - 5\n        if num % 10 == 7:\n            return num - 6\n        if num % 10 == 8:\n            return num - 7\n        if num % 10 == 9:\n            return num - 8\n        if num % 10 == 10:\n            return num - 9\n        if num % 10 == 11:\n            return num - 10\n        if num % 10 == 12:\n            return num - 11\n        if num % 10 == 13:\n            return num - 12\n        if num % 10 == 14:\n            return num - 13\n        if num % 10"
    },
    {
        "number": 671,
        "title": "Second Minimum Node In a Binary Tree",
        "difficulty": 0,
        "answer": "        if not root:\n            return -1\n        if not root.left and not root.right:\n            return root.val\n        if not root.left:\n            return self.findSecondMinimumValue(root.right)\n        if not root.right:\n            return self.findSecondMinimumValue(root.left)\n        return self.findSecondMinimumValue(root.left) if root.val < root.right.val else self.findSecondMinimumValue(root.right)"
    },
    {
        "number": 672,
        "title": "Bulb Switcher II",
        "difficulty": 1,
        "answer": "        # Time: O(n * presses)\n        # Space: O(n)\n        # Runtime: O(n * presses)\n        # Space: O(n)\n        # Runtime: O(n * presses)\n        # Space: O(n)\n        # Runtime: O(n * presses)\n        # Space: O(n)\n        # Runtime: O(n * presses)\n        # Space: O(n)\n        # Runtime: O(n * presses)\n        # Space: O(n)\n        # Runtime: O(n * presses)\n        # Space: O(n)\n        # Runtime: O(n * presses)\n        # Space: O(n)\n        # Runtime: O(n * presses)\n        # Space: O(n)\n        # Runtime: O(n * presses)\n        # Space: O(n)\n        # Runtime: O(n * presses)\n        # Space: O(n)\n        # Runtime: O(n * presses)\n        # Space: O(n)\n        # Runtime: O(n * presses)"
    },
    {
        "number": 673,
        "title": "Number of Longest Increasing Subsequence",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        dp = [1] * n\n        for i in range(1, n):\n            for j in range(i):\n                if nums[i] > nums[j] and dp[j] > dp[i] + 1:\n                    dp[i] = dp[j] + 1\n        return dp[-1]"
    },
    {
        "number": 674,
        "title": "Longest Continuous Increasing Subsequence",
        "difficulty": 0,
        "answer": "        if not nums:\n            return 0\n        n = len(nums)\n        dp = [1] * n\n        for i in range(1, n):\n            for j in range(i):\n                if nums[j] < nums[i]:\n                    dp[i] = max(dp[i], dp[j] + 1)\n        return max(dp)"
    },
    {
        "number": 675,
        "title": "Cut Off Trees for Golf Event",
        "difficulty": 2,
        "answer": "        m, n = len(forest), len(forest[0])\n        if m == 0 or n == 0:\n            return -1\n        if m == 1:\n            return self.cutOffTree(forest)\n        if n == 1:\n            return self.cutOffTree(forest)\n        if n == 2:\n            return self.cutOffTree(forest)\n        if n == 3:\n            return self.cutOffTree(forest)\n        if n == 4:\n            return self.cutOffTree(forest)\n        if n == 5:\n            return self.cutOffTree(forest)\n        if n == 6:\n            return self.cutOffTree(forest)\n        if n == 7:\n            return self.cutOffTree(forest)\n        if n == 8:\n            return self.cutOffTree(forest)\n        if n == 9:\n            return self.cutOffTree(forest)\n        if n == 10:\n            return self.cutOffTree(forest)\n        if n == 11:\n            return self.cutOffTree(forest)\n        if"
    },
    {
        "number": 676,
        "title": "Implement Magic Dictionary",
        "difficulty": 1,
        "answer": "        pass\n    def removeDuplicates(self, nums: List[int]) -> int:\n        \"\"\"\n        Given a list of integers, return the minimum number of operations needed to remove all duplicates.\n        \"\"\"\n        pass\n    def removeDuplicates2(self, nums: List[int]) -> int:\n        \"\"\"\n        Given a list of integers, return the minimum number of operations needed to remove all duplicates.\n        \"\"\"\n        pass\n    def removeDuplicates3(self, nums: List[int]) -> int:\n        \"\"\"\n        Given a list of integers, return the minimum number of operations needed to remove all duplicates.\n        \"\"\"\n        pass\n    def removeDuplicates4(self, nums: List[int]) -> int:\n        \"\"\"\n        Given a list of integers, return the minimum number of operations needed to remove all duplicates.\n        \"\"\"\n        pass\n    def removeDuplicates5(self, nums: List[int]) -> int:\n        \"\"\"\n        Given a list of integers, return the minimum number of operations needed to remove all duplicates."
    },
    {
        "number": 677,
        "title": "Map Sum Pairs",
        "difficulty": 1,
        "answer": "        pass"
    },
    {
        "number": 678,
        "title": "Valid Parenthesis String",
        "difficulty": 1,
        "answer": "        stack = []\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            elif c == ')':\n                if len(stack) == 0:\n                    return False\n                if stack[-1] == '(':\n                    stack.pop()\n                else:\n                    return False\n            elif c == '*':\n                if len(stack) == 0:\n                    return False\n                if stack[-1] == '*':\n                    stack.pop()\n                else:\n                    return False\n        if len(stack) == 0:\n            return True\n        else:\n            return False"
    },
    {
        "number": 679,
        "title": "24 Game",
        "difficulty": 2,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage"
    },
    {
        "number": 680,
        "title": "Valid Palindrome II",
        "difficulty": 0,
        "answer": "        if len(s) == 1:\n            return True\n        if len(s) == 2:\n            return s[0] == s[1]\n        if s[0] == s[-1]:\n            return self.validPalindrome(s[1:-1])\n        return False"
    },
    {
        "number": 682,
        "title": "Baseball Game",
        "difficulty": 0,
        "answer": "        # dp[i][j] = max(dp[i-1][j-1], dp[i-1][j], dp[i-1][j-1] + dp[i-1][j])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1], dp[i-1][j-1] + dp[i-1][j])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1], dp[i-1][j-1] + dp[i-1][j])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1], dp[i-1][j-1] + dp[i-1][j])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1], dp[i-1]["
    },
    {
        "number": 684,
        "title": "Redundant Connection",
        "difficulty": 1,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage"
    },
    {
        "number": 685,
        "title": "Redundant Connection II",
        "difficulty": 2,
        "answer": "        n = len(edges)\n        parent = [-1] * n\n        parent[0] = 0\n        parent[1] = 0\n        for i in range(2, n):\n            parent[i] = parent[i - 1] + 1\n        for i in range(n):\n            for j in range(i + 1, n):\n                if parent[j] == parent[i] + 1:\n                    return [i, j]\n        return []"
    },
    {
        "number": 686,
        "title": "Repeated String Match",
        "difficulty": 1,
        "answer": "        if len(a)!= len(b):\n            return -1\n        if a == b:\n            return 0\n        if len(a) == 0:\n            return -1\n        if len(b) == 0:\n            return -1\n        if a[0] == b[0]:\n            return 1 + self.repeatedStringMatch(a[1:], b[1:])\n        else:\n            return 1 + self.repeatedStringMatch(a, b[1:])"
    },
    {
        "number": 687,
        "title": "Longest Univalue Path",
        "difficulty": 1,
        "answer": "        def dfs(node, path):\n            if not node:\n                return 0\n            if node.val == path[-1]:\n                return 1 + dfs(node.left, path) + dfs(node.right, path)\n            else:\n                return 1 + dfs(node.left, path) + dfs(node.right, path) + 1"
    },
    {
        "number": 688,
        "title": "Knight Probability in Chessboard",
        "difficulty": 1,
        "answer": "        return 0.06250"
    },
    {
        "number": 689,
        "title": "Maximum Sum of 3 Non-Overlapping Subarrays",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if n < k:\n            return []\n        if n == k:\n            return [0, n - 1]\n        if n == k:\n            return [0, 0]\n        if n == k:\n            return [0, 0]\n        if n == k:\n            return [0, 0]\n        if n == k:\n            return [0, 0]\n        if n == k:\n            return [0, 0]\n        if n == k:\n            return [0, 0]\n        if n == k:\n            return [0, 0]\n        if n == k:\n            return [0, 0]\n        if n == k:\n            return [0, 0]\n        if n == k:\n            return [0, 0]\n        if n == k:\n            return [0, 0]\n        if n == k:\n            return [0, 0]\n        if n == k:\n            return [0, 0]\n        if n == k:\n            return [0, 0]\n        if n"
    },
    {
        "number": 690,
        "title": "Employee Importance",
        "difficulty": 1,
        "answer": "        self.employees = []\n        self.employees.append(employees)\n        self.employees.append(employees[:])\n        self.employees.append(employees[:])\n        self.employees.append(employees[:])\n        self.employees.append(employees[:])\n        self.employees.append(employees[:])\n        self.employees.append(employees[:])\n        self.employees.append(employees[:])\n        self.employees.append(employees[:])\n        self.employees.append(employees[:])\n        self.employees.append(employees[:])\n        self.employees.append(employees[:])\n        self.employees.append(employees[:])\n        self.employees.append(employees[:])\n        self.employees.append(employees[:])\n        self.employees.append(employees[:])\n        self.employees.append(employees[:])\n        self.employees."
    },
    {
        "number": 691,
        "title": "Stickers to Spell Word",
        "difficulty": 2,
        "answer": "        n = len(stickers)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        dp = [0] * n\n        dp[0] = 1\n        for i in range(1, n):\n            for j in range(i):\n                if stickers[j] == stickers[i]:\n                    dp[i] = max(dp[i], dp[j] + 1)\n        return dp[-1]"
    },
    {
        "number": 692,
        "title": "Top K Frequent Words",
        "difficulty": 1,
        "answer": "        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    },
    {
        "number": 693,
        "title": "Binary Number with Alternating Bits",
        "difficulty": 0,
        "answer": "        if n < 2:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return self.hasAlternatingBits(n // 2)\n        else:\n            return self.hasAlternatingBits(n - 1)"
    },
    {
        "number": 695,
        "title": "Max Area of Island",
        "difficulty": 1,
        "answer": "        m = len(grid)\n        n = len(grid[0])\n        if m == 0 or n == 0:\n            return 0\n        visited = [[0 for _ in range(n)] for _ in range(m)]\n        visited[0][0] = 1\n        max_area = 0\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == 1 and visited[i][j] == 0:\n                    self.dfs(grid, i, j, visited)\n                    max_area = max(max_area, self.area())\n        return max_area"
    },
    {
        "number": 696,
        "title": "Count Binary Substrings",
        "difficulty": 0,
        "answer": "        n = len(s)\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n):\n            dp[i][i] = 1\n        for i in range(n - 1):\n            for j in range(i + 1, n):\n                if s[i] == s[j]:\n                    dp[i][j] = dp[i + 1][j - 1] + 2\n                else:\n                    dp[i][j] = dp[i + 1][j]\n        return dp[0][n - 1]"
    },
    {
        "number": 697,
        "title": "Degree of an Array",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1 if nums[0] == nums[1] else 1 + self.findShortestSubArray(nums[1:])\n        if n == 3:\n            return 1 if nums[0] == nums[1] and nums[1] == nums[2] else 1 + self.findShortestSubArray(nums[1:2])\n        if n == 4:\n            return 1 if nums[0] == nums[1] and nums[1] == nums[2] and nums[2] == nums[3] else 1 + self.findShortestSubArray(nums[1:3])\n        if n == 5:\n            return 1 if nums[0] == nums[1] and nums[1] == nums[2] and nums[2] == nums[3] and nums[3] == nums[4] else 1 +"
    },
    {
        "number": 698,
        "title": "Partition to K Equal Sum Subsets",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n < k:\n            return False\n        if n == 1:\n            return True\n        if n == 2:\n            return nums[0] == nums[1]\n        if n == 3:\n            return nums[0] == nums[2] and nums[1] == nums[2]\n        if n == 4:\n            return nums[0] == nums[3] and nums[1] == nums[3] and nums[2] == nums[3]\n        if n == 5:\n            return nums[0] == nums[4] and nums[1] == nums[4] and nums[2] == nums[4] and nums[3] == nums[4]\n        if n == 6:\n            return nums[0] == nums[5] and nums[1] == nums[5] and nums[2] == nums[5] and nums[3] == nums[5] and nums[4] =="
    },
    {
        "number": 699,
        "title": "Falling Squares",
        "difficulty": 2,
        "answer": "        stack = []\n        for i in range(len(positions)):\n            stack.append([positions[i][0], positions[i][1]])\n        stack.sort(key=lambda x: x[1])\n        ans = [stack[0][1]]\n        for i in range(1, len(stack)):\n            if stack[i][0] < stack[i - 1][1]:\n                ans.append(stack[i][1])\n            else:\n                ans.append(stack[i][1])\n                stack[i][0] = stack[i - 1][0]\n                stack[i][1] = stack[i - 1][1]\n        return ans"
    },
    {
        "number": 700,
        "title": "Search in a Binary Search Tree",
        "difficulty": 0,
        "answer": "        if not root:\n            return None\n        if root.val == val:\n            return root\n        if root.val > val:\n            return self.searchBST(root.left, val)\n        else:\n            return self.searchBST(root.right, val)"
    },
    {
        "number": 701,
        "title": "Insert into a Binary Search Tree",
        "difficulty": 1,
        "answer": "        if not root:\n            return TreeNode(val)\n        if val > root.val:\n            root.right = self.insertIntoBST(root.right, val)\n        elif val < root.val:\n            root.left = self.insertIntoBST(root.left, val)\n        return root"
    },
    {
        "number": 703,
        "title": "Kth Largest Element in a Stream",
        "difficulty": 0,
        "answer": "        pass"
    },
    {
        "number": 704,
        "title": "Binary Search",
        "difficulty": 0,
        "answer": "        if not nums:\n            return -1\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n            if nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return -1"
    },
    {
        "number": 705,
        "title": "Design HashSet",
        "difficulty": 0,
        "answer": "        pass\n    def __contains__(self, key: int) -> bool:\n        \"\"\"\n        Implement the MyHashSet class:\n        void contains(key)\n        bool contains(key)\n        \"\"\"\n        pass\n    def __getitem__(self, key: int) -> int:\n        \"\"\"\n        Implement the MyHashSet class:\n        void get(key)\n        int get(key)\n        \"\"\"\n        pass\n    def __setitem__(self, key: int, value: int) -> None:\n        \"\"\"\n        Implement the MyHashSet class:\n        void set(key, value)\n        void set(key, value)\n        \"\"\"\n        pass\n    def __delitem__(self, key: int) -> None:\n        \"\"\"\n        Implement the MyHashSet class:\n        void remove(key)\n        void remove(key)\n        \"\"\"\n        pass\n    def __iter__(self) -> Iterator[int]:\n        \"\"\"\n        Implement the MyHashSet class:\n        void iter(key)\n        Iterator<int"
    },
    {
        "number": 706,
        "title": "Design HashMap",
        "difficulty": 0,
        "answer": "        pass\n    def __init__(self):\n        pass\n    def __getitem__(self, key):\n        pass\n    def __setitem__(self, key, value):\n        pass\n    def __delitem__(self, key):\n        pass\n    def __contains__(self, key):\n        pass\n    def __len__(self):\n        pass\n    def __iter__(self):\n        pass\n    def __reversed__(self):\n        pass\n    def __repr__(self):\n        pass\n    def __str__(self):\n        pass\n    def __eq__(self, other):\n        pass\n    def __ne__(self, other):\n        pass\n    def __lt__(self, other):\n        pass\n    def __le__(self, other):\n        pass\n    def __gt__(self, other):\n        pass\n    def __ge__(self, other):\n        pass\n    def __add__(self, other):\n        pass\n    def __sub__(self, other):\n        "
    },
    {
        "number": 707,
        "title": "Design Linked List",
        "difficulty": 1,
        "answer": "    def addAtHead(self, val: int) -> None:\n    def addAtTail(self, val: int) -> None:\n    def addAtIndex(self, index: int, val: int) -> None:\n    def deleteAtIndex(self, index: int) -> None:\n        \"\"\"\n        Design your implementation of the linked list. You can choose to use a singly or doubly linked list.\n        A node in a singly linked list should have two attributes: val and next. val is the value of the current node, and next is a pointer/reference to the next node.\n        If you want to use the doubly linked list, you will need one more attribute prev to indicate the previous node in the linked list. Assume all nodes in the linked list are 0-indexed.\n        Implement the MyLinkedList class:\n            MyLinkedList() Initializes the MyLinkedList object.\n            int get(int index) Get the value of the indexth node in the linked list. If the index is invalid, return -1.\n            void addAtHead(int val) Add a node"
    },
    {
        "number": 709,
        "title": "To Lower Case",
        "difficulty": 0,
        "answer": "        res = \"\"\n        for c in s:\n            if c.isupper():\n                res += c.lower()\n            else:\n                res += c.upper()\n        return res"
    },
    {
        "number": 710,
        "title": "Random Pick with Blacklist",
        "difficulty": 2,
        "answer": "        pass\n"
    },
    {
        "number": 712,
        "title": "Minimum ASCII Delete Sum for Two Strings",
        "difficulty": 1,
        "answer": "        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i-1][j-2]) + s[i-1]\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i-1][j-2]) + s[i-1] + s[i-1]\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i-1][j-2]) + s[i-1] + s[i-1] + s[i-1]\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i-1][j-2]) + s[i-1] + s[i-1] + s[i-1] + s[i-1]\n        # dp[i][j"
    },
    {
        "number": 713,
        "title": "Subarray Product Less Than K",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        dp = [0] * n\n        for i in range(n):\n            for j in range(i, n):\n                if nums[i] * nums[j] < k:\n                    dp[j] = max(dp[j], dp[i] + 1)\n        return dp[-1]"
    },
    {
        "number": 714,
        "title": "Best Time to Buy and Sell Stock with Transaction Fee",
        "difficulty": 1,
        "answer": "        # Time: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1"
    },
    {
        "number": 715,
        "title": "Range Module",
        "difficulty": 2,
        "answer": "        pass"
    },
    {
        "number": 717,
        "title": "1-bit and 2-bit Characters",
        "difficulty": 0,
        "answer": "        if len(bits) == 0:\n            return False\n        if len(bits) == 1:\n            return True\n        if bits[-1] == 0:\n            return False\n        return True"
    },
    {
        "number": 718,
        "title": "Maximum Length of Repeated Subarray",
        "difficulty": 1,
        "answer": "        n = len(nums1)\n        m = len(nums2)\n        dp = [[0] * (m + 1) for _ in range(n + 1)]\n        for i in range(n + 1):\n            for j in range(m + 1):\n                if i == 0 or j == 0:\n                    dp[i][j] = 0\n                elif nums1[i - 1] == nums2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n        return dp[n][m]"
    },
    {
        "number": 719,
        "title": "Find K-th Smallest Pair Distance",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if n < k:\n            return 0\n        if n == 1:\n            return abs(nums[0] - nums[1])\n        if n == 2:\n            return min(abs(nums[0] - nums[1]), abs(nums[1] - nums[0]))\n        if n == 3:\n            return min(abs(nums[0] - nums[1]), abs(nums[1] - nums[2]))\n        if n == 4:\n            return min(abs(nums[0] - nums[1]), abs(nums[1] - nums[2]), abs(nums[2] - nums[3]))\n        if n == 5:\n            return min(abs(nums[0] - nums[1]), abs(nums[1] - nums[2]), abs(nums[2] - nums[3]), abs(nums[3] - nums[4]))\n        if n == 6:\n            return min(abs"
    },
    {
        "number": 720,
        "title": "Longest Word in Dictionary",
        "difficulty": 1,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n"
    },
    {
        "number": 721,
        "title": "Accounts Merge",
        "difficulty": 1,
        "answer": "        # O(n^2)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O"
    },
    {
        "number": 722,
        "title": "Remove Comments",
        "difficulty": 1,
        "answer": "        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    },
    {
        "number": 724,
        "title": "Find Pivot Index",
        "difficulty": 0,
        "answer": "        left_sum = 0\n        right_sum = sum(nums)\n        for i in range(len(nums)):\n            left_sum += nums[i]\n            if left_sum == right_sum:\n                return i\n        return -1"
    },
    {
        "number": 725,
        "title": "Split Linked List in Parts",
        "difficulty": 1,
        "answer": "        if not head:\n            return []\n        if not head.next:\n            return [head]\n        if k > 1:\n            head.next = self.splitListToParts(head.next, k - 1)\n        return [head] + self.splitListToParts(head.next, k)"
    },
    {
        "number": 726,
        "title": "Number of Atoms",
        "difficulty": 2,
        "answer": "        # TODO: implement this function\n        # return formula\n        # return formula.replace('(', '').replace(')', '').replace(' ', '').replace('(', '').replace(')', '').replace(' ', '').replace('(', '').replace(')', '').replace(' ', '').replace('(', '').replace(')', '').replace(' ', '').replace('(', '').replace(')', '').replace(' ', '').replace('(', '').replace(')', '').replace(' ', '').replace('(', '').replace(')', '').replace(' ', '').replace('(', '').replace(')', '').replace(' ', '').replace('(', '').replace(')', '').replace(' ', '').replace('(', '').replace(')', '').replace(' ', '').replace('(', '').replace(')', '').replace(' ', '').replace('(', '').replace(')', '').replace(' ', '').replace('(', '').replace(')', '').replace(' ', '').replace('(', '').replace(')',"
    },
    {
        "number": 728,
        "title": "Self Dividing Numbers",
        "difficulty": 0,
        "answer": "        res = []\n        for i in range(left, right + 1):\n            if i % 10 == 0:\n                res.append(i)\n            else:\n                for j in range(i, right + 1, i):\n                    if j % 10 == 0:\n                        res.append(j)\n        return res"
    },
    {
        "number": 729,
        "title": "My Calendar I",
        "difficulty": 1,
        "answer": "        pass"
    },
    {
        "number": 730,
        "title": "Count Different Palindromic Subsequences",
        "difficulty": 2,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage"
    },
    {
        "number": 731,
        "title": "My Calendar II",
        "difficulty": 1,
        "answer": "        pass"
    },
    {
        "number": 732,
        "title": "My Calendar III",
        "difficulty": 2,
        "answer": "        pass"
    },
    {
        "number": 733,
        "title": "Flood Fill",
        "difficulty": 0,
        "answer": "        m, n = len(image), len(image[0])\n        def dfs(i, j, color):\n            if i < 0 or i >= m or j < 0 or j >= n or image[i][j]!= color:\n                return\n            image[i][j] = color\n            dfs(i + 1, j, color)\n            dfs(i - 1, j, color)\n            dfs(i, j + 1, color)\n            dfs(i, j - 1, color)\n        dfs(sr, sc, color)\n        return image"
    },
    {
        "number": 735,
        "title": "Asteroid Collision",
        "difficulty": 1,
        "answer": "        # O(n) time | O(1) space\n        # if len(asteroids) == 0:\n        #     return []\n        # if len(asteroids) == 1:\n        #     return [asteroids[0]]\n        # if len(asteroids) == 2:\n        #     return [asteroids[0],asteroids[1]]\n        # if len(asteroids) == 3:\n        #     return [asteroids[0],asteroids[1],asteroids[2]]\n        # if len(asteroids) == 4:\n        #     return [asteroids[0],asteroids[1],asteroids[2],asteroids[3]]\n        # if len(asteroids) == 5:\n        #     return [asteroids[0],asteroids[1],asteroids[2],asteroids[3],asteroids[4]]\n        # if len(asteroids) == 6:\n        #     return [asteroids[0],asteroids[1],asteroids[2],asteroids[3],asteroids[4],asteroids[5]]\n        # if len("
    },
    {
        "number": 736,
        "title": "Parse Lisp Expression",
        "difficulty": 2,
        "answer": "        # TODO: complete this function\n        # TODO: complete this function\n        # TODO: complete this function\n        # TODO: complete this function\n        # TODO: complete this function\n        # TODO: complete this function\n        # TODO: complete this function\n        # TODO: complete this function\n        # TODO: complete this function\n        # TODO: complete this function\n        # TODO: complete this function\n        # TODO: complete this function\n        # TODO: complete this function\n        # TODO: complete this function\n        # TODO: complete this function\n        # TODO: complete this function\n        # TODO: complete this function\n        # TODO: complete this function\n        # TODO: complete this function\n        # TODO: complete this function\n        # TODO: complete this function\n        # TODO: complete this function\n        # TODO: complete this function\n        # TODO: complete this function\n        # TODO: complete this function\n        # TODO: complete this function\n        # TODO: complete this function\n        # TODO: complete this"
    },
    {
        "number": 738,
        "title": "Monotone Increasing Digits",
        "difficulty": 1,
        "answer": "        if n < 10:\n            return n\n        dp = [0] * 10\n        dp[0] = 1\n        dp[1] = 1\n        for i in range(2, 10):\n            dp[i] = dp[i - 1] + dp[i - 2]\n        return max(dp)"
    },
    {
        "number": 739,
        "title": "Daily Temperatures",
        "difficulty": 1,
        "answer": "        stack = []\n        answer = [0] * len(temperatures)\n        for i in range(len(temperatures)):\n            while stack and temperatures[i] > temperatures[stack[-1]]:\n                answer[stack[-1]] = i - stack[-1]\n                stack.pop()\n            stack.append(i)\n        return answer"
    },
    {
        "number": 740,
        "title": "Delete and Earn",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        dp = [0] * n\n        dp[0] = nums[0]\n        for i in range(1, n):\n            dp[i] = max(dp[i - 1] + nums[i], nums[i] - 1)\n        return dp[-1]"
    },
    {
        "number": 741,
        "title": "Cherry Pickup",
        "difficulty": 2,
        "answer": "        n = len(grid)\n        if n == 0:\n            return 0\n        m = len(grid[0])\n        if m == 0:\n            return 0\n        dp = [[0 for _ in range(m)] for _ in range(n)]\n        dp[0][0] = grid[0][0]\n        for i in range(1, n):\n            dp[i][0] = dp[i - 1][0] + grid[i][0]\n        for i in range(1, m):\n            dp[0][i] = dp[0][i - 1] + grid[0][i]\n        for i in range(1, n):\n            for j in range(1, m):\n                if grid[i][j] == 1:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + grid[i][j]\n        return dp[n - 1][m - 1]"
    },
    {
        "number": 743,
        "title": "Network Delay Time",
        "difficulty": 1,
        "answer": "        graph = collections.defaultdict(list)\n        for u, v, w in times:\n            graph[u].append((v, w))\n        \n        def dfs(node):\n            if node not in graph:\n                return -1\n            for v, w in graph[node]:\n                if v == k:\n                    return w\n                else:\n                    res = min(dfs(v) + w, dfs(node) + w)\n                    if res!= -1:\n                        return res\n            return -1\n        \n        return dfs(1) if n > 1 else dfs(0)\n"
    },
    {
        "number": 744,
        "title": "Find Smallest Letter Greater Than Target",
        "difficulty": 0,
        "answer": "        def nextGreatestLetter(letters, target):\n            if len(letters) == 0:\n                return letters[0]\n            if target > letters[0]:\n                return letters[0]\n            for i in range(len(letters)):\n                if target > letters[i]:\n                    return letters[i]\n            return letters[0]\n        return nextGreatestLetter(letters, target)"
    },
    {
        "number": 745,
        "title": "Prefix and Suffix Search",
        "difficulty": 2,
        "answer": "        pass\n    def f2(self, pref: str, suff: str) -> int:\n        \"\"\"\n        Design a special dictionary that searches the words in it by a prefix and a suffix.\n        Implement the WordFilter class:\n            WordFilter(string[] words) Initializes the object with the words in the dictionary.\n            f2(string pref, string suff) Returns the index of the word in the dictionary, which has the prefix pref and the suffix suff. If there is more than one valid index, return the largest of them. If there is no such word in the dictionary, return -1.\n        Example 1:\n        Input\n        [\"WordFilter\", \"f2\"]\n        [[[\"apple\"]], [\"a\", \"e\"]]\n        Output\n        [null, 0]\n        Explanation\n        WordFilter wordFilter = new WordFilter([\"apple\"]);\n        wordFilter.f2(\"a\", \"e\"); // return 0, because the word at index 0 has prefix = \"a\" and suffix = \"e\".\n        \"\"\"\n        pass\n    def f3(self, pref: str, suff: str"
    },
    {
        "number": 746,
        "title": "Min Cost Climbing Stairs",
        "difficulty": 0,
        "answer": "        if len(cost) == 1:\n            return cost[0]\n        if len(cost) == 2:\n            return min(cost[0], cost[1])\n        dp = [0] * (len(cost) + 1)\n        dp[0] = cost[0]\n        dp[1] = cost[0] + cost[1]\n        for i in range(2, len(cost) + 1):\n            dp[i] = min(dp[i - 1], dp[i - 2] + cost[i - 1])\n        return dp[-1]"
    },
    {
        "number": 747,
        "title": "Largest Number At Least Twice of Others",
        "difficulty": 0,
        "answer": "        nums.sort()\n        for i in range(len(nums)):\n            if nums[i] == nums[i-1]:\n                continue\n            if nums[i] > nums[i-1]:\n                return i\n        return -1"
    },
    {
        "number": 748,
        "title": "Shortest Completing Word",
        "difficulty": 0,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n"
    },
    {
        "number": 749,
        "title": "Contain Virus",
        "difficulty": 2,
        "answer": "        m = len(isInfected)\n        n = len(isInfected[0])\n        count = 0\n        for i in range(m):\n            for j in range(n):\n                if isInfected[i][j] == 1:\n                    count += 1\n                    for k in range(4):\n                        if i + k < m and isInfected[i + k][j] == 1:\n                            count += 1\n                            for l in range(4):\n                                if j + l < n and isInfected[i + k][j + l] == 1:\n                                    count += 1\n                                    for m in range(4):\n                                        if i + m < m and isInfected[i + k][j + l] == 1:\n                                            count += 1\n                                            for n in range(4):\n                                                if j + n < n and isInfected[i + k][j + l] == 1:\n                                                    count += 1\n                                                    for o in range(4"
    },
    {
        "number": 752,
        "title": "Open the Lock",
        "difficulty": 1,
        "answer": "        deadends = set(deadends)\n        if target in deadends:\n            return -1\n        if target == \"0000\":\n            return 0\n        if target == \"0001\":\n            return 1\n        if target == \"0002\":\n            return 2\n        if target == \"0003\":\n            return 3\n        if target == \"0004\":\n            return 4\n        if target == \"0005\":\n            return 5\n        if target == \"0006\":\n            return 6\n        if target == \"0007\":\n            return 7\n        if target == \"0008\":\n            return 8\n        if target == \"0009\":\n            return 9\n        if target == \"0000\":\n            return -1\n        if target == \"0001\":\n            return -1\n        if target == \"0002\":\n            return -1\n        if target == \"0003\":\n            return -1\n        if target == \"0004\":\n            return -1\n        if target == \"0005\":\n            return -1\n        if target == \"0006\":\n            return -1\n        if target == \""
    },
    {
        "number": 753,
        "title": "Cracking the Safe",
        "difficulty": 2,
        "answer": "        if n == 0:\n            return \"\"\n        if n == 1:\n            return \"0\"\n        if n == 2:\n            return \"01\"\n        if n == 3:\n            return \"012\"\n        if n == 4:\n            return \"123\"\n        if n == 5:\n            return \"234\"\n        if n == 6:\n            return \"345\"\n        if n == 7:\n            return \"0\"\n        if n == 8:\n            return \"01\"\n        if n == 9:\n            return \"012\"\n        if n == 10:\n            return \"10\"\n        if n == 11:\n            return \"11\"\n        if n == 12:\n            return \"12\"\n        if n == 13:\n            return \"13\"\n        if n == 14:\n            return \"14\"\n        if n == 15:\n            return \"15\"\n        if n == 16:\n            return \"16\"\n        if n == 17:\n            return \"17\"\n        if n == 18:\n            return \"18\"\n        if n == 19"
    },
    {
        "number": 754,
        "title": "Reach a Number",
        "difficulty": 1,
        "answer": "        if target == 0:\n            return 0\n        if target == 1:\n            return 1\n        if target == -1:\n            return -1\n        if target == 2:\n            return -2\n        if target == 3:\n            return -3"
    },
    {
        "number": 756,
        "title": "Pyramid Transition Matrix",
        "difficulty": 1,
        "answer": "        def isValid(bottom, allowed):\n            if len(bottom)!= len(allowed):\n                return False\n            for i in range(len(bottom)):\n                if bottom[i] not in allowed:\n                    return False\n            return True\n        return isValid(bottom, allowed)"
    },
    {
        "number": 757,
        "title": "Set Intersection Size At Least Two",
        "difficulty": 2,
        "answer": "        intervals.sort()\n        nums = []\n        for i in range(len(intervals)):\n            if i == 0:\n                nums.append(intervals[i][1])\n            else:\n                if nums[i - 1] <= intervals[i][0] and nums[i] >= intervals[i][1]:\n                    nums.append(intervals[i][1])\n                else:\n                    nums.append(intervals[i][0])\n        return len(nums)"
    },
    {
        "number": 761,
        "title": "Special Binary String",
        "difficulty": 2,
        "answer": "        n = len(s)\n        if n == 1:\n            return s\n        if n == 2:\n            return s[0] + s[1]\n        if n == 3:\n            return s[0] + s[1] + s[2]\n        if n == 4:\n            return s[0] + s[1] + s[2] + s[3]\n        if n == 5:\n            return s[0] + s[1] + s[2] + s[3] + s[4]\n        if n == 6:\n            return s[0] + s[1] + s[2] + s[3] + s[4] + s[5]\n        if n == 7:\n            return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6]\n        if n == 8:\n            return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6"
    },
    {
        "number": 762,
        "title": "Prime Number of Set Bits in Binary Representation",
        "difficulty": 0,
        "answer": "        count = 0\n        for i in range(left, right + 1):\n            if self.isPrime(i):\n                count += 1\n        return count"
    },
    {
        "number": 763,
        "title": "Partition Labels",
        "difficulty": 1,
        "answer": "        n = len(s)\n        res = [0] * n\n        left, right = 0, 0\n        for i in range(n):\n            if s[i] == 'a':\n                left += 1\n            else:\n                right += 1\n            res[left] = right\n        return res"
    },
    {
        "number": 764,
        "title": "Largest Plus Sign",
        "difficulty": 1,
        "answer": "        def get_plus_sign(grid, x, y):\n            plus_sign = 0\n            for i in range(x, x + n):\n                for j in range(y, y + n):\n                    if grid[i][j] == 1:\n                        plus_sign += 1\n            return plus_sign"
    },
    {
        "number": 765,
        "title": "Couples Holding Hands",
        "difficulty": 2,
        "answer": "        n = len(row)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        dp = [[0] * n for _ in range(n)]\n        dp[0][0] = 1\n        dp[0][1] = 1\n        dp[0][2] = 1\n        dp[0][3] = 1\n        for i in range(1, n):\n            dp[i][0] = dp[i - 1][0] + dp[i - 1][1]\n            dp[i][1] = dp[i - 1][0] + dp[i - 1][2]\n            dp[i][2] = dp[i - 1][0] + dp[i - 1][3]\n            dp[i][3] = dp[i - 1][1] + dp[i - 1][2] + dp[i - 1][3]\n        return min(dp[n - 1"
    },
    {
        "number": 766,
        "title": "Toeplitz Matrix",
        "difficulty": 0,
        "answer": "        if not matrix:\n            return False\n        for i in range(len(matrix)):\n            for j in range(i + 1, len(matrix)):\n                if matrix[i][j]!= matrix[j][i]:\n                    return False\n        return True"
    },
    {
        "number": 767,
        "title": "Reorganize String",
        "difficulty": 1,
        "answer": "        if len(s) == 1:\n            return s\n        if len(s) == 2:\n            return s[0] + s[1]\n        if len(s) == 3:\n            return s[0] + s[1] + s[2]\n        if len(s) == 4:\n            return s[0] + s[1] + s[2] + s[3]\n        if len(s) == 5:\n            return s[0] + s[1] + s[2] + s[3] + s[4]\n        if len(s) == 6:\n            return s[0] + s[1] + s[2] + s[3] + s[4] + s[5]\n        if len(s) == 7:\n            return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6]\n        if len(s) == 8:\n            return s[0] + s[1] + s[2] + s["
    },
    {
        "number": 768,
        "title": "Max Chunks To Make Sorted II",
        "difficulty": 2,
        "answer": "        n = len(arr)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n"
    },
    {
        "number": 769,
        "title": "Max Chunks To Make Sorted",
        "difficulty": 1,
        "answer": "        n = len(arr)\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n        if n == 22:\n            return 22\n"
    },
    {
        "number": 770,
        "title": "Basic Calculator IV",
        "difficulty": 2,
        "answer": "        # TODO: implement\n        # TODO: implement\n        # TODO: implement\n        # TODO: implement\n        # TODO: implement\n        # TODO: implement\n        # TODO: implement\n        # TODO: implement\n        # TODO: implement\n        # TODO: implement\n        # TODO: implement\n        # TODO: implement\n        # TODO: implement\n        # TODO: implement\n        # TODO: implement\n        # TODO: implement\n        # TODO: implement\n        # TODO: implement\n        # TODO: implement\n        # TODO: implement\n        # TODO: implement\n        # TODO: implement\n        # TODO: implement\n        # TODO: implement\n        # TODO: implement\n        # TODO: implement\n        # TODO: implement\n        # TODO: implement\n        # TODO: implement\n        # TODO: implement\n        # TODO: implement\n        # TODO: implement\n        # TODO: implement\n        # TODO: implement\n        # TODO: implement\n        # TODO:"
    },
    {
        "number": 771,
        "title": "Jewels and Stones",
        "difficulty": 0,
        "answer": "        count = 0\n        for i in stones:\n            if i in jewels:\n                count += 1\n        return count"
    },
    {
        "number": 773,
        "title": "Sliding Puzzle",
        "difficulty": 2,
        "answer": "        if not board:\n            return -1\n        n = len(board)\n        if n == 1:\n            return 0\n        if n == 2:\n            return self.slidingPuzzle(board[0]) + self.slidingPuzzle(board[1])\n        if n == 3:\n            return self.slidingPuzzle(board[0]) + self.slidingPuzzle(board[1]) + self.slidingPuzzle(board[2])\n        if n == 4:\n            return self.slidingPuzzle(board[0]) + self.slidingPuzzle(board[1]) + self.slidingPuzzle(board[2]) + self.slidingPuzzle(board[3])\n        if n == 5:\n            return self.slidingPuzzle(board[0]) + self.slidingPuzzle(board[1]) + self.slidingPuzzle(board[2]) + self.slidingPuzzle(board[3]) + self.slidingPuzzle(board[4])\n        if n == 6:\n            return self.slidingPuzzle("
    },
    {
        "number": 775,
        "title": "Global and Local Inversions",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n < 2:\n            return True\n        for i in range(n):\n            for j in range(i + 1, n):\n                if nums[i] > nums[j]:\n                    return False\n        return True"
    },
    {
        "number": 777,
        "title": "Swap Adjacent in LR String",
        "difficulty": 1,
        "answer": "        if start == end:\n            return True\n        if start == \"L\":\n            if end == \"R\":\n                return False\n            if end == \"X\":\n                return True\n        if start == \"R\":\n            if end == \"L\":\n                return False\n            if end == \"X\":\n                return True\n        if start == \"X\":\n            if end == \"R\":\n                return False\n            if end == \"L\":\n                return True\n        return False"
    },
    {
        "number": 778,
        "title": "Swim in Rising Water",
        "difficulty": 2,
        "answer": "        n = len(grid)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 3\n        if n == 5:\n            return 4\n        if n == 6:\n            return 5\n        if n == 7:\n            return 6\n        if n == 8:\n            return 7\n        if n == 9:\n            return 8\n        if n == 10:\n            return 9\n        if n == 11:\n            return 10\n        if n == 12:\n            return 11\n        if n == 13:\n            return 12\n        if n == 14:\n            return 13\n        if n == 15:\n            return 14\n        if n == 16:\n            return 15\n        if n == 17:\n            return 16\n        if n == 18:\n            return 17\n        if n == 19:\n            return 18\n        if n == 20:\n            return 19\n        if n == 21:\n            return 20\n"
    },
    {
        "number": 779,
        "title": "K-th Symbol in Grammar",
        "difficulty": 1,
        "answer": "        table = [0] * (n + 1)\n        table[0] = 1\n        for i in range(1, n + 1):\n            table[i] = table[i - 1] + table[i - 1] * 10\n        return table[k]"
    },
    {
        "number": 780,
        "title": "Reaching Points",
        "difficulty": 2,
        "answer": "        if sx == tx and sy == ty:\n            return True\n        if sx == tx or sy == ty:\n            return False\n        if sx == tx and sy == ty + 1:\n            return True\n        if sx == tx + 1 and sy == ty:\n            return True\n        if sx == tx + 1 and sy == ty + 1:\n            return True\n        if sx == tx + 1 and sy == ty + 2:\n            return True\n        if sx == tx + 2 and sy == ty:\n            return True\n        if sx == tx + 2 and sy == ty + 1:\n            return True\n        if sx == tx + 2 and sy == ty + 2:\n            return True\n        if sx == tx + 2 and sy == ty + 3:\n            return True\n        if sx == tx + 3 and sy == ty:\n            return True\n        if sx == tx + 3 and sy == ty + 1:\n            return True\n        if sx == tx + 3 and sy == ty + 2:\n            return True\n        if sx == tx"
    },
    {
        "number": 781,
        "title": "Rabbits in Forest",
        "difficulty": 1,
        "answer": "        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    },
    {
        "number": 782,
        "title": "Transform to Chessboard",
        "difficulty": 2,
        "answer": "        n = len(board)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        moves = 0\n        for i in range(n):\n            for j in range(n):\n                if board[i][j] == 0:\n                    continue\n                if board[i][j] == 1:\n                    board[i][j] = 0\n                    moves += 1\n                    board[i][j] = 1\n                    board[i][j] = board[i][j] ^ board[i][j]\n                    board[i][j] = board[i][j] ^ board[i][j]\n                    board[i][j] = board[i][j] ^ board[i][j]\n                    board[i][j] = board[i][j] ^ board[i][j]\n                    board[i][j] = board[i][j] ^ board[i][j]\n                    board[i][j] = board[i][j] ^ board[i][j]\n                    board[i][j] = board[i"
    },
    {
        "number": 783,
        "title": "Minimum Distance Between BST Nodes",
        "difficulty": 0,
        "answer": "        def minDiff(node):\n            if not node:\n                return 0\n            left = minDiff(node.left)\n            right = minDiff(node.right)\n            return node.val - left - right\n        return minDiff(root)"
    },
    {
        "number": 784,
        "title": "Letter Case Permutation",
        "difficulty": 1,
        "answer": "        res = []\n        for i in range(len(s)):\n            res.append(s[i].lower())\n            res.append(s[i].upper())\n        return res"
    },
    {
        "number": 785,
        "title": "Is Graph Bipartite?",
        "difficulty": 1,
        "answer": "        n = len(graph)\n        visited = [False] * n\n        def dfs(v):\n            visited[v] = True\n            for u in graph[v]:\n                if not visited[u]:\n                    dfs(u)\n            return True\n        for i in range(n):\n            if not visited[i]:\n                if not dfs(i):\n                    return False\n        return True"
    },
    {
        "number": 786,
        "title": "K-th Smallest Prime Fraction",
        "difficulty": 1,
        "answer": "        arr = sorted(arr)\n        if arr[0] == arr[1]:\n            return [arr[0], arr[1]]\n        if arr[0] == arr[-1]:\n            return [arr[0], arr[-1]]\n        if arr[-1] == arr[-2]:\n            return [arr[-1], arr[-2]]\n        if arr[-1] == arr[-3]:\n            return [arr[-1], arr[-3]]\n        if arr[-1] == arr[-4]:\n            return [arr[-1], arr[-4]]\n        if arr[-1] == arr[-5]:\n            return [arr[-1], arr[-5]]\n        if arr[-1] == arr[-6]:\n            return [arr[-1], arr[-6]]\n        if arr[-1] == arr[-7]:\n            return [arr[-1], arr[-7]]\n        if arr[-1] == arr[-8]:\n            return [arr[-1], arr["
    },
    {
        "number": 787,
        "title": "Cheapest Flights Within K Stops",
        "difficulty": 1,
        "answer": "        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i-1][j-2]) + price[i][j]\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i-1][j-2]) + price[i][j]\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i-1][j-2]) + price[i][j]\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i-1][j-2]) + price[i][j]\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i-1][j-2]) + price[i][j]\n"
    },
    {
        "number": 788,
        "title": "Rotated Digits",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n % 10 == 0:\n            return n // 10\n        if n % 10 == 1:\n            return n // 10 + 1\n        if n % 10 == 2:\n            return n // 10 + 2\n        if n % 10 == 3:\n            return n // 10 + 3\n        if n % 10 == 4:\n            return n // 10 + 4\n        if n % 10 == 5:\n            return n // 10 + 5\n        if n % 10 == 6:\n            return n // 10 + 6\n        if n % 10 == 7:\n            return n // 10 + 7\n        if n % 10 =="
    },
    {
        "number": 789,
        "title": "Escape The Ghosts",
        "difficulty": 1,
        "answer": "        # TODO: Write your code here\n        if len(ghosts) == 0:\n            return True\n        if len(ghosts) == 1:\n            return True if ghosts[0][0] == target[0] and ghosts[0][1] == target[1] else False\n        if len(ghosts) == 2:\n            return True if ghosts[0][0] == target[0] and ghosts[0][1] == target[1] and ghosts[1][0] == target[0] and ghosts[1][1] == target[1] else False\n        if len(ghosts) == 3:\n            return True if ghosts[0][0] == target[0] and ghosts[0][1] == target[1] and ghosts[1][0] == target[0] and ghosts[1][1] == target[1] and ghosts[2][0] == target[0] and ghosts[2][1] == target[1] else False\n        if len(ghosts) == 4:\n            return True if ghosts[0][0] == target[0] and ghosts[0"
    },
    {
        "number": 790,
        "title": "Domino and Tromino Tiling",
        "difficulty": 1,
        "answer": "        dp = [0] * (n + 1)\n        dp[0] = 1\n        dp[1] = 1\n        for i in range(2, n + 1):\n            dp[i] = (dp[i - 1] + dp[i - 2]) % 796796\n        return dp[n] % 796796"
    },
    {
        "number": 791,
        "title": "Custom Sort String",
        "difficulty": 1,
        "answer": "        if order == \"asc\":\n            return self.customSortString(order, s)\n        else:\n            return self.customSortString(order, s.swapcase())"
    },
    {
        "number": 792,
        "title": "Number of Matching Subsequences",
        "difficulty": 1,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n"
    },
    {
        "number": 793,
        "title": "Preimage Size of Factorial Zeroes Function",
        "difficulty": 2,
        "answer": "        if k == 0:\n            return 5\n        if k == 1:\n            return 0\n        if k == 2:\n            return 1\n        if k == 3:\n            return 2\n        if k == 4:\n            return 3\n        if k == 5:\n            return 4\n        if k < 0:\n            return 0\n        if k > 5:\n            return 0\n        if k == 0:\n            return 5\n        if k == 1:\n            return 2\n        if k == 2:\n            return 3\n        if k == 3:\n            return 4\n        if k == 4:\n            return 5\n        if k == 5:\n            return 6"
    },
    {
        "number": 794,
        "title": "Valid Tic-Tac-Toe State",
        "difficulty": 1,
        "answer": "        if not board:\n            return False\n        for i in range(len(board)):\n            if board[i] == \" \":\n                return False\n        for i in range(len(board)):\n            for j in range(len(board)):\n                if board[i][j] == \"X\":\n                    return False\n                if board[i][j] == \"O\":\n                    return True\n        for i in range(len(board)):\n            for j in range(len(board)):\n                if board[i][j] == \" \":\n                    return False\n                if board[i][j] == board[i][j + 1]:\n                    return False\n                if board[i][j] == board[i + 1][j]:\n                    return False\n                if board[i][j] == board[i + 1][j + 1]:\n                    return False\n        for i in range(len(board)):\n            for j in range(len(board)):\n                if board[i][j] == \" \":\n                    return False\n                if board[i"
    },
    {
        "number": 795,
        "title": "Number of Subarrays with Bounded Maximum",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21"
    },
    {
        "number": 796,
        "title": "Rotate String",
        "difficulty": 0,
        "answer": "        if len(s)!= len(goal):\n            return False\n        for i in range(len(s)):\n            if s[i]!= goal[i]:\n                return False\n        return True"
    },
    {
        "number": 797,
        "title": "All Paths From Source to Target",
        "difficulty": 1,
        "answer": "        n = len(graph)\n        if n == 0:\n            return []\n        if n == 1:\n            return [[0]]\n        paths = []\n        for i in range(n):\n            paths.append([])\n            for j in range(n):\n                if graph[i][j] == 1:\n                    paths[-1].append(j)\n        return paths"
    },
    {
        "number": 798,
        "title": "Smallest Rotation with Highest Score",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 3\n        if n == 5:\n            return 4\n        if n == 6:\n            return 5\n        if n == 7:\n            return 6\n        if n == 8:\n            return 7\n        if n == 9:\n            return 8\n        if n == 10:\n            return 9\n        if n == 11:\n            return 10\n        if n == 12:\n            return 11\n        if n == 13:\n            return 12\n        if n == 14:\n            return 13\n        if n == 15:\n            return 14\n        if n == 16:\n            return 15\n        if n == 17:\n            return 16\n        if n == 18:\n            return 17\n        if n == 19:\n            return 18\n        if n == 20:\n            return 19\n        if n == 21:\n            return 20\n        if n == 22:\n            return 21"
    },
    {
        "number": 799,
        "title": "Champagne Tower",
        "difficulty": 1,
        "answer": "        # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + champagne(i-1, j-1)\r\n        # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + champagne(i-1, j)\r\n        # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + champagne(i-1, j-1)\r\n        # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + champagne(i-1, j-1)\r\n        # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + champagne(i-1, j-1)\r\n        # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + champagne(i-1, j-1)\r\n"
    },
    {
        "number": 801,
        "title": "Minimum Swaps To Make Sequences Increasing",
        "difficulty": 2,
        "answer": "        nums1.sort()\n        nums2.sort()\n        n = len(nums1)\n        m = len(nums2)\n        if n < m:\n            return 0\n        if n == m:\n            return n\n        if nums1[n - 1] < nums2[m - 1]:\n            return n + m - 1\n        if nums1[n - 1] > nums2[m - 1]:\n            return n + m - 1\n        return n + m - 1"
    },
    {
        "number": 802,
        "title": "Find Eventual Safe States",
        "difficulty": 1,
        "answer": "        visited = set()\n        def dfs(node):\n            if node not in visited:\n                visited.add(node)\n                for next_node in graph[node]:\n                    if next_node not in visited:\n                        dfs(next_node)\n        dfs(0)\n        return list(visited)"
    },
    {
        "number": 803,
        "title": "Bricks Falling When Hit",
        "difficulty": 2,
        "answer": "        m = len(grid)\n        n = len(grid[0])\n        result = [0] * m\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == 1:\n                    for row in range(i - 1, -1, -1):\n                        for col in range(j - 1, -1, -1):\n                            if grid[row][col] == 1:\n                                result[i] += 1\n                                break\n                    for row in range(i - 1, -1, -1):\n                        for col in range(j - 1, -1, -1):\n                            if grid[row][col] == 0:\n                                result[i] += 1\n                                break\n                    for row in range(i - 1, -1, -1):\n                        for col in range(j - 1, -1, -1):\n                            if grid[row][col] == 0:\n                                result[i] += 1\n                                break\n                    for row in range(i - 1, -1, -1):\n                        for col in range"
    },
    {
        "number": 804,
        "title": "Unique Morse Code Words",
        "difficulty": 0,
        "answer": "        morse = {'a': '.-', 'b': '-...', 'c': '-.-.', 'd': '-..', 'e': '.', 'f': '..-.', 'g': '--.', 'h': '....', 'i': '..', 'j': '.---', 'k': '-.-',\n                 'l': '.-..','m': '--', 'n': '-.', 'o': '---', 'p': '.--.', 'q': '--.-', 'r': '.-.','s': '...', 't': '-', 'u': '..-', 'v': '...-',\n                 'w': '.--', 'x': '-..-', 'y': '-.--', 'z': '--..', '1': '.----', '2': '..---', '3': '...--', '4': '....-', '5': '.....', '6': '-....',\n                 '7': '--...', '8': '---..', '9': '----.', '0':"
    },
    {
        "number": 805,
        "title": "Split Array With Same Average",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if n == 1:\n            return False\n        if n == 2:\n            return True\n        if n == 3:\n            return nums[0] == nums[1] and nums[1] == nums[2] and nums[2] == nums[3]\n        if n == 4:\n            return nums[0] == nums[1] and nums[1] == nums[2] and nums[2] == nums[3] and nums[3] == nums[4]\n        if n == 5:\n            return nums[0] == nums[1] and nums[1] == nums[2] and nums[2] == nums[3] and nums[3] == nums[4] and nums[4] == nums[5]\n        if n == 6:\n            return nums[0] == nums[1] and nums[1] == nums[2] and nums[2] == nums[3] and nums["
    },
    {
        "number": 806,
        "title": "Number of Lines To Write String",
        "difficulty": 0,
        "answer": "        result = []\n        for i in range(len(s)):\n            if i == 0:\n                result.append(1)\n            else:\n                result.append(widths[i] + result[i - 1])\n        return result"
    },
    {
        "number": 807,
        "title": "Max Increase to Keep City Skyline",
        "difficulty": 1,
        "answer": "        n = len(grid)\n        m = len(grid[0])\n        \n        # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + grid[i][j]\n        # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + grid[i][j]\n        # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + grid[i][j]\n        # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + grid[i][j]\n        # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-"
    },
    {
        "number": 808,
        "title": "Soup Servings",
        "difficulty": 1,
        "answer": "        # 1.\n        # 1.1\n        # 1.1.1\n        # 1.1.1.1\n        # 1.1.1.1.1\n        # 1.1.1.1.1.1\n        # 1.1.1.1.1.1.1\n        # 1.1.1.1.1.1.1.1.1\n        # 1.1.1.1.1.1.1.1.1.1.1\n        # 1.1.1.1.1.1.1.1.1.1.1.1.1.1\n        # 1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1"
    },
    {
        "number": 809,
        "title": "Expressive Words",
        "difficulty": 1,
        "answer": "        # Time: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)"
    },
    {
        "number": 810,
        "title": "Chalkboard XOR Game",
        "difficulty": 2,
        "answer": "        # Time: O(n)\n        # Space: O(1)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage"
    },
    {
        "number": 811,
        "title": "Subdomain Visit Count",
        "difficulty": 1,
        "answer": "        count_paired_domains = []\n        for domain in cpdomains:\n            count_paired_domains.append(domain.count('.'))\n        return count_paired_domains"
    },
    {
        "number": 812,
        "title": "Largest Triangle Area",
        "difficulty": 0,
        "answer": "        # O(n^3)\n        # O(n^2)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        "
    },
    {
        "number": 813,
        "title": "Largest Sum of Averages",
        "difficulty": 1,
        "answer": "        nums.sort()\n        sum = 0\n        for i in range(len(nums)):\n            sum += nums[i]\n        return sum / k"
    },
    {
        "number": 814,
        "title": "Binary Tree Pruning",
        "difficulty": 1,
        "answer": "        if not root:\n            return None\n        if not root.left and not root.right:\n            return root\n        root.left = self.pruneTree(root.left)\n        root.right = self.pruneTree(root.right)\n        return root"
    },
    {
        "number": 815,
        "title": "Bus Routes",
        "difficulty": 2,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n"
    },
    {
        "number": 816,
        "title": "Ambiguous Coordinates",
        "difficulty": 1,
        "answer": "        def remove_comma(s):\n            return s.replace(\",\", \"\").replace(\".\", \"\").replace(\" \", \"\")"
    },
    {
        "number": 817,
        "title": "Linked List Components",
        "difficulty": 1,
        "answer": "        if not head:\n            return 0\n        if not nums:\n            return 0\n        if head.val in nums:\n            return 1 + self.numComponents(head.next, nums)\n        else:\n            return self.numComponents(head.next, nums)"
    },
    {
        "number": 818,
        "title": "Race Car",
        "difficulty": 2,
        "answer": "        def dfs(pos, speed):\n            if pos == target:\n                return 1\n            if pos < 0:\n                return 0\n            if speed < 0:\n                return 0\n            return dfs(pos - speed, speed * 2) + dfs(pos, speed * -2)\n        return dfs(0, 1)"
    },
    {
        "number": 819,
        "title": "Most Common Word",
        "difficulty": 0,
        "answer": "        paragraph = paragraph.lower()\n        paragraph = paragraph.split()\n        paragraph = [word for word in paragraph if word not in banned]\n        paragraph =''.join(paragraph)\n        paragraph = paragraph.split(' ')\n        paragraph = [word for word in paragraph if word not in banned]\n        paragraph =''.join(paragraph)\n        paragraph = paragraph.split(' ')\n        paragraph = [word for word in paragraph if word not in banned]\n        paragraph =''.join(paragraph)\n        paragraph = paragraph.split(' ')\n        paragraph = [word for word in paragraph if word not in banned]\n        paragraph =''.join(paragraph)\n        paragraph = paragraph.split(' ')\n        paragraph = [word for word in paragraph if word not in banned]\n        paragraph =''.join(paragraph)\n        paragraph = paragraph.split(' ')\n        paragraph = [word for word in paragraph if word not in banned]\n        paragraph =''.join(paragraph)\n        paragraph = paragraph.split(' ')\n        paragraph = [word for word in paragraph if word not in banned]\n        paragraph"
    },
    {
        "number": 820,
        "title": "Short Encoding of Words",
        "difficulty": 1,
        "answer": "        if not words:\n            return 0\n        if len(words) == 1:\n            return len(words[0])\n        if len(words) == 2:\n            return self.minimumLengthEncoding(words[1:])\n        if len(words) == 3:\n            return self.minimumLengthEncoding(words[2:])\n        if len(words) == 4:\n            return self.minimumLengthEncoding(words[3:])\n        if len(words) == 5:\n            return self.minimumLengthEncoding(words[4:])\n        if len(words) == 6:\n            return self.minimumLengthEncoding(words[5:])\n        if len(words) == 7:\n            return self.minimumLengthEncoding(words[6:])\n        if len(words) == 8:\n            return self.minimumLengthEncoding(words[7:])\n        if len(words) == 9:\n            return self.minimumLengthEncoding(words[8:])\n        if len(words) == 10:\n            return self.minimumLengthEncoding(words["
    },
    {
        "number": 821,
        "title": "Shortest Distance to a Character",
        "difficulty": 0,
        "answer": "        if not s:\n            return []\n        if not c:\n            return []\n        if len(s) == 1:\n            return [0]\n        if len(s) == 2:\n            return [0, 1]\n        if len(s) == 3:\n            return [0, 1, 2]\n        if len(s) == 4:\n            return [0, 1, 2, 3]\n        if len(s) == 5:\n            return [0, 1, 2, 3, 4]\n        if len(s) == 6:\n            return [0, 1, 2, 3, 4, 5]\n        if len(s) == 7:\n            return [0, 1, 2, 3, 4, 5, 6]\n        if len(s) == 8:\n            return [0, 1, 2, 3, 4, 5, 6, 7]\n        if len(s) == 9:\n            return [0, 1, 2, 3, 4, 5, 6, 7, 8]\n        if len(s) == 10:\n            return [0"
    },
    {
        "number": 822,
        "title": "Card Flipping Game",
        "difficulty": 1,
        "answer": "        n = len(fronts)\n        if n == 0:\n            return 0\n        if n == 1:\n            return fronts[0]\n        if n == 2:\n            return fronts[0] + backs[0]\n        if n == 3:\n            return fronts[0] + backs[0] + backs[1]\n        if n == 4:\n            return fronts[0] + backs[0] + backs[1] + backs[2]\n        if n == 5:\n            return fronts[0] + backs[0] + backs[1] + backs[2] + backs[3]\n        if n == 6:\n            return fronts[0] + backs[0] + backs[1] + backs[2] + backs[3] + backs[4]\n        if n == 7:\n            return fronts[0] + backs[0] + backs[1] + backs[2] + backs[3] + backs[4] + backs[5]\n        if n == 8:\n            return fronts[0] + backs[0] + backs[1] + backs[2"
    },
    {
        "number": 823,
        "title": "Binary Trees With Factors",
        "difficulty": 1,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage"
    },
    {
        "number": 824,
        "title": "Goat Latin",
        "difficulty": 0,
        "answer": "        sentence = sentence.replace(\" \", \"\").lower()\n        res = \"\"\n        for word in sentence.split(\" \"):\n            if word[0] in \"aeiou\":\n                res += word[1:] + \"ma\"\n            else:\n                res += word[1:] + \"a\"\n        return res"
    },
    {
        "number": 825,
        "title": "Friends Of Appropriate Ages",
        "difficulty": 1,
        "answer": "        n = len(ages)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n"
    },
    {
        "number": 826,
        "title": "Most Profit Assigning Work",
        "difficulty": 1,
        "answer": "        n = len(difficulty)\n        m = len(profit)\n        dp = [[0 for _ in range(m+1)] for _ in range(n+1)]\n        for i in range(n+1):\n            for j in range(m+1):\n                if i == 0:\n                    dp[i][j] = 0\n                elif j == 0:\n                    dp[i][j] = -1\n                elif difficulty[i-1] <= worker[j-1]:\n                    dp[i][j] = max(dp[i-1][j], dp[i-1][j-difficulty[i-1]] + profit[j-1])\n                else:\n                    dp[i][j] = dp[i-1][j]\n        return dp[n][m]\n"
    },
    {
        "number": 827,
        "title": "Making A Large Island",
        "difficulty": 2,
        "answer": "        n = len(grid)\r\n        if n == 0:\r\n            return 0\r\n        if n == 1:\r\n            return 1\r\n        max_area = 0\r\n        for i in range(n):\r\n            for j in range(n):\r\n                if grid[i][j] == 1:\r\n                    area = self.largestIsland(grid, i, j)\r\n                    if area > max_area:\r\n                        max_area = area\r\n        return max_area\r\n\r\n\r\nclass Solution:\r\n    def largestIsland(self, grid: List[List[int]]) -> int:\r\n        \"\"\"\r\n        You are given an n x n binary matrix grid. You are allowed to change at most one 0 to be 1.\r\n        Return the size of the largest island in grid after applying this operation.\r\n        An island is a 4-directionally connected group of 1s.\r\n        Example 1:\r\n        Input: grid = [[1,0],[0,1]]\r\n        Output: 3\r\n        Explanation: Change one 0"
    },
    {
        "number": 828,
        "title": "Count Unique Characters of All Substrings of a Given String",
        "difficulty": 2,
        "answer": "        count = 0\n        for i in range(len(s)):\n            if s[i] not in s[i + 1:]:\n                count += 1\n        return count"
    },
    {
        "number": 829,
        "title": "Consecutive Numbers Sum",
        "difficulty": 2,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n        if n == 22:\n            "
    },
    {
        "number": 830,
        "title": "Positions of Large Groups",
        "difficulty": 0,
        "answer": "        res = []\n        for i in range(len(s)):\n            if i == 0 or s[i]!= s[i - 1]:\n                res.append([i, i])\n        return res"
    },
    {
        "number": 831,
        "title": "Masking Personal Information",
        "difficulty": 1,
        "answer": "        # TODO: Write your code here\n        # TODO: Remove this line when you implement this function\n        return s"
    },
    {
        "number": 832,
        "title": "Flipping an Image",
        "difficulty": 0,
        "answer": "        n = len(image)\n        for i in range(n):\n            for j in range(n):\n                image[i][j] = 1 - image[i][j]\n        return image"
    },
    {
        "number": 833,
        "title": "Find And Replace in String",
        "difficulty": 1,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage"
    },
    {
        "number": 834,
        "title": "Sum of Distances in Tree",
        "difficulty": 2,
        "answer": "        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    },
    {
        "number": 835,
        "title": "Image Overlap",
        "difficulty": 1,
        "answer": "        n = len(img1)\n        m = len(img2)\n        # find the overlap\n        overlap = 0\n        for i in range(n):\n            for j in range(m):\n                if img1[i][j] == 1 and img2[i][j] == 1:\n                    overlap += 1\n        return overlap"
    },
    {
        "number": 836,
        "title": "Rectangle Overlap",
        "difficulty": 0,
        "answer": "        x1, y1, x2, y2 = rec1[0], rec1[1], rec1[2], rec1[3]\n        x3, y3, x4, y4 = rec2[0], rec2[1], rec2[2], rec2[3]\n        if x1 == x3 or y1 == y3 or x2 == x4 or y2 == y4:\n            return False\n        if x1 < x3 or x2 < x4 or y1 < y3 or y2 < y4:\n            return False\n        return True"
    },
    {
        "number": 837,
        "title": "New 21 Game",
        "difficulty": 1,
        "answer": "        # Time: O(n + k)\n        # Space: O(n + k)\n        # Runtime: O(n + k)\n        # Space: O(n + k)\n        # Runtime: O(n + k)\n        # Space: O(n + k)\n        # Runtime: O(n + k)\n        # Space: O(n + k)\n        # Runtime: O(n + k)\n        # Space: O(n + k)\n        # Runtime: O(n + k)\n        # Space: O(n + k)\n        # Runtime: O(n + k)\n        # Space: O(n + k)\n        # Runtime: O(n + k)\n        # Space: O(n + k)\n        # Runtime: O(n + k)\n        # Space: O(n + k)\n        # Runtime: O(n + k)\n        # Space: O(n + k)\n        # Runtime: O(n + k)\n        # Space: O(n + k)\n        # Runtime: O(n +"
    },
    {
        "number": 838,
        "title": "Push Dominoes",
        "difficulty": 1,
        "answer": "        n = len(dominoes)\n        if n == 0:\n            return \"\"\n        if n == 1:\n            return dominoes[0]\n        if n == 2:\n            return dominoes[0] + dominoes[1]\n        if n == 3:\n            return dominoes[0] + dominoes[1] + dominoes[2]\n        if n == 4:\n            return dominoes[0] + dominoes[1] + dominoes[2] + dominoes[3]\n        if n == 5:\n            return dominoes[0] + dominoes[1] + dominoes[2] + dominoes[3] + dominoes[4]\n        if n == 6:\n            return dominoes[0] + dominoes[1] + dominoes[2] + dominoes[3] + dominoes[4] + dominoes[5]\n        if n == 7:\n            return dominoes[0] + dominoes[1] + dominoes[2"
    },
    {
        "number": 839,
        "title": "Similar String Groups",
        "difficulty": 2,
        "answer": "        # Time: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)"
    },
    {
        "number": 840,
        "title": "Magic Squares In Grid",
        "difficulty": 1,
        "answer": "        m, n = len(grid), len(grid[0])\n        if m == 0 or n == 0:\n            return 0\n        dp = [[0] * n for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if i == 0 or j == 0:\n                    dp[i][j] = 1\n                elif grid[i][j] == grid[i][j - 1] + grid[i - 1][j] + grid[i - 1][j - 1]:\n                    dp[i][j] = 1\n                else:\n                    dp[i][j] = 0\n        return sum(dp[m - 1])"
    },
    {
        "number": 841,
        "title": "Keys and Rooms",
        "difficulty": 1,
        "answer": "        visited = set()\n        def dfs(room):\n            if room not in visited:\n                visited.add(room)\n                for key in rooms[room]:\n                    if key not in visited:\n                        dfs(key)\n        dfs(0)\n        return len(visited) == len(rooms)\n"
    },
    {
        "number": 842,
        "title": "Split Array into Fibonacci Sequence",
        "difficulty": 1,
        "answer": "        if num == \"\":\n            return []\n        if len(num) == 1:\n            return [int(num)]\n        if len(num) == 2:\n            return [int(num[0]), int(num[1])]\n        if len(num) == 3:\n            return [int(num[0]), int(num[1]), int(num[2])]\n        if len(num) == 4:\n            return [int(num[0]), int(num[1]), int(num[2]), int(num[3])]\n        if len(num) == 5:\n            return [int(num[0]), int(num[1]), int(num[2]), int(num[3]), int(num[4])]\n        if len(num) == 6:\n            return [int(num[0]), int(num[1]), int(num[2]), int(num[3]), int(num[4]), int(num[5])]\n        if len(num) == 7:\n            return [int(num[0]), int(num[1]), int"
    },
    {
        "number": 843,
        "title": "Guess the Word",
        "difficulty": 2,
        "answer": "        pass"
    },
    {
        "number": 844,
        "title": "Backspace String Compare",
        "difficulty": 0,
        "answer": "        s = s.replace('#', '')\n        t = t.replace('#', '')\n        if s == t:\n            return True\n        else:\n            return False"
    },
    {
        "number": 845,
        "title": "Longest Mountain in Array",
        "difficulty": 1,
        "answer": "        if not arr:\n            return 0\n        length = 1\n        for i in range(1, len(arr)):\n            if arr[i] < arr[i - 1]:\n                length += 1\n            else:\n                length = 1\n            if arr[i] > arr[i - 1] and arr[i] > arr[i + 1]:\n                length = 1\n        return length"
    },
    {
        "number": 846,
        "title": "Hand of Straights",
        "difficulty": 1,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage"
    },
    {
        "number": 847,
        "title": "Shortest Path Visiting All Nodes",
        "difficulty": 2,
        "answer": "        n = len(graph)\n        visited = [0] * n\n        visited[0] = 1\n        for i in range(1, n):\n            for j in range(n):\n                if graph[i][j] == 1 and visited[j] == 0:\n                    visited[j] = 1\n                    self.dfs(graph, i, j)\n        return visited[n - 1]"
    },
    {
        "number": 848,
        "title": "Shifting Letters",
        "difficulty": 1,
        "answer": "        # \u521d\u59cb\u5316\n        res = \"\"\n        for i in range(len(s)):\n            res += s[i]\n        # \u521d\u59cb\u5316\n        for i in range(len(shifts)):\n            res += shifts[i]\n        # \u5faa\u73af\n        for i in range(len(shifts)):\n            res += s[i + shifts[i]]\n        return res"
    },
    {
        "number": 849,
        "title": "Maximize Distance to Closest Person",
        "difficulty": 1,
        "answer": "        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    },
    {
        "number": 850,
        "title": "Rectangle Area II",
        "difficulty": 2,
        "answer": "        # Time: O(n^2)\n        # Space: O(n^2)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n"
    },
    {
        "number": 851,
        "title": "Loud and Rich",
        "difficulty": 1,
        "answer": "        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    },
    {
        "number": 852,
        "title": "Peak Index in a Mountain Array",
        "difficulty": 1,
        "answer": "        if len(arr) < 3:\n            return 0\n        \n        left, right = 0, len(arr) - 1\n        while left < right:\n            mid = (left + right) // 2\n            if arr[mid] < arr[mid + 1]:\n                left = mid + 1\n            else:\n                right = mid\n        return left\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n"
    },
    {
        "number": 853,
        "title": "Car Fleet",
        "difficulty": 1,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n"
    },
    {
        "number": 854,
        "title": "K-Similar Strings",
        "difficulty": 2,
        "answer": "        s1_len = len(s1)\n        s2_len = len(s2)\n        if s1_len!= s2_len:\n            return 0\n        if s1_len == 1:\n            return s2_len\n        if s2_len == 1:\n            return s1_len\n        if s1_len == 2:\n            return min(s2_len, s1_len)\n        if s2_len == 2:\n            return min(s1_len, s2_len)\n        if s1_len == 3:\n            return min(s2_len, s1_len)\n        if s2_len == 3:\n            return min(s1_len, s2_len)\n        if s1_len == 4:\n            return min(s2_len, s1_len)\n        if s2_len == 4:\n            return min(s1_len, s2_len)\n        if s1_len == 5:\n            return min(s2_len, s1_len)\n"
    },
    {
        "number": 855,
        "title": "Exam Room",
        "difficulty": 1,
        "answer": "        pass"
    },
    {
        "number": 856,
        "title": "Score of Parentheses",
        "difficulty": 1,
        "answer": "        stack = []\n        for i in s:\n            if i == '(':\n                stack.append(i)\n            else:\n                if stack:\n                    stack.pop()\n                else:\n                    stack.append(i)\n        if stack:\n            return 0\n        else:\n            return 2 * len(s)"
    },
    {
        "number": 857,
        "title": "Minimum Cost to Hire K Workers",
        "difficulty": 2,
        "answer": "        # Time: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)"
    },
    {
        "number": 858,
        "title": "Mirror Reflection",
        "difficulty": 1,
        "answer": "        if p == 0 and q == 0:\n            return 0\n        if p == 0:\n            return q\n        if q == 0:\n            return p\n        if p == q:\n            return 0\n        if p == q:\n            return 0\n        if p == q:\n            return 0\n        if p == q:\n            return 0\n        if p == q:\n            return 0\n        if p == q:\n            return 0\n        if p == q:\n            return 0\n        if p == q:\n            return 0\n        if p == q:\n            return 0\n        if p == q:\n            return 0\n        if p == q:\n            return 0\n        if p == q:\n            return 0\n        if p == q:\n            return 0\n        if p == q:\n            return 0\n        if p == q:\n            return 0\n        if p == q:\n            return 0\n        if p == q:\n            return 0\n        if p == q:\n            return 0\n        if p == q:\n            return 0\n        if p =="
    },
    {
        "number": 859,
        "title": "Buddy Strings",
        "difficulty": 0,
        "answer": "        if len(s)!= len(goal):\n            return False\n        if s == goal:\n            return True\n        for i in range(len(s)):\n            if s[i]!= goal[i]:\n                return False\n        return True"
    },
    {
        "number": 860,
        "title": "Lemonade Change",
        "difficulty": 0,
        "answer": "        # if len(bills) == 0:\n        #     return False\n        # if len(bills) == 1:\n        #     return True\n        # if len(bills) == 2:\n        #     if bills[0] == 5 or bills[0] == 10 or bills[0] == 20:\n        #         return True\n        # if len(bills) == 3:\n        #     if bills[0] == 5 or bills[0] == 10 or bills[0] == 20:\n        #         return True\n        # if len(bills) == 4:\n        #     if bills[0] == 5 or bills[0] == 10 or bills[0] == 20:\n        #         return True\n        # if len(bills) == 5:\n        #     if bills[0] == 5 or bills[0] == 10 or bills[0] == 20:\n        #         return True\n        # if len(bills) == 6:\n        #     if bills[0] == 5 or bills[0] == 10 or bills[0] == 20:\n"
    },
    {
        "number": 861,
        "title": "Score After Flipping Matrix",
        "difficulty": 1,
        "answer": "        m = len(grid)\n        n = len(grid[0])\n        dp = [[0] * n for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == 0:\n                    dp[i][j] = 0\n                else:\n                    dp[i][j] = dp[i][j - 1] + dp[i - 1][j]\n        return dp[m - 1][n - 1]"
    },
    {
        "number": 862,
        "title": "Shortest Subarray with Sum at Least K",
        "difficulty": 2,
        "answer": "        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    },
    {
        "number": 863,
        "title": "All Nodes Distance K in Binary Tree",
        "difficulty": 1,
        "answer": "        def dfs(node, distance):\n            if not node:\n                return\n            dfs(node.left, distance + 1)\n            dfs(node.right, distance + 1)\n            if distance == k:\n                res.append(node.val)\n        res = []\n        dfs(root, 0)\n        return res"
    },
    {
        "number": 864,
        "title": "Shortest Path to Get All Keys",
        "difficulty": 2,
        "answer": "        m = len(grid)\n        n = len(grid[0])\n        visited = [[False for _ in range(n)] for _ in range(m)]\n        visited[0][0] = True\n        def dfs(x, y):\n            if x < 0 or x >= m or y < 0 or y >= n or grid[x][y]!= '.' or not visited[x][y]:\n                return\n            visited[x][y] = True\n            dfs(x + 1, y)\n            dfs(x - 1, y)\n            dfs(x, y + 1)\n            dfs(x, y - 1)\n        dfs(0, 0)\n        return len(visited[m - 1][n - 1])"
    },
    {
        "number": 865,
        "title": "Smallest Subtree with all the Deepest Nodes",
        "difficulty": 1,
        "answer": "        if not root:\n            return None\n        if not root.left and not root.right:\n            return root\n        if not root.left:\n            return self.subtreeWithAllDeepest(root.right)\n        if not root.right:\n            return self.subtreeWithAllDeepest(root.left)\n        return self.subtreeWithAllDeepest(root.left) or self.subtreeWithAllDeepest(root.right)"
    },
    {
        "number": 866,
        "title": "Prime Palindrome",
        "difficulty": 1,
        "answer": "        if n < 2:\n            return n\n        for i in range(2, n):\n            if n % i == 0:\n                return i\n        return n"
    },
    {
        "number": 867,
        "title": "Transpose Matrix",
        "difficulty": 0,
        "answer": "        n = len(matrix)\n        for i in range(n):\n            for j in range(n):\n                matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n        return matrix"
    },
    {
        "number": 868,
        "title": "Binary Gap",
        "difficulty": 0,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 3\n        if n == 5:\n            return 4\n        if n == 6:\n            return 5\n        if n == 7:\n            return 6\n        if n == 8:\n            return 7\n        if n == 9:\n            return 8\n        if n == 10:\n            return 9\n        if n == 11:\n            return 10\n        if n == 12:\n            return 11\n        if n == 13:\n            return 12\n        if n == 14:\n            return 13\n        if n == 15:\n            return 14\n        if n == 16:\n            return 15\n        if n == 17:\n            return 16\n        if n == 18:\n            return 17\n        if n == 19:\n            return 18\n        if n == 20:\n            return 19\n        if n == 21:\n            return 20\n        if n == 22:\n            "
    },
    {
        "number": 869,
        "title": "Reordered Power of 2",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return False\n        if n == 1:\n            return True\n        if n == 2:\n            return False\n        if n == 3:\n            return True\n        if n == 4:\n            return False\n        if n == 5:\n            return True\n        if n == 6:\n            return False\n        if n == 7:\n            return True\n        if n == 8:\n            return False\n        if n == 9:\n            return True\n        if n == 10:\n            return False\n        if n % 2 == 0:\n            return False\n        if n % 2 == 1:\n            return True\n        if n % 2 == 0:\n            return True\n        if n % 2 == 1:\n            return False\n        if n % 2 == 0:\n            return True\n        if n % 2 == 1:\n            return False\n        if n % 2 == 0:\n            return True\n        if n % 2 == 1:\n            return False\n        if n % 2 == 0:\n            return True\n        if n % 2 == 1:\n            return False"
    },
    {
        "number": 870,
        "title": "Advantage Shuffle",
        "difficulty": 1,
        "answer": "        nums1.sort()\n        nums2.sort()\n        res = []\n        for i in range(len(nums1)):\n            if nums1[i] > nums2[i]:\n                res.append(nums1[i])\n        return res"
    },
    {
        "number": 871,
        "title": "Minimum Number of Refueling Stops",
        "difficulty": 2,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n"
    },
    {
        "number": 872,
        "title": "Leaf-Similar Trees",
        "difficulty": 0,
        "answer": "        def isLeaf(node):\n            if not node:\n                return False\n            if not node.left and not node.right:\n                return True\n            return False"
    },
    {
        "number": 873,
        "title": "Length of Longest Fibonacci Subsequence",
        "difficulty": 1,
        "answer": "        if len(arr) == 0:\n            return 0\n        if len(arr) == 1:\n            return 1\n        if len(arr) == 2:\n            return 2\n        if len(arr) == 3:\n            return 3\n        if len(arr) == 4:\n            return 4\n        if len(arr) == 5:\n            return 5\n        if len(arr) == 6:\n            return 6\n        if len(arr) == 7:\n            return 7\n        if len(arr) == 8:\n            return 8\n        if len(arr) == 9:\n            return 9\n        if len(arr) == 10:\n            return 10\n        if len(arr) == 11:\n            return 11\n        if len(arr) == 12:\n            return 12\n        if len(arr) == 13:\n            return 13\n        if len(arr) == 14:\n            return 14\n        if len(arr) == 15:\n            return 15\n        if len(arr) == 16:\n            return 16\n        if len(arr) == 17:\n            return"
    },
    {
        "number": 874,
        "title": "Walking Robot Simulation",
        "difficulty": 1,
        "answer": "        # TODO: Write your code here\n        # TODO: Write your code here\n        # TODO: Write your code here\n        # TODO: Write your code here\n        # TODO: Write your code here\n        # TODO: Write your code here\n        # TODO: Write your code here\n        # TODO: Write your code here\n        # TODO: Write your code here\n        # TODO: Write your code here\n        # TODO: Write your code here\n        # TODO: Write your code here\n        # TODO: Write your code here\n        # TODO: Write your code here\n        # TODO: Write your code here\n        # TODO: Write your code here\n        # TODO: Write your code here\n        # TODO: Write your code here\n        # TODO: Write your code here\n        # TODO: Write your code here\n        # TODO: Write your code here\n        # TODO: Write your code here\n        # TODO: Write your code here\n        # TODO: Write your code here\n        # TODO: Write your code here\n"
    },
    {
        "number": 875,
        "title": "Koko Eating Bananas",
        "difficulty": 1,
        "answer": "        n = len(piles)\n        if n == 0:\n            return 0\n        if n == 1:\n            return piles[0]\n        if n == 2:\n            return max(piles[0], piles[1])\n        if n == 3:\n            return max(piles[0], piles[1], piles[2])\n        if n == 4:\n            return max(piles[0], piles[1], piles[2], piles[3])\n        if n == 5:\n            return max(piles[0], piles[1], piles[2], piles[3], piles[4])\n        if n == 6:\n            return max(piles[0], piles[1], piles[2], piles[3], piles[4], piles[5])\n        if n == 7:\n            return max(piles[0], piles[1], piles[2], piles[3], piles[4], piles[5], piles[6])\n        if n == 8:\n            return max(piles[0], piles[1], piles[2], piles[3], piles["
    },
    {
        "number": 876,
        "title": "Middle of the Linked List",
        "difficulty": 0,
        "answer": "        slow = head\n        fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        return slow\n"
    },
    {
        "number": 877,
        "title": "Stone Game",
        "difficulty": 1,
        "answer": "        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    },
    {
        "number": 878,
        "title": "Nth Magical Number",
        "difficulty": 2,
        "answer": "        mod = 10**9+7\n        if n == 0:\n            return 0\n        if n == 1:\n            return a\n        if n == 2:\n            return b\n        if n == 3:\n            return (a+b)%mod\n        if n == 4:\n            return (a+b)%mod\n        if n == 5:\n            return (a+b)%mod\n        if n == 6:\n            return (a+b)%mod\n        if n == 7:\n            return (a+b)%mod\n        if n == 8:\n            return (a+b)%mod\n        if n == 9:\n            return (a+b)%mod\n        if n == 10:\n            return (a+b)%mod\n        if n == 11:\n            return (a+b)%mod\n        if n == 12:\n            return (a+b)%mod\n        if n == 13:\n            return (a+b)%mod\n        if n == 14:\n            return (a+b)%mod\n        if n =="
    },
    {
        "number": 879,
        "title": "Profitable Schemes",
        "difficulty": 2,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n"
    },
    {
        "number": 880,
        "title": "Decoded String at Index",
        "difficulty": 1,
        "answer": "        if k == 0:\n            return \"\"\n        if k == 1:\n            return s[0]\n        if k == 2:\n            return s[1]\n        if k == 3:\n            return s[2]\n        if k == 4:\n            return s[3]\n        if k == 5:\n            return s[4]\n        if k == 6:\n            return s[5]\n        if k == 7:\n            return s[6]\n        if k == 8:\n            return s[7]\n        if k == 9:\n            return s[8]\n        if k == 10:\n            return s[9]\n        if k == 11:\n            return s[10]\n        if k == 12:\n            return s[11]\n        if k == 13:\n            return s[12]\n        if k == 14:\n            return s[13]\n        if k == 15:\n            return s[14]\n        if k == 16:\n            return s[15]\n        if k == 17:\n            return s[16]\n        "
    },
    {
        "number": 881,
        "title": "Boats to Save People",
        "difficulty": 1,
        "answer": "        people.sort()\n        boats = 0\n        for i in range(len(people)):\n            boats += min(people[i], limit - people[i])\n        return boats"
    },
    {
        "number": 882,
        "title": "Reachable Nodes In Subdivided Graph",
        "difficulty": 2,
        "answer": "        # edge = [0,1,10]\n        # maxMoves = 6\n        # n = 3\n        # edges = [[0,1,10],[0,2,1],[1,2,2]]\n        # maxMoves = 10\n        # n = 4\n        # edges = [[1,2,4],[1,4,5],[1,3,1],[2,3,4],[3,4,5]]\n        # maxMoves = 17\n        # n = 5\n        # edges = [[1,2,4],[1,4,5],[1,3,1],[2,3,4],[3,4,5]]\n        # maxMoves = 17\n        # n = 5\n        # edges = [[1,2,4],[1,4,5],[1,3,1],[2,3,4],[3,4,5]]\n        # maxMoves = 17\n        # n = 5\n        # edges = [[1,2,4],[1,4,5],[1,3,1],[2,3,4],[3,4,5]]\n"
    },
    {
        "number": 883,
        "title": "Projection Area of 3D Shapes",
        "difficulty": 0,
        "answer": "        m = len(grid)\n        n = len(grid[0])\n        area = 0\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == 1:\n                    area += self.projectionArea(grid, i, j)\n        return area"
    },
    {
        "number": 884,
        "title": "Uncommon Words from Two Sentences",
        "difficulty": 0,
        "answer": "        s1 = s1.split()\n        s2 = s2.split()\n        dic = {}\n        for i in s1:\n            if i in dic:\n                dic[i] += 1\n            else:\n                dic[i] = 1\n        for i in s2:\n            if i in dic:\n                dic[i] -= 1\n            else:\n                dic[i] = 1\n        ans = []\n        for i in dic:\n            if dic[i] == 1:\n                ans.append(i)\n        return ans"
    },
    {
        "number": 885,
        "title": "Spiral Matrix III",
        "difficulty": 1,
        "answer": "        # TODO: Write your code here\n        # TODO: Write your code here\n        # TODO: Write your code here\n        # TODO: Write your code here\n        # TODO: Write your code here\n        # TODO: Write your code here\n        # TODO: Write your code here\n        # TODO: Write your code here\n        # TODO: Write your code here\n        # TODO: Write your code here\n        # TODO: Write your code here\n        # TODO: Write your code here\n        # TODO: Write your code here\n        # TODO: Write your code here\n        # TODO: Write your code here\n        # TODO: Write your code here\n        # TODO: Write your code here\n        # TODO: Write your code here\n        # TODO: Write your code here\n        # TODO: Write your code here\n        # TODO: Write your code here\n        # TODO: Write your code here\n        # TODO: Write your code here\n        # TODO: Write your code here\n        # TODO: Write your code here\n"
    },
    {
        "number": 886,
        "title": "Possible Bipartition",
        "difficulty": 1,
        "answer": "        graph = collections.defaultdict(list)\n        for a, b in dislikes:\n            graph[a].append(b)\n            graph[b].append(a)\n        \n        def dfs(node):\n            if node in graph:\n                for n in graph[node]:\n                    if n not in graph:\n                        return False\n                    if dfs(n):\n                        return True\n            return False\n        \n        for i in range(1, n+1):\n            if not dfs(i):\n                return False\n        return True\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        "
    },
    {
        "number": 887,
        "title": "Super Egg Drop",
        "difficulty": 2,
        "answer": "        dp = [0] * (n + 1)\n        dp[0] = 1\n        for i in range(1, n + 1):\n            for j in range(1, i + 1):\n                dp[i] += dp[j]\n        return dp[n]"
    },
    {
        "number": 888,
        "title": "Fair Candy Swap",
        "difficulty": 0,
        "answer": "        aliceSizes.sort()\n        bobSizes.sort()\n        answer = []\n        for i in range(len(aliceSizes)):\n            if aliceSizes[i] + bobSizes[i] == sum(aliceSizes[:i] + bobSizes[:i]):\n                answer.append(aliceSizes[i])\n                answer.append(bobSizes[i])\n        return answer"
    },
    {
        "number": 889,
        "title": "Construct Binary Tree from Preorder and Postorder Traversal",
        "difficulty": 1,
        "answer": "        if not preorder or not postorder:\n            return None\n        \n        def helper(pre, post):\n            if not pre and not post:\n                return None\n            if pre and post:\n                root = TreeNode(pre[0])\n                root.left = helper(pre[1:], post[:len(post) - 1])\n                root.right = helper(pre[1:], post[len(post) - 1:])\n                return root\n            if pre:\n                root = TreeNode(pre[0])\n                root.left = helper(pre[1:], post)\n                root.right = helper(pre[1:], post[1:])\n                return root\n            if post:\n                root = TreeNode(post[0])\n                root.left = helper(pre, post[1:])\n                root.right = helper(pre, post[1:])\n                return root\n        return helper(preorder, postorder)\n"
    },
    {
        "number": 890,
        "title": "Find and Replace Pattern",
        "difficulty": 1,
        "answer": "        def find_permutation(word, pattern):\n            if not word:\n                return []\n            if not pattern:\n                return [word]\n            if word[0] == pattern[0]:\n                return find_permutation(word[1:], pattern[1:]) + [word[0]]\n            else:\n                return find_permutation(word, pattern[1:]) + [word[0]]"
    },
    {
        "number": 891,
        "title": "Sum of Subsequence Widths",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        dp = [0] * n\n        dp[0] = nums[0]\n        for i in range(1, n):\n            dp[i] = max(dp[i - 1], nums[i] + dp[i - 1])\n        return dp[-1] % (10 ** 9 + 7)"
    },
    {
        "number": 892,
        "title": "Surface Area of 3D Shapes",
        "difficulty": 0,
        "answer": "        m = len(grid)\n        n = len(grid[0])\n        dp = [[0] * n for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == 1:\n                    dp[i][j] = 1\n                elif grid[i][j] == 2:\n                    dp[i][j] = 2\n                elif grid[i][j] == 3:\n                    dp[i][j] = 3\n        return sum(dp[i][j] for i in range(m) for j in range(n))"
    },
    {
        "number": 893,
        "title": "Groups of Special-Equivalent Strings",
        "difficulty": 1,
        "answer": "        def is_pairwise(s1, s2):\n            if len(s1)!= len(s2):\n                return False\n            for i in range(len(s1)):\n                if s1[i]!= s2[i]:\n                    return False\n            return True"
    },
    {
        "number": 894,
        "title": "All Possible Full Binary Trees",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return []\n        if n == 1:\n            return [[0]]\n        if n == 2:\n            return [[0,0]]\n        if n == 3:\n            return [[0,0,0]]\n        if n == 4:\n            return [[0,0,0,0]]\n        if n == 5:\n            return [[0,0,0,0,0]]\n        if n == 6:\n            return [[0,0,0,0,0,0]]\n        if n == 7:\n            return [[0,0,0,0,0,0,0]]\n        if n == 8:\n            return [[0,0,0,0,0,0,0,0]]\n        if n == 9:\n            return [[0,0,0,0,0,0,0,0,0]]\n        if n == 10:\n            return [[0,0,0,0,0,0,0,0,0,0]]\n        if n == 11:\n            return [[0,0,0,0,0"
    },
    {
        "number": 895,
        "title": "Maximum Frequency Stack",
        "difficulty": 2,
        "answer": "        pass\n    def top(self) -> int:\n        \"\"\"\n        Design a stack-like data structure to push elements to the stack and pop the most frequent element from the stack.\n        Implement the FreqStack class:\n            FreqStack() constructs an empty frequency stack.\n            void push(int val) pushes an integer val onto the top of the stack.\n            int pop() removes and returns the most frequent element in the stack.\n                If there is a tie for the most frequent element, the element closest to the stack's top is removed and returned.\n        Example 1:\n        Input\n        [\"FreqStack\", \"push\", \"push\", \"push\", \"push\", \"push\", \"push\", \"pop\", \"pop\", \"pop\", \"pop\"]\n        [[], [5], [7], [5], [7], [4], [5], [], [], [], []]\n        Output\n        [null, null, null, null, null, null, null, 5, 7, 5, 4]\n        Explanation\n        FreqStack freqStack = new FreqStack();\n        freqStack"
    },
    {
        "number": 896,
        "title": "Monotonic Array",
        "difficulty": 0,
        "answer": "        if len(nums) == 1:\n            return True\n        if len(nums) == 2:\n            return nums[0] >= nums[1]\n        if nums[0] > nums[1]:\n            return self.isMonotonic(nums[1:])\n        else:\n            return self.isMonotonic(nums[:-1])"
    },
    {
        "number": 897,
        "title": "Increasing Order Search Tree",
        "difficulty": 0,
        "answer": "        if not root:\n            return None\n        if not root.left:\n            return root\n        root.left = self.increasingBST(root.left)\n        return root"
    },
    {
        "number": 898,
        "title": "Bitwise ORs of Subarrays",
        "difficulty": 1,
        "answer": "        count = 0\n        for i in range(len(arr)):\n            for j in range(i, len(arr)):\n                if arr[i] & arr[j] == 0:\n                    count += 1\n        return count"
    },
    {
        "number": 899,
        "title": "Orderly Queue",
        "difficulty": 2,
        "answer": "        if k == 1:\n            return s\n        if k == 2:\n            return \"\".join(sorted(s))\n        if k == 3:\n            return \"\".join(sorted(s, reverse=True))\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        "
    },
    {
        "number": 900,
        "title": "RLE Iterator",
        "difficulty": 1,
        "answer": "        pass"
    },
    {
        "number": 901,
        "title": "Online Stock Span",
        "difficulty": 1,
        "answer": "        pass"
    },
    {
        "number": 902,
        "title": "Numbers At Most N Given Digit Set",
        "difficulty": 2,
        "answer": "        # dp[i][j] = max(dp[i-1][j-1], dp[i-1][j], dp[i-1][j+1]) + 1\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1], dp[i-1][j+1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1], dp[i-1][j+1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1], dp[i-1][j+1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1], dp[i-1][j+1])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1], dp"
    },
    {
        "number": 903,
        "title": "Valid Permutations for DI Sequence",
        "difficulty": 2,
        "answer": "        n = len(s)\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n        if n == 22:\n            return 22\n"
    },
    {
        "number": 904,
        "title": "Fruit Into Baskets",
        "difficulty": 1,
        "answer": "        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    },
    {
        "number": 905,
        "title": "Sort Array By Parity",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        for i in range(n):\n            if nums[i] % 2 == 0:\n                nums[i], nums[n - 1 - i] = nums[n - 1 - i], nums[i]\n        return nums"
    },
    {
        "number": 906,
        "title": "Super Palindromes",
        "difficulty": 2,
        "answer": "        left_int = int(left)\n        right_int = int(right)\n        if left_int > right_int:\n            return 0\n        if left_int == right_int:\n            return 1\n        if left_int < right_int:\n            return 0\n        return self.superpalindromesInRange(left_int, right_int) + self.superpalindromesInRange(left_int, right_int - 1)"
    },
    {
        "number": 907,
        "title": "Sum of Subarray Minimums",
        "difficulty": 1,
        "answer": "        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    },
    {
        "number": 908,
        "title": "Smallest Range I",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0] - nums[0]\n        if n == 2:\n            return max(nums[0], nums[1]) - min(nums[0], nums[1])\n        if n == 3:\n            return max(nums[0], nums[1], nums[2]) - min(nums[0], nums[1], nums[2])\n        if n == 4:\n            return max(nums[0], nums[1], nums[2], nums[3]) - min(nums[0], nums[1], nums[2], nums[3])\n        if n == 5:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4]) - min(nums[0], nums[1], nums[2], nums[3], nums[4])\n        if n == 6:\n            return"
    },
    {
        "number": 909,
        "title": "Snakes and Ladders",
        "difficulty": 1,
        "answer": "        n = len(board)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n"
    },
    {
        "number": 910,
        "title": "Smallest Range II",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return max(nums[0], nums[1]) - min(nums[0], nums[1])\n        if n == 3:\n            return max(nums[0], nums[1], nums[2]) - min(nums[0], nums[1], nums[2])\n        if n == 4:\n            return max(nums[0], nums[1], nums[2], nums[3]) - min(nums[0], nums[1], nums[2], nums[3])\n        if n == 5:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4]) - min(nums[0], nums[1], nums[2], nums[3], nums[4])\n        if n == 6:\n            return max(nums[0"
    },
    {
        "number": 911,
        "title": "Online Election",
        "difficulty": 1,
        "answer": "        pass"
    },
    {
        "number": 912,
        "title": "Sort an Array",
        "difficulty": 1,
        "answer": "        nums.sort()\n        return nums"
    },
    {
        "number": 913,
        "title": "Cat and Mouse",
        "difficulty": 2,
        "answer": "        m = len(graph)\n        n = len(graph[0])\n        visited = [0] * n\n        visited[0] = 1\n        def dfs(x):\n            if x == n:\n                return 0\n            if visited[x] == 0:\n                visited[x] = 1\n                for i in range(n):\n                    if graph[x][i] == 1 and visited[i] == 0:\n                        visited[i] = 1\n                        dfs(i)\n                return 1\n            if visited[x] == 1:\n                return 2\n            if visited[x] == 2:\n                return 0\n            if visited[x] == 0:\n                visited[x] = 2\n                for i in range(n):\n                    if graph[x][i] == 1 and visited[i] == 2:\n                        visited[i] = 2\n                        dfs(i)\n                return 2\n        return dfs(0)"
    },
    {
        "number": 914,
        "title": "X of a Kind in a Deck of Cards",
        "difficulty": 0,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage"
    },
    {
        "number": 915,
        "title": "Partition Array into Disjoint Intervals",
        "difficulty": 1,
        "answer": "        left = 0\n        right = len(nums) - 1\n        while left < right:\n            if nums[left] < nums[right]:\n                nums[left], nums[right] = nums[right], nums[left]\n                left += 1\n                right -= 1\n            else:\n                left += 1\n        return left"
    },
    {
        "number": 916,
        "title": "Word Subsets",
        "difficulty": 1,
        "answer": "        def universal(b, a):\n            if len(b) == 0:\n                return []\n            if len(a) == 0:\n                return [b]\n            if len(a) == 1:\n                return universal(b[1:], a[0]) + universal(b[1:], a[1:])\n            else:\n                return universal(b[1:], a[1:]) + universal(b[1:], a[1:]) + universal(b[1:], a[1:])"
    },
    {
        "number": 917,
        "title": "Reverse Only Letters",
        "difficulty": 0,
        "answer": "        res = \"\"\n        for i in range(len(s)):\n            if s[i].isalpha():\n                res += s[i].lower()\n            else:\n                res += s[i].upper()\n        return res"
    },
    {
        "number": 918,
        "title": "Maximum Sum Circular Subarray",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        max_sum = 0\n        for i in range(n):\n            max_sum += nums[i]\n        for i in range(n):\n            for j in range(i, n):\n                max_sum += nums[j] - nums[i]\n        return max_sum"
    },
    {
        "number": 919,
        "title": "Complete Binary Tree Inserter",
        "difficulty": 1,
        "answer": "        pass"
    },
    {
        "number": 920,
        "title": "Number of Music Playlists",
        "difficulty": 2,
        "answer": "        # Time: O(n * k * (n + k))\n        # Space: O(n * k)\n        # Runtime: O(n * k * (n + k))\n        # Space: O(n * k)\n        # Runtime: O(n * k * (n + k))\n        # Space: O(n * k)\n        # Runtime: O(n * k * (n + k))\n        # Space: O(n * k)\n        # Runtime: O(n * k * (n + k))\n        # Space: O(n * k)\n        # Runtime: O(n * k * (n + k))\n        # Space: O(n * k)\n        # Runtime: O(n * k * (n + k))\n        # Space: O(n * k)\n        # Runtime: O(n * k * (n + k))\n        # Space: O(n * k)\n        # Runtime: O(n * k * (n + k))\n        # Space: O(n * k)\n        # Runtime: O(n"
    },
    {
        "number": 921,
        "title": "Minimum Add to Make Parentheses Valid",
        "difficulty": 1,
        "answer": "        stack = []\n        for i in s:\n            if i == '(':\n                stack.append(i)\n            elif i == ')':\n                if len(stack) == 0:\n                    return 0\n                else:\n                    stack.pop()\n        return len(stack) + 1"
    },
    {
        "number": 922,
        "title": "Sort Array By Parity II",
        "difficulty": 0,
        "answer": "        odd_nums = []\n        even_nums = []\n        for num in nums:\n            if num % 2 == 0:\n                even_nums.append(num)\n            else:\n                odd_nums.append(num)\n        return odd_nums + even_nums"
    },
    {
        "number": 923,
        "title": "3Sum With Multiplicity",
        "difficulty": 1,
        "answer": "        # Time: O(n^2)\n        # Space: O(n)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        #"
    },
    {
        "number": 924,
        "title": "Minimize Malware Spread",
        "difficulty": 2,
        "answer": "        n = len(graph)\n        if n == 0:\n            return 0\n        m = len(initial)\n        if m == 0:\n            return 0\n        visited = [0] * n\n        visited[0] = 1\n        q = [0]\n        while q:\n            i = q.pop(0)\n            for j in range(n):\n                if graph[i][j] == 1 and visited[j] == 0:\n                    visited[j] = 1\n                    q.append(j)\n        return visited.index(1)"
    },
    {
        "number": 925,
        "title": "Long Pressed Name",
        "difficulty": 0,
        "answer": "        if len(typed) < len(name):\n            return False\n        for i in range(len(name)):\n            if name[i]!= typed[i]:\n                return False\n        return True"
    },
    {
        "number": 926,
        "title": "Flip String to Monotone Increasing",
        "difficulty": 1,
        "answer": "        n = len(s)\n        dp = [[0 for _ in range(n)] for _ in range(n)]\n        for i in range(n):\n            dp[i][i] = 1\n        for i in range(n - 1, -1, -1):\n            for j in range(i + 1, n):\n                if s[i] == s[j]:\n                    dp[i][j] = dp[i + 1][j - 1]\n                else:\n                    dp[i][j] = dp[i + 1][j]\n        return dp[0][0]"
    },
    {
        "number": 927,
        "title": "Three Equal Parts",
        "difficulty": 2,
        "answer": "        if len(arr) < 3:\n            return [-1, -1]\n        if len(arr) == 3:\n            return [0, 0]\n        if len(arr) == 4:\n            return [0, 1]\n        if len(arr) == 5:\n            return [0, 2]\n        if len(arr) == 6:\n            return [1, 0]\n        if len(arr) == 7:\n            return [1, 1]\n        if len(arr) == 8:\n            return [1, 2]\n        if len(arr) == 9:\n            return [2, 0]\n        if len(arr) == 10:\n            return [2, 1]\n        if len(arr) == 11:\n            return [2, 2]\n        if len(arr) == 12:\n            return [3, 0]\n        if len(arr) == 13:\n            return [3, 1]\n        if len(arr) == 14:\n            return [3, 2]\n        if len(arr) == 15:\n            return [4,"
    },
    {
        "number": 928,
        "title": "Minimize Malware Spread II",
        "difficulty": 2,
        "answer": "        n = len(graph)\n        if n == 0:\n            return 0\n        m = len(initial)\n        if m == 0:\n            return 0\n        visited = [0] * n\n        visited[0] = 1\n        queue = [0]\n        while queue:\n            node = queue.pop(0)\n            for i in range(n):\n                if graph[node][i] == 1 and visited[i] == 0:\n                    visited[i] = 1\n                    queue.append(i)\n        return visited.index(1)"
    },
    {
        "number": 929,
        "title": "Unique Email Addresses",
        "difficulty": 0,
        "answer": "        emails = [email.split('@') for email in emails]\n        return len(set(emails))"
    },
    {
        "number": 930,
        "title": "Binary Subarrays With Sum",
        "difficulty": 1,
        "answer": "        n = len(nums)\r\n        dp = [[0] * (goal + 1) for _ in range(n + 1)]\r\n        for i in range(1, n + 1):\r\n            for j in range(1, goal + 1):\r\n                if j >= nums[i - 1]:\r\n                    dp[i][j] = dp[i - 1][j - nums[i - 1]] + 1\r\n                else:\r\n                    dp[i][j] = dp[i - 1][j]\r\n        return dp[n][goal]\r\n\r\n\r\nclass Solution:\r\n    def numSubarraysWithSum(self, nums: List[int], goal: int) -> int:\r\n        \"\"\"\r\n        Given a binary array nums and a target sum, return the number of subarrays with a sum of target sum.\r\n        A subarray is a contiguous part of the array.\r\n        Example 1:\r\n        Input: nums = [1,0,1,0,1], target = 2\r\n        Output:"
    },
    {
        "number": 931,
        "title": "Minimum Falling Path Sum",
        "difficulty": 1,
        "answer": "        if not matrix:\n            return 0\n        m, n = len(matrix), len(matrix[0])\n        dp = [[0] * n for _ in range(m)]\n        dp[0][0] = matrix[0][0]\n        for i in range(1, m):\n            dp[i][0] = dp[i - 1][0] + matrix[i][0]\n        for j in range(1, n):\n            dp[0][j] = dp[0][j - 1] + matrix[0][j]\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + matrix[i][j]\n        return dp[m - 1][n - 1]"
    },
    {
        "number": 932,
        "title": "Beautiful Array",
        "difficulty": 1,
        "answer": "        def is_permutation(nums, k):\n            if k == 0:\n                return True\n            if k == 1:\n                return True\n            if nums[k] == nums[k - 1]:\n                return is_permutation(nums, k - 1)\n            return False\n        return [i for i in range(1, n + 1) if is_permutation(nums, i)]"
    },
    {
        "number": 933,
        "title": "Number of Recent Calls",
        "difficulty": 0,
        "answer": "        self.counter = 0\n        self.queue = []\n        self.queue.append(t)\n        \n    def ping(self, t: int) -> int:\n        \"\"\"\n        You have a RecentCounter class which counts the number of recent requests within a certain time frame.\n        Implement the RecentCounter class:\n            RecentCounter() Initializes the counter with zero recent requests.\n            int ping(int t) Adds a new request at time t, where t represents some time in milliseconds, and returns the number of requests that has happened in the past 3000 milliseconds (including the new request). Specifically, return the number of requests that have happened in the inclusive range [t - 3000, t].\n        It is guaranteed that every call to ping uses a strictly larger value of t than the previous call.\n        Example 1:\n        Input\n        [\"RecentCounter\", \"ping\", \"ping\", \"ping\", \"ping\"]\n        [[], [1], [100], [3001], [3002]]\n        Output\n        [null, 1, 2, 3, 3]\n        Explanation\n        RecentCounter recentCounter = new RecentCounter();\n"
    },
    {
        "number": 934,
        "title": "Shortest Bridge",
        "difficulty": 1,
        "answer": "        n = len(grid)\n        if n == 0:\n            return 0\n        m = len(grid[0])\n        if m == 0:\n            return 0\n        dp = [[0] * m for _ in range(n)]\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == 1:\n                    dp[i][j] = 1\n                    if i > 0:\n                        dp[i - 1][j] = 1\n                    if j > 0:\n                        dp[i][j - 1] = 1\n                    if i < n - 1:\n                        dp[i + 1][j] = 1\n                    if j < m - 1:\n                        dp[i][j + 1] = 1\n        return dp[n - 1][m - 1]"
    },
    {
        "number": 935,
        "title": "Knight Dialer",
        "difficulty": 1,
        "answer": "        # Time: O(n^2)\n        # Space: O(n)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        #"
    },
    {
        "number": 936,
        "title": "Stamping The Sequence",
        "difficulty": 2,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage"
    },
    {
        "number": 937,
        "title": "Reorder Data in Log Files",
        "difficulty": 1,
        "answer": "        logs = sorted(logs, key=lambda x: (x.split()[0], x.split()[1]))\n        return logs"
    },
    {
        "number": 938,
        "title": "Range Sum of BST",
        "difficulty": 0,
        "answer": "        def helper(root, low, high):\n            if not root:\n                return 0\n            if root.val >= low and root.val <= high:\n                return root.val + helper(root.left, low, high) + helper(root.right, low, high)\n            else:\n                return helper(root.left, low, high) + helper(root.right, low, high)\n        return helper(root, low, high)"
    },
    {
        "number": 939,
        "title": "Minimum Area Rectangle",
        "difficulty": 1,
        "answer": "        if len(points) == 0:\n            return 0\n        if len(points) == 1:\n            return points[0][0] * points[0][1]\n        if len(points) == 2:\n            return abs(points[0][0] - points[1][0]) * abs(points[0][1] - points[1][1])\n        if len(points) == 3:\n            return abs(points[0][0] - points[1][0]) * abs(points[0][1] - points[2][1]) + abs(points[0][0] - points[2][0]) * abs(points[0][1] - points[1][1])\n        if len(points) == 4:\n            return abs(points[0][0] - points[1][0]) * abs(points[0][1] - points[2][1]) + abs(points[0][0] - points[2][0]) * abs(points[0][1] - points[3][1]) + abs(points[0][0] - points[3][0"
    },
    {
        "number": 940,
        "title": "Distinct Subsequences II",
        "difficulty": 2,
        "answer": "        n = len(s)\n        dp = [0] * n\n        dp[0] = 1\n        for i in range(1, n):\n            for j in range(i):\n                if s[i] == s[j]:\n                    dp[i] += dp[j]\n        return dp[-1] % (10**9 + 7)"
    },
    {
        "number": 941,
        "title": "Valid Mountain Array",
        "difficulty": 0,
        "answer": "        if len(arr) < 3:\n            return False\n        if arr[0] > arr[1]:\n            return False\n        if arr[0] == arr[1]:\n            return True\n        for i in range(1, len(arr) - 1):\n            if arr[i] > arr[i + 1]:\n                return False\n        return True"
    },
    {
        "number": 942,
        "title": "DI String Match",
        "difficulty": 0,
        "answer": "        n = len(s)\n        perm = [0] * n\n        for i in range(n):\n            perm[i] = i\n        for i in range(n - 1, -1, -1):\n            for j in range(i + 1, n):\n                if s[i] == s[j]:\n                    perm[i] = perm[j]\n                    perm[j] = i\n        return perm"
    },
    {
        "number": 943,
        "title": "Find the Shortest Superstring",
        "difficulty": 2,
        "answer": "        # Time: O(n^2)\n        # Space: O(n)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        #"
    },
    {
        "number": 944,
        "title": "Delete Columns to Make Sorted",
        "difficulty": 0,
        "answer": "        n = len(strs)\n        if n == 0:\n            return 0\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n):\n            for j in range(i):\n                if strs[i][j] < strs[j][i]:\n                    dp[i][j] = dp[j][i] + 1\n                else:\n                    dp[i][j] = dp[i][j]\n        return n - max(dp[0])"
    },
    {
        "number": 945,
        "title": "Minimum Increment to Make Array Unique",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1\n        if n == 3:\n            return 1\n        if n == 4:\n            return 1\n        if n == 5:\n            return 1\n        if n == 6:\n            return 1\n        if n == 7:\n            return 1\n        if n == 8:\n            return 1\n        if n == 9:\n            return 1\n        if n == 10:\n            return 1\n        if n == 11:\n            return 1\n        if n == 12:\n            return 1\n        if n == 13:\n            return 1\n        if n == 14:\n            return 1\n        if n == 15:\n            return 1\n        if n == 16:\n            return 1\n        if n == 17:\n            return 1\n        if n == 18:\n            return 1\n        if n == 19:\n            return 1\n        if n == 20:\n            return 1\n        if n == 21:\n            return 1"
    },
    {
        "number": 946,
        "title": "Validate Stack Sequences",
        "difficulty": 1,
        "answer": "        stack = []\n        for i in range(len(pushed)):\n            if pushed[i] == popped[i]:\n                stack.append(pushed[i])\n            else:\n                if len(stack) == 0:\n                    return False\n                else:\n                    stack.pop()\n        return len(stack) == 0\n"
    },
    {
        "number": 947,
        "title": "Most Stones Removed with Same Row or Column",
        "difficulty": 1,
        "answer": "        n = len(stones)\n        if n == 0:\n            return 0\n        if n == 1:\n            return stones[0][0]\n        if n == 2:\n            return stones[0][0] + stones[1][0]\n        if n == 3:\n            return stones[0][0] + stones[1][0] + stones[2][0]\n        if n == 4:\n            return stones[0][0] + stones[1][0] + stones[2][0] + stones[3][0]\n        if n == 5:\n            return stones[0][0] + stones[1][0] + stones[2][0] + stones[3][0] + stones[4][0]\n        if n == 6:\n            return stones[0][0] + stones[1][0] + stones[2][0] + stones[3][0] + stones[4][0] + stones[5][0]\n        if n == 7:\n            return stones[0][0] + stones[1][0] + stones[2][0] +"
    },
    {
        "number": 948,
        "title": "Bag of Tokens",
        "difficulty": 1,
        "answer": "        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    },
    {
        "number": 949,
        "title": "Largest Time for Given Digits",
        "difficulty": 1,
        "answer": "        arr = sorted(arr)\n        if len(arr) == 1:\n            return \"00:00\"\n        if len(arr) == 2:\n            return str(arr[1]) + \":00\"\n        if len(arr) == 3:\n            return str(arr[2]) + \":00\"\n        if len(arr) == 4:\n            return str(arr[3]) + \":00\"\n        if len(arr) == 5:\n            return str(arr[4]) + \":00\"\n        if len(arr) == 6:\n            return str(arr[5]) + \":00\"\n        if len(arr) == 7:\n            return str(arr[6]) + \":00\"\n        if len(arr) == 8:\n            return str(arr[7]) + \":00\"\n        if len(arr) == 9:\n            return str(arr[8]) + \":00\"\n        if len(arr) == 10:\n            return str(arr[9]) + \":00\"\n        if len(arr) == 11"
    },
    {
        "number": 950,
        "title": "Reveal Cards In Increasing Order",
        "difficulty": 1,
        "answer": "        deck.sort()\n        return deck"
    },
    {
        "number": 951,
        "title": "Flip Equivalent Binary Trees",
        "difficulty": 1,
        "answer": "        if not root1 and not root2:\n            return True\n        if not root1 or not root2:\n            return False\n        if root1.val!= root2.val:\n            return False\n        self.flipEquiv(root1.left, root2.right)\n        self.flipEquiv(root1.right, root2.left)\n        return True"
    },
    {
        "number": 952,
        "title": "Largest Component Size by Common Factor",
        "difficulty": 2,
        "answer": "        nums.sort()\n        n = len(nums)\n        dp = [0] * n\n        for i in range(n):\n            for j in range(i):\n                if nums[i] % nums[j] == 0:\n                    dp[i] = max(dp[i], dp[j] + 1)\n        return max(dp)"
    },
    {
        "number": 953,
        "title": "Verifying an Alien Dictionary",
        "difficulty": 0,
        "answer": "        # \u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u4e3a\u5355\u8bcd\n        def isWord(word):\n            for c in word:\n                if c not in order:\n                    return False\n            return True"
    },
    {
        "number": 954,
        "title": "Array of Doubled Pairs",
        "difficulty": 1,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage"
    },
    {
        "number": 955,
        "title": "Delete Columns to Make Sorted II",
        "difficulty": 1,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n"
    },
    {
        "number": 956,
        "title": "Tallest Billboard",
        "difficulty": 2,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n"
    },
    {
        "number": 957,
        "title": "Prison Cells After N Days",
        "difficulty": 1,
        "answer": "        # \u521d\u59cb\u5316\n        # \u521d\u59cb\u5316\n        # \u521d\u59cb\u5316\n        # \u521d\u59cb\u5316\n        # \u521d\u59cb\u5316\n        # \u521d\u59cb\u5316\n        # \u521d\u59cb\u5316\n        # \u521d\u59cb\u5316\n        # \u521d\u59cb\u5316\n        # \u521d\u59cb\u5316\n        # \u521d\u59cb\u5316\n        # \u521d\u59cb\u5316\n        # \u521d\u59cb\u5316\n        # \u521d\u59cb\u5316\n        # \u521d\u59cb\u5316\n        # \u521d\u59cb\u5316\n        # \u521d\u59cb\u5316\n        # \u521d\u59cb\u5316\n        # \u521d\u59cb\u5316\n        # \u521d\u59cb\u5316\n        # \u521d\u59cb\u5316\n        # \u521d\u59cb\u5316\n        # \u521d\u59cb\u5316\n        # \u521d\u59cb\u5316\n        # \u521d\u59cb\u5316\n"
    },
    {
        "number": 958,
        "title": "Check Completeness of a Binary Tree",
        "difficulty": 1,
        "answer": "        if not root:\n            return True\n        if not root.left and not root.right:\n            return True\n        if not root.left or not root.right:\n            return False\n        if root.left.val == root.right.val:\n            return self.isCompleteTree(root.left) and self.isCompleteTree(root.right)\n        else:\n            return False"
    },
    {
        "number": 959,
        "title": "Regions Cut By Slashes",
        "difficulty": 1,
        "answer": "        n = len(grid)\n        if n == 0:\n            return 0\n        m = len(grid[0])\n        if m == 0:\n            return 0\n        count = 0\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == \"/\":\n                    count += 1\n        return count"
    },
    {
        "number": 960,
        "title": "Delete Columns to Make Sorted III",
        "difficulty": 2,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n"
    },
    {
        "number": 961,
        "title": "N-Repeated Element in Size 2N Array",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return nums[0]\n        if n == 3:\n            return nums[0]\n        if n == 4:\n            return nums[0]\n        if n == 5:\n            return nums[0]\n        if n == 6:\n            return nums[0]\n        if n == 7:\n            return nums[0]\n        if n == 8:\n            return nums[0]\n        if n == 9:\n            return nums[0]\n        if n == 10:\n            return nums[0]\n        if n == 11:\n            return nums[0]\n        if n == 12:\n            return nums[0]\n        if n == 13:\n            return nums[0]\n        if n == 14:\n            return nums[0]\n        if n == 15:\n            return nums[0]\n        if n == 16:\n            return nums[0]\n        "
    },
    {
        "number": 962,
        "title": "Maximum Width Ramp",
        "difficulty": 1,
        "answer": "        if not nums:\n            return 0\n        n = len(nums)\n        dp = [0] * n\n        dp[0] = nums[0]\n        for i in range(1, n):\n            dp[i] = max(dp[i - 1], nums[i] + dp[i - 1])\n        return dp[-1]"
    },
    {
        "number": 963,
        "title": "Minimum Area Rectangle II",
        "difficulty": 1,
        "answer": "        # O(n^2)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O"
    },
    {
        "number": 964,
        "title": "Least Operators to Express Number",
        "difficulty": 2,
        "answer": "        if x == 0:\n            return 0\n        if x == 1:\n            return 1\n        if x == 2:\n            return 2\n        if x == 3:\n            return 3\n        if x == 4:\n            return 4\n        if x == 5:\n            return 5\n        if x == 6:\n            return 6\n        if x == 7:\n            return 7\n        if x == 8:\n            return 8\n        if x == 9:\n            return 9\n        if x == 10:\n            return 10\n        if x == 11:\n            return 11\n        if x == 12:\n            return 12\n        if x == 13:\n            return 13\n        if x == 14:\n            return 14\n        if x == 15:\n            return 15\n        if x == 16:\n            return 16\n        if x == 17:\n            return 17\n        if x == 18:\n            return 18\n        if x == 19:\n            return 19\n        if x == 20:\n            return 20\n        if x == 21:\n            return 21\n        if x == 22:\n            "
    },
    {
        "number": 965,
        "title": "Univalued Binary Tree",
        "difficulty": 0,
        "answer": "        if not root:\n            return True\n        if root.left and root.right:\n            if root.left.val == root.right.val:\n                return self.isUnivalTree(root.left) and self.isUnivalTree(root.right)\n            else:\n                return False\n        if root.left:\n            if root.left.val == root.val:\n                return self.isUnivalTree(root.left)\n            else:\n                return False\n        if root.right:\n            if root.right.val == root.val:\n                return self.isUnivalTree(root.right)\n            else:\n                return False\n        return True"
    },
    {
        "number": 966,
        "title": "Vowel Spellchecker",
        "difficulty": 1,
        "answer": "        # TODO: complete this method\n        # TODO: complete this method\n        # TODO: complete this method\n        # TODO: complete this method\n        # TODO: complete this method\n        # TODO: complete this method\n        # TODO: complete this method\n        # TODO: complete this method\n        # TODO: complete this method\n        # TODO: complete this method\n        # TODO: complete this method\n        # TODO: complete this method\n        # TODO: complete this method\n        # TODO: complete this method\n        # TODO: complete this method\n        # TODO: complete this method\n        # TODO: complete this method\n        # TODO: complete this method\n        # TODO: complete this method\n        # TODO: complete this method\n        # TODO: complete this method\n        # TODO: complete this method\n        # TODO: complete this method\n        # TODO: complete this method\n        # TODO: complete this method\n        # TODO: complete this method\n        # TODO: complete this method\n        # TODO: complete this"
    },
    {
        "number": 967,
        "title": "Numbers With Same Consecutive Differences",
        "difficulty": 1,
        "answer": "        res = []\n        for i in range(n):\n            res.append(abs(n - i))\n        res.sort()\n        return res[k - 1::-1]"
    },
    {
        "number": 968,
        "title": "Binary Tree Cameras",
        "difficulty": 2,
        "answer": "        def dfs(node):\n            if not node:\n                return 0\n            left = dfs(node.left)\n            right = dfs(node.right)\n            if node.left and node.right:\n                return 1 + min(left, right)\n            if node.left:\n                return 1 + min(left, 0)\n            if node.right:\n                return 1 + min(left, 0)\n            return 0\n        return dfs(root)"
    },
    {
        "number": 969,
        "title": "Pancake Sorting",
        "difficulty": 1,
        "answer": "        n = len(arr)\n        if n == 1:\n            return arr\n        # find the largest element\n        max_val = arr[0]\n        for i in range(1, n):\n            if arr[i] > max_val:\n                max_val = arr[i]\n        # reverse the array\n        for i in range(n):\n            arr[i] = arr[i] * -1\n        # find the largest element\n        for i in range(n - 1, -1, -1):\n            if arr[i] > max_val:\n                max_val = arr[i]\n        # reverse the array\n        for i in range(n - 1, -1, -1):\n            arr[i] = arr[i] * -1\n        # find the largest element\n        for i in range(n - 1, -1, -1):\n            if arr[i] > max_val:\n                max_val = arr[i]\n        # reverse the array\n        for i in range(n - 1, -1, -1):\n"
    },
    {
        "number": 970,
        "title": "Powerful Integers",
        "difficulty": 1,
        "answer": "        def get_powerful_integers(x, y, bound):\n            powerful_integers = []\n            for i in range(x, bound + 1):\n                for j in range(y, bound + 1):\n                    if i + j <= bound:\n                        powerful_integers.append(i + j)\n            return powerful_integers"
    },
    {
        "number": 971,
        "title": "Flip Binary Tree To Match Preorder Traversal",
        "difficulty": 1,
        "answer": "        def flip(root, voyage):\n            if not root:\n                return -1\n            if root.val == voyage[0]:\n                root.val = voyage[1]\n                root.left = flip(root.left, voyage)\n                root.right = flip(root.right, voyage)\n            elif root.val == voyage[1]:\n                root.val = voyage[0]\n                root.left = flip(root.left, voyage)\n                root.right = flip(root.right, voyage)\n            return root\n        return flip(root, voyage)"
    },
    {
        "number": 972,
        "title": "Equal Rational Numbers",
        "difficulty": 2,
        "answer": "        if len(s)!= len(t):\n            return False\n        if len(s) == 0:\n            return True\n        if len(s) == 1:\n            return s == t\n        if len(s) == 2:\n            return s == t[0] + t[1]\n        if len(s) == 3:\n            return s == t[0] + t[1] + t[2]\n        if len(s) == 4:\n            return s == t[0] + t[1] + t[2] + t[3]\n        if len(s) == 5:\n            return s == t[0] + t[1] + t[2] + t[3] + t[4]\n        if len(s) == 6:\n            return s == t[0] + t[1] + t[2] + t[3] + t[4] + t[5]\n        if len(s) == 7:\n            return s == t[0] + t[1] + t[2] + t[3] +"
    },
    {
        "number": 973,
        "title": "K Closest Points to Origin",
        "difficulty": 1,
        "answer": "        # O(n^2)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O"
    },
    {
        "number": 974,
        "title": "Subarray Sums Divisible by K",
        "difficulty": 1,
        "answer": "        count = 0\n        for i in range(len(nums)):\n            for j in range(i, len(nums)):\n                if nums[j] % k == 0:\n                    count += 1\n        return count"
    },
    {
        "number": 975,
        "title": "Odd Even Jump",
        "difficulty": 2,
        "answer": "        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    },
    {
        "number": 976,
        "title": "Largest Perimeter Triangle",
        "difficulty": 0,
        "answer": "        if len(nums) < 3:\n            return 0\n        \n        def get_area(nums):\n            area = 0\n            for i in range(len(nums)):\n                area += nums[i] * (i + 1)\n            return area\n        \n        def get_perimeter(nums):\n            perimeter = 0\n            for i in range(len(nums)):\n                perimeter += nums[i] * (i + 1)\n            return perimeter\n        \n        def get_side(nums):\n            side = 0\n            for i in range(len(nums)):\n                side += nums[i] * (i + 1)\n            return side\n        \n        def get_triangle_area(nums):\n            triangle_area = get_area(nums)\n            for i in range(len(nums) - 1):\n                triangle_area = max(triangle_area, get_side(nums[i:i+2]) + get_side(nums[i+1:i+3"
    },
    {
        "number": 977,
        "title": "Squares of a Sorted Array",
        "difficulty": 0,
        "answer": "        nums.sort()\n        squares = []\n        for i in range(len(nums)):\n            squares.append(nums[i] ** 2)\n        return squares"
    },
    {
        "number": 978,
        "title": "Longest Turbulent Subarray",
        "difficulty": 1,
        "answer": "        n = len(arr)\n        dp = [1] * n\n        for i in range(1, n):\n            for j in range(i):\n                if arr[i] > arr[j]:\n                    dp[i] = max(dp[i], dp[j] + 1)\n        return dp[-1]"
    },
    {
        "number": 979,
        "title": "Distribute Coins in Binary Tree",
        "difficulty": 1,
        "answer": "        def dfs(root, coins):\n            if not root:\n                return 0\n            if not root.left and not root.right:\n                return coins + 1\n            left = dfs(root.left, coins + 1)\n            right = dfs(root.right, coins + 1)\n            return min(left, right)"
    },
    {
        "number": 980,
        "title": "Unique Paths III",
        "difficulty": 2,
        "answer": "        m = len(grid)\n        n = len(grid[0])\n        dp = [[0] * n for _ in range(m)]\n        dp[0][0] = 1\n        for i in range(1, m):\n            for j in range(1, n):\n                if grid[i][j] == 1:\n                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n                else:\n                    dp[i][j] = dp[i - 1][j]\n        return dp[m - 1][n - 1]"
    },
    {
        "number": 981,
        "title": "Time Based Key-Value Store",
        "difficulty": 1,
        "answer": "        pass\n    def remove(self, key: str, timestamp: int) -> None:\n    def contains(self, key: str, timestamp: int) -> bool:\n    def get(self, key: str, timestamp: int) -> str:\n    def remove(self, key: str, timestamp: int) -> None:\n    def contains(self, key: str, timestamp: int) -> bool:\n    def get(self, key: str, timestamp: int) -> str:\n    def remove(self, key: str, timestamp: int) -> None:\n    def contains(self, key: str, timestamp: int) -> bool:\n    def get(self, key: str, timestamp: int) -> str:\n    def remove(self, key: str, timestamp: int) -> None:\n    def contains(self, key: str, timestamp: int) -> bool:\n    def get(self, key: str, timestamp: int) -> str:\n    def remove(self, key: str, timestamp: int) -> None:\n    def contains(self, key: str, timestamp: int"
    },
    {
        "number": 982,
        "title": "Triples with Bitwise AND Equal To Zero",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        count = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                for k in range(j+1, n):\n                    if nums[i] & nums[j] & nums[k] == 0:\n                        count += 1\n        return count"
    },
    {
        "number": 983,
        "title": "Minimum Cost For Tickets",
        "difficulty": 1,
        "answer": "        pass"
    },
    {
        "number": 984,
        "title": "String Without AAA or BBB",
        "difficulty": 1,
        "answer": "        if a == 0:\n            return \"aabaa\"\n        if b == 0:\n            return \"aabaa\"\n        if a == b:\n            return \"aabaa\"\n        if a == b:\n            return \"aabaa\"\n        if a == b:\n            return \"aabaa\"\n        if a == b:\n            return \"aabaa\"\n        if a == b:\n            return \"aabaa\"\n        if a == b:\n            return \"aabaa\"\n        if a == b:\n            return \"aabaa\"\n        if a == b:\n            return \"aabaa\"\n        if a == b:\n            return \"aabaa\"\n        if a == b:\n            return \"aabaa\"\n        if a == b:\n            return \"aabaa\"\n        if a == b:\n            return \"aabaa\"\n        if a == b:\n            return \"aabaa\"\n        if a == b:\n            return \"aabaa\"\n        if a == b:\n            return \""
    },
    {
        "number": 985,
        "title": "Sum of Even Numbers After Queries",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return []\n        if n == 1:\n            return [nums[0]]\n        if n == 2:\n            return [nums[0] + nums[1]]\n        if n == 3:\n            return [nums[0] + nums[1] + nums[2]]\n        if n == 4:\n            return [nums[0] + nums[1] + nums[2] + nums[3]]\n        if n == 5:\n            return [nums[0] + nums[1] + nums[2] + nums[3] + nums[4]]\n        if n == 6:\n            return [nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5]]\n        if n == 7:\n            return [nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5"
    },
    {
        "number": 986,
        "title": "Interval List Intersections",
        "difficulty": 1,
        "answer": "        intersection = []\n        i = 0\n        j = 0\n        while i < len(firstList) and j < len(secondList):\n            if firstList[i][0] <= secondList[j][1]:\n                intersection.append(firstList[i])\n                i += 1\n            else:\n                intersection.append(secondList[j])\n                j += 1\n        return intersection"
    },
    {
        "number": 987,
        "title": "Vertical Order Traversal of a Binary Tree",
        "difficulty": 2,
        "answer": "        if not root:\n            return []\n        res = []\n        queue = collections.deque([(root, 0, 0)])\n        while queue:\n            node, row, col = queue.popleft()\n            res.append([node.val])\n            if node.left:\n                queue.append((node.left, row + 1, col))\n            if node.right:\n                queue.append((node.right, row + 1, col + 1))\n        return res[::-1]"
    },
    {
        "number": 988,
        "title": "Smallest String Starting From Leaf",
        "difficulty": 1,
        "answer": "        def helper(root, prefix):\n            if not root:\n                return \"\"\n            if root.left:\n                prefix += str(root.left.val)\n                helper(root.left, prefix)\n            if root.right:\n                prefix += str(root.right.val)\n                helper(root.right, prefix)\n            return prefix"
    },
    {
        "number": 989,
        "title": "Add to Array-Form of Integer",
        "difficulty": 0,
        "answer": "        res = []\n        for i in range(len(num)):\n            res.append(num[i] + k)\n        return res"
    },
    {
        "number": 990,
        "title": "Satisfiability of Equality Equations",
        "difficulty": 1,
        "answer": "        # O(n) time | O(n) space\n        # O(n) space\n        # O(n) space\n        # O(n) space\n        # O(n) space\n        # O(n) space\n        # O(n) space\n        # O(n) space\n        # O(n) space\n        # O(n) space\n        # O(n) space\n        # O(n) space\n        # O(n) space\n        # O(n) space\n        # O(n) space\n        # O(n) space\n        # O(n) space\n        # O(n) space\n        # O(n) space\n        # O(n) space\n        # O(n) space\n        # O(n) space\n        # O(n) space\n        # O(n) space\n        # O(n) space\n        # O(n) space\n        # O(n) space\n        # O(n) space\n        # O(n) space\n        # O(n) space\n        # O("
    },
    {
        "number": 991,
        "title": "Broken Calculator",
        "difficulty": 1,
        "answer": "        dp = [0] * (target + 1)\n        dp[0] = 1\n        for i in range(1, target + 1):\n            dp[i] = dp[i - 1] + dp[i]\n        return dp[target]"
    },
    {
        "number": 992,
        "title": "Subarrays with K Different Integers",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        dp = [0] * n\n        for i in range(n):\n            for j in range(i, n):\n                if nums[i] == nums[j]:\n                    dp[j] += 1\n        return sum(dp) % (10 ** 9 + 7)"
    },
    {
        "number": 993,
        "title": "Cousins in Binary Tree",
        "difficulty": 0,
        "answer": "        def dfs(root, x, y):\n            if not root:\n                return False\n            if root.val == x or root.val == y:\n                return root.val == x and root.val == y\n            return dfs(root.left, x, y) or dfs(root.right, x, y)"
    },
    {
        "number": 994,
        "title": "Rotting Oranges",
        "difficulty": 1,
        "answer": "        m = len(grid)\n        n = len(grid[0])\n        queue = collections.deque()\n        visited = set()\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == 2:\n                    queue.append((i, j))\n                    visited.add((i, j))\n        while queue:\n            x, y = queue.popleft()\n            for i in range(4):\n                nx = x + dx[i]\n                ny = y + dy[i]\n                if 0 <= nx < m and 0 <= ny < n and grid[nx][ny] == 1 and (nx, ny) not in visited:\n                    grid[nx][ny] = 2\n                    visited.add((nx, ny))\n                    queue.append((nx, ny))\n        return -1 if len(visited) == m * n else 0"
    },
    {
        "number": 995,
        "title": "Minimum Number of K Consecutive Bit Flips",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if n < k:\n            return -1\n        if n == k:\n            return 0\n        if n == k:\n            return 1\n        if n == k:\n            return 1\n        if n == k:\n            return 1\n        if n == k:\n            return 1\n        if n == k:\n            return 1\n        if n == k:\n            return 1\n        if n == k:\n            return 1\n        if n == k:\n            return 1\n        if n == k:\n            return 1\n        if n == k:\n            return 1\n        if n == k:\n            return 1\n        if n == k:\n            return 1\n        if n == k:\n            return 1\n        if n == k:\n            return 1\n        if n == k:\n            return 1\n        if n == k:\n            return 1\n        if n == k:\n            return 1\n        if n == k:\n            return 1\n        if n == k:\n            return 1\n        if n == k:\n            return"
    },
    {
        "number": 996,
        "title": "Number of Squareful Arrays",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if n < 2:\n            return n\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 3\n        if n == 5:\n            return 4\n        if n == 6:\n            return 5\n        if n == 7:\n            return 6\n        if n == 8:\n            return 7\n        if n == 9:\n            return 8\n        if n == 10:\n            return 9\n        if n == 11:\n            return 10\n        if n == 12:\n            return 11\n        if n == 13:\n            return 12\n        if n == 14:\n            return 13\n        if n == 15:\n            return 14\n        if n == 16:\n            return 15\n        if n == 17:\n            return 16\n        if n == 18:\n            return 17\n        if n == 19:\n            return 18\n        if n == 20:\n            return 19\n        if n == 21:\n            return 20\n        if n == 22:\n            return 21"
    },
    {
        "number": 997,
        "title": "Find the Town Judge",
        "difficulty": 0,
        "answer": "        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        for i in range(len(trust)):\n            for j in range(len(trust[i])):\n                if trust[i][j] == 1:\n                    return i\n        return -1"
    },
    {
        "number": 998,
        "title": "Maximum Binary Tree II",
        "difficulty": 1,
        "answer": "        if not root:\n            return None\n        if root.val > val:\n            root.left = self.insertIntoMaxTree(root.left, val)\n            root.right = self.insertIntoMaxTree(root.right, val)\n        else:\n            root.left = self.insertIntoMaxTree(root.left, val)\n            root.right = self.insertIntoMaxTree(root.right, val)\n        return root"
    },
    {
        "number": 999,
        "title": "Available Captures for Rook",
        "difficulty": 0,
        "answer": "        n = len(board)\n        m = len(board[0])\n        count = 0\n        for i in range(n):\n            for j in range(m):\n                if board[i][j] == \"R\":\n                    count += 1\n                if board[i][j] == \"B\":\n                    count -= 1\n        return count"
    },
    {
        "number": 1000,
        "title": "Minimum Cost to Merge Stones",
        "difficulty": 2,
        "answer": "        if k == 0:\n            return 0\n        if k == 1:\n            return stones[0]\n        if k == 2:\n            return stones[0] + stones[1]\n        if k == 3:\n            return stones[0] + stones[1] + stones[2]\n        if k == 4:\n            return stones[0] + stones[1] + stones[2] + stones[3]\n        if k == 5:\n            return stones[0] + stones[1] + stones[2] + stones[3] + stones[4]\n        if k == 6:\n            return stones[0] + stones[1] + stones[2] + stones[3] + stones[4] + stones[5]\n        if k == 7:\n            return stones[0] + stones[1] + stones[2] + stones[3] + stones[4] + stones[5] + stones[6]\n        if k == 8:\n            return stones[0] + stones[1] + stones[2] + stones[3] + stones[4] + stones["
    },
    {
        "number": 1001,
        "title": "Grid Illumination",
        "difficulty": 2,
        "answer": "        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n"
    },
    {
        "number": 1002,
        "title": "Find Common Characters",
        "difficulty": 0,
        "answer": "        # Time: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O"
    },
    {
        "number": 1003,
        "title": "Check If Word Is Valid After Substitutions",
        "difficulty": 1,
        "answer": "        if len(s) == 0:\n            return True\n        if len(s) == 1:\n            return s[0] == \" \"\n        if len(s) == 2:\n            return s[0] == \"a\" and s[1] == \"b\"\n        if len(s) == 3:\n            return s[0] == \"a\" and s[1] == \"b\" and s[2] == \"c\"\n        if len(s) == 4:\n            return s[0] == \"a\" and s[1] == \"b\" and s[2] == \"c\" and s[3] == \"d\"\n        if len(s) == 5:\n            return s[0] == \"a\" and s[1] == \"b\" and s[2] == \"c\" and s[3] == \"d\" and s[4] == \"e\"\n        if len(s) == 6:\n            return s[0] == \"a\" and s[1] == \"b\" and s[2] == \"c\" and s[3"
    },
    {
        "number": 1004,
        "title": "Max Consecutive Ones III",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        dp = [0] * n\n        for i in range(n):\n            if nums[i] == 0:\n                dp[i] = 1\n            else:\n                dp[i] = dp[i - 1] + 1\n        return max(dp)"
    },
    {
        "number": 1005,
        "title": "Maximize Sum Of Array After K Negations",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        if n < k:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return max(nums[0], nums[1])\n        if n == 3:\n            return max(nums[0], nums[1], nums[2])\n        if n == 4:\n            return max(nums[0], nums[1], nums[2], nums[3])\n        if n == 5:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4])\n        if n == 6:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5])\n        if n == 7:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6])\n        if n == 8:\n            "
    },
    {
        "number": 1006,
        "title": "Clumsy Factorial",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return 1\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n        if n == 22:\n            "
    },
    {
        "number": 1007,
        "title": "Minimum Domino Rotations For Equal Row",
        "difficulty": 1,
        "answer": "        n = len(tops)\n        if n == 0 or n == 1:\n            return 0\n        \n        dp = [[0] * n for _ in range(n)]\n        \n        for i in range(n):\n            for j in range(i):\n                if tops[i] > tops[j]:\n                    dp[i][j] = dp[j][i] = 1\n                else:\n                    dp[i][j] = dp[j][i] = 0\n        \n        for i in range(n):\n            for j in range(n):\n                if bottoms[i] > bottoms[j]:\n                    dp[i][j] = dp[i][j] = -1\n                else:\n                    dp[i][j] = dp[i][j] = 0\n        \n        for i in range(n):\n            for j in range(n):\n                if dp[i][j] == -1:\n                    return -1\n                if dp[i][j] == 0:\n                    return 0\n        \n        return n\n"
    },
    {
        "number": 1008,
        "title": "Construct Binary Search Tree from Preorder Traversal",
        "difficulty": 1,
        "answer": "        if not preorder:\n            return None\n        root = self.buildTree(preorder)\n        return root"
    },
    {
        "number": 1009,
        "title": "Complement of Base 10 Integer",
        "difficulty": 0,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        res = 0\n        while n:\n            res += (n & 1)\n            n >>= 1\n        return res"
    },
    {
        "number": 1010,
        "title": "Pairs of Songs With Total Durations Divisible by 60",
        "difficulty": 1,
        "answer": "        # Time complexity: O(n)\n        # Space Complexity: O(n)\n        # Time: O(n)\n        # Space: O(1)\n        # Time: O(n)\n        # Space: O(n)\n        # Time: O(n)\n        # Space: O(n)\n        # Time: O(n)\n        # Space: O(n)\n        # Time: O(n)\n        # Space: O(n)\n        # Time: O(n)\n        # Space: O(n)\n        # Time: O(n)\n        # Space: O(n)\n        # Time: O(n)\n        # Space: O(n)\n        # Time: O(n)\n        # Space: O(n)\n        # Time: O(n)\n        # Space: O(n)\n        # Time: O(n)\n        # Space: O(n)\n        # Time: O(n)\n        # Space: O(n)\n        # Time: O(n)\n        # Space:"
    },
    {
        "number": 1011,
        "title": "Capacity To Ship Packages Within D Days",
        "difficulty": 1,
        "answer": "        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-weights[i]] + weights[i])\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-weights[i]] + weights[i])\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-weights[i]] + weights[i])\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-weights[i]] + weights[i])\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-weights[i]] + weights[i])\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-weights[i]] + weights[i])\n        # dp[i][j] = min(dp[i-"
    },
    {
        "number": 1012,
        "title": "Numbers With Repeated Digits",
        "difficulty": 2,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n        if n == 22:\n            "
    },
    {
        "number": 1013,
        "title": "Partition Array Into Three Parts With Equal Sum",
        "difficulty": 0,
        "answer": "        # Time: O(n)\n        # Space: O(1)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage"
    },
    {
        "number": 1014,
        "title": "Best Sightseeing Pair",
        "difficulty": 1,
        "answer": "        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    },
    {
        "number": 1015,
        "title": "Smallest Integer Divisible by K",
        "difficulty": 1,
        "answer": "        # Time: O(n)\n        # Space: O(1)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage"
    },
    {
        "number": 1016,
        "title": "Binary String With Substrings Representing 1 To N",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return False\n        if n == 1:\n            return True\n        if n == 2:\n            return s[0] == s[1]\n        if n == 3:\n            return s[0] == s[1] and s[1] == s[2]\n        if n == 4:\n            return s[0] == s[1] and s[1] == s[2] and s[2] == s[3]\n        if n == 5:\n            return s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4]\n        if n == 6:\n            return s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5]\n        if n == 7:\n            return s[0] == s[1] and s[1] == s[2] and s[2]"
    },
    {
        "number": 1017,
        "title": "Convert to Base -2",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return \"0\"\n        if n == 1:\n            return \"1\"\n        if n == -1:\n            return \"-\"\n        if n == -2:\n            return \"0\"\n        if n == -3:\n            return \"1\"\n        if n == -4:\n            return \"0\"\n        if n == -5:\n            return \"1\"\n        if n == -6:\n            return \"0\"\n        if n == -7:\n            return \"1\"\n        if n == -8:\n            return \"0\"\n        if n == -9:\n            return \"1\"\n        if n == -10:\n            return \"0\"\n        if n == -11:\n            return \"1\"\n        if n == -12:\n            return \"0\"\n        if n == -13:\n            return \"1\"\n        if n == -14:\n            return \"0\"\n        if n == -15:\n            return \"1\"\n        if n == -16:\n            return \"0\"\n        "
    },
    {
        "number": 1018,
        "title": "Binary Prefix Divisible By 5",
        "difficulty": 0,
        "answer": "        prefixes = []\n        for i in range(len(nums)):\n            prefix = 0\n            for j in range(i, len(nums)):\n                prefix += nums[j]\n                if prefix % 5 == 0:\n                    prefixes.append(True)\n                else:\n                    prefixes.append(False)\n        return prefixes"
    },
    {
        "number": 1019,
        "title": "Next Greater Node In Linked List",
        "difficulty": 1,
        "answer": "        if not head:\n            return []\n        \n        result = []\n        \n        def next_greater(node):\n            if not node:\n                return 0\n            \n            next_greater = next_greater(node.next)\n            result.append(node.val)\n            \n            if node.next:\n                next_greater = max(next_greater, node.next.val)\n            \n            return next_greater\n        \n        next_greater = next_greater(head)\n        \n        for i in range(1, len(head)):\n            next_greater = max(next_greater, next_greater)\n            \n        return result\n"
    },
    {
        "number": 1020,
        "title": "Number of Enclaves",
        "difficulty": 1,
        "answer": "        m = len(grid)\n        n = len(grid[0])\n        count = 0\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == 0:\n                    count += 1\n        return count"
    },
    {
        "number": 1021,
        "title": "Remove Outermost Parentheses",
        "difficulty": 0,
        "answer": "        def removeOuterParentheses(s):\n            if not s:\n                return \"\"\n            stack = []\n            for i in range(len(s)):\n                if s[i] == '(':\n                    stack.append(s[i])\n                else:\n                    if stack:\n                        stack.pop()\n                    else:\n                        return s[:i] + \"()\" + s[i + 1:]\n            return s\n        return removeOuterParentheses(s)"
    },
    {
        "number": 1022,
        "title": "Sum of Root To Leaf Binary Numbers",
        "difficulty": 0,
        "answer": "        def dfs(root, path):\n            if not root:\n                return 0\n            if not root.left and not root.right:\n                return path[-1]\n            left = dfs(root.left, path + [root.left.val])\n            right = dfs(root.right, path + [root.right.val])\n            return left + right + root.val"
    },
    {
        "number": 1023,
        "title": "Camelcase Matching",
        "difficulty": 1,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n"
    },
    {
        "number": 1024,
        "title": "Video Stitching",
        "difficulty": 1,
        "answer": "        def cut_clips(clips, start, end):\n            if start == end:\n                return [start, end]\n            mid = (start + end) // 2\n            left = cut_clips(clips, start, mid)\n            right = cut_clips(clips, mid + 1, end)\n            return [start, mid] + left + right"
    },
    {
        "number": 1025,
        "title": "Divisor Game",
        "difficulty": 0,
        "answer": "        if n == 0:\n            return True\n        if n == 1:\n            return False\n        if n % 2 == 0:\n            return self.divisorGame(n // 2)\n        else:\n            return self.divisorGame(n - 1)"
    },
    {
        "number": 1026,
        "title": "Maximum Difference Between Node and Ancestor",
        "difficulty": 1,
        "answer": "        def find_ancestor(node):\n            if not node:\n                return None\n            if node.left:\n                return find_ancestor(node.left)\n            if node.right:\n                return find_ancestor(node.right)\n            return node.val"
    },
    {
        "number": 1027,
        "title": "Longest Arithmetic Subsequence",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        dp = [0] * n\n        dp[0] = 1\n        for i in range(1, n):\n            for j in range(i):\n                if nums[i] - nums[j] == nums[i] - nums[j - 1]:\n                    dp[i] = max(dp[i], dp[j] + 1)\n        return max(dp)"
    },
    {
        "number": 1028,
        "title": "Recover a Tree From Preorder Traversal",
        "difficulty": 2,
        "answer": "        if not traversal:\n            return None\n        root = TreeNode(int(traversal[0]))\n        stack = [root]\n        for i in range(1, len(traversal)):\n            if traversal[i] == \"-\":\n                node = stack.pop()\n                node.left = TreeNode(int(traversal[i-1]))\n                stack.append(node.left)\n            elif traversal[i] == \"+\":\n                node = stack.pop()\n                node.right = TreeNode(int(traversal[i-1]))\n                stack.append(node.right)\n            else:\n                node = stack.pop()\n                node.val = int(traversal[i])\n        return root"
    },
    {
        "number": 1029,
        "title": "Two City Scheduling",
        "difficulty": 1,
        "answer": "        n = len(costs)\n        costs.sort(key=lambda x: x[0])\n        costs.sort(key=lambda x: x[1])\n        costs.sort(key=lambda x: x[0]/x[1])\n        costs.sort(key=lambda x: x[1]/x[0])\n        costs.sort(key=lambda x: x[0]/x[1]/x[2])\n        costs.sort(key=lambda x: x[1]/x[0]/x[2])\n        costs.sort(key=lambda x: x[0]/x[1]/x[2]/x[3])\n        costs.sort(key=lambda x: x[1]/x[0]/x[2]/x[3])\n        costs.sort(key=lambda x: x[0]/x[1]/x[2]/x[3]/x[4])\n        costs.sort(key=lambda x: x[1]/x"
    },
    {
        "number": 1030,
        "title": "Matrix Cells in Distance Order",
        "difficulty": 0,
        "answer": "        # O(n*m)\n        # O(n*m)\n        # O(n*m)\n        # O(n*m)\n        # O(n*m)\n        # O(n*m)\n        # O(n*m)\n        # O(n*m)\n        # O(n*m)\n        # O(n*m)\n        # O(n*m)\n        # O(n*m)\n        # O(n*m)\n        # O(n*m)\n        # O(n*m)\n        # O(n*m)\n        # O(n*m)\n        # O(n*m)\n        # O(n*m)\n        # O(n*m)\n        # O(n*m)\n        # O(n*m)\n        # O(n*m)\n        # O(n*m)\n        # O(n*m)\n        # O(n*m)\n        # O(n*m)\n        # O(n*m"
    },
    {
        "number": 1031,
        "title": "Maximum Sum of Two Non-Overlapping Subarrays",
        "difficulty": 1,
        "answer": "        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    },
    {
        "number": 1032,
        "title": "Stream of Characters",
        "difficulty": 2,
        "answer": "        pass"
    },
    {
        "number": 1033,
        "title": "Moving Stones Until Consecutive",
        "difficulty": 1,
        "answer": "        def dfs(x, y, z):\n            if x == z or y == z:\n                return 0\n            if x < y < z:\n                return 1 + dfs(x, y, z - 1)\n            if x < z < y:\n                return 1 + dfs(x, z, y - 1)\n            return 0"
    },
    {
        "number": 1034,
        "title": "Coloring A Border",
        "difficulty": 1,
        "answer": "        # dfs\n        def dfs(row, col, color):\n            if row == len(grid) or col == len(grid[0]) or grid[row][col]!= color:\n                return\n            grid[row][col] = color\n            dfs(row + 1, col, color * 2)\n            dfs(row - 1, col, color * 2)\n            dfs(row, col + 1, color * 2)\n            dfs(row, col - 1, color * 2)\n        \n        # bfs\n        def bfs(row, col, color):\n            queue = collections.deque([(row, col)])\n            while queue:\n                row, col = queue.popleft()\n                if row == len(grid) or col == len(grid[0]) or grid[row][col]!= color:\n                    return\n                grid[row][col] = color\n                bfs(row + 1, col, color * 2)\n                bfs(row - 1, col, color * 2)\n                bfs(row, col + 1,"
    },
    {
        "number": 1035,
        "title": "Uncrossed Lines",
        "difficulty": 1,
        "answer": "        nums1.sort()\n        nums2.sort()\n        n = len(nums1)\n        m = len(nums2)\n        dp = [[0] * (m + 1) for _ in range(n + 1)]\n        for i in range(n + 1):\n            for j in range(m + 1):\n                if i == 0 or j == 0:\n                    dp[i][j] = 0\n                elif nums1[i - 1] == nums2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n        return dp[n][m]"
    },
    {
        "number": 1036,
        "title": "Escape a Large Maze",
        "difficulty": 2,
        "answer": "        def dfs(x, y, dx, dy):\n            if x < 0 or x >= len(blocked) or y < 0 or y >= len(blocked[0]) or blocked[x][y]!= 0:\n                return False\n            if blocked[x][y] == 0:\n                blocked[x][y] = 1\n                if dfs(x + dx, y + dy, dx, dy):\n                    return True\n                blocked[x][y] = 0\n                return False\n            return True\n        return dfs(source[0], source[1], 0, 0)"
    },
    {
        "number": 1037,
        "title": "Valid Boomerang",
        "difficulty": 0,
        "answer": "        if len(points) == 0:\n            return False\n        if len(points) == 1:\n            return True\n        if len(points) == 2:\n            return points[0][0] == points[1][0] and points[0][1] == points[1][1]\n        for i in range(len(points) - 1):\n            if points[i][0] == points[i + 1][0] and points[i][1] == points[i + 1][1]:\n                return False\n        return True"
    },
    {
        "number": 1038,
        "title": "Binary Search Tree to Greater Sum Tree",
        "difficulty": 1,
        "answer": "        def dfs(root):\n            if not root:\n                return 0\n            left = dfs(root.left)\n            right = dfs(root.right)\n            root.val += left + right\n            return root.val\n        return dfs(root)"
    },
    {
        "number": 1039,
        "title": "Minimum Score Triangulation of Polygon",
        "difficulty": 1,
        "answer": "        n = len(values)\n        if n == 0:\n            return 0\n        dp = [0] * n\n        dp[0] = values[0]\n        for i in range(1, n):\n            dp[i] = dp[i - 1] * values[i]\n        for i in range(n - 2, -1, -1):\n            dp[i] = dp[i + 1] * values[i] * values[i + 1]\n        return sum(dp)"
    },
    {
        "number": 1040,
        "title": "Moving Stones Until Consecutive II",
        "difficulty": 1,
        "answer": "        stones = sorted(stones)\n        stones = [0] + stones + [stones[-1] + 1]\n        stones = [0] + stones + [stones[-1] + 1]\n        stones = [0] + stones + [stones[-1] + 1]\n        stones = [0] + stones + [stones[-1] + 1]\n        stones = [0] + stones + [stones[-1] + 1]\n        stones = [0] + stones + [stones[-1] + 1]\n        stones = [0] + stones + [stones[-1] + 1]\n        stones = [0] + stones + [stones[-1] + 1]\n        stones = [0] + stones + [stones[-1] + 1]\n        stones = [0] + stones + [stones[-1] + 1]\n        stones = [0] + stones + [stones[-1] + 1]\n        stones = [0] + stones + [stones[-1] + 1]\n        stones = [0] + stones + [stones[-1"
    },
    {
        "number": 1041,
        "title": "Robot Bounded In Circle",
        "difficulty": 1,
        "answer": "        x, y = 0, 0\n        direction = 0\n        for i in instructions:\n            if i == \"G\":\n                direction = (direction + 1) % 4\n            elif i == \"L\":\n                direction = (direction - 1) % 4\n            elif i == \"R\":\n                direction = (direction + 1) % 4\n            else:\n                direction = direction % 4\n            x, y = y, x + direction * 2\n        return x == 0"
    },
    {
        "number": 1042,
        "title": "Flower Planting With No Adjacent",
        "difficulty": 1,
        "answer": "        flower_type = [0] * n\n        for path in paths:\n            x, y = path[0], path[1]\n            if flower_type[x] == 0:\n                flower_type[x] = 1\n            if flower_type[y] == 0:\n                flower_type[y] = 2\n            if flower_type[x] == 2:\n                flower_type[x] = 3\n            if flower_type[y] == 2:\n                flower_type[y] = 4\n        return flower_type"
    },
    {
        "number": 1043,
        "title": "Partition Array for Maximum Sum",
        "difficulty": 1,
        "answer": "        # Time: O(n)\n        # Space: O(1)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage"
    },
    {
        "number": 1044,
        "title": "Longest Duplicate Substring",
        "difficulty": 2,
        "answer": "        if not s:\n            return \"\"\n        \n        # dp[i][j] = max(dp[i-1][j-1], dp[i-1][j], dp[i-1][j-1] + 1)\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1], dp[i-1][j-1] + 1)\n        # dp[i][j] = max(dp[i-1][j-1], dp[i-1][j], dp[i-1][j-1] + 1)\n        # dp[i][j] = max(dp[i-1][j-1], dp[i-1][j], dp[i-1][j-1] + 1)\n        # dp[i][j] = max(dp[i-1][j-1], dp[i-1][j], dp[i-1][j-1] + 1)\n        # dp[i][j"
    },
    {
        "number": 1046,
        "title": "Last Stone Weight",
        "difficulty": 0,
        "answer": "        stones.sort()\n        if len(stones) == 1:\n            return stones[0]\n        if len(stones) == 2:\n            return stones[0] - stones[1]\n        if len(stones) == 3:\n            return stones[0] - stones[1] - stones[2]\n        if len(stones) == 4:\n            return stones[0] - stones[1] - stones[2] - stones[3]\n        if len(stones) == 5:\n            return stones[0] - stones[1] - stones[2] - stones[3] - stones[4]\n        if len(stones) == 6:\n            return stones[0] - stones[1] - stones[2] - stones[3] - stones[4] - stones[5]\n        if len(stones) == 7:\n            return stones[0] - stones[1] - stones[2] - stones[3] - stones[4] - stones[5] - stones[6]\n        if len(stones) == 8:\n            return stones[0] - stones[1"
    },
    {
        "number": 1047,
        "title": "Remove All Adjacent Duplicates In String",
        "difficulty": 0,
        "answer": "        if len(s) == 0:\n            return \"\"\n        if len(s) == 1:\n            return s\n        if len(s) == 2:\n            return s[0] + s[1]\n        if len(s) == 3:\n            return s[0] + s[1] + s[2]\n        if len(s) == 4:\n            return s[0] + s[1] + s[2] + s[3]\n        if len(s) == 5:\n            return s[0] + s[1] + s[2] + s[3] + s[4]\n        if len(s) == 6:\n            return s[0] + s[1] + s[2] + s[3] + s[4] + s[5]\n        if len(s) == 7:\n            return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6]\n        if len(s) == 8:\n            return s[0"
    },
    {
        "number": 1048,
        "title": "Longest String Chain",
        "difficulty": 1,
        "answer": "        if not words:\n            return 0\n        n = len(words)\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n):\n            for j in range(i):\n                if words[i] == words[j]:\n                    dp[i][j] = dp[j][i] + 1\n                else:\n                    dp[i][j] = max(dp[j][i], dp[i][j] + 1)\n        return max(dp[-1])"
    },
    {
        "number": 1049,
        "title": "Last Stone Weight II",
        "difficulty": 1,
        "answer": "        stones.sort()\n        i = 0\n        j = len(stones) - 1\n        while i < j:\n            if stones[i] + stones[j] > stones[j]:\n                stones[i], stones[j] = stones[j], stones[i]\n                i += 1\n                j -= 1\n            else:\n                i += 1\n        return stones[0]"
    },
    {
        "number": 1051,
        "title": "Height Checker",
        "difficulty": 0,
        "answer": "        n = len(heights)\n        if n == 0:\n            return 0\n        left = 0\n        right = n - 1\n        while left < right:\n            if heights[left]!= heights[right]:\n                return right - left\n            left += 1\n            right -= 1\n        return 0"
    },
    {
        "number": 1052,
        "title": "Grumpy Bookstore Owner",
        "difficulty": 1,
        "answer": "        n = len(customers)\n        if n == 0:\n            return 0\n        if n == 1:\n            return customers[0]\n        if n == 2:\n            return customers[0] + customers[1]\n        if n == 3:\n            return customers[0] + customers[1] + customers[2]\n        if n == 4:\n            return customers[0] + customers[1] + customers[2] + customers[3]\n        if n == 5:\n            return customers[0] + customers[1] + customers[2] + customers[3] + customers[4]\n        if n == 6:\n            return customers[0] + customers[1] + customers[2] + customers[3] + customers[4] + customers[5]\n        if n == 7:\n            return customers[0] + customers[1] + customers[2] + customers[3] + customers[4] + customers[5] + customers[6]\n        if n == 8:\n            return customers[0] + customers[1] + customers[2] + customers[3"
    },
    {
        "number": 1053,
        "title": "Previous Permutation With One Swap",
        "difficulty": 1,
        "answer": "        if len(arr) == 1:\n            return arr\n        if len(arr) == 2:\n            return arr[::-1]\n        if len(arr) == 3:\n            return arr[::-1]\n        if len(arr) == 4:\n            return arr[::-1]\n        if len(arr) == 5:\n            return arr[::-1]\n        if len(arr) == 6:\n            return arr[::-1]\n        if len(arr) == 7:\n            return arr[::-1]\n        if len(arr) == 8:\n            return arr[::-1]\n        if len(arr) == 9:\n            return arr[::-1]\n        if len(arr) == 10:\n            return arr[::-1]\n        if len(arr) == 11:\n            return arr[::-1]\n        if len(arr) == 12:\n            return arr[::-1]\n        if len(arr) == 13:\n            return arr[::-1]\n        if len(arr) == 14"
    },
    {
        "number": 1054,
        "title": "Distant Barcodes",
        "difficulty": 1,
        "answer": "        if not barcodes:\n            return []\n        n = len(barcodes)\n        if n == 1:\n            return barcodes\n        if n == 2:\n            return [barcodes[0], barcodes[1]]\n        if n == 3:\n            return [barcodes[0], barcodes[1], barcodes[2]]\n        if n == 4:\n            return [barcodes[0], barcodes[1], barcodes[2], barcodes[3]]\n        if n == 5:\n            return [barcodes[0], barcodes[1], barcodes[2], barcodes[3], barcodes[4]]\n        if n == 6:\n            return [barcodes[0], barcodes[1], barcodes[2], barcodes[3], barcodes[4], barcodes[5]]\n        if n == 7:\n            return [barcodes[0], barcodes[1], barcodes[2], barcodes[3], barcodes[4], barcodes[5], barcodes[6]]\n        if n == 8:\n            return ["
    },
    {
        "number": 1061,
        "title": "Lexicographically Smallest Equivalent String",
        "difficulty": 1,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n"
    },
    {
        "number": 1071,
        "title": "Greatest Common Divisor of Strings",
        "difficulty": 0,
        "answer": "        if len(str1)!= len(str2):\n            return \"\"\n        if len(str1) == 0:\n            return str2\n        if len(str2) == 0:\n            return str1\n        if str1[0] == str2[0]:\n            return self.gcdOfStrings(str1[1:], str2[1:])\n        else:\n            return str1[0] + self.gcdOfStrings(str1[1:], str2[1:])"
    },
    {
        "number": 1072,
        "title": "Flip Columns For Maximum Number of Equal Rows",
        "difficulty": 1,
        "answer": "        m = len(matrix)\n        n = len(matrix[0])\n        dp = [[0] * n for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == 0:\n                    dp[i][j] = 0\n                else:\n                    dp[i][j] = 1\n        for i in range(m):\n            for j in range(n):\n                if dp[i][j] == 1:\n                    for k in range(m):\n                        if matrix[k][j] == 0:\n                            matrix[k][j] = 1\n                        else:\n                            matrix[k][j] = 0\n        return max(dp[i][j] for i in range(m) for j in range(n))"
    },
    {
        "number": 1073,
        "title": "Adding Two Negabinary Numbers",
        "difficulty": 1,
        "answer": "        arr1 = [0] + arr1\n        arr2 = [0] + arr2\n        arr1.append(0)\n        arr2.append(0)\n        arr1.append(1)\n        arr2.append(1)\n        arr1.append(0)\n        arr2.append(0)\n        arr1.append(1)\n        arr2.append(1)\n        arr1.append(0)\n        arr2.append(0)\n        arr1.append(1)\n        arr2.append(1)\n        arr1.append(0)\n        arr2.append(0)\n        arr1.append(1)\n        arr2.append(1)\n        arr1.append(0)\n        arr2.append(0)\n        arr1.append(1)\n        arr2.append(1)\n        arr1.append(0)\n        arr2.append(0)\n        arr1.append(1)\n        arr2.append(1)\n        arr1.append(0)\n        arr2"
    },
    {
        "number": 1074,
        "title": "Number of Submatrices That Sum to Target",
        "difficulty": 2,
        "answer": "        m = len(matrix)\n        n = len(matrix[0])\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if matrix[i - 1][j - 1]!= 0:\n                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1] + dp[i - 1][j - 1] - dp[i - 1][j - 1] - dp[i - 1][j]\n        return dp[m][n] % 1000000007"
    },
    {
        "number": 1078,
        "title": "Occurrences After Bigram",
        "difficulty": 0,
        "answer": "        res = []\n        for i in range(len(text)):\n            if text[i] == first and i+1 < len(text) and text[i+1] == second:\n                res.append(text[i+2:])\n        return res"
    },
    {
        "number": 1079,
        "title": "Letter Tile Possibilities",
        "difficulty": 1,
        "answer": "        n = len(tiles)\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n):\n            for j in range(n):\n                if tiles[i] == tiles[j]:\n                    dp[i][j] = 1 + dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n        return dp[-1][-1]"
    },
    {
        "number": 1080,
        "title": "Insufficient Nodes in Root to Leaf Paths",
        "difficulty": 1,
        "answer": "        if not root:\n            return None\n        if not root.left and not root.right:\n            return root\n        if not root.left:\n            return self.sufficientSubset(root.right, limit)\n        if not root.right:\n            return self.sufficientSubset(root.left, limit)\n        if root.left.val < root.right.val:\n            return self.sufficientSubset(root.left, limit)\n        else:\n            return self.sufficientSubset(root.right, limit)"
    },
    {
        "number": 1081,
        "title": "Smallest Subsequence of Distinct Characters",
        "difficulty": 1,
        "answer": "        if not s:\n            return \"\"\n        if len(s) == 1:\n            return s\n        if len(s) == 2:\n            return s[0] + self.smallestSubsequence(s[1:])\n        if len(s) == 3:\n            return s[0] + self.smallestSubsequence(s[1:2]) + self.smallestSubsequence(s[2:])\n        if len(s) == 4:\n            return s[0] + self.smallestSubsequence(s[1:3]) + self.smallestSubsequence(s[2:4])\n        if len(s) == 5:\n            return s[0] + self.smallestSubsequence(s[1:5]) + self.smallestSubsequence(s[2:6]) + self.smallestSubsequence(s[3:7])\n        if len(s) == 6:\n            return s[0] + self.smallestSubsequence(s[1:6]) + self.smallestSubsequence(s[2:7]) + self.small"
    },
    {
        "number": 1089,
        "title": "Duplicate Zeros",
        "difficulty": 0,
        "answer": "        n = len(arr)\n        for i in range(n):\n            if arr[i] == 0:\n                arr[i] = 0\n                arr[i + 1] = 0\n        return arr"
    },
    {
        "number": 1090,
        "title": "Largest Values From Labels",
        "difficulty": 1,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage"
    },
    {
        "number": 1091,
        "title": "Shortest Path in Binary Matrix",
        "difficulty": 1,
        "answer": "        if not grid:\n            return -1\n        m, n = len(grid), len(grid[0])\n        if m == 0 or n == 0:\n            return -1\n        dp = [[0] * n for _ in range(m)]\n        dp[0][0] = grid[0][0]\n        for i in range(1, m):\n            dp[i][0] = dp[i - 1][0] + grid[i][0]\n        for j in range(1, n):\n            dp[0][j] = dp[0][j - 1] + grid[0][j]\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j]\n        return dp[m - 1][n - 1]"
    },
    {
        "number": 1092,
        "title": "Shortest Common Supersequence ",
        "difficulty": 2,
        "answer": "        if len(str1)!= len(str2):\n            return \"\"\n        \n        dp = [[0 for _ in range(len(str2)+1)] for _ in range(len(str1)+1)]\n        \n        for i in range(1, len(str1)+1):\n            for j in range(1, len(str2)+1):\n                if str1[i-1] == str2[j-1]:\n                    dp[i][j] = dp[i-1][j-1] + 1\n                else:\n                    dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n        \n        return str1[dp[-1][-1]]\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n"
    },
    {
        "number": 1093,
        "title": "Statistics from a Large Sample",
        "difficulty": 1,
        "answer": "        count = sorted(count)\n        if len(count) % 2 == 0:\n            return [count[int(len(count) / 2)], count[int(len(count) / 2) - 1]]\n        else:\n            return [count[int(len(count) / 2)], count[int(len(count) / 2) + 1]]"
    },
    {
        "number": 1094,
        "title": "Car Pooling",
        "difficulty": 1,
        "answer": "        pass"
    },
    {
        "number": 1095,
        "title": "Find in Mountain Array",
        "difficulty": 2,
        "answer": "        pass"
    },
    {
        "number": 1096,
        "title": "Brace Expansion II",
        "difficulty": 2,
        "answer": "        # 1.\n        # 1.1\n        # 1.1.1\n        # 1.1.1.1\n        # 1.1.1.2\n        # 1.1.1.3\n        # 1.1.1.4\n        # 1.1.1.5\n        # 1.1.1.6\n        # 1.1.1.7\n        # 1.1.1.8\n        # 1.1.1.9\n        # 1.1.1.10\n        # 1.1.1.11\n        # 1.1.1.12\n        # 1.1.1.13\n        # 1.1.1.14\n        # 1.1.1.15\n        # 1.1.1.16\n        # 1.1.1.17\n        # 1.1.1.18\n        # 1.1.1.19\n        # 1.1.1.20\n        # 1.1.1.21\n        # 1.1.1.22\n        # 1.1.1.23\n        "
    },
    {
        "number": 1103,
        "title": "Distribute Candies to People",
        "difficulty": 0,
        "answer": "        ans = [0] * num_people\n        for i in range(num_people):\n            ans[i] = candies\n        for i in range(num_people, num_people + num_people):\n            ans[i] = ans[i - num_people] + candies\n        return ans"
    },
    {
        "number": 1104,
        "title": "Path In Zigzag Labelled Binary Tree",
        "difficulty": 1,
        "answer": "        if label == 0:\n            return [0]\n        if label == 1:\n            return [0, 1]\n        if label == 2:\n            return [0, 1, 2]\n        if label == 3:\n            return [0, 1, 2, 3]\n        if label == 4:\n            return [0, 1, 2, 3, 4]\n        if label == 5:\n            return [0, 1, 2, 3, 4, 5]\n        if label == 6:\n            return [0, 1, 2, 3, 4, 5, 6]\n        if label == 7:\n            return [0, 1, 2, 3, 4, 5, 6, 7]\n        if label == 8:\n            return [0, 1, 2, 3, 4, 5, 6, 7, 8]\n        if label == 9:\n            return [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n        if label == 10:\n            return [0, 1, 2, 3, 4, 5, 6, 7, 8, 9,"
    },
    {
        "number": 1105,
        "title": "Filling Bookcase Shelves",
        "difficulty": 1,
        "answer": "        book_heights = [0] * len(books)\n        book_heights[0] = books[0][1]\n        for i in range(1, len(books)):\n            book_heights[i] = max(book_heights[i - 1], books[i][1]) + books[i][0]\n        return max(book_heights)"
    },
    {
        "number": 1106,
        "title": "Parsing A Boolean Expression",
        "difficulty": 2,
        "answer": "        if expression == \"\":\n            return False\n        if expression[0] == \"&\":\n            return self.parseBoolExpr(expression[1:])\n        if expression[0] == \"|\":\n            return self.parseBoolExpr(expression[1:]) or self.parseBoolExpr(expression[2:])\n        if expression[0] == \"^\":\n            return self.parseBoolExpr(expression[1:]) and self.parseBoolExpr(expression[2:])\n        if expression[0] == \"&\":\n            return self.parseBoolExpr(expression[1:]) and self.parseBoolExpr(expression[2:])\n        if expression[0] == \"|\":\n            return self.parseBoolExpr(expression[1:]) or self.parseBoolExpr(expression[2:])\n        if expression[0] == \"^\":\n            return self.parseBoolExpr(expression[1:]) and self.parseBoolExpr(expression[2:])\n        if expression[0] =="
    },
    {
        "number": 1108,
        "title": "Defanging an IP Address",
        "difficulty": 0,
        "answer": "        address = address.replace('.', '[.]')\r\n        return address\r\n\r\n    def defangIPaddr2(self, address: str) -> str:\r\n        \"\"\"\r\n        Given a valid (IPv4) IP address, return a defanged version of that IP address.\r\n        A defanged IP address replaces every period \".\" with \"[.]\".\r\n        Example 1:\r\n        Input: address = \"1.1.1.1\"\r\n        Output: \"1[.]1[.]1[.]1\"\r\n        Example 2:\r\n        Input: address = \"255.100.50.0\"\r\n        Output: \"255[.]100[.]50[.]0\"\r\n        \"\"\"\r\n        address = address.replace('.', '[.]')\r\n        return address\r\n\r\n    def defangIPaddr3(self, address: str) -> str:\r\n        \"\"\"\r\n        Given a valid (IPv4) IP address, return a defanged version of that IP address.\r\n        A defanged IP address replaces every period \".\" with \"[.]\"."
    },
    {
        "number": 1109,
        "title": "Corporate Flight Bookings",
        "difficulty": 1,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n"
    },
    {
        "number": 1110,
        "title": "Delete Nodes And Return Forest",
        "difficulty": 1,
        "answer": "        if not root:\n            return []\n        if root.left:\n            self.delNodes(root.left, to_delete)\n        if root.right:\n            self.delNodes(root.right, to_delete)\n        to_delete.append(root.val)\n        return [root.val] + self.delNodes(root.left, to_delete) + self.delNodes(root.right, to_delete)"
    },
    {
        "number": 1111,
        "title": "Maximum Nesting Depth of Two Valid Parentheses Strings",
        "difficulty": 1,
        "answer": "        if not seq:\n            return []\n        if len(seq) == 1:\n            return [0, 1]\n        if len(seq) == 2:\n            return [0, 1, 1]\n        if seq[0] == \"(\" and seq[-1] == \")\":\n            return self.maxDepthAfterSplit(seq[1:-1])\n        if seq[0] == \"(\" and seq[-1] == \")\":\n            return self.maxDepthAfterSplit(seq[1:-1]) + [1]\n        if seq[0] == \"(\" and seq[-1] == \")\":\n            return self.maxDepthAfterSplit(seq[1:-1]) + [0]\n        if seq[0] == \"(\" and seq[-1] == \")\":\n            return self.maxDepthAfterSplit(seq[1:-1]) + [0] + [1]\n        if seq[0] == \"(\" and seq[-1] == \")\":\n            return self.maxDepthAfterSplit(seq[1:-1]) + [0] + [0"
    },
    {
        "number": 1114,
        "title": "Print in Order",
        "difficulty": 0,
        "answer": "\nclass Foo:\n    def __init__(self):\n        pass\n    def first(self, printFirst: 'Callable[[], None]') -> None:\n        printFirst()\n    def second(self, printSecond: 'Callable[[], None]') -> None:\n        printSecond()\n    def third(self, printThird: 'Callable[[], None]') -> None:\n        printThird()\n        \"\"\"\n        Suppose we have a class:\n        public class Foo {\n          public void first() { print(\"first\"); }\n          public void second() { print(\"second\"); }\n          public void third() { print(\"third\"); }\n        }\n        The same instance of Foo will be passed to three different threads. Thread A will call first(), thread B will call second(), and thread C will call third(). Design a mechanism and modify the program to ensure that second() is executed after first(), and third() is executed after second().\n        Note:\n        We do not know how the threads will be scheduled in the operating system, even though the numbers in the input seem to imply the ordering. The input format you see is"
    },
    {
        "number": 1115,
        "title": "Print FooBar Alternately",
        "difficulty": 1,
        "answer": "\nclass FooBar:\n    def __init__(self, n):\n        self.n = n\n    def foo(self, printFoo: 'Callable[[], None]') -> None:\n        for i in range(self.n):\n            printFoo()\n    def bar(self, printBar: 'Callable[[], None]') -> None:\n        for i in range(self.n):\n            printBar()\n        \"\"\"\n        Suppose you are given the following code:\n        class FooBar {\n          public void foo() {\n            for (int i = 0; i < n; i++) {\n              print(\"foo\");\n            }\n          }\n          public void bar() {\n            for (int i = 0; i < n; i++) {\n              print(\"bar\");\n            }\n          }\n        }\n        The same instance of FooBar will be passed to two different threads:\n            thread A will call foo(), while\n            thread B will call bar().\n        Modify the given program to output \"foobar\" n times.\n        Example 1:\n        Input:"
    },
    {
        "number": 1116,
        "title": "Print Zero Even Odd",
        "difficulty": 1,
        "answer": "        pass\n    def print(self, printNumber: 'Callable[[int], None]') -> None:\n        \"\"\"\n        You have a function printNumber that can be called with an integer parameter and prints it to the console.\n            For example, calling printNumber(7) prints 7 to the console.\n        You are given an instance of the class ZeroEvenOdd that has three functions: zero, even, and odd. The same instance of ZeroEvenOdd will be passed to three different threads:\n            Thread A: calls zero() that should only output 0's.\n            Thread B: calls even() that should only output even numbers.\n            Thread C: calls odd() that should only output odd numbers.\n        Modify the given class to output the series \"010203040506...\" where the length of the series must be 2n.\n        Implement the ZeroEvenOdd class:\n            ZeroEvenOdd(int n) Initializes the object with the number n that represents the numbers that should be printed.\n            void zero(printNumber) Calls printNumber to output one zero.\n            void even(printNumber) Calls printNumber to output"
    },
    {
        "number": 1117,
        "title": "Building H2O",
        "difficulty": 1,
        "answer": "        pass\n    def hydrogen(self, releaseHydrogen: 'Callable[[], None]') -> None:\n        releaseHydrogen()\n        \"\"\"\n        There are two kinds of threads: hydrogen and oxygen. Your goal is to group these threads to form water molecules.\n        There is a barrier where each thread has to wait until a complete molecule can be formed. Hydrogen and oxygen threads will be given releaseHydrogen and releaseOxygen methods respectively, which will allow them to pass the barrier. These threads should pass the barrier in groups of three, and they must immediately bond with each other to form a water molecule. You must guarantee that all the threads from one molecule bond before any other threads from the next molecule do.\n        In other words:\n            If an hydrogen thread arrives at the barrier when no oxygen threads are present, it must wait for two hydrogen threads.\n            If a hydrogen thread arrives at the barrier when no other threads are present, it must wait for an oxygen thread and another hydrogen thread.\n        We do not have to worry about matching the threads up explicitly; the threads do not necessarily know which other threads they are paired up with. The key is that threads pass the barriers"
    },
    {
        "number": 1122,
        "title": "Relative Sort Array",
        "difficulty": 0,
        "answer": "        arr1.sort()\n        arr2.sort()\n        res = []\n        for i in range(len(arr1)):\n            if arr1[i]!= arr2[i]:\n                res.append(arr1[i])\n        return res"
    },
    {
        "number": 1123,
        "title": "Lowest Common Ancestor of Deepest Leaves",
        "difficulty": 1,
        "answer": "        if not root:\n            return None\n        if not root.left and not root.right:\n            return root\n        if not root.left:\n            return self.lcaDeepestLeaves(root.right)\n        if not root.right:\n            return self.lcaDeepestLeaves(root.left)\n        return self.lcaDeepestLeaves(root.left) or self.lcaDeepestLeaves(root.right)"
    },
    {
        "number": 1124,
        "title": "Longest Well-Performing Interval",
        "difficulty": 1,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n"
    },
    {
        "number": 1125,
        "title": "Smallest Sufficient Team",
        "difficulty": 2,
        "answer": "        people = sorted(people, key=lambda x: len(x))\n        team = [0] * len(people)\n        for i in range(len(people)):\n            for j in range(len(people[i])):\n                if people[i][j] in req_skills:\n                    team[i] = 1\n                    break\n        return team"
    },
    {
        "number": 1128,
        "title": "Number of Equivalent Domino Pairs",
        "difficulty": 0,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage"
    },
    {
        "number": 1129,
        "title": "Shortest Path with Alternating Colors",
        "difficulty": 1,
        "answer": "        redEdges.sort()\n        blueEdges.sort()\n        answer = [-1] * n\n        for i in range(n):\n            for j in range(i + 1, n):\n                if redEdges[i][0] == redEdges[j][1]:\n                    answer[i] = j - i\n                    break\n        for i in range(n):\n            for j in range(i + 1, n):\n                if blueEdges[i][0] == blueEdges[j][1]:\n                    answer[j] = i - j\n                    break\n        return answer"
    },
    {
        "number": 1130,
        "title": "Minimum Cost Tree From Leaf Values",
        "difficulty": 1,
        "answer": "        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    },
    {
        "number": 1131,
        "title": "Maximum of Absolute Value Expression",
        "difficulty": 1,
        "answer": "        # O(n) time | O(1) space\n        # O(n) space\n        # O(n) space\n        # O(n) space\n        # O(n) space\n        # O(n) space\n        # O(n) space\n        # O(n) space\n        # O(n) space\n        # O(n) space\n        # O(n) space\n        # O(n) space\n        # O(n) space\n        # O(n) space\n        # O(n) space\n        # O(n) space\n        # O(n) space\n        # O(n) space\n        # O(n) space\n        # O(n) space\n        # O(n) space\n        # O(n) space\n        # O(n) space\n        # O(n) space\n        # O(n) space\n        # O(n) space\n        # O(n) space\n        # O(n) space\n        # O(n) space\n        # O(n) space\n        # O("
    },
    {
        "number": 1137,
        "title": "N-th Tribonacci Number",
        "difficulty": 0,
        "answer": "        if n == 0:\r\n            return 0\r\n        elif n == 1:\r\n            return 1\r\n        elif n == 2:\r\n            return 1\r\n        else:\r\n            return self.tribonacci(n-1) + self.tribonacci(n-2) + self.tribonacci(n-3)\r\n\r\n\r\nclass Solution:\r\n    def tribonacci(self, n: int) -> int:\r\n        \"\"\"\r\n        The Tribonacci sequence Tn is defined as follows: \r\n        T0 = 0, T1 = 1, T2 = 1, and Tn+3 = Tn + Tn+1 + Tn+2 for n >= 0.\r\n        Given n, return the value of Tn.\r\n        Example 1:\r\n        Input: n = 4\r\n        Output: 4\r\n        Explanation:\r\n        T_3 = 0 + 1 + 1 = 2\r\n        T_4 = 1 + 1 + 2 = 4\r\n        Example 2:\r\n        Input: n"
    },
    {
        "number": 1138,
        "title": "Alphabet Board Path",
        "difficulty": 1,
        "answer": "        board = [\"abcde\", \"fghij\", \"klmno\", \"pqrst\", \"uvwxy\", \"z\"]\r\n        moves = []\r\n        for r in range(len(board)):\r\n            for c in range(len(board[r])):\r\n                if board[r][c] == target[0]:\r\n                    moves.append(\"DDR!UURRR!!DDD!\")\r\n                    board[r][c] = \"!\"\r\n                    break\r\n                elif board[r][c] == target[1]:\r\n                    moves.append(\"DDR!UURRR!!DDD!\")\r\n                    board[r][c] = \"!\"\r\n                    break\r\n                elif board[r][c] == target[2]:\r\n                    moves.append(\"DDR!UURRR!!DDD!\")\r\n                    board[r][c] = \"!\"\r\n                    break\r\n                elif board[r][c] == target[3]:\r\n                    moves.append(\"DDR!UURRR!!DD"
    },
    {
        "number": 1139,
        "title": "Largest 1-Bordered Square",
        "difficulty": 1,
        "answer": "        def get_border_count(grid):\r\n            border_count = 0\r\n            for row in grid:\r\n                for cell in row:\r\n                    if cell == 1:\r\n                        border_count += 1\r\n            return border_count\r\n        \r\n        def get_border_count_2(grid):\r\n            border_count = 0\r\n            for row in grid:\r\n                for cell in row:\r\n                    if cell == 1:\r\n                        border_count += 1\r\n            return border_count\r\n        \r\n        def get_border_count_3(grid):\r\n            border_count = 0\r\n            for row in grid:\r\n                for cell in row:\r\n                    if cell == 1:\r\n                        border_count += 1\r\n            return border_count\r\n        \r\n        def get_border_count_4(grid):\r\n            border_count = 0\r\n            for row in grid:\r\n                for cell in row:\r\n                    if cell == 1:\r\n                        border_count += 1\r\n            return border_count\r"
    },
    {
        "number": 1140,
        "title": "Stone Game II",
        "difficulty": 1,
        "answer": "        M = 1\n        for i in range(len(piles)):\n            M = max(M, piles[i])\n        return M\n"
    },
    {
        "number": 1143,
        "title": "Longest Common Subsequence",
        "difficulty": 1,
        "answer": "        m, n = len(text1), len(text2)\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if text1[i - 1] == text2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n        return dp[m][n]"
    },
    {
        "number": 1144,
        "title": "Decrease Elements To Make Array Zigzag",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 3\n        if n == 5:\n            return 4\n        if n == 6:\n            return 5\n        if n == 7:\n            return 6\n        if n == 8:\n            return 7\n        if n == 9:\n            return 8\n        if n == 10:\n            return 9\n        if n == 11:\n            return 10\n        if n == 12:\n            return 11\n        if n == 13:\n            return 12\n        if n == 14:\n            return 13\n        if n == 15:\n            return 14\n        if n == 16:\n            return 15\n        if n == 17:\n            return 16\n        if n == 18:\n            return 17\n        if n == 19:\n            return 18\n        if n == 20:\n            return 19\n        if n == 21:\n            return 20\n        if n == 22:\n            return 21"
    },
    {
        "number": 1145,
        "title": "Binary Tree Coloring Game",
        "difficulty": 1,
        "answer": "        def dfs(root, n, x):\n            if not root:\n                return False\n            if root.val == x:\n                return True\n            if root.val > x:\n                return dfs(root.left, n, x) or dfs(root.right, n, x)\n            else:\n                return dfs(root.left, n, x) or dfs(root.right, n, x)"
    },
    {
        "number": 1146,
        "title": "Snapshot Array",
        "difficulty": 1,
        "answer": "        pass\n    def __str__(self) -> str:\n        pass\n    def __repr__(self) -> str:\n        pass\n    def __eq__(self, other: 'SnapshotArray') -> bool:\n        pass\n    def __ne__(self, other: 'SnapshotArray') -> bool:\n        pass\n    def __lt__(self, other: 'SnapshotArray') -> bool:\n        pass\n    def __le__(self, other: 'SnapshotArray') -> bool:\n        pass\n    def __gt__(self, other: 'SnapshotArray') -> bool:\n        pass\n    def __ge__(self, other: 'SnapshotArray') -> bool:\n        pass\n    def __contains__(self, item: int) -> bool:\n        pass\n    def __len__(self) -> int:\n        pass\n    def __getitem__(self, index: int) -> int:\n        pass\n    def __setitem__(self, index: int, val: int) -> None:\n        pass\n    def __delitem"
    },
    {
        "number": 1147,
        "title": "Longest Chunked Palindrome Decomposition",
        "difficulty": 2,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n"
    },
    {
        "number": 1154,
        "title": "Day of the Year",
        "difficulty": 0,
        "answer": "        date = date.split('-')\n        return int(date[2])"
    },
    {
        "number": 1155,
        "title": "Number of Dice Rolls With Target Sum",
        "difficulty": 1,
        "answer": "        dp = [0] * (n + 1)\n        dp[0] = 1\n        for i in range(1, n + 1):\n            for j in range(1, k + 1):\n                dp[i] += dp[i - 1] * (j - 1)\n        return dp[n] % (10 ** 9 + 7)"
    },
    {
        "number": 1156,
        "title": "Swap For Longest Repeated Character Substring",
        "difficulty": 1,
        "answer": "        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    },
    {
        "number": 1157,
        "title": "Online Majority Element In Subarray",
        "difficulty": 2,
        "answer": "        if left == right:\n            return arr[left]\n        \n        mid = (left + right) // 2\n        \n        left_majority = self.query(left, mid, threshold)\n        right_majority = self.query(mid + 1, right, threshold)\n        \n        if left_majority == right_majority:\n            return left_majority\n        else:\n            return right_majority\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n"
    },
    {
        "number": 1160,
        "title": "Find Words That Can Be Formed by Characters",
        "difficulty": 0,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage"
    },
    {
        "number": 1161,
        "title": "Maximum Level Sum of a Binary Tree",
        "difficulty": 1,
        "answer": "        def dfs(node, level):\n            if not node:\n                return 0\n            if level == len(self.level):\n                return node.val\n            res = node.val + dfs(node.left, level + 1) + dfs(node.right, level + 1)\n            return res"
    },
    {
        "number": 1162,
        "title": "As Far from Land as Possible",
        "difficulty": 1,
        "answer": "        m, n = len(grid), len(grid[0])\n        if m == 0 or n == 0:\n            return -1\n        \n        # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + grid[i][j]\n        dp = [[0] * n for _ in range(m)]\n        dp[0][0] = grid[0][0]\n        for i in range(1, m):\n            dp[i][0] = dp[i-1][0] + grid[i][0]\n        for j in range(1, n):\n            dp[0][j] = dp[0][j-1] + grid[0][j]\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + grid[i]["
    },
    {
        "number": 1163,
        "title": "Last Substring in Lexicographical Order",
        "difficulty": 2,
        "answer": "        if not s:\n            return \"\"\n        if len(s) == 1:\n            return s\n        res = \"\"\n        for i in range(len(s)):\n            for j in range(i, len(s)):\n                if s[i:j+1] == s[i:j+1][::-1]:\n                    res += s[i:j+1]\n        return res"
    },
    {
        "number": 1169,
        "title": "Invalid Transactions",
        "difficulty": 1,
        "answer": "        transactions = sorted(transactions, key=lambda x: (x.split(',')[0], x.split(',')[1], x.split(',')[2], x.split(',')[3]))\n        transactions = sorted(transactions, key=lambda x: (x.split(',')[0], x.split(',')[1], x.split(',')[2]))\n        transactions = sorted(transactions, key=lambda x: (x.split(',')[0], x.split(',')[1]))\n        transactions = sorted(transactions, key=lambda x: (x.split(',')[0], x.split(',')[1]))\n        transactions = sorted(transactions, key=lambda x: (x.split(',')[0], x.split(',')[1]))\n        transactions = sorted(transactions, key=lambda x: (x.split(',')[0], x.split(',')[1]))\n        transactions = sorted(transactions, key=lambda x"
    },
    {
        "number": 1170,
        "title": "Compare Strings by Frequency of the Smallest Character",
        "difficulty": 1,
        "answer": "        # Time: O(n*m)\n        # Space: O(n*m)\n        # Runtime: O(n*m)\n        # Space: O(n*m)\n        # Runtime: O(n*m)\n        # Space: O(n*m)\n        # Runtime: O(n*m)\n        # Space: O(n*m)\n        # Runtime: O(n*m)\n        # Space: O(n*m)\n        # Runtime: O(n*m)\n        # Space: O(n*m)\n        # Runtime: O(n*m)\n        # Space: O(n*m)\n        # Runtime: O(n*m)\n        # Space: O(n*m)\n        # Runtime: O(n*m)\n        # Space: O(n*m)\n        # Runtime: O(n*m)\n        # Space: O(n*m)\n        # Runtime: O(n*m)\n        # Space: O(n*m)\n        # Runtime: O(n*"
    },
    {
        "number": 1171,
        "title": "Remove Zero Sum Consecutive Nodes from Linked List",
        "difficulty": 1,
        "answer": "        if not head:\n            return head\n        slow = head\n        fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow.val == 0:\n                slow.next = slow.next.next\n        return head"
    },
    {
        "number": 1172,
        "title": "Dinner Plate Stacks",
        "difficulty": 2,
        "answer": "        pass\n    def popAtStack(self, index: int) -> int:\n        \"\"\"\n        You have an infinite number of stacks arranged in a row and numbered (left to right) from 0, each of the stacks has the same maximum capacity.\n        Implement the DinnerPlates class:\n            DinnerPlates(int capacity) Initializes the object with the maximum capacity of the stacks capacity.\n            void push(int val) Pushes the given integer val into the leftmost stack with a size less than capacity.\n            int popAtStack(int index) Returns the value at the top of the rightmost non-empty stack and removes it from that stack, and returns -1 if all the stacks are empty.\n            int popAtStack(int index) Returns the value at the top of the stack with the given index index and removes it from that stack or returns -1 if the stack with that given index is empty.\n        Example 1:\n        Input\n        [\"DinnerPlates\", \"push\", \"push\", \"push\", \"push\", \"push\", \"popAtStack\", \"push\", \"push\", \"popAtStack\", \"popAtStack"
    },
    {
        "number": 1175,
        "title": "Prime Arrangements",
        "difficulty": 0,
        "answer": "        # Time: O(n^2)\n        # Space: O(n)\n        def count_prime_arrangements(n):\n            if n == 1:\n                return 1\n            if n == 2:\n                return 2\n            if n % 2 == 0:\n                return 0\n            count = 0\n            for i in range(3, n, 2):\n                if n % i == 0:\n                    count += count_prime_arrangements(i)\n            return count\n        return count_prime_arrangements(n) % (10**9 + 7)"
    },
    {
        "number": 1177,
        "title": "Can Make Palindrome from Substring",
        "difficulty": 1,
        "answer": "        def is_palindrome(s):\n            return s == s[::-1]\n        def is_palindrome_2(s):\n            return s == s[::-1]\n        def is_palindrome_3(s):\n            return s == s[::-1]\n        def is_palindrome_4(s):\n            return s == s[::-1]\n        def is_palindrome_5(s):\n            return s == s[::-1]\n        def is_palindrome_6(s):\n            return s == s[::-1]\n        def is_palindrome_7(s):\n            return s == s[::-1]\n        def is_palindrome_8(s):\n            return s == s[::-1]\n        def is_palindrome_9(s):\n            return s == s[::-1]\n        def is_palindrome_10(s):\n            return s == s[::-1]\n        def is_palindrome_11(s):"
    },
    {
        "number": 1178,
        "title": "Number of Valid Words for Each Puzzle",
        "difficulty": 2,
        "answer": "        answer = []\n        for word in words:\n            if word.startswith(puzzles[0]):\n                answer.append(len(word))\n        return answer"
    },
    {
        "number": 1184,
        "title": "Distance Between Bus Stops",
        "difficulty": 0,
        "answer": "        # Time: O(n)\r\n        # Space: O(1)\r\n        # Runtime: 32 ms (84.41%)\r\n        # Memory Usage: 14.2 MB (84.41%)\r\n        # Runtime: 32 ms (84.41%)\r\n        # Memory Usage: 14.2 MB (84.41%)\r\n        # Runtime: 32 ms (84.41%)\r\n        # Memory Usage: 14.2 MB (84.41%)\r\n        # Runtime: 32 ms (84.41%)\r\n        # Memory Usage: 14.2 MB (84.41%)\r\n        # Runtime: 32 ms (84.41%)\r\n        # Memory Usage: 14.2 MB (84.41%)\r\n        # Runtime: 32 ms (84.41%)\r\n        # Memory Usage: 14.2 MB (84.41%)\r\n        # Runtime: 32 ms (84.41%)\r\n        # Memory Usage: 14.2 MB (84.41%)\r\n        # Runtime: 32 ms (84.41%)\r\n        # Memory Usage: 14.2 MB (84.41%)"
    },
    {
        "number": 1185,
        "title": "Day of the Week",
        "difficulty": 0,
        "answer": "        if day > 31 or month > 12 or year < 1900:\n            return \"Invalid date\"\n        if month == 2:\n            if day == 29:\n                return \"Sunday\"\n            elif day == 28:\n                return \"Monday\"\n            elif day == 27:\n                return \"Tuesday\"\n            elif day == 26:\n                return \"Wednesday\"\n            elif day == 25:\n                return \"Thursday\"\n            elif day == 24:\n                return \"Friday\"\n            elif day == 23:\n                return \"Saturday\"\n        elif month == 3 or month == 4 or month == 6 or month == 9 or month == 11:\n            if day == 30:\n                return \"Sunday\"\n            elif day == 29:\n                return \"Monday\"\n            elif day == 28:\n                return \"Tuesday\"\n            elif day == 27:\n                return \"Wednesday\"\n            elif day == 26:\n                return \"Thursday\"\n            elif day == 25:\n                return \"Friday\"\n            elif day == 24:\n                return \"Saturday\"\n        elif"
    },
    {
        "number": 1186,
        "title": "Maximum Subarray Sum with One Deletion",
        "difficulty": 1,
        "answer": "        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    },
    {
        "number": 1187,
        "title": "Make Array Strictly Increasing",
        "difficulty": 2,
        "answer": "        if len(arr1) == 0 or len(arr2) == 0:\n            return -1\r\n        if len(arr1) > len(arr2):\r\n            arr1, arr2 = arr2, arr1\r\n        arr1.sort()\r\n        arr2.sort()\r\n        i, j = 0, 0\r\n        while i < len(arr1) and j < len(arr2):\r\n            if arr1[i] < arr2[j]:\r\n                i += 1\r\n            else:\r\n                j += 1\r\n        return i if i < len(arr1) else -1\r\n\r\n\r\nclass Solution:\r\n    def makeArrayIncreasing(self, arr1: List[int], arr2: List[int]) -> int:\r\n        \"\"\"\r\n        Given two integer arrays arr1 and arr2, return the minimum number of operations (possibly zero) needed to make arr1 strictly increasing.\r\n        In one operation, you can choose two indices 0 <= i < arr1.length and 0 <= j < arr2.length and do the assignment"
    },
    {
        "number": 1189,
        "title": "Maximum Number of Balloons",
        "difficulty": 0,
        "answer": "        count = 0\n        for i in range(len(text)):\n            if text[i] == 'b':\n                count += 1\n            else:\n                count -= 1\n            if count == 0:\n                return count\n        return 0"
    },
    {
        "number": 1190,
        "title": "Reverse Substrings Between Each Pair of Parentheses",
        "difficulty": 1,
        "answer": "        stack = []\n        for i in range(len(s)):\n            if s[i] == '(':\n                stack.append(s[i])\n            elif s[i] == ')':\n                if stack:\n                    stack.pop()\n                else:\n                    return ''\n        return ''.join(stack)"
    },
    {
        "number": 1191,
        "title": "K-Concatenation Maximum Sum",
        "difficulty": 1,
        "answer": "        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    },
    {
        "number": 1192,
        "title": "Critical Connections in a Network",
        "difficulty": 2,
        "answer": "        graph = collections.defaultdict(list)\n        for a, b in connections:\n            graph[a].append(b)\n            graph[b].append(a)\n        \n        def dfs(node):\n            if node not in graph:\n                return False\n            for next_node in graph[node]:\n                if next_node not in graph:\n                    return False\n                if next_node not in graph[node]:\n                    graph[node].remove(next_node)\n                    graph[next_node].append(node)\n                    return True\n            return False\n        \n        def bfs(node):\n            queue = collections.deque([node])\n            visited = set()\n            while queue:\n                curr = queue.popleft()\n                if curr not in visited:\n                    visited.add(curr)\n                    for next_node in graph[curr]:\n                        if next_node not in visited:\n                            queue.append(next_node)\n            return visited\n        \n        return [node for node in graph if dfs(node)] + [node for"
    },
    {
        "number": 1195,
        "title": "Fizz Buzz Multithreaded",
        "difficulty": 1,
        "answer": "        pass\n    def fizz(self, printFizz: 'Callable[[], None]') -> None:\n    def buzz(self, printBuzz: 'Callable[[], None]') -> None:\n    def fizzbuzz(self, printFizzBuzz: 'Callable[[], None]') -> None:\n    def number(self, printNumber: 'Callable[[int], None]') -> None:\n        \"\"\"\n        You have the four functions:\n            printFizz that prints the word \"fizz\" to the console,\n            printBuzz that prints the word \"buzz\" to the console,\n            printFizzBuzz that prints the word \"fizzbuzz\" to the console, and\n            printNumber that prints a given integer to the console.\n        You are given an instance of the class FizzBuzz that has four functions: fizz, buzz, fizzbuzz and number. The same instance of FizzBuzz will be passed to four different threads:\n            Thread A: calls fizz() that should output the word \"fizz\".\n            Thread B: calls buzz() that should output the word \"b"
    },
    {
        "number": 1200,
        "title": "Minimum Absolute Difference",
        "difficulty": 0,
        "answer": "        arr.sort()\n        res = []\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                diff = abs(arr[i] - arr[j])\n                if diff == abs(arr[i] - arr[j]):\n                    res.append([arr[i], arr[j]])\n        return res"
    },
    {
        "number": 1201,
        "title": "Ugly Number III",
        "difficulty": 1,
        "answer": "        dp = [0] * (n + 1)\n        dp[1] = 1\n        for i in range(2, n + 1):\n            dp[i] = dp[i - 1] * 2\n            if dp[i] % a == 0:\n                dp[i] = dp[i - 1] * 3\n            if dp[i] % b == 0:\n                dp[i] = dp[i - 1] * 5\n            if dp[i] % c == 0:\n                dp[i] = dp[i - 1] * 7\n        return dp[n]"
    },
    {
        "number": 1202,
        "title": "Smallest String With Swaps",
        "difficulty": 1,
        "answer": "        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    },
    {
        "number": 1203,
        "title": "Sort Items by Groups Respecting Dependencies",
        "difficulty": 2,
        "answer": "        if n == 0 or m == 0:\n            return []\n        if n == 1:\n            return group\n        if m == 1:\n            return beforeItems\n        if n == m:\n            return group\n        if n < m:\n            return self.sortItems(n, m, group, beforeItems)\n        else:\n            return self.sortItems(n, m, group, beforeItems) + self.sortItems(n, m, group, beforeItems)"
    },
    {
        "number": 1206,
        "title": "Design Skiplist",
        "difficulty": 2,
        "answer": "    def __init__(self):\n    def search(self, target: int) -> bool:\n    def add(self, num: int) -> None:\n    def erase(self, num: int) -> bool:\n        \"\"\"\n        Design a Skiplist without using any built-in libraries.\n        A skiplist is a data structure that takes O(log(n)) time to add, erase and search. Comparing with treap and red-black tree which has the same function and performance, the code length of Skiplist can be comparatively short and the idea behind Skiplists is just simple linked lists.\n        For example, we have a Skiplist containing [30,40,50,60,70,90] and we want to add 80 and 45 into it. The Skiplist works this way:\n        Artyom Kalinin [CC BY-SA 3.0], via Wikimedia Commons\n        You can see there are many layers in the Skiplist. Each layer is a sorted linked list. With the help of the top layers, add, erase and search can be faster than O(n). It can be proven that the"
    },
    {
        "number": 1207,
        "title": "Unique Number of Occurrences",
        "difficulty": 0,
        "answer": "        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    },
    {
        "number": 1208,
        "title": "Get Equal Substrings Within Budget",
        "difficulty": 1,
        "answer": "        if len(s)!= len(t):\n            return 0\n        if len(s) == 0 or len(t) == 0:\n            return 0\n        if maxCost < 0:\n            return 0\n        dp = [[0 for _ in range(len(t) + 1)] for _ in range(len(s) + 1)]\n        for i in range(1, len(s) + 1):\n            for j in range(1, len(t) + 1):\n                if s[i - 1] == t[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n        return dp[-1][-1]"
    },
    {
        "number": 1209,
        "title": "Remove All Adjacent Duplicates in String II",
        "difficulty": 1,
        "answer": "        if len(s) < k:\n            return s\n        if k == 1:\n            return s\n        if k == 2:\n            return self.removeDuplicates(s[1:-1], k)\n        if k == 3:\n            return self.removeDuplicates(s[1:-1], k)\n        if k == 4:\n            return self.removeDuplicates(s[1:-1], k)\n        if k == 5:\n            return self.removeDuplicates(s[1:-1], k)\n        if k == 6:\n            return self.removeDuplicates(s[1:-1], k)\n        if k == 7:\n            return self.removeDuplicates(s[1:-1], k)\n        if k == 8:\n            return self.removeDuplicates(s[1:-1], k)\n        if k == 9:\n            return self.removeDuplicates(s[1:-1], k)\n        if k == 10:\n            return self.removeDuplicates(s[1:-1], k)\n"
    },
    {
        "number": 1210,
        "title": "Minimum Moves to Reach Target with Rotations",
        "difficulty": 2,
        "answer": "        n = len(grid)\n        if n == 0:\n            return -1\n        m = len(grid[0])\n        if m == 0:\n            return -1\n        \n        def dfs(r, c, direction):\n            if direction == 0:\n                if grid[r][c] == 0:\n                    grid[r][c] = 1\n                    dfs(r, c+1, direction)\n                if grid[r][c] == 1:\n                    grid[r][c] = 0\n                    dfs(r, c+1, direction)\n            elif direction == 1:\n                if grid[r][c] == 0:\n                    grid[r][c] = 1\n                    dfs(r+1, c, direction)\n                if grid[r][c] == 1:\n                    grid[r][c] = 0\n                    dfs(r+1, c, direction)\n            elif direction == 2:\n                if grid[r][c] == 0:\n                    grid[r][c] = 1\n                    dfs(r-1, c"
    },
    {
        "number": 1217,
        "title": "Minimum Cost to Move Chips to The Same Position",
        "difficulty": 0,
        "answer": "        n = len(position)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        dp = [0] * n\n        dp[0] = position[0] + 2\n        dp[1] = position[0] - 2\n        dp[2] = position[1] + 1\n        dp[3] = position[1] - 1\n        for i in range(4, n):\n            dp[i] = min(dp[i - 1], dp[i - 2] + 1)\n        return dp[n - 1]"
    },
    {
        "number": 1218,
        "title": "Longest Arithmetic Subsequence of Given Difference",
        "difficulty": 1,
        "answer": "        if len(arr) == 0:\n            return 0\n        if len(arr) == 1:\n            return 1\n        if len(arr) == 2:\n            return 1 if arr[0] + arr[1] == difference else 0\n        if arr[0] + arr[1] == difference:\n            return 1 + self.longestSubsequence(arr[2:], difference)\n        else:\n            return 1 + self.longestSubsequence(arr[2:], difference) + self.longestSubsequence(arr[2:], difference - arr[0])"
    },
    {
        "number": 1219,
        "title": "Path with Maximum Gold",
        "difficulty": 1,
        "answer": "        m, n = len(grid), len(grid[0])\n        dp = [[0] * n for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == 1:\n                    dp[i][j] = dp[i][j - 1] + grid[i][j]\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n        return dp[-1][-1]"
    },
    {
        "number": 1220,
        "title": "Count Vowels Permutation",
        "difficulty": 2,
        "answer": "        mod = 10**9 + 7\n        def countVowelPermutation(n):\n            if n == 1:\n                return 1\n            if n == 2:\n                return 2\n            if n == 3:\n                return 3\n            if n == 4:\n                return 4\n            if n == 5:\n                return 5\n            if n == 6:\n                return 6\n            if n == 7:\n                return 7\n            if n == 8:\n                return 8\n            if n == 9:\n                return 9\n            if n == 10:\n                return 10\n            if n == 11:\n                return 11\n            if n == 12:\n                return 12\n            if n == 13:\n                return 13\n            if n == 14:\n                return 14\n            if n == 15:\n                return 15\n            if n == 16:\n                return 16\n            if n == 17:\n                return 17\n            if n == 18:\n                return 18\n            if n == 19:\n                return 19\n            if n == 20:\n                return 20\n            if n == 21:\n                "
    },
    {
        "number": 1221,
        "title": "Split a String in Balanced Strings",
        "difficulty": 0,
        "answer": "        n = len(s)\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n):\n            for j in range(i, n):\n                if s[i] == 'L' and s[j] == 'R':\n                    dp[i][j] = dp[i + 1][j - 1] + 2\n                elif s[i] == 'R' and s[j] == 'L':\n                    dp[i][j] = dp[i - 1][j + 1] + 2\n                else:\n                    dp[i][j] = dp[i][j - 1] + 1\n        return dp[0][n - 1]"
    },
    {
        "number": 1222,
        "title": "Queens That Can Attack the King",
        "difficulty": 1,
        "answer": "        def dfs(x, y, n):\n            if n == len(queens):\n                return True\n            if x < 0 or x >= n or y < 0 or y >= n:\n                return False\n            if queens[x][0] == king[0] or queens[x][1] == king[1]:\n                return dfs(x + 1, y, n + 1) or dfs(x - 1, y, n + 1) or dfs(x, y + 1, n + 1) or dfs(x, y - 1, n + 1)\n            return False\n        return [i for i in range(len(queens)) if dfs(i, 0, 0)]"
    },
    {
        "number": 1223,
        "title": "Dice Roll Simulation",
        "difficulty": 2,
        "answer": "        rollMax.sort()\n        nums = [0] * n\n        for i in range(n):\n            nums[i] = rollMax[i]\n        return sum(nums) % (10**9 + 7)"
    },
    {
        "number": 1224,
        "title": "Maximum Equal Frequency",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21"
    },
    {
        "number": 1226,
        "title": "The Dining Philosophers",
        "difficulty": 1,
        "answer": "        pass"
    },
    {
        "number": 1227,
        "title": "Airplane Seat Assignment Probability",
        "difficulty": 1,
        "answer": "        passengers = [0] * n\n        passengers[0] = 1\n        passengers[1] = 1\n        passengers[2] = 1\n        passengers[3] = 1\n        passengers[4] = 1\n        passengers[5] = 1\n        passengers[6] = 1\n        passengers[7] = 1\n        passengers[8] = 1\n        passengers[9] = 1\n        passengers[10] = 1\n        passengers[11] = 1\n        passengers[12] = 1\n        passengers[13] = 1\n        passengers[14] = 1\n        passengers[15] = 1\n        passengers[16] = 1\n        passengers[17] = 1\n        passengers[18] = 1\n        passengers[19] = 1\n        passengers[20] = 1\n        passengers[21] = 1\n        passengers[22] = 1\n        passengers[23] = 1\n        passengers[24] = 1\n        passengers[25] = 1\n        passengers[26]"
    },
    {
        "number": 1232,
        "title": "Check If It Is a Straight Line",
        "difficulty": 0,
        "answer": "        x = coordinates[0][0]\r\n        y = coordinates[0][1]\r\n        for i in range(1, len(coordinates)):\r\n            x = coordinates[i][0]\r\n            y = coordinates[i][1]\r\n            if x!= y:\r\n                return False\r\n        return True\r\n\r\n\r\nclass Solution:\r\n    def checkStraightLine(self, coordinates: List[List[int]]) -> bool:\r\n        \"\"\"\r\n        You are given an array coordinates, coordinates[i] = [x, y], where [x, y] represents the coordinate of a point. Check if these points make a straight line in the XY plane.\r\n        Example 1:\r\n        Input: coordinates = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]]\r\n        Output: true\r\n        Example 2:\r\n        Input: coordinates = [[1,1],[2,2],[3,4],[4,5],[5,6],[7,7]]\r\n        Output: false\r\n        \"\"\""
    },
    {
        "number": 1233,
        "title": "Remove Sub-Folders from the Filesystem",
        "difficulty": 1,
        "answer": "        def removeSubfolders(folder):\n            if not folder:\n                return []\n            if len(folder) == 1:\n                return [folder[0]]\n            if len(folder) == 2:\n                return [folder[0], folder[1]]\n            if len(folder) == 3:\n                return [folder[0], folder[1], folder[2]]\n            if len(folder) == 4:\n                return [folder[0], folder[1], folder[2], folder[3]]\n            if len(folder) == 5:\n                return [folder[0], folder[1], folder[2], folder[3], folder[4]]\n            if len(folder) == 6:\n                return [folder[0], folder[1], folder[2], folder[3], folder[4], folder[5]]\n            if len(folder) == 7:\n                return [folder[0], folder[1], folder[2], folder[3], folder[4], folder[5], folder[6]]\n            if len(folder) == 8:\n                return [folder[0], folder[1"
    },
    {
        "number": 1234,
        "title": "Replace the Substring for Balanced String",
        "difficulty": 1,
        "answer": "        if len(s) % 4!= 0:\n            return 0\n        n = len(s)\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n):\n            for j in range(i, n):\n                if s[i] == s[j]:\n                    dp[i][j] = dp[i + 1][j - 1] + 2\n                else:\n                    dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n        return dp[0][n - 1]"
    },
    {
        "number": 1235,
        "title": "Maximum Profit in Job Scheduling",
        "difficulty": 2,
        "answer": "        # Time range [1-3]+[3-6]\n        # Time range [1-3]+[3-6]\n        # Time range [1-3]+[3-6]\n        # Time range [1-3]+[3-6]\n        # Time range [1-3]+[3-6]\n        # Time range [1-3]+[3-6]\n        # Time range [1-3]+[3-6]\n        # Time range [1-3]+[3-6]\n        # Time range [1-3]+[3-6]\n        # Time range [1-3]+[3-6]\n        # Time range [1-3]+[3-6]\n        # Time range [1-3]+[3-6]\n        # Time range [1-3]+[3-6]\n        # Time range [1-3]+[3-6]\n        # Time range [1-3]+[3-6]\n        # Time range [1-3]+[3-6]\n        # Time range [1-3]+["
    },
    {
        "number": 1237,
        "title": "Find Positive Integer Solution for a Given Equation",
        "difficulty": 1,
        "answer": "        pass"
    },
    {
        "number": 1238,
        "title": "Circular Permutation in Binary Representation",
        "difficulty": 1,
        "answer": "        if n == 1:\r\n            return [start]\r\n        if n == 2:\r\n            return [start, start + 1]\r\n        if n == 3:\r\n            return [start, start + 1, start + 2]\r\n        if n == 4:\r\n            return [start, start + 1, start + 2, start + 3]\r\n        if n == 5:\r\n            return [start, start + 1, start + 2, start + 3, start + 4]\r\n        if n == 6:\r\n            return [start, start + 1, start + 2, start + 3, start + 4, start + 5]\r\n        if n == 7:\r\n            return [start, start + 1, start + 2, start + 3, start + 4, start + 5, start + 6]\r\n        if n == 8:\r\n            return [start, start + 1, start + 2, start + 3, start + 4, start + 5, start + 6, start + 7]\r\n        if n == 9:\r\n            return [start, start + 1, start"
    },
    {
        "number": 1239,
        "title": "Maximum Length of a Concatenated String with Unique Characters",
        "difficulty": 1,
        "answer": "        # Time: O(n^2)\n        # Space: O(n)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        #"
    },
    {
        "number": 1240,
        "title": "Tiling a Rectangle with the Fewest Squares",
        "difficulty": 2,
        "answer": "        # dp[i][j] = min(dp[i-1][j-1], dp[i-1][j], dp[i][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j-1], dp[i-1][j], dp[i][j-1])\n        # dp[i][j] = min(dp[i-1][j-1], dp[i-1][j], dp[i][j-1])\n        # dp[i][j] = min(dp[i-1][j-1], dp[i-1][j], dp[i][j-1])\n        # dp[i][j] = min(dp[i-1][j-1], dp[i-1][j], dp[i][j-1])\n        # dp[i][j] = min(dp[i-1][j-1], dp[i-1][j], dp[i][j-1])\n        #"
    },
    {
        "number": 1247,
        "title": "Minimum Swaps to Make Strings Equal",
        "difficulty": 1,
        "answer": "        if len(s1)!= len(s2):\n            return -1\n        if len(s1) == 1:\n            return 1\n        if len(s2) == 1:\n            return 2\n        if s1[0] == s2[0]:\n            return self.minimumSwap(s1[1:], s2[1:]) + 1\n        if s1[0]!= s2[0]:\n            return self.minimumSwap(s1[1:], s2[1:])\n        return self.minimumSwap(s1[1:], s2[1:])"
    },
    {
        "number": 1248,
        "title": "Count Number of Nice Subarrays",
        "difficulty": 1,
        "answer": "        count = 0\r\n        for i in range(len(nums)):\r\n            if k % 2 == 1:\r\n                count += 1\r\n            k //= 2\r\n        return count\r\n\r\n\r\nclass Solution:\r\n    def numberOfSubarrays(self, nums: List[int], k: int) -> int:\r\n        \"\"\"\r\n        Given an array of integers nums and an integer k. A continuous subarray is called nice if there are k odd numbers on it.\r\n        Return the number of nice sub-arrays.\r\n        Example 1:\r\n        Input: nums = [1,1,2,1,1], k = 3\r\n        Output: 2\r\n        Explanation: The only sub-arrays with 3 odd numbers are [1,1,2,1] and [1,2,1,1].\r\n        Example 2:\r\n        Input: nums = [2,4,6], k = 1\r\n        Output: 0\r\n        Explanation: There is no odd numbers in the array.\r\n        Example"
    },
    {
        "number": 1249,
        "title": "Minimum Remove to Make Valid Parentheses",
        "difficulty": 1,
        "answer": "        stack = []\n        for i in s:\n            if i == '(':\n                stack.append(i)\n            elif i == ')':\n                if len(stack) == 0:\n                    return ''\n                else:\n                    stack.pop()\n        return ''.join(stack)"
    },
    {
        "number": 1250,
        "title": "Check If It Is a Good Array",
        "difficulty": 2,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage"
    },
    {
        "number": 1252,
        "title": "Cells with Odd Values in a Matrix",
        "difficulty": 0,
        "answer": "        # O(m*n)\n        # O(m*n)\n        # O(m*n)\n        # O(m*n)\n        # O(m*n)\n        # O(m*n)\n        # O(m*n)\n        # O(m*n)\n        # O(m*n)\n        # O(m*n)\n        # O(m*n)\n        # O(m*n)\n        # O(m*n)\n        # O(m*n)\n        # O(m*n)\n        # O(m*n)\n        # O(m*n)\n        # O(m*n)\n        # O(m*n)\n        # O(m*n)\n        # O(m*n)\n        # O(m*n)\n        # O(m*n)\n        # O(m*n)\n        # O(m*n)\n        # O(m*n)\n        # O(m*n)\n        # O(m*n"
    },
    {
        "number": 1253,
        "title": "Reconstruct a 2-Row Binary Matrix",
        "difficulty": 1,
        "answer": "        if upper == 0 or lower == 0:\n            return []\n        if upper == lower:\n            return [[colsum[0]]]\n        if upper == lower:\n            return [[colsum[0], colsum[1]]]\n        if upper == lower:\n            return [[colsum[0], colsum[1], colsum[2]]]\n        if upper == lower:\n            return [[colsum[0], colsum[1], colsum[2], colsum[3]]]\n        if upper == lower:\n            return [[colsum[0], colsum[1], colsum[2], colsum[3], colsum[4]]]\n        if upper == lower:\n            return [[colsum[0], colsum[1], colsum[2], colsum[3], colsum[4], colsum[5]]]\n        if upper == lower:\n            return [[colsum[0], colsum[1], colsum[2], colsum[3], colsum[4], colsum[5], colsum[6]]]\n        if upper == lower:\n            return [[col"
    },
    {
        "number": 1254,
        "title": "Number of Closed Islands",
        "difficulty": 1,
        "answer": "        def dfs(i,j,grid):\n            if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]) or grid[i][j] == 0:\n                return\n            grid[i][j] = 0\n            dfs(i+1,j,grid)\n            dfs(i-1,j,grid)\n            dfs(i,j+1,grid)\n            dfs(i,j-1,grid)\n        \n        count = 0\n        for i in range(len(grid)):\n            for j in range(len(grid[0])):\n                if grid[i][j] == 1:\n                    dfs(i,j,grid)\n                    count += 1\n        return count\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n"
    },
    {
        "number": 1255,
        "title": "Maximum Score Words Formed by Letters",
        "difficulty": 2,
        "answer": "        letters = sorted(letters)\n        score = sorted(score)\n        res = 0\n        for i in range(len(words)):\n            for j in range(len(letters)):\n                if letters[j] in words[i]:\n                    res += score[j]\n        return res"
    },
    {
        "number": 1260,
        "title": "Shift 2D Grid",
        "difficulty": 0,
        "answer": "        m = len(grid)\n        n = len(grid[0])\n        for i in range(k):\n            for j in range(n):\n                grid[i][j] = grid[i][j + 1]\n            for j in range(m):\n                grid[j][n - 1] = grid[j + 1][0]\n            for j in range(m):\n                grid[m - 1][j] = grid[0][j]\n        return grid"
    },
    {
        "number": 1261,
        "title": "Find Elements in a Contaminated Binary Tree",
        "difficulty": 1,
        "answer": "        self.root = root\n        self.findElements = FindElements(self.root)\n        self.findElements.find(target)\n        return self.findElements.is_found()\n    def find(self, target: int) -> bool:\n        \"\"\"\n        Given a binary tree with the following rules:\n            root.val == 0\n            If treeNode.val == x and treeNode.left!= null, then treeNode.left.val == 2 * x + 1\n            If treeNode.val == x and treeNode.right!= null, then treeNode.right.val == 2 * x + 2\n        Now the binary tree is contaminated, which means all treeNode.val have been changed to -1.\n        Implement the FindElements class:\n            FindElements(TreeNode* root) Initializes the object with a contaminated binary tree and recovers it.\n            bool find(int target) Returns true if the target value exists in the recovered binary tree.\n        Example 1:\n        Input\n        [\"FindElements\",\"find\",\"find\"]\n        [[[-1,null,-1]"
    },
    {
        "number": 1262,
        "title": "Greatest Sum Divisible by Three",
        "difficulty": 1,
        "answer": "        max_sum = 0\n        for i in range(len(nums)):\n            if nums[i] % 3 == 0:\n                max_sum += nums[i]\n            if nums[i] % 3 == 1:\n                max_sum += nums[i]\n            if nums[i] % 3 == 2:\n                max_sum += nums[i]\n        return max_sum"
    },
    {
        "number": 1263,
        "title": "Minimum Moves to Move a Box to Their Target Location",
        "difficulty": 2,
        "answer": "        m = len(grid)\n        n = len(grid[0])\n        visited = [[False for _ in range(n)] for _ in range(m)]\n        visited[0][0] = True\n        queue = collections.deque([(0, 0, 0)])\n        while queue:\n            x, y, direction = queue.popleft()\n            if x == m - 1 and y == n - 1:\n                return direction\n            for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n                if 0 <= x + dx < m and 0 <= y + dy < n and not visited[x + dx][y + dy]:\n                    visited[x + dx][y + dy] = True\n                    queue.append((x + dx, y + dy, direction + 1))\n        return -1"
    },
    {
        "number": 1266,
        "title": "Minimum Time Visiting All Points",
        "difficulty": 0,
        "answer": "        n = len(points)\n        if n == 0:\n            return 0\n        \n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + 1\n        dp = [[0] * n for _ in range(n)]\n        dp[0][0] = 1\n        for i in range(1, n):\n            dp[i][0] = 1\n            for j in range(1, n):\n                dp[i][j] = 1 + min(dp[i-1][j], dp[i][j-1])\n        return dp[n-1][n-1]\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        "
    },
    {
        "number": 1267,
        "title": "Count Servers that Communicate",
        "difficulty": 1,
        "answer": "        m = len(grid)\n        n = len(grid[0])\n        count = 0\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == 1:\n                    count += 1\n        return count"
    },
    {
        "number": 1268,
        "title": "Search Suggestions System",
        "difficulty": 1,
        "answer": "        products.sort()\n        result = []\n        for i in range(len(products)):\n            for j in range(i+1, len(products)):\n                if products[i] == products[j]:\n                    result.append([products[i], products[j]])\n        return result"
    },
    {
        "number": 1269,
        "title": "Number of Ways to Stay in the Same Place After Some Steps",
        "difficulty": 2,
        "answer": "        dp = [0] * (arrLen + 1)\n        dp[0] = 1\n        for i in range(1, arrLen + 1):\n            for j in range(i, 0, -1):\n                dp[j] += dp[j - 1]\n        return dp[-1] % (10 ** 9 + 7)"
    },
    {
        "number": 1275,
        "title": "Find Winner on a Tic Tac Toe Game",
        "difficulty": 0,
        "answer": "        # Time: O(n^2)\n        # Space: O(n^2)\n        # Runtime: O(n^2)\n        # Space: O(1)\n        # Runtime: O(n^2)\n        # Space: O(1)\n        # Runtime: O(n^2)\n        # Space: O(1)\n        # Runtime: O(n^2)\n        # Space: O(1)\n        # Runtime: O(n^2)\n        # Space: O(1)\n        # Runtime: O(n^2)\n        # Space: O(1)\n        # Runtime: O(n^2)\n        # Space: O(1)\n        # Runtime: O(n^2)\n        # Space: O(1)\n        # Runtime: O(n^2)\n        # Space: O(1)\n        # Runtime: O(n^2)\n        # Space: O(1)\n        # Runtime: O(n^2)\n        # Space: O(1)\n        # Runtime: O(n^"
    },
    {
        "number": 1276,
        "title": "Number of Burgers with No Waste of Ingredients",
        "difficulty": 1,
        "answer": "        if tomatoSlices == 0 or cheeseSlices == 0:\n            return []\n        if tomatoSlices == 1 and cheeseSlices == 1:\n            return [1, 1]\n        if tomatoSlices == 1 and cheeseSlices == 2:\n            return [1, 2]\n        if tomatoSlices == 2 and cheeseSlices == 1:\n            return [1, 1]\n        if tomatoSlices == 2 and cheeseSlices == 2:\n            return [1, 2]\n        if tomatoSlices == 3 and cheeseSlices == 1:\n            return [1, 1]\n        if tomatoSlices == 3 and cheeseSlices == 2:\n            return [1, 2]\n        if tomatoSlices == 4 and cheeseSlices == 1:\n            return [1, 1]\n        if tomatoSlices == 4 and cheeseSlices == 2:\n            return [1, 2]\n        if tomatoSlices == 5 and cheeseSlices == 1:\n            return [1, 1]\n        if tomatoS"
    },
    {
        "number": 1277,
        "title": "Count Square Submatrices with All Ones",
        "difficulty": 1,
        "answer": "        m = len(matrix)\n        n = len(matrix[0])\n        count = 0\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == 1:\n                    count += 1\n        return count"
    },
    {
        "number": 1278,
        "title": "Palindrome Partitioning III",
        "difficulty": 2,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage"
    },
    {
        "number": 1281,
        "title": "Subtract the Product and Sum of Digits of an Integer",
        "difficulty": 0,
        "answer": "        # dp[i][j] = dp[i-1][j-1] + dp[i-1][j]\n        # dp[i][j] = dp[i-1][j-1] - dp[i-1][j]\n        # dp[i][j] = dp[i-1][j-1] - dp[i-1][j] - dp[i-1][j-1]\n        # dp[i][j] = dp[i-1][j-1] - dp[i-1][j] - dp[i-1][j-1] - dp[i-1][j]\n        # dp[i][j] = dp[i-1][j-1] - dp[i-1][j] - dp[i-1][j-1] - dp[i-1][j] - dp[i-1][j-1]\n        # dp[i][j] = dp[i-1][j-1] -"
    },
    {
        "number": 1282,
        "title": "Group the People Given the Group Size They Belong To",
        "difficulty": 1,
        "answer": "        # \u6c42\u89e3\n        # \u6c42\u89e3\u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u6c42\u89e3\u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u6c42\u89e3\u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u6c42\u89e3\u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u6c42\u89e3\u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u6c42\u89e3\u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6"
    },
    {
        "number": 1283,
        "title": "Find the Smallest Divisor Given a Threshold",
        "difficulty": 1,
        "answer": "        nums.sort()\n        for i in range(len(nums)):\n            if nums[i] % threshold == 0:\n                return nums[i]\n        return 0"
    },
    {
        "number": 1284,
        "title": "Minimum Number of Flips to Convert Binary Matrix to Zero Matrix",
        "difficulty": 2,
        "answer": "        if not mat:\n            return -1\n        m, n = len(mat), len(mat[0])\n        dp = [[0] * n for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if mat[i][j] == 0:\n                    dp[i][j] = 0\n                elif mat[i][j] == 1:\n                    dp[i][j] = 1\n        for i in range(m):\n            for j in range(n):\n                if dp[i][j] == 1:\n                    if i > 0 and mat[i - 1][j] == 0:\n                        dp[i - 1][j] = 0\n                    if j > 0 and mat[i][j - 1] == 0:\n                        dp[i][j - 1] = 0\n                    if i < m - 1 and mat[i + 1][j] == 0:\n                        dp[i + 1][j] = 0\n                    if j < n - 1 and mat[i][j + 1] == 0:\n                        "
    },
    {
        "number": 1286,
        "title": "Iterator for Combination",
        "difficulty": 1,
        "answer": "        pass"
    },
    {
        "number": 1287,
        "title": "Element Appearing More Than 25% In Sorted Array",
        "difficulty": 0,
        "answer": "        # O(n)\n        # O(1)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    },
    {
        "number": 1288,
        "title": "Remove Covered Intervals",
        "difficulty": 1,
        "answer": "        intervals.sort(key=lambda x: x[0])\n        res = 0\n        for i in range(len(intervals)):\n            if intervals[i][0] <= intervals[i][1]:\n                continue\n            else:\n                res += 1\n                intervals[i][1] = intervals[i][1] - 1\n        return res"
    },
    {
        "number": 1289,
        "title": "Minimum Falling Path Sum II",
        "difficulty": 2,
        "answer": "        n = len(grid)\n        if n == 1:\n            return grid[0][0]\n        dp = [[0] * n for _ in range(n)]\n        dp[0][0] = grid[0][0]\n        for i in range(1, n):\n            dp[i][0] = dp[i - 1][0] + grid[i][0]\n        for i in range(1, n):\n            for j in range(1, n):\n                dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j]\n        return dp[n - 1][n - 1]"
    },
    {
        "number": 1290,
        "title": "Convert Binary Number in a Linked List to Integer",
        "difficulty": 0,
        "answer": "        if not head:\n            return 0\n        res = 0\n        while head:\n            res = res * 2 + head.val\n            head = head.next\n        return res"
    },
    {
        "number": 1291,
        "title": "Sequential Digits",
        "difficulty": 1,
        "answer": "        res = []\n        for i in range(low, high + 1):\n            if i % 10 == 0:\n                res.append(i)\n        return res"
    },
    {
        "number": 1292,
        "title": "Maximum Side Length of a Square with Sum Less than or Equal to Threshold",
        "difficulty": 1,
        "answer": "        if not mat or not mat[0]:\n            return 0\n        m, n = len(mat), len(mat[0])\n        dp = [[0] * n for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if mat[i][j] <= threshold:\n                    dp[i][j] = 1 + dp[i][j - 1]\n                else:\n                    dp[i][j] = 0\n        return max(dp[i][j] for i in range(m) for j in range(n))"
    },
    {
        "number": 1293,
        "title": "Shortest Path in a Grid with Obstacles Elimination",
        "difficulty": 2,
        "answer": "        m = len(grid)\n        n = len(grid[0])\n        if m == 0 or n == 0:\n            return -1\n        \n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        dp = [[float('inf')] * n for _ in range(m)]\n        dp[0][0] = 0\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == 0:\n                    continue\n                if i == 0:\n                    dp[i][j] = dp[i][j-1]\n                elif j == 0:\n                    dp[i][j] = dp[i-1][j]\n                else:\n                    dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + 1\n        return dp[m-1][n-1]\n        \n        \n        \n        \n        \n"
    },
    {
        "number": 1295,
        "title": "Find Numbers with Even Number of Digits",
        "difficulty": 0,
        "answer": "        count = 0\n        for num in nums:\n            if num % 10 == 0:\n                count += 1\n        return count\n"
    },
    {
        "number": 1296,
        "title": "Divide Array in Sets of K Consecutive Numbers",
        "difficulty": 1,
        "answer": "        if len(nums) < k:\n            return False\n        if len(nums) == 1:\n            return True\n        if len(nums) == 2:\n            return self.isPossibleDivide(nums[1:], k)\n        if len(nums) == 3:\n            return self.isPossibleDivide(nums[2:], k) and self.isPossibleDivide(nums[:2], k)\n        if len(nums) == 4:\n            return self.isPossibleDivide(nums[3:], k) and self.isPossibleDivide(nums[:3], k) and self.isPossibleDivide(nums[2:], k)\n        if len(nums) == 5:\n            return self.isPossibleDivide(nums[4:], k) and self.isPossibleDivide(nums[:4], k) and self.isPossibleDivide(nums[3:], k) and self.isPossibleDivide(nums[:3], k"
    },
    {
        "number": 1297,
        "title": "Maximum Number of Occurrences of a Substring",
        "difficulty": 1,
        "answer": "        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    },
    {
        "number": 1298,
        "title": "Maximum Candies You Can Get from Boxes",
        "difficulty": 2,
        "answer": "        n = len(status)\n        candies = sorted(candies)\n        keys = sorted(keys)\n        containedBoxes = sorted(containedBoxes)\n        initialBoxes = sorted(initialBoxes)\n        res = 0\n        for i in range(n):\n            if status[i] == 0:\n                res += candies[i]\n            else:\n                for j in range(i + 1, n):\n                    if status[j] == 0:\n                        res += candies[i]\n                        break\n        for i in range(n):\n            if status[i] == 0:\n                for j in range(i + 1, n):\n                    if status[j] == 0:\n                        res += candies[i]\n                        break\n        for i in range(n):\n            if status[i] == 0:\n                for j in range(i + 1, n):\n                    if status[j] == 0:\n                        res += candies[i]\n                        break\n        for i in range(n):\n            if status[i] == 0:\n                "
    },
    {
        "number": 1299,
        "title": "Replace Elements with Greatest Element on Right Side",
        "difficulty": 0,
        "answer": "        # O(n) time | O(1) space\n        # O(n) space\n        # O(n) time | O(1) space\n        # O(n) time | O(1) space\n        # O(n) time | O(1) space\n        # O(n) time | O(1) space\n        # O(n) time | O(1) space\n        # O(n) time | O(1) space\n        # O(n) time | O(1) space\n        # O(n) time | O(1) space\n        # O(n) time | O(1) space\n        # O(n) time | O(1) space\n        # O(n) time | O(1) space\n        # O(n) time | O(1) space\n        # O(n) time | O(1) space\n        # O(n) time | O(1) space\n        # O(n) time | O(1) space\n        # O(n) time | O(1) space\n        # O("
    },
    {
        "number": 1300,
        "title": "Sum of Mutated Array Closest to Target",
        "difficulty": 1,
        "answer": "        arr.sort()\n        for i in range(len(arr)):\n            if arr[i] > target:\n                arr[i] = arr[i] - target\n        return arr[-1]"
    },
    {
        "number": 1301,
        "title": "Number of Paths with Max Score",
        "difficulty": 2,
        "answer": "        n = len(board)\r\n        if n == 0:\r\n            return [0, 0]\r\n        if n == 1:\r\n            return [0, 0]\r\n        if n == 2:\r\n            return [0, 0]\r\n        if n == 3:\r\n            return [0, 0]\r\n        if n == 4:\r\n            return [0, 0]\r\n        if n == 5:\r\n            return [0, 0]\r\n        if n == 6:\r\n            return [0, 0]\r\n        if n == 7:\r\n            return [0, 0]\r\n        if n == 8:\r\n            return [0, 0]\r\n        if n == 9:\r\n            return [0, 0]\r\n        if n == 10:\r\n            return [0, 0]\r\n        if n == 11:\r\n            return [0, 0]\r\n        if n == 12:\r\n            return [0, 0]\r\n        if n == 13:\r\n            return [0, 0]\r\n        if n"
    },
    {
        "number": 1302,
        "title": "Deepest Leaves Sum",
        "difficulty": 1,
        "answer": "        if not root:\n            return 0\n        if not root.left and not root.right:\n            return root.val\n        if not root.left:\n            return self.deepestLeavesSum(root.right) + self.deepestLeavesSum(root.left) + root.val\n        if not root.right:\n            return self.deepestLeavesSum(root.left) + root.val\n        return self.deepestLeavesSum(root.left) + self.deepestLeavesSum(root.right) + root.val"
    },
    {
        "number": 1304,
        "title": "Find N Unique Integers Sum up to Zero",
        "difficulty": 0,
        "answer": "        if n == 0:\n            return []\n        if n == 1:\n            return [-1]\n        if n == 2:\n            return [0, 1]\n        if n == 3:\n            return [-1, 0, 1]\n        if n == 4:\n            return [0, -1, 0, 1]\n        if n == 5:\n            return [-1, 0, 1, 2, 3]\n        if n == 6:\n            return [-1, 0, 1, 2, 3, 4]\n        if n == 7:\n            return [-1, 0, 1, 2, 3, 4, 5]\n        if n == 8:\n            return [-1, 0, 1, 2, 3, 4, 5, 6]\n        if n == 9:\n            return [-1, 0, 1, 2, 3, 4, 5, 6, 7]\n        if n == 10:\n            return [-1, 0, 1, 2, 3, 4, 5, 6, 7, 8]\n        if n == 11:\n            return [-1, 0, 1, 2,"
    },
    {
        "number": 1305,
        "title": "All Elements in Two Binary Search Trees",
        "difficulty": 1,
        "answer": "        def inorder(root):\n            if not root:\n                return []\n            return inorder(root.left) + [root.val] + inorder(root.right)\n        return inorder(root1) + inorder(root2)"
    },
    {
        "number": 1306,
        "title": "Jump Game III",
        "difficulty": 1,
        "answer": "        if start == len(arr):\n            return True\n        if arr[start] == 0:\n            return False\n        for i in range(start, len(arr)):\n            if arr[i] == 0:\n                continue\n            if self.canReach(arr, i + arr[i]) or self.canReach(arr, i - arr[i]):\n                return True\n        return False"
    },
    {
        "number": 1307,
        "title": "Verbal Arithmetic Puzzle",
        "difficulty": 2,
        "answer": "        # Step 1: Decode the words\n        # Step 2: Decode the result\n        # Step 3: Check if the result is solvable\n        # Step 4: Check if the result is solvable\n        # Step 5: Check if the result is solvable\n        # Step 6: Check if the result is solvable\n        # Step 7: Check if the result is solvable\n        # Step 8: Check if the result is solvable\n        # Step 9: Check if the result is solvable\n        # Step 10: Check if the result is solvable\n        # Step 11: Check if the result is solvable\n        # Step 12: Check if the result is solvable\n        # Step 13: Check if the result is solvable\n        # Step 14: Check if the result is solvable\n        # Step 15: Check if the result is solvable\n        # Step 16: Check if the result is solvable\n        # Step 17: Check if the result is solvable\n        # Step 18: Check if the result is solvable\n        # Step 19: Check if the result is solvable\n        # Step 20: Check if the result"
    },
    {
        "number": 1309,
        "title": "Decrypt String from Alphabet to Integer Mapping",
        "difficulty": 0,
        "answer": "        # d = {'a': '1', 'b': '2', 'c': '3', 'd': '4', 'e': '5', 'f': '6', 'g': '7', 'h': '8', 'i': '9', 'j': '10', 'k': '11', 'l': '12','m': '13', 'n': '14', 'o': '15', 'p': '16', 'q': '17', 'r': '18','s': '19', 't': '20', 'u': '21', 'v': '22', 'w': '23', 'x': '24', 'y': '25', 'z': '26'}\n        d = {'a': '1', 'b': '2', 'c': '3', 'd': '4', 'e': '5', 'f': '6', 'g': '7', 'h': '8', 'i': '9', 'j': '10', 'k': '11', 'l': '12','m': '13', 'n': '14"
    },
    {
        "number": 1310,
        "title": "XOR Queries of a Subarray",
        "difficulty": 1,
        "answer": "        # O(n^2)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O"
    },
    {
        "number": 1311,
        "title": "Get Watched Videos by Your Friends",
        "difficulty": 1,
        "answer": "        def get_frequency(watchedVideos, friends, id, level):\n            frequency = 0\n            for i in range(len(watchedVideos)):\n                if watchedVideos[i][id] == friends[id]:\n                    frequency += 1\n            return frequency\n        \n        def get_frequency_level(watchedVideos, friends, id, level):\n            frequency = 0\n            for i in range(len(watchedVideos)):\n                if watchedVideos[i][id] == friends[id]:\n                    frequency += 1\n            return frequency\n        \n        def get_frequency_level_2(watchedVideos, friends, id, level):\n            frequency = 0\n            for i in range(len(watchedVideos)):\n                if watchedVideos[i][id] == friends[id]:\n                    frequency += 1\n            return frequency\n        \n        def get_frequency_level_3(watchedVideos, friends, id, level):\n            frequency = 0\n            for i in range(len(watchedVideos)):\n                if watchedVideos[i"
    },
    {
        "number": 1312,
        "title": "Minimum Insertion Steps to Make a String Palindrome",
        "difficulty": 2,
        "answer": "        if not s:\n            return 0\n        if len(s) == 1:\n            return 1\n        if len(s) == 2:\n            return 2\n        if len(s) == 3:\n            return 3\n        if len(s) == 4:\n            return 4\n        if len(s) == 5:\n            return 5\n        if len(s) == 6:\n            return 6\n        if len(s) == 7:\n            return 7\n        if len(s) == 8:\n            return 8\n        if len(s) == 9:\n            return 9\n        if len(s) == 10:\n            return 10\n        if len(s) == 11:\n            return 11\n        if len(s) == 12:\n            return 12\n        if len(s) == 13:\n            return 13\n        if len(s) == 14:\n            return 14\n        if len(s) == 15:\n            return 15\n        if len(s) == 16:\n            return 16\n        if len(s) == 17:\n            return 17\n        if"
    },
    {
        "number": 1313,
        "title": "Decompress Run-Length Encoded List",
        "difficulty": 0,
        "answer": "        res = []\n        for i in range(len(nums) // 2):\n            res.append(nums[i * 2])\n            res.append(nums[i * 2 + 1])\n        return res"
    },
    {
        "number": 1314,
        "title": "Matrix Block Sum",
        "difficulty": 1,
        "answer": "        m = len(mat)\n        n = len(mat[0])\n        if m == 0 or n == 0:\n            return [[0 for _ in range(n + 1)] for _ in range(m + 1)]\n        if k == 0:\n            return [[sum(mat[i][j] for j in range(n)) for i in range(m)] for j in range(n)]\n        if k > n:\n            return [[sum(mat[i][j] for j in range(n)) for i in range(m)] for j in range(n)]\n        if k > m:\n            return [[sum(mat[i][j] for j in range(n)) for i in range(m)] for j in range(n)]\n        if k == n:\n            return [[sum(mat[i][j] for j in range(n)) for i in range(m)] for j in range(n)]\n        if k == m:\n            return [[sum(mat[i][j] for j in range(n)) for i in range(m)] for j in range(n"
    },
    {
        "number": 1315,
        "title": "Sum of Nodes with Even-Valued Grandparent",
        "difficulty": 1,
        "answer": "        if not root:\n            return 0\n        if root.left:\n            return self.sumEvenGrandparent(root.left) + self.sumEvenGrandparent(root.right)\n        if root.right:\n            return self.sumEvenGrandparent(root.right) + self.sumEvenGrandparent(root.left)\n        return root.val"
    },
    {
        "number": 1316,
        "title": "Distinct Echo Substrings",
        "difficulty": 2,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage"
    },
    {
        "number": 1317,
        "title": "Convert Integer to the Sum of Two No-Zero Integers",
        "difficulty": 0,
        "answer": "        if n == 0:\n            return []\n        if n < 0:\n            return []\n        if n == 1:\n            return [1, 1]\n        if n == 2:\n            return [1, 1]\n        if n == 3:\n            return [2, 9]\n        if n == 4:\n            return [2, 9]\n        if n == 5:\n            return [2, 9]\n        if n == 6:\n            return [2, 9]\n        if n == 7:\n            return [2, 9]\n        if n == 8:\n            return [2, 9]\n        if n == 9:\n            return [2, 9]\n        if n == 10:\n            return [2, 9]\n        if n == 11:\n            return [2, 9]\n        if n == 12:\n            return [2, 9]\n        if n == 13:\n            return [2, 9]\n        if n == 14:\n            return [2, 9]\n        if n == 15:\n            return [2, 9]\n        if n"
    },
    {
        "number": 1318,
        "title": "Minimum Flips to Make a OR b Equal to c",
        "difficulty": 1,
        "answer": "        a = a & (a >> 1)\r\n        b = b & (b >> 1)\r\n        c = c & (c >> 1)\r\n        return a | b | c\r\n\r\n\r\nclass Solution:\r\n    def minFlips(self, a: int, b: int, c: int) -> int:\r\n        \"\"\"\r\n        Given 3 positives numbers a, b and c. Return the minimum flips required in some bits of a and b to make ( a OR b == c ). (bitwise OR operation).\r\n        Flip operation consists of change any single bit 1 to 0 or change the bit 0 to 1 in their binary representation.\r\n        Example 1:\r\n        Input: a = 2, b = 6, c = 5\r\n        Output: 3\r\n        Explanation: After flips a = 1, b = 4, c = 5 such that (a OR b == c)\r\n        Example 2:\r\n        Input: a = 4, b = 2, c = 7\r\n        Output: 1\r\n        Example 3:\r\n        Input: a = 1, b ="
    },
    {
        "number": 1319,
        "title": "Number of Operations to Make Network Connected",
        "difficulty": 1,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage"
    },
    {
        "number": 1320,
        "title": "Minimum Distance to Type a Word Using Two Fingers",
        "difficulty": 2,
        "answer": "        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    },
    {
        "number": 1323,
        "title": "Maximum 69 Number",
        "difficulty": 0,
        "answer": "        if num == 0:\n            return 0\n        if num == 1:\n            return 1\n        if num == 2:\n            return 3\n        if num == 3:\n            return 4\n        if num == 4:\n            return 5\n        if num == 5:\n            return 6\n        if num == 6:\n            return 7\n        if num == 7:\n            return 8\n        if num == 8:\n            return 9\n        if num == 9:\n            return 10\n        if num == 10:\n            return 11\n        if num == 11:\n            return 12\n        if num == 12:\n            return 13\n        if num == 13:\n            return 14\n        if num == 14:\n            return 15\n        if num == 15:\n            return 16\n        if num == 16:\n            return 17\n        if num == 17:\n            return 18\n        if num == 18:\n            return 19\n        if num == 19:\n            return 20\n        if num == 20:\n            return 21\n        if num == 21:\n            return 22\n        if num == 22:\n            "
    },
    {
        "number": 1324,
        "title": "Print Words Vertically",
        "difficulty": 1,
        "answer": "        res = []\r\n        for i in range(len(s)):\r\n            res.append(s[i].upper())\r\n        return res\r\n\r\n    def printHorizontally(self, s: str) -> List[str]:\r\n        \"\"\"\r\n        Given a string s. Return all the words horizontally in the same order in which they appear in s.\r\n        Words are returned as a list of strings, complete with spaces when is necessary. (Trailing spaces are not allowed).\r\n        Each word would be put on only one column and that in one column there will be only one word.\r\n        Example 1:\r\n        Input: s = \"HOW ARE YOU\"\r\n        Output: [\"HAY\",\"ORO\",\"WEU\"]\r\n        Explanation: Each word is printed horizontally. \r\n         \"HAY\"\r\n         \"ORO\"\r\n         \"WEU\"\r\n        Example 2:\r\n        Input: s = \"TO BE OR NOT TO BE\"\r\n        Output: [\"TBONTB\",\"OEROOE\",\"   T\"]\r\n        Explanation:"
    },
    {
        "number": 1325,
        "title": "Delete Leaves With a Given Value",
        "difficulty": 1,
        "answer": "        if not root:\n            return None\n        if not root.left and not root.right:\n            if root.val == target:\n                return None\n            return root\n        if not root.left:\n            return self.removeLeafNodes(root.right, target)\n        if not root.right:\n            return self.removeLeafNodes(root.left, target)\n        if root.val == target:\n            return None\n        root.val = root.val if root.val < target else target\n        root.left = self.removeLeafNodes(root.left, target)\n        root.right = self.removeLeafNodes(root.right, target)\n        return root"
    },
    {
        "number": 1326,
        "title": "Minimum Number of Taps to Open to Water a Garden",
        "difficulty": 2,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n        if n == 22:\n            "
    },
    {
        "number": 1328,
        "title": "Break a Palindrome",
        "difficulty": 1,
        "answer": "        if not palindrome:\n            return \"\"\n        if len(palindrome) == 1:\n            return palindrome\n        if len(palindrome) == 2:\n            return palindrome[0] + palindrome[1]\n        if len(palindrome) == 3:\n            return palindrome[0] + palindrome[1] + palindrome[2]\n        if len(palindrome) == 4:\n            return palindrome[0] + palindrome[1] + palindrome[2] + palindrome[3]\n        if len(palindrome) == 5:\n            return palindrome[0] + palindrome[1] + palindrome[2] + palindrome[3] + palindrome[4]\n        if len(palindrome) == 6:\n            return palindrome[0] + palindrome[1] + palindrome[2] + palindrome[3] + palindrome[4] + palindrome[5]\n        if len(palindrome) == 7"
    },
    {
        "number": 1329,
        "title": "Sort the Matrix Diagonally",
        "difficulty": 1,
        "answer": "        m = len(mat)\n        n = len(mat[0])\n        for i in range(m):\n            for j in range(n):\n                if i == j:\n                    mat[i][j] = mat[i][j]\n                else:\n                    mat[i][j] = mat[i][j] + mat[i][j]\n        for i in range(m):\n            for j in range(n):\n                if i == j:\n                    mat[i][j] = mat[i][j]\n                else:\n                    mat[i][j] = mat[i][j] - mat[i][j]\n        for i in range(m):\n            for j in range(n):\n                if i == j:\n                    mat[i][j] = mat[i][j]\n                else:\n                    mat[i][j] = mat[i][j] - mat[i][j]\n        for i in range(m):\n            for j in range(n):\n                if i == j:\n                    mat[i][j] = mat"
    },
    {
        "number": 1330,
        "title": "Reverse Subarray To Maximize Array Value",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return max(nums[0], nums[1])\n        if n == 3:\n            return max(nums[0] + nums[1], nums[2] + nums[3])\n        if n == 4:\n            return max(nums[0] + nums[1] + nums[2], nums[3] + nums[4])\n        if n == 5:\n            return max(nums[0] + nums[1] + nums[2] + nums[3] + nums[4], nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5])\n        if n == 6:\n            return max(nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums"
    },
    {
        "number": 1331,
        "title": "Rank Transform of an Array",
        "difficulty": 0,
        "answer": "        arr.sort()\n        res = []\n        for i in range(len(arr)):\n            res.append(len(arr) - i)\n        return res"
    },
    {
        "number": 1332,
        "title": "Remove Palindromic Subsequences",
        "difficulty": 0,
        "answer": "        if not s:\n            return 0\n        if len(s) == 1:\n            return 1\n        if len(s) == 2:\n            return 2\n        if s[0] == s[-1]:\n            return self.removePalindromeSub(s[1:-1]) + 1\n        else:\n            return self.removePalindromeSub(s[1:-1])"
    },
    {
        "number": 1333,
        "title": "Filter Restaurants by Vegan-Friendly, Price and Distance",
        "difficulty": 1,
        "answer": "        res = []\n        for i in range(len(restaurants)):\n            if restaurants[i][3] >= maxPrice and restaurants[i][4] >= maxDistance:\n                res.append(restaurants[i][0])\n        return res"
    },
    {
        "number": 1334,
        "title": "Find the City With the Smallest Number of Neighbors at a Threshold Distance",
        "difficulty": 1,
        "answer": "        # Time: O(n^2 * n^2)\n        # Space: O(n^2)\n        # Runtime: O(n^2 * n^2)\n        # Space: O(n^2)\n        # Runtime: O(n^2 * n^2)\n        # Space: O(n^2)\n        # Runtime: O(n^2 * n^2)\n        # Space: O(n^2)\n        # Runtime: O(n^2 * n^2)\n        # Space: O(n^2)\n        # Runtime: O(n^2 * n^2)\n        # Space: O(n^2)\n        # Runtime: O(n^2 * n^2)\n        # Space: O(n^2)\n        # Runtime: O(n^2 * n^2)\n        # Space: O(n^2)\n        # Runtime: O(n^2 * n^2)\n        # Space: O(n^2)\n        # Runtime: O(n^2 * n^2)\n        "
    },
    {
        "number": 1335,
        "title": "Minimum Difficulty of a Job Schedule",
        "difficulty": 2,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n"
    },
    {
        "number": 1337,
        "title": "The K Weakest Rows in a Matrix",
        "difficulty": 0,
        "answer": "        # O(n^2)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O"
    },
    {
        "number": 1338,
        "title": "Reduce Array Size to The Half",
        "difficulty": 1,
        "answer": "        if len(arr) == 0:\n            return 0\n        if len(arr) == 1:\n            return 1\n        if len(arr) == 2:\n            return 2\n        if len(arr) == 3:\n            return 2\n        if len(arr) == 4:\n            return 2\n        if len(arr) == 5:\n            return 2\n        if len(arr) == 6:\n            return 2\n        if len(arr) == 7:\n            return 2\n        if len(arr) == 8:\n            return 2\n        if len(arr) == 9:\n            return 2\n        if len(arr) == 10:\n            return 2\n        if len(arr) == 11:\n            return 2\n        if len(arr) == 12:\n            return 2\n        if len(arr) == 13:\n            return 2\n        if len(arr) == 14:\n            return 2\n        if len(arr) == 15:\n            return 2\n        if len(arr) == 16:\n            return 2\n        if len(arr) == 17:\n            return"
    },
    {
        "number": 1339,
        "title": "Maximum Product of Splitted Binary Tree",
        "difficulty": 1,
        "answer": "        def max_product(root):\n            if not root:\n                return 0\n            left = max_product(root.left)\n            right = max_product(root.right)\n            return root.val * left * right\n        return max_product(root) % (10 ** 9 + 7)"
    },
    {
        "number": 1340,
        "title": "Jump Game V",
        "difficulty": 2,
        "answer": "        n = len(arr)\n        dp = [0] * n\n        dp[0] = arr[0]\n        dp[1] = arr[0] + arr[1]\n        dp[2] = arr[0] + arr[1] + arr[2]\n        dp[3] = arr[0] + arr[1] + arr[2] + arr[3]\n        dp[4] = arr[0] + arr[1] + arr[2] + arr[3] + arr[4]\n        dp[5] = arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5]\n        dp[6] = arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6]\n        dp[7] = arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7]\n        dp[8]"
    },
    {
        "number": 1342,
        "title": "Number of Steps to Reduce a Number to Zero",
        "difficulty": 0,
        "answer": "        if num == 0:\n            return 0\n        if num % 2 == 0:\n            return 1\n        else:\n            return 0"
    },
    {
        "number": 1343,
        "title": "Number of Sub-arrays of Size K and Average Greater than or Equal to Threshold",
        "difficulty": 1,
        "answer": "        # Time complexity: O(n)\n        # Space Complexity: O(n)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        "
    },
    {
        "number": 1344,
        "title": "Angle Between Hands of a Clock",
        "difficulty": 1,
        "answer": "        if hour == 0 and minutes == 0:\n            return 0\n        if hour == 0 and minutes == 0:\n            return 360\n        if hour == 0 and minutes == 0:\n            return 0\n        if hour == 0 and minutes == 0:\n            return 360\n        if hour == 0 and minutes == 0:\n            return 0\n        if hour == 0 and minutes == 0:\n            return 360\n        if hour == 0 and minutes == 0:\n            return 0\n        if hour == 0 and minutes == 0:\n            return 360\n        if hour == 0 and minutes == 0:\n            return 0\n        if hour == 0 and minutes == 0:\n            return 360\n        if hour == 0 and minutes == 0:\n            return 0\n        if hour == 0 and minutes == 0:\n            return 360\n        if hour == 0 and minutes == 0:\n            return 0\n        if hour == 0 and minutes == 0:\n            return 360\n        if hour == 0 and minutes == 0:\n            return 0\n        if hour == 0 and minutes == 0:\n            return 360\n        if hour == 0 and minutes == 0:"
    },
    {
        "number": 1345,
        "title": "Jump Game IV",
        "difficulty": 2,
        "answer": "        n = len(arr)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n"
    },
    {
        "number": 1346,
        "title": "Check If N and Its Double Exist",
        "difficulty": 0,
        "answer": "        # Time: O(n)\n        # Space: O(1)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage"
    },
    {
        "number": 1347,
        "title": "Minimum Number of Steps to Make Two Strings Anagram",
        "difficulty": 1,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage"
    },
    {
        "number": 1348,
        "title": "Tweet Counts Per Frequency",
        "difficulty": 1,
        "answer": "        pass\n    def getTweetCountsPerFrequencyPeriod(self, freq: str, tweetName: str, startTime: int, endTime: int) -> List[int]:\n        \"\"\"\n        A social media company is trying to monitor activity on their site by analyzing the number of tweets that occur in select periods of time. These periods can be partitioned into smaller time chunks based on a certain frequency (every minute, hour, or day).\n        For example, the period [10, 10000] (in seconds) would be partitioned into the following time chunks with these frequencies:\n            Every minute (60-second chunks): [10,69], [70,129], [130,189],..., [9970,10000]\n            Every hour (3600-second chunks): [10,3609], [3610,7209], [7210,10000]\n            Every day (86400-second chunks): [10,10000]\n        Notice that the last chunk may be shorter than the specified frequency's chunk size and will always end with the end time of the period (10000 in the above example).\n        Design and implement an API to help the"
    },
    {
        "number": 1349,
        "title": "Maximum Students Taking Exam",
        "difficulty": 2,
        "answer": "        m = len(seats)\n        n = len(seats[0])\n        dp = [[0] * n for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if seats[i][j] == '.':\n                    dp[i][j] = 0\n                else:\n                    dp[i][j] = 1\n        for i in range(m):\n            for j in range(n):\n                if seats[i][j] == '.':\n                    continue\n                if i > 0:\n                    dp[i][j] = dp[i - 1][j]\n                if j > 0:\n                    dp[i][j] = dp[i][j - 1]\n                if i < m - 1:\n                    dp[i][j] = dp[i + 1][j]\n                if j < n - 1:\n                    dp[i][j] = dp[i][j + 1]\n        return dp[m - 1][n - 1]"
    },
    {
        "number": 1351,
        "title": "Count Negative Numbers in a Sorted Matrix",
        "difficulty": 0,
        "answer": "        m = len(grid)\n        n = len(grid[0])\n        count = 0\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] < 0:\n                    count += 1\n        return count"
    },
    {
        "number": 1352,
        "title": "Product of the Last K Numbers",
        "difficulty": 1,
        "answer": "        pass"
    },
    {
        "number": 1353,
        "title": "Maximum Number of Events That Can Be Attended",
        "difficulty": 1,
        "answer": "        events.sort(key=lambda x: x[0])\n        res = 0\n        for i in range(len(events)):\n            if events[i][0] <= events[i][1]:\n                res += 1\n        return res"
    },
    {
        "number": 1354,
        "title": "Construct Target Array With Multiple Sums",
        "difficulty": 2,
        "answer": "        n = len(target)\n        if n == 0:\n            return False\n        if n == 1:\n            return True\n        if n == 2:\n            return self.isPossible(target[1:])\n        if n == 3:\n            return self.isPossible(target[2:]) and self.isPossible(target[0:2])\n        if n == 4:\n            return self.isPossible(target[3:]) and self.isPossible(target[0:3]) and self.isPossible(target[1:4])\n        if n == 5:\n            return self.isPossible(target[4:]) and self.isPossible(target[0:4]) and self.isPossible(target[1:5]) and self.isPossible(target[2:6])\n        if n == 6:\n            return self.isPossible(target[7:]) and self.isPossible(target[0:7]) and self.isPossible(target[1:8]) and self.isPossible(target[2:9"
    },
    {
        "number": 1356,
        "title": "Sort Integers by The Number of 1 Bits",
        "difficulty": 0,
        "answer": "        arr.sort()\n        return arr\n"
    },
    {
        "number": 1357,
        "title": "Apply Discount Every n Orders",
        "difficulty": 1,
        "answer": "        pass\n    def getBill(self, product: List[int], amount: List[int]) -> float:\n        \"\"\"\n        There is a supermarket that is frequented by many customers. The products sold at the supermarket are represented as two parallel integer arrays products and prices, where the ith product has an ID of products[i] and a price of prices[i].\n        When a customer is paying, their bill is represented as two parallel integer arrays product and amount, where the jth product they purchased has an ID of product[j], and amount[j] is how much of the product they bought. Their subtotal is calculated as the sum of each amount[j] * (price of the jth product).\n        The supermarket decided to have a sale. Every nth customer paying for their groceries will be given a percentage discount. The discount amount is given by discount, where they will be given discount percent off their subtotal. More formally, if their subtotal is bill, then they would actually pay bill * ((100 - discount) / 100).\n        Implement the Cashier class:\n            Cashier(int n, int discount, int[] products, int[] prices"
    },
    {
        "number": 1358,
        "title": "Number of Substrings Containing All Three Characters",
        "difficulty": 1,
        "answer": "        n = len(s)\n        dp = [[0 for _ in range(n)] for _ in range(n)]\n        for i in range(n):\n            for j in range(i, n):\n                if s[i] == s[j]:\n                    dp[i][j] = dp[i+1][j-1] + 1\n                else:\n                    dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n        return dp[0][n-1]"
    },
    {
        "number": 1359,
        "title": "Count All Valid Pickup and Delivery Options",
        "difficulty": 2,
        "answer": "        dp = [0] * (n + 1)\n        dp[1] = 1\n        for i in range(2, n + 1):\n            for j in range(1, i):\n                dp[i] += dp[j]\n        return dp[n] % (10 ** 9 + 7)"
    },
    {
        "number": 1360,
        "title": "Number of Days Between Two Dates",
        "difficulty": 0,
        "answer": "        date1 = date1.split('-')\n        date2 = date2.split('-')\n        date1 = date1[0] + '-' + date1[1] + '-' + date1[2]\n        date2 = date2[0] + '-' + date2[1] + '-' + date2[2]\n        date1 = date1.split(' ')\n        date2 = date2.split(' ')\n        date1 = date1[0] + '-' + date1[1] + '-' + date1[2]\n        date2 = date2[0] + '-' + date2[1] + '-' + date2[2]\n        date1 = date1.split('-')\n        date2 = date2.split('-')\n        date1 = date1[0] + '-' + date1[1] + '-' + date1[2]\n        date2 = date2[0] + '-' + date2[1] + '-' + date2[2]\n        date1 = date1.split(' '"
    },
    {
        "number": 1361,
        "title": "Validate Binary Tree Nodes",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return True\n        if n == 1:\n            return True if leftChild[0] == -1 and rightChild[0] == -1 else False\n        if n == 2:\n            return True if leftChild[0] == -1 and rightChild[0] == -1 else False\n        if n == 3:\n            return True if leftChild[0] == -1 and rightChild[0] == -1 else False\n        if n == 4:\n            return True if leftChild[0] == -1 and rightChild[0] == -1 else False\n        if n == 5:\n            return True if leftChild[0] == -1 and rightChild[0] == -1 else False\n        if n == 6:\n            return True if leftChild[0] == -1 and rightChild[0] == -1 else False\n        if n == 7:\n            return True if leftChild[0] == -1 and rightChild[0] == -1 else False\n        if n == 8:\n            return True if leftChild[0] == -1 and rightChild"
    },
    {
        "number": 1362,
        "title": "Closest Divisors",
        "difficulty": 1,
        "answer": "        def closestDivisors(num):\n            if num == 0:\n                return [0, 0]\n            if num == 1:\n                return [1, 1]\n            if num == 2:\n                return [2, 2]\n            if num == 3:\n                return [3, 3]\n            if num == 4:\n                return [4, 4]\n            if num == 5:\n                return [5, 5]\n            if num == 6:\n                return [6, 6]\n            if num == 7:\n                return [7, 7]\n            if num == 8:\n                return [8, 8]\n            if num == 9:\n                return [9, 9]\n            if num == 10:\n                return [10, 10]\n            if num == 11:\n                return [11, 11]\n            if num == 12:\n                return [12, 12]\n            if num == 13:\n                return [13, 13]\n            if num == 14:\n                return [14, 14]\n            if num == 15:\n                return [15, 15]\n"
    },
    {
        "number": 1363,
        "title": "Largest Multiple of Three",
        "difficulty": 2,
        "answer": "        if len(digits) == 0:\n            return \"\"\n        if len(digits) == 1:\n            return digits[0]\n        if len(digits) == 2:\n            return str(int(''.join(map(str, digits))))\n        if len(digits) == 3:\n            return str(int(''.join(map(str, digits[:3]))))\n        if len(digits) == 4:\n            return str(int(''.join(map(str, digits[:4]))))\n        if len(digits) == 5:\n            return str(int(''.join(map(str, digits[:5]))))\n        if len(digits) == 6:\n            return str(int(''.join(map(str, digits[:6]))))\n        if len(digits) == 7:\n            return str(int(''.join(map(str, digits[:7]))))\n        if len(digits) == 8:\n            return str(int(''.join(map(str, digits[:8]))))\n        if len("
    },
    {
        "number": 1365,
        "title": "How Many Numbers Are Smaller Than the Current Number",
        "difficulty": 0,
        "answer": "        res = [0] * len(nums)\n        for i in range(len(nums)):\n            for j in range(i):\n                if nums[j] < nums[i]:\n                    res[i] += 1\n        return res"
    },
    {
        "number": 1366,
        "title": "Rank Teams by Votes",
        "difficulty": 1,
        "answer": "        votes.sort(key=lambda x: (x.count('W'), x.count('X'), x.count('Y'), x.count('Z')))\n        return ''.join(votes)\n"
    },
    {
        "number": 1367,
        "title": "Linked List in Binary Tree",
        "difficulty": 1,
        "answer": "        if not head:\n            return False\n        \n        def dfs(node, path):\n            if not node:\n                return False\n            if not node.left and not node.right:\n                return True\n            if not node.left:\n                return dfs(node.right, path + [node.data])\n            if not node.right:\n                return dfs(node.left, path + [node.data])\n            return dfs(node.left, path + [node.data]) and dfs(node.right, path + [node.data])\n        \n        return dfs(root, [])\n"
    },
    {
        "number": 1368,
        "title": "Minimum Cost to Make at Least One Valid Path in a Grid",
        "difficulty": 2,
        "answer": "        m = len(grid)\n        n = len(grid[0])\n        cost = 0\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == 1:\n                    cost += 1\n                    if i > 0:\n                        cost += 1\n                        cost += 1\n                        cost += 1\n                    if j > 0:\n                        cost += 1\n                        cost += 1\n                        cost += 1\n                    if i < m - 1:\n                        cost += 1\n                        cost += 1\n                        cost += 1\n                        cost += 1\n                    if j < n - 1:\n                        cost += 1\n                        cost += 1\n                        cost += 1\n                        cost += 1\n        return cost"
    },
    {
        "number": 1370,
        "title": "Increasing Decreasing String",
        "difficulty": 0,
        "answer": "        result = []\n        for i in range(len(s)):\n            if s[i] not in result:\n                result.append(s[i])\n            else:\n                result.append(s[i])\n                result.append(s[i])\n                result.append(s[i])\n        result.sort()\n        return ''.join(result)"
    },
    {
        "number": 1371,
        "title": "Find the Longest Substring Containing Vowels in Even Counts",
        "difficulty": 1,
        "answer": "        vowels = ['a', 'e', 'i', 'o', 'u']\n        max_length = 0\n        for i in range(len(s)):\n            if s[i] in vowels:\n                if s[i] == s[i + 1]:\n                    continue\n                else:\n                    max_length = max(max_length, len(s[i:i + 2]))\n            else:\n                max_length = max(max_length, len(s[i:i + 2]))\n        return max_length"
    },
    {
        "number": 1372,
        "title": "Longest ZigZag Path in a Binary Tree",
        "difficulty": 1,
        "answer": "        if not root:\n            return 0\n        if not root.left and not root.right:\n            return 1\n        if not root.left:\n            return self.longestZigZag(root.right) + 1\n        if not root.right:\n            return self.longestZigZag(root.left) + 1\n        return max(self.longestZigZag(root.left), self.longestZigZag(root.right)) + 1"
    },
    {
        "number": 1373,
        "title": "Maximum Sum BST in Binary Tree",
        "difficulty": 2,
        "answer": "        def max_sum_bst(root):\n            if not root:\n                return 0\n            left_sum = max_sum_bst(root.left)\n            right_sum = max_sum_bst(root.right)\n            return root.val + left_sum + right_sum\n        return max_sum_bst(root)"
    },
    {
        "number": 1374,
        "title": "Generate a String With Characters That Have Odd Counts",
        "difficulty": 0,
        "answer": "        if n == 0:\n            return \"\"\n        if n == 1:\n            return \"p\"\n        if n == 2:\n            return \"z\"\n        if n == 3:\n            return \"x\"\n        if n == 4:\n            return \"y\"\n        if n == 5:\n            return \"a\"\n        if n == 6:\n            return \"b\"\n        if n == 7:\n            return \"c\"\n        if n == 8:\n            return \"d\"\n        if n == 9:\n            return \"e\"\n        if n == 10:\n            return \"f\"\n        if n == 11:\n            return \"g\"\n        if n == 12:\n            return \"h\"\n        if n == 13:\n            return \"i\"\n        if n == 14:\n            return \"j\"\n        if n == 15:\n            return \"k\"\n        if n == 16:\n            return \"l\"\n        if n == 17:\n            return \"m\"\n        if n == 18:\n            return \"n\"\n        if n == 19"
    },
    {
        "number": 1375,
        "title": "Number of Times Binary String Is Prefix-Aligned",
        "difficulty": 1,
        "answer": "        n = len(flips)\n        count = 0\n        for i in range(n):\n            if flips[i] == 1:\n                count += 1\n        return count"
    },
    {
        "number": 1376,
        "title": "Time Needed to Inform All Employees",
        "difficulty": 1,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n"
    },
    {
        "number": 1377,
        "title": "Frog Position After T Seconds",
        "difficulty": 2,
        "answer": "        def get_prob(v, t):\n            if v == target:\n                return 1\n            if v == 1:\n                return 0\n            if v == 2:\n                return 0\n            if v == 3:\n                return 0\n            if v == 4:\n                return 0\n            if v == 5:\n                return 0\n            if v == 6:\n                return 0\n            if v == 7:\n                return 0\n            if v == 8:\n                return 0\n            if v == 9:\n                return 0\n            if v == 10:\n                return 0\n            if v == 11:\n                return 0\n            if v == 12:\n                return 0\n            if v == 13:\n                return 0\n            if v == 14:\n                return 0\n            if v == 15:\n                return 0\n            if v == 16:\n                return 0\n            if v == 17:\n                return 0\n            if v == 18:\n                return 0\n            if v == 19:\n                return 0\n            if v == 20:\n                return 0\n            if v == 21:\n"
    },
    {
        "number": 1379,
        "title": "Find a Corresponding Node of a Binary Tree in a Clone of That Tree",
        "difficulty": 0,
        "answer": "        if not cloned:\n            return target\n        if not original:\n            return target\n        if cloned.val == target.val:\n            return cloned\n        return self.getTargetCopy(original, cloned.left, target) or self.getTargetCopy(original, cloned.right, target)"
    },
    {
        "number": 1380,
        "title": "Lucky Numbers in a Matrix",
        "difficulty": 0,
        "answer": "        # O(mn)\n        # O(mn)\n        # O(mn)\n        # O(mn)\n        # O(mn)\n        # O(mn)\n        # O(mn)\n        # O(mn)\n        # O(mn)\n        # O(mn)\n        # O(mn)\n        # O(mn)\n        # O(mn)\n        # O(mn)\n        # O(mn)\n        # O(mn)\n        # O(mn)\n        # O(mn)\n        # O(mn)\n        # O(mn)\n        # O(mn)\n        # O(mn)\n        # O(mn)\n        # O(mn)\n        # O(mn)\n        # O(mn)\n        # O(mn)\n        # O(mn)\n        # O(mn)\n        # O(mn)\n        # O(mn)\n        # O(mn)\n        # O(mn)\n        # O(mn)\n        # O(mn)\n        # O(mn"
    },
    {
        "number": 1381,
        "title": "Design a Stack With Increment Operation",
        "difficulty": 1,
        "answer": "        pass"
    },
    {
        "number": 1382,
        "title": "Balance a Binary Search Tree",
        "difficulty": 1,
        "answer": "        def helper(root):\n            if not root:\n                return None\n            if not root.left and not root.right:\n                return root\n            if root.left and root.right:\n                if root.left.val < root.right.val:\n                    root.left = helper(root.left)\n                else:\n                    root.right = helper(root.right)\n            elif root.left:\n                root.left = helper(root.left)\n            elif root.right:\n                root.right = helper(root.right)\n            return root\n        return helper(root)"
    },
    {
        "number": 1383,
        "title": "Maximum Performance of a Team",
        "difficulty": 2,
        "answer": "        # Time: O(n * k * min(speed[i], efficiency[i]))\n        # Space: O(k)\n        # Runtime: O(n * k)\n        # Space: O(k)\n        # Runtime: O(n * k)\n        # Space: O(k)\n        # Runtime: O(n * k)\n        # Space: O(k)\n        # Runtime: O(n * k)\n        # Space: O(k)\n        # Runtime: O(n * k)\n        # Space: O(k)\n        # Runtime: O(n * k)\n        # Space: O(k)\n        # Runtime: O(n * k)\n        # Space: O(k)\n        # Runtime: O(n * k)\n        # Space: O(k)\n        # Runtime: O(n * k)\n        # Space: O(k)\n        # Runtime: O(n * k)\n        # Space: O(k)\n        # Runtime: O(n * k)\n        # Space: O(k)"
    },
    {
        "number": 1385,
        "title": "Find the Distance Value Between Two Arrays",
        "difficulty": 0,
        "answer": "        # d = 2\n        # d = 3\n        # d = 4\n        # d = 5\n        # d = 6\n        # d = 7\n        # d = 8\n        # d = 9\n        # d = 10\n        # d = 11\n        # d = 12\n        # d = 13\n        # d = 14\n        # d = 15\n        # d = 16\n        # d = 17\n        # d = 18\n        # d = 19\n        # d = 20\n        # d = 21\n        # d = 22\n        # d = 23\n        # d = 24\n        # d = 25\n        # d = 26\n        # d = 27\n        # d = 28\n        # d = 29\n        # d = 30\n        # d = 31\n        # d = 32\n        # d = 33\n        # d = 34\n        # d = 35\n        # d = 36\n        # d = 37\n        # d = 38\n        # d = 39\n        # d = 40\n        # d = 41\n        # d = 42\n        # d ="
    },
    {
        "number": 1386,
        "title": "Cinema Seat Allocation",
        "difficulty": 1,
        "answer": "        reservedSeats.sort(key=lambda x: x[0])\n        reservedSeats.sort(key=lambda x: x[1])\n        reservedSeats.sort(key=lambda x: x[2])\n        reservedSeats.sort(key=lambda x: x[3])\n        reservedSeats.sort(key=lambda x: x[4])\n        reservedSeats.sort(key=lambda x: x[5])\n        reservedSeats.sort(key=lambda x: x[6])\n        reservedSeats.sort(key=lambda x: x[7])\n        reservedSeats.sort(key=lambda x: x[8])\n        reservedSeats.sort(key=lambda x: x[9])\n        reservedSeats.sort(key=lambda x: x[10])\n        reservedSeats.sort(key=lambda x: x[11])\n        reservedSeats.sort(key=lambda x: x[12])\n        reservedSeats.sort(key=lambda x: x[13"
    },
    {
        "number": 1387,
        "title": "Sort Integers by The Power Value",
        "difficulty": 1,
        "answer": "        def sort(arr, lo, hi):\n            if lo >= hi:\n                return\n            mid = (lo + hi) // 2\n            sort(arr, lo, mid)\n            sort(arr, mid + 1, hi)\n            arr[lo], arr[mid] = arr[mid], arr[lo]\n        sort(self.arr, 0, len(self.arr) - 1)\n        return self.arr[k - 1]"
    },
    {
        "number": 1388,
        "title": "Pizza With 3n Slices",
        "difficulty": 2,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n"
    },
    {
        "number": 1389,
        "title": "Create Target Array in the Given Order",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        target = [0] * n\n        for i in range(n):\n            target[index[i]] = nums[i]\n        return target"
    },
    {
        "number": 1390,
        "title": "Four Divisors",
        "difficulty": 1,
        "answer": "        def sumFourDivisors(nums):\n            if len(nums) == 1:\n                return nums[0]\n            if len(nums) == 2:\n                return nums[0] + nums[1]\n            if len(nums) == 3:\n                return nums[0] + nums[1] + nums[2]\n            if len(nums) == 4:\n                return nums[0] + nums[1] + nums[2] + nums[3]\n            if len(nums) == 5:\n                return nums[0] + nums[1] + nums[2] + nums[3] + nums[4]\n            if len(nums) == 6:\n                return nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5]\n            if len(nums) == 7:\n                return nums[0] + nums[1] + nums[2] + nums["
    },
    {
        "number": 1391,
        "title": "Check if There is a Valid Path in a Grid",
        "difficulty": 1,
        "answer": "        m = len(grid)\n        n = len(grid[0])\n        if m == 0 or n == 0:\n            return False\n        if m == 1 and n == 1:\n            return True\n        if m == 1 and n == 2:\n            return grid[0][0] == grid[1][0]\n        if m == 2 and n == 1:\n            return grid[0][0] == grid[1][0]\n        if m == 2 and n == 2:\n            return grid[0][0] == grid[1][0]\n        if m == 2 and n == 3:\n            return grid[0][0] == grid[1][0]\n        if m == 3 and n == 1:\n            return grid[0][0] == grid[1][0]\n        if m == 3 and n == 2:\n            return grid[0][0] == grid[1][0]\n        if m == 3 and n == 3:\n            return grid[0][0] == grid[1][0]\n        if m == 4 and n == 1:\n            return"
    },
    {
        "number": 1392,
        "title": "Longest Happy Prefix",
        "difficulty": 2,
        "answer": "        if len(s) == 0:\n            return \"\"\n        if len(s) == 1:\n            return s[0]\n        if len(s) == 2:\n            return s[0] + s[1]\n        if len(s) == 3:\n            return s[0] + s[1] + s[2]\n        if len(s) == 4:\n            return s[0] + s[1] + s[2] + s[3]\n        if len(s) == 5:\n            return s[0] + s[1] + s[2] + s[3] + s[4]\n        if len(s) == 6:\n            return s[0] + s[1] + s[2] + s[3] + s[4] + s[5]\n        if len(s) == 7:\n            return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6]\n        if len(s) == 8:\n            return"
    },
    {
        "number": 1394,
        "title": "Find Lucky Integer in an Array",
        "difficulty": 0,
        "answer": "        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    },
    {
        "number": 1395,
        "title": "Count Number of Teams",
        "difficulty": 1,
        "answer": "        n = len(rating)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        dp = [0] * n\n        dp[0] = 1\n        dp[1] = 1\n        dp[2] = 2\n        dp[3] = 3\n        for i in range(4, n):\n            dp[i] = (dp[i - 1] + dp[i - 2] + dp[i - 3]) % 10007\n        return dp[n - 1]"
    },
    {
        "number": 1396,
        "title": "Design Underground System",
        "difficulty": 1,
        "answer": "        pass"
    },
    {
        "number": 1397,
        "title": "Find All Good Strings",
        "difficulty": 2,
        "answer": "        modulo = 10**9+7\n        def helper(n, s1, s2, evil):\n            if n == 1:\n                return 1\n            if n == 2:\n                return 2\n            if n == 3:\n                return 3\n            if n == 4:\n                return 4\n            if n == 5:\n                return 5\n            if n == 6:\n                return 6\n            if n == 7:\n                return 7\n            if n == 8:\n                return 8\n            if n == 9:\n                return 9\n            if n == 10:\n                return 10\n            if n == 11:\n                return 11\n            if n == 12:\n                return 12\n            if n == 13:\n                return 13\n            if n == 14:\n                return 14\n            if n == 15:\n                return 15\n            if n == 16:\n                return 16\n            if n == 17:\n                return 17\n            if n == 18:\n                return 18\n            if n == 19:\n                return 19\n            if n == 20:\n                return 20\n            if n == 21"
    },
    {
        "number": 1399,
        "title": "Count Largest Group",
        "difficulty": 0,
        "answer": "        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    },
    {
        "number": 1400,
        "title": "Construct K Palindrome Strings",
        "difficulty": 1,
        "answer": "        if len(s) < k:\n            return False\n        if len(s) == k:\n            return True\n        if len(s) == 1:\n            return True\n        if len(s) == 2:\n            return s[0] == s[1]\n        if len(s) == 3:\n            return s[0] == s[2] and s[1] == s[2]\n        if len(s) == 4:\n            return s[0] == s[1] and s[2] == s[3] and s[1] == s[3]\n        if len(s) == 5:\n            return s[0] == s[1] and s[2] == s[4] and s[1] == s[4] and s[3] == s[4]\n        if len(s) == 6:\n            return s[0] == s[1] and s[2] == s[3] and s[1] == s[3] and s[4] == s[5] and s[3] == s[5"
    },
    {
        "number": 1401,
        "title": "Circle and Rectangle Overlapping",
        "difficulty": 1,
        "answer": "        if xCenter < x1 or xCenter > x2 or yCenter < y1 or yCenter > y2:\n            return False\n        if xCenter - radius <= x1 <= xCenter + radius and yCenter - radius <= y1 <= yCenter + radius:\n            return True\n        return False"
    },
    {
        "number": 1402,
        "title": "Reducing Dishes",
        "difficulty": 2,
        "answer": "        satisfaction.sort()\n        max_sum = 0\n        for i in range(len(satisfaction)):\n            max_sum += satisfaction[i] * (i + 1)\n        return max_sum"
    },
    {
        "number": 1403,
        "title": "Minimum Subsequence in Non-Increasing Order",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        if n == 0:\n            return []\n        if n == 1:\n            return [nums[0]]\n        if n == 2:\n            return [nums[0], nums[1]]\n        if n == 3:\n            return [nums[0], nums[1], nums[2]]\n        if n == 4:\n            return [nums[0], nums[1], nums[2], nums[3]]\n        if n == 5:\n            return [nums[0], nums[1], nums[2], nums[3], nums[4]]\n        if n == 6:\n            return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5]]\n        if n == 7:\n            return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6]]\n        if n == 8:\n            return [nums["
    },
    {
        "number": 1404,
        "title": "Number of Steps to Reduce a Number in Binary Representation to One",
        "difficulty": 1,
        "answer": "        if s == \"0\":\n            return 0\n        if s == \"1\":\n            return 1\n        if s == \"2\":\n            return 2\n        if s == \"3\":\n            return 3\n        if s == \"4\":\n            return 4\n        if s == \"5\":\n            return 5\n        if s == \"6\":\n            return 6\n        if s == \"7\":\n            return 7\n        if s == \"8\":\n            return 8\n        if s == \"9\":\n            return 9\n        if s == \"10\":\n            return 10\n        if s == \"11\":\n            return 11\n        if s == \"12\":\n            return 12\n        if s == \"13\":\n            return 13\n        if s == \"14\":\n            return 14\n        if s == \"15\":\n            return 15\n        if s == \"16\":\n            return 16\n        if s == \"17\":\n            return 17\n        if s == \"18\":\n            return 18\n        if s == \"19\":\n            return 19\n        if s == \"20\":\n            return"
    },
    {
        "number": 1405,
        "title": "Longest Happy String",
        "difficulty": 1,
        "answer": "        if a == b == c:\n            return \"aabaa\"\n        if a == b == c:\n            return \"a\"\n        if a == b == c:\n            return \"a\"\n        if a == b == c:\n            return \"a\"\n        if a == b == c:\n            return \"a\"\n        if a == b == c:\n            return \"a\"\n        if a == b == c:\n            return \"a\"\n        if a == b == c:\n            return \"a\"\n        if a == b == c:\n            return \"a\"\n        if a == b == c:\n            return \"a\"\n        if a == b == c:\n            return \"a\"\n        if a == b == c:\n            return \"a\"\n        if a == b == c:\n            return \"a\"\n        if a == b == c:\n            return \"a\"\n        if a == b == c:\n            return \"a\"\n        if a == b == c:\n            return \"a\"\n        if a == b == c:"
    },
    {
        "number": 1406,
        "title": "Stone Game III",
        "difficulty": 2,
        "answer": "        # dp[i][j] = max(dp[i-1][j-1], dp[i-1][j], dp[i-1][j+1]) + values[i]\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1], dp[i-1][j+1]) + values[i]\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1], dp[i-1][j+1]) + values[i]\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1], dp[i-1][j+1]) + values[i]\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1], dp[i-1][j+1]) + values[i]\n        # dp[i][j] ="
    },
    {
        "number": 1408,
        "title": "String Matching in an Array",
        "difficulty": 0,
        "answer": "        def is_substring(s1, s2):\n            if len(s1)!= len(s2):\n                return False\n            for i in range(len(s1)):\n                if s1[i]!= s2[i]:\n                    return False\n            return True"
    },
    {
        "number": 1409,
        "title": "Queries on a Permutation With Key",
        "difficulty": 1,
        "answer": "        res = []\r\n        for i in range(m):\r\n            res.append(queries[i])\r\n            for j in range(i, m):\r\n                res[i] = res[i] + queries[j]\r\n        return res\r\n\r\n    def processQueries2(self, queries: List[int], m: int) -> List[int]:\r\n        \"\"\"\r\n        Given the array queries of positive integers between 1 and m, you have to process all queries[i] (from i=0 to i=queries.length-1) according to the following rules:\r\n            In the beginning, you have the permutation P=[1,2,3,...,m].\r\n            For the current i, find the position of queries[i] in the permutation P (indexing from 0) and then move this at the beginning of the permutation P. Notice that the position of queries[i] in P is the result for queries[i].\r\n        Return an array containing the result for the given queries.\r\n        Example 1:\r\n        Input: queries = [3,1"
    },
    {
        "number": 1410,
        "title": "HTML Entity Parser",
        "difficulty": 1,
        "answer": "        text = text.replace(\"&\", \"&amp;\")\n        text = text.replace(\"<\", \"&lt;\")\n        text = text.replace(\">\", \"&gt;\")\n        text = text.replace(\"'\", \"&apos;\")\n        text = text.replace(\"\\\"\", \"&quot;\")\n        text = text.replace(\"&\", \"&amp;\")\n        text = text.replace(\"&\", \"&\")\n        return text"
    },
    {
        "number": 1411,
        "title": "Number of Ways to Paint N \u00d7 3 Grid",
        "difficulty": 2,
        "answer": "        dp = [0] * (n + 1)\n        dp[0] = 1\n        dp[1] = 1\n        dp[2] = 2\n        for i in range(3, n + 1):\n            dp[i] = (dp[i - 1] + dp[i - 2] + dp[i - 3]) % 796796\n        return dp[n]"
    },
    {
        "number": 1413,
        "title": "Minimum Value to Get Positive Step by Step Sum",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        startValue = nums[0]\n        for i in range(1, n):\n            startValue += nums[i]\n            if startValue < 1:\n                startValue = 1\n        return startValue"
    },
    {
        "number": 1414,
        "title": "Find the Minimum Number of Fibonacci Numbers Whose Sum Is K",
        "difficulty": 1,
        "answer": "        if k == 0:\n            return 1\n        if k == 1:\n            return 1\n        if k == 2:\n            return 2\n        if k == 3:\n            return 3\n        if k == 4:\n            return 5\n        if k == 5:\n            return 8\n        if k == 6:\n            return 13\n        if k == 7:\n            return 15\n        if k == 8:\n            return 20\n        if k == 9:\n            return 25\n        if k == 10:\n            return 50\n        if k == 11:\n            return 100\n        if k == 12:\n            return 200\n        if k == 13:\n            return 300\n        if k == 14:\n            return 400\n        if k == 15:\n            return 500\n        if k == 16:\n            return 600\n        if k == 17:\n            return 700\n        if k == 18:\n            return 800\n        if k == 19:\n            return 1000\n        if k == 20:\n            return 2000\n        if k == 21:\n            return 3000\n        if k == 22:\n            "
    },
    {
        "number": 1415,
        "title": "The k-th Lexicographical String of All Happy Strings of Length n",
        "difficulty": 1,
        "answer": "        if n == 1:\n            return \"c\"\n        if n == 2:\n            return \"c\"\n        if n == 3:\n            return \"c\"\n        if n == 4:\n            return \"c\"\n        if n == 5:\n            return \"c\"\n        if n == 6:\n            return \"c\"\n        if n == 7:\n            return \"c\"\n        if n == 8:\n            return \"c\"\n        if n == 9:\n            return \"c\"\n        if n == 10:\n            return \"c\"\n        if n == 11:\n            return \"c\"\n        if n == 12:\n            return \"c\"\n        if n == 13:\n            return \"c\"\n        if n == 14:\n            return \"c\"\n        if n == 15:\n            return \"c\"\n        if n == 16:\n            return \"c\"\n        if n == 17:\n            return \"c\"\n        if n == 18:\n            return \"c\"\n        if n == 19:\n            return \"c\"\n        if n"
    },
    {
        "number": 1416,
        "title": "Restore The Array",
        "difficulty": 2,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage"
    },
    {
        "number": 1417,
        "title": "Reformat The String",
        "difficulty": 0,
        "answer": "        if not s:\n            return \"\"\n        if len(s) == 1:\n            return s\n        if len(s) == 2:\n            return s[0] + self.reformat(s[1])\n        if len(s) == 3:\n            return s[0] + self.reformat(s[1]) + self.reformat(s[2])\n        if len(s) == 4:\n            return s[0] + self.reformat(s[1]) + self.reformat(s[2]) + self.reformat(s[3])\n        if len(s) == 5:\n            return s[0] + self.reformat(s[1]) + self.reformat(s[2]) + self.reformat(s[3]) + self.reformat(s[4])\n        if len(s) == 6:\n            return s[0] + self.reformat(s[1]) + self.reformat(s[2]) + self.reformat(s[3]) + self.reformat(s[4]) + self"
    },
    {
        "number": 1418,
        "title": "Display Table of Food Orders in a Restaurant",
        "difficulty": 1,
        "answer": "        table = []\r\n        for i in range(len(orders)):\r\n            table.append([orders[i][0],orders[i][1],orders[i][2]])\r\n        table.sort(key=lambda x: x[2])\r\n        return table\r\n\r\n\r\nclass Solution:\r\n    def displayTable(self, orders: List[List[str]]) -> List[List[str]]:\r\n        \"\"\"\r\n        Given the array orders, which represents the orders that customers have done in a restaurant. More specifically orders[i]=[customerNamei,tableNumberi,foodItemi] where customerNamei is the name of the customer, tableNumberi is the table customer sit at, and foodItemi is the item customer orders.\r\n        Return the restaurant's \u201cdisplay table\u201d. The \u201cdisplay table\u201d is a table whose row entries denote how many of each food item each table ordered. The first column is the table number and the remaining columns correspond to each food item in alphabetical order. The first row should be a header whose first column is \u201cTable\u201d,"
    },
    {
        "number": 1419,
        "title": "Minimum Number of Frogs Croaking",
        "difficulty": 1,
        "answer": "        # Time: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)"
    },
    {
        "number": 1420,
        "title": "Build Array Where You Can Find The Maximum Exactly K Comparisons",
        "difficulty": 2,
        "answer": "        # Time: O(n * m * k)\n        # Space: O(n * m * k)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84"
    },
    {
        "number": 1422,
        "title": "Maximum Score After Splitting a String",
        "difficulty": 0,
        "answer": "        left = 0\n        right = 0\n        score = 0\n        for i in range(len(s)):\n            if s[i] == '0':\n                left += 1\n            else:\n                right += 1\n            score = max(score, left + right)\n        return score"
    },
    {
        "number": 1423,
        "title": "Maximum Points You Can Obtain from Cards",
        "difficulty": 1,
        "answer": "        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    },
    {
        "number": 1424,
        "title": "Diagonal Traverse II",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return []\n        if n == 1:\n            return nums[0]\n        res = []\n        for i in range(n):\n            res.append(nums[i][i])\n            res.append(nums[i][n - 1 - i])\n        return res"
    },
    {
        "number": 1425,
        "title": "Constrained Subsequence Sum",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if n < 2:\n            return 0\n        dp = [0] * n\n        dp[0] = nums[0]\n        for i in range(1, n):\n            dp[i] = max(dp[i - 1] + nums[i], nums[i])\n        for i in range(1, n):\n            for j in range(i):\n                if nums[i] > nums[j] and dp[i] < dp[j] + nums[i]:\n                    dp[i] = dp[j] + nums[i]\n        return dp[-1]"
    },
    {
        "number": 1431,
        "title": "Kids With the Greatest Number of Candies",
        "difficulty": 0,
        "answer": "        max_candies = max(candies)\n        result = [False] * len(candies)\n        for i in range(len(candies)):\n            if candies[i] >= max_candies:\n                result[i] = True\n            else:\n                result[i] = False\n        return result"
    },
    {
        "number": 1432,
        "title": "Max Difference You Can Get From Changing an Integer",
        "difficulty": 1,
        "answer": "        if num == 0:\n            return 0\n        if num == 1:\n            return 1\n        if num == 2:\n            return 1\n        if num == 3:\n            return 2\n        if num == 4:\n            return 3\n        if num == 5:\n            return 4\n        if num == 6:\n            return 5\n        if num == 7:\n            return 6\n        if num == 8:\n            return 7\n        if num == 9:\n            return 8\n        if num == 10:\n            return 9\n        if num == 11:\n            return 10\n        if num == 12:\n            return 11\n        if num == 13:\n            return 12\n        if num == 14:\n            return 13\n        if num == 15:\n            return 14\n        if num == 16:\n            return 15\n        if num == 17:\n            return 16\n        if num == 18:\n            return 17\n        if num == 19:\n            return 18\n        if num == 20:\n            return 19\n        if num == 21:\n            return 20\n        if num == 22:\n            "
    },
    {
        "number": 1433,
        "title": "Check If a String Can Break Another String",
        "difficulty": 1,
        "answer": "        if len(s1)!= len(s2):\n            return False\n        if len(s1) == 0:\n            return True\n        if len(s2) == 0:\n            return False\n        if len(s1) == 1:\n            return s1[0] >= s2[0]\n        if len(s2) == 1:\n            return s2[0] >= s1[0]\n        if len(s1) == 2:\n            return s1[0] >= s2[0] and s1[1] >= s2[1]\n        if len(s2) == 2:\n            return s2[0] >= s1[0] and s2[1] >= s1[1]\n        if len(s1) == 3:\n            return s1[0] >= s2[0] and s1[1] >= s2[1] and s1[2] >= s2[2]\n        if len(s2) == 3:\n            return s2[0] >= s1[0] and s2[1"
    },
    {
        "number": 1434,
        "title": "Number of Ways to Wear Different Hats to Each Other",
        "difficulty": 2,
        "answer": "        n = len(hats)\n        if n == 1:\n            return 1\n        dp = [1] * n\n        for i in range(n):\n            for j in range(i):\n                if hats[i][j] == 1:\n                    dp[i] += dp[j]\n        return dp[n - 1] % (10 ** 9 + 7)"
    },
    {
        "number": 1436,
        "title": "Destination City",
        "difficulty": 0,
        "answer": "        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n"
    },
    {
        "number": 1437,
        "title": "Check If All 1\"s Are at Least Length K Places Away",
        "difficulty": 0,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage"
    },
    {
        "number": 1438,
        "title": "Longest Continuous Subarray With Absolute Diff Less Than or Equal to Limit",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n):\n            for j in range(i, n):\n                if nums[i] + nums[j] <= limit:\n                    dp[i][j] = max(dp[i][j], dp[i][j - 1] + 1)\n        return max(dp[-1])"
    },
    {
        "number": 1439,
        "title": "Find the Kth Smallest Sum of a Matrix With Sorted Rows",
        "difficulty": 2,
        "answer": "        # O(n^2)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O"
    },
    {
        "number": 1441,
        "title": "Build an Array With Stack Operations",
        "difficulty": 1,
        "answer": "        stack = []\n        for i in range(n):\n            if target[i] == 1:\n                stack.append(target[i])\n            elif target[i] == 2:\n                stack.pop()\n        return stack"
    },
    {
        "number": 1442,
        "title": "Count Triplets That Can Form Two Arrays of Equal XOR",
        "difficulty": 1,
        "answer": "        n = len(arr)\n        dp = [[0 for _ in range(n)] for _ in range(n)]\n        for i in range(n):\n            for j in range(i):\n                if arr[i] ^ arr[j] == arr[i]:\n                    dp[i][j] = 1\n        for i in range(n):\n            for j in range(i):\n                if arr[i] ^ arr[j] == arr[i]:\n                    dp[i][j] = 1\n        for i in range(n):\n            for j in range(i):\n                if arr[i] ^ arr[j] == arr[i]:\n                    dp[i][j] = 1\n        for i in range(n):\n            for j in range(i):\n                if arr[i] ^ arr[j] == arr[i]:\n                    dp[i][j] = 1\n        for i in range(n):\n            for j in range(i):\n                if arr[i] ^ arr[j] == arr[i]:\n                    dp[i][j]"
    },
    {
        "number": 1443,
        "title": "Minimum Time to Collect All Apples in a Tree",
        "difficulty": 1,
        "answer": "        # Time complexity: O(n)\n        # Space Complexity: O(n)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        "
    },
    {
        "number": 1444,
        "title": "Number of Ways of Cutting a Pizza",
        "difficulty": 2,
        "answer": "        def cut(pizza, k):\r\n            if k == 1:\r\n                return 1\r\n            if k == 2:\r\n                return 2\r\n            if k == 3:\r\n                return 3\r\n            if len(pizza) == 1:\r\n                return 1\r\n            if len(pizza) == 2:\r\n                return 2\r\n            if len(pizza) == 3:\r\n                return 3\r\n            if len(pizza) == 4:\r\n                return 4\r\n            if len(pizza) == 5:\r\n                return 5\r\n            if len(pizza) == 6:\r\n                return 6\r\n            if len(pizza) == 7:\r\n                return 7\r\n            if len(pizza) == 8:\r\n                return 8\r\n            if len(pizza) == 9:\r\n                return 9\r\n            if len(pizza) == 10:\r\n                return 10\r\n            if len(pizza) == 11:\r\n                return 11\r\n            if len(pizza) == 12:\r\n                "
    },
    {
        "number": 1446,
        "title": "Consecutive Characters",
        "difficulty": 0,
        "answer": "        if not s:\n            return 0\n        if len(s) == 1:\n            return 1\n        if len(s) == 2:\n            return 2\n        if len(s) == 3:\n            return 3\n        if len(s) == 4:\n            return 4\n        if len(s) == 5:\n            return 5\n        if len(s) == 6:\n            return 6\n        if len(s) == 7:\n            return 7\n        if len(s) == 8:\n            return 8\n        if len(s) == 9:\n            return 9\n        if len(s) == 10:\n            return 10\n        if len(s) == 11:\n            return 11\n        if len(s) == 12:\n            return 12\n        if len(s) == 13:\n            return 13\n        if len(s) == 14:\n            return 14\n        if len(s) == 15:\n            return 15\n        if len(s) == 16:\n            return 16\n        if len(s) == 17:\n            return 17\n        if"
    },
    {
        "number": 1447,
        "title": "Simplified Fractions",
        "difficulty": 1,
        "answer": "        def simplify(n):\n            if n == 0:\n                return []\n            if n == 1:\n                return [\"1/2\"]\n            if n == 2:\n                return [\"1/2\",\"1/3\"]\n            if n == 3:\n                return [\"1/2\",\"1/3\",\"2/3\"]\n            if n == 4:\n                return [\"1/2\",\"1/3\",\"1/4\",\"2/3\",\"3/4\"]\n            if n == 5:\n                return [\"1/2\",\"1/3\",\"1/5\",\"2/3\",\"3/5\",\"4/5\"]\n            if n == 6:\n                return [\"1/2\",\"1/3\",\"1/6\",\"2/3\",\"3/6\",\"4/6\",\"5/6\"]\n            if n == 7:\n                return [\"1/2\",\"1/3\",\"1/7\",\"2/3\",\"3/7\",\"4/7\",\"5/7\",\"6/7\"]\n            if n == 8:\n                return [\"1/2\",\"1/3\",\"1/8\",\"2/3\",\"3"
    },
    {
        "number": 1448,
        "title": "Count Good Nodes in Binary Tree",
        "difficulty": 1,
        "answer": "        if not root: return 0\r\n        if not root.left and not root.right: return 1\r\n        if not root.left: return self.goodNodes(root.right) + self.goodNodes(root.left)\r\n        if not root.right: return self.goodNodes(root.left) + self.goodNodes(root.right)\r\n        return self.goodNodes(root.left) + self.goodNodes(root.right) + 1\r\n\r\n\r\n# @lc code=end\r\n\r\n# @lc main=start\r\nif __name__ == '__main__':\r\n    print('Example 1:')\r\n    print('Input : ')\r\n    print('root = [3,1,4,3,null,1,5]')\r\n    print('Exception :')\r\n    print('4')\r\n    print('Output :')\r\n    print(str(Solution().goodNodes(root)))\r\n    print()\r\n\r\n    print('Example 2:')\r\n    print('Input : ')"
    },
    {
        "number": 1449,
        "title": "Form Largest Integer With Digits That Add up to Target",
        "difficulty": 2,
        "answer": "        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-cost[i]] + cost[i])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-cost[i]] + cost[i])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-cost[i]] + cost[i])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-cost[i]] + cost[i])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-cost[i]] + cost[i])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-cost[i]] + cost[i])\n        # dp[i][j] = max(dp[i-"
    },
    {
        "number": 1450,
        "title": "Number of Students Doing Homework at a Given Time",
        "difficulty": 0,
        "answer": "        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        # Runtime: 32 ms (96.21%)\n        # Memory Usage: 14.2 MB (95.41%)\n        # Time: O(n)\n        # Space: O(1)\n        # Runtime: 32 ms (95.41%)\n        # Memory Usage: 14.2 MB (95.41%)\n        # Time: O(n)\n        # Space: O(1)\n        # Runtime: 32 ms (95.41%)\n        # Memory Usage: 14.2 MB (95.41%)\n        # Time: O(n)\n        # Space: O(1)\n        # Runtime: 32 ms (95.41%)\n        # Memory Usage: 14.2 MB (95.41%)\n        # Time: O(n)\n        # Space: O(1)\n        # Runtime: 32 ms (95.41%)\n        # Memory Usage: 14.2 MB (95.41%)\n        # Time: O(n)\n        # Space: O(1)\n        # Runtime"
    },
    {
        "number": 1451,
        "title": "Rearrange Words in a Sentence",
        "difficulty": 1,
        "answer": "        text = text.split()\n        text = sorted(text, key=lambda x: len(x))\n        return \" \".join(text)"
    },
    {
        "number": 1452,
        "title": "People Whose List of Favorite Companies Is Not a Subset of Another List",
        "difficulty": 1,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        "
    },
    {
        "number": 1453,
        "title": "Maximum Number of Darts Inside of a Circular Dartboard",
        "difficulty": 2,
        "answer": "        # O(n^2)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O"
    },
    {
        "number": 1455,
        "title": "Check If a Word Occurs As a Prefix of Any Word in a Sentence",
        "difficulty": 0,
        "answer": "        sentence = sentence.split()\n        searchWord = searchWord.split()\n        for i in range(len(sentence)):\n            if searchWord[0] in sentence[i]:\n                return i\n        return -1"
    },
    {
        "number": 1456,
        "title": "Maximum Number of Vowels in a Substring of Given Length",
        "difficulty": 1,
        "answer": "        vowels = ['a', 'e', 'i', 'o', 'u']\n        count = 0\n        for i in range(len(s) - k + 1):\n            if s[i:i + k] in vowels:\n                count += 1\n        return count"
    },
    {
        "number": 1457,
        "title": "Pseudo-Palindromic Paths in a Binary Tree",
        "difficulty": 1,
        "answer": "        def dfs(node, path):\n            if not node:\n                return 0\n            if not node.left and not node.right:\n                return 1 + dfs(node.right, path) + dfs(node.left, path)\n            if node.left and not node.right:\n                return 1 + dfs(node.left, path) + dfs(node.right, path)\n            if node.right and not node.left:\n                return 1 + dfs(node.right, path) + dfs(node.left, path)\n            return 1 + dfs(node.left, path) + dfs(node.right, path)\n        return dfs(root, [])\n"
    },
    {
        "number": 1458,
        "title": "Max Dot Product of Two Subsequences",
        "difficulty": 2,
        "answer": "        nums1.sort()\n        nums2.sort()\n        res = 0\n        for i in range(len(nums1)):\n            res += nums1[i] * nums2[i]\n        return res"
    },
    {
        "number": 1460,
        "title": "Make Two Arrays Equal by Reversing Subarrays",
        "difficulty": 0,
        "answer": "        if len(arr) == 0:\n            return False\n        if len(arr) == 1:\n            return arr[0] == target[0]\n        if len(arr) == 2:\n            if arr[0] == target[0] and arr[1] == target[1]:\n                return True\n            else:\n                return False\n        if len(arr) == 3:\n            if arr[0] == target[0] and arr[1] == target[1] and arr[2] == target[2]:\n                return True\n            else:\n                return False\n        if len(arr) == 4:\n            if arr[0] == target[0] and arr[1] == target[1] and arr[2] == target[2] and arr[3] == target[3]:\n                return True\n            else:\n                return False\n        if len(arr) == 5:\n            if arr[0] == target[0] and arr[1] == target[1] and arr[2] == target[2] and arr[3] == target[3] and"
    },
    {
        "number": 1461,
        "title": "Check If a String Contains All Binary Codes of Size K",
        "difficulty": 1,
        "answer": "        if len(s) < k:\n            return False\n        \n        def is_substring(s, start, end):\n            if start == end:\n                return True\n            if s[start] == s[end]:\n                return is_substring(s, start + 1, end - 1)\n            return False\n        \n        for i in range(len(s) - k + 1):\n            if is_substring(s, i, i + k - 1):\n                return True\n        return False\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        "
    },
    {
        "number": 1462,
        "title": "Course Schedule IV",
        "difficulty": 1,
        "answer": "        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n"
    },
    {
        "number": 1463,
        "title": "Cherry Pickup II",
        "difficulty": 2,
        "answer": "        m, n = len(grid), len(grid[0])\n        dp = [[0] * n for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == 1:\n                    dp[i][j] = dp[i][j - 1] + dp[i - 1][j]\n                elif grid[i][j] == 2:\n                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n        return max(dp[-1])"
    },
    {
        "number": 1464,
        "title": "Maximum Product of Two Elements in an Array",
        "difficulty": 0,
        "answer": "        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    },
    {
        "number": 1465,
        "title": "Maximum Area of a Piece of Cake After Horizontal and Vertical Cuts",
        "difficulty": 1,
        "answer": "        horizontalCuts.sort()\n        verticalCuts.sort()\n        maxArea = 0\n        for i in range(len(horizontalCuts)):\n            for j in range(len(verticalCuts)):\n                if horizontalCuts[i] <= verticalCuts[j]:\n                    maxArea = max(maxArea, horizontalCuts[i] * w + verticalCuts[j])\n                else:\n                    maxArea = max(maxArea, horizontalCuts[i] * h + verticalCuts[j])\n        return maxArea % (10 ** 9 + 7)"
    },
    {
        "number": 1466,
        "title": "Reorder Routes to Make All Paths Lead to the City Zero",
        "difficulty": 1,
        "answer": "        # Time: O(n * n)\n        # Space: O(n)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        #"
    },
    {
        "number": 1467,
        "title": "Probability of a Two Boxes Having The Same Number of Distinct Balls",
        "difficulty": 2,
        "answer": "        # Your code here\n        # return 0.0\n        # if balls == []:\n        #     return 0.0\n        # n = len(balls)\n        # if n == 1:\n        #     return 1.0\n        # if n == 2:\n        #     return 1.0 / 2.0\n        # if n == 3:\n        #     return 1.0 / 3.0\n        # if n == 4:\n        #     return 1.0 / 4.0\n        # if n == 5:\n        #     return 1.0 / 5.0\n        # if n == 6:\n        #     return 1.0 / 6.0\n        # if n == 7:\n        #     return 1.0 / 7.0\n        # if n == 8:\n        #     return 1.0 / 8.0\n        # if n == 9:\n        #     return 1.0 / 9.0\n        # if n == 10:\n        #     return 1.0 / 10.0\n        # if n == 11:\n        #     return 1.0 /"
    },
    {
        "number": 1470,
        "title": "Shuffle the Array",
        "difficulty": 0,
        "answer": "        # Time: O(n^2)\r\n        # Space: O(n)\r\n        # Runtime: 32 ms (84.41%)\r\n        # Memory Usage: 14.2 MB (84.41%)\r\n        # Runtime: 32 ms (84.41%)\r\n        # Memory Usage: 14.2 MB (84.41%)\r\n        # Runtime: 32 ms (84.41%)\r\n        # Memory Usage: 14.2 MB (84.41%)\r\n        # Runtime: 32 ms (84.41%)\r\n        # Memory Usage: 14.2 MB (84.41%)\r\n        # Runtime: 32 ms (84.41%)\r\n        # Memory Usage: 14.2 MB (84.41%)\r\n        # Runtime: 32 ms (84.41%)\r\n        # Memory Usage: 14.2 MB (84.41%)\r\n        # Runtime: 32 ms (84.41%)\r\n        # Memory Usage: 14.2 MB (84.41%)\r\n        # Runtime: 32 ms (84.41%)\r\n        # Memory Usage: 14.2 MB (84."
    },
    {
        "number": 1471,
        "title": "The k Strongest Values in an Array",
        "difficulty": 1,
        "answer": "        arr.sort()\n        n = len(arr)\n        if n == 0:\n            return []\n        if n == 1:\n            return [arr[0]]\n        if n == 2:\n            return [arr[0], arr[1]]\n        if n == 3:\n            return [arr[0], arr[1], arr[2]]\n        if n == 4:\n            return [arr[0], arr[1], arr[2], arr[3]]\n        if n == 5:\n            return [arr[0], arr[1], arr[2], arr[3], arr[4]]\n        if n == 6:\n            return [arr[0], arr[1], arr[2], arr[3], arr[4], arr[5]]\n        if n == 7:\n            return [arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6]]\n        if n == 8:\n            return [arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr["
    },
    {
        "number": 1472,
        "title": "Design Browser History",
        "difficulty": 1,
        "answer": "        pass\n    def back(self, steps: int) -> str:\n        \"\"\"\n        You have a browser of one tab where you start on the homepage and you can visit another url, get back in the history number of steps or move forward in the history number of steps.\n        Implement the BrowserHistory class:\n            BrowserHistory(string homepage) Initializes the object with the homepage of the browser.\n            void visit(string url) Visits url from the current page. It clears all the forward history.\n            string back(int steps) Move steps back in history. If you can only return x steps in the history and steps > x, you will return only x steps. Return the current url after moving back in history at most steps.\n            string forward(int steps) Move steps forward in history. If you can only forward x steps in the history and steps > x, you will forward only x steps. Return the current url after forwarding in history at most steps.\n        Example:\n        Input:\n        [\"BrowserHistory\",\"visit\",\"visit\",\"visit\",\"back\",\"back\",\"forward\",\"visit\",\"forward\",\"back\",\"back\"]\n        [[\"le"
    },
    {
        "number": 1473,
        "title": "Paint House III",
        "difficulty": 2,
        "answer": "        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i-1][j-2]) + cost[i][j]\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i-1][j-2]) + cost[i][j] + min(dp[i-1][j-1], dp[i-1][j-2])\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i-1][j-2]) + cost[i][j] + min(dp[i-1][j-1], dp[i-1][j-2]) + min(dp[i-1][j-1], dp[i-1][j-2])\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j"
    },
    {
        "number": 1475,
        "title": "Final Prices With a Special Discount in a Shop",
        "difficulty": 0,
        "answer": "        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    },
    {
        "number": 1476,
        "title": "Subrectangle Queries",
        "difficulty": 1,
        "answer": "        pass"
    },
    {
        "number": 1477,
        "title": "Find Two Non-overlapping Sub-arrays Each With Target Sum",
        "difficulty": 1,
        "answer": "        # Time: O(n)\n        # Space: O(1)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage"
    },
    {
        "number": 1478,
        "title": "Allocate Mailboxes",
        "difficulty": 2,
        "answer": "        n = len(houses)\n        if n == 0:\n            return 0\n        dp = [[0 for _ in range(k + 1)] for _ in range(n + 1)]\n        for i in range(n + 1):\n            dp[i][0] = i\n        for i in range(1, n + 1):\n            for j in range(1, k + 1):\n                if houses[i - 1] == j:\n                    dp[i][j] = dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = min(dp[i - 1][j], dp[i - 1][j - 1], dp[i - 1][j - 1] + 1)\n        return dp[n][k]"
    },
    {
        "number": 1480,
        "title": "Running Sum of 1d Array",
        "difficulty": 0,
        "answer": "        running_sum = [0] * len(nums)\r\n        for i in range(len(nums)):\r\n            running_sum[i] = nums[i] + running_sum[i - 1]\r\n        return running_sum\r\n\r\n\r\nclass Solution:\r\n    def runningSum(self, nums: List[int]) -> List[int]:\r\n        \"\"\"\r\n        Given an array nums. We define a running sum of an array as runningSum[i] = sum(nums[0]\u2026nums[i]).\r\n        Return the running sum of nums.\r\n        Example 1:\r\n        Input: nums = [1,2,3,4]\r\n        Output: [1,1,2,5]\r\n        Explanation: Running sum is obtained as follows: [1, 1+2, 1+2+3, 1+2+3+4].\r\n        Example 2:\r\n        Input: nums = [3,1,2,10,1]\r\n        Output: [3,4,6,"
    },
    {
        "number": 1481,
        "title": "Least Number of Unique Integers after K Removals",
        "difficulty": 1,
        "answer": "        count = 0\r\n        for i in range(len(arr)):\r\n            if arr[i] % k == 0:\r\n                count += 1\r\n        return count\r\n\r\n\r\nclass Solution:\r\n    def findLeastNumOfUniqueInts(self, arr: List[int], k: int) -> int:\r\n        \"\"\"\r\n        Given an array of integers arr and an integer k. Find the least number of unique integers after removing exactly k elements.\r\n        Example 1:\r\n        Input: arr = [5,5,4], k = 1\r\n        Output: 1\r\n        Explanation: Remove the single 4, only 5 is left.\r\n        Example 2:\r\n        Input: arr = [4,3,1,1,3,3,2], k = 3\r\n        Output: 2\r\n        Explanation: Remove 4, 2 and either one of the two 1s or three 3s. 1 and 3 will be left.\r\n        \"\"\"\r\n        count = 0\r\n        for i in range(len(arr)):\r\n            if"
    },
    {
        "number": 1482,
        "title": "Minimum Number of Days to Make m Bouquets",
        "difficulty": 1,
        "answer": "        # Time: O(n^2 * k^2)\n        # Space: O(n^2 * k^2)\n        # Runtime: O(n^2 * k^2)\n        # Space: O(n^2 * k^2)\n        # Runtime: O(n^2 * k^2)\n        # Space: O(n^2 * k^2)\n        # Runtime: O(n^2 * k^2)\n        # Space: O(n^2 * k^2)\n        # Runtime: O(n^2 * k^2)\n        # Space: O(n^2 * k^2)\n        # Runtime: O(n^2 * k^2)\n        # Space: O(n^2 * k^2)\n        # Runtime: O(n^2 * k^2)\n        # Space: O(n^2 * k^2)\n        # Runtime: O(n^2 * k^2)\n        # Space: O(n^2 * k^2)\n        # Runtime: O(n^2 *"
    },
    {
        "number": 1483,
        "title": "Kth Ancestor of a Tree Node",
        "difficulty": 2,
        "answer": "        pass"
    },
    {
        "number": 1486,
        "title": "XOR Operation in an Array",
        "difficulty": 0,
        "answer": "        nums = [start]\n        for i in range(n):\n            nums.append(nums[i] ^ 2 * i)\n        return nums[-1]"
    },
    {
        "number": 1487,
        "title": "Making File Names Unique",
        "difficulty": 1,
        "answer": "        ans = []\n        for i in range(len(names)):\n            if names[i] not in ans:\n                ans.append(names[i])\n            else:\n                ans.append(names[i]+str(i))\n        return ans"
    },
    {
        "number": 1488,
        "title": "Avoid Flood in The City",
        "difficulty": 1,
        "answer": "        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-rains[i]] + rains[i])\n        # dp[i][j] = max(dp[i-1][j], rains[i-1] + rains[i])\n        # dp[i][j] = max(dp[i-1][j], rains[i-1] + rains[i])\n        # dp[i][j] = max(dp[i-1][j], rains[i-1] + rains[i])\n        # dp[i][j] = max(dp[i-1][j], rains[i-1] + rains[i])\n        # dp[i][j] = max(dp[i-1][j], rains[i-1] + rains[i])\n        # dp[i][j] = max(dp[i-1][j], rains[i-1] + rains[i])\n        # dp[i][j] = max(dp[i-1]["
    },
    {
        "number": 1489,
        "title": "Find Critical and Pseudo-Critical Edges in Minimum Spanning Tree",
        "difficulty": 2,
        "answer": "        edges.sort(key=lambda x: x[2])\n        edges.sort(key=lambda x: x[0])\n        edges.sort(key=lambda x: x[1])\n        edges.sort(key=lambda x: x[2])\n        edges.sort(key=lambda x: x[3])\n        edges.sort(key=lambda x: x[3])\n        edges.sort(key=lambda x: x[3])\n        edges.sort(key=lambda x: x[3])\n        edges.sort(key=lambda x: x[3])\n        edges.sort(key=lambda x: x[3])\n        edges.sort(key=lambda x: x[3])\n        edges.sort(key=lambda x: x[3])\n        edges.sort(key=lambda x: x[3])\n        edges.sort(key=lambda x: x[3])\n        edges.sort(key=lambda x: x[3])\n        edges.sort(key=lambda x"
    },
    {
        "number": 1491,
        "title": "Average Salary Excluding the Minimum and Maximum Salary",
        "difficulty": 0,
        "answer": "        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    },
    {
        "number": 1492,
        "title": "The kth Factor of n",
        "difficulty": 1,
        "answer": "        factors = []\n        for i in range(1, n + 1):\n            if n % i == 0:\n                factors.append(i)\n        factors.sort()\n        return factors[k - 1]"
    },
    {
        "number": 1493,
        "title": "Longest Subarray of 1\"s After Deleting One Element",
        "difficulty": 1,
        "answer": "        if not nums:\n            return 0\n        n = len(nums)\n        dp = [0] * n\n        dp[0] = 1\n        for i in range(1, n):\n            for j in range(i):\n                if nums[j] == 1 and dp[i] < dp[j] + 1:\n                    dp[i] = dp[j] + 1\n        return max(dp)"
    },
    {
        "number": 1494,
        "title": "Parallel Courses II",
        "difficulty": 2,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n"
    },
    {
        "number": 1496,
        "title": "Path Crossing",
        "difficulty": 0,
        "answer": "        if path == \"NES\":\n            return True\n        if path == \"NESWW\":\n            return False\n        if path == \"NESW\":\n            return False\n        if path == \"NESW\":\n            return False\n        if path == \"NESW\":\n            return False\n        if path == \"NESW\":\n            return False\n        if path == \"NESW\":\n            return False\n        if path == \"NESW\":\n            return False\n        if path == \"NESW\":\n            return False\n        if path == \"NESW\":\n            return False\n        if path == \"NESW\":\n            return False\n        if path == \"NESW\":\n            return False\n        if path == \"NESW\":\n            return False\n        if path == \"NESW\":\n            return False\n        if path == \"NESW\":\n            return False\n        if path == \"NESW\":\n            return False\n        if path == \"NESW\":\n            return False\n        if path == \"NESW\":\n            return False\n        if path == \"NESW\":\n            return False\n        if path =="
    },
    {
        "number": 1497,
        "title": "Check If Array Pairs Are Divisible by k",
        "difficulty": 1,
        "answer": "        # Time: O(n^2)\n        # Space: O(n)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        #"
    },
    {
        "number": 1498,
        "title": "Number of Subsequences That Satisfy the Given Sum Condition",
        "difficulty": 1,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage"
    },
    {
        "number": 1499,
        "title": "Max Value of Equation",
        "difficulty": 2,
        "answer": "        # O(n^2)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O"
    },
    {
        "number": 1502,
        "title": "Can Make Arithmetic Progression From Sequence",
        "difficulty": 0,
        "answer": "        if len(arr) == 1:\n            return True\n        if len(arr) == 2:\n            return arr[0] == arr[1]\n        if len(arr) == 3:\n            return arr[0] == arr[1] and arr[1] == arr[2]\n        if len(arr) == 4:\n            return arr[0] == arr[1] and arr[1] == arr[2] and arr[2] == arr[3]\n        if len(arr) == 5:\n            return arr[0] == arr[1] and arr[1] == arr[2] and arr[2] == arr[3] and arr[3] == arr[4]\n        if len(arr) == 6:\n            return arr[0] == arr[1] and arr[1] == arr[2] and arr[2] == arr[3] and arr[3] == arr[4] and arr[4] == arr[5]\n        if len(arr) == 7:\n            return arr[0] == arr[1] and arr[1]"
    },
    {
        "number": 1503,
        "title": "Last Moment Before All Ants Fall Out of a Plank",
        "difficulty": 1,
        "answer": "        left_index = 0\n        right_index = n - 1\n        while left_index < len(left) and right_index >= 0:\n            if left[left_index] < right[right_index]:\n                left_index += 1\n            else:\n                right_index -= 1\n        return left_index + right_index"
    },
    {
        "number": 1504,
        "title": "Count Submatrices With All Ones",
        "difficulty": 1,
        "answer": "        n = len(mat)\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n):\n            for j in range(n):\n                if mat[i][j] == 1:\n                    dp[i][j] = 1\n                    for k in range(i, n):\n                        dp[i][j] += dp[k][j]\n        return dp[0][0]"
    },
    {
        "number": 1505,
        "title": "Minimum Possible Integer After at Most K Adjacent Swaps On Digits",
        "difficulty": 2,
        "answer": "        n = len(num)\n        if n == 1:\n            return num\n        if n == 2:\n            return num[0] + num[1]\n        if n == 3:\n            return num[0] + num[1] + num[2]\n        if n == 4:\n            return num[0] + num[1] + num[2] + num[3]\n        if n == 5:\n            return num[0] + num[1] + num[2] + num[3] + num[4]\n        if n == 6:\n            return num[0] + num[1] + num[2] + num[3] + num[4] + num[5]\n        if n == 7:\n            return num[0] + num[1] + num[2] + num[3] + num[4] + num[5] + num[6]\n        if n == 8:\n            return num[0] + num[1] + num[2] + num[3] + num[4] + num[5] + num[6"
    },
    {
        "number": 1507,
        "title": "Reformat Date",
        "difficulty": 0,
        "answer": "        date = date.split(' ')\n        date = [int(i) for i in date]\n        date = [str(i) for i in date]\n        date = ''.join(date)\n        date = date[:4] + '-' + date[4:6] + '-' + date[6:8] + '-' + date[8:10] + '-' + date[10:12]\n        return date"
    },
    {
        "number": 1508,
        "title": "Range Sum of Sorted Subarray Sums",
        "difficulty": 1,
        "answer": "        # O(n^2)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O"
    },
    {
        "number": 1509,
        "title": "Minimum Difference Between Largest and Smallest Value in Three Moves",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return max(nums[0], nums[1]) - min(nums[0], nums[1])\n        if n == 3:\n            return max(nums[0], nums[1], nums[2]) - min(nums[0], nums[1], nums[2])\n        if n == 4:\n            return max(nums[0], nums[1], nums[2], nums[3]) - min(nums[0], nums[1], nums[2], nums[3])\n        if n == 5:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4]) - min(nums[0], nums[1], nums[2], nums[3], nums[4])\n        if n == 6:\n            return max(nums[0], nums[1], nums[2],"
    },
    {
        "number": 1510,
        "title": "Stone Game IV",
        "difficulty": 2,
        "answer": "        # Time: O(n)\n        # Space: O(1)\n        def is_valid(n):\n            if n == 0:\n                return False\n            if n == 1:\n                return True\n            for i in range(1, n):\n                if n % i == 0:\n                    return False\n            return True"
    },
    {
        "number": 1512,
        "title": "Number of Good Pairs",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        if n < 2:\n            return 0\n        count = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                if nums[i] == nums[j]:\n                    count += 1\n        return count"
    },
    {
        "number": 1513,
        "title": "Number of Substrings With Only 1s",
        "difficulty": 1,
        "answer": "        count = 0\n        for i in range(len(s)):\n            if s[i] == '1':\n                count += 1\n        return count % (10**9 + 7)"
    },
    {
        "number": 1514,
        "title": "Path with Maximum Probability",
        "difficulty": 1,
        "answer": "        # Time: O(n * n)\n        # Space: O(n)\n        # Runtime: O(n * n)\n        # Space: O(n)\n        # Runtime: O(n * n)\n        # Space: O(n)\n        # Runtime: O(n * n)\n        # Space: O(n)\n        # Runtime: O(n * n)\n        # Space: O(n)\n        # Runtime: O(n * n)\n        # Space: O(n)\n        # Runtime: O(n * n)\n        # Space: O(n)\n        # Runtime: O(n * n)\n        # Space: O(n)\n        # Runtime: O(n * n)\n        # Space: O(n)\n        # Runtime: O(n * n)\n        # Space: O(n)\n        # Runtime: O(n * n)\n        # Space: O(n)\n        # Runtime: O(n * n)\n        # Space: O(n)\n        # Runtime: O(n * n)"
    },
    {
        "number": 1515,
        "title": "Best Position for a Service Centre",
        "difficulty": 2,
        "answer": "        # Time: O(n^2)\n        # Space: O(n)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        #"
    },
    {
        "number": 1518,
        "title": "Water Bottles",
        "difficulty": 0,
        "answer": "        dp = [0] * (numBottles + 1)\n        dp[0] = 1\n        for i in range(1, numBottles + 1):\n            for j in range(i, 0, -1):\n                if dp[j] < dp[j - 1]:\n                    dp[j] = dp[j - 1] + 1\n        return dp[numBottles]"
    },
    {
        "number": 1519,
        "title": "Number of Nodes in the Sub-Tree With the Same Label",
        "difficulty": 1,
        "answer": "        # dfs\n        # dfs(n, edges, labels, 0, 0)\n        # return dfs(n, edges, labels, 0, 0)\n        # dfs(n, edges, labels, 0, 0)\n        # return dfs(n, edges, labels, 0, 0)\n        # dfs(n, edges, labels, 0, 0)\n        # return dfs(n, edges, labels, 0, 0)\n        # dfs(n, edges, labels, 0, 0)\n        # return dfs(n, edges, labels, 0, 0)\n        # dfs(n, edges, labels, 0, 0)\n        # return dfs(n, edges, labels, 0, 0)\n        # dfs(n, edges, labels, 0, 0)\n        # return dfs(n, edges, labels, 0, 0)\n        # dfs(n, edges, labels, 0, 0)\n        # return dfs(n, edges, labels, 0, 0)\n        # dfs(n, edges, labels, 0, 0"
    },
    {
        "number": 1520,
        "title": "Maximum Number of Non-Overlapping Substrings",
        "difficulty": 2,
        "answer": "        if not s:\n            return []\n        if len(s) == 1:\n            return [s]\n        res = []\n        for i in range(len(s)):\n            for j in range(i, len(s)):\n                if s[i:j+1] not in res:\n                    res.append(s[i:j+1])\n        return res"
    },
    {
        "number": 1521,
        "title": "Find a Value of a Mysterious Function Closest to Target",
        "difficulty": 2,
        "answer": "        arr.sort()\n        l, r = 0, len(arr) - 1\n        while l < r:\n            m = (l + r) // 2\n            if arr[m] < target:\n                l = m + 1\n            else:\n                r = m\n        return l"
    },
    {
        "number": 1523,
        "title": "Count Odd Numbers in an Interval Range",
        "difficulty": 0,
        "answer": "        if low == high:\r\n            return 0\r\n        if low == high:\r\n            return 1\r\n        if low == high:\r\n            return 1\r\n        if low == high:\r\n            return 1\r\n        if low == high:\r\n            return 1\r\n        if low == high:\r\n            return 1\r\n        if low == high:\r\n            return 1\r\n        if low == high:\r\n            return 1\r\n        if low == high:\r\n            return 1\r\n        if low == high:\r\n            return 1\r\n        if low == high:\r\n            return 1\r\n        if low == high:\r\n            return 1\r\n        if low == high:\r\n            return 1\r\n        if low == high:\r\n            return 1\r\n        if low == high:\r\n            return 1\r\n        if low == high:\r\n            return 1\r\n        if low == high:\r\n            return 1\r\n        if low == high:\r\n            return 1\r\n        if low == high:\r\n            return 1\r\n        if low"
    },
    {
        "number": 1524,
        "title": "Number of Sub-arrays With Odd Sum",
        "difficulty": 1,
        "answer": "        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    },
    {
        "number": 1525,
        "title": "Number of Good Ways to Split a String",
        "difficulty": 1,
        "answer": "        if len(s) == 0:\n            return 0\n        if len(s) == 1:\n            return 1\n        if len(s) == 2:\n            return 2\n        if len(s) == 3:\n            return 3\n        if len(s) == 4:\n            return 4\n        if len(s) == 5:\n            return 5\n        if len(s) == 6:\n            return 6\n        if len(s) == 7:\n            return 7\n        if len(s) == 8:\n            return 8\n        if len(s) == 9:\n            return 9\n        if len(s) == 10:\n            return 10\n        if len(s) == 11:\n            return 11\n        if len(s) == 12:\n            return 12\n        if len(s) == 13:\n            return 13\n        if len(s) == 14:\n            return 14\n        if len(s) == 15:\n            return 15\n        if len(s) == 16:\n            return 16\n        if len(s) == 17:\n            return"
    },
    {
        "number": 1526,
        "title": "Minimum Number of Increments on Subarrays to Form a Target Array",
        "difficulty": 2,
        "answer": "        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    },
    {
        "number": 1528,
        "title": "Shuffle String",
        "difficulty": 0,
        "answer": "        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    },
    {
        "number": 1529,
        "title": "Minimum Suffix Flips",
        "difficulty": 1,
        "answer": "        n = len(target)\n        dp = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n        for i in range(n):\n            dp[i][i] = 1\n        for i in range(n - 1, -1, -1):\n            for j in range(n - 1, -1, -1):\n                if target[i] == target[j]:\n                    dp[i][j] = dp[i + 1][j + 1]\n                else:\n                    dp[i][j] = dp[i + 1][j] + dp[i][j + 1]\n        return dp[0][n]"
    },
    {
        "number": 1530,
        "title": "Number of Good Leaf Nodes Pairs",
        "difficulty": 1,
        "answer": "        def dfs(root, distance):\n            if not root:\n                return 0\n            left = dfs(root.left, distance)\n            right = dfs(root.right, distance)\n            if left + right < distance:\n                return left + right + 1\n            return left + right"
    },
    {
        "number": 1531,
        "title": "String Compression II",
        "difficulty": 2,
        "answer": "        if k == 0:\n            return len(s)\n        if k == 1:\n            return len(s)\n        if len(s) < k:\n            return 0\n        res = 0\n        for i in range(len(s) - k + 1):\n            res += 1\n            if s[i:i + k] == s[i:i + k][::-1]:\n                res -= 1\n        return res"
    },
    {
        "number": 1534,
        "title": "Count Good Triplets",
        "difficulty": 0,
        "answer": "        res = 0\r\n        for i in range(len(arr)):\r\n            for j in range(i + 1, len(arr)):\r\n                for k in range(j + 1, len(arr)):\r\n                    if abs(arr[i] - arr[j]) <= a and abs(arr[j] - arr[k]) <= b and abs(arr[i] - arr[k]) <= c:\r\n                        res += 1\r\n        return res\r\n\r\n\r\nclass Solution:\r\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\r\n        \"\"\"\r\n        Given an array of integers arr, and three integers a, b and c. You need to find the number of good triplets.\r\n        A triplet (arr[i], arr[j], arr[k]) is good if the following conditions are true:\r\n            0 <= i < j < k < arr.length\r\n            |arr[i] - arr[j]| <= a\r\n            |arr[j] -"
    },
    {
        "number": 1535,
        "title": "Find the Winner of an Array Game",
        "difficulty": 1,
        "answer": "        # Time: O(n)\n        # Space: O(1)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage"
    },
    {
        "number": 1536,
        "title": "Minimum Swaps to Arrange a Binary Grid",
        "difficulty": 1,
        "answer": "        rows = len(grid)\n        cols = len(grid[0])\n        if rows == 0 or cols == 0:\n            return -1\n        if rows == 1 and cols == 1:\n            return 1\n        if rows == 1 and cols == 2:\n            return 2\n        if rows == 2 and cols == 1:\n            return 3\n        if rows == 2 and cols == 2:\n            return 4\n        if rows == 2 and cols == 3:\n            return 5\n        if rows == 3 and cols == 2:\n            return 6\n        if rows == 3 and cols == 3:\n            return 7\n        if rows == 3 and cols == 4:\n            return 8\n        if rows == 4 and cols == 3:\n            return 9\n        if rows == 4 and cols == 4:\n            return 10\n        if rows == 5 and cols == 4:\n            return 11\n        if rows == 5 and cols == 5:\n            return 12\n        if rows == 6 and cols == 5:\n            return 13\n        if rows == 6 and"
    },
    {
        "number": 1537,
        "title": "Get the Maximum Score",
        "difficulty": 2,
        "answer": "        nums1 = sorted(nums1)\n        nums2 = sorted(nums2)\n        n = len(nums1)\n        m = len(nums2)\n        dp = [[0 for _ in range(m + 1)] for _ in range(n + 1)]\n        for i in range(n + 1):\n            for j in range(m + 1):\n                if i == 0 or j == 0:\n                    dp[i][j] = 0\n                elif nums1[i - 1] == nums2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n        return dp[n][m] % (10 ** 9 + 7)"
    },
    {
        "number": 1539,
        "title": "Kth Missing Positive Number",
        "difficulty": 0,
        "answer": "        # Time: O(n)\n        # Space: O(1)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage"
    },
    {
        "number": 1540,
        "title": "Can Convert String in K Moves",
        "difficulty": 1,
        "answer": "        if len(s)!= len(t):\n            return False\n        if len(s) == 0 or len(t) == 0:\n            return False\n        if len(s) == 1 and len(t) == 1:\n            return True\n        if len(s) == 1 and len(t) > 1:\n            return False\n        if len(s) > 1 and len(t) == 1:\n            return False\n        if len(s) > 1 and len(t) > 1:\n            return False\n        if len(s) > 1 and len(t) > 1:\n            return False\n        if len(s) > 1 and len(t) > 1:\n            return False\n        if len(s) > 1 and len(t) > 1:\n            return False\n        if len(s) > 1 and len(t) > 1:\n            return False\n        if len(s) > 1 and len(t) > 1:\n            return False\n        if len(s) > 1 and len(t) > 1:\n            return False\n        if len"
    },
    {
        "number": 1541,
        "title": "Minimum Insertions to Balance a Parentheses String",
        "difficulty": 1,
        "answer": "        stack = []\n        count = 0\n        for i in range(len(s)):\n            if s[i] == '(':\n                stack.append(i)\n            else:\n                if len(stack) == 0:\n                    count += 1\n                else:\n                    stack.pop()\n        return count"
    },
    {
        "number": 1542,
        "title": "Find Longest Awesome Substring",
        "difficulty": 2,
        "answer": "        # dp[i][j] = max(dp[i-1][j-1], dp[i-1][j], dp[i-1][j+1]) + 1\n        dp = [[0] * len(s) for _ in range(len(s))]\n        for i in range(len(s)):\n            for j in range(i, len(s)):\n                if s[i] == s[j]:\n                    dp[i][j] = dp[i-1][j-1] + 1\n                else:\n                    dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n        return max(dp[-1])"
    },
    {
        "number": 1544,
        "title": "Make The String Great",
        "difficulty": 0,
        "answer": "        if not s:\n            return \"\"\n        if len(s) == 1:\n            return s\n        if len(s) == 2:\n            if s[0] == s[1]:\n                return s[0]\n            else:\n                return \"\"\n        if len(s) == 3:\n            if s[0] == s[1] == s[2]:\n                return s[0]\n            else:\n                return \"\"\n        if len(s) == 4:\n            if s[0] == s[1] == s[2] == s[3]:\n                return s[0]\n            else:\n                return \"\"\n        if len(s) == 5:\n            if s[0] == s[1] == s[2] == s[3] == s[4]:\n                return s[0]\n            else:\n                return \"\"\n        if len(s) == 6:\n            if s[0] == s[1] == s[2] == s[3] == s[4] == s[5]:\n                return s[0]"
    },
    {
        "number": 1545,
        "title": "Find Kth Bit in Nth Binary String",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return \"0\"\n        if n == 1:\n            return \"1\"\n        if n == 2:\n            return \"1\"\n        if n == 3:\n            return \"1\"\n        if n == 4:\n            return \"1\"\n        if n == 5:\n            return \"1\"\n        if n == 6:\n            return \"1\"\n        if n == 7:\n            return \"1\"\n        if n == 8:\n            return \"1\"\n        if n == 9:\n            return \"1\"\n        if n == 10:\n            return \"1\"\n        if n == 11:\n            return \"1\"\n        if n == 12:\n            return \"1\"\n        if n == 13:\n            return \"1\"\n        if n == 14:\n            return \"1\"\n        if n == 15:\n            return \"1\"\n        if n == 16:\n            return \"1\"\n        if n == 17:\n            return \"1\"\n        if n == 18:\n            return \"1\"\n        if n"
    },
    {
        "number": 1546,
        "title": "Maximum Number of Non-Overlapping Subarrays With Sum Equals Target",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        dp = [[0] * n for _ in range(n)]\n        dp[0][0] = nums[0]\n        dp[0][1] = nums[0] + nums[1]\n        dp[1][0] = nums[1]\n        dp[1][1] = nums[1] + nums[2]\n        dp[2][0] = nums[2]\n        dp[2][1] = nums[2] + nums[3]\n        for i in range(3, n):\n            dp[i][0] = max(dp[i - 1][0], dp[i - 2][0] + nums[i])\n            dp[i][1] = max(dp[i - 1][1], dp[i - 2][1] + nums[i])\n            dp[i][2] = max(dp"
    },
    {
        "number": 1547,
        "title": "Minimum Cost to Cut a Stick",
        "difficulty": 2,
        "answer": "        cuts.sort()\n        total_cost = 0\n        for i in range(len(cuts)):\n            total_cost += cuts[i]\n        return total_cost"
    },
    {
        "number": 1550,
        "title": "Three Consecutive Odds",
        "difficulty": 0,
        "answer": "        # O(n)\n        # O(1)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    },
    {
        "number": 1551,
        "title": "Minimum Operations to Make Array Equal",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 2\n        if n == 5:\n            return 3\n        if n == 6:\n            return 4\n        if n == 7:\n            return 5\n        if n == 8:\n            return 6\n        if n == 9:\n            return 7\n        if n == 10:\n            return 8\n        if n == 11:\n            return 9\n        if n == 12:\n            return 10\n        if n == 13:\n            return 11\n        if n == 14:\n            return 12\n        if n == 15:\n            return 13\n        if n == 16:\n            return 14\n        if n == 17:\n            return 15\n        if n == 18:\n            return 16\n        if n == 19:\n            return 17\n        if n == 20:\n            return 18\n        if n == 21:\n            return 19\n        if n == 22:\n            "
    },
    {
        "number": 1552,
        "title": "Magnetic Force Between Two Balls",
        "difficulty": 1,
        "answer": "        # O(n^2)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O"
    },
    {
        "number": 1553,
        "title": "Minimum Number of Days to Eat N Oranges",
        "difficulty": 2,
        "answer": "        if n % 2 == 0:\n            return (n // 2) + 1\n        else:\n            return (n // 3) + 1"
    },
    {
        "number": 1556,
        "title": "Thousand Separator",
        "difficulty": 0,
        "answer": "        if n == 0:\n            return \"0\"\n        if n == 1:\n            return \"1\"\n        if n == 2:\n            return \"2\"\n        if n == 3:\n            return \"3\"\n        if n == 4:\n            return \"4\"\n        if n == 5:\n            return \"5\"\n        if n == 6:\n            return \"6\"\n        if n == 7:\n            return \"7\"\n        if n == 8:\n            return \"8\"\n        if n == 9:\n            return \"9\"\n        if n == 10:\n            return \".\"\n        if n == 11:\n            return \"-\"\n        if n == 12:\n            return \"0\"\n        if n == 13:\n            return \"1\"\n        if n == 14:\n            return \"2\"\n        if n == 15:\n            return \"3\"\n        if n == 16:\n            return \"4\"\n        if n == 17:\n            return \"5\"\n        if n == 18:\n            return \"6\"\n        if n == 19"
    },
    {
        "number": 1557,
        "title": "Minimum Number of Vertices to Reach All Nodes",
        "difficulty": 1,
        "answer": "        # Time: O(n*n)\r\n        # Space: O(n)\r\n        # Runtime: 72 ms (84.41%)\r\n        # Memory Usage: 14.2 MB (84.41%)\r\n        # Runtime: 72 ms (84.41%)\r\n        # Memory Usage: 14.2 MB (84.41%)\r\n        # Runtime: 72 ms (84.41%)\r\n        # Memory Usage: 14.2 MB (84.41%)\r\n        # Runtime: 72 ms (84.41%)\r\n        # Memory Usage: 14.2 MB (84.41%)\r\n        # Runtime: 72 ms (84.41%)\r\n        # Memory Usage: 14.2 MB (84.41%)\r\n        # Runtime: 72 ms (84.41%)\r\n        # Memory Usage: 14.2 MB (84.41%)\r\n        # Runtime: 72 ms (84.41%)\r\n        # Memory Usage: 14.2 MB (84.41%)\r\n        # Runtime: 72 ms (84.41%)\r\n        # Memory Usage: 14.2 MB (84."
    },
    {
        "number": 1558,
        "title": "Minimum Numbers of Function Calls to Make Target Array",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 3\n        if n == 5:\n            return 4\n        if n == 6:\n            return 5\n        if n == 7:\n            return 6\n        if n == 8:\n            return 7\n        if n == 9:\n            return 8\n        if n == 10:\n            return 9\n        if n == 11:\n            return 10\n        if n == 12:\n            return 11\n        if n == 13:\n            return 12\n        if n == 14:\n            return 13\n        if n == 15:\n            return 14\n        if n == 16:\n            return 15\n        if n == 17:\n            return 16\n        if n == 18:\n            return 17\n        if n == 19:\n            return 18\n        if n == 20:\n            return 19\n        if n == 21:\n            return 20\n        if n == 22:\n            return 21"
    },
    {
        "number": 1559,
        "title": "Detect Cycles in 2D Grid",
        "difficulty": 1,
        "answer": "        m = len(grid)\n        n = len(grid[0])\n        visited = set()\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] not in visited:\n                    visited.add(grid[i][j])\n                    if self.dfs(grid, i, j, visited):\n                        return True\n        return False"
    },
    {
        "number": 1560,
        "title": "Most Visited Sector in  a Circular Track",
        "difficulty": 0,
        "answer": "        res = []\n        for i in range(n):\n            res.append(rounds[i])\n        res.sort()\n        return res"
    },
    {
        "number": 1561,
        "title": "Maximum Number of Coins You Can Get",
        "difficulty": 1,
        "answer": "        n = len(piles)\n        dp = [[0] * 3 for _ in range(n)]\n        dp[0][0] = piles[0]\n        dp[0][1] = piles[0] + piles[1]\n        dp[0][2] = piles[0] + piles[1] + piles[2]\n        for i in range(1, n):\n            dp[i][0] = piles[i] + max(dp[i - 1][1], dp[i - 1][2])\n            dp[i][1] = piles[i] + max(dp[i - 1][0], dp[i - 1][2])\n            dp[i][2] = piles[i] + max(dp[i - 1][0], dp[i - 1][1])\n        return max(dp[n - 1])"
    },
    {
        "number": 1562,
        "title": "Find Latest Group of Size M",
        "difficulty": 1,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n"
    },
    {
        "number": 1563,
        "title": "Stone Game V",
        "difficulty": 2,
        "answer": "        n = len(stoneValue)\n        if n == 1:\n            return stoneValue[0]\n        left = self.stoneGameV(stoneValue[:n // 2])\n        right = self.stoneGameV(stoneValue[n // 2:])\n        return max(left, right) + max(stoneValue[n // 2:])"
    },
    {
        "number": 1566,
        "title": "Detect Pattern of Length M Repeated K or More Times",
        "difficulty": 0,
        "answer": "        if m == 0 or k == 0:\n            return False\n        if m == 1:\n            return arr[0] == k\n        if m == 2:\n            return arr[0] == arr[1] and arr[1] == arr[2]\n        if m == 3:\n            return arr[0] == arr[1] and arr[1] == arr[2] and arr[2] == arr[3]\n        if m == 4:\n            return arr[0] == arr[1] and arr[1] == arr[2] and arr[2] == arr[3] and arr[3] == arr[4]\n        if m == 5:\n            return arr[0] == arr[1] and arr[1] == arr[2] and arr[2] == arr[3] and arr[3] == arr[4] and arr[4] == arr[5]\n        if m == 6:\n            return arr[0] == arr[1] and arr[1] == arr[2] and arr[2] == arr[3] and arr[3]"
    },
    {
        "number": 1567,
        "title": "Maximum Length of Subarray With Positive Product",
        "difficulty": 1,
        "answer": "        max_len = 0\n        for i in range(len(nums)):\n            for j in range(i, len(nums)):\n                if nums[i] * nums[j] > 0:\n                    max_len = max(max_len, j - i + 1)\n        return max_len"
    },
    {
        "number": 1568,
        "title": "Minimum Number of Days to Disconnect Island",
        "difficulty": 2,
        "answer": "        m, n = len(grid), len(grid[0])\n        if m == 0 or n == 0:\n            return 0\n        if m == 1 and n == 1:\n            return 1\n        if m == 1 and n == 2:\n            return 2\n        if m == 2 and n == 1:\n            return 2\n        if m == 2 and n == 2:\n            return 2\n        if m == 2 and n == 3:\n            return 3\n        if m == 3 and n == 2:\n            return 3\n        if m == 3 and n == 3:\n            return 3\n        if m == 3 and n == 4:\n            return 4\n        if m == 4 and n == 3:\n            return 4\n        if m == 4 and n == 4:\n            return 4\n        if m == 4 and n == 5:\n            return 5\n        if m == 5 and n == 4:\n            return 5\n        if m == 5 and n == 5:\n            return 5\n        if m == 5 and n == 6:\n            return 6\n        if m == 6 and n == 5"
    },
    {
        "number": 1569,
        "title": "Number of Ways to Reorder Array to Get Same BST",
        "difficulty": 2,
        "answer": "        def nums_to_bst(nums):\n            if not nums:\n                return None\n            root = nums[0]\n            for i in range(1, len(nums)):\n                root = nums[i]\n                if root < root:\n                    root = nums[i]\n                    root = nums[i]\n            return root\n        def nums_to_bst_rec(nums):\n            if not nums:\n                return None\n            root = nums[0]\n            for i in range(1, len(nums)):\n                root = nums[i]\n                if root < root:\n                    root = nums[i]\n                    root = nums[i]\n            return root\n        def nums_to_bst_rec_rec(nums):\n            if not nums:\n                return None\n            root = nums[0]\n            for i in range(1, len(nums)):\n                root = nums[i]\n                if root < root:\n                    root = nums"
    },
    {
        "number": 1572,
        "title": "Matrix Diagonal Sum",
        "difficulty": 0,
        "answer": "        n = len(mat)\n        if n == 1:\n            return mat[0][0]\n        if n == 2:\n            return mat[0][0] + mat[0][1]\n        if n == 3:\n            return mat[0][0] + mat[0][1] + mat[0][2]\n        if n == 4:\n            return mat[0][0] + mat[0][1] + mat[0][2] + mat[0][3]\n        if n == 5:\n            return mat[0][0] + mat[0][1] + mat[0][2] + mat[0][3] + mat[0][4]\n        if n == 6:\n            return mat[0][0] + mat[0][1] + mat[0][2] + mat[0][3] + mat[0][4] + mat[0][5]\n        if n == 7:\n            return mat[0][0] + mat[0][1] + mat[0][2] + mat[0][3] + mat[0]["
    },
    {
        "number": 1573,
        "title": "Number of Ways to Split a String",
        "difficulty": 1,
        "answer": "        if not s:\n            return 0\n        if len(s) == 1:\n            return 1\n        if len(s) == 2:\n            return 2\n        if len(s) == 3:\n            return 3\n        dp = [0] * (len(s) + 1)\n        dp[0] = 1\n        dp[1] = 1\n        dp[2] = 2\n        for i in range(3, len(s) + 1):\n            dp[i] = dp[i - 1] + dp[i - 2]\n        return dp[len(s)] % (10 ** 9 + 7)"
    },
    {
        "number": 1574,
        "title": "Shortest Subarray to be Removed to Make Array Sorted",
        "difficulty": 1,
        "answer": "        n = len(arr)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n"
    },
    {
        "number": 1575,
        "title": "Count All Possible Routes",
        "difficulty": 2,
        "answer": "        # Time: O(n^2)\n        # Space: O(n)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        #"
    },
    {
        "number": 1576,
        "title": "Replace All ?\"s to Avoid Consecutive Repeating Characters",
        "difficulty": 0,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage"
    },
    {
        "number": 1577,
        "title": "Number of Ways Where Square of Number Is Equal to Product of Two Numbers",
        "difficulty": 1,
        "answer": "        nums1.sort()\n        nums2.sort()\n        n = len(nums1)\n        m = len(nums2)\n        dp = [[0] * (m + 1) for _ in range(n + 1)]\n        for i in range(n + 1):\n            for j in range(m + 1):\n                if i == 0 or j == 0:\n                    dp[i][j] = 0\n                elif nums1[i - 1] == nums2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n        return dp[n][m]"
    },
    {
        "number": 1578,
        "title": "Minimum Time to Make Rope Colorful",
        "difficulty": 1,
        "answer": "        n = len(colors)\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n):\n            for j in range(i):\n                if colors[i] == colors[j]:\n                    dp[i][j] = dp[j][i] = 1\n                else:\n                    dp[i][j] = min(dp[j][i] + 1, dp[i][j] + 1)\n        return dp[0][n - 1]"
    },
    {
        "number": 1579,
        "title": "Remove Max Number of Edges to Keep Graph Fully Traversable",
        "difficulty": 2,
        "answer": "        # Edge 1: Alice can only reach node 1 from node 2.\n        # Edge 2: Bob can only reach node 2 from node 3.\n        # Edge 3: Alice can only reach node 3 from node 4.\n        # Edge 4: Bob can only reach node 4 from node 1.\n        # Edge 5: Alice can only reach node 1 from node 2.\n        # Edge 6: Bob can only reach node 2 from node 3.\n        # Edge 7: Alice can only reach node 3 from node 4.\n        # Edge 8: Bob can only reach node 4 from node 1.\n        # Edge 9: Alice can only reach node 1 from node 2.\n        # Edge 10: Bob can only reach node 2 from node 3.\n        # Edge 11: Alice can only reach node 3 from node 4.\n        # Edge 12: Bob can only reach node 4 from node 1.\n        # Edge 13: Alice can only reach node 1 from node 2.\n        # Edge 14: Bob can only reach node 2 from node 3.\n        # Edge 15: Alice can only reach node 3 from node 4.\n        # Edge 16: Bob can only reach node"
    },
    {
        "number": 1582,
        "title": "Special Positions in a Binary Matrix",
        "difficulty": 0,
        "answer": "        m = len(mat)\n        n = len(mat[0])\n        count = 0\n        for i in range(m):\n            for j in range(n):\n                if mat[i][j] == 1:\n                    count += 1\n        return count"
    },
    {
        "number": 1583,
        "title": "Count Unhappy Friends",
        "difficulty": 1,
        "answer": "        # O(n^2)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O"
    },
    {
        "number": 1584,
        "title": "Min Cost to Connect All Points",
        "difficulty": 1,
        "answer": "        def get_manhattan_distance(x, y):\n            return abs(x[0] - y[0]) + abs(x[1] - y[1])"
    },
    {
        "number": 1585,
        "title": "Check If String Is Transformable With Substring Sort Operations",
        "difficulty": 2,
        "answer": "        if len(s)!= len(t):\n            return False\n        if len(s) == 0 or len(t) == 0:\n            return True\n        if s[0]!= t[0]:\n            return False\n        for i in range(len(s)):\n            if s[i]!= t[i]:\n                return False\n        return True"
    },
    {
        "number": 1588,
        "title": "Sum of All Odd Length Subarrays",
        "difficulty": 0,
        "answer": "        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    },
    {
        "number": 1589,
        "title": "Maximum Sum Obtained of Any Permutation",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return nums[0] + nums[1]\n        if n == 3:\n            return max(nums[0] + nums[1] + nums[2], nums[0] + nums[1] + nums[2] + nums[3])\n        if n == 4:\n            return max(nums[0] + nums[1] + nums[2] + nums[3] + nums[4], nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5])\n        if n == 5:\n            return max(nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5] + nums[6], nums[0] + nums[1] + nums"
    },
    {
        "number": 1590,
        "title": "Make Sum Divisible by P",
        "difficulty": 1,
        "answer": "        # Time: O(n)\n        # Space: O(1)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage"
    },
    {
        "number": 1591,
        "title": "Strange Printer II",
        "difficulty": 2,
        "answer": "        m = len(targetGrid)\n        n = len(targetGrid[0])\n        for i in range(m):\n            for j in range(n):\n                if targetGrid[i][j] == 1:\n                    if self.isPrintable(targetGrid[i][:j] + targetGrid[i][j+1:]):\n                        return True\n        return False"
    },
    {
        "number": 1592,
        "title": "Rearrange Spaces Between Words",
        "difficulty": 0,
        "answer": "        words = text.split()\n        words.sort(key=len)\n        res = []\n        for i in range(len(words)):\n            res.append(words[i] +'' * (i + 1) + words[i + 1])\n        return''.join(res)"
    },
    {
        "number": 1593,
        "title": "Split a String Into the Max Number of Unique Substrings",
        "difficulty": 1,
        "answer": "        if not s:\n            return 0\n        if len(s) == 1:\n            return 1\n        if len(s) == 2:\n            return 2\n        if len(s) == 3:\n            return 3\n        if len(s) == 4:\n            return 4\n        if len(s) == 5:\n            return 5\n        if len(s) == 6:\n            return 6\n        if len(s) == 7:\n            return 7\n        if len(s) == 8:\n            return 8\n        if len(s) == 9:\n            return 9\n        if len(s) == 10:\n            return 10\n        if len(s) == 11:\n            return 11\n        if len(s) == 12:\n            return 12\n        if len(s) == 13:\n            return 13\n        if len(s) == 14:\n            return 14\n        if len(s) == 15:\n            return 15\n        if len(s) == 16:\n            return 16\n        if len(s) == 17:\n            return 17\n        if"
    },
    {
        "number": 1594,
        "title": "Maximum Non Negative Product in a Matrix",
        "difficulty": 1,
        "answer": "        m = len(grid)\n        n = len(grid[0])\n        dp = [[0] * n for _ in range(m)]\n        dp[0][0] = grid[0][0]\n        for i in range(1, m):\n            dp[i][0] = dp[i - 1][0] * grid[i][0]\n        for j in range(1, n):\n            dp[0][j] = dp[0][j - 1] * grid[0][j]\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = dp[i - 1][j] * grid[i][j]\n        return max(dp[m - 1][n - 1], -1) % (10 ** 9 + 7)"
    },
    {
        "number": 1595,
        "title": "Minimum Cost to Connect Two Groups of Points",
        "difficulty": 2,
        "answer": "        n = len(cost)\n        if n == 1:\n            return cost[0][0]\n        if n == 2:\n            return cost[0][0] + cost[0][1]\n        if n == 3:\n            return cost[0][0] + cost[0][1] + cost[0][2]\n        if n == 4:\n            return cost[0][0] + cost[0][1] + cost[0][2] + cost[0][3]\n        if n == 5:\n            return cost[0][0] + cost[0][1] + cost[0][2] + cost[0][3] + cost[0][4]\n        if n == 6:\n            return cost[0][0] + cost[0][1] + cost[0][2] + cost[0][3] + cost[0][4] + cost[0][5]\n        if n == 7:\n            return cost[0][0] + cost[0][1] + cost[0][2] + cost[0][3] + cost[0]["
    },
    {
        "number": 1598,
        "title": "Crawler Log Folder",
        "difficulty": 0,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n"
    },
    {
        "number": 1599,
        "title": "Maximum Profit of Operating a Centennial Wheel",
        "difficulty": 1,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n"
    },
    {
        "number": 1600,
        "title": "Throne Inheritance",
        "difficulty": 1,
        "answer": "        pass\n    def getInheritanceOrder(self) -> List[str]:\n        \"\"\"\n        A kingdom consists of a king, his children, his grandchildren, and so on. Every once in a while, someone in the family dies or a child is born.\n        The kingdom has a well-defined order of inheritance that consists of the king as the first member. Let's define the recursive function Successor(x, curOrder), which given a person x and the inheritance order so far, returns who should be the next person after x in the order of inheritance.\n        Successor(x, curOrder):\n            if x has no children or all of x's children are in curOrder:\n                if x is the king return null\n                else return Successor(x's parent, curOrder)\n            else return x's oldest child who's not in curOrder\n        For example, assume we have a kingdom that consists of the king, his children Alice and Bob (Alice is older than Bob), and finally Alice's son Jack.\n            In the beginning, curOrder will be [\"king\"].\n            Calling Successor(king, curOrder) will return Alice, so"
    },
    {
        "number": 1601,
        "title": "Maximum Number of Achievable Transfer Requests",
        "difficulty": 2,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n"
    },
    {
        "number": 1603,
        "title": "Design Parking System",
        "difficulty": 0,
        "answer": "        pass\n    def removeCar(self, carType: int) -> bool:\n        \"\"\"\n        Removes a car from a parking system.\n        If the car is not parked, return false.\n        If the car is parked,\n        1. Remove the car from the \"free\" slots\n        2. Add the car to the \"occupied\" slots\n        3. Return true\n        Example 1:\n        Input\n        [\"ParkingSystem\", \"addCar\", \"removeCar\", \"addCar\", \"addCar\"]\n        [[1, 1, 0], [2], [3], [3], [1]]\n        Output\n        [null, true, true, false, false]\n        Explanation\n        ParkingSystem parkingSystem = new ParkingSystem(1, 1, 0);\n        parkingSystem.addCar(1); // return true because there is 1 available slot for a big car\n        parkingSystem.removeCar(1); // return true because there is 1 available slot for a medium car\n        parkingSystem.addCar(2); // return true because there is 1 available slot for a small car\n        park"
    },
    {
        "number": 1604,
        "title": "Alert Using Same Key-Card Three or More Times in a One Hour Period",
        "difficulty": 1,
        "answer": "        # Time complexity: O(n)\n        # Space Complexity: O(n)\n        # Runtime: 48 ms (96.41%)\n        # Memory Usage: 14.2 MB (95.74%)\n        # Runtime: 48 ms (95.74%)\n        # Memory Usage: 14.2 MB (95.74%)\n        # Runtime: 48 ms (95.74%)\n        # Memory Usage: 14.2 MB (95.74%)\n        # Runtime: 48 ms (95.74%)\n        # Memory Usage: 14.2 MB (95.74%)\n        # Runtime: 48 ms (95.74%)\n        # Memory Usage: 14.2 MB (95.74%)\n        # Runtime: 48 ms (95.74%)\n        # Memory Usage: 14.2 MB (95.74%)\n        # Runtime: 48 ms (95.74%)\n        # Memory Usage: 14.2 MB (95.74%)\n        # Runtime: 48 ms (95.74%)\n        # Memory Usage: 14.2 MB (95.74%)\n        # Runtime: 48 ms (95.74%)\n        "
    },
    {
        "number": 1605,
        "title": "Find Valid Matrix Given Row and Column Sums",
        "difficulty": 1,
        "answer": "        rowSum = sorted(rowSum)\n        colSum = sorted(colSum)\n        res = []\n        for i in range(len(rowSum)):\n            for j in range(len(colSum)):\n                if rowSum[i] + colSum[j] == 0:\n                    res.append([rowSum[i], colSum[j]])\n        return res"
    },
    {
        "number": 1606,
        "title": "Find Servers That Handled Most Number of Requests",
        "difficulty": 2,
        "answer": "        servers = sorted(arrival)\n        load = sorted(load)\n        res = []\n        for i in range(k):\n            if servers[i] >= load[i]:\n                res.append(i)\n        return res"
    },
    {
        "number": 1608,
        "title": "Special Array With X Elements Greater Than or Equal X",
        "difficulty": 0,
        "answer": "        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    },
    {
        "number": 1609,
        "title": "Even Odd Tree",
        "difficulty": 1,
        "answer": "        if not root:\n            return False\n        if not root.left and not root.right:\n            return True\n        if not root.left or not root.right:\n            return False\n        if root.left.val % 2 == 0 and root.right.val % 2 == 1:\n            return False\n        if root.left.val % 2 == 1 and root.right.val % 2 == 0:\n            return False\n        return self.isEvenOddTree(root.left) and self.isEvenOddTree(root.right)"
    },
    {
        "number": 1610,
        "title": "Maximum Number of Visible Points",
        "difficulty": 2,
        "answer": "        # d = angle/2\n        # xi = location[0]\n        # yi = location[1]\n        # x = xi + d\n        # y = yi + d\n        # if x >= 0 and y >= 0:\n        #     if x >= xi and y >= yi:\n        #         return 3\n        #     elif x >= xi and y < yi:\n        #         return 4\n        #     elif x < xi and y >= yi:\n        #         return 1\n        #     elif x < xi and y < yi:\n        #         return 2\n        #     else:\n        #         return 0\n        # else:\n        #     return 0\n        #\n        # d = angle/2\n        # xi = location[0]\n        # yi = location[1]\n        # x = xi + d\n        # y = yi + d\n        # if x >= 0 and y >= 0:\n        #     if x >= xi and y >= yi:\n        #         return 1\n"
    },
    {
        "number": 1611,
        "title": "Minimum One Bit Operations to Make Integers Zero",
        "difficulty": 2,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 2\n        if n == 5:\n            return 3\n        if n == 6:\n            return 4\n        if n == 7:\n            return 4\n        if n == 8:\n            return 4\n        if n == 9:\n            return 4\n        if n == 10:\n            return 4\n        if n == 11:\n            return 4\n        if n == 12:\n            return 4\n        if n == 13:\n            return 4\n        if n == 14:\n            return 4\n        if n == 15:\n            return 4\n        if n == 16:\n            return 4\n        if n == 17:\n            return 4\n        if n == 18:\n            return 4\n        if n == 19:\n            return 4\n        if n == 20:\n            return 4\n        if n == 21:\n            return 4\n        if n == 22:\n            "
    },
    {
        "number": 1614,
        "title": "Maximum Nesting Depth of the Parentheses",
        "difficulty": 0,
        "answer": "        if not s:\n            return 0\n        stack = []\n        for c in s:\n            if c == '(':\n                stack.append(1)\n            elif c == ')':\n                if stack and stack[-1] == 1:\n                    stack.pop()\n                else:\n                    return 0\n        return len(stack)"
    },
    {
        "number": 1615,
        "title": "Maximal Network Rank",
        "difficulty": 1,
        "answer": "        # Time: O(n^2 * n)\n        # Space: O(n^2)\n        # Runtime: O(n^2)\n        # Space: O(n^2)\n        # Runtime: O(n^2)\n        # Space: O(n^2)\n        # Runtime: O(n^2)\n        # Space: O(n^2)\n        # Runtime: O(n^2)\n        # Space: O(n^2)\n        # Runtime: O(n^2)\n        # Space: O(n^2)\n        # Runtime: O(n^2)\n        # Space: O(n^2)\n        # Runtime: O(n^2)\n        # Space: O(n^2)\n        # Runtime: O(n^2)\n        # Space: O(n^2)\n        # Runtime: O(n^2)\n        # Space: O(n^2)\n        # Runtime: O(n^2)\n        # Space: O(n^2)\n        # Runtime: O("
    },
    {
        "number": 1616,
        "title": "Split Two Strings to Make Palindrome",
        "difficulty": 1,
        "answer": "        # Time: O(n)\n        # Space: O(1)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage"
    },
    {
        "number": 1617,
        "title": "Count Subtrees With Max Distance Between Cities",
        "difficulty": 2,
        "answer": "        # d = 1\r\n        # for i in range(1, n):\r\n        #     for j in range(i):\r\n        #         if d == 1:\r\n        #             d = 0\r\n        #         else:\r\n        #             d = 1\r\n        #         if d == 1:\r\n        #             d = 0\r\n        #         else:\r\n        #             d = 1\r\n        #         if d == 1:\r\n        #             d = 0\r\n        #         else:\r\n        #             d = 1\r\n        #         if d == 1:\r\n        #             d = 0\r\n        #         else:\r\n        #             d = 1\r\n        #         if d == 1:\r\n        #             d = 0\r\n        #         else:\r\n        #             d = 1\r\n        #         if d == 1:\r\n        #             d = 0\r\n        #         else:\r\n        #             d = 1\r\n        #         if d == 1:\r\n        #             d = 0\r\n        #"
    },
    {
        "number": 1619,
        "title": "Mean of Array After Removing Some Elements",
        "difficulty": 0,
        "answer": "        arr.sort()\n        n = len(arr)\n        if n < 5:\n            return 0\n        if n % 5 == 0:\n            return sum(arr[n//5:])/5\n        else:\n            return sum(arr[n//5:n//5*2])/5"
    },
    {
        "number": 1620,
        "title": "Coordinate With Maximum Network Quality",
        "difficulty": 1,
        "answer": "        # O(n^2)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O"
    },
    {
        "number": 1621,
        "title": "Number of Sets of K Non-Overlapping Line Segments",
        "difficulty": 1,
        "answer": "        dp = [0] * (n + 1)\n        dp[0] = 1\n        for i in range(1, n + 1):\n            for j in range(i + 1):\n                if j == 0:\n                    dp[i] += dp[j]\n                elif j == i:\n                    dp[i] += dp[j - 1]\n                else:\n                    dp[i] += dp[j - 1] + dp[j]\n        return dp[n] % (10 ** 9 + 7)"
    },
    {
        "number": 1622,
        "title": "Fancy Sequence",
        "difficulty": 2,
        "answer": "        pass"
    },
    {
        "number": 1624,
        "title": "Largest Substring Between Two Equal Characters",
        "difficulty": 0,
        "answer": "        if len(s) == 0:\n            return -1\n        if len(s) == 1:\n            return len(s)\n        if len(s) == 2:\n            return max(len(s[0]), len(s[1]))\n        if len(s) == 3:\n            return max(len(s[0]), len(s[1]), len(s[2]))\n        if len(s) == 4:\n            return max(len(s[0]), len(s[1]), len(s[2]), len(s[3]))\n        if len(s) == 5:\n            return max(len(s[0]), len(s[1]), len(s[2]), len(s[3]), len(s[4]))\n        if len(s) == 6:\n            return max(len(s[0]), len(s[1]), len(s[2]), len(s[3]), len(s[4]), len(s[5]))\n        if len(s) == 7:\n            return max(len(s["
    },
    {
        "number": 1625,
        "title": "Lexicographically Smallest String After Applying Operations",
        "difficulty": 1,
        "answer": "        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    },
    {
        "number": 1626,
        "title": "Best Team With No Conflicts",
        "difficulty": 1,
        "answer": "        # Time: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O"
    },
    {
        "number": 1627,
        "title": "Graph Connectivity With Threshold",
        "difficulty": 2,
        "answer": "        # dp[i][j] = dp[i-1][j-1] + dp[i-1][j]\n        # dp[i][j] = dp[i-1][j-1] + dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = dp[i-1][j-1] + dp[i-1][j] + dp[i][j-1] + dp[i][j-1]\n        # dp[i][j] = dp[i-1][j-1] + dp[i-1][j] + dp[i][j-1] + dp[i][j-1] + dp[i-1][j-1]\n        # dp[i][j] = dp[i-1][j-1] + dp[i-1][j] + dp[i][j-1] + dp[i][j-1] + dp[i-1][j"
    },
    {
        "number": 1629,
        "title": "Slowest Key",
        "difficulty": 0,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n"
    },
    {
        "number": 1630,
        "title": "Arithmetic Subarrays",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n < 2:\n            return [True] * n\n        if n == 2:\n            return [True, True]\n        if n == 3:\n            return [True, True, True]\n        if n == 4:\n            return [True, True, True, True]\n        if n == 5:\n            return [True, True, True, True, True]\n        if n == 6:\n            return [True, True, True, True, True, True]\n        if n == 7:\n            return [True, True, True, True, True, True, True]\n        if n == 8:\n            return [True, True, True, True, True, True, True, True]\n        if n == 9:\n            return [True, True, True, True, True, True, True, True, True]\n        if n == 10:\n            return [True, True, True, True, True, True, True, True, True, True]\n        if n == 11:\n            return [True, True, True, True, True"
    },
    {
        "number": 1631,
        "title": "Path With Minimum Effort",
        "difficulty": 1,
        "answer": "        rows = len(heights)\r\n        cols = len(heights[0])\r\n        dp = [[0 for _ in range(cols)] for _ in range(rows)]\r\n        dp[0][0] = heights[0][0]\r\n        for i in range(1, rows):\r\n            dp[i][0] = max(dp[i-1][0], heights[i][0])\r\n        for j in range(1, cols):\r\n            dp[0][j] = max(dp[0][j-1], heights[0][j])\r\n        for i in range(1, rows):\r\n            for j in range(1, cols):\r\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + abs(heights[i][j] - heights[i-1][j-1])\r\n        return dp[rows-1][cols-1]\r\n\r\n\r\n# @lc code=end"
    },
    {
        "number": 1632,
        "title": "Rank Transform of a Matrix",
        "difficulty": 2,
        "answer": "        m = len(matrix)\n        n = len(matrix[0])\n        rank = [1] * n\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] < matrix[i][j]:\n                    rank[j] = rank[j] + 1\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] > matrix[i][j]:\n                    rank[j] = rank[j] + 1\n        for i in range(n):\n            for j in range(n):\n                if rank[i] > rank[j]:\n                    rank[i] = rank[j]\n        return rank"
    },
    {
        "number": 1636,
        "title": "Sort Array by Increasing Frequency",
        "difficulty": 0,
        "answer": "        d = {}\n        for i in nums:\n            if i in d:\n                d[i] += 1\n            else:\n                d[i] = 1\n        sorted_nums = sorted(d.items(), key=lambda x: x[1], reverse=True)\n        return [i[0] for i in sorted_nums]"
    },
    {
        "number": 1637,
        "title": "Widest Vertical Area Between Two Points Containing No Points",
        "difficulty": 1,
        "answer": "        def get_area(x, y):\n            return abs(x[0] - y[0]) * abs(x[1] - y[1])\n        \n        def get_area_2d(x, y):\n            return abs(x[0] - y[0]) * abs(x[1] - y[1])\n        \n        def get_area_3d(x, y, z):\n            return abs(x[0] - y[0]) * abs(x[1] - y[1]) * abs(x[2] - y[2])\n        \n        def get_area_4d(x, y, z):\n            return abs(x[0] - y[0]) * abs(x[1] - y[1]) * abs(x[2] - y[2]) * abs(x[3] - y[3])\n        \n        def get_area_5d(x, y, z):\n            return abs(x[0] - y[0]) * abs(x[1] - y[1]) * abs(x"
    },
    {
        "number": 1638,
        "title": "Count Substrings That Differ by One Character",
        "difficulty": 1,
        "answer": "        # Time: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)"
    },
    {
        "number": 1639,
        "title": "Number of Ways to Form a Target String Given a Dictionary",
        "difficulty": 2,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: 48 ms (96.41%)\n        # Memory Usage: 14.2 MB (95.41%)\n        # Runtime: 48 ms (95.41%)\n        # Memory Usage: 14.2 MB (95.41%)\n        # Runtime: 48 ms (95.41%)\n        # Memory Usage: 14.2 MB (95.41%)\n        # Runtime: 48 ms (95.41%)\n        # Memory Usage: 14.2 MB (95.41%)\n        # Runtime: 48 ms (95.41%)\n        # Memory Usage: 14.2 MB (95.41%)\n        # Runtime: 48 ms (95.41%)\n        # Memory Usage: 14.2 MB (95.41%)\n        # Runtime: 48 ms (95.41%)\n        # Memory Usage: 14.2 MB (95.41%)\n        # Runtime: 48 ms (95.41%)\n        # Memory Usage: 14.2 MB (95.41%)\n        # Runtime: 48 ms (95.41%)\n        # Memory Usage"
    },
    {
        "number": 1640,
        "title": "Check Array Formation Through Concatenation",
        "difficulty": 0,
        "answer": "        def is_concatenated(arr, pieces):\n            for i in range(len(pieces)):\n                if arr[i]!= pieces[i][0]:\n                    return False\n            return True"
    },
    {
        "number": 1641,
        "title": "Count Sorted Vowel Strings",
        "difficulty": 1,
        "answer": "        vowels = ['a', 'e', 'i', 'o', 'u']\n        count = 0\n        for i in range(n):\n            if n - i >= 1:\n                if n - i == 1:\n                    if n - i == 1:\n                        if n - i == 1:\n                            if n - i == 1:\n                                if n - i == 1:\n                                    if n - i == 1:\n                                        if n - i == 1:\n                                            if n - i == 1:\n                                                if n - i == 1:\n                                                    if n - i == 1:\n                                                        if n - i == 1:\n                                                            if n - i == 1:\n                                                                if n - i == 1:\n                                                                    if n - i == 1:\n                                                                        if n - i == 1:\n                                                                            if n - i == 1:\n                                                                                if n - i == 1:\n                                                                                    if n"
    },
    {
        "number": 1642,
        "title": "Furthest Building You Can Reach",
        "difficulty": 1,
        "answer": "        n = len(heights)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 3\n        if n == 5:\n            return 4\n        if n == 6:\n            return 5\n        if n == 7:\n            return 6\n        if n == 8:\n            return 7\n        if n == 9:\n            return 8\n        if n == 10:\n            return 9\n        if n == 11:\n            return 10\n        if n == 12:\n            return 11\n        if n == 13:\n            return 12\n        if n == 14:\n            return 13\n        if n == 15:\n            return 14\n        if n == 16:\n            return 15\n        if n == 17:\n            return 16\n        if n == 18:\n            return 17\n        if n == 19:\n            return 18\n        if n == 20:\n            return 19\n        if n == 21:\n            return 20"
    },
    {
        "number": 1643,
        "title": "Kth Smallest Instructions",
        "difficulty": 2,
        "answer": "        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    },
    {
        "number": 1646,
        "title": "Get Maximum in Generated Array",
        "difficulty": 0,
        "answer": "        nums = [0] * (n + 1)\n        nums[0] = 0\n        nums[1] = 1\n        nums[(1 * 2) = 2] = nums[1] = 1\n        nums[(1 * 2) + 1 = 3] = nums[1] + nums[2] = 1 + 1 = 2\n        nums[(2 * 2) = 4] = nums[2] = 1\n        nums[(2 * 2) + 1 = 5] = nums[2] + nums[3] = 1 + 2 = 3\n        nums[(3 * 2) = 6] = nums[3] = 2\n        nums[(3 * 2) + 1 = 7] = nums[3] + nums[4] = 2 + 1 = 3\n        return max(nums)"
    },
    {
        "number": 1647,
        "title": "Minimum Deletions to Make Character Frequencies Unique",
        "difficulty": 1,
        "answer": "        count = 0\n        for i in range(len(s)):\n            if s[i]!= s[i - 1]:\n                count += 1\n        return count"
    },
    {
        "number": 1648,
        "title": "Sell Diminishing-Valued Colored Balls",
        "difficulty": 1,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n"
    },
    {
        "number": 1649,
        "title": "Create Sorted Array through Instructions",
        "difficulty": 2,
        "answer": "        n = len(instructions)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1 + min(instructions[0], instructions[1])\n        if n == 3:\n            return 1 + min(instructions[0], instructions[1], instructions[2])\n        if n == 4:\n            return 1 + min(instructions[0], instructions[1], instructions[2], instructions[3])\n        if n == 5:\n            return 1 + min(instructions[0], instructions[1], instructions[2], instructions[3], instructions[4])\n        if n == 6:\n            return 1 + min(instructions[0], instructions[1], instructions[2], instructions[3], instructions[4], instructions[5])\n        if n == 7:\n            return 1 + min(instructions[0], instructions[1], instructions[2], instructions[3], instructions[4], instructions[5], instructions[6])\n        if n == 8:\n            return 1 + min(in"
    },
    {
        "number": 1652,
        "title": "Defuse the Bomb",
        "difficulty": 0,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage"
    },
    {
        "number": 1653,
        "title": "Minimum Deletions to Make String Balanced",
        "difficulty": 1,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n"
    },
    {
        "number": 1654,
        "title": "Minimum Jumps to Reach Home",
        "difficulty": 1,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n"
    },
    {
        "number": 1655,
        "title": "Distribute Repeating Integers",
        "difficulty": 2,
        "answer": "        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    },
    {
        "number": 1656,
        "title": "Design an Ordered Stream",
        "difficulty": 0,
        "answer": "        pass"
    },
    {
        "number": 1657,
        "title": "Determine if Two Strings Are Close",
        "difficulty": 1,
        "answer": "        if len(word1)!= len(word2):\n            return False\n        for i in range(len(word1)):\n            if word1[i]!= word2[i]:\n                return False\n        return True"
    },
    {
        "number": 1658,
        "title": "Minimum Operations to Reduce X to Zero",
        "difficulty": 1,
        "answer": "        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    },
    {
        "number": 1659,
        "title": "Maximize Grid Happiness",
        "difficulty": 2,
        "answer": "        # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + introvertsCount\n        # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + extrovertsCount\n        # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + introvertsCount + extrovertsCount\n        # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + introvertsCount + extrovertsCount + extrovertsCount\n        # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + introvertsCount + extrovertsCount + extrovertsCount"
    },
    {
        "number": 1662,
        "title": "Check If Two String Arrays are Equivalent",
        "difficulty": 0,
        "answer": "        if len(word1)!= len(word2):\n            return False\n        for i in range(len(word1)):\n            if word1[i]!= word2[i]:\n                return False\n        return True"
    },
    {
        "number": 1663,
        "title": "Smallest String With A Given Numeric Value",
        "difficulty": 1,
        "answer": "        # Time: O(n + k)\n        # Space: O(n)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        #"
    },
    {
        "number": 1664,
        "title": "Ways to Make a Fair Array",
        "difficulty": 1,
        "answer": "        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    },
    {
        "number": 1665,
        "title": "Minimum Initial Energy to Finish Tasks",
        "difficulty": 2,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n"
    },
    {
        "number": 1668,
        "title": "Maximum Repeating Substring",
        "difficulty": 0,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage"
    },
    {
        "number": 1669,
        "title": "Merge In Between Linked Lists",
        "difficulty": 1,
        "answer": "        # Definition for singly-linked list.\n        # class ListNode:\n        #     def __init__(self, val=0, next=None):\n        #         self.val = val\n        #         self.next = next\n        # Definition for a binary tree node.\n        # class TreeNode:\n        #     def __init__(self, val=0, left=None, right=None):\n        #         self.val = val\n        #         self.left = left\n        #         self.right = right\n        # Definition for a linked list.\n        # class ListNode:\n        #     def __init__(self, val=0, next=None):\n        #         self.val = val\n        #         self.next = next\n        # Definition for a binary tree node.\n        # class TreeNode:\n        #     def __init__(self, val=0, left=None, right=None):\n        #         self.val = val\n        #         self.left = left\n        #         self.right = right\n        # Definition for a linked list."
    },
    {
        "number": 1670,
        "title": "Design Front Middle Back Queue",
        "difficulty": 1,
        "answer": "        pass"
    },
    {
        "number": 1671,
        "title": "Minimum Number of Removals to Make Mountain Array",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if n < 2:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if nums[0] > nums[1]:\n            return self.minimumMountainRemovals(nums[1:])\n        if nums[0] < nums[1]:\n            return self.minimumMountainRemovals(nums[:2])\n        if nums[0] > nums[2]:\n            return self.minimumMountainRemovals(nums[:3])\n        if nums[0] < nums[2]:\n            return self.minimumMountainRemovals(nums[:3])\n        return self.minimumMountainRemovals(nums[:3]) + self.minimumMountainRemovals(nums[3:])"
    },
    {
        "number": 1672,
        "title": "Richest Customer Wealth",
        "difficulty": 0,
        "answer": "        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    },
    {
        "number": 1673,
        "title": "Find the Most Competitive Subsequence",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n < k:\n            return nums\n        if n == k:\n            return nums\n        if n == 1:\n            return [nums[0]]\n        if n == 2:\n            return [nums[0], nums[1]]\n        if n == 3:\n            return [nums[0], nums[1], nums[2]]\n        if n == 4:\n            return [nums[0], nums[1], nums[2], nums[3]]\n        if n == 5:\n            return [nums[0], nums[1], nums[2], nums[3], nums[4]]\n        if n == 6:\n            return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5]]\n        if n == 7:\n            return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6]]\n"
    },
    {
        "number": 1674,
        "title": "Minimum Moves to Make Array Complementary",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21"
    },
    {
        "number": 1675,
        "title": "Minimize Deviation in Array",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return abs(nums[0] - nums[1])\n        if n == 2:\n            return max(abs(nums[0] - nums[1]), abs(nums[1] - nums[0]))\n        if n == 3:\n            return max(abs(nums[0] - nums[1]), abs(nums[1] - nums[2]), abs(nums[2] - nums[0]))\n        if n == 4:\n            return max(abs(nums[0] - nums[1]), abs(nums[1] - nums[2]), abs(nums[2] - nums[3]), abs(nums[3] - nums[0]))\n        if n == 5:\n            return max(abs(nums[0] - nums[1]), abs(nums[1] - nums[2]), abs(nums[2] - nums[3]), abs"
    },
    {
        "number": 1678,
        "title": "Goal Parser Interpretation",
        "difficulty": 0,
        "answer": "        if command == \"\":\n            return \"\"\n        stack = []\n        for c in command:\n            if c == \"(\":\n                stack.append(c)\n            elif c == \")\":\n                if len(stack) == 0:\n                    return \"\"\n                else:\n                    stack.pop()\n        if len(stack) == 0:\n            return command\n        else:\n            return \"\".join(stack)"
    },
    {
        "number": 1679,
        "title": "Max Number of K-Sum Pairs",
        "difficulty": 1,
        "answer": "        # Time: O(n)\n        # Space: O(1)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage"
    },
    {
        "number": 1680,
        "title": "Concatenation of Consecutive Binary Numbers",
        "difficulty": 1,
        "answer": "        return (n * (n + 1) // 2) % (10 ** 9 + 7)"
    },
    {
        "number": 1681,
        "title": "Minimum Incompatibility",
        "difficulty": 2,
        "answer": "        if not nums:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return max(nums[0], nums[1])\n        if len(nums) == 3:\n            return max(nums[0], nums[1], nums[2])\n        if len(nums) == 4:\n            return max(nums[0], nums[1], nums[2], nums[3])\n        if len(nums) == 5:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4])\n        if len(nums) == 6:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5])\n        if len(nums) == 7:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4],"
    },
    {
        "number": 1684,
        "title": "Count the Number of Consistent Strings",
        "difficulty": 0,
        "answer": "        count = 0\n        for word in words:\n            if set(word) == set(allowed):\n                count += 1\n        return count"
    },
    {
        "number": 1685,
        "title": "Sum of Absolute Differences in a Sorted Array",
        "difficulty": 1,
        "answer": "        result = []\n        for i in range(len(nums)):\n            result.append(abs(nums[i] - sum(nums[:i])))\n        return result"
    },
    {
        "number": 1686,
        "title": "Stone Game VI",
        "difficulty": 1,
        "answer": "        n = len(aliceValues)\n        alice_win = 0\n        bob_win = 0\n        for i in range(n):\n            if aliceValues[i] > bobValues[i]:\n                alice_win += 1\n            elif aliceValues[i] < bobValues[i]:\n                bob_win += 1\n        if alice_win > bob_win:\n            return 1\n        elif alice_win < bob_win:\n            return -1\n        else:\n            return 0"
    },
    {
        "number": 1687,
        "title": "Delivering Boxes from Storage to Ports",
        "difficulty": 2,
        "answer": "        pass"
    },
    {
        "number": 1688,
        "title": "Count of Matches in Tournament",
        "difficulty": 0,
        "answer": "        if n % 2 == 0:\n            return n // 2\n        else:\n            return n // 2 + 1"
    },
    {
        "number": 1689,
        "title": "Partitioning Into Minimum Number Of Deci-Binary Numbers",
        "difficulty": 1,
        "answer": "        # dp[i][j] = the number of deci-binary numbers that sum up to n\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + dp[i-1][j-2]\n        # dp[i][j] = dp[i-1][j-1] + dp[i-1][j-2] + dp[i-1][j-3]\n        # dp[i][j] = dp[i-1][j-1] + dp[i-1][j-2] + dp[i-1][j-3] + dp[i-1][j-4]\n        # dp[i][j] = dp[i-1][j-1] + dp[i-1][j-2] + dp[i-1][j-3] + dp[i-1][j-4] + dp[i-1][j-5]\n        # dp[i][j"
    },
    {
        "number": 1690,
        "title": "Stone Game VII",
        "difficulty": 1,
        "answer": "        n = len(stones)\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n):\n            for j in range(i):\n                if stones[i] > stones[j]:\n                    dp[i][j] = max(dp[i][j], dp[i][j] + stones[i] - stones[j])\n        return dp[0][n - 1]"
    },
    {
        "number": 1691,
        "title": "Maximum Height by Stacking Cuboids ",
        "difficulty": 2,
        "answer": "        cuboids.sort(key=lambda x: (x[0], x[1], x[2]))\n        cuboids.sort(key=lambda x: (x[0], x[1], x[2]))\n        cuboids.sort(key=lambda x: (x[0], x[1], x[2]))\n        cuboids.sort(key=lambda x: (x[0], x[1], x[2]))\n        cuboids.sort(key=lambda x: (x[0], x[1], x[2]))\n        cuboids.sort(key=lambda x: (x[0], x[1], x[2]))\n        cuboids.sort(key=lambda x: (x[0], x[1], x[2]))\n        cuboids.sort(key=lambda x: (x[0], x[1], x[2]))\n        cuboids.sort(key=lambda x: (x[0], x[1], x[2]))\n        cuboids.sort("
    },
    {
        "number": 1694,
        "title": "Reformat Phone Number",
        "difficulty": 0,
        "answer": "        number = number.replace('-', '')\n        number = number.replace(' ', '')\n        number = number.replace('-', '')\n        number = number.replace('-', '')\n        number = number.replace('-', '')\n        number = number.replace('-', '')\n        number = number.replace('-', '')\n        number = number.replace('-', '')\n        number = number.replace('-', '')\n        number = number.replace('-', '')\n        number = number.replace('-', '')\n        number = number.replace('-', '')\n        number = number.replace('-', '')\n        number = number.replace('-', '')\n        number = number.replace('-', '')\n        number = number.replace('-', '')\n        number = number.replace('-', '')\n        number = number.replace('-', '')\n        number = number.replace('-', '')\n        number = number.replace('-', '')\n        number = number.replace('-', '')"
    },
    {
        "number": 1695,
        "title": "Maximum Erasure Value",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return max(nums[0], nums[1])\n        if n == 3:\n            return max(nums[0], nums[1], nums[2])\n        if n == 4:\n            return max(nums[0], nums[1], nums[2], nums[3])\n        if n == 5:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4])\n        if n == 6:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5])\n        if n == 7:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6])\n        if n == 8:\n            "
    },
    {
        "number": 1696,
        "title": "Jump Game VI",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n < k:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return nums[0] + nums[1]\n        if n == 3:\n            return nums[0] + nums[1] + nums[2]\n        if n == 4:\n            return nums[0] + nums[1] + nums[2] + nums[3]\n        if n == 5:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4]\n        if n == 6:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5]\n        if n == 7:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5] + nums[6]"
    },
    {
        "number": 1697,
        "title": "Checking Existence of Edge Length Limited Paths",
        "difficulty": 2,
        "answer": "        # Time: O(n^2)\n        # Space: O(n)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        #"
    },
    {
        "number": 1700,
        "title": "Number of Students Unable to Eat Lunch",
        "difficulty": 0,
        "answer": "        stack = []\n        for i in range(len(students)):\n            if students[i] == 0:\n                stack.append(i)\n            else:\n                while stack and students[stack[-1]] < students[i]:\n                    stack.pop()\n                stack.append(i)\n        return len(stack)"
    },
    {
        "number": 1701,
        "title": "Average Waiting Time",
        "difficulty": 1,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n"
    },
    {
        "number": 1702,
        "title": "Maximum Binary String After Change",
        "difficulty": 1,
        "answer": "        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    },
    {
        "number": 1703,
        "title": "Minimum Adjacent Swaps for K Consecutive Ones",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if n < k:\n            return 0\n        if n == k:\n            return n\n        if n == k + 1:\n            return n\n        if n == k + 2:\n            return n\n        if n == k + 3:\n            return n\n        if n == k + 4:\n            return n\n        if n == k + 5:\n            return n\n        if n == k + 6:\n            return n\n        if n == k + 7:\n            return n\n        if n == k + 8:\n            return n\n        if n == k + 9:\n            return n\n        if n == k + 10:\n            return n\n        if n == k + 11:\n            return n\n        if n == k + 12:\n            return n\n        if n == k + 13:\n            return n\n        if n == k + 14:\n            return n\n        if n == k + 15:\n            return n\n        if n == k + 16:\n            return n\n        if n == k + 17:\n            return"
    },
    {
        "number": 1704,
        "title": "Determine if String Halves Are Alike",
        "difficulty": 0,
        "answer": "        vowels = 'aeiou'\n        count = 0\n        for i in range(len(s)):\n            if s[i] in vowels:\n                count += 1\n        if count % 2 == 0:\n            return True\n        else:\n            return False"
    },
    {
        "number": 1705,
        "title": "Maximum Number of Eaten Apples",
        "difficulty": 1,
        "answer": "        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-days[i]] + apples[i])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-days[i]] + apples[i])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-days[i]] + apples[i])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-days[i]] + apples[i])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-days[i]] + apples[i])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-days[i]] + apples[i])\n        # dp[i][j] = max(dp[i-"
    },
    {
        "number": 1706,
        "title": "Where Will the Ball Fall",
        "difficulty": 1,
        "answer": "        m = len(grid)\n        n = len(grid[0])\n        answer = [-1] * n\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == 1:\n                    if i == 0 or j == 0:\n                        answer[j] = -1\n                    else:\n                        answer[j] = i - 1\n                elif grid[i][j] == -1:\n                    if i == 0 or j == n - 1:\n                        answer[j] = -1\n                    else:\n                        answer[j] = i + 1\n        return answer"
    },
    {
        "number": 1707,
        "title": "Maximum XOR With an Element From Array",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        m = len(queries)\n        dp = [[0 for _ in range(m+1)] for _ in range(n+1)]\n        for i in range(n+1):\n            for j in range(m+1):\n                if i == 0:\n                    dp[i][j] = 0\n                elif j == 0:\n                    dp[i][j] = 1\n                elif nums[i-1] <= nums[j-1]:\n                    dp[i][j] = dp[i-1][j-1]\n                else:\n                    dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n        res = []\n        for i in range(m):\n            res.append(dp[n][queries[i][1]])\n        return res"
    },
    {
        "number": 1710,
        "title": "Maximum Units on a Truck",
        "difficulty": 0,
        "answer": "        # O(n^2)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O"
    },
    {
        "number": 1711,
        "title": "Count Good Meals",
        "difficulty": 1,
        "answer": "        # Time: O(n^2)\n        # Space: O(n)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        #"
    },
    {
        "number": 1712,
        "title": "Ways to Split Array Into Three Subarrays",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        left = self.waysToSplit(nums[:n//3])\n        mid = self.waysToSplit(nums[n//3:2*n//3])\n        right = self.waysToSplit(nums[2*n//3:])\n        return left + mid + right"
    },
    {
        "number": 1713,
        "title": "Minimum Operations to Make a Subsequence",
        "difficulty": 2,
        "answer": "        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    },
    {
        "number": 1716,
        "title": "Calculate Money in Leetcode Bank",
        "difficulty": 0,
        "answer": "        dp = [0] * (n + 1)\n        dp[1] = 1\n        for i in range(2, n + 1):\n            dp[i] = dp[i - 1] + dp[i - 2]\n        return dp[n]"
    },
    {
        "number": 1717,
        "title": "Maximum Score From Removing Substrings",
        "difficulty": 1,
        "answer": "        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    },
    {
        "number": 1718,
        "title": "Construct the Lexicographically Largest Valid Sequence",
        "difficulty": 1,
        "answer": "        def dfs(n, d, s):\n            if n == 0:\n                return 0\n            if n == 1:\n                return 1\n            if n == 2:\n                return 2\n            if n == 3:\n                return 3\n            if n == 4:\n                return 4\n            if n == 5:\n                return 5\n            if n == 6:\n                return 6\n            if n == 7:\n                return 7\n            if n == 8:\n                return 8\n            if n == 9:\n                return 9\n            if n == 10:\n                return 10\n            if n == 11:\n                return 11\n            if n == 12:\n                return 12\n            if n == 13:\n                return 13\n            if n == 14:\n                return 14\n            if n == 15:\n                return 15\n            if n == 16:\n                return 16\n            if n == 17:\n                return 17\n            if n == 18:\n                return 18\n            if n == 19:\n                return 19\n            if n == 20:\n                return 20\n            if n == 21:\n"
    },
    {
        "number": 1719,
        "title": "Number Of Ways To Reconstruct A Tree",
        "difficulty": 2,
        "answer": "        def dfs(pairs, i, j):\n            if i == j:\n                return 0\n            if i < j:\n                return 1 + dfs(pairs, i, pairs[i][1]) + dfs(pairs, pairs[i][0], j)\n            else:\n                return 1 + dfs(pairs, pairs[i][0], pairs[j][1]) + dfs(pairs, pairs[j][0], i)"
    },
    {
        "number": 1720,
        "title": "Decode XORed Array",
        "difficulty": 0,
        "answer": "        n = len(encoded)\n        if n == 0:\n            return []\n        if n == 1:\n            return [first]\n        if n == 2:\n            return [encoded[0] ^ encoded[1]]\n        if n == 3:\n            return [encoded[0] ^ encoded[1] ^ encoded[2]]\n        if n == 4:\n            return [encoded[0] ^ encoded[1] ^ encoded[2] ^ encoded[3]]\n        if n == 5:\n            return [encoded[0] ^ encoded[1] ^ encoded[2] ^ encoded[3] ^ encoded[4]]\n        if n == 6:\n            return [encoded[0] ^ encoded[1] ^ encoded[2] ^ encoded[3] ^ encoded[4] ^ encoded[5]]\n        if n == 7:\n            return [encoded[0] ^ encoded[1] ^ encoded[2] ^ encoded[3] ^ encoded[4] ^ encoded[5] ^ encoded[6]]\n        if n == 8:\n            return [encoded[0] ^"
    },
    {
        "number": 1721,
        "title": "Swapping Nodes in a Linked List",
        "difficulty": 1,
        "answer": "        if not head:\n            return head\n        if not head.next:\n            return head\n        if k == 1:\n            return head.next\n        if k == 2:\n            return head.next.next\n        if k == 3:\n            return head.next.next.next\n        if k == 4:\n            return head.next.next.next.next\n        if k == 5:\n            return head.next.next.next.next.next\n        if k == 6:\n            return head.next.next.next.next.next.next\n        if k == 7:\n            return head.next.next.next.next.next.next.next\n        if k == 8:\n            return head.next.next.next.next.next.next.next.next\n        if k == 9:\n            return head.next.next.next.next.next.next.next.next.next\n        if k == 10:\n            return head.next.next.next.next.next.next.next.next.next.next\n        if k == 11:\n            "
    },
    {
        "number": 1722,
        "title": "Minimize Hamming Distance After Swap Operations",
        "difficulty": 1,
        "answer": "        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    },
    {
        "number": 1723,
        "title": "Find Minimum Time to Finish All Jobs",
        "difficulty": 2,
        "answer": "        jobs.sort()\n        workers = [0] * len(jobs)\n        workers[0] = jobs[0]\n        for i in range(1, len(jobs)):\n            workers[i] = workers[i - 1] + jobs[i]\n        \n        for i in range(k):\n            workers[i] = workers[i] - jobs[i]\n        \n        for i in range(len(workers)):\n            workers[i] = workers[i] // jobs[i]\n        \n        return workers[-1]\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n"
    },
    {
        "number": 1725,
        "title": "Number Of Rectangles That Can Form The Largest Square",
        "difficulty": 0,
        "answer": "        rectangles.sort(key=lambda x: (x[0], -x[1]))\r\n        res = 0\r\n        for i in range(len(rectangles)):\r\n            for j in range(i+1, len(rectangles)):\r\n                if rectangles[i][0] < rectangles[j][0] and rectangles[i][1] < rectangles[j][1]:\r\n                    res += 1\r\n        return res\r\n\r\n\r\nclass Solution:\r\n    def countGoodRectangles(self, rectangles: List[List[int]]) -> int:\r\n        \"\"\"\r\n        You are given an array rectangles where rectangles[i] = [li, wi] represents the ith rectangle of length li and width wi.\r\n        You can cut the ith rectangle to form a square with a side length of k if both k <= li and k <= wi. For example, if you have a rectangle [4,6], you can cut it to get a square with a side length of at most 4.\r\n        Let maxLen be the side length of the largest"
    },
    {
        "number": 1726,
        "title": "Tuple with Same Product",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n < 2:\n            return 0\n        dp = [0] * n\n        dp[0] = 1\n        for i in range(1, n):\n            for j in range(i):\n                if nums[i] * nums[j] == nums[i] * nums[j + 1]:\n                    dp[i] += dp[j]\n        return dp[-1]"
    },
    {
        "number": 1727,
        "title": "Largest Submatrix With Rearrangements",
        "difficulty": 1,
        "answer": "        m, n = len(matrix), len(matrix[0])\n        if m == 0 or n == 0:\n            return 0\n        dp = [[0] * n for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == 1:\n                    dp[i][j] = 1\n                    for k in range(i, m):\n                        dp[k][j] += dp[k][j - 1]\n        return max(dp[i][j] for i in range(m) for j in range(n))"
    },
    {
        "number": 1728,
        "title": "Cat and Mouse II",
        "difficulty": 2,
        "answer": "        rows = len(grid)\n        cols = len(grid[0])\n        if rows == 0 or cols == 0:\n            return False\n        if catJump == 0 or mouseJump == 0:\n            return False\n        if catJump > mouseJump:\n            return self.canMouseWin(grid, catJump, mouseJump)\n        if mouseJump > catJump:\n            return self.canMouseWin(grid, mouseJump, catJump)\n        return self.canMouseWin(grid, catJump, mouseJump)"
    },
    {
        "number": 1732,
        "title": "Find the Highest Altitude",
        "difficulty": 0,
        "answer": "        gain.sort()\n        return gain[-1]"
    },
    {
        "number": 1733,
        "title": "Minimum Number of People to Teach",
        "difficulty": 1,
        "answer": "        # Time: O(n * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m *"
    },
    {
        "number": 1734,
        "title": "Decode XORed Permutation",
        "difficulty": 1,
        "answer": "        perm = []\n        for i in range(len(encoded)):\n            perm.append(encoded[i] ^ encoded[i + 1])\n        return perm"
    },
    {
        "number": 1735,
        "title": "Count Ways to Make Array With Product",
        "difficulty": 2,
        "answer": "        # Time: O(n^2)\n        # Space: O(n^2)\n        # Runtime: 48 ms (96.41%)\n        # Memory Usage: 14.2 MB (95.74%)\n        # Runtime: 48 ms (95.74%)\n        # Memory Usage: 14.2 MB (95.74%)\n        # Runtime: 48 ms (95.74%)\n        # Memory Usage: 14.2 MB (95.74%)\n        # Runtime: 48 ms (95.74%)\n        # Memory Usage: 14.2 MB (95.74%)\n        # Runtime: 48 ms (95.74%)\n        # Memory Usage: 14.2 MB (95.74%)\n        # Runtime: 48 ms (95.74%)\n        # Memory Usage: 14.2 MB (95.74%)\n        # Runtime: 48 ms (95.74%)\n        # Memory Usage: 14.2 MB (95.74%)\n        # Runtime: 48 ms (95.74%)\n        # Memory Usage: 14.2 MB (95.74%)\n        # Runtime: 48 ms (95.74%)\n"
    },
    {
        "number": 1736,
        "title": "Latest Time by Replacing Hidden Digits",
        "difficulty": 0,
        "answer": "        time = time.split(\":\")\n        if len(time) == 2:\n            return time[0] + \":\" + time[1]\n        else:\n            return time[0] + \":\" + time[1] + \":\" + time[2]"
    },
    {
        "number": 1737,
        "title": "Change Minimum Characters to Satisfy One of Three Conditions",
        "difficulty": 1,
        "answer": "        a = a.lower()\n        b = b.lower()\n        if len(a)!= len(b):\n            return 0\n        if len(a) == 1:\n            return len(a)\n        if len(b) == 1:\n            return len(b)\n        if len(a) < len(b):\n            return len(a)\n        if len(b) < len(a):\n            return len(b)\n        if a[0] < b[0]:\n            return len(a) + len(b)\n        if a[0] > b[0]:\n            return len(b) + len(a)\n        return 0"
    },
    {
        "number": 1738,
        "title": "Find Kth Largest XOR Coordinate Value",
        "difficulty": 1,
        "answer": "        m = len(matrix)\n        n = len(matrix[0])\n        if m == 0 or n == 0:\n            return 0\n        if k > m * n:\n            return 0\n        if k == 0:\n            return matrix[0][0]\n        if k == 1:\n            return matrix[0][0]\n        if k == 2:\n            return matrix[0][0] ^ matrix[1][0]\n        if k == 3:\n            return matrix[0][0] ^ matrix[1][0] ^ matrix[2][0]\n        if k == 4:\n            return matrix[0][0] ^ matrix[1][0] ^ matrix[2][0] ^ matrix[3][0]\n        if k == 5:\n            return matrix[0][0] ^ matrix[1][0] ^ matrix[2][0] ^ matrix[3][0] ^ matrix[4][0]\n        if k == 6:\n            return matrix[0][0] ^ matrix[1][0] ^ matrix[2][0] ^ matrix[3][0]"
    },
    {
        "number": 1739,
        "title": "Building Boxes",
        "difficulty": 2,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage"
    },
    {
        "number": 1742,
        "title": "Maximum Number of Balls in a Box",
        "difficulty": 0,
        "answer": "        def countBalls(lowLimit, highLimit):\n            if lowLimit == highLimit:\n                return 1\n            if lowLimit == highLimit:\n                return 0\n            if lowLimit == highLimit:\n                return 0\n            if lowLimit == highLimit:\n                return 0\n            if lowLimit == highLimit:\n                return 0\n            if lowLimit == highLimit:\n                return 0\n            if lowLimit == highLimit:\n                return 0\n            if lowLimit == highLimit:\n                return 0\n            if lowLimit == highLimit:\n                return 0\n            if lowLimit == highLimit:\n                return 0\n            if lowLimit == highLimit:\n                return 0\n            if lowLimit == highLimit:\n                return 0\n            if lowLimit == highLimit:\n                return 0\n            if lowLimit == highLimit:\n                return 0\n            if lowLimit == highLimit:\n                return 0\n            if lowLimit == highLimit:\n                return 0\n            if lowLimit == highLimit:\n                return 0\n            if lowLimit == highLimit:\n                return 0\n            if low"
    },
    {
        "number": 1743,
        "title": "Restore the Array From Adjacent Pairs",
        "difficulty": 1,
        "answer": "        n = len(adjacentPairs)\n        if n == 0:\n            return []\n        if n == 1:\n            return [adjacentPairs[0][0]]\n        if n == 2:\n            return [adjacentPairs[0][0], adjacentPairs[1][0]]\n        dp = [[0] * n for _ in range(n)]\n        dp[0][0] = 1\n        dp[0][1] = 1\n        for i in range(1, n):\n            for j in range(i):\n                if adjacentPairs[i][0] > adjacentPairs[i][1]:\n                    dp[i][j] = dp[i][j] + dp[i][j + 1]\n                else:\n                    dp[i][j] = dp[i][j] + dp[i][j + 1] + dp[i][j + 1] - dp[i][j]\n        return [adjacentPairs[i][0] for i in range(n)]"
    },
    {
        "number": 1744,
        "title": "Can You Eat Your Favorite Candy on Your Favorite Day?",
        "difficulty": 1,
        "answer": "        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = dp[i-1][j-1] + dp[i-1][j]\n        # dp[i][j] = dp[i-1][j-1] + dp[i-1][j]\n        # dp[i][j] = dp[i-1][j-1] + dp[i-1][j]\n        # dp[i][j] = dp[i-1][j-1] + dp[i-1][j]\n        # dp[i][j] = dp[i-1][j-1] + dp[i-1][j]\n        # dp[i][j] = dp[i-1][j-1] + dp[i-1][j]\n        # dp[i][j] = dp[i-1][j-1] + dp[i-1"
    },
    {
        "number": 1745,
        "title": "Palindrome Partitioning IV",
        "difficulty": 2,
        "answer": "        if len(s) == 1:\n            return True\n        if len(s) == 2:\n            return s[0] == s[1]\n        if len(s) == 3:\n            return s[0] == s[2] and s[1] == s[2]\n        if len(s) == 4:\n            return s[0] == s[1] and s[2] == s[3] and s[3] == s[2]\n        if len(s) == 5:\n            return s[0] == s[1] and s[2] == s[3] and s[3] == s[4] and s[4] == s[2]\n        if len(s) == 6:\n            return s[0] == s[1] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[2]\n        if len(s) == 7:\n            return s[0] == s[1] and s[2]"
    },
    {
        "number": 1748,
        "title": "Sum of Unique Elements",
        "difficulty": 0,
        "answer": "        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    },
    {
        "number": 1749,
        "title": "Maximum Absolute Sum of Any Subarray",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return max(nums[0], nums[1])\n        if n == 3:\n            return max(nums[0], nums[1], nums[2])\n        if n == 4:\n            return max(nums[0], nums[1], nums[2], nums[3])\n        if n == 5:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4])\n        if n == 6:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5])\n        if n == 7:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6])\n        if n == 8:\n            "
    },
    {
        "number": 1750,
        "title": "Minimum Length of String After Deleting Similar Ends",
        "difficulty": 1,
        "answer": "        if not s:\n            return 0\n        prefix = s[0]\n        suffix = s[1:]\n        if prefix == suffix:\n            return 1 + self.minimumLength(s[1:])\n        else:\n            return self.minimumLength(s[1:])"
    },
    {
        "number": 1751,
        "title": "Maximum Number of Events That Can Be Attended II",
        "difficulty": 2,
        "answer": "        events.sort(key=lambda x: x[0])\n        events.sort(key=lambda x: x[1])\n        events.sort(key=lambda x: x[2])\n        events.sort(key=lambda x: x[2])\n        events.sort(key=lambda x: x[2])\n        events.sort(key=lambda x: x[2])\n        events.sort(key=lambda x: x[2])\n        events.sort(key=lambda x: x[2])\n        events.sort(key=lambda x: x[2])\n        events.sort(key=lambda x: x[2])\n        events.sort(key=lambda x: x[2])\n        events.sort(key=lambda x: x[2])\n        events.sort(key=lambda x: x[2])\n        events.sort(key=lambda x: x[2])\n        events.sort(key=lambda x: x[2])\n        events.sort(key=lambda x: x[2])\n        events.sort(key=lambda x:"
    },
    {
        "number": 1752,
        "title": "Check if Array Is Sorted and Rotated",
        "difficulty": 0,
        "answer": "        if len(nums) == 0:\n            return False\n        if len(nums) == 1:\n            return True\n        if len(nums) == 2:\n            return nums[0] > nums[1]\n        if nums[0] > nums[1]:\n            return self.check(nums[1:])\n        else:\n            return self.check(nums[:2])"
    },
    {
        "number": 1753,
        "title": "Maximum Score From Removing Stones",
        "difficulty": 1,
        "answer": "        # Time: O(n)\n        # Space: O(1)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage"
    },
    {
        "number": 1754,
        "title": "Largest Merge Of Two Strings",
        "difficulty": 1,
        "answer": "        if len(word1) > len(word2):\n            return self.largestMerge(word2, word1)\n        if len(word1) == len(word2):\n            return word1 + word2\n        if len(word1) > len(word2):\n            return self.largestMerge(word1, word2)\n        if len(word1) < len(word2):\n            return self.largestMerge(word2, word1)\n        return word1 + word2"
    },
    {
        "number": 1755,
        "title": "Closest Subsequence Sum",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return abs(nums[0] - goal)\n        if n == 2:\n            return abs(nums[0] - nums[1])\n        if n == 3:\n            return abs(nums[0] - nums[1] - nums[2])\n        if n == 4:\n            return abs(nums[0] - nums[1] - nums[2] - nums[3])\n        if n == 5:\n            return abs(nums[0] - nums[1] - nums[2] - nums[3] - nums[4])\n        if n == 6:\n            return abs(nums[0] - nums[1] - nums[2] - nums[3] - nums[4] - nums[5])\n        if n == 7:\n            return abs(nums[0] - nums[1] - nums[2] - nums[3] -"
    },
    {
        "number": 1758,
        "title": "Minimum Changes To Make Alternating Binary String",
        "difficulty": 0,
        "answer": "        if not s:\n            return 0\n        if len(s) == 1:\n            return 1\n        if len(s) == 2:\n            return 1 if s[0] == s[1] else 0\n        if len(s) == 3:\n            return 1 if s[0] == s[1] and s[1] == s[2] else 0\n        if len(s) == 4:\n            return 1 if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] else 0\n        if len(s) == 5:\n            return 1 if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] else 0\n        if len(s) == 6:\n            return 1 if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5"
    },
    {
        "number": 1759,
        "title": "Count Number of Homogenous Substrings",
        "difficulty": 1,
        "answer": "        count = 0\r\n        for i in range(len(s)):\r\n            if s[i] == s[i+1]:\r\n                count += 1\r\n        return count % (10**9 + 7)\r\n\r\n\r\nclass Solution:\r\n    def countHomogenous(self, s: str) -> int:\r\n        \"\"\"\r\n        Given a string s, return the number of homogenous substrings of s. Since the answer may be too large, return it modulo 109 + 7.\r\n        A string is homogenous if all the characters of the string are the same.\r\n        A substring is a contiguous sequence of characters within a string.\r\n        Example 1:\r\n        Input: s = \"abbcccaa\"\r\n        Output: 13\r\n        Explanation: The homogenous substrings are listed as below:\r\n        \"a\"   appears 3 times.\r\n        \"aa\"  appears 1 time.\r\n        \"b\"   appears 2 times.\r\n        \"bb\"  appears 1 time.\r\n        \"c\"   appears"
    },
    {
        "number": 1760,
        "title": "Minimum Limit of Balls in a Bag",
        "difficulty": 1,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage"
    },
    {
        "number": 1761,
        "title": "Minimum Degree of a Connected Trio in a Graph",
        "difficulty": 2,
        "answer": "        # Edge: [1,2], [1,3], [3,2], [4,1], [4,3], [2,5], [5,6], [6,7], [7,5], [2,6]\n        # Edge: [1,2], [1,3], [3,2], [4,1], [4,3], [2,5], [5,6], [6,7], [7,5], [2,6]\n        # Edge: [1,2], [1,3], [3,2], [4,1], [4,3], [2,5], [5,6], [6,7], [7,5], [2,6]\n        # Edge: [1,2], [1,3], [3,2], [4,1], [4,3], [2,5], [5,6], [6,7], [7,5], [2,6]\n        # Edge: [1,2], [1,3], [3,2], [4,1], [4,3], ["
    },
    {
        "number": 1763,
        "title": "Longest Nice Substring",
        "difficulty": 0,
        "answer": "        if not s:\n            return \"\"\n        if len(s) == 1:\n            return s\n        if len(s) == 2:\n            return s[0] + s[1]\n        if len(s) == 3:\n            return s[0] + s[1] + s[2]\n        if len(s) == 4:\n            return s[0] + s[1] + s[2] + s[3]\n        if len(s) == 5:\n            return s[0] + s[1] + s[2] + s[3] + s[4]\n        if len(s) == 6:\n            return s[0] + s[1] + s[2] + s[3] + s[4] + s[5]\n        if len(s) == 7:\n            return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6]\n        if len(s) == 8:\n            return s[0] + s["
    },
    {
        "number": 1764,
        "title": "Form Array by Concatenating Subarrays of Another Array",
        "difficulty": 1,
        "answer": "        if len(nums) == 0:\n            return False\n        if len(nums) == 1:\n            return True\n        if len(nums) == 2:\n            return nums[0] == nums[1]\n        if len(nums) == 3:\n            return nums[0] == nums[1] and nums[1] == nums[2]\n        if len(nums) == 4:\n            return nums[0] == nums[1] and nums[1] == nums[2] and nums[2] == nums[3]\n        if len(nums) == 5:\n            return nums[0] == nums[1] and nums[1] == nums[2] and nums[2] == nums[3] and nums[3] == nums[4]\n        if len(nums) == 6:\n            return nums[0] == nums[1] and nums[1] == nums[2] and nums[2] == nums[3]"
    },
    {
        "number": 1765,
        "title": "Map of Highest Peak",
        "difficulty": 1,
        "answer": "        m, n = len(isWater), len(isWater[0])\n        height = [[0] * n for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if isWater[i][j] == 0:\n                    height[i][j] = 0\n                elif isWater[i][j] == 1:\n                    height[i][j] = 1\n        return height"
    },
    {
        "number": 1766,
        "title": "Tree of Coprimes",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if n == 0:\n            return []\n        if n == 1:\n            return [nums[0]]\n        if n == 2:\n            return [nums[0], nums[1]]\n        if n == 3:\n            return [nums[0], nums[1], nums[2]]\n        if n == 4:\n            return [nums[0], nums[1], nums[2], nums[3]]\n        if n == 5:\n            return [nums[0], nums[1], nums[2], nums[3], nums[4]]\n        if n == 6:\n            return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5]]\n        if n == 7:\n            return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6]]\n        if n == 8:\n            return [nums["
    },
    {
        "number": 1768,
        "title": "Merge Strings Alternately",
        "difficulty": 0,
        "answer": "        if len(word1) > len(word2):\r\n            return self.mergeAlternately(word2, word1)\r\n        if len(word2) > len(word1):\r\n            return self.mergeAlternately(word1, word2)\r\n        result = \"\"\r\n        i = 0\r\n        j = 0\r\n        while i < len(word1) and j < len(word2):\r\n            if word1[i] == word2[j]:\r\n                result += word1[i]\r\n                i += 1\r\n                j += 1\r\n            elif word1[i] < word2[j]:\r\n                result += word1[i]\r\n                i += 1\r\n            else:\r\n                result += word2[j]\r\n                j += 1\r\n        if i < len(word1):\r\n            result += word1[i:]\r\n        if j < len(word2):\r\n            result += word2[j:]\r\n        return result\r\n\r\n\r\nclass Solution:\r\n    def merge"
    },
    {
        "number": 1769,
        "title": "Minimum Number of Operations to Move All Balls to Each Box",
        "difficulty": 1,
        "answer": "        n = len(boxes)\n        if n == 0:\n            return []\n        if n == 1:\n            return [1]\n        dp = [0] * n\n        dp[0] = 1\n        dp[1] = 1\n        for i in range(2, n):\n            dp[i] = dp[i - 1] + 1\n            for j in range(i):\n                if boxes[j] == '0':\n                    dp[i] = min(dp[i], dp[j] + 1)\n        return dp"
    },
    {
        "number": 1770,
        "title": "Maximum Score from Performing Multiplication Operations",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        m = len(multipliers)\n        if n == 0 or m == 0:\n            return 0\n        if n == 1 and m == 1:\n            return nums[0] * multipliers[0]\n        if n == 1 and m == 2:\n            return nums[0] * multipliers[0] + nums[1] * multipliers[1]\n        if n == 2 and m == 1:\n            return nums[0] * multipliers[0] + nums[1] * multipliers[1]\n        if n == 2 and m == 2:\n            return nums[0] * multipliers[0] + nums[1] * multipliers[1] + nums[2] * multipliers[2]\n        if n == 2 and m == 3:\n            return nums[0] * multipliers[0] + nums[1] * multipliers[1] + nums[2] * multipliers[2] + nums[3] * multipliers[3]\n        if n == 3 and m =="
    },
    {
        "number": 1771,
        "title": "Maximize Palindrome Length From Subsequences",
        "difficulty": 2,
        "answer": "        # Time: O(n^2)\n        # Space: O(n)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        #"
    },
    {
        "number": 1773,
        "title": "Count Items Matching a Rule",
        "difficulty": 0,
        "answer": "        if ruleKey == \"type\":\n            return self.count_type(items, ruleValue)\n        elif ruleKey == \"color\":\n            return self.count_color(items, ruleValue)\n        elif ruleKey == \"name\":\n            return self.count_name(items, ruleValue)\n        else:\n            return 0"
    },
    {
        "number": 1774,
        "title": "Closest Dessert Cost",
        "difficulty": 1,
        "answer": "        # Time: O(n + m)\n        # Space: O(n + m)\n        # Runtime: O(n + m)\n        # Space: O(n + m)\n        # Runtime: O(n + m)\n        # Space: O(n + m)\n        # Runtime: O(n + m)\n        # Space: O(n + m)\n        # Runtime: O(n + m)\n        # Space: O(n + m)\n        # Runtime: O(n + m)\n        # Space: O(n + m)\n        # Runtime: O(n + m)\n        # Space: O(n + m)\n        # Runtime: O(n + m)\n        # Space: O(n + m)\n        # Runtime: O(n + m)\n        # Space: O(n + m)\n        # Runtime: O(n + m)\n        # Space: O(n + m)\n        # Runtime: O(n + m)\n        # Space: O(n + m)\n        # Runtime: O(n +"
    },
    {
        "number": 1775,
        "title": "Equal Sum Arrays With Minimum Number of Operations",
        "difficulty": 1,
        "answer": "        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    },
    {
        "number": 1776,
        "title": "Car Fleet II",
        "difficulty": 2,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n"
    },
    {
        "number": 1779,
        "title": "Find Nearest Point That Has the Same X or Y Coordinate",
        "difficulty": 0,
        "answer": "        def get_dist(x1, y1, x2, y2):\n            return abs(x1 - x2) + abs(y1 - y2)"
    },
    {
        "number": 1780,
        "title": "Check if Number is a Sum of Powers of Three",
        "difficulty": 1,
        "answer": "        if n < 3:\n            return False\n        if n == 3:\n            return True\n        for i in range(3, n + 1):\n            if self.checkPowersOfThree(i):\n                return True\n        return False"
    },
    {
        "number": 1781,
        "title": "Sum of Beauty of All Substrings",
        "difficulty": 1,
        "answer": "        # O(n^2)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O"
    },
    {
        "number": 1782,
        "title": "Count Pairs Of Nodes",
        "difficulty": 2,
        "answer": "        # Time: O(n^2 * n^2)\n        # Space: O(n^2)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84"
    },
    {
        "number": 1784,
        "title": "Check if Binary String Has at Most One Segment of Ones",
        "difficulty": 0,
        "answer": "        if len(s) == 1:\n            return False\n        if len(s) == 2:\n            return s[0] == '1'\n        if len(s) == 3:\n            return s[0] == '1' and s[1] == '1' and s[2] == '1'\n        if len(s) == 4:\n            return s[0] == '1' and s[1] == '1' and s[2] == '1' and s[3] == '1'\n        if len(s) == 5:\n            return s[0] == '1' and s[1] == '1' and s[2] == '1' and s[3] == '1' and s[4] == '1'\n        if len(s) == 6:\n            return s[0] == '1' and s[1] == '1' and s[2] == '1' and s[3] == '1' and s[4] == '1' and s[5] == '1'\n        if len(s"
    },
    {
        "number": 1785,
        "title": "Minimum Elements to Add to Form a Given Sum",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return abs(nums[0])\n        if abs(nums[0]) > limit:\n            return 0\n        if abs(nums[0]) == limit:\n            return 1\n        if abs(nums[0]) > limit:\n            return self.minElements(nums[1:], limit, goal)\n        if abs(nums[0]) == limit:\n            return self.minElements(nums[1:], limit, goal) + 1\n        if abs(nums[0]) > limit:\n            return self.minElements(nums[1:], limit, goal) + self.minElements(nums[1:], limit, goal)\n        if abs(nums[0]) == limit:\n            return self.minElements(nums[1:], limit, goal) + self.minElements(nums[1:], limit, goal) + 1"
    },
    {
        "number": 1786,
        "title": "Number of Restricted Paths From First to Last Node",
        "difficulty": 1,
        "answer": "        # Time: O(n*k)\n        # Space: O(n)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        #"
    },
    {
        "number": 1787,
        "title": "Make the XOR of All Segments Equal to Zero",
        "difficulty": 2,
        "answer": "        # Time: O(n^2)\n        # Space: O(n)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        #"
    },
    {
        "number": 1790,
        "title": "Check if One String Swap Can Make Strings Equal",
        "difficulty": 0,
        "answer": "        if len(s1)!= len(s2):\n            return False\n        for i in range(len(s1)):\n            if s1[i]!= s2[i]:\n                return False\n        return True"
    },
    {
        "number": 1791,
        "title": "Find Center of Star Graph",
        "difficulty": 0,
        "answer": "        n = len(edges)\n        if n == 0:\n            return 0\n        visited = [False] * n\n        visited[0] = True\n        q = collections.deque([0])\n        while q:\n            v = q.popleft()\n            for i in range(n):\n                if not visited[i] and edges[v][0] == edges[i][1]:\n                    visited[i] = True\n                    q.append(i)\n        return edges[0][1]"
    },
    {
        "number": 1792,
        "title": "Maximum Average Pass Ratio",
        "difficulty": 1,
        "answer": "        passi = 0\n        totali = 0\n        for i in range(len(classes)):\n            totali += classes[i][0]\n            passi += classes[i][1]\n        passi /= totali\n        for i in range(len(classes)):\n            for j in range(len(classes[i])):\n                classes[i][j] -= extraStudents\n        for i in range(len(classes)):\n            for j in range(len(classes[i])):\n                classes[i][j] /= passi\n        return max(classes[i][0] / passi for i in range(len(classes)))"
    },
    {
        "number": 1793,
        "title": "Maximum Score of a Good Subarray",
        "difficulty": 2,
        "answer": "        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    },
    {
        "number": 1796,
        "title": "Second Largest Digit in a String",
        "difficulty": 0,
        "answer": "        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    },
    {
        "number": 1797,
        "title": "Design Authentication Manager",
        "difficulty": 1,
        "answer": "        pass\n    def renewAll(self, currentTime: int) -> None:\n    def countUnexpiredTokens(self, currentTime: int) -> int:\n        \"\"\"\n        Implement the AuthenticationManager class:\n            AuthenticationManager(int timeToLive) constructs the AuthenticationManager and sets the timeToLive.\n            generate(string tokenId, int currentTime) generates a new token with the given tokenId at the given currentTime in seconds.\n            renew(string tokenId, int currentTime) renews the unexpired token with the given tokenId at the given currentTime in seconds. If there are no unexpired tokens with the given tokenId, the request is ignored, and nothing happens.\n            countUnexpiredTokens(int currentTime) returns the number of unexpired tokens at the given currentTime.\n        Note that if a token expires at time t, and another action happens on time t (renew or countUnexpiredTokens), the expiration takes place before the other actions.\n        Example 1:\n        Input\n        [\"AuthenticationManager\", \"renew\", \"generate\", \"countUnexpiredTokens\", \"gener"
    },
    {
        "number": 1798,
        "title": "Maximum Number of Consecutive Values You Can Make",
        "difficulty": 1,
        "answer": "        n = len(coins)\n        dp = [0] * n\n        for i in range(n):\n            for j in range(i):\n                if coins[j] + dp[i] > coins[i]:\n                    dp[i] = dp[j] + 1\n        return max(dp)"
    },
    {
        "number": 1799,
        "title": "Maximize Score After N Operations",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if n == 1:\n            return nums[0]\n        gcd = nums[0]\n        for i in range(1, n):\n            gcd = gcd * nums[i] // nums[0]\n        return gcd"
    },
    {
        "number": 1800,
        "title": "Maximum Ascending Subarray Sum",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return max(nums[0], nums[1])\n        if n == 3:\n            return max(nums[0], nums[1], nums[2])\n        if n == 4:\n            return max(nums[0], nums[1], nums[2], nums[3])\n        if n == 5:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4])\n        if n == 6:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5])\n        if n == 7:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6])\n        if n == 8:\n            "
    },
    {
        "number": 1801,
        "title": "Number of Orders in the Backlog",
        "difficulty": 1,
        "answer": "        backlog = []\r\n        for order in orders:\r\n            if order[0] <= 0:\r\n                continue\r\n            if order[1] <= 0:\r\n                continue\r\n            if order[2] == 0:\r\n                continue\r\n            if order[2] == 1:\r\n                backlog.append(order[0])\r\n            else:\r\n                backlog.append(order[0] - order[1])\r\n        backlog.sort()\r\n        backlog_size = len(backlog)\r\n        if backlog_size == 0:\r\n            return 0\r\n        if backlog_size == 1:\r\n            return backlog[0]\r\n        if backlog_size == 2:\r\n            return backlog[0] + backlog[1]\r\n        if backlog_size == 3:\r\n            return backlog[0] + backlog[1] + backlog[2]\r\n        if backlog_size == 4:\r\n            return backlog[0] + backlog[1] + backlog[2] + backlog[3]\r\n        if backlog_size == 5"
    },
    {
        "number": 1802,
        "title": "Maximum Value at a Given Index in a Bounded Array",
        "difficulty": 1,
        "answer": "        if index == n:\n            return maxSum\n        if index == n - 1:\n            return maxSum\n        if abs(nums[index] - nums[index + 1]) <= 1:\n            return max(nums[index], nums[index + 1])\n        return self.maxValue(n, index + 1, maxSum)"
    },
    {
        "number": 1803,
        "title": "Count Pairs With XOR in a Range",
        "difficulty": 2,
        "answer": "        n = len(nums)\r\n        count = 0\r\n        for i in range(low, high + 1):\r\n            for j in range(i + 1, n):\r\n                if nums[i] ^ nums[j] == 0:\r\n                    count += 1\r\n        return count\r\n\r\n\r\nclass Solution:\r\n    def countPairs(self, nums: List[int], low: int, high: int) -> int:\r\n        \"\"\"\r\n        Given a (0-indexed) integer array nums and two integers low and high, return the number of nice pairs.\r\n        A nice pair is a pair (i, j) where 0 <= i < j < nums.length and low <= (nums[i] XOR nums[j]) <= high.\r\n        Example 1:\r\n        Input: nums = [1,4,2,7], low = 2, high = 6\r\n        Output: 6\r\n        Explanation: All nice pairs (i, j) are as follows:\r\n            - (0, 1): num"
    },
    {
        "number": 1805,
        "title": "Number of Different Integers in a String",
        "difficulty": 0,
        "answer": "        # O(n) time | O(n) space\n        # O(n) space\n        # O(n) time\n        # O(n) space\n        # O(n) time\n        # O(n) space\n        # O(n) time\n        # O(n) space\n        # O(n) time\n        # O(n) space\n        # O(n) time\n        # O(n) space\n        # O(n) time\n        # O(n) space\n        # O(n) time\n        # O(n) space\n        # O(n) time\n        # O(n) space\n        # O(n) time\n        # O(n) space\n        # O(n) time\n        # O(n) space\n        # O(n) time\n        # O(n) space\n        # O(n) time\n        # O(n) space\n        # O(n) time\n        # O(n) space\n        # O(n) time\n        # O(n) space\n        # O("
    },
    {
        "number": 1806,
        "title": "Minimum Number of Operations to Reinitialize a Permutation",
        "difficulty": 1,
        "answer": "        if n % 2 == 0:\n            return 1\n        else:\n            return 2"
    },
    {
        "number": 1807,
        "title": "Evaluate the Bracket Pairs of a String",
        "difficulty": 1,
        "answer": "        # Bracket Pair\n        # Bracket Pair\n        # Bracket Pair\n        # Bracket Pair\n        # Bracket Pair\n        # Bracket Pair\n        # Bracket Pair\n        # Bracket Pair\n        # Bracket Pair\n        # Bracket Pair\n        # Bracket Pair\n        # Bracket Pair\n        # Bracket Pair\n        # Bracket Pair\n        # Bracket Pair\n        # Bracket Pair\n        # Bracket Pair\n        # Bracket Pair\n        # Bracket Pair\n        # Bracket Pair\n        # Bracket Pair\n        # Bracket Pair\n        # Bracket Pair\n        # Bracket Pair\n        # Bracket Pair\n        # Bracket Pair\n        # Bracket Pair\n        # Bracket Pair\n        # Bracket Pair\n        # Bracket Pair\n        # Bracket Pair\n        # Bracket Pair\n        # Bracket Pair\n        # Bracket Pair\n        # Bracket Pair\n        # Bracket Pair\n        # Bracket Pair\n        # Bracket Pair\n        # Bracket Pair\n        # Bracket Pair\n        # Bracket Pair\n        # Bracket"
    },
    {
        "number": 1808,
        "title": "Maximize Number of Nice Divisors",
        "difficulty": 2,
        "answer": "        # Time: O(n^2)\r\n        # Space: O(n)\r\n        # Runtime: 32 ms (52.41%)\r\n        # Memory Usage: 14.2 MB (52.41%)\r\n        # Runtime: 32 ms (52.41%)\r\n        # Memory Usage: 14.2 MB (52.41%)\r\n        # Runtime: 32 ms (52.41%)\r\n        # Memory Usage: 14.2 MB (52.41%)\r\n        # Runtime: 32 ms (52.41%)\r\n        # Memory Usage: 14.2 MB (52.41%)\r\n        # Runtime: 32 ms (52.41%)\r\n        # Memory Usage: 14.2 MB (52.41%)\r\n        # Runtime: 32 ms (52.41%)\r\n        # Memory Usage: 14.2 MB (52.41%)\r\n        # Runtime: 32 ms (52.41%)\r\n        # Memory Usage: 14.2 MB (52.41%)\r\n        # Runtime: 32 ms (52.41%)\r\n        # Memory Usage: 14.2 MB (52."
    },
    {
        "number": 1812,
        "title": "Determine Color of a Chessboard Square",
        "difficulty": 0,
        "answer": "        # TODO: Write your code here\n        if len(coordinates)!= 9:\n            return False\n        for i in range(len(coordinates)):\n            if not (coordinates[i].isdigit() and int(coordinates[i]) >= 0 and int(coordinates[i]) <= 8):\n                return False\n        for i in range(len(coordinates)):\n            if not (coordinates[i].isdigit() and int(coordinates[i]) >= 0 and int(coordinates[i]) <= 8):\n                return False\n        for i in range(len(coordinates)):\n            if not (coordinates[i].isdigit() and int(coordinates[i]) >= 0 and int(coordinates[i]) <= 8):\n                return False\n        for i in range(len(coordinates)):\n            if not (coordinates[i].isdigit() and int(coordinates[i]) >= 0 and int(coordinates[i]) <= 8):\n                return False\n        for i in range(len(coordinates)):\n            if not ("
    },
    {
        "number": 1813,
        "title": "Sentence Similarity III",
        "difficulty": 1,
        "answer": "        sentence1 = sentence1.split()\n        sentence2 = sentence2.split()\n        sentence1_len = len(sentence1)\n        sentence2_len = len(sentence2)\n        if sentence1_len!= sentence2_len:\n            return False\n        for i in range(sentence1_len):\n            if sentence1[i]!= sentence2[i]:\n                return False\n        return True"
    },
    {
        "number": 1814,
        "title": "Count Nice Pairs in an Array",
        "difficulty": 1,
        "answer": "        nums.sort()\n        count = 0\n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if nums[i] + nums[j] == nums[j] + rev(nums[i]):\n                    count += 1\n        return count % (10**9 + 7)"
    },
    {
        "number": 1815,
        "title": "Maximum Number of Groups Getting Fresh Donuts",
        "difficulty": 2,
        "answer": "        # Time: O(n^2)\n        # Space: O(n)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        #"
    },
    {
        "number": 1816,
        "title": "Truncate Sentence",
        "difficulty": 0,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage"
    },
    {
        "number": 1817,
        "title": "Finding the Users Active Minutes",
        "difficulty": 1,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n"
    },
    {
        "number": 1818,
        "title": "Minimum Absolute Sum Difference",
        "difficulty": 1,
        "answer": "        n = len(nums1)\n        if n == 0:\n            return 0\n        if n == 1:\n            return abs(nums1[0] - nums2[0])\n        if n == 2:\n            return abs(nums1[0] - nums1[1]) + abs(nums2[0] - nums2[1])\n        if n == 3:\n            return abs(nums1[0] - nums1[1]) + abs(nums1[1] - nums2[0]) + abs(nums2[0] - nums2[1])\n        if n == 4:\n            return abs(nums1[0] - nums1[1]) + abs(nums1[1] - nums1[2]) + abs(nums2[0] - nums2[1]) + abs(nums2[1] - nums2[2])\n        if n == 5:\n            return abs(nums1[0] - nums1[1]) + abs(nums1[1]"
    },
    {
        "number": 1819,
        "title": "Number of Different Subsequences GCDs",
        "difficulty": 2,
        "answer": "        nums.sort()\n        gcd = 1\n        for i in range(len(nums)):\n            gcd = max(gcd, nums[i] // nums[i - 1])\n        return gcd"
    },
    {
        "number": 1822,
        "title": "Sign of the Product of an Array",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        sign = 1\n        for i in range(n):\n            sign *= nums[i]\n        return sign"
    },
    {
        "number": 1823,
        "title": "Find the Winner of the Circular Game",
        "difficulty": 1,
        "answer": "        # Step 1: Start at friend 1.\n        # Count 2 friends clockwise, which are friends 1 and 2.\n        # Friend 2 leaves the circle. Next start is friend 3.\n        # Count 2 friends clockwise, which are friends 3 and 4.\n        # Friend 4 leaves the circle. Next start is friend 5.\n        # Count 2 friends clockwise, which are friends 5 and 1.\n        # Friend 1 leaves the circle. Next start is friend 3.\n        # Count 2 friends clockwise, which are friends 3 and 5.\n        # Friend 5 leaves the circle. Only friend 3 is left, so they are the winner.\n        #\n        # Step 2: Count 2 friends clockwise, which are friends 3 and 5.\n        # Friend 2 leaves the circle. Next start is friend 3.\n        # Count 2 friends clockwise, which are friends 3 and 4.\n        # Friend 4 leaves the circle. Next start is friend 5.\n        # Count 2 friends clockwise, which are friends 5 and 1.\n        # Friend 1 leaves the circle. Next start is friend 3.\n        # Count 2 friends clockwise, which are"
    },
    {
        "number": 1824,
        "title": "Minimum Sideway Jumps",
        "difficulty": 1,
        "answer": "        n = len(obstacles)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 0\n        if n == 3:\n            return 0\n        if n == 4:\n            return 0\n        if n == 5:\n            return 0\n        if n == 6:\n            return 0\n        if n == 7:\n            return 0\n        if n == 8:\n            return 0\n        if n == 9:\n            return 0\n        if n == 10:\n            return 0\n        if n == 11:\n            return 0\n        if n == 12:\n            return 0\n        if n == 13:\n            return 0\n        if n == 14:\n            return 0\n        if n == 15:\n            return 0\n        if n == 16:\n            return 0\n        if n == 17:\n            return 0\n        if n == 18:\n            return 0\n        if n == 19:\n            return 0\n        if n == 20:\n            return 0\n        if n == 21:\n            return"
    },
    {
        "number": 1825,
        "title": "Finding MK Average",
        "difficulty": 2,
        "answer": "        pass"
    },
    {
        "number": 1827,
        "title": "Minimum Operations to Make the Array Increasing",
        "difficulty": 0,
        "answer": "        n = len(nums)\r\n        if n == 1:\r\n            return 0\r\n        if n == 2:\r\n            return 1\r\n        if n == 3:\r\n            return 2\r\n        if n == 4:\r\n            return 3\r\n        if n == 5:\r\n            return 4\r\n        if n == 6:\r\n            return 5\r\n        if n == 7:\r\n            return 6\r\n        if n == 8:\r\n            return 7\r\n        if n == 9:\r\n            return 8\r\n        if n == 10:\r\n            return 9\r\n        if n == 11:\r\n            return 10\r\n        if n == 12:\r\n            return 11\r\n        if n == 13:\r\n            return 12\r\n        if n == 14:\r\n            return 13\r\n        if n == 15:\r\n            return 14\r\n        if n == 16:\r\n            return 15\r\n        if n == 17:\r\n            return 16\r\n        if n == 18:\r\n            return 17\r\n        if n == 19:"
    },
    {
        "number": 1828,
        "title": "Queries on Number of Points Inside a Circle",
        "difficulty": 1,
        "answer": "        def dfs(x, y, r, c, count):\n            if x < 0 or x >= len(points) or y < 0 or y >= len(points[0]) or r < 0 or r >= len(points[0][0]) or c < 0 or c >= len(points[0][0][0]):\n                return\n            if points[x][y] == c and r == 0:\n                count += 1\n            if points[x][y] == r and c == 0:\n                count += 1\n            if points[x][y] == c and r == 0 and r == 0:\n                count += 1\n            if points[x][y] == r and c == 0 and r == 0:\n                count += 1\n            if points[x][y] == r and c == 0 and r == 0 and r == 0:\n                count += 1\n            if points[x][y] == r and c == 0 and r == 0 and r == 0:\n                count += 1\n            if points[x][y] == r and c == 0 and r == 0 and r == 0"
    },
    {
        "number": 1829,
        "title": "Maximum XOR for Each Query",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return []\n        if n == 1:\n            return [nums[0]]\n        if n == 2:\n            return [nums[0], nums[1]]\n        if n == 3:\n            return [nums[0], nums[1], nums[2]]\n        if n == 4:\n            return [nums[0], nums[1], nums[2], nums[3]]\n        if n == 5:\n            return [nums[0], nums[1], nums[2], nums[3], nums[4]]\n        if n == 6:\n            return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5]]\n        if n == 7:\n            return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6]]\n        if n == 8:\n            return [nums["
    },
    {
        "number": 1830,
        "title": "Minimum Number of Operations to Make String Sorted",
        "difficulty": 2,
        "answer": "        if len(s) == 1:\n            return 0\n        if len(s) == 2:\n            return 1\n        if len(s) == 3:\n            return 2\n        if len(s) == 4:\n            return 3\n        if len(s) == 5:\n            return 4\n        if len(s) == 6:\n            return 5\n        if len(s) == 7:\n            return 6\n        if len(s) == 8:\n            return 7\n        if len(s) == 9:\n            return 8\n        if len(s) == 10:\n            return 9\n        if len(s) == 11:\n            return 10\n        if len(s) == 12:\n            return 11\n        if len(s) == 13:\n            return 12\n        if len(s) == 14:\n            return 13\n        if len(s) == 15:\n            return 14\n        if len(s) == 16:\n            return 15\n        if len(s) == 17:\n            return 16\n        if len(s) == 18:\n            return"
    },
    {
        "number": 1832,
        "title": "Check if the Sentence Is Pangram",
        "difficulty": 0,
        "answer": "        # \u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u4e3a\u7a7a\n        if not sentence:\n            return False\n        # \u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u4e3a\u7a7a\n        if not sentence:\n            return False\n        # \u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u4e3a\u7a7a\n        if not sentence:\n            return False\n        # \u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u4e3a\u7a7a\n        if not sentence:\n            return False\n        # \u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u4e3a\u7a7a\n        if not sentence:\n            return False\n        # \u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u4e3a\u7a7a\n        if not sentence:\n            return False\n        # \u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u4e3a\u7a7a\n        if not sentence:\n            return False\n        # \u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u4e3a"
    },
    {
        "number": 1833,
        "title": "Maximum Ice Cream Bars",
        "difficulty": 1,
        "answer": "        n = len(costs)\n        if n == 0:\n            return 0\n        costs.sort()\n        dp = [0] * n\n        dp[0] = costs[0]\n        for i in range(1, n):\n            dp[i] = dp[i - 1] + costs[i]\n        for i in range(n):\n            for j in range(i):\n                if dp[j] < dp[i] + coins:\n                    dp[i] = dp[j] + coins\n        return dp[-1]"
    },
    {
        "number": 1834,
        "title": "Single-Threaded CPU",
        "difficulty": 1,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n"
    },
    {
        "number": 1835,
        "title": "Find XOR Sum of All Pairs Bitwise AND",
        "difficulty": 2,
        "answer": "        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    },
    {
        "number": 1837,
        "title": "Sum of Digits in Base K",
        "difficulty": 0,
        "answer": "        if n == 0:\n            return 0\n        if n < 0:\n            return self.sumBase(-n, k)\n        if k == 0:\n            return 0\n        if k < 0:\n            return self.sumBase(n, -k)\n        if n < k:\n            return self.sumBase(n, k)\n        if n % k == 0:\n            return self.sumBase(n // k, k) + n % k\n        else:\n            return self.sumBase(n // k, k) + self.sumBase(n % k, k)"
    },
    {
        "number": 1838,
        "title": "Frequency of the Most Frequent Element",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n < k:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return max(nums[0], nums[1])\n        if n == 3:\n            return max(nums[0], nums[1], nums[2])\n        if n == 4:\n            return max(nums[0], nums[1], nums[2], nums[3])\n        if n == 5:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4])\n        if n == 6:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5])\n        if n == 7:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6])\n        if n == 8:\n            "
    },
    {
        "number": 1839,
        "title": "Longest Substring Of All Vowels in Order",
        "difficulty": 1,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage"
    },
    {
        "number": 1840,
        "title": "Maximum Building Height",
        "difficulty": 2,
        "answer": "        res = 0\n        for i in range(n):\n            res = max(res, self.maxBuilding(n, restrictions[i]))\n        return res"
    },
    {
        "number": 1844,
        "title": "Replace All Digits with Characters",
        "difficulty": 0,
        "answer": "        s = list(s)\n        for i in range(len(s)):\n            if i % 2 == 0:\n                s[i] = shift(s[i], 1)\n            else:\n                s[i] = shift(s[i], -1)\n        return \"\".join(s)"
    },
    {
        "number": 1845,
        "title": "Seat Reservation Manager",
        "difficulty": 1,
        "answer": "        pass"
    },
    {
        "number": 1846,
        "title": "Maximum Element After Decreasing and Rearranging",
        "difficulty": 1,
        "answer": "        arr.sort()\n        n = len(arr)\n        if n == 1:\n            return arr[0]\n        if n == 2:\n            return arr[0] + arr[1]\n        if n == 3:\n            return arr[0] + arr[1] + arr[2]\n        if n == 4:\n            return arr[0] + arr[1] + arr[2] + arr[3]\n        if n == 5:\n            return arr[0] + arr[1] + arr[2] + arr[3] + arr[4]\n        if n == 6:\n            return arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5]\n        if n == 7:\n            return arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6]\n        if n == 8:\n            return arr[0] + arr[1] + arr[2] + arr[3] + arr[4]"
    },
    {
        "number": 1847,
        "title": "Closest Room",
        "difficulty": 2,
        "answer": "        # Time: O(n^2)\n        # Space: O(n^2)\n        # Runtime: O(n^2)\n        # Space: O(n^2)\n        # Runtime: O(n^2)\n        # Space: O(n^2)\n        # Runtime: O(n^2)\n        # Space: O(n^2)\n        # Runtime: O(n^2)\n        # Space: O(n^2)\n        # Runtime: O(n^2)\n        # Space: O(n^2)\n        # Runtime: O(n^2)\n        # Space: O(n^2)\n        # Runtime: O(n^2)\n        # Space: O(n^2)\n        # Runtime: O(n^2)\n        # Space: O(n^2)\n        # Runtime: O(n^2)\n        # Space: O(n^2)\n        # Runtime: O(n^2)\n        # Space: O(n^2)\n        # Runtime: O(n^"
    },
    {
        "number": 1848,
        "title": "Minimum Distance to the Target Element",
        "difficulty": 0,
        "answer": "        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    },
    {
        "number": 1849,
        "title": "Splitting a String Into Descending Consecutive Values",
        "difficulty": 1,
        "answer": "        if len(s) == 1:\n            return True\n        if len(s) == 2:\n            if int(s[0]) - int(s[1]) == 1:\n                return True\n            else:\n                return False\n        if len(s) == 3:\n            if int(s[0]) - int(s[1]) == int(s[2]) - int(s[1]):\n                return True\n            else:\n                return False\n        if len(s) == 4:\n            if int(s[0]) - int(s[1]) == int(s[2]) - int(s[1]):\n                if int(s[0]) - int(s[1]) == 1:\n                    return True\n                else:\n                    return False\n            else:\n                return False\n        if len(s) == 5:\n            if int(s[0]) - int(s[1]) == int(s[2]) - int(s[1]):\n                if int(s[0]) - int(s[1]) == 1:\n                    return"
    },
    {
        "number": 1850,
        "title": "Minimum Adjacent Swaps to Reach the Kth Smallest Number",
        "difficulty": 1,
        "answer": "        n = len(num)\n        if n < k:\n            return 0\n        if n == k:\n            return 1\n        if n == k:\n            return 0\n        if n == k:\n            return 0\n        if n == k:\n            return 0\n        if n == k:\n            return 0\n        if n == k:\n            return 0\n        if n == k:\n            return 0\n        if n == k:\n            return 0\n        if n == k:\n            return 0\n        if n == k:\n            return 0\n        if n == k:\n            return 0\n        if n == k:\n            return 0\n        if n == k:\n            return 0\n        if n == k:\n            return 0\n        if n == k:\n            return 0\n        if n == k:\n            return 0\n        if n == k:\n            return 0\n        if n == k:\n            return 0\n        if n == k:\n            return 0\n        if n == k:\n            return 0\n        if n == k:\n            return 0\n"
    },
    {
        "number": 1851,
        "title": "Minimum Interval to Include Each Query",
        "difficulty": 2,
        "answer": "        intervals.sort()\n        res = []\n        for i in range(len(intervals)):\n            left, right = intervals[i][0], intervals[i][1]\n            for j in range(len(queries)):\n                if left <= queries[j] <= right:\n                    res.append(j + 1)\n        return res"
    },
    {
        "number": 1854,
        "title": "Maximum Population Year",
        "difficulty": 0,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n"
    },
    {
        "number": 1855,
        "title": "Maximum Distance Between a Pair of Values",
        "difficulty": 1,
        "answer": "        nums1.sort()\n        nums2.sort()\n        res = 0\n        for i in range(len(nums1)):\n            res = max(res, abs(nums1[i] - nums2[i]))\n        return res"
    },
    {
        "number": 1856,
        "title": "Maximum Subarray Min-Product",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        dp = [0] * n\n        dp[0] = nums[0]\n        for i in range(1, n):\n            dp[i] = nums[i] * dp[i - 1]\n        for i in range(1, n):\n            for j in range(i):\n                dp[i] = max(dp[i], nums[i] * dp[j] + nums[i] * dp[i - j - 1])\n        return dp[-1] % (10 ** 9 + 7)"
    },
    {
        "number": 1857,
        "title": "Largest Color Value in a Directed Graph",
        "difficulty": 2,
        "answer": "        n = len(colors)\r\n        m = len(edges)\r\n        if n == 0 or m == 0:\r\n            return -1\r\n        if n == 1:\r\n            return colors[0]\r\n        if m == 1:\r\n            return max(colors)\r\n        if n == 2:\r\n            return max(colors[0], colors[1])\r\n        if m == 2:\r\n            return max(colors[0], colors[1], colors[2])\r\n        if n == 3:\r\n            return max(colors[0], colors[1], colors[2])\r\n        if m == 3:\r\n            return max(colors[0], colors[1], colors[2])\r\n        if n == 4:\r\n            return max(colors[0], colors[1], colors[2], colors[3])\r\n        if m == 4:\r\n            return max(colors[0], colors[1], colors[2], colors[3])\r\n        if n == 5:\r\n            return max(col"
    },
    {
        "number": 1859,
        "title": "Sorting the Sentence",
        "difficulty": 0,
        "answer": "        s = s.split()\r\n        s.sort()\r\n        return \" \".join(s)\r\n\r\n\r\nclass Solution:\r\n    def sortSentence(self, s: str) -> str:\r\n        \"\"\"\r\n        A sentence is a list of words that are separated by a single space with no leading or trailing spaces. Each word consists of lowercase and uppercase English letters.\r\n        A sentence can be shuffled by appending the 1-indexed word position to each word then rearranging the words in the sentence.\r\n            For example, the sentence \"This is a sentence\" can be shuffled as \"sentence4 a3 is2 This1\" or \"is2 sentence4 This1 a3\".\r\n        Given a shuffled sentence s containing no more than 9 words, reconstruct and return the original sentence.\r\n        Example 1:\r\n        Input: s = \"is2 sentence4 This1 a3\"\r\n        Output: \"This is a sentence\"\r\n        Explanation: Sort the words in s to their original positions \"This1 is2 a3 sentence4\", then remove the numbers"
    },
    {
        "number": 1860,
        "title": "Incremental Memory Leak",
        "difficulty": 1,
        "answer": "        # Time: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1"
    },
    {
        "number": 1861,
        "title": "Rotating the Box",
        "difficulty": 1,
        "answer": "        n = len(box)\r\n        m = len(box[0])\r\n        for i in range(n):\r\n            for j in range(m):\r\n                box[i][j] = box[i][j].replace(\"#\", \"*\")\r\n                box[i][j] = box[i][j].replace(\"*\", \".\")\r\n                box[i][j] = box[i][j].replace(\".\", \".\")\r\n        for i in range(n):\r\n            for j in range(m):\r\n                if box[i][j] == \".\":\r\n                    box[i][j] = \".\"\r\n                elif box[i][j] == \"#\":\r\n                    box[i][j] = \"*\"\r\n                elif box[i][j] == \"*\":\r\n                    box[i][j] = \".\"\r\n                else:\r\n                    box[i][j] = box[i][j].replace(\"#\", \"*\")\r\n                    box[i][j] = box[i][j].replace(\""
    },
    {
        "number": 1862,
        "title": "Sum of Floored Pairs",
        "difficulty": 2,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage"
    },
    {
        "number": 1863,
        "title": "Sum of All Subset XOR Totals",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        xor = 0\n        for i in range(n):\n            xor ^= nums[i]\n        return xor"
    },
    {
        "number": 1864,
        "title": "Minimum Number of Swaps to Make the Binary String Alternating",
        "difficulty": 1,
        "answer": "        n = len(s)\n        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 3\n        if n == 5:\n            return 4\n        if n == 6:\n            return 5\n        if n == 7:\n            return 6\n        if n == 8:\n            return 7\n        if n == 9:\n            return 8\n        if n == 10:\n            return 9\n        if n == 11:\n            return 10\n        if n == 12:\n            return 11\n        if n == 13:\n            return 12\n        if n == 14:\n            return 13\n        if n == 15:\n            return 14\n        if n == 16:\n            return 15\n        if n == 17:\n            return 16\n        if n == 18:\n            return 17\n        if n == 19:\n            return 18\n        if n == 20:\n            return 19\n        if n == 21:\n            return 20\n        if n == 22:\n            return 21\n"
    },
    {
        "number": 1865,
        "title": "Finding Pairs With a Certain Sum",
        "difficulty": 1,
        "answer": "        pass"
    },
    {
        "number": 1866,
        "title": "Number of Ways to Rearrange Sticks With K Sticks Visible",
        "difficulty": 2,
        "answer": "        mod = 10**9+7\n        dp = [0] * (n+1)\n        dp[0] = 1\n        for i in range(1, n+1):\n            for j in range(i, n+1):\n                dp[i] += dp[j]\n                if j - i >= k:\n                    dp[i] %= mod\n        return dp[n] % mod\n"
    },
    {
        "number": 1869,
        "title": "Longer Contiguous Segments of Ones than Zeros",
        "difficulty": 0,
        "answer": "        if len(s) == 0:\n            return False\n        if len(s) == 1:\n            return True\n        if len(s) == 2:\n            return s[0] == s[1]\n        if len(s) == 3:\n            return s[0] == s[1] and s[1] == s[2]\n        if len(s) == 4:\n            return s[0] == s[1] and s[1] == s[2] and s[2] == s[3]\n        if len(s) == 5:\n            return s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4]\n        if len(s) == 6:\n            return s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5]\n        if len(s) == 7:\n            return"
    },
    {
        "number": 1870,
        "title": "Minimum Speed to Arrive on Time",
        "difficulty": 1,
        "answer": "        pass"
    },
    {
        "number": 1871,
        "title": "Jump Game VII",
        "difficulty": 1,
        "answer": "        if s[0] == '0':\n            return False\n        if s[0] == '1':\n            return True\n        if s[0] == '0':\n            return self.canReach(s[1:], minJump, maxJump)\n        if s[0] == '1':\n            return self.canReach(s[1:], minJump, maxJump) or self.canReach(s[1:], minJump, maxJump + 1)\n        return False"
    },
    {
        "number": 1872,
        "title": "Stone Game VIII",
        "difficulty": 2,
        "answer": "        n = len(stones)\r\n        if n == 1:\r\n            return stones[0]\r\n        if n == 2:\r\n            return stones[0] + stones[1]\r\n        if n == 3:\r\n            return stones[0] + stones[1] + stones[2]\r\n        if n == 4:\r\n            return stones[0] + stones[1] + stones[2] + stones[3]\r\n        if n == 5:\r\n            return stones[0] + stones[1] + stones[2] + stones[3] + stones[4]\r\n        if n == 6:\r\n            return stones[0] + stones[1] + stones[2] + stones[3] + stones[4] + stones[5]\r\n        if n == 7:\r\n            return stones[0] + stones[1] + stones[2] + stones[3] + stones[4] + stones[5] + stones[6]\r\n        if n == 8:\r\n            return stones[0] + stones[1] + stones[2]"
    },
    {
        "number": 1876,
        "title": "Substrings of Size Three with Distinct Characters",
        "difficulty": 0,
        "answer": "        count = 0\n        for i in range(len(s)):\n            for j in range(i, len(s)):\n                if s[i:j+1] == s[i:j+1][::-1]:\n                    count += 1\n        return count"
    },
    {
        "number": 1877,
        "title": "Minimize Maximum Pair Sum in Array",
        "difficulty": 1,
        "answer": "        n = len(nums)\r\n        if n < 2:\r\n            return 0\r\n        max_pair_sum = 0\r\n        for i in range(n // 2):\r\n            max_pair_sum += nums[i] + nums[n - 1 - i]\r\n        return max_pair_sum\r\n\r\n\r\nclass Solution:\r\n    def minPairSum(self, nums: List[int]) -> int:\r\n        \"\"\"\r\n        The pair sum of a pair (a,b) is equal to a + b. The maximum pair sum is the largest pair sum in a list of pairs.\r\n            For example, if we have pairs (1,5), (2,3), and (4,4), the maximum pair sum would be max(1+5, 2+3, 4+4) = max(6, 5, 8) = 8.\r\n        Given an array nums of even length n, pair up the elements of nums into n / 2 pairs such that:\r\n            Each element of nums is in exactly one pair, and\r\n            "
    },
    {
        "number": 1878,
        "title": "Get Biggest Three Rhombus Sums in a Grid",
        "difficulty": 1,
        "answer": "        m = len(grid)\n        n = len(grid[0])\n        res = []\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == 0:\n                    continue\n                if grid[i][j] == grid[i][j-1] or grid[i][j] == grid[i-1][j] or grid[i][j] == grid[i-1][j-1]:\n                    continue\n                res.append(grid[i][j])\n        return res"
    },
    {
        "number": 1879,
        "title": "Minimum XOR Sum of Two Arrays",
        "difficulty": 2,
        "answer": "        n = len(nums1)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums1[0]\n        if n == 2:\n            return nums1[0] ^ nums1[1]\n        if n == 3:\n            return nums1[0] ^ nums1[1] ^ nums1[2]\n        if n == 4:\n            return nums1[0] ^ nums1[1] ^ nums1[2] ^ nums1[3]\n        if n == 5:\n            return nums1[0] ^ nums1[1] ^ nums1[2] ^ nums1[3] ^ nums1[4]\n        if n == 6:\n            return nums1[0] ^ nums1[1] ^ nums1[2] ^ nums1[3] ^ nums1[4] ^ nums1[5]\n        if n == 7:\n            return nums1[0] ^ nums1[1] ^ nums1[2"
    },
    {
        "number": 1880,
        "title": "Check if Word Equals Summation of Two Words",
        "difficulty": 0,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage"
    },
    {
        "number": 1881,
        "title": "Maximum Value after Insertion",
        "difficulty": 1,
        "answer": "        if n == \"\":\n            return \"\"\n        if n[0] == \"-\":\n            return self.maxValue(n[1:], x)\n        if n[0] == \"0\":\n            return self.maxValue(n[1:], x)\n        if n[0] == \"1\":\n            return self.maxValue(n[1:], x) + \"1\"\n        if n[0] == \"2\":\n            return self.maxValue(n[1:], x) + \"2\"\n        if n[0] == \"3\":\n            return self.maxValue(n[1:], x) + \"3\"\n        if n[0] == \"4\":\n            return self.maxValue(n[1:], x) + \"4\"\n        if n[0] == \"5\":\n            return self.maxValue(n[1:], x) + \"5\"\n        if n[0] == \"6\":\n            return self.maxValue(n[1:], x) + \"6\"\n        if n[0] == \""
    },
    {
        "number": 1882,
        "title": "Process Tasks Using Servers",
        "difficulty": 1,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n"
    },
    {
        "number": 1883,
        "title": "Minimum Skips to Arrive at Meeting On Time",
        "difficulty": 2,
        "answer": "        pass"
    },
    {
        "number": 1884,
        "title": "Egg Drop With 2 Eggs and N Floors",
        "difficulty": 1,
        "answer": "        dp = [0] * (n + 1)\n        dp[1] = 1\n        for i in range(2, n + 1):\n            dp[i] = dp[i - 1] + dp[i - 2]\n        return dp[n]"
    },
    {
        "number": 1886,
        "title": "Determine Whether Matrix Can Be Obtained By Rotation",
        "difficulty": 0,
        "answer": "        m, n = len(mat), len(target)\n        if m!= n:\n            return False\n        for i in range(m):\n            for j in range(n):\n                if mat[i][j]!= target[j][i]:\n                    return False\n        return True"
    },
    {
        "number": 1887,
        "title": "Reduction Operations to Make the Array Elements Equal",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21"
    },
    {
        "number": 1888,
        "title": "Minimum Number of Flips to Make the Binary String Alternating",
        "difficulty": 1,
        "answer": "        if len(s) == 1:\n            return 1\n        if len(s) == 2:\n            return 2\n        if s[0] == s[1]:\n            return 2\n        if s[0] == '0' and s[1] == '0':\n            return 0\n        if s[0] == '0' and s[1] == '1':\n            return 1\n        if s[0] == '1' and s[1] == '0':\n            return 2\n        if s[0] == '1' and s[1] == '1':\n            return 3\n        return 4"
    },
    {
        "number": 1889,
        "title": "Minimum Space Wasted From Packaging",
        "difficulty": 2,
        "answer": "        n = len(packages)\n        m = len(boxes)\n        dp = [[0] * (m + 1) for _ in range(n + 1)]\n        for i in range(n + 1):\n            for j in range(m + 1):\n                if i == 0 or j == 0:\n                    dp[i][j] = 0\n                elif packages[i - 1] <= boxes[j - 1][0]:\n                    dp[i][j] = dp[i - 1][j - 1] + packages[i - 1]\n                else:\n                    dp[i][j] = dp[i - 1][j]\n        return dp[n][m] % (10 ** 9 + 7)"
    },
    {
        "number": 1893,
        "title": "Check if All the Integers in a Range Are Covered",
        "difficulty": 0,
        "answer": "        if left >= right:\n            return False\n        for i in range(left, right + 1):\n            if ranges[i][0] <= i <= ranges[i][1]:\n                return True\n        return False"
    },
    {
        "number": 1894,
        "title": "Find the Student that Will Replace the Chalk",
        "difficulty": 1,
        "answer": "        n = len(chalk)\n        if n < k:\n            return -1\n        if n == k:\n            return 0\n        if n < k:\n            return -1\n        dp = [0] * n\n        dp[0] = chalk[0]\n        dp[1] = chalk[0]\n        for i in range(2, n):\n            dp[i] = dp[i - 1] + chalk[i]\n        for i in range(2, n):\n            dp[i] = min(dp[i - 1], dp[i - 2]) + chalk[i]\n        return dp[n - 1]"
    },
    {
        "number": 1895,
        "title": "Largest Magic Square",
        "difficulty": 1,
        "answer": "        m = len(grid)\n        n = len(grid[0])\n        if m == 0 or n == 0:\n            return 0\n        dp = [[0] * n for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if i == 0 or j == 0:\n                    dp[i][j] = grid[i][j]\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) + grid[i][j]\n        return dp[m - 1][n - 1]"
    },
    {
        "number": 1896,
        "title": "Minimum Cost to Change the Final Value of Expression",
        "difficulty": 2,
        "answer": "        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    },
    {
        "number": 1897,
        "title": "Redistribute Characters to Make All Strings Equal",
        "difficulty": 0,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage"
    },
    {
        "number": 1898,
        "title": "Maximum Number of Removable Characters",
        "difficulty": 1,
        "answer": "        removable = [0] + removable\n        removed = 0\n        for i in range(len(s)):\n            if s[i] in p:\n                removed += 1\n                if removed == len(p):\n                    return removed\n            else:\n                removed = 0\n        return removed"
    },
    {
        "number": 1899,
        "title": "Merge Triplets to Form Target Triplet",
        "difficulty": 1,
        "answer": "        if len(triplets) == 0:\n            return False\n        if len(triplets) == 1:\n            if triplets[0][0] == target[0] and triplets[0][1] == target[1]:\n                return True\n            return False\n        if len(triplets) == 2:\n            if triplets[0][0] == target[0] and triplets[1][1] == target[1]:\n                return True\n            return False\n        if len(triplets) == 3:\n            if triplets[0][0] == target[0] and triplets[1][1] == target[1] and triplets[2][2] == target[2]:\n                return True\n            return False\n        if len(triplets) == 4:\n            if triplets[0][0] == target[0] and triplets[1][1] == target[1] and triplets[2][2] == target[2] and triplets[3][3] == target[3]:\n                return True\n            return False\n        return False"
    },
    {
        "number": 1900,
        "title": "The Earliest and Latest Rounds Where Players Compete",
        "difficulty": 2,
        "answer": "        if n % 2 == 0:\n            return [n // 2, n // 2 + 1]\n        else:\n            return [n // 2 + 1, n // 2]"
    },
    {
        "number": 1901,
        "title": "Find a Peak Element II",
        "difficulty": 1,
        "answer": "        m = len(mat)\n        n = len(mat[0])\n        if m == 0 or n == 0:\n            return []\n        if mat[0][0] > mat[1][1]:\n            return [0, 1]\n        if mat[0][n - 1] > mat[1][n - 1]:\n            return [1, n - 1]\n        if mat[m - 1][0] > mat[m - 1][1]:\n            return [m - 1, 0]\n        if mat[m - 1][n - 1] > mat[m - 1][n - 1]:\n            return [m - 1, n - 1]\n        return [m - 1, n - 1]"
    },
    {
        "number": 1903,
        "title": "Largest Odd Number in String",
        "difficulty": 0,
        "answer": "        if num == \"\":\n            return \"\"\n        if len(num) == 1:\n            return num\n        if len(num) == 2:\n            if num[0] == \"0\" and num[1] == \"0\":\n                return \"\"\n            return num\n        if len(num) == 3:\n            if num[0] == \"0\" and num[1] == \"0\" and num[2] == \"0\":\n                return \"\"\n            return num\n        if len(num) == 4:\n            if num[0] == \"0\" and num[1] == \"0\" and num[2] == \"0\" and num[3] == \"0\":\n                return \"\"\n            return num\n        if len(num) == 5:\n            if num[0] == \"0\" and num[1] == \"0\" and num[2] == \"0\" and num[3] == \"0\" and num[4] == \"0\":\n                return \"\"\n            return num\n        if len(num) == 6:\n            if num[0] == \"0"
    },
    {
        "number": 1904,
        "title": "The Number of Full Rounds You Have Played",
        "difficulty": 1,
        "answer": "        login_time = loginTime.split(\":\")\n        logout_time = logoutTime.split(\":\")\n        if login_time[0] < logout_time[0]:\n            return self.numberOfRounds(login_time[0], logout_time[0])\n        elif login_time[0] > logout_time[0]:\n            return self.numberOfRounds(logout_time[0], login_time[0])\n        else:\n            return self.numberOfRounds(login_time[0], logout_time[0]) + self.numberOfRounds(logout_time[0], login_time[0])"
    },
    {
        "number": 1905,
        "title": "Count Sub Islands",
        "difficulty": 1,
        "answer": "        m = len(grid1)\n        n = len(grid1[0])\n        count = 0\n        for i in range(m):\n            for j in range(n):\n                if grid1[i][j] == 1:\n                    if self.island(grid2, i, j):\n                        count += 1\n        return count"
    },
    {
        "number": 1906,
        "title": "Minimum Absolute Difference Queries",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        dp = [0] * n\n        for i in range(n):\n            for j in range(i):\n                if nums[j] > nums[i]:\n                    dp[i] = max(dp[i], dp[j] + abs(nums[i] - nums[j]))\n        ans = []\n        for i in range(n):\n            for j in range(i):\n                if nums[i] > nums[j]:\n                    ans.append(dp[j] - dp[i])\n        return ans"
    },
    {
        "number": 1909,
        "title": "Remove One Element to Make the Array Strictly Increasing",
        "difficulty": 0,
        "answer": "        if len(nums) == 1:\n            return True\n        if len(nums) == 2:\n            return nums[0] < nums[1]\n        if nums[0] < nums[1]:\n            return False\n        for i in range(1, len(nums)):\n            if nums[i] < nums[i - 1]:\n                return False\n        return True"
    },
    {
        "number": 1910,
        "title": "Remove All Occurrences of a Substring",
        "difficulty": 1,
        "answer": "        if not s:\n            return \"\"\n        if not part:\n            return s\n        if len(part) == 1:\n            return s[:len(part)]\n        if len(part) == 2:\n            return s[:len(part) - 1] + part[1] + s[len(part) - 1:]\n        if len(part) == 3:\n            return s[:len(part) - 2] + part[2] + s[len(part) - 2:]\n        if len(part) == 4:\n            return s[:len(part) - 3] + part[3] + s[len(part) - 3:]\n        if len(part) == 5:\n            return s[:len(part) - 4] + part[4] + s[len(part) - 4:]\n        if len(part) == 6:\n            return s[:len(part) - 5] + part[5] + s[len(part) - 5:]\n        if len(part) == 7:\n            return s[:len(part) -"
    },
    {
        "number": 1911,
        "title": "Maximum Alternating Subsequence Sum",
        "difficulty": 1,
        "answer": "        n = len(nums)\r\n        if n == 0:\r\n            return 0\r\n        if n == 1:\r\n            return nums[0]\r\n        if n == 2:\r\n            return max(nums[0], nums[1])\r\n        if n == 3:\r\n            return max(nums[0] + nums[1], nums[2] + nums[3])\r\n        if n == 4:\r\n            return max(nums[0] + nums[1] + nums[2], nums[3] + nums[4])\r\n        if n == 5:\r\n            return max(nums[0] + nums[1] + nums[2] + nums[3], nums[4] + nums[5])\r\n        if n == 6:\r\n            return max(nums[0] + nums[1] + nums[2] + nums[3] + nums[4], nums[5] + nums[6])\r\n        if n == 7:"
    },
    {
        "number": 1912,
        "title": "Design Movie Rental System",
        "difficulty": 2,
        "answer": "    def __init__(self, n: int, entries: List[List[int]]):\n    def search(self, movie: int) -> List[int]:\n    def rent(self, shop: int, movie: int) -> None:\n    def drop(self, shop: int, movie: int) -> None:\n    def report(self) -> List[List[int]]:\n        \"\"\"\n        You have a movie renting company consisting of n shops. You want to implement a renting system that supports searching for, booking, and returning movies. The system should also support generating a report of the currently rented movies.\n        Each movie is given as a 2D integer array entries where entries[i] = [shopi, moviei, pricei] indicates that there is a copy of movie moviei at shop shopi with a rental price of pricei. Each shop carries at most one copy of a movie moviei.\n        The system should support the following functions:\n            Search: Finds the cheapest 5 shops that have an unrented copy of a given movie. The shops should be sorted by price in ascending order, and in case of a tie,"
    },
    {
        "number": 1913,
        "title": "Maximum Product Difference Between Two Pairs",
        "difficulty": 0,
        "answer": "        nums.sort()\r\n        dp = [0] * len(nums)\r\n        dp[0] = nums[0]\r\n        dp[1] = nums[0] * nums[1]\r\n        dp[2] = nums[0] * nums[2]\r\n        dp[3] = nums[0] * nums[3]\r\n        for i in range(4, len(nums)):\r\n            dp[i] = max(dp[i - 1], nums[i] * nums[i - 1] + dp[i - 2])\r\n        return dp[-1]\r\n\r\n\r\nclass Solution:\r\n    def maxProductDifference(self, nums: List[int]) -> int:\r\n        \"\"\"\r\n        The product difference between two pairs (a, b) and (c, d) is defined as (a * b) - (c * d).\r\n            For example, the product difference between (5, 6) and (2, 7) is (5 * 6) - ("
    },
    {
        "number": 1914,
        "title": "Cyclically Rotating a Grid",
        "difficulty": 1,
        "answer": "        m = len(grid)\r\n        n = len(grid[0])\r\n        if m == 0 or n == 0:\r\n            return grid\r\n        if k == 0:\r\n            return [[grid[i][j] for j in range(n)] for i in range(m)]\r\n        k = k % m\r\n        return [[grid[i][j] for j in range(n)] for i in range(m)] + [[grid[i][n-1-j] for j in range(n)] for i in range(m)]\r\n\r\n\r\nclass Solution:\r\n    def rotateGrid(self, grid: List[List[int]], k: int) -> List[List[int]]:\r\n        \"\"\"\r\n        You are given an m x n integer matrix grid\u200b\u200b\u200b, where m and n are both even integers, and an integer k.\r\n        The matrix is composed of several layers, which is shown in the below image, where each color is its own layer:\r\n        A cyclic rotation of the matrix is done by cyclically rotating each layer in the matrix. To"
    },
    {
        "number": 1915,
        "title": "Number of Wonderful Substrings",
        "difficulty": 1,
        "answer": "        count = 0\r\n        for i in range(len(word)):\r\n            if word[i] == word[i+1]:\r\n                count += 1\r\n            else:\r\n                count = 0\r\n        return count\r\n\r\n\r\nclass Solution:\r\n    def wonderfulSubstrings(self, word: str) -> int:\r\n        \"\"\"\r\n        A wonderful string is a string where at most one letter appears an odd number of times.\r\n            For example, \"ccjjc\" and \"abab\" are wonderful, but \"ab\" is not.\r\n        Given a string word that consists of the first ten lowercase English letters ('a' through 'j'), return the number of wonderful non-empty substrings in word. If the same substring appears multiple times in word, then count each occurrence separately.\r\n        A substring is a contiguous sequence of characters in a string.\r\n        Example 1:\r\n        Input: word = \"aba\"\r\n        Output: 4\r\n        Explanation: The four wonderful substrings are underlined below:\r\n        - \"aba\" -> \"a"
    },
    {
        "number": 1916,
        "title": "Count Ways to Build Rooms in an Ant Colony",
        "difficulty": 2,
        "answer": "        n = len(prevRoom)\r\n        if n == 0:\r\n            return 0\r\n        if n == 1:\r\n            return 1\r\n        dp = [0] * (n + 1)\r\n        dp[0] = 1\r\n        dp[1] = 1\r\n        for i in range(2, n + 1):\r\n            dp[i] = prevRoom[i - 1] + prevRoom[i - 2]\r\n        return dp[n] % (10 ** 9 + 7)\r\n\r\n\r\nclass Solution:\r\n    def waysToBuildRooms(self, prevRoom: List[int]) -> int:\r\n        \"\"\"\r\n        You are an ant tasked with adding n new rooms numbered 0 to n-1 to your colony. You are given the expansion plan as a 0-indexed integer array of length n, prevRoom, where prevRoom[i] indicates that you must build room prevRoom[i] before building room i, and these two rooms must be connected directly. Room 0 is already built, so prevRoom[0] = -1. The expansion plan is"
    },
    {
        "number": 1920,
        "title": "Build Array from Permutation",
        "difficulty": 0,
        "answer": "        ans = [0] * len(nums)\n        for i in range(len(nums)):\n            ans[nums[i]] = i\n        return ans"
    },
    {
        "number": 1921,
        "title": "Eliminate Maximum Number of Monsters",
        "difficulty": 1,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n"
    },
    {
        "number": 1922,
        "title": "Count Good Numbers",
        "difficulty": 1,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage"
    },
    {
        "number": 1923,
        "title": "Longest Common Subpath",
        "difficulty": 2,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 0\n        if n == 5:\n            return 1\n        if n == 6:\n            return 2\n        if n == 7:\n            return 3\n        if n == 8:\n            return 4\n        if n == 9:\n            return 5\n        if n == 10:\n            return 6\n        if n == 11:\n            return 7\n        if n == 12:\n            return 8\n        if n == 13:\n            return 9\n        if n == 14:\n            return 10\n        if n == 15:\n            return 11\n        if n == 16:\n            return 12\n        if n == 17:\n            return 13\n        if n == 18:\n            return 14\n        if n == 19:\n            return 15\n        if n == 20:\n            return 16\n        if n == 21:\n            return 17\n        if n == 22:\n            "
    },
    {
        "number": 1925,
        "title": "Count Square Sum Triples",
        "difficulty": 0,
        "answer": "        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 3\n        if n == 5:\n            return 4\n        if n == 6:\n            return 5\n        if n == 7:\n            return 6\n        if n == 8:\n            return 7\n        if n == 9:\n            return 8\n        if n == 10:\n            return 9\n        if n == 11:\n            return 10\n        if n == 12:\n            return 11\n        if n == 13:\n            return 12\n        if n == 14:\n            return 13\n        if n == 15:\n            return 14\n        if n == 16:\n            return 15\n        if n == 17:\n            return 16\n        if n == 18:\n            return 17\n        if n == 19:\n            return 18\n        if n == 20:\n            return 19\n        if n == 21:\n            return 20\n        if n == 22:\n            return 21\n        if n == 23:\n            "
    },
    {
        "number": 1926,
        "title": "Nearest Exit from Entrance in Maze",
        "difficulty": 1,
        "answer": "        m, n = len(maze), len(maze[0])\n        if maze[0][0] == '+':\n            maze[0][0] = '.'\n        if maze[-1][-1] == '+':\n            maze[-1][-1] = '.'\n        if maze[0][-1] == '+':\n            maze[0][-1] = '.'\n        if maze[-1][0] == '+':\n            maze[-1][0] = '.'\n        if maze[0][0] == '+':\n            maze[0][0] = '.'\n        if maze[-1][-1] == '+':\n            maze[-1][-1] = '.'\n        if maze[0][-1] == '+':\n            maze[0][-1] = '.'\n        if maze[-1][0] == '+':\n            maze[-1][0] = '.'\n        if maze[0][0] == '+':\n            maze"
    },
    {
        "number": 1927,
        "title": "Sum Game",
        "difficulty": 1,
        "answer": "        if len(num) % 2!= 0:\n            return False\n        for i in range(len(num) // 2):\n            if num[i] == '?':\n                if num[i + 1] == '?':\n                    return False\n                else:\n                    num[i] = num[i + 1]\n                    num[i + 1] = '?'\n        return True"
    },
    {
        "number": 1928,
        "title": "Minimum Cost to Reach Destination in Time",
        "difficulty": 2,
        "answer": "        passingFees = [0] + passingFees\n        passingFees.append(0)\n        passingFees.append(0)\n        passingFees.append(0)\n        passingFees.append(0)\n        passingFees.append(0)\n        passingFees.append(0)\n        passingFees.append(0)\n        passingFees.append(0)\n        passingFees.append(0)\n        passingFees.append(0)\n        passingFees.append(0)\n        passingFees.append(0)\n        passingFees.append(0)\n        passingFees.append(0)\n        passingFees.append(0)\n        passingFees.append(0)\n        passingFees.append(0)\n        passingFees.append(0)\n        passingFees.append(0)\n        passingFees.append(0)\n        passingFees.append(0)\n        passingFees"
    },
    {
        "number": 1929,
        "title": "Concatenation of Array",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        if n == 0:\n            return []\n        if n == 1:\n            return [nums[0]]\n        if n == 2:\n            return [nums[0], nums[1]]\n        if n == 3:\n            return [nums[0], nums[1], nums[2]]\n        if n == 4:\n            return [nums[0], nums[1], nums[2], nums[3]]\n        if n == 5:\n            return [nums[0], nums[1], nums[2], nums[3], nums[4]]\n        if n == 6:\n            return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5]]\n        if n == 7:\n            return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6]]\n        if n == 8:\n            return [nums["
    },
    {
        "number": 1930,
        "title": "Unique Length-3 Palindromic Subsequences",
        "difficulty": 1,
        "answer": "        count = 0\n        for i in range(len(s)):\n            for j in range(i, len(s)):\n                if s[i:j+1] == s[i:j+1][::-1]:\n                    count += 1\n        return count"
    },
    {
        "number": 1931,
        "title": "Painting a Grid With Three Different Colors",
        "difficulty": 2,
        "answer": "        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = dp[i-1][j-1] + dp[i-1][j]\n        # dp[i][j] = dp[i-1][j-1] + dp[i-1][j]\n        # dp[i][j] = dp[i-1][j-1] + dp[i-1][j]\n        # dp[i][j] = dp[i-1][j-1] + dp[i-1][j]\n        # dp[i][j] = dp[i-1][j-1] + dp[i-1][j]\n        # dp[i][j] = dp[i-1][j-1] + dp[i-1][j]\n        # dp[i][j] = dp[i-1][j-1] + dp[i-1"
    },
    {
        "number": 1932,
        "title": "Merge BSTs to Create Single BST",
        "difficulty": 2,
        "answer": "        def dfs(root, left, right):\n            if not root:\n                return None\n            if left > right:\n                return None\n            if left == right:\n                return root\n            mid = (left + right) // 2\n            root.left = dfs(root.left, left, mid)\n            root.right = dfs(root.right, mid + 1, right)\n            return root\n        return dfs(trees[0], 0, len(trees) - 1)"
    },
    {
        "number": 1935,
        "title": "Maximum Number of Words You Can Type",
        "difficulty": 0,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n"
    },
    {
        "number": 1936,
        "title": "Add Minimum Number of Rungs",
        "difficulty": 1,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n"
    },
    {
        "number": 1937,
        "title": "Maximum Number of Points with Cost",
        "difficulty": 1,
        "answer": "        m, n = len(points), len(points[0])\n        dp = [[0] * n for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if i == 0:\n                    dp[i][j] = points[i][j]\n                elif j == 0:\n                    dp[i][j] = abs(points[i][j] - points[i - 1][j])\n                else:\n                    dp[i][j] = max(abs(points[i][j] - points[i - 1][j]), abs(points[i][j] - points[i - 1][j] - points[i][j]))\n        return dp[m - 1][n - 1]"
    },
    {
        "number": 1938,
        "title": "Maximum Genetic Difference Query",
        "difficulty": 2,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n"
    },
    {
        "number": 1941,
        "title": "Check if All Characters Have Equal Number of Occurrences",
        "difficulty": 0,
        "answer": "        if len(s) == 0:\n            return True\n        if len(s) == 1:\n            return s[0] == s[0]\n        if len(s) == 2:\n            return s[0] == s[1]\n        if len(s) == 3:\n            return s[0] == s[1] and s[1] == s[2]\n        if len(s) == 4:\n            return s[0] == s[1] and s[1] == s[2] and s[2] == s[3]\n        if len(s) == 5:\n            return s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4]\n        if len(s) == 6:\n            return s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5]\n        if len("
    },
    {
        "number": 1942,
        "title": "The Number of the Smallest Unoccupied Chair",
        "difficulty": 1,
        "answer": "        n = len(times)\n        if n == 0:\n            return 0\n        m = len(times[0])\n        if m == 0:\n            return 0\n        \n        def dfs(i, j, k):\n            if i < 0 or i >= n or j < 0 or j >= m or k < 0 or k >= m:\n                return\n            if times[i][0] == times[j][0] and times[i][1] == times[j][1]:\n                return\n            if times[i][0] < times[j][0] or times[i][0] > times[j][0] or times[i][1] < times[j][1] or times[i][1] > times[j][1]:\n                return\n            if times[i][0] == times[j][0] and times[i][1] == times[j][1]:\n                return\n            if times[i][0] < times[j][0] or times[i][0] > times[j][0] or times[i][1] < times["
    },
    {
        "number": 1943,
        "title": "Describe the Painting",
        "difficulty": 1,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage"
    },
    {
        "number": 1944,
        "title": "Number of Visible People in a Queue",
        "difficulty": 2,
        "answer": "        n = len(heights)\n        if n == 0:\n            return []\n        if n == 1:\n            return [0]\n        if n == 2:\n            return [0, 0]\n        if n == 3:\n            return [0, 0, 0]\n        if n == 4:\n            return [0, 0, 0, 0]\n        if n == 5:\n            return [0, 0, 0, 0, 0]\n        if n == 6:\n            return [0, 0, 0, 0, 0, 0]\n        if n == 7:\n            return [0, 0, 0, 0, 0, 0, 0]\n        if n == 8:\n            return [0, 0, 0, 0, 0, 0, 0, 0]\n        if n == 9:\n            return [0, 0, 0, 0, 0, 0, 0, 0, 0]\n        if n == 10:\n            return [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n        if n == 11:\n            return ["
    },
    {
        "number": 1945,
        "title": "Sum of Digits of String After Convert",
        "difficulty": 0,
        "answer": "        # convert s into an integer by replacing each letter with its position in the alphabet (i.e., replace 'a' with 1, 'b' with 2,..., 'z' with 26). Then, transform the integer by replacing it with the sum of its digits.\n        # convert s into an integer by replacing each letter with its position in the alphabet (i.e., replace 'a' with 1, 'b' with 2,..., 'z' with 26). Then, transform the integer by replacing it with the sum of its digits.\n        # convert s into an integer by replacing each letter with its position in the alphabet (i.e., replace 'a' with 1, 'b' with 2,..., 'z' with 26). Then, transform the integer by replacing it with the sum of its digits.\n        # convert s into an integer by replacing each letter with its position in the alphabet (i.e., replace 'a' with 1, 'b' with 2,..., 'z' with 26). Then, transform the integer by replacing it with the sum of its digits.\n        # convert s into an integer by replacing each letter with its position"
    },
    {
        "number": 1946,
        "title": "Largest Number After Mutating Substring",
        "difficulty": 1,
        "answer": "        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    },
    {
        "number": 1947,
        "title": "Maximum Compatibility Score Sum",
        "difficulty": 1,
        "answer": "        # Time: O(n^2)\n        # Space: O(n)\n        def get_compatibility_score(student, mentor):\n            # Time: O(n)\n            # Space: O(n)\n            compatibility_score = 0\n            for i in range(len(student)):\n                if student[i] == mentor[i]:\n                    compatibility_score += 1\n            return compatibility_score"
    },
    {
        "number": 1948,
        "title": "Delete Duplicate Folders in System",
        "difficulty": 2,
        "answer": "        paths = sorted(paths, key=lambda x: x[0])\n        ans = []\n        for path in paths:\n            if path[0] == path[1]:\n                ans.append(path[1])\n            else:\n                ans.append(path[0])\n        return ans"
    },
    {
        "number": 1952,
        "title": "Three Divisors",
        "difficulty": 0,
        "answer": "        if n == 0:\n            return False\n        if n == 1:\n            return True\n        if n == 2:\n            return False\n        if n == 3:\n            return True\n        if n % 3 == 0:\n            return False\n        if n % 3 == 1:\n            return True\n        if n % 3 == 2:\n            return False\n        if n % 3 == 0:\n            return True\n        if n % 3 == 1:\n            return False\n        if n % 3 == 2:\n            return True\n        if n % 3 == 0:\n            return False\n        if n % 3 == 1:\n            return True\n        if n % 3 == 2:\n            return False\n        if n % 3 == 0:\n            return True\n        if n % 3 == 1:\n            return False\n        if n % 3 == 2:\n            return True\n        if n % 3 == 0:\n            return False\n        if n % 3 == 1:\n            return True\n        if n % 3 == 2:\n            return False\n        if n % 3 == 0:\n            return"
    },
    {
        "number": 1953,
        "title": "Maximum Number of Weeks for Which You Can Work",
        "difficulty": 1,
        "answer": "        n = len(milestones)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        dp = [0] * n\n        dp[0] = 1\n        dp[1] = 1\n        for i in range(2, n):\n            for j in range(i):\n                if milestones[i] > milestones[j]:\n                    dp[i] += dp[j]\n        return dp[n - 1]"
    },
    {
        "number": 1954,
        "title": "Minimum Garden Perimeter to Collect Enough Apples",
        "difficulty": 1,
        "answer": "        # TODO: Write your code here\n        return 0"
    },
    {
        "number": 1955,
        "title": "Count Number of Special Subsequences",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        dp = [0] * n\n        dp[0] = 1\n        dp[1] = 1\n        dp[2] = 2\n        for i in range(3, n):\n            dp[i] = dp[i - 1] + dp[i - 2]\n        return dp[n - 1] % (10 ** 9 + 7)"
    },
    {
        "number": 1957,
        "title": "Delete Characters to Make Fancy String",
        "difficulty": 0,
        "answer": "        if not s:\n            return \"\"\n        if len(s) == 1:\n            return s\n        if len(s) == 2:\n            return s[1:]\n        if len(s) == 3:\n            return s[:2] + s[2:]\n        if len(s) == 4:\n            return s[:3] + s[3:]\n        if len(s) == 5:\n            return s[:4] + s[4:]\n        if len(s) == 6:\n            return s[:5] + s[5:]\n        if len(s) == 7:\n            return s[:6] + s[6:]\n        if len(s) == 8:\n            return s[:7] + s[7:]\n        if len(s) == 9:\n            return s[:8] + s[8:]\n        if len(s) == 10:\n            return s[:9] + s[9:]\n        if len(s) == 11:\n            return s[:10] + s[10:]\n        if"
    },
    {
        "number": 1958,
        "title": "Check if Move is Legal",
        "difficulty": 1,
        "answer": "        # TODO: complete this method\n        #\n        # Given a 0-indexed 8 x 8 grid board, where board[r][c] represents the cell (r, c) on a game board. On the board, free cells are represented by '.', white cells are represented by 'W', and black cells are represented by 'B'.\n        #\n        # Each move in this game consists of choosing a free cell and changing it to the color you are playing as (either white or black). However, a move is only legal if, after changing it, the cell becomes the endpoint of a good line (horizontal, vertical, or diagonal).\n        #\n        # A good line is a line of three or more cells (including the endpoints) where the endpoints of the line are one color, and the remaining cells in the middle are the opposite color (no cells in the line are free). You can find examples for good lines in the figure below:\n        #\n        # Given two integers rMove and cMove and a character color representing the color you are playing as (white or black), return true if changing cell (rMove, cMove) to color color"
    },
    {
        "number": 1959,
        "title": "Minimum Total Space Wasted With K Resizing Operations",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        sizet = sum(nums)\n        if sizet < k:\n            return 0\n        if sizet == k:\n            return sizet\n        if sizet < k:\n            return 0\n        if sizet == k:\n            return 0\n        if sizet < k:\n            return 0\n        if sizet == k:\n            return 0\n        if sizet < k:\n            return 0\n        if sizet == k:\n            return 0\n        if sizet < k:\n            return 0\n        if sizet == k:\n            return 0\n        if sizet < k:\n            return 0\n        if sizet == k:\n            return 0\n        if sizet < k:\n            return 0\n        if sizet == k:\n            return 0\n        if sizet < k:\n            return 0\n        if sizet == k:\n            return 0\n        if sizet < k:\n            return 0\n        if sizet == k"
    },
    {
        "number": 1960,
        "title": "Maximum Product of the Length of Two Palindromic Substrings",
        "difficulty": 2,
        "answer": "        def isPalindrome(s):\n            return s == s[::-1]"
    },
    {
        "number": 1961,
        "title": "Check If String Is a Prefix of Array",
        "difficulty": 0,
        "answer": "        if len(s) < len(words):\n            return False\n        for i in range(len(words)):\n            if s[:len(words[i])]!= words[i]:\n                return False\n        return True"
    },
    {
        "number": 1962,
        "title": "Remove Stones to Minimize the Total",
        "difficulty": 1,
        "answer": "        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    },
    {
        "number": 1963,
        "title": "Minimum Number of Swaps to Make the String Balanced",
        "difficulty": 1,
        "answer": "        n = len(s)\n        if n % 2!= 0:\n            return 0\n        count = 0\n        for i in range(n // 2):\n            if s[i] == '[' or s[i] == ']':\n                count += 1\n        if count % 2 == 0:\n            return count\n        else:\n            return count // 2"
    },
    {
        "number": 1964,
        "title": "Find the Longest Valid Obstacle Course at Each Position",
        "difficulty": 2,
        "answer": "        n = len(obstacles)\n        ans = [0] * n\n        for i in range(n):\n            for j in range(i):\n                if obstacles[j] > obstacles[i]:\n                    ans[i] = max(ans[i], obstacles[j] + 1)\n        return ans"
    },
    {
        "number": 1967,
        "title": "Number of Strings That Appear as Substrings in Word",
        "difficulty": 0,
        "answer": "        count = 0\n        for pattern in patterns:\n            if word.find(pattern)!= -1:\n                count += 1\n        return count"
    },
    {
        "number": 1968,
        "title": "Array With Elements Not Equal to Average of Neighbors",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return []\n        if n == 1:\n            return [nums[0]]\n        if n == 2:\n            return [nums[0], nums[1]]\n        if n == 3:\n            return [nums[0], nums[1], nums[2]]\n        if n == 4:\n            return [nums[0], nums[1], nums[2], nums[3]]\n        if n == 5:\n            return [nums[0], nums[1], nums[2], nums[3], nums[4]]\n        if n == 6:\n            return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5]]\n        if n == 7:\n            return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6]]\n        if n == 8:\n            return [nums["
    },
    {
        "number": 1969,
        "title": "Minimum Non-Zero Product of the Array Elements",
        "difficulty": 1,
        "answer": "        # Time: O(n)\n        # Space: O(1)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage"
    },
    {
        "number": 1970,
        "title": "Last Day Where You Can Still Cross",
        "difficulty": 2,
        "answer": "        # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1])\n        # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1])\n        #"
    },
    {
        "number": 1971,
        "title": "Find if Path Exists in Graph",
        "difficulty": 0,
        "answer": "        # dfs\n        def dfs(v, visited, path):\n            visited[v] = True\n            for u in edges[v]:\n                if not visited[u]:\n                    path.append(u)\n                    dfs(u, visited, path)\n                    path.pop()\n            return path"
    },
    {
        "number": 1974,
        "title": "Minimum Time to Type Word Using Special Typewriter",
        "difficulty": 0,
        "answer": "        # Time: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1"
    },
    {
        "number": 1975,
        "title": "Maximum Matrix Sum",
        "difficulty": 1,
        "answer": "        m = len(matrix)\n        n = len(matrix[0])\n        dp = [[0] * n for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if i == 0 or j == 0:\n                    dp[i][j] = matrix[i][j]\n                else:\n                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1] - matrix[i][j]\n        return dp[m - 1][n - 1]"
    },
    {
        "number": 1976,
        "title": "Number of Ways to Arrive at Destination",
        "difficulty": 1,
        "answer": "        dp = [[0] * (n + 1) for _ in range(n + 1)]\n        dp[0][0] = 1\n        for i in range(1, n + 1):\n            for j in range(1, n + 1):\n                if i == 0 or j == 0:\n                    dp[i][j] = 0\n                elif i == j:\n                    dp[i][j] = 1\n                else:\n                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n        return dp[n][n] % (10 ** 9 + 7)"
    },
    {
        "number": 1977,
        "title": "Number of Ways to Separate Numbers",
        "difficulty": 2,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage"
    },
    {
        "number": 1979,
        "title": "Find Greatest Common Divisor of Array",
        "difficulty": 0,
        "answer": "        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return nums[0] * nums[1]\n        if len(nums) == 3:\n            return nums[0] * nums[1] * nums[2]\n        if len(nums) == 4:\n            return nums[0] * nums[1] * nums[2] * nums[3]\n        if len(nums) == 5:\n            return nums[0] * nums[1] * nums[2] * nums[3] * nums[4]\n        if len(nums) == 6:\n            return nums[0] * nums[1] * nums[2] * nums[3] * nums[4] * nums[5]\n        if len(nums) == 7:\n            return nums[0] * nums[1] * nums[2] *"
    },
    {
        "number": 1980,
        "title": "Find Unique Binary String",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return nums[0] + nums[1]\n        if n == 3:\n            return nums[0] + nums[1] + nums[2]\n        if n == 4:\n            return nums[0] + nums[1] + nums[2] + nums[3]\n        if n == 5:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4]\n        if n == 6:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5]\n        if n == 7:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5] + nums[6]\n        if n == 8:\n            return num"
    },
    {
        "number": 1981,
        "title": "Minimize the Difference Between Target and Chosen Elements",
        "difficulty": 1,
        "answer": "        m = len(mat)\n        n = len(mat[0])\n        dp = [[0] * n for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if mat[i][j] == target:\n                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1] - dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = dp[i - 1][j]\n        return min(dp[m - 1])"
    },
    {
        "number": 1982,
        "title": "Find Array Given Subset Sums",
        "difficulty": 2,
        "answer": "        # O(n^2)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O"
    },
    {
        "number": 1984,
        "title": "Minimum Difference Between Highest and Lowest of K Scores",
        "difficulty": 0,
        "answer": "        # Time: O(n)\n        # Space: O(1)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage"
    },
    {
        "number": 1985,
        "title": "Find the Kth Largest Integer in the Array",
        "difficulty": 1,
        "answer": "        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    },
    {
        "number": 1986,
        "title": "Minimum Number of Work Sessions to Finish the Tasks",
        "difficulty": 1,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n"
    },
    {
        "number": 1987,
        "title": "Number of Unique Good Subsequences",
        "difficulty": 2,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage"
    },
    {
        "number": 1991,
        "title": "Find the Middle Index in Array",
        "difficulty": 0,
        "answer": "        left = 0\n        right = len(nums) - 1\n        while left < right:\n            mid = (left + right) // 2\n            if nums[mid] == 0:\n                left = mid + 1\n            else:\n                right = mid\n        return left"
    },
    {
        "number": 1992,
        "title": "Find All Groups of Farmland",
        "difficulty": 1,
        "answer": "        m = len(land)\n        n = len(land[0])\n        if m == 0 or n == 0:\n            return []\n        if m == 1 and n == 1:\n            return [[0, 0, 0, 0]]\n        if m == 1 and n == 2:\n            return [[0, 0, 0, 0]]\n        if m == 2 and n == 2:\n            return [[0, 0, 0, 0]]\n        if m == 2 and n == 3:\n            return [[0, 0, 0, 0]]\n        if m == 3 and n == 3:\n            return [[0, 0, 0, 0]]\n        if m == 3 and n == 4:\n            return [[0, 0, 0, 0]]\n        if m == 4 and n == 4:\n            return [[0, 0, 0, 0]]\n        if m == 4 and n == 5:\n            return [[0, 0, 0, 0]]\n        if m == 5 and n == 5:\n            return [[0, 0, 0, 0]]\n        if m == 5 and n == 6:"
    },
    {
        "number": 1993,
        "title": "Operations on Tree",
        "difficulty": 1,
        "answer": "        pass\n    def __init__(self, parent: List[int]):\n    def __init__(self, parent: List[int]):\n    def __init__(self, parent: List[int]):\n    def __init__(self, parent: List[int]):\n    def __init__(self, parent: List[int]):\n    def __init__(self, parent: List[int]):\n    def __init__(self, parent: List[int]):\n    def __init__(self, parent: List[int]):\n    def __init__(self, parent: List[int]):\n    def __init__(self, parent: List[int]):\n    def __init__(self, parent: List[int]):\n    def __init__(self, parent: List[int]):\n    def __init__(self, parent: List[int]):\n    def __init__(self, parent: List[int]):\n    def __init__(self, parent: List[int]):\n    def __init__(self"
    },
    {
        "number": 1994,
        "title": "The Number of Good Subsets",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        dp = [0] * n\n        dp[0] = 1\n        for i in range(1, n):\n            for j in range(i):\n                if nums[i] % nums[j] == 0:\n                    dp[i] += dp[j]\n        return dp[-1] % (10**9 + 7)"
    },
    {
        "number": 1995,
        "title": "Count Special Quadruplets",
        "difficulty": 0,
        "answer": "        nums.sort()\n        count = 0\n        for i in range(len(nums) - 2):\n            for j in range(i + 1, len(nums) - 1):\n                for k in range(j + 1, len(nums)):\n                    if nums[i] + nums[j] + nums[k] == nums[k]:\n                        count += 1\n        return count"
    },
    {
        "number": 1996,
        "title": "The Number of Weak Characters in the Game",
        "difficulty": 1,
        "answer": "        n = len(properties)\n        weak = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                if properties[i][0] > properties[j][0] and properties[i][1] > properties[j][1]:\n                    weak += 1\n        return weak"
    },
    {
        "number": 1997,
        "title": "First Day Where You Have Been in All the Rooms",
        "difficulty": 1,
        "answer": "        n = len(nextVisit)\n        nextVisit.sort()\n        res = 0\n        for i in range(n):\n            if i % 2 == 0:\n                res += nextVisit[i]\n            else:\n                res += (i + 1) % n\n        return res % (10 ** 9 + 7)"
    },
    {
        "number": 1998,
        "title": "GCD Sort of an Array",
        "difficulty": 2,
        "answer": "        if len(nums) == 1:\n            return True\n        if len(nums) == 2:\n            return nums[0] > nums[1] and nums[1] > nums[0]\n        if len(nums) == 3:\n            return nums[0] > nums[1] and nums[1] > nums[2] and nums[2] > nums[0]\n        if len(nums) == 4:\n            return nums[0] > nums[1] and nums[1] > nums[2] and nums[2] > nums[3] and nums[3] > nums[0]\n        if len(nums) == 5:\n            return nums[0] > nums[1] and nums[1] > nums[2] and nums[2] > nums[3] and nums[3] > nums[4] and nums[4] > nums[0]\n        if len(nums) == 6:\n            return nums"
    },
    {
        "number": 2000,
        "title": "Reverse Prefix of Word",
        "difficulty": 0,
        "answer": "        if word == \"\":\n            return \"\"\n        if word[0] == ch:\n            return word[1:] + self.reversePrefix(word[1:], ch)\n        else:\n            return word[1:] + self.reversePrefix(word[1:], ch) + word[0]"
    },
    {
        "number": 2001,
        "title": "Number of Pairs of Interchangeable Rectangles",
        "difficulty": 1,
        "answer": "        rectangles.sort(key=lambda x: (x[0], x[1]))\n        n = len(rectangles)\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n):\n            for j in range(i):\n                if rectangles[i][0] < rectangles[j][0]:\n                    dp[i][j] = max(dp[i][j], dp[i][j + 1] + 1)\n                else:\n                    dp[i][j] = max(dp[i][j], dp[j + 1][i] + 1)\n        return dp[0][n - 1]"
    },
    {
        "number": 2002,
        "title": "Maximum Product of the Length of Two Palindromic Subsequences",
        "difficulty": 1,
        "answer": "        n = len(s)\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n):\n            dp[i][i] = 1\n        for i in range(n - 1, -1, -1):\n            for j in range(i + 1, n):\n                if s[i] == s[j]:\n                    dp[i][j] = dp[i + 1][j - 1]\n                else:\n                    dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n        return dp[0][n - 1]"
    },
    {
        "number": 2003,
        "title": "Smallest Missing Genetic Value in Each Subtree",
        "difficulty": 2,
        "answer": "        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    },
    {
        "number": 2006,
        "title": "Count Number of Pairs With Absolute Difference K",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        if n < k:\n            return 0\n        if n == k:\n            return 1\n        dp = [[0] * (k + 1) for _ in range(n + 1)]\n        for i in range(n + 1):\n            for j in range(k + 1):\n                if i == 0 or j == 0:\n                    dp[i][j] = 0\n                elif nums[i - 1] == nums[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n        return dp[n][k]"
    },
    {
        "number": 2007,
        "title": "Find Original Array From Doubled Array",
        "difficulty": 1,
        "answer": "        if len(changed) == 0:\n            return []\n        if len(changed) == 1:\n            return changed\n        \n        # randomize the array\n        random.shuffle(changed)\n        \n        # return the original array\n        return changed\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        "
    },
    {
        "number": 2008,
        "title": "Maximum Earnings From Taxi",
        "difficulty": 1,
        "answer": "        pass"
    },
    {
        "number": 2009,
        "title": "Minimum Number of Operations to Make Array Continuous",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 3\n        if n == 5:\n            return 4\n        if n == 6:\n            return 5\n        if n == 7:\n            return 6\n        if n == 8:\n            return 7\n        if n == 9:\n            return 8\n        if n == 10:\n            return 9\n        if n == 11:\n            return 10\n        if n == 12:\n            return 11\n        if n == 13:\n            return 12\n        if n == 14:\n            return 13\n        if n == 15:\n            return 14\n        if n == 16:\n            return 15\n        if n == 17:\n            return 16\n        if n == 18:\n            return 17\n        if n == 19:\n            return 18\n        if n == 20:\n            return 19\n        if n == 21:\n            return 20\n        if n == 22:\n            return 21"
    },
    {
        "number": 2011,
        "title": "Final Value of Variable After Performing Operations",
        "difficulty": 0,
        "answer": "        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    },
    {
        "number": 2012,
        "title": "Sum of Beauty in the Array",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return nums[0] + nums[1]\n        if n == 3:\n            return nums[0] + nums[1] + nums[2]\n        if n == 4:\n            return nums[0] + nums[1] + nums[2] + nums[3]\n        if n == 5:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4]\n        if n == 6:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5]\n        if n == 7:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5] + nums[6]"
    },
    {
        "number": 2013,
        "title": "Detect Squares",
        "difficulty": 1,
        "answer": "        pass"
    },
    {
        "number": 2014,
        "title": "Longest Subsequence Repeated k Times",
        "difficulty": 2,
        "answer": "        if len(s) == 0:\n            return \"\"\n        if len(s) == 1:\n            return s\n        if k == 0:\n            return s\n        if k == 1:\n            return s[0]\n        if k == 2:\n            return s[0] + s[1]\n        if k == 3:\n            return s[0] + s[1] + s[2]\n        if k == 4:\n            return s[0] + s[1] + s[2] + s[3]\n        if k == 5:\n            return s[0] + s[1] + s[2] + s[3] + s[4]\n        if k == 6:\n            return s[0] + s[1] + s[2] + s[3] + s[4] + s[5]\n        if k == 7:\n            return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6]\n        if k == 8:\n            "
    },
    {
        "number": 2016,
        "title": "Maximum Difference Between Increasing Elements",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return max(nums[0], nums[1])\n        if n == 3:\n            return max(nums[0], nums[1], nums[2])\n        if n == 4:\n            return max(nums[0], nums[1], nums[2], nums[3])\n        if n == 5:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4])\n        if n == 6:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5])\n        if n == 7:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6])\n        if n == 8:\n            "
    },
    {
        "number": 2017,
        "title": "Grid Game",
        "difficulty": 1,
        "answer": "        n = len(grid)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 0\n        if n == 2:\n            return grid[0][0]\n        if n == 3:\n            return grid[0][0] + grid[0][1] + grid[0][2]\n        if n == 4:\n            return grid[0][0] + grid[0][1] + grid[0][2] + grid[0][3]\n        if n == 5:\n            return grid[0][0] + grid[0][1] + grid[0][2] + grid[0][3] + grid[0][4]\n        if n == 6:\n            return grid[0][0] + grid[0][1] + grid[0][2] + grid[0][3] + grid[0][4] + grid[0][5]\n        if n == 7:\n            return grid[0][0] + grid[0][1] + grid[0][2] + grid[0][3] + grid[0][4"
    },
    {
        "number": 2018,
        "title": "Check if Word Can Be Placed In Crossword",
        "difficulty": 1,
        "answer": "        m = len(board)\n        n = len(board[0])\n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == \"#\":\n                    return False\n                if board[i][j] == word[0]:\n                    if board[i][j+1] == \"#\":\n                        return False\n                    if board[i+1][j] == \"#\":\n                        return False\n                    if board[i+1][j+1] == \"#\":\n                        return False\n        return True"
    },
    {
        "number": 2019,
        "title": "The Score of Students Solving Math Expression",
        "difficulty": 2,
        "answer": "        # dp[i][j] = max(dp[i-1][j-1], dp[i-1][j], dp[i-1][j+1]) + dp[i][j]\n        # dp[i][j] = max(dp[i-1][j-1], dp[i-1][j], dp[i-1][j+1])\n        # dp[i][j] = max(dp[i-1][j-1], dp[i-1][j], dp[i-1][j+1])\n        # dp[i][j] = max(dp[i-1][j-1], dp[i-1][j], dp[i-1][j+1])\n        # dp[i][j] = max(dp[i-1][j-1], dp[i-1][j], dp[i-1][j+1])\n        # dp[i][j] = max(dp[i-1][j-1], dp[i-"
    },
    {
        "number": 2022,
        "title": "Convert 1D Array Into 2D Array",
        "difficulty": 0,
        "answer": "        if m == 0 or n == 0:\n            return []\n        if m == 1 and n == 1:\n            return original\n        if m == 1 and n == 2:\n            return [[]]\n        if m == 2 and n == 2:\n            return [[]]\n        if m == 2 and n == 1:\n            return [[]]\n        if m == 2 and n == 2:\n            return [[]]\n        if m == 2 and n == 3:\n            return [[]]\n        if m == 3 and n == 3:\n            return [[]]\n        if m == 3 and n == 1:\n            return [[]]\n        if m == 3 and n == 2:\n            return [[]]\n        if m == 3 and n == 2:\n            return [[]]\n        if m == 3 and n == 3:\n            return [[]]\n        if m == 3 and n == 1:\n            return [[]]\n        if m == 3 and n == 2:\n            return [[]]\n        if m == 3 and n == 3:\n            return [[]]\n        if m == 3 and n == 1:\n            "
    },
    {
        "number": 2023,
        "title": "Number of Pairs of Strings With Concatenation Equal to Target",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n):\n            for j in range(i):\n                if nums[i] + nums[j] == target:\n                    dp[i][j] = 1\n        return sum(dp[n - 1])"
    },
    {
        "number": 2024,
        "title": "Maximize the Confusion of an Exam",
        "difficulty": 1,
        "answer": "        answerKey = answerKey.replace('T', 'F')\n        answerKey = answerKey.replace('F', 'T')\n        answerKey = answerKey.replace('T', 'F')\n        answerKey = answerKey.replace('F', 'T')\n        answerKey = answerKey.replace('T', 'F')\n        answerKey = answerKey.replace('F', 'T')\n        answerKey = answerKey.replace('T', 'F')\n        answerKey = answerKey.replace('F', 'T')\n        answerKey = answerKey.replace('T', 'F')\n        answerKey = answerKey.replace('F', 'T')\n        answerKey = answerKey.replace('T', 'F')\n        answerKey = answerKey.replace('F', 'T')\n        answerKey = answerKey.replace('T', 'F')\n        answerKey = answerKey.replace('F', 'T')\n        answerKey = answerKey.replace('T', 'F')\n        answerKey = answerKey.replace('F', 'T')\n        answerKey = answerKey.replace('T"
    },
    {
        "number": 2025,
        "title": "Maximum Number of Ways to Partition an Array",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21"
    },
    {
        "number": 2027,
        "title": "Minimum Moves to Convert String",
        "difficulty": 0,
        "answer": "        # Time: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1"
    },
    {
        "number": 2028,
        "title": "Find Missing Observations",
        "difficulty": 1,
        "answer": "        # Time: O(n + m)\n        # Space: O(n + m)\n        # Runtime: O(n + m)\n        # Space: O(n + m)\n        # Runtime: O(n + m)\n        # Space: O(n + m)\n        # Runtime: O(n + m)\n        # Space: O(n + m)\n        # Runtime: O(n + m)\n        # Space: O(n + m)\n        # Runtime: O(n + m)\n        # Space: O(n + m)\n        # Runtime: O(n + m)\n        # Space: O(n + m)\n        # Runtime: O(n + m)\n        # Space: O(n + m)\n        # Runtime: O(n + m)\n        # Space: O(n + m)\n        # Runtime: O(n + m)\n        # Space: O(n + m)\n        # Runtime: O(n + m)\n        # Space: O(n + m)\n        # Runtime: O(n +"
    },
    {
        "number": 2029,
        "title": "Stone Game IX",
        "difficulty": 1,
        "answer": "        n = len(stones)\n        if n == 1:\n            return True\n        if n == 2:\n            return stones[0] == stones[1]\n        if n == 3:\n            return stones[0] == stones[1] and stones[2] == stones[3]\n        if n == 4:\n            return stones[0] == stones[1] and stones[2] == stones[3] and stones[4] == stones[5]\n        if n == 5:\n            return stones[0] == stones[1] and stones[2] == stones[3] and stones[4] == stones[5] and stones[6] == stones[7]\n        if n == 6:\n            return stones[0] == stones[1] and stones[2] == stones[3] and stones[4] == stones[5] and stones[6] == stones[7] and stones[8] == stones[9]\n        if n == 7:\n            return stones[0] == stones[1] and stones[2] == stones[3] and stones[4] == stones["
    },
    {
        "number": 2030,
        "title": "Smallest K-Length Subsequence With Occurrences of a Letter",
        "difficulty": 2,
        "answer": "        # Time: O(n^2)\n        # Space: O(n^2)\n        # Runtime: O(n^2)\n        # Space: O(n^2)\n        # Runtime: O(n^2)\n        # Space: O(n^2)\n        # Runtime: O(n^2)\n        # Space: O(n^2)\n        # Runtime: O(n^2)\n        # Space: O(n^2)\n        # Runtime: O(n^2)\n        # Space: O(n^2)\n        # Runtime: O(n^2)\n        # Space: O(n^2)\n        # Runtime: O(n^2)\n        # Space: O(n^2)\n        # Runtime: O(n^2)\n        # Space: O(n^2)\n        # Runtime: O(n^2)\n        # Space: O(n^2)\n        # Runtime: O(n^2)\n        # Space: O(n^2)\n        # Runtime: O(n^"
    },
    {
        "number": 2032,
        "title": "Two Out of Three",
        "difficulty": 0,
        "answer": "        # O(n) time complexity, O(n) space complexity\n        # O(n) space complexity\n        # O(n) time complexity, O(n) space complexity\n        # O(n) time complexity, O(n) space complexity\n        # O(n) time complexity, O(n) space complexity\n        # O(n) time complexity, O(n) space complexity\n        # O(n) time complexity, O(n) space complexity\n        # O(n) time complexity, O(n) space complexity\n        # O(n) time complexity, O(n) space complexity\n        # O(n) time complexity, O(n) space complexity\n        # O(n) time complexity, O(n) space complexity\n        # O(n) time complexity, O(n) space complexity\n        # O(n) time complexity, O(n) space complexity\n        # O(n) time complexity, O(n) space complexity\n        # O(n) time complexity, O(n) space complexity\n        # O(n) time complexity, O(n) space complexity\n        "
    },
    {
        "number": 2033,
        "title": "Minimum Operations to Make a Uni-Value Grid",
        "difficulty": 1,
        "answer": "        m = len(grid)\n        n = len(grid[0])\n        if m == 0 or n == 0:\n            return -1\n        if m == 1 and n == 1:\n            return 1\n        if m == 1 and n == 2:\n            return 2\n        if m == 2 and n == 1:\n            return 3\n        if m == 2 and n == 2:\n            return 4\n        if m == 2 and n == 3:\n            return 5\n        if m == 3 and n == 1:\n            return 6\n        if m == 3 and n == 2:\n            return 7\n        if m == 3 and n == 3:\n            return 8\n        if m == 4 and n == 1:\n            return 9\n        if m == 4 and n == 2:\n            return 10\n        if m == 4 and n == 3:\n            return 11\n        if m == 4 and n == 4:\n            return 12\n        if m == 5 and n == 1:\n            return 13\n        if m == 5 and n == 2:\n            return 14\n        if m == 5 and"
    },
    {
        "number": 2034,
        "title": "Stock Price Fluctuation ",
        "difficulty": 1,
        "answer": "        pass"
    },
    {
        "number": 2035,
        "title": "Partition Array Into Two Arrays to Minimize Sum Difference",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if n == 1:\n            return abs(nums[0] - nums[1])\n        if n == 2:\n            return abs(nums[0] - nums[1])\n        if n == 3:\n            return abs(nums[0] - nums[1]) + abs(nums[1] - nums[2])\n        if n == 4:\n            return abs(nums[0] - nums[1]) + abs(nums[1] - nums[2]) + abs(nums[2] - nums[3])\n        if n == 5:\n            return abs(nums[0] - nums[1]) + abs(nums[1] - nums[2]) + abs(nums[2] - nums[3]) + abs(nums[3] - nums[4])\n        if n == 6:\n            return abs(nums[0] - nums[1]) + abs(nums[1] - nums[2]) + abs(nums["
    },
    {
        "number": 2037,
        "title": "Minimum Number of Moves to Seat Everyone",
        "difficulty": 0,
        "answer": "        n = len(seats)\n        m = len(students)\n        dp = [[0] * (m + 1) for _ in range(n + 1)]\n        for i in range(n):\n            for j in range(m):\n                if seats[i] == 1:\n                    dp[i + 1][j + 1] = dp[i][j] + 1\n                elif seats[i] == 0:\n                    dp[i + 1][j + 1] = dp[i][j]\n                else:\n                    dp[i + 1][j + 1] = dp[i][j]\n        for i in range(n - 1, -1, -1):\n            for j in range(m - 1, -1, -1):\n                if seats[i] == 1:\n                    dp[i + 1][j + 1] = dp[i][j] + 1\n                elif seats[i] == 0:\n                    dp[i + 1][j + 1] = dp[i][j]\n                else:\n                    dp[i"
    },
    {
        "number": 2038,
        "title": "Remove Colored Pieces if Both Neighbors are the Same Color",
        "difficulty": 1,
        "answer": "        n = len(colors)\n        if n == 1:\n            return True\n        if n == 2:\n            return colors[0] == colors[1]\n        if n == 3:\n            return colors[0] == colors[1] and colors[0] == colors[2]\n        if n == 4:\n            return colors[0] == colors[1] and colors[0] == colors[2] and colors[0] == colors[3]\n        if n == 5:\n            return colors[0] == colors[1] and colors[0] == colors[2] and colors[0] == colors[3] and colors[0] == colors[4]\n        if n == 6:\n            return colors[0] == colors[1] and colors[0] == colors[2] and colors[0] == colors[3] and colors[0] == colors[4] and colors[0] == colors[5]\n        if n == 7:\n            return colors[0] == colors[1] and colors[0] == colors[2] and colors[0] == colors"
    },
    {
        "number": 2039,
        "title": "The Time When the Network Becomes Idle",
        "difficulty": 1,
        "answer": "        n = len(edges)\n        m = len(patience)\n        dp = [[0] * (m + 1) for _ in range(n + 1)]\n        for i in range(1, n + 1):\n            for j in range(1, m + 1):\n                if edges[i - 1][0] == patience[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n        return dp[n][m]"
    },
    {
        "number": 2040,
        "title": "Kth Smallest Product of Two Sorted Arrays",
        "difficulty": 2,
        "answer": "        nums1.sort()\n        nums2.sort()\n        if k == 0:\n            return 0\n        if k == 1:\n            return nums1[0] * nums2[0]\n        if k == 2:\n            return nums1[0] * nums2[1]\n        if k == 3:\n            return nums1[0] * nums2[2]\n        if k == 4:\n            return nums1[0] * nums2[3]\n        if k == 5:\n            return nums1[0] * nums2[4]\n        if k == 6:\n            return nums1[0] * nums2[5]\n        if k == 7:\n            return nums1[0] * nums2[6]\n        if k == 8:\n            return nums1[0] * nums2[7]\n        if k == 9:\n            return nums1[0] * nums2[8]\n        if k == 10:\n            return nums1[0] *"
    },
    {
        "number": 2042,
        "title": "Check if Numbers Are Ascending in a Sentence",
        "difficulty": 0,
        "answer": "        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    },
    {
        "number": 2043,
        "title": "Simple Bank System",
        "difficulty": 1,
        "answer": "        pass"
    },
    {
        "number": 2044,
        "title": "Count Number of Maximum Bitwise-OR Subsets",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 1:\n            return 1\n        res = 0\n        for i in range(n):\n            res += nums[i] & nums[i + 1]\n        return res"
    },
    {
        "number": 2045,
        "title": "Second Minimum Time to Reach Destination",
        "difficulty": 2,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Time: O(n)\n        # Space: O(n)\n        # Time: O(n)\n        # Space: O(n)\n        # Time: O(n)\n        # Space: O(n)\n        # Time: O(n)\n        # Space: O(n)\n        # Time: O(n)\n        # Space: O(n)\n        # Time: O(n)\n        # Space: O(n)\n        # Time: O(n)\n        # Space: O(n)\n        # Time: O(n)\n        # Space: O(n)\n        # Time: O(n)\n        # Space: O(n)\n        # Time: O(n)\n        # Space: O(n)\n        # Time: O(n)\n        # Space: O(n)\n        # Time: O(n)\n        # Space: O(n"
    },
    {
        "number": 2047,
        "title": "Number of Valid Words in a Sentence",
        "difficulty": 0,
        "answer": "        # \u5224\u65ad\u662f\u5426\u4e3a\u7a7a\n        if not sentence:\n            return 0\n        # \u5224\u65ad\u662f\u5426\u4e3a\u7a7a\n        if not sentence:\n            return 0\n        # \u5224\u65ad\u662f\u5426\u4e3a\u7a7a\n        if not sentence:\n            return 0\n        # \u5224\u65ad\u662f\u5426\u4e3a\u7a7a\n        if not sentence:\n            return 0\n        # \u5224\u65ad\u662f\u5426\u4e3a\u7a7a\n        if not sentence:\n            return 0\n        # \u5224\u65ad\u662f\u5426\u4e3a\u7a7a\n        if not sentence:\n            return 0\n        # \u5224\u65ad\u662f\u5426\u4e3a\u7a7a\n        if not sentence:\n            return 0\n        # \u5224\u65ad\u662f\u5426\u4e3a\u7a7a\n        if not sentence:\n            return 0\n        # \u5224\u65ad\u662f\u5426\u4e3a\u7a7a\n        if not sentence:\n            return 0\n        # \u5224\u65ad\u662f\u5426\u4e3a\u7a7a\n"
    },
    {
        "number": 2048,
        "title": "Next Greater Numerically Balanced Number",
        "difficulty": 1,
        "answer": "        if n == 1:\n            return 2\n        if n == 2:\n            return 3\n        if n == 3:\n            return 4\n        if n == 4:\n            return 5\n        if n == 5:\n            return 6\n        if n == 6:\n            return 7\n        if n == 7:\n            return 8\n        if n == 8:\n            return 9\n        if n == 9:\n            return 10\n        if n == 10:\n            return 11\n        if n == 11:\n            return 12\n        if n == 12:\n            return 13\n        if n == 13:\n            return 14\n        if n == 14:\n            return 15\n        if n == 15:\n            return 16\n        if n == 16:\n            return 17\n        if n == 17:\n            return 18\n        if n == 18:\n            return 19\n        if n == 19:\n            return 20\n        if n == 20:\n            return 21\n        if n == 21:\n            return 22\n        if n == 22:\n            return 23\n        if n == 23:\n            "
    },
    {
        "number": 2049,
        "title": "Count Nodes With the Highest Score",
        "difficulty": 1,
        "answer": "        n = len(parents)\n        if n == 0:\n            return 0\n        dp = [0] * n\n        dp[0] = 1\n        for i in range(1, n):\n            for j in range(i):\n                if parents[j] > parents[i]:\n                    dp[i] = dp[j] * parents[i]\n        return dp[-1]"
    },
    {
        "number": 2050,
        "title": "Parallel Courses III",
        "difficulty": 2,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n"
    },
    {
        "number": 2053,
        "title": "Kth Distinct String in an Array",
        "difficulty": 0,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage"
    },
    {
        "number": 2054,
        "title": "Two Best Non-Overlapping Events",
        "difficulty": 1,
        "answer": "        events.sort(key=lambda x: x[0])\n        events.sort(key=lambda x: x[1])\n        events.sort(key=lambda x: x[2])\n        events.sort(key=lambda x: x[0])\n        events.sort(key=lambda x: x[1])\n        events.sort(key=lambda x: x[2])\n        events.sort(key=lambda x: x[0])\n        events.sort(key=lambda x: x[1])\n        events.sort(key=lambda x: x[2])\n        events.sort(key=lambda x: x[0])\n        events.sort(key=lambda x: x[1])\n        events.sort(key=lambda x: x[2])\n        events.sort(key=lambda x: x[0])\n        events.sort(key=lambda x: x[1])\n        events.sort(key=lambda x: x[2])\n        events.sort(key=lambda x: x[0])\n        events.sort(key=lambda x:"
    },
    {
        "number": 2055,
        "title": "Plates Between Candles",
        "difficulty": 1,
        "answer": "        # Time: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)"
    },
    {
        "number": 2056,
        "title": "Number of Valid Move Combinations On Chessboard",
        "difficulty": 2,
        "answer": "        n = len(pieces)\n        m = len(positions)\n        dp = [[0 for _ in range(m)] for _ in range(n)]\n        for i in range(n):\n            for j in range(m):\n                if pieces[j] == \"rook\":\n                    if i == 0 or j == 0:\n                        dp[i][j] = 1\n                    else:\n                        dp[i][j] = dp[i-1][j] + dp[i][j-1]\n                elif pieces[j] == \"queen\":\n                    if i == 0 or j == 0:\n                        dp[i][j] = 1\n                    else:\n                        dp[i][j] = dp[i-1][j] + dp[i][j-1]\n                elif pieces[j] == \"bishop\":\n                    if i == 0 or j == 0:\n                        dp[i][j] = 1\n                    else:\n                        dp[i][j] = dp[i-1][j] + dp[i][j-1]"
    },
    {
        "number": 2057,
        "title": "Smallest Index With Equal Value",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        if n == 0:\n            return -1\n        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 3\n        if n == 5:\n            return 4\n        if n == 6:\n            return 5\n        if n == 7:\n            return 6\n        if n == 8:\n            return 7\n        if n == 9:\n            return 8\n        if n == 0:\n            return -1\n        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 3\n        if n == 5:\n            return 4\n        if n == 6:\n            return 5\n        if n == 7:\n            return 6\n        if n == 8:\n            return 7\n        if n == 9:\n            return 8\n        if n == 0:\n            return -1\n        if n == 1:\n"
    },
    {
        "number": 2058,
        "title": "Find the Minimum and Maximum Number of Nodes Between Critical Points",
        "difficulty": 1,
        "answer": "        if not head:\n            return [-1, -1]\n        slow = head\n        fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                break\n        if not fast:\n            return [-1, -1]\n        slow = head\n        while slow!= fast:\n            slow = slow.next\n            fast = fast.next\n        return [slow.val, fast.val]"
    },
    {
        "number": 2059,
        "title": "Minimum Operations to Convert Number",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 0 if nums[0] == start else -1\n        if n == 2:\n            return self.minimumOperations(nums, start, goal)\n        if n == 3:\n            return self.minimumOperations(nums, start, goal)\n        if n == 4:\n            return self.minimumOperations(nums, start, goal)\n        if n == 5:\n            return self.minimumOperations(nums, start, goal)\n        if n == 6:\n            return self.minimumOperations(nums, start, goal)\n        if n == 7:\n            return self.minimumOperations(nums, start, goal)\n        if n == 8:\n            return self.minimumOperations(nums, start, goal)\n        if n == 9:\n            return self.minimumOperations(nums, start, goal)\n        if n == 10:\n            return self.minimumOperations(nums, start, goal)\n        "
    },
    {
        "number": 2060,
        "title": "Check if an Original String Exists Given Two Encoded Strings",
        "difficulty": 2,
        "answer": "        if len(s1)!= len(s2):\n            return False\n        if len(s1) == 0 or len(s2) == 0:\n            return False\n        if len(s1) == 1 and len(s2) == 1:\n            return True\n        if len(s1) == 1 and len(s2) > 1:\n            return False\n        if len(s1) > 1 and len(s2) == 1:\n            return False\n        if len(s1) > 1 and len(s2) > 1:\n            return False\n        if len(s1) > 1 and len(s2) > 1:\n            return False\n        if len(s1) > 1 and len(s2) > 1:\n            return False\n        if len(s1) > 1 and len(s2) > 1:\n            return False\n        if len(s1) > 1 and len(s2) > 1:\n            return False\n        if len(s1) > 1 and len(s2) > 1:\n            return False\n        if"
    },
    {
        "number": 2062,
        "title": "Count Vowel Substrings of a String",
        "difficulty": 0,
        "answer": "        count = 0\n        for i in range(len(word)):\n            if word[i] in 'aeiouu':\n                count += 1\n        return count"
    },
    {
        "number": 2063,
        "title": "Vowels of All Substrings",
        "difficulty": 1,
        "answer": "        vowels = {'a', 'e', 'i', 'o', 'u'}\n        count = 0\n        for i in range(len(word)):\n            if word[i] in vowels:\n                count += 1\n        return count"
    },
    {
        "number": 2064,
        "title": "Minimized Maximum of Products Distributed to Any Store",
        "difficulty": 1,
        "answer": "        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    },
    {
        "number": 2065,
        "title": "Maximum Path Quality of a Graph",
        "difficulty": 2,
        "answer": "        n = len(values)\n        if n == 0:\n            return 0\n        m = len(edges)\n        if m == 0:\n            return 0\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n):\n            for j in range(n):\n                if i == j:\n                    dp[i][j] = values[i]\n                else:\n                    dp[i][j] = max(dp[i][j - 1] + values[i], dp[i - 1][j] + values[j])\n        return dp[n - 1][n - 1]"
    },
    {
        "number": 2068,
        "title": "Check Whether Two Strings are Almost Equivalent",
        "difficulty": 0,
        "answer": "        # Time: O(n^2)\n        # Space: O(n)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        #"
    },
    {
        "number": 2069,
        "title": "Walking Robot Simulation II",
        "difficulty": 1,
        "answer": "    def getPos(self) -> List[int]:\n    def getDir(self) -> str:\n    def step(self, num: int) -> None:\n    def getPos(self) -> List[int]:\n    def getDir(self) -> str:\n    def step(self, num: int) -> None:\n    def getPos(self) -> List[int]:\n    def getDir(self) -> str:\n    def step(self, num: int) -> None:\n    def getPos(self) -> List[int]:\n    def getDir(self) -> str:\n    def step(self, num: int) -> None:\n    def getPos(self) -> List[int]:\n    def getDir(self) -> str:\n    def step(self, num: int) -> None:\n    def getPos(self) -> List[int]:\n    def getDir(self) -> str:\n    def step(self, num: int) -> None:\n    def getPos(self) -> List[int]:\n    def getDir(self) -> str"
    },
    {
        "number": 2070,
        "title": "Most Beautiful Item for Each Query",
        "difficulty": 1,
        "answer": "        # Time: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)"
    },
    {
        "number": 2071,
        "title": "Maximum Number of Tasks You Can Assign",
        "difficulty": 2,
        "answer": "        # Time: O(n + m)\n        # Space: O(n + m)\n        # Runtime: O(n + m)\n        # Space: O(n + m)\n        # Runtime: O(n + m)\n        # Space: O(n + m)\n        # Runtime: O(n + m)\n        # Space: O(n + m)\n        # Runtime: O(n + m)\n        # Space: O(n + m)\n        # Runtime: O(n + m)\n        # Space: O(n + m)\n        # Runtime: O(n + m)\n        # Space: O(n + m)\n        # Runtime: O(n + m)\n        # Space: O(n + m)\n        # Runtime: O(n + m)\n        # Space: O(n + m)\n        # Runtime: O(n + m)\n        # Space: O(n + m)\n        # Runtime: O(n + m)\n        # Space: O(n + m)\n        # Runtime: O(n +"
    },
    {
        "number": 2073,
        "title": "Time Needed to Buy Tickets",
        "difficulty": 0,
        "answer": "        pass"
    },
    {
        "number": 2074,
        "title": "Reverse Nodes in Even Length Groups",
        "difficulty": 1,
        "answer": "        if not head:\n            return head\n        curr = head\n        prev = None\n        while curr:\n            next = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next\n        return prev"
    },
    {
        "number": 2075,
        "title": "Decode the Slanted Ciphertext",
        "difficulty": 1,
        "answer": "        # Write your code here\n        originalText = \"\"\n        for i in range(rows):\n            for j in range(i, rows):\n                originalText += encodedText[j]\n            originalText += \" \"\n        return originalText"
    },
    {
        "number": 2076,
        "title": "Process Restricted Friend Requests",
        "difficulty": 2,
        "answer": "        result = [False] * n\n        for i in range(n):\n            for j in range(i + 1, n):\n                if restrictions[i][0] == restrictions[j][0] and restrictions[i][1] == restrictions[j][1]:\n                    result[i] = True\n                    result[j] = True\n        return result"
    },
    {
        "number": 2078,
        "title": "Two Furthest Houses With Different Colors",
        "difficulty": 0,
        "answer": "        n = len(colors)\n        if n == 0:\n            return 0\n        if n == 1:\n            return abs(colors[0] - colors[1])\n        dp = [0] * n\n        dp[0] = colors[0]\n        dp[1] = colors[1]\n        for i in range(2, n):\n            dp[i] = max(colors[i] - dp[i - 1], colors[i] - dp[i - 2])\n        return dp[-1]"
    },
    {
        "number": 2079,
        "title": "Watering Plants",
        "difficulty": 1,
        "answer": "        n = len(plants)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21"
    },
    {
        "number": 2080,
        "title": "Range Frequency Queries",
        "difficulty": 1,
        "answer": "        pass"
    },
    {
        "number": 2081,
        "title": "Sum of k-Mirror Numbers",
        "difficulty": 2,
        "answer": "        if k == 1:\n            return n\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n        if n == 22:\n            "
    },
    {
        "number": 2085,
        "title": "Count Common Words With One Occurrence",
        "difficulty": 0,
        "answer": "        # Time: O(m + n)\n        # Space: O(m + n)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n"
    },
    {
        "number": 2086,
        "title": "Minimum Number of Food Buckets to Feed the Hamsters",
        "difficulty": 1,
        "answer": "        n = len(hamsters)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 2\n        if n == 5:\n            return 2\n        if n == 6:\n            return 2\n        if n == 7:\n            return 2\n        if n == 8:\n            return 2\n        if n == 9:\n            return 2\n        if n == 10:\n            return 2\n        if n == 11:\n            return 2\n        if n == 12:\n            return 2\n        if n == 13:\n            return 2\n        if n == 14:\n            return 2\n        if n == 15:\n            return 2\n        if n == 16:\n            return 2\n        if n == 17:\n            return 2\n        if n == 18:\n            return 2\n        if n == 19:\n            return 2\n        if n == 20:\n            return 2\n        if n == 21:\n            return 2"
    },
    {
        "number": 2087,
        "title": "Minimum Cost Homecoming of a Robot in a Grid",
        "difficulty": 1,
        "answer": "        m = len(rowCosts)\n        n = len(colCosts)\n        cost = 0\n        for i in range(m):\n            cost += rowCosts[i] + colCosts[i]\n        return cost"
    },
    {
        "number": 2088,
        "title": "Count Fertile Pyramids in a Land",
        "difficulty": 2,
        "answer": "        m = len(grid)\n        n = len(grid[0])\n        total = 0\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == 1:\n                    total += 1\n        for i in range(m - 1, -1, -1):\n            for j in range(n - 1, -1, -1):\n                if grid[i][j] == 1:\n                    total += 1\n        return total"
    },
    {
        "number": 2089,
        "title": "Find Target Indices After Sorting Array",
        "difficulty": 0,
        "answer": "        nums.sort()\n        res = []\n        for i in range(len(nums)):\n            if nums[i] == target:\n                res.append(i)\n        return res"
    },
    {
        "number": 2090,
        "title": "K Radius Subarray Averages",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n < k:\n            return [-1]\n        avgs = [0] * n\n        for i in range(n):\n            avgs[i] = nums[i]\n            if i >= k:\n                avgs[i - k] = nums[i]\n            if i + k < n:\n                avgs[i + k] = nums[i + k]\n        return avgs"
    },
    {
        "number": 2091,
        "title": "Removing Minimum and Maximum From Array",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21"
    },
    {
        "number": 2092,
        "title": "Find All People With Secret",
        "difficulty": 2,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n"
    },
    {
        "number": 2094,
        "title": "Finding 3-Digit Even Numbers",
        "difficulty": 0,
        "answer": "        def find_even_numbers(digits):\n            if len(digits) == 0:\n                return []\n            if len(digits) == 1:\n                return digits\n            if len(digits) == 2:\n                return [digits[0] + digits[1]]\n            if len(digits) == 3:\n                return [digits[0] + digits[1] + digits[2]]\n            if len(digits) == 4:\n                return [digits[0] + digits[1] + digits[2] + digits[3]]\n            if len(digits) == 5:\n                return [digits[0] + digits[1] + digits[2] + digits[3] + digits[4]]\n            if len(digits) == 6:\n                return [digits[0] + digits[1] + digits[2] + digits[3] + digits[4] + digits[5]]\n            if len(digits) == 7:\n                return [digits[0] + digits[1] + digits[2] + digits["
    },
    {
        "number": 2095,
        "title": "Delete the Middle Node of a Linked List",
        "difficulty": 1,
        "answer": "        if not head:\n            return head\n        slow = head\n        fast = head\n        while fast.next and fast.next.next:\n            slow = slow.next\n            fast = fast.next.next\n        slow.next = None\n        return head"
    },
    {
        "number": 2096,
        "title": "Step-By-Step Directions From a Binary Tree Node to Another",
        "difficulty": 1,
        "answer": "        if not root:\n            return \"\"\n        if root.val == startValue:\n            return \"L\" + self.getDirections(root.left, startValue, destValue) + \"U\" + self.getDirections(root.right, startValue, destValue)\n        if root.val == destValue:\n            return \"L\" + self.getDirections(root.left, startValue, destValue) + \"U\" + self.getDirections(root.right, startValue, destValue)\n        return self.getDirections(root.left, startValue, destValue) + self.getDirections(root.right, startValue, destValue)"
    },
    {
        "number": 2097,
        "title": "Valid Arrangement of Pairs",
        "difficulty": 2,
        "answer": "        def dfs(start, end, arr):\n            if start == end:\n                return True\n            if start == end - 1:\n                return arr[start] == arr[end]\n            for i in range(start, end):\n                if arr[i] == arr[start] and dfs(i + 1, end, arr):\n                    return True\n            return False\n        \n        def dfs2(start, end, arr):\n            if start == end:\n                return True\n            if start == end - 1:\n                return arr[start] == arr[end]\n            for i in range(start, end):\n                if arr[i] == arr[start] and dfs2(i + 1, end, arr):\n                    return True\n            return False\n        \n        def dfs3(start, end, arr):\n            if start == end:\n                return True\n            if start == end - 1:\n                return arr[start] == arr[end]\n            for i in range(start, end):\n                if arr[i] == arr[start] and dfs"
    },
    {
        "number": 2099,
        "title": "Find Subsequence of Length K With the Largest Sum",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        if n < k:\n            return [-1]\n        if n == k:\n            return nums\n        if n == 1:\n            return [nums[0]]\n        if n == 2:\n            return [nums[0], nums[1]]\n        if n == 3:\n            return [nums[0], nums[1], nums[2]]\n        if n == 4:\n            return [nums[0], nums[1], nums[2], nums[3]]\n        if n == 5:\n            return [nums[0], nums[1], nums[2], nums[3], nums[4]]\n        if n == 6:\n            return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5]]\n        if n == 7:\n            return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6]]"
    },
    {
        "number": 2100,
        "title": "Find Good Days to Rob the Bank",
        "difficulty": 1,
        "answer": "        res = []\n        for i in range(len(security)):\n            if security[i] >= time:\n                res.append(i)\n        return res"
    },
    {
        "number": 2101,
        "title": "Detonate the Maximum Bombs",
        "difficulty": 1,
        "answer": "        # Time: O(n^2)\n        # Space: O(n^2)\n        # Runtime: O(n^2)\n        # Space: O(n^2)\n        # Runtime: O(n^2)\n        # Space: O(n^2)\n        # Runtime: O(n^2)\n        # Space: O(n^2)\n        # Runtime: O(n^2)\n        # Space: O(n^2)\n        # Runtime: O(n^2)\n        # Space: O(n^2)\n        # Runtime: O(n^2)\n        # Space: O(n^2)\n        # Runtime: O(n^2)\n        # Space: O(n^2)\n        # Runtime: O(n^2)\n        # Space: O(n^2)\n        # Runtime: O(n^2)\n        # Space: O(n^2)\n        # Runtime: O(n^2)\n        # Space: O(n^2)\n        # Runtime: O(n^"
    },
    {
        "number": 2102,
        "title": "Sequentially Ordinal Rank Tracker",
        "difficulty": 2,
        "answer": "        pass"
    },
    {
        "number": 2103,
        "title": "Rings and Rods",
        "difficulty": 0,
        "answer": "        n = len(rings)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        dp = [0] * n\n        dp[0] = 1\n        dp[1] = 1\n        for i in range(2, n):\n            for j in range(i):\n                if rings[i] == rings[j]:\n                    dp[i] += dp[j]\n        return dp[n - 1]"
    },
    {
        "number": 2104,
        "title": "Sum of Subarray Ranges",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return nums[0] + nums[1]\n        if n == 3:\n            return nums[0] + nums[1] + nums[2]\n        if n == 4:\n            return nums[0] + nums[1] + nums[2] + nums[3]\n        if n == 5:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4]\n        if n == 6:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5]\n        if n == 7:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5] + nums[6]"
    },
    {
        "number": 2105,
        "title": "Watering Plants II",
        "difficulty": 1,
        "answer": "        # Time: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1"
    },
    {
        "number": 2106,
        "title": "Maximum Fruits Harvested After at Most K Steps",
        "difficulty": 2,
        "answer": "        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    },
    {
        "number": 2108,
        "title": "Find First Palindromic String in the Array",
        "difficulty": 0,
        "answer": "        def isPalindrome(s):\n            return s == s[::-1]\n        \n        def isPalindrome2(s):\n            return s == s[::-1]\n        \n        def isPalindrome3(s):\n            return s == s[::-1]\n        \n        def isPalindrome4(s):\n            return s == s[::-1]\n        \n        def isPalindrome5(s):\n            return s == s[::-1]\n        \n        def isPalindrome6(s):\n            return s == s[::-1]\n        \n        def isPalindrome7(s):\n            return s == s[::-1]\n        \n        def isPalindrome8(s):\n            return s == s[::-1]\n        \n        def isPalindrome9(s):\n            return s == s[::-1]\n        \n        def isPalindrome10(s):\n            return s == s[::-1]\n        \n        def isPalindrome11(s):\n"
    },
    {
        "number": 2109,
        "title": "Adding Spaces to a String",
        "difficulty": 1,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Space complexity: O(n)\n        # Space complexity: O(n)\n        # Space complexity: O(n)\n        # Space complexity: O(n)\n        # Space complexity: O(n)\n        # Space complexity: O(n)\n        # Space complexity: O(n)\n        # Space complexity: O(n)\n        # Space complexity: O(n)\n        # Space complexity: O(n)\n        # Space complexity: O(n)\n        # Space complexity: O(n)\n        # Space complexity: O(n)\n        # Space complexity: O(n)\n        # Space complexity: O(n)\n        # Space complexity: O(n)\n        # Space complexity: O(n)\n        # Space complexity: O(n)\n        # Space complexity: O(n)\n        # Space complexity: O(n)\n        # Space complexity: O(n)\n        # Space complexity: O(n)\n        # Space complexity: O(n)\n        #"
    },
    {
        "number": 2110,
        "title": "Number of Smooth Descent Periods of a Stock",
        "difficulty": 1,
        "answer": "        n = len(prices)\n        dp = [0] * n\n        dp[0] = 1\n        for i in range(1, n):\n            dp[i] = dp[i - 1] + 1\n            for j in range(i):\n                if prices[j] < prices[i] and dp[i] > dp[j] + 1:\n                    dp[i] = dp[j] + 1\n        return dp[-1]"
    },
    {
        "number": 2111,
        "title": "Minimum Operations to Make the Array K-Increasing",
        "difficulty": 2,
        "answer": "        n = len(arr)\n        if n < k:\n            return 0\n        if n == k:\n            return n\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n"
    },
    {
        "number": 2114,
        "title": "Maximum Number of Words Found in Sentences",
        "difficulty": 0,
        "answer": "        sentences = sorted(sentences, key=len, reverse=True)\n        max_len = 0\n        for sentence in sentences:\n            if len(sentence) > max_len:\n                max_len = len(sentence)\n        return max_len\n"
    },
    {
        "number": 2115,
        "title": "Find All Possible Recipes from Given Supplies",
        "difficulty": 1,
        "answer": "        # dp[i][j] = i\ubc88\uc9f8 \uc778\ub371\uc2a4\uc5d0\uc11c j\ubc88\uc9f8 \uc778\ub371\uc2a4\uc5d0\uc11c i\ubc88\uc9f8 \uc778\ub371\uc2a4\uc5d0\uc11c j\ubc88\uc9f8 \uc778\ub371\uc2a4\uc5d0\uc11c i\ubc88\uc9f8 \uc778\ub371\uc2a4\uc5d0\uc11c j\ubc88\uc9f8 \uc778\ub371\uc2a4\uc5d0\uc11c i\ubc88\uc9f8 \uc778\ub371\uc2a4\uc5d0\uc11c j\ubc88\uc9f8 \uc778\ub371\uc2a4\uc5d0\uc11c i\ubc88\uc9f8 \uc778\ub371\uc2a4\uc5d0\uc11c j\ubc88\uc9f8 \uc778\ub371\uc2a4\uc5d0\uc11c i\ubc88\uc9f8 \uc778\ub371\uc2a4\uc5d0\ufffd"
    },
    {
        "number": 2116,
        "title": "Check if a Parentheses String Can Be Valid",
        "difficulty": 1,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage"
    },
    {
        "number": 2117,
        "title": "Abbreviating the Product of a Range",
        "difficulty": 2,
        "answer": "        # The number of digits after removing the trailing zeros is 6, so we do not abbreviate it further.\n        # The number of digits after removing the trailing zeros is 6, so we do not abbreviate it further.\n        # The number of digits after removing the trailing zeros is 6, so we do not abbreviate it further.\n        # The number of digits after removing the trailing zeros is 6, so we do not abbreviate it further.\n        # The number of digits after removing the trailing zeros is 6, so we do not abbreviate it further.\n        # The number of digits after removing the trailing zeros is 6, so we do not abbreviate it further.\n        # The number of digits after removing the trailing zeros is 6, so we do not abbreviate it further.\n        # The number of digits after removing the trailing zeros is 6, so we do not abbreviate it further.\n        # The number of digits after removing the trailing zeros is 6, so we do not abbreviate it further.\n        # The number of digits after removing the trailing zeros is 6, so we do not abbreviate it further.\n"
    },
    {
        "number": 2119,
        "title": "A Number After a Double Reversal",
        "difficulty": 0,
        "answer": "        if num == 0:\n            return False\n        if num == 1:\n            return True\n        if num == 2:\n            return False\n        if num == 3:\n            return True\n        if num == 4:\n            return False\n        if num == 5:\n            return True\n        if num == 6:\n            return False\n        if num == 7:\n            return True\n        if num == 8:\n            return False\n        if num == 9:\n            return True\n        if num == 10:\n            return False\n        if num == 11:\n            return True\n        if num == 12:\n            return False\n        if num == 13:\n            return True\n        if num == 14:\n            return False\n        if num == 15:\n            return True\n        if num == 16:\n            return False\n        if num == 17:\n            return True\n        if num == 18:\n            return False\n        if num == 19:\n            return True\n        if num == 20:\n            return False\n        if num == 21:\n            return True\n        if num == 22:\n            "
    },
    {
        "number": 2120,
        "title": "Execution of All Suffix Instructions Staying in a Grid",
        "difficulty": 1,
        "answer": "        # Time: O(m * n)\n        # Space: O(m * n)\n        # Runtime: O(m * n)\n        # Space: O(m * n)\n        # Runtime: O(m * n)\n        # Space: O(m * n)\n        # Runtime: O(m * n)\n        # Space: O(m * n)\n        # Runtime: O(m * n)\n        # Space: O(m * n)\n        # Runtime: O(m * n)\n        # Space: O(m * n)\n        # Runtime: O(m * n)\n        # Space: O(m * n)\n        # Runtime: O(m * n)\n        # Space: O(m * n)\n        # Runtime: O(m * n)\n        # Space: O(m * n)\n        # Runtime: O(m * n)\n        # Space: O(m * n)\n        # Runtime: O(m * n)\n        # Space: O(m * n)\n        # Runtime: O(m *"
    },
    {
        "number": 2121,
        "title": "Intervals Between Identical Elements",
        "difficulty": 1,
        "answer": "        n = len(arr)\n        intervals = [0] * n\n        for i in range(n):\n            intervals[i] = arr[i] - arr[i]\n        return intervals"
    },
    {
        "number": 2122,
        "title": "Recover the Original Array",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        lower = [0] * n\n        higher = [0] * n\n        for i in range(n):\n            lower[i] = nums[i] - k\n            higher[i] = nums[i] + k\n        for i in range(n):\n            if lower[i] < 0:\n                lower[i] = 0\n            if higher[i] > n:\n                higher[i] = n\n        return lower + higher"
    },
    {
        "number": 2124,
        "title": "Check if All A\"s Appears Before All B\"s",
        "difficulty": 0,
        "answer": "        if len(s) == 0:\n            return False\n        for i in range(len(s)):\n            if s[i] == 'a' and i > 0 and s[i - 1] == 'b':\n                return True\n        return False"
    },
    {
        "number": 2125,
        "title": "Number of Laser Beams in a Bank",
        "difficulty": 1,
        "answer": "        m = len(bank)\n        n = len(bank[0])\n        dp = [[0 for _ in range(n)] for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if bank[i][j] == '0':\n                    dp[i][j] = 1\n                else:\n                    dp[i][j] = 0\n        return sum(dp[i][j] for i in range(m) for j in range(n))"
    },
    {
        "number": 2126,
        "title": "Destroying Asteroids",
        "difficulty": 1,
        "answer": "        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    },
    {
        "number": 2127,
        "title": "Maximum Employees to Be Invited to a Meeting",
        "difficulty": 2,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n"
    },
    {
        "number": 2129,
        "title": "Capitalize the Title",
        "difficulty": 0,
        "answer": "        title = title.split()\n        for i in range(len(title)):\n            title[i] = title[i].capitalize()\n        return \" \".join(title)"
    },
    {
        "number": 2130,
        "title": "Maximum Twin Sum of a Linked List",
        "difficulty": 1,
        "answer": "        if not head:\n            return 0\n        \n        def get_twin_sum(node):\n            if not node.next:\n                return 0\n            return node.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next."
    },
    {
        "number": 2131,
        "title": "Longest Palindrome by Concatenating Two Letter Words",
        "difficulty": 1,
        "answer": "        # Time: O(n^2)\n        # Space: O(n)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        #"
    },
    {
        "number": 2132,
        "title": "Stamping the Grid",
        "difficulty": 2,
        "answer": "        # Time: O(m * n)\n        # Space: O(m * n)\n        def check(grid, row, col, height, width):\n            if row >= height or col >= width:\n                return False\n            if grid[row][col] == 0:\n                return False\n            if grid[row][col] == 1:\n                return True\n            if row < height - 1 and grid[row + 1][col] == 0:\n                return check(grid, row + 1, col, height, width)\n            if col < width - 1 and grid[row][col + 1] == 0:\n                return check(grid, row, col + 1, height, width)\n            return False\n        \n        def rotate(grid, row, col, height, width):\n            if row >= height or col >= width:\n                return\n            if grid[row][col] == 0:\n                return\n            if grid[row][col] == 1:\n                return\n            if row < height - 1 and grid[row + 1][col] == 0:\n                grid[row + 1]["
    },
    {
        "number": 2133,
        "title": "Check if Every Row and Column Contains All Numbers",
        "difficulty": 0,
        "answer": "        n = len(matrix)\n        for i in range(n):\n            for j in range(n):\n                if not self.isValid(matrix, i, j):\n                    return False\n        return True"
    },
    {
        "number": 2134,
        "title": "Minimum Swaps to Group All 1\"s Together II",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21"
    },
    {
        "number": 2135,
        "title": "Count Words Obtained After Adding a Letter",
        "difficulty": 1,
        "answer": "        # Time: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)"
    },
    {
        "number": 2136,
        "title": "Earliest Possible Day of Full Bloom",
        "difficulty": 2,
        "answer": "        n = len(plantTime)\n        if n == 0:\n            return 0\n        if n == 1:\n            return plantTime[0]\n        if n == 2:\n            return max(plantTime[0], plantTime[1]) + growTime[0]\n        if n == 3:\n            return max(plantTime[0], plantTime[1], plantTime[2]) + growTime[0] + growTime[1]\n        if n == 4:\n            return max(plantTime[0], plantTime[1], plantTime[2], plantTime[3]) + growTime[0] + growTime[1] + growTime[2] + growTime[3]\n        if n == 5:\n            return max(plantTime[0], plantTime[1], plantTime[2], plantTime[3], plantTime[4]) + growTime[0] + growTime[1] + growTime[2] + growTime[3] + growTime[4]\n        if n == 6:\n            return max(plantTime[0], plantTime[1], plantTime[2"
    },
    {
        "number": 2138,
        "title": "Divide a String Into Groups of Size k",
        "difficulty": 0,
        "answer": "        res = []\n        for i in range(len(s) - k + 1):\n            res.append(s[i:i + k])\n        return res"
    },
    {
        "number": 2139,
        "title": "Minimum Moves to Reach Target Score",
        "difficulty": 1,
        "answer": "        if maxDoubles == 0:\n            return 0\n        if target == 1:\n            return 1\n        if target == 2:\n            return 2\n        if target == 3:\n            return 4\n        if target == 4:\n            return 7\n        if target == 5:\n            return 8\n        if target == 6:\n            return 9\n        if target == 7:\n            return 18\n        if target == 8:\n            return 19\n        if target == 9:\n            return 20\n        if target == 10:\n            return 21\n        if target == 11:\n            return 22\n        if target == 12:\n            return 23\n        if target == 13:\n            return 24\n        if target == 14:\n            return 25\n        if target == 15:\n            return 26\n        if target == 16:\n            return 27\n        if target == 17:\n            return 28\n        if target == 18:\n            return 29\n        if target == 19:\n            return 30\n        if target == 20:\n            return 31\n        if target == 21:\n            return 32\n        if target == 22:"
    },
    {
        "number": 2140,
        "title": "Solving Questions With Brainpower",
        "difficulty": 1,
        "answer": "        # Time: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)"
    },
    {
        "number": 2141,
        "title": "Maximum Running Time of N Computers",
        "difficulty": 2,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n"
    },
    {
        "number": 2144,
        "title": "Minimum Cost of Buying Candies With Discount",
        "difficulty": 0,
        "answer": "        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    },
    {
        "number": 2145,
        "title": "Count the Hidden Sequences",
        "difficulty": 1,
        "answer": "        n = len(differences)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 4\n        if n == 4:\n            return 0\n        if n == 5:\n            return 0\n        if n == 6:\n            return 0\n        if n == 7:\n            return 0\n        if n == 8:\n            return 0\n        if n == 9:\n            return 0\n        if n == 10:\n            return 0\n        if n == 11:\n            return 0\n        if n == 12:\n            return 0\n        if n == 13:\n            return 0\n        if n == 14:\n            return 0\n        if n == 15:\n            return 0\n        if n == 16:\n            return 0\n        if n == 17:\n            return 0\n        if n == 18:\n            return 0\n        if n == 19:\n            return 0\n        if n == 20:\n            return 0\n        if n == 21:\n            return 0"
    },
    {
        "number": 2146,
        "title": "K Highest Ranked Items Within a Price Range",
        "difficulty": 1,
        "answer": "        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n        # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n        # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n        # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n        # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n        # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j"
    },
    {
        "number": 2147,
        "title": "Number of Ways to Divide a Long Corridor",
        "difficulty": 2,
        "answer": "        n = len(corridor)\n        dp = [0] * n\n        dp[0] = 1\n        dp[n - 1] = 1\n        for i in range(1, n - 1):\n            for j in range(i + 1, n):\n                dp[i] += dp[j]\n        return dp[n - 1] % (10 ** 9 + 7)"
    },
    {
        "number": 2148,
        "title": "Count Elements With Strictly Smaller and Greater Elements ",
        "difficulty": 0,
        "answer": "        count = 0\n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if nums[i] < nums[j]:\n                    count += 1\n        return count"
    },
    {
        "number": 2149,
        "title": "Rearrange Array Elements by Sign",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return []\n        if n == 1:\n            return nums\n        if n == 2:\n            return [-nums[0], nums[1]]\n        if n == 3:\n            return [-nums[0], nums[1], nums[2]]\n        if n == 4:\n            return [-nums[0], nums[1], nums[2], nums[3]]\n        if n == 5:\n            return [-nums[0], nums[1], nums[2], nums[3], nums[4]]\n        if n == 6:\n            return [-nums[0], nums[1], nums[2], nums[3], nums[4], nums[5]]\n        if n == 7:\n            return [-nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6]]\n        if n == 8:\n            return [-nums[0], nums"
    },
    {
        "number": 2150,
        "title": "Find All Lonely Numbers in the Array",
        "difficulty": 1,
        "answer": "        nums.sort()\n        for i in range(len(nums)):\n            if nums[i] == nums[i+1]:\n                continue\n            if nums[i] == nums[i+1] + nums[i+2]:\n                continue\n            if nums[i] == nums[i+1] - nums[i+2]:\n                continue\n            if nums[i] == nums[i+1] * nums[i+2]:\n                continue\n            return [nums[i]]\n        return []"
    },
    {
        "number": 2151,
        "title": "Maximum Good People Based on Statements",
        "difficulty": 2,
        "answer": "        n = len(statements)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        dp = [[0] * n for _ in range(n)]\n        dp[0][0] = 1\n        for i in range(1, n):\n            for j in range(i):\n                if statements[i][j] == 1:\n                    dp[i][j] = dp[i - 1][j]\n                else:\n                    dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1]\n        return dp[n - 1][n - 1]"
    },
    {
        "number": 2154,
        "title": "Keep Multiplying Found Values by Two",
        "difficulty": 0,
        "answer": "        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    },
    {
        "number": 2155,
        "title": "All Divisions With the Highest Score of a Binary Array",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return []\n        if n == 1:\n            return [0]\n        if n == 2:\n            return [0, 0]\n        if n == 3:\n            return [0, 0, 0]\n        if n == 4:\n            return [0, 0, 0, 0]\n        dp = [0] * n\n        dp[0] = nums[0]\n        dp[1] = nums[0] + nums[1]\n        dp[2] = max(nums[0], nums[1])\n        for i in range(3, n):\n            dp[i] = max(dp[i - 1], dp[i - 2] + nums[i])\n        return [i for i in range(n) if dp[i] == dp[n - 1]]"
    },
    {
        "number": 2156,
        "title": "Find Substring With Given Hash Value",
        "difficulty": 2,
        "answer": "        # Time: O(n^2)\n        # Space: O(n)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        #"
    },
    {
        "number": 2157,
        "title": "Groups of Strings",
        "difficulty": 2,
        "answer": "        def groupStrings(words):\n            if not words:\n                return []\n            if len(words) == 1:\n                return [1, len(words[0])]\n            if len(words) == 2:\n                return [1, len(words[0])]\n            if len(words) == 3:\n                return [1, len(words[0])]\n            if len(words) == 4:\n                return [1, len(words[0])]\n            if len(words) == 5:\n                return [1, len(words[0])]\n            if len(words) == 6:\n                return [1, len(words[0])]\n            if len(words) == 7:\n                return [1, len(words[0])]\n            if len(words) == 8:\n                return [1, len(words[0])]\n            if len(words) == 9:\n                return [1, len(words[0])]\n            if len(words) == 10:\n                return [1, len(words[0])]\n            "
    },
    {
        "number": 2160,
        "title": "Minimum Sum of Four Digit Number After Splitting Digits",
        "difficulty": 0,
        "answer": "        if num == 0:\n            return 0\n        if num == 1:\n            return 1\n        if num == 2:\n            return 1\n        if num == 3:\n            return 1\n        if num == 4:\n            return 1\n        if num == 5:\n            return 1\n        if num == 6:\n            return 1\n        if num == 7:\n            return 1\n        if num == 8:\n            return 1\n        if num == 9:\n            return 1\n        if num == 10:\n            return 1\n        if num == 11:\n            return 1\n        if num == 12:\n            return 1\n        if num == 13:\n            return 1\n        if num == 14:\n            return 1\n        if num == 15:\n            return 1\n        if num == 16:\n            return 1\n        if num == 17:\n            return 1\n        if num == 18:\n            return 1\n        if num == 19:\n            return 1\n        if num == 20:\n            return 1\n        if num == 21:\n            return 1\n        if num == 22:\n            "
    },
    {
        "number": 2161,
        "title": "Partition Array According to Given Pivot",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        pivot_index = n // 2\n        pivot_value = nums[pivot_index]\n        left_index = 0\n        right_index = n - 1\n        while left_index < right_index:\n            if nums[left_index] < pivot_value:\n                nums[right_index], nums[left_index] = nums[left_index], nums[right_index]\n                right_index -= 1\n            elif nums[right_index] > pivot_value:\n                nums[left_index], nums[right_index] = nums[right_index], nums[left_index]\n                left_index += 1\n            else:\n                break\n        return nums"
    },
    {
        "number": 2162,
        "title": "Minimum Cost to Set Cooking Time",
        "difficulty": 1,
        "answer": "        pass"
    },
    {
        "number": 2163,
        "title": "Minimum Difference in Sums After Removal of Elements",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return nums[0] - nums[1]\n        if n == 3:\n            return nums[0] - nums[1] - nums[2]\n        if n == 4:\n            return nums[0] - nums[1] - nums[2] - nums[3]\n        if n == 5:\n            return nums[0] - nums[1] - nums[2] - nums[3] - nums[4]\n        if n == 6:\n            return nums[0] - nums[1] - nums[2] - nums[3] - nums[4] - nums[5]\n        if n == 7:\n            return nums[0] - nums[1] - nums[2] - nums[3] - nums[4] - nums[5] - nums[6]"
    },
    {
        "number": 2164,
        "title": "Sort Even and Odd Indices Independently",
        "difficulty": 0,
        "answer": "        nums.sort()\n        nums.sort(reverse=True)\n        return nums"
    },
    {
        "number": 2165,
        "title": "Smallest Value of the Rearranged Number",
        "difficulty": 1,
        "answer": "        if num == 0:\n            return 0\n        if num == 1:\n            return 1\n        if num == 2:\n            return 3\n        if num == 3:\n            return 4\n        if num == 4:\n            return 5\n        if num == 5:\n            return 6\n        if num == 6:\n            return 7\n        if num == 7:\n            return 8\n        if num == 8:\n            return 9\n        if num == 9:\n            return 10\n        if num == 10:\n            return 11\n        if num == 11:\n            return 12\n        if num == 12:\n            return 13\n        if num == 13:\n            return 14\n        if num == 14:\n            return 15\n        if num == 15:\n            return 16\n        if num == 16:\n            return 17\n        if num == 17:\n            return 18\n        if num == 18:\n            return 19\n        if num == 19:\n            return 20\n        if num == 20:\n            return 21\n        if num == 21:\n            return 22\n        if num == 22:\n            "
    },
    {
        "number": 2166,
        "title": "Design Bitset",
        "difficulty": 1,
        "answer": "    def __init__(self, size: int):\n    def fix(self, idx: int) -> None:\n    def unfix(self, idx: int) -> None:\n    def flip(self) -> None:\n    def all(self) -> bool:\n    def one(self) -> bool:\n    def count(self) -> int:\n    def toString(self) -> str:\n        \"\"\"\n        A Bitset is a data structure that compactly stores bits.\n        Implement the Bitset class:\n            Bitset(int size) Initializes the Bitset with size bits, all of which are 0.\n            void fix(int idx) Updates the value of the bit at the index idx to 1. If the value was already 1, no change occurs.\n            void unfix(int idx) Updates the value of the bit at the index idx to 0. If the value was already 0, no change occurs.\n            void flip() Flips the values of each bit in the Bitset. In other words, all bits with value 0 will now have value 1 and vice versa.\n"
    },
    {
        "number": 2167,
        "title": "Minimum Time to Remove All Cars Containing Illegal Goods",
        "difficulty": 2,
        "answer": "        # Time: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1"
    },
    {
        "number": 2169,
        "title": "Count Operations to Obtain Zero",
        "difficulty": 0,
        "answer": "        # O(max(num1, num2))\n        # O(max(num1, num2))\n        # O(max(num1, num2))\n        # O(max(num1, num2))\n        # O(max(num1, num2))\n        # O(max(num1, num2))\n        # O(max(num1, num2))\n        # O(max(num1, num2))\n        # O(max(num1, num2))\n        # O(max(num1, num2))\n        # O(max(num1, num2))\n        # O(max(num1, num2))\n        # O(max(num1, num2))\n        # O(max(num1, num2))\n        # O(max(num1, num2))\n        # O(max(num1, num2))\n        # O(max(num1, num2))\n        # O(max(num1, num2))\n        # O(max(num1, num2))\n        # O"
    },
    {
        "number": 2170,
        "title": "Minimum Operations to Make the Array Alternating",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        \n        # find the first index\n        first = 0\n        for i in range(n):\n            if nums[i] == nums[first]:\n                first += 1\n            else:\n                break\n        \n        # find the last index\n        last = n - 1\n        for i in range(n - 1, -1, -1):\n            if nums[i] == nums[last]:\n                last -= 1\n            else:\n                break\n        \n        # find the middle index\n        mid = (first + last) // 2\n        \n        # find the first index\n        first = 0\n        for i in range(n):\n            if nums[i] == nums[first]:\n                first += 1\n            else:\n                break\n        \n        # find the last index\n        last = n - 1\n        for i in"
    },
    {
        "number": 2171,
        "title": "Removing Minimum Number of Magic Beans",
        "difficulty": 1,
        "answer": "        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    },
    {
        "number": 2172,
        "title": "Maximum AND Sum of Array",
        "difficulty": 2,
        "answer": "        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    },
    {
        "number": 2176,
        "title": "Count Equal and Divisible Pairs in an Array",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        if n < 2:\n            return 0\n        dp = [0] * n\n        dp[0] = 1\n        for i in range(1, n):\n            for j in range(i):\n                if nums[i] == nums[j] and (i * j) % k == 0:\n                    dp[i] += dp[j]\n        return dp[-1]"
    },
    {
        "number": 2177,
        "title": "Find Three Consecutive Integers That Sum to a Given Number",
        "difficulty": 1,
        "answer": "        if num == 0:\n            return []\n        if num == 1:\n            return [1]\n        if num == 2:\n            return [1, 2]\n        if num == 3:\n            return [1, 2, 3]\n        if num == 4:\n            return [1, 2, 3, 4]\n        if num == 5:\n            return [1, 2, 3, 4, 5]\n        if num == 6:\n            return [1, 2, 3, 4, 5, 6]\n        if num == 7:\n            return [1, 2, 3, 4, 5, 6, 7]\n        if num == 8:\n            return [1, 2, 3, 4, 5, 6, 7, 8]\n        if num == 9:\n            return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n        if num == 10:\n            return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n        if num == 11:\n            return [1, 2, 3, 4, 5"
    },
    {
        "number": 2178,
        "title": "Maximum Split of Positive Even Integers",
        "difficulty": 1,
        "answer": "        if finalSum == 0:\n            return []\n        if finalSum < 0:\n            return []\n        if finalSum == 1:\n            return [1]\n        if finalSum == 2:\n            return [2]\n        if finalSum == 3:\n            return [3]\n        if finalSum == 4:\n            return [4]\n        if finalSum == 5:\n            return [5]\n        if finalSum == 6:\n            return [6]\n        if finalSum == 7:\n            return [7]\n        if finalSum == 8:\n            return [8]\n        if finalSum == 9:\n            return [9]\n        if finalSum == 10:\n            return [10]\n        if finalSum == 11:\n            return [11]\n        if finalSum == 12:\n            return [12]\n        if finalSum == 13:\n            return [13]\n        if finalSum == 14:\n            return [14]\n        if finalSum == 15:\n            return [15]\n        if finalSum == 16:\n            return [16]\n        if"
    },
    {
        "number": 2179,
        "title": "Count Good Triplets in an Array",
        "difficulty": 2,
        "answer": "        n = len(nums1)\n        res = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                for k in range(j + 1, n):\n                    if nums1[i] < nums2[j] and nums1[i] < nums2[k]:\n                        res += 1\n        return res"
    },
    {
        "number": 2180,
        "title": "Count Integers With Even Digit Sum",
        "difficulty": 0,
        "answer": "        count = 0\n        for i in range(1, num + 1):\n            if i % 2 == 0:\n                count += 1\n        return count"
    },
    {
        "number": 2181,
        "title": "Merge Nodes in Between Zeros",
        "difficulty": 1,
        "answer": "        if not head:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        \n        curr = dummy\n        \n        while curr.next and curr.next.next:\n            curr.next.next = ListNode(0)\n            curr.next.next.next = curr.next.next\n            curr = curr.next.next\n        \n        curr.next = head\n        \n        return dummy.next\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        "
    },
    {
        "number": 2182,
        "title": "Construct String With Repeat Limit",
        "difficulty": 1,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n"
    },
    {
        "number": 2183,
        "title": "Count Array Pairs Divisible by K",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        dp = [[0 for _ in range(n)] for _ in range(n)]\n        for i in range(n):\n            for j in range(i, n):\n                if nums[i] * nums[j] % k == 0:\n                    dp[i][j] = 1 + dp[i][j - 1]\n                    dp[j][i] = dp[i][j - 1]\n        return sum(dp[i][j] for i in range(n) for j in range(i + 1, n)) % 1000000007"
    },
    {
        "number": 2185,
        "title": "Counting Words With a Given Prefix",
        "difficulty": 0,
        "answer": "        count = 0\n        for word in words:\n            if word.startswith(pref):\n                count += 1\n        return count"
    },
    {
        "number": 2186,
        "title": "Minimum Number of Steps to Make Two Strings Anagram II",
        "difficulty": 1,
        "answer": "        # Step 1:\n        # Step 2:\n        # Step 3:\n        # Step 4:\n        # Step 5:\n        # Step 6:\n        # Step 7:\n        # Step 8:\n        # Step 9:\n        # Step 10:\n        # Step 11:\n        # Step 12:\n        # Step 13:\n        # Step 14:\n        # Step 15:\n        # Step 16:\n        # Step 17:\n        # Step 18:\n        # Step 19:\n        # Step 20:\n        # Step 21:\n        # Step 22:\n        # Step 23:\n        # Step 24:\n        # Step 25:\n        # Step 26:\n        # Step 27:\n        # Step 28:\n        # Step 29:\n        # Step 30:\n        # Step 31:\n        # Step 32:\n        # Step 33:\n        # Step 34:\n        # Step 35:\n        # Step 36:\n        # Step 37:\n        # Step 38:\n        # Step 39:\n        # Step 40:\n        # Step 41:\n        # Step 42"
    },
    {
        "number": 2187,
        "title": "Minimum Time to Complete Trips",
        "difficulty": 1,
        "answer": "        # Time complexity: O(n)\n        # Space Complexity: O(n)\n        # Time: O(n)\n        # Space: O(n)\n        # Time: O(n)\n        # Space: O(n)\n        # Time: O(n)\n        # Space: O(n)\n        # Time: O(n)\n        # Space: O(n)\n        # Time: O(n)\n        # Space: O(n)\n        # Time: O(n)\n        # Space: O(n)\n        # Time: O(n)\n        # Space: O(n)\n        # Time: O(n)\n        # Space: O(n)\n        # Time: O(n)\n        # Space: O(n)\n        # Time: O(n)\n        # Space: O(n)\n        # Time: O(n)\n        # Space: O(n)\n        # Time: O(n)\n        # Space: O(n)\n        # Time: O(n)\n        # Space:"
    },
    {
        "number": 2188,
        "title": "Minimum Time to Finish the Race",
        "difficulty": 2,
        "answer": "        # Time: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)"
    },
    {
        "number": 2190,
        "title": "Most Frequent Number Following Key In an Array",
        "difficulty": 0,
        "answer": "        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    },
    {
        "number": 2191,
        "title": "Sort the Jumbled Numbers",
        "difficulty": 1,
        "answer": "        mapping = sorted(mapping)\n        nums = sorted(nums)\n        return mapping + nums"
    },
    {
        "number": 2192,
        "title": "All Ancestors of a Node in a Directed Acyclic Graph",
        "difficulty": 1,
        "answer": "        # dfs\n        # dfs(n, edges, 0)\n        # dfs(n, edges, 1)\n        # dfs(n, edges, 2)\n        # dfs(n, edges, 3)\n        # dfs(n, edges, 4)\n        # dfs(n, edges, 5)\n        # dfs(n, edges, 6)\n        # dfs(n, edges, 7)\n        # dfs(n, edges, 0)\n        # dfs(n, edges, 1)\n        # dfs(n, edges, 2)\n        # dfs(n, edges, 3)\n        # dfs(n, edges, 4)\n        # dfs(n, edges, 5)\n        # dfs(n, edges, 6)\n        # dfs(n, edges, 7)\n        # dfs(n, edges, 0)\n        # dfs(n, edges, 1)\n        # dfs(n, edges, 2)\n        # dfs(n, edges, 3)\n        # dfs("
    },
    {
        "number": 2193,
        "title": "Minimum Number of Moves to Make Palindrome",
        "difficulty": 2,
        "answer": "        if not s:\n            return 0\n        if len(s) == 1:\n            return 1\n        if len(s) == 2:\n            return 2\n        if s[0] == s[1]:\n            return 2\n        if s[0]!= s[1]:\n            return 2\n        if s[0] == s[2]:\n            return 2\n        if s[1] == s[2]:\n            return 2\n        if s[0] == s[2]:\n            return 2\n        if s[1] == s[3]:\n            return 2\n        if s[2] == s[3]:\n            return 2\n        if s[0] == s[3]:\n            return 2\n        if s[1] == s[4]:\n            return 2\n        if s[2] == s[4]:\n            return 2\n        if s[0] == s[4]:\n            return 2\n        if s[1] == s[5]:\n            return 2\n        if s[2] == s[5]:\n            return 2\n        if s["
    },
    {
        "number": 2194,
        "title": "Cells in a Range on an Excel Sheet",
        "difficulty": 0,
        "answer": "        def get_col_row(s):\n            return s.split(':')\n        def get_col_row_list(s):\n            return [get_col_row(s)[0], get_col_row(s)[1]]\n        def get_col_row_list_2(s):\n            return [get_col_row(s)[0], get_col_row(s)[1], get_col_row(s)[2], get_col_row(s)[3]]\n        def get_col_row_list_3(s):\n            return [get_col_row(s)[0], get_col_row(s)[1], get_col_row(s)[2], get_col_row(s)[3], get_col_row(s)[4]]\n        def get_col_row_list_4(s):\n            return [get_col_row(s)[0], get_col_row(s)[1], get_col_row(s)[2], get_col_row(s)[3], get_col_row(s"
    },
    {
        "number": 2195,
        "title": "Append K Integers With Minimal Sum",
        "difficulty": 1,
        "answer": "        # O(n) time | O(n) space\n        # Time: O(n) | Space: O(1)\n        # Runtime: O(n) | Space: O(1)\n        # Runtime: O(n) | Space: O(1)\n        # Runtime: O(n) | Space: O(1)\n        # Runtime: O(n) | Space: O(1)\n        # Runtime: O(n) | Space: O(1)\n        # Runtime: O(n) | Space: O(1)\n        # Runtime: O(n) | Space: O(1)\n        # Runtime: O(n) | Space: O(1)\n        # Runtime: O(n) | Space: O(1)\n        # Runtime: O(n) | Space: O(1)\n        # Runtime: O(n) | Space: O(1)\n        # Runtime: O(n) | Space: O(1)\n        # Runtime: O(n) | Space: O(1)\n        # Runtime: O(n) | Space: O"
    },
    {
        "number": 2196,
        "title": "Create Binary Tree From Descriptions",
        "difficulty": 1,
        "answer": "        def helper(desc, parent, left, right):\n            if left == right:\n                return None\n            if left == -1:\n                return TreeNode(desc[0])\n            if parent == -1:\n                return TreeNode(desc[0], desc[1], desc[2])\n            return TreeNode(desc[0], desc[1], desc[2], desc[3], desc[4], desc[5], desc[6], desc[7])\n        def helper2(desc, parent, left, right):\n            if left == right:\n                return None\n            if left == -1:\n                return TreeNode(desc[0])\n            if parent == -1:\n                return TreeNode(desc[0], desc[1], desc[2])\n            return TreeNode(desc[0], desc[1], desc[2], desc[3], desc[4], desc[5], desc[6], desc[7])\n        def helper3(desc, parent, left, right):\n            if left == right:\n                return None\n            if left == -1:\n                return TreeNode"
    },
    {
        "number": 2197,
        "title": "Replace Non-Coprime Numbers in Array",
        "difficulty": 2,
        "answer": "        # O(n^2)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O"
    },
    {
        "number": 2200,
        "title": "Find All K-Distant Indices in an Array",
        "difficulty": 0,
        "answer": "        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    },
    {
        "number": 2201,
        "title": "Count Artifacts That Can Be Extracted",
        "difficulty": 1,
        "answer": "        def dfs(i, j, n, artifacts, dig):\n            if i < 0 or i >= n or j < 0 or j >= n or n * n <= len(artifacts):\n                return 0\n            if n * n <= len(artifacts):\n                return 1\n            if artifacts[i][j] == 0:\n                return 0\n            if artifacts[i][j] == 1:\n                return 1\n            if dig[i][j] == 0:\n                return 0\n            if dig[i][j] == 1:\n                return 1\n            return dfs(i + 1, j, n, artifacts, dig) + dfs(i - 1, j, n, artifacts, dig) + dfs(i, j + 1, n, artifacts, dig) + dfs(i, j - 1, n, artifacts, dig)\n        return dfs(0, 0, n, artifacts, dig)"
    },
    {
        "number": 2202,
        "title": "Maximize the Topmost Element After K Moves",
        "difficulty": 1,
        "answer": "        if not nums:\n            return -1\n        if k == 0:\n            return max(nums)\n        if k == 1:\n            return max(nums)\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return max(nums)\n        if len(nums) == 3:\n            return max(nums)\n        if len(nums) == 4:\n            return max(nums)\n        if len(nums) == 5:\n            return max(nums)\n        if len(nums) == 6:\n            return max(nums)\n        if len(nums) == 7:\n            return max(nums)\n        if len(nums) == 8:\n            return max(nums)\n        if len(nums) == 9:\n            return max(nums)\n        if len(nums) == 10:\n            return max(nums)\n        if len(nums) == 11:\n            return max(nums)"
    },
    {
        "number": 2203,
        "title": "Minimum Weighted Subgraph With the Required Paths",
        "difficulty": 2,
        "answer": "        # dfs\n        # dfs(n, edges, src1, src2, dest)\n        # dfs(n, edges, src1, dest, src2)\n        # dfs(n, edges, dest, src2, dest)\n        # dfs(n, edges, dest, src2, dest)\n        # dfs(n, edges, dest, src2, dest)\n        # dfs(n, edges, dest, src2, dest)\n        # dfs(n, edges, dest, src2, dest)\n        # dfs(n, edges, dest, src2, dest)\n        # dfs(n, edges, dest, src2, dest)\n        # dfs(n, edges, dest, src2, dest)\n        # dfs(n, edges, dest, src2, dest)\n        # dfs(n, edges, dest, src2, dest)\n        # dfs(n, edges, dest, src2, dest)\n        # dfs(n, edges, dest, src2, dest)\n        # dfs("
    },
    {
        "number": 2206,
        "title": "Divide Array Into Equal Pairs",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        if n < 2:\n            return False\n        if n == 2:\n            return True\n        if n == 3:\n            return False\n        if n == 4:\n            return True\n        for i in range(n):\n            for j in range(i + 1, n):\n                if nums[i] % nums[j] == 0:\n                    return False\n        return True"
    },
    {
        "number": 2207,
        "title": "Maximize Number of Subsequences in a String",
        "difficulty": 1,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n"
    },
    {
        "number": 2208,
        "title": "Minimum Operations to Halve Array Sum",
        "difficulty": 1,
        "answer": "        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    },
    {
        "number": 2209,
        "title": "Minimum White Tiles After Covering With Carpets",
        "difficulty": 2,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage"
    },
    {
        "number": 2210,
        "title": "Count Hills and Valleys in an Array",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21"
    },
    {
        "number": 2211,
        "title": "Count Collisions on a Road",
        "difficulty": 1,
        "answer": "        n = len(directions)\n        count = 0\n        for i in range(n):\n            if directions[i] == 'L':\n                count += 2\n            elif directions[i] == 'R':\n                count += 1\n            elif directions[i] == 'S':\n                count += 1\n        return count"
    },
    {
        "number": 2212,
        "title": "Maximum Points in an Archery Competition",
        "difficulty": 1,
        "answer": "        aliceArrows.sort()\n        bobArrows = [0] * numArrows\n        for i in range(numArrows):\n            bobArrows[i] = aliceArrows[i] + bobArrows[i + 1]\n        return bobArrows"
    },
    {
        "number": 2213,
        "title": "Longest Substring of One Repeating Character",
        "difficulty": 2,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n"
    },
    {
        "number": 2215,
        "title": "Find the Difference of Two Arrays",
        "difficulty": 0,
        "answer": "        nums1.sort()\n        nums2.sort()\n        answer = []\n        for i in range(len(nums1)):\n            if nums1[i]!= nums2[i]:\n                answer.append([nums1[i],nums2[i]])\n        return answer"
    },
    {
        "number": 2216,
        "title": "Minimum Deletions to Make Array Beautiful",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n % 2 == 0:\n            return n // 2\n        else:\n            return n // 2 + 1"
    },
    {
        "number": 2217,
        "title": "Find Palindrome With Fixed Length",
        "difficulty": 1,
        "answer": "        # Time: O(n^2)\n        # Space: O(n)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        #"
    },
    {
        "number": 2218,
        "title": "Maximum Value of K Coins From Piles",
        "difficulty": 2,
        "answer": "        # Time: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)"
    },
    {
        "number": 2220,
        "title": "Minimum Bit Flips to Convert Number",
        "difficulty": 0,
        "answer": "        if start == goal:\n            return 0\n        if start == 0:\n            return 1\n        if start == 1:\n            return 2\n        if start == 2:\n            return 3\n        if start == 3:\n            return 4\n        if start == 4:\n            return 5\n        if start == 5:\n            return 6\n        if start == 6:\n            return 7\n        if start == 7:\n            return 8\n        if start == 8:\n            return 9\n        if start == 9:\n            return 10\n        if start == 10:\n            return 11\n        if start == 11:\n            return 12\n        if start == 12:\n            return 13\n        if start == 13:\n            return 14\n        if start == 14:\n            return 15\n        if start == 15:\n            return 16\n        if start == 16:\n            return 17\n        if start == 17:\n            return 18\n        if start == 18:\n            return 19\n        if start == 19:\n            return 20\n        if start == 20:\n            return 21\n        if start == 21:\n            "
    },
    {
        "number": 2221,
        "title": "Find Triangular Sum of an Array",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 1:\n            return nums[0]\n        newNums = [0] * n\n        newNums[0] = nums[0]\n        for i in range(1, n):\n            newNums[i] = newNums[i - 1] + nums[i]\n        return newNums[-1] % 10"
    },
    {
        "number": 2222,
        "title": "Number of Ways to Select Buildings",
        "difficulty": 1,
        "answer": "        if s == \"\":\n            return 0\n        if len(s) == 1:\n            return 1\n        if len(s) == 2:\n            return 2\n        if len(s) == 3:\n            return 3\n        if len(s) == 4:\n            return 4\n        if len(s) == 5:\n            return 5\n        if len(s) == 6:\n            return 6\n        if len(s) == 7:\n            return 7\n        if len(s) == 8:\n            return 8\n        if len(s) == 9:\n            return 9\n        if len(s) == 10:\n            return 10\n        if len(s) == 11:\n            return 11\n        if len(s) == 12:\n            return 12\n        if len(s) == 13:\n            return 13\n        if len(s) == 14:\n            return 14\n        if len(s) == 15:\n            return 15\n        if len(s) == 16:\n            return 16\n        if len(s) == 17:\n            return 17\n        "
    },
    {
        "number": 2223,
        "title": "Sum of Scores of Built Strings",
        "difficulty": 2,
        "answer": "        n = len(s)\n        dp = [[0 for _ in range(n)] for _ in range(n)]\n        for i in range(n):\n            for j in range(i):\n                if s[i] == s[j]:\n                    dp[i][j] = dp[i][j] + 1\n                else:\n                    dp[i][j] = max(dp[i][j], dp[i][j + 1] + 1)\n        return dp[0][n - 1]"
    },
    {
        "number": 2224,
        "title": "Minimum Number of Operations to Convert Time",
        "difficulty": 0,
        "answer": "        if correct == \"00:00\":\n            return 1\n        if correct == \"23:59\":\n            return 2\n        if correct == \"00:00\":\n            return 3\n        if correct == \"23:59\":\n            return 4\n        if correct == \"00:00\":\n            return 5\n        if correct == \"23:59\":\n            return 6\n        if correct == \"00:00\":\n            return 7\n        if correct == \"23:59\":\n            return 8\n        if correct == \"00:00\":\n            return 9\n        if correct == \"23:59\":\n            return 10\n        if correct == \"00:00\":\n            return 11\n        if correct == \"23:59\":\n            return 12\n        if correct == \"00:00\":\n            return 13\n        if correct == \"23:59\":\n            return 14\n        if correct == \"00:00\":\n            return 15\n        if correct == \"23:59\":\n            return 16\n        if correct == \"00:00\":\n            return 17\n        if correct == \"23:59\":\n            return"
    },
    {
        "number": 2225,
        "title": "Find Players With Zero or One Losses",
        "difficulty": 1,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        "
    },
    {
        "number": 2226,
        "title": "Maximum Candies Allocated to K Children",
        "difficulty": 1,
        "answer": "        candies.sort()\n        res = 0\n        for i in range(len(candies)):\n            res += candies[i] * (k - 1)\n        return res"
    },
    {
        "number": 2227,
        "title": "Encrypt and Decrypt Strings",
        "difficulty": 2,
        "answer": "        pass"
    },
    {
        "number": 2231,
        "title": "Largest Number After Digit Swaps by Parity",
        "difficulty": 0,
        "answer": "        if num == 0:\n            return 0\n        if num == 1:\n            return 1\n        if num == 2:\n            return 3\n        if num == 3:\n            return 4\n        if num == 4:\n            return 5\n        if num == 5:\n            return 6\n        if num == 6:\n            return 7\n        if num == 7:\n            return 8\n        if num == 8:\n            return 9\n        if num == 9:\n            return 10\n        if num == 10:\n            return 11\n        if num == 11:\n            return 12\n        if num == 12:\n            return 13\n        if num == 13:\n            return 14\n        if num == 14:\n            return 15\n        if num == 15:\n            return 16\n        if num == 16:\n            return 17\n        if num == 17:\n            return 18\n        if num == 18:\n            return 19\n        if num == 19:\n            return 20\n        if num == 20:\n            return 21\n        if num == 21:\n            return 22\n        if num == 22:\n            "
    },
    {
        "number": 2232,
        "title": "Minimize Result by Adding Parentheses to Expression",
        "difficulty": 1,
        "answer": "        expression = expression.replace(\"+\", \"\")\n        expression = expression.replace(\"(\", \"\")\n        expression = expression.replace(\")\", \"\")\n        expression = expression.replace(\" \", \"\")\n        expression = expression.replace(\"+\", \"\")\n        expression = expression.replace(\"(\", \"\")\n        expression = expression.replace(\")\", \"\")\n        expression = expression.replace(\" \", \"\")\n        expression = expression.replace(\"+\", \"\")\n        expression = expression.replace(\"(\", \"\")\n        expression = expression.replace(\")\", \"\")\n        expression = expression.replace(\" \", \"\")\n        expression = expression.replace(\"+\", \"\")\n        expression = expression.replace(\"(\", \"\")\n        expression = expression.replace(\")\", \"\")\n        expression = expression.replace(\" \", \"\")\n        expression = expression.replace(\"+\", \"\")\n        expression = expression.replace(\"(\", \"\")\n        expression = expression.replace(\")\", \"\")\n        expression = expression.replace(\" \", \"\")\n        expression = expression.replace(\"+\", \"\")\n        expression ="
    },
    {
        "number": 2233,
        "title": "Maximum Product After K Increments",
        "difficulty": 1,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage"
    },
    {
        "number": 2234,
        "title": "Maximum Total Beauty of the Gardens",
        "difficulty": 2,
        "answer": "        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-flowers[i]] + flowers[i])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-flowers[i]] + flowers[i])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-flowers[i]] + flowers[i])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-flowers[i]] + flowers[i])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-flowers[i]] + flowers[i])\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-flowers[i]] + flowers[i])\n        # dp[i][j] ="
    },
    {
        "number": 2235,
        "title": "Add Two Integers",
        "difficulty": 0,
        "answer": "        if num1 == 0:\n            return num2\n        if num2 == 0:\n            return num1\n        if num1 < 0:\n            num1 = -num1\n        if num2 < 0:\n            num2 = -num2\n        return num1 + num2"
    },
    {
        "number": 2236,
        "title": "Root Equals Sum of Children",
        "difficulty": 0,
        "answer": "        if not root:\n            return False\n        if not root.left and not root.right:\n            return root.val == sum(root.val, root.val)\n        if not root.left:\n            return self.checkTree(root.right) and self.checkTree(root.right)\n        if not root.right:\n            return self.checkTree(root.left) and self.checkTree(root.left)\n        return root.val == sum(root.val, root.val)"
    },
    {
        "number": 2239,
        "title": "Find Closest Number to Zero",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return min(nums[0], nums[1])\n        if n == 3:\n            return max(nums[0], nums[1], nums[2])\n        if n == 4:\n            return min(nums[0], nums[1], nums[2], nums[3])\n        if n == 5:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4])\n        if n == 6:\n            return min(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5])\n        if n == 7:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6])\n        if n == 8:\n            "
    },
    {
        "number": 2240,
        "title": "Number of Ways to Buy Pens and Pencils",
        "difficulty": 1,
        "answer": "        dp = [0] * (total + 1)\n        dp[0] = 1\n        for i in range(1, total + 1):\n            for j in range(cost1, i + 1):\n                dp[i] += dp[j]\n        for i in range(cost2, total + 1):\n            for j in range(cost1, i + 1):\n                dp[i] += dp[j]\n        return dp[total]"
    },
    {
        "number": 2241,
        "title": "Design an ATM Machine",
        "difficulty": 1,
        "answer": "        pass\n    def withdraw_all(self, banknotesCount: List[int]) -> List[int]:\n        \"\"\"\n        There is an ATM machine that stores banknotes of 5 denominations: 20, 50, 100, 200, and 500 dollars. Initially the ATM is empty. The user can use the machine to deposit or withdraw any amount of money.\n        When withdrawing, the machine prioritizes using banknotes of larger values.\n            For example, if you want to withdraw $300 and there are 2 $50 banknotes, 1 $100 banknote, and 1 $200 banknote, then the machine will use the $100 and $200 banknotes.\n            However, if you try to withdraw $600 and there are 3 $200 banknotes and 1 $500 banknote, then the withdraw request will be rejected because the machine will first try to use the $500 banknote and then be unable to use banknotes to complete the remaining $100. Note that the machine is not allowed to use the $200 banknotes instead of the $500 banknote.\n        Implement the ATM class:\n            ATM() Initializes the ATM object.\n            void withdraw_all(int"
    },
    {
        "number": 2242,
        "title": "Maximum Score of a Node Sequence",
        "difficulty": 2,
        "answer": "        n = len(scores)\n        if n == 0:\n            return -1\n        if n == 1:\n            return scores[0]\n        if n == 2:\n            return max(scores[0], scores[1])\n        if n == 3:\n            return max(scores[0] + scores[1], scores[2] + scores[3])\n        if n == 4:\n            return max(scores[0] + scores[1] + scores[2] + scores[3], scores[0] + scores[2] + scores[3])\n        if n == 5:\n            return max(scores[0] + scores[1] + scores[2] + scores[3] + scores[4])\n        if n == 6:\n            return max(scores[0] + scores[1] + scores[2] + scores[3] + scores[4] + scores[5])\n        if n == 7:\n            return max(scores[0] + scores[1] + scores[2] + scores[3] + scores[4] + scores"
    },
    {
        "number": 2243,
        "title": "Calculate Digit Sum of a String",
        "difficulty": 0,
        "answer": "        # Step 1: divide s into consecutive groups of size k\n        # Step 2: calculate the digit sum of each group\n        # Step 3: merge consecutive groups together to form a new string\n        # Step 4: repeat from step 1\n        # Step 5: repeat from step 2\n        # Step 6: repeat from step 3\n        # Step 7: repeat from step 4\n        # Step 8: repeat from step 5\n        # Step 9: repeat from step 6\n        # Step 10: repeat from step 7\n        # Step 11: repeat from step 8\n        # Step 12: repeat from step 9\n        # Step 13: repeat from step 10\n        # Step 14: repeat from step 11\n        # Step 15: repeat from step 12\n        # Step 16: repeat from step 13\n        # Step 17: repeat from step 14\n        # Step 18: repeat from step 15\n        # Step 19: repeat from step 16\n        # Step 20: repeat from step 17\n        # Step 21: repeat from step 18\n        # Step 22: repeat from step 19\n        # Step 23: repeat from step 20\n        # Step 24: repeat from step"
    },
    {
        "number": 2244,
        "title": "Minimum Rounds to Complete All Tasks",
        "difficulty": 1,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n"
    },
    {
        "number": 2245,
        "title": "Maximum Trailing Zeros in a Cornered Path",
        "difficulty": 1,
        "answer": "        m, n = len(grid), len(grid[0])\n        dp = [[0] * n for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == 0:\n                    continue\n                if i > 0:\n                    dp[i][j] = dp[i - 1][j]\n                if j > 0:\n                    dp[i][j] = dp[i][j - 1]\n                if i < m - 1:\n                    dp[i][j] = dp[i + 1][j]\n                if j < n - 1:\n                    dp[i][j] = dp[i][j + 1]\n        return dp[m - 1][n - 1]"
    },
    {
        "number": 2246,
        "title": "Longest Path With Different Adjacent Characters",
        "difficulty": 2,
        "answer": "        # Time complexity: O(n)\n        # Space Complexity: O(n)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        "
    },
    {
        "number": 2248,
        "title": "Intersection of Multiple Arrays",
        "difficulty": 0,
        "answer": "        nums.sort()\n        res = []\n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if nums[i] < nums[j]:\n                    res.append(nums[i])\n        return res\n"
    },
    {
        "number": 2249,
        "title": "Count Lattice Points Inside a Circle",
        "difficulty": 1,
        "answer": "        def get_lattice_points(circles):\n            lattice_points = []\n            for i in range(len(circles)):\n                for j in range(len(circles[i])):\n                    if circles[i][j] == 1:\n                        lattice_points.append((i, j))\n            return lattice_points"
    },
    {
        "number": 2250,
        "title": "Count Number of Rectangles Containing Each Point",
        "difficulty": 1,
        "answer": "        def dfs(rectangles, points, i, j, ans):\n            if i == len(rectangles) or j == len(points):\n                ans.append(len(points))\n                return\n            if i < len(rectangles) and j < len(points):\n                if rectangles[i][0] <= points[j][0] and rectangles[i][1] <= points[j][1]:\n                    dfs(rectangles, points, i + 1, j + 1, ans)\n                elif rectangles[i][0] <= points[j][0] and rectangles[i][1] > points[j][1]:\n                    dfs(rectangles, points, i + 1, j, ans)\n                elif rectangles[i][0] > points[j][0] and rectangles[i][1] <= points[j][1]:\n                    dfs(rectangles, points, i, j + 1, ans)\n                elif rectangles[i][0] > points[j][0] and rectangles[i][1] > points[j][1]:"
    },
    {
        "number": 2251,
        "title": "Number of Flowers in Full Bloom",
        "difficulty": 2,
        "answer": "        flowers = sorted(flowers)\n        persons = sorted(persons)\n        flowers.append(persons[-1])\n        persons.append(flowers[-1][1])\n        flowers.append(persons[-1])\n        persons.append(flowers[-1][1])\n        flowers.append(persons[-1])\n        flowers.sort()\n        persons.sort()\n        answer = [0] * len(flowers)\n        for i in range(len(flowers)):\n            if flowers[i][0] <= persons[i]:\n                answer[i] = 1\n            else:\n                answer[i] = 0\n        return answer"
    },
    {
        "number": 2255,
        "title": "Count Prefixes of a Given String",
        "difficulty": 0,
        "answer": "        count = 0\n        for word in words:\n            if s.startswith(word):\n                count += 1\n        return count\n"
    },
    {
        "number": 2256,
        "title": "Minimum Average Difference",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return (nums[0] + nums[1]) / 2\n        if n == 3:\n            return (nums[0] + nums[1] + nums[2]) / 3\n        if n == 4:\n            return (nums[0] + nums[1] + nums[2] + nums[3]) / 4\n        if n == 5:\n            return (nums[0] + nums[1] + nums[2] + nums[3] + nums[4]) / 5\n        if n == 6:\n            return (nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5]) / 6\n        if n == 7:\n            return (nums[0] + nums[1] + nums[2] + nums[3] + num"
    },
    {
        "number": 2257,
        "title": "Count Unguarded Cells in the Grid",
        "difficulty": 1,
        "answer": "        # dp[i][j] = number of unguarded cells that can see the ith guard\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = dp[i-1][j-1] + dp[i-1][j]\n        # dp[i][j] = dp[i-1][j-1] + dp[i][j-1] + dp[i-1][j]\n        # dp[i][j] = dp[i-1][j-1] + dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = dp[i-1][j-1] + dp[i-1][j] + dp[i][j-1] + dp[i-1][j-1]\n        # dp[i][j] = dp[i-1][j-1] + dp[i"
    },
    {
        "number": 2258,
        "title": "Escape the Spreading Fire",
        "difficulty": 2,
        "answer": "        m = len(grid)\n        n = len(grid[0])\n        if m == 0 or n == 0:\n            return -1\n        if m == 1 and n == 1:\n            return 0\n        if m == 1 and n == 2:\n            return 0\n        if m == 2 and n == 1:\n            return 0\n        if m == 2 and n == 2:\n            return 0\n        if m == 3 and n == 3:\n            return 0\n        if m == 3 and n == 4:\n            return 0\n        if m == 4 and n == 3:\n            return 0\n        if m == 4 and n == 4:\n            return 0\n        if m == 5 and n == 5:\n            return 0\n        if m == 5 and n == 4:\n            return 0\n        if m == 5 and n == 3:\n            return 0\n        if m == 5 and n == 2:\n            return 0\n        if m == 5 and n == 1:\n            return 0\n        if m == 5 and n == 0:\n            return 0\n        if m == 6 and"
    },
    {
        "number": 2259,
        "title": "Remove Digit From Number to Maximize Result",
        "difficulty": 0,
        "answer": "        # Time: O(n)\n        # Space: O(1)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage"
    },
    {
        "number": 2260,
        "title": "Minimum Consecutive Cards to Pick Up",
        "difficulty": 1,
        "answer": "        if len(cards) == 1:\n            return 0\n        if len(cards) == 2:\n            return 1\n        if len(cards) == 3:\n            return 2\n        if len(cards) == 4:\n            return 3\n        if len(cards) == 5:\n            return 4\n        if len(cards) == 6:\n            return 5\n        if len(cards) == 7:\n            return 6\n        if len(cards) == 8:\n            return 7\n        if len(cards) == 9:\n            return 8\n        if len(cards) == 10:\n            return 9\n        if len(cards) == 11:\n            return 10\n        if len(cards) == 12:\n            return 11\n        if len(cards) == 13:\n            return 12\n        if len(cards) == 14:\n            return 13\n        if len(cards) == 15:\n            return 14\n        if len(cards) == 16:\n            return 15\n        if len(cards) == 17:\n            return 16\n        if len(cards) == 18:\n            return"
    },
    {
        "number": 2261,
        "title": "K Divisible Elements Subarrays",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        dp = [[0] * (k + 1) for _ in range(n + 1)]\n        for i in range(1, n + 1):\n            for j in range(1, k + 1):\n                if nums[i - 1] % j == 0:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                else:\n                    dp[i][j] = 0\n        return sum(dp[n][k]) % (10 ** 9 + 7)"
    },
    {
        "number": 2262,
        "title": "Total Appeal of A String",
        "difficulty": 2,
        "answer": "        appeal = 0\n        for i in range(len(s)):\n            appeal += s[i]\n        return appeal"
    },
    {
        "number": 2264,
        "title": "Largest 3-Same-Digit Number in String",
        "difficulty": 0,
        "answer": "        if num == \"\":\n            return \"\"\n        if len(num) == 1:\n            return num\n        if len(num) == 2:\n            if num[0] == num[1]:\n                return num\n            else:\n                return \"\"\n        if len(num) == 3:\n            if num[0] == num[1] == num[2]:\n                return num\n            else:\n                return \"\"\n        if len(num) == 4:\n            if num[0] == num[1] == num[2] == num[3]:\n                return num\n            else:\n                return \"\"\n        if len(num) == 5:\n            if num[0] == num[1] == num[2] == num[3] == num[4]:\n                return num\n            else:\n                return \"\"\n        if len(num) == 6:\n            if num[0] == num[1] == num[2] == num[3] == num[4] == num[5]:\n                return num\n            else:\n                return \"\"\n        if len(num"
    },
    {
        "number": 2265,
        "title": "Count Nodes Equal to Average of Subtree",
        "difficulty": 1,
        "answer": "        def dfs(node):\n            if not node:\n                return 0\n            left = dfs(node.left)\n            right = dfs(node.right)\n            return node.val + left + right"
    },
    {
        "number": 2266,
        "title": "Count Number of Texts",
        "difficulty": 1,
        "answer": "        # TODO: complete this function\n        # return int(pressedKeys) % (109 + 7)\n        # return int(pressedKeys) % (109 + 7) % (109 + 7)\n        # return int(pressedKeys) % (109 + 7) % (109 + 7) % (109 + 7)\n        # return int(pressedKeys) % (109 + 7) % (109 + 7) % (109 + 7) % (109 + 7)\n        # return int(pressedKeys) % (109 + 7) % (109 + 7) % (109 + 7) % (109 + 7) % (109 + 7)\n        # return int(pressedKeys) % (109 + 7) % (109 + 7) % (109 + 7) % (109 + 7) % (109 + 7) % (109 + 7)\n        # return int(pressedKeys) % (109 + 7) % (109 + 7) % (109 + 7) % (109 + 7) % (109 + 7) % (109 + 7) % (109 + 7)\n        # return int(pressedKeys) % ("
    },
    {
        "number": 2267,
        "title": " Check if There Is a Valid Parentheses String Path",
        "difficulty": 2,
        "answer": "        m = len(grid)\n        n = len(grid[0])\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == '(':\n                    grid[i][j] = ')'\n                elif grid[i][j] == ')':\n                    grid[i][j] = '('\n                elif grid[i][j] == ')':\n                    grid[i][j] = '('\n                else:\n                    return False\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == '(':\n                    grid[i][j] = ')'\n                elif grid[i][j] == ')':\n                    grid[i][j] = '('\n                elif grid[i][j] == ')':\n                    grid[i][j] = '('\n                else:\n                    return False\n        return True"
    },
    {
        "number": 2269,
        "title": "Find the K-Beauty of a Number",
        "difficulty": 0,
        "answer": "        if num == 0:\n            return 0\n        if num == 1:\n            return 1\n        if num == 2:\n            return 2\n        if num == 3:\n            return 3\n        if num == 4:\n            return 4\n        if num == 5:\n            return 5\n        if num == 6:\n            return 6\n        if num == 7:\n            return 7\n        if num == 8:\n            return 8\n        if num == 9:\n            return 9\n        if num == 10:\n            return 10\n        if num == 11:\n            return 11\n        if num == 12:\n            return 12\n        if num == 13:\n            return 13\n        if num == 14:\n            return 14\n        if num == 15:\n            return 15\n        if num == 16:\n            return 16\n        if num == 17:\n            return 17\n        if num == 18:\n            return 18\n        if num == 19:\n            return 19\n        if num == 20:\n            return 20\n        if num == 21:\n            return 21\n        if num == 22:\n            "
    },
    {
        "number": 2270,
        "title": "Number of Ways to Split Array",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        \n        dp = [0] * n\n        dp[0] = nums[0]\n        dp[1] = nums[0] + nums[1]\n        dp[2] = nums[0] + nums[1] + nums[2]\n        \n        for i in range(3, n):\n            dp[i] = max(dp[i-1], dp[i-2] + nums[i])\n        \n        return dp[n-1]\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n"
    },
    {
        "number": 2271,
        "title": "Maximum White Tiles Covered by a Carpet",
        "difficulty": 1,
        "answer": "        def dfs(i, j, n, m, d):\n            if i < 0 or i >= n or j < 0 or j >= m or tiles[i][j] == 0:\n                return 0\n            if d == 0:\n                return dfs(i + 1, j, n, m, d + 1) + dfs(i, j + 1, n, m, d + 1)\n            else:\n                return dfs(i + 1, j, n, m, d) + dfs(i, j + 1, n, m, d)"
    },
    {
        "number": 2272,
        "title": "Substring With Largest Variance",
        "difficulty": 2,
        "answer": "        n = len(s)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        dp = [0] * n\n        dp[0] = 1\n        for i in range(1, n):\n            for j in range(i):\n                if s[j] == s[i]:\n                    dp[i] = max(dp[i], dp[j] + 1)\n        return max(dp)"
    },
    {
        "number": 2273,
        "title": "Find Resultant Array After Removing Anagrams",
        "difficulty": 0,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage"
    },
    {
        "number": 2274,
        "title": "Maximum Consecutive Floors Without Special Floors",
        "difficulty": 1,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n"
    },
    {
        "number": 2275,
        "title": "Largest Combination With Bitwise AND Greater Than Zero",
        "difficulty": 1,
        "answer": "        candidates.sort()\n        res = 0\n        for i in range(len(candidates)):\n            res = max(res, candidates[i] & candidates[i+1])\n        return res"
    },
    {
        "number": 2276,
        "title": "Count Integers in Intervals",
        "difficulty": 2,
        "answer": "        pass"
    },
    {
        "number": 2278,
        "title": "Percentage of Letter in String",
        "difficulty": 0,
        "answer": "        s = s.lower()\n        letter = letter.lower()\n        return int(s.count(letter) / len(s) * 100)"
    },
    {
        "number": 2279,
        "title": "Maximum Bags With Full Capacity of Rocks",
        "difficulty": 1,
        "answer": "        n = len(capacity)\n        if n == 0:\n            return 0\n        if n == 1:\n            return capacity[0]\n        if n == 2:\n            return capacity[0] + capacity[1]\n        if n == 3:\n            return capacity[0] + capacity[1] + capacity[2]\n        if n == 4:\n            return capacity[0] + capacity[1] + capacity[2] + capacity[3]\n        if n == 5:\n            return capacity[0] + capacity[1] + capacity[2] + capacity[3] + capacity[4]\n        if n == 6:\n            return capacity[0] + capacity[1] + capacity[2] + capacity[3] + capacity[4] + capacity[5]\n        if n == 7:\n            return capacity[0] + capacity[1] + capacity[2] + capacity[3] + capacity[4] + capacity[5] + capacity[6]\n        if n == 8:\n            return capacity[0] + capacity[1] + capacity[2] + capacity[3]"
    },
    {
        "number": 2280,
        "title": "Minimum Lines to Represent a Line Chart",
        "difficulty": 1,
        "answer": "        n = len(stockPrices)\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n):\n            for j in range(n):\n                if stockPrices[i][0] <= j:\n                    dp[i][j] = stockPrices[i][1]\n                else:\n                    dp[i][j] = dp[i][j - 1]\n        return dp[-1][-1]"
    },
    {
        "number": 2281,
        "title": "Sum of Total Strength of Wizards",
        "difficulty": 2,
        "answer": "        # dp[i][j] = min(dp[i-1][j-1], dp[i-1][j], dp[i-1][j+1]) + dp[i][j]\n        # dp[i][j] = min(dp[i-1][j-1], dp[i-1][j], dp[i-1][j+1]) * min(dp[i][j-1], dp[i][j], dp[i][j+1])\n        # dp[i][j] = min(dp[i-1][j-1], dp[i-1][j], dp[i-1][j+1]) * min(dp[i][j-1], dp[i][j], dp[i][j+1])\n        # dp[i][j] = min(dp[i-1][j-1], dp[i-1][j], dp[i-1][j+1]) * min(dp[i][j-1], dp[i][j"
    },
    {
        "number": 2283,
        "title": "Check if Number Has Equal Digit Count and Digit Value",
        "difficulty": 0,
        "answer": "        if len(num) == 0:\n            return False\n        for i in range(len(num)):\n            if num[i] not in '01':\n                return False\n        return True"
    },
    {
        "number": 2284,
        "title": "Sender With Largest Word Count",
        "difficulty": 1,
        "answer": "        sender_dict = {}\n        for sender in senders:\n            sender_dict[sender] = len(sender)\n        sender_dict = sorted(sender_dict.items(), key=lambda x: x[1], reverse=True)\n        sender_dict = {x[0]: x[1] for x in sender_dict}\n        sender_dict = sorted(sender_dict.items(), key=lambda x: x[1], reverse=True)\n        sender_dict = {x[0]: x[1] for x in sender_dict}\n        sender_dict = sorted(sender_dict.items(), key=lambda x: x[1], reverse=True)\n        sender_dict = {x[0]: x[1] for x in sender_dict}\n        sender_dict = sorted(sender_dict.items(), key=lambda x: x[1], reverse=True)\n        sender_dict = {x[0]: x[1] for x in sender_dict}\n        sender_dict = sorted(sender"
    },
    {
        "number": 2285,
        "title": "Maximum Total Importance of Roads",
        "difficulty": 1,
        "answer": "        # dp[i][j] = max(dp[i-1][j-1], dp[i-1][j], dp[i-1][j+1]) + dp[i][j]\n        # dp[i][j] = max(dp[i-1][j-1], dp[i-1][j], dp[i-1][j+1]) + dp[i][j]\n        # dp[i][j] = max(dp[i-1][j-1], dp[i-1][j], dp[i-1][j+1]) + dp[i][j]\n        # dp[i][j] = max(dp[i-1][j-1], dp[i-1][j], dp[i-1][j+1]) + dp[i][j]\n        # dp[i][j] = max(dp[i-1][j-1], dp[i-1][j], dp[i-1][j+1]) + dp["
    },
    {
        "number": 2286,
        "title": "Booking Concert Tickets in Groups",
        "difficulty": 2,
        "answer": "        pass"
    },
    {
        "number": 2287,
        "title": "Rearrange Characters to Make Target String",
        "difficulty": 0,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage"
    },
    {
        "number": 2288,
        "title": "Apply Discount to Prices",
        "difficulty": 1,
        "answer": "        sentence = sentence.replace(\" \", \"\")\n        sentence = sentence.replace(\"$\", \"\")\n        sentence = sentence.replace(\".\", \"\")\n        sentence = sentence.replace(\"$\", \"\")\n        sentence = sentence.replace(\" \", \"\")\n        sentence = sentence.replace(\"$\", \"\")\n        sentence = sentence.replace(\".\", \"\")\n        sentence = sentence.replace(\"$\", \"\")\n        sentence = sentence.replace(\" \", \"\")\n        sentence = sentence.replace(\"$\", \"\")\n        sentence = sentence.replace(\".\", \"\")\n        sentence = sentence.replace(\"$\", \"\")\n        sentence = sentence.replace(\" \", \"\")\n        sentence = sentence.replace(\"$\", \"\")\n        sentence = sentence.replace(\".\", \"\")\n        sentence = sentence.replace(\"$\", \"\")\n        sentence = sentence.replace(\" \", \"\")\n        sentence = sentence.replace(\"$\", \"\")\n        sentence = sentence.replace(\".\", \"\")\n        sentence = sentence.replace(\"$\", \"\")\n"
    },
    {
        "number": 2289,
        "title": "Steps to Make Array Non-decreasing",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21"
    },
    {
        "number": 2290,
        "title": "Minimum Obstacle Removal to Reach Corner",
        "difficulty": 2,
        "answer": "        m = len(grid)\n        n = len(grid[0])\n        if m == 0 or n == 0:\n            return 0\n        dp = [[0] * n for _ in range(m)]\n        dp[0][0] = 1\n        for i in range(1, m):\n            for j in range(1, n):\n                if grid[i][j] == 0:\n                    continue\n                if grid[i][j] == 1:\n                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n                else:\n                    dp[i][j] = dp[i - 1][j]\n        return dp[m - 1][n - 1]"
    },
    {
        "number": 2293,
        "title": "Min Max Game",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return max(nums[0], nums[1])\n        if n == 3:\n            return max(nums[0], nums[1], nums[2])\n        if n == 4:\n            return max(nums[0], nums[1], nums[2])\n        if n == 5:\n            return max(nums[0], nums[1], nums[2])\n        if n == 6:\n            return max(nums[0], nums[1], nums[2])\n        if n == 7:\n            return max(nums[0], nums[1], nums[2])\n        if n == 8:\n            return max(nums[0], nums[1], nums[2])\n        if n == 9:\n            return max(nums[0], nums[1], nums[2])\n        if n == 10:\n            return max(nums[0"
    },
    {
        "number": 2294,
        "title": "Partition Array Such That Maximum Difference Is K",
        "difficulty": 1,
        "answer": "        if not nums:\n            return 0\n        n = len(nums)\n        if n < 2:\n            return n\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        dp = [0] * n\n        dp[0] = nums[0]\n        dp[1] = nums[0]\n        dp[2] = nums[1]\n        for i in range(3, n):\n            dp[i] = max(dp[i - 1] + nums[i], nums[i])\n        return dp[n - 1] - dp[n - 2]"
    },
    {
        "number": 2295,
        "title": "Replace Elements in an Array",
        "difficulty": 1,
        "answer": "        # O(n^2)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O"
    },
    {
        "number": 2296,
        "title": "Design a Text Editor",
        "difficulty": 2,
        "answer": "    def addText(self, text: str) -> None:\n    def deleteText(self, k: int) -> int:\n    def cursorLeft(self, k: int) -> str:\n    def cursorRight(self, k: int) -> str:\n        \"\"\"\n        Design a text editor with a cursor that can do the following:\n            Add text to where the cursor is.\n            Delete text from where the cursor is (simulating the backspace key).\n            Move the cursor either left or right.\n        When deleting text, only characters to the left of the cursor will be deleted. The cursor will also remain within the actual text and cannot be moved beyond it. More formally, we have that 0 <= cursor.position <= currentText.length always holds.\n        Implement the TextEditor class:\n            TextEditor() Initializes the object with empty text.\n            void addText(string text) Appends text to where the cursor is. The cursor ends to the right of text.\n            int deleteText(int k) Deletes k characters to the left of the cursor. Returns the number of characters actually deleted.\n            string cursorLeft("
    },
    {
        "number": 2299,
        "title": "Strong Password Checker II",
        "difficulty": 0,
        "answer": "        # 1. \u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u4e3a\u6570\u5b57\n        if not password:\n            return False\n        # 2. \u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u4e3a\u5b57\u6bcd\n        if not password.isalpha():\n            return False\n        # 3. \u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u4e3a\u6570\u5b57\n        if not password.isdigit():\n            return False\n        # 4. \u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u4e3a\u7a7a\u683c\n        if not password:\n            return False\n        # 5. \u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u4e3a\u7a7a\u683c\n        if not password.strip():\n            return False\n        # 6. \u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u4e3a\u7a7a\u683c\n        if not password.strip():\n            return False\n        # 7. \u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426"
    },
    {
        "number": 2300,
        "title": "Successful Pairs of Spells and Potions",
        "difficulty": 1,
        "answer": "        pairs = []\n        for i in range(len(spells)):\n            for j in range(i+1, len(spells)):\n                pairs.append(spells[i] * spells[j])\n        pairs.sort()\n        for i in range(len(pairs)):\n            if pairs[i] >= success:\n                pairs[i] = pairs[i] // 2\n        return pairs"
    },
    {
        "number": 2301,
        "title": "Match Substring After Replacement",
        "difficulty": 2,
        "answer": "        if not s:\n            return False\n        if not sub:\n            return True\n        if len(s) == len(sub):\n            for i in range(len(s)):\n                if s[i]!= sub[i]:\n                    return False\n            return True\n        for i in range(len(s)):\n            if s[i]!= sub[i]:\n                if self.matchReplacement(s[:i] + sub + s[i + 1:], sub, mappings):\n                    return True\n        return False"
    },
    {
        "number": 2302,
        "title": "Count Subarrays With Score Less Than K",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        dp = [0] * n\n        for i in range(n):\n            for j in range(i, n):\n                if nums[i] + nums[j] < k:\n                    dp[j] = max(dp[j], dp[i] + 1)\n        return dp[-1]"
    },
    {
        "number": 2303,
        "title": "Calculate Amount Paid in Taxes",
        "difficulty": 0,
        "answer": "        # Brackets are sorted by upper bound\n        # In this case, the upper bound is the index of the first bracket\n        # The upper bound is the index of the last bracket\n        # The upper bound is the index of the last bracket\n        # The upper bound is the index of the last bracket\n        # The upper bound is the index of the last bracket\n        # The upper bound is the index of the last bracket\n        # The upper bound is the index of the last bracket\n        # The upper bound is the index of the last bracket\n        # The upper bound is the index of the last bracket\n        # The upper bound is the index of the last bracket\n        # The upper bound is the index of the last bracket\n        # The upper bound is the index of the last bracket\n        # The upper bound is the index of the last bracket\n        # The upper bound is the index of the last bracket\n        # The upper bound is the index of the last bracket\n        # The upper bound is the index of the last bracket\n        # The upper bound is the index of the last bracket\n        # The upper bound is the index of the last bracket\n        #"
    },
    {
        "number": 2304,
        "title": "Minimum Path Cost in a Grid",
        "difficulty": 1,
        "answer": "        m, n = len(grid), len(grid[0])\n        cost = [[0] * n for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                cost[i][j] = grid[i][j] + min(moveCost[i][j], grid[i][j + 1] + moveCost[i][j + 1])\n        return sum(cost[0])"
    },
    {
        "number": 2305,
        "title": "Fair Distribution of Cookies",
        "difficulty": 1,
        "answer": "        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    },
    {
        "number": 2306,
        "title": "Naming a Company",
        "difficulty": 2,
        "answer": "        # Idea 1\n        # Idea 2\n        # Idea 3\n        # Idea 4\n        # Idea 5\n        # Idea 6\n        # Idea 7\n        # Idea 8\n        # Idea 9\n        # Idea 10\n        # Idea 11\n        # Idea 12\n        # Idea 13\n        # Idea 14\n        # Idea 15\n        # Idea 16\n        # Idea 17\n        # Idea 18\n        # Idea 19\n        # Idea 20\n        # Idea 21\n        # Idea 22\n        # Idea 23\n        # Idea 24\n        # Idea 25\n        # Idea 26\n        # Idea 27\n        # Idea 28\n        # Idea 29\n        # Idea 30\n        # Idea 31\n        # Idea 32\n        # Idea 33\n        # Idea 34\n        # Idea 35\n        # Idea 36\n        # Idea 37\n        # Idea 38\n        # Idea 39\n        # Idea 40\n        # Idea 41\n        # Idea 42\n        # Idea 43\n        # Idea 44\n        # Idea 45\n        # Idea 46\n        # Idea 47\n        # Idea 48\n        # Idea 49\n        # Idea 50\n"
    },
    {
        "number": 2309,
        "title": "Greatest English Letter in Upper and Lower Case",
        "difficulty": 0,
        "answer": "        if not s:\n            return \"\"\n        if len(s) == 1:\n            return s[0]\n        if s[0].isupper():\n            return s[0]\n        if s[0].islower():\n            return s[0]\n        for i in range(1, len(s)):\n            if s[i].isupper():\n                return s[i]\n            if s[i].islower():\n                return s[i]\n        return \"\""
    },
    {
        "number": 2310,
        "title": "Sum of Numbers With Units Digit K",
        "difficulty": 1,
        "answer": "        if num == 0:\n            return 0\n        if num == 1:\n            return 1\n        if num == 2:\n            return 2\n        if num == 3:\n            return 3\n        if num == 4:\n            return 4\n        if num == 5:\n            return 5\n        if num == 6:\n            return 6\n        if num == 7:\n            return 7\n        if num == 8:\n            return 8\n        if num == 9:\n            return 9\n        if num == 10:\n            return 10\n        if num == 11:\n            return 11\n        if num == 12:\n            return 12\n        if num == 13:\n            return 13\n        if num == 14:\n            return 14\n        if num == 15:\n            return 15\n        if num == 16:\n            return 16\n        if num == 17:\n            return 17\n        if num == 18:\n            return 18\n        if num == 19:\n            return 19\n        if num == 20:\n            return 20\n        if num == 21:\n            return 21\n        if num == 22:\n            "
    },
    {
        "number": 2311,
        "title": "Longest Binary Subsequence Less Than or Equal to K",
        "difficulty": 1,
        "answer": "        if not s:\n            return 0\n        if len(s) < k:\n            return 0\n        if k == 1:\n            return 1\n        if k == 2:\n            return 2\n        if k == 3:\n            return 3\n        if k == 4:\n            return 4\n        if k == 5:\n            return 5\n        if k == 6:\n            return 6\n        if k == 7:\n            return 7\n        if k == 8:\n            return 8\n        if k == 9:\n            return 9\n        if k == 10:\n            return 10\n        if k == 11:\n            return 11\n        if k == 12:\n            return 12\n        if k == 13:\n            return 13\n        if k == 14:\n            return 14\n        if k == 15:\n            return 15\n        if k == 16:\n            return 16\n        if k == 17:\n            return 17\n        if k == 18:\n            return 18\n        if k == 19:\n            return 19\n        if k == 20:\n            return 20\n        if k == 21:"
    },
    {
        "number": 2312,
        "title": "Selling Pieces of Wood",
        "difficulty": 2,
        "answer": "        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        dp[0][0] = 0\n        for i in range(m + 1):\n            for j in range(n + 1):\n                if i == 0 or j == 0:\n                    dp[i][j] = 0\n                elif i == 1 or j == 1:\n                    dp[i][j] = dp[i - 1][j - 1] + prices[i - 1][j - 1]\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - 1])\n        return dp[m][n]"
    },
    {
        "number": 2315,
        "title": "Count Asterisks",
        "difficulty": 0,
        "answer": "        count = 0\n        for i in range(len(s)):\n            if s[i] == '|':\n                count += 1\n            else:\n                count -= 1\n        return count"
    },
    {
        "number": 2316,
        "title": "Count Unreachable Pairs of Nodes in an Undirected Graph",
        "difficulty": 1,
        "answer": "        # Time: O(n^2)\n        # Space: O(n)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        #"
    },
    {
        "number": 2317,
        "title": "Maximum XOR After Operations ",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        max_xor = 0\n        for i in range(n):\n            max_xor = max_xor ^ nums[i]\n        return max_xor"
    },
    {
        "number": 2318,
        "title": "Number of Distinct Roll Sequences",
        "difficulty": 2,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage"
    },
    {
        "number": 2319,
        "title": "Check if Matrix Is X-Matrix",
        "difficulty": 0,
        "answer": "        for i in range(len(grid)):\n            for j in range(len(grid[0])):\n                if grid[i][j] == 0:\n                    return False\n        return True"
    },
    {
        "number": 2320,
        "title": "Count Number of Ways to Place Houses",
        "difficulty": 1,
        "answer": "        dp = [0] * (n + 1)\n        dp[0] = 1\n        dp[1] = 1\n        for i in range(2, n + 1):\n            for j in range(1, i):\n                dp[i] += dp[j]\n        return dp[n] % (10 ** 9 + 7)"
    },
    {
        "number": 2321,
        "title": "Maximum Score Of Spliced Array",
        "difficulty": 2,
        "answer": "        n = len(nums1)\n        m = len(nums2)\n        dp = [[0] * (m + 1) for _ in range(n + 1)]\n        for i in range(n + 1):\n            for j in range(m + 1):\n                if i == 0 or j == 0:\n                    dp[i][j] = 0\n                elif nums1[i - 1] == nums2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n        return dp[n][m]"
    },
    {
        "number": 2322,
        "title": "Minimum Score After Removals on a Tree",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        edges = sorted(edges, key=lambda x: x[0] ^ x[1])\n        xor = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                xor ^= nums[i] ^ nums[j]\n        return edges[0][1] ^ edges[1][0] ^ xor"
    },
    {
        "number": 2325,
        "title": "Decode the Message",
        "difficulty": 0,
        "answer": "        # TODO: complete this method\n        # TODO: complete this method\n        # TODO: complete this method\n        # TODO: complete this method\n        # TODO: complete this method\n        # TODO: complete this method\n        # TODO: complete this method\n        # TODO: complete this method\n        # TODO: complete this method\n        # TODO: complete this method\n        # TODO: complete this method\n        # TODO: complete this method\n        # TODO: complete this method\n        # TODO: complete this method\n        # TODO: complete this method\n        # TODO: complete this method\n        # TODO: complete this method\n        # TODO: complete this method\n        # TODO: complete this method\n        # TODO: complete this method\n        # TODO: complete this method\n        # TODO: complete this method\n        # TODO: complete this method\n        # TODO: complete this method\n        # TODO: complete this method\n        # TODO: complete this method\n        # TODO: complete this method\n        # TODO: complete this"
    },
    {
        "number": 2326,
        "title": "Spiral Matrix IV",
        "difficulty": 1,
        "answer": "        # O(m*n)\n        # O(m*n)\n        # O(m*n)\n        # O(m*n)\n        # O(m*n)\n        # O(m*n)\n        # O(m*n)\n        # O(m*n)\n        # O(m*n)\n        # O(m*n)\n        # O(m*n)\n        # O(m*n)\n        # O(m*n)\n        # O(m*n)\n        # O(m*n)\n        # O(m*n)\n        # O(m*n)\n        # O(m*n)\n        # O(m*n)\n        # O(m*n)\n        # O(m*n)\n        # O(m*n)\n        # O(m*n)\n        # O(m*n)\n        # O(m*n)\n        # O(m*n)\n        # O(m*n)\n        # O(m*n"
    },
    {
        "number": 2327,
        "title": "Number of People Aware of a Secret",
        "difficulty": 1,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n"
    },
    {
        "number": 2328,
        "title": "Number of Increasing Paths in a Grid",
        "difficulty": 2,
        "answer": "        m = len(grid)\n        n = len(grid[0])\n        dp = [[0] * n for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if i == 0 or j == 0:\n                    dp[i][j] = 1\n                elif grid[i][j] == grid[i - 1][j] == grid[i][j - 1] == grid[i - 1][j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                else:\n                    dp[i][j] = dp[i - 1][j]\n        return dp[m - 1][n - 1] % (10 ** 9 + 7)"
    },
    {
        "number": 2331,
        "title": "Evaluate Boolean Binary Tree",
        "difficulty": 0,
        "answer": "        if not root:\n            return False\n        if root.left:\n            return self.evaluateTree(root.left) and self.evaluateTree(root.right)\n        if root.right:\n            return self.evaluateTree(root.right) and self.evaluateTree(root.left)\n        return root.val"
    },
    {
        "number": 2332,
        "title": "The Latest Time to Catch a Bus",
        "difficulty": 1,
        "answer": "        passengers = sorted(passengers)\n        buses = sorted(buses)\n        n = len(buses)\n        m = len(passengers)\n        capacity = capacity\n        dp = [[0 for _ in range(capacity + 1)] for _ in range(n + 1)]\n        for i in range(n + 1):\n            for j in range(capacity + 1):\n                if i == 0:\n                    dp[i][j] = 0\n                elif j == 0:\n                    dp[i][j] = -1\n                elif passengers[i - 1] <= j:\n                    dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - passengers[i - 1]] + passengers[i - 1])\n                else:\n                    dp[i][j] = dp[i - 1][j]\n        return dp[n][capacity]"
    },
    {
        "number": 2333,
        "title": "Minimum Sum of Squared Difference",
        "difficulty": 1,
        "answer": "        n = len(nums1)\n        m = len(nums2)\n        dp = [[0 for _ in range(k1 + 1)] for _ in range(k2 + 1)]\n        for i in range(n):\n            for j in range(m):\n                if nums1[i] - nums2[j] < 0:\n                    dp[0][0] += nums1[i] - nums2[j]\n                else:\n                    dp[0][j + 1] += nums1[i] - nums2[j]\n        for i in range(1, k1 + 1):\n            for j in range(1, k2 + 1):\n                dp[i][j] = dp[i - 1][j] + dp[i][j - 1] - dp[i - 1][j - 1]\n        return min(dp[k1][k2], dp[k2][k1])"
    },
    {
        "number": 2334,
        "title": "Subarray With Elements Greater Than Varying Threshold",
        "difficulty": 2,
        "answer": "        # Time complexity: O(n)\n        # Space Complexity: O(n)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        "
    },
    {
        "number": 2335,
        "title": "Minimum Amount of Time to Fill Cups",
        "difficulty": 0,
        "answer": "        amount.sort()\n        if len(amount) == 1:\n            return amount[0]\n        if len(amount) == 2:\n            return amount[0] + amount[1]\n        if len(amount) == 3:\n            return amount[0] + amount[1] + amount[2]\n        if len(amount) == 4:\n            return amount[0] + amount[1] + amount[2] + amount[3]\n        if len(amount) == 5:\n            return amount[0] + amount[1] + amount[2] + amount[3] + amount[4]\n        if len(amount) == 6:\n            return amount[0] + amount[1] + amount[2] + amount[3] + amount[4] + amount[5]\n        if len(amount) == 7:\n            return amount[0] + amount[1] + amount[2] + amount[3] + amount[4] + amount[5] + amount[6]\n        if len(amount) == 8:\n            return amount[0] + amount[1"
    },
    {
        "number": 2336,
        "title": "Smallest Number in Infinite Set",
        "difficulty": 1,
        "answer": "        pass"
    },
    {
        "number": 2337,
        "title": "Move Pieces to Obtain a String",
        "difficulty": 1,
        "answer": "        if len(start)!= len(target):\n            return False\n        if len(start) == 0:\n            return True\n        if len(start) == 1:\n            return start[0] == target[0]\n        if len(start) == 2:\n            if start[0] == target[0] and start[1] == target[1]:\n                return True\n            else:\n                return False\n        if len(start) == 3:\n            if start[0] == target[0] and start[1] == target[1] and start[2] == target[2]:\n                return True\n            else:\n                return False\n        if len(start) == 4:\n            if start[0] == target[0] and start[1] == target[1] and start[2] == target[2] and start[3] == target[3]:\n                return True\n            else:\n                return False\n        if len(start) == 5:\n            if start[0] == target[0] and start[1] == target[1] and start[2]"
    },
    {
        "number": 2338,
        "title": "Count the Number of Ideal Arrays",
        "difficulty": 2,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage"
    },
    {
        "number": 2341,
        "title": "Maximum Number of Pairs in Array",
        "difficulty": 0,
        "answer": "        nums.sort()\n        count = 0\n        for i in range(len(nums)):\n            if nums[i] == nums[i-1]:\n                count += 1\n            else:\n                count = 0\n                break\n        return [count, len(nums)-count]"
    },
    {
        "number": 2342,
        "title": "Max Sum of a Pair With Equal Sum of Digits",
        "difficulty": 1,
        "answer": "        # O(n) time | O(1) space\n        # Time: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        #"
    },
    {
        "number": 2343,
        "title": "Query Kth Smallest Trimmed Number",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        m = len(queries)\n        dp = [[0] * (m + 1) for _ in range(n + 1)]\n        for i in range(n + 1):\n            for j in range(m + 1):\n                if i == 0:\n                    dp[i][j] = 0\n                elif j == 0:\n                    dp[i][j] = nums[i - 1]\n                elif nums[i - 1] == nums[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + 1\n        answer = []\n        for i in range(n + 1):\n            for j in range(m + 1):\n                if dp[i][j] == queries[j][0]:\n                    answer.append(queries[j][1])\n        return answer"
    },
    {
        "number": 2344,
        "title": "Minimum Deletions to Make Array Divisible",
        "difficulty": 2,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage"
    },
    {
        "number": 2347,
        "title": "Best Poker Hand",
        "difficulty": 0,
        "answer": "        # TODO: Write your code here\n        # TODO: Remove this line when you implement this function\n        pass"
    },
    {
        "number": 2348,
        "title": "Number of Zero-Filled Subarrays",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21"
    },
    {
        "number": 2349,
        "title": "Design a Number Container System",
        "difficulty": 1,
        "answer": "        pass"
    },
    {
        "number": 2350,
        "title": "Shortest Impossible Sequence of Rolls",
        "difficulty": 2,
        "answer": "        # Time: O(n^2)\n        # Space: O(n)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        #"
    },
    {
        "number": 2351,
        "title": "First Letter to Appear Twice",
        "difficulty": 0,
        "answer": "        # Time: O(n)\n        # Space: O(1)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage"
    },
    {
        "number": 2352,
        "title": "Equal Row and Column Pairs",
        "difficulty": 1,
        "answer": "        n = len(grid)\n        if n == 0:\n            return 0\n        m = len(grid[0])\n        if m == 0:\n            return 0\n        dp = [[0] * m for _ in range(n)]\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == 0:\n                    continue\n                if i == 0:\n                    dp[i][j] = 1\n                elif j == 0:\n                    dp[i][j] = 1\n                else:\n                    if grid[i - 1][j] == grid[i][j - 1]:\n                        dp[i][j] = dp[i - 1][j - 1] + 1\n                    else:\n                        dp[i][j] = dp[i - 1][j]\n        return dp[n - 1][m - 1]"
    },
    {
        "number": 2353,
        "title": "Design a Food Rating System",
        "difficulty": 1,
        "answer": "        pass\n    def highestRated(self, cuisine: str) -> str:\n        \"\"\"\n        Design a food rating system that can do the following:\n            Modify the rating of a food item listed in the system.\n            Return the highest-rated food item for a type of cuisine in the system.\n        Implement the FoodRatings class:\n            FoodRatings(String[] foods, String[] cuisines, int[] ratings) Initializes the system. The food items are described by foods, cuisines and ratings, all of which have a length of n.\n                foods[i] is the name of the ith food,\n                cuisines[i] is the type of cuisine of the ith food, and\n                ratings[i] is the initial rating of the ith food.\n            void changeRating(String food, int newRating) Changes the rating of the food item with the name food.\n            String highestRated(String cuisine) Returns the name of the food item that has the highest rating for the given type of cuisine. If there is a tie, return the item with the lexicographically smaller name.\n        Example"
    },
    {
        "number": 2354,
        "title": "Number of Excellent Pairs",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        count = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                if nums[i] + nums[j] > k:\n                    break\n                if nums[i] + nums[j] == k:\n                    count += 1\n        return count"
    },
    {
        "number": 2357,
        "title": "Make Array Zero by Subtracting Equal Amounts",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21"
    },
    {
        "number": 2358,
        "title": "Maximum Number of Groups Entering a Competition",
        "difficulty": 1,
        "answer": "        # TODO: Write your code here\n        # TODO: Remove this comment\n        # raise NotImplementedError"
    },
    {
        "number": 2359,
        "title": "Find Closest Node to Given Two Nodes",
        "difficulty": 1,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage"
    },
    {
        "number": 2360,
        "title": "Longest Cycle in a Graph",
        "difficulty": 2,
        "answer": "        n = len(edges)\n        visited = [False] * n\n        visited[0] = True\n        cycle = 0\n        for i in range(n):\n            if not visited[i]:\n                cycle += 1\n                for j in range(i + 1, n):\n                    if not visited[j]:\n                        visited[j] = True\n                        cycle += 1\n        return cycle"
    },
    {
        "number": 2363,
        "title": "Merge Similar Items",
        "difficulty": 0,
        "answer": "        ret = []\n        i = 0\n        j = 0\n        while i < len(items1) and j < len(items2):\n            if items1[i][0] < items2[j][0]:\n                ret.append([items1[i][0], items1[i][1] + items2[j][1]])\n                i += 1\n            else:\n                ret.append([items2[j][0], items2[j][1]])\n                j += 1\n        while i < len(items1):\n            ret.append([items1[i][0], items1[i][1]])\n            i += 1\n        while j < len(items2):\n            ret.append([items2[j][0], items2[j][1]])\n            j += 1\n        return ret"
    },
    {
        "number": 2364,
        "title": "Count Number of Bad Pairs",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n < 2:\n            return 0\n        dp = [0] * n\n        dp[0] = 1\n        for i in range(1, n):\n            for j in range(i):\n                if nums[i] == nums[j] and dp[j] == 1:\n                    dp[i] += dp[j]\n        return dp[-1]"
    },
    {
        "number": 2365,
        "title": "Task Scheduler II",
        "difficulty": 1,
        "answer": "        # Time: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1"
    },
    {
        "number": 2366,
        "title": "Minimum Replacements to Sort the Array",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if nums[0] + nums[1] > nums[2]:\n            return 2\n        if nums[0] + nums[1] == nums[2]:\n            return 2\n        if nums[0] + nums[1] < nums[2]:\n            return 1\n        if nums[0] + nums[1] > nums[2]:\n            return 1\n        if nums[0] + nums[1] == nums[2]:\n            return 1\n        if nums[0] + nums[1] < nums[2]:\n            return 1\n        if nums[0] + nums[1] > nums[2]:\n            return 1\n        if nums[0] + nums[1] == nums[2]:\n            return 1\n        if nums[0] + nums[1] < nums"
    },
    {
        "number": 2367,
        "title": "Number of Arithmetic Triplets",
        "difficulty": 0,
        "answer": "        nums.sort()\n        count = 0\n        for i in range(len(nums) - 1):\n            for j in range(i + 1, len(nums)):\n                if nums[i] + nums[j] == diff:\n                    count += 1\n        return count"
    },
    {
        "number": 2368,
        "title": "Reachable Nodes With Restrictions",
        "difficulty": 1,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage"
    },
    {
        "number": 2369,
        "title": "Check if There is a Valid Partition For The Array",
        "difficulty": 1,
        "answer": "        if len(nums) == 1:\n            return True\n        if len(nums) == 2:\n            return nums[0] == nums[1]\n        if len(nums) == 3:\n            return nums[0] == nums[1] and nums[1] == nums[2]\n        if len(nums) == 4:\n            return nums[0] == nums[1] and nums[1] == nums[2] and nums[2] == nums[3]\n        if len(nums) == 5:\n            return nums[0] == nums[1] and nums[1] == nums[2] and nums[2] == nums[3] and nums[3] == nums[4]\n        if len(nums) == 6:\n            return nums[0] == nums[1] and nums[1] == nums[2] and nums[2] == nums[3] and nums[3] == nums[4] and nums"
    },
    {
        "number": 2370,
        "title": "Longest Ideal Subsequence",
        "difficulty": 1,
        "answer": "        if not s:\n            return 0\n        if len(s) < k:\n            return 0\n        if k == 0:\n            return len(s)\n        if k == 1:\n            return 1\n        if k == 2:\n            return 2\n        if k == 3:\n            return 3\n        if k == 4:\n            return 4\n        if k == 5:\n            return 5\n        if k == 6:\n            return 6\n        if k == 7:\n            return 7\n        if k == 8:\n            return 8\n        if k == 9:\n            return 9\n        if k == 10:\n            return 10\n        if k == 11:\n            return 11\n        if k == 12:\n            return 12\n        if k == 13:\n            return 13\n        if k == 14:\n            return 14\n        if k == 15:\n            return 15\n        if k == 16:\n            return 16\n        if k == 17:\n            return 17\n        if k == 18:\n            return 18\n        if k == 19:\n            return 19\n        if k"
    },
    {
        "number": 2373,
        "title": "Largest Local Values in a Matrix",
        "difficulty": 0,
        "answer": "        n = len(grid)\n        if n == 0:\n            return []\n        m = len(grid[0])\n        if m == 0:\n            return []\n        maxLocal = [[0 for _ in range(m)] for _ in range(n)]\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == 1:\n                    maxLocal[i][j] = grid[i][j]\n                else:\n                    maxLocal[i][j] = max(maxLocal[i][j - 1], maxLocal[i - 1][j], maxLocal[i - 1][j - 1]) + grid[i][j]\n        return maxLocal"
    },
    {
        "number": 2374,
        "title": "Node With Highest Edge Score",
        "difficulty": 1,
        "answer": "        n = len(edges)\n        if n == 0:\n            return 0\n        edges.sort()\n        for i in range(n):\n            if edges[i] == edges[i + 1]:\n                return i\n        return n - 1"
    },
    {
        "number": 2375,
        "title": "Construct Smallest Number From DI String",
        "difficulty": 1,
        "answer": "        n = len(pattern)\n        if n == 0:\n            return \"\"\n        if n == 1:\n            return pattern[0]\n        if n == 2:\n            return pattern[0] + pattern[1]\n        if n == 3:\n            return pattern[0] + pattern[1] + pattern[2]\n        if n == 4:\n            return pattern[0] + pattern[1] + pattern[2] + pattern[3]\n        if n == 5:\n            return pattern[0] + pattern[1] + pattern[2] + pattern[3] + pattern[4]\n        if n == 6:\n            return pattern[0] + pattern[1] + pattern[2] + pattern[3] + pattern[4] + pattern[5]\n        if n == 7:\n            return pattern[0] + pattern[1] + pattern[2] + pattern[3] + pattern[4] + pattern[5] + pattern[6]\n        if n == 8:\n            return pattern[0] + pattern[1] + pattern[2] + pattern[3]"
    },
    {
        "number": 2376,
        "title": "Count Special Integers",
        "difficulty": 2,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n        if n == 22:\n            "
    },
    {
        "number": 2379,
        "title": "Minimum Recolors to Get K Consecutive Black Blocks",
        "difficulty": 0,
        "answer": "        n = len(blocks)\n        if n < k:\n            return 0\n        if n == k:\n            return 1\n        if n == k + 1:\n            return 2\n        if n == k + 2:\n            return 3\n        if n == k + 3:\n            return 4\n        if n == k + 4:\n            return 5\n        if n == k + 5:\n            return 6\n        if n == k + 6:\n            return 7\n        if n == k + 7:\n            return 8\n        if n == k + 8:\n            return 9\n        if n == k + 9:\n            return 10\n        if n == k + 10:\n            return 11\n        if n == k + 11:\n            return 12\n        if n == k + 12:\n            return 13\n        if n == k + 13:\n            return 14\n        if n == k + 14:\n            return 15\n        if n == k + 15:\n            return 16\n        if n == k + 16:\n            return 17\n        if n == k + 17:\n            return 18"
    },
    {
        "number": 2380,
        "title": "Time Needed to Rearrange a Binary String",
        "difficulty": 1,
        "answer": "        n = len(s)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1\n        if n == 3:\n            return 1\n        if n == 4:\n            return 1\n        if n == 5:\n            return 1\n        if n == 6:\n            return 1\n        if n == 7:\n            return 1\n        if n == 8:\n            return 1\n        if n == 9:\n            return 1\n        if n == 10:\n            return 1\n        if n == 11:\n            return 1\n        if n == 12:\n            return 1\n        if n == 13:\n            return 1\n        if n == 14:\n            return 1\n        if n == 15:\n            return 1\n        if n == 16:\n            return 1\n        if n == 17:\n            return 1\n        if n == 18:\n            return 1\n        if n == 19:\n            return 1\n        if n == 20:\n            return 1\n        if n == 21:\n            return 1\n"
    },
    {
        "number": 2381,
        "title": "Shifting Letters II",
        "difficulty": 1,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n"
    },
    {
        "number": 2382,
        "title": "Maximum Segment Sum After Removals",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if n == 0:\n            return []\n        if n == 1:\n            return nums[0]\n        \n        # \u521d\u59cb\u5316\n        dp = [0] * n\n        dp[0] = nums[0]\n        dp[1] = nums[0]\n        for i in range(2, n):\n            dp[i] = max(dp[i-1] + nums[i], nums[i])\n        \n        # \u521d\u59cb\u5316\n        dp[0] = nums[0]\n        dp[1] = nums[0]\n        for i in range(2, n):\n            dp[i] = max(dp[i-1] + nums[i], nums[i])\n        \n        # \u521d\u59cb\u5316\n        dp[0] = nums[0]\n        dp[1] = nums[0]\n        for i in range(2, n):\n            dp[i] = max(dp[i-1"
    },
    {
        "number": 2383,
        "title": "Minimum Hours of Training to Win a Competition",
        "difficulty": 0,
        "answer": "        n = len(energy)\n        if n == 0:\n            return 0\n        if n == 1:\n            return energy[0]\n        if n == 2:\n            return energy[0] + energy[1]\n        if n == 3:\n            return energy[0] + energy[1] + energy[2]\n        if n == 4:\n            return energy[0] + energy[1] + energy[2] + energy[3]\n        if n == 5:\n            return energy[0] + energy[1] + energy[2] + energy[3] + energy[4]\n        if n == 6:\n            return energy[0] + energy[1] + energy[2] + energy[3] + energy[4] + energy[5]\n        if n == 7:\n            return energy[0] + energy[1] + energy[2] + energy[3] + energy[4] + energy[5] + energy[6]\n        if n == 8:\n            return energy[0] + energy[1] + energy[2] + energy[3]"
    },
    {
        "number": 2384,
        "title": "Largest Palindromic Number",
        "difficulty": 1,
        "answer": "        def palindromic(num):\n            if len(num) == 1:\n                return num\n            if num[0] == num[-1]:\n                return palindromic(num[1:-1])\n            else:\n                return palindromic(num[1:]) + palindromic(num[:-1])\n        return palindromic(num)"
    },
    {
        "number": 2385,
        "title": "Amount of Time for Binary Tree to Be Infected",
        "difficulty": 1,
        "answer": "        if not root:\n            return 0\n        if not root.left and not root.right:\n            return start\n        if not root.left:\n            return self.amountOfTime(root.right, start + 1)\n        if not root.right:\n            return self.amountOfTime(root.left, start + 1)\n        return self.amountOfTime(root.right, start + 1) + self.amountOfTime(root.left, start + 1)"
    },
    {
        "number": 2386,
        "title": "Find the K-Sum of an Array",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if n < k:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return nums[0] + nums[1]\n        if n == 3:\n            return nums[0] + nums[1] + nums[2]\n        if n == 4:\n            return nums[0] + nums[1] + nums[2] + nums[3]\n        if n == 5:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4]\n        if n == 6:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5]\n        if n == 7:\n            return nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5] + nums[6]"
    },
    {
        "number": 2389,
        "title": "Longest Subsequence With Limited Sum",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        m = len(queries)\n        dp = [[0] * (m + 1) for _ in range(n + 1)]\n        for i in range(n + 1):\n            dp[i][0] = 1\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if nums[j - 1] <= queries[i - 1]:\n                    dp[j][i] = dp[j - 1][i - 1]\n                else:\n                    dp[j][i] = dp[j - 1][i]\n        return [i for i in range(m + 1) if dp[n][i] == 0]"
    },
    {
        "number": 2390,
        "title": "Removing Stars From a String",
        "difficulty": 1,
        "answer": "        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    },
    {
        "number": 2391,
        "title": "Minimum Amount of Time to Collect Garbage",
        "difficulty": 1,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n"
    },
    {
        "number": 2392,
        "title": "Build a Matrix With Conditions",
        "difficulty": 2,
        "answer": "        n = len(rowConditions)\n        m = len(colConditions)\n        if n == 0 or m == 0:\n            return []\n        if n == 1 and m == 1:\n            return [[0]]\n        if n == 1 and m == 2:\n            return [[0, 0]]\n        if n == 2 and m == 1:\n            return [[0, 0, 0]]\n        if n == 2 and m == 2:\n            return [[0, 0, 0, 0]]\n        if n == 3 and m == 1:\n            return [[0, 0, 0, 0]]\n        if n == 3 and m == 2:\n            return [[0, 0, 0, 0]]\n        if n == 3 and m == 3:\n            return [[0, 0, 0, 0, 0]]\n        if n == 4 and m == 1:\n            return [[0, 0, 0, 0, 0]]\n        if n == 4 and m == 2:\n            return [[0, 0, 0, 0, 0]]\n        if n == 4 and m == 3:\n            return [["
    },
    {
        "number": 2395,
        "title": "Find Subarrays With Equal Sum",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        if n == 0:\n            return False\n        if n == 1:\n            return True\n        \n        dp = [0] * n\n        dp[0] = nums[0]\n        dp[1] = nums[0] + nums[1]\n        \n        for i in range(2, n):\n            dp[i] = max(dp[i-1], dp[i-2] + nums[i])\n        \n        return dp[-1] >= 0\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n"
    },
    {
        "number": 2396,
        "title": "Strictly Palindromic Number",
        "difficulty": 1,
        "answer": "        if n < 2:\n            return False\n        if n == 2:\n            return True\n        if n == 3:\n            return True\n        if n == 4:\n            return True\n        if n == 5:\n            return True\n        if n == 6:\n            return True\n        if n == 7:\n            return True\n        if n == 8:\n            return True\n        if n == 9:\n            return True\n        if n == 10:\n            return True\n        if n == 11:\n            return True\n        if n == 12:\n            return True\n        if n == 13:\n            return True\n        if n == 14:\n            return True\n        if n == 15:\n            return True\n        if n == 16:\n            return True\n        if n == 17:\n            return True\n        if n == 18:\n            return True\n        if n == 19:\n            return True\n        if n == 20:\n            return True\n        if n == 21:\n            return True\n        if n == 22:\n            return True\n        if n == 23:\n            "
    },
    {
        "number": 2397,
        "title": "Maximum Rows Covered by Columns",
        "difficulty": 1,
        "answer": "        m, n = len(matrix), len(matrix[0])\n        if m == 0 or n == 0:\n            return 0\n        if m == 1:\n            return n\n        if n == 1:\n            return m\n        if numSelect == 0:\n            return m\n        if numSelect == 1:\n            return n\n        if numSelect > n:\n            return 0\n        if numSelect > m:\n            return 0\n        if numSelect > n:\n            return 0\n        if numSelect > m:\n            return 0\n        if numSelect > n:\n            return 0\n        if numSelect > m:\n            return 0\n        if numSelect > n:\n            return 0\n        if numSelect > m:\n            return 0\n        if numSelect > n:\n            return 0\n        if numSelect > m:\n            return 0\n        if numSelect > n:\n            return 0\n        if numSelect > m:\n            return 0\n        if numSelect > n:\n            return 0\n        if numSelect > m:\n            return 0\n        if num"
    },
    {
        "number": 2398,
        "title": "Maximum Number of Robots Within Budget",
        "difficulty": 2,
        "answer": "        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    },
    {
        "number": 2399,
        "title": "Check Distances Between Same Letters",
        "difficulty": 0,
        "answer": "        # O(n) time | O(n) space\n        # if len(s) == 0:\n        #     return True\n        # if len(s) == 1:\n        #     return False\n        # if len(s) == 2:\n        #     return s[0] == s[1]\n        # if len(s) == 3:\n        #     return s[0] == s[1] and s[1] == s[2]\n        # if len(s) == 4:\n        #     return s[0] == s[1] and s[1] == s[2] and s[2] == s[3]\n        # if len(s) == 5:\n        #     return s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4]\n        # if len(s) == 6:\n        #     return s[0] == s[1] and s[1] == s[2] and s[2] == s["
    },
    {
        "number": 2400,
        "title": "Number of Ways to Reach a Position After Exactly k Steps",
        "difficulty": 1,
        "answer": "        if k == 0:\n            return 1\n        if k == 1:\n            return 0\n        if k == 2:\n            return 1\n        if k == 3:\n            return 1\n        if k == 4:\n            return 2\n        if k == 5:\n            return 2\n        if k == 6:\n            return 3\n        if k == 7:\n            return 3\n        if k == 8:\n            return 4\n        if k == 9:\n            return 4\n        if k == 10:\n            return 4\n        if k == 11:\n            return 4\n        if k == 12:\n            return 4\n        if k == 13:\n            return 4\n        if k == 14:\n            return 4\n        if k == 15:\n            return 4\n        if k == 16:\n            return 4\n        if k == 17:\n            return 4\n        if k == 18:\n            return 4\n        if k == 19:\n            return 4\n        if k == 20:\n            return 4\n        if k == 21:\n            return 4\n        if k == 22:\n            "
    },
    {
        "number": 2401,
        "title": "Longest Nice Subarray",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21"
    },
    {
        "number": 2402,
        "title": "Meeting Rooms III",
        "difficulty": 2,
        "answer": "        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space"
    },
    {
        "number": 2404,
        "title": "Most Frequent Even Element",
        "difficulty": 0,
        "answer": "        if len(nums) == 0:\n            return -1\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return nums[0] if nums[0] % 2 == 0 else nums[1]\n        if len(nums) == 3:\n            return nums[0] if nums[0] % 2 == 0 else nums[1] if nums[1] % 2 == 0 else nums[2]\n        if len(nums) == 4:\n            return nums[0] if nums[0] % 2 == 0 else nums[1] if nums[1] % 2 == 0 else nums[2] if nums[2] % 2 == 0 else nums[3]\n        if len(nums) == 5:\n            return nums[0] if nums[0] % 2 == 0 else nums[1] if nums[1] % 2 == 0 else nums[2] if nums[2] % 2 == 0 else num"
    },
    {
        "number": 2405,
        "title": "Optimal Partition of String",
        "difficulty": 1,
        "answer": "        if not s:\n            return 0\n        if len(s) == 1:\n            return 1\n        if len(s) == 2:\n            return 2\n        if len(s) == 3:\n            return 3\n        if len(s) == 4:\n            return 4\n        if len(s) == 5:\n            return 5\n        if len(s) == 6:\n            return 6\n        if len(s) == 7:\n            return 7\n        if len(s) == 8:\n            return 8\n        if len(s) == 9:\n            return 9\n        if len(s) == 10:\n            return 10\n        if len(s) == 11:\n            return 11\n        if len(s) == 12:\n            return 12\n        if len(s) == 13:\n            return 13\n        if len(s) == 14:\n            return 14\n        if len(s) == 15:\n            return 15\n        if len(s) == 16:\n            return 16\n        if len(s) == 17:\n            return 17\n        if"
    },
    {
        "number": 2406,
        "title": "Divide Intervals Into Minimum Number of Groups",
        "difficulty": 1,
        "answer": "        intervals.sort()\n        n = len(intervals)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        for i in range(n):\n            if intervals[i][0] <= intervals[i][1]:\n                return 3\n        return 1"
    },
    {
        "number": 2407,
        "title": "Longest Increasing Subsequence II",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        dp = [0] * n\n        for i in range(n):\n            for j in range(i):\n                if nums[j] < nums[i] and dp[j] < dp[i] + 1:\n                    dp[i] = dp[j] + 1\n        return max(dp)"
    },
    {
        "number": 2409,
        "title": "Count Days Spent Together",
        "difficulty": 0,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1)\n        # Runtime: O(n)\n        # Space: O(1"
    },
    {
        "number": 2410,
        "title": "Maximum Matching of Players With Trainers",
        "difficulty": 1,
        "answer": "        players.sort()\n        trainers.sort()\n        n = len(players)\n        m = len(trainers)\n        dp = [[0] * (m + 1) for _ in range(n + 1)]\n        for i in range(n):\n            for j in range(m):\n                if players[i] <= trainers[j]:\n                    dp[i + 1][j + 1] = max(dp[i][j + 1], dp[i + 1][j] + 1)\n                else:\n                    dp[i + 1][j + 1] = dp[i + 1][j]\n        return dp[n][m]"
    },
    {
        "number": 2411,
        "title": "Smallest Subarrays With Maximum Bitwise OR",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return []\n        \n        # dp[i][j] = max(dp[i-1][j-1], dp[i-1][j]) + nums[i]\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + nums[i]\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + nums[i]\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + nums[i]\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + nums[i]\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + nums[i]\n"
    },
    {
        "number": 2412,
        "title": "Minimum Money Required Before Transactions",
        "difficulty": 2,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n"
    },
    {
        "number": 2413,
        "title": "Smallest Even Multiple",
        "difficulty": 0,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n % 2 == 0:\n            return self.smallestEvenMultiple(n // 2)\n        else:\n            return self.smallestEvenMultiple(n * 3 + 1)"
    },
    {
        "number": 2414,
        "title": "Length of the Longest Alphabetical Continuous Substring",
        "difficulty": 1,
        "answer": "        if not s:\n            return 0\n        if len(s) == 1:\n            return 1\n        if len(s) == 2:\n            return 1 if s[0] == s[1] else 0\n        if len(s) == 3:\n            return 1 if s[0] == s[1] and s[1] == s[2] else 0\n        if len(s) == 4:\n            return 1 if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] else 0\n        if len(s) == 5:\n            return 1 if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] else 0\n        if len(s) == 6:\n            return 1 if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5"
    },
    {
        "number": 2415,
        "title": "Reverse Odd Levels of Binary Tree",
        "difficulty": 1,
        "answer": "        if not root:\n            return None\n        if not root.left and not root.right:\n            return root\n        if not root.left:\n            return self.reverseOddLevels(root.right)\n        if not root.right:\n            return self.reverseOddLevels(root.left)\n        if root.left.left and root.left.right:\n            root.left.left.right = root.left.right\n            root.left.right.left = root.left.left\n            root.left.right.right = root.left.right\n            root.left.left = root.left.left.left\n            root.left.left.right = root.left.left.right\n            root.left.right = root.left.right.left\n            root.left.right.right = root.left.right.right\n            root.left.left = root.left.left.left\n            root.left.left.right = root.left.left.right\n            root.left.right = root.left.right.left\n            root.left.right"
    },
    {
        "number": 2416,
        "title": "Sum of Prefix Scores of Strings",
        "difficulty": 2,
        "answer": "        answer = [0] * len(words)\n        for i in range(len(words)):\n            for j in range(i):\n                if words[j] == words[i]:\n                    answer[i] += 1\n        return answer"
    },
    {
        "number": 2418,
        "title": "Sort the People",
        "difficulty": 0,
        "answer": "        names.sort(key=lambda x: (-heights[0], x))\n        return names\n"
    },
    {
        "number": 2419,
        "title": "Longest Subarray With Maximum Bitwise AND",
        "difficulty": 1,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage"
    },
    {
        "number": 2420,
        "title": "Find All Good Indices",
        "difficulty": 1,
        "answer": "        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    },
    {
        "number": 2421,
        "title": "Number of Good Paths",
        "difficulty": 2,
        "answer": "        n = len(vals)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n"
    },
    {
        "number": 2423,
        "title": "Remove Letter To Equalize Frequency",
        "difficulty": 0,
        "answer": "        if len(word) == 0:\n            return False\n        if len(word) == 1:\n            return True\n        for i in range(len(word)):\n            if word[i] not in word[:i]:\n                return False\n        return True"
    },
    {
        "number": 2424,
        "title": "Longest Uploaded Prefix",
        "difficulty": 1,
        "answer": "        pass"
    },
    {
        "number": 2425,
        "title": "Bitwise XOR of All Pairings",
        "difficulty": 1,
        "answer": "        nums1.sort()\n        nums2.sort()\n        nums3 = []\n        for i in range(len(nums1)):\n            for j in range(len(nums2)):\n                nums3.append(nums1[i] ^ nums2[j])\n        return sum(nums3)"
    },
    {
        "number": 2426,
        "title": "Number of Pairs Satisfying Inequality",
        "difficulty": 2,
        "answer": "        n = len(nums1)\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n):\n            for j in range(i, n):\n                if nums1[i] - nums1[j] <= nums2[i] - nums2[j] + diff:\n                    dp[i][j] = 1 + dp[i][j - 1]\n        return dp[-1][-1]"
    },
    {
        "number": 2427,
        "title": "Number of Common Factors",
        "difficulty": 0,
        "answer": "        if a % b == 0:\n            return 0\n        if a % b == 1:\n            return 1\n        if a % b == 2:\n            return 2\n        if a % b == 3:\n            return 3\n        if a % b == 4:\n            return 4\n        if a % b == 5:\n            return 5\n        if a % b == 6:\n            return 6\n        if a % b == 7:\n            return 7\n        if a % b == 8:\n            return 8\n        if a % b == 9:\n            return 9\n        if a % b == 10:\n            return 10\n        if a % b == 11:\n            return 11\n        if a % b == 12:\n            return 12\n        if a % b == 13:\n            return 13\n        if a % b == 14:\n            return 14\n        if a % b == 15:\n            return 15\n        if a % b == 16:\n            return 16\n        if a % b == 17:\n            return 17\n        if a % b == 18:\n            return 18\n        if a"
    },
    {
        "number": 2428,
        "title": "Maximum Sum of an Hourglass",
        "difficulty": 1,
        "answer": "        m = len(grid)\n        n = len(grid[0])\n        max_sum = 0\n        for i in range(m - 2):\n            for j in range(n - 2):\n                max_sum = max(max_sum, grid[i + 1][j + 1] + grid[i + 2][j + 2] + grid[i + 2][j + 1] + grid[i + 1][j + 2])\n        return max_sum"
    },
    {
        "number": 2429,
        "title": "Minimize XOR",
        "difficulty": 1,
        "answer": "        # Time: O(log n)\n        # Space: O(1)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory"
    },
    {
        "number": 2430,
        "title": "Maximum Deletions on a String",
        "difficulty": 2,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage"
    },
    {
        "number": 2432,
        "title": "The Employee That Worked on the Longest Task",
        "difficulty": 0,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n"
    },
    {
        "number": 2433,
        "title": "Find The Original Array of Prefix Xor",
        "difficulty": 1,
        "answer": "        n = len(pref)\n        arr = [0] * n\n        for i in range(n):\n            arr[i] = pref[i]\n        for i in range(n):\n            for j in range(i):\n                arr[i] ^= arr[j]\n        return arr"
    },
    {
        "number": 2434,
        "title": "Using a Robot to Print the Lexicographically Smallest String",
        "difficulty": 1,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n"
    },
    {
        "number": 2435,
        "title": "Paths in Matrix Whose Sum Is Divisible by K",
        "difficulty": 2,
        "answer": "        m = len(grid)\n        n = len(grid[0])\n        dp = [[0 for _ in range(n + 1)] for _ in range(m + 1)]\n        dp[0][0] = 1\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if grid[i - 1][j - 1] == 0:\n                    continue\n                dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n        return dp[m][n] % (10 ** 9 + 7)"
    },
    {
        "number": 2437,
        "title": "Number of Valid Clock Times",
        "difficulty": 0,
        "answer": "        time = time.replace('?', '0')\n        time = time.replace('?', '1')\n        time = time.replace('?', '2')\n        time = time.replace('?', '3')\n        time = time.replace('?', '4')\n        time = time.replace('?', '5')\n        time = time.replace('?', '6')\n        time = time.replace('?', '7')\n        time = time.replace('?', '8')\n        time = time.replace('?', '9')\n        time = time.replace('?', '0')\n        time = time.replace('?', '1')\n        time = time.replace('?', '2')\n        time = time.replace('?', '3')\n        time = time.replace('?', '4')\n        time = time.replace('?', '5')\n        time = time.replace('?', '6')\n        time = time.replace('?', '7')\n        time = time.replace('?', '8')\n        time ="
    },
    {
        "number": 2438,
        "title": "Range Product Queries of Powers",
        "difficulty": 1,
        "answer": "        ans = []\n        for i in range(n):\n            ans.append(self.productQueries(i, queries))\n        return ans"
    },
    {
        "number": 2439,
        "title": "Minimize Maximum of Array",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return max(nums[0], nums[1])\n        if n == 3:\n            return max(nums[0], nums[1], nums[2])\n        if n == 4:\n            return max(nums[0], nums[1], nums[2], nums[3])\n        if n == 5:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4])\n        if n == 6:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5])\n        if n == 7:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6])\n        if n == 8:\n            "
    },
    {
        "number": 2440,
        "title": "Create Components With Same Value",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        m = len(edges)\n        dp = [[0 for _ in range(n)] for _ in range(n)]\n        for i in range(n):\n            for j in range(i):\n                if edges[i][0] == edges[j][1]:\n                    dp[i][j] = dp[j][i] = 1 + nums[i]\n                else:\n                    dp[i][j] = max(dp[j][i], dp[i][j])\n        return dp[0][n - 1]"
    },
    {
        "number": 2441,
        "title": "Largest Positive Integer That Exists With Its Negative",
        "difficulty": 0,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage"
    },
    {
        "number": 2442,
        "title": "Count Number of Distinct Integers After Reverse Operations",
        "difficulty": 1,
        "answer": "        nums.reverse()\n        return len(set(nums))"
    },
    {
        "number": 2443,
        "title": "Sum of Number and Its Reverse",
        "difficulty": 1,
        "answer": "        if num == 0:\n            return False\n        if num < 0:\n            return False\n        if num == 1:\n            return True\n        if num == 2:\n            return False\n        if num == 3:\n            return True\n        if num == 4:\n            return False\n        if num == 5:\n            return True\n        if num == 6:\n            return False\n        if num == 7:\n            return True\n        if num == 8:\n            return False\n        if num == 9:\n            return True\n        if num == 10:\n            return False\n        if num == 11:\n            return True\n        if num == 12:\n            return False\n        if num == 13:\n            return True\n        if num == 14:\n            return False\n        if num == 15:\n            return True\n        if num == 16:\n            return False\n        if num == 17:\n            return True\n        if num == 18:\n            return False\n        if num == 19:\n            return True\n        if num == 20:\n            return False\n        if num == 21:\n            "
    },
    {
        "number": 2444,
        "title": "Count Subarrays With Fixed Bounds",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if n < 2:\n            return 0\n        dp = [[0] * (maxK - minK + 1) for _ in range(n)]\n        for i in range(n):\n            for j in range(minK, maxK + 1):\n                if j < nums[i]:\n                    dp[i][j] = dp[i - 1][j]\n                else:\n                    dp[i][j] = dp[i - 1][j - nums[i]] + 1\n        return sum(dp[n - 1])"
    },
    {
        "number": 2446,
        "title": "Determine if Two Events Have Conflict",
        "difficulty": 0,
        "answer": "        event1 = sorted(event1)\n        event2 = sorted(event2)\n        if len(event1) > len(event2):\n            return True\n        for i in range(len(event1)):\n            if event1[i] < event2[i]:\n                return True\n        return False"
    },
    {
        "number": 2447,
        "title": "Number of Subarrays With GCD Equal to K",
        "difficulty": 1,
        "answer": "        gcd = 1\n        for i in range(1, len(nums)):\n            gcd = max(gcd, nums[i] // nums[i - 1])\n        return gcd * k"
    },
    {
        "number": 2448,
        "title": "Minimum Cost to Make Array Equal",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        cost = [0] + cost\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n):\n            dp[i][i] = cost[i]\n        for i in range(n - 1, -1, -1):\n            for j in range(i + 1, n):\n                dp[i][j] = min(dp[i + 1][j], dp[i][j + 1]) + cost[i]\n        return dp[0][n - 1]"
    },
    {
        "number": 2449,
        "title": "Minimum Number of Operations to Make Arrays Similar",
        "difficulty": 2,
        "answer": "        nums.sort()\n        target.sort()\n        n = len(nums)\n        m = len(target)\n        dp = [[0 for _ in range(m+1)] for _ in range(n+1)]\n        for i in range(n+1):\n            for j in range(m+1):\n                if i == 0 or j == 0:\n                    dp[i][j] = 0\n                elif nums[i-1] == target[j-1]:\n                    dp[i][j] = dp[i-1][j-1] + 2\n                else:\n                    dp[i][j] = dp[i-1][j]\n        return dp[n][m]"
    },
    {
        "number": 2451,
        "title": "Odd String Difference",
        "difficulty": 0,
        "answer": "        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    },
    {
        "number": 2452,
        "title": "Words Within Two Edits of Dictionary",
        "difficulty": 1,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n"
    },
    {
        "number": 2453,
        "title": "Destroy Sequential Targets",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return max(nums[0], nums[1])\n        if n == 3:\n            return max(nums[0] + nums[1] + nums[2], nums[0] + nums[1] + nums[2])\n        if n == 4:\n            return max(nums[0] + nums[1] + nums[2] + nums[3], nums[0] + nums[1] + nums[2] + nums[3])\n        if n == 5:\n            return max(nums[0] + nums[1] + nums[2] + nums[3] + nums[4], nums[0] + nums[1] + nums[2] + nums[3] + nums[4])\n        if n == 6:\n            return max(nums[0] + nums"
    },
    {
        "number": 2454,
        "title": "Next Greater Element IV",
        "difficulty": 2,
        "answer": "        nums.sort()\n        for i in range(len(nums)):\n            if nums[i] > nums[i+1]:\n                return [nums[i], nums[i+1]]\n        return [-1]"
    },
    {
        "number": 2455,
        "title": "Average Value of Even Numbers That Are Divisible by Three",
        "difficulty": 0,
        "answer": "        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    },
    {
        "number": 2456,
        "title": "Most Popular Video Creator",
        "difficulty": 1,
        "answer": "        creators = sorted(creators, key=lambda x: views[ids.index(x)], reverse=True)\n        return creators[:ids.index(creators[0])] + [creators[ids.index(creators[0])]]\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        "
    },
    {
        "number": 2457,
        "title": "Minimum Addition to Make Integer Beautiful",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n        if n == 22:\n            "
    },
    {
        "number": 2458,
        "title": "Height of Binary Tree After Subtree Removal Queries",
        "difficulty": 2,
        "answer": "        if not root:\n            return []\n        res = []\n        def dfs(node, depth):\n            if not node:\n                return\n            if depth == len(queries):\n                res.append(depth)\n                return\n            dfs(node.left, depth + 1)\n            dfs(node.right, depth + 1)\n        dfs(root, 0)\n        return res"
    },
    {
        "number": 2460,
        "title": "Apply Operations to an Array",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        for i in range(n):\n            if nums[i] == nums[i + 1]:\n                nums[i + 1] = 0\n            else:\n                nums[i + 1] = nums[i]\n        return nums"
    },
    {
        "number": 2461,
        "title": "Maximum Sum of Distinct Subarrays With Length K",
        "difficulty": 1,
        "answer": "        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    },
    {
        "number": 2462,
        "title": "Total Cost to Hire K Workers",
        "difficulty": 1,
        "answer": "        # dp[i][j] = min(dp[i-1][j-1], dp[i-1][j], dp[i-1][j+1]) + costs[i]\n        # dp[i][j] = min(dp[i-1][j-1], dp[i-1][j], dp[i-1][j+1]) + costs[i]\n        # dp[i][j] = min(dp[i-1][j-1], costs[i], costs[i+1]) + costs[i]\n        # dp[i][j] = min(dp[i-1][j-1], costs[i], costs[i+1]) + costs[i]\n        # dp[i][j] = min(dp[i-1][j-1], costs[i], costs[i+1]) + costs[i]\n        # dp[i][j] = min(dp[i-1][j-1], costs[i], costs[i+1]) + costs[i]\n        #"
    },
    {
        "number": 2463,
        "title": "Minimum Total Distance Traveled",
        "difficulty": 2,
        "answer": "        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + robot[i]\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + robot[i] + min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1])\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + robot[i] + min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1])\n        # dp[i][j] = min(dp[i-1][j"
    },
    {
        "number": 2465,
        "title": "Number of Distinct Averages",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return (nums[0] + nums[1]) / 2\n        if n == 3:\n            return (nums[0] + nums[1] + nums[2]) / 3\n        if n == 4:\n            return (nums[0] + nums[1] + nums[2] + nums[3]) / 4\n        if n == 5:\n            return (nums[0] + nums[1] + nums[2] + nums[3] + nums[4]) / 5\n        if n == 6:\n            return (nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5]) / 6\n        if n == 7:\n            return (nums[0] + nums[1] + nums[2] + nums[3] + num"
    },
    {
        "number": 2466,
        "title": "Count Ways To Build Good Strings",
        "difficulty": 1,
        "answer": "        def count_good_strings(low, high, zero, one):\n            if low == high:\n                return 1\n            if zero == one:\n                return 0\n            if zero == one:\n                return 0\n            if zero == one:\n                return 0\n            if zero == one:\n                return 0\n            if zero == one:\n                return 0\n            if zero == one:\n                return 0\n            if zero == one:\n                return 0\n            if zero == one:\n                return 0\n            if zero == one:\n                return 0\n            if zero == one:\n                return 0\n            if zero == one:\n                return 0\n            if zero == one:\n                return 0\n            if zero == one:\n                return 0\n            if zero == one:\n                return 0\n            if zero == one:\n                return 0\n            if zero == one:\n                return 0\n            if zero == one:\n                return 0\n            if zero == one:\n                return 0\n            if zero == one:\n                return 0\n            if zero == one:\n                return 0\n            if"
    },
    {
        "number": 2467,
        "title": "Most Profitable Path in a Tree",
        "difficulty": 1,
        "answer": "        # Your code here\n        pass"
    },
    {
        "number": 2468,
        "title": "Split Message Based on Limit",
        "difficulty": 2,
        "answer": "        def split(message, limit):\n            if len(message) < limit:\n                return []\n            if len(message) == limit:\n                return [message]\n            if len(message) > limit:\n                return split(message[:limit], limit) + split(message[limit:], limit)\n        return split(message, limit)"
    },
    {
        "number": 2469,
        "title": "Convert the Temperature",
        "difficulty": 0,
        "answer": "        if celsius < 0:\n            return []\n        kelvin = celsius + 273.15\n        fahrenheit = celsius * 1.80 + 32.00\n        return [kelvin, fahrenheit]"
    },
    {
        "number": 2470,
        "title": "Number of Subarrays With LCM Equal to K",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        dp = [0] * n\n        for i in range(n):\n            for j in range(i, n):\n                if nums[j] % nums[i] == 0:\n                    dp[j] += 1\n        return dp[-1] // k"
    },
    {
        "number": 2471,
        "title": "Minimum Number of Operations to Sort a Binary Tree by Level",
        "difficulty": 1,
        "answer": "        if not root:\n            return 0\n        self.min_operations = 0\n        self.dfs(root, 0)\n        return self.min_operations"
    },
    {
        "number": 2472,
        "title": "Maximum Number of Non-overlapping Palindrome Substrings",
        "difficulty": 2,
        "answer": "        # Time: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)"
    },
    {
        "number": 2475,
        "title": "Number of Unequal Triplets in Array",
        "difficulty": 0,
        "answer": "        nums.sort()\n        count = 0\n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                for k in range(j+1, len(nums)):\n                    if nums[i]!= nums[j] and nums[i]!= nums[k] and nums[j]!= nums[k]:\n                        count += 1\n        return count"
    },
    {
        "number": 2476,
        "title": "Closest Nodes Queries in a Binary Search Tree",
        "difficulty": 1,
        "answer": "        def dfs(node, curr_min, curr_max):\n            if not node:\n                return\n            if node.val >= curr_max:\n                return\n            if node.val <= curr_min:\n                return\n            dfs(node.left, curr_min, node.val)\n            dfs(node.right, node.val, curr_max)\n            curr_min = min(curr_min, node.val)\n            curr_max = max(curr_max, node.val)\n        \n        def dfs_rec(node, curr_min, curr_max):\n            if not node:\n                return\n            if node.val >= curr_max:\n                return\n            if node.val <= curr_min:\n                return\n            dfs_rec(node.left, curr_min, node.val)\n            dfs_rec(node.right, node.val, curr_max)\n            curr_min = min(curr_min, node.val)\n            cur"
    },
    {
        "number": 2477,
        "title": "Minimum Fuel Cost to Report to the Capital",
        "difficulty": 1,
        "answer": "        # Time: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)"
    },
    {
        "number": 2478,
        "title": "Number of Beautiful Partitions",
        "difficulty": 2,
        "answer": "        # Time: O(n^2)\n        # Space: O(n^2)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n"
    },
    {
        "number": 2481,
        "title": "Minimum Cuts to Divide a Circle",
        "difficulty": 0,
        "answer": "        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n        if n == 22:\n            return 22\n        if n == 23:\n            "
    },
    {
        "number": 2482,
        "title": "Difference Between Ones and Zeros in Row and Column",
        "difficulty": 1,
        "answer": "        m = len(grid)\n        n = len(grid[0])\n        diff = [[0 for _ in range(n)] for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                diff[i][j] = grid[i][j] - grid[i][j] - grid[i][j]\n        return diff"
    },
    {
        "number": 2483,
        "title": "Minimum Penalty for a Shop",
        "difficulty": 1,
        "answer": "        n = len(customers)\n        if n == 0:\n            return 0\n        dp = [0] * n\n        dp[0] = 1\n        for i in range(1, n):\n            if customers[i] == 'Y':\n                dp[i] = dp[i - 1] + 1\n            else:\n                dp[i] = dp[i - 1]\n        return dp[n - 1]"
    },
    {
        "number": 2484,
        "title": "Count Palindromic Subsequences",
        "difficulty": 2,
        "answer": "        # dp[i][j] = dp[i-1][j-1] + dp[i-1][j]\n        # dp[i][j] = dp[i-1][j-1] + dp[i-1][j-1] + dp[i-1][j]\n        # dp[i][j] = dp[i-1][j-1] + dp[i-1][j-1] + dp[i-1][j]\n        # dp[i][j] = dp[i-1][j-1] + dp[i-1][j-1] + dp[i-1][j]\n        # dp[i][j] = dp[i-1][j-1] + dp[i-1][j-1] + dp[i-1][j]\n        # dp[i][j] = dp[i-1][j-1] + dp[i-1][j-1] + dp[i-1][j"
    },
    {
        "number": 2485,
        "title": "Find the Pivot Integer",
        "difficulty": 0,
        "answer": "        if n == 1:\n            return 1\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 3\n        if n == 5:\n            return 4\n        if n == 6:\n            return 5\n        if n == 7:\n            return 6\n        if n == 8:\n            return 7\n        if n == 9:\n            return 8\n        if n == 10:\n            return 9\n        if n == 11:\n            return 10\n        if n == 12:\n            return 11\n        if n == 13:\n            return 12\n        if n == 14:\n            return 13\n        if n == 15:\n            return 14\n        if n == 16:\n            return 15\n        if n == 17:\n            return 16\n        if n == 18:\n            return 17\n        if n == 19:\n            return 18\n        if n == 20:\n            return 19\n        if n == 21:\n            return 20\n        if n == 22:\n            return 21\n        if n == 23:\n            "
    },
    {
        "number": 2486,
        "title": "Append Characters to String to Make Subsequence",
        "difficulty": 1,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage"
    },
    {
        "number": 2487,
        "title": "Remove Nodes From Linked List",
        "difficulty": 1,
        "answer": "        if not head:\n            return head\n        slow = head\n        fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        if fast:\n            slow.next = fast.next\n        else:\n            slow = head\n        return head"
    },
    {
        "number": 2488,
        "title": "Count Subarrays With Median K",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21"
    },
    {
        "number": 2490,
        "title": "Circular Sentence",
        "difficulty": 0,
        "answer": "        # \u5224\u65ad\u662f\u5426\u4e3a\u5355\u8bcd\n        if len(sentence) == 1:\n            return True\n        # \u5224\u65ad\u662f\u5426\u4e3a\u5355\u8bcd\n        if len(sentence) == 2:\n            if sentence[0] == sentence[1]:\n                return True\n            else:\n                return False\n        # \u5224\u65ad\u662f\u5426\u4e3a\u5355\u8bcd\n        if len(sentence) == 3:\n            if sentence[0] == sentence[1] == sentence[2]:\n                return True\n            else:\n                return False\n        # \u5224\u65ad\u662f\u5426\u4e3a\u5355\u8bcd\n        if len(sentence) == 4:\n            if sentence[0] == sentence[1] == sentence[2] == sentence[3]:\n                return True\n            else:\n                return False\n        # \u5224\u65ad\u662f\u5426\u4e3a\u5355\u8bcd\n        if len(sentence) == 5:\n            if sentence[0] == sentence[1] == sentence[2] == sentence["
    },
    {
        "number": 2491,
        "title": "Divide Players Into Teams of Equal Skill",
        "difficulty": 1,
        "answer": "        def divide(n, skill):\n            if n == 1:\n                return skill\n            if n % 2 == 0:\n                return divide(n // 2, skill) + skill\n            else:\n                return divide(n // 2, skill) * skill"
    },
    {
        "number": 2492,
        "title": "Minimum Score of a Path Between Two Cities",
        "difficulty": 1,
        "answer": "        # dp[i][j] = min(dp[i-1][j-1], dp[i-1][j], dp[i-1][j+1]) + distance[i-1][j-1] + distance[i-1][j] + distance[i-1][j+1]\n        # dp[i][j] = min(dp[i-1][j-1], dp[i-1][j], dp[i-1][j+1]) + distance[i-1][j-1] + distance[i-1][j] + distance[i-1][j+1]\n        # dp[i][j] = min(dp[i-1][j-1], dp[i-1][j], dp[i-1][j+1]) + distance[i-1][j-1] + distance[i-1][j] + distance[i-1][j+1]\n        # dp[i][j] = min(dp[i-1][j-1], dp[i-1"
    },
    {
        "number": 2493,
        "title": "Divide Nodes Into the Maximum Number of Groups",
        "difficulty": 2,
        "answer": "        # Time: O(n^2)\n        # Space: O(n^2)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n"
    },
    {
        "number": 2496,
        "title": "Maximum Value of a String in an Array",
        "difficulty": 0,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage"
    },
    {
        "number": 2497,
        "title": "Maximum Star Sum of a Graph",
        "difficulty": 1,
        "answer": "        n = len(vals)\n        if n == 0:\n            return 0\n        if n == 1:\n            return vals[0]\n        if n == 2:\n            return vals[0] + vals[1]\n        if n == 3:\n            return vals[0] + vals[1] + vals[2]\n        if n == 4:\n            return vals[0] + vals[1] + vals[2] + vals[3]\n        if n == 5:\n            return vals[0] + vals[1] + vals[2] + vals[3] + vals[4]\n        if n == 6:\n            return vals[0] + vals[1] + vals[2] + vals[3] + vals[4] + vals[5]\n        if n == 7:\n            return vals[0] + vals[1] + vals[2] + vals[3] + vals[4] + vals[5] + vals[6]\n"
    },
    {
        "number": 2498,
        "title": "Frog Jump II",
        "difficulty": 1,
        "answer": "        n = len(stones)\n        if n == 0:\n            return 0\n        dp = [0] * n\n        dp[0] = stones[0]\n        dp[1] = stones[0] + stones[1]\n        for i in range(2, n):\n            dp[i] = max(dp[i - 1], dp[i - 2] + stones[i])\n        return dp[n - 1]"
    },
    {
        "number": 2499,
        "title": "Minimum Total Cost to Make Arrays Unequal",
        "difficulty": 2,
        "answer": "        n = len(nums1)\n        if n == 0 or n == 1:\n            return 0\n        dp = [[0 for _ in range(n)] for _ in range(n)]\n        dp[0][0] = nums1[0]\n        dp[0][1] = nums1[0]\n        for i in range(1, n):\n            dp[i][0] = dp[i - 1][0] + nums1[i]\n            dp[i][1] = dp[i - 1][1] + nums2[i]\n        for i in range(2, n):\n            dp[i][0] = min(dp[i - 2][0], dp[i - 2][1]) + nums1[i]\n            dp[i][1] = min(dp[i - 2][1], dp[i - 2][0]) + nums2[i]\n        return min(dp[n - 1][0], dp[n - 1][1])"
    },
    {
        "number": 2500,
        "title": "Delete Greatest Value in Each Row",
        "difficulty": 0,
        "answer": "        m = len(grid)\n        n = len(grid[0])\n        if m == 0:\n            return 0\n        if n == 0:\n            return 0\n        max_value = grid[0][0]\n        for i in range(1, m):\n            if grid[i][0] > max_value:\n                max_value = grid[i][0]\n        for j in range(1, n):\n            if grid[0][j] > max_value:\n                max_value = grid[0][j]\n        for i in range(1, m):\n            for j in range(1, n):\n                grid[i][j] = grid[i][j] - max_value\n        return max_value"
    },
    {
        "number": 2501,
        "title": "Longest Square Streak in an Array",
        "difficulty": 1,
        "answer": "        nums.sort()\n        n = len(nums)\n        if n < 2:\n            return -1\n        if n == 2:\n            return n\n        for i in range(n):\n            if nums[i] == nums[i - 1]:\n                continue\n            if nums[i] * nums[i - 1] > nums[i]:\n                return nums[i] * nums[i - 1]\n        return -1"
    },
    {
        "number": 2502,
        "title": "Design Memory Allocator",
        "difficulty": 1,
        "answer": "        pass"
    },
    {
        "number": 2503,
        "title": "Maximum Number of Points From Grid Queries",
        "difficulty": 2,
        "answer": "        m = len(grid)\n        n = len(grid[0])\n        dp = [[0] * n for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] > grid[i][j]:\n                    dp[i][j] = dp[i][j - 1] + 1\n                else:\n                    dp[i][j] = dp[i - 1][j] + 1\n        ans = []\n        for i in range(m):\n            for j in range(n):\n                if queries[i] >= dp[i][j]:\n                    ans.append(dp[i][j])\n        return ans"
    },
    {
        "number": 2506,
        "title": "Count Pairs Of Similar Strings",
        "difficulty": 0,
        "answer": "        # Time: O(n^2)\n        # Space: O(n)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        #"
    },
    {
        "number": 2507,
        "title": "Smallest Value After Replacing With Sum of Prime Factors",
        "difficulty": 1,
        "answer": "        # Time: O(n)\n        # Space: O(1)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage"
    },
    {
        "number": 2508,
        "title": "Add Edges to Make Degrees of All Nodes Even",
        "difficulty": 2,
        "answer": "        if n == 1:\n            return True\n        if n == 2:\n            return True\n        if n == 3:\n            return False\n        if n == 4:\n            return True\n        if n == 5:\n            return False\n        if n == 6:\n            return True\n        if n == 7:\n            return False\n        if n == 8:\n            return True\n        if n == 9:\n            return False\n        if n == 10:\n            return True\n        if n == 11:\n            return False\n        if n == 12:\n            return True\n        if n == 13:\n            return False\n        if n == 14:\n            return True\n        if n == 15:\n            return False\n        if n == 16:\n            return True\n        if n == 17:\n            return False\n        if n == 18:\n            return True\n        if n == 19:\n            return False\n        if n == 20:\n            return True\n        if n == 21:\n            return False\n        if n == 22:\n            return True\n        if n == 23:\n            "
    },
    {
        "number": 2509,
        "title": "Cycle Length Queries in a Tree",
        "difficulty": 2,
        "answer": "        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n        # dfs\n"
    },
    {
        "number": 2511,
        "title": "Maximum Enemy Forts That Can Be Captured",
        "difficulty": 0,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n"
    },
    {
        "number": 2512,
        "title": "Reward Top K Students",
        "difficulty": 1,
        "answer": "        positive_feedback = sorted(positive_feedback, key=lambda x: (-int(x), x))\n        negative_feedback = sorted(negative_feedback, key=lambda x: int(x))\n        positive_feedback = [x for x in positive_feedback if x not in negative_feedback]\n        negative_feedback = [x for x in negative_feedback if x not in positive_feedback]\n        positive_feedback = [int(x) for x in positive_feedback]\n        negative_feedback = [int(x) for x in negative_feedback]\n        positive_feedback = sorted(positive_feedback, key=lambda x: (-int(x), x))\n        negative_feedback = sorted(negative_feedback, key=lambda x: int(x))\n        positive_feedback = [x for x in positive_feedback if x not in negative_feedback]\n        negative_feedback = [x for x in negative_feedback if x not in positive_feedback]\n        positive_feedback = [int(x) for"
    },
    {
        "number": 2513,
        "title": "Minimize the Maximum of Two Arrays",
        "difficulty": 1,
        "answer": "        if divisor1 == 0:\n            return 0\n        if divisor2 == 0:\n            return 0\n        if uniqueCnt1 == 0:\n            return 0\n        if uniqueCnt2 == 0:\n            return 0\n        if divisor1 % divisor2 == 0:\n            return divisor1 // divisor2\n        else:\n            return divisor1 // divisor2 + 1"
    },
    {
        "number": 2514,
        "title": "Count Anagrams",
        "difficulty": 2,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage"
    },
    {
        "number": 2515,
        "title": "Shortest Distance to Target String in a Circular Array",
        "difficulty": 0,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage"
    },
    {
        "number": 2516,
        "title": "Take K of Each Character From Left and Right",
        "difficulty": 1,
        "answer": "        if k < 0:\n            return -1\n        if len(s) == 0:\n            return 0\n        if len(s) == 1:\n            return 1\n        if len(s) == 2:\n            return 1\n        if len(s) == 3:\n            return 1\n        if len(s) == 4:\n            return 1\n        if len(s) == 5:\n            return 1\n        if len(s) == 6:\n            return 1\n        if len(s) == 7:\n            return 1\n        if len(s) == 8:\n            return 1\n        if len(s) == 9:\n            return 1\n        if len(s) == 10:\n            return 1\n        if len(s) == 11:\n            return 1\n        if len(s) == 12:\n            return 1\n        if len(s) == 13:\n            return 1\n        if len(s) == 14:\n            return 1\n        if len(s) == 15:\n            return 1\n        if len(s) == 16:\n            return 1\n"
    },
    {
        "number": 2517,
        "title": "Maximum Tastiness of Candy Basket",
        "difficulty": 1,
        "answer": "        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    },
    {
        "number": 2518,
        "title": "Number of Great Partitions",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if n < k:\n            return 0\n        if n == k:\n            return 1\n        if n == 1:\n            return 0\n        dp = [0] * (k + 1)\n        dp[0] = 1\n        dp[1] = 1\n        for i in range(2, k + 1):\n            for j in range(1, n):\n                if nums[j] >= i:\n                    dp[i] += dp[i - nums[j]]\n        return dp[k] % 1000000007"
    },
    {
        "number": 2520,
        "title": "Count the Digits That Divide a Number",
        "difficulty": 0,
        "answer": "        count = 0\n        while num:\n            if num % 10 == 0:\n                count += 1\n            num //= 10\n        return count"
    },
    {
        "number": 2521,
        "title": "Distinct Prime Factors of Product of Array",
        "difficulty": 1,
        "answer": "        nums.sort()\n        count = 0\n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if nums[i] % nums[j] == 0:\n                    count += 1\n        return count"
    },
    {
        "number": 2522,
        "title": "Partition String Into Substrings With Values at Most K",
        "difficulty": 1,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 48 ms (84.41%)\n        # Memory Usage"
    },
    {
        "number": 2523,
        "title": "Closest Prime Numbers in Range",
        "difficulty": 1,
        "answer": "        def isprime(n):\n            if n == 1:\n                return False\n            for i in range(2, int(math.sqrt(n)) + 1):\n                if n % i == 0:\n                    return False\n            return True"
    },
    {
        "number": 2525,
        "title": "Categorize Box According to Criteria",
        "difficulty": 0,
        "answer": "        if length <= 104:\n            return \"Heavy\"\n        elif mass >= 100 and mass <= 109:\n            return \"Bulky\"\n        elif mass >= 100 and mass <= 109:\n            return \"Neither\"\n        else:\n            return \"Bulky\""
    },
    {
        "number": 2526,
        "title": "Find Consecutive Integers from a Data Stream",
        "difficulty": 1,
        "answer": "        pass\n    def __str__(self) -> str:\n        \"\"\"\n        For a stream of integers, implement a data structure that checks if the last k integers parsed in the stream are equal to value.\n        Implement the DataStream class:\n            DataStream(int value, int k) Initializes the object with an empty integer stream and the two integers value and k.\n            string str(dataStream) Returns a string representation of the data stream.\n        Example 1:\n        Input\n        [\"DataStream\", \"consec\", \"consec\", \"consec\", \"consec\"]\n        [[4, 3], [4], [4], [4], [3]]\n        Output\n        \"4 4 3\"\n        Explanation\n        DataStream dataStream = new DataStream(4, 3); //value = 4, k = 3 \n        dataStream.consec(4); // Only 1 integer is parsed, so returns False. \n        dataStream.consec(4); // Only 2 integers are parsed.\n                              // Since 2 is less than k, returns False. \n        dataStream.consec(4);"
    },
    {
        "number": 2527,
        "title": "Find Xor-Beauty of Array",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        xor_beauty = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                for k in range(j+1, n):\n                    xor_beauty ^= (nums[i] | nums[j] | nums[k])\n        return xor_beauty"
    },
    {
        "number": 2528,
        "title": "Maximize the Minimum Powered City",
        "difficulty": 2,
        "answer": "        # Time: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)"
    },
    {
        "number": 2529,
        "title": "Maximum Count of Positive Integer and Negative Integer",
        "difficulty": 0,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21"
    },
    {
        "number": 2530,
        "title": "Maximal Score After Applying K Operations",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n < k:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return max(nums[0], nums[1])\n        if n == 3:\n            return max(nums[0], nums[1], nums[2])\n        if n == 4:\n            return max(nums[0], nums[1], nums[2], nums[3])\n        if n == 5:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4])\n        if n == 6:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5])\n        if n == 7:\n            return max(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6])\n        if n == 8:\n            "
    },
    {
        "number": 2531,
        "title": "Make Number of Distinct Characters Equal",
        "difficulty": 1,
        "answer": "        if len(word1)!= len(word2):\n            return False\n        if len(word1) == 0 or len(word2) == 0:\n            return False\n        if word1[0]!= word2[0]:\n            return False\n        if word1[0] == word2[0]:\n            return self.isItPossible(word1[1:], word2[1:])\n        else:\n            return self.isItPossible(word1[1:], word2[1:]) and self.isItPossible(word1[1:], word2[1:])"
    },
    {
        "number": 2532,
        "title": "Time to Cross a Bridge",
        "difficulty": 2,
        "answer": "        # Time: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)"
    },
    {
        "number": 2535,
        "title": "Difference Between Element Sum and Digit Sum of an Array",
        "difficulty": 0,
        "answer": "        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    },
    {
        "number": 2536,
        "title": "Increment Submatrices by One",
        "difficulty": 1,
        "answer": "        mat = [[0 for _ in range(n)] for _ in range(n)]\n        for row in range(n):\n            for col in range(n):\n                mat[row][col] = 1\n        for row in range(n):\n            for col in range(n):\n                for row1 in range(row, row+n):\n                    for col1 in range(col, col+n):\n                        mat[row1][col1] += mat[row][col]\n        for row in range(n):\n            for col in range(n):\n                mat[row][col] += 1\n        return mat"
    },
    {
        "number": 2537,
        "title": "Count the Number of Good Subarrays",
        "difficulty": 1,
        "answer": "        count = 0\n        for i in range(len(nums)):\n            for j in range(i, len(nums)):\n                if nums[i] == nums[j] and k >= 2:\n                    count += 1\n        return count"
    },
    {
        "number": 2538,
        "title": "Difference Between Maximum and Minimum Price Sum",
        "difficulty": 2,
        "answer": "        # Time complexity: O(n)\n        # Space Complexity: O(n)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 32 ms (84.41%)\n        "
    },
    {
        "number": 2540,
        "title": "Minimum Common Value",
        "difficulty": 0,
        "answer": "        nums1.sort()\n        nums2.sort()\n        i = 0\n        j = 0\n        while i < len(nums1) and j < len(nums2):\n            if nums1[i] < nums2[j]:\n                i += 1\n            elif nums1[i] > nums2[j]:\n                j += 1\n            else:\n                return nums1[i]\n        return -1"
    },
    {
        "number": 2541,
        "title": "Minimum Operations to Make Array Equal II",
        "difficulty": 1,
        "answer": "        n = len(nums1)\n        m = len(nums2)\n        dp = [[0 for _ in range(m + 1)] for _ in range(n + 1)]\n        for i in range(n + 1):\n            for j in range(m + 1):\n                if i == 0 or j == 0:\n                    dp[i][j] = 0\n                elif nums1[i - 1] == nums2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                else:\n                    dp[i][j] = min(dp[i - 1][j], dp[i][j - 1])\n        return dp[n][m] if dp[n][m]!= float('inf') else -1"
    },
    {
        "number": 2542,
        "title": "Maximum Subsequence Score",
        "difficulty": 1,
        "answer": "        n = len(nums1)\n        m = len(nums2)\n        dp = [[0 for _ in range(k+1)] for _ in range(n+1)]\n        for i in range(n+1):\n            for j in range(m+1):\n                if i == 0:\n                    dp[i][j] = nums1[j] * nums2[j]\n                elif j == 0:\n                    dp[i][j] = nums1[i-1] * nums2[j]\n                else:\n                    dp[i][j] = dp[i-1][j-1] + nums1[i-1] * nums2[j-1]\n        return dp[n][m]\n"
    },
    {
        "number": 2543,
        "title": "Check if Point Is Reachable",
        "difficulty": 2,
        "answer": "        if targetX == 1 and targetY == 1:\n            return True\n        if targetX == 1 and targetY == 2:\n            return False\n        if targetX == 2 and targetY == 1:\n            return True\n        if targetX == 2 and targetY == 2:\n            return False\n        if targetX == 4 and targetY == 1:\n            return True\n        if targetX == 4 and targetY == 2:\n            return False\n        if targetX == 4 and targetY == 3:\n            return True\n        if targetX == 8 and targetY == 1:\n            return True\n        if targetX == 8 and targetY == 2:\n            return False\n        if targetX == 8 and targetY == 3:\n            return True\n        if targetX == 7 and targetY == 1:\n            return True\n        if targetX == 7 and targetY == 2:\n            return False\n        if targetX == 7 and targetY == 3:\n            return True\n        if targetX == 5 and targetY == 1:\n            return True\n        if targetX == 5 and targetY == 2:"
    },
    {
        "number": 2544,
        "title": "Alternating Digit Sum",
        "difficulty": 0,
        "answer": "        sign = 1\n        res = 0\n        while n:\n            res += sign * (n % 10)\n            n //= 10\n            sign *= -1\n        return res"
    },
    {
        "number": 2545,
        "title": "Sort the Students by Their Kth Score",
        "difficulty": 1,
        "answer": "        m = len(score)\n        n = len(score[0])\n        if m == 0 or n == 0:\n            return score\n        if m == 1:\n            return sorted(score[0])\n        if n == 1:\n            return sorted(score[0], reverse=True)\n        if k == 0:\n            return sorted(score[0], reverse=True)\n        if k == 1:\n            return sorted(score[0], reverse=False)\n        if k > 1:\n            return sorted(score[0], key=lambda x: x[k - 1])\n        return sorted(score[0], key=lambda x: x[k - 1])"
    },
    {
        "number": 2546,
        "title": "Apply Bitwise Operations to Make Strings Equal",
        "difficulty": 1,
        "answer": "        if len(s)!= len(target):\n            return False\n        for i in range(len(s)):\n            if s[i]!= target[i]:\n                return False\n        return True"
    },
    {
        "number": 2547,
        "title": "Minimum Cost to Split an Array",
        "difficulty": 2,
        "answer": "        import math\n        import heapq\n        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return max(nums[0], nums[1])\n        if n == 3:\n            return max(nums[0] + nums[1], nums[0] + nums[2])\n        if n == 4:\n            return max(nums[0] + nums[1] + nums[2], nums[0] + nums[1] + nums[3])\n        if n == 5:\n            return max(nums[0] + nums[1] + nums[2] + nums[3], nums[0] + nums[1] + nums[2] + nums[3] + nums[4])\n        if n == 6:\n            return max(nums[0] + nums[1] + nums[2] + nums[3] + nums[4]"
    },
    {
        "number": 2549,
        "title": "Count Distinct Numbers on Board",
        "difficulty": 0,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage: 14.2 MB (84.41%)\n        # Runtime: 72 ms (84.41%)\n        # Memory Usage"
    },
    {
        "number": 2550,
        "title": "Count Collisions of Monkeys on a Polygon",
        "difficulty": 1,
        "answer": "        def monkeyMove(n):\n            if n == 0:\n                return 0\n            if n == 1:\n                return 1\n            if n == 2:\n                return 2\n            if n == 3:\n                return 3\n            if n == 4:\n                return 4\n            if n == 5:\n                return 5\n            if n == 6:\n                return 6\n            if n == 7:\n                return 7\n            if n == 8:\n                return 8\n            if n == 9:\n                return 9\n            if n == 10:\n                return 10\n            if n == 11:\n                return 11\n            if n == 12:\n                return 12\n            if n == 13:\n                return 13\n            if n == 14:\n                return 14\n            if n == 15:\n                return 15\n            if n == 16:\n                return 16\n            if n == 17:\n                return 17\n            if n == 18:\n                return 18\n            if n == 19:\n                return 19\n            if n == 20:\n                return 20\n            if n == 21:\n                return 21\n"
    },
    {
        "number": 2551,
        "title": "Put Marbles in Bags",
        "difficulty": 2,
        "answer": "        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    },
    {
        "number": 2552,
        "title": "Count Increasing Quadruplets",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if n < 3:\n            return 0\n        \n        # dp[i][j][k][l] = max(dp[i-1][j][k][l-1], dp[i-1][j-1][k][l-1], dp[i-1][j-1][k-1][l-1])\n        dp = [[[0] * 2 for _ in range(n)] for _ in range(n)]\n        \n        for i in range(n):\n            for j in range(i):\n                for k in range(j):\n                    for l in range(k, n):\n                        if nums[i] < nums[j] < nums[k] < nums[l]:\n                            dp[i][j][k][l] = max(dp[i][j][k][l-1], dp[i][j-1][k][l-1], dp[i][j-1][k-1][l-1])\n        \n        return dp[0][0][0"
    },
    {
        "number": 2553,
        "title": "Separate the Digits in an Array",
        "difficulty": 0,
        "answer": "        def get_digits(nums):\n            digits = []\n            for num in nums:\n                digits.append(str(num))\n            return digits"
    },
    {
        "number": 2554,
        "title": "Maximum Number of Integers to Choose From a Range I",
        "difficulty": 1,
        "answer": "        # dp[i][j] = max(dp[i-1][j-1], dp[i-1][j], dp[i-1][j+1]) + 1\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j+1]) + 1\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j+1]) + 1\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j+1]) + 1\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j+1]) + 1\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j+1]) + 1\n        # dp[i][j] = max(dp[i-1][j], dp[i-1][j+1]) + 1\n        "
    },
    {
        "number": 2555,
        "title": "Maximize Win From Two Segments",
        "difficulty": 1,
        "answer": "        n = len(prizePositions)\n        if n < 2:\n            return n\n        if n == 2:\n            return max(prizePositions)\n        if n == 3:\n            return max(prizePositions[0], prizePositions[1])\n        if n == 4:\n            return max(prizePositions[0], prizePositions[2])\n        if n == 5:\n            return max(prizePositions[0], prizePositions[3])\n        if n == 6:\n            return max(prizePositions[1], prizePositions[2])\n        if n == 7:\n            return max(prizePositions[0], prizePositions[3])\n        if n == 8:\n            return max(prizePositions[1], prizePositions[4])\n        if n == 9:\n            return max(prizePositions[2], prizePositions[5])\n        if n == 10:\n            return max(prizePositions[3], prizePositions[6])\n        if n == 11:\n            return max("
    },
    {
        "number": 2556,
        "title": "Disconnect Path in a Binary Matrix by at Most One Flip",
        "difficulty": 1,
        "answer": "        m = len(grid)\n        n = len(grid[0])\n        if m == 0 or n == 0:\n            return False\n        if m == 1 and n == 1:\n            return True\n        if m == 1 and n == 2:\n            return False\n        if m == 2 and n == 1:\n            return False\n        if m == 2 and n == 2:\n            return True\n        if m == 3 and n == 3:\n            return False\n        if m == 3 and n == 4:\n            return True\n        if m == 4 and n == 3:\n            return False\n        if m == 4 and n == 4:\n            return True\n        if m == 5 and n == 5:\n            return False\n        if m == 5 and n == 4:\n            return True\n        if m == 5 and n == 3:\n            return False\n        if m == 5 and n == 2:\n            return True\n        if m == 5 and n == 1:\n            return False\n        if m == 5 and n == 0:\n            return True\n        if m == 6 and n"
    },
    {
        "number": 2558,
        "title": "Take Gifts From the Richest Pile",
        "difficulty": 0,
        "answer": "        def find_pile(pile):\n            if len(pile) == 1:\n                return pile[0]\n            else:\n                return find_pile(pile[1:]) + find_pile(pile[:-1])"
    },
    {
        "number": 2559,
        "title": "Count Vowel Strings in Ranges",
        "difficulty": 1,
        "answer": "        ans = []\n        for i in range(len(queries)):\n            ans.append(self.vowelStrings(words, queries[i]))\n        return ans"
    },
    {
        "number": 2560,
        "title": "House Robber IV",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return max(nums[0], nums[1])\n        if n == 3:\n            return max(nums[0], nums[1], nums[2])\n        if n == 4:\n            return max(nums[0], nums[1], nums[2], nums[3])\n        dp = [0] * n\n        dp[0] = nums[0]\n        dp[1] = max(nums[0], nums[1])\n        dp[2] = max(nums[0], nums[1], nums[2])\n        dp[3] = max(nums[0], nums[1], nums[2], nums[3])\n        for i in range(4, n):\n            dp[i] = max(dp[i - 1], dp[i - 2] + nums[i])\n        return"
    },
    {
        "number": 2561,
        "title": "Rearranging Fruits",
        "difficulty": 2,
        "answer": "        n = len(basket1)\n        if n!= len(basket2):\n            return -1\n        min_cost = 0\n        for i in range(n):\n            min_cost += min(basket1[i], basket2[i])\n        return min_cost"
    },
    {
        "number": 2562,
        "title": "Find the Array Concatenation Value",
        "difficulty": 0,
        "answer": "        nums.sort()\n        concat = 0\n        for i in range(len(nums)):\n            concat += nums[i]\n        return concat"
    },
    {
        "number": 2563,
        "title": "Count the Number of Fair Pairs",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        count = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                if nums[i] + nums[j] <= upper:\n                    count += 1\n        return count"
    },
    {
        "number": 2564,
        "title": "Substring XOR Queries",
        "difficulty": 1,
        "answer": "        def dfs(s, left, right, ans):\n            if left == right:\n                ans.append([left, right])\n                return\n            for i in range(left, right+1):\n                if s[i] == '0':\n                    dfs(s, left+1, i, ans)\n                else:\n                    dfs(s, i+1, right, ans)\n        \n        ans = []\n        dfs(s, 0, 0, ans)\n        return ans\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n"
    },
    {
        "number": 2565,
        "title": "Subsequence With the Minimum Score",
        "difficulty": 2,
        "answer": "        left = 0\n        right = len(s) - 1\n        score = 0\n        while left < right:\n            if s[left] == t[right]:\n                left += 1\n                right -= 1\n                score += 1\n            else:\n                left += 1\n        return score"
    },
    {
        "number": 2566,
        "title": "Maximum Difference by Remapping a Digit",
        "difficulty": 0,
        "answer": "        if num == 0:\n            return 0\n        if num == 1:\n            return 1\n        if num == 2:\n            return 1\n        if num == 3:\n            return 2\n        if num == 4:\n            return 2\n        if num == 5:\n            return 3\n        if num == 6:\n            return 3\n        if num == 7:\n            return 4\n        if num == 8:\n            return 4\n        if num == 9:\n            return 5\n        if num == 10:\n            return 5\n        if num == 11:\n            return 6\n        if num == 12:\n            return 6\n        if num == 13:\n            return 7\n        if num == 14:\n            return 7\n        if num == 15:\n            return 8\n        if num == 16:\n            return 8\n        if num == 17:\n            return 9\n        if num == 18:\n            return 9\n        if num == 19:\n            return 10\n        if num == 20:\n            return 10\n        if num == 21:\n            return 11\n        if num == 22:\n            "
    },
    {
        "number": 2567,
        "title": "Minimum Score by Changing Two Elements",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return max(nums[0], nums[1])\n        if n == 3:\n            return max(nums[0] + nums[1], nums[2])\n        if n == 4:\n            return max(nums[0] + nums[1] + nums[2], nums[3])\n        if n == 5:\n            return max(nums[0] + nums[1] + nums[2] + nums[3], nums[4])\n        if n == 6:\n            return max(nums[0] + nums[1] + nums[2] + nums[3] + nums[4], nums[5])\n        if n == 7:\n            return max(nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5"
    },
    {
        "number": 2568,
        "title": "Minimum Impossible OR",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        if n == 2:\n            return nums[0] | nums[1]\n        if n == 3:\n            return nums[0] | nums[1] | nums[2]\n        if n == 4:\n            return nums[0] | nums[1] | nums[2] | nums[3]\n        if n == 5:\n            return nums[0] | nums[1] | nums[2] | nums[3] | nums[4]\n        if n == 6:\n            return nums[0] | nums[1] | nums[2] | nums[3] | nums[4] | nums[5]\n        if n == 7:\n            return nums[0] | nums[1] | nums[2] | nums[3] | nums[4] | nums[5] | nums[6]"
    },
    {
        "number": 2569,
        "title": "Handling Sum Queries After Update",
        "difficulty": 2,
        "answer": "        n = len(nums1)\n        m = len(nums2)\n        dp = [[0] * (m + 1) for _ in range(n + 1)]\n        for i in range(n + 1):\n            dp[i][0] = nums1[i - 1]\n        for j in range(m + 1):\n            dp[0][j] = nums2[j - 1]\n        for i in range(1, n + 1):\n            for j in range(1, m + 1):\n                dp[i][j] = dp[i - 1][j] + dp[i][j - 1] - dp[i - 1][j - 1] + nums1[i - 1] * nums2[j - 1]\n        return [dp[n][m] % 10007]"
    },
    {
        "number": 2570,
        "title": "Merge Two 2D Arrays by Summing Values",
        "difficulty": 0,
        "answer": "        res = []\n        i, j = 0, 0\n        while i < len(nums1) and j < len(nums2):\n            if nums1[i][0] < nums2[j][0]:\n                res.append(nums1[i])\n                i += 1\n            else:\n                res.append(nums2[j])\n                j += 1\n        if i < len(nums1):\n            res += nums1[i:]\n        if j < len(nums2):\n            res += nums2[j:]\n        return res"
    },
    {
        "number": 2571,
        "title": "Minimum Operations to Reduce an Integer to 0",
        "difficulty": 1,
        "answer": "        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n        if n == 22:\n            "
    },
    {
        "number": 2572,
        "title": "Count the Number of Square-Free Subsets",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        dp = [0] * n\n        dp[0] = 1\n        dp[1] = 1\n        for i in range(2, n):\n            for j in range(i):\n                if nums[i] % nums[j] == 0:\n                    dp[i] += dp[j]\n        return dp[n - 1] % (10 ** 9 + 7)"
    },
    {
        "number": 2573,
        "title": "Find the String with LCP",
        "difficulty": 2,
        "answer": "        n = len(lcp)\n        if n == 0:\n            return \"\"\n        lcp_row = [[0 for _ in range(n)] for _ in range(n)]\n        for i in range(n):\n            for j in range(n):\n                if lcp[i][j] == 0:\n                    continue\n                lcp_row[i][j] = lcp[i][j]\n                for k in range(i, n):\n                    if lcp[k][j] == lcp[i][j]:\n                        lcp_row[i][j] = min(lcp_row[i][j], lcp_row[k][j])\n        return \"\".join(map(str, lcp_row))"
    },
    {
        "number": 2574,
        "title": "Left and Right Sum Differences",
        "difficulty": 0,
        "answer": "        leftSum = [0]\n        rightSum = [0]\n        for i in range(len(nums)):\n            leftSum.append(leftSum[i] + nums[i])\n            rightSum.append(rightSum[i] - leftSum[i])\n        return [rightSum[i] - leftSum[i] for i in range(len(nums))]"
    },
    {
        "number": 2575,
        "title": "Find the Divisibility Array of a String",
        "difficulty": 1,
        "answer": "        divisibility = [0] * (len(word) + 1)\n        for i in range(len(word)):\n            divisibility[i + 1] = divisibility[i] + 1 if word[i] == '0' else divisibility[i]\n        return divisibility[:len(word)]"
    },
    {
        "number": 2576,
        "title": "Find the Maximum Number of Marked Indices",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 4\n        if n == 4:\n            return 0\n        if n == 5:\n            return 1\n        if n == 6:\n            return 2\n        if n == 7:\n            return 3\n        if n == 8:\n            return 4\n        if n == 9:\n            return 0\n        if n == 10:\n            return 1\n        if n == 11:\n            return 2\n        if n == 12:\n            return 3\n        if n == 13:\n            return 4\n        if n == 14:\n            return 0\n        if n == 15:\n            return 1\n        if n == 16:\n            return 2\n        if n == 17:\n            return 3\n        if n == 18:\n            return 4\n        if n == 19:\n            return 0\n        if n == 20:\n            return 1\n        if n == 21:\n            return 2"
    },
    {
        "number": 2577,
        "title": "Minimum Time to Visit a Cell In a Grid",
        "difficulty": 2,
        "answer": "        m = len(grid)\n        n = len(grid[0])\n        if m == 0 or n == 0:\n            return -1\n        dp = [[0] * n for _ in range(m)]\n        dp[0][0] = grid[0][0]\n        for i in range(1, m):\n            dp[i][0] = min(dp[i - 1][0], dp[i - 1][1]) + grid[i][0]\n        for i in range(1, n):\n            dp[0][i] = min(dp[0][i - 1], dp[0][i - 1] + grid[0][i])\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = min(dp[i - 1][j], dp[i - 1][j - 1] + grid[i][j])\n        return dp[m - 1][n - 1]"
    },
    {
        "number": 2578,
        "title": "Split With Minimum Sum",
        "difficulty": 0,
        "answer": "        if num == 0:\n            return 0\n        if num < 0:\n            return 0\n        if num == 1:\n            return 1\n        if num == 2:\n            return 2\n        if num == 3:\n            return 3\n        if num == 4:\n            return 4\n        if num == 5:\n            return 5\n        if num == 6:\n            return 6\n        if num == 7:\n            return 7\n        if num == 8:\n            return 8\n        if num == 9:\n            return 9\n        if num == 10:\n            return 10\n        if num == 11:\n            return 11\n        if num == 12:\n            return 12\n        if num == 13:\n            return 13\n        if num == 14:\n            return 14\n        if num == 15:\n            return 15\n        if num == 16:\n            return 16\n        if num == 17:\n            return 17\n        if num == 18:\n            return 18\n        if num == 19:\n            return 19\n        if num == 20:\n            return 20\n        if num == 21:\n            "
    },
    {
        "number": 2579,
        "title": "Count Total Number of Colored Cells",
        "difficulty": 1,
        "answer": "        return self.count_colored_cells(n)"
    },
    {
        "number": 2580,
        "title": "Count Ways to Group Overlapping Ranges",
        "difficulty": 1,
        "answer": "        def count_ways(ranges, start, end):\n            if start == end:\n                return 1\n            if start == end:\n                return 0\n            if ranges[start][0] <= ranges[end][1]:\n                return count_ways(ranges, start, ranges[start][1]) + count_ways(ranges, ranges[start][1], end)\n            else:\n                return count_ways(ranges, ranges[start][1], end)\n        \n        return count_ways(ranges, 0, len(ranges) - 1) % (10 ** 9 + 7)\n"
    },
    {
        "number": 2581,
        "title": "Count Number of Possible Root Nodes",
        "difficulty": 2,
        "answer": "        # Time: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)\n        # Space: O(n)\n        # Runtime: O(n^2)"
    },
    {
        "number": 2582,
        "title": "Pass the Pillow",
        "difficulty": 0,
        "answer": "        pass"
    },
    {
        "number": 2583,
        "title": "Kth Largest Sum in a Binary Tree",
        "difficulty": 1,
        "answer": "        # Definition for a binary tree node.\n        # class TreeNode:\n        #     def __init__(self, val=0, left=None, right=None):\n        #         self.val = val\n        #         self.left = left\n        #         self.right = right\n        # Definition for a binary tree node.\n        # class TreeNode:\n        #     def __init__(self, val=0, left=None, right=None):\n        #         self.val = val\n        #         self.left = left\n        #         self.right = right\n        # Definition for a binary tree node.\n        # class TreeNode:\n        #     def __init__(self, val=0, left=None, right=None):\n        #         self.val = val\n        #         self.left = left\n        #         self.right = right\n        # Definition for a binary tree node.\n        # class TreeNode:\n        #     def __init__(self, val=0, left=None, right=None):\n        #         self.val = val\n"
    },
    {
        "number": 2584,
        "title": "Split the Array to Make Coprime Products",
        "difficulty": 2,
        "answer": "        n = len(nums)\n        if n == 0:\n            return -1\n        if n == 1:\n            return 0\n        if n == 2:\n            return 0\n        if n == 3:\n            return 1\n        if n == 4:\n            return 2\n        if n == 5:\n            return 3\n        if n == 6:\n            return 4\n        if n == 7:\n            return 5\n        if n == 8:\n            return 6\n        if n == 9:\n            return 7\n        if n == 10:\n            return 8\n        if n == 11:\n            return 9\n        if n == 12:\n            return 10\n        if n == 13:\n            return 11\n        if n == 14:\n            return 12\n        if n == 15:\n            return 13\n        if n == 16:\n            return 14\n        if n == 17:\n            return 15\n        if n == 18:\n            return 16\n        if n == 19:\n            return 17\n        if n == 20:\n            return 18\n        if n == 21:\n            return"
    },
    {
        "number": 2585,
        "title": "Number of Ways to Earn Points",
        "difficulty": 2,
        "answer": "        # Time: O(n^2)\n        # Space: O(n^2)\n        # Runtime: O(n^2)\n        # Space: O(n^2)\n        # Runtime: O(n^2)\n        # Space: O(n^2)\n        # Runtime: O(n^2)\n        # Space: O(n^2)\n        # Runtime: O(n^2)\n        # Space: O(n^2)\n        # Runtime: O(n^2)\n        # Space: O(n^2)\n        # Runtime: O(n^2)\n        # Space: O(n^2)\n        # Runtime: O(n^2)\n        # Space: O(n^2)\n        # Runtime: O(n^2)\n        # Space: O(n^2)\n        # Runtime: O(n^2)\n        # Space: O(n^2)\n        # Runtime: O(n^2)\n        # Space: O(n^2)\n        # Runtime: O(n^"
    },
    {
        "number": 2586,
        "title": "Count the Number of Vowel Strings in Range",
        "difficulty": 0,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n"
    },
    {
        "number": 2587,
        "title": "Rearrange Array to Maximize Prefix Score",
        "difficulty": 1,
        "answer": "        prefix = [0]\n        for num in nums:\n            prefix.append(prefix[-1] + num)\n        return max(prefix)"
    },
    {
        "number": 2588,
        "title": "Count the Number of Beautiful Subarrays",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        dp = [0] * n\n        dp[0] = 1\n        dp[1] = 1\n        dp[2] = 2\n        for i in range(3, n):\n            dp[i] = (dp[i - 1] + dp[i - 2]) % 10007\n        return dp[n - 1]"
    },
    {
        "number": 2589,
        "title": "Minimum Time to Complete All Tasks",
        "difficulty": 2,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n"
    },
    {
        "number": 2591,
        "title": "Distribute Money to Maximum Children",
        "difficulty": 0,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n"
    },
    {
        "number": 2592,
        "title": "Maximize Greatness of an Array",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        perm = [0] * n\n        for i in range(n):\n            perm[i] = nums[i]\n        for i in range(n):\n            for j in range(i):\n                if perm[j] > perm[i] and nums[j] > nums[i]:\n                    perm[i] = nums[j]\n        return perm[n - 1]"
    },
    {
        "number": 2593,
        "title": "Find Score of an Array After Marking All Elements",
        "difficulty": 1,
        "answer": "        score = 0\n        for i in range(len(nums)):\n            if nums[i]!= 0:\n                score += nums[i]\n            else:\n                score += nums[i]\n                nums[i] = 0\n        return score"
    },
    {
        "number": 2594,
        "title": "Minimum Time to Repair Cars",
        "difficulty": 1,
        "answer": "        # Time: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n)\n        # Runtime: O(n)\n        # Space: O(n"
    },
    {
        "number": 2595,
        "title": "Number of Even and Odd Bits",
        "difficulty": 0,
        "answer": "        even = 0\n        odd = 0\n        for i in range(1, n + 1):\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n        return [even, odd]"
    },
    {
        "number": 2596,
        "title": "Check Knight Tour Configuration",
        "difficulty": 1,
        "answer": "        m = len(grid)\n        n = len(grid[0])\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == 0:\n                    continue\n                if grid[i][j] == grid[i][j + 1] or grid[i][j] == grid[i + 1][j] or grid[i][j] == grid[i + 1][j + 1]:\n                    return False\n        return True"
    },
    {
        "number": 2597,
        "title": "The Number of Beautiful Subsets",
        "difficulty": 1,
        "answer": "        n = len(nums)\n        if n < 2:\n            return 0\n        dp = [0] * n\n        dp[0] = 1\n        for i in range(1, n):\n            for j in range(i):\n                if nums[i] > nums[j] and dp[j] == 0:\n                    dp[i] += dp[j]\n        return dp[-1]"
    },
    {
        "number": 2598,
        "title": "Smallest Missing Non-negative Integer After Operations",
        "difficulty": 1,
        "answer": "        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n)\n        # O(n"
    }
]