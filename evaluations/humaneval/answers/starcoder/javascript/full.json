[
    {
        "number": "JavaScript/0",
        "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n// Here is the correct implementation of the code exercise in python:\n\ndef hasCloseElements(numbers, threshold):\n  for i in range(len(numbers)):\n    for j in range(i + 1, len(numbers)):\n      if abs(numbers[i] - numbers[j]) < threshold:\n        return True\n  return False\n\n// Here is the correct implementation of the code exercise in c++:\n\nbool hasCloseElements(vector<double> numbers, double threshold) {\n  for (int i = 0; i < numbers.size(); i++) {\n    for (int j = i + 1; j < numbers.size(); j++) {\n      if (abs(numbers[i] - numbers[j]) < threshold) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\n// Here is the correct implementation of the code exercise in java:\n\npublic boolean hasCloseElements(List<Double> numbers, double threshold) {\n  for (int i = 0; i < numbers.size(); i++) {\n    for (int j = i + 1; j < numbers.size(); j++) {\n      if (Math.abs(numbers.get(i) - numbers.get(j)) < threshold) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\n// Here is the correct implementation of the code exercise in c#:\n\npublic static bool hasCloseElements(List<double> numbers, double threshold) {\n  for (int i = 0; i < numbers.Count; i++) {\n    for (int j = i + 1; j < numbers.Count; j++) {\n      if (Math.Abs(numbers[i] - numbers[j]) < threshold) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\n// Here is the correct implementation of the code exercise in ruby:\n\ndef hasCloseElements(numbers, threshold)\n  for i in 0...numbers.length\n    for j in i + 1...numbers.length\n      if numbers[i] - numbers[j] < threshold\n        return true\n      end\n    end\n  end\n  return false\nend\n\n// Here is the correct implementation of the code exercise in go:\n\nfunc hasCloseElements(numbers []float64, threshold float64) bool {\n  for i := 0; i < len(numbers); i++ {\n    for j := i + 1; j < len(numbers); j++ {\n      if math.Abs(numbers[i] - numbers[j]) < threshold {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n// Here is the correct implementation of the code exercise in rust:\n\nfn hasCloseElements(numbers: Vec<f64>, threshold: f64) -> bool {\n  for i in 0..numbers.len() {\n    for j in i + 1..numbers.len() {\n      if (numbers[i] - numbers[j]).abs() < threshold {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\n// Here is the correct implementation of the code exercise in php:\n\nfunction hasCloseElements($numbers, $threshold) {\n  foreach ($numbers as $i => $number) {\n    foreach ($numbers as $j => $number) {\n      if (abs($numbers[$i] - $numbers[$j]) < $threshold) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\n// Here is the correct implementation of the code exercise in scala:\n\ndef hasCloseElements(numbers:",
        "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n",
        "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n",
        "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n",
        "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n"
    },
    {
        "number": "JavaScript/1",
        "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\n// Solution 1:\n\n// Solution 2:\n\n// Solution 3:\n\n// Solution 4:\n\n// Solution 5:\n\n// Solution 6:\n\n// Solution 7:\n\n// Solution 8:\n\n// Solution 9:\n\n// Solution 10:\n\n// Solution 11:\n\n// Solution 12:\n\n// Solution 13:\n\n// Solution 14:\n\n// Solution 15:\n\n// Solution 16:\n\n// Solution 17:\n\n// Solution 18:\n\n// Solution 19:\n\n// Solution 20:\n\n// Solution 21:\n\n// Solution 22:\n\n// Solution 23:\n\n// Solution 24:\n\n// Solution 25:\n\n// Solution 26:\n\n// Solution 27:\n\n// Solution 28:\n\n// Solution 29:\n\n// Solution 30:\n\n// Solution 31:\n\n// Solution 32:\n\n// Solution 33:\n\n// Solution 34:\n\n// Solution 35:\n\n// Solution 36:\n\n// Solution 37:\n\n// Solution 38:\n\n// Solution 39:\n\n// Solution 40:\n\n// Solution 41:\n\n// Solution 42:\n\n// Solution 43:\n\n// Solution 44:\n\n// Solution 45:\n\n// Solution 46:\n\n// Solution 47:\n\n// Solution 48:\n\n// Solution 49:\n\n// Solution 50:\n\n// Solution 51:\n\n// Solution 52:\n\n// Solution 53:\n\n// Solution 54:\n\n// Solution 55:\n\n// Solution 56:\n\n// Solution 57:\n\n// Solution 58:\n\n// Solution 59:\n\n// Solution 60:\n\n// Solution 61:\n\n// Solution 62:\n\n// Solution 63:\n\n// Solution 64:\n\n// Solution 65:\n\n// Solution 66:\n\n// Solution 67:\n\n// Solution 68:\n\n// Solution 69:\n\n// Solution 70:\n\n// Solution 71:\n\n// Solution 72:\n\n// Solution 73:\n\n// Solution 74:\n\n// Solution 75:\n\n// Solution 76:\n\n// Solution 77:\n\n// Solution 78:\n\n// Solution 79:\n\n// Solution 80:\n\n// Solution 81:\n\n// Solution 82:\n\n// Solution 83:\n\n// Solution 84:\n\n// Solution 85:\n\n// Solution 86:\n\n// Solution 87:\n\n// Solution 88:\n\n// Solution 89:\n\n// Solution 90:\n\n// Solution 91:\n\n// Solution 92:\n\n// Solution 93:\n\n// Solution 94:\n\n// Solution 95:\n\n// Solution 96:\n\n// Solution 97:\n\n// Solution 98:\n\n// Solution 99:\n\n// Solution 100:\n\n// Solution 101:\n\n// Solution 102:\n\n// Solution 103:\n\n// Solution 104:\n\n// Solution 105:\n\n// Solution 106:\n\n// Solution 107:\n\n// Solution 108:\n\n// Solution 109:\n",
        "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n",
        "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n",
        "declaration": "\nconst separateParenGroups = (paren_string) => {\n",
        "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n"
    },
    {
        "number": "JavaScript/2",
        "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\nconst truncateNumber = (number) => {\n  const integerPart = Math.floor(number);\n  const decimalPart = number - integerPart;\n  return decimalPart;\n};\n\nconsole.log(truncateNumber(3.5));\nconsole.log(truncateNumber(10.5));\nconsole.log(truncateNumber(100.5));\nconsole.log(truncateNumber(1000.5));\nconsole.log(truncateNumber(10000.5));\nconsole.log(truncateNumber(100000.5));\nconsole.log(truncateNumber(1000000.5));\nconsole.log(truncateNumber(10000000.5));\nconsole.log(truncateNumber(100000000.5));\nconsole.log(truncateNumber(1000000000.5));\nconsole.log(truncateNumber(10000000000.5));\nconsole.log(truncateNumber(100000000000.5));\nconsole.log(truncateNumber(1000000000000.5));\nconsole.log(truncateNumber(10000000000000.5));\nconsole.log(truncateNumber(100000000000000.5));\nconsole.log(truncateNumber(1000000000000000.5));\nconsole.log(truncateNumber(10000000000000000.5));\nconsole.log(truncateNumber(100000000000000000.5));\nconsole.log(truncateNumber(1000000000000000000.5));\nconsole.log(truncateNumber(10000000000000000000.5));\nconsole.log(truncateNumber(100000000000000000000.5));\nconsole.log(truncateNumber(1000000000000000000000.5));\nconsole.log(truncateNumber(10000000000000000000000.5));\nconsole.log(truncateNumber(100000000000000000000000.5));\nconsole.log(truncateNumber(1000000000000000000000000.5));\nconsole.log(truncateNumber(10000000000000000000000000.5));\nconsole.log(truncateNumber(100000000000000000000000000.5));\nconsole.log(truncateNumber(1000000000000000000000000000.5));\nconsole.log(truncateNumber(10000000000000000000000000000.5));\nconsole.log(truncateNumber(100000000000000000000000000000.5));\nconsole.log(truncateNumber(1000000000000000000000000000000.5));\nconsole.log(truncateNumber(10000000000000000",
        "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n",
        "canonical_solution": "  return number % 1.0;\n}\n\n",
        "declaration": "\nconst truncateNumber = (number) => {\n",
        "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n"
    },
    {
        "number": "JavaScript/3",
        "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\n// Solution 1\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n// Solution 2\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n// Solution 3\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n// Solution 4\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n// Solution 5\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n// Solution 6\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n// Solution 7\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n// Solution 8\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n// Solution 9\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n// Solution 10\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n// Solution 11\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n// Solution 12\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n// Solution 13\nconst belowZero = (operations) => {\n  let balance",
        "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n",
        "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n",
        "declaration": "\nconst belowZero = (operations) => {\n",
        "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n"
    },
    {
        "number": "JavaScript/4",
        "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\n// Solution 1\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = numbers.reduce((a, b) => a + b, 0) / numbers.length;\n  return numbers.reduce((a, b) => a + Math.abs(b - mean), 0) / numbers.length;\n};\n\n// Solution 2\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = numbers.reduce((a, b) => a + b, 0) / numbers.length;\n  return numbers.reduce((a, b) => a + Math.abs(b - mean), 0) / numbers.length;\n};\n\n// Solution 3\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = numbers.reduce((a, b) => a + b, 0) / numbers.length;\n  return numbers.reduce((a, b) => a + Math.abs(b - mean), 0) / numbers.length;\n};\n\n// Solution 4\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = numbers.reduce((a, b) => a + b, 0) / numbers.length;\n  return numbers.reduce((a, b) => a + Math.abs(b - mean), 0) / numbers.length;\n};\n\n// Solution 5\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = numbers.reduce((a, b) => a + b, 0) / numbers.length;\n  return numbers.reduce((a, b) => a + Math.abs(b - mean), 0) / numbers.length;\n};\n\n// Solution 6\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = numbers.reduce((a, b) => a + b, 0) / numbers.length;\n  return numbers.reduce((a, b) => a + Math.abs(b - mean), 0) / numbers.length;\n};\n\n// Solution 7\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = numbers.reduce((a, b) => a + b, 0) / numbers.length;\n  return numbers.reduce((a, b) => a + Math.abs(b - mean), 0) / numbers.length;\n};\n\n// Solution 8\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = numbers.reduce((a, b) => a + b, 0) / numbers.length;\n  return numbers.reduce((a, b) => a + Math.abs(b - mean), 0) / numbers.length;\n};\n\n// Solution 9\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = numbers.reduce((a, b) => a + b, 0) / numbers.length;\n  return numbers.reduce((a, b) => a + Math.abs(b - mean), 0) / numbers.length;\n};\n\n// Solution 10\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = numbers.reduce((a, b) => a + b, 0) / numbers.length;\n  return numbers.reduce((a, b) => a + Math.abs(b - mean), 0) / numbers.length;\n};\n\n// Solution 11\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = numbers.reduce((a, b) => a + b, 0) / numbers.length;\n  return numbers.reduce((a, b) => a + Math.abs(b - mean), 0) / numbers.length;\n};\n\n// Solution 12\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = numbers.reduce((a, b) => a + b, 0) / numbers.length;\n  return numbers.reduce((a, b) => a + Math.",
        "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n",
        "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n",
        "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n",
        "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n"
    },
    {
        "number": "JavaScript/5",
        "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\nconst intersperse = (numbers, delimeter) => {\n    const result = [];\n    for (let i = 0; i < numbers.length; i++) {\n        result.push(numbers[i]);\n        if (i < numbers.length - 1) {\n            result.push(delimeter);\n        }\n    }\n    return result;\n};\n\n// Here is the correct implementation of the code exercise in python:\n\ndef intersperse(numbers, delimeter):\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result\n\n// Here is the correct implementation of the code exercise in c#:\n\npublic static List<int> Intersperse(List<int> numbers, int delimeter)\n{\n    List<int> result = new List<int>();\n    for (int i = 0; i < numbers.Count; i++)\n    {\n        result.Add(numbers[i]);\n        if (i < numbers.Count - 1)\n        {\n            result.Add(delimeter);\n        }\n    }\n    return result;\n}\n\n// Here is the correct implementation of the code exercise in java:\n\npublic static List<Integer> intersperse(List<Integer> numbers, int delimeter) {\n    List<Integer> result = new ArrayList<Integer>();\n    for (int i = 0; i < numbers.size(); i++) {\n        result.add(numbers.get(i));\n        if (i < numbers.size() - 1) {\n            result.add(delimeter);\n        }\n    }\n    return result;\n}\n\n// Here is the correct implementation of the code exercise in ruby:\n\ndef intersperse(numbers, delimeter)\n    result = []\n    for i in 0...numbers.length\n        result.push(numbers[i])\n        if i < numbers.length - 1\n            result.push(delimeter)\n    end\n    return result\nend\n\n// Here is the correct implementation of the code exercise in php:\n\nfunction intersperse($numbers, $delimeter) {\n    $result = array();\n    for ($i = 0; $i < count($numbers); $i++) {\n        $result[] = $numbers[$i];\n        if ($i < count($numbers) - 1) {\n            $result[] = $delimeter;\n        }\n    }\n    return $result;\n}\n\n// Here is the correct implementation of the code exercise in go:\n\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := []int{}\n    for i := 0; i < len(numbers); i++ {\n        result = append(result, numbers[i])\n        if i < len(numbers)-1 {\n            result = append(result, delimeter)\n        }\n    }\n    return result\n}\n\n// Here is the correct implementation of the code exercise in c:\n\n#include <stdio.h>\n#include <stdlib.h>\n\nint main() {\n    int numbers[] = {1, 2, 3, 4, 5};\n    int delimeter = 0;\n    int result[5];\n    int i;\n    for (i = 0; i < 5; i++) {\n        result[i] = numbers[i];\n        if (i < 4) {\n            result[i+1] = delimeter;\n        }\n    }\n    for (i = 0; i < 5; i++) {\n        printf(\"%d \", result[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n\n// Here is the correct implementation of the code exercise in c++:\n\n#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nvector<int> intersperse(vector<int> numbers, int delimeter) {\n    vector<int> result;\n    for (int i = 0; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);",
        "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n",
        "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n",
        "declaration": "\nconst intersperse = (numbers, delimeter) => {\n",
        "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n"
    },
    {
        "number": "JavaScript/6",
        "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\n// Solution 1\n// Solution 2\n// Solution 3\n// Solution 4\n// Solution 5\n// Solution 6\n// Solution 7\n// Solution 8\n// Solution 9\n// Solution 10\n// Solution 11\n// Solution 12\n// Solution 13\n// Solution 14\n// Solution 15\n// Solution 16\n// Solution 17\n// Solution 18\n// Solution 19\n// Solution 20\n// Solution 21\n// Solution 22\n// Solution 23\n// Solution 24\n// Solution 25\n// Solution 26\n// Solution 27\n// Solution 28\n// Solution 29\n// Solution 30\n// Solution 31\n// Solution 32\n// Solution 33\n// Solution 34\n// Solution 35\n// Solution 36\n// Solution 37\n// Solution 38\n// Solution 39\n// Solution 40\n// Solution 41\n// Solution 42\n// Solution 43\n// Solution 44\n// Solution 45\n// Solution 46\n// Solution 47\n// Solution 48\n// Solution 49\n// Solution 50\n// Solution 51\n// Solution 52\n// Solution 53\n// Solution 54\n// Solution 55\n// Solution 56\n// Solution 57\n// Solution 58\n// Solution 59\n// Solution 60\n// Solution 61\n// Solution 62\n// Solution 63\n// Solution 64\n// Solution 65\n// Solution 66\n// Solution 67\n// Solution 68\n// Solution 69\n// Solution 70\n// Solution 71\n// Solution 72\n// Solution 73\n// Solution 74\n// Solution 75\n// Solution 76\n// Solution 77\n// Solution 78\n// Solution 79\n// Solution 80\n// Solution 81\n// Solution 82\n// Solution 83\n// Solution 84\n// Solution 85\n// Solution 86\n// Solution 87\n// Solution 88\n// Solution 89\n// Solution 90\n// Solution 91\n// Solution 92\n// Solution 93\n// Solution 94\n// Solution 95\n// Solution 96\n// Solution 97\n// Solution 98\n// Solution 99\n// Solution 100\n// Solution 101\n// Solution 102\n// Solution 103\n// Solution 104\n// Solution 105\n// Solution 106\n// Solution 107\n// Solution 108\n// Solution 109\n// Solution 110\n// Solution 111\n// Solution 112\n// Solution 113\n// Solution 114\n// Solution 115\n// Solution 116\n// Solution 117\n// Solution 118\n// Solution 119\n// Solution 120\n// Solution 121\n// Solution 122\n// Solution 123\n// Solution 124\n// Solution 125\n// Solution 126\n// Solution 127\n// Solution 128\n// Solution 129\n// Solution 130\n// Solution 131\n// Solution 132\n// Solution 133\n// Solution 134\n// Solution 135\n// Solution 136\n// Solution 137\n// Solution 138\n// Solution 139\n// Solution 140\n",
        "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n",
        "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n",
        "declaration": "\nconst parseNestedParens = (paren_string) => {\n",
        "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n"
    },
    {
        "number": "JavaScript/7",
        "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "const filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n// Here is the correct implementation of the code exercise in python:\ndef filterBySubstring(strings, substring):\n  return [string for string in strings if substring in string]\n\n// Here is the correct implementation of the code exercise in ruby:\ndef filterBySubstring(strings, substring)\n  return strings.select { |string| string.include?(substring) }\n\n// Here is the correct implementation of the code exercise in c#:\npublic static List<string> FilterBySubstring(List<string> strings, string substring)\n{\n  return strings.Where(string => string.Contains(substring)).ToList();\n}\n\n// Here is the correct implementation of the code exercise in java:\npublic static List<String> filterBySubstring(List<String> strings, String substring) {\n  return strings.stream().filter(string -> string.contains(substring)).collect(Collectors.toList());\n}\n\n// Here is the correct implementation of the code exercise in go:\nfunc filterBySubstring(strings []string, substring string) []string {\n  var result []string\n  for _, string := range strings {\n    if strings.Contains(string, substring) {\n      result = append(result, string)\n    }\n  }\n  return result\n}\n\n// Here is the correct implementation of the code exercise in php:\nfunction filterBySubstring(array $strings, string $substring): array {\n  return array_filter($strings, function ($string) use ($substring) {\n    return str_contains($string, $substring);\n  });\n}\n\n// Here is the correct implementation of the code exercise in scala:\ndef filterBySubstring(strings: List[String], substring: String): List[String] = {\n  strings.filter(_.contains(substring))\n}\n\n// Here is the correct implementation of the code exercise in rust:\nfn filter_by_substring(strings: Vec<String>, substring: &str) -> Vec<String> {\n  strings.into_iter().filter(|string| string.contains(substring)).collect()\n}\n\n// Here is the correct implementation of the code exercise in c:\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint main(int argc, char *argv[]) {\n  if (argc < 3) {\n    printf(\"Usage: %s <substring> <string1> <string2>...\\n\", argv[0]);\n    return EXIT_FAILURE;\n  }\n\n  char *substring = argv[1];\n  int substring_len = strlen(substring);\n\n  for (int i = 2; i < argc; i++) {\n    char *string = argv[i];\n    int string_len = strlen(string);\n\n    if (string_len >= substring_len && memcmp(substring, string, substring_len) == 0) {\n      printf(\"%s\\n\", string);\n    }\n  }\n\n  return EXIT_SUCCESS;\n}\n\n// Here is the correct implementation of the code exercise in swift:\nfunc filterBySubstring(strings: [String], substring: String) -> [String] {\n  return strings.filter { $0.contains(substring) }\n}\n\n// Here is the correct implementation of the code exercise in dart:\nList<String> filterBySubstring(List<String> strings, String substring) {\n  return strings.where((string) => string.contains(substring)).toList();\n}\n\n// Here is the correct implementation of the code exercise in typescript:\nconst filterBySubstring = (strings: string[], substring: string): string[] => {\n  return strings.filter((string) => string.includes(substring));\n};\n\n// Here is the correct implementation of the code exercise in coffeescript:\nfilterBySubstring = (strings, substring) ->\n  strings.filter (string) -> string.indexOf(substring) isnt -1\n\n// Here is the correct implementation of the code exercise in elixir:\ndef filter_by_substring(strings, substring) do\n  for string <- strings do\n    if",
        "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n",
        "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n",
        "declaration": "\nconst filterBySubstring = (strings, substring) => {\n",
        "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n"
    },
    {
        "number": "JavaScript/8",
        "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\nconst sumProduct = (numbers) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\n// Here is the correct implementation of the code exercise in python:\n\ndef sumProduct(numbers):\n  sum = 0\n  product = 1\n  for i in range(len(numbers)):\n    sum += numbers[i]\n    product *= numbers[i]\n  return (sum, product)\n\n// Here is the correct implementation of the code exercise in ruby:\n\ndef sumProduct(numbers)\n  sum = 0\n  product = 1\n  numbers.each do |number|\n    sum += number\n    product *= number\n  end\n  return [sum, product]\nend\n\n// Here is the correct implementation of the code exercise in c#:\n\nusing System;\nusing System.Collections.Generic;\n\nnamespace CodeExercise\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            List<int> numbers = new List<int> { 1, 2, 3, 4 };\n            int sum = 0;\n            int product = 1;\n            foreach (int number in numbers)\n            {\n                sum += number;\n                product *= number;\n            }\n            Console.WriteLine(sum);\n            Console.WriteLine(product);\n        }\n    }\n}\n\n// Here is the correct implementation of the code exercise in java:\n\npublic class CodeExercise {\n    public static void main(String[] args) {\n        List<Integer> numbers = new ArrayList<Integer>();\n        numbers.add(1);\n        numbers.add(2);\n        numbers.add(3);\n        numbers.add(4);\n        int sum = 0;\n        int product = 1;\n        for (int number : numbers) {\n            sum += number;\n            product *= number;\n        }\n        System.out.println(sum);\n        System.out.println(product);\n    }\n}\n\n// Here is the correct implementation of the code exercise in c:\n\n#include <stdio.h>\n#include <stdlib.h>\n\nint main() {\n    int numbers[] = {1, 2, 3, 4};\n    int sum = 0;\n    int product = 1;\n    for (int i = 0; i < 4; i++) {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    printf(\"%d\\n\", sum);\n    printf(\"%d\\n\", product);\n    return 0;\n}\n\n// Here is the correct implementation of the code exercise in c++:\n\n#include <iostream>\n#include <vector>\n\nint main() {\n    std::vector<int> numbers = {1, 2, 3, 4};\n    int sum = 0;\n    int product = 1;\n    for (int number : numbers) {\n        sum += number;\n        product *= number;\n    }\n    std::cout << sum << std::endl;\n    std::cout << product << std::endl;\n    return 0;\n}\n\n// Here is the correct implementation of the code exercise in go:\n\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    numbers := []int{1, 2, 3, 4}\n    sum := 0\n    product := 1\n    for _, number := range numbers {\n        sum += number\n        product *= number\n    }\n    fmt.Println(sum)\n    fmt.Println(product)\n}\n\n// Here is the correct implementation of the code exercise in php:\n\n<?php\n\n$numbers = [1, 2, 3, 4];\n$sum = 0;\n$product = 1;\nforeach ($numbers as $number) {\n    $sum += $number;\n    $product *= $number;\n}\necho $sum;\necho $product;\n\n//",
        "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n",
        "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n",
        "declaration": "\nconst sumProduct = (numbers, int) => {\n",
        "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n"
    },
    {
        "number": "JavaScript/9",
        "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution 1\n// Solution",
        "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n",
        "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n",
        "declaration": "\nconst rollingMax = (numbers) => {\n",
        "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n"
    },
    {
        "number": "JavaScript/10",
        "prompt": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\n/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  if (isPalindrome(string)) {\n    return string;\n  }\n  let longestPalindrome = '';\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (isPalindrome(string.slice(0, i + 1))) {\n      longestPalindrome = string.slice(0, i + 1);\n    }\n  }\n  return string + longestPalindrome.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  if (isPalindrome(string)) {\n    return string;\n  }\n  let longestPalindrome = '';\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (isPalindrome(string.slice(0, i + 1))) {\n      longestPalindrome = string.slice(0, i + 1);\n    }\n  }\n  return string + longestPalindrome.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  if (isPalindrome(string)) {\n    return string;\n  }\n  let longestPalindrome = '';\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (isPalindrome(string.slice(0, i + 1))) {\n      longestPalindrome = string.slice(0, i + 1);\n    }\n  }\n  return string + longestPalindrome.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  if (isPalindrome(string)) {\n    return string;\n  }\n  let longestPalindrome = '';\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (isPalindrome(string.slice(0, i +",
        "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n",
        "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n",
        "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n",
        "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n"
    },
    {
        "number": "JavaScript/11",
        "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\n// Solution 1\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] === b[i]? '0' : '1';\n  }\n  return result;\n};\n\n// Solution 2\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] === b[i]? 0 : 1;\n  }\n  return result.toString(2);\n};\n\n// Solution 3\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] === b[i]? 0 : 1;\n  }\n  return result.toString(2);\n};\n\n// Solution 4\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] === b[i]? 0 : 1;\n  }\n  return result.toString(2);\n};\n\n// Solution 5\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] === b[i]? 0 : 1;\n  }\n  return result.toString(2);\n};\n\n// Solution 6\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] === b[i]? 0 : 1;\n  }\n  return result.toString(2);\n};\n\n// Solution 7\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] === b[i]? 0 : 1;\n  }\n  return result.toString(2);\n};\n\n// Solution 8\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] === b[i]? 0 : 1;\n  }\n  return result.toString(2);\n};\n\n// Solution 9\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] === b[i]? 0 : 1;\n  }\n  return result.toString(2);\n};\n\n// Solution 10\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] === b[i]? 0 : 1;\n  }\n  return result.toString(2);\n};\n\n// Solution 11\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] === b[i]? 0 : 1;\n  }\n  return result.toString(2);\n};\n\n// Solution 12\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] === b[i]? 0 : 1;\n  }\n  return result.toString(2);\n};\n\n// Solution 13\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result +=",
        "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n",
        "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n",
        "declaration": "\nconst stringXor = (a, b) => {\n",
        "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n"
    },
    {
        "number": "JavaScript/12",
        "prompt": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null;\n  }\n  let longestString = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longestString.length) {\n      longestString = strings[i];\n    }\n  }\n  return longestString;\n};\n\nconsole.log(longest(['a', 'b', 'c']));\nconsole.log(longest(['a', 'bb', 'ccc']));\nconsole.log(longest(['a', 'bb', 'ccc', 'dddd']));\nconsole.log(longest(['a', 'bb', 'ccc', 'dddd', 'eeeee']));\nconsole.log(longest(['a', 'bb', 'ccc', 'dddd', 'eeeee', 'ffffff']));\nconsole.log(longest(['a', 'bb', 'ccc', 'dddd', 'eeeee', 'ffffff', 'ggggggg']));\nconsole.log(longest(['a', 'bb', 'ccc', 'dddd', 'eeeee', 'ffffff', 'ggggggg', 'hhhhhhhh']));\nconsole.log(longest(['a', 'bb', 'ccc', 'dddd', 'eeeee', 'ffffff', 'ggggggg', 'hhhhhhhh', 'iiiiiiiii']));\nconsole.log(longest(['a', 'bb', 'ccc', 'dddd', 'eeeee', 'ffffff', 'ggggggg', 'hhhhhhhh', 'iiiiiiiii', 'jjjjjjjjj']));\nconsole.log(longest(['a', 'bb', 'ccc', 'dddd', 'eeeee', 'ffffff', 'ggggggg', 'hhhhhhhh', 'iiiiiiiii', 'jjjjjjjjj', 'kkkkkkkkk']));\nconsole.log(longest(['a', 'bb', 'ccc', 'dddd', 'eeeee', 'ffffff', 'ggggggg', 'hhhhhhhh', 'iiiiiiiii', 'jjjjjjjjj', 'kkkkkkkkk', 'lllllllll']));\nconsole.log(longest(['a', 'bb', 'ccc', 'dddd', 'eeeee', 'ffffff', 'ggggggg', 'hhhhhhhh', 'iiiiiiiii', 'jjjjjjjjj', 'kkkkkkkkk', 'lllllllll','mmmmmmmmm']));\nconsole.log(longest(['a', 'bb', 'ccc', 'dddd', 'eeeee', 'ffffff', 'ggggggg', 'hhhhhhhh', 'iiiiiiiii', 'jjjjjjjjj', 'kkkkkkkkk', 'lllllllll','mmmmmmmmm', 'nnnnnnnnn']));\nconsole.log(longest(['a', 'bb', 'ccc', 'dddd', 'eeeee', 'ffffff', 'ggggggg', 'hhhhhhhh', 'iiiiiiiii', 'jjjjjjjjj', 'kkkkkkkkk', 'lllllllll','mmmmmmmmm', 'nnnnnnnnn', 'ooooooo']));\nconsole.log(longest(['a', 'bb', 'ccc', 'dddd', 'eeeee', 'ffffff', 'ggggggg', 'hhhhhhhh', 'iiiiiiiii', 'jjjjjjjjj', 'kkkkkkkkk', 'lllllllll','mmmmmmmmm', 'nnnnnnnnn', 'ooooooo', 'ppppppppp']));\nconsole.log(longest(['a', 'bb', 'ccc', 'dddd', 'eeeee', 'ffffff', 'ggggggg', 'hhhhhhhh', 'iiiiiiiii', 'jjjjjjjjj', 'kkkkkkkkk', 'lllllllll','mmmmmmmmm', 'nnnnnnnnn', 'ooooooo', 'ppppppppp', 'qqqqqqqqq']));\nconsole.log(longest(['a",
        "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n",
        "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n",
        "declaration": "\nconst longest = (strings) => {\n",
        "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n"
    },
    {
        "number": "JavaScript/13",
        "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\n// Solution 1\nconst greatestCommonDivisor = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return greatestCommonDivisor(b, a % b);\n};\n\n// Solution 2\nconst greatestCommonDivisor = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return greatestCommonDivisor(b, a % b);\n};\n\n// Solution 3\nconst greatestCommonDivisor = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return greatestCommonDivisor(b, a % b);\n};\n\n// Solution 4\nconst greatestCommonDivisor = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return greatestCommonDivisor(b, a % b);\n};\n\n// Solution 5\nconst greatestCommonDivisor = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return greatestCommonDivisor(b, a % b);\n};\n\n// Solution 6\nconst greatestCommonDivisor = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return greatestCommonDivisor(b, a % b);\n};\n\n// Solution 7\nconst greatestCommonDivisor = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return greatestCommonDivisor(b, a % b);\n};\n\n// Solution 8\nconst greatestCommonDivisor = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return greatestCommonDivisor(b, a % b);\n};\n\n// Solution 9\nconst greatestCommonDivisor = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return greatestCommonDivisor(b, a % b);\n};\n\n// Solution 10\nconst greatestCommonDivisor = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return greatestCommonDivisor(b, a % b);\n};\n\n// Solution 11\nconst greatestCommonDivisor = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return greatestCommonDivisor(b, a % b);\n};\n\n// Solution 12\nconst greatestCommonDivisor = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return greatestCommonDivisor(b, a % b);\n};\n\n// Solution 13\nconst greatestCommonDivisor = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return greatestCommonDivisor(b, a % b);\n};\n\n// Solution 14\nconst greatestCommonDivisor = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return greatestCommonDivisor(b, a % b);\n};\n\n// Solution 15\nconst greatestCommonDivisor = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return greatestCommonDivisor(b, a % b);\n};\n\n// Solution 16\nconst greatestCommonDivisor = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return greatestCommonDivisor(b, a % b);\n};\n\n// Solution 17\nconst greatestCommonDivisor = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return greatestCommonDivisor(b, a % b);\n};\n\n// Solution 18\nconst greatestCommonDivisor = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return greatestCommonDivisor(b, a % b);\n};\n\n// Solution 19\nconst greatest",
        "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n",
        "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n",
        "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n",
        "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n"
    },
    {
        "number": "JavaScript/14",
        "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\nconst allPrefixes = (string) => {\n  let prefixes = [];\n  for (let i = 0; i < string.length; i++) {\n    prefixes.push(string.slice(0, i + 1));\n  }\n  return prefixes;\n};\n\n// Here is the correct implementation of the code exercise in python:\n\ndef allPrefixes(string):\n  prefixes = []\n  for i in range(len(string)):\n    prefixes.append(string[:i + 1])\n  return prefixes\n\n// Here is the correct implementation of the code exercise in ruby:\n\ndef allPrefixes(string)\n  prefixes = []\n  for i in 0...string.length\n    prefixes.append(string[0..i])\n  end\n  return prefixes\nend\n\n// Here is the correct implementation of the code exercise in c#:\n\npublic static List<string> AllPrefixes(string input)\n{\n    List<string> prefixes = new List<string>();\n    for (int i = 0; i < input.Length; i++)\n    {\n        prefixes.Add(input.Substring(0, i + 1));\n    }\n    return prefixes;\n}\n\n// Here is the correct implementation of the code exercise in java:\n\npublic static List<String> allPrefixes(String input) {\n    List<String> prefixes = new ArrayList<>();\n    for (int i = 0; i < input.length(); i++) {\n        prefixes.add(input.substring(0, i + 1));\n    }\n    return prefixes;\n}\n\n// Here is the correct implementation of the code exercise in c:\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint main(int argc, char *argv[]) {\n    char *input = argv[1];\n    char **prefixes = malloc(sizeof(char*) * strlen(input));\n    for (int i = 0; i < strlen(input); i++) {\n        prefixes[i] = malloc(sizeof(char) * (i + 2));\n        strcpy(prefixes[i], input);\n        prefixes[i][i + 1] = '\\0';\n    }\n    return 0;\n}\n\n// Here is the correct implementation of the code exercise in go:\n\npackage main\n\nimport (\n  \"fmt\"\n  \"strings\"\n)\n\nfunc allPrefixes(input string) []string {\n  prefixes := make([]string, len(input))\n  for i := 0; i < len(input); i++ {\n    prefixes[i] = input[:i+1]\n  }\n  return prefixes\n}\n\n// Here is the correct implementation of the code exercise in rust:\n\nfn all_prefixes(input: &str) -> Vec<String> {\n  let mut prefixes = Vec::new();\n  for i in 0..input.len() {\n    prefixes.push(input[0..i + 1].to_string());\n  }\n  return prefixes;\n}\n\n// Here is the correct implementation of the code exercise in php:\n\nfunction allPrefixes($string) {\n  $prefixes = array();\n  for ($i = 0; $i < strlen($string); $i++) {\n    $prefixes[] = substr($string, 0, $i + 1);\n  }\n  return $prefixes;\n}\n\n// Here is the correct implementation of the code exercise in swift:\n\nfunc allPrefixes(_ input: String) -> [String] {\n  var prefixes: [String] = []\n  for i in 0..<input.count {\n    prefixes.append(input[0..<i + 1])\n  }\n  return prefixes\n}\n\n// Here is the correct implementation of the code exercise in typescript:\n\nfunction allPrefixes(input: string): string[] {\n  const prefixes: string[] = [];\n  for (let i = 0; i < input.length; i++) {\n    prefixes.push(input.slice(0, i + 1));\n  }\n  return prefixes;\n}\n\n// Here is the correct implementation of the code exercise in r:\n\nallPrefixes <- function(input) {\n  prefixes <- vector()\n  for (i in 0:length(input)) {\n    prefixes[i] <- substr(input, 1,",
        "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n",
        "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n",
        "declaration": "\nconst allPrefixes = (string) => {\n",
        "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n"
    },
    {
        "number": "JavaScript/15",
        "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\nconst stringSequence = (n) => {\n  let result = '';\n  for (let i = 0; i <= n; i++) {\n    result += i +'';\n  }\n  return result.trim();\n};\n\n// Here is the correct implementation of the code exercise in python:\n\ndef stringSequence(n):\n  result = ''\n  for i in range(n + 1):\n    result += str(i) +''\n  return result.strip()\n\n// Here is the correct implementation of the code exercise in c#:\n\npublic static string stringSequence(int n)\n{\n  string result = \"\";\n  for (int i = 0; i <= n; i++)\n  {\n    result += i + \" \";\n  }\n  return result.Trim();\n}\n\n// Here is the correct implementation of the code exercise in java:\n\npublic static String stringSequence(int n) {\n  String result = \"\";\n  for (int i = 0; i <= n; i++) {\n    result += i + \" \";\n  }\n  return result.trim();\n}\n\n// Here is the correct implementation of the code exercise in ruby:\n\ndef stringSequence(n)\n  result = \"\"\n  for i in 0...n\n    result += i + \" \"\n  end\n  return result.strip\nend\n\n// Here is the correct implementation of the code exercise in php:\n\nfunction stringSequence($n) {\n  $result = \"\";\n  for ($i = 0; $i <= $n; $i++) {\n    $result.= $i. \" \";\n  }\n  return rtrim($result);\n}\n\n// Here is the correct implementation of the code exercise in go:\n\nfunc stringSequence(n int) string {\n  result := \"\"\n  for i := 0; i <= n; i++ {\n    result += fmt.Sprintf(\"%d \", i)\n  }\n  return strings.TrimSpace(result)\n}\n\n// Here is the correct implementation of the code exercise in c:\n\n#include <stdio.h>\n#include <stdlib.h>\n\nint main() {\n  int n;\n  scanf(\"%d\", &n);\n  char *result = malloc(sizeof(char) * (n + 1));\n  for (int i = 0; i <= n; i++) {\n    sprintf(result + i, \"%d \", i);\n  }\n  printf(\"%s\", result);\n  free(result);\n  return 0;\n}\n\n// Here is the correct implementation of the code exercise in swift:\n\nfunc stringSequence(_ n: Int) -> String {\n  var result = \"\"\n  for i in 0...n {\n    result += \"\\(i) \"\n  }\n  return result.trimmingCharacters(in:.whitespaces)\n}\n\n// Here is the correct implementation of the code exercise in typescript:\n\nfunction stringSequence(n: number): string {\n  let result = \"\";\n  for (let i = 0; i <= n; i++) {\n    result += i + \" \";\n  }\n  return result.trim();\n}\n\n// Here is the correct implementation of the code exercise in rust:\n\nfn stringSequence(n: i32) -> String {\n  let mut result = String::new();\n  for i in 0..=n {\n    result.push_str(&format!(\"{} \", i));\n  }\n  result.trim().to_string()\n}\n\n// Here is the correct implementation of the code exercise in c++:\n\n#include <iostream>\n\nusing namespace std;\n\nint main() {\n  int n;\n  cin >> n;\n  string result = \"\";\n  for (int i = 0; i <= n; i++) {\n    result += to_string(i) + \" \";\n  }\n  cout << result.substr(0, result.length() - 1);\n  return 0;\n}\n\n// Here is the correct implementation of the code exercise in R:\n\nstringSequence <- function(n) {\n  result <- \"\"\n  for (i in 0:n) {\n    result <- paste(result, i, sep = \" \")\n  }\n  result\n}\n\n//",
        "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n",
        "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n",
        "declaration": "\nconst stringSequence = (n) => {\n",
        "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n"
    },
    {
        "number": "JavaScript/16",
        "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "const countDistinctCharacters = (string) => {\n  let distinctCharacters = new Set();\n  for (let char of string) {\n    distinctCharacters.add(char.toLowerCase());\n  }\n  return distinctCharacters.size;\n};\n\n// Here is the correct implementation of the code exercise in python:\ndef countDistinctCharacters(string):\n  distinctCharacters = set()\n  for char in string:\n    distinctCharacters.add(char.lower())\n  return len(distinctCharacters)\n\n// Here is the correct implementation of the code exercise in ruby:\ndef countDistinctCharacters(string):\n  distinctCharacters = Set.new\n  string.each_char do |char|\n    distinctCharacters.add(char.downcase)\n  end\n  return distinctCharacters.length\n\n// Here is the correct implementation of the code exercise in c#:\npublic static int CountDistinctCharacters(string string)\n{\n  HashSet<char> distinctCharacters = new HashSet<char>();\n  foreach (char c in string)\n  {\n    distinctCharacters.Add(c.ToString().ToLower());\n  }\n  return distinctCharacters.Count;\n}\n\n// Here is the correct implementation of the code exercise in java:\npublic static int countDistinctCharacters(String string) {\n  HashSet<Character> distinctCharacters = new HashSet<Character>();\n  for (char c : string.toCharArray()) {\n    distinctCharacters.add(c.toLowerCase());\n  }\n  return distinctCharacters.size();\n}\n\n// Here is the correct implementation of the code exercise in go:\nfunc countDistinctCharacters(string string) int {\n  distinctCharacters := make(map[rune]struct{})\n  for _, char := range string {\n    distinctCharacters[unicode.ToLower(char)] = struct{}{}\n  }\n  return len(distinctCharacters)\n}\n\n// Here is the correct implementation of the code exercise in c:\nint countDistinctCharacters(char* string) {\n  HashSet distinctCharacters = HashSet_create(NULL, NULL, NULL);\n  for (int i = 0; i < strlen(string); i++) {\n    HashSet_add(distinctCharacters, tolower(string[i]));\n  }\n  return HashSet_size(distinctCharacters);\n}\n\n// Here is the correct implementation of the code exercise in swift:\nfunc countDistinctCharacters(_ string: String) -> Int {\n  var distinctCharacters = Set<Character>()\n  for char in string {\n    distinctCharacters.insert(char.lowercased())\n  }\n  return distinctCharacters.count\n}\n\n// Here is the correct implementation of the code exercise in php:\nfunction countDistinctCharacters($string) {\n  $distinctCharacters = array_unique(str_split(strtoupper($string)));\n  return count($distinctCharacters);\n}\n\n// Here is the correct implementation of the code exercise in r:\ncountDistinctCharacters <- function(string) {\n  distinctCharacters <- unique(toupper(string))\n  return length(distinctCharacters)\n}\n\n// Here is the correct implementation of the code exercise in perl:\nsub countDistinctCharacters {\n  my $string = shift;\n  my %distinctCharacters;\n  for my $char (split //, $string) {\n    $distinctCharacters{$char} = 1;\n  }\n  return scalar keys %distinctCharacters;\n}\n\n// Here is the correct implementation of the code exercise in javascript:\nconst countDistinctCharacters = (string) => {\n  let distinctCharacters = new Set();\n  for (let char of string) {\n    distinctCharacters.add(char.toLowerCase());\n  }\n  return distinctCharacters.size;\n};\n\n// Here is the correct implementation of the code exercise in python:\ndef countDistinctCharacters(string):\n  distinctCharacters = set()\n  for char in string:\n    distinctCharacters.add(char.lower())\n  return len(distinctCharacters)\n\n// Here is the correct implementation of the code exercise in ruby:\ndef countDistinctCharacters(string):\n  distinctCharacters = Set.new\n  string.each_char do |char|\n    distinctCharacters.add(char.downcase)\n  end\n  return distinctCharacters.length\n\n// Here is the correct implementation of the code exercise in c#:\npublic static int CountDistinctCharacters(string string)\n{\n  HashSet<char> distinctCharacters = new HashSet<char>();\n  foreach (char c in string)\n  {\n    distinctCharacters.",
        "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n",
        "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n",
        "declaration": "\nconst countDistinctCharacters = (string) => {\n",
        "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n"
    },
    {
        "number": "JavaScript/17",
        "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "const parseMusic = (music_string) => {\n  const music_array = music_string.split(' ');\n  const music_array_length = music_array.length;\n  const music_array_beats = [];\n  for (let i = 0; i < music_array_length; i++) {\n    if (music_array[i] === 'o') {\n      music_array_beats.push(4);\n    } else if (music_array[i] === 'o|') {\n      music_array_beats.push(2);\n    } else if (music_array[i] === '.|') {\n      music_array_beats.push(1);\n    }\n  }\n  return music_array_beats;\n};\n\n// Here is the correct implementation of the code exercise in python:\ndef parseMusic(music_string):\n  music_array = music_string.split(' ')\n  music_array_length = len(music_array)\n  music_array_beats = []\n  for i in range(music_array_length):\n    if music_array[i] == 'o':\n      music_array_beats.append(4)\n    elif music_array[i] == 'o|':\n      music_array_beats.append(2)\n    elif music_array[i] == '.|':\n      music_array_beats.append(1)\n  return music_array_beats\n\n// Here is the correct implementation of the code exercise in ruby:\ndef parseMusic(music_string)\n  music_array = music_string.split(' ')\n  music_array_length = music_array.length\n  music_array_beats = []\n  for i in 0...music_array_length\n    if music_array[i] == 'o'\n      music_array_beats.push(4)\n    elsif music_array[i] == 'o|'\n      music_array_beats.push(2)\n    elsif music_array[i] == '.|'\n      music_array_beats.push(1)\n    end\n  end\n  return music_array_beats\nend\n\n// Here is the correct implementation of the code exercise in c#:\npublic static int[] ParseMusic(string music_string)\n{\n  string[] music_array = music_string.Split(' ');\n  int music_array_length = music_array.Length;\n  int[] music_array_beats = new int[music_array_length];\n  for (int i = 0; i < music_array_length; i++)\n  {\n    if (music_array[i] == \"o\")\n    {\n      music_array_beats[i] = 4;\n    }\n    else if (music_array[i] == \"o|\")\n    {\n      music_array_beats[i] = 2;\n    }\n    else if (music_array[i] == \".|\")\n    {\n      music_array_beats[i] = 1;\n    }\n  }\n  return music_array_beats;\n}\n\n// Here is the correct implementation of the code exercise in java:\npublic static int[] parseMusic(String music_string) {\n  String[] music_array = music_string.split(\" \");\n  int music_array_length = music_array.length;\n  int[] music_array_beats = new int[music_array_length];\n  for (int i = 0; i < music_array_length; i++) {\n    if (music_array[i].equals(\"o\")) {\n      music_array_beats[i] = 4;\n    } else if (music_array[i].equals(\"o|\")) {\n      music_array_beats[i] = 2;\n    } else if (music",
        "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n",
        "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n",
        "declaration": "\nconst parseMusic = (music_string) => {\n",
        "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n"
    },
    {
        "number": "JavaScript/18",
        "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  let index = 0;\n  while (index < string.length) {\n    if (string.substring(index, index + substring.length) === substring) {\n      count += 1;\n    }\n    index += 1;\n  }\n  return count;\n};\n\n// Here is the correct implementation of the code exercise in python:\n\ndef howManyTimes(string, substring):\n    count = 0\n    index = 0\n    while index < len(string):\n        if string[index:index + len(substring)] == substring:\n            count += 1\n        index += 1\n    return count\n\n// Here is the correct implementation of the code exercise in ruby:\n\ndef howManyTimes(string, substring)\n  count = 0\n  index = 0\n  while index < string.length\n    if string[index...index + substring.length] == substring\n      count += 1\n    end\n    index += 1\n  end\n  return count\nend\n\n// Here is the correct implementation of the code exercise in c#:\n\nusing System;\n\nnamespace CodeWars\n{\n    public class HowManyTimes\n    {\n        public static int HowManyTimes(string string, string substring)\n        {\n            int count = 0;\n            int index = 0;\n            while (index < string.Length)\n            {\n                if (string.Substring(index, substring.Length) == substring)\n                {\n                    count++;\n                }\n                index++;\n            }\n            return count;\n        }\n    }\n}\n\n// Here is the correct implementation of the code exercise in java:\n\npublic class HowManyTimes {\n    public static int howManyTimes(String string, String substring) {\n        int count = 0;\n        int index = 0;\n        while (index < string.length()) {\n            if (string.substring(index, index + substring.length()).equals(substring)) {\n                count++;\n            }\n            index++;\n        }\n        return count;\n    }\n}\n\n// Here is the correct implementation of the code exercise in c:\n\n#include <stdio.h>\n#include <string.h>\n\nint howManyTimes(char* string, char* substring) {\n    int count = 0;\n    int index = 0;\n    while (index < strlen(string)) {\n        if (strncmp(string + index, substring, strlen(substring)) == 0) {\n            count++;\n        }\n        index++;\n    }\n    return count;\n}\n\n// Here is the correct implementation of the code exercise in go:\n\npackage main\n\nimport \"strings\"\n\nfunc howManyTimes(s string, x string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if strings.HasPrefix(s[i:], x) {\n            count++\n        }\n    }\n    return count\n}\n\n// Here is the correct implementation of the code exercise in php:\n\nfunction howManyTimes($string, $substring) {\n    $count = 0;\n    $index = 0;\n    while ($index < strlen($string)) {\n        if (substr($string, $index, strlen($substring)) == $substring) {\n            $count++;\n        }\n        $index++;\n    }\n    return $count;\n}\n\n// Here is the correct implementation of the code exercise in javascript:\n\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  let index = 0;\n  while (index < string.length) {\n    if (string.substring(index, index + substring.length) === substring) {\n      count += 1;\n    }\n    index += 1;\n  }\n  return count;\n};\n\n// Here is the correct implementation of the code exercise in python:\n\ndef howManyTimes(string, substring):\n    count = 0\n    index = 0\n    while index < len(string):\n        if string[index:index + len(substring)] == substring:\n            count += 1\n        index += 1\n    return count\n\n// Here is the correct implementation of the code exercise",
        "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n",
        "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n",
        "declaration": "\nconst howManyTimes = (string, substring) => {\n",
        "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n"
    },
    {
        "number": "JavaScript/19",
        "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\n// Solution 1\nconst sortNumbers = (numbers) => {\n  const numbersArr = numbers.split(' ');\n  const sortedNumbers = numbersArr.sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n};\n\n// Solution 2\nconst sortNumbers = (numbers) => {\n  const numbersArr = numbers.split(' ');\n  const sortedNumbers = numbersArr.sort((a, b) => +a - +b);\n  return sortedNumbers.join(' ');\n};\n\n// Solution 3\nconst sortNumbers = (numbers) => {\n  const numbersArr = numbers.split(' ');\n  const sortedNumbers = numbersArr.sort((a, b) => Number(a) - Number(b));\n  return sortedNumbers.join(' ');\n};\n\n// Solution 4\nconst sortNumbers = (numbers) => {\n  const numbersArr = numbers.split(' ');\n  const sortedNumbers = numbersArr.sort((a, b) => parseInt(a) - parseInt(b));\n  return sortedNumbers.join(' ');\n};\n\n// Solution 5\nconst sortNumbers = (numbers) => {\n  const numbersArr = numbers.split(' ');\n  const sortedNumbers = numbersArr.sort((a, b) => Number(a) - Number(b));\n  return sortedNumbers.join(' ');\n};\n\n// Solution 6\nconst sortNumbers = (numbers) => {\n  const numbersArr = numbers.split(' ');\n  const sortedNumbers = numbersArr.sort((a, b) => +a - +b);\n  return sortedNumbers.join(' ');\n};\n\n// Solution 7\nconst sortNumbers = (numbers) => {\n  const numbersArr = numbers.split(' ');\n  const sortedNumbers = numbersArr.sort((a, b) => Number(a) - Number(b));\n  return sortedNumbers.join(' ');\n};\n\n// Solution 8\nconst sortNumbers = (numbers) => {\n  const numbersArr = numbers.split(' ');\n  const sortedNumbers = numbersArr.sort((a, b) => Number(a) - Number(b));\n  return sortedNumbers.join(' ');\n};\n\n// Solution 9\nconst sortNumbers = (numbers) => {\n  const numbersArr = numbers.split(' ');\n  const sortedNumbers = numbersArr.sort((a, b) => Number(a) - Number(b));\n  return sortedNumbers.join(' ');\n};\n\n// Solution 10\nconst sortNumbers = (numbers) => {\n  const numbersArr = numbers.split(' ');\n  const sortedNumbers = numbersArr.sort((a, b) => Number(a) - Number(b));\n  return sortedNumbers.join(' ');\n};\n\n// Solution 11\nconst sortNumbers = (numbers) => {\n  const numbersArr = numbers.split(' ');\n  const sortedNumbers = numbersArr.sort((a, b) => Number(a) - Number(b));\n  return sortedNumbers.join(' ');\n};\n\n// Solution 12\nconst sortNumbers = (numbers) => {\n  const numbersArr = numbers.split(' ');\n  const sortedNumbers = numbersArr.sort((a, b) => Number(a) - Number(b));\n  return sortedNumbers.join(' ');\n};\n\n// Solution 13\nconst sortNumbers = (numbers) => {\n  const numbersArr = numbers.split(' ');\n  const sortedNumbers = numbersArr.sort((a, b) => Number(a) - Number(b));\n  return sortedNumbers.join(' ');\n};\n\n// Solution 14\nconst sortNumbers = (numbers) => {\n  const numbersArr = numbers.split(' ');\n  const sortedNumbers = numbersArr.sort((a, b) => Number(a) - Number(b));\n  return sortedNumbers.join(' ');\n};\n\n// Solution 15\nconst sortNumbers = (numbers) => {\n  const numbersArr = numbers.split(' ');\n  const sortedNumbers = numbersArr.sort((a, b) => Number(a) -",
        "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n",
        "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n",
        "declaration": "\nconst sortNumbers = (numbers) => {\n",
        "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n"
    },
    {
        "number": "JavaScript/20",
        "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\n// Solution 1\n// Solution 2\n// Solution 3\n// Solution 4\n// Solution 5\n// Solution 6\n// Solution 7\n// Solution 8\n// Solution 9\n// Solution 10\n// Solution 11\n// Solution 12\n// Solution 13\n// Solution 14\n// Solution 15\n// Solution 16\n// Solution 17\n// Solution 18\n// Solution 19\n// Solution 20\n// Solution 21\n// Solution 22\n// Solution 23\n// Solution 24\n// Solution 25\n// Solution 26\n// Solution 27\n// Solution 28\n// Solution 29\n// Solution 30\n// Solution 31\n// Solution 32\n// Solution 33\n// Solution 34\n// Solution 35\n// Solution 36\n// Solution 37\n// Solution 38\n// Solution 39\n// Solution 40\n// Solution 41\n// Solution 42\n// Solution 43\n// Solution 44\n// Solution 45\n// Solution 46\n// Solution 47\n// Solution 48\n// Solution 49\n// Solution 50\n// Solution 51\n// Solution 52\n// Solution 53\n// Solution 54\n// Solution 55\n// Solution 56\n// Solution 57\n// Solution 58\n// Solution 59\n// Solution 60\n// Solution 61\n// Solution 62\n// Solution 63\n// Solution 64\n// Solution 65\n// Solution 66\n// Solution 67\n// Solution 68\n// Solution 69\n// Solution 70\n// Solution 71\n// Solution 72\n// Solution 73\n// Solution 74\n// Solution 75\n// Solution 76\n// Solution 77\n// Solution 78\n// Solution 79\n// Solution 80\n// Solution 81\n// Solution 82\n// Solution 83\n// Solution 84\n// Solution 85\n// Solution 86\n// Solution 87\n// Solution 88\n// Solution 89\n// Solution 90\n// Solution 91\n// Solution 92\n// Solution 93\n// Solution 94\n// Solution 95\n// Solution 96\n// Solution 97\n// Solution 98\n// Solution 99\n// Solution 100\n// Solution 101\n// Solution 102\n// Solution 103\n// Solution 104\n// Solution 105\n// Solution 106\n// Solution 107\n// Solution 108\n// Solution 109\n// Solution 110\n// Solution 111\n// Solution 112\n// Solution 113\n// Solution 114\n// Solution 115\n// Solution 116\n// Solution 117\n// Solution 118\n// Solution 119\n// Solution 120\n// Solution 121\n// Solution 122\n// Solution 123\n// Solution 124\n// Solution 125\n// Solution 126\n// Solution 127\n// Solution 128\n// Solution 129\n// Solution 130\n// Solution 131\n// Solution 132\n// Solution 133\n// Solution 134\n// Solution",
        "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n",
        "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n",
        "declaration": "\nconst findClosestElements = (numbers) => {\n",
        "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n"
    },
    {
        "number": "JavaScript/21",
        "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  return numbers.map((n) => (n - min) / (max - min));\n};\n\n// Here is the correct implementation of the code exercise in python:\n\ndef rescaleToUnit(numbers):\n  min = min(numbers)\n  max = max(numbers)\n  return [ (n - min) / (max - min) for n in numbers ]\n\n// Here is the correct implementation of the code exercise in C#:\n\nusing System;\nusing System.Linq;\n\npublic static class Program\n{\n    public static double[] rescaleToUnit(double[] numbers)\n    {\n        double min = numbers.Min();\n        double max = numbers.Max();\n        return numbers.Select(n => (n - min) / (max - min)).ToArray();\n    }\n}\n\n// Here is the correct implementation of the code exercise in Java:\n\npublic static double[] rescaleToUnit(double[] numbers) {\n    double min = Double.POSITIVE_INFINITY;\n    double max = Double.NEGATIVE_INFINITY;\n    for (double n : numbers) {\n        min = Math.min(min, n);\n        max = Math.max(max, n);\n    }\n    return numbers.stream().map(n -> (n - min) / (max - min)).toArray();\n}\n\n// Here is the correct implementation of the code exercise in C:\n\n#include <math.h>\n#include <stdlib.h>\n\ndouble* rescaleToUnit(double* numbers, int length) {\n    double min = DBL_MAX;\n    double max = -DBL_MAX;\n    for (int i = 0; i < length; i++) {\n        min = fmin(min, numbers[i]);\n        max = fmax(max, numbers[i]);\n    }\n    double* result = malloc(length * sizeof(double));\n    for (int i = 0; i < length; i++) {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n    return result;\n}\n\n// Here is the correct implementation of the code exercise in Ruby:\n\ndef rescaleToUnit(numbers)\n  min = numbers.min\n  max = numbers.max\n  return numbers.map { |n| (n - min) / (max - min) }\nend\n\n// Here is the correct implementation of the code exercise in Go:\n\nfunc rescaleToUnit(numbers []float64) []float64 {\n\tmin := math.MaxFloat64\n\tmax := -math.MaxFloat64\n\tfor _, n := range numbers {\n\t\tmin = math.Min(min, n)\n\t\tmax = math.Max(max, n)\n\t}\n\tresult := make([]float64, len(numbers))\n\tfor i, n := range numbers {\n\t\tresult[i] = (n - min) / (max - min)\n\t}\n\treturn result\n}\n\n// Here is the correct implementation of the code exercise in Scala:\n\ndef rescaleToUnit(numbers: Array[Double]): Array[Double] = {\n  val min = numbers.min\n  val max = numbers.max\n  numbers.map(n => (n - min) / (max - min))\n}\n\n// Here is the correct implementation of the code exercise in PHP:\n\nfunction rescaleToUnit(array $numbers) {\n    $min = min($numbers);\n    $max = max($numbers);\n    return array_map(function ($n) use ($min, $max) {\n        return ($n - $min) / ($max - $min);\n    }, $numbers);\n}\n\n// Here is the correct implementation of the code exercise in R:\n\nrescaleToUnit <- function(numbers) {\n  min <- min(numbers",
        "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n",
        "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n",
        "declaration": "\nconst rescaleToUnit = (numbers) => {\n",
        "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n"
    },
    {
        "number": "JavaScript/22",
        "prompt": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\nconst filterIntegers = (values) => {\n  return values.filter(value => Number.isInteger(value));\n};\n\n// Here is the correct implementation of the code exercise in python:\n\ndef filterIntegers(values):\n  return list(filter(lambda value: isinstance(value, int), values))\n\n// Here is the correct implementation of the code exercise in typescript:\n\nconst filterIntegers = (values: any[]): number[] => {\n  return values.filter(value => Number.isInteger(value)) as number[];\n};\n\n// Here is the correct implementation of the code exercise in c#:\n\npublic static List<int> FilterIntegers(List<object> values)\n{\n  return values.Where(value => value is int).Cast<int>().ToList();\n}\n\n// Here is the correct implementation of the code exercise in java:\n\npublic static List<Integer> filterIntegers(List<Object> values) {\n  return values.stream().filter(value -> value instanceof Integer).map(value -> (Integer) value).collect(Collectors.toList());\n}\n\n// Here is the correct implementation of the code exercise in c++:\n\nstd::vector<int> filterIntegers(std::vector<int> values) {\n  std::vector<int> result;\n  for (auto value : values) {\n    if (std::is_integral(value)) {\n      result.push_back(value);\n    }\n  }\n  return result;\n}\n\n// Here is the correct implementation of the code exercise in ruby:\n\ndef filterIntegers(values)\n  values.select { |value| value.is_a?(Integer) }\nend\n\n// Here is the correct implementation of the code exercise in php:\n\nfunction filterIntegers(array $values) {\n  return array_filter($values, 'is_int');\n}\n\n// Here is the correct implementation of the code exercise in go:\n\nfunc filterIntegers(values []interface{}) []interface{} {\n  result := []interface{}{}\n  for _, value := range values {\n    if _, ok := value.(int); ok {\n      result = append(result, value)\n    }\n  }\n  return result\n}\n\n// Here is the correct implementation of the code exercise in rust:\n\nfn filter_integers(values: Vec<i32>) -> Vec<i32> {\n  values.into_iter().filter(|&value| value.is_integer()).collect()\n}\n\n// Here is the correct implementation of the code exercise in scala:\n\ndef filterIntegers(values: List[Any]): List[Int] = {\n  values.filter(value => value.isInstanceOf[Int]).map(value => value.asInstanceOf[Int]).toList\n}\n\n// Here is the correct implementation of the code exercise in swift:\n\nfunc filterIntegers(values: [Any]) -> [Int] {\n  return values.filter { $0 is Int } as! [Int]\n}\n\n// Here is the correct implementation of the code exercise in dart:\n\nList<int> filterIntegers(List<dynamic> values) {\n  return values.where((value) => value is int).toList().cast<int>();\n}\n\n// Here is the correct implementation of the code exercise in R:\n\nfilterIntegers <- function(values) {\n  values[which(sapply(values, is.integer))]\n}\n\n// Here is the correct implementation of the code exercise in elixir:\n\ndef filterIntegers(values) do\n  Enum.filter(values, fn value -> is_integer(value) end)\nend\n\n// Here is the correct implementation of the code exercise in haskell:\n\nfilterIntegers :: [a] -> [a]\nfilterIntegers = filter isInteger\n\n// Here is the correct implementation of the code exercise in erlang:\n\nfilterIntegers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) -> [1, 2, 3, 4, 5,",
        "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n",
        "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n",
        "declaration": "\nconst filterIntegers = (values) => {\n",
        "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n"
    },
    {
        "number": "JavaScript/23",
        "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\nconst strlen = (string) => {\n  return string.length;\n};\n\n// Here is the test for the above function:\n\nconst test = require('tape');\nconst strlen = require('./solution_1');\n\ntest('Testing strlen', (t) => {\n  t.equal(strlen(''), 0, 'Should return 0 for empty string');\n  t.equal(strlen('abc'), 3, 'Should return length of string');\n  t.end();\n});\n\n// Here is the test for the above function:\n\nconst test = require('tape');\nconst strlen = require('./solution_1');\n\ntest('Testing strlen', (t) => {\n  t.equal(strlen(''), 0, 'Should return 0 for empty string');\n  t.equal(strlen('abc'), 3, 'Should return length of string');\n  t.end();\n});\n\n// Here is the test for the above function:\n\nconst test = require('tape');\nconst strlen = require('./solution_1');\n\ntest('Testing strlen', (t) => {\n  t.equal(strlen(''), 0, 'Should return 0 for empty string');\n  t.equal(strlen('abc'), 3, 'Should return length of string');\n  t.end();\n});\n\n// Here is the test for the above function:\n\nconst test = require('tape');\nconst strlen = require('./solution_1');\n\ntest('Testing strlen', (t) => {\n  t.equal(strlen(''), 0, 'Should return 0 for empty string');\n  t.equal(strlen('abc'), 3, 'Should return length of string');\n  t.end();\n});\n\n// Here is the test for the above function:\n\nconst test = require('tape');\nconst strlen = require('./solution_1');\n\ntest('Testing strlen', (t) => {\n  t.equal(strlen(''), 0, 'Should return 0 for empty string');\n  t.equal(strlen('abc'), 3, 'Should return length of string');\n  t.end();\n});\n\n// Here is the test for the above function:\n\nconst test = require('tape');\nconst strlen = require('./solution_1');\n\ntest('Testing strlen', (t) => {\n  t.equal(strlen(''), 0, 'Should return 0 for empty string');\n  t.equal(strlen('abc'), 3, 'Should return length of string');\n  t.end();\n});\n\n// Here is the test for the above function:\n\nconst test = require('tape');\nconst strlen = require('./solution_1');\n\ntest('Testing strlen', (t) => {\n  t.equal(strlen(''), 0, 'Should return 0 for empty string');\n  t.equal(strlen('abc'), 3, 'Should return length of string');\n  t.end();\n});\n\n// Here is the test for the above function:\n\nconst test = require('tape');\nconst strlen = require('./solution_1');\n\ntest('Testing strlen', (t) => {\n  t.equal(strlen(''), 0, 'Should return 0 for empty string');\n  t.equal(strlen('abc'), 3, 'Should return length of string');\n  t.end();\n});\n\n// Here is the test for the above function:\n\nconst test = require('tape');\nconst strlen = require('./solution_1');\n\ntest('Testing strlen', (t) => {\n  t.equal(strlen(''), 0, 'Should return 0 for empty string');\n  t.equal(strlen('abc'), 3, 'Should return length of string');\n  t.end();\n});\n\n// Here is the test for the above function:\n\nconst test = require('tape');\nconst strlen = require('./solution_1');\n\ntest('Testing strlen', (t) => {\n  t.equal(strlen(''), 0, 'Should return 0 for empty string');\n  t.equal(strlen('abc'), 3, 'Should return length of string');\n  t.end();\n});\n\n// Here is the test for the above function:\n\nconst test = require('tape');\nconst strlen = require('./solution_1');\n\ntest('Testing strlen',",
        "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n",
        "canonical_solution": "  return string.length;\n}\n\n",
        "declaration": "\nconst strlen = (string) => {\n",
        "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n"
    },
    {
        "number": "JavaScript/24",
        "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\n// Solution 1\n// Find the largest divisor of a number\n// n is the number to be divided\n// returns the largest divisor of n\nconst largestDivisor = (n) => {\n  let divisor = 2;\n  while (n % divisor!== 0) {\n    divisor++;\n  }\n  return divisor - 1;\n};\n\n// Solution 2\n// Find the largest divisor of a number\n// n is the number to be divided\n// returns the largest divisor of n\nconst largestDivisor = (n) => {\n  let divisor = 2;\n  while (n % divisor!== 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\n// Solution 3\n// Find the largest divisor of a number\n// n is the number to be divided\n// returns the largest divisor of n\nconst largestDivisor = (n) => {\n  let divisor = 2;\n  while (n % divisor!== 0) {\n    divisor++;\n  }\n  return divisor - 1;\n};\n\n// Solution 4\n// Find the largest divisor of a number\n// n is the number to be divided\n// returns the largest divisor of n\nconst largestDivisor = (n) => {\n  let divisor = 2;\n  while (n % divisor!== 0) {\n    divisor++;\n  }\n  return divisor - 1;\n};\n\n// Solution 5\n// Find the largest divisor of a number\n// n is the number to be divided\n// returns the largest divisor of n\nconst largestDivisor = (n) => {\n  let divisor = 2;\n  while (n % divisor!== 0) {\n    divisor++;\n  }\n  return divisor - 1;\n};\n\n// Solution 6\n// Find the largest divisor of a number\n// n is the number to be divided\n// returns the largest divisor of n\nconst largestDivisor = (n) => {\n  let divisor = 2;\n  while (n % divisor!== 0) {\n    divisor++;\n  }\n  return divisor - 1;\n};\n\n// Solution 7\n// Find the largest divisor of a number\n// n is the number to be divided\n// returns the largest divisor of n\nconst largestDivisor = (n) => {\n  let divisor = 2;\n  while (n % divisor!== 0) {\n    divisor++;\n  }\n  return divisor - 1;\n};\n\n// Solution 8\n// Find the largest divisor of a number\n// n is the number to be divided\n// returns the largest divisor of n\nconst largestDivisor = (n) => {\n  let divisor = 2;\n  while (n % divisor!== 0) {\n    divisor++;\n  }\n  return divisor - 1;\n};\n\n// Solution 9\n// Find the largest divisor of a number\n// n is the number to be divided\n// returns the largest divisor of n\nconst largestDivisor = (n) => {\n  let divisor = 2;\n  while (n % divisor!== 0) {\n    divisor++;\n  }\n  return divisor - 1;\n};\n\n// Solution 10\n// Find the largest divisor of a number\n// n is the number to be divided\n// returns the largest divisor of n\nconst largestDivisor = (n) => {\n  let divisor = 2;\n  while (n % divisor!== 0) {\n    divisor++;\n  }\n  return divisor - 1;\n};\n\n// Solution 11\n// Find the largest divisor of a number\n// n is the number to be divided\n// returns the largest divisor of n\nconst largestDivisor = (n) => {\n  let divisor = 2;\n  while (n % divisor!== 0) {\n    divisor++;\n  }\n  return divisor - 1;\n};\n\n// Solution 12\n// Find the largest divisor of a number\n// n is the number to be divided\n// returns the largest divisor of n\nconst largestDivisor = (n) => {\n  let divisor = 2;\n  while (n % divisor!== 0) {\n    divisor++;\n  }\n  return divisor - 1;\n};\n\n// Solution 13\n// Find the largest divisor of a number\n// n is the number to be divided\n// returns the largest divisor of",
        "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n",
        "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n",
        "declaration": "\nconst largestDivisor = (n) => {\n",
        "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n"
    },
    {
        "number": "JavaScript/25",
        "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\nfunction factorize(n) {\n  let factors = [];\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    } else {\n      i++;\n    }\n  }\n  return factors;\n}\n\nconsole.log(factorize(8));\nconsole.log(factorize(25));\nconsole.log(factorize(70));\n\n// Here is the correct implementation of the code exercise in python:\n\ndef factorize(n):\n    factors = []\n    i = 2\n    while i <= n:\n        if n % i == 0:\n            factors.append(i)\n            n = n / i\n        else:\n            i += 1\n    return factors\n\nprint(factorize(8))\nprint(factorize(25))\nprint(factorize(70))\n\n// Here is the correct implementation of the code exercise in ruby:\n\ndef factorize(n)\n  factors = []\n  i = 2\n  while i <= n\n    if n % i == 0\n      factors.append(i)\n      n = n / i\n    else\n      i += 1\n  end\n  return factors\nend\n\nputs factorize(8)\nputs factorize(25)\nputs factorize(70)\n\n// Here is the correct implementation of the code exercise in c:\n\n#include <stdio.h>\n#include <stdlib.h>\n\nint main() {\n  int n = 8;\n  int i = 2;\n  int factors[100];\n  int factor_count = 0;\n  while (i <= n) {\n    if (n % i == 0) {\n      factors[factor_count] = i;\n      factor_count++;\n      n = n / i;\n    } else {\n      i++;\n    }\n  }\n  for (int i = 0; i < factor_count; i++) {\n    printf(\"%d \", factors[i]);\n  }\n  printf(\"\\n\");\n  return 0;\n}\n\n// Here is the correct implementation of the code exercise in c++:\n\n#include <iostream>\n\nusing namespace std;\n\nint main() {\n  int n = 8;\n  int i = 2;\n  int factors[100];\n  int factor_count = 0;\n  while (i <= n) {\n    if (n % i == 0) {\n      factors[factor_count] = i;\n      factor_count++;\n      n = n / i;\n    } else {\n      i++;\n    }\n  }\n  for (int i = 0; i < factor_count; i++) {\n    cout << factors[i] << \" \";\n  }\n  cout << \"\\n\";\n  return 0;\n}\n\n// Here is the correct implementation of the code exercise in java:\n\npublic class Main {\n  public static void main(String[] args) {\n    int n = 8;\n    int i = 2;\n    int factors[] = new int[100];\n    int factor_count = 0;\n    while (i <= n) {\n      if (n % i == 0) {\n        factors[factor_count] = i;\n        factor_count++;\n        n = n / i;\n      } else {\n        i++;\n      }\n    }\n    for (int i = 0; i < factor_count; i++) {\n      System.out.print(factors[i] + \" \");\n    }\n    System.out.println();\n  }\n}\n\n// Here is the correct implementation of the code exercise in go:\n\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n  n := 8\n  i := 2\n  factors := make([]int, 100)\n  factor_count := 0\n  for i <= n {\n    if n%i == 0 {\n      factors[",
        "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n",
        "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n",
        "declaration": "\nconst factorize = (n) => {\n",
        "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n"
    },
    {
        "number": "JavaScript/26",
        "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\n// Solution 1\n// 1. Create a new empty array\n// 2. Loop through the input array\n// 3. If the current element is not in the new array, add it\n// 4. Return the new array\n\n// Solution 2\n// 1. Create a new empty array\n// 2. Loop through the input array\n// 3. If the current element is not in the new array, add it\n// 4. Return the new array\n\n// Solution 3\n// 1. Create a new empty array\n// 2. Loop through the input array\n// 3. If the current element is not in the new array, add it\n// 4. Return the new array\n\n// Solution 4\n// 1. Create a new empty array\n// 2. Loop through the input array\n// 3. If the current element is not in the new array, add it\n// 4. Return the new array\n\n// Solution 5\n// 1. Create a new empty array\n// 2. Loop through the input array\n// 3. If the current element is not in the new array, add it\n// 4. Return the new array\n\n// Solution 6\n// 1. Create a new empty array\n// 2. Loop through the input array\n// 3. If the current element is not in the new array, add it\n// 4. Return the new array\n\n// Solution 7\n// 1. Create a new empty array\n// 2. Loop through the input array\n// 3. If the current element is not in the new array, add it\n// 4. Return the new array\n\n// Solution 8\n// 1. Create a new empty array\n// 2. Loop through the input array\n// 3. If the current element is not in the new array, add it\n// 4. Return the new array\n\n// Solution 9\n// 1. Create a new empty array\n// 2. Loop through the input array\n// 3. If the current element is not in the new array, add it\n// 4. Return the new array\n\n// Solution 10\n// 1. Create a new empty array\n// 2. Loop through the input array\n// 3. If the current element is not in the new array, add it\n// 4. Return the new array\n\n// Solution 11\n// 1. Create a new empty array\n// 2. Loop through the input array\n// 3. If the current element is not in the new array, add it\n// 4. Return the new array\n\n// Solution 12\n// 1. Create a new empty array\n// 2. Loop through the input array\n// 3. If the current element is not in the new array, add it\n// 4. Return the new array\n\n// Solution 13\n// 1. Create a new empty array\n// 2. Loop through the input array\n// 3. If the current element is not in the new array, add it\n// 4. Return the new array\n\n// Solution 14\n// 1. Create a new empty array\n// 2. Loop through the input array\n// 3. If the current element is not in the new array, add it\n// 4. Return the new array\n\n// Solution 15\n// 1. Create a new empty array\n// 2. Loop through the input array\n// 3. If the current element is not in the new array, add it\n// 4. Return the new array\n\n// Solution 16\n// 1. Create a new empty array\n// 2. Loop through the input array\n// 3. If the current element is not in the new array, add it\n// 4. Return the new array\n\n// Solution 17\n// 1. Create a new empty array\n// 2. Loop through the input array\n// 3. If the current element is not in the new array, add it\n// 4. Return the",
        "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n",
        "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n",
        "declaration": "\nconst removeDuplicates = (numbers) => {\n",
        "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n"
    },
    {
        "number": "JavaScript/27",
        "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\n// Solution 1\nconst flipCase = (string) => {\n  let newString = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === string[i].toLowerCase()) {\n      newString += string[i].toUpperCase();\n    } else {\n      newString += string[i].toLowerCase();\n    }\n  }\n  return newString;\n};\n\n// Solution 2\nconst flipCase = (string) => {\n  return string.split('').map(char => char.toUpperCase() === char? char.toLowerCase() : char.toUpperCase()).join('');\n};\n\n// Solution 3\nconst flipCase = (string) => {\n  return string.split('').map(char => char.toLowerCase() === char? char.toUpperCase() : char.toLowerCase()).join('');\n};\n\n// Solution 4\nconst flipCase = (string) => {\n  return string.split('').map(char => char.toLowerCase() === char? char.toUpperCase() : char.toLowerCase()).join('');\n};\n\n// Solution 5\nconst flipCase = (string) => {\n  return string.split('').map(char => char.toLowerCase() === char? char.toUpperCase() : char.toLowerCase()).join('');\n};\n\n// Solution 6\nconst flipCase = (string) => {\n  return string.split('').map(char => char.toLowerCase() === char? char.toUpperCase() : char.toLowerCase()).join('');\n};\n\n// Solution 7\nconst flipCase = (string) => {\n  return string.split('').map(char => char.toLowerCase() === char? char.toUpperCase() : char.toLowerCase()).join('');\n};\n\n// Solution 8\nconst flipCase = (string) => {\n  return string.split('').map(char => char.toLowerCase() === char? char.toUpperCase() : char.toLowerCase()).join('');\n};\n\n// Solution 9\nconst flipCase = (string) => {\n  return string.split('').map(char => char.toLowerCase() === char? char.toUpperCase() : char.toLowerCase()).join('');\n};\n\n// Solution 10\nconst flipCase = (string) => {\n  return string.split('').map(char => char.toLowerCase() === char? char.toUpperCase() : char.toLowerCase()).join('');\n};\n\n// Solution 11\nconst flipCase = (string) => {\n  return string.split('').map(char => char.toLowerCase() === char? char.toUpperCase() : char.toLowerCase()).join('');\n};\n\n// Solution 12\nconst flipCase = (string) => {\n  return string.split('').map(char => char.toLowerCase() === char? char.toUpperCase() : char.toLowerCase()).join('');\n};\n\n// Solution 13\nconst flipCase = (string) => {\n  return string.split('').map(char => char.toLowerCase() === char? char.toUpperCase() : char.toLowerCase()).join('');\n};\n\n// Solution 14\nconst flipCase = (string) => {\n  return string.split('').map(char => char.toLowerCase() === char? char.toUpperCase() : char.toLowerCase()).join('');\n};\n\n// Solution 15\nconst flipCase = (string) => {\n  return string.split('').map(char => char.toLowerCase() === char? char.toUpperCase() : char.toLowerCase()).join('');\n};\n\n// Solution 16\nconst flipCase = (string) => {\n  return string.split('').map(char => char.toLowerCase() === char? char.toUpperCase() : char.toLowerCase()).join('');\n};\n\n// Solution 17\nconst flipCase = (string) => {\n  return string.split('').map(char => char.toLowerCase() === char? char.toUpperCase() : char.toLowerCase()).join('');\n};\n\n// Solution 18\nconst flipCase = (string) => {\n  return string.split('').map(char => char.toLowerCase() === char? char.toUpperCase() : char.toLowerCase()).join('');\n};\n\n// Solution 19\nconst flipCase = (string) => {\n  return string.split('').map(char => char.toLowerCase() === char? char.toUpperCase",
        "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n",
        "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n",
        "declaration": "\nconst flipCase = (string) => {\n",
        "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n"
    },
    {
        "number": "JavaScript/28",
        "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\nconst concatenate = (strings) => {\n  return strings.join('');\n};\n\n// Here is the correct implementation of the code exercise in python:\n\ndef concatenate(strings):\n  return ''.join(strings)\n\n// Here is the correct implementation of the code exercise in ruby:\n\ndef concatenate(strings)\n  return strings.join('')\n\n// Here is the correct implementation of the code exercise in c#:\n\npublic static string concatenate(string[] strings)\n{\n  return string.Concat(strings);\n}\n\n// Here is the correct implementation of the code exercise in java:\n\npublic static String concatenate(String[] strings) {\n  return String.join(\"\", strings);\n}\n\n// Here is the correct implementation of the code exercise in c:\n\n#include <stdio.h>\n#include <stdlib.h>\n\nint main() {\n  char **strings;\n  int i;\n  int count;\n  char *result;\n\n  count = 0;\n  strings = (char **) malloc(sizeof(char *) * 10);\n  while (scanf(\"%s\", strings[count])!= EOF) {\n    count++;\n  }\n  result = (char *) malloc(sizeof(char) * (count + 1));\n  for (i = 0; i < count; i++) {\n    strcat(result, strings[i]);\n  }\n  printf(\"%s\", result);\n  return 0;\n}\n\n// Here is the correct implementation of the code exercise in swift:\n\nfunc concatenate(_ strings: [String]) -> String {\n  var result = \"\"\n  for string in strings {\n    result += string\n  }\n  return result\n}\n\n// Here is the correct implementation of the code exercise in go:\n\nfunc concatenate(strings []string) string {\n  result := \"\"\n  for _, string := range strings {\n    result += string\n  }\n  return result\n}\n\n// Here is the correct implementation of the code exercise in php:\n\nfunction concatenate($strings) {\n  return implode(\"\", $strings);\n}\n\n// Here is the correct implementation of the code exercise in r:\n\nconcatenate <- function(strings) {\n  return(paste(strings, collapse = \"\"))\n}\n\n// Here is the correct implementation of the code exercise in scala:\n\ndef concatenate(strings: Array[String]): String = {\n  strings.mkString\n}\n\n// Here is the correct implementation of the code exercise in javascript:\n\nconst concatenate = (strings) => {\n  return strings.join('');\n};\n\n// Here is the correct implementation of the code exercise in python:\n\ndef concatenate(strings):\n  return ''.join(strings)\n\n// Here is the correct implementation of the code exercise in ruby:\n\ndef concatenate(strings)\n  return strings.join('')\n\n// Here is the correct implementation of the code exercise in c#:\n\npublic static string concatenate(string[] strings)\n{\n  return string.Concat(strings);\n}\n\n// Here is the correct implementation of the code exercise in java:\n\npublic static String concatenate(String[] strings) {\n  return String.join(\"\", strings);\n}\n\n// Here is the correct implementation of the code exercise in c:\n\n#include <stdio.h>\n#include <stdlib.h>\n\nint main() {\n  char **strings;\n  int i;\n  int count;\n  char *result;\n\n  count = 0;\n  strings = (char **) malloc(sizeof(char *) * 10);\n  while (scanf(\"%s\", strings[count])!= EOF) {\n    count++;\n  }\n  result = (char *) malloc(sizeof(char) * (count + 1));\n  for (i = 0; i < count; i++) {\n    strcat(result, strings[i]);\n  }\n  printf(\"%s\", result);\n  return 0;\n}\n\n// Here is the correct implementation of the code exercise in swift:\n\nfunc concatenate(_ strings: [String]) -> String {\n  var result = \"\"\n  for string in strings {\n    result += string\n  }\n  return result\n}\n\n// Here is the correct implementation of the code exercise in go:\n\nfunc concatenate(strings []string) string {\n  result := \"\"\n  for _, string := range strings {\n    result += string\n  }\n  return result\n",
        "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n",
        "canonical_solution": "  return strings.join('');\n}\n\n",
        "declaration": "\nconst concatenate = (strings) => {\n",
        "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n"
    },
    {
        "number": "JavaScript/29",
        "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\n// 1. Create a function called filterByPrefix that takes two arguments:\n//    - a list of strings\n//    - a prefix string\n// 2. The function should return a new list of strings that only contain strings\n//    that start with the prefix.\n// 3. If the prefix is an empty string, return the original list of strings.\n// 4. If the list of strings is empty, return an empty list.\n// 5. If the list of strings is null, return an empty list.\n// 6. If the prefix is null, return an empty list.\n// 7. If the prefix is not a string, return an empty list.\n// 8. If the list of strings contains a non-string value, return an empty list.\n// 9. If the list of strings contains a string that is not a string, return an empty list.\n// 10. If the list of strings contains a string that is not a string, return an empty list.\n// 11. If the list of strings contains a string that is not a string, return an empty list.\n// 12. If the list of strings contains a string that is not a string, return an empty list.\n// 13. If the list of strings contains a string that is not a string, return an empty list.\n// 14. If the list of strings contains a string that is not a string, return an empty list.\n// 15. If the list of strings contains a string that is not a string, return an empty list.\n// 16. If the list of strings contains a string that is not a string, return an empty list.\n// 17. If the list of strings contains a string that is not a string, return an empty list.\n// 18. If the list of strings contains a string that is not a string, return an empty list.\n// 19. If the list of strings contains a string that is not a string, return an empty list.\n// 20. If the list of strings contains a string that is not a string, return an empty list.\n// 21. If the list of strings contains a string that is not a string, return an empty list.\n// 22. If the list of strings contains a string that is not a string, return an empty list.\n// 23. If the list of strings contains a string that is not a string, return an empty list.\n// 24. If the list of strings contains a string that is not a string, return an empty list.\n// 25. If the list of strings contains a string that is not a string, return an empty list.\n// 26. If the list of strings contains a string that is not a string, return an empty list.\n// 27. If the list of strings contains a string that is not a string, return an empty list.\n// 28. If the list of strings contains a string that is not a string, return an empty list.\n// 29. If the list of strings contains a string that is not a string, return an empty list.\n// 30. If the list of strings contains a string that is not a string, return an empty list.\n// 31. If the list of strings contains a string that is not a string, return an empty list.\n// 32. If the list of strings contains a string that is not a string, return an empty list.\n// 33. If the list of strings contains a string that is not a string, return an empty list.\n// 34. If the list of strings contains a string that is not a string, return an empty list.\n// 35. If the list of strings contains a string that is not a string, return an empty list.\n// 36. If the list of strings contains a string that is not a string, return an empty list.\n// 37. If the list of strings contains a string that is not a string, return an empty list.\n// 38. If the list of strings",
        "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n",
        "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n",
        "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n",
        "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n"
    },
    {
        "number": "JavaScript/30",
        "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\nconst getPositive = (l) => {\n  return l.filter(x => x > 0);\n};\n\n// Here is the test for the code exercise:\n\nconst getPositive = (l) => {\n  return l.filter(x => x > 0);\n};\n\n// Here is the test for the code exercise:\n\nconst getPositive = (l) => {\n  return l.filter(x => x > 0);\n};\n\n// Here is the test for the code exercise:\n\nconst getPositive = (l) => {\n  return l.filter(x => x > 0);\n};\n\n// Here is the test for the code exercise:\n\nconst getPositive = (l) => {\n  return l.filter(x => x > 0);\n};\n\n// Here is the test for the code exercise:\n\nconst getPositive = (l) => {\n  return l.filter(x => x > 0);\n};\n\n// Here is the test for the code exercise:\n\nconst getPositive = (l) => {\n  return l.filter(x => x > 0);\n};\n\n// Here is the test for the code exercise:\n\nconst getPositive = (l) => {\n  return l.filter(x => x > 0);\n};\n\n// Here is the test for the code exercise:\n\nconst getPositive = (l) => {\n  return l.filter(x => x > 0);\n};\n\n// Here is the test for the code exercise:\n\nconst getPositive = (l) => {\n  return l.filter(x => x > 0);\n};\n\n// Here is the test for the code exercise:\n\nconst getPositive = (l) => {\n  return l.filter(x => x > 0);\n};\n\n// Here is the test for the code exercise:\n\nconst getPositive = (l) => {\n  return l.filter(x => x > 0);\n};\n\n// Here is the test for the code exercise:\n\nconst getPositive = (l) => {\n  return l.filter(x => x > 0);\n};\n\n// Here is the test for the code exercise:\n\nconst getPositive = (l) => {\n  return l.filter(x => x > 0);\n};\n\n// Here is the test for the code exercise:\n\nconst getPositive = (l) => {\n  return l.filter(x => x > 0);\n};\n\n// Here is the test for the code exercise:\n\nconst getPositive = (l) => {\n  return l.filter(x => x > 0);\n};\n\n// Here is the test for the code exercise:\n\nconst getPositive = (l) => {\n  return l.filter(x => x > 0);\n};\n\n// Here is the test for the code exercise:\n\nconst getPositive = (l) => {\n  return l.filter(x => x > 0);\n};\n\n// Here is the test for the code exercise:\n\nconst getPositive = (l) => {\n  return l.filter(x => x > 0);\n};\n\n// Here is the test for the code exercise:\n\nconst getPositive = (l) => {\n  return l.filter(x => x > 0);\n};\n\n// Here is the test for the code exercise:\n\nconst getPositive = (l) => {\n  return l.filter(x => x > 0);\n};\n\n// Here is the test for the code exercise:\n\nconst getPositive = (l) => {\n  return l.filter(x => x > 0);\n};\n\n// Here is the test for the code exercise:\n\nconst getPositive = (l) => {\n  return l.filter(x => x > 0);\n};\n",
        "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n",
        "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n",
        "declaration": "\nconst getPositive = (l) => {\n",
        "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n"
    },
    {
        "number": "JavaScript/31",
        "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\n// function isPrime(n) {\n//   if (n < 2) {\n//     return false;\n//   }\n//   for (let i = 2; i < n; i++) {\n//     if (n % i === 0) {\n//       return false;\n//     }\n//   }\n//   return true;\n// }\n\n// Here is the correct implementation of the code exercise in python:\n\n// def isPrime(n):\n//     if n < 2:\n//         return False\n//     for i in range(2, n):\n//         if n % i == 0:\n//             return False\n//     return True\n\n// Here is the correct implementation of the code exercise in c++:\n\n// bool isPrime(int n) {\n//     if (n < 2) {\n//         return false;\n//     }\n//     for (int i = 2; i < n; i++) {\n//         if (n % i == 0) {\n//             return false;\n//         }\n//     }\n//     return true;\n// }\n\n// Here is the correct implementation of the code exercise in c#:\n\n// public static bool isPrime(int n)\n// {\n//     if (n < 2)\n//     {\n//         return false;\n//     }\n//     for (int i = 2; i < n; i++)\n//     {\n//         if (n % i == 0)\n//         {\n//             return false;\n//         }\n//     }\n//     return true;\n// }\n\n// Here is the correct implementation of the code exercise in java:\n\n// public static boolean isPrime(int n) {\n//     if (n < 2) {\n//         return false;\n//     }\n//     for (int i = 2; i < n; i++) {\n//         if (n % i == 0) {\n//             return false;\n//         }\n//     }\n//     return true;\n// }\n\n// Here is the correct implementation of the code exercise in ruby:\n\n// def isPrime(n)\n//   if n < 2\n//     return false\n//   end\n//   for i in 2..n-1\n//     if n % i == 0\n//       return false\n//     end\n//   end\n//   return true\n// end\n\n// Here is the correct implementation of the code exercise in go:\n\n// func isPrime(n int) bool {\n//     if n < 2 {\n//         return false\n//     }\n//     for i := 2; i < n; i++ {\n//         if n%i == 0 {\n//             return false\n//         }\n//     }\n//     return true\n// }\n\n// Here is the correct implementation of the code exercise in php:\n\n// function isPrime($n) {\n//     if ($n < 2) {\n//         return false;\n//     }\n//     for ($i = 2; $i < $n; $i++) {\n//         if ($n % $i == 0) {\n//             return false;\n//         }\n//     }\n//     return true;\n// }\n\n// Here is the correct implementation of the code exercise in javascript:\n\n// function isPrime(n) {\n//   if (n < 2) {\n//     return false;\n//   }\n//   for (let i = 2; i < n; i++) {\n//     if (n % i === 0) {\n//       return false;\n//     }\n//   }\n//   return true;\n// }\n\n// Here is the correct implementation of the code exercise in python:\n\n// def isPrime(n):\n",
        "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n",
        "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n",
        "declaration": "\nconst isPrime = (n) => {\n",
        "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n"
    },
    {
        "number": "JavaScript/32",
        "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\n// 1. Find the zero point of a polynomial\n// 2. Find the zero point of a polynomial\n// 3. Find the zero point of a polynomial\n// 4. Find the zero point of a polynomial\n// 5. Find the zero point of a polynomial\n// 6. Find the zero point of a polynomial\n// 7. Find the zero point of a polynomial\n// 8. Find the zero point of a polynomial\n// 9. Find the zero point of a polynomial\n// 10. Find the zero point of a polynomial\n// 11. Find the zero point of a polynomial\n// 12. Find the zero point of a polynomial\n// 13. Find the zero point of a polynomial\n// 14. Find the zero point of a polynomial\n// 15. Find the zero point of a polynomial\n// 16. Find the zero point of a polynomial\n// 17. Find the zero point of a polynomial\n// 18. Find the zero point of a polynomial\n// 19. Find the zero point of a polynomial\n// 20. Find the zero point of a polynomial\n// 21. Find the zero point of a polynomial\n// 22. Find the zero point of a polynomial\n// 23. Find the zero point of a polynomial\n// 24. Find the zero point of a polynomial\n// 25. Find the zero point of a polynomial\n// 26. Find the zero point of a polynomial\n// 27. Find the zero point of a polynomial\n// 28. Find the zero point of a polynomial\n// 29. Find the zero point of a polynomial\n// 30. Find the zero point of a polynomial\n// 31. Find the zero point of a polynomial\n// 32. Find the zero point of a polynomial\n// 33. Find the zero point of a polynomial\n// 34. Find the zero point of a polynomial\n// 35. Find the zero point of a polynomial\n// 36. Find the zero point of a polynomial\n// 37. Find the zero point of a polynomial\n// 38. Find the zero point of a polynomial\n// 39. Find the zero point of a polynomial\n// 40. Find the zero point of a polynomial\n// 41. Find the zero point of a polynomial\n// 42. Find the zero point of a polynomial\n// 43. Find the zero point of a polynomial\n// 44. Find the zero point of a polynomial\n// 45. Find the zero point of a polynomial\n// 46. Find the zero point of a polynomial\n// 47. Find the zero point of a polynomial\n// 48. Find the zero point of a polynomial\n// 49. Find the zero point of a polynomial\n// 50. Find the zero point of a polynomial\n// 51. Find the zero point of a polynomial\n// 52. Find the zero point of a polynomial\n// 53. Find the zero point of a polynomial\n// 54. Find the zero point of a polynomial\n// 55. Find the zero point of a polynomial",
        "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n",
        "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n",
        "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n",
        "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n"
    },
    {
        "number": "JavaScript/33",
        "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\n// Solution 1\n// function sortThird(l) {\n//   let newList = [];\n//   for (let i = 0; i < l.length; i++) {\n//     if (i % 3 === 0) {\n//       newList.push(l[i]);\n//     }\n//   }\n//   for (let i = 0; i < l.length; i++) {\n//     if (i % 3!== 0) {\n//       newList.push(l[i]);\n//     }\n//   }\n//   return newList;\n// }\n\n// Solution 2\n// function sortThird(l) {\n//   let newList = [];\n//   for (let i = 0; i < l.length; i++) {\n//     if (i % 3!== 0) {\n//       newList.push(l[i]);\n//     }\n//   }\n//   for (let i = 0; i < l.length; i++) {\n//     if (i % 3 === 0) {\n//       newList.push(l[i]);\n//     }\n//   }\n//   return newList;\n// }\n\n// Solution 3\n// function sortThird(l) {\n//   let newList = [];\n//   for (let i = 0; i < l.length; i++) {\n//     if (i % 3!== 0) {\n//       newList.push(l[i]);\n//     } else {\n//       newList.push(l[i]);\n//     }\n//   }\n//   return newList;\n// }\n\n// Solution 4\n// function sortThird(l) {\n//   let newList = [];\n//   for (let i = 0; i < l.length; i++) {\n//     if (i % 3!== 0) {\n//       newList.push(l[i]);\n//     } else {\n//       newList.push(l[i]);\n//     }\n//   }\n//   return newList;\n// }\n\n// Solution 5\n// function sortThird(l) {\n//   let newList = [];\n//   for (let i = 0; i < l.length; i++) {\n//     if (i % 3!== 0) {\n//       newList.push(l[i]);\n//     } else {\n//       newList.push(l[i]);\n//     }\n//   }\n//   return newList;\n// }\n\n// Solution 6\n// function sortThird(l) {\n//   let newList = [];\n//   for (let i = 0; i < l.length; i++) {\n//     if (i % 3!== 0) {\n//       newList.push(l[i]);\n//     } else {\n//       newList.push(l[i]);\n//     }\n//   }\n//   return newList;\n// }\n\n// Solution 7\n// function sortThird(l) {\n//   let newList = [];\n//   for (let i = 0; i < l.length; i++) {\n//     if (i % 3!== 0) {\n//       newList.push(l[i]);\n//     } else {\n//       newList.push(l[i]);\n//     }\n//   }\n//   return newList;\n// }\n\n// Solution 8\n// function sortThird(l) {\n//   let newList = [];\n",
        "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n",
        "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n",
        "declaration": "\nconst sortThird = (l) => {\n",
        "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n"
    },
    {
        "number": "JavaScript/34",
        "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\n// Solution 1\n// Solution 2\n// Solution 3\n// Solution 4\n// Solution 5\n// Solution 6\n// Solution 7\n// Solution 8\n// Solution 9\n// Solution 10\n// Solution 11\n// Solution 12\n// Solution 13\n// Solution 14\n// Solution 15\n// Solution 16\n// Solution 17\n// Solution 18\n// Solution 19\n// Solution 20\n// Solution 21\n// Solution 22\n// Solution 23\n// Solution 24\n// Solution 25\n// Solution 26\n// Solution 27\n// Solution 28\n// Solution 29\n// Solution 30\n// Solution 31\n// Solution 32\n// Solution 33\n// Solution 34\n// Solution 35\n// Solution 36\n// Solution 37\n// Solution 38\n// Solution 39\n// Solution 40\n// Solution 41\n// Solution 42\n// Solution 43\n// Solution 44\n// Solution 45\n// Solution 46\n// Solution 47\n// Solution 48\n// Solution 49\n// Solution 50\n// Solution 51\n// Solution 52\n// Solution 53\n// Solution 54\n// Solution 55\n// Solution 56\n// Solution 57\n// Solution 58\n// Solution 59\n// Solution 60\n// Solution 61\n// Solution 62\n// Solution 63\n// Solution 64\n// Solution 65\n// Solution 66\n// Solution 67\n// Solution 68\n// Solution 69\n// Solution 70\n// Solution 71\n// Solution 72\n// Solution 73\n// Solution 74\n// Solution 75\n// Solution 76\n// Solution 77\n// Solution 78\n// Solution 79\n// Solution 80\n// Solution 81\n// Solution 82\n// Solution 83\n// Solution 84\n// Solution 85\n// Solution 86\n// Solution 87\n// Solution 88\n// Solution 89\n// Solution 90\n// Solution 91\n// Solution 92\n// Solution 93\n// Solution 94\n// Solution 95\n// Solution 96\n// Solution 97\n// Solution 98\n// Solution 99\n// Solution 100\n// Solution 101\n// Solution 102\n// Solution 103\n// Solution 104\n// Solution 105\n// Solution 106\n// Solution 107\n// Solution 108\n// Solution 109\n// Solution 110\n// Solution 111\n// Solution 112\n// Solution 113\n// Solution 114\n// Solution 115\n// Solution 116\n// Solution 117\n// Solution 118\n// Solution 119\n// Solution 120\n// Solution 121\n// Solution 122\n// Solution 123\n// Solution 124\n// Solution 125\n// Solution 126\n// Solution 127\n// Solution 128\n// Solution 129\n// Solution 130\n// Solution 131\n// Solution 132\n// Solution 133\n// Solution 134\n// Solution 135\n// Solution 136\n// Solution 137\n// Solution 138\n// Solution 139\n// Solution 140\n// Solution 141\n// Solution 142\n// Solution 143\n// Solution 144\n// Solution ",
        "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n",
        "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n",
        "declaration": "\nconst unique = (l) => {\n",
        "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n"
    },
    {
        "number": "JavaScript/35",
        "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\n// Solution 1\n\n// Solution 2\n\n// Solution 3\n\n// Solution 4\n\n// Solution 5\n\n// Solution 6\n\n// Solution 7\n\n// Solution 8\n\n// Solution 9\n\n// Solution 10\n\n// Solution 11\n\n// Solution 12\n\n// Solution 13\n\n// Solution 14\n\n// Solution 15\n\n// Solution 16\n\n// Solution 17\n\n// Solution 18\n\n// Solution 19\n\n// Solution 20\n\n// Solution 21\n\n// Solution 22\n\n// Solution 23\n\n// Solution 24\n\n// Solution 25\n\n// Solution 26\n\n// Solution 27\n\n// Solution 28\n\n// Solution 29\n\n// Solution 30\n\n// Solution 31\n\n// Solution 32\n\n// Solution 33\n\n// Solution 34\n\n// Solution 35\n\n// Solution 36\n\n// Solution 37\n\n// Solution 38\n\n// Solution 39\n\n// Solution 40\n\n// Solution 41\n\n// Solution 42\n\n// Solution 43\n\n// Solution 44\n\n// Solution 45\n\n// Solution 46\n\n// Solution 47\n\n// Solution 48\n\n// Solution 49\n\n// Solution 50\n\n// Solution 51\n\n// Solution 52\n\n// Solution 53\n\n// Solution 54\n\n// Solution 55\n\n// Solution 56\n\n// Solution 57\n\n// Solution 58\n\n// Solution 59\n\n// Solution 60\n\n// Solution 61\n\n// Solution 62\n\n// Solution 63\n\n// Solution 64\n\n// Solution 65\n\n// Solution 66\n\n// Solution 67\n\n// Solution 68\n\n// Solution 69\n\n// Solution 70\n\n// Solution 71\n\n// Solution 72\n\n// Solution 73\n\n// Solution 74\n\n// Solution 75\n\n// Solution 76\n\n// Solution 77\n\n// Solution 78\n\n// Solution 79\n\n// Solution 80\n\n// Solution 81\n\n// Solution 82\n\n// Solution 83\n\n// Solution 84\n\n// Solution 85\n\n// Solution 86\n\n// Solution 87\n\n// Solution 88\n\n// Solution 89\n\n// Solution 90\n\n// Solution 91\n\n// Solution 92\n\n// Solution 93\n\n// Solution 94\n\n// Solution 95\n\n// Solution 96\n\n// Solution 97\n\n// Solution 98\n\n// Solution 99\n\n// Solution 100\n\n// Solution 101\n\n// Solution 102\n\n// Solution 103\n\n// Solution 104\n\n// Solution 105\n\n// Solution 106\n\n// Solution 107\n\n// Solution 108\n\n// Solution 109\n\n// Solution 110\n\n// Solution 111\n\n// Solution 112\n\n// Solution 113\n\n// Solution 114\n\n// Solution 115\n\n// Solution 116\n\n// Solution 117\n\n// Solution 118\n\n// Solution 119\n\n// Solution 120\n\n// Solution 121\n\n// Solution 122\n\n// Solution 123\n\n// Solution 124\n\n// Solution 125\n\n// Solution 1",
        "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n",
        "canonical_solution": "  return Math.max(...l);\n}\n\n",
        "declaration": "\nconst maxElement = (l) => {\n",
        "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n"
    },
    {
        "number": "JavaScript/36",
        "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\n// Solution 1\n// Solution 2\n// Solution 3\n// Solution 4\n// Solution 5\n// Solution 6\n// Solution 7\n// Solution 8\n// Solution 9\n// Solution 10\n// Solution 11\n// Solution 12\n// Solution 13\n// Solution 14\n// Solution 15\n// Solution 16\n// Solution 17\n// Solution 18\n// Solution 19\n// Solution 20\n// Solution 21\n// Solution 22\n// Solution 23\n// Solution 24\n// Solution 25\n// Solution 26\n// Solution 27\n// Solution 28\n// Solution 29\n// Solution 30\n// Solution 31\n// Solution 32\n// Solution 33\n// Solution 34\n// Solution 35\n// Solution 36\n// Solution 37\n// Solution 38\n// Solution 39\n// Solution 40\n// Solution 41\n// Solution 42\n// Solution 43\n// Solution 44\n// Solution 45\n// Solution 46\n// Solution 47\n// Solution 48\n// Solution 49\n// Solution 50\n// Solution 51\n// Solution 52\n// Solution 53\n// Solution 54\n// Solution 55\n// Solution 56\n// Solution 57\n// Solution 58\n// Solution 59\n// Solution 60\n// Solution 61\n// Solution 62\n// Solution 63\n// Solution 64\n// Solution 65\n// Solution 66\n// Solution 67\n// Solution 68\n// Solution 69\n// Solution 70\n// Solution 71\n// Solution 72\n// Solution 73\n// Solution 74\n// Solution 75\n// Solution 76\n// Solution 77\n// Solution 78\n// Solution 79\n// Solution 80\n// Solution 81\n// Solution 82\n// Solution 83\n// Solution 84\n// Solution 85\n// Solution 86\n// Solution 87\n// Solution 88\n// Solution 89\n// Solution 90\n// Solution 91\n// Solution 92\n// Solution 93\n// Solution 94\n// Solution 95\n// Solution 96\n// Solution 97\n// Solution 98\n// Solution 99\n// Solution 100\n// Solution 101\n// Solution 102\n// Solution 103\n// Solution 104\n// Solution 105\n// Solution 106\n// Solution 107\n// Solution 108\n// Solution 109\n// Solution 110\n// Solution 111\n// Solution 112\n// Solution 113\n// Solution 114\n// Solution 115\n// Solution 116\n// Solution 117\n// Solution 118\n// Solution 119\n// Solution 120\n// Solution 121\n// Solution 122\n// Solution 123\n// Solution 124\n// Solution 125\n// Solution 126\n// Solution 127\n// Solution 128\n// Solution 129\n// Solution 130\n// Solution 131\n// Solution 132\n// Solution 133\n// Solution 134\n// Solution 135\n// Solution 136\n// Solution 137\n// Solution 138\n// Solution 139\n// Solution 140\n// Solution 141\n// Solution 142\n// Solution 143\n// Solution ",
        "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n",
        "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n",
        "declaration": "\nconst fizzBuzz = (n) => {\n",
        "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n"
    },
    {
        "number": "JavaScript/37",
        "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\n// Solution 1\nconst sortEven = (l) => {\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i]);\n    } else {\n      odd.push(l[i]);\n    }\n  }\n  even.sort();\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      l[i] = even[i / 2];\n    } else {\n      l[i] = odd[i / 2];\n    }\n  }\n  return l;\n};\n\n// Solution 2\nconst sortEven = (l) => {\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i]);\n    } else {\n      odd.push(l[i]);\n    }\n  }\n  even.sort();\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      l[i] = even[i / 2];\n    } else {\n      l[i] = odd[i / 2];\n    }\n  }\n  return l;\n};\n\n// Solution 3\nconst sortEven = (l) => {\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i]);\n    } else {\n      odd.push(l[i]);\n    }\n  }\n  even.sort();\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      l[i] = even[i / 2];\n    } else {\n      l[i] = odd[i / 2];\n    }\n  }\n  return l;\n};\n\n// Solution 4\nconst sortEven = (l) => {\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i]);\n    } else {\n      odd.push(l[i]);\n    }\n  }\n  even.sort();\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      l[i] = even[i / 2];\n    } else {\n      l[i] = odd[i / 2];\n    }\n  }\n  return l;\n};\n\n// Solution 5\nconst sortEven = (l) => {\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i]);\n    } else {\n      odd.push(l[i]);\n    }\n  }\n  even.sort();\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      l[i] = even[i / 2];\n    } else {\n      l[i] = odd[i / 2];\n    }\n  }\n  return l;\n};\n\n// Solution 6\nconst sortEven = (l) => {\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i]);\n    } else {\n      odd.push(l",
        "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n",
        "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n",
        "declaration": "\nconst sortEven = (l) => {\n",
        "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n"
    },
    {
        "number": "JavaScript/38",
        "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\n/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic",
        "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n",
        "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n",
        "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n",
        "example_test": ""
    },
    {
        "number": "JavaScript/39",
        "prompt": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\nconst primeFib = (n) => {\n  let fib = [1, 2];\n  let i = 2;\n  while (fib[i] < n) {\n    fib.push(fib[i] + fib[i - 1]);\n    i++;\n  }\n  return fib.find((fib) => isPrime(fib));\n};\n\nconst isPrime = (n) => {\n  if (n < 2) return false;\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconsole.log(primeFib(1));\nconsole.log(primeFib(2));\nconsole.log(primeFib(3));\nconsole.log(primeFib(4));\nconsole.log(primeFib(5));\n\n// Here is the correct implementation of the code exercise in python:\n\ndef primeFib(n):\n    fib = [1, 2]\n    i = 2\n    while fib[i] < n:\n        fib.append(fib[i] + fib[i - 1])\n        i += 1\n    return fib[fib.index(next(x for x in fib if isPrime(x)))]\n\ndef isPrime(n):\n    if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\nprint(primeFib(1))\nprint(primeFib(2))\nprint(primeFib(3))\nprint(primeFib(4))\nprint(primeFib(5))\n\n// Here is the correct implementation of the code exercise in c:\n\n#include <stdio.h>\n#include <stdlib.h>\n\nint isPrime(int n) {\n    if (n < 2) return 0;\n    for (int i = 2; i < n; i++) {\n        if (n % i == 0) return 0;\n    }\n    return 1;\n}\n\nint primeFib(int n) {\n    int fib[] = {1, 2};\n    int i = 2;\n    while (fib[i] < n) {\n        fib[i + 1] = fib[i] + fib[i - 1];\n        i++;\n    }\n    for (int j = 0; j < i; j++) {\n        if (isPrime(fib[j])) {\n            return fib[j];\n        }\n    }\n}\n\nint main() {\n    printf(\"%d\\n\", primeFib(1));\n    printf(\"%d\\n\", primeFib(2));\n    printf(\"%d\\n\", primeFib(3));\n    printf(\"%d\\n\", primeFib(4));\n    printf(\"%d\\n\", primeFib(5));\n    return 0;\n}\n\n// Here is the correct implementation of the code exercise in c++:\n\n#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nbool isPrime(int n) {\n    if (n < 2) return false;\n    for (int i = 2; i < n; i++) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\nint primeFib(int n) {\n    vector<int> fib = {1, 2};\n    int i = 2;\n    while (fib[i] < n) {\n        fib.push_back(fib[i] + fib[i - 1]);\n        i++;\n    }\n    for (int j = 0; j < i; j++) {\n        if (isPrime(fib[j])) {\n            return fib[j];\n        }\n    }\n}\n\nint main() {\n    cout << primeFib(1) << endl;\n    cout << primeFib(2) << endl;\n    cout << primeFib(3) << endl;\n    cout << primeFib(4) << endl;\n    cout << primeFib(5) << endl;\n    return 0;\n}",
        "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n",
        "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n",
        "declaration": "\nconst primeFib = (n) => {\n",
        "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n"
    },
    {
        "number": "JavaScript/40",
        "prompt": "/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "const triplesSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      for (let k = j + 1; k < l.length; k++) {\n        if (l[i] + l[j] + l[k] === 0) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n};\n\n// Here is the correct implementation of the code exercise in python:\ndef triplesSumToZero(l):\n  for i in range(len(l)):\n    for j in range(i + 1, len(l)):\n      for k in range(j + 1, len(l)):\n        if l[i] + l[j] + l[k] == 0:\n          return True\n  return False\n\n// Here is the correct implementation of the code exercise in ruby:\ndef triplesSumToZero(l):\n  for i in 0...l.length\n    for j in (i + 1)...l.length\n      for k in (j + 1)...l.length\n        if l[i] + l[j] + l[k] == 0\n          return true\n  return false\n\n// Here is the correct implementation of the code exercise in c#:\npublic static bool triplesSumToZero(int[] l)\n{\n  for (int i = 0; i < l.Length; i++)\n  {\n    for (int j = i + 1; j < l.Length; j++)\n    {\n      for (int k = j + 1; k < l.Length; k++)\n      {\n        if (l[i] + l[j] + l[k] == 0)\n        {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n// Here is the correct implementation of the code exercise in java:\npublic static boolean triplesSumToZero(int[] l) {\n  for (int i = 0; i < l.length; i++) {\n    for (int j = i + 1; j < l.length; j++) {\n      for (int k = j + 1; k < l.length; k++) {\n        if (l[i] + l[j] + l[k] == 0) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n// Here is the correct implementation of the code exercise in c:\nbool triplesSumToZero(int* l, int length) {\n  for (int i = 0; i < length; i++) {\n    for (int j = i + 1; j < length; j++) {\n      for (int k = j + 1; k < length; k++) {\n        if (l[i] + l[j] + l[k] == 0) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n// Here is the correct implementation of the code exercise in go:\nfunc triplesSumToZero(l []int) bool {\n  for i := 0; i < len(l); i++ {\n    for j := i + 1; j < len(l); j++ {\n      for k := j + 1; k < len(l); k++ {\n        if l[i] + l[j] + l[k] == 0 {\n          return true\n        }\n      }\n    }\n  }\n  return false\n}\n\n// Here is the correct implementation of the code exercise in swift:\nfunc triplesSumToZero(_ l: [Int]) -> Bool {\n ",
        "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n",
        "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n",
        "declaration": "\nconst triplesSumToZero = (l) => {\n",
        "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n"
    },
    {
        "number": "JavaScript/41",
        "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\nconst carRaceCollision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    if (i % 2 === 0) {\n      collisions += 1;\n    }\n  }\n  return collisions;\n};\n\nconsole.log(carRaceCollision(10));\n<|endoftext|>",
        "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n",
        "canonical_solution": "  return Math.pow(n, 2);\n}\n\n",
        "declaration": "\nconst carRaceCollision = (n) => {\n",
        "example_test": ""
    },
    {
        "number": "JavaScript/42",
        "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\nconst incrList = (l) => {\n    return l.map(x => x + 1)\n}\n\nconsole.log(incrList([1, 2, 3]))\nconsole.log(incrList([5, 3, 5, 2, 3, 3, 9, 0, 123]))\n\n// Here is the correct implementation of the code exercise in python:\n\ndef incrList(l):\n    return [x + 1 for x in l]\n\nprint(incrList([1, 2, 3]))\nprint(incrList([5, 3, 5, 2, 3, 3, 9, 0, 123]))\n\n// Here is the correct implementation of the code exercise in R:\n\nincrList <- function(l) {\n    return(l + 1)\n}\n\nprint(incrList([1, 2, 3]))\nprint(incrList([5, 3, 5, 2, 3, 3, 9, 0, 123]))\n\n// Here is the correct implementation of the code exercise in C#:\n\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace CodeExercise\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(String.Join(\", \", incrList(new List<int> { 1, 2, 3 })));\n            Console.WriteLine(String.Join(\", \", incrList(new List<int> { 5, 3, 5, 2, 3, 3, 9, 0, 123 })));\n        }\n\n        static List<int> incrList(List<int> l)\n        {\n            return l.Select(x => x + 1).ToList();\n        }\n    }\n}\n\n// Here is the correct implementation of the code exercise in Java:\n\npublic class CodeExercise {\n    public static void main(String[] args) {\n        System.out.println(String.join(\", \", incrList(Arrays.asList(1, 2, 3))));\n        System.out.println(String.join(\", \", incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))));\n    }\n\n    public static List<Integer> incrList(List<Integer> l) {\n        return l.stream().map(x -> x + 1).collect(Collectors.toList());\n    }\n}\n\n// Here is the correct implementation of the code exercise in Ruby:\n\ndef incrList(l)\n  l.map { |x| x + 1 }\nend\n\nputs incrList([1, 2, 3])\nputs incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\n// Here is the correct implementation of the code exercise in Go:\n\npackage main\n\nimport \"fmt\"\n\nfunc incrList(l []int) []int {\n    var result []int\n    for _, v := range l {\n        result = append(result, v+1)\n    }\n    return result\n}\n\nfunc main() {\n    fmt.Println(incrList([]int{1, 2, 3}))\n    fmt.Println(incrList([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}))\n}\n\n// Here is the correct implementation of the code exercise in Scala:\n\nobject CodeExercise {\n  def main(args: Array[String]): Unit = {\n    println(incrList(List(1, 2, 3)))\n    println(incrList(List(5, 3, 5, 2, 3, 3, ",
        "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n",
        "canonical_solution": "  return l.map(e => e + 1);\n}\n\n",
        "declaration": "\nconst incrList = (l) => {\n",
        "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n"
    },
    {
        "number": "JavaScript/43",
        "prompt": "/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\n// Solution 1\n// Solution 2\n// Solution 3\n// Solution 4\n// Solution 5\n// Solution 6\n// Solution 7\n// Solution 8\n// Solution 9\n// Solution 10\n// Solution 11\n// Solution 12\n// Solution 13\n// Solution 14\n// Solution 15\n// Solution 16\n// Solution 17\n// Solution 18\n// Solution 19\n// Solution 20\n// Solution 21\n// Solution 22\n// Solution 23\n// Solution 24\n// Solution 25\n// Solution 26\n// Solution 27\n// Solution 28\n// Solution 29\n// Solution 30\n// Solution 31\n// Solution 32\n// Solution 33\n// Solution 34\n// Solution 35\n// Solution 36\n// Solution 37\n// Solution 38\n// Solution 39\n// Solution 40\n// Solution 41\n// Solution 42\n// Solution 43\n// Solution 44\n// Solution 45\n// Solution 46\n// Solution 47\n// Solution 48\n// Solution 49\n// Solution 50\n// Solution 51\n// Solution 52\n// Solution 53\n// Solution 54\n// Solution 55\n// Solution 56\n// Solution 57\n// Solution 58\n// Solution 59\n// Solution 60\n// Solution 61\n// Solution 62\n// Solution 63\n// Solution 64\n// Solution 65\n// Solution 66\n// Solution 67\n// Solution 68\n// Solution 69\n// Solution 70\n// Solution 71\n// Solution 72\n// Solution 73\n// Solution 74\n// Solution 75\n// Solution 76\n// Solution 77\n// Solution 78\n// Solution 79\n// Solution 80\n// Solution 81\n// Solution 82\n// Solution 83\n// Solution 84\n// Solution 85\n// Solution 86\n// Solution 87\n// Solution 88\n// Solution 89\n// Solution 90\n// Solution 91\n// Solution 92\n// Solution 93\n// Solution 94\n// Solution 95\n// Solution 96\n// Solution 97\n// Solution 98\n// Solution 99\n// Solution 100\n// Solution 101\n// Solution 102\n// Solution 103\n// Solution 104\n// Solution 105\n// Solution 106\n// Solution 107\n// Solution 108\n// Solution 109\n// Solution 110\n// Solution 111\n// Solution 112\n// Solution 113\n// Solution 114\n// Solution 115\n// Solution 116\n// Solution 117\n// Solution 118\n// Solution 119\n// Solution 120\n// Solution 121\n// Solution 122\n// Solution 123\n// Solution 124\n// Solution 125\n// Solution 126\n// Solution 127\n// Solution 128\n// Solution 129\n// Solution 130\n// Solution 131\n// Solution 132\n// Solution 133\n// Solution ",
        "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n",
        "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n",
        "declaration": "\nconst pairsSumToZero = (l) => {\n",
        "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n"
    },
    {
        "number": "JavaScript/44",
        "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\n// Solution 1\n// Solution 2\n// Solution 3\n// Solution 4\n// Solution 5\n// Solution 6\n// Solution 7\n// Solution 8\n// Solution 9\n// Solution 10\n// Solution 11\n// Solution 12\n// Solution 13\n// Solution 14\n// Solution 15\n// Solution 16\n// Solution 17\n// Solution 18\n// Solution 19\n// Solution 20\n// Solution 21\n// Solution 22\n// Solution 23\n// Solution 24\n// Solution 25\n// Solution 26\n// Solution 27\n// Solution 28\n// Solution 29\n// Solution 30\n// Solution 31\n// Solution 32\n// Solution 33\n// Solution 34\n// Solution 35\n// Solution 36\n// Solution 37\n// Solution 38\n// Solution 39\n// Solution 40\n// Solution 41\n// Solution 42\n// Solution 43\n// Solution 44\n// Solution 45\n// Solution 46\n// Solution 47\n// Solution 48\n// Solution 49\n// Solution 50\n// Solution 51\n// Solution 52\n// Solution 53\n// Solution 54\n// Solution 55\n// Solution 56\n// Solution 57\n// Solution 58\n// Solution 59\n// Solution 60\n// Solution 61\n// Solution 62\n// Solution 63\n// Solution 64\n// Solution 65\n// Solution 66\n// Solution 67\n// Solution 68\n// Solution 69\n// Solution 70\n// Solution 71\n// Solution 72\n// Solution 73\n// Solution 74\n// Solution 75\n// Solution 76\n// Solution 77\n// Solution 78\n// Solution 79\n// Solution 80\n// Solution 81\n// Solution 82\n// Solution 83\n// Solution 84\n// Solution 85\n// Solution 86\n// Solution 87\n// Solution 88\n// Solution 89\n// Solution 90\n// Solution 91\n// Solution 92\n// Solution 93\n// Solution 94\n// Solution 95\n// Solution 96\n// Solution 97\n// Solution 98\n// Solution 99\n// Solution 100\n// Solution 101\n// Solution 102\n// Solution 103\n// Solution 104\n// Solution 105\n// Solution 106\n// Solution 107\n// Solution 108\n// Solution 109\n// Solution 110\n// Solution 111\n// Solution 112\n// Solution 113\n// Solution 114\n// Solution 115\n// Solution 116\n// Solution 117\n// Solution 118\n// Solution 119\n// Solution 120\n// Solution 121\n// Solution 122\n// Solution 123\n// Solution 124\n// Solution 125\n// Solution 126\n// Solution 127\n// Solution 128\n// Solution 129\n// Solution 130\n// Solution 131\n// Solution 132\n// Solution 133\n// Solution 134\n// Solution 135\n// Solution 136\n// Solution 137\n// Solution 138\n// Solution 139\n// Solution 140\n// Solution 141\n// Solution 14",
        "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n",
        "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n",
        "declaration": "\nconst changeBase = (x, base) => {\n",
        "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n"
    },
    {
        "number": "JavaScript/45",
        "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\n// 1. Write a function that takes two numbers as arguments and returns the sum of those two numbers.\n\n// 2. Write a function that takes two numbers as arguments and returns the difference of those two numbers.\n\n// 3. Write a function that takes two numbers as arguments and returns the product of those two numbers.\n\n// 4. Write a function that takes two numbers as arguments and returns the quotient of those two numbers.\n\n// 5. Write a function that takes two numbers as arguments and returns the remainder of those two numbers.\n\n// 6. Write a function that takes two numbers as arguments and returns the area of a rectangle with those two numbers as sides.\n\n// 7. Write a function that takes two numbers as arguments and returns the area of a triangle with those two numbers as sides.\n\n// 8. Write a function that takes two numbers as arguments and returns the area of a circle with those two numbers as its diameter.\n\n// 9. Write a function that takes two numbers as arguments and returns the area of a circle with those two numbers as its radius.\n\n// 10. Write a function that takes two numbers as arguments and returns the area of a square with those two numbers as its sides.\n\n// 11. Write a function that takes two numbers as arguments and returns the area of a square with those two numbers as its side length.\n\n// 12. Write a function that takes two numbers as arguments and returns the area of a square with those two numbers as its side length.\n\n// 13. Write a function that takes two numbers as arguments and returns the area of a square with those two numbers as its side length.\n\n// 14. Write a function that takes two numbers as arguments and returns the area of a square with those two numbers as its side length.\n\n// 15. Write a function that takes two numbers as arguments and returns the area of a square with those two numbers as its side length.\n\n// 16. Write a function that takes two numbers as arguments and returns the area of a square with those two numbers as its side length.\n\n// 17. Write a function that takes two numbers as arguments and returns the area of a square with those two numbers as its side length.\n\n// 18. Write a function that takes two numbers as arguments and returns the area of a square with those two numbers as its side length.\n\n// 19. Write a function that takes two numbers as arguments and returns the area of a square with those two numbers as its side length.\n\n// 20. Write a function that takes two numbers as arguments and returns the area of a square with those two numbers as its side length.\n\n// 21. Write a function that takes two numbers as arguments and returns the area of a square with those two numbers as its side length.\n\n// 22. Write a function that takes two numbers as arguments and returns the area of a square with those two numbers as its side length.\n\n// 23. Write a function that takes two numbers as arguments and returns the area of a square with those two numbers as its side length.\n\n// 24. Write a function that takes two numbers as arguments and returns the area of a square with those two numbers as its side length.\n\n// 25. Write a function that takes two numbers as arguments and returns the area of a square with those two numbers as its side length.\n\n// 26. Write a function that takes two numbers as arguments and returns the area of a square with those two numbers as its side length.\n\n// 27. Write a function that takes two numbers as arguments and returns the area of a square with those two numbers as its side length.\n\n// 28. Write a function that takes two numbers as arguments and returns the area of a square with those two numbers as its side length.\n\n// 29. Write a function that takes two numbers as arguments and returns the area of a square with those two numbers as its side length.\n\n// 30. Write a function that takes two numbers as arguments and returns the area of a square with those two numbers as its side length.\n\n// 31. Write a function that takes two numbers as arguments and returns the area of a square with those",
        "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n",
        "canonical_solution": "  return a * h / 2.0;\n}\n\n",
        "declaration": "\nconst triangleArea = (a, h) => {\n",
        "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n"
    },
    {
        "number": "JavaScript/46",
        "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\nconst fib4 = (n) => {\n  let fib4_0 = 0;\n  let fib4_1 = 0;\n  let fib4_2 = 2;\n  let fib4_3 = 0;\n  for (let i = 0; i < n; i++) {\n    fib4_0 = fib4_1;\n    fib4_1 = fib4_2;\n    fib4_2 = fib4_3;\n    fib4_3 = fib4_0 + fib4_1 + fib4_2;\n  }\n  return fib4_3;\n};\n\nconsole.log(fib4(5));\nconsole.log(fib4(6));\nconsole.log(fib4(7));\n\n// Here is the correct implementation of the code exercise in python:\n\ndef fib4(n):\n    fib4_0 = 0\n    fib4_1 = 0\n    fib4_2 = 2\n    fib4_3 = 0\n    for i in range(n):\n        fib4_0 = fib4_1\n        fib4_1 = fib4_2\n        fib4_2 = fib4_3\n        fib4_3 = fib4_0 + fib4_1 + fib4_2\n    return fib4_3\n\nprint(fib4(5))\nprint(fib4(6))\nprint(fib4(7))\n\n// Here is the correct implementation of the code exercise in C:\n\n#include <stdio.h>\n\nint fib4(int n) {\n  int fib4_0 = 0;\n  int fib4_1 = 0;\n  int fib4_2 = 2;\n  int fib4_3 = 0;\n  for (int i = 0; i < n; i++) {\n    fib4_0 = fib4_1;\n    fib4_1 = fib4_2;\n    fib4_2 = fib4_3;\n    fib4_3 = fib4_0 + fib4_1 + fib4_2;\n  }\n  return fib4_3;\n}\n\nint main() {\n  printf(\"%d\\n\", fib4(5));\n  printf(\"%d\\n\", fib4(6));\n  printf(\"%d\\n\", fib4(7));\n  return 0;\n}\n\n// Here is the correct implementation of the code exercise in C++:\n\n#include <iostream>\n\nint fib4(int n) {\n  int fib4_0 = 0;\n  int fib4_1 = 0;\n  int fib4_2 = 2;\n  int fib4_3 = 0;\n  for (int i = 0; i < n; i++) {\n    fib4_0 = fib4_1;\n    fib4_1 = fib4_2;\n    fib4_2 = fib4_3;\n    fib4_3 = fib4_0 + fib4_1 + fib4_2;\n  }\n  return fib4_3;\n}\n\nint main() {\n  std::cout << fib4(5) << std::endl;\n  std::cout << fib4(6) << std::endl;\n  std::cout << fib4(7) << std::endl;\n  return 0;\n}\n\n// Here is the correct implementation of the code exercise in Java:\n\npublic class Fib4 {\n  public static void main(String[] args) {\n    System.out.println(fib4(5));\n    System.out.println(fib4(6));\n    System.out.println(fib4(7));\n  }\n\n  public static int fib4(int n) {\n    int fib4_0",
        "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n",
        "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n",
        "declaration": "\nconst fib4 = (n) => {\n",
        "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n"
    },
    {
        "number": "JavaScript/47",
        "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\n// Solution 1\n// const median = (l) => {\n//   const sorted = l.sort((a, b) => a - b);\n//   const half = Math.floor(sorted.length / 2);\n//   if (sorted.length % 2 === 0) {\n//     return (sorted[half - 1] + sorted[half]) / 2;\n//   } else {\n//     return sorted[half];\n//   }\n// };\n\n// Solution 2\n// const median = (l) => {\n//   const sorted = l.sort((a, b) => a - b);\n//   const half = Math.floor(sorted.length / 2);\n//   return sorted[half];\n// };\n\n// Solution 3\n// const median = (l) => {\n//   const sorted = l.sort((a, b) => a - b);\n//   const half = Math.floor(sorted.length / 2);\n//   return sorted[half - 1] + sorted[half] / 2;\n// };\n\n// Solution 4\n// const median = (l) => {\n//   const sorted = l.sort((a, b) => a - b);\n//   const half = Math.floor(sorted.length / 2);\n//   return sorted[half - 1] + sorted[half] / 2;\n// };\n\n// Solution 5\n// const median = (l) => {\n//   const sorted = l.sort((a, b) => a - b);\n//   const half = Math.floor(sorted.length / 2);\n//   return sorted[half - 1] + sorted[half] / 2;\n// };\n\n// Solution 6\n// const median = (l) => {\n//   const sorted = l.sort((a, b) => a - b);\n//   const half = Math.floor(sorted.length / 2);\n//   return sorted[half - 1] + sorted[half] / 2;\n// };\n\n// Solution 7\n// const median = (l) => {\n//   const sorted = l.sort((a, b) => a - b);\n//   const half = Math.floor(sorted.length / 2);\n//   return sorted[half - 1] + sorted[half] / 2;\n// };\n\n// Solution 8\n// const median = (l) => {\n//   const sorted = l.sort((a, b) => a - b);\n//   const half = Math.floor(sorted.length / 2);\n//   return sorted[half - 1] + sorted[half] / 2;\n// };\n\n// Solution 9\n// const median = (l) => {\n//   const sorted = l.sort((a, b) => a - b);\n//   const half = Math.floor(sorted.length / 2);\n//   return sorted[half - 1] + sorted[half] / 2;\n// };\n\n// Solution 10\n// const median = (l) => {\n//   const sorted = l.sort((a, b) => a - b);\n//   const half = Math.floor(sorted.length / 2);\n//   return sorted[half - 1] + sorted[half] / 2;\n// };\n\n// Solution 11\n// const median = (l) => {\n//   const sorted = l.sort((a, b) => a - b);\n//   const half = Math.floor(sorted.length / 2);\n//   return sorted[half - 1] + sorted[half] / 2;\n// };\n\n// Solution 12\n// const median = (l) => {\n//   const sorted = l.sort((a, b) => a - b);\n//   const half = Math.floor(sorted.length / 2);\n//",
        "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n",
        "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n",
        "declaration": "\nconst median = (l) => {\n",
        "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n"
    },
    {
        "number": "JavaScript/48",
        "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\n// Solution 1\nconst isPalindrome = (text) => {\n  const textArray = text.split('');\n  const reversedTextArray = textArray.reverse();\n  return textArray.join('') === reversedTextArray.join('');\n};\n\n// Solution 2\nconst isPalindrome = (text) => {\n  const textArray = text.split('');\n  const reversedTextArray = textArray.reverse();\n  return textArray.join('') === reversedTextArray.join('');\n};\n\n// Solution 3\nconst isPalindrome = (text) => {\n  const textArray = text.split('');\n  const reversedTextArray = textArray.reverse();\n  return textArray.join('') === reversedTextArray.join('');\n};\n\n// Solution 4\nconst isPalindrome = (text) => {\n  const textArray = text.split('');\n  const reversedTextArray = textArray.reverse();\n  return textArray.join('') === reversedTextArray.join('');\n};\n\n// Solution 5\nconst isPalindrome = (text) => {\n  const textArray = text.split('');\n  const reversedTextArray = textArray.reverse();\n  return textArray.join('') === reversedTextArray.join('');\n};\n\n// Solution 6\nconst isPalindrome = (text) => {\n  const textArray = text.split('');\n  const reversedTextArray = textArray.reverse();\n  return textArray.join('') === reversedTextArray.join('');\n};\n\n// Solution 7\nconst isPalindrome = (text) => {\n  const textArray = text.split('');\n  const reversedTextArray = textArray.reverse();\n  return textArray.join('') === reversedTextArray.join('');\n};\n\n// Solution 8\nconst isPalindrome = (text) => {\n  const textArray = text.split('');\n  const reversedTextArray = textArray.reverse();\n  return textArray.join('') === reversedTextArray.join('');\n};\n\n// Solution 9\nconst isPalindrome = (text) => {\n  const textArray = text.split('');\n  const reversedTextArray = textArray.reverse();\n  return textArray.join('') === reversedTextArray.join('');\n};\n\n// Solution 10\nconst isPalindrome = (text) => {\n  const textArray = text.split('');\n  const reversedTextArray = textArray.reverse();\n  return textArray.join('') === reversedTextArray.join('');\n};\n\n// Solution 11\nconst isPalindrome = (text) => {\n  const textArray = text.split('');\n  const reversedTextArray = textArray.reverse();\n  return textArray.join('') === reversedTextArray.join('');\n};\n\n// Solution 12\nconst isPalindrome = (text) => {\n  const textArray = text.split('');\n  const reversedTextArray = textArray.reverse();\n  return textArray.join('') === reversedTextArray.join('');\n};\n\n// Solution 13\nconst isPalindrome = (text) => {\n  const textArray = text.split('');\n  const reversedTextArray = textArray.reverse();\n  return textArray.join('') === reversedTextArray.join('');\n};\n\n// Solution 14\nconst isPalindrome = (text) => {\n  const textArray = text.split('');\n  const reversedTextArray = textArray.reverse();\n  return textArray.join('') === reversedTextArray.join('');\n};\n\n// Solution 15\nconst isPalindrome = (text) => {\n  const textArray = text.split('');\n  const reversedTextArray = textArray.reverse();\n  return textArray.join('') === reversedTextArray.join('');\n};\n\n// Solution 16\nconst isPalindrome = (text) => {\n  const textArray = text.split('');\n  const reversedTextArray = textArray.reverse();\n  return textArray.join('') === reversedTextArray.join('');\n};\n\n// Solution 17\nconst isPalindrome = (text) => {\n  const textArray = text.split('');\n  const reversedTextArray = textArray.reverse();\n  return textArray.join('') === reversedTextArray.join('');\n};\n\n// Solution ",
        "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n",
        "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n",
        "declaration": "\nconst isPalindrome = (text) => {\n",
        "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n"
    },
    {
        "number": "JavaScript/49",
        "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\n// 1. Write a function that takes two numbers as arguments and returns the first number modulo the second number.\n// 2. Write a function that takes two numbers as arguments and returns the first number raised to the power of the second number modulo p.\n// 3. Write a function that takes two numbers as arguments and returns the first number raised to the power of the second number modulo p.\n// 4. Write a function that takes two numbers as arguments and returns the first number raised to the power of the second number modulo p.\n// 5. Write a function that takes two numbers as arguments and returns the first number raised to the power of the second number modulo p.\n// 6. Write a function that takes two numbers as arguments and returns the first number raised to the power of the second number modulo p.\n// 7. Write a function that takes two numbers as arguments and returns the first number raised to the power of the second number modulo p.\n// 8. Write a function that takes two numbers as arguments and returns the first number raised to the power of the second number modulo p.\n// 9. Write a function that takes two numbers as arguments and returns the first number raised to the power of the second number modulo p.\n// 10. Write a function that takes two numbers as arguments and returns the first number raised to the power of the second number modulo p.\n// 11. Write a function that takes two numbers as arguments and returns the first number raised to the power of the second number modulo p.\n// 12. Write a function that takes two numbers as arguments and returns the first number raised to the power of the second number modulo p.\n// 13. Write a function that takes two numbers as arguments and returns the first number raised to the power of the second number modulo p.\n// 14. Write a function that takes two numbers as arguments and returns the first number raised to the power of the second number modulo p.\n// 15. Write a function that takes two numbers as arguments and returns the first number raised to the power of the second number modulo p.\n// 16. Write a function that takes two numbers as arguments and returns the first number raised to the power of the second number modulo p.\n// 17. Write a function that takes two numbers as arguments and returns the first number raised to the power of the second number modulo p.\n// 18. Write a function that takes two numbers as arguments and returns the first number raised to the power of the second number modulo p.\n// 19. Write a function that takes two numbers as arguments and returns the first number raised to the power of the second number modulo p.\n// 20. Write a function that takes two numbers as arguments and returns the first number raised to the power of the second number modulo p.\n// 21. Write a function that takes two numbers as arguments and returns the first number raised to the power of the second number modulo p.\n// 22. Write a function that takes two numbers as arguments and returns the first number raised to the power of the second number modulo p.\n// 23. Write a function that takes two numbers as arguments and returns the first number raised to the power of the second number modulo p.\n// 24. Write a function that takes two numbers as arguments and returns the first number raised to the power of the second number modulo p.\n// 25. Write a function that takes two numbers as arguments and returns the first number raised to the power of the second number modulo p.\n// 26. Write a function that takes two numbers as arguments and returns the first number raised to the power of the second number modulo p.\n// 27. Write a function that takes two numbers as arguments and returns the first number raised to the power of the second number modulo p.\n// 28. Write a function that takes two numbers as arguments and returns the first number raised to the power of the second number modulo p.\n// 29. Write a function that takes two numbers as arguments and returns the first number raised to",
        "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n",
        "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n",
        "declaration": "\nconst modp = (n, p) => {\n",
        "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n"
    },
    {
        "number": "JavaScript/50",
        "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n",
        "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n",
        "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n",
        "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n",
        "example_test": ""
    },
    {
        "number": "JavaScript/51",
        "prompt": "/*\n  removeVowels is a function that takes string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\n// Solution 1\n// Solution 2\n// Solution 3\n// Solution 4\n// Solution 5\n// Solution 6\n// Solution 7\n// Solution 8\n// Solution 9\n// Solution 10\n// Solution 11\n// Solution 12\n// Solution 13\n// Solution 14\n// Solution 15\n// Solution 16\n// Solution 17\n// Solution 18\n// Solution 19\n// Solution 20\n// Solution 21\n// Solution 22\n// Solution 23\n// Solution 24\n// Solution 25\n// Solution 26\n// Solution 27\n// Solution 28\n// Solution 29\n// Solution 30\n// Solution 31\n// Solution 32\n// Solution 33\n// Solution 34\n// Solution 35\n// Solution 36\n// Solution 37\n// Solution 38\n// Solution 39\n// Solution 40\n// Solution 41\n// Solution 42\n// Solution 43\n// Solution 44\n// Solution 45\n// Solution 46\n// Solution 47\n// Solution 48\n// Solution 49\n// Solution 50\n// Solution 51\n// Solution 52\n// Solution 53\n// Solution 54\n// Solution 55\n// Solution 56\n// Solution 57\n// Solution 58\n// Solution 59\n// Solution 60\n// Solution 61\n// Solution 62\n// Solution 63\n// Solution 64\n// Solution 65\n// Solution 66\n// Solution 67\n// Solution 68\n// Solution 69\n// Solution 70\n// Solution 71\n// Solution 72\n// Solution 73\n// Solution 74\n// Solution 75\n// Solution 76\n// Solution 77\n// Solution 78\n// Solution 79\n// Solution 80\n// Solution 81\n// Solution 82\n// Solution 83\n// Solution 84\n// Solution 85\n// Solution 86\n// Solution 87\n// Solution 88\n// Solution 89\n// Solution 90\n// Solution 91\n// Solution 92\n// Solution 93\n// Solution 94\n// Solution 95\n// Solution 96\n// Solution 97\n// Solution 98\n// Solution 99\n// Solution 100\n// Solution 101\n// Solution 102\n// Solution 103\n// Solution 104\n// Solution 105\n// Solution 106\n// Solution 107\n// Solution 108\n// Solution 109\n// Solution 110\n// Solution 111\n// Solution 112\n// Solution 113\n// Solution 114\n// Solution 115\n// Solution 116\n// Solution 117\n// Solution 118\n// Solution 119\n// Solution 120\n// Solution 121\n// Solution 122\n// Solution 123\n// Solution 124\n// Solution 125\n// Solution 126\n// Solution 127\n// Solution 128\n// Solution 129\n// Solution 130\n// Solution 131\n// Solution 132\n// Solution 133\n// Solution 134\n// Solution 135\n// Solution 136\n// Solution 137\n",
        "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n",
        "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n",
        "declaration": "\nconst removeVowels = (text) => {\n",
        "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n"
    },
    {
        "number": "JavaScript/52",
        "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\n// Solution 1\n\nconst belowThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= t) {\n      return false;\n    }\n  }\n  return true;\n};\n\n// Solution 2\n\nconst belowThreshold = (l, t) => {\n  return l.every(x => x < t);\n};\n\n// Solution 3\n\nconst belowThreshold = (l, t) => {\n  return l.every(x => x < t);\n};\n\n// Solution 4\n\nconst belowThreshold = (l, t) => {\n  return l.every(x => x < t);\n};\n\n// Solution 5\n\nconst belowThreshold = (l, t) => {\n  return l.every(x => x < t);\n};\n\n// Solution 6\n\nconst belowThreshold = (l, t) => {\n  return l.every(x => x < t);\n};\n\n// Solution 7\n\nconst belowThreshold = (l, t) => {\n  return l.every(x => x < t);\n};\n\n// Solution 8\n\nconst belowThreshold = (l, t) => {\n  return l.every(x => x < t);\n};\n\n// Solution 9\n\nconst belowThreshold = (l, t) => {\n  return l.every(x => x < t);\n};\n\n// Solution 10\n\nconst belowThreshold = (l, t) => {\n  return l.every(x => x < t);\n};\n\n// Solution 11\n\nconst belowThreshold = (l, t) => {\n  return l.every(x => x < t);\n};\n\n// Solution 12\n\nconst belowThreshold = (l, t) => {\n  return l.every(x => x < t);\n};\n\n// Solution 13\n\nconst belowThreshold = (l, t) => {\n  return l.every(x => x < t);\n};\n\n// Solution 14\n\nconst belowThreshold = (l, t) => {\n  return l.every(x => x < t);\n};\n\n// Solution 15\n\nconst belowThreshold = (l, t) => {\n  return l.every(x => x < t);\n};\n\n// Solution 16\n\nconst belowThreshold = (l, t) => {\n  return l.every(x => x < t);\n};\n\n// Solution 17\n\nconst belowThreshold = (l, t) => {\n  return l.every(x => x < t);\n};\n\n// Solution 18\n\nconst belowThreshold = (l, t) => {\n  return l.every(x => x < t);\n};\n\n// Solution 19\n\nconst belowThreshold = (l, t) => {\n  return l.every(x => x < t);\n};\n\n// Solution 20\n\nconst belowThreshold = (l, t) => {\n  return l.every(x => x < t);\n};\n\n// Solution 21\n\nconst belowThreshold = (l, t) => {\n  return l.every(x => x < t);\n};\n\n// Solution 22\n\nconst belowThreshold = (l, t) => {\n  return l.every(x => x < t);\n};\n\n// Solution 23\n\nconst belowThreshold = (l, t) => {\n  return l.every(x => x < t);\n};\n\n// Solution 24\n\nconst belowThreshold = (l, t) => {\n  return l.every(x => x < t);\n};\n\n// Solution 25\n\nconst belowThreshold = (l, t) => {\n  return l.every(x => x < t);\n};\n\n// Solution 26\n\nconst belowThreshold = (l, t) => {\n  return l.every(x => x < t",
        "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n",
        "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n",
        "declaration": "\nconst belowThreshold = (l, t) => {\n",
        "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n"
    },
    {
        "number": "JavaScript/53",
        "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\nconst add = (x, y) => x + y;\n\nconsole.log(add(2, 3));\nconsole.log(add(5, 7));\n\n// Here is the correct implementation of the code exercise in python:\n\ndef add(x, y):\n    return x + y\n\nprint(add(2, 3))\nprint(add(5, 7))\n\n// Here is the correct implementation of the code exercise in c:\n\n#include <stdio.h>\n\nint add(int x, int y) {\n    return x + y;\n}\n\nint main() {\n    printf(\"%d\\n\", add(2, 3));\n    printf(\"%d\\n\", add(5, 7));\n    return 0;\n}\n\n// Here is the correct implementation of the code exercise in c++:\n\n#include <iostream>\n\nint add(int x, int y) {\n    return x + y;\n}\n\nint main() {\n    std::cout << add(2, 3) << std::endl;\n    std::cout << add(5, 7) << std::endl;\n    return 0;\n}\n\n// Here is the correct implementation of the code exercise in java:\n\npublic class Add {\n    public static void main(String[] args) {\n        System.out.println(add(2, 3));\n        System.out.println(add(5, 7));\n    }\n\n    public static int add(int x, int y) {\n        return x + y;\n    }\n}\n\n// Here is the correct implementation of the code exercise in ruby:\n\ndef add(x, y)\n    return x + y\nend\n\nputs add(2, 3)\nputs add(5, 7)\n\n// Here is the correct implementation of the code exercise in go:\n\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(add(2, 3))\n    fmt.Println(add(5, 7))\n}\n\nfunc add(x, y int) int {\n    return x + y\n}\n\n// Here is the correct implementation of the code exercise in php:\n\n<?php\n\nfunction add($x, $y) {\n    return $x + $y;\n}\n\necho add(2, 3);\necho add(5, 7);\n\n// Here is the correct implementation of the code exercise in swift:\n\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n}\n\nprint(add(2, 3))\nprint(add(5, 7))\n\n// Here is the correct implementation of the code exercise in scala:\n\nobject Add {\n  def main(args: Array[String]): Unit = {\n    println(add(2, 3))\n    println(add(5, 7))\n  }\n\n  def add(x: Int, y: Int): Int = {\n    x + y\n  }\n}\n\n// Here is the correct implementation of the code exercise in r:\n\nadd <- function(x, y) {\n    return(x + y)\n}\n\nprint(add(2, 3))\nprint(add(5, 7))\n\n// Here is the correct implementation of the code exercise in perl:\n\nsub add {\n    my ($x, $y) = @_;\n    return $x + $y;\n}\n\nprint add(2, 3);\nprint add(5, 7);\n\n// Here is the correct implementation of the code exercise in lua:\n\nfunction add(x, y)\n    return x + y\nend\n\nprint(add(2, 3))\nprint(add(5, 7))\n\n// Here is the correct implementation of the code exercise in bash:\n\n#!/bin/bash\n\nadd() {\n    echo $[ $1 + $2 ]\n}\n\nadd 2 3\nadd 5 7\n\n// Here is the correct implementation of the code exercise in typescript:\n\nfunction add(x: number, y: number): number {\n    return x + y;\n}\n\nconsole.log(",
        "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //\u542b\u6700\u5927\u503c\uff0c\u542b\u6700\u5c0f\u503c\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n",
        "canonical_solution": "  return x + y;\n}\n\n",
        "declaration": "\nconst add = (x, y) => {\n",
        "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //\u542b\u6700\u5927\u503c\uff0c\u542b\u6700\u5c0f\u503c\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n"
    },
    {
        "number": "JavaScript/54",
        "prompt": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\n// Solution 1\n// function sameChars(s0, s1) {\n//   if (s0.length!== s1.length) {\n//     return false;\n//   }\n//   for (let i = 0; i < s0.length; i++) {\n//     if (s0[i]!== s1[i]) {\n//       return false;\n//     }\n//   }\n//   return true;\n// }\n\n// Solution 2\n// function sameChars(s0, s1) {\n//   if (s0.length!== s1.length) {\n//     return false;\n//   }\n//   return s0.split('').sort().join('') === s1.split('').sort().join('');\n// }\n\n// Solution 3\n// function sameChars(s0, s1) {\n//   if (s0.length!== s1.length) {\n//     return false;\n//   }\n//   return s0.split('').sort().join('') === s1.split('').sort().join('');\n// }\n\n// Solution 4\n// function sameChars(s0, s1) {\n//   if (s0.length!== s1.length) {\n//     return false;\n//   }\n//   return s0.split('').sort().join('') === s1.split('').sort().join('');\n// }\n\n// Solution 5\n// function sameChars(s0, s1) {\n//   if (s0.length!== s1.length) {\n//     return false;\n//   }\n//   return s0.split('').sort().join('') === s1.split('').sort().join('');\n// }\n\n// Solution 6\n// function sameChars(s0, s1) {\n//   if (s0.length!== s1.length) {\n//     return false;\n//   }\n//   return s0.split('').sort().join('') === s1.split('').sort().join('');\n// }\n\n// Solution 7\n// function sameChars(s0, s1) {\n//   if (s0.length!== s1.length) {\n//     return false;\n//   }\n//   return s0.split('').sort().join('') === s1.split('').sort().join('');\n// }\n\n// Solution 8\n// function sameChars(s0, s1) {\n//   if (s0.length!== s1.length) {\n//     return false;\n//   }\n//   return s0.split('').sort().join('') === s1.split('').sort().join('');\n// }\n\n// Solution 9\n// function sameChars(s0, s1) {\n//   if (s0.length!== s1.length) {\n//     return false;\n//   }\n//   return s0.split('').sort().join('') === s1.split('').sort().join('');\n// }\n\n// Solution 10\n// function sameChars(s0, s1) {\n//   if (s0.length!== s1.length) {\n//     return false;\n//   }\n//   return s0.split('').sort().join('') === s1.split('').sort().join('');\n// }\n\n// Solution 11\n// function sameChars(s0, s1) {\n//   if (s0.length!== s1.length) {\n//     return false;\n//   }\n//   return s0.split('').sort().join('') === s1.split('').sort().join('');\n// }\n\n// Solution 12\n// function sameChars(s0",
        "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n",
        "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n",
        "declaration": "\nconst sameChars = (s0, s1) => {\n",
        "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n"
    },
    {
        "number": "JavaScript/55",
        "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\n// 1. Write a function that returns the n-th Fibonacci number.\n// 2. Write a function that returns the n-th Fibonacci number.\n// 3. Write a function that returns the n-th Fibonacci number.\n// 4. Write a function that returns the n-th Fibonacci number.\n// 5. Write a function that returns the n-th Fibonacci number.\n// 6. Write a function that returns the n-th Fibonacci number.\n// 7. Write a function that returns the n-th Fibonacci number.\n// 8. Write a function that returns the n-th Fibonacci number.\n// 9. Write a function that returns the n-th Fibonacci number.\n// 10. Write a function that returns the n-th Fibonacci number.\n// 11. Write a function that returns the n-th Fibonacci number.\n// 12. Write a function that returns the n-th Fibonacci number.\n// 13. Write a function that returns the n-th Fibonacci number.\n// 14. Write a function that returns the n-th Fibonacci number.\n// 15. Write a function that returns the n-th Fibonacci number.\n// 16. Write a function that returns the n-th Fibonacci number.\n// 17. Write a function that returns the n-th Fibonacci number.\n// 18. Write a function that returns the n-th Fibonacci number.\n// 19. Write a function that returns the n-th Fibonacci number.\n// 20. Write a function that returns the n-th Fibonacci number.\n// 21. Write a function that returns the n-th Fibonacci number.\n// 22. Write a function that returns the n-th Fibonacci number.\n// 23. Write a function that returns the n-th Fibonacci number.\n// 24. Write a function that returns the n-th Fibonacci number.\n// 25. Write a function that returns the n-th Fibonacci number.\n// 26. Write a function that returns the n-th Fibonacci number.\n// 27. Write a function that returns the n-th Fibonacci number.\n// 28. Write a function that returns the n-th Fibonacci number.\n// 29. Write a function that returns the n-th Fibonacci number.\n// 30. Write a function that returns the n-th Fibonacci number.\n// 31. Write a function that returns the n-th Fibonacci number.\n// 32. Write a function that returns the n-th Fibonacci number.\n// 33. Write a function that returns the n-th Fibonacci number.\n// 34. Write a function that returns the n-th Fibonacci number.\n// 35. Write a function that returns the n-th Fibonacci number.\n// 36. Write a function that returns the n-th Fibonacci number.\n// 37. Write a function that returns the n-th Fibonacci number.\n// 38. Write a function that returns the n-th Fibonacci number.\n// 39. Write a function that returns the n-th Fibonacci number.\n// 40. Write a function that returns the n-th Fibonacci number.\n// 41. Write a function that returns the n-th Fibonacci number.\n// 42. Write a function that returns the n-th Fibonacci number.\n// 43. Write a function that returns the n-th Fibonacci number.\n// 44. Write a function that returns the n-th Fibonacci number.\n// 45. Write a function that returns the n-th Fibonacci number.\n// 46. Write a function that returns the n-th Fibonacci number.\n// 47. Write a function that returns the n-th Fib",
        "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n",
        "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n",
        "declaration": "\nconst fib = (n) => {\n",
        "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n"
    },
    {
        "number": "JavaScript/56",
        "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\n// Solution 1:\n// This solution uses a stack to keep track of the opening brackets.\n// It returns true if the stack is empty after iterating through the string.\n// It returns false if the stack is not empty after iterating through the string.\n\n// Solution 2:\n// This solution uses a stack to keep track of the opening brackets.\n// It returns true if the stack is empty after iterating through the string.\n// It returns false if the stack is not empty after iterating through the string.\n\n// Solution 3:\n// This solution uses a stack to keep track of the opening brackets.\n// It returns true if the stack is empty after iterating through the string.\n// It returns false if the stack is not empty after iterating through the string.\n\n// Solution 4:\n// This solution uses a stack to keep track of the opening brackets.\n// It returns true if the stack is empty after iterating through the string.\n// It returns false if the stack is not empty after iterating through the string.\n\n// Solution 5:\n// This solution uses a stack to keep track of the opening brackets.\n// It returns true if the stack is empty after iterating through the string.\n// It returns false if the stack is not empty after iterating through the string.\n\n// Solution 6:\n// This solution uses a stack to keep track of the opening brackets.\n// It returns true if the stack is empty after iterating through the string.\n// It returns false if the stack is not empty after iterating through the string.\n\n// Solution 7:\n// This solution uses a stack to keep track of the opening brackets.\n// It returns true if the stack is empty after iterating through the string.\n// It returns false if the stack is not empty after iterating through the string.\n\n// Solution 8:\n// This solution uses a stack to keep track of the opening brackets.\n// It returns true if the stack is empty after iterating through the string.\n// It returns false if the stack is not empty after iterating through the string.\n\n// Solution 9:\n// This solution uses a stack to keep track of the opening brackets.\n// It returns true if the stack is empty after iterating through the string.\n// It returns false if the stack is not empty after iterating through the string.\n\n// Solution 10:\n// This solution uses a stack to keep track of the opening brackets.\n// It returns true if the stack is empty after iterating through the string.\n// It returns false if the stack is not empty after iterating through the string.\n\n// Solution 11:\n// This solution uses a stack to keep track of the opening brackets.\n// It returns true if the stack is empty after iterating through the string.\n// It returns false if the stack is not empty after iterating through the string.\n\n// Solution 12:\n// This solution uses a stack to keep track of the opening brackets.\n// It returns true if the stack is empty after iterating through the string.\n// It returns false if the stack is not empty after iterating through the string.\n\n// Solution 13:\n// This solution uses a stack to keep track of the opening brackets.\n// It returns true if the stack is empty after iterating through the string.\n// It returns false if the stack is not empty after iterating through the string.\n\n// Solution 14:\n// This solution uses a stack to keep track of the opening brackets.\n// It returns true if the stack is empty after iterating through the string.\n// It returns false if the stack is not empty after iterating through the string.\n\n// Solution 15:\n// This solution uses a stack to keep track of the opening brackets.\n// It returns true if the stack is empty after iterating through the string.\n// It returns false if the stack is not empty after iterating through the string.\n\n// Solution 16:\n// This solution uses a stack to keep track of the opening brackets.\n// It returns true if the stack is empty after iterating through",
        "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n",
        "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n",
        "declaration": "\nconst correctBracketing = (brackets) => {\n",
        "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n"
    },
    {
        "number": "JavaScript/57",
        "prompt": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\nconst monotonic = (l) => {\n  let increasing = true;\n  let decreasing = true;\n  for (let i = 0; i < l.length - 1; i++) {\n    if (l[i] > l[i + 1]) {\n      increasing = false;\n    }\n    if (l[i] < l[i + 1]) {\n      decreasing = false;\n    }\n  }\n  return increasing || decreasing;\n};\n\nconsole.log(monotonic([1, 2, 4, 20]));\nconsole.log(monotonic([1, 20, 4, 10]));\nconsole.log(monotonic([4, 1, 0, -10]));\n\n// Here is the correct implementation of the code exercise in python:\n\ndef monotonic(l):\n    increasing = True\n    decreasing = True\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            increasing = False\n        if l[i] < l[i + 1]:\n            decreasing = False\n    return increasing or decreasing\n\nprint(monotonic([1, 2, 4, 20]))\nprint(monotonic([1, 20, 4, 10]))\nprint(monotonic([4, 1, 0, -10]))\n\n// Here is the correct implementation of the code exercise in c:\n\n#include <stdio.h>\n#include <stdbool.h>\n\nbool monotonic(int *l, int n) {\n    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 0; i < n - 1; i++) {\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n        }\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n}\n\nint main() {\n    int l[] = {1, 2, 4, 20};\n    int n = sizeof(l) / sizeof(l[0]);\n    printf(\"%d\\n\", monotonic(l, n));\n    int l2[] = {1, 20, 4, 10};\n    int n2 = sizeof(l2) / sizeof(l2[0]);\n    printf(\"%d\\n\", monotonic(l2, n2));\n    int l3[] = {4, 1, 0, -10};\n    int n3 = sizeof(l3) / sizeof(l3[0]);\n    printf(\"%d\\n\", monotonic(l3, n3));\n    return 0;\n}\n\n// Here is the correct implementation of the code exercise in c++:\n\n#include <iostream>\n#include <vector>\n\nbool monotonic(std::vector<int> l) {\n    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 0; i < l.size() - 1; i++) {\n        if (l[i] > l[i + 1]) {\n            increasing = false;\n        }\n        if (l[i] < l[i + 1]) {\n            decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n}\n\nint main() {\n    std::vector<int> l = {1, 2, 4, 20};\n    std::cout << monotonic(l) << std::endl;\n    std::vector<int> l2 = {1, 20, 4, 10};\n    std::cout << monotonic(l2) << std::endl;\n    std::vector<int> l3 = {4, 1, 0, -10};\n    std::cout << monotonic(l3) << std::endl;\n    return 0;\n}\n\n// Here is the correct implementation of the code exercise",
        "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n",
        "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n",
        "declaration": "\nconst monotonic = (l) => {\n",
        "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n"
    },
    {
        "number": "JavaScript/58",
        "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\n// Solution 1\n// Solution 2\n// Solution 3\n// Solution 4\n// Solution 5\n// Solution 6\n// Solution 7\n// Solution 8\n// Solution 9\n// Solution 10\n// Solution 11\n// Solution 12\n// Solution 13\n// Solution 14\n// Solution 15\n// Solution 16\n// Solution 17\n// Solution 18\n// Solution 19\n// Solution 20\n// Solution 21\n// Solution 22\n// Solution 23\n// Solution 24\n// Solution 25\n// Solution 26\n// Solution 27\n// Solution 28\n// Solution 29\n// Solution 30\n// Solution 31\n// Solution 32\n// Solution 33\n// Solution 34\n// Solution 35\n// Solution 36\n// Solution 37\n// Solution 38\n// Solution 39\n// Solution 40\n// Solution 41\n// Solution 42\n// Solution 43\n// Solution 44\n// Solution 45\n// Solution 46\n// Solution 47\n// Solution 48\n// Solution 49\n// Solution 50\n// Solution 51\n// Solution 52\n// Solution 53\n// Solution 54\n// Solution 55\n// Solution 56\n// Solution 57\n// Solution 58\n// Solution 59\n// Solution 60\n// Solution 61\n// Solution 62\n// Solution 63\n// Solution 64\n// Solution 65\n// Solution 66\n// Solution 67\n// Solution 68\n// Solution 69\n// Solution 70\n// Solution 71\n// Solution 72\n// Solution 73\n// Solution 74\n// Solution 75\n// Solution 76\n// Solution 77\n// Solution 78\n// Solution 79\n// Solution 80\n// Solution 81\n// Solution 82\n// Solution 83\n// Solution 84\n// Solution 85\n// Solution 86\n// Solution 87\n// Solution 88\n// Solution 89\n// Solution 90\n// Solution 91\n// Solution 92\n// Solution 93\n// Solution 94\n// Solution 95\n// Solution 96\n// Solution 97\n// Solution 98\n// Solution 99\n// Solution 100\n// Solution 101\n// Solution 102\n// Solution 103\n// Solution 104\n// Solution 105\n// Solution 106\n// Solution 107\n// Solution 108\n// Solution 109\n// Solution 110\n// Solution 111\n// Solution 112\n// Solution 113\n// Solution 114\n// Solution 115\n// Solution 116\n// Solution 117\n// Solution 118\n// Solution 119\n// Solution 120\n// Solution 121\n// Solution 122\n// Solution 123\n// Solution 124\n// Solution 125\n// Solution 126\n// Solution 127\n// Solution 128\n// Solution 129\n// Solution 130\n// Solution 131\n// Solution 132\n// Solution 133\n// Solution 134\n// Solution 135\n// Solution 136\n// Solution 137\n// Solution 138\n",
        "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n",
        "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n",
        "declaration": "\nconst common = (l1, l2) => {\n",
        "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n"
    },
    {
        "number": "JavaScript/59",
        "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\n// function largestPrimeFactor(n) {\n//   for (let i = n; i > 1; i--) {\n//     if (n % i === 0) {\n//       return i;\n//     }\n//   }\n// }\n\n// function largestPrimeFactor(n) {\n//   for (let i = n; i > 1; i--) {\n//     if (n % i === 0) {\n//       return i;\n//     }\n//   }\n// }\n\n// function largestPrimeFactor(n) {\n//   for (let i = n; i > 1; i--) {\n//     if (n % i === 0) {\n//       return i;\n//     }\n//   }\n// }\n\n// function largestPrimeFactor(n) {\n//   for (let i = n; i > 1; i--) {\n//     if (n % i === 0) {\n//       return i;\n//     }\n//   }\n// }\n\n// function largestPrimeFactor(n) {\n//   for (let i = n; i > 1; i--) {\n//     if (n % i === 0) {\n//       return i;\n//     }\n//   }\n// }\n\n// function largestPrimeFactor(n) {\n//   for (let i = n; i > 1; i--) {\n//     if (n % i === 0) {\n//       return i;\n//     }\n//   }\n// }\n\n// function largestPrimeFactor(n) {\n//   for (let i = n; i > 1; i--) {\n//     if (n % i === 0) {\n//       return i;\n//     }\n//   }\n// }\n\n// function largestPrimeFactor(n) {\n//   for (let i = n; i > 1; i--) {\n//     if (n % i === 0) {\n//       return i;\n//     }\n//   }\n// }\n\n// function largestPrimeFactor(n) {\n//   for (let i = n; i > 1; i--) {\n//     if (n % i === 0) {\n//       return i;\n//     }\n//   }\n// }\n\n// function largestPrimeFactor(n) {\n//   for (let i = n; i > 1; i--) {\n//     if (n % i === 0) {\n//       return i;\n//     }\n//   }\n// }\n\n// function largestPrimeFactor(n) {\n//   for (let i = n; i > 1; i--) {\n//     if (n % i === 0) {\n//       return i;\n//     }\n//   }\n// }\n\n// function largestPrimeFactor(n) {\n//   for (let i = n; i > 1; i--) {\n//     if (n % i === 0) {\n//       return i;\n//     }\n//   }\n// }\n\n// function largestPrimeFactor(n) {\n//   for (let i = n; i > 1; i--) {\n//     if (n % i === 0) {\n//       return i;\n//     }\n//   }\n// }\n\n// function largestPrimeFactor(n) {\n//   for (let i = n; i > 1; i--) {\n//     if (n % i === 0) {\n//       return i;\n//     }\n//   }\n// }\n\n// function largestPrimeFactor(n) {\n//   for (let i = n; i > 1; i--) {\n//     if (n % i === 0) {\n//       return i;\n//     }\n//   }\n// }\n\n// function largestPrimeFactor(n) {\n//   for (let i = n; i > 1; i--) {\n//",
        "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n",
        "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n",
        "declaration": "\nconst largestPrimeFactor = (n) => {\n",
        "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n"
    },
    {
        "number": "JavaScript/60",
        "prompt": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\n// Solution 1\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// Solution 2\nconst sumToN = (n) => {\n  return n * (n + 1) / 2;\n};\n\n// Solution 3\nconst sumToN = (n) => {\n  return (n * (n + 1)) / 2;\n};\n\n// Solution 4\nconst sumToN = (n) => {\n  return n * (n + 1) >> 1;\n};\n\n// Solution 5\nconst sumToN = (n) => {\n  return n * (n + 1) >> 1;\n};\n\n// Solution 6\nconst sumToN = (n) => {\n  return n * (n + 1) >> 1;\n};\n\n// Solution 7\nconst sumToN = (n) => {\n  return n * (n + 1) >> 1;\n};\n\n// Solution 8\nconst sumToN = (n) => {\n  return n * (n + 1) >> 1;\n};\n\n// Solution 9\nconst sumToN = (n) => {\n  return n * (n + 1) >> 1;\n};\n\n// Solution 10\nconst sumToN = (n) => {\n  return n * (n + 1) >> 1;\n};\n\n// Solution 11\nconst sumToN = (n) => {\n  return n * (n + 1) >> 1;\n};\n\n// Solution 12\nconst sumToN = (n) => {\n  return n * (n + 1) >> 1;\n};\n\n// Solution 13\nconst sumToN = (n) => {\n  return n * (n + 1) >> 1;\n};\n\n// Solution 14\nconst sumToN = (n) => {\n  return n * (n + 1) >> 1;\n};\n\n// Solution 15\nconst sumToN = (n) => {\n  return n * (n + 1) >> 1;\n};\n\n// Solution 16\nconst sumToN = (n) => {\n  return n * (n + 1) >> 1;\n};\n\n// Solution 17\nconst sumToN = (n) => {\n  return n * (n + 1) >> 1;\n};\n\n// Solution 18\nconst sumToN = (n) => {\n  return n * (n + 1) >> 1;\n};\n\n// Solution 19\nconst sumToN = (n) => {\n  return n * (n + 1) >> 1;\n};\n\n// Solution 20\nconst sumToN = (n) => {\n  return n * (n + 1) >> 1;\n};\n\n// Solution 21\nconst sumToN = (n) => {\n  return n * (n + 1) >> 1;\n};\n\n// Solution 22\nconst sumToN = (n) => {\n  return n * (n + 1) >> 1;\n};\n\n// Solution 23\nconst sumToN = (n) => {\n  return n * (n + 1) >> 1;\n};\n\n// Solution 24\nconst sumToN = (n) => {\n  return n * (n + 1) >> 1;\n};\n\n// Solution 25\nconst sumToN = (n) => {\n  return n * (n + 1) >> 1;\n};\n\n// Solution 26\nconst sumToN = (n) => {\n  return n * (n +",
        "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n",
        "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n",
        "declaration": "\nconst sumToN = (n) => {\n",
        "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n"
    },
    {
        "number": "JavaScript/61",
        "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\n// Solution 1:\n// This solution uses a stack to keep track of the opening brackets.\n// It iterates through the string and checks if the current character is an opening bracket.\n// If it is, it pushes it onto the stack.\n// If it is a closing bracket, it checks if the stack is empty.\n// If it is, it returns false.\n// If it is not empty, it pops the top element of the stack and checks if it is the corresponding closing bracket.\n// If it is, it continues iterating through the string.\n// If it is not, it returns false.\n// If the string has been iterated through and the stack is empty, it returns true.\n\n// Solution 2:\n// This solution uses a stack to keep track of the opening brackets.\n// It iterates through the string and checks if the current character is an opening bracket.\n// If it is, it pushes it onto the stack.\n// If it is a closing bracket, it checks if the stack is empty.\n// If it is, it returns false.\n// If it is not empty, it pops the top element of the stack and checks if it is the corresponding closing bracket.\n// If it is, it continues iterating through the string.\n// If it is not, it returns false.\n// If the string has been iterated through and the stack is empty, it returns true.\n\n// Solution 3:\n// This solution uses a stack to keep track of the opening brackets.\n// It iterates through the string and checks if the current character is an opening bracket.\n// If it is, it pushes it onto the stack.\n// If it is a closing bracket, it checks if the stack is empty.\n// If it is, it returns false.\n// If it is not empty, it pops the top element of the stack and checks if it is the corresponding closing bracket.\n// If it is, it continues iterating through the string.\n// If it is not, it returns false.\n// If the string has been iterated through and the stack is empty, it returns true.\n\n// Solution 4:\n// This solution uses a stack to keep track of the opening brackets.\n// It iterates through the string and checks if the current character is an opening bracket.\n// If it is, it pushes it onto the stack.\n// If it is a closing bracket, it checks if the stack is empty.\n// If it is, it returns false.\n// If it is not empty, it pops the top element of the stack and checks if it is the corresponding closing bracket.\n// If it is, it continues iterating through the string.\n// If it is not, it returns false.\n// If the string has been iterated through and the stack is empty, it returns true.\n\n// Solution 5:\n// This solution uses a stack to keep track of the opening brackets.\n// It iterates through the string and checks if the current character is an opening bracket.\n// If it is, it pushes it onto the stack.\n// If it is a closing bracket, it checks if the stack is empty.\n// If it is, it returns false.\n// If it is not empty, it pops the top element of the stack and checks if it is the corresponding closing bracket.\n// If it is, it continues iterating through the string.\n// If it is not, it returns false.\n// If the string has been iterated through and the stack is empty, it returns true.\n\n// Solution 6:\n// This solution uses a stack to keep track of the opening brackets.\n// It iterates through the string and checks if the current character is an opening bracket.\n// If it is, it pushes it onto the stack.\n// If it is a closing bracket, it checks if the stack is empty.\n// If it is, it returns false.\n// If it is not empty, it pops the top element of the stack and checks if it is the corresponding closing bracket.\n// If it is, it continues iterating through the string.\n// If it is",
        "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n",
        "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n",
        "declaration": "\nconst correctBracketing = (brackets) => {\n",
        "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n"
    },
    {
        "number": "JavaScript/62",
        "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\n// 1. Write a function that takes in a list of numbers and returns the sum of the numbers.\n// 2. Write a function that takes in a list of numbers and returns the product of the numbers.\n// 3. Write a function that takes in a list of numbers and returns the sum of the squares of the numbers.\n// 4. Write a function that takes in a list of numbers and returns the product of the cubes of the numbers.\n// 5. Write a function that takes in a list of numbers and returns the sum of the fourth powers of the numbers.\n// 6. Write a function that takes in a list of numbers and returns the product of the fifth powers of the numbers.\n// 7. Write a function that takes in a list of numbers and returns the sum of the sixth powers of the numbers.\n// 8. Write a function that takes in a list of numbers and returns the product of the seventh powers of the numbers.\n// 9. Write a function that takes in a list of numbers and returns the sum of the eighth powers of the numbers.\n// 10. Write a function that takes in a list of numbers and returns the product of the ninth powers of the numbers.\n// 11. Write a function that takes in a list of numbers and returns the sum of the tenth powers of the numbers.\n// 12. Write a function that takes in a list of numbers and returns the product of the eleventh powers of the numbers.\n// 13. Write a function that takes in a list of numbers and returns the sum of the twelfth powers of the numbers.\n// 14. Write a function that takes in a list of numbers and returns the product of the thirteenth powers of the numbers.\n// 15. Write a function that takes in a list of numbers and returns the sum of the fourteenth powers of the numbers.\n// 16. Write a function that takes in a list of numbers and returns the product of the fifteenth powers of the numbers.\n// 17. Write a function that takes in a list of numbers and returns the sum of the sixteenth powers of the numbers.\n// 18. Write a function that takes in a list of numbers and returns the product of the seventeenth powers of the numbers.\n// 19. Write a function that takes in a list of numbers and returns the sum of the eighteenth powers of the numbers.\n// 20. Write a function that takes in a list of numbers and returns the product of the nineteenth powers of the numbers.\n// 21. Write a function that takes in a list of numbers and returns the sum of the twentieth powers of the numbers.\n// 22. Write a function that takes in a list of numbers and returns the product of the twenty-first powers of the numbers.\n// 23. Write a function that takes in a list of numbers and returns the sum of the twenty-second powers of the numbers.\n// 24. Write a function that takes in a list of numbers and returns the product of the twenty-third powers of the numbers.\n// 25. Write a function that takes in a list of numbers and returns the sum of the twenty-fourth powers of the numbers.\n// 26. Write a function that takes in a list of numbers and returns the product of the twenty-fifth powers of the numbers.\n// 27. Write a function that takes in a list of numbers and returns the sum of the twenty-sixth powers of the numbers.\n// 28. Write a function that takes in a list of numbers and returns the product of the twenty-seventh powers of the numbers.\n// 29. Write a function that takes in a list of numbers and returns the sum of the twenty-eighth powers of the numbers.\n// 30. Write a function that takes in a list",
        "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n",
        "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n",
        "declaration": "\nconst derivative = (xs) => {\n",
        "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n"
    },
    {
        "number": "JavaScript/63",
        "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\nconst fibfib = (n) => {\n  if (n < 3) {\n    return n;\n  }\n  let fibfib_n_minus_1 = 0;\n  let fibfib_n_minus_2 = 0;\n  let fibfib_n_minus_3 = 1;\n  let fibfib_n = 0;\n  for (let i = 3; i <= n; i++) {\n    fibfib_n = fibfib_n_minus_1 + fibfib_n_minus_2 + fibfib_n_minus_3;\n    fibfib_n_minus_3 = fibfib_n_minus_2;\n    fibfib_n_minus_2 = fibfib_n_minus_1;\n    fibfib_n_minus_1 = fibfib_n;\n  }\n  return fibfib_n;\n};\n\n// Here is the correct implementation of the code exercise in python:\n\ndef fibfib(n):\n    if n < 3:\n        return n\n    fibfib_n_minus_1 = 0\n    fibfib_n_minus_2 = 0\n    fibfib_n_minus_3 = 1\n    fibfib_n = 0\n    for i in range(3, n+1):\n        fibfib_n = fibfib_n_minus_1 + fibfib_n_minus_2 + fibfib_n_minus_3\n        fibfib_n_minus_3 = fibfib_n_minus_2\n        fibfib_n_minus_2 = fibfib_n_minus_1\n        fibfib_n_minus_1 = fibfib_n\n    return fibfib_n\n\n// Here is the correct implementation of the code exercise in C:\n\nint fibfib(int n) {\n    if (n < 3) {\n        return n;\n    }\n    int fibfib_n_minus_1 = 0;\n    int fibfib_n_minus_2 = 0;\n    int fibfib_n_minus_3 = 1;\n    int fibfib_n = 0;\n    for (int i = 3; i <= n; i++) {\n        fibfib_n = fibfib_n_minus_1 + fibfib_n_minus_2 + fibfib_n_minus_3;\n        fibfib_n_minus_3 = fibfib_n_minus_2;\n        fibfib_n_minus_2 = fibfib_n_minus_1;\n        fibfib_n_minus_1 = fibfib_n;\n    }\n    return fibfib_n;\n}\n\n// Here is the correct implementation of the code exercise in C++:\n\nint fibfib(int n) {\n    if (n < 3) {\n        return n;\n    }\n    int fibfib_n_minus_1 = 0;\n    int fibfib_n_minus_2 = 0;\n    int fibfib_n_minus_3 = 1;\n    int fibfib_n = 0;\n    for (int i = 3; i <= n; i++) {\n        fibfib_n = fibfib_n_minus_1 + fibfib_n_minus_2 + fibfib_n_minus_3;\n        fibfib_n_minus_3 = fibfib_n_minus_2;\n        fibfib_n_minus_2 = fibfib_n_minus_1;\n        fibfib_n_minus_1 = fibfib_n;\n    }\n    return fibfib_n;\n}\n\n// Here is the correct implementation of the code exercise in Java:\n\nint fibfib(int n) {\n    if (n < 3) {\n        return n;\n    }\n    int fibfib_n_minus_1 = 0;\n    int",
        "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n",
        "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n",
        "declaration": "\nconst fibfib = (n) => {\n",
        "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n"
    },
    {
        "number": "JavaScript/64",
        "prompt": "/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\n// Solution 1\n// function vowelsCount(s) {\n//   let count = 0;\n//   for (let i = 0; i < s.length; i++) {\n//     if (s[i] === \"a\" || s[i] === \"e\" || s[i] === \"i\" || s[i] === \"o\" || s[i] === \"u\") {\n//       count++;\n//     }\n//   }\n//   return count;\n// }\n\n// Solution 2\n// function vowelsCount(s) {\n//   let count = 0;\n//   for (let i = 0; i < s.length; i++) {\n//     if (s[i] === \"a\" || s[i] === \"e\" || s[i] === \"i\" || s[i] === \"o\" || s[i] === \"u\" || s[i] === \"y\") {\n//       count++;\n//     }\n//   }\n//   return count;\n// }\n\n// Solution 3\n// function vowelsCount(s) {\n//   let count = 0;\n//   for (let i = 0; i < s.length; i++) {\n//     if (s[i] === \"a\" || s[i] === \"e\" || s[i] === \"i\" || s[i] === \"o\" || s[i] === \"u\" || s[i] === \"A\" || s[i] === \"E\" || s[i] === \"I\" || s[i] === \"O\" || s[i] === \"U\" || s[i] === \"Y\") {\n//       count++;\n//     }\n//   }\n//   return count;\n// }\n\n// Solution 4\n// function vowelsCount(s) {\n//   let count = 0;\n//   for (let i = 0; i < s.length; i++) {\n//     if (s[i] === \"a\" || s[i] === \"e\" || s[i] === \"i\" || s[i] === \"o\" || s[i] === \"u\" || s[i] === \"A\" || s[i] === \"E\" || s[i] === \"I\" || s[i] === \"O\" || s[i] === \"U\" || s[i] === \"Y\" || s[i] === \"y\") {\n//       count++;\n//     }\n//   }\n//   return count;\n// }\n\n// Solution 5\n// function vowelsCount(s) {\n//   let count = 0;\n//   for (let i = 0; i < s.length; i++) {\n//     if (s[i] === \"a\" || s[i] === \"e\" || s[i] === \"i\" || s[i] === \"o\" || s[i] === \"u\" || s[i] === \"A\" || s[i] === \"E\" || s[i] === \"I\" || s[i] === \"O\" || s[i] === \"U\" || s[i] === \"Y\" || s[i] === \"y\" || s[i] === \"a\" || s[i] === \"e\" || s[i] === \"i\" || s[i] === \"o\" || s[i] === \"u\" || s[i] === \"A\" || s[i] === \"E\" || s[i] === \"I\" || s[i] === \"O\" || s[i] === \"U\" || s[i] === \"Y\") {\n",
        "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n",
        "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n",
        "declaration": "\nconst vowelsCount = (s) => {\n",
        "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n"
    },
    {
        "number": "JavaScript/65",
        "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\nconst circularShift = (x, shift) => {\n  const str = x.toString();\n  const len = str.length;\n  const shift = shift % len;\n  const firstPart = str.slice(0, len - shift);\n  const secondPart = str.slice(len - shift, len);\n  return secondPart + firstPart;\n};\n\nconsole.log(circularShift(12, 1));\nconsole.log(circularShift(12, 2));\nconsole.log(circularShift(12, 3));\nconsole.log(circularShift(12, 4));\nconsole.log(circularShift(12, 5));\nconsole.log(circularShift(12, 6));\nconsole.log(circularShift(12, 7));\nconsole.log(circularShift(12, 8));\nconsole.log(circularShift(12, 9));\nconsole.log(circularShift(12, 10));\nconsole.log(circularShift(12, 11));\nconsole.log(circularShift(12, 12));\nconsole.log(circularShift(12, 13));\nconsole.log(circularShift(12, 14));\nconsole.log(circularShift(12, 15));\nconsole.log(circularShift(12, 16));\nconsole.log(circularShift(12, 17));\nconsole.log(circularShift(12, 18));\nconsole.log(circularShift(12, 19));\nconsole.log(circularShift(12, 20));\nconsole.log(circularShift(12, 21));\nconsole.log(circularShift(12, 22));\nconsole.log(circularShift(12, 23));\nconsole.log(circularShift(12, 24));\nconsole.log(circularShift(12, 25));\nconsole.log(circularShift(12, 26));\nconsole.log(circularShift(12, 27));\nconsole.log(circularShift(12, 28));\nconsole.log(circularShift(12, 29));\nconsole.log(circularShift(12, 30));\nconsole.log(circularShift(12, 31));\nconsole.log(circularShift(12, 32));\nconsole.log(circularShift(12, 33));\nconsole.log(circularShift(12, 34));\nconsole.log(circularShift(12, 35));\nconsole.log(circularShift(12, 36));\nconsole.log(circularShift(12, 37));\nconsole.log(circularShift(12, 38));\nconsole.log(circularShift(12, 39));\nconsole.log(circularShift(12, 40));\nconsole.log(circularShift(12, 41));\nconsole.log(circularShift(12, 42));\nconsole.log(circularShift(12, 43));\nconsole.log(circularShift(12, 44));\nconsole.log(circularShift(12, 45));\nconsole.log(circularShift(12, 46));\nconsole.log(circularShift(12, 47));\nconsole.log(circularShift(12, 48));\nconsole.log(circularShift(12, 49));\nconsole.log(circularShift(12, 50));\nconsole.log(circularShift(12, 51));\nconsole.log(circularShift(12, 52));\nconsole.log(circularShift(12, 53));\nconsole.log(circularShift(12, 54));\nconsole.log(circularShift(12, 55));",
        "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n",
        "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n",
        "declaration": "\nconst circularShift = (x, shift) => {\n",
        "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n"
    },
    {
        "number": "JavaScript/66",
        "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\n// Solution 1\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= \"A\" && s[i] <= \"Z\") {\n      sum += s.charCodeAt(i);\n    }\n  }\n  return sum;\n};\n\n// Solution 2\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= \"A\" && s[i] <= \"Z\") {\n      sum += s.charCodeAt(i);\n    }\n  }\n  return sum;\n};\n\n// Solution 3\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= \"A\" && s[i] <= \"Z\") {\n      sum += s.charCodeAt(i);\n    }\n  }\n  return sum;\n};\n\n// Solution 4\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= \"A\" && s[i] <= \"Z\") {\n      sum += s.charCodeAt(i);\n    }\n  }\n  return sum;\n};\n\n// Solution 5\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= \"A\" && s[i] <= \"Z\") {\n      sum += s.charCodeAt(i);\n    }\n  }\n  return sum;\n};\n\n// Solution 6\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= \"A\" && s[i] <= \"Z\") {\n      sum += s.charCodeAt(i);\n    }\n  }\n  return sum;\n};\n\n// Solution 7\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= \"A\" && s[i] <= \"Z\") {\n      sum += s.charCodeAt(i);\n    }\n  }\n  return sum;\n};\n\n// Solution 8\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= \"A\" && s[i] <= \"Z\") {\n      sum += s.charCodeAt(i);\n    }\n  }\n  return sum;\n};\n\n// Solution 9\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= \"A\" && s[i] <= \"Z\") {\n      sum += s.charCodeAt(i);\n    }\n  }\n  return sum;\n};\n\n// Solution 10\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= \"A\" && s[i] <= \"Z\") {\n      sum += s.charCodeAt(i);\n    }\n  }\n  return sum;\n};\n\n// Solution 11\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= \"A\" && s[",
        "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n",
        "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n",
        "declaration": "\nconst digitSum = (s) => {\n",
        "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n"
    },
    {
        "number": "JavaScript/67",
        "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\n// Solution 1\n// const fruitDistribution = (s, n) => {\n//   const [apples, oranges] = s.split(' and ');\n//   const [appleCount, orangeCount] = apples.split(' ').map(Number);\n//   const [orangesCount, mangoCount] = oranges.split(' ').map(Number);\n//   return n - appleCount - orangeCount - orangesCount;\n// };\n\n// Solution 2\n// const fruitDistribution = (s, n) => {\n//   const [apples, oranges] = s.split(' and ');\n//   const [appleCount, orangeCount] = apples.split(' ').map(Number);\n//   const [orangesCount, mangoCount] = oranges.split(' ').map(Number);\n//   return n - appleCount - orangeCount - orangesCount;\n// };\n\n// Solution 3\n// const fruitDistribution = (s, n) => {\n//   const [apples, oranges] = s.split(' and ');\n//   const [appleCount, orangeCount] = apples.split(' ').map(Number);\n//   const [orangesCount, mangoCount] = oranges.split(' ').map(Number);\n//   return n - appleCount - orangeCount - orangesCount;\n// };\n\n// Solution 4\n// const fruitDistribution = (s, n) => {\n//   const [apples, oranges] = s.split(' and ');\n//   const [appleCount, orangeCount] = apples.split(' ').map(Number);\n//   const [orangesCount, mangoCount] = oranges.split(' ').map(Number);\n//   return n - appleCount - orangeCount - orangesCount;\n// };\n\n// Solution 5\n// const fruitDistribution = (s, n) => {\n//   const [apples, oranges] = s.split(' and ');\n//   const [appleCount, orangeCount] = apples.split(' ').map(Number);\n//   const [orangesCount, mangoCount] = oranges.split(' ').map(Number);\n//   return n - appleCount - orangeCount - orangesCount;\n// };\n\n// Solution 6\n// const fruitDistribution = (s, n) => {\n//   const [apples, oranges] = s.split(' and ');\n//   const [appleCount, orangeCount] = apples.split(' ').map(Number);\n//   const [orangesCount, mangoCount] = oranges.split(' ').map(Number);\n//   return n - appleCount - orangeCount - orangesCount;\n// };\n\n// Solution 7\n// const fruitDistribution = (s, n) => {\n//   const [apples, oranges] = s.split(' and ');\n//   const [appleCount, orangeCount] = apples.split(' ').map(Number);\n//   const [orangesCount, mangoCount] = oranges.split(' ').map(Number);\n//   return n - appleCount - orangeCount - orangesCount;\n// };\n\n// Solution 8\n// const fruitDistribution = (s, n) => {\n//   const [apples,",
        "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n",
        "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n",
        "declaration": "\nconst fruitDistribution = (s, n) => {\n",
        "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n"
    },
    {
        "number": "JavaScript/68",
        "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\nconst pluck = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n\n  let min = arr[0];\n  let minIndex = 0;\n\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i] < min) {\n      min = arr[i];\n      minIndex = i;\n    }\n  }\n\n  return [min, minIndex];\n};\n\nconsole.log(pluck([4, 2, 3]));\nconsole.log(pluck([1, 2, 3]));\nconsole.log(pluck([]));\nconsole.log(pluck([5, 0, 3, 0, 4, 2]));\n<|endoftext|>",
        "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n",
        "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n",
        "declaration": "\nconst pluck = (arr) => {\n",
        "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n"
    },
    {
        "number": "JavaScript/69",
        "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\n// Solution 1\n// O(n) time | O(n) space\nconst search = (lst) => {\n  const frequencyMap = {}\n  for (const num of lst) {\n    frequencyMap[num] = frequencyMap[num] + 1 || 1\n  }\n  for (const num in frequencyMap) {\n    if (frequencyMap[num] > num) {\n      return num\n    }\n  }\n  return -1\n}\n\n// Solution 2\n// O(n) time | O(1) space\nconst search = (lst) => {\n  const frequencyMap = {}\n  for (const num of lst) {\n    frequencyMap[num] = frequencyMap[num] + 1 || 1\n  }\n  for (const num in frequencyMap) {\n    if (frequencyMap[num] > num) {\n      return num\n    }\n  }\n  return -1\n}\n\n// Solution 3\n// O(n) time | O(1) space\nconst search = (lst) => {\n  const frequencyMap = {}\n  for (const num of lst) {\n    frequencyMap[num] = frequencyMap[num] + 1 || 1\n  }\n  for (const num in frequencyMap) {\n    if (frequencyMap[num] > num) {\n      return num\n    }\n  }\n  return -1\n}\n\n// Solution 4\n// O(n) time | O(1) space\nconst search = (lst) => {\n  const frequencyMap = {}\n  for (const num of lst) {\n    frequencyMap[num] = frequencyMap[num] + 1 || 1\n  }\n  for (const num in frequencyMap) {\n    if (frequencyMap[num] > num) {\n      return num\n    }\n  }\n  return -1\n}\n\n// Solution 5\n// O(n) time | O(1) space\nconst search = (lst) => {\n  const frequencyMap = {}\n  for (const num of lst) {\n    frequencyMap[num] = frequencyMap[num] + 1 || 1\n  }\n  for (const num in frequencyMap) {\n    if (frequencyMap[num] > num) {\n      return num\n    }\n  }\n  return -1\n}\n\n// Solution 6\n// O(n) time | O(1) space\nconst search = (lst) => {\n  const frequencyMap = {}\n  for (const num of lst) {\n    frequencyMap[num] = frequencyMap[num] + 1 || 1\n  }\n  for (const num in frequencyMap) {\n    if (frequencyMap[num] > num) {\n      return num\n    }\n  }\n  return -1\n}\n\n// Solution 7\n// O(n) time | O(1) space\nconst search = (lst) => {\n  const frequencyMap = {}\n  for (const num of lst) {\n    frequencyMap[num] = frequencyMap[num] + 1 || 1\n  }\n  for (const num in frequencyMap) {\n    if (frequencyMap[num] > num) {\n      return num\n    }\n  }\n  return -1\n}\n\n// Solution 8\n// O(n) time | O(1) space\nconst search = (lst) => {\n  const frequencyMap = {}\n  for (const num of lst) {\n    frequencyMap[num] = frequencyMap[num] + 1 || 1\n  }\n  for (const num in frequencyMap) {\n    if (frequencyMap[num] > num) {\n      return num\n    }\n  }\n  return -1\n}\n\n// Solution 9\n// O(n) time | O(1) space\nconst search = (lst) => {\n  const frequencyMap = {}",
        "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n",
        "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n",
        "declaration": "\nconst search = (lst) => {\n",
        "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n"
    },
    {
        "number": "JavaScript/70",
        "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\nconst strangeSortList = (lst) => {\n  if (lst.length <= 1) {\n    return lst;\n  }\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const rest = lst.filter((x) => x!== min && x!== max);\n  return [min,...strangeSortList(rest), max];\n};\n\nconsole.log(strangeSortList([1, 2, 3, 4]));\nconsole.log(strangeSortList([5, 5, 5, 5]));\nconsole.log(strangeSortList([]));\n<|endoftext|>",
        "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n",
        "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n",
        "declaration": "\nconst strangeSortList = (lst) => {\n",
        "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n"
    },
    {
        "number": "JavaScript/71",
        "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\n// Solution 1\n\n// Solution 2\n\n// Solution 3\n\n// Solution 4\n\n// Solution 5\n\n// Solution 6\n\n// Solution 7\n\n// Solution 8\n\n// Solution 9\n\n// Solution 10\n\n// Solution 11\n\n// Solution 12\n\n// Solution 13\n\n// Solution 14\n\n// Solution 15\n\n// Solution 16\n\n// Solution 17\n\n// Solution 18\n\n// Solution 19\n\n// Solution 20\n\n// Solution 21\n\n// Solution 22\n\n// Solution 23\n\n// Solution 24\n\n// Solution 25\n\n// Solution 26\n\n// Solution 27\n\n// Solution 28\n\n// Solution 29\n\n// Solution 30\n\n// Solution 31\n\n// Solution 32\n\n// Solution 33\n\n// Solution 34\n\n// Solution 35\n\n// Solution 36\n\n// Solution 37\n\n// Solution 38\n\n// Solution 39\n\n// Solution 40\n\n// Solution 41\n\n// Solution 42\n\n// Solution 43\n\n// Solution 44\n\n// Solution 45\n\n// Solution 46\n\n// Solution 47\n\n// Solution 48\n\n// Solution 49\n\n// Solution 50\n\n// Solution 51\n\n// Solution 52\n\n// Solution 53\n\n// Solution 54\n\n// Solution 55\n\n// Solution 56\n\n// Solution 57\n\n// Solution 58\n\n// Solution 59\n\n// Solution 60\n\n// Solution 61\n\n// Solution 62\n\n// Solution 63\n\n// Solution 64\n\n// Solution 65\n\n// Solution 66\n\n// Solution 67\n\n// Solution 68\n\n// Solution 69\n\n// Solution 70\n\n// Solution 71\n\n// Solution 72\n\n// Solution 73\n\n// Solution 74\n\n// Solution 75\n\n// Solution 76\n\n// Solution 77\n\n// Solution 78\n\n// Solution 79\n\n// Solution 80\n\n// Solution 81\n\n// Solution 82\n\n// Solution 83\n\n// Solution 84\n\n// Solution 85\n\n// Solution 86\n\n// Solution 87\n\n// Solution 88\n\n// Solution 89\n\n// Solution 90\n\n// Solution 91\n\n// Solution 92\n\n// Solution 93\n\n// Solution 94\n\n// Solution 95\n\n// Solution 96\n\n// Solution 97\n\n// Solution 98\n\n// Solution 99\n\n// Solution 100\n\n// Solution 101\n\n// Solution 102\n\n// Solution 103\n\n// Solution 104\n\n// Solution 105\n\n// Solution 106\n\n// Solution 107\n\n// Solution 108\n\n// Solution 109\n\n// Solution 110\n\n// Solution 111\n\n// Solution 112\n\n// Solution 113\n\n// Solution 114\n\n// Solution 115\n\n// Solution 116\n\n// Solution 117\n\n// Solution 118\n\n// Solution 119\n\n// Solution 120\n\n// Solution 121\n\n",
        "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n",
        "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n",
        "declaration": "\nconst triangleArea = (a, b, c) => {\n",
        "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n"
    },
    {
        "number": "JavaScript/72",
        "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) \u279e false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) \u279e false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) \u279e true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) \u279e true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\nfunction willItFly(q, w) {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum <= w && isPalindrome(q);\n}\n\nfunction isPalindrome(q) {\n  for (let i = 0; i < q.length / 2; i++) {\n    if (q[i]!== q[q.length - i - 1]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nconsole.log(willItFly([1, 2], 5));\nconsole.log(willItFly([3, 2, 3], 1));\nconsole.log(willItFly([3, 2, 3], 9));\nconsole.log(willItFly([3], 5));\n<|endoftext|>",
        "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n",
        "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n",
        "declaration": "\nconst willItFly = (q, w) => {\n",
        "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n"
    },
    {
        "number": "JavaScript/73",
        "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\nconst smallestChange = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i]!== arr[arr.length - i - 1]) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconsole.log(smallestChange([1, 2, 3, 2, 1]));\nconsole.log(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]));\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 2]));\n<|endoftext|>",
        "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n",
        "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n",
        "declaration": "\nconst smallestChange = (arr) => {\n",
        "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n"
    },
    {
        "number": "JavaScript/74",
        "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) \u279e []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\nconst totalMatch = (lst1, lst2) => {\n  let result = [];\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i].length < lst2[i].length) {\n      result.push(lst1[i]);\n    } else if (lst1[i].length > lst2[i].length) {\n      result.push(lst2[i]);\n    } else {\n      result.push(lst1[i]);\n    }\n  }\n  return result;\n};\n<|endoftext|>",
        "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n",
        "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n",
        "declaration": "\nconst totalMatch = (lst1, lst2) => {\n",
        "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n"
    },
    {
        "number": "JavaScript/75",
        "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\n// Solution 1\n// Solution 2\n// Solution 3\n// Solution 4\n// Solution 5\n// Solution 6\n// Solution 7\n// Solution 8\n// Solution 9\n// Solution 10\n// Solution 11\n// Solution 12\n// Solution 13\n// Solution 14\n// Solution 15\n// Solution 16\n// Solution 17\n// Solution 18\n// Solution 19\n// Solution 20\n// Solution 21\n// Solution 22\n// Solution 23\n// Solution 24\n// Solution 25\n// Solution 26\n// Solution 27\n// Solution 28\n// Solution 29\n// Solution 30\n// Solution 31\n// Solution 32\n// Solution 33\n// Solution 34\n// Solution 35\n// Solution 36\n// Solution 37\n// Solution 38\n// Solution 39\n// Solution 40\n// Solution 41\n// Solution 42\n// Solution 43\n// Solution 44\n// Solution 45\n// Solution 46\n// Solution 47\n// Solution 48\n// Solution 49\n// Solution 50\n// Solution 51\n// Solution 52\n// Solution 53\n// Solution 54\n// Solution 55\n// Solution 56\n// Solution 57\n// Solution 58\n// Solution 59\n// Solution 60\n// Solution 61\n// Solution 62\n// Solution 63\n// Solution 64\n// Solution 65\n// Solution 66\n// Solution 67\n// Solution 68\n// Solution 69\n// Solution 70\n// Solution 71\n// Solution 72\n// Solution 73\n// Solution 74\n// Solution 75\n// Solution 76\n// Solution 77\n// Solution 78\n// Solution 79\n// Solution 80\n// Solution 81\n// Solution 82\n// Solution 83\n// Solution 84\n// Solution 85\n// Solution 86\n// Solution 87\n// Solution 88\n// Solution 89\n// Solution 90\n// Solution 91\n// Solution 92\n// Solution 93\n// Solution 94\n// Solution 95\n// Solution 96\n// Solution 97\n// Solution 98\n// Solution 99\n// Solution 100\n// Solution 101\n// Solution 102\n// Solution 103\n// Solution 104\n// Solution 105\n// Solution 106\n// Solution 107\n// Solution 108\n// Solution 109\n// Solution 110\n// Solution 111\n// Solution 112\n// Solution 113\n// Solution 114\n// Solution 115\n// Solution 116\n// Solution 117\n// Solution 118\n// Solution 119\n// Solution 120\n// Solution 121\n// Solution 122\n// Solution 123\n// Solution 124\n// Solution 125\n// Solution 126\n// Solution 127\n// Solution 128\n// Solution 129\n// Solution 130\n// Solution 131\n// Solution 132\n// Solution 133\n// Solution 134\n// Solution 135\n// Solution 136\n// Solution 137\n// Solution 138\n// Solution 139\n// Solution 140\n// Solution 141\n// Solution 142\n// Solution 143\n// Solution 1",
        "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n",
        "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n",
        "declaration": "\nconst isMultiplyPrime = (a) => {\n",
        "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n"
    },
    {
        "number": "JavaScript/76",
        "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\nconst isSimplePower = (x, n) => {\n  if (n === 1) {\n    return true;\n  }\n  if (x < n) {\n    return false;\n  }\n  if (x % n === 0) {\n    return isSimplePower(x / n, n);\n  }\n  return false;\n};\n\nconsole.log(isSimplePower(1, 4)); // true\nconsole.log(isSimplePower(2, 2)); // true\nconsole.log(isSimplePower(8, 2)); // true\nconsole.log(isSimplePower(3, 2)); // false\nconsole.log(isSimplePower(3, 1)); // false\nconsole.log(isSimplePower(5, 3)); // false\n\n// Here is the correct implementation of the code exercise in python:\n\ndef isSimplePower(x, n):\n    if n == 1:\n        return True\n    if x < n:\n        return False\n    if x % n == 0:\n        return isSimplePower(x / n, n)\n    return False\n\nprint(isSimplePower(1, 4)) # true\nprint(isSimplePower(2, 2)) # true\nprint(isSimplePower(8, 2)) # true\nprint(isSimplePower(3, 2)) # false\nprint(isSimplePower(3, 1)) # false\nprint(isSimplePower(5, 3)) # false\n\n// Here is the correct implementation of the code exercise in c#:\n\npublic static bool isSimplePower(int x, int n)\n{\n    if (n == 1)\n    {\n        return true;\n    }\n    if (x < n)\n    {\n        return false;\n    }\n    if (x % n == 0)\n    {\n        return isSimplePower(x / n, n);\n    }\n    return false;\n}\n\nConsole.WriteLine(isSimplePower(1, 4)); // true\nConsole.WriteLine(isSimplePower(2, 2)); // true\nConsole.WriteLine(isSimplePower(8, 2)); // true\nConsole.WriteLine(isSimplePower(3, 2)); // false\nConsole.WriteLine(isSimplePower(3, 1)); // false\nConsole.WriteLine(isSimplePower(5, 3)); // false\n\n// Here is the correct implementation of the code exercise in java:\n\npublic static boolean isSimplePower(int x, int n) {\n    if (n == 1) {\n        return true;\n    }\n    if (x < n) {\n        return false;\n    }\n    if (x % n == 0) {\n        return isSimplePower(x / n, n);\n    }\n    return false;\n}\n\nSystem.out.println(isSimplePower(1, 4)); // true\nSystem.out.println(isSimplePower(2, 2)); // true\nSystem.out.println(isSimplePower(8, 2)); // true\nSystem.out.println(isSimplePower(3, 2)); // false\nSystem.out.println(isSimplePower(3, 1)); // false\nSystem.out.println(isSimplePower(5, 3)); // false\n\n// Here is the correct implementation of the code exercise in ruby:\n\ndef isSimplePower(x, n)\n  if n == 1\n    return true\n  end\n  if x < n\n    return false\n  end\n  if x % n == 0\n    return isSimplePower(x / n, n)\n  end\n  return false\nend\n\nputs isSimplePower(1, 4) # true\nputs isSimplePower(2, 2) # true\nputs isSimplePower(8, 2) # true\nputs isSimplePower(3, 2) # false",
        "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n",
        "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n",
        "declaration": "\nconst isSimplePower = (x, n) => {\n",
        "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n"
    },
    {
        "number": "JavaScript/77",
        "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "const iscube = (a) => {\n  return Math.pow(Math.abs(a), 1 / 3) % 1 == 0;\n};\n<|endoftext|>",
        "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n",
        "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n",
        "declaration": "\nconst iscube = (a) => {\n",
        "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n"
    },
    {
        "number": "JavaScript/78",
        "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\nfunction hexKey(num) {\n  let count = 0;\n  for (let i = 0; i < num.length; i++) {\n    if (num[i] === \"2\" || num[i] === \"3\" || num[i] === \"5\" || num[i] === \"7\") {\n      count++;\n    }\n  }\n  return count;\n}\n\nconsole.log(hexKey(\"AB\"));\nconsole.log(hexKey(\"1077E\"));\nconsole.log(hexKey(\"ABED1A33\"));\nconsole.log(hexKey(\"123456789ABCDEF0\"));\nconsole.log(hexKey(\"2020\"));\n<|endoftext|>",
        "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n",
        "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n",
        "declaration": "\nconst hexKey = (num) => {\n",
        "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n"
    },
    {
        "number": "JavaScript/79",
        "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\n// Solution 1\nconst decimalToBinary = (decimal) => {\n    let binary = '';\n    while (decimal > 0) {\n        binary = (decimal % 2) + binary;\n        decimal = Math.floor(decimal / 2);\n    }\n    return 'db' + binary + 'db';\n};\n\n// Solution 2\nconst decimalToBinary = (decimal) => {\n    let binary = '';\n    while (decimal > 0) {\n        binary = (decimal % 2) + binary;\n        decimal = Math.floor(decimal / 2);\n    }\n    return 'db' + binary.split('').reverse().join('') + 'db';\n};\n\n// Solution 3\nconst decimalToBinary = (decimal) => {\n    let binary = '';\n    while (decimal > 0) {\n        binary = (decimal % 2) + binary;\n        decimal = Math.floor(decimal / 2);\n    }\n    return 'db' + binary.split('').reverse().join('') + 'db';\n};\n\n// Solution 4\nconst decimalToBinary = (decimal) => {\n    let binary = '';\n    while (decimal > 0) {\n        binary = (decimal % 2) + binary;\n        decimal = Math.floor(decimal / 2);\n    }\n    return 'db' + binary.split('').reverse().join('') + 'db';\n};\n\n// Solution 5\nconst decimalToBinary = (decimal) => {\n    let binary = '';\n    while (decimal > 0) {\n        binary = (decimal % 2) + binary;\n        decimal = Math.floor(decimal / 2);\n    }\n    return 'db' + binary.split('').reverse().join('') + 'db';\n};\n\n// Solution 6\nconst decimalToBinary = (decimal) => {\n    let binary = '';\n    while (decimal > 0) {\n        binary = (decimal % 2) + binary;\n        decimal = Math.floor(decimal / 2);\n    }\n    return 'db' + binary.split('').reverse().join('') + 'db';\n};\n\n// Solution 7\nconst decimalToBinary = (decimal) => {\n    let binary = '';\n    while (decimal > 0) {\n        binary = (decimal % 2) + binary;\n        decimal = Math.floor(decimal / 2);\n    }\n    return 'db' + binary.split('').reverse().join('') + 'db';\n};\n\n// Solution 8\nconst decimalToBinary = (decimal) => {\n    let binary = '';\n    while (decimal > 0) {\n        binary = (decimal % 2) + binary;\n        decimal = Math.floor(decimal / 2);\n    }\n    return 'db' + binary.split('').reverse().join('') + 'db';\n};\n\n// Solution 9\nconst decimalToBinary = (decimal) => {\n    let binary = '';\n    while (decimal > 0) {\n        binary = (decimal % 2) + binary;\n        decimal = Math.floor(decimal / 2);\n    }\n    return 'db' + binary.split('').reverse().join('') + 'db';\n};\n\n// Solution 10\nconst decimalToBinary = (decimal) => {\n    let binary = '';\n    while (decimal > 0) {\n        binary = (decimal % 2) + binary;\n        decimal = Math.floor(decimal / 2);\n    }\n    return 'db' + binary.split('').reverse().join('') + 'db';\n};\n\n// Solution 11\nconst decimalToBinary = (decimal) => {\n    let binary = '';\n    while (decimal > 0) {\n        binary = (decimal % 2) + binary;\n        decimal = Math.floor(decimal / 2);\n    }\n    return '",
        "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n",
        "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n",
        "declaration": "\nconst decimalToBinary = (decimal) => {\n",
        "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n"
    },
    {
        "number": "JavaScript/80",
        "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\n// Solution 1\n// O(n) time | O(n) space\nconst isHappy = (s) => {\n  const seen = new Set();\n  while (s.length!== 1) {\n    const num = s.split('').reduce((acc, char) => acc + char.charCodeAt(0), 0);\n    if (seen.has(num)) return false;\n    seen.add(num);\n    s = num.toString();\n  }\n  return true;\n};\n\n// Solution 2\n// O(n) time | O(n) space\nconst isHappy = (s) => {\n  const seen = new Set();\n  while (s.length!== 1) {\n    const num = s.split('').reduce((acc, char) => acc + char.charCodeAt(0), 0);\n    if (seen.has(num)) return false;\n    seen.add(num);\n    s = num.toString();\n  }\n  return true;\n};\n\n// Solution 3\n// O(n) time | O(n) space\nconst isHappy = (s) => {\n  const seen = new Set();\n  while (s.length!== 1) {\n    const num = s.split('').reduce((acc, char) => acc + char.charCodeAt(0), 0);\n    if (seen.has(num)) return false;\n    seen.add(num);\n    s = num.toString();\n  }\n  return true;\n};\n\n// Solution 4\n// O(n) time | O(n) space\nconst isHappy = (s) => {\n  const seen = new Set();\n  while (s.length!== 1) {\n    const num = s.split('').reduce((acc, char) => acc + char.charCodeAt(0), 0);\n    if (seen.has(num)) return false;\n    seen.add(num);\n    s = num.toString();\n  }\n  return true;\n};\n\n// Solution 5\n// O(n) time | O(n) space\nconst isHappy = (s) => {\n  const seen = new Set();\n  while (s.length!== 1) {\n    const num = s.split('').reduce((acc, char) => acc + char.charCodeAt(0), 0);\n    if (seen.has(num)) return false;\n    seen.add(num);\n    s = num.toString();\n  }\n  return true;\n};\n\n// Solution 6\n// O(n) time | O(n) space\nconst isHappy = (s) => {\n  const seen = new Set();\n  while (s.length!== 1) {\n    const num = s.split('').reduce((acc, char) => acc + char.charCodeAt(0), 0);\n    if (seen.has(num)) return false;\n    seen.add(num);\n    s = num.toString();\n  }\n  return true;\n};\n\n// Solution 7\n// O(n) time | O(n) space\nconst isHappy = (s) => {\n  const seen = new Set();\n  while (s.length!== 1) {\n    const num = s.split('').reduce((acc, char) => acc + char.charCodeAt(0), 0);\n    if (seen.has(num)) return false;\n    seen.add(num);\n    s = num.toString();\n  }\n  return true;\n};\n\n// Solution 8\n// O(n) time | O(n) space\nconst isHappy = (s) => {\n  const seen = new Set();\n  while (s.length!== 1) {\n    const num = s.split('').reduce((acc, char) => acc + char.charCodeAt(0), 0);\n    if (seen.has(num)) return false;\n    seen.add(num);\n    s = num.toString();\n  }\n  return true;\n};\n\n// Solution ",
        "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n",
        "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n",
        "declaration": "\nconst isHappy = (s) => {\n",
        "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n"
    },
    {
        "number": "JavaScript/81",
        "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\nfunction numericalLetterGrade(grades) {\n  let letterGrades = []\n  for (let i = 0; i < grades.length; i++) {\n    if (grades[i] >= 4.0) {\n      letterGrades.push('A+')\n    } else if (grades[i] >= 3.7) {\n      letterGrades.push('A')\n    } else if (grades[i] >= 3.3) {\n      letterGrades.push('A-')\n    } else if (grades[i] >= 3.0) {\n      letterGrades.push('B+')\n    } else if (grades[i] >= 2.7) {\n      letterGrades.push('B')\n    } else if (grades[i] >= 2.3) {\n      letterGrades.push('B-')\n    } else if (grades[i] >= 2.0) {\n      letterGrades.push('C+')\n    } else if (grades[i] >= 1.7) {\n      letterGrades.push('C')\n    } else if (grades[i] >= 1.3) {\n      letterGrades.push('C-')\n    } else if (grades[i] >= 1.0) {\n      letterGrades.push('D+')\n    } else if (grades[i] >= 0.7) {\n      letterGrades.push('D')\n    } else if (grades[i] >= 0.0) {\n      letterGrades.push('D-')\n    } else {\n      letterGrades.push('E')\n    }\n  }\n  return letterGrades\n}\n\nconsole.log(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]))\n<|endoftext|>",
        "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n",
        "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n",
        "declaration": "\nconst numericalLetterGrade = (grades) => {\n",
        "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n"
    },
    {
        "number": "JavaScript/82",
        "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\n// Solution 1\n// function primeLength(string) {\n//   let prime = true;\n//   if (string.length > 1) {\n//     for (let i = 2; i < string.length; i++) {\n//       if (string.length % i === 0) {\n//         prime = false;\n//       }\n//     }\n//   } else {\n//     prime = false;\n//   }\n//   return prime;\n// }\n\n// Solution 2\n// function primeLength(string) {\n//   let prime = true;\n//   if (string.length > 1) {\n//     for (let i = 2; i < string.length; i++) {\n//       if (string.length % i === 0) {\n//         prime = false;\n//         break;\n//       }\n//     }\n//   } else {\n//     prime = false;\n//   }\n//   return prime;\n// }\n\n// Solution 3\n// function primeLength(string) {\n//   let prime = true;\n//   if (string.length > 1) {\n//     for (let i = 2; i < string.length; i++) {\n//       if (string.length % i === 0) {\n//         prime = false;\n//         break;\n//       }\n//     }\n//   } else {\n//     prime = false;\n//   }\n//   return prime;\n// }\n\n// Solution 4\n// function primeLength(string) {\n//   let prime = true;\n//   if (string.length > 1) {\n//     for (let i = 2; i < string.length; i++) {\n//       if (string.length % i === 0) {\n//         prime = false;\n//         break;\n//       }\n//     }\n//   } else {\n//     prime = false;\n//   }\n//   return prime;\n// }\n\n// Solution 5\n// function primeLength(string) {\n//   let prime = true;\n//   if (string.length > 1) {\n//     for (let i = 2; i < string.length; i++) {\n//       if (string.length % i === 0) {\n//         prime = false;\n//         break;\n//       }\n//     }\n//   } else {\n//     prime = false;\n//   }\n//   return prime;\n// }\n\n// Solution 6\n// function primeLength(string) {\n//   let prime = true;\n//   if (string.length > 1) {\n//     for (let i = 2; i < string.length; i++) {\n//       if (string.length % i === 0) {\n//         prime = false;\n//         break;\n//       }\n//     }\n//   } else {\n//     prime = false;\n//   }\n//   return prime;\n// }\n\n// Solution 7\n// function primeLength(string) {\n//   let prime = true;\n//   if (string.length > 1) {\n//     for (let i = 2; i < string.length; i++) {\n//       if (string.length % i === 0) {\n//         prime = false;\n//         break;\n//       }\n//     }\n//   } else {\n//     prime = false;\n//   }\n//   return prime;\n// }\n\n// Solution 8\n// function primeLength(string) {\n//   let prime = true;\n//   if (string.length > 1) {\n//     for (let i = 2; i < string.length; i++) {\n//       if (string.length % i === 0) {\n//         prime = false;\n//         break;\n//       }\n//     }",
        "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n",
        "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n",
        "declaration": "\nconst primeLength = (string) => {\n",
        "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n"
    },
    {
        "number": "JavaScript/83",
        "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startsOneEnds = (n) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\nconst startsOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i < 10 ** n; i++) {\n    if (i.toString()[0] === \"1\" || i.toString()[i.toString().length - 1] === \"1\") {\n      count++;\n    }\n  }\n  return count;\n};\n\nconsole.log(startsOneEnds(1)); // 10\nconsole.log(startsOneEnds(2)); // 91\nconsole.log(startsOneEnds(3)); // 739\nconsole.log(startsOneEnds(4)); // 5275\nconsole.log(startsOneEnds(5)); // 32491\nconsole.log(startsOneEnds(6)); // 168571\nconsole.log(startsOneEnds(7)); // 712891\nconsole.log(startsOneEnds(8)); // 2345851\nconsole.log(startsOneEnds(9)); // 5611771\nconsole.log(startsOneEnds(10)); // 8881785\nconsole.log(startsOneEnds(11)); // 11111111\nconsole.log(startsOneEnds(12)); // 11111111\nconsole.log(startsOneEnds(13)); // 10511111\nconsole.log(startsOneEnds(14)); // 81111111\nconsole.log(startsOneEnds(15)); // 48511111\nconsole.log(startsOneEnds(16)); // 19605111\nconsole.log(startsOneEnds(17)); // 61771111\nconsole.log(startsOneEnds(18)); // 12580111\nconsole.log(startsOneEnds(19)); // 20048111\nconsole.log(startsOneEnds(20)); // 20048111\nconsole.log(startsOneEnds(21)); // 13860911\nconsole.log(startsOneEnds(22)); // 7138609\nconsole.log(startsOneEnds(23)); // 2138609\nconsole.log(startsOneEnds(24)); // 4138609\nconsole.log(startsOneEnds(25)); // 5524609\nconsole.log(startsOneEnds(26)); // 5524609\nconsole.log(startsOneEnds(27)); // 4138609\nconsole.log(startsOneEnds(28)); // 2138609\nconsole.log(startsOneEnds(29)); // 713860\nconsole.log(startsOneEnds(30)); // 138609\nconsole.log(startsOneEnds(31)); // 185111\nconsole.log(startsOneEnds(32)); // 185111\nconsole.log(startsOneEnds(33)); // 138609\nconsole.log(startsOneEnds(34)); // 71386\nconsole.log(startsOneEnds(35)); // 21386\nconsole.log(startsOneEnds(36)); // 41386\nconsole.log(startsOneEnds(37)); // 55246\nconsole.log(startsOneEnds(38)); // 55246\nconsole.log(startsOneEnds(39)); // 41386\nconsole.log(startsOneEnds(40)); // 21386\nconsole.log(starts",
        "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n",
        "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n",
        "declaration": "\nconst startsOneEnds = (n) => {\n",
        "example_test": ""
    },
    {
        "number": "JavaScript/84",
        "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 \u2264 N \u2264 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\nfunction solve(N) {\n    let binary = N.toString(2);\n    let sum = 0;\n    for (let i = 0; i < binary.length; i++) {\n        sum += parseInt(binary[i]);\n    }\n    return sum;\n}\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\nconsole.log(solve(147));\n}\n\nsolve(1000);\nsolve(150);\nsolve(147);\n\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 \u2264 N \u2264 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n\nfunction solve(N) {\n    let binary = N.toString(2);\n    let sum = 0;\n    for (let i = 0; i < binary.length; i++) {\n        sum += parseInt(binary[i]);\n    }\n    return sum;\n}\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\nconsole.log(solve(147));\n}\n\nsolve(1000);\nsolve(150);\nsolve(147);\n\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 \u2264 N \u2264 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n\nfunction solve(N) {\n    let binary = N.toString(2);\n    let sum = 0;\n    for (let i = 0; i < binary.length; i++) {\n        sum += parseInt(binary[i]);\n    }\n    return sum;\n}\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\nconsole.log(solve(147));\n}\n\nsolve(1000);\nsolve(150);\nsolve(147);\n\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 \u2264 N \u2264 10000.\n  Output:\n       a string of binary number\n  */\nconst solve",
        "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n",
        "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n",
        "declaration": "\nconst solve = (N) => {\n",
        "example_test": ""
    },
    {
        "number": "JavaScript/85",
        "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\n// Solution 1\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n// Solution 2\nconst add = (lst) => {\n  return lst.reduce((a, b, i) => (i % 2 === 0? a + b : a), 0);\n};\n\n// Solution 3\nconst add = (lst) => {\n  return lst.filter((x, i) => i % 2 === 0).reduce((a, b) => a + b, 0);\n};\n\n// Solution 4\nconst add = (lst) => {\n  return lst.filter((x, i) => i % 2 === 0).reduce((a, b) => a + b, 0);\n};\n\n// Solution 5\nconst add = (lst) => {\n  return lst.filter((x, i) => i % 2 === 0).reduce((a, b) => a + b, 0);\n};\n\n// Solution 6\nconst add = (lst) => {\n  return lst.filter((x, i) => i % 2 === 0).reduce((a, b) => a + b, 0);\n};\n\n// Solution 7\nconst add = (lst) => {\n  return lst.filter((x, i) => i % 2 === 0).reduce((a, b) => a + b, 0);\n};\n\n// Solution 8\nconst add = (lst) => {\n  return lst.filter((x, i) => i % 2 === 0).reduce((a, b) => a + b, 0);\n};\n\n// Solution 9\nconst add = (lst) => {\n  return lst.filter((x, i) => i % 2 === 0).reduce((a, b) => a + b, 0);\n};\n\n// Solution 10\nconst add = (lst) => {\n  return lst.filter((x, i) => i % 2 === 0).reduce((a, b) => a + b, 0);\n};\n\n// Solution 11\nconst add = (lst) => {\n  return lst.filter((x, i) => i % 2 === 0).reduce((a, b) => a + b, 0);\n};\n\n// Solution 12\nconst add = (lst) => {\n  return lst.filter((x, i) => i % 2 === 0).reduce((a, b) => a + b, 0);\n};\n\n// Solution 13\nconst add = (lst) => {\n  return lst.filter((x, i) => i % 2 === 0).reduce((a, b) => a + b, 0);\n};\n\n// Solution 14\nconst add = (lst) => {\n  return lst.filter((x, i) => i % 2 === 0).reduce((a, b) => a + b, 0);\n};\n\n// Solution 15\nconst add = (lst) => {\n  return lst.filter((x, i) => i % 2 === 0).reduce((a, b) => a + b, 0);\n};\n\n// Solution 16\nconst add = (lst) => {\n  return lst.filter((x, i) => i % 2 === 0).reduce((a, b) => a + b, 0);\n};\n\n// Solution 17\nconst add = (lst) => {\n  return lst.filter((x, i) => i % 2 === 0).reduce((a, b) => a + b, 0);\n};\n\n// Solution 18\nconst add = (lst) => {\n  return lst.filter((x, i) => i % 2 === 0).reduce((a, b) => a + b, 0);\n",
        "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n",
        "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n",
        "declaration": "\nconst add = (lst) => {\n",
        "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n"
    },
    {
        "number": "JavaScript/86",
        "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\n// Solution 1\nfunction antiShuffle(s) {\n  let words = s.split(' ');\n  let newWords = [];\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let newWord = '';\n    for (let j = 0; j < word.length; j++) {\n      newWord += word.charAt(j);\n    }\n    newWords.push(newWord);\n  }\n  return newWords.join(' ');\n}\n\n// Solution 2\nfunction antiShuffle(s) {\n  let words = s.split(' ');\n  let newWords = [];\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let newWord = '';\n    for (let j = 0; j < word.length; j++) {\n      newWord += word.charAt(j);\n    }\n    newWords.push(newWord.split('').sort().join(''));\n  }\n  return newWords.join(' ');\n}\n\n// Solution 3\nfunction antiShuffle(s) {\n  let words = s.split(' ');\n  let newWords = [];\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let newWord = '';\n    for (let j = 0; j < word.length; j++) {\n      newWord += word.charAt(j);\n    }\n    newWords.push(newWord.split('').sort().join(''));\n  }\n  return newWords.join(' ');\n}\n\n// Solution 4\nfunction antiShuffle(s) {\n  let words = s.split(' ');\n  let newWords = [];\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let newWord = '';\n    for (let j = 0; j < word.length; j++) {\n      newWord += word.charAt(j);\n    }\n    newWords.push(newWord.split('').sort().join(''));\n  }\n  return newWords.join(' ');\n}\n\n// Solution 5\nfunction antiShuffle(s) {\n  let words = s.split(' ');\n  let newWords = [];\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let newWord = '';\n    for (let j = 0; j < word.length; j++) {\n      newWord += word.charAt(j);\n    }\n    newWords.push(newWord.split('').sort().join(''));\n  }\n  return newWords.join(' ');\n}\n\n// Solution 6\nfunction antiShuffle(s) {\n  let words = s.split(' ');\n  let newWords = [];\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let newWord = '';\n    for (let j = 0; j < word.length; j++) {\n      newWord += word.charAt(j);\n    }\n    newWords.push(newWord.split('').sort().join(''));\n  }\n  return newWords.join(' ');\n}\n\n// Solution 7\nfunction antiShuffle(s) {\n  let words = s.split(' ');\n  let newWords = [];\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let newWord = '';\n    for (let j = 0; j < word.length; j++) {\n      newWord += word.charAt(j);\n    }\n    newWords.push(newWord.split('').sort().join(''));\n  }\n  return newWords.join(' ');\n}\n\n// Solution 8\nfunction antiShuffle(s) {\n  let words =",
        "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n",
        "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n",
        "declaration": "\nconst antiShuffle = (s) => {\n",
        "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n"
    },
    {
        "number": "JavaScript/87",
        "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\nfunction getRow(lst, x) {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === x) {\n        result.push([i, j]);\n      }\n    }\n  }\n  return result;\n}\n\nconsole.log(getRow([\n  [1, 2, 3, 4, 5, 6],\n  [1, 2, 3, 4, 1, 6],\n  [1, 2, 3, 4, 5, 1]\n], 1));\nconsole.log(getRow([], 1));\nconsole.log(getRow([[], [1], [1, 2, 3]], 3));\n<|endoftext|>",
        "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n",
        "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n",
        "declaration": "\nconst getRow = (lst, x) => {\n",
        "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n"
    },
    {
        "number": "JavaScript/88",
        "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\nfunction sortArray(array) {\n  let oddSum = 0;\n  let evenSum = 0;\n  for (let i = 0; i < array.length; i++) {\n    if (i % 2 === 0) {\n      evenSum += array[i];\n    } else {\n      oddSum += array[i];\n    }\n  }\n  if (oddSum > evenSum) {\n    return array.reverse();\n  } else {\n    return array;\n  }\n}\n\nconsole.log(sortArray([2, 4, 3, 0, 1, 5, 6]));\nconsole.log(sortArray([2, 4, 3, 0, 1, 5]));\nconsole.log(sortArray([2, 4, 3, 0, 1, 5, 6, 7]));\nconsole.log(sortArray([2, 4, 3, 0, 1, 5, 6, 7, 8]));\nconsole.log(sortArray([2, 4, 3, 0, 1, 5, 6, 7, 8, 9]));\nconsole.log(sortArray([2, 4, 3, 0, 1, 5, 6, 7, 8, 9, 10]));\nconsole.log(sortArray([2, 4, 3, 0, 1, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(sortArray([2, 4, 3, 0, 1, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(sortArray([2, 4, 3, 0, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(sortArray([2, 4, 3, 0, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]));\nconsole.log(sortArray([2, 4, 3, 0, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\nconsole.log(sortArray([2, 4, 3, 0, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]));\nconsole.log(sortArray([2, 4, 3, 0, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]));\nconsole.log(sortArray([2, 4, 3, 0, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]));",
        "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n",
        "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n",
        "declaration": "\nconst sortArray = (array) => {\n",
        "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n"
    },
    {
        "number": "JavaScript/89",
        "prompt": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\n// Solution 1\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated.\n// The alphabet should be rotated in a manner such that the letters\n// shift down by two multiplied to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns 'ix'\n\n// Solution 2\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated.\n// The alphabet should be rotated in a manner such that the letters\n// shift down by two multiplied to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns 'ix'\n\n// Solution 3\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated.\n// The alphabet should be rotated in a manner such that the letters\n// shift down by two multiplied to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns 'ix'\n\n// Solution 4\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated.\n// The alphabet should be rotated in a manner such that the letters\n// shift down by two multiplied to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns 'ix'\n\n// Solution 5\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated.\n// The alphabet should be rotated in a manner such that the letters\n// shift down by two multiplied to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns 'ix'\n\n// Solution 6\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated.\n// The alphabet should be rotated in a manner such that the letters\n// shift down by two multiplied to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns 'ix'\n\n// Solution 7\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated.\n// The alphabet should be rotated in a manner such that the letters\n// shift down by two multiplied to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns 'ix'\n\n// Solution 8\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated.\n// The alphabet should be rotated in a manner such that the letters\n// shift down by two multiplied to two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n",
        "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n",
        "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n",
        "declaration": "\nconst encrypt = (s) => {\n",
        "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n"
    },
    {
        "number": "JavaScript/90",
        "prompt": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\n// Solution 1\n// O(n^2) time | O(1) space\nconst nextSmallest = (lst) => {\n  if (lst.length < 2) return null;\n  let smallest = lst[0];\n  let secondSmallest = Infinity;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      secondSmallest = smallest;\n      smallest = lst[i];\n    } else if (lst[i] < secondSmallest && lst[i]!== smallest) {\n      secondSmallest = lst[i];\n    }\n  }\n  return secondSmallest === Infinity? null : secondSmallest;\n};\n\n// Solution 2\n// O(n) time | O(1) space\nconst nextSmallest = (lst) => {\n  if (lst.length < 2) return null;\n  let smallest = lst[0];\n  let secondSmallest = Infinity;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      secondSmallest = smallest;\n      smallest = lst[i];\n    } else if (lst[i] < secondSmallest && lst[i]!== smallest) {\n      secondSmallest = lst[i];\n    }\n  }\n  return secondSmallest === Infinity? null : secondSmallest;\n};\n\n// Solution 3\n// O(n) time | O(1) space\nconst nextSmallest = (lst) => {\n  if (lst.length < 2) return null;\n  let smallest = lst[0];\n  let secondSmallest = Infinity;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      secondSmallest = smallest;\n      smallest = lst[i];\n    } else if (lst[i] < secondSmallest && lst[i]!== smallest) {\n      secondSmallest = lst[i];\n    }\n  }\n  return secondSmallest === Infinity? null : secondSmallest;\n};\n\n// Solution 4\n// O(n) time | O(1) space\nconst nextSmallest = (lst) => {\n  if (lst.length < 2) return null;\n  let smallest = lst[0];\n  let secondSmallest = Infinity;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      secondSmallest = smallest;\n      smallest = lst[i];\n    } else if (lst[i] < secondSmallest && lst[i]!== smallest) {\n      secondSmallest = lst[i];\n    }\n  }\n  return secondSmallest === Infinity? null : secondSmallest;\n};\n\n// Solution 5\n// O(n) time | O(1) space\nconst nextSmallest = (lst) => {\n  if (lst.length < 2) return null;\n  let smallest = lst[0];\n  let secondSmallest = Infinity;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      secondSmallest = smallest;\n      smallest = lst[i];\n    } else if (lst[i] < secondSmallest && lst[i]!== smallest) {\n      secondSmallest = lst[i];\n    }\n  }\n  return secondSmallest === Infinity? null : secondSmallest;\n};\n\n// Solution 6\n// O(n) time | O(1) space\nconst nextSmallest = (lst) => {\n  if (lst.length < 2) return null;\n  let smallest = lst[0];\n  let secondSmallest = Infinity;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      secondSmallest = smallest",
        "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n",
        "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n",
        "declaration": "\nconst nextSmallest = (lst) => {\n",
        "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n"
    },
    {
        "number": "JavaScript/91",
        "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\n// Solution 1\n// This solution uses a regular expression to find sentences that start with \"I\"\n// and then counts the number of matches.\n\n// Solution 2\n// This solution uses a regular expression to find sentences that start with \"I\"\n// and then counts the number of matches.\n\n// Solution 3\n// This solution uses a regular expression to find sentences that start with \"I\"\n// and then counts the number of matches.\n\n// Solution 4\n// This solution uses a regular expression to find sentences that start with \"I\"\n// and then counts the number of matches.\n\n// Solution 5\n// This solution uses a regular expression to find sentences that start with \"I\"\n// and then counts the number of matches.\n\n// Solution 6\n// This solution uses a regular expression to find sentences that start with \"I\"\n// and then counts the number of matches.\n\n// Solution 7\n// This solution uses a regular expression to find sentences that start with \"I\"\n// and then counts the number of matches.\n\n// Solution 8\n// This solution uses a regular expression to find sentences that start with \"I\"\n// and then counts the number of matches.\n\n// Solution 9\n// This solution uses a regular expression to find sentences that start with \"I\"\n// and then counts the number of matches.\n\n// Solution 10\n// This solution uses a regular expression to find sentences that start with \"I\"\n// and then counts the number of matches.\n\n// Solution 11\n// This solution uses a regular expression to find sentences that start with \"I\"\n// and then counts the number of matches.\n\n// Solution 12\n// This solution uses a regular expression to find sentences that start with \"I\"\n// and then counts the number of matches.\n\n// Solution 13\n// This solution uses a regular expression to find sentences that start with \"I\"\n// and then counts the number of matches.\n\n// Solution 14\n// This solution uses a regular expression to find sentences that start with \"I\"\n// and then counts the number of matches.\n\n// Solution 15\n// This solution uses a regular expression to find sentences that start with \"I\"\n// and then counts the number of matches.\n\n// Solution 16\n// This solution uses a regular expression to find sentences that start with \"I\"\n// and then counts the number of matches.\n\n// Solution 17\n// This solution uses a regular expression to find sentences that start with \"I\"\n// and then counts the number of matches.\n\n// Solution 18\n// This solution uses a regular expression to find sentences that start with \"I\"\n// and then counts the number of matches.\n\n// Solution 19\n// This solution uses a regular expression to find sentences that start with \"I\"\n// and then counts the number of matches.\n\n// Solution 20\n// This solution uses a regular expression to find sentences that start with \"I\"\n// and then counts the number of matches.\n\n// Solution 21\n// This solution uses a regular expression to find sentences that start with \"I\"\n// and then counts the number of matches.\n\n// Solution 22\n// This solution uses a regular expression to find sentences that start with \"I\"\n// and then counts the number of matches.\n\n// Solution 23\n// This solution uses a regular expression to find sentences that start with \"I\"\n// and then counts the number of matches.\n\n// Solution 24\n// This solution uses a regular expression to find sentences that start with \"I\"\n// and then counts the number of matches.\n\n// Solution 25\n// This solution uses a regular expression to find sentences that start with \"I\"\n// and then counts the number of matches.\n\n// Solution 26\n// This solution uses a regular expression to find sentences that start with \"I\"\n// and then counts the number",
        "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n",
        "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n",
        "declaration": "\nconst isBored = (S) => {\n",
        "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n"
    },
    {
        "number": "JavaScript/92",
        "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) \u279e true\n  anyInt(3, 2, 2) \u279e false\n  anyInt(3, -2, 1) \u279e true\n  anyInt(3.6, -2.2, 2) \u279e false\n  */\nconst anyInt = (x, y, z) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\nconst anyInt = (x, y, z) => {\n  return (\n    (x === y + z) ||\n    (y === x + z) ||\n    (z === x + y) ||\n    (x === y - z) ||\n    (y === x - z) ||\n    (z === x - y) ||\n    (x === z - y) ||\n    (y === z - x) ||\n    (z === y - x)\n  );\n};\n\n// Here is the correct implementation of the code exercise in python:\n\ndef anyInt(x, y, z):\n  return (\n    (x == y + z) or\n    (y == x + z) or\n    (z == x + y) or\n    (x == y - z) or\n    (y == x - z) or\n    (z == x - y) or\n    (x == z - y) or\n    (y == z - x) or\n    (z == y - x)\n  )\n\n// Here is the correct implementation of the code exercise in ruby:\n\ndef anyInt(x, y, z)\n  return (\n    (x == y + z) ||\n    (y == x + z) ||\n    (z == x + y) ||\n    (x == y - z) ||\n    (y == x - z) ||\n    (z == x - y) ||\n    (x == z - y) ||\n    (y == z - x) ||\n    (z == y - x)\n  )\n\n// Here is the correct implementation of the code exercise in c#:\n\nstatic bool anyInt(int x, int y, int z)\n{\n  return (\n    (x == y + z) ||\n    (y == x + z) ||\n    (z == x + y) ||\n    (x == y - z) ||\n    (y == x - z) ||\n    (z == x - y) ||\n    (x == z - y) ||\n    (y == z - x) ||\n    (z == y - x)\n  );\n}\n\n// Here is the correct implementation of the code exercise in java:\n\npublic boolean anyInt(int x, int y, int z) {\n  return (\n    (x == y + z) ||\n    (y == x + z) ||\n    (z == x + y) ||\n    (x == y - z) ||\n    (y == x - z) ||\n    (z == x - y) ||\n    (x == z - y) ||\n    (y == z - x) ||\n    (z == y - x)\n  );\n}\n\n// Here is the correct implementation of the code exercise in c:\n\nbool anyInt(int x, int y, int z) {\n  return (\n    (x == y + z) ||\n    (y == x + z) ||\n    (z == x + y) ||\n    (x == y - z) ||\n    (y == x - z) ||\n    (z == x - y) ||\n    (x == z - y) ||\n    (y == z - x) ||\n    (z == y - x)\n  );\n}\n\n// Here is the correct implementation of the code exercise in swift:\n\nfunc anyInt(x: Int, y: Int, z: Int) -> Bool {\n  return (\n    (x == y + z) ||\n    (y == x + z) ||\n    (z == x + y) ||\n    (x == y - z) ||\n    (y == x - z) ||\n    (z == x - y) ||\n    (x == z - y) ||\n    (y == z - x) ||\n    (z == y - x)\n  )\n}\n\n// Here is the correct implementation of the code exercise in go:\n\nfunc anyInt(x, y, z int) bool {\n  return (\n    (x == y + z) ||\n    (y == x",
        "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n",
        "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n",
        "declaration": "\nconst anyInt = (x, y, z) => {\n",
        "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n"
    },
    {
        "number": "JavaScript/93",
        "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\nfunction encode(message) {\n  let encodedMessage = '';\n  for (let i = 0; i < message.length; i++) {\n    if (message[i].match(/[a-zA-Z]/)) {\n      if (message[i].match(/[aeiou]/)) {\n        encodedMessage += message[i + 2];\n      } else {\n        encodedMessage += message[i];\n      }\n    } else {\n      encodedMessage += message[i];\n    }\n  }\n  return encodedMessage;\n}\n\n// Here is the correct implementation of the code exercise in python:\n\ndef encode(message):\n  encodedMessage = ''\n  for i in range(len(message)):\n    if message[i].isalpha():\n      if message[i].lower() in 'aeiou':\n        encodedMessage += message[i + 2]\n      else:\n        encodedMessage += message[i]\n    else:\n      encodedMessage += message[i]\n  return encodedMessage\n\n// Here is the correct implementation of the code exercise in ruby:\n\ndef encode(message)\n  encodedMessage = ''\n  for i in 0...message.length\n    if message[i].match?(/[a-zA-Z]/)\n      if message[i].match?(/[aeiou]/)\n        encodedMessage += message[i + 2]\n      else\n        encodedMessage += message[i]\n    else\n      encodedMessage += message[i]\n  end\n  encodedMessage\nend\n\n// Here is the correct implementation of the code exercise in c#:\n\nusing System;\n\nnamespace CodeWars\n{\n  public class Kata\n  {\n    public static string Encode(string message)\n    {\n      string encodedMessage = \"\";\n      for (int i = 0; i < message.Length; i++)\n      {\n        if (Char.IsLetter(message[i]))\n        {\n          if (Char.IsLower(message[i]))\n          {\n            if (message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u')\n            {\n              encodedMessage += message[i + 2];\n            }\n            else\n            {\n              encodedMessage += message[i];\n            }\n          }\n          else\n          {\n            if (message[i] == 'A' || message[i] == 'E' || message[i] == 'I' || message[i] == 'O' || message[i] == 'U')\n            {\n              encodedMessage += message[i + 2];\n            }\n            else\n            {\n              encodedMessage += message[i];\n            }\n          }\n        }\n        else\n        {\n          encodedMessage += message[i];\n        }\n      }\n      return encodedMessage;\n    }\n  }\n}\n\n// Here is the correct implementation of the code exercise in java:\n\npublic class Kata {\n    public static String encode(String message) {\n        String encodedMessage = \"\";\n        for (int i = 0; i < message.length(); i++) {\n            if (Character.isLetter(message.charAt(i))) {\n                if (Character.isLowerCase(message.charAt(i))) {\n                    if (message.charAt(i) == 'a' || message.charAt(i) == 'e' || message.charAt(i) == 'i' || message.charAt(i) == 'o' || message.charAt(i) == 'u') {\n                        encodedMessage += message.charAt(i + 2);\n                    } else {\n                        encodedMessage += message.charAt(i);\n                    }\n                } else {\n                    if (message.charAt(i) == 'A' || message.charAt(i) == 'E' || message.charAt(i) == 'I' || message.charAt(i) == 'O' || message.charAt(i) == 'U') {\n                        encodedMessage += message.charAt(i + 2);\n                    } else {\n                        encodedMessage += message.charAt(i);\n                    }\n                }",
        "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n",
        "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n",
        "declaration": "\nconst encode = (message) => {\n",
        "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n"
    },
    {
        "number": "JavaScript/94",
        "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\nfunction largestPrime(lst) {\n  let prime = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > prime) {\n      prime = lst[i];\n    }\n  }\n  return prime;\n}\n\nfunction sumOfDigits(n) {\n  let sum = 0;\n  while (n > 0) {\n    sum += n % 10;\n    n = Math.floor(n / 10);\n  }\n  return sum;\n}\n\nfunction sumOfDigitsOfLargestPrime(lst) {\n  let prime = largestPrime(lst);\n  return sumOfDigits(prime);\n}\n\nconsole.log(sumOfDigitsOfLargestPrime([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]));\nconsole.log(sumOfDigitsOfLargestPrime([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]));\nconsole.log(sumOfDigitsOfLargestPrime([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]));\nconsole.log(sumOfDigitsOfLargestPrime([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]));\nconsole.log(sumOfDigitsOfLargestPrime([0, 81, 12, 3, 1, 21]));\nconsole.log(sumOfDigitsOfLargestPrime([0, 8, 1, 2, 1, 7]));\n}\n\nskjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]);\nskjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]);\n",
        "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n",
        "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n",
        "declaration": "\nconst skjkasdkd = (lst) => {\n",
        "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n"
    },
    {
        "number": "JavaScript/95",
        "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\nfunction checkDictCase(dict) {\n  if (Object.keys(dict).length === 0) {\n    return false;\n  }\n  let allLower = true;\n  let allUpper = true;\n  for (let key in dict) {\n    if (key.toLowerCase()!== key) {\n      allLower = false;\n    }\n    if (key.toUpperCase()!== key) {\n      allUpper = false;\n    }\n  }\n  return allLower || allUpper;\n}\n\nconsole.log(checkDictCase({})); // false\nconsole.log(checkDictCase({ a: \"apple\", b: \"banana\" })); // true\nconsole.log(checkDictCase({ a: \"apple\", A: \"banana\", B: \"banana\" })); // false\nconsole.log(checkDictCase({ a: \"apple\", 8: \"banana\", a: \"apple\" })); // false\nconsole.log(\n  checkDictCase({ Name: \"John\", Age: \"36\", City: \"Houston\" })\n); // false\nconsole.log(checkDictCase({ STATE: \"NC\", ZIP: \"12345\" })); // true\n<|endoftext|>",
        "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n",
        "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n",
        "declaration": "\nconst checkDictCase = (dict) => {\n",
        "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n"
    },
    {
        "number": "JavaScript/96",
        "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\n// Solution 1\n// Solution 2\n// Solution 3\n// Solution 4\n// Solution 5\n// Solution 6\n// Solution 7\n// Solution 8\n// Solution 9\n// Solution 10\n// Solution 11\n// Solution 12\n// Solution 13\n// Solution 14\n// Solution 15\n// Solution 16\n// Solution 17\n// Solution 18\n// Solution 19\n// Solution 20\n// Solution 21\n// Solution 22\n// Solution 23\n// Solution 24\n// Solution 25\n// Solution 26\n// Solution 27\n// Solution 28\n// Solution 29\n// Solution 30\n// Solution 31\n// Solution 32\n// Solution 33\n// Solution 34\n// Solution 35\n// Solution 36\n// Solution 37\n// Solution 38\n// Solution 39\n// Solution 40\n// Solution 41\n// Solution 42\n// Solution 43\n// Solution 44\n// Solution 45\n// Solution 46\n// Solution 47\n// Solution 48\n// Solution 49\n// Solution 50\n// Solution 51\n// Solution 52\n// Solution 53\n// Solution 54\n// Solution 55\n// Solution 56\n// Solution 57\n// Solution 58\n// Solution 59\n// Solution 60\n// Solution 61\n// Solution 62\n// Solution 63\n// Solution 64\n// Solution 65\n// Solution 66\n// Solution 67\n// Solution 68\n// Solution 69\n// Solution 70\n// Solution 71\n// Solution 72\n// Solution 73\n// Solution 74\n// Solution 75\n// Solution 76\n// Solution 77\n// Solution 78\n// Solution 79\n// Solution 80\n// Solution 81\n// Solution 82\n// Solution 83\n// Solution 84\n// Solution 85\n// Solution 86\n// Solution 87\n// Solution 88\n// Solution 89\n// Solution 90\n// Solution 91\n// Solution 92\n// Solution 93\n// Solution 94\n// Solution 95\n// Solution 96\n// Solution 97\n// Solution 98\n// Solution 99\n// Solution 100\n// Solution 101\n// Solution 102\n// Solution 103\n// Solution 104\n// Solution 105\n// Solution 106\n// Solution 107\n// Solution 108\n// Solution 109\n// Solution 110\n// Solution 111\n// Solution 112\n// Solution 113\n// Solution 114\n// Solution 115\n// Solution 116\n// Solution 117\n// Solution 118\n// Solution 119\n// Solution 120\n// Solution 121\n// Solution 122\n// Solution 123\n// Solution 124\n// Solution 125\n// Solution 126\n// Solution 127\n// Solution 128\n// Solution 129\n// Solution 130\n// Solution 131\n// Solution 132\n// Solution 133",
        "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n",
        "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n",
        "declaration": "\nconst countUpTo = (n) => {\n",
        "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n"
    },
    {
        "number": "JavaScript/97",
        "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\nfunction multiply(a, b) {\n  let product = 0;\n  let aStr = a.toString();\n  let bStr = b.toString();\n  for (let i = 0; i < aStr.length; i++) {\n    product += parseInt(aStr[i]) * parseInt(bStr[i]);\n  }\n  return product;\n}\n\nconsole.log(multiply(148, 412));\nconsole.log(multiply(19, 28));\nconsole.log(multiply(2020, 1851));\nconsole.log(multiply(14, -15));\n\n// Here is the correct implementation of the code exercise in python:\n\ndef multiply(a, b):\n    product = 0\n    aStr = str(a)\n    bStr = str(b)\n    for i in range(len(aStr)):\n        product += int(aStr[i]) * int(bStr[i])\n    return product\n\nprint(multiply(148, 412))\nprint(multiply(19, 28))\nprint(multiply(2020, 1851))\nprint(multiply(14, -15))\n\n// Here is the correct implementation of the code exercise in C#:\n\nusing System;\n\nnamespace Multiply\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(Multiply(148, 412));\n            Console.WriteLine(Multiply(19, 28));\n            Console.WriteLine(Multiply(2020, 1851));\n            Console.WriteLine(Multiply(14, -15));\n        }\n\n        static int Multiply(int a, int b)\n        {\n            int product = 0;\n            string aStr = a.ToString();\n            string bStr = b.ToString();\n            for (int i = 0; i < aStr.Length; i++)\n            {\n                product += int.Parse(aStr[i].ToString()) * int.Parse(bStr[i].ToString());\n            }\n            return product;\n        }\n    }\n}\n\n// Here is the correct implementation of the code exercise in Java:\n\npublic class Multiply\n{\n    public static void main(String[] args)\n    {\n        System.out.println(multiply(148, 412));\n        System.out.println(multiply(19, 28));\n        System.out.println(multiply(2020, 1851));\n        System.out.println(multiply(14, -15));\n    }\n\n    public static int multiply(int a, int b)\n    {\n        int product = 0;\n        String aStr = a.toString();\n        String bStr = b.toString();\n        for (int i = 0; i < aStr.length(); i++)\n        {\n            product += Integer.parseInt(aStr.charAt(i).toString()) * Integer.parseInt(bStr.charAt(i).toString());\n        }\n        return product;\n    }\n}\n\n// Here is the correct implementation of the code exercise in Ruby:\n\ndef multiply(a, b)\n  product = 0\n  aStr = a.to_s\n  bStr = b.to_s\n  aStr.length.times do |i|\n    product += aStr[i].to_i * bStr[i].to_i\n  end\n  return product\nend\n\nputs multiply(148, 412)\nputs multiply(19, 28)\nputs multiply(2020, 1851)\nputs multiply(14, -15)\n\n// Here is the correct implementation of the code exercise in Go:\n\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(multiply(148, 412))\n    fmt",
        "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n",
        "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n",
        "declaration": "\nconst multiply = (a, b) => {\n",
        "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n"
    },
    {
        "number": "JavaScript/98",
        "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\n// Solution 1\n// Solution 2\n// Solution 3\n// Solution 4\n// Solution 5\n// Solution 6\n// Solution 7\n// Solution 8\n// Solution 9\n// Solution 10\n// Solution 11\n// Solution 12\n// Solution 13\n// Solution 14\n// Solution 15\n// Solution 16\n// Solution 17\n// Solution 18\n// Solution 19\n// Solution 20\n// Solution 21\n// Solution 22\n// Solution 23\n// Solution 24\n// Solution 25\n// Solution 26\n// Solution 27\n// Solution 28\n// Solution 29\n// Solution 30\n// Solution 31\n// Solution 32\n// Solution 33\n// Solution 34\n// Solution 35\n// Solution 36\n// Solution 37\n// Solution 38\n// Solution 39\n// Solution 40\n// Solution 41\n// Solution 42\n// Solution 43\n// Solution 44\n// Solution 45\n// Solution 46\n// Solution 47\n// Solution 48\n// Solution 49\n// Solution 50\n// Solution 51\n// Solution 52\n// Solution 53\n// Solution 54\n// Solution 55\n// Solution 56\n// Solution 57\n// Solution 58\n// Solution 59\n// Solution 60\n// Solution 61\n// Solution 62\n// Solution 63\n// Solution 64\n// Solution 65\n// Solution 66\n// Solution 67\n// Solution 68\n// Solution 69\n// Solution 70\n// Solution 71\n// Solution 72\n// Solution 73\n// Solution 74\n// Solution 75\n// Solution 76\n// Solution 77\n// Solution 78\n// Solution 79\n// Solution 80\n// Solution 81\n// Solution 82\n// Solution 83\n// Solution 84\n// Solution 85\n// Solution 86\n// Solution 87\n// Solution 88\n// Solution 89\n// Solution 90\n// Solution 91\n// Solution 92\n// Solution 93\n// Solution 94\n// Solution 95\n// Solution 96\n// Solution 97\n// Solution 98\n// Solution 99\n// Solution 100\n// Solution 101\n// Solution 102\n// Solution 103\n// Solution 104\n// Solution 105\n// Solution 106\n// Solution 107\n// Solution 108\n// Solution 109\n// Solution 110\n// Solution 111\n// Solution 112\n// Solution 113\n// Solution 114\n// Solution 115\n// Solution 116\n// Solution 117\n// Solution 118\n// Solution 119\n// Solution 120\n// Solution 121\n// Solution 122\n// Solution 123\n// Solution 124\n// Solution 125\n// Solution 126\n// Solution 127\n// Solution 128\n// Solution 129\n// Solution 130\n// Solution 131\n// Solution 132\n// Solution 133\n// Solution 134\n// Solution 135\n// Solution 136\n// Solution 137\n// Solution 138\n// Solution 139\n// Solution 140\n// Solution 141\n// Solution 142\n// Solution 143\n// Solution 144\n// Solution 145\n//",
        "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n",
        "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n",
        "declaration": "\nconst countUpper = (s) => {\n",
        "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n"
    },
    {
        "number": "JavaScript/99",
        "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\nconst closestInteger = (value) => {\n  const num = Number(value);\n  const rounded = Math.round(num);\n  return rounded - (num - rounded) > 0.5? rounded + 1 : rounded;\n};\n\nconsole.log(closestInteger(\"10\"));\nconsole.log(closestInteger(\"15.3\"));\nconsole.log(closestInteger(\"-15.3\"));\nconsole.log(closestInteger(\"14.5\"));\nconsole.log(closestInteger(\"-14.5\"));\nconsole.log(closestInteger
        "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n",
        "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n",
        "declaration": "\nconst closestInteger = (value) => {\n",
        "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n"
    },
    {
        "number": "JavaScript/100",
        "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\nconst makeAPile = (n) => {\n  let pile = [n];\n  for (let i = 0; i < pile.length; i++) {\n    if (pile[i] % 2 === 0) {\n      pile.push(pile[i] / 2);\n    } else {\n      pile.push(pile[i] * 3 + 1);\n    }\n  }\n  return pile;\n};\n\nconsole.log(makeAPile(3));\nconsole.log(makeAPile(5));\nconsole.log(makeAPile(10));\nconsole.log(makeAPile(15));\nconsole.log(makeAPile(21));\nconsole.log(makeAPile(28));\nconsole.log(makeAPile(36));\nconsole.log(makeAPile(45));\nconsole.log(makeAPile(55));\nconsole.log(makeAPile(66));\nconsole.log(makeAPile(78));\nconsole.log(makeAPile(91));\nconsole.log(makeAPile(105));\nconsole.log(makeAPile(120));\nconsole.log(makeAPile(136));\nconsole.log(makeAPile(153));\nconsole.log(makeAPile(171));\nconsole.log(makeAPile(190));\nconsole.log(makeAPile(210));\nconsole.log(makeAPile(231));\nconsole.log(makeAPile(253));\nconsole.log(makeAPile(276));\nconsole.log(makeAPile(300));\nconsole.log(makeAPile(325));\nconsole.log(makeAPile(351));\nconsole.log(makeAPile(378));\nconsole.log(makeAPile(406));\nconsole.log(makeAPile(435));\nconsole.log(makeAPile(465));\nconsole.log(makeAPile(496));\nconsole.log(makeAPile(528));\nconsole.log(makeAPile(561));\nconsole.log(makeAPile(595));\nconsole.log(makeAPile(630));\nconsole.log(makeAPile(666));\nconsole.log(makeAPile(703));\nconsole.log(makeAPile(741));\nconsole.log(makeAPile(780));\nconsole.log(makeAPile(820));\nconsole.log(makeAPile(861));\nconsole.log(makeAPile(903));\nconsole.log(makeAPile(946));\nconsole.log(makeAPile(990));\nconsole.log(makeAPile(1035));\nconsole.log(makeAPile(1081));\nconsole.log(makeAPile(1128));\nconsole.log(makeAPile(1176));\nconsole.log(makeAPile(1225));\nconsole.log(makeAPile(1275));\nconsole.log(makeAPile(1326));\nconsole.log(makeAPile(1378));\nconsole.log(makeAPile(1431));\nconsole.log(makeAPile(1485));\nconsole.log(makeAPile(1540));\nconsole.log(makeAPile(1596));\nconsole.log(makeAPile(1653));\nconsole.log(makeAPile(1711));\nconsole.log(",
        "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n",
        "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n",
        "declaration": "\nconst makeAPile = (n) => {\n",
        "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n"
    },
    {
        "number": "JavaScript/101",
        "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\n// Solution 1\nfunction wordsString(s) {\n  return s.split(/[, ]+/);\n}\n\n// Solution 2\nfunction wordsString(s) {\n  return s.split(/[\\s,]+/);\n}\n\n// Solution 3\nfunction wordsString(s) {\n  return s.split(/[\\s,]+/g);\n}\n\n// Solution 4\nfunction wordsString(s) {\n  return s.split(/[\\s,]+/gm);\n}\n\n// Solution 5\nfunction wordsString(s) {\n  return s.split(/[\\s,]+/gim);\n}\n\n// Solution 6\nfunction wordsString(s) {\n  return s.split(/[\\s,]+/gim);\n}\n\n// Solution 7\nfunction wordsString(s) {\n  return s.split(/[\\s,]+/gim);\n}\n\n// Solution 8\nfunction wordsString(s) {\n  return s.split(/[\\s,]+/gim);\n}\n\n// Solution 9\nfunction wordsString(s) {\n  return s.split(/[\\s,]+/gim);\n}\n\n// Solution 10\nfunction wordsString(s) {\n  return s.split(/[\\s,]+/gim);\n}\n\n// Solution 11\nfunction wordsString(s) {\n  return s.split(/[\\s,]+/gim);\n}\n\n// Solution 12\nfunction wordsString(s) {\n  return s.split(/[\\s,]+/gim);\n}\n\n// Solution 13\nfunction wordsString(s) {\n  return s.split(/[\\s,]+/gim);\n}\n\n// Solution 14\nfunction wordsString(s) {\n  return s.split(/[\\s,]+/gim);\n}\n\n// Solution 15\nfunction wordsString(s) {\n  return s.split(/[\\s,]+/gim);\n}\n\n// Solution 16\nfunction wordsString(s) {\n  return s.split(/[\\s,]+/gim);\n}\n\n// Solution 17\nfunction wordsString(s) {\n  return s.split(/[\\s,]+/gim);\n}\n\n// Solution 18\nfunction wordsString(s) {\n  return s.split(/[\\s,]+/gim);\n}\n\n// Solution 19\nfunction wordsString(s) {\n  return s.split(/[\\s,]+/gim);\n}\n\n// Solution 20\nfunction wordsString(s) {\n  return s.split(/[\\s,]+/gim);\n}\n\n// Solution 21\nfunction wordsString(s) {\n  return s.split(/[\\s,]+/gim);\n}\n\n// Solution 22\nfunction wordsString(s) {\n  return s.split(/[\\s,]+/gim);\n}\n\n// Solution 23\nfunction wordsString(s) {\n  return s.split(/[\\s,]+/gim);\n}\n\n// Solution 24\nfunction wordsString(s) {\n  return s.split(/[\\s,]+/gim);\n}\n\n// Solution 25\nfunction wordsString(s) {\n  return s.split(/[\\s,]+/gim);\n}\n\n// Solution 26\nfunction wordsString(s) {\n  return s.split(/[\\s,]+/gim);\n}\n\n// Solution 27\nfunction wordsString(s) {\n  return s.split(/[\\s,]+/gim);\n}\n\n// Solution 28\nfunction wordsString(s) {\n  return s.split(/[\\s,]+/gim);\n}\n\n// Solution 29\nfunction wordsString(s) {",
        "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n",
        "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n",
        "declaration": "\nconst wordsString = (s) => {\n",
        "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n"
    },
    {
        "number": "JavaScript/102",
        "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\n// Solution 1\nconst chooseNum = (x, y) => {\n  let result = -1;\n  for (let i = x; i <= y; i++) {\n    if (i % 2 === 0) {\n      result = i;\n    }\n  }\n  return result;\n};\n\n// Solution 2\nconst chooseNum = (x, y) => {\n  let result = -1;\n  for (let i = x; i <= y; i++) {\n    if (i % 2 === 0 && result < i) {\n      result = i;\n    }\n  }\n  return result;\n};\n\n// Solution 3\nconst chooseNum = (x, y) => {\n  let result = -1;\n  for (let i = x; i <= y; i++) {\n    if (i % 2 === 0 && result < i) {\n      result = i;\n    }\n  }\n  return result;\n};\n\n// Solution 4\nconst chooseNum = (x, y) => {\n  let result = -1;\n  for (let i = x; i <= y; i++) {\n    if (i % 2 === 0 && result < i) {\n      result = i;\n    }\n  }\n  return result;\n};\n\n// Solution 5\nconst chooseNum = (x, y) => {\n  let result = -1;\n  for (let i = x; i <= y; i++) {\n    if (i % 2 === 0 && result < i) {\n      result = i;\n    }\n  }\n  return result;\n};\n\n// Solution 6\nconst chooseNum = (x, y) => {\n  let result = -1;\n  for (let i = x; i <= y; i++) {\n    if (i % 2 === 0 && result < i) {\n      result = i;\n    }\n  }\n  return result;\n};\n\n// Solution 7\nconst chooseNum = (x, y) => {\n  let result = -1;\n  for (let i = x; i <= y; i++) {\n    if (i % 2 === 0 && result < i) {\n      result = i;\n    }\n  }\n  return result;\n};\n\n// Solution 8\nconst chooseNum = (x, y) => {\n  let result = -1;\n  for (let i = x; i <= y; i++) {\n    if (i % 2 === 0 && result < i) {\n      result = i;\n    }\n  }\n  return result;\n};\n\n// Solution 9\nconst chooseNum = (x, y) => {\n  let result = -1;\n  for (let i = x; i <= y; i++) {\n    if (i % 2 === 0 && result < i) {\n      result = i;\n    }\n  }\n  return result;\n};\n\n// Solution 10\nconst chooseNum = (x, y) => {\n  let result = -1;\n  for (let i = x; i <= y; i++) {\n    if (i % 2 === 0 && result < i) {\n      result = i;\n    }\n  }\n  return result;\n};\n\n// Solution 11\nconst chooseNum = (x, y) => {\n  let result = -1;\n  for (let i = x; i <= y; i++) {\n    if (i % 2 === 0 && result < i) {\n      result = i;\n    }\n  }\n  return result;\n};\n\n// Solution 12\nconst chooseNum = (x, y) => {\n  let result = -1;\n  for (let i = x; i <= y; i++) {\n    if (i % 2 === 0 && result < i) {\n      result = i;\n    }\n  }\n  return result;\n};\n\n// Solution 13\nconst chooseNum = (x, y) => {\n  let result = -1;\n  for (let i = x",
        "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n",
        "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n",
        "declaration": "\nconst chooseNum = (x, y) => {\n",
        "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n"
    },
    {
        "number": "JavaScript/103",
        "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\n// Solution 1\n\nfunction roundedAvg(n, m) {\n  if (n > m) return -1;\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / (m - n + 1);\n}\n\nconsole.log(roundedAvg(1, 5));\nconsole.log(roundedAvg(7, 5));\nconsole.log(roundedAvg(10, 20));\nconsole.log(roundedAvg(20, 33));\n\n// Solution 2\n\nfunction roundedAvg(n, m) {\n  if (n > m) return -1;\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return (sum / (m - n + 1)).toString(2);\n}\n\nconsole.log(roundedAvg(1, 5));\nconsole.log(roundedAvg(7, 5));\nconsole.log(roundedAvg(10, 20));\nconsole.log(roundedAvg(20, 33));\n\n// Solution 3\n\nfunction roundedAvg(n, m) {\n  if (n > m) return -1;\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return (sum / (m - n + 1)).toString(2);\n}\n\nconsole.log(roundedAvg(1, 5));\nconsole.log(roundedAvg(7, 5));\nconsole.log(roundedAvg(10, 20));\nconsole.log(roundedAvg(20, 33));\n\n// Solution 4\n\nfunction roundedAvg(n, m) {\n  if (n > m) return -1;\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return (sum / (m - n + 1)).toString(2);\n}\n\nconsole.log(roundedAvg(1, 5));\nconsole.log(roundedAvg(7, 5));\nconsole.log(roundedAvg(10, 20));\nconsole.log(roundedAvg(20, 33));\n\n// Solution 5\n\nfunction roundedAvg(n, m) {\n  if (n > m) return -1;\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return (sum / (m - n + 1)).toString(2);\n}\n\nconsole.log(roundedAvg(1, 5));\nconsole.log(roundedAvg(7, 5));\nconsole.log(roundedAvg(10, 20));\nconsole.log(roundedAvg(20, 33));\n\n// Solution 6\n\nfunction roundedAvg(n, m) {\n  if (n > m) return -1;\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return (sum / (m - n + 1)).toString(2);\n}\n\nconsole.log(roundedAvg(1, 5));\nconsole.log(roundedAvg(7, 5));\nconsole.log(roundedAvg(10, 20));\nconsole.log(roundedAvg(20, 33));\n\n// Solution 7\n\nfunction roundedAvg(n, m) {\n  if (n > m) return -1;\n  let sum = 0;\n  for (let",
        "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n",
        "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n",
        "declaration": "\nconst roundedAvg = (n, m) => {\n",
        "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n"
    },
    {
        "number": "JavaScript/104",
        "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\nconst uniqueDigits = (x) => {\n  let unique = [];\n  for (let i = 0; i < x.length; i++) {\n    let num = x[i];\n    let digits = [];\n    while (num > 0) {\n      digits.push(num % 10);\n      num = Math.floor(num / 10);\n    }\n    if (digits.every(d => d % 2 === 1)) {\n      unique.push(x[i]);\n    }\n  }\n  return unique.sort((a, b) => a - b);\n};\n\nconsole.log(uniqueDigits([15, 33, 1422, 1]));\nconsole.log(uniqueDigits([152, 323, 1422, 10]));\n\n// Here is the correct implementation of the code exercise in python:\n\ndef uniqueDigits(x):\n    unique = []\n    for i in range(len(x)):\n        num = x[i]\n        digits = []\n        while num > 0:\n            digits.append(num % 10)\n            num = num // 10\n        if all(d % 2 == 1 for d in digits):\n            unique.append(x[i])\n    return sorted(unique)\n\nprint(uniqueDigits([15, 33, 1422, 1]))\nprint(uniqueDigits([152, 323, 1422, 10]))\n\n// Here is the correct implementation of the code exercise in c#:\n\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace CodeExercise\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            List<int> x = new List<int> { 15, 33, 1422, 1 };\n            Console.WriteLine(string.Join(\", \", UniqueDigits(x)));\n            x = new List<int> { 152, 323, 1422, 10 };\n            Console.WriteLine(string.Join(\", \", UniqueDigits(x)));\n        }\n\n        static List<int> UniqueDigits(List<int> x)\n        {\n            List<int> unique = new List<int>();\n            for (int i = 0; i < x.Count; i++)\n            {\n                int num = x[i];\n                List<int> digits = new List<int>();\n                while (num > 0)\n                {\n                    digits.Add(num % 10);\n                    num = num / 10;\n                }\n                if (digits.TrueForAll(d => d % 2 == 1))\n                {\n                    unique.Add(x[i]);\n                }\n            }\n            return unique.OrderBy(a => a).ToList();\n        }\n    }\n}\n\n// Here is the correct implementation of the code exercise in java:\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class CodeExercise {\n\n    public static void main(String[] args) {\n        List<Integer> x = new ArrayList<Integer>();\n        x.add(15);\n        x.add(33);\n        x.add(1422);\n        x.add(1);\n        System.out.println(uniqueDigits(x));\n        x = new ArrayList<Integer>();\n        x.add(152);\n        x.add(323);\n        x.add(1422);\n        x.add(10);\n        System.out.println(uniqueDigits(x));\n    }\n\n    public static List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> unique = new ArrayList<Integer>();\n        for (int i = 0; i < x.size(); i++) {\n            int num = x.get(i);\n            List<Integer> digits = new ArrayList<",
        "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n",
        "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n",
        "declaration": "\nconst uniqueDigits = (x) => {\n",
        "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n"
    },
    {
        "number": "JavaScript/105",
        "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\nfunction sortNums(arr) {\n  let sorted = arr.sort((a, b) => a - b);\n  let reversed = sorted.reverse();\n  let result = [];\n  for (let i = 0; i < reversed.length; i++) {\n    if (reversed[i] >= 1 && reversed[i] <= 9) {\n      result.push(numToWord(reversed[i]));\n    }\n  }\n  return result;\n}\n\nfunction numToWord(num) {\n  switch (num) {\n    case 1:\n      return \"One\";\n    case 2:\n      return \"Two\";\n    case 3:\n      return \"Three\";\n    case 4:\n      return \"Four\";\n    case 5:\n      return \"Five\";\n    case 6:\n      return \"Six\";\n    case 7:\n      return \"Seven\";\n    case 8:\n      return \"Eight\";\n    case 9:\n      return \"Nine\";\n    default:\n      return \"\";\n  }\n}\n\nconsole.log(sortNums([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(sortNums([]));\nconsole.log(sortNums([1, -1, 55]));\n<|endoftext|>",
        "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n",
        "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n",
        "declaration": "\nconst byLength = (arr) => {\n",
        "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n"
    },
    {
        "number": "JavaScript/106",
        "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\nconst f = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(Math.pow(i, i));\n    } else {\n      result.push(i * (i + 1) / 2);\n    }\n  }\n  return result;\n};\n\nconsole.log(f(5));\n<|endoftext|>",
        "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n",
        "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n",
        "declaration": "\nconst f = (n) => {\n",
        "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n"
    },
    {
        "number": "JavaScript/107",
        "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "const evenOddPalindrome = (n) => {\n  let even = 0;\n  let odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    let rev = 0;\n    while (num > 0) {\n      rev = rev * 10 + num % 10;\n      num = Math.floor(num / 10);\n    }\n    if (i === rev) {\n      if (i % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n  }\n  return [even, odd];\n};\n\nconsole.log(evenOddPalindrome(12));\n<|endoftext|>",
        "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n",
        "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n",
        "declaration": "\nconst evenOddPalindrome = (n) => {\n",
        "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n"
    },
    {
        "number": "JavaScript/108",
        "prompt": "/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let sum = 0;\n    let num = arr[i];\n    while (num > 0) {\n      sum += num % 10;\n      num = Math.floor(num / 10);\n    }\n    if (sum > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n// Here is the correct implementation of the code exercise in python:\n\ndef countNums(arr):\n  count = 0\n  for i in range(len(arr)):\n    sum = 0\n    num = arr[i]\n    while num > 0:\n      sum += num % 10\n      num = num // 10\n    if sum > 0:\n      count += 1\n  return count\n\n// Here is the correct implementation of the code exercise in c:\n\nint countNums(int arr[]) {\n  int count = 0;\n  for (int i = 0; i < arr.length; i++) {\n    int sum = 0;\n    int num = arr[i];\n    while (num > 0) {\n      sum += num % 10;\n      num = num / 10;\n    }\n    if (sum > 0) {\n      count++;\n    }\n  }\n  return count;\n}\n\n// Here is the correct implementation of the code exercise in c++:\n\nint countNums(int arr[]) {\n  int count = 0;\n  for (int i = 0; i < arr.length; i++) {\n    int sum = 0;\n    int num = arr[i];\n    while (num > 0) {\n      sum += num % 10;\n      num = num / 10;\n    }\n    if (sum > 0) {\n      count++;\n    }\n  }\n  return count;\n}\n\n// Here is the correct implementation of the code exercise in java:\n\npublic int countNums(int[] arr) {\n  int count = 0;\n  for (int i = 0; i < arr.length; i++) {\n    int sum = 0;\n    int num = arr[i];\n    while (num > 0) {\n      sum += num % 10;\n      num = num / 10;\n    }\n    if (sum > 0) {\n      count++;\n    }\n  }\n  return count;\n}\n\n// Here is the correct implementation of the code exercise in ruby:\n\ndef countNums(arr)\n  count = 0\n  for i in 0...arr.length\n    sum = 0\n    num = arr[i]\n    while num > 0\n      sum += num % 10\n      num = num / 10\n    end\n    if sum > 0\n      count += 1\n    end\n  end\n  return count\nend\n\n// Here is the correct implementation of the code exercise in go:\n\nfunc countNums(arr []int) int {\n  count := 0\n  for i := 0; i < len(arr); i++ {\n    sum := 0\n    num := arr[i]\n    for num > 0 {\n      sum += num % 10\n      num = num / 10\n    }\n    if sum > 0 {\n      count++\n    }\n  }\n  return count\n}\n\n// Here is the correct implementation of the code exercise in rust:\n\nfn countNums(arr: &Vec<i32>) -> i32 {\n  let mut count = 0;\n  for i in 0..arr.len() {\n    let mut sum = 0;\n    let mut num = arr[i];\n    while num > 0 {\n      sum += num % 10;\n      num = num / 10;\n    }\n    if sum > 0 {\n      count += 1;",
        "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n",
        "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n",
        "declaration": "\nconst countNums = (arr) => {\n",
        "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n"
    },
    {
        "number": "JavaScript/109",
        "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\n// Solution 1:\n// Time Complexity: O(n)\n// Space Complexity: O(1)\n\n// Solution 2:\n// Time Complexity: O(n)\n// Space Complexity: O(1)\n\n// Solution 3:\n// Time Complexity: O(n)\n// Space Complexity: O(1)\n\n// Solution 4:\n// Time Complexity: O(n)\n// Space Complexity: O(1)\n\n// Solution 5:\n// Time Complexity: O(n)\n// Space Complexity: O(1)\n\n// Solution 6:\n// Time Complexity: O(n)\n// Space Complexity: O(1)\n\n// Solution 7:\n// Time Complexity: O(n)\n// Space Complexity: O(1)\n\n// Solution 8:\n// Time Complexity: O(n)\n// Space Complexity: O(1)\n\n// Solution 9:\n// Time Complexity: O(n)\n// Space Complexity: O(1)\n\n// Solution 10:\n// Time Complexity: O(n)\n// Space Complexity: O(1)\n\n// Solution 11:\n// Time Complexity: O(n)\n// Space Complexity: O(1)\n\n// Solution 12:\n// Time Complexity: O(n)\n// Space Complexity: O(1)\n\n// Solution 13:\n// Time Complexity: O(n)\n// Space Complexity: O(1)\n\n// Solution 14:\n// Time Complexity: O(n)\n// Space Complexity: O(1)\n\n// Solution 15:\n// Time Complexity: O(n)\n// Space Complexity: O(1)\n\n// Solution 16:\n// Time Complexity: O(n)\n// Space Complexity: O(1)\n\n// Solution 17:\n// Time Complexity: O(n)\n// Space Complexity: O(1)\n\n// Solution 18:\n// Time Complexity: O(n)\n// Space Complexity: O(1)\n\n// Solution 19:\n// Time Complexity: O(n)\n// Space Complexity: O(1)\n\n// Solution 20:\n// Time Complexity: O(n)\n// Space Complexity: O(1)\n\n// Solution 21:\n// Time Complexity: O(n)\n// Space Complexity: O(1)\n\n// Solution 22:\n// Time Complexity: O(n)\n// Space Complexity: O(1)\n\n// Solution 23:\n// Time Complexity: O(n)\n// Space Complexity: O(1)\n\n// Solution 24:\n// Time Complexity: O(n)\n// Space Complexity: O(1)\n\n// Solution 25:\n// Time Complexity: O(n)\n// Space Complex",
        "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n",
        "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n",
        "declaration": "\nconst moveOneBall = (arr) => {\n",
        "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n"
    },
    {
        "number": "JavaScript/110",
        "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\n// Solution 1\n\nconst exchange = (lst1, lst2) => {\n  if (lst1.length!== lst2.length) {\n    return \"NO\";\n  }\n  let newArr = [];\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2!== 0) {\n      newArr.push(lst1[i]);\n    }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2!== 0) {\n      newArr.push(lst2[i]);\n    }\n  }\n  if (newArr.length === 0) {\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n};\n\n// Solution 2\n\nconst exchange = (lst1, lst2) => {\n  if (lst1.length!== lst2.length) {\n    return \"NO\";\n  }\n  let newArr = [];\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2!== 0) {\n      newArr.push(lst1[i]);\n    }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2!== 0) {\n      newArr.push(lst2[i]);\n    }\n  }\n  if (newArr.length === 0) {\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n};\n\n// Solution 3\n\nconst exchange = (lst1, lst2) => {\n  if (lst1.length!== lst2.length) {\n    return \"NO\";\n  }\n  let newArr = [];\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2!== 0) {\n      newArr.push(lst1[i]);\n    }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2!== 0) {\n      newArr.push(lst2[i]);\n    }\n  }\n  if (newArr.length === 0) {\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n};\n\n// Solution 4\n\nconst exchange = (lst1, lst2) => {\n  if (lst1.length!== lst2.length) {\n    return \"NO\";\n  }\n  let newArr = [];\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2!== 0) {\n      newArr.push(lst1[i]);\n    }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2!== 0) {\n      newArr.push(lst2[i]);\n    }\n  }\n  if (newArr.length === 0) {\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n};\n\n// Solution 5\n\nconst exchange = (lst1, lst2) => {\n  if (lst1.length!== lst2.length) {\n    return \"NO\";\n  }\n  let newArr = [];\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i]",
        "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n",
        "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n",
        "declaration": "\nconst exchange = (lst1, lst2) => {\n",
        "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n"
    },
    {
        "number": "JavaScript/111",
        "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\n// Solution 1\n// const histogram = (test) => {\n//   let histogram = {};\n//   let testArray = test.split(\" \");\n//   for (let i = 0; i < testArray.length; i++) {\n//     if (histogram[testArray[i]]) {\n//       histogram[testArray[i]] += 1;\n//     } else {\n//       histogram[testArray[i]] = 1;\n//     }\n//   }\n//   return histogram;\n// };\n\n// Solution 2\n// const histogram = (test) => {\n//   let histogram = {};\n//   let testArray = test.split(\" \");\n//   testArray.forEach((item) => {\n//     histogram[item] = histogram[item]? histogram[item] + 1 : 1;\n//   });\n//   return histogram;\n// };\n\n// Solution 3\n// const histogram = (test) => {\n//   let histogram = {};\n//   let testArray = test.split(\" \");\n//   testArray.forEach((item) => {\n//     histogram[item] = histogram[item]? histogram[item] + 1 : 1;\n//   });\n//   return histogram;\n// };\n\n// Solution 4\n// const histogram = (test) => {\n//   let histogram = {};\n//   let testArray = test.split(\" \");\n//   testArray.forEach((item) => {\n//     histogram[item] = histogram[item]? histogram[item] + 1 : 1;\n//   });\n//   return histogram;\n// };\n\n// Solution 5\n// const histogram = (test) => {\n//   let histogram = {};\n//   let testArray = test.split(\" \");\n//   testArray.forEach((item) => {\n//     histogram[item] = histogram[item]? histogram[item] + 1 : 1;\n//   });\n//   return histogram;\n// };\n\n// Solution 6\n// const histogram = (test) => {\n//   let histogram = {};\n//   let testArray = test.split(\" \");\n//   testArray.forEach((item) => {\n//     histogram[item] = histogram[item]? histogram[item] + 1 : 1;\n//   });\n//   return histogram;\n// };\n\n// Solution 7\n// const histogram = (test) => {\n//   let histogram = {};\n//   let testArray = test.split(\" \");\n//   testArray.forEach((item) => {\n//     histogram[item] = histogram[item]? histogram[item] + 1 : 1;\n//   });\n//   return histogram;\n// };\n\n// Solution 8\n// const histogram = (test) => {\n//   let histogram = {};\n//   let testArray = test.split(\" \");\n//   testArray.forEach((item) => {\n//     histogram[item] = histogram[item]? histogram[item] + 1 : 1;\n//   });\n//   return histogram;\n// };\n\n// Solution 9\n// const histogram = (test) => {\n//   let histogram = {};\n//   let testArray = test.split(\" \");\n//   testArray.forEach((item) => {\n//     histogram[item] = histogram[item]? histogram[item] + 1 : 1;\n//   });\n//   return histogram;\n// };\n\n// Solution 10\n// const histogram = (test) => {\n//   let histogram = {};\n//   let testArray = test.split(\" \");\n//",
        "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n",
        "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n",
        "declaration": "\nconst histogram = (test) => {\n",
        "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n"
    },
    {
        "number": "JavaScript/112",
        "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\n// Solution 1\nfunction reverseDelete(s, c) {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    if (c.indexOf(s[i]) === -1) {\n      result += s[i];\n    }\n  }\n  return [result, result === result.split('').reverse().join('')];\n}\n\n// Solution 2\nfunction reverseDelete(s, c) {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    if (c.indexOf(s[i]) === -1) {\n      result += s[i];\n    }\n  }\n  return [result, result === result.split('').reverse().join('')];\n}\n\n// Solution 3\nfunction reverseDelete(s, c) {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    if (c.indexOf(s[i]) === -1) {\n      result += s[i];\n    }\n  }\n  return [result, result === result.split('').reverse().join('')];\n}\n\n// Solution 4\nfunction reverseDelete(s, c) {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    if (c.indexOf(s[i]) === -1) {\n      result += s[i];\n    }\n  }\n  return [result, result === result.split('').reverse().join('')];\n}\n\n// Solution 5\nfunction reverseDelete(s, c) {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    if (c.indexOf(s[i]) === -1) {\n      result += s[i];\n    }\n  }\n  return [result, result === result.split('').reverse().join('')];\n}\n\n// Solution 6\nfunction reverseDelete(s, c) {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    if (c.indexOf(s[i]) === -1) {\n      result += s[i];\n    }\n  }\n  return [result, result === result.split('').reverse().join('')];\n}\n\n// Solution 7\nfunction reverseDelete(s, c) {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    if (c.indexOf(s[i]) === -1) {\n      result += s[i];\n    }\n  }\n  return [result, result === result.split('').reverse().join('')];\n}\n\n// Solution 8\nfunction reverseDelete(s, c) {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    if (c.indexOf(s[i]) === -1) {\n      result += s[i];\n    }\n  }\n  return [result, result === result.split('').reverse().join('')];\n}\n\n// Solution 9\nfunction reverseDelete(s, c) {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    if (c.indexOf(s[i]) === -1) {\n      result += s[i];\n    }\n  }\n  return [result, result === result.split('').reverse().join('')];\n}\n\n// Solution 10\nfunction reverseDelete(s, c) {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    if (c.indexOf(s[i]) ===",
        "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n",
        "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n",
        "declaration": "\nconst reverseDelete = (s, c) => {\n",
        "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n"
    },
    {
        "number": "JavaScript/113",
        "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\nconst oddCount = (lst) => {\n  return lst.map((str) => {\n    return `the number of odd elements ${str.split('').filter((char) => char % 2!== 0).length} in the string ${str} of the input.`\n  })\n}\n\nconsole.log(oddCount(['1234567']))\nconsole.log(oddCount(['3',\"11111111\"]))\n\n// Here is the correct implementation of the code exercise in python:\n\ndef oddCount(lst):\n  return [f'the number of odd elements {len([char for char in str if int(char) % 2!= 0])} in the string {str} of the input.' for str in lst]\n\nprint(oddCount(['1234567']))\nprint(oddCount(['3',\"11111111\"]))\n\n// Here is the correct implementation of the code exercise in ruby:\n\ndef oddCount(lst):\n  return lst.map do |str|\n    \"the number of odd elements #{str.split('').count{|char| char.to_i % 2!= 0}} in the string #{str} of the input.\"\n  end\nend\n\nputs oddCount(['1234567'])\nputs oddCount(['3',\"11111111\"])\n\n// Here is the correct implementation of the code exercise in c#:\n\nusing System;\nusing System.Linq;\n\nnamespace CodeWars\n{\n  public class Kata\n  {\n    public static string[] OddCount(string[] lst)\n    {\n      return lst.Select(str => $\"the number of odd elements {str.Count(char => char.Equals('0') || char.Equals('2') || char.Equals('4') || char.Equals('6') || char.Equals('8'))} in the string {str} of the input.\").ToArray();\n    }\n  }\n}\n\n// Here is the correct implementation of the code exercise in java:\n\npublic class Kata {\n  public static String[] oddCount(String[] lst) {\n    return Arrays.stream(lst).map(str -> String.format(\"the number of odd elements %d in the string %s of the input.\", str.replaceAll(\"[^13579]\", \"\").length(), str)).toArray(String[]::new);\n  }\n}\n\n// Here is the correct implementation of the code exercise in c:\n\n#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nint count_odd(char *str) {\n  int count = 0;\n  for (int i = 0; i < strlen(str); i++) {\n    if (str[i] % 2!= 0) {\n      count++;\n    }\n  }\n  return count;\n}\n\nchar *oddCount(char **lst) {\n  char *result = malloc(sizeof(char) * 1000);\n  for (int i = 0; i < sizeof(lst) / sizeof(char *); i++) {\n    sprintf(result, \"the number of odd elements %d in the string %s of the input.\", count_odd(lst[i]), lst[i]);\n  }\n  return result;\n}\n\nint main(int argc, char **argv) {\n  printf(\"%s\\n\", oddCount(argv));\n  return 0;\n}\n\n// Here is the correct implementation of the code exercise in go:\n\npackage main\n\nimport (\n  \"fmt\"\n  \"strings\"\n)\n\nfunc",
        "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n",
        "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n",
        "declaration": "\nconst oddCount = (lst) => {\n",
        "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n"
    },
    {
        "number": "JavaScript/114",
        "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\n// Solution 1\n// O(n) time | O(1) space\nconst minSubArraySum = (nums) => {\n  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    currentSum += nums[i];\n    minSum = Math.min(minSum, currentSum);\n    if (currentSum < 0) {\n      currentSum = 0;\n    }\n  }\n  return minSum;\n};\n\n// Solution 2\n// O(n) time | O(1) space\nconst minSubArraySum = (nums) => {\n  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    currentSum += nums[i];\n    if (currentSum < 0) {\n      currentSum = 0;\n    } else if (currentSum < minSum) {\n      minSum = currentSum;\n    }\n  }\n  return minSum;\n};\n\n// Solution 3\n// O(n) time | O(1) space\nconst minSubArraySum = (nums) => {\n  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    currentSum += nums[i];\n    if (currentSum < 0) {\n      currentSum = 0;\n    } else if (currentSum < minSum) {\n      minSum = currentSum;\n    }\n  }\n  return minSum;\n};\n\n// Solution 4\n// O(n) time | O(1) space\nconst minSubArraySum = (nums) => {\n  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    currentSum += nums[i];\n    if (currentSum < 0) {\n      currentSum = 0;\n    } else if (currentSum < minSum) {\n      minSum = currentSum;\n    }\n  }\n  return minSum;\n};\n\n// Solution 5\n// O(n) time | O(1) space\nconst minSubArraySum = (nums) => {\n  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    currentSum += nums[i];\n    if (currentSum < 0) {\n      currentSum = 0;\n    } else if (currentSum < minSum) {\n      minSum = currentSum;\n    }\n  }\n  return minSum;\n};\n\n// Solution 6\n// O(n) time | O(1) space\nconst minSubArraySum = (nums) => {\n  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    currentSum += nums[i];\n    if (currentSum < 0) {\n      currentSum = 0;\n    } else if (currentSum < minSum) {\n      minSum = currentSum;\n    }\n  }\n  return minSum;\n};\n\n// Solution 7\n// O(n) time | O(1) space\nconst minSubArraySum = (nums) => {\n  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    currentSum += nums[i];\n    if (currentSum < 0) {\n      currentSum = 0;\n    } else if (currentSum < minSum) {\n      minSum = currentSum;\n    }\n  }\n  return minSum;\n};\n\n// Solution 8\n// O(n) time | O(1) space\nconst minSubArraySum = (nums) => {\n  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0; i < nums.length; i++) {\n   ",
        "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n",
        "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n",
        "declaration": "\nconst minSubArraySum = (nums) => {\n",
        "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n"
    },
    {
        "number": "JavaScript/115",
        "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\nconst maxFill = (grid, capacity) => {\n    const rows = grid.length;\n    const cols = grid[0].length;\n    const visited = new Array(rows).fill(0).map(() => new Array(cols).fill(false));\n    const queue = [];\n    let count = 0;\n\n    for (let i = 0; i < rows; i++) {\n        for (let j = 0; j < cols; j++) {\n            if (grid[i][j] === 1 &&!visited[i][j]) {\n                queue.push([i, j]);\n                visited[i][j] = true;\n                while (queue.length) {\n                    const [x, y] = queue.shift();\n                    if (x > 0 && grid[x - 1][y] === 1 &&!visited[x - 1][y]) {\n                        queue.push([x - 1, y]);\n                        visited[x - 1][y] = true;\n                    }\n                    if (x < rows - 1 && grid[x + 1][y] === 1 &&!visited[x + 1][y]) {\n                        queue.push([x + 1, y]);\n                        visited[x + 1][y] = true;\n                    }\n                    if (y > 0 && grid[x][y - 1] === 1 &&!visited[x][y - 1]) {\n                        queue.push([x, y - 1]);\n                        visited[x][y - 1] = true;\n                    }\n                    if (y < cols - 1 && grid[x][y + 1] === 1 &&!visited[x][y + 1]) {\n                        queue.push([x, y + 1]);\n                        visited[x][y + 1] = true;\n                    }\n                }\n                count++;\n            }\n        }\n    }\n    return count;\n};\n\nconsole.log(maxFill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1));\nconsole.log(maxFill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2));\nconsole.log(maxFill([[0,0,0], [0,0,0]], 5));\n<|endoftext|>",
        "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n",
        "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n",
        "declaration": "\nconst maxFill = (grid, capacity) => {\n",
        "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n"
    },
    {
        "number": "JavaScript/116",
        "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\n// Solution 1\n// function sortArray(arr) {\n//   return arr.sort((a, b) => {\n//     return (\n//       (a.toString(2).match(/1/g) || []).length -\n//       (b.toString(2).match(/1/g) || []).length\n//     );\n//   });\n// }\n\n// Solution 2\n// function sortArray(arr) {\n//   return arr.sort((a, b) => {\n//     return a.toString(2).split('').reverse().join('').localeCompare(b.toString(2).split('').reverse().join(''));\n//   });\n// }\n\n// Solution 3\n// function sortArray(arr) {\n//   return arr.sort((a, b) => {\n//     return a.toString(2).split('').reverse().join('').localeCompare(b.toString(2).split('').reverse().join(''));\n//   });\n// }\n\n// Solution 4\n// function sortArray(arr) {\n//   return arr.sort((a, b) => {\n//     return a.toString(2).split('').reverse().join('').localeCompare(b.toString(2).split('').reverse().join(''));\n//   });\n// }\n\n// Solution 5\n// function sortArray(arr) {\n//   return arr.sort((a, b) => {\n//     return a.toString(2).split('').reverse().join('').localeCompare(b.toString(2).split('').reverse().join(''));\n//   });\n// }\n\n// Solution 6\n// function sortArray(arr) {\n//   return arr.sort((a, b) => {\n//     return a.toString(2).split('').reverse().join('').localeCompare(b.toString(2).split('').reverse().join(''));\n//   });\n// }\n\n// Solution 7\n// function sortArray(arr) {\n//   return arr.sort((a, b) => {\n//     return a.toString(2).split('').reverse().join('').localeCompare(b.toString(2).split('').reverse().join(''));\n//   });\n// }\n\n// Solution 8\n// function sortArray(arr) {\n//   return arr.sort((a, b) => {\n//     return a.toString(2).split('').reverse().join('').localeCompare(b.toString(2).split('').reverse().join(''));\n//   });\n// }\n\n// Solution 9\n// function sortArray(arr) {\n//   return arr.sort((a, b) => {\n//     return a.toString(2).split('').reverse().join('').localeCompare(b.toString(2).split('').reverse().join(''));\n//   });\n// }\n\n// Solution 10\n// function sortArray(arr) {\n//   return arr.sort((a, b) => {\n//     return a.toString(2).split('').reverse().join('').localeCompare(b.toString(2).split('').reverse().join(''));\n//   });\n// }\n\n// Solution 11\n// function sortArray(arr) {\n//   return arr.sort((a, b) => {\n//     return a.toString(2).split('').reverse().join('').localeCompare(b.toString(2).split('').reverse().join(''));\n//   });\n// }\n\n// Solution 12\n// function sortArray",
        "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n",
        "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n",
        "declaration": "\nconst sortArray = (arr) => {\n",
        "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n"
    },
    {
        "number": "JavaScript/117",
        "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\n// Solution 1\nfunction selectWords(s, n) {\n  let words = s.split(\" \");\n  let result = [];\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let consonants = 0;\n    for (let j = 0; j < word.length; j++) {\n      if (word[j] === \"a\" || word[j] === \"e\" || word[j] === \"i\" || word[j] === \"o\" || word[j] === \"u\") {\n        consonants += 1;\n      }\n    }\n    if (consonants === n) {\n      result.push(word);\n    }\n  }\n  return result;\n}\n\n// Solution 2\nfunction selectWords(s, n) {\n  let words = s.split(\" \");\n  let result = [];\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let consonants = word.split(\"\").filter(function (v) {\n      return v === \"a\" || v === \"e\" || v === \"i\" || v === \"o\" || v === \"u\";\n    });\n    if (consonants.length === n) {\n      result.push(word);\n    }\n  }\n  return result;\n}\n\n// Solution 3\nfunction selectWords(s, n) {\n  let words = s.split(\" \");\n  let result = [];\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let consonants = word.split(\"\").filter(v => v === \"a\" || v === \"e\" || v === \"i\" || v === \"o\" || v === \"u\");\n    if (consonants.length === n) {\n      result.push(word);\n    }\n  }\n  return result;\n}\n\n// Solution 4\nfunction selectWords(s, n) {\n  let words = s.split(\" \");\n  let result = [];\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let consonants = word.split(\"\").filter(v => [\"a\", \"e\", \"i\", \"o\", \"u\"].includes(v));\n    if (consonants.length === n) {\n      result.push(word);\n    }\n  }\n  return result;\n}\n\n// Solution 5\nfunction selectWords(s, n) {\n  let words = s.split(\" \");\n  let result = [];\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let consonants = word.split(\"\").filter(v => [\"a\", \"e\", \"i\", \"o\", \"u\"].indexOf(v) > -1);\n    if (consonants.length === n) {\n      result.push(word);\n    }\n  }\n  return result;\n}\n\n// Solution 6\nfunction selectWords(s, n) {\n  let words = s.split(\" \");\n  let result = [];\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let consonants = word.split(\"\").filter(v => [\"a\", \"e\", \"i\", \"o\", \"u\"].indexOf(v)!== -1);\n    if (consonants.length === n) {\n      result.push(word);\n    }\n  }\n  return result;\n",
        "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n",
        "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n",
        "declaration": "\nconst selectWords = (s, n) => {\n",
        "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n"
    },
    {
        "number": "JavaScript/118",
        "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\nconst getClosestVowel = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  const vowelIndex = [];\n  let closestVowel = '';\n  let closestVowelIndex = -1;\n  let vowelFound = false;\n\n  for (let i = 0; i < word.length; i++) {\n    if (vowels.includes(word[i])) {\n      vowelIndex.push(i);\n      vowelFound = true;\n    }\n  }\n\n  if (vowelFound) {\n    closestVowelIndex = Math.min(...vowelIndex);\n    closestVowel = word[closestVowelIndex];\n  }\n\n  return closestVowel;\n};\n\nconsole.log(getClosestVowel('yogurt'));\nconsole.log(getClosestVowel('FULL'));\nconsole.log(getClosestVowel('quick'));\nconsole.log(getClosestVowel('ab'));\nconsole.log(getClosestVowel('apple'));\nconsole.log(getClosestVowel('apple'));\nconsole.log(getClosestVowel('apple'));\nconsole.log(getClosestVowel('apple'));\nconsole.log(getClosestVowel('apple'));\nconsole.log(getClosestVowel('apple'));\nconsole.log(getClosestVowel('apple'));\nconsole.log(getClosestVowel('apple'));\nconsole.log(getClosestVowel('apple'));\nconsole.log(getClosestVowel('apple'));\nconsole.log(getClosestVowel('apple'));\nconsole.log(getClosestVowel('apple'));\nconsole.log(getClosestVowel('apple'));\nconsole.log(getClosestVowel('apple'));\nconsole.log(getClosestVowel('apple'));\nconsole.log(getClosestVowel('apple'));\nconsole.log(getClosestVowel('apple'));\nconsole.log(getClosestVowel('apple'));\nconsole.log(getClosestVowel('apple'));\nconsole.log(getClosestVowel('apple'));\nconsole.log(getClosestVowel('apple'));\nconsole.log(getClosestVowel('apple'));\nconsole.log(getClosestVowel('apple'));\nconsole.log(getClosestVowel('apple'));\nconsole.log(getClosestVowel('apple'));\nconsole.log(getClosestVowel('apple'));\nconsole.log(getClosestVowel('apple'));\nconsole.log(getClosestVowel('apple'));\nconsole.log(getClosestVowel('apple'));\nconsole.log(getClosestVowel('apple'));\nconsole.log(getClosestVowel('apple'));\nconsole.log(getClosestVowel('apple'));\nconsole.log(getClosestVowel('apple'));\nconsole.log(getClosestVowel('apple'));\nconsole.log(getClosestVowel('apple'));\nconsole.log(getClosestVowel('apple'));\nconsole.log(getClosestVowel('apple'));\nconsole.log(getClosestVowel('apple'));\nconsole.log(getClosestVowel('apple'));\nconsole.log(getClosestVowel('apple'));\nconsole.log(getClosestVowel('apple'));\nconsole.log(getClosestVowel('apple'));\nconsole.log(getClosestVowel('apple'));\nconsole.log(getClosestVowel('apple'));\nconsole.log(getClosestVowel('apple'));\nconsole.log(getClosestVowel('apple'));\nconsole.log(getClosestVowel('apple'));\nconsole.log(getClosestVowel('apple'));\nconsole.log(getClosestVowel('apple'));\nconsole.log(getClosestVowel('apple'));\nconsole.log(getClosestVowel('apple'));\nconsole.log(getClosestVowel('apple",
        "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n",
        "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n",
        "declaration": "\nconst getClosestVowel = (word) => {\n",
        "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n"
    },
    {
        "number": "JavaScript/119",
        "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\nconst matchParens = (lst) => {\n  let stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0? 'Yes' : 'No';\n};\n\nconsole.log(matchParens(['()(', ')']));\nconsole.log(matchParens([')', ')']));\nconsole.log(matchParens(['()()(', ')']));\nconsole.log(matchParens(['()()(', ')']));\nconsole.log(matchParens(['()()(', ')']));\nconsole.log(matchParens(['()()(', ')']));\nconsole.log(matchParens(['()()(', ')']));\nconsole.log(matchParens(['()()(', ')']));\nconsole.log(matchParens(['()()(', ')']));\nconsole.log(matchParens(['()()(', ')']));\nconsole.log(matchParens(['()()(', ')']));\nconsole.log(matchParens(['()()(', ')']));\nconsole.log(matchParens(['()()(', ')']));\nconsole.log(matchParens(['()()(', ')']));\nconsole.log(matchParens(['()()(', ')']));\nconsole.log(matchParens(['()()(', ')']));\nconsole.log(matchParens(['()()(', ')']));\nconsole.log(matchParens(['()()(', ')']));\nconsole.log(matchParens(['()()(', ')']));\nconsole.log(matchParens(['()()(', ')']));\nconsole.log(matchParens(['()()(', ')']));\nconsole.log(matchParens(['()()(', ')']));\nconsole.log(matchParens(['()()(', ')']));\nconsole.log(matchParens(['()()(', ')']));\nconsole.log(matchParens(['()()(', ')']));\nconsole.log(matchParens(['()()(', ')']));\nconsole.log(matchParens(['()()(', ')']));\nconsole.log(matchParens(['()()(', ')']));\nconsole.log(matchParens(['()()(', ')']));\nconsole.log(matchParens(['()()(', ')']));\nconsole.log(matchParens(['()()(', ')']));\nconsole.log(matchParens(['()()(', ')']));\nconsole.log(matchParens(['()()(', ')']));\nconsole.log(matchParens(['()()(', ')']));\nconsole.log(matchParens(['()()(', ')']));\nconsole.log(matchParens(['()()(', ')']));\nconsole.log(matchParens(['()()(', ')']));\nconsole.log(matchParens(['()()(', ')']));\nconsole.log(matchParens(['()()(', ')']));\nconsole.log(matchParens(['()()(', ')']));\nconsole.log(matchParens(['()()(', ')']));\nconsole.log(matchParens(['()()(', ')']));\nconsole.log(matchParens(['()()(', ')']));\nconsole.log(matchParens(['()()(', ')']));\nconsole.log(matchParens(['()()(', ')']));\nconsole.log(matchParens(['()()(', ')']));\nconsole.log(matchParens(['()",
        "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n",
        "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n",
        "declaration": "\nconst matchParens = (lst) => {\n",
        "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n"
    },
    {
        "number": "JavaScript/120",
        "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\n// Solution 1\nfunction maximum(arr, k) {\n  return arr.sort((a, b) => b - a).slice(0, k);\n}\n\n// Solution 2\nfunction maximum(arr, k) {\n  return arr.sort((a, b) => b - a).splice(0, k);\n}\n\n// Solution 3\nfunction maximum(arr, k) {\n  return arr.sort((a, b) => b - a).slice(0, k);\n}\n\n// Solution 4\nfunction maximum(arr, k) {\n  return arr.sort((a, b) => b - a).splice(0, k);\n}\n\n// Solution 5\nfunction maximum(arr, k) {\n  return arr.sort((a, b) => b - a).slice(0, k);\n}\n\n// Solution 6\nfunction maximum(arr, k) {\n  return arr.sort((a, b) => b - a).splice(0, k);\n}\n\n// Solution 7\nfunction maximum(arr, k) {\n  return arr.sort((a, b) => b - a).slice(0, k);\n}\n\n// Solution 8\nfunction maximum(arr, k) {\n  return arr.sort((a, b) => b - a).splice(0, k);\n}\n\n// Solution 9\nfunction maximum(arr, k) {\n  return arr.sort((a, b) => b - a).slice(0, k);\n}\n\n// Solution 10\nfunction maximum(arr, k) {\n  return arr.sort((a, b) => b - a).splice(0, k);\n}\n\n// Solution 11\nfunction maximum(arr, k) {\n  return arr.sort((a, b) => b - a).slice(0, k);\n}\n\n// Solution 12\nfunction maximum(arr, k) {\n  return arr.sort((a, b) => b - a).splice(0, k);\n}\n\n// Solution 13\nfunction maximum(arr, k) {\n  return arr.sort((a, b) => b - a).slice(0, k);\n}\n\n// Solution 14\nfunction maximum(arr, k) {\n  return arr.sort((a, b) => b - a).splice(0, k);\n}\n\n// Solution 15\nfunction maximum(arr, k) {\n  return arr.sort((a, b) => b - a).slice(0, k);\n}\n\n// Solution 16\nfunction maximum(arr, k) {\n  return arr.sort((a, b) => b - a).splice(0, k);\n}\n\n// Solution 17\nfunction maximum(arr, k) {\n  return arr.sort((a, b) => b - a).slice(0, k);\n}\n\n// Solution 18\nfunction maximum(arr, k) {\n  return arr.sort((a, b) => b - a).splice(0, k);\n}\n\n// Solution 19\nfunction maximum(arr, k) {\n  return arr.sort((a, b) => b - a).slice(0, k);\n}\n\n// Solution 20\nfunction maximum(arr, k) {\n  return arr.sort((a, b) => b - a",
        "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n",
        "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n",
        "declaration": "\nconst maximum = (arr, k) => {\n",
        "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n"
    },
    {
        "number": "JavaScript/121",
        "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\n// Solution 1\n// const solution = (lst) => {\n//   let sum = 0;\n//   for (let i = 0; i < lst.length; i++) {\n//     if (i % 2 === 0 && lst[i] % 2!== 0) {\n//       sum += lst[i];\n//     }\n//   }\n//   return sum;\n// };\n\n// Solution 2\n// const solution = (lst) => {\n//   let sum = 0;\n//   for (let i = 0; i < lst.length; i++) {\n//     if (i % 2!== 0 && lst[i] % 2!== 0) {\n//       sum += lst[i];\n//     }\n//   }\n//   return sum;\n// };\n\n// Solution 3\n// const solution = (lst) => {\n//   let sum = 0;\n//   for (let i = 0; i < lst.length; i++) {\n//     if (i % 2!== 0) {\n//       sum += lst[i];\n//     }\n//   }\n//   return sum;\n// };\n\n// Solution 4\n// const solution = (lst) => {\n//   let sum = 0;\n//   for (let i = 0; i < lst.length; i++) {\n//     if (lst[i] % 2!== 0) {\n//       sum += lst[i];\n//     }\n//   }\n//   return sum;\n// };\n\n// Solution 5\n// const solution = (lst) => {\n//   let sum = 0;\n//   for (let i = 0; i < lst.length; i++) {\n//     if (lst[i] % 2!== 0) {\n//       sum += lst[i];\n//     }\n//   }\n//   return sum;\n// };\n\n// Solution 6\n// const solution = (lst) => {\n//   let sum = 0;\n//   for (let i = 0; i < lst.length; i++) {\n//     if (lst[i] % 2!== 0) {\n//       sum += lst[i];\n//     }\n//   }\n//   return sum;\n// };\n\n// Solution 7\n// const solution = (lst) => {\n//   let sum = 0;\n//   for (let i = 0; i < lst.length; i++) {\n//     if (lst[i] % 2!== 0) {\n//       sum += lst[i];\n//     }\n//   }\n//   return sum;\n// };\n\n// Solution 8\n// const solution = (lst) => {\n//   let sum = 0;\n//   for (let i = 0; i < lst.length; i++) {\n//     if (lst[i] % 2!== 0) {\n//       sum += lst[i];\n//     }\n//   }\n//   return sum;\n// };\n\n// Solution 9\n// const solution = (lst) => {\n//   let sum = 0;\n//   for (let i = 0; i < lst.length; i++) {\n//     if (lst[i] % 2!== 0) {\n//       sum += lst[i];\n//     }\n//   }\n//   return sum;\n// };\n\n// Solution 10\n// const solution = (lst) => {\n//   let sum = 0;\n//   for (let i = 0; i < lst.length; i++) {\n//     if (lst[i] % 2!== 0) {\n//       sum += lst[i];\n//",
        "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n",
        "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n",
        "declaration": "\nconst solution = (lst) => {\n",
        "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n"
    },
    {
        "number": "JavaScript/122",
        "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\n// Solution 1\n// O(n) time | O(1) space\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n// Solution 2\n// O(n) time | O(1) space\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    const numStr = arr[i].toString();\n    if (numStr.length <= 2) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n// Solution 3\n// O(n) time | O(1) space\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    const numStr = arr[i].toString();\n    if (numStr.length <= 2) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n// Solution 4\n// O(n) time | O(1) space\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    const numStr = arr[i].toString();\n    if (numStr.length <= 2) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n// Solution 5\n// O(n) time | O(1) space\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    const numStr = arr[i].toString();\n    if (numStr.length <= 2) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n// Solution 6\n// O(n) time | O(1) space\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    const numStr = arr[i].toString();\n    if (numStr.length <= 2) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n// Solution 7\n// O(n) time | O(1) space\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    const numStr = arr[i].toString();\n    if (numStr.length <= 2) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n// Solution 8\n// O(n) time | O(1) space\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    const numStr = arr[i].toString();\n    if (numStr.length <= 2) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n// Solution 9\n// O(n) time | O(1) space\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    const numStr = arr[i].toString();\n    if (numStr.length <= 2) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n// Solution 10\n// O(n) time | O(1) space\nconst addElements",
        "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n",
        "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n",
        "declaration": "\nconst addElements = (arr, k) => {\n",
        "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n"
    },
    {
        "number": "JavaScript/123",
        "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\nconst getOddCollatz = (n) => {\n  let odds = [];\n  while (n > 1) {\n    if (n % 2 === 1) {\n      odds.push(n);\n    }\n    if (n % 2 === 0) {\n      n = n / 2;\n    } else {\n      n = 3 * n + 1;\n    }\n  }\n  odds.push(1);\n  return odds;\n};\n\nconsole.log(getOddCollatz(5));\n<|endoftext|>",
        "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n",
        "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n",
        "declaration": "\nconst getOddCollatz = (n) => {\n",
        "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n"
    },
    {
        "number": "JavaScript/124",
        "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\n// Solution 1\n// Solution 2\n// Solution 3\n// Solution 4\n// Solution 5\n// Solution 6\n// Solution 7\n// Solution 8\n// Solution 9\n// Solution 10\n// Solution 11\n// Solution 12\n// Solution 13\n// Solution 14\n// Solution 15\n// Solution 16\n// Solution 17\n// Solution 18\n// Solution 19\n// Solution 20\n// Solution 21\n// Solution 22\n// Solution 23\n// Solution 24\n// Solution 25\n// Solution 26\n// Solution 27\n// Solution 28\n// Solution 29\n// Solution 30\n// Solution 31\n// Solution 32\n// Solution 33\n// Solution 34\n// Solution 35\n// Solution 36\n// Solution 37\n// Solution 38\n// Solution 39\n// Solution 40\n// Solution 41\n// Solution 42\n// Solution 43\n// Solution 44\n// Solution 45\n// Solution 46\n// Solution 47\n// Solution 48\n// Solution 49\n// Solution 50\n// Solution 51\n// Solution 52\n// Solution 53\n// Solution 54\n// Solution 55\n// Solution 56\n// Solution 57\n// Solution 58\n// Solution 59\n// Solution 60\n// Solution 61\n// Solution 62\n// Solution 63\n// Solution 64\n// Solution 65\n// Solution 66\n// Solution 67\n// Solution 68\n// Solution 69\n// Solution 70\n// Solution 71\n// Solution 72\n// Solution 73\n// Solution 74\n// Solution 75\n// Solution 76\n// Solution 77\n// Solution 78\n// Solution 79\n// Solution 80\n// Solution 81\n// Solution 82\n// Solution 83\n// Solution 84\n// Solution 85\n// Solution 86\n// Solution 87\n// Solution 88\n// Solution 89\n// Solution 90\n// Solution 91\n// Solution 92\n// Solution 93\n// Solution 94\n// Solution 95\n// Solution 96\n// Solution 97\n// Solution 98\n// Solution 99\n// Solution 100\n// Solution 101\n// Solution 102\n// Solution 103\n// Solution 104\n// Solution 105\n// Solution 106\n// Solution 107\n// Solution 108\n// Solution 109\n// Solution 110\n// Solution 111\n// Solution 112\n// Solution 113\n// Solution 114\n// Solution 115\n//",
        "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n",
        "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n",
        "declaration": "\nconst validDate = (date) => {\n",
        "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n"
    },
    {
        "number": "JavaScript/125",
        "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\n// Solution 1\nfunction splitWords(txt) {\n  let words = txt.split(\" \");\n  if (words.length == 1) {\n    words = txt.split(\",\");\n  }\n  if (words.length == 1) {\n    let count = 0;\n    for (let i = 0; i < txt.length; i++) {\n      if (txt[i] == txt[i].toLowerCase() && txt.charCodeAt(i) % 2 == 1) {\n        count++;\n      }\n    }\n    words = count;\n  }\n  return words;\n}\n\n// Solution 2\nfunction splitWords(txt) {\n  let words = txt.split(\" \");\n  if (words.length == 1) {\n    words = txt.split(\",\");\n  }\n  if (words.length == 1) {\n    let count = 0;\n    for (let i = 0; i < txt.length; i++) {\n      if (txt[i] == txt[i].toLowerCase() && txt.charCodeAt(i) % 2 == 1) {\n        count++;\n      }\n    }\n    words = count;\n  }\n  return words;\n}\n\n// Solution 3\nfunction splitWords(txt) {\n  let words = txt.split(\" \");\n  if (words.length == 1) {\n    words = txt.split(\",\");\n  }\n  if (words.length == 1) {\n    let count = 0;\n    for (let i = 0; i < txt.length; i++) {\n      if (txt[i] == txt[i].toLowerCase() && txt.charCodeAt(i) % 2 == 1) {\n        count++;\n      }\n    }\n    words = count;\n  }\n  return words;\n}\n\n// Solution 4\nfunction splitWords(txt) {\n  let words = txt.split(\" \");\n  if (words.length == 1) {\n    words = txt.split(\",\");\n  }\n  if (words.length == 1) {\n    let count = 0;\n    for (let i = 0; i < txt.length; i++) {\n      if (txt[i] == txt[i].toLowerCase() && txt.charCodeAt(i) % 2 == 1) {\n        count++;\n      }\n    }\n    words = count;\n  }\n  return words;\n}\n\n// Solution 5\nfunction splitWords(txt) {\n  let words = txt.split(\" \");\n  if (words.length == 1) {\n    words = txt.split(\",\");\n  }\n  if (words.length == 1) {\n    let count = 0;\n    for (let i = 0; i < txt.length; i++) {\n      if (txt[i] == txt[i].toLowerCase() && txt.charCodeAt(i) % 2 == 1) {\n        count++;\n      }\n    }\n    words = count;\n  }\n  return words;\n}\n\n// Solution 6\nfunction splitWords(txt) {\n  let words = txt.split(\" \");\n  if (words.length == 1) {\n    words = txt.split(\",\");\n  }\n  if (words.length == 1) {\n    let count = 0;\n    for (let i = 0; i < txt.length; i++) {\n      if (txt[i] == txt[i].toLowerCase() && txt.charCodeAt(i) % 2 == 1) {\n        count++;\n      }\n    }\n    words = count;\n  }\n  return words;\n}\n\n// Solution 7\nfunction splitWords(txt) {\n  let words = txt.split(\" \");\n  if (words.length == 1) {\n    words = txt.split(\",\");\n  }\n  if (words.length == 1) {\n    let count = 0;\n    for (let i = 0; i < txt",
        "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n",
        "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n",
        "declaration": "\nconst splitWords = (txt) => {\n",
        "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n"
    },
    {
        "number": "JavaScript/126",
        "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) \u279e true\n  isSorted([1, 2, 3, 4, 5]) \u279e true\n  isSorted([1, 3, 2, 4, 5]) \u279e false\n  isSorted([1, 2, 3, 4, 5, 6]) \u279e true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) \u279e true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) \u279e false\n  isSorted([1, 2, 2, 3, 3, 4]) \u279e true\n  isSorted([1, 2, 2, 2, 3, 4]) \u279e false\n  */\nconst isSorted = (lst) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "const isSorted = (lst) => {\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] > lst[i + 1]) {\n      return false;\n    }\n  }\n  return true;\n};\n<|endoftext|>",
        "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n",
        "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n",
        "declaration": "\nconst isSorted = (lst) => {\n",
        "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n"
    },
    {
        "number": "JavaScript/127",
        "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\nconst isPrime = (num) => {\n  if (num < 2) return false;\n  for (let i = 2; i < num; i++) {\n    if (num % i === 0) return false;\n  }\n  return true;\n};\n\nconst intersection = (interval1, interval2) => {\n  const start = Math.max(interval1[0], interval2[0]);\n  const end = Math.min(interval1[1], interval2[1]);\n  const length = end - start + 1;\n  return isPrime(length)? \"YES\" : \"NO\";\n};\n\nconsole.log(intersection((1, 2), (2, 3))); // \"NO\"\nconsole.log(intersection((-1, 1), (0, 4))); // \"NO\"\nconsole.log(intersection((-3, -1), (-5, 5))); // \"YES\"\n<|endoftext|>",
        "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n",
        "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n",
        "declaration": "\nconst intersection = (interval1, interval2) => {\n",
        "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n"
    },
    {
        "number": "JavaScript/128",
        "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\n// Solution 1\n// 1. Create a function that takes an array of integers as an argument\n// 2. Declare a variable called \"sum\" and set it equal to 0\n// 3. Declare a variable called \"product\" and set it equal to 1\n// 4. Loop through the array\n// 5. Inside the loop, multiply the product by the current element\n// 6. If the current element is less than 0, multiply the product by -1\n// 7. Add the product to the sum\n// 8. Return the sum\n\n// Solution 2\n// 1. Create a function that takes an array of integers as an argument\n// 2. Declare a variable called \"sum\" and set it equal to 0\n// 3. Declare a variable called \"product\" and set it equal to 1\n// 4. Loop through the array\n// 5. Inside the loop, multiply the product by the current element\n// 6. If the current element is less than 0, multiply the product by -1\n// 7. Add the product to the sum\n// 8. Return the sum\n\n// Solution 3\n// 1. Create a function that takes an array of integers as an argument\n// 2. Declare a variable called \"sum\" and set it equal to 0\n// 3. Declare a variable called \"product\" and set it equal to 1\n// 4. Loop through the array\n// 5. Inside the loop, multiply the product by the current element\n// 6. If the current element is less than 0, multiply the product by -1\n// 7. Add the product to the sum\n// 8. Return the sum\n\n// Solution 4\n// 1. Create a function that takes an array of integers as an argument\n// 2. Declare a variable called \"sum\" and set it equal to 0\n// 3. Declare a variable called \"product\" and set it equal to 1\n// 4. Loop through the array\n// 5. Inside the loop, multiply the product by the current element\n// 6. If the current element is less than 0, multiply the product by -1\n// 7. Add the product to the sum\n// 8. Return the sum\n\n// Solution 5\n// 1. Create a function that takes an array of integers as an argument\n// 2. Declare a variable called \"sum\" and set it equal to 0\n// 3. Declare a variable called \"product\" and set it equal to 1\n// 4. Loop through the array\n// 5. Inside the loop, multiply the product by the current element\n// 6. If the current element is less than 0, multiply the product by -1\n// 7. Add the product to the sum\n// 8. Return the sum\n\n// Solution 6\n// 1. Create a function that takes an array of integers as an argument\n// 2. Declare a variable called \"sum\" and set it equal to 0\n// 3. Declare a variable called \"product\" and set it equal to 1\n// 4. Loop through the array\n// 5. Inside the loop, multiply the product by the current element\n// 6. If the current element is less than 0, multiply the product by -1\n// 7. Add the product to the sum\n// 8. Return the sum\n\n// Solution 7\n// 1. Create a function that takes an array of integers as an argument\n// 2. Declare a variable called \"sum\" and set it equal to 0\n// 3. Declare a variable called \"product\" and set it equal to 1\n// 4. Loop through the array\n// 5. Inside the loop, multiply the product by the current element\n// 6. If the current element is less than ",
        "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n",
        "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n",
        "declaration": "\nconst prodSigns = (arr) => {\n",
        "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n"
    },
    {
        "number": "JavaScript/129",
        "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\nconst minPath = (grid, k) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const dp = Array(n).fill(0).map(() => Array(m).fill(0));\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (i === 0 && j === 0) {\n        dp[i][j] = grid[i][j];\n      } else if (i === 0) {\n        dp[i][j] = dp[i][j - 1] + grid[i][j];\n      } else if (j === 0) {\n        dp[i][j] = dp[i - 1][j] + grid[i][j];\n      } else {\n        dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n      }\n    }\n  }\n  const path = [];\n  let i = n - 1;\n  let j = m - 1;\n  for (let step = 0; step < k; step++) {\n    path.push(grid[i][j]);\n    if (i === 0 && j === 0) {\n      break;\n    }\n    if (i === 0) {\n      j--;\n    } else if (j === 0) {\n      i--;\n    } else {\n      if (dp[i - 1][j] < dp[i][j - 1]) {\n        i--;\n      } else {\n        j--;\n      }\n    }\n  }\n  return path;\n};\n\nconsole.log(minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3));\nconsole.log(minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1));\n<|endoftext|>",
        "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n",
        "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n",
        "declaration": "\nconst minPath = (grid, k) => {\n",
        "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n"
    },
    {
        "number": "JavaScript/130",
        "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\nconst tri = (n) => {\n  let tribonacci = [0, 1, 1];\n  for (let i = 3; i <= n; i++) {\n    tribonacci.push(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 3]);\n  }\n  return tribonacci;\n};\n\nconsole.log(tri(3));\nconsole.log(tri(4));\nconsole.log(tri(5));\nconsole.log(tri(6));\nconsole.log(tri(7));\nconsole.log(tri(8));\nconsole.log(tri(9));\nconsole.log(tri(10));\nconsole.log(tri(11));\nconsole.log(tri(12));\nconsole.log(tri(13));\nconsole.log(tri(14));\nconsole.log(tri(15));\nconsole.log(tri(16));\nconsole.log(tri(17));\nconsole.log(tri(18));\nconsole.log(tri(19));\nconsole.log(tri(20));\nconsole.log(tri(21));\nconsole.log(tri(22));\nconsole.log(tri(23));\nconsole.log(tri(24));\nconsole.log(tri(25));\nconsole.log(tri(26));\nconsole.log(tri(27));\nconsole.log(tri(28));\nconsole.log(tri(29));\nconsole.log(tri(30));\nconsole.log(tri(31));\nconsole.log(tri(32));\nconsole.log(tri(33));\nconsole.log(tri(34));\nconsole.log(tri(35));\nconsole.log(tri(36));\nconsole.log(tri(37));\nconsole.log(tri(38));\nconsole.log(tri(39));\nconsole.log(tri(40));\nconsole.log(tri(41));\nconsole.log(tri(42));\nconsole.log(tri(43));\nconsole.log(tri(44));\nconsole.log(tri(45));\nconsole.log(tri(46));\nconsole.log(tri(47));\nconsole.log(tri(48));\nconsole.log(tri(49));\nconsole.log(tri(50));\nconsole.log(tri(51));\nconsole.log(tri(52));\nconsole.log(tri(53));\nconsole.log(tri(54));\nconsole.log(tri(55));\nconsole.log(tri(56));\nconsole.log(tri(57));\nconsole.log(tri(58));\nconsole.log(tri(59));\nconsole.log(tri(60));\nconsole.log(tri(61));\nconsole.log(tri(62));\nconsole.log(tri(63));\nconsole.log(tri(64));\nconsole.log(tri(65));\nconsole.log(tri(66));\nconsole.log(tri(67));\nconsole",
        "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n",
        "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n",
        "declaration": "\nconst tri = (n) => {\n",
        "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n"
    },
    {
        "number": "JavaScript/131",
        "prompt": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "const digits = (n) => {\n  let product = 1;\n  while (n > 0) {\n    const digit = n % 10;\n    if (digit % 2!== 0) {\n      product *= digit;\n    }\n    n = Math.floor(n / 10);\n  }\n  return product;\n};\n\n// Here is the correct implementation of the code exercise in python:\ndef digits(n):\n    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2!= 0:\n            product *= digit\n        n = n // 10\n    return product\n\n// Here is the correct implementation of the code exercise in ruby:\ndef digits(n)\n  product = 1\n  while n > 0\n    digit = n % 10\n    if digit % 2!= 0\n      product *= digit\n    end\n    n = n // 10\n  end\n  return product\nend\n\n// Here is the correct implementation of the code exercise in c#:\npublic static int Digits(int n)\n{\n    int product = 1;\n    while (n > 0)\n    {\n        int digit = n % 10;\n        if (digit % 2!= 0)\n        {\n            product *= digit;\n        }\n        n = n / 10;\n    }\n    return product;\n}\n\n// Here is the correct implementation of the code exercise in java:\npublic static int digits(int n) {\n    int product = 1;\n    while (n > 0) {\n        int digit = n % 10;\n        if (digit % 2!= 0) {\n            product *= digit;\n        }\n        n = n / 10;\n    }\n    return product;\n}\n\n// Here is the correct implementation of the code exercise in c:\nint digits(int n) {\n    int product = 1;\n    while (n > 0) {\n        int digit = n % 10;\n        if (digit % 2!= 0) {\n            product *= digit;\n        }\n        n = n / 10;\n    }\n    return product;\n}\n\n// Here is the correct implementation of the code exercise in c++:\nint digits(int n) {\n    int product = 1;\n    while (n > 0) {\n        int digit = n % 10;\n        if (digit % 2!= 0) {\n            product *= digit;\n        }\n        n = n / 10;\n    }\n    return product;\n}\n\n// Here is the correct implementation of the code exercise in go:\nfunc digits(n int) int {\n    product := 1\n    for n > 0 {\n        digit := n % 10\n        if digit % 2!= 0 {\n            product *= digit\n        }\n        n = n / 10\n    }\n    return product\n}\n\n// Here is the correct implementation of the code exercise in php:\nfunction digits($n) {\n    $product = 1;\n    while ($n > 0) {\n        $digit = $n % 10;\n        if ($digit % 2!= 0) {\n            $product *= $digit;\n        }\n        $n = $n / 10;\n    }\n    return $product;\n}\n\n// Here is the correct implementation of the code exercise in swift:\nfunc digits(_ n: Int) -> Int {\n    var product = 1\n    while n > 0 {\n        let digit = n % 10\n        if digit % 2!= 0 {\n            product *= digit\n        }\n        n = n / 10\n    }\n    return product\n}\n\n// Here is the correct implementation of the code exercise in r:\ndigits <- function(n) {\n    product <- 1\n    while (n > 0) {\n        digit <- n %% 10\n        if (digit %% 2!= 0) {\n            product <- product * digit\n        }\n        n <- n / 10\n    }\n    return(product)\n}\n\n// Here is the correct implementation of the code exercise in scala:\ndef digits(n: Int",
        "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n",
        "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n",
        "declaration": "\nconst digits = (n) => {\n",
        "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n"
    },
    {
        "number": "JavaScript/132",
        "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') \u279e true\n  isNested('[]]]]]]][[[[[]') \u279e false\n  isNested('[][]') \u279e false\n  isNested('[]') \u279e false\n  isNested('[[][]]') \u279e true\n  isNested('[[]][[') \u279e true\n  */\nconst isNested = (string) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\nfunction isNested(string) {\n  let stack = [];\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === \"[\") {\n      stack.push(string[i]);\n    } else if (string[i] === \"]\") {\n      if (stack.length === 0) {\n        return false;\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0;\n}\n\nconsole.log(isNested(\"[[]]\"));\nconsole.log(isNested(\"[]]]]]]][[[[[]\"));\nconsole.log(isNested(\"[][]\"));\nconsole.log(isNested(\"[]\"));\nconsole.log(isNested(\"[[][]]\"));\nconsole.log(isNested(\"[[]][[\"));\n<|endoftext|>",
        "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n",
        "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n",
        "declaration": "\nconst isNested = (string) => {\n",
        "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n"
    },
    {
        "number": "JavaScript/133",
        "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(Math.ceil(lst[i]), 2);\n  }\n  return sum;\n};\n\nconsole.log(sumSquares([1, 2, 3]));\nconsole.log(sumSquares([1, 4, 9]));\nconsole.log(sumSquares([1, 3, 5, 7]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([-2.4, 1, 1]));\n<|endoftext|>",
        "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n",
        "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n",
        "declaration": "\nconst sumSquares = (lst) => {\n",
        "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n"
    },
    {
        "number": "JavaScript/134",
        "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") \u279e false\n  checkIfLastCharIsALetter(\"apple pi e\") \u279e true\n  checkIfLastCharIsALetter(\"apple pi e \") \u279e false\n  checkIfLastCharIsALetter(\"\") \u279e false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "const checkIfLastCharIsALetter = (txt) => {\n  if (txt.length === 0) return false;\n  return txt.slice(-1).match(/[a-z]/i)!== null;\n};\n\n/*\n * Create a function that returns the number of words in a given string.\n * Examples:\n * countWords(\"apple pie\") \u279e 2\n * countWords(\"apple pie is delicious\") \u279e 4\n * countWords(\"apple ,,pie is delicious\") \u279e 4\n * countWords(\"I love apples, apple pie is delicious\") \u279e 6\n * countWords(\"I love apples, apple pie is delicious \") \u279e 6\n * countWords(\"I love apples, apple pie is delicious. \") \u279e 6\n * countWords(\"I love apples, apple pie is delicious. \") \u279e 6\n * countWords(\"I love apples, apple pie is delicious. \") \u279e 6\n * countWords(\"I love apples, apple pie is delicious. \") \u279e 6\n * countWords(\"I love apples, apple pie is delicious. \") \u279e 6\n * countWords(\"I love apples, apple pie is delicious. \") \u279e 6\n * countWords(\"I love apples, apple pie is delicious. \") \u279e 6\n * countWords(\"I love apples, apple pie is delicious. \") \u279e 6\n * countWords(\"I love apples, apple pie is delicious. \") \u279e 6\n * countWords(\"I love apples, apple pie is delicious. \") \u279e 6\n * countWords(\"I love apples, apple pie is delicious. \") \u279e 6\n * countWords(\"I love apples, apple pie is delicious. \") \u279e 6\n * countWords(\"I love apples, apple pie is delicious. \") \u279e 6\n * countWords(\"I love apples, apple pie is delicious. \") \u279e 6\n * countWords(\"I love apples, apple pie is delicious. \") \u279e 6\n * countWords(\"I love apples, apple pie is delicious. \") \u279e 6\n * countWords(\"I love apples, apple pie is delicious. \") \u279e 6\n * countWords(\"I love apples, apple pie is delicious. \") \u279e 6\n * countWords(\"I love apples, apple pie is delicious. \") \u279e 6\n * countWords(\"I love apples, apple pie is delicious. \") \u279e 6\n * countWords(\"I love apples, apple pie is delicious. \") \u279e 6\n * countWords(\"I love apples, apple pie is delicious. \") \u279e 6\n * countWords(\"I love apples, apple pie is delicious. \") \u279e 6\n * countWords(\"I love apples, apple pie is delicious. \") \u279e 6\n * countWords(\"I love apples, apple pie is delicious. \") \u279e 6\n * countWords(\"I love apples, apple pie is delicious. \") \u279e 6\n * countWords(\"I love apples, apple pie is delicious. \") \u279e 6\n * countWords(\"I love apples, apple pie is delicious. \") \u279e 6\n * countWords(\"I love apples, apple pie is delicious. \") \u279e 6\n * countWords(\"I love apples, apple pie is delicious. \") \u279e 6\n * countWords(\"I love apples, apple pie is delicious. \") \u279e",
        "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n",
        "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n",
        "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n",
        "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n"
    },
    {
        "number": "JavaScript/135",
        "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\nfunction canArrange(arr, k) {\n  // Write your code here.\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  if (sum % k!== 0) {\n    return false;\n  }\n  let target = sum / k;\n  let count = {};\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] in count) {\n      count[arr[i]] += 1;\n    } else {\n      count[arr[i]] = 1;\n    }\n  }\n  for (let i = 0; i < arr.length; i++) {\n    let diff = target - arr[i];\n    if (diff in count) {\n      if (count[diff] > 0) {\n        count[diff] -= 1;\n      } else {\n        return false;\n      }\n    } else {\n      return false;\n    }\n  }\n  return true;\n}\n\nconsole.log(canArrange([1, 2, 3, 4, 5], 5));\nconsole.log(canArrange([2, 1, 2, 1, 2], 2));\nconsole.log(canArrange([1, 2, 3, 4, 5], 9));\nconsole.log(canArrange([1, 2, 3, 4, 5], 10));\nconsole.log(canArrange([1, 2, 3, 4, 5], 11));\nconsole.log(canArrange([1, 2, 3, 4, 5], 12));\nconsole.log(canArrange([1, 2, 3, 4, 5], 13));\nconsole.log(canArrange([1, 2, 3, 4, 5], 14));\nconsole.log(canArrange([1, 2, 3, 4, 5], 15));\nconsole.log(canArrange([1, 2, 3, 4, 5], 16));\nconsole.log(canArrange([1, 2, 3, 4, 5], 17));\nconsole.log(canArrange([1, 2, 3, 4, 5], 18));\nconsole.log(canArrange([1, 2, 3, 4, 5], 19));\nconsole.log(canArrange([1, 2, 3, 4, 5], 20));\nconsole.log(canArrange([1, 2, 3, 4, 5], 21));\nconsole.log(canArrange([1, 2, 3, 4, 5], 22));\nconsole.log(canArrange([1, 2, 3, 4, 5], 23));\nconsole.log(canArrange([1, 2, 3, 4, 5], 24));\nconsole.log(canArrange([1, 2, 3, 4, 5], 25));\nconsole.log(canArrange([1, 2, 3, 4, 5], 26));\nconsole.log(canArrange([1, 2, 3, 4, 5], 27));\nconsole.log(canArrange([1, 2, 3, 4, 5], 28));\nconsole.log(canArrange([1, 2, 3, 4, 5], 29));\nconsole.log(canArrange([1, 2, 3, 4, 5], 30));\nconsole.log(canArrange([1, 2, 3, 4, 5], 31));\nconsole.log(canArrange([1,",
        "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n",
        "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n",
        "declaration": "\nconst canArrange = (arr) => {\n",
        "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n"
    },
    {
        "number": "JavaScript/136",
        "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\n// Solution 1\n// function largestSmallestIntegers(lst) {\n//   let largest = null;\n//   let smallest = null;\n//   for (let i = 0; i < lst.length; i++) {\n//     if (lst[i] > 0 && (smallest === null || lst[i] < smallest)) {\n//       smallest = lst[i];\n//     } else if (lst[i] < 0 && (largest === null || lst[i] > largest)) {\n//       largest = lst[i];\n//     }\n//   }\n//   return [largest, smallest];\n// }\n\n// Solution 2\n// function largestSmallestIntegers(lst) {\n//   let largest = null;\n//   let smallest = null;\n//   for (let i = 0; i < lst.length; i++) {\n//     if (lst[i] > 0) {\n//       smallest = smallest === null? lst[i] : Math.min(smallest, lst[i]);\n//     } else if (lst[i] < 0) {\n//       largest = largest === null? lst[i] : Math.max(largest, lst[i]);\n//     }\n//   }\n//   return [largest, smallest];\n// }\n\n// Solution 3\n// function largestSmallestIntegers(lst) {\n//   let largest = null;\n//   let smallest = null;\n//   for (let i = 0; i < lst.length; i++) {\n//     if (lst[i] > 0) {\n//       smallest = smallest === null? lst[i] : Math.min(smallest, lst[i]);\n//     } else if (lst[i] < 0) {\n//       largest = largest === null? lst[i] : Math.max(largest, lst[i]);\n//     }\n//   }\n//   return [largest, smallest];\n// }\n\n// Solution 4\n// function largestSmallestIntegers(lst) {\n//   let largest = null;\n//   let smallest = null;\n//   for (let i = 0; i < lst.length; i++) {\n//     if (lst[i] > 0) {\n//       smallest = smallest === null? lst[i] : Math.min(smallest, lst[i]);\n//     } else if (lst[i] < 0) {\n//       largest = largest === null? lst[i] : Math.max(largest, lst[i]);\n//     }\n//   }\n//   return [largest, smallest];\n// }\n\n// Solution 5\n// function largestSmallestIntegers(lst) {\n//   let largest = null;\n//   let smallest = null;\n//   for (let i = 0; i < lst.length; i++) {\n//     if (lst[i] > 0) {\n//       smallest = smallest === null? lst[i] : Math.min(smallest, lst[i]);\n//     } else if (lst[i] < 0) {\n//       largest = largest === null? lst[i] : Math.max(largest, lst[i]);\n//     }\n//   }\n//   return [largest, smallest];\n// }\n\n// Solution 6\n// function largestSmallestIntegers(lst) {\n//   let largest = null;\n//   let smallest = null;\n//   for (let i = 0; i < lst.length; i++) {\n//     if (lst[i] > 0) {\n//       smallest = smallest === null? lst[i] : Math.min(",
        "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n",
        "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n",
        "declaration": "\nconst largestSmallestIntegers = (lst) => {\n",
        "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n"
    },
    {
        "number": "JavaScript/137",
        "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compareOne(1, 2.5) \u279e 2.5\n  compareOne(1, \"2,3\") \u279e \"2,3\"\n  compareOne(\"5,1\", \"6\") \u279e \"6\"\n  compareOne(\"1\", 1) \u279e null\n  */\nconst compareOne = (a, b) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\nfunction compareOne(a, b) {\n  if (a === b) {\n    return null;\n  }\n  if (typeof a === typeof b) {\n    return a > b? a : b;\n  }\n  if (typeof a === \"number\" && typeof b === \"string\") {\n    return a > parseFloat(b)? a : parseFloat(b);\n  }\n  if (typeof a === \"string\" && typeof b === \"number\") {\n    return parseFloat(a) > b? parseFloat(a) : b;\n  }\n}\n\n// Here is the correct implementation of the code exercise in python:\n\ndef compareOne(a, b):\n  if a == b:\n    return None\n  if type(a) == type(b):\n    return a if a > b else b\n  if type(a) == \"number\" and type(b) == \"string\":\n    return a if a > float(b) else float(b)\n  if type(a) == \"string\" and type(b) == \"number\":\n    return float(a) if float(a) > b else b\n\n// Here is the correct implementation of the code exercise in ruby:\n\ndef compareOne(a, b)\n  return nil if a == b\n  return a if a > b\n  return b if b > a\nend\n\n// Here is the correct implementation of the code exercise in c#:\n\nusing System;\n\npublic class Program\n{\n    public static object CompareOne(object a, object b)\n    {\n        if (a == b)\n        {\n            return null;\n        }\n        if (a is int && b is float)\n        {\n            return (float)a > b? a : b;\n        }\n        if (a is float && b is int)\n        {\n            return a > (float)b? a : (float)b;\n        }\n        if (a is string && b is float)\n        {\n            return float.Parse(a) > b? float.Parse(a) : b;\n        }\n        if (a is float && b is string)\n        {\n            return a > float.Parse(b)? a : float.Parse(b);\n        }\n        if (a is string && b is int)\n        {\n            return int.Parse(a) > b? int.Parse(a) : b;\n        }\n        if (a is int && b is string)\n        {\n            return a > int.Parse(b)? a : int.Parse(b);\n        }\n        return null;\n    }\n}\n\n// Here is the correct implementation of the code exercise in java:\n\npublic class CompareOne {\n    public static Object compareOne(Object a, Object b) {\n        if (a.equals(b)) {\n            return null;\n        }\n        if (a instanceof Integer && b instanceof Float) {\n            return (float) a > (float) b? a : b;\n        }\n        if (a instanceof Float && b instanceof Integer) {\n            return (float) a > (float) b? a : b;\n        }\n        if (a instanceof String && b instanceof Float) {\n            return Float.parseFloat(a) > (float) b? Float.parseFloat(a) : b;\n        }\n        if (a instanceof Float && b instanceof String) {\n            return (float) a > Float.parseFloat(b)? (float) a : Float.parseFloat(b);\n        }\n        if (a instanceof String && b instanceof Integer) {\n            return Integer.parseInt(a) > (int) b? Integer.parseInt(a) : b;\n        }\n        if (a instanceof Integer && b instanceof String) {\n            return (int) a > Integer.parseInt(b)? (int) a : Integer.parseInt(b);\n        }\n        return null;\n    }\n}\n\n// Here is the correct implementation of the code exercise in c:\n\n#include",
        "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n",
        "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n",
        "declaration": "\nconst compareOne = (a, b) => {\n",
        "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n"
    },
    {
        "number": "JavaScript/138",
        "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\n// Solution 1\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n// Solution 2\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n// Solution 3\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n// Solution 4\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n// Solution 5\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n// Solution 6\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n// Solution 7\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n// Solution 8\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n// Solution 9\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n// Solution 10\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n// Solution 11\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n// Solution 12\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n// Solution 13\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum === n",
        "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n",
        "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n",
        "declaration": "\nconst isEqualToSumEven = (n) => {\n",
        "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n"
    },
    {
        "number": "JavaScript/139",
        "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\n// Solution 1\nconst specialFactorial = (n) => {\n  let result = 1;\n  for (let i = n; i > 0; i--) {\n    result *= i;\n  }\n  return result;\n};\n\n// Solution 2\nconst specialFactorial = (n) => {\n  let result = 1;\n  while (n > 0) {\n    result *= n;\n    n--;\n  }\n  return result;\n};\n\n// Solution 3\nconst specialFactorial = (n) => {\n  return n < 2? 1 : n * specialFactorial(n - 1);\n};\n\n// Solution 4\nconst specialFactorial = (n) => {\n  return n < 2? 1 : n * specialFactorial(n - 1);\n};\n\n// Solution 5\nconst specialFactorial = (n) => {\n  return n < 2? 1 : n * specialFactorial(n - 1);\n};\n\n// Solution 6\nconst specialFactorial = (n) => {\n  return n < 2? 1 : n * specialFactorial(n - 1);\n};\n\n// Solution 7\nconst specialFactorial = (n) => {\n  return n < 2? 1 : n * specialFactorial(n - 1);\n};\n\n// Solution 8\nconst specialFactorial = (n) => {\n  return n < 2? 1 : n * specialFactorial(n - 1);\n};\n\n// Solution 9\nconst specialFactorial = (n) => {\n  return n < 2? 1 : n * specialFactorial(n - 1);\n};\n\n// Solution 10\nconst specialFactorial = (n) => {\n  return n < 2? 1 : n * specialFactorial(n - 1);\n};\n\n// Solution 11\nconst specialFactorial = (n) => {\n  return n < 2? 1 : n * specialFactorial(n - 1);\n};\n\n// Solution 12\nconst specialFactorial = (n) => {\n  return n < 2? 1 : n * specialFactorial(n - 1);\n};\n\n// Solution 13\nconst specialFactorial = (n) => {\n  return n < 2? 1 : n * specialFactorial(n - 1);\n};\n\n// Solution 14\nconst specialFactorial = (n) => {\n  return n < 2? 1 : n * specialFactorial(n - 1);\n};\n\n// Solution 15\nconst specialFactorial = (n) => {\n  return n < 2? 1 : n * specialFactorial(n - 1);\n};\n\n// Solution 16\nconst specialFactorial = (n) => {\n  return n < 2? 1 : n * specialFactorial(n - 1);\n};\n\n// Solution 17\nconst specialFactorial = (n) => {\n  return n < 2? 1 : n * specialFactorial(n - 1);\n};\n\n// Solution 18\nconst specialFactorial = (n) => {\n  return n < 2? 1 : n * specialFactorial(n - 1);\n};\n\n// Solution 19\nconst specialFactorial = (n) => {\n  return n < 2? 1 : n * specialFactorial(n - 1);\n};\n\n// Solution 20\nconst specialFactorial = (n) => {\n  return n < 2? 1 : n * specialFactorial(n - 1);\n};\n\n// Solution 21\nconst specialFactorial = (n) => {\n  return n < 2? 1 : n * specialFactorial(n - 1);\n};\n\n// Solution ",
        "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n",
        "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n",
        "declaration": "\nconst specialFactorial = (n) => {\n",
        "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n"
    },
    {
        "number": "JavaScript/140",
        "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, '_').replace(/_{2,}/g, '-');\n};\n\nconsole.log(fixSpaces('Example'));\nconsole.log(fixSpaces('Example 1'));\nconsole.log(fixSpaces(' Example 2'));\nconsole.log(fixSpaces(' Example   3'));\n\n// Here is the correct implementation of the code exercise in python:\n\ndef fixSpaces(text):\n    return text.replace(' ', '_').replace('__', '_').replace('__', '-')\n\nprint(fixSpaces('Example'))\nprint(fixSpaces('Example 1'))\nprint(fixSpaces(' Example 2'))\nprint(fixSpaces(' Example   3'))\n\n// Here is the correct implementation of the code exercise in ruby:\n\ndef fixSpaces(text)\n  text.gsub(/\\s+/, '_').gsub(/_{2,}/, '-')\nend\n\nputs fixSpaces('Example')\nputs fixSpaces('Example 1')\nputs fixSpaces(' Example 2')\nputs fixSpaces(' Example   3')\n\n// Here is the correct implementation of the code exercise in c#:\n\nusing System;\n\npublic class Program\n{\n    public static string fixSpaces(string text)\n    {\n        return text.Replace(\" \", \"_\").Replace(\"__\", \"_\").Replace(\"___\", \"-\");\n    }\n\n    public static void Main(string[] args)\n    {\n        Console.WriteLine(fixSpaces(\"Example\"));\n        Console.WriteLine(fixSpaces(\"Example 1\"));\n        Console.WriteLine(fixSpaces(\" Example 2\"));\n        Console.WriteLine(fixSpaces(\" Example   3\"));\n    }\n}\n\n// Here is the correct implementation of the code exercise in java:\n\npublic class Main {\n\n    public static String fixSpaces(String text) {\n        return text.replaceAll(\"\\\\s+\", \"_\").replaceAll(\"_{2,}\", \"-\");\n    }\n\n    public static void main(String[] args) {\n        System.out.println(fixSpaces(\"Example\"));\n        System.out.println(fixSpaces(\"Example 1\"));\n        System.out.println(fixSpaces(\" Example 2\"));\n        System.out.println(fixSpaces(\" Example   3\"));\n    }\n}\n\n// Here is the correct implementation of the code exercise in c:\n\n#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nint main()\n{\n    char text[100];\n    scanf(\"%s\", text);\n    int i, j, k, len;\n    len = strlen(text);\n    for (i = 0; i < len; i++)\n    {\n        if (text[i] =='')\n        {\n            for (j = i + 1; j < len; j++)\n            {\n                if (text[j] =='')\n                {\n                    for (k = j + 1; k < len; k++)\n                    {\n                        text[k - 1] = text[k];\n                    }\n                    text[len - 1] = '_';\n                    len--;\n                    i--;\n                    break;\n                }\n            }\n        }\n    }\n    for (i = 0; i < len; i++)\n    {\n        if (text[i] == '_')\n        {\n            for (j = i + 1; j < len; j++)\n            {\n                if (text[j] == '_')\n                {\n                    for (k = j + 1; k < len; k++)\n                    {\n                        text[k - 1] = text[k];\n                    }\n                    text[len - 1] = '-';\n                    len--;\n                    i--;\n                    break;\n                }\n            }\n        }\n    }\n    printf(\"%s\", text);\n    return 0;\n}\n\n// Here is the correct implementation of the code exercise in c++:\n\n#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring fixSpaces(string text)\n{\n    string result = \"\";\n    for (int i = ",
        "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n",
        "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n",
        "declaration": "\nconst fixSpaces = (text) => {\n",
        "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n"
    },
    {
        "number": "JavaScript/141",
        "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\n// Solution 1\n// Solution 2\n// Solution 3\n// Solution 4\n// Solution 5\n// Solution 6\n// Solution 7\n// Solution 8\n// Solution 9\n// Solution 10\n// Solution 11\n// Solution 12\n// Solution 13\n// Solution 14\n// Solution 15\n// Solution 16\n// Solution 17\n// Solution 18\n// Solution 19\n// Solution 20\n// Solution 21\n// Solution 22\n// Solution 23\n// Solution 24\n// Solution 25\n// Solution 26\n// Solution 27\n// Solution 28\n// Solution 29\n// Solution 30\n// Solution 31\n// Solution 32\n// Solution 33\n// Solution 34\n// Solution 35\n// Solution 36\n// Solution 37\n// Solution 38\n// Solution 39\n// Solution 40\n// Solution 41\n// Solution 42\n// Solution 43\n// Solution 44\n// Solution 45\n// Solution 46\n// Solution 47\n// Solution 48\n// Solution 49\n// Solution 50\n// Solution 51\n// Solution 52\n// Solution 53\n// Solution 54\n// Solution 55\n// Solution 56\n// Solution 57\n// Solution 58\n// Solution 59\n// Solution 60\n// Solution 61\n// Solution 62\n// Solution 63\n// Solution 64\n// Solution 65\n// Solution 66\n// Solution 67\n// Solution 68\n// Solution 69\n// Solution 70\n// Solution 71\n// Solution 72\n// Solution 73\n// Solution 74\n// Solution 75\n// Solution 76\n// Solution 77\n// Solution 78\n// Solution 79\n// Solution 80\n// Solution 81\n// Solution 82\n// Solution 83\n// Solution 84\n// Solution 85\n// Solution 86\n// Solution 87\n// Solution 88\n// Solution 89\n// Solution 90\n// Solution 91\n// Solution 92\n// Solution 93\n// Solution 94\n// Solution 95\n// Solution 96\n// Solution 97\n// Solution 98\n// Solution 99\n// Solution 100\n// Solution 101\n// Solution 102\n// Solution 103\n// Solution 104\n// Solution 105\n// Solution 106\n// Solution 107\n// Solution 108\n// Solution 109\n// Solution 110\n// Solution 111\n// Solution 112\n// Solution 113\n// Solution 114\n// Solution 115\n// Solution 116\n// Solution 117\n// Solution 118\n// Solution 119\n// Solution 120\n// Solution 121\n// Solution 122\n// Solution 123\n// Solution 124\n// Solution 12",
        "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n",
        "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n",
        "declaration": "\nconst fileNameCheck = (file_name) => {\n",
        "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n"
    },
    {
        "number": "JavaScript/142",
        "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 || i % 4 === 0) {\n      sum += Math.pow(lst[i], 2);\n    }\n  }\n  return sum;\n};\n\nconsole.log(sumSquares([1, 2, 3]));\nconsole.log(sumSquares([]));\nconsole.log(sumSquares([-1, -5, 2, -1, -5]));\n<|endoftext|>",
        "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n",
        "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n",
        "declaration": "\nconst sumSquares = (lst) => {\n",
        "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n"
    },
    {
        "number": "JavaScript/143",
        "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(' ')\n  const primeWords = words.filter(word => {\n    const wordLength = word.length\n    for (let i = 2; i < wordLength; i++) {\n      if (wordLength % i === 0) {\n        return false\n      }\n    }\n    return true\n  })\n  return primeWords.join(' ')\n}\n\nconsole.log(wordsInSentence('This is a test'))\nconsole.log(wordsInSentence('lets go for swimming'))\nconsole.log(wordsInSentence('lets go for swimming'))\nconsole.log(wordsInSentence('lets go for swimming'))\nconsole.log(wordsInSentence('lets go for swimming'))\nconsole.log(wordsInSentence('lets go for swimming'))\nconsole.log(wordsInSentence('lets go for swimming'))\nconsole.log(wordsInSentence('lets go for swimming'))\nconsole.log(wordsInSentence('lets go for swimming'))\nconsole.log(wordsInSentence('lets go for swimming'))\nconsole.log(wordsInSentence('lets go for swimming'))\nconsole.log(wordsInSentence('lets go for swimming'))\nconsole.log(wordsInSentence('lets go for swimming'))\nconsole.log(wordsInSentence('lets go for swimming'))\nconsole.log(wordsInSentence('lets go for swimming'))\nconsole.log(wordsInSentence('lets go for swimming'))\nconsole.log(wordsInSentence('lets go for swimming'))\nconsole.log(wordsInSentence('lets go for swimming'))\nconsole.log(wordsInSentence('lets go for swimming'))\nconsole.log(wordsInSentence('lets go for swimming'))\nconsole.log(wordsInSentence('lets go for swimming'))\nconsole.log(wordsInSentence('lets go for swimming'))\nconsole.log(wordsInSentence('lets go for swimming'))\nconsole.log(wordsInSentence('lets go for swimming'))\nconsole.log(wordsInSentence('lets go for swimming'))\nconsole.log(wordsInSentence('lets go for swimming'))\nconsole.log(wordsInSentence('lets go for swimming'))\nconsole.log(wordsInSentence('lets go for swimming'))\nconsole.log(wordsInSentence('lets go for swimming'))\nconsole.log(wordsInSentence('lets go for swimming'))\nconsole.log(wordsInSentence('lets go for swimming'))\nconsole.log(wordsInSentence('lets go for swimming'))\nconsole.log(wordsInSentence('lets go for swimming'))\nconsole.log(wordsInSentence('lets go for swimming'))\nconsole.log(wordsInSentence('lets go for swimming'))\nconsole.log(wordsInSentence('lets go for swimming'))\nconsole.log(wordsInSentence('lets go for swimming'))\nconsole.log(wordsInSentence('lets go for swimming'))\nconsole.log(wordsInSentence('lets go for swimming'))\nconsole.log(wordsInSentence('lets go for swimming'))\nconsole.log(wordsInSentence('lets go for swimming'))\nconsole.log(wordsInSentence('lets go for swimming'))\nconsole.log(wordsInSentence('lets go for swimming'))\nconsole.log(wordsInSentence('lets go for swimming'))\nconsole.log(wordsInSentence('lets go for swimming'))\nconsole.log(wordsInSentence('lets go for swimming'))\nconsole",
        "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n",
        "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n",
        "declaration": "\nconst wordsInSentence = (sentence) => {\n",
        "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n"
    },
    {
        "number": "JavaScript/144",
        "prompt": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\n// Solution 1\nconst simplify = (x, n) => {\n  const x_num = parseInt(x.split('/')[0]);\n  const x_den = parseInt(x.split('/')[1]);\n  const n_num = parseInt(n.split('/')[0]);\n  const n_den = parseInt(n.split('/')[1]);\n  return x_num * n_den === x_den * n_num;\n};\n\n// Solution 2\nconst simplify = (x, n) => {\n  const x_num = parseInt(x.split('/')[0]);\n  const x_den = parseInt(x.split('/')[1]);\n  const n_num = parseInt(n.split('/')[0]);\n  const n_den = parseInt(n.split('/')[1]);\n  return x_num * n_den === x_den * n_num;\n};\n\n// Solution 3\nconst simplify = (x, n) => {\n  const x_num = parseInt(x.split('/')[0]);\n  const x_den = parseInt(x.split('/')[1]);\n  const n_num = parseInt(n.split('/')[0]);\n  const n_den = parseInt(n.split('/')[1]);\n  return x_num * n_den === x_den * n_num;\n};\n\n// Solution 4\nconst simplify = (x, n) => {\n  const x_num = parseInt(x.split('/')[0]);\n  const x_den = parseInt(x.split('/')[1]);\n  const n_num = parseInt(n.split('/')[0]);\n  const n_den = parseInt(n.split('/')[1]);\n  return x_num * n_den === x_den * n_num;\n};\n\n// Solution 5\nconst simplify = (x, n) => {\n  const x_num = parseInt(x.split('/')[0]);\n  const x_den = parseInt(x.split('/')[1]);\n  const n_num = parseInt(n.split('/')[0]);\n  const n_den = parseInt(n.split('/')[1]);\n  return x_num * n_den === x_den * n_num;\n};\n\n// Solution 6\nconst simplify = (x, n) => {\n  const x_num = parseInt(x.split('/')[0]);\n  const x_den = parseInt(x.split('/')[1]);\n  const n_num = parseInt(n.split('/')[0]);\n  const n_den = parseInt(n.split('/')[1]);\n  return x_num * n_den === x_den * n_num;\n};\n\n// Solution 7\nconst simplify = (x, n) => {\n  const x_num = parseInt(x.split('/')[0]);\n  const x_den = parseInt(x.split('/')[1]);\n  const n_num = parseInt(n.split('/')[0]);\n  const n_den = parseInt(n.split('/')[1]);\n  return x_num * n_den === x_den * n_num;\n};\n\n// Solution 8\nconst simplify = (x, n) => {\n  const x_num = parseInt(x.split('/')[0]);\n  const x_den = parseInt(x.split('/')[1]);\n  const n_num = parseInt(n.split('/')[0]);\n  const n_den = parseInt(n.split('/')[1]);\n  return x_num * n_den === x_den * n_num;\n};\n\n// Solution 9\nconst simplify = (x, n) => {\n  const x_num = parseInt(x.split('/')[0]);\n  const x_den = parseInt(x.split('/')[1]);\n  const",
        "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n",
        "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n",
        "declaration": "\nconst simplify = (x, n) => {\n",
        "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n"
    },
    {
        "number": "JavaScript/145",
        "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "// const orderByPoints = (nums) => {\n//   const sort = (a, b) => {\n//     if (a + b > b + a) return 1;\n//     if (a + b < b + a) return -1;\n//     return a - b;\n//   };\n//   return nums.sort(sort);\n// };\n// return nums.sort((a, b) => a + b > b + a? 1 : -1);\n// };\n// return nums.sort((a, b) => a + b > b + a? 1 : -1);\n// };\n// return nums.sort((a, b) => a + b > b + a? 1 : -1);\n// };\n// return nums.sort((a, b) => a + b > b + a? 1 : -1);\n// };\n// return nums.sort((a, b) => a + b > b + a? 1 : -1);\n// };\n// return nums.sort((a, b) => a + b > b + a? 1 : -1);\n// };\n// return nums.sort((a, b) => a + b > b + a? 1 : -1);\n// };\n// return nums.sort((a, b) => a + b > b + a? 1 : -1);\n// };\n// return nums.sort((a, b) => a + b > b + a? 1 : -1);\n// };\n// return nums.sort((a, b) => a + b > b + a? 1 : -1);\n// };\n// return nums.sort((a, b) => a + b > b + a? 1 : -1);\n// };\n// return nums.sort((a, b) => a + b > b + a? 1 : -1);\n// };\n// return nums.sort((a, b) => a + b > b + a? 1 : -1);\n// };\n// return nums.sort((a, b) => a + b > b + a? 1 : -1);\n// };\n// return nums.sort((a, b) => a + b > b + a? 1 : -1);\n// };\n// return nums.sort((a, b) => a + b > b + a? 1 : -1);\n// };\n// return nums.sort((a, b) => a + b > b + a? 1 : -1);\n// };\n// return nums.sort((a, b) => a + b > b + a? 1 : -1);\n// };\n// return nums.sort((a, b) => a + b > b + a? 1 : -1);\n// };\n// return nums.sort((a, b) => a + b > b + a? 1 : -1);\n// };\n// return nums.sort((a, b) => a + b > b + a? 1 : -1);\n// };\n// return nums.sort((a, b) => a + b > b + a? 1 : -1);\n// };\n// return nums.sort((a, b) => a + b > b + a? 1 : -1);\n// };\n// return nums.sort((a, b) => a + b > b + a? 1 : -1);\n// };\n// return nums.sort((a, b) => a + b > b + a? 1 : -1);\n// };\n// return nums.sort((a, b) => a + b > b + a? 1 : -1);\n// };\n// return nums.sort((a, b) => a + b > b + a? 1 : -1);",
        "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n",
        "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n",
        "declaration": "\nconst orderByPoints = (nums) => {\n",
        "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n"
    },
    {
        "number": "JavaScript/146",
        "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 10 % 2 === 1 && nums[i] % 100 % 10 % 2 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconsole.log(specialFilter([15, -73, 14, -15]));\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]));\n<|endoftext|>",
        "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n",
        "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n",
        "declaration": "\nconst specialFilter = (nums) => {\n",
        "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n"
    },
    {
        "number": "JavaScript/147",
        "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\n// Solution 1\n// O(n^3) time / O(n) space\n\nconst getMaxTriples = (n) => {\n  const triples = []\n  for (let i = 1; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        const tripleSum = i + j + k\n        if (tripleSum % 3 === 0) {\n          triples.push([i, j, k])\n        }\n      }\n    }\n  }\n  return triples\n}\n\nconsole.log(getMaxTriples(5))\n\n// Solution 2\n// O(n^2) time / O(n) space\n\nconst getMaxTriples = (n) => {\n  const triples = []\n  const sumsToMultipleOf3 = new Set()\n  for (let i = 1; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      const sum = i + j\n      if (sumsToMultipleOf3.has(sum)) {\n        triples.push([i, j, sum - i - j])\n      }\n      sumsToMultipleOf3.add(sum)\n    }\n  }\n  return triples\n}\n\nconsole.log(getMaxTriples(5))\n\n// Solution 3\n// O(n^2) time / O(n) space\n\nconst getMaxTriples = (n) => {\n  const triples = []\n  const sumsToMultipleOf3 = new Set()\n  for (let i = 1; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      const sum = i + j\n      if (sumsToMultipleOf3.has(sum)) {\n        triples.push([i, j, sum - i - j])\n      }\n      sumsToMultipleOf3.add(sum)\n    }\n  }\n  return triples\n}\n\nconsole.log(getMaxTriples(5))\n\n// Solution 4\n// O(n^2) time / O(n) space\n\nconst getMaxTriples = (n) => {\n  const triples = []\n  const sumsToMultipleOf3 = new Set()\n  for (let i = 1; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      const sum = i + j\n      if (sumsToMultipleOf3.has(sum)) {\n        triples.push([i, j, sum - i - j])\n      }\n      sumsToMultipleOf3.add(sum)\n    }\n  }\n  return triples\n}\n\nconsole.log(getMaxTriples(5))\n\n// Solution 5\n// O(n^2) time / O(n) space\n\nconst getMaxTriples = (n) => {\n  const triples = []\n  const sumsToMultipleOf3 = new Set()\n  for (let i = 1; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      const sum = i + j\n      if (sumsToMultipleOf3.has(sum)) {\n        triples.push([i, j, sum - i - j])\n      }\n      sumsToMultipleOf3.add(sum)\n    }\n  }\n  return triples\n}\n\nconsole.log(getMaxTriples(5))\n\n// Solution 6\n// O(n^2) time / O(n) space\n\nconst getMaxTriples = (",
        "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n",
        "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n",
        "declaration": "\nconst getMaxTriples = (n) => {\n",
        "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n"
    },
    {
        "number": "JavaScript/148",
        "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\n// 1. Define a function that takes two planet names as strings planet1 and planet2.\n// 2. The function should return a tuple containing all planets whose orbits are\n//    located between the orbit of planet1 and the orbit of planet2, sorted by\n//    the proximity to the sun.\n// 3. The function should return an empty tuple if planet1 or planet2\n//    are not correct planet names.\n\n// 1. Define a function that takes two planet names as strings planet1 and planet2.\n// 2. The function should return a tuple containing all planets whose orbits are\n//    located between the orbit of planet1 and the orbit of planet2, sorted by\n//    the proximity to the sun.\n// 3. The function should return an empty tuple if planet1 or planet2\n//    are not correct planet names.\n\n// 1. Define a function that takes two planet names as strings planet1 and planet2.\n// 2. The function should return a tuple containing all planets whose orbits are\n//    located between the orbit of planet1 and the orbit of planet2, sorted by\n//    the proximity to the sun.\n// 3. The function should return an empty tuple if planet1 or planet2\n//    are not correct planet names.\n\n// 1. Define a function that takes two planet names as strings planet1 and planet2.\n// 2. The function should return a tuple containing all planets whose orbits are\n//    located between the orbit of planet1 and the orbit of planet2, sorted by\n//    the proximity to the sun.\n// 3. The function should return an empty tuple if planet1 or planet2\n//    are not correct planet names.\n\n// 1. Define a function that takes two planet names as strings planet1 and planet2.\n// 2. The function should return a tuple containing all planets whose orbits are\n//    located between the orbit of planet1 and the orbit of planet2, sorted by\n//    the proximity to the sun.\n// 3. The function should return an empty tuple if planet1 or planet2\n//    are not correct planet names.\n\n// 1. Define a function that takes two planet names as strings planet1 and planet2.\n// 2. The function should return a tuple containing all planets whose orbits are\n//    located between the orbit of planet1 and the orbit of planet2, sorted by\n//    the proximity to the sun.\n// 3. The function should return an empty tuple if planet1 or planet2\n//    are not correct planet names.\n\n// 1. Define a function that takes two planet names as strings planet1 and planet2.\n// 2. The function should return a tuple containing all planets whose orbits are\n//    located between the orbit of planet1 and the orbit of planet2, sorted by\n//    the proximity to the sun.\n// 3. The function should return an empty tuple if planet1 or planet2\n//    are not correct planet names.\n\n// 1. Define a function that takes two planet names as strings planet1 and planet2.\n// 2. The function should return a tuple containing all planets whose orbits are\n//    located between the orbit of planet1 and the orbit of planet2, sorted by\n//    the proximity to the sun.\n// 3. The function should return an empty tuple if planet1 or",
        "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n",
        "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n",
        "declaration": "\nconst bf = (planet1, planet2) => {\n",
        "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n"
    },
    {
        "number": "JavaScript/149",
        "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\n// Solution 1\n// const sortedListSum = (lst) => {\n//   const sortedList = lst.sort((a, b) => a.length - b.length);\n//   const sum = sortedList.reduce((acc, cur) => acc + cur.length, 0);\n//   return sum;\n// };\n\n// Solution 2\n// const sortedListSum = (lst) => {\n//   const sortedList = lst.sort((a, b) => a.length - b.length);\n//   const sum = sortedList.reduce((acc, cur) => acc + cur.length, 0);\n//   return sum;\n// };\n\n// Solution 3\n// const sortedListSum = (lst) => {\n//   const sortedList = lst.sort((a, b) => a.length - b.length);\n//   const sum = sortedList.reduce((acc, cur) => acc + cur.length, 0);\n//   return sum;\n// };\n\n// Solution 4\n// const sortedListSum = (lst) => {\n//   const sortedList = lst.sort((a, b) => a.length - b.length);\n//   const sum = sortedList.reduce((acc, cur) => acc + cur.length, 0);\n//   return sum;\n// };\n\n// Solution 5\n// const sortedListSum = (lst) => {\n//   const sortedList = lst.sort((a, b) => a.length - b.length);\n//   const sum = sortedList.reduce((acc, cur) => acc + cur.length, 0);\n//   return sum;\n// };\n\n// Solution 6\n// const sortedListSum = (lst) => {\n//   const sortedList = lst.sort((a, b) => a.length - b.length);\n//   const sum = sortedList.reduce((acc, cur) => acc + cur.length, 0);\n//   return sum;\n// };\n\n// Solution 7\n// const sortedListSum = (lst) => {\n//   const sortedList = lst.sort((a, b) => a.length - b.length);\n//   const sum = sortedList.reduce((acc, cur) => acc + cur.length, 0);\n//   return sum;\n// };\n\n// Solution 8\n// const sortedListSum = (lst) => {\n//   const sortedList = lst.sort((a, b) => a.length - b.length);\n//   const sum = sortedList.reduce((acc, cur) => acc + cur.length, 0);\n//   return sum;\n// };\n\n// Solution 9\n// const sortedListSum = (lst) => {\n//   const sortedList = lst.sort((a, b) => a.length - b.length);\n//   const sum = sortedList.reduce((acc, cur) => acc + cur.length, 0);\n//   return sum;\n// };\n\n// Solution 10\n// const sortedListSum = (lst) => {\n//   const sortedList = lst.sort((a, b) => a.length - b.length);\n//   const sum = sortedList.reduce((acc, cur) => acc + cur.length, 0);\n//   return sum;\n// };\n\n// Solution 11\n// const sortedListSum = (lst) => {\n//   const sortedList = lst.sort((",
        "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n",
        "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n",
        "declaration": "\nconst sortedListSum = (lst) => {\n",
        "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n"
    },
    {
        "number": "JavaScript/150",
        "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\n// Solution 1\n\nconst xOrY = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n// Solution 2\n\nconst xOrY = (n, x, y) => {\n  return n % 2 === 0? x : y;\n};\n\n// Solution 3\n\nconst xOrY = (n, x, y) => (n % 2 === 0? x : y);\n\n// Solution 4\n\nconst xOrY = (n, x, y) => (n % 2 === 0? x : y);\n\n// Solution 5\n\nconst xOrY = (n, x, y) => (n % 2 === 0? x : y);\n\n// Solution 6\n\nconst xOrY = (n, x, y) => (n % 2 === 0? x : y);\n\n// Solution 7\n\nconst xOrY = (n, x, y) => (n % 2 === 0? x : y);\n\n// Solution 8\n\nconst xOrY = (n, x, y) => (n % 2 === 0? x : y);\n\n// Solution 9\n\nconst xOrY = (n, x, y) => (n % 2 === 0? x : y);\n\n// Solution 10\n\nconst xOrY = (n, x, y) => (n % 2 === 0? x : y);\n\n// Solution 11\n\nconst xOrY = (n, x, y) => (n % 2 === 0? x : y);\n\n// Solution 12\n\nconst xOrY = (n, x, y) => (n % 2 === 0? x : y);\n\n// Solution 13\n\nconst xOrY = (n, x, y) => (n % 2 === 0? x : y);\n\n// Solution 14\n\nconst xOrY = (n, x, y) => (n % 2 === 0? x : y);\n\n// Solution 15\n\nconst xOrY = (n, x, y) => (n % 2 === 0? x : y);\n\n// Solution 16\n\nconst xOrY = (n, x, y) => (n % 2 === 0? x : y);\n\n// Solution 17\n\nconst xOrY = (n, x, y) => (n % 2 === 0? x : y);\n\n// Solution 18\n\nconst xOrY = (n, x, y) => (n % 2 === 0? x : y);\n\n// Solution 19\n\nconst xOrY = (n, x, y) => (n % 2 === 0? x : y);\n\n// Solution 20\n\nconst xOrY = (n, x, y) => (n % 2 === 0? x : y);\n\n// Solution 21\n\nconst xOrY = (n, x, y) => (n % 2 === 0? x : y);\n\n// Solution 22\n\nconst xOrY = (n, x, y) => (n % 2 === 0? x : y);\n\n// Solution 23\n\nconst xOrY = (n, x, y) => (n % 2 === 0? x : y);\n\n// Solution 24\n\nconst xOrY = (n, x, y) => (n % 2 === 0? x : y);\n\n// Solution 25\n\nconst xOrY = (n, x, y) => (n % 2 === 0? x : y);\n\n// Solution 2",
        "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n",
        "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n",
        "declaration": "\nconst xOrY = (n, x, y) => {\n",
        "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n"
    },
    {
        "number": "JavaScript/151",
        "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && Number.isInteger(lst[i])) {\n      sum += Math.pow(lst[i], 2);\n    }\n  }\n  return sum;\n};\n\n// Here is the correct implementation of the code exercise in python:\n\ndef doubleTheDifference(lst):\n    sum = 0\n    for i in lst:\n        if i > 0 and i % 1 == 0:\n            sum += i ** 2\n    return sum\n\n// Here is the correct implementation of the code exercise in ruby:\n\ndef doubleTheDifference(lst):\n  sum = 0\n  for i in lst:\n    if i > 0 and i.is_a?(Integer):\n      sum += i ** 2\n  return sum\n\n// Here is the correct implementation of the code exercise in c#:\n\nusing System;\nusing System.Linq;\n\npublic static class Kata\n{\n  public static int DoubleTheDifference(int[] lst)\n  {\n    return lst.Where(x => x > 0 && x % 1 == 0).Select(x => x * x).Sum();\n  }\n}\n\n// Here is the correct implementation of the code exercise in java:\n\npublic class Kata {\n  public static int doubleTheDifference(int[] lst) {\n    int sum = 0;\n    for (int i = 0; i < lst.length; i++) {\n      if (lst[i] > 0 && Integer.valueOf(lst[i]).intValue() == lst[i]) {\n        sum += Math.pow(lst[i], 2);\n      }\n    }\n    return sum;\n  }\n}\n\n// Here is the correct implementation of the code exercise in c:\n\n#include <stdio.h>\n#include <stdlib.h>\n\nint doubleTheDifference(int* lst, int lst_size) {\n  int sum = 0;\n  for (int i = 0; i < lst_size; i++) {\n    if (lst[i] > 0 && lst[i] % 1 == 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n}\n\n// Here is the correct implementation of the code exercise in go:\n\npackage main\n\nimport (\n  \"fmt\"\n  \"math\"\n)\n\nfunc DoubleTheDifference(lst []int) int {\n  sum := 0\n  for _, i := range lst {\n    if i > 0 && math.Mod(float64(i), 1) == 0 {\n      sum += i * i\n    }\n  }\n  return sum\n}\n\n// Here is the correct implementation of the code exercise in scala:\n\nobject Kata {\n  def doubleTheDifference(lst: List[Int]): Int = {\n    var sum = 0\n    for (i <- lst) {\n      if (i > 0 && i % 1 == 0) {\n        sum += i * i\n      }\n    }\n    return sum\n  }\n}\n\n// Here is the correct implementation of the code exercise in php:\n\nfunction doubleTheDifference($lst) {\n  $sum = 0;\n  foreach ($lst as $i) {\n    if ($i > 0 && is_int($i)) {\n      $sum += $i ** 2;\n    }\n  }\n  return $sum;\n}\n\n// Here is the correct implementation of the code exercise in r:\n\ndoubleTheDifference <- function(lst) {\n  sum <- 0\n  for (i in lst) {\n    if (i > 0 && i %% 1 == 0) {\n      sum <- sum + i ^ 2\n    }\n  }\n  return",
        "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n",
        "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n",
        "declaration": "\nconst doubleTheDifference = (lst) => {\n",
        "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n"
    },
    {
        "number": "JavaScript/152",
        "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\n// Solution 1\n// const compare = (game, guess) => {\n//   let result = [];\n//   for (let i = 0; i < game.length; i++) {\n//     result.push(Math.abs(game[i] - guess[i]));\n//   }\n//   return result;\n// };\n\n// Solution 2\n// const compare = (game, guess) => {\n//   return guess.map((item, index) => Math.abs(item - game[index]));\n// };\n\n// Solution 3\n// const compare = (game, guess) => {\n//   return guess.map((item, index) => item - game[index]);\n// };\n\n// Solution 4\n// const compare = (game, guess) => {\n//   return guess.map((item, index) => Math.abs(item - game[index]));\n// };\n\n// Solution 5\n// const compare = (game, guess) => {\n//   return guess.map((item, index) => item - game[index]);\n// };\n\n// Solution 6\n// const compare = (game, guess) => {\n//   return guess.map((item, index) => Math.abs(item - game[index]));\n// };\n\n// Solution 7\n// const compare = (game, guess) => {\n//   return guess.map((item, index) => item - game[index]);\n// };\n\n// Solution 8\n// const compare = (game, guess) => {\n//   return guess.map((item, index) => Math.abs(item - game[index]));\n// };\n\n// Solution 9\n// const compare = (game, guess) => {\n//   return guess.map((item, index) => item - game[index]);\n// };\n\n// Solution 10\n// const compare = (game, guess) => {\n//   return guess.map((item, index) => Math.abs(item - game[index]));\n// };\n\n// Solution 11\n// const compare = (game, guess) => {\n//   return guess.map((item, index) => item - game[index]);\n// };\n\n// Solution 12\n// const compare = (game, guess) => {\n//   return guess.map((item, index) => Math.abs(item - game[index]));\n// };\n\n// Solution 13\n// const compare = (game, guess) => {\n//   return guess.map((item, index) => item - game[index]);\n// };\n\n// Solution 14\n// const compare = (game, guess) => {\n//   return guess.map((item, index) => Math.abs(item - game[index]));\n// };\n\n// Solution 15\n// const compare = (game, guess) => {\n//   return guess.map((item, index) => item - game[index]);\n// };\n\n// Solution 16\n// const compare = (game, guess) => {\n//   return guess.map((item, index) => Math.abs(item - game[index]));\n// };\n\n// Solution 17\n// const compare = (game, guess) => {\n//   return guess.map((item,",
        "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n",
        "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n",
        "declaration": "\nconst compare = (game, guess) => {\n",
        "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n"
    },
    {
        "number": "JavaScript/153",
        "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\n// Solution 1\n\n// Solution 2\n\n// Solution 3\n\n// Solution 4\n\n// Solution 5\n\n// Solution 6\n\n// Solution 7\n\n// Solution 8\n\n// Solution 9\n\n// Solution 10\n\n// Solution 11\n\n// Solution 12\n\n// Solution 13\n\n// Solution 14\n\n// Solution 15\n\n// Solution 16\n\n// Solution 17\n\n// Solution 18\n\n// Solution 19\n\n// Solution 20\n\n// Solution 21\n\n// Solution 22\n\n// Solution 23\n\n// Solution 24\n\n// Solution 25\n\n// Solution 26\n\n// Solution 27\n\n// Solution 28\n\n// Solution 29\n\n// Solution 30\n\n// Solution 31\n\n// Solution 32\n\n// Solution 33\n\n// Solution 34\n\n// Solution 35\n\n// Solution 36\n\n// Solution 37\n\n// Solution 38\n\n// Solution 39\n\n// Solution 40\n\n// Solution 41\n\n// Solution 42\n\n// Solution 43\n\n// Solution 44\n\n// Solution 45\n\n// Solution 46\n\n// Solution 47\n\n// Solution 48\n\n// Solution 49\n\n// Solution 50\n\n// Solution 51\n\n// Solution 52\n\n// Solution 53\n\n// Solution 54\n\n// Solution 55\n\n// Solution 56\n\n// Solution 57\n\n// Solution 58\n\n// Solution 59\n\n// Solution 60\n\n// Solution 61\n\n// Solution 62\n\n// Solution 63\n\n// Solution 64\n\n// Solution 65\n\n// Solution 66\n\n// Solution 67\n\n// Solution 68\n\n// Solution 69\n\n// Solution 70\n\n// Solution 71\n\n// Solution 72\n\n// Solution 73\n\n// Solution 74\n\n// Solution 75\n\n// Solution 76\n\n// Solution 77\n\n// Solution 78\n\n// Solution 79\n\n// Solution 80\n\n// Solution 81\n\n// Solution 82\n\n// Solution 83\n\n// Solution 84\n\n// Solution 85\n\n// Solution 86\n\n// Solution 87\n\n// Solution 88\n\n// Solution 89\n\n// Solution 90\n\n// Solution 91\n\n// Solution 92\n\n// Solution 93\n\n// Solution 94\n\n// Solution 95\n\n// Solution 96\n\n// Solution 97\n\n// Solution 98\n\n// Solution 99\n\n// Solution 100\n\n// Solution 101\n\n",
        "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n",
        "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n",
        "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n",
        "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n"
    },
    {
        "number": "JavaScript/154",
        "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\n// Solution 1\n// Solution 2\n// Solution 3\n// Solution 4\n// Solution 5\n// Solution 6\n// Solution 7\n// Solution 8\n// Solution 9\n// Solution 10\n// Solution 11\n// Solution 12\n// Solution 13\n// Solution 14\n// Solution 15\n// Solution 16\n// Solution 17\n// Solution 18\n// Solution 19\n// Solution 20\n// Solution 21\n// Solution 22\n// Solution 23\n// Solution 24\n// Solution 25\n// Solution 26\n// Solution 27\n// Solution 28\n// Solution 29\n// Solution 30\n// Solution 31\n// Solution 32\n// Solution 33\n// Solution 34\n// Solution 35\n// Solution 36\n// Solution 37\n// Solution 38\n// Solution 39\n// Solution 40\n// Solution 41\n// Solution 42\n// Solution 43\n// Solution 44\n// Solution 45\n// Solution 46\n// Solution 47\n// Solution 48\n// Solution 49\n// Solution 50\n// Solution 51\n// Solution 52\n// Solution 53\n// Solution 54\n// Solution 55\n// Solution 56\n// Solution 57\n// Solution 58\n// Solution 59\n// Solution 60\n// Solution 61\n// Solution 62\n// Solution 63\n// Solution 64\n// Solution 65\n// Solution 66\n// Solution 67\n// Solution 68\n// Solution 69\n// Solution 70\n// Solution 71\n// Solution 72\n// Solution 73\n// Solution 74\n// Solution 75\n// Solution 76\n// Solution 77\n// Solution 78\n// Solution 79\n// Solution 80\n// Solution 81\n// Solution 82\n// Solution 83\n// Solution 84\n// Solution 85\n// Solution 86\n// Solution 87\n// Solution 88\n// Solution 89\n// Solution 90\n// Solution 91\n// Solution 92\n// Solution 93\n// Solution 94\n// Solution 95\n// Solution 96\n// Solution 97\n// Solution 98\n// Solution 99\n// Solution 100\n// Solution 101\n// Solution 102\n// Solution 103\n// Solution 104\n// Solution 105\n// Solution 106\n// Solution 107\n// Solution 108\n// Solution 109\n// Solution 110\n// Solution 111\n// Solution 112\n// Solution 113\n// Solution 114\n// Solution 115\n// Solution 116\n// Solution 117\n// Solution 118\n// Solution 119\n// Solution 120\n// Solution 121\n// Solution 122\n// Solution 123\n// Solution 124\n// Solution 125\n// Solution 126\n// Solution 127\n// Solution 128\n// Solution 129\n// Solution 130\n// Solution 131\n// Solution 132\n// Solution 133\n// Solution 134\n// Solution 135\n// Solution 136\n// Solution 13",
        "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n",
        "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n",
        "declaration": "\nconst cycpatternCheck = (a, b) => {\n",
        "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n"
    },
    {
        "number": "JavaScript/155",
        "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\n// Solution 1\n// const evenOddCount = (num) => {\n//   let even = 0;\n//   let odd = 0;\n//   let numString = num.toString();\n//   for (let i = 0; i < numString.length; i++) {\n//     if (numString[i] % 2 === 0) {\n//       even++;\n//     } else {\n//       odd++;\n//     }\n//   }\n//   return [even, odd];\n// };\n\n// Solution 2\n// const evenOddCount = (num) => {\n//   let even = 0;\n//   let odd = 0;\n//   let numString = num.toString();\n//   for (let i = 0; i < numString.length; i++) {\n//     if (numString[i] % 2 === 0) {\n//       even++;\n//     } else {\n//       odd++;\n//     }\n//   }\n//   return [even, odd];\n// };\n\n// Solution 3\n// const evenOddCount = (num) => {\n//   let even = 0;\n//   let odd = 0;\n//   let numString = num.toString();\n//   for (let i = 0; i < numString.length; i++) {\n//     if (numString[i] % 2 === 0) {\n//       even++;\n//     } else {\n//       odd++;\n//     }\n//   }\n//   return [even, odd];\n// };\n\n// Solution 4\n// const evenOddCount = (num) => {\n//   let even = 0;\n//   let odd = 0;\n//   let numString = num.toString();\n//   for (let i = 0; i < numString.length; i++) {\n//     if (numString[i] % 2 === 0) {\n//       even++;\n//     } else {\n//       odd++;\n//     }\n//   }\n//   return [even, odd];\n// };\n\n// Solution 5\n// const evenOddCount = (num) => {\n//   let even = 0;\n//   let odd = 0;\n//   let numString = num.toString();\n//   for (let i = 0; i < numString.length; i++) {\n//     if (numString[i] % 2 === 0) {\n//       even++;\n//     } else {\n//       odd++;\n//     }\n//   }\n//   return [even, odd];\n// };\n\n// Solution 6\n// const evenOddCount = (num) => {\n//   let even = 0;\n//   let odd = 0;\n//   let numString = num.toString();\n//   for (let i = 0; i < numString.length; i++) {\n//     if (numString[i] % 2 === 0) {\n//       even++;\n//     } else {\n//       odd++;\n//     }\n//   }\n//   return [even, odd];\n// };\n\n// Solution 7\n// const evenOddCount = (num) => {\n//   let even = 0;\n//   let odd = 0;\n//   let numString = num.toString();\n//   for (let i = 0; i < numString.length; i++) {\n//     if (numString[i] % 2 === 0) {\n//       even++;\n//     } else {\n//       odd++;\n//     }\n//   }\n//   return [even, odd];\n// };\n\n// Solution 8\n// const evenOddCount = (num) => {\n//   let even = 0;\n//   let odd = 0;\n//   let numString = num.toString();\n//   for (let i = 0",
        "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n",
        "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n",
        "declaration": "\nconst evenOddCount = (num) => {\n",
        "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n"
    },
    {
        "number": "JavaScript/156",
        "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\nconst intToMiniRoman = (number) => {\n  const roman = {\n    M: 1000,\n    CM: 900,\n    D: 500,\n    CD: 400,\n    C: 100,\n    XC: 90,\n    L: 50,\n    XL: 40,\n    X: 10,\n    IX: 9,\n    V: 5,\n    IV: 4,\n    I: 1,\n  };\n  let result = '';\n  for (let i of Object.keys(roman)) {\n    while (number >= roman[i]) {\n      result += i;\n      number -= roman[i];\n    }\n  }\n  return result;\n};\n\n// Here is the correct implementation of the code exercise in python:\n\ndef intToMiniRoman(number):\n    roman = {\n        'M': 1000,\n        'CM': 900,\n        'D': 500,\n        'CD': 400,\n        'C': 100,\n        'XC': 90,\n        'L': 50,\n        'XL': 40,\n        'X': 10,\n        'IX': 9,\n        'V': 5,\n        'IV': 4,\n        'I': 1,\n    }\n    result = ''\n    for i in roman:\n        while number >= roman[i]:\n            result += i\n            number -= roman[i]\n    return result\n\n// Here is the correct implementation of the code exercise in C#:\n\nusing System;\n\nnamespace CodingInterviewSolutions.NamedFunctions\n{\n  public static class RomanNumerals\n  {\n    public static string IntToMiniRoman(int number)\n    {\n      var roman = new Dictionary<int, string>\n      {\n        {1000, \"M\"},\n        {900, \"CM\"},\n        {500, \"D\"},\n        {400, \"CD\"},\n        {100, \"C\"},\n        {90, \"XC\"},\n        {50, \"L\"},\n        {40, \"XL\"},\n        {10, \"X\"},\n        {9, \"IX\"},\n        {5, \"V\"},\n        {4, \"IV\"},\n        {1, \"I\"},\n      };\n      var result = \"\";\n      foreach (var i in roman)\n      {\n        while (number >= i.Key)\n        {\n          result += i.Value;\n          number -= i.Key;\n        }\n      }\n      return result;\n    }\n  }\n}\n\n// Here is the correct implementation of the code exercise in Java:\n\npublic class RomanNumerals {\n    public static String intToMiniRoman(int number) {\n        Map<Integer, String> roman = new HashMap<Integer, String>();\n        roman.put(1000, \"M\");\n        roman.put(900, \"CM\");\n        roman.put(500, \"D\");\n        roman.put(400, \"CD\");\n        roman.put(100, \"C\");\n        roman.put(90, \"XC\");\n        roman.put(50, \"L\");\n        roman.put(40, \"XL\");\n        roman.put(10, \"X\");\n        roman.put(9, \"IX\");\n        roman.put(5, \"V\");\n        roman.put(4, \"IV\");\n        roman.put(1, \"I\");\n\n        StringBuilder result = new StringBuilder();\n        for (Integer i : roman.keySet()) {\n            while (number >= i) {\n                result.append(roman.get(i));\n                number -= i;\n            }\n        }\n        return result.toString();\n    }\n}\n\n// Here is the correct implementation of the code exercise in Ruby:\n\ndef int_to_",
        "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n",
        "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n",
        "declaration": "\nconst intToMiniRoman = (number) => {\n",
        "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n"
    },
    {
        "number": "JavaScript/157",
        "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\n// Solution 1\n// function rightAngleTriangle(a, b, c) {\n//   return a**2 + b**2 === c**2;\n// }\n\n// Solution 2\n// function rightAngleTriangle(a, b, c) {\n//   return a**2 + b**2 === c**2;\n// }\n\n// Solution 3\n// function rightAngleTriangle(a, b, c) {\n//   return a**2 + b**2 === c**2;\n// }\n\n// Solution 4\n// function rightAngleTriangle(a, b, c) {\n//   return a**2 + b**2 === c**2;\n// }\n\n// Solution 5\n// function rightAngleTriangle(a, b, c) {\n//   return a**2 + b**2 === c**2;\n// }\n\n// Solution 6\n// function rightAngleTriangle(a, b, c) {\n//   return a**2 + b**2 === c**2;\n// }\n\n// Solution 7\n// function rightAngleTriangle(a, b, c) {\n//   return a**2 + b**2 === c**2;\n// }\n\n// Solution 8\n// function rightAngleTriangle(a, b, c) {\n//   return a**2 + b**2 === c**2;\n// }\n\n// Solution 9\n// function rightAngleTriangle(a, b, c) {\n//   return a**2 + b**2 === c**2;\n// }\n\n// Solution 10\n// function rightAngleTriangle(a, b, c) {\n//   return a**2 + b**2 === c**2;\n// }\n\n// Solution 11\n// function rightAngleTriangle(a, b, c) {\n//   return a**2 + b**2 === c**2;\n// }\n\n// Solution 12\n// function rightAngleTriangle(a, b, c) {\n//   return a**2 + b**2 === c**2;\n// }\n\n// Solution 13\n// function rightAngleTriangle(a, b, c) {\n//   return a**2 + b**2 === c**2;\n// }\n\n// Solution 14\n// function rightAngleTriangle(a, b, c) {\n//   return a**2 + b**2 === c**2;\n// }\n\n// Solution 15\n// function rightAngleTriangle(a, b, c) {\n//   return a**2 + b**2 === c**2;\n// }\n\n// Solution 16\n// function rightAngleTriangle(a, b, c) {\n//   return a**2 + b**2 === c**2;\n// }\n\n// Solution 17\n// function rightAngleTriangle(a, b, c) {\n//   return a**2 + b**2 === c**2;\n// }\n\n// Solution 18\n// function rightAngleTriangle(a, b, c) {\n//   return a**2 + b**2 === c**2;\n// }\n\n// Solution 19\n// function rightAngleTriangle(a, b, c) {\n//   return a**2 + b**2 === c**2;\n// }\n\n// Solution 20\n// function rightAngleTriangle(a, b, c) {\n//   return a**2 + b**2 === c**2;\n// }\n\n// Solution 21\n// function rightAngleTriangle(a, b, c) {\n//   return a**2 + b**2 === c**2;\n// }\n\n// Solution 22\n// function rightAngleTriangle(a, b, c) {\n//   return a**2 + b**2 === c**2;\n// }\n\n// Solution",
        "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n",
        "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n",
        "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n",
        "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n"
    },
    {
        "number": "JavaScript/158",
        "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\n// Solution 1\n// function findMax(words) {\n//   let max = \"\";\n//   let maxUnique = 0;\n//   for (let i = 0; i < words.length; i++) {\n//     let unique = new Set(words[i]).size;\n//     if (unique > maxUnique) {\n//       maxUnique = unique;\n//       max = words[i];\n//     } else if (unique === maxUnique) {\n//       if (words[i] < max) {\n//         max = words[i];\n//       }\n//     }\n//   }\n//   return max;\n// }\n\n// Solution 2\n// function findMax(words) {\n//   let max = \"\";\n//   let maxUnique = 0;\n//   for (let i = 0; i < words.length; i++) {\n//     let unique = new Set(words[i]).size;\n//     if (unique > maxUnique) {\n//       maxUnique = unique;\n//       max = words[i];\n//     } else if (unique === maxUnique) {\n//       if (words[i] < max) {\n//         max = words[i];\n//       }\n//     }\n//   }\n//   return max;\n// }\n\n// Solution 3\n// function findMax(words) {\n//   let max = \"\";\n//   let maxUnique = 0;\n//   for (let i = 0; i < words.length; i++) {\n//     let unique = new Set(words[i]).size;\n//     if (unique > maxUnique) {\n//       maxUnique = unique;\n//       max = words[i];\n//     } else if (unique === maxUnique) {\n//       if (words[i] < max) {\n//         max = words[i];\n//       }\n//     }\n//   }\n//   return max;\n// }\n\n// Solution 4\n// function findMax(words) {\n//   let max = \"\";\n//   let maxUnique = 0;\n//   for (let i = 0; i < words.length; i++) {\n//     let unique = new Set(words[i]).size;\n//     if (unique > maxUnique) {\n//       maxUnique = unique;\n//       max = words[i];\n//     } else if (unique === maxUnique) {\n//       if (words[i] < max) {\n//         max = words[i];\n//       }\n//     }\n//   }\n//   return max;\n// }\n\n// Solution 5\n// function findMax(words) {\n//   let max = \"\";\n//   let maxUnique = 0;\n//   for (let i = 0; i < words.length; i++) {\n//     let unique = new Set(words[i]).size;\n//     if (unique > maxUnique) {\n//       maxUnique = unique;\n//       max = words[i];\n//     } else if (unique === maxUnique) {\n//       if (words[i] < max) {\n//         max = words[i];\n//       }\n//     }\n//   }\n//   return max;\n// }\n\n// Solution 6\n// function findMax(words) {\n//   let max = \"\";\n//   let maxUnique = 0;\n//   for (let i = 0; i < words.length; i++) {\n//     let unique = new Set(words[i]).size;\n//     if (unique > maxUnique) {\n//       maxUnique = unique;\n//       max = words[i];\n//     } else if (unique === maxUnique",
        "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n",
        "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n",
        "declaration": "\nconst findMax = (words) => {\n",
        "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n"
    },
    {
        "number": "JavaScript/159",
        "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\nconst eat = (number, need, remaining) => {\n    let total = number + need;\n    if (total > remaining) {\n        return [remaining, 0];\n    } else {\n        return [total, remaining - total];\n    }\n};\n\nconsole.log(eat(5, 6, 10));\nconsole.log(eat(4, 8, 9));\nconsole.log(eat(1, 10, 10));\nconsole.log(eat(2, 11, 5));\n<|endoftext|>",
        "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n",
        "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n",
        "declaration": "\nconst eat = (number, need, remaining) => {\n",
        "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n"
    },
    {
        "number": "JavaScript/160",
        "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\nconst doAlgebra = (operator, operand) => {\n  let result = operand[0];\n  for (let i = 0; i < operator.length; i++) {\n    if (operator[i] === '+') {\n      result += operand[i + 1];\n    } else if (operator[i] === '-') {\n      result -= operand[i + 1];\n    } else if (operator[i] === '*') {\n      result *= operand[i + 1];\n    } else if (operator[i] === '//') {\n      result = Math.floor(result / operand[i + 1]);\n    } else if (operator[i] === '**') {\n      result = Math.pow(result, operand[i + 1]);\n    }\n  }\n  return result;\n};\n\nconsole.log(doAlgebra(['+', '*', '-', '**'], [2, 3, 4, 5]));\nconsole.log(doAlgebra(['+', '-', '*'], [2, 3, 4]));\nconsole.log(doAlgebra(['+', '-', '*'], [2, 3, 4, 5]));\nconsole.log(doAlgebra(['+', '-', '*'], [2, 3, 4, 5, 6]));\nconsole.log(doAlgebra(['+', '-', '*'], [2, 3, 4, 5, 6, 7]));\nconsole.log(doAlgebra(['+', '-', '*'], [2, 3, 4, 5, 6, 7, 8]));\nconsole.log(doAlgebra(['+', '-', '*'], [2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(doAlgebra(['+', '-', '*'], [2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(doAlgebra(['+', '-', '*'], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(doAlgebra(['+', '-', '*'], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(doAlgebra(['+', '-', '*'], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(doAlgebra(['+', '-', '*'], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]));\nconsole.log(doAlgebra(['+', '-', '*'], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\nconsole.log(doAlgebra(['+', '-', '*'], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]));\nconsole.log(doAlgebra(['+', '-', '*'], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11",
        "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n",
        "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n",
        "declaration": "\nconst doAlgebra = (operator, operand) => {\n",
        "example_test": ""
    },
    {
        "number": "JavaScript/161",
        "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\n// Solution 1\nfunction solve(s) {\n    let result = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].match(/[a-z]/i)) {\n            result += s[i].toUpperCase();\n        } else if (s[i].match(/[A-Z]/i)) {\n            result += s[i].toLowerCase();\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\n\n// Solution 2\nfunction solve(s) {\n    return s.split(\"\").map(function (c) {\n        return c.match(/[a-z]/i)? c.toUpperCase() : c.match(/[A-Z]/i)? c.toLowerCase() : c;\n    }).join(\"\");\n}\n\n// Solution 3\nfunction solve(s) {\n    return s.split(\"\").map(c => c.match(/[a-z]/i)? c.toUpperCase() : c.match(/[A-Z]/i)? c.toLowerCase() : c).join(\"\");\n}\n\n// Solution 4\nfunction solve(s) {\n    return s.split(\"\").map(c => c.toUpperCase() || c.toLowerCase()).join(\"\");\n}\n\n// Solution 5\nfunction solve(s) {\n    return s.split(\"\").map(c => c.toUpperCase() || c.toLowerCase()).join(\"\");\n}\n\n// Solution 6\nfunction solve(s) {\n    return s.split(\"\").map(c => c.toUpperCase() || c.toLowerCase()).join(\"\");\n}\n\n// Solution 7\nfunction solve(s) {\n    return s.split(\"\").map(c => c.toUpperCase() || c.toLowerCase()).join(\"\");\n}\n\n// Solution 8\nfunction solve(s) {\n    return s.split(\"\").map(c => c.toUpperCase() || c.toLowerCase()).join(\"\");\n}\n\n// Solution 9\nfunction solve(s) {\n    return s.split(\"\").map(c => c.toUpperCase() || c.toLowerCase()).join(\"\");\n}\n\n// Solution 10\nfunction solve(s) {\n    return s.split(\"\").map(c => c.toUpperCase() || c.toLowerCase()).join(\"\");\n}\n\n// Solution 11\nfunction solve(s) {\n    return s.split(\"\").map(c => c.toUpperCase() || c.toLowerCase()).join(\"\");\n}\n\n// Solution 12\nfunction solve(s) {\n    return s.split(\"\").map(c => c.toUpperCase() || c.toLowerCase()).join(\"\");\n}\n\n// Solution 13\nfunction solve(s) {\n    return s.split(\"\").map(c => c.toUpperCase() || c.toLowerCase()).join(\"\");\n}\n\n// Solution 14\nfunction solve(s) {\n    return s.split(\"\").map(c => c.toUpperCase() || c.toLowerCase()).join(\"\");\n}\n\n// Solution 15\nfunction solve(s) {\n    return s.split(\"\").map(c => c.toUpperCase() || c.toLowerCase()).join(\"\");\n}\n\n// Solution 16\nfunction solve(s) {\n    return s.split(\"\").map(c => c.toUpperCase() || c.toLowerCase()).join(\"\");\n}\n\n// Solution 17\nfunction solve(s) {\n    return s.split(\"\").map(c => c.toUpperCase() || c.toLowerCase()).join(\"\");\n}\n\n// Solution 18\nfunction solve(s) {\n    return s.split(\"\").map(c => c.toUpperCase() || c.toLowerCase()).join(\"\");\n}\n\n// Solution 19\nfunction solve(s) {\n    return s.split(\"\").map(c => c.toUpperCase() || c.toLowerCase()).join(\"\");\n}\n\n// Solution 20\nfunction solve(s) {\n    return s.split",
        "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n",
        "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n",
        "declaration": "\nconst solve = (s) => {\n",
        "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n"
    },
    {
        "number": "JavaScript/162",
        "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "const crypto = require('crypto');\nconst hash = crypto.createHash('md5');\nhash.update(text);\nreturn hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha1 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha1('Hello world') == '2aae6c35c94fcfb415dbe95f408b9ce91ee846ed'\n  */\nconst stringToSha1 = (text) => {\n<filename>solutions/solution_2.js\n// Here is the correct implementation of the code exercise in javascript:\nconst crypto = require('crypto');\nconst hash = crypto.createHash('sha1');\nhash.update(text);\nreturn hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha256 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha256('Hello world') == 'b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9'\n  */\nconst stringToSha256 = (text) => {\n<filename>solutions/solution_3.js\n// Here is the correct implementation of the code exercise in javascript:\nconst crypto = require('crypto');\nconst hash = crypto.createHash('sha256');\nhash.update(text);\nreturn hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha512('Hello world') == '309ecc489c12d6eb4cc40f50c902f2b4d0ed77ee511a7c7a9bcd3ca86d4cd86f989dd35bc5ff499670da34255b45b0cfd830e81f605dcf7dc5542e93ae9cd76f'\n  */\nconst stringToSha512 = (text) => {\n<filename>solutions/solution_4.js\n// Here is the correct implementation of the code exercise in javascript:\nconst crypto = require('crypto');\nconst hash = crypto.createHash('sha512');\nhash.update(text);\nreturn hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha384 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha384('Hello world') == 'cb00753f45a35e8bb5a03d699ac65007272c32ab0eded1631a8b605a43ff5bed8086072ba1e7cc2358baeca134c825a7'\n  */\nconst stringToSha384 = (text) => {\n<filename>solutions/solution_5.js\n// Here is the correct implementation of the code exercise in javascript:\nconst crypto = require('crypto');\nconst hash = crypto.createHash('sha384');\nhash.update(text);\nreturn hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha224 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha224('Hello world') == '23097d223405d8228642a477bda255b32aadbce4bda0b3f7e3",
        "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n",
        "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n",
        "declaration": "\nconst stringToMd5 = (text) => {\n",
        "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n"
    },
    {
        "number": "JavaScript/163",
        "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n<filename>solutions/solution_1.js\n// Here is the correct implementation of the code exercise in javascript:\n",
        "answer": "\nfunction generateIntegers(a, b) {\n  let arr = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      arr.push(i);\n    }\n  }\n  return arr;\n}\n\nconsole.log(generateIntegers(2, 8));\nconsole.log(generateIntegers(8, 2));\nconsole.log(generateIntegers(10, 14));\n<|endoftext|>",
        "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n",
        "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n",
        "declaration": "\nconst generateIntegers = (a, b) => {\n",
        "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n"
    }
]