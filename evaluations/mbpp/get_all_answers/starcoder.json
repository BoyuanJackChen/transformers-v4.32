[
    {
        "task_id": 1,
        "prompt": "Write a python function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].\n\ndef min_cost(cost, m, n): \n",
        "answer": "def min_cost(cost, m, n): \n\t# code here \n\tif m == 0 or n == 0: \n\t\treturn cost[m][n] \n\tif cost[m][n]!= -1: \n\t\treturn cost[m][n] \n\tcost[m][n] = cost[m][n] + min(min_cost(cost, m - 1, n - 1), \n\t\t\t\t\t\t\t\tmin_cost(cost, m - 1, n), \n\t\t\t\t\t\t\t\tmin_cost(cost, m, n - 1)) \n\treturn cost[m][n] \n\n",
        "test_list": [
            "assert min_cost([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2) == 8",
            "assert min_cost([[2, 3, 4], [5, 9, 3], [2, 6, 4]], 2, 2) == 12",
            "assert min_cost([[3, 4, 5], [6, 10, 4], [3, 7, 5]], 2, 2) == 16"
        ],
        "answer_list": [
            "\t",
            "#",
            " code",
            " here",
            " \n",
            "\t",
            "if",
            " m",
            " ==",
            " ",
            "0",
            " or",
            " n",
            " ==",
            " ",
            "0",
            ":",
            " \n\t",
            "\t",
            "return",
            " cost",
            "[",
            "m",
            "][",
            "n",
            "]",
            " \n",
            "\t",
            "if",
            " cost",
            "[",
            "m",
            "][",
            "n",
            "]",
            "!=",
            " -",
            "1",
            ":",
            " \n\t",
            "\t",
            "return",
            " cost",
            "[",
            "m",
            "][",
            "n",
            "]",
            " \n",
            "\t",
            "cost",
            "[",
            "m",
            "][",
            "n",
            "]",
            " =",
            " cost",
            "[",
            "m",
            "][",
            "n",
            "]",
            " +",
            " min",
            "(",
            "min",
            "_",
            "cost",
            "(",
            "cost",
            ",",
            " m",
            " -",
            " ",
            "1",
            ",",
            " n",
            " -",
            " ",
            "1",
            "),",
            " \n\t\t\t\t\t\t\t",
            "\t",
            "min",
            "_",
            "cost",
            "(",
            "cost",
            ",",
            " m",
            " -",
            " ",
            "1",
            ",",
            " n",
            "),",
            " \n\t\t\t\t\t\t\t",
            "\t",
            "min",
            "_",
            "cost",
            "(",
            "cost",
            ",",
            " m",
            ",",
            " n",
            " -",
            " ",
            "1",
            "))",
            " \n",
            "\t",
            "return",
            " cost",
            "[",
            "m",
            "][",
            "n",
            "]",
            " \n",
            "\n",
            "#"
        ]
    },
    {
        "task_id": 1,
        "prompt": "Write a python function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].\n\ndef min_cost(cost, m, n): \n",
        "answer": "def min_cost(cost, m, n): \n\t# code here \n\tif m == 0 or n == 0: \n\t\treturn cost[m][n] \n\tif cost[m][n]!= -1: \n\t\treturn cost[m][n] \n\tcost[m][n] = cost[m][n] + min(min_cost(cost, m - 1, n - 1), \n\t\t\t\t\t\t\t\tmin_cost(cost, m - 1, n), \n\t\t\t\t\t\t\t\tmin_cost(cost, m, n - 1)) \n\treturn cost[m][n] \n\n",
        "test_list": [
            "assert min_cost([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2) == 8",
            "assert min_cost([[2, 3, 4], [5, 9, 3], [2, 6, 4]], 2, 2) == 12",
            "assert min_cost([[3, 4, 5], [6, 10, 4], [3, 7, 5]], 2, 2) == 16"
        ],
        "answer_list": [
            "\t",
            "#",
            " code",
            " here",
            " \n",
            "\t",
            "if",
            " m",
            " ==",
            " ",
            "0",
            " or",
            " n",
            " ==",
            " ",
            "0",
            ":",
            " \n\t",
            "\t",
            "return",
            " cost",
            "[",
            "m",
            "][",
            "n",
            "]",
            " \n",
            "\t",
            "if",
            " cost",
            "[",
            "m",
            "][",
            "n",
            "]",
            "!=",
            " -",
            "1",
            ":",
            " \n\t",
            "\t",
            "return",
            " cost",
            "[",
            "m",
            "][",
            "n",
            "]",
            " \n",
            "\t",
            "cost",
            "[",
            "m",
            "][",
            "n",
            "]",
            " =",
            " cost",
            "[",
            "m",
            "][",
            "n",
            "]",
            " +",
            " min",
            "(",
            "min",
            "_",
            "cost",
            "(",
            "cost",
            ",",
            " m",
            " -",
            " ",
            "1",
            ",",
            " n",
            " -",
            " ",
            "1",
            "),",
            " \n\t\t\t\t\t\t\t",
            "\t",
            "min",
            "_",
            "cost",
            "(",
            "cost",
            ",",
            " m",
            " -",
            " ",
            "1",
            ",",
            " n",
            "),",
            " \n\t\t\t\t\t\t\t",
            "\t",
            "min",
            "_",
            "cost",
            "(",
            "cost",
            ",",
            " m",
            ",",
            " n",
            " -",
            " ",
            "1",
            "))",
            " \n",
            "\t",
            "return",
            " cost",
            "[",
            "m",
            "][",
            "n",
            "]",
            " \n",
            "\n",
            "#"
        ]
    },
    {
        "task_id": 2,
        "prompt": "Write a python function to find the similar elements from the given two tuple lists.\n\ndef similar_elements(test_tup1, test_tup2):\n",
        "answer": "def similar_elements(test_tup1, test_tup2):\n\treturn [x for x in test_tup1 if x in test_tup2]\n\n",
        "test_list": [
            "assert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)",
            "assert similar_elements((1, 2, 3, 4),(5, 4, 3, 7)) == (3, 4)",
            "assert similar_elements((11, 12, 14, 13),(17, 15, 14, 13)) == (13, 14)"
        ],
        "answer_list": [
            "\t",
            "return",
            " [",
            "x",
            " for",
            " x",
            " in",
            " test",
            "_",
            "tup",
            "1",
            " if",
            " x",
            " in",
            " test",
            "_",
            "tup",
            "2",
            "]",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 3,
        "prompt": "Write a python function to identify non-prime numbers.\n\ndef is_not_prime(n):\n",
        "answer": "def is_not_prime(n):\n\tfor i in range(2, n):\n\t\tif n % i == 0:\n\t\t\treturn False\n\treturn True\n\n",
        "test_list": [
            "assert is_not_prime(2) == False",
            "assert is_not_prime(10) == True",
            "assert is_not_prime(35) == True"
        ],
        "answer_list": [
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "2",
            ",",
            " n",
            "):",
            "\n\t",
            "\t",
            "if",
            " n",
            " %",
            " i",
            " ==",
            " ",
            "0",
            ":",
            "\n\t\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "return",
            " True",
            "\n",
            "\n",
            "def"
        ]
    },
    {
        "task_id": 4,
        "prompt": "Write a python function to find the largest integers from a given list of numbers using heap queue algorithm.\n\ndef heap_queue_largest(nums,n):\n",
        "answer": "def heap_queue_largest(nums,n):\n\theapq.heapify(nums)\n\tfor i in range(n-1):\n\t\theapq.heappop(nums)\n\treturn heapq.heappop(nums)\n\n",
        "test_list": [
            "assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] ",
            "assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],2)==[85, 75] ",
            "assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[85, 75, 65, 58, 35]"
        ],
        "answer_list": [
            "\t",
            "heap",
            "q",
            ".",
            "heap",
            "ify",
            "(",
            "nums",
            ")",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "n",
            "-",
            "1",
            "):",
            "\n\t",
            "\t",
            "heap",
            "q",
            ".",
            "he",
            "app",
            "op",
            "(",
            "nums",
            ")",
            "\n",
            "\t",
            "return",
            " heap",
            "q",
            ".",
            "he",
            "app",
            "op",
            "(",
            "nums",
            ")",
            "\n",
            "\n",
            "nums"
        ]
    },
    {
        "task_id": 5,
        "prompt": "Write a python function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.\n\ndef count_ways(n): \n",
        "answer": "def count_ways(n): \n\tif n == 0: \n\t\treturn 0\n\tif n == 1: \n\t\treturn 1\n\tif n == 2: \n\t\treturn 2\n\treturn count_ways(n-1) + count_ways(n-2) \n\n",
        "test_list": [
            "assert count_ways(2) == 3",
            "assert count_ways(8) == 153",
            "assert count_ways(12) == 2131"
        ],
        "answer_list": [
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "0",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "0",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "1",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "1",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "2",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "2",
            "\n",
            "\t",
            "return",
            " count",
            "_",
            "ways",
            "(",
            "n",
            "-",
            "1",
            ")",
            " +",
            " count",
            "_",
            "ways",
            "(",
            "n",
            "-",
            "2",
            ")",
            " \n",
            "\n",
            "n"
        ]
    },
    {
        "task_id": 6,
        "prompt": "Write a python function to check whether the two numbers differ at one bit position only or not.\n\ndef differ_At_One_Bit_Pos(a,b): \n",
        "answer": "def differ_At_One_Bit_Pos(a,b): \n\treturn (a^b) & (a^b-1) == 0\n\n",
        "test_list": [
            "assert differ_At_One_Bit_Pos(13,9) == True",
            "assert differ_At_One_Bit_Pos(15,8) == False",
            "assert differ_At_One_Bit_Pos(2,4) == False"
        ],
        "answer_list": [
            "\t",
            "return",
            " (",
            "a",
            "^",
            "b",
            ")",
            " &",
            " (",
            "a",
            "^",
            "b",
            "-",
            "1",
            ")",
            " ==",
            " ",
            "0",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 7,
        "prompt": "Write a python function to find all words which are at least 4 characters long in a string by using regex.\n\ndef find_char_long(text):\n",
        "answer": "def find_char_long(text):\n\treturn re.findall(r'\\w{4,}', text)\n\n",
        "test_list": [
            "assert find_char_long('Please move back to stream') == ['Please', 'move', 'back', 'stream']",
            "assert find_char_long('Jing Eco and Tech') == ['Jing', 'Tech']",
            "assert find_char_long('Jhingai wulu road Zone 3') == ['Jhingai', 'wulu', 'road', 'Zone']"
        ],
        "answer_list": [
            "\t",
            "return",
            " re",
            ".",
            "findall",
            "(",
            "r",
            "'\\",
            "w",
            "{",
            "4",
            ",",
            "}',",
            " text",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 8,
        "prompt": "Write a python function to find squares of individual elements in a list using lambda function.\n\ndef square_nums(nums):\n",
        "answer": "def square_nums(nums):\n\treturn list(map(lambda x: x**2, nums))\n\n",
        "test_list": [
            "assert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]",
            "assert square_nums([10,20,30])==([100,400,900])",
            "assert square_nums([12,15])==([144,225])"
        ],
        "answer_list": [
            "\t",
            "return",
            " list",
            "(",
            "map",
            "(",
            "lambda",
            " x",
            ":",
            " x",
            "**",
            "2",
            ",",
            " nums",
            "))",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 9,
        "prompt": "Write a python function to find the minimum number of rotations required to get the same string.\n\ndef find_Rotations(str): \n",
        "answer": "def find_Rotations(str): \n\tn = len(str) \n\tcount = 0\n\tfor i in range(n): \n\t\tif (str[i] == str[0]): \n\t\t\tcount = 0\n\t\telse: \n\t\t\tcount += 1\n\treturn count \n\n",
        "test_list": [
            "assert find_Rotations(\"aaaa\") == 1",
            "assert find_Rotations(\"ab\") == 2",
            "assert find_Rotations(\"abc\") == 3"
        ],
        "answer_list": [
            "\t",
            "n",
            " =",
            " len",
            "(",
            "str",
            ")",
            " \n",
            "\t",
            "count",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "n",
            "):",
            " \n\t",
            "\t",
            "if",
            " (",
            "str",
            "[",
            "i",
            "]",
            " ==",
            " str",
            "[",
            "0",
            "]):",
            " \n\t\t",
            "\t",
            "count",
            " =",
            " ",
            "0",
            "\n\t",
            "\t",
            "else",
            ":",
            " \n\t\t",
            "\t",
            "count",
            " +=",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " count",
            " \n",
            "\n",
            "str"
        ]
    },
    {
        "task_id": 10,
        "prompt": "Write a python function to get the n smallest items from a dataset.\n\ndef small_nnum(list1,n):\n",
        "answer": "def small_nnum(list1,n):\n\tlist1.sort()\n\treturn list1[:n]\n\n",
        "test_list": [
            "assert small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[10,20]",
            "assert small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)==[10,20,20,40,50]",
            "assert small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)==[10,20,20]"
        ],
        "answer_list": [
            "\t",
            "list",
            "1",
            ".",
            "sort",
            "()",
            "\n",
            "\t",
            "return",
            " list",
            "1",
            "[:",
            "n",
            "]",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 11,
        "prompt": "Write a python function to remove first and last occurrence of a given character from the string.\n\ndef remove_Occ(s,ch): \n",
        "answer": "def remove_Occ(s,ch): \n\tif ch in s: \n\t\treturn s[:s.index(ch)] + s[s.index(ch)+1:] \n\telse: \n\t\treturn s\n\n",
        "test_list": [
            "assert remove_Occ(\"hello\",\"l\") == \"heo\"",
            "assert remove_Occ(\"abcda\",\"a\") == \"bcd\"",
            "assert remove_Occ(\"PHP\",\"P\") == \"H\""
        ],
        "answer_list": [
            "\t",
            "if",
            " ch",
            " in",
            " s",
            ":",
            " \n\t",
            "\t",
            "return",
            " s",
            "[:",
            "s",
            ".",
            "index",
            "(",
            "ch",
            ")]",
            " +",
            " s",
            "[",
            "s",
            ".",
            "index",
            "(",
            "ch",
            ")+",
            "1",
            ":]",
            " \n",
            "\t",
            "else",
            ":",
            " \n\t",
            "\t",
            "return",
            " s",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 12,
        "prompt": "Write a python function to sort a given matrix in ascending order according to the sum of its rows.\n\ndef sort_matrix(M):\n",
        "answer": "def sort_matrix(M):\n\treturn sorted(M, key=sum)\n\n",
        "test_list": [
            "assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]",
            "assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]",
            "assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]"
        ],
        "answer_list": [
            "\t",
            "return",
            " sorted",
            "(",
            "M",
            ",",
            " key",
            "=",
            "sum",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 13,
        "prompt": "Write a python function to count the most common words in a dictionary.\n\ndef count_common(words):\n",
        "answer": "def count_common(words):\n\tword_count = {}\n\tfor word in words:\n\t\tif word in word_count:\n\t\t\tword_count[word] += 1\n\t\telse:\n\t\t\tword_count[word] = 1\n\treturn word_count\n\n",
        "test_list": [
            "assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]",
            "assert count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]",
            "assert count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]"
        ],
        "answer_list": [
            "\t",
            "word",
            "_",
            "count",
            " =",
            " {}",
            "\n",
            "\t",
            "for",
            " word",
            " in",
            " words",
            ":",
            "\n\t",
            "\t",
            "if",
            " word",
            " in",
            " word",
            "_",
            "count",
            ":",
            "\n\t\t",
            "\t",
            "word",
            "_",
            "count",
            "[",
            "word",
            "]",
            " +=",
            " ",
            "1",
            "\n\t",
            "\t",
            "else",
            ":",
            "\n\t\t",
            "\t",
            "word",
            "_",
            "count",
            "[",
            "word",
            "]",
            " =",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " word",
            "_",
            "count",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 14,
        "prompt": "Write a python function to find the volume of a triangular prism.\n\ndef find_Volume(l,b,h) : \n",
        "answer": "def find_Volume(l,b,h) : \n\treturn (1/3)*l*b*h\n\n",
        "test_list": [
            "assert find_Volume(10,8,6) == 240",
            "assert find_Volume(3,2,2) == 6",
            "assert find_Volume(1,2,1) == 1"
        ],
        "answer_list": [
            "\t",
            "return",
            " (",
            "1",
            "/",
            "3",
            ")*",
            "l",
            "*",
            "b",
            "*",
            "h",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 15,
        "prompt": "Write a python function to split a string at lowercase letters.\n\ndef split_lowerstring(text):\n",
        "answer": "def split_lowerstring(text):\n\treturn text.split(' ')\n\n",
        "test_list": [
            "assert split_lowerstring(\"AbCd\")==['bC','d']",
            "assert split_lowerstring(\"Python\")==['y', 't', 'h', 'o', 'n']",
            "assert split_lowerstring(\"Programming\")==['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']"
        ],
        "answer_list": [
            "\t",
            "return",
            " text",
            ".",
            "split",
            "('",
            " ')",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 16,
        "prompt": "Write a python function to find sequences of lowercase letters joined with an underscore.\n\ndef text_lowercase_underscore(text):\n",
        "answer": "def text_lowercase_underscore(text):\n\treturn re.findall(r'[a-z]+_[a-z]+', text)\n\n",
        "test_list": [
            "assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')",
            "assert text_lowercase_underscore(\"aab_Abbbc\")==('Not matched!')",
            "assert text_lowercase_underscore(\"Aaab_abbbc\")==('Not matched!')"
        ],
        "answer_list": [
            "\t",
            "return",
            " re",
            ".",
            "findall",
            "(",
            "r",
            "'[",
            "a",
            "-",
            "z",
            "]+",
            "_[",
            "a",
            "-",
            "z",
            "]+",
            "',",
            " text",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 17,
        "prompt": "Write a python function to find the perimeter of a square.\n\ndef square_perimeter(a):\n",
        "answer": "def square_perimeter(a):\n\treturn 4*a\n\n",
        "test_list": [
            "assert square_perimeter(10)==40",
            "assert square_perimeter(5)==20",
            "assert square_perimeter(4)==16"
        ],
        "answer_list": [
            "\t",
            "return",
            " ",
            "4",
            "*",
            "a",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 18,
        "prompt": "Write a python function to remove characters from the first string which are present in the second string.\n\ndef remove_dirty_chars(string, second_string): \n",
        "answer": "def remove_dirty_chars(string, second_string): \n\treturn string.translate(None, second_string)\n\n",
        "test_list": [
            "assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'",
            "assert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'",
            "assert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles' "
        ],
        "answer_list": [
            "\t",
            "return",
            " string",
            ".",
            "translate",
            "(",
            "None",
            ",",
            " second",
            "_",
            "string",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 19,
        "prompt": "Write a python function to find whether a given array of integers contains any duplicate element.\n\ndef test_duplicate(arraynums):\n",
        "answer": "def test_duplicate(arraynums):\n\tfor i in range(len(arraynums)):\n\t\tfor j in range(i+1,len(arraynums)):\n\t\t\tif arraynums[i] == arraynums[j]:\n\t\t\t\treturn True\n\treturn False\n\n",
        "test_list": [
            "assert test_duplicate(([1,2,3,4,5]))==False",
            "assert test_duplicate(([1,2,3,4, 4]))==True",
            "assert test_duplicate([1,1,2,2,3,3,4,4,5])==True"
        ],
        "answer_list": [
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "len",
            "(",
            "array",
            "nums",
            ")):",
            "\n\t",
            "\t",
            "for",
            " j",
            " in",
            " range",
            "(",
            "i",
            "+",
            "1",
            ",",
            "len",
            "(",
            "array",
            "nums",
            ")):",
            "\n\t\t",
            "\t",
            "if",
            " array",
            "nums",
            "[",
            "i",
            "]",
            " ==",
            " array",
            "nums",
            "[",
            "j",
            "]:",
            "\n\t\t\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "return",
            " False",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 20,
        "prompt": "Write a python function to check if the given number is woodball or not.\n\ndef is_woodall(x): \n",
        "answer": "def is_woodall(x): \n\tif x%2 == 0:\n\t\treturn True\n\telse:\n\t\treturn False\n\n",
        "test_list": [
            "assert is_woodall(383) == True",
            "assert is_woodall(254) == False",
            "assert is_woodall(200) == False"
        ],
        "answer_list": [
            "\t",
            "if",
            " x",
            "%",
            "2",
            " ==",
            " ",
            "0",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 21,
        "prompt": "Write a python function to find m number of multiples of n.\n\ndef multiples_of_num(m,n): \n",
        "answer": "def multiples_of_num(m,n): \n\treturn [i*n for i in range(1,m+1)]\n\n",
        "test_list": [
            "assert multiples_of_num(4,3)== [3,6,9,12]",
            "assert multiples_of_num(2,5)== [5,10]",
            "assert multiples_of_num(9,2)== [2,4,6,8,10,12,14,16,18]"
        ],
        "answer_list": [
            "\t",
            "return",
            " [",
            "i",
            "*",
            "n",
            " for",
            " i",
            " in",
            " range",
            "(",
            "1",
            ",",
            "m",
            "+",
            "1",
            ")]",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 22,
        "prompt": "Write a python function to find the first duplicate element in a given array of integers.\n\ndef find_first_duplicate(nums):\n",
        "answer": "def find_first_duplicate(nums):\n\tfor i in range(len(nums)):\n\t\tif nums[abs(nums[i])-1] < 0:\n\t\t\treturn abs(nums[i])\n\t\telse:\n\t\t\tnums[abs(nums[i])-1] *= -1\n\treturn -1\n\n",
        "test_list": [
            "assert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4",
            "assert find_first_duplicate([1, 2, 3, 4])==-1",
            "assert find_first_duplicate([1, 1, 2, 3, 3, 2, 2])==1"
        ],
        "answer_list": [
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "len",
            "(",
            "nums",
            ")):",
            "\n\t",
            "\t",
            "if",
            " nums",
            "[",
            "abs",
            "(",
            "nums",
            "[",
            "i",
            "])",
            "-",
            "1",
            "]",
            " <",
            " ",
            "0",
            ":",
            "\n\t\t",
            "\t",
            "return",
            " abs",
            "(",
            "nums",
            "[",
            "i",
            "])",
            "\n\t",
            "\t",
            "else",
            ":",
            "\n\t\t",
            "\t",
            "nums",
            "[",
            "abs",
            "(",
            "nums",
            "[",
            "i",
            "])",
            "-",
            "1",
            "]",
            " *=",
            " -",
            "1",
            "\n",
            "\t",
            "return",
            " -",
            "1",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 23,
        "prompt": "Write a python function to find the maximum sum of elements of list in a list of lists.\n\ndef maximum_Sum(list1): \n",
        "answer": "def maximum_Sum(list1): \n\tmax_sum = 0\n\tfor i in range(len(list1)): \n\t\tfor j in range(len(list1[i])): \n\t\t\tmax_sum += list1[i][j] \n\treturn max_sum \n\n",
        "test_list": [
            "assert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33",
            "assert maximum_Sum([[0,1,1],[1,1,2],[3,2,1]]) == 6",
            "assert maximum_Sum([[0,1,3],[1,2,1],[9,8,2],[0,1,0],[6,4,8]]) == 19"
        ],
        "answer_list": [
            "\t",
            "max",
            "_",
            "sum",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "len",
            "(",
            "list",
            "1",
            ")):",
            " \n\t",
            "\t",
            "for",
            " j",
            " in",
            " range",
            "(",
            "len",
            "(",
            "list",
            "1",
            "[",
            "i",
            "]))",
            ":",
            " \n\t\t",
            "\t",
            "max",
            "_",
            "sum",
            " +=",
            " list",
            "1",
            "[",
            "i",
            "][",
            "j",
            "]",
            " \n",
            "\t",
            "return",
            " max",
            "_",
            "sum",
            " \n",
            "\n",
            "list"
        ]
    },
    {
        "task_id": 24,
        "prompt": "Write a python function to convert the given binary number to its decimal equivalent.\n\ndef binary_to_decimal(binary): \n",
        "answer": "def binary_to_decimal(binary): \n\treturn int(binary, 2)\n\n",
        "test_list": [
            "assert binary_to_decimal(100) == 4",
            "assert binary_to_decimal(1011) == 11",
            "assert binary_to_decimal(1101101) == 109"
        ],
        "answer_list": [
            "\t",
            "return",
            " int",
            "(",
            "binary",
            ",",
            " ",
            "2",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 25,
        "prompt": "Write a python function to find the product of non-repeated elements in a given array.\n\ndef find_Product(arr,n): \n",
        "answer": "def find_Product(arr,n): \n\tproduct = 1\n\tfor i in range(n): \n\t\tif arr[i]!= arr[i-1]: \n\t\t\tproduct = product * arr[i] \n\treturn product \n\n",
        "test_list": [
            "assert find_Product([1,1,2,3],4) == 6",
            "assert find_Product([1,2,3,1,1],5) == 6",
            "assert find_Product([1,1,4,5,6],5) == 120"
        ],
        "answer_list": [
            "\t",
            "product",
            " =",
            " ",
            "1",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "n",
            "):",
            " \n\t",
            "\t",
            "if",
            " arr",
            "[",
            "i",
            "]",
            "!=",
            " arr",
            "[",
            "i",
            "-",
            "1",
            "]:",
            " \n\t\t",
            "\t",
            "product",
            " =",
            " product",
            " *",
            " arr",
            "[",
            "i",
            "]",
            " \n",
            "\t",
            "return",
            " product",
            " \n",
            "\n",
            "arr"
        ]
    },
    {
        "task_id": 26,
        "prompt": "Write a python function to check if the given tuple list has all k elements.\n\ndef check_k_elements(test_list, K):\n",
        "answer": "def check_k_elements(test_list, K):\n\tif len(test_list) < K:\n\t\treturn False\n\telse:\n\t\treturn True\n\n",
        "test_list": [
            "assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True",
            "assert check_k_elements([(7, 7, 7), (7, 7)], 7) == True",
            "assert check_k_elements([(9, 9), (9, 9, 9, 9)], 7) == False"
        ],
        "answer_list": [
            "\t",
            "if",
            " len",
            "(",
            "test",
            "_",
            "list",
            ")",
            " <",
            " K",
            ":",
            "\n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 27,
        "prompt": "Write a python function to remove all digits from a list of strings.\n\ndef remove(list): \n",
        "answer": "def remove(list): \n\tfor i in range(len(list)): \n\t\tlist[i] = ''.join(filter(str.isdigit, list[i])) \n\treturn list \n\n",
        "test_list": [
            "assert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']",
            "assert remove(['28Jan','12Jan','11Jan']) == ['Jan','Jan','Jan']",
            "assert remove(['wonder1','wonder2','wonder3']) == ['wonder','wonder','wonder']"
        ],
        "answer_list": [
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "len",
            "(",
            "list",
            ")):",
            " \n\t",
            "\t",
            "list",
            "[",
            "i",
            "]",
            " =",
            " ''.",
            "join",
            "(",
            "filter",
            "(",
            "str",
            ".",
            "isdigit",
            ",",
            " list",
            "[",
            "i",
            "]))",
            " \n",
            "\t",
            "return",
            " list",
            " \n",
            "\n",
            "#"
        ]
    },
    {
        "task_id": 28,
        "prompt": "Write a python function to find binomial co-efficient.\n\ndef binomial_Coeff(n,k): \n",
        "answer": "def binomial_Coeff(n,k): \n\tres = 1\n\tif (k > n - k): \n\t\tk = n - k \n\tfor i in range(k): \n\t\tres = res * (n - i) \n\t\tres = res // (i + 1) \n\treturn res \n\n",
        "test_list": [
            "assert binomial_Coeff(5,2) == 10",
            "assert binomial_Coeff(4,3) == 4",
            "assert binomial_Coeff(3,2) == 3"
        ],
        "answer_list": [
            "\t",
            "res",
            " =",
            " ",
            "1",
            "\n",
            "\t",
            "if",
            " (",
            "k",
            " >",
            " n",
            " -",
            " k",
            "):",
            " \n\t",
            "\t",
            "k",
            " =",
            " n",
            " -",
            " k",
            " \n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "k",
            "):",
            " \n\t",
            "\t",
            "res",
            " =",
            " res",
            " *",
            " (",
            "n",
            " -",
            " i",
            ")",
            " \n\t",
            "\t",
            "res",
            " =",
            " res",
            " //",
            " (",
            "i",
            " +",
            " ",
            "1",
            ")",
            " \n",
            "\t",
            "return",
            " res",
            " \n",
            "\n",
            "#"
        ]
    },
    {
        "task_id": 29,
        "prompt": "Write a python function to find the element occurring odd number of times.\n\ndef get_Odd_Occurrence(arr,arr_size):   \n",
        "answer": "def get_Odd_Occurrence(arr,arr_size):   \n\t# Initialize result \n\tresult = 0\n\t# Traverse through all array elements \n\tfor i in range(0, arr_size): \n\t\t# XOR with the result so far \n\t\tresult = result ^ arr[i] \n\treturn result \n\n",
        "test_list": [
            "assert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1",
            "assert get_Odd_Occurrence([1,2,3,2,3,1,3],7) == 3",
            "assert get_Odd_Occurrence([2,3,5,4,5,2,4,3,5,2,4,4,2],13) == 5"
        ],
        "answer_list": [
            "\t",
            "#",
            " Initialize",
            " result",
            " \n",
            "\t",
            "result",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "#",
            " Tra",
            "verse",
            " through",
            " all",
            " array",
            " elements",
            " \n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "0",
            ",",
            " arr",
            "_",
            "size",
            "):",
            " \n\t",
            "\t",
            "#",
            " XOR",
            " with",
            " the",
            " result",
            " so",
            " far",
            " \n\t",
            "\t",
            "result",
            " =",
            " result",
            " ^",
            " arr",
            "[",
            "i",
            "]",
            " \n",
            "\t",
            "return",
            " result",
            " \n",
            "\n",
            "#"
        ]
    },
    {
        "task_id": 30,
        "prompt": "Write a python function to count all the substrings starting and ending with same characters.\n\ndef count_Substring_With_Equal_Ends(s): \n",
        "answer": "def count_Substring_With_Equal_Ends(s): \n\tcount = 0\n\tfor i in range(len(s)): \n\t\tfor j in range(i+1, len(s)+1): \n\t\t\tif s[i] == s[j-1]: \n\t\t\t\tcount += 1\n\treturn count \n\n",
        "test_list": [
            "assert count_Substring_With_Equal_Ends(\"abc\") == 3",
            "assert count_Substring_With_Equal_Ends(\"abcda\") == 6",
            "assert count_Substring_With_Equal_Ends(\"ab\") == 2"
        ],
        "answer_list": [
            "\t",
            "count",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "len",
            "(",
            "s",
            ")):",
            " \n\t",
            "\t",
            "for",
            " j",
            " in",
            " range",
            "(",
            "i",
            "+",
            "1",
            ",",
            " len",
            "(",
            "s",
            ")+",
            "1",
            "):",
            " \n\t\t",
            "\t",
            "if",
            " s",
            "[",
            "i",
            "]",
            " ==",
            " s",
            "[",
            "j",
            "-",
            "1",
            "]:",
            " \n\t\t\t",
            "\t",
            "count",
            " +=",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " count",
            " \n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 31,
        "prompt": "Write a python function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\n\ndef func(nums, k):\n",
        "answer": "def func(nums, k):\n\t# Fill this in.\n\theap = []\n\tfor num in nums:\n\t\tif len(heap) < k:\n\t\t\theapq.heappush(heap, num)\n\t\telse:\n\t\t\tif num > heap[0]:\n\t\t\t\theapq.heappop(heap)\n\t\t\t\theapq.heappush(heap, num)\n\treturn heap\n\n",
        "test_list": [
            "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]",
            "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],1)==[1]",
            "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],5)==[6, 5, 7, 8, 1]"
        ],
        "answer_list": [
            "\t",
            "#",
            " Fill",
            " this",
            " in",
            ".",
            "\n",
            "\t",
            "heap",
            " =",
            " []",
            "\n",
            "\t",
            "for",
            " num",
            " in",
            " nums",
            ":",
            "\n\t",
            "\t",
            "if",
            " len",
            "(",
            "heap",
            ")",
            " <",
            " k",
            ":",
            "\n\t\t",
            "\t",
            "heap",
            "q",
            ".",
            "he",
            "app",
            "ush",
            "(",
            "heap",
            ",",
            " num",
            ")",
            "\n\t",
            "\t",
            "else",
            ":",
            "\n\t\t",
            "\t",
            "if",
            " num",
            " >",
            " heap",
            "[",
            "0",
            "]:",
            "\n\t\t\t",
            "\t",
            "heap",
            "q",
            ".",
            "he",
            "app",
            "op",
            "(",
            "heap",
            ")",
            "\n\t\t\t",
            "\t",
            "heap",
            "q",
            ".",
            "he",
            "app",
            "ush",
            "(",
            "heap",
            ",",
            " num",
            ")",
            "\n",
            "\t",
            "return",
            " heap",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 32,
        "prompt": "Write a python function to find the largest prime factor of a given number.\n\ndef max_Prime_Factors (n): \n",
        "answer": "def max_Prime_Factors (n): \n\ti = 2\n\twhile i * i <= n: \n\t\tif n % i: \n\t\t\ti += 1\n\t\telse: \n\t\t\tn //= i \n\treturn n \n\n",
        "test_list": [
            "assert max_Prime_Factors(15) == 5",
            "assert max_Prime_Factors(6) == 3",
            "assert max_Prime_Factors(2) == 2"
        ],
        "answer_list": [
            "\t",
            "i",
            " =",
            " ",
            "2",
            "\n",
            "\t",
            "while",
            " i",
            " *",
            " i",
            " <=",
            " n",
            ":",
            " \n\t",
            "\t",
            "if",
            " n",
            " %",
            " i",
            ":",
            " \n\t\t",
            "\t",
            "i",
            " +=",
            " ",
            "1",
            "\n\t",
            "\t",
            "else",
            ":",
            " \n\t\t",
            "\t",
            "n",
            " //",
            "=",
            " i",
            " \n",
            "\t",
            "return",
            " n",
            " \n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 33,
        "prompt": "Write a python function to convert a decimal number to binary number.\n\ndef decimal_To_Binary(N): \n",
        "answer": "def decimal_To_Binary(N): \n\tif N > 1: \n\t\tdecimal_To_Binary(N // 2) \n\tprint(N % 2, end = '') \n\n",
        "test_list": [
            "assert decimal_To_Binary(10) == 1010",
            "assert decimal_To_Binary(1) == 1",
            "assert decimal_To_Binary(20) == 10100"
        ],
        "answer_list": [
            "\t",
            "if",
            " N",
            " >",
            " ",
            "1",
            ":",
            " \n\t",
            "\t",
            "decimal",
            "_",
            "To",
            "_",
            "Binary",
            "(",
            "N",
            " //",
            " ",
            "2",
            ")",
            " \n",
            "\t",
            "print",
            "(",
            "N",
            " %",
            " ",
            "2",
            ",",
            " end",
            " =",
            " '')",
            " \n",
            "\n",
            "decimal"
        ]
    },
    {
        "task_id": 34,
        "prompt": "Write a python function to find the missing number in a sorted array.\n\ndef find_missing(ar,N): \n",
        "answer": "def find_missing(ar,N): \n\tfor i in range(N): \n\t\tif (ar[i]!= i+1): \n\t\t\treturn i+1\n\treturn N+1\n\n",
        "test_list": [
            "assert find_missing([1,2,3,5],4) == 4",
            "assert find_missing([1,3,4,5],4) == 2",
            "assert find_missing([1,2,3,5,6,7],5) == 4"
        ],
        "answer_list": [
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "N",
            "):",
            " \n\t",
            "\t",
            "if",
            " (",
            "ar",
            "[",
            "i",
            "]",
            "!=",
            " i",
            "+",
            "1",
            "):",
            " \n\t\t",
            "\t",
            "return",
            " i",
            "+",
            "1",
            "\n",
            "\t",
            "return",
            " N",
            "+",
            "1",
            "\n",
            "\n",
            "ar"
        ]
    },
    {
        "task_id": 35,
        "prompt": "Write a python function to find the n-th rectangular number.\n\ndef find_rect_num(n):\n",
        "answer": "def find_rect_num(n):\n\treturn (n*(n+1))//2\n\n",
        "test_list": [
            "assert find_rect_num(4) == 20",
            "assert find_rect_num(5) == 30",
            "assert find_rect_num(6) == 42"
        ],
        "answer_list": [
            "\t",
            "return",
            " (",
            "n",
            "*(",
            "n",
            "+",
            "1",
            "))",
            "//",
            "2",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 36,
        "prompt": "Write a python function to find the nth digit in the proper fraction of two given numbers.\n\ndef find_Nth_Digit(p,q,N) :  \n",
        "answer": "def find_Nth_Digit(p,q,N) :  \n\tif N == 0 : \n\t\treturn 1\n\tif N == 1 : \n\t\treturn p\n\tif N == 2 : \n\t\treturn q\n\tif N > 2 : \n\t\treturn find_Nth_Digit(q,p+q,N-1)\n\n",
        "test_list": [
            "assert find_Nth_Digit(1,2,1) == 5",
            "assert find_Nth_Digit(3,5,1) == 6",
            "assert find_Nth_Digit(5,6,5) == 3"
        ],
        "answer_list": [
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "0",
            " :",
            " \n\t",
            "\t",
            "return",
            " ",
            "1",
            "\n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "1",
            " :",
            " \n\t",
            "\t",
            "return",
            " p",
            "\n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "2",
            " :",
            " \n\t",
            "\t",
            "return",
            " q",
            "\n",
            "\t",
            "if",
            " N",
            " >",
            " ",
            "2",
            " :",
            " \n\t",
            "\t",
            "return",
            " find",
            "_",
            "N",
            "th",
            "_",
            "Digit",
            "(",
            "q",
            ",",
            "p",
            "+",
            "q",
            ",",
            "N",
            "-",
            "1",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 37,
        "prompt": "Write a python function to sort a given mixed list of integers and strings.\n\ndef sort_mixed_list(mixed_list):\n",
        "answer": "def sort_mixed_list(mixed_list):\n\treturn sorted(mixed_list, key=lambda x: (isinstance(x, int), x))\n\n",
        "test_list": [
            "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']",
            "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']",
            "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']"
        ],
        "answer_list": [
            "\t",
            "return",
            " sorted",
            "(",
            "mixed",
            "_",
            "list",
            ",",
            " key",
            "=",
            "lambda",
            " x",
            ":",
            " (",
            "isinstance",
            "(",
            "x",
            ",",
            " int",
            "),",
            " x",
            "))",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 38,
        "prompt": "Write a python function to find the division of first even and odd number of a given list.\n\ndef div_even_odd(list1):\n",
        "answer": "def div_even_odd(list1):\n\teven_sum = 0\n\todd_sum = 0\n\tfor i in list1:\n\t\tif i%2 == 0:\n\t\t\teven_sum += i\n\t\telse:\n\t\t\todd_sum += i\n\treturn even_sum/odd_sum\n\n",
        "test_list": [
            "assert div_even_odd([1,3,5,7,4,1,6,8])==4",
            "assert div_even_odd([1,2,3,4,5,6,7,8,9,10])==2",
            "assert div_even_odd([1,5,7,9,10])==10"
        ],
        "answer_list": [
            "\t",
            "even",
            "_",
            "sum",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "odd",
            "_",
            "sum",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " list",
            "1",
            ":",
            "\n\t",
            "\t",
            "if",
            " i",
            "%",
            "2",
            " ==",
            " ",
            "0",
            ":",
            "\n\t\t",
            "\t",
            "even",
            "_",
            "sum",
            " +=",
            " i",
            "\n\t",
            "\t",
            "else",
            ":",
            "\n\t\t",
            "\t",
            "odd",
            "_",
            "sum",
            " +=",
            " i",
            "\n",
            "\t",
            "return",
            " even",
            "_",
            "sum",
            "/",
            "odd",
            "_",
            "sum",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 39,
        "prompt": "Write a python function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\n\ndef rearange_string(S):\n",
        "answer": "def rearange_string(S):\n\t# Write your code here\n\tif len(S) == 1:\n\t\treturn True\n\tif len(S) == 2:\n\t\treturn S[0]!= S[1]\n\tif len(S) == 3:\n\t\treturn S[0]!= S[1] and S[1]!= S[2] and S[0]!= S[2]\n\tif len(S) == 4:\n\t\treturn S[0]!= S[1] and S[1]!= S[2] and S[2]!= S[3] and S[0]!= S[3]\n\tif len(S) == 5:\n\t\treturn S[0]!= S[1] and S[1]!= S[2] and S[2]!= S[3] and S[3]!= S[4] and S[0]!= S[4]\n\tif len(S) == 6:\n\t\treturn S[0]!= S[1] and S[1]!= S[2] and S[2]!= S[3] and S[3]!= S[4] and S[4]!= S[5] and S[0]!= S[5]\n\tif len(S) == 7:\n\t\treturn S[0]!= S[1] and S[1]!= S[2] and S[2]!= S[3] and S[3]!= S[4] and S[4]!= S[5] and S[5]!= S[6] and S[0]!= S[6]\n\tif len(S) == 8:\n\t\treturn S[0]!= S[1] and S[1]!= S[2] and S[2]!= S[3] and S[3]!= S[4] and S[4]!= S[5] and S[5]!= S[6] and S[6]!= S[7] and S[0]!= S[7]\n\tif len(S) == 9:\n\t\treturn S[0]!= S[1] and S[1]!= S[2] and S[2]!= S[3] and S[3]!= S[4] and S[4]!= S[5] and S[5]!= S[6] and S[6]!= S[7] and S[7]!= S[8] and S[0]!= S[8]\n\tif len(S) == 10:\n\t\treturn S[0]!= S[1] and S[1]!= S[2] and S[2]!= S[3] and S[3]!= S[4] and S[4]!= S[5] and S[5]!= S[6] and S[6]!= S[7] and S[7]!= S[8] and S[8]!= S[9] and S[0]!= S[9]\n\tif len(S) == 11:\n\t\treturn S[0]!= S[1] and S[1]!= S[2] and S[2]!= S[3] and S[3]!= S[4] and S[4]!= S[5] and S[5]!= S[6] and S[6]!= S[7] and S[7]!= S[8] and S[8]!= S[9] and S[9]!= S[10] and S[0]!= S[10]\n\tif len(S) == 12:\n\t\treturn S[0]!= S[1] and S[1]!= S[2] and S[2]!= S[3] and S[3]!= S[4] and S[4]!= S[5] and S[5]!= S[6] and S[6]!= S[7] and S[7]!= S[8] and S[8]!= S[9] and S[9]!= S[10] and S[10]!= S[11] and S[0]!= S[11]\n\tif len(S) == 13:\n\t\treturn S[0]!= S[1] and S[1]!= S[2] and S[2]!= S[3] and S[3]!= S[4] and S[4]!= S[5] and S[5]!= S[6] and S[6]!= S[7] and S[7]!= S",
        "test_list": [
            "assert rearange_string(\"aab\")==('aba')",
            "assert rearange_string(\"aabb\")==('abab')",
            "assert rearange_string(\"abccdd\")==('cdabcd')"
        ],
        "answer_list": [
            "\t",
            "#",
            " Write",
            " your",
            " code",
            " here",
            "\n",
            "\t",
            "if",
            " len",
            "(",
            "S",
            ")",
            " ==",
            " ",
            "1",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " len",
            "(",
            "S",
            ")",
            " ==",
            " ",
            "2",
            ":",
            "\n\t",
            "\t",
            "return",
            " S",
            "[",
            "0",
            "]",
            "!=",
            " S",
            "[",
            "1",
            "]",
            "\n",
            "\t",
            "if",
            " len",
            "(",
            "S",
            ")",
            " ==",
            " ",
            "3",
            ":",
            "\n\t",
            "\t",
            "return",
            " S",
            "[",
            "0",
            "]",
            "!=",
            " S",
            "[",
            "1",
            "]",
            " and",
            " S",
            "[",
            "1",
            "]",
            "!=",
            " S",
            "[",
            "2",
            "]",
            " and",
            " S",
            "[",
            "0",
            "]",
            "!=",
            " S",
            "[",
            "2",
            "]",
            "\n",
            "\t",
            "if",
            " len",
            "(",
            "S",
            ")",
            " ==",
            " ",
            "4",
            ":",
            "\n\t",
            "\t",
            "return",
            " S",
            "[",
            "0",
            "]",
            "!=",
            " S",
            "[",
            "1",
            "]",
            " and",
            " S",
            "[",
            "1",
            "]",
            "!=",
            " S",
            "[",
            "2",
            "]",
            " and",
            " S",
            "[",
            "2",
            "]",
            "!=",
            " S",
            "[",
            "3",
            "]",
            " and",
            " S",
            "[",
            "0",
            "]",
            "!=",
            " S",
            "[",
            "3",
            "]",
            "\n",
            "\t",
            "if",
            " len",
            "(",
            "S",
            ")",
            " ==",
            " ",
            "5",
            ":",
            "\n\t",
            "\t",
            "return",
            " S",
            "[",
            "0",
            "]",
            "!=",
            " S",
            "[",
            "1",
            "]",
            " and",
            " S",
            "[",
            "1",
            "]",
            "!=",
            " S",
            "[",
            "2",
            "]",
            " and",
            " S",
            "[",
            "2",
            "]",
            "!=",
            " S",
            "[",
            "3",
            "]",
            " and",
            " S",
            "[",
            "3",
            "]",
            "!=",
            " S",
            "[",
            "4",
            "]",
            " and",
            " S",
            "[",
            "0",
            "]",
            "!=",
            " S",
            "[",
            "4",
            "]",
            "\n",
            "\t",
            "if",
            " len",
            "(",
            "S",
            ")",
            " ==",
            " ",
            "6",
            ":",
            "\n\t",
            "\t",
            "return",
            " S",
            "[",
            "0",
            "]",
            "!=",
            " S",
            "[",
            "1",
            "]",
            " and",
            " S",
            "[",
            "1",
            "]",
            "!=",
            " S",
            "[",
            "2",
            "]",
            " and",
            " S",
            "[",
            "2",
            "]",
            "!=",
            " S",
            "[",
            "3",
            "]",
            " and",
            " S",
            "[",
            "3",
            "]",
            "!=",
            " S",
            "[",
            "4",
            "]",
            " and",
            " S",
            "[",
            "4",
            "]",
            "!=",
            " S",
            "[",
            "5",
            "]",
            " and",
            " S",
            "[",
            "0",
            "]",
            "!=",
            " S",
            "[",
            "5",
            "]",
            "\n",
            "\t",
            "if",
            " len",
            "(",
            "S",
            ")",
            " ==",
            " ",
            "7",
            ":",
            "\n\t",
            "\t",
            "return",
            " S",
            "[",
            "0",
            "]",
            "!=",
            " S",
            "[",
            "1",
            "]",
            " and",
            " S",
            "[",
            "1",
            "]",
            "!=",
            " S",
            "[",
            "2",
            "]",
            " and",
            " S",
            "[",
            "2",
            "]",
            "!=",
            " S",
            "[",
            "3",
            "]",
            " and",
            " S",
            "[",
            "3",
            "]",
            "!=",
            " S",
            "[",
            "4",
            "]",
            " and",
            " S",
            "[",
            "4",
            "]",
            "!=",
            " S",
            "[",
            "5",
            "]",
            " and",
            " S",
            "[",
            "5",
            "]",
            "!=",
            " S",
            "[",
            "6",
            "]",
            " and",
            " S",
            "[",
            "0",
            "]",
            "!=",
            " S",
            "[",
            "6",
            "]",
            "\n",
            "\t",
            "if",
            " len",
            "(",
            "S",
            ")",
            " ==",
            " ",
            "8",
            ":",
            "\n\t",
            "\t",
            "return",
            " S",
            "[",
            "0",
            "]",
            "!=",
            " S",
            "[",
            "1",
            "]",
            " and",
            " S",
            "[",
            "1",
            "]",
            "!=",
            " S",
            "[",
            "2",
            "]",
            " and",
            " S",
            "[",
            "2",
            "]",
            "!=",
            " S",
            "[",
            "3",
            "]",
            " and",
            " S",
            "[",
            "3",
            "]",
            "!=",
            " S",
            "[",
            "4",
            "]",
            " and",
            " S",
            "[",
            "4",
            "]",
            "!=",
            " S",
            "[",
            "5",
            "]",
            " and",
            " S",
            "[",
            "5",
            "]",
            "!=",
            " S",
            "[",
            "6",
            "]",
            " and",
            " S",
            "[",
            "6",
            "]",
            "!=",
            " S",
            "[",
            "7",
            "]",
            " and",
            " S",
            "[",
            "0",
            "]",
            "!=",
            " S",
            "[",
            "7",
            "]",
            "\n",
            "\t",
            "if",
            " len",
            "(",
            "S",
            ")",
            " ==",
            " ",
            "9",
            ":",
            "\n\t",
            "\t",
            "return",
            " S",
            "[",
            "0",
            "]",
            "!=",
            " S",
            "[",
            "1",
            "]",
            " and",
            " S",
            "[",
            "1",
            "]",
            "!=",
            " S",
            "[",
            "2",
            "]",
            " and",
            " S",
            "[",
            "2",
            "]",
            "!=",
            " S",
            "[",
            "3",
            "]",
            " and",
            " S",
            "[",
            "3",
            "]",
            "!=",
            " S",
            "[",
            "4",
            "]",
            " and",
            " S",
            "[",
            "4",
            "]",
            "!=",
            " S",
            "[",
            "5",
            "]",
            " and",
            " S",
            "[",
            "5",
            "]",
            "!=",
            " S",
            "[",
            "6",
            "]",
            " and",
            " S",
            "[",
            "6",
            "]",
            "!=",
            " S",
            "[",
            "7",
            "]",
            " and",
            " S",
            "[",
            "7",
            "]",
            "!=",
            " S",
            "[",
            "8",
            "]",
            " and",
            " S",
            "[",
            "0",
            "]",
            "!=",
            " S",
            "[",
            "8",
            "]",
            "\n",
            "\t",
            "if",
            " len",
            "(",
            "S",
            ")",
            " ==",
            " ",
            "1",
            "0",
            ":",
            "\n\t",
            "\t",
            "return",
            " S",
            "[",
            "0",
            "]",
            "!=",
            " S",
            "[",
            "1",
            "]",
            " and",
            " S",
            "[",
            "1",
            "]",
            "!=",
            " S",
            "[",
            "2",
            "]",
            " and",
            " S",
            "[",
            "2",
            "]",
            "!=",
            " S",
            "[",
            "3",
            "]",
            " and",
            " S",
            "[",
            "3",
            "]",
            "!=",
            " S",
            "[",
            "4",
            "]",
            " and",
            " S",
            "[",
            "4",
            "]",
            "!=",
            " S",
            "[",
            "5",
            "]",
            " and",
            " S",
            "[",
            "5",
            "]",
            "!=",
            " S",
            "[",
            "6",
            "]",
            " and",
            " S",
            "[",
            "6",
            "]",
            "!=",
            " S",
            "[",
            "7",
            "]",
            " and",
            " S",
            "[",
            "7",
            "]",
            "!=",
            " S",
            "[",
            "8",
            "]",
            " and",
            " S",
            "[",
            "8",
            "]",
            "!=",
            " S",
            "[",
            "9",
            "]",
            " and",
            " S",
            "[",
            "0",
            "]",
            "!=",
            " S",
            "[",
            "9",
            "]",
            "\n",
            "\t",
            "if",
            " len",
            "(",
            "S",
            ")",
            " ==",
            " ",
            "1",
            "1",
            ":",
            "\n\t",
            "\t",
            "return",
            " S",
            "[",
            "0",
            "]",
            "!=",
            " S",
            "[",
            "1",
            "]",
            " and",
            " S",
            "[",
            "1",
            "]",
            "!=",
            " S",
            "[",
            "2",
            "]",
            " and",
            " S",
            "[",
            "2",
            "]",
            "!=",
            " S",
            "[",
            "3",
            "]",
            " and",
            " S",
            "[",
            "3",
            "]",
            "!=",
            " S",
            "[",
            "4",
            "]",
            " and",
            " S",
            "[",
            "4",
            "]",
            "!=",
            " S",
            "[",
            "5",
            "]",
            " and",
            " S",
            "[",
            "5",
            "]",
            "!=",
            " S",
            "[",
            "6",
            "]",
            " and",
            " S",
            "[",
            "6",
            "]",
            "!=",
            " S",
            "[",
            "7",
            "]",
            " and",
            " S",
            "[",
            "7",
            "]",
            "!=",
            " S",
            "[",
            "8",
            "]",
            " and",
            " S",
            "[",
            "8",
            "]",
            "!=",
            " S",
            "[",
            "9",
            "]",
            " and",
            " S",
            "[",
            "9",
            "]",
            "!=",
            " S",
            "[",
            "1",
            "0",
            "]",
            " and",
            " S",
            "[",
            "0",
            "]",
            "!=",
            " S",
            "[",
            "1",
            "0",
            "]",
            "\n",
            "\t",
            "if",
            " len",
            "(",
            "S",
            ")",
            " ==",
            " ",
            "1",
            "2",
            ":",
            "\n\t",
            "\t",
            "return",
            " S",
            "[",
            "0",
            "]",
            "!=",
            " S",
            "[",
            "1",
            "]",
            " and",
            " S",
            "[",
            "1",
            "]",
            "!=",
            " S",
            "[",
            "2",
            "]",
            " and",
            " S",
            "[",
            "2",
            "]",
            "!=",
            " S",
            "[",
            "3",
            "]",
            " and",
            " S",
            "[",
            "3",
            "]",
            "!=",
            " S",
            "[",
            "4",
            "]",
            " and",
            " S",
            "[",
            "4",
            "]",
            "!=",
            " S",
            "[",
            "5",
            "]",
            " and",
            " S",
            "[",
            "5",
            "]",
            "!=",
            " S",
            "[",
            "6",
            "]",
            " and",
            " S",
            "[",
            "6",
            "]",
            "!=",
            " S",
            "[",
            "7",
            "]",
            " and",
            " S",
            "[",
            "7",
            "]",
            "!=",
            " S",
            "[",
            "8",
            "]",
            " and",
            " S",
            "[",
            "8",
            "]",
            "!=",
            " S",
            "[",
            "9",
            "]",
            " and",
            " S",
            "[",
            "9",
            "]",
            "!=",
            " S",
            "[",
            "1",
            "0",
            "]",
            " and",
            " S",
            "[",
            "1",
            "0",
            "]",
            "!=",
            " S",
            "[",
            "1",
            "1",
            "]",
            " and",
            " S",
            "[",
            "0",
            "]",
            "!=",
            " S",
            "[",
            "1",
            "1",
            "]",
            "\n",
            "\t",
            "if",
            " len",
            "(",
            "S",
            ")",
            " ==",
            " ",
            "1",
            "3",
            ":",
            "\n\t",
            "\t",
            "return",
            " S",
            "[",
            "0",
            "]",
            "!=",
            " S",
            "[",
            "1",
            "]",
            " and",
            " S",
            "[",
            "1",
            "]",
            "!=",
            " S",
            "[",
            "2",
            "]",
            " and",
            " S",
            "[",
            "2",
            "]",
            "!=",
            " S",
            "[",
            "3",
            "]",
            " and",
            " S",
            "[",
            "3",
            "]",
            "!=",
            " S",
            "[",
            "4",
            "]",
            " and",
            " S",
            "[",
            "4",
            "]",
            "!=",
            " S",
            "[",
            "5",
            "]",
            " and",
            " S",
            "[",
            "5",
            "]",
            "!=",
            " S",
            "[",
            "6",
            "]",
            " and",
            " S",
            "[",
            "6",
            "]",
            "!=",
            " S",
            "[",
            "7",
            "]",
            " and",
            " S",
            "[",
            "7",
            "]",
            "!=",
            " S"
        ]
    },
    {
        "task_id": 40,
        "prompt": "Write a python function to find frequency of the elements in a given list of lists using collections module.\n\ndef freq_element(nums):\n",
        "answer": "def freq_element(nums):\n\tfrom collections import Counter\n\treturn Counter(nums)\n\n",
        "test_list": [
            "assert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})",
            "assert freq_element([[1,2,3,4],[5,6,7,8],[9,10,11,12]])==({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1})",
            "assert freq_element([[15,20,30,40],[80,90,100,110],[30,30,80,90]])==({30: 3, 80: 2, 90: 2, 15: 1, 20: 1, 40: 1, 100: 1, 110: 1})"
        ],
        "answer_list": [
            "\t",
            "from",
            " collections",
            " import",
            " Counter",
            "\n",
            "\t",
            "return",
            " Counter",
            "(",
            "nums",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 41,
        "prompt": "Write a python function to filter even numbers using lambda function.\n\ndef filter_evennumbers(nums):\n",
        "answer": "def filter_evennumbers(nums):\n\treturn list(filter(lambda x: (x%2==0), nums))\n\n",
        "test_list": [
            "assert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]",
            "assert filter_evennumbers([10,20,45,67,84,93])==[10,20,84]",
            "assert filter_evennumbers([5,7,9,8,6,4,3])==[8,6,4]"
        ],
        "answer_list": [
            "\t",
            "return",
            " list",
            "(",
            "filter",
            "(",
            "lambda",
            " x",
            ":",
            " (",
            "x",
            "%",
            "2",
            "==",
            "0",
            "),",
            " nums",
            "))",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 42,
        "prompt": "Write a python function to find the sum of repeated elements in a given array.\n\ndef find_Sum(arr,n): \n",
        "answer": "def find_Sum(arr,n): \n\tsum = 0\n\tfor i in range(n): \n\t\tfor j in range(i+1, n): \n\t\t\tif arr[i] == arr[j]: \n\t\t\t\tsum = sum + arr[i] \n\treturn sum \n\n",
        "test_list": [
            "assert find_Sum([1,2,3,1,1,4,5,6],8) == 3",
            "assert find_Sum([1,2,3,1,1],5) == 3",
            "assert find_Sum([1,1,2],3) == 2"
        ],
        "answer_list": [
            "\t",
            "sum",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "n",
            "):",
            " \n\t",
            "\t",
            "for",
            " j",
            " in",
            " range",
            "(",
            "i",
            "+",
            "1",
            ",",
            " n",
            "):",
            " \n\t\t",
            "\t",
            "if",
            " arr",
            "[",
            "i",
            "]",
            " ==",
            " arr",
            "[",
            "j",
            "]:",
            " \n\t\t\t",
            "\t",
            "sum",
            " =",
            " sum",
            " +",
            " arr",
            "[",
            "i",
            "]",
            " \n",
            "\t",
            "return",
            " sum",
            " \n",
            "\n",
            "arr"
        ]
    },
    {
        "task_id": 43,
        "prompt": "Write a python function to find sequences of lowercase letters joined with an underscore using regex.\n\ndef text_match(text):\n",
        "answer": "def text_match(text):\n\treturn re.findall(r'[a-z]+_[a-z]+', text)\n\n",
        "test_list": [
            "assert text_match(\"aab_cbbbc\") == 'Found a match!'",
            "assert text_match(\"aab_Abbbc\") == 'Not matched!'",
            "assert text_match(\"Aaab_abbbc\") == 'Not matched!'"
        ],
        "answer_list": [
            "\t",
            "return",
            " re",
            ".",
            "findall",
            "(",
            "r",
            "'[",
            "a",
            "-",
            "z",
            "]+",
            "_[",
            "a",
            "-",
            "z",
            "]+",
            "',",
            " text",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 44,
        "prompt": "Write a python function that matches a word at the beginning of a string.\n\ndef text_match_string(text):\n",
        "answer": "def text_match_string(text):\n\treturn re.match(r'\\b\\w+\\b', text)\n\n",
        "test_list": [
            "assert text_match_string(\" python\")==('Not matched!')",
            "assert text_match_string(\"python\")==('Found a match!')",
            "assert text_match_string(\"  lang\")==('Not matched!')"
        ],
        "answer_list": [
            "\t",
            "return",
            " re",
            ".",
            "match",
            "(",
            "r",
            "'\\",
            "b",
            "\\",
            "w",
            "+\\",
            "b",
            "',",
            " text",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 45,
        "prompt": "Write a python function to find the gcd of the given array elements.\n\ndef get_gcd(l):\n",
        "answer": "def get_gcd(l):\n\tif len(l) == 1:\n\t\treturn l[0]\n\telse:\n\t\treturn get_gcd([l[1], l[0] % l[1]])\n\n",
        "test_list": [
            "assert get_gcd([2, 4, 6, 8, 16]) == 2",
            "assert get_gcd([1, 2, 3]) == 1",
            "assert get_gcd([2, 4, 6, 8]) == 2 "
        ],
        "answer_list": [
            "\t",
            "if",
            " len",
            "(",
            "l",
            ")",
            " ==",
            " ",
            "1",
            ":",
            "\n\t",
            "\t",
            "return",
            " l",
            "[",
            "0",
            "]",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "return",
            " get",
            "_",
            "gcd",
            "([",
            "l",
            "[",
            "1",
            "],",
            " l",
            "[",
            "0",
            "]",
            " %",
            " l",
            "[",
            "1",
            "]])",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 46,
        "prompt": "Write a python function to determine whether all the numbers are different from each other are not.\n\ndef test_distinct(data):\n",
        "answer": "def test_distinct(data):\n\tfor i in range(len(data)):\n\t\tfor j in range(i+1, len(data)):\n\t\t\tif data[i] == data[j]:\n\t\t\t\treturn False\n\treturn True\n\n",
        "test_list": [
            "assert test_distinct([1,5,7,9]) == True",
            "assert test_distinct([2,4,5,5,7,9]) == False",
            "assert test_distinct([1,2,3]) == True"
        ],
        "answer_list": [
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "len",
            "(",
            "data",
            ")):",
            "\n\t",
            "\t",
            "for",
            " j",
            " in",
            " range",
            "(",
            "i",
            "+",
            "1",
            ",",
            " len",
            "(",
            "data",
            ")):",
            "\n\t\t",
            "\t",
            "if",
            " data",
            "[",
            "i",
            "]",
            " ==",
            " data",
            "[",
            "j",
            "]:",
            "\n\t\t\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "return",
            " True",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 47,
        "prompt": "Write a python function to find the last digit when factorial of a divides factorial of b.\n\ndef compute_Last_Digit(A,B): \n",
        "answer": "def compute_Last_Digit(A,B): \n\tif A == 0 or B == 0: \n\t\treturn 1\n\tif A % B == 0: \n\t\treturn compute_Last_Digit(A/B, B) \n\telse: \n\t\treturn compute_Last_Digit(A/B, B) % 10\n\n",
        "test_list": [
            "assert compute_Last_Digit(2,4) == 2",
            "assert compute_Last_Digit(6,8) == 6",
            "assert compute_Last_Digit(1,2) == 2"
        ],
        "answer_list": [
            "\t",
            "if",
            " A",
            " ==",
            " ",
            "0",
            " or",
            " B",
            " ==",
            " ",
            "0",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "1",
            "\n",
            "\t",
            "if",
            " A",
            " %",
            " B",
            " ==",
            " ",
            "0",
            ":",
            " \n\t",
            "\t",
            "return",
            " compute",
            "_",
            "Last",
            "_",
            "Digit",
            "(",
            "A",
            "/",
            "B",
            ",",
            " B",
            ")",
            " \n",
            "\t",
            "else",
            ":",
            " \n\t",
            "\t",
            "return",
            " compute",
            "_",
            "Last",
            "_",
            "Digit",
            "(",
            "A",
            "/",
            "B",
            ",",
            " B",
            ")",
            " %",
            " ",
            "1",
            "0",
            "\n",
            "\n",
            "A"
        ]
    },
    {
        "task_id": 48,
        "prompt": "Write a python function to set all odd bits of a given number.\n\ndef odd_bit_set_number(n):\n",
        "answer": "def odd_bit_set_number(n):\n\treturn n | 1\n\n",
        "test_list": [
            "assert odd_bit_set_number(10) == 15",
            "assert odd_bit_set_number(20) == 21",
            "assert odd_bit_set_number(30) == 31"
        ],
        "answer_list": [
            "\t",
            "return",
            " n",
            " |",
            " ",
            "1",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 49,
        "prompt": "Write a python function to extract every first or specified element from a given two-dimensional list.\n\ndef specified_element(nums, N):\n",
        "answer": "def specified_element(nums, N):\n\treturn [nums[i][N] for i in range(len(nums))]\n\n",
        "test_list": [
            "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]",
            "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]",
            "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],1)==[2,5,1]"
        ],
        "answer_list": [
            "\t",
            "return",
            " [",
            "nums",
            "[",
            "i",
            "][",
            "N",
            "]",
            " for",
            " i",
            " in",
            " range",
            "(",
            "len",
            "(",
            "nums",
            "))]",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 50,
        "prompt": "Write a python function to find the list with minimum length using lambda function.\n\ndef min_length_list(input_list):\n",
        "answer": "def min_length_list(input_list):\n\treturn min(input_list, key=lambda x: len(x))\n\n",
        "test_list": [
            "assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])",
            "assert min_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(1,[1])",
            "assert min_length_list([[3,4,5],[6,7,8,9],[10,11,12],[1,2]])==(2,[1,2])"
        ],
        "answer_list": [
            "\t",
            "return",
            " min",
            "(",
            "input",
            "_",
            "list",
            ",",
            " key",
            "=",
            "lambda",
            " x",
            ":",
            " len",
            "(",
            "x",
            "))",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 51,
        "prompt": "Write a python function to print check if the triangle is equilateral or not.\n\ndef check_equilateral(x,y,z):\n",
        "answer": "def check_equilateral(x,y,z):\n\tif x==y==z:\n\t\treturn True\n\telse:\n\t\treturn False\n\n",
        "test_list": [
            "assert check_equilateral(6,8,12)==False ",
            "assert check_equilateral(6,6,12)==False",
            "assert check_equilateral(6,6,6)==True"
        ],
        "answer_list": [
            "\t",
            "if",
            " x",
            "==",
            "y",
            "==",
            "z",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 52,
        "prompt": "Write a python function to caluclate area of a parallelogram.\n\ndef parallelogram_area(b,h):\n",
        "answer": "def parallelogram_area(b,h):\n\treturn b*h\n\n",
        "test_list": [
            "assert parallelogram_area(10,20)==200",
            "assert parallelogram_area(15,20)==300",
            "assert parallelogram_area(8,9)==72"
        ],
        "answer_list": [
            "\t",
            "return",
            " b",
            "*",
            "h",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 53,
        "prompt": "Write a python function to check whether the first and last characters of a given string are equal or not.\n\ndef check_Equality(str):\n",
        "answer": "def check_Equality(str):\n\tif str[0] == str[-1]:\n\t\treturn True\n\telse:\n\t\treturn False\n\n",
        "test_list": [
            "assert check_Equality(\"abcda\") == \"Equal\"",
            "assert check_Equality(\"ab\") == \"Not Equal\"",
            "assert check_Equality(\"mad\") == \"Not Equal\""
        ],
        "answer_list": [
            "\t",
            "if",
            " str",
            "[",
            "0",
            "]",
            " ==",
            " str",
            "[-",
            "1",
            "]:",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 54,
        "prompt": "Write a python function to sort the given array by using counting sort.\n\ndef counting_sort(my_list):\n",
        "answer": "def counting_sort(my_list):\n\t# Create a new list to store the sorted array\n\tsorted_list = []\n\t# Create a new list to store the count of each element\n\tcount_list = [0] * (max(my_list) + 1)\n\t# Count the number of times each element appears in the array\n\tfor i in my_list:\n\t\tcount_list[i] += 1\n\t# Calculate the cumulative sum of the counts\n\tfor i in range(1, len(count_list)):\n\t\tcount_list[i] += count_list[i - 1]\n\t# Place each element in its correct position in the sorted array\n\tfor i in range(len(my_list) - 1, -1, -1):\n\t\tsorted_list.insert(count_list[my_list[i]] - 1, my_list[i])\n\t\tcount_list[my_list[i]] -= 1\n\treturn sorted_list\n\n",
        "test_list": [
            "assert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]",
            "assert counting_sort([12, 9, 28, 33, 69, 45]) == [9, 12, 28, 33, 45, 69]",
            "assert counting_sort([8, 4, 14, 3, 2, 1]) == [1, 2, 3, 4, 8, 14]"
        ],
        "answer_list": [
            "\t",
            "#",
            " Create",
            " a",
            " new",
            " list",
            " to",
            " store",
            " the",
            " sorted",
            " array",
            "\n",
            "\t",
            "sorted",
            "_",
            "list",
            " =",
            " []",
            "\n",
            "\t",
            "#",
            " Create",
            " a",
            " new",
            " list",
            " to",
            " store",
            " the",
            " count",
            " of",
            " each",
            " element",
            "\n",
            "\t",
            "count",
            "_",
            "list",
            " =",
            " [",
            "0",
            "]",
            " *",
            " (",
            "max",
            "(",
            "my",
            "_",
            "list",
            ")",
            " +",
            " ",
            "1",
            ")",
            "\n",
            "\t",
            "#",
            " Count",
            " the",
            " number",
            " of",
            " times",
            " each",
            " element",
            " appears",
            " in",
            " the",
            " array",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " my",
            "_",
            "list",
            ":",
            "\n\t",
            "\t",
            "count",
            "_",
            "list",
            "[",
            "i",
            "]",
            " +=",
            " ",
            "1",
            "\n",
            "\t",
            "#",
            " Calculate",
            " the",
            " cumulative",
            " sum",
            " of",
            " the",
            " counts",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "1",
            ",",
            " len",
            "(",
            "count",
            "_",
            "list",
            ")):",
            "\n\t",
            "\t",
            "count",
            "_",
            "list",
            "[",
            "i",
            "]",
            " +=",
            " count",
            "_",
            "list",
            "[",
            "i",
            " -",
            " ",
            "1",
            "]",
            "\n",
            "\t",
            "#",
            " Place",
            " each",
            " element",
            " in",
            " its",
            " correct",
            " position",
            " in",
            " the",
            " sorted",
            " array",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "len",
            "(",
            "my",
            "_",
            "list",
            ")",
            " -",
            " ",
            "1",
            ",",
            " -",
            "1",
            ",",
            " -",
            "1",
            "):",
            "\n\t",
            "\t",
            "sorted",
            "_",
            "list",
            ".",
            "insert",
            "(",
            "count",
            "_",
            "list",
            "[",
            "my",
            "_",
            "list",
            "[",
            "i",
            "]]",
            " -",
            " ",
            "1",
            ",",
            " my",
            "_",
            "list",
            "[",
            "i",
            "])",
            "\n\t",
            "\t",
            "count",
            "_",
            "list",
            "[",
            "my",
            "_",
            "list",
            "[",
            "i",
            "]]",
            " -=",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " sorted",
            "_",
            "list",
            "\n",
            "\n",
            "#"
        ]
    },
    {
        "task_id": 55,
        "prompt": "Write a python function to find t-nth term of geometric series.\n\ndef tn_gp(a,n,r):\n",
        "answer": "def tn_gp(a,n,r):\n\treturn a*(1-r**n)\n\n",
        "test_list": [
            "assert tn_gp(1,5,2)==16",
            "assert tn_gp(1,5,4)==256",
            "assert tn_gp(2,6,3)==486"
        ],
        "answer_list": [
            "\t",
            "return",
            " a",
            "*(",
            "1",
            "-",
            "r",
            "**",
            "n",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 56,
        "prompt": "Write a python function to check if a given number is one less than twice its reverse.\n\ndef check(n):    \n",
        "answer": "def check(n):    \n\tif str(n) == str(n)[::-1][1:]:\n\t\treturn True\n\telse:\n\t\treturn False\n\n",
        "test_list": [
            "assert check(70) == False",
            "assert check(23) == False",
            "assert check(73) == True"
        ],
        "answer_list": [
            "\t",
            "if",
            " str",
            "(",
            "n",
            ")",
            " ==",
            " str",
            "(",
            "n",
            ")[",
            "::-",
            "1",
            "][",
            "1",
            ":",
            "]:",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 57,
        "prompt": "Write a python function to find the largest number that can be formed with the given digits.\n\ndef find_Max_Num(arr,n) : \n",
        "answer": "def find_Max_Num(arr,n) : \n\tarr.sort()\n\tmax_num = 0\n\tfor i in range(n-1,-1,-1) : \n\t\tmax_num = max_num*10 + arr[i]\n\treturn max_num\n\n",
        "test_list": [
            "assert find_Max_Num([1,2,3],3) == 321",
            "assert find_Max_Num([4,5,6,1],4) == 6541",
            "assert find_Max_Num([1,2,3,9],4) == 9321"
        ],
        "answer_list": [
            "\t",
            "arr",
            ".",
            "sort",
            "()",
            "\n",
            "\t",
            "max",
            "_",
            "num",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "n",
            "-",
            "1",
            ",-",
            "1",
            ",-",
            "1",
            ")",
            " :",
            " \n\t",
            "\t",
            "max",
            "_",
            "num",
            " =",
            " max",
            "_",
            "num",
            "*",
            "1",
            "0",
            " +",
            " arr",
            "[",
            "i",
            "]",
            "\n",
            "\t",
            "return",
            " max",
            "_",
            "num",
            "\n",
            "\n",
            "arr"
        ]
    },
    {
        "task_id": 58,
        "prompt": "Write a python function to check whether the given two integers have opposite sign or not.\n\ndef opposite_Signs(x,y): \n",
        "answer": "def opposite_Signs(x,y): \n\tif (x < 0 and y > 0) or (x > 0 and y < 0):\n\t\treturn True\n\telse:\n\t\treturn False\n\n",
        "test_list": [
            "assert opposite_Signs(1,-2) == True",
            "assert opposite_Signs(3,2) == False",
            "assert opposite_Signs(-10,-10) == False"
        ],
        "answer_list": [
            "\t",
            "if",
            " (",
            "x",
            " <",
            " ",
            "0",
            " and",
            " y",
            " >",
            " ",
            "0",
            ")",
            " or",
            " (",
            "x",
            " >",
            " ",
            "0",
            " and",
            " y",
            " <",
            " ",
            "0",
            "):",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 59,
        "prompt": "Write a python function to find the nth octagonal number.\n\ndef is_octagonal(n): \n",
        "answer": "def is_octagonal(n): \n\treturn (n * (3 * n - 2)) % 144 == 0\n\n",
        "test_list": [
            "assert is_octagonal(5) == 65",
            "assert is_octagonal(10) == 280",
            "assert is_octagonal(15) == 645"
        ],
        "answer_list": [
            "\t",
            "return",
            " (",
            "n",
            " *",
            " (",
            "3",
            " *",
            " n",
            " -",
            " ",
            "2",
            "))",
            " %",
            " ",
            "1",
            "4",
            "4",
            " ==",
            " ",
            "0",
            "\n",
            "\n",
            "def"
        ]
    },
    {
        "task_id": 60,
        "prompt": "Write a python function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\n\ndef max_len_sub( arr, n): \n",
        "answer": "def max_len_sub( arr, n): \n\tmax_len = 1\n\tcurr_len = 1\n\tfor i in range(1, n): \n\t\tif arr[i] - arr[i - 1] == 1: \n\t\t\tcurr_len += 1\n\t\t\tmax_len = max(max_len, curr_len) \n\t\telse: \n\t\t\tcurr_len = 1\n\treturn max_len \n\n",
        "test_list": [
            "assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5",
            "assert max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7) == 4",
            "assert max_len_sub([9, 11, 13, 15, 18], 5) == 1"
        ],
        "answer_list": [
            "\t",
            "max",
            "_",
            "len",
            " =",
            " ",
            "1",
            "\n",
            "\t",
            "curr",
            "_",
            "len",
            " =",
            " ",
            "1",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "1",
            ",",
            " n",
            "):",
            " \n\t",
            "\t",
            "if",
            " arr",
            "[",
            "i",
            "]",
            " -",
            " arr",
            "[",
            "i",
            " -",
            " ",
            "1",
            "]",
            " ==",
            " ",
            "1",
            ":",
            " \n\t\t",
            "\t",
            "curr",
            "_",
            "len",
            " +=",
            " ",
            "1",
            "\n\t\t",
            "\t",
            "max",
            "_",
            "len",
            " =",
            " max",
            "(",
            "max",
            "_",
            "len",
            ",",
            " curr",
            "_",
            "len",
            ")",
            " \n\t",
            "\t",
            "else",
            ":",
            " \n\t\t",
            "\t",
            "curr",
            "_",
            "len",
            " =",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " max",
            "_",
            "len",
            " \n",
            "\n",
            "#"
        ]
    },
    {
        "task_id": 61,
        "prompt": "Write a python function to count number of substrings with the sum of digits equal to their length.\n\ndef count_Substrings(s,n):\n",
        "answer": "def count_Substrings(s,n):\n\tcount=0\n\tfor i in range(n):\n\t\tfor j in range(i,n):\n\t\t\tif sum(int(s[i:j+1]))==j-i+1:\n\t\t\t\tcount+=1\n\treturn count\n\n",
        "test_list": [
            "assert count_Substrings('112112',6) == 6",
            "assert count_Substrings('111',3) == 6",
            "assert count_Substrings('1101112',7) == 12"
        ],
        "answer_list": [
            "\t",
            "count",
            "=",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "n",
            "):",
            "\n\t",
            "\t",
            "for",
            " j",
            " in",
            " range",
            "(",
            "i",
            ",",
            "n",
            "):",
            "\n\t\t",
            "\t",
            "if",
            " sum",
            "(",
            "int",
            "(",
            "s",
            "[",
            "i",
            ":",
            "j",
            "+",
            "1",
            "]))",
            "==",
            "j",
            "-",
            "i",
            "+",
            "1",
            ":",
            "\n\t\t\t",
            "\t",
            "count",
            "+=",
            "1",
            "\n",
            "\t",
            "return",
            " count",
            "\n",
            "\n",
            "s"
        ]
    },
    {
        "task_id": 62,
        "prompt": "Write a python function to find smallest number in a list.\n\ndef smallest_num(xs):\n",
        "answer": "def smallest_num(xs):\n\tsmallest = xs[0]\n\tfor x in xs:\n\t\tif x < smallest:\n\t\t\tsmallest = x\n\treturn smallest\n\n",
        "test_list": [
            "assert smallest_num([10, 20, 1, 45, 99]) == 1",
            "assert smallest_num([1, 2, 3]) == 1",
            "assert smallest_num([45, 46, 50, 60]) == 45"
        ],
        "answer_list": [
            "\t",
            "sm",
            "allest",
            " =",
            " xs",
            "[",
            "0",
            "]",
            "\n",
            "\t",
            "for",
            " x",
            " in",
            " xs",
            ":",
            "\n\t",
            "\t",
            "if",
            " x",
            " <",
            " smallest",
            ":",
            "\n\t\t",
            "\t",
            "sm",
            "allest",
            " =",
            " x",
            "\n",
            "\t",
            "return",
            " smallest",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 63,
        "prompt": "Write a python function to find the maximum difference between available pairs in the given tuple list.\n\ndef max_difference(test_list):\n",
        "answer": "def max_difference(test_list):\n\tmax_diff = 0\n\tfor i in range(len(test_list)):\n\t\tfor j in range(i+1, len(test_list)):\n\t\t\tif abs(test_list[i] - test_list[j]) > max_diff:\n\t\t\t\tmax_diff = abs(test_list[i] - test_list[j])\n\treturn max_diff\n\n",
        "test_list": [
            "assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7",
            "assert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15",
            "assert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23"
        ],
        "answer_list": [
            "\t",
            "max",
            "_",
            "diff",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "len",
            "(",
            "test",
            "_",
            "list",
            ")):",
            "\n\t",
            "\t",
            "for",
            " j",
            " in",
            " range",
            "(",
            "i",
            "+",
            "1",
            ",",
            " len",
            "(",
            "test",
            "_",
            "list",
            ")):",
            "\n\t\t",
            "\t",
            "if",
            " abs",
            "(",
            "test",
            "_",
            "list",
            "[",
            "i",
            "]",
            " -",
            " test",
            "_",
            "list",
            "[",
            "j",
            "])",
            " >",
            " max",
            "_",
            "diff",
            ":",
            "\n\t\t\t",
            "\t",
            "max",
            "_",
            "diff",
            " =",
            " abs",
            "(",
            "test",
            "_",
            "list",
            "[",
            "i",
            "]",
            " -",
            " test",
            "_",
            "list",
            "[",
            "j",
            "])",
            "\n",
            "\t",
            "return",
            " max",
            "_",
            "diff",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 64,
        "prompt": "Write a python function to sort a list of tuples using lambda.\n\ndef subject_marks(subjectmarks):\n",
        "answer": "def subject_marks(subjectmarks):\n\treturn sorted(subjectmarks, key=lambda x: x[1])\n\n",
        "test_list": [
            "assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]",
            "assert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])",
            "assert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])"
        ],
        "answer_list": [
            "\t",
            "return",
            " sorted",
            "(",
            "subject",
            "marks",
            ",",
            " key",
            "=",
            "lambda",
            " x",
            ":",
            " x",
            "[",
            "1",
            "])",
            "\n",
            "\n",
            "if"
        ]
    },
    {
        "task_id": 65,
        "prompt": "Write a python function of recursion list sum.\n\ndef recursive_list_sum(data_list):\n",
        "answer": "def recursive_list_sum(data_list):\n\tif len(data_list) == 1:\n\t\treturn data_list[0]\n\telse:\n\t\treturn data_list[0] + recursive_list_sum(data_list[1:])\n\n",
        "test_list": [
            "assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21",
            "assert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106",
            "assert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210"
        ],
        "answer_list": [
            "\t",
            "if",
            " len",
            "(",
            "data",
            "_",
            "list",
            ")",
            " ==",
            " ",
            "1",
            ":",
            "\n\t",
            "\t",
            "return",
            " data",
            "_",
            "list",
            "[",
            "0",
            "]",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "return",
            " data",
            "_",
            "list",
            "[",
            "0",
            "]",
            " +",
            " recursive",
            "_",
            "list",
            "_",
            "sum",
            "(",
            "data",
            "_",
            "list",
            "[",
            "1",
            ":])",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 66,
        "prompt": "Write a python function to count positive numbers in a list.\n\ndef pos_count(list):\n",
        "answer": "def pos_count(list):\n\tcount = 0\n\tfor i in list:\n\t\tif i > 0:\n\t\t\tcount += 1\n\treturn count\n\n",
        "test_list": [
            "assert pos_count([1,-2,3,-4]) == 2",
            "assert pos_count([3,4,5,-1]) == 3",
            "assert pos_count([1,2,3,4]) == 4"
        ],
        "answer_list": [
            "\t",
            "count",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " list",
            ":",
            "\n\t",
            "\t",
            "if",
            " i",
            " >",
            " ",
            "0",
            ":",
            "\n\t\t",
            "\t",
            "count",
            " +=",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " count",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 67,
        "prompt": "Write a python function to find the number of ways to partition a set of bell numbers.\n\ndef bell_number(n):   \n",
        "answer": "def bell_number(n):   \n\tif n == 0:\n\t\treturn 0\n\tif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn bell_number(n-1) + bell_number(n-2)\n\n",
        "test_list": [
            "assert bell_number(2)==2",
            "assert bell_number(10)==115975",
            "assert bell_number(56)==6775685320645824322581483068371419745979053216268760300"
        ],
        "answer_list": [
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "0",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "0",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "1",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "return",
            " b",
            "ell",
            "_",
            "number",
            "(",
            "n",
            "-",
            "1",
            ")",
            " +",
            " b",
            "ell",
            "_",
            "number",
            "(",
            "n",
            "-",
            "2",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 68,
        "prompt": "Write a python function to check whether the given array is monotonic or not.\n\ndef is_Monotonic(A): \n",
        "answer": "def is_Monotonic(A): \n\tif len(A) == 1:\n\t\treturn True\n\tif len(A) == 2:\n\t\treturn A[0] <= A[1]\n\tif A[0] <= A[1]:\n\t\treturn is_Monotonic(A[1:])\n\tif A[0] > A[1]:\n\t\treturn is_Monotonic(A[1:])\n\n",
        "test_list": [
            "assert is_Monotonic([6, 5, 4, 4]) == True",
            "assert is_Monotonic([1, 2, 2, 3]) == True",
            "assert is_Monotonic([1, 3, 2]) == False"
        ],
        "answer_list": [
            "\t",
            "if",
            " len",
            "(",
            "A",
            ")",
            " ==",
            " ",
            "1",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " len",
            "(",
            "A",
            ")",
            " ==",
            " ",
            "2",
            ":",
            "\n\t",
            "\t",
            "return",
            " A",
            "[",
            "0",
            "]",
            " <=",
            " A",
            "[",
            "1",
            "]",
            "\n",
            "\t",
            "if",
            " A",
            "[",
            "0",
            "]",
            " <=",
            " A",
            "[",
            "1",
            "]:",
            "\n\t",
            "\t",
            "return",
            " is",
            "_",
            "Mon",
            "otonic",
            "(",
            "A",
            "[",
            "1",
            ":])",
            "\n",
            "\t",
            "if",
            " A",
            "[",
            "0",
            "]",
            " >",
            " A",
            "[",
            "1",
            "]:",
            "\n\t",
            "\t",
            "return",
            " is",
            "_",
            "Mon",
            "otonic",
            "(",
            "A",
            "[",
            "1",
            ":])",
            "\n",
            "\n",
            "A"
        ]
    },
    {
        "task_id": 69,
        "prompt": "Write a python function to check whether a list contains the given sublist or not.\n\ndef is_sublist(l, s):\n",
        "answer": "def is_sublist(l, s):\n\tif len(s) > len(l):\n\t\treturn False\n\tfor i in range(len(l) - len(s) + 1):\n\t\tif l[i:i+len(s)] == s:\n\t\t\treturn True\n\treturn False\n\n",
        "test_list": [
            "assert is_sublist([2,4,3,5,7],[3,7])==False",
            "assert is_sublist([2,4,3,5,7],[4,3])==True",
            "assert is_sublist([2,4,3,5,7],[1,6])==False"
        ],
        "answer_list": [
            "\t",
            "if",
            " len",
            "(",
            "s",
            ")",
            " >",
            " len",
            "(",
            "l",
            "):",
            "\n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "len",
            "(",
            "l",
            ")",
            " -",
            " len",
            "(",
            "s",
            ")",
            " +",
            " ",
            "1",
            "):",
            "\n\t",
            "\t",
            "if",
            " l",
            "[",
            "i",
            ":",
            "i",
            "+",
            "len",
            "(",
            "s",
            ")]",
            " ==",
            " s",
            ":",
            "\n\t\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "return",
            " False",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 70,
        "prompt": "Write a python function to find whether all the given tuples have equal length or not.\n\ndef get_equal(Input, k):\n",
        "answer": "def get_equal(Input, k):\n\tfor i in range(len(Input)):\n\t\tif len(Input[i])!= k:\n\t\t\treturn False\n\treturn True\n\n",
        "test_list": [
            "assert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'",
            "assert get_equal([(1, 2, 3), (4, 5, 6, 7)], 3) == 'All tuples do not have same length'",
            "assert get_equal([(1, 2), (3, 4)], 2) == 'All tuples have same length'"
        ],
        "answer_list": [
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "len",
            "(",
            "Input",
            ")):",
            "\n\t",
            "\t",
            "if",
            " len",
            "(",
            "Input",
            "[",
            "i",
            "])",
            "!=",
            " k",
            ":",
            "\n\t\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "return",
            " True",
            "\n",
            "\n",
            "Input"
        ]
    },
    {
        "task_id": 71,
        "prompt": "Write a python function to sort a list of elements using comb sort.\n\ndef comb_sort(nums):\n",
        "answer": "def comb_sort(nums):\n\tgap = len(nums)\n\tshrink = 1.3\n\tsorted = False\n\twhile not sorted:\n\t\tgap = int(gap / shrink)\n\t\tif gap <= 1:\n\t\t\tsorted = True\n\t\telse:\n\t\t\tfor i in range(len(nums) - gap):\n\t\t\t\tif nums[i] > nums[i + gap]:\n\t\t\t\t\tnums[i], nums[i + gap] = nums[i + gap], nums[i]\n\t\t\t\t\tsorted = False\n\treturn nums\n\n",
        "test_list": [
            "assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]",
            "assert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]",
            "assert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99]"
        ],
        "answer_list": [
            "\t",
            "gap",
            " =",
            " len",
            "(",
            "nums",
            ")",
            "\n",
            "\t",
            "shrink",
            " =",
            " ",
            "1",
            ".",
            "3",
            "\n",
            "\t",
            "sorted",
            " =",
            " False",
            "\n",
            "\t",
            "while",
            " not",
            " sorted",
            ":",
            "\n\t",
            "\t",
            "gap",
            " =",
            " int",
            "(",
            "gap",
            " /",
            " shrink",
            ")",
            "\n\t",
            "\t",
            "if",
            " gap",
            " <=",
            " ",
            "1",
            ":",
            "\n\t\t",
            "\t",
            "sorted",
            " =",
            " True",
            "\n\t",
            "\t",
            "else",
            ":",
            "\n\t\t",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "len",
            "(",
            "nums",
            ")",
            " -",
            " gap",
            "):",
            "\n\t\t\t",
            "\t",
            "if",
            " nums",
            "[",
            "i",
            "]",
            " >",
            " nums",
            "[",
            "i",
            " +",
            " gap",
            "]:",
            "\n\t\t\t\t",
            "\t",
            "nums",
            "[",
            "i",
            "],",
            " nums",
            "[",
            "i",
            " +",
            " gap",
            "]",
            " =",
            " nums",
            "[",
            "i",
            " +",
            " gap",
            "],",
            " nums",
            "[",
            "i",
            "]",
            "\n\t\t\t\t",
            "\t",
            "sorted",
            " =",
            " False",
            "\n",
            "\t",
            "return",
            " nums",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 72,
        "prompt": "Write a python function to check whether the given number can be represented as difference of two squares or not.\n\ndef dif_Square(n): \n",
        "answer": "def dif_Square(n): \n\tif n == 0: \n\t\treturn True\n\tx = int(math.sqrt(n)) \n\tif x*x == n: \n\t\treturn True\n\twhile x > 1: \n\t\tx = int(math.sqrt(n - x*x)) \n\t\tif x*x + x*x == n: \n\t\t\treturn True\n\treturn False\n\n",
        "test_list": [
            "assert dif_Square(5) == True",
            "assert dif_Square(10) == False",
            "assert dif_Square(15) == True"
        ],
        "answer_list": [
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "0",
            ":",
            " \n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "x",
            " =",
            " int",
            "(",
            "math",
            ".",
            "sqrt",
            "(",
            "n",
            "))",
            " \n",
            "\t",
            "if",
            " x",
            "*",
            "x",
            " ==",
            " n",
            ":",
            " \n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "while",
            " x",
            " >",
            " ",
            "1",
            ":",
            " \n\t",
            "\t",
            "x",
            " =",
            " int",
            "(",
            "math",
            ".",
            "sqrt",
            "(",
            "n",
            " -",
            " x",
            "*",
            "x",
            "))",
            " \n\t",
            "\t",
            "if",
            " x",
            "*",
            "x",
            " +",
            " x",
            "*",
            "x",
            " ==",
            " n",
            ":",
            " \n\t\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "return",
            " False",
            "\n",
            "\n",
            "#"
        ]
    },
    {
        "task_id": 73,
        "prompt": "Write a python function to split the given string with multiple delimiters by using regex.\n\ndef multiple_split(text):\n",
        "answer": "def multiple_split(text):\n\treturn re.split(r'[\\s,.]+', text)\n\n",
        "test_list": [
            "assert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']",
            "assert multiple_split('Mi Box runs on the \\n Latest android*which has google assistance and chromecast.') == ['Mi Box runs on the ', ' Latest android', 'which has google assistance and chromecast.']",
            "assert multiple_split('Certain services\\nare subjected to change*over the seperate subscriptions.') == ['Certain services', 'are subjected to change', 'over the seperate subscriptions.']"
        ],
        "answer_list": [
            "\t",
            "return",
            " re",
            ".",
            "split",
            "(",
            "r",
            "'",
            "[\\",
            "s",
            ",.",
            "]+",
            "',",
            " text",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 74,
        "prompt": "Write a python function to check whether it follows the sequence given in the patterns array.\n\ndef is_samepatterns(colors, patterns):    \n",
        "answer": "def is_samepatterns(colors, patterns):    \n\tfor i in range(len(colors)):\n\t\tif colors[i]!= patterns[i]:\n\t\t\treturn False\n\treturn True\n\n",
        "test_list": [
            "assert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True ",
            "assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])==False ",
            "assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"])==False "
        ],
        "answer_list": [
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "len",
            "(",
            "colors",
            ")):",
            "\n\t",
            "\t",
            "if",
            " colors",
            "[",
            "i",
            "]",
            "!=",
            " patterns",
            "[",
            "i",
            "]:",
            "\n\t\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "return",
            " True",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 75,
        "prompt": "Write a python function to find tuples which have all elements divisible by k from the given list of tuples.\n\ndef find_tuples(test_list, K):\n",
        "answer": "def find_tuples(test_list, K):\n\treturn [x for x in test_list if all(i % K == 0 for i in x)]\n\n",
        "test_list": [
            "assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'",
            "assert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == '[(5, 25, 30)]'",
            "assert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == '[(8, 16, 4)]'"
        ],
        "answer_list": [
            "\t",
            "return",
            " [",
            "x",
            " for",
            " x",
            " in",
            " test",
            "_",
            "list",
            " if",
            " all",
            "(",
            "i",
            " %",
            " K",
            " ==",
            " ",
            "0",
            " for",
            " i",
            " in",
            " x",
            ")]",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 76,
        "prompt": "Write a python function to count the number of squares in a rectangle.\n\ndef count_Squares(m,n):\n",
        "answer": "def count_Squares(m,n):\n\treturn m*n\n\n",
        "test_list": [
            "assert count_Squares(4,3) == 20",
            "assert count_Squares(2,2) == 5",
            "assert count_Squares(1,1) == 1"
        ],
        "answer_list": [
            "\t",
            "return",
            " m",
            "*",
            "n",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 77,
        "prompt": "Write a python function to find the difference between sum of even and odd digits.\n\ndef is_Diff(n): \n",
        "answer": "def is_Diff(n): \n\tsum_even = 0\n\tsum_odd = 0\n\twhile n > 0: \n\t\tr = n % 10\n\t\tif r % 2 == 0: \n\t\t\tsum_even += r\n\t\telse: \n\t\t\tsum_odd += r\n\t\tn = n // 10\n\treturn sum_even - sum_odd\n\n",
        "test_list": [
            "assert is_Diff (12345) == False",
            "assert is_Diff(1212112) == True",
            "assert is_Diff(1212) == False"
        ],
        "answer_list": [
            "\t",
            "sum",
            "_",
            "even",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "sum",
            "_",
            "odd",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "while",
            " n",
            " >",
            " ",
            "0",
            ":",
            " \n\t",
            "\t",
            "r",
            " =",
            " n",
            " %",
            " ",
            "1",
            "0",
            "\n\t",
            "\t",
            "if",
            " r",
            " %",
            " ",
            "2",
            " ==",
            " ",
            "0",
            ":",
            " \n\t\t",
            "\t",
            "sum",
            "_",
            "even",
            " +=",
            " r",
            "\n\t",
            "\t",
            "else",
            ":",
            " \n\t\t",
            "\t",
            "sum",
            "_",
            "odd",
            " +=",
            " r",
            "\n\t",
            "\t",
            "n",
            " =",
            " n",
            " //",
            " ",
            "1",
            "0",
            "\n",
            "\t",
            "return",
            " sum",
            "_",
            "even",
            " -",
            " sum",
            "_",
            "odd",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 78,
        "prompt": "Write a python function to find number of integers with odd number of set bits.\n\ndef count_With_Odd_SetBits(n): \n",
        "answer": "def count_With_Odd_SetBits(n): \n\tcount = 0\n\twhile n: \n\t\tcount += n & 1\n\t\tn >>= 1\n\treturn count \n\n",
        "test_list": [
            "assert count_With_Odd_SetBits(5) == 3",
            "assert count_With_Odd_SetBits(10) == 5",
            "assert count_With_Odd_SetBits(15) == 8"
        ],
        "answer_list": [
            "\t",
            "count",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "while",
            " n",
            ":",
            " \n\t",
            "\t",
            "count",
            " +=",
            " n",
            " &",
            " ",
            "1",
            "\n\t",
            "\t",
            "n",
            " >>=",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " count",
            " \n",
            "\n",
            "n"
        ]
    },
    {
        "task_id": 79,
        "prompt": "Write a python function to check whether the length of the word is odd or not.\n\ndef word_len(s): \n",
        "answer": "def word_len(s): \n\tif len(s)%2==0:\n\t\treturn \"even\"\n\telse:\n\t\treturn \"odd\"\n\n",
        "test_list": [
            "assert word_len(\"Hadoop\") == False",
            "assert word_len(\"great\") == True",
            "assert word_len(\"structure\") == True"
        ],
        "answer_list": [
            "\t",
            "if",
            " len",
            "(",
            "s",
            ")%",
            "2",
            "==",
            "0",
            ":",
            "\n\t",
            "\t",
            "return",
            " \"",
            "even",
            "\"",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "return",
            " \"",
            "odd",
            "\"",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 80,
        "prompt": "Write a python function to find the nth tetrahedral number.\n\ndef tetrahedral_number(n): \n",
        "answer": "def tetrahedral_number(n): \n\treturn (n*(n+1)*(n+2)*(n+3))//2\n\n",
        "test_list": [
            "assert tetrahedral_number(5) == 35.0",
            "assert tetrahedral_number(6) == 56.0",
            "assert tetrahedral_number(7) == 84.0"
        ],
        "answer_list": [
            "\t",
            "return",
            " (",
            "n",
            "*(",
            "n",
            "+",
            "1",
            ")*(",
            "n",
            "+",
            "2",
            ")*(",
            "n",
            "+",
            "3",
            "))",
            "//",
            "2",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 81,
        "prompt": "Write a python function to zip the two given tuples.\n\ndef zip_tuples(test_tup1, test_tup2):\n",
        "answer": "def zip_tuples(test_tup1, test_tup2):\n\treturn zip(test_tup1, test_tup2)\n\n",
        "test_list": [
            "assert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]",
            "assert zip_tuples((8, 9, 5, 6, 10, 11),(2, 6, 7) ) == [(8, 2), (9, 6), (5, 7), (6, 2), (10, 6), (11, 7)]",
            "assert zip_tuples((9, 10, 6, 7, 11, 12),(3, 7, 8) ) == [(9, 3), (10, 7), (6, 8), (7, 3), (11, 7), (12, 8)]"
        ],
        "answer_list": [
            "\t",
            "return",
            " zip",
            "(",
            "test",
            "_",
            "tup",
            "1",
            ",",
            " test",
            "_",
            "tup",
            "2",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 82,
        "prompt": "Write a python function to find the volume of a sphere.\n\ndef volume_sphere(r):\n",
        "answer": "def volume_sphere(r):\n\treturn (4/3)*3.14*(r**3)\n\n",
        "test_list": [
            "assert volume_sphere(10)==4188.790204786391",
            "assert volume_sphere(25)==65449.84694978735",
            "assert volume_sphere(20)==33510.32163829113"
        ],
        "answer_list": [
            "\t",
            "return",
            " (",
            "4",
            "/",
            "3",
            ")*",
            "3",
            ".",
            "1",
            "4",
            "*(",
            "r",
            "**",
            "3",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 83,
        "prompt": "Write a python function to find the character made by adding all the characters of the given string.\n\ndef get_Char(strr):  \n",
        "answer": "def get_Char(strr):  \n\tsum = 0\n\tfor i in strr:\n\t\tsum += ord(i)\n\treturn chr(sum)\n\n",
        "test_list": [
            "assert get_Char(\"abc\") == \"f\"",
            "assert get_Char(\"gfg\") == \"t\"",
            "assert get_Char(\"ab\") == \"c\""
        ],
        "answer_list": [
            "\t",
            "sum",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " st",
            "rr",
            ":",
            "\n\t",
            "\t",
            "sum",
            " +=",
            " ord",
            "(",
            "i",
            ")",
            "\n",
            "\t",
            "return",
            " chr",
            "(",
            "sum",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 84,
        "prompt": "Write a python function to find the n-th number in newman conway sequence.\n\ndef sequence(n): \n",
        "answer": "def sequence(n): \n\tif n == 0: \n\t\treturn 0\n\tif n == 1: \n\t\treturn 1\n\telse: \n\t\treturn sequence(n-1) + sequence(n-2)\n\n",
        "test_list": [
            "assert sequence(10) == 6",
            "assert sequence(2) == 1",
            "assert sequence(3) == 2"
        ],
        "answer_list": [
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "0",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "0",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "1",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "1",
            "\n",
            "\t",
            "else",
            ":",
            " \n\t",
            "\t",
            "return",
            " sequence",
            "(",
            "n",
            "-",
            "1",
            ")",
            " +",
            " sequence",
            "(",
            "n",
            "-",
            "2",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 85,
        "prompt": "Write a python function to find the surface area of a sphere.\n\ndef surfacearea_sphere(r):\n",
        "answer": "def surfacearea_sphere(r):\n\treturn 4*math.pi*r**2\n\n",
        "test_list": [
            "assert surfacearea_sphere(10)==1256.6370614359173",
            "assert surfacearea_sphere(15)==2827.4333882308138",
            "assert surfacearea_sphere(20)==5026.548245743669"
        ],
        "answer_list": [
            "\t",
            "return",
            " ",
            "4",
            "*",
            "math",
            ".",
            "pi",
            "*",
            "r",
            "**",
            "2",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 86,
        "prompt": "Write a python function to find nth centered hexagonal number.\n\ndef centered_hexagonal_number(n):\n",
        "answer": "def centered_hexagonal_number(n):\n\treturn (n * (2 * n - 1))\n\n",
        "test_list": [
            "assert centered_hexagonal_number(10) == 271",
            "assert centered_hexagonal_number(2) == 7",
            "assert centered_hexagonal_number(9) == 217"
        ],
        "answer_list": [
            "\t",
            "return",
            " (",
            "n",
            " *",
            " (",
            "2",
            " *",
            " n",
            " -",
            " ",
            "1",
            "))",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 87,
        "prompt": "Write a python function to merge three dictionaries into a single expression.\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n",
        "answer": "def merge_dictionaries_three(dict1,dict2, dict3):\n\treturn {**dict1, **dict2, **dict3}\n\n",
        "test_list": [
            "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}",
            "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})=={'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}",
            "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{\"L\":\"lavender\",\"B\":\"Blue\"},{ \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}"
        ],
        "answer_list": [
            "\t",
            "return",
            " {",
            "**",
            "dict",
            "1",
            ",",
            " **",
            "dict",
            "2",
            ",",
            " **",
            "dict",
            "3",
            "}",
            "\n",
            "\n",
            "#"
        ]
    },
    {
        "task_id": 88,
        "prompt": "Write a python function to get the frequency of the elements in a list.\n\ndef freq_count(list1):\n",
        "answer": "def freq_count(list1):\n\tdict1 = {}\n\tfor i in list1:\n\t\tif i in dict1:\n\t\t\tdict1[i] += 1\n\t\telse:\n\t\t\tdict1[i] = 1\n\treturn dict1\n\n",
        "test_list": [
            "assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) ",
            "assert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3}) ",
            "assert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2}) "
        ],
        "answer_list": [
            "\t",
            "dict",
            "1",
            " =",
            " {}",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " list",
            "1",
            ":",
            "\n\t",
            "\t",
            "if",
            " i",
            " in",
            " dict",
            "1",
            ":",
            "\n\t\t",
            "\t",
            "dict",
            "1",
            "[",
            "i",
            "]",
            " +=",
            " ",
            "1",
            "\n\t",
            "\t",
            "else",
            ":",
            "\n\t\t",
            "\t",
            "dict",
            "1",
            "[",
            "i",
            "]",
            " =",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " dict",
            "1",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 89,
        "prompt": "Write a python function to find the closest smaller number than n.\n\ndef closest_num(N):\n",
        "answer": "def closest_num(N):\n\tif N == 0:\n\t\treturn 0\n\tif N < 0:\n\t\treturn -1\n\tif N == 1:\n\t\treturn 1\n\tif N == 2:\n\t\treturn 2\n\tif N == 3:\n\t\treturn 3\n\tif N == 4:\n\t\treturn 4\n\tif N == 5:\n\t\treturn 5\n\tif N == 6:\n\t\treturn 6\n\tif N == 7:\n\t\treturn 7\n\tif N == 8:\n\t\treturn 8\n\tif N == 9:\n\t\treturn 9\n\tif N == 10:\n\t\treturn 10\n\tif N == 11:\n\t\treturn 11\n\tif N == 12:\n\t\treturn 12\n\tif N == 13:\n\t\treturn 13\n\tif N == 14:\n\t\treturn 14\n\tif N == 15:\n\t\treturn 15\n\tif N == 16:\n\t\treturn 16\n\tif N == 17:\n\t\treturn 17\n\tif N == 18:\n\t\treturn 18\n\tif N == 19:\n\t\treturn 19\n\tif N == 20:\n\t\treturn 20\n\tif N == 21:\n\t\treturn 21\n\tif N == 22:\n\t\treturn 22\n\tif N == 23:\n\t\treturn 23\n\tif N == 24:\n\t\treturn 24\n\tif N == 25:\n\t\treturn 25\n\tif N == 26:\n\t\treturn 26\n\tif N == 27:\n\t\treturn 27\n\tif N == 28:\n\t\treturn 28\n\tif N == 29:\n\t\treturn 29\n\tif N == 30:\n\t\treturn 30\n\tif N == 31:\n\t\treturn 31\n\tif N == 32:\n\t\treturn 32\n\tif N == 33:\n\t\treturn 33\n\tif N == 34:\n\t\treturn 34\n\tif N == 35:\n\t\treturn 35\n\tif N == 36:\n\t\treturn 36\n\tif N == 37:\n\t\treturn 37\n\tif N == 38:\n\t\treturn 38\n\tif N == 39:\n\t\treturn 39\n\tif N == 40:\n\t\treturn 40\n\tif N == 41:\n\t\treturn 41\n\tif N == 42:\n\t\treturn 42\n\tif N == 43:\n\t\treturn 43\n\tif N == 44:\n\t\treturn 44\n\tif N == 45:\n\t\treturn 45\n\tif N == 46:\n\t\treturn 46\n\tif N == 47:\n\t\treturn 47\n\tif N == 48:\n\t\treturn 48\n\tif N == 49:\n\t\treturn 49\n\tif N == 50:\n\t\treturn 50\n\tif N == 51:\n\t\treturn 51\n\tif N == 52:\n\t\treturn 52\n\tif N == 53:\n\t\treturn 53\n\tif N == 54:\n\t\treturn 54\n\tif N == 55:\n\t\treturn 55\n\tif N == 56:\n\t\treturn 56\n\tif N == 57:\n\t\treturn 57\n\tif N == 58:\n\t\treturn 58\n\tif N == 59:\n\t\treturn 59\n\tif N == 60:\n\t\treturn 60\n\tif N == 61:\n\t\treturn 61\n\tif N == 62:\n\t\treturn 62\n\tif N == 63:\n\t\treturn 63\n\tif N == 64:\n\t\treturn 64\n\tif N == 65:\n\t\treturn 65\n\tif N == 66:\n\t\treturn 66\n\tif N == 67:\n\t\treturn 67\n\tif N == 68:\n\t\treturn",
        "test_list": [
            "assert closest_num(11) == 10",
            "assert closest_num(7) == 6",
            "assert closest_num(12) == 11"
        ],
        "answer_list": [
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "0",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "0",
            "\n",
            "\t",
            "if",
            " N",
            " <",
            " ",
            "0",
            ":",
            "\n\t",
            "\t",
            "return",
            " -",
            "1",
            "\n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "1",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "\n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "2",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "2",
            "\n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "3",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "3",
            "\n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "4",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "4",
            "\n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "5",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "5",
            "\n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "6",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "6",
            "\n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "7",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "7",
            "\n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "8",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "8",
            "\n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "9",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "9",
            "\n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "1",
            "0",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "0",
            "\n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "1",
            "1",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "1",
            "\n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "1",
            "2",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "2",
            "\n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "1",
            "3",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "3",
            "\n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "1",
            "4",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "4",
            "\n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "1",
            "5",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "5",
            "\n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "1",
            "6",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "6",
            "\n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "1",
            "7",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "7",
            "\n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "1",
            "8",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "8",
            "\n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "1",
            "9",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "9",
            "\n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "2",
            "0",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "2",
            "0",
            "\n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "2",
            "1",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "2",
            "1",
            "\n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "2",
            "2",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "2",
            "2",
            "\n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "2",
            "3",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "2",
            "3",
            "\n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "2",
            "4",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "2",
            "4",
            "\n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "2",
            "5",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "2",
            "5",
            "\n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "2",
            "6",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "2",
            "6",
            "\n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "2",
            "7",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "2",
            "7",
            "\n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "2",
            "8",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "2",
            "8",
            "\n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "2",
            "9",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "2",
            "9",
            "\n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "3",
            "0",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "3",
            "0",
            "\n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "3",
            "1",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "3",
            "1",
            "\n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "3",
            "2",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "3",
            "2",
            "\n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "3",
            "3",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "3",
            "3",
            "\n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "3",
            "4",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "3",
            "4",
            "\n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "3",
            "5",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "3",
            "5",
            "\n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "3",
            "6",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "3",
            "6",
            "\n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "3",
            "7",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "3",
            "7",
            "\n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "3",
            "8",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "3",
            "8",
            "\n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "3",
            "9",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "3",
            "9",
            "\n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "4",
            "0",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "4",
            "0",
            "\n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "4",
            "1",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "4",
            "1",
            "\n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "4",
            "2",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "4",
            "2",
            "\n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "4",
            "3",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "4",
            "3",
            "\n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "4",
            "4",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "4",
            "4",
            "\n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "4",
            "5",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "4",
            "5",
            "\n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "4",
            "6",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "4",
            "6",
            "\n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "4",
            "7",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "4",
            "7",
            "\n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "4",
            "8",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "4",
            "8",
            "\n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "4",
            "9",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "4",
            "9",
            "\n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "5",
            "0",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "5",
            "0",
            "\n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "5",
            "1",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "5",
            "1",
            "\n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "5",
            "2",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "5",
            "2",
            "\n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "5",
            "3",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "5",
            "3",
            "\n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "5",
            "4",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "5",
            "4",
            "\n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "5",
            "5",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "5",
            "5",
            "\n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "5",
            "6",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "5",
            "6",
            "\n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "5",
            "7",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "5",
            "7",
            "\n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "5",
            "8",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "5",
            "8",
            "\n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "5",
            "9",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "5",
            "9",
            "\n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "6",
            "0",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "6",
            "0",
            "\n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "6",
            "1",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "6",
            "1",
            "\n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "6",
            "2",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "6",
            "2",
            "\n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "6",
            "3",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "6",
            "3",
            "\n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "6",
            "4",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "6",
            "4",
            "\n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "6",
            "5",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "6",
            "5",
            "\n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "6",
            "6",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "6",
            "6",
            "\n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "6",
            "7",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "6",
            "7",
            "\n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "6",
            "8",
            ":",
            "\n\t",
            "\t",
            "return"
        ]
    },
    {
        "task_id": 90,
        "prompt": "Write a python function to find the length of the longest word.\n\ndef len_log(list1):\n",
        "answer": "def len_log(list1):\n\tlist1.sort(key=len)\n\treturn len(list1[-1])\n\n",
        "test_list": [
            "assert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7",
            "assert len_log([\"a\",\"ab\",\"abc\"]) == 3",
            "assert len_log([\"small\",\"big\",\"tall\"]) == 5"
        ],
        "answer_list": [
            "\t",
            "list",
            "1",
            ".",
            "sort",
            "(",
            "key",
            "=",
            "len",
            ")",
            "\n",
            "\t",
            "return",
            " len",
            "(",
            "list",
            "1",
            "[-",
            "1",
            "])",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 91,
        "prompt": "Write a python function to check if a substring is present in a given list of string values.\n\ndef find_substring(str1, sub_str):\n",
        "answer": "def find_substring(str1, sub_str):\n\tif sub_str in str1:\n\t\treturn True\n\telse:\n\t\treturn False\n\n",
        "test_list": [
            "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True",
            "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"abc\")==False",
            "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ange\")==True"
        ],
        "answer_list": [
            "\t",
            "if",
            " sub",
            "_",
            "str",
            " in",
            " str",
            "1",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 92,
        "prompt": "Write a python function to check whether the given number is undulating or not.\n\ndef is_undulating(n): \n",
        "answer": "def is_undulating(n): \n\tif n == 1: \n\t\treturn True\n\tif n % 2 == 0: \n\t\treturn is_undulating(n // 2) \n\telse: \n\t\treturn is_undulating(3 * n + 1) \n\n",
        "test_list": [
            "assert is_undulating(\"1212121\") == True",
            "assert is_undulating(\"1991\") == False",
            "assert is_undulating(\"121\") == True"
        ],
        "answer_list": [
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "1",
            ":",
            " \n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " n",
            " %",
            " ",
            "2",
            " ==",
            " ",
            "0",
            ":",
            " \n\t",
            "\t",
            "return",
            " is",
            "_",
            "und",
            "ulating",
            "(",
            "n",
            " //",
            " ",
            "2",
            ")",
            " \n",
            "\t",
            "else",
            ":",
            " \n\t",
            "\t",
            "return",
            " is",
            "_",
            "und",
            "ulating",
            "(",
            "3",
            " *",
            " n",
            " +",
            " ",
            "1",
            ")",
            " \n",
            "\n",
            "#"
        ]
    },
    {
        "task_id": 93,
        "prompt": "Write a python function to calculate the value of 'a' to the power 'b'.\n\ndef power(a,b):\n",
        "answer": "def power(a,b):\n\treturn a**b\n\n",
        "test_list": [
            "assert power(3,4) == 81",
            "assert power(2,3) == 8",
            "assert power(5,5) == 3125"
        ],
        "answer_list": [
            "\t",
            "return",
            " a",
            "**",
            "b",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 94,
        "prompt": "Write a python function to extract the index minimum value record from the given tuples.\n\ndef index_minimum(test_list):\n",
        "answer": "def index_minimum(test_list):\n\treturn min(test_list, key=lambda x: x[1])\n\n",
        "test_list": [
            "assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'",
            "assert index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'",
            "assert index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'"
        ],
        "answer_list": [
            "\t",
            "return",
            " min",
            "(",
            "test",
            "_",
            "list",
            ",",
            " key",
            "=",
            "lambda",
            " x",
            ":",
            " x",
            "[",
            "1",
            "])",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 95,
        "prompt": "Write a python function to find the minimum length of sublist.\n\ndef Find_Min_Length(lst):  \n",
        "answer": "def Find_Min_Length(lst):  \n\tmin_len = len(lst)  \n\tfor i in range(len(lst)):  \n\t\tfor j in range(i+1, len(lst)):  \n\t\t\tif len(lst[i:j]) < min_len:  \n\t\t\t\tmin_len = len(lst[i:j])  \n\treturn min_len  \n\n",
        "test_list": [
            "assert Find_Min_Length([[1],[1,2]]) == 1",
            "assert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2",
            "assert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3"
        ],
        "answer_list": [
            "\t",
            "min",
            "_",
            "len",
            " =",
            " len",
            "(",
            "lst",
            ")",
            "  \n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "len",
            "(",
            "lst",
            ")):",
            "  \n\t",
            "\t",
            "for",
            " j",
            " in",
            " range",
            "(",
            "i",
            "+",
            "1",
            ",",
            " len",
            "(",
            "lst",
            ")):",
            "  ",
            "\n\t\t",
            "\t",
            "if",
            " len",
            "(",
            "lst",
            "[",
            "i",
            ":",
            "j",
            "])",
            " <",
            " min",
            "_",
            "len",
            ":",
            "  ",
            "\n\t\t\t",
            "\t",
            "min",
            "_",
            "len",
            " =",
            " len",
            "(",
            "lst",
            "[",
            "i",
            ":",
            "j",
            "])",
            "  \n",
            "\t",
            "return",
            " min",
            "_",
            "len",
            "  \n",
            "\n",
            "lst"
        ]
    },
    {
        "task_id": 96,
        "prompt": "Write a python function to find the number of divisors of a given integer.\n\ndef divisor(n):\n",
        "answer": "def divisor(n):\n\tcount = 0\n\tfor i in range(1,n+1):\n\t\tif n%i == 0:\n\t\t\tcount += 1\n\treturn count\n\n",
        "test_list": [
            "assert divisor(15) == 4 ",
            "assert divisor(12) == 6",
            "assert divisor(9) == 3"
        ],
        "answer_list": [
            "\t",
            "count",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "1",
            ",",
            "n",
            "+",
            "1",
            "):",
            "\n\t",
            "\t",
            "if",
            " n",
            "%",
            "i",
            " ==",
            " ",
            "0",
            ":",
            "\n\t\t",
            "\t",
            "count",
            " +=",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " count",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 97,
        "prompt": "Write a python function to find frequency count of list of lists.\n\ndef frequency_lists(list1):\n",
        "answer": "def frequency_lists(list1):\n\tfreq_dict = {}\n\tfor i in list1:\n\t\tif i not in freq_dict:\n\t\t\tfreq_dict[i] = 1\n\t\telse:\n\t\t\tfreq_dict[i] += 1\n\treturn freq_dict\n\n",
        "test_list": [
            "assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}",
            "assert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}",
            "assert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}"
        ],
        "answer_list": [
            "\t",
            "freq",
            "_",
            "dict",
            " =",
            " {}",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " list",
            "1",
            ":",
            "\n\t",
            "\t",
            "if",
            " i",
            " not",
            " in",
            " freq",
            "_",
            "dict",
            ":",
            "\n\t\t",
            "\t",
            "freq",
            "_",
            "dict",
            "[",
            "i",
            "]",
            " =",
            " ",
            "1",
            "\n\t",
            "\t",
            "else",
            ":",
            "\n\t\t",
            "\t",
            "freq",
            "_",
            "dict",
            "[",
            "i",
            "]",
            " +=",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " freq",
            "_",
            "dict",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 98,
        "prompt": "Write a python function to multiply all the numbers in a list and divide with the length of the list.\n\ndef multiply_num(numbers):  \n",
        "answer": "def multiply_num(numbers):  \n\ttotal = 1\n\tfor num in numbers:\n\t\ttotal *= num\n\treturn total/len(numbers)\n\n",
        "test_list": [
            "assert multiply_num((8, 2, 3, -1, 7))==-67.2",
            "assert multiply_num((-10,-20,-30))==-2000.0",
            "assert multiply_num((19,15,18))==1710.0"
        ],
        "answer_list": [
            "\t",
            "total",
            " =",
            " ",
            "1",
            "\n",
            "\t",
            "for",
            " num",
            " in",
            " numbers",
            ":",
            "\n\t",
            "\t",
            "total",
            " *=",
            " num",
            "\n",
            "\t",
            "return",
            " total",
            "/",
            "len",
            "(",
            "numbers",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 99,
        "prompt": "Write a python function to convert the given decimal number to its binary equivalent.\n\ndef decimal_to_binary(n): \n",
        "answer": "def decimal_to_binary(n): \n\tif n > 1: \n\t\tdecimal_to_binary(n // 2) \n\tprint(n % 2, end = '') \n\n",
        "test_list": [
            "assert decimal_to_binary(8) == '1000'",
            "assert decimal_to_binary(18) == '10010'",
            "assert decimal_to_binary(7) == '111' "
        ],
        "answer_list": [
            "\t",
            "if",
            " n",
            " >",
            " ",
            "1",
            ":",
            " \n\t",
            "\t",
            "decimal",
            "_",
            "to",
            "_",
            "binary",
            "(",
            "n",
            " //",
            " ",
            "2",
            ")",
            " \n",
            "\t",
            "print",
            "(",
            "n",
            " %",
            " ",
            "2",
            ",",
            " end",
            " =",
            " '')",
            " \n",
            "\n",
            "decimal"
        ]
    },
    {
        "task_id": 100,
        "prompt": "Write a python function to find the next smallest palindrome of a specified number.\n\ndef next_smallest_palindrome(num):\n",
        "answer": "def next_smallest_palindrome(num):\n\tif num < 0:\n\t\treturn -1\n\tif num < 10:\n\t\treturn 1\n\tif num == 10:\n\t\treturn 11\n\tif num % 10 == 0:\n\t\treturn num + 1\n\tif num % 11 == 0:\n\t\treturn num + 2\n\tif num % 10 == 1:\n\t\treturn num + 11\n\tif num % 11 == 1:\n\t\treturn num + 10\n\tif num % 10 == 2:\n\t\treturn num + 9\n\tif num % 11 == 2:\n\t\treturn num + 8\n\tif num % 10 == 3:\n\t\treturn num + 7\n\tif num % 11 == 3:\n\t\treturn num + 6\n\tif num % 10 == 4:\n\t\treturn num + 5\n\tif num % 11 == 4:\n\t\treturn num + 4\n\tif num % 10 == 5:\n\t\treturn num + 3\n\tif num % 11 == 5:\n\t\treturn num + 2\n\tif num % 10 == 6:\n\t\treturn num + 1\n\tif num % 11 == 6:\n\t\treturn num + 11\n\tif num % 10 == 7:\n\t\treturn num + 10\n\tif num % 11 == 7:\n\t\treturn num + 9\n\tif num % 10 == 8:\n\t\treturn num + 9\n\tif num % 11 == 8:\n\t\treturn num + 8\n\tif num % 10 == 9:\n\t\treturn num + 7\n\tif num % 11 == 9:\n\t\treturn num + 6\n\tif num % 10 == 10:\n\t\treturn num + 5\n\tif num % 11 == 10:\n\t\treturn num + 4\n\tif num % 10 == 11:\n\t\treturn num + 3\n\tif num % 11 == 11:\n\t\treturn num + 2\n\tif num % 10 == 12:\n\t\treturn num + 1\n\tif num % 11 == 12:\n\t\treturn num + 11\n\tif num % 10 == 13:\n\t\treturn num + 10\n\tif num % 11 == 13:\n\t\treturn num + 9\n\tif num % 10 == 14:\n\t\treturn num + 9\n\tif num % 11 == 14:\n\t\treturn num + 8\n\tif num % 10 == 15:\n\t\treturn num + 7\n\tif num % 11 == 15:\n\t\treturn num + 6\n\tif num % 10 == 16:\n\t\treturn num + 5\n\tif num % 11 == 16:\n\t\treturn num + 4\n\tif num % 10 == 17:\n\t\treturn num + 3\n\tif num % 11 == 17:\n\t\treturn num + 2\n\tif num % 10 == 18:\n\t\treturn num + 1\n\tif num % 11 == 18:\n\t\treturn num + 11\n\tif num % 10 == 19:\n\t\treturn num + 10\n\tif num % 11 == 19:\n\t\treturn num + 9\n\tif num % 10 == 20:\n\t\treturn num + 9\n\tif num % 11 == 20:\n\t\treturn num + 8\n\tif num % 10 == 21:\n\t\treturn num + 7\n\tif num % 11 == 21:\n\t\treturn num + 6\n\tif num % 10 == 22:\n\t\treturn num + 5\n\tif num % 11 == 22:\n\t\treturn num + 4\n\tif num % 10 == 23:\n\t\treturn num + 3\n\tif num % 11 == 23:\n\t\treturn num + 2\n\tif num % 10 == 24:\n\t\treturn num + 1\n\tif num % 11 == 24:\n\t\t",
        "test_list": [
            "assert next_smallest_palindrome(99)==101",
            "assert next_smallest_palindrome(1221)==1331",
            "assert next_smallest_palindrome(120)==121"
        ],
        "answer_list": [
            "\t",
            "if",
            " num",
            " <",
            " ",
            "0",
            ":",
            "\n\t",
            "\t",
            "return",
            " -",
            "1",
            "\n",
            "\t",
            "if",
            " num",
            " <",
            " ",
            "1",
            "0",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "\n",
            "\t",
            "if",
            " num",
            " ==",
            " ",
            "1",
            "0",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "1",
            "\n",
            "\t",
            "if",
            " num",
            " %",
            " ",
            "1",
            "0",
            " ==",
            " ",
            "0",
            ":",
            "\n\t",
            "\t",
            "return",
            " num",
            " +",
            " ",
            "1",
            "\n",
            "\t",
            "if",
            " num",
            " %",
            " ",
            "1",
            "1",
            " ==",
            " ",
            "0",
            ":",
            "\n\t",
            "\t",
            "return",
            " num",
            " +",
            " ",
            "2",
            "\n",
            "\t",
            "if",
            " num",
            " %",
            " ",
            "1",
            "0",
            " ==",
            " ",
            "1",
            ":",
            "\n\t",
            "\t",
            "return",
            " num",
            " +",
            " ",
            "1",
            "1",
            "\n",
            "\t",
            "if",
            " num",
            " %",
            " ",
            "1",
            "1",
            " ==",
            " ",
            "1",
            ":",
            "\n\t",
            "\t",
            "return",
            " num",
            " +",
            " ",
            "1",
            "0",
            "\n",
            "\t",
            "if",
            " num",
            " %",
            " ",
            "1",
            "0",
            " ==",
            " ",
            "2",
            ":",
            "\n\t",
            "\t",
            "return",
            " num",
            " +",
            " ",
            "9",
            "\n",
            "\t",
            "if",
            " num",
            " %",
            " ",
            "1",
            "1",
            " ==",
            " ",
            "2",
            ":",
            "\n\t",
            "\t",
            "return",
            " num",
            " +",
            " ",
            "8",
            "\n",
            "\t",
            "if",
            " num",
            " %",
            " ",
            "1",
            "0",
            " ==",
            " ",
            "3",
            ":",
            "\n\t",
            "\t",
            "return",
            " num",
            " +",
            " ",
            "7",
            "\n",
            "\t",
            "if",
            " num",
            " %",
            " ",
            "1",
            "1",
            " ==",
            " ",
            "3",
            ":",
            "\n\t",
            "\t",
            "return",
            " num",
            " +",
            " ",
            "6",
            "\n",
            "\t",
            "if",
            " num",
            " %",
            " ",
            "1",
            "0",
            " ==",
            " ",
            "4",
            ":",
            "\n\t",
            "\t",
            "return",
            " num",
            " +",
            " ",
            "5",
            "\n",
            "\t",
            "if",
            " num",
            " %",
            " ",
            "1",
            "1",
            " ==",
            " ",
            "4",
            ":",
            "\n\t",
            "\t",
            "return",
            " num",
            " +",
            " ",
            "4",
            "\n",
            "\t",
            "if",
            " num",
            " %",
            " ",
            "1",
            "0",
            " ==",
            " ",
            "5",
            ":",
            "\n\t",
            "\t",
            "return",
            " num",
            " +",
            " ",
            "3",
            "\n",
            "\t",
            "if",
            " num",
            " %",
            " ",
            "1",
            "1",
            " ==",
            " ",
            "5",
            ":",
            "\n\t",
            "\t",
            "return",
            " num",
            " +",
            " ",
            "2",
            "\n",
            "\t",
            "if",
            " num",
            " %",
            " ",
            "1",
            "0",
            " ==",
            " ",
            "6",
            ":",
            "\n\t",
            "\t",
            "return",
            " num",
            " +",
            " ",
            "1",
            "\n",
            "\t",
            "if",
            " num",
            " %",
            " ",
            "1",
            "1",
            " ==",
            " ",
            "6",
            ":",
            "\n\t",
            "\t",
            "return",
            " num",
            " +",
            " ",
            "1",
            "1",
            "\n",
            "\t",
            "if",
            " num",
            " %",
            " ",
            "1",
            "0",
            " ==",
            " ",
            "7",
            ":",
            "\n\t",
            "\t",
            "return",
            " num",
            " +",
            " ",
            "1",
            "0",
            "\n",
            "\t",
            "if",
            " num",
            " %",
            " ",
            "1",
            "1",
            " ==",
            " ",
            "7",
            ":",
            "\n\t",
            "\t",
            "return",
            " num",
            " +",
            " ",
            "9",
            "\n",
            "\t",
            "if",
            " num",
            " %",
            " ",
            "1",
            "0",
            " ==",
            " ",
            "8",
            ":",
            "\n\t",
            "\t",
            "return",
            " num",
            " +",
            " ",
            "9",
            "\n",
            "\t",
            "if",
            " num",
            " %",
            " ",
            "1",
            "1",
            " ==",
            " ",
            "8",
            ":",
            "\n\t",
            "\t",
            "return",
            " num",
            " +",
            " ",
            "8",
            "\n",
            "\t",
            "if",
            " num",
            " %",
            " ",
            "1",
            "0",
            " ==",
            " ",
            "9",
            ":",
            "\n\t",
            "\t",
            "return",
            " num",
            " +",
            " ",
            "7",
            "\n",
            "\t",
            "if",
            " num",
            " %",
            " ",
            "1",
            "1",
            " ==",
            " ",
            "9",
            ":",
            "\n\t",
            "\t",
            "return",
            " num",
            " +",
            " ",
            "6",
            "\n",
            "\t",
            "if",
            " num",
            " %",
            " ",
            "1",
            "0",
            " ==",
            " ",
            "1",
            "0",
            ":",
            "\n\t",
            "\t",
            "return",
            " num",
            " +",
            " ",
            "5",
            "\n",
            "\t",
            "if",
            " num",
            " %",
            " ",
            "1",
            "1",
            " ==",
            " ",
            "1",
            "0",
            ":",
            "\n\t",
            "\t",
            "return",
            " num",
            " +",
            " ",
            "4",
            "\n",
            "\t",
            "if",
            " num",
            " %",
            " ",
            "1",
            "0",
            " ==",
            " ",
            "1",
            "1",
            ":",
            "\n\t",
            "\t",
            "return",
            " num",
            " +",
            " ",
            "3",
            "\n",
            "\t",
            "if",
            " num",
            " %",
            " ",
            "1",
            "1",
            " ==",
            " ",
            "1",
            "1",
            ":",
            "\n\t",
            "\t",
            "return",
            " num",
            " +",
            " ",
            "2",
            "\n",
            "\t",
            "if",
            " num",
            " %",
            " ",
            "1",
            "0",
            " ==",
            " ",
            "1",
            "2",
            ":",
            "\n\t",
            "\t",
            "return",
            " num",
            " +",
            " ",
            "1",
            "\n",
            "\t",
            "if",
            " num",
            " %",
            " ",
            "1",
            "1",
            " ==",
            " ",
            "1",
            "2",
            ":",
            "\n\t",
            "\t",
            "return",
            " num",
            " +",
            " ",
            "1",
            "1",
            "\n",
            "\t",
            "if",
            " num",
            " %",
            " ",
            "1",
            "0",
            " ==",
            " ",
            "1",
            "3",
            ":",
            "\n\t",
            "\t",
            "return",
            " num",
            " +",
            " ",
            "1",
            "0",
            "\n",
            "\t",
            "if",
            " num",
            " %",
            " ",
            "1",
            "1",
            " ==",
            " ",
            "1",
            "3",
            ":",
            "\n\t",
            "\t",
            "return",
            " num",
            " +",
            " ",
            "9",
            "\n",
            "\t",
            "if",
            " num",
            " %",
            " ",
            "1",
            "0",
            " ==",
            " ",
            "1",
            "4",
            ":",
            "\n\t",
            "\t",
            "return",
            " num",
            " +",
            " ",
            "9",
            "\n",
            "\t",
            "if",
            " num",
            " %",
            " ",
            "1",
            "1",
            " ==",
            " ",
            "1",
            "4",
            ":",
            "\n\t",
            "\t",
            "return",
            " num",
            " +",
            " ",
            "8",
            "\n",
            "\t",
            "if",
            " num",
            " %",
            " ",
            "1",
            "0",
            " ==",
            " ",
            "1",
            "5",
            ":",
            "\n\t",
            "\t",
            "return",
            " num",
            " +",
            " ",
            "7",
            "\n",
            "\t",
            "if",
            " num",
            " %",
            " ",
            "1",
            "1",
            " ==",
            " ",
            "1",
            "5",
            ":",
            "\n\t",
            "\t",
            "return",
            " num",
            " +",
            " ",
            "6",
            "\n",
            "\t",
            "if",
            " num",
            " %",
            " ",
            "1",
            "0",
            " ==",
            " ",
            "1",
            "6",
            ":",
            "\n\t",
            "\t",
            "return",
            " num",
            " +",
            " ",
            "5",
            "\n",
            "\t",
            "if",
            " num",
            " %",
            " ",
            "1",
            "1",
            " ==",
            " ",
            "1",
            "6",
            ":",
            "\n\t",
            "\t",
            "return",
            " num",
            " +",
            " ",
            "4",
            "\n",
            "\t",
            "if",
            " num",
            " %",
            " ",
            "1",
            "0",
            " ==",
            " ",
            "1",
            "7",
            ":",
            "\n\t",
            "\t",
            "return",
            " num",
            " +",
            " ",
            "3",
            "\n",
            "\t",
            "if",
            " num",
            " %",
            " ",
            "1",
            "1",
            " ==",
            " ",
            "1",
            "7",
            ":",
            "\n\t",
            "\t",
            "return",
            " num",
            " +",
            " ",
            "2",
            "\n",
            "\t",
            "if",
            " num",
            " %",
            " ",
            "1",
            "0",
            " ==",
            " ",
            "1",
            "8",
            ":",
            "\n\t",
            "\t",
            "return",
            " num",
            " +",
            " ",
            "1",
            "\n",
            "\t",
            "if",
            " num",
            " %",
            " ",
            "1",
            "1",
            " ==",
            " ",
            "1",
            "8",
            ":",
            "\n\t",
            "\t",
            "return",
            " num",
            " +",
            " ",
            "1",
            "1",
            "\n",
            "\t",
            "if",
            " num",
            " %",
            " ",
            "1",
            "0",
            " ==",
            " ",
            "1",
            "9",
            ":",
            "\n\t",
            "\t",
            "return",
            " num",
            " +",
            " ",
            "1",
            "0",
            "\n",
            "\t",
            "if",
            " num",
            " %",
            " ",
            "1",
            "1",
            " ==",
            " ",
            "1",
            "9",
            ":",
            "\n\t",
            "\t",
            "return",
            " num",
            " +",
            " ",
            "9",
            "\n",
            "\t",
            "if",
            " num",
            " %",
            " ",
            "1",
            "0",
            " ==",
            " ",
            "2",
            "0",
            ":",
            "\n\t",
            "\t",
            "return",
            " num",
            " +",
            " ",
            "9",
            "\n",
            "\t",
            "if",
            " num",
            " %",
            " ",
            "1",
            "1",
            " ==",
            " ",
            "2",
            "0",
            ":",
            "\n\t",
            "\t",
            "return",
            " num",
            " +",
            " ",
            "8",
            "\n",
            "\t",
            "if",
            " num",
            " %",
            " ",
            "1",
            "0",
            " ==",
            " ",
            "2",
            "1",
            ":",
            "\n\t",
            "\t",
            "return",
            " num",
            " +",
            " ",
            "7",
            "\n",
            "\t",
            "if",
            " num",
            " %",
            " ",
            "1",
            "1",
            " ==",
            " ",
            "2",
            "1",
            ":",
            "\n\t",
            "\t",
            "return",
            " num",
            " +",
            " ",
            "6",
            "\n",
            "\t",
            "if",
            " num",
            " %",
            " ",
            "1",
            "0",
            " ==",
            " ",
            "2",
            "2",
            ":",
            "\n\t",
            "\t",
            "return",
            " num",
            " +",
            " ",
            "5",
            "\n",
            "\t",
            "if",
            " num",
            " %",
            " ",
            "1",
            "1",
            " ==",
            " ",
            "2",
            "2",
            ":",
            "\n\t",
            "\t",
            "return",
            " num",
            " +",
            " ",
            "4",
            "\n",
            "\t",
            "if",
            " num",
            " %",
            " ",
            "1",
            "0",
            " ==",
            " ",
            "2",
            "3",
            ":",
            "\n\t",
            "\t",
            "return",
            " num",
            " +",
            " ",
            "3",
            "\n",
            "\t",
            "if",
            " num",
            " %",
            " ",
            "1",
            "1",
            " ==",
            " ",
            "2",
            "3",
            ":",
            "\n\t",
            "\t",
            "return",
            " num",
            " +",
            " ",
            "2",
            "\n",
            "\t",
            "if",
            " num",
            " %",
            " ",
            "1",
            "0",
            " ==",
            " ",
            "2",
            "4",
            ":",
            "\n\t",
            "\t",
            "return",
            " num",
            " +",
            " ",
            "1",
            "\n",
            "\t",
            "if",
            " num",
            " %",
            " ",
            "1",
            "1",
            " ==",
            " ",
            "2",
            "4",
            ":",
            "\n\t",
            "\t"
        ]
    },
    {
        "task_id": 101,
        "prompt": "Write a python function to find the kth element in the given array.\n\ndef kth_element(arr, n, k):\n",
        "answer": "def kth_element(arr, n, k):\n\treturn sorted(arr)[k-1]\n\n",
        "test_list": [
            "assert kth_element([12,3,5,7,19], 5, 2) == 3",
            "assert kth_element([17,24,8,23], 4, 3) == 8",
            "assert kth_element([16,21,25,36,4], 5, 4) == 36"
        ],
        "answer_list": [
            "\t",
            "return",
            " sorted",
            "(",
            "arr",
            ")[",
            "k",
            "-",
            "1",
            "]",
            "\n",
            "\n",
            "if"
        ]
    },
    {
        "task_id": 102,
        "prompt": "Write a python function to convert snake case string to camel case string.\n\ndef snake_to_camel(word):\n",
        "answer": "def snake_to_camel(word):\n\treturn ''.join(x.capitalize() or '_' for x in word.split('_'))\n\n",
        "test_list": [
            "assert snake_to_camel('python_program')=='PythonProgram'",
            "assert snake_to_camel('python_language')==('PythonLanguage')",
            "assert snake_to_camel('programming_language')==('ProgrammingLanguage')"
        ],
        "answer_list": [
            "\t",
            "return",
            " ''.",
            "join",
            "(",
            "x",
            ".",
            "capitalize",
            "()",
            " or",
            " '_'",
            " for",
            " x",
            " in",
            " word",
            ".",
            "split",
            "('_",
            "'))",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 103,
        "prompt": "Write a python function to find eulerian number a(n, m).\n\ndef eulerian_num(n, m): \n",
        "answer": "def eulerian_num(n, m): \n\treturn (n * (n + 1)) // 2 * m\n\n",
        "test_list": [
            "assert eulerian_num(3, 1) == 4",
            "assert eulerian_num(4, 1) == 11",
            "assert eulerian_num(5, 3) == 26"
        ],
        "answer_list": [
            "\t",
            "return",
            " (",
            "n",
            " *",
            " (",
            "n",
            " +",
            " ",
            "1",
            "))",
            " //",
            " ",
            "2",
            " *",
            " m",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 104,
        "prompt": "Write a python function to sort each sublist of strings in a given list of lists using lambda function.\n\ndef sort_sublists(input_list):\n",
        "answer": "def sort_sublists(input_list):\n\treturn sorted(input_list, key=lambda x: x[0])\n\n",
        "test_list": [
            "assert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]",
            "assert sort_sublists(([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]",
            "assert sort_sublists(([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]"
        ],
        "answer_list": [
            "\t",
            "return",
            " sorted",
            "(",
            "input",
            "_",
            "list",
            ",",
            " key",
            "=",
            "lambda",
            " x",
            ":",
            " x",
            "[",
            "0",
            "])",
            "\n",
            "\n",
            "input"
        ]
    },
    {
        "task_id": 105,
        "prompt": "Write a python function to count true booleans in the given list.\n\ndef count(lst):   \n",
        "answer": "def count(lst):   \n\treturn lst.count(True)\n\n",
        "test_list": [
            "assert count([True,False,True]) == 2",
            "assert count([False,False]) == 0",
            "assert count([True,True,True]) == 3"
        ],
        "answer_list": [
            "\t",
            "return",
            " lst",
            ".",
            "count",
            "(",
            "True",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 106,
        "prompt": "Write a python function to add the given list to the given tuples.\n\ndef add_lists(test_list, test_tup):\n",
        "answer": "def add_lists(test_list, test_tup):\n\treturn test_list + test_tup\n\n",
        "test_list": [
            "assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)",
            "assert add_lists([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)",
            "assert add_lists([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)"
        ],
        "answer_list": [
            "\t",
            "return",
            " test",
            "_",
            "list",
            " +",
            " test",
            "_",
            "tup",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 107,
        "prompt": "Write a python function to count hexadecimal numbers for a given range.\n\ndef count_Hexadecimal(L,R) :  \n",
        "answer": "def count_Hexadecimal(L,R) :  \n\treturn len([i for i in range(L,R+1) if len(hex(i))%2==0])\n\n",
        "test_list": [
            "assert count_Hexadecimal(10,15) == 6",
            "assert count_Hexadecimal(2,4) == 0",
            "assert count_Hexadecimal(15,16) == 1"
        ],
        "answer_list": [
            "\t",
            "return",
            " len",
            "([",
            "i",
            " for",
            " i",
            " in",
            " range",
            "(",
            "L",
            ",",
            "R",
            "+",
            "1",
            ")",
            " if",
            " len",
            "(",
            "hex",
            "(",
            "i",
            "))",
            "%",
            "2",
            "==",
            "0",
            "])",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 108,
        "prompt": "Write a python function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\n\ndef merge_sorted_list(num1,num2,num3):\n",
        "answer": "def merge_sorted_list(num1,num2,num3):\n\tq=[]\n\tq.append(num1)\n\tq.append(num2)\n\tq.append(num3)\n\theapq.heapify(q)\n\twhile len(q)>0:\n\t\tyield heapq.heappop(q)\n\n",
        "test_list": [
            "assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]",
            "assert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]",
            "assert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]"
        ],
        "answer_list": [
            "\t",
            "q",
            "=[]",
            "\n",
            "\t",
            "q",
            ".",
            "append",
            "(",
            "num",
            "1",
            ")",
            "\n",
            "\t",
            "q",
            ".",
            "append",
            "(",
            "num",
            "2",
            ")",
            "\n",
            "\t",
            "q",
            ".",
            "append",
            "(",
            "num",
            "3",
            ")",
            "\n",
            "\t",
            "heap",
            "q",
            ".",
            "heap",
            "ify",
            "(",
            "q",
            ")",
            "\n",
            "\t",
            "while",
            " len",
            "(",
            "q",
            ")>",
            "0",
            ":",
            "\n\t",
            "\t",
            "yield",
            " heap",
            "q",
            ".",
            "he",
            "app",
            "op",
            "(",
            "q",
            ")",
            "\n",
            "\n",
            "num"
        ]
    },
    {
        "task_id": 109,
        "prompt": "Write a python function to find the count of rotations of a binary string with odd value.\n\ndef odd_Equivalent(s,n): \n",
        "answer": "def odd_Equivalent(s,n): \n\tcount = 0\n\tfor i in range(n): \n\t\tif s[i]!= s[n-i-1]: \n\t\t\tcount += 1\n\treturn count \n\n",
        "test_list": [
            "assert odd_Equivalent(\"011001\",6) == 3",
            "assert odd_Equivalent(\"11011\",5) == 4",
            "assert odd_Equivalent(\"1010\",4) == 2"
        ],
        "answer_list": [
            "\t",
            "count",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "n",
            "):",
            " \n\t",
            "\t",
            "if",
            " s",
            "[",
            "i",
            "]",
            "!=",
            " s",
            "[",
            "n",
            "-",
            "i",
            "-",
            "1",
            "]:",
            " \n\t\t",
            "\t",
            "count",
            " +=",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " count",
            " \n",
            "\n",
            "s"
        ]
    },
    {
        "task_id": 110,
        "prompt": "Write a python function to extract the ranges that are missing from the given list with the given start range and end range values.\n\ndef extract_missing(test_list, strt_val, stop_val):\n",
        "answer": "def extract_missing(test_list, strt_val, stop_val):\n\treturn [i for i in range(strt_val, stop_val+1) if i not in test_list]\n\n",
        "test_list": [
            "assert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]",
            "assert extract_missing([(7, 2), (15, 19), (38, 50)], 5, 60) == [(5, 7), (2, 60), (2, 15), (19, 60), (19, 38), (50, 60)]",
            "assert extract_missing([(7, 2), (15, 19), (38, 50)], 1, 52) == [(1, 7), (2, 52), (2, 15), (19, 52), (19, 38), (50, 52)]"
        ],
        "answer_list": [
            "\t",
            "return",
            " [",
            "i",
            " for",
            " i",
            " in",
            " range",
            "(",
            "str",
            "t",
            "_",
            "val",
            ",",
            " stop",
            "_",
            "val",
            "+",
            "1",
            ")",
            " if",
            " i",
            " not",
            " in",
            " test",
            "_",
            "list",
            "]",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 111,
        "prompt": "Write a python function to find common elements in given nested lists. * list item * list item * list item * list item\n\ndef common_in_nested_lists(nestedlist):\n",
        "answer": "def common_in_nested_lists(nestedlist):\n\t# Your code goes here\n\tcommon_list = []\n\tfor i in nestedlist:\n\t\tfor j in nestedlist:\n\t\t\tif i == j:\n\t\t\t\tcommon_list.append(i)\n\treturn common_list\n\n",
        "test_list": [
            "assert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]",
            "assert common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]])==[5,23]",
            "assert common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]])==[4]"
        ],
        "answer_list": [
            "\t",
            "#",
            " Your",
            " code",
            " goes",
            " here",
            "\n",
            "\t",
            "common",
            "_",
            "list",
            " =",
            " []",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " nested",
            "list",
            ":",
            "\n\t",
            "\t",
            "for",
            " j",
            " in",
            " nested",
            "list",
            ":",
            "\n\t\t",
            "\t",
            "if",
            " i",
            " ==",
            " j",
            ":",
            "\n\t\t\t",
            "\t",
            "common",
            "_",
            "list",
            ".",
            "append",
            "(",
            "i",
            ")",
            "\n",
            "\t",
            "return",
            " common",
            "_",
            "list",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 112,
        "prompt": "Write a python function to find the perimeter of a cylinder.\n\ndef perimeter(diameter,height) : \n",
        "answer": "def perimeter(diameter,height) : \n\treturn 2 * math.pi * diameter + 2 * math.pi * diameter * height\n\n",
        "test_list": [
            "assert perimeter(2,4) == 12",
            "assert perimeter(1,2) == 6",
            "assert perimeter(3,1) == 8"
        ],
        "answer_list": [
            "\t",
            "return",
            " ",
            "2",
            " *",
            " math",
            ".",
            "pi",
            " *",
            " diameter",
            " +",
            " ",
            "2",
            " *",
            " math",
            ".",
            "pi",
            " *",
            " diameter",
            " *",
            " height",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 113,
        "prompt": "Write a python function to check if a string represents an integer or not.\n\ndef check_integer(text):\n",
        "answer": "def check_integer(text):\n\ttry:\n\t\tint(text)\n\t\treturn True\n\texcept ValueError:\n\t\treturn False\n\n",
        "test_list": [
            "assert check_integer(\"python\")==False",
            "assert check_integer(\"1\")==True",
            "assert check_integer(\"12345\")==True"
        ],
        "answer_list": [
            "\t",
            "try",
            ":",
            "\n\t",
            "\t",
            "int",
            "(",
            "text",
            ")",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "except",
            " ValueError",
            ":",
            "\n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 114,
        "prompt": "Write a python function to assign frequency to each tuple in the given tuple list.\n\ndef assign_freq(test_list):\n",
        "answer": "def assign_freq(test_list):\n\tfreq_dict = {}\n\tfor i in test_list:\n\t\tif i in freq_dict:\n\t\t\tfreq_dict[i] += 1\n\t\telse:\n\t\t\tfreq_dict[i] = 1\n\treturn freq_dict\n\n",
        "test_list": [
            "assert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'",
            "assert assign_freq([(4, 2, 4), (7, 1), (4, 8), (4, 2, 4), (9, 2), (7, 1)] ) == '[(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]'",
            "assert assign_freq([(11, 13, 10), (17, 21), (4, 2, 3), (17, 21), (9, 2), (4, 2, 3)] ) == '[(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]'"
        ],
        "answer_list": [
            "\t",
            "freq",
            "_",
            "dict",
            " =",
            " {}",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " test",
            "_",
            "list",
            ":",
            "\n\t",
            "\t",
            "if",
            " i",
            " in",
            " freq",
            "_",
            "dict",
            ":",
            "\n\t\t",
            "\t",
            "freq",
            "_",
            "dict",
            "[",
            "i",
            "]",
            " +=",
            " ",
            "1",
            "\n\t",
            "\t",
            "else",
            ":",
            "\n\t\t",
            "\t",
            "freq",
            "_",
            "dict",
            "[",
            "i",
            "]",
            " =",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " freq",
            "_",
            "dict",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 115,
        "prompt": "Write a python function to check whether all dictionaries in a list are empty or not.\n\ndef empty_dit(list1):\n",
        "answer": "def empty_dit(list1):\n\tfor i in list1:\n\t\tif i:\n\t\t\treturn False\n\treturn True\n\n",
        "test_list": [
            "assert empty_dit([{},{},{}])==True",
            "assert empty_dit([{1,2},{},{}])==False",
            "assert empty_dit({})==True"
        ],
        "answer_list": [
            "\t",
            "for",
            " i",
            " in",
            " list",
            "1",
            ":",
            "\n\t",
            "\t",
            "if",
            " i",
            ":",
            "\n\t\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "return",
            " True",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 116,
        "prompt": "Write a python function to convert a given tuple of positive integers into an integer.\n\ndef tuple_to_int(nums):\n",
        "answer": "def tuple_to_int(nums):\n\treturn int(''.join(map(str, nums)))\n\n",
        "test_list": [
            "assert tuple_to_int((1,2,3))==123",
            "assert tuple_to_int((4,5,6))==456",
            "assert tuple_to_int((5,6,7))==567"
        ],
        "answer_list": [
            "\t",
            "return",
            " int",
            "('",
            "'.",
            "join",
            "(",
            "map",
            "(",
            "str",
            ",",
            " nums",
            ")))",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 117,
        "prompt": "Write a python function to convert all possible convertible elements in the list to float.\n\ndef list_to_float(test_list):\n",
        "answer": "def list_to_float(test_list):\n\tfor i in range(len(test_list)):\n\t\ttry:\n\t\t\ttest_list[i] = float(test_list[i])\n\t\texcept:\n\t\t\tpass\n\treturn test_list\n\n",
        "test_list": [
            "assert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'",
            "assert list_to_float( [(\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")] ) == '[(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]'",
            "assert list_to_float( [(\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")] ) == '[(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]'"
        ],
        "answer_list": [
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "len",
            "(",
            "test",
            "_",
            "list",
            ")):",
            "\n\t",
            "\t",
            "try",
            ":",
            "\n\t\t",
            "\t",
            "test",
            "_",
            "list",
            "[",
            "i",
            "]",
            " =",
            " float",
            "(",
            "test",
            "_",
            "list",
            "[",
            "i",
            "])",
            "\n\t",
            "\t",
            "except",
            ":",
            "\n\t\t",
            "\t",
            "pass",
            "\n",
            "\t",
            "return",
            " test",
            "_",
            "list",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 118,
        "prompt": "[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\n\ndef string_to_list(string): \n",
        "answer": "def string_to_list(string): \n\treturn string.split()\n\n",
        "test_list": [
            "assert string_to_list(\"python programming\")==['python','programming']",
            "assert string_to_list(\"lists tuples strings\")==['lists','tuples','strings']",
            "assert string_to_list(\"write a program\")==['write','a','program']"
        ],
        "answer_list": [
            "\t",
            "return",
            " string",
            ".",
            "split",
            "()",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 119,
        "prompt": "Write a python function to find the element that appears only once in a sorted array.\n\ndef search(arr,n) :\n",
        "answer": "def search(arr,n) :\n\tlow = 0\n\thigh = n-1\n\twhile low < high :\n\t\tmid = (low+high)//2\n\t\tif arr[mid] == arr[mid+1] :\n\t\t\tlow = mid+1\n\t\telif arr[mid] == arr[mid-1] :\n\t\t\thigh = mid-1\n\t\telse :\n\t\t\treturn arr[mid]\n\treturn -1\n\n",
        "test_list": [
            "assert search([1,1,2,2,3],5) == 3",
            "assert search([1,1,3,3,4,4,5,5,7,7,8],11) == 8",
            "assert search([1,2,2,3,3,4,4],7) == 1"
        ],
        "answer_list": [
            "\t",
            "low",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "high",
            " =",
            " n",
            "-",
            "1",
            "\n",
            "\t",
            "while",
            " low",
            " <",
            " high",
            " :",
            "\n\t",
            "\t",
            "mid",
            " =",
            " (",
            "low",
            "+",
            "high",
            ")//",
            "2",
            "\n\t",
            "\t",
            "if",
            " arr",
            "[",
            "mid",
            "]",
            " ==",
            " arr",
            "[",
            "mid",
            "+",
            "1",
            "]",
            " :",
            "\n\t\t",
            "\t",
            "low",
            " =",
            " mid",
            "+",
            "1",
            "\n\t",
            "\t",
            "elif",
            " arr",
            "[",
            "mid",
            "]",
            " ==",
            " arr",
            "[",
            "mid",
            "-",
            "1",
            "]",
            " :",
            "\n\t\t",
            "\t",
            "high",
            " =",
            " mid",
            "-",
            "1",
            "\n\t",
            "\t",
            "else",
            " :",
            "\n\t\t",
            "\t",
            "return",
            " arr",
            "[",
            "mid",
            "]",
            "\n",
            "\t",
            "return",
            " -",
            "1",
            "\n",
            "\n",
            "arr"
        ]
    },
    {
        "task_id": 120,
        "prompt": "Write a python function to find the maximum product from the pairs of tuples within a given list.\n\ndef max_product_tuple(list1):\n",
        "answer": "def max_product_tuple(list1):\n\tmax_product = 0\n\tfor i in range(len(list1)):\n\t\tfor j in range(i+1, len(list1)):\n\t\t\tproduct = list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1]\n\t\t\tif product > max_product:\n\t\t\t\tmax_product = product\n\treturn max_product\n\n",
        "test_list": [
            "assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36",
            "assert max_product_tuple([(10,20), (15,2), (5,10)] )==200",
            "assert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484"
        ],
        "answer_list": [
            "\t",
            "max",
            "_",
            "product",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "len",
            "(",
            "list",
            "1",
            ")):",
            "\n\t",
            "\t",
            "for",
            " j",
            " in",
            " range",
            "(",
            "i",
            "+",
            "1",
            ",",
            " len",
            "(",
            "list",
            "1",
            ")):",
            "\n\t\t",
            "\t",
            "product",
            " =",
            " list",
            "1",
            "[",
            "i",
            "][",
            "0",
            "]",
            " *",
            " list",
            "1",
            "[",
            "i",
            "][",
            "1",
            "]",
            " *",
            " list",
            "1",
            "[",
            "j",
            "][",
            "0",
            "]",
            " *",
            " list",
            "1",
            "[",
            "j",
            "][",
            "1",
            "]",
            "\n\t\t",
            "\t",
            "if",
            " product",
            " >",
            " max",
            "_",
            "product",
            ":",
            "\n\t\t\t",
            "\t",
            "max",
            "_",
            "product",
            " =",
            " product",
            "\n",
            "\t",
            "return",
            " max",
            "_",
            "product",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 121,
        "prompt": "Write a python function to find the triplet with sum of the given array\n\ndef check_triplet(A, n, sum, count):\n",
        "answer": "def check_triplet(A, n, sum, count):\n\tfor i in range(0, n - 2):\n\t\tfor j in range(i + 1, n - 1):\n\t\t\tfor k in range(j + 1, n):\n\t\t\t\tif A[i] + A[j] + A[k] == sum:\n\t\t\t\t\tcount += 1\n\treturn count\n\n",
        "test_list": [
            "assert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True",
            "assert check_triplet([1, 4, 5, 6, 7, 8, 5, 9], 8, 6, 0) == False",
            "assert check_triplet([10, 4, 2, 3, 5], 5, 15, 0) == True"
        ],
        "answer_list": [
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "0",
            ",",
            " n",
            " -",
            " ",
            "2",
            "):",
            "\n\t",
            "\t",
            "for",
            " j",
            " in",
            " range",
            "(",
            "i",
            " +",
            " ",
            "1",
            ",",
            " n",
            " -",
            " ",
            "1",
            "):",
            "\n\t\t",
            "\t",
            "for",
            " k",
            " in",
            " range",
            "(",
            "j",
            " +",
            " ",
            "1",
            ",",
            " n",
            "):",
            "\n\t\t\t",
            "\t",
            "if",
            " A",
            "[",
            "i",
            "]",
            " +",
            " A",
            "[",
            "j",
            "]",
            " +",
            " A",
            "[",
            "k",
            "]",
            " ==",
            " sum",
            ":",
            "\n\t\t\t\t",
            "\t",
            "count",
            " +=",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " count",
            "\n",
            "\n",
            "A"
        ]
    },
    {
        "task_id": 122,
        "prompt": "Write a python function to find n\u2019th smart number.\n\ndef smartNumber(n): \n",
        "answer": "def smartNumber(n): \n\tif n == 1: \n\t\treturn 1\n\telse: \n\t\treturn n * smartNumber(n-1) \n\n",
        "test_list": [
            "assert smartNumber(1) == 30",
            "assert smartNumber(50) == 273",
            "assert smartNumber(1000) == 2664"
        ],
        "answer_list": [
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "1",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "1",
            "\n",
            "\t",
            "else",
            ":",
            " \n\t",
            "\t",
            "return",
            " n",
            " *",
            " smart",
            "Number",
            "(",
            "n",
            "-",
            "1",
            ")",
            " \n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 123,
        "prompt": "Write a python function to sum all amicable numbers from 1 to a specified number.\n\ndef amicable_numbers_sum(limit):\n",
        "answer": "def amicable_numbers_sum(limit):\n\tsum = 0\n\tfor i in range(1, limit):\n\t\tif is_amicable(i):\n\t\t\tsum += i\n\treturn sum\n\n",
        "test_list": [
            "assert amicable_numbers_sum(999)==504",
            "assert amicable_numbers_sum(9999)==31626",
            "assert amicable_numbers_sum(99)==0"
        ],
        "answer_list": [
            "\t",
            "sum",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "1",
            ",",
            " limit",
            "):",
            "\n\t",
            "\t",
            "if",
            " is",
            "_",
            "am",
            "ic",
            "able",
            "(",
            "i",
            "):",
            "\n\t\t",
            "\t",
            "sum",
            " +=",
            " i",
            "\n",
            "\t",
            "return",
            " sum",
            "\n",
            "\n",
            "def"
        ]
    },
    {
        "task_id": 124,
        "prompt": "Write a python function to get the angle of a complex number.\n\ndef angle_complex(a,b):\n",
        "answer": "def angle_complex(a,b):\n\treturn math.atan(b/a)\n\n",
        "test_list": [
            "assert angle_complex(0,1j)==1.5707963267948966 ",
            "assert angle_complex(2,1j)==0.4636476090008061",
            "assert angle_complex(0,2j)==1.5707963267948966"
        ],
        "answer_list": [
            "\t",
            "return",
            " math",
            ".",
            "atan",
            "(",
            "b",
            "/",
            "a",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 125,
        "prompt": "Write a python function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\ndef find_length(string, n): \n",
        "answer": "def find_length(string, n): \n\tmax_len = 0\n\tcount0 = 0\n\tcount1 = 0\n\tfor i in range(n): \n\t\tif string[i] == '0': \n\t\t\tcount0 += 1\n\t\t\tcount1 = 0\n\t\telse: \n\t\t\tcount1 += 1\n\t\t\tcount0 = 0\n\t\tmax_len = max(max_len, count0, count1) \n\treturn max_len \n\n",
        "test_list": [
            "assert find_length(\"11000010001\", 11) == 6",
            "assert find_length(\"10111\", 5) == 1",
            "assert find_length(\"11011101100101\", 14) == 2 "
        ],
        "answer_list": [
            "\t",
            "max",
            "_",
            "len",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "count",
            "0",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "count",
            "1",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "n",
            "):",
            " \n\t",
            "\t",
            "if",
            " string",
            "[",
            "i",
            "]",
            " ==",
            " '",
            "0",
            "':",
            " \n\t\t",
            "\t",
            "count",
            "0",
            " +=",
            " ",
            "1",
            "\n\t\t",
            "\t",
            "count",
            "1",
            " =",
            " ",
            "0",
            "\n\t",
            "\t",
            "else",
            ":",
            " \n\t\t",
            "\t",
            "count",
            "1",
            " +=",
            " ",
            "1",
            "\n\t\t",
            "\t",
            "count",
            "0",
            " =",
            " ",
            "0",
            "\n\t",
            "\t",
            "max",
            "_",
            "len",
            " =",
            " max",
            "(",
            "max",
            "_",
            "len",
            ",",
            " count",
            "0",
            ",",
            " count",
            "1",
            ")",
            " \n",
            "\t",
            "return",
            " max",
            "_",
            "len",
            " \n",
            "\n",
            "def"
        ]
    },
    {
        "task_id": 126,
        "prompt": "Write a python function to find the sum of common divisors of two given numbers.\n\ndef sum(a,b): \n",
        "answer": "def sum(a,b): \n\tif a>b:\n\t\ta,b=b,a\n\tsum=0\n\tfor i in range(1,a+1):\n\t\tif a%i==0 and b%i==0:\n\t\t\tsum+=i\n\treturn sum\n\n",
        "test_list": [
            "assert sum(10,15) == 6",
            "assert sum(100,150) == 93",
            "assert sum(4,6) == 3"
        ],
        "answer_list": [
            "\t",
            "if",
            " a",
            ">",
            "b",
            ":",
            "\n\t",
            "\t",
            "a",
            ",",
            "b",
            "=",
            "b",
            ",",
            "a",
            "\n",
            "\t",
            "sum",
            "=",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "1",
            ",",
            "a",
            "+",
            "1",
            "):",
            "\n\t",
            "\t",
            "if",
            " a",
            "%",
            "i",
            "==",
            "0",
            " and",
            " b",
            "%",
            "i",
            "==",
            "0",
            ":",
            "\n\t\t",
            "\t",
            "sum",
            "+=",
            "i",
            "\n",
            "\t",
            "return",
            " sum",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 127,
        "prompt": "Write a python function to multiply two integers without using the * operator in python.\n\ndef multiply_int(x, y):\n",
        "answer": "def multiply_int(x, y):\n\tif x < 0 or y < 0:\n\t\traise ValueError(\"x and y must be positive\")\n\tresult = 0\n\tfor i in range(y):\n\t\tresult += x\n\treturn result\n\n",
        "test_list": [
            "assert multiply_int(10,20)==200",
            "assert multiply_int(5,10)==50",
            "assert multiply_int(4,8)==32"
        ],
        "answer_list": [
            "\t",
            "if",
            " x",
            " <",
            " ",
            "0",
            " or",
            " y",
            " <",
            " ",
            "0",
            ":",
            "\n\t",
            "\t",
            "raise",
            " ValueError",
            "(\"",
            "x",
            " and",
            " y",
            " must",
            " be",
            " positive",
            "\")",
            "\n",
            "\t",
            "result",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "y",
            "):",
            "\n\t",
            "\t",
            "result",
            " +=",
            " x",
            "\n",
            "\t",
            "return",
            " result",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 128,
        "prompt": "Write a python function to shortlist words that are longer than n from a given list of words.\n\ndef long_words(n, str):\n",
        "answer": "def long_words(n, str):\n\treturn [word for word in str if len(word) > n]\n\n",
        "test_list": [
            "assert long_words(3,\"python is a programming language\")==['python','programming','language']",
            "assert long_words(2,\"writing a program\")==['writing','program']",
            "assert long_words(5,\"sorting list\")==['sorting']"
        ],
        "answer_list": [
            "\t",
            "return",
            " [",
            "word",
            " for",
            " word",
            " in",
            " str",
            " if",
            " len",
            "(",
            "word",
            ")",
            " >",
            " n",
            "]",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 129,
        "prompt": "Write a python function to calculate magic square.\n\ndef magic_square_test(my_matrix):\n",
        "answer": "def magic_square_test(my_matrix):\n\tif len(my_matrix)!= len(my_matrix[0]):\n\t\treturn False\n\tfor i in range(len(my_matrix)):\n\t\tfor j in range(len(my_matrix)):\n\t\t\tif i == j:\n\t\t\t\tif my_matrix[i][j]!= sum(my_matrix[i]):\n\t\t\t\t\treturn False\n\t\t\tif i + j == len(my_matrix) - 1:\n\t\t\t\tif my_matrix[i][j]!= sum(my_matrix[j]):\n\t\t\t\t\treturn False\n\treturn True\n\n",
        "test_list": [
            "assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True",
            "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True",
            "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False"
        ],
        "answer_list": [
            "\t",
            "if",
            " len",
            "(",
            "my",
            "_",
            "matrix",
            ")",
            "!=",
            " len",
            "(",
            "my",
            "_",
            "matrix",
            "[",
            "0",
            "]):",
            "\n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "len",
            "(",
            "my",
            "_",
            "matrix",
            ")):",
            "\n\t",
            "\t",
            "for",
            " j",
            " in",
            " range",
            "(",
            "len",
            "(",
            "my",
            "_",
            "matrix",
            ")):",
            "\n\t\t",
            "\t",
            "if",
            " i",
            " ==",
            " j",
            ":",
            "\n\t\t\t",
            "\t",
            "if",
            " my",
            "_",
            "matrix",
            "[",
            "i",
            "][",
            "j",
            "]",
            "!=",
            " sum",
            "(",
            "my",
            "_",
            "matrix",
            "[",
            "i",
            "]):",
            "\n\t\t\t\t",
            "\t",
            "return",
            " False",
            "\n\t\t",
            "\t",
            "if",
            " i",
            " +",
            " j",
            " ==",
            " len",
            "(",
            "my",
            "_",
            "matrix",
            ")",
            " -",
            " ",
            "1",
            ":",
            "\n\t\t\t",
            "\t",
            "if",
            " my",
            "_",
            "matrix",
            "[",
            "i",
            "][",
            "j",
            "]",
            "!=",
            " sum",
            "(",
            "my",
            "_",
            "matrix",
            "[",
            "j",
            "]):",
            "\n\t\t\t\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "return",
            " True",
            "\n",
            "\n",
            "def"
        ]
    },
    {
        "task_id": 130,
        "prompt": "Write a python function to find the item with maximum frequency in a given list.\n\ndef max_occurrences(nums):\n",
        "answer": "def max_occurrences(nums):\n\tmax_count = 0\n\tmax_item = None\n\tfor item in nums:\n\t\tcount = nums.count(item)\n\t\tif count > max_count:\n\t\t\tmax_count = count\n\t\t\tmax_item = item\n\treturn max_item\n\n",
        "test_list": [
            "assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)",
            "assert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,16,18])==(8, 2)",
            "assert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])==(20, 3)"
        ],
        "answer_list": [
            "\t",
            "max",
            "_",
            "count",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "max",
            "_",
            "item",
            " =",
            " None",
            "\n",
            "\t",
            "for",
            " item",
            " in",
            " nums",
            ":",
            "\n\t",
            "\t",
            "count",
            " =",
            " nums",
            ".",
            "count",
            "(",
            "item",
            ")",
            "\n\t",
            "\t",
            "if",
            " count",
            " >",
            " max",
            "_",
            "count",
            ":",
            "\n\t\t",
            "\t",
            "max",
            "_",
            "count",
            " =",
            " count",
            "\n\t\t",
            "\t",
            "max",
            "_",
            "item",
            " =",
            " item",
            "\n",
            "\t",
            "return",
            " max",
            "_",
            "item",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 131,
        "prompt": "Write a python function to reverse only the vowels of a given string.\n\ndef reverse_vowels(str1):\n",
        "answer": "def reverse_vowels(str1):\n\tvowels = 'aeiouAEIOU'\n\tstr1 = list(str1)\n\ti = 0\n\tj = len(str1) - 1\n\twhile i < j:\n\t\tif str1[i] not in vowels:\n\t\t\ti += 1\n\t\telif str1[j] not in vowels:\n\t\t\tj -= 1\n\t\telse:\n\t\t\tstr1[i], str1[j] = str1[j], str1[i]\n\t\t\ti += 1\n\t\t\tj -= 1\n\treturn ''.join(str1)\n\n",
        "test_list": [
            "assert reverse_vowels(\"Python\") == \"Python\"",
            "assert reverse_vowels(\"USA\") == \"ASU\"",
            "assert reverse_vowels(\"ab\") == \"ab\""
        ],
        "answer_list": [
            "\t",
            "v",
            "ow",
            "els",
            " =",
            " '",
            "ae",
            "iou",
            "AE",
            "IO",
            "U",
            "'",
            "\n",
            "\t",
            "str",
            "1",
            " =",
            " list",
            "(",
            "str",
            "1",
            ")",
            "\n",
            "\t",
            "i",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "j",
            " =",
            " len",
            "(",
            "str",
            "1",
            ")",
            " -",
            " ",
            "1",
            "\n",
            "\t",
            "while",
            " i",
            " <",
            " j",
            ":",
            "\n\t",
            "\t",
            "if",
            " str",
            "1",
            "[",
            "i",
            "]",
            " not",
            " in",
            " v",
            "ow",
            "els",
            ":",
            "\n\t\t",
            "\t",
            "i",
            " +=",
            " ",
            "1",
            "\n\t",
            "\t",
            "elif",
            " str",
            "1",
            "[",
            "j",
            "]",
            " not",
            " in",
            " v",
            "ow",
            "els",
            ":",
            "\n\t\t",
            "\t",
            "j",
            " -=",
            " ",
            "1",
            "\n\t",
            "\t",
            "else",
            ":",
            "\n\t\t",
            "\t",
            "str",
            "1",
            "[",
            "i",
            "],",
            " str",
            "1",
            "[",
            "j",
            "]",
            " =",
            " str",
            "1",
            "[",
            "j",
            "],",
            " str",
            "1",
            "[",
            "i",
            "]",
            "\n\t\t",
            "\t",
            "i",
            " +=",
            " ",
            "1",
            "\n\t\t",
            "\t",
            "j",
            " -=",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " ''.",
            "join",
            "(",
            "str",
            "1",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 132,
        "prompt": "Write a python function to convert tuple to a string.\n\ndef tup_string(tup1):\n",
        "answer": "def tup_string(tup1):\n\treturn str(tup1)\n\n",
        "test_list": [
            "assert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")",
            "assert tup_string(('p','y','t','h','o','n'))==(\"python\")",
            "assert tup_string(('p','r','o','g','r','a','m'))==(\"program\")"
        ],
        "answer_list": [
            "\t",
            "return",
            " str",
            "(",
            "tup",
            "1",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 133,
        "prompt": "Write a python function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\n\ndef sum_negativenum(nums):\n",
        "answer": "def sum_negativenum(nums):\n\treturn reduce(lambda x,y: x+y, filter(lambda x: x<0, nums))\n\n",
        "test_list": [
            "assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32",
            "assert sum_negativenum([10,15,-14,13,-18,12,-20])==-52",
            "assert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894"
        ],
        "answer_list": [
            "\t",
            "return",
            " reduce",
            "(",
            "lambda",
            " x",
            ",",
            "y",
            ":",
            " x",
            "+",
            "y",
            ",",
            " filter",
            "(",
            "lambda",
            " x",
            ":",
            " x",
            "<",
            "0",
            ",",
            " nums",
            "))",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 134,
        "prompt": "Write a python function to check whether the last element of given array is even or odd after performing an operation p times.\n\ndef check_last (arr,n,p): \n",
        "answer": "def check_last (arr,n,p): \n\tif p%2==0: \n\t\treturn arr[n-1]%2==0\n\telse: \n\t\treturn arr[n-1]%2!=0\n\n",
        "test_list": [
            "assert check_last([5,7,10],3,1) == \"ODD\"",
            "assert check_last([2,3],2,3) == \"EVEN\"",
            "assert check_last([1,2,3],3,1) == \"ODD\""
        ],
        "answer_list": [
            "\t",
            "if",
            " p",
            "%",
            "2",
            "==",
            "0",
            ":",
            " \n\t",
            "\t",
            "return",
            " arr",
            "[",
            "n",
            "-",
            "1",
            "]",
            "%",
            "2",
            "==",
            "0",
            "\n",
            "\t",
            "else",
            ":",
            " \n\t",
            "\t",
            "return",
            " arr",
            "[",
            "n",
            "-",
            "1",
            "]",
            "%",
            "2",
            "!=",
            "0",
            "\n",
            "\n",
            "arr"
        ]
    },
    {
        "task_id": 135,
        "prompt": "Write a python function to find the nth hexagonal number.\n\ndef hexagonal_num(n): \n",
        "answer": "def hexagonal_num(n): \n\treturn (n*(2*n-1))\n\n",
        "test_list": [
            "assert hexagonal_num(10) == 190",
            "assert hexagonal_num(5) == 45",
            "assert hexagonal_num(7) == 91"
        ],
        "answer_list": [
            "\t",
            "return",
            " (",
            "n",
            "*(",
            "2",
            "*",
            "n",
            "-",
            "1",
            "))",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 136,
        "prompt": "Write a python function to calculate electricity bill.\n\ndef cal_electbill(units):\n",
        "answer": "def cal_electbill(units):\n\tif units <= 50:\n\t\tbill = units * 0.5\n\telif units <= 150:\n\t\tbill = 50 * 0.5 + (units - 50) * 1\n\telif units <= 250:\n\t\tbill = 50 * 0.5 + 100 * 1 + (units - 150) * 1.5\n\telse:\n\t\tbill = 50 * 0.5 + 100 * 1 + 100 * 1.5 + (units - 250) * 2\n\treturn bill\n\n",
        "test_list": [
            "assert cal_electbill(75)==246.25",
            "assert cal_electbill(265)==1442.75",
            "assert cal_electbill(100)==327.5"
        ],
        "answer_list": [
            "\t",
            "if",
            " units",
            " <=",
            " ",
            "5",
            "0",
            ":",
            "\n\t",
            "\t",
            "bill",
            " =",
            " units",
            " *",
            " ",
            "0",
            ".",
            "5",
            "\n",
            "\t",
            "elif",
            " units",
            " <=",
            " ",
            "1",
            "5",
            "0",
            ":",
            "\n\t",
            "\t",
            "bill",
            " =",
            " ",
            "5",
            "0",
            " *",
            " ",
            "0",
            ".",
            "5",
            " +",
            " (",
            "units",
            " -",
            " ",
            "5",
            "0",
            ")",
            " *",
            " ",
            "1",
            "\n",
            "\t",
            "elif",
            " units",
            " <=",
            " ",
            "2",
            "5",
            "0",
            ":",
            "\n\t",
            "\t",
            "bill",
            " =",
            " ",
            "5",
            "0",
            " *",
            " ",
            "0",
            ".",
            "5",
            " +",
            " ",
            "1",
            "0",
            "0",
            " *",
            " ",
            "1",
            " +",
            " (",
            "units",
            " -",
            " ",
            "1",
            "5",
            "0",
            ")",
            " *",
            " ",
            "1",
            ".",
            "5",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "bill",
            " =",
            " ",
            "5",
            "0",
            " *",
            " ",
            "0",
            ".",
            "5",
            " +",
            " ",
            "1",
            "0",
            "0",
            " *",
            " ",
            "1",
            " +",
            " ",
            "1",
            "0",
            "0",
            " *",
            " ",
            "1",
            ".",
            "5",
            " +",
            " (",
            "units",
            " -",
            " ",
            "2",
            "5",
            "0",
            ")",
            " *",
            " ",
            "2",
            "\n",
            "\t",
            "return",
            " bill",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 137,
        "prompt": "Write a python function to find the ration of zeroes in an array of integers.\n\ndef zero_count(nums):\n",
        "answer": "def zero_count(nums):\n\tcount = 0\n\tfor i in nums:\n\t\tif i == 0:\n\t\t\tcount += 1\n\treturn count/len(nums)\n\n",
        "test_list": [
            "assert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15",
            "assert zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.00",
            "assert zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.00"
        ],
        "answer_list": [
            "\t",
            "count",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " nums",
            ":",
            "\n\t",
            "\t",
            "if",
            " i",
            " ==",
            " ",
            "0",
            ":",
            "\n\t\t",
            "\t",
            "count",
            " +=",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " count",
            "/",
            "len",
            "(",
            "nums",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 138,
        "prompt": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n\ndef is_Sum_Of_Powers_Of_Two(n): \n",
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n\tif n == 0: \n\t\treturn True\n\twhile n & n - 1: \n\t\tn = n & (n - 1)\n\treturn n == 0\n\n",
        "test_list": [
            "assert is_Sum_Of_Powers_Of_Two(10) == True",
            "assert is_Sum_Of_Powers_Of_Two(7) == False",
            "assert is_Sum_Of_Powers_Of_Two(14) == True"
        ],
        "answer_list": [
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "0",
            ":",
            " \n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "while",
            " n",
            " &",
            " n",
            " -",
            " ",
            "1",
            ":",
            " \n\t",
            "\t",
            "n",
            " =",
            " n",
            " &",
            " (",
            "n",
            " -",
            " ",
            "1",
            ")",
            "\n",
            "\t",
            "return",
            " n",
            " ==",
            " ",
            "0",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 139,
        "prompt": "Write a python function to find the circumference of a circle.\n\ndef circle_circumference(r):\n",
        "answer": "def circle_circumference(r):\n\treturn 2*3.14*r\n\n",
        "test_list": [
            "assert circle_circumference(10)==62.830000000000005",
            "assert circle_circumference(5)==31.415000000000003",
            "assert circle_circumference(4)==25.132"
        ],
        "answer_list": [
            "\t",
            "return",
            " ",
            "2",
            "*",
            "3",
            ".",
            "1",
            "4",
            "*",
            "r",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 140,
        "prompt": "Write a python function to extract elements that occur singly in the given tuple list.\n\ndef extract_singly(test_list):\n",
        "answer": "def extract_singly(test_list):\n\tsingly_list = []\n\tfor i in test_list:\n\t\tif test_list.count(i) == 1:\n\t\t\tsingly_list.append(i)\n\treturn singly_list\n\n",
        "test_list": [
            "assert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]",
            "assert extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)]) == [1, 2, 3, 4, 7, 8]",
            "assert extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)]) == [7, 8, 9, 10, 11, 12]"
        ],
        "answer_list": [
            "\t",
            "sing",
            "ly",
            "_",
            "list",
            " =",
            " []",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " test",
            "_",
            "list",
            ":",
            "\n\t",
            "\t",
            "if",
            " test",
            "_",
            "list",
            ".",
            "count",
            "(",
            "i",
            ")",
            " ==",
            " ",
            "1",
            ":",
            "\n\t\t",
            "\t",
            "sing",
            "ly",
            "_",
            "list",
            ".",
            "append",
            "(",
            "i",
            ")",
            "\n",
            "\t",
            "return",
            " sing",
            "ly",
            "_",
            "list",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 141,
        "prompt": "Write a python function to sort a list of elements using pancake sort.\n\ndef pancake_sort(nums):\n",
        "answer": "def pancake_sort(nums):\n\tfor i in range(len(nums), 1, -1):\n\t\tmax_index = nums.index(max(nums[:i]))\n\t\tif max_index!= i-1:\n\t\t\tnums = flip(nums, max_index)\n\t\t\tnums = flip(nums, i-1)\n\treturn nums\n\n",
        "test_list": [
            "assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]",
            "assert pancake_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]",
            "assert pancake_sort([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]"
        ],
        "answer_list": [
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "len",
            "(",
            "nums",
            "),",
            " ",
            "1",
            ",",
            " -",
            "1",
            "):",
            "\n\t",
            "\t",
            "max",
            "_",
            "index",
            " =",
            " nums",
            ".",
            "index",
            "(",
            "max",
            "(",
            "nums",
            "[:",
            "i",
            "]))",
            "\n\t",
            "\t",
            "if",
            " max",
            "_",
            "index",
            "!=",
            " i",
            "-",
            "1",
            ":",
            "\n\t\t",
            "\t",
            "nums",
            " =",
            " flip",
            "(",
            "nums",
            ",",
            " max",
            "_",
            "index",
            ")",
            "\n\t\t",
            "\t",
            "nums",
            " =",
            " flip",
            "(",
            "nums",
            ",",
            " i",
            "-",
            "1",
            ")",
            "\n",
            "\t",
            "return",
            " nums",
            "\n",
            "\n",
            "def"
        ]
    },
    {
        "task_id": 142,
        "prompt": "Write a python function to count the same pair in three given lists.\n\ndef count_samepair(list1,list2,list3):\n",
        "answer": "def count_samepair(list1,list2,list3):\n\tcount=0\n\tfor i in list1:\n\t\tif i in list2 and i in list3:\n\t\t\tcount+=1\n\treturn count\n\n",
        "test_list": [
            "assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3",
            "assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4",
            "assert count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5"
        ],
        "answer_list": [
            "\t",
            "count",
            "=",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " list",
            "1",
            ":",
            "\n\t",
            "\t",
            "if",
            " i",
            " in",
            " list",
            "2",
            " and",
            " i",
            " in",
            " list",
            "3",
            ":",
            "\n\t\t",
            "\t",
            "count",
            "+=",
            "1",
            "\n",
            "\t",
            "return",
            " count",
            "\n",
            "\n",
            "list"
        ]
    },
    {
        "task_id": 143,
        "prompt": "Write a python function to find number of lists present in the given tuple.\n\ndef find_lists(Input): \n",
        "answer": "def find_lists(Input): \n\tcount = 0\n\tfor i in Input: \n\t\tif isinstance(i, list): \n\t\t\tcount += 1\n\treturn count\n\n",
        "test_list": [
            "assert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2",
            "assert find_lists(([1, 2], [3, 4], [5, 6]))  == 3",
            "assert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1"
        ],
        "answer_list": [
            "\t",
            "count",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " Input",
            ":",
            " \n\t",
            "\t",
            "if",
            " isinstance",
            "(",
            "i",
            ",",
            " list",
            "):",
            " \n\t\t",
            "\t",
            "count",
            " +=",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " count",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 144,
        "prompt": "Write a python function to find the sum of absolute differences in all pairs of the given array.\n\ndef sum_Pairs(arr,n): \n",
        "answer": "def sum_Pairs(arr,n): \n\tsum = 0\n\tfor i in range(n): \n\t\tfor j in range(i+1,n): \n\t\t\tsum += abs(arr[i] - arr[j]) \n\treturn sum \n\n",
        "test_list": [
            "assert sum_Pairs([1,8,9,15,16],5) == 74",
            "assert sum_Pairs([1,2,3,4],4) == 10",
            "assert sum_Pairs([1,2,3,4,5,7,9,11,14],9) == 188"
        ],
        "answer_list": [
            "\t",
            "sum",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "n",
            "):",
            " \n\t",
            "\t",
            "for",
            " j",
            " in",
            " range",
            "(",
            "i",
            "+",
            "1",
            ",",
            "n",
            "):",
            " \n\t\t",
            "\t",
            "sum",
            " +=",
            " abs",
            "(",
            "arr",
            "[",
            "i",
            "]",
            " -",
            " arr",
            "[",
            "j",
            "])",
            " \n",
            "\t",
            "return",
            " sum",
            " \n",
            "\n",
            "arr"
        ]
    },
    {
        "task_id": 145,
        "prompt": "Write a python function to find the maximum difference between any two elements in a given array.\n\ndef max_Abs_Diff(arr,n): \n",
        "answer": "def max_Abs_Diff(arr,n): \n\tmax_diff = 0\n\tfor i in range(n): \n\t\tfor j in range(i+1, n): \n\t\t\tif abs(arr[i] - arr[j]) > max_diff: \n\t\t\t\tmax_diff = abs(arr[i] - arr[j]) \n\treturn max_diff \n\n",
        "test_list": [
            "assert max_Abs_Diff((2,1,5,3),4) == 4",
            "assert max_Abs_Diff((9,3,2,5,1),5) == 8",
            "assert max_Abs_Diff((3,2,1),3) == 2"
        ],
        "answer_list": [
            "\t",
            "max",
            "_",
            "diff",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "n",
            "):",
            " \n\t",
            "\t",
            "for",
            " j",
            " in",
            " range",
            "(",
            "i",
            "+",
            "1",
            ",",
            " n",
            "):",
            " \n\t\t",
            "\t",
            "if",
            " abs",
            "(",
            "arr",
            "[",
            "i",
            "]",
            " -",
            " arr",
            "[",
            "j",
            "])",
            " >",
            " max",
            "_",
            "diff",
            ":",
            " \n\t\t\t",
            "\t",
            "max",
            "_",
            "diff",
            " =",
            " abs",
            "(",
            "arr",
            "[",
            "i",
            "]",
            " -",
            " arr",
            "[",
            "j",
            "])",
            " \n",
            "\t",
            "return",
            " max",
            "_",
            "diff",
            " \n",
            "\n",
            "arr"
        ]
    },
    {
        "task_id": 146,
        "prompt": "Write a python function to find the ascii value of total characters in a string.\n\ndef ascii_value_string(str1):\n",
        "answer": "def ascii_value_string(str1):\n\treturn sum(ord(i) for i in str1)\n\n",
        "test_list": [
            "assert ascii_value_string(\"python\")==112",
            "assert ascii_value_string(\"Program\")==80",
            "assert ascii_value_string(\"Language\")==76"
        ],
        "answer_list": [
            "\t",
            "return",
            " sum",
            "(",
            "ord",
            "(",
            "i",
            ")",
            " for",
            " i",
            " in",
            " str",
            "1",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 147,
        "prompt": "Write a python function to find the maximum total path sum in the given triangle.\n\ndef max_path_sum(tri, m, n): \n",
        "answer": "def max_path_sum(tri, m, n): \n\tfor i in range(1, m): \n\t\tfor j in range(n): \n\t\t\tif (j == 0): \n\t\t\t\ttri[i][j] += tri[i - 1][j] \n\t\t\telif (j == n - 1): \n\t\t\t\ttri[i][j] += tri[i - 1][j - 1] \n\t\t\telse: \n\t\t\t\ttri[i][j] += max(tri[i - 1][j - 1], tri[i - 1][j]) \n\treturn max(tri[m - 1]) \n\n",
        "test_list": [
            "assert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14",
            "assert max_path_sum([[13, 0, 0], [7, 4, 0], [2, 4, 6]], 2, 2) == 24 ",
            "assert max_path_sum([[2, 0, 0], [11, 18, 0], [21, 25, 33]], 2, 2) == 53"
        ],
        "answer_list": [
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "1",
            ",",
            " m",
            "):",
            " \n\t",
            "\t",
            "for",
            " j",
            " in",
            " range",
            "(",
            "n",
            "):",
            " \n\t\t",
            "\t",
            "if",
            " (",
            "j",
            " ==",
            " ",
            "0",
            "):",
            " \n\t\t\t",
            "\t",
            "tri",
            "[",
            "i",
            "][",
            "j",
            "]",
            " +=",
            " tri",
            "[",
            "i",
            " -",
            " ",
            "1",
            "][",
            "j",
            "]",
            " \n\t\t",
            "\t",
            "elif",
            " (",
            "j",
            " ==",
            " n",
            " -",
            " ",
            "1",
            "):",
            " \n\t\t\t",
            "\t",
            "tri",
            "[",
            "i",
            "][",
            "j",
            "]",
            " +=",
            " tri",
            "[",
            "i",
            " -",
            " ",
            "1",
            "][",
            "j",
            " -",
            " ",
            "1",
            "]",
            " \n\t\t",
            "\t",
            "else",
            ":",
            " \n\t\t\t",
            "\t",
            "tri",
            "[",
            "i",
            "][",
            "j",
            "]",
            " +=",
            " max",
            "(",
            "tri",
            "[",
            "i",
            " -",
            " ",
            "1",
            "][",
            "j",
            " -",
            " ",
            "1",
            "],",
            " tri",
            "[",
            "i",
            " -",
            " ",
            "1",
            "][",
            "j",
            "])",
            " \n",
            "\t",
            "return",
            " max",
            "(",
            "tri",
            "[",
            "m",
            " -",
            " ",
            "1",
            "])",
            " \n",
            "\n",
            "#"
        ]
    },
    {
        "task_id": 148,
        "prompt": "Write a python function to divide a number into two parts such that the sum of digits is maximum.\n\ndef sum_digits_twoparts(N) : \n",
        "answer": "def sum_digits_twoparts(N) : \n\tif N == 0 : \n\t\treturn 0\n\telse : \n\t\tsum = 0\n\t\twhile N > 0 : \n\t\t\tsum += N % 10\n\t\t\tN = N // 10\n\t\treturn sum\n\n",
        "test_list": [
            "assert sum_digits_twoparts(35)==17",
            "assert sum_digits_twoparts(7)==7",
            "assert sum_digits_twoparts(100)==19"
        ],
        "answer_list": [
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "0",
            " :",
            " \n\t",
            "\t",
            "return",
            " ",
            "0",
            "\n",
            "\t",
            "else",
            " :",
            " \n\t",
            "\t",
            "sum",
            " =",
            " ",
            "0",
            "\n\t",
            "\t",
            "while",
            " N",
            " >",
            " ",
            "0",
            " :",
            " \n\t\t",
            "\t",
            "sum",
            " +=",
            " N",
            " %",
            " ",
            "1",
            "0",
            "\n\t\t",
            "\t",
            "N",
            " =",
            " N",
            " //",
            " ",
            "1",
            "0",
            "\n\t",
            "\t",
            "return",
            " sum",
            "\n",
            "\n",
            "def"
        ]
    },
    {
        "task_id": 149,
        "prompt": "Write a python function to find the longest subsequence such that the difference between adjacents is one for the given array.\n\ndef longest_subseq_with_diff_one(arr, n): \n",
        "answer": "def longest_subseq_with_diff_one(arr, n): \n\tdp = [1 for i in range(n)] \n\tfor i in range(1, n): \n\t\tfor j in range(0, i): \n\t\t\tif arr[i] > arr[j] and dp[i] < dp[j] + 1: \n\t\t\t\tdp[i] = dp[j] + 1\n\treturn max(dp) \n\n",
        "test_list": [
            "assert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6",
            "assert longest_subseq_with_diff_one([10, 9, 4, 5, 4, 8, 6], 7) == 3",
            "assert longest_subseq_with_diff_one([1, 2, 3, 2, 3, 7, 2, 1], 8) == 7"
        ],
        "answer_list": [
            "\t",
            "dp",
            " =",
            " [",
            "1",
            " for",
            " i",
            " in",
            " range",
            "(",
            "n",
            ")]",
            " \n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "1",
            ",",
            " n",
            "):",
            " \n\t",
            "\t",
            "for",
            " j",
            " in",
            " range",
            "(",
            "0",
            ",",
            " i",
            "):",
            " \n\t\t",
            "\t",
            "if",
            " arr",
            "[",
            "i",
            "]",
            " >",
            " arr",
            "[",
            "j",
            "]",
            " and",
            " dp",
            "[",
            "i",
            "]",
            " <",
            " dp",
            "[",
            "j",
            "]",
            " +",
            " ",
            "1",
            ":",
            " \n\t\t\t",
            "\t",
            "dp",
            "[",
            "i",
            "]",
            " =",
            " dp",
            "[",
            "j",
            "]",
            " +",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " max",
            "(",
            "dp",
            ")",
            " \n",
            "\n",
            "#"
        ]
    },
    {
        "task_id": 150,
        "prompt": "Write a python function to find whether the given number is present in the infinite sequence or not.\n\ndef does_Contain_B(a,b,c): \n",
        "answer": "def does_Contain_B(a,b,c): \n\tif a==b:\n\t\treturn True\n\telif a==c:\n\t\treturn True\n\telif b==c:\n\t\treturn True\n\telse:\n\t\treturn False\n\n",
        "test_list": [
            "assert does_Contain_B(1,7,3) == True",
            "assert does_Contain_B(1,-3,5) == False",
            "assert does_Contain_B(3,2,5) == False"
        ],
        "answer_list": [
            "\t",
            "if",
            " a",
            "==",
            "b",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "elif",
            " a",
            "==",
            "c",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "elif",
            " b",
            "==",
            "c",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\n",
            "a"
        ]
    },
    {
        "task_id": 151,
        "prompt": "Write a python function to check whether the given number is co-prime or not.\n\ndef is_coprime(x,y):\n",
        "answer": "def is_coprime(x,y):\n\tif x == 0 or y == 0:\n\t\treturn False\n\tif x == 1 or y == 1:\n\t\treturn True\n\tif x == y:\n\t\treturn False\n\tif x > y:\n\t\tx,y = y,x\n\twhile x % y!= 0:\n\t\tx,y = y,x % y\n\treturn x == 1\n\n",
        "test_list": [
            "assert is_coprime(17,13) == True",
            "assert is_coprime(15,21) == False",
            "assert is_coprime(25,45) == False"
        ],
        "answer_list": [
            "\t",
            "if",
            " x",
            " ==",
            " ",
            "0",
            " or",
            " y",
            " ==",
            " ",
            "0",
            ":",
            "\n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "if",
            " x",
            " ==",
            " ",
            "1",
            " or",
            " y",
            " ==",
            " ",
            "1",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " x",
            " ==",
            " y",
            ":",
            "\n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "if",
            " x",
            " >",
            " y",
            ":",
            "\n\t",
            "\t",
            "x",
            ",",
            "y",
            " =",
            " y",
            ",",
            "x",
            "\n",
            "\t",
            "while",
            " x",
            " %",
            " y",
            "!=",
            " ",
            "0",
            ":",
            "\n\t",
            "\t",
            "x",
            ",",
            "y",
            " =",
            " y",
            ",",
            "x",
            " %",
            " y",
            "\n",
            "\t",
            "return",
            " x",
            " ==",
            " ",
            "1",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 152,
        "prompt": "Write a python function to sort the given array by using merge sort.\n\ndef merge_sort(x):\n",
        "answer": "def merge_sort(x):\n\tif len(x) > 1:\n\t\tmid = len(x) // 2\n\t\tL = x[:mid]\n\t\tR = x[mid:]\n\n",
        "test_list": [
            "assert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]",
            "assert merge_sort([7, 25, 45, 78, 11, 33, 19]) == [7, 11, 19, 25, 33, 45, 78]",
            "assert merge_sort([3, 1, 4, 9, 8]) == [1, 3, 4, 8, 9]"
        ],
        "answer_list": [
            "\t",
            "if",
            " len",
            "(",
            "x",
            ")",
            " >",
            " ",
            "1",
            ":",
            "\n\t",
            "\t",
            "mid",
            " =",
            " len",
            "(",
            "x",
            ")",
            " //",
            " ",
            "2",
            "\n\t",
            "\t",
            "L",
            " =",
            " x",
            "[:",
            "mid",
            "]",
            "\n\t",
            "\t",
            "R",
            " =",
            " x",
            "[",
            "mid",
            ":]",
            "\n\n\t"
        ]
    },
    {
        "task_id": 153,
        "prompt": "Write a python function to find the vertex of a parabola.\n\ndef parabola_vertex(a, b, c): \n",
        "answer": "def parabola_vertex(a, b, c): \n\treturn (-b + (b**2 - 4*a*c)**0.5)/(2*a)\n\n",
        "test_list": [
            "assert parabola_vertex(5,3,2)==(-0.3, 1.55)",
            "assert parabola_vertex(9,8,4)==(-0.4444444444444444, 2.2222222222222223)",
            "assert parabola_vertex(2,4,6)==(-1.0, 4.0)"
        ],
        "answer_list": [
            "\t",
            "return",
            " (-",
            "b",
            " +",
            " (",
            "b",
            "**",
            "2",
            " -",
            " ",
            "4",
            "*",
            "a",
            "*",
            "c",
            ")**",
            "0",
            ".",
            "5",
            ")/(",
            "2",
            "*",
            "a",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 154,
        "prompt": "Write a python function to extract every specified element from a given two dimensional list.\n\ndef specified_element(nums, N):\n",
        "answer": "def specified_element(nums, N):\n\treturn [nums[i][N] for i in range(len(nums))]\n\n",
        "test_list": [
            "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]",
            "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]",
            "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],3)==[2,2,5]"
        ],
        "answer_list": [
            "\t",
            "return",
            " [",
            "nums",
            "[",
            "i",
            "][",
            "N",
            "]",
            " for",
            " i",
            " in",
            " range",
            "(",
            "len",
            "(",
            "nums",
            "))]",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 155,
        "prompt": "Write a python function to toggle all even bits of a given number.\n\ndef even_bit_toggle_number(n) : \n",
        "answer": "def even_bit_toggle_number(n) : \n\treturn n ^ 0xAAAAAAAA\n\n",
        "test_list": [
            "assert even_bit_toggle_number(10) == 0",
            "assert even_bit_toggle_number(20) == 30",
            "assert even_bit_toggle_number(30) == 20"
        ],
        "answer_list": [
            "\t",
            "return",
            " n",
            " ^",
            " ",
            "0",
            "x",
            "AAAAAAAA",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 156,
        "prompt": "Write a python function to convert a tuple of string values to a tuple of integer values.\n\ndef tuple_int_str(tuple_str):\n",
        "answer": "def tuple_int_str(tuple_str):\n\treturn tuple(int(x) for x in tuple_str)\n\n",
        "test_list": [
            "assert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))",
            "assert tuple_int_str((('999', '99'), ('1000', '500')))==((999, 99), (1000, 500))",
            "assert tuple_int_str((('666', '66'), ('1500', '555')))==((666, 66), (1500, 555))"
        ],
        "answer_list": [
            "\t",
            "return",
            " tuple",
            "(",
            "int",
            "(",
            "x",
            ")",
            " for",
            " x",
            " in",
            " tuple",
            "_",
            "str",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 157,
        "prompt": "Write a python function to reflect the run-length encoding from a list.\n\ndef encode_list(list1):\n",
        "answer": "def encode_list(list1):\n\tlist2 = []\n\tfor i in range(len(list1)):\n\t\tif i == 0:\n\t\t\tlist2.append(list1[i])\n\t\telif list1[i] == list1[i-1]:\n\t\t\tlist2[-1] = (list2[-1], list1[i])\n\t\telse:\n\t\t\tlist2.append(list1[i])\n\treturn list2\n\n",
        "test_list": [
            "assert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]",
            "assert encode_list('automatically')==[[1, 'a'], [1, 'u'], [1, 't'], [1, 'o'], [1, 'm'], [1, 'a'], [1, 't'], [1, 'i'], [1, 'c'], [1, 'a'], [2, 'l'], [1, 'y']]",
            "assert encode_list('python')==[[1, 'p'], [1, 'y'], [1, 't'], [1, 'h'], [1, 'o'], [1, 'n']]"
        ],
        "answer_list": [
            "\t",
            "list",
            "2",
            " =",
            " []",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "len",
            "(",
            "list",
            "1",
            ")):",
            "\n\t",
            "\t",
            "if",
            " i",
            " ==",
            " ",
            "0",
            ":",
            "\n\t\t",
            "\t",
            "list",
            "2",
            ".",
            "append",
            "(",
            "list",
            "1",
            "[",
            "i",
            "])",
            "\n\t",
            "\t",
            "elif",
            " list",
            "1",
            "[",
            "i",
            "]",
            " ==",
            " list",
            "1",
            "[",
            "i",
            "-",
            "1",
            "]:",
            "\n\t\t",
            "\t",
            "list",
            "2",
            "[-",
            "1",
            "]",
            " =",
            " (",
            "list",
            "2",
            "[-",
            "1",
            "],",
            " list",
            "1",
            "[",
            "i",
            "])",
            "\n\t",
            "\t",
            "else",
            ":",
            "\n\t\t",
            "\t",
            "list",
            "2",
            ".",
            "append",
            "(",
            "list",
            "1",
            "[",
            "i",
            "])",
            "\n",
            "\t",
            "return",
            " list",
            "2",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 158,
        "prompt": "Write a python function to find k number of operations required to make all elements equal.\n\ndef min_Ops(arr,n,k): \n",
        "answer": "def min_Ops(arr,n,k): \n\t# code here \n\tcount=0\n\tfor i in range(n): \n\t\tif arr[i]!=k: \n\t\t\tcount+=abs(arr[i]-k) \n\t\t\tarr[i]=k \n\treturn count \n\n",
        "test_list": [
            "assert min_Ops([2,2,2,2],4,3) == 0",
            "assert min_Ops([4,2,6,8],4,3) == -1",
            "assert min_Ops([21,33,9,45,63],5,6) == 24"
        ],
        "answer_list": [
            "\t",
            "#",
            " code",
            " here",
            " \n",
            "\t",
            "count",
            "=",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "n",
            "):",
            " \n\t",
            "\t",
            "if",
            " arr",
            "[",
            "i",
            "]",
            "!=",
            "k",
            ":",
            " \n\t\t",
            "\t",
            "count",
            "+=",
            "abs",
            "(",
            "arr",
            "[",
            "i",
            "]-",
            "k",
            ")",
            " \n\t\t",
            "\t",
            "arr",
            "[",
            "i",
            "]=",
            "k",
            " \n",
            "\t",
            "return",
            " count",
            " \n",
            "\n",
            "#{"
        ]
    },
    {
        "task_id": 159,
        "prompt": "Write a python function to print the season for the given month and day.\n\ndef month_season(month,days):\n",
        "answer": "def month_season(month,days):\n\tif month in [1,2,12]:\n\t\treturn \"Winter\"\n\telif month in [3,4,5]:\n\t\treturn \"Spring\"\n\telif month in [6,7,8]:\n\t\treturn \"Summer\"\n\telif month in [9,10,11]:\n\t\treturn \"Autumn\"\n\telse:\n\t\treturn \"Invalid month\"\n\n",
        "test_list": [
            "assert month_season('January',4)==('winter')",
            "assert month_season('October',28)==('autumn')",
            "assert month_season('June',6)==('spring')"
        ],
        "answer_list": [
            "\t",
            "if",
            " month",
            " in",
            " [",
            "1",
            ",",
            "2",
            ",",
            "1",
            "2",
            "]:",
            "\n\t",
            "\t",
            "return",
            " \"",
            "W",
            "inter",
            "\"",
            "\n",
            "\t",
            "elif",
            " month",
            " in",
            " [",
            "3",
            ",",
            "4",
            ",",
            "5",
            "]:",
            "\n\t",
            "\t",
            "return",
            " \"",
            "Spring",
            "\"",
            "\n",
            "\t",
            "elif",
            " month",
            " in",
            " [",
            "6",
            ",",
            "7",
            ",",
            "8",
            "]:",
            "\n\t",
            "\t",
            "return",
            " \"",
            "Sum",
            "mer",
            "\"",
            "\n",
            "\t",
            "elif",
            " month",
            " in",
            " [",
            "9",
            ",",
            "1",
            "0",
            ",",
            "1",
            "1",
            "]:",
            "\n\t",
            "\t",
            "return",
            " \"",
            "Aut",
            "umn",
            "\"",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "return",
            " \"",
            "Invalid",
            " month",
            "\"",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 160,
        "prompt": "Write a python function to find x and y that satisfies ax + by = n.\n\ndef solution (a, b, n): \n",
        "answer": "def solution (a, b, n): \n\tx = 0\n\ty = 0\n\twhile (x * a + y * b!= n):\n\t\tx += 1\n\t\ty = n - x * a\n\treturn x, y\n\n",
        "test_list": [
            "assert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)",
            "assert solution(4, 2, 7) == 'No solution'",
            "assert solution(1, 13, 17) == ('x = ', 4, ', y = ', 1)"
        ],
        "answer_list": [
            "\t",
            "x",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "y",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "while",
            " (",
            "x",
            " *",
            " a",
            " +",
            " y",
            " *",
            " b",
            "!=",
            " n",
            "):",
            "\n\t",
            "\t",
            "x",
            " +=",
            " ",
            "1",
            "\n\t",
            "\t",
            "y",
            " =",
            " n",
            " -",
            " x",
            " *",
            " a",
            "\n",
            "\t",
            "return",
            " x",
            ",",
            " y",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 161,
        "prompt": "Write a python function to remove all elements from a given list present in another list.\n\ndef remove_elements(list1, list2):\n",
        "answer": "def remove_elements(list1, list2):\n\tfor i in list2:\n\t\tif i in list1:\n\t\t\tlist1.remove(i)\n\treturn list1\n\n",
        "test_list": [
            "assert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]",
            "assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[1, 3, 5, 7])==[2, 4, 6, 8, 9, 10]",
            "assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[5,7])==[1, 2, 3, 4, 6, 8, 9, 10]"
        ],
        "answer_list": [
            "\t",
            "for",
            " i",
            " in",
            " list",
            "2",
            ":",
            "\n\t",
            "\t",
            "if",
            " i",
            " in",
            " list",
            "1",
            ":",
            "\n\t\t",
            "\t",
            "list",
            "1",
            ".",
            "remove",
            "(",
            "i",
            ")",
            "\n",
            "\t",
            "return",
            " list",
            "1",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 162,
        "prompt": "Write a python function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\n\ndef sum_series(n):\n",
        "answer": "def sum_series(n):\n\tif n <= 0:\n\t\treturn 0\n\telse:\n\t\treturn n + sum_series(n-2)\n\n",
        "test_list": [
            "assert sum_series(6)==12",
            "assert sum_series(10)==30",
            "assert sum_series(9)==25"
        ],
        "answer_list": [
            "\t",
            "if",
            " n",
            " <=",
            " ",
            "0",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "0",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "return",
            " n",
            " +",
            " sum",
            "_",
            "series",
            "(",
            "n",
            "-",
            "2",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 163,
        "prompt": "Write a python function to calculate the area of a regular polygon.\n\ndef area_polygon(s,l):\n",
        "answer": "def area_polygon(s,l):\n\treturn (0.25*s*l)\n\n",
        "test_list": [
            "assert area_polygon(4,20)==400.00000000000006",
            "assert area_polygon(10,15)==1731.1969896610804",
            "assert area_polygon(9,7)==302.90938549487214"
        ],
        "answer_list": [
            "\t",
            "return",
            " (",
            "0",
            ".",
            "2",
            "5",
            "*",
            "s",
            "*",
            "l",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 164,
        "prompt": "Write a python function to check whether the sum of divisors are same or not.\n\ndef areEquivalent(num1,num2): \n",
        "answer": "def areEquivalent(num1,num2): \n\tsum1=0\n\tsum2=0\n\tfor i in range(1,num1+1):\n\t\tif num1%i==0:\n\t\t\tsum1+=i\n\tfor i in range(1,num2+1):\n\t\tif num2%i==0:\n\t\t\tsum2+=i\n\tif sum1==sum2:\n\t\treturn True\n\telse:\n\t\treturn False\n\n",
        "test_list": [
            "assert areEquivalent(36,57) == False",
            "assert areEquivalent(2,4) == False",
            "assert areEquivalent(23,47) == True"
        ],
        "answer_list": [
            "\t",
            "sum",
            "1",
            "=",
            "0",
            "\n",
            "\t",
            "sum",
            "2",
            "=",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "1",
            ",",
            "num",
            "1",
            "+",
            "1",
            "):",
            "\n\t",
            "\t",
            "if",
            " num",
            "1",
            "%",
            "i",
            "==",
            "0",
            ":",
            "\n\t\t",
            "\t",
            "sum",
            "1",
            "+=",
            "i",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "1",
            ",",
            "num",
            "2",
            "+",
            "1",
            "):",
            "\n\t",
            "\t",
            "if",
            " num",
            "2",
            "%",
            "i",
            "==",
            "0",
            ":",
            "\n\t\t",
            "\t",
            "sum",
            "2",
            "+=",
            "i",
            "\n",
            "\t",
            "if",
            " sum",
            "1",
            "==",
            "sum",
            "2",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 165,
        "prompt": "Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\n\ndef count_char_position(str1): \n",
        "answer": "def count_char_position(str1): \n\tcount = [0] * 26\n\tfor i in str1: \n\t\tif (ord(i) >= 65 and ord(i) <= 90): \n\t\t\tcount[ord(i) - 65] += 1\n\t\telif (ord(i) >= 97 and ord(i) <= 122): \n\t\t\tcount[ord(i) - 97] += 1\n\treturn count\n\n",
        "test_list": [
            "assert count_char_position(\"xbcefg\") == 2",
            "assert count_char_position(\"ABcED\") == 3",
            "assert count_char_position(\"AbgdeF\") == 5"
        ],
        "answer_list": [
            "\t",
            "count",
            " =",
            " [",
            "0",
            "]",
            " *",
            " ",
            "2",
            "6",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " str",
            "1",
            ":",
            " \n\t",
            "\t",
            "if",
            " (",
            "ord",
            "(",
            "i",
            ")",
            " >=",
            " ",
            "6",
            "5",
            " and",
            " ord",
            "(",
            "i",
            ")",
            " <=",
            " ",
            "9",
            "0",
            "):",
            " \n\t\t",
            "\t",
            "count",
            "[",
            "ord",
            "(",
            "i",
            ")",
            " -",
            " ",
            "6",
            "5",
            "]",
            " +=",
            " ",
            "1",
            "\n\t",
            "\t",
            "elif",
            " (",
            "ord",
            "(",
            "i",
            ")",
            " >=",
            " ",
            "9",
            "7",
            " and",
            " ord",
            "(",
            "i",
            ")",
            " <=",
            " ",
            "1",
            "2",
            "2",
            "):",
            " \n\t\t",
            "\t",
            "count",
            "[",
            "ord",
            "(",
            "i",
            ")",
            " -",
            " ",
            "9",
            "7",
            "]",
            " +=",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " count",
            "\n",
            "\n",
            "str"
        ]
    },
    {
        "task_id": 166,
        "prompt": "Write a python function to count the pairs with xor as an even number.\n\ndef find_even_Pair(A,N): \n",
        "answer": "def find_even_Pair(A,N): \n\tcount = 0\n\tfor i in range(N): \n\t\tfor j in range(i+1,N): \n\t\t\tif (A[i] ^ A[j]) % 2 == 0: \n\t\t\t\tcount += 1\n\treturn count \n\n",
        "test_list": [
            "assert find_even_Pair([5,4,7,2,1],5) == 4",
            "assert find_even_Pair([7,2,8,1,0,5,11],7) == 9",
            "assert find_even_Pair([1,2,3],3) == 1"
        ],
        "answer_list": [
            "\t",
            "count",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "N",
            "):",
            " \n\t",
            "\t",
            "for",
            " j",
            " in",
            " range",
            "(",
            "i",
            "+",
            "1",
            ",",
            "N",
            "):",
            " \n\t\t",
            "\t",
            "if",
            " (",
            "A",
            "[",
            "i",
            "]",
            " ^",
            " A",
            "[",
            "j",
            "])",
            " %",
            " ",
            "2",
            " ==",
            " ",
            "0",
            ":",
            " \n\t\t\t",
            "\t",
            "count",
            " +=",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " count",
            " \n",
            "\n",
            "A"
        ]
    },
    {
        "task_id": 167,
        "prompt": "Write a python function to find smallest power of 2 greater than or equal to n.\n\ndef next_Power_Of_2(n): \n",
        "answer": "def next_Power_Of_2(n): \n\treturn 1 if n == 0 else 2**(n - 1).bit_length() \n\n",
        "test_list": [
            "assert next_Power_Of_2(0) == 1",
            "assert next_Power_Of_2(5) == 8",
            "assert next_Power_Of_2(17) == 32"
        ],
        "answer_list": [
            "\t",
            "return",
            " ",
            "1",
            " if",
            " n",
            " ==",
            " ",
            "0",
            " else",
            " ",
            "2",
            "**(",
            "n",
            " -",
            " ",
            "1",
            ").",
            "bit",
            "_",
            "length",
            "()",
            " \n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 168,
        "prompt": "Write a python function to find the frequency of a number in a given array.\n\ndef frequency(a,x): \n",
        "answer": "def frequency(a,x): \n\tcount = 0\n\tfor i in range(len(a)): \n\t\tif a[i] == x: \n\t\t\tcount += 1\n\treturn count\n\n",
        "test_list": [
            "assert frequency([1,2,3],4) == 0",
            "assert frequency([1,2,2,3,3,3,4],3) == 3",
            "assert frequency([0,1,2,3,1,2],1) == 2"
        ],
        "answer_list": [
            "\t",
            "count",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "len",
            "(",
            "a",
            ")):",
            " \n\t",
            "\t",
            "if",
            " a",
            "[",
            "i",
            "]",
            " ==",
            " x",
            ":",
            " \n\t\t",
            "\t",
            "count",
            " +=",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " count",
            "\n",
            "\n",
            "a"
        ]
    },
    {
        "task_id": 169,
        "prompt": "Write a python function to calculate the nth pell number.\n\ndef get_pell(n): \n",
        "answer": "def get_pell(n): \n\tif n == 0: \n\t\treturn 0\n\telif n == 1: \n\t\treturn 1\n\telse: \n\t\treturn 2 * get_pell(n - 1) + get_pell(n - 2)\n\n",
        "test_list": [
            "assert get_pell(4) == 12",
            "assert get_pell(7) == 169",
            "assert get_pell(8) == 408"
        ],
        "answer_list": [
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "0",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "0",
            "\n",
            "\t",
            "elif",
            " n",
            " ==",
            " ",
            "1",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "1",
            "\n",
            "\t",
            "else",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "2",
            " *",
            " get",
            "_",
            "p",
            "ell",
            "(",
            "n",
            " -",
            " ",
            "1",
            ")",
            " +",
            " get",
            "_",
            "p",
            "ell",
            "(",
            "n",
            " -",
            " ",
            "2",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 170,
        "prompt": "Write a python function to find sum of the numbers in a list between the indices of a specified range.\n\ndef sum_range_list(list1, m, n):                                                                                                                                                                                                \n",
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n\tsum = 0\n\tfor i in range(m, n+1):\n\t\tsum += list1[i]\n\treturn sum\n\n",
        "test_list": [
            "assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29",
            "assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],5,7)==16",
            "assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],7,10)==38"
        ],
        "answer_list": [
            "\t",
            "sum",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "m",
            ",",
            " n",
            "+",
            "1",
            "):",
            "\n\t",
            "\t",
            "sum",
            " +=",
            " list",
            "1",
            "[",
            "i",
            "]",
            "\n",
            "\t",
            "return",
            " sum",
            "\n",
            "\n",
            "list"
        ]
    },
    {
        "task_id": 171,
        "prompt": "Write a python function to find the perimeter of a pentagon.\n\ndef perimeter_pentagon(a):\n",
        "answer": "def perimeter_pentagon(a):\n\treturn 5*a\n\n",
        "test_list": [
            "assert perimeter_pentagon(5)==25",
            "assert perimeter_pentagon(10)==50",
            "assert perimeter_pentagon(15)==75"
        ],
        "answer_list": [
            "\t",
            "return",
            " ",
            "5",
            "*",
            "a",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 172,
        "prompt": "Write a python function to find the occurence of characters'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\n\ndef count_occurance(s):\n",
        "answer": "def count_occurance(s):\n\tcount = 0\n\tfor i in range(len(s)):\n\t\tif s[i:i+3] =='std':\n\t\t\tcount += 1\n\treturn count\n\n",
        "test_list": [
            "assert count_occurance(\"letstdlenstdporstd\") == 3",
            "assert count_occurance(\"truststdsolensporsd\") == 1",
            "assert count_occurance(\"makestdsostdworthit\") == 2"
        ],
        "answer_list": [
            "\t",
            "count",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "len",
            "(",
            "s",
            ")):",
            "\n\t",
            "\t",
            "if",
            " s",
            "[",
            "i",
            ":",
            "i",
            "+",
            "3",
            "]",
            " ==",
            " '",
            "std",
            "':",
            "\n\t\t",
            "\t",
            "count",
            " +=",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " count",
            "\n",
            "\n"
        ]
    },
    {
        "task_id": 173,
        "prompt": "Write a python function to remove everything except alphanumeric characters from a string.\n\ndef remove_splchar(text): \n",
        "answer": "def remove_splchar(text): \n\treturn re.sub(r'[^a-zA-Z0-9]', '', text)\n\n",
        "test_list": [
            "assert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')",
            "assert remove_splchar('python %^$@!^&*()  programming24%$^^()    language')==('pythonprogramming24language')",
            "assert remove_splchar('python   ^%&^()(+_)(_^&67)                  program')==('python67program')"
        ],
        "answer_list": [
            "\t",
            "return",
            " re",
            ".",
            "sub",
            "(",
            "r",
            "'",
            "[^",
            "a",
            "-",
            "zA",
            "-",
            "Z",
            "0",
            "-",
            "9",
            "]',",
            " '',",
            " text",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 174,
        "prompt": "Write a python function to group a sequence of key-value pairs into a dictionary of lists.\n\ndef group_keyvalue(l):\n",
        "answer": "def group_keyvalue(l):\n\td = {}\n\tfor key, value in l:\n\t\tif key in d:\n\t\t\td[key].append(value)\n\t\telse:\n\t\t\td[key] = [value]\n\treturn d\n\n",
        "test_list": [
            "assert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}",
            "assert group_keyvalue([('python', 1), ('python', 2), ('python', 3), ('python', 4), ('python', 5)])=={'python': [1,2,3,4,5]}",
            "assert group_keyvalue([('yellow',100), ('blue', 200), ('yellow', 300), ('blue', 400), ('red', 100)])=={'yellow': [100, 300], 'blue': [200, 400], 'red': [100]}"
        ],
        "answer_list": [
            "\t",
            "d",
            " =",
            " {}",
            "\n",
            "\t",
            "for",
            " key",
            ",",
            " value",
            " in",
            " l",
            ":",
            "\n\t",
            "\t",
            "if",
            " key",
            " in",
            " d",
            ":",
            "\n\t\t",
            "\t",
            "d",
            "[",
            "key",
            "].",
            "append",
            "(",
            "value",
            ")",
            "\n\t",
            "\t",
            "else",
            ":",
            "\n\t\t",
            "\t",
            "d",
            "[",
            "key",
            "]",
            " =",
            " [",
            "value",
            "]",
            "\n",
            "\t",
            "return",
            " d",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 175,
        "prompt": "Write a python function to verify validity of a string of parentheses.\n\ndef is_valid_parenthese( str1):\n",
        "answer": "def is_valid_parenthese( str1):\n\tstack = []\n\tfor i in str1:\n\t\tif i == '(':\n\t\t\tstack.append(i)\n\t\telif i == ')':\n\t\t\tif len(stack) == 0:\n\t\t\t\treturn False\n\t\t\telse:\n\t\t\t\tstack.pop()\n\tif len(stack) == 0:\n\t\treturn True\n\telse:\n\t\treturn False\n\n",
        "test_list": [
            "assert is_valid_parenthese(\"(){}[]\")==True",
            "assert is_valid_parenthese(\"()[{)}\")==False",
            "assert is_valid_parenthese(\"()\")==True"
        ],
        "answer_list": [
            "\t",
            "stack",
            " =",
            " []",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " str",
            "1",
            ":",
            "\n\t",
            "\t",
            "if",
            " i",
            " ==",
            " '",
            "(':",
            "\n\t\t",
            "\t",
            "stack",
            ".",
            "append",
            "(",
            "i",
            ")",
            "\n\t",
            "\t",
            "elif",
            " i",
            " ==",
            " ')",
            "':",
            "\n\t\t",
            "\t",
            "if",
            " len",
            "(",
            "stack",
            ")",
            " ==",
            " ",
            "0",
            ":",
            "\n\t\t\t",
            "\t",
            "return",
            " False",
            "\n\t\t",
            "\t",
            "else",
            ":",
            "\n\t\t\t",
            "\t",
            "stack",
            ".",
            "pop",
            "()",
            "\n",
            "\t",
            "if",
            " len",
            "(",
            "stack",
            ")",
            " ==",
            " ",
            "0",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 176,
        "prompt": "Write a python function to find the perimeter of a triangle.\n\ndef perimeter_triangle(a,b,c):\n",
        "answer": "def perimeter_triangle(a,b,c):\n\treturn a+b+c\n\n",
        "test_list": [
            "assert perimeter_triangle(10,20,30)==60",
            "assert perimeter_triangle(3,4,5)==12",
            "assert perimeter_triangle(25,35,45)==105"
        ],
        "answer_list": [
            "\t",
            "return",
            " a",
            "+",
            "b",
            "+",
            "c",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 177,
        "prompt": "Write a python function to find two distinct numbers such that their lcm lies within the given range.\n\ndef answer(L,R): \n",
        "answer": "def answer(L,R): \n\tfor i in range(L,R): \n\t\tif (L % i == 0) and (R % i == 0): \n\t\t\treturn i \n\n",
        "test_list": [
            "assert answer(3,8) == (3,6)",
            "assert answer(2,6) == (2,4)",
            "assert answer(1,3) == (1,2)"
        ],
        "answer_list": [
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "L",
            ",",
            "R",
            "):",
            " \n\t",
            "\t",
            "if",
            " (",
            "L",
            " %",
            " i",
            " ==",
            " ",
            "0",
            ")",
            " and",
            " (",
            "R",
            " %",
            " i",
            " ==",
            " ",
            "0",
            "):",
            " \n\t\t",
            "\t",
            "return",
            " i",
            " \n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 178,
        "prompt": "Write a python function to search some literals strings in a string.\n\ndef string_literals(patterns,text):\n",
        "answer": "def string_literals(patterns,text):\n\tfor pattern in patterns:\n\t\tif pattern in text:\n\t\t\tprint(pattern)\n\n",
        "test_list": [
            "assert string_literals(['language'],'python language')==('Matched!')",
            "assert string_literals(['program'],'python language')==('Not Matched!')",
            "assert string_literals(['python'],'programming language')==('Not Matched!')"
        ],
        "answer_list": [
            "\t",
            "for",
            " pattern",
            " in",
            " patterns",
            ":",
            "\n\t",
            "\t",
            "if",
            " pattern",
            " in",
            " text",
            ":",
            "\n\t\t",
            "\t",
            "print",
            "(",
            "pattern",
            ")",
            "\n",
            "\n",
            "string"
        ]
    },
    {
        "task_id": 179,
        "prompt": "Write a python function to find if the given number is a keith number or not.\n\ndef is_num_keith(x): \n",
        "answer": "def is_num_keith(x): \n\tif x == 1:\n\t\treturn True\n\tif x == 2:\n\t\treturn True\n\tif x == 3:\n\t\treturn True\n\tif x == 5:\n\t\treturn True\n\tif x == 8:\n\t\treturn True\n\tif x == 13:\n\t\treturn True\n\tif x == 21:\n\t\treturn True\n\tif x == 34:\n\t\treturn True\n\tif x == 55:\n\t\treturn True\n\tif x == 89:\n\t\treturn True\n\tif x == 144:\n\t\treturn True\n\tif x == 233:\n\t\treturn True\n\tif x == 377:\n\t\treturn True\n\tif x == 610:\n\t\treturn True\n\tif x == 987:\n\t\treturn True\n\tif x == 1597:\n\t\treturn True\n\tif x == 2584:\n\t\treturn True\n\tif x == 4181:\n\t\treturn True\n\tif x == 6765:\n\t\treturn True\n\tif x == 10946:\n\t\treturn True\n\tif x == 17711:\n\t\treturn True\n\tif x == 28657:\n\t\treturn True\n\tif x == 46368:\n\t\treturn True\n\tif x == 75025:\n\t\treturn True\n\tif x == 121393:\n\t\treturn True\n\tif x == 196418:\n\t\treturn True\n\tif x == 317811:\n\t\treturn True\n\tif x == 514229:\n\t\treturn True\n\tif x == 832040:\n\t\treturn True\n\tif x == 1346269:\n\t\treturn True\n\tif x == 2178309:\n\t\treturn True\n\tif x == 3524578:\n\t\treturn True\n\tif x == 5702887:\n\t\treturn True\n\tif x == 9227465:\n\t\treturn True\n\tif x == 14930352:\n\t\treturn True\n\tif x == 24157817:\n\t\treturn True\n\tif x == 39088169:\n\t\treturn True\n\tif x == 63245986:\n\t\treturn True\n\tif x == 102334155:\n\t\treturn True\n\tif x == 165580141:\n\t\treturn True\n\tif x == 267914296:\n\t\treturn True\n\tif x == 433494437:\n\t\treturn True\n\tif x == 701408733:\n\t\treturn True\n\tif x == 1134903170:\n\t\treturn True\n\tif x == 1836311903:\n\t\treturn True\n\tif x == 2971215073:\n\t\treturn True\n\tif x == 4807526976:\n\t\treturn True\n\tif x == 7778742049:\n\t\treturn True\n\tif x == 12586269025:\n\t\treturn True\n\tif x == 20365011074:\n\t\treturn True\n\tif x == 32951280099:\n\t\treturn True\n\tif x == 53316291173:\n\t\treturn True\n\tif x == 86267571272:\n\t\treturn True\n\tif x == 139583862445:\n\t\treturn True\n\tif x == 225851433717:\n\t\treturn True\n\tif x == 365435296162:\n\t\treturn True\n\tif x == 591286729879:\n\t\treturn True\n\tif x == 956722026041:\n\t\treturn True\n\tif x == 154",
        "test_list": [
            "assert is_num_keith(14) == True",
            "assert is_num_keith(12) == False",
            "assert is_num_keith(197) == True"
        ],
        "answer_list": [
            "\t",
            "if",
            " x",
            " ==",
            " ",
            "1",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " x",
            " ==",
            " ",
            "2",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " x",
            " ==",
            " ",
            "3",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " x",
            " ==",
            " ",
            "5",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " x",
            " ==",
            " ",
            "8",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " x",
            " ==",
            " ",
            "1",
            "3",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " x",
            " ==",
            " ",
            "2",
            "1",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " x",
            " ==",
            " ",
            "3",
            "4",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " x",
            " ==",
            " ",
            "5",
            "5",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " x",
            " ==",
            " ",
            "8",
            "9",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " x",
            " ==",
            " ",
            "1",
            "4",
            "4",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " x",
            " ==",
            " ",
            "2",
            "3",
            "3",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " x",
            " ==",
            " ",
            "3",
            "7",
            "7",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " x",
            " ==",
            " ",
            "6",
            "1",
            "0",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " x",
            " ==",
            " ",
            "9",
            "8",
            "7",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " x",
            " ==",
            " ",
            "1",
            "5",
            "9",
            "7",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " x",
            " ==",
            " ",
            "2",
            "5",
            "8",
            "4",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " x",
            " ==",
            " ",
            "4",
            "1",
            "8",
            "1",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " x",
            " ==",
            " ",
            "6",
            "7",
            "6",
            "5",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " x",
            " ==",
            " ",
            "1",
            "0",
            "9",
            "4",
            "6",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " x",
            " ==",
            " ",
            "1",
            "7",
            "7",
            "1",
            "1",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " x",
            " ==",
            " ",
            "2",
            "8",
            "6",
            "5",
            "7",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " x",
            " ==",
            " ",
            "4",
            "6",
            "3",
            "6",
            "8",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " x",
            " ==",
            " ",
            "7",
            "5",
            "0",
            "2",
            "5",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " x",
            " ==",
            " ",
            "1",
            "2",
            "1",
            "3",
            "9",
            "3",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " x",
            " ==",
            " ",
            "1",
            "9",
            "6",
            "4",
            "1",
            "8",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " x",
            " ==",
            " ",
            "3",
            "1",
            "7",
            "8",
            "1",
            "1",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " x",
            " ==",
            " ",
            "5",
            "1",
            "4",
            "2",
            "2",
            "9",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " x",
            " ==",
            " ",
            "8",
            "3",
            "2",
            "0",
            "4",
            "0",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " x",
            " ==",
            " ",
            "1",
            "3",
            "4",
            "6",
            "2",
            "6",
            "9",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " x",
            " ==",
            " ",
            "2",
            "1",
            "7",
            "8",
            "3",
            "0",
            "9",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " x",
            " ==",
            " ",
            "3",
            "5",
            "2",
            "4",
            "5",
            "7",
            "8",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " x",
            " ==",
            " ",
            "5",
            "7",
            "0",
            "2",
            "8",
            "8",
            "7",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " x",
            " ==",
            " ",
            "9",
            "2",
            "2",
            "7",
            "4",
            "6",
            "5",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " x",
            " ==",
            " ",
            "1",
            "4",
            "9",
            "3",
            "0",
            "3",
            "5",
            "2",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " x",
            " ==",
            " ",
            "2",
            "4",
            "1",
            "5",
            "7",
            "8",
            "1",
            "7",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " x",
            " ==",
            " ",
            "3",
            "9",
            "0",
            "8",
            "8",
            "1",
            "6",
            "9",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " x",
            " ==",
            " ",
            "6",
            "3",
            "2",
            "4",
            "5",
            "9",
            "8",
            "6",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " x",
            " ==",
            " ",
            "1",
            "0",
            "2",
            "3",
            "3",
            "4",
            "1",
            "5",
            "5",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " x",
            " ==",
            " ",
            "1",
            "6",
            "5",
            "5",
            "8",
            "0",
            "1",
            "4",
            "1",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " x",
            " ==",
            " ",
            "2",
            "6",
            "7",
            "9",
            "1",
            "4",
            "2",
            "9",
            "6",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " x",
            " ==",
            " ",
            "4",
            "3",
            "3",
            "4",
            "9",
            "4",
            "4",
            "3",
            "7",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " x",
            " ==",
            " ",
            "7",
            "0",
            "1",
            "4",
            "0",
            "8",
            "7",
            "3",
            "3",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " x",
            " ==",
            " ",
            "1",
            "1",
            "3",
            "4",
            "9",
            "0",
            "3",
            "1",
            "7",
            "0",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " x",
            " ==",
            " ",
            "1",
            "8",
            "3",
            "6",
            "3",
            "1",
            "1",
            "9",
            "0",
            "3",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " x",
            " ==",
            " ",
            "2",
            "9",
            "7",
            "1",
            "2",
            "1",
            "5",
            "0",
            "7",
            "3",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " x",
            " ==",
            " ",
            "4",
            "8",
            "0",
            "7",
            "5",
            "2",
            "6",
            "9",
            "7",
            "6",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " x",
            " ==",
            " ",
            "7",
            "7",
            "7",
            "8",
            "7",
            "4",
            "2",
            "0",
            "4",
            "9",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " x",
            " ==",
            " ",
            "1",
            "2",
            "5",
            "8",
            "6",
            "2",
            "6",
            "9",
            "0",
            "2",
            "5",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " x",
            " ==",
            " ",
            "2",
            "0",
            "3",
            "6",
            "5",
            "0",
            "1",
            "1",
            "0",
            "7",
            "4",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " x",
            " ==",
            " ",
            "3",
            "2",
            "9",
            "5",
            "1",
            "2",
            "8",
            "0",
            "0",
            "9",
            "9",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " x",
            " ==",
            " ",
            "5",
            "3",
            "3",
            "1",
            "6",
            "2",
            "9",
            "1",
            "1",
            "7",
            "3",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " x",
            " ==",
            " ",
            "8",
            "6",
            "2",
            "6",
            "7",
            "5",
            "7",
            "1",
            "2",
            "7",
            "2",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " x",
            " ==",
            " ",
            "1",
            "3",
            "9",
            "5",
            "8",
            "3",
            "8",
            "6",
            "2",
            "4",
            "4",
            "5",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " x",
            " ==",
            " ",
            "2",
            "2",
            "5",
            "8",
            "5",
            "1",
            "4",
            "3",
            "3",
            "7",
            "1",
            "7",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " x",
            " ==",
            " ",
            "3",
            "6",
            "5",
            "4",
            "3",
            "5",
            "2",
            "9",
            "6",
            "1",
            "6",
            "2",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " x",
            " ==",
            " ",
            "5",
            "9",
            "1",
            "2",
            "8",
            "6",
            "7",
            "2",
            "9",
            "8",
            "7",
            "9",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " x",
            " ==",
            " ",
            "9",
            "5",
            "6",
            "7",
            "2",
            "2",
            "0",
            "2",
            "6",
            "0",
            "4",
            "1",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " x",
            " ==",
            " ",
            "1",
            "5",
            "4"
        ]
    },
    {
        "task_id": 180,
        "prompt": "Write a python function to calculate distance between two points using latitude and longitude.\n\ndef distance_lat_long(slat,slon,elat,elon):\n",
        "answer": "def distance_lat_long(slat,slon,elat,elon):\n\t# approximate radius of earth in km\n\tR = 6373.0\n\n",
        "test_list": [
            "assert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429",
            "assert distance_lat_long(10.5,20.5,30.5,40.5)==6069.397933300514",
            "assert distance_lat_long(10,20,30,40)==6783.751974994595"
        ],
        "answer_list": [
            "\t",
            "#",
            " approximate",
            " radius",
            " of",
            " earth",
            " in",
            " km",
            "\n",
            "\t",
            "R",
            " =",
            " ",
            "6",
            "3",
            "7",
            "3",
            ".",
            "0",
            "\n\n",
            "\t"
        ]
    },
    {
        "task_id": 181,
        "prompt": "Write a python function to find the longest common prefix in the given set of strings.\n\ndef common_prefix (arr, n): \n",
        "answer": "def common_prefix (arr, n): \n\tif n == 0: \n\t\treturn \"\" \n\tprefix = arr[0] \n\tfor i in range(1, n): \n\t\twhile (arr[i].find(prefix)!= 0): \n\t\t\tprefix = prefix[:len(prefix)-1] \n\t\t\tif (len(prefix) == 0): \n\t\t\t\treturn \"\" \n\treturn prefix \n\n",
        "test_list": [
            "assert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'",
            "assert common_prefix([\"apples\", \"ape\", \"april\"], 3) == 'ap'",
            "assert common_prefix([\"teens\", \"teenager\", \"teenmar\"], 3) == 'teen'"
        ],
        "answer_list": [
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "0",
            ":",
            " \n\t",
            "\t",
            "return",
            " \"\"",
            " \n",
            "\t",
            "prefix",
            " =",
            " arr",
            "[",
            "0",
            "]",
            " \n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "1",
            ",",
            " n",
            "):",
            " \n\t",
            "\t",
            "while",
            " (",
            "arr",
            "[",
            "i",
            "].",
            "find",
            "(",
            "prefix",
            ")",
            "!=",
            " ",
            "0",
            "):",
            " \n\t\t",
            "\t",
            "prefix",
            " =",
            " prefix",
            "[:",
            "len",
            "(",
            "prefix",
            ")-",
            "1",
            "]",
            " \n\t\t",
            "\t",
            "if",
            " (",
            "len",
            "(",
            "prefix",
            ")",
            " ==",
            " ",
            "0",
            "):",
            " \n\t\t\t",
            "\t",
            "return",
            " \"\"",
            " \n",
            "\t",
            "return",
            " prefix",
            " \n",
            "\n",
            "#"
        ]
    },
    {
        "task_id": 182,
        "prompt": "Write a python function to find uppercase, lowercase, special character and numeric values using regex.\n\ndef find_character(string):\n",
        "answer": "def find_character(string):\n\timport re\n\tpattern = re.compile(r'[a-zA-Z0-9]')\n\tresult = pattern.findall(string)\n\treturn result\n\n",
        "test_list": [
            "assert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])",
            "assert find_character(\"Hithere2\") == (['H'], ['i', 't', 'h', 'e', 'r', 'e'], ['2'], [])",
            "assert find_character(\"HeyFolks32\") == (['H', 'F'], ['e', 'y', 'o', 'l', 'k', 's'], ['3', '2'], [])"
        ],
        "answer_list": [
            "\t",
            "import",
            " re",
            "\n",
            "\t",
            "pattern",
            " =",
            " re",
            ".",
            "compile",
            "(",
            "r",
            "'[",
            "a",
            "-",
            "zA",
            "-",
            "Z",
            "0",
            "-",
            "9",
            "]')",
            "\n",
            "\t",
            "result",
            " =",
            " pattern",
            ".",
            "findall",
            "(",
            "string",
            ")",
            "\n",
            "\t",
            "return",
            " result",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 183,
        "prompt": "Write a python function to count all the distinct pairs having a difference of k in any array.\n\ndef count_pairs(arr, n, k):\n",
        "answer": "def count_pairs(arr, n, k):\n\tcount = 0\n\tfor i in range(n):\n\t\tfor j in range(i+1, n):\n\t\t\tif arr[i] - arr[j] == k:\n\t\t\t\tcount += 1\n\treturn count\n\n",
        "test_list": [
            "assert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2",
            "assert count_pairs([8, 12, 16, 4, 0, 20], 6, 4) == 5",
            "assert count_pairs([2, 4, 1, 3, 4], 5, 2) == 3"
        ],
        "answer_list": [
            "\t",
            "count",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "n",
            "):",
            "\n\t",
            "\t",
            "for",
            " j",
            " in",
            " range",
            "(",
            "i",
            "+",
            "1",
            ",",
            " n",
            "):",
            "\n\t\t",
            "\t",
            "if",
            " arr",
            "[",
            "i",
            "]",
            " -",
            " arr",
            "[",
            "j",
            "]",
            " ==",
            " k",
            ":",
            "\n\t\t\t",
            "\t",
            "count",
            " +=",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " count",
            "\n",
            "\n",
            "arr"
        ]
    },
    {
        "task_id": 184,
        "prompt": "Write a python function to find all the values in a list that are greater than a specified number.\n\ndef greater_specificnum(list,num):\n",
        "answer": "def greater_specificnum(list,num):\n\treturn [i for i in list if i>num]\n\n",
        "test_list": [
            "assert greater_specificnum([220, 330, 500],200)==True",
            "assert greater_specificnum([12, 17, 21],20)==False",
            "assert greater_specificnum([1,2,3,4],10)==False"
        ],
        "answer_list": [
            "\t",
            "return",
            " [",
            "i",
            " for",
            " i",
            " in",
            " list",
            " if",
            " i",
            ">",
            "num",
            "]",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 185,
        "prompt": "Write a python function to find the focus of a parabola.\n\ndef parabola_focus(a, b, c): \n",
        "answer": "def parabola_focus(a, b, c): \n\td = b**2 - 4*a*c\n\tif d < 0:\n\t\treturn None\n\telse:\n\t\tx1 = (-b + math.sqrt(d)) / (2*a)\n\t\tx2 = (-b - math.sqrt(d)) / (2*a)\n\t\treturn x1, x2\n\n",
        "test_list": [
            "assert parabola_focus(5,3,2)==(-0.3, 1.6)",
            "assert parabola_focus(9,8,4)==(-0.4444444444444444, 2.25)",
            "assert parabola_focus(2,4,6)==(-1.0, 4.125)"
        ],
        "answer_list": [
            "\t",
            "d",
            " =",
            " b",
            "**",
            "2",
            " -",
            " ",
            "4",
            "*",
            "a",
            "*",
            "c",
            "\n",
            "\t",
            "if",
            " d",
            " <",
            " ",
            "0",
            ":",
            "\n\t",
            "\t",
            "return",
            " None",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "x",
            "1",
            " =",
            " (-",
            "b",
            " +",
            " math",
            ".",
            "sqrt",
            "(",
            "d",
            "))",
            " /",
            " (",
            "2",
            "*",
            "a",
            ")",
            "\n\t",
            "\t",
            "x",
            "2",
            " =",
            " (-",
            "b",
            " -",
            " math",
            ".",
            "sqrt",
            "(",
            "d",
            "))",
            " /",
            " (",
            "2",
            "*",
            "a",
            ")",
            "\n\t",
            "\t",
            "return",
            " x",
            "1",
            ",",
            " x",
            "2",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 186,
        "prompt": "Write a python function to search some literals strings in a string by using regex.\n\ndef check_literals(text, patterns):\n",
        "answer": "def check_literals(text, patterns):\n\tfor pattern in patterns:\n\t\tif re.search(pattern, text):\n\t\t\treturn True\n\treturn False\n\n",
        "test_list": [
            "assert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'",
            "assert check_literals('The quick brown fox jumps over the lazy dog.',['horse']) == 'Not Matched!'",
            "assert check_literals('The quick brown fox jumps over the lazy dog.',['lazy']) == 'Matched!'"
        ],
        "answer_list": [
            "\t",
            "for",
            " pattern",
            " in",
            " patterns",
            ":",
            "\n\t",
            "\t",
            "if",
            " re",
            ".",
            "search",
            "(",
            "pattern",
            ",",
            " text",
            "):",
            "\n\t\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "return",
            " False",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 187,
        "prompt": "Write a python function to find the longest common subsequence for the given two sequences.\n\ndef longest_common_subsequence(X, Y, m, n): \n",
        "answer": "def longest_common_subsequence(X, Y, m, n): \n\tL = [[0 for x in range(n+1)] for x in range(m+1)] \n\tfor i in range(m+1): \n\t\tfor j in range(n+1): \n\t\t\tif i == 0 or j == 0: \n\t\t\t\tL[i][j] = 0\n\t\t\telif X[i-1] == Y[j-1]: \n\t\t\t\tL[i][j] = L[i-1][j-1]+1\n\t\t\telse: \n\t\t\t\tL[i][j] = max(L[i-1][j], L[i][j-1]) \n\treturn L[m][n] \n\n",
        "test_list": [
            "assert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4",
            "assert longest_common_subsequence(\"ABCDGH\" , \"AEDFHR\", 6, 6) == 3",
            "assert longest_common_subsequence(\"AXYT\" , \"AYZX\", 4, 4) == 2"
        ],
        "answer_list": [
            "\t",
            "L",
            " =",
            " [[",
            "0",
            " for",
            " x",
            " in",
            " range",
            "(",
            "n",
            "+",
            "1",
            ")]",
            " for",
            " x",
            " in",
            " range",
            "(",
            "m",
            "+",
            "1",
            ")]",
            " \n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "m",
            "+",
            "1",
            "):",
            " \n\t",
            "\t",
            "for",
            " j",
            " in",
            " range",
            "(",
            "n",
            "+",
            "1",
            "):",
            " \n\t\t",
            "\t",
            "if",
            " i",
            " ==",
            " ",
            "0",
            " or",
            " j",
            " ==",
            " ",
            "0",
            ":",
            " \n\t\t\t",
            "\t",
            "L",
            "[",
            "i",
            "][",
            "j",
            "]",
            " =",
            " ",
            "0",
            "\n\t\t",
            "\t",
            "elif",
            " X",
            "[",
            "i",
            "-",
            "1",
            "]",
            " ==",
            " Y",
            "[",
            "j",
            "-",
            "1",
            "]:",
            " \n\t\t\t",
            "\t",
            "L",
            "[",
            "i",
            "][",
            "j",
            "]",
            " =",
            " L",
            "[",
            "i",
            "-",
            "1",
            "][",
            "j",
            "-",
            "1",
            "]+",
            "1",
            "\n\t\t",
            "\t",
            "else",
            ":",
            " \n\t\t\t",
            "\t",
            "L",
            "[",
            "i",
            "][",
            "j",
            "]",
            " =",
            " max",
            "(",
            "L",
            "[",
            "i",
            "-",
            "1",
            "][",
            "j",
            "],",
            " L",
            "[",
            "i",
            "][",
            "j",
            "-",
            "1",
            "])",
            " \n",
            "\t",
            "return",
            " L",
            "[",
            "m",
            "][",
            "n",
            "]",
            " \n",
            "\n",
            "X"
        ]
    },
    {
        "task_id": 188,
        "prompt": "Write a python function to check whether the given number can be represented by product of two squares or not.\n\ndef prod_Square(n):\n",
        "answer": "def prod_Square(n):\n\tif n == 1:\n\t\treturn True\n\tfor i in range(2, int(n**0.5)+1):\n\t\tif n % i == 0:\n\t\t\treturn False\n\treturn True\n\n",
        "test_list": [
            "assert prod_Square(25) == False",
            "assert prod_Square(30) == False",
            "assert prod_Square(16) == True"
        ],
        "answer_list": [
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "1",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "2",
            ",",
            " int",
            "(",
            "n",
            "**",
            "0",
            ".",
            "5",
            ")+",
            "1",
            "):",
            "\n\t",
            "\t",
            "if",
            " n",
            " %",
            " i",
            " ==",
            " ",
            "0",
            ":",
            "\n\t\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "return",
            " True",
            "\n",
            "\n",
            "def"
        ]
    },
    {
        "task_id": 189,
        "prompt": "Write a python function to find the first missing positive number.\n\ndef first_Missing_Positive(arr,n): \n",
        "answer": "def first_Missing_Positive(arr,n): \n\tfor i in range(n): \n\t\tif (abs(arr[i]) - 1 < n and arr[abs(arr[i]) - 1] > 0): \n\t\t\tarr[abs(arr[i]) - 1] = -arr[abs(arr[i]) - 1] \n\tfor i in range(n): \n\t\tif (arr[i] > 0): \n\t\t\treturn i + 1\n\treturn n + 1\n\n",
        "test_list": [
            "assert first_Missing_Positive([1,2,3,-1,5],5) == 4",
            "assert first_Missing_Positive([0,-1,-2,1,5,8],6) == 2",
            "assert first_Missing_Positive([0,1,2,5,-8],5) == 3"
        ],
        "answer_list": [
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "n",
            "):",
            " \n\t",
            "\t",
            "if",
            " (",
            "abs",
            "(",
            "arr",
            "[",
            "i",
            "])",
            " -",
            " ",
            "1",
            " <",
            " n",
            " and",
            " arr",
            "[",
            "abs",
            "(",
            "arr",
            "[",
            "i",
            "])",
            " -",
            " ",
            "1",
            "]",
            " >",
            " ",
            "0",
            "):",
            " \n\t\t",
            "\t",
            "arr",
            "[",
            "abs",
            "(",
            "arr",
            "[",
            "i",
            "])",
            " -",
            " ",
            "1",
            "]",
            " =",
            " -",
            "arr",
            "[",
            "abs",
            "(",
            "arr",
            "[",
            "i",
            "])",
            " -",
            " ",
            "1",
            "]",
            " \n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "n",
            "):",
            " \n\t",
            "\t",
            "if",
            " (",
            "arr",
            "[",
            "i",
            "]",
            " >",
            " ",
            "0",
            "):",
            " \n\t\t",
            "\t",
            "return",
            " i",
            " +",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " n",
            " +",
            " ",
            "1",
            "\n",
            "\n",
            "arr"
        ]
    },
    {
        "task_id": 190,
        "prompt": "Write a python function to count the number of integral co-ordinates that lie inside a square.\n\ndef count_Intgral_Points(x1,y1,x2,y2): \n",
        "answer": "def count_Intgral_Points(x1,y1,x2,y2): \n\treturn (x2-x1)*(y2-y1)\n\n",
        "test_list": [
            "assert count_Intgral_Points(1,1,4,4) == 4",
            "assert count_Intgral_Points(1,2,1,2) == 1",
            "assert count_Intgral_Points(4,2,6,4) == 1"
        ],
        "answer_list": [
            "\t",
            "return",
            " (",
            "x",
            "2",
            "-",
            "x",
            "1",
            ")*(",
            "y",
            "2",
            "-",
            "y",
            "1",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 191,
        "prompt": "Write a python function to check whether the given month name contains 30 days or not.\n\ndef check_monthnumber(monthname3):\n",
        "answer": "def check_monthnumber(monthname3):\n\tif monthname3 == \"January\" or monthname3 == \"March\" or monthname3 == \"May\" or monthname3 == \"July\" or monthname3 == \"August\" or monthname3 == \"October\" or monthname3 == \"December\":\n\t\treturn True\n\telse:\n\t\treturn False\n\n",
        "test_list": [
            "assert check_monthnumber(\"February\")==False",
            "assert check_monthnumber(\"June\")==True",
            "assert check_monthnumber(\"April\")==True"
        ],
        "answer_list": [
            "\t",
            "if",
            " month",
            "name",
            "3",
            " ==",
            " \"",
            "January",
            "\"",
            " or",
            " month",
            "name",
            "3",
            " ==",
            " \"",
            "March",
            "\"",
            " or",
            " month",
            "name",
            "3",
            " ==",
            " \"",
            "May",
            "\"",
            " or",
            " month",
            "name",
            "3",
            " ==",
            " \"",
            "July",
            "\"",
            " or",
            " month",
            "name",
            "3",
            " ==",
            " \"",
            "Aug",
            "ust",
            "\"",
            " or",
            " month",
            "name",
            "3",
            " ==",
            " \"",
            "Oct",
            "ober",
            "\"",
            " or",
            " month",
            "name",
            "3",
            " ==",
            " \"",
            "De",
            "cember",
            "\":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 192,
        "prompt": "Write a python function to check whether a string has atleast one letter and one number.\n\ndef check_String(str): \n",
        "answer": "def check_String(str): \n\treturn any(char.isdigit() for char in str) and any(char.isalpha() for char in str)\n\n",
        "test_list": [
            "assert check_String('thishasboth29') == True",
            "assert check_String('python') == False",
            "assert check_String ('string') == False"
        ],
        "answer_list": [
            "\t",
            "return",
            " any",
            "(",
            "char",
            ".",
            "isdigit",
            "()",
            " for",
            " char",
            " in",
            " str",
            ")",
            " and",
            " any",
            "(",
            "char",
            ".",
            "is",
            "alpha",
            "()",
            " for",
            " char",
            " in",
            " str",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 193,
        "prompt": "Write a python function to remove the duplicates from the given tuple.\n\ndef remove_tuple(test_tup):\n",
        "answer": "def remove_tuple(test_tup):\n\treturn tuple(set(test_tup))\n\n",
        "test_list": [
            "assert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)",
            "assert remove_tuple((2, 3, 4, 4, 5, 6, 6, 7, 8, 8)) == (2, 3, 4, 5, 6, 7, 8)",
            "assert remove_tuple((11, 12, 13, 11, 11, 12, 14, 13)) == (11, 12, 13, 14)"
        ],
        "answer_list": [
            "\t",
            "return",
            " tuple",
            "(",
            "set",
            "(",
            "test",
            "_",
            "tup",
            "))",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 194,
        "prompt": "Write a python function to convert octal number to decimal number.\n\ndef octal_To_Decimal(n):  \n",
        "answer": "def octal_To_Decimal(n):  \n\treturn int(n, 8) \n\n",
        "test_list": [
            "assert octal_To_Decimal(25) == 21",
            "assert octal_To_Decimal(30) == 24",
            "assert octal_To_Decimal(40) == 32"
        ],
        "answer_list": [
            "\t",
            "return",
            " int",
            "(",
            "n",
            ",",
            " ",
            "8",
            ")",
            " \n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 195,
        "prompt": "Write a python function to find the first position of an element in a sorted array.\n\ndef first(arr,x,n): \n",
        "answer": "def first(arr,x,n): \n\tfor i in range(0,n): \n\t\tif (arr[i] == x): \n\t\t\treturn i \n\treturn -1\n\n",
        "test_list": [
            "assert first([1,2,3,4,5,6,6],6,6) == 5",
            "assert first([1,2,2,2,3,2,2,4,2],2,9) == 1",
            "assert first([1,2,3],1,3) == 0"
        ],
        "answer_list": [
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "0",
            ",",
            "n",
            "):",
            " \n\t",
            "\t",
            "if",
            " (",
            "arr",
            "[",
            "i",
            "]",
            " ==",
            " x",
            "):",
            " \n\t\t",
            "\t",
            "return",
            " i",
            " \n",
            "\t",
            "return",
            " -",
            "1",
            "\n",
            "\n",
            "arr"
        ]
    },
    {
        "task_id": 196,
        "prompt": "Write a python function to remove all the tuples with length k.\n\ndef remove_tuples(test_list, K):\n",
        "answer": "def remove_tuples(test_list, K):\n\treturn [x for x in test_list if len(x)!= K]\n\n",
        "test_list": [
            "assert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]",
            "assert remove_tuples([(4, 5), (4,5), (6, 7), (1, 2, 3), (3, 4, 6, 7)] ,2) == [(1, 2, 3), (3, 4, 6, 7)]",
            "assert remove_tuples([(1, 4, 4), (4, 3), (8, 6, 7), (1, ), (3, 6, 7)] , 3) == [(4, 3), (1,)]"
        ],
        "answer_list": [
            "\t",
            "return",
            " [",
            "x",
            " for",
            " x",
            " in",
            " test",
            "_",
            "list",
            " if",
            " len",
            "(",
            "x",
            ")",
            "!=",
            " K",
            "]",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 197,
        "prompt": "Write a python function to perform the exponentiation of the given two tuples.\n\ndef find_exponentio(test_tup1, test_tup2):\n",
        "answer": "def find_exponentio(test_tup1, test_tup2):\n\treturn (test_tup1[0]**test_tup2[0], test_tup1[1]**test_tup2[1])\n\n",
        "test_list": [
            "assert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)",
            "assert find_exponentio((11, 5, 6, 7), (6, 7, 8, 6)) == (1771561, 78125, 1679616, 117649)",
            "assert find_exponentio((12, 6, 7, 8), (7, 8, 9, 7)) == (35831808, 1679616, 40353607, 2097152)"
        ],
        "answer_list": [
            "\t",
            "return",
            " (",
            "test",
            "_",
            "tup",
            "1",
            "[",
            "0",
            "]**",
            "test",
            "_",
            "tup",
            "2",
            "[",
            "0",
            "],",
            " test",
            "_",
            "tup",
            "1",
            "[",
            "1",
            "]**",
            "test",
            "_",
            "tup",
            "2",
            "[",
            "1",
            "])",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 198,
        "prompt": "Write a python function to find the largest triangle that can be inscribed in an ellipse.\n\ndef largest_triangle(a,b): \n",
        "answer": "def largest_triangle(a,b): \n\treturn (a*b)/2\n\n",
        "test_list": [
            "assert largest_triangle(4,2)==10.392304845413264",
            "assert largest_triangle(5,7)==4.639421805988064",
            "assert largest_triangle(9,1)==105.2220865598093"
        ],
        "answer_list": [
            "\t",
            "return",
            " (",
            "a",
            "*",
            "b",
            ")/",
            "2",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 199,
        "prompt": "Write a python function to find highest power of 2 less than or equal to given number.\n\ndef highest_Power_of_2(n): \n",
        "answer": "def highest_Power_of_2(n): \n\treturn 2**(len(bin(n))-2)\n\n",
        "test_list": [
            "assert highest_Power_of_2(10) == 8",
            "assert highest_Power_of_2(19) == 16",
            "assert highest_Power_of_2(32) == 32"
        ],
        "answer_list": [
            "\t",
            "return",
            " ",
            "2",
            "**(",
            "len",
            "(",
            "bin",
            "(",
            "n",
            "))",
            "-",
            "2",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 200,
        "prompt": "Write a python function to find all index positions of the maximum values in a given list.\n\ndef position_max(list1):\n",
        "answer": "def position_max(list1):\n\tmax_value = max(list1)\n\tmax_index = []\n\tfor i in range(len(list1)):\n\t\tif list1[i] == max_value:\n\t\t\tmax_index.append(i)\n\treturn max_index\n\n",
        "test_list": [
            "assert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]",
            "assert position_max([1,2,2,2,4,4,4,5,5,5,5])==[7,8,9,10]",
            "assert position_max([2,1,5,6,8,3,4,9,10,11,8,12])==[11]"
        ],
        "answer_list": [
            "\t",
            "max",
            "_",
            "value",
            " =",
            " max",
            "(",
            "list",
            "1",
            ")",
            "\n",
            "\t",
            "max",
            "_",
            "index",
            " =",
            " []",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "len",
            "(",
            "list",
            "1",
            ")):",
            "\n\t",
            "\t",
            "if",
            " list",
            "1",
            "[",
            "i",
            "]",
            " ==",
            " max",
            "_",
            "value",
            ":",
            "\n\t\t",
            "\t",
            "max",
            "_",
            "index",
            ".",
            "append",
            "(",
            "i",
            ")",
            "\n",
            "\t",
            "return",
            " max",
            "_",
            "index",
            "\n",
            "\n",
            "list"
        ]
    },
    {
        "task_id": 201,
        "prompt": "Write a python function to check whether the elements in a list are same or not.\n\ndef chkList(lst): \n",
        "answer": "def chkList(lst): \n\treturn lst.count(lst[0]) == len(lst)\n\n",
        "test_list": [
            "assert chkList(['one','one','one']) == True",
            "assert chkList(['one','Two','Three']) == False",
            "assert chkList(['bigdata','python','Django']) == False"
        ],
        "answer_list": [
            "\t",
            "return",
            " lst",
            ".",
            "count",
            "(",
            "lst",
            "[",
            "0",
            "])",
            " ==",
            " len",
            "(",
            "lst",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 202,
        "prompt": "Write a python function to remove even characters in a string.\n\ndef remove_even(str1):\n",
        "answer": "def remove_even(str1):\n\tstr2 = \"\"\n\tfor i in str1:\n\t\tif ord(i)%2!= 0:\n\t\t\tstr2 += i\n\treturn str2\n\n",
        "test_list": [
            "assert remove_even(\"python\")==(\"pto\")",
            "assert remove_even(\"program\")==(\"porm\")",
            "assert remove_even(\"language\")==(\"lnug\")"
        ],
        "answer_list": [
            "\t",
            "str",
            "2",
            " =",
            " \"\"",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " str",
            "1",
            ":",
            "\n\t",
            "\t",
            "if",
            " ord",
            "(",
            "i",
            ")%",
            "2",
            "!=",
            " ",
            "0",
            ":",
            "\n\t\t",
            "\t",
            "str",
            "2",
            " +=",
            " i",
            "\n",
            "\t",
            "return",
            " str",
            "2",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 203,
        "prompt": "Write a python function to find the hamming distance between given two integers.\n\ndef hamming_Distance(n1,n2) : \n",
        "answer": "def hamming_Distance(n1,n2) : \n\treturn bin(n1^n2).count('1')\n\n",
        "test_list": [
            "assert hamming_Distance(4,8) == 2",
            "assert hamming_Distance(2,4) == 2",
            "assert hamming_Distance(1,2) == 2"
        ],
        "answer_list": [
            "\t",
            "return",
            " bin",
            "(",
            "n",
            "1",
            "^",
            "n",
            "2",
            ").",
            "count",
            "('",
            "1",
            "')",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 204,
        "prompt": "Write a python function to count the occurrence of a given character in a string.\n\ndef count(s,c) : \n",
        "answer": "def count(s,c) : \n\tcount = 0\n\tfor i in s : \n\t\tif i == c : \n\t\t\tcount += 1\n\treturn count\n\n",
        "test_list": [
            "assert count(\"abcc\",\"c\") == 2",
            "assert count(\"ababca\",\"a\") == 3",
            "assert count(\"mnmm0pm\",\"m\") == 4"
        ],
        "answer_list": [
            "\t",
            "count",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " s",
            " :",
            " \n\t",
            "\t",
            "if",
            " i",
            " ==",
            " c",
            " :",
            " \n\t\t",
            "\t",
            "count",
            " +=",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " count",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 205,
        "prompt": "Write a python function to find the inversions of tuple elements in the given tuple list.\n\ndef inversion_elements(test_tup):\n",
        "answer": "def inversion_elements(test_tup):\n\treturn sorted(test_tup)\n\n",
        "test_list": [
            "assert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)",
            "assert inversion_elements((2, 4, 5, 6, 1, 7)) == (-3, -5, -6, -7, -2, -8)",
            "assert inversion_elements((8, 9, 11, 14, 12, 13)) == (-9, -10, -12, -15, -13, -14)"
        ],
        "answer_list": [
            "\t",
            "return",
            " sorted",
            "(",
            "test",
            "_",
            "tup",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 206,
        "prompt": "Write a python function to perform the adjacent element concatenation in the given tuples.\n\ndef concatenate_elements(test_tup):\n",
        "answer": "def concatenate_elements(test_tup):\n\treturn ''.join(test_tup)\n\n",
        "test_list": [
            "assert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')",
            "assert concatenate_elements((\"RES \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"QESR\")) == ('RES IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL QESR')",
            "assert concatenate_elements((\"MSAM\", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"SKD\")) == ('MSAMIS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL SKD')"
        ],
        "answer_list": [
            "\t",
            "return",
            " ''.",
            "join",
            "(",
            "test",
            "_",
            "tup",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 207,
        "prompt": "Write a python function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\n\ndef find_longest_repeating_subseq(str): \n",
        "answer": "def find_longest_repeating_subseq(str): \n\tn = len(str) \n\tdp = [[0 for x in range(n + 1)] for y in range(n + 1)] \n\tfor i in range(1, n + 1): \n\t\tfor j in range(1, n + 1): \n\t\t\tif (str[i - 1] == str[j - 1] and i!= j): \n\t\t\t\tdp[i][j] = 1 + dp[i - 1][j - 1] \n\t\t\telse: \n\t\t\t\tdp[i][j] = max(dp[i][j - 1], dp[i - 1][j]) \n\treturn dp[n][n] \n\n",
        "test_list": [
            "assert find_longest_repeating_subseq(\"AABEBCDD\") == 3",
            "assert find_longest_repeating_subseq(\"aabb\") == 2",
            "assert find_longest_repeating_subseq(\"aab\") == 1"
        ],
        "answer_list": [
            "\t",
            "n",
            " =",
            " len",
            "(",
            "str",
            ")",
            " \n",
            "\t",
            "dp",
            " =",
            " [[",
            "0",
            " for",
            " x",
            " in",
            " range",
            "(",
            "n",
            " +",
            " ",
            "1",
            ")]",
            " for",
            " y",
            " in",
            " range",
            "(",
            "n",
            " +",
            " ",
            "1",
            ")]",
            " \n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "1",
            ",",
            " n",
            " +",
            " ",
            "1",
            "):",
            " \n\t",
            "\t",
            "for",
            " j",
            " in",
            " range",
            "(",
            "1",
            ",",
            " n",
            " +",
            " ",
            "1",
            "):",
            " \n\t\t",
            "\t",
            "if",
            " (",
            "str",
            "[",
            "i",
            " -",
            " ",
            "1",
            "]",
            " ==",
            " str",
            "[",
            "j",
            " -",
            " ",
            "1",
            "]",
            " and",
            " i",
            "!=",
            " j",
            "):",
            " \n\t\t\t",
            "\t",
            "dp",
            "[",
            "i",
            "][",
            "j",
            "]",
            " =",
            " ",
            "1",
            " +",
            " dp",
            "[",
            "i",
            " -",
            " ",
            "1",
            "][",
            "j",
            " -",
            " ",
            "1",
            "]",
            " \n\t\t",
            "\t",
            "else",
            ":",
            " \n\t\t\t",
            "\t",
            "dp",
            "[",
            "i",
            "][",
            "j",
            "]",
            " =",
            " max",
            "(",
            "dp",
            "[",
            "i",
            "][",
            "j",
            " -",
            " ",
            "1",
            "],",
            " dp",
            "[",
            "i",
            " -",
            " ",
            "1",
            "][",
            "j",
            "])",
            " \n",
            "\t",
            "return",
            " dp",
            "[",
            "n",
            "][",
            "n",
            "]",
            " \n",
            "\n",
            "str"
        ]
    },
    {
        "task_id": 208,
        "prompt": "Write a python function to check the given decimal with a precision of 2 by using regex.\n\ndef is_decimal(num):\n",
        "answer": "def is_decimal(num):\n\treturn re.match(r'^[+-]?([0-9]*[.])?[0-9]+$', num)\n\n",
        "test_list": [
            "assert is_decimal('123.11') == True",
            "assert is_decimal('0.21') == True",
            "assert is_decimal('123.1214') == False"
        ],
        "answer_list": [
            "\t",
            "return",
            " re",
            ".",
            "match",
            "(",
            "r",
            "'^",
            "[",
            "+-",
            "]?",
            "([",
            "0",
            "-",
            "9",
            "]*",
            "[",
            ".",
            "])",
            "?[",
            "0",
            "-",
            "9",
            "]+",
            "$',",
            " num",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 209,
        "prompt": "Write a python function to delete the smallest element from the given heap and then insert a new item.\n\ndef heap_replace(heap,a):\n",
        "answer": "def heap_replace(heap,a):\n\theap.append(a)\n\theapq._siftup(heap,0,len(heap)-1)\n\theapq._heappop(heap)\n\treturn heap\n\n",
        "test_list": [
            "assert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]",
            "assert heap_replace([25, 44, 68, 21, 39, 23, 89],110)== [23, 25, 68, 44, 39, 110, 89]",
            "assert heap_replace([25, 44, 68, 21, 39, 23, 89],500)==[23, 25, 68, 44, 39, 500, 89]"
        ],
        "answer_list": [
            "\t",
            "heap",
            ".",
            "append",
            "(",
            "a",
            ")",
            "\n",
            "\t",
            "heap",
            "q",
            "._",
            "s",
            "ift",
            "up",
            "(",
            "heap",
            ",",
            "0",
            ",",
            "len",
            "(",
            "heap",
            ")-",
            "1",
            ")",
            "\n",
            "\t",
            "heap",
            "q",
            "._",
            "he",
            "app",
            "op",
            "(",
            "heap",
            ")",
            "\n",
            "\t",
            "return",
            " heap",
            "\n",
            "\n",
            "heap"
        ]
    },
    {
        "task_id": 210,
        "prompt": "Write a python function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\n\ndef is_allowed_specific_char(string):\n",
        "answer": "def is_allowed_specific_char(string):\n\treturn re.match(\"^[a-z0-9]+$\", string)\n\n",
        "test_list": [
            "assert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True",
            "assert is_allowed_specific_char(\"*&%@#!}{\") == False",
            "assert is_allowed_specific_char(\"HELLOhowareyou98765\") == True"
        ],
        "answer_list": [
            "\t",
            "return",
            " re",
            ".",
            "match",
            "(\"^",
            "[",
            "a",
            "-",
            "z",
            "0",
            "-",
            "9",
            "]+",
            "$\",",
            " string",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 211,
        "prompt": "Write a python function to count numbers whose oth and nth bits are set.\n\ndef count_Num(n): \n",
        "answer": "def count_Num(n): \n\tcount = 0\n\tfor i in range(n+1): \n\t\tif (i & (i << 1)) and (i & (i << 2)): \n\t\t\tcount += 1\n\treturn count \n\n",
        "test_list": [
            "assert count_Num(2) == 1",
            "assert count_Num(3) == 2",
            "assert count_Num(1) == 1"
        ],
        "answer_list": [
            "\t",
            "count",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "n",
            "+",
            "1",
            "):",
            " \n\t",
            "\t",
            "if",
            " (",
            "i",
            " &",
            " (",
            "i",
            " <<",
            " ",
            "1",
            "))",
            " and",
            " (",
            "i",
            " &",
            " (",
            "i",
            " <<",
            " ",
            "2",
            ")):",
            " \n\t\t",
            "\t",
            "count",
            " +=",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " count",
            " \n",
            "\n",
            "n"
        ]
    },
    {
        "task_id": 212,
        "prompt": "Write a python function to find the sum of fourth power of n natural numbers.\n\ndef fourth_Power_Sum(n): \n",
        "answer": "def fourth_Power_Sum(n): \n\tsum = 0\n\tfor i in range(1, n+1): \n\t\tsum = sum + (i**4) \n\treturn sum \n\n",
        "test_list": [
            "assert fourth_Power_Sum(2) == 17",
            "assert fourth_Power_Sum(4) == 354",
            "assert fourth_Power_Sum(6) == 2275"
        ],
        "answer_list": [
            "\t",
            "sum",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "1",
            ",",
            " n",
            "+",
            "1",
            "):",
            " \n\t",
            "\t",
            "sum",
            " =",
            " sum",
            " +",
            " (",
            "i",
            "**",
            "4",
            ")",
            " \n",
            "\t",
            "return",
            " sum",
            " \n",
            "\n",
            "n"
        ]
    },
    {
        "task_id": 213,
        "prompt": "Write a python function to perform the concatenation of two string tuples.\n\ndef concatenate_strings(test_tup1, test_tup2):\n",
        "answer": "def concatenate_strings(test_tup1, test_tup2):\n\treturn test_tup1 + test_tup2\n\n",
        "test_list": [
            "assert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')",
            "assert concatenate_strings((\"Shaik\", \"Ayesha\", \"Sanya\"), (\" Dawood\", \" Begum\", \" Singh\")) == ('Shaik Dawood', 'Ayesha Begum', 'Sanya Singh')",
            "assert concatenate_strings((\"Harpreet\", \"Priyanka\", \"Muskan\"), (\"Kour\", \" Agarwal\", \"Sethi\")) == ('HarpreetKour', 'Priyanka Agarwal', 'MuskanSethi')"
        ],
        "answer_list": [
            "\t",
            "return",
            " test",
            "_",
            "tup",
            "1",
            " +",
            " test",
            "_",
            "tup",
            "2",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 214,
        "prompt": "Write a python function to convert radians to degrees.\n\ndef degree_radian(radian):\n",
        "answer": "def degree_radian(radian):\n\treturn radian * 180 / math.pi\n\n",
        "test_list": [
            "assert degree_radian(90)==5156.620156177409",
            "assert degree_radian(60)==3437.746770784939",
            "assert degree_radian(120)==6875.493541569878"
        ],
        "answer_list": [
            "\t",
            "return",
            " rad",
            "ian",
            " *",
            " ",
            "1",
            "8",
            "0",
            " /",
            " math",
            ".",
            "pi",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 215,
        "prompt": "Write a python function to decode a run-length encoded given list.\n\ndef decode_list(alist):\n",
        "answer": "def decode_list(alist):\n\tnew_list = []\n\tfor i in alist:\n\t\tif type(i) == int:\n\t\t\tnew_list.extend([i]*i)\n\t\telse:\n\t\t\tnew_list.append(i)\n\treturn new_list\n\n",
        "test_list": [
            "assert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]",
            "assert decode_list(['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y'])==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', 'l', 'l', 'y']",
            "assert decode_list(['p', 'y', 't', 'h', 'o', 'n'])==['p', 'y', 't', 'h', 'o', 'n']"
        ],
        "answer_list": [
            "\t",
            "new",
            "_",
            "list",
            " =",
            " []",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " al",
            "ist",
            ":",
            "\n\t",
            "\t",
            "if",
            " type",
            "(",
            "i",
            ")",
            " ==",
            " int",
            ":",
            "\n\t\t",
            "\t",
            "new",
            "_",
            "list",
            ".",
            "extend",
            "([",
            "i",
            "]*",
            "i",
            ")",
            "\n\t",
            "\t",
            "else",
            ":",
            "\n\t\t",
            "\t",
            "new",
            "_",
            "list",
            ".",
            "append",
            "(",
            "i",
            ")",
            "\n",
            "\t",
            "return",
            " new",
            "_",
            "list",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 216,
        "prompt": "Write a python function to check if a nested list is a subset of another nested list.\n\ndef check_subset_list(list1, list2): \n",
        "answer": "def check_subset_list(list1, list2): \n\tif list1 == list2: \n\t\treturn True\n\tif len(list1) > len(list2): \n\t\treturn False\n\tfor i in range(len(list2)): \n\t\tif list1[0] == list2[i]: \n\t\t\treturn check_subset_list(list1[1:], list2[i:]) \n\treturn False\n\n",
        "test_list": [
            "assert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False",
            "assert check_subset_list([[2, 3, 1], [4, 5], [6, 8]],[[4, 5], [6, 8]])==True",
            "assert check_subset_list([['a', 'b'], ['e'], ['c', 'd']],[['g']])==False"
        ],
        "answer_list": [
            "\t",
            "if",
            " list",
            "1",
            " ==",
            " list",
            "2",
            ":",
            " \n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " len",
            "(",
            "list",
            "1",
            ")",
            " >",
            " len",
            "(",
            "list",
            "2",
            "):",
            " \n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "len",
            "(",
            "list",
            "2",
            ")):",
            " \n\t",
            "\t",
            "if",
            " list",
            "1",
            "[",
            "0",
            "]",
            " ==",
            " list",
            "2",
            "[",
            "i",
            "]:",
            " \n\t\t",
            "\t",
            "return",
            " check",
            "_",
            "subset",
            "_",
            "list",
            "(",
            "list",
            "1",
            "[",
            "1",
            ":],",
            " list",
            "2",
            "[",
            "i",
            ":])",
            " \n",
            "\t",
            "return",
            " False",
            "\n",
            "\n",
            "#"
        ]
    },
    {
        "task_id": 217,
        "prompt": "Write a python function to find the first repeated character in a given string.\n\ndef first_Repeated_Char(str): \n",
        "answer": "def first_Repeated_Char(str): \n\tfor i in range(len(str)): \n\t\tfor j in range(i + 1, len(str)): \n\t\t\tif str[i] == str[j]: \n\t\t\t\treturn str[i] \n\treturn -1\n\n",
        "test_list": [
            "assert first_Repeated_Char(\"Google\") == \"o\"",
            "assert first_Repeated_Char(\"data\") == \"a\"",
            "assert first_Repeated_Char(\"python\") == '\\0'"
        ],
        "answer_list": [
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "len",
            "(",
            "str",
            ")):",
            " \n\t",
            "\t",
            "for",
            " j",
            " in",
            " range",
            "(",
            "i",
            " +",
            " ",
            "1",
            ",",
            " len",
            "(",
            "str",
            ")):",
            " \n\t\t",
            "\t",
            "if",
            " str",
            "[",
            "i",
            "]",
            " ==",
            " str",
            "[",
            "j",
            "]:",
            " \n\t\t\t",
            "\t",
            "return",
            " str",
            "[",
            "i",
            "]",
            " \n",
            "\t",
            "return",
            " -",
            "1",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 218,
        "prompt": "Write a python function to find the minimum operations required to make two numbers equal.\n\ndef min_Operations(A,B):  \n",
        "answer": "def min_Operations(A,B):  \n\t#code here\n\tif A==B:\n\t\treturn 0\n\tif A>B:\n\t\treturn min_Operations(B,A)\n\tif A%2==0:\n\t\treturn min_Operations(A//2,B)\n\telse:\n\t\treturn min_Operations(A//2,B)+1\n\n",
        "test_list": [
            "assert min_Operations(2,4) == 1",
            "assert min_Operations(4,10) == 4",
            "assert min_Operations(1,4) == 3"
        ],
        "answer_list": [
            "\t",
            "#",
            "code",
            " here",
            "\n",
            "\t",
            "if",
            " A",
            "==",
            "B",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "0",
            "\n",
            "\t",
            "if",
            " A",
            ">",
            "B",
            ":",
            "\n\t",
            "\t",
            "return",
            " min",
            "_",
            "Operations",
            "(",
            "B",
            ",",
            "A",
            ")",
            "\n",
            "\t",
            "if",
            " A",
            "%",
            "2",
            "==",
            "0",
            ":",
            "\n\t",
            "\t",
            "return",
            " min",
            "_",
            "Operations",
            "(",
            "A",
            "//",
            "2",
            ",",
            "B",
            ")",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "return",
            " min",
            "_",
            "Operations",
            "(",
            "A",
            "//",
            "2",
            ",",
            "B",
            ")+",
            "1",
            "\n",
            "\n",
            "#{"
        ]
    },
    {
        "task_id": 219,
        "prompt": "Write a python function to extract maximum and minimum k elements in the given tuple.\n\ndef extract_min_max(test_tup, K):\n",
        "answer": "def extract_min_max(test_tup, K):\n\treturn (test_tup[0:K], test_tup[-K:])\n\n",
        "test_list": [
            "assert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)",
            "assert extract_min_max((4, 5, 6, 1, 2, 7), 3) == (1, 2, 4, 5, 6, 7)",
            "assert extract_min_max((2, 3, 4, 8, 9, 11, 7), 4) == (2, 3, 4, 7, 8, 9, 11)"
        ],
        "answer_list": [
            "\t",
            "return",
            " (",
            "test",
            "_",
            "tup",
            "[",
            "0",
            ":",
            "K",
            "],",
            " test",
            "_",
            "tup",
            "[-",
            "K",
            ":])",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 220,
        "prompt": "Write a python function to replace maximum n occurrences of spaces, commas, or dots with a colon.\n\ndef replace_max_specialchar(text,n):\n",
        "answer": "def replace_max_specialchar(text,n):\n\t# Your code here\n\treturn text\n\n",
        "test_list": [
            "assert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')",
            "assert replace_max_specialchar('a b c,d e f',3)==('a:b:c:d e f')",
            "assert replace_max_specialchar('ram reshma,ram rahim',1)==('ram:reshma,ram rahim')"
        ],
        "answer_list": [
            "\t",
            "#",
            " Your",
            " code",
            " here",
            "\n",
            "\t",
            "return",
            " text",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 221,
        "prompt": "Write a python function to find the first even number in a given list of numbers.\n\ndef first_even(nums):\n",
        "answer": "def first_even(nums):\n\tfor num in nums:\n\t\tif num % 2 == 0:\n\t\t\treturn num\n\treturn None\n\n",
        "test_list": [
            "assert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4",
            "assert first_even([2, 3, 4]) == 2",
            "assert first_even([5, 6, 7]) == 6"
        ],
        "answer_list": [
            "\t",
            "for",
            " num",
            " in",
            " nums",
            ":",
            "\n\t",
            "\t",
            "if",
            " num",
            " %",
            " ",
            "2",
            " ==",
            " ",
            "0",
            ":",
            "\n\t\t",
            "\t",
            "return",
            " num",
            "\n",
            "\t",
            "return",
            " None",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 222,
        "prompt": "Write a python function to check if all the elements in tuple have same data type or not.\n\ndef check_type(test_tuple):\n",
        "answer": "def check_type(test_tuple):\n\treturn all(isinstance(x, type(test_tuple[0])) for x in test_tuple)\n\n",
        "test_list": [
            "assert check_type((5, 6, 7, 3, 5, 6) ) == True",
            "assert check_type((1, 2, \"4\") ) == False",
            "assert check_type((3, 2, 1, 4, 5) ) == True"
        ],
        "answer_list": [
            "\t",
            "return",
            " all",
            "(",
            "isinstance",
            "(",
            "x",
            ",",
            " type",
            "(",
            "test",
            "_",
            "tuple",
            "[",
            "0",
            "]))",
            " for",
            " x",
            " in",
            " test",
            "_",
            "tuple",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 223,
        "prompt": "Write a python function to check for majority element in the given sorted array.\n\ndef binary_search(arr, low, high, x):\n",
        "answer": "def binary_search(arr, low, high, x):\n\tif high >= low:\n\t\tmid = (high + low) // 2\n\t\tif arr[mid] == x:\n\t\t\treturn mid\n\t\telif arr[mid] > x:\n\t\t\treturn binary_search(arr, low, mid - 1, x)\n\t\telse:\n\t\t\treturn binary_search(arr, mid + 1, high, x)\n\telse:\n\t\treturn -1\n\n",
        "test_list": [
            "assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True",
            "assert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False",
            "assert is_majority([1, 1, 1, 2, 2], 5, 1) == True"
        ],
        "answer_list": [
            "\t",
            "if",
            " high",
            " >=",
            " low",
            ":",
            "\n\t",
            "\t",
            "mid",
            " =",
            " (",
            "high",
            " +",
            " low",
            ")",
            " //",
            " ",
            "2",
            "\n\t",
            "\t",
            "if",
            " arr",
            "[",
            "mid",
            "]",
            " ==",
            " x",
            ":",
            "\n\t\t",
            "\t",
            "return",
            " mid",
            "\n\t",
            "\t",
            "elif",
            " arr",
            "[",
            "mid",
            "]",
            " >",
            " x",
            ":",
            "\n\t\t",
            "\t",
            "return",
            " binary",
            "_",
            "search",
            "(",
            "arr",
            ",",
            " low",
            ",",
            " mid",
            " -",
            " ",
            "1",
            ",",
            " x",
            ")",
            "\n\t",
            "\t",
            "else",
            ":",
            "\n\t\t",
            "\t",
            "return",
            " binary",
            "_",
            "search",
            "(",
            "arr",
            ",",
            " mid",
            " +",
            " ",
            "1",
            ",",
            " high",
            ",",
            " x",
            ")",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "return",
            " -",
            "1",
            "\n",
            "\n",
            "def"
        ]
    },
    {
        "task_id": 224,
        "prompt": "Write a python function to count set bits of a given number.\n\ndef count_Set_Bits(n): \n",
        "answer": "def count_Set_Bits(n): \n\tcount = 0\n\twhile (n): \n\t\tcount += n & 1\n\t\tn >>= 1\n\treturn count\n\n",
        "test_list": [
            "assert count_Set_Bits(2) == 1",
            "assert count_Set_Bits(4) == 1",
            "assert count_Set_Bits(6) == 2"
        ],
        "answer_list": [
            "\t",
            "count",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "while",
            " (",
            "n",
            "):",
            " \n\t",
            "\t",
            "count",
            " +=",
            " n",
            " &",
            " ",
            "1",
            "\n\t",
            "\t",
            "n",
            " >>=",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " count",
            "\n",
            "\n",
            "#"
        ]
    },
    {
        "task_id": 225,
        "prompt": "Write a python function to find the minimum element in a sorted and rotated array.\n\ndef find_Min(arr,low,high): \n",
        "answer": "def find_Min(arr,low,high): \n\tif high < low: \n\t\treturn arr[0] \n\tif high == low: \n\t\treturn arr[low] \n\tmid = (high + low)/2\n\tif mid < high and arr[mid+1] < arr[mid]: \n\t\treturn arr[mid+1] \n\tif mid > low and arr[mid] < arr[mid-1]: \n\t\treturn arr[mid] \n\tif arr[high] > arr[mid]: \n\t\treturn find_Min(arr, low, mid-1) \n\treturn find_Min(arr, mid+1, high) \n\n",
        "test_list": [
            "assert find_Min([1,2,3,4,5],0,4) == 1",
            "assert find_Min([4,6,8],0,2) == 4",
            "assert find_Min([2,3,5,7,9],0,4) == 2"
        ],
        "answer_list": [
            "\t",
            "if",
            " high",
            " <",
            " low",
            ":",
            " \n\t",
            "\t",
            "return",
            " arr",
            "[",
            "0",
            "]",
            " \n",
            "\t",
            "if",
            " high",
            " ==",
            " low",
            ":",
            " \n\t",
            "\t",
            "return",
            " arr",
            "[",
            "low",
            "]",
            " \n",
            "\t",
            "mid",
            " =",
            " (",
            "high",
            " +",
            " low",
            ")/",
            "2",
            "\n",
            "\t",
            "if",
            " mid",
            " <",
            " high",
            " and",
            " arr",
            "[",
            "mid",
            "+",
            "1",
            "]",
            " <",
            " arr",
            "[",
            "mid",
            "]:",
            " \n\t",
            "\t",
            "return",
            " arr",
            "[",
            "mid",
            "+",
            "1",
            "]",
            " \n",
            "\t",
            "if",
            " mid",
            " >",
            " low",
            " and",
            " arr",
            "[",
            "mid",
            "]",
            " <",
            " arr",
            "[",
            "mid",
            "-",
            "1",
            "]:",
            " \n\t",
            "\t",
            "return",
            " arr",
            "[",
            "mid",
            "]",
            " \n",
            "\t",
            "if",
            " arr",
            "[",
            "high",
            "]",
            " >",
            " arr",
            "[",
            "mid",
            "]:",
            " \n\t",
            "\t",
            "return",
            " find",
            "_",
            "Min",
            "(",
            "arr",
            ",",
            " low",
            ",",
            " mid",
            "-",
            "1",
            ")",
            " \n",
            "\t",
            "return",
            " find",
            "_",
            "Min",
            "(",
            "arr",
            ",",
            " mid",
            "+",
            "1",
            ",",
            " high",
            ")",
            " \n",
            "\n",
            "arr"
        ]
    },
    {
        "task_id": 226,
        "prompt": "Write a python function to remove the characters which have odd index values of a given string.\n\ndef odd_values_string(str):\n",
        "answer": "def odd_values_string(str):\n\treturn str[1::2]\n\n",
        "test_list": [
            "assert odd_values_string('abcdef') == 'ace'",
            "assert odd_values_string('python') == 'pto'",
            "assert odd_values_string('data') == 'dt'"
        ],
        "answer_list": [
            "\t",
            "return",
            " str",
            "[",
            "1",
            "::",
            "2",
            "]",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 227,
        "prompt": "Write a python function to find minimum of three numbers.\n\ndef min_of_three(a,b,c): \n",
        "answer": "def min_of_three(a,b,c): \n\tif a<b:\n\t\tif a<c:\n\t\t\treturn a\n\t\telse:\n\t\t\treturn c\n\telse:\n\t\tif b<c:\n\t\t\treturn b\n\t\telse:\n\t\t\treturn c\n\n",
        "test_list": [
            "assert min_of_three(10,20,0)==0",
            "assert min_of_three(19,15,18)==15",
            "assert min_of_three(-10,-20,-30)==-30"
        ],
        "answer_list": [
            "\t",
            "if",
            " a",
            "<",
            "b",
            ":",
            "\n\t",
            "\t",
            "if",
            " a",
            "<",
            "c",
            ":",
            "\n\t\t",
            "\t",
            "return",
            " a",
            "\n\t",
            "\t",
            "else",
            ":",
            "\n\t\t",
            "\t",
            "return",
            " c",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "if",
            " b",
            "<",
            "c",
            ":",
            "\n\t\t",
            "\t",
            "return",
            " b",
            "\n\t",
            "\t",
            "else",
            ":",
            "\n\t\t",
            "\t",
            "return",
            " c",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 228,
        "prompt": "Write a python function to check whether all the bits are unset in the given range or not.\n\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n",
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n\tif(l==0):\n\t\treturn 1\n\tif(l==r):\n\t\treturn 0\n\tif(l==1):\n\t\treturn n&(1<<r)\n\tif(l>1):\n\t\treturn n&(1<<r) and all_Bits_Set_In_The_Given_Range(n,l-1,r-1)\n\n",
        "test_list": [
            "assert all_Bits_Set_In_The_Given_Range(4,1,2) == True",
            "assert all_Bits_Set_In_The_Given_Range(17,2,4) == True",
            "assert all_Bits_Set_In_The_Given_Range(39,4,6) == False"
        ],
        "answer_list": [
            "\t",
            "if",
            "(",
            "l",
            "==",
            "0",
            "):",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "\n",
            "\t",
            "if",
            "(",
            "l",
            "==",
            "r",
            "):",
            "\n\t",
            "\t",
            "return",
            " ",
            "0",
            "\n",
            "\t",
            "if",
            "(",
            "l",
            "==",
            "1",
            "):",
            "\n\t",
            "\t",
            "return",
            " n",
            "&(",
            "1",
            "<<",
            "r",
            ")",
            "\n",
            "\t",
            "if",
            "(",
            "l",
            ">",
            "1",
            "):",
            "\n\t",
            "\t",
            "return",
            " n",
            "&(",
            "1",
            "<<",
            "r",
            ")",
            " and",
            " all",
            "_",
            "Bits",
            "_",
            "Set",
            "_",
            "In",
            "_",
            "The",
            "_",
            "Given",
            "_",
            "Range",
            "(",
            "n",
            ",",
            "l",
            "-",
            "1",
            ",",
            "r",
            "-",
            "1",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 229,
        "prompt": "Write a python function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\n\ndef re_arrange_array(arr, n):\n",
        "answer": "def re_arrange_array(arr, n):\n\tfor i in range(n):\n\t\tif arr[i] < 0:\n\t\t\tarr.insert(0, arr.pop(i))\n\treturn arr\n\n",
        "test_list": [
            "assert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]",
            "assert re_arrange_array([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]",
            "assert re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]"
        ],
        "answer_list": [
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "n",
            "):",
            "\n\t",
            "\t",
            "if",
            " arr",
            "[",
            "i",
            "]",
            " <",
            " ",
            "0",
            ":",
            "\n\t\t",
            "\t",
            "arr",
            ".",
            "insert",
            "(",
            "0",
            ",",
            " arr",
            ".",
            "pop",
            "(",
            "i",
            "))",
            "\n",
            "\t",
            "return",
            " arr",
            "\n",
            "\n",
            "arr"
        ]
    },
    {
        "task_id": 230,
        "prompt": "Write a python function to replace blank spaces with any character in a string.\n\ndef replace_blank(str1,char):\n",
        "answer": "def replace_blank(str1,char):\n\tstr1 = str1.split()\n\tstr1 = char.join(str1)\n\treturn str1\n\n",
        "test_list": [
            "assert replace_blank(\"hello people\",'@')==(\"hello@people\")",
            "assert replace_blank(\"python program language\",'$')==(\"python$program$language\")",
            "assert replace_blank(\"blank space\",\"-\")==(\"blank-space\")"
        ],
        "answer_list": [
            "\t",
            "str",
            "1",
            " =",
            " str",
            "1",
            ".",
            "split",
            "()",
            "\n",
            "\t",
            "str",
            "1",
            " =",
            " char",
            ".",
            "join",
            "(",
            "str",
            "1",
            ")",
            "\n",
            "\t",
            "return",
            " str",
            "1",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 231,
        "prompt": "Write a python function to find the maximum sum in the given right triangle of numbers.\n\ndef max_sum(tri, n): \n",
        "answer": "def max_sum(tri, n): \n\tfor i in range(n): \n\t\tfor j in range(i + 1, n): \n\t\t\ttri[i][j] += max(tri[i][j - 1], tri[i - 1][j]) \n\treturn tri[n - 1][n - 1] \n\n",
        "test_list": [
            "assert max_sum([[1], [2,1], [3,3,2]], 3) == 6",
            "assert max_sum([[1], [1, 2], [4, 1, 12]], 3) == 15 ",
            "assert max_sum([[2], [3,2], [13,23,12]], 3) == 28"
        ],
        "answer_list": [
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "n",
            "):",
            " \n\t",
            "\t",
            "for",
            " j",
            " in",
            " range",
            "(",
            "i",
            " +",
            " ",
            "1",
            ",",
            " n",
            "):",
            " \n\t\t",
            "\t",
            "tri",
            "[",
            "i",
            "][",
            "j",
            "]",
            " +=",
            " max",
            "(",
            "tri",
            "[",
            "i",
            "][",
            "j",
            " -",
            " ",
            "1",
            "],",
            " tri",
            "[",
            "i",
            " -",
            " ",
            "1",
            "][",
            "j",
            "])",
            " \n",
            "\t",
            "return",
            " tri",
            "[",
            "n",
            " -",
            " ",
            "1",
            "][",
            "n",
            " -",
            " ",
            "1",
            "]",
            " \n",
            "\n",
            "n"
        ]
    },
    {
        "task_id": 232,
        "prompt": "Write a python function to get the n largest items from a dataset.\n\ndef larg_nnum(list1,n):\n",
        "answer": "def larg_nnum(list1,n):\n\tlist1.sort()\n\tlist1.reverse()\n\treturn list1[:n]\n\n",
        "test_list": [
            "assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]",
            "assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)==[100,90,80,70,60]",
            "assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)==[100,90,80]"
        ],
        "answer_list": [
            "\t",
            "list",
            "1",
            ".",
            "sort",
            "()",
            "\n",
            "\t",
            "list",
            "1",
            ".",
            "reverse",
            "()",
            "\n",
            "\t",
            "return",
            " list",
            "1",
            "[:",
            "n",
            "]",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 233,
        "prompt": "Write a python function to find the lateral surface area of a cylinder.\n\ndef lateralsuface_cylinder(r,h):\n",
        "answer": "def lateralsuface_cylinder(r,h):\n\treturn 2*math.pi*r*h+2*math.pi*r**2\n\n",
        "test_list": [
            "assert lateralsuface_cylinder(10,5)==314.15000000000003",
            "assert lateralsuface_cylinder(4,5)==125.66000000000001",
            "assert lateralsuface_cylinder(4,10)==251.32000000000002"
        ],
        "answer_list": [
            "\t",
            "return",
            " ",
            "2",
            "*",
            "math",
            ".",
            "pi",
            "*",
            "r",
            "*",
            "h",
            "+",
            "2",
            "*",
            "math",
            ".",
            "pi",
            "*",
            "r",
            "**",
            "2",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 234,
        "prompt": "Write a python function to find the volume of a cube.\n\ndef volume_cube(l):\n",
        "answer": "def volume_cube(l):\n\treturn l**3\n\n",
        "test_list": [
            "assert volume_cube(3)==27",
            "assert volume_cube(2)==8",
            "assert volume_cube(5)==125"
        ],
        "answer_list": [
            "\t",
            "return",
            " l",
            "**",
            "3",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 235,
        "prompt": "Write a python function to set all even bits of a given number.\n\ndef even_bit_set_number(n): \n",
        "answer": "def even_bit_set_number(n): \n\treturn n | 0xAAAAAAAA\n\n",
        "test_list": [
            "assert even_bit_set_number(10) == 10",
            "assert even_bit_set_number(20) == 30",
            "assert even_bit_set_number(30) == 30"
        ],
        "answer_list": [
            "\t",
            "return",
            " n",
            " |",
            " ",
            "0",
            "x",
            "AAAAAAAA",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 236,
        "prompt": "Write a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\n\ndef No_of_Triangle(N,K):\n",
        "answer": "def No_of_Triangle(N,K):\n\tif N==1:\n\t\treturn 1\n\tif N==2:\n\t\treturn 1\n\tif N==3:\n\t\treturn 1\n\tif N==4:\n\t\treturn 2\n\tif N==5:\n\t\treturn 3\n\tif N==6:\n\t\treturn 4\n\tif N==7:\n\t\treturn 5\n\tif N==8:\n\t\treturn 7\n\tif N==9:\n\t\treturn 9\n\tif N==10:\n\t\treturn 12\n\tif N==11:\n\t\treturn 15\n\tif N==12:\n\t\treturn 19\n\tif N==13:\n\t\treturn 24\n\tif N==14:\n\t\treturn 30\n\tif N==15:\n\t\treturn 37\n\tif N==16:\n\t\treturn 45\n\tif N==17:\n\t\treturn 54\n\tif N==18:\n\t\treturn 64\n\tif N==19:\n\t\treturn 75\n\tif N==20:\n\t\treturn 87\n\tif N==21:\n\t\treturn 100\n\tif N==22:\n\t\treturn 114\n\tif N==23:\n\t\treturn 129\n\tif N==24:\n\t\treturn 145\n\tif N==25:\n\t\treturn 162\n\tif N==26:\n\t\treturn 180\n\tif N==27:\n\t\treturn 199\n\tif N==28:\n\t\treturn 219\n\tif N==29:\n\t\treturn 240\n\tif N==30:\n\t\treturn 262\n\tif N==31:\n\t\treturn 285\n\tif N==32:\n\t\treturn 309\n\tif N==33:\n\t\treturn 334\n\tif N==34:\n\t\treturn 360\n\tif N==35:\n\t\treturn 387\n\tif N==36:\n\t\treturn 415\n\tif N==37:\n\t\treturn 444\n\tif N==38:\n\t\treturn 474\n\tif N==39:\n\t\treturn 505\n\tif N==40:\n\t\treturn 537\n\tif N==41:\n\t\treturn 570\n\tif N==42:\n\t\treturn 604\n\tif N==43:\n\t\treturn 639\n\tif N==44:\n\t\treturn 675\n\tif N==45:\n\t\treturn 712\n\tif N==46:\n\t\treturn 750\n\tif N==47:\n\t\treturn 789\n\tif N==48:\n\t\treturn 829\n\tif N==49:\n\t\treturn 870\n\tif N==50:\n\t\treturn 912\n\tif N==51:\n\t\treturn 955\n\tif N==52:\n\t\treturn 999\n\tif N==53:\n\t\treturn 1044\n\tif N==54:\n\t\treturn 1090\n\tif N==55:\n\t\treturn 1137\n\tif N==56:\n\t\treturn 1185\n\tif N==57:\n\t\treturn 1234\n\tif N==58:\n\t\treturn 1284\n\tif N==59:\n\t\treturn 1335\n\tif N==60:\n\t\treturn 1387\n\tif N==61:\n\t\treturn 1440\n\tif N==62:\n\t\treturn 1494\n\tif N==63:\n\t\treturn 1549\n\tif N==64:\n\t\treturn 1605\n\tif N==65:\n\t\treturn 1662\n\tif N==66:\n\t\treturn 1720\n\tif N==67:\n\t\treturn 1779\n\tif N==68:\n\t\treturn 1839\n\tif N==69:\n\t\treturn 1900\n\tif N==70:\n\t\treturn",
        "test_list": [
            "assert No_of_Triangle(4,2) == 7",
            "assert No_of_Triangle(4,3) == 3",
            "assert No_of_Triangle(1,3) == -1"
        ],
        "answer_list": [
            "\t",
            "if",
            " N",
            "==",
            "1",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "\n",
            "\t",
            "if",
            " N",
            "==",
            "2",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "\n",
            "\t",
            "if",
            " N",
            "==",
            "3",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "\n",
            "\t",
            "if",
            " N",
            "==",
            "4",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "2",
            "\n",
            "\t",
            "if",
            " N",
            "==",
            "5",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "3",
            "\n",
            "\t",
            "if",
            " N",
            "==",
            "6",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "4",
            "\n",
            "\t",
            "if",
            " N",
            "==",
            "7",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "5",
            "\n",
            "\t",
            "if",
            " N",
            "==",
            "8",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "7",
            "\n",
            "\t",
            "if",
            " N",
            "==",
            "9",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "9",
            "\n",
            "\t",
            "if",
            " N",
            "==",
            "1",
            "0",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "2",
            "\n",
            "\t",
            "if",
            " N",
            "==",
            "1",
            "1",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "5",
            "\n",
            "\t",
            "if",
            " N",
            "==",
            "1",
            "2",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "9",
            "\n",
            "\t",
            "if",
            " N",
            "==",
            "1",
            "3",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "2",
            "4",
            "\n",
            "\t",
            "if",
            " N",
            "==",
            "1",
            "4",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "3",
            "0",
            "\n",
            "\t",
            "if",
            " N",
            "==",
            "1",
            "5",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "3",
            "7",
            "\n",
            "\t",
            "if",
            " N",
            "==",
            "1",
            "6",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "4",
            "5",
            "\n",
            "\t",
            "if",
            " N",
            "==",
            "1",
            "7",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "5",
            "4",
            "\n",
            "\t",
            "if",
            " N",
            "==",
            "1",
            "8",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "6",
            "4",
            "\n",
            "\t",
            "if",
            " N",
            "==",
            "1",
            "9",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "7",
            "5",
            "\n",
            "\t",
            "if",
            " N",
            "==",
            "2",
            "0",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "8",
            "7",
            "\n",
            "\t",
            "if",
            " N",
            "==",
            "2",
            "1",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "0",
            "0",
            "\n",
            "\t",
            "if",
            " N",
            "==",
            "2",
            "2",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "1",
            "4",
            "\n",
            "\t",
            "if",
            " N",
            "==",
            "2",
            "3",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "2",
            "9",
            "\n",
            "\t",
            "if",
            " N",
            "==",
            "2",
            "4",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "4",
            "5",
            "\n",
            "\t",
            "if",
            " N",
            "==",
            "2",
            "5",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "6",
            "2",
            "\n",
            "\t",
            "if",
            " N",
            "==",
            "2",
            "6",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "8",
            "0",
            "\n",
            "\t",
            "if",
            " N",
            "==",
            "2",
            "7",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "9",
            "9",
            "\n",
            "\t",
            "if",
            " N",
            "==",
            "2",
            "8",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "2",
            "1",
            "9",
            "\n",
            "\t",
            "if",
            " N",
            "==",
            "2",
            "9",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "2",
            "4",
            "0",
            "\n",
            "\t",
            "if",
            " N",
            "==",
            "3",
            "0",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "2",
            "6",
            "2",
            "\n",
            "\t",
            "if",
            " N",
            "==",
            "3",
            "1",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "2",
            "8",
            "5",
            "\n",
            "\t",
            "if",
            " N",
            "==",
            "3",
            "2",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "3",
            "0",
            "9",
            "\n",
            "\t",
            "if",
            " N",
            "==",
            "3",
            "3",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "3",
            "3",
            "4",
            "\n",
            "\t",
            "if",
            " N",
            "==",
            "3",
            "4",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "3",
            "6",
            "0",
            "\n",
            "\t",
            "if",
            " N",
            "==",
            "3",
            "5",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "3",
            "8",
            "7",
            "\n",
            "\t",
            "if",
            " N",
            "==",
            "3",
            "6",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "4",
            "1",
            "5",
            "\n",
            "\t",
            "if",
            " N",
            "==",
            "3",
            "7",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "4",
            "4",
            "4",
            "\n",
            "\t",
            "if",
            " N",
            "==",
            "3",
            "8",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "4",
            "7",
            "4",
            "\n",
            "\t",
            "if",
            " N",
            "==",
            "3",
            "9",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "5",
            "0",
            "5",
            "\n",
            "\t",
            "if",
            " N",
            "==",
            "4",
            "0",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "5",
            "3",
            "7",
            "\n",
            "\t",
            "if",
            " N",
            "==",
            "4",
            "1",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "5",
            "7",
            "0",
            "\n",
            "\t",
            "if",
            " N",
            "==",
            "4",
            "2",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "6",
            "0",
            "4",
            "\n",
            "\t",
            "if",
            " N",
            "==",
            "4",
            "3",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "6",
            "3",
            "9",
            "\n",
            "\t",
            "if",
            " N",
            "==",
            "4",
            "4",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "6",
            "7",
            "5",
            "\n",
            "\t",
            "if",
            " N",
            "==",
            "4",
            "5",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "7",
            "1",
            "2",
            "\n",
            "\t",
            "if",
            " N",
            "==",
            "4",
            "6",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "7",
            "5",
            "0",
            "\n",
            "\t",
            "if",
            " N",
            "==",
            "4",
            "7",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "7",
            "8",
            "9",
            "\n",
            "\t",
            "if",
            " N",
            "==",
            "4",
            "8",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "8",
            "2",
            "9",
            "\n",
            "\t",
            "if",
            " N",
            "==",
            "4",
            "9",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "8",
            "7",
            "0",
            "\n",
            "\t",
            "if",
            " N",
            "==",
            "5",
            "0",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "9",
            "1",
            "2",
            "\n",
            "\t",
            "if",
            " N",
            "==",
            "5",
            "1",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "9",
            "5",
            "5",
            "\n",
            "\t",
            "if",
            " N",
            "==",
            "5",
            "2",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "9",
            "9",
            "9",
            "\n",
            "\t",
            "if",
            " N",
            "==",
            "5",
            "3",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "0",
            "4",
            "4",
            "\n",
            "\t",
            "if",
            " N",
            "==",
            "5",
            "4",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "0",
            "9",
            "0",
            "\n",
            "\t",
            "if",
            " N",
            "==",
            "5",
            "5",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "1",
            "3",
            "7",
            "\n",
            "\t",
            "if",
            " N",
            "==",
            "5",
            "6",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "1",
            "8",
            "5",
            "\n",
            "\t",
            "if",
            " N",
            "==",
            "5",
            "7",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "2",
            "3",
            "4",
            "\n",
            "\t",
            "if",
            " N",
            "==",
            "5",
            "8",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "2",
            "8",
            "4",
            "\n",
            "\t",
            "if",
            " N",
            "==",
            "5",
            "9",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "3",
            "3",
            "5",
            "\n",
            "\t",
            "if",
            " N",
            "==",
            "6",
            "0",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "3",
            "8",
            "7",
            "\n",
            "\t",
            "if",
            " N",
            "==",
            "6",
            "1",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "4",
            "4",
            "0",
            "\n",
            "\t",
            "if",
            " N",
            "==",
            "6",
            "2",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "4",
            "9",
            "4",
            "\n",
            "\t",
            "if",
            " N",
            "==",
            "6",
            "3",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "5",
            "4",
            "9",
            "\n",
            "\t",
            "if",
            " N",
            "==",
            "6",
            "4",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "6",
            "0",
            "5",
            "\n",
            "\t",
            "if",
            " N",
            "==",
            "6",
            "5",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "6",
            "6",
            "2",
            "\n",
            "\t",
            "if",
            " N",
            "==",
            "6",
            "6",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "7",
            "2",
            "0",
            "\n",
            "\t",
            "if",
            " N",
            "==",
            "6",
            "7",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "7",
            "7",
            "9",
            "\n",
            "\t",
            "if",
            " N",
            "==",
            "6",
            "8",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "8",
            "3",
            "9",
            "\n",
            "\t",
            "if",
            " N",
            "==",
            "6",
            "9",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "9",
            "0",
            "0",
            "\n",
            "\t",
            "if",
            " N",
            "==",
            "7",
            "0",
            ":",
            "\n\t",
            "\t",
            "return"
        ]
    },
    {
        "task_id": 237,
        "prompt": "Write a python function to check the occurrences of records which occur similar times in the given tuples.\n\ndef check_occurences(test_list):\n",
        "answer": "def check_occurences(test_list):\n\t# your code goes here\n\treturn 0\n\n",
        "test_list": [
            "assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}",
            "assert check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}",
            "assert check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}"
        ],
        "answer_list": [
            "\t",
            "#",
            " your",
            " code",
            " goes",
            " here",
            "\n",
            "\t",
            "return",
            " ",
            "0",
            "\n",
            "\n",
            "#"
        ]
    },
    {
        "task_id": 238,
        "prompt": "Write a python function to count number of non-empty substrings of a given string.\n\ndef number_of_substrings(str): \n",
        "answer": "def number_of_substrings(str): \n\tcount = 0\n\tfor i in range(len(str)): \n\t\tfor j in range(i, len(str)): \n\t\t\tif (str[i:j+1]!= \"\"): \n\t\t\t\tcount += 1\n\treturn count\n\n",
        "test_list": [
            "assert number_of_substrings(\"abc\") == 6",
            "assert number_of_substrings(\"abcd\") == 10",
            "assert number_of_substrings(\"abcde\") == 15"
        ],
        "answer_list": [
            "\t",
            "count",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "len",
            "(",
            "str",
            ")):",
            " \n\t",
            "\t",
            "for",
            " j",
            " in",
            " range",
            "(",
            "i",
            ",",
            " len",
            "(",
            "str",
            ")):",
            " \n\t\t",
            "\t",
            "if",
            " (",
            "str",
            "[",
            "i",
            ":",
            "j",
            "+",
            "1",
            "]",
            "!=",
            " \"\")",
            ":",
            " \n\t\t\t",
            "\t",
            "count",
            " +=",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " count",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 239,
        "prompt": "Write a python function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\n\ndef get_total_number_of_sequences(m,n): \n",
        "answer": "def get_total_number_of_sequences(m,n): \n\tif n == 1: \n\t\treturn m + 1\n\telse: \n\t\treturn (m + 1) * get_total_number_of_sequences(m, n - 1) \n\n",
        "test_list": [
            "assert get_total_number_of_sequences(10, 4) == 4",
            "assert get_total_number_of_sequences(5, 2) == 6",
            "assert get_total_number_of_sequences(16, 3) == 84"
        ],
        "answer_list": [
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "1",
            ":",
            " \n\t",
            "\t",
            "return",
            " m",
            " +",
            " ",
            "1",
            "\n",
            "\t",
            "else",
            ":",
            " \n\t",
            "\t",
            "return",
            " (",
            "m",
            " +",
            " ",
            "1",
            ")",
            " *",
            " get",
            "_",
            "total",
            "_",
            "number",
            "_",
            "of",
            "_",
            "sequences",
            "(",
            "m",
            ",",
            " n",
            " -",
            " ",
            "1",
            ")",
            " \n",
            "\n",
            "def"
        ]
    },
    {
        "task_id": 240,
        "prompt": "Write a python function to replace the last element of the list with another list.\n\ndef replace_list(list1,list2):\n",
        "answer": "def replace_list(list1,list2):\n\tlist1[-1]=list2\n\treturn list1\n\n",
        "test_list": [
            "assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]",
            "assert replace_list([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]",
            "assert replace_list([\"red\",\"blue\",\"green\"],[\"yellow\"])==[\"red\",\"blue\",\"yellow\"]"
        ],
        "answer_list": [
            "\t",
            "list",
            "1",
            "[-",
            "1",
            "]=",
            "list",
            "2",
            "\n",
            "\t",
            "return",
            " list",
            "1",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 241,
        "prompt": "Write a python function to generate a 3d array having each element as '*'.\n\ndef array_3d(m,n,o):\n",
        "answer": "def array_3d(m,n,o):\n\tarr = []\n\tfor i in range(m):\n\t\tarr.append([])\n\t\tfor j in range(n):\n\t\t\tarr[i].append([])\n\t\t\tfor k in range(o):\n\t\t\t\tarr[i][j].append('*')\n\treturn arr\n\n",
        "test_list": [
            "assert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]",
            "assert array_3d(5,3,4)==[[['*', '*', '*', '*', '*'], ['*', '*', '*', '*','*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'],['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']]]",
            "assert array_3d(1,2,3)==[[['*'],['*']],[['*'],['*']],[['*'],['*']]]"
        ],
        "answer_list": [
            "\t",
            "arr",
            " =",
            " []",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "m",
            "):",
            "\n\t",
            "\t",
            "arr",
            ".",
            "append",
            "([])",
            "\n\t",
            "\t",
            "for",
            " j",
            " in",
            " range",
            "(",
            "n",
            "):",
            "\n\t\t",
            "\t",
            "arr",
            "[",
            "i",
            "].",
            "append",
            "([])",
            "\n\t\t",
            "\t",
            "for",
            " k",
            " in",
            " range",
            "(",
            "o",
            "):",
            "\n\t\t\t",
            "\t",
            "arr",
            "[",
            "i",
            "][",
            "j",
            "].",
            "append",
            "('*",
            "')",
            "\n",
            "\t",
            "return",
            " arr",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 242,
        "prompt": "Write a python function to count total characters in a string.\n\ndef count_charac(str1):\n",
        "answer": "def count_charac(str1):\n\tcount = 0\n\tfor i in str1:\n\t\tcount += 1\n\treturn count\n\n",
        "test_list": [
            "assert count_charac(\"python programming\")==18",
            "assert count_charac(\"language\")==8",
            "assert count_charac(\"words\")==5"
        ],
        "answer_list": [
            "\t",
            "count",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " str",
            "1",
            ":",
            "\n\t",
            "\t",
            "count",
            " +=",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " count",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 243,
        "prompt": "Write a python function to sort the given list based on the occurrence of first element of tuples.\n\ndef sort_on_occurence(lst): \n",
        "answer": "def sort_on_occurence(lst): \n\treturn sorted(lst, key = lambda x: x[0]) \n\n",
        "test_list": [
            "assert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]",
            "assert sort_on_occurence([('b', 'ball'), ('a', 'arm'), ('b', 'b'), ('a', 'ant')]) == [('b', 'ball', 'b', 2), ('a', 'arm', 'ant', 2)]",
            "assert sort_on_occurence([(2, 'Mark'), (3, 'Maze'), (2, 'Sara')]) == [(2, 'Mark', 'Sara', 2), (3, 'Maze', 1)]"
        ],
        "answer_list": [
            "\t",
            "return",
            " sorted",
            "(",
            "lst",
            ",",
            " key",
            " =",
            " lambda",
            " x",
            ":",
            " x",
            "[",
            "0",
            "])",
            " \n",
            "\n",
            "lst"
        ]
    },
    {
        "task_id": 244,
        "prompt": "Write a python function to find the next perfect square greater than a given number.\n\ndef next_Perfect_Square(N): \n",
        "answer": "def next_Perfect_Square(N): \n\t# code here \n\tif N == 1: \n\t\treturn 1\n\ti = 1\n\twhile i * i < N: \n\t\ti += 1\n\treturn i * i \n\n",
        "test_list": [
            "assert next_Perfect_Square(35) == 36",
            "assert next_Perfect_Square(6) == 9",
            "assert next_Perfect_Square(9) == 16"
        ],
        "answer_list": [
            "\t",
            "#",
            " code",
            " here",
            " \n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "1",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "1",
            "\n",
            "\t",
            "i",
            " =",
            " ",
            "1",
            "\n",
            "\t",
            "while",
            " i",
            " *",
            " i",
            " <",
            " N",
            ":",
            " \n\t",
            "\t",
            "i",
            " +=",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " i",
            " *",
            " i",
            " \n",
            "\n",
            "#{"
        ]
    },
    {
        "task_id": 245,
        "prompt": "Write a python function to find the maximum sum of bi-tonic sub-sequence for the given array.\n\ndef max_sum(arr, n): \n",
        "answer": "def max_sum(arr, n): \n\tmax_sum = 0\n\tfor i in range(n): \n\t\tfor j in range(i, n): \n\t\t\tsum = 0\n\t\t\tfor k in range(i, j + 1): \n\t\t\t\tsum += arr[k] \n\t\t\tmax_sum = max(max_sum, sum) \n\treturn max_sum \n\n",
        "test_list": [
            "assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194",
            "assert max_sum([80, 60, 30, 40, 20, 10], 6) == 210",
            "assert max_sum([2, 3 ,14, 16, 21, 23, 29, 30], 8) == 138"
        ],
        "answer_list": [
            "\t",
            "max",
            "_",
            "sum",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "n",
            "):",
            " \n\t",
            "\t",
            "for",
            " j",
            " in",
            " range",
            "(",
            "i",
            ",",
            " n",
            "):",
            " \n\t\t",
            "\t",
            "sum",
            " =",
            " ",
            "0",
            "\n\t\t",
            "\t",
            "for",
            " k",
            " in",
            " range",
            "(",
            "i",
            ",",
            " j",
            " +",
            " ",
            "1",
            "):",
            " \n\t\t\t",
            "\t",
            "sum",
            " +=",
            " arr",
            "[",
            "k",
            "]",
            " \n\t\t",
            "\t",
            "max",
            "_",
            "sum",
            " =",
            " max",
            "(",
            "max",
            "_",
            "sum",
            ",",
            " sum",
            ")",
            " \n",
            "\t",
            "return",
            " max",
            "_",
            "sum",
            " \n",
            "\n",
            "arr"
        ]
    },
    {
        "task_id": 246,
        "prompt": "Write a python function for computing square roots using the babylonian method.\n\ndef babylonian_squareroot(number):\n",
        "answer": "def babylonian_squareroot(number):\n\t\"\"\"\n\tThis function takes a number and returns the square root of the number using the babylonian method.\n\t\"\"\"\n\tepsilon = 0.01\n\tguess = number/2\n\twhile abs(guess*guess - number) >= epsilon:\n\t\tguess = (guess + number/guess)/2\n\treturn guess\n\n",
        "test_list": [
            "assert babylonian_squareroot(10)==3.162277660168379",
            "assert babylonian_squareroot(2)==1.414213562373095",
            "assert babylonian_squareroot(9)==3.0"
        ],
        "answer_list": [
            "\t",
            "\"\"\"",
            "\n",
            "\t",
            "This",
            " function",
            " takes",
            " a",
            " number",
            " and",
            " returns",
            " the",
            " square",
            " root",
            " of",
            " the",
            " number",
            " using",
            " the",
            " b",
            "ab",
            "ylon",
            "ian",
            " method",
            ".",
            "\n",
            "\t",
            "\"\"\"",
            "\n",
            "\t",
            "epsilon",
            " =",
            " ",
            "0",
            ".",
            "0",
            "1",
            "\n",
            "\t",
            "guess",
            " =",
            " number",
            "/",
            "2",
            "\n",
            "\t",
            "while",
            " abs",
            "(",
            "guess",
            "*",
            "guess",
            " -",
            " number",
            ")",
            " >=",
            " epsilon",
            ":",
            "\n\t",
            "\t",
            "guess",
            " =",
            " (",
            "guess",
            " +",
            " number",
            "/",
            "guess",
            ")/",
            "2",
            "\n",
            "\t",
            "return",
            " guess",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 247,
        "prompt": "Write a python function to find the longest palindromic subsequence in the given string.\n\ndef lps(str): \n",
        "answer": "def lps(str): \n\tn = len(str) \n\tL = [[0 for x in range(n)] for x in range(n)] \n\n",
        "test_list": [
            "assert lps(\"TENS FOR TENS\") == 5 ",
            "assert lps(\"CARDIO FOR CARDS\") == 7",
            "assert lps(\"PART OF THE JOURNEY IS PART\") == 9 "
        ],
        "answer_list": [
            "\t",
            "n",
            " =",
            " len",
            "(",
            "str",
            ")",
            " \n",
            "\t",
            "L",
            " =",
            " [[",
            "0",
            " for",
            " x",
            " in",
            " range",
            "(",
            "n",
            ")]",
            " for",
            " x",
            " in",
            " range",
            "(",
            "n",
            ")]",
            " \n\n",
            "\t"
        ]
    },
    {
        "task_id": 248,
        "prompt": "Write a python function to calculate the harmonic sum of n-1.\n\ndef harmonic_sum(n):\n",
        "answer": "def harmonic_sum(n):\n\tsum = 0\n\tfor i in range(1, n+1):\n\t\tsum += 1/i\n\treturn sum\n\n",
        "test_list": [
            "assert harmonic_sum(7) == 2.5928571428571425",
            "assert harmonic_sum(4) == 2.083333333333333",
            "assert harmonic_sum(19) == 3.547739657143682"
        ],
        "answer_list": [
            "\t",
            "sum",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "1",
            ",",
            " n",
            "+",
            "1",
            "):",
            "\n\t",
            "\t",
            "sum",
            " +=",
            " ",
            "1",
            "/",
            "i",
            "\n",
            "\t",
            "return",
            " sum",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 249,
        "prompt": "Write a python function to find the intersection of two arrays using lambda function.\n\ndef intersection_array(array_nums1,array_nums2):\n",
        "answer": "def intersection_array(array_nums1,array_nums2):\n\treturn list(filter(lambda x: x in array_nums1, array_nums2))\n\n",
        "test_list": [
            "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]",
            "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]",
            "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]"
        ],
        "answer_list": [
            "\t",
            "return",
            " list",
            "(",
            "filter",
            "(",
            "lambda",
            " x",
            ":",
            " x",
            " in",
            " array",
            "_",
            "nums",
            "1",
            ",",
            " array",
            "_",
            "nums",
            "2",
            "))",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 250,
        "prompt": "Write a python function to count the occcurences of an element in a tuple.\n\ndef count_X(tup, x): \n",
        "answer": "def count_X(tup, x): \n\tcount = 0\n\tfor i in tup:\n\t\tif i == x:\n\t\t\tcount += 1\n\treturn count\n\n",
        "test_list": [
            "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0",
            "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3",
            "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4"
        ],
        "answer_list": [
            "\t",
            "count",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " tup",
            ":",
            "\n\t",
            "\t",
            "if",
            " i",
            " ==",
            " x",
            ":",
            "\n\t\t",
            "\t",
            "count",
            " +=",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " count",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 251,
        "prompt": "Write a python function to insert an element before each element of a list.\n\ndef insert_element(list,element):\n",
        "answer": "def insert_element(list,element):\n\tfor i in range(len(list)):\n\t\tlist.insert(i,element)\n\treturn list\n\n",
        "test_list": [
            "assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] ",
            "assert insert_element(['python', 'java'] ,'program')==['program', 'python', 'program', 'java'] ",
            "assert insert_element(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad'] "
        ],
        "answer_list": [
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "len",
            "(",
            "list",
            ")):",
            "\n\t",
            "\t",
            "list",
            ".",
            "insert",
            "(",
            "i",
            ",",
            "element",
            ")",
            "\n",
            "\t",
            "return",
            " list",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 252,
        "prompt": "Write a python function to convert complex numbers to polar coordinates.\n\ndef convert(numbers):    \n",
        "answer": "def convert(numbers):    \n\tfor i in numbers:\n\t\tprint(math.sqrt(i.real**2 + i.imag**2), math.atan2(i.imag, i.real))\n\n",
        "test_list": [
            "assert convert(1) == (1.0, 0.0)",
            "assert convert(4) == (4.0,0.0)",
            "assert convert(5) == (5.0,0.0)"
        ],
        "answer_list": [
            "\t",
            "for",
            " i",
            " in",
            " numbers",
            ":",
            "\n\t",
            "\t",
            "print",
            "(",
            "math",
            ".",
            "sqrt",
            "(",
            "i",
            ".",
            "real",
            "**",
            "2",
            " +",
            " i",
            ".",
            "imag",
            "**",
            "2",
            "),",
            " math",
            ".",
            "atan",
            "2",
            "(",
            "i",
            ".",
            "imag",
            ",",
            " i",
            ".",
            "real",
            "))",
            "\n",
            "\n",
            "convert"
        ]
    },
    {
        "task_id": 253,
        "prompt": "Write a python function to count integers from a given list.\n\ndef count_integer(list1):\n",
        "answer": "def count_integer(list1):\n\tcount = 0\n\tfor i in list1:\n\t\tif type(i) == int:\n\t\t\tcount += 1\n\treturn count\n\n",
        "test_list": [
            "assert count_integer([1,2,'abc',1.2]) == 2",
            "assert count_integer([1,2,3]) == 3",
            "assert count_integer([1,1.2,4,5.1]) == 2"
        ],
        "answer_list": [
            "\t",
            "count",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " list",
            "1",
            ":",
            "\n\t",
            "\t",
            "if",
            " type",
            "(",
            "i",
            ")",
            " ==",
            " int",
            ":",
            "\n\t\t",
            "\t",
            "count",
            " +=",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " count",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 254,
        "prompt": "Write a python function to find all words starting with 'a' or 'e' in a given string.\n\ndef words_ae(text):\n",
        "answer": "def words_ae(text):\n\treturn [word for word in text.split() if word[0] in ['a', 'e']]\n\n",
        "test_list": [
            "assert words_ae(\"python programe\")==['ame']",
            "assert words_ae(\"python programe language\")==['ame','anguage']",
            "assert words_ae(\"assert statement\")==['assert', 'atement']"
        ],
        "answer_list": [
            "\t",
            "return",
            " [",
            "word",
            " for",
            " word",
            " in",
            " text",
            ".",
            "split",
            "()",
            " if",
            " word",
            "[",
            "0",
            "]",
            " in",
            " ['",
            "a",
            "',",
            " '",
            "e",
            "']]",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 255,
        "prompt": "Write a python function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\n\ndef combinations_colors(l, n):\n",
        "answer": "def combinations_colors(l, n):\n\tif n == 0:\n\t\treturn [[]]\n\tif n == 1:\n\t\treturn [[l[0]], [l[1]], [l[2]]]\n\tif n == 2:\n\t\treturn [[l[0], l[1]], [l[0], l[2]], [l[1], l[2]]]\n\treturn [[l[0], l[1], l[2]]] + [comb + [l[3]] for comb in combinations_colors(l[1:], n-1)]\n\n",
        "test_list": [
            "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]",
            "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],2)==[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]",
            "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],3)==[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]"
        ],
        "answer_list": [
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "0",
            ":",
            "\n\t",
            "\t",
            "return",
            " [",
            "[]",
            "]",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "1",
            ":",
            "\n\t",
            "\t",
            "return",
            " [[",
            "l",
            "[",
            "0",
            "]],",
            " [",
            "l",
            "[",
            "1",
            "]],",
            " [",
            "l",
            "[",
            "2",
            "]]]",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "2",
            ":",
            "\n\t",
            "\t",
            "return",
            " [[",
            "l",
            "[",
            "0",
            "],",
            " l",
            "[",
            "1",
            "]],",
            " [",
            "l",
            "[",
            "0",
            "],",
            " l",
            "[",
            "2",
            "]],",
            " [",
            "l",
            "[",
            "1",
            "],",
            " l",
            "[",
            "2",
            "]]]",
            "\n",
            "\t",
            "return",
            " [[",
            "l",
            "[",
            "0",
            "],",
            " l",
            "[",
            "1",
            "],",
            " l",
            "[",
            "2",
            "]]]",
            " +",
            " [",
            "comb",
            " +",
            " [",
            "l",
            "[",
            "3",
            "]]",
            " for",
            " com",
            "b",
            " in",
            " combinations",
            "_",
            "colors",
            "(",
            "l",
            "[",
            "1",
            ":],",
            " n",
            "-",
            "1",
            ")]",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 256,
        "prompt": "Write a python function to count the number of prime numbers less than a given non-negative number.\n\ndef count_Primes_nums(n):\n",
        "answer": "def count_Primes_nums(n):\n\tcount = 0\n\tfor i in range(2, n):\n\t\tif is_prime(i):\n\t\t\tcount += 1\n\treturn count\n\n",
        "test_list": [
            "assert count_Primes_nums(5) == 2",
            "assert count_Primes_nums(10) == 4",
            "assert count_Primes_nums(100) == 25"
        ],
        "answer_list": [
            "\t",
            "count",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "2",
            ",",
            " n",
            "):",
            "\n\t",
            "\t",
            "if",
            " is",
            "_",
            "prime",
            "(",
            "i",
            "):",
            "\n\t\t",
            "\t",
            "count",
            " +=",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " count",
            "\n",
            "\n",
            "def"
        ]
    },
    {
        "task_id": 257,
        "prompt": "Write a python function to swap two numbers.\n\ndef swap_numbers(a,b):\n",
        "answer": "def swap_numbers(a,b):\n\ta,b = b,a\n\tprint(a,b)\n\n",
        "test_list": [
            "assert swap_numbers(10,20)==(20,10)",
            "assert swap_numbers(15,17)==(17,15)",
            "assert swap_numbers(100,200)==(200,100)"
        ],
        "answer_list": [
            "\t",
            "a",
            ",",
            "b",
            " =",
            " b",
            ",",
            "a",
            "\n",
            "\t",
            "print",
            "(",
            "a",
            ",",
            "b",
            ")",
            "\n",
            "\n",
            "swap"
        ]
    },
    {
        "task_id": 258,
        "prompt": "Write a python function to find number of odd elements in the given list using lambda function.\n\ndef count_odd(array_nums):\n",
        "answer": "def count_odd(array_nums):\n\treturn len(list(filter(lambda x: x % 2!= 0, array_nums)))\n\n",
        "test_list": [
            "assert count_odd([1, 2, 3, 5, 7, 8, 10])==4",
            "assert count_odd([10,15,14,13,-18,12,-20])==2",
            "assert count_odd([1, 2, 4, 8, 9])==2"
        ],
        "answer_list": [
            "\t",
            "return",
            " len",
            "(",
            "list",
            "(",
            "filter",
            "(",
            "lambda",
            " x",
            ":",
            " x",
            " %",
            " ",
            "2",
            "!=",
            " ",
            "0",
            ",",
            " array",
            "_",
            "nums",
            ")))",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 259,
        "prompt": "Write a python function to maximize the given two tuples.\n\ndef maximize_elements(test_tup1, test_tup2):\n",
        "answer": "def maximize_elements(test_tup1, test_tup2):\n\tif test_tup1[0] > test_tup2[0]:\n\t\treturn test_tup1\n\telif test_tup1[0] < test_tup2[0]:\n\t\treturn test_tup2\n\telse:\n\t\tif test_tup1[1] > test_tup2[1]:\n\t\t\treturn test_tup1\n\t\telse:\n\t\t\treturn test_tup2\n\n",
        "test_list": [
            "assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))",
            "assert maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))",
            "assert maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))"
        ],
        "answer_list": [
            "\t",
            "if",
            " test",
            "_",
            "tup",
            "1",
            "[",
            "0",
            "]",
            " >",
            " test",
            "_",
            "tup",
            "2",
            "[",
            "0",
            "]:",
            "\n\t",
            "\t",
            "return",
            " test",
            "_",
            "tup",
            "1",
            "\n",
            "\t",
            "elif",
            " test",
            "_",
            "tup",
            "1",
            "[",
            "0",
            "]",
            " <",
            " test",
            "_",
            "tup",
            "2",
            "[",
            "0",
            "]:",
            "\n\t",
            "\t",
            "return",
            " test",
            "_",
            "tup",
            "2",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "if",
            " test",
            "_",
            "tup",
            "1",
            "[",
            "1",
            "]",
            " >",
            " test",
            "_",
            "tup",
            "2",
            "[",
            "1",
            "]:",
            "\n\t\t",
            "\t",
            "return",
            " test",
            "_",
            "tup",
            "1",
            "\n\t",
            "\t",
            "else",
            ":",
            "\n\t\t",
            "\t",
            "return",
            " test",
            "_",
            "tup",
            "2",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 260,
        "prompt": "Write a python function to find the nth newman\u2013shanks\u2013williams prime number.\n\ndef newman_prime(n): \n",
        "answer": "def newman_prime(n): \n\tif n == 1: \n\t\treturn 2\n\tif n == 2: \n\t\treturn 3\n\tif n == 3: \n\t\treturn 5\n\tif n == 4: \n\t\treturn 7\n\tif n == 5: \n\t\treturn 11\n\tif n == 6: \n\t\treturn 13\n\tif n == 7: \n\t\treturn 17\n\tif n == 8: \n\t\treturn 19\n\tif n == 9: \n\t\treturn 23\n\tif n == 10: \n\t\treturn 29\n\tif n == 11: \n\t\treturn 31\n\tif n == 12: \n\t\treturn 37\n\tif n == 13: \n\t\treturn 41\n\tif n == 14: \n\t\treturn 43\n\tif n == 15: \n\t\treturn 47\n\tif n == 16: \n\t\treturn 53\n\tif n == 17: \n\t\treturn 59\n\tif n == 18: \n\t\treturn 61\n\tif n == 19: \n\t\treturn 67\n\tif n == 20: \n\t\treturn 71\n\tif n == 21: \n\t\treturn 73\n\tif n == 22: \n\t\treturn 79\n\tif n == 23: \n\t\treturn 83\n\tif n == 24: \n\t\treturn 89\n\tif n == 25: \n\t\treturn 97\n\tif n == 26: \n\t\treturn 101\n\tif n == 27: \n\t\treturn 103\n\tif n == 28: \n\t\treturn 107\n\tif n == 29: \n\t\treturn 109\n\tif n == 30: \n\t\treturn 113\n\tif n == 31: \n\t\treturn 127\n\tif n == 32: \n\t\treturn 131\n\tif n == 33: \n\t\treturn 137\n\tif n == 34: \n\t\treturn 139\n\tif n == 35: \n\t\treturn 149\n\tif n == 36: \n\t\treturn 151\n\tif n == 37: \n\t\treturn 157\n\tif n == 38: \n\t\treturn 163\n\tif n == 39: \n\t\treturn 167\n\tif n == 40: \n\t\treturn 173\n\tif n == 41: \n\t\treturn 179\n\tif n == 42: \n\t\treturn 181\n\tif n == 43: \n\t\treturn 191\n\tif n == 44: \n\t\treturn 193\n\tif n == 45: \n\t\treturn 197\n\tif n == 46: \n\t\treturn 199\n\tif n == 47: \n\t\treturn 211\n\tif n == 48: \n\t\treturn 223\n\tif n == 49: \n\t\treturn 227\n\tif n == 50: \n\t\treturn 229\n\tif n == 51: \n\t\treturn 233\n\tif n == 52: \n\t\treturn 239\n\tif n == 53: \n\t\treturn 241\n\tif n == 54: \n\t\treturn 251\n\tif n == 55: \n\t\treturn 257\n\tif n == 56: \n\t\treturn 263\n\tif n == 57: \n\t\treturn 269\n\tif n == 58: \n\t\treturn 271\n\tif n == 59: \n\t\treturn 277\n\tif n == 60: \n\t\treturn 281\n\tif n == 61: \n\t\treturn 283\n\tif n == 62: \n\t\treturn 293\n\tif n == 63: \n\t\treturn 307\n\tif n == 64: \n\t\treturn 311\n\tif n == 65: \n\t\treturn 313\n\tif n == 66: \n\t\treturn 317\n\tif n == 6",
        "test_list": [
            "assert newman_prime(3) == 7 ",
            "assert newman_prime(4) == 17",
            "assert newman_prime(5) == 41"
        ],
        "answer_list": [
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "1",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "2",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "2",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "3",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "3",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "5",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "4",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "7",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "5",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "1",
            "1",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "6",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "1",
            "3",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "7",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "1",
            "7",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "8",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "1",
            "9",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "9",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "2",
            "3",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "1",
            "0",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "2",
            "9",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "1",
            "1",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "3",
            "1",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "1",
            "2",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "3",
            "7",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "1",
            "3",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "4",
            "1",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "1",
            "4",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "4",
            "3",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "1",
            "5",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "4",
            "7",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "1",
            "6",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "5",
            "3",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "1",
            "7",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "5",
            "9",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "1",
            "8",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "6",
            "1",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "1",
            "9",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "6",
            "7",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "2",
            "0",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "7",
            "1",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "2",
            "1",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "7",
            "3",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "2",
            "2",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "7",
            "9",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "2",
            "3",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "8",
            "3",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "2",
            "4",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "8",
            "9",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "2",
            "5",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "9",
            "7",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "2",
            "6",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "1",
            "0",
            "1",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "2",
            "7",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "1",
            "0",
            "3",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "2",
            "8",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "1",
            "0",
            "7",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "2",
            "9",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "1",
            "0",
            "9",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "3",
            "0",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "1",
            "1",
            "3",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "3",
            "1",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "1",
            "2",
            "7",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "3",
            "2",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "1",
            "3",
            "1",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "3",
            "3",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "1",
            "3",
            "7",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "3",
            "4",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "1",
            "3",
            "9",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "3",
            "5",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "1",
            "4",
            "9",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "3",
            "6",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "1",
            "5",
            "1",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "3",
            "7",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "1",
            "5",
            "7",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "3",
            "8",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "1",
            "6",
            "3",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "3",
            "9",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "1",
            "6",
            "7",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "4",
            "0",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "1",
            "7",
            "3",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "4",
            "1",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "1",
            "7",
            "9",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "4",
            "2",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "1",
            "8",
            "1",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "4",
            "3",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "1",
            "9",
            "1",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "4",
            "4",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "1",
            "9",
            "3",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "4",
            "5",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "1",
            "9",
            "7",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "4",
            "6",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "1",
            "9",
            "9",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "4",
            "7",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "2",
            "1",
            "1",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "4",
            "8",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "2",
            "2",
            "3",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "4",
            "9",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "2",
            "2",
            "7",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "5",
            "0",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "2",
            "2",
            "9",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "5",
            "1",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "2",
            "3",
            "3",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "5",
            "2",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "2",
            "3",
            "9",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "5",
            "3",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "2",
            "4",
            "1",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "5",
            "4",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "2",
            "5",
            "1",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "5",
            "5",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "2",
            "5",
            "7",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "5",
            "6",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "2",
            "6",
            "3",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "5",
            "7",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "2",
            "6",
            "9",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "5",
            "8",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "2",
            "7",
            "1",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "5",
            "9",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "2",
            "7",
            "7",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "6",
            "0",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "2",
            "8",
            "1",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "6",
            "1",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "2",
            "8",
            "3",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "6",
            "2",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "2",
            "9",
            "3",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "6",
            "3",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "3",
            "0",
            "7",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "6",
            "4",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "3",
            "1",
            "1",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "6",
            "5",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "3",
            "1",
            "3",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "6",
            "6",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "3",
            "1",
            "7",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "6"
        ]
    },
    {
        "task_id": 261,
        "prompt": "Write a python function to perform mathematical division operation across the given tuples.\n\ndef division_elements(test_tup1, test_tup2):\n",
        "answer": "def division_elements(test_tup1, test_tup2):\n\treturn (test_tup1[0]/test_tup2[0], test_tup1[1]/test_tup2[1])\n\n",
        "test_list": [
            "assert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)",
            "assert division_elements((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)",
            "assert division_elements((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)"
        ],
        "answer_list": [
            "\t",
            "return",
            " (",
            "test",
            "_",
            "tup",
            "1",
            "[",
            "0",
            "]/",
            "test",
            "_",
            "tup",
            "2",
            "[",
            "0",
            "],",
            " test",
            "_",
            "tup",
            "1",
            "[",
            "1",
            "]/",
            "test",
            "_",
            "tup",
            "2",
            "[",
            "1",
            "])",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 262,
        "prompt": "Write a python function to split a given list into two parts where the length of the first part of the list is given.\n\ndef split_two_parts(list1, L):\n",
        "answer": "def split_two_parts(list1, L):\n\tif len(list1) < L:\n\t\treturn None\n\telse:\n\t\treturn list1[:L], list1[L:]\n\n",
        "test_list": [
            "assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])",
            "assert split_two_parts(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])",
            "assert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])"
        ],
        "answer_list": [
            "\t",
            "if",
            " len",
            "(",
            "list",
            "1",
            ")",
            " <",
            " L",
            ":",
            "\n\t",
            "\t",
            "return",
            " None",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "return",
            " list",
            "1",
            "[:",
            "L",
            "],",
            " list",
            "1",
            "[",
            "L",
            ":]",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 263,
        "prompt": "Write a python function to merge two dictionaries.\n\ndef merge_dict(d1,d2):\n",
        "answer": "def merge_dict(d1,d2):\n\td3 = d1.copy()\n\td3.update(d2)\n\treturn d3\n\n",
        "test_list": [
            "assert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}",
            "assert merge_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})=={'a':900,'b':900,'d':900,'a':900,'b':900,'d':900}",
            "assert merge_dict({'a':10,'b':20},{'x':30,'y':40})=={'x':30,'y':40,'a':10,'b':20}"
        ],
        "answer_list": [
            "\t",
            "d",
            "3",
            " =",
            " d",
            "1",
            ".",
            "copy",
            "()",
            "\n",
            "\t",
            "d",
            "3",
            ".",
            "update",
            "(",
            "d",
            "2",
            ")",
            "\n",
            "\t",
            "return",
            " d",
            "3",
            "\n",
            "\n",
            "#"
        ]
    },
    {
        "task_id": 264,
        "prompt": "Write a python function to calculate a dog's age in dog's years.\n\ndef dog_age(h_age):\n",
        "answer": "def dog_age(h_age):\n\treturn h_age * 7\n\n",
        "test_list": [
            "assert dog_age(12)==61",
            "assert dog_age(15)==73",
            "assert dog_age(24)==109"
        ],
        "answer_list": [
            "\t",
            "return",
            " h",
            "_",
            "age",
            " *",
            " ",
            "7",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 265,
        "prompt": "Write a python function to split a list for every nth element.\n\ndef list_split(S, step):\n",
        "answer": "def list_split(S, step):\n\treturn [S[i:i+step] for i in range(0, len(S), step)]\n\n",
        "test_list": [
            "assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] ",
            "assert list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]] ",
            "assert list_split(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']] "
        ],
        "answer_list": [
            "\t",
            "return",
            " [",
            "S",
            "[",
            "i",
            ":",
            "i",
            "+",
            "step",
            "]",
            " for",
            " i",
            " in",
            " range",
            "(",
            "0",
            ",",
            " len",
            "(",
            "S",
            "),",
            " step",
            ")]",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 266,
        "prompt": "Write a python function to find the lateral surface area of a cube.\n\ndef lateralsurface_cube(l):\n",
        "answer": "def lateralsurface_cube(l):\n\treturn 6*(l**2)\n\n",
        "test_list": [
            "assert lateralsurface_cube(5)==100",
            "assert lateralsurface_cube(9)==324",
            "assert lateralsurface_cube(10)==400"
        ],
        "answer_list": [
            "\t",
            "return",
            " ",
            "6",
            "*(",
            "l",
            "**",
            "2",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 267,
        "prompt": "Write a python function to find the sum of squares of first n odd natural numbers.\n\ndef square_Sum(n):  \n",
        "answer": "def square_Sum(n):  \n\treturn (n*(n+1)*(2*n+1))/6\n\n",
        "test_list": [
            "assert square_Sum(2) == 10",
            "assert square_Sum(3) == 35",
            "assert square_Sum(4) == 84"
        ],
        "answer_list": [
            "\t",
            "return",
            " (",
            "n",
            "*(",
            "n",
            "+",
            "1",
            ")*(",
            "2",
            "*",
            "n",
            "+",
            "1",
            "))/",
            "6",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 268,
        "prompt": "Write a python function to find then'th star number.\n\ndef find_star_num(n): \n",
        "answer": "def find_star_num(n): \n\treturn 2 * n * (n + 1) + 1\n\n",
        "test_list": [
            "assert find_star_num(3) == 37",
            "assert find_star_num(4) == 73",
            "assert find_star_num(5) == 121"
        ],
        "answer_list": [
            "\t",
            "return",
            " ",
            "2",
            " *",
            " n",
            " *",
            " (",
            "n",
            " +",
            " ",
            "1",
            ")",
            " +",
            " ",
            "1",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 269,
        "prompt": "Write a python function to find the ascii value of a character.\n\ndef ascii_value(k):\n",
        "answer": "def ascii_value(k):\n\treturn ord(k)\n\n",
        "test_list": [
            "assert ascii_value('A')==65",
            "assert ascii_value('R')==82",
            "assert ascii_value('S')==83"
        ],
        "answer_list": [
            "\t",
            "return",
            " ord",
            "(",
            "k",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 270,
        "prompt": "Write a python function to find the sum of even numbers at even positions.\n\ndef sum_even_and_even_index(arr,n):  \n",
        "answer": "def sum_even_and_even_index(arr,n):  \n\tsum = 0\n\tfor i in range(0,n):\n\t\tif(i%2==0 and arr[i]%2==0):\n\t\t\tsum = sum + arr[i]\n\treturn sum\n\n",
        "test_list": [
            "assert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30",
            "assert sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18],10) == 26",
            "assert sum_even_and_even_index([5, 6, 12, 1],4) == 12"
        ],
        "answer_list": [
            "\t",
            "sum",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "0",
            ",",
            "n",
            "):",
            "\n\t",
            "\t",
            "if",
            "(",
            "i",
            "%",
            "2",
            "==",
            "0",
            " and",
            " arr",
            "[",
            "i",
            "]",
            "%",
            "2",
            "==",
            "0",
            "):",
            "\n\t\t",
            "\t",
            "sum",
            " =",
            " sum",
            " +",
            " arr",
            "[",
            "i",
            "]",
            "\n",
            "\t",
            "return",
            " sum",
            "\n",
            "\n",
            "arr"
        ]
    },
    {
        "task_id": 271,
        "prompt": "Write a python function to find the sum of fifth power of first n even natural numbers.\n\ndef even_Power_Sum(n): \n",
        "answer": "def even_Power_Sum(n): \n\tsum = 0\n\tfor i in range(2, n+1, 2): \n\t\tsum += i**5\n\treturn sum\n\n",
        "test_list": [
            "assert even_Power_Sum(2) == 1056",
            "assert even_Power_Sum(3) == 8832",
            "assert even_Power_Sum(1) == 32"
        ],
        "answer_list": [
            "\t",
            "sum",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "2",
            ",",
            " n",
            "+",
            "1",
            ",",
            " ",
            "2",
            "):",
            " \n\t",
            "\t",
            "sum",
            " +=",
            " i",
            "**",
            "5",
            "\n",
            "\t",
            "return",
            " sum",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 272,
        "prompt": "Write a python function to perfom the rear element extraction from list of tuples records.\n\ndef rear_extract(test_list):\n",
        "answer": "def rear_extract(test_list):\n\treturn test_list[-1]\n\n",
        "test_list": [
            "assert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]",
            "assert rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]",
            "assert rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]"
        ],
        "answer_list": [
            "\t",
            "return",
            " test",
            "_",
            "list",
            "[-",
            "1",
            "]",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 273,
        "prompt": "Write a python function to substract the contents of one tuple with corresponding index of other tuple.\n\ndef substract_elements(test_tup1, test_tup2):\n",
        "answer": "def substract_elements(test_tup1, test_tup2):\n\treturn tuple(test_tup1[i] - test_tup2[i] for i in range(len(test_tup1)))\n\n",
        "test_list": [
            "assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)",
            "assert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)",
            "assert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)"
        ],
        "answer_list": [
            "\t",
            "return",
            " tuple",
            "(",
            "test",
            "_",
            "tup",
            "1",
            "[",
            "i",
            "]",
            " -",
            " test",
            "_",
            "tup",
            "2",
            "[",
            "i",
            "]",
            " for",
            " i",
            " in",
            " range",
            "(",
            "len",
            "(",
            "test",
            "_",
            "tup",
            "1",
            ")))",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 274,
        "prompt": "Write a python function to find sum of even index binomial coefficients.\n\ndef even_binomial_Coeff_Sum( n): \n",
        "answer": "def even_binomial_Coeff_Sum( n): \n\tsum = 0\n\tfor i in range(0,n):\n\t\tsum += binomialCoeff(n,i)\n\treturn sum\n\n",
        "test_list": [
            "assert even_binomial_Coeff_Sum(4) == 8",
            "assert even_binomial_Coeff_Sum(6) == 32",
            "assert even_binomial_Coeff_Sum(2) == 2"
        ],
        "answer_list": [
            "\t",
            "sum",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "0",
            ",",
            "n",
            "):",
            "\n\t",
            "\t",
            "sum",
            " +=",
            " bin",
            "omial",
            "Coeff",
            "(",
            "n",
            ",",
            "i",
            ")",
            "\n",
            "\t",
            "return",
            " sum",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 275,
        "prompt": "Write a python function to find the position of the last removed element from the given array.\n\ndef get_Position(a,n,m): \n",
        "answer": "def get_Position(a,n,m): \n\tfor i in range(n-1,-1,-1): \n\t\tif a[i] == m: \n\t\t\treturn i \n\treturn -1\n\n",
        "test_list": [
            "assert get_Position([2,5,4],3,2) == 2",
            "assert get_Position([4,3],2,2) == 2",
            "assert get_Position([1,2,3,4],4,1) == 4"
        ],
        "answer_list": [
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "n",
            "-",
            "1",
            ",-",
            "1",
            ",-",
            "1",
            "):",
            " \n\t",
            "\t",
            "if",
            " a",
            "[",
            "i",
            "]",
            " ==",
            " m",
            ":",
            " \n\t\t",
            "\t",
            "return",
            " i",
            " \n",
            "\t",
            "return",
            " -",
            "1",
            "\n",
            "\n",
            "a"
        ]
    },
    {
        "task_id": 276,
        "prompt": "Write a python function to find the volume of a cylinder.\n\ndef volume_cylinder(r,h):\n",
        "answer": "def volume_cylinder(r,h):\n\treturn (3.14*r**2*h)\n\n",
        "test_list": [
            "assert volume_cylinder(10,5)==1570.7500000000002",
            "assert volume_cylinder(4,5)==251.32000000000002",
            "assert volume_cylinder(4,10)==502.64000000000004"
        ],
        "answer_list": [
            "\t",
            "return",
            " (",
            "3",
            ".",
            "1",
            "4",
            "*",
            "r",
            "**",
            "2",
            "*",
            "h",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 277,
        "prompt": "Write a python function to filter a dictionary based on values.\n\ndef dict_filter(dict,n):\n",
        "answer": "def dict_filter(dict,n):\n\tnew_dict = {}\n\tfor key,value in dict.items():\n\t\tif value > n:\n\t\t\tnew_dict[key] = value\n\treturn new_dict\n\n",
        "test_list": [
            "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}",
            "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}",
            "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={ 'Pierre Cox': 190}"
        ],
        "answer_list": [
            "\t",
            "new",
            "_",
            "dict",
            " =",
            " {}",
            "\n",
            "\t",
            "for",
            " key",
            ",",
            "value",
            " in",
            " dict",
            ".",
            "items",
            "():",
            "\n\t",
            "\t",
            "if",
            " value",
            " >",
            " n",
            ":",
            "\n\t\t",
            "\t",
            "new",
            "_",
            "dict",
            "[",
            "key",
            "]",
            " =",
            " value",
            "\n",
            "\t",
            "return",
            " new",
            "_",
            "dict",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 278,
        "prompt": "Write a python function to find the element count that occurs before the record in the given tuple.\n\ndef count_first_elements(test_tup):\n",
        "answer": "def count_first_elements(test_tup):\n\tcount = 0\n\tfor i in test_tup:\n\t\tif i == test_tup[0]:\n\t\t\tcount += 1\n\t\telse:\n\t\t\tbreak\n\treturn count\n\n",
        "test_list": [
            "assert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3",
            "assert count_first_elements((2, 9, (5, 7), 11) ) == 2",
            "assert count_first_elements((11, 15, 5, 8, (2, 3), 8) ) == 4"
        ],
        "answer_list": [
            "\t",
            "count",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " test",
            "_",
            "tup",
            ":",
            "\n\t",
            "\t",
            "if",
            " i",
            " ==",
            " test",
            "_",
            "tup",
            "[",
            "0",
            "]:",
            "\n\t\t",
            "\t",
            "count",
            " +=",
            " ",
            "1",
            "\n\t",
            "\t",
            "else",
            ":",
            "\n\t\t",
            "\t",
            "break",
            "\n",
            "\t",
            "return",
            " count",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 279,
        "prompt": "Write a python function to find the nth decagonal number.\n\ndef is_num_decagonal(n): \n",
        "answer": "def is_num_decagonal(n): \n\treturn n == sum(int(i) for i in str(n))\n\n",
        "test_list": [
            "assert is_num_decagonal(3) == 27",
            "assert is_num_decagonal(7) == 175",
            "assert is_num_decagonal(10) == 370"
        ],
        "answer_list": [
            "\t",
            "return",
            " n",
            " ==",
            " sum",
            "(",
            "int",
            "(",
            "i",
            ")",
            " for",
            " i",
            " in",
            " str",
            "(",
            "n",
            "))",
            "\n",
            "\n",
            "def"
        ]
    },
    {
        "task_id": 280,
        "prompt": "Write a python function to search an element in the given array by using sequential search.\n\ndef sequential_search(dlist, item):\n",
        "answer": "def sequential_search(dlist, item):\n\tpos = 0\n\tfound = False\n\twhile pos < len(dlist) and not found:\n\t\tif dlist[pos] == item:\n\t\t\tfound = True\n\t\telse:\n\t\t\tpos = pos + 1\n\treturn found\n\n",
        "test_list": [
            "assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)",
            "assert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)",
            "assert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)"
        ],
        "answer_list": [
            "\t",
            "pos",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "found",
            " =",
            " False",
            "\n",
            "\t",
            "while",
            " pos",
            " <",
            " len",
            "(",
            "d",
            "list",
            ")",
            " and",
            " not",
            " found",
            ":",
            "\n\t",
            "\t",
            "if",
            " d",
            "list",
            "[",
            "pos",
            "]",
            " ==",
            " item",
            ":",
            "\n\t\t",
            "\t",
            "found",
            " =",
            " True",
            "\n\t",
            "\t",
            "else",
            ":",
            "\n\t\t",
            "\t",
            "pos",
            " =",
            " pos",
            " +",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " found",
            "\n",
            "\n",
            "d"
        ]
    },
    {
        "task_id": 281,
        "prompt": "Write a python function to check if the elements of a given list are unique or not.\n\ndef all_unique(test_list):\n",
        "answer": "def all_unique(test_list):\n\treturn len(test_list) == len(set(test_list))\n\n",
        "test_list": [
            "assert all_unique([1,2,3]) == True",
            "assert all_unique([1,2,1,2]) == False",
            "assert all_unique([1,2,3,4,5]) == True"
        ],
        "answer_list": [
            "\t",
            "return",
            " len",
            "(",
            "test",
            "_",
            "list",
            ")",
            " ==",
            " len",
            "(",
            "set",
            "(",
            "test",
            "_",
            "list",
            "))",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 282,
        "prompt": "Write a python function to substaract two lists using map and lambda function.\n\ndef sub_list(nums1,nums2):\n",
        "answer": "def sub_list(nums1,nums2):\n\treturn list(map(lambda x,y:x-y,nums1,nums2))\n\n",
        "test_list": [
            "assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]",
            "assert sub_list([1,2],[3,4])==[-2,-2]",
            "assert sub_list([90,120],[50,70])==[40,50]"
        ],
        "answer_list": [
            "\t",
            "return",
            " list",
            "(",
            "map",
            "(",
            "lambda",
            " x",
            ",",
            "y",
            ":",
            "x",
            "-",
            "y",
            ",",
            "nums",
            "1",
            ",",
            "nums",
            "2",
            "))",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 283,
        "prompt": "Write a python function to check whether the frequency of each digit is less than or equal to the digit itself.\n\ndef validate(n): \n",
        "answer": "def validate(n): \n\ts = str(n) \n\tfor i in s: \n\t\tif int(i) > int(s[0]): \n\t\t\treturn False\n\treturn True\n\n",
        "test_list": [
            "assert validate(1234) == True",
            "assert validate(51241) == False",
            "assert validate(321) == True"
        ],
        "answer_list": [
            "\t",
            "s",
            " =",
            " str",
            "(",
            "n",
            ")",
            " \n",
            "\t",
            "for",
            " i",
            " in",
            " s",
            ":",
            " \n\t",
            "\t",
            "if",
            " int",
            "(",
            "i",
            ")",
            " >",
            " int",
            "(",
            "s",
            "[",
            "0",
            "]):",
            " \n\t\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "return",
            " True",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 284,
        "prompt": "Write a python function to check whether all items of a list are equal to a given string.\n\ndef check_element(list,element):\n",
        "answer": "def check_element(list,element):\n\tfor i in list:\n\t\tif i!= element:\n\t\t\treturn False\n\treturn True\n\n",
        "test_list": [
            "assert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False",
            "assert check_element([1,2,3,4],7)==False",
            "assert check_element([\"green\", \"green\", \"green\", \"green\"],'green')==True"
        ],
        "answer_list": [
            "\t",
            "for",
            " i",
            " in",
            " list",
            ":",
            "\n\t",
            "\t",
            "if",
            " i",
            "!=",
            " element",
            ":",
            "\n\t\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "return",
            " True",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 285,
        "prompt": "Write a python function that matches a string that has an a followed by two to three 'b'.\n\ndef text_match_two_three(text):\n",
        "answer": "def text_match_two_three(text):\n\tif text.count('a') == 1 and text.count('b') in range(2,4):\n\t\treturn True\n\telse:\n\t\treturn False\n\n",
        "test_list": [
            "assert text_match_two_three(\"ac\")==('Not matched!')",
            "assert text_match_two_three(\"dc\")==('Not matched!')",
            "assert text_match_two_three(\"abbbba\")==('Found a match!')"
        ],
        "answer_list": [
            "\t",
            "if",
            " text",
            ".",
            "count",
            "('",
            "a",
            "')",
            " ==",
            " ",
            "1",
            " and",
            " text",
            ".",
            "count",
            "('",
            "b",
            "')",
            " in",
            " range",
            "(",
            "2",
            ",",
            "4",
            "):",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 286,
        "prompt": "Write a python function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\n\ndef max_sub_array_sum_repeated(a, n, k): \n",
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n\tmax_so_far
        "test_list": [
            "assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30",
            "assert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59",
            "assert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1"
        ],
        "answer_list": [
            "\t",
            "max",
            "_",
            "so",
            "_",
            "far",
            " =",
            " -",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9"
        ]
    },
    {
        "task_id": 287,
        "prompt": "Write a python function to find the sum of squares of first n even natural numbers.\n\ndef square_Sum(n):  \n",
        "answer": "def square_Sum(n):  \n\treturn (n*(n+1)*(2*n+1))/6\n\n",
        "test_list": [
            "assert square_Sum(2) == 20",
            "assert square_Sum(3) == 56",
            "assert square_Sum(4) == 120"
        ],
        "answer_list": [
            "\t",
            "return",
            " (",
            "n",
            "*(",
            "n",
            "+",
            "1",
            ")*(",
            "2",
            "*",
            "n",
            "+",
            "1",
            "))/",
            "6",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 288,
        "prompt": "Write a python function to count array elements having modular inverse under given prime number p equal to itself.\n\ndef modular_inverse(arr, N, P):\n",
        "answer": "def modular_inverse(arr, N, P):\n\t# code here\n\treturn arr\n\n",
        "test_list": [
            "assert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2",
            "assert modular_inverse([1, 3, 8, 12, 12], 5, 13) == 3",
            "assert modular_inverse([2, 3, 4, 5], 4, 6) == 1"
        ],
        "answer_list": [
            "\t",
            "#",
            " code",
            " here",
            "\n",
            "\t",
            "return",
            " arr",
            "\n",
            "\n",
            "#{"
        ]
    },
    {
        "task_id": 289,
        "prompt": "Write a python function to calculate the number of odd days in a given year.\n\ndef odd_Days(N): \n",
        "answer": "def odd_Days(N): \n\treturn (365 - N) // 2\n\n",
        "test_list": [
            "assert odd_Days(100) == 5",
            "assert odd_Days(50) ==6",
            "assert odd_Days(75) == 2"
        ],
        "answer_list": [
            "\t",
            "return",
            " (",
            "3",
            "6",
            "5",
            " -",
            " N",
            ")",
            " //",
            " ",
            "2",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 290,
        "prompt": "Write a python function to find the list of lists with maximum length.\n\ndef max_length(list1):\n",
        "answer": "def max_length(list1):\n\tmax_len = 0\n\tfor i in list1:\n\t\tif len(i) > max_len:\n\t\t\tmax_len = len(i)\n\treturn max_len\n\n",
        "test_list": [
            "assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])",
            "assert max_length([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])",
            "assert max_length([[5], [15,20,25]])==(3, [15,20,25])"
        ],
        "answer_list": [
            "\t",
            "max",
            "_",
            "len",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " list",
            "1",
            ":",
            "\n\t",
            "\t",
            "if",
            " len",
            "(",
            "i",
            ")",
            " >",
            " max",
            "_",
            "len",
            ":",
            "\n\t\t",
            "\t",
            "max",
            "_",
            "len",
            " =",
            " len",
            "(",
            "i",
            ")",
            "\n",
            "\t",
            "return",
            " max",
            "_",
            "len",
            "\n",
            "\n",
            "list"
        ]
    },
    {
        "task_id": 291,
        "prompt": "Write a python function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\ndef count_no_of_ways(n, k): \n",
        "answer": "def count_no_of_ways(n, k): \n\tif n == 0: \n\t\treturn 0\n\tif n == 1: \n\t\treturn k\n\tif n == 2: \n\t\treturn k * k\n\treturn count_no_of_ways(n - 1, k) + count_no_of_ways(n - 2, k) * (k - 1)\n\n",
        "test_list": [
            "assert count_no_of_ways(2, 4) == 16",
            "assert count_no_of_ways(3, 2) == 6",
            "assert count_no_of_ways(4, 4) == 228"
        ],
        "answer_list": [
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "0",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "0",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "1",
            ":",
            " \n\t",
            "\t",
            "return",
            " k",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "2",
            ":",
            " \n\t",
            "\t",
            "return",
            " k",
            " *",
            " k",
            "\n",
            "\t",
            "return",
            " count",
            "_",
            "no",
            "_",
            "of",
            "_",
            "ways",
            "(",
            "n",
            " -",
            " ",
            "1",
            ",",
            " k",
            ")",
            " +",
            " count",
            "_",
            "no",
            "_",
            "of",
            "_",
            "ways",
            "(",
            "n",
            " -",
            " ",
            "2",
            ",",
            " k",
            ")",
            " *",
            " (",
            "k",
            " -",
            " ",
            "1",
            ")",
            "\n",
            "\n",
            "n"
        ]
    },
    {
        "task_id": 292,
        "prompt": "Write a python function to find quotient of two numbers.\n\ndef find(n,m):  \n",
        "answer": "def find(n,m):  \n\tif m == 0:\n\t\treturn 0\n\telse:\n\t\treturn n//m\n\n",
        "test_list": [
            "assert find(10,3) == 3",
            "assert find(4,2) == 2",
            "assert find(20,5) == 4"
        ],
        "answer_list": [
            "\t",
            "if",
            " m",
            " ==",
            " ",
            "0",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "0",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "return",
            " n",
            "//",
            "m",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 293,
        "prompt": "Write a python function to find the third side of a right angled triangle.\n\ndef otherside_rightangle(w,h):\n",
        "answer": "def otherside_rightangle(w,h):\n\treturn (w**2 + h**2)**0.5\n\n",
        "test_list": [
            "assert otherside_rightangle(7,8)==10.63014581273465",
            "assert otherside_rightangle(3,4)==5",
            "assert otherside_rightangle(7,15)==16.55294535724685"
        ],
        "answer_list": [
            "\t",
            "return",
            " (",
            "w",
            "**",
            "2",
            " +",
            " h",
            "**",
            "2",
            ")**",
            "0",
            ".",
            "5",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 294,
        "prompt": "Write a python function to find the maximum value in a given heterogeneous list.\n\ndef max_val(listval):\n",
        "answer": "def max_val(listval):\n\tmaxval = listval[0]\n\tfor i in listval:\n\t\tif i > maxval:\n\t\t\tmaxval = i\n\treturn maxval\n\n",
        "test_list": [
            "assert max_val(['Python', 3, 2, 4, 5, 'version'])==5",
            "assert max_val(['Python', 15, 20, 25])==25",
            "assert max_val(['Python', 30, 20, 40, 50, 'version'])==50"
        ],
        "answer_list": [
            "\t",
            "max",
            "val",
            " =",
            " list",
            "val",
            "[",
            "0",
            "]",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " list",
            "val",
            ":",
            "\n\t",
            "\t",
            "if",
            " i",
            " >",
            " max",
            "val",
            ":",
            "\n\t\t",
            "\t",
            "max",
            "val",
            " =",
            " i",
            "\n",
            "\t",
            "return",
            " max",
            "val",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 295,
        "prompt": "Write a python function to return the sum of all divisors of a number.\n\ndef sum_div(number):\n",
        "answer": "def sum_div(number):\n\tsum = 0\n\tfor i in range(1, number):\n\t\tif number % i == 0:\n\t\t\tsum += i\n\treturn sum\n\n",
        "test_list": [
            "assert sum_div(8)==7",
            "assert sum_div(12)==16",
            "assert sum_div(7)==1"
        ],
        "answer_list": [
            "\t",
            "sum",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "1",
            ",",
            " number",
            "):",
            "\n\t",
            "\t",
            "if",
            " number",
            " %",
            " i",
            " ==",
            " ",
            "0",
            ":",
            "\n\t\t",
            "\t",
            "sum",
            " +=",
            " i",
            "\n",
            "\t",
            "return",
            " sum",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 296,
        "prompt": "Write a python function to count inversions in an array.\n\ndef get_Inv_Count(arr,n): \n",
        "answer": "def get_Inv_Count(arr,n): \n\tinv_count = 0\n\tfor i in range(n): \n\t\tfor j in range(i+1, n): \n\t\t\tif arr[i] > arr[j]: \n\t\t\t\tinv_count += 1\n\treturn inv_count\n\n",
        "test_list": [
            "assert get_Inv_Count([1,20,6,4,5],5) == 5",
            "assert get_Inv_Count([1,2,1],3) == 1",
            "assert get_Inv_Count([1,2,5,6,1],5) == 3"
        ],
        "answer_list": [
            "\t",
            "inv",
            "_",
            "count",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "n",
            "):",
            " \n\t",
            "\t",
            "for",
            " j",
            " in",
            " range",
            "(",
            "i",
            "+",
            "1",
            ",",
            " n",
            "):",
            " \n\t\t",
            "\t",
            "if",
            " arr",
            "[",
            "i",
            "]",
            " >",
            " arr",
            "[",
            "j",
            "]:",
            " \n\t\t\t",
            "\t",
            "inv",
            "_",
            "count",
            " +=",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " inv",
            "_",
            "count",
            "\n",
            "\n",
            "arr"
        ]
    },
    {
        "task_id": 297,
        "prompt": "Write a python function to flatten a given nested list structure.\n\ndef flatten_list(list1):\n",
        "answer": "def flatten_list(list1):\n\tif type(list1) is list:\n\t\treturn [item for sublist in list1 for item in sublist]\n\telse:\n\t\treturn list1\n\n",
        "test_list": [
            "assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]",
            "assert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]",
            "assert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]"
        ],
        "answer_list": [
            "\t",
            "if",
            " type",
            "(",
            "list",
            "1",
            ")",
            " is",
            " list",
            ":",
            "\n\t",
            "\t",
            "return",
            " [",
            "item",
            " for",
            " sub",
            "list",
            " in",
            " list",
            "1",
            " for",
            " item",
            " in",
            " sub",
            "list",
            "]",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "return",
            " list",
            "1",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 298,
        "prompt": "Write a python function to find the nested list elements which are present in another list.\n\ndef intersection_nested_lists(l1, l2):\n",
        "answer": "def intersection_nested_lists(l1, l2):\n\treturn [value for value in l1 if value in l2]\n\n",
        "test_list": [
            "assert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]",
            "assert intersection_nested_lists([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]])==[[], []]",
            "assert intersection_nested_lists(['john','amal','joel','george'],[['john'],['jack','john','mary'],['howard','john'],['jude']])==[['john'], ['john'], ['john'], []]"
        ],
        "answer_list": [
            "\t",
            "return",
            " [",
            "value",
            " for",
            " value",
            " in",
            " l",
            "1",
            " if",
            " value",
            " in",
            " l",
            "2",
            "]",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 299,
        "prompt": "Write a python function to calculate the maximum aggregate from the list of tuples.\n\ndef max_aggregate(stdata):\n",
        "answer": "def max_aggregate(stdata):\n\tmax_agg = 0\n\tfor i in range(len(stdata)):\n\t\tif stdata[i][0] + stdata[i][1] > max_agg:\n\t\t\tmax_agg = stdata[i][0] + stdata[i][1]\n\treturn max_agg\n\n",
        "test_list": [
            "assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)",
            "assert max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)",
            "assert max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)"
        ],
        "answer_list": [
            "\t",
            "max",
            "_",
            "agg",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "len",
            "(",
            "st",
            "data",
            ")):",
            "\n\t",
            "\t",
            "if",
            " st",
            "data",
            "[",
            "i",
            "][",
            "0",
            "]",
            " +",
            " st",
            "data",
            "[",
            "i",
            "][",
            "1",
            "]",
            " >",
            " max",
            "_",
            "agg",
            ":",
            "\n\t\t",
            "\t",
            "max",
            "_",
            "agg",
            " =",
            " st",
            "data",
            "[",
            "i",
            "][",
            "0",
            "]",
            " +",
            " st",
            "data",
            "[",
            "i",
            "][",
            "1",
            "]",
            "\n",
            "\t",
            "return",
            " max",
            "_",
            "agg",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 300,
        "prompt": "Write a python function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n\ndef count_binary_seq(n): \n",
        "answer": "def count_binary_seq(n): \n\tcount = 0\n\tfor i in range(1, 2**n): \n\t\tif (i & (i << 1)) == 0: \n\t\t\tcount += 1\n\treturn count \n\n",
        "test_list": [
            "assert count_binary_seq(1) == 2.0",
            "assert count_binary_seq(2) == 6.0",
            "assert count_binary_seq(3) == 20.0"
        ],
        "answer_list": [
            "\t",
            "count",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "1",
            ",",
            " ",
            "2",
            "**",
            "n",
            "):",
            " \n\t",
            "\t",
            "if",
            " (",
            "i",
            " &",
            " (",
            "i",
            " <<",
            " ",
            "1",
            "))",
            " ==",
            " ",
            "0",
            ":",
            " \n\t\t",
            "\t",
            "count",
            " +=",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " count",
            " \n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 301,
        "prompt": "Write a python function to find the depth of a dictionary.\n\ndef dict_depth(d):\n",
        "answer": "def dict_depth(d):\n\tif isinstance(d, dict):\n\t\treturn 1 + (max(map(dict_depth, d.values())) if d else 0)\n\treturn 0\n\n",
        "test_list": [
            "assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4",
            "assert dict_depth({'a':1, 'b': {'c':'python'}})==2",
            "assert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})==3"
        ],
        "answer_list": [
            "\t",
            "if",
            " isinstance",
            "(",
            "d",
            ",",
            " dict",
            "):",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            " +",
            " (",
            "max",
            "(",
            "map",
            "(",
            "dict",
            "_",
            "depth",
            ",",
            " d",
            ".",
            "values",
            "()))",
            " if",
            " d",
            " else",
            " ",
            "0",
            ")",
            "\n",
            "\t",
            "return",
            " ",
            "0",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 302,
        "prompt": "Write a python function to find the most significant bit number which is also a set bit.\n\ndef set_Bit_Number(n): \n",
        "answer": "def set_Bit_Number(n): \n\tcount = 0\n\twhile n: \n\t\tn &= n - 1\n\t\tcount += 1\n\treturn count\n\n",
        "test_list": [
            "assert set_Bit_Number(6) == 4",
            "assert set_Bit_Number(10) == 8",
            "assert set_Bit_Number(18) == 16"
        ],
        "answer_list": [
            "\t",
            "count",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "while",
            " n",
            ":",
            " \n\t",
            "\t",
            "n",
            " &=",
            " n",
            " -",
            " ",
            "1",
            "\n\t",
            "\t",
            "count",
            " +=",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " count",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 303,
        "prompt": "Write a python function to check whether the count of inversion of two types are same or not.\n\ndef solve(a,n):   \n",
        "answer": "def solve(a,n):   \n\t# code here\n\tcount = 0\n\tfor i in range(n):\n\t\tfor j in range(i+1,n):\n\t\t\tif a[i]>a[j]:\n\t\t\t\tcount+=1\n\treturn count\n\n",
        "test_list": [
            "assert solve([1,0,2],3) == True",
            "assert solve([1,2,0],3) == False",
            "assert solve([1,2,1],3) == True"
        ],
        "answer_list": [
            "\t",
            "#",
            " code",
            " here",
            "\n",
            "\t",
            "count",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "n",
            "):",
            "\n\t",
            "\t",
            "for",
            " j",
            " in",
            " range",
            "(",
            "i",
            "+",
            "1",
            ",",
            "n",
            "):",
            "\n\t\t",
            "\t",
            "if",
            " a",
            "[",
            "i",
            "]>",
            "a",
            "[",
            "j",
            "]:",
            "\n\t\t\t",
            "\t",
            "count",
            "+=",
            "1",
            "\n",
            "\t",
            "return",
            " count",
            "\n",
            "\n",
            "#{"
        ]
    },
    {
        "task_id": 304,
        "prompt": "Write a python function to find element at a given index after number of rotations.\n\ndef find_Element(arr,ranges,rotations,index) :  \n",
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n\tfor i in range(rotations) : \n\t\tarr.append(arr.pop(0))\n\treturn arr[index]\n\n",
        "test_list": [
            "assert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3",
            "assert find_Element([1,2,3,4],[[0,1],[0,2]],1,2) == 3",
            "assert find_Element([1,2,3,4,5,6],[[0,1],[0,2]],1,1) == 1"
        ],
        "answer_list": [
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "rot",
            "ations",
            ")",
            " :",
            " \n\t",
            "\t",
            "arr",
            ".",
            "append",
            "(",
            "arr",
            ".",
            "pop",
            "(",
            "0",
            "))",
            "\n",
            "\t",
            "return",
            " arr",
            "[",
            "index",
            "]",
            "\n",
            "\n",
            "arr"
        ]
    },
    {
        "task_id": 305,
        "prompt": "Write a python function to match two words from a list of words starting with letter 'p'.\n\ndef start_withp(words):\n",
        "answer": "def start_withp(words):\n\tfor word in words:\n\t\tif word.startswith('p'):\n\t\t\tprint(word)\n\n",
        "test_list": [
            "assert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')",
            "assert start_withp([\"Python Programming\",\"Java Programming\"])==('Python','Programming')",
            "assert start_withp([\"Pqrst Pqr\",\"qrstuv\"])==('Pqrst','Pqr')"
        ],
        "answer_list": [
            "\t",
            "for",
            " word",
            " in",
            " words",
            ":",
            "\n\t",
            "\t",
            "if",
            " word",
            ".",
            "startswith",
            "('",
            "p",
            "'):",
            "\n\t\t",
            "\t",
            "print",
            "(",
            "word",
            ")",
            "\n",
            "\n",
            "words"
        ]
    },
    {
        "task_id": 306,
        "prompt": "Write a python function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i.\n\ndef max_sum_increasing_subseq(a, n, index, k):\n",
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n\t# code here\n\tif index == n:\n\t\treturn 0\n\tif k == index:\n\t\treturn a[index]\n\tif k > index:\n\t\treturn max(max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, index) + a[index])\n\telse:\n\t\treturn max_sum_increasing_subseq(a, n, index + 1, k)\n\n",
        "test_list": [
            "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11",
            "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7",
            "assert max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71"
        ],
        "answer_list": [
            "\t",
            "#",
            " code",
            " here",
            "\n",
            "\t",
            "if",
            " index",
            " ==",
            " n",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "0",
            "\n",
            "\t",
            "if",
            " k",
            " ==",
            " index",
            ":",
            "\n\t",
            "\t",
            "return",
            " a",
            "[",
            "index",
            "]",
            "\n",
            "\t",
            "if",
            " k",
            " >",
            " index",
            ":",
            "\n\t",
            "\t",
            "return",
            " max",
            "(",
            "max",
            "_",
            "sum",
            "_",
            "in",
            "creasing",
            "_",
            "sub",
            "seq",
            "(",
            "a",
            ",",
            " n",
            ",",
            " index",
            " +",
            " ",
            "1",
            ",",
            " k",
            "),",
            " max",
            "_",
            "sum",
            "_",
            "in",
            "creasing",
            "_",
            "sub",
            "seq",
            "(",
            "a",
            ",",
            " n",
            ",",
            " index",
            " +",
            " ",
            "1",
            ",",
            " index",
            ")",
            " +",
            " a",
            "[",
            "index",
            "])",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "return",
            " max",
            "_",
            "sum",
            "_",
            "in",
            "creasing",
            "_",
            "sub",
            "seq",
            "(",
            "a",
            ",",
            " n",
            ",",
            " index",
            " +",
            " ",
            "1",
            ",",
            " k",
            ")",
            "\n",
            "\n",
            "#{"
        ]
    },
    {
        "task_id": 307,
        "prompt": "Write a python function to get a colon of a tuple.\n\ndef colon_tuplex(tuplex,m,n):\n",
        "answer": "def colon_tuplex(tuplex,m,n):\n\treturn tuplex[m:n]\n\n",
        "test_list": [
            "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) ",
            "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,100)==((\"HELLO\", 5, [100],True))",
            "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,500)==(\"HELLO\", 5, [500], True)"
        ],
        "answer_list": [
            "\t",
            "return",
            " tup",
            "lex",
            "[",
            "m",
            ":",
            "n",
            "]",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 308,
        "prompt": "Write a python function to find the specified number of largest products from two given lists.\n\ndef large_product(nums1, nums2, N):\n",
        "answer": "def large_product(nums1, nums2, N):\n\t# Your code here\n\tnums1.sort()\n\tnums2.sort()\n\treturn nums1[-N] * nums2[-N]\n\n",
        "test_list": [
            "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]",
            "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]",
            "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]"
        ],
        "answer_list": [
            "\t",
            "#",
            " Your",
            " code",
            " here",
            "\n",
            "\t",
            "nums",
            "1",
            ".",
            "sort",
            "()",
            "\n",
            "\t",
            "nums",
            "2",
            ".",
            "sort",
            "()",
            "\n",
            "\t",
            "return",
            " nums",
            "1",
            "[-",
            "N",
            "]",
            " *",
            " nums",
            "2",
            "[-",
            "N",
            "]",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 309,
        "prompt": "Write a python function to find the maximum of two numbers.\n\ndef maximum(a,b):   \n",
        "answer": "def maximum(a,b):   \n\tif a>b:\n\t\treturn a\n\telse:\n\t\treturn b\n\n",
        "test_list": [
            "assert maximum(5,10) == 10",
            "assert maximum(-1,-2) == -1",
            "assert maximum(9,7) == 9"
        ],
        "answer_list": [
            "\t",
            "if",
            " a",
            ">",
            "b",
            ":",
            "\n\t",
            "\t",
            "return",
            " a",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "return",
            " b",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 310,
        "prompt": "Write a python function to convert a given string to a tuple.\n\ndef string_to_tuple(str1):\n",
        "answer": "def string_to_tuple(str1):\n\treturn tuple(str1)\n\n",
        "test_list": [
            "assert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')",
            "assert string_to_tuple(\"item1\")==('i', 't', 'e', 'm', '1')",
            "assert string_to_tuple(\"15.10\")==('1', '5', '.', '1', '0')"
        ],
        "answer_list": [
            "\t",
            "return",
            " tuple",
            "(",
            "str",
            "1",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 311,
        "prompt": "Write a python function to set the left most unset bit.\n\ndef set_left_most_unset_bit(n): \n",
        "answer": "def set_left_most_unset_bit(n): \n\treturn n | (n + 1)\n\n",
        "test_list": [
            "assert set_left_most_unset_bit(10) == 14",
            "assert set_left_most_unset_bit(12) == 14",
            "assert set_left_most_unset_bit(15) == 15"
        ],
        "answer_list": [
            "\t",
            "return",
            " n",
            " |",
            " (",
            "n",
            " +",
            " ",
            "1",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 312,
        "prompt": "Write a python function to find the volume of a cone.\n\ndef volume_cone(r,h):\n",
        "answer": "def volume_cone(r,h):\n\treturn (1/3)*math.pi*r*r*h\n\n",
        "test_list": [
            "assert volume_cone(5,12)==314.15926535897927",
            "assert volume_cone(10,15)==1570.7963267948965",
            "assert volume_cone(19,17)==6426.651371693521"
        ],
        "answer_list": [
            "\t",
            "return",
            " (",
            "1",
            "/",
            "3",
            ")*",
            "math",
            ".",
            "pi",
            "*",
            "r",
            "*",
            "r",
            "*",
            "h",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 313,
        "prompt": "Write a python function to print positive numbers in a list.\n\ndef pos_nos(list1):\n",
        "answer": "def pos_nos(list1):\n\tfor i in list1:\n\t\tif i>0:\n\t\t\tprint(i)\n\n",
        "test_list": [
            "assert pos_nos([-1,-2,1,2]) == 1,2",
            "assert pos_nos([3,4,-5]) == 3,4",
            "assert pos_nos([-2,-3,1]) == 1"
        ],
        "answer_list": [
            "\t",
            "for",
            " i",
            " in",
            " list",
            "1",
            ":",
            "\n\t",
            "\t",
            "if",
            " i",
            ">",
            "0",
            ":",
            "\n\t\t",
            "\t",
            "print",
            "(",
            "i",
            ")",
            "\n",
            "\n",
            "list"
        ]
    },
    {
        "task_id": 314,
        "prompt": "Write a python function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\n\ndef max_sum_rectangular_grid(grid, n) : \n",
        "answer": "def max_sum_rectangular_grid(grid, n) : \n\t# code here \n\tdp = [[0 for i in range(n)] for j in range(n)] \n\tfor i in range(n) : \n\t\tfor j in range(n) : \n\t\t\tif i == 0 or j == 0 : \n\t\t\t\tdp[i][j] = grid[i][j] \n\t\t\telse : \n\t\t\t\tdp[i][j] = grid[i][j] + max(dp[i - 1][j], dp[i][j - 1]) \n\treturn dp[n - 1][n - 1] \n\n",
        "test_list": [
            "assert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7",
            "assert max_sum_rectangular_grid([ [ 1, 2, 3, 4, 5], [ 6, 7, 8, 9, 10] ], 5) == 24",
            "assert max_sum_rectangular_grid([ [7, 9, 11, 15, 19], [21, 25, 28, 31, 32] ], 5) == 81"
        ],
        "answer_list": [
            "\t",
            "#",
            " code",
            " here",
            " \n",
            "\t",
            "dp",
            " =",
            " [[",
            "0",
            " for",
            " i",
            " in",
            " range",
            "(",
            "n",
            ")]",
            " for",
            " j",
            " in",
            " range",
            "(",
            "n",
            ")]",
            " \n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "n",
            ")",
            " :",
            " \n\t",
            "\t",
            "for",
            " j",
            " in",
            " range",
            "(",
            "n",
            ")",
            " :",
            " \n\t\t",
            "\t",
            "if",
            " i",
            " ==",
            " ",
            "0",
            " or",
            " j",
            " ==",
            " ",
            "0",
            " :",
            " \n\t\t\t",
            "\t",
            "dp",
            "[",
            "i",
            "][",
            "j",
            "]",
            " =",
            " grid",
            "[",
            "i",
            "][",
            "j",
            "]",
            " \n\t\t",
            "\t",
            "else",
            " :",
            " \n\t\t\t",
            "\t",
            "dp",
            "[",
            "i",
            "][",
            "j",
            "]",
            " =",
            " grid",
            "[",
            "i",
            "][",
            "j",
            "]",
            " +",
            " max",
            "(",
            "dp",
            "[",
            "i",
            " -",
            " ",
            "1",
            "][",
            "j",
            "],",
            " dp",
            "[",
            "i",
            "][",
            "j",
            " -",
            " ",
            "1",
            "])",
            " \n",
            "\t",
            "return",
            " dp",
            "[",
            "n",
            " -",
            " ",
            "1",
            "][",
            "n",
            " -",
            " ",
            "1",
            "]",
            " \n",
            "\n",
            "#{"
        ]
    },
    {
        "task_id": 315,
        "prompt": "Write a python function to find the first maximum length of even word.\n\ndef find_Max_Len_Even(str): \n",
        "answer": "def find_Max_Len_Even(str): \n\tmax_len = 0\n\tfor i in range(len(str)): \n\t\tif len(str[i]) % 2 == 0: \n\t\t\tif len(str[i]) > max_len: \n\t\t\t\tmax_len = len(str[i]) \n\treturn max_len \n\n",
        "test_list": [
            "assert find_Max_Len_Even(\"python language\") == \"language\"",
            "assert find_Max_Len_Even(\"maximum even length\") == \"length\"",
            "assert find_Max_Len_Even(\"eve\") == \"-1\""
        ],
        "answer_list": [
            "\t",
            "max",
            "_",
            "len",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "len",
            "(",
            "str",
            ")):",
            " \n\t",
            "\t",
            "if",
            " len",
            "(",
            "str",
            "[",
            "i",
            "])",
            " %",
            " ",
            "2",
            " ==",
            " ",
            "0",
            ":",
            " \n\t\t",
            "\t",
            "if",
            " len",
            "(",
            "str",
            "[",
            "i",
            "])",
            " >",
            " max",
            "_",
            "len",
            ":",
            " \n\t\t\t",
            "\t",
            "max",
            "_",
            "len",
            " =",
            " len",
            "(",
            "str",
            "[",
            "i",
            "])",
            " \n",
            "\t",
            "return",
            " max",
            "_",
            "len",
            " \n",
            "\n",
            "str"
        ]
    },
    {
        "task_id": 316,
        "prompt": "Write a python function to find the index of the last occurrence of a given number in a sorted array.\n\ndef find_last_occurrence(A, x):\n",
        "answer": "def find_last_occurrence(A, x):\n\tlow = 0\n\thigh = len(A) - 1\n\twhile low <= high:\n\t\tmid = (low + high) // 2\n\t\tif A[mid] == x:\n\t\t\tif mid == len(A) - 1:\n\t\t\t\treturn mid\n\t\t\telse:\n\t\t\t\thigh = mid - 1\n\t\telif A[mid] > x:\n\t\t\thigh = mid - 1\n\t\telse:\n\t\t\tlow = mid + 1\n\treturn -1\n\n",
        "test_list": [
            "assert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3",
            "assert find_last_occurrence([2, 3, 5, 8, 6, 6, 8, 9, 9, 9], 9) == 9",
            "assert find_last_occurrence([2, 2, 1, 5, 6, 6, 6, 9, 9, 9], 6) == 6"
        ],
        "answer_list": [
            "\t",
            "low",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "high",
            " =",
            " len",
            "(",
            "A",
            ")",
            " -",
            " ",
            "1",
            "\n",
            "\t",
            "while",
            " low",
            " <=",
            " high",
            ":",
            "\n\t",
            "\t",
            "mid",
            " =",
            " (",
            "low",
            " +",
            " high",
            ")",
            " //",
            " ",
            "2",
            "\n\t",
            "\t",
            "if",
            " A",
            "[",
            "mid",
            "]",
            " ==",
            " x",
            ":",
            "\n\t\t",
            "\t",
            "if",
            " mid",
            " ==",
            " len",
            "(",
            "A",
            ")",
            " -",
            " ",
            "1",
            ":",
            "\n\t\t\t",
            "\t",
            "return",
            " mid",
            "\n\t\t",
            "\t",
            "else",
            ":",
            "\n\t\t\t",
            "\t",
            "high",
            " =",
            " mid",
            " -",
            " ",
            "1",
            "\n\t",
            "\t",
            "elif",
            " A",
            "[",
            "mid",
            "]",
            " >",
            " x",
            ":",
            "\n\t\t",
            "\t",
            "high",
            " =",
            " mid",
            " -",
            " ",
            "1",
            "\n\t",
            "\t",
            "else",
            ":",
            "\n\t\t",
            "\t",
            "low",
            " =",
            " mid",
            " +",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " -",
            "1",
            "\n",
            "\n",
            "A"
        ]
    },
    {
        "task_id": 317,
        "prompt": "Write a python function to reflect the modified run-length encoding from a list.\n\ndef modified_encode(alist):\n",
        "answer": "def modified_encode(alist):\n\tif len(alist) == 0:\n\t\treturn []\n\telse:\n\t\tif alist[0] == alist[1]:\n\t\t\treturn [alist[0], alist[1], alist[2]] + modified_encode(alist[3:])\n\t\telse:\n\t\t\treturn [alist[0], alist[1]] + modified_encode(alist[2:])\n\n",
        "test_list": [
            "assert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]",
            "assert modified_encode('automatically')==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y']",
            "assert modified_encode('python')==['p', 'y', 't', 'h', 'o', 'n']"
        ],
        "answer_list": [
            "\t",
            "if",
            " len",
            "(",
            "alist",
            ")",
            " ==",
            " ",
            "0",
            ":",
            "\n\t",
            "\t",
            "return",
            " []",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "if",
            " al",
            "ist",
            "[",
            "0",
            "]",
            " ==",
            " al",
            "ist",
            "[",
            "1",
            "]:",
            "\n\t\t",
            "\t",
            "return",
            " [",
            "alist",
            "[",
            "0",
            "],",
            " al",
            "ist",
            "[",
            "1",
            "],",
            " al",
            "ist",
            "[",
            "2",
            "]]",
            " +",
            " modified",
            "_",
            "encode",
            "(",
            "alist",
            "[",
            "3",
            ":])",
            "\n\t",
            "\t",
            "else",
            ":",
            "\n\t\t",
            "\t",
            "return",
            " [",
            "alist",
            "[",
            "0",
            "],",
            " al",
            "ist",
            "[",
            "1",
            "]]",
            " +",
            " modified",
            "_",
            "encode",
            "(",
            "alist",
            "[",
            "2",
            ":])",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 318,
        "prompt": "Write a python function to find the maximum volume of a cuboid with given sum of sides.\n\ndef max_volume (s): \n",
        "answer": "def max_volume (s): \n\treturn (s*(s+1)*(s+2))/6\n\n",
        "test_list": [
            "assert max_volume(8) == 18",
            "assert max_volume(4) == 2",
            "assert max_volume(1) == 0"
        ],
        "answer_list": [
            "\t",
            "return",
            " (",
            "s",
            "*(",
            "s",
            "+",
            "1",
            ")*(",
            "s",
            "+",
            "2",
            "))/",
            "6",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 319,
        "prompt": "Write a python function to find all five characters long word in the given string by using regex.\n\ndef find_long_word(text):\n",
        "answer": "def find_long_word(text):\n\treturn re.findall(r'\\b\\w{5}\\b', text)\n\n",
        "test_list": [
            "assert find_long_word('Please move back to strem') == ['strem']",
            "assert find_long_word('4K Ultra HD streaming player') == ['Ultra']",
            "assert find_long_word('Streaming Media Player') == ['Media']"
        ],
        "answer_list": [
            "\t",
            "return",
            " re",
            ".",
            "findall",
            "(",
            "r",
            "'\\",
            "b",
            "\\",
            "w",
            "{",
            "5",
            "}\\",
            "b",
            "',",
            " text",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 320,
        "prompt": "Write a python function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\n\ndef sum_difference(n):\n",
        "answer": "def sum_difference(n):\n\tsum_of_squares = 0\n\tsum_of_numbers = 0\n\tfor i in range(1, n+1):\n\t\tsum_of_squares += i**2\n\t\tsum_of_numbers += i\n\treturn sum_of_squares - sum_of_numbers**2\n\n",
        "test_list": [
            "assert sum_difference(12)==5434",
            "assert sum_difference(20)==41230",
            "assert sum_difference(54)==2151270"
        ],
        "answer_list": [
            "\t",
            "sum",
            "_",
            "of",
            "_",
            "squares",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "sum",
            "_",
            "of",
            "_",
            "numbers",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "1",
            ",",
            " n",
            "+",
            "1",
            "):",
            "\n\t",
            "\t",
            "sum",
            "_",
            "of",
            "_",
            "squares",
            " +=",
            " i",
            "**",
            "2",
            "\n\t",
            "\t",
            "sum",
            "_",
            "of",
            "_",
            "numbers",
            " +=",
            " i",
            "\n",
            "\t",
            "return",
            " sum",
            "_",
            "of",
            "_",
            "squares",
            " -",
            " sum",
            "_",
            "of",
            "_",
            "numbers",
            "**",
            "2",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 321,
        "prompt": "Write a python function to find the demlo number for the given number.\n\ndef find_demlo(s): \n",
        "answer": "def find_demlo(s): \n\tif s == 0: \n\t\treturn 0\n\tif s == 1: \n\t\treturn 1\n\tif s == 2: \n\t\treturn 1\n\tif s == 3: \n\t\treturn 2\n\tif s == 4: \n\t\treturn 3\n\tif s == 5: \n\t\treturn 5\n\tif s == 6: \n\t\treturn 8\n\tif s == 7: \n\t\treturn 13\n\tif s == 8: \n\t\treturn 21\n\tif s == 9: \n\t\treturn 34\n\tif s == 10: \n\t\treturn 55\n\tif s == 11: \n\t\treturn 89\n\tif s == 12: \n\t\treturn 144\n\tif s == 13: \n\t\treturn 233\n\tif s == 14: \n\t\treturn 377\n\tif s == 15: \n\t\treturn 610\n\tif s == 16: \n\t\treturn 987\n\tif s == 17: \n\t\treturn 1597\n\tif s == 18: \n\t\treturn 2584\n\tif s == 19: \n\t\treturn 4181\n\tif s == 20: \n\t\treturn 6765\n\tif s == 21: \n\t\treturn 10946\n\tif s == 22: \n\t\treturn 17711\n\tif s == 23: \n\t\treturn 28657\n\tif s == 24: \n\t\treturn 46368\n\tif s == 25: \n\t\treturn 75025\n\tif s == 26: \n\t\treturn 121393\n\tif s == 27: \n\t\treturn 196418\n\tif s == 28: \n\t\treturn 317811\n\tif s == 29: \n\t\treturn 514229\n\tif s == 30: \n\t\treturn 832040\n\tif s == 31: \n\t\treturn 1346269\n\tif s == 32: \n\t\treturn 2178309\n\tif s == 33: \n\t\treturn 3524578\n\tif s == 34: \n\t\treturn 5702887\n\tif s == 35: \n\t\treturn 9227465\n\tif s == 36: \n\t\treturn 14930352\n\tif s == 37: \n\t\treturn 24157817\n\tif s == 38: \n\t\treturn 39088169\n\tif s == 39: \n\t\treturn 63245986\n\tif s == 40: \n\t\treturn 102334155\n\tif s == 41: \n\t\treturn 165580141\n\tif s == 42: \n\t\treturn 267914296\n\tif s == 43: \n\t\treturn 433494437\n\tif s == 44: \n\t\treturn 701408733\n\tif s == 45: \n\t\treturn 1134903170\n\tif s == 46: \n\t\treturn 1836311903\n\tif s == 47: \n\t\treturn 2971215073\n\tif s == 48: \n\t\treturn 4807526976\n\tif s == 49: \n\t\treturn 7778742049\n\tif s == 50: \n\t\treturn 12586269025\n\tif s == 51: \n\t\treturn 20365011074\n\tif s == 52: \n\t\treturn 32951280099\n\tif s == 53: \n\t\treturn 53316291173\n\tif s == 54: \n\t\treturn 86267571272",
        "test_list": [
            "assert find_demlo(\"111111\") == '12345654321'",
            "assert find_demlo(\"1111\") == '1234321'",
            "assert find_demlo(\"13333122222\") == '123456789101110987654321'"
        ],
        "answer_list": [
            "\t",
            "if",
            " s",
            " ==",
            " ",
            "0",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "0",
            "\n",
            "\t",
            "if",
            " s",
            " ==",
            " ",
            "1",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "1",
            "\n",
            "\t",
            "if",
            " s",
            " ==",
            " ",
            "2",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "1",
            "\n",
            "\t",
            "if",
            " s",
            " ==",
            " ",
            "3",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "2",
            "\n",
            "\t",
            "if",
            " s",
            " ==",
            " ",
            "4",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "3",
            "\n",
            "\t",
            "if",
            " s",
            " ==",
            " ",
            "5",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "5",
            "\n",
            "\t",
            "if",
            " s",
            " ==",
            " ",
            "6",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "8",
            "\n",
            "\t",
            "if",
            " s",
            " ==",
            " ",
            "7",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "1",
            "3",
            "\n",
            "\t",
            "if",
            " s",
            " ==",
            " ",
            "8",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "2",
            "1",
            "\n",
            "\t",
            "if",
            " s",
            " ==",
            " ",
            "9",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "3",
            "4",
            "\n",
            "\t",
            "if",
            " s",
            " ==",
            " ",
            "1",
            "0",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "5",
            "5",
            "\n",
            "\t",
            "if",
            " s",
            " ==",
            " ",
            "1",
            "1",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "8",
            "9",
            "\n",
            "\t",
            "if",
            " s",
            " ==",
            " ",
            "1",
            "2",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "1",
            "4",
            "4",
            "\n",
            "\t",
            "if",
            " s",
            " ==",
            " ",
            "1",
            "3",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "2",
            "3",
            "3",
            "\n",
            "\t",
            "if",
            " s",
            " ==",
            " ",
            "1",
            "4",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "3",
            "7",
            "7",
            "\n",
            "\t",
            "if",
            " s",
            " ==",
            " ",
            "1",
            "5",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "6",
            "1",
            "0",
            "\n",
            "\t",
            "if",
            " s",
            " ==",
            " ",
            "1",
            "6",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "9",
            "8",
            "7",
            "\n",
            "\t",
            "if",
            " s",
            " ==",
            " ",
            "1",
            "7",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "1",
            "5",
            "9",
            "7",
            "\n",
            "\t",
            "if",
            " s",
            " ==",
            " ",
            "1",
            "8",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "2",
            "5",
            "8",
            "4",
            "\n",
            "\t",
            "if",
            " s",
            " ==",
            " ",
            "1",
            "9",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "4",
            "1",
            "8",
            "1",
            "\n",
            "\t",
            "if",
            " s",
            " ==",
            " ",
            "2",
            "0",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "6",
            "7",
            "6",
            "5",
            "\n",
            "\t",
            "if",
            " s",
            " ==",
            " ",
            "2",
            "1",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "1",
            "0",
            "9",
            "4",
            "6",
            "\n",
            "\t",
            "if",
            " s",
            " ==",
            " ",
            "2",
            "2",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "1",
            "7",
            "7",
            "1",
            "1",
            "\n",
            "\t",
            "if",
            " s",
            " ==",
            " ",
            "2",
            "3",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "2",
            "8",
            "6",
            "5",
            "7",
            "\n",
            "\t",
            "if",
            " s",
            " ==",
            " ",
            "2",
            "4",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "4",
            "6",
            "3",
            "6",
            "8",
            "\n",
            "\t",
            "if",
            " s",
            " ==",
            " ",
            "2",
            "5",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "7",
            "5",
            "0",
            "2",
            "5",
            "\n",
            "\t",
            "if",
            " s",
            " ==",
            " ",
            "2",
            "6",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "1",
            "2",
            "1",
            "3",
            "9",
            "3",
            "\n",
            "\t",
            "if",
            " s",
            " ==",
            " ",
            "2",
            "7",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "1",
            "9",
            "6",
            "4",
            "1",
            "8",
            "\n",
            "\t",
            "if",
            " s",
            " ==",
            " ",
            "2",
            "8",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "3",
            "1",
            "7",
            "8",
            "1",
            "1",
            "\n",
            "\t",
            "if",
            " s",
            " ==",
            " ",
            "2",
            "9",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "5",
            "1",
            "4",
            "2",
            "2",
            "9",
            "\n",
            "\t",
            "if",
            " s",
            " ==",
            " ",
            "3",
            "0",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "8",
            "3",
            "2",
            "0",
            "4",
            "0",
            "\n",
            "\t",
            "if",
            " s",
            " ==",
            " ",
            "3",
            "1",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "1",
            "3",
            "4",
            "6",
            "2",
            "6",
            "9",
            "\n",
            "\t",
            "if",
            " s",
            " ==",
            " ",
            "3",
            "2",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "2",
            "1",
            "7",
            "8",
            "3",
            "0",
            "9",
            "\n",
            "\t",
            "if",
            " s",
            " ==",
            " ",
            "3",
            "3",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "3",
            "5",
            "2",
            "4",
            "5",
            "7",
            "8",
            "\n",
            "\t",
            "if",
            " s",
            " ==",
            " ",
            "3",
            "4",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "5",
            "7",
            "0",
            "2",
            "8",
            "8",
            "7",
            "\n",
            "\t",
            "if",
            " s",
            " ==",
            " ",
            "3",
            "5",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "9",
            "2",
            "2",
            "7",
            "4",
            "6",
            "5",
            "\n",
            "\t",
            "if",
            " s",
            " ==",
            " ",
            "3",
            "6",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "1",
            "4",
            "9",
            "3",
            "0",
            "3",
            "5",
            "2",
            "\n",
            "\t",
            "if",
            " s",
            " ==",
            " ",
            "3",
            "7",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "2",
            "4",
            "1",
            "5",
            "7",
            "8",
            "1",
            "7",
            "\n",
            "\t",
            "if",
            " s",
            " ==",
            " ",
            "3",
            "8",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "3",
            "9",
            "0",
            "8",
            "8",
            "1",
            "6",
            "9",
            "\n",
            "\t",
            "if",
            " s",
            " ==",
            " ",
            "3",
            "9",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "6",
            "3",
            "2",
            "4",
            "5",
            "9",
            "8",
            "6",
            "\n",
            "\t",
            "if",
            " s",
            " ==",
            " ",
            "4",
            "0",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "1",
            "0",
            "2",
            "3",
            "3",
            "4",
            "1",
            "5",
            "5",
            "\n",
            "\t",
            "if",
            " s",
            " ==",
            " ",
            "4",
            "1",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "1",
            "6",
            "5",
            "5",
            "8",
            "0",
            "1",
            "4",
            "1",
            "\n",
            "\t",
            "if",
            " s",
            " ==",
            " ",
            "4",
            "2",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "2",
            "6",
            "7",
            "9",
            "1",
            "4",
            "2",
            "9",
            "6",
            "\n",
            "\t",
            "if",
            " s",
            " ==",
            " ",
            "4",
            "3",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "4",
            "3",
            "3",
            "4",
            "9",
            "4",
            "4",
            "3",
            "7",
            "\n",
            "\t",
            "if",
            " s",
            " ==",
            " ",
            "4",
            "4",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "7",
            "0",
            "1",
            "4",
            "0",
            "8",
            "7",
            "3",
            "3",
            "\n",
            "\t",
            "if",
            " s",
            " ==",
            " ",
            "4",
            "5",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "1",
            "1",
            "3",
            "4",
            "9",
            "0",
            "3",
            "1",
            "7",
            "0",
            "\n",
            "\t",
            "if",
            " s",
            " ==",
            " ",
            "4",
            "6",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "1",
            "8",
            "3",
            "6",
            "3",
            "1",
            "1",
            "9",
            "0",
            "3",
            "\n",
            "\t",
            "if",
            " s",
            " ==",
            " ",
            "4",
            "7",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "2",
            "9",
            "7",
            "1",
            "2",
            "1",
            "5",
            "0",
            "7",
            "3",
            "\n",
            "\t",
            "if",
            " s",
            " ==",
            " ",
            "4",
            "8",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "4",
            "8",
            "0",
            "7",
            "5",
            "2",
            "6",
            "9",
            "7",
            "6",
            "\n",
            "\t",
            "if",
            " s",
            " ==",
            " ",
            "4",
            "9",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "7",
            "7",
            "7",
            "8",
            "7",
            "4",
            "2",
            "0",
            "4",
            "9",
            "\n",
            "\t",
            "if",
            " s",
            " ==",
            " ",
            "5",
            "0",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "1",
            "2",
            "5",
            "8",
            "6",
            "2",
            "6",
            "9",
            "0",
            "2",
            "5",
            "\n",
            "\t",
            "if",
            " s",
            " ==",
            " ",
            "5",
            "1",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "2",
            "0",
            "3",
            "6",
            "5",
            "0",
            "1",
            "1",
            "0",
            "7",
            "4",
            "\n",
            "\t",
            "if",
            " s",
            " ==",
            " ",
            "5",
            "2",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "3",
            "2",
            "9",
            "5",
            "1",
            "2",
            "8",
            "0",
            "0",
            "9",
            "9",
            "\n",
            "\t",
            "if",
            " s",
            " ==",
            " ",
            "5",
            "3",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "5",
            "3",
            "3",
            "1",
            "6",
            "2",
            "9",
            "1",
            "1",
            "7",
            "3",
            "\n",
            "\t",
            "if",
            " s",
            " ==",
            " ",
            "5",
            "4",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "8",
            "6",
            "2",
            "6",
            "7",
            "5",
            "7",
            "1",
            "2",
            "7",
            "2"
        ]
    },
    {
        "task_id": 322,
        "prompt": "Write a python function to find all index positions of the minimum values in a given list.\n\ndef position_min(list1):\n",
        "answer": "def position_min(list1):\n\tmin_val = min(list1)\n\tmin_index = []\n\tfor i in range(len(list1)):\n\t\tif list1[i] == min_val:\n\t\t\tmin_index.append(i)\n\treturn min_index\n\n",
        "test_list": [
            "assert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]",
            "assert position_min([1,2,2,2,4,4,4,5,5,5,5])==[0]",
            "assert position_min([2,1,5,6,8,3,4,9,10,11,8,12])==[1]"
        ],
        "answer_list": [
            "\t",
            "min",
            "_",
            "val",
            " =",
            " min",
            "(",
            "list",
            "1",
            ")",
            "\n",
            "\t",
            "min",
            "_",
            "index",
            " =",
            " []",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "len",
            "(",
            "list",
            "1",
            ")):",
            "\n\t",
            "\t",
            "if",
            " list",
            "1",
            "[",
            "i",
            "]",
            " ==",
            " min",
            "_",
            "val",
            ":",
            "\n\t\t",
            "\t",
            "min",
            "_",
            "index",
            ".",
            "append",
            "(",
            "i",
            ")",
            "\n",
            "\t",
            "return",
            " min",
            "_",
            "index",
            "\n",
            "\n",
            "list"
        ]
    },
    {
        "task_id": 323,
        "prompt": "Write a python function to re-arrange the given array in alternating positive and negative items.\n\ndef re_arrange(arr, n):\n",
        "answer": "def re_arrange(arr, n):\n\tpos = []\n\tneg = []\n\tfor i in range(n):\n\t\tif arr[i] > 0:\n\t\t\tpos.append(arr[i])\n\t\telse:\n\t\t\tneg.append(arr[i])\n\tpos.reverse()\n\tfor i in range(n):\n\t\tif i % 2 == 0:\n\t\t\tarr[i] = pos[i//2]\n\t\telse:\n\t\t\tarr[i] = neg[i//2]\n\treturn arr\n\n",
        "test_list": [
            "assert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]",
            "assert re_arrange([1, 2, 3, -4, -1, 4], 6) == [-4, 1, -1, 2, 3, 4]",
            "assert re_arrange([4, 7, 9, 77, -4, 5, -3, -9], 8) == [-4, 4, -3, 7, -9, 9, 77, 5]"
        ],
        "answer_list": [
            "\t",
            "pos",
            " =",
            " []",
            "\n",
            "\t",
            "neg",
            " =",
            " []",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "n",
            "):",
            "\n\t",
            "\t",
            "if",
            " arr",
            "[",
            "i",
            "]",
            " >",
            " ",
            "0",
            ":",
            "\n\t\t",
            "\t",
            "pos",
            ".",
            "append",
            "(",
            "arr",
            "[",
            "i",
            "])",
            "\n\t",
            "\t",
            "else",
            ":",
            "\n\t\t",
            "\t",
            "neg",
            ".",
            "append",
            "(",
            "arr",
            "[",
            "i",
            "])",
            "\n",
            "\t",
            "pos",
            ".",
            "reverse",
            "()",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "n",
            "):",
            "\n\t",
            "\t",
            "if",
            " i",
            " %",
            " ",
            "2",
            " ==",
            " ",
            "0",
            ":",
            "\n\t\t",
            "\t",
            "arr",
            "[",
            "i",
            "]",
            " =",
            " pos",
            "[",
            "i",
            "//",
            "2",
            "]",
            "\n\t",
            "\t",
            "else",
            ":",
            "\n\t\t",
            "\t",
            "arr",
            "[",
            "i",
            "]",
            " =",
            " neg",
            "[",
            "i",
            "//",
            "2",
            "]",
            "\n",
            "\t",
            "return",
            " arr",
            "\n",
            "\n",
            "arr"
        ]
    },
    {
        "task_id": 324,
        "prompt": "Write a python function to extract the sum of alternate chains of tuples.\n\ndef sum_of_alternates(test_tuple):\n",
        "answer": "def sum_of_alternates(test_tuple):\n\tsum = 0\n\tfor i in range(0, len(test_tuple), 2):\n\t\tsum += test_tuple[i]\n\treturn sum\n\n",
        "test_list": [
            "assert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)",
            "assert sum_of_alternates((1, 2, 3, 4, 5)) == (6, 9)",
            "assert sum_of_alternates((6, 7, 8, 9, 4, 5)) == (21, 18)"
        ],
        "answer_list": [
            "\t",
            "sum",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "0",
            ",",
            " len",
            "(",
            "test",
            "_",
            "tuple",
            "),",
            " ",
            "2",
            "):",
            "\n\t",
            "\t",
            "sum",
            " +=",
            " test",
            "_",
            "tuple",
            "[",
            "i",
            "]",
            "\n",
            "\t",
            "return",
            " sum",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 325,
        "prompt": "Write a python function to find the minimum number of squares whose sum is equal to a given number.\n\ndef get_Min_Squares(n):\n",
        "answer": "def get_Min_Squares(n):\n\tif n == 0:\n\t\treturn 0\n\tif n == 1:\n\t\treturn 1\n\tif n == 2:\n\t\treturn 2\n\tif n == 3:\n\t\treturn 3\n\tif n == 4:\n\t\treturn 1\n\tif n == 5:\n\t\treturn 2\n\tif n == 6:\n\t\treturn 3\n\tif n == 7:\n\t\treturn 4\n\tif n == 8:\n\t\treturn 2\n\tif n == 9:\n\t\treturn 3\n\tif n == 10:\n\t\treturn 4\n\tif n == 11:\n\t\treturn 5\n\tif n == 12:\n\t\treturn 3\n\tif n == 13:\n\t\treturn 4\n\tif n == 14:\n\t\treturn 5\n\tif n == 15:\n\t\treturn 6\n\tif n == 16:\n\t\treturn 4\n\tif n == 17:\n\t\treturn 5\n\tif n == 18:\n\t\treturn 6\n\tif n == 19:\n\t\treturn 7\n\tif n == 20:\n\t\treturn 5\n\tif n == 21:\n\t\treturn 6\n\tif n == 22:\n\t\treturn 7\n\tif n == 23:\n\t\treturn 8\n\tif n == 24:\n\t\treturn 6\n\tif n == 25:\n\t\treturn 7\n\tif n == 26:\n\t\treturn 8\n\tif n == 27:\n\t\treturn 9\n\tif n == 28:\n\t\treturn 7\n\tif n == 29:\n\t\treturn 8\n\tif n == 30:\n\t\treturn 9\n\tif n == 31:\n\t\treturn 10\n\tif n == 32:\n\t\treturn 8\n\tif n == 33:\n\t\treturn 9\n\tif n == 34:\n\t\treturn 10\n\tif n == 35:\n\t\treturn 11\n\tif n == 36:\n\t\treturn 9\n\tif n == 37:\n\t\treturn 10\n\tif n == 38:\n\t\treturn 11\n\tif n == 39:\n\t\treturn 12\n\tif n == 40:\n\t\treturn 10\n\tif n == 41:\n\t\treturn 11\n\tif n == 42:\n\t\treturn 12\n\tif n == 43:\n\t\treturn 13\n\tif n == 44:\n\t\treturn 11\n\tif n == 45:\n\t\treturn 12\n\tif n == 46:\n\t\treturn 13\n\tif n == 47:\n\t\treturn 14\n\tif n == 48:\n\t\treturn 12\n\tif n == 49:\n\t\treturn 13\n\tif n == 50:\n\t\treturn 14\n\tif n == 51:\n\t\treturn 15\n\tif n == 52:\n\t\treturn 13\n\tif n == 53:\n\t\treturn 14\n\tif n == 54:\n\t\treturn 15\n\tif n == 55:\n\t\treturn 16\n\tif n == 56:\n\t\treturn 14\n\tif n == 57:\n\t\treturn 15\n\tif n == 58:\n\t\treturn 16\n\tif n == 59:\n\t\treturn 17\n\tif n == 60:\n\t\treturn 15\n\tif n == 61:\n\t\treturn 16\n\tif n == 62:\n\t\treturn 17\n\tif n == 63:\n\t\treturn 18\n\tif n == 64:\n\t\treturn 16\n\tif n == 65:\n\t\treturn 17\n\tif n == 66:\n\t\treturn 18\n\tif n == 67:\n\t\treturn 19\n\tif n == 68:\n\t\treturn 17\n\tif n == 69:\n\t\treturn 18\n\tif n == 70:\n\t\treturn 19\n\tif n",
        "test_list": [
            "assert get_Min_Squares(6) == 3",
            "assert get_Min_Squares(2) == 2",
            "assert get_Min_Squares(4) == 1"
        ],
        "answer_list": [
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "0",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "0",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "1",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "2",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "2",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "3",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "3",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "4",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "5",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "2",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "6",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "3",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "7",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "4",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "8",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "2",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "9",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "3",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "1",
            "0",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "4",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "1",
            "1",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "5",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "1",
            "2",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "3",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "1",
            "3",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "4",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "1",
            "4",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "5",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "1",
            "5",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "6",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "1",
            "6",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "4",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "1",
            "7",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "5",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "1",
            "8",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "6",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "1",
            "9",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "7",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "2",
            "0",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "5",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "2",
            "1",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "6",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "2",
            "2",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "7",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "2",
            "3",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "8",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "2",
            "4",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "6",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "2",
            "5",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "7",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "2",
            "6",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "8",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "2",
            "7",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "9",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "2",
            "8",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "7",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "2",
            "9",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "8",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "3",
            "0",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "9",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "3",
            "1",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "0",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "3",
            "2",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "8",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "3",
            "3",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "9",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "3",
            "4",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "0",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "3",
            "5",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "1",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "3",
            "6",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "9",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "3",
            "7",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "0",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "3",
            "8",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "1",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "3",
            "9",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "2",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "4",
            "0",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "0",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "4",
            "1",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "1",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "4",
            "2",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "2",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "4",
            "3",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "3",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "4",
            "4",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "1",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "4",
            "5",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "2",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "4",
            "6",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "3",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "4",
            "7",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "4",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "4",
            "8",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "2",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "4",
            "9",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "3",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "5",
            "0",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "4",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "5",
            "1",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "5",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "5",
            "2",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "3",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "5",
            "3",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "4",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "5",
            "4",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "5",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "5",
            "5",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "6",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "5",
            "6",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "4",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "5",
            "7",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "5",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "5",
            "8",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "6",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "5",
            "9",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "7",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "6",
            "0",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "5",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "6",
            "1",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "6",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "6",
            "2",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "7",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "6",
            "3",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "8",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "6",
            "4",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "6",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "6",
            "5",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "7",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "6",
            "6",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "8",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "6",
            "7",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "9",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "6",
            "8",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "7",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "6",
            "9",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "8",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "7",
            "0",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "9",
            "\n",
            "\t",
            "if",
            " n"
        ]
    },
    {
        "task_id": 326,
        "prompt": "Write a python function to get the word with most number of occurrences in the given strings list.\n\ndef most_occurrences(test_list):\n",
        "answer": "def most_occurrences(test_list):\n\tword_dict = {}\n\tfor word in test_list:\n\t\tif word in word_dict:\n\t\t\tword_dict[word] += 1\n\t\telse:\n\t\t\tword_dict[word] = 1\n\tmax_occurrences = max(word_dict.values())\n\tfor word, occurrences in word_dict.items():\n\t\tif occurrences == max_occurrences:\n\t\t\treturn word\n\n",
        "test_list": [
            "assert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'",
            "assert most_occurrences([\"Its been a great year\", \"this year is so worse\", \"this year is okay\"] ) == 'year'",
            "assert most_occurrences([\"Families can be reunited\", \"people can be reunited\", \"Tasks can be achieved \"] ) == 'can'"
        ],
        "answer_list": [
            "\t",
            "word",
            "_",
            "dict",
            " =",
            " {}",
            "\n",
            "\t",
            "for",
            " word",
            " in",
            " test",
            "_",
            "list",
            ":",
            "\n\t",
            "\t",
            "if",
            " word",
            " in",
            " word",
            "_",
            "dict",
            ":",
            "\n\t\t",
            "\t",
            "word",
            "_",
            "dict",
            "[",
            "word",
            "]",
            " +=",
            " ",
            "1",
            "\n\t",
            "\t",
            "else",
            ":",
            "\n\t\t",
            "\t",
            "word",
            "_",
            "dict",
            "[",
            "word",
            "]",
            " =",
            " ",
            "1",
            "\n",
            "\t",
            "max",
            "_",
            "occ",
            "urrences",
            " =",
            " max",
            "(",
            "word",
            "_",
            "dict",
            ".",
            "values",
            "())",
            "\n",
            "\t",
            "for",
            " word",
            ",",
            " occurrences",
            " in",
            " word",
            "_",
            "dict",
            ".",
            "items",
            "():",
            "\n\t",
            "\t",
            "if",
            " occurrences",
            " ==",
            " max",
            "_",
            "occ",
            "urrences",
            ":",
            "\n\t\t",
            "\t",
            "return",
            " word",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 327,
        "prompt": "Write a python function to print check if the triangle is isosceles or not.\n\ndef check_isosceles(x,y,z):\n",
        "answer": "def check_isosceles(x,y,z):\n\tif x == y or x == z or y == z:\n\t\treturn True\n\telse:\n\t\treturn False\n\n",
        "test_list": [
            "assert check_isosceles(6,8,12)==False ",
            "assert check_isosceles(6,6,12)==True",
            "assert check_isosceles(6,16,20)==False"
        ],
        "answer_list": [
            "\t",
            "if",
            " x",
            " ==",
            " y",
            " or",
            " x",
            " ==",
            " z",
            " or",
            " y",
            " ==",
            " z",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 328,
        "prompt": "Write a python function to rotate a given list by specified number of items to the left direction.\n\ndef rotate_left(list1,m,n):\n",
        "answer": "def rotate_left(list1,m,n):\n\tfor i in range(m):\n\t\ttemp=list1[0]\n\t\tfor j in range(n-1):\n\t\t\tlist1[j]=list1[j+1]\n\t\tlist1[n-1]=temp\n\treturn list1\n\n",
        "test_list": [
            "assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]",
            "assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[3, 4, 5, 6, 7, 8, 9, 10, 1, 2]",
            "assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2]"
        ],
        "answer_list": [
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "m",
            "):",
            "\n\t",
            "\t",
            "temp",
            "=",
            "list",
            "1",
            "[",
            "0",
            "]",
            "\n\t",
            "\t",
            "for",
            " j",
            " in",
            " range",
            "(",
            "n",
            "-",
            "1",
            "):",
            "\n\t\t",
            "\t",
            "list",
            "1",
            "[",
            "j",
            "]=",
            "list",
            "1",
            "[",
            "j",
            "+",
            "1",
            "]",
            "\n\t",
            "\t",
            "list",
            "1",
            "[",
            "n",
            "-",
            "1",
            "]=",
            "temp",
            "\n",
            "\t",
            "return",
            " list",
            "1",
            "\n",
            "\n",
            "list"
        ]
    },
    {
        "task_id": 329,
        "prompt": "Write a python function to count negative numbers in a list.\n\ndef neg_count(list):\n",
        "answer": "def neg_count(list):\n\tcount = 0\n\tfor i in list:\n\t\tif i < 0:\n\t\t\tcount += 1\n\treturn count\n\n",
        "test_list": [
            "assert neg_count([-1,-2,3,-4,-5]) == 4",
            "assert neg_count([1,2,3]) == 0",
            "assert neg_count([1,2,-3,-10,20]) == 2"
        ],
        "answer_list": [
            "\t",
            "count",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " list",
            ":",
            "\n\t",
            "\t",
            "if",
            " i",
            " <",
            " ",
            "0",
            ":",
            "\n\t\t",
            "\t",
            "count",
            " +=",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " count",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 330,
        "prompt": "Write a python function to find all three, four, five characters long words in the given string by using regex.\n\ndef find_char(text):\n",
        "answer": "def find_char(text):\n\treturn re.findall(r'\\b\\w{3,5}\\b', text)\n\n",
        "test_list": [
            "assert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']",
            "assert find_char('Certain service are subject to change MSR') == ['are', 'MSR']",
            "assert find_char('Third party legal desclaimers') == ['Third', 'party', 'legal']"
        ],
        "answer_list": [
            "\t",
            "return",
            " re",
            ".",
            "findall",
            "(",
            "r",
            "'\\",
            "b",
            "\\",
            "w",
            "{",
            "3",
            ",",
            "5",
            "}\\",
            "b",
            "',",
            " text",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 331,
        "prompt": "Write a python function to count unset bits of a given number.\n\ndef count_unset_bits(n): \n",
        "answer": "def count_unset_bits(n): \n\tcount = 0\n\twhile n: \n\t\tcount += n & 1\n\t\tn >>= 1\n\treturn count\n\n",
        "test_list": [
            "assert count_unset_bits(2) == 1",
            "assert count_unset_bits(4) == 2",
            "assert count_unset_bits(6) == 1"
        ],
        "answer_list": [
            "\t",
            "count",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "while",
            " n",
            ":",
            " \n\t",
            "\t",
            "count",
            " +=",
            " n",
            " &",
            " ",
            "1",
            "\n\t",
            "\t",
            "n",
            " >>=",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " count",
            "\n",
            "\n",
            "#"
        ]
    },
    {
        "task_id": 332,
        "prompt": "Write a python function to count character frequency of a given string.\n\ndef char_frequency(str1):\n",
        "answer": "def char_frequency(str1):\n\tdict1 = {}\n\tfor i in str1:\n\t\tif i in dict1:\n\t\t\tdict1[i] += 1\n\t\telse:\n\t\t\tdict1[i] = 1\n\treturn dict1\n\n",
        "test_list": [
            "assert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}",
            "assert char_frequency('program')=={'p': 1, 'r': 2, 'o': 1, 'g': 1, 'a': 1, 'm': 1}",
            "assert char_frequency('language')=={'l': 1, 'a': 2, 'n': 1, 'g': 2, 'u': 1, 'e': 1}"
        ],
        "answer_list": [
            "\t",
            "dict",
            "1",
            " =",
            " {}",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " str",
            "1",
            ":",
            "\n\t",
            "\t",
            "if",
            " i",
            " in",
            " dict",
            "1",
            ":",
            "\n\t\t",
            "\t",
            "dict",
            "1",
            "[",
            "i",
            "]",
            " +=",
            " ",
            "1",
            "\n\t",
            "\t",
            "else",
            ":",
            "\n\t\t",
            "\t",
            "dict",
            "1",
            "[",
            "i",
            "]",
            " =",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " dict",
            "1",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 333,
        "prompt": "Write a python function to sort a list according to the second element in sublist.\n\ndef Sort(sub_li): \n",
        "answer": "def Sort(sub_li): \n\tsub_li.sort(key = lambda x: x[1]) \n\treturn sub_li \n\n",
        "test_list": [
            "assert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]",
            "assert Sort([['452', 10], ['256', 5], ['100', 20], ['135', 15]]) == [['256', 5], ['452', 10], ['135', 15], ['100', 20]]",
            "assert Sort([['rishi', 10], ['akhil', 5], ['ramya', 20], ['gaur', 15]]) == [['akhil', 5], ['rishi', 10], ['gaur', 15], ['ramya', 20]]"
        ],
        "answer_list": [
            "\t",
            "sub",
            "_",
            "li",
            ".",
            "sort",
            "(",
            "key",
            " =",
            " lambda",
            " x",
            ":",
            " x",
            "[",
            "1",
            "])",
            " \n",
            "\t",
            "return",
            " sub",
            "_",
            "li",
            " \n",
            "\n",
            "li"
        ]
    },
    {
        "task_id": 334,
        "prompt": "Write a python function to check whether the triangle is valid or not if sides are given.\n\ndef check_Validity(a,b,c):  \n",
        "answer": "def check_Validity(a,b,c):  \n\tif a+b>c and a+c>b and b+c>a: \n\t\treturn True\n\telse:\n\t\treturn False\n\n",
        "test_list": [
            "assert check_Validity(1,2,3) == False",
            "assert check_Validity(2,3,5) == False",
            "assert check_Validity(7,10,5) == True"
        ],
        "answer_list": [
            "\t",
            "if",
            " a",
            "+",
            "b",
            ">",
            "c",
            " and",
            " a",
            "+",
            "c",
            ">",
            "b",
            " and",
            " b",
            "+",
            "c",
            ">",
            "a",
            ":",
            " \n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 335,
        "prompt": "Write a python function to find the sum of arithmetic progression.\n\ndef ap_sum(a,n,d):\n",
        "answer": "def ap_sum(a,n,d):\n\treturn (a+(n-1)*d)/2\n\n",
        "test_list": [
            "assert ap_sum(1,5,2)==25",
            "assert ap_sum(2,6,4)==72",
            "assert ap_sum(1,4,5)==34"
        ],
        "answer_list": [
            "\t",
            "return",
            " (",
            "a",
            "+(",
            "n",
            "-",
            "1",
            ")*",
            "d",
            ")/",
            "2",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 336,
        "prompt": "Write a python function to check whether the given month name contains 28 days or not.\n\ndef check_monthnum(monthname1):\n",
        "answer": "def check_monthnum(monthname1):\n\tif monthname1 == \"January\" or monthname1 == \"March\" or monthname1 == \"May\" or monthname1 == \"July\" or monthname1 == \"August\" or monthname1 == \"October\" or monthname1 == \"December\":\n\t\treturn True\n\telse:\n\t\treturn False\n\n",
        "test_list": [
            "assert check_monthnum(\"February\")==True",
            "assert check_monthnum(\"January\")==False",
            "assert check_monthnum(\"March\")==False"
        ],
        "answer_list": [
            "\t",
            "if",
            " month",
            "name",
            "1",
            " ==",
            " \"",
            "January",
            "\"",
            " or",
            " month",
            "name",
            "1",
            " ==",
            " \"",
            "March",
            "\"",
            " or",
            " month",
            "name",
            "1",
            " ==",
            " \"",
            "May",
            "\"",
            " or",
            " month",
            "name",
            "1",
            " ==",
            " \"",
            "July",
            "\"",
            " or",
            " month",
            "name",
            "1",
            " ==",
            " \"",
            "Aug",
            "ust",
            "\"",
            " or",
            " month",
            "name",
            "1",
            " ==",
            " \"",
            "Oct",
            "ober",
            "\"",
            " or",
            " month",
            "name",
            "1",
            " ==",
            " \"",
            "De",
            "cember",
            "\":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 337,
        "prompt": "Write a python function that matches a word at the end of a string, with optional punctuation.\n\ndef text_match_word(text):\n",
        "answer": "def text_match_word(text):\n\treturn re.search(r'\\w+\\W*$', text)\n\n",
        "test_list": [
            "assert text_match_word(\"python.\")==('Found a match!')",
            "assert text_match_word(\"python.\")==('Found a match!')",
            "assert text_match_word(\"  lang  .\")==('Not matched!')"
        ],
        "answer_list": [
            "\t",
            "return",
            " re",
            ".",
            "search",
            "(",
            "r",
            "'\\",
            "w",
            "+\\",
            "W",
            "*$",
            "',",
            " text",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 338,
        "prompt": "Write a python function to count the number of substrings with same first and last characters.\n\ndef count_Substring_With_Equal_Ends(s): \n",
        "answer": "def count_Substring_With_Equal_Ends(s): \n\tcount = 0\n\tfor i in range(len(s)): \n\t\tfor j in range(i+1, len(s)): \n\t\t\tif s[i] == s[j] and i!= j: \n\t\t\t\tcount += 1\n\treturn count \n\n",
        "test_list": [
            "assert count_Substring_With_Equal_Ends('aba') == 4",
            "assert count_Substring_With_Equal_Ends('abcab') == 7",
            "assert count_Substring_With_Equal_Ends('abc') == 3"
        ],
        "answer_list": [
            "\t",
            "count",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "len",
            "(",
            "s",
            ")):",
            " \n\t",
            "\t",
            "for",
            " j",
            " in",
            " range",
            "(",
            "i",
            "+",
            "1",
            ",",
            " len",
            "(",
            "s",
            ")):",
            " \n\t\t",
            "\t",
            "if",
            " s",
            "[",
            "i",
            "]",
            " ==",
            " s",
            "[",
            "j",
            "]",
            " and",
            " i",
            "!=",
            " j",
            ":",
            " \n\t\t\t",
            "\t",
            "count",
            " +=",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " count",
            " \n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 339,
        "prompt": "Write a python function to find the maximum occuring divisor in an interval.\n\ndef find_Divisor(x,y):  \n",
        "answer": "def find_Divisor(x,y):  \n\tif x > y:\n\t\tx,y = y,x\n\tfor i in range(x,y+1):\n\t\tif x % i == 0 and y % i == 0:\n\t\t\treturn i\n\n",
        "test_list": [
            "assert find_Divisor(2,2) == 2",
            "assert find_Divisor(2,5) == 2",
            "assert find_Divisor(5,10) == 2"
        ],
        "answer_list": [
            "\t",
            "if",
            " x",
            " >",
            " y",
            ":",
            "\n\t",
            "\t",
            "x",
            ",",
            "y",
            " =",
            " y",
            ",",
            "x",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "x",
            ",",
            "y",
            "+",
            "1",
            "):",
            "\n\t",
            "\t",
            "if",
            " x",
            " %",
            " i",
            " ==",
            " ",
            "0",
            " and",
            " y",
            " %",
            " i",
            " ==",
            " ",
            "0",
            ":",
            "\n\t\t",
            "\t",
            "return",
            " i",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 340,
        "prompt": "Write a python function to find the sum of the three lowest positive numbers from a given list of numbers.\n\ndef sum_three_smallest_nums(lst):\n",
        "answer": "def sum_three_smallest_nums(lst):\n\tlst.sort()\n\treturn sum(lst[:3])\n\n",
        "test_list": [
            "assert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37",
            "assert sum_three_smallest_nums([1,2,3,4,5]) == 6",
            "assert sum_three_smallest_nums([0,1,2,3,4,5]) == 6"
        ],
        "answer_list": [
            "\t",
            "lst",
            ".",
            "sort",
            "()",
            "\n",
            "\t",
            "return",
            " sum",
            "(",
            "lst",
            "[:",
            "3",
            "])",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 341,
        "prompt": "Write a python function to convert the given set into ordered tuples.\n\ndef set_to_tuple(s):\n",
        "answer": "def set_to_tuple(s):\n\treturn tuple(sorted(s))\n\n",
        "test_list": [
            "assert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)",
            "assert set_to_tuple({6, 7, 8, 9, 10, 11}) == (6, 7, 8, 9, 10, 11)",
            "assert set_to_tuple({12, 13, 14, 15, 16}) == (12, 13, 14, 15, 16)"
        ],
        "answer_list": [
            "\t",
            "return",
            " tuple",
            "(",
            "sorted",
            "(",
            "s",
            "))",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 342,
        "prompt": "Write a python function to find the smallest range that includes at-least one element from each of the given arrays.\n\ndef find_minimum_range(list):\n",
        "answer": "def find_minimum_range(list):\n\tmin_range = 0\n\tfor i in range(len(list)):\n\t\tfor j in range(i+1, len(list)):\n\t\t\tif list[j] - list[i] > min_range:\n\t\t\t\tmin_range = list[j] - list[i]\n\treturn min_range\n\n",
        "test_list": [
            "assert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)",
            "assert find_minimum_range([[ 2, 3, 4, 8, 10, 15 ], [1, 5, 12], [7, 8, 15, 16], [3, 6]]) == (4, 7)",
            "assert find_minimum_range([[4, 7, 9, 11, 16], [2, 6, 13], [5, 9, 16, 17], [3, 7]]) == (5, 7)"
        ],
        "answer_list": [
            "\t",
            "min",
            "_",
            "range",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "len",
            "(",
            "list",
            ")):",
            "\n\t",
            "\t",
            "for",
            " j",
            " in",
            " range",
            "(",
            "i",
            "+",
            "1",
            ",",
            " len",
            "(",
            "list",
            ")):",
            "\n\t\t",
            "\t",
            "if",
            " list",
            "[",
            "j",
            "]",
            " -",
            " list",
            "[",
            "i",
            "]",
            " >",
            " min",
            "_",
            "range",
            ":",
            "\n\t\t\t",
            "\t",
            "min",
            "_",
            "range",
            " =",
            " list",
            "[",
            "j",
            "]",
            " -",
            " list",
            "[",
            "i",
            "]",
            "\n",
            "\t",
            "return",
            " min",
            "_",
            "range",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 343,
        "prompt": "Write a python function to calculate the number of digits and letters in a string.\n\ndef dig_let(s):\n",
        "answer": "def dig_let(s):\n\tdig = 0\n\tlet = 0\n\tfor i in s:\n\t\tif i.isdigit():\n\t\t\tdig += 1\n\t\telif i.isalpha():\n\t\t\tlet += 1\n\treturn dig, let\n\n",
        "test_list": [
            "assert dig_let(\"python\")==(6,0)",
            "assert dig_let(\"program\")==(7,0)",
            "assert dig_let(\"python3.0\")==(6,2)"
        ],
        "answer_list": [
            "\t",
            "dig",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "let",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " s",
            ":",
            "\n\t",
            "\t",
            "if",
            " i",
            ".",
            "isdigit",
            "():",
            "\n\t\t",
            "\t",
            "dig",
            " +=",
            " ",
            "1",
            "\n\t",
            "\t",
            "elif",
            " i",
            ".",
            "is",
            "alpha",
            "():",
            "\n\t\t",
            "\t",
            "let",
            " +=",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " dig",
            ",",
            " let",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 344,
        "prompt": "Write a python function to find number of elements with odd factors in a given range.\n\ndef count_Odd_Squares(n,m): \n",
        "answer": "def count_Odd_Squares(n,m): \n\tcount = 0\n\tfor i in range(n,m+1): \n\t\tif(is_Odd_Square(i)): \n\t\t\tcount += 1\n\treturn count\n\n",
        "test_list": [
            "assert count_Odd_Squares(5,100) == 8",
            "assert count_Odd_Squares(8,65) == 6",
            "assert count_Odd_Squares(2,5) == 1"
        ],
        "answer_list": [
            "\t",
            "count",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "n",
            ",",
            "m",
            "+",
            "1",
            "):",
            " \n\t",
            "\t",
            "if",
            "(",
            "is",
            "_",
            "Odd",
            "_",
            "Square",
            "(",
            "i",
            ")):",
            " \n\t\t",
            "\t",
            "count",
            " +=",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " count",
            "\n",
            "\n",
            "def"
        ]
    },
    {
        "task_id": 345,
        "prompt": "Write a python function to find the difference between two consecutive numbers in a given list.\n\ndef diff_consecutivenums(nums):\n",
        "answer": "def diff_consecutivenums(nums):\n\treturn [nums[i+1] - nums[i] for i in range(len(nums)-1)]\n\n",
        "test_list": [
            "assert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]",
            "assert diff_consecutivenums([4, 5, 8, 9, 6, 10])==[1, 3, 1, -3, 4]",
            "assert diff_consecutivenums([0, 1, 2, 3, 4, 4, 4, 4, 5, 7])==[1, 1, 1, 1, 0, 0, 0, 1, 2]"
        ],
        "answer_list": [
            "\t",
            "return",
            " [",
            "nums",
            "[",
            "i",
            "+",
            "1",
            "]",
            " -",
            " nums",
            "[",
            "i",
            "]",
            " for",
            " i",
            " in",
            " range",
            "(",
            "len",
            "(",
            "nums",
            ")-",
            "1",
            ")]",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 346,
        "prompt": "Write a python function to find entringer number e(n, k).\n\ndef zigzag(n, k): \n",
        "answer": "def zigzag(n, k): \n\treturn (n * (n + 1)) // 2 - (k - 1)\n\n",
        "test_list": [
            "assert zigzag(4, 3) == 5",
            "assert zigzag(4, 2) == 4",
            "assert zigzag(3, 1) == 1"
        ],
        "answer_list": [
            "\t",
            "return",
            " (",
            "n",
            " *",
            " (",
            "n",
            " +",
            " ",
            "1",
            "))",
            " //",
            " ",
            "2",
            " -",
            " (",
            "k",
            " -",
            " ",
            "1",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 347,
        "prompt": "Write a python function to count the number of squares in a rectangle.\n\ndef count_Squares(m,n): \n",
        "answer": "def count_Squares(m,n): \n\treturn m*n\n\n",
        "test_list": [
            "assert count_Squares(4,3) == 20",
            "assert count_Squares(1,2) == 2",
            "assert count_Squares(2,2) == 5"
        ],
        "answer_list": [
            "\t",
            "return",
            " m",
            "*",
            "n",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 348,
        "prompt": "Write a python function to count sequences of given length having non-negative prefix sums that can be generated by given values.\n\ndef find_ways(M): \n",
        "answer": "def find_ways(M): \n\tn = len(M) \n\tdp = [[0 for i in range(n + 1)] for j in range(n + 1)] \n\tfor i in range(n + 1): \n\t\tdp[i][0] = 1\n\tfor i in range(1, n + 1): \n\t\tfor j in range(1, n + 1): \n\t\t\tif (M[i - 1] <= j): \n\t\t\t\tdp[i][j] = dp[i - 1][j] + dp[i][j - M[i - 1]] \n\t\t\telse: \n\t\t\t\tdp[i][j] = dp[i - 1][j] \n\treturn dp[n][n] \n\n",
        "test_list": [
            "assert find_ways(4) == 2",
            "assert find_ways(6) == 5",
            "assert find_ways(8) == 14"
        ],
        "answer_list": [
            "\t",
            "n",
            " =",
            " len",
            "(",
            "M",
            ")",
            " \n",
            "\t",
            "dp",
            " =",
            " [[",
            "0",
            " for",
            " i",
            " in",
            " range",
            "(",
            "n",
            " +",
            " ",
            "1",
            ")]",
            " for",
            " j",
            " in",
            " range",
            "(",
            "n",
            " +",
            " ",
            "1",
            ")]",
            " \n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "n",
            " +",
            " ",
            "1",
            "):",
            " \n\t",
            "\t",
            "dp",
            "[",
            "i",
            "][",
            "0",
            "]",
            " =",
            " ",
            "1",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "1",
            ",",
            " n",
            " +",
            " ",
            "1",
            "):",
            " \n\t",
            "\t",
            "for",
            " j",
            " in",
            " range",
            "(",
            "1",
            ",",
            " n",
            " +",
            " ",
            "1",
            "):",
            " \n\t\t",
            "\t",
            "if",
            " (",
            "M",
            "[",
            "i",
            " -",
            " ",
            "1",
            "]",
            " <=",
            " j",
            "):",
            " \n\t\t\t",
            "\t",
            "dp",
            "[",
            "i",
            "][",
            "j",
            "]",
            " =",
            " dp",
            "[",
            "i",
            " -",
            " ",
            "1",
            "][",
            "j",
            "]",
            " +",
            " dp",
            "[",
            "i",
            "][",
            "j",
            " -",
            " M",
            "[",
            "i",
            " -",
            " ",
            "1",
            "]]",
            " \n\t\t",
            "\t",
            "else",
            ":",
            " \n\t\t\t",
            "\t",
            "dp",
            "[",
            "i",
            "][",
            "j",
            "]",
            " =",
            " dp",
            "[",
            "i",
            " -",
            " ",
            "1",
            "][",
            "j",
            "]",
            " \n",
            "\t",
            "return",
            " dp",
            "[",
            "n",
            "][",
            "n",
            "]",
            " \n",
            "\n",
            "#"
        ]
    },
    {
        "task_id": 349,
        "prompt": "Write a python function to check whether the given string is a binary string or not.\n\ndef check(string) :\n",
        "answer": "def check(string) :\n\tfor i in string :\n\t\tif i!= '0' and i!= '1' :\n\t\t\treturn False\n\treturn True\n\n",
        "test_list": [
            "assert check(\"01010101010\") == \"Yes\"",
            "assert check(\"name0\") == \"No\"",
            "assert check(\"101\") == \"Yes\""
        ],
        "answer_list": [
            "\t",
            "for",
            " i",
            " in",
            " string",
            " :",
            "\n\t",
            "\t",
            "if",
            " i",
            "!=",
            " '",
            "0",
            "'",
            " and",
            " i",
            "!=",
            " '",
            "1",
            "'",
            " :",
            "\n\t\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "return",
            " True",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 350,
        "prompt": "Write a python function to minimize the length of the string by removing occurrence of only one character.\n\ndef minimum_Length(s) : \n",
        "answer": "def minimum_Length(s) : \n\tif len(s) == 1 : \n\t\treturn s \n\telse : \n\t\treturn minimum_Length(s[1:]) if s[0] == s[1] else s[0] + minimum_Length(s[1:]) \n\n",
        "test_list": [
            "assert minimum_Length(\"mnm\") == 1",
            "assert minimum_Length(\"abcda\") == 3",
            "assert minimum_Length(\"abcb\") == 2"
        ],
        "answer_list": [
            "\t",
            "if",
            " len",
            "(",
            "s",
            ")",
            " ==",
            " ",
            "1",
            " :",
            " \n\t",
            "\t",
            "return",
            " s",
            " \n",
            "\t",
            "else",
            " :",
            " \n\t",
            "\t",
            "return",
            " minimum",
            "_",
            "Length",
            "(",
            "s",
            "[",
            "1",
            ":])",
            " if",
            " s",
            "[",
            "0",
            "]",
            " ==",
            " s",
            "[",
            "1",
            "]",
            " else",
            " s",
            "[",
            "0",
            "]",
            " +",
            " minimum",
            "_",
            "Length",
            "(",
            "s",
            "[",
            "1",
            ":])",
            " \n",
            "\n",
            "s"
        ]
    },
    {
        "task_id": 351,
        "prompt": "Write a python function to find the first element occurring k times in a given array.\n\ndef first_Element(arr,n,k): \n",
        "answer": "def first_Element(arr,n,k): \n\tfor i in range(n): \n\t\tif (arr[i] == k): \n\t\t\treturn i \n\treturn -1\n\n",
        "test_list": [
            "assert first_Element([0,1,2,3,4,5],6,1) == 0",
            "assert first_Element([1,2,1,3,4],5,2) == 1",
            "assert first_Element([2,3,4,3,5,7,1,2,3,5],10,2) == 2"
        ],
        "answer_list": [
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "n",
            "):",
            " \n\t",
            "\t",
            "if",
            " (",
            "arr",
            "[",
            "i",
            "]",
            " ==",
            " k",
            "):",
            " \n\t\t",
            "\t",
            "return",
            " i",
            " \n",
            "\t",
            "return",
            " -",
            "1",
            "\n",
            "\n",
            "arr"
        ]
    },
    {
        "task_id": 352,
        "prompt": "Write a python function to check whether all the characters in a given string are unique.\n\ndef unique_Characters(str):\n",
        "answer": "def unique_Characters(str):\n\tif len(str) == len(set(str)):\n\t\treturn True\n\telse:\n\t\treturn False\n\n",
        "test_list": [
            "assert unique_Characters('aba') == False",
            "assert unique_Characters('abc') == True",
            "assert unique_Characters('abab') == False"
        ],
        "answer_list": [
            "\t",
            "if",
            " len",
            "(",
            "str",
            ")",
            " ==",
            " len",
            "(",
            "set",
            "(",
            "str",
            ")):",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 353,
        "prompt": "Write a python function to remove a specified column from a given nested list.\n\ndef remove_column(list1, n):\n",
        "answer": "def remove_column(list1, n):\n\treturn [row[:n] + row[n+1:] for row in list1]\n\n",
        "test_list": [
            "assert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]",
            "assert remove_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[[1, 2], [-2, 4], [1, -1]]",
            "assert remove_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[[3], [7], [3], [15, 17], [7], [11]]"
        ],
        "answer_list": [
            "\t",
            "return",
            " [",
            "row",
            "[:",
            "n",
            "]",
            " +",
            " row",
            "[",
            "n",
            "+",
            "1",
            ":]",
            " for",
            " row",
            " in",
            " list",
            "1",
            "]",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 354,
        "prompt": "Write a python function to find t-nth term of arithemetic progression.\n\ndef tn_ap(a,n,d):\n",
        "answer": "def tn_ap(a,n,d):\n\treturn a+(n-1)*d\n\n",
        "test_list": [
            "assert tn_ap(1,5,2)==9",
            "assert tn_ap(2,6,4)==22",
            "assert tn_ap(1,4,5)==16"
        ],
        "answer_list": [
            "\t",
            "return",
            " a",
            "+(",
            "n",
            "-",
            "1",
            ")*",
            "d",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 355,
        "prompt": "Write a python function to count the number of rectangles in a circle of radius r.\n\ndef count_Rectangles(radius):  \n",
        "answer": "def count_Rectangles(radius):  \n\treturn 2*radius*radius\n\n",
        "test_list": [
            "assert count_Rectangles(2) == 8",
            "assert count_Rectangles(1) == 1",
            "assert count_Rectangles(0) == 0"
        ],
        "answer_list": [
            "\t",
            "return",
            " ",
            "2",
            "*",
            "radius",
            "*",
            "radius",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 356,
        "prompt": "Write a python function to find the third angle of a triangle using two angles.\n\ndef find_angle(a,b):\n",
        "answer": "def find_angle(a,b):\n\treturn 180 - a - b\n\n",
        "test_list": [
            "assert find_angle(47,89)==44",
            "assert find_angle(45,95)==40",
            "assert find_angle(50,40)==90"
        ],
        "answer_list": [
            "\t",
            "return",
            " ",
            "1",
            "8",
            "0",
            " -",
            " a",
            " -",
            " b",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 357,
        "prompt": "Write a python function to find the maximum element of all the given tuple records.\n\ndef find_max(test_list):\n",
        "answer": "def find_max(test_list):\n\tmax_value = test_list[0]\n\tfor i in range(1, len(test_list)):\n\t\tif test_list[i] > max_value:\n\t\t\tmax_value = test_list[i]\n\treturn max_value\n\n",
        "test_list": [
            "assert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10",
            "assert find_max([(3, 5), (7, 8), (6, 2), (7, 11), (9, 8)]) == 11",
            "assert find_max([(4, 6), (8, 9), (7, 3), (8, 12), (10, 9)]) == 12"
        ],
        "answer_list": [
            "\t",
            "max",
            "_",
            "value",
            " =",
            " test",
            "_",
            "list",
            "[",
            "0",
            "]",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "1",
            ",",
            " len",
            "(",
            "test",
            "_",
            "list",
            ")):",
            "\n\t",
            "\t",
            "if",
            " test",
            "_",
            "list",
            "[",
            "i",
            "]",
            " >",
            " max",
            "_",
            "value",
            ":",
            "\n\t\t",
            "\t",
            "max",
            "_",
            "value",
            " =",
            " test",
            "_",
            "list",
            "[",
            "i",
            "]",
            "\n",
            "\t",
            "return",
            " max",
            "_",
            "value",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 358,
        "prompt": "Write a python function to find modulo division of two lists using map and lambda function.\n\ndef moddiv_list(nums1,nums2):\n",
        "answer": "def moddiv_list(nums1,nums2):\n\treturn list(map(lambda x,y: x%y,nums1,nums2))\n\n",
        "test_list": [
            "assert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]",
            "assert moddiv_list([3,2],[1,4])==[0, 2]",
            "assert moddiv_list([90,120],[50,70])==[40, 50]"
        ],
        "answer_list": [
            "\t",
            "return",
            " list",
            "(",
            "map",
            "(",
            "lambda",
            " x",
            ",",
            "y",
            ":",
            " x",
            "%",
            "y",
            ",",
            "nums",
            "1",
            ",",
            "nums",
            "2",
            "))",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 359,
        "prompt": "Write a python function to check whether one root of the quadratic equation is twice of the other or not.\n\ndef Check_Solution(a,b,c): \n",
        "answer": "def Check_Solution(a,b,c): \n\tif (b**2-4*a*c)>0: \n\t\tprint(\"The roots are real and different\") \n\telif (b**2-4*a*c)==0: \n\t\tprint(\"The roots are real and equal\") \n\telse: \n\t\tprint(\"The roots are imaginary\") \n\n",
        "test_list": [
            "assert Check_Solution(1,3,2) == \"Yes\"",
            "assert Check_Solution(1,2,3) == \"No\"",
            "assert Check_Solution(1,-5,6) == \"No\""
        ],
        "answer_list": [
            "\t",
            "if",
            " (",
            "b",
            "**",
            "2",
            "-",
            "4",
            "*",
            "a",
            "*",
            "c",
            ")>",
            "0",
            ":",
            " \n\t",
            "\t",
            "print",
            "(\"",
            "The",
            " roots",
            " are",
            " real",
            " and",
            " different",
            "\")",
            " \n",
            "\t",
            "elif",
            " (",
            "b",
            "**",
            "2",
            "-",
            "4",
            "*",
            "a",
            "*",
            "c",
            ")==",
            "0",
            ":",
            " \n\t",
            "\t",
            "print",
            "(\"",
            "The",
            " roots",
            " are",
            " real",
            " and",
            " equal",
            "\")",
            " \n",
            "\t",
            "else",
            ":",
            " \n\t",
            "\t",
            "print",
            "(\"",
            "The",
            " roots",
            " are",
            " imag",
            "inary",
            "\")",
            " \n",
            "\n",
            "a"
        ]
    },
    {
        "task_id": 360,
        "prompt": "Write a python function to find the n\u2019th carol number.\n\ndef get_carol(n): \n",
        "answer": "def get_carol(n): \n\tif n == 1: \n\t\treturn 1\n\telse: \n\t\treturn get_carol(n-1) + get_carol(n-2)\n\n",
        "test_list": [
            "assert get_carol(2) == 7",
            "assert get_carol(4) == 223",
            "assert get_carol(5) == 959"
        ],
        "answer_list": [
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "1",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "1",
            "\n",
            "\t",
            "else",
            ":",
            " \n\t",
            "\t",
            "return",
            " get",
            "_",
            "car",
            "ol",
            "(",
            "n",
            "-",
            "1",
            ")",
            " +",
            " get",
            "_",
            "car",
            "ol",
            "(",
            "n",
            "-",
            "2",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 361,
        "prompt": "Write a python function to remove empty lists from a given list of lists.\n\ndef remove_empty(list1):\n",
        "answer": "def remove_empty(list1):\n\treturn [x for x in list1 if x!= []]\n\n",
        "test_list": [
            "assert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']",
            "assert remove_empty([[], [], [],[],[], 'Green', [1,2], 'Blue', [], []])==[ 'Green', [1, 2], 'Blue']",
            "assert remove_empty([[], [], [], 'Python',[],[], 'programming', 'language',[],[],[], [], []])==['Python', 'programming', 'language']"
        ],
        "answer_list": [
            "\t",
            "return",
            " [",
            "x",
            " for",
            " x",
            " in",
            " list",
            "1",
            " if",
            " x",
            "!=",
            " []",
            "]",
            "\n",
            "\n",
            "#"
        ]
    },
    {
        "task_id": 362,
        "prompt": "Write a python function to find the item with maximum occurrences in a given list.\n\ndef max_occurrences(nums):\n",
        "answer": "def max_occurrences(nums):\n\tmax_count = 0\n\tmax_item = None\n\tfor item in nums:\n\t\tcount = nums.count(item)\n\t\tif count > max_count:\n\t\t\tmax_count = count\n\t\t\tmax_item = item\n\treturn max_item\n\n",
        "test_list": [
            "assert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2",
            "assert max_occurrences([1,2,6,7,0,1,0,1,0]) == 1,0",
            "assert max_occurrences([1,2,3,1,2,4,1]) == 1"
        ],
        "answer_list": [
            "\t",
            "max",
            "_",
            "count",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "max",
            "_",
            "item",
            " =",
            " None",
            "\n",
            "\t",
            "for",
            " item",
            " in",
            " nums",
            ":",
            "\n\t",
            "\t",
            "count",
            " =",
            " nums",
            ".",
            "count",
            "(",
            "item",
            ")",
            "\n\t",
            "\t",
            "if",
            " count",
            " >",
            " max",
            "_",
            "count",
            ":",
            "\n\t\t",
            "\t",
            "max",
            "_",
            "count",
            " =",
            " count",
            "\n\t\t",
            "\t",
            "max",
            "_",
            "item",
            " =",
            " item",
            "\n",
            "\t",
            "return",
            " max",
            "_",
            "item",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 363,
        "prompt": "Write a python function to add the k elements to each element in the tuple.\n\ndef add_K_element(test_list, K):\n",
        "answer": "def add_K_element(test_list, K):\n\tfor i in range(len(test_list)):\n\t\ttest_list[i] += K\n\treturn test_list\n\n",
        "test_list": [
            "assert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]",
            "assert add_K_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8) == [(9, 10, 11), (12, 13, 14), (15, 16, 17)]",
            "assert add_K_element([(11, 12, 13), (14, 15, 16), (17, 18, 19)], 9) == [(20, 21, 22), (23, 24, 25), (26, 27, 28)]"
        ],
        "answer_list": [
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "len",
            "(",
            "test",
            "_",
            "list",
            ")):",
            "\n\t",
            "\t",
            "test",
            "_",
            "list",
            "[",
            "i",
            "]",
            " +=",
            " K",
            "\n",
            "\t",
            "return",
            " test",
            "_",
            "list",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 364,
        "prompt": "Write a python function to find the number of flips required to make the given binary string a sequence of alternate characters.\n\ndef min_flip_to_make_string_alternate(str): \n",
        "answer": "def min_flip_to_make_string_alternate(str): \n\tcount = 0\n\tfor i in range(len(str)): \n\t\tif i % 2 == 0 and str[i] == '1': \n\t\t\tcount += 1\n\t\telif i % 2!= 0 and str[i] == '0': \n\t\t\tcount += 1\n\treturn count \n\n",
        "test_list": [
            "assert min_flip_to_make_string_alternate(\"0001010111\") == 2",
            "assert min_flip_to_make_string_alternate(\"001\") == 1",
            "assert min_flip_to_make_string_alternate(\"010111011\") == 2 "
        ],
        "answer_list": [
            "\t",
            "count",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "len",
            "(",
            "str",
            ")):",
            " \n\t",
            "\t",
            "if",
            " i",
            " %",
            " ",
            "2",
            " ==",
            " ",
            "0",
            " and",
            " str",
            "[",
            "i",
            "]",
            " ==",
            " '",
            "1",
            "':",
            " \n\t\t",
            "\t",
            "count",
            " +=",
            " ",
            "1",
            "\n\t",
            "\t",
            "elif",
            " i",
            " %",
            " ",
            "2",
            "!=",
            " ",
            "0",
            " and",
            " str",
            "[",
            "i",
            "]",
            " ==",
            " '",
            "0",
            "':",
            " \n\t\t",
            "\t",
            "count",
            " +=",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " count",
            " \n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 365,
        "prompt": "Write a python function to count the number of digits of a given number.\n\ndef count_Digit(n):\n",
        "answer": "def count_Digit(n):\n\tcount = 0\n\twhile n > 0:\n\t\tcount += 1\n\t\tn = n // 10\n\treturn count\n\n",
        "test_list": [
            "assert count_Digit(12345) == 5",
            "assert count_Digit(11223305) == 8",
            "assert count_Digit(4123459) == 7"
        ],
        "answer_list": [
            "\t",
            "count",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "while",
            " n",
            " >",
            " ",
            "0",
            ":",
            "\n\t",
            "\t",
            "count",
            " +=",
            " ",
            "1",
            "\n\t",
            "\t",
            "n",
            " =",
            " n",
            " //",
            " ",
            "1",
            "0",
            "\n",
            "\t",
            "return",
            " count",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 366,
        "prompt": "Write a python function to find the largest product of the pair of adjacent elements from a given list of integers.\n\ndef adjacent_num_product(list_nums):\n",
        "answer": "def adjacent_num_product(list_nums):\n\tmax_product = 0\n\tfor i in range(len(list_nums)-1):\n\t\tproduct = list_nums[i] * list_nums[i+1]\n\t\tif product > max_product:\n\t\t\tmax_product = product\n\treturn max_product\n\n",
        "test_list": [
            "assert adjacent_num_product([1,2,3,4,5,6]) == 30",
            "assert adjacent_num_product([1,2,3,4,5]) == 20",
            "assert adjacent_num_product([2,3]) == 6"
        ],
        "answer_list": [
            "\t",
            "max",
            "_",
            "product",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "len",
            "(",
            "list",
            "_",
            "nums",
            ")-",
            "1",
            "):",
            "\n\t",
            "\t",
            "product",
            " =",
            " list",
            "_",
            "nums",
            "[",
            "i",
            "]",
            " *",
            " list",
            "_",
            "nums",
            "[",
            "i",
            "+",
            "1",
            "]",
            "\n\t",
            "\t",
            "if",
            " product",
            " >",
            " max",
            "_",
            "product",
            ":",
            "\n\t\t",
            "\t",
            "max",
            "_",
            "product",
            " =",
            " product",
            "\n",
            "\t",
            "return",
            " max",
            "_",
            "product",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 367,
        "prompt": "Write a python function to check if a binary tree is balanced or not.\n\ndef is_tree_balanced(root): \n",
        "answer": "def is_tree_balanced(root): \n\tif root is None: \n\t\treturn True\n\tif abs(height(root.left) - height(root.right)) <= 1 and is_tree_balanced(root.left) and is_tree_balanced(root.right): \n\t\treturn True\n\treturn False\n\n",
        "test_list": [
            "assert is_tree_balanced(root) == False",
            "assert is_tree_balanced(root1) == True",
            "assert is_tree_balanced(root2) == False "
        ],
        "answer_list": [
            "\t",
            "if",
            " root",
            " is",
            " None",
            ":",
            " \n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " abs",
            "(",
            "height",
            "(",
            "root",
            ".",
            "left",
            ")",
            " -",
            " height",
            "(",
            "root",
            ".",
            "right",
            "))",
            " <=",
            " ",
            "1",
            " and",
            " is",
            "_",
            "tree",
            "_",
            "balanced",
            "(",
            "root",
            ".",
            "left",
            ")",
            " and",
            " is",
            "_",
            "tree",
            "_",
            "balanced",
            "(",
            "root",
            ".",
            "right",
            "):",
            " \n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "return",
            " False",
            "\n",
            "\n",
            "def"
        ]
    },
    {
        "task_id": 368,
        "prompt": "Write a python function to repeat the given tuple n times.\n\ndef repeat_tuples(test_tup, N):\n",
        "answer": "def repeat_tuples(test_tup, N):\n\treturn test_tup * N\n\n",
        "test_list": [
            "assert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))",
            "assert repeat_tuples((1, 2), 3) == ((1, 2), (1, 2), (1, 2))",
            "assert repeat_tuples((3, 4), 5) == ((3, 4), (3, 4), (3, 4), (3, 4), (3, 4))"
        ],
        "answer_list": [
            "\t",
            "return",
            " test",
            "_",
            "tup",
            " *",
            " N",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 369,
        "prompt": "Write a python function to find the lateral surface area of cuboid\n\ndef lateralsurface_cuboid(l,w,h):\n",
        "answer": "def lateralsurface_cuboid(l,w,h):\n\treturn 2*(l*w + l*h + w*h)\n\n",
        "test_list": [
            "assert lateralsurface_cuboid(8,5,6)==156",
            "assert lateralsurface_cuboid(7,9,10)==320",
            "assert lateralsurface_cuboid(10,20,30)==1800"
        ],
        "answer_list": [
            "\t",
            "return",
            " ",
            "2",
            "*(",
            "l",
            "*",
            "w",
            " +",
            " l",
            "*",
            "h",
            " +",
            " w",
            "*",
            "h",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 370,
        "prompt": "Write a python function to sort a tuple by its float element.\n\ndef float_sort(price):\n",
        "answer": "def float_sort(price):\n\treturn price[1]\n\n",
        "test_list": [
            "assert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] ",
            "assert float_sort([('item1', '15'), ('item2', '10'), ('item3', '20')])==[('item3', '20'), ('item1', '15'), ('item2', '10')] ",
            "assert float_sort([('item1', '5'), ('item2', '10'), ('item3', '14')])==[('item3', '14'), ('item2', '10'), ('item1', '5')] "
        ],
        "answer_list": [
            "\t",
            "return",
            " price",
            "[",
            "1",
            "]",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 371,
        "prompt": "Write a python function to find the smallest missing element in a sorted array.\n\ndef smallest_missing(A, left_element, right_element):\n",
        "answer": "def smallest_missing(A, left_element, right_element):\n\tif left_element == right_element:\n\t\treturn left_element + 1\n\tif left_element + 1 == right_element:\n\t\treturn left_element + 2 if A[left_element] + 1!= A[right_element] else left_element + 1\n\tmid_element = (left_element + right_element) // 2\n\tif A[mid_element] == mid_element:\n\t\treturn smallest_missing(A, mid_element + 1, right_element)\n\telse:\n\t\treturn smallest_missing(A, left_element, mid_element)\n\n",
        "test_list": [
            "assert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7",
            "assert smallest_missing([0, 1, 2, 6, 9, 11, 15], 0, 6) == 3",
            "assert smallest_missing([1, 2, 3, 4, 6, 9, 11, 15], 0, 7) == 0"
        ],
        "answer_list": [
            "\t",
            "if",
            " left",
            "_",
            "element",
            " ==",
            " right",
            "_",
            "element",
            ":",
            "\n\t",
            "\t",
            "return",
            " left",
            "_",
            "element",
            " +",
            " ",
            "1",
            "\n",
            "\t",
            "if",
            " left",
            "_",
            "element",
            " +",
            " ",
            "1",
            " ==",
            " right",
            "_",
            "element",
            ":",
            "\n\t",
            "\t",
            "return",
            " left",
            "_",
            "element",
            " +",
            " ",
            "2",
            " if",
            " A",
            "[",
            "left",
            "_",
            "element",
            "]",
            " +",
            " ",
            "1",
            "!=",
            " A",
            "[",
            "right",
            "_",
            "element",
            "]",
            " else",
            " left",
            "_",
            "element",
            " +",
            " ",
            "1",
            "\n",
            "\t",
            "mid",
            "_",
            "element",
            " =",
            " (",
            "left",
            "_",
            "element",
            " +",
            " right",
            "_",
            "element",
            ")",
            " //",
            " ",
            "2",
            "\n",
            "\t",
            "if",
            " A",
            "[",
            "mid",
            "_",
            "element",
            "]",
            " ==",
            " mid",
            "_",
            "element",
            ":",
            "\n\t",
            "\t",
            "return",
            " smallest",
            "_",
            "missing",
            "(",
            "A",
            ",",
            " mid",
            "_",
            "element",
            " +",
            " ",
            "1",
            ",",
            " right",
            "_",
            "element",
            ")",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "return",
            " smallest",
            "_",
            "missing",
            "(",
            "A",
            ",",
            " left",
            "_",
            "element",
            ",",
            " mid",
            "_",
            "element",
            ")",
            "\n",
            "\n",
            "A"
        ]
    },
    {
        "task_id": 372,
        "prompt": "Write a python function to sort a given list of elements in ascending order using heap queue algorithm.\n\ndef heap_assending(nums):\n",
        "answer": "def heap_assending(nums):\n\theapq.heapify(nums)\n\treturn heapq.nlargest(len(nums), nums)\n\n",
        "test_list": [
            "assert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]",
            "assert heap_assending([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]",
            "assert heap_assending([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
        ],
        "answer_list": [
            "\t",
            "heap",
            "q",
            ".",
            "heap",
            "ify",
            "(",
            "nums",
            ")",
            "\n",
            "\t",
            "return",
            " heap",
            "q",
            ".",
            "n",
            "largest",
            "(",
            "len",
            "(",
            "nums",
            "),",
            " nums",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 373,
        "prompt": "Write a python function to find the volume of a cuboid.\n\ndef volume_cuboid(l,w,h):\n",
        "answer": "def volume_cuboid(l,w,h):\n\treturn l*w*h\n\n",
        "test_list": [
            "assert volume_cuboid(1,2,3)==6",
            "assert volume_cuboid(5,7,9)==315",
            "assert volume_cuboid(10,15,21)==3150"
        ],
        "answer_list": [
            "\t",
            "return",
            " l",
            "*",
            "w",
            "*",
            "h",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 374,
        "prompt": "Write a python function to print all permutations of a given string including duplicates.\n\ndef permute_string(str):\n",
        "answer": "def permute_string(str):\n\tif len(str) == 0:\n\t\treturn [\"\"]\n\telse:\n\t\tresult = []\n\t\tfor i in range(len(str)):\n\t\t\tchar = str[i]\n\t\t\trem_str = str[:i] + str[i+1:]\n\t\t\tfor perm in permute_string(rem_str):\n\t\t\t\tresult.append(char + perm)\n\t\treturn result\n\n",
        "test_list": [
            "assert permute_string('ab')==['ab', 'ba']",
            "assert permute_string('abc')==['abc', 'bac', 'bca', 'acb', 'cab', 'cba']",
            "assert permute_string('abcd')==['abcd', 'bacd', 'bcad', 'bcda', 'acbd', 'cabd', 'cbad', 'cbda', 'acdb', 'cadb', 'cdab', 'cdba', 'abdc', 'badc', 'bdac', 'bdca', 'adbc', 'dabc', 'dbac', 'dbca', 'adcb', 'dacb', 'dcab', 'dcba']"
        ],
        "answer_list": [
            "\t",
            "if",
            " len",
            "(",
            "str",
            ")",
            " ==",
            " ",
            "0",
            ":",
            "\n\t",
            "\t",
            "return",
            " [",
            "\"\"",
            "]",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "result",
            " =",
            " []",
            "\n\t",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "len",
            "(",
            "str",
            ")):",
            "\n\t\t",
            "\t",
            "char",
            " =",
            " str",
            "[",
            "i",
            "]",
            "\n\t\t",
            "\t",
            "rem",
            "_",
            "str",
            " =",
            " str",
            "[:",
            "i",
            "]",
            " +",
            " str",
            "[",
            "i",
            "+",
            "1",
            ":]",
            "\n\t\t",
            "\t",
            "for",
            " perm",
            " in",
            " perm",
            "ute",
            "_",
            "string",
            "(",
            "rem",
            "_",
            "str",
            "):",
            "\n\t\t\t",
            "\t",
            "result",
            ".",
            "append",
            "(",
            "char",
            " +",
            " perm",
            ")",
            "\n\t",
            "\t",
            "return",
            " result",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 375,
        "prompt": "Write a python function to round the given number to the nearest multiple of a specific number.\n\ndef round_num(n,m):\n",
        "answer": "def round_num(n,m):\n\treturn (n//m + (n%m>0)) * m\n\n",
        "test_list": [
            "assert round_num(4722,10)==4720",
            "assert round_num(1111,5)==1110",
            "assert round_num(219,2)==218"
        ],
        "answer_list": [
            "\t",
            "return",
            " (",
            "n",
            "//",
            "m",
            " +",
            " (",
            "n",
            "%",
            "m",
            ">",
            "0",
            "))",
            " *",
            " m",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 376,
        "prompt": "Write a python function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\n\ndef remove_replica(test_tup):\n",
        "answer": "def remove_replica(test_tup):\n\treturn tuple(set(test_tup))\n\n",
        "test_list": [
            "assert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')",
            "assert remove_replica((2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9)) == (2, 3, 4, 'MSP', 5, 6, 'MSP', 7, 8, 9, 'MSP')",
            "assert remove_replica((2, 2, 5, 4, 5, 7, 5, 6, 7, 7)) == (2, 'MSP', 5, 4, 'MSP', 7, 'MSP', 6, 'MSP', 'MSP')"
        ],
        "answer_list": [
            "\t",
            "return",
            " tuple",
            "(",
            "set",
            "(",
            "test",
            "_",
            "tup",
            "))",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 377,
        "prompt": "Write a python function to remove all occurrences of a character in a given string.\n\ndef remove_Char(s,c) :  \n",
        "answer": "def remove_Char(s,c) :  \n\treturn s.replace(c,'')\n\n",
        "test_list": [
            "assert remove_Char(\"aba\",'a') == \"b\"",
            "assert remove_Char(\"toggle\",'g') == \"tole\"",
            "assert remove_Char(\"aabbc\",'b') == \"aac\""
        ],
        "answer_list": [
            "\t",
            "return",
            " s",
            ".",
            "replace",
            "(",
            "c",
            ",'",
            "')",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 378,
        "prompt": "Write a python function to shift last element to first position in the given list.\n\ndef move_first(test_list):\n",
        "answer": "def move_first(test_list):\n\treturn test_list[1:] + test_list[:1]\n\n",
        "test_list": [
            "assert move_first([1,2,3,4]) == [4,1,2,3]",
            "assert move_first([0,1,2,3]) == [3,0,1,2]",
            "assert move_first([9,8,7,1]) == [1,9,8,7]"
        ],
        "answer_list": [
            "\t",
            "return",
            " test",
            "_",
            "list",
            "[",
            "1",
            ":]",
            " +",
            " test",
            "_",
            "list",
            "[:",
            "1",
            "]",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 379,
        "prompt": "Write a python function to find the surface area of a cuboid.\n\ndef surfacearea_cuboid(l,w,h):\n",
        "answer": "def surfacearea_cuboid(l,w,h):\n\treturn 2*(l*w+w*h+h*l)\n\n",
        "test_list": [
            "assert surfacearea_cuboid(1,2,3)==22",
            "assert surfacearea_cuboid(5,7,9)==286",
            "assert surfacearea_cuboid(10,15,21)==1350"
        ],
        "answer_list": [
            "\t",
            "return",
            " ",
            "2",
            "*(",
            "l",
            "*",
            "w",
            "+",
            "w",
            "*",
            "h",
            "+",
            "h",
            "*",
            "l",
            ")",
            "\n",
            "\n",
            "#"
        ]
    },
    {
        "task_id": 380,
        "prompt": "Write a python function to generate a two-dimensional array.\n\ndef multi_list(rownum,colnum):\n",
        "answer": "def multi_list(rownum,colnum):\n\treturn [[0 for i in range(colnum)] for j in range(rownum)]\n\n",
        "test_list": [
            "assert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] ",
            "assert multi_list(5,7)==[[0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6], [0, 2, 4, 6, 8, 10, 12], [0, 3, 6, 9, 12, 15, 18], [0, 4, 8, 12, 16, 20, 24]]",
            "assert multi_list(10,15)==[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28], [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42], [0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56], [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70], [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84], [0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98], [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112], [0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126]]"
        ],
        "answer_list": [
            "\t",
            "return",
            " [[",
            "0",
            " for",
            " i",
            " in",
            " range",
            "(",
            "col",
            "num",
            ")]",
            " for",
            " j",
            " in",
            " range",
            "(",
            "row",
            "num",
            ")]",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 381,
        "prompt": "Write a python function to sort a list of lists by a given index of the inner list.\n\ndef index_on_inner_list(list_data, index_no):\n",
        "answer": "def index_on_inner_list(list_data, index_no):\n\treturn sorted(list_data, key=lambda x: x[index_no])\n\n",
        "test_list": [
            "assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]",
            "assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,1)==[('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99)]",
            "assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[('Wyatt Knott', 91, 94), ('Brady Kent', 97, 96), ('Beau Turnbull', 94, 98), ('Greyson Fulton', 98, 99)]"
        ],
        "answer_list": [
            "\t",
            "return",
            " sorted",
            "(",
            "list",
            "_",
            "data",
            ",",
            " key",
            "=",
            "lambda",
            " x",
            ":",
            " x",
            "[",
            "index",
            "_",
            "no",
            "])",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 382,
        "prompt": "Write a python function to find the number of rotations in a circularly sorted array.\n\ndef find_rotation_count(A):\n",
        "answer": "def find_rotation_count(A):\n\tif len(A) == 0:\n\t\treturn 0\n\tif len(A) == 1:\n\t\treturn 0\n\tif len(A) == 2:\n\t\tif A[0] > A[1]:\n\t\t\treturn 1\n\t\telse:\n\t\t\treturn 0\n\tif len(A) == 3:\n\t\tif A[0] > A[1]:\n\t\t\treturn 1\n\t\telif A[1] > A[2]:\n\t\t\treturn 2\n\t\telse:\n\t\t\treturn 0\n\tif len(A) == 4:\n\t\tif A[0] > A[1]:\n\t\t\treturn 1\n\t\telif A[1] > A[2]:\n\t\t\treturn 2\n\t\telif A[2] > A[3]:\n\t\t\treturn 3\n\t\telse:\n\t\t\treturn 0\n\tif len(A) == 5:\n\t\tif A[0] > A[1]:\n\t\t\treturn 1\n\t\telif A[1] > A[2]:\n\t\t\treturn 2\n\t\telif A[2] > A[3]:\n\t\t\treturn 3\n\t\telif A[3] > A[4]:\n\t\t\treturn 4\n\t\telse:\n\t\t\treturn 0\n\tif len(A) == 6:\n\t\tif A[0] > A[1]:\n\t\t\treturn 1\n\t\telif A[1] > A[2]:\n\t\t\treturn 2\n\t\telif A[2] > A[3]:\n\t\t\treturn 3\n\t\telif A[3] > A[4]:\n\t\t\treturn 4\n\t\telif A[4] > A[5]:\n\t\t\treturn 5\n\t\telse:\n\t\t\treturn 0\n\tif len(A) == 7:\n\t\tif A[0] > A[1]:\n\t\t\treturn 1\n\t\telif A[1] > A[2]:\n\t\t\treturn 2\n\t\telif A[2] > A[3]:\n\t\t\treturn 3\n\t\telif A[3] > A[4]:\n\t\t\treturn 4\n\t\telif A[4] > A[5]:\n\t\t\treturn 5\n\t\telif A[5] > A[6]:\n\t\t\treturn 6\n\t\telse:\n\t\t\treturn 0\n\tif len(A) == 8:\n\t\tif A[0] > A[1]:\n\t\t\treturn 1\n\t\telif A[1] > A[2]:\n\t\t\treturn 2\n\t\telif A[2] > A[3]:\n\t\t\treturn 3\n\t\telif A[3] > A[4]:\n\t\t\treturn 4\n\t\telif A[4] > A[5]:\n\t\t\treturn 5\n\t\telif A[5] > A[6]:\n\t\t\treturn 6\n\t\telif A[6] > A[7]:\n\t\t\treturn 7\n\t\telse:\n\t\t\treturn 0\n\tif len(A) == 9:\n\t\tif A[0] > A[1]:\n\t\t\treturn 1\n\t\telif A[1] > A[2]:\n\t\t\treturn 2\n\t\telif A[2] > A[3]:\n\t\t\treturn 3\n\t\telif A[3] > A[4]:\n\t\t\treturn 4\n\t\telif A[4] > A[5]:\n\t\t\treturn 5\n\t\telif A[5] > A[6]:\n\t\t\treturn 6\n\t\telif A[6] > A[7]:\n\t\t\treturn 7\n\t\telif A[7] > A[8]:\n\t\t\treturn 8\n\t\telse:\n\t\t\treturn 0\n\tif len(A) == 10:\n\t\tif A[0] > A[1]:\n\t\t\treturn 1\n\t\telif A[1] > A[2]:\n\t\t\treturn 2\n\t\telif A[2] > A[3]:\n\t\t\treturn 3\n\t\telif A[3] > A[4]:\n\t\t\treturn 4\n\t\telif A[4] > A[5]:\n\t\t\treturn 5\n\t\telif A[5] > A[6]:\n\t\t\treturn 6\n\t\telif A[6] > A[7]:\n\t\t\treturn 7\n\t\telif A[7] > A[8]:\n\t\t\treturn 8\n\t\telif A[8] > A[9]:\n\t\t\treturn 9\n\t\telse:\n\t\t\treturn 0\n\tif len(A) == 11:\n\t\tif A[0] > A[1]:\n\t\t\treturn 1\n\t\telif A[1] > A[2]:\n\t\t\treturn 2\n\t",
        "test_list": [
            "assert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3",
            "assert find_rotation_count([8, 9, 10,2, 5, 6]) == 3",
            "assert find_rotation_count([2, 5, 6, 8, 9, 10]) == 0"
        ],
        "answer_list": [
            "\t",
            "if",
            " len",
            "(",
            "A",
            ")",
            " ==",
            " ",
            "0",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "0",
            "\n",
            "\t",
            "if",
            " len",
            "(",
            "A",
            ")",
            " ==",
            " ",
            "1",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "0",
            "\n",
            "\t",
            "if",
            " len",
            "(",
            "A",
            ")",
            " ==",
            " ",
            "2",
            ":",
            "\n\t",
            "\t",
            "if",
            " A",
            "[",
            "0",
            "]",
            " >",
            " A",
            "[",
            "1",
            "]:",
            "\n\t\t",
            "\t",
            "return",
            " ",
            "1",
            "\n\t",
            "\t",
            "else",
            ":",
            "\n\t\t",
            "\t",
            "return",
            " ",
            "0",
            "\n",
            "\t",
            "if",
            " len",
            "(",
            "A",
            ")",
            " ==",
            " ",
            "3",
            ":",
            "\n\t",
            "\t",
            "if",
            " A",
            "[",
            "0",
            "]",
            " >",
            " A",
            "[",
            "1",
            "]:",
            "\n\t\t",
            "\t",
            "return",
            " ",
            "1",
            "\n\t",
            "\t",
            "elif",
            " A",
            "[",
            "1",
            "]",
            " >",
            " A",
            "[",
            "2",
            "]:",
            "\n\t\t",
            "\t",
            "return",
            " ",
            "2",
            "\n\t",
            "\t",
            "else",
            ":",
            "\n\t\t",
            "\t",
            "return",
            " ",
            "0",
            "\n",
            "\t",
            "if",
            " len",
            "(",
            "A",
            ")",
            " ==",
            " ",
            "4",
            ":",
            "\n\t",
            "\t",
            "if",
            " A",
            "[",
            "0",
            "]",
            " >",
            " A",
            "[",
            "1",
            "]:",
            "\n\t\t",
            "\t",
            "return",
            " ",
            "1",
            "\n\t",
            "\t",
            "elif",
            " A",
            "[",
            "1",
            "]",
            " >",
            " A",
            "[",
            "2",
            "]:",
            "\n\t\t",
            "\t",
            "return",
            " ",
            "2",
            "\n\t",
            "\t",
            "elif",
            " A",
            "[",
            "2",
            "]",
            " >",
            " A",
            "[",
            "3",
            "]:",
            "\n\t\t",
            "\t",
            "return",
            " ",
            "3",
            "\n\t",
            "\t",
            "else",
            ":",
            "\n\t\t",
            "\t",
            "return",
            " ",
            "0",
            "\n",
            "\t",
            "if",
            " len",
            "(",
            "A",
            ")",
            " ==",
            " ",
            "5",
            ":",
            "\n\t",
            "\t",
            "if",
            " A",
            "[",
            "0",
            "]",
            " >",
            " A",
            "[",
            "1",
            "]:",
            "\n\t\t",
            "\t",
            "return",
            " ",
            "1",
            "\n\t",
            "\t",
            "elif",
            " A",
            "[",
            "1",
            "]",
            " >",
            " A",
            "[",
            "2",
            "]:",
            "\n\t\t",
            "\t",
            "return",
            " ",
            "2",
            "\n\t",
            "\t",
            "elif",
            " A",
            "[",
            "2",
            "]",
            " >",
            " A",
            "[",
            "3",
            "]:",
            "\n\t\t",
            "\t",
            "return",
            " ",
            "3",
            "\n\t",
            "\t",
            "elif",
            " A",
            "[",
            "3",
            "]",
            " >",
            " A",
            "[",
            "4",
            "]:",
            "\n\t\t",
            "\t",
            "return",
            " ",
            "4",
            "\n\t",
            "\t",
            "else",
            ":",
            "\n\t\t",
            "\t",
            "return",
            " ",
            "0",
            "\n",
            "\t",
            "if",
            " len",
            "(",
            "A",
            ")",
            " ==",
            " ",
            "6",
            ":",
            "\n\t",
            "\t",
            "if",
            " A",
            "[",
            "0",
            "]",
            " >",
            " A",
            "[",
            "1",
            "]:",
            "\n\t\t",
            "\t",
            "return",
            " ",
            "1",
            "\n\t",
            "\t",
            "elif",
            " A",
            "[",
            "1",
            "]",
            " >",
            " A",
            "[",
            "2",
            "]:",
            "\n\t\t",
            "\t",
            "return",
            " ",
            "2",
            "\n\t",
            "\t",
            "elif",
            " A",
            "[",
            "2",
            "]",
            " >",
            " A",
            "[",
            "3",
            "]:",
            "\n\t\t",
            "\t",
            "return",
            " ",
            "3",
            "\n\t",
            "\t",
            "elif",
            " A",
            "[",
            "3",
            "]",
            " >",
            " A",
            "[",
            "4",
            "]:",
            "\n\t\t",
            "\t",
            "return",
            " ",
            "4",
            "\n\t",
            "\t",
            "elif",
            " A",
            "[",
            "4",
            "]",
            " >",
            " A",
            "[",
            "5",
            "]:",
            "\n\t\t",
            "\t",
            "return",
            " ",
            "5",
            "\n\t",
            "\t",
            "else",
            ":",
            "\n\t\t",
            "\t",
            "return",
            " ",
            "0",
            "\n",
            "\t",
            "if",
            " len",
            "(",
            "A",
            ")",
            " ==",
            " ",
            "7",
            ":",
            "\n\t",
            "\t",
            "if",
            " A",
            "[",
            "0",
            "]",
            " >",
            " A",
            "[",
            "1",
            "]:",
            "\n\t\t",
            "\t",
            "return",
            " ",
            "1",
            "\n\t",
            "\t",
            "elif",
            " A",
            "[",
            "1",
            "]",
            " >",
            " A",
            "[",
            "2",
            "]:",
            "\n\t\t",
            "\t",
            "return",
            " ",
            "2",
            "\n\t",
            "\t",
            "elif",
            " A",
            "[",
            "2",
            "]",
            " >",
            " A",
            "[",
            "3",
            "]:",
            "\n\t\t",
            "\t",
            "return",
            " ",
            "3",
            "\n\t",
            "\t",
            "elif",
            " A",
            "[",
            "3",
            "]",
            " >",
            " A",
            "[",
            "4",
            "]:",
            "\n\t\t",
            "\t",
            "return",
            " ",
            "4",
            "\n\t",
            "\t",
            "elif",
            " A",
            "[",
            "4",
            "]",
            " >",
            " A",
            "[",
            "5",
            "]:",
            "\n\t\t",
            "\t",
            "return",
            " ",
            "5",
            "\n\t",
            "\t",
            "elif",
            " A",
            "[",
            "5",
            "]",
            " >",
            " A",
            "[",
            "6",
            "]:",
            "\n\t\t",
            "\t",
            "return",
            " ",
            "6",
            "\n\t",
            "\t",
            "else",
            ":",
            "\n\t\t",
            "\t",
            "return",
            " ",
            "0",
            "\n",
            "\t",
            "if",
            " len",
            "(",
            "A",
            ")",
            " ==",
            " ",
            "8",
            ":",
            "\n\t",
            "\t",
            "if",
            " A",
            "[",
            "0",
            "]",
            " >",
            " A",
            "[",
            "1",
            "]:",
            "\n\t\t",
            "\t",
            "return",
            " ",
            "1",
            "\n\t",
            "\t",
            "elif",
            " A",
            "[",
            "1",
            "]",
            " >",
            " A",
            "[",
            "2",
            "]:",
            "\n\t\t",
            "\t",
            "return",
            " ",
            "2",
            "\n\t",
            "\t",
            "elif",
            " A",
            "[",
            "2",
            "]",
            " >",
            " A",
            "[",
            "3",
            "]:",
            "\n\t\t",
            "\t",
            "return",
            " ",
            "3",
            "\n\t",
            "\t",
            "elif",
            " A",
            "[",
            "3",
            "]",
            " >",
            " A",
            "[",
            "4",
            "]:",
            "\n\t\t",
            "\t",
            "return",
            " ",
            "4",
            "\n\t",
            "\t",
            "elif",
            " A",
            "[",
            "4",
            "]",
            " >",
            " A",
            "[",
            "5",
            "]:",
            "\n\t\t",
            "\t",
            "return",
            " ",
            "5",
            "\n\t",
            "\t",
            "elif",
            " A",
            "[",
            "5",
            "]",
            " >",
            " A",
            "[",
            "6",
            "]:",
            "\n\t\t",
            "\t",
            "return",
            " ",
            "6",
            "\n\t",
            "\t",
            "elif",
            " A",
            "[",
            "6",
            "]",
            " >",
            " A",
            "[",
            "7",
            "]:",
            "\n\t\t",
            "\t",
            "return",
            " ",
            "7",
            "\n\t",
            "\t",
            "else",
            ":",
            "\n\t\t",
            "\t",
            "return",
            " ",
            "0",
            "\n",
            "\t",
            "if",
            " len",
            "(",
            "A",
            ")",
            " ==",
            " ",
            "9",
            ":",
            "\n\t",
            "\t",
            "if",
            " A",
            "[",
            "0",
            "]",
            " >",
            " A",
            "[",
            "1",
            "]:",
            "\n\t\t",
            "\t",
            "return",
            " ",
            "1",
            "\n\t",
            "\t",
            "elif",
            " A",
            "[",
            "1",
            "]",
            " >",
            " A",
            "[",
            "2",
            "]:",
            "\n\t\t",
            "\t",
            "return",
            " ",
            "2",
            "\n\t",
            "\t",
            "elif",
            " A",
            "[",
            "2",
            "]",
            " >",
            " A",
            "[",
            "3",
            "]:",
            "\n\t\t",
            "\t",
            "return",
            " ",
            "3",
            "\n\t",
            "\t",
            "elif",
            " A",
            "[",
            "3",
            "]",
            " >",
            " A",
            "[",
            "4",
            "]:",
            "\n\t\t",
            "\t",
            "return",
            " ",
            "4",
            "\n\t",
            "\t",
            "elif",
            " A",
            "[",
            "4",
            "]",
            " >",
            " A",
            "[",
            "5",
            "]:",
            "\n\t\t",
            "\t",
            "return",
            " ",
            "5",
            "\n\t",
            "\t",
            "elif",
            " A",
            "[",
            "5",
            "]",
            " >",
            " A",
            "[",
            "6",
            "]:",
            "\n\t\t",
            "\t",
            "return",
            " ",
            "6",
            "\n\t",
            "\t",
            "elif",
            " A",
            "[",
            "6",
            "]",
            " >",
            " A",
            "[",
            "7",
            "]:",
            "\n\t\t",
            "\t",
            "return",
            " ",
            "7",
            "\n\t",
            "\t",
            "elif",
            " A",
            "[",
            "7",
            "]",
            " >",
            " A",
            "[",
            "8",
            "]:",
            "\n\t\t",
            "\t",
            "return",
            " ",
            "8",
            "\n\t",
            "\t",
            "else",
            ":",
            "\n\t\t",
            "\t",
            "return",
            " ",
            "0",
            "\n",
            "\t",
            "if",
            " len",
            "(",
            "A",
            ")",
            " ==",
            " ",
            "1",
            "0",
            ":",
            "\n\t",
            "\t",
            "if",
            " A",
            "[",
            "0",
            "]",
            " >",
            " A",
            "[",
            "1",
            "]:",
            "\n\t\t",
            "\t",
            "return",
            " ",
            "1",
            "\n\t",
            "\t",
            "elif",
            " A",
            "[",
            "1",
            "]",
            " >",
            " A",
            "[",
            "2",
            "]:",
            "\n\t\t",
            "\t",
            "return",
            " ",
            "2",
            "\n\t",
            "\t",
            "elif",
            " A",
            "[",
            "2",
            "]",
            " >",
            " A",
            "[",
            "3",
            "]:",
            "\n\t\t",
            "\t",
            "return",
            " ",
            "3",
            "\n\t",
            "\t",
            "elif",
            " A",
            "[",
            "3",
            "]",
            " >",
            " A",
            "[",
            "4",
            "]:",
            "\n\t\t",
            "\t",
            "return",
            " ",
            "4",
            "\n\t",
            "\t",
            "elif",
            " A",
            "[",
            "4",
            "]",
            " >",
            " A",
            "[",
            "5",
            "]:",
            "\n\t\t",
            "\t",
            "return",
            " ",
            "5",
            "\n\t",
            "\t",
            "elif",
            " A",
            "[",
            "5",
            "]",
            " >",
            " A",
            "[",
            "6",
            "]:",
            "\n\t\t",
            "\t",
            "return",
            " ",
            "6",
            "\n\t",
            "\t",
            "elif",
            " A",
            "[",
            "6",
            "]",
            " >",
            " A",
            "[",
            "7",
            "]:",
            "\n\t\t",
            "\t",
            "return",
            " ",
            "7",
            "\n\t",
            "\t",
            "elif",
            " A",
            "[",
            "7",
            "]",
            " >",
            " A",
            "[",
            "8",
            "]:",
            "\n\t\t",
            "\t",
            "return",
            " ",
            "8",
            "\n\t",
            "\t",
            "elif",
            " A",
            "[",
            "8",
            "]",
            " >",
            " A",
            "[",
            "9",
            "]:",
            "\n\t\t",
            "\t",
            "return",
            " ",
            "9",
            "\n\t",
            "\t",
            "else",
            ":",
            "\n\t\t",
            "\t",
            "return",
            " ",
            "0",
            "\n",
            "\t",
            "if",
            " len",
            "(",
            "A",
            ")",
            " ==",
            " ",
            "1",
            "1",
            ":",
            "\n\t",
            "\t",
            "if",
            " A",
            "[",
            "0",
            "]",
            " >",
            " A",
            "[",
            "1",
            "]:",
            "\n\t\t",
            "\t",
            "return",
            " ",
            "1",
            "\n\t",
            "\t",
            "elif",
            " A",
            "[",
            "1",
            "]",
            " >",
            " A",
            "[",
            "2",
            "]:",
            "\n\t\t",
            "\t",
            "return",
            " ",
            "2",
            "\n\t"
        ]
    },
    {
        "task_id": 383,
        "prompt": "Write a python function to toggle all odd bits of a given number.\n\ndef even_bit_toggle_number(n) : \n",
        "answer": "def even_bit_toggle_number(n) : \n\treturn n ^ 0xAAAAAAAA\n\n",
        "test_list": [
            "assert even_bit_toggle_number(10) == 15",
            "assert even_bit_toggle_number(20) == 1",
            "assert even_bit_toggle_number(30) == 11"
        ],
        "answer_list": [
            "\t",
            "return",
            " n",
            " ^",
            " ",
            "0",
            "x",
            "AAAAAAAA",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 384,
        "prompt": "Write a python function to find the frequency of the smallest value in a given array.\n\ndef frequency_Of_Smallest(n,arr): \n",
        "answer": "def frequency_Of_Smallest(n,arr): \n\tarr.sort() \n\treturn arr.count(arr[0]) \n\n",
        "test_list": [
            "assert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1",
            "assert frequency_Of_Smallest(7,[3,1,2,5,6,2,3]) == 1",
            "assert frequency_Of_Smallest(7,[3,3,6,3,7,4,9]) == 3"
        ],
        "answer_list": [
            "\t",
            "arr",
            ".",
            "sort",
            "()",
            " \n",
            "\t",
            "return",
            " arr",
            ".",
            "count",
            "(",
            "arr",
            "[",
            "0",
            "])",
            " \n",
            "\n",
            "n"
        ]
    },
    {
        "task_id": 385,
        "prompt": "Write a python function to find then'th perrin number using recursion.\n\ndef get_perrin(n):\n",
        "answer": "def get_perrin(n):\n\tif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn 2 * get_perrin(n-1) + 1\n\n",
        "test_list": [
            "assert get_perrin(9) == 12",
            "assert get_perrin(4) == 2",
            "assert get_perrin(6) == 5"
        ],
        "answer_list": [
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "1",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "2",
            " *",
            " get",
            "_",
            "per",
            "rin",
            "(",
            "n",
            "-",
            "1",
            ")",
            " +",
            " ",
            "1",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 386,
        "prompt": "Write a python function to find out the minimum no of swaps required for bracket balancing in the given string.\n\ndef swap_count(s):\n",
        "answer": "def swap_count(s):\n\tstack = []\n\tcount = 0\n\tfor i in s:\n\t\tif i == '(':\n\t\t\tstack.append(i)\n\t\telse:\n\t\t\tif len(stack) == 0:\n\t\t\t\tcount += 1\n\t\t\telse:\n\t\t\t\tstack.pop()\n\treturn count + len(stack)\n\n",
        "test_list": [
            "assert swap_count(\"[]][][\") == 2",
            "assert swap_count(\"[[][]]\") == 0",
            "assert swap_count(\"[[][]]][\") == 1"
        ],
        "answer_list": [
            "\t",
            "stack",
            " =",
            " []",
            "\n",
            "\t",
            "count",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " s",
            ":",
            "\n\t",
            "\t",
            "if",
            " i",
            " ==",
            " '",
            "(':",
            "\n\t\t",
            "\t",
            "stack",
            ".",
            "append",
            "(",
            "i",
            ")",
            "\n\t",
            "\t",
            "else",
            ":",
            "\n\t\t",
            "\t",
            "if",
            " len",
            "(",
            "stack",
            ")",
            " ==",
            " ",
            "0",
            ":",
            "\n\t\t\t",
            "\t",
            "count",
            " +=",
            " ",
            "1",
            "\n\t\t",
            "\t",
            "else",
            ":",
            "\n\t\t\t",
            "\t",
            "stack",
            ".",
            "pop",
            "()",
            "\n",
            "\t",
            "return",
            " count",
            " +",
            " len",
            "(",
            "stack",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 387,
        "prompt": "Write a python function to check whether the hexadecimal number is even or odd.\n\ndef even_or_odd(N): \n",
        "answer": "def even_or_odd(N): \n\tif N % 2 == 0: \n\t\treturn \"Even\"\n\telse: \n\t\treturn \"Odd\"\n\n",
        "test_list": [
            "assert even_or_odd(\"AB3454D\") ==\"Odd\"",
            "assert even_or_odd(\"ABC\") == \"Even\"",
            "assert even_or_odd(\"AAD\") == \"Odd\""
        ],
        "answer_list": [
            "\t",
            "if",
            " N",
            " %",
            " ",
            "2",
            " ==",
            " ",
            "0",
            ":",
            " \n\t",
            "\t",
            "return",
            " \"",
            "Even",
            "\"",
            "\n",
            "\t",
            "else",
            ":",
            " \n\t",
            "\t",
            "return",
            " \"",
            "Odd",
            "\"",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 388,
        "prompt": "Write a python function to find the highest power of 2 that is less than or equal to n.\n\ndef highest_Power_of_2(n): \n",
        "answer": "def highest_Power_of_2(n): \n\tif n == 0: \n\t\treturn 0\n\telse: \n\t\treturn 2 ** (int(math.log(n, 2))) \n\n",
        "test_list": [
            "assert highest_Power_of_2(10) == 8",
            "assert highest_Power_of_2(19) == 16",
            "assert highest_Power_of_2(32) == 32"
        ],
        "answer_list": [
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "0",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "0",
            "\n",
            "\t",
            "else",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "2",
            " **",
            " (",
            "int",
            "(",
            "math",
            ".",
            "log",
            "(",
            "n",
            ",",
            " ",
            "2",
            ")))",
            " \n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 389,
        "prompt": "Write a python function to find then'th lucas number.\n\ndef find_lucas(n): \n",
        "answer": "def find_lucas(n): \n\tif n == 0: \n\t\treturn 2\n\telif n == 1: \n\t\treturn 1\n\telse: \n\t\treturn find_lucas(n-1) + find_lucas(n-2)\n\n",
        "test_list": [
            "assert find_lucas(9) == 76",
            "assert find_lucas(4) == 7",
            "assert find_lucas(3) == 4"
        ],
        "answer_list": [
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "0",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "2",
            "\n",
            "\t",
            "elif",
            " n",
            " ==",
            " ",
            "1",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "1",
            "\n",
            "\t",
            "else",
            ":",
            " \n\t",
            "\t",
            "return",
            " find",
            "_",
            "luc",
            "as",
            "(",
            "n",
            "-",
            "1",
            ")",
            " +",
            " find",
            "_",
            "luc",
            "as",
            "(",
            "n",
            "-",
            "2",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 390,
        "prompt": "Write a python function to insert a given string at the beginning of all items in a list.\n\ndef add_string(list,string):\n",
        "answer": "def add_string(list,string):\n\tnew_list = []\n\tfor i in list:\n\t\tnew_list.append(string + i)\n\treturn new_list\n\n",
        "test_list": [
            "assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']",
            "assert add_string(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']",
            "assert add_string([5,6,7,8],'string{0}')==['string5', 'string6', 'string7', 'string8']"
        ],
        "answer_list": [
            "\t",
            "new",
            "_",
            "list",
            " =",
            " []",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " list",
            ":",
            "\n\t",
            "\t",
            "new",
            "_",
            "list",
            ".",
            "append",
            "(",
            "string",
            " +",
            " i",
            ")",
            "\n",
            "\t",
            "return",
            " new",
            "_",
            "list",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 391,
        "prompt": "Write a python function to convert more than one list to nested dictionary.\n\ndef convert_list_dictionary(l1, l2, l3):\n",
        "answer": "def convert_list_dictionary(l1, l2, l3):\n\td = {}\n\tfor i in range(len(l1)):\n\t\td[l1[i]] = {}\n\t\td[l1[i]]['name'] = l2[i]\n\t\td[l1[i]]['age'] = l3[i]\n\treturn d\n\n",
        "test_list": [
            "assert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]",
            "assert convert_list_dictionary([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]",
            "assert convert_list_dictionary([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]"
        ],
        "answer_list": [
            "\t",
            "d",
            " =",
            " {}",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "len",
            "(",
            "l",
            "1",
            ")):",
            "\n\t",
            "\t",
            "d",
            "[",
            "l",
            "1",
            "[",
            "i",
            "]]",
            " =",
            " {}",
            "\n\t",
            "\t",
            "d",
            "[",
            "l",
            "1",
            "[",
            "i",
            "]]",
            "['",
            "name",
            "']",
            " =",
            " l",
            "2",
            "[",
            "i",
            "]",
            "\n\t",
            "\t",
            "d",
            "[",
            "l",
            "1",
            "[",
            "i",
            "]]",
            "['",
            "age",
            "']",
            " =",
            " l",
            "3",
            "[",
            "i",
            "]",
            "\n",
            "\t",
            "return",
            " d",
            "\n",
            "\n",
            "l"
        ]
    },
    {
        "task_id": 392,
        "prompt": "Write a python function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n\ndef get_max_sum (n):\n",
        "answer": "def get_max_sum (n):\n\tif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n\n",
        "test_list": [
            "assert get_max_sum(60) == 106",
            "assert get_max_sum(10) == 12",
            "assert get_max_sum(2) == 2"
        ],
        "answer_list": [
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "1",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "return",
            " max",
            "(",
            "get",
            "_",
            "max",
            "_",
            "sum",
            "(",
            "n",
            "/",
            "2",
            ")",
            " +",
            " get",
            "_",
            "max",
            "_",
            "sum",
            "(",
            "n",
            "/",
            "3",
            ")",
            " +",
            " get",
            "_",
            "max",
            "_",
            "sum",
            "(",
            "n",
            "/",
            "4",
            ")",
            " +",
            " get",
            "_",
            "max",
            "_",
            "sum",
            "(",
            "n",
            "/",
            "5",
            "),",
            " n",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 393,
        "prompt": "Write a python function to find the list with maximum length using lambda function.\n\ndef max_length_list(input_list):\n",
        "answer": "def max_length_list(input_list):\n\treturn max(input_list, key=lambda x: len(x))\n\n",
        "test_list": [
            "assert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])",
            "assert max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(5,[1,2,3,4,5])",
            "assert max_length_list([[3,4,5],[6,7,8,9],[10,11,12]])==(4,[6,7,8,9])"
        ],
        "answer_list": [
            "\t",
            "return",
            " max",
            "(",
            "input",
            "_",
            "list",
            ",",
            " key",
            "=",
            "lambda",
            " x",
            ":",
            " len",
            "(",
            "x",
            "))",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 394,
        "prompt": "Write a python function to check if given tuple is distinct or not.\n\ndef check_distinct(test_tup):\n",
        "answer": "def check_distinct(test_tup):\n\tif len(test_tup) == len(set(test_tup)):\n\t\treturn True\n\telse:\n\t\treturn False\n\n",
        "test_list": [
            "assert check_distinct((1, 4, 5, 6, 1, 4)) == False",
            "assert check_distinct((1, 4, 5, 6)) == True",
            "assert check_distinct((2, 3, 4, 5, 6)) == True"
        ],
        "answer_list": [
            "\t",
            "if",
            " len",
            "(",
            "test",
            "_",
            "tup",
            ")",
            " ==",
            " len",
            "(",
            "set",
            "(",
            "test",
            "_",
            "tup",
            ")):",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 395,
        "prompt": "Write a python function to find the first non-repeated character in a given string.\n\ndef first_non_repeating_character(str1):\n",
        "answer": "def first_non_repeating_character(str1):\n\tfor i in str1:\n\t\tif str1.count(i) == 1:\n\t\t\treturn i\n\treturn None\n\n",
        "test_list": [
            "assert first_non_repeating_character(\"abcabc\") == None",
            "assert first_non_repeating_character(\"abc\") == \"a\"",
            "assert first_non_repeating_character(\"ababc\") == \"c\""
        ],
        "answer_list": [
            "\t",
            "for",
            " i",
            " in",
            " str",
            "1",
            ":",
            "\n\t",
            "\t",
            "if",
            " str",
            "1",
            ".",
            "count",
            "(",
            "i",
            ")",
            " ==",
            " ",
            "1",
            ":",
            "\n\t\t",
            "\t",
            "return",
            " i",
            "\n",
            "\t",
            "return",
            " None",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 396,
        "prompt": "Write a python function to check whether the given string starts and ends with the same character or not using regex.\n\ndef check_char(string): \n",
        "answer": "def check_char(string): \n\treturn bool(re.match(r'^(.)\\1+$', string))\n\n",
        "test_list": [
            "assert check_char(\"abba\") == \"Valid\"",
            "assert check_char(\"a\") == \"Valid\"",
            "assert check_char(\"abcd\") == \"Invalid\""
        ],
        "answer_list": [
            "\t",
            "return",
            " bool",
            "(",
            "re",
            ".",
            "match",
            "(",
            "r",
            "'^",
            "(.",
            ")\\",
            "1",
            "+$",
            "',",
            " string",
            "))",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 397,
        "prompt": "Write a python function to find the median of three specific numbers.\n\ndef median_numbers(a,b,c):\n",
        "answer": "def median_numbers(a,b,c):\n\tnumbers = [a,b,c]\n\tnumbers.sort()\n\treturn numbers[1]\n\n",
        "test_list": [
            "assert median_numbers(25,55,65)==55.0",
            "assert median_numbers(20,10,30)==20.0",
            "assert median_numbers(15,45,75)==45.0"
        ],
        "answer_list": [
            "\t",
            "numbers",
            " =",
            " [",
            "a",
            ",",
            "b",
            ",",
            "c",
            "]",
            "\n",
            "\t",
            "numbers",
            ".",
            "sort",
            "()",
            "\n",
            "\t",
            "return",
            " numbers",
            "[",
            "1",
            "]",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 398,
        "prompt": "Write a python function to compute the sum of digits of each number of a given list.\n\ndef sum_of_digits(nums):\n",
        "answer": "def sum_of_digits(nums):\n\tsum = 0\n\tfor num in nums:\n\t\tsum += sum_of_digits_helper(num)\n\treturn sum\n\n",
        "test_list": [
            "assert sum_of_digits([10,2,56])==14",
            "assert sum_of_digits([[10,20,4,5,'b',70,'a']])==19",
            "assert sum_of_digits([10,20,-4,5,-70])==19"
        ],
        "answer_list": [
            "\t",
            "sum",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " num",
            " in",
            " nums",
            ":",
            "\n\t",
            "\t",
            "sum",
            " +=",
            " sum",
            "_",
            "of",
            "_",
            "digits",
            "_",
            "helper",
            "(",
            "num",
            ")",
            "\n",
            "\t",
            "return",
            " sum",
            "\n",
            "\n",
            "def"
        ]
    },
    {
        "task_id": 399,
        "prompt": "Write a python function to perform the mathematical bitwise xor operation across the given tuples.\n\ndef bitwise_xor(test_tup1, test_tup2):\n",
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n\t\"\"\"\n\t>>> bitwise_xor((1, 0, 1), (0, 1, 0))\n\t(1, 1, 1)\n\t\"\"\"\n\treturn tuple(i ^ j for i, j in zip(test_tup1, test_tup2))\n\n",
        "test_list": [
            "assert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)",
            "assert bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)",
            "assert bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)"
        ],
        "answer_list": [
            "\t",
            "\"\"\"",
            "\n",
            "\t",
            ">>>",
            " bit",
            "wise",
            "_",
            "xor",
            "((",
            "1",
            ",",
            " ",
            "0",
            ",",
            " ",
            "1",
            "),",
            " (",
            "0",
            ",",
            " ",
            "1",
            ",",
            " ",
            "0",
            "))",
            "\n",
            "\t",
            "(",
            "1",
            ",",
            " ",
            "1",
            ",",
            " ",
            "1",
            ")",
            "\n",
            "\t",
            "\"\"\"",
            "\n",
            "\t",
            "return",
            " tuple",
            "(",
            "i",
            " ^",
            " j",
            " for",
            " i",
            ",",
            " j",
            " in",
            " zip",
            "(",
            "test",
            "_",
            "tup",
            "1",
            ",",
            " test",
            "_",
            "tup",
            "2",
            "))",
            "\n",
            "\n",
            "if"
        ]
    },
    {
        "task_id": 400,
        "prompt": "Write a python function to extract the frequency of unique tuples in the given list order irrespective.\n\ndef extract_freq(test_list):\n",
        "answer": "def extract_freq(test_list):\n\tfreq_dict = {}\n\tfor i in test_list:\n\t\tif i in freq_dict:\n\t\t\tfreq_dict[i] += 1\n\t\telse:\n\t\t\tfreq_dict[i] = 1\n\treturn freq_dict\n\n",
        "test_list": [
            "assert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3",
            "assert extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)] ) == 4",
            "assert extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)] ) == 4"
        ],
        "answer_list": [
            "\t",
            "freq",
            "_",
            "dict",
            " =",
            " {}",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " test",
            "_",
            "list",
            ":",
            "\n\t",
            "\t",
            "if",
            " i",
            " in",
            " freq",
            "_",
            "dict",
            ":",
            "\n\t\t",
            "\t",
            "freq",
            "_",
            "dict",
            "[",
            "i",
            "]",
            " +=",
            " ",
            "1",
            "\n\t",
            "\t",
            "else",
            ":",
            "\n\t\t",
            "\t",
            "freq",
            "_",
            "dict",
            "[",
            "i",
            "]",
            " =",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " freq",
            "_",
            "dict",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 401,
        "prompt": "Write a python function to perform index wise addition of tuple elements in the given two nested tuples.\n\ndef add_nested_tuples(test_tup1, test_tup2):\n",
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n\treturn tuple(map(sum, zip(test_tup1, test_tup2)))\n\n",
        "test_list": [
            "assert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))",
            "assert add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))",
            "assert add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))"
        ],
        "answer_list": [
            "\t",
            "return",
            " tuple",
            "(",
            "map",
            "(",
            "sum",
            ",",
            " zip",
            "(",
            "test",
            "_",
            "tup",
            "1",
            ",",
            " test",
            "_",
            "tup",
            "2",
            ")))",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 402,
        "prompt": "Write a python function to compute the value of ncr%p.\n\ndef ncr_modp(n, r, p): \n",
        "answer": "def ncr_modp(n, r, p): \n\treturn (fact(n) * pow(fact(r), p-2, p) * pow(fact(n-r), p-2, p)) % p\n\n",
        "test_list": [
            "assert ncr_modp(10,2,13)==6",
            "assert ncr_modp(15,12,43)==25",
            "assert ncr_modp(17,9,18)==10"
        ],
        "answer_list": [
            "\t",
            "return",
            " (",
            "fact",
            "(",
            "n",
            ")",
            " *",
            " pow",
            "(",
            "fact",
            "(",
            "r",
            "),",
            " p",
            "-",
            "2",
            ",",
            " p",
            ")",
            " *",
            " pow",
            "(",
            "fact",
            "(",
            "n",
            "-",
            "r",
            "),",
            " p",
            "-",
            "2",
            ",",
            " p",
            "))",
            " %",
            " p",
            "\n",
            "\n",
            "#"
        ]
    },
    {
        "task_id": 403,
        "prompt": "Write a python function to check if a url is valid or not using regex.\n\ndef is_valid_URL(str):\n",
        "answer": "def is_valid_URL(str):\n\tregex = re.compile(\n\t\tr'^(?:http|ftp)s?://' # http:// or https://\n\t\tr'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|' #domain...\n\t\tr'localhost|' #localhost...\n\t\tr'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})' #...or ip\n\t\tr'(?::\\d+)?' # optional port\n\t\tr'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n\tif re.match(regex, str):\n\t\treturn True\n\telse:\n\t\treturn False\n\n",
        "test_list": [
            "assert is_valid_URL(\"https://www.google.com\") == True",
            "assert is_valid_URL(\"https:/www.gmail.com\") == False",
            "assert is_valid_URL(\"https:// www.redit.com\") == False"
        ],
        "answer_list": [
            "\t",
            "regex",
            " =",
            " re",
            ".",
            "compile",
            "(",
            "\n\t",
            "\t",
            "r",
            "'^",
            "(?:",
            "http",
            "|",
            "ftp",
            ")",
            "s",
            "?",
            "://",
            "'",
            " #",
            " http",
            "://",
            " or",
            " https",
            "://",
            "\n\t",
            "\t",
            "r",
            "'",
            "(?:",
            "(?:",
            "[",
            "A",
            "-",
            "Z",
            "0",
            "-",
            "9",
            "](",
            "?:",
            "[",
            "A",
            "-",
            "Z",
            "0",
            "-",
            "9",
            "-",
            "]{",
            "0",
            ",",
            "6",
            "1",
            "}[",
            "A",
            "-",
            "Z",
            "0",
            "-",
            "9",
            "])",
            "?",
            "\\.",
            ")+",
            "(?:",
            "[",
            "A",
            "-",
            "Z",
            "]{",
            "2",
            ",",
            "6",
            "}\\",
            ".",
            "?",
            "|[",
            "A",
            "-",
            "Z",
            "0",
            "-",
            "9",
            "-",
            "]{",
            "2",
            ",",
            "}\\",
            ".",
            "?",
            ")|",
            "'",
            " #",
            "domain",
            "...",
            "\n\t",
            "\t",
            "r",
            "'",
            "localhost",
            "|'",
            " #",
            "localhost",
            "...",
            "\n\t",
            "\t",
            "r",
            "'\\",
            "d",
            "{",
            "1",
            ",",
            "3",
            "}\\",
            ".\\",
            "d",
            "{",
            "1",
            ",",
            "3",
            "}\\",
            ".\\",
            "d",
            "{",
            "1",
            ",",
            "3",
            "}\\",
            ".\\",
            "d",
            "{",
            "1",
            ",",
            "3",
            "})",
            "'",
            " #",
            "...",
            "or",
            " ip",
            "\n\t",
            "\t",
            "r",
            "'",
            "(?",
            "::",
            "\\",
            "d",
            "+",
            ")?",
            "'",
            " #",
            " optional",
            " port",
            "\n\t",
            "\t",
            "r",
            "'",
            "(?:",
            "/?",
            "|[",
            "/?",
            "]\\",
            "S",
            "+",
            ")$",
            "',",
            " re",
            ".",
            "IG",
            "NO",
            "REC",
            "ASE",
            ")",
            "\n",
            "\t",
            "if",
            " re",
            ".",
            "match",
            "(",
            "regex",
            ",",
            " str",
            "):",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 404,
        "prompt": "Write a python function to find the minimum of two numbers.\n\ndef minimum(a,b):   \n",
        "answer": "def minimum(a,b):   \n\tif a<b:\n\t\treturn a\n\telse:\n\t\treturn b\nprint(minimum(10,20))\nprint(minimum(20,10))\nprint(minimum(10,10))\n\n",
        "test_list": [
            "assert minimum(1,2) == 1",
            "assert minimum(-5,-4) == -5",
            "assert minimum(0,0) == 0"
        ],
        "answer_list": [
            "\t",
            "if",
            " a",
            "<",
            "b",
            ":",
            "\n\t",
            "\t",
            "return",
            " a",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "return",
            " b",
            "\n",
            "print",
            "(",
            "minimum",
            "(",
            "1",
            "0",
            ",",
            "2",
            "0",
            "))",
            "\n",
            "print",
            "(",
            "minimum",
            "(",
            "2",
            "0",
            ",",
            "1",
            "0",
            "))",
            "\n",
            "print",
            "(",
            "minimum",
            "(",
            "1",
            "0",
            ",",
            "1",
            "0",
            "))",
            "\n",
            "\n",
            "#"
        ]
    },
    {
        "task_id": 405,
        "prompt": "Write a python function to check whether an element exists within a tuple.\n\ndef check_tuplex(tuplex,tuple1): \n",
        "answer": "def check_tuplex(tuplex,tuple1): \n\tfor i in range(len(tuplex)): \n\t\tif tuplex[i] == tuple1: \n\t\t\treturn True\n\treturn False\n\n",
        "test_list": [
            "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True",
            "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'5')==False",
            "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\",\"e\"),3)==True"
        ],
        "answer_list": [
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "len",
            "(",
            "tup",
            "lex",
            ")):",
            " \n\t",
            "\t",
            "if",
            " tup",
            "lex",
            "[",
            "i",
            "]",
            " ==",
            " tuple",
            "1",
            ":",
            " \n\t\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "return",
            " False",
            "\n",
            "\n",
            "tup"
        ]
    },
    {
        "task_id": 406,
        "prompt": "Write a python function to find the parity of a given number.\n\ndef find_Parity(x): \n",
        "answer": "def find_Parity(x): \n\tif x%2 == 0:\n\t\treturn \"Even\"\n\telse:\n\t\treturn \"Odd\"\n\n",
        "test_list": [
            "assert find_Parity(12) == \"Even Parity\"",
            "assert find_Parity(7) == \"Odd Parity\"",
            "assert find_Parity(10) == \"Even Parity\""
        ],
        "answer_list": [
            "\t",
            "if",
            " x",
            "%",
            "2",
            " ==",
            " ",
            "0",
            ":",
            "\n\t",
            "\t",
            "return",
            " \"",
            "Even",
            "\"",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "return",
            " \"",
            "Odd",
            "\"",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 407,
        "prompt": "Write a python function to create the next bigger number by rearranging the digits of a given number.\n\ndef rearrange_bigger(n):\n",
        "answer": "def rearrange_bigger(n):\n\treturn int(''.join(sorted(str(n), reverse=True)))\n\n",
        "test_list": [
            "assert rearrange_bigger(12)==21",
            "assert rearrange_bigger(10)==False",
            "assert rearrange_bigger(102)==120"
        ],
        "answer_list": [
            "\t",
            "return",
            " int",
            "('",
            "'.",
            "join",
            "(",
            "sorted",
            "(",
            "str",
            "(",
            "n",
            "),",
            " reverse",
            "=",
            "True",
            ")))",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 408,
        "prompt": "Write a python function to find k number of pairs which consist of one element from the first array and one element from the second array.\n\ndef k_smallest_pairs(nums1, nums2, k):\n",
        "answer": "def k_smallest_pairs(nums1, nums2, k):\n\t# Your code goes here\n\tpairs = []\n\tfor i in range(len(nums1)):\n\t\tfor j in range(len(nums2)):\n\t\t\tif len(pairs) < k:\n\t\t\t\tpairs.append((nums1[i], nums2[j]))\n\t\t\telse:\n\t\t\t\tpairs.sort()\n\t\t\t\tpairs.pop()\n\t\t\t\tpairs.append((nums1[i], nums2[j]))\n\treturn pairs\n\n",
        "test_list": [
            "assert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]",
            "assert k_smallest_pairs([1,3,7],[2,4,6],1)==[[1, 2]]",
            "assert k_smallest_pairs([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]"
        ],
        "answer_list": [
            "\t",
            "#",
            " Your",
            " code",
            " goes",
            " here",
            "\n",
            "\t",
            "pairs",
            " =",
            " []",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "len",
            "(",
            "nums",
            "1",
            ")):",
            "\n\t",
            "\t",
            "for",
            " j",
            " in",
            " range",
            "(",
            "len",
            "(",
            "nums",
            "2",
            ")):",
            "\n\t\t",
            "\t",
            "if",
            " len",
            "(",
            "pairs",
            ")",
            " <",
            " k",
            ":",
            "\n\t\t\t",
            "\t",
            "pairs",
            ".",
            "append",
            "((",
            "nums",
            "1",
            "[",
            "i",
            "],",
            " nums",
            "2",
            "[",
            "j",
            "]))",
            "\n\t\t",
            "\t",
            "else",
            ":",
            "\n\t\t\t",
            "\t",
            "pairs",
            ".",
            "sort",
            "()",
            "\n\t\t\t",
            "\t",
            "pairs",
            ".",
            "pop",
            "()",
            "\n\t\t\t",
            "\t",
            "pairs",
            ".",
            "append",
            "((",
            "nums",
            "1",
            "[",
            "i",
            "],",
            " nums",
            "2",
            "[",
            "j",
            "]))",
            "\n",
            "\t",
            "return",
            " pairs",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 409,
        "prompt": "Write a python function to find the minimum product from the pairs of tuples within a given list.\n\ndef min_product_tuple(list1):\n",
        "answer": "def min_product_tuple(list1):\n\tmin_product = 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "test_list": [
            "assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8",
            "assert min_product_tuple([(10,20), (15,2), (5,10)] )==30",
            "assert min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==100"
        ],
        "answer_list": [
            "\t",
            "min",
            "_",
            "product",
            " =",
            " ",
            "1",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0"
        ]
    },
    {
        "task_id": 410,
        "prompt": "Write a python function to find the minimum value in a given heterogeneous list.\n\ndef min_val(listval):\n",
        "answer": "def min_val(listval):\n\tminval = listval[0]\n\tfor i in listval:\n\t\tif i < minval:\n\t\t\tminval = i\n\treturn minval\n\n",
        "test_list": [
            "assert min_val(['Python', 3, 2, 4, 5, 'version'])==2",
            "assert min_val(['Python', 15, 20, 25])==15",
            "assert min_val(['Python', 30, 20, 40, 50, 'version'])==20"
        ],
        "answer_list": [
            "\t",
            "min",
            "val",
            " =",
            " list",
            "val",
            "[",
            "0",
            "]",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " list",
            "val",
            ":",
            "\n\t",
            "\t",
            "if",
            " i",
            " <",
            " min",
            "val",
            ":",
            "\n\t\t",
            "\t",
            "min",
            "val",
            " =",
            " i",
            "\n",
            "\t",
            "return",
            " min",
            "val",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 411,
        "prompt": "Write a python function to convert the given snake case string to camel case string by using regex.\n\ndef snake_to_camel(word):\n",
        "answer": "def snake_to_camel(word):\n\treturn ''.join(x.capitalize() or '_' for x in word.split('_'))\n\n",
        "test_list": [
            "assert snake_to_camel('android_tv') == 'AndroidTv'",
            "assert snake_to_camel('google_pixel') == 'GooglePixel'",
            "assert snake_to_camel('apple_watch') == 'AppleWatch'"
        ],
        "answer_list": [
            "\t",
            "return",
            " ''.",
            "join",
            "(",
            "x",
            ".",
            "capitalize",
            "()",
            " or",
            " '_'",
            " for",
            " x",
            " in",
            " word",
            ".",
            "split",
            "('_",
            "'))",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 412,
        "prompt": "Write a python function to remove odd numbers from a given list.\n\ndef remove_odd(l):\n",
        "answer": "def remove_odd(l):\n\treturn [i for i in l if i%2==0]\n\n",
        "test_list": [
            "assert remove_odd([1,2,3]) == [2]",
            "assert remove_odd([2,4,6]) == [2,4,6]",
            "assert remove_odd([10,20,3]) == [10,20]"
        ],
        "answer_list": [
            "\t",
            "return",
            " [",
            "i",
            " for",
            " i",
            " in",
            " l",
            " if",
            " i",
            "%",
            "2",
            "==",
            "0",
            "]",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 413,
        "prompt": "Write a python function to extract the nth element from a given list of tuples.\n\ndef extract_nth_element(list1, n):\n",
        "answer": "def extract_nth_element(list1, n):\n\treturn [x[n] for x in list1]\n\n",
        "test_list": [
            "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']",
            "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]",
            "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]"
        ],
        "answer_list": [
            "\t",
            "return",
            " [",
            "x",
            "[",
            "n",
            "]",
            " for",
            " x",
            " in",
            " list",
            "1",
            "]",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 414,
        "prompt": "Write a python function to check whether the value exists in a sequence or not.\n\ndef overlapping(list1,list2):  \n",
        "answer": "def overlapping(list1,list2):  \n\tfor i in list1:\n\t\tif i in list2:\n\t\t\treturn True\n\treturn False\n\n",
        "test_list": [
            "assert overlapping([1,2,3,4,5],[6,7,8,9]) == False",
            "assert overlapping([1,2,3],[4,5,6]) == False",
            "assert overlapping([1,4,5],[1,4,5]) == True"
        ],
        "answer_list": [
            "\t",
            "for",
            " i",
            " in",
            " list",
            "1",
            ":",
            "\n\t",
            "\t",
            "if",
            " i",
            " in",
            " list",
            "2",
            ":",
            "\n\t\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "return",
            " False",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 415,
        "prompt": "Write a python function to find a pair with highest product from a given array of integers.\n\ndef max_Product(arr): \n",
        "answer": "def max_Product(arr): \n\tn = len(arr) \n\tmax_product = 0\n\tfor i in range(n): \n\t\tfor j in range(i + 1, n): \n\t\t\tmax_product = max(max_product, arr[i] * arr[j]) \n\treturn max_product \n\n",
        "test_list": [
            "assert max_Product([1,2,3,4,7,0,8,4]) == (7,8)",
            "assert max_Product([0,-1,-2,-4,5,0,-6]) == (-4,-6)",
            "assert max_Product([1,2,3]) == (2,3)"
        ],
        "answer_list": [
            "\t",
            "n",
            " =",
            " len",
            "(",
            "arr",
            ")",
            " \n",
            "\t",
            "max",
            "_",
            "product",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "n",
            "):",
            " \n\t",
            "\t",
            "for",
            " j",
            " in",
            " range",
            "(",
            "i",
            " +",
            " ",
            "1",
            ",",
            " n",
            "):",
            " \n\t\t",
            "\t",
            "max",
            "_",
            "product",
            " =",
            " max",
            "(",
            "max",
            "_",
            "product",
            ",",
            " arr",
            "[",
            "i",
            "]",
            " *",
            " arr",
            "[",
            "j",
            "])",
            " \n",
            "\t",
            "return",
            " max",
            "_",
            "product",
            " \n",
            "\n",
            "arr"
        ]
    },
    {
        "task_id": 416,
        "prompt": "Write a python function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\n\ndef breakSum(n): \n",
        "answer": "def breakSum(n): \n\tif n == 0: \n\t\treturn 0\n\tif n < 0: \n\t\treturn -1\n\tif n == 1: \n\t\treturn 1\n\tif n == 2: \n\t\treturn 2\n\tif n == 3: \n\t\treturn 4\n\tif n == 4: \n\t\treturn 7\n\tif n == 5: \n\t\treturn 11\n\tif n == 6: \n\t\treturn 16\n\tif n == 7: \n\t\treturn 22\n\tif n == 8: \n\t\treturn 29\n\tif n == 9: \n\t\treturn 37\n\tif n == 10: \n\t\treturn 46\n\tif n == 11: \n\t\treturn 56\n\tif n == 12: \n\t\treturn 67\n\tif n == 13: \n\t\treturn 79\n\tif n == 14: \n\t\treturn 92\n\tif n == 15: \n\t\treturn 106\n\tif n == 16: \n\t\treturn 121\n\tif n == 17: \n\t\treturn 137\n\tif n == 18: \n\t\treturn 154\n\tif n == 19: \n\t\treturn 172\n\tif n == 20: \n\t\treturn 191\n\tif n == 21: \n\t\treturn 211\n\tif n == 22: \n\t\treturn 232\n\tif n == 23: \n\t\treturn 254\n\tif n == 24: \n\t\treturn 277\n\tif n == 25: \n\t\treturn 301\n\tif n == 26: \n\t\treturn 326\n\tif n == 27: \n\t\treturn 352\n\tif n == 28: \n\t\treturn 379\n\tif n == 29: \n\t\treturn 407\n\tif n == 30: \n\t\treturn 436\n\tif n == 31: \n\t\treturn 466\n\tif n == 32: \n\t\treturn 497\n\tif n == 33: \n\t\treturn 529\n\tif n == 34: \n\t\treturn 562\n\tif n == 35: \n\t\treturn 596\n\tif n == 36: \n\t\treturn 631\n\tif n == 37: \n\t\treturn 667\n\tif n == 38: \n\t\treturn 704\n\tif n == 39: \n\t\treturn 742\n\tif n == 40: \n\t\treturn 781\n\tif n == 41: \n\t\treturn 821\n\tif n == 42: \n\t\treturn 862\n\tif n == 43: \n\t\treturn 904\n\tif n == 44: \n\t\treturn 947\n\tif n == 45: \n\t\treturn 991\n\tif n == 46: \n\t\treturn 1036\n\tif n == 47: \n\t\treturn 1082\n\tif n == 48: \n\t\treturn 1129\n\tif n == 49: \n\t\treturn 1177\n\tif n == 50: \n\t\treturn 1226\n\tif n == 51: \n\t\treturn 1276\n\tif n == 52: \n\t\treturn 1327\n\tif n == 53: \n\t\treturn 1379\n\tif n == 54: \n\t\treturn 1432\n\tif n == 55: \n\t\treturn 1486\n\tif n == 56: \n\t\treturn 1541\n\tif n == 57: \n\t\treturn 1597\n\tif n == 58: \n\t\treturn 1654\n\tif n == 59: \n\t\treturn 1712\n\tif n == 60: \n\t\treturn 1771\n\tif n == 61: \n\t\treturn 1831\n\tif n == 62: \n\t\treturn 1892\n\tif n == 63: \n\t\treturn 1954",
        "test_list": [
            "assert breakSum(12) == 13",
            "assert breakSum(24) == 27",
            "assert breakSum(23) == 23"
        ],
        "answer_list": [
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "0",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "0",
            "\n",
            "\t",
            "if",
            " n",
            " <",
            " ",
            "0",
            ":",
            " \n\t",
            "\t",
            "return",
            " -",
            "1",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "1",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "1",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "2",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "2",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "3",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "4",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "4",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "7",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "5",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "1",
            "1",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "6",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "1",
            "6",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "7",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "2",
            "2",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "8",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "2",
            "9",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "9",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "3",
            "7",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "1",
            "0",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "4",
            "6",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "1",
            "1",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "5",
            "6",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "1",
            "2",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "6",
            "7",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "1",
            "3",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "7",
            "9",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "1",
            "4",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "9",
            "2",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "1",
            "5",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "1",
            "0",
            "6",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "1",
            "6",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "1",
            "2",
            "1",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "1",
            "7",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "1",
            "3",
            "7",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "1",
            "8",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "1",
            "5",
            "4",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "1",
            "9",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "1",
            "7",
            "2",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "2",
            "0",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "1",
            "9",
            "1",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "2",
            "1",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "2",
            "1",
            "1",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "2",
            "2",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "2",
            "3",
            "2",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "2",
            "3",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "2",
            "5",
            "4",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "2",
            "4",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "2",
            "7",
            "7",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "2",
            "5",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "3",
            "0",
            "1",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "2",
            "6",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "3",
            "2",
            "6",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "2",
            "7",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "3",
            "5",
            "2",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "2",
            "8",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "3",
            "7",
            "9",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "2",
            "9",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "4",
            "0",
            "7",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "3",
            "0",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "4",
            "3",
            "6",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "3",
            "1",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "4",
            "6",
            "6",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "3",
            "2",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "4",
            "9",
            "7",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "3",
            "3",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "5",
            "2",
            "9",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "3",
            "4",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "5",
            "6",
            "2",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "3",
            "5",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "5",
            "9",
            "6",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "3",
            "6",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "6",
            "3",
            "1",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "3",
            "7",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "6",
            "6",
            "7",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "3",
            "8",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "7",
            "0",
            "4",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "3",
            "9",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "7",
            "4",
            "2",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "4",
            "0",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "7",
            "8",
            "1",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "4",
            "1",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "8",
            "2",
            "1",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "4",
            "2",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "8",
            "6",
            "2",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "4",
            "3",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "9",
            "0",
            "4",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "4",
            "4",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "9",
            "4",
            "7",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "4",
            "5",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "9",
            "9",
            "1",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "4",
            "6",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "1",
            "0",
            "3",
            "6",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "4",
            "7",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "1",
            "0",
            "8",
            "2",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "4",
            "8",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "1",
            "1",
            "2",
            "9",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "4",
            "9",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "1",
            "1",
            "7",
            "7",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "5",
            "0",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "1",
            "2",
            "2",
            "6",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "5",
            "1",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "1",
            "2",
            "7",
            "6",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "5",
            "2",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "1",
            "3",
            "2",
            "7",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "5",
            "3",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "1",
            "3",
            "7",
            "9",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "5",
            "4",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "1",
            "4",
            "3",
            "2",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "5",
            "5",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "1",
            "4",
            "8",
            "6",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "5",
            "6",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "1",
            "5",
            "4",
            "1",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "5",
            "7",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "1",
            "5",
            "9",
            "7",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "5",
            "8",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "1",
            "6",
            "5",
            "4",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "5",
            "9",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "1",
            "7",
            "1",
            "2",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "6",
            "0",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "1",
            "7",
            "7",
            "1",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "6",
            "1",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "1",
            "8",
            "3",
            "1",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "6",
            "2",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "1",
            "8",
            "9",
            "2",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "6",
            "3",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "1",
            "9",
            "5",
            "4"
        ]
    },
    {
        "task_id": 417,
        "prompt": "Write a python function to find common first element in given list of tuple.\n\ndef group_tuples(Input): \n",
        "answer": "def group_tuples(Input): \n\t# your code goes here\n\t# return common element\n\treturn None\n\n",
        "test_list": [
            "assert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]",
            "assert group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]",
            "assert group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]"
        ],
        "answer_list": [
            "\t",
            "#",
            " your",
            " code",
            " goes",
            " here",
            "\n",
            "\t",
            "#",
            " return",
            " common",
            " element",
            "\n",
            "\t",
            "return",
            " None",
            "\n",
            "\n",
            "#"
        ]
    },
    {
        "task_id": 418,
        "prompt": "Write a python function to find the sublist having maximum length.\n\ndef Find_Max(lst): \n",
        "answer": "def Find_Max(lst): \n\tmax_lst = [] \n\tfor i in range(len(lst)): \n\t\tfor j in range(i + 1, len(lst)): \n\t\t\tif len(max_lst) < len(lst[i:j]): \n\t\t\t\tmax_lst = lst[i:j] \n\treturn max_lst \n\n",
        "test_list": [
            "assert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']",
            "assert Find_Max([[1],[1,2],[1,2,3]]) == [1,2,3]",
            "assert Find_Max([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]"
        ],
        "answer_list": [
            "\t",
            "max",
            "_",
            "lst",
            " =",
            " []",
            " \n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "len",
            "(",
            "lst",
            ")):",
            " \n\t",
            "\t",
            "for",
            " j",
            " in",
            " range",
            "(",
            "i",
            " +",
            " ",
            "1",
            ",",
            " len",
            "(",
            "lst",
            ")):",
            " \n\t\t",
            "\t",
            "if",
            " len",
            "(",
            "max",
            "_",
            "lst",
            ")",
            " <",
            " len",
            "(",
            "lst",
            "[",
            "i",
            ":",
            "j",
            "]):",
            " \n\t\t\t",
            "\t",
            "max",
            "_",
            "lst",
            " =",
            " lst",
            "[",
            "i",
            ":",
            "j",
            "]",
            " \n",
            "\t",
            "return",
            " max",
            "_",
            "lst",
            " \n",
            "\n",
            "lst"
        ]
    },
    {
        "task_id": 419,
        "prompt": "Write a python function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n\ndef round_and_sum(list1):\n",
        "answer": "def round_and_sum(list1):\n\treturn sum([round(num) for num in list1]) * len(list1)\n\n",
        "test_list": [
            "assert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243",
            "assert round_and_sum([5,2,9,24.3,29])==345",
            "assert round_and_sum([25.0,56.7,89.2])==513"
        ],
        "answer_list": [
            "\t",
            "return",
            " sum",
            "([",
            "round",
            "(",
            "num",
            ")",
            " for",
            " num",
            " in",
            " list",
            "1",
            "])",
            " *",
            " len",
            "(",
            "list",
            "1",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 420,
        "prompt": "Write a python function to find the cube sum of first n even natural numbers.\n\ndef cube_Sum(n): \n",
        "answer": "def cube_Sum(n): \n\tsum = 0\n\tfor i in range(0,n):\n\t\tsum += pow(i,3)\n\treturn sum\n\n",
        "test_list": [
            "assert cube_Sum(2) == 72",
            "assert cube_Sum(3) == 288",
            "assert cube_Sum(4) == 800"
        ],
        "answer_list": [
            "\t",
            "sum",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "0",
            ",",
            "n",
            "):",
            "\n\t",
            "\t",
            "sum",
            " +=",
            " pow",
            "(",
            "i",
            ",",
            "3",
            ")",
            "\n",
            "\t",
            "return",
            " sum",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 421,
        "prompt": "Write a python function to concatenate each element of tuple by the delimiter.\n\ndef concatenate_tuple(test_tup):\n",
        "answer": "def concatenate_tuple(test_tup):\n\treturn (\"\".join(test_tup))\n\n",
        "test_list": [
            "assert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'",
            "assert concatenate_tuple((\"QWE\", \"is\", 4, \"RTY\") ) == 'QWE-is-4-RTY'",
            "assert concatenate_tuple((\"ZEN\", \"is\", 4, \"OP\") ) == 'ZEN-is-4-OP'"
        ],
        "answer_list": [
            "\t",
            "return",
            " (",
            "\"\"",
            ".",
            "join",
            "(",
            "test",
            "_",
            "tup",
            "))",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 422,
        "prompt": "Write a python function to find the average of cubes of first n natural numbers.\n\ndef find_Average_Of_Cube(n):  \n",
        "answer": "def find_Average_Of_Cube(n):  \n\tsum=0\n\tfor i in range(1,n+1):\n\t\tsum=sum+i*i*i\n\treturn sum/n\n\n",
        "test_list": [
            "assert find_Average_Of_Cube(2) == 4.5",
            "assert find_Average_Of_Cube(3) == 12",
            "assert find_Average_Of_Cube(1) == 1"
        ],
        "answer_list": [
            "\t",
            "sum",
            "=",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "1",
            ",",
            "n",
            "+",
            "1",
            "):",
            "\n\t",
            "\t",
            "sum",
            "=",
            "sum",
            "+",
            "i",
            "*",
            "i",
            "*",
            "i",
            "\n",
            "\t",
            "return",
            " sum",
            "/",
            "n",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 423,
        "prompt": "Write a python function to solve gold mine problem.\n\ndef get_maxgold(gold, m, n): \n",
        "answer": "def get_maxgold(gold, m, n): \n\tgold_table = [[0 for x in range(n+1)] for x in range(m+1)] \n\n",
        "test_list": [
            "assert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16",
            "assert get_maxgold([[10,20],[30,40]],2,2)==70",
            "assert get_maxgold([[4,9],[3,7]],2,2)==13"
        ],
        "answer_list": [
            "\t",
            "gold",
            "_",
            "table",
            " =",
            " [[",
            "0",
            " for",
            " x",
            " in",
            " range",
            "(",
            "n",
            "+",
            "1",
            ")]",
            " for",
            " x",
            " in",
            " range",
            "(",
            "m",
            "+",
            "1",
            ")]",
            " \n\n",
            "\t"
        ]
    },
    {
        "task_id": 424,
        "prompt": "Write a python function to extract only the rear index element of each string in the given tuple.\n\ndef extract_rear(test_tuple):\n",
        "answer": "def extract_rear(test_tuple):\n\treturn test_tuple[::-1]\n\n",
        "test_list": [
            "assert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']",
            "assert extract_rear(('Avenge', 'for', 'People') ) == ['e', 'r', 'e']",
            "assert extract_rear(('Gotta', 'get', 'go') ) == ['a', 't', 'o']"
        ],
        "answer_list": [
            "\t",
            "return",
            " test",
            "_",
            "tuple",
            "[",
            "::-",
            "1",
            "]",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 425,
        "prompt": "Write a python function to count the number of sublists containing a particular element.\n\ndef count_element_in_list(list1, x): \n",
        "answer": "def count_element_in_list(list1, x): \n\tcount = 0\n\tfor i in range(len(list1)): \n\t\tif list1[i] == x: \n\t\t\tcount += 1\n\treturn count\n\n",
        "test_list": [
            "assert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3",
            "assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3",
            "assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1"
        ],
        "answer_list": [
            "\t",
            "count",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "len",
            "(",
            "list",
            "1",
            ")):",
            " \n\t",
            "\t",
            "if",
            " list",
            "1",
            "[",
            "i",
            "]",
            " ==",
            " x",
            ":",
            " \n\t\t",
            "\t",
            "count",
            " +=",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " count",
            "\n",
            "\n",
            "list"
        ]
    },
    {
        "task_id": 426,
        "prompt": "Write a python function to filter odd numbers using lambda function.\n\ndef filter_oddnumbers(nums):\n",
        "answer": "def filter_oddnumbers(nums):\n\treturn list(filter(lambda x: (x%2!= 0), nums))\n\n",
        "test_list": [
            "assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]",
            "assert filter_oddnumbers([10,20,45,67,84,93])==[45,67,93]",
            "assert filter_oddnumbers([5,7,9,8,6,4,3])==[5,7,9,3]"
        ],
        "answer_list": [
            "\t",
            "return",
            " list",
            "(",
            "filter",
            "(",
            "lambda",
            " x",
            ":",
            " (",
            "x",
            "%",
            "2",
            "!=",
            " ",
            "0",
            "),",
            " nums",
            "))",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 427,
        "prompt": "Write a python function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\n\ndef change_date_format(dt):\n",
        "answer": "def change_date_format(dt):\n\treturn '-'.join(reversed(dt.split('-')))\n\n",
        "test_list": [
            "assert change_date_format(\"2026-01-02\") == '02-01-2026'",
            "assert change_date_format(\"2020-11-13\") == '13-11-2020'",
            "assert change_date_format(\"2021-04-26\") == '26-04-2021'"
        ],
        "answer_list": [
            "\t",
            "return",
            " '-",
            "'.",
            "join",
            "(",
            "reversed",
            "(",
            "dt",
            ".",
            "split",
            "('-",
            "')))",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 428,
        "prompt": "Write a python function to sort the given array by using shell sort.\n\ndef shell_sort(my_list):\n",
        "answer": "def shell_sort(my_list):\n\tgap = len(my_list) // 2\n\twhile gap > 0:\n\t\tfor i in range(gap, len(my_list)):\n\t\t\ttemp = my_list[i]\n\t\t\tj = i\n\t\t\twhile j >= gap and my_list[j - gap] > temp:\n\t\t\t\tmy_list[j] = my_list[j - gap]\n\t\t\t\tj -= gap\n\t\t\tmy_list[j] = temp\n\t\tgap //= 2\n\treturn my_list\n\n",
        "test_list": [
            "assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]",
            "assert shell_sort([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]",
            "assert shell_sort([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]"
        ],
        "answer_list": [
            "\t",
            "gap",
            " =",
            " len",
            "(",
            "my",
            "_",
            "list",
            ")",
            " //",
            " ",
            "2",
            "\n",
            "\t",
            "while",
            " gap",
            " >",
            " ",
            "0",
            ":",
            "\n\t",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "gap",
            ",",
            " len",
            "(",
            "my",
            "_",
            "list",
            ")):",
            "\n\t\t",
            "\t",
            "temp",
            " =",
            " my",
            "_",
            "list",
            "[",
            "i",
            "]",
            "\n\t\t",
            "\t",
            "j",
            " =",
            " i",
            "\n\t\t",
            "\t",
            "while",
            " j",
            " >=",
            " gap",
            " and",
            " my",
            "_",
            "list",
            "[",
            "j",
            " -",
            " gap",
            "]",
            " >",
            " temp",
            ":",
            "\n\t\t\t",
            "\t",
            "my",
            "_",
            "list",
            "[",
            "j",
            "]",
            " =",
            " my",
            "_",
            "list",
            "[",
            "j",
            " -",
            " gap",
            "]",
            "\n\t\t\t",
            "\t",
            "j",
            " -=",
            " gap",
            "\n\t\t",
            "\t",
            "my",
            "_",
            "list",
            "[",
            "j",
            "]",
            " =",
            " temp",
            "\n\t",
            "\t",
            "gap",
            " //",
            "=",
            " ",
            "2",
            "\n",
            "\t",
            "return",
            " my",
            "_",
            "list",
            "\n",
            "\n",
            "my"
        ]
    },
    {
        "task_id": 429,
        "prompt": "Write a python function to extract the elementwise and tuples from the given two tuples.\n\ndef and_tuples(test_tup1, test_tup2):\n",
        "answer": "def and_tuples(test_tup1, test_tup2):\n\treturn tuple(i and j for i, j in zip(test_tup1, test_tup2))\n\n",
        "test_list": [
            "assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)",
            "assert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)",
            "assert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)"
        ],
        "answer_list": [
            "\t",
            "return",
            " tuple",
            "(",
            "i",
            " and",
            " j",
            " for",
            " i",
            ",",
            " j",
            " in",
            " zip",
            "(",
            "test",
            "_",
            "tup",
            "1",
            ",",
            " test",
            "_",
            "tup",
            "2",
            "))",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 430,
        "prompt": "Write a python function to find the directrix of a parabola.\n\ndef parabola_directrix(a, b, c): \n",
        "answer": "def parabola_directrix(a, b, c): \n\treturn (-b + (b**2 - 4*a*c)**0.5)/(2*a)\n\n",
        "test_list": [
            "assert parabola_directrix(5,3,2)==-198",
            "assert parabola_directrix(9,8,4)==-2336",
            "assert parabola_directrix(2,4,6)==-130"
        ],
        "answer_list": [
            "\t",
            "return",
            " (-",
            "b",
            " +",
            " (",
            "b",
            "**",
            "2",
            " -",
            " ",
            "4",
            "*",
            "a",
            "*",
            "c",
            ")**",
            "0",
            ".",
            "5",
            ")/(",
            "2",
            "*",
            "a",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 431,
        "prompt": "Write a python function that takes two lists and returns true if they have at least one common element.\n\ndef common_element(list1, list2):\n",
        "answer": "def common_element(list1, list2):\n\tfor i in list1:\n\t\tif i in list2:\n\t\t\treturn True\n\treturn False\n\n",
        "test_list": [
            "assert common_element([1,2,3,4,5], [5,6,7,8,9])==True",
            "assert common_element([1,2,3,4,5], [6,7,8,9])==None",
            "assert common_element(['a','b','c'], ['d','b','e'])==True"
        ],
        "answer_list": [
            "\t",
            "for",
            " i",
            " in",
            " list",
            "1",
            ":",
            "\n\t",
            "\t",
            "if",
            " i",
            " in",
            " list",
            "2",
            ":",
            "\n\t\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "return",
            " False",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 432,
        "prompt": "Write a python function to find the median of a trapezium.\n\ndef median_trapezium(base1,base2,height):\n",
        "answer": "def median_trapezium(base1,base2,height):\n\treturn (base1+base2)/2*height\n\n",
        "test_list": [
            "assert median_trapezium(15,25,35)==20",
            "assert median_trapezium(10,20,30)==15",
            "assert median_trapezium(6,9,4)==7.5"
        ],
        "answer_list": [
            "\t",
            "return",
            " (",
            "base",
            "1",
            "+",
            "base",
            "2",
            ")/",
            "2",
            "*",
            "height",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 433,
        "prompt": "Write a python function to check whether the entered number is greater than the elements of the given array.\n\ndef check_greater(arr, number):\n",
        "answer": "def check_greater(arr, number):\n\tfor i in arr:\n\t\tif i > number:\n\t\t\treturn True\n\treturn False\n\n",
        "test_list": [
            "assert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'",
            "assert check_greater([2, 3, 4, 5, 6], 8) == 'Yes, the entered number is greater than those in the array'",
            "assert check_greater([9, 7, 4, 8, 6, 1], 11) == 'Yes, the entered number is greater than those in the array'"
        ],
        "answer_list": [
            "\t",
            "for",
            " i",
            " in",
            " arr",
            ":",
            "\n\t",
            "\t",
            "if",
            " i",
            " >",
            " number",
            ":",
            "\n\t\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "return",
            " False",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 434,
        "prompt": "Write a python function that matches a string that has an a followed by one or more b's.\n\ndef text_match_one(text):\n",
        "answer": "def text_match_one(text):\n\tif text[0] == 'a' and text[1] == 'b':\n\t\treturn True\n\telse:\n\t\treturn False\n\n",
        "test_list": [
            "assert text_match_one(\"ac\")==('Not matched!')",
            "assert text_match_one(\"dc\")==('Not matched!')",
            "assert text_match_one(\"abba\")==('Found a match!')"
        ],
        "answer_list": [
            "\t",
            "if",
            " text",
            "[",
            "0",
            "]",
            " ==",
            " '",
            "a",
            "'",
            " and",
            " text",
            "[",
            "1",
            "]",
            " ==",
            " '",
            "b",
            "':",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 435,
        "prompt": "Write a python function to find the last digit of a given number.\n\ndef last_Digit(n) :\n",
        "answer": "def last_Digit(n) :\n\treturn n % 10\n\n",
        "test_list": [
            "assert last_Digit(123) == 3",
            "assert last_Digit(25) == 5",
            "assert last_Digit(30) == 0"
        ],
        "answer_list": [
            "\t",
            "return",
            " n",
            " %",
            " ",
            "1",
            "0",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 436,
        "prompt": "Write a python function to print negative numbers in a list.\n\ndef neg_nos(list1):\n",
        "answer": "def neg_nos(list1):\n\tfor i in list1:\n\t\tif i < 0:\n\t\t\tprint(i)\n\n",
        "test_list": [
            "assert neg_nos([-1,4,5,-6]) == -1,-6",
            "assert neg_nos([-1,-2,3,4]) == -1,-2",
            "assert neg_nos([-7,-6,8,9]) == -7,-6"
        ],
        "answer_list": [
            "\t",
            "for",
            " i",
            " in",
            " list",
            "1",
            ":",
            "\n\t",
            "\t",
            "if",
            " i",
            " <",
            " ",
            "0",
            ":",
            "\n\t\t",
            "\t",
            "print",
            "(",
            "i",
            ")",
            "\n",
            "\n",
            "list"
        ]
    },
    {
        "task_id": 437,
        "prompt": "Write a python function to remove odd characters in a string.\n\ndef remove_odd(str1):\n",
        "answer": "def remove_odd(str1):\n\treturn ''.join([i for i in str1 if i%2==0])\n\n",
        "test_list": [
            "assert remove_odd(\"python\")==(\"yhn\")",
            "assert remove_odd(\"program\")==(\"rga\")",
            "assert remove_odd(\"language\")==(\"agae\")"
        ],
        "answer_list": [
            "\t",
            "return",
            " ''.",
            "join",
            "([",
            "i",
            " for",
            " i",
            " in",
            " str",
            "1",
            " if",
            " i",
            "%",
            "2",
            "==",
            "0",
            "])",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 438,
        "prompt": "Write a python function to count bidirectional tuple pairs.\n\ndef count_bidirectional(test_list):\n",
        "answer": "def count_bidirectional(test_list):\n\tcount = 0\n\tfor i in range(len(test_list)):\n\t\tfor j in range(len(test_list)):\n\t\t\tif i!= j:\n\t\t\t\tif (test_list[i], test_list[j]) in test_list and (test_list[j], test_list[i]) in test_list:\n\t\t\t\t\tcount += 1\n\treturn count\n\n",
        "test_list": [
            "assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'",
            "assert count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '2'",
            "assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ) == '4'"
        ],
        "answer_list": [
            "\t",
            "count",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "len",
            "(",
            "test",
            "_",
            "list",
            ")):",
            "\n\t",
            "\t",
            "for",
            " j",
            " in",
            " range",
            "(",
            "len",
            "(",
            "test",
            "_",
            "list",
            ")):",
            "\n\t\t",
            "\t",
            "if",
            " i",
            "!=",
            " j",
            ":",
            "\n\t\t\t",
            "\t",
            "if",
            " (",
            "test",
            "_",
            "list",
            "[",
            "i",
            "],",
            " test",
            "_",
            "list",
            "[",
            "j",
            "])",
            " in",
            " test",
            "_",
            "list",
            " and",
            " (",
            "test",
            "_",
            "list",
            "[",
            "j",
            "],",
            " test",
            "_",
            "list",
            "[",
            "i",
            "])",
            " in",
            " test",
            "_",
            "list",
            ":",
            "\n\t\t\t\t",
            "\t",
            "count",
            " +=",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " count",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 439,
        "prompt": "Write a python function to convert a list of multiple integers into a single integer.\n\ndef multiple_to_single(L):\n",
        "answer": "def multiple_to_single(L):\n\treturn int(\"\".join(map(str, L)))\n\n",
        "test_list": [
            "assert multiple_to_single([11, 33, 50])==113350",
            "assert multiple_to_single([-1,2,3,4,5,6])==-123456",
            "assert multiple_to_single([10,15,20,25])==10152025"
        ],
        "answer_list": [
            "\t",
            "return",
            " int",
            "(\"",
            "\".",
            "join",
            "(",
            "map",
            "(",
            "str",
            ",",
            " L",
            ")))",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 440,
        "prompt": "Write a python function to find all adverbs and their positions in a given sentence.\n\ndef find_adverb_position(text):\n",
        "answer": "def find_adverb_position(text):\n\tadverbs = []\n\tfor i in range(len(text)):\n\t\tif text[i] == 'a' or text[i] == 'e' or text[i] == 'i' or text[i] == 'o' or text[i] == 'u':\n\t\t\tadverbs.append(i)\n\treturn adverbs\n\n",
        "test_list": [
            "assert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')",
            "assert find_adverb_position(\"seriously!! there are many roses\")==(0, 9, 'seriously')",
            "assert find_adverb_position(\"unfortunately!! sita is going to home\")==(0, 13, 'unfortunately')"
        ],
        "answer_list": [
            "\t",
            "ad",
            "ver",
            "bs",
            " =",
            " []",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "len",
            "(",
            "text",
            ")):",
            "\n\t",
            "\t",
            "if",
            " text",
            "[",
            "i",
            "]",
            " ==",
            " '",
            "a",
            "'",
            " or",
            " text",
            "[",
            "i",
            "]",
            " ==",
            " '",
            "e",
            "'",
            " or",
            " text",
            "[",
            "i",
            "]",
            " ==",
            " '",
            "i",
            "'",
            " or",
            " text",
            "[",
            "i",
            "]",
            " ==",
            " '",
            "o",
            "'",
            " or",
            " text",
            "[",
            "i",
            "]",
            " ==",
            " '",
            "u",
            "':",
            "\n\t\t",
            "\t",
            "ad",
            "ver",
            "bs",
            ".",
            "append",
            "(",
            "i",
            ")",
            "\n",
            "\t",
            "return",
            " ad",
            "ver",
            "bs",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 441,
        "prompt": "Write a python function to find the surface area of a cube.\n\ndef surfacearea_cube(l):\n",
        "answer": "def surfacearea_cube(l):\n\treturn 6*(l**2)\n\n",
        "test_list": [
            "assert surfacearea_cube(5)==150",
            "assert surfacearea_cube(3)==54",
            "assert surfacearea_cube(10)==600"
        ],
        "answer_list": [
            "\t",
            "return",
            " ",
            "6",
            "*(",
            "l",
            "**",
            "2",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 442,
        "prompt": "Write a python function to find the ration of positive numbers in an array of integers.\n\ndef positive_count(nums):\n",
        "answer": "def positive_count(nums):\n\tcount = 0\n\tfor i in nums:\n\t\tif i > 0:\n\t\t\tcount += 1\n\treturn count/len(nums)\n\n",
        "test_list": [
            "assert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54",
            "assert positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.69",
            "assert positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.56"
        ],
        "answer_list": [
            "\t",
            "count",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " nums",
            ":",
            "\n\t",
            "\t",
            "if",
            " i",
            " >",
            " ",
            "0",
            ":",
            "\n\t\t",
            "\t",
            "count",
            " +=",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " count",
            "/",
            "len",
            "(",
            "nums",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 443,
        "prompt": "Write a python function to find the largest negative number from the given list.\n\ndef largest_neg(list1): \n",
        "answer": "def largest_neg(list1): \n\tlist1.sort()\n\tfor i in range(len(list1)):\n\t\tif list1[i] < 0:\n\t\t\treturn list1[i]\n\treturn 0\n\n",
        "test_list": [
            "assert largest_neg([1,2,3,-4,-6]) == -6",
            "assert largest_neg([1,2,3,-8,-9]) == -9",
            "assert largest_neg([1,2,3,4,-1]) == -1"
        ],
        "answer_list": [
            "\t",
            "list",
            "1",
            ".",
            "sort",
            "()",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "len",
            "(",
            "list",
            "1",
            ")):",
            "\n\t",
            "\t",
            "if",
            " list",
            "1",
            "[",
            "i",
            "]",
            " <",
            " ",
            "0",
            ":",
            "\n\t\t",
            "\t",
            "return",
            " list",
            "1",
            "[",
            "i",
            "]",
            "\n",
            "\t",
            "return",
            " ",
            "0",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 444,
        "prompt": "Write a python function to trim each tuple by k in the given tuple list.\n\ndef trim_tuple(test_list, K):\n",
        "answer": "def trim_tuple(test_list, K):\n\treturn [tuple(x[0:K] + x[-K:]) for x in test_list]\n\n",
        "test_list": [
            "assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'",
            "assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1) == '[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]'",
            "assert trim_tuple([(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 1) == '[(8, 4), (8, 12), (1, 7), (6, 9)]'"
        ],
        "answer_list": [
            "\t",
            "return",
            " [",
            "tuple",
            "(",
            "x",
            "[",
            "0",
            ":",
            "K",
            "]",
            " +",
            " x",
            "[-",
            "K",
            ":])",
            " for",
            " x",
            " in",
            " test",
            "_",
            "list",
            "]",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 445,
        "prompt": "Write a python function to perform index wise multiplication of tuple elements in the given two tuples.\n\ndef index_multiplication(test_tup1, test_tup2):\n",
        "answer": "def index_multiplication(test_tup1, test_tup2):\n\treturn tuple(test_tup1[i] * test_tup2[i] for i in range(len(test_tup1)))\n\n",
        "test_list": [
            "assert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))",
            "assert index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))",
            "assert index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))"
        ],
        "answer_list": [
            "\t",
            "return",
            " tuple",
            "(",
            "test",
            "_",
            "tup",
            "1",
            "[",
            "i",
            "]",
            " *",
            " test",
            "_",
            "tup",
            "2",
            "[",
            "i",
            "]",
            " for",
            " i",
            " in",
            " range",
            "(",
            "len",
            "(",
            "test",
            "_",
            "tup",
            "1",
            ")))",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 446,
        "prompt": "Write a python function to count the occurence of all elements of list in a tuple.\n\ndef count_Occurrence(tup, lst): \n",
        "answer": "def count_Occurrence(tup, lst): \n\tcount = 0\n\tfor i in lst: \n\t\tif i in tup: \n\t\t\tcount += 1\n\treturn count\n\n",
        "test_list": [
            "assert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3",
            "assert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6",
            "assert count_Occurrence((1,2,3,4,5,6),[1,2]) == 2"
        ],
        "answer_list": [
            "\t",
            "count",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " lst",
            ":",
            " \n\t",
            "\t",
            "if",
            " i",
            " in",
            " tup",
            ":",
            " \n\t\t",
            "\t",
            "count",
            " +=",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " count",
            "\n",
            "\n",
            "tup"
        ]
    },
    {
        "task_id": 447,
        "prompt": "Write a python function to find cubes of individual elements in a list using lambda function.\n\ndef cube_nums(nums):\n",
        "answer": "def cube_nums(nums):\n\treturn list(map(lambda x: x**3, nums))\n\n",
        "test_list": [
            "assert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]",
            "assert cube_nums([10,20,30])==([1000, 8000, 27000])",
            "assert cube_nums([12,15])==([1728, 3375])"
        ],
        "answer_list": [
            "\t",
            "return",
            " list",
            "(",
            "map",
            "(",
            "lambda",
            " x",
            ":",
            " x",
            "**",
            "3",
            ",",
            " nums",
            "))",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 448,
        "prompt": "Write a python function to calculate the sum of perrin numbers.\n\ndef cal_sum(n): \n",
        "answer": "def cal_sum(n): \n\tsum = 0\n\tfor i in range(1,n+1):\n\t\tsum += 1/i\n\treturn sum\n\n",
        "test_list": [
            "assert cal_sum(9) == 49",
            "assert cal_sum(10) == 66",
            "assert cal_sum(11) == 88"
        ],
        "answer_list": [
            "\t",
            "sum",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "1",
            ",",
            "n",
            "+",
            "1",
            "):",
            "\n\t",
            "\t",
            "sum",
            " +=",
            " ",
            "1",
            "/",
            "i",
            "\n",
            "\t",
            "return",
            " sum",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 449,
        "prompt": "Write a python function to check whether the triangle is valid or not if 3 points are given.\n\ndef check_Triangle(x1,y1,x2,y2,x3,y3): \n",
        "answer": "def check_Triangle(x1,y1,x2,y2,x3,y3): \n\tif x1+x2>x3 and x1+x3>x2 and x2+x3>x1: \n\t\tif y1+y2>y3 and y1+y3>y2 and y2+y3>y1: \n\t\t\treturn True\n\t\telse: \n\t\t\treturn False\n\telse: \n\t\treturn False\n\n",
        "test_list": [
            "assert check_Triangle(1,5,2,5,4,6) == 'Yes'",
            "assert check_Triangle(1,1,1,4,1,5) == 'No'",
            "assert check_Triangle(1,1,1,1,1,1) == 'No'"
        ],
        "answer_list": [
            "\t",
            "if",
            " x",
            "1",
            "+",
            "x",
            "2",
            ">",
            "x",
            "3",
            " and",
            " x",
            "1",
            "+",
            "x",
            "3",
            ">",
            "x",
            "2",
            " and",
            " x",
            "2",
            "+",
            "x",
            "3",
            ">",
            "x",
            "1",
            ":",
            " \n\t",
            "\t",
            "if",
            " y",
            "1",
            "+",
            "y",
            "2",
            ">",
            "y",
            "3",
            " and",
            " y",
            "1",
            "+",
            "y",
            "3",
            ">",
            "y",
            "2",
            " and",
            " y",
            "2",
            "+",
            "y",
            "3",
            ">",
            "y",
            "1",
            ":",
            " \n\t\t",
            "\t",
            "return",
            " True",
            "\n\t",
            "\t",
            "else",
            ":",
            " \n\t\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "else",
            ":",
            " \n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\n",
            "x"
        ]
    },
    {
        "task_id": 450,
        "prompt": "Write a python function to extract specified size of strings from a give list of string values.\n\ndef extract_string(str, l):\n",
        "answer": "def extract_string(str, l):\n\treturn [str[i:i+l] for i in range(0, len(str), l)]\n\n",
        "test_list": [
            "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']",
            "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']",
            "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']"
        ],
        "answer_list": [
            "\t",
            "return",
            " [",
            "str",
            "[",
            "i",
            ":",
            "i",
            "+",
            "l",
            "]",
            " for",
            " i",
            " in",
            " range",
            "(",
            "0",
            ",",
            " len",
            "(",
            "str",
            "),",
            " l",
            ")]",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 451,
        "prompt": "Write a python function to remove all whitespaces from the given string using regex.\n\ndef remove_whitespaces(text1):\n",
        "answer": "def remove_whitespaces(text1):\n\treturn re.sub(r'\\s+', '', text1)\n\n",
        "test_list": [
            "assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'",
            "assert remove_whitespaces(' Google    Dart ') == 'GoogleDart'",
            "assert remove_whitespaces(' iOS    Swift ') == 'iOSSwift'"
        ],
        "answer_list": [
            "\t",
            "return",
            " re",
            ".",
            "sub",
            "(",
            "r",
            "'\\",
            "s",
            "+',",
            " '',",
            " text",
            "1",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 452,
        "prompt": "Write a python function that gives loss amount if the given amount has loss else return none.\n\ndef loss_amount(actual_cost,sale_amount): \n",
        "answer": "def loss_amount(actual_cost,sale_amount): \n\tif actual_cost > sale_amount:\n\t\treturn actual_cost - sale_amount\n\telse:\n\t\treturn None\n\n",
        "test_list": [
            "assert loss_amount(1500,1200)==None",
            "assert loss_amount(100,200)==100",
            "assert loss_amount(2000,5000)==3000"
        ],
        "answer_list": [
            "\t",
            "if",
            " actual",
            "_",
            "cost",
            " >",
            " sale",
            "_",
            "amount",
            ":",
            "\n\t",
            "\t",
            "return",
            " actual",
            "_",
            "cost",
            " -",
            " sale",
            "_",
            "amount",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "return",
            " None",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 453,
        "prompt": "Write a python function to find the sum of even factors of a number.\n\ndef sumofFactors(n) : \n",
        "answer": "def sumofFactors(n) : \n\tsum = 0\n\tfor i in range(1, n+1) : \n\t\tif n % i == 0 and i % 2 == 0 : \n\t\t\tsum += i \n\treturn sum \n\n",
        "test_list": [
            "assert sumofFactors(18) == 26",
            "assert sumofFactors(30) == 48",
            "assert sumofFactors(6) == 8"
        ],
        "answer_list": [
            "\t",
            "sum",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "1",
            ",",
            " n",
            "+",
            "1",
            ")",
            " :",
            " \n\t",
            "\t",
            "if",
            " n",
            " %",
            " i",
            " ==",
            " ",
            "0",
            " and",
            " i",
            " %",
            " ",
            "2",
            " ==",
            " ",
            "0",
            " :",
            " \n\t\t",
            "\t",
            "sum",
            " +=",
            " i",
            " \n",
            "\t",
            "return",
            " sum",
            " \n",
            "\n",
            "n"
        ]
    },
    {
        "task_id": 454,
        "prompt": "Write a python function that matches a word containing 'z'.\n\ndef text_match_wordz(text):\n",
        "answer": "def text_match_wordz(text):\n\tif 'z' in text:\n\t\treturn True\n\telse:\n\t\treturn False\n\n",
        "test_list": [
            "assert text_match_wordz(\"pythonz.\")==('Found a match!')",
            "assert text_match_wordz(\"xyz.\")==('Found a match!')",
            "assert text_match_wordz(\"  lang  .\")==('Not matched!')"
        ],
        "answer_list": [
            "\t",
            "if",
            " '",
            "z",
            "'",
            " in",
            " text",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 455,
        "prompt": "Write a python function to check whether the given month number contains 31 days or not.\n\ndef check_monthnumb_number(monthnum2):\n",
        "answer": "def check_monthnumb_number(monthnum2):\n\tif monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n\t\treturn True\n\telse:\n\t\treturn False\n\n",
        "test_list": [
            "assert check_monthnumb_number(5)==True",
            "assert check_monthnumb_number(2)==False",
            "assert check_monthnumb_number(6)==False"
        ],
        "answer_list": [
            "\t",
            "if",
            " month",
            "num",
            "2",
            " ==",
            " ",
            "1",
            " or",
            " month",
            "num",
            "2",
            " ==",
            " ",
            "3",
            " or",
            " month",
            "num",
            "2",
            " ==",
            " ",
            "5",
            " or",
            " month",
            "num",
            "2",
            " ==",
            " ",
            "7",
            " or",
            " month",
            "num",
            "2",
            " ==",
            " ",
            "8",
            " or",
            " month",
            "num",
            "2",
            " ==",
            " ",
            "1",
            "0",
            " or",
            " month",
            "num",
            "2",
            " ==",
            " ",
            "1",
            "2",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 456,
        "prompt": "Write a python function to reverse strings in a given list of string values.\n\ndef reverse_string_list(stringlist):\n",
        "answer": "def reverse_string_list(stringlist):\n\tfor i in range(len(stringlist)):\n\t\tstringlist[i] = stringlist[i][::-1]\n\treturn stringlist\n\n",
        "test_list": [
            "assert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']",
            "assert reverse_string_list(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg']",
            "assert reverse_string_list(['jack','john','mary'])==['kcaj','nhoj','yram']"
        ],
        "answer_list": [
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "len",
            "(",
            "string",
            "list",
            ")):",
            "\n\t",
            "\t",
            "string",
            "list",
            "[",
            "i",
            "]",
            " =",
            " string",
            "list",
            "[",
            "i",
            "][",
            "::-",
            "1",
            "]",
            "\n",
            "\t",
            "return",
            " string",
            "list",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 457,
        "prompt": "Write a python function to find the sublist having minimum length.\n\ndef Find_Min(lst): \n",
        "answer": "def Find_Min(lst): \n\tmin_len = len(lst[0]) \n\tfor i in range(1, len(lst)): \n\t\tif len(lst[i]) < min_len: \n\t\t\tmin_len = len(lst[i]) \n\t\t\tmin_lst = lst[i] \n\treturn min_lst \n\n",
        "test_list": [
            "assert Find_Min([[1],[1,2],[1,2,3]]) == [1]",
            "assert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]",
            "assert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']"
        ],
        "answer_list": [
            "\t",
            "min",
            "_",
            "len",
            " =",
            " len",
            "(",
            "lst",
            "[",
            "0",
            "])",
            " \n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "1",
            ",",
            " len",
            "(",
            "lst",
            ")):",
            " \n\t",
            "\t",
            "if",
            " len",
            "(",
            "lst",
            "[",
            "i",
            "])",
            " <",
            " min",
            "_",
            "len",
            ":",
            " \n\t\t",
            "\t",
            "min",
            "_",
            "len",
            " =",
            " len",
            "(",
            "lst",
            "[",
            "i",
            "])",
            " \n\t\t",
            "\t",
            "min",
            "_",
            "lst",
            " =",
            " lst",
            "[",
            "i",
            "]",
            " \n",
            "\t",
            "return",
            " min",
            "_",
            "lst",
            " \n",
            "\n",
            "lst"
        ]
    },
    {
        "task_id": 458,
        "prompt": "Write a python function to find the area of a rectangle.\n\ndef rectangle_area(l,b):\n",
        "answer": "def rectangle_area(l,b):\n\treturn l*b\n\n",
        "test_list": [
            "assert rectangle_area(10,20)==200",
            "assert rectangle_area(10,5)==50",
            "assert rectangle_area(4,2)==8"
        ],
        "answer_list": [
            "\t",
            "return",
            " l",
            "*",
            "b",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 459,
        "prompt": "Write a python function to remove uppercase substrings from a given string by using regex.\n\ndef remove_uppercase(str1):\n",
        "answer": "def remove_uppercase(str1):\n\treturn re.sub(r'[A-Z]+', '', str1)\n\n",
        "test_list": [
            "assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'",
            "assert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'",
            "assert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'"
        ],
        "answer_list": [
            "\t",
            "return",
            " re",
            ".",
            "sub",
            "(",
            "r",
            "'[",
            "A",
            "-",
            "Z",
            "]+",
            "',",
            " '',",
            " str",
            "1",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 460,
        "prompt": "Write a python function to get the first element of each sublist.\n\ndef Extract(lst): \n",
        "answer": "def Extract(lst): \n\treturn [lst[0] for lst in lst]\n\n",
        "test_list": [
            "assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]",
            "assert Extract([[1,2,3],[4, 5]]) == [1,4]",
            "assert Extract([[9,8,1],[1,2]]) == [9,1]"
        ],
        "answer_list": [
            "\t",
            "return",
            " [",
            "lst",
            "[",
            "0",
            "]",
            " for",
            " lst",
            " in",
            " lst",
            "]",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 461,
        "prompt": "Write a python function to count the upper case characters in a given string.\n\ndef upper_ctr(str):\n",
        "answer": "def upper_ctr(str):\n\tcount = 0\n\tfor i in str:\n\t\tif i.isupper():\n\t\t\tcount += 1\n\treturn count\n\n",
        "test_list": [
            "assert upper_ctr('PYthon') == 1",
            "assert upper_ctr('BigData') == 1",
            "assert upper_ctr('program') == 0"
        ],
        "answer_list": [
            "\t",
            "count",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " str",
            ":",
            "\n\t",
            "\t",
            "if",
            " i",
            ".",
            "is",
            "upper",
            "():",
            "\n\t\t",
            "\t",
            "count",
            " +=",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " count",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 462,
        "prompt": "Write a python function to find all possible combinations of the elements of a given list.\n\ndef combinations_list(list1):\n",
        "answer": "def combinations_list(list1):\n\tif len(list1) == 0:\n\t\treturn []\n\tif len(list1) == 1:\n\t\treturn [list1]\n\tresult = []\n\tfor i in range(len(list1)):\n\t\tfor j in combinations_list(list1[:i] + list1[i+1:]):\n\t\t\tresult.append([list1[i]] + j)\n\treturn result\n\n",
        "test_list": [
            "assert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]",
            "assert combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]",
            "assert combinations_list(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]"
        ],
        "answer_list": [
            "\t",
            "if",
            " len",
            "(",
            "list",
            "1",
            ")",
            " ==",
            " ",
            "0",
            ":",
            "\n\t",
            "\t",
            "return",
            " []",
            "\n",
            "\t",
            "if",
            " len",
            "(",
            "list",
            "1",
            ")",
            " ==",
            " ",
            "1",
            ":",
            "\n\t",
            "\t",
            "return",
            " [",
            "list",
            "1",
            "]",
            "\n",
            "\t",
            "result",
            " =",
            " []",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "len",
            "(",
            "list",
            "1",
            ")):",
            "\n\t",
            "\t",
            "for",
            " j",
            " in",
            " combinations",
            "_",
            "list",
            "(",
            "list",
            "1",
            "[:",
            "i",
            "]",
            " +",
            " list",
            "1",
            "[",
            "i",
            "+",
            "1",
            ":]",
            "):",
            "\n\t\t",
            "\t",
            "result",
            ".",
            "append",
            "([",
            "list",
            "1",
            "[",
            "i",
            "]]",
            " +",
            " j",
            ")",
            "\n",
            "\t",
            "return",
            " result",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 463,
        "prompt": "Write a python function to find the maximum product subarray of the given array.\n\ndef max_subarray_product(arr):\n",
        "answer": "def max_subarray_product(arr):\n\tmax_product = 0\n\tcurr_product = 1\n\tfor i in range(len(arr)):\n\t\tcurr_product *= arr[i]\n\t\tif curr_product > max_product:\n\t\t\tmax_product = curr_product\n\t\tif curr_product == 0:\n\t\t\tcurr_product = 1\n\treturn max_product\n\n",
        "test_list": [
            "assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112",
            "assert max_subarray_product([6, -3, -10, 0, 2]) == 180 ",
            "assert max_subarray_product([-2, -40, 0, -2, -3]) == 80"
        ],
        "answer_list": [
            "\t",
            "max",
            "_",
            "product",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "curr",
            "_",
            "product",
            " =",
            " ",
            "1",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "len",
            "(",
            "arr",
            ")):",
            "\n\t",
            "\t",
            "curr",
            "_",
            "product",
            " *=",
            " arr",
            "[",
            "i",
            "]",
            "\n\t",
            "\t",
            "if",
            " curr",
            "_",
            "product",
            " >",
            " max",
            "_",
            "product",
            ":",
            "\n\t\t",
            "\t",
            "max",
            "_",
            "product",
            " =",
            " curr",
            "_",
            "product",
            "\n\t",
            "\t",
            "if",
            " curr",
            "_",
            "product",
            " ==",
            " ",
            "0",
            ":",
            "\n\t\t",
            "\t",
            "curr",
            "_",
            "product",
            " =",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " max",
            "_",
            "product",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 464,
        "prompt": "Write a python function to check if all values are same in a dictionary.\n\ndef check_value(dict, n):\n",
        "answer": "def check_value(dict, n):\n\tfor i in dict:\n\t\tif dict[i]!= n:\n\t\t\treturn False\n\treturn True\n\n",
        "test_list": [
            "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False",
            "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)==True",
            "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},5)==False"
        ],
        "answer_list": [
            "\t",
            "for",
            " i",
            " in",
            " dict",
            ":",
            "\n\t",
            "\t",
            "if",
            " dict",
            "[",
            "i",
            "]",
            "!=",
            " n",
            ":",
            "\n\t\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "return",
            " True",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 465,
        "prompt": "Write a python function to drop empty items from a given dictionary.\n\ndef drop_empty(dict1):\n",
        "answer": "def drop_empty(dict1):\n\tfor key in dict1.keys():\n\t\tif dict1[key] == \"\":\n\t\t\tdel dict1[key]\n\treturn dict1\n\n",
        "test_list": [
            "assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}",
            "assert drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}",
            "assert drop_empty({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}"
        ],
        "answer_list": [
            "\t",
            "for",
            " key",
            " in",
            " dict",
            "1",
            ".",
            "keys",
            "():",
            "\n\t",
            "\t",
            "if",
            " dict",
            "1",
            "[",
            "key",
            "]",
            " ==",
            " \"\":",
            "\n\t\t",
            "\t",
            "del",
            " dict",
            "1",
            "[",
            "key",
            "]",
            "\n",
            "\t",
            "return",
            " dict",
            "1",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 466,
        "prompt": "Write a python function to find the peak element in the given array.\n\ndef find_peak(arr, n): \n",
        "answer": "def find_peak(arr, n): \n\tlow = 0\n\thigh = n-1\n\tmid = 0\n\twhile low <= high: \n\t\tmid = (high + low) // 2\n\t\tif (mid == 0 or arr[mid-1] <= arr[mid]) and (mid == n-1 or arr[mid+1] <= arr[mid]): \n\t\t\treturn mid \n\t\tif mid > 0 and arr[mid-1] > arr[mid]: \n\t\t\thigh = mid - 1\n\t\telse: \n\t\t\tlow = mid + 1\n\treturn -1\n\n",
        "test_list": [
            "assert find_peak([1, 3, 20, 4, 1, 0], 6) == 2",
            "assert find_peak([2, 3, 4, 5, 6], 5) == 4",
            "assert find_peak([8, 9, 11, 12, 14, 15], 6) == 5 "
        ],
        "answer_list": [
            "\t",
            "low",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "high",
            " =",
            " n",
            "-",
            "1",
            "\n",
            "\t",
            "mid",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "while",
            " low",
            " <=",
            " high",
            ":",
            " \n\t",
            "\t",
            "mid",
            " =",
            " (",
            "high",
            " +",
            " low",
            ")",
            " //",
            " ",
            "2",
            "\n\t",
            "\t",
            "if",
            " (",
            "mid",
            " ==",
            " ",
            "0",
            " or",
            " arr",
            "[",
            "mid",
            "-",
            "1",
            "]",
            " <=",
            " arr",
            "[",
            "mid",
            "])",
            " and",
            " (",
            "mid",
            " ==",
            " n",
            "-",
            "1",
            " or",
            " arr",
            "[",
            "mid",
            "+",
            "1",
            "]",
            " <=",
            " arr",
            "[",
            "mid",
            "]):",
            " \n\t\t",
            "\t",
            "return",
            " mid",
            " \n\t",
            "\t",
            "if",
            " mid",
            " >",
            " ",
            "0",
            " and",
            " arr",
            "[",
            "mid",
            "-",
            "1",
            "]",
            " >",
            " arr",
            "[",
            "mid",
            "]:",
            " \n\t\t",
            "\t",
            "high",
            " =",
            " mid",
            " -",
            " ",
            "1",
            "\n\t",
            "\t",
            "else",
            ":",
            " \n\t\t",
            "\t",
            "low",
            " =",
            " mid",
            " +",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " -",
            "1",
            "\n",
            "\n",
            "arr"
        ]
    },
    {
        "task_id": 467,
        "prompt": "Write a python function to convert decimal number to octal number.\n\ndef decimal_to_Octal(deciNum):\n",
        "answer": "def decimal_to_Octal(deciNum):\n\toctalNum = 0\n\ti = 0\n\twhile deciNum!= 0:\n\t\trem = deciNum % 8\n\t\toctalNum += rem * pow(10, i)\n\t\tdeciNum = deciNum // 8\n\t\ti += 1\n\treturn octalNum\n\n",
        "test_list": [
            "assert decimal_to_Octal(10) == 12",
            "assert decimal_to_Octal(2) == 2",
            "assert decimal_to_Octal(33) == 41"
        ],
        "answer_list": [
            "\t",
            "oct",
            "al",
            "Num",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "i",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "while",
            " de",
            "ci",
            "Num",
            "!=",
            " ",
            "0",
            ":",
            "\n\t",
            "\t",
            "rem",
            " =",
            " de",
            "ci",
            "Num",
            " %",
            " ",
            "8",
            "\n\t",
            "\t",
            "oct",
            "al",
            "Num",
            " +=",
            " rem",
            " *",
            " pow",
            "(",
            "1",
            "0",
            ",",
            " i",
            ")",
            "\n\t",
            "\t",
            "de",
            "ci",
            "Num",
            " =",
            " de",
            "ci",
            "Num",
            " //",
            " ",
            "8",
            "\n\t",
            "\t",
            "i",
            " +=",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " oct",
            "al",
            "Num",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 468,
        "prompt": "Write a python function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\ndef max_product(arr, n ): \n",
        "answer": "def max_product(arr, n ): \n\tmax_ending_here = 1\n\tmin_ending_here = 1\n\tmax_so_far = 1\n\tfor i in range(0, n): \n\t\ttemp = max_ending_here \n\t\tmax_ending_here = max(max_ending_here * arr[i], min_ending_here * arr[i], arr[i]) \n\t\tmin_ending_here = min(temp * arr[i], min_ending_here * arr[i], arr[i]) \n\t\tmax_so_far = max(max_so_far, max_ending_here) \n\treturn max_so_far \n\n",
        "test_list": [
            "assert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 ",
            "assert max_product([4, 42, 55, 68, 80], 5) == 50265600",
            "assert max_product([10, 22, 9, 33, 21, 50, 41, 60], 8) == 21780000 "
        ],
        "answer_list": [
            "\t",
            "max",
            "_",
            "ending",
            "_",
            "here",
            " =",
            " ",
            "1",
            "\n",
            "\t",
            "min",
            "_",
            "ending",
            "_",
            "here",
            " =",
            " ",
            "1",
            "\n",
            "\t",
            "max",
            "_",
            "so",
            "_",
            "far",
            " =",
            " ",
            "1",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "0",
            ",",
            " n",
            "):",
            " \n\t",
            "\t",
            "temp",
            " =",
            " max",
            "_",
            "ending",
            "_",
            "here",
            " \n\t",
            "\t",
            "max",
            "_",
            "ending",
            "_",
            "here",
            " =",
            " max",
            "(",
            "max",
            "_",
            "ending",
            "_",
            "here",
            " *",
            " arr",
            "[",
            "i",
            "],",
            " min",
            "_",
            "ending",
            "_",
            "here",
            " *",
            " arr",
            "[",
            "i",
            "],",
            " arr",
            "[",
            "i",
            "])",
            " \n\t",
            "\t",
            "min",
            "_",
            "ending",
            "_",
            "here",
            " =",
            " min",
            "(",
            "temp",
            " *",
            " arr",
            "[",
            "i",
            "],",
            " min",
            "_",
            "ending",
            "_",
            "here",
            " *",
            " arr",
            "[",
            "i",
            "],",
            " arr",
            "[",
            "i",
            "])",
            " \n\t",
            "\t",
            "max",
            "_",
            "so",
            "_",
            "far",
            " =",
            " max",
            "(",
            "max",
            "_",
            "so",
            "_",
            "far",
            ",",
            " max",
            "_",
            "ending",
            "_",
            "here",
            ")",
            " \n",
            "\t",
            "return",
            " max",
            "_",
            "so",
            "_",
            "far",
            " \n",
            "\n",
            "arr"
        ]
    },
    {
        "task_id": 469,
        "prompt": "Write a python function to find the maximum profit earned from a maximum of k stock transactions\n\ndef max_profit(price, k):\n",
        "answer": "def max_profit(price, k):\n\tif k > len(price):\n\t\treturn 0\n\tif k == 0:\n\t\treturn 0\n\tif k == 1:\n\t\treturn max(price[1:] - price[:-1])\n\tmax_profit = 0\n\tfor i in range(k):\n\t\tmax_profit += max(price[i+1:] - price[i:-1])\n\treturn max_profit\n\n",
        "test_list": [
            "assert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10",
            "assert max_profit([2, 4, 7, 5, 4, 3, 5], 2) == 7",
            "assert max_profit([10, 6, 8, 4, 2], 2) == 2"
        ],
        "answer_list": [
            "\t",
            "if",
            " k",
            " >",
            " len",
            "(",
            "price",
            "):",
            "\n\t",
            "\t",
            "return",
            " ",
            "0",
            "\n",
            "\t",
            "if",
            " k",
            " ==",
            " ",
            "0",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "0",
            "\n",
            "\t",
            "if",
            " k",
            " ==",
            " ",
            "1",
            ":",
            "\n\t",
            "\t",
            "return",
            " max",
            "(",
            "price",
            "[",
            "1",
            ":]",
            " -",
            " price",
            "[:-",
            "1",
            "])",
            "\n",
            "\t",
            "max",
            "_",
            "profit",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "k",
            "):",
            "\n\t",
            "\t",
            "max",
            "_",
            "profit",
            " +=",
            " max",
            "(",
            "price",
            "[",
            "i",
            "+",
            "1",
            ":]",
            " -",
            " price",
            "[",
            "i",
            ":-",
            "1",
            "])",
            "\n",
            "\t",
            "return",
            " max",
            "_",
            "profit",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 470,
        "prompt": "Write a python function to find the pairwise addition of the elements of the given tuples.\n\ndef add_pairwise(test_tup):\n",
        "answer": "def add_pairwise(test_tup):\n\tsum = 0\n\tfor i in range(len(test_tup)):\n\t\tfor j in range(i+1, len(test_tup)):\n\t\t\tsum += test_tup[i] + test_tup[j]\n\treturn sum\n\n",
        "test_list": [
            "assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)",
            "assert add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)",
            "assert add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22)"
        ],
        "answer_list": [
            "\t",
            "sum",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "len",
            "(",
            "test",
            "_",
            "tup",
            ")):",
            "\n\t",
            "\t",
            "for",
            " j",
            " in",
            " range",
            "(",
            "i",
            "+",
            "1",
            ",",
            " len",
            "(",
            "test",
            "_",
            "tup",
            ")):",
            "\n\t\t",
            "\t",
            "sum",
            " +=",
            " test",
            "_",
            "tup",
            "[",
            "i",
            "]",
            " +",
            " test",
            "_",
            "tup",
            "[",
            "j",
            "]",
            "\n",
            "\t",
            "return",
            " sum",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 471,
        "prompt": "Write a python function to find remainder of array multiplication divided by n.\n\ndef find_remainder(arr, lens, n): \n",
        "answer": "def find_remainder(arr, lens, n): \n\t# Initialize result \n\tres = 0\n\t# Traverse through all array elements \n\tfor i in range(0, lens): \n\t\tres = (res + arr[i]) % n\n\treturn res \n\n",
        "test_list": [
            "assert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9",
            "assert find_remainder([1,1,1],3,1) == 0",
            "assert find_remainder([1,2,1],3,2) == 0"
        ],
        "answer_list": [
            "\t",
            "#",
            " Initialize",
            " result",
            " \n",
            "\t",
            "res",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "#",
            " Tra",
            "verse",
            " through",
            " all",
            " array",
            " elements",
            " \n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "0",
            ",",
            " lens",
            "):",
            " \n\t",
            "\t",
            "res",
            " =",
            " (",
            "res",
            " +",
            " arr",
            "[",
            "i",
            "])",
            " %",
            " n",
            "\n",
            "\t",
            "return",
            " res",
            " \n",
            "\n",
            "#"
        ]
    },
    {
        "task_id": 472,
        "prompt": "Write a python function to check whether the given list contains consecutive numbers or not.\n\ndef check_Consecutive(l): \n",
        "answer": "def check_Consecutive(l): \n\tl.sort() \n\tfor i in range(len(l)-1): \n\t\tif l[i+1] - l[i] == 1: \n\t\t\tcontinue\n\t\telse: \n\t\t\treturn False\n\treturn True\n\n",
        "test_list": [
            "assert check_Consecutive([1,2,3,4,5]) == True",
            "assert check_Consecutive([1,2,3,5,6]) == False",
            "assert check_Consecutive([1,2,1]) == False"
        ],
        "answer_list": [
            "\t",
            "l",
            ".",
            "sort",
            "()",
            " \n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "len",
            "(",
            "l",
            ")-",
            "1",
            "):",
            " \n\t",
            "\t",
            "if",
            " l",
            "[",
            "i",
            "+",
            "1",
            "]",
            " -",
            " l",
            "[",
            "i",
            "]",
            " ==",
            " ",
            "1",
            ":",
            " \n\t\t",
            "\t",
            "continue",
            "\n\t",
            "\t",
            "else",
            ":",
            " \n\t\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "return",
            " True",
            "\n",
            "\n",
            "l"
        ]
    },
    {
        "task_id": 473,
        "prompt": "Write a python function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n\ndef tuple_intersection(test_list1, test_list2):\n",
        "answer": "def tuple_intersection(test_list1, test_list2):\n\treturn tuple(set(test_list1) & set(test_list2))\n\n",
        "test_list": [
            "assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}",
            "assert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}",
            "assert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}"
        ],
        "answer_list": [
            "\t",
            "return",
            " tuple",
            "(",
            "set",
            "(",
            "test",
            "_",
            "list",
            "1",
            ")",
            " &",
            " set",
            "(",
            "test",
            "_",
            "list",
            "2",
            "))",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 474,
        "prompt": "Write a python function to replace characters in a string.\n\ndef replace_char(str1,ch,newch):\n",
        "answer": "def replace_char(str1,ch,newch):\n\tstr1 = str1.replace(ch,newch)\n\treturn str1\n\n",
        "test_list": [
            "assert replace_char(\"polygon\",'y','l')==(\"pollgon\")",
            "assert replace_char(\"character\",'c','a')==(\"aharaater\")",
            "assert replace_char(\"python\",'l','a')==(\"python\")"
        ],
        "answer_list": [
            "\t",
            "str",
            "1",
            " =",
            " str",
            "1",
            ".",
            "replace",
            "(",
            "ch",
            ",",
            "new",
            "ch",
            ")",
            "\n",
            "\t",
            "return",
            " str",
            "1",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 475,
        "prompt": "Write a python function to sort counter by value.\n\ndef sort_counter(dict1):\n",
        "answer": "def sort_counter(dict1):\n\treturn sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n\n",
        "test_list": [
            "assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]",
            "assert sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]",
            "assert sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]"
        ],
        "answer_list": [
            "\t",
            "return",
            " sorted",
            "(",
            "dict",
            "1",
            ".",
            "items",
            "(),",
            " key",
            "=",
            "lambda",
            " x",
            ":",
            " x",
            "[",
            "1",
            "],",
            " reverse",
            "=",
            "True",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 476,
        "prompt": "Write a python function to find the sum of the largest and smallest value in a given array.\n\ndef big_sum(nums):\n",
        "answer": "def big_sum(nums):\n\treturn sum(sorted(nums)[-1:] + sorted(nums)[:1])\n\n",
        "test_list": [
            "assert big_sum([1,2,3]) == 4",
            "assert big_sum([-1,2,3,4]) == 3",
            "assert big_sum([2,3,6]) == 8"
        ],
        "answer_list": [
            "\t",
            "return",
            " sum",
            "(",
            "sorted",
            "(",
            "nums",
            ")[",
            "-",
            "1",
            ":]",
            " +",
            " sorted",
            "(",
            "nums",
            ")",
            "[:",
            "1",
            "])",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 477,
        "prompt": "Write a python function to convert the given string to lower case.\n\ndef is_lower(string):\n",
        "answer": "def is_lower(string):\n\tfor i in string:\n\t\tif i.isupper():\n\t\t\treturn False\n\treturn True\n\n",
        "test_list": [
            "assert is_lower(\"InValid\") == \"invalid\"",
            "assert is_lower(\"TruE\") == \"true\"",
            "assert is_lower(\"SenTenCE\") == \"sentence\""
        ],
        "answer_list": [
            "\t",
            "for",
            " i",
            " in",
            " string",
            ":",
            "\n\t",
            "\t",
            "if",
            " i",
            ".",
            "is",
            "upper",
            "():",
            "\n\t\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "return",
            " True",
            "\n",
            "\n",
            "def"
        ]
    },
    {
        "task_id": 478,
        "prompt": "Write a python function to remove lowercase substrings from a given string.\n\ndef remove_lowercase(str1):\n",
        "answer": "def remove_lowercase(str1):\n\tstr1 = str1.replace('a', '')\n\tstr1 = str1.replace('b', '')\n\tstr1 = str1.replace('c', '')\n\tstr1 = str1.replace('d', '')\n\tstr1 = str1.replace('e', '')\n\tstr1 = str1.replace('f', '')\n\tstr1 = str1.replace('g', '')\n\tstr1 = str1.replace('h', '')\n\tstr1 = str1.replace('i', '')\n\tstr1 = str1.replace('j', '')\n\tstr1 = str1.replace('k', '')\n\tstr1 = str1.replace('l', '')\n\tstr1 = str1.replace('m', '')\n\tstr1 = str1.replace('n', '')\n\tstr1 = str1.replace('o', '')\n\tstr1 = str1.replace('p', '')\n\tstr1 = str1.replace('q', '')\n\tstr1 = str1.replace('r', '')\n\tstr1 = str1.replace('s', '')\n\tstr1 = str1.replace('t', '')\n\tstr1 = str1.replace('u', '')\n\tstr1 = str1.replace('v', '')\n\tstr1 = str1.replace('w', '')\n\tstr1 = str1.replace('x', '')\n\tstr1 = str1.replace('y', '')\n\tstr1 = str1.replace('z', '')\n\treturn str1\n\n",
        "test_list": [
            "assert remove_lowercase(\"PYTHon\")==('PYTH')",
            "assert remove_lowercase(\"FInD\")==('FID')",
            "assert remove_lowercase(\"STRinG\")==('STRG')"
        ],
        "answer_list": [
            "\t",
            "str",
            "1",
            " =",
            " str",
            "1",
            ".",
            "replace",
            "('",
            "a",
            "',",
            " '')",
            "\n",
            "\t",
            "str",
            "1",
            " =",
            " str",
            "1",
            ".",
            "replace",
            "('",
            "b",
            "',",
            " '')",
            "\n",
            "\t",
            "str",
            "1",
            " =",
            " str",
            "1",
            ".",
            "replace",
            "('",
            "c",
            "',",
            " '')",
            "\n",
            "\t",
            "str",
            "1",
            " =",
            " str",
            "1",
            ".",
            "replace",
            "('",
            "d",
            "',",
            " '')",
            "\n",
            "\t",
            "str",
            "1",
            " =",
            " str",
            "1",
            ".",
            "replace",
            "('",
            "e",
            "',",
            " '')",
            "\n",
            "\t",
            "str",
            "1",
            " =",
            " str",
            "1",
            ".",
            "replace",
            "('",
            "f",
            "',",
            " '')",
            "\n",
            "\t",
            "str",
            "1",
            " =",
            " str",
            "1",
            ".",
            "replace",
            "('",
            "g",
            "',",
            " '')",
            "\n",
            "\t",
            "str",
            "1",
            " =",
            " str",
            "1",
            ".",
            "replace",
            "('",
            "h",
            "',",
            " '')",
            "\n",
            "\t",
            "str",
            "1",
            " =",
            " str",
            "1",
            ".",
            "replace",
            "('",
            "i",
            "',",
            " '')",
            "\n",
            "\t",
            "str",
            "1",
            " =",
            " str",
            "1",
            ".",
            "replace",
            "('",
            "j",
            "',",
            " '')",
            "\n",
            "\t",
            "str",
            "1",
            " =",
            " str",
            "1",
            ".",
            "replace",
            "('",
            "k",
            "',",
            " '')",
            "\n",
            "\t",
            "str",
            "1",
            " =",
            " str",
            "1",
            ".",
            "replace",
            "('",
            "l",
            "',",
            " '')",
            "\n",
            "\t",
            "str",
            "1",
            " =",
            " str",
            "1",
            ".",
            "replace",
            "('",
            "m",
            "',",
            " '')",
            "\n",
            "\t",
            "str",
            "1",
            " =",
            " str",
            "1",
            ".",
            "replace",
            "('",
            "n",
            "',",
            " '')",
            "\n",
            "\t",
            "str",
            "1",
            " =",
            " str",
            "1",
            ".",
            "replace",
            "('",
            "o",
            "',",
            " '')",
            "\n",
            "\t",
            "str",
            "1",
            " =",
            " str",
            "1",
            ".",
            "replace",
            "('",
            "p",
            "',",
            " '')",
            "\n",
            "\t",
            "str",
            "1",
            " =",
            " str",
            "1",
            ".",
            "replace",
            "('",
            "q",
            "',",
            " '')",
            "\n",
            "\t",
            "str",
            "1",
            " =",
            " str",
            "1",
            ".",
            "replace",
            "('",
            "r",
            "',",
            " '')",
            "\n",
            "\t",
            "str",
            "1",
            " =",
            " str",
            "1",
            ".",
            "replace",
            "('",
            "s",
            "',",
            " '')",
            "\n",
            "\t",
            "str",
            "1",
            " =",
            " str",
            "1",
            ".",
            "replace",
            "('",
            "t",
            "',",
            " '')",
            "\n",
            "\t",
            "str",
            "1",
            " =",
            " str",
            "1",
            ".",
            "replace",
            "('",
            "u",
            "',",
            " '')",
            "\n",
            "\t",
            "str",
            "1",
            " =",
            " str",
            "1",
            ".",
            "replace",
            "('",
            "v",
            "',",
            " '')",
            "\n",
            "\t",
            "str",
            "1",
            " =",
            " str",
            "1",
            ".",
            "replace",
            "('",
            "w",
            "',",
            " '')",
            "\n",
            "\t",
            "str",
            "1",
            " =",
            " str",
            "1",
            ".",
            "replace",
            "('",
            "x",
            "',",
            " '')",
            "\n",
            "\t",
            "str",
            "1",
            " =",
            " str",
            "1",
            ".",
            "replace",
            "('",
            "y",
            "',",
            " '')",
            "\n",
            "\t",
            "str",
            "1",
            " =",
            " str",
            "1",
            ".",
            "replace",
            "('",
            "z",
            "',",
            " '')",
            "\n",
            "\t",
            "return",
            " str",
            "1",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 479,
        "prompt": "Write a python function to find the first digit of a given number.\n\ndef first_Digit(n) :  \n",
        "answer": "def first_Digit(n) :  \n\treturn n // 10**(len(str(n))-1)\n\n",
        "test_list": [
            "assert first_Digit(123) == 1",
            "assert first_Digit(456) == 4",
            "assert first_Digit(12) == 1"
        ],
        "answer_list": [
            "\t",
            "return",
            " n",
            " //",
            " ",
            "1",
            "0",
            "**(",
            "len",
            "(",
            "str",
            "(",
            "n",
            "))",
            "-",
            "1",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 480,
        "prompt": "Write a python function to find the maximum occurring character in a given string.\n\ndef get_max_occuring_char(str1):\n",
        "answer": "def get_max_occuring_char(str1):\n\tmax_occuring_char = ''\n\tmax_occuring_count = 0\n\tfor char in str1:\n\t\tif str1.count(char) > max_occuring_count:\n\t\t\tmax_occuring_count = str1.count(char)\n\t\t\tmax_occuring_char = char\n\treturn max_occuring_char\n\n",
        "test_list": [
            "assert get_max_occuring_char(\"data\") == \"a\"",
            "assert get_max_occuring_char(\"create\") == \"e\"",
            "assert get_max_occuring_char(\"brilliant girl\") == \"i\""
        ],
        "answer_list": [
            "\t",
            "max",
            "_",
            "oc",
            "cur",
            "ing",
            "_",
            "char",
            " =",
            " ''",
            "\n",
            "\t",
            "max",
            "_",
            "oc",
            "cur",
            "ing",
            "_",
            "count",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " char",
            " in",
            " str",
            "1",
            ":",
            "\n\t",
            "\t",
            "if",
            " str",
            "1",
            ".",
            "count",
            "(",
            "char",
            ")",
            " >",
            " max",
            "_",
            "oc",
            "cur",
            "ing",
            "_",
            "count",
            ":",
            "\n\t\t",
            "\t",
            "max",
            "_",
            "oc",
            "cur",
            "ing",
            "_",
            "count",
            " =",
            " str",
            "1",
            ".",
            "count",
            "(",
            "char",
            ")",
            "\n\t\t",
            "\t",
            "max",
            "_",
            "oc",
            "cur",
            "ing",
            "_",
            "char",
            " =",
            " char",
            "\n",
            "\t",
            "return",
            " max",
            "_",
            "oc",
            "cur",
            "ing",
            "_",
            "char",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 481,
        "prompt": "Write a python function to determine if there is a subset of the given set with sum equal to the given sum.\n\ndef is_subset_sum(set, n, sum):\n",
        "answer": "def is_subset_sum(set, n, sum):\n\tif sum == 0:\n\t\treturn True\n\tif n == 0 and sum!= 0:\n\t\treturn False\n\tif set[n-1] > sum:\n\t\treturn is_subset_sum(set, n-1, sum)\n\telse:\n\t\treturn is_subset_sum(set, n-1, sum) or is_subset_sum(set, n-1, sum-set[n-1])\n\n",
        "test_list": [
            "assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True",
            "assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 30) == False",
            "assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 15) == True"
        ],
        "answer_list": [
            "\t",
            "if",
            " sum",
            " ==",
            " ",
            "0",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "0",
            " and",
            " sum",
            "!=",
            " ",
            "0",
            ":",
            "\n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "if",
            " set",
            "[",
            "n",
            "-",
            "1",
            "]",
            " >",
            " sum",
            ":",
            "\n\t",
            "\t",
            "return",
            " is",
            "_",
            "subset",
            "_",
            "sum",
            "(",
            "set",
            ",",
            " n",
            "-",
            "1",
            ",",
            " sum",
            ")",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "return",
            " is",
            "_",
            "subset",
            "_",
            "sum",
            "(",
            "set",
            ",",
            " n",
            "-",
            "1",
            ",",
            " sum",
            ")",
            " or",
            " is",
            "_",
            "subset",
            "_",
            "sum",
            "(",
            "set",
            ",",
            " n",
            "-",
            "1",
            ",",
            " sum",
            "-",
            "set",
            "[",
            "n",
            "-",
            "1",
            "])",
            "\n",
            "\n",
            "set"
        ]
    },
    {
        "task_id": 482,
        "prompt": "Write a python function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\n\ndef match(text): \n",
        "answer": "def match(text): \n\tpattern = r'([A-Z][a-z]+)'\n\tresult = re.findall(pattern, text)\n\treturn result\n\n",
        "test_list": [
            "assert match(\"Geeks\") == 'Yes'",
            "assert match(\"geeksforGeeks\") == 'Yes'",
            "assert match(\"geeks\") == 'No'"
        ],
        "answer_list": [
            "\t",
            "pattern",
            " =",
            " r",
            "'",
            "([",
            "A",
            "-",
            "Z",
            "][",
            "a",
            "-",
            "z",
            "]+",
            ")'",
            "\n",
            "\t",
            "result",
            " =",
            " re",
            ".",
            "findall",
            "(",
            "pattern",
            ",",
            " text",
            ")",
            "\n",
            "\t",
            "return",
            " result",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 483,
        "prompt": "Write a python function to find the first natural number whose factorial is divisible by x.\n\ndef first_Factorial_Divisible_Number(x): \n",
        "answer": "def first_Factorial_Divisible_Number(x): \n\tfor i in range
        "test_list": [
            "assert first_Factorial_Divisible_Number(10) == 5",
            "assert first_Factorial_Divisible_Number(15) == 5",
            "assert first_Factorial_Divisible_Number(5) == 4"
        ],
        "answer_list": [
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "1",
            ",",
            " ",
            "1",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0"
        ]
    },
    {
        "task_id": 484,
        "prompt": "Write a python function to remove the matching tuples from the given two tuples.\n\ndef remove_matching_tuple(test_list1, test_list2):\n",
        "answer": "def remove_matching_tuple(test_list1, test_list2):\n\treturn [x for x in test_list1 if x not in test_list2]\n\n",
        "test_list": [
            "assert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]",
            "assert remove_matching_tuple([('Part', 'of'), ('the', 'journey'), ('is ', 'end')], [('Journey', 'the'), ('is', 'end')]) == [('Part', 'of'), ('the', 'journey'), ('is ', 'end')]",
            "assert remove_matching_tuple([('Its', 'been'), ('a', 'long'), ('day', 'without')], [('a', 'long'), ('my', 'friend')]) == [('Its', 'been'), ('day', 'without')]"
        ],
        "answer_list": [
            "\t",
            "return",
            " [",
            "x",
            " for",
            " x",
            " in",
            " test",
            "_",
            "list",
            "1",
            " if",
            " x",
            " not",
            " in",
            " test",
            "_",
            "list",
            "2",
            "]",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 485,
        "prompt": "Write a python function to find the largest palindromic number in the given array.\n\ndef largest_palindrome(A, n) : \n",
        "answer": "def largest_palindrome(A, n) : \n\tmax = 0\n\tfor i in range(n) : \n\t\tfor j in range(n) : \n\t\t\ttemp = A[i] * A[j]\n\t\t\tif temp > max and isPalindrome(temp) : \n\t\t\t\tmax = temp\n\treturn max\n\n",
        "test_list": [
            "assert largest_palindrome([1, 232, 54545, 999991], 4) == 54545",
            "assert largest_palindrome([1, 2, 3, 4, 5, 50], 6) == 5",
            "assert largest_palindrome([1, 3, 7, 9, 45], 5)  == 9"
        ],
        "answer_list": [
            "\t",
            "max",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "n",
            ")",
            " :",
            " \n\t",
            "\t",
            "for",
            " j",
            " in",
            " range",
            "(",
            "n",
            ")",
            " :",
            " \n\t\t",
            "\t",
            "temp",
            " =",
            " A",
            "[",
            "i",
            "]",
            " *",
            " A",
            "[",
            "j",
            "]",
            "\n\t\t",
            "\t",
            "if",
            " temp",
            " >",
            " max",
            " and",
            " is",
            "Pal",
            "indrome",
            "(",
            "temp",
            ")",
            " :",
            " \n\t\t\t",
            "\t",
            "max",
            " =",
            " temp",
            "\n",
            "\t",
            "return",
            " max",
            "\n",
            "\n",
            "def"
        ]
    },
    {
        "task_id": 486,
        "prompt": "Write a python function to compute binomial probability for the given number.\n\ndef binomial_probability(n, k, p): \n",
        "answer": "def binomial_probability(n, k, p): \n\treturn (factorial(n)/(factorial(k)*factorial(n-k)))*p**k*(1-p)**(n-k)\n\n",
        "test_list": [
            "assert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185",
            "assert binomial_probability(11, 6, 2.0/4) == 0.2255859375",
            "assert binomial_probability(12, 7, 3.0/5) == 0.227030335488"
        ],
        "answer_list": [
            "\t",
            "return",
            " (",
            "factor",
            "ial",
            "(",
            "n",
            ")/(",
            "factor",
            "ial",
            "(",
            "k",
            ")*",
            "factor",
            "ial",
            "(",
            "n",
            "-",
            "k",
            ")))",
            "*",
            "p",
            "**",
            "k",
            "*(",
            "1",
            "-",
            "p",
            ")**",
            "(",
            "n",
            "-",
            "k",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 487,
        "prompt": "Write a python function to sort a list of tuples in increasing order by the last element in each tuple.\n\ndef sort_tuple(tup): \n",
        "answer": "def sort_tuple(tup): \n\treturn sorted(tup, key = lambda x: x[1]) \n\n",
        "test_list": [
            "assert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]",
            "assert sort_tuple([(2, 4), (3, 3), (1, 1)] ) == [(1, 1), (3, 3), (2, 4)]",
            "assert sort_tuple([(3, 9), (6, 7), (4, 3)] ) == [(4, 3), (6, 7), (3, 9)]"
        ],
        "answer_list": [
            "\t",
            "return",
            " sorted",
            "(",
            "tup",
            ",",
            " key",
            " =",
            " lambda",
            " x",
            ":",
            " x",
            "[",
            "1",
            "])",
            " \n",
            "\n",
            "#"
        ]
    },
    {
        "task_id": 488,
        "prompt": "Write a python function to find the area of a pentagon.\n\ndef area_pentagon(a):\n",
        "answer": "def area_pentagon(a):\n\treturn (5*a*a)/4*(math.tan(math.pi/5))\n\n",
        "test_list": [
            "assert area_pentagon(5)==43.01193501472417",
            "assert area_pentagon(10)==172.0477400588967",
            "assert area_pentagon(15)==387.10741513251753"
        ],
        "answer_list": [
            "\t",
            "return",
            " (",
            "5",
            "*",
            "a",
            "*",
            "a",
            ")/",
            "4",
            "*(",
            "math",
            ".",
            "tan",
            "(",
            "math",
            ".",
            "pi",
            "/",
            "5",
            "))",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 489,
        "prompt": "Write a python function to find the frequency of the largest value in a given array.\n\ndef frequency_Of_Largest(n,arr): \n",
        "answer": "def frequency_Of_Largest(n,arr): \n\treturn max(arr, key = arr.count) \n\n",
        "test_list": [
            "assert frequency_Of_Largest(5,[1,2,3,4,4]) == 2",
            "assert frequency_Of_Largest(3,[5,6,5]) == 1",
            "assert frequency_Of_Largest(4,[2,7,7,7]) == 3"
        ],
        "answer_list": [
            "\t",
            "return",
            " max",
            "(",
            "arr",
            ",",
            " key",
            " =",
            " arr",
            ".",
            "count",
            ")",
            " \n",
            "\n",
            "n"
        ]
    },
    {
        "task_id": 490,
        "prompt": "Write a python function to extract all the pairs which are symmetric in the given tuple list.\n\ndef extract_symmetric(test_list):\n",
        "answer": "def extract_symmetric(test_list):\n\t# your code goes here\n\treturn symmetric_pairs\n\n",
        "test_list": [
            "assert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}",
            "assert extract_symmetric([(7, 8), (3, 4), (8, 7), (10, 9), (11, 3), (9, 10)] ) == {(9, 10), (7, 8)}",
            "assert extract_symmetric([(8, 9), (4, 5), (9, 8), (11, 10), (12, 4), (10, 11)] ) == {(8, 9), (10, 11)}"
        ],
        "answer_list": [
            "\t",
            "#",
            " your",
            " code",
            " goes",
            " here",
            "\n",
            "\t",
            "return",
            " symmetric",
            "_",
            "pairs",
            "\n",
            "\n",
            "#"
        ]
    },
    {
        "task_id": 491,
        "prompt": "Write a python function to find the sum of geometric progression series.\n\ndef sum_gp(a,n,r):\n",
        "answer": "def sum_gp(a,n,r):\n\treturn (a*(1-r**n))/(1-r)\n\n",
        "test_list": [
            "assert sum_gp(1,5,2)==31",
            "assert sum_gp(1,5,4)==341",
            "assert sum_gp(2,6,3)==728"
        ],
        "answer_list": [
            "\t",
            "return",
            " (",
            "a",
            "*(",
            "1",
            "-",
            "r",
            "**",
            "n",
            "))",
            "/(",
            "1",
            "-",
            "r",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 492,
        "prompt": "Write a python function to search an element in the given array by using binary search.\n\ndef binary_search(item_list,item):\n",
        "answer": "def binary_search(item_list,item):\n\tfirst = 0\n\tlast = len(item_list)-1\n\tfound = False\n\twhile first<=last and not found:\n\t\tmid = (first+last)//2\n\t\tif item_list[mid] == item:\n\t\t\tfound = True\n\t\telse:\n\t\t\tif item < item_list[mid]:\n\t\t\t\tlast = mid - 1\n\t\t\telse:\n\t\t\t\tfirst = mid + 1\n\treturn found\n\n",
        "test_list": [
            "assert binary_search([1,2,3,5,8], 6) == False",
            "assert binary_search([7, 8, 9, 10, 13], 10) == True",
            "assert binary_search([11, 13, 14, 19, 22, 36], 23) == False"
        ],
        "answer_list": [
            "\t",
            "first",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "last",
            " =",
            " len",
            "(",
            "item",
            "_",
            "list",
            ")-",
            "1",
            "\n",
            "\t",
            "found",
            " =",
            " False",
            "\n",
            "\t",
            "while",
            " first",
            "<=",
            "last",
            " and",
            " not",
            " found",
            ":",
            "\n\t",
            "\t",
            "mid",
            " =",
            " (",
            "first",
            "+",
            "last",
            ")//",
            "2",
            "\n\t",
            "\t",
            "if",
            " item",
            "_",
            "list",
            "[",
            "mid",
            "]",
            " ==",
            " item",
            ":",
            "\n\t\t",
            "\t",
            "found",
            " =",
            " True",
            "\n\t",
            "\t",
            "else",
            ":",
            "\n\t\t",
            "\t",
            "if",
            " item",
            " <",
            " item",
            "_",
            "list",
            "[",
            "mid",
            "]:",
            "\n\t\t\t",
            "\t",
            "last",
            " =",
            " mid",
            " -",
            " ",
            "1",
            "\n\t\t",
            "\t",
            "else",
            ":",
            "\n\t\t\t",
            "\t",
            "first",
            " =",
            " mid",
            " +",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " found",
            "\n",
            "\n",
            "item"
        ]
    },
    {
        "task_id": 493,
        "prompt": "Write a python function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\n\ndef calculate_polygons(startx, starty, endx, endy, radius):\n",
        "answer": "def calculate_polygons(startx, starty, endx, endy, radius):\n\tpass\n\n",
        "test_list": [
            "assert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]",
            "assert calculate_polygons(5,4,7,9,8)==[[(-11.0, -9.856406460551018), (-11.0, -0.6188021535170058), (-3.0, 4.0), (5.0, -0.6188021535170058), (5.0, -9.856406460551018), (-3.0, -14.475208614068023), (-11.0, -9.856406460551018)], [(5.0, -9.856406460551018), (5.0, -0.6188021535170058), (13.0, 4.0), (21.0, -0.6188021535170058), (21.0, -9.856406460551018), (13.0, -14.475208614068023), (5.0, -9.856406460551018)], [(21.0, -9.856406460551018), (21.0, -0.6188021535170058), (29.0, 4.0), (37.0, -0.6188021535170058), (37.0, -9.856406460551018), (29.0, -14.475208614068023), (21.0, -9.856406460551018)], [(-3.0, 4.0), (-3.0, 13.237604307034012), (5.0, 17.856406460551018), (13.0, 13.237604307034012), (13.0, 4.0), (5.0, -0.6188021535170058), (-3.0, 4.0)], [(13.0, 4.0), (13.0, 13.237604307034012), (21.0, 17.856406460551018), (29.0, 13.237604307034012), (29.0, 4.0), (21.0, -0.6188021535170058), (13.0, 4.0)], [(-11.0, 17.856406460551018), (-11.0, 27.09401076758503), (-3.0, 31.712812921102035), (5.0, 27.09401076758503), (5.0, 17.856406460551018), (-3.0, 13.237604307034012), (-11.0, 17.856406460551018)], [(5.0, 17.856406460551018), (5.0, 27.09401076758503), (13.0, 31.712812921102035), (21.0, 27.09401076758503), (21.0, 17.856406460551018), (13.0, 13.237604307034012), (5.0, 17.856406460551018)], [(21.0, 17.856406460551018), (21.0, 27.09401076758503), (29.0, 31.712812921102035), (37.0, 27.09401076758503), (37.0, 17.856406460551018), (29.0, 13.237604307034012), (21.0, 17.856406460551018)], [(-3.0, 31.712812921102035), (-3.0, 40.95041722813605), (5.0, 45.569219381653056), (13.0, 40.95041722813605), (13.0, 31.712812921102035), (5.0, 27.09401076758503), (-3.0, 31.712812921102035)], [(13.0, 31.712812921102035), (13.0, 40.95041722813605), (21.0, 45.569219381653056), (29.0, 40.95041722813605), (29.0, 31.712812921102035), (21.0, 27.09401076758503), (13.0, 31.712812921102035)]]",
            "assert calculate_polygons(9,6,4,3,2)==[[(5.0, 2.5358983848622456), (5.0, 4.8452994616207485), (7.0, 6.0), (9.0, 4.8452994616207485), (9.0, 2.5358983848622456), (7.0, 1.3811978464829942), (5.0, 2.5358983848622456)], [(7.0, 6.0), (7.0, 8.309401076758503), (9.0, 9.464101615137753), (11.0, 8.309401076758503), (11.0, 6.0), (9.0, 4.8452994616207485), (7.0, 6.0)]]"
        ],
        "answer_list": [
            "\t",
            "pass",
            "\n",
            "\n",
            "#"
        ]
    },
    {
        "task_id": 494,
        "prompt": "Write a python function to convert the given binary tuple to integer.\n\ndef binary_to_integer(test_tup):\n",
        "answer": "def binary_to_integer(test_tup):\n\treturn int(''.join(test_tup), 2)\n\n",
        "test_list": [
            "assert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'",
            "assert binary_to_integer((0, 1, 1, 0, 0, 1, 0, 1)) == '101'",
            "assert binary_to_integer((1, 1, 0, 1, 0, 1)) == '53'"
        ],
        "answer_list": [
            "\t",
            "return",
            " int",
            "('",
            "'.",
            "join",
            "(",
            "test",
            "_",
            "tup",
            "),",
            " ",
            "2",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 495,
        "prompt": "Write a python function to remove lowercase substrings from a given string by using regex.\n\ndef remove_lowercase(str1):\n",
        "answer": "def remove_lowercase(str1):\n\treturn re.sub(r'\\b[a-z]+\\b', '', str1)\n\n",
        "test_list": [
            "assert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'",
            "assert remove_lowercase('ProducTnamEstreAmIngMediAplAYer') == 'PTEAIMAAY'",
            "assert remove_lowercase('maNufacTuredbYSheZenTechNolOGIes') == 'NTYSZTNOGI'"
        ],
        "answer_list": [
            "\t",
            "return",
            " re",
            ".",
            "sub",
            "(",
            "r",
            "'\\",
            "b",
            "[",
            "a",
            "-",
            "z",
            "]+",
            "\\",
            "b",
            "',",
            " '',",
            " str",
            "1",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 496,
        "prompt": "Write a python function to find the smallest integers from a given list of numbers using heap queue algorithm.\n\ndef heap_queue_smallest(nums,n):\n",
        "answer": "def heap_queue_smallest(nums,n):\n\theap = []\n\tfor i in range(n):\n\t\theapq.heappush(heap,nums[i])\n\tfor i in range(n):\n\t\tnums[i] = heapq.heappop(heap)\n\treturn nums\n\n",
        "test_list": [
            "assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] ",
            "assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],2)==[14, 22]",
            "assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[14, 22, 22, 25, 35]"
        ],
        "answer_list": [
            "\t",
            "heap",
            " =",
            " []",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "n",
            "):",
            "\n\t",
            "\t",
            "heap",
            "q",
            ".",
            "he",
            "app",
            "ush",
            "(",
            "heap",
            ",",
            "nums",
            "[",
            "i",
            "])",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "n",
            "):",
            "\n\t",
            "\t",
            "nums",
            "[",
            "i",
            "]",
            " =",
            " heap",
            "q",
            ".",
            "he",
            "app",
            "op",
            "(",
            "heap",
            ")",
            "\n",
            "\t",
            "return",
            " nums",
            "\n",
            "\n",
            "nums"
        ]
    },
    {
        "task_id": 497,
        "prompt": "Write a python function to find the surface area of a cone.\n\ndef surfacearea_cone(r,h):\n",
        "answer": "def surfacearea_cone(r,h):\n\treturn 3.14*r*r + 3.14*r*h\n\n",
        "test_list": [
            "assert surfacearea_cone(5,12)==282.7433388230814",
            "assert surfacearea_cone(10,15)==880.5179353159282",
            "assert surfacearea_cone(19,17)==2655.923961165254"
        ],
        "answer_list": [
            "\t",
            "return",
            " ",
            "3",
            ".",
            "1",
            "4",
            "*",
            "r",
            "*",
            "r",
            " +",
            " ",
            "3",
            ".",
            "1",
            "4",
            "*",
            "r",
            "*",
            "h",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 498,
        "prompt": "Write a python function to find gcd of two positive integers.\n\ndef gcd(x, y):\n",
        "answer": "def gcd(x, y):\n\twhile(y):\n\t\tx, y = y, x % y\n\treturn x\n\n",
        "test_list": [
            "assert gcd(12, 17) == 1",
            "assert gcd(4,6) == 2",
            "assert gcd(2,9) == 1"
        ],
        "answer_list": [
            "\t",
            "while",
            "(",
            "y",
            "):",
            "\n\t",
            "\t",
            "x",
            ",",
            " y",
            " =",
            " y",
            ",",
            " x",
            " %",
            " y",
            "\n",
            "\t",
            "return",
            " x",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 499,
        "prompt": "Write a python function to find the diameter of a circle.\n\ndef diameter_circle(r):\n",
        "answer": "def diameter_circle(r):\n\treturn 2*r\n\n",
        "test_list": [
            "assert diameter_circle(10)==20",
            "assert diameter_circle(40)==80",
            "assert diameter_circle(15)==30"
        ],
        "answer_list": [
            "\t",
            "return",
            " ",
            "2",
            "*",
            "r",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 500,
        "prompt": "Write a python function to concatenate all elements of the given list into a string.\n\ndef concatenate_elements(list):\n",
        "answer": "def concatenate_elements(list):\n\treturn ''.join(list)\n\n",
        "test_list": [
            "assert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'",
            "assert concatenate_elements([ 'Hi', 'there', 'How','are', 'you'] ) == '  Hi there How are you'",
            "assert concatenate_elements([ 'Part', 'of', 'the','journey', 'is', 'end'] ) == '  Part of the journey is end'"
        ],
        "answer_list": [
            "\t",
            "return",
            " ''.",
            "join",
            "(",
            "list",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 501,
        "prompt": "Write a python function to find common divisor between two numbers in a given pair.\n\ndef num_comm_div(x,y):\n",
        "answer": "def num_comm_div(x,y):\n\tif x > y:\n\t\tx,y = y,x\n\tfor i in range(x,0,-1):\n\t\tif x%i == 0 and y%i == 0:\n\t\t\treturn i\n\n",
        "test_list": [
            "assert num_comm_div(2,4) == 2",
            "assert num_comm_div(2,8) == 2",
            "assert num_comm_div(12,24) == 6"
        ],
        "answer_list": [
            "\t",
            "if",
            " x",
            " >",
            " y",
            ":",
            "\n\t",
            "\t",
            "x",
            ",",
            "y",
            " =",
            " y",
            ",",
            "x",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "x",
            ",",
            "0",
            ",-",
            "1",
            "):",
            "\n\t",
            "\t",
            "if",
            " x",
            "%",
            "i",
            " ==",
            " ",
            "0",
            " and",
            " y",
            "%",
            "i",
            " ==",
            " ",
            "0",
            ":",
            "\n\t\t",
            "\t",
            "return",
            " i",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 502,
        "prompt": "Write a python function to find remainder of two numbers.\n\ndef find(n,m):\n",
        "answer": "def find(n,m):\n\treturn n%m\n\n",
        "test_list": [
            "assert find(3,3) == 0",
            "assert find(10,3) == 1",
            "assert find(16,5) == 1"
        ],
        "answer_list": [
            "\t",
            "return",
            " n",
            "%",
            "m",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 503,
        "prompt": "Write a python function to add consecutive numbers of a given list.\n\ndef add_consecutive_nums(nums):\n",
        "answer": "def add_consecutive_nums(nums):\n\ttotal = 0\n\tfor num in nums:\n\t\ttotal += num\n\treturn total\n\n",
        "test_list": [
            "assert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]",
            "assert add_consecutive_nums([4, 5, 8, 9, 6, 10])==[9, 13, 17, 15, 16]",
            "assert add_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[3, 5, 7, 9, 11, 13, 15, 17, 19]"
        ],
        "answer_list": [
            "\t",
            "total",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " num",
            " in",
            " nums",
            ":",
            "\n\t",
            "\t",
            "total",
            " +=",
            " num",
            "\n",
            "\t",
            "return",
            " total",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 504,
        "prompt": "Write a python function to find the cube sum of first n natural numbers.\n\ndef sum_Of_Series(n): \n",
        "answer": "def sum_Of_Series(n): \n\tsum = 0\n\tfor i in range(1, n+1): \n\t\tsum += i**3\n\treturn sum\n\n",
        "test_list": [
            "assert sum_Of_Series(5) == 225",
            "assert sum_Of_Series(2) == 9",
            "assert sum_Of_Series(3) == 36"
        ],
        "answer_list": [
            "\t",
            "sum",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "1",
            ",",
            " n",
            "+",
            "1",
            "):",
            " \n\t",
            "\t",
            "sum",
            " +=",
            " i",
            "**",
            "3",
            "\n",
            "\t",
            "return",
            " sum",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 505,
        "prompt": "Write a python function to move all zeroes to the end of the given array.\n\ndef re_order(A):\n",
        "answer": "def re_order(A):\n\tcount = 0\n\tfor i in range(len(A)):\n\t\tif A[i]!= 0:\n\t\t\tA[count] = A[i]\n\t\t\tcount += 1\n\tfor i in range(count, len(A)):\n\t\tA[i] = 0\n\treturn A\n\n",
        "test_list": [
            "assert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]",
            "assert re_order([4, 0, 2, 7, 0, 9, 0, 12, 0]) == [4, 2, 7, 9, 12, 0, 0, 0, 0]",
            "assert re_order([3, 11, 0, 74, 14, 0, 1, 0, 2]) == [3, 11, 74, 14, 1, 2, 0, 0, 0]"
        ],
        "answer_list": [
            "\t",
            "count",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "len",
            "(",
            "A",
            ")):",
            "\n\t",
            "\t",
            "if",
            " A",
            "[",
            "i",
            "]",
            "!=",
            " ",
            "0",
            ":",
            "\n\t\t",
            "\t",
            "A",
            "[",
            "count",
            "]",
            " =",
            " A",
            "[",
            "i",
            "]",
            "\n\t\t",
            "\t",
            "count",
            " +=",
            " ",
            "1",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "count",
            ",",
            " len",
            "(",
            "A",
            ")):",
            "\n\t",
            "\t",
            "A",
            "[",
            "i",
            "]",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "return",
            " A",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 506,
        "prompt": "Write a python function to calculate the permutation coefficient of given p(n, k).\n\ndef permutation_coefficient(n, k): \n",
        "answer": "def permutation_coefficient(n, k): \n\treturn factorial(n) / (factorial(k) * factorial(n - k))\n\n",
        "test_list": [
            "assert permutation_coefficient(10, 2) == 90",
            "assert permutation_coefficient(10, 3) == 720",
            "assert permutation_coefficient(10, 1) == 10"
        ],
        "answer_list": [
            "\t",
            "return",
            " factor",
            "ial",
            "(",
            "n",
            ")",
            " /",
            " (",
            "factor",
            "ial",
            "(",
            "k",
            ")",
            " *",
            " factor",
            "ial",
            "(",
            "n",
            " -",
            " k",
            "))",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 507,
        "prompt": "Write a python function to remove specific words from a given list.\n\ndef remove_words(list1, removewords):\n",
        "answer": "def remove_words(list1, removewords):\n\tfor word in removewords:\n\t\tif word in list1:\n\t\t\tlist1.remove(word)\n\treturn list1\n\n",
        "test_list": [
            "assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']",
            "assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['black', 'orange'])==['red', 'green', 'blue', 'white']",
            "assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['blue', 'white'])==['red', 'green', 'black', 'orange']"
        ],
        "answer_list": [
            "\t",
            "for",
            " word",
            " in",
            " remov",
            "ew",
            "ords",
            ":",
            "\n\t",
            "\t",
            "if",
            " word",
            " in",
            " list",
            "1",
            ":",
            "\n\t\t",
            "\t",
            "list",
            "1",
            ".",
            "remove",
            "(",
            "word",
            ")",
            "\n",
            "\t",
            "return",
            " list",
            "1",
            "\n",
            "\n",
            "list"
        ]
    },
    {
        "task_id": 508,
        "prompt": "Write a python function to check if the common elements between two given lists are in the same order or not.\n\ndef same_order(l1, l2):\n",
        "answer": "def same_order(l1, l2):\n\tif len(l1)!= len(l2):\n\t\treturn False\n\tfor i in range(len(l1)):\n\t\tif l1[i]!= l2[i]:\n\t\t\treturn False\n\treturn True\n\n",
        "test_list": [
            "assert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True",
            "assert same_order([\"red\",\"pink\",\"green\",\"white\",\"black\"],[\"white\",\"orange\",\"pink\",\"black\"])==False",
            "assert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True"
        ],
        "answer_list": [
            "\t",
            "if",
            " len",
            "(",
            "l",
            "1",
            ")",
            "!=",
            " len",
            "(",
            "l",
            "2",
            "):",
            "\n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "len",
            "(",
            "l",
            "1",
            ")):",
            "\n\t",
            "\t",
            "if",
            " l",
            "1",
            "[",
            "i",
            "]",
            "!=",
            " l",
            "2",
            "[",
            "i",
            "]:",
            "\n\t\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "return",
            " True",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 509,
        "prompt": "Write a python function to find the average of odd numbers till a given odd number.\n\ndef average_Odd(n) : \n",
        "answer": "def average_Odd(n) : \n\tsum = 0\n\tfor i in range(1, n+1, 2) : \n\t\tsum += i\n\treturn sum/n\n\n",
        "test_list": [
            "assert average_Odd(9) == 5",
            "assert average_Odd(5) == 3",
            "assert average_Odd(11) == 6"
        ],
        "answer_list": [
            "\t",
            "sum",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "1",
            ",",
            " n",
            "+",
            "1",
            ",",
            " ",
            "2",
            ")",
            " :",
            " \n\t",
            "\t",
            "sum",
            " +=",
            " i",
            "\n",
            "\t",
            "return",
            " sum",
            "/",
            "n",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 510,
        "prompt": "Write a python function to find the number of subsequences having product smaller than k for the given non negative array.\n\ndef no_of_subsequences(arr, k): \n",
        "answer": "def no_of_subsequences(arr, k): \n\tn = len(arr) \n\tcount = 0\n\tfor i in range(n): \n\t\tfor j in range(i, n): \n\t\t\tif (arr[i] * arr[j] < k): \n\t\t\t\tcount += 1\n\treturn count \n\n",
        "test_list": [
            "assert no_of_subsequences([1,2,3,4], 10) == 11",
            "assert no_of_subsequences([4,8,7,2], 50) == 9",
            "assert no_of_subsequences([5,6,7,8], 15) == 4"
        ],
        "answer_list": [
            "\t",
            "n",
            " =",
            " len",
            "(",
            "arr",
            ")",
            " \n",
            "\t",
            "count",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "n",
            "):",
            " \n\t",
            "\t",
            "for",
            " j",
            " in",
            " range",
            "(",
            "i",
            ",",
            " n",
            "):",
            " \n\t\t",
            "\t",
            "if",
            " (",
            "arr",
            "[",
            "i",
            "]",
            " *",
            " arr",
            "[",
            "j",
            "]",
            " <",
            " k",
            "):",
            " \n\t\t\t",
            "\t",
            "count",
            " +=",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " count",
            " \n",
            "\n",
            "arr"
        ]
    },
    {
        "task_id": 511,
        "prompt": "Write a python function to find minimum sum of factors of a given number.\n\ndef find_Min_Sum(num): \n",
        "answer": "def find_Min_Sum(num): \n\tmin_sum = 0\n\tfor i in range(1, num + 1): \n\t\tif num % i == 0: \n\t\t\tmin_sum += i \n\treturn min_sum \n\n",
        "test_list": [
            "assert find_Min_Sum(12) == 7",
            "assert find_Min_Sum(105) == 15",
            "assert find_Min_Sum(2) == 2"
        ],
        "answer_list": [
            "\t",
            "min",
            "_",
            "sum",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "1",
            ",",
            " num",
            " +",
            " ",
            "1",
            "):",
            " \n\t",
            "\t",
            "if",
            " num",
            " %",
            " i",
            " ==",
            " ",
            "0",
            ":",
            " \n\t\t",
            "\t",
            "min",
            "_",
            "sum",
            " +=",
            " i",
            " \n",
            "\t",
            "return",
            " min",
            "_",
            "sum",
            " \n",
            "\n",
            "num"
        ]
    },
    {
        "task_id": 512,
        "prompt": "Write a python function to count the element frequency in the mixed nested tuple.\n\ndef count_element_freq(test_tuple):\n",
        "answer": "def count_element_freq(test_tuple):\n\tcount = 0\n\tfor i in test_tuple:\n\t\tif type(i) == tuple:\n\t\t\tcount += count_element_freq(i)\n\t\telse:\n\t\t\tcount += 1\n\treturn count\n\n",
        "test_list": [
            "assert count_element_freq((5, 6, (5, 6), 7, (8, 9), 9) ) == {5: 2, 6: 2, 7: 1, 8: 1, 9: 2}",
            "assert count_element_freq((6, 7, (6, 7), 8, (9, 10), 10) ) == {6: 2, 7: 2, 8: 1, 9: 1, 10: 2}",
            "assert count_element_freq((7, 8, (7, 8), 9, (10, 11), 11) ) == {7: 2, 8: 2, 9: 1, 10: 1, 11: 2}"
        ],
        "answer_list": [
            "\t",
            "count",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " test",
            "_",
            "tuple",
            ":",
            "\n\t",
            "\t",
            "if",
            " type",
            "(",
            "i",
            ")",
            " ==",
            " tuple",
            ":",
            "\n\t\t",
            "\t",
            "count",
            " +=",
            " count",
            "_",
            "element",
            "_",
            "freq",
            "(",
            "i",
            ")",
            "\n\t",
            "\t",
            "else",
            ":",
            "\n\t\t",
            "\t",
            "count",
            " +=",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " count",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 513,
        "prompt": "Write a python function to convert tuple into list by adding the given string after every element.\n\ndef add_str(test_tup, K):\n",
        "answer": "def add_str(test_tup, K):\n\tnew_tup = ()\n\tfor i in test_tup:\n\t\tnew_tup = new_tup + (i + K,)\n\treturn new_tup\n\n",
        "test_list": [
            "assert add_str((5, 6, 7, 4, 9) , \"FDF\") == [5, 'FDF', 6, 'FDF', 7, 'FDF', 4, 'FDF', 9, 'FDF']",
            "assert add_str((7, 8, 9, 10) , \"PF\") == [7, 'PF', 8, 'PF', 9, 'PF', 10, 'PF']",
            "assert add_str((11, 14, 12, 1, 4) , \"JH\") == [11, 'JH', 14, 'JH', 12, 'JH', 1, 'JH', 4, 'JH']"
        ],
        "answer_list": [
            "\t",
            "new",
            "_",
            "tup",
            " =",
            " ()",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " test",
            "_",
            "tup",
            ":",
            "\n\t",
            "\t",
            "new",
            "_",
            "tup",
            " =",
            " new",
            "_",
            "tup",
            " +",
            " (",
            "i",
            " +",
            " K",
            ",)",
            "\n",
            "\t",
            "return",
            " new",
            "_",
            "tup",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 514,
        "prompt": "Write a python function to find the summation of tuple elements in the given tuple list.\n\ndef sum_elements(test_tup):\n",
        "answer": "def sum_elements(test_tup):\n\tsum = 0\n\tfor i in test_tup:\n\t\tsum += i\n\treturn sum\n\n",
        "test_list": [
            "assert sum_elements((7, 8, 9, 1, 10, 7)) == 42",
            "assert sum_elements((1, 2, 3, 4, 5, 6)) == 21",
            "assert sum_elements((11, 12 ,13 ,45, 14)) == 95"
        ],
        "answer_list": [
            "\t",
            "sum",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " test",
            "_",
            "tup",
            ":",
            "\n\t",
            "\t",
            "sum",
            " +=",
            " i",
            "\n",
            "\t",
            "return",
            " sum",
            "\n",
            "\n",
            "test"
        ]
    },
    {
        "task_id": 515,
        "prompt": "Write a python function to check if there is a subset with sum divisible by m.\n\ndef modular_sum(arr, n, m): \n",
        "answer": "def modular_sum(arr, n, m): \n\tsum = 0\n\tfor i in range(n): \n\t\tsum = (sum + arr[i]) % m \n\treturn sum \n\n",
        "test_list": [
            "assert modular_sum([3, 1, 7, 5], 4, 6) == True",
            "assert modular_sum([1, 7], 2, 5) == False",
            "assert modular_sum([1, 6], 2, 5) == False"
        ],
        "answer_list": [
            "\t",
            "sum",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "n",
            "):",
            " \n\t",
            "\t",
            "sum",
            " =",
            " (",
            "sum",
            " +",
            " arr",
            "[",
            "i",
            "])",
            " %",
            " m",
            " \n",
            "\t",
            "return",
            " sum",
            " \n",
            "\n",
            "def"
        ]
    },
    {
        "task_id": 516,
        "prompt": "Write a python function to sort a list of elements using radix sort.\n\ndef radix_sort(nums):\n",
        "answer": "def radix_sort(nums):\n\tmax_num = max(nums)\n\texp = 1\n\twhile max_num / exp > 0:\n\t\tnums = counting_sort(nums, exp)\n\t\texp *= 10\n\treturn nums\n\n",
        "test_list": [
            "assert radix_sort([15, 79, 25, 68, 37]) == [15, 25, 37, 68, 79]",
            "assert radix_sort([9, 11, 8, 7, 3, 2]) == [2, 3, 7, 8, 9, 11]",
            "assert radix_sort([36, 12, 24, 26, 29]) == [12, 24, 26, 29, 36]"
        ],
        "answer_list": [
            "\t",
            "max",
            "_",
            "num",
            " =",
            " max",
            "(",
            "nums",
            ")",
            "\n",
            "\t",
            "exp",
            " =",
            " ",
            "1",
            "\n",
            "\t",
            "while",
            " max",
            "_",
            "num",
            " /",
            " exp",
            " >",
            " ",
            "0",
            ":",
            "\n\t",
            "\t",
            "nums",
            " =",
            " counting",
            "_",
            "sort",
            "(",
            "nums",
            ",",
            " exp",
            ")",
            "\n\t",
            "\t",
            "exp",
            " *=",
            " ",
            "1",
            "0",
            "\n",
            "\t",
            "return",
            " nums",
            "\n",
            "\n",
            "def"
        ]
    },
    {
        "task_id": 517,
        "prompt": "Write a python function to find the largest postive number from the given list.\n\ndef largest_pos(list1): \n",
        "answer": "def largest_pos(list1): \n\tmax_num = 0\n\tfor num in list1:\n\t\tif num > 0 and num > max_num:\n\t\t\tmax_num = num\n\treturn max_num\n\n",
        "test_list": [
            "assert largest_pos([1,2,3,4,-1]) == 4",
            "assert largest_pos([0,1,2,-5,-1,6]) == 6",
            "assert largest_pos([0,0,1,0]) == 1"
        ],
        "answer_list": [
            "\t",
            "max",
            "_",
            "num",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " num",
            " in",
            " list",
            "1",
            ":",
            "\n\t",
            "\t",
            "if",
            " num",
            " >",
            " ",
            "0",
            " and",
            " num",
            " >",
            " max",
            "_",
            "num",
            ":",
            "\n\t\t",
            "\t",
            "max",
            "_",
            "num",
            " =",
            " num",
            "\n",
            "\t",
            "return",
            " max",
            "_",
            "num",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 518,
        "prompt": "Write a python function to find the square root of a perfect number.\n\ndef sqrt_root(num):\n",
        "answer": "def sqrt_root(num):\n\tif num < 0:\n\t\treturn None\n\tif num == 0:\n\t\treturn 0\n\tif num == 1:\n\t\treturn 1\n\tif num == 4:\n\t\treturn 2\n\tif num == 9:\n\t\treturn 3\n\tif num == 16:\n\t\treturn 4\n\tif num == 25:\n\t\treturn 5\n\tif num == 36:\n\t\treturn 6\n\tif num == 49:\n\t\treturn 7\n\tif num == 64:\n\t\treturn 8\n\tif num == 81:\n\t\treturn 9\n\tif num == 100:\n\t\treturn 10\n\tif num == 121:\n\t\treturn 11\n\tif num == 144:\n\t\treturn 12\n\tif num == 169:\n\t\treturn 13\n\tif num == 196:\n\t\treturn 14\n\tif num == 225:\n\t\treturn 15\n\tif num == 256:\n\t\treturn 16\n\tif num == 289:\n\t\treturn 17\n\tif num == 324:\n\t\treturn 18\n\tif num == 361:\n\t\treturn 19\n\tif num == 400:\n\t\treturn 20\n\tif num == 441:\n\t\treturn 21\n\tif num == 484:\n\t\treturn 22\n\tif num == 529:\n\t\treturn 23\n\tif num == 576:\n\t\treturn 24\n\tif num == 625:\n\t\treturn 25\n\tif num == 676:\n\t\treturn 26\n\tif num == 729:\n\t\treturn 27\n\tif num == 784:\n\t\treturn 28\n\tif num == 841:\n\t\treturn 29\n\tif num == 900:\n\t\treturn 30\n\tif num == 961:\n\t\treturn 31\n\tif num == 1024:\n\t\treturn 32\n\tif num == 1089:\n\t\treturn 33\n\tif num == 1156:\n\t\treturn 34\n\tif num == 1225:\n\t\treturn 35\n\tif num == 1296:\n\t\treturn 36\n\tif num == 1369:\n\t\treturn 37\n\tif num == 1444:\n\t\treturn 38\n\tif num == 1521:\n\t\treturn 39\n\tif num == 1600:\n\t\treturn 40\n\tif num == 1681:\n\t\treturn 41\n\tif num == 1764:\n\t\treturn 42\n\tif num == 1849:\n\t\treturn 43\n\tif num == 1936:\n\t\treturn 44\n\tif num == 2025:\n\t\treturn 45\n\tif num == 2116:\n\t\treturn 46\n\tif num == 2209:\n\t\treturn 47\n\tif num == 2304:\n\t\treturn 48\n\tif num == 2401:\n\t\treturn 49\n\tif num == 2500:\n\t\treturn 50\n\tif num == 2601:\n\t\treturn 51\n\tif num == 2704:\n\t\treturn 52\n\tif num == 2809:\n\t\treturn 53\n\tif num == 2916:\n\t\treturn 54\n\tif num == 3025:\n\t\treturn 55\n\tif num == 3136:\n\t\treturn 56\n\tif num == 3249:\n\t\treturn 57\n\tif num == 3364:\n\t\treturn 58\n\tif num == 3481:\n\t\treturn 59\n\tif num == 3600:\n\t\treturn 60\n\tif num == 3721:\n\t\treturn 61\n\tif num == 3844:\n\t\treturn ",
        "test_list": [
            "assert sqrt_root(4)==2",
            "assert sqrt_root(16)==4",
            "assert sqrt_root(400)==20"
        ],
        "answer_list": [
            "\t",
            "if",
            " num",
            " <",
            " ",
            "0",
            ":",
            "\n\t",
            "\t",
            "return",
            " None",
            "\n",
            "\t",
            "if",
            " num",
            " ==",
            " ",
            "0",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "0",
            "\n",
            "\t",
            "if",
            " num",
            " ==",
            " ",
            "1",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "\n",
            "\t",
            "if",
            " num",
            " ==",
            " ",
            "4",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "2",
            "\n",
            "\t",
            "if",
            " num",
            " ==",
            " ",
            "9",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "3",
            "\n",
            "\t",
            "if",
            " num",
            " ==",
            " ",
            "1",
            "6",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "4",
            "\n",
            "\t",
            "if",
            " num",
            " ==",
            " ",
            "2",
            "5",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "5",
            "\n",
            "\t",
            "if",
            " num",
            " ==",
            " ",
            "3",
            "6",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "6",
            "\n",
            "\t",
            "if",
            " num",
            " ==",
            " ",
            "4",
            "9",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "7",
            "\n",
            "\t",
            "if",
            " num",
            " ==",
            " ",
            "6",
            "4",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "8",
            "\n",
            "\t",
            "if",
            " num",
            " ==",
            " ",
            "8",
            "1",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "9",
            "\n",
            "\t",
            "if",
            " num",
            " ==",
            " ",
            "1",
            "0",
            "0",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "0",
            "\n",
            "\t",
            "if",
            " num",
            " ==",
            " ",
            "1",
            "2",
            "1",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "1",
            "\n",
            "\t",
            "if",
            " num",
            " ==",
            " ",
            "1",
            "4",
            "4",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "2",
            "\n",
            "\t",
            "if",
            " num",
            " ==",
            " ",
            "1",
            "6",
            "9",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "3",
            "\n",
            "\t",
            "if",
            " num",
            " ==",
            " ",
            "1",
            "9",
            "6",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "4",
            "\n",
            "\t",
            "if",
            " num",
            " ==",
            " ",
            "2",
            "2",
            "5",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "5",
            "\n",
            "\t",
            "if",
            " num",
            " ==",
            " ",
            "2",
            "5",
            "6",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "6",
            "\n",
            "\t",
            "if",
            " num",
            " ==",
            " ",
            "2",
            "8",
            "9",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "7",
            "\n",
            "\t",
            "if",
            " num",
            " ==",
            " ",
            "3",
            "2",
            "4",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "8",
            "\n",
            "\t",
            "if",
            " num",
            " ==",
            " ",
            "3",
            "6",
            "1",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "9",
            "\n",
            "\t",
            "if",
            " num",
            " ==",
            " ",
            "4",
            "0",
            "0",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "2",
            "0",
            "\n",
            "\t",
            "if",
            " num",
            " ==",
            " ",
            "4",
            "4",
            "1",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "2",
            "1",
            "\n",
            "\t",
            "if",
            " num",
            " ==",
            " ",
            "4",
            "8",
            "4",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "2",
            "2",
            "\n",
            "\t",
            "if",
            " num",
            " ==",
            " ",
            "5",
            "2",
            "9",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "2",
            "3",
            "\n",
            "\t",
            "if",
            " num",
            " ==",
            " ",
            "5",
            "7",
            "6",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "2",
            "4",
            "\n",
            "\t",
            "if",
            " num",
            " ==",
            " ",
            "6",
            "2",
            "5",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "2",
            "5",
            "\n",
            "\t",
            "if",
            " num",
            " ==",
            " ",
            "6",
            "7",
            "6",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "2",
            "6",
            "\n",
            "\t",
            "if",
            " num",
            " ==",
            " ",
            "7",
            "2",
            "9",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "2",
            "7",
            "\n",
            "\t",
            "if",
            " num",
            " ==",
            " ",
            "7",
            "8",
            "4",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "2",
            "8",
            "\n",
            "\t",
            "if",
            " num",
            " ==",
            " ",
            "8",
            "4",
            "1",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "2",
            "9",
            "\n",
            "\t",
            "if",
            " num",
            " ==",
            " ",
            "9",
            "0",
            "0",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "3",
            "0",
            "\n",
            "\t",
            "if",
            " num",
            " ==",
            " ",
            "9",
            "6",
            "1",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "3",
            "1",
            "\n",
            "\t",
            "if",
            " num",
            " ==",
            " ",
            "1",
            "0",
            "2",
            "4",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "3",
            "2",
            "\n",
            "\t",
            "if",
            " num",
            " ==",
            " ",
            "1",
            "0",
            "8",
            "9",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "3",
            "3",
            "\n",
            "\t",
            "if",
            " num",
            " ==",
            " ",
            "1",
            "1",
            "5",
            "6",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "3",
            "4",
            "\n",
            "\t",
            "if",
            " num",
            " ==",
            " ",
            "1",
            "2",
            "2",
            "5",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "3",
            "5",
            "\n",
            "\t",
            "if",
            " num",
            " ==",
            " ",
            "1",
            "2",
            "9",
            "6",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "3",
            "6",
            "\n",
            "\t",
            "if",
            " num",
            " ==",
            " ",
            "1",
            "3",
            "6",
            "9",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "3",
            "7",
            "\n",
            "\t",
            "if",
            " num",
            " ==",
            " ",
            "1",
            "4",
            "4",
            "4",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "3",
            "8",
            "\n",
            "\t",
            "if",
            " num",
            " ==",
            " ",
            "1",
            "5",
            "2",
            "1",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "3",
            "9",
            "\n",
            "\t",
            "if",
            " num",
            " ==",
            " ",
            "1",
            "6",
            "0",
            "0",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "4",
            "0",
            "\n",
            "\t",
            "if",
            " num",
            " ==",
            " ",
            "1",
            "6",
            "8",
            "1",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "4",
            "1",
            "\n",
            "\t",
            "if",
            " num",
            " ==",
            " ",
            "1",
            "7",
            "6",
            "4",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "4",
            "2",
            "\n",
            "\t",
            "if",
            " num",
            " ==",
            " ",
            "1",
            "8",
            "4",
            "9",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "4",
            "3",
            "\n",
            "\t",
            "if",
            " num",
            " ==",
            " ",
            "1",
            "9",
            "3",
            "6",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "4",
            "4",
            "\n",
            "\t",
            "if",
            " num",
            " ==",
            " ",
            "2",
            "0",
            "2",
            "5",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "4",
            "5",
            "\n",
            "\t",
            "if",
            " num",
            " ==",
            " ",
            "2",
            "1",
            "1",
            "6",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "4",
            "6",
            "\n",
            "\t",
            "if",
            " num",
            " ==",
            " ",
            "2",
            "2",
            "0",
            "9",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "4",
            "7",
            "\n",
            "\t",
            "if",
            " num",
            " ==",
            " ",
            "2",
            "3",
            "0",
            "4",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "4",
            "8",
            "\n",
            "\t",
            "if",
            " num",
            " ==",
            " ",
            "2",
            "4",
            "0",
            "1",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "4",
            "9",
            "\n",
            "\t",
            "if",
            " num",
            " ==",
            " ",
            "2",
            "5",
            "0",
            "0",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "5",
            "0",
            "\n",
            "\t",
            "if",
            " num",
            " ==",
            " ",
            "2",
            "6",
            "0",
            "1",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "5",
            "1",
            "\n",
            "\t",
            "if",
            " num",
            " ==",
            " ",
            "2",
            "7",
            "0",
            "4",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "5",
            "2",
            "\n",
            "\t",
            "if",
            " num",
            " ==",
            " ",
            "2",
            "8",
            "0",
            "9",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "5",
            "3",
            "\n",
            "\t",
            "if",
            " num",
            " ==",
            " ",
            "2",
            "9",
            "1",
            "6",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "5",
            "4",
            "\n",
            "\t",
            "if",
            " num",
            " ==",
            " ",
            "3",
            "0",
            "2",
            "5",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "5",
            "5",
            "\n",
            "\t",
            "if",
            " num",
            " ==",
            " ",
            "3",
            "1",
            "3",
            "6",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "5",
            "6",
            "\n",
            "\t",
            "if",
            " num",
            " ==",
            " ",
            "3",
            "2",
            "4",
            "9",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "5",
            "7",
            "\n",
            "\t",
            "if",
            " num",
            " ==",
            " ",
            "3",
            "3",
            "6",
            "4",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "5",
            "8",
            "\n",
            "\t",
            "if",
            " num",
            " ==",
            " ",
            "3",
            "4",
            "8",
            "1",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "5",
            "9",
            "\n",
            "\t",
            "if",
            " num",
            " ==",
            " ",
            "3",
            "6",
            "0",
            "0",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "6",
            "0",
            "\n",
            "\t",
            "if",
            " num",
            " ==",
            " ",
            "3",
            "7",
            "2",
            "1",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "6",
            "1",
            "\n",
            "\t",
            "if",
            " num",
            " ==",
            " ",
            "3",
            "8",
            "4",
            "4",
            ":",
            "\n\t",
            "\t",
            "return",
            " "
        ]
    },
    {
        "task_id": 519,
        "prompt": "Write a python function to calculate volume of a tetrahedron.\n\ndef volume_tetrahedron(num):\n",
        "answer": "def volume_tetrahedron(num):\n\treturn (num**3)/6\n\n",
        "test_list": [
            "assert volume_tetrahedron(10)==117.85",
            "assert volume_tetrahedron(15)==397.75",
            "assert volume_tetrahedron(20)==942.81"
        ],
        "answer_list": [
            "\t",
            "return",
            " (",
            "num",
            "**",
            "3",
            ")/",
            "6",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 520,
        "prompt": "Write a python function to find the lcm of the given array elements.\n\ndef get_lcm(l):\n",
        "answer": "def get_lcm(l):\n\tlcm = 1\n\tfor i in l:\n\t\tlcm = lcm * i // gcd(lcm, i)\n\treturn lcm\n\n",
        "test_list": [
            "assert get_lcm([2, 7, 3, 9, 4]) == 252",
            "assert get_lcm([1, 2, 8, 3]) == 24",
            "assert get_lcm([3, 8, 4, 10, 5]) == 120"
        ],
        "answer_list": [
            "\t",
            "l",
            "cm",
            " =",
            " ",
            "1",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " l",
            ":",
            "\n\t",
            "\t",
            "l",
            "cm",
            " =",
            " l",
            "cm",
            " *",
            " i",
            " //",
            " gcd",
            "(",
            "l",
            "cm",
            ",",
            " i",
            ")",
            "\n",
            "\t",
            "return",
            " l",
            "cm",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 521,
        "prompt": "Write a python function to print check if the triangle is scalene or not.\n\ndef check_isosceles(x,y,z):\n",
        "answer": "def check_isosceles(x,y,z):\n\tif x==y==z:\n\t\tprint(\"The triangle is equilateral\")\n\telif x==y or y==z or x==z:\n\t\tprint(\"The triangle is isosceles\")\n\telse:\n\t\tprint(\"The triangle is scalene\")\n\n",
        "test_list": [
            "assert check_isosceles(6,8,12)==True",
            "assert check_isosceles(6,6,12)==False",
            "assert check_isosceles(6,15,20)==True"
        ],
        "answer_list": [
            "\t",
            "if",
            " x",
            "==",
            "y",
            "==",
            "z",
            ":",
            "\n\t",
            "\t",
            "print",
            "(\"",
            "The",
            " triangle",
            " is",
            " equ",
            "il",
            "ateral",
            "\")",
            "\n",
            "\t",
            "elif",
            " x",
            "==",
            "y",
            " or",
            " y",
            "==",
            "z",
            " or",
            " x",
            "==",
            "z",
            ":",
            "\n\t",
            "\t",
            "print",
            "(\"",
            "The",
            " triangle",
            " is",
            " is",
            "os",
            "ce",
            "les",
            "\")",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "print",
            "(\"",
            "The",
            " triangle",
            " is",
            " scal",
            "ene",
            "\")",
            "\n",
            "\n",
            "x"
        ]
    },
    {
        "task_id": 522,
        "prompt": "Write a python function to find the longest bitonic subsequence for the given array.\n\ndef lbs(arr): \n",
        "answer": "def lbs(arr): \n\tn = len(arr) \n\tl = [0 for i in range(n)] \n\tfor i in range(n): \n\t\tl[i] = 1\n\tfor i in range(1, n): \n\t\tfor j in range(0, i): \n\t\t\tif (arr[i] > arr[j] and l[i]< l[j] + 1): \n\t\t\t\tl[i] = l[j] + 1\n\treturn max(l) \n\n",
        "test_list": [
            "assert lbs([0 , 8 , 4, 12, 2, 10 , 6 , 14 , 1 , 9 , 5 , 13, 3, 11 , 7 , 15]) == 7",
            "assert lbs([1, 11, 2, 10, 4, 5, 2, 1]) == 6",
            "assert lbs([80, 60, 30, 40, 20, 10]) == 5"
        ],
        "answer_list": [
            "\t",
            "n",
            " =",
            " len",
            "(",
            "arr",
            ")",
            " \n",
            "\t",
            "l",
            " =",
            " [",
            "0",
            " for",
            " i",
            " in",
            " range",
            "(",
            "n",
            ")]",
            " \n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "n",
            "):",
            " \n\t",
            "\t",
            "l",
            "[",
            "i",
            "]",
            " =",
            " ",
            "1",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "1",
            ",",
            " n",
            "):",
            " \n\t",
            "\t",
            "for",
            " j",
            " in",
            " range",
            "(",
            "0",
            ",",
            " i",
            "):",
            " \n\t\t",
            "\t",
            "if",
            " (",
            "arr",
            "[",
            "i",
            "]",
            " >",
            " arr",
            "[",
            "j",
            "]",
            " and",
            " l",
            "[",
            "i",
            "]<",
            " l",
            "[",
            "j",
            "]",
            " +",
            " ",
            "1",
            "):",
            " \n\t\t\t",
            "\t",
            "l",
            "[",
            "i",
            "]",
            " =",
            " l",
            "[",
            "j",
            "]",
            " +",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " max",
            "(",
            "l",
            ")",
            " \n",
            "\n",
            "arr"
        ]
    },
    {
        "task_id": 523,
        "prompt": "Write a python function to check whether a given string has a capital letter, a lower case letter, a number and specified length using lambda function.\n\ndef check_string(str1):\n",
        "answer": "def check_string(str1):\n\treturn lambda x: x.isalnum() and len(x) == str1\n\n",
        "test_list": [
            "assert check_string('python')==['String must have 1 upper case character.', 'String must have 1 number.', 'String length should be atleast 8.']",
            "assert check_string('123python')==['String must have 1 upper case character.']",
            "assert check_string('123Python')==['Valid string.']"
        ],
        "answer_list": [
            "\t",
            "return",
            " lambda",
            " x",
            ":",
            " x",
            ".",
            "is",
            "al",
            "num",
            "()",
            " and",
            " len",
            "(",
            "x",
            ")",
            " ==",
            " str",
            "1",
            "\n",
            "\n",
            "check"
        ]
    },
    {
        "task_id": 524,
        "prompt": "Write a python function to find the sum of maximum increasing subsequence of the given array.\n\ndef max_sum_increasing_subsequence(arr, n): \n",
        "answer": "def max_sum_increasing_subsequence(arr, n): \n\tdp = [1]*n \n\tfor i in range(1, n): \n\t\tfor j in range(0, i): \n\t\t\tif arr[i] > arr[j] and dp[i] < dp[j] + 1: \n\t\t\t\tdp[i] = dp[j] + 1\n\treturn max(dp) \n\n",
        "test_list": [
            "assert max_sum_increasing_subsequence([1, 101, 2, 3, 100, 4, 5], 7) == 106",
            "assert max_sum_increasing_subsequence([3, 4, 5, 10], 4) == 22",
            "assert max_sum_increasing_subsequence([10, 5, 4, 3], 4) == 10"
        ],
        "answer_list": [
            "\t",
            "dp",
            " =",
            " [",
            "1",
            "]*",
            "n",
            " \n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "1",
            ",",
            " n",
            "):",
            " \n\t",
            "\t",
            "for",
            " j",
            " in",
            " range",
            "(",
            "0",
            ",",
            " i",
            "):",
            " \n\t\t",
            "\t",
            "if",
            " arr",
            "[",
            "i",
            "]",
            " >",
            " arr",
            "[",
            "j",
            "]",
            " and",
            " dp",
            "[",
            "i",
            "]",
            " <",
            " dp",
            "[",
            "j",
            "]",
            " +",
            " ",
            "1",
            ":",
            " \n\t\t\t",
            "\t",
            "dp",
            "[",
            "i",
            "]",
            " =",
            " dp",
            "[",
            "j",
            "]",
            " +",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " max",
            "(",
            "dp",
            ")",
            " \n",
            "\n",
            "#"
        ]
    },
    {
        "task_id": 525,
        "prompt": "Write a python function to check whether two given lines are parallel or not.\n\ndef parallel_lines(line1, line2):\n",
        "answer": "def parallel_lines(line1, line2):\n\tif line1[0] == line2[0]:\n\t\treturn True\n\telse:\n\t\treturn False\n\n",
        "test_list": [
            "assert parallel_lines([2,3,4], [2,3,8]) == True",
            "assert parallel_lines([2,3,4], [4,-3,8]) == False",
            "assert parallel_lines([3,3],[5,5]) == True"
        ],
        "answer_list": [
            "\t",
            "if",
            " line",
            "1",
            "[",
            "0",
            "]",
            " ==",
            " line",
            "2",
            "[",
            "0",
            "]:",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 526,
        "prompt": "Write a python function to capitalize first and last letters of each word of a given string.\n\ndef capitalize_first_last_letters(str1):\n",
        "answer": "def capitalize_first_last_letters(str1):\n\tstr1 = str1.split()\n\tfor i in range(len(str1)):\n\t\tstr1[i] = str1[i][0].upper() + str1[i][1:-1] + str1[i][-1].upper()\n\treturn''.join(str1)\n\n",
        "test_list": [
            "assert capitalize_first_last_letters(\"python\") == \"PythoN\"",
            "assert capitalize_first_last_letters(\"bigdata\") == \"BigdatA\"",
            "assert capitalize_first_last_letters(\"Hadoop\") == \"HadooP\""
        ],
        "answer_list": [
            "\t",
            "str",
            "1",
            " =",
            " str",
            "1",
            ".",
            "split",
            "()",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "len",
            "(",
            "str",
            "1",
            ")):",
            "\n\t",
            "\t",
            "str",
            "1",
            "[",
            "i",
            "]",
            " =",
            " str",
            "1",
            "[",
            "i",
            "][",
            "0",
            "].",
            "upper",
            "()",
            " +",
            " str",
            "1",
            "[",
            "i",
            "][",
            "1",
            ":-",
            "1",
            "]",
            " +",
            " str",
            "1",
            "[",
            "i",
            "][",
            "-",
            "1",
            "].",
            "upper",
            "()",
            "\n",
            "\t",
            "return",
            " '",
            " '.",
            "join",
            "(",
            "str",
            "1",
            ")",
            "\n"
        ]
    },
    {
        "task_id": 527,
        "prompt": "Write a python function to find all pairs in an integer array whose sum is equal to a given number.\n\ndef get_pairs_count(arr, n, sum):\n",
        "answer": "def get_pairs_count(arr, n, sum):\n\tcount = 0\n\tfor i in range(n):\n\t\tfor j in range(i+1, n):\n\t\t\tif arr[i] + arr[j] == sum:\n\t\t\t\tcount += 1\n\treturn count\n\n",
        "test_list": [
            "assert get_pairs_count([1, 5, 7, -1, 5], 5, 6) == 3",
            "assert get_pairs_count([1, 5, 7, -1], 4, 6) == 2",
            "assert get_pairs_count([1, 1, 1, 1], 4, 2) == 6"
        ],
        "answer_list": [
            "\t",
            "count",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "n",
            "):",
            "\n\t",
            "\t",
            "for",
            " j",
            " in",
            " range",
            "(",
            "i",
            "+",
            "1",
            ",",
            " n",
            "):",
            "\n\t\t",
            "\t",
            "if",
            " arr",
            "[",
            "i",
            "]",
            " +",
            " arr",
            "[",
            "j",
            "]",
            " ==",
            " sum",
            ":",
            "\n\t\t\t",
            "\t",
            "count",
            " +=",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " count",
            "\n",
            "\n",
            "arr"
        ]
    },
    {
        "task_id": 528,
        "prompt": "Write a python function to find the list of lists with minimum length.\n\ndef min_length(list1):\n",
        "answer": "def min_length(list1):\n\tmin_len = len(list1[0])\n\tfor i in list1:\n\t\tif len(i) < min_len:\n\t\t\tmin_len = len(i)\n\treturn min_len\n\n",
        "test_list": [
            "assert min_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])",
            "assert min_length([[1], [5, 7], [10, 12, 14,15]])==(1, [1])",
            "assert min_length([[5], [15,20,25]])==(1, [5])"
        ],
        "answer_list": [
            "\t",
            "min",
            "_",
            "len",
            " =",
            " len",
            "(",
            "list",
            "1",
            "[",
            "0",
            "])",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " list",
            "1",
            ":",
            "\n\t",
            "\t",
            "if",
            " len",
            "(",
            "i",
            ")",
            " <",
            " min",
            "_",
            "len",
            ":",
            "\n\t\t",
            "\t",
            "min",
            "_",
            "len",
            " =",
            " len",
            "(",
            "i",
            ")",
            "\n",
            "\t",
            "return",
            " min",
            "_",
            "len",
            "\n",
            "\n",
            "list"
        ]
    },
    {
        "task_id": 529,
        "prompt": "Write a python function to find the nth jacobsthal-lucas number.\n\ndef jacobsthal_lucas(n): \n",
        "answer": "def jacobsthal_lucas(n): \n\tif n == 0: \n\t\treturn 2\n\telif n == 1: \n\t\treturn 1\n\telse: \n\t\treturn jacobsthal_lucas(n-1) + jacobsthal_lucas(n-2)\n\n",
        "test_list": [
            "assert jacobsthal_lucas(5) == 31",
            "assert jacobsthal_lucas(2) == 5",
            "assert jacobsthal_lucas(4) == 17"
        ],
        "answer_list": [
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "0",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "2",
            "\n",
            "\t",
            "elif",
            " n",
            " ==",
            " ",
            "1",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "1",
            "\n",
            "\t",
            "else",
            ":",
            " \n\t",
            "\t",
            "return",
            " j",
            "acob",
            "st",
            "hal",
            "_",
            "luc",
            "as",
            "(",
            "n",
            "-",
            "1",
            ")",
            " +",
            " j",
            "acob",
            "st",
            "hal",
            "_",
            "luc",
            "as",
            "(",
            "n",
            "-",
            "2",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 530,
        "prompt": "Write a python function to find the ration of negative numbers in an array of integers.\n\ndef negative_count(nums):\n",
        "answer": "def negative_count(nums):\n\tcount = 0\n\tfor i in nums:\n\t\tif i < 0:\n\t\t\tcount += 1\n\treturn count\n\n",
        "test_list": [
            "assert negative_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.31",
            "assert negative_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.31",
            "assert negative_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.44"
        ],
        "answer_list": [
            "\t",
            "count",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " nums",
            ":",
            "\n\t",
            "\t",
            "if",
            " i",
            " <",
            " ",
            "0",
            ":",
            "\n\t\t",
            "\t",
            "count",
            " +=",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " count",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 531,
        "prompt": "Write a python function to find minimum number of coins that make a given value.\n\ndef min_coins(coins, m, V): \n",
        "answer": "def min_coins(coins, m, V): \n\t# Initialize the table \n\ttable = [[0 for x in range(m+1)] for x in range(V+1)] \n\n",
        "test_list": [
            "assert min_coins([9, 6, 5, 1] ,4,11)==2",
            "assert min_coins([4,5,6,7,8,9],6,9)==1",
            "assert min_coins([1, 2, 3],3,4)==2"
        ],
        "answer_list": [
            "\t",
            "#",
            " Initialize",
            " the",
            " table",
            " \n",
            "\t",
            "table",
            " =",
            " [[",
            "0",
            " for",
            " x",
            " in",
            " range",
            "(",
            "m",
            "+",
            "1",
            ")]",
            " for",
            " x",
            " in",
            " range",
            "(",
            "V",
            "+",
            "1",
            ")]",
            " \n\n",
            "\t"
        ]
    },
    {
        "task_id": 532,
        "prompt": "Write a python function to check if the two given strings are permutations of each other.\n\ndef check_permutation(str1, str2):\n",
        "answer": "def check_permutation(str1, str2):\n\tif len(str1)!= len(str2):\n\t\treturn False\n\telse:\n\t\tstr1 = sorted(str1)\n\t\tstr2 = sorted(str2)\n\t\tfor i in range(len(str1)):\n\t\t\tif str1[i]!= str2[i]:\n\t\t\t\treturn False\n\t\treturn True\n\n",
        "test_list": [
            "assert check_permutation(\"abc\", \"cba\") == True",
            "assert check_permutation(\"test\", \"ttew\") == False",
            "assert check_permutation(\"xxyz\", \"yxzx\") == True"
        ],
        "answer_list": [
            "\t",
            "if",
            " len",
            "(",
            "str",
            "1",
            ")",
            "!=",
            " len",
            "(",
            "str",
            "2",
            "):",
            "\n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "str",
            "1",
            " =",
            " sorted",
            "(",
            "str",
            "1",
            ")",
            "\n\t",
            "\t",
            "str",
            "2",
            " =",
            " sorted",
            "(",
            "str",
            "2",
            ")",
            "\n\t",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "len",
            "(",
            "str",
            "1",
            ")):",
            "\n\t\t",
            "\t",
            "if",
            " str",
            "1",
            "[",
            "i",
            "]",
            "!=",
            " str",
            "2",
            "[",
            "i",
            "]:",
            "\n\t\t\t",
            "\t",
            "return",
            " False",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 533,
        "prompt": "Write a python function to remove particular data type elements from the given tuple.\n\ndef remove_datatype(test_tuple, data_type):\n",
        "answer": "def remove_datatype(test_tuple, data_type):\n\treturn tuple(x for x in test_tuple if not isinstance(x, data_type))\n\n",
        "test_list": [
            "assert remove_datatype((4, 5, 4, 7.7, 1.2), int) == [7.7, 1.2]",
            "assert remove_datatype((7, 8, 9, \"SR\"), str) == [7, 8, 9]",
            "assert remove_datatype((7, 1.1, 2, 2.2), float) == [7, 2]"
        ],
        "answer_list": [
            "\t",
            "return",
            " tuple",
            "(",
            "x",
            " for",
            " x",
            " in",
            " test",
            "_",
            "tuple",
            " if",
            " not",
            " isinstance",
            "(",
            "x",
            ",",
            " data",
            "_",
            "type",
            "))",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 534,
        "prompt": "Write a python function to search a literals string in a string and also find the location within the original string where the pattern occurs.\n\ndef search_literal(pattern,text):\n",
        "answer": "def search_literal(pattern,text):\n\tif pattern in text:\n\t\treturn text.index(pattern)\n\telse:\n\t\treturn -1\n\n",
        "test_list": [
            "assert search_literal('python','python programming language')==(0,6)",
            "assert search_literal('programming','python programming language')==(7,18)",
            "assert search_literal('language','python programming language')==(19,27)"
        ],
        "answer_list": [
            "\t",
            "if",
            " pattern",
            " in",
            " text",
            ":",
            "\n\t",
            "\t",
            "return",
            " text",
            ".",
            "index",
            "(",
            "pattern",
            ")",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "return",
            " -",
            "1",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 535,
        "prompt": "Write a python function to find the top or bottom surface area of a cylinder.\n\ndef topbottom_surfacearea(r):\n",
        "answer": "def topbottom_surfacearea(r):\n\treturn 2*math.pi*r*r\n\n",
        "test_list": [
            "assert topbottom_surfacearea(10)==314.15000000000003",
            "assert topbottom_surfacearea(5)==78.53750000000001",
            "assert topbottom_surfacearea(4)==50.264"
        ],
        "answer_list": [
            "\t",
            "return",
            " ",
            "2",
            "*",
            "math",
            ".",
            "pi",
            "*",
            "r",
            "*",
            "r",
            "\n",
            "\n",
            "def"
        ]
    },
    {
        "task_id": 536,
        "prompt": "Write a python function to select the nth items of a list.\n\ndef nth_items(list,n):\n",
        "answer": "def nth_items(list,n):\n\treturn list[n-1]\n\n",
        "test_list": [
            "assert nth_items([1, 2, 3, 4, 5, 6, 7, 8, 9],2)==[1, 3, 5, 7, 9] ",
            "assert nth_items([10,15,19,17,16,18],3)==[10,17] ",
            "assert nth_items([14,16,19,15,17],4)==[14,17]"
        ],
        "answer_list": [
            "\t",
            "return",
            " list",
            "[",
            "n",
            "-",
            "1",
            "]",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 537,
        "prompt": "Write a python function to find the first repeated word in a given string.\n\ndef first_repeated_word(str1):\n",
        "answer": "def first_repeated_word(str1):\n\tstr1 = str1.lower()\n\tstr1 = str1.split()\n\tstr1 = set(str1)\n\tfor i in str1:\n\t\tif str1.count(i) > 1:\n\t\t\treturn i\n\treturn \"No Repeated Words\"\n\n",
        "test_list": [
            "assert first_repeated_word(\"ab ca bc ab\") == \"ab\"",
            "assert first_repeated_word(\"ab ca bc\") == 'None'",
            "assert first_repeated_word(\"ab ca bc ca ab bc\") == \"ca\""
        ],
        "answer_list": [
            "\t",
            "str",
            "1",
            " =",
            " str",
            "1",
            ".",
            "lower",
            "()",
            "\n",
            "\t",
            "str",
            "1",
            " =",
            " str",
            "1",
            ".",
            "split",
            "()",
            "\n",
            "\t",
            "str",
            "1",
            " =",
            " set",
            "(",
            "str",
            "1",
            ")",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " str",
            "1",
            ":",
            "\n\t",
            "\t",
            "if",
            " str",
            "1",
            ".",
            "count",
            "(",
            "i",
            ")",
            " >",
            " ",
            "1",
            ":",
            "\n\t\t",
            "\t",
            "return",
            " i",
            "\n",
            "\t",
            "return",
            " \"",
            "No",
            " Re",
            "peated",
            " Word",
            "s",
            "\"",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 538,
        "prompt": "Write a python function to convert a given string list to a tuple.\n\ndef string_list_to_tuple(str1):\n",
        "answer": "def string_list_to_tuple(str1):\n\treturn tuple(str1)\n\n",
        "test_list": [
            "assert string_list_to_tuple((\"python 3.0\")) == ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')",
            "assert string_list_to_tuple((\"bigdata\")) == ('b', 'i', 'g', 'd', 'a', 't', 'a')",
            "assert string_list_to_tuple((\"language\")) == ('l', 'a', 'n', 'g', 'u', 'a', 'g','e')"
        ],
        "answer_list": [
            "\t",
            "return",
            " tuple",
            "(",
            "str",
            "1",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 539,
        "prompt": "Write a python function to create a list containing the power of said number in bases raised to the corresponding number in the index using map function.\n\ndef basesnum_coresspondingnum(bases_num,index):\n",
        "answer": "def basesnum_coresspondingnum(bases_num,index):\n\treturn [bases_num[i]**index[i] for i in range(len(bases_num))]\n\n",
        "test_list": [
            "assert basesnum_coresspondingnum([10, 20, 30, 40, 50, 60, 70, 80, 90, 100],[1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[10, 400, 27000, 2560000, 312500000, 46656000000, 8235430000000, 1677721600000000, 387420489000000000, 100000000000000000000]",
            "assert basesnum_coresspondingnum([1, 2, 3, 4, 5, 6, 7],[10, 20, 30, 40, 50, 60, 70])==[1, 1048576, 205891132094649, 1208925819614629174706176, 88817841970012523233890533447265625, 48873677980689257489322752273774603865660850176, 143503601609868434285603076356671071740077383739246066639249]",
            "assert basesnum_coresspondingnum([4, 8, 12, 16, 20, 24, 28],[3, 6, 9, 12, 15, 18, 21])==[64, 262144, 5159780352, 281474976710656, 32768000000000000000, 6979147079584381377970176, 2456510688823056210273111113728]"
        ],
        "answer_list": [
            "\t",
            "return",
            " [",
            "bases",
            "_",
            "num",
            "[",
            "i",
            "]**",
            "index",
            "[",
            "i",
            "]",
            " for",
            " i",
            " in",
            " range",
            "(",
            "len",
            "(",
            "bases",
            "_",
            "num",
            "))]",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 540,
        "prompt": "Write a python function to find the difference between highest and least frequencies in a given array.\n\ndef find_Diff(arr,n): \n",
        "answer": "def find_Diff(arr,n): \n\tmax_ele = max(arr) \n\tmin_ele = min(arr) \n\treturn max_ele - min_ele \n\n",
        "test_list": [
            "assert find_Diff([1,1,2,2,7,8,4,5,1,4],10) == 2",
            "assert find_Diff([1,7,9,2,3,3,1,3,3],9) == 3",
            "assert find_Diff([1,2,1,2],4) == 0"
        ],
        "answer_list": [
            "\t",
            "max",
            "_",
            "ele",
            " =",
            " max",
            "(",
            "arr",
            ")",
            " \n",
            "\t",
            "min",
            "_",
            "ele",
            " =",
            " min",
            "(",
            "arr",
            ")",
            " \n",
            "\t",
            "return",
            " max",
            "_",
            "ele",
            " -",
            " min",
            "_",
            "ele",
            " \n",
            "\n",
            "arr"
        ]
    },
    {
        "task_id": 541,
        "prompt": "Write a python function to find if the given number is abundant or not.\n\ndef check_abundant(n): \n",
        "answer": "def check_abundant(n): \n\tsum = 0\n\tfor i in range(1, n): \n\t\tif n % i == 0: \n\t\t\tsum += i \n\tif sum > n: \n\t\treturn True\n\telse: \n\t\treturn False\n\n",
        "test_list": [
            "assert check_abundant(12) == True",
            "assert check_abundant(15) == False",
            "assert check_abundant(18) == True"
        ],
        "answer_list": [
            "\t",
            "sum",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "1",
            ",",
            " n",
            "):",
            " \n\t",
            "\t",
            "if",
            " n",
            " %",
            " i",
            " ==",
            " ",
            "0",
            ":",
            " \n\t\t",
            "\t",
            "sum",
            " +=",
            " i",
            " \n",
            "\t",
            "if",
            " sum",
            " >",
            " n",
            ":",
            " \n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "else",
            ":",
            " \n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\n",
            "n"
        ]
    },
    {
        "task_id": 542,
        "prompt": "Write a python function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.\n\ndef fill_spaces(text):\n",
        "answer": "def fill_spaces(text):\n\treturn re.sub(r\"[.,]\", \":\", text)\n\n",
        "test_list": [
            "assert fill_spaces('Boult Curve Wireless Neckband') == 'Boult:Curve:Wireless:Neckband'",
            "assert fill_spaces('Stereo Sound Sweatproof') == 'Stereo:Sound:Sweatproof'",
            "assert fill_spaces('Probass Curve Audio') == 'Probass:Curve:Audio'"
        ],
        "answer_list": [
            "\t",
            "return",
            " re",
            ".",
            "sub",
            "(",
            "r",
            "\"[",
            ".",
            ",",
            "]\",",
            " \"",
            ":\",",
            " text",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 543,
        "prompt": "Write a python function to add two numbers and print number of digits of sum.\n\ndef count_digits(num1,num2):\n",
        "answer": "def count_digits(num1,num2):\n\tsum = num1 + num2\n\tcount = 0\n\twhile(sum!= 0):\n\t\tsum = sum // 10\n\t\tcount += 1\n\treturn count\n\n",
        "test_list": [
            "assert count_digits(9875,10)==(4)",
            "assert count_digits(98759853034,100)==(11)",
            "assert count_digits(1234567,500)==(7)"
        ],
        "answer_list": [
            "\t",
            "sum",
            " =",
            " num",
            "1",
            " +",
            " num",
            "2",
            "\n",
            "\t",
            "count",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "while",
            "(",
            "sum",
            "!=",
            " ",
            "0",
            "):",
            "\n\t",
            "\t",
            "sum",
            " =",
            " sum",
            " //",
            " ",
            "1",
            "0",
            "\n\t",
            "\t",
            "count",
            " +=",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " count",
            "\n",
            "\n",
            "num"
        ]
    },
    {
        "task_id": 544,
        "prompt": "Write a python function to flatten the tuple list to a string.\n\ndef flatten_tuple(test_list):\n",
        "answer": "def flatten_tuple(test_list):\n\treturn ''.join(test_list)\n\n",
        "test_list": [
            "assert flatten_tuple([('1', '4', '6'), ('5', '8'), ('2', '9'), ('1', '10')]) == '1 4 6 5 8 2 9 1 10'",
            "assert flatten_tuple([('2', '3', '4'), ('6', '9'), ('3', '2'), ('2', '11')]) == '2 3 4 6 9 3 2 2 11'",
            "assert flatten_tuple([('14', '21', '9'), ('24', '19'), ('12', '29'), ('23', '17')]) == '14 21 9 24 19 12 29 23 17'"
        ],
        "answer_list": [
            "\t",
            "return",
            " ''.",
            "join",
            "(",
            "test",
            "_",
            "list",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 545,
        "prompt": "Write a python function to toggle only first and last bits of a given number.\n\ndef toggle_F_and_L_bits(n) :  \n",
        "answer": "def toggle_F_and_L_bits(n) :  \n\treturn n ^ (1 << 31) ^ (1 << 0)\n\n",
        "test_list": [
            "assert toggle_F_and_L_bits(10) == 3",
            "assert toggle_F_and_L_bits(15) == 6",
            "assert toggle_F_and_L_bits(20) == 5"
        ],
        "answer_list": [
            "\t",
            "return",
            " n",
            " ^",
            " (",
            "1",
            " <<",
            " ",
            "3",
            "1",
            ")",
            " ^",
            " (",
            "1",
            " <<",
            " ",
            "0",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 546,
        "prompt": "Write a python function to find the last occurrence of a character in a string.\n\ndef last_occurence_char(string,char):\n",
        "answer": "def last_occurence_char(string,char):\n\treturn string.rfind(char)\n\n",
        "test_list": [
            "assert last_occurence_char(\"hello world\",'l')==10",
            "assert last_occurence_char(\"language\",'g')==7",
            "assert last_occurence_char(\"little\",'y')==None"
        ],
        "answer_list": [
            "\t",
            "return",
            " string",
            ".",
            "r",
            "find",
            "(",
            "char",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 547,
        "prompt": "Write a python function to find the sum of hamming distances of all consecutive numbers from o to n.\n\ndef Total_Hamming_Distance(n):   \n",
        "answer": "def Total_Hamming_Distance(n):   \n\tsum = 0\n\tfor i in range(1,n+1):\n\t\tsum += Hamming_Distance(i)\n\treturn sum\n\n",
        "test_list": [
            "assert Total_Hamming_Distance(4) == 7",
            "assert Total_Hamming_Distance(2) == 3",
            "assert Total_Hamming_Distance(5) == 8"
        ],
        "answer_list": [
            "\t",
            "sum",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "1",
            ",",
            "n",
            "+",
            "1",
            "):",
            "\n\t",
            "\t",
            "sum",
            " +=",
            " H",
            "am",
            "ming",
            "_",
            "Distance",
            "(",
            "i",
            ")",
            "\n",
            "\t",
            "return",
            " sum",
            "\n",
            "\n",
            "def"
        ]
    },
    {
        "task_id": 548,
        "prompt": "Write a python function to find the length of the longest increasing subsequence of the given sequence.\n\ndef longest_increasing_subsequence(arr): \n",
        "answer": "def longest_increasing_subsequence(arr): \n\tn = len(arr) \n\tdp = [1]*n \n\tfor i in range(1, n): \n\t\tfor j in range(0, i): \n\t\t\tif arr[i] > arr[j] and dp[i]<dp[j]+1: \n\t\t\t\tdp[i] = dp[j]+1\n\treturn max(dp) \n\n",
        "test_list": [
            "assert longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60]) == 5",
            "assert longest_increasing_subsequence([3, 10, 2, 1, 20]) == 3",
            "assert longest_increasing_subsequence([50, 3, 10, 7, 40, 80]) == 4 "
        ],
        "answer_list": [
            "\t",
            "n",
            " =",
            " len",
            "(",
            "arr",
            ")",
            " \n",
            "\t",
            "dp",
            " =",
            " [",
            "1",
            "]*",
            "n",
            " \n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "1",
            ",",
            " n",
            "):",
            " \n\t",
            "\t",
            "for",
            " j",
            " in",
            " range",
            "(",
            "0",
            ",",
            " i",
            "):",
            " \n\t\t",
            "\t",
            "if",
            " arr",
            "[",
            "i",
            "]",
            " >",
            " arr",
            "[",
            "j",
            "]",
            " and",
            " dp",
            "[",
            "i",
            "]<",
            "dp",
            "[",
            "j",
            "]+",
            "1",
            ":",
            " \n\t\t\t",
            "\t",
            "dp",
            "[",
            "i",
            "]",
            " =",
            " dp",
            "[",
            "j",
            "]+",
            "1",
            "\n",
            "\t",
            "return",
            " max",
            "(",
            "dp",
            ")",
            " \n",
            "\n",
            "arr"
        ]
    },
    {
        "task_id": 549,
        "prompt": "Write a python function to find the sum of fifth power of first n odd natural numbers.\n\ndef odd_Num_Sum(n) : \n",
        "answer": "def odd_Num_Sum(n) : \n\tsum = 0\n\tfor i in range(1,n,2) : \n\t\tsum += i**5\n\treturn sum\n\n",
        "test_list": [
            "assert odd_Num_Sum(1) == 1",
            "assert odd_Num_Sum(2) == 244",
            "assert odd_Num_Sum(3) == 3369"
        ],
        "answer_list": [
            "\t",
            "sum",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "1",
            ",",
            "n",
            ",",
            "2",
            ")",
            " :",
            " \n\t",
            "\t",
            "sum",
            " +=",
            " i",
            "**",
            "5",
            "\n",
            "\t",
            "return",
            " sum",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 550,
        "prompt": "Write a python function to find the maximum element in a sorted and rotated array.\n\ndef find_Max(arr,low,high): \n",
        "answer": "def find_Max(arr,low,high): \n\tif high < low: \n\t\treturn -1\n\tif high == low: \n\t\treturn arr[low] \n\tmid = (high + low) // 2\n\tif mid < high and arr[mid] > arr[mid + 1]: \n\t\treturn arr[mid] \n\tif mid > low and arr[mid] < arr[mid - 1]: \n\t\treturn arr[mid] \n\tif arr[high] > arr[mid]: \n\t\treturn find_Max(arr, low, mid - 1) \n\treturn find_Max(arr, mid + 1, high) \n\n",
        "test_list": [
            "assert find_Max([2,3,5,6,9],0,4) == 9",
            "assert find_Max([3,4,5,2,1],0,4) == 5",
            "assert find_Max([1,2,3],0,2) == 3"
        ],
        "answer_list": [
            "\t",
            "if",
            " high",
            " <",
            " low",
            ":",
            " \n\t",
            "\t",
            "return",
            " -",
            "1",
            "\n",
            "\t",
            "if",
            " high",
            " ==",
            " low",
            ":",
            " \n\t",
            "\t",
            "return",
            " arr",
            "[",
            "low",
            "]",
            " \n",
            "\t",
            "mid",
            " =",
            " (",
            "high",
            " +",
            " low",
            ")",
            " //",
            " ",
            "2",
            "\n",
            "\t",
            "if",
            " mid",
            " <",
            " high",
            " and",
            " arr",
            "[",
            "mid",
            "]",
            " >",
            " arr",
            "[",
            "mid",
            " +",
            " ",
            "1",
            "]:",
            " \n\t",
            "\t",
            "return",
            " arr",
            "[",
            "mid",
            "]",
            " \n",
            "\t",
            "if",
            " mid",
            " >",
            " low",
            " and",
            " arr",
            "[",
            "mid",
            "]",
            " <",
            " arr",
            "[",
            "mid",
            " -",
            " ",
            "1",
            "]:",
            " \n\t",
            "\t",
            "return",
            " arr",
            "[",
            "mid",
            "]",
            " \n",
            "\t",
            "if",
            " arr",
            "[",
            "high",
            "]",
            " >",
            " arr",
            "[",
            "mid",
            "]:",
            " \n\t",
            "\t",
            "return",
            " find",
            "_",
            "Max",
            "(",
            "arr",
            ",",
            " low",
            ",",
            " mid",
            " -",
            " ",
            "1",
            ")",
            " \n",
            "\t",
            "return",
            " find",
            "_",
            "Max",
            "(",
            "arr",
            ",",
            " mid",
            " +",
            " ",
            "1",
            ",",
            " high",
            ")",
            " \n",
            "\n",
            "arr"
        ]
    },
    {
        "task_id": 551,
        "prompt": "Write a python function to extract a specified column from a given nested list.\n\ndef extract_column(list1, n):\n",
        "answer": "def extract_column(list1, n):\n\treturn [lst[n] for lst in list1]\n\n",
        "test_list": [
            "assert extract_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[1, 2, 1]",
            "assert extract_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[3, -5, 1]",
            "assert extract_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[1, 5, 1, 13, 5, 9]"
        ],
        "answer_list": [
            "\t",
            "return",
            " [",
            "lst",
            "[",
            "n",
            "]",
            " for",
            " lst",
            " in",
            " list",
            "1",
            "]",
            "\n",
            "\n",
            "#"
        ]
    },
    {
        "task_id": 552,
        "prompt": "Write a python function to check whether a given sequence is linear or not.\n\ndef Seq_Linear(seq_nums):\n",
        "answer": "def Seq_Linear(seq_nums):\n\tif len(seq_nums) == 1:\n\t\treturn True\n\telse:\n\t\tfor i in range(len(seq_nums)-1):\n\t\t\tif seq_nums[i+1] - seq_nums[i]!= 1:\n\t\t\t\treturn False\n\t\treturn True\n\n",
        "test_list": [
            "assert Seq_Linear([0,2,4,6,8,10]) == \"Linear Sequence\"",
            "assert Seq_Linear([1,2,3]) == \"Linear Sequence\"",
            "assert Seq_Linear([1,5,2]) == \"Non Linear Sequence\""
        ],
        "answer_list": [
            "\t",
            "if",
            " len",
            "(",
            "seq",
            "_",
            "nums",
            ")",
            " ==",
            " ",
            "1",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "len",
            "(",
            "seq",
            "_",
            "nums",
            ")-",
            "1",
            "):",
            "\n\t\t",
            "\t",
            "if",
            " seq",
            "_",
            "nums",
            "[",
            "i",
            "+",
            "1",
            "]",
            " -",
            " seq",
            "_",
            "nums",
            "[",
            "i",
            "]",
            "!=",
            " ",
            "1",
            ":",
            "\n\t\t\t",
            "\t",
            "return",
            " False",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 553,
        "prompt": "Write a python function to convert the given tuple to a floating-point number.\n\ndef tuple_to_float(test_tup):\n",
        "answer": "def tuple_to_float(test_tup):\n\treturn float(test_tup[0]) + float(test_tup[1]) + float(test_tup[2])\n\n",
        "test_list": [
            "assert tuple_to_float((4, 56)) == 4.56",
            "assert tuple_to_float((7, 256)) == 7.256",
            "assert tuple_to_float((8, 123)) == 8.123"
        ],
        "answer_list": [
            "\t",
            "return",
            " float",
            "(",
            "test",
            "_",
            "tup",
            "[",
            "0",
            "])",
            " +",
            " float",
            "(",
            "test",
            "_",
            "tup",
            "[",
            "1",
            "])",
            " +",
            " float",
            "(",
            "test",
            "_",
            "tup",
            "[",
            "2",
            "])",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 554,
        "prompt": "Write a python function to find odd numbers from a mixed list.\n\ndef Split(list): \n",
        "answer": "def Split(list): \n\todd = []\n\teven = []\n\tfor i in list:\n\t\tif i % 2 == 0:\n\t\t\teven.append(i)\n\t\telse:\n\t\t\todd.append(i)\n\treturn odd, even\n\n",
        "test_list": [
            "assert Split([1,2,3,4,5,6]) == [1,3,5]",
            "assert Split([10,11,12,13]) == [11,13]",
            "assert Split([7,8,9,1]) == [7,9,1]"
        ],
        "answer_list": [
            "\t",
            "odd",
            " =",
            " []",
            "\n",
            "\t",
            "even",
            " =",
            " []",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " list",
            ":",
            "\n\t",
            "\t",
            "if",
            " i",
            " %",
            " ",
            "2",
            " ==",
            " ",
            "0",
            ":",
            "\n\t\t",
            "\t",
            "even",
            ".",
            "append",
            "(",
            "i",
            ")",
            "\n\t",
            "\t",
            "else",
            ":",
            "\n\t\t",
            "\t",
            "odd",
            ".",
            "append",
            "(",
            "i",
            ")",
            "\n",
            "\t",
            "return",
            " odd",
            ",",
            " even",
            "\n",
            "\n",
            "list"
        ]
    },
    {
        "task_id": 555,
        "prompt": "Write a python function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.\n\ndef difference(n) :  \n",
        "answer": "def difference(n) :  \n\tsum_of_cubes = 0\n\tsum_of_numbers = 0\n\tfor i in range(1, n+1) : \n\t\tsum_of_cubes += i**3\n\t\tsum_of_numbers += i\n\treturn sum_of_cubes - sum_of_numbers\n\n",
        "test_list": [
            "assert difference(3) == 30",
            "assert difference(5) == 210",
            "assert difference(2) == 6"
        ],
        "answer_list": [
            "\t",
            "sum",
            "_",
            "of",
            "_",
            "c",
            "ubes",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "sum",
            "_",
            "of",
            "_",
            "numbers",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "1",
            ",",
            " n",
            "+",
            "1",
            ")",
            " :",
            " \n\t",
            "\t",
            "sum",
            "_",
            "of",
            "_",
            "c",
            "ubes",
            " +=",
            " i",
            "**",
            "3",
            "\n\t",
            "\t",
            "sum",
            "_",
            "of",
            "_",
            "numbers",
            " +=",
            " i",
            "\n",
            "\t",
            "return",
            " sum",
            "_",
            "of",
            "_",
            "c",
            "ubes",
            " -",
            " sum",
            "_",
            "of",
            "_",
            "numbers",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 556,
        "prompt": "Write a python function to count the pairs with xor as an odd number.\n\ndef find_Odd_Pair(A,N) : \n",
        "answer": "def find_Odd_Pair(A,N) : \n\tcount = 0\n\tfor i in range(N) : \n\t\tfor j in range(i+1,N) : \n\t\t\tif (A[i] ^ A[j]) & 1 : \n\t\t\t\tcount += 1\n\treturn count\n\n",
        "test_list": [
            "assert find_Odd_Pair([5,4,7,2,1],5) == 6",
            "assert find_Odd_Pair([7,2,8,1,0,5,11],7) == 12",
            "assert find_Odd_Pair([1,2,3],3) == 2"
        ],
        "answer_list": [
            "\t",
            "count",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "N",
            ")",
            " :",
            " \n\t",
            "\t",
            "for",
            " j",
            " in",
            " range",
            "(",
            "i",
            "+",
            "1",
            ",",
            "N",
            ")",
            " :",
            " \n\t\t",
            "\t",
            "if",
            " (",
            "A",
            "[",
            "i",
            "]",
            " ^",
            " A",
            "[",
            "j",
            "])",
            " &",
            " ",
            "1",
            " :",
            " \n\t\t\t",
            "\t",
            "count",
            " +=",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " count",
            "\n",
            "\n",
            "A"
        ]
    },
    {
        "task_id": 557,
        "prompt": "Write a python function to toggle characters case in a string.\n\ndef toggle_string(string):\n",
        "answer": "def toggle_string(string):\n\treturn string.swapcase()\n\n",
        "test_list": [
            "assert toggle_string(\"Python\")==(\"pYTHON\")",
            "assert toggle_string(\"Pangram\")==(\"pANGRAM\")",
            "assert toggle_string(\"LIttLE\")==(\"liTTle\")"
        ],
        "answer_list": [
            "\t",
            "return",
            " string",
            ".",
            "swap",
            "case",
            "()",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 558,
        "prompt": "Write a python function to find the digit distance between two integers.\n\ndef digit_distance_nums(n1, n2):\n",
        "answer": "def digit_distance_nums(n1, n2):\n\treturn sum(map(lambda x: abs(int(x[0]) - int(x[1])), zip(str(n1), str(n2))))\n\n",
        "test_list": [
            "assert digit_distance_nums(1,2) == 1",
            "assert digit_distance_nums(23,56) == 6",
            "assert digit_distance_nums(123,256) == 7"
        ],
        "answer_list": [
            "\t",
            "return",
            " sum",
            "(",
            "map",
            "(",
            "lambda",
            " x",
            ":",
            " abs",
            "(",
            "int",
            "(",
            "x",
            "[",
            "0",
            "])",
            " -",
            " int",
            "(",
            "x",
            "[",
            "1",
            "])),",
            " zip",
            "(",
            "str",
            "(",
            "n",
            "1",
            "),",
            " str",
            "(",
            "n",
            "2",
            "))))",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 559,
        "prompt": "Write a python function to find the largest sum of contiguous subarray in the given array.\n\ndef max_sub_array_sum(a, size):\n",
        "answer": "def max_sub_array_sum(a, size):\n\tmax_so_far = -999999999999\n\tmax_ending_here = 0\n\tstart = 0\n\tend = 0\n\tfor i in range(0, size):\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_so_far < max_ending_here:\n\t\t\tmax_so_far = max_ending_here\n\t\t\tstart = i\n\t\t\tend = i\n\t\tif max_ending_here < 0:\n\t\t\tmax_ending_here = 0\n\t\t\tstart = i + 1\n\t\t\tend = i + 1\n\tfor i in range(start, end + 1):\n\t\tprint a[i],\n\tprint\n\tprint \"Maximum contiguous sum is\", max_so_far\n\n",
        "test_list": [
            "assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7",
            "assert max_sub_array_sum([-3, -4, 5, -2, -3, 2, 6, -4], 8) == 8",
            "assert max_sub_array_sum([-4, -5, 6, -3, -4, 3, 7, -5], 8) == 10"
        ],
        "answer_list": [
            "\t",
            "max",
            "_",
            "so",
            "_",
            "far",
            " =",
            " -",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "9",
            "\n",
            "\t",
            "max",
            "_",
            "ending",
            "_",
            "here",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "start",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "end",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "0",
            ",",
            " size",
            "):",
            "\n\t",
            "\t",
            "max",
            "_",
            "ending",
            "_",
            "here",
            " =",
            " max",
            "_",
            "ending",
            "_",
            "here",
            " +",
            " a",
            "[",
            "i",
            "]",
            "\n\t",
            "\t",
            "if",
            " max",
            "_",
            "so",
            "_",
            "far",
            " <",
            " max",
            "_",
            "ending",
            "_",
            "here",
            ":",
            "\n\t\t",
            "\t",
            "max",
            "_",
            "so",
            "_",
            "far",
            " =",
            " max",
            "_",
            "ending",
            "_",
            "here",
            "\n\t\t",
            "\t",
            "start",
            " =",
            " i",
            "\n\t\t",
            "\t",
            "end",
            " =",
            " i",
            "\n\t",
            "\t",
            "if",
            " max",
            "_",
            "ending",
            "_",
            "here",
            " <",
            " ",
            "0",
            ":",
            "\n\t\t",
            "\t",
            "max",
            "_",
            "ending",
            "_",
            "here",
            " =",
            " ",
            "0",
            "\n\t\t",
            "\t",
            "start",
            " =",
            " i",
            " +",
            " ",
            "1",
            "\n\t\t",
            "\t",
            "end",
            " =",
            " i",
            " +",
            " ",
            "1",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "start",
            ",",
            " end",
            " +",
            " ",
            "1",
            "):",
            "\n\t",
            "\t",
            "print",
            " a",
            "[",
            "i",
            "],",
            "\n",
            "\t",
            "print",
            "\n",
            "\t",
            "print",
            " \"",
            "Maximum",
            " contiguous",
            " sum",
            " is",
            "\",",
            " max",
            "_",
            "so",
            "_",
            "far",
            "\n",
            "\n",
            "a"
        ]
    },
    {
        "task_id": 560,
        "prompt": "Write a python function to find the union of elements of the given tuples.\n\ndef union_elements(test_tup1, test_tup2):\n",
        "answer": "def union_elements(test_tup1, test_tup2):\n\treturn tuple(set(test_tup1) | set(test_tup2))\n\n",
        "test_list": [
            "assert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)",
            "assert union_elements((1, 2, 3, 4),(3, 4, 5, 6) ) == (1, 2, 3, 4, 5, 6)",
            "assert union_elements((11, 12, 13, 14),(13, 15, 16, 17) ) == (11, 12, 13, 14, 15, 16, 17)"
        ],
        "answer_list": [
            "\t",
            "return",
            " tuple",
            "(",
            "set",
            "(",
            "test",
            "_",
            "tup",
            "1",
            ")",
            " |",
            " set",
            "(",
            "test",
            "_",
            "tup",
            "2",
            "))",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 561,
        "prompt": "Write a python function to assign with each element, its pair elements from other similar pairs in the given tuple.\n\ndef assign_elements(test_list):\n",
        "answer": "def assign_elements(test_list):\n\treturn [(test_list[i], test_list[i+1]) for i in range(0, len(test_list), 2)]\n\n",
        "test_list": [
            "assert assign_elements([(5, 3), (7, 5), (2, 7), (3, 8), (8, 4)] ) == {3: [8], 5: [3], 7: [5], 2: [7], 8: [4], 4: []}",
            "assert assign_elements([(6, 4), (9, 4), (3, 8), (4, 9), (9, 5)] ) == {4: [9], 6: [4], 9: [4, 5], 8: [], 3: [8], 5: []}",
            "assert assign_elements([(6, 2), (6, 8), (4, 9), (4, 9), (3, 7)] ) == {2: [], 6: [2, 8], 8: [], 9: [], 4: [9, 9], 7: [], 3: [7]}"
        ],
        "answer_list": [
            "\t",
            "return",
            " [(",
            "test",
            "_",
            "list",
            "[",
            "i",
            "],",
            " test",
            "_",
            "list",
            "[",
            "i",
            "+",
            "1",
            "])",
            " for",
            " i",
            " in",
            " range",
            "(",
            "0",
            ",",
            " len",
            "(",
            "test",
            "_",
            "list",
            "),",
            " ",
            "2",
            ")]",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 562,
        "prompt": "Write a python function to find the maximum length of sublist.\n\ndef Find_Max_Length(lst):  \n",
        "answer": "def Find_Max_Length(lst):  \n\tmax_len = 0\n\tfor i in range(len(lst)):\n\t\tfor j in range(i, len(lst)):\n\t\t\tif len(lst[i:j+1]) > max_len:\n\t\t\t\tmax_len = len(lst[i:j+1])\n\treturn max_len\n\n",
        "test_list": [
            "assert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4",
            "assert Find_Max_Length([[0,1],[2,2,],[3,2,1]]) == 3",
            "assert Find_Max_Length([[7],[22,23],[13,14,15],[10,20,30,40,50]]) == 5"
        ],
        "answer_list": [
            "\t",
            "max",
            "_",
            "len",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "len",
            "(",
            "lst",
            ")):",
            "\n\t",
            "\t",
            "for",
            " j",
            " in",
            " range",
            "(",
            "i",
            ",",
            " len",
            "(",
            "lst",
            ")):",
            "\n\t\t",
            "\t",
            "if",
            " len",
            "(",
            "lst",
            "[",
            "i",
            ":",
            "j",
            "+",
            "1",
            "])",
            " >",
            " max",
            "_",
            "len",
            ":",
            "\n\t\t\t",
            "\t",
            "max",
            "_",
            "len",
            " =",
            " len",
            "(",
            "lst",
            "[",
            "i",
            ":",
            "j",
            "+",
            "1",
            "])",
            "\n",
            "\t",
            "return",
            " max",
            "_",
            "len",
            "\n",
            "\n",
            "lst"
        ]
    },
    {
        "task_id": 563,
        "prompt": "Write a python function to extract values between quotation marks of a string.\n\ndef extract_values(text):\n",
        "answer": "def extract_values(text):\n\treturn re.findall('\"([^\"]*)\"', text)\n\n",
        "test_list": [
            "assert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']",
            "assert extract_values('\"python\",\"program\",\"language\"')==['python','program','language']",
            "assert extract_values('\"red\",\"blue\",\"green\",\"yellow\"')==['red','blue','green','yellow']"
        ],
        "answer_list": [
            "\t",
            "return",
            " re",
            ".",
            "findall",
            "('\"",
            "([^",
            "\"]",
            "*)",
            "\"',",
            " text",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 564,
        "prompt": "Write a python function to count unequal element pairs from the given array.\n\ndef count_Pairs(arr,n): \n",
        "answer": "def count_Pairs(arr,n): \n\tcount = 0\n\tfor i in range(n): \n\t\tfor j in range(i+1, n): \n\t\t\tif arr[i]!= arr[j]: \n\t\t\t\tcount += 1\n\treturn count \n\n",
        "test_list": [
            "assert count_Pairs([1,2,1],3) == 2",
            "assert count_Pairs([1,1,1,1],4) == 0",
            "assert count_Pairs([1,2,3,4,5],5) == 10"
        ],
        "answer_list": [
            "\t",
            "count",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "n",
            "):",
            " \n\t",
            "\t",
            "for",
            " j",
            " in",
            " range",
            "(",
            "i",
            "+",
            "1",
            ",",
            " n",
            "):",
            " \n\t\t",
            "\t",
            "if",
            " arr",
            "[",
            "i",
            "]",
            "!=",
            " arr",
            "[",
            "j",
            "]:",
            " \n\t\t\t",
            "\t",
            "count",
            " +=",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " count",
            " \n",
            "\n",
            "arr"
        ]
    },
    {
        "task_id": 565,
        "prompt": "Write a python function to split a string into characters.\n\ndef split(word): \n",
        "answer": "def split(word): \n\treturn list(word)\n\n",
        "test_list": [
            "assert split('python') == ['p','y','t','h','o','n']",
            "assert split('Name') == ['N','a','m','e']",
            "assert split('program') == ['p','r','o','g','r','a','m']"
        ],
        "answer_list": [
            "\t",
            "return",
            " list",
            "(",
            "word",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 566,
        "prompt": "Write a python function to get the sum of a non-negative integer.\n\ndef sum_digits(n):\n",
        "answer": "def sum_digits(n):\n\tif n < 0:\n\t\treturn None\n\telse:\n\t\treturn sum([int(i) for i in str(n)])\n\n",
        "test_list": [
            "assert sum_digits(345)==12",
            "assert sum_digits(12)==3",
            "assert sum_digits(97)==16"
        ],
        "answer_list": [
            "\t",
            "if",
            " n",
            " <",
            " ",
            "0",
            ":",
            "\n\t",
            "\t",
            "return",
            " None",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "return",
            " sum",
            "([",
            "int",
            "(",
            "i",
            ")",
            " for",
            " i",
            " in",
            " str",
            "(",
            "n",
            ")])",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 567,
        "prompt": "Write a python function to check whether a specified list is sorted or not.\n\ndef issort_list(list1):\n",
        "answer": "def issort_list(list1):\n\tif list1 == sorted(list1):\n\t\treturn True\n\telse:\n\t\treturn False\n\n",
        "test_list": [
            "assert issort_list([1,2,4,6,8,10,12,14,16,17])==True",
            "assert issort_list([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])==False",
            "assert issort_list([1, 2, 4, 6, 8, 10,15,14,20])==False"
        ],
        "answer_list": [
            "\t",
            "if",
            " list",
            "1",
            " ==",
            " sorted",
            "(",
            "list",
            "1",
            "):",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 568,
        "prompt": "Write a python function to create a list of empty dictionaries.\n\ndef empty_list(length):\n",
        "answer": "def empty_list(length):\n\treturn [{} for i in range(length)]\n\n",
        "test_list": [
            "assert empty_list(5)==[{},{},{},{},{}]",
            "assert empty_list(6)==[{},{},{},{},{},{}]",
            "assert empty_list(7)==[{},{},{},{},{},{},{}]"
        ],
        "answer_list": [
            "\t",
            "return",
            " [",
            "{}",
            " for",
            " i",
            " in",
            " range",
            "(",
            "length",
            ")]",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 569,
        "prompt": "Write a python function to sort each sublist of strings in a given list of lists.\n\ndef sort_sublists(list1):\n",
        "answer": "def sort_sublists(list1):\n\tfor i in range(len(list1)):\n\t\tlist1[i].sort()\n\treturn list1\n\n",
        "test_list": [
            "assert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]",
            "assert sort_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])==[['green', 'orange'], ['black'], ['green', 'orange'], ['white']]",
            "assert sort_sublists([['a','b'],['d','c'],['g','h'] , ['f','e']])==[['a', 'b'], ['c', 'd'], ['g', 'h'], ['e', 'f']]"
        ],
        "answer_list": [
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "len",
            "(",
            "list",
            "1",
            ")):",
            "\n\t",
            "\t",
            "list",
            "1",
            "[",
            "i",
            "].",
            "sort",
            "()",
            "\n",
            "\t",
            "return",
            " list",
            "1",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 570,
        "prompt": "Write a python function to remove words from a given list of strings containing a character or string.\n\ndef remove_words(list1, charlist):\n",
        "answer": "def remove_words(list1, charlist):\n\tfor i in charlist:\n\t\tlist1 = [x.replace(i, '') for x in list1]\n\treturn list1\n\n",
        "test_list": [
            "assert remove_words(['Red color', 'Orange#', 'Green', 'Orange @', \"White\"],['#', 'color', '@'])==['Red', '', 'Green', 'Orange', 'White']",
            "assert remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['&', '+', '@'])==['Red', '', 'Green', 'Orange', 'White']",
            "assert remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['@'])==['Red &', 'Orange+', 'Green', 'Orange', 'White']"
        ],
        "answer_list": [
            "\t",
            "for",
            " i",
            " in",
            " char",
            "list",
            ":",
            "\n\t",
            "\t",
            "list",
            "1",
            " =",
            " [",
            "x",
            ".",
            "replace",
            "(",
            "i",
            ",",
            " '')",
            " for",
            " x",
            " in",
            " list",
            "1",
            "]",
            "\n",
            "\t",
            "return",
            " list",
            "1",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 571,
        "prompt": "Write a python function to find maximum possible sum of disjoint pairs for the given array of integers and a number k.\n\ndef max_sum_pair_diff_lessthan_K(arr, N, K): \n",
        "answer": "def max_sum_pair_diff_lessthan_K(arr, N, K): \n\tarr.sort() \n\tmax_sum = 0\n\tfor i in range(N): \n\t\tfor j in range(i + 1, N): \n\t\t\tif arr[j] - arr[i] < K: \n\t\t\t\tmax_sum = max(max_sum, arr[j] - arr[i]) \n\treturn max_sum \n\n",
        "test_list": [
            "assert max_sum_pair_diff_lessthan_K([3, 5, 10, 15, 17, 12, 9], 7, 4) == 62",
            "assert max_sum_pair_diff_lessthan_K([5, 15, 10, 300], 4, 12) == 25",
            "assert max_sum_pair_diff_lessthan_K([1, 2, 3, 4, 5, 6], 6, 6) == 21"
        ],
        "answer_list": [
            "\t",
            "arr",
            ".",
            "sort",
            "()",
            " \n",
            "\t",
            "max",
            "_",
            "sum",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "N",
            "):",
            " \n\t",
            "\t",
            "for",
            " j",
            " in",
            " range",
            "(",
            "i",
            " +",
            " ",
            "1",
            ",",
            " N",
            "):",
            " \n\t\t",
            "\t",
            "if",
            " arr",
            "[",
            "j",
            "]",
            " -",
            " arr",
            "[",
            "i",
            "]",
            " <",
            " K",
            ":",
            " \n\t\t\t",
            "\t",
            "max",
            "_",
            "sum",
            " =",
            " max",
            "(",
            "max",
            "_",
            "sum",
            ",",
            " arr",
            "[",
            "j",
            "]",
            " -",
            " arr",
            "[",
            "i",
            "])",
            " \n",
            "\t",
            "return",
            " max",
            "_",
            "sum",
            " \n",
            "\n",
            "#"
        ]
    },
    {
        "task_id": 572,
        "prompt": "Write a python function to remove two duplicate numbers from a given number of lists.\n\ndef two_unique_nums(nums):\n",
        "answer": "def two_unique_nums(nums):\n\t# Your code goes here\n\t# return a list of two unique numbers\n\t# nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n\t# nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]\n\t# nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126,",
        "test_list": [
            "assert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]",
            "assert two_unique_nums([1,2,3,2,4,5]) == [1, 3, 4, 5]",
            "assert two_unique_nums([1,2,3,4,5]) == [1, 2, 3, 4, 5]"
        ],
        "answer_list": [
            "\t",
            "#",
            " Your",
            " code",
            " goes",
            " here",
            "\n",
            "\t",
            "#",
            " return",
            " a",
            " list",
            " of",
            " two",
            " unique",
            " numbers",
            "\n",
            "\t",
            "#",
            " nums",
            " =",
            " [",
            "1",
            ",",
            " ",
            "2",
            ",",
            " ",
            "3",
            ",",
            " ",
            "4",
            ",",
            " ",
            "5",
            ",",
            " ",
            "6",
            ",",
            " ",
            "7",
            ",",
            " ",
            "8",
            ",",
            " ",
            "9",
            ",",
            " ",
            "1",
            "0",
            ",",
            " ",
            "1",
            "1",
            ",",
            " ",
            "1",
            "2",
            ",",
            " ",
            "1",
            "3",
            ",",
            " ",
            "1",
            "4",
            ",",
            " ",
            "1",
            "5",
            ",",
            " ",
            "1",
            "6",
            ",",
            " ",
            "1",
            "7",
            ",",
            " ",
            "1",
            "8",
            ",",
            " ",
            "1",
            "9",
            ",",
            " ",
            "2",
            "0",
            "]",
            "\n",
            "\t",
            "#",
            " nums",
            " =",
            " [",
            "1",
            ",",
            " ",
            "2",
            ",",
            " ",
            "3",
            ",",
            " ",
            "4",
            ",",
            " ",
            "5",
            ",",
            " ",
            "6",
            ",",
            " ",
            "7",
            ",",
            " ",
            "8",
            ",",
            " ",
            "9",
            ",",
            " ",
            "1",
            "0",
            ",",
            " ",
            "1",
            "1",
            ",",
            " ",
            "1",
            "2",
            ",",
            " ",
            "1",
            "3",
            ",",
            " ",
            "1",
            "4",
            ",",
            " ",
            "1",
            "5",
            ",",
            " ",
            "1",
            "6",
            ",",
            " ",
            "1",
            "7",
            ",",
            " ",
            "1",
            "8",
            ",",
            " ",
            "1",
            "9",
            ",",
            " ",
            "2",
            "0",
            ",",
            " ",
            "2",
            "0",
            ",",
            " ",
            "2",
            "1",
            ",",
            " ",
            "2",
            "2",
            ",",
            " ",
            "2",
            "3",
            ",",
            " ",
            "2",
            "4",
            ",",
            " ",
            "2",
            "5",
            ",",
            " ",
            "2",
            "6",
            ",",
            " ",
            "2",
            "7",
            ",",
            " ",
            "2",
            "8",
            ",",
            " ",
            "2",
            "9",
            ",",
            " ",
            "3",
            "0",
            ",",
            " ",
            "3",
            "1",
            ",",
            " ",
            "3",
            "2",
            ",",
            " ",
            "3",
            "3",
            ",",
            " ",
            "3",
            "4",
            ",",
            " ",
            "3",
            "5",
            ",",
            " ",
            "3",
            "6",
            ",",
            " ",
            "3",
            "7",
            ",",
            " ",
            "3",
            "8",
            ",",
            " ",
            "3",
            "9",
            ",",
            " ",
            "4",
            "0",
            ",",
            " ",
            "4",
            "1",
            ",",
            " ",
            "4",
            "2",
            ",",
            " ",
            "4",
            "3",
            ",",
            " ",
            "4",
            "4",
            ",",
            " ",
            "4",
            "5",
            ",",
            " ",
            "4",
            "6",
            ",",
            " ",
            "4",
            "7",
            ",",
            " ",
            "4",
            "8",
            ",",
            " ",
            "4",
            "9",
            ",",
            " ",
            "5",
            "0",
            ",",
            " ",
            "5",
            "1",
            ",",
            " ",
            "5",
            "2",
            ",",
            " ",
            "5",
            "3",
            ",",
            " ",
            "5",
            "4",
            ",",
            " ",
            "5",
            "5",
            ",",
            " ",
            "5",
            "6",
            ",",
            " ",
            "5",
            "7",
            ",",
            " ",
            "5",
            "8",
            ",",
            " ",
            "5",
            "9",
            ",",
            " ",
            "6",
            "0",
            ",",
            " ",
            "6",
            "1",
            ",",
            " ",
            "6",
            "2",
            ",",
            " ",
            "6",
            "3",
            ",",
            " ",
            "6",
            "4",
            ",",
            " ",
            "6",
            "5",
            ",",
            " ",
            "6",
            "6",
            ",",
            " ",
            "6",
            "7",
            ",",
            " ",
            "6",
            "8",
            ",",
            " ",
            "6",
            "9",
            ",",
            " ",
            "7",
            "0",
            ",",
            " ",
            "7",
            "1",
            ",",
            " ",
            "7",
            "2",
            ",",
            " ",
            "7",
            "3",
            ",",
            " ",
            "7",
            "4",
            ",",
            " ",
            "7",
            "5",
            ",",
            " ",
            "7",
            "6",
            ",",
            " ",
            "7",
            "7",
            ",",
            " ",
            "7",
            "8",
            ",",
            " ",
            "7",
            "9",
            ",",
            " ",
            "8",
            "0",
            ",",
            " ",
            "8",
            "1",
            ",",
            " ",
            "8",
            "2",
            ",",
            " ",
            "8",
            "3",
            ",",
            " ",
            "8",
            "4",
            ",",
            " ",
            "8",
            "5",
            ",",
            " ",
            "8",
            "6",
            ",",
            " ",
            "8",
            "7",
            ",",
            " ",
            "8",
            "8",
            ",",
            " ",
            "8",
            "9",
            ",",
            " ",
            "9",
            "0",
            ",",
            " ",
            "9",
            "1",
            ",",
            " ",
            "9",
            "2",
            ",",
            " ",
            "9",
            "3",
            ",",
            " ",
            "9",
            "4",
            ",",
            " ",
            "9",
            "5",
            ",",
            " ",
            "9",
            "6",
            ",",
            " ",
            "9",
            "7",
            ",",
            " ",
            "9",
            "8",
            ",",
            " ",
            "9",
            "9",
            ",",
            " ",
            "1",
            "0",
            "0",
            "]",
            "\n",
            "\t",
            "#",
            " nums",
            " =",
            " [",
            "1",
            ",",
            " ",
            "2",
            ",",
            " ",
            "3",
            ",",
            " ",
            "4",
            ",",
            " ",
            "5",
            ",",
            " ",
            "6",
            ",",
            " ",
            "7",
            ",",
            " ",
            "8",
            ",",
            " ",
            "9",
            ",",
            " ",
            "1",
            "0",
            ",",
            " ",
            "1",
            "1",
            ",",
            " ",
            "1",
            "2",
            ",",
            " ",
            "1",
            "3",
            ",",
            " ",
            "1",
            "4",
            ",",
            " ",
            "1",
            "5",
            ",",
            " ",
            "1",
            "6",
            ",",
            " ",
            "1",
            "7",
            ",",
            " ",
            "1",
            "8",
            ",",
            " ",
            "1",
            "9",
            ",",
            " ",
            "2",
            "0",
            ",",
            " ",
            "2",
            "0",
            ",",
            " ",
            "2",
            "1",
            ",",
            " ",
            "2",
            "2",
            ",",
            " ",
            "2",
            "3",
            ",",
            " ",
            "2",
            "4",
            ",",
            " ",
            "2",
            "5",
            ",",
            " ",
            "2",
            "6",
            ",",
            " ",
            "2",
            "7",
            ",",
            " ",
            "2",
            "8",
            ",",
            " ",
            "2",
            "9",
            ",",
            " ",
            "3",
            "0",
            ",",
            " ",
            "3",
            "1",
            ",",
            " ",
            "3",
            "2",
            ",",
            " ",
            "3",
            "3",
            ",",
            " ",
            "3",
            "4",
            ",",
            " ",
            "3",
            "5",
            ",",
            " ",
            "3",
            "6",
            ",",
            " ",
            "3",
            "7",
            ",",
            " ",
            "3",
            "8",
            ",",
            " ",
            "3",
            "9",
            ",",
            " ",
            "4",
            "0",
            ",",
            " ",
            "4",
            "1",
            ",",
            " ",
            "4",
            "2",
            ",",
            " ",
            "4",
            "3",
            ",",
            " ",
            "4",
            "4",
            ",",
            " ",
            "4",
            "5",
            ",",
            " ",
            "4",
            "6",
            ",",
            " ",
            "4",
            "7",
            ",",
            " ",
            "4",
            "8",
            ",",
            " ",
            "4",
            "9",
            ",",
            " ",
            "5",
            "0",
            ",",
            " ",
            "5",
            "1",
            ",",
            " ",
            "5",
            "2",
            ",",
            " ",
            "5",
            "3",
            ",",
            " ",
            "5",
            "4",
            ",",
            " ",
            "5",
            "5",
            ",",
            " ",
            "5",
            "6",
            ",",
            " ",
            "5",
            "7",
            ",",
            " ",
            "5",
            "8",
            ",",
            " ",
            "5",
            "9",
            ",",
            " ",
            "6",
            "0",
            ",",
            " ",
            "6",
            "1",
            ",",
            " ",
            "6",
            "2",
            ",",
            " ",
            "6",
            "3",
            ",",
            " ",
            "6",
            "4",
            ",",
            " ",
            "6",
            "5",
            ",",
            " ",
            "6",
            "6",
            ",",
            " ",
            "6",
            "7",
            ",",
            " ",
            "6",
            "8",
            ",",
            " ",
            "6",
            "9",
            ",",
            " ",
            "7",
            "0",
            ",",
            " ",
            "7",
            "1",
            ",",
            " ",
            "7",
            "2",
            ",",
            " ",
            "7",
            "3",
            ",",
            " ",
            "7",
            "4",
            ",",
            " ",
            "7",
            "5",
            ",",
            " ",
            "7",
            "6",
            ",",
            " ",
            "7",
            "7",
            ",",
            " ",
            "7",
            "8",
            ",",
            " ",
            "7",
            "9",
            ",",
            " ",
            "8",
            "0",
            ",",
            " ",
            "8",
            "1",
            ",",
            " ",
            "8",
            "2",
            ",",
            " ",
            "8",
            "3",
            ",",
            " ",
            "8",
            "4",
            ",",
            " ",
            "8",
            "5",
            ",",
            " ",
            "8",
            "6",
            ",",
            " ",
            "8",
            "7",
            ",",
            " ",
            "8",
            "8",
            ",",
            " ",
            "8",
            "9",
            ",",
            " ",
            "9",
            "0",
            ",",
            " ",
            "9",
            "1",
            ",",
            " ",
            "9",
            "2",
            ",",
            " ",
            "9",
            "3",
            ",",
            " ",
            "9",
            "4",
            ",",
            " ",
            "9",
            "5",
            ",",
            " ",
            "9",
            "6",
            ",",
            " ",
            "9",
            "7",
            ",",
            " ",
            "9",
            "8",
            ",",
            " ",
            "9",
            "9",
            ",",
            " ",
            "1",
            "0",
            "0",
            ",",
            " ",
            "1",
            "0",
            "1",
            ",",
            " ",
            "1",
            "0",
            "2",
            ",",
            " ",
            "1",
            "0",
            "3",
            ",",
            " ",
            "1",
            "0",
            "4",
            ",",
            " ",
            "1",
            "0",
            "5",
            ",",
            " ",
            "1",
            "0",
            "6",
            ",",
            " ",
            "1",
            "0",
            "7",
            ",",
            " ",
            "1",
            "0",
            "8",
            ",",
            " ",
            "1",
            "0",
            "9",
            ",",
            " ",
            "1",
            "1",
            "0",
            ",",
            " ",
            "1",
            "1",
            "1",
            ",",
            " ",
            "1",
            "1",
            "2",
            ",",
            " ",
            "1",
            "1",
            "3",
            ",",
            " ",
            "1",
            "1",
            "4",
            ",",
            " ",
            "1",
            "1",
            "5",
            ",",
            " ",
            "1",
            "1",
            "6",
            ",",
            " ",
            "1",
            "1",
            "7",
            ",",
            " ",
            "1",
            "1",
            "8",
            ",",
            " ",
            "1",
            "1",
            "9",
            ",",
            " ",
            "1",
            "2",
            "0",
            ",",
            " ",
            "1",
            "2",
            "1",
            ",",
            " ",
            "1",
            "2",
            "2",
            ",",
            " ",
            "1",
            "2",
            "3",
            ",",
            " ",
            "1",
            "2",
            "4",
            ",",
            " ",
            "1",
            "2",
            "5",
            ",",
            " ",
            "1",
            "2",
            "6",
            ","
        ]
    },
    {
        "task_id": 573,
        "prompt": "Write a python function to calculate the product of the unique numbers of a given list.\n\ndef unique_product(list_data):\n",
        "answer": "def unique_product(list_data):\n\tproduct = 1\n\tfor i in list_data:\n\t\tif list_data.count(i) == 1:\n\t\t\tproduct *= i\n\treturn product\n\n",
        "test_list": [
            "assert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000",
            "assert unique_product([1, 2, 3, 1,]) == 6",
            "assert unique_product([7, 8, 9, 0, 1, 1]) == 0"
        ],
        "answer_list": [
            "\t",
            "product",
            " =",
            " ",
            "1",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " list",
            "_",
            "data",
            ":",
            "\n\t",
            "\t",
            "if",
            " list",
            "_",
            "data",
            ".",
            "count",
            "(",
            "i",
            ")",
            " ==",
            " ",
            "1",
            ":",
            "\n\t\t",
            "\t",
            "product",
            " *=",
            " i",
            "\n",
            "\t",
            "return",
            " product",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 574,
        "prompt": "Write a python function to find the surface area of a cylinder.\n\ndef surfacearea_cylinder(r,h):\n",
        "answer": "def surfacearea_cylinder(r,h):\n\treturn 2*3.14*r*h + 2*3.14*r**2\n\n",
        "test_list": [
            "assert surfacearea_cylinder(10,5)==942.45",
            "assert surfacearea_cylinder(4,5)==226.18800000000002",
            "assert surfacearea_cylinder(4,10)==351.848"
        ],
        "answer_list": [
            "\t",
            "return",
            " ",
            "2",
            "*",
            "3",
            ".",
            "1",
            "4",
            "*",
            "r",
            "*",
            "h",
            " +",
            " ",
            "2",
            "*",
            "3",
            ".",
            "1",
            "4",
            "*",
            "r",
            "**",
            "2",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 575,
        "prompt": "Write a python function to find nth number in a sequence which is not a multiple of a given number.\n\ndef count_no (A,N,L,R): \n",
        "answer": "def count_no (A,N,L,R): \n\tif N == 0: \n\t\treturn 0\n\tif N == 1: \n\t\treturn L \n\tif N == 2: \n\t\treturn R \n\tif N == 3: \n\t\treturn L + R \n\tif N == 4: \n\t\treturn L + R + A \n\tif N == 5: \n\t\treturn L + R + A + A \n\tif N == 6: \n\t\treturn L + R + A + A + A \n\tif N == 7: \n\t\treturn L + R + A + A + A + A \n\tif N == 8: \n\t\treturn L + R + A + A + A + A + A \n\tif N == 9: \n\t\treturn L + R + A + A + A + A + A + A \n\tif N == 10: \n\t\treturn L + R + A + A + A + A + A + A + A \n\tif N == 11: \n\t\treturn L + R + A + A + A + A + A + A + A + A \n\tif N == 12: \n\t\treturn L + R + A + A + A + A + A + A + A + A + A \n\tif N == 13: \n\t\treturn L + R + A + A + A + A + A + A + A + A + A + A \n\tif N == 14: \n\t\treturn L + R + A + A + A + A + A + A + A + A + A + A + A \n\tif N == 15: \n\t\treturn L + R + A + A + A + A + A + A + A + A + A + A + A + A \n\tif N == 16: \n\t\treturn L + R + A + A + A + A + A + A + A + A + A + A + A + A + A \n\tif N == 17: \n\t\treturn L + R + A + A + A + A + A + A + A + A + A + A + A + A + A + A \n\tif N == 18: \n\t\treturn L + R + A + A + A + A + A + A + A + A + A + A + A + A + A + A + A \n\tif N == 19: \n\t\treturn L + R + A + A + A + A + A + A + A + A + A + A + A + A + A + A + A + A \n\tif N == 20: \n\t\treturn L + R + A + A + A + A + A + A + A + A + A + A + A + A + A + A + A + A + A \n\tif N == 21: \n\t\treturn L + R + A + A + A + A + A + A + A + A + A + A + A + A + A + A + A + A + A + A \n\tif N == 22: \n\t\treturn L + R + A + A + A + A + A + A + A + A + A + A + A + A + A + A + A + A + A + A + A \n\tif N == 23: \n\t\treturn L + R + A + A + A + A + A + A + A + A + A + A + A + A + A + A + A + A + A + A + A + A \n\tif N == 24: \n\t\treturn L + R + A + A + A + A + A + A + A + A + A + A + A + A + A + A + A + A + A + A + A + A + A \n\tif N == 25: \n\t\treturn L + R + A + A + A + A + A + A + A + A + A + A + A + A + A + A + A + A + A + A + A + A + A + A \n\tif N == 26: \n\t\treturn L + R + A + A + A + A + A + A + A + A + A + A + A + A + A + A + A + A + A + A + A + A + A + A + A \n\tif N == 27: \n\t\treturn L + R + A + A + A + A + A + A + A + A + A + A + A + A + A + A + A + A + A + A + A + A + A + A + A + A \n\tif N == 28: \n\t\treturn L + R + A + A +",
        "test_list": [
            "assert count_no(2,3,1,10) == 5",
            "assert count_no(3,6,4,20) == 11",
            "assert count_no(5,10,4,20) == 16"
        ],
        "answer_list": [
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "0",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "0",
            "\n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "1",
            ":",
            " \n\t",
            "\t",
            "return",
            " L",
            " \n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "2",
            ":",
            " \n\t",
            "\t",
            "return",
            " R",
            " \n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "3",
            ":",
            " \n\t",
            "\t",
            "return",
            " L",
            " +",
            " R",
            " \n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "4",
            ":",
            " \n\t",
            "\t",
            "return",
            " L",
            " +",
            " R",
            " +",
            " A",
            " \n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "5",
            ":",
            " \n\t",
            "\t",
            "return",
            " L",
            " +",
            " R",
            " +",
            " A",
            " +",
            " A",
            " \n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "6",
            ":",
            " \n\t",
            "\t",
            "return",
            " L",
            " +",
            " R",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " \n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "7",
            ":",
            " \n\t",
            "\t",
            "return",
            " L",
            " +",
            " R",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " \n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "8",
            ":",
            " \n\t",
            "\t",
            "return",
            " L",
            " +",
            " R",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " \n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "9",
            ":",
            " \n\t",
            "\t",
            "return",
            " L",
            " +",
            " R",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " \n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "1",
            "0",
            ":",
            " \n\t",
            "\t",
            "return",
            " L",
            " +",
            " R",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " \n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "1",
            "1",
            ":",
            " \n\t",
            "\t",
            "return",
            " L",
            " +",
            " R",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " \n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "1",
            "2",
            ":",
            " \n\t",
            "\t",
            "return",
            " L",
            " +",
            " R",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " \n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "1",
            "3",
            ":",
            " \n\t",
            "\t",
            "return",
            " L",
            " +",
            " R",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " \n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "1",
            "4",
            ":",
            " \n\t",
            "\t",
            "return",
            " L",
            " +",
            " R",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " \n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "1",
            "5",
            ":",
            " \n\t",
            "\t",
            "return",
            " L",
            " +",
            " R",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " \n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "1",
            "6",
            ":",
            " \n\t",
            "\t",
            "return",
            " L",
            " +",
            " R",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " \n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "1",
            "7",
            ":",
            " \n\t",
            "\t",
            "return",
            " L",
            " +",
            " R",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " \n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "1",
            "8",
            ":",
            " \n\t",
            "\t",
            "return",
            " L",
            " +",
            " R",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " \n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "1",
            "9",
            ":",
            " \n\t",
            "\t",
            "return",
            " L",
            " +",
            " R",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " \n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "2",
            "0",
            ":",
            " \n\t",
            "\t",
            "return",
            " L",
            " +",
            " R",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " \n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "2",
            "1",
            ":",
            " \n\t",
            "\t",
            "return",
            " L",
            " +",
            " R",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " \n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "2",
            "2",
            ":",
            " \n\t",
            "\t",
            "return",
            " L",
            " +",
            " R",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " \n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "2",
            "3",
            ":",
            " \n\t",
            "\t",
            "return",
            " L",
            " +",
            " R",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " \n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "2",
            "4",
            ":",
            " \n\t",
            "\t",
            "return",
            " L",
            " +",
            " R",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " \n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "2",
            "5",
            ":",
            " \n\t",
            "\t",
            "return",
            " L",
            " +",
            " R",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " \n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "2",
            "6",
            ":",
            " \n\t",
            "\t",
            "return",
            " L",
            " +",
            " R",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " \n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "2",
            "7",
            ":",
            " \n\t",
            "\t",
            "return",
            " L",
            " +",
            " R",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " +",
            " A",
            " \n",
            "\t",
            "if",
            " N",
            " ==",
            " ",
            "2",
            "8",
            ":",
            " \n\t",
            "\t",
            "return",
            " L",
            " +",
            " R",
            " +",
            " A",
            " +",
            " A",
            " +"
        ]
    },
    {
        "task_id": 576,
        "prompt": "Write a python function to check whether an array is subarray of another or not.\n\ndef is_Sub_Array(A,B,n,m): \n",
        "answer": "def is_Sub_Array(A,B,n,m): \n\tif m==0: \n\t\treturn True\n\tif n==0: \n\t\treturn False\n\tif A[n-1]==B[m-1]: \n\t\treturn is_Sub_Array(A,B,n-1,m-1) \n\telse: \n\t\treturn is_Sub_Array(A,B,n-1,m) \n\n",
        "test_list": [
            "assert is_Sub_Array([1,4,3,5],[1,2],4,2) == False",
            "assert is_Sub_Array([1,2,1],[1,2,1],3,3) == True",
            "assert is_Sub_Array([1,0,2,2],[2,2,0],4,3) ==False"
        ],
        "answer_list": [
            "\t",
            "if",
            " m",
            "==",
            "0",
            ":",
            " \n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " n",
            "==",
            "0",
            ":",
            " \n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "if",
            " A",
            "[",
            "n",
            "-",
            "1",
            "]==",
            "B",
            "[",
            "m",
            "-",
            "1",
            "]:",
            " \n\t",
            "\t",
            "return",
            " is",
            "_",
            "Sub",
            "_",
            "Array",
            "(",
            "A",
            ",",
            "B",
            ",",
            "n",
            "-",
            "1",
            ",",
            "m",
            "-",
            "1",
            ")",
            " \n",
            "\t",
            "else",
            ":",
            " \n\t",
            "\t",
            "return",
            " is",
            "_",
            "Sub",
            "_",
            "Array",
            "(",
            "A",
            ",",
            "B",
            ",",
            "n",
            "-",
            "1",
            ",",
            "m",
            ")",
            " \n",
            "\n",
            "A"
        ]
    },
    {
        "task_id": 577,
        "prompt": "Write a python function to find the last digit in factorial of a given number.\n\ndef last_Digit_Factorial(n): \n",
        "answer": "def last_Digit_Factorial(n): \n\tif n == 0: \n\t\treturn 1\n\telse: \n\t\treturn (n % 10) * last_Digit_Factorial(n // 10) \n\n",
        "test_list": [
            "assert last_Digit_Factorial(4) == 4",
            "assert last_Digit_Factorial(21) == 0",
            "assert last_Digit_Factorial(30) == 0"
        ],
        "answer_list": [
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "0",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "1",
            "\n",
            "\t",
            "else",
            ":",
            " \n\t",
            "\t",
            "return",
            " (",
            "n",
            " %",
            " ",
            "1",
            "0",
            ")",
            " *",
            " last",
            "_",
            "Digit",
            "_",
            "Factor",
            "ial",
            "(",
            "n",
            " //",
            " ",
            "1",
            "0",
            ")",
            " \n",
            "\n",
            "n"
        ]
    },
    {
        "task_id": 578,
        "prompt": "Write a python function to interleave lists of the same length.\n\ndef interleave_lists(list1,list2,list3):\n",
        "answer": "def interleave_lists(list1,list2,list3):\n\treturn [list1[i] for i in range(len(list1))] + [list2[i] for i in range(len(list2))] + [list3[i] for i in range(len(list3))]\n\n",
        "test_list": [
            "assert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]",
            "assert interleave_lists([10,20],[15,2],[5,10])==[10,15,5,20,2,10]",
            "assert interleave_lists([11,44], [10,15], [20,5])==[11,10,20,44,15,5]"
        ],
        "answer_list": [
            "\t",
            "return",
            " [",
            "list",
            "1",
            "[",
            "i",
            "]",
            " for",
            " i",
            " in",
            " range",
            "(",
            "len",
            "(",
            "list",
            "1",
            "))]",
            " +",
            " [",
            "list",
            "2",
            "[",
            "i",
            "]",
            " for",
            " i",
            " in",
            " range",
            "(",
            "len",
            "(",
            "list",
            "2",
            "))]",
            " +",
            " [",
            "list",
            "3",
            "[",
            "i",
            "]",
            " for",
            " i",
            " in",
            " range",
            "(",
            "len",
            "(",
            "list",
            "3",
            "))]",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 579,
        "prompt": "Write a python function to find the dissimilar elements in the given two tuples.\n\ndef find_dissimilar(test_tup1, test_tup2):\n",
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n\treturn tuple(set(test_tup1) ^ set(test_tup2))\n\n",
        "test_list": [
            "assert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)",
            "assert find_dissimilar((1, 2, 3, 4), (7, 2, 3, 9)) == (1, 4, 7, 9)",
            "assert find_dissimilar((21, 11, 25, 26), (26, 34, 21, 36)) == (34, 36, 11, 25)"
        ],
        "answer_list": [
            "\t",
            "return",
            " tuple",
            "(",
            "set",
            "(",
            "test",
            "_",
            "tup",
            "1",
            ")",
            " ^",
            " set",
            "(",
            "test",
            "_",
            "tup",
            "2",
            "))",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 580,
        "prompt": "Write a python function to extract the even elements in the nested mixed tuple.\n\ndef extract_even(test_tuple):\n",
        "answer": "def extract_even(test_tuple):\n\teven_list = []\n\tfor i in test_tuple:\n\t\tif type(i) == tuple:\n\t\t\teven_list.append(extract_even(i))\n\t\telse:\n\t\t\tif i % 2 == 0:\n\t\t\t\teven_list.append(i)\n\treturn even_list\n\n",
        "test_list": [
            "assert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)",
            "assert extract_even((5, 6, (8, 7, (4, 8)), 7, 9)) == (6, (8, (4, 8)))",
            "assert extract_even((5, 6, (9, 8, (4, 6)), 8, 10)) == (6, (8, (4, 6)), 8, 10)"
        ],
        "answer_list": [
            "\t",
            "even",
            "_",
            "list",
            " =",
            " []",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " test",
            "_",
            "tuple",
            ":",
            "\n\t",
            "\t",
            "if",
            " type",
            "(",
            "i",
            ")",
            " ==",
            " tuple",
            ":",
            "\n\t\t",
            "\t",
            "even",
            "_",
            "list",
            ".",
            "append",
            "(",
            "extract",
            "_",
            "even",
            "(",
            "i",
            "))",
            "\n\t",
            "\t",
            "else",
            ":",
            "\n\t\t",
            "\t",
            "if",
            " i",
            " %",
            " ",
            "2",
            " ==",
            " ",
            "0",
            ":",
            "\n\t\t\t",
            "\t",
            "even",
            "_",
            "list",
            ".",
            "append",
            "(",
            "i",
            ")",
            "\n",
            "\t",
            "return",
            " even",
            "_",
            "list",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 581,
        "prompt": "Write a python function to find the surface area of the square pyramid.\n\ndef surface_Area(b,s): \n",
        "answer": "def surface_Area(b,s): \n\treturn (2*b*s)+(2*b*b)\n\n",
        "test_list": [
            "assert surface_Area(3,4) == 33",
            "assert surface_Area(4,5) == 56",
            "assert surface_Area(1,2) == 5"
        ],
        "answer_list": [
            "\t",
            "return",
            " (",
            "2",
            "*",
            "b",
            "*",
            "s",
            ")+(",
            "2",
            "*",
            "b",
            "*",
            "b",
            ")",
            "\n",
            "\n",
            "base"
        ]
    },
    {
        "task_id": 582,
        "prompt": "Write a python function to check if a dictionary is empty or not.\n\ndef my_dict(dict1):\n",
        "answer": "def my_dict(dict1):\n\tif len(dict1) == 0:\n\t\treturn True\n\telse:\n\t\treturn False\n\n",
        "test_list": [
            "assert my_dict({10})==False",
            "assert my_dict({11})==False",
            "assert my_dict({})==True"
        ],
        "answer_list": [
            "\t",
            "if",
            " len",
            "(",
            "dict",
            "1",
            ")",
            " ==",
            " ",
            "0",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 583,
        "prompt": "Write a python function for nth catalan number.\n\ndef catalan_number(num):\n",
        "answer": "def catalan_number(num):\n\tif num == 0:\n\t\treturn 1\n\telse:\n\t\treturn (4*num-2)/(num+1)*catalan_number(num-1)\n\n",
        "test_list": [
            "assert catalan_number(10)==16796",
            "assert catalan_number(9)==4862",
            "assert catalan_number(7)==429"
        ],
        "answer_list": [
            "\t",
            "if",
            " num",
            " ==",
            " ",
            "0",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "return",
            " (",
            "4",
            "*",
            "num",
            "-",
            "2",
            ")/(",
            "num",
            "+",
            "1",
            ")*",
            "cat",
            "alan",
            "_",
            "number",
            "(",
            "num",
            "-",
            "1",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 584,
        "prompt": "Write a python function to find all adverbs and their positions in a given sentence by using regex.\n\ndef find_adverbs(text):\n",
        "answer": "def find_adverbs(text):\n\tpattern = r\"\\b(very|extremely|quite|really|rather|very much|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly|really well|really badly",
        "test_list": [
            "assert find_adverbs(\"Clearly, he has no excuse for such behavior.\") == '0-7: Clearly'",
            "assert find_adverbs(\"Please handle the situation carefuly\") == '28-36: carefuly'",
            "assert find_adverbs(\"Complete the task quickly\") == '18-25: quickly'"
        ],
        "answer_list": [
            "\t",
            "pattern",
            " =",
            " r",
            "\"\\",
            "b",
            "(",
            "very",
            "|",
            "ext",
            "reme",
            "ly",
            "|",
            "qu",
            "ite",
            "|",
            "really",
            "|",
            "r",
            "ather",
            "|",
            "very",
            " much",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly",
            "|",
            "really",
            " well",
            "|",
            "really",
            " bad",
            "ly"
        ]
    },
    {
        "task_id": 585,
        "prompt": "Write a python function to find the n - expensive price items from a given dataset using heap queue algorithm.\n\ndef expensive_items(items,n):\n",
        "answer": "def expensive_items(items,n):\n\theap = []\n\tfor item in items:\n\t\tif len(heap) < n:\n\t\t\theapq.heappush(heap,item)\n\t\telse:\n\t\t\tif item > heap[0]:\n\t\t\t\theapq.heappop(heap)\n\t\t\t\theapq.heappush(heap,item)\n\treturn heap\n\n",
        "test_list": [
            "assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]",
            "assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}],2)==[{'name': 'Item-2', 'price': 555.22},{'name': 'Item-1', 'price': 101.1}]",
            "assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-2', 'price': 555.22}]"
        ],
        "answer_list": [
            "\t",
            "heap",
            " =",
            " []",
            "\n",
            "\t",
            "for",
            " item",
            " in",
            " items",
            ":",
            "\n\t",
            "\t",
            "if",
            " len",
            "(",
            "heap",
            ")",
            " <",
            " n",
            ":",
            "\n\t\t",
            "\t",
            "heap",
            "q",
            ".",
            "he",
            "app",
            "ush",
            "(",
            "heap",
            ",",
            "item",
            ")",
            "\n\t",
            "\t",
            "else",
            ":",
            "\n\t\t",
            "\t",
            "if",
            " item",
            " >",
            " heap",
            "[",
            "0",
            "]:",
            "\n\t\t\t",
            "\t",
            "heap",
            "q",
            ".",
            "he",
            "app",
            "op",
            "(",
            "heap",
            ")",
            "\n\t\t\t",
            "\t",
            "heap",
            "q",
            ".",
            "he",
            "app",
            "ush",
            "(",
            "heap",
            ",",
            "item",
            ")",
            "\n",
            "\t",
            "return",
            " heap",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 586,
        "prompt": "Write a python function to split the array and add the first part to the end.\n\ndef split_Arr(a,n,k):  \n",
        "answer": "def split_Arr(a,n,k):  \n\treturn a[n:]+a[:n]\n\n",
        "test_list": [
            "assert split_Arr([12,10,5,6,52,36],6,2) == [5,6,52,36,12,10]",
            "assert split_Arr([1,2,3,4],4,1) == [2,3,4,1]",
            "assert split_Arr([0,1,2,3,4,5,6,7],8,3) == [3,4,5,6,7,0,1,2]"
        ],
        "answer_list": [
            "\t",
            "return",
            " a",
            "[",
            "n",
            ":",
            "]+",
            "a",
            "[:",
            "n",
            "]",
            "\n",
            "\n",
            "a"
        ]
    },
    {
        "task_id": 587,
        "prompt": "Write a python function to convert a list to a tuple.\n\ndef list_tuple(listx):\n",
        "answer": "def list_tuple(listx):\n\ttuplex = tuple(listx)\n\treturn tuplex\n\n",
        "test_list": [
            "assert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)",
            "assert list_tuple([2, 4, 5, 6, 2, 3, 4, 4, 7])==(2, 4, 5, 6, 2, 3, 4, 4, 7)",
            "assert list_tuple([58,44,56])==(58,44,56)"
        ],
        "answer_list": [
            "\t",
            "tuple",
            "x",
            " =",
            " tuple",
            "(",
            "list",
            "x",
            ")",
            "\n",
            "\t",
            "return",
            " tuple",
            "x",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 588,
        "prompt": "Write a python function to find the difference between largest and smallest value in a given array.\n\ndef big_diff(nums):\n",
        "answer": "def big_diff(nums):\n\treturn max(nums) - min(nums)\n\n",
        "test_list": [
            "assert big_diff([1,2,3,4]) == 3",
            "assert big_diff([4,5,12]) == 8",
            "assert big_diff([9,2,3]) == 7"
        ],
        "answer_list": [
            "\t",
            "return",
            " max",
            "(",
            "nums",
            ")",
            " -",
            " min",
            "(",
            "nums",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 589,
        "prompt": "Write a python function to find perfect squares between two given numbers.\n\ndef perfect_squares(a, b):\n",
        "answer": "def perfect_squares(a, b):\n\treturn [x**2 for x in range(a, b+1) if x**0.5 == int(x**0.5)]\n\n",
        "test_list": [
            "assert perfect_squares(1,30)==[1, 4, 9, 16, 25]",
            "assert perfect_squares(50,100)==[64, 81, 100]",
            "assert perfect_squares(100,200)==[100, 121, 144, 169, 196]"
        ],
        "answer_list": [
            "\t",
            "return",
            " [",
            "x",
            "**",
            "2",
            " for",
            " x",
            " in",
            " range",
            "(",
            "a",
            ",",
            " b",
            "+",
            "1",
            ")",
            " if",
            " x",
            "**",
            "0",
            ".",
            "5",
            " ==",
            " int",
            "(",
            "x",
            "**",
            "0",
            ".",
            "5",
            ")]",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 590,
        "prompt": "Write a python function to convert polar coordinates to rectangular coordinates.\n\ndef polar_rect(x,y):\n",
        "answer": "def polar_rect(x,y):\n\tr = x**2 + y**2\n\ttheta = np.arctan2(y,x)\n\treturn r,theta\n\n",
        "test_list": [
            "assert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))",
            "assert polar_rect(4,7)==((8.06225774829855, 1.0516502125483738), (-2+2.4492935982947064e-16j))",
            "assert polar_rect(15,17)==((22.67156809750927, 0.8478169733934057), (-2+2.4492935982947064e-16j))"
        ],
        "answer_list": [
            "\t",
            "r",
            " =",
            " x",
            "**",
            "2",
            " +",
            " y",
            "**",
            "2",
            "\n",
            "\t",
            "theta",
            " =",
            " np",
            ".",
            "ar",
            "ct",
            "an",
            "2",
            "(",
            "y",
            ",",
            "x",
            ")",
            "\n",
            "\t",
            "return",
            " r",
            ",",
            "theta",
            "\n",
            "\n",
            "#"
        ]
    },
    {
        "task_id": 591,
        "prompt": "Write a python function to interchange the first and last elements in a list.\n\ndef swap_List(newList): \n",
        "answer": "def swap_List(newList): \n\tnewList[0], newList[-1] = newList[-1], newList[0]\n\treturn newList\n\n",
        "test_list": [
            "assert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]",
            "assert swap_List([1, 2, 3]) == [3, 2, 1]",
            "assert swap_List([4, 5, 6]) == [6, 5, 4]"
        ],
        "answer_list": [
            "\t",
            "new",
            "List",
            "[",
            "0",
            "],",
            " new",
            "List",
            "[-",
            "1",
            "]",
            " =",
            " new",
            "List",
            "[-",
            "1",
            "],",
            " new",
            "List",
            "[",
            "0",
            "]",
            "\n",
            "\t",
            "return",
            " new",
            "List",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 592,
        "prompt": "Write a python function to find sum of product of binomial co-efficients.\n\ndef sum_Of_product(n): \n",
        "answer": "def sum_Of_product(n): \n\tsum = 0\n\tfor i in range(n+1): \n\t\tfor j in range(i+1): \n\t\t\tsum += binomialCoeff(n, i) * binomialCoeff(n, j) \n\treturn sum \n\n",
        "test_list": [
            "assert sum_Of_product(3) == 15",
            "assert sum_Of_product(4) == 56",
            "assert sum_Of_product(1) == 1"
        ],
        "answer_list": [
            "\t",
            "sum",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "n",
            "+",
            "1",
            "):",
            " \n\t",
            "\t",
            "for",
            " j",
            " in",
            " range",
            "(",
            "i",
            "+",
            "1",
            "):",
            " \n\t\t",
            "\t",
            "sum",
            " +=",
            " bin",
            "omial",
            "Coeff",
            "(",
            "n",
            ",",
            " i",
            ")",
            " *",
            " bin",
            "omial",
            "Coeff",
            "(",
            "n",
            ",",
            " j",
            ")",
            " \n",
            "\t",
            "return",
            " sum",
            " \n",
            "\n",
            "#"
        ]
    },
    {
        "task_id": 593,
        "prompt": "Write a python function to remove leading zeroes from an ip address.\n\ndef removezero_ip(ip):\n",
        "answer": "def removezero_ip(ip):\n\treturn '.'.join(str(int(i)) for i in ip.split('.'))\n\n",
        "test_list": [
            "assert removezero_ip(\"216.08.094.196\")==('216.8.94.196') ",
            "assert removezero_ip(\"12.01.024\")==('12.1.24') ",
            "assert removezero_ip(\"216.08.094.0196\")==('216.8.94.196') "
        ],
        "answer_list": [
            "\t",
            "return",
            " '.",
            "'.",
            "join",
            "(",
            "str",
            "(",
            "int",
            "(",
            "i",
            "))",
            " for",
            " i",
            " in",
            " ip",
            ".",
            "split",
            "('.",
            "'))",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 594,
        "prompt": "Write a python function to find the difference of first even and odd number of a given list.\n\ndef diff_even_odd(list1):\n",
        "answer": "def diff_even_odd(list1):\n\teven_sum = 0\n\todd_sum = 0\n\tfor i in list1:\n\t\tif i%2 == 0:\n\t\t\teven_sum += i\n\t\telse:\n\t\t\todd_sum += i\n\treturn even_sum - odd_sum\n\n",
        "test_list": [
            "assert diff_even_odd([1,3,5,7,4,1,6,8])==3",
            "assert diff_even_odd([1,2,3,4,5,6,7,8,9,10])==1",
            "assert diff_even_odd([1,5,7,9,10])==9"
        ],
        "answer_list": [
            "\t",
            "even",
            "_",
            "sum",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "odd",
            "_",
            "sum",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " list",
            "1",
            ":",
            "\n\t",
            "\t",
            "if",
            " i",
            "%",
            "2",
            " ==",
            " ",
            "0",
            ":",
            "\n\t\t",
            "\t",
            "even",
            "_",
            "sum",
            " +=",
            " i",
            "\n\t",
            "\t",
            "else",
            ":",
            "\n\t\t",
            "\t",
            "odd",
            "_",
            "sum",
            " +=",
            " i",
            "\n",
            "\t",
            "return",
            " even",
            "_",
            "sum",
            " -",
            " odd",
            "_",
            "sum",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 595,
        "prompt": "Write a python function to count minimum number of swaps required to convert one binary string to another.\n\ndef min_Swaps(str1,str2) : \n",
        "answer": "def min_Swaps(str1,str2) : \n\tcount = 0\n\tfor i in range(len(str1)) : \n\t\tif str1[i]!= str2[i] : \n\t\t\tcount += 1\n\treturn count\n\n",
        "test_list": [
            "assert min_Swaps(\"1101\",\"1110\") == 1",
            "assert min_Swaps(\"111\",\"000\") == \"Not Possible\"",
            "assert min_Swaps(\"111\",\"110\") == \"Not Possible\""
        ],
        "answer_list": [
            "\t",
            "count",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "len",
            "(",
            "str",
            "1",
            "))",
            " :",
            " \n\t",
            "\t",
            "if",
            " str",
            "1",
            "[",
            "i",
            "]",
            "!=",
            " str",
            "2",
            "[",
            "i",
            "]",
            " :",
            " \n\t\t",
            "\t",
            "count",
            " +=",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " count",
            "\n",
            "\n",
            "str"
        ]
    },
    {
        "task_id": 596,
        "prompt": "Write a python function to find the size of the given tuple.\n\ndef tuple_size(tuple_list):\n",
        "answer": "def tuple_size(tuple_list):\n\treturn len(tuple_list)\n\n",
        "test_list": [
            "assert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))",
            "assert tuple_size((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\") ) == sys.getsizeof((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\"))",
            "assert tuple_size(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\"))  ) == sys.getsizeof(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\")))"
        ],
        "answer_list": [
            "\t",
            "return",
            " len",
            "(",
            "tuple",
            "_",
            "list",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 597,
        "prompt": "Write a python function to find kth element from the given two sorted arrays.\n\ndef find_kth(arr1, arr2, m, n, k):\n",
        "answer": "def find_kth(arr1, arr2, m, n, k):\n\tif m > n:\n\t\treturn find_kth(arr2, arr1, n, m, k)\n\tif m == 0:\n\t\treturn arr2[k-1]\n\tif k == 1:\n\t\treturn min(arr1[0], arr2[0])\n\ti = min(k//2, m)\n\tj = min(k-i, n)\n\tif arr1[i-1] > arr2[j-1]:\n\t\treturn find_kth(arr1, arr2[j:], m, n-j, k-j)\n\telse:\n\t\treturn find_kth(arr1[i:], arr2, m-i, n, k-i)\n\n",
        "test_list": [
            "assert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5, 4, 5) == 6",
            "assert find_kth([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 5, 7, 7) == 256",
            "assert find_kth([3, 4, 7, 8, 10], [2, 5, 9, 11], 5, 4, 6) == 8"
        ],
        "answer_list": [
            "\t",
            "if",
            " m",
            " >",
            " n",
            ":",
            "\n\t",
            "\t",
            "return",
            " find",
            "_",
            "k",
            "th",
            "(",
            "arr",
            "2",
            ",",
            " arr",
            "1",
            ",",
            " n",
            ",",
            " m",
            ",",
            " k",
            ")",
            "\n",
            "\t",
            "if",
            " m",
            " ==",
            " ",
            "0",
            ":",
            "\n\t",
            "\t",
            "return",
            " arr",
            "2",
            "[",
            "k",
            "-",
            "1",
            "]",
            "\n",
            "\t",
            "if",
            " k",
            " ==",
            " ",
            "1",
            ":",
            "\n\t",
            "\t",
            "return",
            " min",
            "(",
            "arr",
            "1",
            "[",
            "0",
            "],",
            " arr",
            "2",
            "[",
            "0",
            "])",
            "\n",
            "\t",
            "i",
            " =",
            " min",
            "(",
            "k",
            "//",
            "2",
            ",",
            " m",
            ")",
            "\n",
            "\t",
            "j",
            " =",
            " min",
            "(",
            "k",
            "-",
            "i",
            ",",
            " n",
            ")",
            "\n",
            "\t",
            "if",
            " arr",
            "1",
            "[",
            "i",
            "-",
            "1",
            "]",
            " >",
            " arr",
            "2",
            "[",
            "j",
            "-",
            "1",
            "]:",
            "\n\t",
            "\t",
            "return",
            " find",
            "_",
            "k",
            "th",
            "(",
            "arr",
            "1",
            ",",
            " arr",
            "2",
            "[",
            "j",
            ":],",
            " m",
            ",",
            " n",
            "-",
            "j",
            ",",
            " k",
            "-",
            "j",
            ")",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "return",
            " find",
            "_",
            "k",
            "th",
            "(",
            "arr",
            "1",
            "[",
            "i",
            ":],",
            " arr",
            "2",
            ",",
            " m",
            "-",
            "i",
            ",",
            " n",
            ",",
            " k",
            "-",
            "i",
            ")",
            "\n",
            "\n",
            "arr"
        ]
    },
    {
        "task_id": 598,
        "prompt": "Write a python function to check whether the given number is armstrong or not.\n\ndef armstrong_number(number):\n",
        "answer": "def armstrong_number(number):\n\tsum = 0\n\ttemp = number\n\twhile temp > 0:\n\t\tdigit = temp % 10\n\t\tsum += digit ** 3\n\t\ttemp //= 10\n\tif number == sum:\n\t\treturn True\n\telse:\n\t\treturn False\n\n",
        "test_list": [
            "assert armstrong_number(153)==True",
            "assert armstrong_number(259)==False",
            "assert armstrong_number(4458)==False"
        ],
        "answer_list": [
            "\t",
            "sum",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "temp",
            " =",
            " number",
            "\n",
            "\t",
            "while",
            " temp",
            " >",
            " ",
            "0",
            ":",
            "\n\t",
            "\t",
            "digit",
            " =",
            " temp",
            " %",
            " ",
            "1",
            "0",
            "\n\t",
            "\t",
            "sum",
            " +=",
            " digit",
            " **",
            " ",
            "3",
            "\n\t",
            "\t",
            "temp",
            " //",
            "=",
            " ",
            "1",
            "0",
            "\n",
            "\t",
            "if",
            " number",
            " ==",
            " sum",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 599,
        "prompt": "Write a python function to find sum and average of first n natural numbers.\n\ndef sum_average(number):\n",
        "answer": "def sum_average(number):\n\tsum = 0\n\tfor i in range(1, number+1):\n\t\tsum += i\n\treturn sum, sum/number\n\n",
        "test_list": [
            "assert sum_average(10)==(55, 5.5)",
            "assert sum_average(15)==(120, 8.0)",
            "assert sum_average(20)==(210, 10.5)"
        ],
        "answer_list": [
            "\t",
            "sum",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "1",
            ",",
            " number",
            "+",
            "1",
            "):",
            "\n\t",
            "\t",
            "sum",
            " +=",
            " i",
            "\n",
            "\t",
            "return",
            " sum",
            ",",
            " sum",
            "/",
            "number",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 600,
        "prompt": "Write a python function to check whether the given number is even or not using bitwise operator.\n\ndef is_Even(n) : \n",
        "answer": "def is_Even(n) : \n\treturn n & 1\n\n",
        "test_list": [
            "assert is_Even(1) == False",
            "assert is_Even(2) == True",
            "assert is_Even(3) == False"
        ],
        "answer_list": [
            "\t",
            "return",
            " n",
            " &",
            " ",
            "1",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 601,
        "prompt": "Write a python function to find the longest chain which can be formed from the given set of pairs.\n\ndef max_chain_length(arr, n): \n",
        "answer": "def max_chain_length(arr, n): \n\tdp = [1 for i in range(n)] \n\tfor i in range(1, n): \n\t\tfor j in range(0, i): \n\t\t\tif arr[i][0] > arr[j][1] and dp[i] < dp[j] + 1: \n\t\t\t\tdp[i] = dp[j] + 1\n\treturn max(dp) \n\n",
        "test_list": [
            "assert max_chain_length([Pair(5, 24), Pair(15, 25),Pair(27, 40), Pair(50, 60)], 4) == 3",
            "assert max_chain_length([Pair(1, 2), Pair(3, 4),Pair(5, 6), Pair(7, 8)], 4) == 4",
            "assert max_chain_length([Pair(19, 10), Pair(11, 12),Pair(13, 14), Pair(15, 16), Pair(31, 54)], 5) == 5"
        ],
        "answer_list": [
            "\t",
            "dp",
            " =",
            " [",
            "1",
            " for",
            " i",
            " in",
            " range",
            "(",
            "n",
            ")]",
            " \n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "1",
            ",",
            " n",
            "):",
            " \n\t",
            "\t",
            "for",
            " j",
            " in",
            " range",
            "(",
            "0",
            ",",
            " i",
            "):",
            " \n\t\t",
            "\t",
            "if",
            " arr",
            "[",
            "i",
            "][",
            "0",
            "]",
            " >",
            " arr",
            "[",
            "j",
            "][",
            "1",
            "]",
            " and",
            " dp",
            "[",
            "i",
            "]",
            " <",
            " dp",
            "[",
            "j",
            "]",
            " +",
            " ",
            "1",
            ":",
            " \n\t\t\t",
            "\t",
            "dp",
            "[",
            "i",
            "]",
            " =",
            " dp",
            "[",
            "j",
            "]",
            " +",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " max",
            "(",
            "dp",
            ")",
            " \n",
            "\n",
            "#"
        ]
    },
    {
        "task_id": 602,
        "prompt": "Write a python function to find the first repeated character in a given string.\n\ndef first_repeated_char(str1):\n",
        "answer": "def first_repeated_char(str1):\n\tfor i in range(len(str1)):\n\t\tfor j in range(i+1,len(str1)):\n\t\t\tif str1[i] == str1[j]:\n\t\t\t\treturn str1[i]\n\treturn None\n\n",
        "test_list": [
            "assert first_repeated_char(\"abcabc\") == \"a\"",
            "assert first_repeated_char(\"abc\") == \"None\"",
            "assert first_repeated_char(\"123123\") == \"1\""
        ],
        "answer_list": [
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "len",
            "(",
            "str",
            "1",
            ")):",
            "\n\t",
            "\t",
            "for",
            " j",
            " in",
            " range",
            "(",
            "i",
            "+",
            "1",
            ",",
            "len",
            "(",
            "str",
            "1",
            ")):",
            "\n\t\t",
            "\t",
            "if",
            " str",
            "1",
            "[",
            "i",
            "]",
            " ==",
            " str",
            "1",
            "[",
            "j",
            "]:",
            "\n\t\t\t",
            "\t",
            "return",
            " str",
            "1",
            "[",
            "i",
            "]",
            "\n",
            "\t",
            "return",
            " None",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 603,
        "prompt": "Write a python function to get a lucid number smaller than or equal to n.\n\ndef get_ludic(n):\n",
        "answer": "def get_ludic(n):\n\tif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn n * get_ludic(n-1)\n\n",
        "test_list": [
            "assert get_ludic(10) == [1, 2, 3, 5, 7]",
            "assert get_ludic(25) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25]",
            "assert get_ludic(45) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]"
        ],
        "answer_list": [
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "1",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "return",
            " n",
            " *",
            " get",
            "_",
            "l",
            "ud",
            "ic",
            "(",
            "n",
            "-",
            "1",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 604,
        "prompt": "Write a python function to reverse words in a given string.\n\ndef reverse_words(s):\n",
        "answer": "def reverse_words(s):\n\treturn''.join(s.split()[::-1])\n\n",
        "test_list": [
            "assert reverse_words(\"python program\")==(\"program python\")",
            "assert reverse_words(\"java language\")==(\"language java\")",
            "assert reverse_words(\"indian man\")==(\"man indian\")"
        ],
        "answer_list": [
            "\t",
            "return",
            " '",
            " '.",
            "join",
            "(",
            "s",
            ".",
            "split",
            "()[",
            "::-",
            "1",
            "])",
            "\n"
        ]
    },
    {
        "task_id": 605,
        "prompt": "Write a python function to check if the given integer is a prime number.\n\ndef prime_num(num):\n",
        "answer": "def prime_num(num):\n\tif num > 1:\n\t\tfor i in range(2,num):\n\t\t\tif (num % i) == 0:\n\t\t\t\tprint(num,\"is not a prime number\")\n\t\t\t\tbreak\n\t\telse:\n\t\t\tprint(num,\"is a prime number\")\n\telse:\n\t\tprint(num,\"is not a prime number\")\n\n",
        "test_list": [
            "assert prime_num(13)==True",
            "assert prime_num(7)==True",
            "assert prime_num(-1010)==False"
        ],
        "answer_list": [
            "\t",
            "if",
            " num",
            " >",
            " ",
            "1",
            ":",
            "\n\t",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "2",
            ",",
            "num",
            "):",
            "\n\t\t",
            "\t",
            "if",
            " (",
            "num",
            " %",
            " i",
            ")",
            " ==",
            " ",
            "0",
            ":",
            "\n\t\t\t",
            "\t",
            "print",
            "(",
            "num",
            ",\"",
            "is",
            " not",
            " a",
            " prime",
            " number",
            "\")",
            "\n\t\t\t",
            "\t",
            "break",
            "\n\t",
            "\t",
            "else",
            ":",
            "\n\t\t",
            "\t",
            "print",
            "(",
            "num",
            ",\"",
            "is",
            " a",
            " prime",
            " number",
            "\")",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "print",
            "(",
            "num",
            ",\"",
            "is",
            " not",
            " a",
            " prime",
            " number",
            "\")",
            "\n",
            "\n",
            "num"
        ]
    },
    {
        "task_id": 606,
        "prompt": "Write a python function to convert degrees to radians.\n\ndef radian_degree(degree):\n",
        "answer": "def radian_degree(degree):\n\treturn degree * (math.pi / 180)\n\n",
        "test_list": [
            "assert radian_degree(90)==1.5707963267948966",
            "assert radian_degree(60)==1.0471975511965976",
            "assert radian_degree(120)==2.0943951023931953"
        ],
        "answer_list": [
            "\t",
            "return",
            " degree",
            " *",
            " (",
            "math",
            ".",
            "pi",
            " /",
            " ",
            "1",
            "8",
            "0",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 607,
        "prompt": "Write a python function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.\n\ndef find_literals(text, pattern):\n",
        "answer": "def find_literals(text, pattern):\n\treturn re.search(pattern, text)\n\n",
        "test_list": [
            "assert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)",
            "assert find_literals('Its been a very crazy procedure right', 'crazy') == ('crazy', 16, 21)",
            "assert find_literals('Hardest choices required strongest will', 'will') == ('will', 35, 39)"
        ],
        "answer_list": [
            "\t",
            "return",
            " re",
            ".",
            "search",
            "(",
            "pattern",
            ",",
            " text",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 608,
        "prompt": "Write a python function to find nth bell number.\n\ndef bell_Number(n): \n",
        "answer": "def bell_Number(n): \n\tif n == 0: \n\t\treturn 0\n\tif n == 1: \n\t\treturn 1\n\telse: \n\t\treturn bell_Number(n-1) + bell_Number(n-2) \n\n",
        "test_list": [
            "assert bell_Number(2) == 2",
            "assert bell_Number(3) == 5",
            "assert bell_Number(4) == 15"
        ],
        "answer_list": [
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "0",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "0",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "1",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "1",
            "\n",
            "\t",
            "else",
            ":",
            " \n\t",
            "\t",
            "return",
            " b",
            "ell",
            "_",
            "Number",
            "(",
            "n",
            "-",
            "1",
            ")",
            " +",
            " b",
            "ell",
            "_",
            "Number",
            "(",
            "n",
            "-",
            "2",
            ")",
            " \n",
            "\n",
            "n"
        ]
    },
    {
        "task_id": 609,
        "prompt": "Write a python function to find minimum possible value for the given periodic function.\n\ndef floor_Min(A,B,N):\n",
        "answer": "def floor_Min(A,B,N):\n\tmin_val
        "test_list": [
            "assert floor_Min(10,20,30) == 15",
            "assert floor_Min(1,2,1) == 0",
            "assert floor_Min(11,10,9) == 9"
        ],
        "answer_list": [
            "\t",
            "min",
            "_",
            "val",
            " =",
            " ",
            "1",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0"
        ]
    },
    {
        "task_id": 610,
        "prompt": "Write a python function to remove the k'th element from a given list.\n\ndef remove_kth_element(list1, L):\n",
        "answer": "def remove_kth_element(list1, L):\n\tlist1.pop(L)\n\treturn list1\n\n",
        "test_list": [
            "assert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]",
            "assert remove_kth_element([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4],4)==[0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]",
            "assert remove_kth_element([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10],5)==[10,10,15,19, 18, 17, 26, 26, 17, 18, 10]"
        ],
        "answer_list": [
            "\t",
            "list",
            "1",
            ".",
            "pop",
            "(",
            "L",
            ")",
            "\n",
            "\t",
            "return",
            " list",
            "1",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 611,
        "prompt": "Write a python function to find the maximum of nth column from the given tuple list.\n\ndef max_of_nth(test_list, N):\n",
        "answer": "def max_of_nth(test_list, N):\n\treturn max(list(map(lambda x: x[N], test_list)))\n\n",
        "test_list": [
            "assert max_of_nth([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 19",
            "assert max_of_nth([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1) == 10",
            "assert max_of_nth([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 1) == 11"
        ],
        "answer_list": [
            "\t",
            "return",
            " max",
            "(",
            "list",
            "(",
            "map",
            "(",
            "lambda",
            " x",
            ":",
            " x",
            "[",
            "N",
            "],",
            " test",
            "_",
            "list",
            ")))",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 612,
        "prompt": "Write a python function to merge the first and last elements separately in a list of lists.\n\ndef merge(lst):  \n",
        "answer": "def merge(lst):  \n\tif len(lst) == 1:\n\t\treturn lst[0]\n\telse:\n\t\treturn lst[0] + merge(lst[1:])\n\n",
        "test_list": [
            "assert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]",
            "assert merge([[1, 2], [3, 4], [5, 6], [7, 8]]) == [[1, 3, 5, 7], [2, 4, 6, 8]]",
            "assert merge([['x', 'y','z' ], ['a', 'b','c'], ['m', 'n','o']]) == [['x', 'a', 'm'], ['y', 'b', 'n'],['z', 'c','o']]"
        ],
        "answer_list": [
            "\t",
            "if",
            " len",
            "(",
            "lst",
            ")",
            " ==",
            " ",
            "1",
            ":",
            "\n\t",
            "\t",
            "return",
            " lst",
            "[",
            "0",
            "]",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "return",
            " lst",
            "[",
            "0",
            "]",
            " +",
            " merge",
            "(",
            "lst",
            "[",
            "1",
            ":])",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 613,
        "prompt": "Write a python function to find the maximum value in record list as tuple attribute in the given tuple list.\n\ndef maximum_value(test_list):\n",
        "answer": "def maximum_value(test_list):\n\tmax_value = test_list[0][1]\n\tfor i in test_list:\n\t\tif i[1] > max_value:\n\t\t\tmax_value = i[1]\n\treturn max_value\n\n",
        "test_list": [
            "assert maximum_value([('key1', [3, 4, 5]), ('key2', [1, 4, 2]), ('key3', [9, 3])]) == [('key1', 5), ('key2', 4), ('key3', 9)]",
            "assert maximum_value([('key1', [4, 5, 6]), ('key2', [2, 5, 3]), ('key3', [10, 4])]) == [('key1', 6), ('key2', 5), ('key3', 10)]",
            "assert maximum_value([('key1', [5, 6, 7]), ('key2', [3, 6, 4]), ('key3', [11, 5])]) == [('key1', 7), ('key2', 6), ('key3', 11)]"
        ],
        "answer_list": [
            "\t",
            "max",
            "_",
            "value",
            " =",
            " test",
            "_",
            "list",
            "[",
            "0",
            "][",
            "1",
            "]",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " test",
            "_",
            "list",
            ":",
            "\n\t",
            "\t",
            "if",
            " i",
            "[",
            "1",
            "]",
            " >",
            " max",
            "_",
            "value",
            ":",
            "\n\t\t",
            "\t",
            "max",
            "_",
            "value",
            " =",
            " i",
            "[",
            "1",
            "]",
            "\n",
            "\t",
            "return",
            " max",
            "_",
            "value",
            "\n",
            "\n",
            "test"
        ]
    },
    {
        "task_id": 614,
        "prompt": "Write a python function to find the cumulative sum of all the values that are present in the given tuple list.\n\ndef cummulative_sum(test_list):\n",
        "answer": "def cummulative_sum(test_list):\n\tsum = 0\n\tfor i in test_list:\n\t\tsum += i\n\treturn sum\n\n",
        "test_list": [
            "assert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30",
            "assert cummulative_sum([(2, 4), (6, 7, 8), (3, 7)]) == 37",
            "assert cummulative_sum([(3, 5), (7, 8, 9), (4, 8)]) == 44"
        ],
        "answer_list": [
            "\t",
            "sum",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " test",
            "_",
            "list",
            ":",
            "\n\t",
            "\t",
            "sum",
            " +=",
            " i",
            "\n",
            "\t",
            "return",
            " sum",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 615,
        "prompt": "Write a python function to find average value of the numbers in a given tuple of tuples.\n\ndef average_tuple(nums):\n",
        "answer": "def average_tuple(nums):\n\treturn sum(nums)/len(nums)\n\n",
        "test_list": [
            "assert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]",
            "assert average_tuple(((1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3)))== [25.5, -18.0, 3.75]",
            "assert average_tuple( ((100, 100, 100, 120), (300, 450, 560, 450), (810, 800, 390, 320), (10, 20, 30, 40)))==[305.0, 342.5, 270.0, 232.5]"
        ],
        "answer_list": [
            "\t",
            "return",
            " sum",
            "(",
            "nums",
            ")/",
            "len",
            "(",
            "nums",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 616,
        "prompt": "Write a python function to perfom the modulo of tuple elements in the given two tuples.\n\ndef tuple_modulo(test_tup1, test_tup2):\n",
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n\treturn tuple(x % y for x, y in zip(test_tup1, test_tup2))\n\n",
        "test_list": [
            "assert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)",
            "assert tuple_modulo((11, 5, 6, 7), (6, 7, 8, 6)) == (5, 5, 6, 1)",
            "assert tuple_modulo((12, 6, 7, 8), (7, 8, 9, 7)) == (5, 6, 7, 1)"
        ],
        "answer_list": [
            "\t",
            "return",
            " tuple",
            "(",
            "x",
            " %",
            " y",
            " for",
            " x",
            ",",
            " y",
            " in",
            " zip",
            "(",
            "test",
            "_",
            "tup",
            "1",
            ",",
            " test",
            "_",
            "tup",
            "2",
            "))",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 617,
        "prompt": "Write a python function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n\ndef min_Jumps(a, b, d): \n",
        "answer": "def min_Jumps(a, b, d): \n\tif d == 0: \n\t\treturn 0\n\tif d < 0: \n\t\treturn float('inf')\n\tif a == 0 and b!= 0: \n\t\treturn float('inf')\n\tif b == 0 and a!= 0: \n\t\treturn a \n\tif a == 0 and b == 0: \n\t\treturn 0\n\treturn min(min_Jumps(a-1, b, d-1), min_Jumps(a, b-1, d-1)) + 1\n\n",
        "test_list": [
            "assert min_Jumps(3,4,11)==3.5",
            "assert min_Jumps(3,4,0)==0",
            "assert min_Jumps(11,14,11)==1"
        ],
        "answer_list": [
            "\t",
            "if",
            " d",
            " ==",
            " ",
            "0",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "0",
            "\n",
            "\t",
            "if",
            " d",
            " <",
            " ",
            "0",
            ":",
            " \n\t",
            "\t",
            "return",
            " float",
            "('",
            "inf",
            "')",
            "\n",
            "\t",
            "if",
            " a",
            " ==",
            " ",
            "0",
            " and",
            " b",
            "!=",
            " ",
            "0",
            ":",
            " \n\t",
            "\t",
            "return",
            " float",
            "('",
            "inf",
            "')",
            "\n",
            "\t",
            "if",
            " b",
            " ==",
            " ",
            "0",
            " and",
            " a",
            "!=",
            " ",
            "0",
            ":",
            " \n\t",
            "\t",
            "return",
            " a",
            " \n",
            "\t",
            "if",
            " a",
            " ==",
            " ",
            "0",
            " and",
            " b",
            " ==",
            " ",
            "0",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "0",
            "\n",
            "\t",
            "return",
            " min",
            "(",
            "min",
            "_",
            "Jump",
            "s",
            "(",
            "a",
            "-",
            "1",
            ",",
            " b",
            ",",
            " d",
            "-",
            "1",
            "),",
            " min",
            "_",
            "Jump",
            "s",
            "(",
            "a",
            ",",
            " b",
            "-",
            "1",
            ",",
            " d",
            "-",
            "1",
            "))",
            " +",
            " ",
            "1",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 618,
        "prompt": "Write a python function to divide two lists using map and lambda function.\n\ndef div_list(nums1,nums2):\n",
        "answer": "def div_list(nums1,nums2):\n\treturn list(map(lambda x,y:x/y,nums1,nums2))\n\n",
        "test_list": [
            "assert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]",
            "assert div_list([3,2],[1,4])==[3.0, 0.5]",
            "assert div_list([90,120],[50,70])==[1.8, 1.7142857142857142]"
        ],
        "answer_list": [
            "\t",
            "return",
            " list",
            "(",
            "map",
            "(",
            "lambda",
            " x",
            ",",
            "y",
            ":",
            "x",
            "/",
            "y",
            ",",
            "nums",
            "1",
            ",",
            "nums",
            "2",
            "))",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 619,
        "prompt": "Write a python function to move all the numbers in it to the given string.\n\ndef move_num(test_str):\n",
        "answer": "def move_num(test_str):\n\treturn ''.join([i for i in test_str if not i.isdigit()])\n\n",
        "test_list": [
            "assert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'",
            "assert move_num('Avengers124Assemble') == 'AvengersAssemble124'",
            "assert move_num('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'"
        ],
        "answer_list": [
            "\t",
            "return",
            " ''.",
            "join",
            "([",
            "i",
            " for",
            " i",
            " in",
            " test",
            "_",
            "str",
            " if",
            " not",
            " i",
            ".",
            "isdigit",
            "()])",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 620,
        "prompt": "Write a python function to find the largest subset where each pair is divisible.\n\ndef largest_subset(a, n):\n",
        "answer": "def largest_subset(a, n):\n\t# code here\n\ta.sort()\n\ti = 0\n\tj = 1\n\tmax_len = 0\n\twhile j < n:\n\t\tif a[j] % a[i] == 0:\n\t\t\tj += 1\n\t\t\tmax_len = max(max_len, j - i)\n\t\telse:\n\t\t\ti += 1\n\treturn max_len\n\n",
        "test_list": [
            "assert largest_subset([ 1, 3, 6, 13, 17, 18 ], 6) == 4",
            "assert largest_subset([10, 5, 3, 15, 20], 5) == 3",
            "assert largest_subset([18, 1, 3, 6, 13, 17], 6) == 4"
        ],
        "answer_list": [
            "\t",
            "#",
            " code",
            " here",
            "\n",
            "\t",
            "a",
            ".",
            "sort",
            "()",
            "\n",
            "\t",
            "i",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "j",
            " =",
            " ",
            "1",
            "\n",
            "\t",
            "max",
            "_",
            "len",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "while",
            " j",
            " <",
            " n",
            ":",
            "\n\t",
            "\t",
            "if",
            " a",
            "[",
            "j",
            "]",
            " %",
            " a",
            "[",
            "i",
            "]",
            " ==",
            " ",
            "0",
            ":",
            "\n\t\t",
            "\t",
            "j",
            " +=",
            " ",
            "1",
            "\n\t\t",
            "\t",
            "max",
            "_",
            "len",
            " =",
            " max",
            "(",
            "max",
            "_",
            "len",
            ",",
            " j",
            " -",
            " i",
            ")",
            "\n\t",
            "\t",
            "else",
            ":",
            "\n\t\t",
            "\t",
            "i",
            " +=",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " max",
            "_",
            "len",
            "\n",
            "\n",
            "a"
        ]
    },
    {
        "task_id": 621,
        "prompt": "Write a python function to increment the numeric values in the given strings by k.\n\ndef increment_numerics(test_list, K):\n",
        "answer": "def increment_numerics(test_list, K):\n\tfor i in range(len(test_list)):\n\t\tif test_list[i].isdigit():\n\t\t\ttest_list[i] = str(int(test_list[i]) + K)\n\treturn test_list\n\n",
        "test_list": [
            "assert increment_numerics([\"MSM\", \"234\", \"is\", \"98\", \"123\", \"best\", \"4\"] , 6) == ['MSM', '240', 'is', '104', '129', 'best', '10']",
            "assert increment_numerics([\"Dart\", \"356\", \"is\", \"88\", \"169\", \"Super\", \"6\"] , 12) == ['Dart', '368', 'is', '100', '181', 'Super', '18']",
            "assert increment_numerics([\"Flutter\", \"451\", \"is\", \"44\", \"96\", \"Magnificent\", \"12\"] , 33) == ['Flutter', '484', 'is', '77', '129', 'Magnificent', '45']"
        ],
        "answer_list": [
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "len",
            "(",
            "test",
            "_",
            "list",
            ")):",
            "\n\t",
            "\t",
            "if",
            " test",
            "_",
            "list",
            "[",
            "i",
            "].",
            "isdigit",
            "():",
            "\n\t\t",
            "\t",
            "test",
            "_",
            "list",
            "[",
            "i",
            "]",
            " =",
            " str",
            "(",
            "int",
            "(",
            "test",
            "_",
            "list",
            "[",
            "i",
            "])",
            " +",
            " K",
            ")",
            "\n",
            "\t",
            "return",
            " test",
            "_",
            "list",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 622,
        "prompt": "Write a python function to find the median of two sorted arrays of same size.\n\ndef get_median(arr1, arr2, n):\n",
        "answer": "def get_median(arr1, arr2, n):\n\tif n%2 == 0:\n\t\treturn (arr1[n//2] + arr1[n//2 - 1])/2\n\telse:\n\t\treturn arr1[n//2]\n\n",
        "test_list": [
            "assert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0",
            "assert get_median([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5",
            "assert get_median([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0"
        ],
        "answer_list": [
            "\t",
            "if",
            " n",
            "%",
            "2",
            " ==",
            " ",
            "0",
            ":",
            "\n\t",
            "\t",
            "return",
            " (",
            "arr",
            "1",
            "[",
            "n",
            "//",
            "2",
            "]",
            " +",
            " arr",
            "1",
            "[",
            "n",
            "//",
            "2",
            " -",
            " ",
            "1",
            "])/",
            "2",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "return",
            " arr",
            "1",
            "[",
            "n",
            "//",
            "2",
            "]",
            "\n",
            "\n",
            "def"
        ]
    },
    {
        "task_id": 623,
        "prompt": "Write a python function to find the n-th power of individual elements in a list using lambda function.\n\ndef nth_nums(nums,n):\n",
        "answer": "def nth_nums(nums,n):\n\treturn list(map(lambda x: x**n,nums))\n\n",
        "test_list": [
            "assert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]",
            "assert nth_nums([10,20,30],3)==([1000, 8000, 27000])",
            "assert nth_nums([12,15],5)==([248832, 759375])"
        ],
        "answer_list": [
            "\t",
            "return",
            " list",
            "(",
            "map",
            "(",
            "lambda",
            " x",
            ":",
            " x",
            "**",
            "n",
            ",",
            "nums",
            "))",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 624,
        "prompt": "Write a python function to convert the given string to upper case.\n\ndef is_upper(string):\n",
        "answer": "def is_upper(string):\n\treturn string.isupper()\n\n",
        "test_list": [
            "assert is_upper(\"person\") ==\"PERSON\"",
            "assert is_upper(\"final\") == \"FINAL\"",
            "assert is_upper(\"Valid\") == \"VALID\""
        ],
        "answer_list": [
            "\t",
            "return",
            " string",
            ".",
            "is",
            "upper",
            "()",
            "\n",
            "\n",
            "def"
        ]
    },
    {
        "task_id": 625,
        "prompt": "Write a python function to interchange first and last elements in a given list.\n\ndef swap_List(newList): \n",
        "answer": "def swap_List(newList): \n\tnewList[0], newList[-1] = newList[-1], newList[0] \n\treturn newList \n\n",
        "test_list": [
            "assert swap_List([1,2,3]) == [3,2,1]",
            "assert swap_List([1,2,3,4,4]) == [4,2,3,4,1]",
            "assert swap_List([4,5,6]) == [6,5,4]"
        ],
        "answer_list": [
            "\t",
            "new",
            "List",
            "[",
            "0",
            "],",
            " new",
            "List",
            "[-",
            "1",
            "]",
            " =",
            " new",
            "List",
            "[-",
            "1",
            "],",
            " new",
            "List",
            "[",
            "0",
            "]",
            " \n",
            "\t",
            "return",
            " new",
            "List",
            " \n",
            "\n",
            "new"
        ]
    },
    {
        "task_id": 626,
        "prompt": "Write a python function to find the largest triangle that can be inscribed in the semicircle.\n\ndef triangle_area(r) :  \n",
        "answer": "def triangle_area(r) :  \n\treturn (r**2)*math.pi/2\n\n",
        "test_list": [
            "assert triangle_area(0) == 0",
            "assert triangle_area(-1) == -1",
            "assert triangle_area(2) == 4"
        ],
        "answer_list": [
            "\t",
            "return",
            " (",
            "r",
            "**",
            "2",
            ")*",
            "math",
            ".",
            "pi",
            "/",
            "2",
            "\n",
            "\n",
            "def"
        ]
    },
    {
        "task_id": 627,
        "prompt": "Write a python function to find the smallest missing number from the given array.\n\ndef find_First_Missing(array,start,end): \n",
        "answer": "def find_First_Missing(array,start,end): \n\tif start > end: \n\t\treturn -1\n\tif start == end: \n\t\treturn start + 1\n\tmid = (start + end) // 2\n\tif array[mid] == mid + 1: \n\t\treturn find_First_Missing(array, mid + 1, end) \n\telse: \n\t\treturn find_First_Missing(array, start, mid - 1) \n\n",
        "test_list": [
            "assert find_First_Missing([0,1,2,3],0,3) == 4",
            "assert find_First_Missing([0,1,2,6,9],0,4) == 3",
            "assert find_First_Missing([2,3,5,8,9],0,4) == 0"
        ],
        "answer_list": [
            "\t",
            "if",
            " start",
            " >",
            " end",
            ":",
            " \n\t",
            "\t",
            "return",
            " -",
            "1",
            "\n",
            "\t",
            "if",
            " start",
            " ==",
            " end",
            ":",
            " \n\t",
            "\t",
            "return",
            " start",
            " +",
            " ",
            "1",
            "\n",
            "\t",
            "mid",
            " =",
            " (",
            "start",
            " +",
            " end",
            ")",
            " //",
            " ",
            "2",
            "\n",
            "\t",
            "if",
            " array",
            "[",
            "mid",
            "]",
            " ==",
            " mid",
            " +",
            " ",
            "1",
            ":",
            " \n\t",
            "\t",
            "return",
            " find",
            "_",
            "First",
            "_",
            "Missing",
            "(",
            "array",
            ",",
            " mid",
            " +",
            " ",
            "1",
            ",",
            " end",
            ")",
            " \n",
            "\t",
            "else",
            ":",
            " \n\t",
            "\t",
            "return",
            " find",
            "_",
            "First",
            "_",
            "Missing",
            "(",
            "array",
            ",",
            " start",
            ",",
            " mid",
            " -",
            " ",
            "1",
            ")",
            " \n",
            "\n",
            "def"
        ]
    },
    {
        "task_id": 628,
        "prompt": "Write a python function to replace all spaces in the given string with character * list item * list item * list item * list item '%20'.\n\ndef replace_spaces(string):\n",
        "answer": "def replace_spaces(string):\n\treturn string.replace(\" \", \"%20\")\n\n",
        "test_list": [
            "assert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'",
            "assert replace_spaces(\"I am a Programmer\") == 'I%20am%20a%20Programmer'",
            "assert replace_spaces(\"I love Coding\") == 'I%20love%20Coding'"
        ],
        "answer_list": [
            "\t",
            "return",
            " string",
            ".",
            "replace",
            "(\"",
            " \",",
            " \"%",
            "2",
            "0",
            "\")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 629,
        "prompt": "Write a python function to find even numbers from a mixed list.\n\ndef Split(list): \n",
        "answer": "def Split(list): \n\teven = []\n\todd = []\n\tfor i in list:\n\t\tif i % 2 == 0:\n\t\t\teven.append(i)\n\t\telse:\n\t\t\todd.append(i)\n\treturn even, odd\n\n",
        "test_list": [
            "assert Split([1,2,3,4,5]) == [2,4]",
            "assert Split([4,5,6,7,8,0,1]) == [4,6,8,0]",
            "assert Split ([8,12,15,19]) == [8,12]"
        ],
        "answer_list": [
            "\t",
            "even",
            " =",
            " []",
            "\n",
            "\t",
            "odd",
            " =",
            " []",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " list",
            ":",
            "\n\t",
            "\t",
            "if",
            " i",
            " %",
            " ",
            "2",
            " ==",
            " ",
            "0",
            ":",
            "\n\t\t",
            "\t",
            "even",
            ".",
            "append",
            "(",
            "i",
            ")",
            "\n\t",
            "\t",
            "else",
            ":",
            "\n\t\t",
            "\t",
            "odd",
            ".",
            "append",
            "(",
            "i",
            ")",
            "\n",
            "\t",
            "return",
            " even",
            ",",
            " odd",
            "\n",
            "\n",
            "list"
        ]
    },
    {
        "task_id": 630,
        "prompt": "Write a python function to extract all the adjacent coordinates of the given coordinate tuple.\n\ndef get_coordinates(test_tup):\n",
        "answer": "def get_coordinates(test_tup):\n\treturn [(test_tup[0]+1, test_tup[1]), (test_tup[0]-1, test_tup[1]), (test_tup[0], test_tup[1]+1), (test_tup[0], test_tup[1]-1)]\n\n",
        "test_list": [
            "assert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]",
            "assert get_coordinates((4, 5)) ==[[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]",
            "assert get_coordinates((5, 6)) == [[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]]"
        ],
        "answer_list": [
            "\t",
            "return",
            " [(",
            "test",
            "_",
            "tup",
            "[",
            "0",
            "]+",
            "1",
            ",",
            " test",
            "_",
            "tup",
            "[",
            "1",
            "]),",
            " (",
            "test",
            "_",
            "tup",
            "[",
            "0",
            "]-",
            "1",
            ",",
            " test",
            "_",
            "tup",
            "[",
            "1",
            "]),",
            " (",
            "test",
            "_",
            "tup",
            "[",
            "0",
            "],",
            " test",
            "_",
            "tup",
            "[",
            "1",
            "]+",
            "1",
            "),",
            " (",
            "test",
            "_",
            "tup",
            "[",
            "0",
            "],",
            " test",
            "_",
            "tup",
            "[",
            "1",
            "]-",
            "1",
            ")]",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 631,
        "prompt": "Write a python function to replace whitespaces with an underscore and vice versa in a given string by using regex.\n\ndef replace_spaces(text):\n",
        "answer": "def replace_spaces(text):\n\treturn re.sub(r'\\s', '_', text)\n\n",
        "test_list": [
            "assert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'",
            "assert replace_spaces('The Avengers') == 'The_Avengers'",
            "assert replace_spaces('Fast and Furious') == 'Fast_and_Furious'"
        ],
        "answer_list": [
            "\t",
            "return",
            " re",
            ".",
            "sub",
            "(",
            "r",
            "'\\",
            "s",
            "',",
            " '_",
            "',",
            " text",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 632,
        "prompt": "Write a python function to move all zeroes to the end of the given list.\n\ndef move_zero(num_list):\n",
        "answer": "def move_zero(num_list):\n\tfor i in range(len(num_list)):\n\t\tif num_list[i] == 0:\n\t\t\tnum_list.append(num_list.pop(i))\n\treturn num_list\n\n",
        "test_list": [
            "assert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]",
            "assert move_zero([2,3,2,0,0,4,0,5,0]) == [2,3,2,4,5,0,0,0,0]",
            "assert move_zero([0,1,0,1,1]) == [1,1,1,0,0]"
        ],
        "answer_list": [
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "len",
            "(",
            "num",
            "_",
            "list",
            ")):",
            "\n\t",
            "\t",
            "if",
            " num",
            "_",
            "list",
            "[",
            "i",
            "]",
            " ==",
            " ",
            "0",
            ":",
            "\n\t\t",
            "\t",
            "num",
            "_",
            "list",
            ".",
            "append",
            "(",
            "num",
            "_",
            "list",
            ".",
            "pop",
            "(",
            "i",
            "))",
            "\n",
            "\t",
            "return",
            " num",
            "_",
            "list",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 633,
        "prompt": "Write a python function to find the sum of xor of all pairs of numbers in the given array.\n\ndef pair_OR_Sum(arr,n) : \n",
        "answer": "def pair_OR_Sum(arr,n) : \n\txor = 0\n\tfor i in range(n) : \n\t\tfor j in range(i+1,n) : \n\t\t\txor = xor ^ arr[i] ^ arr[j]\n\treturn xor\n\n",
        "test_list": [
            "assert pair_OR_Sum([5,9,7,6],4) == 47",
            "assert pair_OR_Sum([7,3,5],3) == 12",
            "assert pair_OR_Sum([7,3],2) == 4"
        ],
        "answer_list": [
            "\t",
            "xor",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "n",
            ")",
            " :",
            " \n\t",
            "\t",
            "for",
            " j",
            " in",
            " range",
            "(",
            "i",
            "+",
            "1",
            ",",
            "n",
            ")",
            " :",
            " \n\t\t",
            "\t",
            "xor",
            " =",
            " xor",
            " ^",
            " arr",
            "[",
            "i",
            "]",
            " ^",
            " arr",
            "[",
            "j",
            "]",
            "\n",
            "\t",
            "return",
            " xor",
            "\n",
            "\n",
            "arr"
        ]
    },
    {
        "task_id": 634,
        "prompt": "Write a python function to find the sum of fourth power of first n even natural numbers.\n\ndef even_Power_Sum(n): \n",
        "answer": "def even_Power_Sum(n): \n\tsum = 0\n\tfor i in range(2, n+1, 2): \n\t\tsum += i**4\n\treturn sum\n\n",
        "test_list": [
            "assert even_Power_Sum(2) == 272",
            "assert even_Power_Sum(3) == 1568",
            "assert even_Power_Sum(4) == 5664"
        ],
        "answer_list": [
            "\t",
            "sum",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "2",
            ",",
            " n",
            "+",
            "1",
            ",",
            " ",
            "2",
            "):",
            " \n\t",
            "\t",
            "sum",
            " +=",
            " i",
            "**",
            "4",
            "\n",
            "\t",
            "return",
            " sum",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 635,
        "prompt": "Write a python function to push all values into a heap and then pop off the smallest values one at a time.\n\ndef heap_sort(iterable):\n",
        "answer": "def heap_sort(iterable):\n\th = []\n\tfor value in iterable:\n\t\theappush(h, value)\n\treturn [heappop(h) for i in range(len(h))]\n\n",
        "test_list": [
            "assert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
            "assert heap_sort([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]",
            "assert heap_sort( [7, 1, 9, 5])==[1,5,7,9]"
        ],
        "answer_list": [
            "\t",
            "h",
            " =",
            " []",
            "\n",
            "\t",
            "for",
            " value",
            " in",
            " iterable",
            ":",
            "\n\t",
            "\t",
            "he",
            "app",
            "ush",
            "(",
            "h",
            ",",
            " value",
            ")",
            "\n",
            "\t",
            "return",
            " [",
            "he",
            "app",
            "op",
            "(",
            "h",
            ")",
            " for",
            " i",
            " in",
            " range",
            "(",
            "len",
            "(",
            "h",
            "))]",
            "\n",
            "\n",
            "#"
        ]
    },
    {
        "task_id": 636,
        "prompt": "Write a python function to check if roots of a quadratic equation are reciprocal of each other or not.\n\ndef Check_Solution(a,b,c): \n",
        "answer": "def Check_Solution(a,b,c): \n\tif (a*c) == (b*b): \n\t\treturn True\n\telse: \n\t\treturn False\n\n",
        "test_list": [
            "assert Check_Solution(2,0,2) == \"Yes\"",
            "assert Check_Solution(2,-5,2) == \"Yes\"",
            "assert Check_Solution(1,2,3) == \"No\""
        ],
        "answer_list": [
            "\t",
            "if",
            " (",
            "a",
            "*",
            "c",
            ")",
            " ==",
            " (",
            "b",
            "*",
            "b",
            "):",
            " \n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "else",
            ":",
            " \n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\n",
            "a"
        ]
    },
    {
        "task_id": 637,
        "prompt": "Write a python function to check whether the given amount has no profit and no loss\n\ndef noprofit_noloss(actual_cost,sale_amount): \n",
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n\tif actual_cost > sale_amount:\n\t\treturn True\n\telse:\n\t\treturn False\n\n",
        "test_list": [
            "assert noprofit_noloss(1500,1200)==False",
            "assert noprofit_noloss(100,100)==True",
            "assert noprofit_noloss(2000,5000)==False"
        ],
        "answer_list": [
            "\t",
            "if",
            " actual",
            "_",
            "cost",
            " >",
            " sale",
            "_",
            "amount",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 638,
        "prompt": "Write a python function to calculate wind chill index.\n\ndef wind_chill(v,t):\n",
        "answer": "def wind_chill(v,t):\n\treturn 13.12 + 0.6215*v - 11.37*t**0.16 + 0.3965*v*t**0.16\n\n",
        "test_list": [
            "assert wind_chill(120,35)==40",
            "assert wind_chill(40,70)==86",
            "assert wind_chill(10,100)==116"
        ],
        "answer_list": [
            "\t",
            "return",
            " ",
            "1",
            "3",
            ".",
            "1",
            "2",
            " +",
            " ",
            "0",
            ".",
            "6",
            "2",
            "1",
            "5",
            "*",
            "v",
            " -",
            " ",
            "1",
            "1",
            ".",
            "3",
            "7",
            "*",
            "t",
            "**",
            "0",
            ".",
            "1",
            "6",
            " +",
            " ",
            "0",
            ".",
            "3",
            "9",
            "6",
            "5",
            "*",
            "v",
            "*",
            "t",
            "**",
            "0",
            ".",
            "1",
            "6",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 639,
        "prompt": "Write a python function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n\ndef sample_nam(sample_names):\n",
        "answer": "def sample_nam(sample_names):\n\tsum = 0\n\tfor i in sample_names:\n\t\tif i[0].isupper():\n\t\t\tsum += len(i)\n\treturn sum\n\n",
        "test_list": [
            "assert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16",
            "assert sample_nam([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])==10",
            "assert sample_nam([\"abcd\", \"Python\", \"abba\", \"aba\"])==6"
        ],
        "answer_list": [
            "\t",
            "sum",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " sample",
            "_",
            "names",
            ":",
            "\n\t",
            "\t",
            "if",
            " i",
            "[",
            "0",
            "].",
            "is",
            "upper",
            "():",
            "\n\t\t",
            "\t",
            "sum",
            " +=",
            " len",
            "(",
            "i",
            ")",
            "\n",
            "\t",
            "return",
            " sum",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 640,
        "prompt": "Write a python function to remove the parenthesis area in a string.\n\ndef remove_parenthesis(items):\n",
        "answer": "def remove_parenthesis(items):\n\treturn items.replace('(', '').replace(')', '')\n\n",
        "test_list": [
            "assert remove_parenthesis([\"python (chrome)\"])==(\"python\")",
            "assert remove_parenthesis([\"string(.abc)\"])==(\"string\")",
            "assert remove_parenthesis([\"alpha(num)\"])==(\"alpha\")"
        ],
        "answer_list": [
            "\t",
            "return",
            " items",
            ".",
            "replace",
            "('",
            "(',",
            " '').",
            "replace",
            "('",
            ")',",
            " '')",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 641,
        "prompt": "Write a python function to find the nth nonagonal number.\n\ndef is_nonagonal(n): \n",
        "answer": "def is_nonagonal(n): \n\treturn (n * (3 * n - 1)) / 2\n\n",
        "test_list": [
            "assert is_nonagonal(10) == 325",
            "assert is_nonagonal(15) == 750",
            "assert is_nonagonal(18) == 1089"
        ],
        "answer_list": [
            "\t",
            "return",
            " (",
            "n",
            " *",
            " (",
            "3",
            " *",
            " n",
            " -",
            " ",
            "1",
            "))",
            " /",
            " ",
            "2",
            "\n",
            "\n",
            "def"
        ]
    },
    {
        "task_id": 642,
        "prompt": "Write a python function to remove similar rows from the given tuple matrix.\n\ndef remove_similar_row(test_list):\n",
        "answer": "def remove_similar_row(test_list):\n\ttest_list = list(test_list)\n\tfor i in range(len(test_list)):\n\t\tfor j in range(len(test_list)):\n\t\t\tif i!= j:\n\t\t\t\tif test_list[i] == test_list[j]:\n\t\t\t\t\ttest_list.remove(test_list[j])\n\treturn test_list\n\n",
        "test_list": [
            "assert remove_similar_row([[(4, 5), (3, 2)], [(2, 2), (4, 6)], [(3, 2), (4, 5)]] ) == {((2, 2), (4, 6)), ((3, 2), (4, 5))}",
            "assert remove_similar_row([[(5, 6), (4, 3)], [(3, 3), (5, 7)], [(4, 3), (5, 6)]] ) == {((4, 3), (5, 6)), ((3, 3), (5, 7))}",
            "assert remove_similar_row([[(6, 7), (5, 4)], [(4, 4), (6, 8)], [(5, 4), (6, 7)]] ) =={((4, 4), (6, 8)), ((5, 4), (6, 7))}"
        ],
        "answer_list": [
            "\t",
            "test",
            "_",
            "list",
            " =",
            " list",
            "(",
            "test",
            "_",
            "list",
            ")",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "len",
            "(",
            "test",
            "_",
            "list",
            ")):",
            "\n\t",
            "\t",
            "for",
            " j",
            " in",
            " range",
            "(",
            "len",
            "(",
            "test",
            "_",
            "list",
            ")):",
            "\n\t\t",
            "\t",
            "if",
            " i",
            "!=",
            " j",
            ":",
            "\n\t\t\t",
            "\t",
            "if",
            " test",
            "_",
            "list",
            "[",
            "i",
            "]",
            " ==",
            " test",
            "_",
            "list",
            "[",
            "j",
            "]:",
            "\n\t\t\t\t",
            "\t",
            "test",
            "_",
            "list",
            ".",
            "remove",
            "(",
            "test",
            "_",
            "list",
            "[",
            "j",
            "])",
            "\n",
            "\t",
            "return",
            " test",
            "_",
            "list",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 643,
        "prompt": "Write a python function that matches a word containing 'z', not at the start or end of the word.\n\ndef text_match_wordz_middle(text):\n",
        "answer": "def text_match_wordz_middle(text):\n\treturn re.search(r'z[a-zA-Z]*z', text)\n\n",
        "test_list": [
            "assert text_match_wordz_middle(\"pythonzabc.\")==('Found a match!')",
            "assert text_match_wordz_middle(\"xyzabc.\")==('Found a match!')",
            "assert text_match_wordz_middle(\"  lang  .\")==('Not matched!')"
        ],
        "answer_list": [
            "\t",
            "return",
            " re",
            ".",
            "search",
            "(",
            "r",
            "'",
            "z",
            "[",
            "a",
            "-",
            "zA",
            "-",
            "Z",
            "]*",
            "z",
            "',",
            " text",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 644,
        "prompt": "Write a python function to reverse an array upto a given position.\n\ndef reverse_Array_Upto_K(input, k): \n",
        "answer": "def reverse_Array_Upto_K(input, k): \n\treturn input[k:]+input[:k]\n\n",
        "test_list": [
            "assert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]",
            "assert reverse_Array_Upto_K([4, 5, 6, 7], 2) == [5, 4, 6, 7]",
            "assert reverse_Array_Upto_K([9, 8, 7, 6, 5],3) == [7, 8, 9, 6, 5]"
        ],
        "answer_list": [
            "\t",
            "return",
            " input",
            "[",
            "k",
            ":",
            "]+",
            "input",
            "[:",
            "k",
            "]",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 645,
        "prompt": "Write a python function to find the product of it\u2019s kth index in the given tuples.\n\ndef find_k_product(test_list, K):\n",
        "answer": "def find_k_product(test_list, K):\n\tproduct = 1\n\tfor i in range(K):\n\t\tproduct *= test_list[i]\n\treturn product\n\n",
        "test_list": [
            "assert find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 665",
            "assert find_k_product([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1) == 280",
            "assert find_k_product([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 0) == 210"
        ],
        "answer_list": [
            "\t",
            "product",
            " =",
            " ",
            "1",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "K",
            "):",
            "\n\t",
            "\t",
            "product",
            " *=",
            " test",
            "_",
            "list",
            "[",
            "i",
            "]",
            "\n",
            "\t",
            "return",
            " product",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 646,
        "prompt": "Write a python function to count number of cubes of size k in a cube of size n.\n\ndef No_of_cubes(N,K):\n",
        "answer": "def No_of_cubes(N,K):\n\treturn (N//K)**3\n\n",
        "test_list": [
            "assert No_of_cubes(2,1) == 8",
            "assert No_of_cubes(5,2) == 64",
            "assert No_of_cubes(1,1) == 1"
        ],
        "answer_list": [
            "\t",
            "return",
            " (",
            "N",
            "//",
            "K",
            ")**",
            "3",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 647,
        "prompt": "Write a python function to split a string at uppercase letters.\n\ndef split_upperstring(text):\n",
        "answer": "def split_upperstring(text):\n\treturn [i for i in text.split() if i.isupper()]\n\n",
        "test_list": [
            "assert split_upperstring(\"PythonProgramLanguage\")==['Python','Program','Language']",
            "assert split_upperstring(\"PythonProgram\")==['Python','Program']",
            "assert split_upperstring(\"ProgrammingLanguage\")==['Programming','Language']"
        ],
        "answer_list": [
            "\t",
            "return",
            " [",
            "i",
            " for",
            " i",
            " in",
            " text",
            ".",
            "split",
            "()",
            " if",
            " i",
            ".",
            "is",
            "upper",
            "()]",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 648,
        "prompt": "Write a python function to exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list.\n\ndef exchange_elements(lst):\n",
        "answer": "def exchange_elements(lst):\n\tfor i in range(0, len(lst), 2):\n\t\tlst[i], lst[i+1] = lst[i+1], lst[i]\n\treturn lst\n\n",
        "test_list": [
            "assert exchange_elements([0,1,2,3,4,5])==[1, 0, 3, 2, 5, 4] ",
            "assert exchange_elements([5,6,7,8,9,10])==[6,5,8,7,10,9] ",
            "assert exchange_elements([25,35,45,55,75,95])==[35,25,55,45,95,75] "
        ],
        "answer_list": [
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "0",
            ",",
            " len",
            "(",
            "lst",
            "),",
            " ",
            "2",
            "):",
            "\n\t",
            "\t",
            "lst",
            "[",
            "i",
            "],",
            " lst",
            "[",
            "i",
            "+",
            "1",
            "]",
            " =",
            " lst",
            "[",
            "i",
            "+",
            "1",
            "],",
            " lst",
            "[",
            "i",
            "]",
            "\n",
            "\t",
            "return",
            " lst",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 649,
        "prompt": "Write a python function to calculate the sum of the numbers in a list between the indices of a specified range.\n\ndef sum_Range_list(nums, m, n):                                                                                                                                                                                                \n",
        "answer": "def sum_Range_list(nums, m, n):                                                                                                                                                                                                \n\tsum = 0\n\tfor i in range(m, n+1):\n\t\tsum += nums[i]\n\treturn sum\n\n",
        "test_list": [
            "assert sum_Range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12],8,10) == 29",
            "assert sum_Range_list([1,2,3,4,5],1,2) == 5",
            "assert sum_Range_list([1,0,1,2,5,6],4,5) == 11"
        ],
        "answer_list": [
            "\t",
            "sum",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "m",
            ",",
            " n",
            "+",
            "1",
            "):",
            "\n\t",
            "\t",
            "sum",
            " +=",
            " nums",
            "[",
            "i",
            "]",
            "\n",
            "\t",
            "return",
            " sum",
            "\n",
            "\n",
            "nums"
        ]
    },
    {
        "task_id": 650,
        "prompt": "Write a python function to check whether the given two arrays are equal or not.\n\ndef are_Equal(arr1,arr2,n,m):\n",
        "answer": "def are_Equal(arr1,arr2,n,m):\n\tif n!=m:\n\t\treturn False\n\tfor i in range(n):\n\t\tif arr1[i]!=arr2[i]:\n\t\t\treturn False\n\treturn True\n\n",
        "test_list": [
            "assert are_Equal([1,2,3],[3,2,1],3,3) == True",
            "assert are_Equal([1,1,1],[2,2,2],3,3) == False",
            "assert are_Equal([8,9],[4,5,6],2,3) == False"
        ],
        "answer_list": [
            "\t",
            "if",
            " n",
            "!=",
            "m",
            ":",
            "\n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "n",
            "):",
            "\n\t",
            "\t",
            "if",
            " arr",
            "1",
            "[",
            "i",
            "]",
            "!=",
            "arr",
            "2",
            "[",
            "i",
            "]:",
            "\n\t\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "return",
            " True",
            "\n",
            "\n",
            "arr"
        ]
    },
    {
        "task_id": 651,
        "prompt": "Write a python function to check if one tuple is a subset of another tuple.\n\ndef check_subset(test_tup1, test_tup2):\n",
        "answer": "def check_subset(test_tup1, test_tup2):\n\tif test_tup1[0] in test_tup2 and test_tup1[1] in test_tup2:\n\t\treturn True\n\telse:\n\t\treturn False\n\n",
        "test_list": [
            "assert check_subset((10, 4, 5, 6), (5, 10)) == True",
            "assert check_subset((1, 2, 3, 4), (5, 6)) == False",
            "assert check_subset((7, 8, 9, 10), (10, 8)) == True"
        ],
        "answer_list": [
            "\t",
            "if",
            " test",
            "_",
            "tup",
            "1",
            "[",
            "0",
            "]",
            " in",
            " test",
            "_",
            "tup",
            "2",
            " and",
            " test",
            "_",
            "tup",
            "1",
            "[",
            "1",
            "]",
            " in",
            " test",
            "_",
            "tup",
            "2",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 652,
        "prompt": "Write a python function to flatten the given tuple matrix into the tuple list with each tuple representing each column.\n\ndef matrix_to_list(test_list):\n",
        "answer": "def matrix_to_list(test_list):\n\treturn [tuple(i) for i in zip(*test_list)]\n\n",
        "test_list": [
            "assert matrix_to_list([[(4, 5), (7, 8)], [(10, 13), (18, 17)], [(0, 4), (10, 1)]]) == '[(4, 7, 10, 18, 0, 10), (5, 8, 13, 17, 4, 1)]'",
            "assert matrix_to_list([[(5, 6), (8, 9)], [(11, 14), (19, 18)], [(1, 5), (11, 2)]]) == '[(5, 8, 11, 19, 1, 11), (6, 9, 14, 18, 5, 2)]'",
            "assert matrix_to_list([[(6, 7), (9, 10)], [(12, 15), (20, 21)], [(23, 7), (15, 8)]]) == '[(6, 9, 12, 20, 23, 15), (7, 10, 15, 21, 7, 8)]'"
        ],
        "answer_list": [
            "\t",
            "return",
            " [",
            "tuple",
            "(",
            "i",
            ")",
            " for",
            " i",
            " in",
            " zip",
            "(*",
            "test",
            "_",
            "list",
            ")]",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 653,
        "prompt": "Write a python function to group a sequence of key-value pairs into a dictionary of lists using collections module.\n\ndef grouping_dictionary(l):\n",
        "answer": "def grouping_dictionary(l):\n\td = {}\n\tfor key, value in l:\n\t\tif key in d:\n\t\t\td[key].append(value)\n\t\telse:\n\t\t\td[key] = [value]\n\treturn d\n\n",
        "test_list": [
            "assert grouping_dictionary([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])== ({'yellow': [1, 3], 'blue': [2, 4], 'red': [1]})",
            "assert grouping_dictionary([('yellow', 10), ('blue', 20), ('yellow', 30), ('blue', 40), ('red', 10)])== ({'yellow': [10, 30], 'blue': [20, 40], 'red': [10]})",
            "assert grouping_dictionary([('yellow', 15), ('blue', 25), ('yellow', 35), ('blue', 45), ('red', 15)])== ({'yellow': [15, 35], 'blue': [25, 45], 'red': [15]})"
        ],
        "answer_list": [
            "\t",
            "d",
            " =",
            " {}",
            "\n",
            "\t",
            "for",
            " key",
            ",",
            " value",
            " in",
            " l",
            ":",
            "\n\t",
            "\t",
            "if",
            " key",
            " in",
            " d",
            ":",
            "\n\t\t",
            "\t",
            "d",
            "[",
            "key",
            "].",
            "append",
            "(",
            "value",
            ")",
            "\n\t",
            "\t",
            "else",
            ":",
            "\n\t\t",
            "\t",
            "d",
            "[",
            "key",
            "]",
            " =",
            " [",
            "value",
            "]",
            "\n",
            "\t",
            "return",
            " d",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 654,
        "prompt": "Write a python function to find the perimeter of a rectangle.\n\ndef rectangle_perimeter(l,b):\n",
        "answer": "def rectangle_perimeter(l,b):\n\treturn 2*(l+b)\n\n",
        "test_list": [
            "assert rectangle_perimeter(10,20)==60",
            "assert rectangle_perimeter(10,5)==30",
            "assert rectangle_perimeter(4,2)==12"
        ],
        "answer_list": [
            "\t",
            "return",
            " ",
            "2",
            "*(",
            "l",
            "+",
            "b",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 655,
        "prompt": "Write a python function to find the sum of fifth power of n natural numbers.\n\ndef fifth_Power_Sum(n) : \n",
        "answer": "def fifth_Power_Sum(n) : \n\tsum = 0\n\tfor i in range(1, n+1) : \n\t\tsum += i**5\n\treturn sum\n\n",
        "test_list": [
            "assert fifth_Power_Sum(2) == 33",
            "assert fifth_Power_Sum(4) == 1300",
            "assert fifth_Power_Sum(3) == 276"
        ],
        "answer_list": [
            "\t",
            "sum",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "1",
            ",",
            " n",
            "+",
            "1",
            ")",
            " :",
            " \n\t",
            "\t",
            "sum",
            " +=",
            " i",
            "**",
            "5",
            "\n",
            "\t",
            "return",
            " sum",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 656,
        "prompt": "Write a python function to find the minimum sum of absolute differences of two arrays.\n\ndef find_Min_Sum(a,b,n): \n",
        "answer": "def find_Min_Sum(a,b,n): \n\ta.sort() \n\tb.sort() \n\tsum = 0\n\tfor i in range(n): \n\t\tsum += abs(a[i] - b[i]) \n\treturn sum \n\n",
        "test_list": [
            "assert find_Min_Sum([3,2,1],[2,1,3],3) == 0",
            "assert find_Min_Sum([1,2,3],[4,5,6],3) == 9",
            "assert find_Min_Sum([4,1,8,7],[2,3,6,5],4) == 6"
        ],
        "answer_list": [
            "\t",
            "a",
            ".",
            "sort",
            "()",
            " \n",
            "\t",
            "b",
            ".",
            "sort",
            "()",
            " \n",
            "\t",
            "sum",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "n",
            "):",
            " \n\t",
            "\t",
            "sum",
            " +=",
            " abs",
            "(",
            "a",
            "[",
            "i",
            "]",
            " -",
            " b",
            "[",
            "i",
            "])",
            " \n",
            "\t",
            "return",
            " sum",
            " \n",
            "\n",
            "a"
        ]
    },
    {
        "task_id": 657,
        "prompt": "Write a python function to find the first digit in factorial of a given number.\n\ndef first_Digit(n) : \n",
        "answer": "def first_Digit(n) : \n\tif n < 0: \n\t\treturn -1\n\tif n == 0: \n\t\treturn 0\n\tfact = 1\n\twhile n > 0: \n\t\tfact = fact * n \n\t\tn = n - 1\n\treturn int(str(fact)[0])\n\n",
        "test_list": [
            "assert first_Digit(5) == 1",
            "assert first_Digit(10) == 3",
            "assert first_Digit(7) == 5"
        ],
        "answer_list": [
            "\t",
            "if",
            " n",
            " <",
            " ",
            "0",
            ":",
            " \n\t",
            "\t",
            "return",
            " -",
            "1",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "0",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "0",
            "\n",
            "\t",
            "fact",
            " =",
            " ",
            "1",
            "\n",
            "\t",
            "while",
            " n",
            " >",
            " ",
            "0",
            ":",
            " \n\t",
            "\t",
            "fact",
            " =",
            " fact",
            " *",
            " n",
            " \n\t",
            "\t",
            "n",
            " =",
            " n",
            " -",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " int",
            "(",
            "str",
            "(",
            "fact",
            ")[",
            "0",
            "])",
            "\n",
            "\n",
            "n"
        ]
    },
    {
        "task_id": 658,
        "prompt": "Write a python function to find the item with maximum occurrences in a given list.\n\ndef max_occurrences(list1):\n",
        "answer": "def max_occurrences(list1):\n\tmax_occur = 0\n\tmax_item = None\n\tfor item in list1:\n\t\tcount = list1.count(item)\n\t\tif count > max_occur:\n\t\t\tmax_occur = count\n\t\t\tmax_item = item\n\treturn max_item\n\n",
        "test_list": [
            "assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,4,6,9,1,2])==2",
            "assert max_occurrences([1, 3,5, 7,1, 3,13, 15, 17,5, 7,9,1, 11])==1",
            "assert max_occurrences([1, 2, 3,2, 4, 5,1, 1, 1])==1"
        ],
        "answer_list": [
            "\t",
            "max",
            "_",
            "oc",
            "cur",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "max",
            "_",
            "item",
            " =",
            " None",
            "\n",
            "\t",
            "for",
            " item",
            " in",
            " list",
            "1",
            ":",
            "\n\t",
            "\t",
            "count",
            " =",
            " list",
            "1",
            ".",
            "count",
            "(",
            "item",
            ")",
            "\n\t",
            "\t",
            "if",
            " count",
            " >",
            " max",
            "_",
            "oc",
            "cur",
            ":",
            "\n\t\t",
            "\t",
            "max",
            "_",
            "oc",
            "cur",
            " =",
            " count",
            "\n\t\t",
            "\t",
            "max",
            "_",
            "item",
            " =",
            " item",
            "\n",
            "\t",
            "return",
            " max",
            "_",
            "item",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 659,
        "prompt": "Write a python function to print duplicants from a list of integers.\n\ndef Repeat(x): \n",
        "answer": "def Repeat(x): \n\tfor i in range(len(x)): \n\t\tfor j in range(i+1, len(x)): \n\t\t\tif x[i] == x[j]: \n\t\t\t\tprint(x[i]) \n\n",
        "test_list": [
            "assert Repeat([10, 20, 30, 20, 20, 30, 40, 50, -20, 60, 60, -20, -20]) == [20, 30, -20, 60]",
            "assert Repeat([-1, 1, -1, 8]) == [-1]",
            "assert Repeat([1, 2, 3, 1, 2,]) == [1, 2]"
        ],
        "answer_list": [
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "len",
            "(",
            "x",
            ")):",
            " \n\t",
            "\t",
            "for",
            " j",
            " in",
            " range",
            "(",
            "i",
            "+",
            "1",
            ",",
            " len",
            "(",
            "x",
            ")):",
            " \n\t\t",
            "\t",
            "if",
            " x",
            "[",
            "i",
            "]",
            " ==",
            " x",
            "[",
            "j",
            "]:",
            " \n\t\t\t",
            "\t",
            "print",
            "(",
            "x",
            "[",
            "i",
            "])",
            " \n",
            "\n",
            "x"
        ]
    },
    {
        "task_id": 660,
        "prompt": "Write a python function to choose points from two ranges such that no point lies in both the ranges.\n\ndef find_Points(l1,r1,l2,r2): \n",
        "answer": "def find_Points(l1,r1,l2,r2): \n\tl1.sort()\n\tr1.sort()\n\tl2.sort()\n\tr2.sort()\n\ti=0\n\tj=0\n\tk=0\n\twhile i<len(l1) and j<len(l2):\n\t\tif l1[i]<l2[j]:\n\t\t\ti+=1\n\t\telif l1[i]>l2[j]:\n\t\t\tj+=1\n\t\telse:\n\t\t\tl1.remove(l1[i])\n\t\t\tl2.remove(l2[j])\n\twhile i<len(l1) and k<len(r1):\n\t\tif l1[i]<r1[k]:\n\t\t\ti+=1\n\t\telif l1[i]>r1[k]:\n\t\t\tk+=1\n\t\telse:\n\t\t\tl1.remove(l1[i])\n\t\t\tr1.remove(r1[k])\n\twhile j<len(l2) and k<len(r2):\n\t\tif l2[j]<r2[k]:\n\t\t\tj+=1\n\t\telif l2[j]>r2[k]:\n\t\t\tk+=1\n\t\telse:\n\t\t\tl2.remove(l2[j])\n\t\t\tr2.remove(r2[k])\n\treturn l1+r1+l2+r2\n\n",
        "test_list": [
            "assert find_Points(5,10,1,5) == (1,10)",
            "assert find_Points(3,5,7,9) == (3,9)",
            "assert find_Points(1,5,2,8) == (1,8)"
        ],
        "answer_list": [
            "\t",
            "l",
            "1",
            ".",
            "sort",
            "()",
            "\n",
            "\t",
            "r",
            "1",
            ".",
            "sort",
            "()",
            "\n",
            "\t",
            "l",
            "2",
            ".",
            "sort",
            "()",
            "\n",
            "\t",
            "r",
            "2",
            ".",
            "sort",
            "()",
            "\n",
            "\t",
            "i",
            "=",
            "0",
            "\n",
            "\t",
            "j",
            "=",
            "0",
            "\n",
            "\t",
            "k",
            "=",
            "0",
            "\n",
            "\t",
            "while",
            " i",
            "<",
            "len",
            "(",
            "l",
            "1",
            ")",
            " and",
            " j",
            "<",
            "len",
            "(",
            "l",
            "2",
            "):",
            "\n\t",
            "\t",
            "if",
            " l",
            "1",
            "[",
            "i",
            "]<",
            "l",
            "2",
            "[",
            "j",
            "]:",
            "\n\t\t",
            "\t",
            "i",
            "+=",
            "1",
            "\n\t",
            "\t",
            "elif",
            " l",
            "1",
            "[",
            "i",
            "]>",
            "l",
            "2",
            "[",
            "j",
            "]:",
            "\n\t\t",
            "\t",
            "j",
            "+=",
            "1",
            "\n\t",
            "\t",
            "else",
            ":",
            "\n\t\t",
            "\t",
            "l",
            "1",
            ".",
            "remove",
            "(",
            "l",
            "1",
            "[",
            "i",
            "])",
            "\n\t\t",
            "\t",
            "l",
            "2",
            ".",
            "remove",
            "(",
            "l",
            "2",
            "[",
            "j",
            "])",
            "\n",
            "\t",
            "while",
            " i",
            "<",
            "len",
            "(",
            "l",
            "1",
            ")",
            " and",
            " k",
            "<",
            "len",
            "(",
            "r",
            "1",
            "):",
            "\n\t",
            "\t",
            "if",
            " l",
            "1",
            "[",
            "i",
            "]<",
            "r",
            "1",
            "[",
            "k",
            "]:",
            "\n\t\t",
            "\t",
            "i",
            "+=",
            "1",
            "\n\t",
            "\t",
            "elif",
            " l",
            "1",
            "[",
            "i",
            "]>",
            "r",
            "1",
            "[",
            "k",
            "]:",
            "\n\t\t",
            "\t",
            "k",
            "+=",
            "1",
            "\n\t",
            "\t",
            "else",
            ":",
            "\n\t\t",
            "\t",
            "l",
            "1",
            ".",
            "remove",
            "(",
            "l",
            "1",
            "[",
            "i",
            "])",
            "\n\t\t",
            "\t",
            "r",
            "1",
            ".",
            "remove",
            "(",
            "r",
            "1",
            "[",
            "k",
            "])",
            "\n",
            "\t",
            "while",
            " j",
            "<",
            "len",
            "(",
            "l",
            "2",
            ")",
            " and",
            " k",
            "<",
            "len",
            "(",
            "r",
            "2",
            "):",
            "\n\t",
            "\t",
            "if",
            " l",
            "2",
            "[",
            "j",
            "]<",
            "r",
            "2",
            "[",
            "k",
            "]:",
            "\n\t\t",
            "\t",
            "j",
            "+=",
            "1",
            "\n\t",
            "\t",
            "elif",
            " l",
            "2",
            "[",
            "j",
            "]>",
            "r",
            "2",
            "[",
            "k",
            "]:",
            "\n\t\t",
            "\t",
            "k",
            "+=",
            "1",
            "\n\t",
            "\t",
            "else",
            ":",
            "\n\t\t",
            "\t",
            "l",
            "2",
            ".",
            "remove",
            "(",
            "l",
            "2",
            "[",
            "j",
            "])",
            "\n\t\t",
            "\t",
            "r",
            "2",
            ".",
            "remove",
            "(",
            "r",
            "2",
            "[",
            "k",
            "])",
            "\n",
            "\t",
            "return",
            " l",
            "1",
            "+",
            "r",
            "1",
            "+",
            "l",
            "2",
            "+",
            "r",
            "2",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 661,
        "prompt": "Write a python function to find the maximum sum that can be formed which has no three consecutive elements present.\n\ndef max_sum_of_three_consecutive(arr, n): \n",
        "answer": "def max_sum_of_three_consecutive(arr, n): \n\tmax_sum = 0\n\tfor i in range(n-2): \n\t\tsum = arr[i] + arr[i+1] + arr[i+2] \n\t\tif sum > max_sum: \n\t\t\tmax_sum = sum \n\treturn max_sum \n\n",
        "test_list": [
            "assert max_sum_of_three_consecutive([100, 1000, 100, 1000, 1], 5) == 2101",
            "assert max_sum_of_three_consecutive([3000, 2000, 1000, 3, 10], 5) == 5013",
            "assert max_sum_of_three_consecutive([1, 2, 3, 4, 5, 6, 7, 8], 8) == 27"
        ],
        "answer_list": [
            "\t",
            "max",
            "_",
            "sum",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "n",
            "-",
            "2",
            "):",
            " \n\t",
            "\t",
            "sum",
            " =",
            " arr",
            "[",
            "i",
            "]",
            " +",
            " arr",
            "[",
            "i",
            "+",
            "1",
            "]",
            " +",
            " arr",
            "[",
            "i",
            "+",
            "2",
            "]",
            " \n\t",
            "\t",
            "if",
            " sum",
            " >",
            " max",
            "_",
            "sum",
            ":",
            " \n\t\t",
            "\t",
            "max",
            "_",
            "sum",
            " =",
            " sum",
            " \n",
            "\t",
            "return",
            " max",
            "_",
            "sum",
            " \n",
            "\n",
            "arr"
        ]
    },
    {
        "task_id": 662,
        "prompt": "Write a python function to sort a list in a dictionary.\n\ndef sorted_dict(dict1):\n",
        "answer": "def sorted_dict(dict1):\n\treturn dict(sorted(dict1.items(), key=lambda item: item[1]))\n\n",
        "test_list": [
            "assert sorted_dict({'n1': [2, 3, 1], 'n2': [5, 1, 2], 'n3': [3, 2, 4]})=={'n1': [1, 2, 3], 'n2': [1, 2, 5], 'n3': [2, 3, 4]}",
            "assert sorted_dict({'n1': [25,37,41], 'n2': [41,54,63], 'n3': [29,38,93]})=={'n1': [25, 37, 41], 'n2': [41, 54, 63], 'n3': [29, 38, 93]}",
            "assert sorted_dict({'n1': [58,44,56], 'n2': [91,34,58], 'n3': [100,200,300]})=={'n1': [44, 56, 58], 'n2': [34, 58, 91], 'n3': [100, 200, 300]}"
        ],
        "answer_list": [
            "\t",
            "return",
            " dict",
            "(",
            "sorted",
            "(",
            "dict",
            "1",
            ".",
            "items",
            "(),",
            " key",
            "=",
            "lambda",
            " item",
            ":",
            " item",
            "[",
            "1",
            "]))",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 663,
        "prompt": "Write a python function to find the largest possible value of k such that k modulo x is y.\n\ndef find_max_val(n, x, y): \n",
        "answer": "def find_max_val(n, x, y): \n\t# Your code goes here\n\treturn (n - y) // x + 1\n\n",
        "test_list": [
            "assert find_max_val(15, 10, 5) == 15",
            "assert find_max_val(187, 10, 5) == 185",
            "assert find_max_val(16, 11, 1) == 12"
        ],
        "answer_list": [
            "\t",
            "#",
            " Your",
            " code",
            " goes",
            " here",
            "\n",
            "\t",
            "return",
            " (",
            "n",
            " -",
            " y",
            ")",
            " //",
            " x",
            " +",
            " ",
            "1",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 664,
        "prompt": "Write a python function to find the average of even numbers till a given even number.\n\ndef average_Even(n) : \n",
        "answer": "def average_Even(n) : \n\tsum = 0\n\tfor i in range(0, n, 2) : \n\t\tsum = sum + i\n\treturn sum/n\n\n",
        "test_list": [
            "assert average_Even(2) == 2",
            "assert average_Even(4) == 3",
            "assert average_Even(100) == 51"
        ],
        "answer_list": [
            "\t",
            "sum",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "0",
            ",",
            " n",
            ",",
            " ",
            "2",
            ")",
            " :",
            " \n\t",
            "\t",
            "sum",
            " =",
            " sum",
            " +",
            " i",
            "\n",
            "\t",
            "return",
            " sum",
            "/",
            "n",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 665,
        "prompt": "Write a python function to shift first element to the end of given list.\n\ndef move_last(num_list):\n",
        "answer": "def move_last(num_list):\n\tnum_list.append(num_list.pop(0))\n\treturn num_list\n\n",
        "test_list": [
            "assert move_last([1,2,3,4]) == [2,3,4,1]",
            "assert move_last([2,3,4,1,5,0]) == [3,4,1,5,0,2]",
            "assert move_last([5,4,3,2,1]) == [4,3,2,1,5]"
        ],
        "answer_list": [
            "\t",
            "num",
            "_",
            "list",
            ".",
            "append",
            "(",
            "num",
            "_",
            "list",
            ".",
            "pop",
            "(",
            "0",
            "))",
            "\n",
            "\t",
            "return",
            " num",
            "_",
            "list",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 666,
        "prompt": "Write a python function to count occurrence of a character in a string.\n\ndef count_char(string,char):\n",
        "answer": "def count_char(string,char):\n\tcount = 0\n\tfor i in string:\n\t\tif i == char:\n\t\t\tcount += 1\n\treturn count\n\n",
        "test_list": [
            "assert count_char(\"Python\",'o')==1",
            "assert count_char(\"little\",'t')==2",
            "assert count_char(\"assert\",'s')==2"
        ],
        "answer_list": [
            "\t",
            "count",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " string",
            ":",
            "\n\t",
            "\t",
            "if",
            " i",
            " ==",
            " char",
            ":",
            "\n\t\t",
            "\t",
            "count",
            " +=",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " count",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 667,
        "prompt": "Write a python function to count number of vowels in the string.\n\ndef Check_Vow(string, vowels): \n",
        "answer": "def Check_Vow(string, vowels): \n\tcount = 0\n\tfor i in string:\n\t\tif i in vowels:\n\t\t\tcount += 1\n\treturn count\n\n",
        "test_list": [
            "assert Check_Vow('corner','AaEeIiOoUu') == 2",
            "assert Check_Vow('valid','AaEeIiOoUu') == 2",
            "assert Check_Vow('true','AaEeIiOoUu') ==2"
        ],
        "answer_list": [
            "\t",
            "count",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " string",
            ":",
            "\n\t",
            "\t",
            "if",
            " i",
            " in",
            " v",
            "ow",
            "els",
            ":",
            "\n\t\t",
            "\t",
            "count",
            " +=",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " count",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 668,
        "prompt": "Write a python function to replace multiple occurence of character by single.\n\ndef replace(string, char): \n",
        "answer": "def replace(string, char): \n\treturn string.replace(char, \"\")\n\n",
        "test_list": [
            "assert replace('peep','e') == 'pep'",
            "assert replace('Greek','e') == 'Grek'",
            "assert replace('Moon','o') == 'Mon'"
        ],
        "answer_list": [
            "\t",
            "return",
            " string",
            ".",
            "replace",
            "(",
            "char",
            ",",
            " \"\")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 669,
        "prompt": "Write a python function to check whether the given ip address is valid or not using regex.\n\ndef check_IP(Ip): \n",
        "answer": "def check_IP(Ip): \n\tif re.match(r'^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$', Ip): \n\t\treturn True\n\telse: \n\t\treturn False\n\n",
        "test_list": [
            "assert check_IP(\"192.168.0.1\") == 'Valid IP address'",
            "assert check_IP(\"110.234.52.124\") == 'Valid IP address'",
            "assert check_IP(\"366.1.2.2\") == 'Invalid IP address'"
        ],
        "answer_list": [
            "\t",
            "if",
            " re",
            ".",
            "match",
            "(",
            "r",
            "'^",
            "(([",
            "0",
            "-",
            "9",
            "]",
            "|[",
            "1",
            "-",
            "9",
            "][",
            "0",
            "-",
            "9",
            "]|",
            "1",
            "[",
            "0",
            "-",
            "9",
            "]{",
            "2",
            "}|",
            "2",
            "[",
            "0",
            "-",
            "4",
            "][",
            "0",
            "-",
            "9",
            "]|",
            "2",
            "5",
            "[",
            "0",
            "-",
            "5",
            "])",
            "\\.",
            "){",
            "3",
            "}",
            "([",
            "0",
            "-",
            "9",
            "]",
            "|[",
            "1",
            "-",
            "9",
            "][",
            "0",
            "-",
            "9",
            "]|",
            "1",
            "[",
            "0",
            "-",
            "9",
            "]{",
            "2",
            "}|",
            "2",
            "[",
            "0",
            "-",
            "4",
            "][",
            "0",
            "-",
            "9",
            "]|",
            "2",
            "5",
            "[",
            "0",
            "-",
            "5",
            "])",
            "$',",
            " Ip",
            "):",
            " \n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "else",
            ":",
            " \n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 670,
        "prompt": "Write a python function to check whether a sequence of numbers has a decreasing trend or not.\n\ndef decreasing_trend(nums):\n",
        "answer": "def decreasing_trend(nums):\n\tif len(nums) < 3:\n\t\treturn False\n\tfor i in range(len(nums)-1):\n\t\tif nums[i] > nums[i+1]:\n\t\t\treturn True\n\treturn False\n\n",
        "test_list": [
            "assert decreasing_trend([-4,-3,-2,-1]) == True",
            "assert decreasing_trend([1,2,3]) == True",
            "assert decreasing_trend([3,2,1]) == False"
        ],
        "answer_list": [
            "\t",
            "if",
            " len",
            "(",
            "nums",
            ")",
            " <",
            " ",
            "3",
            ":",
            "\n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "len",
            "(",
            "nums",
            ")-",
            "1",
            "):",
            "\n\t",
            "\t",
            "if",
            " nums",
            "[",
            "i",
            "]",
            " >",
            " nums",
            "[",
            "i",
            "+",
            "1",
            "]:",
            "\n\t\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "return",
            " False",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 671,
        "prompt": "Write a python function to set the right most unset bit.\n\ndef set_Right_most_Unset_Bit(n): \n",
        "answer": "def set_Right_most_Unset_Bit(n): \n\treturn n | (n + 1)\n\n",
        "test_list": [
            "assert set_Right_most_Unset_Bit(21) == 23",
            "assert set_Right_most_Unset_Bit(11) == 15",
            "assert set_Right_most_Unset_Bit(15) == 15"
        ],
        "answer_list": [
            "\t",
            "return",
            " n",
            " |",
            " (",
            "n",
            " +",
            " ",
            "1",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 672,
        "prompt": "Write a python function to find maximum of three numbers.\n\ndef max_of_three(num1,num2,num3): \n",
        "answer": "def max_of_three(num1,num2,num3): \n\tif num1 > num2 and num1 > num3: \n\t\treturn num1 \n\telif num2 > num1 and num2 > num3: \n\t\treturn num2 \n\telse: \n\t\treturn num3 \n\n",
        "test_list": [
            "assert max_of_three(10,20,30)==30",
            "assert max_of_three(55,47,39)==55",
            "assert max_of_three(10,49,30)==49"
        ],
        "answer_list": [
            "\t",
            "if",
            " num",
            "1",
            " >",
            " num",
            "2",
            " and",
            " num",
            "1",
            " >",
            " num",
            "3",
            ":",
            " \n\t",
            "\t",
            "return",
            " num",
            "1",
            " \n",
            "\t",
            "elif",
            " num",
            "2",
            " >",
            " num",
            "1",
            " and",
            " num",
            "2",
            " >",
            " num",
            "3",
            ":",
            " \n\t",
            "\t",
            "return",
            " num",
            "2",
            " \n",
            "\t",
            "else",
            ":",
            " \n\t",
            "\t",
            "return",
            " num",
            "3",
            " \n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 673,
        "prompt": "Write a python function to convert a list of multiple integers into a single integer.\n\ndef convert(list): \n",
        "answer": "def convert(list): \n\treturn int(\"\".join(map(str, list)))\n\n",
        "test_list": [
            "assert convert([1,2,3]) == 123",
            "assert convert([4,5,6]) == 456",
            "assert convert([7,8,9]) == 789"
        ],
        "answer_list": [
            "\t",
            "return",
            " int",
            "(\"",
            "\".",
            "join",
            "(",
            "map",
            "(",
            "str",
            ",",
            " list",
            ")))",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 674,
        "prompt": "Write a python function to remove duplicate words from a given string using collections module.\n\ndef remove_duplicate(string):\n",
        "answer": "def remove_duplicate(string):\n\treturn''.join(list(set(string.split())))\n\n",
        "test_list": [
            "assert remove_duplicate(\"Python Exercises Practice Solution Exercises\")==(\"Python Exercises Practice Solution\")",
            "assert remove_duplicate(\"Python Exercises Practice Solution Python\")==(\"Python Exercises Practice Solution\")",
            "assert remove_duplicate(\"Python Exercises Practice Solution Practice\")==(\"Python Exercises Practice Solution\")"
        ],
        "answer_list": [
            "\t",
            "return",
            " '",
            " '.",
            "join",
            "(",
            "list",
            "(",
            "set",
            "(",
            "string",
            ".",
            "split",
            "())))",
            "\n"
        ]
    },
    {
        "task_id": 675,
        "prompt": "Write a python function to add two integers. however, if the sum is between the given range it will return 20.\n\ndef sum_nums(x, y,m,n):\n",
        "answer": "def sum_nums(x, y,m,n):\n\tif x+y in range(m,n+1):\n\t\treturn 20\n\telse:\n\t\treturn x+y\n\n",
        "test_list": [
            "assert sum_nums(2,10,11,20)==20",
            "assert sum_nums(15,17,1,10)==32",
            "assert sum_nums(10,15,5,30)==20"
        ],
        "answer_list": [
            "\t",
            "if",
            " x",
            "+",
            "y",
            " in",
            " range",
            "(",
            "m",
            ",",
            "n",
            "+",
            "1",
            "):",
            "\n\t",
            "\t",
            "return",
            " ",
            "2",
            "0",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "return",
            " x",
            "+",
            "y",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 676,
        "prompt": "Write a python function to remove everything except alphanumeric characters from the given string by using regex.\n\ndef remove_extra_char(text1):\n",
        "answer": "def remove_extra_char(text1):\n\treturn re.sub(r'[^a-zA-Z0-9]+', '', text1)\n\n",
        "test_list": [
            "assert remove_extra_char('**//Google Android// - 12. ') == 'GoogleAndroid12'",
            "assert remove_extra_char('****//Google Flutter//*** - 36. ') == 'GoogleFlutter36'",
            "assert remove_extra_char('**//Google Firebase// - 478. ') == 'GoogleFirebase478'"
        ],
        "answer_list": [
            "\t",
            "return",
            " re",
            ".",
            "sub",
            "(",
            "r",
            "'",
            "[^",
            "a",
            "-",
            "zA",
            "-",
            "Z",
            "0",
            "-",
            "9",
            "]+",
            "',",
            " '',",
            " text",
            "1",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 677,
        "prompt": "Write a python function to check if the triangle is valid or not.\n\ndef validity_triangle(a,b,c):\n",
        "answer": "def validity_triangle(a,b,c):\n\tif a+b>c and a+c>b and b+c>a:\n\t\treturn True\n\telse:\n\t\treturn False\n\n",
        "test_list": [
            "assert validity_triangle(60,50,90)==False",
            "assert validity_triangle(45,75,60)==True",
            "assert validity_triangle(30,50,100)==True"
        ],
        "answer_list": [
            "\t",
            "if",
            " a",
            "+",
            "b",
            ">",
            "c",
            " and",
            " a",
            "+",
            "c",
            ">",
            "b",
            " and",
            " b",
            "+",
            "c",
            ">",
            "a",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 678,
        "prompt": "Write a python function to remove spaces from a given string.\n\ndef remove_spaces(str1):\n",
        "answer": "def remove_spaces(str1):\n\treturn str1.replace(\" \", \"\")\n\n",
        "test_list": [
            "assert remove_spaces(\"a b c\") == \"abc\"",
            "assert remove_spaces(\"1 2 3\") == \"123\"",
            "assert remove_spaces(\" b c\") == \"bc\""
        ],
        "answer_list": [
            "\t",
            "return",
            " str",
            "1",
            ".",
            "replace",
            "(\"",
            " \",",
            " \"\")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 679,
        "prompt": "Write a python function to access dictionary key\u2019s element by index.\n\ndef access_key(ditionary,key):\n",
        "answer": "def access_key(ditionary,key):\n\treturn ditionary[key]\n\n",
        "test_list": [
            "assert access_key({'physics': 80, 'math': 90, 'chemistry': 86},0)== 'physics'",
            "assert access_key({'python':10, 'java': 20, 'C++':30},2)== 'C++'",
            "assert access_key({'program':15,'computer':45},1)== 'computer'"
        ],
        "answer_list": [
            "\t",
            "return",
            " d",
            "ition",
            "ary",
            "[",
            "key",
            "]",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 680,
        "prompt": "Write a python function to check whether a sequence of numbers has an increasing trend or not.\n\ndef increasing_trend(nums):\n",
        "answer": "def increasing_trend(nums):\n\tif len(nums) < 3:\n\t\treturn False\n\tfor i in range(len(nums) - 2):\n\t\tif nums[i] < nums[i + 1] and nums[i + 1] > nums[i + 2]:\n\t\t\treturn True\n\treturn False\n\n",
        "test_list": [
            "assert increasing_trend([1,2,3,4]) == True",
            "assert increasing_trend([4,3,2,1]) == False",
            "assert increasing_trend([0,1,4,9]) == True"
        ],
        "answer_list": [
            "\t",
            "if",
            " len",
            "(",
            "nums",
            ")",
            " <",
            " ",
            "3",
            ":",
            "\n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "len",
            "(",
            "nums",
            ")",
            " -",
            " ",
            "2",
            "):",
            "\n\t",
            "\t",
            "if",
            " nums",
            "[",
            "i",
            "]",
            " <",
            " nums",
            "[",
            "i",
            " +",
            " ",
            "1",
            "]",
            " and",
            " nums",
            "[",
            "i",
            " +",
            " ",
            "1",
            "]",
            " >",
            " nums",
            "[",
            "i",
            " +",
            " ",
            "2",
            "]:",
            "\n\t\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "return",
            " False",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 681,
        "prompt": "Write a python function to find the smallest prime divisor of a number.\n\ndef smallest_Divisor(n): \n",
        "answer": "def smallest_Divisor(n): \n\tdivisor = 2\n\twhile n % divisor!= 0:\n\t\tdivisor += 1\n\treturn divisor\n\n",
        "test_list": [
            "assert smallest_Divisor(10) == 2",
            "assert smallest_Divisor(25) == 5",
            "assert smallest_Divisor(31) == 31"
        ],
        "answer_list": [
            "\t",
            "div",
            "isor",
            " =",
            " ",
            "2",
            "\n",
            "\t",
            "while",
            " n",
            " %",
            " divisor",
            "!=",
            " ",
            "0",
            ":",
            "\n\t",
            "\t",
            "div",
            "isor",
            " +=",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " divisor",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 682,
        "prompt": "Write a python function to multiply two lists using map and lambda function.\n\ndef mul_list(nums1,nums2):\n",
        "answer": "def mul_list(nums1,nums2):\n\treturn list(map(lambda x,y:x*y,nums1,nums2))\n\n",
        "test_list": [
            "assert mul_list([1, 2, 3],[4,5,6])==[4,10,18]",
            "assert mul_list([1,2],[3,4])==[3,8]",
            "assert mul_list([90,120],[50,70])==[4500,8400]"
        ],
        "answer_list": [
            "\t",
            "return",
            " list",
            "(",
            "map",
            "(",
            "lambda",
            " x",
            ",",
            "y",
            ":",
            "x",
            "*",
            "y",
            ",",
            "nums",
            "1",
            ",",
            "nums",
            "2",
            "))",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 683,
        "prompt": "Write a python function to check whether the given number can be represented by sum of two squares or not.\n\ndef sum_Square(n) : \n",
        "answer": "def sum_Square(n) : \n\tif n == 0 : \n\t\treturn True\n\telse : \n\t\tx = int(math.sqrt(n))\n\t\tif x*x == n : \n\t\t\treturn True\n\t\telse : \n\t\t\treturn False\n\n",
        "test_list": [
            "assert sum_Square(25) == True",
            "assert sum_Square(24) == False",
            "assert sum_Square(17) == True"
        ],
        "answer_list": [
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "0",
            " :",
            " \n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "else",
            " :",
            " \n\t",
            "\t",
            "x",
            " =",
            " int",
            "(",
            "math",
            ".",
            "sqrt",
            "(",
            "n",
            "))",
            "\n\t",
            "\t",
            "if",
            " x",
            "*",
            "x",
            " ==",
            " n",
            " :",
            " \n\t\t",
            "\t",
            "return",
            " True",
            "\n\t",
            "\t",
            "else",
            " :",
            " \n\t\t",
            "\t",
            "return",
            " False",
            "\n",
            "\n",
            "n"
        ]
    },
    {
        "task_id": 684,
        "prompt": "Write a python function to count occurences of a character in a repeated string.\n\ndef count_Char(str,x): \n",
        "answer": "def count_Char(str,x): \n\tcount = 0\n\tfor i in str: \n\t\tif i == x: \n\t\t\tcount += 1\n\treturn count\n\n",
        "test_list": [
            "assert count_Char(\"abcac\",'a') == 4",
            "assert count_Char(\"abca\",'c') == 2",
            "assert count_Char(\"aba\",'a') == 7"
        ],
        "answer_list": [
            "\t",
            "count",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " str",
            ":",
            " \n\t",
            "\t",
            "if",
            " i",
            " ==",
            " x",
            ":",
            " \n\t\t",
            "\t",
            "count",
            " +=",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " count",
            "\n",
            "\n",
            "str"
        ]
    },
    {
        "task_id": 685,
        "prompt": "Write a python function to find sum of prime numbers between 1 to n.\n\ndef sum_Of_Primes(n): \n",
        "answer": "def sum_Of_Primes(n): \n\tsum = 0\n\tfor i in range(2, n+1): \n\t\tif isPrime(i): \n\t\t\tsum += i \n\treturn sum \n\n",
        "test_list": [
            "assert sum_Of_Primes(10) == 17",
            "assert sum_Of_Primes(20) == 77",
            "assert sum_Of_Primes(5) == 10"
        ],
        "answer_list": [
            "\t",
            "sum",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "2",
            ",",
            " n",
            "+",
            "1",
            "):",
            " \n\t",
            "\t",
            "if",
            " is",
            "Prime",
            "(",
            "i",
            "):",
            " \n\t\t",
            "\t",
            "sum",
            " +=",
            " i",
            " \n",
            "\t",
            "return",
            " sum",
            " \n",
            "\n",
            "def"
        ]
    },
    {
        "task_id": 686,
        "prompt": "Write a python function to find the frequency of each element in the given list.\n\ndef freq_element(test_tup):\n",
        "answer": "def freq_element(test_tup):\n\tfreq_dict = {}\n\tfor i in test_tup:\n\t\tif i in freq_dict:\n\t\t\tfreq_dict[i] += 1\n\t\telse:\n\t\t\tfreq_dict[i] = 1\n\treturn freq_dict\n\n",
        "test_list": [
            "assert freq_element((4, 5, 4, 5, 6, 6, 5, 5, 4) ) == '{4: 3, 5: 4, 6: 2}'",
            "assert freq_element((7, 8, 8, 9, 4, 7, 6, 5, 4) ) == '{7: 2, 8: 2, 9: 1, 4: 2, 6: 1, 5: 1}'",
            "assert freq_element((1, 4, 3, 1, 4, 5, 2, 6, 2, 7) ) == '{1: 2, 4: 2, 3: 1, 5: 1, 2: 2, 6: 1, 7: 1}'"
        ],
        "answer_list": [
            "\t",
            "freq",
            "_",
            "dict",
            " =",
            " {}",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " test",
            "_",
            "tup",
            ":",
            "\n\t",
            "\t",
            "if",
            " i",
            " in",
            " freq",
            "_",
            "dict",
            ":",
            "\n\t\t",
            "\t",
            "freq",
            "_",
            "dict",
            "[",
            "i",
            "]",
            " +=",
            " ",
            "1",
            "\n\t",
            "\t",
            "else",
            ":",
            "\n\t\t",
            "\t",
            "freq",
            "_",
            "dict",
            "[",
            "i",
            "]",
            " =",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " freq",
            "_",
            "dict",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 687,
        "prompt": "Write a python function to find the greatest common divisor (gcd) of two integers by using recursion.\n\ndef recur_gcd(a, b):\n",
        "answer": "def recur_gcd(a, b):\n\tif a == 0:\n\t\treturn b\n\treturn recur_gcd(b % a, a)\n\n",
        "test_list": [
            "assert recur_gcd(12,14) == 2",
            "assert recur_gcd(13,17) == 1",
            "assert recur_gcd(9, 3) == 3"
        ],
        "answer_list": [
            "\t",
            "if",
            " a",
            " ==",
            " ",
            "0",
            ":",
            "\n\t",
            "\t",
            "return",
            " b",
            "\n",
            "\t",
            "return",
            " recur",
            "_",
            "gcd",
            "(",
            "b",
            " %",
            " a",
            ",",
            " a",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 688,
        "prompt": "Write a python function to get the length of a complex number.\n\ndef len_complex(a,b):\n",
        "answer": "def len_complex(a,b):\n\treturn math.sqrt(a**2 + b**2)\n\n",
        "test_list": [
            "assert len_complex(3,4)==5.0",
            "assert len_complex(9,10)==13.45362404707371",
            "assert len_complex(7,9)==11.40175425099138"
        ],
        "answer_list": [
            "\t",
            "return",
            " math",
            ".",
            "sqrt",
            "(",
            "a",
            "**",
            "2",
            " +",
            " b",
            "**",
            "2",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 689,
        "prompt": "## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block\n\ndef min_jumps(arr, n):\n",
        "answer": "def min_jumps(arr, n):\n\t# code here\n\tif n == 1:\n\t\treturn 0\n\tif arr[0] == 0:\n\t\treturn -1\n\tif arr[0] >= n - 1:\n\t\treturn 1\n\tjumps = [0] * n\n\tjumps[0] = 1\n\tfor i in range(1, n):\n\t\tif i <= arr[i]:\n\t\t\tjumps[i] = jumps[i - 1] + 1\n\t\telse:\n\t\t\tjumps[i] = 1\n\t\t\tfor j in range(i - arr[i], i):\n\t\t\t\tif jumps[j]!= 0 and jumps[j] + 1 < jumps[i]:\n\t\t\t\t\tjumps[i] = jumps[j] + 1\n\tif jumps[n - 1] == 0:\n\t\treturn -1\n\treturn jumps[n - 1]\n\n",
        "test_list": [
            "assert min_jumps([1, 3, 6, 1, 0, 9], 6) == 3",
            "assert min_jumps([1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9], 11) == 3",
            "assert min_jumps([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 11) == 10"
        ],
        "answer_list": [
            "\t",
            "#",
            " code",
            " here",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "1",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "0",
            "\n",
            "\t",
            "if",
            " arr",
            "[",
            "0",
            "]",
            " ==",
            " ",
            "0",
            ":",
            "\n\t",
            "\t",
            "return",
            " -",
            "1",
            "\n",
            "\t",
            "if",
            " arr",
            "[",
            "0",
            "]",
            " >=",
            " n",
            " -",
            " ",
            "1",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "\n",
            "\t",
            "jump",
            "s",
            " =",
            " [",
            "0",
            "]",
            " *",
            " n",
            "\n",
            "\t",
            "jump",
            "s",
            "[",
            "0",
            "]",
            " =",
            " ",
            "1",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "1",
            ",",
            " n",
            "):",
            "\n\t",
            "\t",
            "if",
            " i",
            " <=",
            " arr",
            "[",
            "i",
            "]:",
            "\n\t\t",
            "\t",
            "jump",
            "s",
            "[",
            "i",
            "]",
            " =",
            " jumps",
            "[",
            "i",
            " -",
            " ",
            "1",
            "]",
            " +",
            " ",
            "1",
            "\n\t",
            "\t",
            "else",
            ":",
            "\n\t\t",
            "\t",
            "jump",
            "s",
            "[",
            "i",
            "]",
            " =",
            " ",
            "1",
            "\n\t\t",
            "\t",
            "for",
            " j",
            " in",
            " range",
            "(",
            "i",
            " -",
            " arr",
            "[",
            "i",
            "],",
            " i",
            "):",
            "\n\t\t\t",
            "\t",
            "if",
            " jumps",
            "[",
            "j",
            "]",
            "!=",
            " ",
            "0",
            " and",
            " jumps",
            "[",
            "j",
            "]",
            " +",
            " ",
            "1",
            " <",
            " jumps",
            "[",
            "i",
            "]:",
            "\n\t\t\t\t",
            "\t",
            "jump",
            "s",
            "[",
            "i",
            "]",
            " =",
            " jumps",
            "[",
            "j",
            "]",
            " +",
            " ",
            "1",
            "\n",
            "\t",
            "if",
            " jumps",
            "[",
            "n",
            " -",
            " ",
            "1",
            "]",
            " ==",
            " ",
            "0",
            ":",
            "\n\t",
            "\t",
            "return",
            " -",
            "1",
            "\n",
            "\t",
            "return",
            " jumps",
            "[",
            "n",
            " -",
            " ",
            "1",
            "]",
            "\n",
            "\n",
            "#"
        ]
    },
    {
        "task_id": 690,
        "prompt": "Write a python function to multiply consecutive numbers of a given list.\n\ndef mul_consecutive_nums(nums):\n",
        "answer": "def mul_consecutive_nums(nums):\n\tif len(nums) == 0:\n\t\treturn 0\n\telse:\n\t\treturn nums[0] * mul_consecutive_nums(nums[1:])\n\n",
        "test_list": [
            "assert mul_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[1, 3, 12, 16, 20, 30, 42]",
            "assert mul_consecutive_nums([4, 5, 8, 9, 6, 10])==[20, 40, 72, 54, 60]",
            "assert mul_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 6, 12, 20, 30, 42, 56, 72, 90]"
        ],
        "answer_list": [
            "\t",
            "if",
            " len",
            "(",
            "nums",
            ")",
            " ==",
            " ",
            "0",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "0",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "return",
            " nums",
            "[",
            "0",
            "]",
            " *",
            " mul",
            "_",
            "con",
            "secutive",
            "_",
            "nums",
            "(",
            "nums",
            "[",
            "1",
            ":])",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 691,
        "prompt": "Write a python function to group the 1st elements on the basis of 2nd elements in the given tuple list.\n\ndef group_element(test_list):\n",
        "answer": "def group_element(test_list):\n\tresult = {}\n\tfor i in test_list:\n\t\tif i[1] in result:\n\t\t\tresult[i[1]].append(i[0])\n\t\telse:\n\t\t\tresult[i[1]] = [i[0]]\n\treturn result\n\n",
        "test_list": [
            "assert group_element([(6, 5), (2, 7), (2, 5), (8, 7), (9, 8), (3, 7)]) == {5: [6, 2], 7: [2, 8, 3], 8: [9]}",
            "assert group_element([(7, 6), (3, 8), (3, 6), (9, 8), (10, 9), (4, 8)]) == {6: [7, 3], 8: [3, 9, 4], 9: [10]}",
            "assert group_element([(8, 7), (4, 9), (4, 7), (10, 9), (11, 10), (5, 9)]) == {7: [8, 4], 9: [4, 10, 5], 10: [11]}"
        ],
        "answer_list": [
            "\t",
            "result",
            " =",
            " {}",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " test",
            "_",
            "list",
            ":",
            "\n\t",
            "\t",
            "if",
            " i",
            "[",
            "1",
            "]",
            " in",
            " result",
            ":",
            "\n\t\t",
            "\t",
            "result",
            "[",
            "i",
            "[",
            "1",
            "]].",
            "append",
            "(",
            "i",
            "[",
            "0",
            "])",
            "\n\t",
            "\t",
            "else",
            ":",
            "\n\t\t",
            "\t",
            "result",
            "[",
            "i",
            "[",
            "1",
            "]]",
            " =",
            " [",
            "i",
            "[",
            "0",
            "]]",
            "\n",
            "\t",
            "return",
            " result",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 692,
        "prompt": "Write a python function to find the last two digits in factorial of a given number.\n\ndef last_Two_Digits(N): \n",
        "answer": "def last_Two_Digits(N): \n\treturn (N % 100)\n\n",
        "test_list": [
            "assert last_Two_Digits(7) == 40",
            "assert last_Two_Digits(5) == 20",
            "assert last_Two_Digits(2) == 2"
        ],
        "answer_list": [
            "\t",
            "return",
            " (",
            "N",
            " %",
            " ",
            "1",
            "0",
            "0",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 693,
        "prompt": "Write a python function to remove multiple spaces in a string by using regex.\n\ndef remove_multiple_spaces(text1):\n",
        "answer": "def remove_multiple_spaces(text1):\n\treturn re.sub(r'\\s+','', text1)\n\n",
        "test_list": [
            "assert remove_multiple_spaces('Google      Assistant') == 'Google Assistant'",
            "assert remove_multiple_spaces('Quad      Core') == 'Quad Core'",
            "assert remove_multiple_spaces('ChromeCast      Built-in') == 'ChromeCast Built-in'"
        ],
        "answer_list": [
            "\t",
            "return",
            " re",
            ".",
            "sub",
            "(",
            "r",
            "'\\",
            "s",
            "+',",
            " '",
            " ',",
            " text",
            "1",
            ")",
            "\n"
        ]
    },
    {
        "task_id": 694,
        "prompt": "Write a python function to extract unique values from the given dictionary values.\n\ndef extract_unique(test_dict):\n",
        "answer": "def extract_unique(test_dict):\n\treturn list(set(test_dict.values()))\n\n",
        "test_list": [
            "assert extract_unique({'msm' : [5, 6, 7, 8],'is' : [10, 11, 7, 5],'best' : [6, 12, 10, 8],'for' : [1, 2, 5]} ) == [1, 2, 5, 6, 7, 8, 10, 11, 12]",
            "assert extract_unique({'Built' : [7, 1, 9, 4],'for' : [11, 21, 36, 14, 9],'ISP' : [4, 1, 21, 39, 47],'TV' : [1, 32, 38]} ) == [1, 4, 7, 9, 11, 14, 21, 32, 36, 38, 39, 47]",
            "assert extract_unique({'F' : [11, 13, 14, 17],'A' : [12, 11, 15, 18],'N' : [19, 21, 15, 36],'G' : [37, 36, 35]}) == [11, 12, 13, 14, 15, 17, 18, 19, 21, 35, 36, 37]"
        ],
        "answer_list": [
            "\t",
            "return",
            " list",
            "(",
            "set",
            "(",
            "test",
            "_",
            "dict",
            ".",
            "values",
            "()))",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 695,
        "prompt": "Write a python function to check if each element of the second tuple is greater than its corresponding index in the first tuple.\n\ndef check_greater(test_tup1, test_tup2):\n",
        "answer": "def check_greater(test_tup1, test_tup2):\n\tfor i in range(len(test_tup2)):\n\t\tif test_tup2[i] > test_tup1[i]:\n\t\t\treturn True\n\treturn False\n\n",
        "test_list": [
            "assert check_greater((10, 4, 5), (13, 5, 18)) == True",
            "assert check_greater((1, 2, 3), (2, 1, 4)) == False",
            "assert check_greater((4, 5, 6), (5, 6, 7)) == True"
        ],
        "answer_list": [
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "len",
            "(",
            "test",
            "_",
            "tup",
            "2",
            ")):",
            "\n\t",
            "\t",
            "if",
            " test",
            "_",
            "tup",
            "2",
            "[",
            "i",
            "]",
            " >",
            " test",
            "_",
            "tup",
            "1",
            "[",
            "i",
            "]:",
            "\n\t\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "return",
            " False",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 696,
        "prompt": "Write a python function to zip two given lists of lists.\n\ndef zip_list(list1,list2):  \n",
        "answer": "def zip_list(list1,list2):  \n\tif len(list1) == len(list2):\n\t\treturn list(zip(list1,list2))\n\telse:\n\t\treturn \"Lists are not of equal length\"\n\n",
        "test_list": [
            "assert zip_list([[1, 3], [5, 7], [9, 11]] ,[[2, 4], [6, 8], [10, 12, 14]] )==[[1, 3, 2, 4], [5, 7, 6, 8], [9, 11, 10, 12, 14]]",
            "assert zip_list([[1, 2], [3, 4], [5, 6]] ,[[7, 8], [9, 10], [11, 12]] )==[[1, 2, 7, 8], [3, 4, 9, 10], [5, 6, 11, 12]]",
            "assert zip_list([['a','b'],['c','d']] , [['e','f'],['g','h']] )==[['a','b','e','f'],['c','d','g','h']]"
        ],
        "answer_list": [
            "\t",
            "if",
            " len",
            "(",
            "list",
            "1",
            ")",
            " ==",
            " len",
            "(",
            "list",
            "2",
            "):",
            "\n\t",
            "\t",
            "return",
            " list",
            "(",
            "zip",
            "(",
            "list",
            "1",
            ",",
            "list",
            "2",
            "))",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "return",
            " \"",
            "Lists",
            " are",
            " not",
            " of",
            " equal",
            " length",
            "\"",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 697,
        "prompt": "Write a python function to find number of even elements in the given list using lambda function.\n\ndef count_even(array_nums):\n",
        "answer": "def count_even(array_nums):\n\treturn len(list(filter(lambda x: x%2==0, array_nums)))\n\n",
        "test_list": [
            "assert count_even([1, 2, 3, 5, 7, 8, 9, 10])==3",
            "assert count_even([10,15,14,13,-18,12,-20])==5",
            "assert count_even([1, 2, 4, 8, 9])==3"
        ],
        "answer_list": [
            "\t",
            "return",
            " len",
            "(",
            "list",
            "(",
            "filter",
            "(",
            "lambda",
            " x",
            ":",
            " x",
            "%",
            "2",
            "==",
            "0",
            ",",
            " array",
            "_",
            "nums",
            ")))",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 698,
        "prompt": "Write a python function to sort dictionary items by tuple product of keys for the given dictionary with tuple keys.\n\ndef sort_dict_item(test_dict):\n",
        "answer": "def sort_dict_item(test_dict):\n\treturn sorted(test_dict.items(), key=lambda x: x[0][0]*x[0][1])\n\n",
        "test_list": [
            "assert sort_dict_item({(5, 6) : 3, (2, 3) : 9, (8, 4): 10, (6, 4): 12} ) == {(2, 3): 9, (6, 4): 12, (5, 6): 3, (8, 4): 10}",
            "assert sort_dict_item({(6, 7) : 4, (3, 4) : 10, (9, 5): 11, (7, 5): 13} ) == {(3, 4): 10, (7, 5): 13, (6, 7): 4, (9, 5): 11}",
            "assert sort_dict_item({(7, 8) : 5, (4, 5) : 11, (10, 6): 12, (8, 6): 14} ) == {(4, 5): 11, (8, 6): 14, (7, 8): 5, (10, 6): 12}"
        ],
        "answer_list": [
            "\t",
            "return",
            " sorted",
            "(",
            "test",
            "_",
            "dict",
            ".",
            "items",
            "(),",
            " key",
            "=",
            "lambda",
            " x",
            ":",
            " x",
            "[",
            "0",
            "][",
            "0",
            "]*",
            "x",
            "[",
            "0",
            "][",
            "1",
            "])",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 699,
        "prompt": "Write a python function to find the minimum number of swaps required to convert one binary string to another.\n\ndef min_Swaps(str1,str2) : \n",
        "answer": "def min_Swaps(str1,str2) : \n\tcount = 0\n\tfor i in range(len(str1)) : \n\t\tif str1[i]!= str2[i] : \n\t\t\tcount += 1\n\treturn count\n\n",
        "test_list": [
            "assert min_Swaps(\"1101\",\"1110\") == 1",
            "assert min_Swaps(\"1111\",\"0100\") == \"Not Possible\"",
            "assert min_Swaps(\"1110000\",\"0001101\") == 3"
        ],
        "answer_list": [
            "\t",
            "count",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "len",
            "(",
            "str",
            "1",
            "))",
            " :",
            " \n\t",
            "\t",
            "if",
            " str",
            "1",
            "[",
            "i",
            "]",
            "!=",
            " str",
            "2",
            "[",
            "i",
            "]",
            " :",
            " \n\t\t",
            "\t",
            "count",
            " +=",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " count",
            "\n",
            "\n",
            "str"
        ]
    },
    {
        "task_id": 700,
        "prompt": "Write a python function to count the number of elements in a list which are within a specific range.\n\ndef count_range_in_list(li, min, max):\n",
        "answer": "def count_range_in_list(li, min, max):\n\tcount = 0\n\tfor i in li:\n\t\tif i >= min and i <= max:\n\t\t\tcount += 1\n\treturn count\n\n",
        "test_list": [
            "assert count_range_in_list([10,20,30,40,40,40,70,80,99],40,100)==6",
            "assert count_range_in_list(['a','b','c','d','e','f'],'a','e')==5",
            "assert count_range_in_list([7,8,9,15,17,19,45],15,20)==3"
        ],
        "answer_list": [
            "\t",
            "count",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " li",
            ":",
            "\n\t",
            "\t",
            "if",
            " i",
            " >=",
            " min",
            " and",
            " i",
            " <=",
            " max",
            ":",
            "\n\t\t",
            "\t",
            "count",
            " +=",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " count",
            "\n",
            "\n",
            "li"
        ]
    },
    {
        "task_id": 701,
        "prompt": "Write a python function to find the equilibrium index of the given array.\n\ndef equilibrium_index(arr):\n",
        "answer": "def equilibrium_index(arr):\n\tsum_left = 0\n\tsum_right = sum(arr)\n\tfor i in range(len(arr)):\n\t\tsum_right -= arr[i]\n\t\tif sum_left == sum_right:\n\t\t\treturn i\n\t\tsum_left += arr[i]\n\treturn -1\n\n",
        "test_list": [
            "assert equilibrium_index([1, 2, 3, 4, 1, 2, 3]) == 3",
            "assert equilibrium_index([-7, 1, 5, 2, -4, 3, 0]) == 3",
            "assert equilibrium_index([1, 2, 3]) == -1"
        ],
        "answer_list": [
            "\t",
            "sum",
            "_",
            "left",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "sum",
            "_",
            "right",
            " =",
            " sum",
            "(",
            "arr",
            ")",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "len",
            "(",
            "arr",
            ")):",
            "\n\t",
            "\t",
            "sum",
            "_",
            "right",
            " -=",
            " arr",
            "[",
            "i",
            "]",
            "\n\t",
            "\t",
            "if",
            " sum",
            "_",
            "left",
            " ==",
            " sum",
            "_",
            "right",
            ":",
            "\n\t\t",
            "\t",
            "return",
            " i",
            "\n\t",
            "\t",
            "sum",
            "_",
            "left",
            " +=",
            " arr",
            "[",
            "i",
            "]",
            "\n",
            "\t",
            "return",
            " -",
            "1",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 702,
        "prompt": "Write a python function to find the minimum number of elements that should be removed such that amax-amin<=k.\n\ndef removals(arr, n, k):\n",
        "answer": "def removals(arr, n, k):\n\tarr.sort()\n\tmax_val = arr[-1]\n\tmin_val = arr[0]\n\tdiff = max_val - min_val\n\tif diff <= k:\n\t\treturn 0\n\telse:\n\t\treturn diff - k\n\n",
        "test_list": [
            "assert removals([1, 3, 4, 9, 10,11, 12, 17, 20], 9, 4) == 5",
            "assert removals([1, 5, 6, 2, 8], 5, 2) == 3",
            "assert removals([1, 2, 3 ,4, 5, 6], 6, 3) == 2"
        ],
        "answer_list": [
            "\t",
            "arr",
            ".",
            "sort",
            "()",
            "\n",
            "\t",
            "max",
            "_",
            "val",
            " =",
            " arr",
            "[-",
            "1",
            "]",
            "\n",
            "\t",
            "min",
            "_",
            "val",
            " =",
            " arr",
            "[",
            "0",
            "]",
            "\n",
            "\t",
            "diff",
            " =",
            " max",
            "_",
            "val",
            " -",
            " min",
            "_",
            "val",
            "\n",
            "\t",
            "if",
            " diff",
            " <=",
            " k",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "0",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "return",
            " diff",
            " -",
            " k",
            "\n",
            "\n",
            "arr"
        ]
    },
    {
        "task_id": 703,
        "prompt": "Write a python function to check whether the given key is present in the dictionary or not.\n\ndef is_key_present(d,x):\n",
        "answer": "def is_key_present(d,x):\n\tif x in d:\n\t\treturn True\n\telse:\n\t\treturn False\n\n",
        "test_list": [
            "assert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},5)==True",
            "assert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},6)==True",
            "assert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},10)==False"
        ],
        "answer_list": [
            "\t",
            "if",
            " x",
            " in",
            " d",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\n",
            "d"
        ]
    },
    {
        "task_id": 704,
        "prompt": "Write a python function to calculate the harmonic sum of n-1.\n\ndef harmonic_sum(n):\n",
        "answer": "def harmonic_sum(n):\n\tsum = 0\n\tfor i in range(1, n+1):\n\t\tsum += 1/i\n\treturn sum\n\n",
        "test_list": [
            "assert harmonic_sum(10)==2.9289682539682538",
            "assert harmonic_sum(4)==2.083333333333333",
            "assert harmonic_sum(7)==2.5928571428571425 "
        ],
        "answer_list": [
            "\t",
            "sum",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "1",
            ",",
            " n",
            "+",
            "1",
            "):",
            "\n\t",
            "\t",
            "sum",
            " +=",
            " ",
            "1",
            "/",
            "i",
            "\n",
            "\t",
            "return",
            " sum",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 705,
        "prompt": "Write a python function to sort a list of lists by length and value.\n\ndef sort_sublists(list1):\n",
        "answer": "def sort_sublists(list1):\n\treturn sorted(list1, key=lambda x: (len(x), x))\n\n",
        "test_list": [
            "assert sort_sublists([[2], [0], [1, 3], [0, 7], [9, 11], [13, 15, 17]])==[[0], [2], [0, 7], [1, 3], [9, 11], [13, 15, 17]]",
            "assert sort_sublists([[1], [2, 3], [4, 5, 6], [7], [10, 11]])==[[1], [7], [2, 3], [10, 11], [4, 5, 6]]",
            "assert sort_sublists([[\"python\"],[\"java\",\"C\",\"C++\"],[\"DBMS\"],[\"SQL\",\"HTML\"]])==[['DBMS'], ['python'], ['SQL', 'HTML'], ['java', 'C', 'C++']]"
        ],
        "answer_list": [
            "\t",
            "return",
            " sorted",
            "(",
            "list",
            "1",
            ",",
            " key",
            "=",
            "lambda",
            " x",
            ":",
            " (",
            "len",
            "(",
            "x",
            "),",
            " x",
            "))",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 706,
        "prompt": "Write a python function to find whether an array is subset of another array.\n\ndef is_subset(arr1, m, arr2, n): \n",
        "answer": "def is_subset(arr1, m, arr2, n): \n\tif m == 0: \n\t\treturn True\n\tif n == 0: \n\t\treturn False\n\tif arr1[m-1] == arr2[n-1]: \n\t\treturn is_subset(arr1, m-1, arr2, n-1) \n\treturn is_subset(arr1, m, arr2, n-1) \n\n",
        "test_list": [
            "assert is_subset([11, 1, 13, 21, 3, 7], 6, [11, 3, 7, 1], 4) == True",
            "assert is_subset([1, 2, 3, 4, 5, 6], 6, [1, 2, 4], 3) == True",
            "assert is_subset([10, 5, 2, 23, 19], 5, [19, 5, 3], 3) == False"
        ],
        "answer_list": [
            "\t",
            "if",
            " m",
            " ==",
            " ",
            "0",
            ":",
            " \n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "0",
            ":",
            " \n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "if",
            " arr",
            "1",
            "[",
            "m",
            "-",
            "1",
            "]",
            " ==",
            " arr",
            "2",
            "[",
            "n",
            "-",
            "1",
            "]:",
            " \n\t",
            "\t",
            "return",
            " is",
            "_",
            "subset",
            "(",
            "arr",
            "1",
            ",",
            " m",
            "-",
            "1",
            ",",
            " arr",
            "2",
            ",",
            " n",
            "-",
            "1",
            ")",
            " \n",
            "\t",
            "return",
            " is",
            "_",
            "subset",
            "(",
            "arr",
            "1",
            ",",
            " m",
            ",",
            " arr",
            "2",
            ",",
            " n",
            "-",
            "1",
            ")",
            " \n",
            "\n",
            "#"
        ]
    },
    {
        "task_id": 707,
        "prompt": "Write a python function to count the total set bits from 1 to n.\n\ndef count_Set_Bits(n) :  \n",
        "answer": "def count_Set_Bits(n) :  \n\tcount = 0\n\twhile (n): \n\t\tcount += n & 1\n\t\tn >>= 1\n\treturn count\n\n",
        "test_list": [
            "assert count_Set_Bits(16) == 33",
            "assert count_Set_Bits(2) == 2",
            "assert count_Set_Bits(14) == 28"
        ],
        "answer_list": [
            "\t",
            "count",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "while",
            " (",
            "n",
            "):",
            " \n\t",
            "\t",
            "count",
            " +=",
            " n",
            " &",
            " ",
            "1",
            "\n\t",
            "\t",
            "n",
            " >>=",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " count",
            "\n",
            "\n",
            "#"
        ]
    },
    {
        "task_id": 708,
        "prompt": "Write a python function to convert a string to a list.\n\ndef Convert(string): \n",
        "answer": "def Convert(string): \n\treturn string.split() \n\n",
        "test_list": [
            "assert Convert('python program') == ['python','program']",
            "assert Convert('Data Analysis') ==['Data','Analysis']",
            "assert Convert('Hadoop Training') == ['Hadoop','Training']"
        ],
        "answer_list": [
            "\t",
            "return",
            " string",
            ".",
            "split",
            "()",
            " \n",
            "\n",
            "#"
        ]
    },
    {
        "task_id": 709,
        "prompt": "Write a python function to count unique keys for each value present in the tuple.\n\ndef get_unique(test_list):\n",
        "answer": "def get_unique(test_list):\n\tunique_list = []\n\tfor i in test_list:\n\t\tif i not in unique_list:\n\t\t\tunique_list.append(i)\n\treturn unique_list\n\n",
        "test_list": [
            "assert get_unique([(3, 4), (1, 2), (2, 4), (8, 2), (7, 2), (8, 1), (9, 1), (8, 4), (10, 4)] ) == '{4: 4, 2: 3, 1: 2}'",
            "assert get_unique([(4, 5), (2, 3), (3, 5), (9, 3), (8, 3), (9, 2), (10, 2), (9, 5), (11, 5)] ) == '{5: 4, 3: 3, 2: 2}'",
            "assert get_unique([(6, 5), (3, 4), (2, 6), (11, 1), (8, 22), (8, 11), (4, 3), (14, 3), (11, 6)] ) == '{5: 1, 4: 1, 6: 2, 1: 1, 22: 1, 11: 1, 3: 2}'"
        ],
        "answer_list": [
            "\t",
            "unique",
            "_",
            "list",
            " =",
            " []",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " test",
            "_",
            "list",
            ":",
            "\n\t",
            "\t",
            "if",
            " i",
            " not",
            " in",
            " unique",
            "_",
            "list",
            ":",
            "\n\t\t",
            "\t",
            "unique",
            "_",
            "list",
            ".",
            "append",
            "(",
            "i",
            ")",
            "\n",
            "\t",
            "return",
            " unique",
            "_",
            "list",
            "\n",
            "\n",
            "def"
        ]
    },
    {
        "task_id": 710,
        "prompt": "Write a python function to access the initial and last data of the given tuple record.\n\ndef front_and_rear(test_tup):\n",
        "answer": "def front_and_rear(test_tup):\n\treturn test_tup[0], test_tup[-1]\n\n",
        "test_list": [
            "assert front_and_rear((10, 4, 5, 6, 7)) == (10, 7)",
            "assert front_and_rear((1, 2, 3, 4, 5)) == (1, 5)",
            "assert front_and_rear((6, 7, 8, 9, 10)) == (6, 10)"
        ],
        "answer_list": [
            "\t",
            "return",
            " test",
            "_",
            "tup",
            "[",
            "0",
            "],",
            " test",
            "_",
            "tup",
            "[-",
            "1",
            "]",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 711,
        "prompt": "Write a python function to check whether the product of digits of a number at even and odd places is equal or not.\n\ndef product_Equal(n): \n",
        "answer": "def product_Equal(n): \n\tn = str(n)\n\todd = 1\n\teven = 1\n\tfor i in range(len(n)):\n\t\tif i%2 == 0:\n\t\t\teven = even * int(n[i])\n\t\telse:\n\t\t\todd = odd * int(n[i])\n\tif even == odd:\n\t\treturn True\n\telse:\n\t\treturn False\n\n",
        "test_list": [
            "assert product_Equal(2841) == True",
            "assert product_Equal(1234) == False",
            "assert product_Equal(1212) == False"
        ],
        "answer_list": [
            "\t",
            "n",
            " =",
            " str",
            "(",
            "n",
            ")",
            "\n",
            "\t",
            "odd",
            " =",
            " ",
            "1",
            "\n",
            "\t",
            "even",
            " =",
            " ",
            "1",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "len",
            "(",
            "n",
            ")):",
            "\n\t",
            "\t",
            "if",
            " i",
            "%",
            "2",
            " ==",
            " ",
            "0",
            ":",
            "\n\t\t",
            "\t",
            "even",
            " =",
            " even",
            " *",
            " int",
            "(",
            "n",
            "[",
            "i",
            "])",
            "\n\t",
            "\t",
            "else",
            ":",
            "\n\t\t",
            "\t",
            "odd",
            " =",
            " odd",
            " *",
            " int",
            "(",
            "n",
            "[",
            "i",
            "])",
            "\n",
            "\t",
            "if",
            " even",
            " ==",
            " odd",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 712,
        "prompt": "Write a python function to remove duplicates from a list of lists.\n\ndef remove_duplicate(list1):\n",
        "answer": "def remove_duplicate(list1):\n\treturn list(set(tuple(i) for i in list1))\n\n",
        "test_list": [
            "assert remove_duplicate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[[10, 20], [30, 56, 25], [33], [40]] ",
            "assert remove_duplicate([\"a\", \"b\", \"a\", \"c\", \"c\"] )==[\"a\", \"b\", \"c\"]",
            "assert remove_duplicate([1, 3, 5, 6, 3, 5, 6, 1] )==[1, 3, 5, 6]"
        ],
        "answer_list": [
            "\t",
            "return",
            " list",
            "(",
            "set",
            "(",
            "tuple",
            "(",
            "i",
            ")",
            " for",
            " i",
            " in",
            " list",
            "1",
            "))",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 713,
        "prompt": "Write a python function to check if the given tuple contains all valid values or not.\n\ndef check_valid(test_tup):\n",
        "answer": "def check_valid(test_tup):\n\tfor i in test_tup:\n\t\tif i not in range(1,10):\n\t\t\treturn False\n\treturn True\n\n",
        "test_list": [
            "assert check_valid((True, True, True, True) ) == True",
            "assert check_valid((True, False, True, True) ) == False",
            "assert check_valid((True, True, True, True) ) == True"
        ],
        "answer_list": [
            "\t",
            "for",
            " i",
            " in",
            " test",
            "_",
            "tup",
            ":",
            "\n\t",
            "\t",
            "if",
            " i",
            " not",
            " in",
            " range",
            "(",
            "1",
            ",",
            "1",
            "0",
            "):",
            "\n\t\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "return",
            " True",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 714,
        "prompt": "Write a python function to count the number of distinct power of prime factor of given number.\n\ndef count_Fac(n):  \n",
        "answer": "def count_Fac(n):  \n\tcount = 0\n\twhile n % 2 == 0: \n\t\tcount += 1\n\t\tn = n / 2\n\tfor i in range(3,int(math.sqrt(n))+1,2): \n\t\twhile n % i== 0: \n\t\t\tcount += 1\n\t\t\tn = n / i \n\tif n > 2: \n\t\tcount += 1\n\treturn count\n\n",
        "test_list": [
            "assert count_Fac(24) == 3",
            "assert count_Fac(12) == 2",
            "assert count_Fac(4) == 1"
        ],
        "answer_list": [
            "\t",
            "count",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "while",
            " n",
            " %",
            " ",
            "2",
            " ==",
            " ",
            "0",
            ":",
            " \n\t",
            "\t",
            "count",
            " +=",
            " ",
            "1",
            "\n\t",
            "\t",
            "n",
            " =",
            " n",
            " /",
            " ",
            "2",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "3",
            ",",
            "int",
            "(",
            "math",
            ".",
            "sqrt",
            "(",
            "n",
            "))+",
            "1",
            ",",
            "2",
            "):",
            " \n\t",
            "\t",
            "while",
            " n",
            " %",
            " i",
            "==",
            " ",
            "0",
            ":",
            " \n\t\t",
            "\t",
            "count",
            " +=",
            " ",
            "1",
            "\n\t\t",
            "\t",
            "n",
            " =",
            " n",
            " /",
            " i",
            " \n",
            "\t",
            "if",
            " n",
            " >",
            " ",
            "2",
            ":",
            " \n\t",
            "\t",
            "count",
            " +=",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " count",
            "\n",
            "\n",
            "def"
        ]
    },
    {
        "task_id": 715,
        "prompt": "Write a python function to convert the given string of integers into a tuple.\n\ndef str_to_tuple(test_str):\n",
        "answer": "def str_to_tuple(test_str):\n\treturn tuple(test_str.split(\",\"))\n\n",
        "test_list": [
            "assert str_to_tuple(\"1, -5, 4, 6, 7\") == (1, -5, 4, 6, 7)",
            "assert str_to_tuple(\"1, 2, 3, 4, 5\") == (1, 2, 3, 4, 5)",
            "assert str_to_tuple(\"4, 6, 9, 11, 13, 14\") == (4, 6, 9, 11, 13, 14)"
        ],
        "answer_list": [
            "\t",
            "return",
            " tuple",
            "(",
            "test",
            "_",
            "str",
            ".",
            "split",
            "(\",\"",
            "))",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 716,
        "prompt": "Write a python function to find the perimeter of a rombus.\n\ndef rombus_perimeter(a):\n",
        "answer": "def rombus_perimeter(a):\n\treturn 4 * a\n\n",
        "test_list": [
            "assert rombus_perimeter(10)==40",
            "assert rombus_perimeter(5)==20",
            "assert rombus_perimeter(4)==16"
        ],
        "answer_list": [
            "\t",
            "return",
            " ",
            "4",
            " *",
            " a",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 717,
        "prompt": "Write a python function to calculate the standard deviation.\n\ndef avg_calc(ls):\n",
        "answer": "def avg_calc(ls):\n\tsum = 0\n\tfor i in ls:\n\t\tsum += i\n\treturn sum/len(ls)\n\n",
        "test_list": [
            "assert sd_calc([4, 2, 5, 8, 6])== 2.23606797749979",
            "assert sd_calc([1,2,3,4,5,6,7])==2.160246899469287",
            "assert sd_calc([5,9,10,15,6,4])==4.070217029430577"
        ],
        "answer_list": [
            "\t",
            "sum",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " ls",
            ":",
            "\n\t",
            "\t",
            "sum",
            " +=",
            " i",
            "\n",
            "\t",
            "return",
            " sum",
            "/",
            "len",
            "(",
            "ls",
            ")",
            "\n",
            "\n",
            "def"
        ]
    },
    {
        "task_id": 718,
        "prompt": "Write a python function to create a list taking alternate elements from another given list.\n\ndef alternate_elements(list1):\n",
        "answer": "def alternate_elements(list1):\n\treturn list1[::2]\n\n",
        "test_list": [
            "assert alternate_elements([\"red\", \"black\", \"white\", \"green\", \"orange\"])==['red', 'white', 'orange']",
            "assert alternate_elements([2, 0, 3, 4, 0, 2, 8, 3, 4, 2])==[2, 3, 0, 8, 4]",
            "assert alternate_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]"
        ],
        "answer_list": [
            "\t",
            "return",
            " list",
            "1",
            "[",
            "::",
            "2",
            "]",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 719,
        "prompt": "Write a python function that matches a string that has an a followed by zero or more b's.\n\ndef text_match(text):\n",
        "answer": "def text_match(text):\n\tif text[0] == 'a' and text.count('b') >= 1:\n\t\treturn True\n\telse:\n\t\treturn False\n\n",
        "test_list": [
            "assert text_match(\"ac\")==('Found a match!')",
            "assert text_match(\"dc\")==('Not matched!')",
            "assert text_match(\"abba\")==('Found a match!')"
        ],
        "answer_list": [
            "\t",
            "if",
            " text",
            "[",
            "0",
            "]",
            " ==",
            " '",
            "a",
            "'",
            " and",
            " text",
            ".",
            "count",
            "('",
            "b",
            "')",
            " >=",
            " ",
            "1",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 720,
        "prompt": "Write a python function to add a dictionary to the tuple.\n\ndef add_dict_to_tuple(test_tup, test_dict):\n",
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n\treturn test_tup + (test_dict,)\n\n",
        "test_list": [
            "assert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})",
            "assert add_dict_to_tuple((1, 2, 3), {\"UTS\" : 2, \"is\" : 3, \"Worst\" : 4} ) == (1, 2, 3, {'UTS': 2, 'is': 3, 'Worst': 4})",
            "assert add_dict_to_tuple((8, 9, 10), {\"POS\" : 3, \"is\" : 4, \"Okay\" : 5} ) == (8, 9, 10, {'POS': 3, 'is': 4, 'Okay': 5})"
        ],
        "answer_list": [
            "\t",
            "return",
            " test",
            "_",
            "tup",
            " +",
            " (",
            "test",
            "_",
            "dict",
            ",)",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 721,
        "prompt": "Write a python function to find a path with the maximum average over all existing paths for the given square matrix of size n*n.\n\ndef maxAverageOfPath(cost, N): \n",
        "answer": "def maxAverageOfPath(cost, N): \n\tdp = [[0 for i in range(N)] for j in range(N)] \n\tfor i in range(N): \n\t\tdp[i][i] = cost[i][i] \n\tfor l in range(2, N + 1): \n\t\tfor i in range(N - l + 1): \n\t\t\tj = i + l - 1\n\t\t\tdp[i][j] = max(dp[i][j - 1], dp[i + 1][j]) + cost[i][j] \n\treturn dp[0][N - 1] \n\n",
        "test_list": [
            "assert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]], 3) == 5.2",
            "assert maxAverageOfPath([[2, 3, 4], [7, 6, 5], [8, 4, 10]], 3) == 6.2",
            "assert maxAverageOfPath([[3, 4, 5], [8, 7, 6], [9, 5, 11]], 3) == 7.2 "
        ],
        "answer_list": [
            "\t",
            "dp",
            " =",
            " [[",
            "0",
            " for",
            " i",
            " in",
            " range",
            "(",
            "N",
            ")]",
            " for",
            " j",
            " in",
            " range",
            "(",
            "N",
            ")]",
            " \n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "N",
            "):",
            " \n\t",
            "\t",
            "dp",
            "[",
            "i",
            "][",
            "i",
            "]",
            " =",
            " cost",
            "[",
            "i",
            "][",
            "i",
            "]",
            " \n",
            "\t",
            "for",
            " l",
            " in",
            " range",
            "(",
            "2",
            ",",
            " N",
            " +",
            " ",
            "1",
            "):",
            " \n\t",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "N",
            " -",
            " l",
            " +",
            " ",
            "1",
            "):",
            " \n\t\t",
            "\t",
            "j",
            " =",
            " i",
            " +",
            " l",
            " -",
            " ",
            "1",
            "\n\t\t",
            "\t",
            "dp",
            "[",
            "i",
            "][",
            "j",
            "]",
            " =",
            " max",
            "(",
            "dp",
            "[",
            "i",
            "][",
            "j",
            " -",
            " ",
            "1",
            "],",
            " dp",
            "[",
            "i",
            " +",
            " ",
            "1",
            "][",
            "j",
            "])",
            " +",
            " cost",
            "[",
            "i",
            "][",
            "j",
            "]",
            " \n",
            "\t",
            "return",
            " dp",
            "[",
            "0",
            "][",
            "N",
            " -",
            " ",
            "1",
            "]",
            " \n",
            "\n",
            "#"
        ]
    },
    {
        "task_id": 722,
        "prompt": "Write a python function to filter the height and width of students which are stored in a dictionary.\n\ndef filter_data(students,h,w):\n",
        "answer": "def filter_data(students,h,w):\n\tfor i in students:\n\t\tif students[i]['h'] == h and students[i]['w'] == w:\n\t\t\tprint(students[i])\n\n",
        "test_list": [
            "assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}",
            "assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.9,67)=={'Cierra Vega': (6.2, 70),'Kierra Gentry': (6.0, 68)}",
            "assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.7,64)=={'Cierra Vega': (6.2, 70),'Alden Cantrell': (5.9, 65),'Kierra Gentry': (6.0, 68),'Pierre Cox': (5.8, 66)}"
        ],
        "answer_list": [
            "\t",
            "for",
            " i",
            " in",
            " students",
            ":",
            "\n\t",
            "\t",
            "if",
            " students",
            "[",
            "i",
            "]['",
            "h",
            "']",
            " ==",
            " h",
            " and",
            " students",
            "[",
            "i",
            "]['",
            "w",
            "']",
            " ==",
            " w",
            ":",
            "\n\t\t",
            "\t",
            "print",
            "(",
            "students",
            "[",
            "i",
            "])",
            "\n",
            "\n",
            "students"
        ]
    },
    {
        "task_id": 723,
        "prompt": "Write a python function to count the same pair in two given lists using map function.\n\ndef count_same_pair(nums1, nums2):\n",
        "answer": "def count_same_pair(nums1, nums2):\n\treturn len(list(map(lambda x: x[0] == x[1], zip(nums1, nums2))))\n\n",
        "test_list": [
            "assert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4",
            "assert count_same_pair([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==11",
            "assert count_same_pair([2, 4, -6, -9, 11, -12, 14, -5, 17],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==1"
        ],
        "answer_list": [
            "\t",
            "return",
            " len",
            "(",
            "list",
            "(",
            "map",
            "(",
            "lambda",
            " x",
            ":",
            " x",
            "[",
            "0",
            "]",
            " ==",
            " x",
            "[",
            "1",
            "],",
            " zip",
            "(",
            "nums",
            "1",
            ",",
            " nums",
            "2",
            "))))",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 724,
        "prompt": "Write a python function to calculate the sum of all digits of the base to the specified power.\n\ndef power_base_sum(base, power):\n",
        "answer": "def power_base_sum(base, power):\n\tsum = 0\n\tfor i in range(1, power + 1):\n\t\tsum += base ** i\n\treturn sum\n\n",
        "test_list": [
            "assert power_base_sum(2,100)==115",
            "assert power_base_sum(8,10)==37",
            "assert power_base_sum(8,15)==62"
        ],
        "answer_list": [
            "\t",
            "sum",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "1",
            ",",
            " power",
            " +",
            " ",
            "1",
            "):",
            "\n\t",
            "\t",
            "sum",
            " +=",
            " base",
            " **",
            " i",
            "\n",
            "\t",
            "return",
            " sum",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 725,
        "prompt": "Write a python function to extract values between quotation marks of the given string by using regex.\n\ndef extract_quotation(text1):\n",
        "answer": "def extract_quotation(text1):\n\timport re\n\tpattern = r'\\\"(.*?)\\\"'\n\tresult = re.findall(pattern, text1)\n\treturn result\n\n",
        "test_list": [
            "assert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']",
            "assert extract_quotation('Cast your \"favorite\" entertainment \"apps\"') == ['favorite', 'apps']",
            "assert extract_quotation('Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support') == ['4k Ultra HD', 'HDR 10']"
        ],
        "answer_list": [
            "\t",
            "import",
            " re",
            "\n",
            "\t",
            "pattern",
            " =",
            " r",
            "'",
            "\\\"",
            "(.*",
            "?)",
            "\\\"",
            "'",
            "\n",
            "\t",
            "result",
            " =",
            " re",
            ".",
            "findall",
            "(",
            "pattern",
            ",",
            " text",
            "1",
            ")",
            "\n",
            "\t",
            "return",
            " result",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 726,
        "prompt": "Write a python function to multiply the adjacent elements of the given tuple.\n\ndef multiply_elements(test_tup):\n",
        "answer": "def multiply_elements(test_tup):\n\treturn test_tup[0]*test_tup[1]\n\n",
        "test_list": [
            "assert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)",
            "assert multiply_elements((2, 4, 5, 6, 7)) == (8, 20, 30, 42)",
            "assert multiply_elements((12, 13, 14, 9, 15)) == (156, 182, 126, 135)"
        ],
        "answer_list": [
            "\t",
            "return",
            " test",
            "_",
            "tup",
            "[",
            "0",
            "]*",
            "test",
            "_",
            "tup",
            "[",
            "1",
            "]",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 727,
        "prompt": "Write a python function to remove all characters except letters and numbers using regex\n\ndef remove_char(S):\n",
        "answer": "def remove_char(S):\n\treturn re.sub(r'[^a-zA-Z0-9]', '', S)\n\n",
        "test_list": [
            "assert remove_char(\"123abcjw:, .@! eiw\") == '123abcjweiw'",
            "assert remove_char(\"Hello1234:, ! Howare33u\") == 'Hello1234Howare33u'",
            "assert remove_char(\"Cool543Triks@:, Make@987Trips\") == 'Cool543TriksMake987Trips' "
        ],
        "answer_list": [
            "\t",
            "return",
            " re",
            ".",
            "sub",
            "(",
            "r",
            "'",
            "[^",
            "a",
            "-",
            "zA",
            "-",
            "Z",
            "0",
            "-",
            "9",
            "]',",
            " '',",
            " S",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 728,
        "prompt": "Write a python function to sum elements in two lists.\n\ndef sum_list(lst1,lst2):\n",
        "answer": "def sum_list(lst1,lst2):\n\tsum = 0\n\tfor i in range(len(lst1)):\n\t\tsum += lst1[i] + lst2[i]\n\treturn sum\n\n",
        "test_list": [
            "assert sum_list([10,20,30],[15,25,35])==[25,45,65]",
            "assert sum_list([1,2,3],[5,6,7])==[6,8,10]",
            "assert sum_list([15,20,30],[15,45,75])==[30,65,105]"
        ],
        "answer_list": [
            "\t",
            "sum",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "len",
            "(",
            "lst",
            "1",
            ")):",
            "\n\t",
            "\t",
            "sum",
            " +=",
            " lst",
            "1",
            "[",
            "i",
            "]",
            " +",
            " lst",
            "2",
            "[",
            "i",
            "]",
            "\n",
            "\t",
            "return",
            " sum",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 729,
        "prompt": "Write a python function to add two lists using map and lambda function.\n\ndef add_list(nums1,nums2):\n",
        "answer": "def add_list(nums1,nums2):\n\treturn list(map(lambda x,y:x+y,nums1,nums2))\n\n",
        "test_list": [
            "assert add_list([1, 2, 3],[4,5,6])==[5, 7, 9]",
            "assert add_list([1,2],[3,4])==[4,6]",
            "assert add_list([10,20],[50,70])==[60,90]"
        ],
        "answer_list": [
            "\t",
            "return",
            " list",
            "(",
            "map",
            "(",
            "lambda",
            " x",
            ",",
            "y",
            ":",
            "x",
            "+",
            "y",
            ",",
            "nums",
            "1",
            ",",
            "nums",
            "2",
            "))",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 730,
        "prompt": "Write a python function to remove consecutive duplicates of a given list.\n\ndef consecutive_duplicates(nums):\n",
        "answer": "def consecutive_duplicates(nums):\n\tnew_list = []\n\tfor i in range(len(nums)):\n\t\tif i == 0:\n\t\t\tnew_list.append(nums[i])\n\t\telif nums[i]!= nums[i-1]:\n\t\t\tnew_list.append(nums[i])\n\treturn new_list\n\n",
        "test_list": [
            "assert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]",
            "assert consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[10, 15, 19, 18, 17, 26, 17, 18, 10]",
            "assert consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==['a', 'b', 'c', 'd']"
        ],
        "answer_list": [
            "\t",
            "new",
            "_",
            "list",
            " =",
            " []",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "len",
            "(",
            "nums",
            ")):",
            "\n\t",
            "\t",
            "if",
            " i",
            " ==",
            " ",
            "0",
            ":",
            "\n\t\t",
            "\t",
            "new",
            "_",
            "list",
            ".",
            "append",
            "(",
            "nums",
            "[",
            "i",
            "])",
            "\n\t",
            "\t",
            "elif",
            " nums",
            "[",
            "i",
            "]",
            "!=",
            " nums",
            "[",
            "i",
            "-",
            "1",
            "]:",
            "\n\t\t",
            "\t",
            "new",
            "_",
            "list",
            ".",
            "append",
            "(",
            "nums",
            "[",
            "i",
            "])",
            "\n",
            "\t",
            "return",
            " new",
            "_",
            "list",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 731,
        "prompt": "Write a python function to find the lateral surface area of a cone.\n\ndef lateralsurface_cone(r,h):\n",
        "answer": "def lateralsurface_cone(r,h):\n\treturn math.pi*r*r + math.pi*r*h\n\n",
        "test_list": [
            "assert lateralsurface_cone(5,12)==204.20352248333654",
            "assert lateralsurface_cone(10,15)==566.3586699569488",
            "assert lateralsurface_cone(19,17)==1521.8090132193388"
        ],
        "answer_list": [
            "\t",
            "return",
            " math",
            ".",
            "pi",
            "*",
            "r",
            "*",
            "r",
            " +",
            " math",
            ".",
            "pi",
            "*",
            "r",
            "*",
            "h",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 732,
        "prompt": "Write a python function to replace all occurrences of spaces, commas, or dots with a colon.\n\ndef replace_specialchar(text):\n",
        "answer": "def replace_specialchar(text):\n\ttext = text.replace(\" \",\":\")\n\ttext = text.replace(\",\":\":\")\n\ttext = text.replace(\".\":\":\")\n\treturn text\n\n",
        "test_list": [
            "assert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')",
            "assert replace_specialchar('a b c,d e f')==('a:b:c:d:e:f')",
            "assert replace_specialchar('ram reshma,ram rahim')==('ram:reshma:ram:rahim')"
        ],
        "answer_list": [
            "\t",
            "text",
            " =",
            " text",
            ".",
            "replace",
            "(\"",
            " \",",
            "\":",
            "\")",
            "\n",
            "\t",
            "text",
            " =",
            " text",
            ".",
            "replace",
            "(\",",
            "\":",
            "\":",
            "\")",
            "\n",
            "\t",
            "text",
            " =",
            " text",
            ".",
            "replace",
            "(\".",
            "\":",
            "\":",
            "\")",
            "\n",
            "\t",
            "return",
            " text",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 733,
        "prompt": "Write a python function to find the index of the first occurrence of a given number in a sorted array.\n\ndef find_first_occurrence(A, x):\n",
        "answer": "def find_first_occurrence(A, x):\n\tlow = 0\n\thigh = len(A) - 1\n\twhile low <= high:\n\t\tmid = (low + high) // 2\n\t\tif A[mid] == x:\n\t\t\tif mid == 0 or A[mid - 1]!= x:\n\t\t\t\treturn mid\n\t\t\thigh = mid - 1\n\t\telif A[mid] > x:\n\t\t\thigh = mid - 1\n\t\telse:\n\t\t\tlow = mid + 1\n\treturn -1\n\n",
        "test_list": [
            "assert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1",
            "assert find_first_occurrence([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 2",
            "assert find_first_occurrence([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6) == 4"
        ],
        "answer_list": [
            "\t",
            "low",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "high",
            " =",
            " len",
            "(",
            "A",
            ")",
            " -",
            " ",
            "1",
            "\n",
            "\t",
            "while",
            " low",
            " <=",
            " high",
            ":",
            "\n\t",
            "\t",
            "mid",
            " =",
            " (",
            "low",
            " +",
            " high",
            ")",
            " //",
            " ",
            "2",
            "\n\t",
            "\t",
            "if",
            " A",
            "[",
            "mid",
            "]",
            " ==",
            " x",
            ":",
            "\n\t\t",
            "\t",
            "if",
            " mid",
            " ==",
            " ",
            "0",
            " or",
            " A",
            "[",
            "mid",
            " -",
            " ",
            "1",
            "]",
            "!=",
            " x",
            ":",
            "\n\t\t\t",
            "\t",
            "return",
            " mid",
            "\n\t\t",
            "\t",
            "high",
            " =",
            " mid",
            " -",
            " ",
            "1",
            "\n\t",
            "\t",
            "elif",
            " A",
            "[",
            "mid",
            "]",
            " >",
            " x",
            ":",
            "\n\t\t",
            "\t",
            "high",
            " =",
            " mid",
            " -",
            " ",
            "1",
            "\n\t",
            "\t",
            "else",
            ":",
            "\n\t\t",
            "\t",
            "low",
            " =",
            " mid",
            " +",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " -",
            "1",
            "\n",
            "\n",
            "A"
        ]
    },
    {
        "task_id": 734,
        "prompt": "Write a python function to find sum of products of all possible subarrays.\n\ndef sum_Of_Subarray_Prod(arr,n):\n",
        "answer": "def sum_Of_Subarray_Prod(arr,n):\n\tsum = 0\n\tfor i in range(n):\n\t\tfor j in range(i,n):\n\t\t\tsum += arr[i]*arr[j]\n\treturn sum\n\n",
        "test_list": [
            "assert sum_Of_Subarray_Prod([1,2,3],3) == 20",
            "assert sum_Of_Subarray_Prod([1,2],2) == 5",
            "assert sum_Of_Subarray_Prod([1,2,3,4],4) == 84"
        ],
        "answer_list": [
            "\t",
            "sum",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "n",
            "):",
            "\n\t",
            "\t",
            "for",
            " j",
            " in",
            " range",
            "(",
            "i",
            ",",
            "n",
            "):",
            "\n\t\t",
            "\t",
            "sum",
            " +=",
            " arr",
            "[",
            "i",
            "]*",
            "arr",
            "[",
            "j",
            "]",
            "\n",
            "\t",
            "return",
            " sum",
            "\n",
            "\n",
            "arr"
        ]
    },
    {
        "task_id": 735,
        "prompt": "Write a python function to toggle bits of the number except the first and the last bit.\n\ndef toggle_middle_bits(n): \n",
        "answer": "def toggle_middle_bits(n): \n\treturn n ^ (n >> 1)\n\n",
        "test_list": [
            "assert toggle_middle_bits(9) == 15",
            "assert toggle_middle_bits(10) == 12",
            "assert toggle_middle_bits(11) == 13"
        ],
        "answer_list": [
            "\t",
            "return",
            " n",
            " ^",
            " (",
            "n",
            " >>",
            " ",
            "1",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 736,
        "prompt": "Write a python function to locate the left insertion point for a specified value in sorted order.\n\ndef left_insertion(a, x):\n",
        "answer": "def left_insertion(a, x):\n\tleft = 0\n\tright = len(a) - 1\n\twhile left <= right:\n\t\tmid = (left + right) // 2\n\t\tif a[mid] < x:\n\t\t\tleft = mid + 1\n\t\telse:\n\t\t\tright = mid - 1\n\treturn left\n\n",
        "test_list": [
            "assert left_insertion([1,2,4,5],6)==4",
            "assert left_insertion([1,2,4,5],3)==2",
            "assert left_insertion([1,2,4,5],7)==4"
        ],
        "answer_list": [
            "\t",
            "left",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "right",
            " =",
            " len",
            "(",
            "a",
            ")",
            " -",
            " ",
            "1",
            "\n",
            "\t",
            "while",
            " left",
            " <=",
            " right",
            ":",
            "\n\t",
            "\t",
            "mid",
            " =",
            " (",
            "left",
            " +",
            " right",
            ")",
            " //",
            " ",
            "2",
            "\n\t",
            "\t",
            "if",
            " a",
            "[",
            "mid",
            "]",
            " <",
            " x",
            ":",
            "\n\t\t",
            "\t",
            "left",
            " =",
            " mid",
            " +",
            " ",
            "1",
            "\n\t",
            "\t",
            "else",
            ":",
            "\n\t\t",
            "\t",
            "right",
            " =",
            " mid",
            " -",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " left",
            "\n",
            "\n",
            "a"
        ]
    },
    {
        "task_id": 737,
        "prompt": "Write a python function to check whether the given string is starting with a vowel or not using regex.\n\ndef check_str(string): \n",
        "answer": "def check_str(string): \n\tif re.search(r'^[aeiouAEIOU]', string): \n\t\treturn True\n\telse: \n\t\treturn False\n\n",
        "test_list": [
            "assert check_str(\"annie\") == 'Valid'",
            "assert check_str(\"dawood\") == 'Invalid'",
            "assert check_str(\"Else\") == 'Valid'"
        ],
        "answer_list": [
            "\t",
            "if",
            " re",
            ".",
            "search",
            "(",
            "r",
            "'^",
            "[",
            "ae",
            "iou",
            "AE",
            "IO",
            "U",
            "]',",
            " string",
            "):",
            " \n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "else",
            ":",
            " \n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 738,
        "prompt": "Write a python function to calculate the geometric sum of n-1.\n\ndef geometric_sum(n):\n",
        "answer": "def geometric_sum(n):\n\tsum = 1\n\tfor i in range(1, n+1):\n\t\tsum *= i\n\treturn sum\n\n",
        "test_list": [
            "assert geometric_sum(7) == 1.9921875",
            "assert geometric_sum(4) == 1.9375",
            "assert geometric_sum(8) == 1.99609375"
        ],
        "answer_list": [
            "\t",
            "sum",
            " =",
            " ",
            "1",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "1",
            ",",
            " n",
            "+",
            "1",
            "):",
            "\n\t",
            "\t",
            "sum",
            " *=",
            " i",
            "\n",
            "\t",
            "return",
            " sum",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 739,
        "prompt": "Write a python function to find the index of smallest triangular number with n digits.\n\ndef find_Index(n): \n",
        "answer": "def find_Index(n): \n\treturn (n*(n+1))//2\n\n",
        "test_list": [
            "assert find_Index(2) == 4",
            "assert find_Index(3) == 14",
            "assert find_Index(4) == 45"
        ],
        "answer_list": [
            "\t",
            "return",
            " (",
            "n",
            "*(",
            "n",
            "+",
            "1",
            "))",
            "//",
            "2",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 740,
        "prompt": "Write a python function to convert the given tuple to a key-value dictionary using adjacent elements.\n\ndef tuple_to_dict(test_tup):\n",
        "answer": "def tuple_to_dict(test_tup):\n\treturn {test_tup[i]: test_tup[i+1] for i in range(0, len(test_tup), 2)}\n\n",
        "test_list": [
            "assert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}",
            "assert tuple_to_dict((1, 2, 3, 4, 5, 6)) == {1: 2, 3: 4, 5: 6}",
            "assert tuple_to_dict((7, 8, 9, 10, 11, 12)) == {7: 8, 9: 10, 11: 12}"
        ],
        "answer_list": [
            "\t",
            "return",
            " {",
            "test",
            "_",
            "tup",
            "[",
            "i",
            "]:",
            " test",
            "_",
            "tup",
            "[",
            "i",
            "+",
            "1",
            "]",
            " for",
            " i",
            " in",
            " range",
            "(",
            "0",
            ",",
            " len",
            "(",
            "test",
            "_",
            "tup",
            "),",
            " ",
            "2",
            ")}",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 741,
        "prompt": "Write a python function to check whether all the characters are same or not.\n\ndef all_Characters_Same(s) :\n",
        "answer": "def all_Characters_Same(s) :\n\tif len(s) == 0 :\n\t\treturn True\n\tif s[0] == s[1] :\n\t\treturn all_Characters_Same(s[1:])\n\telse :\n\t\treturn False\n\n",
        "test_list": [
            "assert all_Characters_Same(\"python\") == False",
            "assert all_Characters_Same(\"aaa\") == True",
            "assert all_Characters_Same(\"data\") == False"
        ],
        "answer_list": [
            "\t",
            "if",
            " len",
            "(",
            "s",
            ")",
            " ==",
            " ",
            "0",
            " :",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " s",
            "[",
            "0",
            "]",
            " ==",
            " s",
            "[",
            "1",
            "]",
            " :",
            "\n\t",
            "\t",
            "return",
            " all",
            "_",
            "Characters",
            "_",
            "Same",
            "(",
            "s",
            "[",
            "1",
            ":])",
            "\n",
            "\t",
            "else",
            " :",
            "\n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 742,
        "prompt": "Write a python function to caluclate the area of a tetrahedron.\n\ndef area_tetrahedron(side):\n",
        "answer": "def area_tetrahedron(side):\n\treturn (1/3)*side**2*math.sqrt(3)\n\n",
        "test_list": [
            "assert area_tetrahedron(3)==15.588457268119894",
            "assert area_tetrahedron(20)==692.8203230275509",
            "assert area_tetrahedron(10)==173.20508075688772"
        ],
        "answer_list": [
            "\t",
            "return",
            " (",
            "1",
            "/",
            "3",
            ")*",
            "side",
            "**",
            "2",
            "*",
            "math",
            ".",
            "sqrt",
            "(",
            "3",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 743,
        "prompt": "Write a python function to rotate a given list by specified number of items to the right direction.\n\ndef rotate_right(list1,m,n):\n",
        "answer": "def rotate_right(list1,m,n):\n\tfor i in range(m):\n\t\ttemp=list1[n-1]\n\t\tfor j in range(n-1,0,-1):\n\t\t\tlist1[j]=list1[j-1]\n\t\tlist1[0]=temp\n\treturn list1\n\n",
        "test_list": [
            "assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[8, 9, 10, 1, 2, 3, 4, 5, 6]",
            "assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]",
            "assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8]"
        ],
        "answer_list": [
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "m",
            "):",
            "\n\t",
            "\t",
            "temp",
            "=",
            "list",
            "1",
            "[",
            "n",
            "-",
            "1",
            "]",
            "\n\t",
            "\t",
            "for",
            " j",
            " in",
            " range",
            "(",
            "n",
            "-",
            "1",
            ",",
            "0",
            ",-",
            "1",
            "):",
            "\n\t\t",
            "\t",
            "list",
            "1",
            "[",
            "j",
            "]=",
            "list",
            "1",
            "[",
            "j",
            "-",
            "1",
            "]",
            "\n\t",
            "\t",
            "list",
            "1",
            "[",
            "0",
            "]=",
            "temp",
            "\n",
            "\t",
            "return",
            " list",
            "1",
            "\n",
            "\n",
            "list"
        ]
    },
    {
        "task_id": 744,
        "prompt": "Write a python function to check if the given tuple has any none value or not.\n\ndef check_none(test_tup):\n",
        "answer": "def check_none(test_tup):\n\tfor i in test_tup:\n\t\tif i == None:\n\t\t\treturn True\n\treturn False\n\n",
        "test_list": [
            "assert check_none((10, 4, 5, 6, None)) == True",
            "assert check_none((7, 8, 9, 11, 14)) == False",
            "assert check_none((1, 2, 3, 4, None)) == True"
        ],
        "answer_list": [
            "\t",
            "for",
            " i",
            " in",
            " test",
            "_",
            "tup",
            ":",
            "\n\t",
            "\t",
            "if",
            " i",
            " ==",
            " None",
            ":",
            "\n\t\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "return",
            " False",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 745,
        "prompt": "Write a python function to find numbers within a given range where every number is divisible by every digit it contains.\n\ndef divisible_by_digits(startnum, endnum):\n",
        "answer": "def divisible_by_digits(startnum, endnum):\n\tfor i in range(startnum, endnum+1):\n\t\tif all(int(j) % int(i) == 0 for j in str(i)):\n\t\t\tprint(i)\n\n",
        "test_list": [
            "assert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]",
            "assert divisible_by_digits(1,15)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]",
            "assert divisible_by_digits(20,25)==[22, 24]"
        ],
        "answer_list": [
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "start",
            "num",
            ",",
            " end",
            "num",
            "+",
            "1",
            "):",
            "\n\t",
            "\t",
            "if",
            " all",
            "(",
            "int",
            "(",
            "j",
            ")",
            " %",
            " int",
            "(",
            "i",
            ")",
            " ==",
            " ",
            "0",
            " for",
            " j",
            " in",
            " str",
            "(",
            "i",
            ")):",
            "\n\t\t",
            "\t",
            "print",
            "(",
            "i",
            ")",
            "\n",
            "\n",
            "div"
        ]
    },
    {
        "task_id": 746,
        "prompt": "Write a python function to find area of a sector.\n\ndef sector_area(r,a):\n",
        "answer": "def sector_area(r,a):\n\treturn (math.pi*r*r)*a/360\n\n",
        "test_list": [
            "assert sector_area(4,45)==6.285714285714286",
            "assert sector_area(9,45)==31.82142857142857",
            "assert sector_area(9,360)==None"
        ],
        "answer_list": [
            "\t",
            "return",
            " (",
            "math",
            ".",
            "pi",
            "*",
            "r",
            "*",
            "r",
            ")*",
            "a",
            "/",
            "3",
            "6",
            "0",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 747,
        "prompt": "Write a python function to find the longest common subsequence for the given three string sequence.\n\ndef lcs_of_three(X, Y, Z, m, n, o): \n",
        "answer": "def lcs_of_three(X, Y, Z, m, n, o): \n\tL = [[0 for x in range(o+1)] for x in range(n+1)] \n\tfor i in range(m + 1): \n\t\tfor j in range(n + 1): \n\t\t\tfor k in range(o + 1): \n\t\t\t\tif (i == 0 or j == 0 or k == 0): \n\t\t\t\t\tL[i][j] = 0\n\t\t\t\telif (X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]): \n\t\t\t\t\tL[i][j] = L[i-1][j-1] + 1\n\t\t\t\telse: \n\t\t\t\t\tL[i][j] = max(L[i-1][j], L[i][j-1], L[i][j-1]) \n\treturn L[m][n] \n\n",
        "test_list": [
            "assert lcs_of_three('AGGT12', '12TXAYB', '12XBA', 6, 7, 5) == 2",
            "assert lcs_of_three('Reels', 'Reelsfor', 'ReelsforReels', 5, 8, 13) == 5 ",
            "assert lcs_of_three('abcd1e2', 'bc12ea', 'bd1ea', 7, 6, 5) == 3"
        ],
        "answer_list": [
            "\t",
            "L",
            " =",
            " [[",
            "0",
            " for",
            " x",
            " in",
            " range",
            "(",
            "o",
            "+",
            "1",
            ")]",
            " for",
            " x",
            " in",
            " range",
            "(",
            "n",
            "+",
            "1",
            ")]",
            " \n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "m",
            " +",
            " ",
            "1",
            "):",
            " \n\t",
            "\t",
            "for",
            " j",
            " in",
            " range",
            "(",
            "n",
            " +",
            " ",
            "1",
            "):",
            " \n\t\t",
            "\t",
            "for",
            " k",
            " in",
            " range",
            "(",
            "o",
            " +",
            " ",
            "1",
            "):",
            " \n\t\t\t",
            "\t",
            "if",
            " (",
            "i",
            " ==",
            " ",
            "0",
            " or",
            " j",
            " ==",
            " ",
            "0",
            " or",
            " k",
            " ==",
            " ",
            "0",
            "):",
            " \n\t\t\t\t",
            "\t",
            "L",
            "[",
            "i",
            "][",
            "j",
            "]",
            " =",
            " ",
            "0",
            "\n\t\t\t",
            "\t",
            "elif",
            " (",
            "X",
            "[",
            "i",
            "-",
            "1",
            "]",
            " ==",
            " Y",
            "[",
            "j",
            "-",
            "1",
            "]",
            " and",
            " Y",
            "[",
            "j",
            "-",
            "1",
            "]",
            " ==",
            " Z",
            "[",
            "k",
            "-",
            "1",
            "]):",
            " \n\t\t\t\t",
            "\t",
            "L",
            "[",
            "i",
            "][",
            "j",
            "]",
            " =",
            " L",
            "[",
            "i",
            "-",
            "1",
            "][",
            "j",
            "-",
            "1",
            "]",
            " +",
            " ",
            "1",
            "\n\t\t\t",
            "\t",
            "else",
            ":",
            " \n\t\t\t\t",
            "\t",
            "L",
            "[",
            "i",
            "][",
            "j",
            "]",
            " =",
            " max",
            "(",
            "L",
            "[",
            "i",
            "-",
            "1",
            "][",
            "j",
            "],",
            " L",
            "[",
            "i",
            "][",
            "j",
            "-",
            "1",
            "],",
            " L",
            "[",
            "i",
            "][",
            "j",
            "-",
            "1",
            "])",
            " \n",
            "\t",
            "return",
            " L",
            "[",
            "m",
            "][",
            "n",
            "]",
            " \n",
            "\n",
            "#"
        ]
    },
    {
        "task_id": 748,
        "prompt": "Write a python function to put spaces between words starting with capital letters in a given string by using regex.\n\ndef capital_words_spaces(str1):\n",
        "answer": "def capital_words_spaces(str1):\n\treturn re.sub(r'([A-Z])', r' \\1', str1)\n\n",
        "test_list": [
            "assert capital_words_spaces(\"Python\") == 'Python'",
            "assert capital_words_spaces(\"PythonProgrammingExamples\") == 'Python Programming Examples'",
            "assert capital_words_spaces(\"GetReadyToBeCodingFreak\") == 'Get Ready To Be Coding Freak'"
        ],
        "answer_list": [
            "\t",
            "return",
            " re",
            ".",
            "sub",
            "(",
            "r",
            "'",
            "([",
            "A",
            "-",
            "Z",
            "])",
            "',",
            " r",
            "'",
            " \\",
            "1",
            "',",
            " str",
            "1",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 749,
        "prompt": "Write a python function to sort a given list of strings of numbers numerically.\n\ndef sort_numeric_strings(nums_str):\n",
        "answer": "def sort_numeric_strings(nums_str):\n\treturn sorted(nums_str, key=lambda x: int(x))\n\n",
        "test_list": [
            "assert sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]",
            "assert sort_numeric_strings(['2','3','8','4','7','9','8','2','6','5','1','6','1','2','3','4','6','9','1','2'])==[1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9]",
            "assert sort_numeric_strings(['1','3','5','7','1', '3','13', '15', '17','5', '7 ','9','1', '11'])==[1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17]"
        ],
        "answer_list": [
            "\t",
            "return",
            " sorted",
            "(",
            "nums",
            "_",
            "str",
            ",",
            " key",
            "=",
            "lambda",
            " x",
            ":",
            " int",
            "(",
            "x",
            "))",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 750,
        "prompt": "Write a python function to add the given tuple to the given list.\n\ndef add_tuple(test_list, test_tup):\n",
        "answer": "def add_tuple(test_list, test_tup):\n\ttest_list.append(test_tup)\n\treturn test_list\n\n",
        "test_list": [
            "assert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]",
            "assert add_tuple([6, 7, 8], (10, 11)) == [6, 7, 8, 10, 11]",
            "assert add_tuple([7, 8, 9], (11, 12)) == [7, 8, 9, 11, 12]"
        ],
        "answer_list": [
            "\t",
            "test",
            "_",
            "list",
            ".",
            "append",
            "(",
            "test",
            "_",
            "tup",
            ")",
            "\n",
            "\t",
            "return",
            " test",
            "_",
            "list",
            "\n",
            "\n",
            "#"
        ]
    },
    {
        "task_id": 751,
        "prompt": "Write a python function to check if the given array represents min heap or not.\n\ndef check_min_heap(arr, i):\n",
        "answer": "def check_min_heap(arr, i):\n\tif i >= len(arr):\n\t\treturn True\n\tif arr[i] > arr[2*i+1] or arr[i] > arr[2*i+2]:\n\t\treturn False\n\treturn check_min_heap(arr, 2*i+1) and check_min_heap(arr, 2*i+2)\n\n",
        "test_list": [
            "assert check_min_heap([1, 2, 3, 4, 5, 6], 0) == True",
            "assert check_min_heap([2, 3, 4, 5, 10, 15], 0) == True",
            "assert check_min_heap([2, 10, 4, 5, 3, 15], 0) == False"
        ],
        "answer_list": [
            "\t",
            "if",
            " i",
            " >=",
            " len",
            "(",
            "arr",
            "):",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " arr",
            "[",
            "i",
            "]",
            " >",
            " arr",
            "[",
            "2",
            "*",
            "i",
            "+",
            "1",
            "]",
            " or",
            " arr",
            "[",
            "i",
            "]",
            " >",
            " arr",
            "[",
            "2",
            "*",
            "i",
            "+",
            "2",
            "]:",
            "\n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "return",
            " check",
            "_",
            "min",
            "_",
            "heap",
            "(",
            "arr",
            ",",
            " ",
            "2",
            "*",
            "i",
            "+",
            "1",
            ")",
            " and",
            " check",
            "_",
            "min",
            "_",
            "heap",
            "(",
            "arr",
            ",",
            " ",
            "2",
            "*",
            "i",
            "+",
            "2",
            ")",
            "\n",
            "\n",
            "arr"
        ]
    },
    {
        "task_id": 752,
        "prompt": "Write a python function to find the nth jacobsthal number.\n\ndef jacobsthal_num(n): \n",
        "answer": "def jacobsthal_num(n): \n\tif n == 0: \n\t\treturn 0\n\telif n == 1: \n\t\treturn 1\n\telse: \n\t\treturn jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)\n\n",
        "test_list": [
            "assert jacobsthal_num(5) == 11",
            "assert jacobsthal_num(2) == 1",
            "assert jacobsthal_num(4) == 5"
        ],
        "answer_list": [
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "0",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "0",
            "\n",
            "\t",
            "elif",
            " n",
            " ==",
            " ",
            "1",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "1",
            "\n",
            "\t",
            "else",
            ":",
            " \n\t",
            "\t",
            "return",
            " j",
            "acob",
            "st",
            "hal",
            "_",
            "num",
            "(",
            "n",
            "-",
            "1",
            ")",
            " +",
            " ",
            "2",
            "*",
            "jacob",
            "st",
            "hal",
            "_",
            "num",
            "(",
            "n",
            "-",
            "2",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 753,
        "prompt": "Write a python function to find minimum k records from tuple list.\n\ndef min_k(test_list, K):\n",
        "answer": "def min_k(test_list, K):\n\treturn sorted(test_list, key=lambda x: x[1])[:K]\n\n",
        "test_list": [
            "assert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]",
            "assert min_k([('Sanjeev', 11), ('Angat', 5), ('Akash', 3), ('Nepin', 9)], 3) == [('Akash', 3), ('Angat', 5), ('Nepin', 9)]",
            "assert min_k([('tanmay', 14), ('Amer', 11), ('Ayesha', 9), ('SKD', 16)], 1) == [('Ayesha', 9)]"
        ],
        "answer_list": [
            "\t",
            "return",
            " sorted",
            "(",
            "test",
            "_",
            "list",
            ",",
            " key",
            "=",
            "lambda",
            " x",
            ":",
            " x",
            "[",
            "1",
            "])",
            "[:",
            "K",
            "]",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 754,
        "prompt": "Write a python function to find common index elements from three lists.\n\ndef extract_index_list(l1, l2, l3):\n",
        "answer": "def extract_index_list(l1, l2, l3):\n\treturn [i for i, j, k in zip(l1, l2, l3) if i == j == k]\n\n",
        "test_list": [
            "assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]",
            "assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 6, 5],[0, 1, 2, 3, 4, 6, 7])==[1, 6]",
            "assert extract_index_list([1, 1, 3, 4, 6, 5, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 5]"
        ],
        "answer_list": [
            "\t",
            "return",
            " [",
            "i",
            " for",
            " i",
            ",",
            " j",
            ",",
            " k",
            " in",
            " zip",
            "(",
            "l",
            "1",
            ",",
            " l",
            "2",
            ",",
            " l",
            "3",
            ")",
            " if",
            " i",
            " ==",
            " j",
            " ==",
            " k",
            "]",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 755,
        "prompt": "Write a python function to find the second smallest number in a list.\n\ndef second_smallest(numbers):\n",
        "answer": "def second_smallest(numbers):\n\tnumbers.sort()\n\treturn numbers[1]\n\n",
        "test_list": [
            "assert second_smallest([1, 2, -8, -2, 0, -2])==-2",
            "assert second_smallest([1, 1, -0.5, 0, 2, -2, -2])==-0.5",
            "assert second_smallest([2,2])==None"
        ],
        "answer_list": [
            "\t",
            "numbers",
            ".",
            "sort",
            "()",
            "\n",
            "\t",
            "return",
            " numbers",
            "[",
            "1",
            "]",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 756,
        "prompt": "Write a python function that matches a string that has an a followed by zero or one 'b'.\n\ndef text_match_zero_one(text):\n",
        "answer": "def text_match_zero_one(text):\n\tif text[0] == 'a' and text[1] == 'b':\n\t\treturn False\n\telse:\n\t\treturn True\n\n",
        "test_list": [
            "assert text_match_zero_one(\"ac\")==('Found a match!')",
            "assert text_match_zero_one(\"dc\")==('Not matched!')",
            "assert text_match_zero_one(\"abbbba\")==('Found a match!')"
        ],
        "answer_list": [
            "\t",
            "if",
            " text",
            "[",
            "0",
            "]",
            " ==",
            " '",
            "a",
            "'",
            " and",
            " text",
            "[",
            "1",
            "]",
            " ==",
            " '",
            "b",
            "':",
            "\n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 757,
        "prompt": "Write a python function to count the pairs of reverse strings in the given string list.\n\ndef count_reverse_pairs(test_list):\n",
        "answer": "def count_reverse_pairs(test_list):\n\tcount = 0\n\tfor i in range(len(test_list)):\n\t\tfor j in range(i+1, len(test_list)):\n\t\t\tif test_list[i] == test_list[j][::-1]:\n\t\t\t\tcount += 1\n\treturn count\n\n",
        "test_list": [
            "assert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== '2'",
            "assert count_reverse_pairs([\"geeks\", \"best\", \"for\", \"skeeg\"]) == '1'",
            "assert count_reverse_pairs([\"makes\", \"best\", \"sekam\", \"for\", \"rof\"]) == '2' "
        ],
        "answer_list": [
            "\t",
            "count",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "len",
            "(",
            "test",
            "_",
            "list",
            ")):",
            "\n\t",
            "\t",
            "for",
            " j",
            " in",
            " range",
            "(",
            "i",
            "+",
            "1",
            ",",
            " len",
            "(",
            "test",
            "_",
            "list",
            ")):",
            "\n\t\t",
            "\t",
            "if",
            " test",
            "_",
            "list",
            "[",
            "i",
            "]",
            " ==",
            " test",
            "_",
            "list",
            "[",
            "j",
            "][",
            "::-",
            "1",
            "]:",
            "\n\t\t\t",
            "\t",
            "count",
            " +=",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " count",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 758,
        "prompt": "Write a python function to count number of unique lists within a list.\n\ndef unique_sublists(list1):\n",
        "answer": "def unique_sublists(list1):\n\tunique_list = []\n\tfor i in list1:\n\t\tif i not in unique_list:\n\t\t\tunique_list.append(i)\n\treturn unique_list\n\n",
        "test_list": [
            "assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}",
            "assert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}",
            "assert unique_sublists([[10, 20, 30, 40], [60, 70, 50, 50], [90, 100, 200]])=={(10, 20, 30, 40): 1, (60, 70, 50, 50): 1, (90, 100, 200): 1}"
        ],
        "answer_list": [
            "\t",
            "unique",
            "_",
            "list",
            " =",
            " []",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " list",
            "1",
            ":",
            "\n\t",
            "\t",
            "if",
            " i",
            " not",
            " in",
            " unique",
            "_",
            "list",
            ":",
            "\n\t\t",
            "\t",
            "unique",
            "_",
            "list",
            ".",
            "append",
            "(",
            "i",
            ")",
            "\n",
            "\t",
            "return",
            " unique",
            "_",
            "list",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 759,
        "prompt": "Write a python function to check a decimal with a precision of 2.\n\ndef is_decimal(num):\n",
        "answer": "def is_decimal(num):\n\tif num % 1 == 0:\n\t\treturn True\n\telse:\n\t\treturn False\n\n",
        "test_list": [
            "assert is_decimal('123.11')==True",
            "assert is_decimal('e666.86')==False",
            "assert is_decimal('3.124587')==False"
        ],
        "answer_list": [
            "\t",
            "if",
            " num",
            " %",
            " ",
            "1",
            " ==",
            " ",
            "0",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 760,
        "prompt": "Write a python function to check whether an array contains only one distinct element or not.\n\ndef unique_Element(arr,n):\n",
        "answer": "def unique_Element(arr,n):\n\tif n == 0:\n\t\treturn True\n\tif n == 1:\n\t\treturn True\n\tif arr[0] == arr[1]:\n\t\treturn False\n\treturn unique_Element(arr[1:],n-1)\n\n",
        "test_list": [
            "assert unique_Element([1,1,1],3) == 'YES'",
            "assert unique_Element([1,2,1,2],4) == 'NO'",
            "assert unique_Element([1,2,3,4,5],5) == 'NO'"
        ],
        "answer_list": [
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "0",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "1",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " arr",
            "[",
            "0",
            "]",
            " ==",
            " arr",
            "[",
            "1",
            "]:",
            "\n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "return",
            " unique",
            "_",
            "Element",
            "(",
            "arr",
            "[",
            "1",
            ":],",
            "n",
            "-",
            "1",
            ")",
            "\n",
            "\n",
            "arr"
        ]
    },
    {
        "task_id": 761,
        "prompt": "Write a python function to caluclate arc length of an angle.\n\ndef arc_length(d,a):\n",
        "answer": "def arc_length(d,a):\n\treturn d*a/360\n\n",
        "test_list": [
            "assert arc_length(9,45)==3.5357142857142856",
            "assert arc_length(9,480)==None",
            "assert arc_length(5,270)==11.785714285714285"
        ],
        "answer_list": [
            "\t",
            "return",
            " d",
            "*",
            "a",
            "/",
            "3",
            "6",
            "0",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 762,
        "prompt": "Write a python function to check whether the given month number contains 30 days or not.\n\ndef check_monthnumber_number(monthnum3):\n",
        "answer": "def check_monthnumber_number(monthnum3):\n\tif monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n\t\treturn True\n\telif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n\t\treturn False\n\telse:\n\t\treturn \"Invalid month number\"\n\n",
        "test_list": [
            "assert check_monthnumber_number(6)==True",
            "assert check_monthnumber_number(2)==False",
            "assert check_monthnumber_number(12)==False"
        ],
        "answer_list": [
            "\t",
            "if",
            " month",
            "num",
            "3",
            " ==",
            " ",
            "1",
            " or",
            " month",
            "num",
            "3",
            " ==",
            " ",
            "3",
            " or",
            " month",
            "num",
            "3",
            " ==",
            " ",
            "5",
            " or",
            " month",
            "num",
            "3",
            " ==",
            " ",
            "7",
            " or",
            " month",
            "num",
            "3",
            " ==",
            " ",
            "8",
            " or",
            " month",
            "num",
            "3",
            " ==",
            " ",
            "1",
            "0",
            " or",
            " month",
            "num",
            "3",
            " ==",
            " ",
            "1",
            "2",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "elif",
            " month",
            "num",
            "3",
            " ==",
            " ",
            "4",
            " or",
            " month",
            "num",
            "3",
            " ==",
            " ",
            "6",
            " or",
            " month",
            "num",
            "3",
            " ==",
            " ",
            "9",
            " or",
            " month",
            "num",
            "3",
            " ==",
            " ",
            "1",
            "1",
            ":",
            "\n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "return",
            " \"",
            "Invalid",
            " month",
            " number",
            "\"",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 763,
        "prompt": "Write a python function to find the minimum difference between any two elements in a given array.\n\ndef find_Min_Diff(arr,n): \n",
        "answer": "def find_Min_Diff(arr,n): \n\tarr.sort() \n\tmin_diff = arr[1] - arr[0] \n\tfor i in range(1, n-1): \n\t\tif arr[i+1] - arr[i] < min_diff: \n\t\t\tmin_diff = arr[i+1] - arr[i] \n\treturn min_diff \n\n",
        "test_list": [
            "assert find_Min_Diff((1,5,3,19,18,25),6) == 1",
            "assert find_Min_Diff((4,3,2,6),4) == 1",
            "assert find_Min_Diff((30,5,20,9),4) == 4"
        ],
        "answer_list": [
            "\t",
            "arr",
            ".",
            "sort",
            "()",
            " \n",
            "\t",
            "min",
            "_",
            "diff",
            " =",
            " arr",
            "[",
            "1",
            "]",
            " -",
            " arr",
            "[",
            "0",
            "]",
            " \n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "1",
            ",",
            " n",
            "-",
            "1",
            "):",
            " \n\t",
            "\t",
            "if",
            " arr",
            "[",
            "i",
            "+",
            "1",
            "]",
            " -",
            " arr",
            "[",
            "i",
            "]",
            " <",
            " min",
            "_",
            "diff",
            ":",
            " \n\t\t",
            "\t",
            "min",
            "_",
            "diff",
            " =",
            " arr",
            "[",
            "i",
            "+",
            "1",
            "]",
            " -",
            " arr",
            "[",
            "i",
            "]",
            " \n",
            "\t",
            "return",
            " min",
            "_",
            "diff",
            " \n",
            "\n",
            "arr"
        ]
    },
    {
        "task_id": 764,
        "prompt": "Write a python function to count numeric values in a given string.\n\ndef number_ctr(str):\n",
        "answer": "def number_ctr(str):\n\tcount = 0\n\tfor i in str:\n\t\tif i.isdigit():\n\t\t\tcount += 1\n\treturn count\n\n",
        "test_list": [
            "assert number_ctr('program2bedone') == 1",
            "assert number_ctr('3wonders') ==1",
            "assert number_ctr('123') == 3"
        ],
        "answer_list": [
            "\t",
            "count",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " str",
            ":",
            "\n\t",
            "\t",
            "if",
            " i",
            ".",
            "isdigit",
            "():",
            "\n\t\t",
            "\t",
            "count",
            " +=",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " count",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 765,
        "prompt": "Write a python function to find nth polite number.\n\ndef is_polite(n): \n",
        "answer": "def is_polite(n): \n\tif n == 1: \n\t\treturn True\n\tif n == 2: \n\t\treturn True\n\tif n == 3: \n\t\treturn True\n\tif n == 4: \n\t\treturn False\n\tif n == 5: \n\t\treturn True\n\tif n == 6: \n\t\treturn False\n\tif n == 7: \n\t\treturn True\n\tif n == 8: \n\t\treturn False\n\tif n == 9: \n\t\treturn False\n\tif n == 10: \n\t\treturn True\n\tif n == 11: \n\t\treturn False\n\tif n == 12: \n\t\treturn False\n\tif n == 13: \n\t\treturn False\n\tif n == 14: \n\t\treturn False\n\tif n == 15: \n\t\treturn True\n\tif n == 16: \n\t\treturn False\n\tif n == 17: \n\t\treturn True\n\tif n == 18: \n\t\treturn False\n\tif n == 19: \n\t\treturn False\n\tif n == 20: \n\t\treturn True\n\tif n == 21: \n\t\treturn False\n\tif n == 22: \n\t\treturn False\n\tif n == 23: \n\t\treturn False\n\tif n == 24: \n\t\treturn False\n\tif n == 25: \n\t\treturn True\n\tif n == 26: \n\t\treturn False\n\tif n == 27: \n\t\treturn True\n\tif n == 28: \n\t\treturn False\n\tif n == 29: \n\t\treturn False\n\tif n == 30: \n\t\treturn True\n\tif n == 31: \n\t\treturn False\n\tif n == 32: \n\t\treturn False\n\tif n == 33: \n\t\treturn False\n\tif n == 34: \n\t\treturn False\n\tif n == 35: \n\t\treturn True\n\tif n == 36: \n\t\treturn False\n\tif n == 37: \n\t\treturn True\n\tif n == 38: \n\t\treturn False\n\tif n == 39: \n\t\treturn False\n\tif n == 40: \n\t\treturn True\n\tif n == 41: \n\t\treturn False\n\tif n == 42: \n\t\treturn False\n\tif n == 43: \n\t\treturn False\n\tif n == 44: \n\t\treturn False\n\tif n == 45: \n\t\treturn True\n\tif n == 46: \n\t\treturn False\n\tif n == 47: \n\t\treturn True\n\tif n == 48: \n\t\treturn False\n\tif n == 49: \n\t\treturn False\n\tif n == 50: \n\t\treturn True\n\tif n == 51: \n\t\treturn False\n\tif n == 52: \n\t\treturn False\n\tif n == 53: \n\t\treturn False\n\tif n == 54: \n\t\treturn False\n\tif n == 55: \n\t\treturn True\n\tif n == 56: \n\t\treturn False\n\tif n == 57: \n\t\treturn True\n\tif n == 58: \n\t\treturn False\n\tif n == 59: \n\t\treturn False\n\tif n == 60: \n\t\treturn True\n\tif n == 61: \n\t\treturn False\n\tif n == 62: \n\t\treturn False\n\tif n == 63: \n\t\treturn False\n\tif n == 64: \n\t\treturn False\n\tif n == 65: \n\t\treturn True\n\tif n == 66: \n\t\treturn False\n\tif n == 67: \n\t\treturn True\n\tif n == 68: \n\t\treturn False\n\tif n == 69: \n\t\treturn False\n\tif n == 70: \n\t\treturn True\n\tif n == 71: \n\t\treturn False\n\tif n == 72: \n\t\treturn False\n\tif n == 73: \n\t\treturn False\n\tif n == 74: \n\t\treturn False\n\tif n == 75: \n\t\treturn True\n\tif n == 76: \n\t\treturn False\n\tif n == 77: \n\t\treturn True\n\tif n == 78: \n\t\treturn False\n\tif n == 79: \n\t\treturn False\n\tif n == 8",
        "test_list": [
            "assert is_polite(7) == 11",
            "assert is_polite(4) == 7",
            "assert is_polite(9) == 13"
        ],
        "answer_list": [
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "1",
            ":",
            " \n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "2",
            ":",
            " \n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "3",
            ":",
            " \n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "4",
            ":",
            " \n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "5",
            ":",
            " \n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "6",
            ":",
            " \n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "7",
            ":",
            " \n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "8",
            ":",
            " \n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "9",
            ":",
            " \n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "1",
            "0",
            ":",
            " \n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "1",
            "1",
            ":",
            " \n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "1",
            "2",
            ":",
            " \n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "1",
            "3",
            ":",
            " \n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "1",
            "4",
            ":",
            " \n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "1",
            "5",
            ":",
            " \n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "1",
            "6",
            ":",
            " \n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "1",
            "7",
            ":",
            " \n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "1",
            "8",
            ":",
            " \n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "1",
            "9",
            ":",
            " \n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "2",
            "0",
            ":",
            " \n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "2",
            "1",
            ":",
            " \n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "2",
            "2",
            ":",
            " \n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "2",
            "3",
            ":",
            " \n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "2",
            "4",
            ":",
            " \n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "2",
            "5",
            ":",
            " \n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "2",
            "6",
            ":",
            " \n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "2",
            "7",
            ":",
            " \n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "2",
            "8",
            ":",
            " \n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "2",
            "9",
            ":",
            " \n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "3",
            "0",
            ":",
            " \n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "3",
            "1",
            ":",
            " \n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "3",
            "2",
            ":",
            " \n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "3",
            "3",
            ":",
            " \n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "3",
            "4",
            ":",
            " \n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "3",
            "5",
            ":",
            " \n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "3",
            "6",
            ":",
            " \n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "3",
            "7",
            ":",
            " \n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "3",
            "8",
            ":",
            " \n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "3",
            "9",
            ":",
            " \n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "4",
            "0",
            ":",
            " \n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "4",
            "1",
            ":",
            " \n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "4",
            "2",
            ":",
            " \n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "4",
            "3",
            ":",
            " \n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "4",
            "4",
            ":",
            " \n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "4",
            "5",
            ":",
            " \n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "4",
            "6",
            ":",
            " \n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "4",
            "7",
            ":",
            " \n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "4",
            "8",
            ":",
            " \n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "4",
            "9",
            ":",
            " \n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "5",
            "0",
            ":",
            " \n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "5",
            "1",
            ":",
            " \n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "5",
            "2",
            ":",
            " \n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "5",
            "3",
            ":",
            " \n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "5",
            "4",
            ":",
            " \n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "5",
            "5",
            ":",
            " \n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "5",
            "6",
            ":",
            " \n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "5",
            "7",
            ":",
            " \n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "5",
            "8",
            ":",
            " \n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "5",
            "9",
            ":",
            " \n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "6",
            "0",
            ":",
            " \n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "6",
            "1",
            ":",
            " \n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "6",
            "2",
            ":",
            " \n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "6",
            "3",
            ":",
            " \n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "6",
            "4",
            ":",
            " \n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "6",
            "5",
            ":",
            " \n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "6",
            "6",
            ":",
            " \n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "6",
            "7",
            ":",
            " \n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "6",
            "8",
            ":",
            " \n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "6",
            "9",
            ":",
            " \n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "7",
            "0",
            ":",
            " \n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "7",
            "1",
            ":",
            " \n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "7",
            "2",
            ":",
            " \n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "7",
            "3",
            ":",
            " \n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "7",
            "4",
            ":",
            " \n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "7",
            "5",
            ":",
            " \n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "7",
            "6",
            ":",
            " \n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "7",
            "7",
            ":",
            " \n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "7",
            "8",
            ":",
            " \n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "7",
            "9",
            ":",
            " \n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "8"
        ]
    },
    {
        "task_id": 766,
        "prompt": "Write a python function to iterate over all pairs of consecutive items in a given list.\n\ndef pair_wise(l1):\n",
        "answer": "def pair_wise(l1):\n\tfor i in range(len(l1)-1):\n\t\tyield l1[i], l1[i+1]\n\n",
        "test_list": [
            "assert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]",
            "assert pair_wise([1,5,7,9,10])==[(1, 5), (5, 7), (7, 9), (9, 10)]",
            "assert pair_wise([1,2,3,4,5,6,7,8,9,10])==[(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]"
        ],
        "answer_list": [
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "len",
            "(",
            "l",
            "1",
            ")-",
            "1",
            "):",
            "\n\t",
            "\t",
            "yield",
            " l",
            "1",
            "[",
            "i",
            "],",
            " l",
            "1",
            "[",
            "i",
            "+",
            "1",
            "]",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 767,
        "prompt": "Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019.\n\ndef get_Pairs_Count(arr,n,sum):\n",
        "answer": "def get_Pairs_Count(arr,n,sum):\n\tcount = 0\n\tfor i in range(n):\n\t\tfor j in range(i+1,n):\n\t\t\tif arr[i]+arr[j] == sum:\n\t\t\t\tcount += 1\n\treturn count\n\n",
        "test_list": [
            "assert get_Pairs_Count([1,1,1,1],4,2) == 6",
            "assert get_Pairs_Count([1,5,7,-1,5],5,6) == 3",
            "assert get_Pairs_Count([1,-2,3],3,1) == 1"
        ],
        "answer_list": [
            "\t",
            "count",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "n",
            "):",
            "\n\t",
            "\t",
            "for",
            " j",
            " in",
            " range",
            "(",
            "i",
            "+",
            "1",
            ",",
            "n",
            "):",
            "\n\t\t",
            "\t",
            "if",
            " arr",
            "[",
            "i",
            "]+",
            "arr",
            "[",
            "j",
            "]",
            " ==",
            " sum",
            ":",
            "\n\t\t\t",
            "\t",
            "count",
            " +=",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " count",
            "\n",
            "\n",
            "arr"
        ]
    },
    {
        "task_id": 768,
        "prompt": "Write a python function to check for odd parity of a given number.\n\ndef check_Odd_Parity(x): \n",
        "answer": "def check_Odd_Parity(x): \n\tif x%2 == 0:\n\t\treturn False\n\telse:\n\t\treturn True\n\n",
        "test_list": [
            "assert check_Odd_Parity(13) == True",
            "assert check_Odd_Parity(21) == True",
            "assert check_Odd_Parity(18) == False"
        ],
        "answer_list": [
            "\t",
            "if",
            " x",
            "%",
            "2",
            " ==",
            " ",
            "0",
            ":",
            "\n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 769,
        "prompt": "Write a python function to get the difference between two lists.\n\ndef Diff(li1,li2):\n",
        "answer": "def Diff(li1,li2):\n\treturn (list(set(li1) - set(li2)))\n\n",
        "test_list": [
            "assert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]",
            "assert (Diff([1,2,3,4,5], [6,7,1])) == [2,3,4,5,6,7]",
            "assert (Diff([1,2,3], [6,7,1])) == [2,3,6,7]"
        ],
        "answer_list": [
            "\t",
            "return",
            " (",
            "list",
            "(",
            "set",
            "(",
            "li",
            "1",
            ")",
            " -",
            " set",
            "(",
            "li",
            "2",
            ")))",
            "\n",
            "\n",
            "li"
        ]
    },
    {
        "task_id": 770,
        "prompt": "Write a python function to find the sum of fourth power of first n odd natural numbers.\n\ndef odd_Num_Sum(n) : \n",
        "answer": "def odd_Num_Sum(n) : \n\tsum = 0\n\tfor i in range(1, n+1, 2) : \n\t\tsum += i**4\n\treturn sum\n\n",
        "test_list": [
            "assert odd_Num_Sum(2) == 82",
            "assert odd_Num_Sum(3) == 707",
            "assert odd_Num_Sum(4) == 3108"
        ],
        "answer_list": [
            "\t",
            "sum",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "1",
            ",",
            " n",
            "+",
            "1",
            ",",
            " ",
            "2",
            ")",
            " :",
            " \n\t",
            "\t",
            "sum",
            " +=",
            " i",
            "**",
            "4",
            "\n",
            "\t",
            "return",
            " sum",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 771,
        "prompt": "Write a python function to check if the given expression is balanced or not.\n\ndef check_expression(exp):\n",
        "answer": "def check_expression(exp):\n\tstack = []\n\tfor i in exp:\n\t\tif i == '(':\n\t\t\tstack.append(i)\n\t\telif i == ')':\n\t\t\tif len(stack) == 0:\n\t\t\t\treturn False\n\t\t\telse:\n\t\t\t\tstack.pop()\n\tif len(stack) == 0:\n\t\treturn True\n\telse:\n\t\treturn False\n\n",
        "test_list": [
            "assert check_expression(\"{()}[{}]\") == True",
            "assert check_expression(\"{()}[{]\") == False",
            "assert check_expression(\"{()}[{}][]({})\") == True"
        ],
        "answer_list": [
            "\t",
            "stack",
            " =",
            " []",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " exp",
            ":",
            "\n\t",
            "\t",
            "if",
            " i",
            " ==",
            " '",
            "(':",
            "\n\t\t",
            "\t",
            "stack",
            ".",
            "append",
            "(",
            "i",
            ")",
            "\n\t",
            "\t",
            "elif",
            " i",
            " ==",
            " ')",
            "':",
            "\n\t\t",
            "\t",
            "if",
            " len",
            "(",
            "stack",
            ")",
            " ==",
            " ",
            "0",
            ":",
            "\n\t\t\t",
            "\t",
            "return",
            " False",
            "\n\t\t",
            "\t",
            "else",
            ":",
            "\n\t\t\t",
            "\t",
            "stack",
            ".",
            "pop",
            "()",
            "\n",
            "\t",
            "if",
            " len",
            "(",
            "stack",
            ")",
            " ==",
            " ",
            "0",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 772,
        "prompt": "Write a python function to remove all the words with k length in the given string.\n\ndef remove_length(test_str, K):\n",
        "answer": "def remove_length(test_str, K):\n\treturn''.join([word for word in test_str.split() if len(word)!= K])\n\n",
        "test_list": [
            "assert remove_length('The person is most value tet', 3) == 'person is most value'",
            "assert remove_length('If you told me about this ok', 4) == 'If you me about ok'",
            "assert remove_length('Forces of darkeness is come into the play', 4) == 'Forces of darkeness is the'"
        ],
        "answer_list": [
            "\t",
            "return",
            " '",
            " '.",
            "join",
            "([",
            "word",
            " for",
            " word",
            " in",
            " test",
            "_",
            "str",
            ".",
            "split",
            "()",
            " if",
            " len",
            "(",
            "word",
            ")",
            "!=",
            " K",
            "])",
            "\n"
        ]
    },
    {
        "task_id": 773,
        "prompt": "Write a python function to find the occurrence and position of the substrings within a string.\n\ndef occurance_substring(text,pattern):\n",
        "answer": "def occurance_substring(text,pattern):\n\tcount=0\n\tfor i in range(len(text)):\n\t\tif text[i:i+len(pattern)]==pattern:\n\t\t\tcount+=1\n\t\t\tprint(f\"The pattern {pattern} occurs {count} times and the position is {i}\")\n\n",
        "test_list": [
            "assert occurance_substring('python programming, python language','python')==('python', 0, 6)",
            "assert occurance_substring('python programming,programming language','programming')==('programming', 7, 18)",
            "assert occurance_substring('python programming,programming language','language')==('language', 31, 39)"
        ],
        "answer_list": [
            "\t",
            "count",
            "=",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "len",
            "(",
            "text",
            ")):",
            "\n\t",
            "\t",
            "if",
            " text",
            "[",
            "i",
            ":",
            "i",
            "+",
            "len",
            "(",
            "pattern",
            ")]",
            "==",
            "pattern",
            ":",
            "\n\t\t",
            "\t",
            "count",
            "+=",
            "1",
            "\n\t\t",
            "\t",
            "print",
            "(",
            "f",
            "\"",
            "The",
            " pattern",
            " {",
            "pattern",
            "}",
            " occurs",
            " {",
            "count",
            "}",
            " times",
            " and",
            " the",
            " position",
            " is",
            " {",
            "i",
            "}\")",
            "\n",
            "\n",
            "oc"
        ]
    },
    {
        "task_id": 774,
        "prompt": "Write a python function to check if the string is a valid email address or not using regex.\n\ndef check_email(email): \n",
        "answer": "def check_email(email): \n\tregex = '^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$'\n\tif(re.search(regex,email)):\n\t\treturn True\n\telse:\n\t\treturn False\n\n",
        "test_list": [
            "assert check_email(\"ankitrai326@gmail.com\") == 'Valid Email'",
            "assert check_email(\"my.ownsite@ourearth.org\") == 'Valid Email'",
            "assert check_email(\"ankitaoie326.com\") == 'Invalid Email'"
        ],
        "answer_list": [
            "\t",
            "regex",
            " =",
            " '^",
            "[",
            "a",
            "-",
            "z",
            "0",
            "-",
            "9",
            "]+",
            "[\\",
            "._",
            "]?",
            "[",
            "a",
            "-",
            "z",
            "0",
            "-",
            "9",
            "]+",
            "[@",
            "]\\",
            "w",
            "+",
            "[",
            ".",
            "]\\",
            "w",
            "{",
            "2",
            ",",
            "3",
            "}$",
            "'",
            "\n",
            "\t",
            "if",
            "(",
            "re",
            ".",
            "search",
            "(",
            "regex",
            ",",
            "email",
            ")):",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 775,
        "prompt": "Write a python function to check whether every odd index contains odd numbers of a given list.\n\ndef odd_position(nums):\n",
        "answer": "def odd_position(nums):\n\tfor i in range(0, len(nums), 2):\n\t\tif nums[i] % 2 == 0:\n\t\t\treturn False\n\treturn True\n\n",
        "test_list": [
            "assert odd_position([2,1,4,3,6,7,6,3]) == True",
            "assert odd_position([4,1,2]) == True",
            "assert odd_position([1,2,3]) == False"
        ],
        "answer_list": [
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "0",
            ",",
            " len",
            "(",
            "nums",
            "),",
            " ",
            "2",
            "):",
            "\n\t",
            "\t",
            "if",
            " nums",
            "[",
            "i",
            "]",
            " %",
            " ",
            "2",
            " ==",
            " ",
            "0",
            ":",
            "\n\t\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "return",
            " True",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 776,
        "prompt": "Write a python function to count those characters which have vowels as their neighbors in the given string.\n\ndef count_vowels(test_str):\n",
        "answer": "def count_vowels(test_str):\n\tvowels = ['a', 'e', 'i', 'o', 'u']\n\tcount = 0\n\tfor i in range(len(test_str)):\n\t\tif test_str[i] in vowels:\n\t\t\tif i > 0 and test_str[i-1] in vowels:\n\t\t\t\tcount += 1\n\t\t\tif i < len(test_str) - 1 and test_str[i+1] in vowels:\n\t\t\t\tcount += 1\n\treturn count\n\n",
        "test_list": [
            "assert count_vowels('bestinstareels') == 7",
            "assert count_vowels('partofthejourneyistheend') == 12",
            "assert count_vowels('amazonprime') == 5"
        ],
        "answer_list": [
            "\t",
            "v",
            "ow",
            "els",
            " =",
            " ['",
            "a",
            "',",
            " '",
            "e",
            "',",
            " '",
            "i",
            "',",
            " '",
            "o",
            "',",
            " '",
            "u",
            "']",
            "\n",
            "\t",
            "count",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "len",
            "(",
            "test",
            "_",
            "str",
            ")):",
            "\n\t",
            "\t",
            "if",
            " test",
            "_",
            "str",
            "[",
            "i",
            "]",
            " in",
            " v",
            "ow",
            "els",
            ":",
            "\n\t\t",
            "\t",
            "if",
            " i",
            " >",
            " ",
            "0",
            " and",
            " test",
            "_",
            "str",
            "[",
            "i",
            "-",
            "1",
            "]",
            " in",
            " v",
            "ow",
            "els",
            ":",
            "\n\t\t\t",
            "\t",
            "count",
            " +=",
            " ",
            "1",
            "\n\t\t",
            "\t",
            "if",
            " i",
            " <",
            " len",
            "(",
            "test",
            "_",
            "str",
            ")",
            " -",
            " ",
            "1",
            " and",
            " test",
            "_",
            "str",
            "[",
            "i",
            "+",
            "1",
            "]",
            " in",
            " v",
            "ow",
            "els",
            ":",
            "\n\t\t\t",
            "\t",
            "count",
            " +=",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " count",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 777,
        "prompt": "Write a python function to find the sum of non-repeated elements in a given array.\n\ndef find_Sum(arr,n): \n",
        "answer": "def find_Sum(arr,n): \n\tsum = 0\n\tfor i in range(n): \n\t\tif arr[abs(arr[i])] >= 0: \n\t\t\tarr[abs(arr[i])] = -arr[abs(arr[i])] \n\t\telse: \n\t\t\tsum = sum + abs(arr[i]) \n\treturn sum \n\n",
        "test_list": [
            "assert find_Sum([1,2,3,1,1,4,5,6],8) == 21",
            "assert find_Sum([1,10,9,4,2,10,10,45,4],9) == 71",
            "assert find_Sum([12,10,9,45,2,10,10,45,10],9) == 78"
        ],
        "answer_list": [
            "\t",
            "sum",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "n",
            "):",
            " \n\t",
            "\t",
            "if",
            " arr",
            "[",
            "abs",
            "(",
            "arr",
            "[",
            "i",
            "])]",
            " >=",
            " ",
            "0",
            ":",
            " \n\t\t",
            "\t",
            "arr",
            "[",
            "abs",
            "(",
            "arr",
            "[",
            "i",
            "])]",
            " =",
            " -",
            "arr",
            "[",
            "abs",
            "(",
            "arr",
            "[",
            "i",
            "])]",
            " \n\t",
            "\t",
            "else",
            ":",
            " \n\t\t",
            "\t",
            "sum",
            " =",
            " sum",
            " +",
            " abs",
            "(",
            "arr",
            "[",
            "i",
            "])",
            " \n",
            "\t",
            "return",
            " sum",
            " \n",
            "\n",
            "arr"
        ]
    },
    {
        "task_id": 778,
        "prompt": "Write a python function to pack consecutive duplicates of a given list elements into sublists.\n\ndef pack_consecutive_duplicates(list1):\n",
        "answer": "def pack_consecutive_duplicates(list1):\n\tif len(list1) == 0:\n\t\treturn []\n\telse:\n\t\treturn [list1[0]] + pack_consecutive_duplicates([x for x in list1[1:] if x!= list1[0]])\n\n",
        "test_list": [
            "assert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]",
            "assert pack_consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]",
            "assert pack_consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==[['a', 'a'], ['b'], ['c'], ['d', 'd']]"
        ],
        "answer_list": [
            "\t",
            "if",
            " len",
            "(",
            "list",
            "1",
            ")",
            " ==",
            " ",
            "0",
            ":",
            "\n\t",
            "\t",
            "return",
            " []",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "return",
            " [",
            "list",
            "1",
            "[",
            "0",
            "]]",
            " +",
            " pack",
            "_",
            "con",
            "secutive",
            "_",
            "duplicates",
            "([",
            "x",
            " for",
            " x",
            " in",
            " list",
            "1",
            "[",
            "1",
            ":]",
            " if",
            " x",
            "!=",
            " list",
            "1",
            "[",
            "0",
            "]])",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 779,
        "prompt": "Write a python function to count the number of unique lists within a list.\n\ndef unique_sublists(list1):\n",
        "answer": "def unique_sublists(list1):\n\tunique_list = []\n\tfor i in list1:\n\t\tif i not in unique_list:\n\t\t\tunique_list.append(i)\n\treturn unique_list\n\n",
        "test_list": [
            "assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}",
            "assert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}",
            "assert unique_sublists([[1, 2], [3, 4], [4, 5], [6, 7]])=={(1, 2): 1, (3, 4): 1, (4, 5): 1, (6, 7): 1}"
        ],
        "answer_list": [
            "\t",
            "unique",
            "_",
            "list",
            " =",
            " []",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " list",
            "1",
            ":",
            "\n\t",
            "\t",
            "if",
            " i",
            " not",
            " in",
            " unique",
            "_",
            "list",
            ":",
            "\n\t\t",
            "\t",
            "unique",
            "_",
            "list",
            ".",
            "append",
            "(",
            "i",
            ")",
            "\n",
            "\t",
            "return",
            " unique",
            "_",
            "list",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 780,
        "prompt": "Write a python function to find the combinations of sums with tuples in the given tuple list.\n\ndef find_combinations(test_list):\n",
        "answer": "def find_combinations(test_list):\n\tpass\n\n",
        "test_list": [
            "assert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]",
            "assert find_combinations([(3, 5), (7, 8), (6, 2), (7, 11)]) == [(10, 13), (9, 7), (10, 16), (13, 10), (14, 19), (13, 13)]",
            "assert find_combinations([(4, 6), (8, 9), (7, 3), (8, 12)]) == [(12, 15), (11, 9), (12, 18), (15, 12), (16, 21), (15, 15)]"
        ],
        "answer_list": [
            "\t",
            "pass",
            "\n",
            "\n",
            "test"
        ]
    },
    {
        "task_id": 781,
        "prompt": "Write a python function to check whether the count of divisors is even or odd.\n\ndef count_Divisors(n) : \n",
        "answer": "def count_Divisors(n) : \n\tcount = 0\n\tfor i in range(1, n + 1) : \n\t\tif (n % i == 0) : \n\t\t\tcount += 1\n\treturn count\n\n",
        "test_list": [
            "assert count_Divisors(10) == \"Even\"",
            "assert count_Divisors(100) == \"Odd\"",
            "assert count_Divisors(125) == \"Even\""
        ],
        "answer_list": [
            "\t",
            "count",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "1",
            ",",
            " n",
            " +",
            " ",
            "1",
            ")",
            " :",
            " \n\t",
            "\t",
            "if",
            " (",
            "n",
            " %",
            " i",
            " ==",
            " ",
            "0",
            ")",
            " :",
            " \n\t\t",
            "\t",
            "count",
            " +=",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " count",
            "\n",
            "\n",
            "def"
        ]
    },
    {
        "task_id": 782,
        "prompt": "Write a python function to find the sum of all odd length subarrays.\n\ndef Odd_Length_Sum(arr):\n",
        "answer": "def Odd_Length_Sum(arr):\n\tsum = 0\n\tfor i in range(len(arr)):\n\t\tfor j in range(i, len(arr)):\n\t\t\tif (j-i)%2!= 0:\n\t\t\t\tsum += sum(arr[i:j+1])\n\treturn sum\n\n",
        "test_list": [
            "assert Odd_Length_Sum([1,2,4]) == 14",
            "assert Odd_Length_Sum([1,2,1,2]) == 15",
            "assert Odd_Length_Sum([1,7]) == 8"
        ],
        "answer_list": [
            "\t",
            "sum",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "len",
            "(",
            "arr",
            ")):",
            "\n\t",
            "\t",
            "for",
            " j",
            " in",
            " range",
            "(",
            "i",
            ",",
            " len",
            "(",
            "arr",
            ")):",
            "\n\t\t",
            "\t",
            "if",
            " (",
            "j",
            "-",
            "i",
            ")%",
            "2",
            "!=",
            " ",
            "0",
            ":",
            "\n\t\t\t",
            "\t",
            "sum",
            " +=",
            " sum",
            "(",
            "arr",
            "[",
            "i",
            ":",
            "j",
            "+",
            "1",
            "])",
            "\n",
            "\t",
            "return",
            " sum",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 783,
        "prompt": "Write a python function to convert rgb color to hsv color.\n\ndef rgb_to_hsv(r, g, b):\n",
        "answer": "def rgb_to_hsv(r, g, b):\n\tr, g, b = r/255.0, g/255.0, b/255.0\n\tmx = max(r, g, b)\n\tmn = min(r, g, b)\n\tdf = mx-mn\n\tif mx == mn:\n\t\th = 0\n\telif mx == r:\n\t\th = (60 * ((g-b)/df) + 360) % 360\n\telif mx == g:\n\t\th = (60 * ((b-r)/df) + 120) % 360\n\telif mx == b:\n\t\th = (60 * ((r-g)/df) + 240) % 360\n\tif mx == 0:\n\t\ts = 0\n\telse:\n\t\ts = df/mx\n\tv = mx\n\treturn h, s, v\n\n",
        "test_list": [
            "assert rgb_to_hsv(255, 255, 255)==(0, 0.0, 100.0)",
            "assert rgb_to_hsv(0, 215, 0)==(120.0, 100.0, 84.31372549019608)",
            "assert rgb_to_hsv(10, 215, 110)==(149.26829268292684, 95.34883720930233, 84.31372549019608)"
        ],
        "answer_list": [
            "\t",
            "r",
            ",",
            " g",
            ",",
            " b",
            " =",
            " r",
            "/",
            "2",
            "5",
            "5",
            ".",
            "0",
            ",",
            " g",
            "/",
            "2",
            "5",
            "5",
            ".",
            "0",
            ",",
            " b",
            "/",
            "2",
            "5",
            "5",
            ".",
            "0",
            "\n",
            "\t",
            "mx",
            " =",
            " max",
            "(",
            "r",
            ",",
            " g",
            ",",
            " b",
            ")",
            "\n",
            "\t",
            "mn",
            " =",
            " min",
            "(",
            "r",
            ",",
            " g",
            ",",
            " b",
            ")",
            "\n",
            "\t",
            "df",
            " =",
            " mx",
            "-",
            "mn",
            "\n",
            "\t",
            "if",
            " mx",
            " ==",
            " mn",
            ":",
            "\n\t",
            "\t",
            "h",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "elif",
            " mx",
            " ==",
            " r",
            ":",
            "\n\t",
            "\t",
            "h",
            " =",
            " (",
            "6",
            "0",
            " *",
            " ((",
            "g",
            "-",
            "b",
            ")/",
            "df",
            ")",
            " +",
            " ",
            "3",
            "6",
            "0",
            ")",
            " %",
            " ",
            "3",
            "6",
            "0",
            "\n",
            "\t",
            "elif",
            " mx",
            " ==",
            " g",
            ":",
            "\n\t",
            "\t",
            "h",
            " =",
            " (",
            "6",
            "0",
            " *",
            " ((",
            "b",
            "-",
            "r",
            ")/",
            "df",
            ")",
            " +",
            " ",
            "1",
            "2",
            "0",
            ")",
            " %",
            " ",
            "3",
            "6",
            "0",
            "\n",
            "\t",
            "elif",
            " mx",
            " ==",
            " b",
            ":",
            "\n\t",
            "\t",
            "h",
            " =",
            " (",
            "6",
            "0",
            " *",
            " ((",
            "r",
            "-",
            "g",
            ")/",
            "df",
            ")",
            " +",
            " ",
            "2",
            "4",
            "0",
            ")",
            " %",
            " ",
            "3",
            "6",
            "0",
            "\n",
            "\t",
            "if",
            " mx",
            " ==",
            " ",
            "0",
            ":",
            "\n\t",
            "\t",
            "s",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "s",
            " =",
            " df",
            "/",
            "mx",
            "\n",
            "\t",
            "v",
            " =",
            " mx",
            "\n",
            "\t",
            "return",
            " h",
            ",",
            " s",
            ",",
            " v",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 784,
        "prompt": "Write a python function to find the product of first even and odd number of a given list.\n\ndef mul_even_odd(list1):\n",
        "answer": "def mul_even_odd(list1):\n\teven = 1\n\todd = 1\n\tfor i in list1:\n\t\tif i%2 == 0:\n\t\t\teven = even * i\n\t\telse:\n\t\t\todd = odd * i\n\treturn even, odd\n\n",
        "test_list": [
            "assert mul_even_odd([1,3,5,7,4,1,6,8])==4",
            "assert mul_even_odd([1,2,3,4,5,6,7,8,9,10])==2",
            "assert mul_even_odd([1,5,7,9,10])==10"
        ],
        "answer_list": [
            "\t",
            "even",
            " =",
            " ",
            "1",
            "\n",
            "\t",
            "odd",
            " =",
            " ",
            "1",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " list",
            "1",
            ":",
            "\n\t",
            "\t",
            "if",
            " i",
            "%",
            "2",
            " ==",
            " ",
            "0",
            ":",
            "\n\t\t",
            "\t",
            "even",
            " =",
            " even",
            " *",
            " i",
            "\n\t",
            "\t",
            "else",
            ":",
            "\n\t\t",
            "\t",
            "odd",
            " =",
            " odd",
            " *",
            " i",
            "\n",
            "\t",
            "return",
            " even",
            ",",
            " odd",
            "\n",
            "\n",
            "list"
        ]
    },
    {
        "task_id": 785,
        "prompt": "Write a python function to convert tuple string to integer tuple.\n\ndef tuple_str_int(test_str):\n",
        "answer": "def tuple_str_int(test_str):\n\treturn tuple(int(x) for x in test_str[1:-1].split(','))\n\n",
        "test_list": [
            "assert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)",
            "assert tuple_str_int(\"(1, 2, 3)\") == (1, 2, 3)",
            "assert tuple_str_int(\"(4, 5, 6)\") == (4, 5, 6)"
        ],
        "answer_list": [
            "\t",
            "return",
            " tuple",
            "(",
            "int",
            "(",
            "x",
            ")",
            " for",
            " x",
            " in",
            " test",
            "_",
            "str",
            "[",
            "1",
            ":-",
            "1",
            "].",
            "split",
            "(','",
            "))",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 786,
        "prompt": "Write a python function to locate the right insertion point for a specified value in sorted order.\n\ndef right_insertion(a, x):\n",
        "answer": "def right_insertion(a, x):\n\ti = len(a) - 1\n\twhile i >= 0 and a[i] > x:\n\t\ti -= 1\n\treturn i + 1\n\n",
        "test_list": [
            "assert right_insertion([1,2,4,5],6)==4",
            "assert right_insertion([1,2,4,5],3)==2",
            "assert right_insertion([1,2,4,5],7)==4"
        ],
        "answer_list": [
            "\t",
            "i",
            " =",
            " len",
            "(",
            "a",
            ")",
            " -",
            " ",
            "1",
            "\n",
            "\t",
            "while",
            " i",
            " >=",
            " ",
            "0",
            " and",
            " a",
            "[",
            "i",
            "]",
            " >",
            " x",
            ":",
            "\n\t",
            "\t",
            "i",
            " -=",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " i",
            " +",
            " ",
            "1",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 787,
        "prompt": "Write a python function that matches a string that has an a followed by three 'b'.\n\ndef text_match_three(text):\n",
        "answer": "def text_match_three(text):\n\tif text[0] == 'a' and text[1] == 'b' and text[2] == 'b' and text[3] == 'b':\n\t\treturn True\n\telse:\n\t\treturn False\n\n",
        "test_list": [
            "assert text_match_three(\"ac\")==('Not matched!')",
            "assert text_match_three(\"dc\")==('Not matched!')",
            "assert text_match_three(\"abbbba\")==('Found a match!')"
        ],
        "answer_list": [
            "\t",
            "if",
            " text",
            "[",
            "0",
            "]",
            " ==",
            " '",
            "a",
            "'",
            " and",
            " text",
            "[",
            "1",
            "]",
            " ==",
            " '",
            "b",
            "'",
            " and",
            " text",
            "[",
            "2",
            "]",
            " ==",
            " '",
            "b",
            "'",
            " and",
            " text",
            "[",
            "3",
            "]",
            " ==",
            " '",
            "b",
            "':",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 788,
        "prompt": "Write a python function to create a new tuple from the given string and list.\n\ndef new_tuple(test_list, test_str):\n",
        "answer": "def new_tuple(test_list, test_str):\n\treturn (test_str, test_list)\n\n",
        "test_list": [
            "assert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')",
            "assert new_tuple([\"We\", \"are\"], \"Developers\") == ('We', 'are', 'Developers')",
            "assert new_tuple([\"Part\", \"is\"], \"Wrong\") == ('Part', 'is', 'Wrong')"
        ],
        "answer_list": [
            "\t",
            "return",
            " (",
            "test",
            "_",
            "str",
            ",",
            " test",
            "_",
            "list",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 789,
        "prompt": "Write a python function to calculate the perimeter of a regular polygon.\n\ndef perimeter_polygon(s,l):\n",
        "answer": "def perimeter_polygon(s,l):\n\treturn s*l\n\n",
        "test_list": [
            "assert perimeter_polygon(4,20)==80",
            "assert perimeter_polygon(10,15)==150",
            "assert perimeter_polygon(9,7)==63"
        ],
        "answer_list": [
            "\t",
            "return",
            " s",
            "*",
            "l",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 790,
        "prompt": "Write a python function to check whether every even index contains even numbers of a given list.\n\ndef even_position(nums):\n",
        "answer": "def even_position(nums):\n\tfor i in range(0, len(nums), 2):\n\t\tif nums[i] % 2!= 0:\n\t\t\treturn False\n\treturn True\n\n",
        "test_list": [
            "assert even_position([3,2,1]) == False",
            "assert even_position([1,2,3]) == False",
            "assert even_position([2,1,4]) == True"
        ],
        "answer_list": [
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "0",
            ",",
            " len",
            "(",
            "nums",
            "),",
            " ",
            "2",
            "):",
            "\n\t",
            "\t",
            "if",
            " nums",
            "[",
            "i",
            "]",
            " %",
            " ",
            "2",
            "!=",
            " ",
            "0",
            ":",
            "\n\t\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "return",
            " True",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 791,
        "prompt": "Write a python function to remove the nested record from the given tuple.\n\ndef remove_nested(test_tup):\n",
        "answer": "def remove_nested(test_tup):\n\treturn test_tup[0]\n\n",
        "test_list": [
            "assert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)",
            "assert remove_nested((2, 6, 8, (5, 7), 11)) == (2, 6, 8, 11)",
            "assert remove_nested((3, 7, 9, (6, 8), 12)) == (3, 7, 9, 12)"
        ],
        "answer_list": [
            "\t",
            "return",
            " test",
            "_",
            "tup",
            "[",
            "0",
            "]",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 792,
        "prompt": "Write a python function to count the number of lists in a given number of lists.\n\ndef count_list(input_list): \n",
        "answer": "def count_list(input_list): \n\tcount = 0\n\tfor i in input_list:\n\t\tif isinstance(i, list):\n\t\t\tcount += 1\n\treturn count\n\n",
        "test_list": [
            "assert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4",
            "assert count_list([[1,2],[2,3],[4,5]]) == 3",
            "assert count_list([[1,0],[2,0]]) == 2"
        ],
        "answer_list": [
            "\t",
            "count",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " input",
            "_",
            "list",
            ":",
            "\n\t",
            "\t",
            "if",
            " isinstance",
            "(",
            "i",
            ",",
            " list",
            "):",
            "\n\t\t",
            "\t",
            "count",
            " +=",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " count",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 793,
        "prompt": "Write a python function to find the last position of an element in a sorted array.\n\ndef last(arr,x,n):\n",
        "answer": "def last(arr,x,n):\n\tif n==0:\n\t\treturn -1\n\tif arr[n-1]==x:\n\t\treturn n-1\n\treturn last(arr,x,n-1)\n\n",
        "test_list": [
            "assert last([1,2,3],1,3) == 0",
            "assert last([1,1,1,2,3,4],1,6) == 2",
            "assert last([2,3,2,3,6,8,9],3,8) == 3"
        ],
        "answer_list": [
            "\t",
            "if",
            " n",
            "==",
            "0",
            ":",
            "\n\t",
            "\t",
            "return",
            " -",
            "1",
            "\n",
            "\t",
            "if",
            " arr",
            "[",
            "n",
            "-",
            "1",
            "]==",
            "x",
            ":",
            "\n\t",
            "\t",
            "return",
            " n",
            "-",
            "1",
            "\n",
            "\t",
            "return",
            " last",
            "(",
            "arr",
            ",",
            "x",
            ",",
            "n",
            "-",
            "1",
            ")",
            "\n",
            "\n",
            "arr"
        ]
    },
    {
        "task_id": 794,
        "prompt": "Write a python function that matches a string that has an 'a' followed by anything, ending in 'b'.\n\ndef text_starta_endb(text):\n",
        "answer": "def text_starta_endb(text):\n\tif text[0] == 'a' and text[-1] == 'b':\n\t\treturn True\n\telse:\n\t\treturn False\n\n",
        "test_list": [
            "assert text_starta_endb(\"aabbbb\")==('Found a match!')",
            "assert text_starta_endb(\"aabAbbbc\")==('Not matched!')",
            "assert text_starta_endb(\"accddbbjjj\")==('Not matched!')"
        ],
        "answer_list": [
            "\t",
            "if",
            " text",
            "[",
            "0",
            "]",
            " ==",
            " '",
            "a",
            "'",
            " and",
            " text",
            "[-",
            "1",
            "]",
            " ==",
            " '",
            "b",
            "':",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 795,
        "prompt": "Write a python function to find the n - cheap price items from a given dataset using heap queue algorithm.\n\ndef cheap_items(items,n):\n",
        "answer": "def cheap_items(items,n):\n\theap = []\n\tfor i in items:\n\t\tif len(heap) < n:\n\t\t\theapq.heappush(heap,i)\n\t\telse:\n\t\t\tif i < heap[0]:\n\t\t\t\theapq.heappop(heap)\n\t\t\t\theapq.heappush(heap,i)\n\treturn heap\n\n",
        "test_list": [
            "assert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-1', 'price': 101.1}]",
            "assert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],2)==[{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}]",
            "assert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-4', 'price': 22.75}]"
        ],
        "answer_list": [
            "\t",
            "heap",
            " =",
            " []",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " items",
            ":",
            "\n\t",
            "\t",
            "if",
            " len",
            "(",
            "heap",
            ")",
            " <",
            " n",
            ":",
            "\n\t\t",
            "\t",
            "heap",
            "q",
            ".",
            "he",
            "app",
            "ush",
            "(",
            "heap",
            ",",
            "i",
            ")",
            "\n\t",
            "\t",
            "else",
            ":",
            "\n\t\t",
            "\t",
            "if",
            " i",
            " <",
            " heap",
            "[",
            "0",
            "]:",
            "\n\t\t\t",
            "\t",
            "heap",
            "q",
            ".",
            "he",
            "app",
            "op",
            "(",
            "heap",
            ")",
            "\n\t\t\t",
            "\t",
            "heap",
            "q",
            ".",
            "he",
            "app",
            "ush",
            "(",
            "heap",
            ",",
            "i",
            ")",
            "\n",
            "\t",
            "return",
            " heap",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 796,
        "prompt": "Write function to find the sum of all items in the given dictionary.\n\ndef return_sum(dict):\n",
        "answer": "def return_sum(dict):\n\tsum = 0\n\tfor key in dict:\n\t\tsum += dict[key]\n\treturn sum\n\n",
        "test_list": [
            "assert return_sum({'a': 100, 'b':200, 'c':300}) == 600",
            "assert return_sum({'a': 25, 'b':18, 'c':45}) == 88",
            "assert return_sum({'a': 36, 'b':39, 'c':49}) == 124"
        ],
        "answer_list": [
            "\t",
            "sum",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " key",
            " in",
            " dict",
            ":",
            "\n\t",
            "\t",
            "sum",
            " +=",
            " dict",
            "[",
            "key",
            "]",
            "\n",
            "\t",
            "return",
            " sum",
            "\n",
            "\n",
            "#"
        ]
    },
    {
        "task_id": 797,
        "prompt": "Write a python function to find the sum of all odd natural numbers within the range l and r.\n\ndef sum_in_Range(l,r): \n",
        "answer": "def sum_in_Range(l,r): \n\tsum = 0\n\tfor i in range(l,r+1):\n\t\tif i%2!= 0:\n\t\t\tsum += i\n\treturn sum\n\n",
        "test_list": [
            "assert sum_in_Range(2,5) == 8",
            "assert sum_in_Range(5,7) == 12",
            "assert sum_in_Range(7,13) == 40"
        ],
        "answer_list": [
            "\t",
            "sum",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "l",
            ",",
            "r",
            "+",
            "1",
            "):",
            "\n\t",
            "\t",
            "if",
            " i",
            "%",
            "2",
            "!=",
            " ",
            "0",
            ":",
            "\n\t\t",
            "\t",
            "sum",
            " +=",
            " i",
            "\n",
            "\t",
            "return",
            " sum",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 798,
        "prompt": "Write a python function to find the sum of an array.\n\ndef _sum(arr):  \n",
        "answer": "def _sum(arr):  \n\tsum = 0\n\tfor i in arr:\n\t\tsum += i\n\treturn sum\n\n",
        "test_list": [
            "assert _sum([1, 2, 3]) == 6",
            "assert _sum([15, 12, 13, 10]) == 50",
            "assert _sum([0, 1, 2]) == 3"
        ],
        "answer_list": [
            "\t",
            "sum",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " arr",
            ":",
            "\n\t",
            "\t",
            "sum",
            " +=",
            " i",
            "\n",
            "\t",
            "return",
            " sum",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 799,
        "prompt": "Write a python function to left rotate the bits of a given number.\n\ndef left_Rotate(n,d):   \n",
        "answer": "def left_Rotate(n,d):   \n\treturn ((n<<d) | (n>>(32-d))) & 0xffffffff\n\n",
        "test_list": [
            "assert left_Rotate(16,2) == 64",
            "assert left_Rotate(10,2) == 40",
            "assert left_Rotate(99,3) == 792"
        ],
        "answer_list": [
            "\t",
            "return",
            " ((",
            "n",
            "<<",
            "d",
            ")",
            " |",
            " (",
            "n",
            ">>(",
            "3",
            "2",
            "-",
            "d",
            ")))",
            " &",
            " ",
            "0",
            "xffffffff",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 800,
        "prompt": "Write a python function to remove all whitespaces from a string.\n\ndef remove_all_spaces(text):\n",
        "answer": "def remove_all_spaces(text):\n\treturn text.replace(\" \", \"\")\n\n",
        "test_list": [
            "assert remove_all_spaces('python  program')==('pythonprogram')",
            "assert remove_all_spaces('python   programming    language')==('pythonprogramminglanguage')",
            "assert remove_all_spaces('python                     program')==('pythonprogram')"
        ],
        "answer_list": [
            "\t",
            "return",
            " text",
            ".",
            "replace",
            "(\"",
            " \",",
            " \"\")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 801,
        "prompt": "Write a python function to count the number of equal numbers from three given integers.\n\ndef test_three_equal(x,y,z):\n",
        "answer": "def test_three_equal(x,y,z):\n\tif x == y == z:\n\t\treturn 3\n\telif x == y or y == z or x == z:\n\t\treturn 2\n\telse:\n\t\treturn 0\n\n",
        "test_list": [
            "assert test_three_equal(1,1,1) == 3",
            "assert test_three_equal(-1,-2,-3) == 0",
            "assert test_three_equal(1,2,2) == 2"
        ],
        "answer_list": [
            "\t",
            "if",
            " x",
            " ==",
            " y",
            " ==",
            " z",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "3",
            "\n",
            "\t",
            "elif",
            " x",
            " ==",
            " y",
            " or",
            " y",
            " ==",
            " z",
            " or",
            " x",
            " ==",
            " z",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "2",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "0",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 802,
        "prompt": "Write a python function to count the number of rotations required to generate a sorted array.\n\ndef count_Rotation(arr,n):   \n",
        "answer": "def count_Rotation(arr,n):   \n\tl=0\n\tr=n-1\n\twhile(l<=r):\n\t\tmid=(l+r)//2\n\t\tif(arr[mid]>arr[r]):\n\t\t\tl=mid+1\n\t\telif(arr[mid]<arr[r]):\n\t\t\tr=mid-1\n\t\telse:\n\t\t\tr-=1\n\treturn n-l\n\n",
        "test_list": [
            "assert count_Rotation([3,2,1],3) == 1",
            "assert count_Rotation([4,5,1,2,3],5) == 2",
            "assert count_Rotation([7,8,9,1,2,3],6) == 3"
        ],
        "answer_list": [
            "\t",
            "l",
            "=",
            "0",
            "\n",
            "\t",
            "r",
            "=",
            "n",
            "-",
            "1",
            "\n",
            "\t",
            "while",
            "(",
            "l",
            "<=",
            "r",
            "):",
            "\n\t",
            "\t",
            "mid",
            "=(",
            "l",
            "+",
            "r",
            ")//",
            "2",
            "\n\t",
            "\t",
            "if",
            "(",
            "arr",
            "[",
            "mid",
            "]>",
            "arr",
            "[",
            "r",
            "]):",
            "\n\t\t",
            "\t",
            "l",
            "=",
            "mid",
            "+",
            "1",
            "\n\t",
            "\t",
            "elif",
            "(",
            "arr",
            "[",
            "mid",
            "]<",
            "arr",
            "[",
            "r",
            "]):",
            "\n\t\t",
            "\t",
            "r",
            "=",
            "mid",
            "-",
            "1",
            "\n\t",
            "\t",
            "else",
            ":",
            "\n\t\t",
            "\t",
            "r",
            "-=",
            "1",
            "\n",
            "\t",
            "return",
            " n",
            "-",
            "l",
            "\n",
            "\n",
            "arr"
        ]
    },
    {
        "task_id": 803,
        "prompt": "Write a python function to check whether the given number is a perfect square or not.\n\ndef is_Perfect_Square(n) :\n",
        "answer": "def is_Perfect_Square(n) :\n\tif n == 1 :\n\t\treturn True\n\tif n == 0 or n % 2 == 1 :\n\t\treturn False\n\tx = n // 2\n\twhile x * x > n :\n\t\tx = (x + n // x) // 2\n\treturn x * x == n\n\n",
        "test_list": [
            "assert is_Perfect_Square(10) == False",
            "assert is_Perfect_Square(36) == True",
            "assert is_Perfect_Square(14) == False"
        ],
        "answer_list": [
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "1",
            " :",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "0",
            " or",
            " n",
            " %",
            " ",
            "2",
            " ==",
            " ",
            "1",
            " :",
            "\n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "x",
            " =",
            " n",
            " //",
            " ",
            "2",
            "\n",
            "\t",
            "while",
            " x",
            " *",
            " x",
            " >",
            " n",
            " :",
            "\n\t",
            "\t",
            "x",
            " =",
            " (",
            "x",
            " +",
            " n",
            " //",
            " x",
            ")",
            " //",
            " ",
            "2",
            "\n",
            "\t",
            "return",
            " x",
            " *",
            " x",
            " ==",
            " n",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 804,
        "prompt": "Write a python function to check whether the product of numbers is even or not.\n\ndef is_Product_Even(arr,n): \n",
        "answer": "def is_Product_Even(arr,n): \n\tproduct = 1\n\tfor i in range(n): \n\t\tproduct = product * arr[i] \n\tif product % 2 == 0: \n\t\treturn True\n\telse: \n\t\treturn False\n\n",
        "test_list": [
            "assert is_Product_Even([1,2,3],3) == True",
            "assert is_Product_Even([1,2,1,4],4) == True",
            "assert is_Product_Even([1,1],2) == False"
        ],
        "answer_list": [
            "\t",
            "product",
            " =",
            " ",
            "1",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "n",
            "):",
            " \n\t",
            "\t",
            "product",
            " =",
            " product",
            " *",
            " arr",
            "[",
            "i",
            "]",
            " \n",
            "\t",
            "if",
            " product",
            " %",
            " ",
            "2",
            " ==",
            " ",
            "0",
            ":",
            " \n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "else",
            ":",
            " \n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\n",
            "arr"
        ]
    },
    {
        "task_id": 805,
        "prompt": "Write a python function to find the list in a list of lists whose sum of elements is the highest.\n\ndef max_sum_list(lists):\n",
        "answer": "def max_sum_list(lists):\n\tmax_sum = 0\n\tmax_list = []\n\tfor list in lists:\n\t\tsum = 0\n\t\tfor element in list:\n\t\t\tsum += element\n\t\tif sum > max_sum:\n\t\t\tmax_sum = sum\n\t\t\tmax_list = list\n\treturn max_list\n\n",
        "test_list": [
            "assert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12] ",
            "assert max_sum_list([[3,2,1], [6,5,4], [12,11,10]])==[12,11,10] ",
            "assert max_sum_list([[2,3,1]])==[2,3,1] "
        ],
        "answer_list": [
            "\t",
            "max",
            "_",
            "sum",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "max",
            "_",
            "list",
            " =",
            " []",
            "\n",
            "\t",
            "for",
            " list",
            " in",
            " lists",
            ":",
            "\n\t",
            "\t",
            "sum",
            " =",
            " ",
            "0",
            "\n\t",
            "\t",
            "for",
            " element",
            " in",
            " list",
            ":",
            "\n\t\t",
            "\t",
            "sum",
            " +=",
            " element",
            "\n\t",
            "\t",
            "if",
            " sum",
            " >",
            " max",
            "_",
            "sum",
            ":",
            "\n\t\t",
            "\t",
            "max",
            "_",
            "sum",
            " =",
            " sum",
            "\n\t\t",
            "\t",
            "max",
            "_",
            "list",
            " =",
            " list",
            "\n",
            "\t",
            "return",
            " max",
            "_",
            "list",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 806,
        "prompt": "Write a python function to find maximum run of uppercase characters in the given string.\n\ndef max_run_uppercase(test_str):\n",
        "answer": "def max_run_uppercase(test_str):\n\tmax_run = 0\n\tcurrent_run = 0\n\tfor i in range(len(test_str)):\n\t\tif test_str[i].isupper():\n\t\t\tcurrent_run += 1\n\t\t\tif current_run > max_run:\n\t\t\t\tmax_run = current_run\n\t\telse:\n\t\t\tcurrent_run = 0\n\treturn max_run\n\n",
        "test_list": [
            "assert max_run_uppercase('GeMKSForGERksISBESt') == 5",
            "assert max_run_uppercase('PrECIOusMOVemENTSYT') == 6",
            "assert max_run_uppercase('GooGLEFluTTER') == 4"
        ],
        "answer_list": [
            "\t",
            "max",
            "_",
            "run",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "current",
            "_",
            "run",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "len",
            "(",
            "test",
            "_",
            "str",
            ")):",
            "\n\t",
            "\t",
            "if",
            " test",
            "_",
            "str",
            "[",
            "i",
            "].",
            "is",
            "upper",
            "():",
            "\n\t\t",
            "\t",
            "current",
            "_",
            "run",
            " +=",
            " ",
            "1",
            "\n\t\t",
            "\t",
            "if",
            " current",
            "_",
            "run",
            " >",
            " max",
            "_",
            "run",
            ":",
            "\n\t\t\t",
            "\t",
            "max",
            "_",
            "run",
            " =",
            " current",
            "_",
            "run",
            "\n\t",
            "\t",
            "else",
            ":",
            "\n\t\t",
            "\t",
            "current",
            "_",
            "run",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "return",
            " max",
            "_",
            "run",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 807,
        "prompt": "Write a python function to find the first odd number in a given list of numbers.\n\ndef first_odd(nums):\n",
        "answer": "def first_odd(nums):\n\tfor num in nums:\n\t\tif num % 2!= 0:\n\t\t\treturn num\n\treturn None\n\n",
        "test_list": [
            "assert first_odd([1,3,5]) == 1",
            "assert first_odd([2,4,1,3]) == 1",
            "assert first_odd ([8,9,1]) == 9"
        ],
        "answer_list": [
            "\t",
            "for",
            " num",
            " in",
            " nums",
            ":",
            "\n\t",
            "\t",
            "if",
            " num",
            " %",
            " ",
            "2",
            "!=",
            " ",
            "0",
            ":",
            "\n\t\t",
            "\t",
            "return",
            " num",
            "\n",
            "\t",
            "return",
            " None",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 808,
        "prompt": "Write a python function to check if the given tuples contain the k or not.\n\ndef check_K(test_tup, K):\n",
        "answer": "def check_K(test_tup, K):\n\tfor i in test_tup:\n\t\tif K in i:\n\t\t\treturn True\n\treturn False\n\n",
        "test_list": [
            "assert check_K((10, 4, 5, 6, 8), 6) == True",
            "assert check_K((1, 2, 3, 4, 5, 6), 7) == False",
            "assert check_K((7, 8, 9, 44, 11, 12), 11) == True"
        ],
        "answer_list": [
            "\t",
            "for",
            " i",
            " in",
            " test",
            "_",
            "tup",
            ":",
            "\n\t",
            "\t",
            "if",
            " K",
            " in",
            " i",
            ":",
            "\n\t\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "return",
            " False",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 809,
        "prompt": "Write a python function to check if each element of second tuple is smaller than its corresponding index in first tuple.\n\ndef check_smaller(test_tup1, test_tup2):\n",
        "answer": "def check_smaller(test_tup1, test_tup2):\n\tfor i in range(len(test_tup2)):\n\t\tif test_tup2[i] >= test_tup1[i]:\n\t\t\treturn False\n\treturn True\n\n",
        "test_list": [
            "assert check_smaller((1, 2, 3), (2, 3, 4)) == False",
            "assert check_smaller((4, 5, 6), (3, 4, 5)) == True",
            "assert check_smaller((11, 12, 13), (10, 11, 12)) == True"
        ],
        "answer_list": [
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "len",
            "(",
            "test",
            "_",
            "tup",
            "2",
            ")):",
            "\n\t",
            "\t",
            "if",
            " test",
            "_",
            "tup",
            "2",
            "[",
            "i",
            "]",
            " >=",
            " test",
            "_",
            "tup",
            "1",
            "[",
            "i",
            "]:",
            "\n\t\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "return",
            " True",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 810,
        "prompt": "Write a python function to iterate over elements repeating each as many times as its count.\n\ndef count_variable(a,b,c,d):\n",
        "answer": "def count_variable(a,b,c,d):\n\treturn [a,b,c,d]\n\n",
        "test_list": [
            "assert count_variable(4,2,0,-2)==['p', 'p', 'p', 'p', 'q', 'q'] ",
            "assert count_variable(0,1,2,3)==['q', 'r', 'r', 's', 's', 's'] ",
            "assert count_variable(11,15,12,23)==['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's']"
        ],
        "answer_list": [
            "\t",
            "return",
            " [",
            "a",
            ",",
            "b",
            ",",
            "c",
            ",",
            "d",
            "]",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 811,
        "prompt": "Write a python function to check if two lists of tuples are identical or not.\n\ndef check_identical(test_list1, test_list2):\n",
        "answer": "def check_identical(test_list1, test_list2):\n\tif len(test_list1)!= len(test_list2):\n\t\treturn False\n\tfor i in range(len(test_list1)):\n\t\tif test_list1[i]!= test_list2[i]:\n\t\t\treturn False\n\treturn True\n\n",
        "test_list": [
            "assert check_identical([(10, 4), (2, 5)], [(10, 4), (2, 5)]) == True",
            "assert check_identical([(1, 2), (3, 7)], [(12, 14), (12, 45)]) == False",
            "assert check_identical([(2, 14), (12, 25)], [(2, 14), (12, 25)]) == True"
        ],
        "answer_list": [
            "\t",
            "if",
            " len",
            "(",
            "test",
            "_",
            "list",
            "1",
            ")",
            "!=",
            " len",
            "(",
            "test",
            "_",
            "list",
            "2",
            "):",
            "\n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "len",
            "(",
            "test",
            "_",
            "list",
            "1",
            ")):",
            "\n\t",
            "\t",
            "if",
            " test",
            "_",
            "list",
            "1",
            "[",
            "i",
            "]",
            "!=",
            " test",
            "_",
            "list",
            "2",
            "[",
            "i",
            "]:",
            "\n\t\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "return",
            " True",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 812,
        "prompt": "Write a python function to abbreviate 'road' as 'rd.' in a given string.\n\ndef road_rd(street):\n",
        "answer": "def road_rd(street):\n\treturn street.replace('road', 'rd.')\n\n",
        "test_list": [
            "assert road_rd(\"ravipadu Road\")==('ravipadu Rd.')",
            "assert road_rd(\"palnadu Road\")==('palnadu Rd.')",
            "assert road_rd(\"eshwar enclave Road\")==('eshwar enclave Rd.')"
        ],
        "answer_list": [
            "\t",
            "return",
            " street",
            ".",
            "replace",
            "('",
            "road",
            "',",
            " '",
            "rd",
            ".')",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 813,
        "prompt": "Write a python function to find length of the string.\n\ndef string_length(str1):\n",
        "answer": "def string_length(str1):\n\treturn len(str1)\n\n",
        "test_list": [
            "assert string_length('python')==6",
            "assert string_length('program')==7",
            "assert string_length('language')==8"
        ],
        "answer_list": [
            "\t",
            "return",
            " len",
            "(",
            "str",
            "1",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 814,
        "prompt": "Write a python function to find the area of a rombus.\n\ndef rombus_area(p,q):\n",
        "answer": "def rombus_area(p,q):\n\treturn (p*q)/2\n\n",
        "test_list": [
            "assert rombus_area(10,20)==100",
            "assert rombus_area(10,5)==25",
            "assert rombus_area(4,2)==4"
        ],
        "answer_list": [
            "\t",
            "return",
            " (",
            "p",
            "*",
            "q",
            ")/",
            "2",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 815,
        "prompt": "Write a python function to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.\n\ndef sort_by_dnf(arr, n):\n",
        "answer": "def sort_by_dnf(arr, n):\n\tcount0 = 0\n\tcount1 = 0\n\tcount2 = 0\n\tfor i in range(n):\n\t\tif arr[i] == 0:\n\t\t\tcount0 += 1\n\t\telif arr[i] == 1:\n\t\t\tcount1 += 1\n\t\telse:\n\t\t\tcount2 += 1\n\tfor i in range(n):\n\t\tif count0 > 0:\n\t\t\tarr[i] = 0\n\t\t\tcount0 -= 1\n\t\telif count1 > 0:\n\t\t\tarr[i] = 1\n\t\t\tcount1 -= 1\n\t\telse:\n\t\t\tarr[i] = 2\n\treturn arr\n\n",
        "test_list": [
            "assert sort_by_dnf([1,2,0,1,0,1,2,1,1], 9) == [0, 0, 1, 1, 1, 1, 1, 2, 2]",
            "assert sort_by_dnf([1,0,0,1,2,1,2,2,1,0], 10) == [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]",
            "assert sort_by_dnf([2,2,1,0,0,0,1,1,2,1], 10) == [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]"
        ],
        "answer_list": [
            "\t",
            "count",
            "0",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "count",
            "1",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "count",
            "2",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "n",
            "):",
            "\n\t",
            "\t",
            "if",
            " arr",
            "[",
            "i",
            "]",
            " ==",
            " ",
            "0",
            ":",
            "\n\t\t",
            "\t",
            "count",
            "0",
            " +=",
            " ",
            "1",
            "\n\t",
            "\t",
            "elif",
            " arr",
            "[",
            "i",
            "]",
            " ==",
            " ",
            "1",
            ":",
            "\n\t\t",
            "\t",
            "count",
            "1",
            " +=",
            " ",
            "1",
            "\n\t",
            "\t",
            "else",
            ":",
            "\n\t\t",
            "\t",
            "count",
            "2",
            " +=",
            " ",
            "1",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "n",
            "):",
            "\n\t",
            "\t",
            "if",
            " count",
            "0",
            " >",
            " ",
            "0",
            ":",
            "\n\t\t",
            "\t",
            "arr",
            "[",
            "i",
            "]",
            " =",
            " ",
            "0",
            "\n\t\t",
            "\t",
            "count",
            "0",
            " -=",
            " ",
            "1",
            "\n\t",
            "\t",
            "elif",
            " count",
            "1",
            " >",
            " ",
            "0",
            ":",
            "\n\t\t",
            "\t",
            "arr",
            "[",
            "i",
            "]",
            " =",
            " ",
            "1",
            "\n\t\t",
            "\t",
            "count",
            "1",
            " -=",
            " ",
            "1",
            "\n\t",
            "\t",
            "else",
            ":",
            "\n\t\t",
            "\t",
            "arr",
            "[",
            "i",
            "]",
            " =",
            " ",
            "2",
            "\n",
            "\t",
            "return",
            " arr",
            "\n",
            "\n",
            "arr"
        ]
    },
    {
        "task_id": 816,
        "prompt": "Write a python function to clear the values of the given tuples.\n\ndef clear_tuple(test_tup):\n",
        "answer": "def clear_tuple(test_tup):\n\tfor i in range(len(test_tup)):\n\t\ttest_tup[i] = 0\n\treturn test_tup\n\n",
        "test_list": [
            "assert clear_tuple((1, 5, 3, 6, 8)) == ()",
            "assert clear_tuple((2, 1, 4 ,5 ,6)) == ()",
            "assert clear_tuple((3, 2, 5, 6, 8)) == ()"
        ],
        "answer_list": [
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "len",
            "(",
            "test",
            "_",
            "tup",
            ")):",
            "\n\t",
            "\t",
            "test",
            "_",
            "tup",
            "[",
            "i",
            "]",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "return",
            " test",
            "_",
            "tup",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 817,
        "prompt": "Write a python function to find numbers divisible by m or n from a list of numbers using lambda function.\n\ndef div_of_nums(nums,m,n):\n",
        "answer": "def div_of_nums(nums,m,n):\n\treturn list(filter(lambda x: (x%m==0 or x%n==0),nums))\n\n",
        "test_list": [
            "assert div_of_nums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190],19,13)==[19, 65, 57, 39, 152, 190]",
            "assert div_of_nums([1, 2, 3, 5, 7, 8, 10],2,5)==[2, 5, 8, 10]",
            "assert div_of_nums([10,15,14,13,18,12,20],10,5)==[10, 15, 20]"
        ],
        "answer_list": [
            "\t",
            "return",
            " list",
            "(",
            "filter",
            "(",
            "lambda",
            " x",
            ":",
            " (",
            "x",
            "%",
            "m",
            "==",
            "0",
            " or",
            " x",
            "%",
            "n",
            "==",
            "0",
            "),",
            "nums",
            "))",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 818,
        "prompt": "Write a python function to count lower case letters in a given string.\n\ndef lower_ctr(str):\n",
        "answer": "def lower_ctr(str):\n\tcount = 0\n\tfor i in str:\n\t\tif i.islower():\n\t\t\tcount += 1\n\treturn count\n\n",
        "test_list": [
            "assert lower_ctr('abc') == 3",
            "assert lower_ctr('string') == 6",
            "assert lower_ctr('Python') == 5"
        ],
        "answer_list": [
            "\t",
            "count",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " str",
            ":",
            "\n\t",
            "\t",
            "if",
            " i",
            ".",
            "is",
            "lower",
            "():",
            "\n\t\t",
            "\t",
            "count",
            " +=",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " count",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 819,
        "prompt": "Write a python function to count the frequency of consecutive duplicate elements in a given list of numbers.\n\ndef count_duplic(lists):\n",
        "answer": "def count_duplic(lists):\n\tcount = 0\n\tfor i in range(len(lists)):\n\t\tif i == 0:\n\t\t\tcontinue\n\t\telif lists[i] == lists[i-1]:\n\t\t\tcount += 1\n\t\telse:\n\t\t\tcount = 0\n\t\tif count == 2:\n\t\t\treturn True\n\treturn False\n\n",
        "test_list": [
            "assert count_duplic([1,2,2,2,4,4,4,5,5,5,5])==([1, 2, 4, 5], [1, 3, 3, 4])",
            "assert count_duplic([2,2,3,1,2,6,7,9])==([2, 3, 1, 2, 6, 7, 9], [2, 1, 1, 1, 1, 1, 1])",
            "assert count_duplic([2,1,5,6,8,3,4,9,10,11,8,12])==([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])"
        ],
        "answer_list": [
            "\t",
            "count",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "len",
            "(",
            "lists",
            ")):",
            "\n\t",
            "\t",
            "if",
            " i",
            " ==",
            " ",
            "0",
            ":",
            "\n\t\t",
            "\t",
            "continue",
            "\n\t",
            "\t",
            "elif",
            " lists",
            "[",
            "i",
            "]",
            " ==",
            " lists",
            "[",
            "i",
            "-",
            "1",
            "]:",
            "\n\t\t",
            "\t",
            "count",
            " +=",
            " ",
            "1",
            "\n\t",
            "\t",
            "else",
            ":",
            "\n\t\t",
            "\t",
            "count",
            " =",
            " ",
            "0",
            "\n\t",
            "\t",
            "if",
            " count",
            " ==",
            " ",
            "2",
            ":",
            "\n\t\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "return",
            " False",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 820,
        "prompt": "Write a python function to check whether the given month number contains 28 days or not.\n\ndef check_monthnum_number(monthnum1):\n",
        "answer": "def check_monthnum_number(monthnum1):\n\tif monthnum1 in [1,3,5,7,8,10,12]:\n\t\treturn True\n\telif monthnum1 in [4,6,9,11]:\n\t\treturn False\n\telse:\n\t\treturn \"Invalid month number\"\n\n",
        "test_list": [
            "assert check_monthnum_number(2)==True",
            "assert check_monthnum_number(1)==False",
            "assert check_monthnum_number(3)==False"
        ],
        "answer_list": [
            "\t",
            "if",
            " month",
            "num",
            "1",
            " in",
            " [",
            "1",
            ",",
            "3",
            ",",
            "5",
            ",",
            "7",
            ",",
            "8",
            ",",
            "1",
            "0",
            ",",
            "1",
            "2",
            "]:",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "elif",
            " month",
            "num",
            "1",
            " in",
            " [",
            "4",
            ",",
            "6",
            ",",
            "9",
            ",",
            "1",
            "1",
            "]:",
            "\n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "return",
            " \"",
            "Invalid",
            " month",
            " number",
            "\"",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 821,
        "prompt": "Write a python function to merge two dictionaries into a single expression.\n\ndef merge_dictionaries(dict1,dict2):\n",
        "answer": "def merge_dictionaries(dict1,dict2):\n\treturn {**dict1,**dict2}\n\n",
        "test_list": [
            "assert merge_dictionaries({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White'}",
            "assert merge_dictionaries({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'O': 'Orange', 'P': 'Pink', 'B': 'Black', 'W': 'White', 'R': 'Red'}",
            "assert merge_dictionaries({ \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'W': 'White', 'O': 'Orange', 'G': 'Green', 'B': 'Black'}"
        ],
        "answer_list": [
            "\t",
            "return",
            " {",
            "**",
            "dict",
            "1",
            ",**",
            "dict",
            "2",
            "}",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 822,
        "prompt": "Write a python function to return true if the password is valid.\n\ndef pass_validity(p):\n",
        "answer": "def pass_validity(p):\n\tif len(p) < 8:\n\t\treturn False\n\telif not any(i.isdigit() for i in p):\n\t\treturn False\n\telif not any(i.isupper() for i in p):\n\t\treturn False\n\telif not any(i.islower() for i in p):\n\t\treturn False\n\telse:\n\t\treturn True\n\n",
        "test_list": [
            "assert pass_validity(\"password\")==False",
            "assert pass_validity(\"Password@10\")==True",
            "assert pass_validity(\"password@10\")==False"
        ],
        "answer_list": [
            "\t",
            "if",
            " len",
            "(",
            "p",
            ")",
            " <",
            " ",
            "8",
            ":",
            "\n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "elif",
            " not",
            " any",
            "(",
            "i",
            ".",
            "isdigit",
            "()",
            " for",
            " i",
            " in",
            " p",
            "):",
            "\n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "elif",
            " not",
            " any",
            "(",
            "i",
            ".",
            "is",
            "upper",
            "()",
            " for",
            " i",
            " in",
            " p",
            "):",
            "\n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "elif",
            " not",
            " any",
            "(",
            "i",
            ".",
            "is",
            "lower",
            "()",
            " for",
            " i",
            " in",
            " p",
            "):",
            "\n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 823,
        "prompt": "Write a python function to check if the given string starts with a substring using regex.\n\ndef check_substring(string, sample) : \n",
        "answer": "def check_substring(string, sample) : \n\tif re.search(sample, string) : \n\t\treturn True\n\telse : \n\t\treturn False\n\n",
        "test_list": [
            "assert check_substring(\"dreams for dreams makes life fun\", \"makes\") == 'string doesnt start with the given substring'",
            "assert check_substring(\"Hi there how are you Hi alex\", \"Hi\") == 'string starts with the given substring'",
            "assert check_substring(\"Its been a long day\", \"been\") == 'string doesnt start with the given substring'"
        ],
        "answer_list": [
            "\t",
            "if",
            " re",
            ".",
            "search",
            "(",
            "sample",
            ",",
            " string",
            ")",
            " :",
            " \n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "else",
            " :",
            " \n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 824,
        "prompt": "Write a python function to remove even numbers from a given list.\n\ndef remove_even(l):\n",
        "answer": "def remove_even(l):\n\tl = [i for i in l if i%2!= 0]\n\treturn l\n\n",
        "test_list": [
            "assert remove_even([1,3,5,2]) == [1,3,5]",
            "assert remove_even([5,6,7]) == [5,7]",
            "assert remove_even([1,2,3,4]) == [1,3]"
        ],
        "answer_list": [
            "\t",
            "l",
            " =",
            " [",
            "i",
            " for",
            " i",
            " in",
            " l",
            " if",
            " i",
            "%",
            "2",
            "!=",
            " ",
            "0",
            "]",
            "\n",
            "\t",
            "return",
            " l",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 825,
        "prompt": "Write a python function to access multiple elements of specified index from a given list.\n\ndef access_elements(nums, list_index):\n",
        "answer": "def access_elements(nums, list_index):\n\treturn nums[list_index]\n\n",
        "test_list": [
            "assert access_elements([2,3,8,4,7,9],[0,3,5]) == [2, 4, 9]",
            "assert access_elements([1, 2, 3, 4, 5],[1,2]) == [2,3]",
            "assert access_elements([1,0,2,3],[0,1]) == [1,0]"
        ],
        "answer_list": [
            "\t",
            "return",
            " nums",
            "[",
            "list",
            "_",
            "index",
            "]",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 826,
        "prompt": "Write a python function to find the type of triangle from the given sides.\n\ndef check_Type_Of_Triangle(a,b,c): \n",
        "answer": "def check_Type_Of_Triangle(a,b,c): \n\tif a == b == c: \n\t\treturn \"Equilateral\"\n\telif a == b or b == c or a == c: \n\t\treturn \"Isosceles\"\n\telse: \n\t\treturn \"Scalene\"\n\n",
        "test_list": [
            "assert check_Type_Of_Triangle(1,2,3) == \"Obtuse-angled Triangle\"",
            "assert check_Type_Of_Triangle(2,2,2) == \"Acute-angled Triangle\"",
            "assert check_Type_Of_Triangle(1,0,1) == \"Right-angled Triangle\""
        ],
        "answer_list": [
            "\t",
            "if",
            " a",
            " ==",
            " b",
            " ==",
            " c",
            ":",
            " \n\t",
            "\t",
            "return",
            " \"",
            "Equ",
            "il",
            "ateral",
            "\"",
            "\n",
            "\t",
            "elif",
            " a",
            " ==",
            " b",
            " or",
            " b",
            " ==",
            " c",
            " or",
            " a",
            " ==",
            " c",
            ":",
            " \n\t",
            "\t",
            "return",
            " \"",
            "Is",
            "os",
            "ce",
            "les",
            "\"",
            "\n",
            "\t",
            "else",
            ":",
            " \n\t",
            "\t",
            "return",
            " \"",
            "Scal",
            "ene",
            "\"",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 827,
        "prompt": "Write a python function to sum a specific column of a list in a given list of lists.\n\ndef sum_column(list1, C):\n",
        "answer": "def sum_column(list1, C):\n\tsum = 0\n\tfor i in range(len(list1)):\n\t\tsum += list1[i][C]\n\treturn sum\n\n",
        "test_list": [
            "assert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],0)==12",
            "assert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],1)==15",
            "assert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],3)==9"
        ],
        "answer_list": [
            "\t",
            "sum",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "len",
            "(",
            "list",
            "1",
            ")):",
            "\n\t",
            "\t",
            "sum",
            " +=",
            " list",
            "1",
            "[",
            "i",
            "][",
            "C",
            "]",
            "\n",
            "\t",
            "return",
            " sum",
            "\n",
            "\n",
            "list"
        ]
    },
    {
        "task_id": 828,
        "prompt": "Write a python function to count alphabets,digits and special charactes in a given string.\n\ndef count_alpha_dig_spl(string):\n",
        "answer": "def count_alpha_dig_spl(string):\n\talpha = 0\n\tdig = 0\n\tspl = 0\n\tfor i in string:\n\t\tif i.isalpha():\n\t\t\talpha += 1\n\t\telif i.isdigit():\n\t\t\tdig += 1\n\t\telse:\n\t\t\tspl += 1\n\treturn alpha,dig,spl\n\n",
        "test_list": [
            "assert count_alpha_dig_spl(\"abc!@#123\")==(3,3,3)",
            "assert count_alpha_dig_spl(\"dgsuy@#$%&1255\")==(5,4,5)",
            "assert count_alpha_dig_spl(\"fjdsif627348#%$^&\")==(6,6,5)"
        ],
        "answer_list": [
            "\t",
            "alpha",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "dig",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "spl",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " string",
            ":",
            "\n\t",
            "\t",
            "if",
            " i",
            ".",
            "is",
            "alpha",
            "():",
            "\n\t\t",
            "\t",
            "alpha",
            " +=",
            " ",
            "1",
            "\n\t",
            "\t",
            "elif",
            " i",
            ".",
            "isdigit",
            "():",
            "\n\t\t",
            "\t",
            "dig",
            " +=",
            " ",
            "1",
            "\n\t",
            "\t",
            "else",
            ":",
            "\n\t\t",
            "\t",
            "spl",
            " +=",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " alpha",
            ",",
            "dig",
            ",",
            "spl",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 829,
        "prompt": "Write a python function to find out the second most repeated (or frequent) string in the given sequence.\n\ndef second_frequent(input): \n",
        "answer": "def second_frequent(input): \n\t# your code goes here\n\tdict = {}\n\tfor i in input:\n\t\tif i in dict:\n\t\t\tdict[i] += 1\n\t\telse:\n\t\t\tdict[i] = 1\n\tmax_count = 0\n\tmax_key = None\n\tfor key, value in dict.items():\n\t\tif value > max_count:\n\t\t\tmax_count = value\n\t\t\tmax_key = key\n\tdict.pop(max_key)\n\tmax_count = 0\n\tmax_key = None\n\tfor key, value in dict.items():\n\t\tif value > max_count:\n\t\t\tmax_count = value\n\t\t\tmax_key = key\n\treturn max_key\n\n",
        "test_list": [
            "assert second_frequent(['aaa','bbb','ccc','bbb','aaa','aaa']) == 'bbb'",
            "assert second_frequent(['abc','bcd','abc','bcd','bcd','bcd']) == 'abc'",
            "assert second_frequent(['cdma','gsm','hspa','gsm','cdma','cdma']) == 'gsm'"
        ],
        "answer_list": [
            "\t",
            "#",
            " your",
            " code",
            " goes",
            " here",
            "\n",
            "\t",
            "dict",
            " =",
            " {}",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " input",
            ":",
            "\n\t",
            "\t",
            "if",
            " i",
            " in",
            " dict",
            ":",
            "\n\t\t",
            "\t",
            "dict",
            "[",
            "i",
            "]",
            " +=",
            " ",
            "1",
            "\n\t",
            "\t",
            "else",
            ":",
            "\n\t\t",
            "\t",
            "dict",
            "[",
            "i",
            "]",
            " =",
            " ",
            "1",
            "\n",
            "\t",
            "max",
            "_",
            "count",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "max",
            "_",
            "key",
            " =",
            " None",
            "\n",
            "\t",
            "for",
            " key",
            ",",
            " value",
            " in",
            " dict",
            ".",
            "items",
            "():",
            "\n\t",
            "\t",
            "if",
            " value",
            " >",
            " max",
            "_",
            "count",
            ":",
            "\n\t\t",
            "\t",
            "max",
            "_",
            "count",
            " =",
            " value",
            "\n\t\t",
            "\t",
            "max",
            "_",
            "key",
            " =",
            " key",
            "\n",
            "\t",
            "dict",
            ".",
            "pop",
            "(",
            "max",
            "_",
            "key",
            ")",
            "\n",
            "\t",
            "max",
            "_",
            "count",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "max",
            "_",
            "key",
            " =",
            " None",
            "\n",
            "\t",
            "for",
            " key",
            ",",
            " value",
            " in",
            " dict",
            ".",
            "items",
            "():",
            "\n\t",
            "\t",
            "if",
            " value",
            " >",
            " max",
            "_",
            "count",
            ":",
            "\n\t\t",
            "\t",
            "max",
            "_",
            "count",
            " =",
            " value",
            "\n\t\t",
            "\t",
            "max",
            "_",
            "key",
            " =",
            " key",
            "\n",
            "\t",
            "return",
            " max",
            "_",
            "key",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 830,
        "prompt": "Write a python function to round up a number to specific digits.\n\ndef round_up(a, digits):\n",
        "answer": "def round_up(a, digits):\n\treturn round(a + 10 ** (-1 * digits))\n\n",
        "test_list": [
            "assert round_up(123.01247,0)==124",
            "assert round_up(123.01247,1)==123.1",
            "assert round_up(123.01247,2)==123.02"
        ],
        "answer_list": [
            "\t",
            "return",
            " round",
            "(",
            "a",
            " +",
            " ",
            "1",
            "0",
            " **",
            " (-",
            "1",
            " *",
            " digits",
            "))",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 831,
        "prompt": "Write a python function to count equal element pairs from the given array.\n\ndef count_Pairs(arr,n): \n",
        "answer": "def count_Pairs(arr,n): \n\tcount = 0\n\tfor i in range(n): \n\t\tfor j in range(i+1, n): \n\t\t\tif arr[i] == arr[j]: \n\t\t\t\tcount += 1\n\treturn count \n\n",
        "test_list": [
            "assert count_Pairs([1,1,1,1],4) == 6",
            "assert count_Pairs([1,5,1],3) == 1",
            "assert count_Pairs([3,2,1,7,8,9],6) == 0"
        ],
        "answer_list": [
            "\t",
            "count",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "n",
            "):",
            " \n\t",
            "\t",
            "for",
            " j",
            " in",
            " range",
            "(",
            "i",
            "+",
            "1",
            ",",
            " n",
            "):",
            " \n\t\t",
            "\t",
            "if",
            " arr",
            "[",
            "i",
            "]",
            " ==",
            " arr",
            "[",
            "j",
            "]:",
            " \n\t\t\t",
            "\t",
            "count",
            " +=",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " count",
            " \n",
            "\n",
            "arr"
        ]
    },
    {
        "task_id": 832,
        "prompt": "Write a python function to extract the maximum numeric value from a string by using regex.\n\ndef extract_max(input): \n",
        "answer": "def extract_max(input): \n\treturn int(re.search(r'\\d+', input).group())\n\n",
        "test_list": [
            "assert extract_max('100klh564abc365bg') == 564",
            "assert extract_max('hello300how546mer231') == 546",
            "assert extract_max('its233beenalong343journey234') == 343"
        ],
        "answer_list": [
            "\t",
            "return",
            " int",
            "(",
            "re",
            ".",
            "search",
            "(",
            "r",
            "'\\",
            "d",
            "+',",
            " input",
            ").",
            "group",
            "())",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 833,
        "prompt": "Write a python function to get dictionary keys as a list.\n\ndef get_key(dict): \n",
        "answer": "def get_key(dict): \n\treturn list(dict.keys())\n\n",
        "test_list": [
            "assert get_key({1:'python',2:'java'})==[1,2]",
            "assert get_key({10:'red',20:'blue',30:'black'})==[10,20,30]",
            "assert get_key({27:'language',39:'java',44:'little'})==[27,39,44]"
        ],
        "answer_list": [
            "\t",
            "return",
            " list",
            "(",
            "dict",
            ".",
            "keys",
            "())",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 834,
        "prompt": "Write a python function to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order.\n\ndef generate_matrix(n):\n",
        "answer": "def generate_matrix(n):\n\tmatrix = []\n\tfor i in range(n):\n\t\tmatrix.append([0]*n)\n\tx = 0\n\ty = 0\n\tdx = 0\n\tdy = -1\n\tfor i in range(1, n*n+1):\n\t\tmatrix[x][y] = i\n\t\tif x == y or (x < 0 and x == -y) or (x > n-1 and x == 1-y):\n\t\t\tdx, dy = -dy, dx\n\t\tx += dx\n\t\ty += dy\n\treturn matrix\n\n",
        "test_list": [
            "assert generate_matrix(3)==[[1, 2, 3], [8, 9, 4], [7, 6, 5]] ",
            "assert generate_matrix(2)==[[1,2],[4,3]]",
            "assert generate_matrix(7)==[[1, 2, 3, 4, 5, 6, 7], [24, 25, 26, 27, 28, 29, 8], [23, 40, 41, 42, 43, 30, 9], [22, 39, 48, 49, 44, 31, 10], [21, 38, 47, 46, 45, 32, 11], [20, 37, 36, 35, 34, 33, 12], [19, 18, 17, 16, 15, 14, 13]]"
        ],
        "answer_list": [
            "\t",
            "matrix",
            " =",
            " []",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "n",
            "):",
            "\n\t",
            "\t",
            "matrix",
            ".",
            "append",
            "([",
            "0",
            "]*",
            "n",
            ")",
            "\n",
            "\t",
            "x",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "y",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "dx",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "dy",
            " =",
            " -",
            "1",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "1",
            ",",
            " n",
            "*",
            "n",
            "+",
            "1",
            "):",
            "\n\t",
            "\t",
            "matrix",
            "[",
            "x",
            "][",
            "y",
            "]",
            " =",
            " i",
            "\n\t",
            "\t",
            "if",
            " x",
            " ==",
            " y",
            " or",
            " (",
            "x",
            " <",
            " ",
            "0",
            " and",
            " x",
            " ==",
            " -",
            "y",
            ")",
            " or",
            " (",
            "x",
            " >",
            " n",
            "-",
            "1",
            " and",
            " x",
            " ==",
            " ",
            "1",
            "-",
            "y",
            "):",
            "\n\t\t",
            "\t",
            "dx",
            ",",
            " dy",
            " =",
            " -",
            "dy",
            ",",
            " dx",
            "\n\t",
            "\t",
            "x",
            " +=",
            " dx",
            "\n\t",
            "\t",
            "y",
            " +=",
            " dy",
            "\n",
            "\t",
            "return",
            " matrix",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 835,
        "prompt": "Write a python function to find the slope of a line.\n\ndef slope(x1,y1,x2,y2): \n",
        "answer": "def slope(x1,y1,x2,y2): \n\treturn (y2-y1)/(x2-x1)\n\n",
        "test_list": [
            "assert slope(4,2,2,5) == -1.5",
            "assert slope(2,4,4,6) == 1",
            "assert slope(1,2,4,2) == 0"
        ],
        "answer_list": [
            "\t",
            "return",
            " (",
            "y",
            "2",
            "-",
            "y",
            "1",
            ")/(",
            "x",
            "2",
            "-",
            "x",
            "1",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 836,
        "prompt": "Write a python function to find length of the subarray having maximum sum.\n\ndef max_sub_array_sum(a,size): \n",
        "answer": "def max_sub_array_sum(a,size): \n\tmax_so_far = -2147483648\n\tmax_ending_here = 0\n\tstart = 0\n\tend = 0\n\tfor i in range(0, size): \n\t\tmax_ending_here = max_ending_here + a[i] \n\t\tif (max_so_far < max_ending_here): \n\t\t\tmax_so_far = max_ending_here \n\t\t\tstart = i \n\t\t\tend = i \n\t\tif (max_ending_here < 0): \n\t\t\tmax_ending_here = 0\n\tprint(\"Maximum contiguous sum is %d\" % max_so_far) \n\tprint(\"Starting index is %d\" % start) \n\tprint(\"Ending index is %d\" % end) \n\n",
        "test_list": [
            "assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3],8) == 5",
            "assert max_sub_array_sum([1, -2, 1, 1, -2, 1],6) == 2",
            "assert max_sub_array_sum([-1, -2, 3, 4, 5],5) == 3"
        ],
        "answer_list": [
            "\t",
            "max",
            "_",
            "so",
            "_",
            "far",
            " =",
            " -",
            "2",
            "1",
            "4",
            "7",
            "4",
            "8",
            "3",
            "6",
            "4",
            "8",
            "\n",
            "\t",
            "max",
            "_",
            "ending",
            "_",
            "here",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "start",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "end",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "0",
            ",",
            " size",
            "):",
            " \n\t",
            "\t",
            "max",
            "_",
            "ending",
            "_",
            "here",
            " =",
            " max",
            "_",
            "ending",
            "_",
            "here",
            " +",
            " a",
            "[",
            "i",
            "]",
            " \n\t",
            "\t",
            "if",
            " (",
            "max",
            "_",
            "so",
            "_",
            "far",
            " <",
            " max",
            "_",
            "ending",
            "_",
            "here",
            "):",
            " \n\t\t",
            "\t",
            "max",
            "_",
            "so",
            "_",
            "far",
            " =",
            " max",
            "_",
            "ending",
            "_",
            "here",
            " \n\t\t",
            "\t",
            "start",
            " =",
            " i",
            " \n\t\t",
            "\t",
            "end",
            " =",
            " i",
            " \n\t",
            "\t",
            "if",
            " (",
            "max",
            "_",
            "ending",
            "_",
            "here",
            " <",
            " ",
            "0",
            "):",
            " \n\t\t",
            "\t",
            "max",
            "_",
            "ending",
            "_",
            "here",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "print",
            "(\"",
            "Maximum",
            " contiguous",
            " sum",
            " is",
            " %",
            "d",
            "\"",
            " %",
            " max",
            "_",
            "so",
            "_",
            "far",
            ")",
            " \n",
            "\t",
            "print",
            "(\"",
            "Starting",
            " index",
            " is",
            " %",
            "d",
            "\"",
            " %",
            " start",
            ")",
            " \n",
            "\t",
            "print",
            "(\"",
            "Ending",
            " index",
            " is",
            " %",
            "d",
            "\"",
            " %",
            " end",
            ")",
            " \n",
            "\n",
            "a"
        ]
    },
    {
        "task_id": 837,
        "prompt": "Write a python function to find the cube sum of first n odd natural numbers.\n\ndef cube_Sum(n): \n",
        "answer": "def cube_Sum(n): \n\tsum = 0\n\tfor i in range(1,n,2):\n\t\tsum += i**3\n\treturn sum\n\n",
        "test_list": [
            "assert cube_Sum(2) == 28",
            "assert cube_Sum(3) == 153",
            "assert cube_Sum(4) == 496"
        ],
        "answer_list": [
            "\t",
            "sum",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "1",
            ",",
            "n",
            ",",
            "2",
            "):",
            "\n\t",
            "\t",
            "sum",
            " +=",
            " i",
            "**",
            "3",
            "\n",
            "\t",
            "return",
            " sum",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 838,
        "prompt": "Write a python function to find minimum number swaps required to make two binary strings equal.\n\ndef min_Swaps(s1,s2) :  \n",
        "answer": "def min_Swaps(s1,s2) :  \n\tn = len(s1)\n\tcount = 0\n\tfor i in range(n) : \n\t\tif s1[i]!= s2[i] : \n\t\t\tcount += 1\n\treturn count\n\n",
        "test_list": [
            "assert min_Swaps(\"0011\",\"1111\") == 1",
            "assert min_Swaps(\"00011\",\"01001\") == 2",
            "assert min_Swaps(\"111\",\"111\") == 0"
        ],
        "answer_list": [
            "\t",
            "n",
            " =",
            " len",
            "(",
            "s",
            "1",
            ")",
            "\n",
            "\t",
            "count",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "n",
            ")",
            " :",
            " \n\t",
            "\t",
            "if",
            " s",
            "1",
            "[",
            "i",
            "]",
            "!=",
            " s",
            "2",
            "[",
            "i",
            "]",
            " :",
            " \n\t\t",
            "\t",
            "count",
            " +=",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " count",
            "\n",
            "\n",
            "s"
        ]
    },
    {
        "task_id": 839,
        "prompt": "Write a python function to sort the tuples alphabetically by the first item of each tuple.\n\ndef sort_tuple(tup): \n",
        "answer": "def sort_tuple(tup): \n\ttup.sort(key = lambda x: x[0]) \n\treturn tup \n\n",
        "test_list": [
            "assert sort_tuple([(\"Amana\", 28), (\"Zenat\", 30), (\"Abhishek\", 29),(\"Nikhil\", 21), (\"B\", \"C\")]) == [('Abhishek', 29), ('Amana', 28), ('B', 'C'), ('Nikhil', 21), ('Zenat', 30)]",
            "assert sort_tuple([(\"aaaa\", 28), (\"aa\", 30), (\"bab\", 29), (\"bb\", 21), (\"csa\", \"C\")]) == [('aa', 30), ('aaaa', 28), ('bab', 29), ('bb', 21), ('csa', 'C')]",
            "assert sort_tuple([(\"Sarala\", 28), (\"Ayesha\", 30), (\"Suman\", 29),(\"Sai\", 21), (\"G\", \"H\")]) == [('Ayesha', 30), ('G', 'H'), ('Sai', 21), ('Sarala', 28), ('Suman', 29)]"
        ],
        "answer_list": [
            "\t",
            "tup",
            ".",
            "sort",
            "(",
            "key",
            " =",
            " lambda",
            " x",
            ":",
            " x",
            "[",
            "0",
            "])",
            " \n",
            "\t",
            "return",
            " tup",
            " \n",
            "\n",
            "#"
        ]
    },
    {
        "task_id": 840,
        "prompt": "Write a python function to check whether the roots of a quadratic equation are numerically equal but opposite in sign or not.\n\ndef Check_Solution(a,b,c):  \n",
        "answer": "def Check_Solution(a,b,c):  \n\td = b**2 - 4*a*c\n\tif d < 0:\n\t\treturn False\n\telse:\n\t\treturn True\n\n",
        "test_list": [
            "assert Check_Solution(2,0,-1) == \"Yes\"",
            "assert Check_Solution(1,-5,6) == \"No\"",
            "assert Check_Solution(2,0,2) == \"Yes\""
        ],
        "answer_list": [
            "\t",
            "d",
            " =",
            " b",
            "**",
            "2",
            " -",
            " ",
            "4",
            "*",
            "a",
            "*",
            "c",
            "\n",
            "\t",
            "if",
            " d",
            " <",
            " ",
            "0",
            ":",
            "\n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 841,
        "prompt": "Write a python function to count the number of inversions in the given array.\n\ndef get_inv_count(arr, n): \n",
        "answer": "def get_inv_count(arr, n): \n\tinv_count = 0\n\tfor i in range(n): \n\t\tfor j in range(i+1, n): \n\t\t\tif arr[i] > arr[j]: \n\t\t\t\tinv_count += 1\n\treturn inv_count\n\n",
        "test_list": [
            "assert get_inv_count([1, 20, 6, 4, 5], 5) == 5",
            "assert get_inv_count([8, 4, 2, 1], 4) == 6",
            "assert get_inv_count([3, 1, 2], 3) == 2"
        ],
        "answer_list": [
            "\t",
            "inv",
            "_",
            "count",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "n",
            "):",
            " \n\t",
            "\t",
            "for",
            " j",
            " in",
            " range",
            "(",
            "i",
            "+",
            "1",
            ",",
            " n",
            "):",
            " \n\t\t",
            "\t",
            "if",
            " arr",
            "[",
            "i",
            "]",
            " >",
            " arr",
            "[",
            "j",
            "]:",
            " \n\t\t\t",
            "\t",
            "inv",
            "_",
            "count",
            " +=",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " inv",
            "_",
            "count",
            "\n",
            "\n",
            "arr"
        ]
    },
    {
        "task_id": 842,
        "prompt": "Write a python function to find the number which occurs for odd number of times in the given array.\n\ndef get_odd_occurence(arr, arr_size):\n",
        "answer": "def get_odd_occurence(arr, arr_size):\n\t# Initialize result\n\tresult = 0\n\n",
        "test_list": [
            "assert get_odd_occurence([2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2], 13) == 5",
            "assert get_odd_occurence([1, 2, 3, 2, 3, 1, 3], 7) == 3",
            "assert get_odd_occurence([5, 7, 2, 7, 5, 2, 5], 7) == 5"
        ],
        "answer_list": [
            "\t",
            "#",
            " Initialize",
            " result",
            "\n",
            "\t",
            "result",
            " =",
            " ",
            "0",
            "\n\n",
            "\t"
        ]
    },
    {
        "task_id": 843,
        "prompt": "Write a python function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.\n\ndef nth_super_ugly_number(n, primes):\n",
        "answer": "def nth_super_ugly_number(n, primes):\n\theap = []\n\theapq.heappush(heap, 1)\n\tugly_numbers = [1]\n\tfor i in range(n):\n\t\tugly_number = heapq.heappop(heap)\n\t\tugly_numbers.append(ugly_number)\n\t\tfor prime in primes:\n\t\t\theapq.heappush(heap, ugly_number * prime)\n\treturn ugly_numbers[-1]\n\n",
        "test_list": [
            "assert nth_super_ugly_number(12,[2,7,13,19])==32",
            "assert nth_super_ugly_number(10,[2,7,13,19])==26",
            "assert nth_super_ugly_number(100,[2,7,13,19])==5408"
        ],
        "answer_list": [
            "\t",
            "heap",
            " =",
            " []",
            "\n",
            "\t",
            "heap",
            "q",
            ".",
            "he",
            "app",
            "ush",
            "(",
            "heap",
            ",",
            " ",
            "1",
            ")",
            "\n",
            "\t",
            "ug",
            "ly",
            "_",
            "numbers",
            " =",
            " [",
            "1",
            "]",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "n",
            "):",
            "\n\t",
            "\t",
            "ug",
            "ly",
            "_",
            "number",
            " =",
            " heap",
            "q",
            ".",
            "he",
            "app",
            "op",
            "(",
            "heap",
            ")",
            "\n\t",
            "\t",
            "ug",
            "ly",
            "_",
            "numbers",
            ".",
            "append",
            "(",
            "ug",
            "ly",
            "_",
            "number",
            ")",
            "\n\t",
            "\t",
            "for",
            " prime",
            " in",
            " pri",
            "mes",
            ":",
            "\n\t\t",
            "\t",
            "heap",
            "q",
            ".",
            "he",
            "app",
            "ush",
            "(",
            "heap",
            ",",
            " ugly",
            "_",
            "number",
            " *",
            " prime",
            ")",
            "\n",
            "\t",
            "return",
            " ugly",
            "_",
            "numbers",
            "[-",
            "1",
            "]",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 844,
        "prompt": "Write a python function to find the kth element in an array containing odd elements first and then even elements.\n\ndef get_Number(n, k): \n",
        "answer": "def get_Number(n, k): \n\tif n == 1: \n\t\treturn k \n\tif n%2 == 0: \n\t\treturn get_Number(n/2, k/2) \n\telse: \n\t\tif k == 1: \n\t\t\treturn n \n\t\tif k%2 == 0: \n\t\t\treturn get_Number(n/2, (k+1)/2) \n\t\telse: \n\t\t\treturn get_Number(n + 1, k/2) \n\n",
        "test_list": [
            "assert get_Number(8,5) == 2",
            "assert get_Number(7,2) == 3",
            "assert get_Number(5,2) == 3"
        ],
        "answer_list": [
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "1",
            ":",
            " \n\t",
            "\t",
            "return",
            " k",
            " \n",
            "\t",
            "if",
            " n",
            "%",
            "2",
            " ==",
            " ",
            "0",
            ":",
            " \n\t",
            "\t",
            "return",
            " get",
            "_",
            "Number",
            "(",
            "n",
            "/",
            "2",
            ",",
            " k",
            "/",
            "2",
            ")",
            " \n",
            "\t",
            "else",
            ":",
            " \n\t",
            "\t",
            "if",
            " k",
            " ==",
            " ",
            "1",
            ":",
            " \n\t\t",
            "\t",
            "return",
            " n",
            " \n\t",
            "\t",
            "if",
            " k",
            "%",
            "2",
            " ==",
            " ",
            "0",
            ":",
            " \n\t\t",
            "\t",
            "return",
            " get",
            "_",
            "Number",
            "(",
            "n",
            "/",
            "2",
            ",",
            " (",
            "k",
            "+",
            "1",
            ")/",
            "2",
            ")",
            " \n\t",
            "\t",
            "else",
            ":",
            " \n\t\t",
            "\t",
            "return",
            " get",
            "_",
            "Number",
            "(",
            "n",
            " +",
            " ",
            "1",
            ",",
            " k",
            "/",
            "2",
            ")",
            " \n",
            "\n",
            "n"
        ]
    },
    {
        "task_id": 845,
        "prompt": "Write a python function to count the number of digits in factorial of a given number.\n\ndef find_Digits(n): \n",
        "answer": "def find_Digits(n): \n\tif n == 0: \n\t\treturn 1\n\telse: \n\t\treturn (n % 10) + find_Digits(int(n / 10)) \n\n",
        "test_list": [
            "assert find_Digits(7) == 4",
            "assert find_Digits(5) == 3",
            "assert find_Digits(4) == 2"
        ],
        "answer_list": [
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "0",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "1",
            "\n",
            "\t",
            "else",
            ":",
            " \n\t",
            "\t",
            "return",
            " (",
            "n",
            " %",
            " ",
            "1",
            "0",
            ")",
            " +",
            " find",
            "_",
            "Digits",
            "(",
            "int",
            "(",
            "n",
            " /",
            " ",
            "1",
            "0",
            "))",
            " \n",
            "\n",
            "n"
        ]
    },
    {
        "task_id": 846,
        "prompt": "Write a python function to find the minimum number of platforms required for a railway/bus station.\n\ndef find_platform(arr, dep, n): \n",
        "answer": "def find_platform(arr, dep, n): \n\tarr.sort() \n\tdep.sort() \n\ti = 1\n\tj = 0\n\tcount = 1\n\twhile (i < n and j < n): \n\t\tif (arr[i] < dep[j]): \n\t\t\tcount += 1\n\t\t\ti += 1\n\t\telse: \n\t\t\tcount -= 1\n\t\t\tj += 1\n\treturn count \n\n",
        "test_list": [
            "assert find_platform([900, 940, 950, 1100, 1500, 1800],[910, 1200, 1120, 1130, 1900, 2000],6)==3",
            "assert find_platform([100,200,300,400],[700,800,900,1000],4)==4",
            "assert find_platform([5,6,7,8],[4,3,2,1],4)==1"
        ],
        "answer_list": [
            "\t",
            "arr",
            ".",
            "sort",
            "()",
            " \n",
            "\t",
            "dep",
            ".",
            "sort",
            "()",
            " \n",
            "\t",
            "i",
            " =",
            " ",
            "1",
            "\n",
            "\t",
            "j",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "count",
            " =",
            " ",
            "1",
            "\n",
            "\t",
            "while",
            " (",
            "i",
            " <",
            " n",
            " and",
            " j",
            " <",
            " n",
            "):",
            " \n\t",
            "\t",
            "if",
            " (",
            "arr",
            "[",
            "i",
            "]",
            " <",
            " dep",
            "[",
            "j",
            "]):",
            " \n\t\t",
            "\t",
            "count",
            " +=",
            " ",
            "1",
            "\n\t\t",
            "\t",
            "i",
            " +=",
            " ",
            "1",
            "\n\t",
            "\t",
            "else",
            ":",
            " \n\t\t",
            "\t",
            "count",
            " -=",
            " ",
            "1",
            "\n\t\t",
            "\t",
            "j",
            " +=",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " count",
            " \n",
            "\n",
            "#"
        ]
    },
    {
        "task_id": 847,
        "prompt": "Write a python function to copy a list from a singleton tuple.\n\ndef lcopy(xs):\n",
        "answer": "def lcopy(xs):\n\treturn list(xs)\n\n",
        "test_list": [
            "assert lcopy([1, 2, 3]) == [1, 2, 3]",
            "assert lcopy([4, 8, 2, 10, 15, 18]) == [4, 8, 2, 10, 15, 18]",
            "assert lcopy([4, 5, 6]) == [4, 5, 6]\n"
        ],
        "answer_list": [
            "\t",
            "return",
            " list",
            "(",
            "xs",
            ")",
            "\n",
            "\n",
            "#"
        ]
    },
    {
        "task_id": 848,
        "prompt": "Write a python function to find the area of a trapezium.\n\ndef area_trapezium(base1,base2,height):\n",
        "answer": "def area_trapezium(base1,base2,height):\n\treturn 0.5*(base1+base2)*height\n\n",
        "test_list": [
            "assert area_trapezium(6,9,4)==30",
            "assert area_trapezium(10,20,30)==450",
            "assert area_trapezium(15,25,35)==700"
        ],
        "answer_list": [
            "\t",
            "return",
            " ",
            "0",
            ".",
            "5",
            "*(",
            "base",
            "1",
            "+",
            "base",
            "2",
            ")*",
            "height",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 849,
        "prompt": "Write a python function to find sum of all prime divisors of a given number.\n\ndef Sum(N): \n",
        "answer": "def Sum(N): \n\tsum = 0\n\tfor i in range(1,N+1): \n\t\tif N%i == 0: \n\t\t\tsum += i \n\treturn sum \n\n",
        "test_list": [
            "assert Sum(60) == 10",
            "assert Sum(39) == 16",
            "assert Sum(40) == 7"
        ],
        "answer_list": [
            "\t",
            "sum",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "1",
            ",",
            "N",
            "+",
            "1",
            "):",
            " \n\t",
            "\t",
            "if",
            " N",
            "%",
            "i",
            " ==",
            " ",
            "0",
            ":",
            " \n\t\t",
            "\t",
            "sum",
            " +=",
            " i",
            " \n",
            "\t",
            "return",
            " sum",
            " \n",
            "\n",
            "N"
        ]
    },
    {
        "task_id": 850,
        "prompt": "Write a python function to check if a triangle of positive area is possible with the given angles.\n\ndef is_triangleexists(a,b,c): \n",
        "answer": "def is_triangleexists(a,b,c): \n\tif a+b>c and a+c>b and b+c>a: \n\t\treturn True\n\telse: \n\t\treturn False\n\n",
        "test_list": [
            "assert is_triangleexists(50,60,70)==True",
            "assert is_triangleexists(90,45,45)==True",
            "assert is_triangleexists(150,30,70)==False"
        ],
        "answer_list": [
            "\t",
            "if",
            " a",
            "+",
            "b",
            ">",
            "c",
            " and",
            " a",
            "+",
            "c",
            ">",
            "b",
            " and",
            " b",
            "+",
            "c",
            ">",
            "a",
            ":",
            " \n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "else",
            ":",
            " \n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 851,
        "prompt": "Write a python function to find sum of inverse of divisors.\n\ndef Sum_of_Inverse_Divisors(N,Sum): \n",
        "answer": "def Sum_of_Inverse_Divisors(N,Sum): \n\tfor i in range(1,N+1): \n\t\tif N%i==0: \n\t\t\tSum+=1/i \n\treturn Sum \n\n",
        "test_list": [
            "assert Sum_of_Inverse_Divisors(6,12) == 2",
            "assert Sum_of_Inverse_Divisors(9,13) == 1.44",
            "assert Sum_of_Inverse_Divisors(1,4) == 4"
        ],
        "answer_list": [
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "1",
            ",",
            "N",
            "+",
            "1",
            "):",
            " \n\t",
            "\t",
            "if",
            " N",
            "%",
            "i",
            "==",
            "0",
            ":",
            " \n\t\t",
            "\t",
            "Sum",
            "+=",
            "1",
            "/",
            "i",
            " \n",
            "\t",
            "return",
            " Sum",
            " \n",
            "\n",
            "N"
        ]
    },
    {
        "task_id": 852,
        "prompt": "Write a python function to remove negative numbers from a list.\n\ndef remove_negs(num_list): \n",
        "answer": "def remove_negs(num_list): \n\tnew_list = []\n\tfor num in num_list:\n\t\tif num >= 0:\n\t\t\tnew_list.append(num)\n\treturn new_list\n\n",
        "test_list": [
            "assert remove_negs([1,-2,3,-4]) == [1,3]",
            "assert remove_negs([1,2,3,-4]) == [1,2,3]",
            "assert remove_negs([4,5,-6,7,-8]) == [4,5,7]"
        ],
        "answer_list": [
            "\t",
            "new",
            "_",
            "list",
            " =",
            " []",
            "\n",
            "\t",
            "for",
            " num",
            " in",
            " num",
            "_",
            "list",
            ":",
            "\n\t",
            "\t",
            "if",
            " num",
            " >=",
            " ",
            "0",
            ":",
            "\n\t\t",
            "\t",
            "new",
            "_",
            "list",
            ".",
            "append",
            "(",
            "num",
            ")",
            "\n",
            "\t",
            "return",
            " new",
            "_",
            "list",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 853,
        "prompt": "Write a python function to find sum of odd factors of a number.\n\ndef sum_of_odd_Factors(n): \n",
        "answer": "def sum_of_odd_Factors(n): \n\tsum = 0\n\tfor i in range(1, n+1): \n\t\tif n % i == 0 and i % 2!= 0: \n\t\t\tsum += i \n\treturn sum \n\n",
        "test_list": [
            "assert sum_of_odd_Factors(30) == 24",
            "assert sum_of_odd_Factors(18) == 13",
            "assert sum_of_odd_Factors(2) == 1"
        ],
        "answer_list": [
            "\t",
            "sum",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "1",
            ",",
            " n",
            "+",
            "1",
            "):",
            " \n\t",
            "\t",
            "if",
            " n",
            " %",
            " i",
            " ==",
            " ",
            "0",
            " and",
            " i",
            " %",
            " ",
            "2",
            "!=",
            " ",
            "0",
            ":",
            " \n\t\t",
            "\t",
            "sum",
            " +=",
            " i",
            " \n",
            "\t",
            "return",
            " sum",
            " \n",
            "\n",
            "n"
        ]
    },
    {
        "task_id": 854,
        "prompt": "Write a python function which accepts an arbitrary list and converts it to a heap using heap queue algorithm.\n\ndef raw_heap(rawheap):\n",
        "answer": "def raw_heap(rawheap):\n\theap = []\n\tfor i in rawheap:\n\t\theap.append(i)\n\t\theapq.heapify(heap)\n\treturn heap\n\n",
        "test_list": [
            "assert raw_heap([25, 44, 68, 21, 39, 23, 89])==[21, 25, 23, 44, 39, 68, 89]",
            "assert raw_heap([25, 35, 22, 85, 14, 65, 75, 25, 58])== [14, 25, 22, 25, 35, 65, 75, 85, 58]",
            "assert raw_heap([4, 5, 6, 2])==[2, 4, 6, 5]"
        ],
        "answer_list": [
            "\t",
            "heap",
            " =",
            " []",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " raw",
            "heap",
            ":",
            "\n\t",
            "\t",
            "heap",
            ".",
            "append",
            "(",
            "i",
            ")",
            "\n\t",
            "\t",
            "heap",
            "q",
            ".",
            "heap",
            "ify",
            "(",
            "heap",
            ")",
            "\n",
            "\t",
            "return",
            " heap",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 855,
        "prompt": "Write a python function to check for even parity of a given number.\n\ndef check_Even_Parity(x): \n",
        "answer": "def check_Even_Parity(x): \n\tif x % 2 == 0: \n\t\treturn True\n\telse: \n\t\treturn False\n\n",
        "test_list": [
            "assert check_Even_Parity(10) == True",
            "assert check_Even_Parity(11) == False",
            "assert check_Even_Parity(18) == True"
        ],
        "answer_list": [
            "\t",
            "if",
            " x",
            " %",
            " ",
            "2",
            " ==",
            " ",
            "0",
            ":",
            " \n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "else",
            ":",
            " \n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 856,
        "prompt": "Write a python function to find minimum adjacent swaps required to sort binary array.\n\ndef find_Min_Swaps(arr,n) : \n",
        "answer": "def find_Min_Swaps(arr,n) : \n\tcount = 0\n\tfor i in range(n-1) : \n\t\tif arr[i] > arr[i+1] : \n\t\t\tarr[i], arr[i+1] = arr[i+1], arr[i]\n\t\t\tcount += 1\n\treturn count\n\n",
        "test_list": [
            "assert find_Min_Swaps([1,0,1,0],4) == 3",
            "assert find_Min_Swaps([0,1,0],3) == 1",
            "assert find_Min_Swaps([0,0,1,1,0],5) == 2"
        ],
        "answer_list": [
            "\t",
            "count",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "n",
            "-",
            "1",
            ")",
            " :",
            " \n\t",
            "\t",
            "if",
            " arr",
            "[",
            "i",
            "]",
            " >",
            " arr",
            "[",
            "i",
            "+",
            "1",
            "]",
            " :",
            " \n\t\t",
            "\t",
            "arr",
            "[",
            "i",
            "],",
            " arr",
            "[",
            "i",
            "+",
            "1",
            "]",
            " =",
            " arr",
            "[",
            "i",
            "+",
            "1",
            "],",
            " arr",
            "[",
            "i",
            "]",
            "\n\t\t",
            "\t",
            "count",
            " +=",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " count",
            "\n",
            "\n",
            "arr"
        ]
    },
    {
        "task_id": 857,
        "prompt": "Write a python function to list out the list of given strings individually using map function.\n\ndef listify_list(list1):\n",
        "answer": "def listify_list(list1):\n\treturn list(map(list,list1))\n\n",
        "test_list": [
            "assert listify_list(['Red', 'Blue', 'Black', 'White', 'Pink'])==[['R', 'e', 'd'], ['B', 'l', 'u', 'e'], ['B', 'l', 'a', 'c', 'k'], ['W', 'h', 'i', 't', 'e'], ['P', 'i', 'n', 'k']]",
            "assert listify_list(['python'])==[['p', 'y', 't', 'h', 'o', 'n']]",
            "assert listify_list([' red ', 'green',' black', 'blue ',' orange', 'brown'])==[[' ', 'r', 'e', 'd', ' '], ['g', 'r', 'e', 'e', 'n'], [' ', 'b', 'l', 'a', 'c', 'k'], ['b', 'l', 'u', 'e', ' '], [' ', 'o', 'r', 'a', 'n', 'g', 'e'], ['b', 'r', 'o', 'w', 'n']]"
        ],
        "answer_list": [
            "\t",
            "return",
            " list",
            "(",
            "map",
            "(",
            "list",
            ",",
            "list",
            "1",
            "))",
            "\n",
            "\n",
            "list"
        ]
    },
    {
        "task_id": 858,
        "prompt": "Write a python function to count number of lists in a given list of lists and square the count.\n\ndef count_list(input_list): \n",
        "answer": "def count_list(input_list): \n\tcount = 0\n\tfor i in input_list:\n\t\tif type(i) == list:\n\t\t\tcount += 1\n\treturn count**2\n\n",
        "test_list": [
            "assert count_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==25",
            "assert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]] )==16",
            "assert count_list([[2, 4], [[6,8], [4,5,8]], [10, 12, 14]])==9"
        ],
        "answer_list": [
            "\t",
            "count",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " input",
            "_",
            "list",
            ":",
            "\n\t",
            "\t",
            "if",
            " type",
            "(",
            "i",
            ")",
            " ==",
            " list",
            ":",
            "\n\t\t",
            "\t",
            "count",
            " +=",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " count",
            "**",
            "2",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 859,
        "prompt": "Write a python function to generate all sublists of a given list.\n\ndef sub_lists(my_list):\n",
        "answer": "def sub_lists(my_list):\n\tsub_lists = []\n\tfor i in range(len(my_list)+1):\n\t\tfor j in range(i+1, len(my_list)+1):\n\t\t\tsub_lists.append(my_list[i:j])\n\treturn sub_lists\n\n",
        "test_list": [
            "assert sub_lists([10, 20, 30, 40])==[[], [10], [20], [30], [40], [10, 20], [10, 30], [10, 40], [20, 30], [20, 40], [30, 40], [10, 20, 30], [10, 20, 40], [10, 30, 40], [20, 30, 40], [10, 20, 30, 40]]",
            "assert sub_lists(['X', 'Y', 'Z'])==[[], ['X'], ['Y'], ['Z'], ['X', 'Y'], ['X', 'Z'], ['Y', 'Z'], ['X', 'Y', 'Z']]",
            "assert sub_lists([1,2,3])==[[],[1],[2],[3],[1,2],[1,3],[2,3],[1,2,3]]"
        ],
        "answer_list": [
            "\t",
            "sub",
            "_",
            "lists",
            " =",
            " []",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "len",
            "(",
            "my",
            "_",
            "list",
            ")+",
            "1",
            "):",
            "\n\t",
            "\t",
            "for",
            " j",
            " in",
            " range",
            "(",
            "i",
            "+",
            "1",
            ",",
            " len",
            "(",
            "my",
            "_",
            "list",
            ")+",
            "1",
            "):",
            "\n\t\t",
            "\t",
            "sub",
            "_",
            "lists",
            ".",
            "append",
            "(",
            "my",
            "_",
            "list",
            "[",
            "i",
            ":",
            "j",
            "])",
            "\n",
            "\t",
            "return",
            " sub",
            "_",
            "lists",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 860,
        "prompt": "Write a python function to check whether the given string is ending with only alphanumeric characters or not using regex.\n\ndef check_alphanumeric(string): \n",
        "answer": "def check_alphanumeric(string): \n\tif re.search(r'^[a-zA-Z0-9]*$', string): \n\t\treturn True\n\telse: \n\t\treturn False\n\n",
        "test_list": [
            "assert check_alphanumeric(\"dawood@\") == 'Discard'",
            "assert check_alphanumeric(\"skdmsam326\") == 'Accept'",
            "assert check_alphanumeric(\"cooltricks@\") == 'Discard'"
        ],
        "answer_list": [
            "\t",
            "if",
            " re",
            ".",
            "search",
            "(",
            "r",
            "'^",
            "[",
            "a",
            "-",
            "zA",
            "-",
            "Z",
            "0",
            "-",
            "9",
            "]*",
            "$',",
            " string",
            "):",
            " \n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "else",
            ":",
            " \n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\n",
            "string"
        ]
    },
    {
        "task_id": 861,
        "prompt": "Write a python function to find all anagrams of a string in a given list of strings using lambda function.\n\ndef anagram_lambda(texts,str):\n",
        "answer": "def anagram_lambda(texts,str):\n\treturn list(filter(lambda x: sorted(x)==sorted(str),texts))\n\n",
        "test_list": [
            "assert anagram_lambda([\"bcda\", \"abce\", \"cbda\", \"cbea\", \"adcb\"],\"abcd\")==['bcda', 'cbda', 'adcb']",
            "assert anagram_lambda([\"recitals\",\" python\"], \"articles\" )==[\"recitals\"]",
            "assert anagram_lambda([\" keep\",\" abcdef\",\" xyz\"],\" peek\")==[\" keep\"]"
        ],
        "answer_list": [
            "\t",
            "return",
            " list",
            "(",
            "filter",
            "(",
            "lambda",
            " x",
            ":",
            " sorted",
            "(",
            "x",
            ")==",
            "sorted",
            "(",
            "str",
            "),",
            "texts",
            "))",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 862,
        "prompt": "Write a python function to find the occurrences of n most common words in a given text.\n\ndef n_common_words(text,n):\n",
        "answer": "def n_common_words(text,n):\n\twords = text.split()\n\twords_dict = {}\n\tfor word in words:\n\t\tif word in words_dict:\n\t\t\twords_dict[word] += 1\n\t\telse:\n\t\t\twords_dict[word] = 1\n\tsorted_words = sorted(words_dict.items(), key=lambda x: x[1], reverse=True)\n\treturn sorted_words[:n]\n\n",
        "test_list": [
            "assert n_common_words(\"python is a programming language\",1)==[('python', 1)]",
            "assert n_common_words(\"python is a programming language\",1)==[('python', 1)]",
            "assert n_common_words(\"python is a programming language\",5)==[('python', 1),('is', 1), ('a', 1), ('programming', 1), ('language', 1)]"
        ],
        "answer_list": [
            "\t",
            "words",
            " =",
            " text",
            ".",
            "split",
            "()",
            "\n",
            "\t",
            "words",
            "_",
            "dict",
            " =",
            " {}",
            "\n",
            "\t",
            "for",
            " word",
            " in",
            " words",
            ":",
            "\n\t",
            "\t",
            "if",
            " word",
            " in",
            " words",
            "_",
            "dict",
            ":",
            "\n\t\t",
            "\t",
            "words",
            "_",
            "dict",
            "[",
            "word",
            "]",
            " +=",
            " ",
            "1",
            "\n\t",
            "\t",
            "else",
            ":",
            "\n\t\t",
            "\t",
            "words",
            "_",
            "dict",
            "[",
            "word",
            "]",
            " =",
            " ",
            "1",
            "\n",
            "\t",
            "sorted",
            "_",
            "words",
            " =",
            " sorted",
            "(",
            "words",
            "_",
            "dict",
            ".",
            "items",
            "(),",
            " key",
            "=",
            "lambda",
            " x",
            ":",
            " x",
            "[",
            "1",
            "],",
            " reverse",
            "=",
            "True",
            ")",
            "\n",
            "\t",
            "return",
            " sorted",
            "_",
            "words",
            "[:",
            "n",
            "]",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 863,
        "prompt": "Write a python function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.\n\ndef find_longest_conseq_subseq(arr, n): \n",
        "answer": "def find_longest_conseq_subseq(arr, n): \n\tmax_len = 0\n\tcurr_len = 1\n\tarr.sort() \n\tfor i in range(1, n): \n\t\tif arr[i] == arr[i - 1] + 1: \n\t\t\tcurr_len += 1\n\t\t\tmax_len = max(max_len, curr_len) \n\t\telse: \n\t\t\tcurr_len = 1\n\treturn max_len \n\n",
        "test_list": [
            "assert find_longest_conseq_subseq([1, 2, 2, 3], 4) == 3",
            "assert find_longest_conseq_subseq([1, 9, 3, 10, 4, 20, 2], 7) == 4",
            "assert find_longest_conseq_subseq([36, 41, 56, 35, 44, 33, 34, 92, 43, 32, 42], 11) == 5"
        ],
        "answer_list": [
            "\t",
            "max",
            "_",
            "len",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "curr",
            "_",
            "len",
            " =",
            " ",
            "1",
            "\n",
            "\t",
            "arr",
            ".",
            "sort",
            "()",
            " \n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "1",
            ",",
            " n",
            "):",
            " \n\t",
            "\t",
            "if",
            " arr",
            "[",
            "i",
            "]",
            " ==",
            " arr",
            "[",
            "i",
            " -",
            " ",
            "1",
            "]",
            " +",
            " ",
            "1",
            ":",
            " \n\t\t",
            "\t",
            "curr",
            "_",
            "len",
            " +=",
            " ",
            "1",
            "\n\t\t",
            "\t",
            "max",
            "_",
            "len",
            " =",
            " max",
            "(",
            "max",
            "_",
            "len",
            ",",
            " curr",
            "_",
            "len",
            ")",
            " \n\t",
            "\t",
            "else",
            ":",
            " \n\t\t",
            "\t",
            "curr",
            "_",
            "len",
            " =",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " max",
            "_",
            "len",
            " \n",
            "\n",
            "#"
        ]
    },
    {
        "task_id": 864,
        "prompt": "Write a python function to find palindromes in a given list of strings using lambda function.\n\ndef palindrome_lambda(texts):\n",
        "answer": "def palindrome_lambda(texts):\n\treturn list(filter(lambda text: text == text[::-1], texts))\n\n",
        "test_list": [
            "assert palindrome_lambda([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])==['php', 'aaa']",
            "assert palindrome_lambda([\"abcd\", \"Python\", \"abba\", \"aba\"])==['abba', 'aba']",
            "assert palindrome_lambda([\"abcd\", \"abbccbba\", \"abba\", \"aba\"])==['abbccbba', 'abba', 'aba']"
        ],
        "answer_list": [
            "\t",
            "return",
            " list",
            "(",
            "filter",
            "(",
            "lambda",
            " text",
            ":",
            " text",
            " ==",
            " text",
            "[",
            "::-",
            "1",
            "],",
            " texts",
            "))",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 865,
        "prompt": "Write a python function to print n-times a list using map function.\n\ndef ntimes_list(nums,n):\n",
        "answer": "def ntimes_list(nums,n):\n\treturn list(map(lambda x: x*n,nums))\n\n",
        "test_list": [
            "assert ntimes_list([1, 2, 3, 4, 5, 6, 7],3)==[3, 6, 9, 12, 15, 18, 21]",
            "assert ntimes_list([1, 2, 3, 4, 5, 6, 7],4)==[4, 8, 12, 16, 20, 24, 28]",
            "assert ntimes_list([1, 2, 3, 4, 5, 6, 7],10)==[10, 20, 30, 40, 50, 60, 70]"
        ],
        "answer_list": [
            "\t",
            "return",
            " list",
            "(",
            "map",
            "(",
            "lambda",
            " x",
            ":",
            " x",
            "*",
            "n",
            ",",
            "nums",
            "))",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 866,
        "prompt": "Write a python function to check whether the given month name contains 31 days or not.\n\ndef check_monthnumb(monthname2):\n",
        "answer": "def check_monthnumb(monthname2):\n\tif monthname2 == \"January\" or monthname2 == \"March\" or monthname2 == \"May\" or monthname2 == \"July\" or monthname2 == \"August\" or monthname2 == \"October\" or monthname2 == \"December\":\n\t\treturn True\n\telse:\n\t\treturn False\n\n",
        "test_list": [
            "assert check_monthnumb(\"February\")==False",
            "assert check_monthnumb(\"January\")==True",
            "assert check_monthnumb(\"March\")==True"
        ],
        "answer_list": [
            "\t",
            "if",
            " month",
            "name",
            "2",
            " ==",
            " \"",
            "January",
            "\"",
            " or",
            " month",
            "name",
            "2",
            " ==",
            " \"",
            "March",
            "\"",
            " or",
            " month",
            "name",
            "2",
            " ==",
            " \"",
            "May",
            "\"",
            " or",
            " month",
            "name",
            "2",
            " ==",
            " \"",
            "July",
            "\"",
            " or",
            " month",
            "name",
            "2",
            " ==",
            " \"",
            "Aug",
            "ust",
            "\"",
            " or",
            " month",
            "name",
            "2",
            " ==",
            " \"",
            "Oct",
            "ober",
            "\"",
            " or",
            " month",
            "name",
            "2",
            " ==",
            " \"",
            "De",
            "cember",
            "\":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 867,
        "prompt": "Write a python function to add a minimum number such that the sum of array becomes even.\n\ndef min_Num(arr,n):  \n",
        "answer": "def min_Num(arr,n):  \n\tif sum(arr)%2!=0:\n\t\treturn 1\n\telse:\n\t\treturn 0\n\n",
        "test_list": [
            "assert min_Num([1,2,3,4,5,6,7,8,9],9) == 1",
            "assert min_Num([1,2,3,4,5,6,7,8],8) == 2",
            "assert min_Num([1,2,3],3) == 2"
        ],
        "answer_list": [
            "\t",
            "if",
            " sum",
            "(",
            "arr",
            ")%",
            "2",
            "!=",
            "0",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "0",
            "\n",
            "\n",
            "arr"
        ]
    },
    {
        "task_id": 868,
        "prompt": "Write a python function to find the length of the last word in a given string.\n\ndef length_Of_Last_Word(a): \n",
        "answer": "def length_Of_Last_Word(a): \n\treturn len(a.split()[-1])\n\n",
        "test_list": [
            "assert length_Of_Last_Word(\"python language\") == 8",
            "assert length_Of_Last_Word(\"PHP\") == 3",
            "assert length_Of_Last_Word(\"\") == 0"
        ],
        "answer_list": [
            "\t",
            "return",
            " len",
            "(",
            "a",
            ".",
            "split",
            "()",
            "[-",
            "1",
            "])",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 869,
        "prompt": "Write a python function to remove sublists from a given list of lists, which are outside a given range.\n\ndef remove_list_range(list1, leftrange, rigthrange):\n",
        "answer": "def remove_list_range(list1, leftrange, rigthrange):\n\tnewlist = []\n\tfor i in list1:\n\t\tif i[0] >= leftrange and i[0] <= rigthrange:\n\t\t\tnewlist.append(i)\n\treturn newlist\n\n",
        "test_list": [
            "assert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],13,17)==[[13, 14, 15, 17]]",
            "assert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],1,3)==[[2], [1, 2, 3]]",
            "assert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],0,7)==[[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7]]"
        ],
        "answer_list": [
            "\t",
            "new",
            "list",
            " =",
            " []",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " list",
            "1",
            ":",
            "\n\t",
            "\t",
            "if",
            " i",
            "[",
            "0",
            "]",
            " >=",
            " lef",
            "tr",
            "ange",
            " and",
            " i",
            "[",
            "0",
            "]",
            " <=",
            " rig",
            "th",
            "range",
            ":",
            "\n\t\t",
            "\t",
            "new",
            "list",
            ".",
            "append",
            "(",
            "i",
            ")",
            "\n",
            "\t",
            "return",
            " new",
            "list",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 870,
        "prompt": "Write a python function to calculate the sum of the positive numbers of a given list of numbers using lambda function.\n\ndef sum_positivenum(nums):\n",
        "answer": "def sum_positivenum(nums):\n\treturn sum(list(filter(lambda x: x>0, nums)))\n\n",
        "test_list": [
            "assert sum_positivenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==48",
            "assert sum_positivenum([10,15,-14,13,-18,12,-20])==50",
            "assert sum_positivenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==522"
        ],
        "answer_list": [
            "\t",
            "return",
            " sum",
            "(",
            "list",
            "(",
            "filter",
            "(",
            "lambda",
            " x",
            ":",
            " x",
            ">",
            "0",
            ",",
            " nums",
            ")))",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 871,
        "prompt": "Write a python function to check whether the given strings are rotations of each other or not.\n\ndef are_Rotations(string1,string2): \n",
        "answer": "def are_Rotations(string1,string2): \n\tif len(string1)!= len(string2): \n\t\treturn False\n\treturn string1 in string2 + string2 \n\n",
        "test_list": [
            "assert are_Rotations(\"abc\",\"cba\") == False",
            "assert are_Rotations(\"abcd\",\"cdba\") == False",
            "assert are_Rotations(\"abacd\",\"cdaba\") == True"
        ],
        "answer_list": [
            "\t",
            "if",
            " len",
            "(",
            "string",
            "1",
            ")",
            "!=",
            " len",
            "(",
            "string",
            "2",
            "):",
            " \n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "return",
            " string",
            "1",
            " in",
            " string",
            "2",
            " +",
            " string",
            "2",
            " \n",
            "\n",
            "string"
        ]
    },
    {
        "task_id": 872,
        "prompt": "Write a python function to check if a nested list is a subset of another nested list.\n\ndef check_subset(list1,list2): \n",
        "answer": "def check_subset(list1,list2): \n\tif list1 == list2: \n\t\treturn True\n\tif len(list1) == 0: \n\t\treturn True\n\tif len(list2) == 0: \n\t\treturn False\n\tif list1[0] == list2[0]: \n\t\treturn check_subset(list1[1:],list2[1:])\n\treturn check_subset(list1,list2[1:])\n\n",
        "test_list": [
            "assert check_subset([[1, 3], [5, 7], [9, 11], [13, 15, 17]] ,[[1, 3],[13,15,17]])==True",
            "assert check_subset([[1, 2], [2, 3], [3, 4], [5, 6]],[[3, 4], [5, 6]])==True",
            "assert check_subset([[[1, 2], [2, 3]], [[3, 4], [5, 7]]],[[[3, 4], [5, 6]]])==False"
        ],
        "answer_list": [
            "\t",
            "if",
            " list",
            "1",
            " ==",
            " list",
            "2",
            ":",
            " \n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " len",
            "(",
            "list",
            "1",
            ")",
            " ==",
            " ",
            "0",
            ":",
            " \n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " len",
            "(",
            "list",
            "2",
            ")",
            " ==",
            " ",
            "0",
            ":",
            " \n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "if",
            " list",
            "1",
            "[",
            "0",
            "]",
            " ==",
            " list",
            "2",
            "[",
            "0",
            "]:",
            " \n\t",
            "\t",
            "return",
            " check",
            "_",
            "subset",
            "(",
            "list",
            "1",
            "[",
            "1",
            ":],",
            "list",
            "2",
            "[",
            "1",
            ":])",
            "\n",
            "\t",
            "return",
            " check",
            "_",
            "subset",
            "(",
            "list",
            "1",
            ",",
            "list",
            "2",
            "[",
            "1",
            ":])",
            "\n",
            "\n",
            "#"
        ]
    },
    {
        "task_id": 873,
        "prompt": "Write a python function to solve the fibonacci sequence using recursion.\n\ndef fibonacci(n):\n",
        "answer": "def fibonacci(n):\n\tif n == 0:\n\t\treturn 0\n\telif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn fibonacci(n-1) + fibonacci(n-2)\n\n",
        "test_list": [
            "assert fibonacci(7) == 13",
            "assert fibonacci(8) == 21",
            "assert fibonacci(9) == 34"
        ],
        "answer_list": [
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "0",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "0",
            "\n",
            "\t",
            "elif",
            " n",
            " ==",
            " ",
            "1",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "return",
            " fib",
            "onacci",
            "(",
            "n",
            "-",
            "1",
            ")",
            " +",
            " fib",
            "onacci",
            "(",
            "n",
            "-",
            "2",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 874,
        "prompt": "Write a python function to check if the string is a concatenation of another string.\n\ndef check_Concat(str1,str2):\n",
        "answer": "def check_Concat(str1,str2):\n\tif str1 in str2:\n\t\treturn True\n\telse:\n\t\treturn False\n\n",
        "test_list": [
            "assert check_Concat(\"abcabcabc\",\"abc\") == True",
            "assert check_Concat(\"abcab\",\"abc\") == False",
            "assert check_Concat(\"aba\",\"ab\") == False"
        ],
        "answer_list": [
            "\t",
            "if",
            " str",
            "1",
            " in",
            " str",
            "2",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 875,
        "prompt": "Write a python function to find the minimum difference in the tuple pairs of given tuples.\n\ndef min_difference(test_list):\n",
        "answer": "def min_difference(test_list):\n\tmin_diff
        "test_list": [
            "assert min_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 1",
            "assert min_difference([(4, 6), (12, 8), (11, 4), (2, 13)]) == 2",
            "assert min_difference([(5, 17), (3, 9), (12, 5), (3, 24)]) == 6"
        ],
        "answer_list": [
            "\t",
            "min",
            "_",
            "diff",
            " =",
            " ",
            "1",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0",
            "0"
        ]
    },
    {
        "task_id": 876,
        "prompt": "Write a python function to find lcm of two positive integers.\n\ndef lcm(x, y):\n",
        "answer": "def lcm(x, y):\n\tif x > y:\n\t\tgreater = x\n\telse:\n\t\tgreater = y\n\twhile(True):\n\t\tif((greater % x == 0) and (greater % y == 0)):\n\t\t\tlcm = greater\n\t\t\tbreak\n\t\tgreater += 1\n\treturn lcm\n\n",
        "test_list": [
            "assert lcm(4,6) == 12",
            "assert lcm(15,17) == 255",
            "assert lcm(2,6) == 6"
        ],
        "answer_list": [
            "\t",
            "if",
            " x",
            " >",
            " y",
            ":",
            "\n\t",
            "\t",
            "greater",
            " =",
            " x",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "greater",
            " =",
            " y",
            "\n",
            "\t",
            "while",
            "(",
            "True",
            "):",
            "\n\t",
            "\t",
            "if",
            "((",
            "greater",
            " %",
            " x",
            " ==",
            " ",
            "0",
            ")",
            " and",
            " (",
            "greater",
            " %",
            " y",
            " ==",
            " ",
            "0",
            ")):",
            "\n\t\t",
            "\t",
            "l",
            "cm",
            " =",
            " greater",
            "\n\t\t",
            "\t",
            "break",
            "\n\t",
            "\t",
            "greater",
            " +=",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " l",
            "cm",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 877,
        "prompt": "Write a python function to sort the given string.\n\ndef sort_String(str) : \n",
        "answer": "def sort_String(str) : \n\treturn ''.join(sorted(str))\n\n",
        "test_list": [
            "assert sort_String(\"cba\") == \"abc\"",
            "assert sort_String(\"data\") == \"aadt\"",
            "assert sort_String(\"zxy\") == \"xyz\""
        ],
        "answer_list": [
            "\t",
            "return",
            " ''.",
            "join",
            "(",
            "sorted",
            "(",
            "str",
            "))",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 878,
        "prompt": "Write a python function to check if the given tuple contains only k elements.\n\ndef check_tuples(test_tuple, K):\n",
        "answer": "def check_tuples(test_tuple, K):\n\tif len(test_tuple) == K:\n\t\treturn True\n\telse:\n\t\treturn False\n\n",
        "test_list": [
            "assert check_tuples((3, 5, 6, 5, 3, 6),[3, 6, 5]) == True",
            "assert check_tuples((4, 5, 6, 4, 6, 5),[4, 5, 6]) == True",
            "assert check_tuples((9, 8, 7, 6, 8, 9),[9, 8, 1]) == False"
        ],
        "answer_list": [
            "\t",
            "if",
            " len",
            "(",
            "test",
            "_",
            "tuple",
            ")",
            " ==",
            " K",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 879,
        "prompt": "Write a python function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.\n\ndef text_match(text):\n",
        "answer": "def text_match(text):\n\treturn re.search(r'a.*b', text)\n\n",
        "test_list": [
            "assert text_match(\"aabbbbd\") == 'Not matched!'",
            "assert text_match(\"aabAbbbc\") == 'Not matched!'",
            "assert text_match(\"accddbbjjjb\") == 'Found a match!'"
        ],
        "answer_list": [
            "\t",
            "return",
            " re",
            ".",
            "search",
            "(",
            "r",
            "'",
            "a",
            ".*",
            "b",
            "',",
            " text",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 880,
        "prompt": "Write a python function to find number of solutions in quadratic equation.\n\ndef Check_Solution(a,b,c) : \n",
        "answer": "def Check_Solution(a,b,c) : \n\td = b**2 - 4*a*c\n\tif d > 0 : \n\t\treturn 2\n\telif d == 0 : \n\t\treturn 1\n\telse : \n\t\treturn 0\n\n",
        "test_list": [
            "assert Check_Solution(2,5,2) == \"2 solutions\"",
            "assert Check_Solution(1,1,1) == \"No solutions\"",
            "assert Check_Solution(1,2,1) == \"1 solution\""
        ],
        "answer_list": [
            "\t",
            "d",
            " =",
            " b",
            "**",
            "2",
            " -",
            " ",
            "4",
            "*",
            "a",
            "*",
            "c",
            "\n",
            "\t",
            "if",
            " d",
            " >",
            " ",
            "0",
            " :",
            " \n\t",
            "\t",
            "return",
            " ",
            "2",
            "\n",
            "\t",
            "elif",
            " d",
            " ==",
            " ",
            "0",
            " :",
            " \n\t",
            "\t",
            "return",
            " ",
            "1",
            "\n",
            "\t",
            "else",
            " :",
            " \n\t",
            "\t",
            "return",
            " ",
            "0",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 881,
        "prompt": "Write a python function to find the sum of first even and odd number of a given list.\n\ndef sum_even_odd(list1):\n",
        "answer": "def sum_even_odd(list1):\n\tsum_even = 0\n\tsum_odd = 0\n\tfor i in list1:\n\t\tif i%2 == 0:\n\t\t\tsum_even += i\n\t\telse:\n\t\t\tsum_odd += i\n\treturn sum_even, sum_odd\n\n",
        "test_list": [
            "assert sum_even_odd([1,3,5,7,4,1,6,8])==5",
            "assert sum_even_odd([1,2,3,4,5,6,7,8,9,10])==3",
            "assert sum_even_odd([1,5,7,9,10])==11"
        ],
        "answer_list": [
            "\t",
            "sum",
            "_",
            "even",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "sum",
            "_",
            "odd",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " list",
            "1",
            ":",
            "\n\t",
            "\t",
            "if",
            " i",
            "%",
            "2",
            " ==",
            " ",
            "0",
            ":",
            "\n\t\t",
            "\t",
            "sum",
            "_",
            "even",
            " +=",
            " i",
            "\n\t",
            "\t",
            "else",
            ":",
            "\n\t\t",
            "\t",
            "sum",
            "_",
            "odd",
            " +=",
            " i",
            "\n",
            "\t",
            "return",
            " sum",
            "_",
            "even",
            ",",
            " sum",
            "_",
            "odd",
            "\n",
            "\n",
            "list"
        ]
    },
    {
        "task_id": 882,
        "prompt": "Write a python function to caluclate perimeter of a parallelogram.\n\ndef parallelogram_perimeter(b,h):\n",
        "answer": "def parallelogram_perimeter(b,h):\n\treturn 2*b + 2*h\n\n",
        "test_list": [
            "assert parallelogram_perimeter(10,20)==400",
            "assert parallelogram_perimeter(15,20)==600",
            "assert parallelogram_perimeter(8,9)==144"
        ],
        "answer_list": [
            "\t",
            "return",
            " ",
            "2",
            "*",
            "b",
            " +",
            " ",
            "2",
            "*",
            "h",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 883,
        "prompt": "Write a python function to find numbers divisible by m and n from a list of numbers using lambda function.\n\ndef div_of_nums(nums,m,n):\n",
        "answer": "def div_of_nums(nums,m,n):\n\treturn list(filter(lambda x: (x%m==0) and (x%n==0),nums))\n\n",
        "test_list": [
            "assert div_of_nums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190],2,4)==[ 152,44]",
            "assert div_of_nums([1, 2, 3, 5, 7, 8, 10],2,5)==[10]",
            "assert div_of_nums([10,15,14,13,18,12,20],10,5)==[10,20]"
        ],
        "answer_list": [
            "\t",
            "return",
            " list",
            "(",
            "filter",
            "(",
            "lambda",
            " x",
            ":",
            " (",
            "x",
            "%",
            "m",
            "==",
            "0",
            ")",
            " and",
            " (",
            "x",
            "%",
            "n",
            "==",
            "0",
            "),",
            "nums",
            "))",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 884,
        "prompt": "Write a python function to check whether all the bits are within a given range or not.\n\ndef all_Bits_Set_In_The_Given_Range(n,l,r): \n",
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r): \n\treturn (n & ((1<<r)-1)) == ((1<<l)-1)\n\n",
        "test_list": [
            "assert all_Bits_Set_In_The_Given_Range(10,2,1) == True ",
            "assert all_Bits_Set_In_The_Given_Range(5,2,4) == False",
            "assert all_Bits_Set_In_The_Given_Range(22,2,3) == True "
        ],
        "answer_list": [
            "\t",
            "return",
            " (",
            "n",
            " &",
            " ((",
            "1",
            "<<",
            "r",
            ")-",
            "1",
            "))",
            " ==",
            " ((",
            "1",
            "<<",
            "l",
            ")-",
            "1",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 885,
        "prompt": "Write a python function to check whether the two given strings are isomorphic to each other or not.\n\ndef is_Isomorphic(str1,str2):          \n",
        "answer": "def is_Isomorphic(str1,str2):          \n\tif len(str1)!= len(str2):\n\t\treturn False\n\telse:\n\t\tstr1_dict = {}\n\t\tstr2_dict = {}\n\t\tfor i in range(len(str1)):\n\t\t\tif str1[i] in str1_dict:\n\t\t\t\tif str1_dict[str1[i]]!= str2[i]:\n\t\t\t\t\treturn False\n\t\t\telse:\n\t\t\t\tstr1_dict[str1[i]] = str2[i]\n\t\t\tif str2[i] in str2_dict:\n\t\t\t\tif str2_dict[str2[i]]!= str1[i]:\n\t\t\t\t\treturn False\n\t\t\telse:\n\t\t\t\tstr2_dict[str2[i]] = str1[i]\n\t\treturn True\n\n",
        "test_list": [
            "assert is_Isomorphic(\"paper\",\"title\") == True",
            "assert is_Isomorphic(\"ab\",\"ba\") == True",
            "assert is_Isomorphic(\"ab\",\"aa\") == False"
        ],
        "answer_list": [
            "\t",
            "if",
            " len",
            "(",
            "str",
            "1",
            ")",
            "!=",
            " len",
            "(",
            "str",
            "2",
            "):",
            "\n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "str",
            "1",
            "_",
            "dict",
            " =",
            " {}",
            "\n\t",
            "\t",
            "str",
            "2",
            "_",
            "dict",
            " =",
            " {}",
            "\n\t",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "len",
            "(",
            "str",
            "1",
            ")):",
            "\n\t\t",
            "\t",
            "if",
            " str",
            "1",
            "[",
            "i",
            "]",
            " in",
            " str",
            "1",
            "_",
            "dict",
            ":",
            "\n\t\t\t",
            "\t",
            "if",
            " str",
            "1",
            "_",
            "dict",
            "[",
            "str",
            "1",
            "[",
            "i",
            "]]",
            "!=",
            " str",
            "2",
            "[",
            "i",
            "]:",
            "\n\t\t\t\t",
            "\t",
            "return",
            " False",
            "\n\t\t",
            "\t",
            "else",
            ":",
            "\n\t\t\t",
            "\t",
            "str",
            "1",
            "_",
            "dict",
            "[",
            "str",
            "1",
            "[",
            "i",
            "]]",
            " =",
            " str",
            "2",
            "[",
            "i",
            "]",
            "\n\t\t",
            "\t",
            "if",
            " str",
            "2",
            "[",
            "i",
            "]",
            " in",
            " str",
            "2",
            "_",
            "dict",
            ":",
            "\n\t\t\t",
            "\t",
            "if",
            " str",
            "2",
            "_",
            "dict",
            "[",
            "str",
            "2",
            "[",
            "i",
            "]]",
            "!=",
            " str",
            "1",
            "[",
            "i",
            "]:",
            "\n\t\t\t\t",
            "\t",
            "return",
            " False",
            "\n\t\t",
            "\t",
            "else",
            ":",
            "\n\t\t\t",
            "\t",
            "str",
            "2",
            "_",
            "dict",
            "[",
            "str",
            "2",
            "[",
            "i",
            "]]",
            " =",
            " str",
            "1",
            "[",
            "i",
            "]",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 886,
        "prompt": "Write a python function to add all the numbers in a list and divide it with the length of the list.\n\ndef sum_num(numbers):\n",
        "answer": "def sum_num(numbers):\n\tsum = 0\n\tfor i in numbers:\n\t\tsum += i\n\treturn sum/len(numbers)\n\n",
        "test_list": [
            "assert sum_num((8, 2, 3, 0, 7))==4.0",
            "assert sum_num((-10,-20,-30))==-20.0",
            "assert sum_num((19,15,18))==17.333333333333332"
        ],
        "answer_list": [
            "\t",
            "sum",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " numbers",
            ":",
            "\n\t",
            "\t",
            "sum",
            " +=",
            " i",
            "\n",
            "\t",
            "return",
            " sum",
            "/",
            "len",
            "(",
            "numbers",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 887,
        "prompt": "Write a python function to check whether the given number is odd or not using bitwise operator.\n\ndef is_odd(n) : \n",
        "answer": "def is_odd(n) : \n\treturn n & 1\n\n",
        "test_list": [
            "assert is_odd(5) == True",
            "assert is_odd(6) == False",
            "assert is_odd(7) == True"
        ],
        "answer_list": [
            "\t",
            "return",
            " n",
            " &",
            " ",
            "1",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 888,
        "prompt": "Write a python function to substract the elements of the given nested tuples.\n\ndef substract_elements(test_tup1, test_tup2):\n",
        "answer": "def substract_elements(test_tup1, test_tup2):\n\tif len(test_tup1)!= len(test_tup2):\n\t\treturn None\n\telse:\n\t\treturn tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n\n",
        "test_list": [
            "assert substract_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((-5, -4), (1, -4), (1, 8), (-6, 7))",
            "assert substract_elements(((13, 4), (14, 6), (13, 10), (12, 11)), ((19, 8), (14, 10), (12, 2), (18, 4))) == ((-6, -4), (0, -4), (1, 8), (-6, 7))",
            "assert substract_elements(((19, 5), (18, 7), (19, 11), (17, 12)), ((12, 9), (17, 11), (13, 3), (19, 5))) == ((7, -4), (1, -4), (6, 8), (-2, 7))"
        ],
        "answer_list": [
            "\t",
            "if",
            " len",
            "(",
            "test",
            "_",
            "tup",
            "1",
            ")",
            "!=",
            " len",
            "(",
            "test",
            "_",
            "tup",
            "2",
            "):",
            "\n\t",
            "\t",
            "return",
            " None",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "return",
            " tuple",
            "(",
            "map",
            "(",
            "lambda",
            " x",
            ",",
            " y",
            ":",
            " x",
            " -",
            " y",
            ",",
            " test",
            "_",
            "tup",
            "1",
            ",",
            " test",
            "_",
            "tup",
            "2",
            "))",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 889,
        "prompt": "Write a python function to reverse each list in a given list of lists.\n\ndef reverse_list_lists(lists):\n",
        "answer": "def reverse_list_lists(lists):\n\treturn [list(reversed(l)) for l in lists]\n\n",
        "test_list": [
            "assert reverse_list_lists([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]])==[[4, 3, 2, 1], [8, 7, 6, 5], [12, 11, 10, 9], [16, 15, 14, 13]]",
            "assert reverse_list_lists([[1,2],[2,3],[3,4]])==[[2,1],[3,2],[4,3]]",
            "assert reverse_list_lists([[10,20],[30,40]])==[[20,10],[40,30]]"
        ],
        "answer_list": [
            "\t",
            "return",
            " [",
            "list",
            "(",
            "reversed",
            "(",
            "l",
            "))",
            " for",
            " l",
            " in",
            " lists",
            "]",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 890,
        "prompt": "Write a python function to find the index of an extra element present in one sorted array.\n\ndef find_Extra(arr1,arr2,n) : \n",
        "answer": "def find_Extra(arr1,arr2,n) : \n\tfor i in range(n) : \n\t\tif arr1[i]!= arr2[i] : \n\t\t\treturn i \n\treturn -1\n\n",
        "test_list": [
            "assert find_Extra([1,2,3,4],[1,2,3],3) == 3",
            "assert find_Extra([2,4,6,8,10],[2,4,6,8],4) == 4",
            "assert find_Extra([1,3,5,7,9,11],[1,3,5,7,9],5) == 5"
        ],
        "answer_list": [
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "n",
            ")",
            " :",
            " \n\t",
            "\t",
            "if",
            " arr",
            "1",
            "[",
            "i",
            "]",
            "!=",
            " arr",
            "2",
            "[",
            "i",
            "]",
            " :",
            " \n\t\t",
            "\t",
            "return",
            " i",
            " \n",
            "\t",
            "return",
            " -",
            "1",
            "\n",
            "\n",
            "arr"
        ]
    },
    {
        "task_id": 891,
        "prompt": "Write a python function to check whether the given two numbers have same number of digits or not.\n\ndef same_Length(A,B): \n",
        "answer": "def same_Length(A,B): \n\treturn len(str(A)) == len(str(B))\n\n",
        "test_list": [
            "assert same_Length(12,1) == False",
            "assert same_Length(2,2) == True",
            "assert same_Length(10,20) == True"
        ],
        "answer_list": [
            "\t",
            "return",
            " len",
            "(",
            "str",
            "(",
            "A",
            "))",
            " ==",
            " len",
            "(",
            "str",
            "(",
            "B",
            "))",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 892,
        "prompt": "Write a python function to remove multiple spaces in a string.\n\ndef remove_spaces(text):\n",
        "answer": "def remove_spaces(text):\n\treturn \" \".join(text.split())\n\n",
        "test_list": [
            "assert remove_spaces('python  program')==('python program')",
            "assert remove_spaces('python   programming    language')==('python programming language')",
            "assert remove_spaces('python                     program')==('python program')"
        ],
        "answer_list": [
            "\t",
            "return",
            " \"",
            " \".",
            "join",
            "(",
            "text",
            ".",
            "split",
            "())",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 893,
        "prompt": "Write a python function to get the last element of each sublist.\n\ndef Extract(lst): \n",
        "answer": "def Extract(lst): \n\treturn [lst[-1] for lst in lst] \n\n",
        "test_list": [
            "assert Extract([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [3, 5, 9]",
            "assert Extract([['x', 'y', 'z'], ['m'], ['a', 'b'], ['u', 'v']]) == ['z', 'm', 'b', 'v']",
            "assert Extract([[1, 2, 3], [4, 5]]) == [3, 5]"
        ],
        "answer_list": [
            "\t",
            "return",
            " [",
            "lst",
            "[-",
            "1",
            "]",
            " for",
            " lst",
            " in",
            " lst",
            "]",
            " \n",
            "\n",
            "#"
        ]
    },
    {
        "task_id": 894,
        "prompt": "Write a python function to convert the given string of float type into tuple.\n\ndef float_to_tuple(test_str):\n",
        "answer": "def float_to_tuple(test_str):\n\treturn tuple(map(float, test_str.split()))\n\n",
        "test_list": [
            "assert float_to_tuple(\"1.2, 1.3, 2.3, 2.4, 6.5\") == (1.2, 1.3, 2.3, 2.4, 6.5)",
            "assert float_to_tuple(\"2.3, 2.4, 5.6, 5.4, 8.9\") == (2.3, 2.4, 5.6, 5.4, 8.9)",
            "assert float_to_tuple(\"0.3, 0.5, 7.8, 9.4\") == (0.3, 0.5, 7.8, 9.4)"
        ],
        "answer_list": [
            "\t",
            "return",
            " tuple",
            "(",
            "map",
            "(",
            "float",
            ",",
            " test",
            "_",
            "str",
            ".",
            "split",
            "()))",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 895,
        "prompt": "Write a python function to find the maximum sum of subsequences of given array with no adjacent elements.\n\ndef max_sum_subseq(A):\n",
        "answer": "def max_sum_subseq(A):\n\tn = len(A)\n\tif n == 0:\n\t\treturn 0\n\tif n == 1:\n\t\treturn A[0]\n\tdp = [0] * n\n\tdp[0] = A[0]\n\tdp[1] = max(A[0], A[1])\n\tfor i in range(2, n):\n\t\tdp[i] = max(dp[i-1], dp[i-2] + A[i])\n\treturn dp[n-1]\n\n",
        "test_list": [
            "assert max_sum_subseq([1, 2, 9, 4, 5, 0, 4, 11, 6]) == 26",
            "assert max_sum_subseq([1, 2, 9, 5, 6, 0, 5, 12, 7]) == 28",
            "assert max_sum_subseq([1, 3, 10, 5, 6, 0, 6, 14, 21]) == 44"
        ],
        "answer_list": [
            "\t",
            "n",
            " =",
            " len",
            "(",
            "A",
            ")",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "0",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "0",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "1",
            ":",
            "\n\t",
            "\t",
            "return",
            " A",
            "[",
            "0",
            "]",
            "\n",
            "\t",
            "dp",
            " =",
            " [",
            "0",
            "]",
            " *",
            " n",
            "\n",
            "\t",
            "dp",
            "[",
            "0",
            "]",
            " =",
            " A",
            "[",
            "0",
            "]",
            "\n",
            "\t",
            "dp",
            "[",
            "1",
            "]",
            " =",
            " max",
            "(",
            "A",
            "[",
            "0",
            "],",
            " A",
            "[",
            "1",
            "])",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "2",
            ",",
            " n",
            "):",
            "\n\t",
            "\t",
            "dp",
            "[",
            "i",
            "]",
            " =",
            " max",
            "(",
            "dp",
            "[",
            "i",
            "-",
            "1",
            "],",
            " dp",
            "[",
            "i",
            "-",
            "2",
            "]",
            " +",
            " A",
            "[",
            "i",
            "])",
            "\n",
            "\t",
            "return",
            " dp",
            "[",
            "n",
            "-",
            "1",
            "]",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 896,
        "prompt": "Write a python function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.\n\ndef sort_list_last(tuples):\n",
        "answer": "def sort_list_last(tuples):\n\treturn sorted(tuples, key=lambda x: x[-1])\n\n",
        "test_list": [
            "assert sort_list_last([(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)])==[(2, 1), (1, 2), (2, 3), (4, 4), (2, 5)] ",
            "assert sort_list_last([(9,8), (4, 7), (3,5), (7,9), (1,2)])==[(1,2), (3,5), (4,7), (9,8), (7,9)] ",
            "assert sort_list_last([(20,50), (10,20), (40,40)])==[(10,20),(40,40),(20,50)] "
        ],
        "answer_list": [
            "\t",
            "return",
            " sorted",
            "(",
            "tuples",
            ",",
            " key",
            "=",
            "lambda",
            " x",
            ":",
            " x",
            "[-",
            "1",
            "])",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 897,
        "prompt": "Write a python function to check whether the word is present in a given sentence or not.\n\ndef is_Word_Present(sentence,word): \n",
        "answer": "def is_Word_Present(sentence,word): \n\twords = sentence.split() \n\tif word in words: \n\t\treturn True\n\telse: \n\t\treturn False\n\n",
        "test_list": [
            "assert is_Word_Present(\"machine learning\",\"machine\") == True",
            "assert is_Word_Present(\"easy\",\"fun\") == False",
            "assert is_Word_Present(\"python language\",\"code\") == False"
        ],
        "answer_list": [
            "\t",
            "words",
            " =",
            " sentence",
            ".",
            "split",
            "()",
            " \n",
            "\t",
            "if",
            " word",
            " in",
            " words",
            ":",
            " \n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "else",
            ":",
            " \n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 898,
        "prompt": "Write a python function to extract specified number of elements from a given list, which follow each other continuously.\n\ndef extract_elements(numbers, n):\n",
        "answer": "def extract_elements(numbers, n):\n\treturn numbers[n-1::n]\n\n",
        "test_list": [
            "assert extract_elements([1, 1, 3, 4, 4, 5, 6, 7],2)==[1, 4]",
            "assert extract_elements([0, 1, 2, 3, 4, 4, 4, 4, 5, 7],4)==[4]",
            "assert extract_elements([0,0,0,0,0],5)==[0]"
        ],
        "answer_list": [
            "\t",
            "return",
            " numbers",
            "[",
            "n",
            "-",
            "1",
            "::",
            "n",
            "]",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 899,
        "prompt": "Write a python function to check whether an array can be sorted or not by picking only the corner elements.\n\ndef check(arr,n): \n",
        "answer": "def check(arr,n): \n\tif n == 1: \n\t\treturn True\n\tif arr[0] > arr[n-1]: \n\t\treturn False\n\treturn check(arr, n-1) \n\n",
        "test_list": [
            "assert check([3,2,1,2,3,4],6) == True",
            "assert check([2,1,4,5,1],5) == True",
            "assert check([1,2,2,1,2,3],6) == True"
        ],
        "answer_list": [
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "1",
            ":",
            " \n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " arr",
            "[",
            "0",
            "]",
            " >",
            " arr",
            "[",
            "n",
            "-",
            "1",
            "]:",
            " \n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "return",
            " check",
            "(",
            "arr",
            ",",
            " n",
            "-",
            "1",
            ")",
            " \n",
            "\n",
            "arr"
        ]
    },
    {
        "task_id": 900,
        "prompt": "Write a python function where a string will start with a specific number.\n\ndef match_num(string):\n",
        "answer": "def match_num(string):\n\tif string[0] == '1':\n\t\treturn True\n\telse:\n\t\treturn False\n\n",
        "test_list": [
            "assert match_num('5-2345861')==True",
            "assert match_num('6-2345861')==False",
            "assert match_num('78910')==False"
        ],
        "answer_list": [
            "\t",
            "if",
            " string",
            "[",
            "0",
            "]",
            " ==",
            " '",
            "1",
            "':",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 901,
        "prompt": "Write a python function to find the smallest multiple of the first n numbers.\n\ndef smallest_multiple(n):\n",
        "answer": "def smallest_multiple(n):\n\tsmallest = 1\n\tfor i in range(1, n+1):\n\t\tsmallest *= i\n\treturn smallest\n\n",
        "test_list": [
            "assert smallest_multiple(13)==360360",
            "assert smallest_multiple(2)==2",
            "assert smallest_multiple(1)==1"
        ],
        "answer_list": [
            "\t",
            "sm",
            "allest",
            " =",
            " ",
            "1",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "1",
            ",",
            " n",
            "+",
            "1",
            "):",
            "\n\t",
            "\t",
            "sm",
            "allest",
            " *=",
            " i",
            "\n",
            "\t",
            "return",
            " smallest",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 902,
        "prompt": "Write a python function to combine two dictionaries by adding values for common keys.\n\ndef add_dict(d1,d2):\n",
        "answer": "def add_dict(d1,d2):\n\td3 = {}\n\tfor key in d1:\n\t\tif key in d2:\n\t\t\td3[key] = d1[key] + d2[key]\n\t\telse:\n\t\t\td3[key] = d1[key]\n\tfor key in d2:\n\t\tif key not in d1:\n\t\t\td3[key] = d2[key]\n\treturn d3\n\n",
        "test_list": [
            "assert add_dict({'a': 100, 'b': 200, 'c':300},{'a': 300, 'b': 200, 'd':400})==({'b': 400, 'd': 400, 'a': 400, 'c': 300}) ",
            "assert add_dict({'a': 500, 'b': 700, 'c':900},{'a': 500, 'b': 600, 'd':900})==({'b': 1300, 'd': 900, 'a': 1000, 'c': 900}) ",
            "assert add_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})==({'b': 1800, 'd': 1800, 'a': 1800})"
        ],
        "answer_list": [
            "\t",
            "d",
            "3",
            " =",
            " {}",
            "\n",
            "\t",
            "for",
            " key",
            " in",
            " d",
            "1",
            ":",
            "\n\t",
            "\t",
            "if",
            " key",
            " in",
            " d",
            "2",
            ":",
            "\n\t\t",
            "\t",
            "d",
            "3",
            "[",
            "key",
            "]",
            " =",
            " d",
            "1",
            "[",
            "key",
            "]",
            " +",
            " d",
            "2",
            "[",
            "key",
            "]",
            "\n\t",
            "\t",
            "else",
            ":",
            "\n\t\t",
            "\t",
            "d",
            "3",
            "[",
            "key",
            "]",
            " =",
            " d",
            "1",
            "[",
            "key",
            "]",
            "\n",
            "\t",
            "for",
            " key",
            " in",
            " d",
            "2",
            ":",
            "\n\t",
            "\t",
            "if",
            " key",
            " not",
            " in",
            " d",
            "1",
            ":",
            "\n\t\t",
            "\t",
            "d",
            "3",
            "[",
            "key",
            "]",
            " =",
            " d",
            "2",
            "[",
            "key",
            "]",
            "\n",
            "\t",
            "return",
            " d",
            "3",
            "\n",
            "\n",
            "d"
        ]
    },
    {
        "task_id": 903,
        "prompt": "Write a python function to count the total unset bits from 1 to n.\n\ndef count_Unset_Bits(n) :  \n",
        "answer": "def count_Unset_Bits(n) :  \n\tcount = 0\n\twhile n : \n\t\tcount += n & 1\n\t\tn >>= 1\n\treturn count\n\n",
        "test_list": [
            "assert count_Unset_Bits(2) == 1",
            "assert count_Unset_Bits(5) == 4",
            "assert count_Unset_Bits(14) == 17"
        ],
        "answer_list": [
            "\t",
            "count",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "while",
            " n",
            " :",
            " \n\t",
            "\t",
            "count",
            " +=",
            " n",
            " &",
            " ",
            "1",
            "\n\t",
            "\t",
            "n",
            " >>=",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " count",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 904,
        "prompt": "Write a python function to return true if the given number is even else return false.\n\ndef even_num(x):\n",
        "answer": "def even_num(x):\n\tif x%2==0:\n\t\treturn True\n\telse:\n\t\treturn False\n\n",
        "test_list": [
            "assert even_num(13.5)==False",
            "assert even_num(0)==True",
            "assert even_num(-9)==False"
        ],
        "answer_list": [
            "\t",
            "if",
            " x",
            "%",
            "2",
            "==",
            "0",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 905,
        "prompt": "Write a python function to find the sum of squares of binomial co-efficients.\n\ndef sum_of_square(n): \n",
        "answer": "def sum_of_square(n): \n\tsum = 0\n\tfor i in range(n+1): \n\t\tsum += i**2\n\treturn sum\n\n",
        "test_list": [
            "assert sum_of_square(4) == 70",
            "assert sum_of_square(5) == 252",
            "assert sum_of_square(2) == 6"
        ],
        "answer_list": [
            "\t",
            "sum",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "n",
            "+",
            "1",
            "):",
            " \n\t",
            "\t",
            "sum",
            " +=",
            " i",
            "**",
            "2",
            "\n",
            "\t",
            "return",
            " sum",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 906,
        "prompt": "Write a python function to extract year, month and date from a url by using regex.\n\ndef extract_date(url):\n",
        "answer": "def extract_date(url):\n\t# Write your code here\n\treturn None\n\n",
        "test_list": [
            "assert extract_date(\"https://www.washingtonpost.com/news/football-insider/wp/2016/09/02/odell-beckhams-fame-rests-on-one-stupid-little-ball-josh-norman-tells-author/\") == [('2016', '09', '02')]",
            "assert extract_date(\"https://www.indiatoday.in/movies/celebrities/story/wp/2020/11/03/odeof-sushant-singh-rajput-s-death-his-brother-in-law-shares-advice-for-fans-1749646/\") == [('2020', '11', '03')]",
            "assert extract_date(\"https://economictimes.indiatimes.com/news/economy/2020/12/29/finance/pension-assets-under-pfrda-touch-rs-5-32-lakh-crore/articleshow/79736619.cms\") == [('2020', '12', '29')]"
        ],
        "answer_list": [
            "\t",
            "#",
            " Write",
            " your",
            " code",
            " here",
            "\n",
            "\t",
            "return",
            " None",
            "\n",
            "\n",
            "#"
        ]
    },
    {
        "task_id": 907,
        "prompt": "Write a python function to print the first n lucky numbers.\n\ndef lucky_num(n):\n",
        "answer": "def lucky_num(n):\n\tfor i in range(1,n+1):\n\t\tif i%3==0 or i%5==0:\n\t\t\tprint(i)\n\n",
        "test_list": [
            "assert lucky_num(10)==[1, 3, 7, 9, 13, 15, 21, 25, 31, 33] ",
            "assert lucky_num(5)==[1, 3, 7, 9, 13]",
            "assert lucky_num(8)==[1, 3, 7, 9, 13, 15, 21, 25]"
        ],
        "answer_list": [
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "1",
            ",",
            "n",
            "+",
            "1",
            "):",
            "\n\t",
            "\t",
            "if",
            " i",
            "%",
            "3",
            "==",
            "0",
            " or",
            " i",
            "%",
            "5",
            "==",
            "0",
            ":",
            "\n\t\t",
            "\t",
            "print",
            "(",
            "i",
            ")",
            "\n",
            "\n",
            "luck"
        ]
    },
    {
        "task_id": 908,
        "prompt": "Write a python function to find the fixed point in the given array.\n\ndef find_fixed_point(arr, n): \n",
        "answer": "def find_fixed_point(arr, n): \n\tfor i in range(n): \n\t\tif arr[i] == i: \n\t\t\treturn i \n\treturn -1\n\n",
        "test_list": [
            "assert find_fixed_point([-10, -1, 0, 3, 10, 11, 30, 50, 100],9) == 3",
            "assert find_fixed_point([1, 2, 3, 4, 5, 6, 7, 8],8) == -1",
            "assert find_fixed_point([0, 2, 5, 8, 17],5) == 0"
        ],
        "answer_list": [
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "n",
            "):",
            " \n\t",
            "\t",
            "if",
            " arr",
            "[",
            "i",
            "]",
            " ==",
            " i",
            ":",
            " \n\t\t",
            "\t",
            "return",
            " i",
            " \n",
            "\t",
            "return",
            " -",
            "1",
            "\n",
            "\n",
            "#"
        ]
    },
    {
        "task_id": 909,
        "prompt": "Write a python function to find the previous palindrome of a specified number.\n\ndef previous_palindrome(num):\n",
        "answer": "def previous_palindrome(num):\n\tnum = str(num)\n\tif num == num[::-1]:\n\t\treturn num\n\telse:\n\t\twhile True:\n\t\t\tnum = int(num) - 1\n\t\t\tnum = str(num)\n\t\t\tif num == num[::-1]:\n\t\t\t\treturn num\n\n",
        "test_list": [
            "assert previous_palindrome(99)==88",
            "assert previous_palindrome(1221)==1111",
            "assert previous_palindrome(120)==111"
        ],
        "answer_list": [
            "\t",
            "num",
            " =",
            " str",
            "(",
            "num",
            ")",
            "\n",
            "\t",
            "if",
            " num",
            " ==",
            " num",
            "[",
            "::-",
            "1",
            "]:",
            "\n\t",
            "\t",
            "return",
            " num",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "while",
            " True",
            ":",
            "\n\t\t",
            "\t",
            "num",
            " =",
            " int",
            "(",
            "num",
            ")",
            " -",
            " ",
            "1",
            "\n\t\t",
            "\t",
            "num",
            " =",
            " str",
            "(",
            "num",
            ")",
            "\n\t\t",
            "\t",
            "if",
            " num",
            " ==",
            " num",
            "[",
            "::-",
            "1",
            "]:",
            "\n\t\t\t",
            "\t",
            "return",
            " num",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 910,
        "prompt": "Write a python function to validate a gregorian date.\n\ndef check_date(m, d, y):\n",
        "answer": "def check_date(m, d, y):\n\tif m in range(1, 13) and d in range(1, 32) and y in range(1900, 2020):\n\t\treturn True\n\telse:\n\t\treturn False\n\n",
        "test_list": [
            "assert check_date(11,11,2002)==True",
            "assert check_date(13,11,2002)==False",
            "assert check_date('11','11','2002')==True"
        ],
        "answer_list": [
            "\t",
            "if",
            " m",
            " in",
            " range",
            "(",
            "1",
            ",",
            " ",
            "1",
            "3",
            ")",
            " and",
            " d",
            " in",
            " range",
            "(",
            "1",
            ",",
            " ",
            "3",
            "2",
            ")",
            " and",
            " y",
            " in",
            " range",
            "(",
            "1",
            "9",
            "0",
            "0",
            ",",
            " ",
            "2",
            "0",
            "2",
            "0",
            "):",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 911,
        "prompt": "Write a python function to compute maximum product of three numbers of a given array of integers using heap queue algorithm.\n\ndef maximum_product(nums):\n",
        "answer": "def maximum_product(nums):\n\tif len(nums) < 3:\n\t\treturn None\n\tnums.sort()\n\treturn max(nums[0] * nums[1] * nums[-1], nums[-1] * nums[-2] * nums[-3])\n\n",
        "test_list": [
            "assert maximum_product( [12, 74, 9, 50, 61, 41])==225700",
            "assert maximum_product([25, 35, 22, 85, 14, 65, 75, 25, 58])==414375",
            "assert maximum_product([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==2520"
        ],
        "answer_list": [
            "\t",
            "if",
            " len",
            "(",
            "nums",
            ")",
            " <",
            " ",
            "3",
            ":",
            "\n\t",
            "\t",
            "return",
            " None",
            "\n",
            "\t",
            "nums",
            ".",
            "sort",
            "()",
            "\n",
            "\t",
            "return",
            " max",
            "(",
            "nums",
            "[",
            "0",
            "]",
            " *",
            " nums",
            "[",
            "1",
            "]",
            " *",
            " nums",
            "[-",
            "1",
            "],",
            " nums",
            "[-",
            "1",
            "]",
            " *",
            " nums",
            "[-",
            "2",
            "]",
            " *",
            " nums",
            "[-",
            "3",
            "])",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 912,
        "prompt": "Write a python function to find ln, m lobb number.\n\ndef lobb_num(n, m): \n",
        "answer": "def lobb_num(n, m): \n\treturn (n/m) * (math.log(n/m) - 1)\n\n",
        "test_list": [
            "assert int(lobb_num(5, 3)) == 35",
            "assert int(lobb_num(3, 2)) == 5",
            "assert int(lobb_num(4, 2)) == 20"
        ],
        "answer_list": [
            "\t",
            "return",
            " (",
            "n",
            "/",
            "m",
            ")",
            " *",
            " (",
            "math",
            ".",
            "log",
            "(",
            "n",
            "/",
            "m",
            ")",
            " -",
            " ",
            "1",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 913,
        "prompt": "Write a python function to check for a number at the end of a string.\n\ndef end_num(string):\n",
        "answer": "def end_num(string):\n\tif string[-1].isdigit():\n\t\treturn True\n\telse:\n\t\treturn False\n\n",
        "test_list": [
            "assert end_num('abcdef')==False",
            "assert end_num('abcdef7')==True",
            "assert end_num('abc')==False"
        ],
        "answer_list": [
            "\t",
            "if",
            " string",
            "[-",
            "1",
            "].",
            "isdigit",
            "():",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 914,
        "prompt": "Write a python function to check whether the given string is made up of two alternating characters or not.\n\ndef is_Two_Alter(s):  \n",
        "answer": "def is_Two_Alter(s):  \n\tif len(s) == 0:\n\t\treturn False\n\tif len(s) == 1:\n\t\treturn True\n\tif s[0] == s[1]:\n\t\treturn is_Two_Alter(s[1:])\n\telse:\n\t\treturn is_Two_Alter(s[2:])\n\n",
        "test_list": [
            "assert is_Two_Alter(\"abab\") == True",
            "assert is_Two_Alter(\"aaaa\") == False",
            "assert is_Two_Alter(\"xyz\") == False"
        ],
        "answer_list": [
            "\t",
            "if",
            " len",
            "(",
            "s",
            ")",
            " ==",
            " ",
            "0",
            ":",
            "\n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\t",
            "if",
            " len",
            "(",
            "s",
            ")",
            " ==",
            " ",
            "1",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "if",
            " s",
            "[",
            "0",
            "]",
            " ==",
            " s",
            "[",
            "1",
            "]:",
            "\n\t",
            "\t",
            "return",
            " is",
            "_",
            "Two",
            "_",
            "Alter",
            "(",
            "s",
            "[",
            "1",
            ":])",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "return",
            " is",
            "_",
            "Two",
            "_",
            "Alter",
            "(",
            "s",
            "[",
            "2",
            ":])",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 915,
        "prompt": "Write a python function to rearrange positive and negative numbers in a given array using lambda function.\n\ndef rearrange_numbs(array_nums):\n",
        "answer": "def rearrange_numbs(array_nums):\n\treturn sorted(array_nums, key=lambda x: abs(x))\n\n",
        "test_list": [
            "assert rearrange_numbs([-1, 2, -3, 5, 7, 8, 9, -10])==[2, 5, 7, 8, 9, -10, -3, -1]",
            "assert rearrange_numbs([10,15,14,13,-18,12,-20])==[10, 12, 13, 14, 15, -20, -18]",
            "assert rearrange_numbs([-20,20,-10,10,-30,30])==[10, 20, 30, -30, -20, -10]"
        ],
        "answer_list": [
            "\t",
            "return",
            " sorted",
            "(",
            "array",
            "_",
            "nums",
            ",",
            " key",
            "=",
            "lambda",
            " x",
            ":",
            " abs",
            "(",
            "x",
            "))",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 916,
        "prompt": "Write a python function to find if there is a triplet in the array whose sum is equal to a given value.\n\ndef find_triplet_array(A, arr_size, sum): \n",
        "answer": "def find_triplet_array(A, arr_size, sum): \n\tfor i in range(0, arr_size - 2): \n\t\tfor j in range(i + 1, arr_size - 1): \n\t\t\tfor k in range(j + 1, arr_size): \n\t\t\t\tif A[i] + A[j] + A[k] == sum: \n\t\t\t\t\treturn True\n\treturn False\n\n",
        "test_list": [
            "assert find_triplet_array([1, 4, 45, 6, 10, 8], 6, 22) == (4, 10, 8)",
            "assert find_triplet_array([12, 3, 5, 2, 6, 9], 6, 24) == (12, 3, 9)",
            "assert find_triplet_array([1, 2, 3, 4, 5], 5, 9) == (1, 3, 5)"
        ],
        "answer_list": [
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "0",
            ",",
            " arr",
            "_",
            "size",
            " -",
            " ",
            "2",
            "):",
            " \n\t",
            "\t",
            "for",
            " j",
            " in",
            " range",
            "(",
            "i",
            " +",
            " ",
            "1",
            ",",
            " arr",
            "_",
            "size",
            " -",
            " ",
            "1",
            "):",
            " \n\t\t",
            "\t",
            "for",
            " k",
            " in",
            " range",
            "(",
            "j",
            " +",
            " ",
            "1",
            ",",
            " arr",
            "_",
            "size",
            "):",
            " \n\t\t\t",
            "\t",
            "if",
            " A",
            "[",
            "i",
            "]",
            " +",
            " A",
            "[",
            "j",
            "]",
            " +",
            " A",
            "[",
            "k",
            "]",
            " ==",
            " sum",
            ":",
            " \n\t\t\t\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "return",
            " False",
            "\n",
            "\n",
            "A"
        ]
    },
    {
        "task_id": 917,
        "prompt": "Write a python function to find the sequences of one upper case letter followed by lower case letters.\n\ndef text_uppercase_lowercase(text):\n",
        "answer": "def text_uppercase_lowercase(text):\n\tfor i in range(len(text)):\n\t\tif text[i].isupper() and text[i+1].islower():\n\t\t\tprint(text[i:i+2])\n\n",
        "test_list": [
            "assert text_uppercase_lowercase(\"AaBbGg\")==('Found a match!')",
            "assert text_uppercase_lowercase(\"aA\")==('Not matched!')",
            "assert text_uppercase_lowercase(\"PYTHON\")==('Not matched!')"
        ],
        "answer_list": [
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "len",
            "(",
            "text",
            ")):",
            "\n\t",
            "\t",
            "if",
            " text",
            "[",
            "i",
            "].",
            "is",
            "upper",
            "()",
            " and",
            " text",
            "[",
            "i",
            "+",
            "1",
            "].",
            "is",
            "lower",
            "():",
            "\n\t\t",
            "\t",
            "print",
            "(",
            "text",
            "[",
            "i",
            ":",
            "i",
            "+",
            "2",
            "])",
            "\n",
            "\n",
            "text"
        ]
    },
    {
        "task_id": 918,
        "prompt": "Write a python function to count coin change.\n\ndef coin_change(S, m, n): \n",
        "answer": "def coin_change(S, m, n): \n\t# table[i] will be storing the number of solutions for \n\t# value i. We need n+1 rows as the table is constructed \n\t# in bottom up manner using the base case (n = 0) \n\t# Initialize all table values as 0 \n\ttable = [0 for k in range(n+1)] \n\n",
        "test_list": [
            "assert coin_change([1, 2, 3],3,4)==4",
            "assert coin_change([4,5,6,7,8,9],6,9)==2",
            "assert coin_change([4,5,6,7,8,9],6,4)==1"
        ],
        "answer_list": [
            "\t",
            "#",
            " table",
            "[",
            "i",
            "]",
            " will",
            " be",
            " storing",
            " the",
            " number",
            " of",
            " solutions",
            " for",
            " \n",
            "\t",
            "#",
            " value",
            " i",
            ".",
            " We",
            " need",
            " n",
            "+",
            "1",
            " rows",
            " as",
            " the",
            " table",
            " is",
            " constructed",
            " \n",
            "\t",
            "#",
            " in",
            " bottom",
            " up",
            " manner",
            " using",
            " the",
            " base",
            " case",
            " (",
            "n",
            " =",
            " ",
            "0",
            ")",
            " \n",
            "\t",
            "#",
            " Initialize",
            " all",
            " table",
            " values",
            " as",
            " ",
            "0",
            " \n",
            "\t",
            "table",
            " =",
            " [",
            "0",
            " for",
            " k",
            " in",
            " range",
            "(",
            "n",
            "+",
            "1",
            ")]",
            " \n\n",
            "\t"
        ]
    },
    {
        "task_id": 919,
        "prompt": "Write a python function to multiply all items in the list.\n\ndef multiply_list(items):\n",
        "answer": "def multiply_list(items):\n\tproduct = 1\n\tfor item in items:\n\t\tproduct *= item\n\treturn product\n\n",
        "test_list": [
            "assert multiply_list([1,-2,3]) == -6",
            "assert multiply_list([1,2,3,4]) == 24",
            "assert multiply_list([3,1,2,3]) == 18"
        ],
        "answer_list": [
            "\t",
            "product",
            " =",
            " ",
            "1",
            "\n",
            "\t",
            "for",
            " item",
            " in",
            " items",
            ":",
            "\n\t",
            "\t",
            "product",
            " *=",
            " item",
            "\n",
            "\t",
            "return",
            " product",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 920,
        "prompt": "Write a python function to remove all tuples with all none values in the given tuple list.\n\ndef remove_tuple(test_list):\n",
        "answer": "def remove_tuple(test_list):\n\treturn [x for x in test_list if None not in x]\n\n",
        "test_list": [
            "assert remove_tuple([(None, 2), (None, None), (3, 4), (12, 3), (None, )] ) == '[(None, 2), (3, 4), (12, 3)]'",
            "assert remove_tuple([(None, None), (None, None), (3, 6), (17, 3), (None,1 )] ) == '[(3, 6), (17, 3), (None, 1)]'",
            "assert remove_tuple([(1, 2), (2, None), (3, None), (24, 3), (None, None )] ) == '[(1, 2), (2, None), (3, None), (24, 3)]'"
        ],
        "answer_list": [
            "\t",
            "return",
            " [",
            "x",
            " for",
            " x",
            " in",
            " test",
            "_",
            "list",
            " if",
            " None",
            " not",
            " in",
            " x",
            "]",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 921,
        "prompt": "Write a python function to perform chunking of tuples each of size n.\n\ndef chunk_tuples(test_tup, N):\n",
        "answer": "def chunk_tuples(test_tup, N):\n\treturn [test_tup[i:i + N] for i in range(0, len(test_tup), N)]\n\n",
        "test_list": [
            "assert chunk_tuples((10, 4, 5, 6, 7, 6, 8, 3, 4), 3) == [(10, 4, 5), (6, 7, 6), (8, 3, 4)]",
            "assert chunk_tuples((1, 2, 3, 4, 5, 6, 7, 8, 9), 2) == [(1, 2), (3, 4), (5, 6), (7, 8), (9,)]",
            "assert chunk_tuples((11, 14, 16, 17, 19, 21, 22, 25), 4) == [(11, 14, 16, 17), (19, 21, 22, 25)]"
        ],
        "answer_list": [
            "\t",
            "return",
            " [",
            "test",
            "_",
            "tup",
            "[",
            "i",
            ":",
            "i",
            " +",
            " N",
            "]",
            " for",
            " i",
            " in",
            " range",
            "(",
            "0",
            ",",
            " len",
            "(",
            "test",
            "_",
            "tup",
            "),",
            " N",
            ")]",
            "\n",
            "\n",
            "#"
        ]
    },
    {
        "task_id": 922,
        "prompt": "Write a python function to find a pair with the highest product from a given array of integers.\n\ndef max_product(arr): \n",
        "answer": "def max_product(arr): \n\tmax_pair = (arr[0], arr[1]) \n\tfor i in range(len(arr)): \n\t\tfor j in range(i + 1, len(arr)): \n\t\t\tif arr[i] * arr[j] > max_pair[0] * max_pair[1]: \n\t\t\t\tmax_pair = (arr[i], arr[j]) \n\treturn max_pair \n\n",
        "test_list": [
            "assert max_product([1, 2, 3, 4, 7, 0, 8, 4])==(7, 8)",
            "assert max_product([0, -1, -2, -4, 5, 0, -6])==(-4, -6)",
            "assert max_product([1, 3, 5, 6, 8, 9])==(8,9)"
        ],
        "answer_list": [
            "\t",
            "max",
            "_",
            "pair",
            " =",
            " (",
            "arr",
            "[",
            "0",
            "],",
            " arr",
            "[",
            "1",
            "])",
            " \n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "len",
            "(",
            "arr",
            ")):",
            " \n\t",
            "\t",
            "for",
            " j",
            " in",
            " range",
            "(",
            "i",
            " +",
            " ",
            "1",
            ",",
            " len",
            "(",
            "arr",
            ")):",
            " \n\t\t",
            "\t",
            "if",
            " arr",
            "[",
            "i",
            "]",
            " *",
            " arr",
            "[",
            "j",
            "]",
            " >",
            " max",
            "_",
            "pair",
            "[",
            "0",
            "]",
            " *",
            " max",
            "_",
            "pair",
            "[",
            "1",
            "]:",
            " \n\t\t\t",
            "\t",
            "max",
            "_",
            "pair",
            " =",
            " (",
            "arr",
            "[",
            "i",
            "],",
            " arr",
            "[",
            "j",
            "])",
            " \n",
            "\t",
            "return",
            " max",
            "_",
            "pair",
            " \n",
            "\n",
            "arr"
        ]
    },
    {
        "task_id": 923,
        "prompt": "Write a python function to find the length of the shortest string that has both str1 and str2 as subsequences.\n\ndef super_seq(X, Y, m, n):\n",
        "answer": "def super_seq(X, Y, m, n):\n\tdp = [[0 for i in range(n+1)] for j in range(m+1)]\n\tfor i in range(1, m+1):\n\t\tfor j in range(1, n+1):\n\t\t\tif X[i-1] == Y[j-1]:\n\t\t\t\tdp[i][j] = 1 + dp[i-1][j-1]\n\t\t\telse:\n\t\t\t\tdp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\treturn dp[m][n]\n\n",
        "test_list": [
            "assert super_seq(\"AGGTAB\", \"GXTXAYB\", 6, 7) == 9",
            "assert super_seq(\"feek\", \"eke\", 4, 3) == 5",
            "assert super_seq(\"PARRT\", \"RTA\", 5, 3) == 6"
        ],
        "answer_list": [
            "\t",
            "dp",
            " =",
            " [[",
            "0",
            " for",
            " i",
            " in",
            " range",
            "(",
            "n",
            "+",
            "1",
            ")]",
            " for",
            " j",
            " in",
            " range",
            "(",
            "m",
            "+",
            "1",
            ")]",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "1",
            ",",
            " m",
            "+",
            "1",
            "):",
            "\n\t",
            "\t",
            "for",
            " j",
            " in",
            " range",
            "(",
            "1",
            ",",
            " n",
            "+",
            "1",
            "):",
            "\n\t\t",
            "\t",
            "if",
            " X",
            "[",
            "i",
            "-",
            "1",
            "]",
            " ==",
            " Y",
            "[",
            "j",
            "-",
            "1",
            "]:",
            "\n\t\t\t",
            "\t",
            "dp",
            "[",
            "i",
            "][",
            "j",
            "]",
            " =",
            " ",
            "1",
            " +",
            " dp",
            "[",
            "i",
            "-",
            "1",
            "][",
            "j",
            "-",
            "1",
            "]",
            "\n\t\t",
            "\t",
            "else",
            ":",
            "\n\t\t\t",
            "\t",
            "dp",
            "[",
            "i",
            "][",
            "j",
            "]",
            " =",
            " max",
            "(",
            "dp",
            "[",
            "i",
            "-",
            "1",
            "][",
            "j",
            "],",
            " dp",
            "[",
            "i",
            "][",
            "j",
            "-",
            "1",
            "])",
            "\n",
            "\t",
            "return",
            " dp",
            "[",
            "m",
            "][",
            "n",
            "]",
            "\n",
            "\n",
            "X"
        ]
    },
    {
        "task_id": 924,
        "prompt": "Write a python function to find maximum of two numbers.\n\ndef max_of_two( x, y ):\n",
        "answer": "def max_of_two( x, y ):\n\tif x > y:\n\t\treturn x\n\telse:\n\t\treturn y\n\n",
        "test_list": [
            "assert max_of_two(10,20)==20",
            "assert max_of_two(19,15)==19",
            "assert max_of_two(-10,-20)==-10"
        ],
        "answer_list": [
            "\t",
            "if",
            " x",
            " >",
            " y",
            ":",
            "\n\t",
            "\t",
            "return",
            " x",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "return",
            " y",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 925,
        "prompt": "Write a python function to calculate the product of all the numbers of a given tuple.\n\ndef mutiple_tuple(nums):\n",
        "answer": "def mutiple_tuple(nums):\n\tproduct = 1\n\tfor i in nums:\n\t\tproduct *= i\n\treturn product\n\n",
        "test_list": [
            "assert mutiple_tuple((4, 3, 2, 2, -1, 18)) == -864",
            "assert mutiple_tuple((1,2,3)) == 6",
            "assert mutiple_tuple((-2,-4,-6)) == -48"
        ],
        "answer_list": [
            "\t",
            "product",
            " =",
            " ",
            "1",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " nums",
            ":",
            "\n\t",
            "\t",
            "product",
            " *=",
            " i",
            "\n",
            "\t",
            "return",
            " product",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 926,
        "prompt": "Write a python function to find n-th rencontres number.\n\ndef rencontres_number(n, m): \n",
        "answer": "def rencontres_number(n, m): \n\tif n == 0: \n\t\treturn 0\n\tif n == 1: \n\t\treturn 1\n\treturn rencontres_number(n - 1, m) + rencontres_number(n - 2, m) * m\n\n",
        "test_list": [
            "assert rencontres_number(7, 2) == 924",
            "assert rencontres_number(3, 0) == 2",
            "assert rencontres_number(3, 1) == 3"
        ],
        "answer_list": [
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "0",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "0",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "1",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " ren",
            "cont",
            "res",
            "_",
            "number",
            "(",
            "n",
            " -",
            " ",
            "1",
            ",",
            " m",
            ")",
            " +",
            " ren",
            "cont",
            "res",
            "_",
            "number",
            "(",
            "n",
            " -",
            " ",
            "2",
            ",",
            " m",
            ")",
            " *",
            " m",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 927,
        "prompt": "Write a python function to calculate the height of the given binary tree.\n\ndef max_height(node): \n",
        "answer": "def max_height(node): \n\tif node is None: \n\t\treturn 0\n\telse: \n\t\t# Compute the height of each subtree \n\t\tlheight = max_height(node.left) \n\t\trheight = max_height(node.right) \n\n",
        "test_list": [
            "assert (max_height(root)) == 3",
            "assert (max_height(root1)) == 5 ",
            "assert (max_height(root2)) == 4"
        ],
        "answer_list": [
            "\t",
            "if",
            " node",
            " is",
            " None",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "0",
            "\n",
            "\t",
            "else",
            ":",
            " \n\t",
            "\t",
            "#",
            " Compute",
            " the",
            " height",
            " of",
            " each",
            " subtree",
            " \n\t",
            "\t",
            "l",
            "height",
            " =",
            " max",
            "_",
            "height",
            "(",
            "node",
            ".",
            "left",
            ")",
            " \n\t",
            "\t",
            "r",
            "height",
            " =",
            " max",
            "_",
            "height",
            "(",
            "node",
            ".",
            "right",
            ")",
            " ",
            "\n\n\t"
        ]
    },
    {
        "task_id": 928,
        "prompt": "Write a python function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n\ndef change_date_format(dt):\n",
        "answer": "def change_date_format(dt):\n\treturn dt[8:] + '-' + dt[5:7] + '-' + dt[:4]\n\n",
        "test_list": [
            "assert change_date_format('2026-01-02')=='02-01-2026'",
            "assert change_date_format('2021-01-04')=='04-01-2021'",
            "assert change_date_format('2030-06-06')=='06-06-2030'"
        ],
        "answer_list": [
            "\t",
            "return",
            " dt",
            "[",
            "8",
            ":]",
            " +",
            " '-'",
            " +",
            " dt",
            "[",
            "5",
            ":",
            "7",
            "]",
            " +",
            " '-'",
            " +",
            " dt",
            "[:",
            "4",
            "]",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 929,
        "prompt": "Write a python function to count repeated items of a tuple.\n\ndef count_tuplex(tuplex,value):  \n",
        "answer": "def count_tuplex(tuplex,value):  \n\tcount = 0\n\tfor i in tuplex:\n\t\tif i == value:\n\t\t\tcount += 1\n\treturn count\n\n",
        "test_list": [
            "assert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7),4)==3",
            "assert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7),2)==2",
            "assert count_tuplex((2, 4, 7, 7, 7, 3, 4, 4, 7),7)==4"
        ],
        "answer_list": [
            "\t",
            "count",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " tup",
            "lex",
            ":",
            "\n\t",
            "\t",
            "if",
            " i",
            " ==",
            " value",
            ":",
            "\n\t\t",
            "\t",
            "count",
            " +=",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " count",
            "\n",
            "\n",
            "tup"
        ]
    },
    {
        "task_id": 930,
        "prompt": "Write a python function that matches a string that has an a followed by zero or more b's by using regex.\n\ndef text_match(text):\n",
        "answer": "def text_match(text):\n\treturn re.search(r'ab*', text)\n\n",
        "test_list": [
            "assert text_match(\"msb\") == 'Not matched!'",
            "assert text_match(\"a0c\") == 'Found a match!'",
            "assert text_match(\"abbc\") == 'Found a match!'"
        ],
        "answer_list": [
            "\t",
            "return",
            " re",
            ".",
            "search",
            "(",
            "r",
            "'",
            "ab",
            "*',",
            " text",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 931,
        "prompt": "Write a python function to calculate the sum of series 1\u00b3+2\u00b3+3\u00b3+\u2026.+n\u00b3.\n\ndef sum_series(number):\n",
        "answer": "def sum_series(number):\n\tsum = 0\n\tfor i in range(1, number+1):\n\t\tsum += i**3\n\treturn sum\n\n",
        "test_list": [
            "assert sum_series(7)==784",
            "assert sum_series(5)==225",
            "assert sum_series(15)==14400"
        ],
        "answer_list": [
            "\t",
            "sum",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "1",
            ",",
            " number",
            "+",
            "1",
            "):",
            "\n\t",
            "\t",
            "sum",
            " +=",
            " i",
            "**",
            "3",
            "\n",
            "\t",
            "return",
            " sum",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 932,
        "prompt": "Write a python function to remove duplicate words from a given list of strings.\n\ndef remove_duplic_list(l):\n",
        "answer": "def remove_duplic_list(l):\n\treturn list(set(l))\n\n",
        "test_list": [
            "assert remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\"])==['Python', 'Exercises', 'Practice', 'Solution']",
            "assert remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\",\"Java\"])==['Python', 'Exercises', 'Practice', 'Solution', 'Java']",
            "assert remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\",\"C++\",\"C\",\"C++\"])==['Python', 'Exercises', 'Practice', 'Solution','C++','C']"
        ],
        "answer_list": [
            "\t",
            "return",
            " list",
            "(",
            "set",
            "(",
            "l",
            "))",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 933,
        "prompt": "Write a python function to convert camel case string to snake case string by using regex.\n\ndef camel_to_snake(text):\n",
        "answer": "def camel_to_snake(text):\n\treturn re.sub(r'(?<!^)(?=[A-Z])', '_', text).lower()\n\n",
        "test_list": [
            "assert camel_to_snake('GoogleAssistant') == 'google_assistant'",
            "assert camel_to_snake('ChromeCast') == 'chrome_cast'",
            "assert camel_to_snake('QuadCore') == 'quad_core'"
        ],
        "answer_list": [
            "\t",
            "return",
            " re",
            ".",
            "sub",
            "(",
            "r",
            "'",
            "(?",
            "<!",
            "^",
            ")(",
            "?",
            "=[",
            "A",
            "-",
            "Z",
            "])",
            "',",
            " '_",
            "',",
            " text",
            ").",
            "lower",
            "()",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 934,
        "prompt": "Write a python function to find the nth delannoy number.\n\ndef dealnnoy_num(n, m): \n",
        "answer": "def dealnnoy_num(n, m): \n\tif n == 1: \n\t\treturn 1\n\telse: \n\t\treturn (dealnnoy_num(n - 1, m) + m * dealnnoy_num(n - 2, m)) \n\n",
        "test_list": [
            "assert dealnnoy_num(3, 4) == 129",
            "assert dealnnoy_num(3, 3) == 63",
            "assert dealnnoy_num(4, 5) == 681"
        ],
        "answer_list": [
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "1",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "1",
            "\n",
            "\t",
            "else",
            ":",
            " \n\t",
            "\t",
            "return",
            " (",
            "de",
            "aln",
            "no",
            "y",
            "_",
            "num",
            "(",
            "n",
            " -",
            " ",
            "1",
            ",",
            " m",
            ")",
            " +",
            " m",
            " *",
            " deal",
            "n",
            "no",
            "y",
            "_",
            "num",
            "(",
            "n",
            " -",
            " ",
            "2",
            ",",
            " m",
            "))",
            " \n",
            "\n",
            "n"
        ]
    },
    {
        "task_id": 935,
        "prompt": "Write a python function to calculate the sum of series 1\u00b2+2\u00b2+3\u00b2+\u2026.+n\u00b2.\n\ndef series_sum(number):\n",
        "answer": "def series_sum(number):\n\tsum = 0\n\tfor i in range(1, number+1):\n\t\tsum += i**2\n\treturn sum\n\n",
        "test_list": [
            "assert series_sum(6)==91",
            "assert series_sum(7)==140",
            "assert series_sum(12)==650"
        ],
        "answer_list": [
            "\t",
            "sum",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "1",
            ",",
            " number",
            "+",
            "1",
            "):",
            "\n\t",
            "\t",
            "sum",
            " +=",
            " i",
            "**",
            "2",
            "\n",
            "\t",
            "return",
            " sum",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 936,
        "prompt": "Write a python function to re-arrange the given tuples based on the given ordered list.\n\ndef re_arrange_tuples(test_list, ord_list):\n",
        "answer": "def re_arrange_tuples(test_list, ord_list):\n\treturn [test_list[i] for i in ord_list]\n\n",
        "test_list": [
            "assert re_arrange_tuples([(4, 3), (1, 9), (2, 10), (3, 2)],  [1, 4, 2, 3]) == [(1, 9), (4, 3), (2, 10), (3, 2)]",
            "assert re_arrange_tuples([(5, 4), (2, 10), (3, 11), (4, 3)],  [3, 4, 2, 3]) == [(3, 11), (4, 3), (2, 10), (3, 11)]",
            "assert re_arrange_tuples([(6, 3), (3, 8), (5, 7), (2, 4)],  [2, 5, 3, 6]) == [(2, 4), (5, 7), (3, 8), (6, 3)]"
        ],
        "answer_list": [
            "\t",
            "return",
            " [",
            "test",
            "_",
            "list",
            "[",
            "i",
            "]",
            " for",
            " i",
            " in",
            " ord",
            "_",
            "list",
            "]",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 937,
        "prompt": "Write a python function to count the most common character in a given string.\n\ndef max_char(str1):\n",
        "answer": "def max_char(str1):\n\tmax_count = 0\n\tmax_char = ''\n\tfor i in str1:\n\t\tcount = str1.count(i)\n\t\tif count > max_count:\n\t\t\tmax_count = count\n\t\t\tmax_char = i\n\treturn max_char\n\n",
        "test_list": [
            "assert max_char(\"hello world\")==('l')",
            "assert max_char(\"hello \")==('l')",
            "assert max_char(\"python pr\")==('p')"
        ],
        "answer_list": [
            "\t",
            "max",
            "_",
            "count",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "max",
            "_",
            "char",
            " =",
            " ''",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " str",
            "1",
            ":",
            "\n\t",
            "\t",
            "count",
            " =",
            " str",
            "1",
            ".",
            "count",
            "(",
            "i",
            ")",
            "\n\t",
            "\t",
            "if",
            " count",
            " >",
            " max",
            "_",
            "count",
            ":",
            "\n\t\t",
            "\t",
            "max",
            "_",
            "count",
            " =",
            " count",
            "\n\t\t",
            "\t",
            "max",
            "_",
            "char",
            " =",
            " i",
            "\n",
            "\t",
            "return",
            " max",
            "_",
            "char",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 938,
        "prompt": "Write a python function to find three closest elements from three sorted arrays.\n\ndef find_closet(A, B, C, p, q, r): \n",
        "answer": "def find_closet(A, B, C, p, q, r): \n\ta = abs(A[p] - B[q]) + abs(B[q] - C[r])\n\tb = abs(A[p] - C[r]) + abs(B[q] - C[r])\n\tc = abs(A[p] - B[q]) + abs(C[r] - A[p])\n\tif a <= b and a <= c: \n\t\treturn A[p] \n\telif b <= a and b <= c: \n\t\treturn B[q] \n\telse: \n\t\treturn C[r] \n\n",
        "test_list": [
            "assert find_closet([1, 4, 10],[2, 15, 20],[10, 12],3,3,2) == (10, 15, 10)",
            "assert find_closet([20, 24, 100],[2, 19, 22, 79, 800],[10, 12, 23, 24, 119],3,5,5) == (24, 22, 23)",
            "assert find_closet([2, 5, 11],[3, 16, 21],[11, 13],3,3,2) == (11, 16, 11)"
        ],
        "answer_list": [
            "\t",
            "a",
            " =",
            " abs",
            "(",
            "A",
            "[",
            "p",
            "]",
            " -",
            " B",
            "[",
            "q",
            "])",
            " +",
            " abs",
            "(",
            "B",
            "[",
            "q",
            "]",
            " -",
            " C",
            "[",
            "r",
            "])",
            "\n",
            "\t",
            "b",
            " =",
            " abs",
            "(",
            "A",
            "[",
            "p",
            "]",
            " -",
            " C",
            "[",
            "r",
            "])",
            " +",
            " abs",
            "(",
            "B",
            "[",
            "q",
            "]",
            " -",
            " C",
            "[",
            "r",
            "])",
            "\n",
            "\t",
            "c",
            " =",
            " abs",
            "(",
            "A",
            "[",
            "p",
            "]",
            " -",
            " B",
            "[",
            "q",
            "])",
            " +",
            " abs",
            "(",
            "C",
            "[",
            "r",
            "]",
            " -",
            " A",
            "[",
            "p",
            "])",
            "\n",
            "\t",
            "if",
            " a",
            " <=",
            " b",
            " and",
            " a",
            " <=",
            " c",
            ":",
            " \n\t",
            "\t",
            "return",
            " A",
            "[",
            "p",
            "]",
            " \n",
            "\t",
            "elif",
            " b",
            " <=",
            " a",
            " and",
            " b",
            " <=",
            " c",
            ":",
            " \n\t",
            "\t",
            "return",
            " B",
            "[",
            "q",
            "]",
            " \n",
            "\t",
            "else",
            ":",
            " \n\t",
            "\t",
            "return",
            " C",
            "[",
            "r",
            "]",
            " \n",
            "\n",
            "A"
        ]
    },
    {
        "task_id": 939,
        "prompt": "Write a python function to sort a list of dictionaries using lambda function.\n\ndef sorted_models(models):\n",
        "answer": "def sorted_models(models):\n\treturn sorted(models, key=lambda x: x['year'])\n\n",
        "test_list": [
            "assert sorted_models([{'make':'Nokia', 'model':216, 'color':'Black'}, {'make':'Mi Max', 'model':2, 'color':'Gold'}, {'make':'Samsung', 'model': 7, 'color':'Blue'}])==[{'make': 'Nokia', 'model': 216, 'color': 'Black'}, {'make': 'Samsung', 'model': 7, 'color': 'Blue'}, {'make': 'Mi Max', 'model': 2, 'color': 'Gold'}]",
            "assert sorted_models([{'make':'Vivo', 'model':20,'color':'Blue'},{'make': 'oppo','model':17,'color':'Gold'},{'make':'Apple','model':11,'color':'red'}])==([{'make':'Vivo', 'model':20,'color':'Blue'},{'make': 'oppo','model':17,'color':'Gold'},{'make':'Apple','model':11,'color':'red'}])",
            "assert sorted_models([{'make':'micromax','model':40,'color':'grey'},{'make':'poco','model':60,'color':'blue'}])==([{'make':'poco','model':60,'color':'blue'},{'make':'micromax','model':40,'color':'grey'}])"
        ],
        "answer_list": [
            "\t",
            "return",
            " sorted",
            "(",
            "models",
            ",",
            " key",
            "=",
            "lambda",
            " x",
            ":",
            " x",
            "['",
            "year",
            "'])",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 940,
        "prompt": "Write a python function to sort the given array by using heap sort.\n\ndef shift_down(arr, start, end):\n",
        "answer": "def shift_down(arr, start, end):\n\troot = start\n\twhile (root * 2 + 1) <= end:\n\t\tchild = root * 2 + 1\n\t\tswap = root\n\t\tif arr[swap] < arr[child]:\n\t\t\tswap = child\n\t\tif child + 1 <= end and arr[swap] < arr[child + 1]:\n\t\t\tswap = child + 1\n\t\tif swap!= root:\n\t\t\tarr[root], arr[swap] = arr[swap], arr[root]\n\t\t\troot = swap\n\t\telse:\n\t\t\treturn\n\n",
        "test_list": [
            "assert heap_sort([12, 2, 4, 5, 2, 3]) == [2, 2, 3, 4, 5, 12]",
            "assert heap_sort([32, 14, 5, 6, 7, 19]) == [5, 6, 7, 14, 19, 32]",
            "assert heap_sort([21, 15, 29, 78, 65]) == [15, 21, 29, 65, 78]"
        ],
        "answer_list": [
            "\t",
            "root",
            " =",
            " start",
            "\n",
            "\t",
            "while",
            " (",
            "root",
            " *",
            " ",
            "2",
            " +",
            " ",
            "1",
            ")",
            " <=",
            " end",
            ":",
            "\n\t",
            "\t",
            "child",
            " =",
            " root",
            " *",
            " ",
            "2",
            " +",
            " ",
            "1",
            "\n\t",
            "\t",
            "swap",
            " =",
            " root",
            "\n\t",
            "\t",
            "if",
            " arr",
            "[",
            "swap",
            "]",
            " <",
            " arr",
            "[",
            "child",
            "]:",
            "\n\t\t",
            "\t",
            "swap",
            " =",
            " child",
            "\n\t",
            "\t",
            "if",
            " child",
            " +",
            " ",
            "1",
            " <=",
            " end",
            " and",
            " arr",
            "[",
            "swap",
            "]",
            " <",
            " arr",
            "[",
            "child",
            " +",
            " ",
            "1",
            "]:",
            "\n\t\t",
            "\t",
            "swap",
            " =",
            " child",
            " +",
            " ",
            "1",
            "\n\t",
            "\t",
            "if",
            " swap",
            "!=",
            " root",
            ":",
            "\n\t\t",
            "\t",
            "arr",
            "[",
            "root",
            "],",
            " arr",
            "[",
            "swap",
            "]",
            " =",
            " arr",
            "[",
            "swap",
            "],",
            " arr",
            "[",
            "root",
            "]",
            "\n\t\t",
            "\t",
            "root",
            " =",
            " swap",
            "\n\t",
            "\t",
            "else",
            ":",
            "\n\t\t",
            "\t",
            "return",
            "\n",
            "\n",
            "def"
        ]
    },
    {
        "task_id": 941,
        "prompt": "Write a python function to count the elements in a list until an element is a tuple.\n\ndef count_elim(num):\n",
        "answer": "def count_elim(num):\n\tcount = 0\n\tfor i in num:\n\t\tif type(i) == tuple:\n\t\t\tbreak\n\t\tcount += 1\n\treturn count\n\n",
        "test_list": [
            "assert count_elim([10,20,30,(10,20),40])==3",
            "assert count_elim([10,(20,30),(10,20),40])==1",
            "assert count_elim([(10,(20,30,(10,20),40))])==0"
        ],
        "answer_list": [
            "\t",
            "count",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " num",
            ":",
            "\n\t",
            "\t",
            "if",
            " type",
            "(",
            "i",
            ")",
            " ==",
            " tuple",
            ":",
            "\n\t\t",
            "\t",
            "break",
            "\n\t",
            "\t",
            "count",
            " +=",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " count",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 942,
        "prompt": "Write a python function to check if any list element is present in the given list.\n\ndef check_element(test_tup, check_list):\n",
        "answer": "def check_element(test_tup, check_list):\n\tfor i in test_tup:\n\t\tif i in check_list:\n\t\t\treturn True\n\treturn False\n\n",
        "test_list": [
            "assert check_element((4, 5, 7, 9, 3),  [6, 7, 10, 11]) == True",
            "assert check_element((1, 2, 3, 4),  [4, 6, 7, 8, 9]) == True",
            "assert check_element((3, 2, 1, 4, 5),  [9, 8, 7, 6]) == False"
        ],
        "answer_list": [
            "\t",
            "for",
            " i",
            " in",
            " test",
            "_",
            "tup",
            ":",
            "\n\t",
            "\t",
            "if",
            " i",
            " in",
            " check",
            "_",
            "list",
            ":",
            "\n\t\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "return",
            " False",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 943,
        "prompt": "Write a python function to combine two given sorted lists using heapq module.\n\ndef combine_lists(num1,num2):\n",
        "answer": "def combine_lists(num1,num2):\n\treturn heapq.merge(num1,num2)\n\n",
        "test_list": [
            "assert combine_lists([1, 3, 5, 7, 9, 11],[0, 2, 4, 6, 8, 10])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]",
            "assert combine_lists([1, 3, 5, 6, 8, 9], [2, 5, 7, 11])==[1,2,3,5,5,6,7,8,9,11]",
            "assert combine_lists([1,3,7],[2,4,6])==[1,2,3,4,6,7]"
        ],
        "answer_list": [
            "\t",
            "return",
            " heap",
            "q",
            ".",
            "merge",
            "(",
            "num",
            "1",
            ",",
            "num",
            "2",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 944,
        "prompt": "Write a python function to separate and print the numbers and their position of a given string.\n\ndef num_position(text):\n",
        "answer": "def num_position(text):\n\tfor i in range(len(text)):\n\t\tif text[i].isdigit():\n\t\t\tprint(text[i], i)\n\n",
        "test_list": [
            "assert num_position(\"there are 70 flats in this apartment\")==10",
            "assert num_position(\"every adult have 32 teeth\")==17",
            "assert num_position(\"isha has 79 chocolates in her bag\")==9"
        ],
        "answer_list": [
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "len",
            "(",
            "text",
            ")):",
            "\n\t",
            "\t",
            "if",
            " text",
            "[",
            "i",
            "].",
            "isdigit",
            "():",
            "\n\t\t",
            "\t",
            "print",
            "(",
            "text",
            "[",
            "i",
            "],",
            " i",
            ")",
            "\n",
            "\n",
            "num"
        ]
    },
    {
        "task_id": 945,
        "prompt": "Write a python function to convert the given tuples into set.\n\ndef tuple_to_set(t):\n",
        "answer": "def tuple_to_set(t):\n\ts = set()\n\tfor i in t:\n\t\ts.add(i)\n\treturn s\n\n",
        "test_list": [
            "assert tuple_to_set(('x', 'y', 'z') ) == {'y', 'x', 'z'}",
            "assert tuple_to_set(('a', 'b', 'c') ) == {'c', 'a', 'b'}",
            "assert tuple_to_set(('z', 'd', 'e') ) == {'d', 'e', 'z'}"
        ],
        "answer_list": [
            "\t",
            "s",
            " =",
            " set",
            "()",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " t",
            ":",
            "\n\t",
            "\t",
            "s",
            ".",
            "add",
            "(",
            "i",
            ")",
            "\n",
            "\t",
            "return",
            " s",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 946,
        "prompt": "Write a python function to find the most common elements and their counts of a specified text.\n\ndef most_common_elem(s,a):\n",
        "answer": "def most_common_elem(s,a):\n\td = {}\n\tfor i in s:\n\t\tif i in d:\n\t\t\td[i] += 1\n\t\telse:\n\t\t\td[i] = 1\n\td = sorted(d.items(), key=lambda x: x[1], reverse=True)\n\tfor i in d:\n\t\tif i[1] >= a:\n\t\t\tprint(i[0], i[1])\n\n",
        "test_list": [
            "assert most_common_elem('lkseropewdssafsdfafkpwe',3)==[('s', 4), ('e', 3), ('f', 3)] ",
            "assert most_common_elem('lkseropewdssafsdfafkpwe',2)==[('s', 4), ('e', 3)]",
            "assert most_common_elem('lkseropewdssafsdfafkpwe',7)==[('s', 4), ('e', 3), ('f', 3), ('k', 2), ('p', 2), ('w', 2), ('d', 2)]"
        ],
        "answer_list": [
            "\t",
            "d",
            " =",
            " {}",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " s",
            ":",
            "\n\t",
            "\t",
            "if",
            " i",
            " in",
            " d",
            ":",
            "\n\t\t",
            "\t",
            "d",
            "[",
            "i",
            "]",
            " +=",
            " ",
            "1",
            "\n\t",
            "\t",
            "else",
            ":",
            "\n\t\t",
            "\t",
            "d",
            "[",
            "i",
            "]",
            " =",
            " ",
            "1",
            "\n",
            "\t",
            "d",
            " =",
            " sorted",
            "(",
            "d",
            ".",
            "items",
            "(),",
            " key",
            "=",
            "lambda",
            " x",
            ":",
            " x",
            "[",
            "1",
            "],",
            " reverse",
            "=",
            "True",
            ")",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " d",
            ":",
            "\n\t",
            "\t",
            "if",
            " i",
            "[",
            "1",
            "]",
            " >=",
            " a",
            ":",
            "\n\t\t",
            "\t",
            "print",
            "(",
            "i",
            "[",
            "0",
            "],",
            " i",
            "[",
            "1",
            "])",
            "\n",
            "\n",
            "s"
        ]
    },
    {
        "task_id": 947,
        "prompt": "Write a python function to find the length of the shortest word.\n\ndef len_log(list1):\n",
        "answer": "def len_log(list1):\n\tlist1.sort(key=len)\n\treturn len(list1[0])\n\n",
        "test_list": [
            "assert len_log([\"win\",\"lose\",\"great\"]) == 3",
            "assert len_log([\"a\",\"ab\",\"abc\"]) == 1",
            "assert len_log([\"12\",\"12\",\"1234\"]) == 2"
        ],
        "answer_list": [
            "\t",
            "list",
            "1",
            ".",
            "sort",
            "(",
            "key",
            "=",
            "len",
            ")",
            "\n",
            "\t",
            "return",
            " len",
            "(",
            "list",
            "1",
            "[",
            "0",
            "])",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 948,
        "prompt": "Write a python function to get an item of a tuple.\n\ndef get_item(tup1,index):\n",
        "answer": "def get_item(tup1,index):\n\treturn tup1[index]\n\n",
        "test_list": [
            "assert get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),3)==('e')",
            "assert get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),-4)==('u')",
            "assert get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),-3)==('r')"
        ],
        "answer_list": [
            "\t",
            "return",
            " tup",
            "1",
            "[",
            "index",
            "]",
            "\n",
            "\n",
            "tup"
        ]
    },
    {
        "task_id": 949,
        "prompt": "Write a python function to sort the given tuple list basis the total digits in tuple.\n\ndef sort_list(test_list):\n",
        "answer": "def sort_list(test_list):\n\treturn sorted(test_list, key=lambda x: sum(map(int, str(x))))\n\n",
        "test_list": [
            "assert sort_list([(3, 4, 6, 723), (1, 2), (12345,), (134, 234, 34)] ) == '[(1, 2), (12345,), (3, 4, 6, 723), (134, 234, 34)]'",
            "assert sort_list([(3, 4, 8), (1, 2), (1234335,), (1345, 234, 334)] ) == '[(1, 2), (3, 4, 8), (1234335,), (1345, 234, 334)]'",
            "assert sort_list([(34, 4, 61, 723), (1, 2), (145,), (134, 23)] ) == '[(1, 2), (145,), (134, 23), (34, 4, 61, 723)]'"
        ],
        "answer_list": [
            "\t",
            "return",
            " sorted",
            "(",
            "test",
            "_",
            "list",
            ",",
            " key",
            "=",
            "lambda",
            " x",
            ":",
            " sum",
            "(",
            "map",
            "(",
            "int",
            ",",
            " str",
            "(",
            "x",
            "))))",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 950,
        "prompt": "Write a python function to display sign of the chinese zodiac for given year.\n\ndef chinese_zodiac(year):\n",
        "answer": "def chinese_zodiac(year):\n\tif year % 12 == 0:\n\t\treturn \"monkey\"\n\telif year % 12 == 1:\n\t\treturn \"rooster\"\n\telif year % 12 == 2:\n\t\treturn \"dog\"\n\telif year % 12 == 3:\n\t\treturn \"pig\"\n\telif year % 12 == 4:\n\t\treturn \"rat\"\n\telif year % 12 == 5:\n\t\treturn \"ox\"\n\telif year % 12 == 6:\n\t\treturn \"tiger\"\n\telif year % 12 == 7:\n\t\treturn \"rabbit\"\n\telif year % 12 == 8:\n\t\treturn \"dragon\"\n\telif year % 12 == 9:\n\t\treturn \"snake\"\n\telif year % 12 == 10:\n\t\treturn \"horse\"\n\telif year % 12 == 11:\n\t\treturn \"sheep\"\n\n",
        "test_list": [
            "assert chinese_zodiac(1997)==('Ox')",
            "assert chinese_zodiac(1998)==('Tiger')",
            "assert chinese_zodiac(1994)==('Dog')"
        ],
        "answer_list": [
            "\t",
            "if",
            " year",
            " %",
            " ",
            "1",
            "2",
            " ==",
            " ",
            "0",
            ":",
            "\n\t",
            "\t",
            "return",
            " \"",
            "monkey",
            "\"",
            "\n",
            "\t",
            "elif",
            " year",
            " %",
            " ",
            "1",
            "2",
            " ==",
            " ",
            "1",
            ":",
            "\n\t",
            "\t",
            "return",
            " \"",
            "ro",
            "oster",
            "\"",
            "\n",
            "\t",
            "elif",
            " year",
            " %",
            " ",
            "1",
            "2",
            " ==",
            " ",
            "2",
            ":",
            "\n\t",
            "\t",
            "return",
            " \"",
            "dog",
            "\"",
            "\n",
            "\t",
            "elif",
            " year",
            " %",
            " ",
            "1",
            "2",
            " ==",
            " ",
            "3",
            ":",
            "\n\t",
            "\t",
            "return",
            " \"",
            "pig",
            "\"",
            "\n",
            "\t",
            "elif",
            " year",
            " %",
            " ",
            "1",
            "2",
            " ==",
            " ",
            "4",
            ":",
            "\n\t",
            "\t",
            "return",
            " \"",
            "rat",
            "\"",
            "\n",
            "\t",
            "elif",
            " year",
            " %",
            " ",
            "1",
            "2",
            " ==",
            " ",
            "5",
            ":",
            "\n\t",
            "\t",
            "return",
            " \"",
            "ox",
            "\"",
            "\n",
            "\t",
            "elif",
            " year",
            " %",
            " ",
            "1",
            "2",
            " ==",
            " ",
            "6",
            ":",
            "\n\t",
            "\t",
            "return",
            " \"",
            "t",
            "iger",
            "\"",
            "\n",
            "\t",
            "elif",
            " year",
            " %",
            " ",
            "1",
            "2",
            " ==",
            " ",
            "7",
            ":",
            "\n\t",
            "\t",
            "return",
            " \"",
            "rabbit",
            "\"",
            "\n",
            "\t",
            "elif",
            " year",
            " %",
            " ",
            "1",
            "2",
            " ==",
            " ",
            "8",
            ":",
            "\n\t",
            "\t",
            "return",
            " \"",
            "dragon",
            "\"",
            "\n",
            "\t",
            "elif",
            " year",
            " %",
            " ",
            "1",
            "2",
            " ==",
            " ",
            "9",
            ":",
            "\n\t",
            "\t",
            "return",
            " \"",
            "snake",
            "\"",
            "\n",
            "\t",
            "elif",
            " year",
            " %",
            " ",
            "1",
            "2",
            " ==",
            " ",
            "1",
            "0",
            ":",
            "\n\t",
            "\t",
            "return",
            " \"",
            "h",
            "orse",
            "\"",
            "\n",
            "\t",
            "elif",
            " year",
            " %",
            " ",
            "1",
            "2",
            " ==",
            " ",
            "1",
            "1",
            ":",
            "\n\t",
            "\t",
            "return",
            " \"",
            "she",
            "ep",
            "\"",
            "\n",
            "\n",
            "year"
        ]
    },
    {
        "task_id": 951,
        "prompt": "Write a python function to find the maximum of similar indices in two lists of tuples.\n\ndef max_similar_indices(test_list1, test_list2):\n",
        "answer": "def max_similar_indices(test_list1, test_list2):\n\t# Your code here\n\tpass\n\n",
        "test_list": [
            "assert max_similar_indices([(2, 4), (6, 7), (5, 1)],[(5, 4), (8, 10), (8, 14)]) == [(5, 4), (8, 10), (8, 14)]",
            "assert max_similar_indices([(3, 5), (7, 8), (6, 2)],[(6, 5), (9, 11), (9, 15)]) == [(6, 5), (9, 11), (9, 15)]",
            "assert max_similar_indices([(4, 6), (8, 9), (7, 3)],[(7, 6), (10, 12), (10, 16)]) == [(7, 6), (10, 12), (10, 16)]"
        ],
        "answer_list": [
            "\t",
            "#",
            " Your",
            " code",
            " here",
            "\n",
            "\t",
            "pass",
            "\n",
            "\n",
            "#"
        ]
    },
    {
        "task_id": 952,
        "prompt": "Write a python function to compute the value of ncr mod p.\n\ndef nCr_mod_p(n, r, p): \n",
        "answer": "def nCr_mod_p(n, r, p): \n\treturn (fact(n, p) * pow(fact(r, p), p-2, p) * pow(fact(n-r, p), p-2, p)) % p\n\n",
        "test_list": [
            "assert nCr_mod_p(10, 2, 13) == 6",
            "assert nCr_mod_p(11, 3, 14) == 11",
            "assert nCr_mod_p(18, 14, 19) == 1"
        ],
        "answer_list": [
            "\t",
            "return",
            " (",
            "fact",
            "(",
            "n",
            ",",
            " p",
            ")",
            " *",
            " pow",
            "(",
            "fact",
            "(",
            "r",
            ",",
            " p",
            "),",
            " p",
            "-",
            "2",
            ",",
            " p",
            ")",
            " *",
            " pow",
            "(",
            "fact",
            "(",
            "n",
            "-",
            "r",
            ",",
            " p",
            "),",
            " p",
            "-",
            "2",
            ",",
            " p",
            "))",
            " %",
            " p",
            "\n",
            "\n",
            "#"
        ]
    },
    {
        "task_id": 953,
        "prompt": "Write a python function to find the minimun number of subsets with distinct elements.\n\ndef subset(ar, n): \n",
        "answer": "def subset(ar, n): \n\tif n == 0: \n\t\treturn 1\n\tif n == 1: \n\t\treturn 1\n\treturn subset(ar, n-1) + subset(ar, n-2) \n\n",
        "test_list": [
            "assert subset([1, 2, 3, 4],4) == 1",
            "assert subset([5, 6, 9, 3, 4, 3, 4],7) == 2",
            "assert subset([1, 2, 3 ],3) == 1"
        ],
        "answer_list": [
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "0",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "1",
            "\n",
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "1",
            ":",
            " \n\t",
            "\t",
            "return",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " subset",
            "(",
            "ar",
            ",",
            " n",
            "-",
            "1",
            ")",
            " +",
            " subset",
            "(",
            "ar",
            ",",
            " n",
            "-",
            "2",
            ")",
            " \n",
            "\n",
            "ar"
        ]
    },
    {
        "task_id": 954,
        "prompt": "Write a python function that gives profit amount if the given amount has profit else return none.\n\ndef profit_amount(actual_cost,sale_amount): \n",
        "answer": "def profit_amount(actual_cost,sale_amount): \n\tif actual_cost > sale_amount:\n\t\treturn sale_amount - actual_cost\n\telse:\n\t\treturn None\n\n",
        "test_list": [
            "assert profit_amount(1500,1200)==300",
            "assert profit_amount(100,200)==None",
            "assert profit_amount(2000,5000)==None"
        ],
        "answer_list": [
            "\t",
            "if",
            " actual",
            "_",
            "cost",
            " >",
            " sale",
            "_",
            "amount",
            ":",
            "\n\t",
            "\t",
            "return",
            " sale",
            "_",
            "amount",
            " -",
            " actual",
            "_",
            "cost",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "return",
            " None",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 955,
        "prompt": "Write a python function to find out, if the given number is abundant.\n\ndef is_abundant(n):\n",
        "answer": "def is_abundant(n):\n\tsum = 0\n\tfor i in range(1, n):\n\t\tif n % i == 0:\n\t\t\tsum += i\n\tif sum > n:\n\t\treturn True\n\telse:\n\t\treturn False\n\n",
        "test_list": [
            "assert is_abundant(12)==True",
            "assert is_abundant(13)==False",
            "assert is_abundant(9)==False"
        ],
        "answer_list": [
            "\t",
            "sum",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "1",
            ",",
            " n",
            "):",
            "\n\t",
            "\t",
            "if",
            " n",
            " %",
            " i",
            " ==",
            " ",
            "0",
            ":",
            "\n\t\t",
            "\t",
            "sum",
            " +=",
            " i",
            "\n",
            "\t",
            "if",
            " sum",
            " >",
            " n",
            ":",
            "\n\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "return",
            " False",
            "\n",
            "\n",
            "def"
        ]
    },
    {
        "task_id": 956,
        "prompt": "Write a python function to split the given string at uppercase letters by using regex.\n\ndef split_list(text):\n",
        "answer": "def split_list(text):\n\treturn re.split(r'[A-Z]', text)\n\n",
        "test_list": [
            "assert split_list(\"LearnToBuildAnythingWithGoogle\") == ['Learn', 'To', 'Build', 'Anything', 'With', 'Google']",
            "assert split_list(\"ApmlifyingTheBlack+DeveloperCommunity\") == ['Apmlifying', 'The', 'Black+', 'Developer', 'Community']",
            "assert split_list(\"UpdateInTheGoEcoSystem\") == ['Update', 'In', 'The', 'Go', 'Eco', 'System']"
        ],
        "answer_list": [
            "\t",
            "return",
            " re",
            ".",
            "split",
            "(",
            "r",
            "'[",
            "A",
            "-",
            "Z",
            "]',",
            " text",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 957,
        "prompt": "Write a python function to get the position of rightmost set bit.\n\ndef get_First_Set_Bit_Pos(n):\n",
        "answer": "def get_First_Set_Bit_Pos(n):\n\tif n == 0:\n\t\treturn -1\n\telse:\n\t\treturn get_First_Set_Bit_Pos(n & (n-1)) + 1\n\n",
        "test_list": [
            "assert get_First_Set_Bit_Pos(12) == 3",
            "assert get_First_Set_Bit_Pos(18) == 2",
            "assert get_First_Set_Bit_Pos(16) == 5"
        ],
        "answer_list": [
            "\t",
            "if",
            " n",
            " ==",
            " ",
            "0",
            ":",
            "\n\t",
            "\t",
            "return",
            " -",
            "1",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "return",
            " get",
            "_",
            "First",
            "_",
            "Set",
            "_",
            "Bit",
            "_",
            "Pos",
            "(",
            "n",
            " &",
            " (",
            "n",
            "-",
            "1",
            "))",
            " +",
            " ",
            "1",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 958,
        "prompt": "Write a python function to convert an integer into a roman numeral.\n\ndef int_to_roman( num):\n",
        "answer": "def int_to_roman( num):\n\troman_numerals = {1000: 'M', 900: 'CM', 500: 'D', 400: 'CD', 100: 'C', 90: 'XC', 50: 'L', 40: 'XL', 10: 'X', 9: 'IX', 5: 'V', 4: 'IV', 1: 'I'}\n\troman_num = ''\n\tfor i in roman_numerals:\n\t\twhile num >= i:\n\t\t\troman_num += roman_numerals[i]\n\t\t\tnum -= i\n\treturn roman_num\n\n",
        "test_list": [
            "assert int_to_roman(1)==(\"I\")",
            "assert int_to_roman(50)==(\"L\")",
            "assert int_to_roman(4)==(\"IV\")"
        ],
        "answer_list": [
            "\t",
            "roman",
            "_",
            "num",
            "er",
            "als",
            " =",
            " {",
            "1",
            "0",
            "0",
            "0",
            ":",
            " '",
            "M",
            "',",
            " ",
            "9",
            "0",
            "0",
            ":",
            " '",
            "CM",
            "',",
            " ",
            "5",
            "0",
            "0",
            ":",
            " '",
            "D",
            "',",
            " ",
            "4",
            "0",
            "0",
            ":",
            " '",
            "CD",
            "',",
            " ",
            "1",
            "0",
            "0",
            ":",
            " '",
            "C",
            "',",
            " ",
            "9",
            "0",
            ":",
            " '",
            "XC",
            "',",
            " ",
            "5",
            "0",
            ":",
            " '",
            "L",
            "',",
            " ",
            "4",
            "0",
            ":",
            " '",
            "XL",
            "',",
            " ",
            "1",
            "0",
            ":",
            " '",
            "X",
            "',",
            " ",
            "9",
            ":",
            " '",
            "IX",
            "',",
            " ",
            "5",
            ":",
            " '",
            "V",
            "',",
            " ",
            "4",
            ":",
            " '",
            "IV",
            "',",
            " ",
            "1",
            ":",
            " '",
            "I",
            "'}",
            "\n",
            "\t",
            "roman",
            "_",
            "num",
            " =",
            " ''",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " rom",
            "an",
            "_",
            "num",
            "er",
            "als",
            ":",
            "\n\t",
            "\t",
            "while",
            " num",
            " >=",
            " i",
            ":",
            "\n\t\t",
            "\t",
            "roman",
            "_",
            "num",
            " +=",
            " rom",
            "an",
            "_",
            "num",
            "er",
            "als",
            "[",
            "i",
            "]",
            "\n\t\t",
            "\t",
            "num",
            " -=",
            " i",
            "\n",
            "\t",
            "return",
            " rom",
            "an",
            "_",
            "num",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 959,
        "prompt": "Write a python function to find the average of a list.\n\ndef Average(lst): \n",
        "answer": "def Average(lst): \n\treturn sum(lst) / len(lst) \n\n",
        "test_list": [
            "assert Average([15, 9, 55, 41, 35, 20, 62, 49]) == 35.75",
            "assert Average([4, 5, 1, 2, 9, 7, 10, 8]) == 5.75",
            "assert Average([1,2,3]) == 2"
        ],
        "answer_list": [
            "\t",
            "return",
            " sum",
            "(",
            "lst",
            ")",
            " /",
            " len",
            "(",
            "lst",
            ")",
            " \n",
            "\n",
            "#"
        ]
    },
    {
        "task_id": 960,
        "prompt": "Write a python function to solve tiling problem.\n\ndef get_noOfways(n):\n",
        "answer": "def get_noOfways(n):\n\tif n==1:\n\t\treturn 1\n\tif n==2:\n\t\treturn 2\n\tif n==3:\n\t\treturn 5\n\treturn get_noOfways(n-1)+get_noOfways(n-2)+get_noOfways(n-3)\n\n",
        "test_list": [
            "assert get_noOfways(4)==3",
            "assert get_noOfways(3)==2",
            "assert get_noOfways(5)==5"
        ],
        "answer_list": [
            "\t",
            "if",
            " n",
            "==",
            "1",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "1",
            "\n",
            "\t",
            "if",
            " n",
            "==",
            "2",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "2",
            "\n",
            "\t",
            "if",
            " n",
            "==",
            "3",
            ":",
            "\n\t",
            "\t",
            "return",
            " ",
            "5",
            "\n",
            "\t",
            "return",
            " get",
            "_",
            "no",
            "Of",
            "ways",
            "(",
            "n",
            "-",
            "1",
            ")+",
            "get",
            "_",
            "no",
            "Of",
            "ways",
            "(",
            "n",
            "-",
            "2",
            ")+",
            "get",
            "_",
            "no",
            "Of",
            "ways",
            "(",
            "n",
            "-",
            "3",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 961,
        "prompt": "Write a python function to convert a roman numeral to an integer.\n\ndef roman_to_int(s):\n",
        "answer": "def roman_to_int(s):\n\troman_numerals = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n\ti = 0\n\tresult = 0\n\twhile i < len(s):\n\t\tif i+1 < len(s) and roman_numerals[s[i]] < roman_numerals[s[i+1]]:\n\t\t\tresult -= roman_numerals[s[i]]\n\t\telse:\n\t\t\tresult += roman_numerals[s[i]]\n\t\ti += 1\n\treturn result\n\n",
        "test_list": [
            "assert roman_to_int('MMMCMLXXXVI')==3986",
            "assert roman_to_int('MMMM')==4000",
            "assert roman_to_int('C')==100"
        ],
        "answer_list": [
            "\t",
            "roman",
            "_",
            "num",
            "er",
            "als",
            " =",
            " {'",
            "I",
            "':",
            " ",
            "1",
            ",",
            " '",
            "V",
            "':",
            " ",
            "5",
            ",",
            " '",
            "X",
            "':",
            " ",
            "1",
            "0",
            ",",
            " '",
            "L",
            "':",
            " ",
            "5",
            "0",
            ",",
            " '",
            "C",
            "':",
            " ",
            "1",
            "0",
            "0",
            ",",
            " '",
            "D",
            "':",
            " ",
            "5",
            "0",
            "0",
            ",",
            " '",
            "M",
            "':",
            " ",
            "1",
            "0",
            "0",
            "0",
            "}",
            "\n",
            "\t",
            "i",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "result",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "while",
            " i",
            " <",
            " len",
            "(",
            "s",
            "):",
            "\n\t",
            "\t",
            "if",
            " i",
            "+",
            "1",
            " <",
            " len",
            "(",
            "s",
            ")",
            " and",
            " rom",
            "an",
            "_",
            "num",
            "er",
            "als",
            "[",
            "s",
            "[",
            "i",
            "]]",
            " <",
            " rom",
            "an",
            "_",
            "num",
            "er",
            "als",
            "[",
            "s",
            "[",
            "i",
            "+",
            "1",
            "]]:",
            "\n\t\t",
            "\t",
            "result",
            " -=",
            " rom",
            "an",
            "_",
            "num",
            "er",
            "als",
            "[",
            "s",
            "[",
            "i",
            "]]",
            "\n\t",
            "\t",
            "else",
            ":",
            "\n\t\t",
            "\t",
            "result",
            " +=",
            " rom",
            "an",
            "_",
            "num",
            "er",
            "als",
            "[",
            "s",
            "[",
            "i",
            "]]",
            "\n\t",
            "\t",
            "i",
            " +=",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " result",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 962,
        "prompt": "Write a python function to find the sum of all even natural numbers within the range l and r.\n\ndef sum_Even(l,r): \n",
        "answer": "def sum_Even(l,r): \n\tsum = 0\n\tfor i in range(l,r+1):\n\t\tif i%2 == 0:\n\t\t\tsum += i\n\treturn sum\n\n",
        "test_list": [
            "assert sum_Even(2,5) == 6",
            "assert sum_Even(3,8) == 18",
            "assert sum_Even(4,6) == 10"
        ],
        "answer_list": [
            "\t",
            "sum",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "l",
            ",",
            "r",
            "+",
            "1",
            "):",
            "\n\t",
            "\t",
            "if",
            " i",
            "%",
            "2",
            " ==",
            " ",
            "0",
            ":",
            "\n\t\t",
            "\t",
            "sum",
            " +=",
            " i",
            "\n",
            "\t",
            "return",
            " sum",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 963,
        "prompt": "Write a python function to calculate the discriminant value.\n\ndef discriminant_value(x,y,z):\n",
        "answer": "def discriminant_value(x,y,z):\n\treturn (x**2) - (4*y*z)\n\n",
        "test_list": [
            "assert discriminant_value(4,8,2)==(\"Two solutions\",32)",
            "assert discriminant_value(5,7,9)==(\"no real solution\",-131)",
            "assert discriminant_value(0,0,9)==(\"one solution\",0)"
        ],
        "answer_list": [
            "\t",
            "return",
            " (",
            "x",
            "**",
            "2",
            ")",
            " -",
            " (",
            "4",
            "*",
            "y",
            "*",
            "z",
            ")",
            "\n",
            "\n",
            "#"
        ]
    },
    {
        "task_id": 964,
        "prompt": "Write a python function to check whether the length of the word is even or not.\n\ndef word_len(s): \n",
        "answer": "def word_len(s): \n\tif len(s)%2==0:\n\t\tprint(\"The length of the word is even\")\n\telse:\n\t\tprint(\"The length of the word is odd\")\n\n",
        "test_list": [
            "assert word_len(\"program\") == False",
            "assert word_len(\"solution\") == True",
            "assert word_len(\"data\") == True"
        ],
        "answer_list": [
            "\t",
            "if",
            " len",
            "(",
            "s",
            ")%",
            "2",
            "==",
            "0",
            ":",
            "\n\t",
            "\t",
            "print",
            "(\"",
            "The",
            " length",
            " of",
            " the",
            " word",
            " is",
            " even",
            "\")",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "print",
            "(\"",
            "The",
            " length",
            " of",
            " the",
            " word",
            " is",
            " odd",
            "\")",
            "\n",
            "\n",
            "word"
        ]
    },
    {
        "task_id": 965,
        "prompt": "Write a python function to convert camel case string to snake case string.\n\ndef camel_to_snake(text):\n",
        "answer": "def camel_to_snake(text):\n\treturn ''.join(['_'+i.lower() if i.isupper() else i for i in text]).lstrip('_')\n\n",
        "test_list": [
            "assert camel_to_snake('PythonProgram')==('python_program')",
            "assert camel_to_snake('pythonLanguage')==('python_language')",
            "assert camel_to_snake('ProgrammingLanguage')==('programming_language')"
        ],
        "answer_list": [
            "\t",
            "return",
            " ''.",
            "join",
            "(['",
            "_'+",
            "i",
            ".",
            "lower",
            "()",
            " if",
            " i",
            ".",
            "is",
            "upper",
            "()",
            " else",
            " i",
            " for",
            " i",
            " in",
            " text",
            "]).",
            "l",
            "strip",
            "('_",
            "')",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 966,
        "prompt": "Write a python function to remove an empty tuple from a list of tuples.\n\ndef remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\n",
        "answer": "def remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\n\treturn [x for x in tuple1 if x!= ()]\n\n",
        "test_list": [
            "assert remove_empty([(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')])==[('',), ('a', 'b'), ('a', 'b', 'c'), 'd']  ",
            "assert remove_empty([(), (), ('',), (\"python\"), (\"program\")])==[('',), (\"python\"), (\"program\")]  ",
            "assert remove_empty([(), (), ('',), (\"java\")])==[('',),(\"java\") ]  "
        ],
        "answer_list": [
            "\t",
            "return",
            " [",
            "x",
            " for",
            " x",
            " in",
            " tuple",
            "1",
            " if",
            " x",
            "!=",
            " ()",
            "]",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 967,
        "prompt": "Write a python function to accept the strings which contains all vowels.\n\ndef check(string): \n",
        "answer": "def check(string): \n\tvowels = \"aeiouAEIOU\"\n\tfor i in string: \n\t\tif i in vowels: \n\t\t\treturn True\n\treturn False\n\n",
        "test_list": [
            "assert check(\"SEEquoiaL\") == 'accepted'",
            "assert check('program') == \"not accepted\"",
            "assert check('fine') == \"not accepted\""
        ],
        "answer_list": [
            "\t",
            "v",
            "ow",
            "els",
            " =",
            " \"",
            "ae",
            "iou",
            "AE",
            "IO",
            "U",
            "\"",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " string",
            ":",
            " \n\t",
            "\t",
            "if",
            " i",
            " in",
            " v",
            "ow",
            "els",
            ":",
            " \n\t\t",
            "\t",
            "return",
            " True",
            "\n",
            "\t",
            "return",
            " False",
            "\n",
            "\n",
            "string"
        ]
    },
    {
        "task_id": 968,
        "prompt": "Write a python function to find maximum possible value for the given periodic function.\n\ndef floor_Max(A,B,N):\n",
        "answer": "def floor_Max(A,B,N):\n\tmax_val = 0\n\tfor i in range(N):\n\t\tif(A[i] > max_val):\n\t\t\tmax_val = A[i]\n\tfor i in range(N):\n\t\tif(B[i] > max_val):\n\t\t\tmax_val = B[i]\n\treturn max_val\n\n",
        "test_list": [
            "assert floor_Max(11,10,9) == 9",
            "assert floor_Max(5,7,4) == 2",
            "assert floor_Max(2,2,1) == 1"
        ],
        "answer_list": [
            "\t",
            "max",
            "_",
            "val",
            " =",
            " ",
            "0",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "N",
            "):",
            "\n\t",
            "\t",
            "if",
            "(",
            "A",
            "[",
            "i",
            "]",
            " >",
            " max",
            "_",
            "val",
            "):",
            "\n\t\t",
            "\t",
            "max",
            "_",
            "val",
            " =",
            " A",
            "[",
            "i",
            "]",
            "\n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "N",
            "):",
            "\n\t",
            "\t",
            "if",
            "(",
            "B",
            "[",
            "i",
            "]",
            " >",
            " max",
            "_",
            "val",
            "):",
            "\n\t\t",
            "\t",
            "max",
            "_",
            "val",
            " =",
            " B",
            "[",
            "i",
            "]",
            "\n",
            "\t",
            "return",
            " max",
            "_",
            "val",
            "\n",
            "\n",
            "A"
        ]
    },
    {
        "task_id": 969,
        "prompt": "Write a python function to join the tuples if they have similar initial elements.\n\ndef join_tuples(test_list):\n",
        "answer": "def join_tuples(test_list):\n\t# Your code here\n\treturn test_list\n\n",
        "test_list": [
            "assert join_tuples([(5, 6), (5, 7), (6, 8), (6, 10), (7, 13)] ) == [(5, 6, 7), (6, 8, 10), (7, 13)]",
            "assert join_tuples([(6, 7), (6, 8), (7, 9), (7, 11), (8, 14)] ) == [(6, 7, 8), (7, 9, 11), (8, 14)]",
            "assert join_tuples([(7, 8), (7, 9), (8, 10), (8, 12), (9, 15)] ) == [(7, 8, 9), (8, 10, 12), (9, 15)]"
        ],
        "answer_list": [
            "\t",
            "#",
            " Your",
            " code",
            " here",
            "\n",
            "\t",
            "return",
            " test",
            "_",
            "list",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 970,
        "prompt": "Write a python function to find minimum of two numbers.\n\ndef min_of_two( x, y ):\n",
        "answer": "def min_of_two( x, y ):\n\tif x < y:\n\t\treturn x\n\telse:\n\t\treturn y\n\n",
        "test_list": [
            "assert min_of_two(10,20)==10",
            "assert min_of_two(19,15)==15",
            "assert min_of_two(-10,-20)==-20"
        ],
        "answer_list": [
            "\t",
            "if",
            " x",
            " <",
            " y",
            ":",
            "\n\t",
            "\t",
            "return",
            " x",
            "\n",
            "\t",
            "else",
            ":",
            "\n\t",
            "\t",
            "return",
            " y",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 971,
        "prompt": "Write a python function to find the maximum number of segments of lengths a, b and c that can be formed from n.\n\ndef maximum_segments(n, a, b, c) : \n",
        "answer": "def maximum_segments(n, a, b, c) : \n\tdp = [[[0 for i in range(n+1)] for j in range(n+1)] for k in range(n+1)] \n\tfor i in range(n+1) : \n\t\tfor j in range(n+1) : \n\t\t\tfor k in range(n+1) : \n\t\t\t\tif (i == 0 or j == 0 or k == 0) : \n\t\t\t\t\tdp[i][j][k] = 0\n\t\t\t\telif (i < a or j < b or k < c) : \n\t\t\t\t\tdp[i][j][k] = 0\n\t\t\t\telse : \n\t\t\t\t\tdp[i][j][k] = max(dp[i][j][k-1], dp[i-1][j][k], dp[i][j-1][k], dp[i-1][j-1][k-1]) + 1\n\treturn dp[n][n][n] \n\n",
        "test_list": [
            "assert maximum_segments(7, 5, 2, 5) == 2",
            "assert maximum_segments(17, 2, 1, 3) == 17",
            "assert maximum_segments(18, 16, 3, 6) == 6"
        ],
        "answer_list": [
            "\t",
            "dp",
            " =",
            " [[",
            "[",
            "0",
            " for",
            " i",
            " in",
            " range",
            "(",
            "n",
            "+",
            "1",
            ")]",
            " for",
            " j",
            " in",
            " range",
            "(",
            "n",
            "+",
            "1",
            ")]",
            " for",
            " k",
            " in",
            " range",
            "(",
            "n",
            "+",
            "1",
            ")]",
            " \n",
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "n",
            "+",
            "1",
            ")",
            " :",
            " \n\t",
            "\t",
            "for",
            " j",
            " in",
            " range",
            "(",
            "n",
            "+",
            "1",
            ")",
            " :",
            " \n\t\t",
            "\t",
            "for",
            " k",
            " in",
            " range",
            "(",
            "n",
            "+",
            "1",
            ")",
            " :",
            " \n\t\t\t",
            "\t",
            "if",
            " (",
            "i",
            " ==",
            " ",
            "0",
            " or",
            " j",
            " ==",
            " ",
            "0",
            " or",
            " k",
            " ==",
            " ",
            "0",
            ")",
            " :",
            " \n\t\t\t\t",
            "\t",
            "dp",
            "[",
            "i",
            "][",
            "j",
            "][",
            "k",
            "]",
            " =",
            " ",
            "0",
            "\n\t\t\t",
            "\t",
            "elif",
            " (",
            "i",
            " <",
            " a",
            " or",
            " j",
            " <",
            " b",
            " or",
            " k",
            " <",
            " c",
            ")",
            " :",
            " \n\t\t\t\t",
            "\t",
            "dp",
            "[",
            "i",
            "][",
            "j",
            "][",
            "k",
            "]",
            " =",
            " ",
            "0",
            "\n\t\t\t",
            "\t",
            "else",
            " :",
            " \n\t\t\t\t",
            "\t",
            "dp",
            "[",
            "i",
            "][",
            "j",
            "][",
            "k",
            "]",
            " =",
            " max",
            "(",
            "dp",
            "[",
            "i",
            "][",
            "j",
            "][",
            "k",
            "-",
            "1",
            "],",
            " dp",
            "[",
            "i",
            "-",
            "1",
            "][",
            "j",
            "][",
            "k",
            "],",
            " dp",
            "[",
            "i",
            "][",
            "j",
            "-",
            "1",
            "][",
            "k",
            "],",
            " dp",
            "[",
            "i",
            "-",
            "1",
            "][",
            "j",
            "-",
            "1",
            "][",
            "k",
            "-",
            "1",
            "])",
            " +",
            " ",
            "1",
            "\n",
            "\t",
            "return",
            " dp",
            "[",
            "n",
            "][",
            "n",
            "][",
            "n",
            "]",
            " \n",
            "\n",
            "n"
        ]
    },
    {
        "task_id": 972,
        "prompt": "Write a python function to concatenate the given two tuples to a nested tuple.\n\ndef concatenate_nested(test_tup1, test_tup2):\n",
        "answer": "def concatenate_nested(test_tup1, test_tup2):\n\treturn (test_tup1, test_tup2)\n\n",
        "test_list": [
            "assert concatenate_nested((3, 4), (5, 6)) == (3, 4, 5, 6)",
            "assert concatenate_nested((1, 2), (3, 4)) == (1, 2, 3, 4)",
            "assert concatenate_nested((4, 5), (6, 8)) == (4, 5, 6, 8)"
        ],
        "answer_list": [
            "\t",
            "return",
            " (",
            "test",
            "_",
            "tup",
            "1",
            ",",
            " test",
            "_",
            "tup",
            "2",
            ")",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 973,
        "prompt": "Write a python function to left rotate the string.\n\ndef left_rotate(s,d):\n",
        "answer": "def left_rotate(s,d):\n\treturn s[d:] + s[:d]\n\n",
        "test_list": [
            "assert left_rotate(\"python\",2) == \"thonpy\"   ",
            "assert left_rotate(\"bigdata\",3 ) == \"databig\" ",
            "assert left_rotate(\"hadoop\",1 ) == \"adooph\" "
        ],
        "answer_list": [
            "\t",
            "return",
            " s",
            "[",
            "d",
            ":]",
            " +",
            " s",
            "[:",
            "d",
            "]",
            "\n",
            "\n",
            "print"
        ]
    },
    {
        "task_id": 974,
        "prompt": "Write a python function to find the minimum total path sum in the given triangle.\n\ndef min_sum_path(A): \n",
        "answer": "def min_sum_path(A): \n\tfor i in range(len(A)-2, -1, -1): \n\t\tfor j in range(len(A[i])): \n\t\t\tA[i][j] += min(A[i+1][j], A[i+1][j+1]) \n\treturn A[0][0] \n\n",
        "test_list": [
            "assert min_sum_path([[ 2 ], [3, 9 ], [1, 6, 7 ]]) == 6",
            "assert min_sum_path([[ 2 ], [3, 7 ], [8, 5, 6 ]]) == 10 ",
            "assert min_sum_path([[ 3 ], [6, 4 ], [5, 2, 7 ]]) == 9"
        ],
        "answer_list": [
            "\t",
            "for",
            " i",
            " in",
            " range",
            "(",
            "len",
            "(",
            "A",
            ")-",
            "2",
            ",",
            " -",
            "1",
            ",",
            " -",
            "1",
            "):",
            " \n\t",
            "\t",
            "for",
            " j",
            " in",
            " range",
            "(",
            "len",
            "(",
            "A",
            "[",
            "i",
            "]))",
            ":",
            " \n\t\t",
            "\t",
            "A",
            "[",
            "i",
            "][",
            "j",
            "]",
            " +=",
            " min",
            "(",
            "A",
            "[",
            "i",
            "+",
            "1",
            "][",
            "j",
            "],",
            " A",
            "[",
            "i",
            "+",
            "1",
            "][",
            "j",
            "+",
            "1",
            "])",
            " \n",
            "\t",
            "return",
            " A",
            "[",
            "0",
            "][",
            "0",
            "]",
            " \n",
            "\n",
            "A"
        ]
    }
]