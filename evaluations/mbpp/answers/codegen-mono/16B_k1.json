[
    {
        "task_id": 2,
        "prompt": "Write a python function to find the shared elements from the given two lists.\n\ndef",
        "answer": "def shared_elements(list1, list2):\n    return list(set(list1) & set(list2))"
    },
    {
        "task_id": 3,
        "prompt": "Write a python function to identify non-prime numbers.\n\ndef",
        "answer": "def non_prime(num):\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                print(num, \"is not a prime number\")\n                break\n        else:\n            print(num, \"is a prime number\")\n    else:\n        print(num, \"is not a prime number\")"
    },
    {
        "task_id": 4,
        "prompt": "Write a python function to find the n largest integers from a given list of numbers, returned in descending order.\n\ndef",
        "answer": "def n_largest_integers(n, list_of_integers):\n    list_of_integers.sort(reverse=True)\n    return list_of_integers[:n]"
    },
    {
        "task_id": 6,
        "prompt": "Write a python function to check whether the two numbers differ at one bit position only or not.\n\ndef",
        "answer": "def differAtOneBit(n1, n2):\n    x = n1 ^ n2\n    while x:\n        print(x)\n        x &= x - 1\n        print(x)\n        if x == 0:\n            return False\n        else:\n            return True"
    },
    {
        "task_id": 7,
        "prompt": "Write a python function to find all words which are at least 4 characters long in a string.\n\ndef",
        "answer": "def find_words(string):\n    return [word for word in string.split() if len(word) >= 4]"
    },
    {
        "task_id": 8,
        "prompt": "Write a python function to find squares of individual elements in a list.\n\ndef",
        "answer": "def square_list(l):\n    return [i**2 for i in l]"
    },
    {
        "task_id": 9,
        "prompt": "Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n\ndef",
        "answer": "def min_rotations(s):\n    n = len(s)\n    for i in range(n):\n        if s[i:] + s[:i] == s:\n            return i\n    return -1"
    },
    {
        "task_id": 11,
        "prompt": "Write a python function to remove first and last occurrence of a given character from the string.\n\ndef",
        "answer": "def remove_char(string, char):\n    string = string.replace(char, \"\")\n    string = string.replace(char, \"\")\n    return string"
    },
    {
        "task_id": 12,
        "prompt": "Write a python function to sort a given matrix in ascending order according to the sum of its rows.\n\ndef",
        "answer": "def sort_matrix(matrix):\n    return sorted(matrix, key=sum)"
    },
    {
        "task_id": 14,
        "prompt": "Write a python function to find the volume of a triangular prism.\n\ndef",
        "answer": "def find_volume(base, height, side):\n    return base * height * side"
    },
    {
        "task_id": 16,
        "prompt": "Write a python function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\ndef",
        "answer": "def is_underscored(input_string):\n    return any(char.islower() for char in input_string if char.isalpha())"
    },
    {
        "task_id": 17,
        "prompt": "Write a python function that returns the perimeter of a square given its side length as input.\n\ndef",
        "answer": "def perimeter(side):\n    return side * 4"
    },
    {
        "task_id": 18,
        "prompt": "Write a python function to remove characters from the first string which are present in the second string.\n\ndef",
        "answer": "def remove_chars(str1, str2):\n    for i in str1:\n        if i in str2:\n            str1 = str1.replace(i, \"\")\n    return str1"
    },
    {
        "task_id": 19,
        "prompt": "Write a python function to find whether a given array of integers contains any duplicate element.\n\ndef",
        "answer": "def containsDuplicate(nums):\n    return len(nums)!= len(set(nums))"
    },
    {
        "task_id": 20,
        "prompt": "Write a python function to check if the given number is woodball or not.\n\ndef",
        "answer": "def is_woodball(number):\n    return number % 3 == 0 or number % 5 == 0"
    },
    {
        "task_id": 56,
        "prompt": "Write a python function to check if a given number is one less than twice its reverse.\n\ndef",
        "answer": "def is_one_less_than_twice_its_reverse(number):\n    number_as_string = str(number)\n    reverse_number = number_as_string[::-1]\n    return int(number_as_string) - int(reverse_number) == 1"
    },
    {
        "task_id": 57,
        "prompt": "Write a python function to find the largest number that can be formed with the given list of digits.\n\ndef",
        "answer": "def largest_number(digits):\n    digits.sort(reverse=True)\n    return int(''.join(map(str, digits)))"
    },
    {
        "task_id": 58,
        "prompt": "Write a python function to check whether the given two integers have opposite sign or not.\n\ndef",
        "answer": "def opposite_sign(a,b):\n    if a<0 and b>0:\n        return True\n    elif a>0 and b<0:\n        return True\n    else:\n        return False"
    },
    {
        "task_id": 59,
        "prompt": "Write a python function to find the nth octagonal number.\n\ndef",
        "answer": "def nth_octagonal(n):\n    return n*(3*n-1)"
    },
    {
        "task_id": 61,
        "prompt": "Write a python function to count the number of substrings with the sum of digits equal to their length.\n\ndef",
        "answer": "def count_substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if sum(map(int, s[i:j+1])) == len(s[i:j+1]):\n                count += 1\n    return count"
    },
    {
        "task_id": 62,
        "prompt": "Write a python function to find smallest number in a list.\n\ndef",
        "answer": "def smallest_number(numbers):\n    smallest = numbers[0]\n    for number in numbers:\n        if number < smallest:\n            smallest = number\n    return smallest"
    },
    {
        "task_id": 63,
        "prompt": "Write a python function to find the maximum difference between available pairs in the given tuple list.\n\ndef",
        "answer": "def max_difference(tuple_list):\n    max_diff = 0\n    for i in range(len(tuple_list)):\n        for j in range(i+1, len(tuple_list)):\n            diff = abs(tuple_list[i] - tuple_list[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "task_id": 64,
        "prompt": "Write a python function to sort a list of tuples using the second value of each tuple.\n\ndef",
        "answer": "def sort_list_of_tuples(list_of_tuples):\n    return sorted(list_of_tuples, key=lambda x: x[1])"
    },
    {
        "task_id": 65,
        "prompt": "Write a python function to flatten a list and sum all of its elements.\n\ndef",
        "answer": "def flatten_list(l):\n    return sum(l)"
    },
    {
        "task_id": 66,
        "prompt": "Write a python function to count the number of positive numbers in a list.\n\ndef",
        "answer": "def count_positives(list):\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count"
    },
    {
        "task_id": 67,
        "prompt": "Write a python function to find the number of ways to partition a set of Bell numbers.\n\ndef",
        "answer": "def partition(arr, n):\n    if n == 0:\n        return 1\n    if n < 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    return partition(arr, n - 1) + partition(arr, n - 2) + partition(arr, n - 3)"
    },
    {
        "task_id": 68,
        "prompt": "Write a python function to check whether the given array is monotonic or not.\n\ndef",
        "answer": "def isMonotonic(A):\n    if len(A) <= 2:\n        return True"
    },
    {
        "task_id": 69,
        "prompt": "Write a python function to check whether a list contains the given sublist or not.\n\ndef",
        "answer": "def check_sublist(lst, sublist):\n    if sublist == []:\n        return True\n    if sublist == lst:\n        return True\n    if len(sublist) > len(lst):\n        return False\n    for i in range(len(lst) - len(sublist) + 1):\n        if lst[i:i + len(sublist)] == sublist:\n            return True\n    return False"
    },
    {
        "task_id": 70,
        "prompt": "Write a python function to find whether all the given tuples have equal length or not.\n\ndef",
        "answer": "def equal_length(lst):\n    return len(set([len(i) for i in lst])) == 1"
    },
    {
        "task_id": 71,
        "prompt": "Write a python function to sort a list of elements.\n\ndef",
        "answer": "def sort_list(lst):\n    lst.sort()\n    return lst"
    },
    {
        "task_id": 72,
        "prompt": "Write a python function to check whether the given number can be represented as the difference of two squares or not.\n\ndef",
        "answer": "def isSquare(n):\n    if n < 0:\n        return False\n    if n == 0:\n        return True\n    if n == 1:\n        return True\n    if n == 4:\n        return True\n    if n == 9:\n        return True\n    if n == 16:\n        return True\n    if n == 25:\n        return True\n    if n == 36:\n        return True\n    if n == 49:\n        return True\n    if n == 64:\n        return True\n    if n == 81:\n        return True\n    if n == 100:\n        return True\n    if n == 121:\n        return True\n    if n == 144:\n        return True\n    if n == 169:\n        return True\n    if n == 196:\n        return True\n    if n == 225:\n        return True\n    if n == 256:\n        return True\n    if n == 289:\n        return True\n    if n == 324:\n        return True\n    if n == 361:\n        return True\n    if n == 400:\n        return True\n    if"
    },
    {
        "task_id": 74,
        "prompt": "Write a python function to check whether it follows the sequence given in the patterns array.\n\ndef",
        "answer": "def isValidSubsequence(array, sequence):\n    # Write your code here.\n    seq_idx = 0\n    for value in array:\n        if seq_idx == len(sequence):\n            break\n        if sequence[seq_idx] == value:\n            seq_idx += 1\n    return seq_idx == len(sequence)"
    },
    {
        "task_id": 75,
        "prompt": "Write a python function to find tuples which have all elements divisible by k from the given list of tuples.\n\ndef",
        "answer": "def divisible_by_k(k, tuples):\n    return [t for t in tuples if all(i % k == 0 for i in t)]"
    },
    {
        "task_id": 77,
        "prompt": "Write a python function to find whether a number is divisible by 11.\n\ndef",
        "answer": "def divisible_by_11(n):\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "task_id": 79,
        "prompt": "Write a python function to check whether the length of the word is odd or not.\n\ndef",
        "answer": "def check_length(word):\n    if len(word) % 2 == 0:\n        print(\"The length of the word is even\")\n    else:\n        print(\"The length of the word is odd\")"
    },
    {
        "task_id": 80,
        "prompt": "Write a python function to find the nth tetrahedral number.\n\ndef",
        "answer": "def find_tetra(n):\n    return n*(n+1)*(n+2)*(n+3)//24"
    },
    {
        "task_id": 82,
        "prompt": "Write a python function to find the volume of a sphere.\n\ndef",
        "answer": "def vol(rad):\n    return (4/3)*(3.14)*(rad**3)"
    },
    {
        "task_id": 83,
        "prompt": "Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n\ndef",
        "answer": "def find_char(string):\n    sum = 0\n    for i in string:\n        sum += ord(i)\n    return sum % 26"
    },
    {
        "task_id": 84,
        "prompt": "Write a python function to find the nth number in the newman conway sequence.\n\ndef",
        "answer": "def newman_conway(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return newman_conway(n-1) + newman_conway(n-2)"
    },
    {
        "task_id": 85,
        "prompt": "Write a python function to find the surface area of a sphere.\n\ndef",
        "answer": "def surface_area_of_sphere(radius):\n    return 4 * 3.14 * radius ** 2"
    },
    {
        "task_id": 86,
        "prompt": "Write a python function to find nth centered hexagonal number.\n\ndef",
        "answer": "def nth_hexagonal(n):\n    return n*(2*n-1)"
    },
    {
        "task_id": 87,
        "prompt": "Write a python function to merge three dictionaries into a single dictionary.\n\ndef",
        "answer": "def merge_dictionaries(dic1, dic2, dic3):\n    dic4 = {}\n    dic4.update(dic1)\n    dic4.update(dic2)\n    dic4.update(dic3)\n    return dic4"
    },
    {
        "task_id": 88,
        "prompt": "Write a python function to get the frequency of all the elements in a list, returned as a dictionary.\n\ndef",
        "answer": "def freq(lst):\n    d = {}\n    for i in lst:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return d"
    },
    {
        "task_id": 89,
        "prompt": "Write a python function to find the closest smaller number than n.\n\ndef",
        "answer": "def closest_smaller(n):\n    if n < 0:\n        return -1\n    if n == 0:\n        return -1\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 3\n    if n == 5:\n        return 4\n    if n == 6:\n        return 5\n    if n == 7:\n        return 6\n    if n == 8:\n        return 7\n    if n == 9:\n        return 8\n    if n == 10:\n        return 9\n    if n == 11:\n        return 10\n    if n == 12:\n        return 11\n    if n == 13:\n        return 12\n    if n == 14:\n        return 13\n    if n == 15:\n        return 14\n    if n == 16:\n        return 15\n    if n == 17:\n        return 16\n    if n == 18:\n        return 17\n    if n == 19:\n        return 18\n    if n == 20:\n        return"
    },
    {
        "task_id": 90,
        "prompt": "Write a python function to find the length of the longest word.\n\ndef",
        "answer": "def longest_word(word1, word2, word3):\n    if len(word1) >= len(word2) and len(word1) >= len(word3):\n        word = word1\n    elif len(word2) >= len(word1) and len(word2) >= len(word3):\n        word = word2\n    else:\n        word = word3\n    return(word)"
    },
    {
        "task_id": 91,
        "prompt": "Write a python function to check if a string is present as a substring in a given list of string values.\n\ndef",
        "answer": "def is_substring(str1, str2):\n    if str1 in str2:\n        return True\n    else:\n        return False"
    },
    {
        "task_id": 92,
        "prompt": "Write a python function to check whether the given number is undulating or not.\n\ndef",
        "answer": "def undulating(n):\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 2 == 1:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 2 == 1:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 2 == 1:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 2 == 1:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 2 == 1:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 2 == 1:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 2 == 1:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 2 == 1:\n        return True\n    if n % 2 == 0:\n        return False\n    "
    },
    {
        "task_id": 93,
        "prompt": "Write a python function to calculate the value of 'a' to the power 'b'.\n\ndef",
        "answer": "def power(a,b):\n    if b == 0:\n        return 1\n    elif b == 1:\n        return a\n    elif b > 1:\n        return a * power(a, b-1)"
    },
    {
        "task_id": 94,
        "prompt": "Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n\ndef",
        "answer": "def min_second(lst):\n    return min(lst, key=lambda x: x[1])[0]"
    },
    {
        "task_id": 95,
        "prompt": "Write a python function to find the length of the smallest list in a list of lists.\n\ndef",
        "answer": "def shortest_list(list_of_lists):\n    return min(list_of_lists, key=len)"
    },
    {
        "task_id": 96,
        "prompt": "Write a python function to find the number of divisors of a given integer.\n\ndef",
        "answer": "def divisors(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "task_id": 97,
        "prompt": "Write a python function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n\ndef",
        "answer": "def freq(l):\n    d = {}\n    for i in l:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return d"
    },
    {
        "task_id": 98,
        "prompt": "Write a python function to multiply all the numbers in a list and divide with the length of the list.\n\ndef",
        "answer": "def multiply_divide(nums):\n    total = 1\n    for num in nums:\n        total *= num\n    return total / len(nums)"
    },
    {
        "task_id": 99,
        "prompt": "Write a python function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n\ndef",
        "answer": "def dec_to_bin(n):\n    if n == 0:\n        return 0\n    else:\n        return n % 2 + 10 * dec_to_bin(int(n / 2))"
    },
    {
        "task_id": 100,
        "prompt": "Write a python function to find the next smallest palindrome of a specified integer, returned as an integer.\n\ndef",
        "answer": "def isPalindrome(n):\n    return str(n) == str(n)[::-1]"
    },
    {
        "task_id": 101,
        "prompt": "Write a python function to find the kth element in the given array using 1-based indexing.\n\ndef",
        "answer": "def kth_element(arr, k):\n    return arr[k-1]"
    },
    {
        "task_id": 102,
        "prompt": "Write a python function to convert a snake case string to camel case string.\n\ndef",
        "answer": "def snake_to_camel(string):\n    return string.title().replace(\"_\", \"\")"
    },
    {
        "task_id": 103,
        "prompt": "Write a python function to find the Eulerian number a(n, m).\n\ndef",
        "answer": "def eulerian(n, m):\n    if n == m:\n        return 1\n    elif n > m:\n        return eulerian(n - 1, m) + eulerian(n - 1, m - 1)\n    else:\n        return eulerian(n + 1, m) + eulerian(n + 1, m - 1)"
    },
    {
        "task_id": 104,
        "prompt": "Write a python function to sort each sublist of strings in a given list of lists.\n\ndef",
        "answer": "def sort_list(l):\n    for i in l:\n        i.sort()\n    return l"
    },
    {
        "task_id": 105,
        "prompt": "Write a python function to count true booleans in the given list.\n\ndef",
        "answer": "def count_true(lst):\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count"
    },
    {
        "task_id": 106,
        "prompt": "Write a python function to append the given list to the given tuples.\n\ndef",
        "answer": "def append_list(list1, list2):\n    return list1 + list2"
    },
    {
        "task_id": 108,
        "prompt": "Write a python function to merge three lists into a single sorted list.\n\ndef",
        "answer": "def merge_lists(list1, list2, list3):\n    list1.extend(list2)\n    list1.extend(list3)\n    list1.sort()\n    return list1"
    },
    {
        "task_id": 109,
        "prompt": "Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\ndef",
        "answer": "def rotate_string(s, n):\n    return s[n:] + s[:n]"
    },
    {
        "task_id": 111,
        "prompt": "Write a python function to find the common elements in given nested lists.\n\ndef",
        "answer": "def common_elements(lst1, lst2):\n    result = []\n    for i in lst1:\n        for j in lst2:\n            if i == j:\n                result.append(i)\n    return result"
    },
    {
        "task_id": 113,
        "prompt": "Write a python function to check if a string represents an integer or not.\n\ndef",
        "answer": "def isInteger(s):\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "task_id": 115,
        "prompt": "Write a python function to check whether all dictionaries in a list are empty or not.\n\ndef",
        "answer": "def is_empty(l):\n    for i in l:\n        if i:\n            return False\n    return True"
    },
    {
        "task_id": 116,
        "prompt": "Write a python function to convert a given tuple of positive integers into a single integer.\n\ndef",
        "answer": "def convert(tup):\n    return int(''.join(map(str, tup)))"
    },
    {
        "task_id": 117,
        "prompt": "Write a python function to convert all possible convertible elements in a list of lists to floats.\n\ndef",
        "answer": "def convert_to_float(lst):\n    return [float(i) for i in lst]"
    },
    {
        "task_id": 118,
        "prompt": "Write a python function to convert a string to a list of strings split on the space character.\n\ndef",
        "answer": "def string_to_list(string):\n    return string.split(\" \")"
    },
    {
        "task_id": 119,
        "prompt": "Write a python function to find the element that appears only once in a sorted array.\n\ndef",
        "answer": "def find_unique_number(arr):\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return arr[0] if arr[0]!= arr[1] else arr[1]\n    if len(arr) == 3:\n        return arr[0] if arr[0]!= arr[1] and arr[0]!= arr[2] else arr[1] if arr[1]!= arr[0] and arr[1]!= arr[2] else arr[2]\n    if len(arr) == 4:\n        return arr[0] if arr[0]!= arr[1] and arr[0]!= arr[2] and arr[0]!= arr[3] else arr[1] if arr[1]!= arr[0] and arr[1]!= arr[2] and arr[1]!= arr[3] else arr[2] if arr[2]!= arr[0] and arr[2]!= arr[1] and arr[2]!= arr[3] else arr[3]\n    if len"
    },
    {
        "task_id": 120,
        "prompt": "Write a python function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n\ndef",
        "answer": "def max_product(lst):\n    max_prod = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if abs(lst[i][0]*lst[j][1]) > max_prod:\n                max_prod = abs(lst[i][0]*lst[j][1])\n    return max_prod"
    },
    {
        "task_id": 123,
        "prompt": "Write a python function to sum all amicable numbers from 1 to a specified number.\n\ndef",
        "answer": "def sum_amicable_numbers(limit):\n    amicable_numbers = []\n    for i in range(1, limit):\n        if i in amicable_numbers:\n            continue\n        sum_of_divisors = sum(get_divisors(i))\n        sum_of_divisors_of_sum_of_divisors = sum(get_divisors(sum_of_divisors))\n        if i == sum_of_divisors_of_sum_of_divisors and i!= sum_of_divisors:\n            amicable_numbers.append(i)\n            amicable_numbers.append(sum_of_divisors)\n    return sum(amicable_numbers)"
    },
    {
        "task_id": 124,
        "prompt": "Write a python function to get the angle of a complex number.\n\ndef",
        "answer": "def get_angle(z):\n    return np.angle(z)"
    },
    {
        "task_id": 125,
        "prompt": "Write a python function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\ndef",
        "answer": "def max_ones_zeros(str1):\n    max_count = 0\n    count_0 = 0\n    count_1 = 0\n    for i in str1:\n        if i == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        if count_0 > count_1:\n            max_count = count_0\n        else:\n            max_count = count_1\n    return max_count"
    },
    {
        "task_id": 126,
        "prompt": "Write a python function to find the sum of common divisors of two given numbers.\n\ndef",
        "answer": "def sum_of_common_divisors(num1, num2):\n    sum = 0\n    for i in range(1, num1):\n        if num1 % i == 0:\n            sum += i\n    for i in range(1, num2):\n        if num2 % i == 0:\n            sum += i\n    return sum"
    },
    {
        "task_id": 127,
        "prompt": "Write a python function to multiply two integers.\n\ndef",
        "answer": "def multiply(a,b):\n    return a*b"
    },
    {
        "task_id": 128,
        "prompt": "Write a python function to find words that are longer than n characters from a given list of words.\n\ndef",
        "answer": "def long_words(n, str):\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "task_id": 129,
        "prompt": "Write a python function to calculate whether the matrix is a magic square.\n\ndef",
        "answer": "def magic_square(matrix):\n    if len(matrix)!= 3:\n        return False\n    if len(matrix[0])!= 3:\n        return False\n    if len(matrix[1])!= 3:\n        return False\n    if len(matrix[2])!= 3:\n        return False\n    if len(matrix[0][0])!= 1:\n        return False\n    if len(matrix[0][1])!= 1:\n        return False\n    if len(matrix[0][2])!= 1:\n        return False\n    if len(matrix[1][0])!= 1:\n        return False\n    if len(matrix[1][1])!= 1:\n        return False\n    if len(matrix[1][2])!= 1:\n        return False\n    if len(matrix[2][0])!= 1:\n        return False\n    if len(matrix[2][1])!= 1:\n        return False\n    if len(matrix[2][2])!= 1:\n        return False\n    if matrix[0"
    },
    {
        "task_id": 130,
        "prompt": "Write a python function to find the item with maximum frequency in a given list.\n\ndef",
        "answer": "def max_frequency(lst):\n    d = {}\n    for i in lst:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return max(d, key=d.get)"
    },
    {
        "task_id": 131,
        "prompt": "Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n\ndef",
        "answer": "def reverse_vowels(s):\n    vowels = set(\"aeiouAEIOU\")\n    string = list(s)\n    i = 0\n    j = len(s) - 1\n    while i < j:\n        if string[i].lower() not in vowels:\n            i += 1\n        elif string[j].lower() not in vowels:\n            j -= 1\n        else:\n            string[i], string[j] = string[j], string[i]\n            i += 1\n            j -= 1\n    return \"\".join(string)"
    },
    {
        "task_id": 132,
        "prompt": "Write a python function to convert a tuple to a string.\n\ndef",
        "answer": "def convert_tuple_to_string(tup):\n    return ''.join(tup)"
    },
    {
        "task_id": 133,
        "prompt": "Write a python function to calculate the sum of the negative numbers of a given list of numbers.\n\ndef",
        "answer": "def negative_sum(numbers):\n    negative_numbers = []\n    for number in numbers:\n        if number < 0:\n            negative_numbers.append(number)\n    return sum(negative_numbers)"
    },
    {
        "task_id": 135,
        "prompt": "Write a python function to find the nth hexagonal number.\n\ndef",
        "answer": "def hexagonal(n):\n    return n * (2 * n - 1)"
    },
    {
        "task_id": 137,
        "prompt": "Write a python function to find the ratio of zeroes to non-zeroes in an array of integers.\n\ndef",
        "answer": "def zeroes_to_non_zeroes(arr):\n    count_zeroes = 0\n    count_non_zeroes = 0\n    for i in arr:\n        if i == 0:\n            count_zeroes += 1\n        else:\n            count_non_zeroes += 1\n    return count_zeroes/count_non_zeroes"
    },
    {
        "task_id": 138,
        "prompt": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n\ndef",
        "answer": "def isPowerOfTwo(n):\n    if n == 0:\n        return False\n    while n % 2 == 0:\n        n = n / 2\n    if n == 1:\n        return True\n    return False"
    },
    {
        "task_id": 139,
        "prompt": "Write a python function to find the circumference of a circle.\n\ndef",
        "answer": "def circumference(radius):\n    pi = 3.14\n    circumference = 2 * pi * radius\n    return circumference"
    },
    {
        "task_id": 140,
        "prompt": "Write a python function to flatten the list of lists into a single set of numbers.\n\ndef",
        "answer": "def flatten(nested_list):\n    return [e for inner_list in nested_list for e in inner_list]"
    },
    {
        "task_id": 141,
        "prompt": "Write a python function to sort a list of elements.\n\ndef",
        "answer": "def sort_list(lst):\n    lst.sort()\n    return lst"
    },
    {
        "task_id": 142,
        "prompt": "Write a python function to count number items that are identical in the same position of three given lists.\n\ndef",
        "answer": "def count_identical_items(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "task_id": 143,
        "prompt": "Write a python function to find number of lists present in the given tuple.\n\ndef",
        "answer": "def count_list(tup):\n    count = 0\n    for i in tup:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "task_id": 145,
        "prompt": "Write a python function to find the maximum difference between any two elements in a given array.\n\ndef",
        "answer": "def maxDiff(arr):\n    max_diff = arr[0] - arr[1]\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[j] - arr[i] > max_diff:\n                max_diff = arr[j] - arr[i]\n    return max_diff"
    },
    {
        "task_id": 160,
        "prompt": "Write a python function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\ndef",
        "answer": "def solve_linear(a, b, n):\n    if a == 0:\n        if b == 0:\n            return None\n        else:\n            return (0, n // b)\n    else:\n        return (n // b, n // a)"
    },
    {
        "task_id": 161,
        "prompt": "Write a python function to remove all elements from a given list present in another list.\n\ndef",
        "answer": "def remove_elements(list1, list2):\n    for i in list2:\n        if i in list1:\n            list1.remove(i)\n    return list1"
    },
    {
        "task_id": 162,
        "prompt": "Write a python function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n\ndef",
        "answer": "def sum_of_numbers(n):\n    sum = 0\n    for i in range(0, n // 2):\n        sum += n - 2 * i\n    return sum"
    },
    {
        "task_id": 163,
        "prompt": "Write a python function to calculate the area of a regular polygon given the length and number of its sides.\n\ndef",
        "answer": "def polygon_area(sides, length):\n    area = (sides * (length ** 2)) / (4 * tan(pi / sides))\n    return area"
    },
    {
        "task_id": 164,
        "prompt": "Write a python function to determine if the sum of the divisors of two integers are the same.\n\ndef",
        "answer": "def divisor(n):\n    l = []\n    for i in range(1,n):\n        if n % i == 0:\n            l.append(i)\n    return l"
    },
    {
        "task_id": 165,
        "prompt": "Write a python function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\ndef",
        "answer": "def count_char(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i].lower() in 'abcdefghijklmnopqrstuvwxyz':\n            count += 1\n    return count"
    },
    {
        "task_id": 166,
        "prompt": "Write a python function that counts the number of pairs of integers in a list that xor to an even number.\n\ndef",
        "answer": "def count_pairs(lst, x):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] ^ lst[j] == x:\n                count += 1\n    return count"
    },
    {
        "task_id": 167,
        "prompt": "Write a python function to find the smallest power of 2 greater than or equal to n.\n\ndef",
        "answer": "def smallest_power_of_two_greater_than_n(n):\n    if n < 0:\n        return -1\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 8\n    if n == 5:\n        return 16\n    if n == 6:\n        return 32\n    if n == 7:\n        return 64\n    if n == 8:\n        return 128\n    if n == 9:\n        return 256\n    if n == 10:\n        return 512\n    if n == 11:\n        return 1024\n    if n == 12:\n        return 2048\n    if n == 13:\n        return 4096\n    if n == 14:\n        return 8192\n    if n == 15:\n        return 16384\n    if n == 16:\n        return 32768\n    if n == 17:\n        return 65536\n    if n == 18:\n        return 131072\n    if n == 19"
    },
    {
        "task_id": 168,
        "prompt": "Write a python function to count the number of occurrences of a number in a given list.\n\ndef",
        "answer": "def count_occurrences(list, number):\n    count = 0\n    for i in list:\n        if i == number:\n            count += 1\n    return count"
    },
    {
        "task_id": 170,
        "prompt": "Write a python function to find the sum of numbers in a list within a range specified by two indices.\n\ndef",
        "answer": "def sum_range(lst, start, end):\n    sum = 0\n    for i in range(start, end+1):\n        sum += lst[i]\n    return sum"
    },
    {
        "task_id": 171,
        "prompt": "Write a python function to find the perimeter of a regular pentagon from the length of its sides.\n\ndef",
        "answer": "def pentagon_perimeter(s1, s2, s3, s4, s5):\n    return s1 + s2 + s3 + s4 + s5"
    },
    {
        "task_id": 172,
        "prompt": "Write a python function to count the number of occurence of the string'std' in a given string.\n\ndef",
        "answer": "def count_string(str):\n    count = 0\n    for i in range(len(str)):\n        if str[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "task_id": 222,
        "prompt": "Write a python function to check if all the elements in tuple have same data type or not.\n\ndef",
        "answer": "def check_same_type(tuple):\n    return len(set(map(type, tuple))) == 1"
    },
    {
        "task_id": 223,
        "prompt": "Write a python function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\ndef",
        "answer": "def majority_element(arr, n, x):\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    if n == 2:\n        return arr[0] == x or arr[1] == x\n    if n == 3:\n        return arr[0] == x or arr[1] == x or arr[2] == x\n    if n == 4:\n        return arr[0] == x or arr[1] == x or arr[2] == x or arr[3] == x\n    if n == 5:\n        return arr[0] == x or arr[1] == x or arr[2] == x or arr[3] == x or arr[4] == x\n    if n == 6:\n        return arr[0] == x or arr[1] == x or arr[2] == x or arr[3] == x or arr[4] == x or arr[5] == x\n    if n == 7:\n        return arr[0] == x or arr[1] == x or arr[2]"
    },
    {
        "task_id": 224,
        "prompt": "Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n\ndef",
        "answer": "def count_set_bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "task_id": 226,
        "prompt": "Write a python function to remove the characters which have odd index values of a given string.\n\ndef",
        "answer": "def remove_char(str):\n  return str[::2]"
    },
    {
        "task_id": 227,
        "prompt": "Write a python function to find minimum of three numbers.\n\ndef",
        "answer": "def min_num(num1,num2,num3):\n    if num1<num2 and num1<num3:\n        return num1\n    elif num2<num1 and num2<num3:\n        return num2\n    else:\n        return num3"
    },
    {
        "task_id": 228,
        "prompt": "Write a python function to check whether all the bits are unset in the given range or not.\n\ndef",
        "answer": "def check_bits(n):\n    return n & (n-1) == 0"
    },
    {
        "task_id": 229,
        "prompt": "Write a python function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n\ndef",
        "answer": "def rearrange(arr, n):\n    i = -1\n    j = 0\n    while j < n:\n        if arr[j] < 0:\n            i += 1\n            arr[i], arr[j] = arr[j], arr[i]\n        j += 1\n    return arr"
    },
    {
        "task_id": 230,
        "prompt": "Write a python function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n\ndef",
        "answer": "def replace_char(string, char):\n    return string.replace(\" \", char)"
    },
    {
        "task_id": 232,
        "prompt": "Write a python function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n\ndef",
        "answer": "def n_largest_items(list, n):\n    return sorted(list, reverse=True)[:n]"
    },
    {
        "task_id": 233,
        "prompt": "Write a python function to find the lateral surface area of a cylinder.\n\ndef",
        "answer": "def lateral_surface_area(radius, height):\n    return 2 * 3.14 * radius * (radius + height)"
    },
    {
        "task_id": 234,
        "prompt": "Write a python function to find the volume of a cube given its side length.\n\ndef",
        "answer": "def cube_volume(side_length):\n    return side_length ** 3"
    },
    {
        "task_id": 235,
        "prompt": "Write a python function to set all even bits of a given number.\n\ndef",
        "answer": "def set_even_bits(n):\n    return n & 0xAAAAAAAA"
    },
    {
        "task_id": 237,
        "prompt": "Write a python function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n\ndef",
        "answer": "def tuple_count(tuple_list):\n    tuple_dict = {}\n    for tuple in tuple_list:\n        if tuple in tuple_dict:\n            tuple_dict[tuple] += 1\n        else:\n            tuple_dict[tuple] = 1\n    return tuple_dict"
    },
    {
        "task_id": 238,
        "prompt": "Write a python function to count the number of non-empty substrings of a given string.\n\ndef",
        "answer": "def count_substring(string):\n    count = 0\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            if string[i:j+1]!= '':\n                count += 1\n    return count"
    },
    {
        "task_id": 239,
        "prompt": "Write a python function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n\ndef",
        "answer": "def possible_sequences(m, n):\n    if n == 1:\n        return m\n    elif n == 2:\n        return m * (m - 1)\n    else:\n        return possible_sequences(m, n - 1) + possible_sequences(m - 1, n - 1)"
    },
    {
        "task_id": 240,
        "prompt": "Write a python function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n\ndef",
        "answer": "def replace_last(list1, list2):\n    list1[-1:] = list2\n    return list1"
    },
    {
        "task_id": 242,
        "prompt": "Write a python function to count the total number of characters in a string.\n\ndef",
        "answer": "def count_characters(string):\n    count = 0\n    for i in string:\n        count += 1\n    return count"
    },
    {
        "task_id": 244,
        "prompt": "Write a python function to find the next perfect square greater than a given number.\n\ndef",
        "answer": "def next_perfect_square(n):\n    if n < 0:\n        return -1\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 5\n    if n == 5:\n        return 6\n    if n == 6:\n        return 7\n    if n == 7:\n        return 8\n    if n == 8:\n        return 9\n    if n == 9:\n        return 10\n    if n == 10:\n        return 11\n    if n == 11:\n        return 12\n    if n == 12:\n        return 13\n    if n == 13:\n        return 14\n    if n == 14:\n        return 15\n    if n == 15:\n        return 16\n    if n == 16:\n        return 17\n    if n == 17:\n        return 18\n    if n == 18:\n        return 19\n    if n == 19:\n        return 20\n    if n == 20:\n        return"
    },
    {
        "task_id": 245,
        "prompt": "Write a python function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n\ndef",
        "answer": "def maxSumBitonicSubsequence(arr):\n    n = len(arr)\n    max_sum = 0\n    for i in range(n):\n        sum = 0\n        for j in range(i, n):\n            sum += arr[j]\n            if sum > max_sum:\n                max_sum = sum\n    return max_sum"
    },
    {
        "task_id": 246,
        "prompt": "Write a python function for computing square roots using the babylonian method.\n\ndef",
        "answer": "def sqrt(number):\n    \"\"\"\n    Calculate the floored square root of a number"
    },
    {
        "task_id": 247,
        "prompt": "Write a python function to find the length of the longest palindromic subsequence in the given string.\n\ndef",
        "answer": "def longest_palindromic_subsequence(s):\n    n = len(s)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for i in range(n - 1, -1, -1):\n        for j in range(i + 1, n):\n            if s[i] == s[j]:\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    return dp[0][n - 1]"
    },
    {
        "task_id": 248,
        "prompt": "Write a python function that takes in an integer n and calculates the harmonic sum of n-1.\n\ndef",
        "answer": "def harmonic_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return 1/n + harmonic_sum(n-1)"
    },
    {
        "task_id": 249,
        "prompt": "Write a python function to find the intersection of two arrays.\n\ndef",
        "answer": "def intersection(nums1, nums2):\n    return list(set(nums1) & set(nums2))"
    },
    {
        "task_id": 250,
        "prompt": "Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n\ndef",
        "answer": "def count_occurences(tuple, element):\n    count = 0\n    for i in tuple:\n        if i == element:\n            count += 1\n    return count"
    },
    {
        "task_id": 251,
        "prompt": "Write a python function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n\ndef",
        "answer": "def insert_before_each(my_list, element):\n    new_list = []\n    for i in range(len(my_list)):\n        new_list.append(element)\n        new_list.append(my_list[i])\n    return new_list"
    },
    {
        "task_id": 252,
        "prompt": "Write a python function to convert complex numbers to polar coordinates.\n\ndef",
        "answer": "def convert_to_polar(complex_num):\n    return (abs(complex_num), cmath.phase(complex_num))"
    },
    {
        "task_id": 253,
        "prompt": "Write a python function that returns the number of integer elements in a given list.\n\ndef",
        "answer": "def count_integers(lst):\n    count = 0\n    for i in lst:\n        if type(i) == int:\n            count += 1\n    return count"
    },
    {
        "task_id": 255,
        "prompt": "Write a python function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n\ndef",
        "answer": "def combinations(lst, n):\n    result = []\n    if n > len(lst):\n        return result\n    if n == 1:\n        for i in lst:\n            result.append((i,))\n    elif n > 1:\n        for i in range(len(lst) - n + 1):\n            for temp in combinations(lst[i + 1:], n - 1):\n                result.append(tuple([lst[i]] + list(temp)))\n    return result"
    },
    {
        "task_id": 256,
        "prompt": "Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n\ndef",
        "answer": "def count_primes(num):\n    #check for 0 or 1 input\n    if num < 2:\n        return 0\n    #2 or greater\n    primes = [2]\n    x = 3\n    #x is going through every number up to input num\n    while x <= num:\n        #check if x is prime\n        for y in primes:\n            if x % y == 0:\n                x += 2\n                break\n        else:\n            primes.append(x)\n            x += 2\n    print(primes)\n    return len(primes)"
    },
    {
        "task_id": 257,
        "prompt": "Write a python function that takes in two numbers and returns a tuple with the second number and then the first number.\n\ndef",
        "answer": "def swap(a,b):\n    return b,a"
    },
    {
        "task_id": 259,
        "prompt": "Write a python function to maximize the given two tuples.\n\ndef",
        "answer": "def maximize(tuple1, tuple2):\n    if tuple1[0] > tuple2[0]:\n        return tuple1\n    elif tuple1[0] < tuple2[0]:\n        return tuple2\n    elif tuple1[1] > tuple2[1]:\n        return tuple1\n    elif tuple1[1] < tuple2[1]:\n        return tuple2\n    elif tuple1[2] > tuple2[2]:\n        return tuple1\n    elif tuple1[2] < tuple2[2]:\n        return tuple2\n    elif tuple1[3] > tuple2[3]:\n        return tuple1\n    elif tuple1[3] < tuple2[3]:\n        return tuple2\n    elif tuple1[4] > tuple2[4]:\n        return tuple1\n    elif tuple1[4] < tuple2[4]:\n        return tuple2\n    elif tuple1[5] > tuple2[5]:\n        return tuple1\n    elif tuple1[5] < tuple2[5]:\n        return tuple2\n    "
    },
    {
        "task_id": 260,
        "prompt": "Write a python function to find the nth newman\u2013shanks\u2013williams prime number.\n\ndef",
        "answer": "def nth_newman_shanks_williams_prime(n):\n    if n < 1:\n        return None\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 5\n    if n == 4:\n        return 7\n    if n == 5:\n        return 11\n    if n == 6:\n        return 13\n    if n == 7:\n        return 17\n    if n == 8:\n        return 23\n    if n == 9:\n        return 29\n    if n == 10:\n        return 31\n    if n == 11:\n        return 37\n    if n == 12:\n        return 41\n    if n == 13:\n        return 43\n    if n == 14:\n        return 47\n    if n == 15:\n        return 53\n    if n == 16:\n        return 59\n    if n == 17:\n        return 61\n    if n == 18:\n        return 67\n    if n == 19:\n        return 71\n    if n == 20:\n        return 73\n    "
    },
    {
        "task_id": 261,
        "prompt": "Write a python function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n\ndef",
        "answer": "def division(tuple1, tuple2):\n    return tuple(map(lambda x, y: x/y, tuple1, tuple2))"
    },
    {
        "task_id": 262,
        "prompt": "Write a python function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\ndef",
        "answer": "def split_list(l, L):\n    return (l[:L], l[L:])"
    },
    {
        "task_id": 264,
        "prompt": "Write a python function to calculate a dog's age in dog's years.\n\ndef",
        "answer": "def dog_years(name, age):\n    return name + \", you are \" + str(age * 7) + \" in dog's years\""
    },
    {
        "task_id": 265,
        "prompt": "Write a python function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n\ndef",
        "answer": "def split_list(lst, n):\n    return [lst[i::n] for i in range(n)]"
    },
    {
        "task_id": 266,
        "prompt": "Write a python function to find the lateral surface area of a cube given its side length.\n\ndef",
        "answer": "def lateral_surface_area(side_length):\n    return 6 * side_length ** 2"
    },
    {
        "task_id": 267,
        "prompt": "Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n\ndef",
        "answer": "def sum_of_squares(n):\n    return sum([i**2 for i in range(1, n+1, 2)])"
    },
    {
        "task_id": 268,
        "prompt": "Write a python function to find then'th star number.\n\ndef",
        "answer": "def nth_star_number(n):\n    return n * n + n + 1"
    },
    {
        "task_id": 269,
        "prompt": "Write a python function to find the ascii value of a character.\n\ndef",
        "answer": "def ascii_value(char):\n    return ord(char)"
    },
    {
        "task_id": 270,
        "prompt": "Write a python function to find the sum of even numbers at even positions of a list.\n\ndef",
        "answer": "def sum_even_positions(lst):\n    sum = 0\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            sum += lst[i]\n    return sum"
    },
    {
        "task_id": 271,
        "prompt": "Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n\ndef",
        "answer": "def sum_of_first_n_even_raised_to_fifth_power(n):\n    sum = 0\n    for i in range(n):\n        sum += (i ** 5)\n    return sum"
    },
    {
        "task_id": 272,
        "prompt": "Write a python function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n\ndef",
        "answer": "def rear(l):\n    return [i[1] for i in l]"
    },
    {
        "task_id": 273,
        "prompt": "Write a python function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\ndef",
        "answer": "def subtract(tuple1, tuple2):\n    return tuple(tuple1[i] - tuple2[i] for i in range(len(tuple1)))"
    },
    {
        "task_id": 274,
        "prompt": "Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n\ndef",
        "answer": "def binomial_coefficients(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n * binomial_coefficients(n - 2) + binomial_coefficients(n - 1)"
    },
    {
        "task_id": 276,
        "prompt": "Write a python function that takes in the radius and height of a cylinder and returns the the volume.\n\ndef",
        "answer": "def volume_of_cylinder(radius, height):\n    volume = 3.14 * radius ** 2 * height\n    return volume"
    },
    {
        "task_id": 277,
        "prompt": "Write a python function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n\ndef",
        "answer": "def dict_greater_than(d, n):\n    return {k: v for k, v in d.items() if v >= n}"
    },
    {
        "task_id": 278,
        "prompt": "Write a python function to find the number of elements that occurs before the tuple element in the given tuple.\n\ndef",
        "answer": "def before(tup, el):\n    count = 0\n    for i in tup:\n        if i == el:\n            break\n        count += 1\n    return count"
    },
    {
        "task_id": 279,
        "prompt": "Write a python function to find the nth decagonal number.\n\ndef",
        "answer": "def nth_decagonal(n):\n    return n*(n+1)"
    },
    {
        "task_id": 280,
        "prompt": "Write a python function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n\ndef",
        "answer": "def search_array(array, element):\n    for i in range(len(array)):\n        if array[i] == element:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "task_id": 281,
        "prompt": "Write a python function to check if the elements of a given list are unique or not.\n\ndef",
        "answer": "def unique(lst):\n    return len(lst) == len(set(lst))"
    },
    {
        "task_id": 282,
        "prompt": "Write a python function to subtract two lists element-wise.\n\ndef",
        "answer": "def subtract(list1, list2):\n    return [x - y for x, y in zip(list1, list2)]"
    },
    {
        "task_id": 283,
        "prompt": "Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\ndef",
        "answer": "def freq_digits(num):\n    num_list = [int(i) for i in str(num)]\n    freq_list = [0] * 10\n    for i in num_list:\n        freq_list[i] += 1\n    for i in range(10):\n        if freq_list[i] > i:\n            return False\n    return True"
    },
    {
        "task_id": 284,
        "prompt": "Write a python function that takes in a list and element and checks whether all items in the list are equal to the given element.\n\ndef",
        "answer": "def all_equal(lst, x):\n    for i in lst:\n        if i!= x:\n            return False\n    return True"
    },
    {
        "task_id": 285,
        "prompt": "Write a python function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n\ndef",
        "answer": "def ab_check(s):\n    if len(s) < 3:\n        return False\n    elif s[0] == 'a' and s[1] == 'b' and s[2] == 'b':\n        return True\n    elif s[0] == 'a' and s[1] == 'b' and s[2] == 'b' and s[3] == 'b':\n        return True\n    else:\n        return False"
    },
    {
        "task_id": 286,
        "prompt": "Write a python function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n\ndef",
        "answer": "def max_sum_k_times(arr, k):\n    if k == 0:\n        return 0\n    if k == 1:\n        return sum(arr)\n    if k == 2:\n        return max(sum(arr), sum(arr[1:]))\n    if k > 2:\n        return max(max_sum_k_times(arr, k - 1), sum(arr) + max_sum_k_times(arr, k - 2))"
    },
    {
        "task_id": 287,
        "prompt": "Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n\ndef",
        "answer": "def sum_of_squares(n):\n    sum = 0\n    for i in range(n):\n        if i % 2 == 0:\n            sum += i ** 2\n    return sum"
    },
    {
        "task_id": 290,
        "prompt": "Write a python function to find the list of maximum length in a list of lists.\n\ndef",
        "answer": "def max_len_list(l):\n    max_len = 0\n    for i in l:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len"
    },
    {
        "task_id": 291,
        "prompt": "Write a python function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\ndef",
        "answer": "def fence(n, k):\n    if n == 0 or k == 0:\n        return 0\n    if n == 1:\n        return k\n    if n == 2:\n        return k * k\n    if n == 3:\n        return k * k * k\n    dp = [[0 for _ in range(k)] for _ in range(n)]\n    dp[0][0] = 1\n    dp[1][0] = k\n    dp[1][1] = k\n    dp[2][0] = k * k\n    dp[2][1] = k * k\n    dp[2][2] = k * k\n    dp[3][0] = k * k * k\n    dp[3][1] = k * k * k\n    dp[3][2] = k * k * k\n    dp[3][3] = k * k * k\n    for i in range(4, n):\n        for j in range(k):\n            dp[i][j] = dp[i - 1][j] + dp[i - 2][j]"
    },
    {
        "task_id": 292,
        "prompt": "Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n\ndef",
        "answer": "def quotient(a,b):\n    return int(a/b)"
    },
    {
        "task_id": 293,
        "prompt": "Write a python function to find the third side of a right angled triangle.\n\ndef",
        "answer": "def third_side(a, b):\n    return (a**2 + b**2)**0.5"
    },
    {
        "task_id": 294,
        "prompt": "Write a python function to find the maximum value in a given heterogeneous list.\n\ndef",
        "answer": "def max_list(l):\n    max = l[0]\n    for i in l:\n        if i > max:\n            max = i\n    return max"
    },
    {
        "task_id": 295,
        "prompt": "Write a python function to return the sum of all divisors of a number.\n\ndef",
        "answer": "def sum_of_divisors(n):\n    sum = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum += i\n    return sum"
    },
    {
        "task_id": 296,
        "prompt": "Write a python function to count inversions in an array.\n\ndef",
        "answer": "def count_inversions(arr):\n    if len(arr) <= 1:\n        return arr, 0\n    else:\n        mid = len(arr) // 2\n        left_arr, left_inversions = count_inversions(arr[:mid])\n        right_arr, right_inversions = count_inversions(arr[mid:])\n        merged_arr, merged_inversions = merge_count_inversions(left_arr, right_arr)\n        return merged_arr, left_inversions + right_inversions + merged_inversions"
    },
    {
        "task_id": 297,
        "prompt": "Write a python function to flatten a given nested list structure.\n\ndef",
        "answer": "def flatten(nested_list):\n    flat_list = []\n    for element in nested_list:\n        if type(element) is list:\n            flat_list.extend(flatten(element))\n        else:\n            flat_list.append(element)\n    return flat_list"
    },
    {
        "task_id": 299,
        "prompt": "Write a python function to calculate the maximum aggregate from the list of tuples.\n\ndef",
        "answer": "def max_aggregate(lst):\n    return max(sum(tup) for tup in lst)"
    },
    {
        "task_id": 300,
        "prompt": "Write a python function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n\ndef",
        "answer": "def count_binary_sequences(n):\n    return 2 ** n * (2 ** n - 1) // 2"
    },
    {
        "task_id": 301,
        "prompt": "Write a python function to find the depth of a dictionary.\n\ndef",
        "answer": "def depth(d):\n    if isinstance(d, dict):\n        return 1 + (max(map(depth, d.values())) if d else 0)\n    return 0"
    },
    {
        "task_id": 304,
        "prompt": "Write a python function to find element at a given index after number of rotations.\n\ndef",
        "answer": "def rotLeft(a, d):\n    for i in range(d):\n        a.append(a.pop(0))\n    return a"
    },
    {
        "task_id": 305,
        "prompt": "Write a python function to return two words from a list of words starting with letter 'p'.\n\ndef",
        "answer": "def p_words(words):\n    p_words = []\n    for word in words:\n        if word[0] == 'p':\n            p_words.append(word)\n    return p_words"
    },
    {
        "task_id": 306,
        "prompt": "Write a python function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n\ndef",
        "answer": "def maxSumIncreasingSubsequence(arr, n, k):\n    # code here\n    dp = [0] * n\n    dp[0] = arr[0]\n    for i in range(1, n):\n        dp[i] = max(dp[i - 1], arr[i])\n    for i in range(k, n):\n        dp[i] = max(dp[i - 1], dp[i - k] + arr[i])\n    return dp[n - 1]"
    },
    {
        "task_id": 307,
        "prompt": "Write a python function to get a colon of a tuple.\n\ndef",
        "answer": "def colon(tup):\n    return tup[0:2]"
    },
    {
        "task_id": 308,
        "prompt": "Write a python function to find the specified number of largest products from two given lists, selecting one factor from each list.\n\ndef",
        "answer": "def largest_product(list1, list2, n):\n    list1.sort()\n    list2.sort()\n    if n > len(list1) or n > len(list2):\n        return \"Invalid Input\"\n    else:\n        return list1[-n] * list2[-n]"
    },
    {
        "task_id": 309,
        "prompt": "Write a python function to find the maximum of two numbers.\n\ndef",
        "answer": "def max_num(num1,num2):\n    if num1>num2:\n        return num1\n    else:\n        return num2"
    },
    {
        "task_id": 310,
        "prompt": "Write a python function to convert a given string to a tuple of characters.\n\ndef",
        "answer": "def convert(string):\n    return tuple(string)"
    },
    {
        "task_id": 311,
        "prompt": "Write a python function to set the left most unset bit.\n\ndef",
        "answer": "def set_left_most_set_bit(n):\n    n = n | (n >> 1)\n    n = n | (n >> 2)\n    n = n | (n >> 4)\n    n = n | (n >> 8)\n    n = n | (n >> 16)\n    return n"
    },
    {
        "task_id": 312,
        "prompt": "Write a python function to find the volume of a cone.\n\ndef",
        "answer": "def cone_volume(radius, height):\n    pi = 3.14\n    volume = pi * radius ** 2 * height / 3\n    return volume"
    },
    {
        "task_id": 388,
        "prompt": "Write a python function to find the highest power of 2 that is less than or equal to n.\n\ndef",
        "answer": "def highestPowerOf2(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 2\n    if n == 4:\n        return 4\n    if n == 5:\n        return 4\n    if n == 6:\n        return 4\n    if n == 7:\n        return 4\n    if n == 8:\n        return 4\n    if n == 9:\n        return 4\n    if n == 10:\n        return 4\n    if n == 11:\n        return 4\n    if n == 12:\n        return 4\n    if n == 13:\n        return 4\n    if n == 14:\n        return 4\n    if n == 15:\n        return 4\n    if n == 16:\n        return 4\n    if n == 17:\n        return 4\n    if n == 18:\n        return 4\n    if n == 19:\n        return 4\n    if n == 20:\n        return 4\n    if n == 21:\n        return 4\n"
    },
    {
        "task_id": 389,
        "prompt": "Write a python function to find then'th lucas number.\n\ndef",
        "answer": "def lucas(n):\n    \"\"\"\n    >>> lucas(0)\n    2\n    >>> lucas(1)\n    1\n    >>> lucas(2)\n    3\n    >>> lucas(3)\n    4\n    >>> lucas(4)\n    7\n    >>> lucas(5)\n    11\n    >>> lucas(6)\n    18\n    >>> lucas(7)\n    29\n    >>> lucas(8)\n    47\n    >>> lucas(9)\n    76\n    >>> lucas(10)\n    123\n    >>> lucas(11)\n    218\n    >>> lucas(12)\n    355\n    >>> lucas(13)\n    610\n    >>> lucas(14)\n    987\n    >>> lucas(15)\n    1597\n    >>> lucas(16)\n    2584\n    >>> lucas(17)\n    4181\n    >>> lucas(18)\n    7484\n    >>> lucas(19)\n    11834\n    >>> lucas(20)\n    17711\n    >>> lucas"
    },
    {
        "task_id": 390,
        "prompt": "Write a python function to apply a given format string to all of the elements in a list.\n\ndef",
        "answer": "def format_list(lst, fmt):\n    return [fmt.format(i) for i in lst]"
    },
    {
        "task_id": 391,
        "prompt": "Write a python function to convert more than one list to nested dictionary.\n\ndef",
        "answer": "def convert_to_dict(list1, list2):\n    return [{list1[i]: list2[i]} for i in range(len(list1))]"
    },
    {
        "task_id": 392,
        "prompt": "Write a python function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n\ndef",
        "answer": "def max_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return max(max_sum(n//2), max_sum(n//3), max_sum(n//4), max_sum(n//5)) + n"
    },
    {
        "task_id": 393,
        "prompt": "Write a python function to find the list with maximum length.\n\ndef",
        "answer": "def max_length(lst):\n    return len(max(lst, key=len))"
    },
    {
        "task_id": 394,
        "prompt": "Write a python function to check if given tuple contains no duplicates.\n\ndef",
        "answer": "def check_duplicates(tup):\n    return len(set(tup)) == len(tup)"
    },
    {
        "task_id": 395,
        "prompt": "Write a python function to find the first non-repeated character in a given string.\n\ndef",
        "answer": "def first_non_repeated_character(input_string):\n    input_string = input_string.lower()\n    for i in input_string:\n        if input_string.count(i) == 1:\n            return i\n    return None"
    },
    {
        "task_id": 396,
        "prompt": "Write a python function to check whether the given string starts and ends with the same character or not.\n\ndef",
        "answer": "def check(s):\n    if s[0] == s[-1]:\n        return True\n    else:\n        return False"
    },
    {
        "task_id": 397,
        "prompt": "Write a python function to find the median of three numbers.\n\ndef",
        "answer": "def median(a,b,c):\n    if a>b:\n        if b>c:\n            return b\n        elif a>c:\n            return c\n        else:\n            return a\n    else:\n        if a>c:\n            return a\n        elif b>c:\n            return c\n        else:\n            return b"
    },
    {
        "task_id": 398,
        "prompt": "Write a python function to compute the sum of digits of each number of a given list.\n\ndef",
        "answer": "def sum_of_digits(nums):\n    sum = 0\n    for i in nums:\n        sum += sum(int(x) for x in str(i))\n    return sum"
    },
    {
        "task_id": 399,
        "prompt": "Write a python function to perform the mathematical bitwise xor operation across the given tuples.\n\ndef",
        "answer": "def xor(tuple1, tuple2):\n    return tuple(a ^ b for a, b in zip(tuple1, tuple2))"
    },
    {
        "task_id": 400,
        "prompt": "Write a python function to extract the number of unique tuples in the given list.\n\ndef",
        "answer": "def unique_tuples(lst):\n    return len(set(tuple(sorted(sub)) for sub in lst))"
    },
    {
        "task_id": 401,
        "prompt": "Write a python function to perform index wise addition of tuple elements in the given two nested tuples.\n\ndef",
        "answer": "def index_wise_addition(tuple1, tuple2):\n    return tuple(map(lambda x, y: x + y, tuple1, tuple2))"
    },
    {
        "task_id": 404,
        "prompt": "Write a python function to find the minimum of two numbers.\n\ndef",
        "answer": "def min_num(num1,num2):\n    if num1 < num2:\n        return num1\n    else:\n        return num2"
    },
    {
        "task_id": 405,
        "prompt": "Write a python function to check whether an element exists within a tuple.\n\ndef",
        "answer": "def check_tuple(tup, element):\n    if element in tup:\n        return True\n    else:\n        return False"
    },
    {
        "task_id": 406,
        "prompt": "Write a python function to find whether the parity of a given number is odd.\n\ndef",
        "answer": "def is_odd(n):\n    if n % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "task_id": 407,
        "prompt": "Write a python function to create the next bigger number by rearranging the digits of a given number.\n\ndef",
        "answer": "def next_bigger(n):\n    n = list(str(n))\n    i = len(n) - 1\n    while i > 0 and n[i - 1] >= n[i]:\n        i -= 1\n    if i <= 0:\n        return -1\n    j = len(n) - 1\n    while n[j] <= n[i - 1]:\n        j -= 1\n    n[i - 1], n[j] = n[j], n[i - 1]\n    n[i:] = reversed(n[i:])\n    res = int(''.join(n))\n    return res if res < 2 ** 31 else -1"
    },
    {
        "task_id": 408,
        "prompt": "Write a python function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\ndef",
        "answer": "def smallest_pairs(arr1, arr2, k):\n    if len(arr1) == 0 or len(arr2) == 0:\n        return []\n    if k > len(arr1) * len(arr2):\n        return []\n    arr1.sort()\n    arr2.sort()\n    i = 0\n    j = 0\n    result = []\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] + arr2[j] < arr1[i + 1] + arr2[j + 1]:\n            result.append([arr1[i], arr2[j]])\n            i += 1\n            j += 1\n        elif arr1[i] + arr2[j] > arr1[i + 1] + arr2[j + 1]:\n            j += 1\n        else:\n            i += 1\n    return result[:k]"
    },
    {
        "task_id": 409,
        "prompt": "Write a python function to find the minimum product from the pairs of tuples within a given list.\n\ndef",
        "answer": "def min_product(lst):\n    return min(a*b for a,b in lst)"
    },
    {
        "task_id": 410,
        "prompt": "Write a python function to find the minimum value in a given heterogeneous list.\n\ndef",
        "answer": "def min_value(list):\n    return min(list)"
    },
    {
        "task_id": 411,
        "prompt": "Write a python function to convert the given snake case string to camel case string.\n\ndef",
        "answer": "def snake_to_camel(snake_str):\n    \"\"\"\n    Convert a snake case string to camel case string.\n    \"\"\"\n    if not snake_str:\n        return snake_str"
    },
    {
        "task_id": 412,
        "prompt": "Write a python function to remove odd numbers from a given list.\n\ndef",
        "answer": "def remove_odd(l):\n    return [i for i in l if i % 2 == 0]"
    },
    {
        "task_id": 413,
        "prompt": "Write a python function to extract the nth element from a given list of tuples.\n\ndef",
        "answer": "def nth(list, n):\n    return [item[n] for item in list]"
    },
    {
        "task_id": 414,
        "prompt": "Write a python function to check whether any value in a sequence exists in a sequence or not.\n\ndef",
        "answer": "def check_value(seq):\n    for i in seq:\n        if i in seq:\n            return True\n    return False"
    },
    {
        "task_id": 415,
        "prompt": "Write a python function to find a pair with highest product from a given array of integers.\n\ndef",
        "answer": "def highest_product_of_3(lst):\n    max1 = max(lst[0], lst[1])\n    max2 = min(lst[0], lst[1])\n    max3 = lst[0] * lst[1]\n    min1 = min(lst[0], lst[1])\n    min2 = max(lst[0], lst[1])\n    for i in range(2, len(lst)):\n        if lst[i] > max1:\n            max3 = max2\n            max2 = max1\n            max1 = lst[i]\n        elif lst[i] > max2:\n            max3 = max2\n            max2 = lst[i]\n        elif lst[i] > max3:\n            max3 = lst[i]\n        if lst[i] < min1:\n            min2 = min1\n            min1 = lst[i]\n        elif lst[i] < min2:\n            min2 = lst[i"
    },
    {
        "task_id": 417,
        "prompt": "Write a python function to find common first element in given list of tuple.\n\ndef",
        "answer": "def common_first_element(l):\n    l1 = []\n    for i in l:\n        l1.append(i[0])\n    return max(l1, key=l1.count)"
    },
    {
        "task_id": 418,
        "prompt": "Write a python function to find the element of a list having maximum length.\n\ndef",
        "answer": "def max_length(lst):\n    return max(lst, key=len)"
    },
    {
        "task_id": 419,
        "prompt": "Write a python function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n\ndef",
        "answer": "def sum_list(nums):\n    return sum(nums) * len(nums)"
    },
    {
        "task_id": 420,
        "prompt": "Write a python function to find the cube sum of first n even natural numbers.\n\ndef",
        "answer": "def cube_sum(n):\n    return sum([i**3 for i in range(1,n+1) if i%2==0])"
    },
    {
        "task_id": 421,
        "prompt": "Write a python function to concatenate each element of tuple by the delimiter.\n\ndef",
        "answer": "def concatenate_tuple(tuple1, delimiter):\n    return delimiter.join(tuple1)"
    },
    {
        "task_id": 422,
        "prompt": "Write a python function to find the average of cubes of first n natural numbers.\n\ndef",
        "answer": "def avg_cubes(n):\n    return (n*(n+1)*(n+2))/6"
    },
    {
        "task_id": 424,
        "prompt": "Write a python function to extract only the rear index element of each string in the given tuple.\n\ndef",
        "answer": "def rear(tup):\n    return tup[-1]"
    },
    {
        "task_id": 425,
        "prompt": "Write a python function to count the number of sublists containing a particular element.\n\ndef",
        "answer": "def count_sublist(lst, x):\n    count = 0\n    for i in lst:\n        if x in i:\n            count += 1\n    return count"
    },
    {
        "task_id": 426,
        "prompt": "Write a python function to filter odd numbers.\n\ndef",
        "answer": "def filter_odd(nums):\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "task_id": 427,
        "prompt": "Write a python function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n\ndef",
        "answer": "def date_formatter(date):\n    date = date.split('-')\n    date = date[2] + '-' + date[1] + '-' + date[0]\n    return date"
    },
    {
        "task_id": 428,
        "prompt": "Write a python function to sort the given array by using shell sort.\n\ndef",
        "answer": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2"
    },
    {
        "task_id": 429,
        "prompt": "Write a python function to extract the elementwise and tuples from the given two tuples.\n\ndef",
        "answer": "def extract(tuple1, tuple2):\n    return (tuple1[0] and tuple2[0]), (tuple1[1] and tuple2[1])"
    },
    {
        "task_id": 430,
        "prompt": "Write a python function to find the directrix of a parabola.\n\ndef",
        "answer": "def directrix(a,b,c):\n    x = (4*a*c - b**2)/(4*a)\n    y = (b**2 - 4*a*c)/(2*a)\n    return x,y"
    },
    {
        "task_id": 431,
        "prompt": "Write a python function that takes two lists and returns true if they have at least one common element.\n\ndef",
        "answer": "def common_data(list1, list2):\n    result = False\n    for x in list1:\n        for y in list2:\n            if x == y:\n                result = True\n                return result"
    },
    {
        "task_id": 432,
        "prompt": "Write a python function to find the median length of a trapezium.\n\ndef",
        "answer": "def median_length_trapezium(a, b, c, d):\n    return (a + b + c + d) / 2"
    },
    {
        "task_id": 433,
        "prompt": "Write a python function to check whether the entered number is greater than the elements of the given array.\n\ndef",
        "answer": "def greater_than_array(arr,n):\n    for i in range(n):\n        if arr[i]>arr[i+1]:\n            return True\n    return False"
    },
    {
        "task_id": 434,
        "prompt": "Write a python function that matches a string that has an a followed by one or more b's.\n\ndef",
        "answer": "def string_match(mystring):\n    count = 0\n    for i in range(len(mystring)):\n        if mystring[i] == 'a':\n            if mystring[i+1] == 'b':\n                count += 1\n    return count"
    },
    {
        "task_id": 435,
        "prompt": "Write a python function to find the last digit of a given number.\n\ndef",
        "answer": "def last_digit(n1, n2):\n    if n2 == 0:\n        return 1\n    elif n1 == 0:\n        return 0\n    else:\n        return (n1 % 10) * (n2 % 10)"
    },
    {
        "task_id": 436,
        "prompt": "Write a python function to return the negative numbers in a list.\n\ndef",
        "answer": "def negative_numbers(list):\n    negative_list = []\n    for i in list:\n        if i < 0:\n            negative_list.append(i)\n    return negative_list"
    },
    {
        "task_id": 437,
        "prompt": "Write a python function to remove odd characters in a string.\n\ndef",
        "answer": "def remove_odd_chars(string):\n    return \"\".join([i for i in string if i%2==0])"
    },
    {
        "task_id": 438,
        "prompt": "Write a python function to count bidirectional tuple pairs.\n\ndef",
        "answer": "def count_bidirectional_pairs(tuple_list):\n    count = 0\n    for i in range(len(tuple_list)):\n        for j in range(i+1, len(tuple_list)):\n            if tuple_list[i][0] == tuple_list[j][1] and tuple_list[i][1] == tuple_list[j][0]:\n                count += 1\n    return count"
    },
    {
        "task_id": 439,
        "prompt": "Write a python function to join a list of multiple integers into a single integer.\n\ndef",
        "answer": "def join_integers(list_of_integers):\n    return int(\"\".join(list_of_integers))"
    },
    {
        "task_id": 440,
        "prompt": "Write a python function to find the first adverb and their positions in a given sentence.\n\ndef",
        "answer": "def find_adverb(sentence):\n    adverb = []\n    for i in sentence.split():\n        if i.endswith('ly'):\n            adverb.append(i)\n    return adverb"
    },
    {
        "task_id": 441,
        "prompt": "Write a python function to find the surface area of a cube of a given size.\n\ndef",
        "answer": "def surface_area_cube(side_length):\n    return 6 * side_length ** 2"
    },
    {
        "task_id": 442,
        "prompt": "Write a python function to find the ration of positive numbers in an array of integers.\n\ndef",
        "answer": "def pos_neg_ratio(arr):\n    pos_count = 0\n    neg_count = 0\n    for i in arr:\n        if i > 0:\n            pos_count += 1\n        elif i < 0:\n            neg_count += 1\n    return pos_count / neg_count"
    },
    {
        "task_id": 443,
        "prompt": "Write a python function to find the largest negative number from the given list.\n\ndef",
        "answer": "def max_negative_num(nums):\n    max_num = None\n    for num in nums:\n        if max_num is None or num < max_num:\n            max_num = num\n    return max_num"
    },
    {
        "task_id": 444,
        "prompt": "Write a python function to trim each tuple by k in the given tuple list.\n\ndef",
        "answer": "def trim_tuple(tuple_list, k):\n    return [tuple(tuple_list[i][:k] + tuple_list[i][k + 1:]) for i in range(len(tuple_list))]"
    },
    {
        "task_id": 445,
        "prompt": "Write a python function to perform index wise multiplication of tuple elements in the given two tuples.\n\ndef",
        "answer": "def multiply(tuple1, tuple2):\n    return tuple(map(lambda x, y: x * y, tuple1, tuple2))"
    },
    {
        "task_id": 446,
        "prompt": "Write a python function to count the occurence of all elements of list in a tuple.\n\ndef",
        "answer": "def count_occurence(tuple_list):\n    count_dict = {}\n    for element in tuple_list:\n        if element in count_dict:\n            count_dict[element] += 1\n        else:\n            count_dict[element] = 1\n    return count_dict"
    },
    {
        "task_id": 447,
        "prompt": "Write a python function to find cubes of individual elements in a list.\n\ndef",
        "answer": "def cube(n):\n    return n*n*n"
    },
    {
        "task_id": 448,
        "prompt": "Write a python function to calculate the sum of perrin numbers.\n\ndef",
        "answer": "def perrin_number(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return perrin_number(n-1) + perrin_number(n-2)"
    },
    {
        "task_id": 450,
        "prompt": "Write a python function to extract specified size of strings from a given list of string values.\n\ndef",
        "answer": "def extract_strings(list_of_strings, size):\n    return [string[0:size] for string in list_of_strings]"
    },
    {
        "task_id": 451,
        "prompt": "Write a python function to remove all whitespaces from the given string.\n\ndef",
        "answer": "def remove_whitespace(string):\n    return string.replace(\" \", \"\")"
    },
    {
        "task_id": 452,
        "prompt": "Write a python function that gives loss amount on a sale if the given amount has loss else return 0.\n\ndef",
        "answer": "def loss_amount(amount):\n    if amount < 100:\n        return 0\n    else:\n        return amount - 100"
    },
    {
        "task_id": 453,
        "prompt": "Write a python function to find the sum of even factors of a number.\n\ndef",
        "answer": "def sum_of_even_factors(n):\n    sum = 0\n    for i in range(1, n):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n    return sum"
    },
    {
        "task_id": 454,
        "prompt": "Write a python function that matches a word containing 'z'.\n\ndef",
        "answer": "def matches(word):\n    return 'z' in word"
    },
    {
        "task_id": 455,
        "prompt": "Write a python function to check whether the given month number contains 31 days or not.\n\ndef",
        "answer": "def month_check(month):\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        return 31\n    elif month in [4, 6, 9, 11]:\n        return 30\n    elif month == 2:\n        return 28\n    else:\n        return \"Invalid month\""
    },
    {
        "task_id": 456,
        "prompt": "Write a python function to reverse each string in a given list of string values.\n\ndef",
        "answer": "def reverse_string(list_of_strings):\n    for i in range(len(list_of_strings)):\n        list_of_strings[i] = list_of_strings[i][::-1]\n    return list_of_strings"
    },
    {
        "task_id": 457,
        "prompt": "Write a python function to find the sublist having minimum length.\n\ndef",
        "answer": "def min_length(lst):\n    min_len = len(lst[0])\n    for i in lst:\n        if len(i) < min_len:\n            min_len = len(i)\n    return min_len"
    },
    {
        "task_id": 458,
        "prompt": "Write a python function to find the area of a rectangle.\n\ndef",
        "answer": "def area(length, breadth):\n    return length * breadth"
    },
    {
        "task_id": 459,
        "prompt": "Write a python function to remove uppercase substrings from a given string.\n\ndef",
        "answer": "def remove_uppercase(str1):\n    return \"\".join(str1.split())"
    },
    {
        "task_id": 460,
        "prompt": "Write a python function to get the first element of each sublist.\n\ndef",
        "answer": "def first_element(lst):\n    return [i[0] for i in lst]"
    },
    {
        "task_id": 461,
        "prompt": "Write a python function to count the upper case characters in a given string.\n\ndef",
        "answer": "def count_upper_case(str):\n    count = 0\n    for c in str:\n        if c.isupper():\n            count += 1\n    return count"
    },
    {
        "task_id": 462,
        "prompt": "Write a python function to find all possible combinations of the elements of a given list.\n\ndef",
        "answer": "def combinations(lst):\n    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return [lst]\n    l = []\n    for i in range(len(lst)):\n        m = lst[i]\n        remLst = lst[:i] + lst[i+1:]\n        for p in combinations(remLst):\n            l.append([m] + p)\n    return l"
    },
    {
        "task_id": 463,
        "prompt": "Write a python function to find the maximum product subarray of the given array.\n\ndef",
        "answer": "def maxProduct(arr, n):\n    max_so_far = 1\n    min_so_far = 1\n    max_ending_here = 1\n    for i in range(0, n):\n        max_ending_here = max_ending_here * arr[i]\n        max_ending_here = max(max_ending_here, arr[i])\n        min_ending_here = min_so_far * arr[i]\n        min_ending_here = min(min_ending_here, arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        min_so_far = min(min_so_far, min_ending_here)\n    return max_so_far"
    },
    {
        "task_id": 464,
        "prompt": "Write a python function to check if all values are same in a dictionary.\n\ndef",
        "answer": "def all_values_are_same(dictionary):\n    return len(set(dictionary.values())) == 1"
    },
    {
        "task_id": 465,
        "prompt": "Write a python function to drop empty items from a given dictionary.\n\ndef",
        "answer": "def drop_empty(d):\n    return {k: v for k, v in d.items() if v}"
    },
    {
        "task_id": 468,
        "prompt": "Write a python function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\ndef",
        "answer": "def maxProduct(arr):\n    n = len(arr)\n    max_prod = 1\n    for i in range(n):\n        prod = 1\n        for j in range(i, n):\n            prod *= arr[j]\n            max_prod = max(max_prod, prod)\n    return max_prod"
    },
    {
        "task_id": 470,
        "prompt": "Write a python function to find the pairwise addition of the neighboring elements of the given tuple.\n\ndef",
        "answer": "def pairwise_add(tup):\n    return [(tup[i], tup[i+1]) for i in range(len(tup)-1)]"
    },
    {
        "task_id": 471,
        "prompt": "Write a python function to find the product of the array multiplication modulo n.\n\ndef",
        "answer": "def product_of_array_modulo_n(arr, n):\n    # Write your code here\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product"
    },
    {
        "task_id": 472,
        "prompt": "Write a python function to check whether the given list contains consecutive numbers or not.\n\ndef",
        "answer": "def is_consecutive(lst):\n    return sorted(lst) == list(range(min(lst), max(lst)+1))"
    },
    {
        "task_id": 473,
        "prompt": "Write a python function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n\ndef",
        "answer": "def intersection(lst1, lst2):\n    lst3 = [value for value in lst1 if value in lst2]\n    return lst3"
    },
    {
        "task_id": 474,
        "prompt": "Write a python function to replace characters in a string.\n\ndef",
        "answer": "def replace_chars(string, char_to_replace, replacement_char):\n    return string.replace(char_to_replace, replacement_char)"
    },
    {
        "task_id": 475,
        "prompt": "Write a python function to sort a dictionary by value.\n\ndef",
        "answer": "def sort_dict_by_value(d):\n    return sorted(d.items(), key=lambda x: x[1])"
    },
    {
        "task_id": 476,
        "prompt": "Write a python function to find the sum of the largest and smallest value in a given array.\n\ndef",
        "answer": "def sum_of_largest_and_smallest(arr):\n    return sum(sorted(arr)[0:2])"
    },
    {
        "task_id": 477,
        "prompt": "Write a python function to convert the given string to lower case.\n\ndef",
        "answer": "def lowercase(string):\n    return string.lower()"
    },
    {
        "task_id": 478,
        "prompt": "Write a python function to remove lowercase substrings from a given string.\n\ndef",
        "answer": "def remove_substring(string):\n    for i in range(len(string)):\n        if string[i].islower():\n            string = string.replace(string[i], \"\")\n    return string"
    },
    {
        "task_id": 479,
        "prompt": "Write a python function to find the first digit of a given number.\n\ndef",
        "answer": "def first_digit(n):\n    return n // 10"
    },
    {
        "task_id": 554,
        "prompt": "Write a python function which takes a list of integers and only returns the odd ones.\n\ndef",
        "answer": "def odd_numbers(numbers):\n    odd_numbers = []\n    for number in numbers:\n        if number % 2!= 0:\n            odd_numbers.append(number)\n    return odd_numbers"
    },
    {
        "task_id": 555,
        "prompt": "Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n\ndef",
        "answer": "def cube_sum(n):\n    return (n*(n+1)*(2*n+1))/6"
    },
    {
        "task_id": 556,
        "prompt": "Write a python function to count the number of pairs whose xor value is odd.\n\ndef",
        "answer": "def count_odd_pairs(arr):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] ^ arr[j] % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "task_id": 557,
        "prompt": "Write a python function to toggle the case of all characters in a string.\n\ndef",
        "answer": "def toggle_case(s):\n    return s.swapcase()"
    },
    {
        "task_id": 558,
        "prompt": "Write a python function to find the sum of the per-digit difference between two integers.\n\ndef",
        "answer": "def sum_of_digit_difference(num1, num2):\n    sum = 0\n    for i in str(num1):\n        sum += abs(int(i) - num2)\n    return sum"
    },
    {
        "task_id": 559,
        "prompt": "Write a python function to find the sum of the largest contiguous sublist in the given list.\n\ndef",
        "answer": "def largest_sublist(lst):\n    max_sum = 0\n    current_sum = 0\n    for i in range(len(lst)):\n        current_sum += lst[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "task_id": 560,
        "prompt": "Write a python function to find the union of the elements of two given tuples and output them in sorted order.\n\ndef",
        "answer": "def union(tuple1, tuple2):\n    union_list = list(set(tuple1) | set(tuple2))\n    union_list.sort()\n    return tuple(union_list)"
    },
    {
        "task_id": 562,
        "prompt": "Write a python function to find the length of the longest sublists.\n\ndef",
        "answer": "def longest_sublist(lst):\n    max_len = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if len(lst[i:j+1]) > max_len:\n                max_len = len(lst[i:j+1])\n    return max_len"
    },
    {
        "task_id": 563,
        "prompt": "Write a python function to extract values between quotation marks from a string.\n\ndef",
        "answer": "def extract_values(string):\n    return string.split('\"')[1]"
    },
    {
        "task_id": 564,
        "prompt": "Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n\ndef",
        "answer": "def count_unequal_pairs(lst):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i]!= lst[j]:\n                count += 1\n    return count"
    },
    {
        "task_id": 565,
        "prompt": "Write a python function to split a string into characters.\n\ndef",
        "answer": "def split(str):\n    return [char for char in str]"
    },
    {
        "task_id": 566,
        "prompt": "Write a python function to get the sum of the digits of a non-negative integer.\n\ndef",
        "answer": "def sum_of_digits(n):\n    if n < 10:\n        return n\n    return n % 10 + sum_of_digits(n // 10)"
    },
    {
        "task_id": 567,
        "prompt": "Write a python function to check whether a specified list is sorted or not.\n\ndef",
        "answer": "def is_sorted(lst):\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))"
    },
    {
        "task_id": 568,
        "prompt": "Write a python function to create a list of N empty dictionaries.\n\ndef",
        "answer": "def create_empty_dictionaries(n):\n    return [{} for _ in range(n)]"
    },
    {
        "task_id": 569,
        "prompt": "Write a python function to sort each sublist of strings in a given list of lists.\n\ndef",
        "answer": "def sort_list(l):\n    for i in l:\n        i.sort()\n    return l"
    },
    {
        "task_id": 572,
        "prompt": "Write a python function to remove duplicate numbers from a given number of lists.\n\ndef",
        "answer": "def remove_duplicate(lst):\n    return list(set(lst))"
    },
    {
        "task_id": 573,
        "prompt": "Write a python function to calculate the product of the unique numbers in a given list.\n\ndef",
        "answer": "def product(nums):\n    product = 1\n    for num in nums:\n        product *= num\n    return product"
    },
    {
        "task_id": 574,
        "prompt": "Write a python function to find the surface area of a cylinder.\n\ndef",
        "answer": "def surface_area_cylinder(radius, height):\n    return 2 * 3.14 * radius * (radius + height)"
    },
    {
        "task_id": 576,
        "prompt": "Write a python function to check whether a list is sublist of another or not.\n\ndef",
        "answer": "def isSublist(l1, l2):\n    if len(l1) > len(l2):\n        return False\n    for i in range(len(l2)):\n        if l2[i] == l1[0]:\n            if l1 == l2[i:i + len(l1)]:\n                return True\n    return False"
    },
    {
        "task_id": 577,
        "prompt": "Write a python function to find the last digit in factorial of a given number.\n\ndef",
        "answer": "def fact(n):\n    if n == 0:\n        return 1\n    else:\n        return n * fact(n-1)"
    },
    {
        "task_id": 578,
        "prompt": "Write a python function to interleave 3 lists of the same length into a single flat list.\n\ndef",
        "answer": "def interleave(list1, list2, list3):\n    return [i for i in zip(list1, list2, list3)]"
    },
    {
        "task_id": 579,
        "prompt": "Write a python function to find the dissimilar elements in the given two tuples.\n\ndef",
        "answer": "def dissimilar(tuple1, tuple2):\n    tuple1_set = set(tuple1)\n    tuple2_set = set(tuple2)\n    return tuple1_set.symmetric_difference(tuple2_set)"
    },
    {
        "task_id": 580,
        "prompt": "Write a python function to remove uneven elements in the nested mixed tuple.\n\ndef",
        "answer": "def remove_uneven_elements(nested_tuple):\n    return [i for i in nested_tuple if len(i) % 2 == 0]"
    },
    {
        "task_id": 581,
        "prompt": "Write a python function to find the surface area of a square pyramid with a given base edge and height.\n\ndef",
        "answer": "def surfaceArea(base, height):\n    return (base * height) * 2 + (base * base)"
    },
    {
        "task_id": 582,
        "prompt": "Write a python function to check if a dictionary is empty\n\ndef",
        "answer": "def is_empty(dictionary):\n    if len(dictionary) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "task_id": 583,
        "prompt": "Write a python function which returns nth catalan number.\n\ndef",
        "answer": "def nth_catalan_number(n):\n    if n == 0:\n        return 1\n    else:\n        return int((n * (n + 1) / 2) * (2 * n + 1) / (n + 2))"
    },
    {
        "task_id": 584,
        "prompt": "Write a python function to find the first adverb ending with ly and its positions in a given string.\n\ndef",
        "answer": "def find_ly(input_str):\n    for i in range(len(input_str)):\n        if input_str[i] == 'ly':\n            return i\n    return -1"
    },
    {
        "task_id": 585,
        "prompt": "Write a python function to find the n most expensive items in a given dataset.\n\ndef",
        "answer": "def expensive_items(n, data):\n    # your code here\n    return None"
    },
    {
        "task_id": 586,
        "prompt": "Write a python function to split a list at the nth eelment and add the first part to the end.\n\ndef",
        "answer": "def split_list(l, n):\n    return l[:n] + l[n:]"
    },
    {
        "task_id": 587,
        "prompt": "Write a python function to convert a list to a tuple.\n\ndef",
        "answer": "def convert_list_to_tuple(list):\n    return tuple(list)"
    },
    {
        "task_id": 588,
        "prompt": "Write a python function to find the difference between largest and smallest value in a given list.\n\ndef",
        "answer": "def difference(nums):\n    return max(nums) - min(nums)"
    },
    {
        "task_id": 589,
        "prompt": "Write a python function to find perfect squares between two given numbers.\n\ndef",
        "answer": "def perfect_squares(a,b):\n    for i in range(a,b+1):\n        if i**0.5 == int(i**0.5):\n            print(i)"
    },
    {
        "task_id": 590,
        "prompt": "Write a python function to convert polar coordinates to rectangular coordinates.\n\ndef",
        "answer": "def polarToRect(r, theta):\n    x = r * math.cos(theta)\n    y = r * math.sin(theta)\n    return x, y"
    },
    {
        "task_id": 591,
        "prompt": "Write a python function to interchange the first and last elements in a list.\n\ndef",
        "answer": "def interchange(list):\n    list[0], list[-1] = list[-1], list[0]\n    return list"
    },
    {
        "task_id": 592,
        "prompt": "Write a python function to find the sum of the product of consecutive binomial co-efficients.\n\ndef",
        "answer": "def sum_of_product_of_consecutive_binomial_coefficients(n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum += (n + 1 - i) * (n + 1 - i + 1) * (n + 1 - i + 2) / 6\n    return sum"
    },
    {
        "task_id": 593,
        "prompt": "Write a python function to remove leading zeroes from an ip address.\n\ndef",
        "answer": "def remove_leading_zeroes(ip):\n    return ip.lstrip(\"0\")"
    },
    {
        "task_id": 594,
        "prompt": "Write a python function to find the difference of the first even and first odd number of a given list.\n\ndef",
        "answer": "def diff_first_even_odd(l):\n    even_list = []\n    odd_list = []\n    for i in l:\n        if i % 2 == 0:\n            even_list.append(i)\n        else:\n            odd_list.append(i)\n    return even_list[0] - odd_list[0]"
    },
    {
        "task_id": 595,
        "prompt": "Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\ndef",
        "answer": "def count_swaps(s1, s2):\n    count = 0\n    for i in range(len(s1)):\n        if s1[i]!= s2[i]:\n            count += 1\n    return count"
    },
    {
        "task_id": 596,
        "prompt": "Write a python function to find the size in bytes of the given tuple.\n\ndef",
        "answer": "def size_of_tuple(tuple):\n    return(tuple.__sizeof__())"
    },
    {
        "task_id": 597,
        "prompt": "Write a python function to find kth element from the given two sorted arrays.\n\ndef",
        "answer": "def find_kth_element(arr1, arr2, k):\n    if len(arr1) == 0:\n        return arr2[k - 1]\n    if len(arr2) == 0:\n        return arr1[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])"
    },
    {
        "task_id": 598,
        "prompt": "Write a python function to check whether the given number is armstrong or not.\n\ndef",
        "answer": "def armstrong(n):\n    sum = 0\n    temp = n\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    if n == sum:\n        print(n, \"is an Armstrong number\")\n    else:\n        print(n, \"is not an Armstrong number\")"
    },
    {
        "task_id": 599,
        "prompt": "Write a python function to find sum and average of first n natural numbers.\n\ndef",
        "answer": "def sum_avg(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    avg = sum/n\n    return sum, avg"
    },
    {
        "task_id": 600,
        "prompt": "Write a python function to check whether the given number is even or not.\n\ndef",
        "answer": "def is_even(n):\n    if n%2==0:\n        return True\n    else:\n        return False"
    },
    {
        "task_id": 602,
        "prompt": "Write a python function to find the first repeated character in a given string.\n\ndef",
        "answer": "def first_repeated_char(s):\n    for i in range(len(s)):\n        if s.count(s[i]) > 1:\n            return s[i]\n    return 'No Repeated Character'"
    },
    {
        "task_id": 603,
        "prompt": "Write a python function to get all lucid numbers smaller than or equal to a given integer.\n\ndef",
        "answer": "def get_lucid_numbers(n):\n    lucid_numbers = []\n    for i in range(1, n):\n        if is_lucid_number(i):\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "task_id": 604,
        "prompt": "Write a python function to reverse words seperated by spaces in a given string.\n\ndef",
        "answer": "def reverse_words(str):\n    return \" \".join(reversed(str.split()))"
    },
    {
        "task_id": 605,
        "prompt": "Write a python function to check if the given integer is a prime number.\n\ndef",
        "answer": "def is_prime(n):\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
        "task_id": 606,
        "prompt": "Write a python function to convert degrees to radians.\n\ndef",
        "answer": "def deg_to_rad(deg):\n    return deg * (math.pi / 180)"
    },
    {
        "task_id": 607,
        "prompt": "Write a python function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n\ndef",
        "answer": "def regex_search(string, pattern):\n    import re\n    match = re.search(pattern, string)\n    if match:\n        return match.group()"
    },
    {
        "task_id": 608,
        "prompt": "Write a python function to find nth bell number.\n\ndef",
        "answer": "def nth_bell_number(n):\n    bell = [1]\n    for i in range(1, n):\n        bell.append(bell[i-1] + bell[i])\n    return bell[n-1]"
    },
    {
        "task_id": 610,
        "prompt": "Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n\ndef",
        "answer": "def remove_kth_element(lst, k):\n    return lst[:k] + lst[k+1:]"
    },
    {
        "task_id": 611,
        "prompt": "Write a python function which given a matrix represented as a list of lists returns the max of then'th column.\n\ndef",
        "answer": "def max_column(matrix, n):\n    return max([row[n] for row in matrix])"
    },
    {
        "task_id": 612,
        "prompt": "Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n\ndef",
        "answer": "def list_of_lists(l):\n    return [[i[0] for i in l], [i[1] for i in l]]"
    },
    {
        "task_id": 614,
        "prompt": "Write a python function to find the cumulative sum of all the values that are present in the given tuple list.\n\ndef",
        "answer": "def cumulative_sum(tuple_list):\n    sum = 0\n    for i in range(len(tuple_list)):\n        sum += tuple_list[i]\n    return sum"
    },
    {
        "task_id": 615,
        "prompt": "Write a python function which takes a tuple of tuples and returns the average value for each tuple as a list.\n\ndef",
        "answer": "def average_tuple(tuple_of_tuples):\n    return [sum(tuple_of_tuples[i])/len(tuple_of_tuples[i]) for i in range(len(tuple_of_tuples))]"
    },
    {
        "task_id": 616,
        "prompt": "Write a python function which takes two tuples of the same length and performs the element wise modulo.\n\ndef",
        "answer": "def modulo(a,b):\n    return tuple(map(lambda x,y: x%y, a,b))"
    },
    {
        "task_id": 617,
        "prompt": "Write a python function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n\ndef",
        "answer": "def check_jumps(d):\n    if d == 0:\n        return 0\n    if d == 1:\n        return 1\n    if d == 2:\n        return 2\n    return check_jumps(d-1) + check_jumps(d-2)"
    },
    {
        "task_id": 618,
        "prompt": "Write a python function to divide two lists element wise.\n\ndef",
        "answer": "def divide_list(list1, list2):\n    return [i / j for i, j in zip(list1, list2)]"
    },
    {
        "task_id": 619,
        "prompt": "Write a python function to move all the numbers to the end of the given string.\n\ndef",
        "answer": "def move_to_end(s):\n    return ''.join(sorted(s, key=s.count, reverse=True))"
    },
    {
        "task_id": 620,
        "prompt": "Write a python function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n\ndef",
        "answer": "def divisible_subset(numbers):\n    numbers.sort()\n    dp = [[0 for _ in range(len(numbers))] for _ in range(len(numbers))]\n    for i in range(len(numbers)):\n        dp[i][i] = 1\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] % numbers[j] == 0 or numbers[j] % numbers[i] == 0:\n                dp[i][j] = 1\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            for k in range(j+1, len(numbers)):\n                if dp[i][j] == 1 or dp[j][k] == 1 or dp[i][k] == 1:\n                    dp[i][k] = 1\n    return dp[0][len(numbers)-1]"
    },
    {
        "task_id": 622,
        "prompt": "Write a python function to find the median of two sorted lists of same size.\n\ndef",
        "answer": "def median(a,b):\n    if len(a) == len(b):\n        return (a[len(a)//2] + b[len(b)//2])/2\n    elif len(a) > len(b):\n        return a[len(a)//2]\n    else:\n        return b[len(b)//2]"
    },
    {
        "task_id": 623,
        "prompt": "Write a python function to compute the n-th power of each number in a list.\n\ndef",
        "answer": "def power(n):\n    return n**2"
    },
    {
        "task_id": 624,
        "prompt": "Write a python function to convert a given string to uppercase.\n\ndef",
        "answer": "def to_uppercase(str1):\n    return str1.upper()"
    },
    {
        "task_id": 625,
        "prompt": "Write a python function to interchange the first and last element in a given list.\n\ndef",
        "answer": "def interchange(l):\n    l[0], l[-1] = l[-1], l[0]\n    return l"
    },
    {
        "task_id": 626,
        "prompt": "Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n\ndef",
        "answer": "def area(r):\n    return 3.14*r*r"
    },
    {
        "task_id": 627,
        "prompt": "Write a python function to find the smallest missing number from a sorted list of natural numbers.\n\ndef",
        "answer": "def find_smallest_missing_number(numbers):\n    i = 0\n    while i < len(numbers):\n        j = numbers[i] - 1\n        if numbers[i]!= numbers[j]:\n            numbers[i], numbers[j] = numbers[j], numbers[i]\n        else:\n            i += 1"
    },
    {
        "task_id": 628,
        "prompt": "Write a python function to replace all spaces in the given string with '%20'.\n\ndef",
        "answer": "def urlify(s):\n    return s.replace(' ', '%20')"
    },
    {
        "task_id": 629,
        "prompt": "Write a python function to find even numbers from a list of numbers.\n\ndef",
        "answer": "def find_even_numbers(numbers):\n    even_numbers = []\n    for number in numbers:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers"
    },
    {
        "task_id": 630,
        "prompt": "Write a python function to extract all the adjacent coordinates of the given coordinate tuple.\n\ndef",
        "answer": "def adjacent_coordinates(coord):\n    x, y = coord\n    return [(x+1, y), (x-1, y), (x, y+1), (x, y-1)]"
    },
    {
        "task_id": 631,
        "prompt": "Write a python function to replace whitespaces with an underscore and vice versa in a given string.\n\ndef",
        "answer": "def replace_string(string):\n    return string.replace(\" \", \"_\").replace(\"_\", \" \")"
    },
    {
        "task_id": 632,
        "prompt": "Write a python function to move all zeroes to the end of the given list.\n\ndef",
        "answer": "def move_zeroes(nums):\n    # Your code here\n    # nums = [0,1,0,3,12]\n    # nums = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
    },
    {
        "task_id": 633,
        "prompt": "Write a python function to find the sum of xor of all pairs of numbers in the given list.\n\ndef",
        "answer": "def xor_sum(lst):\n    sum = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            sum += lst[i] ^ lst[j]\n    return sum"
    },
    {
        "task_id": 635,
        "prompt": "Write a python function to sort the given list.\n\ndef",
        "answer": "def sort_list(lst):\n    lst.sort()\n    return lst"
    },
    {
        "task_id": 637,
        "prompt": "Write a python function to check whether the given amount has no profit and no loss\n\ndef",
        "answer": "def check_profit_loss(amount):\n    if amount < 0:\n        print(\"Loss\")\n    elif amount > 0:\n        print(\"Profit\")\n    else:\n        print(\"Neither\")"
    },
    {
        "task_id": 638,
        "prompt": "Write a python function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\ndef",
        "answer": "def wind_chill(t, v):\n    return round(35.74 + 0.6215 * t - 35.75 * (v ** 0.16) + 0.4275 * t * (v ** 0.16))"
    },
    {
        "task_id": 639,
        "prompt": "Write a python function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n\ndef",
        "answer": "def remove_lowercase(names):\n    return [name for name in names if name[0].isupper()]"
    },
    {
        "task_id": 640,
        "prompt": "Write a python function to remove the parenthesis and what is inbetween them from a string.\n\ndef",
        "answer": "def remove_parenthesis(string):\n    return string.replace('(', '').replace(')', '')"
    },
    {
        "task_id": 641,
        "prompt": "Write a python function to find the nth nonagonal number.\n\ndef",
        "answer": "def nth_nonagonal(n):\n    return n*(n+1)//2"
    },
    {
        "task_id": 643,
        "prompt": "Write a python function that checks if a strings contains 'z', except at the start and end of the word.\n\ndef",
        "answer": "def z_check(string):\n    if string[0] == 'z':\n        return False\n    if string[-1] == 'z':\n        return False\n    if 'z' in string:\n        return True\n    else:\n        return False"
    },
    {
        "task_id": 644,
        "prompt": "Write a python function to reverse an array upto a given position.\n\ndef",
        "answer": "def reverse_array(array, n):\n    if n == 0:\n        return array\n    else:\n        return reverse_array(array[:n], n-1) + array[n:]"
    },
    {
        "task_id": 720,
        "prompt": "Write a python function to add a dictionary to the tuple. The output should be a tuple.\n\ndef",
        "answer": "def add_dict(tup, dict):\n    return tup + (dict,)"
    },
    {
        "task_id": 721,
        "prompt": "Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\ndef",
        "answer": "def max_average_path(matrix):\n    # Write your code here\n    n = len(matrix)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    dp[0][0] = matrix[0][0]\n    for i in range(1, n):\n        dp[0][i] = dp[0][i - 1] + matrix[0][i]\n        dp[i][0] = dp[i - 1][0] + matrix[i][0]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + matrix[i][j]\n    return dp[n - 1][n - 1] / (n * n)"
    },
    {
        "task_id": 722,
        "prompt": "The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n\ndef",
        "answer": "def filter_students(students, min_height, min_weight):\n    return [student for student in students if student[\"height\"] > min_height and student[\"weight\"] > min_weight]"
    },
    {
        "task_id": 723,
        "prompt": "The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n\ndef",
        "answer": "def same_values(lst1, lst2):\n  count = 0\n  for i in range(len(lst1)):\n    if lst1[i] == lst2[i]:\n      count += 1\n  return count"
    },
    {
        "task_id": 724,
        "prompt": "Write a python function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n\ndef",
        "answer": "def sum_of_digits(base, power):\n    return sum([int(i) for i in str(base ** power)])"
    },
    {
        "task_id": 725,
        "prompt": "Write a python function to extract values between quotation marks \" \" of the given string.\n\ndef",
        "answer": "def extract_values(string):\n    return string.split('\"')[1]"
    },
    {
        "task_id": 726,
        "prompt": "Write a python function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n\ndef",
        "answer": "def mult_tuple(t):\n    return tuple(i * j for i, j in zip(t, t[1:]))"
    },
    {
        "task_id": 728,
        "prompt": "Write a python function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n\ndef",
        "answer": "def add_lists(list1, list2):\n    return [x + y for x, y in zip(list1, list2)]"
    },
    {
        "task_id": 730,
        "prompt": "Write a python function to remove consecutive duplicates of a given list.\n\ndef",
        "answer": "def remove_consecutive_duplicates(l):\n    return [i for n, i in enumerate(l) if i not in l[:n]]"
    },
    {
        "task_id": 731,
        "prompt": "Write a python function to find the lateral surface area of a cone given radius r and the height h.\n\ndef",
        "answer": "def cone_surface_area(r, h):\n    return 3.14 * r * r + 3.14 * r * h"
    },
    {
        "task_id": 732,
        "prompt": "Write a python function to replace all occurrences of spaces, commas, or dots with a colon.\n\ndef",
        "answer": "def replace_all(string, char, index):\n    return string[:index] + char + string[index + 1:]"
    },
    {
        "task_id": 733,
        "prompt": "Write a python function to find the index of the first occurrence of a given number in a sorted array.\n\ndef",
        "answer": "def first_index(arr, num):\n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] == num:\n            if mid == 0 or arr[mid - 1]!= num:\n                return mid\n            else:\n                end = mid - 1\n        elif arr[mid] > num:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return -1"
    },
    {
        "task_id": 734,
        "prompt": "Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\ndef",
        "answer": "def sum_of_products(arr):\n    n = len(arr)\n    prefix_sum = [0] * n\n    prefix_sum[0] = arr[0]\n    for i in range(1, n):\n        prefix_sum[i] = prefix_sum[i - 1] + arr[i]"
    },
    {
        "task_id": 735,
        "prompt": "Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\ndef",
        "answer": "def toggleBits(n):\n    n ^= (1 << (len(bin(n)) - 2)) - 1\n    return n"
    },
    {
        "task_id": 736,
        "prompt": "Write a python function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\ndef",
        "answer": "def binary_search(arr, x):\n    low = 0\n    high = len(arr) - 1\n    mid = 0"
    },
    {
        "task_id": 737,
        "prompt": "Write a python function to check whether the given string is starting with a vowel or not using regex.\n\ndef",
        "answer": "def is_starting_with_vowel(string):\n    return bool(re.match(r'^[aeiouAEIOU]', string))"
    },
    {
        "task_id": 738,
        "prompt": "Write a python function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n\ndef",
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n - 1)"
    },
    {
        "task_id": 739,
        "prompt": "Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n\ndef",
        "answer": "def smallest_triangular_number(n):\n    return n * (n + 1) // 2"
    },
    {
        "task_id": 740,
        "prompt": "Write a python function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n\ndef",
        "answer": "def convert_tuple_to_dict(tup):\n    return dict(zip(tup, tup[1:]))"
    },
    {
        "task_id": 741,
        "prompt": "Write a python function to check whether all the characters are same or not.\n\ndef",
        "answer": "def check(s):\n    return len(set(s)) == 1"
    },
    {
        "task_id": 742,
        "prompt": "Write a python function to caluclate the area of a tetrahedron.\n\ndef",
        "answer": "def area_of_tetrahedron(a,b,c,d):\n    s = (a+b+c+d)/2\n    return (s*(s-a)*(s-b)*(s-c)*(s-d))**0.5"
    },
    {
        "task_id": 743,
        "prompt": "Write a python function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n\ndef",
        "answer": "def rotate_list(l, n):\n    return l[n:] + l[:n]"
    },
    {
        "task_id": 744,
        "prompt": "Write a python function to check if the given tuple has any none value or not.\n\ndef",
        "answer": "def check_tuple(tup):\n    for i in tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "task_id": 745,
        "prompt": "Write a python function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n\ndef",
        "answer": "def divisible(startnum, endnum):\n    for i in range(startnum, endnum):\n        if i % 2 == 0:\n            if i % 3 == 0:\n                if i % 4 == 0:\n                    if i % 5 == 0:\n                        if i % 6 == 0:\n                            if i % 7 == 0:\n                                if i % 8 == 0:\n                                    if i % 9 == 0:\n                                        if i % 10 == 0:\n                                            print(i)"
    },
    {
        "task_id": 746,
        "prompt": "Write a python function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n\ndef",
        "answer": "def area_of_sector(radius,angle):\n    if angle>360:\n        return None\n    else:\n        return (radius**2)*(angle/360)"
    },
    {
        "task_id": 747,
        "prompt": "Write a python function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\ndef",
        "answer": "def lcs(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    l = len(Z)\n    L = [[[None]*(l+1) for i in range(n+1)] for j in range(m+1)]\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(l+1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n    return L[m][n][l]"
    },
    {
        "task_id": 748,
        "prompt": "Write a python function to put spaces between words starting with capital letters in a given string.\n\ndef",
        "answer": "def capitalize(string):\n    return''.join(word.capitalize() for word in string.split())"
    },
    {
        "task_id": 749,
        "prompt": "Write a python function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n\ndef",
        "answer": "def sort_numbers(list_of_numbers):\n    return sorted(list_of_numbers, key=lambda x: int(x))"
    },
    {
        "task_id": 750,
        "prompt": "Write a python function to add the given tuple to the given list.\n\ndef",
        "answer": "def add_tuple(lst, tup):\n    lst.append(tup)\n    return lst"
    },
    {
        "task_id": 751,
        "prompt": "Write a python function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n\ndef",
        "answer": "def isHeap(arr, n):\n    for i in range(n):\n        if arr[i] > arr[int((i - 1) / 2)]:\n            return False\n    return True"
    },
    {
        "task_id": 752,
        "prompt": "Write a python function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n\ndef",
        "answer": "def jacobsthal(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal(n-1) + jacobsthal(n-2)"
    },
    {
        "task_id": 753,
        "prompt": "Write a python function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n\ndef",
        "answer": "def find_min_k_records(records, k):\n    records.sort(key=lambda x: x[1])\n    return records[:k]"
    },
    {
        "task_id": 754,
        "prompt": "We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n\ndef",
        "answer": "def common_elements(l1, l2, l3):\n    return list(set(l1) & set(l2) & set(l3))"
    },
    {
        "task_id": 755,
        "prompt": "Write a python function to find the second smallest number in a list.\n\ndef",
        "answer": "def second_smallest(numbers):\n    numbers.sort()\n    return numbers[1]"
    },
    {
        "task_id": 756,
        "prompt": "Write a python function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n\ndef",
        "answer": "def match(string):\n    pattern = re.compile(r'a.+b')\n    if pattern.search(string):\n        return \"Match Found\"\n    else:\n        return \"Match Not Found\""
    },
    {
        "task_id": 757,
        "prompt": "Write a python function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n\ndef",
        "answer": "def count_reverse_pairs(str_list):\n    count = 0\n    for i in range(len(str_list)):\n        for j in range(i+1, len(str_list)):\n            if str_list[i][::-1] == str_list[j]:\n                count += 1\n    return count"
    },
    {
        "task_id": 758,
        "prompt": "Write a python function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n\ndef",
        "answer": "def count_list_items(list):\n    count_dict = {}\n    for item in list:\n        if type(item) == list:\n            item = tuple(item)\n        if item in count_dict:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n    return count_dict"
    },
    {
        "task_id": 759,
        "prompt": "Write a python function to check whether a given string is a decimal number with a precision of 2.\n\ndef",
        "answer": "def is_float(string):\n    if string.count('.') == 1:\n        left, right = string.split('.')\n        return len(left) <= 2 and len(right) <= 2 and left.isdigit() and right.isdigit()\n    return False"
    },
    {
        "task_id": 760,
        "prompt": "Write a python function to check whether a list of numbers contains only one distinct element or not.\n\ndef",
        "answer": "def check_distinct(nums):\n    return len(set(nums)) == len(nums)"
    },
    {
        "task_id": 762,
        "prompt": "Write a python function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n\ndef",
        "answer": "def is_leap(year):\n    if year % 4 == 0:\n        if year % 100 == 0:\n            if year % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False"
    },
    {
        "task_id": 763,
        "prompt": "Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n\ndef",
        "answer": "def minDiff(arr, n):\n    arr.sort()\n    min_diff = arr[1] - arr[0]\n    for i in range(n - 1):\n        if (arr[i + 1] - arr[i]) < min_diff:\n            min_diff = arr[i + 1] - arr[i]\n    return min_diff"
    },
    {
        "task_id": 764,
        "prompt": "Write a python function to count number of digits in a given string.\n\ndef",
        "answer": "def count_digits(string):\n    count = 0\n    for i in string:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "task_id": 765,
        "prompt": "Write a python function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n\ndef",
        "answer": "def nth_polite_number(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        "
    },
    {
        "task_id": 766,
        "prompt": "Write a python function to return a list of all pairs of consecutive items in a given list.\n\ndef",
        "answer": "def consecutive_pairs(lst):\n    return [(lst[i], lst[i+1]) for i in range(len(lst)-1)]"
    },
    {
        "task_id": 767,
        "prompt": "Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n\ndef",
        "answer": "def countPairs(lst, sum):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == sum:\n                count += 1\n    return count"
    },
    {
        "task_id": 769,
        "prompt": "Write a python function to get the difference between two lists.\n\ndef",
        "answer": "def difference(list1, list2):\n    return list(set(list1) - set(list2))"
    },
    {
        "task_id": 770,
        "prompt": "Write a python function to find the sum of fourth power of first n odd natural numbers.\n\ndef",
        "answer": "def sum_of_fourth_power(n):\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            sum += i**4\n    return sum"
    },
    {
        "task_id": 771,
        "prompt": "Write a python function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\ndef",
        "answer": "def is_balanced(exp):\n    stack = []\n    for char in exp:\n        if char in [\"(\", \"{\", \"[\"]:\n            stack.append(char)\n        else:\n            if not stack:\n                return False\n            current_char = stack.pop()\n            if current_char == '(':\n                if char!= \")\":\n                    return False\n            if current_char == '{':\n                if char!= \"}\":\n                    return False\n            if current_char == '[':\n                if char!= \"]\":\n                    return False\n    if stack:\n        return False\n    return True"
    },
    {
        "task_id": 772,
        "prompt": "Write a python function to remove all the words with k length in the given string.\n\ndef",
        "answer": "def remove_k_length_words(string, k):\n    words = string.split()\n    result = []\n    for word in words:\n        if len(word)!= k:\n            result.append(word)\n    return \" \".join(result)"
    },
    {
        "task_id": 773,
        "prompt": "Write a python function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n\ndef",
        "answer": "def find_substring(string, substring):\n    if substring in string:\n        return string.find(substring)\n    else:\n        return None"
    },
    {
        "task_id": 775,
        "prompt": "Write a python function to check whether every odd index contains odd numbers of a given list.\n\ndef",
        "answer": "def odd_index_odd_number(lst):\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "task_id": 776,
        "prompt": "Write a python function to count those characters which have vowels as their neighbors in the given string.\n\ndef",
        "answer": "def count_neighbors(string):\n    count = 0\n    for i in range(len(string)):\n        if string[i] in 'aeiou':\n            if i!= len(string)-1 and string[i+1] in 'aeiou':\n                count += 1\n            if i!= 0 and string[i-1] in 'aeiou':\n                count += 1\n    return count"
    },
    {
        "task_id": 777,
        "prompt": "Write a python function to find the sum of non-repeated elements in a given list.\n\ndef",
        "answer": "def sum_non_repeated(lst):\n    sum = 0\n    for i in lst:\n        if lst.count(i) == 1:\n            sum += i\n    return sum"
    },
    {
        "task_id": 778,
        "prompt": "Write a python function to pack consecutive duplicates of a given list elements into sublists.\n\ndef",
        "answer": "def pack(lst):\n    result = []\n    for i in range(len(lst)):\n        if i == 0:\n            result.append([lst[i]])\n        elif lst[i] == lst[i-1]:\n            result[-1].append(lst[i])\n        else:\n            result.append([lst[i]])\n    return result"
    },
    {
        "task_id": 779,
        "prompt": "Write a python function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n\ndef",
        "answer": "def count_lists(lists):\n    return {tuple(list): lists.count(list) for list in lists}"
    },
    {
        "task_id": 780,
        "prompt": "Write a python function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n\ndef",
        "answer": "def sum_of_tuples(tuple_list, n):\n    result = []\n    for i in range(len(tuple_list)):\n        for j in range(i+1, len(tuple_list)):\n            if sum(tuple_list[i]) + sum(tuple_list[j]) == n:\n                result.append(tuple_list[i])\n                result.append(tuple_list[j])\n    return result"
    },
    {
        "task_id": 781,
        "prompt": "Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n\ndef",
        "answer": "def divisors(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "task_id": 782,
        "prompt": "Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\ndef",
        "answer": "def sum_of_odd_length_subarrays(arr):\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if (j - i + 1) % 2!= 0:\n                sum += sum(arr[i:j + 1])\n    return sum"
    },
    {
        "task_id": 783,
        "prompt": "Write a python function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n\ndef",
        "answer": "def rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v"
    },
    {
        "task_id": 784,
        "prompt": "Write a python function to find the product of first even and odd number of a given list.\n\ndef",
        "answer": "def product(nums):\n    even_product = 1\n    odd_product = 1\n    for num in nums:\n        if num % 2 == 0:\n            even_product *= num\n        else:\n            odd_product *= num\n    return even_product * odd_product"
    },
    {
        "task_id": 785,
        "prompt": "Write a python function to convert tuple string to integer tuple.\n\ndef",
        "answer": "def tuple_string_to_int(tuple_string):\n    return tuple(map(int, tuple_string.split(',')))"
    },
    {
        "task_id": 786,
        "prompt": "Write a python function to locate the right insertion point for a specified value in sorted order.\n\ndef",
        "answer": "def binary_search(arr, val):\n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] == val:\n            return mid\n        elif arr[mid] < val:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return start"
    },
    {
        "task_id": 787,
        "prompt": "Write a python function that matches a string that has an a followed by three 'b'.\n\ndef",
        "answer": "def string(str):\n  return str[0] == 'a' and str[1] == 'b' and str[2] == 'b'"
    },
    {
        "task_id": 788,
        "prompt": "Write a python function to create a new tuple from the given string and list.\n\ndef",
        "answer": "def create_tuple(string, list):\n    return tuple(string + list)"
    },
    {
        "task_id": 790,
        "prompt": "Write a python function to check whether every even index contains even numbers of a given list.\n\ndef",
        "answer": "def check_even_index(lst):\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "task_id": 791,
        "prompt": "Write a python function to remove tuples from the given tuple.\n\ndef",
        "answer": "def remove_tuple(tup):\n    return tup[1:]"
    },
    {
        "task_id": 792,
        "prompt": "Write a python function to count the number of lists in a given number of lists.\n\ndef",
        "answer": "def count_list(lst):\n    count = 0\n    for i in lst:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "task_id": 793,
        "prompt": "Write a python function to find the last position of an element in a sorted array.\n\ndef",
        "answer": "def last_index(lst, key):\n    start = 0\n    end = len(lst) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if key > lst[mid]:\n            start = mid + 1\n        elif key < lst[mid]:\n            end = mid - 1\n        else:\n            if mid == len(lst) - 1 or key < lst[mid + 1]:\n                return mid\n            else:\n                start = mid + 1\n    return -1"
    },
    {
        "task_id": 794,
        "prompt": "Write a python function that matches a string that has an 'a' followed by anything, ending in 'b'.\n\ndef",
        "answer": "def match_ab(text):\n  if text.endswith('b'):\n    return True\n  else:\n    return False"
    },
    {
        "task_id": 796,
        "prompt": "Write function to find the sum of all items in the given dictionary.\n\ndef",
        "answer": "def sum_dict(d):\n    sum = 0\n    for i in d:\n        sum += d[i]\n    return sum"
    },
    {
        "task_id": 797,
        "prompt": "Write a python function to find the sum of all odd natural numbers within the range l and r.\n\ndef",
        "answer": "def sum_odd_numbers(l, r):\n    sum = 0\n    for i in range(l, r + 1):\n        if i % 2!= 0:\n            sum += i\n    return sum"
    },
    {
        "task_id": 798,
        "prompt": "Write a python function to find the sum of an array.\n\ndef",
        "answer": "def sum_array(arr):\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum"
    },
    {
        "task_id": 799,
        "prompt": "Write a python function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n\ndef",
        "answer": "def rotate_left(n, d):\n    return ((n << d) | (n >> (32 - d))) & 0xffffffff"
    },
    {
        "task_id": 800,
        "prompt": "Write a python function to remove all whitespaces from a string.\n\ndef",
        "answer": "def remove_whitespace(string):\n    return string.replace(\" \", \"\")"
    },
    {
        "task_id": 801,
        "prompt": "Write a python function to count the number of equal numbers from three given integers.\n\ndef",
        "answer": "def count_equal_numbers(a, b, c):\n    count = 0\n    if a == b:\n        count += 1\n    if a == c:\n        count += 1\n    if b == c:\n        count += 1\n    return count"
    },
    {
        "task_id": 802,
        "prompt": "Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\ndef",
        "answer": "def count_rotations(arr):\n    start, end = 0, len(arr) - 1\n    while start < end:\n        mid = start + (end - start) // 2\n        if arr[mid] > arr[mid + 1]:\n            return mid + 1\n        if arr[mid] < arr[mid - 1]:\n            return mid\n        if arr[start] < arr[mid]:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return 0"
    },
    {
        "task_id": 803,
        "prompt": "Write a python function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n\ndef",
        "answer": "def isPerfectSquare(x):\n    s = int(math.sqrt(x))\n    return s*s == x"
    },
    {
        "task_id": 804,
        "prompt": "Write a python function to check whether the product of numbers in a list is even or not.\n\ndef",
        "answer": "def is_even(numbers):\n    even = []\n    for i in numbers:\n        if i % 2 == 0:\n            even.append(i)\n    if len(even) == 0:\n        return False\n    else:\n        return True"
    },
    {
        "task_id": 805,
        "prompt": "Write a python function that returns the list in a list of lists whose sum of elements is the highest.\n\ndef",
        "answer": "def highest_sum_list(list_of_lists):\n    highest_sum = 0\n    highest_list = []\n    for list in list_of_lists:\n        sum = 0\n        for element in list:\n            sum += element\n        if sum > highest_sum:\n            highest_sum = sum\n            highest_list = list\n    return highest_list"
    },
    {
        "task_id": 806,
        "prompt": "Write a python function to find maximum run of uppercase characters in the given string.\n\ndef",
        "answer": "def max_run(s):\n    count = 0\n    max_count = 0\n    for i in s:\n        if i.isupper():\n            count += 1\n        else:\n            count = 0\n        if count > max_count:\n            max_count = count\n    return max_count"
    },
    {
        "task_id": 807,
        "prompt": "Write a python function to find the first odd number in a given list of numbers.\n\ndef",
        "answer": "def first_odd_number(numbers):\n    for number in numbers:\n        if number % 2!= 0:\n            return number\n    return None"
    },
    {
        "task_id": 808,
        "prompt": "Write a python function to check if the given tuples contain the k or not.\n\ndef",
        "answer": "def check_tuple(tup, k):\n    for i in tup:\n        if k in i:\n            return True\n    return False"
    },
    {
        "task_id": 809,
        "prompt": "Write a python function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n\ndef",
        "answer": "def smaller(tuple1, tuple2):\n    for i in range(len(tuple1)):\n        if tuple1[i] > tuple2[i]:\n            return False\n    return True"
    }
]