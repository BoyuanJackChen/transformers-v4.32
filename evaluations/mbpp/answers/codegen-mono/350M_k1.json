[
    {
        "task_id": 2,
        "prompt": "Write a python function to find the shared elements from the given two lists.\n\ndef",
        "answer": "def find_shared_elements(list1, list2):\n    shared_elements = []\n    for element in list1:\n        if element in list2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "task_id": 3,
        "prompt": "Write a python function to identify non-prime numbers.\n\ndef",
        "answer": "def non_prime(num):\n    for i in range(2,num):\n        if num%i==0:\n            return False\n    return True"
    },
    {
        "task_id": 4,
        "prompt": "Write a python function to find the n largest integers from a given list of numbers, returned in descending order.\n\ndef",
        "answer": "def n_largest(n, lst):\n    lst.sort(reverse=True)\n    return lst[:n]"
    },
    {
        "task_id": 6,
        "prompt": "Write a python function to check whether the two numbers differ at one bit position only or not.\n\ndef",
        "answer": "def diff(a, b):\n    if a == b:\n        return 0\n    elif a > b:\n        return 1\n    else:\n        return -1"
    },
    {
        "task_id": 7,
        "prompt": "Write a python function to find all words which are at least 4 characters long in a string.\n\ndef",
        "answer": "def find_words(string):\n    words = []\n    for word in string.split():\n        if len(word) >= 4:\n            words.append(word)\n    return words"
    },
    {
        "task_id": 8,
        "prompt": "Write a python function to find squares of individual elements in a list.\n\ndef",
        "answer": "def squares(lst):\n    for i in range(len(lst)):\n        lst[i] = lst[i]**2\n    return lst"
    },
    {
        "task_id": 9,
        "prompt": "Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n\ndef",
        "answer": "def minimumRotations(s):\n    # Write your code here.\n    count = 0\n    for i in range(len(s)):\n        if s[i] == s[i-1]:\n            count += 1\n    return count"
    },
    {
        "task_id": 11,
        "prompt": "Write a python function to remove first and last occurrence of a given character from the string.\n\ndef",
        "answer": "def remove_first_and_last(string, char):\n    # Write your code here.\n    if char in string:\n        string = string.replace(char, \"\")\n    return string"
    },
    {
        "task_id": 12,
        "prompt": "Write a python function to sort a given matrix in ascending order according to the sum of its rows.\n\ndef",
        "answer": "def matrix_sum(matrix):\n    sum = 0\n    for i in range(len(matrix)):\n        sum += matrix[i][0]\n    return sum"
    },
    {
        "task_id": 14,
        "prompt": "Write a python function to find the volume of a triangular prism.\n\ndef",
        "answer": "def volume(r,h):\n    return (4/3)*np.pi*r**3"
    },
    {
        "task_id": 16,
        "prompt": "Write a python function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\ndef",
        "answer": "def contains_sequences(string):\n    # Write your code here\n    if string.find('_')!= -1:\n        return False\n    else:\n        return True"
    },
    {
        "task_id": 17,
        "prompt": "Write a python function that returns the perimeter of a square given its side length as input.\n\ndef",
        "answer": "def perimeter(side):\n    return side * 4"
    },
    {
        "task_id": 18,
        "prompt": "Write a python function to remove characters from the first string which are present in the second string.\n\ndef",
        "answer": "def remove_char(s1, s2):\n    # Write your code here\n    s1 = s1.lower()\n    s2 = s2.lower()\n    s1 = s1.replace(' ', '')\n    s2 = s2.replace(' ', '')\n    s1 = s1.replace('-', '')\n    s2 = s2.replace('-', '')\n    s1 = s1.replace('.', '')\n    s2 = s2.replace('.', '')\n    s1 = s1.replace('!', '')\n    s2 = s2.replace('!', '')\n    s1 = s1.replace('?', '')\n    s2 = s2.replace('?', '')\n    s1 = s1.replace(' ', '')\n    s2 = s2.replace(' ', '')\n    s1 = s1.replace('.', '')\n    s2 = s2.replace('.', '')\n    s1 = s1.replace('!', '')\n    s2 = s2"
    },
    {
        "task_id": 19,
        "prompt": "Write a python function to find whether a given array of integers contains any duplicate element.\n\ndef",
        "answer": "def duplicate_element(arr):\n    # Write your code here.\n    duplicate = []\n    for i in range(len(arr)):\n        if arr[i] in duplicate:\n            return True\n        else:\n            duplicate.append(arr[i])\n    return False"
    },
    {
        "task_id": 20,
        "prompt": "Write a python function to check if the given number is woodball or not.\n\ndef",
        "answer": "def woodball(num):\n    if num == 1:\n        return \"Woodball\"\n    elif num == 2:\n        return \"Woodball\"\n    elif num == 3:\n        return \"Woodball\"\n    elif num == 4:\n        return \"Woodball\"\n    elif num == 5:\n        return \"Woodball\"\n    elif num == 6:\n        return \"Woodball\"\n    elif num == 7:\n        return \"Woodball\"\n    elif num == 8:\n        return \"Woodball\"\n    elif num == 9:\n        return \"Woodball\"\n    elif num == 10:\n        return \"Woodball\"\n    elif num == 11:\n        return \"Woodball\"\n    elif num == 12:\n        return \"Woodball\"\n    elif num == 13:\n        return \"Woodball\"\n    elif num == 14:\n        return \"Woodball\"\n    elif num == 15:\n        return \"Woodball\"\n    elif num == 16:\n        return \"Woodball\"\n    elif num =="
    },
    {
        "task_id": 56,
        "prompt": "Write a python function to check if a given number is one less than twice its reverse.\n\ndef",
        "answer": "def one_less_twice(num):\n    if num == 1:\n        return False\n    if num == 2:\n        return True\n    if num == 3:\n        return False\n    if num == 4:\n        return True\n    if num == 5:\n        return False\n    if num == 6:\n        return True\n    if num == 7:\n        return False\n    if num == 8:\n        return True\n    if num == 9:\n        return False\n    if num == 10:\n        return True\n    if num == 11:\n        return False\n    if num == 12:\n        return True\n    if num == 13:\n        return False\n    if num == 14:\n        return True\n    if num == 15:\n        return False\n    if num == 16:\n        return True\n    if num == 17:\n        return False\n    if num == 18:\n        return True\n    if num == 19:\n        return False\n    if num == 20:\n        return True\n    if num == 21:\n        return False\n    if num == 22:\n        return"
    },
    {
        "task_id": 57,
        "prompt": "Write a python function to find the largest number that can be formed with the given list of digits.\n\ndef",
        "answer": "def largest_number(digits):\n    # Write your code here.\n    if len(digits) == 0:\n        return 0\n    if len(digits) == 1:\n        return digits[0]\n    if digits[0] > digits[1]:\n        return digits[0]\n    return digits[1]"
    },
    {
        "task_id": 58,
        "prompt": "Write a python function to check whether the given two integers have opposite sign or not.\n\ndef",
        "answer": "def opposite(a, b):\n    if a < b:\n        return True\n    else:\n        return False"
    },
    {
        "task_id": 59,
        "prompt": "Write a python function to find the nth octagonal number.\n\ndef",
        "answer": "def find_nth_octagonal(n):\n    # Write your code here.\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    elif n == 4:\n        return 4\n    elif n == 5:\n        return 8\n    elif n == 6:\n        return 16\n    elif n == 7:\n        return 32\n    elif n == 8:\n        return 64\n    elif n == 9:\n        return 128\n    elif n == 10:\n        return 256\n    elif n == 11:\n        return 512\n    elif n == 12:\n        return 1024\n    elif n == 13:\n        return 2048\n    elif n == 14:\n        return 4096\n    elif n == 15:\n        return 8192\n    elif n == 16:\n        return 16384\n    elif n == 17:\n        return 32768\n    elif n == 18:\n        return 65536\n    elif n == 19:\n        return 1310"
    },
    {
        "task_id": 61,
        "prompt": "Write a python function to count the number of substrings with the sum of digits equal to their length.\n\ndef",
        "answer": "def count_substring(string, sub_string):\n    count = 0\n    for i in range(len(string) - len(sub_string) + 1):\n        if string[i:i + len(sub_string)] == sub_string:\n            count += 1\n    return count"
    },
    {
        "task_id": 62,
        "prompt": "Write a python function to find smallest number in a list.\n\ndef",
        "answer": "def smallest(lst):\n    smallest = lst[0]\n    for i in range(len(lst)):\n        if lst[i] < smallest:\n            smallest = lst[i]\n    return smallest"
    },
    {
        "task_id": 63,
        "prompt": "Write a python function to find the maximum difference between available pairs in the given tuple list.\n\ndef",
        "answer": "def find_max_diff(tuple_list):\n    max_diff = 0\n    for i in range(len(tuple_list)):\n        for j in range(i+1, len(tuple_list)):\n            diff = abs(tuple_list[i][0] - tuple_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "task_id": 64,
        "prompt": "Write a python function to sort a list of tuples using the second value of each tuple.\n\ndef",
        "answer": "def sort_tuples(tup):\n    return tup[1]"
    },
    {
        "task_id": 65,
        "prompt": "Write a python function to flatten a list and sum all of its elements.\n\ndef",
        "answer": "def flatten(l):\n    # Write your code here.\n    if len(l) == 0:\n        return []\n    if len(l) == 1:\n        return l\n    else:\n        return flatten(l[0]) + flatten(l[1:])"
    },
    {
        "task_id": 66,
        "prompt": "Write a python function to count the number of positive numbers in a list.\n\ndef",
        "answer": "def positive_count(lst):\n    count = 0\n    for i in lst:\n        if i > 0:\n            count += 1\n    return count"
    },
    {
        "task_id": 67,
        "prompt": "Write a python function to find the number of ways to partition a set of Bell numbers.\n\ndef",
        "answer": "def bell_num(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return bell_num(n-1) + bell_num(n-2)"
    },
    {
        "task_id": 68,
        "prompt": "Write a python function to check whether the given array is monotonic or not.\n\ndef",
        "answer": "def is_monotonic(array):\n    # Write your code here.\n    if len(array) == 1:\n        return True\n    if array[0] < array[1]:\n        return False\n    for i in range(1, len(array)):\n        if array[i] < array[i - 1]:\n            return False\n    return True"
    },
    {
        "task_id": 69,
        "prompt": "Write a python function to check whether a list contains the given sublist or not.\n\ndef",
        "answer": "def contains_sublist(lst, sublist):\n    for i in range(len(lst)):\n        if lst[i] in sublist:\n            return True\n    return False"
    },
    {
        "task_id": 70,
        "prompt": "Write a python function to find whether all the given tuples have equal length or not.\n\ndef",
        "answer": "def check_length(tup):\n    if len(tup) == len(tup[0]):\n        return True\n    else:\n        return False"
    },
    {
        "task_id": 71,
        "prompt": "Write a python function to sort a list of elements.\n\ndef",
        "answer": "def sort(lst):\n    lst.sort()\n    return lst"
    },
    {
        "task_id": 72,
        "prompt": "Write a python function to check whether the given number can be represented as the difference of two squares or not.\n\ndef",
        "answer": "def is_square(n):\n    if n == 0:\n        return False\n    if n == 1:\n        return True\n    if n == 2:\n        return True\n    if n == 3:\n        return False\n    if n == 4:\n        return True\n    if n == 5:\n        return False\n    if n == 6:\n        return True\n    if n == 7:\n        return False\n    if n == 8:\n        return True\n    if n == 9:\n        return False\n    if n == 10:\n        return True\n    if n == 11:\n        return False\n    if n == 12:\n        return True\n    if n == 13:\n        return False\n    if n == 14:\n        return True\n    if n == 15:\n        return False\n    if n == 16:\n        return True\n    if n == 17:\n        return False\n    if n == 18:\n        return True\n    if n == 19:\n        return False\n    if n == 20:\n        return True\n    if n == 21:\n        return False\n    "
    },
    {
        "task_id": 74,
        "prompt": "Write a python function to check whether it follows the sequence given in the patterns array.\n\ndef",
        "answer": "def check_sequence(patterns, sequence):\n    for i in range(len(sequence)):\n        if sequence[i] not in patterns:\n            return False\n    return True"
    },
    {
        "task_id": 75,
        "prompt": "Write a python function to find tuples which have all elements divisible by k from the given list of tuples.\n\ndef",
        "answer": "def tuples_divisible_by_k(lst, k):\n    for i in lst:\n        if i % k == 0:\n            yield i"
    },
    {
        "task_id": 77,
        "prompt": "Write a python function to find whether a number is divisible by 11.\n\ndef",
        "answer": "def divisible(num):\n    if num % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "task_id": 79,
        "prompt": "Write a python function to check whether the length of the word is odd or not.\n\ndef",
        "answer": "def odd_word(word):\n    if len(word) % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "task_id": 80,
        "prompt": "Write a python function to find the nth tetrahedral number.\n\ndef",
        "answer": "def nth_tetrahedral(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 4\n    elif n == 5:\n        return 5\n    elif n == 6:\n        return 6\n    elif n == 7:\n        return 7\n    elif n == 8:\n        return 8\n    elif n == 9:\n        return 9\n    elif n == 10:\n        return 10\n    elif n == 11:\n        return 11\n    elif n == 12:\n        return 12\n    elif n == 13:\n        return 13\n    elif n == 14:\n        return 14\n    elif n == 15:\n        return 15\n    elif n == 16:\n        return 16\n    elif n == 17:\n        return 17\n    elif n == 18:\n        return 18\n    elif n == 19:\n        return 19\n    elif n == 20:\n        return 20\n"
    },
    {
        "task_id": 82,
        "prompt": "Write a python function to find the volume of a sphere.\n\ndef",
        "answer": "def sphere_volume(r):\n    return 3.14 * r ** 3"
    },
    {
        "task_id": 83,
        "prompt": "Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n\ndef",
        "answer": "def mod_26(string):\n    mod_26_list = []\n    for i in string:\n        mod_26_list.append(ord(i) % 26)\n    return mod_26_list"
    },
    {
        "task_id": 84,
        "prompt": "Write a python function to find the nth number in the newman conway sequence.\n\ndef",
        "answer": "def nth_number(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 4\n    elif n == 5:\n        return 5\n    elif n == 6:\n        return 6\n    elif n == 7:\n        return 7\n    elif n == 8:\n        return 8\n    elif n == 9:\n        return 9\n    elif n == 10:\n        return 10\n    elif n == 11:\n        return 11\n    elif n == 12:\n        return 12\n    elif n == 13:\n        return 13\n    elif n == 14:\n        return 14\n    elif n == 15:\n        return 15\n    elif n == 16:\n        return 16\n    elif n == 17:\n        return 17\n    elif n == 18:\n        return 18\n    elif n == 19:\n        return 19\n    elif n == 20:\n        return 20\n    elif"
    },
    {
        "task_id": 85,
        "prompt": "Write a python function to find the surface area of a sphere.\n\ndef",
        "answer": "def surfaceArea(r):\n    return 3.14 * r * r"
    },
    {
        "task_id": 86,
        "prompt": "Write a python function to find nth centered hexagonal number.\n\ndef",
        "answer": "def find_nth_centered_hexagonal(n):\n    # Write your code here.\n    return n*(n+1)/2"
    },
    {
        "task_id": 87,
        "prompt": "Write a python function to merge three dictionaries into a single dictionary.\n\ndef",
        "answer": "def merge_dicts(dict1, dict2):\n    # create a new dictionary with the values from dict1 and dict2\n    new_dict = {}\n    for key in dict1:\n        new_dict[key] = dict1[key]\n    for key in dict2:\n        new_dict[key] = dict2[key]\n    return new_dict"
    },
    {
        "task_id": 88,
        "prompt": "Write a python function to get the frequency of all the elements in a list, returned as a dictionary.\n\ndef",
        "answer": "def frequency(lst):\n    freq = {}\n    for i in lst:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq"
    },
    {
        "task_id": 89,
        "prompt": "Write a python function to find the closest smaller number than n.\n\ndef",
        "answer": "def smallest(n):\n    smallest = n\n    for i in range(1, n+1):\n        if n % i == 0:\n            smallest = i\n    return smallest"
    },
    {
        "task_id": 90,
        "prompt": "Write a python function to find the length of the longest word.\n\ndef",
        "answer": "def longest_word(text):\n    text = text.split()\n    longest_word = ''\n    for word in text:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return longest_word"
    },
    {
        "task_id": 91,
        "prompt": "Write a python function to check if a string is present as a substring in a given list of string values.\n\ndef",
        "answer": "def is_substring(str1, str2):\n    if len(str1) == len(str2):\n        for i in range(len(str1)):\n            if str1[i]!= str2[i]:\n                return False\n        return True\n    else:\n        return False"
    },
    {
        "task_id": 92,
        "prompt": "Write a python function to check whether the given number is undulating or not.\n\ndef",
        "answer": "def check_undulating(number):\n    if number % 2 == 0:\n        print(\"The given number is even\")\n    else:\n        print(\"The given number is odd\")"
    },
    {
        "task_id": 93,
        "prompt": "Write a python function to calculate the value of 'a' to the power 'b'.\n\ndef",
        "answer": "def power(a,b):\n    return a**b"
    },
    {
        "task_id": 94,
        "prompt": "Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n\ndef",
        "answer": "def smallest_second(tup):\n    return tup[0][1]"
    },
    {
        "task_id": 95,
        "prompt": "Write a python function to find the length of the smallest list in a list of lists.\n\ndef",
        "answer": "def smallest_list(lst):\n    smallest = lst[0]\n    for i in lst:\n        if i < smallest:\n            smallest = i\n    return smallest"
    },
    {
        "task_id": 96,
        "prompt": "Write a python function to find the number of divisors of a given integer.\n\ndef",
        "answer": "def divisors(num):\n    divisors = []\n    for i in range(1, num + 1):\n        if num % i == 0:\n            divisors.append(i)\n    return len(divisors)"
    },
    {
        "task_id": 97,
        "prompt": "Write a python function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n\ndef",
        "answer": "def frequency(l):\n    d = {}\n    for i in l:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return d"
    },
    {
        "task_id": 98,
        "prompt": "Write a python function to multiply all the numbers in a list and divide with the length of the list.\n\ndef",
        "answer": "def multiply_all_numbers(list):\n    # Write your code here.\n    result = 1\n    for i in list:\n        result *= i\n    return result"
    },
    {
        "task_id": 99,
        "prompt": "Write a python function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n\ndef",
        "answer": "def binary_to_decimal(binary_num):\n    decimal_num = 0\n    for i in range(len(binary_num)):\n        decimal_num += int(binary_num[i]) * (2 ** i)\n    return decimal_num"
    },
    {
        "task_id": 100,
        "prompt": "Write a python function to find the next smallest palindrome of a specified integer, returned as an integer.\n\ndef",
        "answer": "def next_smallest_palindrome(n):\n    # Write your code here.\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n % 2 == 0:\n        return n // 2\n    else:\n        return n * 3 + 1"
    },
    {
        "task_id": 101,
        "prompt": "Write a python function to find the kth element in the given array using 1-based indexing.\n\ndef",
        "answer": "def kthElement(arr, n, k):\n    # Write your code here.\n    if n == 0:\n        return -1\n    if n == 1:\n        return arr[n-1]\n    if k == 0:\n        return arr[n-1]\n    if k == 1:\n        return arr[n-1]\n    if k > n:\n        return -1\n    if k > n-1:\n        return arr[n-1]\n    if k == n-1:\n        return arr[n-1]\n    if k == n-1:\n        return arr[n-1]\n    if k == n-1:\n        return arr[n-1]\n    if k == n-1:\n        return arr[n-1]\n    if k == n-1:\n        return arr[n-1]\n    if k == n-1:\n        return arr[n-1]\n    if k == n-1:\n        return arr[n-1]\n    if k == n-1:\n        return arr[n-"
    },
    {
        "task_id": 102,
        "prompt": "Write a python function to convert a snake case string to camel case string.\n\ndef",
        "answer": "def camelCaseToSnakeCase(string):\n    return string.replace('-', '_').replace('_', '-')"
    },
    {
        "task_id": 103,
        "prompt": "Write a python function to find the Eulerian number a(n, m).\n\ndef",
        "answer": "def eulerian(n, m):\n    if n == m:\n        return n\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20"
    },
    {
        "task_id": 104,
        "prompt": "Write a python function to sort each sublist of strings in a given list of lists.\n\ndef",
        "answer": "def sort_list(list_of_lists):\n    for i in range(len(list_of_lists)):\n        for j in range(len(list_of_lists[i])):\n            list_of_lists[i][j] = list_of_lists[i][j].lower()\n    return list_of_lists"
    },
    {
        "task_id": 105,
        "prompt": "Write a python function to count true booleans in the given list.\n\ndef",
        "answer": "def count_true(lst):\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count"
    },
    {
        "task_id": 106,
        "prompt": "Write a python function to append the given list to the given tuples.\n\ndef",
        "answer": "def append_tuple(tuple_list, tuple_to_append):\n    for i in range(len(tuple_list)):\n        tuple_list[i] = tuple_to_append[i]\n    return tuple_list"
    },
    {
        "task_id": 108,
        "prompt": "Write a python function to merge three lists into a single sorted list.\n\ndef",
        "answer": "def merge_lists(l1, l2, l3):\n    # l1 = [1, 2, 3, 4, 5]\n    # l2 = [1, 2, 3, 4, 5]\n    # l3 = [1, 2, 3, 4, 5]\n    # l1 = [1, 2, 3, 4, 5]\n    # l2 = [1, 2, 3, 4, 5]\n    # l3 = [1, 2, 3, 4, 5]\n    # l1 = [1, 2, 3, 4, 5]\n    # l2 = [1, 2, 3, 4, 5]\n    # l3 = [1, 2, 3, 4, 5]\n    # l1 = [1, 2, 3, 4, 5]\n    # l2 = [1, 2, 3, 4, 5]\n    # l3 = [1, 2, 3, 4, 5]\n    # l1 = [1, 2, 3, 4, 5]\n    # l2 = [1, 2, 3, 4, 5"
    },
    {
        "task_id": 109,
        "prompt": "Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\ndef",
        "answer": "def odd_even_rotation(string):\n    count = 0\n    for i in range(len(string)):\n        if string[i] % 2 == 1:\n            count += 1\n    return count"
    },
    {
        "task_id": 111,
        "prompt": "Write a python function to find the common elements in given nested lists.\n\ndef",
        "answer": "def common_elements(l1, l2):\n    common_elements = []\n    for i in l1:\n        if i in l2:\n            common_elements.append(i)\n    return common_elements"
    },
    {
        "task_id": 113,
        "prompt": "Write a python function to check if a string represents an integer or not.\n\ndef",
        "answer": "def is_int(s):\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "task_id": 115,
        "prompt": "Write a python function to check whether all dictionaries in a list are empty or not.\n\ndef",
        "answer": "def check_empty(list):\n    for i in list:\n        if i:\n            return False\n    return True"
    },
    {
        "task_id": 116,
        "prompt": "Write a python function to convert a given tuple of positive integers into a single integer.\n\ndef",
        "answer": "def convert_tuple_to_int(tuple):\n    return int(''.join(map(str, tuple)))"
    },
    {
        "task_id": 117,
        "prompt": "Write a python function to convert all possible convertible elements in a list of lists to floats.\n\ndef",
        "answer": "def convert_list_to_float(list_of_lists):\n    for i in range(len(list_of_lists)):\n        for j in range(len(list_of_lists[i])):\n            list_of_lists[i][j] = float(list_of_lists[i][j])\n    return list_of_lists"
    },
    {
        "task_id": 118,
        "prompt": "Write a python function to convert a string to a list of strings split on the space character.\n\ndef",
        "answer": "def string_to_list(string):\n    return string.split()"
    },
    {
        "task_id": 119,
        "prompt": "Write a python function to find the element that appears only once in a sorted array.\n\ndef",
        "answer": "def find_duplicate(arr):\n    # Write your code here.\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                return arr[i]\n    return -1"
    },
    {
        "task_id": 120,
        "prompt": "Write a python function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n\ndef",
        "answer": "def max_product(pairs):\n    max_product = 0\n    for i in range(len(pairs)):\n        for j in range(i+1, len(pairs)):\n            max_product = max(max_product, pairs[i][1] * pairs[j][1])\n    return max_product"
    },
    {
        "task_id": 123,
        "prompt": "Write a python function to sum all amicable numbers from 1 to a specified number.\n\ndef",
        "answer": "def sum_amicable(n):\n    sum = 0\n    for i in range(1, n+1):\n        if i == sum_amicable(i-1):\n            sum += i\n    return sum"
    },
    {
        "task_id": 124,
        "prompt": "Write a python function to get the angle of a complex number.\n\ndef",
        "answer": "def getAngle(x,y):\n    return math.atan2(y,x)"
    },
    {
        "task_id": 125,
        "prompt": "Write a python function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\ndef",
        "answer": "def find_max_diff(binary_string):\n    max_diff = 0\n    for i in range(len(binary_string)):\n        if binary_string[i] == '0':\n            max_diff += 1\n        else:\n            max_diff -= 1\n    return max_diff"
    },
    {
        "task_id": 126,
        "prompt": "Write a python function to find the sum of common divisors of two given numbers.\n\ndef",
        "answer": "def common_divisors(num):\n    divisors = []\n    for i in range(1, num):\n        if num % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "task_id": 127,
        "prompt": "Write a python function to multiply two integers.\n\ndef",
        "answer": "def multiply(a, b):\n    return a * b"
    },
    {
        "task_id": 128,
        "prompt": "Write a python function to find words that are longer than n characters from a given list of words.\n\ndef",
        "answer": "def word_length(words, n):\n    # Write your code here\n    return [word for word in words if len(word) > n]"
    },
    {
        "task_id": 129,
        "prompt": "Write a python function to calculate whether the matrix is a magic square.\n\ndef",
        "answer": "def magicSquare(matrix):\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            if matrix[i][j] == 0:\n                return False\n    return True"
    },
    {
        "task_id": 130,
        "prompt": "Write a python function to find the item with maximum frequency in a given list.\n\ndef",
        "answer": "def max_freq(lst):\n    max_freq = 0\n    for i in lst:\n        if i > max_freq:\n            max_freq = i\n    return max_freq"
    },
    {
        "task_id": 131,
        "prompt": "Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n\ndef",
        "answer": "def reverse_vowels(string):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(len(string)):\n        if string[i] in vowels:\n            string = string[:i] + string[i + 1:]\n    return string"
    },
    {
        "task_id": 132,
        "prompt": "Write a python function to convert a tuple to a string.\n\ndef",
        "answer": "def convert_tuple_to_string(tuple):\n    return str(tuple)"
    },
    {
        "task_id": 133,
        "prompt": "Write a python function to calculate the sum of the negative numbers of a given list of numbers.\n\ndef",
        "answer": "def negative_sum(nums):\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "task_id": 135,
        "prompt": "Write a python function to find the nth hexagonal number.\n\ndef",
        "answer": "def nth_hexagonal(n):\n    # Write your code here\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return nth_hexagonal(n-1) + nth_hexagonal(n-2)"
    },
    {
        "task_id": 137,
        "prompt": "Write a python function to find the ratio of zeroes to non-zeroes in an array of integers.\n\ndef",
        "answer": "def findRatio(arr):\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            count += 1\n    return count/len(arr)"
    },
    {
        "task_id": 138,
        "prompt": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n\ndef",
        "answer": "def is_sum_of_two_powers(n):\n    if n == 0:\n        return False\n    if n == 1:\n        return True\n    if n % 2 == 0:\n        return is_sum_of_two_powers(n // 2)\n    else:\n        return False"
    },
    {
        "task_id": 139,
        "prompt": "Write a python function to find the circumference of a circle.\n\ndef",
        "answer": "def circumference(radius):\n    circumference = 2 * 3.14 * radius\n    print(circumference)"
    },
    {
        "task_id": 140,
        "prompt": "Write a python function to flatten the list of lists into a single set of numbers.\n\ndef",
        "answer": "def flatten(l):\n    # Write your code here.\n    flatten_list = []\n    for i in l:\n        if type(i) == list:\n            flatten_list.extend(flatten(i))\n        else:\n            flatten_list.append(i)\n    return flatten_list"
    },
    {
        "task_id": 141,
        "prompt": "Write a python function to sort a list of elements.\n\ndef",
        "answer": "def sort(lst):\n    lst.sort()\n    return lst"
    },
    {
        "task_id": 142,
        "prompt": "Write a python function to count number items that are identical in the same position of three given lists.\n\ndef",
        "answer": "def count_items_in_lists(list1, list2):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n    return count"
    },
    {
        "task_id": 143,
        "prompt": "Write a python function to find number of lists present in the given tuple.\n\ndef",
        "answer": "def count_lists(tuple):\n    return len(tuple)"
    },
    {
        "task_id": 145,
        "prompt": "Write a python function to find the maximum difference between any two elements in a given array.\n\ndef",
        "answer": "def max_diff(arr):\n    max_diff = arr[0] - arr[1]\n    for i in range(2, len(arr)):\n        max_diff = max(max_diff, arr[i] - arr[i-1])\n    return max_diff"
    },
    {
        "task_id": 160,
        "prompt": "Write a python function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\ndef",
        "answer": "def find_solution(x, y):\n    if x == y:\n        return x\n    if x > y:\n        return find_solution(x, y - x)\n    else:\n        return find_solution(x - y, y)"
    },
    {
        "task_id": 161,
        "prompt": "Write a python function to remove all elements from a given list present in another list.\n\ndef",
        "answer": "def remove_elements(lst1, lst2):\n    lst3 = []\n    for i in lst1:\n        if i not in lst2:\n            lst3.append(i)\n    return lst3"
    },
    {
        "task_id": 162,
        "prompt": "Write a python function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n\ndef",
        "answer": "def sum_n(n):\n    return n + (n-2) + (n-4)"
    },
    {
        "task_id": 163,
        "prompt": "Write a python function to calculate the area of a regular polygon given the length and number of its sides.\n\ndef",
        "answer": "def area_of_regular_polygon(length, number_of_sides):\n    area = length * number_of_sides\n    return area"
    },
    {
        "task_id": 164,
        "prompt": "Write a python function to determine if the sum of the divisors of two integers are the same.\n\ndef",
        "answer": "def same_sum(a, b):\n    if a == b:\n        return True\n    elif a % b == 0:\n        return False\n    else:\n        return same_sum(b, a % b)"
    },
    {
        "task_id": 165,
        "prompt": "Write a python function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\ndef",
        "answer": "def count_chars(str1, str2):\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] == str2[i]:\n            count += 1\n    return count"
    },
    {
        "task_id": 166,
        "prompt": "Write a python function that counts the number of pairs of integers in a list that xor to an even number.\n\ndef",
        "answer": "def count_even(list):\n    even_count = 0\n    for i in list:\n        if i % 2 == 0:\n            even_count += 1\n    return even_count"
    },
    {
        "task_id": 167,
        "prompt": "Write a python function to find the smallest power of 2 greater than or equal to n.\n\ndef",
        "answer": "def smallest_power_of_2(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return smallest_power_of_2(n//2)\n    else:\n        return smallest_power_of_2(n*3+1)"
    },
    {
        "task_id": 168,
        "prompt": "Write a python function to count the number of occurrences of a number in a given list.\n\ndef",
        "answer": "def count_occurrences(list, num):\n    count = 0\n    for i in range(len(list)):\n        if list[i] == num:\n            count += 1\n    return count"
    },
    {
        "task_id": 170,
        "prompt": "Write a python function to find the sum of numbers in a list within a range specified by two indices.\n\ndef",
        "answer": "def sum_numbers(lst, start, end):\n    return sum(lst[start:end])"
    },
    {
        "task_id": 171,
        "prompt": "Write a python function to find the perimeter of a regular pentagon from the length of its sides.\n\ndef",
        "answer": "def find_perimeter(side):\n    return side * 4"
    },
    {
        "task_id": 172,
        "prompt": "Write a python function to count the number of occurence of the string'std' in a given string.\n\ndef",
        "answer": "def count_std(string):\n    count = 0\n    for i in string:\n        if i =='std':\n            count += 1\n    return count"
    },
    {
        "task_id": 222,
        "prompt": "Write a python function to check if all the elements in tuple have same data type or not.\n\ndef",
        "answer": "def check_tuple(tuple_data):\n    for i in tuple_data:\n        if type(i)!= tuple:\n            return False\n    return True"
    },
    {
        "task_id": 223,
        "prompt": "Write a python function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\ndef",
        "answer": "def majorityElement(arr, n, element):\n    # Write your code here.\n    count = 0\n    for i in range(n):\n        if arr[i] == element:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "task_id": 224,
        "prompt": "Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n\ndef",
        "answer": "def count_bits(n):\n    count = 0\n    while n:\n        if n & 1:\n            count += 1\n        n >>= 1\n    return count"
    },
    {
        "task_id": 226,
        "prompt": "Write a python function to remove the characters which have odd index values of a given string.\n\ndef",
        "answer": "def odd_index(string):\n    for i in range(len(string)):\n        if string[i] % 2!= 0:\n            string = string[:i] + string[i+1:]\n    return string"
    },
    {
        "task_id": 227,
        "prompt": "Write a python function to find minimum of three numbers.\n\ndef",
        "answer": "def min3(a, b, c):\n    if a > b and a > c:\n        return a\n    elif b > a and b > c:\n        return b\n    else:\n        return c"
    },
    {
        "task_id": 228,
        "prompt": "Write a python function to check whether all the bits are unset in the given range or not.\n\ndef",
        "answer": "def unset(num, rng):\n    if rng == 0:\n        return num & 0xFF == 0\n    elif rng == 1:\n        return num & 0xFF == 0xFF\n    elif rng == 2:\n        return num & 0xFF == 0xFF\n    elif rng == 3:\n        return num & 0xFF == 0\n    elif rng == 4:\n        return num & 0xFF == 0xFF\n    elif rng == 5:\n        return num & 0xFF == 0\n    elif rng == 6:\n        return num & 0xFF == 0xFF\n    elif rng == 7:\n        return num & 0xFF == 0\n    elif rng == 8:\n        return num & 0xFF == 0xFF\n    elif rng == 9:\n        return num & 0xFF == 0\n    elif rng == 10:\n        return num & 0xFF == 0xFF\n    elif rng == 11:\n        return num & 0xFF == 0\n    el"
    },
    {
        "task_id": 229,
        "prompt": "Write a python function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n\ndef",
        "answer": "def rearrange_array(array, n):\n    for i in range(n):\n        if array[i] < 0:\n            array[i] *= -1\n    for i in range(n):\n        array[i] = array[i] * -1\n    return array"
    },
    {
        "task_id": 230,
        "prompt": "Write a python function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n\ndef",
        "answer": "def replace_blank_spaces(string):\n    return string.replace(' ', '%20')"
    },
    {
        "task_id": 232,
        "prompt": "Write a python function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n\ndef",
        "answer": "def largest_n(lst, n):\n    return sorted(lst, reverse=True)[:n]"
    },
    {
        "task_id": 233,
        "prompt": "Write a python function to find the lateral surface area of a cylinder.\n\ndef",
        "answer": "def find_lateral_surface(radius, height):\n    return (3.14 * radius * height) / 2"
    },
    {
        "task_id": 234,
        "prompt": "Write a python function to find the volume of a cube given its side length.\n\ndef",
        "answer": "def volume(side_length):\n    volume = side_length**3\n    return volume"
    },
    {
        "task_id": 235,
        "prompt": "Write a python function to set all even bits of a given number.\n\ndef",
        "answer": "def set_even_bits(n):\n    # Your code here\n    even_bits = 0\n    while n > 0:\n        if n & 1 == 0:\n            even_bits += 1\n        n >>= 1\n    return even_bits"
    },
    {
        "task_id": 237,
        "prompt": "Write a python function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n\ndef",
        "answer": "def unique_tuple(tuple_list):\n    unique_tuple_dict = {}\n    for tuple in tuple_list:\n        if tuple[0] in unique_tuple_dict:\n            unique_tuple_dict[tuple[0]] += 1\n        else:\n            unique_tuple_dict[tuple[0]] = 1\n    return unique_tuple_dict"
    },
    {
        "task_id": 238,
        "prompt": "Write a python function to count the number of non-empty substrings of a given string.\n\ndef",
        "answer": "def countNonEmptySubstrings(string):\n    count = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)):\n            if string[i:j]!= string[i:j][::-1]:\n                count += 1\n    return count"
    },
    {
        "task_id": 239,
        "prompt": "Write a python function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n\ndef",
        "answer": "def find_possible_sequences(m, n):\n    # Write your code here.\n    if m == 0 or n == 0:\n        return 0\n    if m == 1 or n == 1:\n        return 1\n    if m > n:\n        return 0\n    return find_possible_sequences(m - 1, n) + find_possible_sequences(m, n - 1)"
    },
    {
        "task_id": 240,
        "prompt": "Write a python function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n\ndef",
        "answer": "def replace_last(list1, list2):\n    list1[-1] = list2[-1]\n    return list1"
    },
    {
        "task_id": 242,
        "prompt": "Write a python function to count the total number of characters in a string.\n\ndef",
        "answer": "def count_characters(string):\n    count = 0\n    for i in string:\n        count += 1\n    return count"
    },
    {
        "task_id": 244,
        "prompt": "Write a python function to find the next perfect square greater than a given number.\n\ndef",
        "answer": "def perfect_square(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return perfect_square(n//2) + perfect_square(n//2 + 1)\n    else:\n        return perfect_square(n//2) + perfect_square(n//2 + 1) + perfect_square(n//2 + 2)"
    },
    {
        "task_id": 245,
        "prompt": "Write a python function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n\ndef",
        "answer": "def find_max_subsequence(arr):\n    max_sum = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if arr[i] > arr[j]:\n                max_sum += arr[i]\n    return max_sum"
    },
    {
        "task_id": 246,
        "prompt": "Write a python function for computing square roots using the babylonian method.\n\ndef",
        "answer": "def compute_sqrt(x):\n    if x == 0:\n        return 0\n    elif x < 0:\n        return None\n    else:\n        return x**0.5"
    },
    {
        "task_id": 247,
        "prompt": "Write a python function to find the length of the longest palindromic subsequence in the given string.\n\ndef",
        "answer": "def longestPalindromeSubseq(s):\n    # Write your code here.\n    if len(s) < 2:\n        return 0"
    },
    {
        "task_id": 248,
        "prompt": "Write a python function that takes in an integer n and calculates the harmonic sum of n-1.\n\ndef",
        "answer": "def harmonic_sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i/i\n    return sum"
    },
    {
        "task_id": 249,
        "prompt": "Write a python function to find the intersection of two arrays.\n\ndef",
        "answer": "def intersection(arr1, arr2):\n    arr1 = sorted(arr1)\n    arr2 = sorted(arr2)\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i], arr2[j]\n    return arr1[i], arr2[j]"
    },
    {
        "task_id": 250,
        "prompt": "Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n\ndef",
        "answer": "def count_occurences(tuple, element):\n    count = 0\n    for i in tuple:\n        if i == element:\n            count += 1\n    return count"
    },
    {
        "task_id": 251,
        "prompt": "Write a python function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n\ndef",
        "answer": "def insert_before(list, element):\n    for i in range(len(list)):\n        if list[i] == element:\n            list.insert(i, element)\n            return list\n    return list"
    },
    {
        "task_id": 252,
        "prompt": "Write a python function to convert complex numbers to polar coordinates.\n\ndef",
        "answer": "def polar_to_cartesian(x, y, z):\n    \"\"\"Convert complex numbers to cartesian coordinates."
    },
    {
        "task_id": 253,
        "prompt": "Write a python function that returns the number of integer elements in a given list.\n\ndef",
        "answer": "def count_elements(lst):\n    count = 0\n    for i in lst:\n        if type(i) == int:\n            count += 1\n    return count"
    },
    {
        "task_id": 255,
        "prompt": "Write a python function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n\ndef",
        "answer": "def combinations(lst, n):\n    # create a list of all possible combinations\n    combinations = []\n    for i in range(1, n + 1):\n        for j in combinations(lst, i):\n            combinations.append(j)\n    return combinations"
    },
    {
        "task_id": 256,
        "prompt": "Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n\ndef",
        "answer": "def prime_number(num):\n    count = 0\n    for i in range(2, num):\n        if num % i == 0:\n            count += 1\n    return count"
    },
    {
        "task_id": 257,
        "prompt": "Write a python function that takes in two numbers and returns a tuple with the second number and then the first number.\n\ndef",
        "answer": "def add(num1, num2):\n    return (num1, num2)"
    },
    {
        "task_id": 259,
        "prompt": "Write a python function to maximize the given two tuples.\n\ndef",
        "answer": "def max_pair(t1, t2):\n    if t1[0] > t2[0]:\n        return t1\n    elif t1[0] < t2[0]:\n        return t2\n    else:\n        return t1"
    },
    {
        "task_id": 260,
        "prompt": "Write a python function to find the nth newman\u2013shanks\u2013williams prime number.\n\ndef",
        "answer": "def nth_newman_shanks_williams(n):\n    # Write your code here.\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 5\n    elif n == 5:\n        return 7\n    elif n == 6:\n        return 11\n    elif n == 7:\n        return 13\n    elif n == 8:\n        return 17\n    elif n == 9:\n        return 19\n    elif n == 10:\n        return 23\n    elif n == 11:\n        return 29\n    elif n == 12:\n        return 31\n    elif n == 13:\n        return 37\n    elif n == 14:\n        return 41\n    elif n == 15:\n        return 47\n    elif n == 16:\n        return 53\n    elif n == 17:\n        return 59\n    elif n == 18:\n        return 61\n    elif n == 19:\n        return 67"
    },
    {
        "task_id": 261,
        "prompt": "Write a python function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n\ndef",
        "answer": "def divide(t1, t2):\n    return t1[0] / t2[0], t1[1] / t2[1]"
    },
    {
        "task_id": 262,
        "prompt": "Write a python function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\ndef",
        "answer": "def split_list(l, l_len):\n    return (l[:l_len], l[l_len:])"
    },
    {
        "task_id": 264,
        "prompt": "Write a python function to calculate a dog's age in dog's years.\n\ndef",
        "answer": "def dog_years(dog_age):\n    if dog_age < 1:\n        return \"Invalid dog age\"\n    elif dog_age < 2:\n        return \"1 year\"\n    elif dog_age < 3:\n        return \"2 years\"\n    elif dog_age < 4:\n        return \"3 years\"\n    elif dog_age < 5:\n        return \"4 years\"\n    elif dog_age < 6:\n        return \"5 years\"\n    elif dog_age < 7:\n        return \"6 years\"\n    elif dog_age < 8:\n        return \"7 years\"\n    elif dog_age < 9:\n        return \"8 years\"\n    elif dog_age < 10:\n        return \"9 years\"\n    elif dog_age < 11:\n        return \"10 years\"\n    elif dog_age < 12:\n        return \"11 years\"\n    elif dog_age < 13:\n        return \"12 years\"\n    elif dog_age < 14:\n        return \"13 years\"\n    elif"
    },
    {
        "task_id": 265,
        "prompt": "Write a python function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n\ndef",
        "answer": "def split_list(list, n):\n    return [list[i:i+n] for i in range(0, len(list), n)]"
    },
    {
        "task_id": 266,
        "prompt": "Write a python function to find the lateral surface area of a cube given its side length.\n\ndef",
        "answer": "def l_s(l):\n    return l*l*l"
    },
    {
        "task_id": 267,
        "prompt": "Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n\ndef",
        "answer": "def sum_of_squares(n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i ** 2\n    return sum"
    },
    {
        "task_id": 268,
        "prompt": "Write a python function to find then'th star number.\n\ndef",
        "answer": "def nth_star(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 6\n    elif n == 5:\n        return 10\n    elif n == 6:\n        return 15\n    elif n == 7:\n        return 20\n    elif n == 8:\n        return 25\n    elif n == 9:\n        return 30\n    elif n == 10:\n        return 35\n    elif n == 11:\n        return 40\n    elif n == 12:\n        return 45\n    elif n == 13:\n        return 50\n    elif n == 14:\n        return 55\n    elif n == 15:\n        return 60\n    elif n == 16:\n        return 65\n    elif n == 17:\n        return 70\n    elif n == 18:\n        return 75\n    elif n == 19:\n        return 80\n    elif n == 20:\n        return 85\n    elif"
    },
    {
        "task_id": 269,
        "prompt": "Write a python function to find the ascii value of a character.\n\ndef",
        "answer": "def ascii_value(char):\n    return ord(char)"
    },
    {
        "task_id": 270,
        "prompt": "Write a python function to find the sum of even numbers at even positions of a list.\n\ndef",
        "answer": "def even_sum(nums):\n    even_sum = 0\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            even_sum += nums[i]\n    return even_sum"
    },
    {
        "task_id": 271,
        "prompt": "Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n\ndef",
        "answer": "def sum_of_even_numbers(n):\n    sum = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "task_id": 272,
        "prompt": "Write a python function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n\ndef",
        "answer": "def rear_elements(tup):\n    return tup[0]"
    },
    {
        "task_id": 273,
        "prompt": "Write a python function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\ndef",
        "answer": "def add_tuple(t1, t2):\n    return tuple(t1[i] - t2[i] for i in range(len(t1)))"
    },
    {
        "task_id": 274,
        "prompt": "Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n\ndef",
        "answer": "def binomial(n, k):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if k == 0:\n        return 0\n    if k == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 1\n    if n == 4:\n        return 1\n    if n == 5:\n        return 1\n    if n == 6:\n        return 1\n    if n == 7:\n        return 1\n    if n == 8:\n        return 1\n    if n == 9:\n        return 1\n    if n == 10:\n        return 1\n    if n == 11:\n        return 1\n    if n == 12:\n        return 1\n    if n == 13:\n        return 1\n    if n == 14:\n        return 1\n    if n == 15:\n        return 1\n    if n == 16:\n        return 1\n    if n == 17:\n        return 1\n    if n == 18:\n        return 1\n    if n == 19:\n        return 1\n"
    },
    {
        "task_id": 276,
        "prompt": "Write a python function that takes in the radius and height of a cylinder and returns the the volume.\n\ndef",
        "answer": "def cylinder(r,h):\n    return (3.14*r*h)"
    },
    {
        "task_id": 277,
        "prompt": "Write a python function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n\ndef",
        "answer": "def filter_dict(d, n):\n    return {k: v for k, v in d.items() if v >= n}"
    },
    {
        "task_id": 278,
        "prompt": "Write a python function to find the number of elements that occurs before the tuple element in the given tuple.\n\ndef",
        "answer": "def count_elements(tuple_1, tuple_2):\n    count = 0\n    for i in range(len(tuple_1)):\n        if tuple_1[i] < tuple_2[i]:\n            count += 1\n    return count"
    },
    {
        "task_id": 279,
        "prompt": "Write a python function to find the nth decagonal number.\n\ndef",
        "answer": "def find_nth_decagonal(n):\n    # Write your code here.\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 8\n    elif n == 5:\n        return 16\n    elif n == 6:\n        return 32\n    elif n == 7:\n        return 64\n    elif n == 8:\n        return 128\n    elif n == 9:\n        return 256\n    elif n == 10:\n        return 512\n    elif n == 11:\n        return 1024\n    elif n == 12:\n        return 2048\n    elif n == 13:\n        return 4096\n    elif n == 14:\n        return 8192\n    elif n == 15:\n        return 16384\n    elif n == 16:\n        return 32768\n    elif n == 17:\n        return 65536\n    elif n == 18:\n        return 131072\n    elif n == 19:\n        return"
    },
    {
        "task_id": 280,
        "prompt": "Write a python function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n\ndef",
        "answer": "def is_in_array(array, element):\n    for i in range(len(array)):\n        if array[i] == element:\n            return True\n    return False"
    },
    {
        "task_id": 281,
        "prompt": "Write a python function to check if the elements of a given list are unique or not.\n\ndef",
        "answer": "def unique(list):\n    # create a set to store unique elements\n    unique_set = set()\n    # iterate through the list\n    for i in list:\n        # if the element is not in the set, add it to the set\n        if i not in unique_set:\n            unique_set.add(i)\n    # return the unique elements\n    return unique_set"
    },
    {
        "task_id": 282,
        "prompt": "Write a python function to subtract two lists element-wise.\n\ndef",
        "answer": "def subtract(l1, l2):\n    \"\"\"\n    Subtract two lists element-wise."
    },
    {
        "task_id": 283,
        "prompt": "Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\ndef",
        "answer": "def check_digit(num):\n    digit_count = 0\n    for i in range(len(num)):\n        if num[i] == num[i+1]:\n            digit_count += 1\n    if digit_count == len(num):\n        return True\n    else:\n        return False"
    },
    {
        "task_id": 284,
        "prompt": "Write a python function that takes in a list and element and checks whether all items in the list are equal to the given element.\n\ndef",
        "answer": "def equal_to(list, element):\n    for i in list:\n        if i!= element:\n            return False\n    return True"
    },
    {
        "task_id": 285,
        "prompt": "Write a python function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n\ndef",
        "answer": "def check_a_b(string):\n    if len(string) == 3:\n        return True\n    elif len(string) == 2:\n        return True\n    else:\n        return False"
    },
    {
        "task_id": 286,
        "prompt": "Write a python function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n\ndef",
        "answer": "def findLargest(arr,k):\n    max_sum = 0\n    for i in range(k):\n        max_sum += arr[i]\n    return max_sum"
    },
    {
        "task_id": 287,
        "prompt": "Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n\ndef",
        "answer": "def sum_of_squares(n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i ** 2\n    return sum"
    },
    {
        "task_id": 290,
        "prompt": "Write a python function to find the list of maximum length in a list of lists.\n\ndef",
        "answer": "def max_len(lst):\n    max_len = 0\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len"
    },
    {
        "task_id": 291,
        "prompt": "Write a python function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\ndef",
        "answer": "def find_ways(n, k, color):\n    if n == 0 or k == 0:\n        return 0\n    if color =='red':\n        return min(find_ways(n-1, k, 'blue') + find_ways(n-1, k-1,'red') + find_ways(n-1, k-1, 'green'),\n                   find_ways(n-1, k, 'blue') + find_ways(n-1, k-1, 'green') + find_ways(n-1, k-1,'red'))\n    else:\n        return find_ways(n-1, k, 'blue') + find_ways(n-1, k-1, 'green') + find_ways(n-1, k-1,'red')"
    },
    {
        "task_id": 292,
        "prompt": "Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n\ndef",
        "answer": "def quotient(num1, num2):\n    if num1 < num2:\n        num1, num2 = num2, num1\n    if num1 % num2 == 0:\n        return num1 // num2\n    else:\n        return num1 // num2 + 1"
    },
    {
        "task_id": 293,
        "prompt": "Write a python function to find the third side of a right angled triangle.\n\ndef",
        "answer": "def third_side(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        return True\n    else:\n        return False"
    },
    {
        "task_id": 294,
        "prompt": "Write a python function to find the maximum value in a given heterogeneous list.\n\ndef",
        "answer": "def max_value(lst):\n    max_val = lst[0]\n    for i in lst:\n        if i > max_val:\n            max_val = i\n    return max_val"
    },
    {
        "task_id": 295,
        "prompt": "Write a python function to return the sum of all divisors of a number.\n\ndef",
        "answer": "def sum_divisors(n):\n    sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            sum += i\n    return sum"
    },
    {
        "task_id": 296,
        "prompt": "Write a python function to count inversions in an array.\n\ndef",
        "answer": "def countInversions(arr):\n    # Write your code here.\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if arr[i] > arr[j]:\n                count += 1\n    return count"
    },
    {
        "task_id": 297,
        "prompt": "Write a python function to flatten a given nested list structure.\n\ndef",
        "answer": "def flatten(lst):\n    # Write your code here.\n    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return lst\n    else:\n        return flatten(lst[0]) + flatten(lst[1:])"
    },
    {
        "task_id": 299,
        "prompt": "Write a python function to calculate the maximum aggregate from the list of tuples.\n\ndef",
        "answer": "def max_aggregate(tup):\n    return max(tup)"
    },
    {
        "task_id": 300,
        "prompt": "Write a python function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n\ndef",
        "answer": "def countBits(n):\n    count = 0\n    for i in range(n):\n        count += (1 << i)\n    return count"
    },
    {
        "task_id": 301,
        "prompt": "Write a python function to find the depth of a dictionary.\n\ndef",
        "answer": "def depth(d):\n    if type(d) is dict:\n        for key, value in d.items():\n            depth(value)\n    else:\n        print(d)"
    },
    {
        "task_id": 304,
        "prompt": "Write a python function to find element at a given index after number of rotations.\n\ndef",
        "answer": "def rotate(arr, n, k):\n    # Write your code here.\n    if n == 0:\n        return arr\n    if n == 1:\n        return arr[0]\n    if n == 2:\n        return arr[1]\n    if n == 3:\n        return arr[2]\n    if n == 4:\n        return arr[3]\n    if n == 5:\n        return arr[4]\n    if n == 6:\n        return arr[5]\n    if n == 7:\n        return arr[6]\n    if n == 8:\n        return arr[7]\n    if n == 9:\n        return arr[8]\n    if n == 10:\n        return arr[9]\n    if n == 11:\n        return arr[10]\n    if n == 12:\n        return arr[11]\n    if n == 13:\n        return arr[12]\n    if n == 14:\n        return arr[13]\n    if n == 15:\n        return arr[14]\n    if n == 16:\n        return arr[15"
    },
    {
        "task_id": 305,
        "prompt": "Write a python function to return two words from a list of words starting with letter 'p'.\n\ndef",
        "answer": "def p_word(p):\n    \"\"\"\n    p : word\n    \"\"\"\n    return p[0]"
    },
    {
        "task_id": 306,
        "prompt": "Write a python function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n\ndef",
        "answer": "def find_max_sum_increasing_subsequence(arr, k):\n    max_sum = 0\n    for i in range(len(arr)):\n        if arr[i] > max_sum:\n            max_sum = arr[i]\n        if i + k < len(arr):\n            if arr[i] + arr[i + k] > max_sum:\n                max_sum = arr[i] + arr[i + k]\n    return max_sum"
    },
    {
        "task_id": 307,
        "prompt": "Write a python function to get a colon of a tuple.\n\ndef",
        "answer": "def get_colon(tup):\n    return tup[1]"
    },
    {
        "task_id": 308,
        "prompt": "Write a python function to find the specified number of largest products from two given lists, selecting one factor from each list.\n\ndef",
        "answer": "def largest_product(list1, list2):\n    # Write your code here.\n    if len(list1) > len(list2):\n        return list1\n    else:\n        return list2"
    },
    {
        "task_id": 309,
        "prompt": "Write a python function to find the maximum of two numbers.\n\ndef",
        "answer": "def max_of_two(num1, num2):\n    if num1 > num2:\n        return num1\n    else:\n        return num2"
    },
    {
        "task_id": 310,
        "prompt": "Write a python function to convert a given string to a tuple of characters.\n\ndef",
        "answer": "def convert_to_tuple(string):\n    return tuple(string)"
    },
    {
        "task_id": 311,
        "prompt": "Write a python function to set the left most unset bit.\n\ndef",
        "answer": "def set_leftmost_unset_bit(data):\n    # set the left most unset bit\n    data[0] = 1\n    # set the left most unset bit\n    data[1] = 0\n    # return the data\n    return data"
    },
    {
        "task_id": 312,
        "prompt": "Write a python function to find the volume of a cone.\n\ndef",
        "answer": "def cone_volume(r, h):\n    return (4/3)*(r**3)*h"
    },
    {
        "task_id": 388,
        "prompt": "Write a python function to find the highest power of 2 that is less than or equal to n.\n\ndef",
        "answer": "def power_of_2(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return power_of_2(n-1) + power_of_2(n-2)"
    },
    {
        "task_id": 389,
        "prompt": "Write a python function to find then'th lucas number.\n\ndef",
        "answer": "def lucas(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if"
    },
    {
        "task_id": 390,
        "prompt": "Write a python function to apply a given format string to all of the elements in a list.\n\ndef",
        "answer": "def apply_format(list_of_elements, format_string):\n    for element in list_of_elements:\n        element = element.replace(format_string, \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\"\\n\", \"\")\n        element = element.replace(\"\\t\", \"\")\n        element = element.replace(\"\\r\", \"\")\n        element = element.replace(\"\\x0b\", \"\")\n        element = element.replace(\"\\x0c\", \"\")\n        element = element.replace(\"\\x0d\", \"\")\n        element = element.replace(\"\\x0e\", \"\")\n        element = element.replace(\"\\x0f\", \"\")\n        element = element.replace(\"\\x10\", \"\")\n        element = element.replace(\"\\x11\", \"\")\n        element = element.replace(\"\\x12\", \"\")\n        element = element.replace(\"\\x13\", \"\")\n        element = element.replace(\"\\x14\", \"\")\n        element = element.replace(\"\\x15\", \"\")"
    },
    {
        "task_id": 391,
        "prompt": "Write a python function to convert more than one list to nested dictionary.\n\ndef",
        "answer": "def convert_to_nested_dict(lst):\n    d = {}\n    for i in lst:\n        if type(i) == list:\n            d[i[0]] = convert_to_nested_dict(i)\n        else:\n            d[i] = i\n    return d"
    },
    {
        "task_id": 392,
        "prompt": "Write a python function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n\ndef",
        "answer": "def max_sum_possible(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 8\n    if n == 5:\n        return 16\n    if n == 6:\n        return 32\n    if n == 7:\n        return 64\n    if n == 8:\n        return 128\n    if n == 9:\n        return 256\n    if n == 10:\n        return 512\n    if n == 11:\n        return 1024\n    if n == 12:\n        return 2048\n    if n == 13:\n        return 4096\n    if n == 14:\n        return 8192\n    if n == 15:\n        return 16384\n    if n == 16:\n        return 32768\n    if n == 17:\n        return 65536\n    if n == 18:\n        return 131072\n    if n == 19:\n        return 262144\n    if n == 20:\n        return 524288\n    if n == 21:\n        return 1048"
    },
    {
        "task_id": 393,
        "prompt": "Write a python function to find the list with maximum length.\n\ndef",
        "answer": "def max_length(lst):\n    return max(lst, key=len)"
    },
    {
        "task_id": 394,
        "prompt": "Write a python function to check if given tuple contains no duplicates.\n\ndef",
        "answer": "def contains_duplicates(tuple):\n    for i in tuple:\n        if tuple.count(i) > 1:\n            return False\n    return True"
    },
    {
        "task_id": 395,
        "prompt": "Write a python function to find the first non-repeated character in a given string.\n\ndef",
        "answer": "def find_first_non_repeated_char(string):\n    # Write your code here.\n    if len(string) == 0:\n        return None\n    else:\n        for i in range(len(string)):\n            if string[i] == string[i+1]:\n                continue\n            else:\n                return string[i]"
    },
    {
        "task_id": 396,
        "prompt": "Write a python function to check whether the given string starts and ends with the same character or not.\n\ndef",
        "answer": "def is_valid(s):\n    if len(s) == 0:\n        return False\n    if len(s) == 1:\n        return True\n    if s[0]!= s[-1]:\n        return False\n    return is_valid(s[1:-1])"
    },
    {
        "task_id": 397,
        "prompt": "Write a python function to find the median of three numbers.\n\ndef",
        "answer": "def median(a,b,c):\n    if a>b and a>c:\n        return a\n    elif b>a and b>c:\n        return b\n    else:\n        return c"
    },
    {
        "task_id": 398,
        "prompt": "Write a python function to compute the sum of digits of each number of a given list.\n\ndef",
        "answer": "def sum_digits(numbers):\n    # Your code here\n    sum = 0\n    for i in numbers:\n        sum += i\n    return sum"
    },
    {
        "task_id": 399,
        "prompt": "Write a python function to perform the mathematical bitwise xor operation across the given tuples.\n\ndef",
        "answer": "def xor(a, b):\n    xor = 0\n    for i in range(len(a)):\n        xor = xor ^ a[i]\n    for i in range(len(b)):\n        xor = xor ^ b[i]\n    return xor"
    },
    {
        "task_id": 400,
        "prompt": "Write a python function to extract the number of unique tuples in the given list.\n\ndef",
        "answer": "def unique_tuple_count(lst):\n    return len(set(lst))"
    },
    {
        "task_id": 401,
        "prompt": "Write a python function to perform index wise addition of tuple elements in the given two nested tuples.\n\ndef",
        "answer": "def add_tuple(t1, t2):\n    # create a tuple of tuples\n    t1_tuple = tuple(t1)\n    t2_tuple = tuple(t2)\n    # create a new tuple of tuples\n    t1_tuple_2 = tuple(t1_tuple)\n    t2_tuple_2 = tuple(t2_tuple)\n    # create a new tuple of tuples\n    t1_tuple_3 = tuple(t1_tuple_2)\n    t2_tuple_3 = tuple(t2_tuple_2)\n    # create a new tuple of tuples\n    t1_tuple_4 = tuple(t1_tuple_3)\n    t2_tuple_4 = tuple(t2_tuple_3)\n    # create a new tuple of tuples\n    t1_tuple_5 = tuple(t1_tuple_4)\n    t2_tuple_5 = tuple(t2_tuple_4)\n    # create a new tuple of"
    },
    {
        "task_id": 404,
        "prompt": "Write a python function to find the minimum of two numbers.\n\ndef",
        "answer": "def min_num(num1, num2):\n    if num1 < num2:\n        return num1\n    else:\n        return num2"
    },
    {
        "task_id": 405,
        "prompt": "Write a python function to check whether an element exists within a tuple.\n\ndef",
        "answer": "def check_element(element, tuple):\n    for i in tuple:\n        if element in i:\n            return True\n    return False"
    },
    {
        "task_id": 406,
        "prompt": "Write a python function to find whether the parity of a given number is odd.\n\ndef",
        "answer": "def odd(num):\n    if num % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "task_id": 407,
        "prompt": "Write a python function to create the next bigger number by rearranging the digits of a given number.\n\ndef",
        "answer": "def next_bigger(n):\n    n = str(n)\n    n = n[::-1]\n    n = int(n)\n    return n"
    },
    {
        "task_id": 408,
        "prompt": "Write a python function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\ndef",
        "answer": "def find_smallest_pairs(arr1, arr2):\n    smallest_pairs = []\n    for i in range(len(arr1)):\n        for j in range(len(arr2)):\n            if arr1[i] == arr2[j]:\n                smallest_pairs.append([arr1[i], arr2[j]])\n    return smallest_pairs"
    },
    {
        "task_id": 409,
        "prompt": "Write a python function to find the minimum product from the pairs of tuples within a given list.\n\ndef",
        "answer": "def min_product(lst):\n    min_product = lst[0][0] * lst[1][1]\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            if i == j:\n                continue\n            min_product = min(min_product, lst[i][0] * lst[j][1])\n    return min_product"
    },
    {
        "task_id": 410,
        "prompt": "Write a python function to find the minimum value in a given heterogeneous list.\n\ndef",
        "answer": "def min_value(list):\n    min_val = list[0]\n    for i in range(len(list)):\n        if list[i] < min_val:\n            min_val = list[i]\n    return min_val"
    },
    {
        "task_id": 411,
        "prompt": "Write a python function to convert the given snake case string to camel case string.\n\ndef",
        "answer": "def snake_case_to_camel_case(snake_case_string):\n    # your code goes here\n    return snake_case_string.lower()"
    },
    {
        "task_id": 412,
        "prompt": "Write a python function to remove odd numbers from a given list.\n\ndef",
        "answer": "def odd_list(lst):\n    for i in range(len(lst)):\n        if lst[i] % 2!= 0:\n            lst.remove(lst[i])\n    return lst"
    },
    {
        "task_id": 413,
        "prompt": "Write a python function to extract the nth element from a given list of tuples.\n\ndef",
        "answer": "def extract_nth(lst, n):\n    return lst[n]"
    },
    {
        "task_id": 414,
        "prompt": "Write a python function to check whether any value in a sequence exists in a sequence or not.\n\ndef",
        "answer": "def check_sequence(seq):\n    for i in seq:\n        if i not in seq:\n            return False\n    return True"
    },
    {
        "task_id": 415,
        "prompt": "Write a python function to find a pair with highest product from a given array of integers.\n\ndef",
        "answer": "def find_pair(arr, n):\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] * arr[j] > arr[i] * arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n    return arr"
    },
    {
        "task_id": 417,
        "prompt": "Write a python function to find common first element in given list of tuple.\n\ndef",
        "answer": "def common_first(tup):\n    return tup[0]"
    },
    {
        "task_id": 418,
        "prompt": "Write a python function to find the element of a list having maximum length.\n\ndef",
        "answer": "def max_len(lst):\n    max_len = 0\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len"
    },
    {
        "task_id": 419,
        "prompt": "Write a python function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n\ndef",
        "answer": "def round_numbers(numbers):\n    total = 0\n    for number in numbers:\n        total += number\n    return total"
    },
    {
        "task_id": 420,
        "prompt": "Write a python function to find the cube sum of first n even natural numbers.\n\ndef",
        "answer": "def cube_sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum"
    },
    {
        "task_id": 421,
        "prompt": "Write a python function to concatenate each element of tuple by the delimiter.\n\ndef",
        "answer": "def concat_tuple(tuple_1, tuple_2):\n    return tuple_1 + tuple_2"
    },
    {
        "task_id": 422,
        "prompt": "Write a python function to find the average of cubes of first n natural numbers.\n\ndef",
        "answer": "def cube_avg(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum/n"
    },
    {
        "task_id": 424,
        "prompt": "Write a python function to extract only the rear index element of each string in the given tuple.\n\ndef",
        "answer": "def extract_rear_index(tuple):\n    return tuple[-1]"
    },
    {
        "task_id": 425,
        "prompt": "Write a python function to count the number of sublists containing a particular element.\n\ndef",
        "answer": "def count_sublists(lst, element):\n    count = 0\n    for i in lst:\n        if i == element:\n            count += 1\n    return count"
    },
    {
        "task_id": 426,
        "prompt": "Write a python function to filter odd numbers.\n\ndef",
        "answer": "def odd_filter(numbers):\n    odd_numbers = []\n    for number in numbers:\n        if number % 2 == 1:\n            odd_numbers.append(number)\n    return odd_numbers"
    },
    {
        "task_id": 427,
        "prompt": "Write a python function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n\ndef",
        "answer": "def date_convert(date):\n    date = date.split('-')\n    date[2] = date[2].split('.')\n    date[2] = date[2][0]\n    date[2] = date[2][2]\n    date[2] = date[2][:2]\n    date[2] = date[2][:2]\n    date[2] = date[2][:2]\n    date[2] = date[2][:2]\n    date[2] = date[2][:2]\n    date[2] = date[2][:2]\n    date[2] = date[2][:2]\n    date[2] = date[2][:2]\n    date[2] = date[2][:2]\n    date[2] = date[2][:2]\n    date[2] = date[2][:2]\n    date[2] = date[2][:2]\n    date[2] = date[2][:2]\n    date[2] = date[2"
    },
    {
        "task_id": 428,
        "prompt": "Write a python function to sort the given array by using shell sort.\n\ndef",
        "answer": "def shellSort(arr):\n    n = len(arr)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n    return arr"
    },
    {
        "task_id": 429,
        "prompt": "Write a python function to extract the elementwise and tuples from the given two tuples.\n\ndef",
        "answer": "def extract_tuples(tup1, tup2):\n    return tup1 + tup2"
    },
    {
        "task_id": 430,
        "prompt": "Write a python function to find the directrix of a parabola.\n\ndef",
        "answer": "def find_parabola(x, y):\n    \"\"\"\n    Find the directrix of a parabola."
    },
    {
        "task_id": 431,
        "prompt": "Write a python function that takes two lists and returns true if they have at least one common element.\n\ndef",
        "answer": "def common_elements(list1, list2):\n    # Write your code here.\n    if len(list1) == len(list2):\n        for i in list1:\n            if i in list2:\n                list2.remove(i)\n        return len(list2) > 0\n    else:\n        return False"
    },
    {
        "task_id": 432,
        "prompt": "Write a python function to find the median length of a trapezium.\n\ndef",
        "answer": "def trapezium(a,b,n):\n    return (a+b)/2*n"
    },
    {
        "task_id": 433,
        "prompt": "Write a python function to check whether the entered number is greater than the elements of the given array.\n\ndef",
        "answer": "def greater(arr,n):\n    for i in range(n):\n        if arr[i] > arr[i+1]:\n            return True\n    return False"
    },
    {
        "task_id": 434,
        "prompt": "Write a python function that matches a string that has an a followed by one or more b's.\n\ndef",
        "answer": "def match_a_b(string):\n    return string.find('a')!= -1 or string.find('b')!= -1"
    },
    {
        "task_id": 435,
        "prompt": "Write a python function to find the last digit of a given number.\n\ndef",
        "answer": "def lastDigit(n):\n    if n < 10:\n        return n\n    else:\n        return n % 10"
    },
    {
        "task_id": 436,
        "prompt": "Write a python function to return the negative numbers in a list.\n\ndef",
        "answer": "def negative_numbers(numbers):\n    negative_numbers = []\n    for number in numbers:\n        if number < 0:\n            negative_numbers.append(number)\n    return negative_numbers"
    },
    {
        "task_id": 437,
        "prompt": "Write a python function to remove odd characters in a string.\n\ndef",
        "answer": "def odd_char(string):\n    # your code goes here\n    return string.replace(string[::2], \"\")"
    },
    {
        "task_id": 438,
        "prompt": "Write a python function to count bidirectional tuple pairs.\n\ndef",
        "answer": "def count_bidirectional_tuple_pairs(tup1, tup2):\n    \"\"\"\n    Counts the number of bidirectional tuple pairs in a tuple."
    },
    {
        "task_id": 439,
        "prompt": "Write a python function to join a list of multiple integers into a single integer.\n\ndef",
        "answer": "def join_list(lst):\n    return sum(lst)"
    },
    {
        "task_id": 440,
        "prompt": "Write a python function to find the first adverb and their positions in a given sentence.\n\ndef",
        "answer": "def find_adverb(sentence):\n    adverb_list = []\n    for i in range(len(sentence)):\n        if sentence[i] == 'a' or sentence[i] == 'e' or sentence[i] == 'i' or sentence[i] == 'o' or sentence[i] == 'u' or sentence[i] == 'y' or sentence[i] == 'u' or sentence[i] == 'e' or sentence[i] == 'o' or sentence[i] == 'u' or sentence[i] == 'y':\n            adverb_list.append(i)\n    return adverb_list"
    },
    {
        "task_id": 441,
        "prompt": "Write a python function to find the surface area of a cube of a given size.\n\ndef",
        "answer": "def cubeArea(size):\n    return (size**3)*(3.14)"
    },
    {
        "task_id": 442,
        "prompt": "Write a python function to find the ration of positive numbers in an array of integers.\n\ndef",
        "answer": "def ration(arr):\n    # Write your code here\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            count += 1\n    return count/len(arr)"
    },
    {
        "task_id": 443,
        "prompt": "Write a python function to find the largest negative number from the given list.\n\ndef",
        "answer": "def largest_negative(nums):\n    # Write your code here.\n    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if nums[0] < nums[1]:\n        return nums[0]\n    return nums[1]"
    },
    {
        "task_id": 444,
        "prompt": "Write a python function to trim each tuple by k in the given tuple list.\n\ndef",
        "answer": "def trim_tuple(tuple_list):\n    for i in range(len(tuple_list)):\n        for j in range(len(tuple_list[i])):\n            tuple_list[i][j] = tuple_list[i][j][:k]\n    return tuple_list"
    },
    {
        "task_id": 445,
        "prompt": "Write a python function to perform index wise multiplication of tuple elements in the given two tuples.\n\ndef",
        "answer": "def mult(t1, t2):\n    # create a tuple of tuples\n    t3 = (t1[0], t1[1], t1[2])\n    # create a tuple of tuples\n    t4 = (t2[0], t2[1], t2[2])\n    # create a tuple of tuples\n    t5 = (t3[0], t3[1], t3[2])\n    # create a tuple of tuples\n    t6 = (t4[0], t4[1], t4[2])\n    # create a tuple of tuples\n    t7 = (t5[0], t5[1], t5[2])\n    # create a tuple of tuples\n    t8 = (t6[0], t6[1], t6[2])\n    # create a tuple of tuples\n    t9 = (t7[0], t7[1], t7[2])\n    # create a tuple of tuples\n    t10 = (t8[0], t8[1], t8[2])\n    "
    },
    {
        "task_id": 446,
        "prompt": "Write a python function to count the occurence of all elements of list in a tuple.\n\ndef",
        "answer": "def countOccurence(tuple):\n    count = 0\n    for i in tuple:\n        count += 1\n    return count"
    },
    {
        "task_id": 447,
        "prompt": "Write a python function to find cubes of individual elements in a list.\n\ndef",
        "answer": "def cube(n):\n    return n*n*n"
    },
    {
        "task_id": 448,
        "prompt": "Write a python function to calculate the sum of perrin numbers.\n\ndef",
        "answer": "def sum_numbers(numbers):\n    total = 0\n    for number in numbers:\n        total += number\n    return total"
    },
    {
        "task_id": 450,
        "prompt": "Write a python function to extract specified size of strings from a given list of string values.\n\ndef",
        "answer": "def extract_size(list_of_strings, size):\n    \"\"\"\n    Extracts the specified size of strings from a given list of strings.\n    :param list_of_strings: List of strings.\n    :param size: Specifies the size of the string to extract.\n    :return: List of strings.\n    \"\"\"\n    return [string[size:] for string in list_of_strings]"
    },
    {
        "task_id": 451,
        "prompt": "Write a python function to remove all whitespaces from the given string.\n\ndef",
        "answer": "def remove_whitespaces(string):\n    return string.replace(' ', '')"
    },
    {
        "task_id": 452,
        "prompt": "Write a python function that gives loss amount on a sale if the given amount has loss else return 0.\n\ndef",
        "answer": "def sale(amount, loss):\n    if amount <= loss:\n        return 0\n    else:\n        return amount - loss"
    },
    {
        "task_id": 453,
        "prompt": "Write a python function to find the sum of even factors of a number.\n\ndef",
        "answer": "def even_factors(num):\n    factors = []\n    for i in range(1, num + 1):\n        if num % i == 0:\n            factors.append(i)\n    return sum(factors)"
    },
    {
        "task_id": 454,
        "prompt": "Write a python function that matches a word containing 'z'.\n\ndef",
        "answer": "def z_match(word):\n    return word.lower() == 'z'"
    },
    {
        "task_id": 455,
        "prompt": "Write a python function to check whether the given month number contains 31 days or not.\n\ndef",
        "answer": "def is_leap_year(year):\n    if year % 4 == 0:\n        if year % 100 == 0:\n            if year % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False"
    },
    {
        "task_id": 456,
        "prompt": "Write a python function to reverse each string in a given list of string values.\n\ndef",
        "answer": "def reverse_string(list_of_strings):\n    for i in range(len(list_of_strings)):\n        list_of_strings[i] = list_of_strings[i][::-1]\n    return list_of_strings"
    },
    {
        "task_id": 457,
        "prompt": "Write a python function to find the sublist having minimum length.\n\ndef",
        "answer": "def minimumLength(arr, n):\n    # Write your code here.\n    if n == 0:\n        return []\n    if n == 1:\n        return [arr[0]]\n    if n == 2:\n        return [arr[0], arr[1]]\n    if n == 3:\n        return [arr[0], arr[1], arr[2]]\n    if n == 4:\n        return [arr[0], arr[1], arr[2], arr[3]]\n    if n == 5:\n        return [arr[0], arr[1], arr[2], arr[3], arr[4]]\n    if n == 6:\n        return [arr[0], arr[1], arr[2], arr[3], arr[4], arr[5]]\n    if n == 7:\n        return [arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6]]\n    if n == 8:\n        return [arr[0], arr[1], arr[2], arr[3], arr[4], arr[5],"
    },
    {
        "task_id": 458,
        "prompt": "Write a python function to find the area of a rectangle.\n\ndef",
        "answer": "def rectangle_area(length, width):\n    return length * width"
    },
    {
        "task_id": 459,
        "prompt": "Write a python function to remove uppercase substrings from a given string.\n\ndef",
        "answer": "def remove_uppercase(string):\n    return string.upper()"
    },
    {
        "task_id": 460,
        "prompt": "Write a python function to get the first element of each sublist.\n\ndef",
        "answer": "def first(lst):\n    return lst[0]"
    },
    {
        "task_id": 461,
        "prompt": "Write a python function to count the upper case characters in a given string.\n\ndef",
        "answer": "def upper_case(str):\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count"
    },
    {
        "task_id": 462,
        "prompt": "Write a python function to find all possible combinations of the elements of a given list.\n\ndef",
        "answer": "def combinations(lst, n):\n    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return [lst]\n    else:\n        return [lst[0] + combinations(lst[1:], n)]"
    },
    {
        "task_id": 463,
        "prompt": "Write a python function to find the maximum product subarray of the given array.\n\ndef",
        "answer": "def max_subarray(arr):\n    max_subarray = arr[0]\n    for i in range(1, len(arr)):\n        max_subarray = max(max_subarray, arr[i])\n    return max_subarray"
    },
    {
        "task_id": 464,
        "prompt": "Write a python function to check if all values are same in a dictionary.\n\ndef",
        "answer": "def same_values(d):\n    for key in d:\n        if d[key]!= d[key]:\n            return False\n    return True"
    },
    {
        "task_id": 465,
        "prompt": "Write a python function to drop empty items from a given dictionary.\n\ndef",
        "answer": "def drop_empty(dictionary):\n    for key in dictionary:\n        if dictionary[key] == []:\n            del dictionary[key]\n    return dictionary"
    },
    {
        "task_id": 468,
        "prompt": "Write a python function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\ndef",
        "answer": "def findMaxProduct(arr):\n    # Write your code here.\n    max_product = arr[0]\n    for i in range(1, len(arr)):\n        max_product = max(max_product * arr[i], arr[i])\n    return max_product"
    },
    {
        "task_id": 470,
        "prompt": "Write a python function to find the pairwise addition of the neighboring elements of the given tuple.\n\ndef",
        "answer": "def find_pairwise_addition(tuple):\n    # create a list of all the elements in the tuple\n    list_of_elements = tuple\n    # create a list of all the elements in the tuple\n    list_of_elements_2 = []\n    # create a list of all the elements in the tuple\n    list_of_elements_3 = []\n    # create a list of all the elements in the tuple\n    list_of_elements_4 = []\n    # create a list of all the elements in the tuple\n    list_of_elements_5 = []\n    # create a list of all the elements in the tuple\n    list_of_elements_6 = []\n    # create a list of all the elements in the tuple\n    list_of_elements_7 = []\n    # create a list of all the elements in the tuple\n    list_of_elements_8 = []\n    # create a list of all the elements in the tuple\n    list_of_elements_9 = []\n    # create a list of all the elements in the tuple\n    list"
    },
    {
        "task_id": 471,
        "prompt": "Write a python function to find the product of the array multiplication modulo n.\n\ndef",
        "answer": "def product_modulo(arr, n):\n    # Write your code here.\n    product = 1\n    for i in range(len(arr)):\n        product *= arr[i]\n    return product % n"
    },
    {
        "task_id": 472,
        "prompt": "Write a python function to check whether the given list contains consecutive numbers or not.\n\ndef",
        "answer": "def consecutive_numbers(lst):\n    # Write your code here\n    count = 0\n    for i in lst:\n        if i % 10 == 0:\n            count += 1\n    if count == len(lst):\n        return True\n    else:\n        return False"
    },
    {
        "task_id": 473,
        "prompt": "Write a python function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n\ndef",
        "answer": "def find_intersection(tuple_list):\n    intersection = []\n    for i in range(len(tuple_list)):\n        for j in range(i+1, len(tuple_list)):\n            if tuple_list[i] in tuple_list[j]:\n                intersection.append(tuple_list[i])\n    return intersection"
    },
    {
        "task_id": 474,
        "prompt": "Write a python function to replace characters in a string.\n\ndef",
        "answer": "def replace(string, old, new):\n    return string.replace(old, new)"
    },
    {
        "task_id": 475,
        "prompt": "Write a python function to sort a dictionary by value.\n\ndef",
        "answer": "def sort_dict(d):\n    for key, value in d.items():\n        if type(value) == dict:\n            d[key] = sort_dict(value)\n        else:\n            d[key] = value\n    return d"
    },
    {
        "task_id": 476,
        "prompt": "Write a python function to find the sum of the largest and smallest value in a given array.\n\ndef",
        "answer": "def largest_and_smallest(arr):\n    largest = 0\n    smallest = 0\n    for i in range(len(arr)):\n        if arr[i] > largest:\n            largest = arr[i]\n        if arr[i] < smallest:\n            smallest = arr[i]\n    return largest, smallest"
    },
    {
        "task_id": 477,
        "prompt": "Write a python function to convert the given string to lower case.\n\ndef",
        "answer": "def lower(s):\n    return s.lower()"
    },
    {
        "task_id": 478,
        "prompt": "Write a python function to remove lowercase substrings from a given string.\n\ndef",
        "answer": "def remove_lowercase_substring(string):\n    # Write your code here.\n    lowercase_substring = string.lower()\n    return lowercase_substring.replace('a', '').replace('b', '').replace('c', '').replace('d', '').replace('e', '').replace('f', '').replace('g', '').replace('h', '').replace('i', '').replace('j', '').replace('k', '').replace('l', '').replace('m', '').replace('n', '').replace('o', '').replace('p', '').replace('q', '').replace('r', '').replace('s', '').replace('t', '').replace('u', '').replace('v', '').replace('w', '').replace('x', '').replace('y', '').replace('z', '').replace('A', '').replace('B', '').replace('C', '').replace('D', '').replace('E', '').replace('F', '').replace('G', '').replace('H', '').replace('I', '').replace"
    },
    {
        "task_id": 479,
        "prompt": "Write a python function to find the first digit of a given number.\n\ndef",
        "answer": "def find_first_digit(number):\n    if number < 10:\n        return number\n    else:\n        return number % 10"
    },
    {
        "task_id": 554,
        "prompt": "Write a python function which takes a list of integers and only returns the odd ones.\n\ndef",
        "answer": "def odd_list(lst):\n    odd_list = []\n    for i in lst:\n        if i % 2!= 0:\n            odd_list.append(i)\n    return odd_list"
    },
    {
        "task_id": 555,
        "prompt": "Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n\ndef",
        "answer": "def sum_cubes(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum"
    },
    {
        "task_id": 556,
        "prompt": "Write a python function to count the number of pairs whose xor value is odd.\n\ndef",
        "answer": "def odd_count(x):\n    count = 0\n    for i in range(len(x)):\n        for j in range(i+1, len(x)):\n            if x[i] ^ x[j] == 0:\n                count += 1\n    return count"
    },
    {
        "task_id": 557,
        "prompt": "Write a python function to toggle the case of all characters in a string.\n\ndef",
        "answer": "def toggle_case(s):\n    # your code goes here\n    return s.upper()"
    },
    {
        "task_id": 558,
        "prompt": "Write a python function to find the sum of the per-digit difference between two integers.\n\ndef",
        "answer": "def diff(x, y):\n    return abs(x - y)"
    },
    {
        "task_id": 559,
        "prompt": "Write a python function to find the sum of the largest contiguous sublist in the given list.\n\ndef",
        "answer": "def largest_sublist(lst):\n    # Write your code here.\n    if len(lst) == 0:\n        return 0\n    if len(lst) == 1:\n        return lst[0]\n    if len(lst) == 2:\n        return max(lst[0], lst[1])\n    if len(lst) == 3:\n        return max(lst[0], lst[1], lst[2])\n    if len(lst) == 4:\n        return max(lst[0], lst[1], lst[2], lst[3])\n    if len(lst) == 5:\n        return max(lst[0], lst[1], lst[2], lst[3], lst[4])\n    if len(lst) == 6:\n        return max(lst[0], lst[1], lst[2], lst[3], lst[4], lst[5])\n    if len(lst) == 7:\n        return max(lst[0"
    },
    {
        "task_id": 560,
        "prompt": "Write a python function to find the union of the elements of two given tuples and output them in sorted order.\n\ndef",
        "answer": "def union(a, b):\n    a = set(a)\n    b = set(b)\n    return a | b"
    },
    {
        "task_id": 562,
        "prompt": "Write a python function to find the length of the longest sublists.\n\ndef",
        "answer": "def longest_sublist(arr):\n    longest_sublist = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if arr[i] == arr[j]:\n                longest_sublist = max(longest_sublist, len(arr[i:j+1]))\n    return longest_sublist"
    },
    {
        "task_id": 563,
        "prompt": "Write a python function to extract values between quotation marks from a string.\n\ndef",
        "answer": "def extract_quotation_marks(text):\n    \"\"\"\n    Extracts values between quotation marks from a string.\n    \"\"\"\n    return text.replace('\"', '\"').replace(\"'\", '\"')"
    },
    {
        "task_id": 564,
        "prompt": "Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n\ndef",
        "answer": "def unordered_pairs(lst):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i]!= lst[j]:\n                count += 1\n    return count"
    },
    {
        "task_id": 565,
        "prompt": "Write a python function to split a string into characters.\n\ndef",
        "answer": "def split_string(string):\n    # your code goes here\n    return string.split()"
    },
    {
        "task_id": 566,
        "prompt": "Write a python function to get the sum of the digits of a non-negative integer.\n\ndef",
        "answer": "def get_sum_of_digits(num):\n    sum = 0\n    while num > 0:\n        sum += num % 10\n        num = num // 10\n    return sum"
    },
    {
        "task_id": 567,
        "prompt": "Write a python function to check whether a specified list is sorted or not.\n\ndef",
        "answer": "def isSorted(lst):\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True"
    },
    {
        "task_id": 568,
        "prompt": "Write a python function to create a list of N empty dictionaries.\n\ndef",
        "answer": "def create_dictionaries(filename):\n    \"\"\"\n    This function takes a filename as an argument and returns a list of dictionaries.\n    \"\"\"\n    dictionaries = []\n    with open(filename, 'r') as f:\n        for line in f:\n            if line.strip()!= '':\n                dictionaries.append(dict(line.split(':')))\n    return dictionaries"
    },
    {
        "task_id": 569,
        "prompt": "Write a python function to sort each sublist of strings in a given list of lists.\n\ndef",
        "answer": "def sort_list(list_of_lists):\n    for i in range(len(list_of_lists)):\n        for j in range(len(list_of_lists[i])):\n            list_of_lists[i][j] = list_of_lists[i][j].lower()\n    return list_of_lists"
    },
    {
        "task_id": 572,
        "prompt": "Write a python function to remove duplicate numbers from a given number of lists.\n\ndef",
        "answer": "def removeDuplicates(nums):\n    nums.sort()\n    i = 0\n    while i < len(nums):\n        if nums[i] == nums[i+1]:\n            nums.pop(i+1)\n        else:\n            i += 1\n    return nums"
    },
    {
        "task_id": 573,
        "prompt": "Write a python function to calculate the product of the unique numbers in a given list.\n\ndef",
        "answer": "def product(lst):\n    # lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    # lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    # lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    # lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    # lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    # lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    # lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    # lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    # lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    "
    },
    {
        "task_id": 574,
        "prompt": "Write a python function to find the surface area of a cylinder.\n\ndef",
        "answer": "def surfaceArea(radius, height):\n    return (3.14 * radius * height)"
    },
    {
        "task_id": 576,
        "prompt": "Write a python function to check whether a list is sublist of another or not.\n\ndef",
        "answer": "def isSublist(list1, list2):\n    if list1 == list2:\n        return True\n    else:\n        return False"
    },
    {
        "task_id": 577,
        "prompt": "Write a python function to find the last digit in factorial of a given number.\n\ndef",
        "answer": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)"
    },
    {
        "task_id": 578,
        "prompt": "Write a python function to interleave 3 lists of the same length into a single flat list.\n\ndef",
        "answer": "def interleave(l1, l2, l3):\n    return [l1[i] + l2[i] + l3[i] for i in range(len(l1))]"
    },
    {
        "task_id": 579,
        "prompt": "Write a python function to find the dissimilar elements in the given two tuples.\n\ndef",
        "answer": "def find_dissimilar(tuples):\n    dissimilar = []\n    for i in range(len(tuples)):\n        for j in range(i+1, len(tuples)):\n            if tuples[i]!= tuples[j]:\n                dissimilar.append(tuples[i])\n    return dissimilar"
    },
    {
        "task_id": 580,
        "prompt": "Write a python function to remove uneven elements in the nested mixed tuple.\n\ndef",
        "answer": "def uneven_elements(tup):\n    # your code goes here\n    return tup[0]"
    },
    {
        "task_id": 581,
        "prompt": "Write a python function to find the surface area of a square pyramid with a given base edge and height.\n\ndef",
        "answer": "def square_pyramid(base_edge, height):\n    # Write your code here.\n    return base_edge * height"
    },
    {
        "task_id": 582,
        "prompt": "Write a python function to check if a dictionary is empty\n\ndef",
        "answer": "def empty(d):\n    if d == {}:\n        return True\n    else:\n        return False"
    },
    {
        "task_id": 583,
        "prompt": "Write a python function which returns nth catalan number.\n\ndef",
        "answer": "def catalan(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan(n-1) + catalan(n-2)"
    },
    {
        "task_id": 584,
        "prompt": "Write a python function to find the first adverb ending with ly and its positions in a given string.\n\ndef",
        "answer": "def find_adverb(string):\n    # Write your code here.\n    adverb_list = []\n    for i in range(len(string)):\n        if string[i] == 'a' or string[i] == 'e' or string[i] == 'i' or string[i] == 'o' or string[i] == 'u':\n            adverb_list.append(string[i])\n    adverb_list.sort()\n    return adverb_list[0]"
    },
    {
        "task_id": 585,
        "prompt": "Write a python function to find the n most expensive items in a given dataset.\n\ndef",
        "answer": "def find_n_most_expensive_items(dataset, n):\n    \"\"\"\n    Find the n most expensive items in a given dataset.\n    :param dataset: a list of dictionaries\n    :param n: the number of most expensive items to return\n    :return: a list of dictionaries, with the n most expensive items\n    \"\"\"\n    return sorted(dataset, key=lambda item: item['price'], reverse=True)[:n]"
    },
    {
        "task_id": 586,
        "prompt": "Write a python function to split a list at the nth eelment and add the first part to the end.\n\ndef",
        "answer": "def split_list(lst, n):\n    return lst[n:] + lst[:n]"
    },
    {
        "task_id": 587,
        "prompt": "Write a python function to convert a list to a tuple.\n\ndef",
        "answer": "def list_to_tuple(lst):\n    return tuple(lst)"
    },
    {
        "task_id": 588,
        "prompt": "Write a python function to find the difference between largest and smallest value in a given list.\n\ndef",
        "answer": "def find_diff(lst):\n    # lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    # lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    # lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    # lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    # lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    # lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    # lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    # lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    # lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
    },
    {
        "task_id": 589,
        "prompt": "Write a python function to find perfect squares between two given numbers.\n\ndef",
        "answer": "def perfect_squares(a, b):\n    if a == b:\n        return True\n    if a % b == 0:\n        return True\n    else:\n        return False"
    },
    {
        "task_id": 590,
        "prompt": "Write a python function to convert polar coordinates to rectangular coordinates.\n\ndef",
        "answer": "def polar_to_rect(r, theta):\n    \"\"\"Convert polar coordinates to rectangular coordinates."
    },
    {
        "task_id": 591,
        "prompt": "Write a python function to interchange the first and last elements in a list.\n\ndef",
        "answer": "def interchange(lst):\n    lst[0], lst[-1] = lst[-1], lst[0]\n    return lst"
    },
    {
        "task_id": 592,
        "prompt": "Write a python function to find the sum of the product of consecutive binomial co-efficients.\n\ndef",
        "answer": "def coeff_sum(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return coeff_sum(n-1) * n"
    },
    {
        "task_id": 593,
        "prompt": "Write a python function to remove leading zeroes from an ip address.\n\ndef",
        "answer": "def remove_leading_zeroes(ip):\n    # Write your code here.\n    if ip.startswith('0.'):\n        return ip[1:]\n    else:\n        return ip"
    },
    {
        "task_id": 594,
        "prompt": "Write a python function to find the difference of the first even and first odd number of a given list.\n\ndef",
        "answer": "def first_odd_even(lst):\n    even_odd = []\n    odd_even = []\n    for i in lst:\n        if i % 2 == 0:\n            even_odd.append(i)\n        else:\n            odd_even.append(i)\n    return even_odd, odd_even"
    },
    {
        "task_id": 595,
        "prompt": "Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\ndef",
        "answer": "def count_swaps(binary_string):\n    count = 0\n    for i in range(len(binary_string)):\n        if binary_string[i] == '1':\n            binary_string[i] = '0'\n        else:\n            binary_string[i] = '1'\n        count += 1\n    return count"
    },
    {
        "task_id": 596,
        "prompt": "Write a python function to find the size in bytes of the given tuple.\n\ndef",
        "answer": "def size_of_tuple(t):\n    return len(t)"
    },
    {
        "task_id": 597,
        "prompt": "Write a python function to find kth element from the given two sorted arrays.\n\ndef",
        "answer": "def kth_element(arr1, arr2, k):\n    if len(arr1) < len(arr2):\n        return kth_element(arr2, arr1, k)\n    if len(arr1) == len(arr2):\n        if arr1[k-1] > arr2[k-1]:\n            return arr1[k-1]\n        else:\n            return arr2[k-1]\n    else:\n        return kth_element(arr1[:k], arr2[:k], k)"
    },
    {
        "task_id": 598,
        "prompt": "Write a python function to check whether the given number is armstrong or not.\n\ndef",
        "answer": "def isArmstrong(num):\n    sum = 0\n    for i in range(1, num):\n        if num % i == 0:\n            sum += i\n    if sum == num:\n        return True\n    else:\n        return False"
    },
    {
        "task_id": 599,
        "prompt": "Write a python function to find sum and average of first n natural numbers.\n\ndef",
        "answer": "def sum_n(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum"
    },
    {
        "task_id": 600,
        "prompt": "Write a python function to check whether the given number is even or not.\n\ndef",
        "answer": "def even_check(num):\n    if num % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "task_id": 602,
        "prompt": "Write a python function to find the first repeated character in a given string.\n\ndef",
        "answer": "def find_first_repeated_char(string):\n    # Write your code here.\n    if len(string) == 0:\n        return -1\n    if string[0] == string[0]:\n        return 0\n    for i in range(1, len(string)):\n        if string[i] == string[i-1]:\n            return i\n    return -1"
    },
    {
        "task_id": 603,
        "prompt": "Write a python function to get all lucid numbers smaller than or equal to a given integer.\n\ndef",
        "answer": "def lucas_numbers(num):\n    lucas_numbers = []\n    for i in range(1, num + 1):\n        if i < 10:\n            lucas_numbers.append(i)\n        else:\n            lucas_numbers.append(i ** 2)\n    return lucas_numbers"
    },
    {
        "task_id": 604,
        "prompt": "Write a python function to reverse words seperated by spaces in a given string.\n\ndef",
        "answer": "def reverseWords(string):\n    # Write your code here.\n    string = string.split()\n    string = string[::-1]\n    return''.join(string)"
    },
    {
        "task_id": 605,
        "prompt": "Write a python function to check if the given integer is a prime number.\n\ndef",
        "answer": "def is_prime(n):\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    for i in range(5, int(math.sqrt(n)) + 1, 6):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "task_id": 606,
        "prompt": "Write a python function to convert degrees to radians.\n\ndef",
        "answer": "def convert_degrees(degrees):\n    radians = degrees * (math.pi / 180)\n    return radians"
    },
    {
        "task_id": 607,
        "prompt": "Write a python function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n\ndef",
        "answer": "def search_regex(string, pattern):\n    start = 0\n    end = len(string)\n    while start < end:\n        mid = (start + end) // 2\n        if string[mid] == pattern:\n            return mid\n        elif string[mid] < pattern:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return -1"
    },
    {
        "task_id": 608,
        "prompt": "Write a python function to find nth bell number.\n\ndef",
        "answer": "def find_nth_bell(n):\n    # Write your code here.\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    elif n == 4:\n        return 3\n    elif n == 5:\n        return 4\n    elif n == 6:\n        return 5\n    elif n == 7:\n        return 6\n    elif n == 8:\n        return 7\n    elif n == 9:\n        return 8\n    elif n == 10:\n        return 9\n    elif n == 11:\n        return 10\n    elif n == 12:\n        return 11\n    elif n == 13:\n        return 12\n    elif n == 14:\n        return 13\n    elif n == 15:\n        return 14\n    elif n == 16:\n        return 15\n    elif n == 17:\n        return 16\n    elif n == 18:\n        return 17\n    elif n == 19:\n        return 18\n    elif n =="
    },
    {
        "task_id": 610,
        "prompt": "Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n\ndef",
        "answer": "def remove_kth_elem(lst, k):\n    return lst[:k] + lst[k+1:]"
    },
    {
        "task_id": 611,
        "prompt": "Write a python function which given a matrix represented as a list of lists returns the max of then'th column.\n\ndef",
        "answer": "def max_column(matrix):\n    # Write your code here\n    return max(map(lambda x: x[-1], matrix))"
    },
    {
        "task_id": 612,
        "prompt": "Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n\ndef",
        "answer": "def list_to_two_lists(l):\n    return [l[0], l[1]]"
    },
    {
        "task_id": 614,
        "prompt": "Write a python function to find the cumulative sum of all the values that are present in the given tuple list.\n\ndef",
        "answer": "def cumulative_sum(tuple_list):\n    # Write your code here.\n    sum = 0\n    for i in tuple_list:\n        sum += i\n    return sum"
    },
    {
        "task_id": 615,
        "prompt": "Write a python function which takes a tuple of tuples and returns the average value for each tuple as a list.\n\ndef",
        "answer": "def avg_list(tuple):\n    return [sum(t) / len(t) for t in zip(*tuple)]"
    },
    {
        "task_id": 616,
        "prompt": "Write a python function which takes two tuples of the same length and performs the element wise modulo.\n\ndef",
        "answer": "def modulo(tup1, tup2):\n    return tuple(map(lambda x, y: x % y, tup1, tup2))"
    },
    {
        "task_id": 617,
        "prompt": "Write a python function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n\ndef",
        "answer": "def check_jumps(d, origin, destination):\n    # Check if the destination is in the plane\n    if destination[0] == origin[0] and destination[1] == origin[1]:\n        return 0\n    # Check if the destination is in the plane\n    if destination[0] == origin[0] and destination[1]!= origin[1]:\n        return -1\n    # Check if the destination is in the plane\n    if destination[0]!= origin[0] and destination[1] == origin[1]:\n        return -1\n    # Check if the destination is in the plane\n    if destination[0]!= origin[0] and destination[1]!= origin[1]:\n        return -1\n    # Check if the destination is in the plane\n    if destination[0]!= origin[0] and destination[1]!= origin[1]:\n        return -1\n    # Check if the destination is in the plane\n    if destination[0]!= origin[0] and destination[1]!= origin[1]:\n        return -1\n    # Check if the destination is in the plane\n"
    },
    {
        "task_id": 618,
        "prompt": "Write a python function to divide two lists element wise.\n\ndef",
        "answer": "def divide(l1, l2):\n    # l1 = [1, 2, 3, 4, 5]\n    # l2 = [1, 2, 3, 4, 5]\n    # l1 = [1, 2, 3, 4, 5]\n    # l2 = [1, 2, 3, 4, 5]\n    # l1 = [1, 2, 3, 4, 5]\n    # l2 = [1, 2, 3, 4, 5]\n    # l1 = [1, 2, 3, 4, 5]\n    # l2 = [1, 2, 3, 4, 5]\n    # l1 = [1, 2, 3, 4, 5]\n    # l2 = [1, 2, 3, 4, 5]\n    # l1 = [1, 2, 3, 4, 5]\n    # l2 = [1, 2, 3, 4, 5]\n    # l1 = [1, 2, 3, 4, 5]\n    # l2 = [1, 2, 3, 4, 5]\n    # l"
    },
    {
        "task_id": 619,
        "prompt": "Write a python function to move all the numbers to the end of the given string.\n\ndef",
        "answer": "def move_to_end(string, num):\n    # your code goes here\n    string = string.split()\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string[::-1]\n    string = string"
    },
    {
        "task_id": 620,
        "prompt": "Write a python function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n\ndef",
        "answer": "def largest_subset(nums):\n    # Write your code here.\n    n = len(nums)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if nums[0] % nums[1] == 0:\n        return 2\n    if nums[0] % nums[1] == 0:\n        return 3\n    if nums[0] % nums[1] == 0:\n        return 4\n    if nums[0] % nums[1] == 0:\n        return 5\n    if nums[0] % nums[1] == 0:\n        return 6\n    if nums[0] % nums[1] == 0:\n        return 7\n    if nums[0] % nums[1] == 0:\n        return 8\n    if nums[0] % nums[1] == 0:\n        return 9\n    if nums[0] % nums[1] == 0:\n        return 10\n    if nums[0] % nums[1]"
    },
    {
        "task_id": 622,
        "prompt": "Write a python function to find the median of two sorted lists of same size.\n\ndef",
        "answer": "def median(a, b):\n    if len(a) == 0:\n        return -1\n    if len(b) == 0:\n        return -1\n    if len(a) == len(b):\n        return (a + b) / 2\n    if a[0] < b[0]:\n        return median(a[1:], b[1:])\n    else:\n        return median(a[1:], b[1:])"
    },
    {
        "task_id": 623,
        "prompt": "Write a python function to compute the n-th power of each number in a list.\n\ndef",
        "answer": "def nth_power(n, a):\n    # Write your code here\n    return a**n"
    },
    {
        "task_id": 624,
        "prompt": "Write a python function to convert a given string to uppercase.\n\ndef",
        "answer": "def uppercase(s):\n    return s.upper()"
    },
    {
        "task_id": 625,
        "prompt": "Write a python function to interchange the first and last element in a given list.\n\ndef",
        "answer": "def interchange(lst):\n    lst[0], lst[-1] = lst[-1], lst[0]\n    return lst"
    },
    {
        "task_id": 626,
        "prompt": "Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n\ndef",
        "answer": "def largestTriangleArea(radius):\n    # Write your code here.\n    triangle = []\n    for i in range(3):\n        for j in range(i+1):\n            triangle.append(j)\n    for i in range(3):\n        for j in range(i+1):\n            triangle.append(j)\n    for i in range(3):\n        for j in range(i+1):\n            triangle.append(j)\n    for i in range(3):\n        for j in range(i+1):\n            triangle.append(j)\n    for i in range(3):\n        for j in range(i+1):\n            triangle.append(j)\n    for i in range(3):\n        for j in range(i+1):\n            triangle.append(j)\n    for i in range(3):\n        for j in range(i+1):\n            triangle.append(j)\n    for i in range(3):\n        for j in range(i+1):\n            triangle.append"
    },
    {
        "task_id": 627,
        "prompt": "Write a python function to find the smallest missing number from a sorted list of natural numbers.\n\ndef",
        "answer": "def smallest_missing_number(nums):\n    # Write your code here.\n    nums.sort()\n    return nums[len(nums)-1]"
    },
    {
        "task_id": 628,
        "prompt": "Write a python function to replace all spaces in the given string with '%20'.\n\ndef",
        "answer": "def replace_spaces(string):\n    return string.replace(' ', '%20')"
    },
    {
        "task_id": 629,
        "prompt": "Write a python function to find even numbers from a list of numbers.\n\ndef",
        "answer": "def even_numbers(nums):\n    for num in nums:\n        if num % 2 == 0:\n            print(num)"
    },
    {
        "task_id": 630,
        "prompt": "Write a python function to extract all the adjacent coordinates of the given coordinate tuple.\n\ndef",
        "answer": "def adjacent_coordinates(coordinate):\n    return (coordinate[0] + coordinate[1], coordinate[0] - coordinate[1])"
    },
    {
        "task_id": 631,
        "prompt": "Write a python function to replace whitespaces with an underscore and vice versa in a given string.\n\ndef",
        "answer": "def replace_whitespace(string):\n    string = string.replace(' ', '_')\n    string = string.replace('.', '_')\n    string = string.replace('?', '_')\n    string = string.replace('!', '_')\n    string = string.replace('\"', '_')\n    string = string.replace('(', '_')\n    string = string.replace(')', '_')\n    string = string.replace('{', '_')\n    string = string.replace('}', '_')\n    string = string.replace('[', '_')\n    string = string.replace(']', '_')\n    string = string.replace('<', '_')\n    string = string.replace('>', '_')\n    string = string.replace('|', '_')\n    string = string.replace('!', '_')\n    string = string.replace('\"', '_')\n    string = string.replace('(', '_')\n    string = string.replace(')', '_')\n    string = string.replace('{"
    },
    {
        "task_id": 632,
        "prompt": "Write a python function to move all zeroes to the end of the given list.\n\ndef",
        "answer": "def move_zeroes(nums):\n    # Write your code here.\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            nums.append(0)\n        else:\n            nums.append(nums[i])\n    return nums"
    },
    {
        "task_id": 633,
        "prompt": "Write a python function to find the sum of xor of all pairs of numbers in the given list.\n\ndef",
        "answer": "def sum_of_xor(lst):\n    sum = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            sum += lst[i] ^ lst[j]\n    return sum"
    },
    {
        "task_id": 635,
        "prompt": "Write a python function to sort the given list.\n\ndef",
        "answer": "def sort(lst):\n    for i in range(len(lst)):\n        for j in range(len(lst) - i - 1):\n            if lst[j] > lst[j + 1]:\n                lst[j], lst[j + 1] = lst[j + 1], lst[j]\n    return lst"
    },
    {
        "task_id": 637,
        "prompt": "Write a python function to check whether the given amount has no profit and no loss\n\ndef",
        "answer": "def check_profit_loss(amount, profit_loss):\n    if amount > profit_loss:\n        print(\"Amount is greater than profit_loss\")\n    elif amount < profit_loss:\n        print(\"Amount is less than profit_loss\")\n    else:\n        print(\"Amount is equal to profit_loss\")"
    },
    {
        "task_id": 638,
        "prompt": "Write a python function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\ndef",
        "answer": "def wind_chill(v, t):\n    # convert wind speed in km/h to m/s\n    v = v * 3.6\n    # convert temperature in celsius to fahrenheit\n    t = t * 9/5 + 32\n    # calculate wind chill index\n    w = (v + (t/100)) * (9/5)\n    # return wind chill index rounded to the next integer\n    return round(w)"
    },
    {
        "task_id": 639,
        "prompt": "Write a python function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n\ndef",
        "answer": "def remove_lowercase(names):\n    new_names = []\n    for name in names:\n        if name[0].islower():\n            new_names.append(name)\n    return new_names"
    },
    {
        "task_id": 640,
        "prompt": "Write a python function to remove the parenthesis and what is inbetween them from a string.\n\ndef",
        "answer": "def remove_parenthesis(string):\n    # Write your code here.\n    string = string.replace('(', '')\n    string = string.replace(')', '')\n    return string"
    },
    {
        "task_id": 641,
        "prompt": "Write a python function to find the nth nonagonal number.\n\ndef",
        "answer": "def nth_non_diagonal(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 4\n    elif n == 5:\n        return 5\n    elif n == 6:\n        return 6\n    elif n == 7:\n        return 7\n    elif n == 8:\n        return 8\n    elif n == 9:\n        return 9\n    elif n == 10:\n        return 10\n    elif n == 11:\n        return 11\n    elif n == 12:\n        return 12\n    elif n == 13:\n        return 13\n    elif n == 14:\n        return 14\n    elif n == 15:\n        return 15\n    elif n == 16:\n        return 16\n    elif n == 17:\n        return 17\n    elif n == 18:\n        return 18\n    elif n == 19:\n        return 19\n    elif n == 20:\n        return 20\n"
    },
    {
        "task_id": 643,
        "prompt": "Write a python function that checks if a strings contains 'z', except at the start and end of the word.\n\ndef",
        "answer": "def check_z(word):\n    if word[0] == 'z':\n        return True\n    else:\n        return False"
    },
    {
        "task_id": 644,
        "prompt": "Write a python function to reverse an array upto a given position.\n\ndef",
        "answer": "def reverse_array(arr, start, end):\n    while start < end:\n        arr[start], arr[end] = arr[end], arr[start]\n        start += 1\n        end -= 1\n    return arr"
    },
    {
        "task_id": 720,
        "prompt": "Write a python function to add a dictionary to the tuple. The output should be a tuple.\n\ndef",
        "answer": "def add_tuple(tup):\n    return tup + (1, 2, 3)"
    },
    {
        "task_id": 721,
        "prompt": "Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\ndef",
        "answer": "def find_path(matrix):\n    n = len(matrix)\n    if n == 0:\n        return 0\n    m = len(matrix[0])\n    if m == 0:\n        return 0\n    dp = [[0 for _ in range(m)] for _ in range(n)]\n    dp[0][0] = matrix[0][0]\n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + matrix[i][0]\n    for i in range(1, m):\n        dp[0][i] = dp[0][i-1] + matrix[0][i]\n    for i in range(1, n):\n        for j in range(1, m):\n            dp[i][j] = dp[i-1][j] + matrix[i][j]\n    return dp[n-1][m-1] / n"
    },
    {
        "task_id": 722,
        "prompt": "The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n\ndef",
        "answer": "def filter_students(students):\n    for student in students:\n        if student['student_height'] > 25 and student['student_weight'] > 50:\n            print(student['student_name'], student['student_height'], student['student_weight'])"
    },
    {
        "task_id": 723,
        "prompt": "The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n\ndef",
        "answer": "def same_values(a, b):\n    return len(set(a) & set(b))"
    },
    {
        "task_id": 724,
        "prompt": "Write a python function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n\ndef",
        "answer": "def sum_digits(base, power):\n    sum = 0\n    while base > 0:\n        digit = base % 10\n        sum += digit\n        base = base // 10\n    return sum"
    },
    {
        "task_id": 725,
        "prompt": "Write a python function to extract values between quotation marks \" \" of the given string.\n\ndef",
        "answer": "def extract_quotation_mark(string):\n    return string[0] + string[1] + string[2] + string[3] + string[4] + string[5] + string[6] + string[7] + string[8] + string[9] + string[10] + string[11] + string[12] + string[13] + string[14] + string[15] + string[16] + string[17] + string[18] + string[19] + string[20] + string[21] + string[22] + string[23] + string[24] + string[25] + string[26] + string[27] + string[28] + string[29] + string[30] + string[31] + string[32] + string[33] + string[34] + string[35] + string[36] + string[37] + string[38] + string[39] + string[40] + string[41] + string[42] + string[43] + string[44] + string[45] + string[46] + string[47"
    },
    {
        "task_id": 726,
        "prompt": "Write a python function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n\ndef",
        "answer": "def mult(t_1,t_2):\n    return tuple(map(lambda x: x*x,t_1))"
    },
    {
        "task_id": 728,
        "prompt": "Write a python function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n\ndef",
        "answer": "def add_numbers(a_1, b_1, a_2, b_2):\n    return a_1 + b_1 + a_2 + b_2"
    },
    {
        "task_id": 730,
        "prompt": "Write a python function to remove consecutive duplicates of a given list.\n\ndef",
        "answer": "def remove_consecutive_duplicates(lst):\n    # Write your code here.\n    lst.sort()\n    i = 0\n    while i < len(lst):\n        if lst[i] == lst[i+1]:\n            lst.pop(i)\n            i -= 1\n        else:\n            i += 1\n    return lst"
    },
    {
        "task_id": 731,
        "prompt": "Write a python function to find the lateral surface area of a cone given radius r and the height h.\n\ndef",
        "answer": "def lateral_surface(r, h):\n    return (4/3)*np.pi*r**3*h"
    },
    {
        "task_id": 732,
        "prompt": "Write a python function to replace all occurrences of spaces, commas, or dots with a colon.\n\ndef",
        "answer": "def replace_spaces(text):\n    text = text.replace(\" \", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\".\", \":\")\n    text"
    },
    {
        "task_id": 733,
        "prompt": "Write a python function to find the index of the first occurrence of a given number in a sorted array.\n\ndef",
        "answer": "def find_index(arr, num):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == num:\n            return mid\n        elif arr[mid] < num:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1"
    },
    {
        "task_id": 734,
        "prompt": "Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\ndef",
        "answer": "def sum_of_products_of_all_possible_subarrays(arr):\n    # Write your code here.\n    if len(arr) == 0:\n        return 0"
    },
    {
        "task_id": 735,
        "prompt": "Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\ndef",
        "answer": "def toggle_bits(num):\n    # Write your code here.\n    if num & 0b1 == 0:\n        num = num ^ 0b1\n    else:\n        num = num ^ 0b1\n    return num"
    },
    {
        "task_id": 736,
        "prompt": "Write a python function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\ndef",
        "answer": "def left_insertion_point(arr, value):\n    # Write your code here.\n    left_index = 0\n    right_index = len(arr) - 1\n    while left_index <= right_index:\n        mid = (left_index + right_index) // 2\n        if arr[mid] < value:\n            left_index = mid + 1\n        else:\n            right_index = mid - 1\n    return left_index"
    },
    {
        "task_id": 737,
        "prompt": "Write a python function to check whether the given string is starting with a vowel or not using regex.\n\ndef",
        "answer": "def vowel(string):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    if string[0] in vowels:\n        return True\n    else:\n        return False"
    },
    {
        "task_id": 738,
        "prompt": "Write a python function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n\ndef",
        "answer": "def sum_n(n):\n    if n == 0:\n        return 0\n    else:\n        return n + sum_n(n-1)"
    },
    {
        "task_id": 739,
        "prompt": "Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n\ndef",
        "answer": "def smallestTriangularNumber(n):\n    # Write your code here.\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 3\n    if n == 5:\n        return 4\n    if n == 6:\n        return 5\n    if n == 7:\n        return 6\n    if n == 8:\n        return 7\n    if n == 9:\n        return 8\n    if n == 10:\n        return 9\n    if n == 11:\n        return 10\n    if n == 12:\n        return 11\n    if n == 13:\n        return 12\n    if n == 14:\n        return 13\n    if n == 15:\n        return 14\n    if n == 16:\n        return 15\n    if n == 17:\n        return 16\n    if n == 18:\n        return 17\n    if n == 19:\n        return 18\n    if n == 20:\n        return 19\n    if n"
    },
    {
        "task_id": 740,
        "prompt": "Write a python function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n\ndef",
        "answer": "def convert_tuple_to_adjacent_pair(tuple):\n    adjacent_pair = {}\n    for i in range(len(tuple)):\n        adjacent_pair[tuple[i]] = tuple[(i+1) % len(tuple)]\n    return adjacent_pair"
    },
    {
        "task_id": 741,
        "prompt": "Write a python function to check whether all the characters are same or not.\n\ndef",
        "answer": "def same_char(string):\n    for i in range(len(string)):\n        if string[i]!= string[i+1]:\n            return False\n    return True"
    },
    {
        "task_id": 742,
        "prompt": "Write a python function to caluclate the area of a tetrahedron.\n\ndef",
        "answer": "def area_of_tetrahedron(a,b,c):\n    return (a*b*c)/2"
    },
    {
        "task_id": 743,
        "prompt": "Write a python function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n\ndef",
        "answer": "def rotate(lst, n):\n    lst.reverse()\n    for i in range(n):\n        lst.append(lst.pop())\n    return lst"
    },
    {
        "task_id": 744,
        "prompt": "Write a python function to check if the given tuple has any none value or not.\n\ndef",
        "answer": "def check_tuple(tuple):\n    for i in tuple:\n        if i == None:\n            return False\n    return True"
    },
    {
        "task_id": 745,
        "prompt": "Write a python function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n\ndef",
        "answer": "def divisibleby(startnum, endnum):\n    for i in range(startnum, endnum + 1):\n        if i % 10 == 0:\n            print(i)"
    },
    {
        "task_id": 746,
        "prompt": "Write a python function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n\ndef",
        "answer": "def sectorArea(r, angle):\n    if angle > 360:\n        return None\n    elif angle == 0:\n        return r * r\n    elif angle == 90:\n        return r * (r * r * r)\n    elif angle == 180:\n        return r * (r * r * r * r)\n    elif angle == 270:\n        return r * (r * r * r * r * r)\n    elif angle == 360:\n        return r * (r * r * r * r * r * r)"
    },
    {
        "task_id": 747,
        "prompt": "Write a python function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\ndef",
        "answer": "def lcs_longest_common_subsequence(str1, str2, str3):\n    # Write your code here.\n    if len(str1) < len(str2) or len(str1) < len(str3):\n        return 0\n    if len(str2) < len(str3):\n        return 0\n    if str1[0] == str2[0]:\n        return lcs_longest_common_subsequence(str1[1:], str2[1:], str3[1:]) + 1\n    if str1[0] == str3[0]:\n        return lcs_longest_common_subsequence(str1[1:], str3[1:], str2[1:]) + 1\n    return max(lcs_longest_common_subsequence(str1[1:], str2[1:], str3[1:]), lcs_longest_common_subsequence(str1[1:], str3[1:], str2[1:]))"
    },
    {
        "task_id": 748,
        "prompt": "Write a python function to put spaces between words starting with capital letters in a given string.\n\ndef",
        "answer": "def capitalize_words(string):\n    return string.title()"
    },
    {
        "task_id": 749,
        "prompt": "Write a python function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n\ndef",
        "answer": "def sort_numeric_strings(numbers):\n    numbers.sort()\n    return numbers"
    },
    {
        "task_id": 750,
        "prompt": "Write a python function to add the given tuple to the given list.\n\ndef",
        "answer": "def add_tuple(tuple_list, tuple_to_add):\n    tuple_list.append(tuple_to_add)\n    return tuple_list"
    },
    {
        "task_id": 751,
        "prompt": "Write a python function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n\ndef",
        "answer": "def min_heapify(arr, n, i):\n    smallest = i\n    left = 2 * i + 1\n    right = 2 * i + 2\n    if left < n and arr[left] < arr[smallest]:\n        smallest = left\n    if right < n and arr[right] < arr[smallest]:\n        smallest = right\n    if smallest!= i:\n        arr[i], arr[smallest] = arr[smallest], arr[i]\n        min_heapify(arr, n, smallest)"
    },
    {
        "task_id": 752,
        "prompt": "Write a python function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n\ndef",
        "answer": "def jacobsthal(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 8\n    elif n == 5:\n        return 16\n    elif n == 6:\n        return 32\n    elif n == 7:\n        return 64\n    elif n == 8:\n        return 128\n    elif n == 9:\n        return 256\n    elif n == 10:\n        return 512\n    elif n == 11:\n        return 1024\n    elif n == 12:\n        return 2048\n    elif n == 13:\n        return 4096\n    elif n == 14:\n        return 8192\n    elif n == 15:\n        return 16384\n    elif n == 16:\n        return 32768\n    elif n == 17:\n        return 65536\n    elif n == 18:\n        return 131072\n    elif n == 19:\n        return 262144\n    elif n == 20:"
    },
    {
        "task_id": 753,
        "prompt": "Write a python function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n\ndef",
        "answer": "def find_min_k(tuple_list):\n    # Write your code here.\n    min_k = 0\n    for i in range(len(tuple_list)):\n        for j in range(i+1, len(tuple_list)):\n            if tuple_list[i][0] < tuple_list[j][0]:\n                min_k = min(min_k, tuple_list[i][1] - tuple_list[j][1])\n    return min_k"
    },
    {
        "task_id": 754,
        "prompt": "We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n\ndef",
        "answer": "def common_elements(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l2[i] in l3 and l3[i] in l1:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "task_id": 755,
        "prompt": "Write a python function to find the second smallest number in a list.\n\ndef",
        "answer": "def second_smallest(lst):\n    smallest = lst[0]\n    for i in range(len(lst)):\n        if lst[i] < smallest:\n            smallest = lst[i]\n    return smallest"
    },
    {
        "task_id": 756,
        "prompt": "Write a python function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n\ndef",
        "answer": "def match_a(string):\n    return string.find('a')!= -1"
    },
    {
        "task_id": 757,
        "prompt": "Write a python function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n\ndef",
        "answer": "def reverse_count(string):\n    count = 0\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            if string[i] == string[j]:\n                count += 1\n    return count"
    },
    {
        "task_id": 758,
        "prompt": "Write a python function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n\ndef",
        "answer": "def count_list(list):\n    count = {}\n    for i in list:\n        count[i] = list.count(i)\n    return count"
    },
    {
        "task_id": 759,
        "prompt": "Write a python function to check whether a given string is a decimal number with a precision of 2.\n\ndef",
        "answer": "def is_decimal(s):\n    try:\n        float(s)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "task_id": 760,
        "prompt": "Write a python function to check whether a list of numbers contains only one distinct element or not.\n\ndef",
        "answer": "def check_distinct(nums):\n    for i in range(len(nums)):\n        if nums[i] in nums[:i]:\n            return False\n    return True"
    },
    {
        "task_id": 762,
        "prompt": "Write a python function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n\ndef",
        "answer": "def check_month(month):\n    if month == 1 or month == 2 or month == 3 or month == 4 or month == 5 or month == 6 or month == 7 or month == 8 or month == 9 or month == 10 or month == 11:\n        return True\n    else:\n        return False"
    },
    {
        "task_id": 763,
        "prompt": "Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n\ndef",
        "answer": "def find_min_diff(arr):\n    min_diff = arr[0] - arr[1]\n    for i in range(2, len(arr)):\n        min_diff = min(min_diff, arr[i] - arr[i - 1])\n    return min_diff"
    },
    {
        "task_id": 764,
        "prompt": "Write a python function to count number of digits in a given string.\n\ndef",
        "answer": "def count_digits(string):\n    count = 0\n    for i in string:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "task_id": 765,
        "prompt": "Write a python function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n\ndef",
        "answer": "def nth_polite(n):\n    if n == 1:\n        return 1\n    else:\n        return nth_polite(n-1) + nth_polite(n-2)"
    },
    {
        "task_id": 766,
        "prompt": "Write a python function to return a list of all pairs of consecutive items in a given list.\n\ndef",
        "answer": "def consecutive_pairs(lst):\n    # Write your code here.\n    pairs = []\n    for i in range(len(lst) - 1):\n        if lst[i] == lst[i + 1]:\n            pairs.append((lst[i], lst[i + 1]))\n    return pairs"
    },
    {
        "task_id": 767,
        "prompt": "Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n\ndef",
        "answer": "def count_pairs(nums, sum):\n    count = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == sum:\n                count += 1\n    return count"
    },
    {
        "task_id": 769,
        "prompt": "Write a python function to get the difference between two lists.\n\ndef",
        "answer": "def get_difference(a, b):\n    return a - b"
    },
    {
        "task_id": 770,
        "prompt": "Write a python function to find the sum of fourth power of first n odd natural numbers.\n\ndef",
        "answer": "def sum_of_fourth_powers(n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i ** 4\n    return sum"
    },
    {
        "task_id": 771,
        "prompt": "Write a python function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\ndef",
        "answer": "def balanced(expr):\n    stack = []\n    for i in expr:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    if len(stack)!= 0:\n        return False\n    else:\n        return True"
    },
    {
        "task_id": 772,
        "prompt": "Write a python function to remove all the words with k length in the given string.\n\ndef",
        "answer": "def remove_k_length(string, k):\n    # Write your code here\n    return string.replace(string[:k], \"\")"
    },
    {
        "task_id": 773,
        "prompt": "Write a python function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n\ndef",
        "answer": "def find_substring(string, substring):\n    # Write your code here.\n    if len(string) < len(substring):\n        return None\n    if len(string) == len(substring):\n        return string.find(substring)\n    else:\n        return None"
    },
    {
        "task_id": 775,
        "prompt": "Write a python function to check whether every odd index contains odd numbers of a given list.\n\ndef",
        "answer": "def odd_index(lst):\n    for i in range(len(lst)):\n        if lst[i] % 2!= 0:\n            return True\n    return False"
    },
    {
        "task_id": 776,
        "prompt": "Write a python function to count those characters which have vowels as their neighbors in the given string.\n\ndef",
        "answer": "def count_vowels(string):\n    count = 0\n    for i in range(len(string)):\n        if string[i] in 'aeiou':\n            count += 1\n    return count"
    },
    {
        "task_id": 777,
        "prompt": "Write a python function to find the sum of non-repeated elements in a given list.\n\ndef",
        "answer": "def sum_of_non_repeated_elements(lst):\n    # Write your code here.\n    sum = 0\n    for i in lst:\n        if i not in lst:\n            sum += i\n    return sum"
    },
    {
        "task_id": 778,
        "prompt": "Write a python function to pack consecutive duplicates of a given list elements into sublists.\n\ndef",
        "answer": "def duplicate_sublist(lst):\n    # create a new list to store the duplicate sublists\n    duplicate_sublist = []\n    # create a new list to store the duplicate sublists\n    duplicate_sublist_2 = []\n    # create a new list to store the duplicate sublists\n    duplicate_sublist_3 = []\n    # create a new list to store the duplicate sublists\n    duplicate_sublist_4 = []\n    # create a new list to store the duplicate sublists\n    duplicate_sublist_5 = []\n    # create a new list to store the duplicate sublists\n    duplicate_sublist_6 = []\n    # create a new list to store the duplicate sublists\n    duplicate_sublist_7 = []\n    # create a new list to store the duplicate sublists\n    duplicate_sublist_8 = []\n    # create a new list to store the duplicate sublists\n    duplicate_sublist_9 = []\n    # create a new list to store the duplicate sublists\n    duplicate_"
    },
    {
        "task_id": 779,
        "prompt": "Write a python function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n\ndef",
        "answer": "def count_lists(lst):\n    count = {}\n    for i in lst:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    return count"
    },
    {
        "task_id": 780,
        "prompt": "Write a python function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n\ndef",
        "answer": "def combinations(t, n):\n    if n == 0:\n        return [[]]\n    else:\n        return combinations(t, n-1) + [[t[i]+t[i+1] for i in range(n-1)]]"
    },
    {
        "task_id": 781,
        "prompt": "Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n\ndef",
        "answer": "def check_divisors(num):\n    divisors = []\n    for i in range(1, num + 1):\n        if num % i == 0:\n            divisors.append(i)\n    if len(divisors) == 2:\n        return True\n    else:\n        return False"
    },
    {
        "task_id": 782,
        "prompt": "Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\ndef",
        "answer": "def odd_length_subarrays(arr):\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 1:\n            sum += arr[i]\n    return sum"
    },
    {
        "task_id": 783,
        "prompt": "Write a python function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n\ndef",
        "answer": "def hsv_to_rgb(h, s, v):\n    \"\"\"\n    Convert hsv color to rgb color.\n    :param h: hue\n    :param s: saturation\n    :param v: value\n    :return: rgb color\n    \"\"\"\n    r = int(s * 255)\n    g = int(s * 255)\n    b = int(v * 255)\n    return (r, g, b)"
    },
    {
        "task_id": 784,
        "prompt": "Write a python function to find the product of first even and odd number of a given list.\n\ndef",
        "answer": "def product_of_even_odd(lst):\n    even_odd = []\n    for i in lst:\n        if i % 2 == 0:\n            even_odd.append(i)\n        else:\n            pass\n    return even_odd"
    },
    {
        "task_id": 785,
        "prompt": "Write a python function to convert tuple string to integer tuple.\n\ndef",
        "answer": "def convert_tuple(tuple_string):\n    tuple_string = tuple_string.replace('(', '')\n    tuple_string = tuple_string.replace(')', '')\n    tuple_string = tuple_string.replace(',', '')\n    tuple_string = tuple_string.replace(' ', '')\n    tuple_string = tuple_string.replace('(', '')\n    tuple_string = tuple_string.replace(')', '')\n    tuple_string = tuple_string.replace(',', '')\n    tuple_string = tuple_string.replace(' ', '')\n    tuple_string = tuple_string.replace('(', '')\n    tuple_string = tuple_string.replace(')', '')\n    tuple_string = tuple_string.replace(',', '')\n    tuple_string = tuple_string.replace(' ', '')\n    tuple_string = tuple_string.replace('(', '')\n    tuple_string = tuple_string.replace(')', '')\n    tuple_"
    },
    {
        "task_id": 786,
        "prompt": "Write a python function to locate the right insertion point for a specified value in sorted order.\n\ndef",
        "answer": "def right_insertion_point(arr, value):\n    # Write your code here.\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] < value:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left"
    },
    {
        "task_id": 787,
        "prompt": "Write a python function that matches a string that has an a followed by three 'b'.\n\ndef",
        "answer": "def match_a_b(string):\n    if string.find('a')!= -1:\n        return True\n    else:\n        return False"
    },
    {
        "task_id": 788,
        "prompt": "Write a python function to create a new tuple from the given string and list.\n\ndef",
        "answer": "def create_tuple(s):\n    return tuple(s.split())"
    },
    {
        "task_id": 790,
        "prompt": "Write a python function to check whether every even index contains even numbers of a given list.\n\ndef",
        "answer": "def even_index(lst):\n    for i in range(len(lst)):\n        if lst[i] % 2 == 0:\n            print(lst[i])"
    },
    {
        "task_id": 791,
        "prompt": "Write a python function to remove tuples from the given tuple.\n\ndef",
        "answer": "def remove_tuple(tuple_to_remove):\n    tuple_to_remove = tuple_to_remove[1:]\n    return tuple_to_remove"
    },
    {
        "task_id": 792,
        "prompt": "Write a python function to count the number of lists in a given number of lists.\n\ndef",
        "answer": "def count_lists(num_list):\n    count = 0\n    for i in range(len(num_list)):\n        for j in range(len(num_list[i])):\n            if num_list[i][j] == 'L':\n                count += 1\n    return count"
    },
    {
        "task_id": 793,
        "prompt": "Write a python function to find the last position of an element in a sorted array.\n\ndef",
        "answer": "def last_position(arr, x):\n    # Write your code here.\n    if len(arr) == 0:\n        return -1\n    if arr[0] == x:\n        return 0\n    if arr[0] > x:\n        return last_position(arr[1:], x)\n    else:\n        return last_position(arr[1:], x) + 1"
    },
    {
        "task_id": 794,
        "prompt": "Write a python function that matches a string that has an 'a' followed by anything, ending in 'b'.\n\ndef",
        "answer": "def find_a(string):\n    return string.find('a')"
    },
    {
        "task_id": 796,
        "prompt": "Write function to find the sum of all items in the given dictionary.\n\ndef",
        "answer": "def sum_of_all_items(dictionary):\n    sum = 0\n    for key in dictionary:\n        sum += dictionary[key]\n    return sum"
    },
    {
        "task_id": 797,
        "prompt": "Write a python function to find the sum of all odd natural numbers within the range l and r.\n\ndef",
        "answer": "def sum_odd_numbers(l, r):\n    sum = 0\n    for i in range(l, r+1):\n        if i % 2 == 1:\n            sum += i\n    return sum"
    },
    {
        "task_id": 798,
        "prompt": "Write a python function to find the sum of an array.\n\ndef",
        "answer": "def sum_array(arr):\n    sum = 0\n    for i in range(len(arr)):\n        sum += arr[i]\n    return sum"
    },
    {
        "task_id": 799,
        "prompt": "Write a python function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n\ndef",
        "answer": "def rotate_left(d, n):\n    return (d << n) | (d >> (32 - n))"
    },
    {
        "task_id": 800,
        "prompt": "Write a python function to remove all whitespaces from a string.\n\ndef",
        "answer": "def remove_whitespace(str):\n    return str.replace(\" \", \"\")"
    },
    {
        "task_id": 801,
        "prompt": "Write a python function to count the number of equal numbers from three given integers.\n\ndef",
        "answer": "def countEqual(a, b, c):\n    return a+b+c-min(a,b,c)"
    },
    {
        "task_id": 802,
        "prompt": "Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\ndef",
        "answer": "def countRotations(arr):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                count += 1\n    return count"
    },
    {
        "task_id": 803,
        "prompt": "Write a python function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n\ndef",
        "answer": "def perfect_square(n):\n    if n == 0:\n        return False\n    if n == 1:\n        return True\n    if n % 2 == 0:\n        return False\n    if perfect_square(n // 2):\n        return True\n    else:\n        return False"
    },
    {
        "task_id": 804,
        "prompt": "Write a python function to check whether the product of numbers in a list is even or not.\n\ndef",
        "answer": "def even_check(numbers):\n    for i in numbers:\n        if i % 2 == 0:\n            print(i)"
    },
    {
        "task_id": 805,
        "prompt": "Write a python function that returns the list in a list of lists whose sum of elements is the highest.\n\ndef",
        "answer": "def highest_sum(lst):\n    sum = 0\n    for i in lst:\n        sum += i\n    return sum"
    },
    {
        "task_id": 806,
        "prompt": "Write a python function to find maximum run of uppercase characters in the given string.\n\ndef",
        "answer": "def max_uppercase_characters(string):\n    max_uppercase_characters = 0\n    for i in range(len(string)):\n        if string[i].isupper():\n            max_uppercase_characters += 1\n    return max_uppercase_characters"
    },
    {
        "task_id": 807,
        "prompt": "Write a python function to find the first odd number in a given list of numbers.\n\ndef",
        "answer": "def odd_number(numbers):\n    odd_number = 0\n    for number in numbers:\n        if number % 2 == 1:\n            odd_number += 1\n    return odd_number"
    },
    {
        "task_id": 808,
        "prompt": "Write a python function to check if the given tuples contain the k or not.\n\ndef",
        "answer": "def contains_k(tup1, tup2):\n    if tup1[0] == tup2[0] and tup1[1] == tup2[1]:\n        return True\n    else:\n        return False"
    },
    {
        "task_id": 809,
        "prompt": "Write a python function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n\ndef",
        "answer": "def check_tuple(first_tuple, second_tuple):\n    for i in range(len(first_tuple)):\n        if first_tuple[i] < second_tuple[i]:\n            return False\n    return True"
    }
]