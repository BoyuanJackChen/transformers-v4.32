[
    {
        "task_id": 2,
        "prompt": "Write a python function to find the shared elements from the given two lists.\n\ndef",
        "answer": "def shared_elements(list1, list2):\n    return [x for x in list1 if x in list2]"
    },
    {
        "task_id": 3,
        "prompt": "Write a python function to identify non-prime numbers.\n\ndef",
        "answer": "def is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "task_id": 4,
        "prompt": "Write a python function to find the n largest integers from a given list of numbers, returned in descending order.\n\ndef",
        "answer": "def largest_n(num_list, n):\n    return sorted(num_list, reverse=True)[:n]"
    },
    {
        "task_id": 6,
        "prompt": "Write a python function to check whether the two numbers differ at one bit position only or not.\n\ndef",
        "answer": "def check_bit_diff(num1, num2):\n    return (num1 ^ num2) & ~(num1 ^ num1)"
    },
    {
        "task_id": 7,
        "prompt": "Write a python function to find all words which are at least 4 characters long in a string.\n\ndef",
        "answer": "def find_long_words(str):\n    return [word for word in str.split() if len(word) >= 4]"
    },
    {
        "task_id": 8,
        "prompt": "Write a python function to find squares of individual elements in a list.\n\ndef",
        "answer": "def square_list(lst):\n    return [x**2 for x in lst]"
    },
    {
        "task_id": 9,
        "prompt": "Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n\ndef",
        "answer": "def min_rotations(str1, str2):\n    if len(str1)!= len(str2):\n        return -1\n    if str1 == str2:\n        return 0\n    if str1 == str2[::-1]:\n        return 1\n    for i in range(len(str1)):\n        if str1[i:] + str1[:i] == str2:\n            return 2\n    return -1"
    },
    {
        "task_id": 11,
        "prompt": "Write a python function to remove first and last occurrence of a given character from the string.\n\ndef",
        "answer": "def remove_char(str, char):\n    return str[1:-1]"
    },
    {
        "task_id": 12,
        "prompt": "Write a python function to sort a given matrix in ascending order according to the sum of its rows.\n\ndef",
        "answer": "def sort_matrix(matrix):\n    return sorted(matrix, key=lambda x: sum(x))"
    },
    {
        "task_id": 14,
        "prompt": "Write a python function to find the volume of a triangular prism.\n\ndef",
        "answer": "def triangularPrismVolume(base, height, side):\n    return (base * height * side) / 3"
    },
    {
        "task_id": 16,
        "prompt": "Write a python function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\ndef",
        "answer": "def is_camel_case(string):\n    return string.islower() and \"_\" not in string"
    },
    {
        "task_id": 17,
        "prompt": "Write a python function that returns the perimeter of a square given its side length as input.\n\ndef",
        "answer": "def square_perimeter(side):\n    return side * 4"
    },
    {
        "task_id": 18,
        "prompt": "Write a python function to remove characters from the first string which are present in the second string.\n\ndef",
        "answer": "def remove_char(str1, str2):\n    return str1.translate(None, str2)"
    },
    {
        "task_id": 19,
        "prompt": "Write a python function to find whether a given array of integers contains any duplicate element.\n\ndef",
        "answer": "def duplicate(arr):\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                return True\n    return False"
    },
    {
        "task_id": 20,
        "prompt": "Write a python function to check if the given number is woodball or not.\n\ndef",
        "answer": "def woodball(n):\n    return n%10==0 and n%100!=0"
    },
    {
        "task_id": 56,
        "prompt": "Write a python function to check if a given number is one less than twice its reverse.\n\ndef",
        "answer": "def is_one_less_than_twice_reverse(n):\n    return n == int(str(n)[::-1]) - 1"
    },
    {
        "task_id": 57,
        "prompt": "Write a python function to find the largest number that can be formed with the given list of digits.\n\ndef",
        "answer": "def largest_number(digits):\n    return int(\"\".join(sorted(map(str, digits), reverse=True)))"
    },
    {
        "task_id": 58,
        "prompt": "Write a python function to check whether the given two integers have opposite sign or not.\n\ndef",
        "answer": "def opposite_sign(a, b):\n    return a * b < 0"
    },
    {
        "task_id": 59,
        "prompt": "Write a python function to find the nth octagonal number.\n\ndef",
        "answer": "def nth_octagonal(n):\n    return n*(3*n-1)//2"
    },
    {
        "task_id": 61,
        "prompt": "Write a python function to count the number of substrings with the sum of digits equal to their length.\n\ndef",
        "answer": "def count_substring(string):\n    count = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            if sum(int(string[i:j])) == j-i:\n                count += 1\n    return count"
    },
    {
        "task_id": 62,
        "prompt": "Write a python function to find smallest number in a list.\n\ndef",
        "answer": "def find_smallest(lst):\n    smallest = lst[0]\n    for i in lst:\n        if i < smallest:\n            smallest = i\n    return smallest"
    },
    {
        "task_id": 63,
        "prompt": "Write a python function to find the maximum difference between available pairs in the given tuple list.\n\ndef",
        "answer": "def max_diff(tuple_list):\n    max_diff = 0\n    for i in range(len(tuple_list)):\n        for j in range(i+1, len(tuple_list)):\n            if abs(tuple_list[i] - tuple_list[j]) > max_diff:\n                max_diff = abs(tuple_list[i] - tuple_list[j])\n    return max_diff"
    },
    {
        "task_id": 64,
        "prompt": "Write a python function to sort a list of tuples using the second value of each tuple.\n\ndef",
        "answer": "def sort_tuples(tuples):\n    return sorted(tuples, key=lambda x: x[1])"
    },
    {
        "task_id": 65,
        "prompt": "Write a python function to flatten a list and sum all of its elements.\n\ndef",
        "answer": "def flatten(l):\n    return sum(l, [])"
    },
    {
        "task_id": 66,
        "prompt": "Write a python function to count the number of positive numbers in a list.\n\ndef",
        "answer": "def count_positives_sum_negatives(arr):\n    count = 0\n    sum = 0\n    for i in arr:\n        if i > 0:\n            count += 1\n        else:\n            sum += i\n    return [count, sum]"
    },
    {
        "task_id": 67,
        "prompt": "Write a python function to find the number of ways to partition a set of Bell numbers.\n\ndef",
        "answer": "def bell_numbers(n):\n    bell_numbers = [0] * (n + 1)\n    bell_numbers[0] = 1\n    for i in range(1, n + 1):\n        for j in range(i):\n            bell_numbers[i] += bell_numbers[j] * bell_numbers[i - j - 1]\n    return bell_numbers[n]"
    },
    {
        "task_id": 68,
        "prompt": "Write a python function to check whether the given array is monotonic or not.\n\ndef",
        "answer": "def is_monotonic(arr):\n    if len(arr) == 1:\n        return True\n    if arr[0] < arr[1]:\n        for i in range(1, len(arr)):\n            if arr[i] < arr[i-1]:\n                return False\n        return True\n    else:\n        for i in range(1, len(arr)):\n            if arr[i] > arr[i-1]:\n                return False\n        return True"
    },
    {
        "task_id": 69,
        "prompt": "Write a python function to check whether a list contains the given sublist or not.\n\ndef",
        "answer": "def sublist(lst, sublst):\n    if len(sublst) > len(lst):\n        return False\n    for i in range(len(lst) - len(sublst) + 1):\n        if lst[i:i+len(sublst)] == sublst:\n            return True\n    return False"
    },
    {
        "task_id": 70,
        "prompt": "Write a python function to find whether all the given tuples have equal length or not.\n\ndef",
        "answer": "def check_tuples(tuples):\n    return len(set(len(t) for t in tuples)) == 1"
    },
    {
        "task_id": 71,
        "prompt": "Write a python function to sort a list of elements.\n\ndef",
        "answer": "def sort_list(list):\n    for i in range(len(list)):\n        for j in range(i+1, len(list)):\n            if list[i] > list[j]:\n                list[i], list[j] = list[j], list[i]\n    return list"
    },
    {
        "task_id": 72,
        "prompt": "Write a python function to check whether the given number can be represented as the difference of two squares or not.\n\ndef",
        "answer": "def is_square(n):\n    return int(n**0.5)**2 == n"
    },
    {
        "task_id": 74,
        "prompt": "Write a python function to check whether it follows the sequence given in the patterns array.\n\ndef",
        "answer": "def pattern_checker(arr, patterns):\n    for i in range(len(arr)):\n        if arr[i]!= patterns[i % len(patterns)]:\n            return False\n    return True"
    },
    {
        "task_id": 75,
        "prompt": "Write a python function to find tuples which have all elements divisible by k from the given list of tuples.\n\ndef",
        "answer": "def divisible_by_k(k, list_of_tuples):\n    return [x for x in list_of_tuples if all(i % k == 0 for i in x)]"
    },
    {
        "task_id": 77,
        "prompt": "Write a python function to find whether a number is divisible by 11.\n\ndef",
        "answer": "def divisible_by_11(num):\n    if num % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "task_id": 79,
        "prompt": "Write a python function to check whether the length of the word is odd or not.\n\ndef",
        "answer": "def odd_or_even(word):\n    if len(word) % 2 == 0:\n        return \"even\"\n    else:\n        return \"odd\""
    },
    {
        "task_id": 80,
        "prompt": "Write a python function to find the nth tetrahedral number.\n\ndef",
        "answer": "def tetra_number(n):\n    return n*(n+1)*(n+2)*(n+3)//2"
    },
    {
        "task_id": 82,
        "prompt": "Write a python function to find the volume of a sphere.\n\ndef",
        "answer": "def sphere_volume(radius):\n    return 4/3 * math.pi * radius ** 3"
    },
    {
        "task_id": 83,
        "prompt": "Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n\ndef",
        "answer": "def get_char(s):\n    return chr(sum(map(ord, s)) % 26)"
    },
    {
        "task_id": 84,
        "prompt": "Write a python function to find the nth number in the newman conway sequence.\n\ndef",
        "answer": "def newman_conway(num):\n    \"\"\" Returns a list of the Newman Conway numbers for the given value.\n        Time Complexity: O(n)\n        Space Complexity: O(n)\n    \"\"\"\n    if num == 0:\n        raise ValueError\n    if num == 1:\n        return '1'\n    if num == 2:\n        return '1 1'\n    if num == 3:\n        return '1 1 2'\n    if num == 4:\n        return '1 1 2 1'\n    if num == 5:\n        return '1 1 2 1 3'\n    if num == 6:\n        return '1 1 2 1 3 1'\n    if num == 7:\n        return '1 1 2 1 3 1 4'\n    if num == 8:\n        return '1 1 2 1 3 1 4 1'\n    if num == 9:\n        return '1 1 2 1 3 1 4 1 5'\n    if num == 10:\n        return '1 1 "
    },
    {
        "task_id": 85,
        "prompt": "Write a python function to find the surface area of a sphere.\n\ndef",
        "answer": "def sphere_surface_area(radius):\n    return 4 * math.pi * radius ** 2"
    },
    {
        "task_id": 86,
        "prompt": "Write a python function to find nth centered hexagonal number.\n\ndef",
        "answer": "def centered_hexagonal_number(n):\n    return n * (2 * n - 1)"
    },
    {
        "task_id": 87,
        "prompt": "Write a python function to merge three dictionaries into a single dictionary.\n\ndef",
        "answer": "def merge_dict(dict1, dict2, dict3):\n    return {**dict1, **dict2, **dict3}"
    },
    {
        "task_id": 88,
        "prompt": "Write a python function to get the frequency of all the elements in a list, returned as a dictionary.\n\ndef",
        "answer": "def get_frequency(list1):\n    dict1 = {}\n    for i in list1:\n        if i in dict1:\n            dict1[i] += 1\n        else:\n            dict1[i] = 1\n    return dict1"
    },
    {
        "task_id": 89,
        "prompt": "Write a python function to find the closest smaller number than n.\n\ndef",
        "answer": "def closest_smaller_number(n):\n    if n == 0:\n        return -1\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 3\n    if n == 5:\n        return 4\n    if n == 6:\n        return 5\n    if n == 7:\n        return 6\n    if n == 8:\n        return 7\n    if n == 9:\n        return 8\n    if n == 10:\n        return 9\n    if n == 11:\n        return 10\n    if n == 12:\n        return 11\n    if n == 13:\n        return 12\n    if n == 14:\n        return 13\n    if n == 15:\n        return 14\n    if n == 16:\n        return 15\n    if n == 17:\n        return 16\n    if n == 18:\n        return 17\n    if n == 19:\n        return 18\n    if n"
    },
    {
        "task_id": 90,
        "prompt": "Write a python function to find the length of the longest word.\n\ndef",
        "answer": "def longest_word(str):\n    words = str.split()\n    longest = 0\n    for word in words:\n        if len(word) > longest:\n            longest = len(word)\n    return longest"
    },
    {
        "task_id": 91,
        "prompt": "Write a python function to check if a string is present as a substring in a given list of string values.\n\ndef",
        "answer": "def check_string_in_list(string, list_of_strings):\n    for item in list_of_strings:\n        if string in item:\n            return True\n    return False"
    },
    {
        "task_id": 92,
        "prompt": "Write a python function to check whether the given number is undulating or not.\n\ndef",
        "answer": "def undulating(n):\n    if n%2==0:\n        return False\n    else:\n        return True"
    },
    {
        "task_id": 93,
        "prompt": "Write a python function to calculate the value of 'a' to the power 'b'.\n\ndef",
        "answer": "def power(a, b):\n    return a ** b"
    },
    {
        "task_id": 94,
        "prompt": "Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n\ndef",
        "answer": "def find_smallest_second(tuples):\n    return min(tuples, key=lambda x: x[1])[0]"
    },
    {
        "task_id": 95,
        "prompt": "Write a python function to find the length of the smallest list in a list of lists.\n\ndef",
        "answer": "def smallest_list(lists):\n    smallest = lists[0]\n    for list in lists:\n        if len(list) < len(smallest):\n            smallest = list\n    return smallest"
    },
    {
        "task_id": 96,
        "prompt": "Write a python function to find the number of divisors of a given integer.\n\ndef",
        "answer": "def divisors(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "task_id": 97,
        "prompt": "Write a python function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n\ndef",
        "answer": "def freq_list(lst):\n    freq = {}\n    for i in lst:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq"
    },
    {
        "task_id": 98,
        "prompt": "Write a python function to multiply all the numbers in a list and divide with the length of the list.\n\ndef",
        "answer": "def multiply_divide(list):\n    result = 1\n    for i in list:\n        result *= i\n    return result / len(list)"
    },
    {
        "task_id": 99,
        "prompt": "Write a python function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n\ndef",
        "answer": "def decimalToBinary(n):\n    if n == 0:\n        return '0'\n    else:\n        return decimalToBinary(n // 2) + str(n % 2)"
    },
    {
        "task_id": 100,
        "prompt": "Write a python function to find the next smallest palindrome of a specified integer, returned as an integer.\n\ndef",
        "answer": "def next_palindrome(num):\n    num = str(num)\n    if num == num[::-1]:\n        return int(num + str(int(num) + 1))\n    else:\n        return int(num[:-1] + str(int(num[:-1]) + 1))"
    },
    {
        "task_id": 101,
        "prompt": "Write a python function to find the kth element in the given array using 1-based indexing.\n\ndef",
        "answer": "def kth_element(arr, k):\n    return sorted(arr)[k-1]"
    },
    {
        "task_id": 102,
        "prompt": "Write a python function to convert a snake case string to camel case string.\n\ndef",
        "answer": "def to_camel_case(string):\n    return ''.join(word.capitalize() for word in string.split('_'))"
    },
    {
        "task_id": 103,
        "prompt": "Write a python function to find the Eulerian number a(n, m).\n\ndef",
        "answer": "def eulerian_number(n, m):\n    return (n**2 + m**2)**0.5"
    },
    {
        "task_id": 104,
        "prompt": "Write a python function to sort each sublist of strings in a given list of lists.\n\ndef",
        "answer": "def sort_list(list_of_lists):\n    for i in range(len(list_of_lists)):\n        list_of_lists[i].sort()\n    return list_of_lists"
    },
    {
        "task_id": 105,
        "prompt": "Write a python function to count true booleans in the given list.\n\ndef",
        "answer": "def count_true(list):\n    count = 0\n    for i in list:\n        if i == True:\n            count += 1\n    return count"
    },
    {
        "task_id": 106,
        "prompt": "Write a python function to append the given list to the given tuples.\n\ndef",
        "answer": "def append_tuple(tup, list):\n    return tup + tuple(list)"
    },
    {
        "task_id": 108,
        "prompt": "Write a python function to merge three lists into a single sorted list.\n\ndef",
        "answer": "def merge_lists(list1, list2, list3):\n    merged_list = []\n    while list1 and list2 and list3:\n        if list1[0] < list2[0] and list1[0] < list3[0]:\n            merged_list.append(list1.pop(0))\n        elif list2[0] < list1[0] and list2[0] < list3[0]:\n            merged_list.append(list2.pop(0))\n        else:\n            merged_list.append(list3.pop(0))\n    while list1:\n        merged_list.append(list1.pop(0))\n    while list2:\n        merged_list.append(list2.pop(0))\n    while list3:\n        merged_list.append(list3.pop(0))\n    return merged_list"
    },
    {
        "task_id": 109,
        "prompt": "Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\ndef",
        "answer": "def odd_count(n):\n    return bin(n).count('1')"
    },
    {
        "task_id": 111,
        "prompt": "Write a python function to find the common elements in given nested lists.\n\ndef",
        "answer": "def common_elements(lst1, lst2):\n    return [element for element in lst1 if element in lst2]"
    },
    {
        "task_id": 113,
        "prompt": "Write a python function to check if a string represents an integer or not.\n\ndef",
        "answer": "def is_integer(s):\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "task_id": 115,
        "prompt": "Write a python function to check whether all dictionaries in a list are empty or not.\n\ndef",
        "answer": "def check_empty_dict(list_of_dicts):\n    for dict in list_of_dicts:\n        if dict:\n            return False\n    return True"
    },
    {
        "task_id": 116,
        "prompt": "Write a python function to convert a given tuple of positive integers into a single integer.\n\ndef",
        "answer": "def tuple_to_int(tuple):\n    result = 0\n    for i in tuple:\n        result = result * 10 + i\n    return result"
    },
    {
        "task_id": 117,
        "prompt": "Write a python function to convert all possible convertible elements in a list of lists to floats.\n\ndef",
        "answer": "def convert_to_float(lst):\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            lst[i][j] = float(lst[i][j])\n    return lst"
    },
    {
        "task_id": 118,
        "prompt": "Write a python function to convert a string to a list of strings split on the space character.\n\ndef",
        "answer": "def split_string(str):\n    return str.split(\" \")"
    },
    {
        "task_id": 119,
        "prompt": "Write a python function to find the element that appears only once in a sorted array.\n\ndef",
        "answer": "def find_element(arr):\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return arr[0] if arr[0]!= arr[1] else arr[1]\n    if len(arr) == 3:\n        return arr[0] if arr[0]!= arr[1] and arr[0]!= arr[2] else arr[1] if arr[1]!= arr[2] else arr[2]\n    if len(arr) == 4:\n        return arr[0] if arr[0]!= arr[1] and arr[0]!= arr[2] and arr[0]!= arr[3] else arr[1] if arr[1]!= arr[2] and arr[1]!= arr[3] else arr[2] if arr[2]!= arr[3] else arr[3]\n    if len(arr) == 5:\n        return arr[0] if arr[0]!= arr[1] and arr[0]!= arr[2] and arr[0]!= arr[3] and arr[0"
    },
    {
        "task_id": 120,
        "prompt": "Write a python function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n\ndef",
        "answer": "def max_product(lst):\n    max_product = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            max_product = max(max_product, abs(lst[i][0] * lst[j][1]), abs(lst[i][1] * lst[j][0]))\n    return max_product"
    },
    {
        "task_id": 123,
        "prompt": "Write a python function to sum all amicable numbers from 1 to a specified number.\n\ndef",
        "answer": "def divisors(n):\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors"
    },
    {
        "task_id": 124,
        "prompt": "Write a python function to get the angle of a complex number.\n\ndef",
        "answer": "def complex_angle(z):\n    return math.atan2(z.imag, z.real)"
    },
    {
        "task_id": 125,
        "prompt": "Write a python function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\ndef",
        "answer": "def max_diff(s):\n    max_diff = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            diff = s[i:j].count('0') - s[i:j].count('1')\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "task_id": 126,
        "prompt": "Write a python function to find the sum of common divisors of two given numbers.\n\ndef",
        "answer": "def sum_common_divisors(a, b):\n    \"\"\"\n    >>> sum_common_divisors(12, 15)\n    6\n    >>> sum_common_divisors(12, 18)\n    12\n    >>> sum_common_divisors(12, 20)\n    12\n    >>> sum_common_divisors(12, 24)\n    8\n    >>> sum_common_divisors(12, 30)\n    6\n    >>> sum_common_divisors(12, 36)\n    12\n    >>> sum_common_divisors(12, 40)\n    12\n    >>> sum_common_divisors(12, 48)\n    8\n    >>> sum_common_divisors(12, 60)\n    6\n    >>> sum_common_divisors(12, 72)\n    12\n    >>> sum_common_divisors(12, 96)\n    8\n    >>> sum_common_divisors(12, 120)\n    6\n    >>>"
    },
    {
        "task_id": 127,
        "prompt": "Write a python function to multiply two integers.\n\ndef",
        "answer": "def multiply(a,b):\n    return a*b"
    },
    {
        "task_id": 128,
        "prompt": "Write a python function to find words that are longer than n characters from a given list of words.\n\ndef",
        "answer": "def longer_than_n(words, n):\n    return [word for word in words if len(word) > n]"
    },
    {
        "task_id": 129,
        "prompt": "Write a python function to calculate whether the matrix is a magic square.\n\ndef",
        "answer": "def magic_square(matrix):\n    if len(matrix)!= len(matrix[0]):\n        return False\n    if len(matrix)!= 3:\n        return False\n    if sum(matrix[0])!= 15:\n        return False\n    if sum(matrix[1])!= 15:\n        return False\n    if sum(matrix[2])!= 15:\n        return False\n    if sum(matrix[0][0:3])!= 15:\n        return False\n    if sum(matrix[1][0:3])!= 15:\n        return False\n    if sum(matrix[2][0:3])!= 15:\n        return False\n    if sum(matrix[0][3:6])!= 15:\n        return False\n    if sum(matrix[1][3:6])!= 15:\n        return False\n    if sum(matrix[2][3:6])!= 15:\n        return False\n    if sum(matrix[0][6:9])!= 15:\n        return False\n    if sum(matrix[1][6:9])!= 15:\n        return False\n    if sum(matrix[2"
    },
    {
        "task_id": 130,
        "prompt": "Write a python function to find the item with maximum frequency in a given list.\n\ndef",
        "answer": "def max_freq(lst):\n    max_freq = 0\n    max_freq_item = None\n    for item in lst:\n        freq = lst.count(item)\n        if freq > max_freq:\n            max_freq = freq\n            max_freq_item = item\n    return max_freq_item"
    },
    {
        "task_id": 131,
        "prompt": "Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n\ndef",
        "answer": "def reverseVowels(s):\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    s = list(s)\n    i = 0\n    j = len(s) - 1\n    while i < j:\n        if s[i] not in vowels:\n            i += 1\n        elif s[j] not in vowels:\n            j -= 1\n        else:\n            s[i], s[j] = s[j], s[i]\n            i += 1\n            j -= 1\n    return ''.join(s)"
    },
    {
        "task_id": 132,
        "prompt": "Write a python function to convert a tuple to a string.\n\ndef",
        "answer": "def tuple_to_string(tup):\n    return ''.join(tup)"
    },
    {
        "task_id": 133,
        "prompt": "Write a python function to calculate the sum of the negative numbers of a given list of numbers.\n\ndef",
        "answer": "def sum_neg_numbers(nums):\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "task_id": 135,
        "prompt": "Write a python function to find the nth hexagonal number.\n\ndef",
        "answer": "def hex_num(n):\n    return n*(2*n-1)"
    },
    {
        "task_id": 137,
        "prompt": "Write a python function to find the ratio of zeroes to non-zeroes in an array of integers.\n\ndef",
        "answer": "def zeroes_to_non_zeroes(arr):\n    zeroes = 0\n    non_zeroes = 0\n    for i in arr:\n        if i == 0:\n            zeroes += 1\n        else:\n            non_zeroes += 1\n    return zeroes / non_zeroes"
    },
    {
        "task_id": 138,
        "prompt": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n\ndef",
        "answer": "def check_powers_of_2(n):\n    if n == 0:\n        return True\n    if n == 1:\n        return False\n    if n % 2 == 0:\n        return check_powers_of_2(n/2)\n    else:\n        return check_powers_of_2(n-1)"
    },
    {
        "task_id": 139,
        "prompt": "Write a python function to find the circumference of a circle.\n\ndef",
        "answer": "def circumference(r):\n    return 2*3.14*r"
    },
    {
        "task_id": 140,
        "prompt": "Write a python function to flatten the list of lists into a single set of numbers.\n\ndef",
        "answer": "def flatten(l):\n    return [item for sublist in l for item in sublist]"
    },
    {
        "task_id": 141,
        "prompt": "Write a python function to sort a list of elements.\n\ndef",
        "answer": "def sort_list(list):\n    for i in range(len(list)):\n        for j in range(i+1, len(list)):\n            if list[i] > list[j]:\n                list[i], list[j] = list[j], list[i]\n    return list"
    },
    {
        "task_id": 142,
        "prompt": "Write a python function to count number items that are identical in the same position of three given lists.\n\ndef",
        "answer": "def count_identical_items(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "task_id": 143,
        "prompt": "Write a python function to find number of lists present in the given tuple.\n\ndef",
        "answer": "def count_list(tup):\n    count = 0\n    for i in tup:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "task_id": 145,
        "prompt": "Write a python function to find the maximum difference between any two elements in a given array.\n\ndef",
        "answer": "def max_diff(arr):\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[j] - arr[i] > max_diff:\n                max_diff = arr[j] - arr[i]\n    return max_diff"
    },
    {
        "task_id": 160,
        "prompt": "Write a python function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\ndef",
        "answer": "def gcd(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a"
    },
    {
        "task_id": 161,
        "prompt": "Write a python function to remove all elements from a given list present in another list.\n\ndef",
        "answer": "def remove_list_elements(list1, list2):\n    for i in list2:\n        if i in list1:\n            list1.remove(i)\n    return list1"
    },
    {
        "task_id": 162,
        "prompt": "Write a python function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n\ndef",
        "answer": "def sum_of_odd_numbers(n):\n    sum = 0\n    for i in range(n//2):\n        sum += n - 2*i\n    return sum"
    },
    {
        "task_id": 163,
        "prompt": "Write a python function to calculate the area of a regular polygon given the length and number of its sides.\n\ndef",
        "answer": "def area(length, sides):\n    return length * sides / 2"
    },
    {
        "task_id": 164,
        "prompt": "Write a python function to determine if the sum of the divisors of two integers are the same.\n\ndef",
        "answer": "def is_amicable(a, b):\n    return sum(divisors(a)) == b and sum(divisors(b)) == a"
    },
    {
        "task_id": 165,
        "prompt": "Write a python function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\ndef",
        "answer": "def count_same_chars(str):\n    count = 0\n    for i in range(len(str)):\n        if str[i].lower() in 'abcdefghijklmnopqrstuvwxyz':\n            count += 1\n    return count"
    },
    {
        "task_id": 166,
        "prompt": "Write a python function that counts the number of pairs of integers in a list that xor to an even number.\n\ndef",
        "answer": "def count_pairs(arr):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] ^ arr[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "task_id": 167,
        "prompt": "Write a python function to find the smallest power of 2 greater than or equal to n.\n\ndef",
        "answer": "def power(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 4\n    if n == 5:\n        return 8\n    if n == 6:\n        return 8\n    if n == 7:\n        return 8\n    if n == 8:\n        return 8\n    if n == 9:\n        return 8\n    if n == 10:\n        return 16\n    if n == 11:\n        return 16\n    if n == 12:\n        return 16\n    if n == 13:\n        return 16\n    if n == 14:\n        return 16\n    if n == 15:\n        return 16\n    if n == 16:\n        return 16\n    if n == 17:\n        return 16\n    if n == 18:\n        return 16\n    if n == 19:\n        return 16\n    if n == 2"
    },
    {
        "task_id": 168,
        "prompt": "Write a python function to count the number of occurrences of a number in a given list.\n\ndef",
        "answer": "def count_occurrences(lst, num):\n    count = 0\n    for i in lst:\n        if i == num:\n            count += 1\n    return count"
    },
    {
        "task_id": 170,
        "prompt": "Write a python function to find the sum of numbers in a list within a range specified by two indices.\n\ndef",
        "answer": "def sum_of_list(list, start, end):\n    sum = 0\n    for i in range(start, end+1):\n        sum += list[i]\n    return sum"
    },
    {
        "task_id": 171,
        "prompt": "Write a python function to find the perimeter of a regular pentagon from the length of its sides.\n\ndef",
        "answer": "def pentagon_perimeter(side):\n    return 5 * side"
    },
    {
        "task_id": 172,
        "prompt": "Write a python function to count the number of occurence of the string'std' in a given string.\n\ndef",
        "answer": "def count_std(str):\n    count = 0\n    for i in range(len(str)):\n        if str[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "task_id": 222,
        "prompt": "Write a python function to check if all the elements in tuple have same data type or not.\n\ndef",
        "answer": "def check_tuple(tup):\n    return len(set(type(i) for i in tup)) == 1"
    },
    {
        "task_id": 223,
        "prompt": "Write a python function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\ndef",
        "answer": "def majorityElement(nums, n):\n    if n == 1:\n        return nums[0]\n    if nums[0] == nums[1]:\n        return nums[0]\n    if nums[0] == nums[2]:\n        return nums[0]\n    if nums[1] == nums[2]:\n        return nums[1]\n    if nums[0] == nums[1] == nums[2]:\n        return nums[0]\n    if nums[0] == nums[1] == nums[2] == nums[3]:\n        return nums[0]\n    if nums[0] == nums[1] == nums[2] == nums[3] == nums[4]:\n        return nums[0]\n    if nums[0] == nums[1] == nums[2] == nums[3] == nums[4] == nums[5]:\n        return nums[0]\n    if nums[0] == nums[1] == nums[2] == nums[3] == nums[4] == nums[5] == nums[6]:\n        return nums[0]\n    if nums[0] == nums[1] == nums[2] == nums["
    },
    {
        "task_id": 224,
        "prompt": "Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n\ndef",
        "answer": "def countSetBits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "task_id": 226,
        "prompt": "Write a python function to remove the characters which have odd index values of a given string.\n\ndef",
        "answer": "def remove_odd_index_char(str):\n    return str[1::2]"
    },
    {
        "task_id": 227,
        "prompt": "Write a python function to find minimum of three numbers.\n\ndef",
        "answer": "def min_of_three(a, b, c):\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c"
    },
    {
        "task_id": 228,
        "prompt": "Write a python function to check whether all the bits are unset in the given range or not.\n\ndef",
        "answer": "def check_bit_set(n, l, r):\n    return (n & ((1 << r) - (1 << l))) == 0"
    },
    {
        "task_id": 229,
        "prompt": "Write a python function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n\ndef",
        "answer": "def arrange(arr, n):\n    # Fill this in.\n    neg = []\n    pos = []\n    for i in arr:\n        if i < 0:\n            neg.append(i)\n        else:\n            pos.append(i)\n    return neg + pos"
    },
    {
        "task_id": 230,
        "prompt": "Write a python function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n\ndef",
        "answer": "def replace_blank(str, char):\n    return str.replace(\" \", char)"
    },
    {
        "task_id": 232,
        "prompt": "Write a python function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n\ndef",
        "answer": "def largest_n(lst, n):\n    return sorted(lst, reverse=True)[:n]"
    },
    {
        "task_id": 233,
        "prompt": "Write a python function to find the lateral surface area of a cylinder.\n\ndef",
        "answer": "def lateral_surface_area(radius, height):\n    return 2 * math.pi * radius * (radius + height)"
    },
    {
        "task_id": 234,
        "prompt": "Write a python function to find the volume of a cube given its side length.\n\ndef",
        "answer": "def cube_volume(side):\n    return side**3"
    },
    {
        "task_id": 235,
        "prompt": "Write a python function to set all even bits of a given number.\n\ndef",
        "answer": "def set_even_bits(n):\n    return n | (n >> 1)"
    },
    {
        "task_id": 237,
        "prompt": "Write a python function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n\ndef",
        "answer": "def count_tuples(tuples):\n    # Your code here\n    return dict(tuples)"
    },
    {
        "task_id": 238,
        "prompt": "Write a python function to count the number of non-empty substrings of a given string.\n\ndef",
        "answer": "def count_substring(string):\n    count = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            if string[i:j]!= \"\":\n                count += 1\n    return count"
    },
    {
        "task_id": 239,
        "prompt": "Write a python function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n\ndef",
        "answer": "def count_sequences(m, n):\n    if n == 1:\n        return m\n    elif n == 2:\n        return m * (m + 1) // 2\n    else:\n        return (m + 1) * (m + 2) * (m + 3) // 6 * count_sequences(m, n - 1)"
    },
    {
        "task_id": 240,
        "prompt": "Write a python function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n\ndef",
        "answer": "def replace_last(lst1, lst2):\n    lst1[-1] = lst2\n    return lst1"
    },
    {
        "task_id": 242,
        "prompt": "Write a python function to count the total number of characters in a string.\n\ndef",
        "answer": "def count_char(str):\n    count = 0\n    for i in str:\n        count += 1\n    return count"
    },
    {
        "task_id": 244,
        "prompt": "Write a python function to find the next perfect square greater than a given number.\n\ndef",
        "answer": "def next_square(sq):\n    return int(sq ** 0.5) + 1 if (sq ** 0.5) % 1 == 0 else -1"
    },
    {
        "task_id": 245,
        "prompt": "Write a python function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n\ndef",
        "answer": "def max_bitonic_subsequence(arr):\n    n = len(arr)\n    dp = [[0 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        dp[i][i] = arr[i]\n    for i in range(n-2, -1, -1):\n        for j in range(i+1, n):\n            dp[i][j] = max(dp[i][j-1], dp[i+1][j]) + arr[j]\n    return dp[0][n-1]"
    },
    {
        "task_id": 246,
        "prompt": "Write a python function for computing square roots using the babylonian method.\n\ndef",
        "answer": "def sqrt(x):\n    \"\"\"\n    Compute the square root of x using the babylonian method.\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"Cannot compute square root of negative number\")\n    guess = x / 2\n    while abs(guess * guess - x) > 0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
    },
    {
        "task_id": 247,
        "prompt": "Write a python function to find the length of the longest palindromic subsequence in the given string.\n\ndef",
        "answer": "def longest_palindromic_subsequence(string):\n    n = len(string)\n    dp = [[0 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n):\n            if string[i] == string[j]:\n                dp[i][j] = 2 + dp[i+1][j-1]\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    return dp[0][n-1]"
    },
    {
        "task_id": 248,
        "prompt": "Write a python function that takes in an integer n and calculates the harmonic sum of n-1.\n\ndef",
        "answer": "def harmonic_sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum"
    },
    {
        "task_id": 249,
        "prompt": "Write a python function to find the intersection of two arrays.\n\ndef",
        "answer": "def intersection(lst1, lst2):\n    lst3 = [value for value in lst1 if value in lst2]\n    return lst3"
    },
    {
        "task_id": 250,
        "prompt": "Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n\ndef",
        "answer": "def count_occurences(tuple, element):\n    count = 0\n    for i in tuple:\n        if i == element:\n            count += 1\n    return count"
    },
    {
        "task_id": 251,
        "prompt": "Write a python function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n\ndef",
        "answer": "def insert_before(lst, n):\n    new_lst = []\n    for i in lst:\n        new_lst.append(n)\n        new_lst.append(i)\n    return new_lst"
    },
    {
        "task_id": 252,
        "prompt": "Write a python function to convert complex numbers to polar coordinates.\n\ndef",
        "answer": "def complex_to_polar(complex_number):\n    \"\"\"\n    Converts a complex number to polar coordinates."
    },
    {
        "task_id": 253,
        "prompt": "Write a python function that returns the number of integer elements in a given list.\n\ndef",
        "answer": "def count_int(lst):\n    return len([x for x in lst if type(x) == int])"
    },
    {
        "task_id": 255,
        "prompt": "Write a python function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n\ndef",
        "answer": "def combinations(lst, n):\n    return list(itertools.combinations(lst, n))"
    },
    {
        "task_id": 256,
        "prompt": "Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n\ndef",
        "answer": "def count_primes(num):\n    count = 0\n    for i in range(2, num):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "task_id": 257,
        "prompt": "Write a python function that takes in two numbers and returns a tuple with the second number and then the first number.\n\ndef",
        "answer": "def swap(num1, num2):\n    return (num2, num1)"
    },
    {
        "task_id": 259,
        "prompt": "Write a python function to maximize the given two tuples.\n\ndef",
        "answer": "def max_tuple(tuple1, tuple2):\n    if tuple1[0] > tuple2[0]:\n        return tuple1\n    else:\n        return tuple2"
    },
    {
        "task_id": 260,
        "prompt": "Write a python function to find the nth newman\u2013shanks\u2013williams prime number.\n\ndef",
        "answer": "def newman_shanks_williams(n):\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 5\n    if n == 4:\n        return 7\n    if n == 5:\n        return 11\n    if n == 6:\n        return 13\n    if n == 7:\n        return 17\n    if n == 8:\n        return 19\n    if n == 9:\n        return 23\n    if n == 10:\n        return 29\n    if n == 11:\n        return 31\n    if n == 12:\n        return 37\n    if n == 13:\n        return 41\n    if n == 14:\n        return 43\n    if n == 15:\n        return 47\n    if n == 16:\n        return 53\n    if n == 17:\n        return 59\n    if n == 18:\n        return 61\n    if n == 19:\n        return 67\n    if n =="
    },
    {
        "task_id": 261,
        "prompt": "Write a python function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n\ndef",
        "answer": "def division(tuple1, tuple2):\n    return tuple(map(lambda x, y: x / y, tuple1, tuple2))"
    },
    {
        "task_id": 262,
        "prompt": "Write a python function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\ndef",
        "answer": "def split_list(lst, L):\n    return (lst[:L], lst[L:])"
    },
    {
        "task_id": 264,
        "prompt": "Write a python function to calculate a dog's age in dog's years.\n\ndef",
        "answer": "def dog_years(age):\n    return age * 7"
    },
    {
        "task_id": 265,
        "prompt": "Write a python function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n\ndef",
        "answer": "def split_list(lst, n):\n    return [lst[i::n] for i in range(n)]"
    },
    {
        "task_id": 266,
        "prompt": "Write a python function to find the lateral surface area of a cube given its side length.\n\ndef",
        "answer": "def lateral_surface_area(side_length):\n    return 6 * side_length ** 2"
    },
    {
        "task_id": 267,
        "prompt": "Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n\ndef",
        "answer": "def sum_squares(n):\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "task_id": 268,
        "prompt": "Write a python function to find then'th star number.\n\ndef",
        "answer": "def star_number(n):\n    return 2 ** (n - 1) + 1"
    },
    {
        "task_id": 269,
        "prompt": "Write a python function to find the ascii value of a character.\n\ndef",
        "answer": "def get_ascii(char):\n    return ord(char)"
    },
    {
        "task_id": 270,
        "prompt": "Write a python function to find the sum of even numbers at even positions of a list.\n\ndef",
        "answer": "def sum_even_at_even_pos(lst):\n    sum = 0\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 == 0:\n            sum += lst[i]\n    return sum"
    },
    {
        "task_id": 271,
        "prompt": "Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n\ndef",
        "answer": "def sum_of_even_powers(n):\n    sum = 0\n    for i in range(n):\n        if i % 2 == 0:\n            sum += i ** 5\n    return sum"
    },
    {
        "task_id": 272,
        "prompt": "Write a python function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n\ndef",
        "answer": "def rear_element(list_of_tuples):\n    return [x[1] for x in list_of_tuples]"
    },
    {
        "task_id": 273,
        "prompt": "Write a python function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\ndef",
        "answer": "def subtraction(tuple1, tuple2):\n    return tuple(tuple1[i] - tuple2[i] for i in range(len(tuple1)))"
    },
    {
        "task_id": 274,
        "prompt": "Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n\ndef",
        "answer": "def binomial_sum(n):\n    sum = 0\n    for i in range(0, n):\n        sum += binomial(n, i) * 2 ** i\n    return sum"
    },
    {
        "task_id": 276,
        "prompt": "Write a python function that takes in the radius and height of a cylinder and returns the the volume.\n\ndef",
        "answer": "def cylinder_volume(radius, height):\n    return (math.pi * radius**2 * height)"
    },
    {
        "task_id": 277,
        "prompt": "Write a python function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n\ndef",
        "answer": "def filter_dict(d, n):\n    return {k: v for k, v in d.items() if v >= n}"
    },
    {
        "task_id": 278,
        "prompt": "Write a python function to find the number of elements that occurs before the tuple element in the given tuple.\n\ndef",
        "answer": "def count_elements(tuple_elements, element):\n    count = 0\n    for i in tuple_elements:\n        if i == element:\n            break\n        count += 1\n    return count"
    },
    {
        "task_id": 279,
        "prompt": "Write a python function to find the nth decagonal number.\n\ndef",
        "answer": "def decagonal(n):\n    return n*(3*n-1)/2"
    },
    {
        "task_id": 280,
        "prompt": "Write a python function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n\ndef",
        "answer": "def find_index(array, element):\n    # Your code here\n    for i in range(len(array)):\n        if array[i] == element:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "task_id": 281,
        "prompt": "Write a python function to check if the elements of a given list are unique or not.\n\ndef",
        "answer": "def unique(lst):\n    return len(lst) == len(set(lst))"
    },
    {
        "task_id": 282,
        "prompt": "Write a python function to subtract two lists element-wise.\n\ndef",
        "answer": "def subtraction(list1, list2):\n    return [x - y for x, y in zip(list1, list2)]"
    },
    {
        "task_id": 283,
        "prompt": "Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\ndef",
        "answer": "def digit_frequency(n):\n    # Your code here\n    return True"
    },
    {
        "task_id": 284,
        "prompt": "Write a python function that takes in a list and element and checks whether all items in the list are equal to the given element.\n\ndef",
        "answer": "def check_all_equal(lst, element):\n    return all(x == element for x in lst)"
    },
    {
        "task_id": 285,
        "prompt": "Write a python function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n\ndef",
        "answer": "def check_ab(str):\n    if str[0] == 'a' and str[1] == 'b' and str[2] == 'b' or str[0] == 'a' and str[1] == 'b' and str[2] == 'b' and str[3] == 'b':\n        return True\n    else:\n        return False"
    },
    {
        "task_id": 286,
        "prompt": "Write a python function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n\ndef",
        "answer": "def find_max_sum(arr, k):\n    n = len(arr)\n    if n == 0:\n        return 0\n    if k == 1:\n        return max(arr)\n    if k > n:\n        return find_max_sum(arr, n)\n    max_sum = 0\n    for i in range(n - k + 1):\n        max_sum = max(max_sum, sum(arr[i:i + k]))\n    return max_sum"
    },
    {
        "task_id": 287,
        "prompt": "Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n\ndef",
        "answer": "def sum_of_squares(n):\n    sum = 0\n    for i in range(n):\n        if i % 2 == 0:\n            sum += i ** 2\n    return sum"
    },
    {
        "task_id": 290,
        "prompt": "Write a python function to find the list of maximum length in a list of lists.\n\ndef",
        "answer": "def max_length(lst):\n    max_len = 0\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len"
    },
    {
        "task_id": 291,
        "prompt": "Write a python function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\ndef",
        "answer": "def fence_painting(n, k):\n    if n == 0:\n        return 0\n    if n == 1:\n        return k\n    if n == 2:\n        return k * k\n    dp = [0] * (n + 1)\n    dp[0] = 0\n    dp[1] = k\n    dp[2] = k * k\n    for i in range(3, n + 1):\n        dp[i] = (k - 1) * (dp[i - 1] + dp[i - 2])\n    return dp[n]"
    },
    {
        "task_id": 292,
        "prompt": "Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n\ndef",
        "answer": "def quotient(a, b):\n    return a // b"
    },
    {
        "task_id": 293,
        "prompt": "Write a python function to find the third side of a right angled triangle.\n\ndef",
        "answer": "def third_side(a, b):\n    return a**2 + b**2 - 2*a*b"
    },
    {
        "task_id": 294,
        "prompt": "Write a python function to find the maximum value in a given heterogeneous list.\n\ndef",
        "answer": "def max_of_list(lst):\n    max_num = lst[0]\n    for i in lst:\n        if i > max_num:\n            max_num = i\n    return max_num"
    },
    {
        "task_id": 295,
        "prompt": "Write a python function to return the sum of all divisors of a number.\n\ndef",
        "answer": "def sum_divisors(n):\n    sum = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum += i\n    return sum"
    },
    {
        "task_id": 296,
        "prompt": "Write a python function to count inversions in an array.\n\ndef",
        "answer": "def merge(arr, l, m, r):\n    n1 = m - l + 1\n    n2 = r - m\n    L = [0] * (n1)\n    R = [0] * (n2)\n    for i in range(0, n1):\n        L[i] = arr[l + i]\n    for j in range(0, n2):\n        R[j] = arr[m + 1 + j]\n    i = 0\n    j = 0\n    k = l\n    while i < n1 and j < n2:\n        if L[i] <= R[j]:\n            arr[k] = L[i]\n            i += 1\n        else:\n            arr[k] = R[j]\n            j += 1\n        k += 1\n    while i < n1:\n        arr[k] = L[i]\n        i += 1\n        k += 1\n    while j < n2:\n        arr[k] = R[j]\n        j += 1\n        k += 1"
    },
    {
        "task_id": 297,
        "prompt": "Write a python function to flatten a given nested list structure.\n\ndef",
        "answer": "def flatten(l):\n    return [item for sublist in l for item in sublist]"
    },
    {
        "task_id": 299,
        "prompt": "Write a python function to calculate the maximum aggregate from the list of tuples.\n\ndef",
        "answer": "def maximum_aggregate(lst):\n    return max(lst, key=lambda x: x[0] * x[1])[0] * max(lst, key=lambda x: x[0] * x[1])[1]"
    },
    {
        "task_id": 300,
        "prompt": "Write a python function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n\ndef",
        "answer": "def count_binary_sequences(n):\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    return count_binary_sequences(n-1) + count_binary_sequences(n-2)"
    },
    {
        "task_id": 301,
        "prompt": "Write a python function to find the depth of a dictionary.\n\ndef",
        "answer": "def depth(d):\n    if isinstance(d, dict):\n        return 1 + (max(map(depth, d.values())) if d else 0)\n    return 0"
    },
    {
        "task_id": 304,
        "prompt": "Write a python function to find element at a given index after number of rotations.\n\ndef",
        "answer": "def find_element(arr, n, k):\n    # Your code goes here\n    if k > n:\n        k = k % n\n    return arr[k-1]"
    },
    {
        "task_id": 305,
        "prompt": "Write a python function to return two words from a list of words starting with letter 'p'.\n\ndef",
        "answer": "def words_starting_with_p(words):\n    return [word for word in words if word.startswith('p')]"
    },
    {
        "task_id": 306,
        "prompt": "Write a python function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n\ndef",
        "answer": "def max_sum_inc_subseq(arr, k):\n    n = len(arr)\n    dp = [[0 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        dp[i][i] = arr[i]\n    for i in range(n-2, -1, -1):\n        for j in range(i+1, n):\n            if j-i <= k:\n                dp[i][j] = max(arr[i:j+1])\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    return dp[0][n-1]"
    },
    {
        "task_id": 307,
        "prompt": "Write a python function to get a colon of a tuple.\n\ndef",
        "answer": "def get_colon(tup, index):\n    return tup[index]"
    },
    {
        "task_id": 308,
        "prompt": "Write a python function to find the specified number of largest products from two given lists, selecting one factor from each list.\n\ndef",
        "answer": "def find_largest_products(list1, list2, n):\n    # Your code here\n    list1.sort()\n    list2.sort()\n    return list1[-n:] * list2[-n:]"
    },
    {
        "task_id": 309,
        "prompt": "Write a python function to find the maximum of two numbers.\n\ndef",
        "answer": "def max_num(num1, num2):\n    if num1 > num2:\n        return num1\n    else:\n        return num2"
    },
    {
        "task_id": 310,
        "prompt": "Write a python function to convert a given string to a tuple of characters.\n\ndef",
        "answer": "def string_to_tuple(string):\n    return tuple(string)"
    },
    {
        "task_id": 311,
        "prompt": "Write a python function to set the left most unset bit.\n\ndef",
        "answer": "def set_leftmost_unset_bit(n):\n    return n | (n + 1)"
    },
    {
        "task_id": 312,
        "prompt": "Write a python function to find the volume of a cone.\n\ndef",
        "answer": "def cone_volume(r,h):\n    return (1/3)*math.pi*r*r*h"
    },
    {
        "task_id": 388,
        "prompt": "Write a python function to find the highest power of 2 that is less than or equal to n.\n\ndef",
        "answer": "def highest_power_of_2(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 4\n    if n == 5:\n        return 8\n    if n == 6:\n        return 8\n    if n == 7:\n        return 8\n    if n == 8:\n        return 8\n    if n == 9:\n        return 8\n    if n == 10:\n        return 16\n    if n == 11:\n        return 16\n    if n == 12:\n        return 16\n    if n == 13:\n        return 16\n    if n == 14:\n        return 16\n    if n == 15:\n        return 16\n    if n == 16:\n        return 16\n    if n == 17:\n        return 16\n    if n == 18:\n        return 16\n    if n == 19:\n        return 16"
    },
    {
        "task_id": 389,
        "prompt": "Write a python function to find then'th lucas number.\n\ndef",
        "answer": "def lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return lucas(n-1) + lucas(n-2)"
    },
    {
        "task_id": 390,
        "prompt": "Write a python function to apply a given format string to all of the elements in a list.\n\ndef",
        "answer": "def format_list(l, format_string):\n    return [format_string.format(x) for x in l]"
    },
    {
        "task_id": 391,
        "prompt": "Write a python function to convert more than one list to nested dictionary.\n\ndef",
        "answer": "def convert_list_to_nested_dict(list_of_lists):\n    return {list_of_lists[i][0]: list_of_lists[i][1:] for i in range(len(list_of_lists))}"
    },
    {
        "task_id": 392,
        "prompt": "Write a python function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n\ndef",
        "answer": "def max_sum(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 5\n    if n == 5:\n        return 7\n    if n == 6:\n        return 9\n    if n == 7:\n        return 11\n    if n == 8:\n        return 13\n    if n == 9:\n        return 15\n    if n == 10:\n        return 18\n    if n == 11:\n        return 20\n    if n == 12:\n        return 22\n    if n == 13:\n        return 25\n    if n == 14:\n        return 27\n    if n == 15:\n        return 30\n    if n == 16:\n        return 32\n    if n == 17:\n        return 35\n    if n == 18:\n        return 37\n    if n == 19:\n        return 40\n   "
    },
    {
        "task_id": 393,
        "prompt": "Write a python function to find the list with maximum length.\n\ndef",
        "answer": "def max_list(lst):\n    max_len = 0\n    max_lst = []\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_lst = i\n    return max_lst"
    },
    {
        "task_id": 394,
        "prompt": "Write a python function to check if given tuple contains no duplicates.\n\ndef",
        "answer": "def check_duplicates(tup):\n    return len(tup) == len(set(tup))"
    },
    {
        "task_id": 395,
        "prompt": "Write a python function to find the first non-repeated character in a given string.\n\ndef",
        "answer": "def first_non_repeated_char(str):\n    for i in str:\n        if str.count(i) == 1:\n            return i\n    return None"
    },
    {
        "task_id": 396,
        "prompt": "Write a python function to check whether the given string starts and ends with the same character or not.\n\ndef",
        "answer": "def check_string(str1):\n    if str1[0] == str1[-1]:\n        return True\n    else:\n        return False"
    },
    {
        "task_id": 397,
        "prompt": "Write a python function to find the median of three numbers.\n\ndef",
        "answer": "def median(a, b, c):\n    if a > b:\n        a, b = b, a\n    if b > c:\n        b, c = c, b\n    if a > b:\n        a, b = b, a\n    return b"
    },
    {
        "task_id": 398,
        "prompt": "Write a python function to compute the sum of digits of each number of a given list.\n\ndef",
        "answer": "def sum_digits(num):\n    sum = 0\n    for i in num:\n        sum += int(i)\n    return sum"
    },
    {
        "task_id": 399,
        "prompt": "Write a python function to perform the mathematical bitwise xor operation across the given tuples.\n\ndef",
        "answer": "def xor(tuple1, tuple2):\n    return tuple(i^j for i,j in zip(tuple1, tuple2))"
    },
    {
        "task_id": 400,
        "prompt": "Write a python function to extract the number of unique tuples in the given list.\n\ndef",
        "answer": "def unique_tuples(list1):\n    return len(set(tuple(i) for i in list1))"
    },
    {
        "task_id": 401,
        "prompt": "Write a python function to perform index wise addition of tuple elements in the given two nested tuples.\n\ndef",
        "answer": "def add_tuple(tup1, tup2):\n    return tuple(map(sum, zip(tup1, tup2)))"
    },
    {
        "task_id": 404,
        "prompt": "Write a python function to find the minimum of two numbers.\n\ndef",
        "answer": "def min(a,b):\n    if a<b:\n        return a\n    else:\n        return b"
    },
    {
        "task_id": 405,
        "prompt": "Write a python function to check whether an element exists within a tuple.\n\ndef",
        "answer": "def check_tuple(tup, element):\n    if element in tup:\n        return True\n    else:\n        return False"
    },
    {
        "task_id": 406,
        "prompt": "Write a python function to find whether the parity of a given number is odd.\n\ndef",
        "answer": "def parity(n):\n    if n % 2 == 0:\n        return \"even\"\n    else:\n        return \"odd\""
    },
    {
        "task_id": 407,
        "prompt": "Write a python function to create the next bigger number by rearranging the digits of a given number.\n\ndef",
        "answer": "def next_bigger(n):\n    n = str(n)\n    for i in range(len(n)-1, 0, -1):\n        if n[i-1] < n[i]:\n            break\n    else:\n        return -1\n    for j in range(len(n)-1, i-1, -1):\n        if n[j] > n[i-1]:\n            break\n    n = n[:j] + n[i-1] + n[j:i-1] + n[i:]\n    return int(n)"
    },
    {
        "task_id": 408,
        "prompt": "Write a python function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\ndef",
        "answer": "def find_k_smallest_pairs(arr1, arr2, k):\n    # Fill this in.\n    arr = []\n    for i in arr1:\n        for j in arr2:\n            arr.append((i, j))\n    arr.sort(key=lambda x: x[0] + x[1])\n    return arr[:k]"
    },
    {
        "task_id": 409,
        "prompt": "Write a python function to find the minimum product from the pairs of tuples within a given list.\n\ndef",
        "answer": "def min_product(list_of_tuples):\n    min_product = 100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
    },
    {
        "task_id": 410,
        "prompt": "Write a python function to find the minimum value in a given heterogeneous list.\n\ndef",
        "answer": "def min_value(lst):\n    if len(lst) == 0:\n        return None\n    else:\n        min_value = lst[0]\n        for i in lst:\n            if i < min_value:\n                min_value = i\n        return min_value"
    },
    {
        "task_id": 411,
        "prompt": "Write a python function to convert the given snake case string to camel case string.\n\ndef",
        "answer": "def snake_to_camel(s):\n    return ''.join(word.title() for word in s.split('_'))"
    },
    {
        "task_id": 412,
        "prompt": "Write a python function to remove odd numbers from a given list.\n\ndef",
        "answer": "def remove_odd(list):\n    new_list = []\n    for i in list:\n        if i % 2 == 0:\n            new_list.append(i)\n    return new_list"
    },
    {
        "task_id": 413,
        "prompt": "Write a python function to extract the nth element from a given list of tuples.\n\ndef",
        "answer": "def nth_element(n, list_of_tuples):\n    return list_of_tuples[n-1]"
    },
    {
        "task_id": 414,
        "prompt": "Write a python function to check whether any value in a sequence exists in a sequence or not.\n\ndef",
        "answer": "def check_exists(seq, val):\n    for i in seq:\n        if i == val:\n            return True\n    return False"
    },
    {
        "task_id": 415,
        "prompt": "Write a python function to find a pair with highest product from a given array of integers.\n\ndef",
        "answer": "def find_pair_with_highest_product(arr):\n    max_product = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "task_id": 417,
        "prompt": "Write a python function to find common first element in given list of tuple.\n\ndef",
        "answer": "def common_element(list_of_tuple):\n    return list(set.intersection(*map(set, list_of_tuple)))"
    },
    {
        "task_id": 418,
        "prompt": "Write a python function to find the element of a list having maximum length.\n\ndef",
        "answer": "def max_len(lst):\n    max_len = 0\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len"
    },
    {
        "task_id": 419,
        "prompt": "Write a python function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n\ndef",
        "answer": "def round_numbers(numbers):\n    total = 0\n    for number in numbers:\n        total += round(number)\n    return total * len(numbers)"
    },
    {
        "task_id": 420,
        "prompt": "Write a python function to find the cube sum of first n even natural numbers.\n\ndef",
        "answer": "def cube_sum(n):\n    sum = 0\n    for i in range(n):\n        if i % 2 == 0:\n            sum += i ** 3\n    return sum"
    },
    {
        "task_id": 421,
        "prompt": "Write a python function to concatenate each element of tuple by the delimiter.\n\ndef",
        "answer": "def concat_tuple(tup, delim):\n    return delim.join(tup)"
    },
    {
        "task_id": 422,
        "prompt": "Write a python function to find the average of cubes of first n natural numbers.\n\ndef",
        "answer": "def average_of_cubes(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum/n"
    },
    {
        "task_id": 424,
        "prompt": "Write a python function to extract only the rear index element of each string in the given tuple.\n\ndef",
        "answer": "def rear_index(str_tuple):\n    return str_tuple[::-1]"
    },
    {
        "task_id": 425,
        "prompt": "Write a python function to count the number of sublists containing a particular element.\n\ndef",
        "answer": "def count_sublists(lst, element):\n    count = 0\n    for i in range(len(lst)):\n        if element in lst[i]:\n            count += 1\n    return count"
    },
    {
        "task_id": 426,
        "prompt": "Write a python function to filter odd numbers.\n\ndef",
        "answer": "def odd(n):\n    return n%2!= 0"
    },
    {
        "task_id": 427,
        "prompt": "Write a python function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n\ndef",
        "answer": "def convert_date(date):\n    return date.split(\"-\")[::-1]"
    },
    {
        "task_id": 428,
        "prompt": "Write a python function to sort the given array by using shell sort.\n\ndef",
        "answer": "def shellSort(arr):\n    n = len(arr)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap,n):\n            temp = arr[i]\n            j = i\n            while  j >= gap and arr[j-gap] >temp:\n                arr[j] = arr[j-gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2"
    },
    {
        "task_id": 429,
        "prompt": "Write a python function to extract the elementwise and tuples from the given two tuples.\n\ndef",
        "answer": "def tuple_element_wise(tuple1, tuple2):\n    return tuple(map(lambda x, y: x * y, tuple1, tuple2))"
    },
    {
        "task_id": 430,
        "prompt": "Write a python function to find the directrix of a parabola.\n\ndef",
        "answer": "def directrix(a, b, c):\n    return (-b + (b**2 - 4*a*c)**0.5)/(2*a)"
    },
    {
        "task_id": 431,
        "prompt": "Write a python function that takes two lists and returns true if they have at least one common element.\n\ndef",
        "answer": "def common_member(a, b):\n    a_set = set(a)\n    b_set = set(b)\n    if (a_set & b_set):\n        return True\n    else:\n        return False"
    },
    {
        "task_id": 432,
        "prompt": "Write a python function to find the median length of a trapezium.\n\ndef",
        "answer": "def median_length(a, b, c, d):\n    return (a + b + c + d) / 2"
    },
    {
        "task_id": 433,
        "prompt": "Write a python function to check whether the entered number is greater than the elements of the given array.\n\ndef",
        "answer": "def check_number(arr, n):\n    for i in arr:\n        if i > n:\n            return True\n    return False"
    },
    {
        "task_id": 434,
        "prompt": "Write a python function that matches a string that has an a followed by one or more b's.\n\ndef",
        "answer": "def a_followed_by_b(str):\n    if str[0] == 'a' and str[1] == 'b':\n        return True\n    else:\n        return False"
    },
    {
        "task_id": 435,
        "prompt": "Write a python function to find the last digit of a given number.\n\ndef",
        "answer": "def last_digit(n):\n    return n % 10"
    },
    {
        "task_id": 436,
        "prompt": "Write a python function to return the negative numbers in a list.\n\ndef",
        "answer": "def negative_numbers(nums):\n    return [num for num in nums if num < 0]"
    },
    {
        "task_id": 437,
        "prompt": "Write a python function to remove odd characters in a string.\n\ndef",
        "answer": "def remove_odd_chars(str):\n    return ''.join([i for i in str if i%2==0])"
    },
    {
        "task_id": 438,
        "prompt": "Write a python function to count bidirectional tuple pairs.\n\ndef",
        "answer": "def bidirectional_tuple_pairs(tuple_list):\n    # Your code here\n    pass"
    },
    {
        "task_id": 439,
        "prompt": "Write a python function to join a list of multiple integers into a single integer.\n\ndef",
        "answer": "def join_ints(ints):\n    return int(\"\".join(map(str, ints)))"
    },
    {
        "task_id": 440,
        "prompt": "Write a python function to find the first adverb and their positions in a given sentence.\n\ndef",
        "answer": "def find_adverb(sentence):\n    adverb = \"\"\n    for i in range(len(sentence)):\n        if sentence[i] == \"a\" or sentence[i] == \"e\" or sentence[i] == \"i\" or sentence[i] == \"o\" or sentence[i] == \"u\":\n            adverb = adverb + sentence[i]\n        else:\n            break\n    return adverb"
    },
    {
        "task_id": 441,
        "prompt": "Write a python function to find the surface area of a cube of a given size.\n\ndef",
        "answer": "def cube_area(side):\n    return side**2 * 6"
    },
    {
        "task_id": 442,
        "prompt": "Write a python function to find the ration of positive numbers in an array of integers.\n\ndef",
        "answer": "def find_positive_ratio(arr):\n    return len([x for x in arr if x > 0]) / len(arr)"
    },
    {
        "task_id": 443,
        "prompt": "Write a python function to find the largest negative number from the given list.\n\ndef",
        "answer": "def largest_negative(lst):\n    return max(lst) if max(lst) < 0 else 0"
    },
    {
        "task_id": 444,
        "prompt": "Write a python function to trim each tuple by k in the given tuple list.\n\ndef",
        "answer": "def trim(tup, k):\n    return tup[:k] + tup[k+1:]"
    },
    {
        "task_id": 445,
        "prompt": "Write a python function to perform index wise multiplication of tuple elements in the given two tuples.\n\ndef",
        "answer": "def mul(tup1,tup2):\n    return tuple(i*j for i,j in zip(tup1,tup2))"
    },
    {
        "task_id": 446,
        "prompt": "Write a python function to count the occurence of all elements of list in a tuple.\n\ndef",
        "answer": "def count_occurence(list, tuple):\n    count = 0\n    for i in tuple:\n        if i in list:\n            count += 1\n    return count"
    },
    {
        "task_id": 447,
        "prompt": "Write a python function to find cubes of individual elements in a list.\n\ndef",
        "answer": "def cube(x):\n    return x**3"
    },
    {
        "task_id": 448,
        "prompt": "Write a python function to calculate the sum of perrin numbers.\n\ndef",
        "answer": "def perrin(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return perrin(n-1) + perrin(n-2)"
    },
    {
        "task_id": 450,
        "prompt": "Write a python function to extract specified size of strings from a given list of string values.\n\ndef",
        "answer": "def extract_strings(list_of_strings, size):\n    return [string[:size] for string in list_of_strings]"
    },
    {
        "task_id": 451,
        "prompt": "Write a python function to remove all whitespaces from the given string.\n\ndef",
        "answer": "def remove_whitespace(string):\n    return string.replace(\" \", \"\")"
    },
    {
        "task_id": 452,
        "prompt": "Write a python function that gives loss amount on a sale if the given amount has loss else return 0.\n\ndef",
        "answer": "def loss_amount(amount):\n    if amount < 1000:\n        return 0\n    elif amount < 10000:\n        return amount * 0.05\n    elif amount < 100000:\n        return amount * 0.1\n    elif amount < 1000000:\n        return amount * 0.15\n    else:\n        return amount * 0.2"
    },
    {
        "task_id": 453,
        "prompt": "Write a python function to find the sum of even factors of a number.\n\ndef",
        "answer": "def sum_even_factors(n):\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "task_id": 454,
        "prompt": "Write a python function that matches a word containing 'z'.\n\ndef",
        "answer": "def match_z(word):\n    if 'z' in word:\n        return True\n    else:\n        return False"
    },
    {
        "task_id": 455,
        "prompt": "Write a python function to check whether the given month number contains 31 days or not.\n\ndef",
        "answer": "def check_leap(month):\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif month in [4, 6, 9, 11]:\n        return False\n    elif month == 2:\n        return True\n    else:\n        return False"
    },
    {
        "task_id": 456,
        "prompt": "Write a python function to reverse each string in a given list of string values.\n\ndef",
        "answer": "def reverse_string(string):\n    return string[::-1]"
    },
    {
        "task_id": 457,
        "prompt": "Write a python function to find the sublist having minimum length.\n\ndef",
        "answer": "def find_min_length(lst):\n    min_length = len(lst[0])\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length"
    },
    {
        "task_id": 458,
        "prompt": "Write a python function to find the area of a rectangle.\n\ndef",
        "answer": "def area_rectangle(length, breadth):\n    return length * breadth"
    },
    {
        "task_id": 459,
        "prompt": "Write a python function to remove uppercase substrings from a given string.\n\ndef",
        "answer": "def remove_upper_case(str):\n    return str.replace(str.upper(), '')"
    },
    {
        "task_id": 460,
        "prompt": "Write a python function to get the first element of each sublist.\n\ndef",
        "answer": "def get_first_element(lst):\n    return [x[0] for x in lst]"
    },
    {
        "task_id": 461,
        "prompt": "Write a python function to count the upper case characters in a given string.\n\ndef",
        "answer": "def count_upper_case(string):\n    count = 0\n    for i in string:\n        if i.isupper():\n            count += 1\n    return count"
    },
    {
        "task_id": 462,
        "prompt": "Write a python function to find all possible combinations of the elements of a given list.\n\ndef",
        "answer": "def powerset(iterable):\n    \"powerset([1,2,3]) --> () (1,) (2,) (3,) (1,2) (1,3) (2,3) (1,2,3)\"\n    s = list(iterable)\n    return chain.from_iterable(combinations(s, r) for r in range(len(s)+1))"
    },
    {
        "task_id": 463,
        "prompt": "Write a python function to find the maximum product subarray of the given array.\n\ndef",
        "answer": "def max_product_subarray(arr):\n    max_product = 0\n    max_ending_here = 1\n    min_ending_here = 1\n    for i in range(len(arr)):\n        temp = max_ending_here\n        max_ending_here = max(max_ending_here * arr[i], min_ending_here * arr[i], arr[i])\n        min_ending_here = min(temp * arr[i], min_ending_here * arr[i], arr[i])\n        max_product = max(max_product, max_ending_here)\n    return max_product"
    },
    {
        "task_id": 464,
        "prompt": "Write a python function to check if all values are same in a dictionary.\n\ndef",
        "answer": "def check_dict(dict):\n    for key in dict:\n        if dict[key]!= dict[key]:\n            return False\n    return True"
    },
    {
        "task_id": 465,
        "prompt": "Write a python function to drop empty items from a given dictionary.\n\ndef",
        "answer": "def drop_empty_items(d):\n    return {k: v for k, v in d.items() if v}"
    },
    {
        "task_id": 468,
        "prompt": "Write a python function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\ndef",
        "answer": "def max_product(arr):\n    max_ending_here = 1\n    min_ending_here = 1\n    max_so_far = 1\n    for i in range(len(arr)):\n        temp = max_ending_here\n        max_ending_here = max(max_ending_here * arr[i], min_ending_here * arr[i], arr[i])\n        min_ending_here = min(temp * arr[i], min_ending_here * arr[i], arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far"
    },
    {
        "task_id": 470,
        "prompt": "Write a python function to find the pairwise addition of the neighboring elements of the given tuple.\n\ndef",
        "answer": "def pairwise_addition(tuple):\n    return tuple[0] + tuple[1], tuple[1] + tuple[2], tuple[2] + tuple[3]"
    },
    {
        "task_id": 471,
        "prompt": "Write a python function to find the product of the array multiplication modulo n.\n\ndef",
        "answer": "def product_mod(arr, n):\n    # Your code here\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product"
    },
    {
        "task_id": 472,
        "prompt": "Write a python function to check whether the given list contains consecutive numbers or not.\n\ndef",
        "answer": "def check_consecutive(nums):\n    if len(nums) == 0:\n        return False\n    if len(nums) == 1:\n        return True\n    for i in range(len(nums)-1):\n        if nums[i] == nums[i+1] - 1:\n            continue\n        else:\n            return False\n    return True"
    },
    {
        "task_id": 473,
        "prompt": "Write a python function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n\ndef",
        "answer": "def tuple_intersection(tuple_list):\n    return tuple(set.intersection(*map(set, tuple_list)))"
    },
    {
        "task_id": 474,
        "prompt": "Write a python function to replace characters in a string.\n\ndef",
        "answer": "def replace_char(str1, old, new):\n    return str1.replace(old, new)"
    },
    {
        "task_id": 475,
        "prompt": "Write a python function to sort a dictionary by value.\n\ndef",
        "answer": "def sort_by_value(dic):\n    return {k: v for k, v in sorted(dic.items(), key=lambda item: item[1])}"
    },
    {
        "task_id": 476,
        "prompt": "Write a python function to find the sum of the largest and smallest value in a given array.\n\ndef",
        "answer": "def sum_of_max_and_min(arr):\n    return sum(sorted(arr)[-1:]) + sum(sorted(arr)[:1])"
    },
    {
        "task_id": 477,
        "prompt": "Write a python function to convert the given string to lower case.\n\ndef",
        "answer": "def lower(s):\n    return s.lower()"
    },
    {
        "task_id": 478,
        "prompt": "Write a python function to remove lowercase substrings from a given string.\n\ndef",
        "answer": "def remove_lower_case(str):\n    return ''.join(c for c in str if c.isupper())"
    },
    {
        "task_id": 479,
        "prompt": "Write a python function to find the first digit of a given number.\n\ndef",
        "answer": "def first_digit(n):\n    return int(str(n)[0])"
    },
    {
        "task_id": 554,
        "prompt": "Write a python function which takes a list of integers and only returns the odd ones.\n\ndef",
        "answer": "def odd_numbers(numbers):\n    return [number for number in numbers if number % 2!= 0]"
    },
    {
        "task_id": 555,
        "prompt": "Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n\ndef",
        "answer": "def sum_of_cubes(n):\n    return sum(i**3 for i in range(1, n+1))"
    },
    {
        "task_id": 556,
        "prompt": "Write a python function to count the number of pairs whose xor value is odd.\n\ndef",
        "answer": "def count_odd_xor(arr):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] ^ arr[j] & 1:\n                count += 1\n    return count"
    },
    {
        "task_id": 557,
        "prompt": "Write a python function to toggle the case of all characters in a string.\n\ndef",
        "answer": "def toggle_case(string):\n    return string.swapcase()"
    },
    {
        "task_id": 558,
        "prompt": "Write a python function to find the sum of the per-digit difference between two integers.\n\ndef",
        "answer": "def sum_diff(a, b):\n    return sum(abs(int(i) - int(j)) for i, j in zip(str(a), str(b)))"
    },
    {
        "task_id": 559,
        "prompt": "Write a python function to find the sum of the largest contiguous sublist in the given list.\n\ndef",
        "answer": "def max_sublist(l):\n    max_sum = 0\n    current_sum = 0\n    for i in l:\n        current_sum += i\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "task_id": 560,
        "prompt": "Write a python function to find the union of the elements of two given tuples and output them in sorted order.\n\ndef",
        "answer": "def union(a,b):\n    return sorted(set(a) | set(b))"
    },
    {
        "task_id": 562,
        "prompt": "Write a python function to find the length of the longest sublists.\n\ndef",
        "answer": "def longest_sublist(lst):\n    max_len = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if len(lst[i:j+1]) > max_len:\n                max_len = len(lst[i:j+1])\n    return max_len"
    },
    {
        "task_id": 563,
        "prompt": "Write a python function to extract values between quotation marks from a string.\n\ndef",
        "answer": "def extract_values(string):\n    return re.findall(r'\"(.*?)\"', string)"
    },
    {
        "task_id": 564,
        "prompt": "Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n\ndef",
        "answer": "def count_unordered_pairs(arr):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "task_id": 565,
        "prompt": "Write a python function to split a string into characters.\n\ndef",
        "answer": "def split_string(string):\n    return list(string)"
    },
    {
        "task_id": 566,
        "prompt": "Write a python function to get the sum of the digits of a non-negative integer.\n\ndef",
        "answer": "def sum_digits(n):\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_digits(n // 10)"
    },
    {
        "task_id": 567,
        "prompt": "Write a python function to check whether a specified list is sorted or not.\n\ndef",
        "answer": "def is_sorted(lst):\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True"
    },
    {
        "task_id": 568,
        "prompt": "Write a python function to create a list of N empty dictionaries.\n\ndef",
        "answer": "def create_list_of_empty_dictionaries(n):\n    return [{} for _ in range(n)]"
    },
    {
        "task_id": 569,
        "prompt": "Write a python function to sort each sublist of strings in a given list of lists.\n\ndef",
        "answer": "def sort_list(list_of_lists):\n    for i in range(len(list_of_lists)):\n        list_of_lists[i].sort()\n    return list_of_lists"
    },
    {
        "task_id": 572,
        "prompt": "Write a python function to remove duplicate numbers from a given number of lists.\n\ndef",
        "answer": "def remove_duplicate(list1, list2, list3):\n    return list(set(list1) & set(list2) & set(list3))"
    },
    {
        "task_id": 573,
        "prompt": "Write a python function to calculate the product of the unique numbers in a given list.\n\ndef",
        "answer": "def unique_product(lst):\n    product = 1\n    for i in lst:\n        if lst.count(i) == 1:\n            product *= i\n    return product"
    },
    {
        "task_id": 574,
        "prompt": "Write a python function to find the surface area of a cylinder.\n\ndef",
        "answer": "def cylinder_surface_area(radius, height):\n    return 2 * math.pi * radius * (radius + height)"
    },
    {
        "task_id": 576,
        "prompt": "Write a python function to check whether a list is sublist of another or not.\n\ndef",
        "answer": "def is_sublist(l1, l2):\n    if l1 == l2:\n        return True\n    if len(l1) > len(l2):\n        return False\n    for i in range(len(l2) - len(l1) + 1):\n        if l1 == l2[i:i+len(l1)]:\n            return True\n    return False"
    },
    {
        "task_id": 577,
        "prompt": "Write a python function to find the last digit in factorial of a given number.\n\ndef",
        "answer": "def last_digit_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * last_digit_factorial(n-1) % 10"
    },
    {
        "task_id": 578,
        "prompt": "Write a python function to interleave 3 lists of the same length into a single flat list.\n\ndef",
        "answer": "def interleave(list1, list2, list3):\n    return [i for j in zip(list1, list2, list3) for i in j]"
    },
    {
        "task_id": 579,
        "prompt": "Write a python function to find the dissimilar elements in the given two tuples.\n\ndef",
        "answer": "def dissimilar(tup1, tup2):\n    return [i for i in tup1 if i not in tup2] + [i for i in tup2 if i not in tup1]"
    },
    {
        "task_id": 580,
        "prompt": "Write a python function to remove uneven elements in the nested mixed tuple.\n\ndef",
        "answer": "def remove_uneven(tup):\n    if type(tup) == tuple:\n        if len(tup) == 2:\n            if type(tup[0]) == tuple:\n                return (remove_uneven(tup[0]), remove_uneven(tup[1]))\n            else:\n                return (tup[0], remove_uneven(tup[1]))\n        else:\n            return tup\n    else:\n        return tup"
    },
    {
        "task_id": 581,
        "prompt": "Write a python function to find the surface area of a square pyramid with a given base edge and height.\n\ndef",
        "answer": "def surface_area(base, height):\n    return 2*base*height + 2*base*base"
    },
    {
        "task_id": 582,
        "prompt": "Write a python function to check if a dictionary is empty\n\ndef",
        "answer": "def is_empty(dictionary):\n    return len(dictionary) == 0"
    },
    {
        "task_id": 583,
        "prompt": "Write a python function which returns nth catalan number.\n\ndef",
        "answer": "def catalan(n):\n    if n == 0:\n        return 1\n    else:\n        return (4 * n - 2) * catalan(n - 1) / (n + 1)"
    },
    {
        "task_id": 584,
        "prompt": "Write a python function to find the first adverb ending with ly and its positions in a given string.\n\ndef",
        "answer": "def find_adverb(str):\n    for i in range(len(str)):\n        if str[i:i+2] == 'ly':\n            return i\n    return -1"
    },
    {
        "task_id": 585,
        "prompt": "Write a python function to find the n most expensive items in a given dataset.\n\ndef",
        "answer": "def most_expensive(dataset, n):\n    \"\"\"\n    Returns the n most expensive items in a given dataset.\n    \"\"\"\n    return sorted(dataset, key=lambda x: x[1], reverse=True)[:n]"
    },
    {
        "task_id": 586,
        "prompt": "Write a python function to split a list at the nth eelment and add the first part to the end.\n\ndef",
        "answer": "def split_at_n(lst, n):\n    return lst[n:] + lst[:n]"
    },
    {
        "task_id": 587,
        "prompt": "Write a python function to convert a list to a tuple.\n\ndef",
        "answer": "def list_to_tuple(list):\n    return tuple(list)"
    },
    {
        "task_id": 588,
        "prompt": "Write a python function to find the difference between largest and smallest value in a given list.\n\ndef",
        "answer": "def difference(lst):\n    return max(lst) - min(lst)"
    },
    {
        "task_id": 589,
        "prompt": "Write a python function to find perfect squares between two given numbers.\n\ndef",
        "answer": "def perfect_square(n):\n    if n == 1:\n        return True\n    elif n == 2:\n        return False\n    else:\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
        "task_id": 590,
        "prompt": "Write a python function to convert polar coordinates to rectangular coordinates.\n\ndef",
        "answer": "def convert_polar_to_rectangular(r, theta):\n    return r * math.cos(theta), r * math.sin(theta)"
    },
    {
        "task_id": 591,
        "prompt": "Write a python function to interchange the first and last elements in a list.\n\ndef",
        "answer": "def interchange(lst):\n    lst[0], lst[-1] = lst[-1], lst[0]\n    return lst"
    },
    {
        "task_id": 592,
        "prompt": "Write a python function to find the sum of the product of consecutive binomial co-efficients.\n\ndef",
        "answer": "def binomial_sum(n, k):\n    if k == 0:\n        return 1\n    if k == n:\n        return 1\n    return binomial_sum(n-1, k-1) + binomial_sum(n-1, k)"
    },
    {
        "task_id": 593,
        "prompt": "Write a python function to remove leading zeroes from an ip address.\n\ndef",
        "answer": "def remove_leading_zeroes(ip):\n    return ip.lstrip('0') or '0'"
    },
    {
        "task_id": 594,
        "prompt": "Write a python function to find the difference of the first even and first odd number of a given list.\n\ndef",
        "answer": "def diff(arr):\n    return arr[0] - arr[1]"
    },
    {
        "task_id": 595,
        "prompt": "Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\ndef",
        "answer": "def min_swaps(a, b):\n    count = 0\n    for i in range(len(a)):\n        if a[i]!= b[i]:\n            count += 1\n    return count"
    },
    {
        "task_id": 596,
        "prompt": "Write a python function to find the size in bytes of the given tuple.\n\ndef",
        "answer": "def get_size(obj, seen=None):\n    \"\"\"Recursively finds size of objects\"\"\"\n    size = sys.getsizeof(obj)\n    if seen is None:\n        seen = set()\n    obj_id = id(obj)\n    if obj_id in seen:\n        return 0\n    # Important mark as seen *before* entering recursion to gracefully handle\n    # self-referential objects\n    seen.add(obj_id)\n    if isinstance(obj, dict):\n        size += sum([get_size(v, seen) for v in obj.values()])\n        size += sum([get_size(k, seen) for k in obj.keys()])\n    elif hasattr(obj, '__dict__'):\n        size += get_size(obj.__dict__, seen)\n    elif hasattr(obj, '__iter__') and not isinstance(obj, (str, bytes, bytearray)):\n        size += sum([get_size(i, seen) for i in obj])\n    return size"
    },
    {
        "task_id": 597,
        "prompt": "Write a python function to find kth element from the given two sorted arrays.\n\ndef",
        "answer": "def kth_element(arr1, arr2, k):\n    if len(arr1) == 0:\n        return arr2[k-1]\n    if len(arr2) == 0:\n        return arr1[k-1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    mid1 = len(arr1)//2\n    mid2 = len(arr2)//2\n    if arr1[mid1] > arr2[mid2]:\n        return kth_element(arr1[:mid1], arr2, k)\n    elif arr1[mid1] < arr2[mid2]:\n        return kth_element(arr1, arr2[:mid2], k)\n    else:\n        return kth_element(arr1[:mid1], arr2[:mid2], k)"
    },
    {
        "task_id": 598,
        "prompt": "Write a python function to check whether the given number is armstrong or not.\n\ndef",
        "answer": "def armstrong(num):\n    sum = 0\n    temp = num\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    if num == sum:\n        return True\n    else:\n        return False"
    },
    {
        "task_id": 599,
        "prompt": "Write a python function to find sum and average of first n natural numbers.\n\ndef",
        "answer": "def sum_and_average(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum, sum/n"
    },
    {
        "task_id": 600,
        "prompt": "Write a python function to check whether the given number is even or not.\n\ndef",
        "answer": "def even_or_odd(num):\n    if num % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "task_id": 602,
        "prompt": "Write a python function to find the first repeated character in a given string.\n\ndef",
        "answer": "def first_repeated_char(str1):\n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)):\n            if str1[i] == str1[j]:\n                return str1[i]\n    return None"
    },
    {
        "task_id": 603,
        "prompt": "Write a python function to get all lucid numbers smaller than or equal to a given integer.\n\ndef",
        "answer": "def get_lucid_numbers(n):\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if is_lucid_number(i):\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "task_id": 604,
        "prompt": "Write a python function to reverse words seperated by spaces in a given string.\n\ndef",
        "answer": "def reverse_words(s):\n    return''.join(s.split()[::-1])"
    },
    {
        "task_id": 605,
        "prompt": "Write a python function to check if the given integer is a prime number.\n\ndef",
        "answer": "def is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "task_id": 606,
        "prompt": "Write a python function to convert degrees to radians.\n\ndef",
        "answer": "def degrees_to_radians(degrees):\n    return degrees * pi / 180"
    },
    {
        "task_id": 607,
        "prompt": "Write a python function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n\ndef",
        "answer": "def search(pattern, string):\n    match = re.search(pattern, string)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "task_id": 608,
        "prompt": "Write a python function to find nth bell number.\n\ndef",
        "answer": "def bell_number(n):\n    if n == 0:\n        return 1\n    else:\n        return sum(bell_number(i) for i in range(n))"
    },
    {
        "task_id": 610,
        "prompt": "Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n\ndef",
        "answer": "def remove_kth(input_list, k):\n    return input_list[:k] + input_list[k+1:]"
    },
    {
        "task_id": 611,
        "prompt": "Write a python function which given a matrix represented as a list of lists returns the max of then'th column.\n\ndef",
        "answer": "def max_of_col(matrix, n):\n    return max([row[n] for row in matrix])"
    },
    {
        "task_id": 612,
        "prompt": "Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n\ndef",
        "answer": "def split_list(list_of_lists):\n    return [list(map(lambda x: x[0], list_of_lists)), list(map(lambda x: x[1], list_of_lists))]"
    },
    {
        "task_id": 614,
        "prompt": "Write a python function to find the cumulative sum of all the values that are present in the given tuple list.\n\ndef",
        "answer": "def cumulative_sum(tup):\n    sum = 0\n    for i in tup:\n        sum += i\n    return sum"
    },
    {
        "task_id": 615,
        "prompt": "Write a python function which takes a tuple of tuples and returns the average value for each tuple as a list.\n\ndef",
        "answer": "def average(tuples):\n    return [sum(x)/len(x) for x in tuples]"
    },
    {
        "task_id": 616,
        "prompt": "Write a python function which takes two tuples of the same length and performs the element wise modulo.\n\ndef",
        "answer": "def mod(a,b):\n    return tuple(map(lambda x,y: x%y, a, b))"
    },
    {
        "task_id": 617,
        "prompt": "Write a python function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n\ndef",
        "answer": "def jump(length, d):\n    if length == 0:\n        return 0\n    if length < 0:\n        return -1\n    if d == 0:\n        return -1\n    if d < 0:\n        return -1\n    if d == 1:\n        return length\n    if d == 2:\n        return length * 2\n    if d == 3:\n        return length * 3\n    if d == 4:\n        return length * 4\n    if d == 5:\n        return length * 5\n    if d == 6:\n        return length * 6\n    if d == 7:\n        return length * 7\n    if d == 8:\n        return length * 8\n    if d == 9:\n        return length * 9\n    if d == 10:\n        return length * 10\n    if d == 11:\n        return length * 11\n    if d == 12:\n        return length * 12\n    if d == 13:\n        return length * 13\n    if d == 14:\n        return length * 14\n    if d == 15:\n        return length"
    },
    {
        "task_id": 618,
        "prompt": "Write a python function to divide two lists element wise.\n\ndef",
        "answer": "def divide_lists(list1, list2):\n    return [x / y for x, y in zip(list1, list2)]"
    },
    {
        "task_id": 619,
        "prompt": "Write a python function to move all the numbers to the end of the given string.\n\ndef",
        "answer": "def move_numbers(str):\n    return ''.join(sorted(str, key=lambda x: x.isdigit() and str.index(x) or 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
    },
    {
        "task_id": 620,
        "prompt": "Write a python function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n\ndef",
        "answer": "def largest_subset(nums):\n    nums.sort()\n    max_size = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] % nums[j] == 0 or nums[j] % nums[i] == 0:\n                max_size = max(max_size, j-i+1)\n    return max_size"
    },
    {
        "task_id": 622,
        "prompt": "Write a python function to find the median of two sorted lists of same size.\n\ndef",
        "answer": "def median(a, b):\n    if len(a) == len(b):\n        if len(a) % 2 == 0:\n            return (a[len(a) // 2] + b[len(b) // 2]) / 2\n        else:\n            return a[len(a) // 2]\n    else:\n        return -1"
    },
    {
        "task_id": 623,
        "prompt": "Write a python function to compute the n-th power of each number in a list.\n\ndef",
        "answer": "def power(x,n):\n    return x**n"
    },
    {
        "task_id": 624,
        "prompt": "Write a python function to convert a given string to uppercase.\n\ndef",
        "answer": "def to_upper(str):\n    return str.upper()"
    },
    {
        "task_id": 625,
        "prompt": "Write a python function to interchange the first and last element in a given list.\n\ndef",
        "answer": "def interchange(list):\n    list[0], list[-1] = list[-1], list[0]\n    return list"
    },
    {
        "task_id": 626,
        "prompt": "Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n\ndef",
        "answer": "def area_of_largest_triangle(radius):\n    return 0.5 * radius * radius * math.pi"
    },
    {
        "task_id": 627,
        "prompt": "Write a python function to find the smallest missing number from a sorted list of natural numbers.\n\ndef",
        "answer": "def find_smallest_missing_number(numbers):\n    for i in range(len(numbers)):\n        if numbers[i]!= i + 1:\n            return i + 1\n    return len(numbers) + 1"
    },
    {
        "task_id": 628,
        "prompt": "Write a python function to replace all spaces in the given string with '%20'.\n\ndef",
        "answer": "def urlify(s):\n    return s.replace(' ', '%20')"
    },
    {
        "task_id": 629,
        "prompt": "Write a python function to find even numbers from a list of numbers.\n\ndef",
        "answer": "def even_numbers(numbers):\n    even_numbers = []\n    for number in numbers:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers"
    },
    {
        "task_id": 630,
        "prompt": "Write a python function to extract all the adjacent coordinates of the given coordinate tuple.\n\ndef",
        "answer": "def get_adjacent_coordinates(coordinate):\n    x, y = coordinate\n    return [(x+1, y), (x-1, y), (x, y+1), (x, y-1)]"
    },
    {
        "task_id": 631,
        "prompt": "Write a python function to replace whitespaces with an underscore and vice versa in a given string.\n\ndef",
        "answer": "def replace_white_space(string):\n    return string.replace(\" \", \"_\")"
    },
    {
        "task_id": 632,
        "prompt": "Write a python function to move all zeroes to the end of the given list.\n\ndef",
        "answer": "def move_zeros(nums):\n    # Your code here\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            count += 1\n    for i in range(count):\n        nums.remove(0)\n        nums.append(0)\n    return nums"
    },
    {
        "task_id": 633,
        "prompt": "Write a python function to find the sum of xor of all pairs of numbers in the given list.\n\ndef",
        "answer": "def xor_sum(arr):\n    xor_sum = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            xor_sum = xor_sum ^ arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "task_id": 635,
        "prompt": "Write a python function to sort the given list.\n\ndef",
        "answer": "def sort_list(list):\n    return sorted(list)"
    },
    {
        "task_id": 637,
        "prompt": "Write a python function to check whether the given amount has no profit and no loss\n\ndef",
        "answer": "def no_profit_loss(amount):\n    if amount > 0:\n        return False\n    else:\n        return True"
    },
    {
        "task_id": 638,
        "prompt": "Write a python function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\ndef",
        "answer": "def wind_chill_index(v, t):\n    return round(13.12 + 0.6215 * v - 11.37 * (t ** 0.16) + 0.3965 * v * (t ** 0.16), 0)"
    },
    {
        "task_id": 639,
        "prompt": "Write a python function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n\ndef",
        "answer": "def sum_name_lengths(names):\n    sum = 0\n    for name in names:\n        if name[0].isupper():\n            sum += len(name)\n    return sum"
    },
    {
        "task_id": 640,
        "prompt": "Write a python function to remove the parenthesis and what is inbetween them from a string.\n\ndef",
        "answer": "def remove_parenthesis(string):\n    return string[1:-1]"
    },
    {
        "task_id": 641,
        "prompt": "Write a python function to find the nth nonagonal number.\n\ndef",
        "answer": "def nonagonal(n):\n    return (n*(3*n-1))/2"
    },
    {
        "task_id": 643,
        "prompt": "Write a python function that checks if a strings contains 'z', except at the start and end of the word.\n\ndef",
        "answer": "def check_z(str):\n    if str[0] == 'z' or str[-1] == 'z':\n        return False\n    else:\n        return True"
    },
    {
        "task_id": 644,
        "prompt": "Write a python function to reverse an array upto a given position.\n\ndef",
        "answer": "def reverseArray(arr, n):\n    start = 0\n    end = n-1\n    while start < end:\n        arr[start], arr[end] = arr[end], arr[start]\n        start += 1\n        end -= 1\n    return arr"
    },
    {
        "task_id": 720,
        "prompt": "Write a python function to add a dictionary to the tuple. The output should be a tuple.\n\ndef",
        "answer": "def add_dict_to_tuple(tup, dict):\n    return tup + (dict,)"
    },
    {
        "task_id": 721,
        "prompt": "Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\ndef",
        "answer": "def max_avg_path(matrix):\n    # Fill this in.\n    n = len(matrix)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = matrix[i][i]\n    for i in range(n-2, -1, -1):\n        for j in range(i+1, n):\n            dp[i][j] = max(dp[i][j-1], dp[i+1][j]) + matrix[i][j]\n    return dp[0][n-1] / (n * n)"
    },
    {
        "task_id": 722,
        "prompt": "The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n\ndef",
        "answer": "def filter_students(students, min_height, min_weight):\n    new_students = {}\n    for student, (height, weight) in students.items():\n        if height > min_height and weight > min_weight:\n            new_students[student] = (height, weight)\n    return new_students"
    },
    {
        "task_id": 723,
        "prompt": "The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n\ndef",
        "answer": "def same_values(list1, list2):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n    return count"
    },
    {
        "task_id": 724,
        "prompt": "Write a python function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n\ndef",
        "answer": "def sum_of_digits(base, power):\n    return sum([int(i) for i in str(base**power)])"
    },
    {
        "task_id": 725,
        "prompt": "Write a python function to extract values between quotation marks \" \" of the given string.\n\ndef",
        "answer": "def extract_values(string):\n    return re.findall(r'\"(.*?)\"', string)"
    },
    {
        "task_id": 726,
        "prompt": "Write a python function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n\ndef",
        "answer": "def tuple_product(tuple):\n    return tuple[0] * tuple[1]"
    },
    {
        "task_id": 728,
        "prompt": "Write a python function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n\ndef",
        "answer": "def add_lists(a,b):\n    return [a[i]+b[i] for i in range(len(a))]"
    },
    {
        "task_id": 730,
        "prompt": "Write a python function to remove consecutive duplicates of a given list.\n\ndef",
        "answer": "def remove_duplicates(list1):\n    new_list = []\n    for i in list1:\n        if i not in new_list:\n            new_list.append(i)\n    return new_list"
    },
    {
        "task_id": 731,
        "prompt": "Write a python function to find the lateral surface area of a cone given radius r and the height h.\n\ndef",
        "answer": "def lateral_surface_area(r, h):\n    return 2 * math.pi * r * (r + math.sqrt(r ** 2 + h ** 2))"
    },
    {
        "task_id": 732,
        "prompt": "Write a python function to replace all occurrences of spaces, commas, or dots with a colon.\n\ndef",
        "answer": "def replace_punctuation(text):\n    return text.replace(\" \",\":\").replace(\",\":\":\").replace(\".\":\":\")"
    },
    {
        "task_id": 733,
        "prompt": "Write a python function to find the index of the first occurrence of a given number in a sorted array.\n\ndef",
        "answer": "def binarySearch(arr, x):\n    low = 0\n    high = len(arr) - 1\n    mid = 0"
    },
    {
        "task_id": 734,
        "prompt": "Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\ndef",
        "answer": "def sum_of_products(arr):\n    n = len(arr)\n    sum_prod = 0\n    for i in range(n):\n        for j in range(i, n):\n            sum_prod += arr[i] * arr[j]\n    return sum_prod"
    },
    {
        "task_id": 735,
        "prompt": "Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\ndef",
        "answer": "def toggle_bit(n):\n    return n ^ (1 << len(bin(n)) - 2)"
    },
    {
        "task_id": 736,
        "prompt": "Write a python function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\ndef",
        "answer": "def left_index(arr, x):\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x and (mid == 0 or arr[mid - 1] < x):\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left"
    },
    {
        "task_id": 737,
        "prompt": "Write a python function to check whether the given string is starting with a vowel or not using regex.\n\ndef",
        "answer": "def check_vowel(string):\n    return bool(re.match(r'^[aeiouAEIOU]', string))"
    },
    {
        "task_id": 738,
        "prompt": "Write a python function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n\ndef",
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return 1 / (n - 1) + geometric_sum(n - 1)"
    },
    {
        "task_id": 739,
        "prompt": "Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n\ndef",
        "answer": "def find_smallest_triangular_number(n):\n    return (n*(n+1))//2"
    },
    {
        "task_id": 740,
        "prompt": "Write a python function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n\ndef",
        "answer": "def convert(tup):\n    res_dct = {}\n    for i in range(0, len(tup), 2):\n        res_dct[tup[i]] = tup[i+1]\n    return res_dct"
    },
    {
        "task_id": 741,
        "prompt": "Write a python function to check whether all the characters are same or not.\n\ndef",
        "answer": "def check_character(str1):\n    if len(str1) == 0:\n        return True\n    else:\n        if str1[0] == str1[-1]:\n            return check_character(str1[1:-1])\n        else:\n            return False"
    },
    {
        "task_id": 742,
        "prompt": "Write a python function to caluclate the area of a tetrahedron.\n\ndef",
        "answer": "def area_tetrahedron(a, b, c, d):\n    s = (a + b + c + d) / 2\n    return (s * (s - a) * (s - b) * (s - c) * (s - d)) ** 0.5"
    },
    {
        "task_id": 743,
        "prompt": "Write a python function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n\ndef",
        "answer": "def right_rotate(arr, n):\n    return arr[n:] + arr[:n]"
    },
    {
        "task_id": 744,
        "prompt": "Write a python function to check if the given tuple has any none value or not.\n\ndef",
        "answer": "def check_none(tup):\n    for i in tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "task_id": 745,
        "prompt": "Write a python function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n\ndef",
        "answer": "def check_divisible(startnum, endnum):\n    return list(filter(lambda x: all(int(i) % int(x) == 0 for i in str(x)), range(startnum, endnum + 1)))"
    },
    {
        "task_id": 746,
        "prompt": "Write a python function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n\ndef",
        "answer": "def area_sector(radius, angle):\n    if angle > 360:\n        return None\n    else:\n        return (angle/360)*2*3.14*radius**2"
    },
    {
        "task_id": 747,
        "prompt": "Write a python function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\ndef",
        "answer": "def lcs(x, y, z):\n    # find the length of the strings\n    m = len(x)\n    n = len(y)\n    o = len(z)"
    },
    {
        "task_id": 748,
        "prompt": "Write a python function to put spaces between words starting with capital letters in a given string.\n\ndef",
        "answer": "def insert_space(string):\n    return''.join(string[i] if string[i].islower() else'' + string[i] for i in range(len(string)))"
    },
    {
        "task_id": 749,
        "prompt": "Write a python function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n\ndef",
        "answer": "def sort_numeric_strings(arr):\n    arr.sort(key=lambda x: int(x))\n    return arr"
    },
    {
        "task_id": 750,
        "prompt": "Write a python function to add the given tuple to the given list.\n\ndef",
        "answer": "def add_tuple(list1, tuple1):\n    list1.append(tuple1)\n    return list1"
    },
    {
        "task_id": 751,
        "prompt": "Write a python function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n\ndef",
        "answer": "def is_min_heap(arr):\n    for i in range(len(arr)):\n        if 2*i+1 < len(arr) and arr[i] > arr[2*i+1]:\n            return False\n        if 2*i+2 < len(arr) and arr[i] > arr[2*i+2]:\n            return False\n    return True"
    },
    {
        "task_id": 752,
        "prompt": "Write a python function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n\ndef",
        "answer": "def jacobsthal(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal(n-1) + 2*jacobsthal(n-2)"
    },
    {
        "task_id": 753,
        "prompt": "Write a python function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n\ndef",
        "answer": "def minK(arr, k):\n    # code here\n    arr.sort(key=lambda x: x[1])\n    return arr[:k]"
    },
    {
        "task_id": 754,
        "prompt": "We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n\ndef",
        "answer": "def common_elements(l1, l2, l3):\n    return [x for x in l1 if x in l2 and x in l3]"
    },
    {
        "task_id": 755,
        "prompt": "Write a python function to find the second smallest number in a list.\n\ndef",
        "answer": "def second_smallest(list):\n    list.sort()\n    return list[1]"
    },
    {
        "task_id": 756,
        "prompt": "Write a python function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n\ndef",
        "answer": "def match_ab(str):\n    if re.search(r'ab+', str):\n        return True\n    else:\n        return False"
    },
    {
        "task_id": 757,
        "prompt": "Write a python function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n\ndef",
        "answer": "def reverse_pairs(str_list):\n    count = 0\n    for i in range(len(str_list)):\n        for j in range(i+1, len(str_list)):\n            if str_list[i] == str_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "task_id": 758,
        "prompt": "Write a python function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n\ndef",
        "answer": "def count_lists(lists):\n    return {tuple(l):lists.count(l) for l in lists}"
    },
    {
        "task_id": 759,
        "prompt": "Write a python function to check whether a given string is a decimal number with a precision of 2.\n\ndef",
        "answer": "def is_decimal(num):\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "task_id": 760,
        "prompt": "Write a python function to check whether a list of numbers contains only one distinct element or not.\n\ndef",
        "answer": "def check_distinct(nums):\n    if len(nums) == len(set(nums)):\n        return True\n    else:\n        return False"
    },
    {
        "task_id": 762,
        "prompt": "Write a python function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n\ndef",
        "answer": "def check_month(month):\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif month in [4, 6, 9, 11]:\n        return False\n    elif month == 2:\n        return True\n    else:\n        return False"
    },
    {
        "task_id": 763,
        "prompt": "Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n\ndef",
        "answer": "def min_diff(arr):\n    arr.sort()\n    min_diff = arr[1] - arr[0]\n    for i in range(1, len(arr) - 1):\n        diff = arr[i + 1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "task_id": 764,
        "prompt": "Write a python function to count number of digits in a given string.\n\ndef",
        "answer": "def count_digits(string):\n    count = 0\n    for i in string:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "task_id": 765,
        "prompt": "Write a python function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n\ndef",
        "answer": "def polite(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 5\n    if n == 5:\n        return 6\n    if n == 6:\n        return 9\n    if n == 7:\n        return 10\n    if n == 8:\n        return 12\n    if n == 9:\n        return 15\n    if n == 10:\n        return 18\n    if n == 11:\n        return 20\n    if n == 12:\n        return 24\n    if n == 13:\n        return 25\n    if n == 14:\n        return 30\n    if n == 15:\n        return 36\n    if n == 16:\n        return 40\n    if n == 17:\n        return 45\n    if n == 18:\n        return 50\n    if n == 19:\n        return 54\n    if n == 20:\n        return 60"
    },
    {
        "task_id": 766,
        "prompt": "Write a python function to return a list of all pairs of consecutive items in a given list.\n\ndef",
        "answer": "def pairs(lst):\n    return [(lst[i], lst[i+1]) for i in range(len(lst)-1)]"
    },
    {
        "task_id": 767,
        "prompt": "Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n\ndef",
        "answer": "def pair_sum(arr, sum):\n    # Write your code here\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "task_id": 769,
        "prompt": "Write a python function to get the difference between two lists.\n\ndef",
        "answer": "def diff_list(list1, list2):\n    return list(set(list1) - set(list2))"
    },
    {
        "task_id": 770,
        "prompt": "Write a python function to find the sum of fourth power of first n odd natural numbers.\n\ndef",
        "answer": "def sum_of_fourth_power(n):\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "task_id": 771,
        "prompt": "Write a python function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\ndef",
        "answer": "def isBalanced(s):\n    stack = []\n    for i in s:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    if len(stack) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "task_id": 772,
        "prompt": "Write a python function to remove all the words with k length in the given string.\n\ndef",
        "answer": "def remove_words(str, k):\n    return''.join([word for word in str.split() if len(word)!= k])"
    },
    {
        "task_id": 773,
        "prompt": "Write a python function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n\ndef",
        "answer": "def find_substring(string, substring):\n    if substring in string:\n        return string.index(substring)\n    else:\n        return None"
    },
    {
        "task_id": 775,
        "prompt": "Write a python function to check whether every odd index contains odd numbers of a given list.\n\ndef",
        "answer": "def check_odd_index(lst):\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "task_id": 776,
        "prompt": "Write a python function to count those characters which have vowels as their neighbors in the given string.\n\ndef",
        "answer": "def count_vowels(str):\n    count = 0\n    for i in range(len(str)-1):\n        if str[i] in \"aeiou\" and str[i+1] in \"aeiou\":\n            count += 1\n    return count"
    },
    {
        "task_id": 777,
        "prompt": "Write a python function to find the sum of non-repeated elements in a given list.\n\ndef",
        "answer": "def sum_non_repeated(list):\n    sum = 0\n    for i in list:\n        if list.count(i) == 1:\n            sum += i\n    return sum"
    },
    {
        "task_id": 778,
        "prompt": "Write a python function to pack consecutive duplicates of a given list elements into sublists.\n\ndef",
        "answer": "def pack(lst):\n    if len(lst) == 0:\n        return []\n    else:\n        return [lst[0]] + pack([x for x in lst[1:] if x!= lst[0]])"
    },
    {
        "task_id": 779,
        "prompt": "Write a python function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n\ndef",
        "answer": "def count_list(lst):\n    return {tuple(i):lst.count(i) for i in lst}"
    },
    {
        "task_id": 780,
        "prompt": "Write a python function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n\ndef",
        "answer": "def combinations_of_sum(tuple_list, sum):\n    # Your code here\n    pass"
    },
    {
        "task_id": 781,
        "prompt": "Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n\ndef",
        "answer": "def count_divisors(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "task_id": 782,
        "prompt": "Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\ndef",
        "answer": "def sum_of_all_odd_length_subarrays(arr):\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if (j - i + 1) % 2!= 0:\n                sum += sum(arr[i:j+1])\n    return sum"
    },
    {
        "task_id": 783,
        "prompt": "Write a python function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n\ndef",
        "answer": "def rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v"
    },
    {
        "task_id": 784,
        "prompt": "Write a python function to find the product of first even and odd number of a given list.\n\ndef",
        "answer": "def product_even_odd(list):\n    even = 1\n    odd = 1\n    for i in list:\n        if i % 2 == 0:\n            even *= i\n        else:\n            odd *= i\n    return even, odd"
    },
    {
        "task_id": 785,
        "prompt": "Write a python function to convert tuple string to integer tuple.\n\ndef",
        "answer": "def convert(tup_str):\n    return tuple(map(int,tup_str.split(',')))"
    },
    {
        "task_id": 786,
        "prompt": "Write a python function to locate the right insertion point for a specified value in sorted order.\n\ndef",
        "answer": "def binary_search(arr, val):\n    low = 0\n    high = len(arr) - 1\n    mid = 0\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == val:\n            return mid\n        elif arr[mid] < val:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return low"
    },
    {
        "task_id": 787,
        "prompt": "Write a python function that matches a string that has an a followed by three 'b'.\n\ndef",
        "answer": "def aba(str):\n    if len(str) < 3:\n        return False\n    if str[0]!= 'a':\n        return False\n    if str[1]!= 'b':\n        return False\n    if str[2]!= 'a':\n        return False\n    return True"
    },
    {
        "task_id": 788,
        "prompt": "Write a python function to create a new tuple from the given string and list.\n\ndef",
        "answer": "def tuple_creator(string, list):\n    return (string, list)"
    },
    {
        "task_id": 790,
        "prompt": "Write a python function to check whether every even index contains even numbers of a given list.\n\ndef",
        "answer": "def check_even_index_even_number(lst):\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "task_id": 791,
        "prompt": "Write a python function to remove tuples from the given tuple.\n\ndef",
        "answer": "def remove_tuple(tup, val):\n    return tup[:tup.index(val)] + tup[tup.index(val) + 1:]"
    },
    {
        "task_id": 792,
        "prompt": "Write a python function to count the number of lists in a given number of lists.\n\ndef",
        "answer": "def count_list(list_of_lists):\n    count = 0\n    for i in list_of_lists:\n        count += 1\n    return count"
    },
    {
        "task_id": 793,
        "prompt": "Write a python function to find the last position of an element in a sorted array.\n\ndef",
        "answer": "def last_position(arr, x):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            if mid == len(arr) - 1:\n                return mid\n            while arr[mid + 1] == x:\n                mid += 1\n            return mid\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1"
    },
    {
        "task_id": 794,
        "prompt": "Write a python function that matches a string that has an 'a' followed by anything, ending in 'b'.\n\ndef",
        "answer": "def a_followed_by_anything_ending_in_b(string):\n    if string[0] == 'a' and string[-1] == 'b':\n        return True\n    else:\n        return False"
    },
    {
        "task_id": 796,
        "prompt": "Write function to find the sum of all items in the given dictionary.\n\ndef",
        "answer": "def sum_dict(d):\n    sum = 0\n    for key in d:\n        sum += d[key]\n    return sum"
    },
    {
        "task_id": 797,
        "prompt": "Write a python function to find the sum of all odd natural numbers within the range l and r.\n\ndef",
        "answer": "def odd_sum(l, r):\n    return sum(i for i in range(l, r+1) if i % 2!= 0)"
    },
    {
        "task_id": 798,
        "prompt": "Write a python function to find the sum of an array.\n\ndef",
        "answer": "def sum_array(arr):\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum"
    },
    {
        "task_id": 799,
        "prompt": "Write a python function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n\ndef",
        "answer": "def rotate_left(num, d):\n    return (num << d) | (num >> (32 - d))"
    },
    {
        "task_id": 800,
        "prompt": "Write a python function to remove all whitespaces from a string.\n\ndef",
        "answer": "def remove_whitespace(string):\n    return string.replace(\" \", \"\")"
    },
    {
        "task_id": 801,
        "prompt": "Write a python function to count the number of equal numbers from three given integers.\n\ndef",
        "answer": "def count_equal(a, b, c):\n    if a == b == c:\n        return 3\n    elif a == b or a == c or b == c:\n        return 2\n    else:\n        return 0"
    },
    {
        "task_id": 802,
        "prompt": "Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\ndef",
        "answer": "def countRotations(arr, n):\n    # code here\n    low = 0\n    high = n-1\n    while low <= high:\n        mid = (low + high) // 2\n        if (mid < high and arr[mid] > arr[mid + 1]) or (mid > low and arr[mid] < arr[mid - 1]):\n            return mid + 1\n        if arr[low] <= arr[mid]:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return 0"
    },
    {
        "task_id": 803,
        "prompt": "Write a python function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n\ndef",
        "answer": "def isPerfectSquare(num):\n    if num == 1:\n        return True\n    low = 1\n    high = num\n    while low <= high:\n        mid = (low + high) // 2\n        if mid * mid == num:\n            return True\n        elif mid * mid < num:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return False"
    },
    {
        "task_id": 804,
        "prompt": "Write a python function to check whether the product of numbers in a list is even or not.\n\ndef",
        "answer": "def product(list):\n    product = 1\n    for i in list:\n        product *= i\n    return product"
    },
    {
        "task_id": 805,
        "prompt": "Write a python function that returns the list in a list of lists whose sum of elements is the highest.\n\ndef",
        "answer": "def highest_sum(lst):\n    highest = 0\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            highest += lst[i][j]\n    return highest"
    },
    {
        "task_id": 806,
        "prompt": "Write a python function to find maximum run of uppercase characters in the given string.\n\ndef",
        "answer": "def max_run(s):\n    max_run = 0\n    current_run = 0\n    for i in range(len(s)):\n        if s[i].isupper():\n            current_run += 1\n        else:\n            current_run = 0\n        max_run = max(max_run, current_run)\n    return max_run"
    },
    {
        "task_id": 807,
        "prompt": "Write a python function to find the first odd number in a given list of numbers.\n\ndef",
        "answer": "def find_first_odd(nums):\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "task_id": 808,
        "prompt": "Write a python function to check if the given tuples contain the k or not.\n\ndef",
        "answer": "def check_k_tuple(tup, k):\n    for i in tup:\n        if k in i:\n            return True\n    return False"
    },
    {
        "task_id": 809,
        "prompt": "Write a python function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n\ndef",
        "answer": "def check_tuple(tup1, tup2):\n    for i in range(len(tup1)):\n        if tup1[i] > tup2[i]:\n            return False\n    return True"
    }
]