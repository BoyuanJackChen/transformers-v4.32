[
   {
      "task_id": 4900,
      "prompt": "Complete the Python function given the prompt below:\nSomewhere in a mountainous region of the world is a collection of $n$ villages. Connecting these villages to one another is a series of roads, always running directly between two villages and allowing travel in both directions. Due to the treacherous landscape, building these roads is expensive, so the minimum number of roads have been constructed such that each village can reach every other village via a sequence of roads. \nTrade between these villages is very important, since not every village has access to the same supply of natural resources. Many villages produce the same resource, however, so it is useful for villages to know their relative distance to other villages so that they can choose trading partners to minimize overall trading costs. Note that the distance between two villages $a$ and $b$ is the sum of the lengths of the individual roads on the shortest path that connects $a$ and $b$.\nA project has been underway to compute the distance between every pair of villages. This information has been incorporated in a table, along with a map that shows the layout of villages and roads that run between them. You have been assigned the task of distributing the table and map to all the villages for the betterment of the regional economy.\nUnfortunately, not long after you were given this task, a gust of wind blew the map right out of your hand and into the countryside. Despite your best efforts of searching for it, you have been unable to locate it. You know that you could visit all the villages to reconstruct the map and THEN start distributing the map and table, but this will take twice as long as the original task and the villages will be very displeased with you. You wonder, maybe it\u2019s possible to reconstruct the map given only the table?\n-----Input-----\nThe first line of input will contain the integer $n$ ($2 \\leq n \\leq 2500$), the number of villages in this region. The next $n$ lines will contain $n$ integers each. The $j^{\\rm th}$ integer of the $i^{\\rm th}$ line is the distance from village $i$ to village $j$. All distances are greater than zero unless $i = j$, less than $10^7$, and it is guaranteed that the distance from village $i$ to village $j$ is the same as the distance from village $j$ to village $i$.\n-----Output-----\nFor each test case, output $n-1$ lines with two integers $u$ and $v$ on each line, indicating that there is a road connecting villages $u$ and $v$ in this region. Assume the villages are numbered from $1$ to $n$. Any solution that outputs the original set of roads will be accepted.\n-----Examples-----\nSample Input:\n4\n0 1 1 2\n1 0 2 3\n1 2 0 3\n2 3 3 0\nSample Output:\n1 2\n1 3\n1 4\n\ndef",
      "answer": "def roads(n, roads):\n    roads = sorted(roads)\n    roads = sorted(roads, key=lambda x: x[0])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[2])\n    roads = sorted(roads, key=lambda x: x[3])\n    roads = sorted(roads, key=lambda x: x[4])\n    roads = sorted(roads, key=lambda x: x[5])\n    roads = sorted(roads, key=lambda x: x[6])\n    roads = sorted(roads, key=lambda x: x[7])\n    roads = sorted(roads, key=lambda x: x[8])\n    roads = sorted(roads, key=lambda x: x[9])\n    roads = sorted(roads, key=lambda x: x[10])\n    roads = sorted(roads, key=lambda x: x[11])\n    roads = sorted(roads, key=lambda x: x[12])\n    roads = sorted(roads, key=lambda x: x[13])\n    roads = sorted(roads, key=lambda x: x[14])\n    roads = sorted(roads, key=lambda x: x[15])\n    roads = sorted(roads, key=lambda x: x[16])\n    roads = sorted(roads, key=lambda x: x[17])\n    roads = sorted(roads, key=lambda x: x[18])\n    roads = sorted(roads, key=lambda x: x[19])\n    roads = sorted(roads, key=lambda x: x[20])\n    roads = sorted(roads, key=lambda x: x[21])\n    roads = sorted(roads, key=lambda x: x[22])\n    roads = sorted(roads, key=lambda x: x[23])\n    roads = sorted(roads, key=lambda x: x[24])\n    roads = sorted(roads, key=lambda x: x[25])\n    roads = sorted(roads, key=lambda x: x[26])\n    roads = sorted(roads, key=lambda x: x[27])\n    roads = sorted(roads, key=lambda x: x[28])\n    roads = sorted(roads, key=lambda x: x[29])\n    roads = sorted(roads, key=lambda x: x[30])\n    roads = sorted(roads, key=lambda x: x[31])\n    roads = sorted(roads, key=lambda x: x[32])\n    roads = sorted(roads, key=lambda x: x[33])\n    roads = sorted(roads, key=lambda x: x[34])\n    roads = sorted(roads, key=lambda x: x[35])\n    roads = sorted(roads, key=lambda x: x[36])\n    roads = sorted(roads, key=lambda x: x[37])\n    roads = sorted(roads, key=lambda x: x[38])\n    roads = sorted(roads, key=lambda x: x[39])\n    roads = sorted(roads, key=lambda x: x[40])\n    roads = sorted(roads, key=lambda x: x[41])\n    roads = sorted(roads, key=lambda x: x[42])\n    roads = sorted(roads, key=lambda x: x[43])\n    roads = sorted(roads, key=lambda x: x[44])\n    roads = sorted(roads, key=lambda x: x[45])\n    roads = sorted(roads, key=lambda x: x[46])\n    roads = sorted(roads, key=lambda x: x[47])\n    roads = sorted(roads, key=lambda x: x[48])\n    roads = sorted(roads, key=lambda x: x[49])\n    roads = sorted(roads, key=lambda x: x[50])\n    roads = sorted(roads, key=lambda x: x[51])\n    roads = sorted(roads, key=lambda x: x[52])\n    roads = sorted(roads, key=lambda x: x[53])\n    roads = sorted(roads, key=lambda x: x[54])\n    roads = sorted(roads, key=lambda x: x[55])\n    roads = sorted(roads, key=lambda x: x[56])\n    roads = sorted(roads, key=lambda x: x[57])\n    roads = sorted(roads, key=lambda x: x[58])\n    roads = sorted(roads",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4901,
      "prompt": "Complete the Python function given the prompt below:\nDRM Encryption is a new kind of encryption. Given an encrypted string (which we\u2019ll call a DRM message), the decryption process involves three steps: Divide, Rotate and Merge. This process is described in the following example with the DRM message \u201cEWPGAJRB\u201d:Divide\n\u2013 First, divide the message in half to \u201cEWPG\u201d and \u201cAJRB\u201d.Rotate\n\u2013 For each half, calculate its rotation value by summing up the values of each character ($\\textrm{A} = 0, \\textrm{B} = 1, \\ldots, \\textrm{Z} = 25$). The rotation value of \u201cEWPG\u201d is $4 + 22 + 15 + 6 = 47$. Rotate each character in \u201cEWPG\u201d $47$ positions forward (wrapping from Z to A when necessary) to obtain the new string \u201cZRKB\u201d. Following the same process on \u201cAJRB\u201d results in \u201cBKSC\u201d.Merge\n\u2013 The last step is to combine these new strings (\u201cZRKB\u201d and \u201cBKSC\u201d) by rotating each character in the first string by the value of the corresponding character in the second string. For the first position, rotating \u2018Z\u2019 by \u2018B\u2019 means moving it forward 1 character, which wraps it around to \u2018A\u2019. Continuing this process for every character results in the final decrypted message, \u201cABCD\u201d.\n-----Input-----\nThe input contains a single DRM message to be decrypted. All characters in the string are uppercase letters and the string\u2019s length is even and $\\leq 15000$.\n-----Output-----\nDisplay the decrypted DRM message.\n-----Examples-----\nSample Input:\nEWPGAJRB\nSample Output:\nABCD\n\ndef",
      "answer": "def decrypt_drm(drm_msg):\n    # your code goes here\n    return drm_msg\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4902,
      "prompt": "Complete the Python function given the prompt below:\nPer recently learned about palindromes. Now he wants to tell us about it and also has more awesome scientific news to share with us.\n\u201cA palindrome is a word that is the same no matter whether you read it backward or forward\u201d, Per recently said in an interview. He continued: \u201cFor example, add is not a palindrome, because reading it backwards gives dda and it\u2019s actually not the same thing, you see. However, if we reorder the letters of the word, we can actually get a palindrome. Hence, we say that add is a Peragram, because it is an anagram of a palindrome\u201d.\nPer gives us a more formal definition of Peragrams: \u201cLike I said, if a word is an anagram of at least one palindrome, we call it a Peragram. And recall that an anagram of a word $w$ contains exactly the same letters as $w$, possibly in a different order.\u201d\n-----Task-----\nGiven a string, find the minimum number of letters you have to remove from it, so that the string becomes a Peragram.\n-----Input-----\nInput consists of a string on a single line. The string will contain at least $1$ and at most $1000$ characters. The string will only contain lowercase letters a-z.\n-----Output-----\nOutput should consist of a single integer on a single line, the minimum number of characters that have to be removed from the string to make it a Peragram.\n-----Examples-----\nSample Input:\nabc\nSample Output:\n2\n\ndef",
      "answer": "def palindrome(string):\n    string = string.lower()\n    string = ''.join(string.split())\n    string = ''.join(sorted(string))\n    string = ''.join(reversed(string))\n    string = ''.join(sorted(string))\n    string = ''.join(reversed(string))\n    string = ''.join(sorted(string))\n    string = ''.join(reversed(string))\n    string = ''.join(sorted(string))\n    string = ''.join(reversed(string))\n    string = ''.join(sorted(string))\n    string = ''.join(reversed(string))\n    string = ''.join(sorted(string))\n    string = ''.join(reversed(string))\n    string = ''.join(sorted(string))\n    string = ''.join(reversed(string))\n    string = ''.join(sorted(string))\n    string = ''.join(reversed(string))\n    string = ''.join(sorted(string))\n    string = ''.join(reversed(string))\n    string = ''.join(sorted(string))\n    string = ''.join(reversed(string))\n    string = ''.join(sorted(string))\n    string = ''.join(reversed(string))\n    string = ''.join(sorted(string))\n    string = ''.join(reversed(string))\n    string = ''.join(sorted(string))\n    string = ''.join(reversed(string))\n    string = ''.join(sorted(string))\n    string = ''.join(reversed(string))\n    string = ''.join(sorted(string))\n    string = ''.join(reversed(string))\n    string = ''.join(sorted(string))\n    string = ''.join(reversed(string))\n    string = ''.join(sorted(string))\n    string = ''.join(reversed(string))\n    string = ''.join(sorted(string))\n    string = ''.join(reversed(string))\n    string = ''.join(sorted(string))\n    string = ''.join(reversed(string))\n    string = ''.join(sorted(string))\n    string = ''.join(reversed(string))\n    string = ''.join(sorted(string))\n    string = ''.join(reversed(string))\n    string = ''.join(sorted(string))\n    string = ''.join(reversed(string))\n    string = ''.join(sorted(string))\n    string = ''.join(reversed(string))\n    string = ''.join(sorted(string))\n    string = ''.join(reversed(string))\n    string = ''.join(sorted(string))\n    string = ''.join(reversed(string))\n    string = ''.join(sorted(string))\n    string = ''.join(reversed(string))\n    string = ''.join(sorted(string))\n    string = ''.join(reversed(string))\n    string = ''.join(sorted(string))\n    string = ''.join(reversed(string))\n    string = ''.join(sorted(string))\n    string = ''.join(reversed(string))\n    string = ''.join(sorted(string))\n    string = ''.join(reversed(string))\n    string = ''.join(sorted(string))\n    string = ''.join(reversed(string))\n    string = ''.join(sorted(string))\n    string = ''.join(reversed(string))\n    string = ''.join(sorted(string))\n    string = ''.join(reversed(string))\n    string = ''.join(sorted(string))\n    string = ''.join(reversed(string))\n    string = ''.join(sorted(string))\n    string = ''.join(reversed(string))\n    string = ''.join(sorted(string))\n    string = ''.join(reversed(string))\n    string = ''.join(sorted(string))\n    string = ''.join(reversed(string",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4903,
      "prompt": "Complete the Python function given the prompt below:\nJon Marius shouted too much at the recent Justin Bieber concert, and now needs to go to the doctor because of his sore throat. The doctor\u2019s instructions are to say \u201caaah\u201d. Unfortunately, the doctors sometimes need Jon Marius to say \u201caaah\u201d for a while, which Jon Marius has never been good at. Each doctor requires a certain level of \u201caah\u201d \u2013 some require \u201caaaaaah\u201d, while others can actually diagnose his throat with just an \u201ch\u201d. (They often diagnose wrongly, but that is beyond the scope of this problem.) Since Jon Marius does not want to go to a doctor and have his time wasted, he wants to compare how long he manages to hold the \u201caaah\u201d with the doctor\u2019s requirements. (After all, who wants to be all like \u201caaah\u201d when the doctor wants you to go \u201caaaaaah\u201d?)\nEach day Jon Marius calls up a different doctor and asks them how long his \u201caaah\u201d has to be. Find out if Jon Marius would waste his time going to the given doctor.\n-----Input-----\nThe input consists of two lines. The first line is the \u201caaah\u201d Jon Marius is able to say that day. The second line is the \u201caah\u201d the doctor wants to hear. Only lowercase \u2019a\u2019 and \u2019h\u2019 will be used in the input, and each line will contain between $0$ and $999$ \u2019a\u2019s, inclusive, followed by a single \u2019h\u2019.\n-----Output-----\nOutput \u201cgo\u201d if Jon Marius can go to that doctor, and output \u201cno\u201d otherwise.\n-----Examples-----\nSample Input:\naaah\naaaaah\nSample Output:\nno\n\ndef",
      "answer": "def aaaah(a):\n    if a == 'aaah':\n        return 'go'\n    else:\n        return 'no'\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4904,
      "prompt": "Complete the Python function given the prompt below:\nAlice and Barbara played some friendly games of one-on-one basketball after work, and you agreed to help them keep score. The rules of the game were simple:\n - Each successful shot by a player earns them either one or two points;\n - The first player to eleven points wins, with one exception;\n - If the score is tied $10$\u2013$10$, the previous rule is replaced by a \u201cwin by 2\u201d rule: the first player to lead the other by at least two points wins.\nSo for example, $11$\u2013$7$, $9$\u2013$11$, and $14$\u2013$12$ are possible final scores (but not $14$\u2013$13$).\nWhenever Alice or Barbara scored points, you jotted down an A or B (indicating a score by Alice or by Barbara) followed by a 1 or 2 (the number of points scored). You have some records of the games Alice and Barbara played in this format, but do not remember who won each game. Can you reconstruct the winner from the game record?\n-----Input-----\nThe input consists of a single line with no more than $200$ characters: the record of one game. The record consists of single letters (either A or B) alternating with single numbers (either 1 or 2), and includes no spaces or other extraneous characters. Each record will be a correct scoring history of a single completed game, played under the rules described above.\n-----Output-----\nPrint a single character, either A or B: the winner of the recorded game.\n-----Examples-----\nSample Input:\nA2B1A2B2A1A2A2A2\nSample Output:\nA\n\ndef",
      "answer": "def winner(record):\n    score = 0\n    for i in range(len(record)):\n        if record[i] == 'A':\n            score += 1\n        elif record[i] == 'B':\n            score += 2\n    if score >= 11:\n        return 'A'\n    elif score == 10:\n        return 'B'\n    else:\n        return 'A' if score > score + 2 else 'B'\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4905,
      "prompt": "Complete the Python function given the prompt below:\nLast week Mister George visited Croatia. Since Mister George is a very important person, while he was in a street, the police disallowed entry to that street, but vehicles that entered the street before Mister George could continue driving.\nWhile Mister George was visiting, Luka drove his truck around town. But because of some of the streets being closed off, he couldn\u2019t make his delivery in time and almost lost his job. Although it is late now, he is wondering how he could have planned his delivery better, i.e., what would have been the least time needed to make his delivery while Mister George was visiting. He knows the route mister George took.\nThe city is modeled with intersections and two-way streets connecting them. For each street, Luka knows how much time he needs to traverse it (mister George needs the same amount of time).\nFor example, if Mister George starts traversing a street during minute 10 and needs 5 minutes to exit it, this street will be blocked during minutes 10, 11, 12, 13 and 14. Luka can enter the street during minutes 9 and earlier, or 15 and later. If Luka arrives during minutes 10-14, he has can wait at the intersection until minute 15 and then enter the street.\nWrite a program that calculates the least amount of time Luka needs to make his delivery, if he starts driving $K$ minutes after the arrival of Mister George.\n-----Input-----\nThe first line contains two integers $N$ and $M$ ($2 \\le N \\le 1000$, $2 \\le M \\le 10000$), the number of intersections and the number of streets. The intersections are numbered $1$ to $N$.\nThe second line contains four integers $A$, $B$, $K$ and $G$ ($1 \\le A, B \\le N$, $0 \\le K \\le 2000$, $0 \\le G \\le 1000$). These are, in order:\n - The intersection where Luka starts;\n - The intersection Luka must get to;\n - The difference in starting times between mister George and Luka (Luka starts at intersection $A$ exactly $K$ minutes after mister George starts his route);\n - The number of intersections on Mister George\u2019s route.\nThe third line contains $G$ integers, the labels of intersections mister George will visit. Every pair of adjacent integers denotes a street he will traverse. That street will exist and Mister George will traverse every street at most once.\nEach of the following $M$ lines contains three integers $A$, $B$ and $L$, meaning that there is a street between intersection $A$ and $B$, and it takes $L$ minutes to traverse. $L$ will be between 1 and 1000.\n-----Output-----\nOutput the least amount of time (in minutes) Luka needs to make his delivery.\n-----Examples-----\nSample Input:\n6 5\n1 6 20 4\n5 3 2 4\n1 2 2\n2 3 8\n2 4 3\n3 6 10\n3 5 15\nSample Output:\n21\n\ndef",
      "answer": "def find_min_time(intersections, streets, start, end, time):\n    if start == end:\n        return 0\n    if start > end:\n        return float('inf')\n    if start == 1 and end == 2:\n        return time\n    if start == 2 and end == 3:\n        return time + 2\n    if start == 3 and end == 4:\n        return time + 2\n    if start == 4 and end == 5:\n        return time + 2\n    if start == 5 and end == 6:\n        return time + 2\n    if start == 6 and end == 7:\n        return time + 2\n    if start == 7 and end == 8:\n        return time + 2\n    if start == 8 and end == 9:\n        return time + 2\n    if start == 9 and end == 10:\n        return time + 2\n    if start == 10 and end == 11:\n        return time + 2\n    if start == 11 and end == 12:\n        return time + 2\n    if start == 12 and end == 13:\n        return time + 2\n    if start == 13 and end == 14:\n        return time + 2\n    if start == 14 and end == 15:\n        return time + 2\n    if start == 15 and end == 16:\n        return time + 2\n    if start == 16 and end == 17:\n        return time + 2\n    if start == 17 and end == 18:\n        return time + 2\n    if start == 18 and end == 19:\n        return time + 2\n    if start == 19 and end == 20:\n        return time + 2\n    if start == 20 and end == 21:\n        return time + 2\n    if start == 21 and end == 22:\n        return time + 2\n    if start == 22 and end == 23:\n        return time + 2\n    if start == 23 and end == 24:\n        return time + 2\n    if start == 24 and end == 25:\n        return time + 2\n    if start == 25 and end == 26:\n        return time + 2\n    if start == 26 and end == 27:\n        return time + 2\n    if start == 27 and end == 28:\n        return time + 2\n    if start == 28 and end == 29:\n        return time + 2\n    if start == 29 and end == 30:\n        return time + 2\n    if start == 30 and end == 31:\n        return time + 2\n    if start == 31 and end == 32:\n        return time + 2\n    if start == 32 and end == 33:\n        return time + 2\n    if start == 33 and end == 34:\n        return time + 2\n    if start == 34 and end == 35:\n        return time + 2\n    if start == 35 and end == 36:\n        return time + 2\n    if start == 36 and end == 37:\n        return time + 2\n    if start == 37 and end == 38:\n        return time + 2\n    if start == 38 and end == 39:\n        return time + 2\n    if start == 39 and end == 40:\n        return time + 2\n    if start == 40 and end == 41:\n        return time + 2\n    if start == 41 and end == 42:\n        return time + 2\n    if start == 42 and end == 43:\n        return time + 2\n    if start == 43 and end == 44:\n        return time + 2\n    if start == 44 and end == 45:\n        return time + 2\n    if start == 45 and end == 46:\n        return time + 2\n    if start == 46 and end == 47:\n        return time + 2\n    if start == 47 and end == 48:\n        return time + 2\n    if start == 48 and end == 49:\n        return time + 2\n    if start == 49 and end == 50:\n        return time + 2\n    if start == 50 and end == 51:\n        return time + 2\n    if start == 51 and end == 52:\n        return time + 2\n    if start == 52 and end == 53:\n        return time + 2\n    if start == 53 and end == 54:\n        return time + 2\n    if start == 54 and end == 55:\n        return time + 2\n    if start == 55 and end == 56:\n        return time + 2\n    if start == 56 and end == 57:\n        return time + 2\n    if start == 57 and end == 58:\n        return time + 2\n    if start == 58 and end == 59:\n        return time",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4906,
      "prompt": "Complete the Python function given the prompt below:\nForrest lives in a prehistoric era of \u201cdial-up Internet.\u201d Unlike the fast streaming of today\u2019s broadband era, dial-up connections are only capable of transmitting small amounts of text data at reasonable speeds. Forrest has noticed that his communications typically include repeated characters, and has designed a simple compression scheme based on repeated information. Text data is encoded for transmission, possibly resulting in a much shorter data string, and decoded after transmission to reveal the original data.\nThe compression scheme is rather simple. When encoding a text string, repeated consecutive characters are replaced by a single instance of that character and the number of occurrences of that character (the character\u2019s run length). Decoding the encoded string results in the original string by repeating each character the number of times encoded by the run length. Forrest calls this encoding scheme run-length encoding. (We don\u2019t think he was actually the first person to invent it, but we haven\u2019t mentioned that to him.)\nFor example, the string HHHeelllo is encoded as H3e2l3o1. Decoding H3e2l3o1 results in the original string. Forrest has hired you to write an implementation for his run-length encoding algorithm.\n-----Input-----\nInput consists of a single line of text. The line starts with a single letter: E for encode or D for decode. This letter is followed by a single space and then a message. The message consists of $1$ to $100$ characters.\nEach string to encode contains only upper- and lowercase English letters, underscores, periods, and exclamation points. No consecutive sequence of characters exceeds $9$ repetitions.\nEach string to decode has even length. Its characters alternate between the same characters as strings to encode and a single digit between $1$ and $9$, indicating the run length for the preceding character.\n-----Output-----\nOn an input of E output the run-length encoding of the provided message. On an input of D output the original string corresponding to the given run-length encoding.\n-----Examples-----\nSample Input:\nE HHHeellloWooorrrrlld!!\nSample Output:\nH3e2l3o1W1o3r4l2d1!2\n\ndef",
      "answer": "def encode(s):\n    return ''.join(str(len(s)) + c for c in s)\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4907,
      "prompt": "Complete the Python function given the prompt below:\nYour parents decided that it would be \u201cfun\u201d to spend the entire Sunday walking near the Mookerheide close to Nijmegen.\nAlthough you can pass the time by solving programming problems in your head, your siblings do not have the same luxury. After a short while, your younger sister Alice and your big brother Bob find themselves hopelessly bored. Together, they try to figure out if they can pass the time with a game (a problem that would later be referred to as the Bob and Alice Pastime Conundrum). Finally, they come up with the following simple game.\nThey find a single branch of length $n$ that will be the main object of the game. Alternatingly, Alice and Bob choose a piece of branch and break it into two parts, in such a way that both parts have integer lengths. The last player who is able to break one of the pieces wins. Alice gets to start, as she is the younger of the two.\nOf course, you already have the game figured out in your head. Assuming Bob plays optimally, can Alice win the game? And if so, what move should she make first?\n-----Input-----\n - A line containing a single integer $2\\leq n\\leq 10^9$, the length of the branch.\n-----Output-----\n - On the first line print the name of the person who wins, Alice or Bob.\n - If Alice can win, print the length of a piece of branch Alice can break off as a winning move. This should be an integer between $1$ and $n-1$, inclusive.\nIf there are multiple valid solutions, you may output any one of them.\n-----Examples-----\nSample Input:\n2\nSample Output:\nAlice\n1\n\ndef",
      "answer": "def game(n):\n    if n % 2 == 0:\n        return n // 2\n    else:\n        return n // 2 + 1\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4908,
      "prompt": "Complete the Python function given the prompt below:\nLittle Mirko wrote into his math notebook an equation containing three positive integers, the equals sign and one of the four basic arithmetic operations (addition, subtraction, multiplication and division).\nDuring another class, his friend Slavko erased the equals sign and the operations from Mirko\u2019s notebook. Help Mirko by reconstructing the equation from the three integers\n-----Input-----\nThe first line of input contains three integers less than 100, separated by spaces. The input data will guarantee that a solution, although not necessarily unique, will always exist.\n-----Output-----\nOn a single line, output a valid equation containing the three integers (in the same order), an equals sign and one of the four operations. If there are multiple solutions, output any of them.\n-----Examples-----\nSample Input:\n5 3 8\nSample Output:\n5+3=8\n\ndef",
      "answer": "def solve(a,b,c):\n    if a==0:\n        return \"0\"\n    if a==1:\n        return str(b)+\"+\"+str(c)\n    if a==2:\n        return str(b)+\"-\"+str(c)\n    if a==3:\n        return str(b)+\"*\"+str(c)\n    if a==4:\n        return str(b)+\"/\"+str(c)\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4909,
      "prompt": "Complete the Python function given the prompt below:\nThe tunnels of Cu Chi are an immense network of underground tunnels connecting rooms located in the Cu Chi District of Ho Chi Minh City. The Cu Chi tunnels were the location of several military campaigns in the 1960s. Nowadays, it is a popular tourist destination.\nThere are documents from trusted sources about a private network of tunnels in this area used by a secret forces unit but it has not been discovered. According to the documents, this private network has $N$ rooms (numbered from $1$ to $N$) connected by $N-1$ bidirectional tunnels. Room $1$ is the entry point from the ground surface to this underground network. From room $1$, you can follow the tunnels to go to any of the rooms. The rooms are numbered in such a way that, if you follow the shortest path from room $1$ to any room $X$, the sequence of visited rooms\u2019 indices will be increasing. The image below shows a valid map of this network.\nThe network below is invalid, since the path from $1$ to $4$ is $1$ - $3$ - $2$ - $4$, which is not increasing:\nThere is also an old article from an unknown source mentioning about $D_ i$ which is the number of rooms directly connected to room $i$.\nGiven an array $D$ of size $N$, your task is to verify if it is possible to have such a network.\n-----Input-----\n - The first line contains an integer $N$ - the number of rooms in the network $(2 \\leq N \\leq 1000)$.\n - The second line consists of $N$ integers $D_ i$ - the number of rooms that are directly connected to room $i$ $(1 \\leq D_ i \\leq N - 1)$.\n-----Output-----\nPrint YES/NO if it is possible/impossible to have such a network, respectively.\n-----Examples-----\nSample Input:\n8\n3 2 2 1 1 3 1 1\nSample Output:\nYES\n\ndef",
      "answer": "def is_valid_network(n, d):\n    if n == 1:\n        return True\n    if n == 2:\n        return True\n    if n == 3:\n        return True\n    if n == 4:\n        return True\n    if n == 5:\n        return True\n    if n == 6:\n        return True\n    if n == 7:\n        return True\n    if n == 8:\n        return True\n    if n == 9:\n        return True\n    if n == 10:\n        return True\n    if n == 11:\n        return True\n    if n == 12:\n        return True\n    if n == 13:\n        return True\n    if n == 14:\n        return True\n    if n == 15:\n        return True\n    if n == 16:\n        return True\n    if n == 17:\n        return True\n    if n == 18:\n        return True\n    if n == 19:\n        return True\n    if n == 20:\n        return True\n    if n == 21:\n        return True\n    if n == 22:\n        return True\n    if n == 23:\n        return True\n    if n == 24:\n        return True\n    if n == 25:\n        return True\n    if n == 26:\n        return True\n    if n == 27:\n        return True\n    if n == 28:\n        return True\n    if n == 29:\n        return True\n    if n == 30:\n        return True\n    if n == 31:\n        return True\n    if n == 32:\n        return True\n    if n == 33:\n        return True\n    if n == 34:\n        return True\n    if n == 35:\n        return True\n    if n == 36:\n        return True\n    if n == 37:\n        return True\n    if n == 38:\n        return True\n    if n == 39:\n        return True\n    if n == 40:\n        return True\n    if n == 41:\n        return True\n    if n == 42:\n        return True\n    if n == 43:\n        return True\n    if n == 44:\n        return True\n    if n == 45:\n        return True\n    if n == 46:\n        return True\n    if n == 47:\n        return True\n    if n == 48:\n        return True\n    if n == 49:\n        return True\n    if n == 50:\n        return True\n    if n == 51:\n        return True\n    if n == 52:\n        return True\n    if n == 53:\n        return True\n    if n == 54:\n        return True\n    if n == 55:\n        return True\n    if n == 56:\n        return True\n    if n == 57:\n        return True\n    if n == 58:\n        return True\n    if n == 59:\n        return True\n    if n == 60:\n        return True\n    if n == 61:\n        return True\n    if n == 62:\n        return True\n    if n == 63:\n        return True\n    if n == 64:\n        return True\n    if n == 65:\n        return True\n    if n == 66:\n        return True\n    if n == 67:\n        return True\n    if n == 68:\n        return True\n    if n == 69:\n        return True\n    if n == 70:\n        return True\n    if n == 71:\n        return True\n    if n == 72:\n        return True\n    if n == 73:\n        return True\n    if n == 74:\n        return True\n    if n == 75:\n        return True\n    if n == 76:\n        return True\n    if n == 77:\n        return True\n    if n == 78:\n        return True\n    if n == 79:\n        return True\n    if n == 80:\n        return True\n    if n == 81:\n        return True\n    if n == 82:\n        return True\n    if n == 83:\n        return True\n    if n == 84:\n        return True\n    if n == 85:\n        return True\n    if n == 86:\n        return True\n    if n == 87:\n        return True\n    if n == 88:\n        return True\n    if n == 89:\n        return True\n    if n == 90:\n        return True\n    if n == 91:\n        return True\n    if n == 92:\n        return True\n    ",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4910,
      "prompt": "Complete the Python function given the prompt below:\nEveryone knows that the highlight of Halloween at HiQ is their annual costume contest. In their costume contest, they have $D$ categories of costumes that they give a \u201cbest of\u201d award to, such as most malignant mummy, most ghoulish ghost and most wicked witch. Judges are very lazy, however. When picking a winner in each of the costume categories, they simply pick one of the costumes at random to give the award to.\nThis year, you want to win. After 5 consecutive years as runner-up in the category darkest demon you have decided to throw away your costume and only optimize for winning. You have polled your colleagues about what category of costume they are entering with in the contest. Given their responses, can you figure our what costume you should bring to maximize your chance of winning?\n-----Input-----\nThe first line of input contains an integer $N$ ($1 \\le N \\le 1000$), the number of colleagues you have polled on their costumes. The next $N$ lines contains their responses. Each response is a string of between $1$ and $20$ letters a-z. You know that for each category in the contest, you have at least one colleague participating with such a costume.\n-----Output-----\nOutput the costume category you have the highest chance of winning with. If multiple categories are tied for highest, you should output them all in lexicographic order.\n-----Examples-----\nSample Input:\n10\nghost\nmummy\nwitch\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\nSample Output:\nghost\nmummy\nwitch\n\ndef",
      "answer": "def get_winner(categories):\n    categories.sort()\n    return categories[-1]\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4911,
      "prompt": "Complete the Python function given the prompt below:\nMyTunes, a new music application from Mapple, allows you to display and sort your music according to many different attributes. Attributes like album name, song title, artist, and song length are available, among others. One feature MyTunes does NOT have is stable sorting. You need to write the software which does this. Stable sorting would allow the user to do something like this: first sort the whole list by song title, and then sort the whole list by artist. The result is that the list of songs are sorted primarily by artist (since it\u2019s the last thing used to sort), then within each artist they are sorted by song name (since before the artist sort, the songs were ordered by song name). When sorting two songs with equal attribute values they should remain in their relative order prior to sorting (giving stable sorting).\nThe first sort starts from the order of songs as given in the input. Each subsequent sort starts from the order given by the previous sort, rather than starting from the initial order. All sorting should be done least to greatest, in lexicographic order (using ASCII values, even for numeric data).\n-----Input-----\nThe first line contains a list of $1$ to $20$ unique attributes, separated by single spaces. The next line contains an integer $1 \\leq m \\leq 100$ giving the number of songs that follow, one song per line. Each song has the values for all the attributes, separated by single spaces. The next line contains an integer $1 \\leq n \\leq 20$ giving the number of sorting commands. The following $n$ lines each contain one sort command, which is the name of an attribute. Initially, the song list is in the order given on the input. All attributes and values are between $1$ and $30$ characters, using only a\u2013z, A\u2013Z, $0$\u2013$9$, and underscore (_).\n-----Output-----\nAfter each sort command, print the list of attributes followed by the song list in the order given by the sort command, one song per line. Print a space between adjacent fields. Between each pair of printed lists, print a blank line.\n-----Examples-----\nSample Input:\nArtist Album Song_Title Length_seconds\n5\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nGeorge_Winston Summer Lullaby 215\n3\nArtist\nAlbum\nSong_Title\nSample Output:\nArtist Album Song_Title Length_seconds\nGeorge_Winston Summer Lullaby 215\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nTchaikovsky Piano_Favorites November 163\nArtist Album Song_Title Length_seconds\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nTchaikovsky Piano_Favorites November 163\nGeorge_Winston Summer Lullaby 215\nArtist Album Song_Title Length_seconds\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nGeorge_Winston Summer Lullaby 215\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\n\ndef",
      "answer": "def stable_sort(lst):\n    for i in range(len(lst)):\n        for j in range(len(lst) - i - 1):\n            if lst[j][1] > lst[j + 1][1]:\n                lst[j], lst[j + 1] = lst[j + 1], lst[j]\n    return lst\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4912,
      "prompt": "Complete the Python function given the prompt below:\nThe construction worker previously known as Lars has many bricks of height $1$ and different lengths, and he is now trying to build a wall of width $w$ and height $h$. Since the construction worker previously known as Lars knows that the subset sum problem is $\\mathsf{NP}$-hard, he does not try to optimize the placement but he just lays the bricks in the order they are in his pile and hopes for the best. First he places the bricks in the first layer, left to right; after the first layer is complete he moves to the second layer and completes it, and so on. He only lays bricks horizontally, without rotating them. If at some point he cannot place a brick and has to leave a layer incomplete, then he gets annoyed and leaves. It does not matter if he has bricks left over after he finishes.\nYesterday the construction worker previously known as Lars got really annoyed when he realized that he could not complete the wall only at the last layer, so he tore it down and asked you for help. Can you tell whether the construction worker previously known as Lars will complete the wall with the new pile of bricks he has today?\n-----Input-----\nThe first line contains three integers $h$, $w$, $n$ ($1 \\leq h \\leq 100$, $1 \\leq w \\leq 100$, $1 \\leq n \\leq 10000$), the height of the wall, the width of the wall, and the number of bricks respectively. The second line contains $n$ integers $x_ i$ ($1 \\leq x_ i \\leq 10$), the length of each brick.\n-----Output-----\nOutput YES if the construction worker previously known as Lars will complete the wall, and NO otherwise.\n-----Examples-----\nSample Input:\n2 10 7\n5 5 5 5 5 5 5\nSample Output:\nYES\n\ndef",
      "answer": "def solve(h, w, n, x):\n    if h == 1 and w == 1:\n        return \"YES\"\n    if h == 1 and w > 1:\n        return \"NO\"\n    if h > 1 and w == 1:\n        return \"NO\"\n    if h > 1 and w > 1:\n        for i in range(1, w):\n            if h * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w * i + w *",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4913,
      "prompt": "Complete the Python function given the prompt below:\nTo determine the efficacy of a vaccine against a disease, a clinical trial is needed. Some participants are given the real vaccine, while others are given a placebo as the control group. The participants are tracked to determine if they are infected by three different strains (A, B, and C) of a virus. The efficacy of the vaccine against infection by a particular strain is simply the percentage reduction of the infection rate of the vaccinated group compared to the control group.\nFor example, suppose that there are $40$ people in the vaccinated group, $8$ of which are infected by strain B. Then the infection rate is $20$%. Further suppose that $50$ people are in the control group, and $30$ people are infected by strain B. Then the infection rate for the control group is $60$%. Thus the vaccine efficacy against infection is approximately $66.67$% (since $20$% is a $66.67$% percentage reduction of $60$%). If the infection rate for a particular strain in the vaccinated group is not lower than that of the control group, the vaccine is not effective against infection by that strain.\nWhat is the vaccine efficacy against infection by the three strains?\n-----Input-----\nThe first line of input contains an integer $N$ ($2 \\leq N \\leq 10000$) containing the number of participants in the clinical trial.\nThe next $N$ lines describe the participants. Each of these lines contains a string of length four. Each letter is either \u2018Y\u2019 or \u2018N\u2019. The first letter indicates whether the participant is vaccinated with the real vaccine, and the remaining three letters indicate whether the participant is infected by strain A, B, and C, respectively.\nThere is at least one participant in the vaccinated group and the control group. There is at least one participant in the control group infected by each strain (but they may be different participants).\n-----Output-----\nDisplay the vaccine efficacy against infection by strain A, B, and C in that order. If the vaccine is not effective against infection by a particular strain, display Not Effective for that strain instead. Answers with an absolute error or relative error of at most $10^{-2}$ will be accepted.\n-----Examples-----\nSample Input:\n10\nNYNY\nNNYY\nNYYY\nNYYN\nNNNY\nYYNN\nYYYN\nYYNY\nYYNN\nYYNY\nSample Output:\nNot Effective\n66.666667\n50.000000\n\ndef",
      "answer": "def vaccine_efficacy(n):\n    vaccine_efficacy = []\n    for i in range(n):\n        vaccine_efficacy.append(vaccine_efficacy_helper(vaccine_efficacy))\n    return vaccine_efficacy\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4914,
      "prompt": "Complete the Python function given the prompt below:\nAdrian, Bruno and Goran wanted to join the bird lovers\u2019 club. However, they did not know that all applicants must pass an entrance exam. The exam consists of $N$ questions, each with three possible answers: A, B and C.\nUnfortunately, they couldn\u2019t tell a bird from a whale so they are trying to guess the correct answers. Each of the three boys has a theory of what set of answers will work best:\nAdrian claims that the best sequence is: A, B, C, A, B, C, A, B, C, A, B, C...\nBruno is convinced that this is better: B, A, B, C, B, A, B, C, B, A, B, C...\nGoran laughs at them and will use this sequence: C, C, A, A, B, B, C, C, A, A, B, B...\nWrite a program that, given the correct answers to the exam, determines who of the three was right \u2013 whose sequence contains the most correct answers.\n-----Input-----\nThe first line contains an integer $N$ ($1 \\le N \\le 100$), the number of questions on the exam.\nThe second line contains a string of $N$ letters \u2018A\u2019, \u2018B\u2019 and \u2018C\u2019. These are, in order, the correct answers to the questions in the exam.\n-----Output-----\nOn the first line, output $M$, the largest number of correct answers one of the three boys gets.\nAfter that, output the names of the boys (in alphabetical order) whose sequences result in $M$ correct answers.\n-----Examples-----\nSample Input:\n5\nBAACC\nSample Output:\n3\nBruno\n\ndef",
      "answer": "def count_correct_answers(answers):\n    correct_answers = 0\n    for i in range(len(answers)):\n        if answers[i] == answers[i-1]:\n            correct_answers += 1\n    return correct_answers\n\n",
      "difficulty": "introductory",
      "split": "test"
   }
]