[
   {
      "task_id": 4300,
      "prompt": "Complete the Python function given the prompt below:\nIt's now the season of TAKOYAKI FESTIVAL!\nThis year, N takoyaki (a ball-shaped food with a piece of octopus inside) will be served. The deliciousness of the i-th takoyaki is d_i.\nAs is commonly known, when you eat two takoyaki of deliciousness x and y together, you restore x \\times y health points.\nThere are \\frac{N \\times (N - 1)}{2} ways to choose two from the N takoyaki served in the festival. For each of these choices, find the health points restored from eating the two takoyaki, then compute the sum of these \\frac{N \\times (N - 1)}{2} values.\n-----Constraints-----\n - All values in input are integers.\n - 2 \\leq N \\leq 50\n - 0 \\leq d_i \\leq 100\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nd_1 d_2... d_N\n-----Output-----\nPrint the sum of the health points restored from eating two takoyaki over all possible choices of two takoyaki from the N takoyaki served.\n-----Sample Input-----\n3\n3 1 2\n-----Sample Output-----\n11\nThere are three possible choices:\n - Eat the first and second takoyaki. You will restore 3 health points.\n - Eat the second and third takoyaki. You will restore 2 health points.\n - Eat the first and third takoyaki. You will restore 6 health points.\nThe sum of these values is 11.\n\ndef",
      "answer": "def takoyaki(n, d_1, d_2, d_3):\n    return (n * (n - 1) / 2) * (d_1 + d_2 + d_3)\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4301,
      "prompt": "Complete the Python function given the prompt below:\nYou are given a sequence of length N: A_1, A_2,..., A_N.\nFor each integer i between 1 and N (inclusive), answer the following question:\n - Find the maximum value among the N-1 elements other than A_i in the sequence.\n-----Constraints-----\n - 2 \\leq N \\leq 200000\n - 1 \\leq A_i \\leq 200000\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nA_1\n:\nA_N\n-----Output-----\nPrint N lines. The i-th line (1 \\leq i \\leq N) should contain the maximum value among the N-1 elements other than A_i in the sequence.\n-----Sample Input-----\n3\n1\n4\n3\n-----Sample Output-----\n4\n3\n4\n - The maximum value among the two elements other than A_1, that is, A_2 = 4 and A_3 = 3, is 4.\n - The maximum value among the two elements other than A_2, that is, A_1 = 1 and A_3 = 3, is 3.\n - The maximum value among the two elements other than A_3, that is, A_1 = 1 and A_2 = 4, is 4.\n\ndef",
      "answer": "def max_of_two(a, b):\n    if a > b:\n        return a\n    else:\n        return b\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4302,
      "prompt": "Complete the Python function given the prompt below:\nThere are two buttons, one of size A and one of size B.\nWhen you press a button of size X, you get X coins and the size of that button decreases by 1.\nYou will press a button twice. Here, you can press the same button twice, or press both buttons once.\nAt most how many coins can you get?\n-----Constraints-----\n - All values in input are integers.\n - 3 \\leq A, B \\leq 20\n-----Input-----\nInput is given from Standard Input in the following format:\nA B\n-----Output-----\nPrint the maximum number of coins you can get.\n-----Sample Input-----\n5 3\n-----Sample Output-----\n9\nYou can get 5 + 4 = 9 coins by pressing the button of size 5 twice, and this is the maximum result.\n\ndef",
      "answer": "def coins(a, b):\n    coins = 0\n    while a > 0 and b > 0:\n        if a > b:\n            a -= 1\n        else:\n            b -= 1\n        coins += 1\n    return coins\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4303,
      "prompt": "Complete the Python function given the prompt below:\nThere are N candles placed on a number line.\nThe i-th candle from the left is placed on coordinate x_i.\nHere, x_1 < x_2 <... < x_N holds.\nInitially, no candles are burning.\nSnuke decides to light K of the N candles.\nNow, he is at coordinate 0.\nHe can move left and right along the line with speed 1.\nHe can also light a candle when he is at the same position as the candle, in negligible time.\nFind the minimum time required to light K candles.\n-----Constraints-----\n - 1 \\leq N \\leq 10^5\n - 1 \\leq K \\leq N\n - x_i is an integer.\n - |x_i| \\leq 10^8\n - x_1 < x_2 <... < x_N\n-----Input-----\nInput is given from Standard Input in the following format:\nN K\nx_1 x_2... x_N\n-----Output-----\nPrint the minimum time required to light K candles.\n-----Sample Input-----\n5 3\n-30 -10 10 20 50\n-----Sample Output-----\n40\nHe should move and light candles as follows:\n - Move from coordinate 0 to -10.\n - Light the second candle from the left.\n - Move from coordinate -10 to 10.\n - Light the third candle from the left.\n - Move from coordinate 10 to 20.\n - Light the fourth candle from the left.\n\ndef",
      "answer": "def minTime(n, k, arr):\n    # code here\n    return 0\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4304,
      "prompt": "Complete the Python function given the prompt below:\nIn some village, there are 999 towers that are 1,(1+2),(1+2+3),...,(1+2+3+...+999) meters high from west to east, at intervals of 1 meter.\nIt had been snowing for a while before it finally stopped. For some two adjacent towers located 1 meter apart, we measured the lengths of the parts of those towers that are not covered with snow, and the results are a meters for the west tower, and b meters for the east tower.\nAssuming that the depth of snow cover and the altitude are the same everywhere in the village, find the amount of the snow cover.\nAssume also that the depth of the snow cover is always at least 1 meter.\n-----Constraints-----\n - 1 \\leq a < b < 499500(=1+2+3+...+999)\n - All values in input are integers.\n - There is no input that contradicts the assumption.\n-----Input-----\nInput is given from Standard Input in the following format:\na b\n-----Output-----\nIf the depth of the snow cover is x meters, print x as an integer.\n-----Sample Input-----\n8 13\n-----Sample Output-----\n2\nThe heights of the two towers are 10 meters and 15 meters, respectively.\nThus, we can see that the depth of the snow cover is 2 meters.\n\ndef",
      "answer": "def snow_cover(a, b):\n    return a + b\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4305,
      "prompt": "Complete the Python function given the prompt below:\nServal is fighting with a monster.\nThe health of the monster is H.\nIn one attack, Serval can decrease the monster's health by A.\nThere is no other way to decrease the monster's health.\nServal wins when the monster's health becomes 0 or below.\nFind the number of attacks Serval needs to make before winning.\n-----Constraints-----\n - 1 \\leq H \\leq 10^4\n - 1 \\leq A \\leq 10^4\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nH A\n-----Output-----\nPrint the number of attacks Serval needs to make before winning.\n-----Sample Input-----\n10 4\n-----Sample Output-----\n3\n - After one attack, the monster's health will be 6.\n - After two attacks, the monster's health will be 2.\n - After three attacks, the monster's health will be -2.\nThus, Serval needs to make three attacks to win.\n\ndef",
      "answer": "def Serval(H, A):\n    count = 0\n    while H > 0:\n        count += 1\n        H -= A\n        if H <= 0:\n            break\n    return count\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4306,
      "prompt": "Complete the Python function given the prompt below:\nAlice and Bob are controlling a robot. They each have one switch that controls the robot.\nAlice started holding down her button A second after the start-up of the robot, and released her button B second after the start-up.\nBob started holding down his button C second after the start-up, and released his button D second after the start-up.\nFor how many seconds both Alice and Bob were holding down their buttons?\n-----Constraints-----\n - 0\u2264A<B\u2264100\n - 0\u2264C<D\u2264100\n - All input values are integers.\n-----Input-----\nInput is given from Standard Input in the following format:  \nA B C D\n-----Output-----\nPrint the length of the duration (in seconds) in which both Alice and Bob were holding down their buttons.\n-----Sample Input-----\n0 75 25 100\n-----Sample Output-----\n50\nAlice started holding down her button 0 second after the start-up of the robot, and released her button 75 second after the start-up.\nBob started holding down his button 25 second after the start-up, and released his button 100 second after the start-up.\nTherefore, the time when both of them were holding down their buttons, is the 50 seconds from 25 seconds after the start-up to 75 seconds after the start-up.\n\ndef",
      "answer": "def switch_time(a,b,c,d):\n    return (a+b+c+d)/2\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4307,
      "prompt": "Complete the Python function given the prompt below:\nThe number 105 is quite special - it is odd but still it has eight divisors.\nNow, your task is this: how many odd numbers with exactly eight positive divisors are there between 1 and N (inclusive)?\n-----Constraints-----\n - N is an integer between 1 and 200 (inclusive).\n-----Input-----\nInput is given from Standard Input in the following format:\nN\n-----Output-----\nPrint the count.\n-----Sample Input-----\n105\n-----Sample Output-----\n1\nAmong the numbers between 1 and 105, the only number that is odd and has exactly eight divisors is 105.\n\ndef",
      "answer": "def divisors(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 2\n    return count\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4308,
      "prompt": "Complete the Python function given the prompt below:\nTakahashi has decided to distribute N AtCoder Crackers to K users of as evenly as possible.\nWhen all the crackers are distributed, find the minimum possible (absolute) difference between the largest number of crackers received by a user and the smallest number received by a user.\n-----Constraints-----\n - 1 \\leq N,K \\leq 100\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN K\n-----Output-----\nPrint the minimum possible (absolute) difference between the largest number of crackers received by a user and the smallest number received by a user.\n-----Sample Input-----\n7 3\n-----Sample Output-----\n1\nWhen the users receive two, two and three crackers, respectively, the (absolute) difference between the largest number of crackers received by a user and the smallest number received by a user, is 1.\n\ndef",
      "answer": "def minimum_difference(n, k):\n    return max(n) - min(n)\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4309,
      "prompt": "Complete the Python function given the prompt below:\nKurohashi has never participated in AtCoder Beginner Contest (ABC).\nThe next ABC to be held is ABC N (the N-th ABC ever held).\nKurohashi wants to make his debut in some ABC x such that all the digits of x in base ten are the same.\nWhat is the earliest ABC where Kurohashi can make his debut?\n-----Constraints-----\n - 100 \\leq N \\leq 999\n - N is an integer.\n-----Input-----\nInput is given from Standard Input in the following format:\nN\n-----Output-----\nIf the earliest ABC where Kurohashi can make his debut is ABC n, print n.\n-----Sample Input-----\n111\n-----Sample Output-----\n111\nThe next ABC to be held is ABC 111, where Kurohashi can make his debut.\n\ndef",
      "answer": "def kurohashi(n):\n    n = str(n)\n    for i in range(len(n)):\n        if n[i]!= n[0]:\n            return n[i]\n    return n[0]\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4310,
      "prompt": "Complete the Python function given the prompt below:\nYou have three tasks, all of which need to be completed.\nFirst, you can complete any one task at cost 0.\nThen, just after completing the i-th task, you can complete the j-th task at cost |A_j - A_i|.\nHere, |x| denotes the absolute value of x.\nFind the minimum total cost required to complete all the task.\n-----Constraints-----\n - All values in input are integers.\n - 1 \\leq A_1, A_2, A_3 \\leq 100\n-----Input-----\nInput is given from Standard Input in the following format:\nA_1 A_2 A_3\n-----Output-----\nPrint the minimum total cost required to complete all the task.\n-----Sample Input-----\n1 6 3\n-----Sample Output-----\n5\nWhen the tasks are completed in the following order, the total cost will be 5, which is the minimum:\n - Complete the first task at cost 0.\n - Complete the third task at cost 2.\n - Complete the second task at cost 3.\n\ndef",
      "answer": "def minimum_cost(A_1, A_2, A_3):\n    return min(A_1, A_2, A_3)\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4311,
      "prompt": "Complete the Python function given the prompt below:\nA sequence a=\\{a_1,a_2,a_3,......\\} is determined as follows:\n - The first term s is given as input.\n - Let f(n) be the following function: f(n) = n/2 if n is even, and f(n) = 3n+1 if n is odd.\n - a_i = s when i = 1, and a_i = f(a_{i-1}) when i > 1.\nFind the minimum integer m that satisfies the following condition:\n - There exists an integer n such that a_m = a_n (m > n).\n-----Constraints-----\n - 1 \\leq s \\leq 100\n - All values in input are integers.\n - It is guaranteed that all elements in a and the minimum m that satisfies the condition are at most 1000000.\n-----Input-----\nInput is given from Standard Input in the following format:\ns\n-----Output-----\nPrint the minimum integer m that satisfies the condition.\n-----Sample Input-----\n8\n-----Sample Output-----\n5\na=\\{8,4,2,1,4,2,1,4,2,1,......\\}. As a_5=a_2, the answer is 5.\n\ndef",
      "answer": "def f(n):\n    if n%2==0:\n        return n/2\n    else:\n        return 3*n+1\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4312,
      "prompt": "Complete the Python function given the prompt below:\nTakahashi and Aoki will have a battle using their monsters.\nThe health and strength of Takahashi's monster are A and B, respectively, and those of Aoki's monster are C and D, respectively.\nThe two monsters will take turns attacking, in the order Takahashi's, Aoki's, Takahashi's, Aoki's,...\nHere, an attack decreases the opponent's health by the value equal to the attacker's strength.\nThe monsters keep attacking until the health of one monster becomes 0 or below. The person with the monster whose health becomes 0 or below loses, and the other person wins.\nIf Takahashi will win, print Yes; if he will lose, print No.\n-----Constraints-----\n - 1 \\leq A,B,C,D \\leq 100\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nA B C D\n-----Output-----\nIf Takahashi will win, print Yes; if he will lose, print No.\n-----Sample Input-----\n10 9 10 10\n-----Sample Output-----\nNo\nFirst, Takahashi's monster attacks Aoki's monster, whose health is now 10-9=1.\nNext, Aoki's monster attacks Takahashi's monster, whose health is now 10-10=0.\nTakahashi's monster is the first to have 0 or less health, so Takahashi loses.\n\ndef",
      "answer": "def battle(a, b, c, d):\n    while a > 0 and b > 0:\n        if a > b:\n            a -= c\n            b -= d\n        else:\n            a -= d\n            b -= c\n    if a > 0:\n        return \"No\"\n    else:\n        return \"Yes\"\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4313,
      "prompt": "Complete the Python function given the prompt below:\nThere are N gems. The value of the i-th gem is V_i.\nYou will choose some of these gems, possibly all or none, and get them.\nHowever, you need to pay a cost of C_i to get the i-th gem.\nLet X be the sum of the values of the gems obtained, and Y be the sum of the costs paid.\nFind the maximum possible value of X-Y.\n-----Constraints-----\n - All values in input are integers.\n - 1 \\leq N \\leq 20\n - 1 \\leq C_i, V_i \\leq 50\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nV_1 V_2... V_N\nC_1 C_2... C_N\n-----Output-----\nPrint the maximum possible value of X-Y.\n-----Sample Input-----\n3\n10 2 5\n6 3 4\n-----Sample Output-----\n5\nIf we choose the first and third gems, X = 10 + 5 = 15 and Y = 6 + 4 = 10.\nWe have X-Y = 5 here, which is the maximum possible value.\n\ndef",
      "answer": "def max_value(N, V, C):\n    # code here\n    return X-Y\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4314,
      "prompt": "Complete the Python function given the prompt below:\nThere is a grid of squares with H horizontal rows and W vertical columns.\nThe square at the i-th row from the top and the j-th column from the left is represented as (i, j).\nEach square is black or white.\nThe color of the square is given as an H-by-W matrix (a_{i, j}).\nIf a_{i, j} is., the square (i, j) is white; if a_{i, j} is #, the square (i, j) is black.\nSnuke is compressing this grid.\nHe will do so by repeatedly performing the following operation while there is a row or column that consists only of white squares:\n - Operation: choose any one row or column that consists only of white squares, remove it and delete the space between the rows or columns.\nIt can be shown that the final state of the grid is uniquely determined regardless of what row or column is chosen in each operation.\nFind the final state of the grid.\n-----Constraints-----\n - 1 \\leq H, W \\leq 100\n - a_{i, j} is. or #.\n - There is at least one black square in the whole grid.\n-----Input-----\nInput is given from Standard Input in the following format:\nH W\na_{1, 1}...a_{1, W}\n:\na_{H, 1}...a_{H, W}\n-----Output-----\nPrint the final state of the grid in the same format as input (without the numbers of rows and columns); see the samples for clarity.\n-----Sample Input-----\n4 4\n##.#\n....\n##.#\n.#.#\n-----Sample Output-----\n###\n###\n.##\nThe second row and the third column in the original grid will be removed.\n\ndef",
      "answer": "def solve(H, W, a):\n    # Write your code here\n    if H == 1 and W == 1:\n        return a\n    if H == 1:\n        return solve(H-1, W, [['.']*W] + a)\n    if W == 1:\n        return solve(H, W-1, [['.']*H] + a)\n    if H == 1 and W == 1:\n        return solve(H-1, W-1, [['.']*W] + a)\n    if H == 1:\n        return solve(H-1, W, [['.']*W] + a)\n    if W == 1:\n        return solve(H, W-1, [['.']*H] + a)\n    if H == 1 and W == 1:\n        return solve(H-1, W-1, [['.']*W] + a)\n    if H == 1:\n        return solve(H-1, W, [['.']*W] + a)\n    if W == 1:\n        return solve(H, W-1, [['.']*H] + a)\n    if H == 1 and W == 1:\n        return solve(H-1, W-1, [['.']*W] + a)\n    if H == 1:\n        return solve(H-1, W, [['.']*W] + a)\n    if W == 1:\n        return solve(H, W-1, [['.']*H] + a)\n    if H == 1 and W == 1:\n        return solve(H-1, W-1, [['.']*W] + a)\n    if H == 1:\n        return solve(H-1, W, [['.']*W] + a)\n    if W == 1:\n        return solve(H, W-1, [['.']*H] + a)\n    if H == 1 and W == 1:\n        return solve(H-1, W-1, [['.']*W] + a)\n    if H == 1:\n        return solve(H-1, W, [['.']*W] + a)\n    if W == 1:\n        return solve(H, W-1, [['.']*H] + a)\n    if H == 1 and W == 1:\n        return solve(H-1, W-1, [['.']*W] + a)\n    if H == 1:\n        return solve(H-1, W, [['.']*W] + a)\n    if W == 1:\n        return solve(H, W-1, [['.']*H] + a)\n    if H == 1 and W == 1:\n        return solve(H-1, W-1, [['.']*W] + a)\n    if H == 1:\n        return solve(H-1, W, [['.']*W] + a)\n    if W == 1:\n        return solve(H, W-1, [['.']*H] + a)\n    if H == 1 and W == 1:\n        return solve(H-1, W-1, [['.']*W] + a)\n    if H == 1:\n        return solve(H-1, W, [['.']*W] + a)\n    if W == 1:\n        return solve(H, W-1, [['.']*H] + a)\n    if H == 1 and W == 1:\n        return solve(H-1, W-1, [['.']*W] + a)\n    if H == 1:\n        return solve(H-1, W, [['.']*W] + a)\n    if W == 1:\n        return solve(H, W-1, [['.']*H] + a)\n    if H == 1 and W == 1:\n        return solve(H-1, W-1, [['.']*W] + a)\n    if H == 1:\n        return solve(H-1, W, [['.']*W] + a)\n    if W == 1:\n        return solve(H, W-1, [['.']*H] + a)\n    if H == 1 and W == 1:\n        return solve(H-1, W-1, [['.']*W] + a)\n    if H",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4315,
      "prompt": "Complete the Python function given the prompt below:\nPrint the circumference of a circle of radius R.\n-----Constraints-----\n - 1 \\leq R \\leq 100\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nR\n-----Output-----\nPrint the circumference of the circle.\nYour output is considered correct if and only if its absolute or relative error from our answer is at most 10^{-2}.\n-----Sample Input-----\n1\n-----Sample Output-----\n6.28318530717958623200\nSince we accept an absolute or relative error of at most 10^{-2}, 6.28 is also an acceptable output, but 6 is not.\n\ndef",
      "answer": "def circumference(r):\n    return 2*3.14*r\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4316,
      "prompt": "Complete the Python function given the prompt below:\nYou are given a 4-character string S consisting of uppercase English letters.\nDetermine if S consists of exactly two kinds of characters which both appear twice in S.\n-----Constraints-----\n - The length of S is 4.\n - S consists of uppercase English letters.\n-----Input-----\nInput is given from Standard Input in the following format:\nS\n-----Output-----\nIf S consists of exactly two kinds of characters which both appear twice in S, print Yes; otherwise, print No.\n-----Sample Input-----\nASSA\n-----Sample Output-----\nYes\nS consists of A and S which both appear twice in S.\n\ndef",
      "answer": "def check_string(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i] == s[i+1]:\n            count += 1\n    if count == 2:\n        return True\n    else:\n        return False\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4317,
      "prompt": "Complete the Python function given the prompt below:\nWe have two integers: A and B.\nPrint the largest number among A + B, A - B, and A \\times B.\n-----Constraints-----\n - All values in input are integers.\n - -100 \\leq A,\\ B \\leq 100\n-----Input-----\nInput is given from Standard Input in the following format:\nA B\n-----Output-----\nPrint the largest number among A + B, A - B, and A \\times B.\n-----Sample Input-----\n-13 3\n-----Sample Output-----\n-10\nThe largest number among A + B = -10, A - B = -16, and A \\times B = -39 is -10.\n\ndef",
      "answer": "def largest_number(a, b):\n    return max(a + b, a - b, a * b)\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4318,
      "prompt": "Complete the Python function given the prompt below:\nThere are N mountains ranging from east to west, and an ocean to the west.\nAt the top of each mountain, there is an inn. You have decided to choose where to stay from these inns.\nThe height of the i-th mountain from the west is H_i.\nYou can certainly see the ocean from the inn at the top of the westmost mountain.\nFor the inn at the top of the i-th mountain from the west (i = 2, 3,..., N), you can see the ocean if and only if H_1 \\leq H_i, H_2 \\leq H_i,..., and H_{i-1} \\leq H_i.\nFrom how many of these N inns can you see the ocean?\n-----Constraints-----\n - All values in input are integers.\n - 1 \\leq N \\leq 20\n - 1 \\leq H_i \\leq 100\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nH_1 H_2... H_N\n-----Output-----\nPrint the number of inns from which you can see the ocean.\n-----Sample Input-----\n4\n6 5 6 8\n-----Sample Output-----\n3\nYou can see the ocean from the first, third and fourth inns from the west.\n\ndef",
      "answer": "def count_inns(n, h):\n    count = 0\n    for i in range(n):\n        if h[i] <= h[i+1]:\n            count += 1\n    return count\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4319,
      "prompt": "Complete the Python function given the prompt below:\nLittle girl Tanya climbs the stairs inside a multi-storey building. Every time Tanya climbs a stairway, she starts counting steps from $1$ to the number of steps in this stairway. She speaks every number aloud. For example, if she climbs two stairways, the first of which contains $3$ steps, and the second contains $4$ steps, she will pronounce the numbers $1, 2, 3, 1, 2, 3, 4$.\nYou are given all the numbers pronounced by Tanya. How many stairways did she climb? Also, output the number of steps in each stairway.\nThe given sequence will be a valid sequence that Tanya could have pronounced when climbing one or more stairways.\n-----Input-----\nThe first line contains $n$ ($1 \\le n \\le 1000$) \u2014 the total number of numbers pronounced by Tanya.\nThe second line contains integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 1000$) \u2014 all the numbers Tanya pronounced while climbing the stairs, in order from the first to the last pronounced number. Passing a stairway with $x$ steps, she will pronounce the numbers $1, 2, \\dots, x$ in that order.\nThe given sequence will be a valid sequence that Tanya could have pronounced when climbing one or more stairways.\n-----Output-----\nIn the first line, output $t$ \u2014 the number of stairways that Tanya climbed. In the second line, output $t$ numbers \u2014 the number of steps in each stairway she climbed. Write the numbers in the correct order of passage of the stairways.\n-----Examples-----\nInput\n7\n1 2 3 1 2 3 4\nOutput\n2\n3 4 \nInput\n4\n1 1 1 1\nOutput\n4\n1 1 1 1 \nInput\n5\n1 2 3 4 5\nOutput\n1\n5 \nInput\n5\n1 2 1 2 1\nOutput\n3\n2 2 1\n\ndef",
      "answer": "def stairs(n, a):\n    stairs = 0\n    steps = 0\n    for i in range(n):\n        steps += a[i]\n        stairs += 1\n    return stairs, steps\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4320,
      "prompt": "Complete the Python function given the prompt below:\nRecently Vova found $n$ candy wrappers. He remembers that he bought $x$ candies during the first day, $2x$ candies during the second day, $4x$ candies during the third day, $\\dots$, $2^{k-1} x$ candies during the $k$-th day. But there is an issue: Vova remembers neither $x$ nor $k$ but he is sure that $x$ and $k$ are positive integers and $k > 1$.\nVova will be satisfied if you tell him any positive integer $x$ so there is an integer $k>1$ that $x + 2x + 4x + \\dots + 2^{k-1} x = n$. It is guaranteed that at least one solution exists. Note that $k > 1$.\nYou have to answer $t$ independent test cases.\n-----Input-----\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 10^4$) \u2014 the number of test cases. Then $t$ test cases follow.\nThe only line of the test case contains one integer $n$ ($3 \\le n \\le 10^9$) \u2014 the number of candy wrappers Vova found. It is guaranteed that there is some positive integer $x$ and integer $k>1$ that $x + 2x + 4x + \\dots + 2^{k-1} x = n$.\n-----Output-----\nPrint one integer \u2014 any positive integer value of $x$ so there is an integer $k>1$ that $x + 2x + 4x + \\dots + 2^{k-1} x = n$.\n-----Example-----\nInput\n7\n3\n6\n7\n21\n28\n999999999\n999999984\nOutput\n1\n2\n1\n7\n4\n333333333\n333333328\n-----Note-----\nIn the first test case of the example, one of the possible answers is $x=1, k=2$. Then $1 \\cdot 1 + 2 \\cdot 1$ equals $n=3$.\nIn the second test case of the example, one of the possible answers is $x=2, k=2$. Then $1 \\cdot 2 + 2 \\cdot 2$ equals $n=6$.\nIn the third test case of the example, one of the possible answers is $x=1, k=3$. Then $1 \\cdot 1 + 2 \\cdot 1 + 4 \\cdot 1$ equals $n=7$.\nIn the fourth test case of the example, one of the possible answers is $x=7, k=2$. Then $1 \\cdot 7 + 2 \\cdot 7$ equals $n=21$.\nIn the fifth test case of the example, one of the possible answers is $x=4, k=3$. Then $1 \\cdot 4 + 2 \\cdot 4 + 4 \\cdot 4$ equals $n=28$.\n\ndef",
      "answer": "def solve(n):\n    for i in range(1, n+1):\n        for j in range(1, i):\n            if i + j + j*2 + j*4 + j*8 + j*16 + j*32 == n:\n                return i, j\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4321,
      "prompt": "Complete the Python function given the prompt below:\nLittle girl Tanya is learning how to decrease a number by one, but she does it wrong with a number consisting of two or more digits. Tanya subtracts one from a number by the following algorithm:  if the last digit of the number is non-zero, she decreases the number by one;  if the last digit of the number is zero, she divides the number by 10 (i.e. removes the last digit). \nYou are given an integer number $n$. Tanya will subtract one from it $k$ times. Your task is to print the result after all $k$ subtractions.\nIt is guaranteed that the result will be positive integer number.\n-----Input-----\nThe first line of the input contains two integer numbers $n$ and $k$ ($2 \\le n \\le 10^9$, $1 \\le k \\le 50$) \u2014 the number from which Tanya will subtract and the number of subtractions correspondingly.\n-----Output-----\nPrint one integer number \u2014 the result of the decreasing $n$ by one $k$ times.\nIt is guaranteed that the result will be positive integer number. \n-----Examples-----\nInput\n512 4\nOutput\n50\nInput\n1000000000 9\nOutput\n1\n-----Note-----\nThe first example corresponds to the following sequence: $512 \\rightarrow 511 \\rightarrow 510 \\rightarrow 51 \\rightarrow 50$.\n\ndef",
      "answer": "def subtract(n, k):\n    while k > 0:\n        if n > 0:\n            n -= 1\n        else:\n            n = n // 10\n        k -= 1\n    return n\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4322,
      "prompt": "Complete the Python function given the prompt below:\nThere are $n$ people in a row. The height of the $i$-th person is $a_i$. You can choose any subset of these people and try to arrange them into a balanced circle.\nA balanced circle is such an order of people that the difference between heights of any adjacent people is no more than $1$. For example, let heights of chosen people be $[a_{i_1}, a_{i_2}, \\dots, a_{i_k}]$, where $k$ is the number of people you choose. Then the condition $|a_{i_j} - a_{i_{j + 1}}| \\le 1$ should be satisfied for all $j$ from $1$ to $k-1$ and the condition $|a_{i_1} - a_{i_k}| \\le 1$ should be also satisfied. $|x|$ means the absolute value of $x$. It is obvious that the circle consisting of one person is balanced.\nYour task is to choose the maximum number of people and construct a balanced circle consisting of all chosen people. It is obvious that the circle consisting of one person is balanced so the answer always exists.\n-----Input-----\nThe first line of the input contains one integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) \u2014 the number of people.\nThe second line of the input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 2 \\cdot 10^5$), where $a_i$ is the height of the $i$-th person.\n-----Output-----\nIn the first line of the output print $k$ \u2014 the number of people in the maximum balanced circle.\nIn the second line print $k$ integers $res_1, res_2, \\dots, res_k$, where $res_j$ is the height of the $j$-th person in the maximum balanced circle. The condition $|res_{j} - res_{j + 1}| \\le 1$ should be satisfied for all $j$ from $1$ to $k-1$ and the condition $|res_{1} - res_{k}| \\le 1$ should be also satisfied.\n-----Examples-----\nInput\n7\n4 3 5 1 2 2 1\nOutput\n5\n2 1 1 2 3\nInput\n5\n3 7 5 1 5\nOutput\n2\n5 5 \nInput\n3\n5 1 4\nOutput\n2\n4 5 \nInput\n7\n2 2 3 2 1 2 2\nOutput\n7\n1 2 2 2 2 3 2\n\ndef",
      "answer": "def balanced_circle(n, a):\n    a.sort()\n    res = 0\n    for i in range(n):\n        if abs(a[i] - a[i + 1]) <= 1:\n            res += 1\n    return res\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4323,
      "prompt": "Complete the Python function given the prompt below:\nIvan has $n$ songs on his phone. The size of the $i$-th song is $a_i$ bytes. Ivan also has a flash drive which can hold at most $m$ bytes in total. Initially, his flash drive is empty.\nIvan wants to copy all $n$ songs to the flash drive. He can compress the songs. If he compresses the $i$-th song, the size of the $i$-th song reduces from $a_i$ to $b_i$ bytes ($b_i < a_i$).\nIvan can compress any subset of the songs (possibly empty) and copy all the songs to his flash drive if the sum of their sizes is at most $m$. He can compress any subset of the songs (not necessarily contiguous).\nIvan wants to find the minimum number of songs he needs to compress in such a way that all his songs fit on the drive (i.e. the sum of their sizes is less than or equal to $m$).\nIf it is impossible to copy all the songs (even if Ivan compresses all the songs), print \"-1\". Otherwise print the minimum number of songs Ivan needs to compress.\n-----Input-----\nThe first line of the input contains two integers $n$ and $m$ ($1 \\le n \\le 10^5, 1 \\le m \\le 10^9$) \u2014 the number of the songs on Ivan's phone and the capacity of Ivan's flash drive.\nThe next $n$ lines contain two integers each: the $i$-th line contains two integers $a_i$ and $b_i$ ($1 \\le a_i, b_i \\le 10^9$, $a_i > b_i$) \u2014 the initial size of the $i$-th song and the size of the $i$-th song after compression.\n-----Output-----\nIf it is impossible to compress a subset of the songs in such a way that all songs fit on the flash drive, print \"-1\". Otherwise print the minimum number of the songs to compress.\n-----Examples-----\nInput\n4 21\n10 8\n7 4\n3 1\n5 4\nOutput\n2\nInput\n4 16\n10 8\n7 4\n3 1\n5 4\nOutput\n-1\n-----Note-----\nIn the first example Ivan can compress the first and the third songs so after these moves the sum of sizes will be equal to $8 + 7 + 1 + 5 = 21 \\le 21$. Also Ivan can compress the first and the second songs, then the sum of sizes will be equal $8 + 4 + 3 + 5 = 20 \\le 21$. Note that compressing any single song is not sufficient to copy all the songs on the flash drive (for example, after compressing the second song the sum of sizes will be equal to $10 + 4 + 3 + 5 = 22 > 21$).\nIn the second example even if Ivan compresses all the songs the sum of sizes will be equal $8 + 4 + 1 + 4 = 17 > 16$.\n\ndef",
      "answer": "def compress(n, m, songs):\n    songs.sort(key=lambda x: x[1])\n    songs.sort(key=lambda x: x[0])\n    songs.sort(key=lambda x: x[1] - x[0])\n    songs.sort(key=lambda x: x[1] - x[0])\n    songs.sort(key=lambda x: x[1] - x[0])\n    songs.sort(key=lambda x: x[1] - x[0])\n    songs.sort(key=lambda x: x[1] - x[0])\n    songs.sort(key=lambda x: x[1] - x[0])\n    songs.sort(key=lambda x: x[1] - x[0])\n    songs.sort(key=lambda x: x[1] - x[0])\n    songs.sort(key=lambda x: x[1] - x[0])\n    songs.sort(key=lambda x: x[1] - x[0])\n    songs.sort(key=lambda x: x[1] - x[0])\n    songs.sort(key=lambda x: x[1] - x[0])\n    songs.sort(key=lambda x: x[1] - x[0])\n    songs.sort(key=lambda x: x[1] - x[0])\n    songs.sort(key=lambda x: x[1] - x[0])\n    songs.sort(key=lambda x: x[1] - x[0])\n    songs.sort(key=lambda x: x[1] - x[0])\n    songs.sort(key=lambda x: x[1] - x[0])\n    songs.sort(key=lambda x: x[1] - x[0])\n    songs.sort(key=lambda x: x[1] - x[0])\n    songs.sort(key=lambda x: x[1] - x[0])\n    songs.sort(key=lambda x: x[1] - x[0])\n    songs.sort(key=lambda x: x[1] - x[0])\n    songs.sort(key=lambda x: x[1] - x[0])\n    songs.sort(key=lambda x: x[1] - x[0])\n    songs.sort(key=lambda x: x[1] - x[0])\n    songs.sort(key=lambda x: x[1] - x[0])\n    songs.sort(key=lambda x: x[1] - x[0])\n    songs.sort(key=lambda x: x[1] - x[0])\n    songs.sort(key=lambda x: x[1] - x[0])\n    songs.sort(key=lambda x: x[1] - x[0])\n    songs.sort(key=lambda x: x[1] - x[0])\n    songs.sort(key=lambda x: x[1] - x[0])\n    songs.sort(key=lambda x: x[1] - x[0])\n    songs.sort(key=lambda x: x[1] - x[0])\n    songs.sort(key=lambda x: x[1] - x[0])\n    songs.sort(key=lambda x: x[1] - x[0])\n    songs.sort(key=lambda x: x[1] - x[0])\n    songs.sort(key=lambda x: x[1] - x[0])\n    songs.sort(key=lambda x: x[1] - x[0])\n    songs.sort(key=lambda x: x[1] - x[0])\n    songs.sort(key=lambda x: x[1] - x[0])\n    songs.sort(key=lambda x: x[1] - x[0])\n    songs.sort(key=lambda x: x[1] - x[0])\n    songs.sort(key=lambda x: x[1] - x[0])\n    songs.sort(key=lambda x: x[1] - x[0])\n    songs.sort(key=lambda x: x[1] - x",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4324,
      "prompt": "Complete the Python function given the prompt below:\nYou are given three positive integers $n$, $a$ and $b$. You have to construct a string $s$ of length $n$ consisting of lowercase Latin letters such that each substring of length $a$ has exactly $b$ distinct letters. It is guaranteed that the answer exists.\nYou have to answer $t$ independent test cases.\nRecall that the substring $s[l \\dots r]$ is the string $s_l, s_{l+1}, \\dots, s_{r}$ and its length is $r - l + 1$. In this problem you are only interested in substrings of length $a$.\n-----Input-----\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 2000$) \u2014 the number of test cases. Then $t$ test cases follow.\nThe only line of a test case contains three space-separated integers $n$, $a$ and $b$ ($1 \\le a \\le n \\le 2000, 1 \\le b \\le \\min(26, a)$), where $n$ is the length of the required string, $a$ is the length of a substring and $b$ is the required number of distinct letters in each substring of length $a$.\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2000$ ($\\sum n \\le 2000$).\n-----Output-----\nFor each test case, print the answer \u2014 such a string $s$ of length $n$ consisting of lowercase Latin letters that each substring of length $a$ has exactly $b$ distinct letters. If there are multiple valid answers, print any of them. It is guaranteed that the answer exists.\n-----Example-----\nInput\n4\n7 5 3\n6 1 1\n6 6 1\n5 2 2\nOutput\ntleelte\nqwerty\nvvvvvv\nabcde\n-----Note-----\nIn the first test case of the example, consider all the substrings of length $5$:  \"tleel\": it contains $3$ distinct (unique) letters,  \"leelt\": it contains $3$ distinct (unique) letters,  \"eelte\": it contains $3$ distinct (unique) letters.\n\ndef",
      "answer": "def solve(n, a, b):\n    s = \"abcde\"\n    for i in range(n):\n        s += s[:a]\n    return s\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4325,
      "prompt": "Complete the Python function given the prompt below:\nTakahashi loves takoyaki - a ball-shaped snack.\nWith a takoyaki machine, he can make at most X pieces of takoyaki at a time, taking T minutes regardless of the number of pieces to make.\nHow long does it take to make N takoyaki?\n-----Constraints-----\n - 1 \\leq N,X,T \\leq 1000\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN X T\n-----Output-----\nPrint an integer representing the minimum number of minutes needed to make N pieces of takoyaki.\n-----Sample Input-----\n20 12 6\n-----Sample Output-----\n12\nHe can make 12 pieces of takoyaki in the first 6 minutes and 8 more in the next 6 minutes, so he can make 20 in a total of 12 minutes.\nNote that being able to make 12 in 6 minutes does not mean he can make 2 in 1 minute.\n\ndef",
      "answer": "def takoyaki(n,x,t):\n    if n<=0 or x<=0 or t<=0:\n        return -1\n    if n==1 and x==1 and t==1:\n        return 0\n    if n==1 and x==1 and t==2:\n        return 1\n    if n==1 and x==2 and t==1:\n        return 2\n    if n==1 and x==2 and t==2:\n        return 3\n    if n==2 and x==1 and t==1:\n        return 4\n    if n==2 and x==1 and t==2:\n        return 5\n    if n==2 and x==2 and t==1:\n        return 6\n    if n==2 and x==2 and t==2:\n        return 7\n    if n==3 and x==1 and t==1:\n        return 8\n    if n==3 and x==1 and t==2:\n        return 9\n    if n==3 and x==2 and t==1:\n        return 10\n    if n==3 and x==2 and t==2:\n        return 11\n    if n==4 and x==1 and t==1:\n        return 12\n    if n==4 and x==1 and t==2:\n        return 13\n    if n==4 and x==2 and t==1:\n        return 14\n    if n==4 and x==2 and t==2:\n        return 15\n    if n==5 and x==1 and t==1:\n        return 16\n    if n==5 and x==1 and t==2:\n        return 17\n    if n==5 and x==2 and t==1:\n        return 18\n    if n==5 and x==2 and t==2:\n        return 19\n    if n==6 and x==1 and t==1:\n        return 20\n    if n==6 and x==1 and t==2:\n        return 21\n    if n==6 and x==2 and t==1:\n        return 22\n    if n==6 and x==2 and t==2:\n        return 23\n    if n==7 and x==1 and t==1:\n        return 24\n    if n==7 and x==1 and t==2:\n        return 25\n    if n==7 and x==2 and t==1:\n        return 26\n    if n==7 and x==2 and t==2:\n        return 27\n    if n==8 and x==1 and t==1:\n        return 28\n    if n==8 and x==1 and t==2:\n        return 29\n    if n==8 and x==2 and t==1:\n        return 30\n    if n==8 and x==2 and t==2:\n        return 31\n    if n==9 and x==1 and t==1:\n        return 32\n    if n==9 and x==1 and t==2:\n        return 33\n    if n==9 and x==2 and t==1:\n        return 34\n    if n==9 and x==2 and t==2:\n        return 35\n    if n==10 and x==1 and t==1:\n        return 36\n    if n==10 and x==1 and t==2:\n        return 37\n    if n==10 and x==2 and t==1:\n        return 38\n    if n==10 and x==2 and t==2:\n        return 39\n    if n==11 and x==1 and t==1:\n        return 40\n    if n==11 and x==1 and t==2:\n        return 41\n    if n==11 and x==2 and t==1:\n        return 42\n    if n==11 and x==2 and t==2:\n        return 43\n    if n==12 and x==1 and t==1:\n        return 44\n    if n==12 and x==1 and t==2:\n        return 45\n    if n==12 and x==2 and t==1:\n        return 46\n    if n==12 and x==2 and t==2:\n        return 47\n    if n==13 and x==1 and t==1:\n        return 48\n    if n==13 and x==1 and t==2:\n        return 49\n    if n==13 and x==2 and t==1:\n        return 50\n    if n==13 and x==2 and t==2:\n        return 51\n    ",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4326,
      "prompt": "Complete the Python function given the prompt below:\nThere are N students in a school.\nWe will divide these students into some groups, and in each group they will discuss some themes.\nYou think that groups consisting of two or less students cannot have an effective discussion, so you want to have as many groups consisting of three or more students as possible.\nDivide the students so that the number of groups consisting of three or more students is maximized.\n-----Constraints-----\n - 1 \\leq N \\leq 1000\n - All input values are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN\n-----Output-----\nIf you can form at most x groups consisting of three or more students, print x.\n-----Sample Input-----\n8\n-----Sample Output-----\n2\nFor example, you can form a group of three students and another of five students.\n\ndef",
      "answer": "def max_groups(n):\n    if n <= 3:\n        return n\n    else:\n        return max_groups(n-3) + max_groups(n-2) + max_groups(n-1)\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4327,
      "prompt": "Complete the Python function given the prompt below:\nWe have A apples and P pieces of apple.\nWe can cut an apple into three pieces of apple, and make one apple pie by simmering two pieces of apple in a pan.\nFind the maximum number of apple pies we can make with what we have now.\n-----Constraints-----\n - All values in input are integers.\n - 0 \\leq A, P \\leq 100\n-----Input-----\nInput is given from Standard Input in the following format:\nA P\n-----Output-----\nPrint the maximum number of apple pies we can make with what we have.\n-----Sample Input-----\n1 3\n-----Sample Output-----\n3\nWe can first make one apple pie by simmering two of the three pieces of apple. Then, we can make two more by simmering the remaining piece and three more pieces obtained by cutting the whole apple.\n\ndef",
      "answer": "def applePieces(A, P):\n    # Your code here\n    return\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4328,
      "prompt": "Complete the Python function given the prompt below:\nYou are given positive integers A and B.\nIf A is a divisor of B, print A + B; otherwise, print B - A.\n-----Constraints-----\n - All values in input are integers.\n - 1 \\leq A \\leq B \\leq 20\n-----Input-----\nInput is given from Standard Input in the following format:\nA B\n-----Output-----\nIf A is a divisor of B, print A + B; otherwise, print B - A.\n-----Sample Input-----\n4 12\n-----Sample Output-----\n16\nAs 4 is a divisor of 12, 4 + 12 = 16 should be printed.\n\ndef",
      "answer": "def divisor(a, b):\n    if a % b == 0:\n        print(a + b)\n    else:\n        print(b - a)\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4329,
      "prompt": "Complete the Python function given the prompt below:\nTakahashi wants to be a member of some web service.\nHe tried to register himself with the ID S, which turned out to be already used by another user.\nThus, he decides to register using a string obtained by appending one character at the end of S as his ID.\nHe is now trying to register with the ID T. Determine whether this string satisfies the property above.\n-----Constraints-----\n - S and T are strings consisting of lowercase English letters.\n - 1 \\leq |S| \\leq 10\n - |T| = |S| + 1\n-----Input-----\nInput is given from Standard Input in the following format:\nS\nT\n-----Output-----\nIf T satisfies the property in Problem Statement, print Yes; otherwise, print No.\n-----Sample Input-----\nchokudai\nchokudaiz\n-----Sample Output-----\nYes\nchokudaiz can be obtained by appending z at the end of chokudai.\n\ndef",
      "answer": "def is_valid_string(s):\n    if len(s) > 10:\n        return False\n    if len(s) < 1:\n        return False\n    if s[0]!= 'a' and s[0]!= 'e' and s[0]!= 'i' and s[0]!= 'o' and s[0]!= 'u':\n        return False\n    for i in range(1, len(s)):\n        if s[i]!= 'a' and s[i]!= 'e' and s[i]!= 'i' and s[i]!= 'o' and s[i]!= 'u':\n            return False\n    return True\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4330,
      "prompt": "Complete the Python function given the prompt below:\nWe have two distinct integers A and B.\nPrint the integer K such that |A - K| = |B - K|.\nIf such an integer does not exist, print IMPOSSIBLE instead.\n-----Constraints-----\n - All values in input are integers.\n - 0 \\leq A,\\ B \\leq 10^9\n - A and B are distinct.\n-----Input-----\nInput is given from Standard Input in the following format:\nA B\n-----Output-----\nPrint the integer K satisfying the condition.\nIf such an integer does not exist, print IMPOSSIBLE instead.\n-----Sample Input-----\n2 16\n-----Sample Output-----\n9\n|2 - 9| = 7 and |16 - 9| = 7, so 9 satisfies the condition.\n\ndef",
      "answer": "def solve(a, b):\n    if abs(a - b) == abs(a - b):\n        return \"IMPOSSIBLE\"\n    else:\n        return abs(a - b)\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4331,
      "prompt": "Complete the Python function given the prompt below:\nGiven is a three-digit integer N. Does N contain the digit 7?\nIf so, print Yes; otherwise, print No.\n-----Constraints-----\n - 100 \\leq N \\leq 999\n-----Input-----\nInput is given from Standard Input in the following format:\nN\n-----Output-----\nIf N contains the digit 7, print Yes; otherwise, print No.\n-----Sample Input-----\n117\n-----Sample Output-----\nYes\n117 contains 7 as its last digit.\n\ndef",
      "answer": "def check_seven(n):\n    if n % 10 == 7:\n        return True\n    else:\n        return False\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4332,
      "prompt": "Complete the Python function given the prompt below:\nLet S(n) denote the sum of the digits in the decimal notation of n.\nFor example, S(101) = 1 + 0 + 1 = 2.\nGiven an integer N, determine if S(N) divides N.\n-----Constraints-----\n - 1 \\leq N \\leq 10^9\n-----Input-----\nInput is given from Standard Input in the following format:\nN\n-----Output-----\nIf S(N) divides N, print Yes; if it does not, print No.\n-----Sample Input-----\n12\n-----Sample Output-----\nYes\nIn this input, N=12.\nAs S(12) = 1 + 2 = 3, S(N) divides N.\n\ndef",
      "answer": "def sum_digits(n):\n    return sum(int(i) for i in str(n))\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4333,
      "prompt": "Complete the Python function given the prompt below:\nThere is a square in the xy-plane. The coordinates of its four vertices are (x_1,y_1),(x_2,y_2),(x_3,y_3) and (x_4,y_4) in counter-clockwise order.\n(Assume that the positive x-axis points right, and the positive y-axis points up.)\nTakahashi remembers (x_1,y_1) and (x_2,y_2), but he has forgot (x_3,y_3) and (x_4,y_4).\nGiven x_1,x_2,y_1,y_2, restore x_3,y_3,x_4,y_4. It can be shown that x_3,y_3,x_4 and y_4 uniquely exist and have integer values.\n-----Constraints-----\n - |x_1|,|y_1|,|x_2|,|y_2| \\leq 100\n - (x_1,y_1) \u2260 (x_2,y_2)\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nx_1 y_1 x_2 y_2\n-----Output-----\nPrint x_3,y_3,x_4 and y_4 as integers, in this order.\n-----Sample Input-----\n0 0 0 1\n-----Sample Output-----\n-1 1 -1 0\n(0,0),(0,1),(-1,1),(-1,0) is the four vertices of a square in counter-clockwise order.\nNote that (x_3,y_3)=(1,1),(x_4,y_4)=(1,0) is not accepted, as the vertices are in clockwise order.\n\ndef",
      "answer": "def square(x_1,y_1,x_2,y_2):\n    if x_1==x_2 and y_1==y_2:\n        return -1,1,-1,0\n    elif x_1==x_2 and y_1!=y_2:\n        return -1,0,1,-1\n    elif x_1!=x_2 and y_1==y_2:\n        return 0,1,-1,1\n    elif x_1!=x_2 and y_1!=y_2:\n        return 1,0,0,1\n    else:\n        return -1,-1,-1,-1\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4334,
      "prompt": "Complete the Python function given the prompt below:\nWe have A balls with the string S written on each of them and B balls with the string T written on each of them.\nFrom these balls, Takahashi chooses one with the string U written on it and throws it away.\nFind the number of balls with the string S and balls with the string T that we have now.\n-----Constraints-----\n - S, T, and U are strings consisting of lowercase English letters.\n - The lengths of S and T are each between 1 and 10 (inclusive).\n - S \\not= T\n - S=U or T=U.\n - 1 \\leq A,B \\leq 10\n - A and B are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nS T\nA B\nU\n-----Output-----\nPrint the answer, with space in between.\n-----Sample Input-----\nred blue\n3 4\nred\n-----Sample Output-----\n2 4\nTakahashi chose a ball with red written on it and threw it away.\nNow we have two balls with the string S and four balls with the string T.\n\ndef",
      "answer": "def count_balls(s, t):\n    count = 0\n    for i in range(len(s)):\n        if s[i] == t[i]:\n            count += 1\n    return count\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4335,
      "prompt": "Complete the Python function given the prompt below:\nGiven are a positive integer N and a string S of length N consisting of lowercase English letters.\nDetermine whether the string is a concatenation of two copies of some string.\nThat is, determine whether there is a string T such that S = T + T.\n-----Constraints-----\n - 1 \\leq N \\leq 100\n - S consists of lowercase English letters.\n - |S| = N\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nS\n-----Output-----\nIf S is a concatenation of two copies of some string, print Yes; otherwise, print No.\n-----Sample Input-----\n6\nabcabc\n-----Sample Output-----\nYes\nLet T =  abc, and S = T + T.\n\ndef",
      "answer": "def concatenation(n, s):\n    if len(s)!= n:\n        return False\n    for i in range(len(s)):\n        if s[i]!= s[i+n]:\n            return False\n    return True\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4336,
      "prompt": "Complete the Python function given the prompt below:\nThere is a rectangle in a coordinate plane. The coordinates of the four vertices are (0,0), (W,0), (W,H), and (0,H).\nYou are given a point (x,y) which is within the rectangle or on its border. We will draw a straight line passing through (x,y) to cut the rectangle into two parts. Find the maximum possible area of the part whose area is not larger than that of the other. Additionally, determine if there are multiple ways to cut the rectangle and achieve that maximum.\n-----Constraints-----\n - 1 \\leq W,H \\leq 10^9\n - 0\\leq x\\leq W\n - 0\\leq y\\leq H\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nW H x y\n-----Output-----\nPrint the maximum possible area of the part whose area is not larger than that of the other, followed by 1 if there are multiple ways to cut the rectangle and achieve that maximum, and 0 otherwise.\nThe area printed will be judged correct when its absolute or relative error is at most 10^{-9}.\n-----Sample Input-----\n2 3 1 2\n-----Sample Output-----\n3.000000 0\nThe line x=1 gives the optimal cut, and no other line does.\n\ndef",
      "answer": "def rectangle(w,h,x,y):\n    if x<0 or y<0 or x>w or y>h:\n        return 0\n    if x==0 and y==0:\n        return w*h\n    if x==w and y==0:\n        return w*h\n    if x==0 and y==h:\n        return w*h\n    if x==w and y==h:\n        return w*h\n    return min(rectangle(w,h,x,y-1),rectangle(w,h,x-1,y),rectangle(w,h,x-1,y-1),rectangle(w,h,x,y-1))\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4337,
      "prompt": "Complete the Python function given the prompt below:\nIn Japan, people make offerings called hina arare, colorful crackers, on March 3.\nWe have a bag that contains N hina arare. (From here, we call them arare.)\nIt is known that the bag either contains arare in three colors: pink, white and green, or contains arare in four colors: pink, white, green and yellow.\nWe have taken out the arare in the bag one by one, and the color of the i-th arare was S_i, where colors are represented as follows - pink: P, white: W, green: G, yellow: Y.\nIf the number of colors of the arare in the bag was three, print Three; if the number of colors was four, print Four.\n-----Constraints-----\n - 1 \\leq N \\leq 100\n - S_i is P, W, G or Y.\n - There always exist i, j and k such that S_i=P, S_j=W and S_k=G.\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nS_1 S_2... S_N\n-----Output-----\nIf the number of colors of the arare in the bag was three, print Three; if the number of colors was four, print Four.\n-----Sample Input-----\n6\nG W Y P Y W\n-----Sample Output-----\nFour\nThe bag contained arare in four colors, so you should print Four.\n\ndef",
      "answer": "def hina_arare(n):\n    if n == 3:\n        print(\"Three\")\n    elif n == 4:\n        print(\"Four\")\n    else:\n        print(\"Two\")\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4338,
      "prompt": "Complete the Python function given the prompt below:\nYou are policeman and you are playing a game with Slavik. The game is turn-based and each turn consists of two phases. During the first phase you make your move and during the second phase Slavik makes his move.\nThere are $n$ doors, the $i$-th door initially has durability equal to $a_i$.\nDuring your move you can try to break one of the doors. If you choose door $i$ and its current durability is $b_i$ then you reduce its durability to $max(0, b_i - x)$ (the value $x$ is given).\nDuring Slavik's move he tries to repair one of the doors. If he chooses door $i$ and its current durability is $b_i$ then he increases its durability to $b_i + y$ (the value $y$ is given). Slavik cannot repair doors with current durability equal to $0$.\nThe game lasts $10^{100}$ turns. If some player cannot make his move then he has to skip it.\nYour goal is to maximize the number of doors with durability equal to $0$ at the end of the game. You can assume that Slavik wants to minimize the number of such doors. What is the number of such doors in the end if you both play optimally?\n-----Input-----\nThe first line of the input contains three integers $n$, $x$ and $y$ ($1 \\le n \\le 100$, $1 \\le x, y \\le 10^5$) \u2014 the number of doors, value $x$ and value $y$, respectively.\nThe second line of the input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^5$), where $a_i$ is the initial durability of the $i$-th door.\n-----Output-----\nPrint one integer \u2014 the number of doors with durability equal to $0$ at the end of the game, if you and Slavik both play optimally.\n-----Examples-----\nInput\n6 3 2\n2 3 1 3 4 2\nOutput\n6\nInput\n5 3 3\n1 2 4 2 3\nOutput\n2\nInput\n5 5 6\n1 2 6 10 3\nOutput\n2\n-----Note-----\nClarifications about the optimal strategy will be ignored.\n\ndef",
      "answer": "def solve(n, x, y):\n    dp = [[0] * (x + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, x + 1):\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + 1\n            if j >= dp[i][j]:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return dp[n][x]\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4339,
      "prompt": "Complete the Python function given the prompt below:\nThe next lecture in a high school requires two topics to be discussed. The $i$-th topic is interesting by $a_i$ units for the teacher and by $b_i$ units for the students.\nThe pair of topics $i$ and $j$ ($i < j$) is called good if $a_i + a_j > b_i + b_j$ (i.e. it is more interesting for the teacher).\nYour task is to find the number of good pairs of topics.\n-----Input-----\nThe first line of the input contains one integer $n$ ($2 \\le n \\le 2 \\cdot 10^5$) \u2014 the number of topics.\nThe second line of the input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^9$), where $a_i$ is the interestingness of the $i$-th topic for the teacher.\nThe third line of the input contains $n$ integers $b_1, b_2, \\dots, b_n$ ($1 \\le b_i \\le 10^9$), where $b_i$ is the interestingness of the $i$-th topic for the students.\n-----Output-----\nPrint one integer \u2014 the number of good pairs of topic.\n-----Examples-----\nInput\n5\n4 8 2 6 2\n4 5 4 1 3\nOutput\n7\nInput\n4\n1 3 2 4\n1 3 2 4\nOutput\n0\n\ndef",
      "answer": "def good_pairs(n, a, b):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] + a[j] > b[i] + b[j]:\n                count += 1\n    return count\n\n",
      "difficulty": "introductory",
      "split": "test"
   }
]