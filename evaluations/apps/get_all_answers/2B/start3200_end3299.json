[
   {
      "task_id": 3200,
      "prompt": "Complete the Python function given the prompt below:\nYou are at home and about to drive to work. The road you will take is a straight line with no speed limit. There are, however, traffic lights precisely every kilometer, and you can not pass a red light. The lights change instantaneously between green and red, and you can pass a light whenever it is green. You can also pass through a light at the exact moment of changing colour. There are no traffic lights at the start or the end of the road.\nNow your car is special; it is an iCar, the first Orange car, and it has only one button. When you hold down the button, the car accelerates at a constant rate of $1 \\mathrm{m}/\\mathrm{s}^2$; when you release the button the car stops on the spot.\nYou have driven to work many times, so you happen to know the schedules of the traffic lights. Now the question is, how quickly can you get to work?\n-----Input-----\nThe first line contains a single integer $n$, the length of the road in kilometers ($1 \\leq n \\leq 16$). Each of the next $n-1$ lines contains $3$ integers $t_ i$, $g_ i$ and $r_ i$, the first time the $i$-th light will switch from red to green after the moment you start driving the car; the green light duration, and the red light duration ($40\\leq g_ i,r_ i\\leq 50$; $0 \\leq t_ i < g_ i+r_ i$). Times are given in seconds.\nYou may assume that any light with $t_ i > r_ i$ is green at the time you start driving the car, and switches to red $t_ i - r_ i$ seconds later.\n-----Output-----\nOutput the minimum time required to reach the end of the road. Answers within a relative or absolute error of $10^{-6}$ will be accepted.\n-----Examples-----\nSample Input 1:\n1\nSample Output 1:\n44.72135955\nSample Input 2:\n2\n50 45 45\nSample Output 2:\n68.52419365\n\ndef",
      "answer": "def time_to_reach_end(n):\n    # Your code here\n    return\n\n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3201,
      "prompt": "Complete the Python function given the prompt below:\nYou are given an array of integers of length $N$. Let $s_1, s_2, \\ldots, s_ q$ be the lexicographically sorted array of all its non-empty subsequences. A subsequence of the array is an array obtained by removing zero or more elements from the initial array. Notice that some subsequences can be equal and that it holds $q = 2^N - 1$.\nAn array $A$ is lexicographically smaller than array $B$ if $A_ i < B_ i$ where $i$ is the first position at which the arrays differ, or if $A$ is a strict prefix of array $B$.\nLet us define the hash of an array that consists of values $v_1, v_2, \\ldots, v_ p$ as:\\[ h(s) = (v_1 \\cdot B^{p-1} + v_2 \\cdot B^{p-2} + \\ldots + v_{p-1} \\cdot B + v_ p ) \\bmod M \\]\nwhere $B$, $M$ are given integers.\nCalculate $h(s_1) h(s_2), \\ldots, h(s_ K)$ for a given $K$.\n-----Input-----\nThe first line contains integers $N$, $K$, $B$, $M$ ($1 \\leq N \\leq 100000$, $1 \\leq K \\leq 100000$, $1 \\leq B, M \\leq 1000000$). The second line contains integers $a_1, a_2, a_3, \\ldots, a_ N$ ($1 \\leq a_ i \\leq 100000$). In all test cases, it will hold $K \\leq 2^N - 1$.\n-----Output-----\nOutput $K$ lines, the $j$-th line containing $h(s_ j)$.\n-----Examples-----\nSample Input 1:\n2 3 1 5\n1 2\nSample Output 1:\n1\n3\n2\nSample Input 2:\n3 4 2 3\n1 3 1\nSample Output 2:\n1\n1\n0\n2\n\ndef",
      "answer": "def hash(arr, m):\n    h = 0\n    for i in range(len(arr)):\n        h = (h * m + arr[i]) % m\n    return h\n\n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3202,
      "prompt": "Complete the Python function given the prompt below:\nOne day Mirko, while he was walking through the high grass, stumbled upon a sequence of $N$ colored marbles. Soon he noticed that if he touches $K$ or more consecutive marbles of the same color, they start to twinkle and then he could wish them to magically vanish, although he doesn\u2019t have to do that immediately (see $3$rd sample). Fortunately, Mirko brought an inexhaustible supply of marbles from home, so he can insert a marble of any color anywhere in the array (at the beginning, between any two existing marbles, or at the end). Help Mirko find the smallest number of marbles he must insert into the sequence before he could make all of the marbles vanish.\n-----Input-----\nThe first line of input contains two integers $N$ ($1 \\leq N \\leq 100$) and $K$ ($2 \\leq K \\leq 5$) \u2013 the number of marbles in the initial sequence and the minimal number of consecutive marbles of the same color he could wish to vanish. The next line contains exactly $N$ integers between $1$ and $100$ (inclusive), separated by one space. Those numbers represent colors of marbles in the sequence Mirko found.\n-----Output-----\nThe output should contain only one line with a single integer number \u2013 the minimal number of marbles Mirko has to insert to achive the desired effect.\n-----Examples-----\nSample Input 1:\n2 5\n1 1\nSample Output 1:\n3\nSample Input 2:\n5 3\n2 2 3 2 2\nSample Output 2:\n2\n\ndef",
      "answer": "def twinkle(n, k, arr):\n    count = 0\n    for i in range(n):\n        if arr[i] == arr[i+1]:\n            count += 1\n        if count == k:\n            return i\n    return -1\n\n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3203,
      "prompt": "Complete the Python function given the prompt below:\nEveryone knows of the secret agent double-oh-seven, the popular Bond (James Bond). A lesser known fact is that he actually did not perform most of his missions by himself; they were instead done by his cousins, Jimmy Bonds. Bond (James Bond) has grown weary of having to distribute assign missions to Jimmy Bonds every time he gets new missions so he has asked you to help him out.\nEvery month Bond (James Bond) receives a list of missions. Using his detailed intelligence from past missions, for every mission and for every Jimmy Bond he calculates the probability of that particular mission being successfully completed by that particular Jimmy Bond. Your program should process that data and find the arrangement that will result in the greatest probability that all missions are completed successfully. Note that the number of missions is equal to the number of Bonds, so that every Jimmy Bond needs to be assigned a single mission each.\nNote: the probability of all missions being completed successfully is equal to the product of the probabilities of the single missions being completed successfully.\n-----Input-----\nThe first line will contain an integer $N$, the number of Jimmy Bonds and missions ($1 \\le N \\le 20$).\nThe following $N$ lines will contain $N$ integers between $0$ and $100$, inclusive. The $j$:th integer on the $i$:th line is the probability that Jimmy Bond $i$ would successfully complete mission $j$, given as a percentage.\n-----Output-----\nOutput the maximum probability of Jimmy Bonds successfully completing all the missions, as a percentage.\nYour answer should have an absolute error of at most $10^{-6}$.\n-----Explanation of third sample-----\nIf Jimmy bond $1$ is assigned the $3$:rd mission, Jimmy Bond $2$ the $1$:st mission and Jimmy Bond $3$ the $2$:nd mission the probability is: $1.0 \\cdot 0.13 \\cdot 0.7 = 0.091 = 9.1\\% $. All other arrangements give a smaller probability of success.\n-----Examples-----\nSample Input 1:\n2\n100 100\n50 50\nSample Output 1:\n50\nSample Input 2:\n2\n0 50\n50 0\nSample Output 2:\n25\n\ndef",
      "answer": "def probability(bonds, missions):\n    probability = 1\n    for i in range(len(bonds)):\n        probability *= (1 - (1 - bonds[i]) ** (missions[i]))\n    return probability\n\n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3204,
      "prompt": "Complete the Python function given the prompt below:\nIn Delft there are a number of bridges that are still being operated by a human, known as the bridge operator. One such bridge operator will soon retire, hence there is the need for a replacement. The Bridge And Poker Committee has decided to use a computer program to automatically open and close the bridge, eliminating the need for human interaction.\nHowever, the computer program still needs to be written. The requirements for this project are as follows:\n - No boat may be forced to wait for more than $30$ minutes.\n - The amount of time during which the bridge is unavailable to road traffic must be as small as possible while still satisfying requirement 1.\nIt takes $60$ seconds to raise or lower the bridge. During this time the bridge is not available to either road traffic or water traffic.\nBoats arrive at the bridge at predictable times. It takes $20$ seconds for a boat to sail through the bridge, assuming the bridge is already fully raised.\nIf the bridge is not fully raised when a boat arrives, the boat must wait. If there are boats waiting when the bridge becomes fully raised, these boats pass through the bridge one-by-one, which takes $20$ seconds per boat. The bridge must remain fully raised as long as there are still boats sailing through! As soon as all boats have passed, the bridge may be lowered. But it might be more efficient to keep the bridge raised for a little while longer if the next boat is soon to arrive.\nGiven the arrival times of all boats, operate the bridge such that all boats can pass through without any boat waiting longer than $30$ minutes. What is the total amount of time during which the bridge is unavailable to road traffic?\n-----Input-----\nThe first line contains an integer $N$, the number of boats that must pass the bridge ($1 \\leq N \\leq 4000$).\nThen follow $N$ lines, each containing an integer $T_ i$, the time at which boat $i$ will arrive at the bridge in seconds ($60 \\leq T_ i \\leq 10^5$).\nBoats are sorted by increasing time of arrival, and never arrive within $20$ seconds of each other ($i < j$ implies $T_ i + 20 \\leq T_ j$).\n-----Output-----\nWrite one line with an integer, the total number of seconds during which the bridge must be unavailable for road traffic in order for all boats to pass the bridge.\n-----Examples-----\nSample Input 1:\n2\n100\n200\nSample Output 1:\n160\nSample Input 2:\n3\n100\n200\n2010\nSample Output 2:\n250\n\ndef",
      "answer": "def bridge_time(boats):\n    boats.sort()\n    bridge_time = 0\n    for i in range(len(boats)):\n        if i == 0:\n            bridge_time += boats[i]\n        else:\n            if bridge_time + 20 <= boats[i]:\n                bridge_time += 20\n            else:\n                bridge_time += boats[i]\n    return bridge_time\n\n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3205,
      "prompt": "Complete the Python function given the prompt below:\nYou and your friends have just returned from a beautiful vacation in the mountains of the Netherlands. When on vacation, it\u2019s annoying to split the bill on every expense every time, so you just kept all the receipts from the vacation, and wrote down who paid how much for who. Now, it is time to settle the bill. \nYou could each take all the receipts showing that someone paid something for you, and then pay that person back. But then you would need a lot of transactions, and you want to keep up the lazy spirit from your trip. In the end, it does not matter who transfers money to whom; as long as in the end, everyone\u2019s balance is $0$.\nCan you figure out the least number of transactions needed to settle the score? Assume everyone has enough spare cash to transfer an arbitrary amount of money to another person.\n-----Input-----\nInput consists of:\n - A line containing two integers $M$, the number of people in the group, with $1\\leq M \\leq 20$, and $N$, the number of receipts from the trip, with $0\\leq N\\leq 1000$.\n - $N$ lines, each with three integers $a, b, p$, where $0 \\leq a,b < M$, and $1 \\leq p \\leq 1000$, signifying a receipt showing that person $a$ paid $p$ euros for person $b$.\n-----Output-----\nOutput a single line containing a single integer, the least number of transactions necessary to settle all bills.\n-----Examples-----\nSample Input 1:\n4 2\n0 1 1\n2 3 1\nSample Output 1:\n2\nSample Input 2:\n5 5\n0 1 3\n1 2 3\n2 3 3\n3 4 3\n4 0 3\nSample Output 2:\n0\n\ndef",
      "answer": "def min_transactions(m, n):\n    # Write your code here\n    if m == 1:\n        return n\n    if n == 1:\n        return m\n    if m == 2:\n        return min(n, m)\n    if n == 2:\n        return min(m, n)\n    if m == 3:\n        return min(n, m)\n    if n == 3:\n        return min(m, n)\n    if m == 4:\n        return min(n, m)\n    if n == 4:\n        return min(m, n)\n    if m == 5:\n        return min(n, m)\n    if n == 5:\n        return min(m, n)\n    if m == 6:\n        return min(n, m)\n    if n == 6:\n        return min(m, n)\n    if m == 7:\n        return min(n, m)\n    if n == 7:\n        return min(m, n)\n    if m == 8:\n        return min(n, m)\n    if n == 8:\n        return min(m, n)\n    if m == 9:\n        return min(n, m)\n    if n == 9:\n        return min(m, n)\n    if m == 10:\n        return min(n, m)\n    if n == 10:\n        return min(m, n)\n    if m == 11:\n        return min(n, m)\n    if n == 11:\n        return min(m, n)\n    if m == 12:\n        return min(n, m)\n    if n == 12:\n        return min(m, n)\n    if m == 13:\n        return min(n, m)\n    if n == 13:\n        return min(m, n)\n    if m == 14:\n        return min(n, m)\n    if n == 14:\n        return min(m, n)\n    if m == 15:\n        return min(n, m)\n    if n == 15:\n        return min(m, n)\n    if m == 16:\n        return min(n, m)\n    if n == 16:\n        return min(m, n)\n    if m == 17:\n        return min(n, m)\n    if n == 17:\n        return min(m, n)\n    if m == 18:\n        return min(n, m)\n    if n == 18:\n        return min(m, n)\n    if m == 19:\n        return min(n, m)\n    if n == 19:\n        return min(m, n)\n    if m == 20:\n        return min(n, m)\n    if n == 20:\n        return min(m, n)\n    if m == 21:\n        return min(n, m)\n    if n == 21:\n        return min(m, n)\n    if m == 22:\n        return min(n, m)\n    if n == 22:\n        return min(m, n)\n    if m == 23:\n        return min(n, m)\n    if n == 23:\n        return min(m, n)\n    if m == 24:\n        return min(n, m)\n    if n == 24:\n        return min(m, n)\n    if m == 25:\n        return min(n, m)\n    if n == 25:\n        return min(m, n)\n    if m == 26:\n        return min(n, m)\n    if n == 26:\n        return min(m, n)\n    if m == 27:\n        return min(n, m)\n    if n == 27:\n        return min(m, n)\n    if m == 28:\n        return min(n, m)\n    if n == 28:\n        return min(m, n)\n    if m == 29:\n        return min(n, m)\n    if n == 29:\n        return min(m, n)\n    if m == 30:\n        return min(n, m)\n    if n == 30:\n        return min(m, n)\n    if m == 31:\n        return min(n, m)\n    if n == 31:\n        return min(m, n)\n    if m == 32:\n        return min(n, m)\n    if n == 32:\n        return",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3206,
      "prompt": "Complete the Python function given the prompt below:\nZara, an aspiring architect and urban planner, has drawn out what she considers to be the perfect skyline. As Zara is still aspiring she must use her young daughter, Pippa, to test out her designs. In order to test out the designs Pippa must build them out of her building blocks! The building blocks Pippa has have a uniform width and depth, but come in different heights $h$. Zara\u2019s description for Pippa will consist of a list of buildings, each with a target height $b$.\nPippa must then use some (not necessarily all) of her blocks to stack together such that the sum of the heights of the blocks in each stack corresponds to the height of the building in the skyline. Since Pippa prefers building instead of solving puzzles she wants you to determine how she must stack the blocks so that she must only do the stacking!\n-----Input-----\nThe input consists of a single test case. The first line of this test case contains two integers $N$ and $S$ ($1 \\le N \\le 15$ and $1 \\le S \\le 15$), where $N$ is the number of blocks Pippa has and $S$ is the number of buildings in the skyline Zara made.\nThe next line contains $N$ integers ($1 \\le h_ i \\le 10^{9}$) representing the heights of each of the blocks. The last line contains $S$ integers ($1 \\le b_ i \\le 10^{9}$) representing the heights of each of the buildings.\n-----Output-----\nIf it is possible for Pippa to build Zara\u2019s skyline then output $S$ lines. On each line output a single number $s_ i$ representing the number of blocks needed to build building $i$ where $i$ corresponds to the $i^{\\text {th}}$ building listed in the input. This should be followed (on the same line) by $s_ i$ numbers $j$ representing the blocks of the input used in building $i$, where $j$ represents the $j^{\\text {th}}$ block appearing the input.\nIf no combination of the blocks can build the desired skyline then output -1.\n-----Examples-----\nSample Input 1:\n4 3\n3 3 2 1\n3 3 3\nSample Output 1:\n1 1\n1 2\n2 3 4\nSample Input 2:\n4 2\n3 3 2 2\n6 3\nSample Output 2:\n-1\n\ndef",
      "answer": "def skyline(h, b):\n    if len(h)!= len(b):\n        return -1\n    if len(h) == 0:\n        return 0\n    if len(h) == 1:\n        return b[0]\n    if len(h) == 2:\n        return max(h[0], h[1])\n    if len(h) == 3:\n        return max(h[0], h[1], h[2])\n    if len(h) == 4:\n        return max(h[0], h[1], h[2], h[3])\n    if len(h) == 5:\n        return max(h[0], h[1], h[2], h[3], h[4])\n    if len(h) == 6:\n        return max(h[0], h[1], h[2], h[3], h[4], h[5])\n    if len(h) == 7:\n        return max(h[0], h[1], h[2], h[3], h[4], h[5], h[6])\n    if len(h) == 8:\n        return max(h[0], h[1], h[2], h[3], h[4], h[5], h[6], h[7])\n    if len(h) == 9:\n        return max(h[0], h[1], h[2], h[3], h[4], h[5], h[6], h[7], h[8])\n    if len(h) == 10:\n        return max(h[0], h[1], h[2], h[3], h[4], h[5], h[6], h[7], h[8], h[9])\n    if len(h) == 11:\n        return max(h[0], h[1], h[2], h[3], h[4], h[5], h[6], h[7], h[8], h[9], h[10])\n    if len(h) == 12:\n        return max(h[0], h[1], h[2], h[3], h[4], h[5], h[6], h[7], h[8], h[9], h[10], h[11])\n    if len(h) == 13:\n        return max(h[0], h[1], h[2], h[3], h[4], h[5], h[6], h[7], h[8], h[9], h[10], h[11], h[12])\n    if len(h) == 14:\n        return max(h[0], h[1], h[2], h[3], h[4], h[5], h[6], h[7], h[8], h[9], h[10], h[11], h[12], h[13])\n    if len(h) == 15:\n        return max(h[0], h[1], h[2], h[3], h[4], h[5], h[6], h[7], h[8], h[9], h[10], h[11], h[12], h[13], h[14])\n    if len(h) == 16:\n        return max(h[0], h[1], h[2], h[3], h[4], h[5], h[6], h[7], h[8], h[9], h[10], h[11], h[12], h[13], h[14], h[15])\n    if len(h) == 17:\n        return max(h[0], h[1], h[2], h[3], h[4], h[5], h[6], h[7], h[8], h[9], h[10], h[11], h[12], h[13], h[14], h[15], h[16])\n    if len(h) == 18:\n        return max(h[0], h[1], h[2], h[3], h[4], h[5], h[6], h[7], h[8], h[9], h[10], h[11], h[12], h[13], h[14], h[15], h[16], h[17])\n    if len(h) == 19:\n        return max(h[0], h[1], h[2], h[3], h[4],",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3207,
      "prompt": "Complete the Python function given the prompt below:\nOn the forest-filled moon of Endor there is, if we are to believe the Guinness Book of Records, the longest stick in the whole galaxy. On that stick of $L$ meters in length there are $N$ cheerful chameleons. Each chameleon is moving along the stick with constant speed of $1\\mathrm{m}/\\mathrm{s}$ in one of two possible directions (left or right) and is colored in one of the possible $K$ colors.\nIt is known that the chameleons of Endor worship the ancient ant laws that dictate that the walk along the stick must be continued until the end of the stick is reached (which means getting off it), and when a collision with another chameleon takes place, you must turn $180$ degrees and continue the walk in the opposite direction. Additionally, after a chameleon colored in colour $a$ moving to the left collides with a chameleon colored in colour $b$ moving to the right, the chameleon moving to the left before the collision takes the color of the chameleon moving to the right before the collision (so, color $b$), while the chameleon moving to the right before the collision takes a new color $(a + b) \\bmod K$.\nIf you are given the initial positions, colors and directions of movement of all the chameleons, for each color determine the total trip taken by the chameleons in that color before getting off the stick.\n-----Input-----\nThe first line of input contains the integers $N$, $K$ and $L$ ($1 \\leq N \\leq 100000$, $1 \\leq K \\leq 40$, $1 \\leq L \\leq 1000000$) from the task. The $i$-th of the following $N$ lines contains the integer $d_ i$ ($0 \\leq d_ i \\leq L$) that denotes the distance between the $i$-th chameleon and the left end of the stick, then the integer $b_ i$ ($0 \\leq b_ i \\leq K - 1$) that denotes the color of the $i$-th chameleon and the character \u2018L\u2019 (left) or \u2018D\u2019 (right) that denote the direction of movement of the $i$-th chameleon. All integers $d_ i$ will be unique and given in strictly ascending order.\n-----Output-----\nThe output must contain $K$ lines, the $i$-th line containing the total trip taken by the chameleons in color $i$.\n-----Examples-----\nSample Input 1:\n2 3 10\n0 0 D\n10 1 L\nSample Output 1:\n10.0\n10.0\n0.0\nSample Input 2:\n4 3 7\n1 0 D\n3 0 D\n4 1 L\n6 2 D\nSample Output 2:\n10.0\n4.0\n1.0\n\ndef",
      "answer": "def chameleon_walk(N, K, L, d, b):\n    # your code here\n    return 0\n\n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3208,
      "prompt": "Complete the Python function given the prompt below:\nRookie Pirate Captain Jack Albatross has secretly laid anchor in a hidden bay not far from Port Wine, the local meeting point for grizzled pirates and denizens of the sea. Disguising as a messenger, you have infiltrated the service of the dreaded legendary Captain Stevie, and you are entrusted with carrying small encrypted messages between Captain Stevie and his staff of shipmates. Your task is to break the encryption of the messages in aid of young Captain Albatross, giving him a much needed edge in his quest for peg-legged fame. Fortunately, you (in contrast to Captain Albatross) have been around for a while and you\u2019ve come to know what words to expect in written pirate messages. The following is a table of words having common occurrences:\n\u201cbe\u201d\n\u201cour\u201d\n\u201crum\u201d\n\u201cwill\u201d\n\u201cdead\u201d\n\u201chook\u201d\n\u201cship\u201d\n\u201cblood\u201d\n\u201csable\u201d\n\u201cavenge\u201d\n\u201cparrot\u201d\n\u201ccaptain\u201d\nIn a (mixed alphabet) substitution cipher, each letter of the plain text is replaced with another, in this case arbitrary but unique, letter from the alphabet. Given a text encrypted with a substitution cipher and the given set of the twelve known words above, your task is to decode the encrypted text and provide us and Captain Albatross with the plain text. This can be accomplished if and only if there is a unique substitution mapping from the encrypted letters to plain text letters such that\n - a subset $S$ of the twelve words show up in the plain text, and\n - the number of different letters in the words in $S$ is equal to the number of different letters in the encrypted text.\nNote that not all the known words may be present in the plain text and that replacements are not mutual (\u2019a\u2019 being encrypted by \u2019h\u2019 does not necessarily mean that \u2019h\u2019 is encrypted by \u2019a\u2019).\n-----Input-----\nThe input contains the encrypted text on one line. The text contains at most 200 characters from the set \u2019a\u2019, \u2026, \u2019z\u2019, \u2019 \u2019. Only the letters \u2019a\u2019, \u2026, \u2019z\u2019 of the plain text are encrypted, the spaces are kept unencrypted.\n-----Output-----\nThe decrypted plain text if possible, or the string \u201cImpossible\u201d if the text cannot be uniquely decrypted using the set of known words.\n-----Examples-----\nSample Input 1:\nex eoii jpxbmx cvz uxju sjzzcn jzz\nSample Output 1:\nwe will avenge our dead parrot arr\nSample Input 2:\nwl jkd\nSample Output 2:\nImpossible\n\ndef",
      "answer": "def decrypt(text, words):\n    # your code here\n    return \"Impossible\"\n\n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3209,
      "prompt": "Complete the Python function given the prompt below:\nLast year, some of the judges tried to travel to NWERC\u201910 by train. This turned into a big disaster: on the way there, a fire in a control room caused huge delays, while on the return trip, trains in Bremen were delayed due to a terrorist threat in Hamburg. Of course, these huge delays caused other delays in the train schedule, so the big question was which trains to take: would it be better to take this slow regional train now, or wait for that intercity train, which has a big chance of being delayed?\nThis year, the judges have planned ahead and carefully analyzed the train schedule. They even kept track of how often trains were delayed and by how much. Now that they have all this information, they want to travel as quickly possible, minimizing the expected duration of the journey. Can you help them?\nFor each train connection, the judges know exactly what its scheduled departure time and duration are, as well as the probability that its arrival at the destination will be delayed. You may assume that the probabilities of delays are independent and that the judges can adapt their itinerary as they go, depending on any delays which they might already have incurred. Trains always depart on time, but may arrive late and the judges do not know whether a train\u2019s arrival will be delayed until they have boarded it. It takes judges no time to switch trains, so they can take a connecting train that departs at the same time as they arrive at a place.\nThe judges can choose the time of their initial departure as they wish and they want to minimize the expected duration1 of their total trip.\n-----Input-----\n - one line with the judges\u2019 place of origin and destination, these are different.\n - one line with an integer $n$ ($1 \\leq n \\leq 1000$): the number of train connections.\n - $n$ lines, each describing a train connection:\n - the origin and destination of this connection, these are different.\n - an integer $m$ ($0\\leq m\\leq 59$), the departure time in minutes after each full hour.\n - an integer $t$ ($1\\leq t\\leq 300$), the standard journey time (assuming no delays).\n - an integer $p$ ($0\\leq p\\leq 100$), the probability of delays as a percentage.\n - an integer $d$ ($1\\leq d\\leq 120$), the maximum delay in minutes.\nAll place names are given as strings of upper and lower case alphabetical characters, of length at most 20. If a train is delayed, then the length of the delay will be a whole number of minutes, and will be uniformly distributed in the range $[1,d]$.\n-----Output-----\nOutput a floating point number: the minimum expected duration of the total trip in minutes. This number should be accurate up to $10^{-6}$ relative or absolute precision. Output IMPOSSIBLE instead if the destination is not reachable.\n-----Examples-----\nSample Input 1:\nHamburg Bremen\n3\nHamburg Bremen 15 68 10 5\nHamburg Bremen 46 55 50 60\nBremen Frankfurt 14 226 10 120\nSample Output 1:\n68.3\nSample Input 2:\nAmsterdam Rotterdam\n1\nAmsterdam Utrecht 10 22 5 10\nSample Output 2:\nIMPOSSIBLE\n\ndef",
      "answer": "def find_min_time(origin, destination, train_connections):\n    # Your code here\n    return min_time\n\n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3210,
      "prompt": "Complete the Python function given the prompt below:\nAlice and Bob are playing Dots and Boxes. The game is played on an $N\\times N$ square lattice of dots, and they alternate drawing a line segment between horizontally or vertically adjacent dots that haven\u2019t been connected before. Every time a unit square is formed by four line segments, the player who put down the last segment scores one point for that square. The game ends when the square lattice has been completely filled with line segments, and whoever scored the most points wins.\nAlice and Bob aren\u2019t really in a competitive mood today, so they\u2019ve just been playing for fun. Hence they aren\u2019t following any specific game strategy, and, in particular, even if it\u2019s possible to make a move that scores a point or is clearly superior in some way, they won\u2019t necessarily make that move. But now they\u2019ve been playing for a while and neither of them has scored a single point. If neither of them scores a point pretty soon, they may get bored. Given the current state of the game, how many moves could be made, in the worst case, before either Alice or Bob is guaranteed to have scored a point?\n-----Input-----\nInput starts with a line containing an integer $N$ ($2 \\leq N \\leq 80$), the size of the square lattice. Then follows an ASCII representation of the current state of the game, $2N-1$ rows high and $2N-1$ columns wide, listed in row-major order. There are cells of four types ($1 \\leq i,j \\leq N$):\n - Cell $(2i-1,2j-1)$ is \u2018*\u2019, representing dot $(i,j)$.\n - Cell $(2i,2j)$ is \u2018.\u2019, representing empty space.\n - Cell $(2i,2j-1)$ is \u2018|\u2019 if dots $(i,j)$ and $(i+1,j)$ have been connected by a line segment, and \u2018.\u2019 otherwise.\n - Cell $(2i-1,2j)$ is \u2018-\u2019 if dots $(i,j)$ and $(i,j+1)$ have been connected by a line segment, and \u2018.\u2019 otherwise.\nIt is guaranteed that no player has scored a point, meaning that no unit squares have been formed.\n-----Output-----\nOutput the number of moves that can be made, in the worst case, before either Alice or Bob is guaranteed to have scored a point.\n-----Examples-----\nSample Input 1:\n3\n*-*.*\n|.|.|\n*.*-*\n|...|\n*.*.*\nSample Output 1:\n3\nSample Input 2:\n2\n*.*\n...\n*.*\nSample Output 2:\n4\n\ndef",
      "answer": "def dots_and_boxes(n):\n    # Write your code here\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 5\n    if n == 5:\n        return 6\n    if n == 6:\n        return 7\n    if n == 7:\n        return 8\n    if n == 8:\n        return 9\n    if n == 9:\n        return 10\n    if n == 10:\n        return 11\n    if n == 11:\n        return 12\n    if n == 12:\n        return 13\n    if n == 13:\n        return 14\n    if n == 14:\n        return 15\n    if n == 15:\n        return 16\n    if n == 16:\n        return 17\n    if n == 17:\n        return 18\n    if n == 18:\n        return 19\n    if n == 19:\n        return 20\n    if n == 20:\n        return 21\n    if n == 21:\n        return 22\n    if n == 22:\n        return 23\n    if n == 23:\n        return 24\n    if n == 24:\n        return 25\n    if n == 25:\n        return 26\n    if n == 26:\n        return 27\n    if n == 27:\n        return 28\n    if n == 28:\n        return 29\n    if n == 29:\n        return 30\n    if n == 30:\n        return 31\n    if n == 31:\n        return 32\n    if n == 32:\n        return 33\n    if n == 33:\n        return 34\n    if n == 34:\n        return 35\n    if n == 35:\n        return 36\n    if n == 36:\n        return 37\n    if n == 37:\n        return 38\n    if n == 38:\n        return 39\n    if n == 39:\n        return 40\n    if n == 40:\n        return 41\n    if n == 41:\n        return 42\n    if n == 42:\n        return 43\n    if n == 43:\n        return 44\n    if n == 44:\n        return 45\n    if n == 45:\n        return 46\n    if n == 46:\n        return 47\n    if n == 47:\n        return 48\n    if n == 48:\n        return 49\n    if n == 49:\n        return 50\n    if n == 50:\n        return 51\n    if n == 51:\n        return 52\n    if n == 52:\n        return 53\n    if n == 53:\n        return 54\n    if n == 54:\n        return 55\n    if n == 55:\n        return 56\n    if n == 56:\n        return 57\n    if n == 57:\n        return 58\n    if n == 58:\n        return 59\n    if n == 59:\n        return 60\n    if n == 60:\n        return 61\n    if n == 61:\n        return 62\n    if n == 62:\n        return 63\n    if n == 63:\n        return 64\n    if n == 64:\n        return 65\n    if n == 65:\n        return 66\n    if n == 66:\n        return 67\n    if n == 67:\n        return 68\n    if n == 68:\n        return 69\n    if n == 69:\n        return 70\n    if n == 70:\n        return 71\n    if n == 71:\n        return 72\n    if n == 72:\n        return 73\n    if n == 73:\n        return 74\n    if n == 74:\n        return 75\n    if n == 75:\n        return 76\n    if n == 76:\n        return 77\n    if n == 77:\n        return 78\n    if n == 78:\n        return 79\n    if n == 79:\n        return 80\n    if n == 80:\n        return 81\n    if n == 81:\n        return 82\n    if n == 82:\n        return 83\n    if n == 83:\n        return 84\n    if n == 84:\n        return 85\n    if n == 85:\n        return 86\n    if n == 86:\n        return 87\n    if n == 87:\n        return 88\n    if n == 88:\n        return 89\n    if n == 89:\n        return 90\n    if n == 90:\n        return 91\n    if n == 91:\n        return 92\n    if n == 92:\n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3211,
      "prompt": "Complete the Python function given the prompt below:\nIn the country of Elecuador, a very strange voting system is used. When it is time for the election, each one of the $n$ citizens will arrive in some order to the voting station. There are only two parties to vote for, conveniently named $1$ and $2$. When arriving to the voting station, a person will vote for one of the parties, unless they are a teller. The tellers do not vote, instead they count how many votes each of the two parties has at the time the teller arrives, and if one of the parties has more votes than the other then that party receives one point (if the two parties have the same number of votes, neither of them receives a point). The party with the most points at the end wins. If both parties end up with the same number of points, chaos ensues.\nAs the president of Elecuador representing party $1$, you are worried that the coming election will be the end of your reign. Fortunately, you have a plan to stop this from happening. Being the president, you know who everyone in the country will vote for, who the tellers are, and in what order everyone will arrive to the voting station. By making the right phone calls, you can also affect when the tellers arrive. In one move, it is possible to swap a teller with an adjacent person in the list of arrivals to the voting station. Note that it is not possible to swap two adjacent non-tellers. What is the minimum number of swaps necessary to ensure that party $1$ wins?\n-----Input-----\nThe input starts with a line containing an integer $n$ $n$ ($1 \\le n \\le 5000$), the number of citizens in Elecuador. Then follows a line containing a string $s$ of length $n$, consisting of the characters $0$, $1$, and $2$. This string represents the citizens in the order they arrive to the voting station. If the $i$\u2019th character $s_ i$ is $1$ or $2$, it means that the $i$\u2019th citizen will vote for party $1$ or $2$, respectively. If $s_ i$ is $0$, it means that the $i$\u2019th citizen is a teller.\n-----Output-----\nIf it is possible to ensure victory, output one integer, the minimum number of swaps necessary. Otherwise, output \u201cimpossible\u201d.\n-----Examples-----\nSample Input 1:\n8\n12210020\nSample Output 1:\n4\nSample Input 2:\n4\n1111\nSample Output 2:\nimpossible\n\ndef",
      "answer": "def swap_tellers(n, s):\n    tellers = []\n    for i in range(n):\n        if s[i] == '1':\n            tellers.append(i)\n    if len(tellers) == 1:\n        return 'impossible'\n    else:\n        return min(tellers)\n\n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3212,
      "prompt": "Complete the Python function given the prompt below:\nBuffalo Bill wishes to cross a $1000 \\times 1000$ square field. A number of snakes are on the field at various positions, and each snake can strike a particular distance in any direction. Can Bill make the trip without being bitten?\nAssume that the southwest corner of the field is at $(0,0)$ and the northwest corner at $(0,1000)$. Bill must enter the field somewhere between the southwest and northwest corner and must leave somewhere between the southeast and northeast corners.\n-----Input-----\nThe input consists of a line containing $0 \\le n \\le 1000$, the number of snakes. A line follows for each snake, containing three integers: the $(x,y)$ location of the snake ($0 \\le x, y \\le 1000$) and its strike distance $1 \\le d \\le 1000$. The snake will bite anything that passes strictly closer than this distance from its location.\n-----Output-----\nIf Bill can complete the trip, give coordinates with exactly two decimal digits at which he may enter and leave the field. Use the format shown in the sample input. If Bill may enter and leave at several places, give the most northerly. If there is no such pair of positions, print \u201cBill will be bitten.\u201d\n-----Examples-----\nSample Input 1:\n3\n500 500 499\n0 0 999\n1000 1000 200\nSample Output 1:\nBill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00).\nSample Input 2:\n4\n250 250 300\n750 250 300\n250 750 300\n750 750 300\nSample Output 2:\nBill will be bitten.\n\ndef",
      "answer": "def find_snake_positions(n):\n    snake_positions = []\n    for i in range(n):\n        x, y = map(int, input().split())\n        snake_positions.append((x, y))\n    return snake_positions\n\n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3213,
      "prompt": "Complete the Python function given the prompt below:\nSweet Apple Acres has been infested by evil fruit-hungry bats! The Apple family has called for Twilight Sparkle\u2019s help to get rid of them.\nTwilight needs to use a powerful spell to eliminate the threat the bats pose. Poring through the volumes of magic books, she found an ancient spell by the legendary Star Swirl the Bearded that, if executed, can increase her power enough to drive the bats out.\nThis spell has $M$ steps, which must be performed in order. Each step is either:\n - a + step, which adds $1$ to the power of the caster, or\n - a x step, which multiplies the power of the caster by $2$.\nTwilight starts with power $1$.\nUnfortunately, since Twilight is not very strong, the power that she can actually discharge is limited by her strength $S$. If she has power $p$, the amount of power she can discharge is equal to the remainder after dividing $p$ by $2^S$.\nIt is therefore clear that the amount of power she has is not necessarily equal to the amount of power she can actually discharge. She wants to maximize the amount of power she can discharge; to this end, she realized that she can transform some\u2014possibly none, possibly all\u2014of the steps in the spell into no-op o steps, which do not affect her power.\nWhich steps should she turn into no-op steps to maximize the amount of power she can discharge?\n-----Input-----\nThe first line of input contains two integers, $M$ ($1 \\leq M \\leq 10^6$) and $S$ ($1 \\leq S \\leq 10^9$), the number of steps in the spells and Twilight\u2019s strength.\nThe second line of input contains a string of $M$ characters. In particular, the $i^\\text {th}$ of these characters is either + or x, the type of the $i^\\text {th}$ step.\n-----Output-----\nOutput on a line by itself the same string with some\u2014possibly none, possibly all\u2014of the characters replaced with o, representing a way of replacing some steps with no-ops that maximizes the amount of power she can discharge.\nIf there are multiple correct answers, you can output any of them.\n-----Examples-----\nSample Input 1:\n8 3\n++xx+x++\nSample Output 1:\n++xx+o++\nSample Input 2:\n8 3\nxxxxxxxx\nSample Output 2:\nxxoooooo\n\ndef",
      "answer": "def sweet_apple_acres(m, s):\n    # your code here\n    return\n\n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3214,
      "prompt": "Complete the Python function given the prompt below:\nBetter Documents Inc.\u00a0is contemplating the next generation of word processors. Now, nearly every word processor includes a Spell Checker. BDI, however, is looking forward to replacing that with a true Typo Checker. We\u2019ve all been caught, after relying on a spell checker, by typing mistakes (\u201ctypos\u201d) that just happen to wind up as a correctly spelled word, just not the word we intended. BDI hopes to use AI to determine when a word\u2019s context suggests that it is out of place and probably should have been a different, but similarly spelled, word.\nAs a first step in this process, they want to see how common such similar words really are in ordinary text. Write a program to read in paragraphs of text and to produce a list of similarly spelled words occurring in that text.\nFor the purpose of this program, a word is any maximal string of non-whitespace characters containing at least one alphabetic character. Whitespace can be either blanks or line terminators (\u201c\\r\u201d or \u201c\\n\u201d). The core of a word is what you have left after removing any non-alphabetic characters and replacing any upper-case alphabetic characters to their lower-case equivalents.\nTwo words are considered to be similarly spelled if the core of one word can be converted to the core of the other word by a single application of any one of the following transformations:\n - Delete a single character.\n - Insert a single alphabetic character.\n - Replace a single character by a different alphabetic character.\n - Transpose (exchange) any two adjacent characters.\n-----Input-----\nInput consists of $1$ to $100$ lines of text, followed by an end of input marker in the form of a line containing only the string \u201c***\u201d.\nEach line of text will contain $0$ to $80$ ASCII characters (not counting line terminators).\n-----Output-----\nFor each word core in the text that has one or more similarly spelled words, print a line consisting of\n - That word core\n - A colon (\u201c:\u201d) followed by a blank\n - A list of all similarly spelled word cores (with no duplicates and not containing the core to the left of the colons), in alphabetic order, separated by single spaces.\nThe lines printed should be in alphabetic order of the word cores to the left of the colon.\nIf there are no similarly spelled words in the input, print a single line containing the string \u201c***\u201d.\n-----Examples-----\nSample Input 1:\nLost is Close to Lose\n\"Better Documents Inc. wants to add Typo Checking in to the\nnext generation of word processors,\" he said.\n***\nSample Output 1:\nclose: lose\nhe: the\nin: inc is\ninc: in\nis: in\nlose: close lost\nlost: lose\nthe: he\nSample Input 2:\nThe fox said, \"When?\"\n\"Not till 12 o'clock\", replied the hen.\n\"That clock is stopped, it will never strike.\", he said.\n***\nSample Output 2:\nclock: oclock\nhe: hen the\nhen: he when\nis: it\nit: is\noclock: clock\nthe: he\ntill: will\nwhen: hen\nwill: till\n\ndef",
      "answer": "def similarWords(text):\n    words = text.split()\n    similarWords = []\n    for i in range(len(words)):\n        for j in range(i+1, len(words)):\n            if words[i] == words[j]:\n                similarWords.append(words[i])\n    return similarWords\n\n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3215,
      "prompt": "Complete the Python function given the prompt below:\nThe most common technique for shuffling a deck of cards is called the Riffle or Dovetail shuffle. The deck is split into two stacks, which are then interleaved with each other. The deck can be split anywhere, and the two stacks can be interleaved in any way.\nFor example, consider a deck with 10 unique cards:\n1 2 3 4 5 6 7 8 9 10\nSplit them somewhere\n1 2 3 4 5 6\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a07 8 9 10\u00a0\u00a0\nAnd interleave them in some way:\n1 2\u00a0\u00a0 \u00a07\u00a0\u00a0 3\u00a0\u00a0 8 9\u00a0\u00a0 \u00a04 5\u00a0\u00a0 10\u00a0\u00a0 6\u00a0\u00a0\nDo it again. Split them somewhere:\n1 2 7\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0 3 8 9 4 5 10 6\u00a0\u00a0\nAnd interleave them in some way:\n3 8\u00a0\u00a0 \u00a01\u00a0\u00a0 9 4 5\u00a0\u00a0 \u00a02 7\u00a0\u00a0 10 6\u00a0\u00a0\nThis is one possible ordering after $2$ shuffles. Suppose there are $n$ unique cards, and that they start out perfectly ordered: $1, 2, 3,..., n$. Given an ordering of the deck, what is the smallest number of shuffles that could possibly put the deck in that order?\n-----Input-----\nEach input will consist of a single test case. Note that your program may be run multiple times on different inputs. Each test case will begin with a single integer $n$ ($1 \\le n \\le 1000000$) indicating the number of cards in the deck. On the next line will be $n$ unique integers $c$ ($1 \\le c \\le n$), with a single space between them, indicating an ordering of the $n$ cards. The values $c$ are guaranteed to be a permutation of the numbers $1 \\ldots n$.\n-----Output-----\nOutput a single line with a single integer indicating the minimum number of shuffles that could possibly put the deck in the given order.\n-----Examples-----\nSample Input 1:\n10\n1 2 7 3 8 9 4 5 10 6\nSample Output 1:\n1\nSample Input 2:\n10\n3 8 1 9 4 5 2 7 10 6\nSample Output 2:\n2\n\ndef",
      "answer": "def riffle(deck):\n    # Write your code here\n    return\n\n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3216,
      "prompt": "Complete the Python function given the prompt below:\nEvery (positive) rational number can be expressed as a ratio of two (positive) integers. However, in decimal form, rational numbers often have an infinitely repeating pattern, e.g., $1/7 = 0.142857142857142857$... A convenient way of writing this repeating pattern is to put a bar over the first occurrence of the repeating part, so $1/7$ would be written:\\[ 0.\\overline{142857}. \\]\nGiven a rational number consisting of a series of digits, followed by a decimal point, followed by more digits, and then a number indicating how many of the rightmost digits repeat (i.e., the number of digits under the bar), your task is to find the ratio of two integers, in the most reduced form, that represent the same rational number. For example, for the input \u201c$0.142857$ $6$\u201d you should find $1/7$.\n-----Input-----\nThe input will be a single line with two numbers separated by one space. The first number will consist of $1$ to $3$ digits ($0$\u2013$9$), followed by a decimal point, followed by $1$ to $11$ digits ($0$\u2013$9$), representing the decimal form of the number, possibly with leading zeros. The second number will be a positive integer indicating how many of the rightmost digits of the preceding number repeat. The first number will always be greater than $0$. The second number will never be less than $1$ nor larger than the number of digits to the right of the decimal point.\n-----Output-----\nPrint the corresponding fraction in its most reduced form, that is, the fraction with the smallest possible integer values in the numerator and denominator.\n-----Examples-----\nSample Input 1:\n0.142857 6\nSample Output 1:\n1/7\nSample Input 2:\n1.6 1\nSample Output 2:\n5/3\n\ndef",
      "answer": "def fraction(n, d):\n    n = int(n)\n    d = int(d)\n    if n == 0:\n        return \"0/1\"\n    if d == 0:\n        return \"1/0\"\n    if n == 1:\n        return \"1/0\"\n    if d == 1:\n        return \"0/1\"\n    if n == 2:\n        return \"1/0\"\n    if d == 2:\n        return \"0/1\"\n    if n == 3:\n        return \"1/0\"\n    if d == 3:\n        return \"0/1\"\n    if n == 4:\n        return \"1/0\"\n    if d == 4:\n        return \"0/1\"\n    if n == 5:\n        return \"1/0\"\n    if d == 5:\n        return \"0/1\"\n    if n == 6:\n        return \"1/0\"\n    if d == 6:\n        return \"0/1\"\n    if n == 7:\n        return \"1/0\"\n    if d == 7:\n        return \"0/1\"\n    if n == 8:\n        return \"1/0\"\n    if d == 8:\n        return \"0/1\"\n    if n == 9:\n        return \"1/0\"\n    if d == 9:\n        return \"0/1\"\n    if n == 10:\n        return \"1/0\"\n    if d == 10:\n        return \"0/1\"\n    if n == 11:\n        return \"1/0\"\n    if d == 11:\n        return \"0/1\"\n    if n == 12:\n        return \"1/0\"\n    if d == 12:\n        return \"0/1\"\n    if n == 13:\n        return \"1/0\"\n    if d == 13:\n        return \"0/1\"\n    if n == 14:\n        return \"1/0\"\n    if d == 14:\n        return \"0/1\"\n    if n == 15:\n        return \"1/0\"\n    if d == 15:\n        return \"0/1\"\n    if n == 16:\n        return \"1/0\"\n    if d == 16:\n        return \"0/1\"\n    if n == 17:\n        return \"1/0\"\n    if d == 17:\n        return \"0/1\"\n    if n == 18:\n        return \"1/0\"\n    if d == 18:\n        return \"0/1\"\n    if n == 19:\n        return \"1/0\"\n    if d == 19:\n        return \"0/1\"\n    if n == 20:\n        return \"1/0\"\n    if d == 20:\n        return \"0/1\"\n    if n == 21:\n        return \"1/0\"\n    if d == 21:\n        return \"0/1\"\n    if n == 22:\n        return \"1/0\"\n    if d == 22:\n        return \"0/1\"\n    if n == 23:\n        return \"1/0\"\n    if d == 23:\n        return \"0/1\"\n    if n == 24:\n        return \"1/0\"\n    if d == 24:\n        return \"0/1\"\n    if n == 25:\n        return \"1/0\"\n    if d == 25:\n        return \"0/1\"\n    if n == 26:\n        return \"1/0\"\n    if d == 26:\n        return \"0/1\"\n    if n == 27:\n        return \"1/0\"\n    if d == 27:\n        return \"0/1\"\n    if n == 28:\n        return \"1/0\"\n    if d == 28:\n        return \"0/1\"\n    if n == 29:\n        return \"1/0\"\n    if d == 29:\n        return \"0/1\"\n    if n == 30:\n        return \"1/0\"\n    if d == 30:\n        return \"0/1\"\n    if n == 31:\n        return \"1/0\"\n    if d == 31:\n        return \"0/1\"\n    if n == 32:\n        return \"1/0\"\n    if d == 32:\n        return \"0/1\"\n    if n == 33:\n        return \"1",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3217,
      "prompt": "Complete the Python function given the prompt below:\nA $10 \\times 10 \\times 10$ three-dimensional grid of tightly packed cubic atomic energy cells aboard the starship Fiugtuwf is reporting failures on several of its cells. The ship\u2019s engineer must set up enclosures that will contain all of the cells that are reported to be failing, in order to avoid a meltdown. It is imperative that the enclosures be finished in the shortest amount of time, even if that requires some healthy cells to be enclosed along with the defective ones. The enclosures are formed by square panels which fit perfectly between adjacent cells, or can be placed along the sides of the cells on the edges of the grid. Each panel is exactly the size and shape of a face of one of the cubic cells. For full containment, each enclosure must be completely closed. Given the coordinates of each defective cell, report the minimum number of panels required to contain the problem.\n-----Input-----\nEach input will consist of a single test case. Note that your program may be run multiple times on different inputs. Each test case will start with a line with a single integer $n$ ($0 \\le n \\le 1000$) indicating the number of defective cells. Each of the next $n$ lines will hold an $(x,y,z)$ coordinate ($0 \\le x,y,z \\le 9$) indicating the location in the grid of a defective cell. All of the coordinates in a test case will be unique.\n-----Output-----\nOutput a single line with a single integer, indicating the minimum number of panels required to contain the defective cells.\n-----Examples-----\nSample Input 1:\n1\n0 0 0\nSample Output 1:\n6\nSample Input 2:\n2\n0 0 0\n0 0 1\nSample Output 2:\n10\n\ndef",
      "answer": "def enclosures(n, x, y, z):\n    if n == 0:\n        return 0\n    if x == 0 and y == 0 and z == 0:\n        return 1\n    if x == 0 and y == 0 and z == 1:\n        return 2\n    if x == 0 and y == 0 and z == 2:\n        return 3\n    if x == 0 and y == 1 and z == 0:\n        return 4\n    if x == 0 and y == 1 and z == 1:\n        return 5\n    if x == 0 and y == 1 and z == 2:\n        return 6\n    if x == 0 and y == 2 and z == 0:\n        return 7\n    if x == 0 and y == 2 and z == 1:\n        return 8\n    if x == 0 and y == 2 and z == 2:\n        return 9\n    if x == 1 and y == 0 and z == 0:\n        return 10\n    if x == 1 and y == 0 and z == 1:\n        return 11\n    if x == 1 and y == 0 and z == 2:\n        return 12\n    if x == 1 and y == 1 and z == 0:\n        return 13\n    if x == 1 and y == 1 and z == 1:\n        return 14\n    if x == 1 and y == 1 and z == 2:\n        return 15\n    if x == 1 and y == 2 and z == 0:\n        return 16\n    if x == 1 and y == 2 and z == 1:\n        return 17\n    if x == 1 and y == 2 and z == 2:\n        return 18\n    if x == 2 and y == 0 and z == 0:\n        return 19\n    if x == 2 and y == 0 and z == 1:\n        return 20\n    if x == 2 and y == 0 and z == 2:\n        return 21\n    if x == 2 and y == 1 and z == 0:\n        return 22\n    if x == 2 and y == 1 and z == 1:\n        return 23\n    if x == 2 and y == 1 and z == 2:\n        return 24\n    if x == 2 and y == 2 and z == 0:\n        return 25\n    if x == 2 and y == 2 and z == 1:\n        return 26\n    if x == 2 and y == 2 and z == 2:\n        return 27\n    if x == 3 and y == 0 and z == 0:\n        return 28\n    if x == 3 and y == 0 and z == 1:\n        return 29\n    if x == 3 and y == 0 and z == 2:\n        return 30\n    if x == 3 and y == 1 and z == 0:\n        return 31\n    if x == 3 and y == 1 and z == 1:\n        return 32\n    if x == 3 and y == 1 and z == 2:\n        return 33\n    if x == 3 and y == 2 and z == 0:\n        return 34\n    if x == 3 and y == 2 and z == 1:\n        return 35\n    if x == 3 and y == 2 and z == 2:\n        return 36\n    if x == 4 and y == 0 and z == 0:\n        return 37\n    if x == 4 and y == 0 and z == 1:\n        return 38\n    if x == 4 and y == 0 and z == 2:\n        return 39\n    if x == 4 and y == 1 and z == 0:\n        return 40\n    if x == 4 and y == 1 and z == 1:\n        return 41\n    if x == 4 and y == 1 and z == 2:\n        return 42\n    if x == 4 and y == 2 and z == 0:\n        return 43\n    if x == 4 and y == 2 and z == 1:\n        return 44\n    if x == 4 and y == 2 and z == 2:\n        return 45\n    if x == 5 and y == 0 and z == 0:\n        return 46\n    if x == 5 and y == 0 and z == 1:\n        return 47\n    if x == 5 and y == 0 and z == 2:\n        return 48\n    if x == 5 and y == 1 and z == 0:\n        return 49\n    if x == 5 and y == 1 and z == 1:\n        return 50\n    if x == 5 and y == 1 and z == 2:\n        return 51\n    if x == 5 and y == 2 and z == 0:\n        return 52\n    if x == 5 and y == 2 and z == 1",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3218,
      "prompt": "Complete the Python function given the prompt below:\nYou are given a hexagonal grid with $n$ rows, where $n$ is an odd integer. The rows are numbered $1$ to $n$ from top to bottom. The odd-numbered rows have exactly $n$ hexagons, and the even-numbered rows have exactly $n-1$ hexagons. Let\u2019s denote the $j$-th hexagon in the $i$-th row by $(i, j)$.\nFor example, the below figure shows a hexagonal grid with $n = 3$.\nLet\u2019s assign an integer between $-1$ and $6$ to each hexagon. Let\u2019s $a_{i, j}$ be the integer assigned to the hexagon $(i, j)$. The following figure shows one example assignment:\nLet\u2019s color some edges of some hexagons. A coloring is valid iff it satisfies the following conditions:\n - For every pair of valid indices $i$ and $j$, either $a_{i, j} = -1$, or $a_{i, j}$ is equal to the number of colored edges of the hexagon $(i, j)$.\n - The colored edges form one or more loops. Each loop must not self-intersect. Two different loops must not share any vertices or edges.\nThe following figure shows a valid coloring:\nThe following two figures show two invalid colorings. The one on the left does not satisfy the $1$st condition, and the one on the right does not satisfy the $2$nd condition.\nHow many valid colorings are there?\n-----Input-----\nThe first line of the input contains a single integer $n$ ($n$ is an odd integer between $1$ and $7$). The next $n$ lines contain the numbers $a_{i, j}$ $(-1 \\le a_{i, j} \\le 6)$. The $i$-th line contains exactly $n$ integers if $i$ is odd, and $n-1$ integers otherwise.\n-----Output-----\nPrint a single integer\u00a0\u2014 the number of valid colorings.\n-----Explanation of the sample input-----\nThe first sample was shown in the above figures.\nThe second example is shown below:\n-----Examples-----\nSample Input 1:\n3\n-1 2 -1\n2 2\n1 -1 1\nSample Output 1:\n1\nSample Input 2:\n7\n-1 4 5 1 0 -1 -1\n-1 3 2 0 0 1\n-1 4 -1 1 0 -1 -1\n1 3 4 2 2 4\n0 2 3 -1 4 4 2\n-1 4 4 3 3 2\n1 -1 -1 -1 4 2 -1\nSample Output 2:\n1\n\ndef",
      "answer": "def hex_grid(n):\n    grid = [[-1] * (n + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1, 2):\n        for j in range(1, n + 1, 2):\n            grid[i][j] = 1\n    for i in range(1, n + 1, 2):\n        for j in range(1, n + 1, 2):\n            grid[i][j] = grid[i - 1][j] + grid[i][j - 1]\n    return grid\n\n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3219,
      "prompt": "Complete the Python function given the prompt below:\nAs you might know, the memory in current computers consists of a sequence of bits and each of these bits can be in two possible states. Megan\u2019s company has now developed a great new memory unit where every bit has three possible states. This would all be great, if it wasn\u2019t for Megan\u2019s boss. The boss wants her to write a program for this memory unit for integer operations, but instead of using ternary base (i.e., base 3), Megan\u2019s boss decided that the bits should be interpreted as a binary number, with the exception that the digit 2 is allowed as well. \nFor example, $201$ in this strange representation is $2\\cdot 2^2+0\\cdot 2^1+ 1\\cdot 2^0=9$. Some numbers are shorter in this representation, but for other numbers it doesn\u2019t help at all \u2013 for instance, $15$ is $1111$ in binary and this is the only way of writing it in the new representation as well.\nIt seems that there is nothing else that Megan can do to convince her boss. Since she likes math, she started wondering about different representations of the same number. For example 9 has three representations: $201, 121$ and $1001$. Can you help her figure out how many representations a given number has?\n-----Input-----\nThe first and only line of the input contains a string consisting of \u20190\u2019 and \u20191\u2019. The string represents a non-negative integer $N$ in binary. The leftmost bit is the most significant one. The number of bits will be at least $1$ and at most $10000$.\n-----Output-----\nOutput a line giving the number of different binary representations of $N$ that also use $2$ as a digit. Since this number might be big, output the remainder modulo $1000000009$.\n-----Examples-----\nSample Input 1:\n1001\nSample Output 1:\n3\nSample Input 2:\n1111\nSample Output 2:\n1\n\ndef",
      "answer": "def count_binary_representations(n):\n    count = 0\n    while n:\n        count += 1\n        n = n & (n - 1)\n    return count\n\n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3220,
      "prompt": "Complete the Python function given the prompt below:\nIn the USA, a type of dance called square dance is very popular. Four dancing pairs stand as to form a square. A caller then gives a series of moves that the dancers should perform, moving around on the floor.\nAmerican wizards, however, find square dancing a bit simplistic. Instead, they have come up with a kind of dance called circle dancing. In the dance, $N$ wizards stand in a circle numbered $1$ through $N$ clockwise. A caller then gives a series of moves that the dancers should perform, moving around on the floor. Each such move has the following form. Every wizard is given a number $p_ i$. They then all teleport simultaneously $p_ i$ positions clockwise or counterclockwise in the ring. For example, given the number 1 they should move to one of the two places immediately adjacent to their current position.\nAfter a move is performed, no two wizards may occupy the same position. This means a certain amount of coordination is required when teleporting. Can you tell the wizards how they should teleport in order to not collide with each other?\n-----Input-----\nThe first line of input contains a single integer $N$ ($1 \\le N \\le 300000$), the number of wizards. The next line contains the $N$ integers $p_1, p_2, \\dots, p_ N$ ($0 \\le p_ i < N$). The wizards are numbered $1, 2, \\dots, N$ clockwise in the circle.\n-----Output-----\nOutput a string with $N$ characters. The $i$\u2019th character should be L if the $i$\u2019th wizard should teleport clockwise, and R if he should teleport counterclockwise. If there are multiple valid solutions, output the lexicographically smallest one. If there is no valid solution, output no dance.\n-----Examples-----\nSample Input 1:\n3\n1 1 1\nSample Output 1:\nLLL\nSample Input 2:\n5\n1 2 2 1 2\nSample Output 2:\nLLRLR\n\ndef",
      "answer": "def circle_dance(n):\n    return ''.join(['L' if i == 1 else 'R' for i in range(1, n + 1)])\n\n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3221,
      "prompt": "Complete the Python function given the prompt below:\nMr. G is one of the most excellent students in North River High School for Gifted Students. Despite having impressive performance in a programming competition and making it to the next round, he was not totally happy since his best friend did not get such a great achievement. In order to appease the poor girl, Mr. G has to deal with a very hard challenge: Buy her some ginger candies!\nThe road system in North River province consists of $N$ junctions and $M$ bidirectional roads. Junctions are numbered from $1$ to $N$, and roads are numbered from $1$ to $M$, inclusive. On the $i^{th}$ road, which connects two junctions $u_ i$ and $v_ i$, there is a shop in which Mr. G can buy $c_ i$ ginger candies. No two roads have the same number of candies. Mr. G wants to meet his friend at some junction, travel through several roads without visiting the same road twice, buy all candies on those roads, and finish at the same junction where he starts.\nUsing his humble knowledge in Physics, Mr. G calculates the amount of energy he needs to spend as follow: Let $L$ be the maximum number of candies he buys in one road, and $K$ be the number of roads he passes through. The amount of energy he needs to spend is $L^2+\\alpha K$, where $\\alpha $ is some constant he has already known.\nHelp him to satisfy his friend with the minimum amount of energy.\n-----Input-----\n - The first line contains three integers $N$, $M$, $\\alpha $, the number of junctions, the number of roads and the predefined constant Mr. G uses to calculate the amount of energy, respectively ($1 \\leq N \\leq 10^5$, $1 \\leq M \\leq 2 \\times 10^5$, $1 \\leq \\alpha \\leq 20$).\n - In the next $M$ lines, each contains three integers $u$, $v$, $c$ ($1 \\leq u \\leq N$, $1 \\leq v \\leq N$, $10^6 \\leq c \\leq 10^9$), meaning that there is a road connecting two junctions $u$ and $v$, which sells $c$ ginger candies.\nIt is guaranteed that all $c$ in the above $M$ lines are distinct.\n-----Output-----\nWrite one integer denoting the minimum amount of energy Mr. G has to spend. If there is no route satisfying the condition, output Poor girl instead.\n-----Examples-----\nSample Input 1:\n7 7 10\n1 2 1000000\n2 3 2000000\n3 4 3000000\n4 5 4000000\n5 6 5000000\n6 7 6000000\n7 1 7000000\nSample Output 1:\n49000000000070\nSample Input 2:\n6 6 7\n1 3 1000000\n3 5 3000000\n5 1 5000000\n2 4 2000000\n4 6 4000000\n6 2 6000000\nSample Output 2:\n25000000000021\n\ndef",
      "answer": "def find_min_energy(n, m, alpha, candies):\n    # your code here\n    return 0\n\n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3222,
      "prompt": "Complete the Python function given the prompt below:\nEmil loves his electric moped. He loves it so much that he rides it through rain, snow, wind and ice. Some day, he will be able to fly with it. This weekend, Emil is on a vacation in New York. He has compiled a list of cool places to visit, as well as a list of all one-way streets between these places, and now it is time for some sightseeing! \nOne sightseeing trip consists of $S$ places and exactly $S$ streets which connect them. He starts by travelling to one of these places by subway, with his moped on his back. Then he starts riding his moped to each place of the trip in turn, finally returning to where he started in the current trip. Then he goes back to the subway, with his moped on his back, and goes for the next trip. He does this until he has enjoyed all of the trips.\nSince it\u2019s very hard to determine if Emil can visit all of the places he wants to see in a single trip of this kind, he has instead asked you to help him split all of the $N$ places in town into a number of trips, such that each place in town is included in exactly one trip.\nGiven all the places Emil wants to see and the streets of the city connecting these, construct a list of trips fulfilling these conditions, or determine that it is impossible. Each trip must use at least one street, and there may be loops, i.e. streets with a start and end point in the same place.\n-----Input-----\nThe first line of input consists of two integers $1\\le N \\le 100$ and $0 \\le M \\le 10000$, the number of places Emil wants to visit and the number of roads respectively. The places are numbered $0$ to $N-1$.\nThe next $M$ lines consists of two integers $0 \\le f, t \\le N-1$, denoting that there is a one-way street from place $f$ to place $t$.\n-----Output-----\nOutput begins with an integer $N$ on its own line, the number of trips made. Then, for every trip, output a line with the number of places included in the trip $K$, followed by $K$ lines, containing the numbers of said places in order of visit (the last place which Emil returns to should not be output twice).\nIf the places can\u2019t be split into trips, Emil instead goes bowling. Then just output the string \"Yeah!\". If there are several solutions, output any of them.\n-----Examples-----\nSample Input 1:\n4 4\n0 1\n1 0\n2 3\n3 2\nSample Output 1:\n2\n2\n0\n1\n2\n2\n3\nSample Input 2:\n4 4\n0 1\n1 0\n2 3\n3 3\nSample Output 2:\nYeah!\n\ndef",
      "answer": "def find_trips(places, roads):\n    # Write your code here\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips\n    # return the number of trips",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3223,
      "prompt": "Complete the Python function given the prompt below:\nAnton, a young mathematician, comes from the cold region that is northern Sweden. He likes it there, since there are a lot of trees. Lately, however, this has made him a bit sad, since he can\u2019t see the forest because of all the trees. Therefore, he has asked you to construct a forest.\nSince Anton is a mathematician, he doesn\u2019t want just any forest \u2013 he wants a graph theoretical forest. A forest is a (possibly disconnected) graph without cycles \u2013 i.e., a union of disjoint trees.\nAnton has already decided how many vertices he wants in his forest, as well as the degree of each vertex. Now, it is your task to construct a forest according to his wishes, or determine that no such forest exists.\n-----Input-----\nThe first line of the input is a single integer $0 \\le V \\le 100$, the number of vertices in his forest.\nThe next line contains $V$ integers $d_1, d_2, \\ldots, d_ V$ ($0 \\le d_ i \\le 100$ for all $i$). These are the degrees which Anton wants the vertices to have.\n-----Output-----\nThe first line of output should be IMPOSSIBLE if it is impossible to construct such a forest.\nOtherwise, the first line should be POSSIBLE. The next lines should then contain two integers $1 \\le a, b \\le V$ each, denoting an edge between vertices $a$ and $b$. Note that the vertex with number $a$ must have exactly degree $d_ a$, i.e. the ordering of the vertices is important.\n-----Examples-----\nSample Input 1:\n3\n1 1 2\nSample Output 1:\nPOSSIBLE\n1 3\n2 3\nSample Input 2:\n2\n1 2\nSample Output 2:\nIMPOSSIBLE\n\ndef",
      "answer": "def construct_forest(V, d):\n    graph = [[] for _ in range(V)]\n    for i in range(V):\n        for j in range(d[i]):\n            graph[i].append(i + 1)\n    return graph\n\n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3224,
      "prompt": "Complete the Python function given the prompt below:\nYou are given four points in space (i.e.\u00a0$\\mathbb {R}^3$). The points are not coplanar. In other words, there is no plane in space that contains all four points.\nIt is guaranteed that under such assumption, there exists a (unique) sphere whose surface touches all four points. Find the coordinates of the centre of the sphere.\n-----Input-----\nThe input consists of four lines. Line $i$ consists of three integers $x_ i$, $y_ i$, $z_ i$, representing the coordinates $(x_ i, y_ i, z_ i)$ of point $i$.\nFor all test cases, $-100 \\leq x_ i, y_ i, z_ i \\leq 100$.\n-----Output-----\nOutput three numbers (not necessarily integers) $x_ c$, $y_ c$, $z_ c$, representing the coordinates $(x_ c, y_ c, z_ c)$ of the centre of the sphere that touches all four points.\nLet the jury\u2019s answer be $(x_ j, y_ j, z_ j)$. Your answer will be considered as correct if and only if\\[ \\sqrt {(x_ j - x_ c)^2 + (y_ j - y_ c)^2 + (z_ j - z_ c)^2} < 10^{-4}. \\]\n-----Examples-----\nSample Input 1:\n0 0 0\n1 0 0\n0 1 0\n0 0 1\nSample Output 1:\n0.5 0.5 0.5\nSample Input 2:\n-1 0 0\n1 0 0\n0 1 0\n0 0 1\nSample Output 2:\n0.0 0.0 -0.0\n\ndef",
      "answer": "def sphere(x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4):\n    x_c = (x1 + x2 + x3 + x4) / 4\n    y_c = (y1 + y2 + y3 + y4) / 4\n    z_c = (z1 + z2 + z3 + z4) / 4\n    return x_c, y_c, z_c\n\n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3225,
      "prompt": "Complete the Python function given the prompt below:\nA very popular position has just opened up at Poodle Inc. Candidates have formed a queue while they wait for their turn to be interviewed.\nCompetition is fierce and each candidate knows that they will not be selected if another candidate is strictly better than them. Every minute, each candidate looks at the resum\u00e9 of candidates who are currently adjacent to them in the queue (ahead and behind). If at least one of the neighbour\u2019s resum\u00e9\u2019s perceived value is strictly greater than their resum\u00e9\u2019s perceived value, they leave the queue since they do not want to waste their time. The candidates all look at their neighbor\u2019s resum\u00e9 simultaneously, and then some candidates leave the queue simultaneously.\nThis process continues until no more candidates leave the queue. Determine the number of minutes that pass while this process takes place. Report the values of the candidates that leave the queue in each round. Also report the final state of the queue.\n-----Input-----\nThe first line of input contains a single integer $N$ ($1 \\leq N \\leq 100000$), which is the number of candidates.\nThe second line contains $N$ integers $v_1, \\ldots, v_ N$ ($0 \\leq v_ i \\leq 10^9$ for each $1 \\leq i \\leq N$), where $v_ i$ is the perceived value of the $i^\\textrm {th}$ candidate.\n-----Output-----\nDisplay $M$, the number of minutes taken by this process. Then display $M$ lines. The $i^\\textrm {th}$ line should contain the perceived values of the candidates who left the queue in the $i^\\textrm {th}$ minute in the same relative order that they appeared in the queue. Finally display a line indicating the final list of perceived values in the queue after candidates no longer leave it.\n-----Examples-----\nSample Input 1:\n10\n3 6 2 3 2 2 2 1 5 6\nSample Output 1:\n2\n3 2 2 1 5\n3 2 2\n6 6\nSample Input 2:\n3\n17 17 17\nSample Output 2:\n0\n17 17 17\n\ndef",
      "answer": "def solve(n, v):\n    v.sort()\n    v.reverse()\n    for i in range(n):\n        if v[i] > v[i+1]:\n            return i+1\n    return n\n\n",
      "difficulty": "competition",
      "split": "test"
   }
]