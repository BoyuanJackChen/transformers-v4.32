[
   {
      "task_id": 4400,
      "prompt": "Complete the Python function given the prompt below:\nWe have weather records at AtCoder Town for some consecutive three days. A string of length 3, S, represents the records - if the i-th character is S, it means it was sunny on the i-th day; if that character is R, it means it was rainy on that day.\nFind the maximum number of consecutive rainy days in this period.\n-----Constraints-----\n - |S| = 3\n - Each character of S is S or R.\n-----Input-----\nInput is given from Standard Input in the following format:\nS\n-----Output-----\nPrint the maximum number of consecutive rainy days in the period.\n-----Sample Input-----\nRRS\n-----Sample Output-----\n2\nWe had rain on the 1-st and 2-nd days in the period. Here, the maximum number of consecutive rainy days is 2, so we should print 2.\n\ndef",
      "answer": "def max_rainy_days(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i] == 'R':\n            count += 1\n        else:\n            count = 0\n        if count > max_rainy_days:\n            max_rainy_days = count\n    return max_rainy_days\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4401,
      "prompt": "Complete the Python function given the prompt below:\nWe have three boxes A, B, and C, each of which contains an integer.\nCurrently, the boxes A, B, and C contain the integers X, Y, and Z, respectively.\nWe will now do the operations below in order. Find the content of each box afterward.  \n - Swap the contents of the boxes A and B\n - Swap the contents of the boxes A and C\n-----Constraints-----\n - 1 \\leq X,Y,Z \\leq 100\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nX Y Z\n-----Output-----\nPrint the integers contained in the boxes A, B, and C, in this order, with space in between.\n-----Sample Input-----\n1 2 3\n-----Sample Output-----\n3 1 2\nAfter the contents of the boxes A and B are swapped, A, B, and C contain 2, 1, and 3, respectively.\nThen, after the contents of A and C are swapped, A, B, and C contain 3, 1, and 2, respectively.\n\ndef",
      "answer": "def swap_boxes(x, y, z):\n    a = x\n    b = y\n    c = z\n    a, b, c = b, a, c\n    print(a, b, c)\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4402,
      "prompt": "Complete the Python function given the prompt below:\nTakahashi, who is A years old, is riding a Ferris wheel.\nIt costs B yen (B is an even number) to ride the Ferris wheel if you are 13 years old or older, but children between 6 and 12 years old (inclusive) can ride it for half the cost, and children who are 5 years old or younger are free of charge. (Yen is the currency of Japan.)\nFind the cost of the Ferris wheel for Takahashi.\n-----Constraints-----\n - 0 \u2264 A \u2264 100\n - 2 \u2264 B \u2264 1000\n - B is an even number.\n-----Input-----\nInput is given from Standard Input in the following format:\nA B\n-----Output-----\nPrint the cost of the Ferris wheel for Takahashi.\n-----Sample Input-----\n30 100\n-----Sample Output-----\n100\nTakahashi is 30 years old now, and the cost of the Ferris wheel is 100 yen.\n\ndef",
      "answer": "def f(a,b):\n    if a>=13 and a<=12:\n        if a%2==0:\n            return (b/2)\n        else:\n            return (b/2)\n    elif a>=6 and a<=12:\n        return (b/2)\n    else:\n        return (b)\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4403,
      "prompt": "Complete the Python function given the prompt below:\nThere is always an integer in Takahashi's mind.\nInitially, the integer in Takahashi's mind is 0. Takahashi is now going to eat four symbols, each of which is + or -. When he eats +, the integer in his mind increases by 1; when he eats -, the integer in his mind decreases by 1.\nThe symbols Takahashi is going to eat are given to you as a string S. The i-th character in S is the i-th symbol for him to eat.\nFind the integer in Takahashi's mind after he eats all the symbols.\n-----Constraints-----\n - The length of S is 4.\n - Each character in S is + or -.\n-----Input-----\nInput is given from Standard Input in the following format:\nS\n-----Output-----\nPrint the integer in Takahashi's mind after he eats all the symbols.\n-----Sample Input-----\n+-++\n-----Sample Output-----\n2\n - Initially, the integer in Takahashi's mind is 0.\n - The first integer for him to eat is +. After eating it, the integer in his mind becomes 1.\n - The second integer to eat is -. After eating it, the integer in his mind becomes 0.\n - The third integer to eat is +. After eating it, the integer in his mind becomes 1.\n - The fourth integer to eat is +. After eating it, the integer in his mind becomes 2.\nThus, the integer in Takahashi's mind after he eats all the symbols is 2.\n\ndef",
      "answer": "def takahashi(s):\n    if s == '+':\n        return 1\n    elif s == '-':\n        return 0\n    else:\n        return -1\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4404,
      "prompt": "Complete the Python function given the prompt below:\nYou are given a string S as input. This represents a valid date in the year 2019 in the yyyy/mm/dd format. (For example, April 30, 2019 is represented as 2019/04/30.)\nWrite a program that prints Heisei if the date represented by S is not later than April 30, 2019, and prints TBD otherwise.\n-----Constraints-----\n - S is a string that represents a valid date in the year 2019 in the yyyy/mm/dd format.\n-----Input-----\nInput is given from Standard Input in the following format:\nS\n-----Output-----\nPrint Heisei if the date represented by S is not later than April 30, 2019, and print TBD otherwise.\n-----Sample Input-----\n2019/04/30\n-----Sample Output-----\nHeisei\n\n\ndef",
      "answer": "def main():\n    s = input()\n    if s > '2019/04/30':\n        print('Heisei')\n    else:\n        print('TBD')\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4405,
      "prompt": "Complete the Python function given the prompt below:\nPolycarp has prepared $n$ competitive programming problems. The topic of the $i$-th problem is $a_i$, and some problems' topics may coincide.\nPolycarp has to host several thematic contests. All problems in each contest should have the same topic, and all contests should have pairwise distinct topics. He may not use all the problems. It is possible that there are no contests for some topics.\nPolycarp wants to host competitions on consecutive days, one contest per day. Polycarp wants to host a set of contests in such a way that:  number of problems in each contest is exactly twice as much as in the previous contest (one day ago), the first contest can contain arbitrary number of problems;  the total number of problems in all the contests should be maximized. \nYour task is to calculate the maximum number of problems in the set of thematic contests. Note, that you should not maximize the number of contests.\n-----Input-----\nThe first line of the input contains one integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) \u2014 the number of problems Polycarp has prepared.\nThe second line of the input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^9$) where $a_i$ is the topic of the $i$-th problem.\n-----Output-----\nPrint one integer \u2014 the maximum number of problems in the set of thematic contests.\n-----Examples-----\nInput\n18\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10\nOutput\n14\nInput\n10\n6 6 6 3 6 1000000000 3 3 6 6\nOutput\n9\nInput\n3\n1337 1337 1337\nOutput\n3\n-----Note-----\nIn the first example the optimal sequence of contests is: $2$ problems of the topic $1$, $4$ problems of the topic $2$, $8$ problems of the topic $10$.\nIn the second example the optimal sequence of contests is: $3$ problems of the topic $3$, $6$ problems of the topic $6$.\nIn the third example you can take all the problems with the topic $1337$ (the number of such problems is $3$ so the answer is $3$) and host a single contest.\n\ndef",
      "answer": "def get_max_problems(n, topics):\n    # your code here\n    return max(len(topics) // 2, len(topics))\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4406,
      "prompt": "Complete the Python function given the prompt below:\nThe only difference between easy and hard versions are constraints on $n$ and $k$.\nYou are messaging in one of the popular social networks via your smartphone. Your smartphone can show at most $k$ most recent conversations with your friends. Initially, the screen is empty (i.e. the number of displayed conversations equals $0$).\nEach conversation is between you and some of your friends. There is at most one conversation with any of your friends. So each conversation is uniquely defined by your friend.\nYou (suddenly!) have the ability to see the future. You know that during the day you will receive $n$ messages, the $i$-th message will be received from the friend with ID $id_i$ ($1 \\le id_i \\le 10^9$).\nIf you receive a message from $id_i$ in the conversation which is currently displayed on the smartphone then nothing happens: the conversations of the screen do not change and do not change their order, you read the message and continue waiting for new messages.\nOtherwise (i.e. if there is no conversation with $id_i$ on the screen):  Firstly, if the number of conversations displayed on the screen is $k$, the last conversation (which has the position $k$) is removed from the screen.  Now the number of conversations on the screen is guaranteed to be less than $k$ and the conversation with the friend $id_i$ is not displayed on the screen.  The conversation with the friend $id_i$ appears on the first (the topmost) position on the screen and all the other displayed conversations are shifted one position down. \nYour task is to find the list of conversations (in the order they are displayed on the screen) after processing all $n$ messages.\n-----Input-----\nThe first line of the input contains two integers $n$ and $k$ ($1 \\le n, k \\le 200)$ \u2014 the number of messages and the number of conversations your smartphone can show.\nThe second line of the input contains $n$ integers $id_1, id_2, \\dots, id_n$ ($1 \\le id_i \\le 10^9$), where $id_i$ is the ID of the friend which sends you the $i$-th message.\n-----Output-----\nIn the first line of the output print one integer $m$ ($1 \\le m \\le min(n, k)$) \u2014 the number of conversations shown after receiving all $n$ messages.\nIn the second line print $m$ integers $ids_1, ids_2, \\dots, ids_m$, where $ids_i$ should be equal to the ID of the friend corresponding to the conversation displayed on the position $i$ after receiving all $n$ messages.\n-----Examples-----\nInput\n7 2\n1 2 3 2 1 3 2\nOutput\n2\n2 1 \nInput\n10 4\n2 3 3 1 1 2 1 2 3 3\nOutput\n3\n1 3 2 \n-----Note-----\nIn the first example the list of conversations will change in the following way (in order from the first to last message):  $[]$;  $[1]$;  $[2, 1]$;  $[3, 2]$;  $[3, 2]$;  $[1, 3]$;  $[1, 3]$;  $[2, 1]$. \nIn the second example the list of conversations will change in the following way:  $[]$;  $[2]$;  $[3, 2]$;  $[3, 2]$;  $[1, 3, 2]$;  and then the list will not change till the end.\n\ndef",
      "answer": "def easy_hard(n, k):\n    # your code here\n    return 0\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4407,
      "prompt": "Complete the Python function given the prompt below:\nPolycarp has $n$ coins, the value of the $i$-th coin is $a_i$. It is guaranteed that all the values are integer powers of $2$ (i.e. $a_i = 2^d$ for some non-negative integer number $d$).\nPolycarp wants to know answers on $q$ queries. The $j$-th query is described as integer number $b_j$. The answer to the query is the minimum number of coins that is necessary to obtain the value $b_j$ using some subset of coins (Polycarp can use only coins he has). If Polycarp can't obtain the value $b_j$, the answer to the $j$-th query is -1.\nThe queries are independent (the answer on the query doesn't affect Polycarp's coins).\n-----Input-----\nThe first line of the input contains two integers $n$ and $q$ ($1 \\le n, q \\le 2 \\cdot 10^5$) \u2014 the number of coins and the number of queries.\nThe second line of the input contains $n$ integers $a_1, a_2, \\dots, a_n$ \u2014 values of coins ($1 \\le a_i \\le 2 \\cdot 10^9$). It is guaranteed that all $a_i$ are integer powers of $2$ (i.e. $a_i = 2^d$ for some non-negative integer number $d$).\nThe next $q$ lines contain one integer each. The $j$-th line contains one integer $b_j$ \u2014 the value of the $j$-th query ($1 \\le b_j \\le 10^9$).\n-----Output-----\nPrint $q$ integers $ans_j$. The $j$-th integer must be equal to the answer on the $j$-th query. If Polycarp can't obtain the value $b_j$ the answer to the $j$-th query is -1.\n-----Example-----\nInput\n5 4\n2 4 8 2 4\n8\n5\n14\n10\nOutput\n1\n-1\n3\n2\n\ndef",
      "answer": "def coin_change(coins, amount):\n    dp = [0] * (amount + 1)\n    dp[0] = 1\n    for coin in coins:\n        for i in range(coin, amount + 1):\n            dp[i] += dp[i - coin]\n    return dp[amount]\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4408,
      "prompt": "Complete the Python function given the prompt below:\nThere are $n$ players sitting at the card table. Each player has a favorite number. The favorite number of the $j$-th player is $f_j$.\nThere are $k \\cdot n$ cards on the table. Each card contains a single integer: the $i$-th card contains number $c_i$. Also, you are given a sequence $h_1, h_2, \\dots, h_k$. Its meaning will be explained below.\nThe players have to distribute all the cards in such a way that each of them will hold exactly $k$ cards. After all the cards are distributed, each player counts the number of cards he has that contains his favorite number. The joy level of a player equals $h_t$ if the player holds $t$ cards containing his favorite number. If a player gets no cards with his favorite number (i.e., $t=0$), his joy level is $0$.\nPrint the maximum possible total joy levels of the players after the cards are distributed. Note that the sequence $h_1, \\dots, h_k$ is the same for all the players.\n-----Input-----\nThe first line of input contains two integers $n$ and $k$ ($1 \\le n \\le 500, 1 \\le k \\le 10$) \u2014 the number of players and the number of cards each player will get.\nThe second line contains $k \\cdot n$ integers $c_1, c_2, \\dots, c_{k \\cdot n}$ ($1 \\le c_i \\le 10^5$) \u2014 the numbers written on the cards.\nThe third line contains $n$ integers $f_1, f_2, \\dots, f_n$ ($1 \\le f_j \\le 10^5$) \u2014 the favorite numbers of the players.\nThe fourth line contains $k$ integers $h_1, h_2, \\dots, h_k$ ($1 \\le h_t \\le 10^5$), where $h_t$ is the joy level of a player if he gets exactly $t$ cards with his favorite number written on them. It is guaranteed that the condition $h_{t - 1} < h_t$ holds for each $t \\in [2..k]$.\n-----Output-----\nPrint one integer \u2014 the maximum possible total joy levels of the players among all possible card distributions.\n-----Examples-----\nInput\n4 3\n1 3 2 8 5 5 8 2 2 8 5 2\n1 2 2 5\n2 6 7\nOutput\n21\nInput\n3 3\n9 9 9 9 9 9 9 9 9\n1 2 3\n1 2 3\nOutput\n0\n-----Note-----\nIn the first example, one possible optimal card distribution is the following:  Player $1$ gets cards with numbers $[1, 3, 8]$;  Player $2$ gets cards with numbers $[2, 2, 8]$;  Player $3$ gets cards with numbers $[2, 2, 8]$;  Player $4$ gets cards with numbers $[5, 5, 5]$. \nThus, the answer is $2 + 6 + 6 + 7 = 21$.\nIn the second example, no player can get a card with his favorite number. Thus, the answer is $0$.\n\ndef",
      "answer": "def joy(n, k, c, f, h):\n    # your code here\n    return 0\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4409,
      "prompt": "Complete the Python function given the prompt below:\nYou are given an array $a$ consisting of $n$ integers. You can perform the following operations arbitrary number of times (possibly, zero):\n  Choose a pair of indices $(i, j)$ such that $|i-j|=1$ (indices $i$ and $j$ are adjacent) and set $a_i := a_i + |a_i - a_j|$;  Choose a pair of indices $(i, j)$ such that $|i-j|=1$ (indices $i$ and $j$ are adjacent) and set $a_i := a_i - |a_i - a_j|$. \nThe value $|x|$ means the absolute value of $x$. For example, $|4| = 4$, $|-3| = 3$.\nYour task is to find the minimum number of operations required to obtain the array of equal elements and print the order of operations to do it.\nIt is guaranteed that you always can obtain the array of equal elements using such operations.\nNote that after each operation each element of the current array should not exceed $10^{18}$ by absolute value.\n-----Input-----\nThe first line of the input contains one integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) \u2014 the number of elements in $a$.\nThe second line of the input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($0 \\le a_i \\le 2 \\cdot 10^5$), where $a_i$ is the $i$-th element of $a$.\n-----Output-----\nIn the first line print one integer $k$ \u2014 the minimum number of operations required to obtain the array of equal elements.\nIn the next $k$ lines print operations itself. The $p$-th operation should be printed as a triple of integers $(t_p, i_p, j_p)$, where $t_p$ is either $1$ or $2$ ($1$ means that you perform the operation of the first type, and $2$ means that you perform the operation of the second type), and $i_p$ and $j_p$ are indices of adjacent elements of the array such that $1 \\le i_p, j_p \\le n$, $|i_p - j_p| = 1$. See the examples for better understanding.\nNote that after each operation each element of the current array should not exceed $10^{18}$ by absolute value.\nIf there are many possible answers, you can print any.\n-----Examples-----\nInput\n5\n2 4 6 6 6\nOutput\n2\n1 2 3 \n1 1 2 \nInput\n3\n2 8 10\nOutput\n2\n2 2 1 \n2 3 2 \nInput\n4\n1 1 1 1\nOutput\n0\n\ndef",
      "answer": "def min_operations(a):\n    n = len(a)\n    if n == 1:\n        return 0\n    \n    dp = [[0] * n for _ in range(n)]\n    \n    for i in range(n):\n        dp[i][i] = 0\n    \n    for i in range(n - 1):\n        dp[i][i + 1] = abs(a[i] - a[i + 1])\n    \n    for i in range(n - 2, -1, -1):\n        for j in range(i + 1, n):\n            dp[i][j] = min(dp[i][j], dp[i][j - 1] + abs(a[i] - a[j]))\n    \n    return dp[0][n - 1]\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4410,
      "prompt": "Complete the Python function given the prompt below:\nPolycarp and his friends want to visit a new restaurant. The restaurant has $n$ tables arranged along a straight line. People are already sitting at some tables. The tables are numbered from $1$ to $n$ in the order from left to right. The state of the restaurant is described by a string of length $n$ which contains characters \"1\" (the table is occupied) and \"0\" (the table is empty).\nRestaurant rules prohibit people to sit at a distance of $k$ or less from each other. That is, if a person sits at the table number $i$, then all tables with numbers from $i-k$ to $i+k$ (except for the $i$-th) should be free. In other words, the absolute difference of the numbers of any two occupied tables must be strictly greater than $k$.\nFor example, if $n=8$ and $k=2$, then:  strings \"10010001\", \"10000010\", \"00000000\", \"00100000\" satisfy the rules of the restaurant;  strings \"10100100\", \"10011001\", \"11111111\" do not satisfy to the rules of the restaurant, since each of them has a pair of \"1\" with a distance less than or equal to $k=2$. \nIn particular, if the state of the restaurant is described by a string without \"1\" or a string with one \"1\", then the requirement of the restaurant is satisfied.\nYou are given a binary string $s$ that describes the current state of the restaurant. It is guaranteed that the rules of the restaurant are satisfied for the string $s$.\nFind the maximum number of free tables that you can occupy so as not to violate the rules of the restaurant. Formally, what is the maximum number of \"0\" that can be replaced by \"1\" such that the requirement will still be satisfied?\nFor example, if $n=6$, $k=1$, $s=$\u00a0\"100010\", then the answer to the problem will be $1$, since only the table at position $3$ can be occupied such that the rules are still satisfied.\n-----Input-----\nThe first line contains a single integer $t$ ($1 \\le t \\le 10^4$)\u00a0\u2014 the number of test cases in the test. Then $t$ test cases follow.\nEach test case starts with a line containing two integers $n$ and $k$ ($1 \\le k \\le n \\le 2\\cdot 10^5$)\u00a0\u2014 the number of tables in the restaurant and the minimum allowed distance between two people.\nThe second line of each test case contains a binary string $s$ of length $n$ consisting of \"0\" and \"1\"\u00a0\u2014 a description of the free and occupied tables in the restaurant. The given string satisfy to the rules of the restaurant\u00a0\u2014 the difference between indices of any two \"1\" is more than $k$.\nThe sum of $n$ for all test cases in one test does not exceed $2\\cdot 10^5$.\n-----Output-----\nFor each test case output one integer\u00a0\u2014 the number of tables that you can occupy so as not to violate the rules of the restaurant. If additional tables cannot be taken, then, obviously, you need to output $0$.\n-----Example-----\nInput\n6\n6 1\n100010\n6 2\n000000\n5 1\n10101\n3 1\n001\n2 2\n00\n1 1\n0\nOutput\n1\n2\n0\n1\n1\n1\n-----Note-----\nThe first test case is explained in the statement.\nIn the second test case, the answer is $2$, since you can choose the first and the sixth table.\nIn the third test case, you cannot take any free table without violating the rules of the restaurant.\n\ndef",
      "answer": "def max_tables(n, k, s):\n    # your code here\n    return 0\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4411,
      "prompt": "Complete the Python function given the prompt below:\nThe only difference between easy and hard versions is constraints.\nYou are given $n$ segments on the coordinate axis $OX$. Segments can intersect, lie inside each other and even coincide. The $i$-th segment is $[l_i; r_i]$ ($l_i \\le r_i$) and it covers all integer points $j$ such that $l_i \\le j \\le r_i$.\nThe integer point is called bad if it is covered by strictly more than $k$ segments.\nYour task is to remove the minimum number of segments so that there are no bad points at all.\n-----Input-----\nThe first line of the input contains two integers $n$ and $k$ ($1 \\le k \\le n \\le 2 \\cdot 10^5$) \u2014 the number of segments and the maximum number of segments by which each integer point can be covered.\nThe next $n$ lines contain segments. The $i$-th line contains two integers $l_i$ and $r_i$ ($1 \\le l_i \\le r_i \\le 2 \\cdot 10^5$) \u2014 the endpoints of the $i$-th segment.\n-----Output-----\nIn the first line print one integer $m$ ($0 \\le m \\le n$) \u2014 the minimum number of segments you need to remove so that there are no bad points.\nIn the second line print $m$ distinct integers $p_1, p_2, \\dots, p_m$ ($1 \\le p_i \\le n$) \u2014 indices of segments you remove in any order. If there are multiple answers, you can print any of them.\n-----Examples-----\nInput\n7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9\nOutput\n3\n4 6 7 \nInput\n5 1\n29 30\n30 30\n29 29\n28 30\n30 30\nOutput\n3\n1 4 5 \nInput\n6 1\n2 3\n3 3\n2 3\n2 2\n2 3\n2 3\nOutput\n4\n1 3 5 6\n\ndef",
      "answer": "def remove_bad_points(n, k, segments):\n    points = set()\n    for segment in segments:\n        points.update(range(segment[0], segment[1] + 1))\n    points = sorted(points)\n    points = set(points)\n    points = list(points)\n    points.sort()\n    points = set(points)\n    points = list(points)\n    points = set(points)\n    points = list(points)\n    points = set(points)\n    points = list(points)\n    points = set(points)\n    points = list(points)\n    points = set(points)\n    points = list(points)\n    points = set(points)\n    points = list(points)\n    points = set(points)\n    points = list(points)\n    points = set(points)\n    points = list(points)\n    points = set(points)\n    points = list(points)\n    points = set(points)\n    points = list(points)\n    points = set(points)\n    points = list(points)\n    points = set(points)\n    points = list(points)\n    points = set(points)\n    points = list(points)\n    points = set(points)\n    points = list(points)\n    points = set(points)\n    points = list(points)\n    points = set(points)\n    points = list(points)\n    points = set(points)\n    points = list(points)\n    points = set(points)\n    points = list(points)\n    points = set(points)\n    points = list(points)\n    points = set(points)\n    points = list(points)\n    points = set(points)\n    points = list(points)\n    points = set(points)\n    points = list(points)\n    points = set(points)\n    points = list(points)\n    points = set(points)\n    points = list(points)\n    points = set(points)\n    points = list(points)\n    points = set(points)\n    points = list(points)\n    points = set(points)\n    points = list(points)\n    points = set(points)\n    points = list(points)\n    points = set(points)\n    points = list(points)\n    points = set(points)\n    points = list(points)\n    points = set(points)\n    points = list(points)\n    points = set(points)\n    points = list(points)\n    points = set(points)\n    points = list(points)\n    points = set(points)\n    points = list(points)\n    points = set(points)\n    points = list(points)\n    points = set(points)\n    points = list(points)\n    points = set(points)\n    points = list(points)\n    points = set(points)\n    points = list(points)\n    points = set(points)\n    points = list(points)\n    points = set(points)\n    points = list(points)\n    points = set(points)\n    points = list(points)\n    points = set(points)\n    points = list(points)\n    points = set(points)\n    points = list(points)\n    points = set(points)\n    points = list(points)\n    points = set(points)\n    points = list(points)\n    points = set(points)\n    points = list(points)\n    points = set(points)\n    points = list(points)\n    points = set(points)\n    points = list(points)\n    points = set(points)\n    points = list(points)\n    points = set(points)\n    points = list(points)\n    points = set(points)\n    points = list(points)\n    points = set(points)\n    points = list(points)\n    points = set(points)\n    points = list(points)\n    points = set(points)\n    points = list(points)\n    points = set(points)\n    points = list(points)\n    points = set(points)\n    points = list(points)\n    points = set(points)\n    points = list(points)\n    points = set(points)\n    points = list(points)\n    points = set(points)\n    points = list(points)\n    points = set",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4412,
      "prompt": "Complete the Python function given the prompt below:\nOne important contest will take place on the most famous programming platform (Topforces) very soon!\nThe authors have a pool of $n$ problems and should choose at most three of them into this contest. The prettiness of the $i$-th problem is $a_i$. The authors have to compose the most pretty contest (in other words, the cumulative prettinesses of chosen problems should be maximum possible).\nBut there is one important thing in the contest preparation: because of some superstitions of authors, the prettinesses of problems cannot divide each other. In other words, if the prettinesses of chosen problems are $x, y, z$, then $x$ should be divisible by neither $y$, nor $z$, $y$ should be divisible by neither $x$, nor $z$ and $z$ should be divisible by neither $x$, nor $y$. If the prettinesses of chosen problems are $x$ and $y$ then neither $x$ should be divisible by $y$ nor $y$ should be divisible by $x$. Any contest composed from one problem is considered good.\nYour task is to find out the maximum possible total prettiness of the contest composed of at most three problems from the given pool.\nYou have to answer $q$ independent queries.\nIf you are Python programmer, consider using PyPy instead of Python when you submit your code.\n-----Input-----\nThe first line of the input contains one integer $q$ ($1 \\le q \\le 2 \\cdot 10^5$) \u2014 the number of queries.\nThe first line of the query contains one integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) \u2014 the number of problems.\nThe second line of the query contains $n$ integers $a_1, a_2, \\dots, a_n$ ($2 \\le a_i \\le 2 \\cdot 10^5$), where $a_i$ is the prettiness of the $i$-th problem.\nIt is guaranteed that the sum of $n$ over all queries does not exceed $2 \\cdot 10^5$.\n-----Output-----\nFor each query print one integer \u2014 the maximum possible cumulative prettiness of the contest composed of at most three problems from the given pool of problems in the query.\n-----Example-----\nInput\n3\n4\n5 6 15 30\n4\n10 6 30 15\n3\n3 4 6\nOutput\n30\n31\n10\n\ndef",
      "answer": "def solve(n, a):\n    a.sort()\n    a.reverse()\n    return sum(a)\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4413,
      "prompt": "Complete the Python function given the prompt below:\nYou are a coach of a group consisting of $n$ students. The $i$-th student has programming skill $a_i$. All students have distinct programming skills. You want to divide them into teams in such a way that:  No two students $i$ and $j$ such that $|a_i - a_j| = 1$ belong to the same team (i.e. skills of each pair of students in the same team have the difference strictly greater than $1$);  the number of teams is the minimum possible. \nYou have to answer $q$ independent queries.\n-----Input-----\nThe first line of the input contains one integer $q$ ($1 \\le q \\le 100$) \u2014 the number of queries. Then $q$ queries follow.\nThe first line of the query contains one integer $n$ ($1 \\le n \\le 100$) \u2014 the number of students in the query. The second line of the query contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 100$, all $a_i$ are distinct), where $a_i$ is the programming skill of the $i$-th student.\n-----Output-----\nFor each query, print the answer on it \u2014 the minimum number of teams you can form if no two students $i$ and $j$ such that $|a_i - a_j| = 1$ may belong to the same team (i.e. skills of each pair of students in the same team has the difference strictly greater than $1$)\n-----Example-----\nInput\n4\n4\n2 10 1 20\n2\n3 6\n5\n2 3 4 99 100\n1\n42\nOutput\n2\n1\n2\n1\n-----Note-----\nIn the first query of the example, there are $n=4$ students with the skills $a=[2, 10, 1, 20]$. There is only one restriction here: the $1$-st and the $3$-th students can't be in the same team (because of $|a_1 - a_3|=|2-1|=1$). It is possible to divide them into $2$ teams: for example, students $1$, $2$ and $4$ are in the first team and the student $3$ in the second team.\nIn the second query of the example, there are $n=2$ students with the skills $a=[3, 6]$. It is possible to compose just a single team containing both students.\n\ndef",
      "answer": "def minTeams(n, a):\n    a.sort()\n    count = 0\n    for i in range(len(a)):\n        if abs(a[i] - a[i-1]) == 1:\n            count += 1\n    return count\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4414,
      "prompt": "Complete the Python function given the prompt below:\nYou have $a$ coins of value $n$ and $b$ coins of value $1$. You always pay in exact change, so you want to know if there exist such $x$ and $y$ that if you take $x$ ($0 \\le x \\le a$) coins of value $n$ and $y$ ($0 \\le y \\le b$) coins of value $1$, then the total value of taken coins will be $S$.\nYou have to answer $q$ independent test cases.\n-----Input-----\nThe first line of the input contains one integer $q$ ($1 \\le q \\le 10^4$) \u2014 the number of test cases. Then $q$ test cases follow.\nThe only line of the test case contains four integers $a$, $b$, $n$ and $S$ ($1 \\le a, b, n, S \\le 10^9$) \u2014 the number of coins of value $n$, the number of coins of value $1$, the value $n$ and the required total value.\n-----Output-----\nFor the $i$-th test case print the answer on it \u2014 YES (without quotes) if there exist such $x$ and $y$ that if you take $x$ coins of value $n$ and $y$ coins of value $1$, then the total value of taken coins will be $S$, and NO otherwise.\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes and YES will all be recognized as positive answer).\n-----Example-----\nInput\n4\n1 2 3 4\n1 2 3 6\n5 2 6 27\n3 3 5 18\nOutput\nYES\nNO\nNO\nYES\n\ndef",
      "answer": "def solve(a, b, n, S):\n    if n == 0:\n        return \"YES\"\n    if n > S:\n        return \"NO\"\n    if n == 1:\n        return \"YES\"\n    if n == 2:\n        if S == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 3:\n        if S == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 4:\n        if S == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 5:\n        if S == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 6:\n        if S == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 7:\n        if S == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 8:\n        if S == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 9:\n        if S == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 10:\n        if S == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 11:\n        if S == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 12:\n        if S == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 13:\n        if S == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 14:\n        if S == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 15:\n        if S == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 16:\n        if S == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 17:\n        if S == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 18:\n        if S == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 19:\n        if S == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 20:\n        if S == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 21:\n        if S == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 22:\n        if S == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 23:\n        if S == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 24:\n        if S == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 25:\n        if S == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 26:\n        if S == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 27:\n        if S == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 28:\n        if S == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 29:\n        if S == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 30:\n        if S == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 31:\n        if S == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 32:\n        if S == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 33:\n        if S == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 34:\n        if S == 1:\n",
      "difficulty": "introductory",
      "split": "test"
   }
]