[
   {
      "task_id": 4000,
      "prompt": "Complete the Python function given the prompt below:\nYou are given an unweighted tree with $n$ vertices. Recall that a tree is a connected undirected graph without cycles.\nYour task is to choose three distinct vertices $a, b, c$ on this tree such that the number of edges which belong to at least one of the simple paths between $a$ and $b$, $b$ and $c$, or $a$ and $c$ is the maximum possible. See the notes section for a better understanding.\nThe simple path is the path that visits each vertex at most once.\n-----Input-----\nThe first line contains one integer number $n$ ($3 \\le n \\le 2 \\cdot 10^5$) \u2014 the number of vertices in the tree. \nNext $n - 1$ lines describe the edges of the tree in form $a_i, b_i$ ($1 \\le a_i$, $b_i \\le n$, $a_i \\ne b_i$). It is guaranteed that given graph is a tree.\n-----Output-----\nIn the first line print one integer $res$ \u2014 the maximum number of edges which belong to at least one of the simple paths between $a$ and $b$, $b$ and $c$, or $a$ and $c$.\nIn the second line print three integers $a, b, c$ such that $1 \\le a, b, c \\le n$ and $a \\ne, b \\ne c, a \\ne c$.\nIf there are several answers, you can print any.\n-----Example-----\nInput\n8\n1 2\n2 3\n3 4\n4 5\n4 6\n3 7\n3 8\nOutput\n5\n1 8 6\n-----Note-----\nThe picture corresponding to the first example (and another one correct answer):\n[Image]\nIf you choose vertices $1, 5, 6$ then the path between $1$ and $5$ consists of edges $(1, 2), (2, 3), (3, 4), (4, 5)$, the path between $1$ and $6$ consists of edges $(1, 2), (2, 3), (3, 4), (4, 6)$ and the path between $5$ and $6$ consists of edges $(4, 5), (4, 6)$. The union of these paths is $(1, 2), (2, 3), (3, 4), (4, 5), (4, 6)$ so the answer is $5$. It can be shown that there is no better answer.\n\ndef",
      "answer": "def max_simple_paths(n, edges):\n    # Write your code here\n    graph = {}\n    for i in range(n):\n        graph[i] = []\n    for edge in edges:\n        graph[edge[0]].append(edge[1])\n        graph[edge[1]].append(edge[0])\n    \n    res = 0\n    for i in range(n):\n        visited = set()\n        visited.add(i)\n        stack = [i]\n        while stack:\n            node = stack.pop()\n            for nei in graph[node]:\n                if nei not in visited:\n                    visited.add(nei)\n                    stack.append(nei)\n        if len(visited) > res:\n            res = len(visited)\n    return res\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4001,
      "prompt": "Complete the Python function given the prompt below:\nRecently you have received two positive integer numbers $x$ and $y$. You forgot them, but you remembered a shuffled list containing all divisors of $x$ (including $1$ and $x$) and all divisors of $y$ (including $1$ and $y$). If $d$ is a divisor of both numbers $x$ and $y$ at the same time, there are two occurrences of $d$ in the list.\nFor example, if $x=4$ and $y=6$ then the given list can be any permutation of the list $[1, 2, 4, 1, 2, 3, 6]$. Some of the possible lists are: $[1, 1, 2, 4, 6, 3, 2]$, $[4, 6, 1, 1, 2, 3, 2]$ or $[1, 6, 3, 2, 4, 1, 2]$.\nYour problem is to restore suitable positive integer numbers $x$ and $y$ that would yield the same list of divisors (possibly in different order).\nIt is guaranteed that the answer exists, i.e. the given list of divisors corresponds to some positive integers $x$ and $y$.\n-----Input-----\nThe first line contains one integer $n$ ($2 \\le n \\le 128$) \u2014 the number of divisors of $x$ and $y$.\nThe second line of the input contains $n$ integers $d_1, d_2, \\dots, d_n$ ($1 \\le d_i \\le 10^4$), where $d_i$ is either divisor of $x$ or divisor of $y$. If a number is divisor of both numbers $x$ and $y$ then there are two copies of this number in the list.\n-----Output-----\nPrint two positive integer numbers $x$ and $y$ \u2014 such numbers that merged list of their divisors is the permutation of the given list of integers. It is guaranteed that the answer exists.\n-----Example-----\nInput\n10\n10 2 8 1 2 4 1 20 4 5\nOutput\n20 8\n\ndef",
      "answer": "def divisors(n):\n    divisors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4002,
      "prompt": "Complete the Python function given the prompt below:\nYou are given a matrix $a$ of size $n \\times m$ consisting of integers.\nYou can choose no more than $\\left\\lfloor\\frac{m}{2}\\right\\rfloor$ elements in each row. Your task is to choose these elements in such a way that their sum is divisible by $k$ and this sum is the maximum.\nIn other words, you can choose no more than a half (rounded down) of elements in each row, you have to find the maximum sum of these elements divisible by $k$.\nNote that you can choose zero elements (and the sum of such set is $0$).\n-----Input-----\nThe first line of the input contains three integers $n$, $m$ and $k$ ($1 \\le n, m, k \\le 70$) \u2014 the number of rows in the matrix, the number of columns in the matrix and the value of $k$. The next $n$ lines contain $m$ elements each, where the $j$-th element of the $i$-th row is $a_{i, j}$ ($1 \\le a_{i, j} \\le 70$).\n-----Output-----\nPrint one integer \u2014 the maximum sum divisible by $k$ you can obtain.\n-----Examples-----\nInput\n3 4 3\n1 2 3 4\n5 2 2 2\n7 1 1 4\nOutput\n24\nInput\n5 5 4\n1 2 4 2 1\n3 5 1 2 4\n1 5 7 1 2\n3 8 7 1 2\n8 4 7 1 6\nOutput\n56\n-----Note-----\nIn the first example, the optimal answer is $2$ and $4$ in the first row, $5$ and $2$ in the second row and $7$ and $4$ in the third row. The total sum is $2 + 4 + 5 + 2 + 7 + 4 = 24$.\n\ndef",
      "answer": "def divisible_by_k(a, k):\n    n = len(a)\n    m = len(a[0])\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] % k!= 0:\n                a[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 0:\n                continue\n            for k in range(i, n):\n                if a[k][j] == 0:\n                    continue\n                if a[i][j] % k!= 0:\n                    a[i][j] = 0\n                    break\n            for k in range(j, m):\n                if a[i][k] == 0:\n                    continue\n                if a[i][j] % k!= 0:\n                    a[i][j] = 0\n                    break\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 0:\n                continue\n            for k in range(i, n):\n                if a[k][j] == 0:\n                    continue\n                if a[i][j] % k!= 0:\n                    a[i][j] = 0\n                    break\n            for k in range(j, m):\n                if a[i][k] == 0:\n                    continue\n                if a[i][j] % k!= 0:\n                    a[i][j] = 0\n                    break\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 0:\n                continue\n            for k in range(i, n):\n                if a[k][j] == 0:\n                    continue\n                if a[i][j] % k!= 0:\n                    a[i][j] = 0\n                    break\n            for k in range(j, m):\n                if a[i][k] == 0:\n                    continue\n                if a[i][j] % k!= 0:\n                    a[i][j] = 0\n                    break\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 0:\n                continue\n            for k in range(i, n):\n                if a[k][j] == 0:\n                    continue\n                if a[i][j] % k!= 0:\n                    a[i][j] = 0\n                    break\n            for k in range(j, m):\n                if a[i][k] == 0:\n                    continue\n                if a[i][j] % k!= 0:\n                    a[i][j] = 0\n                    break\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 0:\n                continue\n            for k in range(i, n):\n                if a[k][j] == 0:\n                    continue\n                if a[i][j] % k!= 0:\n                    a[i][j] = 0\n                    break\n            for k in range(j, m):\n                if a[i][k] == 0:\n                    continue\n                if a[i][j] % k!= 0:\n                    a[i][j] = 0\n                    break\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 0:\n                continue\n            for k in range(i, n):\n                if a[k][j] == 0:\n                    continue\n                if a[i][j] % k!= 0:\n                    a[i][j] = 0\n                    break\n            for k in range(j, m):\n                if a[i][k] == 0:\n                    continue\n                if a[i][j] % k!= 0:\n                    a[i][j] = 0\n                    break\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 0:\n                continue\n            for k in range(i, n):\n                if a[k][j] == 0:\n                    continue\n                if a[i][j] % k!= 0:\n                    a[i][j] = 0\n                    break\n            for k in range(j, m):\n                if a[i][k] == 0:\n                    continue\n                if a[i][",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4003,
      "prompt": "Complete the Python function given the prompt below:\nThe only difference between problems C1 and C2 is that all values in input of problem C1 are distinct (this condition may be false for problem C2).\nYou are given a sequence $a$ consisting of $n$ integers.\nYou are making a sequence of moves. During each move you must take either the leftmost element of the sequence or the rightmost element of the sequence, write it down and remove it from the sequence. Your task is to write down a strictly increasing sequence, and among all such sequences you should take the longest (the length of the sequence is the number of elements in it).\nFor example, for the sequence $[1, 2, 4, 3, 2]$ the answer is $4$ (you take $1$ and the sequence becomes $[2, 4, 3, 2]$, then you take the rightmost element $2$ and the sequence becomes $[2, 4, 3]$, then you take $3$ and the sequence becomes $[2, 4]$ and then you take $4$ and the sequence becomes $[2]$, the obtained increasing sequence is $[1, 2, 3, 4]$).\n-----Input-----\nThe first line of the input contains one integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) \u2014 the number of elements in $a$.\nThe second line of the input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 2 \\cdot 10^5$), where $a_i$ is the $i$-th element of $a$.\n-----Output-----\nIn the first line of the output print $k$ \u2014 the maximum number of elements in a strictly increasing sequence you can obtain.\nIn the second line print a string $s$ of length $k$, where the $j$-th character of this string $s_j$ should be 'L' if you take the leftmost element during the $j$-th move and 'R' otherwise. If there are multiple answers, you can print any.\n-----Examples-----\nInput\n5\n1 2 4 3 2\nOutput\n4\nLRRR\nInput\n7\n1 3 5 6 5 4 2\nOutput\n6\nLRLRRR\nInput\n3\n2 2 2\nOutput\n1\nR\nInput\n4\n1 2 4 3\nOutput\n4\nLLRR\n-----Note-----\nThe first example is described in the problem statement.\n\ndef",
      "answer": "def longest_increasing_sequence(a):\n    n = len(a)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for i in range(n - 1, -1, -1):\n        for j in range(i + 1, n):\n            if a[i] < a[j]:\n                dp[i][j] = max(dp[i][j], dp[i + 1][j] + 1)\n    return max(max(row) for row in dp)\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4004,
      "prompt": "Complete the Python function given the prompt below:\nYou are given a sequence $a_1, a_2, \\dots, a_n$ consisting of $n$ integers.\nYou can choose any non-negative integer $D$ (i.e. $D \\ge 0$), and for each $a_i$ you can:\n  add $D$ (only once), i. e. perform $a_i := a_i + D$, or  subtract $D$ (only once), i. e. perform $a_i := a_i - D$, or  leave the value of $a_i$ unchanged. \nIt is possible that after an operation the value $a_i$ becomes negative.\nYour goal is to choose such minimum non-negative integer $D$ and perform changes in such a way, that all $a_i$ are equal (i.e. $a_1=a_2=\\dots=a_n$).\nPrint the required $D$ or, if it is impossible to choose such value $D$, print -1.\nFor example, for array $[2, 8]$ the value $D=3$ is minimum possible because you can obtain the array $[5, 5]$ if you will add $D$ to $2$ and subtract $D$ from $8$. And for array $[1, 4, 7, 7]$ the value $D=3$ is also minimum possible. You can add it to $1$ and subtract it from $7$ and obtain the array $[4, 4, 4, 4]$.\n-----Input-----\nThe first line of the input contains one integer $n$ ($1 \\le n \\le 100$) \u2014 the number of elements in $a$.\nThe second line of the input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 100$) \u2014 the sequence $a$.\n-----Output-----\nPrint one integer \u2014 the minimum non-negative integer value $D$ such that if you add this value to some $a_i$, subtract this value from some $a_i$ and leave some $a_i$ without changes, all obtained values become equal.\nIf it is impossible to choose such value $D$, print -1.\n-----Examples-----\nInput\n6\n1 4 4 7 4 1\nOutput\n3\nInput\n5\n2 2 5 2 5\nOutput\n3\nInput\n4\n1 3 3 7\nOutput\n-1\nInput\n2\n2 8\nOutput\n3\n\ndef",
      "answer": "def min_non_negative_integer(a):\n    # write your code here\n    if len(a) == 1:\n        return a[0]\n    if len(a) == 2:\n        if a[0] < a[1]:\n            return a[0]\n        else:\n            return a[1]\n    if len(a) == 3:\n        if a[0] < a[1] < a[2]:\n            return a[0]\n        elif a[0] < a[2] < a[1]:\n            return a[0]\n        elif a[1] < a[0] < a[2]:\n            return a[1]\n        elif a[1] < a[2] < a[0]:\n            return a[1]\n        elif a[2] < a[0] < a[1]:\n            return a[2]\n        elif a[2] < a[1] < a[0]:\n            return a[2]\n        else:\n            return -1\n    if len(a) == 4:\n        if a[0] < a[1] < a[2] < a[3]:\n            return a[0]\n        elif a[0] < a[2] < a[1] < a[3]:\n            return a[0]\n        elif a[0] < a[3] < a[1] < a[2]:\n            return a[0]\n        elif a[1] < a[0] < a[3] < a[2]:\n            return a[1]\n        elif a[1] < a[2] < a[0] < a[3]:\n            return a[1]\n        elif a[2] < a[0] < a[1] < a[3]:\n            return a[2]\n        elif a[2] < a[3] < a[1] < a[0]:\n            return a[2]\n        elif a[3] < a[0] < a[1] < a[2]:\n            return a[3]\n        elif a[3] < a[2] < a[1] < a[0]:\n            return a[3]\n        else:\n            return -1\n    if len(a) == 5:\n        if a[0] < a[1] < a[2] < a[3] < a[4]:\n            return a[0]\n        elif a[0] < a[2] < a[1] < a[3] < a[4]:\n            return a[0]\n        elif a[0] < a[3] < a[1] < a[2] < a[4]:\n            return a[0]\n        elif a[1] < a[0] < a[3] < a[2] < a[4]:\n            return a[1]\n        elif a[1] < a[2] < a[0] < a[3] < a[4]:\n            return a[1]\n        elif a[2] < a[0] < a[1] < a[3] < a[4]:\n            return a[2]\n        elif a[2] < a[3] < a[1] < a[0] < a[4]:\n            return a[2]\n        elif a[3] < a[0] < a[1] < a[2] < a[4]:\n            return a[3]\n        elif a[3] < a[2] < a[1] < a[0] < a[4]:\n            return a[3]\n        elif a[4] < a[0] < a[1] < a[2] < a[3]:\n            return a[4]\n        elif a[4] < a[2] < a[1] < a[0] < a[3]:\n            return a[4]\n        elif a[4] < a[3] < a[1] < a[0] < a[2]:\n            return a[4]\n        elif a[3] < a[0] < a[1] < a[2] < a[4]:\n            return a[3]\n        elif a[3] < a[2] < a[1] < a[0] < a[4]:\n            ",
      "difficulty": "introductory",
      "split": "test"
   }
]