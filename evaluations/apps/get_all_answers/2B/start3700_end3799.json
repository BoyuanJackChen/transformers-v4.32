[
   {
      "task_id": 3700,
      "prompt": "Complete the Python function given the prompt below:\nTanechka is shopping in the toy shop. There are exactly $n$ toys in the shop for sale, the cost of the $i$-th toy is $i$ burles. She wants to choose two toys in such a way that their total cost is $k$ burles. How many ways to do that does she have?\nEach toy appears in the shop exactly once. Pairs $(a, b)$ and $(b, a)$ are considered equal. Pairs $(a, b)$, where $a=b$, are not allowed.\n-----Input-----\nThe first line of the input contains two integers $n$, $k$ ($1 \\le n, k \\le 10^{14}$) \u2014 the number of toys and the expected total cost of the pair of toys.\n-----Output-----\nPrint the number of ways to choose the pair of toys satisfying the condition above. Print 0, if Tanechka can choose no pair of toys in such a way that their total cost is $k$ burles.\n-----Examples-----\nInput\n8 5\nOutput\n2\nInput\n8 15\nOutput\n1\nInput\n7 20\nOutput\n0\nInput\n1000000000000 1000000000001\nOutput\n500000000000\n-----Note-----\nIn the first example Tanechka can choose the pair of toys ($1, 4$) or the pair of toys ($2, 3$).\nIn the second example Tanechka can choose only the pair of toys ($7, 8$).\nIn the third example choosing any pair of toys will lead to the total cost less than $20$. So the answer is 0.\nIn the fourth example she can choose the following pairs: $(1, 1000000000000)$, $(2, 999999999999)$, $(3, 999999999998)$,..., $(500000000000, 500000000001)$. The number of such pairs is exactly $500000000000$.\n\ndef",
      "answer": "def toys(n, k):\n    dp = [[0 for i in range(k+1)] for j in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if j < i:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i-1][j-i] + i)\n    return dp[n][k]\n\n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3701,
      "prompt": "Complete the Python function given the prompt below:\nYou've got a string $a_1, a_2, \\dots, a_n$, consisting of zeros and ones.\nLet's call a sequence of consecutive elements $a_i, a_{i + 1}, \\ldots, a_j$ ($1\\leq i\\leq j\\leq n$) a substring of string $a$. \nYou can apply the following operations any number of times:  Choose some substring of string $a$ (for example, you can choose entire string) and reverse it, paying $x$ coins for it (for example, \u00ab0101101\u00bb $\\to$ \u00ab0111001\u00bb);  Choose some substring of string $a$ (for example, you can choose entire string or just one symbol) and replace each symbol to the opposite one (zeros are replaced by ones, and ones\u00a0\u2014 by zeros), paying $y$ coins for it (for example, \u00ab0101101\u00bb $\\to$ \u00ab0110001\u00bb). \nYou can apply these operations in any order. It is allowed to apply the operations multiple times to the same substring.\nWhat is the minimum number of coins you need to spend to get a string consisting only of ones?\n-----Input-----\nThe first line of input contains integers $n$, $x$ and $y$ ($1 \\leq n \\leq 300\\,000, 0 \\leq x, y \\leq 10^9$)\u00a0\u2014 length of the string, cost of the first operation (substring reverse) and cost of the second operation (inverting all elements of substring).\nThe second line contains the string $a$ of length $n$, consisting of zeros and ones.\n-----Output-----\nPrint a single integer\u00a0\u2014 the minimum total cost of operations you need to spend to get a string consisting only of ones. Print $0$, if you do not need to perform any operations.\n-----Examples-----\nInput\n5 1 10\n01000\nOutput\n11\nInput\n5 10 1\n01000\nOutput\n2\nInput\n7 2 3\n1111111\nOutput\n0\n-----Note-----\nIn the first sample, at first you need to reverse substring $[1 \\dots 2]$, and then you need to invert substring $[2 \\dots 5]$. \nThen the string was changed as follows:\n\u00ab01000\u00bb $\\to$ \u00ab10000\u00bb $\\to$ \u00ab11111\u00bb.\nThe total cost of operations is $1 + 10 = 11$.\nIn the second sample, at first you need to invert substring $[1 \\dots 1]$, and then you need to invert substring $[3 \\dots 5]$. \nThen the string was changed as follows:\n\u00ab01000\u00bb $\\to$ \u00ab11000\u00bb $\\to$ \u00ab11111\u00bb.\nThe overall cost is $1 + 1 = 2$.\nIn the third example, string already consists only of ones, so the answer is $0$.\n\ndef",
      "answer": "def string_operations(n, x, y):\n    # your code here\n    return 0\n\n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3702,
      "prompt": "Complete the Python function given the prompt below:\nThe well-known Fibonacci sequence $F_0, F_1, F_2,\\ldots $ is defined as follows:   $F_0 = 0, F_1 = 1$.  For each $i \\geq 2$: $F_i = F_{i - 1} + F_{i - 2}$. \nGiven an increasing arithmetic sequence of positive integers with $n$ elements: $(a, a + d, a + 2\\cdot d,\\ldots, a + (n - 1)\\cdot d)$.\nYou need to find another increasing arithmetic sequence of positive integers with $n$ elements $(b, b + e, b + 2\\cdot e,\\ldots, b + (n - 1)\\cdot e)$ such that:  $0 < b, e < 2^{64}$,  for all $0\\leq i < n$, the decimal representation of $a + i \\cdot d$ appears as substring in the last $18$ digits of the decimal representation of $F_{b + i \\cdot e}$ (if this number has less than $18$ digits, then we consider all its digits). \n-----Input-----\nThe first line contains three positive integers $n$, $a$, $d$ ($1 \\leq n, a, d, a + (n - 1) \\cdot d < 10^6$).\n-----Output-----\nIf no such arithmetic sequence exists, print $-1$.\nOtherwise, print two integers $b$ and $e$, separated by space in a single line ($0 < b, e < 2^{64}$).\nIf there are many answers, you can output any of them.\n-----Examples-----\nInput\n3 1 1\nOutput\n2 1\nInput\n5 1 2\nOutput\n19 5\n-----Note-----\nIn the first test case, we can choose $(b, e) = (2, 1)$, because $F_2 = 1, F_3 = 2, F_4 = 3$.\nIn the second test case, we can choose $(b, e) = (19, 5)$ because:  $F_{19} = 4181$ contains $1$;  $F_{24} = 46368$ contains $3$;  $F_{29} = 514229$ contains $5$;  $F_{34} = 5702887$ contains $7$;  $F_{39} = 63245986$ contains $9$.\n\ndef",
      "answer": "def fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)\n\n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3703,
      "prompt": "Complete the Python function given the prompt below:\nThe Holmes children are fighting over who amongst them is the cleverest.\nMycroft asked Sherlock and Eurus to find value of f(n), where f(1) = 1 and for n \u2265 2, f(n) is the number of distinct ordered positive integer pairs (x, y) that satisfy x + y = n and gcd(x, y) = 1. The integer gcd(a, b) is the greatest common divisor of a and b.\nSherlock said that solving this was child's play and asked Mycroft to instead get the value of $g(n) = \\sum_{d|n} f(n / d)$. Summation is done over all positive integers d that divide n.\nEurus was quietly observing all this and finally came up with her problem to astonish both Sherlock and Mycroft.\nShe defined a k-composite function F_{k}(n) recursively as follows:\n$F_{k}(n) = \\left\\{\\begin{array}{ll}{f(g(n)),} & {\\text{for} k = 1} \\\\{g(F_{k - 1}(n)),} & {\\text{for} k > 1 \\text{and} k \\operatorname{mod} 2 = 0} \\\\{f(F_{k - 1}(n)),} & {\\text{for} k > 1 \\text{and} k \\operatorname{mod} 2 = 1} \\end{array} \\right.$\nShe wants them to tell the value of F_{k}(n) modulo 1000000007.\n-----Input-----\nA single line of input contains two space separated integers n (1 \u2264 n \u2264 10^12) and k (1 \u2264 k \u2264 10^12) indicating that Eurus asks Sherlock and Mycroft to find the value of F_{k}(n) modulo 1000000007.\n-----Output-----\nOutput a single integer\u00a0\u2014 the value of F_{k}(n) modulo 1000000007.\n-----Examples-----\nInput\n7 1\nOutput\n6\nInput\n10 2\nOutput\n4\n-----Note-----\nIn the first case, there are 6 distinct ordered pairs (1, 6), (2, 5), (3, 4), (4, 3), (5, 2) and (6, 1) satisfying x + y = 7 and gcd(x, y) = 1. Hence, f(7) = 6. So, F_1(7) = f(g(7)) = f(f(7) + f(1)) = f(6 + 1) = f(7) = 6.\n\ndef",
      "answer": "def f(n):\n    if n == 1:\n        return 1\n    else:\n        return f(n - 1) + f(n - 2)\n\n",
      "difficulty": "competition",
      "split": "test"
   }
]