[
   {
      "task_id": 2500,
      "prompt": "Complete the Python function given the prompt below:\nYou are given a positive integer N.\nFind the number of the pairs of integers u and v (0\u2266u,v\u2266N) such that there exist two non-negative integers a and b satisfying a xor b=u and a+b=v.\nHere, xor denotes the bitwise exclusive OR.\nSince it can be extremely large, compute the answer modulo 10^9+7.\n-----Constraints-----\n - 1\u2266N\u226610^{18}\n-----Input-----\nThe input is given from Standard Input in the following format:\nN\n-----Output-----\nPrint the number of the possible pairs of integers u and v, modulo 10^9+7.\n-----Sample Input-----\n3\n-----Sample Output-----\n5\nThe five possible pairs of u and v are:\n - u=0,v=0 (Let a=0,b=0, then 0 xor 0=0, 0+0=0.)\n - u=0,v=2 (Let a=1,b=1, then 1 xor 1=0, 1+1=2.\uff09\n - u=1,v=1 (Let a=1,b=0, then 1 xor 0=1, 1+0=1.\uff09\n - u=2,v=2 (Let a=2,b=0, then 2 xor 0=2, 2+0=2.\uff09\n - u=3,v=3 (Let a=3,b=0, then 3 xor 0=3, 3+0=3.\uff09\n\ndef",
      "answer": "def solve(n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (i ^ j) == i and (i + j) == j:\n                count += 1\n    return count\n\n",
      "difficulty": "interview",
      "split": "test"
   },
   {
      "task_id": 2501,
      "prompt": "Complete the Python function given the prompt below:\nYou are the top spy of AtCoder Kingdom. To prevent the stolen secret from being handed to AlDebaran Kingdom, you have sneaked into the party where the transaction happens.\nThere are N attendees in the party, and they are given attendee numbers from 1 through N. The height of Attendee i is A_i.\nAccording to an examination beforehand, you know that a pair of attendees satisfying the condition below will make the transaction.\n - The absolute difference of their attendee numbers is equal to the sum of their heights.\nThere are \\frac{N(N-1)}{2} ways to choose two from the N attendees and make a pair. Among them, how many satisfy the condition above?\nP.S.: We cannot let you know the secret.\n-----Constraints-----\n - All values in input are integers.\n - 2 \\leq N \\leq 2 \\times 10^5\n - 1 \\leq A_i \\leq 10^9\\ (1 \\leq i \\leq N)\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nA_1 A_2 \\dots A_N\n-----Output-----\nPrint the number of pairs satisfying the condition.\n-----Sample Input-----\n6\n2 3 3 1 3 1\n-----Sample Output-----\n3\n - A_1 + A_4 = 3, so the pair of Attendee 1 and 4 satisfy the condition.\n - A_2 + A_6 = 4, so the pair of Attendee 2 and 6 satisfy the condition.\n - A_4 + A_6 = 2, so the pair of Attendee 4 and 6 satisfy the condition.\nNo other pair satisfies the condition, so you should print 3.\n\ndef",
      "answer": "def solve(n, a):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if abs(a[i] - a[j]) == sum(a[i:j+1]):\n                count += 1\n    return count\n\n",
      "difficulty": "interview",
      "split": "test"
   },
   {
      "task_id": 2502,
      "prompt": "Complete the Python function given the prompt below:\nGiven are two strings s and t consisting of lowercase English letters. Determine if the number of non-negative integers i satisfying the following condition is finite, and find the maximum value of such i if the number is finite.\n - There exists a non-negative integer j such that the concatenation of i copies of t is a substring of the concatenation of j copies of s.\n-----Notes-----\n - A string a is a substring of another string b if and only if there exists an integer x (0 \\leq x \\leq |b| - |a|) such that, for any y (1 \\leq y \\leq |a|), a_y = b_{x+y} holds.\n - We assume that the concatenation of zero copies of any string is the empty string. From the definition above, the empty string is a substring of any string. Thus, for any two strings s and t, i = 0 satisfies the condition in the problem statement.\n-----Constraints-----\n - 1 \\leq |s| \\leq 5 \\times 10^5\n - 1 \\leq |t| \\leq 5 \\times 10^5\n - s and t consist of lowercase English letters.\n-----Input-----\nInput is given from Standard Input in the following format:\ns\nt\n-----Output-----\nIf the number of non-negative integers i satisfying the following condition is finite, print the maximum value of such i; if the number is infinite, print -1.\n-----Sample Input-----\nabcabab\nab\n-----Sample Output-----\n3\nThe concatenation of three copies of t, ababab, is a substring of the concatenation of two copies of s, abcabababcabab, so i = 3 satisfies the condition.\nOn the other hand, the concatenation of four copies of t, abababab, is not a substring of the concatenation of any number of copies of s, so i = 4 does not satisfy the condition.\nSimilarly, any integer greater than 4 does not satisfy the condition, either. Thus, the number of non-negative integers i satisfying the condition is finite, and the maximum value of such i is 3.\n\ndef",
      "answer": "def max_non_negative_integer(s, t):\n    count = 0\n    for i in range(len(s)):\n        if s[i] == t[i]:\n            count += 1\n    if count == len(s):\n        return len(s)\n    else:\n        return count\n\n",
      "difficulty": "interview",
      "split": "test"
   },
   {
      "task_id": 2503,
      "prompt": "Complete the Python function given the prompt below:\nAtCoDeer is thinking of painting an infinite two-dimensional grid in a checked pattern of side K.\nHere, a checked pattern of side K is a pattern where each square is painted black or white so that each connected component of each color is a K \u00d7 K square.\nBelow is an example of a checked pattern of side 3:\nAtCoDeer has N desires.\nThe i-th desire is represented by x_i, y_i and c_i.\nIf c_i is B, it means that he wants to paint the square (x_i,y_i) black; if c_i is W, he wants to paint the square (x_i,y_i) white.\nAt most how many desires can he satisfy at the same time?\n-----Constraints-----\n - 1 \u2264 N \u2264 10^5\n - 1 \u2264 K \u2264 1000\n - 0 \u2264 x_i \u2264 10^9\n - 0 \u2264 y_i \u2264 10^9\n - If i \u2260 j, then (x_i,y_i) \u2260 (x_j,y_j).\n - c_i is B or W.\n - N, K, x_i and y_i are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN K\nx_1 y_1 c_1\nx_2 y_2 c_2\n:\nx_N y_N c_N\n-----Output-----\nPrint the maximum number of desires that can be satisfied at the same time.\n-----Sample Input-----\n4 3\n0 1 W\n1 2 W\n5 3 B\n5 4 B\n-----Sample Output-----\n4\nHe can satisfy all his desires by painting as shown in the example above.\n\ndef",
      "answer": "def solve(n, k, x, y, c):\n    if n == 1:\n        if c == 'B':\n            return 1\n        else:\n            return 0\n    if k == 1:\n        if c == 'B':\n            return 0\n        else:\n            return 1\n    if k == 2:\n        if c == 'B':\n            return 0\n        else:\n            return 1\n    if k == 3:\n        if c == 'B':\n            return 0\n        else:\n            return 1\n    if k == 4:\n        if c == 'B':\n            return 0\n        else:\n            return 1\n    if k == 5:\n        if c == 'B':\n            return 0\n        else:\n            return 1\n    if k == 6:\n        if c == 'B':\n            return 0\n        else:\n            return 1\n    if k == 7:\n        if c == 'B':\n            return 0\n        else:\n            return 1\n    if k == 8:\n        if c == 'B':\n            return 0\n        else:\n            return 1\n    if k == 9:\n        if c == 'B':\n            return 0\n        else:\n            return 1\n    if k == 10:\n        if c == 'B':\n            return 0\n        else:\n            return 1\n    if k == 11:\n        if c == 'B':\n            return 0\n        else:\n            return 1\n    if k == 12:\n        if c == 'B':\n            return 0\n        else:\n            return 1\n    if k == 13:\n        if c == 'B':\n            return 0\n        else:\n            return 1\n    if k == 14:\n        if c == 'B':\n            return 0\n        else:\n            return 1\n    if k == 15:\n        if c == 'B':\n            return 0\n        else:\n            return 1\n    if k == 16:\n        if c == 'B':\n            return 0\n        else:\n            return 1\n    if k == 17:\n        if c == 'B':\n            return 0\n        else:\n            return 1\n    if k == 18:\n        if c == 'B':\n            return 0\n        else:\n            return 1\n    if k == 19:\n        if c == 'B':\n            return 0\n        else:\n            return 1\n    if k == 20:\n        if c == 'B':\n            return 0\n        else:\n            return 1\n    if k == 21:\n        if c == 'B':\n            return 0\n        else:\n            return 1\n    if k == 22:\n        if c == 'B':\n            return 0\n        else:\n            return 1\n    if k == 23:\n        if c == 'B':\n            return 0\n        else:\n            return 1\n    if k == 24:\n        if c == 'B':\n            return 0\n        else:\n            return 1\n    if k == 25:\n        if c == 'B':\n            return 0\n        else:\n            return 1\n    if k == 26:\n        if c == 'B':\n            return 0\n        else:\n            return 1\n    if k == 27:\n        if c == 'B':\n            return 0\n        else:\n            return 1\n    if k == 28:\n        if c == 'B':\n            return 0\n        else:\n            return 1\n    if k == 29:\n        if c == 'B':\n            return 0\n        else:\n            return 1\n    if k == 30:\n        if c == 'B':\n            return 0\n        else:\n            return 1\n    if k == 31:\n        if c == 'B':\n            return 0\n        else:\n            return 1\n    if k == 32:\n        if c == 'B':\n            return 0\n        else:\n            return 1\n    if k == 33:\n        if c == 'B':\n            return 0\n        else:\n            return 1\n    if k == 34:\n        if c == 'B':\n            return 0\n        else:\n            return 1\n    if k == 35:\n        if c == 'B':\n            return 0\n        else:\n            return 1\n    if k == 36:\n        if c == 'B':\n            return 0\n        else:\n            return 1\n    if k == 37:\n        if c == '",
      "difficulty": "interview",
      "split": "test"
   },
   {
      "task_id": 2504,
      "prompt": "Complete the Python function given the prompt below:\nThere are N towns numbered 1 to N and M roads. The i-th road connects Town A_i and Town B_i bidirectionally and has a length of C_i.\nTakahashi will travel between these towns by car, passing through these roads. The fuel tank of his car can contain at most L liters of fuel, and one liter of fuel is consumed for each unit distance traveled. When visiting a town while traveling, he can full the tank (or choose not to do so). Travel that results in the tank becoming empty halfway on the road cannot be done.\nProcess the following Q queries:\n - The tank is now full. Find the minimum number of times he needs to full his tank while traveling from Town s_i to Town t_i. If Town t_i is unreachable, print -1.\n-----Constraints-----\n - All values in input are integers.\n - 2 \\leq N \\leq 300\n - 0 \\leq M \\leq \\frac{N(N-1)}{2}\n - 1 \\leq L \\leq 10^9\n - 1 \\leq A_i, B_i \\leq N\n - A_i \\neq B_i\n - \\left(A_i, B_i\\right) \\neq \\left(A_j, B_j\\right) (if i \\neq j)\n - \\left(A_i, B_i\\right) \\neq \\left(B_j, A_j\\right) (if i \\neq j)\n - 1 \\leq C_i \\leq 10^9\n - 1 \\leq Q \\leq N\\left(N-1\\right)\n - 1 \\leq s_i, t_i \\leq N\n - s_i \\neq t_i\n - \\left(s_i, t_i\\right) \\neq \\left(s_j, t_j\\right) (if i \\neq j)\n-----Input-----\nInput is given from Standard Input in the following format:\nN M L\nA_1 B_1 C_1\n:\nA_M B_M C_M\nQ\ns_1 t_1\n:\ns_Q t_Q\n-----Output-----\nPrint Q lines.\nThe i-th line should contain the minimum number of times the tank needs to be fulled while traveling from Town s_i to Town t_i. If Town t_i is unreachable, the line should contain -1 instead.\n-----Sample Input-----\n3 2 5\n1 2 3\n2 3 3\n2\n3 2\n1 3\n-----Sample Output-----\n0\n1\nTo travel from Town 3 to Town 2, we can use the second road to reach Town 2 without fueling the tank on the way.\nTo travel from Town 1 to Town 3, we can first use the first road to get to Town 2, full the tank, and use the second road to reach Town 3.\n\ndef",
      "answer": "def find_min_full_tank(N, M, L, A, B, C):\n    # Write your code here\n    return -1\n\n",
      "difficulty": "interview",
      "split": "test"
   },
   {
      "task_id": 2505,
      "prompt": "Complete the Python function given the prompt below:\nWe have a set S of N points in a two-dimensional plane. The coordinates of the i-th point are (x_i, y_i). The N points have distinct x-coordinates and distinct y-coordinates.\nFor a non-empty subset T of S, let f(T) be the number of points contained in the smallest rectangle, whose sides are parallel to the coordinate axes, that contains all the points in T. More formally, we define f(T) as follows:\n - f(T) :=  (the number of integers i (1 \\leq i \\leq N) such that a \\leq x_i \\leq b and c \\leq y_i \\leq d, where a, b, c, and d are the minimum x-coordinate, the maximum x-coordinate, the minimum y-coordinate, and the maximum y-coordinate of the points in T)\nFind the sum of f(T) over all non-empty subset T of S. Since it can be enormous, print the sum modulo 998244353.\n-----Constraints-----\n - 1 \\leq N \\leq 2 \\times 10^5\n - -10^9 \\leq x_i, y_i \\leq 10^9\n - x_i \\neq x_j (i \\neq j)\n - y_i \\neq y_j (i \\neq j)\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nx_1 y_1\n:\nx_N y_N\n-----Output-----\nPrint the sum of f(T) over all non-empty subset T of S, modulo 998244353.\n-----Sample Input-----\n3\n-1 3\n2 1\n3 -2\n-----Sample Output-----\n13\nLet the first, second, and third points be P_1, P_2, and P_3, respectively. S = \\{P_1, P_2, P_3\\} has seven non-empty subsets, and f has the following values for each of them:\n - f(\\{P_1\\}) = 1\n - f(\\{P_2\\}) = 1\n - f(\\{P_3\\}) = 1\n - f(\\{P_1, P_2\\}) = 2\n - f(\\{P_2, P_3\\}) = 2\n - f(\\{P_3, P_1\\}) = 3\n - f(\\{P_1, P_2, P_3\\}) = 3\nThe sum of these is 13.\n\ndef",
      "answer": "def f(T):\n    return sum(1 for i in range(len(T)) if a <= T[i][0] <= b and c <= T[i][1] <= d)\n\n",
      "difficulty": "interview",
      "split": "test"
   },
   {
      "task_id": 2506,
      "prompt": "Complete the Python function given the prompt below:\nTakahashi has come to a party as a special guest.\nThere are N ordinary guests at the party. The i-th ordinary guest has a power of A_i.\nTakahashi has decided to perform M handshakes to increase the happiness of the party (let the current happiness be 0).\nA handshake will be performed as follows:\n - Takahashi chooses one (ordinary) guest x for his left hand and another guest y for his right hand (x and y can be the same).\n - Then, he shakes the left hand of Guest x and the right hand of Guest y simultaneously to increase the happiness by A_x+A_y.\nHowever, Takahashi should not perform the same handshake more than once. Formally, the following condition must hold:\n - Assume that, in the k-th handshake, Takahashi shakes the left hand of Guest x_k and the right hand of Guest y_k. Then, there is no pair p, q (1 \\leq p < q \\leq M) such that (x_p,y_p)=(x_q,y_q).\nWhat is the maximum possible happiness after M handshakes?\n-----Constraints-----\n - 1 \\leq N \\leq 10^5\n - 1 \\leq M \\leq N^2\n - 1 \\leq A_i \\leq 10^5\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN M\nA_1 A_2... A_N\n-----Output-----\nPrint the maximum possible happiness after M handshakes.\n-----Sample Input-----\n5 3\n10 14 19 34 33\n-----Sample Output-----\n202\nLet us say that Takahashi performs the following handshakes:\n - In the first handshake, Takahashi shakes the left hand of Guest 4 and the right hand of Guest 4.\n - In the second handshake, Takahashi shakes the left hand of Guest 4 and the right hand of Guest 5.\n - In the third handshake, Takahashi shakes the left hand of Guest 5 and the right hand of Guest 4.\nThen, we will have the happiness of (34+34)+(34+33)+(33+34)=202.\nWe cannot achieve the happiness of 203 or greater, so the answer is 202.\n\ndef",
      "answer": "def max_happiness(N, M, A):\n    # Write your code here\n    happiness = 0\n    for i in range(M):\n        happiness += A[i] + A[i+1]\n    return happiness\n\n",
      "difficulty": "interview",
      "split": "test"
   },
   {
      "task_id": 2507,
      "prompt": "Complete the Python function given the prompt below:\nTakahashi will take part in an eating contest. Teams of N members will compete in this contest, and Takahashi's team consists of N players numbered 1 through N from youngest to oldest. The consumption coefficient of Member i is A_i.\nIn the contest, N foods numbered 1 through N will be presented, and the difficulty of Food i is F_i. The details of the contest are as follows:\n - A team should assign one member to each food, and should not assign the same member to multiple foods.\n - It will take x \\times y seconds for a member to finish the food, where x is the consumption coefficient of the member and y is the difficulty of the dish.\n - The score of a team is the longest time it takes for an individual member to finish the food.\nBefore the contest, Takahashi's team decided to do some training. In one set of training, a member can reduce his/her consumption coefficient by 1, as long as it does not go below 0. However, for financial reasons, the N members can do at most K sets of training in total.\nWhat is the minimum possible score of the team, achieved by choosing the amounts of members' training and allocating the dishes optimally?\n-----Constraints-----\n - All values in input are integers.\n - 1 \\leq N \\leq 2 \\times 10^5\n - 0 \\leq K \\leq 10^{18}\n - 1 \\leq A_i \\leq 10^6\\ (1 \\leq i \\leq N)\n - 1 \\leq F_i \\leq 10^6\\ (1 \\leq i \\leq N)\n-----Input-----\nInput is given from Standard Input in the following format:\nN K\nA_1 A_2... A_N\nF_1 F_2... F_N\n-----Output-----\nPrint the minimum possible score of the team.\n-----Sample Input-----\n3 5\n4 2 1\n2 3 1\n-----Sample Output-----\n2\nThey can achieve the score of 2, as follows:\n - Member 1 does 4 sets of training and eats Food 2 in (4-4) \\times 3 = 0 seconds.\n - Member 2 does 1 set of training and eats Food 3 in (2-1) \\times 1 = 1 second.\n - Member 3 does 0 sets of training and eats Food 1 in (1-0) \\times 2 = 2 seconds.\nThey cannot achieve a score of less than 2, so the answer is 2.\n\ndef",
      "answer": "def solve(n, k, a, f):\n    # Write your code here\n    a.sort()\n    f.sort()\n    a.append(0)\n    f.append(0)\n    a.insert(0, 0)\n    f.insert(0, 0)\n    dp = [[0 for i in range(k+1)] for j in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if a[i] > j:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i-1][j-a[i]] + f[i])\n    return dp[n][k]\n\n",
      "difficulty": "interview",
      "split": "test"
   },
   {
      "task_id": 2508,
      "prompt": "Complete the Python function given the prompt below:\nSnuke, a water strider, lives in a rectangular pond that can be seen as a grid with H east-west rows and W north-south columns. Let (i,j) be the square at the i-th row from the north and j-th column from the west.\nSome of the squares have a lotus leaf on it and cannot be entered.\nThe square (i,j) has a lotus leaf on it if c_{ij} is @, and it does not if c_{ij} is..\nIn one stroke, Snuke can move between 1 and K squares (inclusive) toward one of the four directions: north, east, south, and west.\nThe move may not pass through a square with a lotus leaf. Moving to such a square or out of the pond is also forbidden.\nFind the minimum number of strokes Snuke takes to travel from the square (x_1,y_1) to (x_2,y_2).\nIf the travel from (x_1,y_1) to (x_2,y_2) is impossible, point out that fact.\n-----Constraints-----\n - 1 \\leq H,W,K \\leq 10^6\n - H \\times W \\leq 10^6\n - 1 \\leq x_1,x_2 \\leq H\n - 1 \\leq y_1,y_2 \\leq W\n - x_1 \\neq x_2 or y_1 \\neq y_2.\n - c_{i,j} is. or @.\n - c_{x_1,y_1} =.\n - c_{x_2,y_2} =.\n - All numbers in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nH W K\nx_1 y_1 x_2 y_2\nc_{1,1}c_{1,2}.. c_{1,W}\nc_{2,1}c_{2,2}.. c_{2,W}\n:\nc_{H,1}c_{H,2}.. c_{H,W}\n-----Output-----\nPrint the minimum number of strokes Snuke takes to travel from the square (x_1,y_1) to (x_2,y_2), or print -1 if the travel is impossible.\n-----Sample Input-----\n3 5 2\n3 2 3 4\n.....\n.@..@\n..@..\n-----Sample Output-----\n5\nInitially, Snuke is at the square (3,2).\nHe can reach the square (3, 4) by making five strokes as follows:\n - From (3, 2), go west one square to (3, 1).\n - From (3, 1), go north two squares to (1, 1).\n - From (1, 1), go east two squares to (1, 3).\n - From (1, 3), go east one square to (1, 4).\n - From (1, 4), go south two squares to (3, 4).\n\ndef",
      "answer": "def min_strokes(H, W, K, x1, y1, x2, y2):\n    # Write your code here\n    if x1 == x2 and y1 == y2:\n        return -1\n    if x1 > x2 or y1 > y2:\n        return -1\n    if x1 == x2 and y1 == y2:\n        return 0\n    if x1 == x2 and y1 == y2:\n        return 0\n    if x1 == x2 and y1 == y2:\n        return 0\n    if x1 == x2 and y1 == y2:\n        return 0\n    if x1 == x2 and y1 == y2:\n        return 0\n    if x1 == x2 and y1 == y2:\n        return 0\n    if x1 == x2 and y1 == y2:\n        return 0\n    if x1 == x2 and y1 == y2:\n        return 0\n    if x1 == x2 and y1 == y2:\n        return 0\n    if x1 == x2 and y1 == y2:\n        return 0\n    if x1 == x2 and y1 == y2:\n        return 0\n    if x1 == x2 and y1 == y2:\n        return 0\n    if x1 == x2 and y1 == y2:\n        return 0\n    if x1 == x2 and y1 == y2:\n        return 0\n    if x1 == x2 and y1 == y2:\n        return 0\n    if x1 == x2 and y1 == y2:\n        return 0\n    if x1 == x2 and y1 == y2:\n        return 0\n    if x1 == x2 and y1 == y2:\n        return 0\n    if x1 == x2 and y1 == y2:\n        return 0\n    if x1 == x2 and y1 == y2:\n        return 0\n    if x1 == x2 and y1 == y2:\n        return 0\n    if x1 == x2 and y1 == y2:\n        return 0\n    if x1 == x2 and y1 == y2:\n        return 0\n    if x1 == x2 and y1 == y2:\n        return 0\n    if x1 == x2 and y1 == y2:\n        return 0\n    if x1 == x2 and y1 == y2:\n        return 0\n    if x1 == x2 and y1 == y2:\n        return 0\n    if x1 == x2 and y1 == y2:\n        return 0\n    if x1 == x2 and y1 == y2:\n        return 0\n    if x1 == x2 and y1 == y2:\n        return 0\n    if x1 == x2 and y1 == y2:\n        return 0\n    if x1 == x2 and y1 == y2:\n        return 0\n    if x1 == x2 and y1 == y2:\n        return 0\n    if x1 == x2 and y1 == y2:\n        return 0\n    if x1 == x2 and y1 == y2:\n        return 0\n    if x1 == x2 and y1 == y2:\n        return 0\n    if x1 == x2 and y1 == y2:\n        return 0\n    if x1 == x2 and y1 == y2:\n        return 0\n    if x1 == x2 and y1 == y2:\n        return 0\n    if x1 == x2 and y1 == y2:\n        return 0\n    if x1 == x2 and y1 == y2:\n        return 0\n    if x1 == x2 and y1 == y2:\n        return 0\n    if x1 == x2 and y1 == y2:\n        return 0\n    if x1 == x2 and y1 == y2:\n        return 0\n    if x1 == x2 and y1 == y2:\n        return 0\n    if x1 == x2 and y1 == y2:\n        return 0\n    if x1 == x2 and y1 == y2:\n        return 0\n    if x1 == x2 and y1 == y2:\n        return 0\n    if x1 == x2 and y1 == y2:\n        return 0\n    if x1 == x2 and y1 == y2:\n        return 0\n    if x",
      "difficulty": "interview",
      "split": "test"
   },
   {
      "task_id": 2509,
      "prompt": "Complete the Python function given the prompt below:\nTakahashi had a pair of two positive integers not exceeding N, (a,b), which he has forgotten.\nHe remembers that the remainder of a divided by b was greater than or equal to K.\nFind the number of possible pairs that he may have had.\n-----Constraints-----\n - 1 \\leq N \\leq 10^5\n - 0 \\leq K \\leq N-1\n - All input values are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN K\n-----Output-----\nPrint the number of possible pairs that he may have had.\n-----Sample Input-----\n5 2\n-----Sample Output-----\n7\nThere are seven possible pairs: (2,3),(5,3),(2,4),(3,4),(2,5),(3,5) and (4,5).\n\ndef",
      "answer": "def count_pairs(n, k, arr):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] <= k:\n                count += 1\n    return count\n\n",
      "difficulty": "interview",
      "split": "test"
   },
   {
      "task_id": 2510,
      "prompt": "Complete the Python function given the prompt below:\nThere are N persons called Person 1 through Person N.\nYou are given M facts that \"Person A_i and Person B_i are friends.\" The same fact may be given multiple times.\nIf X and Y are friends, and Y and Z are friends, then X and Z are also friends. There is no friendship that cannot be derived from the M given facts.\nTakahashi the evil wants to divide the N persons into some number of groups so that every person has no friend in his/her group.\nAt least how many groups does he need to make?\n-----Constraints-----\n - 2 \\leq N \\leq 2\\times 10^5\n - 0 \\leq M \\leq 2\\times 10^5\n - 1\\leq A_i,B_i\\leq N\n - A_i \\neq B_i\n-----Input-----\nInput is given from Standard Input in the following format:\nN M\nA_1 B_1\n\\vdots\nA_M B_M\n-----Output-----\nPrint the answer.\n-----Sample Input-----\n5 3\n1 2\n3 4\n5 1\n-----Sample Output-----\n3\nDividing them into three groups such as \\{1,3\\}, \\{2,4\\}, and \\{5\\} achieves the goal.\n\ndef",
      "answer": "def friend(n, m, a, b):\n    a.sort()\n    b.sort()\n    a.sort()\n    b.sort()\n    for i in range(n):\n        for j in range(m):\n            if a[i] == b[j]:\n                return False\n    return True\n\n",
      "difficulty": "interview",
      "split": "test"
   },
   {
      "task_id": 2511,
      "prompt": "Complete the Python function given the prompt below:\nYou are given a tree with N vertices and N-1 edges. The vertices are numbered 1 to N, and the i-th edge connects Vertex a_i and b_i.\nYou have coloring materials of K colors.\nFor each vertex in the tree, you will choose one of the K colors to paint it, so that the following condition is satisfied:\n - If the distance between two different vertices x and y is less than or equal to two, x and y have different colors.\nHow many ways are there to paint the tree? Find the count modulo 1\\ 000\\ 000\\ 007.\nWhat is tree?\nA tree is a kind of graph. For detail, please see: Wikipedia \"Tree (graph theory)\"\nWhat is distance?\nThe distance between two vertices x and y is the minimum number of edges one has to traverse to get from x to y.\n-----Constraints-----\n - 1 \\leq N,K \\leq 10^5\n - 1 \\leq a_i,b_i \\leq N\n - The given graph is a tree.\n-----Input-----\nInput is given from Standard Input in the following format:\nN K\na_1 b_1\na_2 b_2\n.\n.\n.\na_{N-1} b_{N-1}\n-----Output-----\nPrint the number of ways to paint the tree, modulo 1\\ 000\\ 000\\ 007.\n-----Sample Input-----\n4 3\n1 2\n2 3\n3 4\n-----Sample Output-----\n6\nThere are six ways to paint the tree.\n\ndef",
      "answer": "def tree(n, k):\n    if n == 1:\n        return 1\n    if n == 2:\n        return k\n    if n == 3:\n        return k * k\n    if n == 4:\n        return k * k * k\n    if n == 5:\n        return k * k * k * k\n    if n == 6:\n        return k * k * k * k * k\n    if n == 7:\n        return k * k * k * k * k * k\n    if n == 8:\n        return k * k * k * k * k * k * k\n    if n == 9:\n        return k * k * k * k * k * k * k * k\n    if n == 10:\n        return k * k * k * k * k * k * k * k * k\n\n",
      "difficulty": "interview",
      "split": "test"
   },
   {
      "task_id": 2512,
      "prompt": "Complete the Python function given the prompt below:\nThere are K items placed on a grid of squares with R rows and C columns. Let (i, j) denote the square at the i-th row (1 \\leq i \\leq R) and the j-th column (1 \\leq j \\leq C). The i-th item is at (r_i, c_i) and has the value v_i.\nTakahashi will begin at (1, 1), the start, and get to (R, C), the goal. When he is at (i, j), he can move to (i + 1, j) or (i, j + 1) (but cannot move to a non-existent square).\nHe can pick up items on the squares he visits, including the start and the goal, but at most three for each row. It is allowed to ignore the item on a square he visits.\nFind the maximum possible sum of the values of items he picks up.\n-----Constraints-----\n - 1 \\leq R, C \\leq 3000\n - 1 \\leq K \\leq \\min(2 \\times 10^5, R \\times C)\n - 1 \\leq r_i \\leq R\n - 1 \\leq c_i \\leq C\n - (r_i, c_i) \\neq (r_j, c_j) (i \\neq j)\n - 1 \\leq v_i \\leq 10^9\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nR C K\nr_1 c_1 v_1\nr_2 c_2 v_2\n:\nr_K c_K v_K\n-----Output-----\nPrint the maximum possible sum of the values of items Takahashi picks up.\n-----Sample Input-----\n2 2 3\n1 1 3\n2 1 4\n1 2 5\n-----Sample Output-----\n8\nHe has two ways to get to the goal:\n - Visit (1, 1), (1, 2), and (2, 2), in this order. In this case, the total value of the items he can pick up is 3 + 5 = 8.\n - Visit (1, 1), (2, 1), and (2, 2), in this order. In this case, the total value of the items he can pick up is 3 + 4 = 7.\nThus, the maximum possible sum of the values of items he picks up is 8.\n\ndef",
      "answer": "def max_sum(r, c, k, arr):\n    # code here\n    return 0\n\n",
      "difficulty": "interview",
      "split": "test"
   },
   {
      "task_id": 2513,
      "prompt": "Complete the Python function given the prompt below:\nSnuke, who loves animals, built a zoo.\nThere are N animals in this zoo. They are conveniently numbered 1 through N, and arranged in a circle.\nThe animal numbered i (2\u2264i\u2264N-1) is adjacent to the animals numbered i-1 and i+1. Also, the animal numbered 1 is adjacent to the animals numbered 2 and N, and the animal numbered N is adjacent to the animals numbered N-1 and 1.\nThere are two kinds of animals in this zoo: honest sheep that only speak the truth, and lying wolves that only tell lies.\nSnuke cannot tell the difference between these two species, and asked each animal the following question: \"Are your neighbors of the same species?\" The animal numbered i answered s_i. Here, if s_i is o, the animal said that the two neighboring animals are of the same species, and if s_i is x, the animal said that the two neighboring animals are of different species.\nMore formally, a sheep answered o if the two neighboring animals are both sheep or both wolves, and answered x otherwise.\nSimilarly, a wolf answered x if the two neighboring animals are both sheep or both wolves, and answered o otherwise.\nSnuke is wondering whether there is a valid assignment of species to the animals that is consistent with these responses. If there is such an assignment, show one such assignment. Otherwise, print -1.\n-----Constraints-----\n - 3 \u2264 N \u2264 10^{5}\n - s is a string of length N consisting of o and x.\n-----Input-----\nThe input is given from Standard Input in the following format:\nN\ns\n-----Output-----\nIf there does not exist an valid assignment that is consistent with s, print -1.\nOtherwise, print an string t in the following format. The output is considered correct if the assignment described by t is consistent with s.\n - t is a string of length N consisting of S and W.\n - If t_i is S, it indicates that the animal numbered i is a sheep. If t_i is W, it indicates that the animal numbered i is a wolf.\n-----Sample Input-----\n6\nooxoox\n-----Sample Output-----\nSSSWWS\nFor example, if the animals numbered 1, 2, 3, 4, 5 and 6 are respectively a sheep, sheep, sheep, wolf, wolf, and sheep, it is consistent with their responses. Besides, there is another valid assignment of species: a wolf, sheep, wolf, sheep, wolf and wolf.\nLet us remind you: if the neiboring animals are of the same species, a sheep answers o and a wolf answers x. If the neiboring animals are of different species, a sheep answers x and a wolf answers o.\n\ndef",
      "answer": "def zoo(n, s):\n    if len(s)!= n:\n        return -1\n    if s.count('o') == n or s.count('x') == n:\n        return ''.join(s)\n    else:\n        return -1\n\n",
      "difficulty": "interview",
      "split": "test"
   },
   {
      "task_id": 2514,
      "prompt": "Complete the Python function given the prompt below:\nYou have a sequence A composed of N positive integers: A_{1}, A_{2}, \\cdots, A_{N}.\nYou will now successively do the following Q operations:\n - In the i-th operation, you replace every element whose value is B_{i} with C_{i}.\nFor each i (1 \\leq i \\leq Q), find S_{i}: the sum of all elements in A just after the i-th operation.\n-----Constraints-----\n - All values in input are integers.\n -  1 \\leq N, Q, A_{i}, B_{i}, C_{i} \\leq 10^{5} \n -  B_{i} \\neq C_{i} \n-----Input-----\nInput is given from Standard Input in the following format:\nN\nA_{1} A_{2} \\cdots A_{N}\nQ\nB_{1} C_{1}\nB_{2} C_{2}\n\\vdots\nB_{Q} C_{Q}\n-----Output-----\nPrint Q integers S_{i} to Standard Output in the following format:\nS_{1}\nS_{2}\n\\vdots\nS_{Q}\nNote that S_{i} may not fit into a 32-bit integer.\n-----Sample Input-----\n4\n1 2 3 4\n3\n1 2\n3 4\n2 4\n-----Sample Output-----\n11\n12\n16\nInitially, the sequence A is 1,2,3,4.\nAfter each operation, it becomes the following:\n - 2, 2, 3, 4\n - 2, 2, 4, 4\n - 4, 4, 4, 4\n\ndef",
      "answer": "def sum_of_elements(n, q, a):\n    sum = 0\n    for i in range(q):\n        sum += a[i]\n    return sum\n\n",
      "difficulty": "interview",
      "split": "test"
   },
   {
      "task_id": 2515,
      "prompt": "Complete the Python function given the prompt below:\nWe say that a odd number N is similar to 2017 when both N and (N+1)/2 are prime.\nYou are given Q queries.\nIn the i-th query, given two odd numbers l_i and r_i, find the number of odd numbers x similar to 2017 such that l_i \u2264 x \u2264 r_i.\n-----Constraints-----\n - 1\u2264Q\u226410^5\n - 1\u2264l_i\u2264r_i\u226410^5\n - l_i and r_i are odd.\n - All input values are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nQ\nl_1 r_1\n:\nl_Q r_Q\n-----Output-----\nPrint Q lines. The i-th line (1\u2264i\u2264Q) should contain the response to the i-th query.\n-----Sample Input-----\n1\n3 7\n-----Sample Output-----\n2\n - 3 is similar to 2017, since both 3 and (3+1)/2=2 are prime.\n - 5 is similar to 2017, since both 5 and (5+1)/2=3 are prime.\n - 7 is not similar to 2017, since (7+1)/2=4 is not prime, although 7 is prime.\nThus, the response to the first query should be 2.\n\ndef",
      "answer": "def is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\n",
      "difficulty": "interview",
      "split": "test"
   },
   {
      "task_id": 2516,
      "prompt": "Complete the Python function given the prompt below:\nTakahashi has a string S of length N consisting of digits from 0 through 9.\nHe loves the prime number P. He wants to know how many non-empty (contiguous) substrings of S - there are N \\times (N + 1) / 2 of them - are divisible by P when regarded as integers written in base ten.\nHere substrings starting with a 0 also count, and substrings originated from different positions in S are distinguished, even if they are equal as strings or integers.\nCompute this count to help Takahashi.\n-----Constraints-----\n - 1 \\leq N \\leq 2 \\times 10^5\n - S consists of digits.\n - |S| = N\n - 2 \\leq P \\leq 10000\n - P is a prime number.\n-----Input-----\nInput is given from Standard Input in the following format:\nN P\nS\n-----Output-----\nPrint the number of non-empty (contiguous) substrings of S that are divisible by P when regarded as an integer written in base ten.\n-----Sample Input-----\n4 3\n3543\n-----Sample Output-----\n6\nHere S = 3543. There are ten non-empty (contiguous) substrings of S:\n - 3: divisible by 3.\n - 35: not divisible by 3.\n - 354: divisible by 3.\n - 3543: divisible by 3.\n - 5: not divisible by 3.\n - 54: divisible by 3.\n - 543: divisible by 3.\n - 4: not divisible by 3.\n - 43: not divisible by 3.\n - 3: divisible by 3.\nSix of these are divisible by 3, so print 6.\n\ndef",
      "answer": "def divisible_by_3(n):\n    count = 0\n    for i in range(1, n+1):\n        if i % 3 == 0:\n            count += 1\n    return count\n\n",
      "difficulty": "interview",
      "split": "test"
   },
   {
      "task_id": 2517,
      "prompt": "Complete the Python function given the prompt below:\nThere are N towns in the State of Atcoder, connected by M bidirectional roads.\nThe i-th road connects Town A_i and B_i and has a length of C_i.\nJoisino is visiting R towns in the state, r_1,r_2,..,r_R (not necessarily in this order).\nShe will fly to the first town she visits, and fly back from the last town she visits, but for the rest of the trip she will have to travel by road.\nIf she visits the towns in the order that minimizes the distance traveled by road, what will that distance be?\n-----Constraints-----\n - 2\u2264N\u2264200\n - 1\u2264M\u2264N\u00d7(N-1)/2\n - 2\u2264R\u2264min(8,N) (min(8,N) is the smaller of 8 and N.)\n - r_i\u2260r_j (i\u2260j)\n - 1\u2264A_i,B_i\u2264N, A_i\u2260B_i\n - (A_i,B_i)\u2260(A_j,B_j),(A_i,B_i)\u2260(B_j,A_j) (i\u2260j)\n - 1\u2264C_i\u2264100000\n - Every town can be reached from every town by road.\n - All input values are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN M R\nr_1... r_R\nA_1 B_1 C_1\n:\nA_M B_M C_M\n-----Output-----\nPrint the distance traveled by road if Joisino visits the towns in the order that minimizes it.\n-----Sample Input-----\n3 3 3\n1 2 3\n1 2 1\n2 3 1\n3 1 4\n-----Sample Output-----\n2\nFor example, if she visits the towns in the order of 1, 2, 3, the distance traveled will be 2, which is the minimum possible.\n\ndef",
      "answer": "def minDistance(n, m, roads, r_1, r_2):\n    # code here\n    return 0\n\n",
      "difficulty": "interview",
      "split": "test"
   },
   {
      "task_id": 2518,
      "prompt": "Complete the Python function given the prompt below:\nYou are going out for a walk, when you suddenly encounter N monsters. Each monster has a parameter called health, and the health of the i-th monster is h_i at the moment of encounter. A monster will vanish immediately when its health drops to 0 or below.\nFortunately, you are a skilled magician, capable of causing explosions that damage monsters. In one explosion, you can damage monsters as follows:\n - Select an alive monster, and cause an explosion centered at that monster. The health of the monster at the center of the explosion will decrease by A, and the health of each of the other monsters will decrease by B. Here, A and B are predetermined parameters, and A > B holds.\nAt least how many explosions do you need to cause in order to vanish all the monsters?\n-----Constraints-----\n - All input values are integers.\n - 1 \u2264 N \u2264 10^5\n - 1 \u2264 B < A \u2264 10^9\n - 1 \u2264 h_i \u2264 10^9\n-----Input-----\nInput is given from Standard Input in the following format:\nN A B\nh_1\nh_2\n:\nh_N\n-----Output-----\nPrint the minimum number of explosions that needs to be caused in order to vanish all the monsters.\n-----Sample Input-----\n4 5 3\n8\n7\n4\n2\n-----Sample Output-----\n2\nYou can vanish all the monsters in two explosion, as follows:\n - First, cause an explosion centered at the monster with 8 health. The healths of the four monsters become 3, 4, 1 and -1, respectively, and the last monster vanishes.\n - Second, cause an explosion centered at the monster with 4 health remaining. The healths of the three remaining monsters become 0, -1 and -2, respectively, and all the monsters are now vanished.\n\ndef",
      "answer": "def explosion(n, a, b):\n    # Your code here\n    return\n\n",
      "difficulty": "interview",
      "split": "test"
   },
   {
      "task_id": 2519,
      "prompt": "Complete the Python function given the prompt below:\nWe have N dice arranged in a line from left to right. The i-th die from the left shows p_i numbers from 1 to p_i with equal probability when thrown.\nWe will choose K adjacent dice, throw each of them independently, and compute the sum of the numbers shown. Find the maximum possible value of the expected value of this sum.\n-----Constraints-----\n - 1 \u2264 K \u2264 N \u2264 200000\n - 1 \u2264 p_i \u2264 1000\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN K\np_1... p_N\n-----Output-----\nPrint the maximum possible value of the expected value of the sum of the numbers shown.\nYour output will be considered correct when its absolute or relative error from our answer is at most 10^{-6}.\n-----Sample Input-----\n5 3\n1 2 2 4 5\n-----Sample Output-----\n7.000000000000\nWhen we throw the third, fourth, and fifth dice from the left, the expected value of the sum of the numbers shown is 7. This is the maximum value we can achieve.\n\ndef",
      "answer": "def expected_value(n, k, p):\n    return sum(p[i] for i in range(k)) * (n - k + 1) / n\n\n",
      "difficulty": "interview",
      "split": "test"
   },
   {
      "task_id": 2520,
      "prompt": "Complete the Python function given the prompt below:\nAn SNS has N users - User 1, User 2, \\cdots, User N.\nBetween these N users, there are some relationships - M friendships and K blockships.\nFor each i = 1, 2, \\cdots, M, there is a bidirectional friendship between User A_i and User B_i.\nFor each i = 1, 2, \\cdots, K, there is a bidirectional blockship between User C_i and User D_i.\nWe define User a to be a friend candidate for User b when all of the following four conditions are satisfied:\n - a \\neq b.\n - There is not a friendship between User a and User b.\n - There is not a blockship between User a and User b.\n - There exists a sequence c_0, c_1, c_2, \\cdots, c_L consisting of integers between 1 and N (inclusive) such that c_0 = a, c_L = b, and there is a friendship between User c_i and c_{i+1} for each i = 0, 1, \\cdots, L - 1.\nFor each user i = 1, 2,... N, how many friend candidates does it have?\n-----Constraints-----\n - All values in input are integers.\n - 2 \u2264 N \u2264 10^5\n - 0 \\leq M \\leq 10^5\n - 0 \\leq K \\leq 10^5\n - 1 \\leq A_i, B_i \\leq N\n - A_i \\neq B_i\n - 1 \\leq C_i, D_i \\leq N\n - C_i \\neq D_i\n - (A_i, B_i) \\neq (A_j, B_j) (i \\neq j)\n - (A_i, B_i) \\neq (B_j, A_j)\n - (C_i, D_i) \\neq (C_j, D_j) (i \\neq j)\n - (C_i, D_i) \\neq (D_j, C_j)\n - (A_i, B_i) \\neq (C_j, D_j)\n - (A_i, B_i) \\neq (D_j, C_j)\n-----Input-----\nInput is given from Standard Input in the following format:\nN M K\nA_1 B_1\n\\vdots\nA_M B_M\nC_1 D_1\n\\vdots\nC_K D_K\n-----Output-----\nPrint the answers in order, with space in between.\n-----Sample Input-----\n4 4 1\n2 1\n1 3\n3 2\n3 4\n4 1\n-----Sample Output-----\n0 1 0 1\nThere is a friendship between User 2 and 3, and between 3 and 4. Also, there is no friendship or blockship between User 2 and 4. Thus, User 4 is a friend candidate for User 2.\nHowever, neither User 1 or 3 is a friend candidate for User 2, so User 2 has one friend candidate.\n\ndef",
      "answer": "def friend_candidates(n, m, k, a, b, c, d):\n    # Write your code here\n    count = 0\n    for i in range(1, n+1):\n        if i not in (a, b, c, d):\n            if not (a, i) in (a, b, c, d) and not (i, b) in (a, b, c, d) and not (i, a) in (a, b, c, d) and not (i, c) in (a, b, c, d) and not (i, d) in (a, b, c, d):\n                count += 1\n    return count\n\n",
      "difficulty": "interview",
      "split": "test"
   },
   {
      "task_id": 2521,
      "prompt": "Complete the Python function given the prompt below:\nLet N be a positive integer.\nThere is a numerical sequence of length 3N, a = (a_1, a_2,..., a_{3N}).\nSnuke is constructing a new sequence of length 2N, a', by removing exactly N elements from a without changing the order of the remaining elements.\nHere, the score of a' is defined as follows: (the sum of the elements in the first half of a') - (the sum of the elements in the second half of a').\nFind the maximum possible score of a'.\n-----Constraints-----\n - 1 \u2264 N \u2264 10^5\n - a_i is an integer.\n - 1 \u2264 a_i \u2264 10^9\n-----Partial Score-----\n - In the test set worth 300 points, N \u2264 1000.\n-----Input-----\nInput is given from Standard Input in the following format:\nN\na_1 a_2... a_{3N}\n-----Output-----\nPrint the maximum possible score of a'.\n-----Sample Input-----\n2\n3 1 4 1 5 9\n-----Sample Output-----\n1\nWhen a_2 and a_6 are removed, a' will be (3, 4, 1, 5), which has a score of (3 + 4) - (1 + 5) = 1.\n\ndef",
      "answer": "def score(a):\n    return (sum(a[:len(a)//2]) - sum(a[len(a)//2:]))\n\n",
      "difficulty": "interview",
      "split": "test"
   },
   {
      "task_id": 2522,
      "prompt": "Complete the Python function given the prompt below:\nGiven are two sequences A and B, both of length N.\nA and B are each sorted in the ascending order.\nCheck if it is possible to reorder the terms of B so that for each i (1 \\leq i \\leq N) A_i \\neq B_i holds, and if it is possible, output any of the reorderings that achieve it.\n-----Constraints-----\n - 1\\leq N \\leq 2 \\times 10^5\n - 1\\leq A_i,B_i \\leq N\n - A and B are each sorted in the ascending order.\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nA_1 A_2 \\cdots A_N\nB_1 B_2 \\cdots B_N\n-----Output-----\nIf there exist no reorderings that satisfy the condition, print No.\nIf there exists a reordering that satisfies the condition, print Yes on the first line.\nAfter that, print a reordering of B on the second line, separating terms with a whitespace.\nIf there are multiple reorderings that satisfy the condition, you can print any of them.\n-----Sample Input-----\n6\n1 1 1 2 2 3\n1 1 1 2 2 3\n-----Sample Output-----\nYes\n2 2 3 1 1 1\n\n\ndef",
      "answer": "def solve(n, a, b):\n    a.sort()\n    b.sort()\n    for i in range(n):\n        if a[i]!= b[i]:\n            return \"No\"\n    return \"Yes\"\n\n",
      "difficulty": "interview",
      "split": "test"
   },
   {
      "task_id": 2523,
      "prompt": "Complete the Python function given the prompt below:\nYou are given a string S consisting of 0 and 1.\nFind the maximum integer K not greater than |S| such that we can turn all the characters of S into 0 by repeating the following operation some number of times.\n - Choose a contiguous segment [l,r] in S whose length is at least K (that is, r-l+1\\geq K must be satisfied). For each integer i such that l\\leq i\\leq r, do the following: if S_i is 0, replace it with 1; if S_i is 1, replace it with 0.\n-----Constraints-----\n - 1\\leq |S|\\leq 10^5\n - S_i(1\\leq i\\leq N) is either 0 or 1.\n-----Input-----\nInput is given from Standard Input in the following format:\nS\n-----Output-----\nPrint the maximum integer K such that we can turn all the characters of S into 0 by repeating the operation some number of times.\n-----Sample Input-----\n010\n-----Sample Output-----\n2\nWe can turn all the characters of S into 0 by the following operations:\n - Perform the operation on the segment S[1,3] with length 3. S is now 101.\n - Perform the operation on the segment S[1,2] with length 2. S is now 011.\n - Perform the operation on the segment S[2,3] with length 2. S is now 000.\n\ndef",
      "answer": "def max_k(s):\n    max_k = 0\n    for i in range(len(s)):\n        if s[i] == '0':\n            s[i] = '1'\n        else:\n            s[i] = '0'\n        if len(s) > max_k:\n            max_k = len(s)\n    return max_k\n\n",
      "difficulty": "interview",
      "split": "test"
   },
   {
      "task_id": 2524,
      "prompt": "Complete the Python function given the prompt below:\nWe have N integers. The i-th integer is A_i.\nFind \\sum_{i=1}^{N-1}\\sum_{j=i+1}^{N} (A_i \\mbox{ XOR } A_j), modulo (10^9+7).What is \\mbox{ XOR }?\nThe XOR of integers A and B, A \\mbox{ XOR } B, is defined as follows:\n - When A \\mbox{ XOR } B is written in base two, the digit in the 2^k's place (k \\geq 0) is 1 if either A or B, but not both, has 1 in the 2^k's place, and 0 otherwise.\nFor example, 3 \\mbox{ XOR } 5 = 6. (In base two: 011 \\mbox{ XOR } 101 = 110.)\n-----Constraints-----\n - 2 \\leq N \\leq 3 \\times 10^5\n - 0 \\leq A_i < 2^{60}\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nA_1 A_2... A_N\n-----Output-----\nPrint the value \\sum_{i=1}^{N-1}\\sum_{j=i+1}^{N} (A_i \\mbox{ XOR } A_j), modulo (10^9+7).\n-----Sample Input-----\n3\n1 2 3\n-----Sample Output-----\n6\nWe have (1\\mbox{ XOR } 2)+(1\\mbox{ XOR } 3)+(2\\mbox{ XOR } 3)=3+2+1=6.\n\ndef",
      "answer": "def XOR(A):\n    return sum(A)\n\n",
      "difficulty": "interview",
      "split": "test"
   },
   {
      "task_id": 2525,
      "prompt": "Complete the Python function given the prompt below:\nTakahashi has a string S consisting of lowercase English letters.\nStarting with this string, he will produce a new one in the procedure given as follows.\nThe procedure consists of Q operations. In Operation i (1 \\leq i \\leq Q), an integer T_i is provided, which means the following:\n - If T_i = 1: reverse the string S.\n - If T_i = 2: An integer F_i and a lowercase English letter C_i are additionally provided.\n - If F_i = 1 : Add C_i to the beginning of the string S.\n - If F_i = 2 : Add C_i to the end of the string S.\nHelp Takahashi by finding the final string that results from the procedure.\n-----Constraints-----\n - 1 \\leq |S| \\leq 10^5\n - S consists of lowercase English letters.\n - 1 \\leq Q \\leq 2 \\times 10^5\n - T_i = 1 or 2.\n - F_i = 1 or 2, if provided.\n - C_i is a lowercase English letter, if provided.\n-----Input-----\nInput is given from Standard Input in the following format:\nS\nQ\nQuery_1\n:\nQuery_Q\nIn the 3-rd through the (Q+2)-th lines, Query_i is one of the following:\n1\nwhich means T_i = 1, and:\n2 F_i C_i\nwhich means T_i = 2.\n-----Output-----\nPrint the resulting string.\n-----Sample Input-----\na\n4\n2 1 p\n1\n2 2 c\n1\n-----Sample Output-----\ncpa\nThere will be Q = 4 operations. Initially, S is a.\n - Operation 1: Add p at the beginning of S. S becomes pa.\n - Operation 2: Reverse S. S becomes ap.\n - Operation 3: Add c at the end of S. S becomes apc.\n - Operation 4: Reverse S. S becomes cpa.\nThus, the resulting string is cpa.\n\ndef",
      "answer": "def reverse_string(s):\n    return s[::-1]\n\n",
      "difficulty": "interview",
      "split": "test"
   },
   {
      "task_id": 2526,
      "prompt": "Complete the Python function given the prompt below:\nYou are going to eat X red apples and Y green apples.\nYou have A red apples of deliciousness p_1,p_2, \\dots, p_A, B green apples of deliciousness q_1,q_2, \\dots, q_B, and C colorless apples of deliciousness r_1,r_2, \\dots, r_C.\nBefore eating a colorless apple, you can paint it red or green, and it will count as a red or green apple, respectively.\nFrom the apples above, you will choose the apples to eat while making the sum of the deliciousness of the eaten apples as large as possible.\nFind the maximum possible sum of the deliciousness of the eaten apples that can be achieved when optimally coloring zero or more colorless apples.\n-----Constraints-----\n - 1 \\leq X \\leq A \\leq 10^5\n - 1 \\leq Y \\leq B \\leq 10^5\n - 1 \\leq C \\leq 10^5\n - 1 \\leq p_i \\leq 10^9\n - 1 \\leq q_i \\leq 10^9\n - 1 \\leq r_i \\leq 10^9\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nX Y A B C\np_1 p_2... p_A\nq_1 q_2... q_B\nr_1 r_2... r_C\n-----Output-----\nPrint the maximum possible sum of the deliciousness of the eaten apples.\n-----Sample Input-----\n1 2 2 2 1\n2 4\n5 1\n3\n-----Sample Output-----\n12\nThe maximum possible sum of the deliciousness of the eaten apples can be achieved as follows:\n - Eat the 2-nd red apple.\n - Eat the 1-st green apple.\n - Paint the 1-st colorless apple green and eat it.\n\ndef",
      "answer": "def max_deliciousness(x, y, a, b, c):\n    # your code here\n    return max(x + y, a + b, c + x + y)\n\n",
      "difficulty": "interview",
      "split": "test"
   },
   {
      "task_id": 2527,
      "prompt": "Complete the Python function given the prompt below:\nDilku and Bhopu live in Artland. Dilku loves Bhopu and he writes a message : \u201ciloveyou\u201d\non paper and wishes to send it to Bhopu. As Dilku is busy making an artwork, he asks his friend Raj to send the message to Bhopu. However Raj has a condition that he may add/remove some  characters and jumble the letters of the message.\nAs Bhopu understands Dilku, she can read \u201ciloveyou\u201d from the message if all the characters of the string \u201ciloveyou\u201d are in the message received by her. Bhopu is happy if she can read \u201ciloveyou\u201d from the message. Otherwise, she is sad. Tell whether Bhopu is happy or sad.\n-----Input-----\nInput contains a string S, where S is the message received by Bhopu. String S consists of only lowercase letters.\n-----Output-----\nOutput \u201chappy\u201d if Bhopu is happy and \u201csad\u201d if Bhopu is sad.\n-----Constraints-----\n1 \u2264 |S| \u2264 100\nWhere |S| denotes length of message string S\n-----Example-----\nInput 1:\niloveyou\nOutput 1:\nhappy\nInput 2:\nulrvysioqjifo\nOutput 2:\nsad\nInput 3:\nabcvleouioydef\nOutput 3:\nhappy\n\ndef",
      "answer": "def check_happy(s):\n    s = s.lower()\n    s = ''.join(sorted(s))\n    s = ''.join(sorted(s, reverse=True))\n    if s == s[::-1]:\n        return 'happy'\n    else:\n        return'sad'\n\n",
      "difficulty": "interview",
      "split": "test"
   },
   {
      "task_id": 2528,
      "prompt": "Complete the Python function given the prompt below:\nChef loves research! Now he is looking for subarray of maximal length with non-zero product.\nChef has an array A with N elements: A1, A2,..., AN. \nSubarray Aij of array A is elements from index i to index j: Ai, Ai+1,..., Aj. \nProduct of subarray Aij is product of all its elements (from ith to jth). \n-----Input-----\n- First line contains sinlge integer N denoting the number of elements.\n- Second line contains N space-separated integers A1, A2,..., AN denoting the elements of array. \n-----Output-----\n- In a single line print single integer - the maximal length of subarray with non-zero product. \n-----Constraints-----\n- 1 \u2264 N \u2264 100000\n- 0 \u2264 Ai \u2264 10000\n-----Example-----\nInput:\n6\n1 0 2 3 0 4\nOutput:\n2\nInput:\n1\n0\nOutput:\n0\nInput:\n3\n1 0 1\nOutput:\n1\n-----Explanation-----\nFor the first sample subarray is: {2, 3}. \nFor the second sample there are no subbarays with non-zero product. \nFor the third sample subbarays is {1}, (the first element, or the third one).\n\ndef",
      "answer": "def max_product(arr):\n    max_product = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if arr[i] * arr[j] > max_product:\n                max_product = arr[i] * arr[j]\n    return max_product\n\n",
      "difficulty": "interview",
      "split": "test"
   },
   {
      "task_id": 2529,
      "prompt": "Complete the Python function given the prompt below:\nPooja would like to withdraw X $US from an ATM. The cash machine will only accept the transaction if X is a multiple of 5, and Pooja's account balance has enough cash to perform the withdrawal transaction (including bank charges).  For each successful withdrawal the bank charges 0.50 $US.\nCalculate Pooja's account balance after an attempted transaction.  \n-----Input-----\nPositive integer 0 < X <= 2000 - the amount of cash which Pooja wishes to withdraw.\nNonnegative number 0<= Y <= 2000 with two digits of precision - Pooja's initial account balance.\n-----Output-----\nOutput the account balance after the attempted transaction, given as a number with two digits of precision.  If there is not enough money in the account to complete the transaction, output the current bank balance.\n-----Example - Successful Transaction-----\nInput:\n30 120.00\nOutput:\n89.50\n-----Example - Incorrect Withdrawal Amount (not multiple of 5)-----\nInput:\n42 120.00\nOutput:\n120.00\n-----Example - Insufficient Funds-----\nInput:\n300 120.00\nOutput:\n120.00\n\ndef",
      "answer": "def withdraw(x,y):\n    if x%5==0 and y>=x:\n        return y-x\n    else:\n        return y\nprint(withdraw(30,120.00))\nprint(withdraw(42,120.00))\nprint(withdraw(300,120.00))\nprint(withdraw(300,120.00))\nprint(withdraw(300,120.00))\nprint(withdraw(300,120.00))\nprint(withdraw(300,120.00))\nprint(withdraw(300,120.00))\nprint(withdraw(300,120.00))\nprint(withdraw(300,120.00))\nprint(withdraw(300,120.00))\nprint(withdraw(300,120.00))\nprint(withdraw(300,120.00))\nprint(withdraw(300,120.00))\nprint(withdraw(300,120.00))\nprint(withdraw(300,120.00))\nprint(withdraw(300,120.00))\nprint(withdraw(300,120.00))\nprint(withdraw(300,120.00))\nprint(withdraw(300,120.00))\nprint(withdraw(300,120.00))\nprint(withdraw(300,120.00))\nprint(withdraw(300,120.00))\nprint(withdraw(300,120.00))\nprint(withdraw(300,120.00))\nprint(withdraw(300,120.00))\nprint(withdraw(300,120.00))\nprint(withdraw(300,120.00))\nprint(withdraw(300,120.00))\nprint(withdraw(300,120.00))\nprint(withdraw(300,120.00))\nprint(withdraw(300,120.00))\nprint(withdraw(300,120.00))\nprint(withdraw(300,120.00))\nprint(withdraw(300,120.00))\nprint(withdraw(300,120.00))\nprint(withdraw(300,120.00))\nprint(withdraw(300,120.00))\nprint(withdraw(300,120.00))\nprint(withdraw(300,120.00))\nprint(withdraw(300,120.00))\nprint(withdraw(300,120.00))\nprint(withdraw(300,120.00))\nprint(withdraw(300,120.00))\nprint(withdraw(300,120.00))\nprint(withdraw(300,120.00))\nprint(withdraw(300,120.00))\nprint(withdraw(300,120.00))\nprint(withdraw(300,120.00))\nprint(withdraw(300,120.00))\nprint(withdraw(300,120.00))\nprint(withdraw(300,120.00))\nprint(withdraw(300,120.00))\nprint(withdraw(300,120.00))\nprint(withdraw(300,120.00))\nprint(withdraw(300,120.00))\nprint(withdraw(300,120.00))\nprint(withdraw(300,120.00))\nprint(withdraw(300,120.00))\nprint(withdraw(300,120.00))\nprint(withdraw(300,120.00))\nprint(withdraw(300,120.00))\nprint(withdraw(300,120.00))\nprint(withdraw(300,120.00))\nprint(withdraw(300,120.00))\nprint(withdraw(300,120.00))\nprint(withdraw(300,120.00))\nprint(withdraw(300,120.00))\nprint(withdraw(300,120.00))\nprint(withdraw(300,120.00))\nprint(withdraw(300,120.00))\nprint(withdraw(300,120.00))\nprint(withdraw(300,120.00))\nprint(withdraw(300,120.00))\nprint(withdraw(300,120.00))\nprint(withdraw(300,120.00))\nprint(withdraw(300,120.00))\nprint(withdraw(300,120.00))\nprint(withdraw(300,120.00))\nprint(withdraw(300,120.00))\nprint(withdraw(300,120.00))\nprint(withdraw(300,120.00))\nprint(withdraw(",
      "difficulty": "interview",
      "split": "test"
   }
]