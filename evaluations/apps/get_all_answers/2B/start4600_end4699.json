[
   {
      "task_id": 4600,
      "prompt": "Complete the Python function given the prompt below:\nTakahashi participated in a contest on AtCoder.\nThe contest had N problems.\nTakahashi made M submissions during the contest.\nThe i-th submission was made for the p_i-th problem and received the verdict S_i (AC or WA).\nThe number of Takahashi's correct answers is the number of problems on which he received an AC once or more.\nThe number of Takahashi's penalties is the sum of the following count for the problems on which he received an AC once or more: the number of WAs received before receiving an AC for the first time on that problem.\nFind the numbers of Takahashi's correct answers and penalties.\n-----Constraints-----\n - N, M, and p_i are integers.\n - 1 \\leq N \\leq 10^5\n - 0 \\leq M \\leq 10^5\n - 1 \\leq p_i \\leq N\n - S_i is AC or WA.\n-----Input-----\nInput is given from Standard Input in the following format:\nN M\np_1 S_1\n:\np_M S_M\n-----Output-----\nPrint the number of Takahashi's correct answers and the number of Takahashi's penalties.\n-----Sample Input-----\n2 5\n1 WA\n1 AC\n2 WA\n2 AC\n2 WA\n-----Sample Output-----\n2 2\nIn his second submission, he received an AC on the first problem for the first time. Before this, he received one WA on this problem.\nIn his fourth submission, he received an AC on the second problem for the first time. Before this, he received one WA on this problem.\nThus, he has two correct answers and two penalties.\n\ndef",
      "answer": "def count_takahashi(n, m, *args):\n    correct_answers = 0\n    penalties = 0\n    for i in range(n):\n        if args[i] == 'AC':\n            correct_answers += 1\n        else:\n            penalties += 1\n    return correct_answers, penalties\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4601,
      "prompt": "Complete the Python function given the prompt below:\nFennec is fighting with N monsters.\nThe health of the i-th monster is H_i.\nFennec can do the following two actions:\n - Attack: Fennec chooses one monster. That monster's health will decrease by 1.\n - Special Move: Fennec chooses one monster. That monster's health will become 0.\nThere is no way other than Attack and Special Move to decrease the monsters' health.\nFennec wins when all the monsters' healths become 0 or below.\nFind the minimum number of times Fennec needs to do Attack (not counting Special Move) before winning when she can use Special Move at most K times.\n-----Constraints-----\n - 1 \\leq N \\leq 2 \\times 10^5\n - 0 \\leq K \\leq 2 \\times 10^5\n - 1 \\leq H_i \\leq 10^9\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN K\nH_1... H_N\n-----Output-----\nPrint the minimum number of times Fennec needs to do Attack (not counting Special Move) before winning.\n-----Sample Input-----\n3 1\n4 1 5\n-----Sample Output-----\n5\nBy using Special Move on the third monster, and doing Attack four times on the first monster and once on the second monster, Fennec can win with five Attacks.\n\ndef",
      "answer": "def fennec(n, k, h):\n    h.sort()\n    count = 0\n    while h:\n        if h[0] == 0:\n            h.pop(0)\n        else:\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)\n            h.pop(0)",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4602,
      "prompt": "Complete the Python function given the prompt below:\nThere are N balls in the xy-plane. The coordinates of the i-th of them is (x_i, i).\nThus, we have one ball on each of the N lines y = 1, y = 2,..., y = N.\nIn order to collect these balls, Snuke prepared 2N robots, N of type A and N of type B.\nThen, he placed the i-th type-A robot at coordinates (0, i), and the i-th type-B robot at coordinates (K, i).\nThus, now we have one type-A robot and one type-B robot on each of the N lines y = 1, y = 2,..., y = N.\nWhen activated, each type of robot will operate as follows.\n - When a type-A robot is activated at coordinates (0, a), it will move to the position of the ball on the line y = a, collect the ball, move back to its original position (0, a) and deactivate itself. If there is no such ball, it will just deactivate itself without doing anything.\n - When a type-B robot is activated at coordinates (K, b), it will move to the position of the ball on the line y = b, collect the ball, move back to its original position (K, b) and deactivate itself. If there is no such ball, it will just deactivate itself without doing anything.\nSnuke will activate some of the 2N robots to collect all of the balls. Find the minimum possible total distance covered by robots.\n-----Constraints-----\n - 1 \\leq N \\leq 100\n - 1 \\leq K \\leq 100\n - 0 < x_i < K\n - All input values are integers.\n-----Inputs-----\nInput is given from Standard Input in the following format:\nN\nK\nx_1 x_2... x_N\n-----Outputs-----\nPrint the minimum possible total distance covered by robots.\n-----Sample Input-----\n1\n10\n2\n-----Sample Output-----\n4\nThere are just one ball, one type-A robot and one type-B robot.\nIf the type-A robot is used to collect the ball, the distance from the robot to the ball is 2, and the distance from the ball to the original position of the robot is also 2, for a total distance of 4.\nSimilarly, if the type-B robot is used, the total distance covered will be 16.\nThus, the total distance covered will be minimized when the type-A robot is used. The output should be 4.\n\ndef",
      "answer": "def minDistance(n, k, arr):\n    # code here\n    arr.sort()\n    arr = list(set(arr))\n    arr.sort()\n    arr = list(set(arr))\n    arr = list(set(arr))\n    arr = list(set(arr))\n    arr = list(set(arr))\n    arr = list(set(arr))\n    arr = list(set(arr))\n    arr = list(set(arr))\n    arr = list(set(arr))\n    arr = list(set(arr))\n    arr = list(set(arr))\n    arr = list(set(arr))\n    arr = list(set(arr))\n    arr = list(set(arr))\n    arr = list(set(arr))\n    arr = list(set(arr))\n    arr = list(set(arr))\n    arr = list(set(arr))\n    arr = list(set(arr))\n    arr = list(set(arr))\n    arr = list(set(arr))\n    arr = list(set(arr))\n    arr = list(set(arr))\n    arr = list(set(arr))\n    arr = list(set(arr))\n    arr = list(set(arr))\n    arr = list(set(arr))\n    arr = list(set(arr))\n    arr = list(set(arr))\n    arr = list(set(arr))\n    arr = list(set(arr))\n    arr = list(set(arr))\n    arr = list(set(arr))\n    arr = list(set(arr))\n    arr = list(set(arr))\n    arr = list(set(arr))\n    arr = list(set(arr))\n    arr = list(set(arr))\n    arr = list(set(arr))\n    arr = list(set(arr))\n    arr = list(set(arr))\n    arr = list(set(arr))\n    arr = list(set(arr))\n    arr = list(set(arr))\n    arr = list(set(arr))\n    arr = list(set(arr))\n    arr = list(set(arr))\n    arr = list(set(arr))\n    arr = list(set(arr))\n    arr = list(set(arr))\n    arr = list(set(arr))\n    arr = list(set(arr))\n    arr = list(set(arr))\n    arr = list(set(arr))\n    arr = list(set(arr))\n    arr = list(set(arr))\n    arr = list(set(arr))\n    arr = list(set(arr))\n    arr = list(set(arr))\n    arr = list(set(arr))\n    arr = list(set(arr))\n    arr = list(set(arr))\n    arr = list(set(arr))\n    arr = list(set(arr))\n    arr = list(set(arr))\n    arr = list(set(arr))\n    arr = list(set(arr))\n    arr = list(set(arr))\n    arr = list(set(arr))\n    arr = list(set(arr))\n    arr = list(set(arr))\n    arr = list(set(arr))\n    arr = list(set(arr))\n    arr = list(set(arr))\n    arr = list(set(arr))\n    arr = list(set(arr))\n    arr = list(set(arr))\n    arr = list(set(arr))\n    arr = list(set(arr))\n    arr = list(set(arr))\n    arr = list(set(arr))\n    arr = list(set(arr))\n    arr = list(set(arr))\n    arr = list(set(arr))\n    arr = list(set(arr))\n    arr = list(set(arr))\n    arr = list(set(arr))\n    arr = list(set(arr))\n    arr = list(set(arr))\n    arr = list(set(arr))\n    arr = list(set(arr))\n    arr = list(set(arr))\n    arr = list(set(arr))\n    arr = list(set(arr))\n    arr = list(set(arr))\n    arr = list(set(arr))\n    arr = list(set(arr))\n    arr = list(set(arr))\n    arr = list(set(arr))\n    arr = list(set(",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4603,
      "prompt": "Complete the Python function given the prompt below:\nYou planned a trip using trains and buses.\nThe train fare will be A yen (the currency of Japan) if you buy ordinary tickets along the way, and B yen if you buy an unlimited ticket.\nSimilarly, the bus fare will be C yen if you buy ordinary tickets along the way, and D yen if you buy an unlimited ticket.\nFind the minimum total fare when the optimal choices are made for trains and buses.\n-----Constraints-----\n - 1 \\leq A \\leq 1 000\n - 1 \\leq B \\leq 1 000\n - 1 \\leq C \\leq 1 000\n - 1 \\leq D \\leq 1 000\n - All input values are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nA\nB\nC\nD\n-----Output-----\nPrint the minimum total fare.\n-----Sample Input-----\n600\n300\n220\n420\n-----Sample Output-----\n520\nThe train fare will be 600 yen if you buy ordinary tickets, and 300 yen if you buy an unlimited ticket.\nThus, the optimal choice for trains is to buy an unlimited ticket for 300 yen.\nOn the other hand, the optimal choice for buses is to buy ordinary tickets for 220 yen.\nTherefore, the minimum total fare is 300 + 220 = 520 yen.\n\ndef",
      "answer": "def min_fare(a,b,c,d):\n    if a==1 and b==1 and c==1 and d==1:\n        return a+b+c+d\n    elif a==1 and b==1 and c==0 and d==1:\n        return b+d\n    elif a==1 and b==0 and c==1 and d==1:\n        return a+d\n    elif a==1 and b==1 and c==1 and d==0:\n        return a+b\n    elif a==0 and b==1 and c==1 and d==1:\n        return a+b+c\n    elif a==1 and b==0 and c==1 and d==0:\n        return a+c\n    elif a==0 and b==1 and c==0 and d==1:\n        return a+d\n    elif a==1 and b==0 and c==0 and d==0:\n        return a\n    elif a==0 and b==0 and c==0 and d==0:\n        return 0\n    else:\n        return -1\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4604,
      "prompt": "Complete the Python function given the prompt below:\nThere are N people, conveniently numbered 1 through N.\nThey were standing in a row yesterday, but now they are unsure of the order in which they were standing.\nHowever, each person remembered the following fact: the absolute difference of the number of the people who were standing to the left of that person, and the number of the people who were standing to the right of that person.\nAccording to their reports, the difference above for person i is A_i.\nBased on these reports, find the number of the possible orders in which they were standing.\nSince it can be extremely large, print the answer modulo 10^9+7.\nNote that the reports may be incorrect and thus there may be no consistent order.\nIn such a case, print 0.\n-----Constraints-----\n - 1\u2266N\u226610^5\n - 0\u2266A_i\u2266N-1\n-----Input-----\nThe input is given from Standard Input in the following format:\nN\nA_1 A_2... A_N\n-----Output-----\nPrint the number of the possible orders in which they were standing, modulo 10^9+7.\n-----Sample Input-----\n5\n2 4 4 0 2\n-----Sample Output-----\n4\nThere are four possible orders, as follows:\n - 2,1,4,5,3\n - 2,5,4,1,3\n - 3,1,4,5,2\n - 3,5,4,1,2\n\ndef",
      "answer": "def solve(n, a):\n    res = 0\n    for i in range(n):\n        res += abs(a[i] - a[i - 1])\n    return res % (10**9 + 7)\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4605,
      "prompt": "Complete the Python function given the prompt below:\nFind the sum of the integers between 1 and N (inclusive), whose sum of digits written in base 10 is between A and B (inclusive).\n-----Constraints-----\n - 1 \\leq N \\leq 10^4\n - 1 \\leq A \\leq B \\leq 36\n - All input values are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN A B\n-----Output-----\nPrint the sum of the integers between 1 and N (inclusive), whose sum of digits written in base 10 is between A and B (inclusive).\n-----Sample Input-----\n20 2 5\n-----Sample Output-----\n84\nAmong the integers not greater than 20, the ones whose sums of digits are between 2 and 5, are: 2,3,4,5,11,12,13,14 and 20. We should print the sum of these, 84.\n\ndef",
      "answer": "def sum_digits(n, a, b):\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n = n // 10\n    if sum >= a and sum <= b:\n        return sum\n    else:\n        return -1\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4606,
      "prompt": "Complete the Python function given the prompt below:\nThis contest, AtCoder Beginner Contest, is abbreviated as ABC.\nWhen we refer to a specific round of ABC, a three-digit number is appended after ABC. For example, ABC680 is the 680th round of ABC.\nWhat is the abbreviation for the N-th round of ABC? Write a program to output the answer.\n-----Constraints-----\n - 100 \u2264 N \u2264 999\n-----Input-----\nInput is given from Standard Input in the following format:\nN\n-----Output-----\nPrint the abbreviation for the N-th round of ABC.\n-----Sample Input-----\n100\n-----Sample Output-----\nABC100\nThe 100th round of ABC is ABC100.\n\ndef",
      "answer": "def abc(n):\n    return 'ABC' + str(n)\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4607,
      "prompt": "Complete the Python function given the prompt below:\nIn AtCoder Kingdom, Gregorian calendar is used, and dates are written in the \"year-month-day\" order, or the \"month-day\" order without the year.\nFor example, May 3, 2018 is written as 2018-5-3, or 5-3 without the year.  \nIn this country, a date is called Takahashi when the month and the day are equal as numbers. For example, 5-5 is Takahashi.\nHow many days from 2018-1-1 through 2018-a-b are Takahashi?\n-----Constraints-----\n - a is an integer between 1 and 12 (inclusive).\n - b is an integer between 1 and 31 (inclusive).\n - 2018-a-b is a valid date in Gregorian calendar.\n-----Input-----\nInput is given from Standard Input in the following format:\na b\n-----Output-----\nPrint the number of days from 2018-1-1 through 2018-a-b that are Takahashi.\n-----Sample Input-----\n5 5\n-----Sample Output-----\n5\nThere are five days that are Takahashi: 1-1, 2-2, 3-3, 4-4 and 5-5.\n\ndef",
      "answer": "def takahashi(a, b):\n    count = 0\n    for i in range(a, b+1):\n        if i % 4 == 0:\n            count += 1\n    return count\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4608,
      "prompt": "Complete the Python function given the prompt below:\nTakahashi wants to gain muscle, and decides to work out at AtCoder Gym.\nThe exercise machine at the gym has N buttons, and exactly one of the buttons is lighten up.\nThese buttons are numbered 1 through N.\nWhen Button i is lighten up and you press it, the light is turned off, and then Button a_i will be lighten up. It is possible that i=a_i.\nWhen Button i is not lighten up, nothing will happen by pressing it.\nInitially, Button 1 is lighten up. Takahashi wants to quit pressing buttons when Button 2 is lighten up.\nDetermine whether this is possible. If the answer is positive, find the minimum number of times he needs to press buttons.\n-----Constraints-----\n - 2 \u2264 N \u2264 10^5\n - 1 \u2264 a_i \u2264 N\n-----Input-----\nInput is given from Standard Input in the following format:\nN\na_1\na_2\n:\na_N\n-----Output-----\nPrint -1 if it is impossible to lighten up Button 2.\nOtherwise, print the minimum number of times we need to press buttons in order to lighten up Button 2.\n-----Sample Input-----\n3\n3\n1\n2\n-----Sample Output-----\n2\nPress Button 1, then Button 3.\n\ndef",
      "answer": "def lighten_up(n):\n    if n == 1:\n        return -1\n    else:\n        return n\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4609,
      "prompt": "Complete the Python function given the prompt below:\nYou are playing the following game with Joisino.\n - Initially, you have a blank sheet of paper.\n - Joisino announces a number. If that number is written on the sheet, erase the number from the sheet; if not, write the number on the sheet. This process is repeated N times.\n - Then, you are asked a question: How many numbers are written on the sheet now?\nThe numbers announced by Joisino are given as A_1,...,A_N in the order she announces them. How many numbers will be written on the sheet at the end of the game?\n-----Constraints-----\n - 1\u2264N\u2264100000\n - 1\u2264A_i\u22641000000000(=10^9)\n - All input values are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nA_1\n:\nA_N\n-----Output-----\nPrint how many numbers will be written on the sheet at the end of the game.\n-----Sample Input-----\n3\n6\n2\n6\n-----Sample Output-----\n1\nThe game proceeds as follows:\n - 6 is not written on the sheet, so write 6.\n - 2 is not written on the sheet, so write 2.\n - 6 is written on the sheet, so erase 6.\nThus, the sheet contains only 2 in the end. The answer is 1.\n\ndef",
      "answer": "def game(n):\n    sheet = []\n    for i in range(n):\n        sheet.append(int(input()))\n    count = 0\n    for i in range(n):\n        if sheet[i] == 0:\n            count += 1\n            sheet[i] = 1\n    print(count)\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4610,
      "prompt": "Complete the Python function given the prompt below:\nTakahashi has N balls. Initially, an integer A_i is written on the i-th ball.\nHe would like to rewrite the integer on some balls so that there are at most K different integers written on the N balls.\nFind the minimum number of balls that Takahashi needs to rewrite the integers on them.\n-----Constraints-----\n - 1 \\leq K \\leq N \\leq 200000\n - 1 \\leq A_i \\leq N\n - All input values are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN K\nA_1 A_2... A_N\n-----Output-----\nPrint the minimum number of balls that Takahashi needs to rewrite the integers on them.\n-----Sample Input-----\n5 2\n1 1 2 2 5\n-----Sample Output-----\n1\nFor example, if we rewrite the integer on the fifth ball to 2, there are two different integers written on the balls: 1 and 2.\nOn the other hand, it is not possible to rewrite the integers on zero balls so that there are at most two different integers written on the balls, so we should print 1.\n\ndef",
      "answer": "def minimum_balls(n, k, arr):\n    arr.sort()\n    count = 0\n    for i in range(n):\n        if count < k:\n            if arr[i]!= i + 1:\n                count += 1\n        else:\n            break\n    return count\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4611,
      "prompt": "Complete the Python function given the prompt below:\nAtCoDeer the deer is going on a trip in a two-dimensional plane.\nIn his plan, he will depart from point (0, 0) at time 0, then for each i between 1 and N (inclusive), he will visit point (x_i,y_i) at time t_i.\nIf AtCoDeer is at point (x, y) at time t, he can be at one of the following points at time t+1: (x+1,y), (x-1,y), (x,y+1) and (x,y-1).\nNote that he cannot stay at his place.\nDetermine whether he can carry out his plan.\n-----Constraints-----\n - 1 \u2264 N \u2264 10^5\n - 0 \u2264 x_i \u2264 10^5\n - 0 \u2264 y_i \u2264 10^5\n - 1 \u2264 t_i \u2264 10^5\n - t_i < t_{i+1} (1 \u2264 i \u2264 N-1)\n - All input values are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nt_1 x_1 y_1\nt_2 x_2 y_2\n:\nt_N x_N y_N\n-----Output-----\nIf AtCoDeer can carry out his plan, print Yes; if he cannot, print No.\n-----Sample Input-----\n2\n3 1 2\n6 1 1\n-----Sample Output-----\nYes\nFor example, he can travel as follows: (0,0), (0,1), (1,1), (1,2), (1,1), (1,0), then (1,1).\n\ndef",
      "answer": "def at_co_deer(n, t_1, x_1, y_1, t_2, x_2, y_2):\n    if (x_1, y_1) == (x_2, y_2):\n        return \"Yes\"\n    if (x_1, y_1) == (x_2, y_2):\n        return \"Yes\"\n    if (x_1, y_1) == (x_2, y_2):\n        return \"Yes\"\n    if (x_1, y_1) == (x_2, y_2):\n        return \"Yes\"\n    if (x_1, y_1) == (x_2, y_2):\n        return \"Yes\"\n    if (x_1, y_1) == (x_2, y_2):\n        return \"Yes\"\n    if (x_1, y_1) == (x_2, y_2):\n        return \"Yes\"\n    if (x_1, y_1) == (x_2, y_2):\n        return \"Yes\"\n    if (x_1, y_1) == (x_2, y_2):\n        return \"Yes\"\n    if (x_1, y_1) == (x_2, y_2):\n        return \"Yes\"\n    if (x_1, y_1) == (x_2, y_2):\n        return \"Yes\"\n    if (x_1, y_1) == (x_2, y_2):\n        return \"Yes\"\n    if (x_1, y_1) == (x_2, y_2):\n        return \"Yes\"\n    if (x_1, y_1) == (x_2, y_2):\n        return \"Yes\"\n    if (x_1, y_1) == (x_2, y_2):\n        return \"Yes\"\n    if (x_1, y_1) == (x_2, y_2):\n        return \"Yes\"\n    if (x_1, y_1) == (x_2, y_2):\n        return \"Yes\"\n    if (x_1, y_1) == (x_2, y_2):\n        return \"Yes\"\n    if (x_1, y_1) == (x_2, y_2):\n        return \"Yes\"\n    if (x_1, y_1) == (x_2, y_2):\n        return \"Yes\"\n    if (x_1, y_1) == (x_2, y_2):\n        return \"Yes\"\n    if (x_1, y_1) == (x_2, y_2):\n        return \"Yes\"\n    if (x_1, y_1) == (x_2, y_2):\n        return \"Yes\"\n    if (x_1, y_1) == (x_2, y_2):\n        return \"Yes\"\n    if (x_1, y_1) == (x_2, y_2):\n        return \"Yes\"\n    if (x_1, y_1) == (x_2, y_2):\n        return \"Yes\"\n    if (x_1, y_1) == (x_2, y_2):\n        return \"Yes\"\n    if (x_1, y_1) == (x_2, y_2):\n        return \"Yes\"\n    if (x_1, y_1) == (x_2, y_2):\n        return \"Yes\"\n    if (x_1, y_1) == (x_2, y_2):\n        return \"Yes\"\n    if (x_1, y_1) == (x_2, y_2):\n        return \"Yes\"\n    if (x_1, y_1) == (x_2, y_2):\n        return \"Yes\"\n    if (x_1, y_1) == (x_2, y_2):\n        return \"Yes\"\n    if (x_1, y_1) == (x_2, y_2):\n        return \"Yes\"\n    if (x_1, y_1) == (x_2, y_2):\n        return \"Yes\"\n    if (x_1, y_1",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4612,
      "prompt": "Complete the Python function given the prompt below:\nYou are given two positive integers a and b.\nLet x be the average of a and b.\nPrint x rounded up to the nearest integer.\n-----Constraints-----\n - a and b are integers.\n - 1 \\leq a, b \\leq 100\n-----Input-----\nInput is given from Standard Input in the following format:\na b\n-----Output-----\nPrint x rounded up to the nearest integer.\n-----Sample Input-----\n1 3\n-----Sample Output-----\n2\nThe average of 1 and 3 is 2.0, and it will be rounded up to the nearest integer, 2.\n\ndef",
      "answer": "def average(a, b):\n    return (a + b) / 2\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4613,
      "prompt": "Complete the Python function given the prompt below:\nYou are given an undirected connected graph with N vertices and M edges that does not contain self-loops and double edges.\nThe i-th edge (1 \\leq i \\leq M) connects Vertex a_i and Vertex b_i.  \nAn edge whose removal disconnects the graph is called a bridge.\nFind the number of the edges that are bridges among the M edges.  \n-----Notes-----\n - A self-loop is an edge i such that a_i=b_i (1 \\leq i \\leq M).\n - Double edges are a pair of edges i,j such that a_i=a_j and b_i=b_j (1 \\leq i<j \\leq M).\n - An undirected graph is said to be connected when there exists a path between every pair of vertices.\n-----Constraints-----\n - 2 \\leq N \\leq 50\n - N-1 \\leq M \\leq min(N(N\u22121)\u20442,50)\n - 1 \\leq a_i<b_i \\leq N\n - The given graph does not contain self-loops and double edges.\n - The given graph is connected.\n-----Input-----\nInput is given from Standard Input in the following format:  \nN M  \na_1 b_1  \na_2 b_2\n:  \na_M b_M\n-----Output-----\nPrint the number of the edges that are bridges among the M edges.\n-----Sample Input-----\n7 7\n1 3\n2 7\n3 4\n4 5\n4 6\n5 6\n6 7\n-----Sample Output-----\n4\nThe figure below shows the given graph:\nThe edges shown in red are bridges. There are four of them.\n\ndef",
      "answer": "def bridge(n, m, a, b):\n    # code here\n    return 0\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4614,
      "prompt": "Complete the Python function given the prompt below:\nYou are given three integers, A, B and C.\nAmong them, two are the same, but the remaining one is different from the rest.\nFor example, when A=5,B=7,C=5, A and C are the same, but B is different.\nFind the one that is different from the rest among the given three integers.  \n-----Constraints-----\n - -100 \\leq A,B,C \\leq 100 \n - A, B and C are integers.\n - The input satisfies the condition in the statement.\n-----Input-----\nInput is given from Standard Input in the following format:  \nA B C\n-----Output-----\nAmong A, B and C, print the integer that is different from the rest.\n-----Sample Input-----\n5 7 5\n-----Sample Output-----\n7\nThis is the same case as the one in the statement.\n\ndef",
      "answer": "def diff(a,b,c):\n    if a==b and a!=c:\n        return a\n    elif a==c and a!=b:\n        return a\n    elif b==c and b!=a:\n        return b\n    else:\n        return c\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4615,
      "prompt": "Complete the Python function given the prompt below:\nSnuke is making sugar water in a beaker.\nInitially, the beaker is empty. Snuke can perform the following four types of operations any number of times. He may choose not to perform some types of operations.\n - Operation 1: Pour 100A grams of water into the beaker.\n - Operation 2: Pour 100B grams of water into the beaker.\n - Operation 3: Put C grams of sugar into the beaker.\n - Operation 4: Put D grams of sugar into the beaker.\nIn our experimental environment, E grams of sugar can dissolve into 100 grams of water.\nSnuke will make sugar water with the highest possible density.\nThe beaker can contain at most F grams of substances (water and sugar combined), and there must not be any undissolved sugar in the beaker.\nFind the mass of the sugar water Snuke will make, and the mass of sugar dissolved in it.\nIf there is more than one candidate, any of them will be accepted.\nWe remind you that the sugar water that contains a grams of water and b grams of sugar is \\frac{100b}{a + b} percent.\nAlso, in this problem, pure water that does not contain any sugar is regarded as 0 percent density sugar water.\n-----Constraints-----\n - 1 \\leq A < B \\leq 30\n - 1 \\leq C < D \\leq 30\n - 1 \\leq E \\leq 100\n - 100A \\leq F \\leq 3 000\n - A, B, C, D, E and F are all integers.\n-----Inputs-----\nInput is given from Standard Input in the following format:\nA B C D E F\n-----Outputs-----\nPrint two integers separated by a space.\nThe first integer should be the mass of the desired sugar water, and the second should be the mass of the sugar dissolved in it.\n-----Sample Input-----\n1 2 10 20 15 200\n-----Sample Output-----\n110 10\nIn this environment, 15 grams of sugar can dissolve into 100 grams of water, and the beaker can contain at most 200 grams of substances.\nWe can make 110 grams of sugar water by performing Operation 1 once and Operation 3 once.\nIt is not possible to make sugar water with higher density.\nFor example, the following sequences of operations are infeasible:\n - If we perform Operation 1 once and Operation 4 once, there will be undissolved sugar in the beaker.\n - If we perform Operation 2 once and Operation 3 three times, the mass of substances in the beaker will exceed 200 grams.\n\ndef",
      "answer": "def sugar_water(A, B, C, D, E, F):\n    # your code here\n    return A, B\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4616,
      "prompt": "Complete the Python function given the prompt below:\nThe word internationalization is sometimes abbreviated to i18n.\nThis comes from the fact that there are 18 letters between the first i and the last n.\nYou are given a string s of length at least 3 consisting of lowercase English letters.\nAbbreviate s in the same way.\n-----Constraints-----\n - 3 \u2264 |s| \u2264 100 (|s| denotes the length of s.)\n - s consists of lowercase English letters.\n-----Input-----\nInput is given from Standard Input in the following format:\ns\n-----Output-----\nPrint the abbreviation of s.\n-----Sample Input-----\ninternationalization\n-----Sample Output-----\ni18n\n\n\ndef",
      "answer": "def abbreviation(s):\n    return ''.join(sorted(s))\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4617,
      "prompt": "Complete the Python function given the prompt below:\nYou are given a grid with 2 rows and 3 columns of squares.\nThe color of the square at the i-th row and j-th column is represented by the character C_{ij}.\nWrite a program that prints YES if this grid remains the same when rotated 180 degrees, and prints NO otherwise.\n-----Constraints-----\n - C_{i,j}(1 \\leq i \\leq 2, 1 \\leq j \\leq 3) is a lowercase English letter.\n-----Input-----\nInput is given from Standard Input in the following format:\nC_{11}C_{12}C_{13}\nC_{21}C_{22}C_{23}\n-----Output-----\nPrint YES if this grid remains the same when rotated 180 degrees; print NO otherwise.\n-----Sample Input-----\npot\ntop\n-----Sample Output-----\nYES\nThis grid remains the same when rotated 180 degrees.\n\ndef",
      "answer": "def check_rotation(grid):\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j]!= grid[j][i]:\n                return False\n    return True\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4618,
      "prompt": "Complete the Python function given the prompt below:\nYou are given a string s.\nAmong the different substrings of s, print the K-th lexicographically smallest one.\nA substring of s is a string obtained by taking out a non-empty contiguous part in s.\nFor example, if s = ababc, a, bab and ababc are substrings of s, while ac, z and an empty string are not.\nAlso, we say that substrings are different when they are different as strings.\nLet X = x_{1}x_{2}...x_{n} and Y = y_{1}y_{2}...y_{m} be two distinct strings. X is lexicographically larger than Y if and only if Y is a prefix of X or x_{j} > y_{j} where j is the smallest integer such that x_{j} \\neq y_{j}.\n-----Constraints-----\n - 1 \u2264 |s| \u2264 5000\n - s consists of lowercase English letters.\n - 1 \u2264 K \u2264 5\n - s has at least K different substrings.\n-----Partial Score-----\n - 200 points will be awarded as a partial score for passing the test set satisfying |s| \u2264 50.\n-----Input-----\nInput is given from Standard Input in the following format:\ns\nK\n-----Output-----\nPrint the K-th lexicographically smallest substring of K.\n-----Sample Input-----\naba\n4\n-----Sample Output-----\nb\ns has five substrings: a, b, ab, ba and aba.\nAmong them, we should print the fourth smallest one, b.\nNote that we do not count a twice.\n\ndef",
      "answer": "def lex_smallest(s, k):\n    s = sorted(s)\n    for i in range(len(s)):\n        if i == k-1:\n            print(s[i])\n            break\n        if s[i]!= s[i-1]:\n            print(s[i])\n            break\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4619,
      "prompt": "Complete the Python function given the prompt below:\nThere is a rectangle in the xy-plane, with its lower left corner at (0, 0) and its upper right corner at (W, H). Each of its sides is parallel to the x-axis or y-axis. Initially, the whole region within the rectangle is painted white.\nSnuke plotted N points into the rectangle. The coordinate of the i-th (1 \u2266 i \u2266 N) point was (x_i, y_i).\nThen, he created an integer sequence a of length N, and for each 1 \u2266 i \u2266 N, he painted some region within the rectangle black, as follows:\n - If a_i = 1, he painted the region satisfying x < x_i within the rectangle.\n - If a_i = 2, he painted the region satisfying x > x_i within the rectangle.\n - If a_i = 3, he painted the region satisfying y < y_i within the rectangle.\n - If a_i = 4, he painted the region satisfying y > y_i within the rectangle.\nFind the area of the white region within the rectangle after he finished painting.\n-----Constraints-----\n - 1 \u2266 W, H \u2266 100\n - 1 \u2266 N \u2266 100\n - 0 \u2266 x_i \u2266 W (1 \u2266 i \u2266 N)\n - 0 \u2266 y_i \u2266 H (1 \u2266 i \u2266 N)\n - W, H (21:32, added), x_i and y_i are integers.\n - a_i (1 \u2266 i \u2266 N) is 1, 2, 3 or 4.\n-----Input-----\nThe input is given from Standard Input in the following format:\nW H N\nx_1 y_1 a_1\nx_2 y_2 a_2\n:\nx_N y_N a_N\n-----Output-----\nPrint the area of the white region within the rectangle after Snuke finished painting.\n-----Sample Input-----\n5 4 2\n2 1 1\n3 3 4\n-----Sample Output-----\n9\nThe figure below shows the rectangle before Snuke starts painting.\nFirst, as (x_1, y_1) = (2, 1) and a_1 = 1, he paints the region satisfying x < 2 within the rectangle:\nThen, as (x_2, y_2) = (3, 3) and a_2 = 4, he paints the region satisfying y > 3 within the rectangle:\nNow, the area of the white region within the rectangle is 9.\n\ndef",
      "answer": "def paint_rectangle(w, h, n):\n    x = 0\n    y = 0\n    a = 1\n    for i in range(n):\n        if a == 1:\n            if x < w:\n                x += 1\n            else:\n                a = 2\n        elif a == 2:\n            if x > 0:\n                x -= 1\n            else:\n                a = 3\n        elif a == 3:\n            if y < h:\n                y += 1\n            else:\n                a = 4\n        elif a == 4:\n            if y > 0:\n                y -= 1\n            else:\n                a = 1\n    return x * y\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4620,
      "prompt": "Complete the Python function given the prompt below:\nA railroad running from west to east in Atcoder Kingdom is now complete.\nThere are N stations on the railroad, numbered 1 through N from west to east.\nTomorrow, the opening ceremony of the railroad will take place.\nOn this railroad, for each integer i such that 1\u2264i\u2264N-1, there will be trains that run from Station i to Station i+1 in C_i seconds. No other trains will be operated.\nThe first train from Station i to Station i+1 will depart Station i S_i seconds after the ceremony begins. Thereafter, there will be a train that departs Station i every F_i seconds.\nHere, it is guaranteed that F_i divides S_i.\nThat is, for each Time t satisfying S_i\u2264t and t\uff05F_i=0, there will be a train that departs Station i t seconds after the ceremony begins and arrives at Station i+1 t+C_i seconds after the ceremony begins, where A\uff05B denotes A modulo B, and there will be no other trains.\nFor each i, find the earliest possible time we can reach Station N if we are at Station i when the ceremony begins, ignoring the time needed to change trains.\n-----Constraints-----\n - 1\u2264N\u2264500\n - 1\u2264C_i\u2264100\n - 1\u2264S_i\u226410^5\n - 1\u2264F_i\u226410\n - S_i\uff05F_i=0\n - All input values are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nC_1 S_1 F_1\n:\nC_{N-1} S_{N-1} F_{N-1}\n-----Output-----\nPrint N lines. Assuming that we are at Station i (1\u2264i\u2264N) when the ceremony begins, if the earliest possible time we can reach Station N is x seconds after the ceremony begins, the i-th line should contain x.\n-----Sample Input-----\n3\n6 5 1\n1 10 1\n-----Sample Output-----\n12\n11\n0\nWe will travel from Station 1 as follows:\n - 5 seconds after the beginning: take the train to Station 2.\n - 11 seconds: arrive at Station 2.\n - 11 seconds: take the train to Station 3.\n - 12 seconds: arrive at Station 3.\nWe will travel from Station 2 as follows:\n - 10 seconds: take the train to Station 3.\n - 11 seconds: arrive at Station 3.\nNote that we should print 0 for Station 3.\n\ndef",
      "answer": "def find_earliest_time(N, C_1, S_1, F_1, C_2, S_2, F_2):\n    # Write your code here\n    return 0\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4621,
      "prompt": "Complete the Python function given the prompt below:\nThere is an image with a height of H pixels and a width of W pixels. Each of the pixels is represented by either. or *. The character representing the pixel at the i-th row from the top and the j-th column from the left, is denoted by C_{i,j}.\nExtend this image vertically so that its height is doubled. That is, print a image with a height of 2H pixels and a width of W pixels where the pixel at the i-th row and j-th column is equal to C_{(i+1)/2,j} (the result of division is rounded down).\n-----Constraints-----\n - 1\u2266H, W\u2266100\n - C_{i,j} is either. or *.\n-----Input-----\nThe input is given from Standard Input in the following format:\nH W\nC_{1,1}...C_{1,W}\n:\nC_{H,1}...C_{H,W}\n-----Output-----\nPrint the extended image.\n-----Sample Input-----\n2 2\n*.\n.*\n-----Sample Output-----\n*.\n*.\n.*\n.*\n\n\ndef",
      "answer": "def main():\n    h, w = map(int, input().split())\n    for i in range(h):\n        for j in range(w):\n            print(input(), end='')\n        print()\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4622,
      "prompt": "Complete the Python function given the prompt below:\nGiven is a sequence of integers A_1, A_2,..., A_N.\nIf its elements are pairwise distinct, print YES; otherwise, print NO.\n-----Constraints-----\n - 2 \u2264 N \u2264 200000\n - 1 \u2264 A_i \u2264 10^9\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nA_1... A_N\n-----Output-----\nIf the elements of the sequence are pairwise distinct, print YES; otherwise, print NO.\n-----Sample Input-----\n5\n2 6 1 4 5\n-----Sample Output-----\nYES\nThe elements are pairwise distinct.\n\ndef",
      "answer": "def pairwise_distinct(arr):\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                return False\n    return True\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4623,
      "prompt": "Complete the Python function given the prompt below:\nThere are $n$ people who want to participate in a boat competition. The weight of the $i$-th participant is $w_i$. Only teams consisting of two people can participate in this competition. As an organizer, you think that it's fair to allow only teams with the same total weight.\nSo, if there are $k$ teams $(a_1, b_1)$, $(a_2, b_2)$, $\\dots$, $(a_k, b_k)$, where $a_i$ is the weight of the first participant of the $i$-th team and $b_i$ is the weight of the second participant of the $i$-th team, then the condition $a_1 + b_1 = a_2 + b_2 = \\dots = a_k + b_k = s$, where $s$ is the total weight of each team, should be satisfied.\nYour task is to choose such $s$ that the number of teams people can create is the maximum possible. Note that each participant can be in no more than one team.\nYou have to answer $t$ independent test cases.\n-----Input-----\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 1000$) \u2014 the number of test cases. Then $t$ test cases follow.\nThe first line of the test case contains one integer $n$ ($1 \\le n \\le 50$) \u2014 the number of participants. The second line of the test case contains $n$ integers $w_1, w_2, \\dots, w_n$ ($1 \\le w_i \\le n$), where $w_i$ is the weight of the $i$-th participant.\n-----Output-----\nFor each test case, print one integer $k$: the maximum number of teams people can compose with the total weight $s$, if you choose $s$ optimally.\n-----Example-----\nInput\n5\n5\n1 2 3 4 5\n8\n6 6 6 6 6 6 8 8\n8\n1 2 2 1 2 1 1 2\n3\n1 3 3\n6\n1 1 3 4 2 2\nOutput\n2\n3\n4\n1\n2\n-----Note-----\nIn the first test case of the example, we can reach the optimal answer for $s=6$. Then the first boat is used by participants $1$ and $5$ and the second boat is used by participants $2$ and $4$ (indices are the same as weights).\nIn the second test case of the example, we can reach the optimal answer for $s=12$. Then first $6$ participants can form $3$ pairs.\nIn the third test case of the example, we can reach the optimal answer for $s=3$. The answer is $4$ because we have $4$ participants with weight $1$ and $4$ participants with weight $2$.\nIn the fourth test case of the example, we can reach the optimal answer for $s=4$ or $s=6$.\nIn the fifth test case of the example, we can reach the optimal answer for $s=3$. Note that participant with weight $3$ can't use the boat because there is no suitable pair for him in the list.\n\ndef",
      "answer": "def max_teams(n, w):\n    s = sum(w)\n    if s % 2!= 0:\n        return 0\n    s = s // 2\n    dp = [[0] * (s + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, s + 1):\n            if j < w[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - w[i - 1]] + 1)\n    return dp[n][s]\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4624,
      "prompt": "Complete the Python function given the prompt below:\nVasya goes to visit his classmate Petya. Vasya knows that Petya's apartment number is $n$. \nThere is only one entrance in Petya's house and the distribution of apartments is the following: the first floor contains $2$ apartments, every other floor contains $x$ apartments each. Apartments are numbered starting from one, from the first floor. I.e. apartments on the first floor have numbers $1$ and $2$, apartments on the second floor have numbers from $3$ to $(x + 2)$, apartments on the third floor have numbers from $(x + 3)$ to $(2 \\cdot x + 2)$, and so on.\nYour task is to find the number of floor on which Petya lives. Assume that the house is always high enough to fit at least $n$ apartments.\nYou have to answer $t$ independent test cases.\n-----Input-----\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 1000$) \u2014 the number of test cases. Then $t$ test cases follow.\nThe only line of the test case contains two integers $n$ and $x$ ($1 \\le n, x \\le 1000$) \u2014 the number of Petya's apartment and the number of apartments on each floor of the house except the first one (there are two apartments on the first floor).\n-----Output-----\nFor each test case, print the answer: the number of floor on which Petya lives.\n-----Example-----\nInput\n4\n7 3\n1 5\n22 5\n987 13\nOutput\n3\n1\n5\n77\n-----Note-----\nConsider the first test case of the example: the first floor contains apartments with numbers $1$ and $2$, the second one contains apartments with numbers $3$, $4$ and $5$, the third one contains apartments with numbers $6$, $7$ and $8$. Therefore, Petya lives on the third floor.\nIn the second test case of the example, Petya lives in the apartment $1$ which is on the first floor.\n\ndef",
      "answer": "def apartment_number(n, x):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return x\n    else:\n        return x + 2 * (n - 2)\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4625,
      "prompt": "Complete the Python function given the prompt below:\nYou want to perform the combo on your opponent in one popular fighting game. The combo is the string $s$ consisting of $n$ lowercase Latin letters. To perform the combo, you have to press all buttons in the order they appear in $s$. I.e. if $s=$\"abca\" then you have to press 'a', then 'b', 'c' and 'a' again.\nYou know that you will spend $m$ wrong tries to perform the combo and during the $i$-th try you will make a mistake right after $p_i$-th button ($1 \\le p_i < n$) (i.e. you will press first $p_i$ buttons right and start performing the combo from the beginning). It is guaranteed that during the $m+1$-th try you press all buttons right and finally perform the combo.\nI.e. if $s=$\"abca\", $m=2$ and $p = [1, 3]$ then the sequence of pressed buttons will be 'a' (here you're making a mistake and start performing the combo from the beginning), 'a', 'b', 'c', (here you're making a mistake and start performing the combo from the beginning), 'a' (note that at this point you will not perform the combo because of the mistake), 'b', 'c', 'a'.\nYour task is to calculate for each button (letter) the number of times you'll press it.\nYou have to answer $t$ independent test cases.\n-----Input-----\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 10^4$) \u2014 the number of test cases.\nThen $t$ test cases follow.\nThe first line of each test case contains two integers $n$ and $m$ ($2 \\le n \\le 2 \\cdot 10^5$, $1 \\le m \\le 2 \\cdot 10^5$) \u2014 the length of $s$ and the number of tries correspondingly.\nThe second line of each test case contains the string $s$ consisting of $n$ lowercase Latin letters.\nThe third line of each test case contains $m$ integers $p_1, p_2, \\dots, p_m$ ($1 \\le p_i < n$) \u2014 the number of characters pressed right during the $i$-th try.\nIt is guaranteed that the sum of $n$ and the sum of $m$ both does not exceed $2 \\cdot 10^5$ ($\\sum n \\le 2 \\cdot 10^5$, $\\sum m \\le 2 \\cdot 10^5$).\nIt is guaranteed that the answer for each letter does not exceed $2 \\cdot 10^9$.\n-----Output-----\nFor each test case, print the answer \u2014 $26$ integers: the number of times you press the button 'a', the number of times you press the button 'b', $\\dots$, the number of times you press the button 'z'.\n-----Example-----\nInput\n3\n4 2\nabca\n1 3\n10 5\ncodeforces\n2 8 3 2 9\n26 10\nqwertyuioplkjhgfdsazxcvbnm\n20 10 1 2 3 5 10 5 9 4\nOutput\n4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 9 4 5 3 0 0 0 0 0 0 0 0 9 0 0 3 1 0 0 0 0 0 0 0 \n2 1 1 2 9 2 2 2 5 2 2 2 1 1 5 4 11 8 2 7 5 1 10 1 5 2 \n-----Note-----\nThe first test case is described in the problem statement. Wrong tries are \"a\", \"abc\" and the final try is \"abca\". The number of times you press 'a' is $4$, 'b' is $2$ and 'c' is $2$.\nIn the second test case, there are five wrong tries: \"co\", \"codeforc\", \"cod\", \"co\", \"codeforce\" and the final try is \"codeforces\". The number of times you press 'c' is $9$, 'd' is $4$, 'e' is $5$, 'f' is $3$, 'o' is $9$, 'r' is $3$ and's' is $1$.\n\ndef",
      "answer": "def combo(s, m, p):\n    # your code here\n    return\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4626,
      "prompt": "Complete the Python function given the prompt below:\nThree friends are going to meet each other. Initially, the first friend stays at the position $x = a$, the second friend stays at the position $x = b$ and the third friend stays at the position $x = c$ on the coordinate axis $Ox$.\nIn one minute each friend independently from other friends can change the position $x$ by $1$ to the left or by $1$ to the right (i.e. set $x := x - 1$ or $x := x + 1$) or even don't change it.\nLet's introduce the total pairwise distance \u2014 the sum of distances between each pair of friends. Let $a'$, $b'$ and $c'$ be the final positions of the first, the second and the third friend, correspondingly. Then the total pairwise distance is $|a' - b'| + |a' - c'| + |b' - c'|$, where $|x|$ is the absolute value of $x$.\nFriends are interested in the minimum total pairwise distance they can reach if they will move optimally. Each friend will move no more than once. So, more formally, they want to know the minimum total pairwise distance they can reach after one minute.\nYou have to answer $q$ independent test cases.\n-----Input-----\nThe first line of the input contains one integer $q$ ($1 \\le q \\le 1000$) \u2014 the number of test cases.\nThe next $q$ lines describe test cases. The $i$-th test case is given as three integers $a, b$ and $c$ ($1 \\le a, b, c \\le 10^9$) \u2014 initial positions of the first, second and third friend correspondingly. The positions of friends can be equal.\n-----Output-----\nFor each test case print the answer on it \u2014 the minimum total pairwise distance (the minimum sum of distances between each pair of friends) if friends change their positions optimally. Each friend will move no more than once. So, more formally, you have to find the minimum total pairwise distance they can reach after one minute.\n-----Example-----\nInput\n8\n3 3 4\n10 20 30\n5 5 5\n2 4 3\n1 1000000000 1000000000\n1 1000000000 999999999\n3 2 5\n3 2 6\nOutput\n0\n36\n0\n0\n1999999994\n1999999994\n2\n4\n\ndef",
      "answer": "def min_pairwise_distance(a, b, c):\n    return abs(a - b) + abs(a - c) + abs(b - c)\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4627,
      "prompt": "Complete the Python function given the prompt below:\nWe call two numbers $x$ and $y$ similar if they have the same parity (the same remainder when divided by $2$), or if $|x-y|=1$. For example, in each of the pairs $(2, 6)$, $(4, 3)$, $(11, 7)$, the numbers are similar to each other, and in the pairs $(1, 4)$, $(3, 12)$, they are not.\nYou are given an array $a$ of $n$ ($n$ is even) positive integers. Check if there is such a partition of the array into pairs that each element of the array belongs to exactly one pair and the numbers in each pair are similar to each other.\nFor example, for the array $a = [11, 14, 16, 12]$, there is a partition into pairs $(11, 12)$ and $(14, 16)$. The numbers in the first pair are similar because they differ by one, and in the second pair because they are both even.\n-----Input-----\nThe first line contains a single integer $t$ ($1 \\le t \\le 1000$)\u00a0\u2014 the number of test cases. Then $t$ test cases follow.\nEach test case consists of two lines.\nThe first line contains an even positive integer $n$ ($2 \\le n \\le 50$)\u00a0\u2014 length of array $a$.\nThe second line contains $n$ positive integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 100$).\n-----Output-----\nFor each test case print:  YES if the such a partition exists,  NO otherwise. \nThe letters in the words YES and NO can be displayed in any case.\n-----Example-----\nInput\n7\n4\n11 14 16 12\n2\n1 8\n4\n1 1 1 1\n4\n1 2 5 6\n2\n12 13\n6\n1 6 3 10 5 8\n6\n1 12 3 10 5 8\nOutput\nYES\nNO\nYES\nYES\nYES\nYES\nNO\n-----Note-----\nThe first test case was explained in the statement.\nIn the second test case, the two given numbers are not similar.\nIn the third test case, any partition is suitable.\n\ndef",
      "answer": "def is_similar(x, y):\n    return (x % 2 == y % 2) or (abs(x - y) == 1)\n\n",
      "difficulty": "introductory",
      "split": "test"
   }
]