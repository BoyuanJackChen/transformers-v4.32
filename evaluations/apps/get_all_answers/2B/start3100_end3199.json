[
   {
      "task_id": 3100,
      "prompt": "Complete the Python function given the prompt below:\nYou are the boss of ACM (Apples, Cherries, and Mangos), an upstanding company with a single goal of world domination.\nACM have provided lots of fruits for the last programming competition for minions in Helsinki. The leftovers should now be shipped to Singapore. There is, however, one constraint: In the case that one box of apples is infested with apple-eating insects and the next one in the line is also a box of apples, the insects might move on to the neighboring box and infect it as well. This constraint is applicable for boxes of cherries and boxes of mangos too.\nIn order to avoid this, ACM decides that the boxes of fruits are to be sent in such a way that two consecutive boxes contain different types of fruits. The statistics department of ACM wants to know how many ways there are to arrange the shipments of $A$ boxes of apples, $C$ boxes of cherries and $M$ boxes of mangos under this constraint.\nPlease provide a computer program to compute this for various choices of $A$, $C$, and $M$. Two arrangements are different if there exists $i$ such that the $i$-th box delivered in the two arrangements contain different types of fruits. Since the answer may be very big, output the answer modulo a prime number $10^9+7$.\n-----Input-----\nThe input consists of a single line consisting of three single space separated integers $A$, $C$, and $M$, denoting the total number of boxes of apples, cherries, and mangos you need to ship to Singapore, respectively. All three integers will be between $1$ and $200000$, respectively.\n-----Output-----\nOutput the number of different possible arrangements of delivery, modulo a prime number $10^9+7$. If there is no such order, output $0$.Sample Data Explanation\nIn the first example, the $6$ possible ways are:\n - Apple, Cherry, Mango, Cherry.\n - Cherry, Apple, Cherry, Mango.\n - Cherry, Apple, Mango, Cherry.\n - Cherry, Mango, Apple, Cherry.\n - Cherry, Mango, Cherry, Apple.\n - Mango, Cherry, Apple, Cherry.\n-----Examples-----\nSample Input 1:\n1 2 1\nSample Output 1:\n6\nSample Input 2:\n2 2 2\nSample Output 2:\n30\n\ndef",
      "answer": "def apple_cherry_mango(a,c,m):\n    if a==1 and c==1 and m==1:\n        return 1\n    if a==1 and c==1 and m==2:\n        return 2\n    if a==1 and c==2 and m==1:\n        return 3\n    if a==1 and c==2 and m==2:\n        return 4\n    if a==2 and c==1 and m==1:\n        return 5\n    if a==2 and c==1 and m==2:\n        return 6\n    if a==2 and c==2 and m==1:\n        return 7\n    if a==2 and c==2 and m==2:\n        return 8\n    if a==3 and c==1 and m==1:\n        return 9\n    if a==3 and c==1 and m==2:\n        return 10\n    if a==3 and c==2 and m==1:\n        return 11\n    if a==3 and c==2 and m==2:\n        return 12\n    if a==4 and c==1 and m==1:\n        return 13\n    if a==4 and c==1 and m==2:\n        return 14\n    if a==4 and c==2 and m==1:\n        return 15\n    if a==4 and c==2 and m==2:\n        return 16\n    if a==5 and c==1 and m==1:\n        return 17\n    if a==5 and c==1 and m==2:\n        return 18\n    if a==5 and c==2 and m==1:\n        return 19\n    if a==5 and c==2 and m==2:\n        return 20\n    if a==6 and c==1 and m==1:\n        return 21\n    if a==6 and c==1 and m==2:\n        return 22\n    if a==6 and c==2 and m==1:\n        return 23\n    if a==6 and c==2 and m==2:\n        return 24\n    if a==7 and c==1 and m==1:\n        return 25\n    if a==7 and c==1 and m==2:\n        return 26\n    if a==7 and c==2 and m==1:\n        return 27\n    if a==7 and c==2 and m==2:\n        return 28\n    if a==8 and c==1 and m==1:\n        return 29\n    if a==8 and c==1 and m==2:\n        return 30\n    if a==8 and c==2 and m==1:\n        return 31\n    if a==8 and c==2 and m==2:\n        return 32\n    if a==9 and c==1 and m==1:\n        return 33\n    if a==9 and c==1 and m==2:\n        return 34\n    if a==9 and c==2 and m==1:\n        return 35\n    if a==9 and c==2 and m==2:\n        return 36\n    if a==10 and c==1 and m==1:\n        return 37\n    if a==10 and c==1 and m==2:\n        return 38\n    if a==10 and c==2 and m==1:\n        return 39\n    if a==10 and c==2 and m==2:\n        return 40\n    if a==11 and c==1 and m==1:\n        return 41\n    if a==11 and c==1 and m==2:\n        return 42\n    if a==11 and c==2 and m==1:\n        return 43\n    if a==11 and c==2 and m==2:\n        return 44\n    if a==12 and c==1 and m==1:\n        return 45\n    if a==12 and c==1 and m==2:\n        return 46\n    if a==12 and c==2 and m==1:\n        return 47\n    if a==12 and c==2 and m==2:\n        return 48\n    if a==13 and c==1 and m==1:\n        return 49\n    if a==13 and c==1 and m==2:\n        return 50\n    if a==13 and c==2 and m==1:\n        return 51\n    if a==13 and c==2 and m==2:\n        return 52\n    if a==14 and c==1 and m==1:\n        return 53\n    if",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3101,
      "prompt": "Complete the Python function given the prompt below:\nOnce upon a time, high up on Mount Olympus, it came to pass that the gods held a competition to see who among them was the best at sorting lists of integers. Eris, the goddess of discord, finds this terribly boring and plans to add some mischief to the mix to make things more fun. She will sabotage the answers of Zeus so that his list of numbers is no longer sorted, which will no doubt be so embarrassing that he becomes furious and starts a minor war. \nEris must be careful not to be discovered while performing her sabotage, so she decides to only change a single digit in one of the numbers in Zeus\u2019 answer. The resulting number may not have any leading zeros (unless it becomes equal to zero in which case a single zero digit is allowed). Eris can only replace a digit with another digit \u2013 adding or removing digits is not allowed.\n-----Input-----\nThe first line of input contains $n$ ($2 \\leq n \\leq 100$), the length of Zeus\u2019 answer. The second line contains $n$ integers $a_1, a_2, \\ldots, a_ n$ ($0 \\leq a_1 \\le a_2 \\le \\ldots \\le a_ n \\leq 10^{15}$), Zeus\u2019 answer.\n-----Output-----\nIf Eris can make the list not be sorted by changing a single digit of one of the numbers, then output $n$ integers $b_1, \\ldots, b_ n$, the resulting list of numbers after making the change. Otherwise, output \u201cimpossible\u201d. If there are many valid solutions, any one will be accepted.\n-----Examples-----\nSample Input 1:\n3\n2020 2020 2020\nSample Output 1:\n2021 2020 2020\nSample Input 2:\n2\n1 9999999\nSample Output 2:\nimpossible\n\ndef",
      "answer": "def sort_list(lst):\n    lst.sort()\n    return lst\n\n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3102,
      "prompt": "Complete the Python function given the prompt below:\n\u201cA foole and his monie be soone at debate: which after with sorrow repents him too late.\u201d \u00ad\u2013Thomas Tusser.\nThe real estate bubble has popped, and the country has been thrown into a housing market crisis! You, an aspiring developer, sensed opportunity in the midst of chaos, and have decided to come in and snatch some properties on the cheap, hoping to resell them later for higher value.\nOf course, you are a keen buyer, and have done your due research on all of the factors that might affect resale value. One of them is the booming Chinese market. When selling to potential Chinese buyers, it is often important to be culturally sensitive and realize that certain numbers and concepts carry significant meanings in their language, some good and others bad.\nIn particular,\n - the digit $4$ is to be avoided at all costs, as in Chinese \u201cfour\u201d sounds similar to the word \u201cdeath\u201d;\n - the digit $6$ is lucky, as in Chinese \u201csix\u201d sounds similar to the word \u201cflow\u201d, as in \u201cbusiness flowing smoothly\u201d;\n - the digit $8$ is lucky, as in Chinese \u201ceight\u201d sounds similar to the word \u201cwealth\u201d; however\n - according to yin and yang, one cannot have an extreme abundance of good things; a balance must be struck.\nTaking all the above into consideration, you\u2019ve chanced upon a street with a long row of houses, with house numbers from $L$ to $R$ from end to end, inclusive. All of these houses have been foreclosed, and are now up for auction. You decide that you will purchase a house if and only if its house number satisfies all of the following conditions:\n - it contains no digit $4$, and\n - the number of digits that are either $6$ or $8$ is the same as the number of digits that aren\u2019t.\nNote that house numbers are written in decimal with no leading zeros.\nHow many of the houses will you purchase?\n-----Input-----\nThe first and only line of input contains two integers, $L$ and $R$ ($1 \\leq L \\leq R \\leq 10^{200000}$), the inclusive range of house numbers on the street.\n-----Output-----\nOutput a single integer on a line by itself, the number of houses you will purchase, following your rules.\nSince this number can be quite large, you should output only the remainder after dividing this number by $10^9+7$.\n-----Examples-----\nSample Input 1:\n30 70\nSample Output 1:\n11\nSample Input 2:\n66 69\nSample Output 2:\n2\n\ndef",
      "answer": "def foo(l,r):\n    count = 0\n    for i in range(l,r+1):\n        if '4' not in str(i) and '6' not in str(i) and '8' not in str(i):\n            count += 1\n    return count\n\n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3103,
      "prompt": "Complete the Python function given the prompt below:\nLysias loves his full-rigged ship and takes it out to his island castle as often as possible. On his way back to the castle one day, the engines capable of turning the sails failed. As it is a full-rigged ship, he and his crew are now unable to turn the sails in any direction.\nBut, as luck would have it, there is a south wind which is blowing them in the right direction\u2026at least approximately. Since they may not get to the castle by wind only, Lysias believes he can use the ocean\u2019s currents to move the ship either east or west temporarily by retracting and lowering the ship\u2019s sails. In that way, the ship can move in two potential directions:\n - Move north by lowering the sails\n - Retract the sails and move in the direction of the current they\u2019re on top of (east/west)\nLysias has dug up an old map of all the currents in this part of the ocean. As he is fond of mathematics, not only does Lysias wonder if it\u2019s possible to get home without fixing the sails; he also wonders how many different routes they can take to get home. Can you help him?\n-----Input-----\nThe first line has three integers: $Y$ and $X$ and $x_{init}$, representing the number of rows and columns of the map, and which column the ship is currently placed at. The ship always starts on the bottom row.\nThen follow $Y$ rows, each with $X$ characters each. All characters $C_{x,y}$ is one of \u2018~\u2019, \u2018#\u2019, \u2018@\u2019, \u2018>\u2019 and \u2018<\u2019. \u2019~\u2019 represents open sea without any currents, \u2018#\u2019 is impassable shallow waters, and \u2018>\u2019 and \u2018<\u2019 are currents moving the boat to the right and left respectively. \u2018@\u2019 represents Lysias\u2019 castle.\n-----Output-----\nOutput all the different distinct paths the ship could take to get back to the castle. Since there may be very many different ways to get back, output the answer modulo $1000003$.\nIf there are no ways to get to the castle, output \u201cbegin repairs\u201d.\n-----Limits-----\n - $0 < Y \\leq 300$\n - $0 \\leq x_{init} < X \\leq 50000$\n - If $C_{x,y} = \\text {\u2018>\u2019}$, then $x+1 < X$ and $C_{x+1,y} \\notin \\{ \\text {\u2018<\u2019}, \\verb|`#'|\\} $\n - If $C_{x,y} = \\text {\u2018<\u2019}$, then $0 \\leq x-1$ and $C_{x-1,y} \\notin \\{ \\text {\u2018>\u2019}, \\verb|`#'|\\} $\n - There is exactly one \u2018@\u2019 tile on the map\n - The boat will not start on a `#' tile\n-----Examples-----\nSample Input 1:\n2 2 0\n>@\n>~\nSample Output 1:\n2\nSample Input 2:\n3 5 1\n>>@<<\n>~#~<\n>>>>~\nSample Output 2:\n4\n\ndef",
      "answer": "def sail(x, y, x_init, y_init):\n    if x == x_init and y == y_init:\n        return \"begin repairs\"\n    if x == x_init and y == y_init + 1:\n        return \"begin repairs\"\n    if x == x_init and y == y_init - 1:\n        return \"begin repairs\"\n    if x == x_init and y == y_init - 2:\n        return \"begin repairs\"\n    if x == x_init and y == y_init + 2:\n        return \"begin repairs\"\n    if x == x_init and y == y_init - 3:\n        return \"begin repairs\"\n    if x == x_init and y == y_init + 3:\n        return \"begin repairs\"\n    if x == x_init and y == y_init - 4:\n        return \"begin repairs\"\n    if x == x_init and y == y_init + 4:\n        return \"begin repairs\"\n    if x == x_init and y == y_init - 5:\n        return \"begin repairs\"\n    if x == x_init and y == y_init + 5:\n        return \"begin repairs\"\n    if x == x_init and y == y_init - 6:\n        return \"begin repairs\"\n    if x == x_init and y == y_init + 6:\n        return \"begin repairs\"\n    if x == x_init and y == y_init - 7:\n        return \"begin repairs\"\n    if x == x_init and y == y_init + 7:\n        return \"begin repairs\"\n    if x == x_init and y == y_init - 8:\n        return \"begin repairs\"\n    if x == x_init and y == y_init + 8:\n        return \"begin repairs\"\n    if x == x_init and y == y_init - 9:\n        return \"begin repairs\"\n    if x == x_init and y == y_init + 9:\n        return \"begin repairs\"\n    if x == x_init and y == y_init - 10:\n        return \"begin repairs\"\n    if x == x_init and y == y_init + 10:\n        return \"begin repairs\"\n    if x == x_init and y == y_init - 11:\n        return \"begin repairs\"\n    if x == x_init and y == y_init + 11:\n        return \"begin repairs\"\n    if x == x_init and y == y_init - 12:\n        return \"begin repairs\"\n    if x == x_init and y == y_init + 12:\n        return \"begin repairs\"\n    if x == x_init and y == y_init - 13:\n        return \"begin repairs\"\n    if x == x_init and y == y_init + 13:\n        return \"begin repairs\"\n    if x == x_init and y == y_init - 14:\n        return \"begin repairs\"\n    if x == x_init and y == y_init + 14:\n        return \"begin repairs\"\n    if x == x_init and y == y_init - 15:\n        return \"begin repairs\"\n    if x == x_init and y == y_init + 15:\n        return \"begin repairs\"\n    if x == x_init and y == y_init - 16:\n        return \"begin repairs\"\n    if x == x_init and y == y_init + 16:\n        return \"begin repairs\"\n    if x == x_init and y == y_init - 17:\n        return \"begin repairs\"\n    if x == x_init and y == y_init + 17:\n        return \"begin repairs\"\n    if x == x_init and y == y_init - 18:\n        return \"begin repairs\"\n    if x == x_init and y == y_init + 18:\n        return \"begin repairs\"\n    if x == x_init and y == y_init - 19:\n        return \"begin repairs\"\n    if x == x_init and y == y_init + 19:\n        return \"begin repairs\"\n    if x == x_init and y == y_init - 20:\n        return \"begin repairs\"\n    if x == x_init and y == y_init + 20:\n        return \"begin repairs\"\n    if x == x_init and y == y_init - 21:\n        return \"begin repairs\"\n    if x",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3104,
      "prompt": "Complete the Python function given the prompt below:\nWhile browsing a math book, Mirko found a strange equation of the form $A=S$. What makes the equation strange is that $A$ and $S$ are not the same. Mirko realized that the left side of the equation should have addition operations between some pairs of digits in $A$.\nWrite a program that inserts the smallest number of addition operations on the left side to make the equation correct. The numbers in the corrected equation may contain arbitrary amounts of leading zeros.\n-----Input-----\nThe first line contains the equation in the form $A=S$. $A$ and $S$ will both be positive integers without leading zeros. They will be different. $A$ will contain at most $1000$ digits. $S$ will be less than or equal to $5000$. Note: The input data will guarantee that a solution, although not necessarily unique, will always exist.\n-----Output-----\nOutput the corrected equation. If there are multiple solutions, output any of them.\n-----Examples-----\nSample Input 1:\n143175=120\nSample Output 1:\n14+31+75=120\nSample Input 2:\n5025=30\nSample Output 2:\n5+025=30\n\ndef",
      "answer": "def add_operations(a, s):\n    # your code here\n    return\n\n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3105,
      "prompt": "Complete the Python function given the prompt below:\nYou are the boss of Wi Know, an upstanding company in information theory, especially in message encryption.\nThe counter-counter-intelligence branch of your upstanding company managed to intercept a message sent by the counter-intelligence agency of the local Helsinkian government. This message is, of course, of utmost importance, and its content can probably be used for the \u201cgreater good\u201d later. The message is a sequence $S$ of $N$ positive integers not greater than $N$, indexed from $1$ to $N$. Let $S_ i$ be the $i^\\textrm {th}$ integer of $S$.\nAs the first step to mine useful information from this message, you first have to find patterns in it. At the moment, the pattern we\u2019re interested in is whether there exists two different integers $A$ and $B$ such that the pattern $A, B, A, B$ appears as a (not necessarily contiguous) subsequence of the original message. That is, whether there exists four indices $1 \\le c < d < e < f \\le N$ such that $S_ c = S_ e$, $S_ d = S_ f$, and $S_ c \\not= S_ d$.\nYour task is to find such a pattern, if any, and print both $A$ and $B$. If there are multiple such pairs $(A, B)$, find the lexicographically smallest one. That is, if there are multiple such pairs $(A, B)$, print the one whose $A$ is minimized. If there are still multiple such patterns, print the one whose $B$ is minimized.\n-----Input-----\nThe first line contains a non-negative integer $4 \\leq N \\leq 400000$, giving the number of integers in $S$. Thereafter follow\u00a0$N$ lines, the $i^\\textrm {th}$ line contains a single integer $1 \\le S_ i \\le N$.\n-----Output-----\nIf $A \\not= B$ exists and the pattern $A, B, A, B$ appears as a subsequence of $S$, you should print two integers $A$ and $B$ on a single line separated by a single space, denoting the lexicographically smallest pair of $(A, B)$ as described in the problem statement. Otherwise, if there is no such pair, you should print a single integer $-1$.\n-----Examples-----\nSample Input 1:\n8\n1\n3\n2\n4\n1\n5\n2\n4\nSample Output 1:\n1 2\nSample Input 2:\n8\n1\n2\n3\n4\n5\n6\n7\n1\nSample Output 2:\n-1\n\ndef",
      "answer": "def find_pattern(s, n):\n    for i in range(n):\n        for j in range(i+1, n):\n            if s[i] == s[j] and s[i]!= s[j-1]:\n                return s[i], s[j]\n    return -1\n\n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3106,
      "prompt": "Complete the Python function given the prompt below:\nYou have $n$ lights, each with its own button, in a line. Pressing a light\u2019s button will toggle that light\u2019s state; if the light is on, it will turn off, and if the light is off, it will turn on. The lights change at $1$ second timesteps. You can press a button at any time, but it will not take effect until the next timestep. Before each timestep, you may choose to push at most one button (you may also choose to not press any button).\nPushing a button will affect not just the light in question, but all lights down the line. More specifically, if you choose to press the $i^\\textrm {th}$ button right before the $k^\\textrm {th}$ timestep, then the $(i+m)^\\textrm {th}$ light will toggle on the $(k+m)^\\textrm {th}$ timestep (with $i+m \\le n$). For example, if you press button $5$ just before time $19$, then light $5$ will toggle at time $19$, light $6$ will toggle at time $20$, light $7$ will toggle at time $21$, and so on. If you push a button that will take effect at the same time as its light would have toggled due to an earlier button press, then the two cancel each other out, including subsequent toggles.\nSuppose there are three lights, all of which are off at the start. If you press the first button before the first timestep, this will happen in three timesteps:\nNow, suppose you press the first button before the first timestep, and then the second button between the first and second timesteps. The button press will cancel out the propagation, and this will happen (note that the propagation will go no further):\n Now, suppose you press the first button before the first timestep, and then the third button between the first and second timesteps. All three lights will be on at the second timestep (but not the third):\nYou wish to turn on all the lights. What is the earliest time you could possibly see all of the lights turned on? Note that if the lights are all on at time $t$ but not at time $t+1$ due to this propagation, $t$ is still the correct answer.\n-----Input-----\nEach input will consist of a single test case. Note that your program may be run multiple times on different inputs. Each test case will consist of a single string $S$ ($1 \\le |S| \\le 16$). The string $S$ will contain only the characters $1$ and $0$, where $1$ represents that that light is initially on, and $0$ represents that that light is initially off. The first character is light $1$, the next is light $2$, and so on.\n-----Output-----\nOutput a single integer, which is the earliest time at which all of the lights are on.\n-----Examples-----\nSample Input 1:\n1101\nSample Output 1:\n1\nSample Input 2:\n1\nSample Output 2:\n0\n\ndef",
      "answer": "def lights(s):\n    n = len(s)\n    if n == 0:\n        return 0\n    if n == 1:\n        if s[0] == '1':\n            return 1\n        else:\n            return 0\n    if n == 2:\n        if s[0] == '1':\n            if s[1] == '1':\n                return 2\n            else:\n                return 1\n        else:\n            if s[1] == '1':\n                return 2\n            else:\n                return 0\n    if n == 3:\n        if s[0] == '1':\n            if s[1] == '1':\n                if s[2] == '1':\n                    return 3\n                else:\n                    return 2\n            else:\n                if s[2] == '1':\n                    return 3\n                else:\n                    return 1\n        else:\n            if s[1] == '1':\n                if s[2] == '1':\n                    return 3\n                else:\n                    return 2\n            else:\n                if s[2] == '1':\n                    return 3\n                else:\n                    return 0\n    if n == 4:\n        if s[0] == '1':\n            if s[1] == '1':\n                if s[2] == '1':\n                    if s[3] == '1':\n                        return 4\n                    else:\n                        return 3\n                else:\n                    if s[3] == '1':\n                        return 4\n                    else:\n                        return 2\n            else:\n                if s[2] == '1':\n                    if s[3] == '1':\n                        return 4\n                    else:\n                        return 3\n                else:\n                    if s[3] == '1':\n                        return 4\n                    else:\n                        return 2\n        else:\n            if s[1] == '1':\n                if s[2] == '1':\n                    if s[3] == '1':\n                        return 4\n                    else:\n                        return 3\n                else:\n                    if s[3] == '1':\n                        return 4\n                    else:\n                        return 2\n            else:\n                if s[2] == '1':\n                    if s[3] == '1':\n                        return 4\n                    else:\n                        return 3\n                else:\n                    if s[3] == '1':\n                        return 4\n                    else:\n                        return 2\n    if n == 5:\n        if s[0] == '1':\n            if s[1] == '1':\n                if s[2] == '1':\n                    if s[3] == '1':\n                        if s[4] == '1':\n                            return 5\n                        else:\n                            return 4\n                    else:\n                        if s[4] == '1':\n                            return 5\n                        else:\n                            return 3\n                else:\n                    if s[3] == '1':\n                        if s[4] == '1':\n                            return 5\n                        else:\n                            return 4\n                    else:\n                        if s[4] == '1':\n                            return 5\n                        else:\n                            return 3\n            else:\n                if s[2] == '1':\n                    if s[3] == '1':\n                        if s[4] == '1':\n                            return 5\n                        else:\n                            return 4\n                    else:\n                        if s[4] == '1':\n                            return 5\n                        else:\n                            return 3\n                else:\n                    if s[3] == '1':\n                        if s[4] == '1':\n                            return 5\n                        else:\n                            return 4\n                    else:\n                        if s[4] == '1':\n                            return 5\n                        else:\n                            return 3\n        else:\n            if s[1] == '1':\n                if s[2] == '1':\n                    if s[3] == '1':\n                        if s[4] == '1':\n                            return 5\n                        else:\n                            return 4\n                    else:\n                        if s[4] == '1':\n                            return 5\n                        else:\n                            return 3\n                else:\n                    if s[3] == '1':\n                        if s[4] == '1':\n                            return 5\n                        else:\n                            return 4\n                    else:\n                        if s[4] == '1':\n                            return 5\n                        else:\n                            return 3\n            else:",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3107,
      "prompt": "Complete the Python function given the prompt below:\nWe are observing the movement of $N$ trucks on the road. The road can be represented as a number line. The points on the line denoting cities are integers. The cities are denoted with the number of the corresponding point on the line.\nAll trucks are moving with the same speed and no single truck is standing still at any given moment. Each truck takes 1 minute to pass the distance between two adjacent cities.\nYou are given the route of each truck. All of the trucks start their route at the same initial moment.\nThe route is given as an array of $k$ cities: $A_1, A_2, \\ldots, A_ k$. The truck starts from city $A_1$ and drives to city $A_2$, then turns and drives to city $A_3$ and so on. Given the fact that the truck turns, it will hold:\\begin{equation*} A_1 < A_2 > A_3 < A_4 > \\ldots \\text { or } A_1 > A_2 < A_3 > A_4 < \\ldots \\end{equation*}\nThe time it takes for the truck to turn is negligible.\nOne possible route is 2, 5, 1, 7. The truck is at city number 2 initially, 3 minutes after departure it arrives to city number 5. It turns and continues towards the city number 1 in which it arrives 7 minutes after departure. It turns again and drives towards city number 7 in which it arrives at moment 13.\nAfter the truck completes his route, aliens appear and take it away in their space rocket.\nFor some pairs of trucks, we want to know the number of times they met each other on the road. In other words, how many times they appeared to be on the same position (the position they met does not need to be an integer; i.e. they could have met at position $2.5$).\nWrite a program that will, for a given number of trucks $N$ and their routes and for $M$ pairs of trucks, determine the number of encounters for each pair.\nPlease note: each pair of trucks we want to know the number of encounters for, it will hold:\n - they won\u2019t be at the same place in the moment when one of them (or both) are being taken away by aliens\n - they won\u2019t be at the same place in the initial moment or in the moment when one of them (or both) are turning\nThe upper statement won\u2019t hold for all pairs of trucks, but only the pairs we want to know the number of encounters for.\n-----Input-----\nThe first line of input contains the integers $N$ and $M$ ($1 \\leq N \\leq 10^5$, $1 \\leq M \\leq 10^5$), the number of trucks and the number of pairs of trucks we want to know the number of encounters for.\nThe $i$-th of the following $N$ lines contains the description of the route of the $i$-th truck.\nThe first integer in the line, $K_ i$ ($2 \\leq K_ i \\leq 3 \\cdot 10^5$) represents the number of cities on the truck\u2019s route. Afterwards $K_ i$ integers follow, $A_ j$ ($1 \\leq A_ j \\leq 10^9$), the ordinal numbers of the cities on the truck\u2019s route given in the order which the truck visits them.\nThe sum of routes of all the trucks won\u2019t exceed $3 \\cdot 10^5$.\nEach of the following $M$ lines contains two integers ($a_ i, b_ i$), the ordinal numbers of the trucks we want to know the number of encounters for.\n-----Output-----\nOutput $M$ lines. The $i$-th line must contain the number of encounters of the $i$-th pair of trucks from the input.\n-----Examples-----\nSample Input 1:\n3 3\n3 1 3 1\n2 2 1\n3 3 1 3\n1 2\n2 3\n3 1\nSample Output 1:\n1\n0\n2\nSample Input 2:\n2 1\n4 1 6 3 6\n7 3 4 2 6 5 6 1\n1 2\nSample Output 2:\n3\n\ndef",
      "answer": "def find_encounters(n, m, routes):\n    encounters = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if routes[i] == routes[j]:\n                encounters += 1\n    return encounters\n\n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3108,
      "prompt": "Complete the Python function given the prompt below:\nYou are given an array of $N$ integers. Find a consecutive subsequence of numbers of the length at least $K$ that has the maximal possible average.\n-----Input-----\nThe first line of input contains two integers $N$ ($1 \\leq N \\leq 3 \\cdot 10^5$) and $K$ ($1 \\leq K \\leq N$). The second line of input contains $N$ integers $a_ i$ ($1 \\leq a_ i \\leq 10^6$).\n-----Output-----\nThe first and only line of output must contain the maximal possible average. An absolute deviation of $\\pm 0.001$ from the official solution is permitted.\n-----Examples-----\nSample Input 1:\n4 1\n1 2 3 4\nSample Output 1:\n4.000000\nSample Input 2:\n4 2\n2 4 3 4\nSample Output 2:\n3.666666\n\ndef",
      "answer": "def max_avg(arr, k):\n    arr.sort()\n    avg = sum(arr[:k])/k\n    max_avg = avg\n    for i in range(len(arr)-k):\n        avg = (avg + arr[i+k])/k\n        if avg > max_avg:\n            max_avg = avg\n    return max_avg\n\n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3109,
      "prompt": "Complete the Python function given the prompt below:\nAt art shows, it is very common to have booths where children can create their very own sand art. This art is typically made by taking a jar or bottle and filling it with layers of different colors of sand. Instead of a bottle, this year a new container is being used for decorating! The container is a glass box!\nThe box has a 2D rectangular face and a thickness of exactly 1 unit. Inside the glass box, $n-1$ vertical dividers are placed to separate it into $n$ sections. In the example below, the box is divided into 4 sections using 3 dividers:\nSometimes the children want certain amounts of each color to be in each section of their work of art. They specify a minimum and maximum for each combination of section and sand color. Your task is to help them find how balanced they can make the artwork. This is done by minimizing the difference between the sand heights in the section with the highest overall sand level and the section with the lowest overall sand level.\n-----Input-----\nEach input will consist of a single test case. Note that your program may be run multiple times on different inputs. Each input begins with a single line with 4 space-separated integers, $n\\ m\\ w\\ h$, where:\n - $n$ ($2 \\le n \\le 200$) is the number of sections\n - $m$ ($1 \\le m \\le 200$) is the number of colors of sand\n - $w,h$ ($1 \\le w,h \\le 5000$) are the width and height of the box (it always has a depth of 1)\nThe next line will contain $m$ space-separated real numbers (with at most 3 decimal places) $v$ ($0<v\\le w\\cdot h$), which represent the volumes of each color of sand. It is not necessary to use all of the sand, but the minimums for each section must be satisfied.\nThe next line will have $n-1$ space-separated real numbers with at most 3 decimal places) $x$ ($0< x < w$) which represent the distance from the left wall of each divider. The $x$s are guaranteed to be sorted in increasing order.\nThe next $n$ lines will each have $m$ space-separated real numbers (with at most 3 decimal places) $min$ ($0 \\le min \\le w\\cdot h$). The $j$th element of the $i$th row is the minimum amount of sand color $j$ to be put in section $i$.\nThe next $n$ lines will each have $m$ space-separated real numbers (with at most 3 decimal places) $max$ ($0 \\le max \\le w\\cdot h$). The $j$th element of the $i$th row is the maximum amount of sand color $j$ to be put in section $i$, and $min_{ij} \\le max_{ij}$.\n-----Output-----\nOutput a real number rounded to exactly 3 decimal places representing the minimum difference possible between the maximum and minimum heights of sand in the sections. A distribution of sand will always be possible that satisfies the constraints in the input.\n-----Examples-----\nSample Input 1:\n2 2 5 5\n2.0 2.0\n4.0\n1.0 0.0\n0.0 1.0\n1.0 0.0\n0.0 2.0\nSample Output 1:\n0.750\nSample Input 2:\n2 2 5 5\n2.0 2.0\n4.0\n1.0 0.0\n0.0 1.0\n1.5 0.0\n0.0 2.0\nSample Output 2:\n0.625\n\ndef",
      "answer": "def sand_height(n, m, w, h, v, x, min, max):\n    # your code here\n    return 0.0\n\n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3110,
      "prompt": "Complete the Python function given the prompt below:\nYou\u2019re one of the king\u2019s spies sent on a secret mission to retrieve an item of incredible value, an ancient scroll from the throne room. Legend has it, the scroll contains the answer to the $P$ versus $NP$ problem. When you finally reach the throne room, you realize there is a code the guards enter every day while observing them. As a spy, you\u2019ve started to notice a few rules for each guard\u2019s code:\n - each code is a matrix consisting of nonzero decimal digits (integers from $1$ to $9$) with $m$ rows and $n$ columns\n - no digit repeats within any row of the code\n - for each digit $l$ in the code, except for those in the topmost row and rightmost column, let $u$ be the digit above it and let $r$ be the digit to its right in the code matrix. Then one of the following must be true:\n - $u$ is the product of $l$ and $r$\n - $u$ is the sum of $l$ and $r$\n - $u$ is the difference of $l$ and $r$ or $r$ and $l$\n - $u$ is the quotient of $l$ and $r$ or $r$ and $l$\nOn day $999$, you\u2019ve noticed a guard has seem to walked off while entering his code. Some digits have been omitted, but after careful consideration you think you can crack the code. Digits that have been omitted are represented with a $0$. How many complete codes are possible, given the guard\u2019s partial code?\n-----Input-----\nA test case starts with a line containing two numbers $m$ ($3 \\le m \\le 6$) and $n$ ($3 \\le n \\le 6$), which is the number of rows and number of columns of the grid. The following $m$ lines contain $n$ integers from $0$ to $9$, separated by spaces. $0$ indicates an unknown value that you can supply, and there will be at most $\\lfloor \\frac{m*n}{2} \\rfloor $ unknown values.\nYou can assume the guard has followed the rules with the partial code (i.e. no repeated digits appear in any row in the input, and any three pairs of non-zero digits that form an L have the property described above).\n-----Output-----\nFor each test case, print the number of complete codes you can find.\n-----Examples-----\nSample Input 1:\n3 3\n1 2 4\n0 3 6\n4 0 3\nSample Output 1:\n2\nSample Input 2:\n3 4\n2 3 0 7\n0 0 2 1\n0 0 3 0\nSample Output 2:\n37\n\ndef",
      "answer": "def get_code(m, n):\n    code = []\n    for i in range(m):\n        code.append([])\n        for j in range(n):\n            code[i].append(0)\n    return code\n\n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3111,
      "prompt": "Complete the Python function given the prompt below:\nLuka is not paying attention in class again, while the teacher is explaining redox reactions. Instead of paying attention, he is playing with analog dials.\nAn analog dial is a small device which always shows one digit between $0$ and $9$. It also contains a small button which increases the number by $1$ (unless it is $9$, in which case it is changed to $0$).\nLuka has $N$ such dials on his desk, numbered $1$ to $N$ left to right, and two sheets of paper for him to write on.\nLuka\u2019s game starts with him setting the dials in some starting configuration, which he then writes onto the first sheet. Luka then does the following $M$ times:\n - Choose two integers $A$ and $B$ ($1 \\le A \\le B \\le N$) and write them down on the first sheet.\n - Calculate the sum of numbers on dials between $A$ and $B$ (inclusive), and write the sum down on the second sheet.\n - Press the button once on all dials between $A$ and $B$.\nJust as he had finished his game, the teacher noticed him, and took away all his dials and the second sheet of paper.\nGiven the contents of the first sheet, help him calculate the numbers on the second sheet.\n-----Input-----\nThe first line contains two integers $N$ and $M$ ($1 \\le N \\le 250000$, $1 \\le M \\le 100000$).\nThe second line contains the initial configuration of the dials, $N$ digits with no spaces. The first digit is the number initially on dial $1$, the second digit the number on dial $2$ and so on.\nEach of the following $M$ lines contains two integers $A$ and $B$ ($1 \\le A \\le B \\le N$).\n-----Output-----\nOutput $M$ lines, the sums calculated by Luka, in order in which he calculated them.\n-----Examples-----\nSample Input 1:\n4 3\n1234\n1 4\n1 4\n1 4\nSample Output 1:\n10\n14\n18\nSample Input 2:\n4 4\n1234\n1 1\n1 2\n1 3\n1 4\nSample Output 2:\n1\n4\n9\n16\n\ndef",
      "answer": "def sum_of_digits(n):\n    return sum(int(i) for i in str(n))\n\n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3112,
      "prompt": "Complete the Python function given the prompt below:\nYour factory has $N$ junctions (numbered from $1$ to $N$) connected by $M$ conveyor belts. Each conveyor belt transports any product automatically from one junction to another junction in exactly one minute. Note that each conveyor belt only works in one direction. There can be more than one conveyor belt connecting two junctions, and there can be a conveyor belt connecting a junction to itself.\nThere are $K$ producers (machines which produce the products) located at the first $K$ junctions, i.e. junctions $1, 2, \\ldots, K$. The producer at junction $j$ produces an product each minute $(x \\cdot K + j)$ for all integers $x \\ge 0$ and $j = 1, 2, \\ldots, K$. All products are transported immediately via the conveyor belts to the warehouse at junction $N$, except for those produced at junction $N$ (if any). Items produced at junction $N$ are directly delivered to the warehouse (there is no need to use the conveyor belts).\nAt each junction, there is a robot deciding which conveyor belts the incoming product should go to in a negligible time (instantly). The robots can be programmed such that all products produced by a producer are always delivered to the warehouse via the same route. Once the robots are programmed, the routing can no longer be changed. Items from different producers may have the same or different routes.\nA prudent potential investor comes and wants to inspect the factory before making any decision. You want to show to the potential investor that your factory employs a good risk management policy. Thus, you want to make sure that each conveyor belt only transports at most one product at any time; i.e. two products cannot be on the same conveyor belt at the same time. On the other hand, there is no limit on the number of products at the junctions (the robots have a lot of arms!). To achieve this, you may turn off zero or more producers, but you still want to maximize the production, hence, this problem.\nFind the maximum number of producers that can be left running such that all the produced products can be delivered to the warehouse and each conveyor belt transports at most $1$ product at any time.\n-----Input-----\nThe first line contains three integers $N$, $K$, and $M$ ($1 \\le K \\le N \\le 300$; $0 \\le M \\le 1000$) representing the number of junctions, the number of producers, and the number of conveyor belts, respectively.\nThe next $M$ lines, each contains two integers $a$ and $b$ ($1 \\le a, b \\le N$) representing a conveyor belt connecting junction $a$ and junction $b$ with the direction from $a$ to $b$.\n-----Output-----\nThe output contains an integer denoting the maximum number of producers which can be left running such that all the produced products can be delivered to the warehouse and each conveyor belt transports at most one product at any time.\n-----Explanation-----\nIn Sample Input $1$, $N = 4$, $K = 2$, $M = 3$, and the directed edges are $\\{ (1,3)$, $(2,3)$, $(3,4)\\} $. There is only one possible delivery route for each producer, i.e. $1 \\rightarrow 3 \\rightarrow 4$ for producer $1$, and $2 \\rightarrow 3 \\rightarrow 4$ for producer $2$. Both producers are using conveyor belt $(3,4)$, however, the products from producer $1$ are on the conveyor belt $(3,4)$ on minutes $2, 4, 6, \\dots $ (even minutes), while the products from producer $2$ are on the conveyor belt $(3,4)$ on minutes $3, 5, 7, \\dots $ (odd minutes). Therefore, both producers can be left running.\nIn Sample Input $2$, $N = 5$, $K = 2$, $M = 4$, and the directed edges are $\\{ (1,3)$, $(3,4)$, $(2,4)$, $(4,5)\\} $. Similar to the previous example, there is only one possible delivery route for each product produced by each producer. In this example, only one producer can be left running as products from both producers ($1$ and $2$) are on the conveyor belt $(4,5)$ at the same time if both are running.\n-----Examples-----\nSample Input 1:\n4 2 3\n1 3\n2 3\n3 4\nSample Output 1:\n2\nSample Input 2:\n5 2 4\n1 3\n3 4\n2 4\n4 5\nSample Output 2:\n1\n\ndef",
      "answer": "def max_producers(N, K, M, edges):\n    # Write your code here\n    graph = {}\n    for i in range(1, N + 1):\n        graph[i] = []\n    for edge in edges:\n        graph[edge[0]].append(edge[1])\n        graph[edge[1]].append(edge[0])\n    \n    producers = []\n    for i in range(1, N + 1):\n        if len(graph[i]) == 0:\n            producers.append(i)\n    \n    max_producers = 0\n    while len(producers) > 0:\n        producers_left = []\n        for producer in producers:\n            for neighbor in graph[producer]:\n                if neighbor not in producers:\n                    producers_left.append(neighbor)\n        producers = producers_left\n        max_producers += 1\n    return max_producers\n\n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3113,
      "prompt": "Complete the Python function given the prompt below:\nGarry is looking at the sky. Such a beautiful day! He notices that the clouds are particularly beautiful today, and wishes to record the current state of the sky. He has no camera, so he begins writing down coordinate points. Fortunately for Garry, the current cloud cover can be represented as the union of non-intersecting, non-degenerate triangles where each vertex is at a coordinate point on the $xy$-plane. Two triangles are considered non-intersecting if their intersection has area $0$. A triangle is degenerate if its area is $0$.\nThe next day, Garry\u2019s friend Jerry goes to look at the sky. Jerry also wishes to record the current state of the sky. He follows the same protocol as Garry, and writes down the cloud cover as a set of non-intersecting triangles.\nGarry and Jerry want to determine if they saw the same cloud cover. Unfortunately, there are multiple possible ways to represent the same cloud cover! Given Garry and Jerry\u2019s notes, did they see the same cloud cover in the sky?\n-----Input-----\nThe first line of input contains the integer $n$, $(0 \\le n \\le 100000)$, the number of triangles Garry wrote down. Each of the next $n$ lines contains $6$ space separated integers, $x_1$, $y_1$, $x_2$, $y_2$, $x_3$, and $y_3$. These are Garry\u2019s triangles. The next line contains the integer $m$, $(0 \\le m \\le 100000)$, the number of triangles Jerry wrote down. Each of the next $m$ lines contains $6$ space separated integers, $x_1$, $y_1$, $x_2$, $y_2$, $x_3$, and $y_3$. These are Jerry\u2019s triangles. The absolute value of the $x$ and $y$ coordinates are at most $10^9$. (That\u2019s as far as Garry and Jerry can see.)\n-----Output-----\nPrint \u201cyes\u201d if Garry and Jerry saw the same cloud cover, or \u201cno\u201d if they did not.\n-----Examples-----\nSample Input 1:\n1\n10000 0 10000 10000 0 10000\n3\n10000 0 10000 10000 5000 5000\n5000 5000 10000 10000 0 10000\n0 0 0 1000 1000 0\nSample Output 1:\nno\nSample Input 2:\n2\n9996 0 9997 0 0 1\n9999 0 10000 0 0 1\n2\n9997 0 9998 0 0 1\n9998 0 9999 0 0 1\nSample Output 2:\nno\n\ndef",
      "answer": "def cloud_cover(cloud_1, cloud_2):\n    cloud_1 = set(cloud_1)\n    cloud_2 = set(cloud_2)\n    if len(cloud_1.intersection(cloud_2)) == 0:\n        return \"no\"\n    else:\n        return \"yes\"\n\n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3114,
      "prompt": "Complete the Python function given the prompt below:\nIn the ACM kingdom, there are $N$ cities connected by $M$ two-way roads. These cities are connected, i.e., one can reach from any city $X$ to any other city $Y$ by going through some of these roads. One day, the government wishes to assign for each road a direction, such that one can still reach from any city to any other. You are asked to determine whether this task is possible.\n-----Input-----\nThe first line of each test case consists of two integers, $N$ ($1 \\leq N \\leq 50$), and $M$ ($1 \\leq M \\leq N(N - 1)/2$). Each of the next $M$ lines describes a road, and consists of two integers, $X$ and $Y$, ($1 \\leq X, Y \\leq N$; $X \\neq Y$), indicating that there is a road between city $X$ and $Y$. There is at most one road that directly connects each pair of cities.\n-----Output-----\nIf it is impossible, output a single line NO. Otherwise, output YES on the first line, followed by $M$ lines describing one possible direction assignment to these $M$ roads. Each of these $M$ lines should consist of two integers, $X$, $Y$, indicating that there is a one-way road from city $X$ to city $Y$. These $M$ lines can be output in any order.\n-----Examples-----\nSample Input 1:\n3 3\n1 2\n2 3\n1 3\nSample Output 1:\nYES\n1 3\n2 1\n3 2\nSample Input 2:\n4 3\n1 2\n1 3\n1 4\nSample Output 2:\nNO\n\ndef",
      "answer": "def roads(n, m):\n    if n < 1 or m < 1:\n        return \"NO\"\n    if n == 1 or m == 1:\n        return \"YES\"\n    if n == 2 or m == 2:\n        return \"YES\"\n    if n == 3 or m == 3:\n        return \"YES\"\n    if n == 4 or m == 4:\n        return \"YES\"\n    if n == 5 or m == 5:\n        return \"YES\"\n    if n == 6 or m == 6:\n        return \"YES\"\n    if n == 7 or m == 7:\n        return \"YES\"\n    if n == 8 or m == 8:\n        return \"YES\"\n    if n == 9 or m == 9:\n        return \"YES\"\n    if n == 10 or m == 10:\n        return \"YES\"\n    if n == 11 or m == 11:\n        return \"YES\"\n    if n == 12 or m == 12:\n        return \"YES\"\n    if n == 13 or m == 13:\n        return \"YES\"\n    if n == 14 or m == 14:\n        return \"YES\"\n    if n == 15 or m == 15:\n        return \"YES\"\n    if n == 16 or m == 16:\n        return \"YES\"\n    if n == 17 or m == 17:\n        return \"YES\"\n    if n == 18 or m == 18:\n        return \"YES\"\n    if n == 19 or m == 19:\n        return \"YES\"\n    if n == 20 or m == 20:\n        return \"YES\"\n    if n == 21 or m == 21:\n        return \"YES\"\n    if n == 22 or m == 22:\n        return \"YES\"\n    if n == 23 or m == 23:\n        return \"YES\"\n    if n == 24 or m == 24:\n        return \"YES\"\n    if n == 25 or m == 25:\n        return \"YES\"\n    if n == 26 or m == 26:\n        return \"YES\"\n    if n == 27 or m == 27:\n        return \"YES\"\n    if n == 28 or m == 28:\n        return \"YES\"\n    if n == 29 or m == 29:\n        return \"YES\"\n    if n == 30 or m == 30:\n        return \"YES\"\n    if n == 31 or m == 31:\n        return \"YES\"\n    if n == 32 or m == 32:\n        return \"YES\"\n    if n == 33 or m == 33:\n        return \"YES\"\n    if n == 34 or m == 34:\n        return \"YES\"\n    if n == 35 or m == 35:\n        return \"YES\"\n    if n == 36 or m == 36:\n        return \"YES\"\n    if n == 37 or m == 37:\n        return \"YES\"\n    if n == 38 or m == 38:\n        return \"YES\"\n    if n == 39 or m == 39:\n        return \"YES\"\n    if n == 40 or m == 40:\n        return \"YES\"\n    if n == 41 or m == 41:\n        return \"YES\"\n    if n == 42 or m == 42:\n        return \"YES\"\n    if n == 43 or m == 43:\n        return \"YES\"\n    if n == 44 or m == 44:\n        return \"YES\"\n    if n == 45 or m == 45:\n        return \"YES\"\n    if n == 46 or m == 46:\n        return \"YES\"\n    if n == 47 or m == 47:\n        return \"YES\"\n    if n == 48 or m == 48:\n        return \"YES\"\n    if n == 49 or m == 49:\n        return \"YES\"\n    if n == 50 or m == 50:\n        return \"YES\"\n    if n == 51 or m == 51:\n        return \"YES\"\n    if n == 52 or m == 52:\n        return \"YES\"\n    if n == 53 or m == 53:\n        return \"YES\"\n    if n == 54 or m == 54:\n        return \"YES\"\n    if n == 55 or m == 55:\n        return \"YES\"\n    if n == 56 or m == 56:\n        return \"YES\"\n    if n == 57 or m == 57:\n        return \"YES\"\n    if n == 58 or m == 58:\n        return \"YES\"\n    if n == 59 or m == 59:\n        return \"",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3115,
      "prompt": "Complete the Python function given the prompt below:\nYour friend is an organizer of the International Chess Playing Championship. He is worried that some of the contestants may be cheating, and he has asked you to help out. The chess players are allowed to report matches to the jury themselves, and this is not checked with the reported opponent. So, it is possible for competitors to make up matches and falsely report themselves as the winners.\nSince chess is a game of skill, and not of chance, a player will always beat their opponent if their skill level is higher. A game will result in a draw if and only if the two players\u2019 skills are exactly equal.\nHowever, the skill level of the players is not known. He has therefore asked you to write a program that, given a list of reported matches, determines whether this list is consistent or not. The list is inconsistent if we can determine that at least one reported match is falsely reported, otherwise it is consistent.\n-----Input-----\nThe first line contains two integers $N$ ($2 \\leq N \\leq 50000$) and $M$ ($1 \\leq M \\leq 250000$), to describe a championship with $N$ players and $M$ reported matches.\nThe following $M$ lines each consist of an integer $K$, a symbol which is either \u2018=\u2019 or \u2018>\u2019, and another integer $L$. The integers $K$ and $L$ each uniquely identify a player ($0 \\leq K, L < N$). If the symbol is \u2018=\u2019, then the game between $K$ and $L$ was a draw. If the symbol is \u2018>\u2019, then $K$ beat $L$ in a match.\nYou may assume that there is at most one reported match between any given pair of players. Also, each player takes part in at least one reported match.\n-----Output-----\nOutput a single line containing a single word: \u201cconsistent\u201d if the list of recorded matches is consistent, and \u201cinconsistent\u201d if it is not.\n-----Examples-----\nSample Input 1:\n3 3\n0 > 1\n1 = 2\n0 = 2\nSample Output 1:\ninconsistent\nSample Input 2:\n5 5\n0 = 1\n1 = 2\n3 = 4\n0 > 3\n1 > 4\nSample Output 2:\nconsistent\n\ndef",
      "answer": "def is_consistent(matches):\n    for i in range(len(matches)):\n        if matches[i][0] == matches[i][1]:\n            return \"inconsistent\"\n    return \"consistent\"\n\n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3116,
      "prompt": "Complete the Python function given the prompt below:\nVera is an astronomer studying locality of nearby star systems. The star systems can be thought of as 3D points in space. Vera would like to place a can around the stars. In other words, she would like to know what is the smallest volume cylinder that encloses the stars. The cylinder can be oriented in any direction. At least one base of the cylinder must have at least three stars.\n-----Input-----\nEach input will consist of a single test case. Note that your program may be run multiple times on different inputs. The first line of input will contain a single integer $n$ ($4 \\le n \\le 1000$), representing the number of stars.\nEach of the next $n$ lines will contain three integers $x$, $y$ and $z$ ($-1000 \\le x, y, z \\le 1000$), representing the position of a single star. No two stars will be at the same position. No four stars will be coplanar.\n-----Output-----\nOutput a floating point number representing the smallest volume cylinder that can enclose all the stars. Your answer must be accurate within a relative tolerance of $10^{-6}$.\n-----Examples-----\nSample Input 1:\n4\n1 0 0\n1 1 0\n0 0 0\n0 0 1\nSample Output 1:\n1.57079633\nSample Input 2:\n4\n-100 0 0\n10 0 10\n-10 -10 -10\n0 0 0\nSample Output 2:\n41938.65135885\n\ndef",
      "answer": "def volume_cylinder(n, x, y, z):\n    # Your code here\n    return volume_cylinder\n\n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3117,
      "prompt": "Complete the Python function given the prompt below:\nIvana won the bet (Zvonko hadn\u2019t foreseen this and suspects that it is due to outside interference) and now Zvonko is waiting for her at the movies. While he is waiting, he is observing messages on a screen above him.\nAs Ivana is running late, Zvonko has been looking at the screen for a while and noticed that some messages appeared on the screen more than once. Naturally, he\u2019s been writing down all messages on a piece of paper. He wants to know the length of the longest string that appeared at least twice (appears in two different positions on the paper).\n-----Input-----\nThe first line of input contains an integer $L~ (1 \\leq L \\leq 200000)$, the length of the string Zvonko wrote down.\nThe second line contains a string of $L$ lowercase letter of the English alphabet.\n-----Output-----\nOutput the length of the longest string that appears twice on a single line. If there is no such string, output zero.\n-----Examples-----\nSample Input 1:\n11\nsabcabcfabc\nSample Output 1:\n3\nSample Input 2:\n18\ntrutrutiktiktappop\nSample Output 2:\n4\n\ndef",
      "answer": "def longest_string_twice(string):\n    string_length = len(string)\n    if string_length < 2:\n        return 0\n    else:\n        string_length = len(string)\n        string_length_dict = {}\n        for i in range(string_length):\n            if string[i] in string_length_dict:\n                string_length_dict[string[i]] += 1\n            else:\n                string_length_dict[string[i]] = 1\n        for key, value in string_length_dict.items():\n            if value == 2:\n                return key\n        return 0\n\n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3118,
      "prompt": "Complete the Python function given the prompt below:\nAlice and Bob love playing Don\u2019tminion, which typically involves a lot of shuffling of decks of different sizes. Because they play so often, they are not only very quick at shuffling, but also very consistent. Each time Alice shuffles her deck, her cards get permuted in the same way, just like Bob always permutes his cards the same way when he shuffles them. This isn\u2019t good for playing games, but raises an interesting question.\nThey know that if they take turns shuffling, then at some point the deck will end up ordered in the same way as when they started. Alice shuffles once first, then Bob shuffles once, then Alice shuffles again, et cetera. They start with a sorted deck. What they do not know, however, is how many shuffles it will take before the deck is sorted again.\nCan you help them compute how many shuffles it will take? As Alice and Bob can only do $10^{12}$ shuffles in the limited time they have, any number strictly larger than this should be returned as huge instead.\n-----Input-----\n - The first line contains a single integer $1\\leq n\\leq 10^5$, the number of cards in the deck.\n - The second line contains $n$ distinct integers $1\\leq a_1, a_2, \\dotsc, a_ n \\leq n$, where $a_ i$ is the new position of the card previously at position $i$ when Alice shuffles the deck.\n - The third line contains $n$ distinct integers $1\\leq b_1,b_2,\\dotsc, b_ n\\leq n$, where $b_ i$ is the new position of the card previously at position $i$ when Bob shuffles the deck.\n-----Output-----\n - Output a single positive integer $m > 0$, the minimal number of shuffles required to sort the deck, or huge when this number is strictly larger than $10^{12}$.\n-----Examples-----\nSample Input 1:\n3\n2 3 1\n3 1 2\nSample Output 1:\n2\nSample Input 2:\n6\n5 1 6 3 2 4\n4 6 5 1 3 2\nSample Output 2:\n5\n\ndef",
      "answer": "def solve(n, a, b):\n    count = 0\n    while a!= b:\n        count += 1\n        a, b = b, a\n    return count\n\n",
      "difficulty": "competition",
      "split": "test"
   }
]