[
   {
      "task_id": 2700,
      "prompt": "Complete the Python function given the prompt below:\nChef likes inequalities. Please help him to solve next one.\nGiven four integers a, b, c, d. Find number of solutions x < y, where a \u2264 x \u2264 b and c \u2264 y \u2264 d and x, y integers.\n-----Input-----\nThe first line contains an integer T denoting number of tests.\nFirst line of each test case contains four positive integer numbers a, b, c and d.\n-----Output-----\nFor each test case, output a single number each in separate line denoting number of integer solutions as asked in the problem.\n-----Constraints-----\n- 1 \u2264 T \u2264 20 \n- 1 \u2264 a, b, c, d \u2264 106 \n-----Subtasks-----\n- Subtask #1: (30 points)  1 \u2264 a, b, c, d \u2264 103.\n- Subtask #2: (70 points)  Original constraints.\n-----Example-----\nInput:1\n2 3 3 4\nOutput:3\nInput:1\n2 999999 1 1000000\nOutput:499998500001\n\ndef",
      "answer": "def solve(a, b, c, d):\n    count = 0\n    for x in range(a, b+1):\n        for y in range(c, d+1):\n            if x < y:\n                count += 1\n    return count\n\n",
      "difficulty": "interview",
      "split": "test"
   },
   {
      "task_id": 2701,
      "prompt": "Complete the Python function given the prompt below:\nIn Chef's house there are N apples lying in a row on the floor. These apples are numbered from 1 (left most one) to N (right most one). The types of apples are also numbered by positive integers, and the type of apple i is Ti.\nChef has recently brought two trained dogs. Both of the dogs are too intelligent to know the smell of each type of apple. If Chef gives a dog an integer x, and releases it at one end of the row of apples, then the dog smells each apple one by one. Once the dog find an apple of type x, the dog picks the apple and back to Chef's room immidiately. If there is no apple of type x, then the dog will back without any apples.\nNow Chef wants to eat two apples as soon as possible. Here the apples must have distinct types, and the sum of the types must be equal to K. Chef can release the dogs from either of the ends, namely, he can leave (both at left end) or (both at right end) or (one at left end and one at right end) and he can release them at the same time. The dogs take one second to smell each apple. However the dogs can run rapidly, so the time for moving can be ignored. What is the minimum time (in seconds) to get the desired apples from his dogs?\n-----Input-----\nThe first line of input contains two space-separated integers N and K, denoting the number of apples and the required sum respectively. Then the next line contains N space-separated integers T1, T2,..., TN, denoting the types of the apples.\n-----Output-----\nPrint one integer describing the minimum number of seconds that Chef needs to wait till he gets the desired apples. If Chef cannot get the desired apples, then output \"-1\" without quotes.\n-----Constraints-----\n- 2 \u2264 N \u2264 500000 (5 \u00d7 105)\n- 1 \u2264 K \u2264 1000000 (106)\n- 1 \u2264 Ti \u2264 1000000 (106)\n-----Example-----\nSample Input 1:\n5 5\n2 4 3 2 1\nSample Output 1:\n2\nSample Input 2:\n5 5\n2 4 9 2 5\nSample Output 2:\n-1\n-----Explanation-----\nIn the first example, if Chef leaves the first dog from left and gives it integer 4, and the second dog from right and gives it integer 1, then the first dog takes 2 seconds and the second dog takes 1 second to get the apples. Thus Chef needs to wait 2 seconds. In any other way, Chef can't get the desired apples in less than 2 seconds.\nIn the second example, Chef cannot get two apples such that the sum of their types is 5 so the answer is \"-1\".\n\ndef",
      "answer": "def solve(n, k, arr):\n    arr.sort()\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        if arr[left] + arr[right] == k:\n            return min(left, right) + 1\n        elif arr[left] + arr[right] < k:\n            left += 1\n        else:\n            right -= 1\n    return -1\n\n",
      "difficulty": "interview",
      "split": "test"
   },
   {
      "task_id": 2702,
      "prompt": "Complete the Python function given the prompt below:\nThere has been yet another murder in the Shady city of Riverdale. This murder is being investigated by none other than the Riverdale's Finest- Jughead Jones & Betty Cooper. This murder has been done exactly in the same manner as all the murders happening since the return of the deadly game Gargoyle &Griffins. Betty has decided to put an end to these murders, so they decide to interrogate each and every person in the neighbourhood.\nAs they don't know these people personally they want to first get to know about their character i.e whether a particular person is a Truth\u2212speaking\u2212person$Truth-speaking-person$ or a False\u2212speaking\u2212person$False-speaking-person$. Jughead devises a strategy of interrogating the civilians.\nJughead decides that they will collect statements from all the people in the neighbourhood about every other person living in the neighbourhood. Each person speaks a statement in form of an array consisting of T$T$ and F$ F$, which tells us what he thinks about the ith$ith$ person. Let there be N$N$ people living in the neighbourhood. So if a person i$i$ is giving his/her statement, he/her will always call himself/herself a True person i.e Statement[i]=T$Statement[i]=T$.\nSo Jughead says that they will select the maximum$maximum$ number$number$ of people that maybe speaking the truth such that their statements don't contradict and then interrogate them further about the murder.\nHelp them pick the max no. of Truth speaking people.\nNote$Note$- A person speaking falsely$falsely$ doesn't mean that the complement of his statement would be the truth$truth$. If a person is declared false$false$(i.e not included in the set) after Betty and Jughead pick their set of truth speaking people with non-contradicting statements, the person declared false might not be speaking falsely$falsely$ about anyone(except saying he himself is a true$true$ speaking person which contradicts with the selected statements) but since the selected Set of statements feels him to be a false$false$ speaking person he won't be included in the set. \nBut if a person is tagged as truth$truth$ speaking person then their Statement must be entirely correct and should not contradict with the chosen set of truth$truth$ speaking people. All truth$truth$ speaking people mentioned in the selected statements should be part of the set and all the people declared false$false$ in the statements shouldn't be part of the set.\nSee example for clarity.\n-----Input:-----\n- First line will contain N$N$, the number of people in the neighbourhood. Then the Statements of ith$ith$ person follow. \n- Each Statement contains a single line of input, an array of length N$N$ consisting of T$T$ and F$F$.\n-----Output:-----\nPrint a single line denoting the maximum no. of people that might be speaking the truth.\n-----Constraints-----\n- 1\u2264N\u22641000$1 \\leq N \\leq 1000$\n- Statement$Statement$i$i$[i]=T$[i]=T$\n-----Sample Input1:-----\n5\nT T F F F\nT T F F F\nT T T F F\nF F F T T\nF F F T T\n-----Sample Output1:-----\n2\n-----Sample Input2:-----\n3\nT T T\nT T T\nF F T\n-----Sample Output2:-----\n1\n-----EXPLANATION:-----\nIn Sample 1\nWe can consider the 1st$1st$ and 2nd$2nd$ person to be speaking the truth. We can also consider the 4th$4th$ and the 5th$5th$ person to be speaking the truth. \nNote$Note$: we cannot select 1st$1st$ 2nd$2nd$ and 3rd$3rd$ person because the 1st$1st$ and the second person have labelled the 3rd person as a false speaking person, therefore if we select all 3 contradiction will arise.\nIn sample 2\nSet contains only the 3rd person\n\ndef",
      "answer": "def max_truth_speaking_people(arr):\n    n = len(arr)\n    max_count = 0\n    for i in range(n):\n        count = 0\n        for j in range(n):\n            if arr[i] == 'T':\n                if arr[j] == 'T':\n                    count += 1\n        if count > max_count:\n            max_count = count\n    return max_count\n\n",
      "difficulty": "interview",
      "split": "test"
   },
   {
      "task_id": 2703,
      "prompt": "Complete the Python function given the prompt below:\nBinod and his family live in Codingland. They have a festival called N-Halloween.\nThe festival is celebrated for N  consecutive days. On each day Binod gets some candies from his mother. He may or may not take them. On a given day,  Binod will be sad if he collected candies on that day and he does not have at least X   candies remaining  from the candies he collected that day at the end of that day. His friend Pelu who is very fond of candies asks for X  candies from Binod on a day if Binod collects any candy on that day. He does so immediately after Binod collects them. Binod being a good friend never denies him.  \nGiven a list a   where ai   denotes the number of candies Binod may take on the ith   day and  Q  queries having a number X, find the maximum number of candies Binod can collect so that he won't be sad after the festival ends.\nInput format: \nFirst-line contains two integers N and Q denoting the number of festival days and number of queries respectively.\nThe second line is the array whose ith   element is the maximum number of candies Binod may\ncollect on that day.\nEach of the next Q lines contains the number X i.e the minimum number of candies Binod wants to have at the end of every day on which he collects any candy.\nOutput format: \nFor every query output, a single integer denoting the max number of candies Binod may\ncollect (for the given X ) to be happy after the festival ends.\nConstraints:  \n1<=N,Q<=105  \n1<=Q<=105  \n0<=ai<=109  \n0<=X<=109  \nSample Input : \n5 2\n4 6 5 8 7\n1\n2\nSample Output : \n30\n30\nSample Input:  \n6 3 \n20 10 12 3 30 5 \n2 \n6 \n13 \nSample Output  \n77 \n62 \n30 \nExplanation: \nIn the first query of sample input 1, Binod can collect the maximum number of given chocolates for a given day each day as after the end of every day Binod will have a number of collected\nchocolates on that day greater than equal to 1 even after giving 1 chocolate to Pelu. So the\nthe answer is 4+6+5+8+7=30.\n\ndef",
      "answer": "def max_candies(n,q,arr):\n    arr.sort()\n    max_candies = 0\n    for i in range(q):\n        max_candies += arr[i]\n    return max_candies\n\n",
      "difficulty": "interview",
      "split": "test"
   },
   {
      "task_id": 2704,
      "prompt": "Complete the Python function given the prompt below:\nDevu has an array A consisting of N positive integers. He would like to perform following operation on array.\n- Pick some two elements a, b in the array (a could be same as b, but their corresponding indices in the array should not be same).\nRemove both the elements a and b and instead add a number x such that x lies between min(a, b) and max(a, b), both inclusive, (i.e. min(a, b) \u2264 x \u2264 max(a, b)).\nNow, as you know after applying the above operation N - 1 times, Devu will end up with a single number in the array. He is wondering whether it is possible to do the operations in such a way that he ends up a number t. \nHe asks your help in answering Q such queries, each of them will contain an integer t and you have to tell whether it is possible to end up t. \n-----Input-----\nThere is only one test case per test file.\nFirst line of the input contains two space separated integers N, Q denoting number of elements in A and number of queries for which Devu asks your help, respectively\nSecond line contains N space separated integers denoting the content of array A.\nEach of the next Q lines, will contain a single integer t corresponding to the query.\n-----Output-----\nOutput Q lines, each containing \"Yes\" or \"No\" (both without quotes) corresponding to the answer of corresponding query.\n-----Constraints-----\n- 1 \u2264 N, Q \u2264 105\n- 0 \u2264 t \u2264 109\n-----Subtasks-----\nSubtask #1 : 30 points\n- 1 \u2264 Ai \u2264 2\nSubtask #2 : 70 points\n- 1 \u2264 Ai \u2264 109\n-----Example-----\nInput 1:\n1 2\n1\n1\n2\nOutput:\nYes\nNo\nInput 2:\n2 4\n1 3\n1\n2\n3\n4\nOutput:\nYes\nYes\nYes\nNo\n-----Explanation-----\nIn the first example, Devu can't apply any operation. So the final element in the array will be 1 itself. \nIn the second example,\nDevu can replace 1 and 3 with any of the numbers among 1, 2, 3. Hence final element of the array could be 1, 2 or 3.\n\ndef",
      "answer": "def devu(arr, n, q):\n    for i in range(q):\n        t = int(input())\n        if (arr[0] == t):\n            print(\"Yes\")\n        else:\n            print(\"No\")\n    return\n\n",
      "difficulty": "interview",
      "split": "test"
   },
   {
      "task_id": 2705,
      "prompt": "Complete the Python function given the prompt below:\nUppal-balu is busy in extraction of gold from ores. He got an assignment from his favorite professor MH sir, but he got stuck in a problem. Can you help Uppal-balu to solve the problem.\nYou are given an array $a_1$, $a_2$, $\\dots$, $a_n$ of length $n$. You can perform the following operations on it:\n- Choose an index $i$ ($1 \\leq i \\leq n$), and replace $a_i$ by $a_{i} + 1$ or $a_{i} - 1$, which means add or subtract one to the element at index $i$.\nBeauty of the array is defined as maximum length of a subarray containing numbers which give same remainder upon dividing it by $k$ (that is, ($a_l$ mod $k$) = ($a_{l+1}$ mod $k$) = $\\dots$ = ($a_r$ mod $k$) for some $1 \\leq l \\leq r \\leq n$).\nYou need to calculate the beauty of the array $a_1$, $a_2$, $\\dots$, $a_n$ after applying at most $m$ operations.\nNOTE:\n- The subarray of a is a contiguous part of the array $a$, i.\u2009e. the array $a_l$, $a_{l+1}$, $\\dots$, $a_r$ for some $1 \\leq l \\leq r \\leq n$.\n- $x$ mod $y$ means the remainder of $x$ after dividing it by $y$.\n-----Input:-----\n- First line of input contains 3 integers $n$, $m$ and $k$.   \n- The second line contains $n$ integers $a_1$, $a_2$, $\\dots$, $a_n$.\n-----Output:-----\nOutput in a single line the beauty of the array after applying at most m operations.\n-----Constraints-----\n- $1 \\leq n,m \\leq 2\\cdot10^{5}$\n- $1 \\leq k \\leq 7$\n- $1 \\leq a_i \\leq 10^9$\n-----Sample Input 1:-----\n7 3 4\n8 2 3 7 8 1 1    \n-----Sample Output 1:-----\n5\n-----Sample Input 2:-----\n8 3 5\n7 2 1 3 6 5 6 2   \n-----Sample Output 2:-----\n5\n\ndef",
      "answer": "def beautifulArray(n, m, k):\n    if m == 0:\n        return 1\n    if m == 1:\n        return n\n    if m == 2:\n        return n * (n - 1) // 2\n    if m == 3:\n        return n * (n - 1) // 2 + n - 1\n    if m == 4:\n        return n * (n - 1) // 2 + n - 1 + n - 2\n    if m == 5:\n        return n * (n - 1) // 2 + n - 1 + n - 2 + n - 3\n    if m == 6:\n        return n * (n - 1) // 2 + n - 1 + n - 2 + n - 3 + n - 4\n    if m == 7:\n        return n * (n - 1) // 2 + n - 1 + n - 2 + n - 3 + n - 4 + n - 5\n    if m == 8:\n        return n * (n - 1) // 2 + n - 1 + n - 2 + n - 3 + n - 4 + n - 5 + n - 6\n    if m == 9:\n        return n * (n - 1) // 2 + n - 1 + n - 2 + n - 3 + n - 4 + n - 5 + n - 6 + n - 7\n    if m == 10:\n        return n * (n - 1) // 2 + n - 1 + n - 2 + n - 3 + n - 4 + n - 5 + n - 6 + n - 7 + n - 8\n    if m == 11:\n        return n * (n - 1) // 2 + n - 1 + n - 2 + n - 3 + n - 4 + n - 5 + n - 6 + n - 7 + n - 8 + n - 9\n    if m == 12:\n        return n * (n - 1) // 2 + n - 1 + n - 2 + n - 3 + n - 4 + n - 5 + n - 6 + n - 7 + n - 8 + n - 9 + n - 10\n    if m == 13:\n        return n * (n - 1) // 2 + n - 1 + n - 2 + n - 3 + n - 4 + n - 5 + n - 6 + n - 7 + n - 8 + n - 9 + n - 10 + n - 11\n    if m == 14:\n        return n * (n - 1) // 2 + n - 1 + n - 2 + n - 3 + n - 4 + n - 5 + n - 6 + n - 7 + n - 8 + n - 9 + n - 10 + n - 11 + n - 12\n    if m == 15:\n        return n * (n - 1) // 2 + n - 1 + n - 2 + n - 3 + n - 4 + n - 5 + n - 6 + n - 7 + n - 8 + n - 9 + n - 10 + n - 11 + n - 12 + n - 13\n    if m == 16:\n        return n * (n - 1) // 2 + n - 1 + n - 2 + n - 3 + n - 4 + n - 5 + n - 6 + n - 7 + n - 8 + n - 9 + n - 10 + n - 11 + n - 12 + n - 13 + n - 14\n    if m == 17:\n        return n * (n - 1) // 2 + n - 1 + n - 2 + n - 3 + n - 4 + n - 5 + n - 6 + n - 7 + n - 8 + n - 9 + n - 10 + n - 11 + n - 12 + n - 13 + n - 14 + n - 15\n    if m == 18:\n        return n * (n - 1) // 2 + n - 1 + n - 2 + n - 3 + n - 4 + n - 5 + n - 6 + n - 7 + n - 8 + n - 9 + n - 10 + n - 11 + n - 12 + n - 13 + n - 14 + n - 15 + n - 16\n    if m == 19:\n        return n * (n - 1) // 2 + n - 1 + n - 2 + n - 3 + n - 4 + n - 5 + n - 6 + n - 7 + n - 8 + n - 9 + n - 10 + n - 11 + n - 12 + n - 13 + n - 14 + n - 15 + n - 16 + n - 17\n    if m == 20:\n        return n * (n - 1) // 2 + n - 1 + n - 2 + n - 3 + n - 4 + n - 5",
      "difficulty": "interview",
      "split": "test"
   },
   {
      "task_id": 2706,
      "prompt": "Complete the Python function given the prompt below:\nJack and Jill got into a serious fight. Jack didn't not belive Jill when she said that her memory was far better than the others. He asked her to prove it as follows :- \n-  Jack would dictate a long list of numbers to her. At any point after he has dictated  at least \"k\" numbers, he can ask her what is the k-th minimum number (the k-th number if the numbers are arranged in increasing order) in the list so far. \n-  She succeeds in proving herself if she can tell the k-th minimum number every time he asks. \n-  The number of queries (dictate a new number or ask her the k-th minimum of the numbers given till then) has to be pre-decided before he starts asking. \nJill succeeded in proving herself by convincing Jack quite a few times. Now, Jill remembered that Jack had claimed that he was good at programming. It's her turn to ask him to prove his skill. Jack doesn't want to lose to her and comes to you for help. He asks you to make the program for him. \n-----Input-----\nJill has agreed to let Jack decide the format of the input and here's what he has decided. First line of the input contains n, the number of queries. Next line contains k. Next n lines contain a query each, say q. If  q >= 0  then the number is being 'dictated' to the system and needs to be remembered. If q = -1, then your program should return the k-th minimum number presented so far. It is given that 'q' can be -1 only if at least k numbers have already been given.\n-----Output-----\nFor every q = -1, you have to output the k-th minimum number given as input so far (not counting -1 as an input)\n-----Example-----\nInput1:\n6\n2\n3\n2\n-1\n-1\n1\n-1\nOutput1:\n3\n3\n2\nInput2:\n10\n5\n3\n6\n1\n4\n2\n9\n3\n1\n0\n-1\nOutput2:\n3\n\ndef",
      "answer": "def minimum(arr, k):\n    if k == 0:\n        return -1\n    if k > len(arr):\n        return -1\n    if k == 1:\n        return min(arr)\n    if k == 2:\n        return min(arr[0], arr[1])\n    if k == 3:\n        return min(arr[0], arr[1], arr[2])\n    if k == 4:\n        return min(arr[0], arr[1], arr[2], arr[3])\n    if k == 5:\n        return min(arr[0], arr[1], arr[2], arr[3], arr[4])\n    if k == 6:\n        return min(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5])\n    if k == 7:\n        return min(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6])\n    if k == 8:\n        return min(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7])\n    if k == 9:\n        return min(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8])\n    if k == 10:\n        return min(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8], arr[9])\n\n",
      "difficulty": "interview",
      "split": "test"
   },
   {
      "task_id": 2707,
      "prompt": "Complete the Python function given the prompt below:\nGiven an array A of n non-negative integers. Find the number of ways to partition/divide the array into subarrays, such that  mex in each subarray is not more than k. For example, mex of the arrays [1, 2] will be 0, and that of [0, 2] will be 1, and that of [0, 1, 2] will be 3. Due to the fact that the answer can turn out to be quite large, calculate it modulo 109\u2009+\u20097.\n-----Input-----\n- The first line of the input contains two integers n, k denoting the number of elements and limit of mex.\n- The second line contains n space-separated integers A1, A2,..., An.\n-----Output-----\n- Output a single integer corresponding to the answer of the problem.\n-----Constraints-----\n- 1 \u2264 n \u2264 5 * 105\n- 0 \u2264 k, A[i] \u2264 109\n-----Example-----\nInput:\n3 1\n0 1 2\nOutput:\n2\nInput:\n10 3\n0 1 2 3 4 0 1 2 5 3\nOutput:\n379\n-----Explanation-----\nExample 1. The valid ways of partitioning will be [[0], [1, 2]] (mex of first subarray is 1, while that of the second is zero), and [[0], [1], [2]] (mex of first subarray is 1, and that of others is 0). There is no other way to partition the array such that mex is less than or equal to 1. For example, [[0, 1], [2]] is not a valid partitioning as mex of first subarray is 2 which is more than 1.\n\ndef",
      "answer": "def partition(arr, n, k):\n    # code here\n    return 0\n\n",
      "difficulty": "interview",
      "split": "test"
   },
   {
      "task_id": 2708,
      "prompt": "Complete the Python function given the prompt below:\nAyush is learning how to decrease a number by one, but he does it wrong with a number consisting of two or more digits. Ayush subtracts one from a number by the following algorithm:\nif the last digit of the number is non-zero, he decreases the number by one.\nif the last digit of the number is zero, he divides the number by 10.\nYou are given an integer number n\nAyush will subtract one from it k times. Your task is to print the result after all k subtractions.\nIt is guaranteed that the result will be a positive integer number.\nInput\nThe first line of the input contains two integers n and k (2 \u2264 n \u2264 10^9, 1 \u2264 k \u2264 50) -- the number from which Ayush will subtract and the number of subtractions respectively.\nOutput\nPrint one integer number \u2014 the result of the decreasing n by one k times.\nIt is guaranteed that the result will be a positive integer number.\nEXAMPLE\nSample Input 1\n512 4\nSample Output 1\n50\nSample Input 2\n1000000000 9\nSample Output 2\n1\n\ndef",
      "answer": "def subtract(n, k):\n    while k > 0:\n        if n % 10!= 0:\n            n -= 1\n        else:\n            n = n // 10\n        k -= 1\n    return n\n\n",
      "difficulty": "interview",
      "split": "test"
   },
   {
      "task_id": 2709,
      "prompt": "Complete the Python function given the prompt below:\nYou think you can code?\n This problem will test you on various basic programming techniques.\n You are given two integers $N$ and $t$; and then an array $A$ of $N$ integers ($0$-based indexing).\n Based on the value of $t$, you will perform an action on $A$.\n$t$\nAction Needed\n$1$\nPrint $7$, regardless of the content of $A$\n$2$\nPrint \u201cBigger\u201d if $A[0] > A[1]$, or \nPrint \u201cEqual\u201d if $A[0] == A[1]$, or \nPrint \u201cSmaller\u201d otherwise (without the quotes); \nIgnore other indices of $A$, if any\n$3$\nPrint the median of three integers {$A[0]$, $A[1]$, and $A[2]$}; \nIgnore other indices of $A$, if any\n$4$\nPrint the sum of all integers in $A$\n$5$\nPrint the sum of all even integers in $A$\n$6$\nApply modulo (%) $26$ to each integer in $A$, \nMap integer $0$/$1$/$\\ldots $/$25$ to character \u2018a\u2019/\u2018b\u2019/$\\ldots $/\u2018z\u2019, \nFinally, print the sequence of characters as a string (without the spaces)\n$7$\na. Start from index $i = 0$; \nb. Jump to index $i = A[i]$; \nc. If the current index $i$ is outside the valid bound of [0..$N$-1], print \u201cOut\u201d and stop; \nd. Else if the current index $i$ is index $N$-$1$, print \u201cDone\u201d and stop; \ne1. Otherwise, repeat step b; \ne2. If doing this leads to an infinite loop, print \u201cCyclic\u201d and stop; \n(all output are without the quotes)\n-----Input-----\nThe first line of the input contains an integer $N$ and $t$ ($3 \\leq N \\leq 200000$; $1 \\leq t \\leq 7$).\n The second line of the input contains $N$ non-negative $32$-bit signed integers.\n-----Output-----\nFor each test case, output the required answer based on the value of $t$.\n-----Scoring-----\nThere are $20$ hidden test cases that test various requirements of this problem.\n All $20$ test cases will be tested.\n Each hidden test case worth $5$ points (the $7$ sample test cases below worth $0$ point).\n-----Examples-----\nSample Input 1:\n7 1\n1 2 3 4 5 6 7\nSample Output 1:\n7\nSample Input 2:\n7 2\n1 2 3 4 5 6 7\nSample Output 2:\nSmaller\nSample Input 3:\n7 3\n1 2 3 4 5 6 7\nSample Output 3:\n2\nSample Input 4:\n7 4\n1 2 3 4 5 6 7\nSample Output 4:\n28\nSample Input 5:\n7 5\n1 2 3 4 5 6 7\nSample Output 5:\n12\nSample Input 6:\n10 6\n7 4 11 37 14 22 40 17 11 3\nSample Output 6:\nhelloworld\n\ndef",
      "answer": "def solve(n, t, a):\n    if t == 1:\n        print(7)\n    elif t == 2:\n        if a[0] > a[1]:\n            print(\"Bigger\")\n        elif a[0] == a[1]:\n            print(\"Equal\")\n        else:\n            print(\"Smaller\")\n    elif t == 3:\n        print(int(sum(a)/3))\n    elif t == 4:\n        print(sum(a))\n    elif t == 5:\n        print(sum([i for i in a if i % 2 == 0]))\n    elif t == 6:\n        print(\"\".join(chr(i % 26 + ord('a')) for i in a))\n    else:\n        print(\"Cyclic\")\n\n",
      "difficulty": "interview",
      "split": "test"
   },
   {
      "task_id": 2710,
      "prompt": "Complete the Python function given the prompt below:\nIn the country there are n cities and m bidirectional roads between them. Each city has an army. Army of the i-th city consists of a_{i} soldiers. Now soldiers roam. After roaming each soldier has to either stay in his city or to go to the one of neighboring cities by at moving along at most one road.\nCheck if is it possible that after roaming there will be exactly b_{i} soldiers in the i-th city.\n-----Input-----\nFirst line of input consists of two integers n and m (1 \u2264 n \u2264 100, 0 \u2264 m \u2264 200).\nNext line contains n integers a_1, a_2,..., a_{n} (0 \u2264 a_{i} \u2264 100).\nNext line contains n integers b_1, b_2,..., b_{n} (0 \u2264 b_{i} \u2264 100).\nThen m lines follow, each of them consists of two integers p and q (1 \u2264 p, q \u2264 n, p \u2260 q) denoting that there is an undirected road between cities p and q. \nIt is guaranteed that there is at most one road between each pair of cities.\n-----Output-----\nIf the conditions can not be met output single word \"NO\".\nOtherwise output word \"YES\" and then n lines, each of them consisting of n integers. Number in the i-th line in the j-th column should denote how many soldiers should road from city i to city j (if i \u2260 j) or how many soldiers should stay in city i (if i = j).\nIf there are several possible answers you may output any of them.\n-----Examples-----\nInput\n4 4\n1 2 6 3\n3 5 3 1\n1 2\n2 3\n3 4\n4 2\nOutput\nYES\n1 0 0 0 \n2 0 0 0 \n0 5 1 0 \n0 0 2 1 \nInput\n2 0\n1 2\n2 1\nOutput\nNO\n\ndef",
      "answer": "def solve(n, m, a, b, roads):\n    # Write your code here\n    if n!= len(a) or m!= len(b):\n        return \"NO\"\n    if n!= len(b):\n        return \"NO\"\n    if n!= len(a):\n        return \"NO\"\n    if n!= len(a):\n        return \"NO\"\n    if n!= len(a):\n        return \"NO\"\n    if n!= len(a):\n        return \"NO\"\n    if n!= len(a):\n        return \"NO\"\n    if n!= len(a):\n        return \"NO\"\n    if n!= len(a):\n        return \"NO\"\n    if n!= len(a):\n        return \"NO\"\n    if n!= len(a):\n        return \"NO\"\n    if n!= len(a):\n        return \"NO\"\n    if n!= len(a):\n        return \"NO\"\n    if n!= len(a):\n        return \"NO\"\n    if n!= len(a):\n        return \"NO\"\n    if n!= len(a):\n        return \"NO\"\n    if n!= len(a):\n        return \"NO\"\n    if n!= len(a):\n        return \"NO\"\n    if n!= len(a):\n        return \"NO\"\n    if n!= len(a):\n        return \"NO\"\n    if n!= len(a):\n        return \"NO\"\n    if n!= len(a):\n        return \"NO\"\n    if n!= len(a):\n        return \"NO\"\n    if n!= len(a):\n        return \"NO\"\n    if n!= len(a):\n        return \"NO\"\n    if n!= len(a):\n        return \"NO\"\n    if n!= len(a):\n        return \"NO\"\n    if n!= len(a):\n        return \"NO\"\n    if n!= len(a):\n        return \"NO\"\n    if n!= len(a):\n        return \"NO\"\n    if n!= len(a):\n        return \"NO\"\n    if n!= len(a):\n        return \"NO\"\n    if n!= len(a):\n        return \"NO\"\n    if n!= len(a):\n        return \"NO\"\n    if n!= len(a):\n        return \"NO\"\n    if n!= len(a):\n        return \"NO\"\n    if n!= len(a):\n        return \"NO\"\n    if n!= len(a):\n        return \"NO\"\n    if n!= len(a):\n        return \"NO\"\n    if n!= len(a):\n        return \"NO\"\n    if n!= len(a):\n        return \"NO\"\n    if n!= len(a):\n        return \"NO\"\n    if n!= len(a):\n        return \"NO\"\n    if n!= len(a):\n        return \"NO\"\n    if n!= len(a):\n        return \"NO\"\n    if n!= len(a):\n        return \"NO\"\n    if n!= len(a):\n        return \"NO\"\n    if n!= len(a):\n        return \"NO\"\n    if n!= len(a):\n        return \"NO\"\n    if n!= len(a):\n        return \"NO\"\n    if n!= len(a):\n        return \"NO\"\n    if n!= len(a):\n        return \"NO\"\n    if n!= len(a):\n        return \"NO\"\n    if n!= len(a):\n        return \"NO\"\n    if n!= len(a):\n        return \"NO\"\n    if n!= len(a):\n        return \"NO\"\n    if n!= len(a):\n        return \"NO\"\n    if n!= len(a):\n        return \"NO\"\n    if n!= len(a):\n        return \"NO\"\n    if n!= len(a):\n        return \"NO\"\n    if n!= len(a):\n        return \"NO\"\n    if n!= len(a):\n        return \"NO\"\n    if n!= len(a):\n        return \"NO\"\n    if n!= len(a):\n        return \"NO\"\n    if n!= len(a):\n        return \"NO\"\n    if n!= len(a):\n        return \"NO\"\n    if n!= len(a",
      "difficulty": "interview",
      "split": "test"
   },
   {
      "task_id": 2711,
      "prompt": "Complete the Python function given the prompt below:\nWhile exploring the old caves, researchers found a book, or more precisely, a stash of mixed pages from a book. Luckily, all of the original pages are present and each page contains its number. Therefore, the researchers can reconstruct the book.\nAfter taking a deeper look into the contents of these pages, linguists think that this may be some kind of dictionary. What's interesting is that this ancient civilization used an alphabet which is a subset of the English alphabet, however, the order of these letters in the alphabet is not like the one in the English language.\nGiven the contents of pages that researchers have found, your task is to reconstruct the alphabet of this ancient civilization using the provided pages from the dictionary.\n-----Input-----\nFirst-line contains two integers: $n$ and $k$ ($1 \\le n, k \\le 10^3$) \u2014 the number of pages that scientists have found and the number of words present at each page. Following $n$ groups contain a line with a single integer $p_i$ ($0 \\le n \\lt 10^3$) \u2014 the number of $i$-th page, as well as $k$ lines, each line containing one of the strings (up to $100$ characters) written on the page numbered $p_i$.\n-----Output-----\nOutput a string representing the reconstructed alphabet of this ancient civilization. If the book found is not a dictionary, output \"IMPOSSIBLE\" without quotes. In case there are multiple solutions, output any of them.\n-----Example-----\nInput\n3 3\n2\nb\nb\nbbac\n0\na\naca\nacba\n1\nab\nc\nccb\nOutput\nacb\n\ndef",
      "answer": "def reconstruct_alphabet(pages, words):\n    alphabet = {}\n    for page in pages:\n        for word in page.split():\n            if word in alphabet:\n                alphabet[word] += 1\n            else:\n                alphabet[word] = 1\n    return ''.join(sorted(alphabet, key=alphabet.get, reverse=True)) if len(alphabet) == 26 else 'IMPOSSIBLE'\n\n",
      "difficulty": "interview",
      "split": "test"
   },
   {
      "task_id": 2712,
      "prompt": "Complete the Python function given the prompt below:\nYura is tasked to build a closed fence in shape of an arbitrary non-degenerate simple quadrilateral. He's already got three straight fence segments with known lengths $a$, $b$, and $c$. Now he needs to find out some possible integer length $d$ of the fourth straight fence segment so that he can build the fence using these four segments. In other words, the fence should have a quadrilateral shape with side lengths equal to $a$, $b$, $c$, and $d$. Help Yura, find any possible length of the fourth side.\nA non-degenerate simple quadrilateral is such a quadrilateral that no three of its corners lie on the same line, and it does not cross itself.\n-----Input-----\nThe first line contains a single integer $t$\u00a0\u2014 the number of test cases ($1 \\le t \\le 1000$). The next $t$ lines describe the test cases.\nEach line contains three integers $a$, $b$, and $c$\u00a0\u2014 the lengths of the three fence segments ($1 \\le a, b, c \\le 10^9$).\n-----Output-----\nFor each test case print a single integer $d$\u00a0\u2014 the length of the fourth fence segment that is suitable for building the fence. If there are multiple answers, print any. We can show that an answer always exists.\n-----Example-----\nInput\n2\n1 2 3\n12 34 56\nOutput\n4\n42\n-----Note-----\nWe can build a quadrilateral with sides $1$, $2$, $3$, $4$.\nWe can build a quadrilateral with sides $12$, $34$, $56$, $42$.\n\ndef",
      "answer": "def solve(a, b, c, d):\n    if a == b == c == d:\n        return a\n    if a == b or a == c or a == d:\n        return a\n    if b == c or b == d or c == d:\n        return b\n    if a + b > c and a + c > b and a + d > c and a + d > b:\n        return a + b + c + d\n    if a + b < c and a + c < b and a + d < c and a + d < b:\n        return a + b + c + d\n    if a + b > c and a + c > b and a + d < c and a + d < b:\n        return a + b + c + d\n    if a + b < c and a + c < b and a + d > c and a + d > b:\n        return a + b + c + d\n    if a + b < c and a + c < b and a + d < c and a + d < b:\n        return a + b + c + d\n    if a + b > c and a + c > b and a + d < c and a + d < b:\n        return a + b + c + d\n    if a + b < c and a + c < b and a + d > c and a + d > b:\n        return a + b + c + d\n    if a + b > c and a + c > b and a + d < c and a + d < b:\n        return a + b + c + d\n    if a + b < c and a + c < b and a + d > c and a + d > b:\n        return a + b + c + d\n    if a + b > c and a + c > b and a + d < c and a + d < b:\n        return a + b + c + d\n    if a + b < c and a + c < b and a + d > c and a + d > b:\n        return a + b + c + d\n    if a + b > c and a + c > b and a + d < c and a + d < b:\n        return a + b + c + d\n    if a + b < c and a + c < b and a + d > c and a + d > b:\n        return a + b + c + d\n    if a + b > c and a + c > b and a + d < c and a + d < b:\n        return a + b + c + d\n    if a + b < c and a + c < b and a + d > c and a + d > b:\n        return a + b + c + d\n    if a + b > c and a + c > b and a + d < c and a + d < b:\n        return a + b + c + d\n    if a + b < c and a + c < b and a + d > c and a + d > b:\n        return a + b + c + d\n    if a + b > c and a + c > b and a + d < c and a + d < b:\n        return a + b + c + d\n    if a + b < c and a + c < b and a + d > c and a + d > b:\n        return a + b + c + d\n    if a + b > c and a + c > b and a + d < c and a + d < b:\n        return a + b + c + d\n    if a + b < c and a + c < b and a + d > c and a + d > b:\n        return a + b + c + d\n    if a + b > c and a + c > b and a + d < c and a + d < b:\n        return a + b + c + d\n    if a + b < c and a + c < b and a + d > c and a + d > b:\n        return a + b + c + d\n    if a + b > c and a + c > b and a + d < c and a + d < b:\n        return a + b + c + d\n    if a + b < c and a + c < b and a + d > c and a + d > b:\n        return a + b + c + d\n    if a + b > c and a + c > b and a + d < c and a + d < b:\n        return a + b + c +",
      "difficulty": "interview",
      "split": "test"
   },
   {
      "task_id": 2713,
      "prompt": "Complete the Python function given the prompt below:\nThe gaming company Sandstorm is developing an online two player game. You have been asked to implement the ranking system. All players have a rank determining their playing strength which gets updated after every game played. There are $25$ regular ranks, and an extra rank, \u201cLegend\u201d, above that. The ranks are numbered in decreasing order, $25$ being the lowest rank, $1$ the second highest rank, and Legend the highest rank. \nEach rank has a certain number of \u201cstars\u201d that one needs to gain before advancing to the next rank. If a player wins a game, she gains a star. If before the game the player was on rank $6$-$25$, and this was the third or more consecutive win, she gains an additional bonus star for that win. When she has all the stars for her rank (see list below) and gains another star, she will instead gain one rank and have one star on the new rank.\nFor instance, if before a winning game the player had all the stars on her current rank, she will after the game have gained one rank and have $1$ or $2$ stars (depending on whether she got a bonus star) on the new rank. If on the other hand she had all stars except one on a rank, and won a game that also gave her a bonus star, she would gain one rank and have $1$ star on the new rank.\nIf a player on rank $1$-$20$ loses a game, she loses a star. If a player has zero stars on a rank and loses a star, she will lose a rank and have all stars minus one on the rank below. However, one can never drop below rank $20$ (losing a game at rank $20$ with no stars will have no effect).\nIf a player reaches the Legend rank, she will stay legend no matter how many losses she incurs afterwards.\nThe number of stars on each rank are as follows:\n - Rank $25$-$21$: $2$ stars\n - Rank $20$-$16$: $3$ stars\n - Rank $15$-$11$: $4$ stars\n - Rank $10$-$1$: $5$ stars\nA player starts at rank $25$ with no stars. Given the match history of a player, what is her rank at the end of the sequence of matches?\n-----Input-----\nThe input consists of a single line describing the sequence of matches. Each character corresponds to one game; \u2018W\u2019 represents a win and \u2018L\u2019 a loss. The length of the line is between $1$ and $10000$ characters (inclusive).\n-----Output-----\nOutput a single line containing a rank after having played the given sequence of games; either an integer between $1$ and $25$ or \u201cLegend\u201d.\n-----Examples-----\nSample Input 1:\nWW\nSample Output 1:\n25\nSample Input 2:\nWWW\nSample Output 2:\n24\nSample Input 3:\nWWWW\nSample Output 3:\n23\nSample Input 4:\nWLWLWLWL\nSample Output 4:\n24\nSample Input 5:\nWWWWWWWWWLLWW\nSample Output 5:\n19\n\ndef",
      "answer": "def rank(match_history):\n    rank = 25\n    for i in range(len(match_history)):\n        if match_history[i] == 'W':\n            rank -= 1\n        elif match_history[i] == 'L':\n            rank += 1\n    return rank\n\n",
      "difficulty": "interview",
      "split": "test"
   },
   {
      "task_id": 2714,
      "prompt": "Complete the Python function given the prompt below:\nYou are given an undirected unweighted graph consisting of $n$ vertices and $m$ edges.\nYou have to write a number on each vertex of the graph. Each number should be $1$, $2$ or $3$. The graph becomes beautiful if for each edge the sum of numbers on vertices connected by this edge is odd.\nCalculate the number of possible ways to write numbers $1$, $2$ and $3$ on vertices so the graph becomes beautiful. Since this number may be large, print it modulo $998244353$.\nNote that you have to write exactly one number on each vertex.\nThe graph does not have any self-loops or multiple edges.\n-----Input-----\nThe first line contains one integer $t$ ($1 \\le t \\le 3 \\cdot 10^5$) \u2014 the number of tests in the input.\nThe first line of each test contains two integers $n$ and $m$ ($1 \\le n \\le 3 \\cdot 10^5, 0 \\le m \\le 3 \\cdot 10^5$) \u2014 the number of vertices and the number of edges, respectively. Next $m$ lines describe edges: $i$-th line contains two integers $u_i$, $ v_i$ ($1 \\le u_i, v_i \\le n; u_i \\neq v_i$) \u2014 indices of vertices connected by $i$-th edge.\nIt is guaranteed that $\\sum\\limits_{i=1}^{t} n \\le 3 \\cdot 10^5$ and $\\sum\\limits_{i=1}^{t} m \\le 3 \\cdot 10^5$.\n-----Output-----\nFor each test print one line, containing one integer \u2014 the number of possible ways to write numbers $1$, $2$, $3$ on the vertices of given graph so it becomes beautiful. Since answers may be large, print them modulo $998244353$.\n-----Example-----\nInput\n2\n2 1\n1 2\n4 6\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\nOutput\n4\n0\n-----Note-----\nPossible ways to distribute numbers in the first test:   the vertex $1$ should contain $1$, and $2$ should contain $2$;  the vertex $1$ should contain $3$, and $2$ should contain $2$;  the vertex $1$ should contain $2$, and $2$ should contain $1$;  the vertex $1$ should contain $2$, and $2$ should contain $3$. \nIn the second test there is no way to distribute numbers.\n\ndef",
      "answer": "def beautiful_graph(n, m):\n    return 0\n\n",
      "difficulty": "interview",
      "split": "test"
   },
   {
      "task_id": 2715,
      "prompt": "Complete the Python function given the prompt below:\nWe have a sequence of length N consisting of non-negative integers. Consider performing the following operation on this sequence until the largest element in this sequence becomes N-1 or smaller.\n - Determine the largest element in the sequence (if there is more than one, choose one). Decrease the value of this element by N, and increase each of the other elements by 1.\nIt can be proved that the largest element in the sequence becomes N-1 or smaller after a finite number of operations.\nYou are given an integer K. Find an integer sequence a_i such that the number of times we will perform the above operation is exactly K. It can be shown that there is always such a sequence under the constraints on input and output in this problem.\n-----Constraints-----\n - 0 \u2264 K \u2264 50 \\times 10^{16}\n-----Input-----\nInput is given from Standard Input in the following format:\nK\n-----Output-----\nPrint a solution in the following format:\nN\na_1 a_2... a_N\nHere, 2 \u2264 N \u2264 50 and 0 \u2264 a_i \u2264 10^{16} + 1000 must hold.\n-----Sample Input-----\n0\n-----Sample Output-----\n4\n3 3 3 3\n\n\ndef",
      "answer": "def solve(k):\n    n = 0\n    while n < k:\n        n += 1\n        n -= 1\n        n += 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n += 1\n        n -= 1\n        n",
      "difficulty": "interview",
      "split": "test"
   },
   {
      "task_id": 2716,
      "prompt": "Complete the Python function given the prompt below:\nYou think you can code?\n This problem will test you on various basic programming techniques.\n You are given two integers $N$ and $t$; and then an array $A$ of $N$ integers ($0$-based indexing).\n Based on the value of $t$, you will perform an action on $A$.\n$t$\nAction Needed\n$1$\nPrint \u201cYes\u201d if there are two integers $x \\in A$ and $y \\in A$ such that $x \\neq y$ and $x+y = 7777$, \nor \u201cNo\u201d otherwise (without the quotes)\n$2$\nPrint \u201cUnique\u201d if all integers in $A$ are different; \nor print \u201cContains duplicate\u201d otherwise (without the quotes)\n$3$\nFind and print the integer that appears $> \\frac{N}{2}$ times in $A$; \nor print $-1$ if such integer cannot be found\n$4$\nFind and print the median integer of $A$ if $N$ is odd; \nor print both median integers of $A$ if $N$ is even (separate them with a single space)\n$5$\nPrint integers in $A$ that fall between a range [$100 \\ldots 999$] in sorted order; \n(print a single space between two integers)\n-----Input-----\nThe first line of the input contains an integer $N$ and $t$ ($3 \\leq N \\leq 200000$; $1 \\leq t \\leq 5$).\n The second line of the input contains $N$ non-negative $32$-bit signed integers.\n-----Output-----\nFor each test case, output the required answer based on the value of $t$.\n-----Scoring-----\nThere are $20$ hidden test cases that test various requirements of this problem.\n All $20$ test cases will be tested.\n Each hidden test case worth $5$ points (the $5$ sample test cases below worth $0$ point).\n-----Examples-----\nSample Input 1:\n7 1\n1 7770 3 4 5 6 7\nSample Output 1:\nYes\nSample Input 2:\n7 2\n1 2 3 4 5 6 7\nSample Output 2:\nUnique\nSample Input 3:\n7 3\n1 1 1 1 2 2 2\nSample Output 3:\n1\nSample Input 4:\n8 4\n8 1 4 3 6 7 5 2\nSample Output 4:\n4 5\n\ndef",
      "answer": "def solve(n, t, a):\n    if t == 1:\n        for i in range(len(a)):\n            if a[i]!= i+1:\n                return \"Yes\"\n        return \"No\"\n    if t == 2:\n        for i in range(len(a)):\n            if a[i]!= i+1:\n                return \"Yes\"\n        return \"No\"\n    if t == 3:\n        for i in range(len(a)):\n            if a[i]!= i+1:\n                return \"Yes\"\n        return \"No\"\n    if t == 4:\n        for i in range(len(a)):\n            if a[i]!= i+1:\n                return \"Yes\"\n        return \"No\"\n    if t == 5:\n        for i in range(len(a)):\n            if a[i]!= i+1:\n                return \"Yes\"\n        return \"No\"\n    if t == 6:\n        for i in range(len(a)):\n            if a[i]!= i+1:\n                return \"Yes\"\n        return \"No\"\n    if t == 7:\n        for i in range(len(a)):\n            if a[i]!= i+1:\n                return \"Yes\"\n        return \"No\"\n    if t == 8:\n        for i in range(len(a)):\n            if a[i]!= i+1:\n                return \"Yes\"\n        return \"No\"\n    if t == 9:\n        for i in range(len(a)):\n            if a[i]!= i+1:\n                return \"Yes\"\n        return \"No\"\n    if t == 10:\n        for i in range(len(a)):\n            if a[i]!= i+1:\n                return \"Yes\"\n        return \"No\"\n    if t == 11:\n        for i in range(len(a)):\n            if a[i]!= i+1:\n                return \"Yes\"\n        return \"No\"\n    if t == 12:\n        for i in range(len(a)):\n            if a[i]!= i+1:\n                return \"Yes\"\n        return \"No\"\n    if t == 13:\n        for i in range(len(a)):\n            if a[i]!= i+1:\n                return \"Yes\"\n        return \"No\"\n    if t == 14:\n        for i in range(len(a)):\n            if a[i]!= i+1:\n                return \"Yes\"\n        return \"No\"\n    if t == 15:\n        for i in range(len(a)):\n            if a[i]!= i+1:\n                return \"Yes\"\n        return \"No\"\n    if t == 16:\n        for i in range(len(a)):\n            if a[i]!= i+1:\n                return \"Yes\"\n        return \"No\"\n    if t == 17:\n        for i in range(len(a)):\n            if a[i]!= i+1:\n                return \"Yes\"\n        return \"No\"\n    if t == 18:\n        for i in range(len(a)):\n            if a[i]!= i+1:\n                return \"Yes\"\n        return \"No\"\n    if t == 19:\n        for i in range(len(a)):\n            if a[i]!= i+1:\n                return \"Yes\"\n        return \"No\"\n    if t == 20:\n        for i in range(len(a)):\n            if a[i]!= i+1:\n                return \"Yes\"\n        return \"No\"\n    if t == 21:\n        for i in range(len(a)):\n            if a[i]!= i+1:\n                return \"Yes\"\n        return \"No\"\n    if t == 22:\n        for i in range(len(a)):\n            if a[i]!= i+1:\n                return \"Yes\"\n        return \"No\"\n    if t == 23:\n        for i in range(len(a)):\n            if a[i]!= i+1:\n                return \"Yes\"\n        return \"No\"\n    if t == 24:\n        for i in range(len(a)):\n            if a[i]!=",
      "difficulty": "interview",
      "split": "test"
   },
   {
      "task_id": 2717,
      "prompt": "Complete the Python function given the prompt below:\nIt is finally Bobby\u2019s birthday, and all of his Acquaintances, Buddies and Colleagues have gathered for a board game night. They are going to play a board game which is played in up to three big teams. Bobby decided to split his guests into groups based on how well he knows them: the Acquaintances on team $A$, the Buddies on team $B$, and the Colleagues on team $C$.\nWhile Bobby was busy explaining the rules to everyone, all his guests already took seats around his large, circular living room table. However, for the game it is crucial that all people sitting on a team are sitting next to each other. Otherwise, members of other teams could easily eavesdrop on their planning, ruining the game. So some people may need to change seats to avoid this from happening.\nBobby wants to start playing the game as soon as possible, so he wants people to switch seats as efficiently as possible. Given the current arrangement around the circular table, can you figure out the minimal number of people that must switch seats so that the teams are lined up correctly?\n-----Input-----\n - The first line of the input contains the integer $n$, where $1 \\leq n \\leq 10^5$ is the number of players (as well as seats).\n - The second line contains a string of length $n$, consisting only of the characters in ABC. This indicates the teams of the people sitting around the table in order.\n-----Output-----\nPrint a single integer: the minimal number of people you have to ask to move seats to make sure the teams sit together.\n-----Examples-----\nSample Input 1:\n5\nABABC\nSample Output 1:\n2\nSample Input 2:\n12\nABCABCABCABC\nSample Output 2:\n6\nSample Input 3:\n4\nACBA\nSample Output 3:\n0\nSample Input 4:\n6\nBABABA\nSample Output 4:\n2\n\ndef",
      "answer": "def min_switches(n, s):\n    # your code here\n    return 0\n\n",
      "difficulty": "interview",
      "split": "test"
   },
   {
      "task_id": 2718,
      "prompt": "Complete the Python function given the prompt below:\nYou are attending the International Construction by Preschoolers Contest. Unfortunately, you are too old to participate, but you still enjoy watching the competition.\nIn between rounds, you are walking around the contest area when you see a toddler, one of the contestants, playing with her blocks. Annoyed that she is having all the fun, you decide to challenge her to a game.\nYou set up two stacks of blocks of a certain height. Then, you and the toddler take turns removing some number of blocks from the stack which contains the largest number of blocks (if both stacks have the same number of blocks, the current player can choose either stack to remove blocks from). The number of blocks removed must be a positive multiple of the number of blocks in the smaller stack. For instance, if there is a stack with $5$ blocks, and one with $23$ blocks, then the current player can remove $5$, $10$, $15$ or $20$ blocks from the stack of $23$ blocks. The player who empties one of the stacks wins the game.\nYou have graciously decided to take the first move, but then a worry strikes you \u2013 might this devious preschooler still be able to beat you?\n-----Input-----\nOne line with two integers $N$ and $M$, satisfying $1 \\leq N, M\\leq 10^{18}$, the initial sizes of the two stacks of blocks.\n-----Output-----\nOutput a single line containing a single word: the word \u201cwin\u201d if you are guaranteed to win if you play correctly, and the word \u201close\u201d if your opponent can force you to lose.\n-----Examples-----\nSample Input 1:\n3 2\nSample Output 1:\nlose\nSample Input 2:\n3 3\nSample Output 2:\nwin\nSample Input 3:\n5 2\nSample Output 3:\nwin\nSample Input 4:\n5 3\nSample Output 4:\nwin\n\ndef",
      "answer": "def win(n, m):\n    if n > m:\n        return \"win\"\n    elif n < m:\n        return \"lose\"\n    else:\n        return \"draw\"\n\n",
      "difficulty": "interview",
      "split": "test"
   },
   {
      "task_id": 2719,
      "prompt": "Complete the Python function given the prompt below:\nJoana Vasconcelos is a Portuguese artist who uses everyday objects in her creations, like electric irons or plastic cutlery. She is an inspiration to Ana, who wants to make ceiling hanging sculptures with straight knitting needles and balls of wool. For safety reasons, there will be a ball at each end of each needle. Knitting needles vary in colour, length and thickness (to allow intersections of needles).\nSculptures are to be exhibited in room corners, which provide a 3D Cartesian coordinate system, with many lamps on the ceiling. Sculpture designs are made with the coordinates of the centres of the balls of wool in which knitting needles are stuck. That is, each needle $N$ is represented by a set of two different triples: $N=\\{ (x,y,z),(x\u2019,y\u2019,z\u2019)\\} $.\nAna dislikes closed chains. A true closed chain is a sequence of $k$ distinct needles, $N_1, N_2, \\ldots, N_ k$ (for some $k\\geq 3$), such that:\n - $N_1 = \\{ (x_1,y_1,z_1), (x_2,y_2,z_2)\\}, \\; N_2 = \\{ (x_2,y_2,z_2), (x_3,y_3,z_3)\\}, \\; \\ldots, \\\\ N_ k = \\{ (x_ k,y_ k,z_ k), (x_{k+1},y_{k+1},z_{k+1})\\}, \\; \\mbox{ and } \\; (x_{k+1},y_{k+1},z_{k+1})=(x_1,y_1,z_1)$\nBut her dislike of closed chains is so extreme that the shadow of the sculpture on the floor has to be free of \u201cfloor closed chains\u201d. Given any needle $N=\\{ (x,y,z),(x\u2019,y\u2019,z\u2019)\\} $, let $N^{\\downarrow } = \\{ (x,y),(x\u2019,y\u2019)\\} $ denote the shadow of needle $N$ on the floor. For Ana (who is an artist), a floor closed chain is also a sequence of $k$ distinct needles, $N_1, N_2, \\ldots, N_ k$ (for some $k\\geq 3$), such that:\n - $N^{\\downarrow }_ i \\neq N^{\\downarrow }_ j$, for every $1 \\leq i < j \\leq k \\; $ (the $k$ needle shadows are all distinct);\n - $N^{\\downarrow }_1 = \\{ (x_1,y_1), (x_2,y_2)\\}, \\; N^{\\downarrow }_2 = \\{ (x_2,y_2), (x_3,y_3)\\}, \\; \\ldots, \\\\ N^{\\downarrow }_ k = \\{ (x_ k,y_ k), (x_{k+1},y_{k+1})\\}, \\; \\mbox{ and } \\; (x_{k+1},y_{k+1})=(x_1,y_1)$\nConsider the sculpture depicted in the figure, which has the following four knitting needles:\\[ \\begin{array}{ll} A = \\{ (12,12,8), (10,5,11)\\}, & B = \\{ (12,12,8), (4,14,21)\\}, \\\\ C = \\{ (12,12,8), (12,20,8)\\}, & D = \\{ (4,14,21), (10,5,21)\\}. \\end{array} \\]\nThis structure is not free of closed chains because, although there is no true closed chain, the sequence of needles $A, B, D$ is a floor closed chain.\n-----Task-----\nWrite a program that, given the knitting needles of a sculpture, determines whether there is a true or a floor closed chain in the sculpture.\n-----Input-----\nThe first line of the input has one integer, $K$, which is the number of knitting needles in the sculpture. Each of the following $K$ lines contains six integers, $x_1$, $y_1$, $z_1$, $x_2$, $y_2$, and $z_2$, which indicate that $\\{ (x_1,y_1,z_1), (x_2,y_2,z_2)\\} $ is the set of triples of a needle. Any two distinct needles are represented by different sets of triples.\n-----Constraints-----\n$1$\n$\\leq $\n$K$\n$\\leq $\n$50000$\nNumber of knitting needles\n$1$\n$\\leq $\n$x_ i, y_ i, z_ i$\n$<$\n$1000$\nCoordinates of each triple\n-----Output-----\nThe output has two lines, each one with a string. The string in the first line is: True closed chains, if there is some true closed chain in the sculpture; No true closed chains, otherwise. The string in the second line is: Floor closed chains, if there is some floor closed chain in the sculpture; No floor closed chains, otherwise.\n-----Examples-----\nSample Input 1:\n4\n12 12 8 10 5 11\n12 12 8 4 14 21\n12 12 8 12 20 8\n4 14 21 10 5 21\nSample Output 1:\nNo true closed chains\nFloor closed chains\nSample Input 2:\n4\n1 1 1 2 2 2\n2 2 2 1 5 5\n9 4 4 9 4 2\n9 4 4 9 9 4\nSample Output 2:\nNo true closed chains\nNo floor closed chains\nSample Input 3:\n3\n50 50 50 100 100 100\n100 100 100 50 50 90\n50 50 90 50 50 50\nSample Output 3:\nTrue closed chains\nNo floor closed chains\n\ndef",
      "answer": "def main():\n    n = int(input())\n    for i in range(n):\n        x1, y1, z1, x2, y2, z2 = map(int, input().split())\n        if x1 == x2 and y1 == y2 and z1 == z2:\n            print(\"True closed chains\")\n        elif x1 == x2 and y1 == y2 and z1!= z2:\n            print(\"Floor closed chains\")\n        else:\n            print(\"No true closed chains\")\n\n",
      "difficulty": "interview",
      "split": "test"
   },
   {
      "task_id": 2720,
      "prompt": "Complete the Python function given the prompt below:\nGiven an orthogonal maze rotated $45$ degrees and drawn with forward and backward slash characters (see below), determine the minimum number of walls that need to be removed to ensure it is possible to escape outside of the maze from every region of the (possibly disconnected) maze.\n/\\\n\\/\nThis maze has only a single region fully enclosed. Removing any wall connects it to the outside.\n/\\..\n\\.\\.\n.\\/\\\n..\\/\nThis maze has two enclosed areas. Two walls need to be removed to connect all regions to the outside.\n-----Input-----\nThe first line has two numbers, $R$ and $C$, giving the number of rows and columns in the maze\u2019s input description. Following this are $R$ lines each with $C$ characters, consisting only of the characters \u2018/\u2019, \u2018\\\u2019, and \u2018.\u2019. Both $R$ and $C$ are in the range $1\\ldots 1000$.\nDefine an odd (even) square as one where the sum of the $x$ and $y$ coordinates is odd (even). Either all forward slashes are in the odd squares and all backslashes in the even squares, or vice versa.\n-----Output-----\nOutput on a single line an integer indicating how many walls need to be removed so escape is possible from every region in the maze.\n-----Examples-----\nSample Input 1:\n2 2\n/\\\n\\/\nSample Output 1:\n1\nSample Input 2:\n4 4\n/\\..\n\\.\\.\n.\\/\\\n..\\/\nSample Output 2:\n2\nSample Input 3:\n2 2\n\\/\n/\\\nSample Output 3:\n0\n\ndef",
      "answer": "def maze(maze):\n    # your code goes here\n    # print(maze)\n    # print(maze[0])\n    # print(maze[1])\n    # print(maze[2])\n    # print(maze[3])\n    # print(maze[4])\n    # print(maze[5])\n    # print(maze[6])\n    # print(maze[7])\n    # print(maze[8])\n    # print(maze[9])\n    # print(maze[10])\n    # print(maze[11])\n    # print(maze[12])\n    # print(maze[13])\n    # print(maze[14])\n    # print(maze[15])\n    # print(maze[16])\n    # print(maze[17])\n    # print(maze[18])\n    # print(maze[19])\n    # print(maze[20])\n    # print(maze[21])\n    # print(maze[22])\n    # print(maze[23])\n    # print(maze[24])\n    # print(maze[25])\n    # print(maze[26])\n    # print(maze[27])\n    # print(maze[28])\n    # print(maze[29])\n    # print(maze[30])\n    # print(maze[31])\n    # print(maze[32])\n    # print(maze[33])\n    # print(maze[34])\n    # print(maze[35])\n    # print(maze[36])\n    # print(maze[37])\n    # print(maze[38])\n    # print(maze[39])\n    # print(maze[40])\n    # print(maze[41])\n    # print(maze[42])\n    # print(maze[43])\n    # print(maze[44])\n    # print(maze[45])\n    # print(maze[46])\n    # print(maze[47])\n    # print(maze[48])\n    # print(maze[49])\n    # print(maze[50])\n    # print(maze[51])\n    # print(maze[52])\n    # print(maze[53])\n    # print(maze[54])\n    # print(maze[55])\n    # print(maze[56])\n    # print(maze[57])\n    # print(maze[58])\n    # print(maze[59])\n    # print(maze[60])\n    # print(maze[61])\n    # print(maze[62])\n    # print(maze[63])\n    # print(maze[64])\n    # print(maze[65])\n    # print(maze[66])\n    # print(maze[67])\n    # print(maze[68])\n    # print(maze[69])\n    # print(maze[70])\n    # print(maze[71])\n    # print(maze[72])\n    # print(maze[73])\n    # print(maze[74])\n    # print(maze[75])\n    # print(maze[76])\n    # print(maze[77])\n    # print(maze[78])\n    # print(maze[79])\n    # print(maze[80])\n    # print(maze[81])\n    # print(maze[82])\n    # print(maze[83])\n    # print(maze[84])\n    # print(maze[85])\n    # print(maze[86])\n    # print(maze[87])\n    # print(maze[88])\n    # print(maze[89])\n    # print(maze[90])\n    # print(maze[91])\n    # print(maze[92])\n    # print(maze[93])\n    # print(maze[94])\n    # print(maze[95])\n    # print(maze[96])\n    # print(maze[97])\n    # print(maze[98])\n    # print(maze[99])\n    # print",
      "difficulty": "interview",
      "split": "test"
   },
   {
      "task_id": 2721,
      "prompt": "Complete the Python function given the prompt below:\nFarmer Laura has a barn. In her barn, she has two cows, Monica and Lydia. Monica and Lydia love food, and they are quite lazy. For most of the day they chill out in the barn, waiting for Laura to come serve them a nice meal. Farmer Laura is always very precise about when to serve them food, so Monica and Lydia know exactly when to expect food, the same time every day.\nThis might sound surprising to you but there\u2019s a problem. Farmer Laura needs your help. She will be replacing some planks in the floor of the barn, which means that the cows have to be moved temporarily from their favorite spots. Since the cows are infinitely lazy, they refuse to walk themselves. Farmer Laura has rented an excellent tool to resolve this issue \u2013 a cow crane, designed and crafted specifically for the cow\u2019s comfort.\nWe visualize the barn as a one-dimensional line. The cow crane starts at time $t = 0$ at position $x = 0$, and it can move one distance unit per second. The crane can only carry one cow at a time, but it may pick up and drop off a cow as many times as necessary. Monica\u2019s current location is at $x = m$, and Lydia is located at $x = l$. Monica will be moved to the temporary location at $x = M$ and Lydia to $x = L$. Monica and Lydia always have their daily meal $t_ m$ and $t_ l$ seconds into the day, so the cows had better be in their respective temporary locations exactly by these times. You may assume that it takes no time for the crane to pick up or drop off a cow and that the two cows can be at the same position at the same time.\n-----Task-----\nFarmer Laura would like to know if she can move the cows so that both of them are in place at their temporary location no later than their daily meal occurs.\n-----Input-----\nInput consists of three lines. The first line consists of two integers $m$ and $l$, the current positions of the cows. The second line consists of two integers $M$ and $L$, the new positions of the cows. The third line consists of two integers $t_ m$ and $t_ l$, the time at which the two cows will be served their daily meal. It is guaranteed that $-10^8 \\leq m, l, M, L \\leq 10^8$ and $1 \\leq t_ m, t_ l \\leq 10^8$. It is also guaranteed that both cows will actually move, i.e., $m \\not= M$ and $l \\not= L$.\n-----Output-----\nOutput should consist of a single word. Print \u201cpossible\u201d if it is possible to move both cows before they are served their daily meal. Otherwise, print \u201cimpossible\u201d.\n-----Examples-----\nSample Input 1:\n-1 1\n-2 2\n6 6\nSample Output 1:\npossible\nSample Input 2:\n-1 1\n-2 2\n5 5\nSample Output 2:\nimpossible\nSample Input 3:\n-1 1\n1 -1\n3 5\nSample Output 3:\npossible\n\ndef",
      "answer": "def move_cow(m, l, M, L, t_m, t_l):\n    if m == M and l == L:\n        return \"possible\"\n    elif m == M and l!= L:\n        return \"impossible\"\n    elif m!= M and l == L:\n        return \"impossible\"\n    elif m!= M and l!= L:\n        return \"possible\"\n\n",
      "difficulty": "interview",
      "split": "test"
   },
   {
      "task_id": 2722,
      "prompt": "Complete the Python function given the prompt below:\nRobot Turtles is one of Theta\u2019s favorite games. In this game, kindergarteners learn how to \u201ccode\u201d by creating programs that move a turtle from a starting field to a diamond. Robot Turtles is reportedly the most successful game funded by the Kickstarter incubator.\nPlayers must develop a program consisting of \u201cinstructions\u201d that brings a turtle from a starting location to a goal (a diamond). An adult will then \u201cexecute\u201d this program by moving the turtle based on the given instructions.\nRobot Turtles is played on an $8 \\times 8$ board. There is one turtle (marked with the letter T), which always starts out at the bottom-left field, facing right. The board contains empty squares (marked as.), castles made out of rock (C), and castles made out of ice (I). The diamond is marked with a D. The turtle may move only onto empty squares and the square on which the diamond is located.\nA turtle program contains $4$ kinds of instructions, marked by a single letter.\n - F The turtle moves one field forward in the direction it is facing. If the turtle faces a castle or the border of the board, a program error occurs.\n - R The turtle turns $90$ degrees to the right (the turtle will just turn and stay on the same field).\n - L The turtle turns $90$ degrees to the left (the turtle will just turn and stay on the same field).\n - X The turtle fires a laser in the direction it is facing. If the square it is facing contains an ice castle, the ice castle will melt and the square will turn into an empty square. Otherwise, a program error occurs. The turtle will not move or change direction. It is a program error to fire the laser at empty squares, rock castles or outside the board.\n-----Input-----\nThe input consists of $8$ lines, which represents the board, with each line representing one row. The turtle will always start out at the bottom-left. There will be exactly $1$ diamond. There will be no more than $10$ ice castles.\n-----Output-----\nOutput the shortest valid turtle program whose execution (without program error) brings the turtle from the starting location to the diamond! If there are multiple such programs of equal length, you may output any of them!\nOutput no solution if it is not possible for the turtle to reach the diamond!\n-----Examples-----\nSample Input 1:\n........\n........\n........\n...CC...\n..C.DC..\n.C..C...\nC.IC....\nT.C.....\nSample Output 1:\nFLFRXFLFRFLFRF\nSample Input 2:\n........\n........\n........\n...CC...\n..CIDC..\n.CI.C...\nC.IC....\nT.C.....\nSample Output 2:\nFLFRXFLXFRFLXFRF\nSample Input 3:\n........\n........\n........\n...CCD..\n..C..C..\n.C..I...\nC.IC....\nT.C.....\nSample Output 3:\nFLFRXFLFRFXFFFLFFLF\n\ndef",
      "answer": "def robot_turtles(board):\n    # Your code here\n    return\n\n",
      "difficulty": "interview",
      "split": "test"
   }
]