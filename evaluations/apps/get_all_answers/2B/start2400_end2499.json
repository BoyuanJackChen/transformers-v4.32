[
   {
      "task_id": 2400,
      "prompt": "Complete the Python function given the prompt below:\nDLS and JLS are bored with a Math lesson. In order to entertain themselves, DLS took a sheet of paper and drew $n$ distinct lines, given by equations $y = x + p_i$ for some distinct $p_1, p_2, \\ldots, p_n$.\nThen JLS drew on the same paper sheet $m$ distinct lines given by equations $y = -x + q_i$ for some distinct $q_1, q_2, \\ldots, q_m$.\nDLS and JLS are interested in counting how many line pairs have integer intersection points, i.e. points with both coordinates that are integers. Unfortunately, the lesson will end up soon, so DLS and JLS are asking for your help.\n-----Input-----\nThe first line contains one integer $t$ ($1 \\le t \\le 1000$), the number of test cases in the input. Then follow the test case descriptions.\nThe first line of a test case contains an integer $n$ ($1 \\le n \\le 10^5$), the number of lines drawn by DLS.\nThe second line of a test case contains $n$ distinct integers $p_i$ ($0 \\le p_i \\le 10^9$) describing the lines drawn by DLS. The integer $p_i$ describes a line given by the equation $y = x + p_i$.\nThe third line of a test case contains an integer $m$ ($1 \\le m \\le 10^5$), the number of lines drawn by JLS.\nThe fourth line of a test case contains $m$ distinct integers $q_i$ ($0 \\le q_i \\le 10^9$) describing the lines drawn by JLS. The integer $q_i$ describes a line given by the equation $y = -x + q_i$.\nThe sum of the values of $n$ over all test cases in the input does not exceed $10^5$. Similarly, the sum of the values of $m$ over all test cases in the input does not exceed $10^5$.\nIn hacks it is allowed to use only one test case in the input, so $t=1$ should be satisfied.\n-----Output-----\nFor each test case in the input print a single integer\u00a0\u2014 the number of line pairs with integer intersection points. \n-----Example-----\nInput\n3\n3\n1 3 2\n2\n0 3\n1\n1\n1\n1\n1\n2\n1\n1\nOutput\n3\n1\n0\n-----Note-----\nThe picture shows the lines from the first test case of the example. Black circles denote intersection points with integer coordinates. [Image]\n\ndef",
      "answer": "def intersection_points(n, p, m, q):\n    # Write your code here\n    count = 0\n    for i in range(n):\n        for j in range(m):\n            if (p[i] + q[j]) % 2 == 0:\n                count += 1\n    return count\n\n",
      "difficulty": "interview",
      "split": "test"
   },
   {
      "task_id": 2401,
      "prompt": "Complete the Python function given the prompt below:\nHeidi got one brain, thumbs up! But the evening isn't over yet and one more challenge awaits our dauntless agent: after dinner, at precisely midnight, the N attendees love to play a very risky game...\nEvery zombie gets a number n_{i} (1 \u2264 n_{i} \u2264 N) written on his forehead. Although no zombie can see his own number, he can see the numbers written on the foreheads of all N - 1 fellows. Note that not all numbers have to be unique (they can even all be the same). From this point on, no more communication between zombies is allowed. Observation is the only key to success. When the cuckoo clock strikes midnight, all attendees have to simultaneously guess the number on their own forehead. If at least one of them guesses his number correctly, all zombies survive and go home happily. On the other hand, if not a single attendee manages to guess his number correctly, all of them are doomed to die!\nZombies aren't very bright creatures though, and Heidi has to act fast if she does not want to jeopardize her life. She has one single option: by performing some quick surgery on the brain she managed to get from the chest, she has the ability to remotely reprogram the decision-making strategy of all attendees for their upcoming midnight game! Can you suggest a sound strategy to Heidi which, given the rules of the game, ensures that at least one attendee will guess his own number correctly, for any possible sequence of numbers on the foreheads?\nGiven a zombie's rank R and the N - 1 numbers n_{i} on the other attendees' foreheads, your program will have to return the number that the zombie of rank R shall guess. Those answers define your strategy, and we will check if it is flawless or not.\n-----Input-----\nThe first line of input contains a single integer T (1 \u2264 T \u2264 50000): the number of scenarios for which you have to make a guess.\nThe T scenarios follow, described on two lines each:   The first line holds two integers, N (2 \u2264 N \u2264 6), the number of attendees, and R (1 \u2264 R \u2264 N), the rank of the zombie who has to make the guess.  The second line lists N - 1 integers: the numbers on the foreheads of all other attendees, listed in increasing order of the attendees' rank. (Every zombie knows the rank of every other zombie.) \n-----Output-----\nFor every scenario, output a single integer: the number that the zombie of rank R shall guess, based on the numbers n_{i} on his N - 1 fellows' foreheads.\n-----Examples-----\nInput\n4\n2 1\n1\n2 2\n1\n2 1\n2\n2 2\n2\nOutput\n1\n2\n2\n1\nInput\n2\n5 2\n2 2 2 2\n6 4\n3 2 6 1 2\nOutput\n5\n2\n-----Note-----\nFor instance, if there were N = 2 two attendees, a successful strategy could be:   The zombie of rank 1 always guesses the number he sees on the forehead of the zombie of rank 2.  The zombie of rank 2 always guesses the opposite of the number he sees on the forehead of the zombie of rank 1.\n\ndef",
      "answer": "def zombie_game(n, r):\n    return n[r-1]\n\n",
      "difficulty": "interview",
      "split": "test"
   }
]