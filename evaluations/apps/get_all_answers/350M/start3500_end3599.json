[
   {
      "task_id": 3500,
      "prompt": "Complete the Python function given the prompt below:\nBingo is a game of chance played by a group of players. Each player has his or her own bingo card with a $5$-by-$5$ grid of numbers. Each number appears at most once per card. The bingo caller calls out a sequence of randomly drawn numbers, and the players mark the numbers that appear on their card as they are called out. The winner is the player that completes a line of five marked numbers (horizontally, vertically or diagonally) on his or her card. The winning player then yells \u201cbingo\u201d and the game ends.\nYou have been volunteering with a local youth group and have been running bingo games for the children. They love bingo, but every time two or more kids yell \u201cbingo\u201d at the same time, a spirited \u201cdisagreement\u201d breaks out. You\u2019ve created a slightly modified version of bingo (in the hopes of introducing fewer ties): the cards are $5$-by-$5$ grids with a number from $1$ to $3000$ in each of the $25$ cells, and a winner is only declared when a player has $5$ numbers in a row. Note that in this new game, players cannot win via columns or diagonals.\nAlas, these changes did not eliminate ties or the subsequent disagreements. To prevent further disagreements, you\u2019ve decided to analyze the sets of cards to determine if there is any possibility that a tie (where two kids can yell bingo at the same time) can occur. Write a program that takes a collection of bingo cards and determines if there is any possible sequence of numbers that could be called so that the game ends, and a tie between two or more players occurs, when the last number in the sequence is called.\nFor example, consider the following two bingo cards:\n$ \\begin{array}{ccccc} 3 & 29 & 45 & 56 & 68 \\\\ 1 & 19 & 43 & 50 & 72 \\\\ 11 & 25 & 40 & 49 & 61 \\\\ 9 & 23 & 31 & 58 & 63 \\\\ 4 & 27 & 42 & 54 & 71 \\end{array} $\n\u00a0\n$ \\begin{array}{ccccc} 14 & 23 & 39 & 59 & 63 \\\\ 8 & 17 & 35 & 55 & 61 \\\\ 15 & 26 & 42 & 53 & 71 \\\\ 10 & 25 & 31 & 57 & 64 \\\\ 6 & 20 & 44 & 52 & 68 \\\\ \\end{array} $\nThen this set of two cards could result in a tie if the sequence of numbers called was\\[ 40~ 61~ 64~ 10~ 57~ 49~ 11~ 31~ 25 \\]\nThis sequence would result in the card on the left completing the third row and the card on the right completing the fourth row when the number $25$ is called.\n-----Input-----\nThe first line of the input is an integer $n$ ($2 \\leq n \\leq 100$), the number of bingo cards. After the first line are the $n$ bingo cards, each separated from the next by a blank line of input.\nEach bingo card consists of five lines of input. Each line consists of five integers in the range from $1$ to $3000$. The numbers on each bingo card are unique.\n-----Output-----\nIf no ties are possible between any two cards, output \u201cno ties\u201d. Otherwise, output the two numbers $a$ and $b$ ($1 \\le a < b \\le n$) identifying the two cards for which a tie could occur, where the cards are numbered from $1$ to $n$ in the order that they appear in the input. If multiple pairs of cards can tie, output the pair with the smallest $a$, breaking any remaining ties with the smallest $b$.\n-----Examples-----\nSample Input:\n2\n3 29 45 56 68\n1 19 43 50 72\n11 25 40 49 61\n9 23 31 58 63\n4 27 42 54 71\n14 23 39 59 63\n8 17 35 55 61\n15 26 42 53 71\n10 25 31 57 64\n6 20 44 52 68\nSample Output:\n1 2\n\ndef",
      "answer": "def bingo(n):\n    if n == 1:\n        return \"bingo\"\n    elif n == 2:\n        return \"bingo\"\n    elif n == 3:\n        return \"bingo\"\n    elif n == 4:\n        return \"bingo\"\n    elif n == 5:\n        return \"bingo\"\n    elif n == 6:\n        return \"bingo\"\n    elif n == 7:\n        return \"bingo\"\n    elif n == 8:\n        return \"bingo\"\n    elif n == 9:\n        return \"bingo\"\n    elif n == 10:\n        return \"bingo\"\n    elif n == 11:\n        return \"bingo\"\n    elif n == 12:\n        return \"bingo\"\n    elif n == 13:\n        return \"bingo\"\n    elif n == 14:\n        return \"bingo\"\n    elif n == 15:\n        return \"bingo\"\n    elif n == 16:\n        return \"bingo\"\n    elif n == 17:\n        return \"bingo\"\n    elif n == 18:\n        return \"bingo\"\n    elif n == 19:\n        return \"bingo\"\n    elif n == 20:\n        return \"bingo\"\n    elif n == 21:\n        return \"bingo\"\n    elif n == 22:\n        return \"bingo\"\n    elif n == 23:\n        return \"bingo\"\n    elif n == 24:\n        return \"bingo\"\n    elif n == 25:\n        return \"bingo\"\n    elif n == 26:\n        return \"bingo\"\n    elif n == 27:\n        return \"bingo\"\n    elif n == 28:\n        return \"bingo\"\n    elif n == 29:\n        return \"bingo\"\n    elif n == 30:\n        return \"bingo\"\n    elif n == 31:\n        return \"bingo\"\n    elif n == 32:\n        return \"bingo\"\n    elif n == 33:\n        return \"bingo\"\n    elif n == 34:\n        return \"bingo\"\n    elif n == 35:\n        return \"bingo\"\n    elif n == 36:\n        return \"bingo\"\n    elif n == 37:\n        return \"bingo\"\n    elif n == 38:\n        return \"bingo\"\n    elif n == 39:\n        return \"bingo\"\n    elif n == 40:\n        return \"bingo\"\n    elif n == 41:\n        return \"bingo\"\n    elif n == 42:\n        return \"bingo\"\n    elif n == 43:\n        return \"bingo\"\n    elif n == 44:\n        return \"bingo\"\n    elif n == 45:\n        return \"bingo\"\n    elif n == 46:\n        return \"bingo\"\n    elif n == 47:\n        return \"bingo\"\n    elif n == 48:\n        return \"bingo\"\n    elif n == 49:\n        return \"bingo\"\n    elif n == 50:\n        return \"bingo\"\n    elif n == 51:\n        return \"bingo\"\n    elif n == 52:\n        return \"bingo\"\n    elif n == 53:\n        return \"bingo\"\n    elif n == 54:\n        return \"bingo\"\n    elif n == 55:\n        return \"bingo\"\n    elif n == 56:\n        return \"bingo\"\n    elif n == 57:\n        return \"bingo\"\n    elif n == 58:\n        return \"bingo\"\n    elif n == 59:\n        return \"bingo\"\n    elif n == 60:\n        return \"bingo\"\n    elif n == 61:\n        return \"bingo\"\n    elif n == 62:\n        return \"bingo\"\n    elif n == 63:\n        return \"bingo\"\n    elif n == 64:\n        return \"bingo\"\n    elif n == 65:\n        return \"bingo\"\n    elif n == 66:\n        return \"bingo\"\n    elif n == 67:\n        return \"bingo\"\n    elif n == 68:\n        return \"bingo\"",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3501,
      "prompt": "Complete the Python function given the prompt below:\nJaap, Jan, and Thijs are on a trip to the desert after having attended the ACM ICPC World Finals 2015 in Morocco. The trip included a camel ride, and after returning from the ride, their guide invited them to a big camel race in the evening. The camels they rode will also participate and it is customary to bet on the results of the race. \nOne of the most interesting bets involves guessing the complete order in which the camels will finish the race. This bet offers the biggest return on your money, since it is also the one that is the hardest to get right.\nJaap, Jan, and Thijs have already placed their bets, but the race will not start until an hour from now, so they are getting bored. They started wondering how many pairs of camels they have put in the same order. If camel\u00a0$c$ is before camel\u00a0$d$ on Jaap\u2019s, Jan\u2019s and Thijs\u2019 bet, it means that all three of them put $c$ and $d$ in the same order. Can you help them to calculate the number of pairs of camels for which this happened?\n-----Input-----\nThe input consists of:\n - one line with an integer $n$ ($2\\leq n \\leq 200000$), the number of camels;\n - one line with $n$ integers $a_1, \\ldots, a_ n$ ($1 \\le a_ i \\le n$ for all $i$), Jaap\u2019s bet. Here $a_1$ is the camel in the first position of Jaap\u2019s bet, $a_2$ is the camel in the second position, and so on;\n - one line with Jan\u2019s bet, in the same format as Jaap\u2019s bet;\n - one line with Thijs\u2019 bet, in the same format as Jaap\u2019s bet.\nThe camels are numbered $1, \\dots, n$. Each camel appears exactly once in each bet.\n-----Output-----\nOutput the number of pairs of camels that appear in the same order in all $3$\u00a0bets.\n-----Examples-----\nSample Input:\n3\n3 2 1\n1 2 3\n1 2 3\nSample Output:\n0\n\ndef",
      "answer": "def camels(n):\n    if n == 1:\n        return 1\n    else:\n        return n * camels(n - 1)\n\n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3502,
      "prompt": "Complete the Python function given the prompt below:\nCars! Where do they come from? Where do they go? Nobody knows. They appear where roads have been built, as if out of nowhere. Some say that no two cars are alike. Some say that if you look closely, you can see the pale ghosts of miserable humans inside them, trapped forever\u2014particularly in the morning and late afternoon. What scientific eye could frame their fearful symmetry?\nWell, yours, hopefully. As part of your government\u2019s Urban Traffic Control department, you are trying to write a paper on local traffic congestion. It is too dangerous to observe cars in the wild, of course, but you have been given some data on the traffic lights along your town\u2019s Main Street, and you would like to do some theoretical calculations about how well-synchronized they are.\nMain Street is set out on a line, with traffic lights placed at various points along it. Each traffic light cycles between red and green with a fixed period, being red for $r$ seconds, then green for $g$ seconds, then red for $r$ seconds, and so on. The values of $r$ and $g$ may be different for different traffic lights. At time $0$, all the lights have just turned red.\nAssume that an \u201cideal\u201d car mystically appears at the west end of Main Street at a uniformly random real-valued time in the interval $[0, 2019!]$ (where $k!$ is the product of the first $k$ positive integers), driving eastwards at a slow crawl of $1$ meter/second until it hits a red light. What is the probability that it will make it through all the lights without being forced to stop? If it does hit a red light, which one is it likely to hit first?\nWrite a program to answer these questions.\n-----Input-----\nThe first line of input contains an integer $n$ ($1 \\le n \\le 500$), the number of traffic lights. Each of the following $n$ lines contains three integers $x$, $r$, and $g$ describing a traffic light, where $x$ ($1 \\le x \\le 10^5$) is the position of the light along Main Street in meters, and $r$ and $g$ ($0 \\le r, g$ and $1 \\le r+g \\le 100$) are the durations in seconds of the red and green portions of the light\u2019s period (so the light is red from time $0$ to $r$, from time $r+g$ to $2r+g$, and so on).\nThe west end of Main Street is at position $0$, and the lights are listed in order of strictly increasing position.\n-----Output-----\nFor each of the $n$ lights, output a line containing the probability that this light will be the first red light an \u201cideal\u201d car hits. Then output a line containing the probability that an \u201cideal\u201d car makes it all the way without stopping. Your answers should have an absolute error of at most $10^{-6}$.\n-----Examples-----\nSample Input:\n4\n1 2 3\n6 2 3\n10 2 3\n16 3 4\nSample Output:\n0.4\n0\n0.2\n0.171428571429\n0.228571428571\n\ndef",
      "answer": "def solution(n, roads, k):\n    answer = 0\n    for i in range(n):\n        answer += roads[i][0] * roads[i][1] * roads[i][2] * roads[i][3]\n    answer = answer / (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k * (k",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3503,
      "prompt": "Complete the Python function given the prompt below:\nEllen is teaching elementary math to her students and the time for the final exam has come. The exam consists of $n$ questions. In each question the students have to add ($+$), subtract ($-$) or multiply ($*$) a pair of numbers. \nEllen has already chosen the $n$ pairs of numbers. All that remains is to decide for each pair which of the three possible operations the students should perform. To avoid students getting bored, Ellen wants to make sure that the $n$ correct answers to her exam are all different.\nPlease help Ellen finish constructing the exam by automating this task.\n-----Input-----\nThe input consists of:\n - one line with one integer $n$ ($1\\leq n \\leq 2500$), the number of pairs of numbers;\n - $n$ lines each with two integers $a$ and $b$ ($-10^6 \\leq a, b \\leq 10^6$), a pair of numbers used.\n-----Output-----\nFor each pair of numbers $(a,b)$ in the same order as in the input, output a line containing a valid equation. Each equation should consist of five parts: $a$, one of the three operators, $b$, an equals sign ($=$), and the result of the expression. All the $n$ expression results must be different.\nIf there are multiple valid answers you may output any of them. If there is no valid answer, output a single line with the string \u201cimpossible\u201d instead.\n-----Examples-----\nSample Input:\n4\n1 5\n3 3\n4 5\n-1 -6\nSample Output:\n1 + 5 = 6\n3 * 3 = 9\n4 - 5 = -1\n-1 - -6 = 5\n\ndef",
      "answer": "def add(a,b):\n    return a + b\n\n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3504,
      "prompt": "Complete the Python function given the prompt below:\nYou\u2019ve heard of acid rain but have you heard of antimatter rain? Antimatter rain is so potent that when it comes into contact with another object, it immediately disintegrates both itself and the object. Kayla\u2019s job as a SpaceFleet Researcher is gathering weather data on exotic planets. This time, their assignment is to monitor the antimatter rainfall.\nSensors are set up in the planet\u2019s atmosphere and are about to be rained on with antimatter rain. Oh no! Kayla monitors a single 2D section. Each sensor is either a single horizontal strip or a single point. When one or more antimatter droplet fall on a single sensor, all of those droplets and the sensor disintegrate simultaneously. That is, they disappear. All other droplets will drop past where the sensor used to be.\nKayla sees all the antimatter rain drops the moment before they all start to fall. All droplets fall at exactly the same rate.\nFor each droplet, Kayla wants to know if and where it will disintegrate. Help them out with this demanding task!\nIllustration of the first sample. The vertical lines connect the drops to the sensor they hit. The drop with no associated vertical line will not hit any sensor.\n-----Input-----\nThe first line of input contains two integers $D$ ($1 \\leq D \\leq 100000$), which is the number of antimatter droplets, and $S$ ($1 \\leq S \\leq 100000$), which is the number of sensors.\nThe next $D$ lines describe the droplets, in order. Each of these lines contains two integers $x$ ($1 \\leq x \\leq 10^9$), which is the $x$-coordinate of the droplet and $y$ ($1 \\leq y \\leq 10^9$), which is the $y$-coordinate of the droplet.\nThe next $S$ lines describe the sensors. Each line contains three integers $x_1$, $x_2$ ($1 \\leq x_1 \\leq x_2 \\leq 10^9$), which is the leftmost and the rightmost $x$-coordinate of the sensor, and $y$ ($1 \\leq y \\leq 10^9$), which is the $y$-coordinate of the sensor.\nIt is guaranteed that no two drops will start in the same location, no drop will start on any sensor, and no two sensors touch (not even at a single point).\n-----Output-----\nFor each droplet, in order, display a single number indicating the $y$-coordinate that it will disintegrate. If the droplet does not disintegrate, display $0$ instead. These values should appear on separate lines.\n-----Examples-----\nSample Input:\n5 3\n1 8\n2 3\n2 8\n5 8\n5 9\n3 6 6\n1 7 4\n1 3 1\nSample Output:\n4\n1\n4\n6\n0\n\ndef",
      "answer": "def rain_drops(D, S):\n    if D == 1:\n        return 0\n    elif D == 2:\n        return 1\n    elif D == 3:\n        return 2\n    elif D == 4:\n        return 3\n    elif D == 5:\n        return 4\n    elif D == 6:\n        return 5\n    elif D == 7:\n        return 6\n    elif D == 8:\n        return 7\n    elif D == 9:\n        return 8\n    elif D == 10:\n        return 9\n    elif D == 11:\n        return 10\n    elif D == 12:\n        return 11\n    elif D == 13:\n        return 12\n    elif D == 14:\n        return 13\n    elif D == 15:\n        return 14\n    elif D == 16:\n        return 15\n    elif D == 17:\n        return 16\n    elif D == 18:\n        return 17\n    elif D == 19:\n        return 18\n    elif D == 20:\n        return 19\n    elif D == 21:\n        return 20\n    elif D == 22:\n        return 21\n    elif D == 23:\n        return 22\n    elif D == 24:\n        return 23\n    elif D == 25:\n        return 24\n    elif D == 26:\n        return 25\n    elif D == 27:\n        return 26\n    elif D == 28:\n        return 27\n    elif D == 29:\n        return 28\n    elif D == 30:\n        return 29\n    elif D == 31:\n        return 30\n    elif D == 32:\n        return 31\n    elif D == 33:\n        return 32\n    elif D == 34:\n        return 33\n    elif D == 35:\n        return 34\n    elif D == 36:\n        return 35\n    elif D == 37:\n        return 36\n    elif D == 38:\n        return 37\n    elif D == 39:\n        return 38\n    elif D == 40:\n        return 39\n    elif D == 41:\n        return 40\n    elif D == 42:\n        return 41\n    elif D == 43:\n        return 42\n    elif D == 44:\n        return 43\n    elif D == 45:\n        return 44\n    elif D == 46:\n        return 45\n    elif D == 47:\n        return 46\n    elif D == 48:\n        return 47\n    elif D == 49:\n        return 48\n    elif D == 50:\n        return 49\n    elif D == 51:\n        return 50\n    elif D == 52:\n        return 51\n    elif D == 53:\n        return 52\n    elif D == 54:\n        return 53\n    elif D == 55:\n        return 54\n    elif D == 56:\n        return 55\n    elif D == 57:\n        return 56\n    elif D == 58:\n        return 57\n    elif D == 59:\n        return 58\n    elif D == 60:\n        return 59\n    elif D == 61:\n        return 60\n    elif D == 62:\n        return 61\n    elif D == 63:\n        return 62\n    elif D == 64:\n        return 63\n    elif D == 65:\n        return 64\n    elif D == 66:\n        return 65\n    elif D == 67:\n        return 66\n    elif D == 68:\n        return 67\n    elif D == 69:\n        return 68\n    elif D == 70:\n        return 69\n    elif D == 71:\n        return 70\n    elif D == 72:\n        return 71\n    elif D == 73:\n        return 72\n    elif D == 74:\n        return 73\n    elif D == 75:\n        return 74\n    elif D == 76:\n        return 75\n    elif D == 77:\n        return 76\n    elif D == 78:\n        return 77\n    elif D == 79:\n        return 78\n    elif D == 80:\n        return 79\n    elif D == 81:\n        return 80\n    elif D == 82:\n        return 81\n    elif D == 83:\n        return 82\n    elif D == 84:\n        return 83\n    elif D == 85:\n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3505,
      "prompt": "Complete the Python function given the prompt below:\nGiven $N$ integers in the range $[-50000, 50000]$, how many ways are there to pick three integers $a_ i$, $a_ j$, $a_ k$, such that $i$, $j$, $k$ are pairwise distinct and $a_ i + a_ j = a_ k$? Two ways are different if their ordered triples $(i, j, k)$ of indices are different.\n-----Input-----\nThe first line of input consists of a single integer $N$ ($1 \\leq N \\leq 200000$). The next line consists of $N$ space-separated integers $a_1, a_2, \\dots, a_ N$.\n-----Output-----\nOutput an integer representing the number of ways.\n-----Examples-----\nSample Input:\n4\n1 2 3 4\nSample Output:\n4\n\ndef",
      "answer": "def three_ways(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        return three_ways(n-1) + three_ways(n-2) + three_ways(n-3)\n\n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3506,
      "prompt": "Complete the Python function given the prompt below:\nOne of the perhaps most important factors in deciding the winning team of a football match is the amount of cheers the teams get from their supporters. The Sportify football team is about to meet their worst opponent, Spoilify. As the manager of Sportify\u2019s cheerleading squad, you have to decide on a cheerleading tactic which will ensure you the win.\nAt your disposal you have $n$ cheerleaders. Each cheerleader has energy to cheer for a total of $t$ minutes of the 90 minute long game (the cheerleaders do not recover energy during the short half-time intermission). For each cheerleader you have to decide when in the game they should cheer. The cheerleading schedule for a match is divided into one minute intervals, and during each interval each cheerleader either cheers or does not cheer during the entire interval.\nIf a team gets more cheers than the other team for 5 consecutive minutes of the game, that team will score a goal. The 5 minute count is then reset, so if a team gets more cheers than the other team for, say, 17 consecutive minutes, that team will score three goals. The 5 minute interval can not run over the half time intermission, e.g., getting more cheers than the other team from the 43\u2019rd minute to the 49\u2019th minute is not sufficient to score a goal.\nAs an additional ace up your sleeve, you have spied on the Spoilify cheerleading team and know what their strategy for the game is. Based on this information, what is the best result that can be obtained?\n-----Input-----\nThe first line of input consists of three integers $0 \\le n \\le 20$, $1 \\le t \\le 90$, and $0 \\le m \\le 1000$. The meanings of $n$ and $t$ are described above, and $m$ gives the number of time intervals that the Spoilify cheearleading team is active. Next follow $m$ lines, each consisting of two integers $a$ and $b$, $0 \\le a < b \\le 90$, indicating that a cheerleader from Spoilify is cheering from time $a$ to time $b$ of the match. These intervals may overlap or even be equal, meaning that several cheerleaders are active simultaneously.\n-----Output-----\nOutput two integers $A$ and $B$ where $A$ is the number of goals scored by the Sportify team and $B$ is the number of goals scored by the Spoilify team, assuming you use an optimal cheerleading tactic. If there are many possible results, you should first attempt to maximize the score difference $A-B$, and if there are still many possible results, maximize your score $A$.\n-----Examples-----\nSample Input:\n1 31 2\n20 60\n50 90\nSample Output:\n4 3\n\ndef",
      "answer": "def cheerleading(n, t, m):\n    if n == 0:\n        return 0\n    if t == 0:\n        return 0\n    if m == 0:\n        return 0\n    if n < m:\n        return 0\n    if n < m:\n        return 0\n    if n < m:\n        return 0\n    if n < m:\n        return 0\n    if n < m:\n        return 0\n    if n < m:\n        return 0\n    if n < m:\n        return 0\n    if n < m:\n        return 0\n    if n < m:\n        return 0\n    if n < m:\n        return 0\n    if n < m:\n        return 0\n    if n < m:\n        return 0\n    if n < m:\n        return 0\n    if n < m:\n        return 0\n    if n < m:\n        return 0\n    if n < m:\n        return 0\n    if n < m:\n        return 0\n    if n < m:\n        return 0\n    if n < m:\n        return 0\n    if n < m:\n        return 0\n    if n < m:\n        return 0\n    if n < m:\n        return 0\n    if n < m:\n        return 0\n    if n < m:\n        return 0\n    if n < m:\n        return 0\n    if n < m:\n        return 0\n    if n < m:\n        return 0\n    if n < m:\n        return 0\n    if n < m:\n        return 0\n    if n < m:\n        return 0\n    if n < m:\n        return 0\n    if n < m:\n        return 0\n    if n < m:\n        return 0\n    if n < m:\n        return 0\n    if n < m:\n        return 0\n    if n < m:\n        return 0\n    if n < m:\n        return 0\n    if n < m:\n        return 0\n    if n < m:\n        return 0\n    if n < m:\n        return 0\n    if n < m:\n        return 0\n    if n < m:\n        return 0\n    if n < m:\n        return 0\n    if n < m:\n        return 0\n    if n < m:\n        return 0\n    if n < m:\n        return 0\n    if n < m:\n        return 0\n    if n < m:\n        return 0\n    if n < m:\n        return 0\n    if n < m:\n        return 0\n    if n < m:\n        return 0\n    if n < m:\n        return 0\n    if n < m:\n        return 0\n    if n < m:\n        return 0\n    if n < m:\n        return 0\n    if n < m:\n        return 0\n    if n < m:\n        return 0\n    if n < m:\n        return 0\n    if n < m:\n        return 0\n    if n < m:\n        return 0\n    if n < m:\n        return 0\n    if n < m:\n        return 0\n    if n < m:\n        return 0\n    if n < m:\n        return 0\n    if n < m:\n        return 0\n    if n < m:\n        return 0\n    if n < m:\n        return 0\n    if n < m:\n        return 0\n    if n < m:\n        return 0\n    if n < m:\n        return 0\n    if n < m:\n        return 0\n    if n < m:\n        return 0\n    if n < m:\n        return 0\n    if n < m:\n        return 0\n    if n < m:\n        return 0\n    if n < m:\n        return 0\n    if n < m:\n        return 0\n    if n < m:\n        return 0\n    if n < m:\n        return 0\n    if n < m:\n        return 0\n    if n < m:\n        return 0\n    if n < m:\n        return 0\n    if n < m:\n        return 0\n    if n < m:\n        return 0\n    if n < m:\n        return 0\n    if n < m:\n        return 0\n    if n < m:\n        return 0\n    if n < m:\n        return 0\n    if n < m:\n        return 0\n    if",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3507,
      "prompt": "Complete the Python function given the prompt below:\nThe host university is organizing a party for this year\u2019s ACM/ICPC contestants with a buffet dinner and $R$ boxes of red wine and $W$ boxes of white wine. Wine boxes are to be arranged into non-empty piles, each pile contains only one type of wine, either white or red. After that, those piles are put into a line so that no two piles belonging to the same kind sit next to each other. In addition, for security reasons, each red wine pile should not have more than $d$ boxes of red wine, although piles of white wine can be arbitrarily large.\nYour task is to identify $K$ - the number of different ways to arrange the given wine boxes satisfying all of the above conditions.\n-----Input-----\nThe input contains $3$ space separated integers in one line: $R$, $W$, $d$ $(1 \\leq R,W \\leq 10^6, 1 \\leq d \\leq R)$\n-----Output-----\nWrite in one line the remainder of $K$ divided by $10^9+7$.\n-----Sample Clarification-----\nIn the first sample below, there are $3$ valid arrangements:\nIn the second sample below, there are $6$ valid arrangements:\n-----Examples-----\nSample Input:\n2 2 1\nSample Output:\n3\n\ndef",
      "answer": "def solution(R, W, d):\n    # Write your code here\n    pass\n<|endoftext|>",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3508,
      "prompt": "Complete the Python function given the prompt below:\nFrustrated by his legendary inability to tear down Lund\u2019s Cathedral, Finn the Giant wants to become better at destroying pillar-borne edifices. Together with his fellow trolls he has constructed a training site consisting of a colonnade of various pillars supporting a roof. The pillars differ in structural strength\u2014some are hewn of Swedish granite, but in various styles, others are made of stone, clay, or even wood. The roof his a huge block of uniform granite. You can assume that in the beginning, each pillar is able to support its own part of the roof. The pillars have exactly the same distance.\nAs an experienced builder, Finns known enough structural engineering to understand how roof weight distributes across pillars: every pillar supports the part of the roof closest to it. After removing pillars 1 and 2, the middle pillar supports the shaded part of the roof:\nAt the left of pillar\u00a00 and to the right of pillar\u00a0$n-1$, the roof is supported by two indestructible pillars. Initially, every pillar is subject to the same pressure, 1000 kN.\nFinn is able to tear down exactly one of the internal pillars, independent of its structural integrity. He hopes to start a chain reaction, whereby the redistribution of the roof\u2019s weights results in other pillars being crushed. Which pillar should Finn tear down to create the maximum damage?\n-----Input-----\nInput consists of two lines. On the first row, the number $n$ of pillars, with $1\\leq n\\leq 100000$. On the second row, $n$ integers $b_0$, $\\ldots $, $b_{n-1}$, where $1000 \\leq b_ i\\leq 100000000$, representing how much each internal pillar can support (in kN), from left to right.\n-----Output-----\nA single line with two integers. First the maximal damage (counted in number of destroyed pillars) that Finn can cause. Second, the pillar he has to tear down. The internal pillars are numbered $0$, $1$, $\\ldots $, $n-1$. If there are more than one correct answers, any will do.\n-----Examples-----\nSample Input:\n5\n1341 2412 1200 3112 2391\nSample Output:\n3 1\n\ndef",
      "answer": "def f(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return f(n-1) + f(n-2)\n\n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3509,
      "prompt": "Complete the Python function given the prompt below:\nRichard and Janet are going on their first date. Richard has offered to meet her at home with his bicycle, and Janet tells him she will call when she is ready in $10$ to $20$ minutes. But Richard is an impatient person; while he could wait at home for Janet\u2019s signal, he might also leave early and travel around the neighbourhood for a bit, in order to minimise the time it takes him to reach her once she calls. Due to his impatience, once Richard is on his bicycle, he does not want to ride any slower than the legal speed limit, stop at intersections, or wait outside Janet\u2019s house (but he does not mind passing by Janet\u2019s house and returning to it later).\nGiven the directed graph representing the neighbourhood around Richard\u2019s and Janet\u2019s houses, Richard wants to devise a route around the neighbourhood (after an optional waiting period at his own house) which minimises the time that Janet has to wait in the worst case. He can travel for as long as he likes and visit each intersection as many times as he likes.\nJanet will call Richard as soon as she is ready, and at that point Richard will take the shortest path to her that he can. Richard does not know exactly when Janet will be ready, but he knows it will be in somewhere between $a$ and $b$ minutes (not necessarily at a whole minute).\nIf Richard is passing through an intersection at the exact same instant Janet calls, the call is considered to happen before he chooses what to do at the intersection. For example, if he is passing by Janet\u2019s house at the moment she calls, he can immediately stop there and she does not have to wait for him at all.\nIt could happen that Janet never has to wait for $w$ minutes, but that she might have to wait for $w - \\epsilon $ minutes for arbitrarily small $\\epsilon > 0$, if she calls Richard at some inopportune moment (say, nanoseconds after he has left an intersection). In this case, we still define the worst case waiting time to be $w$.\n-----Input-----\nThe input consists of:\n - One line with two integers $a$, $b$ ($0 \\le a \\le b \\le 10^{12}$), indicating that Janet will be ready in at least $a$ minutes and at most $b$ minutes.\n - One line with two integers $n$, $m$ ($2 \\le n \\le m \\le 10^5$), the number of intersections and the number of roads in the neighbourhood. The intersections are numbered from $1$ to $n$.\n - $m$ lines, each with three integers $u$, $v$ and $t$ ($1 \\le u,v \\le n$, $1 \\le t \\le 10^6$), indicating that there is a one-way road from intersection $u$ to intersection $v$, and that it takes Richard exactly $t$ minutes to travel along this road.\nRichard\u2019s house is at intersection $1$ and Janet\u2019s house is at intersection $n$. It is guaranteed that it is possible to travel from Richard\u2019s house to Janet\u2019s house, and that it is possible to exit each intersection through at least one road, even if that road just loops back to the same intersection.\n-----Output-----\nOutput the time Janet has to wait in the worst case assuming she will be ready in at least $a$ minutes and at most $b$ minutes and Richard plans his route optimally.\nIt can be shown that the worst case waiting time is always an integer.\n-----Examples-----\nSample Input:\n10 20\n3 5\n1 3 7\n2 1 1\n2 3 2\n2 3 5\n3 2 4\nSample Output:\n6\n\ndef",
      "answer": "def get_best_route(n, m, u, v, t):\n    if n == 1:\n        return [u, v]\n    if m == 1:\n        return [u, v, t]\n    if n == m:\n        return [u, v, t]\n    if u == v:\n        return [u, v, t]\n    if u < v:\n        u, v = v, u\n    if u < v:\n        u, v = v, u\n    if u < v:\n        u, v = v, u\n    if u < v:\n        u, v = v, u\n    if u < v:\n        u, v = v, u\n    if u < v:\n        u, v = v, u\n    if u < v:\n        u, v = v, u\n    if u < v:\n        u, v = v, u\n    if u < v:\n        u, v = v, u\n    if u < v:\n        u, v = v, u\n    if u < v:\n        u, v = v, u\n    if u < v:\n        u, v = v, u\n    if u < v:\n        u, v = v, u\n    if u < v:\n        u, v = v, u\n    if u < v:\n        u, v = v, u\n    if u < v:\n        u, v = v, u\n    if u < v:\n        u, v = v, u\n    if u < v:\n        u, v = v, u\n    if u < v:\n        u, v = v, u\n    if u < v:\n        u, v = v, u\n    if u < v:\n        u, v = v, u\n    if u < v:\n        u, v = v, u\n    if u < v:\n        u, v = v, u\n    if u < v:\n        u, v = v, u\n    if u < v:\n        u, v = v, u\n    if u < v:\n        u, v = v, u\n    if u < v:\n        u, v = v, u\n    if u < v:\n        u, v = v, u\n    if u < v:\n        u, v = v, u\n    if u < v:\n        u, v = v, u\n    if u < v:\n        u, v = v, u\n    if u < v:\n        u, v = v, u\n    if u < v:\n        u, v = v, u\n    if u < v:\n        u, v = v, u\n    if u < v:\n        u, v = v, u\n    if u < v:\n        u, v = v, u\n    if u < v:\n        u, v = v, u\n    if u < v:\n        u, v = v, u\n    if u < v:\n        u, v = v, u\n    if u < v:\n        u, v = v, u\n    if u < v:\n        u, v = v, u\n    if u < v:\n        u, v = v, u\n    if u < v:\n        u, v = v, u\n    if u < v:\n        u, v = v, u\n    if u < v:\n        u, v = v, u\n    if u < v:\n        u, v = v, u\n    if u < v:\n        u, v = v, u\n    if u < v:\n        u, v = v, u\n    if u < v:\n        u, v = v, u\n    if u < v:\n        u, v = v, u\n    if u < v:\n        u, v = v, u\n    if u < v:\n        u, v = v, u\n    if u < v:\n        u, v = v, u\n    if u < v:\n        u, v = v, u\n    if u < v:\n        u, v = v, u\n    if u < v:\n        u, v = v, u\n    if u < v:\n        u, v = v, u\n    if u < v:\n        u, v = v, u\n    if u < v:\n        u, v = v",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3510,
      "prompt": "Complete the Python function given the prompt below:\nAlice and Bob are playing a board game. The board is divided into positions labeled $a, b, c, d, \\dots $ and the players use a gamepiece to mark the current position. Each round of the game consists of two steps:\n - Alice makes a choice. Depending on the current position, she has different options, where each option is a set of positions. Alice chooses one set $S$ among the available sets of positions.\n - Bob makes a choice. His choice is one position $p$ from the set $S$ that Alice chose in step 1. Bob moves the gamepiece to position $p$, which is the position for the start of the next round.\nPrior to the first round, each player independently selects one of the positions and reveals it at the start of the game. Bob\u2019s position is where the game starts. Alice wins the game if she can force Bob to move the gamepiece to the position she has chosen. To make things interesting, they have decided that Bob will pay Alice a certain amount if he loses, but Alice must pay Bob a certain amount after every round. The game now ends if Alice\u2019s position is reached or when Alice runs out of cash.\nBoth Alice and Bob play optimally: Alice will always choose an option that will lead to her winning the game, if this is possible, and Bob will always try to prevent Alice from winning.\nFor all possible start and end positions, Alice would like you to determine whether she can win the game and if so, how many rounds it will take.\n-----Input-----\nThe input consists of a single test case. The first line contains the number of positions $n$ ($1 \\leq n \\leq 25$). The $n$ positions are labeled using the first $n$ letters of the English alphabet in lowercase. The rest of the test case consists of $n$ lines, one for each position $p$, in alphabetical order. The line for position $p$ contains the options available to Alice in position $p$. It starts with the number of options $m$ ($1 \\leq m < 2^n$), which is followed by $m$ distinct strings, one for each option. Each string contains the positions available to Bob if Alice chooses that option. The string has at least $1$ character, the characters (which correspond to valid board positions) are in alphabetical order, and no characters are duplicated. The total number of options for the test case is at most $10^6$.\n-----Output-----\nFor each position $p$ in alphabetical order, display one line. In that line, for each position $q$ in alphabetical order display the minimal number of rounds in which Alice can be guaranteed to arrive at position $q$ when starting the game in position $p$, or $-1$ if Alice cannot be guaranteed to reach $q$ from $p$.\n-----Examples-----\nSample Input:\n2\n2 ab b\n1 b\nSample Output:\n0 1 \n-1 0\n\ndef",
      "answer": "def game(n,m):\n    if n==0:\n        return -1\n    if m==0:\n        return 0\n    if n==m:\n        return 1\n    if n>m:\n        return game(n-1,m)\n    else:\n        return game(n-1,m-1)\n\n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3511,
      "prompt": "Complete the Python function given the prompt below:\nThe game Pokenom Go has just been released. Pokenom trainers can now travel the world, capture Pokenom in the wild and battle each other! Bash \u2014 the Pokenom trainer \u2014 has decided to drop out of his university to pursue his childhood dream of becoming the best Pokenom trainer!\nHowever, Linux \u2014 Bash\u2019s university headmaster \u2014 does not allow his students to drop out so easily \u2026\nLinux puts $N$ black boxes on a straight line. The black boxes are numbered from $1$ to $N$ from left to right. Initially, all black boxes are empty. Then Linux gives Bash $Q$ queries. Each query can be one of the following $2$ types:\n - Linux puts exactly one stone inside exactly one box between $u$-th box and $v$-th box, inclusive, with equal probability. $(1 \\le u \\le v \\le N)$.\n - Let $a_ i$ be the number of stones in black box numbered $i$. Let $A = \\sum _{i=1}^{N}{a_ i^2}$. Bash has to calculate the expected value $E(A)$.\nBash can only drop out of his university if he is able to answer all queries correctly. But now all Bash can think of is Pokenom. Please help him!\n-----Input-----\nThe first line of input contains exactly $2$ positive integers $N$ and $Q$. $(1 \\le N, Q \\le 10^5)$.\n$Q$ lines follow, each line contains exactly one query. As explained, a query can be one of the following $2$ types:\n - $1 \\; u \\; v$: Linux puts a stone inside one of the boxes between $u$ and $v$.\n - $2$: Linux asks Bash to compute $E(A)$.\n-----Output-----\nIt can be proved that the expected value can be represented as an irreducible fraction $\\dfrac {A}{B}$. For each query of type $2$, print one line containing the value $A \\times B^{-1}$ modulo $10^{9} + 7$. The given input guarantees that $B$ is not a multiple of $10^{9} + 7$.\n-----Explanation for examples-----\n - In the first example: With a probability of $0.5$, two stones are in different squares. Hence, the answer to the fourth query is $0.5 \\times (1^{2} + 1^{2}) + 0.5 \\times 2^{2} = 3$.\n - In the second example: With a probability of $\\frac{2}{3}$, two stones are in different squares. Hence, the answer to the fourth query is $\\frac{2}{3} \\times 2 + \\frac{1}{3} \\times 4 = \\frac{8}{3}$.\n-----Examples-----\nSample Input:\n2 4\n1 1 2\n2\n1 1 2\n2\nSample Output:\n1\n3\n\ndef",
      "answer": "def PokenomGo(n, q):\n    if n == 0 or q == 0:\n        return 0\n    if n == 1:\n        return q\n    return PokenomGo(n - 1, q) + q\n\n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3512,
      "prompt": "Complete the Python function given the prompt below:\nChances are that you have probably already heard of the travelling salesman problem. If you have, then you are aware that it is an NP-hard problem because it lacks an efficient solution. Well, this task is an uncommon version of the famous problem! Its uncommonness derives from the fact that this version is, actually, solvable.\nThe travelling salesman is on a mission to visit $N$ cities, each exactly once. The cities are represented by numbers $1, 2, \\ldots, N$. What we know is the direct flight duration between each pair of cities. The salesman, being the efficient man that he is, wants to modify the city visiting sequence so that the total flight duration is the minimum possible.\nAlas, all is not so simple. In addition, the salesman has a peculiar condition regarding the sequence. For each city labeled $K$ the following must apply: either all cities with labels smaller than $K$ have been visited before the city labeled $K$ or they will all be visited after the city labeled $K$. In other words, the situation when one of such cities is visited before, and the other after is not allowed.\nAssist the poor fellow in his ambitious mission and calculate the minimum total flight duration needed in order to travel to all the cities, starting from whichever and ending in whichever city, visiting every city exactly once, so that his peculiar request is fulfilled.\n-----Input-----\nThe first line of input contains the positive integer $N$ ($2 \\leq N \\leq 1500$), the number of cities. Each of the following $N$ lines contains $N$ positive integers from the interval $[0,1000]$. The number in $B$-th place in the $A$-th row represents the flight duration between cities $A$ and $B$; that number is equal to the $A$-th number in the $B$-th row. When $A = B$, that number is 0. Otherwise, it is a positive value.\n-----Output-----\nThe first and only line of output must contain the required minimum total flight duration.\n-----Examples-----\nSample Input:\n3\n0 5 2\n5 0 4\n2 4 0\nSample Output:\n7\n\ndef",
      "answer": "def travelling_salesman(n, k):\n    if k == 0:\n        return 0\n    elif k == 1:\n        return 1\n    elif k == 2:\n        return 2\n    else:\n        return min(travelling_salesman(n-1, k-1), travelling_salesman(n-1, k)) + 1\n\n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3513,
      "prompt": "Complete the Python function given the prompt below:\nYou are playing the following simple game with a friend:\n - The first player picks a positive integer $X$.\n - The second player gives a list of $k$ distinct positive integers $Y_1, \\ldots, Y_ k$ such that $(Y_1+1)(Y_2+1) \\cdots (Y_ k+1) = X$, and gets $k$ points.\nWrite a program that plays the second player.\n-----Input-----\nThe input consists of a single integer $X$ satisfying $10^3 \\le X \\le 10^{15}$, giving the number picked by the first player.\n-----Output-----\nWrite a single integer $k$, giving the number of points obtained by the second player, assuming she plays as good as possible.\n-----Examples-----\nSample Input:\n1099511627776\nSample Output:\n8\n\ndef",
      "answer": "def main():\n    x = int(input())\n    y = [int(i) for i in input().split()]\n    k = 0\n    for i in y:\n        if i > x:\n            k += 1\n    print(k)\nmain()\n<|endoftext|>",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3514,
      "prompt": "Complete the Python function given the prompt below:\nYou are a seasoned Fight Club member who recently stumbled upon the classified plans of Project Mayhem, a secret organization that the other members have created to bring down consumerism and corporate America. To completely destabilize modern civilization, Tyler Durden and his Project Mayhem trainees are making plans to take down the buildings of major banks that hold everybody\u2019s credit information. If they succeed, then everybody is supposed to restart life with a blank slate, free of all debts ranging from mortgages to student loans.\nTyler plans to do so by setting off pipe bombs under major financial buildings. His crew has mapped out the city\u2019s financial district on a rectangular grid with $R$ rows and $C$ columns. Each grid cell either has a building armed with bombs to detonate (denoted by \u201cx\") or does not (denoted by \u201c.\"). As a friend of Tyler\u2019s, you know all too well that his plan is off the chains. Violence is never the solution. You want to do your best to thwart the plan by visiting the buildings one by one and disarming as many bombs as possible.\nYou can disarm the buildings in any order, with only one catch. After you disarm a building, Tyler\u2019s crew will find out, chase after you, and occupy that building indefinitely. To avoid getting caught, you must immediately find another (armed) building in the same street or avenue to take cover before disarming other buildings. After that however, you can go to any other armed building on the map to disarm it (provided the same condition is met). In other words, at any time you disarm a building, there must be at least one other armed building in either the same row or the same column.\nTake the following $3$ by $3$ map for example:\n     x...x. x.x\nYou have a few ways to disarm up to $2$ buildings:\n - You can first disarm the top-left one, followed by either of the bottom two buildings, for a total of $2$ buildings.\n - You can first disarm the bottom-right one, followed by either of the remaining two leftmost buildings, for a total of $2$ buildings.\n - However, note that if you choose to first disarm the bottom-left building, then none of the remaining buildings can be disarmed (since you won\u2019t be able to take cover afterwards). So in this case, you would only be able to disarm a single building.\nIn any of these cases, the center building can never be disarmed since there is no immediate neighboring building in its row or column to use for cover from Tyler\u2019s henchmen.\nGiven a map of the city, you would like to know the maximum number of buildings that can be disarmed.\n-----Input-----\nThe first line of input consists of two space-separated integers $R$ and $C$ ($1 \\le R, C \\le 2000$).\n$R$ lines follow, each of which consists of $C$ characters (either \u201cx\" or \u201c.\"), specifying the grid of the financial district.\n-----Output-----\nPrint, on a single line, the maximum number of buildings that can be disarmed.\n-----Examples-----\nSample Input:\n3 3\nx..\n.x.\nx.x\nSample Output:\n2\n\ndef",
      "answer": "def disarmed(grid):\n    if len(grid) == 1:\n        return 1\n    elif len(grid) == 2:\n        return 2\n    elif len(grid) == 3:\n        return 3\n    else:\n        return 0\n\n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3515,
      "prompt": "Complete the Python function given the prompt below:\nAlice and Bob dream about future summer vacations where travel is unconstrained by pandemics, budgetary constraints, or other mundane problems. Since they love winter, they want to visit the Southern Hemisphere, in particular Chile. Chile is, geographically speaking, a rather one-dimensional country, and can be represented as an infinitely long $y$-axis. There are $N$ cities in Chile, numbered from $1$ to $N$, where the $i$th city is located at $y$-coordinate $y_ i$. Alice and Bob will start their journey in city number $1$, and travel to some other city from there.\nEach city has an airport with a direct connection to other cities. However, flights cannot be arbitrarily short: For each city $i$ there is a minimal distance $d_ i$ such that there is a flight to city $j$ if and only if $|y_ i-y_ j|\\geq d_ i$. The time for a flight is $|y_ i - y_ j|$ minutes, but it also takes time to travel to the airport, check in, pass security, etc. Thus, for each city there is an additional time $r_ i$ such that the total time to fly from $i$ to $j$ is $r_ i + |y_ i - y_ j|$ minutes.\nFind the shortest possible time to get to each of the other cities, provided that Alice and Bob start in city\u00a0$1$. Flights are the only means of transportation, but Alice and Bob can take as many flights as they like.\n-----Input-----\nThe first line contains an integer $N$, the number of cities, where $2 \\leq N \\leq 2 \\cdot 10^5$. The following $N$ lines each consist of three integers $y_ i$, $d_ i$, and $r_ i$, where $0 \\leq y_ i, d_ i, r_ i \\leq 10^9$. All $y$-coordinates are distinct.\n-----Output-----\nPrint $N-1$ lines, each containing an integer. On the $i$th line, print the shortest possible total time for getting from city\u00a01 to city\u00a0$i+1$, if possible. If there is no way to get to city $i+1$, print $-1$ instead.\n-----Examples-----\nSample Input:\n5\n1 3 2\n2 5 2\n3 0 0\n4 2 4\n5 3 0\nSample Output:\n9\n-1\n5\n6\n\ndef",
      "answer": "def shortest_time(y, d, r):\n    if y == 0:\n        return 0\n    if d == 0:\n        return r\n    if d > 0:\n        return shortest_time(y - 1, d, r) + r\n    return shortest_time(y - 1, d, r)\n\n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3516,
      "prompt": "Complete the Python function given the prompt below:\nThe classic video game \u201cPrince of Python\u201d comprises $n$ levels, numbered from $1$ to $n$. You are going to speedrun this game by finishing all of the levels as fast as possible, and you can beat them in any order that you want.\nYou enter each level equipped with one of $n+1$ magical items. In the beginning you only have item $0$ in your inventory. Once you beat a level, you get to keep the item numbered the same as that level. For example, on finishing level $5$, you obtain a mighty Gauntlet of 5 Fingers you may equip thereafter instead of the less-acclaimed Sword of 0 Damage you always start out with.\nBeating a level can take different amounts of time depending on which item you take into the level with you. Higher-numbered items are more powerful, so if playing by the rules it is always at least as fast to finish the level with a higher-numbered item as with a lower-numbered item.\nHowever, each level also has a shortcut left in by the developers. The shortcut for a level can be accessed by applying a specific item in an unconventional way. By doing so you can finish the level as fast as, or even faster than, if you had used any of the other items.\nHow long will it take you to beat all of the levels of the game?\n-----Input-----\nThe input consists of:\n - One line containing an integer $n$ ($1 \\le n \\le 2500$), the number of levels.\n - $n$ lines, describing the levels.\nThe $i$th such line starts with two integers $x_ i$ and $s_ i$ ($0 \\le x_ i \\le n$, $1 \\le s_ i \\le 10^9$), the shortcut item for level $i$ and the completion time for level $i$ when using the shortcut.\nThe remainder of the line has $n+1$ integers $a_{i,0}, \\ldots, a_{i,n}$ ($10^9 \\ge a_{i,0} \\ge a_{i,1} \\ge \\ldots \\ge a_{i,n} \\ge s_ i$), where $a_{i,j}$ is the completion time for level $i$ when playing by the rules using item $j$.\n-----Output-----\nOutput the minimum time it takes to beat, in any order, all of the levels in the game.\n-----Examples-----\nSample Input:\n3\n1 1 40 30 20 10\n3 1 95 95 95 10\n2 1 95 50 30 20\nSample Output:\n91\n\ndef",
      "answer": "def play(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 4\n    elif n == 5:\n        return 5\n    elif n == 6:\n        return 6\n    elif n == 7:\n        return 7\n    elif n == 8:\n        return 8\n    elif n == 9:\n        return 9\n    elif n == 10:\n        return 10\n    elif n == 11:\n        return 11\n    elif n == 12:\n        return 12\n    elif n == 13:\n        return 13\n    elif n == 14:\n        return 14\n    elif n == 15:\n        return 15\n    elif n == 16:\n        return 16\n    elif n == 17:\n        return 17\n    elif n == 18:\n        return 18\n    elif n == 19:\n        return 19\n    elif n == 20:\n        return 20\n    elif n == 21:\n        return 21\n    elif n == 22:\n        return 22\n    elif n == 23:\n        return 23\n    elif n == 24:\n        return 24\n    elif n == 25:\n        return 25\n    elif n == 26:\n        return 26\n    elif n == 27:\n        return 27\n    elif n == 28:\n        return 28\n    elif n == 29:\n        return 29\n    elif n == 30:\n        return 30\n    elif n == 31:\n        return 31\n    elif n == 32:\n        return 32\n    elif n == 33:\n        return 33\n    elif n == 34:\n        return 34\n    elif n == 35:\n        return 35\n    elif n == 36:\n        return 36\n    elif n == 37:\n        return 37\n    elif n == 38:\n        return 38\n    elif n == 39:\n        return 39\n    elif n == 40:\n        return 40\n    elif n == 41:\n        return 41\n    elif n == 42:\n        return 42\n    elif n == 43:\n        return 43\n    elif n == 44:\n        return 44\n    elif n == 45:\n        return 45\n    elif n == 46:\n        return 46\n    elif n == 47:\n        return 47\n    elif n == 48:\n        return 48\n    elif n == 49:\n        return 49\n    elif n == 50:\n        return 50\n    elif n == 51:\n        return 51\n    elif n == 52:\n        return 52\n    elif n == 53:\n        return 53\n    elif n == 54:\n        return 54\n    elif n == 55:\n        return 55\n    elif n == 56:\n        return 56\n    elif n == 57:\n        return 57\n    elif n == 58:\n        return 58\n    elif n == 59:\n        return 59\n    elif n == 60:\n        return 60\n    elif n == 61:\n        return 61\n    elif n == 62:\n        return 62\n    elif n == 63:\n        return 63\n    elif n == 64:\n        return 64\n    elif n == 65:\n        return 65\n    elif n == 66:\n        return 66\n    elif n == 67:\n        return 67\n    elif n == 68:\n        return 68\n    elif n == 69:\n        return 69\n    elif n == 70:\n        return 70\n    elif n == 71:\n        return 71\n    elif n == 72:\n        return 72\n    elif n == 73:\n        return 73\n    elif n == 74:\n        return 74\n    elif n == 75:\n        return 75\n    elif n == 76:\n        return 76\n    elif n == 77:\n        return 77\n    elif n == 78:\n        return 78\n    elif n == 79:\n        return 79\n    elif n == 80:\n        return 80\n    elif n == 81:\n        return 81\n    elif n == 82:\n        return 82\n    elif n == 83:\n        return 83\n    elif n == 84:\n        return 84\n    elif n == 85:\n        return 85\n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3517,
      "prompt": "Complete the Python function given the prompt below:\nBAAS Inc. (Build Airplanes As-a-Service) has grand plans to build lots of airplanes. Naturally, the airplane construction process consists of multiple steps, each of which may take some time. Some steps can take more time to complete than others, e.g. attaching a plane wing may take longer than spray-painting the BAAS logo on the tail. Furthermore, some steps must to be completed before others can commence. For instance the hull needs to be assembled before the wings can be attached to it. If there is no dependency between two steps, then the steps can be completed in parallel.\nBAAS is trying very hard to become the market leader in airplane construction. Since customers value a speedy delivery, BAAS has decided to invest in their R&D department with the goal to decrease their delivery time. The chief scientist of BAAS is very optimistic and thinks that his department can reduce the time it takes to complete one step to $0$. However, since the money is always tight in the research sector at BAAS, he could only promise to eliminate exactly one of the construction steps. As the CEO of BAAS, your role implies figuring out which step you would like to eliminate to achieve the shortest possible construction time. It goes without saying that as the CEO you have complete access to the BAAS\u2019s secret construction process blueprints.\n-----Input-----\nThe first line of the input contains an integer $N$ ($2 \\le N \\le 400$), the number of steps in the build process.\nThe next line contains the $N$ integers $a_1, a_2, \\dots, a_ N$ ($1 \\le a_ i \\le 10^5$), the number of seconds each of the $N$ steps takes in the build process.\nThis is followed by $N$ lines. The $i$\u2019th of these lines contains an integer $C_ i$ followed by $C_ i$ integers $A_1, \\dots, A_{C_ i}$ ($1 \\le A_ j < i$). The integers $A_ j$ denote what steps the $i$\u2019th step has a dependency on.\nIt is guaranteed that there is no step that indirectly depends on itself. Furthermore, each step has a direct or indirect dependency on step $1$ (receiving an order), and step $N$ (delivering the airplane) has a direct or indirect dependency on every other step.\n-----Output-----\nOutput a single integer \u2013 the shortest possible time it takes to construct an airplane assuming a single step can be reduced to take no time at all.\n-----Examples-----\nSample Input:\n2\n15 20\n0\n1 1\nSample Output:\n15\n\ndef",
      "answer": "def build_airplane(a, b, c, d, e, f):\n    if a == 0:\n        if b == 0:\n            if c == 0:\n                if d == 0:\n                    if e == 0:\n                        if f == 0:\n                            return 0\n                        else:\n                            return 1\n                    else:\n                        return 0\n                else:\n                    return 0\n            else:\n                return 0\n        else:\n            return 0\n    else:\n        return 0\n\n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3518,
      "prompt": "Complete the Python function given the prompt below:\nThis is a very exciting week for John. The reason is that, as a middle school teacher, he has been asked to dedicate the entire week to teaching his class of $n$ students about the cause and effect of global warming. As John is very passionate about his planet, he\u2019s going to spend extra time and effort to make this week memorable and rewarding for the students. Towards that, one of the things he wants to ask them to do is to prepare, as homework, presentations about global warming. To make this a little easier for them, as well as more fun, he has asked them to do this in groups of two.\nOf course arranging the students into groups comes with the usual headache, namely that only friends are willing to work together. Luckily the students in his class are a friendly bunch. In particular, if $p$, $q$ and $r$ are three distinct students, and $p$ and $q$ are friends, and $q$ and $r$ are friends, then $p$ and $r$ are also friends. But John now realizes the irony in asking his students to work at home in groups, as students may have to travel to meet their group partner, which may emit greenhouse gases such as carbon dioxide, depending on their mode of transportation. In the spirit of this week\u2019s topic, John asked all the students in his class to calculate, for each of their friends, how much carbon dioxide would be emitted if they were to meet up with the respective friend.\nUsing this information, can you help John figure out what is the minimum total amount of carbon dioxide that will be emitted if he arranges the groups optimally, or determine that it\u2019s not possible to arrange all the students into groups of two friends?\n-----Input-----\nThe first line contains two integers $n$ and $m$ ($1 \\leq n \\leq 200$, $0 \\leq m \\leq 250$), the number of students in John\u2019s class, and the total number of pairs of friends in the class. As John is bad with names, he has given each of his students a distinct integer identifier between $1$ and $n$.\nEach of the next $m$ lines contains three integers $p$, $q$ and $c$ ($1 \\leq p, q \\leq n$, $0 \\leq c \\leq 10^6$), the identifiers of two distinct students that are friends, and how many grams of carbon dioxide would be emitted if they were in a group together, and thus had to meet. Each pair of friends is listed exactly once in the input.\n-----Output-----\nOutput the minimum total amount of carbon dioxide, in grams, that would be emitted if John arranges all students optimally into groups of two friends, or \u201cimpossible\u201d if there is no way to arrange the students into groups in that way.\n-----Examples-----\nSample Input:\n5 4\n3 1 375\n2 5 283\n1 4 716\n3 4 98\nSample Output:\nimpossible\n\ndef",
      "answer": "def solution(n, m, p, q, c):\n    answer = 0\n    for i in range(n):\n        for j in range(m):\n            if p[i] == q[j]:\n                answer += c[i]\n    return answer\n\n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3519,
      "prompt": "Complete the Python function given the prompt below:\nThe game of Memory is played with $N$ pairs of cards where each pair has the same picture, i.e. there are $N$ different pictures, and each of them appear on exactly two cards.\nThe cards are shuffled and placed face down on a large table. On each turn you flip two cards of your choice face up. If they match you remove them from the game, and if they don\u2019t match, you turn them face down. The goal of the game is to remove all cards from the game.\nYour strategy is simple:\n - If you know of two face-down cards which have the same picture, choose both of them.\n - Otherwise,\n - Turn a random card that you have not looked at before face up.\n - If it matches a card you have seen, turn the matching card face up (you have excellent memory).\n - If the first card did not match a card you had seen before, turn another random unknown card face up.\nGiven this strategy, what is the expected number of turns you have to play in order to finish the game?\n-----Input-----\nInput is a single integer $N$ indicating the number of pairs of cards.\n-----Output-----\nOutput the expected number of turns needed to finish the game. This number must have an absolute or relative error of at most $10^{-6}$.\n-----Limits-----\n - $1 \\leq N \\leq 1000$\n-----Examples-----\nSample Input:\n1\nSample Output:\n1.000000000\n\ndef",
      "answer": "def memory(n):\n    if n == 1:\n        return 1\n    else:\n        return n * memory(n-1)\n\n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3520,
      "prompt": "Complete the Python function given the prompt below:\nEveryone wants to live as long a life as possible. As time progresses, technology progresses. Various anti-aging pills get introduced to the market at various times which allow a person to age more slowly than normal. In particular, an $x$-$y$ pill, when taken regularly, ages your body only $y$ seconds over the course of $x$ seconds. So, if you took a $100$-$87$ pill regularly, then over the next $100$ seconds, your body would only age $87$ seconds. You can only take one of these pills at a time (or none at all). The only downside to using one of these pills is that due to the change in regimen, if you switch to a pill, it automatically ages you $c$ seconds. The value of $c$ is the same for all pills.\nAny time you switch to an $x$-$y$ pill, you can take it for any number of seconds, but you can only switch to a pill at or after the time it first becomes available on the market. For the purposes of this problem assume that your life starts at time $t = 0$ seconds and that without the aid of any pills, you would live to be $n$ seconds old.\nGiven information about each different pill introduced into the market (the time it is introduced, in seconds, and its corresponding $x$ and $y$ values as previously described) and $c$, the number of seconds you automatically age when switching pills (or switching to a pill from no pill at all), determine the longest you can live, over all possible schedule of pills you could take.\n-----Input-----\nThe first line of input consists of three positive integers, $n$ ($n \\le 3\\cdot 10^9$), representing the number of seconds you would live without taking any pills, $p$ ($p \\le 10^5$), the number of pills that become available on the market, and $c$ ($c \\le 10^5$), the time in seconds you age as soon as you switch to a different pill. $p$ lines follow with the $i^{th}$ line containing three space separated integers: $t_{i}$ $(1 \\le t_{i} \\le 10^{12})$, $x_{i}$ and $y_{i}$ $(1 \\le y_{i} < x_{i} \\le 10^{4}$), representing the time the $i^{th}$ pill gets introduced to the market, and the corresponding $x$ and $y$ values for it. In addition, for all $i$, $1 \\le i \\le n-1$, it is guaranteed that $t_{i+1} - t_{i} > c$.\n-----Output-----\nOutput a single real number, representing the maximum number of seconds that you could live, if you take the appropriate pills. Your answer should be correct within a relative or absolute error of $10^{-6}$.\n-----Examples-----\nSample Input:\n100 3 10\n15 99 98\n40 3 2\n90 10 9\nSample Output:\n115.000000000\n\ndef",
      "answer": "def solution(n, p, c):\n    answer = 0\n    for i in range(n):\n        answer += (p[i] - c) * (p[i] - c)\n    return answer\n\n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3521,
      "prompt": "Complete the Python function given the prompt below:\nYou are planning to travel in interstellar space in the hope of finding habitable planets. You have already identified $N$ stars that can recharge your spaceship via its solar panels. The only work left is to decide the orientation of the spaceship that maximizes the distance it can travel.\nSpace is modeled as a $2$D plane, with the Earth at the origin. The spaceship can be launched from the Earth in a straight line, in any direction. Star $i$ can provide enough energy to travel $T_ i$ distance if the spaceship is launched at an angle of $a_ i$ with the $x$-axis. If the angle is not perfectly aligned, then the spaceship gets less energy. Specifically, if the launch direction makes an angle of $a$ with the $x$-axis, then it gets enough energy to travel distance of\\[ \\max (0, T_ i - s_ i \\cdot \\mathrm{dist}(a_ i, a)) \\]\nfrom star $i$, where $\\mathrm{dist}(a,b)$ is the minimum radians needed to go from angle $a$ to $b$. The distance that the spaceship can travel is simply the sum of the distances that each star contributes. Find the maximum distance $T$ that the starship can travel.\n-----Input-----\nThe first line contains the value $N$, $1\\le N\\le 10^5$. Following this are $N$ lines each containing three real numbers $T_ i$, $s_ i$, and $a_ i$, with $0<T_ i\\le 1000$, $0\\le s_ i\\le 100$, and $0\\le a_ i < 2\\pi $. All real numbers in the input have at most $6$ digits after the decimal point.\n-----Output-----\nOn a single line output the maximum distance the spacecraft can travel. Your answer is considered correct if it has an absolute or relative error of at most $10^{-6}$.\n-----Examples-----\nSample Input:\n2\n100 1 1\n100 1 1.5\nSample Output:\n199.500000\n\ndef",
      "answer": "def orientation(a,b,c,d):\n    if a+b+c+d==0:\n        return 0\n    elif a+b+c+d==1:\n        return 1\n    elif a+b+c+d==2:\n        return 2\n    elif a+b+c+d==3:\n        return 3\n    elif a+b+c+d==4:\n        return 4\n    elif a+b+c+d==5:\n        return 5\n    elif a+b+c+d==6:\n        return 6\n    elif a+b+c+d==7:\n        return 7\n    elif a+b+c+d==8:\n        return 8\n    elif a+b+c+d==9:\n        return 9\n    elif a+b+c+d==10:\n        return 10\n    elif a+b+c+d==11:\n        return 11\n    elif a+b+c+d==12:\n        return 12\n    elif a+b+c+d==13:\n        return 13\n    elif a+b+c+d==14:\n        return 14\n    elif a+b+c+d==15:\n        return 15\n    elif a+b+c+d==16:\n        return 16\n    elif a+b+c+d==17:\n        return 17\n    elif a+b+c+d==18:\n        return 18\n    elif a+b+c+d==19:\n        return 19\n    elif a+b+c+d==20:\n        return 20\n    elif a+b+c+d==21:\n        return 21\n    elif a+b+c+d==22:\n        return 22\n    elif a+b+c+d==23:\n        return 23\n    elif a+b+c+d==24:\n        return 24\n    elif a+b+c+d==25:\n        return 25\n    elif a+b+c+d==26:\n        return 26\n    elif a+b+c+d==27:\n        return 27\n    elif a+b+c+d==28:\n        return 28\n    elif a+b+c+d==29:\n        return 29\n    elif a+b+c+d==30:\n        return 30\n    elif a+b+c+d==31:\n        return 31\n    elif a+b+c+d==32:\n        return 32\n    elif a+b+c+d==33:\n        return 33\n    elif a+b+c+d==34:\n        return 34\n    elif a+b+c+d==35:\n        return 35\n    elif a+b+c+d==36:\n        return 36\n    elif a+b+c+d==37:\n        return 37\n    elif a+b+c+d==38:\n        return 38\n    elif a+b+c+d==39:\n        return 39\n    elif a+b+c+d==40:\n        return 40\n    elif a+b+c+d==41:\n        return 41\n    elif a+b+c+d==42:\n        return 42\n    elif a+b+c+d==43:\n        return 43\n    elif a+b+c+d==44:\n        return 44\n    elif a+b+c+d==45:\n        return 45\n    elif a+b+c+d==46:\n        return 46\n    elif a+b+c+d==47:\n        return 47\n    elif a+b+c+d==48:\n        return 48\n    elif a+b+c+d==49:\n        return 49\n    elif a+b+c+d==50:\n        return 50\n    elif a+b+c+d==51:\n        return 51\n    elif a+b+c+d==52:\n        return 52\n    elif a+b+c+d==53:\n        return 53\n    elif a+b+c+d==54:\n        return 54\n    elif a+b+c+d==55:\n        return 55\n    elif a+b",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3522,
      "prompt": "Complete the Python function given the prompt below:\nYou are building advanced chips for machines. Making the chips is easy, but the power supply turns out to be an issue since the available batteries have varied power outputs.\nConsider the problem of $n$ machines, each with two chips, where each chip is powered by $k$ batteries. Surprisingly, it does not matter how much power each chip gets, but a machine works best when its two chips have power outputs as close as possible. The power output of a chip is simply the smallest power output of its $k$ batteries.\nYou have a stockpile of $2nk$ batteries that you want to assign to the chips. It might not be possible to allocate the batteries so that in every machine both chips have equal power outputs, but you want to allocate them so that the differences are as small as possible. To be precise, you want to tell your customers that in all machines the difference of power outputs of the two chips is at most $d$, and you want to make $d$ as small as possible. To do this you must determine an optimal allocation of the batteries to the machines.\nConsider Sample Input 1. There are $2$ machines, each requiring $3$ batteries per chip, and a supply of batteries with power outputs $1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12$. You can, for instance, assign the batteries with power outputs $1, 3, 5$ to one chip, those with power $2, 4, 12$ to the other chip of the same machine, those with power $6, 8, 9$ to the third chip, and those with power $7, 10, 11$ to the fourth. The power outputs of the chips are $1, 2, 6$, and $7$, respectively, and the difference between power outputs is $1$ in both machines. Note that there are many other ways to achieve this result.\n-----Input-----\nThe input consists of a single test case. A test case consists of two lines. The first line contains two positive integers: the number of machines $n$ and the number of batteries per chip $k$ ($2nk \\leq 10^6$). The second line contains $2nk$ integers $p_ i$ specifying the power outputs of the batteries ($1 \\leq p_ i \\leq 10^9$).\n-----Output-----\nDisplay the smallest number $d$ such that you can allocate the batteries so that the difference of power outputs of the two chips in each machine is at most $d$.\n-----Examples-----\nSample Input:\n2 3\n1 2 3 4 5 6 7 8 9 10 11 12\nSample Output:\n1\n\ndef",
      "answer": "def allocate_batteries(n, k, p):\n    if n == 1:\n        return p\n    else:\n        return allocate_batteries(n-1, k, p+n*k)\n\n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3523,
      "prompt": "Complete the Python function given the prompt below:\nWhen Per was living in New York, he couldn\u2019t use his debit card as often as in Sweden. He had to carry cash all the time and his wallet was getting heavy from all the coins he was carrying around. He was once in a candy store buying a few kilos of candy and he wanted to get rid of as many coins as possible but couldn\u2019t figure out how to do it without getting any change back.\n-----Task-----\nYou will be given a price $P$ that Per was going to pay. You will also be given the number of 1-, 5-, 10- and 25-cent coins that he had in his wallet. He didn\u2019t have any notes. Find the maximum number of coins he could have used for paying the price $P$ without getting any change back.\n-----Input-----\nThe first line of input contains an integer $P, 1\\leq P\\leq 100000000$, the price Per was going to pay. On the second line there are 4 space separated integers $N_1, N_5, N_{10}, N_{25}; 0\\leq N_1, N_5, N_{10}, N_{25}\\leq 100000000$, the number of 1-, 5-, 10- and 25-cent coins in Per\u2019s wallet.\n-----Output-----\nIf Per couldn\u2019t pay exactly $P$ without getting any change back, output Impossible on a single line. Otherwise output the maximum number of coins Per could use to pay the price $P$.\n-----Examples-----\nSample Input:\n13\n3 2 1 1\nSample Output:\n5\n\ndef",
      "answer": "def max_coins(P, N):\n    if N == 0:\n        return 0\n    if N == 1:\n        return P\n    if N == 2:\n        return P\n    if N == 3:\n        return P\n    if N == 4:\n        return P\n    if N == 5:\n        return P\n    if N == 6:\n        return P\n    if N == 7:\n        return P\n    if N == 8:\n        return P\n    if N == 9:\n        return P\n    if N == 10:\n        return P\n    if N == 11:\n        return P\n    if N == 12:\n        return P\n    if N == 13:\n        return P\n    if N == 14:\n        return P\n    if N == 15:\n        return P\n    if N == 16:\n        return P\n    if N == 17:\n        return P\n    if N == 18:\n        return P\n    if N == 19:\n        return P\n    if N == 20:\n        return P\n    if N == 21:\n        return P\n    if N == 22:\n        return P\n    if N == 23:\n        return P\n    if N == 24:\n        return P\n    if N == 25:\n        return P\n    if N == 26:\n        return P\n    if N == 27:\n        return P\n    if N == 28:\n        return P\n    if N == 29:\n        return P\n    if N == 30:\n        return P\n    if N == 31:\n        return P\n    if N == 32:\n        return P\n    if N == 33:\n        return P\n    if N == 34:\n        return P\n    if N == 35:\n        return P\n    if N == 36:\n        return P\n    if N == 37:\n        return P\n    if N == 38:\n        return P\n    if N == 39:\n        return P\n    if N == 40:\n        return P\n    if N == 41:\n        return P\n    if N == 42:\n        return P\n    if N == 43:\n        return P\n    if N == 44:\n        return P\n    if N == 45:\n        return P\n    if N == 46:\n        return P\n    if N == 47:\n        return P\n    if N == 48:\n        return P\n    if N == 49:\n        return P\n    if N == 50:\n        return P\n    if N == 51:\n        return P\n    if N == 52:\n        return P\n    if N == 53:\n        return P\n    if N == 54:\n        return P\n    if N == 55:\n        return P\n    if N == 56:\n        return P\n    if N == 57:\n        return P\n    if N == 58:\n        return P\n    if N == 59:\n        return P\n    if N == 60:\n        return P\n    if N == 61:\n        return P\n    if N == 62:\n        return P\n    if N == 63:\n        return P\n    if N == 64:\n        return P\n    if N == 65:\n        return P\n    if N == 66:\n        return P\n    if N == 67:\n        return P\n    if N == 68:\n        return P\n    if N == 69:\n        return P\n    if N == 70:\n        return P\n    if N == 71:\n        return P\n    if N == 72:\n        return P\n    if N == 73:\n        return P\n    if N == 74:\n        return P\n    if N == 75:\n        return P\n    if N == 76:\n        return P\n    if N == 77:\n        return P\n    if N == 78:\n        return P\n    if N == 79:\n        return P\n    if N == 80:\n        return P\n    if N == 81:\n        return P\n    if N == 82:\n        return P\n    if N == 83:\n        return P\n    if N == 84:\n        return P\n    if N == 85:\n        return P\n    if N == 86:\n        return P\n    if N == 87:\n        return P\n    if N == 88:\n        return P\n    if N == 89:\n        return P\n    if N == 90:\n        return P\n    if N == 91:\n        return P\n    if N",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3524,
      "prompt": "Complete the Python function given the prompt below:\nAnthony has two multiple choice assignments to hand in today. The answer to each assignment is a string, where the $i^\\textrm {th}$ letter represents the answer to the $i^\\textrm {th}$ question.\nBut instead of handing in two strings, Anthony only hands in a single string. He claims he answered every question correctly but his little sister Cora merged his two strings into a single string. Moreover, Cora merged his string in such a way that the following conditions are satisfied:\n - For any two integers $0\\leq i<j<|s_1|$ (where $|s_1|$ is the length of $s_1$), the index of $s_1[i]$ in $s$ is less than the index of $s_1[j]$ in $s$\n - For any two integers $0\\leq i<j<|s_2|$, the index of $s_2[i]$ in $s$ is less than the index of $s_2[j]$ in $s$\nCan you help Anthony\u2019s teacher verify whether Anthony\u2019s claim is possible?\n-----Input-----\nThe first line contains a single string $s$. It is guaranteed that $2\\leq |s|\\leq 10000$.\nThe next two lines contain strings $s_1$ and $s_2$ respectively. It is guaranteed that $1\\leq |s_1|, |s_2|\\leq 5000$ and $|s_1|+|s_2|=|s|$.\nAll the strings consists of only lowercase English letters.\n-----Output-----\nIf Anthony\u2019s claim is possible, print \u201cyes\u201d (without quotes). Otherwise, print \u201cno\u201d (without quotes).\n-----Examples-----\nSample Input:\naabcad\naba\nacd\nSample Output:\nyes\n\ndef",
      "answer": "def solve(s):\n    if len(s) == 1:\n        return True\n    if len(s) == 2:\n        return s[0] == s[1]\n    if len(s) == 3:\n        return s[0] == s[1] and s[0] == s[2]\n    if len(s) == 4:\n        return s[0] == s[1] and s[0] == s[2] and s[0] == s[3]\n    if len(s) == 5:\n        return s[0] == s[1] and s[0] == s[2] and s[0] == s[3] and s[0] == s[4]\n    if len(s) == 6:\n        return s[0] == s[1] and s[0] == s[2] and s[0] == s[3] and s[0] == s[4] and s[0] == s[5]\n    if len(s) == 7:\n        return s[0] == s[1] and s[0] == s[2] and s[0] == s[3] and s[0] == s[4] and s[0] == s[5] and s[0] == s[6]\n    if len(s) == 8:\n        return s[0] == s[1] and s[0] == s[2] and s[0] == s[3] and s[0] == s[4] and s[0] == s[5] and s[0] == s[6] and s[0] == s[7]\n    if len(s) == 9:\n        return s[0] == s[1] and s[0] == s[2] and s[0] == s[3] and s[0] == s[4] and s[0] == s[5] and s[0] == s[6] and s[0] == s[7] and s[0] == s[8]\n    if len(s) == 10:\n        return s[0] == s[1] and s[0] == s[2] and s[0] == s[3] and s[0] == s[4] and s[0] == s[5] and s[0] == s[6] and s[0] == s[7] and s[0] == s[8] and s[0] == s[9]\n    if len(s) == 11:\n        return s[0] == s[1] and s[0] == s[2] and s[0] == s[3] and s[0] == s[4] and s[0] == s[5] and s[0] == s[6] and s[0] == s[7] and s[0] == s[8] and s[0] == s[9] and s[0] == s[10]\n    if len(s) == 12:\n        return s[0] == s[1] and s[0] == s[2] and s[0] == s[3] and s[0] == s[4] and s[0] == s[5] and s[0] == s[6] and s[0] == s[7] and s[0] == s[8] and s[0] == s[9] and s[0] == s[10] and s[0] == s[11]\n    if len(s) == 13:\n        return s[0] == s[1] and s[0] == s[2] and s[0] == s[3] and s[0] == s[4] and s[0] == s[5] and s[0] == s[6] and s[0] == s[7] and s[0] == s[8] and s[0] == s[9] and s[0] == s[10] and s[0] == s[11] and s[0] == s[12]\n    if len(s) == 14:\n        return s[0] == s[1] and s[0] == s[2] and s[0] == s[3] and s[0] == s[4] and s[0] == s[5] and s[0] == s[6] and s[0] == s[7]",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3525,
      "prompt": "Complete the Python function given the prompt below:\nThe home office of Labyrinthian Inc. has installed a new system of security badges and electronic door locks. Each badge is assigned an ID number, and the idea was that electronic locks on each door should allow access only to personnel whose ID number indicated that they had appropriate security clearance to enter that room, hallway, closet, or whatever lay on the other side of the door. \nThe contract for the lock system, however, was put out to the lowest bidder, who clearly misunderstood the intention. Instead of each lock storing a list of permitted ID numbers, instead each lock stores exactly two numbers, a lower and upper bound, and permits passage to badges whose number lies between those bounds. For example, a lock keyed as $(25, 29)$ would pass only badges $25, 26, 27, 28,$ and $29$.\nComplicating the matter is the fact that lock on each side of the door can be keyed differently, so a person who is able to pass through the door in one direction might not be able to return once the door has closed behind them.\nThe results have been frustrating (and occasionally entertaining \u2013 videos of everyone in the company trying to find a way to the cafeteria at noon have gone viral on social media).\nIt has become a major task, when hiring or promoting any employee, to find a badge number that will actually get them from the front door to their new office.\nWrite a program to determine how many badge numbers will permit passage from one given room to another.\n-----Input-----\nThe first line of input will contain integers $N$, $L$, and $B$, denoting the number of rooms, of locks, and of badge numbers, respectively. $2 \\leq N \\leq 1000$, $1 \\leq L \\leq 5000$, $1 \\leq B \\leq 10^9$\nThe next line of input will contain two integers, $S$ and $D$, $1 \\leq S \\leq N$, $1 \\leq D \\leq N$, $S \\neq D$, denoting the starting and destination rooms that we are interested in.\nThis is followed by $L$ lines, each describing a lock as four integers:\\[ a \\; b \\; x \\; y \\]\nindicating that a lock permits passage from room $a$ to room $b$ (but not from $b$ to $a$) for badges numbered from $x$ to $y$, inclusive. It is guaranteed that $1 \\leq a, b \\leq N$, $a \\neq b$, $1 \\leq x \\leq B$, $1 \\leq y \\leq B$, $x \\leq y$, and no $(a,b)$ pair will occur more than once, although both $(a,b)$ and $(b,a)$ may occur within separate lines.\n-----Output-----\nPrint a single line indicating the number of badge ID numbers permitting passage from room $S$ to room $D$\n-----Examples-----\nSample Input:\n4 5 10\n3 2\n1 2 4 7\n3 1 1 6\n3 4 7 10\n2 4 3 5\n4 2 8 9\nSample Output:\n5\n\ndef",
      "answer": "def find_badges(n, l, b, s, d):\n    if n == 1:\n        return [s, d]\n    if n == 2:\n        return [s, d, l]\n    if n == 3:\n        return [s, d, l, b]\n    if n == 4:\n        return [s, d, l, b, s, d, l, b]\n    if n == 5:\n        return [s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b, s, d, l, b,",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3526,
      "prompt": "Complete the Python function given the prompt below:\nBob is completing a true/false worksheet, consisting of a list of $n$ problems where each answer is either \u201ctrue\u201d or \u201cfalse\u201d. The problems are numbered from $1$ to $n$. They are too hard for Bob, so the TA, Alice, has given Bob $m$ hints. For each hint $i$, Alice gives Bob an (inclusive) range of questions $[l_ i, r_ i]$, and tells him either \u201call answers in the range are the same\u201d (in other words, either all are \u201ctrue\u201d, or all are \u201cfalse\u201d); or \u201cnot all of the answers in the range are the same.\u201d Help Bob count how many different answer sequences satisfy the given hints. Since this number may be huge, print the answer modulo $10^9+7$.\n-----Input-----\nThe first line of the input contains two space-separated integers $n$ and $m$ $(1 \\le n \\le 5000, 1 \\le m \\le 1000000)$, the number of problems and number of hints, respectively. The next $m$ lines each encode a hint, and contain two space-separated integers $l_ i$ and $r_ i$ $(1\\leq l_ i \\leq r_ i\\leq n)$ followed by either the word same, if all answers in the range are the same, or different, if all answers in the range are not the same (i.e., at least one answer is \u201ctrue\u201d and at least one other answer is \u201cfalse\u201d).\n-----Output-----\nPrint the number of different answer sequences satisfying all the hints, modulo $10^9+7$.\n-----Sample Explanation-----\nIn the first sample, the four possible sequences consistent with the hints are 00000, 10000, 01111, and 11111 where 0 stands for a \u201cfalse\u201d answer and 1 stands for a \u201ctrue\u201d answer. In the second sample, the third hint conflicts with the first two hints, so no answer sequence exists consistent with all hints.\n-----Examples-----\nSample Input:\n5 2\n2 4 same\n3 5 same\nSample Output:\n4\n\ndef",
      "answer": "def solve(n,m,l,r):\n    if n==0 or m==0:\n        return 0\n    if l==r:\n        return 1\n    if l>r:\n        return 0\n    return solve(n-1,m,l,r-1)+solve(n-1,m,l,r-1)\n\n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3527,
      "prompt": "Complete the Python function given the prompt below:\nOne day your boss explains to you that he has a bunch of computer networks that are currently unreachable from each other, and he asks you, the cable expert\u2019s assistant, to adjoin the networks to each other using new cables. Existing cables in the network cannot be touched.\nHe has asked you to use as few cables as possible, but the length of the cables used does not matter to him, since the cables are optical and the connectors are the expensive parts. Your boss is rather picky on cable usage, so you know that the already existing networks have as few cables as possible.\nDue to your humongous knowledge of computer networks, you are of course aware that the latency for an information packet travelling across the network is proportional to the number of hops the packet needs, where a hop is a traversal along a single cable. And since you believe a good solution to your boss\u2019 problem may earn you that long wanted promotion, you decide to minimise the maximum number of hops needed between any pair of network nodes.\n-----Input-----\nOn the first line, you are given two positive integers, the number\u00a0$1 \\leq c \\leq 10^5$ of computers and the number\u00a0$0 \\leq \\ell \\leq c-1$ of existing cables. Then follow\u00a0$\\ell $ lines, each line consisting of two distinct integers\u00a0$a$ and\u00a0$b$, the two computers the cables connect. You may assume that every computer has a unique name between\u00a0$0$ and\u00a0$c-1$.\n-----Output-----\nThe maximum number of hops in the resulting network.\n-----Examples-----\nSample Input:\n6 4\n0 1\n0 2\n3 4\n3 5\nSample Output:\n3\n\ndef",
      "answer": "def cable_expert(c, n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return cable_expert(c, n-1) + cable_expert(c, n-2)\n\n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3528,
      "prompt": "Complete the Python function given the prompt below:\nMirko found a wooden board and $N$ nails in his attic. Mirko hammered the nails into the board as fast as possible. The board can be modeled by a coordinate plane and the nails as points in it. No two nails have the same $x$- or the same $y$-coordinate.\nIn order to keep having fun, Mirko stole his sister\u2019s elastic hair band, spread it over all nails and then let go. The elastic, naturally, tightened around the nails.\nMirko then repeats these steps while there are at least three nails in the board:\n - Write down the area of the shape enclosed by the hair band.\n - Picks the leftmost, rightmost, topmost or bottommost nail in the board.\n - Remove the chosen nail from the board; the elastic tightens again around the remaining nails.\nWrite a program that calculates the numbers written in step 1 of each iteration, if we know the nail Mirko picks in step 2 of each iteration.\n-----Input-----\nThe first line contains the integer $N$ $(3 \\leq N \\leq 300000)$, the number of nails.\nEach of the following $N$ lines contains two integers separated by a space, the coordinates of a nail. All coordinates will be between 1 and $1000000000$. No two nails will share the same $x$- or $y$-coordinate. The next line contains $N-2$ letters \u2019L\u2019, \u2019R\u2019, \u2019U\u2019 or \u2019D\u2019. The letters represent the nails Mirko picked in order:\n - \u2019L\u2019 for the leftmost nail (smallest $x$-coordinate),\n - \u2019R\u2019 for the rightmost nail (largest $x$-coordinate),\n - \u2019U\u2019 for the topmost nail (largest $y$-coordinate),\n - \u2019D\u2019 for the bottommost nail (smallest $y$-coordinate).\n-----Output-----\nOutput $N-2$ numbers, each on a separate line. The numbers are, in order, the areas that Mirko wrote down. Output numbers with one digit after the decimal point.\n-----Examples-----\nSample Input:\n5\n1 4\n2 2\n4 1\n3 5\n5 3\nLUR\nSample Output:\n9.0\n6.5\n2.5\n\ndef",
      "answer": "def mirror(n):\n    if n == 0:\n        return 0\n    else:\n        return n * mirror(n - 1)\n\n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3529,
      "prompt": "Complete the Python function given the prompt below:\nGiven an undirected, unweighted, connected graph, where each edge is colored either blue or red, determine whether a spanning tree with exactly $k$ blue edges exists.\n-----Input-----\nThere will be a single test case in the input. Each test case will begin with a line with three integers:\n$n \\ m \\ k$\nWhere $n$ ($2 \\le n \\le 1000$) is the number of nodes in the graph, $m$ (limited by the structure of the graph) is the number of edges in the graph, and $k$ ($0 \\le k < n$) is the number of blue edges desired in the spanning tree. Each of the next $m$ lines will contain three elements, describing the edges:\n$c \\ f \\ t$\nWhere $c$ is a character, either capital R or capital B, indicating the color of the edge, and $f$ and $t$ are integers ($1 \\le f, t \\le n, t \\ne f$) indicating the nodes that edge goes from and to. The graph is guaranteed to be connected, and there is guaranteed to be at most one edge between any pair of nodes.\n-----Output-----\nOutput a single line, containing $1$ if it is possible to build a spanning tree with exactly $k$ blue edges, and $0$ if it is not possible.\n-----Examples-----\nSample Input:\n3 3 2\nB 1 2\nB 2 3\nR 3 1\nSample Output:\n1\n\ndef",
      "answer": "def spanningTree(n, m, k):\n    if n == 0 or m == 0:\n        return 0\n    if n == 1:\n        return 1\n    if m == 1:\n        return 1\n    if k == 0:\n        return 1\n    if k == 1:\n        return 1\n    if n == 2:\n        return 1\n    if m == 2:\n        return 1\n    if n == 3:\n        return 1\n    if m == 3:\n        return 1\n    if n == 4:\n        return 1\n    if m == 4:\n        return 1\n    if n == 5:\n        return 1\n    if m == 5:\n        return 1\n    if n == 6:\n        return 1\n    if m == 6:\n        return 1\n    if n == 7:\n        return 1\n    if m == 7:\n        return 1\n    if n == 8:\n        return 1\n    if m == 8:\n        return 1\n    if n == 9:\n        return 1\n    if m == 9:\n        return 1\n    if n == 10:\n        return 1\n    if m == 10:\n        return 1\n    if n == 11:\n        return 1\n    if m == 11:\n        return 1\n    if n == 12:\n        return 1\n    if m == 12:\n        return 1\n    if n == 13:\n        return 1\n    if m == 13:\n        return 1\n    if n == 14:\n        return 1\n    if m == 14:\n        return 1\n    if n == 15:\n        return 1\n    if m == 15:\n        return 1\n    if n == 16:\n        return 1\n    if m == 16:\n        return 1\n    if n == 17:\n        return 1\n    if m == 17:\n        return 1\n    if n == 18:\n        return 1\n    if m == 18:\n        return 1\n    if n == 19:\n        return 1\n    if m == 19:\n        return 1\n    if n == 20:\n        return 1\n    if m == 20:\n        return 1\n    if n == 21:\n        return 1\n    if m == 21:\n        return 1\n    if n == 22:\n        return 1\n    if m == 22:\n        return 1\n    if n == 23:\n        return 1\n    if m == 23:\n        return 1\n    if n == 24:\n        return 1\n    if m == 24:\n        return 1\n    if n == 25:\n        return 1\n    if m == 25:\n        return 1\n    if n == 26:\n        return 1\n    if m == 26:\n        return 1\n    if n == 27:\n        return 1\n    if m == 27:\n        return 1\n    if n == 28:\n        return 1\n    if m == 28:\n        return 1\n    if n == 29:\n        return 1\n    if m == 29:\n        return 1\n    if n == 30:\n        return 1\n    if m == 30:\n        return 1\n    if n == 31:\n        return 1\n    if m == 31:\n        return 1\n    if n == 32:\n        return 1\n    if m == 32:\n        return 1\n    if n == 33:\n        return 1\n    if m == 33:\n        return 1\n    if n == 34:\n        return 1\n    if m == 34:\n        return 1\n    if n == 35:\n        return 1\n    if m == 35:\n        return 1\n    if n == 36:\n        return 1\n    if m == 36:\n        return 1\n    if n == 37:\n        return 1\n    if m == 37:\n        return 1\n    if n == 38:\n        return 1\n    if m == 38:\n        return 1\n    if n == 39:\n        return 1\n    if m == 39:\n        return 1\n    if n == 40:\n        return 1\n    if m == 40:\n        return 1\n    if n == 41:\n        return 1\n    if m == 41:\n        return 1\n    if n == 42:\n        return 1\n    if m == 42:\n        return 1\n    if n == 43:\n        return 1\n    if m == 43:\n        return 1\n    if n == 44:\n        return 1\n    if m == 44:\n        return 1\n    if n == 45:\n        return",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3530,
      "prompt": "Complete the Python function given the prompt below:\nJimmy and his friends like to visit large theme parks. In the current theme park there are many roller coasters which then are categorized by Jimmy. He assigns a fun value to each coaster; however, the fun decreases with each run.\nMore formally: for a specific roller coaster $i$, Jimmy assigns two fun coefficients $a_ i$ and $b_ i$. While riding this roller coaster for the $k$-th time, Jimmy gains a fun value of $f(i,k) = a_ i - (k-1)^2 \\cdot b_ i$. If $f(i,k)$ is non-positive, riding the roller coaster is no longer fun.\nJimmy tries to maximize the total fun until he leaves the park. Can you tell Jimmy how much fun he can gain for a given time?\n-----Input-----\nThe input consists of a single test case.\nThe first line contains the integer $N$, where $N$ is the amount of different roller coasters in the theme park ($0< N\\le 100$).\nThe following $N$ lines contain the integers $a_ i$, $b_ i$ and $t_ i$ where $a_ i$ and $b_ i$ are the fun coefficients as specified above and $t_ i$ is the time for a single ride with the $i$-th roller coaster ($0\\le a_ i \\le 1000$; $0\\le b_ i \\le 1000$; $0 < t_ i \\le 25000$).\nThe next line contains a positive integer $Q$ denoting the number of times that Jimmy is visiting the park ($0\\le Q \\le 1000$). Each of the following $Q$ lines contains an integral time $T_ i$ that Jimmy spends during his $i$-th visit ($0\\le T_ i \\le 25000$).\n-----Output-----\nFor each of the $Q$ possible times, print one line containing the maximal total fun value if Jimmy spends $T_ i$ minutes in the theme park.\n-----Examples-----\nSample Input:\n2\n5 0 5\n7 0 7\n4\n88\n5\n6\n7\nSample Output:\n88\n5\n5\n7\n\ndef",
      "answer": "def fun(a,b,t):\n    return a*(t**2) + b*t\n\n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3531,
      "prompt": "Complete the Python function given the prompt below:\nYour state has just purchased a large, unspoiled tract of land, and wishes to turn it into a nature park with hiking trails. The land has $n$ places of interest to which guests may wish to hike, and of these, $k$ are very special. The state wishes to connect these places with hiking trails. There are $m$ candidate hiking trails to choose from that directly connect two places of interest with various costs. There are some constraints for choosing the trails. First, there must be exactly one way to hike from any place to any other place. Second, exactly $w$ of the trails must directly connect a special place with a regular place. Of course, the state wishes to minimize the cost of blazing these trails.\n-----Input-----\nEach input will consist of a single test case. Note that your program may be run multiple times on different inputs. The first line of input will contain four integers $n$, $m$, $k$ and $w$, where $n$ ($2 \\le n \\le 2 \\cdot 10^5$) is the number of places, $m$ ($1 \\le m \\le 5 \\cdot 10^5$) is the number of potential direct trails between places, $k$ ($1 \\le k < n$) is the number of special places, and $w$ ($1 \\le w \\le n-1$) is the number of special-nonspecial direct trails the state wishes to blaze. The places are numbered $1$ to $n$.\nEach of the next $k$ lines holds a single integer $s$ ($1 \\le s \\le n$) indicating the special places. These values will be unique and will be in ascending order.\nEach of the next $m$ lines will describe a potential trail that the state could blaze. Each of these lines will consist of three integers, $a$, $b$ and $c$, where the trail would go between places $a$ and $b$ ($1 \\le a,b \\le n, a \\ne b$) and would cost $c$ ($1 \\le c \\le 10^5$). No two places will have more than one potential trail between them, and a trail from $a$ to $b$ is the same as a trail from $b$ to $a$.\n-----Output-----\nOutput a single integer, which is the minimum total cost for the state to blaze trails in their new park subject to their constraints, or $-1$ if it isn\u2019t possible.\n-----Examples-----\nSample Input:\n3 3 1 2\n2\n1 2 2\n1 3 1\n2 3 3\nSample Output:\n5\n\ndef",
      "answer": "def hiking_trails(n, m, k, w):\n    if n == 1 or m == 1 or k == 1 or w == 1:\n        return 0\n    if n == 2 or m == 2 or k == 2 or w == 2:\n        return 1\n    if n == 3 or m == 3 or k == 3 or w == 3:\n        return 2\n    if n == 4 or m == 4 or k == 4 or w == 4:\n        return 3\n    if n == 5 or m == 5 or k == 5 or w == 5:\n        return 4\n    if n == 6 or m == 6 or k == 6 or w == 6:\n        return 5\n    if n == 7 or m == 7 or k == 7 or w == 7:\n        return 6\n    if n == 8 or m == 8 or k == 8 or w == 8:\n        return 7\n    if n == 9 or m == 9 or k == 9 or w == 9:\n        return 8\n    if n == 10 or m == 10 or k == 10 or w == 10:\n        return 9\n    if n == 11 or m == 11 or k == 11 or w == 11:\n        return 10\n    if n == 12 or m == 12 or k == 12 or w == 12:\n        return 11\n    if n == 13 or m == 13 or k == 13 or w == 13:\n        return 12\n    if n == 14 or m == 14 or k == 14 or w == 14:\n        return 13\n    if n == 15 or m == 15 or k == 15 or w == 15:\n        return 14\n    if n == 16 or m == 16 or k == 16 or w == 16:\n        return 15\n    if n == 17 or m == 17 or k == 17 or w == 17:\n        return 16\n    if n == 18 or m == 18 or k == 18 or w == 18:\n        return 17\n    if n == 19 or m == 19 or k == 19 or w == 19:\n        return 18\n    if n == 20 or m == 20 or k == 20 or w == 20:\n        return 19\n    if n == 21 or m == 21 or k == 21 or w == 21:\n        return 20\n    if n == 22 or m == 22 or k == 22 or w == 22:\n        return 21\n    if n == 23 or m == 23 or k == 23 or w == 23:\n        return 22\n    if n == 24 or m == 24 or k == 24 or w == 24:\n        return 23\n    if n == 25 or m == 25 or k == 25 or w == 25:\n        return 24\n    if n == 26 or m == 26 or k == 26 or w == 26:\n        return 25\n    if n == 27 or m == 27 or k == 27 or w == 27:\n        return 26\n    if n == 28 or m == 28 or k == 28 or w == 28:\n        return 27\n    if n == 29 or m == 29 or k == 29 or w == 29:\n        return 28\n    if n == 30 or m == 30 or k == 30 or w == 30:\n        return 29\n    if n == 31 or m == 31 or k == 31 or w == 31:\n        return 30\n    if n == 32 or m == 32 or k == 32 or w == 32:\n        return 31\n    if n == 33 or m == 33 or k == 33 or w == 33:\n        return 32\n    if n == 34 or m == 34 or k == 34 or w == 34:\n        return 33\n    if n == 35 or m == 35 or k == 35 or w == 35:\n        return 34\n    if n == 36 or m == 36 or k == 36 or w == 36:\n        return 35\n    if n == 37 or m == 37 or k == 37 or w == 37:\n        return 36\n    if n == 38 or m == 38 or k == 38 or w == 38:\n        return 37\n    if n == 39 or m == 39 or k == 39 or w == 39:\n        return 38\n    if n == 40 or m == 40 or k == 40 or w == 40:\n        return 39\n    if n == 41 or m == 41 or k == 41 or w == 41:\n        return 40\n    if n == 42 or m == 42 or k == 42 or w == 42:\n        return 41\n    if n == 43 or m == 43 or k == 43 or w == 43:\n        return 42\n    if n == 44 or m == 44 or k == 44 or w == 44:\n        ",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3532,
      "prompt": "Complete the Python function given the prompt below:\nMirko likes to play with strings of characters, but this time he has taken it too far \u2013 he put an \u201cexplosion\u201d in the string! An explosion is a series of characters which, if found in the vicinity of fire, explodes and starts a chain reaction.\nMirko, being as negligent as he usually is, forgot that his string contained an explosion and placed it near a candlelight. Thus the chain reaction began.\nThe chain reaction takes place in the following way:\n - if a string contains explosions, they all explode and a new string is formed by concatenating the pieces without the exploding parts\n - this concatenation could possibly create new explosions\n - the chain reaction repeats while there are explosions in the string\nNow Mirko wants to know whether anything will be left after this series of chain reactions. If nothing remains, output \u201cFRULA\u201d (without quotes). If, by any chance, something is left, output the final string remaining after all the reactions.\nPlease note: The explosion will not contain two equal characters.\n-----Input-----\nThe first line of input contains Mirko\u2019s string, ($1 \\leq |\\text {Mirko\u2019s string}| \\leq 1\\ 000\\ 000$).\nThe second line of input contains the explosion string, ($1 \\leq |\\text {explosion}| \\leq 36$).\nBoth Mirko\u2019s string and the explosion string consist of uppercase and lowercase letters of the English alphabet and digits 0, 1, \u2026, 9. The characters in the explosion string are all different.\n-----Output-----\nThe first and only line of output must contain the final string remaining after all the reactions as stated in the task.\nClarification of the second example: Firstly, the bombs on positions $1$ and $6$ explode. Then we are left with ****1****2ab (where * marks the character that exploded) and when that string is put together, we get 12ab. Sadly, that is an explosion all over again so it disappears.\n-----Examples-----\nSample Input:\nmirkovC4nizCC44\nC4\nSample Output:\nmirkovniz\n\ndef",
      "answer": "def explosion(string):\n    if len(string) == 0:\n        return \"FRULA\"\n    else:\n        return string[0] + explosion(string[1:])\n\n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3533,
      "prompt": "Complete the Python function given the prompt below:\nIn a single day, $N$ of Luka\u2019s trucks travel a specific highway. The highway has a number of exits and entrances. An exit with a particular number is in the same location as the entrance with that number.\nUpon entering the highway, a truck driver receives a ticket which indicates the entrance he used. When exiting, the driver pays a toll equal to the absolute difference of the entrance and exit numbers. For example, if a ticket says he used entrance $30$, then exiting at exit $12$ will cost him $18$.\nLuka has figured out a way to save toll money that his company daily spends. Any two drivers can meet on the highway and exchange tickets, even if their routes don\u2019t overlap. Tickets can be exchanged an arbitrary number of times.\nHowever, a driver cannot use an exit if his ticket says he used the same entrance, since that would be suspicious.\nWrite a program that calculates the least total amount of tolls that the drivers can achieve by exchanging tickets.\n-----Input-----\nThe first line contains the integer $N$ $(1 \\leq N \\leq 100000)$, the number of trucks. Each of the following $N$ lines contains two distinct integers between $1$ and $1000000000$. These are in order the entrance and exit numbers of one truck.\nNo two trucks will use the same highway entrance or the same exit.\n-----Output-----\nOutput the least total amount of tolls Luka\u2019s company must pay.\n-----Examples-----\nSample Input:\n3\n3 65\n45 10\n60 25\nSample Output:\n32\n\ndef",
      "answer": "def tolls(n):\n    if n == 1:\n        return 0\n    else:\n        return tolls(n-1) + tolls(n-2)\n\n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3534,
      "prompt": "Complete the Python function given the prompt below:\nYoung Mirka is an amateur musician. She plays the multi-piano. $A$ multi-piano consists of an infinite number of multi-keys, denoted with integers that can be interpreted as the pitch. $A$ multi-composition (a composition written for a multi-piano) can be represented with a finite array of integers, where integers denote the order of multi-keys to press in order to play the multi-composition.\nYoung Mirka has heard a multi-composition on the multi-radio and now she wants to play it. Unfortunately, she cannot hear exactly which key was pressed, but instead she can hear whether the pressed multi-key was higher, lower or equal to the previously played key (a higher key is denoted with a larger number). Therefore she has decided to play the composition in the following way:\n - before playing, she will choose one non-negative integer $K$\n - in the beginning, she will play the correct multi-key (her multi-teacher told her which multi-key that is)\n - when she hears that the multi-key played in the multi-composition is higher than the previous multi-key played in the multi-composition, she will play the multi-key denoted with the integer larger than the multi-key she played previously by $K$\n - analogously, when she hears that the multi-key played in the multi-composition is lower than the previous multi-key played in the multi-composition, she will play the multi-key denoted with the integer smaller than the multi-key she played previously by $K$\n - when she hears that the multi-key played in the multi-composition is equal to the previous multi-key played in the multi-composition, she will repeat the multi-key she played previously\nNotice that, when Mirka is playing, she does not compare the pitch of the keys she played to the pitch of the keys from the composition.\nHelp Mirka choose the integer $K$ in order to hit as many correct pitches as possible.\n-----Input-----\nThe first line of input contains the integer $N$ ($2 \\leq N \\leq 10^6$), the number of multi-keys in the multi- composition on the multi-radio.\nThe second line of input contains $N$ integers $a_ i$ ($-10^9 \\leq a_ i \\leq 10^9$), the multi-keys played in the multi-composition.\n-----Output-----\nThe first line of output must contain the maximum number of multi-keys that Mirka can play correctly. The second line of output must contain the non-negative number $K$ that Mirka must choose in order to hit as many correct pitches as possible. The number must be smaller than or equal to $2 \\cdot 10^9$. The required number does not have to be unique, but will surely exist within the given constraints.\n-----Examples-----\nSample Input:\n5\n1 2 0 3 1\nSample Output:\n3\n2\n\ndef",
      "answer": "def play_multi_key(a_i):\n    if a_i >= 10**9:\n        return 0\n    else:\n        return a_i\n\n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3535,
      "prompt": "Complete the Python function given the prompt below:\nMatthew the physicist studies the quantum electro-dynamics of a silicon-based rectangular microchip. The microchip consists of a very large $N \\times M$ grid of electrons. Each electron has either positive (up) or negative (down) spin, denoted by $+$ and $-$ respectively.\nMatthew does not know the spin of all the electrons, but he has done $K$ measurements. In the $i$-th measurement, he discovered that the electron at position $(y_ i, x_ i)$ has a given spin $s_ i$. He also knows that in each $2\\times 2$ subgrid, there are equally many electrons with positive and negative spin. He wants to know whether he can recover the state of every electron based on his measurements. If not, he would like to know how many possible states are consistent with his measurements. For classified reasons, he wants the answer modulo $10^9 + 7$.\n-----Input-----\nThe first line contain three numbers $N$, $M$ and $K$: the height of the grid, the width of the grid and the number of measurements. The next $K$ lines contain a spin $s_ i$ where $s_ i$ is either $+$ or $-$, and two numbers $1 \\leq y_ i \\leq N$ and $1 \\leq x_ i \\leq M$ \u2013 the coordinates of the electron. Matthew never did two measurments at the exact same location.\nWe always have $1 \\leq N, M \\leq 10^9$ and $0 \\leq K \\leq 100000$.\n-----Output-----\nOutput the total number of valid states consistent with Matthew\u2019 measurements modulo $10^9 + 7$.\n-----Examples-----\nSample Input:\n2 4 4\n+ 1 1\n- 1 2\n+ 1 3\n- 1 4\nSample Output:\n2\n\ndef",
      "answer": "def get_valid_states(N, M, K):\n    if N == 1:\n        return K\n    if M == 1:\n        return K\n    if N == M:\n        return K\n    if N == 2:\n        return K\n    if M == 2:\n        return K\n    if N == 3:\n        return K\n    if M == 3:\n        return K\n    if N == 4:\n        return K\n    if M == 4:\n        return K\n    if N == 5:\n        return K\n    if M == 5:\n        return K\n    if N == 6:\n        return K\n    if M == 6:\n        return K\n    if N == 7:\n        return K\n    if M == 7:\n        return K\n    if N == 8:\n        return K\n    if M == 8:\n        return K\n    if N == 9:\n        return K\n    if M == 9:\n        return K\n    if N == 10:\n        return K\n    if M == 10:\n        return K\n    if N == 11:\n        return K\n    if M == 11:\n        return K\n    if N == 12:\n        return K\n    if M == 12:\n        return K\n    if N == 13:\n        return K\n    if M == 13:\n        return K\n    if N == 14:\n        return K\n    if M == 14:\n        return K\n    if N == 15:\n        return K\n    if M == 15:\n        return K\n    if N == 16:\n        return K\n    if M == 16:\n        return K\n    if N == 17:\n        return K\n    if M == 17:\n        return K\n    if N == 18:\n        return K\n    if M == 18:\n        return K\n    if N == 19:\n        return K\n    if M == 19:\n        return K\n    if N == 20:\n        return K\n    if M == 20:\n        return K\n    if N == 21:\n        return K\n    if M == 21:\n        return K\n    if N == 22:\n        return K\n    if M == 22:\n        return K\n    if N == 23:\n        return K\n    if M == 23:\n        return K\n    if N == 24:\n        return K\n    if M == 24:\n        return K\n    if N == 25:\n        return K\n    if M == 25:\n        return K\n    if N == 26:\n        return K\n    if M == 26:\n        return K\n    if N == 27:\n        return K\n    if M == 27:\n        return K\n    if N == 28:\n        return K\n    if M == 28:\n        return K\n    if N == 29:\n        return K\n    if M == 29:\n        return K\n    if N == 30:\n        return K\n    if M == 30:\n        return K\n    if N == 31:\n        return K\n    if M == 31:\n        return K\n    if N == 32:\n        return K\n    if M == 32:\n        return K\n    if N == 33:\n        return K\n    if M == 33:\n        return K\n    if N == 34:\n        return K\n    if M == 34:\n        return K\n    if N == 35:\n        return K\n    if M == 35:\n        return K\n    if N == 36:\n        return K\n    if M == 36:\n        return K\n    if N == 37:\n        return K\n    if M == 37:\n        return K\n    if N == 38:\n        return K\n    if M == 38:\n        return K\n    if N == 39:\n        return K\n    if M == 39:\n        return K\n    if N == 40:\n        return K\n    if M == 40:\n        return K\n    if N == 41:\n        return K\n    if M == 41:\n        return K\n    if N == 42:\n        return K\n    if M == 42:\n        return K\n    if N == 43:\n        return K\n    if M == 43:\n        return K\n    if N == 44:\n        return K\n    if M == 44:\n        return K\n    if N == 45:\n        return K\n    if M == 45:\n        return K\n    if N == 46:\n        return K",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3536,
      "prompt": "Complete the Python function given the prompt below:\nConsider a rooted tree with $n$ nodes, numbered $1..n$. Each node will have a fixed integer $b$, and for each, a uniform random real number is chosen in the interval $[0..b]$.\nWhat is the probability that the random numbers chosen cause the tree to form a Heap (i.e., the random value in each node is less than the random values in its children)?\nThis probability can always be expressed as a rational number $\\frac{P}{Q}$, with $Q{\\not\\equiv }0 \\pmod{10^9{+}7}$. You are to output the probability as $P{\\cdot }Q^{-1} \\bmod {10^9{+}7}$, where $Q^{-1}$ is an integer, which is the multiplicative inverse of $Q$ modulo $10^9{+}7$ ($Q\\! \\cdot \\! Q^{-1}\\! \\equiv \\! 1 \\pmod{10^9{+}7}$). (Note: $P{\\cdot }Q^{-1}\\bmod {10^9{+}7}$ does not depend on whether $P$ and $Q$ are relatively prime, only on their ratio $\\frac{P}{Q}$.)\n-----Input-----\nEach test case will begin with a line with a single integer $n$ ($1\\! \\le \\! n\\! \\le \\! 300$), which is the number of nodes in the tree.\nEach of the next $n$ lines will contain a pair of space-separated integers $b$ ($1\\! \\le \\! b\\! \\le \\! 10^9$) and $p$ ($0\\! \\le \\! p\\! \\le \\! n$) describing a node of the tree, where $b$ is the fixed integer value in the node and $p$ is the node number of its parent. The nodes are listed in order; node $1$ is first, then node $2$, and so on. A single node will have a parent $p{=}0$. This is the root of the tree.\n-----Output-----\nOutput a single integer, which is the probability expressed as $(P{\\cdot }Q^{-1}) \\bmod ({10^9{+}7})$.\n-----Examples-----\nSample Input:\n2\n1000000000 0\n1000000000 1\nSample Output:\n500000004\n\ndef",
      "answer": "def Heapify(arr, n, p):\n    if p == 0:\n        return\n    l = 2 * p + 1\n    r = 2 * p + 2\n    if l < n and arr[l] < arr[p]:\n        small = l\n    else:\n        small = p\n    if r < n and arr[r] < arr[small]:\n        small = r\n    if small!= p:\n        arr[p], arr[small] = arr[small], arr[p]\n        Heapify(arr, n, small)\n\n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3537,
      "prompt": "Complete the Python function given the prompt below:\nDavid is looking to book some travel over the world. There are $n$ countries that he can visit, and $m$ flights that are available. The $i$th flight goes from country $a_ i$ to country $b_ i$. It departs at time $s_ i$, and lands at time $e_ i$. \nDavid is currently at the airport in country $1$, and the current time is $0$, and he would like to travel country $n$. He does not care about the total amount of time needed to travel, but he really hates waiting in the airport. If he waits $t$ seconds in an airport, he gains $t^2$ units of frustration. Help him find an itinerary that minimizes the sum of frustration.\n-----Input-----\nThe first line of input contains two space-separated integers $n$ and $m$ ($1 \\le n,m \\le 200000$).\nEach of the next $m$ lines contains four space-separated integers $a_ i$, $b_ i$, $s_ i$, and $e_ i$ ($1 \\le a_ i, b_ i \\le n$; $0 \\le s_ i \\le e_ i \\le 10^6$).\nA flight might have the same departure and arrival country.\nNo two flights will have the same arrival time, or have the same departure time. In addition, no flight will have the same arrival time as the departure time of another flight. Finally, it is guaranteed that there will always be a way for David to arrive at his destination.\n-----Output-----\nPrint, on a single line, the minimum sum of frustration.\n-----Examples-----\nIn the first sample, it is optimal to take this sequence of flights:\n - Flight $5$. Goes from airport $1$ to airport $2$, departing at time $3$, arriving at time $8$.\n - Flight $3$. Goes from airport $2$ to airport $1$, departing at time $9$, arriving at time $12$.\n - Flight $7$. Goes from airport $1$ to airport $3$, departing at time $13$, arriving at time $27$.\n - Flight $8$. Goes from airport $3$ to airport $5$, deparing at time $28$, arriving at time $100$.\nThe frustration for each flight is $3^2, 1^2, 1^2,$ and $1^2$, respectively. Thus, the total frustration is $12$.\nNote that there is an itinerary that gets David to his destination faster. However, that itinerary has a higher total frustration.\n-----Examples-----\nSample Input:\n5 8\n1 2 1 10\n2 4 11 16\n2 1 9 12\n3 5 28 100\n1 2 3 8\n4 3 20 21\n1 3 13 27\n3 5 23 24\nSample Output:\n12\n\ndef",
      "answer": "def min_frustration(n,m,a,b,s,e):\n    if n==0 or m==0:\n        return 0\n    if a==b:\n        return 1\n    if s==e:\n        return 1\n    if s<=a and a<=b:\n        return min_frustration(n-1,m,a,b,s,e) + min_frustration(n-1,m,a,b,s,e)\n    if s<=a and a<=b:\n        return min_frustration(n-1,m,a,b,s,e) + min_frustration(n-1,m,a,b,s,e) + 1\n    if s<=a and a<=b:\n        return min_frustration(n-1,m,a,b,s,e) + min_frustration(n-1,m,a,b,s,e) + 1 + 1\n    if s<=a and a<=b:\n        return min_frustration(n-1,m,a,b,s,e) + min_frustration(n-1,m,a,b,s,e) + 1 + 1 + 1\n    if s<=a and a<=b:\n        return min_frustration(n-1,m,a,b,s,e) + min_frustration(n-1,m,a,b,s,e) + 1 + 1 + 1 + 1\n    if s<=a and a<=b:\n        return min_frustration(n-1,m,a,b,s,e) + min_frustration(n-1,m,a,b,s,e) + 1 + 1 + 1 + 1 + 1\n    if s<=a and a<=b:\n        return min_frustration(n-1,m,a,b,s,e) + min_frustration(n-1,m,a,b,s,e) + 1 + 1 + 1 + 1 + 1 + 1\n    if s<=a and a<=b:\n        return min_frustration(n-1,m,a,b,s,e) + min_frustration(n-1,m,a,b,s,e) + 1 + 1 + 1 + 1 + 1 + 1 + 1\n    if s<=a and a<=b:\n        return min_frustration(n-1,m,a,b,s,e) + min_frustration(n-1,m,a,b,s,e) + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1\n    if s<=a and a<=b:\n        return min_frustration(n-1,m,a,b,s,e) + min_frustration(n-1,m,a,b,s,e) + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1\n    if s<=a and a<=b:\n        return min_frustration(n-1,m,a,b,s,e) + min_frustration(n-1,m,a,b,s,e) + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1\n    if s<=a and a<=b:\n        return min_frustration(n-1,m,a,b,s,e) + min_frustration(n-1,m,a,b,s,e) + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1\n    if s<=a and a<=b:\n        return min_frustration(n-1,m,a,b,s,e) + min_frustration(n-1,m,a,b,s,e) + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1\n    if s<=a and a<=b:\n        return min_frustration(n-1,m,a,b,s,e) + min_frustration(n-1,m,a,b,s,e) + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1\n    if s<=a and a<=b:\n        return min_",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3538,
      "prompt": "Complete the Python function given the prompt below:\nA set of frogs have accidentally fallen to the bottom of a large pit. Their only means of escaping the pit is to jump out of it. Each frog $i$ is described by three parameters $(l_ i,w_ i,h_ i)$ where $l_ i$ is its leap capacity, $w_ i$ its weight, and $h_ i$ its height. The leap capacity specifies how high that frog can jump. If a frog\u2019s leap capacity is strictly larger than the depth of the pit, the frog can directly escape the pit. However, these frogs are altruistic. Rather than selfishly saving themselves and leaving the frogs with too limited leap capacity behind, they collectively aim to save as many of them from the pit as possible. \nThe frogs realize that if a frog $A$ climbs up on the back of frog $B$ before it jumps, the first frog $A$ stands a better chance of escaping the pit: it can escape if $h_ B+l_ A$ is strictly larger than the depth of the pit.\nFurthermore, if frog $B$ carrying frog $A$ on its back climbs up on the back of frog $C$, the situation is even better for frog $A$: it can now escape the pit if $h_ C+h_ B+l_ A$ is strictly larger than the depth of the pit.\nThe frogs can build even higher piles of frogs this way, the only restriction is that no frog may carry other frogs of weight in total amounting to its own weight or heavier. Once a pile has been used to allow a frog to escape, the frogs in the pile jump back to the bottom of the pit and they can then form a new pile (possibly consisting of a different set of frogs). The question is simply how many frogs can escape the pit assuming they collaborate to maximize this number?\n-----Input-----\nThe first line of input contains two integers $n$ and $d$ ($1 \\le n \\leq 100000$, $1 \\le d \\le 10^8$), where $n$ is the number of frogs and $d$ is the depth of the pit in \u00b5m. Then follow $n$ lines each containing three integers $l, w, h$ ($1 \\le l, w, h \\le 10^8$), representing a frog with leap capacity $l$ \u00b5m, weight $w$ \u00b5g, and height $h$ \u00b5m. The sum of all frogs\u2019 weights is at most $10^8$ \u00b5g.\n-----Output-----\nOutput the maximum number of frogs that can escape the pit.\n-----Examples-----\nSample Input:\n3 19\n15 5 3\n12 4 4\n20 10 5\nSample Output:\n3\n\ndef",
      "answer": "def frog_escape(l, w, h):\n    if l > h:\n        return 0\n    elif l == h:\n        return w\n    elif l > h:\n        return w + frog_escape(l, w, h - l)\n    else:\n        return w + frog_escape(l, w, h - l) + frog_escape(l, w, h)\n\n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3539,
      "prompt": "Complete the Python function given the prompt below:\nA Bipartite Graph is an undirected graph whose vertices can be partitioned into $2$ sets such that, for each edge $(u, v)$, $u$ and $v$ belong to different sets.\nSocket has challenged Bash to a Bipartite Battle. In the Bipartite Battle, Bash and Socket play a game with Bipartite Graphs.\nThe Bipartite Battle happens as follows:\n - Socket draws $N$ bipartite graphs. The $i$-th graph has $2$ sets of vertices, one with $a_ i$ vertices, and the other with $b_ i$ vertices.\n - Then the $2$ players, Bash and Socket alternatively take turns. In each turn, a player must choose exactly one non-empty graph, then delete exactly one edge or exactly one vertex of the chosen graph. If the player deletes one vertex, all edges adjacent to it are also deleted.\n - The player who cannot move loses. Note that this can only happen when all edges and all vertices of all graphs have been deleted.\n - Bash plays first.\nOf course, Socket does not want to play fair. Socket plans to draw bipartite graphs such that he always wins.\nHow many ways can Socket draw $N$ bipartite graphs, so that he always wins, assuming both players play optimally?\n-----Notes-----\nFor the $i$-th bipartite graph, let\u2019s number the vertices in first set from $1$ to $a_ i$, and the vertices in second set from $1$ to $b_ i$.\nAn edge connecting vertex $u$ in first set and vertex $v$ in second set is denoted as $(u, v)$.\nTwo drawings of bipartite graphs are considered different iff there exists an index $j$ and a pair of integers $(u, v)$, such that:\n - $(u, v)$ is an edge of $j$-th graph in one drawing.\n - $(u, v)$ is NOT an edge of $j$-th graph in the other drawing.\n-----Input-----\nThe first line of input contains the integer $N$ $(1 \\le N \\le 10^5)$.\n$N$ lines follow, each line contains exactly $2$ space-separated integers $a_ i$ and $b_ i$$(1 \\le a_ i, b_ i \\le 10^9)$.\n-----Output-----\nPrint exactly one integer \u2014 the number of ways Socket can draw $N$ bipartite graphs, modulo $10^9 + 7$.\n-----Examples-----\nSample Input:\n1\n1 1\nSample Output:\n1\n\ndef",
      "answer": "def draw_bipartite_graph(N):\n    # Write your code here.\n    pass\n\n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3540,
      "prompt": "Complete the Python function given the prompt below:\nYou are given a puzzle that can be represented as a $4 \\times 4$ grid of colored cells. The solved puzzle contains 4 monochromatic rows, in this order: red, green, blue, yellow. Although we will analyze this puzzle using its 2D representation, it is actually a 3D puzzle! Imagine that the grid is stretched over a torus (in other words, top edge is connected to the bottom one and left edge is connected to the right one). If you are not familiar with the word \u201ctorus\u201d or what it is supposed to represent, just replace it with the word(s) \u201cdonut (with the hole in the middle)\u201d.For each move you are allowed to either move one row left or right, or one column up or down. The fact that the outer edges are connected means that if a cell is \u201cpushed out\u201d of the grid, it will reappear on the other side of the grid. If you had a torus or a donut handy (or a cup! HAHAha...ha... <sniff>), this would be much clearer. \nGiven a description of a state of this puzzle, what is the minimum number of moves you need to solve it? Note that all possible puzzle configurations are solvable in less than 13 moves.\n-----Input-----\nInput file contains exactly $4$ lines, containing $4$ characters each, each character being either \u201cR\u201d, \u201cG\u201d, \u201cB\u201d or \u201cY\u2019. The input will describe a valid state of the puzzle.\n-----Output-----\nOutput the minimum number of moves needed to solve the given puzzle.\n-----Examples-----\nSample Input:\nRGGR\nGBGB\nBYBY\nYRYR\nSample Output:\n3\n\ndef",
      "answer": "def find_moves(grid):\n    moves = 0\n    for i in range(4):\n        for j in range(4):\n            if grid[i][j] == 'R':\n                moves += 1\n            elif grid[i][j] == 'G':\n                moves += 1\n            elif grid[i][j] == 'B':\n                moves += 1\n            elif grid[i][j] == 'Y':\n                moves += 1\n    return moves\n\n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3541,
      "prompt": "Complete the Python function given the prompt below:\nAlf and Beata were two kids who lived long ago, during the time before you could spend Halloween participating in programming competitions. As such, their lives were much more boring than the lives of kids today. How can you survive without programming competitions, you may ask yourself. The answer is easy: you go trick-or-treating!\nEvery year Alf and Beata went out in their neighbourhood to go trick-or-treating. When they trick-or-treat a house, they get some amount of candy of various sorts. Once the kids have filled up their big bag of candy, they go back home.\nSince Alf and Beata are very nice siblings, they want to split all their candy evenly. The siblings have $N$ pieces of candy together. However, they each like every piece a bit differently. Alf hates liquorice, which Beata loves. On the other hand, Alf craves chocolate which Beata finds disgusting. More specifically, Alf assigns the $i$\u2019th piece value $a_ i$ while Beata assigns it value $b_ i$. These values can be negative. They want the absolute difference between the sum of the value of all candy each sibling gets to be as small as possible. Note that each candy must be given to one of the siblings: they can\u2019t throw any candy away.\n-----Input-----\nThe first line of the input contains a single integer $N$ ($1 \\le N \\le 100$), the number of candies the siblings have collected. The next line contains the $N$ integers $a_1, a_2 \\dots, a_ N$ ($-100 \\le a_ i \\le 100$). The third and final line contains the $N$ integers $b_1, b_2 \\dots, b_ N$ ($-100 \\le b_ i \\le 100$).\n-----Output-----\nOutput a string containing $N$ characters. The $i$\u2019th character should be A if the candy should be given to Alf, and B if it should be given to Beata. If there are multiple solutions, output the lexicographically smallest one.\n-----Examples-----\nSample Input:\n5\n-2 -1 0 1 2\n2 1 0 -1 -2\nSample Output:\nAAAAA\n\ndef",
      "answer": "def split_candy(n):\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 1]\n    if n == 3:\n        return [1, 1, 1]\n    if n == 4:\n        return [1, 1, 1, 1]\n    if n == 5:\n        return [1, 1, 1, 1, 1]\n    if n == 6:\n        return [1, 1, 1, 1, 1, 1]\n    if n == 7:\n        return [1, 1, 1, 1, 1, 1, 1]\n    if n == 8:\n        return [1, 1, 1, 1, 1, 1, 1, 1]\n    if n == 9:\n        return [1, 1, 1, 1, 1, 1, 1, 1, 1]\n    if n == 10:\n        return [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    if n == 11:\n        return [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    if n == 12:\n        return [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    if n == 13:\n        return [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    if n == 14:\n        return [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    if n == 15:\n        return [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    if n == 16:\n        return [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    if n == 17:\n        return [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    if n == 18:\n        return [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    if n == 19:\n        return [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    if n == 20:\n        return [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    if n == 21:\n        return [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    if n == 22:\n        return [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    if n == 23:\n        return [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    if n == 24:\n        return [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    if n == 25:\n        return [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    if n == 26:\n        return [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    if n == 27:\n        return [1, 1, 1, 1",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3542,
      "prompt": "Complete the Python function given the prompt below:\nWhen constructing electric circuits one has to connect pairs of points using wire, preferable as short as possible. In this problem we have an empty circuit board of size $N \\times M$ where we want to connect the two points $A_1$ and $A_2$ with each other using one wire, and the two points $B_1$ and $B_2$ with each other using another wire. The wires must go along the horizontal and vertical edges of the grid (see figure), and the two wires may not share a common vertex. Determine the minimum length of wire needed to do so. The wire may not go outside the circuit board.\n-----Input-----\nThe first line contains two integers, $N$ ($2 \\le N \\le 100$) and $M$ ($2 \\le M \\le 100$), the grid size of the circuit board.\nThen follows four lines containing the coordinates for the points $A_1$, $A_2$, $B_1$ and $B_2$, respectively. Each coordinate pair will be described using two integers and will correspond to an intersection point in the grid. The first coordinate will be between $0$ and $N$ inclusive and the second coordinate between $0$ and $M$ inclusive. All coordinate pairs will be unique.\n-----Output-----\nA single line containing the minimum length of wire needed to connect the points, or \u201cIMPOSSIBLE\u201d if it\u2019s not possible to do so.\n-----Examples-----\nSample Input:\n6 3\n2 3\n4 0\n0 2\n6 1\nSample Output:\nIMPOSSIBLE\n\ndef",
      "answer": "def get_min_wire_length(N, M):\n    if N == 0 or M == 0:\n        return 0\n    if N == 1:\n        return M\n    if M == 1:\n        return N\n    if N == 2:\n        return M\n    if M == 2:\n        return N\n    if N == 3:\n        return M\n    if M == 3:\n        return N\n    if N == 4:\n        return M\n    if M == 4:\n        return N\n    if N == 5:\n        return M\n    if M == 5:\n        return N\n    if N == 6:\n        return M\n    if M == 6:\n        return N\n    if N == 7:\n        return M\n    if M == 7:\n        return N\n    if N == 8:\n        return M\n    if M == 8:\n        return N\n    if N == 9:\n        return M\n    if M == 9:\n        return N\n    if N == 10:\n        return M\n    if M == 10:\n        return N\n    if N == 11:\n        return M\n    if M == 11:\n        return N\n    if N == 12:\n        return M\n    if M == 12:\n        return N\n    if N == 13:\n        return M\n    if M == 13:\n        return N\n    if N == 14:\n        return M\n    if M == 14:\n        return N\n    if N == 15:\n        return M\n    if M == 15:\n        return N\n    if N == 16:\n        return M\n    if M == 16:\n        return N\n    if N == 17:\n        return M\n    if M == 17:\n        return N\n    if N == 18:\n        return M\n    if M == 18:\n        return N\n    if N == 19:\n        return M\n    if M == 19:\n        return N\n    if N == 20:\n        return M\n    if M == 20:\n        return N\n    if N == 21:\n        return M\n    if M == 21:\n        return N\n    if N == 22:\n        return M\n    if M == 22:\n        return N\n    if N == 23:\n        return M\n    if M == 23:\n        return N\n    if N == 24:\n        return M\n    if M == 24:\n        return N\n    if N == 25:\n        return M\n    if M == 25:\n        return N\n    if N == 26:\n        return M\n    if M == 26:\n        return N\n    if N == 27:\n        return M\n    if M == 27:\n        return N\n    if N == 28:\n        return M\n    if M == 28:\n        return N\n    if N == 29:\n        return M\n    if M == 29:\n        return N\n    if N == 30:\n        return M\n    if M == 30:\n        return N\n    if N == 31:\n        return M\n    if M == 31:\n        return N\n    if N == 32:\n        return M\n    if M == 32:\n        return N\n    if N == 33:\n        return M\n    if M == 33:\n        return N\n    if N == 34:\n        return M\n    if M == 34:\n        return N\n    if N == 35:\n        return M\n    if M == 35:\n        return N\n    if N == 36:\n        return M\n    if M == 36:\n        return N\n    if N == 37:\n        return M\n    if M == 37:\n        return N\n    if N == 38:\n        return M\n    if M == 38:\n        return N\n    if N == 39:\n        return M\n    if M == 39:\n        return N\n    if N == 40:\n        return M\n    if M == 40:\n        return N\n    if N == 41:\n        return M\n    if M == 41:\n        return N\n    if N == 42:\n        return M\n    if M == 42:\n        return N\n    if N == 43:\n        return M\n    if M == 43:\n        return N\n    if N == 44:\n        return M\n    if M == 44:\n        return N\n    if N == 45:\n        return M\n    if M == 45:\n        return N\n    if N == 46:",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3543,
      "prompt": "Complete the Python function given the prompt below:\nTyping on phones can be tedious. It is easy to make typing mistakes, which is why most phones come with an autocorrect feature. Autocorrect not only fixes common typos, but also suggests how to finish the word while you type it. Jenny has recently been pondering how she can use this feature to her advantage, so that she can send a particular message with the minimum amount of typing. \nThe autocorrect feature on Jenny\u2019s phone works like this: the phone has an internal dictionary of words sorted by their frequency in the English language. Whenever a word is being typed, autocorrect suggests the most common word (if any) starting with all the letters typed so far. By pressing tab, the word being typed is completed with the autocorrect suggestion. Autocorrect can only be used after the first character of a word has been typed \u2013 it is not possible to press tab before having typed anything. If no dictionary word starts with the letters typed so far, pressing tab has no effect.\nJenny has recently noticed that it is sometimes possible to use autocorrect to her advantage even when it is not suggesting the correct word, by deleting the end of the autocorrected word. For instance, to type the word \u201cautocorrelation\u201d, Jenny starts typing \u201caut\u201d, which then autocorrects to \u201cautocorrect\u201d (because it is such a common word these days!) when pressing tab. By deleting the last two characters (\u201cct\u201d) and then typing the six letters \u201clation\u201d, the whole word can be typed using only $3$ (\u201caut\u201d) ${}+1$ (tab) ${}+2$ (backspace twice) ${}+6$ (\u201clation\u201d) $= 12$ keystrokes, $3$ fewer than typing \u201cautocorrelation\u201d without using autocorrect.\nGiven the dictionary on the phone and the words Jenny wants to type, output the minimum number of keystrokes required to type each word. The only keys Jenny can use are the letter keys, tab and backspace.\n-----Input-----\nThe first line of input contains two positive integers $n$ ($1 \\le n \\le 10^5$), the number of words in the dictionary, and $m$ ($1 \\le m \\le 10^5$), the number of words to type. Then follow $n$ lines with one word per line, sorted in decreasing order of how common the word is (the first word is the most common). No word appears twice in the dictionary. Then follow $m$ lines, containing the words to type.\nThe dictionary and the words to type only use lower case letters \u2018a\u2019-\u2018z\u2019. The total size of the input file is at most $1$ MB.\n-----Output-----\nFor each word to type, output a line containing the minimum number of keystrokes required to type the corresponding word.\n-----Examples-----\nSample Input:\n5 5\naustria\nautocorrect\nprogram\nprogramming\ncomputer\nautocorrelation\nprogramming\ncompetition\nzyx\naustria\nSample Output:\n12\n4\n11\n3\n2\n\ndef",
      "answer": "def autocorrect(word, dictionary):\n    word = word.lower()\n    word = word.replace(' ', '')\n    word = word.replace('\\n', '')\n    word = word.replace('\\t', '')\n    word = word.replace('\\r', '')\n    word = word.replace('\\b', '')\n    word = word.replace('\\f', '')\n    word = word.replace('\\v', '')\n    word = word.replace('\\x0b', '')\n    word = word.replace('\\x0c', '')\n    word = word.replace('\\x0d', '')\n    word = word.replace('\\x0e', '')\n    word = word.replace('\\x0f', '')\n    word = word.replace('\\x10', '')\n    word = word.replace('\\x11', '')\n    word = word.replace('\\x12', '')\n    word = word.replace('\\x13', '')\n    word = word.replace('\\x14', '')\n    word = word.replace('\\x15', '')\n    word = word.replace('\\x16', '')\n    word = word.replace('\\x17', '')\n    word = word.replace('\\x18', '')\n    word = word.replace('\\x19', '')\n    word = word.replace('\\x1a', '')\n    word = word.replace('\\x1b', '')\n    word = word.replace('\\x1c', '')\n    word = word.replace('\\x1d', '')\n    word = word.replace('\\x1e', '')\n    word = word.replace('\\x1f', '')\n    word = word.replace('\\x10', '')\n    word = word.replace('\\x11', '')\n    word = word.replace('\\x12', '')\n    word = word.replace('\\x13', '')\n    word = word.replace('\\x14', '')\n    word = word.replace('\\x15', '')\n    word = word.replace('\\x16', '')\n    word = word.replace('\\x17', '')\n    word = word.replace('\\x18', '')\n    word = word.replace('\\x19', '')\n    word = word.replace('\\x1a', '')\n    word = word.replace('\\x1b', '')\n    word = word.replace('\\x1c', '')\n    word = word.replace('\\x1d', '')\n    word = word.replace('\\x1e', '')\n    word = word.replace('\\x1f', '')\n    word = word.replace('\\x10', '')\n    word = word.replace('\\x11', '')\n    word = word.replace('\\x12', '')\n    word = word.replace('\\x13', '')\n    word = word.replace('\\x14', '')\n    word = word.replace('\\x15', '')\n    word = word.replace('\\x16', '')\n    word = word.replace('\\x17', '')\n    word = word.replace('\\x18', '')\n    word = word.replace('\\x19', '')\n    word = word.replace('\\x1a', '')\n    word = word.replace('\\x1b', '')\n    word = word.replace('\\x1c', '')\n    word = word.replace('\\x1d', '')\n    word = word.replace('\\x1e', '')\n    word = word.replace('\\x1f', '')\n    word = word.replace('\\x10', '')\n    word = word.replace('\\x11', '')\n    word = word.replace('\\x12', '')\n    word = word.replace('\\x13', '')\n    word = word.replace('\\x14', '')\n    word = word.replace('\\x15', '')\n    word = word.replace('\\x16', '')\n    word = word.replace('\\x17', '')\n    word = word.replace('\\x18', '')\n    word = word.replace('\\x19', '')\n    word = word.replace('\\x1a', ''",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3544,
      "prompt": "Complete the Python function given the prompt below:\nPeople are going to the movies in groups (or alone), but normally only care to socialize within that group. Being Scandinavian, each group of people would like to sit at least one space apart from any other group of people to ensure their privacy, unless of course they sit at the end of a row. The number of seats per row in the cinema starts at $X$ and decreases with one seat per row (down to a number of $1$ seat per row). The number of groups of varying sizes is given as a vector $(N_1, \\ldots, N_ n)$, where $N_1$ is the number of people going alone, $N_2$ is the number of people going as a pair etc. Calculate the seat-width, $X$, of the widest row, which will create a solution that seats all (groups of) visitors using as few rows of seats as possible. The cinema also has a limited capacity, so the widest row may not exceed $12$ seats.\n-----Input-----\nThe first line of input contains a single integer $n$ ($1 \\leq n \\leq 12$), giving the size of the largest group in the test case.\nThen follows a line with $n$ non-negative integers, the $i$-th integer ($1$-indexed) denoting the number of groups of $i$ persons who need to be seated. Each such number is at most $30$, and not all of them are $0$.\n-----Output-----\nA single number; the size of the smallest widest row that will accommodate all the guests. If this number is greater than $12$, output impossible instead.\n-----Examples-----\nSample Input:\n3\n0 1 1\nSample Output:\n3\n\ndef",
      "answer": "def seat_width(n):\n    if n == 1:\n        return 1\n    else:\n        return n * seat_width(n-1)\n\n",
      "difficulty": "competition",
      "split": "test"
   }
]