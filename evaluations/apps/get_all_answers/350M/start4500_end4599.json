[
   {
      "task_id": 4500,
      "prompt": "Complete the Python function given the prompt below:\nAn elementary school student Takahashi has come to a variety store.\nHe has two coins, A-yen and B-yen coins (yen is the currency of Japan), and wants to buy a toy that costs C yen. Can he buy it?\nNote that he lives in Takahashi Kingdom, and may have coins that do not exist in Japan.\n-----Constraints-----\n - All input values are integers.\n - 1 \\leq A, B \\leq 500\n - 1 \\leq C \\leq 1000\n-----Input-----\nInput is given from Standard Input in the following format:\nA B C\n-----Output-----\nIf Takahashi can buy the toy, print Yes; if he cannot, print No.\n-----Sample Input-----\n50 100 120\n-----Sample Output-----\nYes\nHe has 50 + 100 = 150 yen, so he can buy the 120-yen toy.\n\ndef",
      "answer": "def toy(A, B, C):\n    if A + B + C == 500:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4501,
      "prompt": "Complete the Python function given the prompt below:\nTak has N cards. On the i-th (1 \\leq i \\leq N) card is written an integer x_i.\nHe is selecting one or more cards from these N cards, so that the average of the integers written on the selected cards is exactly A.\nIn how many ways can he make his selection?\n-----Constraints-----\n - 1 \\leq N \\leq 50\n - 1 \\leq A \\leq 50\n - 1 \\leq x_i \\leq 50\n - N,\\,A,\\,x_i are integers.\n-----Partial Score-----\n - 200 points will be awarded for passing the test set satisfying 1 \\leq N \\leq 16.\n-----Input-----\nThe input is given from Standard Input in the following format:\nN A\nx_1 x_2... x_N\n-----Output-----\nPrint the number of ways to select cards such that the average of the written integers is exactly A.\n-----Sample Input-----\n4 8\n7 9 8 9\n-----Sample Output-----\n5\n - The following are the 5 ways to select cards such that the average is 8:\n - Select the 3-rd card.\n - Select the 1-st and 2-nd cards.\n - Select the 1-st and 4-th cards.\n - Select the 1-st, 2-nd and 3-rd cards.\n - Select the 1-st, 3-rd and 4-th cards.\n\ndef",
      "answer": "def solution(N, A):\n    answer = 0\n    for i in range(1, N+1):\n        answer += (i-1) * A[i-1]\n    return answer\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4502,
      "prompt": "Complete the Python function given the prompt below:\nYou are given an integer sequence of length n, a_1,..., a_n.\nLet us consider performing the following n operations on an empty sequence b.\nThe i-th operation is as follows:\n - Append a_i to the end of b.\n - Reverse the order of the elements in b.\nFind the sequence b obtained after these n operations.\n-----Constraints-----\n - 1 \\leq n \\leq 2\\times 10^5\n - 0 \\leq a_i \\leq 10^9\n - n and a_i are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nn\na_1 a_2... a_n\n-----Output-----\nPrint n integers in a line with spaces in between.\nThe i-th integer should be b_i.\n-----Sample Input-----\n4\n1 2 3 4\n-----Sample Output-----\n4 2 1 3\n - After step 1 of the first operation, b becomes: 1.\n - After step 2 of the first operation, b becomes: 1.\n - After step 1 of the second operation, b becomes: 1, 2.\n - After step 2 of the second operation, b becomes: 2, 1.\n - After step 1 of the third operation, b becomes: 2, 1, 3.\n - After step 2 of the third operation, b becomes: 3, 1, 2.\n - After step 1 of the fourth operation, b becomes: 3, 1, 2, 4.\n - After step 2 of the fourth operation, b becomes: 4, 2, 1, 3.\nThus, the answer is 4 2 1 3.\n\ndef",
      "answer": "def reverse(n, a):\n    b = []\n    for i in range(n):\n        b.append(a[i])\n    return b\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4503,
      "prompt": "Complete the Python function given the prompt below:\nRaccoon is fighting with a monster.\nThe health of the monster is H.\nRaccoon can use N kinds of special moves. Using the i-th move decreases the monster's health by A_i.\nThere is no other way to decrease the monster's health.\nRaccoon wins when the monster's health becomes 0 or below.\nIf Raccoon can win without using the same move twice or more, print Yes; otherwise, print No.\n-----Constraints-----\n - 1 \\leq H \\leq 10^9\n - 1 \\leq N \\leq 10^5\n - 1 \\leq A_i \\leq 10^4\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nH N\nA_1 A_2... A_N\n-----Output-----\nIf Raccoon can win without using the same move twice or more, print Yes; otherwise, print No.\n-----Sample Input-----\n10 3\n4 5 6\n-----Sample Output-----\nYes\nThe monster's health will become 0 or below after, for example, using the second and third moves.\n\ndef",
      "answer": "def solve(H, N, A):\n    if H == 0:\n        return \"Yes\"\n    if N == 0:\n        return \"No\"\n    if A == 0:\n        return \"No\"\n    if H < 0 or N < 0 or A < 0:\n        return \"No\"\n    if A == N:\n        return \"Yes\"\n    if A == H:\n        return \"Yes\"\n    if A == H - N:\n        return \"Yes\"\n    if A == H - N - 1:\n        return \"Yes\"\n    return solve(H - N, N, A - 1) + solve(H - N - 1, N, A) + solve(H - N - 1, N - 1, A)\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4504,
      "prompt": "Complete the Python function given the prompt below:\nWe will call a string that can be obtained by concatenating two equal strings an even string.\nFor example, xyzxyz and aaaaaa are even, while ababab and xyzxy are not.\nYou are given an even string S consisting of lowercase English letters.\nFind the length of the longest even string that can be obtained by deleting one or more characters from the end of S.\nIt is guaranteed that such a non-empty string exists for a given input.\n-----Constraints-----\n - 2 \\leq |S| \\leq 200\n - S is an even string consisting of lowercase English letters.\n - There exists a non-empty even string that can be obtained by deleting one or more characters from the end of S.\n-----Input-----\nInput is given from Standard Input in the following format:\nS\n-----Output-----\nPrint the length of the longest even string that can be obtained.\n-----Sample Input-----\nabaababaab\n-----Sample Output-----\n6\n - abaababaab itself is even, but we need to delete at least one character.\n - abaababaa is not even.\n - abaababa is not even.\n - abaabab is not even.\n - abaaba is even. Thus, we should print its length, 6.\n\ndef",
      "answer": "def longest_even_string(s):\n    # Write your code here.\n    if len(s) % 2 == 0:\n        return len(s)\n    else:\n        return 0\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4505,
      "prompt": "Complete the Python function given the prompt below:\nYou are given a string S of length 3 consisting of a, b and c. Determine if S can be obtained by permuting abc.\n-----Constraints-----\n - |S|=3\n - S consists of a, b and c.\n-----Input-----\nInput is given from Standard Input in the following format:\nS\n-----Output-----\nIf S can be obtained by permuting abc, print Yes; otherwise, print No.\n-----Sample Input-----\nbac\n-----Sample Output-----\nYes\nSwapping the first and second characters in bac results in abc.\n\ndef",
      "answer": "def permute(s):\n    if len(s) == 1:\n        return True\n    else:\n        return False\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4506,
      "prompt": "Complete the Python function given the prompt below:\nYou are given two arrays $a$ and $b$, both of length $n$.\nLet's define a function $f(l, r) = \\sum\\limits_{l \\le i \\le r} a_i \\cdot b_i$.\nYour task is to reorder the elements (choose an arbitrary order of elements) of the array $b$ to minimize the value of $\\sum\\limits_{1 \\le l \\le r \\le n} f(l, r)$. Since the answer can be very large, you have to print it modulo $998244353$. Note that you should minimize the answer but not its remainder.\n-----Input-----\nThe first line of the input contains one integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) \u2014 the number of elements in $a$ and $b$.\nThe second line of the input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^6$), where $a_i$ is the $i$-th element of $a$.\nThe third line of the input contains $n$ integers $b_1, b_2, \\dots, b_n$ ($1 \\le b_j \\le 10^6$), where $b_j$ is the $j$-th element of $b$.\n-----Output-----\nPrint one integer \u2014 the minimum possible value of $\\sum\\limits_{1 \\le l \\le r \\le n} f(l, r)$ after rearranging elements of $b$, taken modulo $998244353$. Note that you should minimize the answer but not its remainder.\n-----Examples-----\nInput\n5\n1 8 7 2 4\n9 7 2 9 3\nOutput\n646\nInput\n1\n1000000\n1000000\nOutput\n757402647\nInput\n2\n1 3\n4 2\nOutput\n20\n\ndef",
      "answer": "def f(l, r):\n    return sum(a_i * b_i for a_i, b_i in zip(a, b))\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4507,
      "prompt": "Complete the Python function given the prompt below:\nThere are $n$ shovels in the nearby shop. The $i$-th shovel costs $a_i$ bourles.\nMisha has to buy exactly $k$ shovels. Each shovel can be bought no more than once.\nMisha can buy shovels by several purchases. During one purchase he can choose any subset of remaining (non-bought) shovels and buy this subset.\nThere are also $m$ special offers in the shop. The $j$-th of them is given as a pair $(x_j, y_j)$, and it means that if Misha buys exactly $x_j$ shovels during one purchase then $y_j$ most cheapest of them are for free (i.e. he will not pay for $y_j$ most cheapest shovels during the current purchase).\nMisha can use any offer any (possibly, zero) number of times, but he cannot use more than one offer during one purchase (but he can buy shovels without using any offers).\nYour task is to calculate the minimum cost of buying $k$ shovels, if Misha buys them optimally.\n-----Input-----\nThe first line of the input contains three integers $n, m$ and $k$ ($1 \\le n, m \\le 2 \\cdot 10^5, 1 \\le k \\le min(n, 2000)$) \u2014 the number of shovels in the shop, the number of special offers and the number of shovels Misha has to buy, correspondingly.\nThe second line of the input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 2 \\cdot 10^5$), where $a_i$ is the cost of the $i$-th shovel.\nThe next $m$ lines contain special offers. The $j$-th of them is given as a pair of integers $(x_i, y_i)$ ($1 \\le y_i \\le x_i \\le n$) and means that if Misha buys exactly $x_i$ shovels during some purchase, then he can take $y_i$ most cheapest of them for free.\n-----Output-----\nPrint one integer \u2014 the minimum cost of buying $k$ shovels if Misha buys them optimally.\n-----Examples-----\nInput\n7 4 5\n2 5 4 2 6 3 1\n2 1\n6 5\n2 1\n3 1\nOutput\n7\nInput\n9 4 8\n6 8 5 1 8 1 1 2 1\n9 2\n8 4\n5 3\n9 7\nOutput\n17\nInput\n5 1 4\n2 5 7 4 6\n5 4\nOutput\n17\n-----Note-----\nIn the first example Misha can buy shovels on positions $1$ and $4$ (both with costs $2$) during the first purchase and get one of them for free using the first or the third special offer. And then he can buy shovels on positions $3$ and $6$ (with costs $4$ and $3$) during the second purchase and get the second one for free using the first or the third special offer. Then he can buy the shovel on a position $7$ with cost $1$. So the total cost is $4 + 2 + 1 = 7$.\nIn the second example Misha can buy shovels on positions $1$, $2$, $3$, $4$ and $8$ (costs are $6$, $8$, $5$, $1$ and $2$) and get three cheapest (with costs $5$, $1$ and $2$) for free. And then he can buy shovels on positions $6$, $7$ and $9$ (all with costs $1$) without using any special offers. So the total cost is $6 + 8 + 1 + 1 + 1 = 17$.\nIn the third example Misha can buy four cheapest shovels without using any special offers and get the total cost $17$.\n\ndef",
      "answer": "def min_cost(n, a, m):\n    if n == 0:\n        return 0\n    if n == 1:\n        return a[0]\n    if m == 0:\n        return a[0]\n    if m == 1:\n        return a[0] + a[1]\n    if m == 2:\n        return a[0] + a[1] + a[2]\n    if m == 3:\n        return a[0] + a[1] + a[2] + a[3]\n    if m == 4:\n        return a[0] + a[1] + a[2] + a[3] + a[4]\n    if m == 5:\n        return a[0] + a[1] + a[2] + a[3] + a[4] + a[5]\n    if m == 6:\n        return a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6]\n    if m == 7:\n        return a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7]\n    if m == 8:\n        return a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8]\n    if m == 9:\n        return a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9]\n    if m == 10:\n        return a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10]\n    if m == 11:\n        return a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11]\n    if m == 12:\n        return a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11] + a[12]\n    if m == 13:\n        return a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11] + a[12] + a[13]\n    if m == 14:\n        return a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11] + a[12] + a[13] + a[14]\n    if m == 15:\n        return a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11] + a[12] + a[13] + a[14] + a[15]\n    if m == 16:\n        return a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11] + a[12] + a[13] + a[14] + a[15] + a[16]\n    if m == 17:\n        return a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11] + a",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4508,
      "prompt": "Complete the Python function given the prompt below:\nYou are given an undirected tree consisting of $n$ vertices. An undirected tree is a connected undirected graph with $n - 1$ edges.\nYour task is to add the minimum number of edges in such a way that the length of the shortest path from the vertex $1$ to any other vertex is at most $2$. Note that you are not allowed to add loops and multiple edges.\n-----Input-----\nThe first line contains one integer $n$ ($2 \\le n \\le 2 \\cdot 10^5$) \u2014 the number of vertices in the tree.\nThe following $n - 1$ lines contain edges: edge $i$ is given as a pair of vertices $u_i, v_i$ ($1 \\le u_i, v_i \\le n$). It is guaranteed that the given edges form a tree. It is guaranteed that there are no loops and multiple edges in the given edges.\n-----Output-----\nPrint a single integer \u2014 the minimum number of edges you have to add in order to make the shortest distance from the vertex $1$ to any other vertex at most $2$. Note that you are not allowed to add loops and multiple edges.\n-----Examples-----\nInput\n7\n1 2\n2 3\n2 4\n4 5\n4 6\n5 7\nOutput\n2\nInput\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n1 7\nOutput\n0\nInput\n7\n1 2\n2 3\n3 4\n3 5\n3 6\n3 7\nOutput\n1\n-----Note-----\nThe tree corresponding to the first example: [Image] The answer is $2$, some of the possible answers are the following: $[(1, 5), (1, 6)]$, $[(1, 4), (1, 7)]$, $[(1, 6), (1, 7)]$.\nThe tree corresponding to the second example: [Image] The answer is $0$.\nThe tree corresponding to the third example: [Image] The answer is $1$, only one possible way to reach it is to add the edge $(1, 3)$.\n\ndef",
      "answer": "def minimum_edges(n, edges):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 2\n    if n == 4:\n        return 2\n    if n == 5:\n        return 2\n    if n == 6:\n        return 2\n    if n == 7:\n        return 2\n    if n == 8:\n        return 2\n    if n == 9:\n        return 2\n    if n == 10:\n        return 2\n    if n == 11:\n        return 2\n    if n == 12:\n        return 2\n    if n == 13:\n        return 2\n    if n == 14:\n        return 2\n    if n == 15:\n        return 2\n    if n == 16:\n        return 2\n    if n == 17:\n        return 2\n    if n == 18:\n        return 2\n    if n == 19:\n        return 2\n    if n == 20:\n        return 2\n    if n == 21:\n        return 2\n    if n == 22:\n        return 2\n    if n == 23:\n        return 2\n    if n == 24:\n        return 2\n    if n == 25:\n        return 2\n    if n == 26:\n        return 2\n    if n == 27:\n        return 2\n    if n == 28:\n        return 2\n    if n == 29:\n        return 2\n    if n == 30:\n        return 2\n    if n == 31:\n        return 2\n    if n == 32:\n        return 2\n    if n == 33:\n        return 2\n    if n == 34:\n        return 2\n    if n == 35:\n        return 2\n    if n == 36:\n        return 2\n    if n == 37:\n        return 2\n    if n == 38:\n        return 2\n    if n == 39:\n        return 2\n    if n == 40:\n        return 2\n    if n == 41:\n        return 2\n    if n == 42:\n        return 2\n    if n == 43:\n        return 2\n    if n == 44:\n        return 2\n    if n == 45:\n        return 2\n    if n == 46:\n        return 2\n    if n == 47:\n        return 2\n    if n == 48:\n        return 2\n    if n == 49:\n        return 2\n    if n == 50:\n        return 2\n    if n == 51:\n        return 2\n    if n == 52:\n        return 2\n    if n == 53:\n        return 2\n    if n == 54:\n        return 2\n    if n == 55:\n        return 2\n    if n == 56:\n        return 2\n    if n == 57:\n        return 2\n    if n == 58:\n        return 2\n    if n == 59:\n        return 2\n    if n == 60:\n        return 2\n    if n == 61:\n        return 2\n    if n == 62:\n        return 2\n    if n == 63:\n        return 2\n    if n == 64:\n        return 2\n    if n == 65:\n        return 2\n    if n == 66:\n        return 2\n    if n == 67:\n        return 2\n    if n == 68:\n        return 2\n    if n == 69:\n        return 2\n    if n == 70:\n        return 2\n    if n == 71:\n        return 2\n    if n == 72:\n        return 2\n    if n == 73:\n        return 2\n    if n == 74:\n        return 2\n    if n == 75:\n        return 2\n    if n == 76:\n        return 2\n    if n == 77:\n        return 2\n    if n == 78:\n        return 2\n    if n == 79:\n        return 2\n    if n == 80:\n        return 2\n    if n == 81:\n        return 2\n    if n == 82:\n        return 2\n    if n == 83:\n        return 2\n    if n == 84:\n        return 2\n    if n == 85:\n        return 2\n    if n == 86:\n        return 2\n    if n == 87:\n        return 2\n    if n == 88:\n        return 2\n    if n == 89:\n        return 2\n    if n == 90:\n        return 2\n    if n == 91:\n        return 2\n    if n == 92:\n        return 2\n    if",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4509,
      "prompt": "Complete the Python function given the prompt below:\nYou are given two positive integers $n$ and $k$. Print the $k$-th positive integer that is not divisible by $n$.\nFor example, if $n=3$, and $k=7$, then all numbers that are not divisible by $3$ are: $1, 2, 4, 5, 7, 8, 10, 11, 13 \\dots$. The $7$-th number among them is $10$.\n-----Input-----\nThe first line contains an integer $t$ ($1 \\le t \\le 1000$) \u2014 the number of test cases in the input. Next, $t$ test cases are given, one per line.\nEach test case is two positive integers $n$ ($2 \\le n \\le 10^9$) and $k$ ($1 \\le k \\le 10^9$).\n-----Output-----\nFor each test case print the $k$-th positive integer that is not divisible by $n$.\n-----Example-----\nInput\n6\n3 7\n4 12\n2 1000000000\n7 97\n1000000000 1000000000\n2 1\nOutput\n10\n15\n1999999999\n113\n1000000001\n1\n\ndef",
      "answer": "def divisors(n):\n    divisors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4510,
      "prompt": "Complete the Python function given the prompt below:\nThe only difference between easy and hard versions are constraints on $n$ and $k$.\nYou are messaging in one of the popular social networks via your smartphone. Your smartphone can show at most $k$ most recent conversations with your friends. Initially, the screen is empty (i.e. the number of displayed conversations equals $0$).\nEach conversation is between you and some of your friends. There is at most one conversation with any of your friends. So each conversation is uniquely defined by your friend.\nYou (suddenly!) have the ability to see the future. You know that during the day you will receive $n$ messages, the $i$-th message will be received from the friend with ID $id_i$ ($1 \\le id_i \\le 10^9$).\nIf you receive a message from $id_i$ in the conversation which is currently displayed on the smartphone then nothing happens: the conversations of the screen do not change and do not change their order, you read the message and continue waiting for new messages.\nOtherwise (i.e. if there is no conversation with $id_i$ on the screen):\n  Firstly, if the number of conversations displayed on the screen is $k$, the last conversation (which has the position $k$) is removed from the screen.  Now the number of conversations on the screen is guaranteed to be less than $k$ and the conversation with the friend $id_i$ is not displayed on the screen.  The conversation with the friend $id_i$ appears on the first (the topmost) position on the screen and all the other displayed conversations are shifted one position down. \nYour task is to find the list of conversations (in the order they are displayed on the screen) after processing all $n$ messages.\n-----Input-----\nThe first line of the input contains two integers $n$ and $k$ ($1 \\le n, k \\le 2 \\cdot 10^5)$ \u2014 the number of messages and the number of conversations your smartphone can show.\nThe second line of the input contains $n$ integers $id_1, id_2, \\dots, id_n$ ($1 \\le id_i \\le 10^9$), where $id_i$ is the ID of the friend which sends you the $i$-th message.\n-----Output-----\nIn the first line of the output print one integer $m$ ($1 \\le m \\le min(n, k)$) \u2014 the number of conversations shown after receiving all $n$ messages.\nIn the second line print $m$ integers $ids_1, ids_2, \\dots, ids_m$, where $ids_i$ should be equal to the ID of the friend corresponding to the conversation displayed on the position $i$ after receiving all $n$ messages.\n-----Examples-----\nInput\n7 2\n1 2 3 2 1 3 2\nOutput\n2\n2 1 \nInput\n10 4\n2 3 3 1 1 2 1 2 3 3\nOutput\n3\n1 3 2 \n-----Note-----\nIn the first example the list of conversations will change in the following way (in order from the first to last message):\n  $[]$;  $[1]$;  $[2, 1]$;  $[3, 2]$;  $[3, 2]$;  $[1, 3]$;  $[1, 3]$;  $[2, 1]$. \nIn the second example the list of conversations will change in the following way:\n  $[]$;  $[2]$;  $[3, 2]$;  $[3, 2]$;  $[1, 3, 2]$;  and then the list will not change till the end.\n\ndef",
      "answer": "def get_conversations(n, k):\n    conversations = []\n    for i in range(n):\n        conversations.append(list(map(int, input().split())))\n    return conversations\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4511,
      "prompt": "Complete the Python function given the prompt below:\nYou are playing a computer card game called Splay the Sire. Currently you are struggling to defeat the final boss of the game.\nThe boss battle consists of $n$ turns. During each turn, you will get several cards. Each card has two parameters: its cost $c_i$ and damage $d_i$. You may play some of your cards during each turn in some sequence (you choose the cards and the exact order they are played), as long as the total cost of the cards you play during the turn does not exceed $3$. After playing some (possibly zero) cards, you end your turn, and all cards you didn't play are discarded. Note that you can use each card at most once.\nYour character has also found an artifact that boosts the damage of some of your actions: every $10$-th card you play deals double damage.\nWhat is the maximum possible damage you can deal during $n$ turns?\n-----Input-----\nThe first line contains one integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) \u2014 the number of turns.\nThen $n$ blocks of input follow, the $i$-th block representing the cards you get during the $i$-th turn.\nEach block begins with a line containing one integer $k_i$ ($1 \\le k_i \\le 2 \\cdot 10^5$) \u2014 the number of cards you get during $i$-th turn. Then $k_i$ lines follow, each containing two integers $c_j$ and $d_j$ ($1 \\le c_j \\le 3$, $1 \\le d_j \\le 10^9$) \u2014 the parameters of the corresponding card.\nIt is guaranteed that $\\sum \\limits_{i = 1}^{n} k_i \\le 2 \\cdot 10^5$.\n-----Output-----\nPrint one integer \u2014 the maximum damage you may deal.\n-----Example-----\nInput\n5\n3\n1 6\n1 7\n1 5\n2\n1 4\n1 3\n3\n1 10\n3 5\n2 3\n3\n1 15\n2 4\n1 10\n1\n1 100\nOutput\n263\n-----Note-----\nIn the example test the best course of action is as follows:\nDuring the first turn, play all three cards in any order and deal $18$ damage.\nDuring the second turn, play both cards and deal $7$ damage.\nDuring the third turn, play the first and the third card and deal $13$ damage.\nDuring the fourth turn, play the first and the third card and deal $25$ damage.\nDuring the fifth turn, play the only card, which will deal double damage ($200$).\n\ndef",
      "answer": "def play_cards(n):\n    cards = []\n    for i in range(n):\n        cards.append(input())\n    return cards\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4512,
      "prompt": "Complete the Python function given the prompt below:\nYou are given a string $s$ consisting of lowercase Latin letters and $q$ queries for this string.\nRecall that the substring $s[l; r]$ of the string $s$ is the string $s_l s_{l + 1} \\dots s_r$. For example, the substrings of \"codeforces\" are \"code\", \"force\", \"f\", \"for\", but not \"coder\" and \"top\".\nThere are two types of queries:   $1~ pos~ c$ ($1 \\le pos \\le |s|$, $c$ is lowercase Latin letter): replace $s_{pos}$ with $c$ (set $s_{pos} := c$);  $2~ l~ r$ ($1 \\le l \\le r \\le |s|$): calculate the number of distinct characters in the substring $s[l; r]$. \n-----Input-----\nThe first line of the input contains one string $s$ consisting of no more than $10^5$ lowercase Latin letters.\nThe second line of the input contains one integer $q$ ($1 \\le q \\le 10^5$) \u2014 the number of queries.\nThe next $q$ lines contain queries, one per line. Each query is given in the format described in the problem statement. It is guaranteed that there is at least one query of the second type.\n-----Output-----\nFor each query of the second type print the answer for it \u2014 the number of distinct characters in the required substring in this query.\n-----Examples-----\nInput\nabacaba\n5\n2 1 4\n1 4 b\n1 5 b\n2 4 6\n2 1 7\nOutput\n3\n1\n2\nInput\ndfcbbcfeeedbaea\n15\n1 6 e\n1 4 b\n2 6 14\n1 7 b\n1 12 c\n2 6 8\n2 1 6\n1 7 c\n1 2 f\n1 10 a\n2 7 9\n1 10 a\n1 14 b\n1 1 f\n2 1 11\nOutput\n5\n2\n5\n2\n6\n\ndef",
      "answer": "def solve(s):\n    n = len(s)\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36:\n        return 36\n    if n == 37:\n        return 37\n    if n == 38:\n        return 38\n    if n == 39:\n        return 39\n    if n == 40:\n        return 40\n    if n == 41:\n        return 41\n    if n == 42:\n        return 42\n    if n == 43:\n        return 43\n    if n == 44:\n        return 44\n    if n == 45:\n        return 45\n    if n == 46:\n        return 46\n    if n == 47:\n        return 47\n    if n == 48:\n        return 48\n    if n == 49:\n        return 49\n    if n == 50:\n        return 50\n    if n == 51:\n        return 51\n    if n == 52:\n        return 52\n    if n == 53:\n        return 53\n    if n == 54:\n        return 54\n    if n == 55:\n        return 55\n    if n == 56:\n        return 56\n    if n == 57:\n        return 57\n    if n == 58:\n        return 58\n    if n == 59:\n        return 59\n    if n == 60:\n        return 60\n    if n == 61:\n        return 61\n    if n == 62:\n        return 62\n    if n == 63:\n        return 63\n    if n == 64:\n        return 64\n    if n == 65:\n        return 65\n    if n == 66:\n        return 66\n    if n == 67:\n        return 67\n    if n == 68:\n        return 68\n    if n == 69:\n        return 69\n    if n == 70:\n        return 70\n    if n == 71:\n        return 71\n    if n == 72:\n        return 72\n    if n == 73:\n        return 73\n    if n == 74:\n        return 74\n    if n == 75:\n        return 75\n    if n == 76:\n        return 76\n    if n == 77:\n        return 77\n    if n == 78:\n        return 78\n    if n == 79:\n        return 79\n    if n == 80:\n        return 80\n    if n == 81:\n        return 81\n    if n == 82:\n        return 82\n    if n == 83:\n        return 83\n    if n == 84:\n        return 84\n    if n == 85:\n        return 85\n    if n == 86:\n        return 86\n    if n == 87:\n        return 87\n    if n == 88:\n        return 88\n    if n == 89:\n        return 89\n    if n == 90:\n        return 90\n    if n == 91:\n        return 91\n    if n == 92:\n        return 92",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4513,
      "prompt": "Complete the Python function given the prompt below:\nYou are given a correct solution of the sudoku puzzle. If you don't know what is the sudoku, you can read about it here.\nThe picture showing the correct sudoku solution:\n[Image]\nBlocks are bordered with bold black color.\nYour task is to change at most $9$ elements of this field (i.e. choose some $1 \\le i, j \\le 9$ and change the number at the position $(i, j)$ to any other number in range $[1; 9]$) to make it anti-sudoku. The anti-sudoku is the $9 \\times 9$ field, in which:  Any number in this field is in range $[1; 9]$;  each row contains at least two equal elements;  each column contains at least two equal elements;  each $3 \\times 3$ block (you can read what is the block in the link above) contains at least two equal elements. \nIt is guaranteed that the answer exists.\nYou have to answer $t$ independent test cases.\n-----Input-----\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 10^4$) \u2014 the number of test cases. Then $t$ test cases follow.\nEach test case consists of $9$ lines, each line consists of $9$ characters from $1$ to $9$ without any whitespaces \u2014 the correct solution of the sudoku puzzle.\n-----Output-----\nFor each test case, print the answer \u2014 the initial field with at most $9$ changed elements so that the obtained field is anti-sudoku. If there are several solutions, you can print any. It is guaranteed that the answer exists.\n-----Example-----\nInput\n1\n154873296\n386592714\n729641835\n863725149\n975314628\n412968357\n631457982\n598236471\n247189563\nOutput\n154873396\n336592714\n729645835\n863725145\n979314628\n412958357\n631457992\n998236471\n247789563\n\ndef",
      "answer": "def sudoku(sudoku):\n    for i in range(9):\n        for j in range(9):\n            if sudoku[i][j] == 0:\n                for k in range(1, 10):\n                    if (i + j + k) % 2 == 0:\n                        sudoku[i][j] = k\n                        sudoku[i][j + 1] = k\n                        sudoku[i + 1][j] = k\n                        sudoku[i + 1][j + 1] = k\n                        sudoku[i + 2][j] = k\n                        sudoku[i + 2][j + 1] = k\n                        sudoku[i + 2][j + 2] = k\n                        sudoku[i + 3][j] = k\n                        sudoku[i + 3][j + 1] = k\n                        sudoku[i + 3][j + 2] = k\n                        sudoku[i + 4][j] = k\n                        sudoku[i + 4][j + 1] = k\n                        sudoku[i + 4][j + 2] = k\n                        sudoku[i + 5][j] = k\n                        sudoku[i + 5][j + 1] = k\n                        sudoku[i + 5][j + 2] = k\n                        sudoku[i + 6][j] = k\n                        sudoku[i + 6][j + 1] = k\n                        sudoku[i + 6][j + 2] = k\n                        sudoku[i + 7][j] = k\n                        sudoku[i + 7][j + 1] = k\n                        sudoku[i + 7][j + 2] = k\n                        sudoku[i + 8][j] = k\n                        sudoku[i + 8][j + 1] = k\n                        sudoku[i + 8][j + 2] = k\n                        sudoku[i + 9][j] = k\n                        sudoku[i + 9][j + 1] = k\n                        sudoku[i + 9][j + 2] = k\n                        sudoku[i + 10][j] = k\n                        sudoku[i + 10][j + 1] = k\n                        sudoku[i + 10][j + 2] = k\n                        sudoku[i + 11][j] = k\n                        sudoku[i + 11][j + 1] = k\n                        sudoku[i + 11][j + 2] = k\n                        sudoku[i + 12][j] = k\n                        sudoku[i + 12][j + 1] = k\n                        sudoku[i + 12][j + 2] = k\n                        sudoku[i + 13][j] = k\n                        sudoku[i + 13][j + 1] = k\n                        sudoku[i + 13][j + 2] = k\n                        sudoku[i + 14][j] = k\n                        sudoku[i + 14][j + 1] = k\n                        sudoku[i + 14][j + 2] = k\n                        sudoku[i + 15][j] = k\n                        sudoku[i + 15][j + 1] = k\n                        sudoku[i + 15][j + 2] = k\n                        sudoku[i + 16][j] = k\n                        sudoku[i + 16][j + 1] = k\n                        sudoku[i + 16][j + 2] = k\n                        sudoku[i + 17][j] = k\n                        sudoku[i + 17][j + 1] = k\n                        sudoku[i + 17][j + 2] = k\n                        sudoku[i + 18][j] = k\n                        sudoku[i + 18][j + 1] = k\n                        sudoku[i + 18][j + 2] = k\n                        sudoku[i + 19][j] = k\n                        sudoku[i + 19][j + 1] = k\n                        sudoku[i + 19][j + 2] = k\n                        sudoku[i + 20][j] = k\n                        sudoku[i + 20][j + 1] = k\n                        sudoku[i + 20][j + 2] = k\n                        sudoku[i + 21][j] = k\n                        sudoku[i + 21][j + 1]",
      "difficulty": "introductory",
      "split": "test"
   }
]