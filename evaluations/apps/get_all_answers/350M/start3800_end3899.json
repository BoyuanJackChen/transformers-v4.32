[
   {
      "task_id": 3800,
      "prompt": "Complete the Python function given the prompt below:\nYou have a string of decimal digits s. Let's define b_{ij} = s_{i}\u00b7s_{j}. Find in matrix b the number of such rectangles that the sum b_{ij} for all cells (i, j) that are the elements of the rectangle equals a in each rectangle.\nA rectangle in a matrix is a group of four integers (x, y, z, t) (x \u2264 y, z \u2264 t). The elements of the rectangle are all cells (i, j) such that x \u2264 i \u2264 y, z \u2264 j \u2264 t.\n-----Input-----\nThe first line contains integer a (0 \u2264 a \u2264 10^9), the second line contains a string of decimal integers s (1 \u2264 |s| \u2264 4000).\n-----Output-----\nPrint a single integer \u2014 the answer to a problem.\nPlease, do not write the %lld specifier to read or write 64-bit integers in \u0421++. It is preferred to use the cin, cout streams or the %I64d specifier.\n-----Examples-----\nInput\n10\n12345\nOutput\n6\nInput\n16\n439873893693495623498263984765\nOutput\n40\n\ndef",
      "answer": "def rectangle_sum(s):\n    n = len(s)\n    b = [[0 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        for j in range(n):\n            b[i][j] = s[i] * s[j]\n    for i in range(n):\n        for j in range(n):\n            b[i][j] = b[i][j] % 10**9\n    return sum(b[i][j] for i in range(n) for j in range(n))\n\n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3801,
      "prompt": "Complete the Python function given the prompt below:\nThe only difference between easy and hard versions is constraints.\nNauuo is a girl who loves random picture websites.\nOne day she made a random picture website by herself which includes $n$ pictures.\nWhen Nauuo visits the website, she sees exactly one picture. The website does not display each picture with equal probability. The $i$-th picture has a non-negative weight $w_i$, and the probability of the $i$-th picture being displayed is $\\frac{w_i}{\\sum_{j=1}^nw_j}$. That is to say, the probability of a picture to be displayed is proportional to its weight.\nHowever, Nauuo discovered that some pictures she does not like were displayed too often. \nTo solve this problem, she came up with a great idea: when she saw a picture she likes, she would add $1$ to its weight; otherwise, she would subtract $1$ from its weight.\nNauuo will visit the website $m$ times. She wants to know the expected weight of each picture after all the $m$ visits modulo $998244353$. Can you help her?\nThe expected weight of the $i$-th picture can be denoted by $\\frac {q_i} {p_i}$ where $\\gcd(p_i,q_i)=1$, you need to print an integer $r_i$ satisfying $0\\le r_i<998244353$ and $r_i\\cdot p_i\\equiv q_i\\pmod{998244353}$. It can be proved that such $r_i$ exists and is unique.\n-----Input-----\nThe first line contains two integers $n$ and $m$ ($1\\le n\\le 50$, $1\\le m\\le 50$) \u2014 the number of pictures and the number of visits to the website.\nThe second line contains $n$ integers $a_1,a_2,\\ldots,a_n$ ($a_i$ is either $0$ or $1$) \u2014 if $a_i=0$, Nauuo does not like the $i$-th picture; otherwise Nauuo likes the $i$-th picture. It is guaranteed that there is at least one picture which Nauuo likes.\nThe third line contains $n$ integers $w_1,w_2,\\ldots,w_n$ ($1\\le w_i\\le50$) \u2014 the initial weights of the pictures.\n-----Output-----\nThe output contains $n$ integers $r_1,r_2,\\ldots,r_n$ \u2014 the expected weights modulo $998244353$.\n-----Examples-----\nInput\n2 1\n0 1\n2 1\nOutput\n332748119\n332748119\nInput\n1 2\n1\n1\nOutput\n3\nInput\n3 3\n0 1 1\n4 3 5\nOutput\n160955686\n185138929\n974061117\n-----Note-----\nIn the first example, if the only visit shows the first picture with a probability of $\\frac 2 3$, the final weights are $(1,1)$; if the only visit shows the second picture with a probability of $\\frac1 3$, the final weights are $(2,2)$.\nSo, both expected weights are $\\frac2 3\\cdot 1+\\frac 1 3\\cdot 2=\\frac4 3$.\nBecause $332748119\\cdot 3\\equiv 4\\pmod{998244353}$, you need to print $332748119$ instead of $\\frac4 3$ or $1.3333333333$.\nIn the second example, there is only one picture which Nauuo likes, so every time Nauuo visits the website, $w_1$ will be increased by $1$.\nSo, the expected weight is $1+2=3$.\nNauuo is very naughty so she didn't give you any hint of the third example.\n\ndef",
      "answer": "def solve(n,m,a,w):\n    if n==1:\n        return w\n    if m==1:\n        return w\n    if a==0:\n        return w\n    if a==1:\n        return w\n    if a==2:\n        return w\n    if a==3:\n        return w\n    if a==4:\n        return w\n    if a==5:\n        return w\n    if a==6:\n        return w\n    if a==7:\n        return w\n    if a==8:\n        return w\n    if a==9:\n        return w\n    if a==10:\n        return w\n    if a==11:\n        return w\n    if a==12:\n        return w\n    if a==13:\n        return w\n    if a==14:\n        return w\n    if a==15:\n        return w\n    if a==16:\n        return w\n    if a==17:\n        return w\n    if a==18:\n        return w\n    if a==19:\n        return w\n    if a==20:\n        return w\n    if a==21:\n        return w\n    if a==22:\n        return w\n    if a==23:\n        return w\n    if a==24:\n        return w\n    if a==25:\n        return w\n    if a==26:\n        return w\n    if a==27:\n        return w\n    if a==28:\n        return w\n    if a==29:\n        return w\n    if a==30:\n        return w\n    if a==31:\n        return w\n    if a==32:\n        return w\n    if a==33:\n        return w\n    if a==34:\n        return w\n    if a==35:\n        return w\n    if a==36:\n        return w\n    if a==37:\n        return w\n    if a==38:\n        return w\n    if a==39:\n        return w\n    if a==40:\n        return w\n    if a==41:\n        return w\n    if a==42:\n        return w\n    if a==43:\n        return w\n    if a==44:\n        return w\n    if a==45:\n        return w\n    if a==46:\n        return w\n    if a==47:\n        return w\n    if a==48:\n        return w\n    if a==49:\n        return w\n    if a==50:\n        return w\n    if a==51:\n        return w\n    if a==52:\n        return w\n    if a==53:\n        return w\n    if a==54:\n        return w\n    if a==55:\n        return w\n    if a==56:\n        return w\n    if a==57:\n        return w\n    if a==58:\n        return w\n    if a==59:\n        return w\n    if a==60:\n        return w\n    if a==61:\n        return w\n    if a==62:\n        return w\n    if a==63:\n        return w\n    if a==64:\n        return w\n    if a==65:\n        return w\n    if a==66:\n        return w\n    if a==67:\n        return w\n    if a==68:\n        return w\n    if a==69:\n        return w\n    if a==70:\n        return w\n    if a==71:\n        return w\n    if a==72:\n        return w\n    if a==73:\n        return w\n    if a==74:\n        return w\n    if a==75:\n        return w\n    if a==76:\n        return w\n    if a==77:\n        return w\n    if a==78:\n        return w\n    if a==79:\n        return w\n    if a==80:\n        return w\n    if a==81:\n        return w\n    if a==82:\n        return w\n    if a==83:\n        return w\n    if a==84:\n        return w\n    if a==85:\n        return w\n    if a==86:\n        return w\n    if a==87:\n        return w\n    if a==88:\n        return w\n    if a==89:\n        return w\n    ",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3802,
      "prompt": "Complete the Python function given the prompt below:\nIn mathematics, a subsequence is a sequence that can be derived from another sequence by deleting some elements without changing the order of the remaining elements. For example, the sequence BDF is a subsequence of ABCDEF. A substring of a string is a continuous subsequence of the string. For example, BCD is a substring of ABCDEF.\nYou are given two strings s_1, s_2 and another string called virus. Your task is to find the longest common subsequence of s_1 and s_2, such that it doesn't contain virus as a substring.\n-----Input-----\nThe input contains three strings in three separate lines: s_1, s_2 and virus (1 \u2264 |s_1|, |s_2|, |virus| \u2264 100). Each string consists only of uppercase English letters.\n-----Output-----\nOutput the longest common subsequence of s_1 and s_2 without virus as a substring. If there are multiple answers, any of them will be accepted. \nIf there is no valid common subsequence, output 0.\n-----Examples-----\nInput\nAJKEQSLOBSROFGZ\nOVGURWZLWVLUXTH\nOZ\nOutput\nORZ\nInput\nAA\nA\nA\nOutput\n0\n\ndef",
      "answer": "def longest_common_subsequence(s1, s2):\n    if len(s1) > len(s2):\n        return longest_common_subsequence(s2, s1)\n    elif len(s2) > len(s1):\n        return longest_common_subsequence(s1, s2)\n    else:\n        return max(len(s1), len(s2))\n\n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3803,
      "prompt": "Complete the Python function given the prompt below:\nA monster is attacking the Cyberland!\nMaster Yang, a braver, is going to beat the monster. Yang and the monster each have 3 attributes: hitpoints (HP), offensive power (ATK) and defensive power (DEF).\nDuring the battle, every second the monster's HP decrease by max(0, ATK_{Y} - DEF_{M}), while Yang's HP decreases by max(0, ATK_{M} - DEF_{Y}), where index Y denotes Master Yang and index M denotes monster. Both decreases happen simultaneously Once monster's HP \u2264 0 and the same time Master Yang's HP > 0, Master Yang wins.\nMaster Yang can buy attributes from the magic shop of Cyberland: h bitcoins per HP, a bitcoins per ATK, and d bitcoins per DEF.\nNow Master Yang wants to know the minimum number of bitcoins he can spend in order to win.\n-----Input-----\nThe first line contains three integers HP_{Y}, ATK_{Y}, DEF_{Y}, separated by a space, denoting the initial HP, ATK and DEF of Master Yang.\nThe second line contains three integers HP_{M}, ATK_{M}, DEF_{M}, separated by a space, denoting the HP, ATK and DEF of the monster.\nThe third line contains three integers h, a, d, separated by a space, denoting the price of 1\u00a0HP, 1\u00a0ATK and 1\u00a0DEF.\nAll numbers in input are integer and lie between 1 and 100 inclusively.\n-----Output-----\nThe only output line should contain an integer, denoting the minimum bitcoins Master Yang should spend in order to win.\n-----Examples-----\nInput\n1 2 1\n1 100 1\n1 100 100\nOutput\n99\nInput\n100 100 100\n1 1 1\n1 1 1\nOutput\n0\n-----Note-----\nFor the first sample, prices for ATK and DEF are extremely high. Master Yang can buy 99 HP, then he can beat the monster with 1 HP left.\nFor the second sample, Master Yang is strong enough to beat the monster, so he doesn't need to buy anything.\n\ndef",
      "answer": "def monster_battle(HP, ATK, DEF):\n    if HP <= 0 or ATK <= 0 or DEF <= 0:\n        return 0\n    elif HP > 0 and ATK > 0 and DEF > 0:\n        return HP * (ATK - DEF)\n    else:\n        return HP * (ATK - DEF) + (HP - ATK) * (DEF - ATK)\n\n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3804,
      "prompt": "Complete the Python function given the prompt below:\nMaxim loves to fill in a matrix in a special manner. Here is a pseudocode of filling in a matrix of size (m + 1) \u00d7 (m + 1):\n[Image]\nMaxim asks you to count, how many numbers m (1 \u2264 m \u2264 n) are there, such that the sum of values in the cells in the row number m + 1 of the resulting matrix equals t.\nExpression (x xor y) means applying the operation of bitwise excluding \"OR\" to numbers x and y. The given operation exists in all modern programming languages. For example, in languages C++ and Java it is represented by character \"^\", in Pascal \u2014 by \"xor\".\n-----Input-----\nA single line contains two integers n and t (1 \u2264 n, t \u2264 10^12, t \u2264 n + 1).\nPlease, do not use the %lld specifier to read or write 64-bit integers in C++. It is preferred to use the cin, cout streams or the %I64d specifier.\n-----Output-----\nIn a single line print a single integer \u2014 the answer to the problem. \n-----Examples-----\nInput\n1 1\nOutput\n1\nInput\n3 2\nOutput\n1\nInput\n3 3\nOutput\n0\nInput\n1000000000000 1048576\nOutput\n118606527258\n\ndef",
      "answer": "def max_sum(n, t):\n    if n == 0 or t == 0:\n        return 0\n    if n == 1:\n        return t\n    return max(max_sum(n - 1, t), t + max_sum(n - 1, t - n))\n\n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3805,
      "prompt": "Complete the Python function given the prompt below:\nMad scientist Mike has just finished constructing a new device to search for extraterrestrial intelligence! He was in such a hurry to launch it for the first time that he plugged in the power wires without giving it a proper glance and started experimenting right away. After a while Mike observed that the wires ended up entangled and now have to be untangled again.\nThe device is powered by two wires \"plus\" and \"minus\". The wires run along the floor from the wall (on the left) to the device (on the right). Both the wall and the device have two contacts in them on the same level, into which the wires are plugged in some order. The wires are considered entangled if there are one or more places where one wire runs above the other one. For example, the picture below has four such places (top view): [Image] \nMike knows the sequence in which the wires run above each other. Mike also noticed that on the left side, the \"plus\" wire is always plugged into the top contact (as seen on the picture). He would like to untangle the wires without unplugging them and without moving the device. Determine if it is possible to do that. A wire can be freely moved and stretched on the floor, but cannot be cut.\nTo understand the problem better please read the notes to the test samples.\n-----Input-----\nThe single line of the input contains a sequence of characters \"+\" and \"-\" of length n (1 \u2264 n \u2264 100000). The i-th (1 \u2264 i \u2264 n) position of the sequence contains the character \"+\", if on the i-th step from the wall the \"plus\" wire runs above the \"minus\" wire, and the character \"-\" otherwise.\n-----Output-----\nPrint either \"Yes\" (without the quotes) if the wires can be untangled or \"No\" (without the quotes) if the wires cannot be untangled.\n-----Examples-----\nInput\n-++-\nOutput\nYes\nInput\n+-\nOutput\nNo\nInput\n++\nOutput\nYes\nInput\n-\nOutput\nNo\n-----Note-----\nThe first testcase corresponds to the picture in the statement. To untangle the wires, one can first move the \"plus\" wire lower, thus eliminating the two crosses in the middle, and then draw it under the \"minus\" wire, eliminating also the remaining two crosses.\nIn the second testcase the \"plus\" wire makes one full revolution around the \"minus\" wire. Thus the wires cannot be untangled:  [Image] \nIn the third testcase the \"plus\" wire simply runs above the \"minus\" wire twice in sequence. The wires can be untangled by lifting \"plus\" and moving it higher:  [Image] \nIn the fourth testcase the \"minus\" wire runs above the \"plus\" wire once. The wires cannot be untangled without moving the device itself:  [Image]\n\ndef",
      "answer": "def find_unmatched_wires(n):\n    if n == 1:\n        return \"Yes\"\n    if n == 2:\n        return \"Yes\"\n    if n == 3:\n        return \"Yes\"\n    if n == 4:\n        return \"Yes\"\n    if n == 5:\n        return \"Yes\"\n    if n == 6:\n        return \"Yes\"\n    if n == 7:\n        return \"Yes\"\n    if n == 8:\n        return \"Yes\"\n    if n == 9:\n        return \"Yes\"\n    if n == 10:\n        return \"Yes\"\n    if n == 11:\n        return \"Yes\"\n    if n == 12:\n        return \"Yes\"\n    if n == 13:\n        return \"Yes\"\n    if n == 14:\n        return \"Yes\"\n    if n == 15:\n        return \"Yes\"\n    if n == 16:\n        return \"Yes\"\n    if n == 17:\n        return \"Yes\"\n    if n == 18:\n        return \"Yes\"\n    if n == 19:\n        return \"Yes\"\n    if n == 20:\n        return \"Yes\"\n    if n == 21:\n        return \"Yes\"\n    if n == 22:\n        return \"Yes\"\n    if n == 23:\n        return \"Yes\"\n    if n == 24:\n        return \"Yes\"\n    if n == 25:\n        return \"Yes\"\n    if n == 26:\n        return \"Yes\"\n    if n == 27:\n        return \"Yes\"\n    if n == 28:\n        return \"Yes\"\n    if n == 29:\n        return \"Yes\"\n    if n == 30:\n        return \"Yes\"\n    if n == 31:\n        return \"Yes\"\n    if n == 32:\n        return \"Yes\"\n    if n == 33:\n        return \"Yes\"\n    if n == 34:\n        return \"Yes\"\n    if n == 35:\n        return \"Yes\"\n    if n == 36:\n        return \"Yes\"\n    if n == 37:\n        return \"Yes\"\n    if n == 38:\n        return \"Yes\"\n    if n == 39:\n        return \"Yes\"\n    if n == 40:\n        return \"Yes\"\n    if n == 41:\n        return \"Yes\"\n    if n == 42:\n        return \"Yes\"\n    if n == 43:\n        return \"Yes\"\n    if n == 44:\n        return \"Yes\"\n    if n == 45:\n        return \"Yes\"\n    if n == 46:\n        return \"Yes\"\n    if n == 47:\n        return \"Yes\"\n    if n == 48:\n        return \"Yes\"\n    if n == 49:\n        return \"Yes\"\n    if n == 50:\n        return \"Yes\"\n    if n == 51:\n        return \"Yes\"\n    if n == 52:\n        return \"Yes\"\n    if n == 53:\n        return \"Yes\"\n    if n == 54:\n        return \"Yes\"\n    if n == 55:\n        return \"Yes\"\n    if n == 56:\n        return \"Yes\"\n    if n == 57:\n        return \"Yes\"\n    if n == 58:\n        return \"Yes\"\n    if n == 59:\n        return \"Yes\"\n    if n == 60:\n        return \"Yes\"\n    if n == 61:\n        return \"Yes\"\n    if n == 62:\n        return \"Yes\"\n    if n == 63:\n        return \"Yes\"\n    if n == 64:\n        return \"Yes\"\n    if n == 65:\n        return \"Yes\"\n    if n == 66:\n        return \"Yes\"\n    if n == 67:\n        return \"Yes\"\n    if n == 68:\n        return \"Yes\"\n    if n == 69:\n        return \"Yes\"\n    if n == 70:\n        return \"Yes\"\n    if n == 71:\n        return \"Yes\"\n    if n == 72:\n        return \"Yes\"\n    if n == 73:\n        return \"Yes\"\n    if n == 74:\n        return \"Yes\"\n    if n == 75:\n        return \"Yes\"\n    if n == 76:\n        return \"Yes\"\n    if n == 77:\n        return \"Yes\"\n    if n == 78:\n        return \"Yes\"",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3806,
      "prompt": "Complete the Python function given the prompt below:\nPeter got a new snow blower as a New Year present. Of course, Peter decided to try it immediately. After reading the instructions he realized that it does not work like regular snow blowing machines. In order to make it work, you need to tie it to some point that it does not cover, and then switch it on. As a result it will go along a circle around this point and will remove all the snow from its path.\nFormally, we assume that Peter's machine is a polygon on a plane. Then, after the machine is switched on, it will make a circle around the point to which Peter tied it (this point lies strictly outside the polygon). That is, each of the points lying within or on the border of the polygon will move along the circular trajectory, with the center of the circle at the point to which Peter tied his machine.\nPeter decided to tie his car to point P and now he is wondering what is the area of \u200b\u200bthe region that will be cleared from snow. Help him.\n-----Input-----\nThe first line of the input contains three integers\u00a0\u2014 the number of vertices of the polygon n ($3 \\leq n \\leq 100000$), and coordinates of point P.\nEach of the next n lines contains two integers\u00a0\u2014 coordinates of the vertices of the polygon in the clockwise or counterclockwise order. It is guaranteed that no three consecutive vertices lie on a common straight line.\nAll the numbers in the input are integers that do not exceed 1 000 000 in their absolute value.\n-----Output-----\nPrint a single real value number\u00a0\u2014 the area of the region that will be cleared. Your answer will be considered correct if its absolute or relative error does not exceed 10^{ - 6}. \nNamely: let's assume that your answer is a, and the answer of the jury is b. The checker program will consider your answer correct, if $\\frac{|a - b|}{\\operatorname{max}(1, b)} \\leq 10^{-6}$.\n-----Examples-----\nInput\n3 0 0\n0 1\n-1 2\n1 2\nOutput\n12.566370614359172464\nInput\n4 1 -1\n0 0\n1 2\n2 0\n1 1\nOutput\n21.991148575128551812\n-----Note-----\nIn the first sample snow will be removed from that area:\n $0$\n\ndef",
      "answer": "def remove_snow(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n + remove_snow(n - 1)\n\n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3807,
      "prompt": "Complete the Python function given the prompt below:\nLimak is a little polar bear. He plays by building towers from blocks. Every block is a cube with positive integer length of side. Limak has infinitely many blocks of each side length.\nA block with side a has volume a^3. A tower consisting of blocks with sides a_1, a_2,..., a_{k} has the total volume a_1^3 + a_2^3 +... + a_{k}^3.\nLimak is going to build a tower. First, he asks you to tell him a positive integer X\u00a0\u2014 the required total volume of the tower. Then, Limak adds new blocks greedily, one by one. Each time he adds the biggest block such that the total volume doesn't exceed X.\nLimak asks you to choose X not greater than m. Also, he wants to maximize the number of blocks in the tower at the end (however, he still behaves greedily). Secondarily, he wants to maximize X.\nCan you help Limak? Find the maximum number of blocks his tower can have and the maximum X \u2264 m that results this number of blocks.\n-----Input-----\nThe only line of the input contains one integer m (1 \u2264 m \u2264 10^15), meaning that Limak wants you to choose X between 1 and m, inclusive.\n-----Output-----\nPrint two integers\u00a0\u2014 the maximum number of blocks in the tower and the maximum required total volume X, resulting in the maximum number of blocks.\n-----Examples-----\nInput\n48\nOutput\n9 42\nInput\n6\nOutput\n6 6\n-----Note-----\nIn the first sample test, there will be 9 blocks if you choose X = 23 or X = 42. Limak wants to maximize X secondarily so you should choose 42.\nIn more detail, after choosing X = 42 the process of building a tower is:  Limak takes a block with side 3 because it's the biggest block with volume not greater than 42. The remaining volume is 42 - 27 = 15.  The second added block has side 2, so the remaining volume is 15 - 8 = 7.  Finally, Limak adds 7 blocks with side 1, one by one. \nSo, there are 9 blocks in the tower. The total volume is is 3^3 + 2^3 + 7\u00b71^3 = 27 + 8 + 7 = 42.\n\ndef",
      "answer": "def tower(x):\n    if x < 1:\n        return 0\n    if x < 2:\n        return 1\n    if x < 3:\n        return 2\n    if x < 4:\n        return 3\n    if x < 5:\n        return 4\n    if x < 6:\n        return 5\n    if x < 7:\n        return 6\n    if x < 8:\n        return 7\n    if x < 9:\n        return 8\n    if x < 10:\n        return 9\n    if x < 11:\n        return 10\n    if x < 12:\n        return 11\n    if x < 13:\n        return 12\n    if x < 14:\n        return 13\n    if x < 15:\n        return 14\n    if x < 16:\n        return 15\n    if x < 17:\n        return 16\n    if x < 18:\n        return 17\n    if x < 19:\n        return 18\n    if x < 20:\n        return 19\n    if x < 21:\n        return 20\n    if x < 22:\n        return 21\n    if x < 23:\n        return 22\n    if x < 24:\n        return 23\n    if x < 25:\n        return 24\n    if x < 26:\n        return 25\n    if x < 27:\n        return 26\n    if x < 28:\n        return 27\n    if x < 29:\n        return 28\n    if x < 30:\n        return 29\n    if x < 31:\n        return 30\n    if x < 32:\n        return 31\n    if x < 33:\n        return 32\n    if x < 34:\n        return 33\n    if x < 35:\n        return 34\n    if x < 36:\n        return 35\n    if x < 37:\n        return 36\n    if x < 38:\n        return 37\n    if x < 39:\n        return 38\n    if x < 40:\n        return 39\n    if x < 41:\n        return 40\n    if x < 42:\n        return 41\n    if x < 43:\n        return 42\n    if x < 44:\n        return 43\n    if x < 45:\n        return 44\n    if x < 46:\n        return 45\n    if x < 47:\n        return 46\n    if x < 48:\n        return 47\n    if x < 49:\n        return 48\n    if x < 50:\n        return 49\n    if x < 51:\n        return 50\n    if x < 52:\n        return 51\n    if x < 53:\n        return 52\n    if x < 54:\n        return 53\n    if x < 55:\n        return 54\n    if x < 56:\n        return 55\n    if x < 57:\n        return 56\n    if x < 58:\n        return 57\n    if x < 59:\n        return 58\n    if x < 60:\n        return 59\n    if x < 61:\n        return 60\n    if x < 62:\n        return 61\n    if x < 63:\n        return 62\n    if x < 64:\n        return 63\n    if x < 65:\n        return 64\n    if x < 66:\n        return 65\n    if x < 67:\n        return 66\n    if x < 68:\n        return 67\n    if x < 69:\n        return 68\n    if x < 70:\n        return 69\n    if x < 71:\n        return 70\n    if x < 72:\n        return 71\n    if x < 73:\n        return 72\n    if x < 74:\n        return 73\n    if x < 75:\n        return 74\n    if x < 76:\n        return 75\n    if x < 77:\n        return 76\n    if x < 78:\n        return 77\n    if x < 79:\n        return 78\n    if x < 80:\n        return 79\n    if x < 81:\n        return 80\n    if x < 82:\n        return 81\n    if x < 83:\n        return 82\n    if x < 84:\n        return 83\n    if x < 85:\n        return 84\n    if x < 86:\n        return 85\n    if x < 87:\n        return 86\n    if x < 88:\n        return 87\n    if x < 89:\n        return 88\n    if x < 90:\n        return 89\n    if x < 91:\n        return 90\n    if x < 92:\n        return 91\n    if x < 93:\n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3808,
      "prompt": "Complete the Python function given the prompt below:\nPetya's friends made him a birthday present \u2014 a bracket sequence. Petya was quite disappointed with his gift, because he dreamed of correct bracket sequence, yet he told his friends nothing about his dreams and decided to fix present himself. \nTo make everything right, Petya is going to move at most one bracket from its original place in the sequence to any other position. Reversing the bracket (e.g. turning \"(\" into \")\" or vice versa) isn't allowed. \nWe remind that bracket sequence $s$ is called correct if:   $s$ is empty;  $s$ is equal to \"($t$)\", where $t$ is correct bracket sequence;  $s$ is equal to $t_1 t_2$, i.e. concatenation of $t_1$ and $t_2$, where $t_1$ and $t_2$ are correct bracket sequences. \nFor example, \"(()())\", \"()\" are correct, while \")(\" and \"())\" are not. Help Petya to fix his birthday present and understand whether he can move one bracket so that the sequence becomes correct.\n-----Input-----\nFirst of line of input contains a single number $n$ ($1 \\leq n \\leq 200\\,000$)\u00a0\u2014 length of the sequence which Petya received for his birthday.\nSecond line of the input contains bracket sequence of length $n$, containing symbols \"(\" and \")\".\n-----Output-----\nPrint \"Yes\" if Petya can make his sequence correct moving at most one bracket. Otherwise print \"No\".\n-----Examples-----\nInput\n2\n)(\nOutput\nYes\nInput\n3\n(()\nOutput\nNo\nInput\n2\n()\nOutput\nYes\nInput\n10\n)))))(((((\nOutput\nNo\n-----Note-----\nIn the first example, Petya can move first bracket to the end, thus turning the sequence into \"()\", which is correct bracket sequence.\nIn the second example, there is no way to move at most one bracket so that the sequence becomes correct.\nIn the third example, the sequence is already correct and there's no need to move brackets.\n\ndef",
      "answer": "def correct_bracket_sequence(s):\n    if len(s) == 0:\n        return \"Yes\"\n    if len(s) == 1:\n        return \"No\"\n    if s[0] == \"(\" and s[-1] == \")\":\n        return \"Yes\"\n    if s[0] == \"(\" and s[-1] == \")\":\n        return \"No\"\n    if s[0] == \"(\" and s[-1] == \")\":\n        return \"No\"\n    if s[0] == \"(\" and s[-1] == \")\":\n        return \"No\"\n    if s[0] == \"(\" and s[-1] == \")\":\n        return \"No\"\n    if s[0] == \"(\" and s[-1] == \")\":\n        return \"No\"\n    if s[0] == \"(\" and s[-1] == \")\":\n        return \"No\"\n    if s[0] == \"(\" and s[-1] == \")\":\n        return \"No\"\n    if s[0] == \"(\" and s[-1] == \")\":\n        return \"No\"\n    if s[0] == \"(\" and s[-1] == \")\":\n        return \"No\"\n    if s[0] == \"(\" and s[-1] == \")\":\n        return \"No\"\n    if s[0] == \"(\" and s[-1] == \")\":\n        return \"No\"\n    if s[0] == \"(\" and s[-1] == \")\":\n        return \"No\"\n    if s[0] == \"(\" and s[-1] == \")\":\n        return \"No\"\n    if s[0] == \"(\" and s[-1] == \")\":\n        return \"No\"\n    if s[0] == \"(\" and s[-1] == \")\":\n        return \"No\"\n    if s[0] == \"(\" and s[-1] == \")\":\n        return \"No\"\n    if s[0] == \"(\" and s[-1] == \")\":\n        return \"No\"\n    if s[0] == \"(\" and s[-1] == \")\":\n        return \"No\"\n    if s[0] == \"(\" and s[-1] == \")\":\n        return \"No\"\n    if s[0] == \"(\" and s[-1] == \")\":\n        return \"No\"\n    if s[0] == \"(\" and s[-1] == \")\":\n        return \"No\"\n    if s[0] == \"(\" and s[-1] == \")\":\n        return \"No\"\n    if s[0] == \"(\" and s[-1] == \")\":\n        return \"No\"\n    if s[0] == \"(\" and s[-1] == \")\":\n        return \"No\"\n    if s[0] == \"(\" and s[-1] == \")\":\n        return \"No\"\n    if s[0] == \"(\" and s[-1] == \")\":\n        return \"No\"\n    if s[0] == \"(\" and s[-1] == \")\":\n        return \"No\"\n    if s[0] == \"(\" and s[-1] == \")\":\n        return \"No\"\n    if s[0] == \"(\" and s[-1] == \")\":\n        return \"No\"\n    if s[0] == \"(\" and s[-1] == \")\":\n        return \"No\"\n    if s[0] == \"(\" and s[-1] == \")\":\n        return \"No\"\n    if s[0] == \"(\" and s[-1] == \")\":\n        return \"No\"\n    if s[0] == \"(\" and s[-1] == \")\":\n        return \"No\"\n    if s[0] == \"(\" and s[-1] == \")\":\n        return \"No\"\n    if s[0] == \"(\" and s[-1] == \")\":\n        return \"No\"\n    if s[0] == \"(\" and s[-1] == \")\":\n        return \"No\"\n    if s[0] == \"(\" and s[-1] == \")\":\n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3809,
      "prompt": "Complete the Python function given the prompt below:\nOne day Greg and his friends were walking in the forest. Overall there were n people walking, including Greg. Soon he found himself in front of a river. The guys immediately decided to get across the river. Luckily, there was a boat by the river bank, just where the guys were standing. We know that the boat can hold people with the total weight of at most k kilograms.\nGreg immediately took a piece of paper and listed there the weights of all people in his group (including himself). It turned out that each person weights either 50 or 100 kilograms. Now Greg wants to know what minimum number of times the boat needs to cross the river to transport the whole group to the other bank. The boat needs at least one person to navigate it from one bank to the other. As the boat crosses the river, it can have any non-zero number of passengers as long as their total weight doesn't exceed k.\nAlso Greg is wondering, how many ways there are to transport everybody to the other side in the minimum number of boat rides. Two ways are considered distinct if during some ride they have distinct sets of people on the boat.\nHelp Greg with this problem.\n \n-----Input-----\nThe first line contains two integers n, k (1 \u2264 n \u2264 50, 1 \u2264 k \u2264 5000) \u2014 the number of people, including Greg, and the boat's weight limit. The next line contains n integers \u2014 the people's weights. A person's weight is either 50 kilos or 100 kilos.\nYou can consider Greg and his friends indexed in some way.\n-----Output-----\nIn the first line print an integer \u2014 the minimum number of rides. If transporting everyone to the other bank is impossible, print an integer -1.\nIn the second line print the remainder after dividing the number of ways to transport the people in the minimum number of rides by number 1000000007 (10^9 + 7). If transporting everyone to the other bank is impossible, print integer 0.\n-----Examples-----\nInput\n1 50\n50\nOutput\n1\n1\nInput\n3 100\n50 50 100\nOutput\n5\n2\nInput\n2 50\n50 50\nOutput\n-1\n0\n-----Note-----\nIn the first test Greg walks alone and consequently, he needs only one ride across the river.\nIn the second test you should follow the plan:\n  transport two 50 kg. people;  transport one 50 kg. person back;  transport one 100 kg. person;  transport one 50 kg. person back;  transport two 50 kg. people. \nThat totals to 5 rides. Depending on which person to choose at step 2, we can get two distinct ways.\n\ndef",
      "answer": "def solution(n, k, w):\n    if n == 1:\n        return w\n    if n == 2:\n        return w + 1\n    if n == 3:\n        return w + 2\n    if n == 4:\n        return w + 3\n    if n == 5:\n        return w + 4\n    if n == 6:\n        return w + 5\n    if n == 7:\n        return w + 6\n    if n == 8:\n        return w + 7\n    if n == 9:\n        return w + 8\n    if n == 10:\n        return w + 9\n    if n == 11:\n        return w + 10\n    if n == 12:\n        return w + 11\n    if n == 13:\n        return w + 12\n    if n == 14:\n        return w + 13\n    if n == 15:\n        return w + 14\n    if n == 16:\n        return w + 15\n    if n == 17:\n        return w + 16\n    if n == 18:\n        return w + 17\n    if n == 19:\n        return w + 18\n    if n == 20:\n        return w + 19\n    if n == 21:\n        return w + 20\n    if n == 22:\n        return w + 21\n    if n == 23:\n        return w + 22\n    if n == 24:\n        return w + 23\n    if n == 25:\n        return w + 24\n    if n == 26:\n        return w + 25\n    if n == 27:\n        return w + 26\n    if n == 28:\n        return w + 27\n    if n == 29:\n        return w + 28\n    if n == 30:\n        return w + 29\n    if n == 31:\n        return w + 30\n    if n == 32:\n        return w + 31\n    if n == 33:\n        return w + 32\n    if n == 34:\n        return w + 33\n    if n == 35:\n        return w + 34\n    if n == 36:\n        return w + 35\n    if n == 37:\n        return w + 36\n    if n == 38:\n        return w + 37\n    if n == 39:\n        return w + 38\n    if n == 40:\n        return w + 39\n    if n == 41:\n        return w + 40\n    if n == 42:\n        return w + 41\n    if n == 43:\n        return w + 42\n    if n == 44:\n        return w + 43\n    if n == 45:\n        return w + 44\n    if n == 46:\n        return w + 45\n    if n == 47:\n        return w + 46\n    if n == 48:\n        return w + 47\n    if n == 49:\n        return w + 48\n    if n == 50:\n        return w + 49\n    if n == 51:\n        return w + 50\n    if n == 52:\n        return w + 51\n    if n == 53:\n        return w + 52\n    if n == 54:\n        return w + 53\n    if n == 55:\n        return w + 54\n    if n == 56:\n        return w + 55\n    if n == 57:\n        return w + 56\n    if n == 58:\n        return w + 57\n    if n == 59:\n        return w + 58\n    if n == 60:\n        return w + 59\n    if n == 61:\n        return w + 60\n    if n == 62:\n        return w + 61\n    if n == 63:\n        return w + 62\n    if n == 64:\n        return w + 63\n    if n == 65:\n        return w + 64\n    if n == 66:\n        return w + 65\n    if n == 67:\n        return w + 66\n    if n == 68:\n        return w + 67\n    if n == 69:\n        return w + 68\n    if n == 70:\n        return w + 69\n    if n == 71:\n        return w + 70\n    if n == 72:\n        return w + 71\n    if n == 73:\n        return w + 72\n    if n == 74:\n        return w + 73\n    if n == 75:\n        return w + 74\n    if n == 76:\n        return w + 75\n    if n == 77:\n        return w + 76\n    if n == 78:\n        return w + 77\n    if n",
      "difficulty": "competition",
      "split": "test"
   }
]