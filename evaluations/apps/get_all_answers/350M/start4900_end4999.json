[
   {
      "task_id": 4900,
      "prompt": "Complete the Python function given the prompt below:\nSomewhere in a mountainous region of the world is a collection of $n$ villages. Connecting these villages to one another is a series of roads, always running directly between two villages and allowing travel in both directions. Due to the treacherous landscape, building these roads is expensive, so the minimum number of roads have been constructed such that each village can reach every other village via a sequence of roads. \nTrade between these villages is very important, since not every village has access to the same supply of natural resources. Many villages produce the same resource, however, so it is useful for villages to know their relative distance to other villages so that they can choose trading partners to minimize overall trading costs. Note that the distance between two villages $a$ and $b$ is the sum of the lengths of the individual roads on the shortest path that connects $a$ and $b$.\nA project has been underway to compute the distance between every pair of villages. This information has been incorporated in a table, along with a map that shows the layout of villages and roads that run between them. You have been assigned the task of distributing the table and map to all the villages for the betterment of the regional economy.\nUnfortunately, not long after you were given this task, a gust of wind blew the map right out of your hand and into the countryside. Despite your best efforts of searching for it, you have been unable to locate it. You know that you could visit all the villages to reconstruct the map and THEN start distributing the map and table, but this will take twice as long as the original task and the villages will be very displeased with you. You wonder, maybe it\u2019s possible to reconstruct the map given only the table?\n-----Input-----\nThe first line of input will contain the integer $n$ ($2 \\leq n \\leq 2500$), the number of villages in this region. The next $n$ lines will contain $n$ integers each. The $j^{\\rm th}$ integer of the $i^{\\rm th}$ line is the distance from village $i$ to village $j$. All distances are greater than zero unless $i = j$, less than $10^7$, and it is guaranteed that the distance from village $i$ to village $j$ is the same as the distance from village $j$ to village $i$.\n-----Output-----\nFor each test case, output $n-1$ lines with two integers $u$ and $v$ on each line, indicating that there is a road connecting villages $u$ and $v$ in this region. Assume the villages are numbered from $1$ to $n$. Any solution that outputs the original set of roads will be accepted.\n-----Examples-----\nSample Input:\n4\n0 1 1 2\n1 0 2 3\n1 2 0 3\n2 3 3 0\nSample Output:\n1 2\n1 3\n1 4\n\ndef",
      "answer": "def find_distances(n, roads):\n    distances = []\n    for i in range(n):\n        distances.append(sum(roads[i]))\n    return distances\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4901,
      "prompt": "Complete the Python function given the prompt below:\nDRM Encryption is a new kind of encryption. Given an encrypted string (which we\u2019ll call a DRM message), the decryption process involves three steps: Divide, Rotate and Merge. This process is described in the following example with the DRM message \u201cEWPGAJRB\u201d:Divide\n\u2013 First, divide the message in half to \u201cEWPG\u201d and \u201cAJRB\u201d.Rotate\n\u2013 For each half, calculate its rotation value by summing up the values of each character ($\\textrm{A} = 0, \\textrm{B} = 1, \\ldots, \\textrm{Z} = 25$). The rotation value of \u201cEWPG\u201d is $4 + 22 + 15 + 6 = 47$. Rotate each character in \u201cEWPG\u201d $47$ positions forward (wrapping from Z to A when necessary) to obtain the new string \u201cZRKB\u201d. Following the same process on \u201cAJRB\u201d results in \u201cBKSC\u201d.Merge\n\u2013 The last step is to combine these new strings (\u201cZRKB\u201d and \u201cBKSC\u201d) by rotating each character in the first string by the value of the corresponding character in the second string. For the first position, rotating \u2018Z\u2019 by \u2018B\u2019 means moving it forward 1 character, which wraps it around to \u2018A\u2019. Continuing this process for every character results in the final decrypted message, \u201cABCD\u201d.\n-----Input-----\nThe input contains a single DRM message to be decrypted. All characters in the string are uppercase letters and the string\u2019s length is even and $\\leq 15000$.\n-----Output-----\nDisplay the decrypted DRM message.\n-----Examples-----\nSample Input:\nEWPGAJRB\nSample Output:\nABCD\n\ndef",
      "answer": "def encrypt(message):\n    encrypted_message = \"\"\n    for char in message:\n        if char.isupper():\n            encrypted_message += chr((ord(char) + 4) % 26 + 65)\n        else:\n            encrypted_message += chr((ord(char) + 4) % 26 + 97)\n    return encrypted_message\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4902,
      "prompt": "Complete the Python function given the prompt below:\nPer recently learned about palindromes. Now he wants to tell us about it and also has more awesome scientific news to share with us.\n\u201cA palindrome is a word that is the same no matter whether you read it backward or forward\u201d, Per recently said in an interview. He continued: \u201cFor example, add is not a palindrome, because reading it backwards gives dda and it\u2019s actually not the same thing, you see. However, if we reorder the letters of the word, we can actually get a palindrome. Hence, we say that add is a Peragram, because it is an anagram of a palindrome\u201d.\nPer gives us a more formal definition of Peragrams: \u201cLike I said, if a word is an anagram of at least one palindrome, we call it a Peragram. And recall that an anagram of a word $w$ contains exactly the same letters as $w$, possibly in a different order.\u201d\n-----Task-----\nGiven a string, find the minimum number of letters you have to remove from it, so that the string becomes a Peragram.\n-----Input-----\nInput consists of a string on a single line. The string will contain at least $1$ and at most $1000$ characters. The string will only contain lowercase letters a-z.\n-----Output-----\nOutput should consist of a single integer on a single line, the minimum number of characters that have to be removed from the string to make it a Peragram.\n-----Examples-----\nSample Input:\nabc\nSample Output:\n2\n\ndef",
      "answer": "def remove_palindromes(string):\n    count = 0\n    for i in range(len(string)):\n        if string[i] == string[i][::-1]:\n            count += 1\n    return count\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4903,
      "prompt": "Complete the Python function given the prompt below:\nJon Marius shouted too much at the recent Justin Bieber concert, and now needs to go to the doctor because of his sore throat. The doctor\u2019s instructions are to say \u201caaah\u201d. Unfortunately, the doctors sometimes need Jon Marius to say \u201caaah\u201d for a while, which Jon Marius has never been good at. Each doctor requires a certain level of \u201caah\u201d \u2013 some require \u201caaaaaah\u201d, while others can actually diagnose his throat with just an \u201ch\u201d. (They often diagnose wrongly, but that is beyond the scope of this problem.) Since Jon Marius does not want to go to a doctor and have his time wasted, he wants to compare how long he manages to hold the \u201caaah\u201d with the doctor\u2019s requirements. (After all, who wants to be all like \u201caaah\u201d when the doctor wants you to go \u201caaaaaah\u201d?)\nEach day Jon Marius calls up a different doctor and asks them how long his \u201caaah\u201d has to be. Find out if Jon Marius would waste his time going to the given doctor.\n-----Input-----\nThe input consists of two lines. The first line is the \u201caaah\u201d Jon Marius is able to say that day. The second line is the \u201caah\u201d the doctor wants to hear. Only lowercase \u2019a\u2019 and \u2019h\u2019 will be used in the input, and each line will contain between $0$ and $999$ \u2019a\u2019s, inclusive, followed by a single \u2019h\u2019.\n-----Output-----\nOutput \u201cgo\u201d if Jon Marius can go to that doctor, and output \u201cno\u201d otherwise.\n-----Examples-----\nSample Input:\naaah\naaaaah\nSample Output:\nno\n\ndef",
      "answer": "def solution(a, b):\n    if a == b:\n        return \"go\"\n    else:\n        return \"no\"\n<|endoftext|>",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4904,
      "prompt": "Complete the Python function given the prompt below:\nAlice and Barbara played some friendly games of one-on-one basketball after work, and you agreed to help them keep score. The rules of the game were simple:\n - Each successful shot by a player earns them either one or two points;\n - The first player to eleven points wins, with one exception;\n - If the score is tied $10$\u2013$10$, the previous rule is replaced by a \u201cwin by 2\u201d rule: the first player to lead the other by at least two points wins.\nSo for example, $11$\u2013$7$, $9$\u2013$11$, and $14$\u2013$12$ are possible final scores (but not $14$\u2013$13$).\nWhenever Alice or Barbara scored points, you jotted down an A or B (indicating a score by Alice or by Barbara) followed by a 1 or 2 (the number of points scored). You have some records of the games Alice and Barbara played in this format, but do not remember who won each game. Can you reconstruct the winner from the game record?\n-----Input-----\nThe input consists of a single line with no more than $200$ characters: the record of one game. The record consists of single letters (either A or B) alternating with single numbers (either 1 or 2), and includes no spaces or other extraneous characters. Each record will be a correct scoring history of a single completed game, played under the rules described above.\n-----Output-----\nPrint a single character, either A or B: the winner of the recorded game.\n-----Examples-----\nSample Input:\nA2B1A2B2A1A2A2A2\nSample Output:\nA\n\ndef",
      "answer": "def game(record):\n    if record[0] == record[1] == record[2] == record[3] == record[4] == record[5] == record[6] == record[7] == record[8] == record[9] == record[10] == record[11] == record[12] == record[13] == record[14] == record[15] == record[16] == record[17] == record[18] == record[19] == record[20] == record[21] == record[22] == record[23] == record[24] == record[25] == record[26] == record[27] == record[28] == record[29] == record[30] == record[31] == record[32] == record[33] == record[34] == record[35] == record[36] == record[37] == record[38] == record[39] == record[40] == record[41] == record[42] == record[43] == record[44] == record[45] == record[46] == record[47] == record[48] == record[49] == record[50] == record[51] == record[52] == record[53] == record[54] == record[55] == record[56] == record[57] == record[58] == record[59] == record[60] == record[61] == record[62] == record[63] == record[64] == record[65] == record[66] == record[67] == record[68] == record[69] == record[70] == record[71] == record[72] == record[73] == record[74] == record[75] == record[76] == record[77] == record[78] == record[79] == record[80] == record[81] == record[82] == record[83] == record[84] == record[85] == record[86] == record[87] == record[88] == record[89] == record[90] == record[91] == record[92] == record[93] == record[94] == record[95] == record[96] == record[97] == record[98] == record[99] == record[100] == record[101] == record[102] == record[103] == record[104] == record[105] == record[106] == record[107] == record[108] == record[109] == record[110] == record[111] == record[112] == record[113] == record[114] == record[115] == record[116] == record[117] == record[118] == record[119] == record[120] == record[121] == record[122] == record[123] == record[124] == record[125] == record[126] == record[127] == record[128] == record[129] == record[130] == record[131] == record[132] == record[133] == record[134] == record[135] == record[136] == record[137] == record[138] == record[139] == record[140] == record[141] == record[142] == record[143] == record[144] == record[145] == record[146] == record[147] == record[148] == record[149] == record[150] == record[151] == record[152] == record[153] == record[154] == record[155] == record[156] == record[157] == record[158] == record[159] == record[160] == record[161] == record[162] == record[163] == record[164] == record[165] == record[166] == record[167] == record[168] == record[169] == record[170] == record[171] == record[172] == record[173] == record[174] == record[175] == record[176] == record[177] == record[178] == record[179] == record[180] == record[181] == record[182] == record[183] == record[184] == record[185] == record[186] == record[187] == record[188] == record[189] == record[190] == record[191] == record[192] == record[193] == record[194] == record[195] == record[196] == record[197] == record[198] == record[199] == record[200] == record[201] == record[202] == record[",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4905,
      "prompt": "Complete the Python function given the prompt below:\nLast week Mister George visited Croatia. Since Mister George is a very important person, while he was in a street, the police disallowed entry to that street, but vehicles that entered the street before Mister George could continue driving.\nWhile Mister George was visiting, Luka drove his truck around town. But because of some of the streets being closed off, he couldn\u2019t make his delivery in time and almost lost his job. Although it is late now, he is wondering how he could have planned his delivery better, i.e., what would have been the least time needed to make his delivery while Mister George was visiting. He knows the route mister George took.\nThe city is modeled with intersections and two-way streets connecting them. For each street, Luka knows how much time he needs to traverse it (mister George needs the same amount of time).\nFor example, if Mister George starts traversing a street during minute 10 and needs 5 minutes to exit it, this street will be blocked during minutes 10, 11, 12, 13 and 14. Luka can enter the street during minutes 9 and earlier, or 15 and later. If Luka arrives during minutes 10-14, he has can wait at the intersection until minute 15 and then enter the street.\nWrite a program that calculates the least amount of time Luka needs to make his delivery, if he starts driving $K$ minutes after the arrival of Mister George.\n-----Input-----\nThe first line contains two integers $N$ and $M$ ($2 \\le N \\le 1000$, $2 \\le M \\le 10000$), the number of intersections and the number of streets. The intersections are numbered $1$ to $N$.\nThe second line contains four integers $A$, $B$, $K$ and $G$ ($1 \\le A, B \\le N$, $0 \\le K \\le 2000$, $0 \\le G \\le 1000$). These are, in order:\n - The intersection where Luka starts;\n - The intersection Luka must get to;\n - The difference in starting times between mister George and Luka (Luka starts at intersection $A$ exactly $K$ minutes after mister George starts his route);\n - The number of intersections on Mister George\u2019s route.\nThe third line contains $G$ integers, the labels of intersections mister George will visit. Every pair of adjacent integers denotes a street he will traverse. That street will exist and Mister George will traverse every street at most once.\nEach of the following $M$ lines contains three integers $A$, $B$ and $L$, meaning that there is a street between intersection $A$ and $B$, and it takes $L$ minutes to traverse. $L$ will be between 1 and 1000.\n-----Output-----\nOutput the least amount of time (in minutes) Luka needs to make his delivery.\n-----Examples-----\nSample Input:\n6 5\n1 6 20 4\n5 3 2 4\n1 2 2\n2 3 8\n2 4 3\n3 6 10\n3 5 15\nSample Output:\n21\n\ndef",
      "answer": "def solve(n,m,a,b,k):\n    if n==1:\n        return k\n    if m==1:\n        return k\n    if a==b:\n        return k\n    if a<b:\n        return solve(n-1,m,a,b,k)\n    else:\n        return solve(n-1,m,a,b,k+1)\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4906,
      "prompt": "Complete the Python function given the prompt below:\nForrest lives in a prehistoric era of \u201cdial-up Internet.\u201d Unlike the fast streaming of today\u2019s broadband era, dial-up connections are only capable of transmitting small amounts of text data at reasonable speeds. Forrest has noticed that his communications typically include repeated characters, and has designed a simple compression scheme based on repeated information. Text data is encoded for transmission, possibly resulting in a much shorter data string, and decoded after transmission to reveal the original data.\nThe compression scheme is rather simple. When encoding a text string, repeated consecutive characters are replaced by a single instance of that character and the number of occurrences of that character (the character\u2019s run length). Decoding the encoded string results in the original string by repeating each character the number of times encoded by the run length. Forrest calls this encoding scheme run-length encoding. (We don\u2019t think he was actually the first person to invent it, but we haven\u2019t mentioned that to him.)\nFor example, the string HHHeelllo is encoded as H3e2l3o1. Decoding H3e2l3o1 results in the original string. Forrest has hired you to write an implementation for his run-length encoding algorithm.\n-----Input-----\nInput consists of a single line of text. The line starts with a single letter: E for encode or D for decode. This letter is followed by a single space and then a message. The message consists of $1$ to $100$ characters.\nEach string to encode contains only upper- and lowercase English letters, underscores, periods, and exclamation points. No consecutive sequence of characters exceeds $9$ repetitions.\nEach string to decode has even length. Its characters alternate between the same characters as strings to encode and a single digit between $1$ and $9$, indicating the run length for the preceding character.\n-----Output-----\nOn an input of E output the run-length encoding of the provided message. On an input of D output the original string corresponding to the given run-length encoding.\n-----Examples-----\nSample Input:\nE HHHeellloWooorrrrlld!!\nSample Output:\nH3e2l3o1W1o3r4l2d1!2\n\ndef",
      "answer": "def encode(message):\n    encoded = \"\"\n    for i in message:\n        if i.isalpha():\n            encoded += chr(ord(i) + 1)\n        else:\n            encoded += i\n    return encoded\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4907,
      "prompt": "Complete the Python function given the prompt below:\nYour parents decided that it would be \u201cfun\u201d to spend the entire Sunday walking near the Mookerheide close to Nijmegen.\nAlthough you can pass the time by solving programming problems in your head, your siblings do not have the same luxury. After a short while, your younger sister Alice and your big brother Bob find themselves hopelessly bored. Together, they try to figure out if they can pass the time with a game (a problem that would later be referred to as the Bob and Alice Pastime Conundrum). Finally, they come up with the following simple game.\nThey find a single branch of length $n$ that will be the main object of the game. Alternatingly, Alice and Bob choose a piece of branch and break it into two parts, in such a way that both parts have integer lengths. The last player who is able to break one of the pieces wins. Alice gets to start, as she is the younger of the two.\nOf course, you already have the game figured out in your head. Assuming Bob plays optimally, can Alice win the game? And if so, what move should she make first?\n-----Input-----\n - A line containing a single integer $2\\leq n\\leq 10^9$, the length of the branch.\n-----Output-----\n - On the first line print the name of the person who wins, Alice or Bob.\n - If Alice can win, print the length of a piece of branch Alice can break off as a winning move. This should be an integer between $1$ and $n-1$, inclusive.\nIf there are multiple valid solutions, you may output any one of them.\n-----Examples-----\nSample Input:\n2\nSample Output:\nAlice\n1\n\ndef",
      "answer": "def main():\n    n = int(input())\n    if n == 1:\n        print(\"Alice\")\n    else:\n        print(n)\nmain()\n<|endoftext|>",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4908,
      "prompt": "Complete the Python function given the prompt below:\nLittle Mirko wrote into his math notebook an equation containing three positive integers, the equals sign and one of the four basic arithmetic operations (addition, subtraction, multiplication and division).\nDuring another class, his friend Slavko erased the equals sign and the operations from Mirko\u2019s notebook. Help Mirko by reconstructing the equation from the three integers\n-----Input-----\nThe first line of input contains three integers less than 100, separated by spaces. The input data will guarantee that a solution, although not necessarily unique, will always exist.\n-----Output-----\nOn a single line, output a valid equation containing the three integers (in the same order), an equals sign and one of the four operations. If there are multiple solutions, output any of them.\n-----Examples-----\nSample Input:\n5 3 8\nSample Output:\n5+3=8\n\ndef",
      "answer": "def add(x,y):\n    return x+y\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4909,
      "prompt": "Complete the Python function given the prompt below:\nThe tunnels of Cu Chi are an immense network of underground tunnels connecting rooms located in the Cu Chi District of Ho Chi Minh City. The Cu Chi tunnels were the location of several military campaigns in the 1960s. Nowadays, it is a popular tourist destination.\nThere are documents from trusted sources about a private network of tunnels in this area used by a secret forces unit but it has not been discovered. According to the documents, this private network has $N$ rooms (numbered from $1$ to $N$) connected by $N-1$ bidirectional tunnels. Room $1$ is the entry point from the ground surface to this underground network. From room $1$, you can follow the tunnels to go to any of the rooms. The rooms are numbered in such a way that, if you follow the shortest path from room $1$ to any room $X$, the sequence of visited rooms\u2019 indices will be increasing. The image below shows a valid map of this network.\nThe network below is invalid, since the path from $1$ to $4$ is $1$ - $3$ - $2$ - $4$, which is not increasing:\nThere is also an old article from an unknown source mentioning about $D_ i$ which is the number of rooms directly connected to room $i$.\nGiven an array $D$ of size $N$, your task is to verify if it is possible to have such a network.\n-----Input-----\n - The first line contains an integer $N$ - the number of rooms in the network $(2 \\leq N \\leq 1000)$.\n - The second line consists of $N$ integers $D_ i$ - the number of rooms that are directly connected to room $i$ $(1 \\leq D_ i \\leq N - 1)$.\n-----Output-----\nPrint YES/NO if it is possible/impossible to have such a network, respectively.\n-----Examples-----\nSample Input:\n8\n3 2 2 1 1 3 1 1\nSample Output:\nYES\n\ndef",
      "answer": "def isValid(n, d):\n    if n == 1:\n        return True\n    if d == 1:\n        return True\n    if d == 2:\n        return True\n    if d == 3:\n        return True\n    if d == 4:\n        return True\n    if d == 5:\n        return True\n    if d == 6:\n        return True\n    if d == 7:\n        return True\n    if d == 8:\n        return True\n    if d == 9:\n        return True\n    if d == 10:\n        return True\n    if d == 11:\n        return True\n    if d == 12:\n        return True\n    if d == 13:\n        return True\n    if d == 14:\n        return True\n    if d == 15:\n        return True\n    if d == 16:\n        return True\n    if d == 17:\n        return True\n    if d == 18:\n        return True\n    if d == 19:\n        return True\n    if d == 20:\n        return True\n    if d == 21:\n        return True\n    if d == 22:\n        return True\n    if d == 23:\n        return True\n    if d == 24:\n        return True\n    if d == 25:\n        return True\n    if d == 26:\n        return True\n    if d == 27:\n        return True\n    if d == 28:\n        return True\n    if d == 29:\n        return True\n    if d == 30:\n        return True\n    if d == 31:\n        return True\n    if d == 32:\n        return True\n    if d == 33:\n        return True\n    if d == 34:\n        return True\n    if d == 35:\n        return True\n    if d == 36:\n        return True\n    if d == 37:\n        return True\n    if d == 38:\n        return True\n    if d == 39:\n        return True\n    if d == 40:\n        return True\n    if d == 41:\n        return True\n    if d == 42:\n        return True\n    if d == 43:\n        return True\n    if d == 44:\n        return True\n    if d == 45:\n        return True\n    if d == 46:\n        return True\n    if d == 47:\n        return True\n    if d == 48:\n        return True\n    if d == 49:\n        return True\n    if d == 50:\n        return True\n    if d == 51:\n        return True\n    if d == 52:\n        return True\n    if d == 53:\n        return True\n    if d == 54:\n        return True\n    if d == 55:\n        return True\n    if d == 56:\n        return True\n    if d == 57:\n        return True\n    if d == 58:\n        return True\n    if d == 59:\n        return True\n    if d == 60:\n        return True\n    if d == 61:\n        return True\n    if d == 62:\n        return True\n    if d == 63:\n        return True\n    if d == 64:\n        return True\n    if d == 65:\n        return True\n    if d == 66:\n        return True\n    if d == 67:\n        return True\n    if d == 68:\n        return True\n    if d == 69:\n        return True\n    if d == 70:\n        return True\n    if d == 71:\n        return True\n    if d == 72:\n        return True\n    if d == 73:\n        return True\n    if d == 74:\n        return True\n    if d == 75:\n        return True\n    if d == 76:\n        return True\n    if d == 77:\n        return True\n    if d == 78:\n        return True\n    if d == 79:\n        return True\n    if d == 80:\n        return True\n    if d == 81:\n        return True\n    if d == 82:\n        return True\n    if d == 83:\n        return True\n    if d == 84:\n        return True\n    if d == 85:\n        return True\n    if d == 86:\n        return True\n    if d == 87:\n        return True\n    if d == 88:\n        return True\n    if d == 89:\n        return True\n    if d == 90:\n        return True\n    if d == 91:\n        return True\n    if d ==",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4910,
      "prompt": "Complete the Python function given the prompt below:\nEveryone knows that the highlight of Halloween at HiQ is their annual costume contest. In their costume contest, they have $D$ categories of costumes that they give a \u201cbest of\u201d award to, such as most malignant mummy, most ghoulish ghost and most wicked witch. Judges are very lazy, however. When picking a winner in each of the costume categories, they simply pick one of the costumes at random to give the award to.\nThis year, you want to win. After 5 consecutive years as runner-up in the category darkest demon you have decided to throw away your costume and only optimize for winning. You have polled your colleagues about what category of costume they are entering with in the contest. Given their responses, can you figure our what costume you should bring to maximize your chance of winning?\n-----Input-----\nThe first line of input contains an integer $N$ ($1 \\le N \\le 1000$), the number of colleagues you have polled on their costumes. The next $N$ lines contains their responses. Each response is a string of between $1$ and $20$ letters a-z. You know that for each category in the contest, you have at least one colleague participating with such a costume.\n-----Output-----\nOutput the costume category you have the highest chance of winning with. If multiple categories are tied for highest, you should output them all in lexicographic order.\n-----Examples-----\nSample Input:\n10\nghost\nmummy\nwitch\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\ndemon\nSample Output:\nghost\nmummy\nwitch\n\ndef",
      "answer": "def highest_costume(n):\n    costume_list = []\n    for i in range(n):\n        costume_list.append(input())\n    costume_list.sort()\n    return costume_list[-1]\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4911,
      "prompt": "Complete the Python function given the prompt below:\nMyTunes, a new music application from Mapple, allows you to display and sort your music according to many different attributes. Attributes like album name, song title, artist, and song length are available, among others. One feature MyTunes does NOT have is stable sorting. You need to write the software which does this. Stable sorting would allow the user to do something like this: first sort the whole list by song title, and then sort the whole list by artist. The result is that the list of songs are sorted primarily by artist (since it\u2019s the last thing used to sort), then within each artist they are sorted by song name (since before the artist sort, the songs were ordered by song name). When sorting two songs with equal attribute values they should remain in their relative order prior to sorting (giving stable sorting).\nThe first sort starts from the order of songs as given in the input. Each subsequent sort starts from the order given by the previous sort, rather than starting from the initial order. All sorting should be done least to greatest, in lexicographic order (using ASCII values, even for numeric data).\n-----Input-----\nThe first line contains a list of $1$ to $20$ unique attributes, separated by single spaces. The next line contains an integer $1 \\leq m \\leq 100$ giving the number of songs that follow, one song per line. Each song has the values for all the attributes, separated by single spaces. The next line contains an integer $1 \\leq n \\leq 20$ giving the number of sorting commands. The following $n$ lines each contain one sort command, which is the name of an attribute. Initially, the song list is in the order given on the input. All attributes and values are between $1$ and $30$ characters, using only a\u2013z, A\u2013Z, $0$\u2013$9$, and underscore (_).\n-----Output-----\nAfter each sort command, print the list of attributes followed by the song list in the order given by the sort command, one song per line. Print a space between adjacent fields. Between each pair of printed lists, print a blank line.\n-----Examples-----\nSample Input:\nArtist Album Song_Title Length_seconds\n5\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nGeorge_Winston Summer Lullaby 215\n3\nArtist\nAlbum\nSong_Title\nSample Output:\nArtist Album Song_Title Length_seconds\nGeorge_Winston Summer Lullaby 215\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nTchaikovsky Piano_Favorites November 163\nArtist Album Song_Title Length_seconds\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nTchaikovsky Piano_Favorites November 163\nGeorge_Winston Summer Lullaby 215\nArtist Album Song_Title Length_seconds\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nGeorge_Winston Summer Lullaby 215\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\n\ndef",
      "answer": "def sort_by_attr(song_list, attr):\n    sorted_list = []\n    for song in song_list:\n        if song[attr] not in sorted_list:\n            sorted_list.append(song[attr])\n    return sorted_list\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4912,
      "prompt": "Complete the Python function given the prompt below:\nThe construction worker previously known as Lars has many bricks of height $1$ and different lengths, and he is now trying to build a wall of width $w$ and height $h$. Since the construction worker previously known as Lars knows that the subset sum problem is $\\mathsf{NP}$-hard, he does not try to optimize the placement but he just lays the bricks in the order they are in his pile and hopes for the best. First he places the bricks in the first layer, left to right; after the first layer is complete he moves to the second layer and completes it, and so on. He only lays bricks horizontally, without rotating them. If at some point he cannot place a brick and has to leave a layer incomplete, then he gets annoyed and leaves. It does not matter if he has bricks left over after he finishes.\nYesterday the construction worker previously known as Lars got really annoyed when he realized that he could not complete the wall only at the last layer, so he tore it down and asked you for help. Can you tell whether the construction worker previously known as Lars will complete the wall with the new pile of bricks he has today?\n-----Input-----\nThe first line contains three integers $h$, $w$, $n$ ($1 \\leq h \\leq 100$, $1 \\leq w \\leq 100$, $1 \\leq n \\leq 10000$), the height of the wall, the width of the wall, and the number of bricks respectively. The second line contains $n$ integers $x_ i$ ($1 \\leq x_ i \\leq 10$), the length of each brick.\n-----Output-----\nOutput YES if the construction worker previously known as Lars will complete the wall, and NO otherwise.\n-----Examples-----\nSample Input:\n2 10 7\n5 5 5 5 5 5 5\nSample Output:\nYES\n\ndef",
      "answer": "def wall(h, w, n):\n    if n == 0:\n        return True\n    if h == 0 or w == 0:\n        return False\n    if h > 100 or w > 100:\n        return False\n    if h < 1 or w < 1:\n        return False\n    if wall(h - 1, w, n - 1) or wall(h, w - 1, n - 1):\n        return True\n    return wall(h - 1, w, n - 1) or wall(h, w - 1, n - 1)\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4913,
      "prompt": "Complete the Python function given the prompt below:\nTo determine the efficacy of a vaccine against a disease, a clinical trial is needed. Some participants are given the real vaccine, while others are given a placebo as the control group. The participants are tracked to determine if they are infected by three different strains (A, B, and C) of a virus. The efficacy of the vaccine against infection by a particular strain is simply the percentage reduction of the infection rate of the vaccinated group compared to the control group.\nFor example, suppose that there are $40$ people in the vaccinated group, $8$ of which are infected by strain B. Then the infection rate is $20$%. Further suppose that $50$ people are in the control group, and $30$ people are infected by strain B. Then the infection rate for the control group is $60$%. Thus the vaccine efficacy against infection is approximately $66.67$% (since $20$% is a $66.67$% percentage reduction of $60$%). If the infection rate for a particular strain in the vaccinated group is not lower than that of the control group, the vaccine is not effective against infection by that strain.\nWhat is the vaccine efficacy against infection by the three strains?\n-----Input-----\nThe first line of input contains an integer $N$ ($2 \\leq N \\leq 10000$) containing the number of participants in the clinical trial.\nThe next $N$ lines describe the participants. Each of these lines contains a string of length four. Each letter is either \u2018Y\u2019 or \u2018N\u2019. The first letter indicates whether the participant is vaccinated with the real vaccine, and the remaining three letters indicate whether the participant is infected by strain A, B, and C, respectively.\nThere is at least one participant in the vaccinated group and the control group. There is at least one participant in the control group infected by each strain (but they may be different participants).\n-----Output-----\nDisplay the vaccine efficacy against infection by strain A, B, and C in that order. If the vaccine is not effective against infection by a particular strain, display Not Effective for that strain instead. Answers with an absolute error or relative error of at most $10^{-2}$ will be accepted.\n-----Examples-----\nSample Input:\n10\nNYNY\nNNYY\nNYYY\nNYYN\nNNNY\nYYNN\nYYYN\nYYNY\nYYNN\nYYNY\nSample Output:\nNot Effective\n66.666667\n50.000000\n\ndef",
      "answer": "def vaccine_efficacy(N):\n    if N == 1:\n        return 0\n    elif N == 2:\n        return 1\n    elif N == 3:\n        return 1\n    elif N == 4:\n        return 1\n    elif N == 5:\n        return 1\n    elif N == 6:\n        return 1\n    elif N == 7:\n        return 1\n    elif N == 8:\n        return 1\n    elif N == 9:\n        return 1\n    elif N == 10:\n        return 1\n    elif N == 11:\n        return 1\n    elif N == 12:\n        return 1\n    elif N == 13:\n        return 1\n    elif N == 14:\n        return 1\n    elif N == 15:\n        return 1\n    elif N == 16:\n        return 1\n    elif N == 17:\n        return 1\n    elif N == 18:\n        return 1\n    elif N == 19:\n        return 1\n    elif N == 20:\n        return 1\n    elif N == 21:\n        return 1\n    elif N == 22:\n        return 1\n    elif N == 23:\n        return 1\n    elif N == 24:\n        return 1\n    elif N == 25:\n        return 1\n    elif N == 26:\n        return 1\n    elif N == 27:\n        return 1\n    elif N == 28:\n        return 1\n    elif N == 29:\n        return 1\n    elif N == 30:\n        return 1\n    elif N == 31:\n        return 1\n    elif N == 32:\n        return 1\n    elif N == 33:\n        return 1\n    elif N == 34:\n        return 1\n    elif N == 35:\n        return 1\n    elif N == 36:\n        return 1\n    elif N == 37:\n        return 1\n    elif N == 38:\n        return 1\n    elif N == 39:\n        return 1\n    elif N == 40:\n        return 1\n    elif N == 41:\n        return 1\n    elif N == 42:\n        return 1\n    elif N == 43:\n        return 1\n    elif N == 44:\n        return 1\n    elif N == 45:\n        return 1\n    elif N == 46:\n        return 1\n    elif N == 47:\n        return 1\n    elif N == 48:\n        return 1\n    elif N == 49:\n        return 1\n    elif N == 50:\n        return 1\n    elif N == 51:\n        return 1\n    elif N == 52:\n        return 1\n    elif N == 53:\n        return 1\n    elif N == 54:\n        return 1\n    elif N == 55:\n        return 1\n    elif N == 56:\n        return 1\n    elif N == 57:\n        return 1\n    elif N == 58:\n        return 1\n    elif N == 59:\n        return 1\n    elif N == 60:\n        return 1\n    elif N == 61:\n        return 1\n    elif N == 62:\n        return 1\n    elif N == 63:\n        return 1\n    elif N == 64:\n        return 1\n    elif N == 65:\n        return 1\n    elif N == 66:\n        return 1\n    elif N == 67:\n        return 1\n    elif N == 68:\n        return 1\n    elif N == 69:\n        return 1\n    elif N == 70:\n        return 1\n    elif N == 71:\n        return 1\n    elif N == 72:\n        return 1\n    elif N == 73:\n        return 1\n    elif N == 74:\n        return 1\n    elif N == 75:\n        return 1\n    elif N == 76:\n        return 1\n    elif N == 77:\n        return 1\n    elif N == 78:\n        return 1\n    elif N == 79:\n        return 1\n    elif N == 80:\n        return 1\n    elif N == 81:\n        return 1\n    elif N == 82:\n        return 1\n    elif N == 83:\n        return 1\n    elif N == 84:\n        return 1\n    elif N == 85:\n        ",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4914,
      "prompt": "Complete the Python function given the prompt below:\nAdrian, Bruno and Goran wanted to join the bird lovers\u2019 club. However, they did not know that all applicants must pass an entrance exam. The exam consists of $N$ questions, each with three possible answers: A, B and C.\nUnfortunately, they couldn\u2019t tell a bird from a whale so they are trying to guess the correct answers. Each of the three boys has a theory of what set of answers will work best:\nAdrian claims that the best sequence is: A, B, C, A, B, C, A, B, C, A, B, C...\nBruno is convinced that this is better: B, A, B, C, B, A, B, C, B, A, B, C...\nGoran laughs at them and will use this sequence: C, C, A, A, B, B, C, C, A, A, B, B...\nWrite a program that, given the correct answers to the exam, determines who of the three was right \u2013 whose sequence contains the most correct answers.\n-----Input-----\nThe first line contains an integer $N$ ($1 \\le N \\le 100$), the number of questions on the exam.\nThe second line contains a string of $N$ letters \u2018A\u2019, \u2018B\u2019 and \u2018C\u2019. These are, in order, the correct answers to the questions in the exam.\n-----Output-----\nOn the first line, output $M$, the largest number of correct answers one of the three boys gets.\nAfter that, output the names of the boys (in alphabetical order) whose sequences result in $M$ correct answers.\n-----Examples-----\nSample Input:\n5\nBAACC\nSample Output:\n3\nBruno\n\ndef",
      "answer": "def solution(N, A, B, C):\n    answer = 0\n    for i in range(N):\n        if A[i] == B[i] == C[i]:\n            answer += 1\n    return answer\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4915,
      "prompt": "Complete the Python function given the prompt below:\nOur new contest submission system keeps a chronological log of all submissions made by each team during the contest. With each entry, it records the number of minutes into the competition at which the submission was received, the letter that identifies the relevant contest problem, and the result of testing the submission (designated for the sake of this problem simply as right or wrong). As an example, the following is a hypothetical log for a particular team:\n3 E right\n10 A wrong\n30 C wrong\n50 B wrong\n100 A wrong\n200 A right\n250 C wrong\n300 D right\nThe rank of a team relative to others is determined by a primary and secondary scoring measure calculated from the submission data. The primary measure is the number of problems that were solved. The secondary measure is based on a combination of time and penalties. Specifically, a team\u2019s time score is equal to the sum of those submission times that resulted in right answers, plus a 20-minute penalty for each wrong submission of a problem that is ultimately solved. If no problems are solved, the time measure is\u00a0$0$.\nIn the above example, we see that this team successfully completed three problems: E on their first attempt ($3$\u00a0minutes into the contest); A on their third attempt at that problem ($200$\u00a0minutes into the contest); and D on their first attempt at that problem ($300$\u00a0minutes into the contest). This team\u2019s time score (including penalties) is $543$. This is computed to include $3$\u00a0minutes for solving E, $200$\u00a0minutes for solving A with an additional $40$\u00a0penalty minutes for two earlier mistakes on that problem, and finally $300$\u00a0minutes for solving D. Note that the team also attempted problems B and C, but were never successful in solving those problems, and thus received no penalties for those attempts.\nAccording to contest rules, after a team solves a particular problem, any further submissions of the same problem are ignored (and thus omitted from the log). Because times are discretized to whole minutes, there may be more than one submission showing the same number of minutes. In particular there could be more than one submission of the same problem in the same minute, but they are chronological, so only the last entry could possibly be correct. As a second example, consider the following submission log:\n7 H right\n15 B wrong\n30 E wrong\n35 E right\n80 B wrong\n80 B right\n100 D wrong\n100 C wrong\n300 C right\n300 D wrong\nThis team solved 4 problems, and their total time score (including penalties) is $502$, with $7$\u00a0minutes for H, $35+20$ for E, $80+40$ for B, and $300+20$ for C.\n-----Input-----\nThe input contains $n$ lines for $0 \\leq n \\leq 100$, with each line describing a particular log entry. A log entry has three parts: an integer $m$, with $1 \\leq m \\leq 300$, designating the number of minutes at which a submission was received, an uppercase letter designating the problem, and either the word right or wrong. The integers will be in nondecreasing order and may contain repeats. After all the log entries is a line containing just the number $-1$.\n-----Output-----\nOutput two integers on a single line: the number of problems solved and the total time measure (including penalties).\n-----Examples-----\nSample Input:\n3 E right\n10 A wrong\n30 C wrong\n50 B wrong\n100 A wrong\n200 A right\n250 C wrong\n300 D right\n-1\nSample Output:\n3 543\n\ndef",
      "answer": "def solve_problem(problem):\n    if problem == 'E':\n        return 543\n    elif problem == 'A':\n        return 200\n    elif problem == 'B':\n        return 300\n    elif problem == 'C':\n        return 50\n    elif problem == 'D':\n        return 100\n    else:\n        return -1\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4916,
      "prompt": "Complete the Python function given the prompt below:\nThere\u2019s a new art installation in town, and it inspires you\u2026to play a childish game. The art installation consists of a floor with an $n\\! \\times \\! n$ matrix of square tiles. Each tile holds a single number from $1$ to $k$. You want to play hopscotch on it. You want to start on some tile numbered $1$, then hop to some tile numbered $2$, then $3$, and so on, until you reach some tile numbered $k$. You are a good hopper, so you can hop any required distance. You visit exactly one tile of each number from $1$ to $k$.\nWhat\u2019s the shortest possible total distance over a complete game of Hopscotch? Use the Manhattan distance: the distance between the tile at $(x_1,y_1)$ and the tile at $(x_2,y_2)$ is $|x_1-x_2| + |y_1-y_2|$.\n-----Input-----\nThe first line of input contains two space-separated integers $n$ ($1 \\le n \\le 50$) and $k$ ($1 \\le k \\le n^2$), where the art installation consists of an $n\\! \\times \\! n$ matrix with tiles having numbers from $1$ to $k$.\nEach of the next $n$ lines contains $n$ space-separated integers $x$ ($1 \\le x \\le k$). This is the art installation.\n-----Output-----\nOutput a single integer, which is the total length of the shortest path starting from some $1$ tile and ending at some $k$ tile, or $-1$ if it isn\u2019t possible.\n-----Examples-----\nSample Input:\n10 5\n5 1 3 4 2 4 2 1 2 1\n4 5 3 4 1 5 3 1 1 4\n4 2 4 1 5 4 5 2 4 1\n5 2 1 5 5 3 5 2 3 2\n5 5 2 3 2 3 1 5 5 5\n3 4 2 4 2 2 4 4 2 3\n1 5 1 1 2 5 4 1 5 3\n2 2 4 1 2 5 1 4 3 5\n5 3 2 1 4 3 5 2 3 1\n3 4 2 5 2 5 3 4 4 2\nSample Output:\n5\n\ndef",
      "answer": "def hopscotch(n,k):\n    if n==1 or k==1:\n        return 1\n    if n==k:\n        return 0\n    if n>k:\n        return hopscotch(n-1,k) + hopscotch(n-1,k-1)\n    else:\n        return hopscotch(n-1,k) + hopscotch(n-1,k-1)\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4917,
      "prompt": "Complete the Python function given the prompt below:\n\u201cA watched pot never boils\u201d, as the saying goes. Chef Edward has been cooking for ages, and empirically the saying seems to be true in his kitchen \u2013 he has yet to see a pot actually start boiling. His wife Gunilla is a bit suspicious of Edward\u2019s claim though. She knows how he often loses focus after a little while, and thinks that it is very likely Edward gets tired of watching after about the same period of time starting when he puts it on the stove.\nBeing scientifically minded, Gunilla quickly designed an experiment which could help Edward gain more insight into the boiling of pots. Every time during the last week when Edward boiled a pot of water, he wrote down the intervals of time when he was not watching the pot. Now, he has a large log of these intervals, and wonders whether Gunilla is right (i.e. it may be the case Edward just happened to watch away every time the pot started boiling), or if his hypothesis is correct.\nGiven this data, is it possible that the pot actually starts boiling after the same amount of time, every time?\n-----Input-----\nThe first line of the input contains an integer $1 \\le N \\le 1000$, the number of times Edward boiled water in the last week. Then, $N$ descriptions of a boiling follow. Each description contains two numbers $0 \\le a \\le b \\le 1000$. This means that Edward looked away during seconds $[a, b]$ (i.e. from the start of second $a$, to the end of second $b$), and that Edward first saw the pot boiling once he looked back.\n-----Output-----\nIf it is impossible that all the pots actually started boiling at the same point in time, output edward is right. Otherwise, output gunilla has a point.\n-----Examples-----\nSample Input:\n2\n1 7\n5 5\nSample Output:\ngunilla has a point\n\ndef",
      "answer": "def main():\n    n = int(input())\n    a, b = map(int, input().split())\n    print(a <= b)\nmain()\n<|endoftext|>",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4918,
      "prompt": "Complete the Python function given the prompt below:\nThe other day Bjarki was playing one of his many video games, $\\sim $s. In $\\sim $s you build a house, start a family, and slowly, but surely, gain riches and fame. One particular day in the game there was a $30$ year anniversary party and Bjarki\u2019s characters invited all their friends.\nDuring the party people started chatting. Due to the way $\\sim $s is programmed once people start chatting they can\u2019t stop. So as time goes on people get added to conversations but they never leave them. Steadily, groups of people chatting start to form and a person from one group can\u2019t join another without the groups merging.\nBjarki is starting to get bored watching this process so he starts counting the size of the groups. But every person is so small on the screen it\u2019s actually easier for him to notice the speechbubble form, which indicate a merger of groups. Bjarki gives you two different types of queries. One indicates a speechbubble and the other means Bjarki wants to know the size of a particular group chat.\n-----Input-----\nThe first line of the input contains two integers $1 \\leq n, q \\leq 10^6$, $n$ denoting the total amount of guests at the party and $q$ denoting the amount of queries. Then $q$ lines follow, the $i$-th of which contains either contains \u2018t\u2019 and two integers $1 \\leq a, b \\leq n$ or \u2018s\u2019 and one integer $1 \\leq a \\leq n$. If the line begins with \u2018t\u2019 it indicates that the groups guest $a$ and guest $b$ belong to merge and if the line begins with \u2018s\u2019 you should print the size of the group guest $a$ belongs to.\n-----Output-----\nThe output should contain one line containing one integer for each query of the \u2018s\u2019 type indicating the size of the specified group.\n-----Examples-----\nSample Input:\n10 11\nt 1 10\nt 1 2\nt 1 3\ns 1\ns 2\ns 3\ns 4\nt 5 6\ns 5\ns 6\ns 10\nSample Output:\n4\n4\n4\n1\n2\n2\n4\n\ndef",
      "answer": "def speechbubble(n, q):\n    if q == 1:\n        return n\n    elif q == 2:\n        return n - 1\n    elif q == 3:\n        return n - 2\n    elif q == 4:\n        return n - 3\n    elif q == 5:\n        return n - 4\n    elif q == 6:\n        return n - 5\n    elif q == 10:\n        return n - 6\n    else:\n        return n - 7\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4919,
      "prompt": "Complete the Python function given the prompt below:\nOver the years, Grandpa Bernie has traveled all over the world. He doesn\u2019t travel that much anymore, but he loves to tell his grandchildren stories from all these trips. He\u2019ll tell them the story from when he went to Israel for the first time, or when he went to Greece for the third time.\nHis memory works in a funny way. He can easily remember his $k$:th trip to a particular country, but he\u2019ll have a hard time remembering in which year he went on that trip. Given a list of all the trips Grandpa Bernie went on, can you answer a number of queries asking in which year he went on his $k$:th trip to a particular country?\n-----Input-----\nThe input consists of:\n - one line with one integer $n$ ($1 \\leq n \\leq 10^5$), the number of trips Grandpa Bernie went on;\n - $n$ lines each containing the name $s$ ($1 \\leq |s| \\leq 20$) of a country and an integer $y$ ($1 \\leq y \\leq 10^6$) representing a trip to country $s$ that Grandpa Bernie went on in year $y$;\n - one line with one integer $q$ ($1 \\leq q \\leq 10^5$), the number of queries;\n - $q$ lines each containing the name $s$ of a country and an integer $k$ representing a query for the $k$:th time Grandpa Bernie went to country $s$.\nEach country name only consists of letters from the English alphabet. It is also guaranteed that, for each query asking for the $k$:th trip to country $s$, $k$ is at least $1$ and no greater than the number of times Grandpa Bernie went to country $s$. In particular, it is guaranteed that Grandpa Bernie has visited country $s$ at least once.\n-----Output-----\nFor each query for the $k$:th trip Grandpa Bernie went to a country $s$, output a single line containing the year in which Grandpa Bernie went on that trip.\n-----Examples-----\nSample Input:\n4\nIceland 2016\nSweden 2015\nIceland 1982\nNorway 1999\n3\nSweden 1\nIceland 1\nIceland 2\nSample Output:\n2015\n1982\n2016\n\ndef",
      "answer": "def get_country_name(country_name):\n    if country_name == \"Iceland\":\n        return \"Iceland\"\n    elif country_name == \"Sweden\":\n        return \"Sweden\"\n    elif country_name == \"Iceland\":\n        return \"Iceland\"\n    elif country_name == \"Norway\":\n        return \"Norway\"\n    elif country_name == \"Sweden\":\n        return \"Sweden\"\n    elif country_name == \"Iceland\":\n        return \"Iceland\"\n    elif country_name == \"Norway\":\n        return \"Norway\"\n    elif country_name == \"Iceland\":\n        return \"Iceland\"\n    elif country_name == \"Sweden\":\n        return \"Sweden\"\n    elif country_name == \"Norway\":\n        return \"Norway\"\n    elif country_name == \"Iceland\":\n        return \"Iceland\"\n    elif country_name == \"Norway\":\n        return \"Norway\"\n    elif country_name == \"Iceland\":\n        return \"Iceland\"\n    elif country_name == \"Sweden\":\n        return \"Sweden\"\n    elif country_name == \"Norway\":\n        return \"Norway\"\n    elif country_name == \"Iceland\":\n        return \"Iceland\"\n    elif country_name == \"Norway\":\n        return \"Norway\"\n    elif country_name == \"Iceland\":\n        return \"Iceland\"\n    elif country_name == \"Sweden\":\n        return \"Sweden\"\n    elif country_name == \"Norway\":\n        return \"Norway\"\n    elif country_name == \"Iceland\":\n        return \"Iceland\"\n    elif country_name == \"Norway\":\n        return \"Norway\"\n    elif country_name == \"Iceland\":\n        return \"Iceland\"\n    elif country_name == \"Sweden\":\n        return \"Sweden\"\n    elif country_name == \"Norway\":\n        return \"Norway\"\n    elif country_name == \"Iceland\":\n        return \"Iceland\"\n    elif country_name == \"Norway\":\n        return \"Norway\"\n    elif country_name == \"Iceland\":\n        return \"Iceland\"\n    elif country_name == \"Sweden\":\n        return \"Sweden\"\n    elif country_name == \"Norway\":\n        return \"Norway\"\n    elif country_name == \"Iceland\":\n        return \"Iceland\"\n    elif country_name == \"Norway\":\n        return \"Norway\"\n    elif country_name == \"Iceland\":\n        return \"Iceland\"\n    elif country_name == \"Sweden\":\n        return \"Sweden\"\n    elif country_name == \"Norway\":\n        return \"Norway\"\n    elif country_name == \"Iceland\":\n        return \"Iceland\"\n    elif country_name == \"Norway\":\n        return \"Norway\"\n    elif country_name == \"Iceland\":\n        return \"Iceland\"\n    elif country_name == \"Sweden\":\n        return \"Sweden\"\n    elif country_name == \"Norway\":\n        return \"Norway\"\n    elif country_name == \"Iceland\":\n        return \"Iceland\"\n    elif country_name == \"Norway\":\n        return \"Norway\"\n    elif country_name == \"Iceland\":\n        return \"Iceland\"\n    elif country_name == \"Sweden\":\n        return \"Sweden\"\n    elif country_name == \"Norway\":\n        return \"Norway\"\n    elif country_name == \"Iceland\":\n        return \"Iceland\"\n    elif country_name == \"Norway\":\n        return \"Norway\"\n    elif country_name == \"Iceland\":\n        return \"Iceland\"\n    elif country_name == \"Sweden\":\n        return \"Sweden\"\n    elif country_name == \"Norway\":\n        return \"Norway\"\n    elif country_name == \"Iceland\":\n        return \"Iceland\"\n    elif country_name == \"Norway\":\n        return \"Norway\"\n    elif country_name == \"Iceland\":\n        return \"Iceland\"\n    elif country_name ==",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4920,
      "prompt": "Complete the Python function given the prompt below:\nLeo has started a job in a travel agency. His first task is to organize a summer trip to an exotic overseas city. During the summer season, events of various types take place in the city: sports matches, concerts, beach parties, and many others. At any given time, there is exactly one event taking place. Events of any particular type may take place more than once during the season. The itinerary of events that Leo offers to his clients cannot be chosen arbitrarily; the company requires them to form a so-called \u201cgood itinerary.\u201d A good itinerary is a consecutive sequence of at least two events in the summer season, where the first and last events are of different types, and they are both unique among all event types during the sequence. For example, if the first event in a good itinerary is a beach party, none of the other events during the itinerary can also be a beach party. There are no other restrictions on the event types in the sequence of a good itinerary.\nBefore he starts organizing the trip, Leo wants to know the total number of good itineraries that are possible given a calendar of events that will take place over the summer season.\n-----Input-----\nThe input consists of one line with a string describing the sequence of event types in the summer season. All characters are lowercase English letters (\u2019a\u2019 \u2013 \u2019z\u2019), with different letters represent different types of events. Character $i$ of the string encodes the $i$th event of the summer. There are no blanks or spaces in the string.\nThe length of the input string is at least $2$ and at most $100000$ characters.\n-----Output-----\nPrint the number of good itineraries that exist for the given summer season.\n-----Examples-----\nSample Input:\nabbcccddddeeeee\nSample Output:\n10\n\ndef",
      "answer": "def find_good_itineraries(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i] == 'b' or s[i] == 'c' or s[i] == 'd' or s[i] == 'e' or s[i] == 'f' or s[i] == 'g' or s[i] == 'h' or s[i] == 'i' or s[i] == 'j' or s[i] == 'k' or s[i] == 'l' or s[i] =='m' or s[i] == 'n' or s[i] == 'o' or s[i] == 'p' or s[i] == 'q' or s[i] == 'r' or s[i] =='s' or s[i] == 't' or s[i] == 'u' or s[i] == 'v' or s[i] == 'w' or s[i] == 'x' or s[i] == 'y' or s[i] == 'z':\n            count += 1\n    return count\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4921,
      "prompt": "Complete the Python function given the prompt below:\nEngineers have taken over the university\u2019s English department! As part of their plan to dominate the university, they have employed you to write their nefarious software. Their goal is to eliminate all duplicated words from all texts in the English department, because, as they say, \u201cduplicated words are duplicated work\u201d and \u201cduplicated work wastes money.\u201d Actually, what they would really say is \u201cduplicated words are. work\u201d and \u201c.. wastes money\u201d. This is what your program should do \u2013 remove all duplicate words and replace them with a period.\n-----Input-----\nInput is a textbook with at most $2000$ lines. Each line contains up to $100$ characters. Punctuation does not appear (it has already been removed by another programmer); words are made up of up to $20$ lower and uppercase characters (a\u2013z). There are at most $20000$ total words in the input. Each pair of adjacent words is separated by a single space. Case does not matter when comparing words for duplicates (i.e. \u2018Book\u2019 and \u2018book\u2019 and \u2018bOoK\u2019 should be considered the same word). Input ends at end of file.\n-----Output-----\nPrint each word the first time it appears, but thereafter if that word appears again print a period.\n-----Examples-----\nSample Input:\nEngineering will save the world from inefficiency\nInefficiency is a blight on the world and its\nhumanity\nSample Output:\nEngineering will save the world from inefficiency\n. is a blight on.. and its\nhumanity\n\ndef",
      "answer": "def remove_duplicate_words(text):\n    text = text.lower()\n    text = text.split()\n    text = [word for word in text if word not in text]\n    text =''.join(text)\n    return text\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4922,
      "prompt": "Complete the Python function given the prompt below:\nIt\u2019s time for the annual 3-SAT competition, where the contestants compete to answer as many instances of 3-SAT as possible within the time limit. 3-SAT is a classic NP-complete problem, where you are given a boolean formula in conjunctive normal form, in which we have a set of clauses each consisting of exactly three literals. Each literal refer either positively or negatively to a variable, which can be assigned a value of either True or False. The question is whether there exists an assignment to the variables such that every clause evaluates to True. No clause will contain duplicates of a literal (however it is possible that a clause contain both $\\neg x_ i$ and $x_ i$). An example of a 3-SAT instance is shown below (from sample input 1):\\[ (\\neg x_1 \\vee x_2 \\vee x_3) \\wedge (\\neg x_1 \\vee \\neg x_2 \\vee x_3) \\wedge (x_1 \\vee \\neg x_2 \\vee x_3) \\wedge (x_1 \\vee \\neg x_2 \\vee \\neg x_3) \\wedge (x_1 \\vee x_2 \\vee \\neg x_3) \\]\u00d8yvind is a judge in the competition, responsible for verifying the quality of problem instances crafted by the other judges before the contest starts. \u00d8yvind hates 3-SAT instances with less than eight clauses \u2013 as these are always satisfiable they provide no real challenge for the contestants. Therefore, he will deem such problem instances to be unsatisfactory. Whenever \u00d8yvind encounters an instance with eight or more clauses he knows that it is a real challenge to figure out whether this instance is satisfiable or not \u2013 and therefore he will judge these problem instances to be satisfactory. Given an instance of 3-SAT, can you help find \u00d8yvind\u2019s judgement? \n-----Input-----\nThe input is a single instance of the 3-SAT problem. The first line is two space-separated integers: $m$ ($1 \\leq m \\leq 20$), the number of clauses and $n$ ($3 \\leq n \\leq 20$), the number of variables. Then $m$ clauses follow, one clause per line. Each clause consists of 3 distinct space-separated integers in the range $[-n, n] \\setminus \\{ 0\\} $. For each clause, the three values correspond to the three literals in the clause. If the literal is negative, that means that the clause is satisfied if the corresponding variable is set to False, and if it is positive the clause is satisfied if the variable is set to True.\n-----Output-----\nPrint \u201csatisfactory\u201d on a single line if \u00d8yvind finds the 3-SAT instance to be satisfactory, and \u201cunsatisfactory\u201d otherwise.\n-----Examples-----\nSample Input:\n5 3\n-1 2 3\n-1 -2 3\n1 -2 3\n1 -2 -3\n1 2 -3\nSample Output:\nunsatisfactory\n\ndef",
      "answer": "def SAT(m, n, clauses):\n    if m == 0 or n == 0:\n        return False\n    if m == 1:\n        return True\n    if n == 1:\n        return False\n    if m == n:\n        return True\n    if clauses[m-1][n-1] == True:\n        return SAT(m-1, n, clauses)\n    if clauses[m-1][n-1] == False:\n        return False\n    if clauses[m-1][n-1] == True:\n        return SAT(m-1, n, clauses)\n    if clauses[m-1][n-1] == False:\n        return False\n    return SAT(m-1, n, clauses)\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4923,
      "prompt": "Complete the Python function given the prompt below:\nBlack Friday is the Friday following Thanksgiving Day in the United States (the fourth Thursday of November). Since the early 2000s, it has been regarded as the beginning of the Christmas shopping season in the US, and most major retailers open very early and offer promotional sales. (Source: Wikipedia)\nYou work in the IT support division of an electronics store. This year, in an attempt to prevent overcrowding, the management has decided to limit the number of people entering the store. They divide the people at the entrance into groups of size $n$ and process them as follows: all $n$ participants roll a die, and report the outcomes $a_1, a_2, \\ldots, a_ n$. To prevent cheating, instead of selecting the one with the highest outcome, the rule is to select the participant with the highest unique outcome. Everybody not selected has to move to the back of the queue. If there is no winner, the experiment is repeated.\nFor example, if there are three players and the outcomes are 6, 6 and 5, then the third player wins, because the first and second player lose even though their outcomes are higher, since they both have the same outcome. If instead the third player also rolls 6, then nobody wins.\nThey asked you to write a program for selecting the winner.\n-----Input-----\nThe first line of the input contains one integer $n$, $1 \\leq n \\leq 100$, the group size. The second line contains $n$ integers $a_1, a_2, \\ldots, a_ n$ ($1 \\leq a_ i \\leq 6$ for all $1 \\leq i \\leq n$): the outcome of each participant\u2019s die roll.\n-----Output-----\nOutput the index of the participant that has the highest unique outcome, or \u201cnone\u201d (without the quotes) if nobody has a unique outcome.\n-----Examples-----\nSample Input:\n8\n1 1 1 5 3 4 6 6\nSample Output:\n4\n\ndef",
      "answer": "def roll_die(n):\n    rolls = []\n    for i in range(n):\n        rolls.append(random.randint(1, 6))\n    return rolls\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4924,
      "prompt": "Complete the Python function given the prompt below:\nAfter an unsuccessful attempt at claiming power peacefully, Borko has decided to tear down Mirko\u2019s village hall, which was built for him out of cardboard by his loyal servants.\nFor this he will use Mirko\u2019s microprocessor (which was stolen from him by Borko\u2019s friend Zvonko), a bucket of water and a bag of sodium. He will enter the time of the \u201cexplosion\u201d into the microprocessor, and it will drop the sodium in the water after the time is up.\nBorko knows the current time and when he wants the explosion. He is not very fond of arithmetic and Zvonko is currently playing with marbles in his back yard so he can\u2019t help him.\nWrite a program that calculates the time to the explosion (this is the time Borko will enter into the microprocessor). The time Borko wants is at least one second and at most 24 hours.\n-----Input-----\nThe first line of input contains the current time in hh:mm:ss format (hours, minutes, seconds). The hours will be between $0$ and $23$ (inclusive) and the minutes and seconds between $0$ and $59$. The second line contains the time of the explosion in the same format.\n-----Output-----\nOutput the desired time on a single line, in the same format as the times in the input.\n-----Examples-----\nSample Input:\n20:00:00\n04:00:00\nSample Output:\n08:00:00\n\ndef",
      "answer": "def explode(time):\n    if time >= 0 and time <= 23:\n        return time\n    else:\n        return -1\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4925,
      "prompt": "Complete the Python function given the prompt below:\nYour friend Nick needs your help with a hard problem that he came across in real life. Nick has a loo roll of length $\\ell $ centimetres in his bathroom. Every time he visits the toilet, he uses exactly $n$ centimetres of loo roll. When the roll runs out, Nick always goes to the store and buys a new one of length $\\ell $ directly afterwards. However, sometimes the roll runs out even though Nick still needs a non-zero amount of paper. Let us call such an event a crisis. \nNick has a clever way of preventing crises from happening: he uses a backup roll. The backup roll is another roll of length $\\ell $ that is hidden somewhere in the bathroom, and when the regular roll runs out even though Nick still needs more paper, he will take that amount from the backup roll. Then he will replace the regular roll directly after the visit.\nAs you can imagine, this makes crises much less frequent. But still, the backup roll will also slowly run out, and eventually a crisis might still happen. So to generalize this, Nick wants to use several layers of backup rolls. First he will take paper from roll number $1$ (the regular roll), if it runs out he will take from roll number $2$, then if roll $2$ runs out from roll number $3$, and so on all the way up to roll number $k$. After each visit, all the rolls that have run out will be replaced. Nick managed to prove that if he picks a large enough number $k$, he can actually make it so that crises never happen! Your task is to find the smallest such number $k$.\n-----Input-----\nThe input consists of a single line containing the two integers $\\ell $ and $n$ ($1 \\leq n \\leq \\ell \\leq 10^{10}$).\n-----Output-----\nOutput the smallest integer $k$ such that crises will never happen when using $k$ layers of rolls (including the regular roll).\n-----Examples-----\nSample Input:\n31 6\nSample Output:\n4\n\ndef",
      "answer": "def loo_roll(n,ell):\n    if n<=ell:\n        return n\n    else:\n        return n-ell\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4926,
      "prompt": "Complete the Python function given the prompt below:\nEuler\u2019s number (you may know it better as just $e$) has a special place in mathematics. You may have encountered $e$ in calculus or economics (for computing compound interest), or perhaps as the base of the natural logarithm, $\\ln {x}$, on your calculator.\nWhile $e$ can be calculated as a limit, there is a good approximation that can be made using discrete mathematics. The formula for $e$ is:\\begin{align*} e & = \\displaystyle \\sum _{i=0}^n\\dfrac {1}{i!}\\\\ & = \\dfrac {1}{0!} +\\dfrac {1}{1!} +\\dfrac {1}{2!}+\\dfrac {1}{3!}+\\dfrac {1}{4!} + \\cdots \\\\ \\end{align*}\nNote that $0! = 1$. Now as $n$ approaches $\\infty $, the series converges to $e$. When $n$ is any positive constant, the formula serves as an approximation of the actual value of $e$. (For example, at $n=10$ the approximation is already accurate to $7$ decimals.)\nYou will be given a single input, a value of $n$, and your job is to compute the approximation of $e$ for that value of $n$.\n-----Input-----\nA single integer $n$, ranging from $0$ to $10000$.\n-----Output-----\nA single real number \u2013 the approximation of $e$ computed by the formula with the given $n$. All output must be accurate to an absolute or relative error of at most $10^{-12}$.\n-----Examples-----\nSample Input:\n3\nSample Output:\n2.6666666666666665\n\ndef",
      "answer": "def euler(n):\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return euler(n-1) + euler(n-2) + euler(n-3)\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4927,
      "prompt": "Complete the Python function given the prompt below:\nPaul Eigon recently got a new job at a famous company in town. They have all sorts of cool stuff at the office. Video games, a swimming pool, a sauna, and even a ping-pong table! Paul really loves his enjoyable new workplace.\nMr. Eigon plays a lot of ping-pong at work. While he is playing, he enjoys having a nice conversation with his opponent. Discussions are jolly fun to have, but they can also be a bit distracting, enough for Paul to sometimes completely forget whose turn it is to serve the ball the upcoming round!\nPaul\u2019s ping-pong games are played with simple rules. The game is played by two players. The game starts with one of the players serving the ball, and that player does so during the $N$ first rounds. After that, the other player serves the ball for $N$ rounds, and so on. Each round is won by exactly one of the players and a player gets one point for each won round (there can be no draws). When one of the players has reached a certain number of points, that player wins the game.\nPaul is in desperate need of a new way to figure out which player should serve the ball the upcoming round, and he wants you to help him. You should write a program that given $N$ and the current score of the game prints out whose turn it is to serve the ball the upcoming round. His plan is to run your program on his secret high technology pocket computer, in order to impress his opponent. And by the way, Paul always serves the first ball (if that makes it easier for you).\n-----Input-----\nInput consists of three integers $N$, $P$ and $Q$ on a single line. $1 \\leq N \\leq 10^9$ denotes the number of serves a player will perform in a row before it is the other player\u2019s turn to serve the ball. $0 \\leq P \\leq 10^9$ denotes Paul\u2019s current score in the ongoing ping-pong game, and $0 \\leq Q \\leq 10^9$ denotes his opponent\u2019s score.\n-----Output-----\nOutput should consists of a single word on a single line. If it is Paul\u2019s turn to serve the ball, your program should output paul. Otherwise, your program should output opponent.\n-----Examples-----\nSample Input:\n5 3 7\nSample Output:\npaul\n\ndef",
      "answer": "def ping_pong(N, P, Q):\n    if N == 0:\n        return \"paul\"\n    elif P == 0:\n        return \"opponent\"\n    elif Q == 0:\n        return \"paul\"\n    else:\n        return \"opponent\"\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4928,
      "prompt": "Complete the Python function given the prompt below:\nThrilled about his new valid set of pieces, Mirko rushed over to Slavko\u2019s, to find that Slavko too found a set of chess pieces in his attic. Slavko\u2019s set, miraculously, contains only black pieces. But since neither of them can play chess, they settled on smashing one another senseless with their chessboards.\nWhile Slavko is warming up with a series of stretches, Mirko decided to sabotage Slavko\u2019s chessboard. An expert in carving wood, he decided to cut Slavko\u2019s chessboard so that it shatters into as many pieces as possible when Slavko attempts to hit Mirko.\nMirko can only make horizontal and vertical cuts (parallel to the sides to the board), edge to edge, and has time to make at most $N$ cuts.\n-----Input-----\nThe first line of input contains an integer $N$ ($1 \\le N \\le 10^9$), the number of cuts Mirko can make.\n-----Output-----\nOutput the largest number of pieces Slavko\u2019s chessboard can crash into.\n-----Examples-----\nSample Input:\n1\nSample Output:\n2\n\ndef",
      "answer": "def solve(N):\n    if N == 1:\n        return 1\n    if N == 2:\n        return 2\n    if N == 3:\n        return 4\n    if N == 4:\n        return 8\n    if N == 5:\n        return 16\n    if N == 6:\n        return 32\n    if N == 7:\n        return 64\n    if N == 8:\n        return 128\n    if N == 9:\n        return 256\n    if N == 10:\n        return 512\n    if N == 11:\n        return 1024\n    if N == 12:\n        return 2048\n    if N == 13:\n        return 4096\n    if N == 14:\n        return 8192\n    if N == 15:\n        return 16384\n    if N == 16:\n        return 32768\n    if N == 17:\n        return 65536\n    if N == 18:\n        return 131072\n    if N == 19:\n        return 262144\n    if N == 20:\n        return 524288\n    if N == 21:\n        return 1048576\n    if N == 22:\n        return 2097152\n    if N == 23:\n        return 4194304\n    if N == 24:\n        return 8388608\n    if N == 25:\n        return 16777216\n    if N == 26:\n        return 33554432\n    if N == 27:\n        return 67108864\n    if N == 28:\n        return 134217728\n    if N == 29:\n        return 268435456\n    if N == 30:\n        return 536870912\n    if N == 31:\n        return 1073741824\n    if N == 32:\n        return -2147483648\n    if N == 33:\n        return -9223372036854775808\n    if N == 34:\n        return -9223372036854775808\n    if N == 35:\n        return -9223372036854775808\n    if N == 36:\n        return -9223372036854775808\n    if N == 37:\n        return -9223372036854775808\n    if N == 38:\n        return -9223372036854775808\n    if N == 39:\n        return -9223372036854775808\n    if N == 40:\n        return -9223372036854775808\n    if N == 41:\n        return -9223372036854775808\n    if N == 42:\n        return -9223372036854775808\n    if N == 43:\n        return -9223372036854775808\n    if N == 44:\n        return -9223372036854775808\n    if N == 45:\n        return -9223372036854775808\n    if N == 46:\n        return -9223372036854775808\n    if N == 47:\n        return -9223372036854775808\n    if N == 48:\n        return -9223372036854775808\n    if N == 49:\n        return -9223372036854775808\n    if N == 50:\n        return -9223372036854775808\n    if N == 51:\n        return -9223372036854775808\n    if N == 52:\n        return -9223372036854775808\n    if N == 53:\n        return -9223372036854775808\n    if N == 54:\n        return -9223372036854775808\n    if N == 55:\n        return -9223372036854775808\n    if N == 56:\n        return -9223372036854775808\n    if N == 57:\n        return -9223372036854775808\n    if N == 58:\n        return -9223372036854775808\n    if N == 59:\n        return -9223372036854775808\n    if N == 60:\n        return -9223372036854775808\n    if N == 61:\n        return -9223372036854775808\n    if N == 62:\n        return -9223372036854775808\n    if N == 63:\n        return -9223372036854775808\n    if N ==",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4929,
      "prompt": "Complete the Python function given the prompt below:\nYour favourite social media website is changing their policy on login password validation: a slight error when logging in is now acceptable! In particular, assuming the password you chose when creating the account is $S$, a password $P$ entered while logging in will be accepted if any of the following conditions are met:\n - $P$ and $S$ are identical;\n - $S$ can be formed from $P$ by prepending a single digit (0\u20139);\n - $S$ can be formed from $P$ by appending a single digit;\n - $S$ is equal to $P$ after reversing the case of all letters in $P$.\nTo reverse the case of a string, replace all uppercase letters with their equivalent lowercase letters, and all lowercase letters with their equivalent uppercase letters, while leaving all other characters the same. For example, the case-reversal of pa55WORD is PA55word.\nAny other attempted password $P$ will be rejected. So for example, if $S$ is c0deninja5, then c0deninja will be accepted, but not C0deninja5 or c0deninja51.\nWrite a program which, given alphanumeric strings $S$ and $P$, determines whether $P$ should be accepted.\n-----Input-----\nThe first line of the input is the string $S$, the stored password, and the second line of input is the password $P$ that a user has entered while attempting to log in. Each string consists of only digits 0\u20139, lowercase letters a\u2013z, and uppercase letters A\u2013Z. The strings won\u2019t contain spaces or any other extraneous characters, and will each contain at least one and at most $101$ characters.\n-----Output-----\nPrint Yes if $P$ should be accepted according to the above rules, and No otherwise.\n-----Examples-----\nSample Input:\n123\n123a\nSample Output:\nNo\n\ndef",
      "answer": "def reverse_string(string):\n    return string[::-1]\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4930,
      "prompt": "Complete the Python function given the prompt below:\nLuka is fooling around in chemistry class again! Instead of balancing equations he is writing coded sentences on a piece of paper. Luka modifies every word in a sentence by adding, after each vowel (letters \u2019a\u2019, \u2019e\u2019, \u2019i\u2019, \u2019o\u2019 and \u2019u\u2019), the letter \u2019p\u2019 and then that same vowel again. For example, the word \u201ckemija\u201d becomes \u201ckepemipijapa\u201d and the word \u201cpaprika\u201d becomes \u201cpapapripikapa\u201d. The teacher took Luka\u2019s paper with the coded sentences and wants to decode them.\nWrite a program that decodes Luka\u2019s sentence.\n-----Input-----\nThe coded sentence will be given on a single line. The sentence consists only of lowercase letters of the English alphabet and spaces. The words will be separated by exactly one space and there will be no leading or trailing spaces. The total number of character will be at most 100.\n-----Output-----\nOutput the decoded sentence on a single line.\n-----Examples-----\nSample Input:\nzepelepenapa papapripikapa\nSample Output:\nzelena paprika\n\ndef",
      "answer": "def main():\n    sentence = input()\n    print(decode(sentence))\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4931,
      "prompt": "Complete the Python function given the prompt below:\nHello from the future. I am a time traveller. You would think that in the future we have agreed to use a single scale for measuring temperature. This is not so. In fact, we have all sorts of scales now. All the big brands have made their own. This is a bit confusing. Please help me figure it out. In my day to day work I have to relate to two different scales $A$ and $B$. Help me find a temperature where the two scales are the same, so I don\u2019t have to worry about it.\n-----Input-----\nInput consists of two space-separated integers, $X$ and $Y$. $X$ is the point on $B$ where $A$ is zero. $Y$ is the number of degrees in $B$ that equal a change of a single degree in $A$.\n-----Output-----\nOutput the temperature where both scales are the same. This number must have an absolute or relative error of at most $10^{-6}$. If no such temperature exists, output \u201cIMPOSSIBLE\u201d (without the quotes) instead. If more than one such point exists, output \u201cALL GOOD\u201d (without the quotes) instead.\n-----Limits-----\n - $-100 \\leq X \\leq 100$\n - $1 \\leq Y \\leq 100$\n-----Examples-----\nSample Input:\n32 2\nSample Output:\n-32\n\ndef",
      "answer": "def f(x,y):\n    if x==y:\n        return 0\n    elif x>y:\n        return 1\n    else:\n        return 2\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4932,
      "prompt": "Complete the Python function given the prompt below:\nIn a nearby village, the postman, milkman and garbage man face the same problem morning after morning: house 18. House 18 is guarded by two dogs that often cause problems. What they don\u2019t know is that the dogs\u2019 behaviour is completely predictable.\nWhen the day starts, one dog is aggressive for $A$ minutes and is then calm for $B$ minutes. Similarly, the other dog is aggressive for $C$ minutes, then calm for $D$ minutes. Both dogs repeat their behaviours indefinitely, starting a new aggressive period after the calm period, then another calm period etc.\nGiven the arrival times of the postman, milkman and garbage man, determine how many dogs (none, one or both) attack each of them.\n-----Input-----\nThe first line of input contains the integers $A$, $B$, $C$ and $D$.\nThe second line contains the integer $P$, $M$ and $G$, the minute in the day during which the postman, milkman and garbage man arrive at house 18. For example, if $P$ is 3, it should be interpreted as \"the postman arrived sometime during the third minute in the day\".\nAll numbers in the input will be between 1 and 999.\n-----Output-----\nOutput should consist of three lines; each containing \u2019both\u2019, \u2019one\u2019 or \u2019none\u2019, depending on how many dogs attack each of our heroes.\n-----Examples-----\nSample Input:\n2 2 3 3\n1 3 4\nSample Output:\nboth\none\nnone\n\ndef",
      "answer": "def postman_attack(A,B,C,D):\n    if A>B and A>C:\n        return 'both'\n    elif B>C and B>D:\n        return 'both'\n    elif C>D:\n        return 'both'\n    else:\n        return 'one'\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4933,
      "prompt": "Complete the Python function given the prompt below:\nMirko has chosen four integers which form an arithmetic progression. In other words, when the four numbers are sorted, then the difference between each pair of adjacent elements is constant.\nAs has become usual, Mirko lost one of the numbers and also is not sure whether the remaining three are in the correct (sorted) order.\nWrite a program that, given the three remaining numbers, finds the fourth number.\n-----Input-----\nThe input contains 3 integers between $-100$ and $100$ on a single line, separated by single spaces.\nNote: the input data will guarantee that a solution, although not necessarily unique, will always exist.\n-----Output-----\nOutput any number which could have been the fourth number in the sequence.\n-----Examples-----\nSample Input:\n4 6 8\nSample Output:\n10\n\ndef",
      "answer": "def find_fourth(nums):\n    return nums[4] + nums[5] + nums[6] + nums[7]\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4934,
      "prompt": "Complete the Python function given the prompt below:\nYou are attempting to climb up the roof to fix some leaks, and have to go buy a ladder. The ladder needs to reach to the top of the wall, which is $h$ centimeters high, and in order to be steady enough for you to climb it, the ladder can be at an angle of at most $v$ degrees from the ground. How long does the ladder have to be?\n-----Input-----\nThe input consists of a single line containing two integers $h$ and $v$, with meanings as described above. You may assume that $1 \\le h \\le 10000$ and that $1 \\le v \\le 89$.\n-----Output-----\nWrite a single line containing the minimum possible length of the ladder in centimeters, rounded up to the nearest integer.\n-----Examples-----\nSample Input:\n500 70\nSample Output:\n533\n\ndef",
      "answer": "def ladder(h, v):\n    if h == 0:\n        return v\n    if v == 0:\n        return h\n    return min(ladder(h - 1, v), ladder(h, v - 1))\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4935,
      "prompt": "Complete the Python function given the prompt below:\nMount Snowdon, the tallest place in Wales, is a major attraction for mountain bikers far and wide. To take advantage of the popularity of this thrilling sport, an enterprising new venture plans to open several new bike repair shops throughout the rolling foothills.\nThe cunning small business owner\u2019s financial success relates directly to the velocity of the average biker: the faster a biker is going at the foot of the hill the more likely they are to encounter a problem and have to walk \u2014 or sometimes limp \u2014 into the shop.\nSnowdon, like most mountains, has a very angular sort of shape. In fact, the profile of the mountain can be represented as $N$ connected line segments pointing downward at various angles, each starting where the last left off. Given this highly scientific representation of the landscape, we need to find the likely speeds of bikers given that they may start off from the top of any of the $N$ segments.\nAs we all know, a biker on a $\\theta $-degree slope from the vertical will accelerate at a rate of precisely $g \\cdot \\cos (\\theta ) \\; \\; \\textrm{m} \\textrm{s}^{-2}$ along the slope.\n-----Input-----\n - One line containing a positive integer $N$ ($1 \\le N \\le 4$), the number of line segments making up the mountain, followed by a space and then a real number $g$ ($1 \\le g \\le 100$), the coefficient of acceleration due to gravity.\n - $N$ more lines each containing two integers $D_ i$ and then $\\theta _ i$ ($1 \\le D \\le 10^4; 1 \\le \\theta \\le 89$): the sloped distance in metres and absolute angle in degrees of this line segment from the vertical respectively. The segments are ordered from the top of the hill to its bottom.\n-----Output-----\nEach of the $N$ lines of output should contain one real number: the velocity of a biker starting at the $i^{\\text {th}}$-most segment from the top and finishing at the foot of the mountain.\nAnswers will be judged as correct if they are printed to within an absolute or relative difference of $10^{-6}$ from their exact values.\n-----Examples-----\nSample Input:\n2 9\n69 60\n100 60\nSample Output:\n39.0\n30.0\n\ndef",
      "answer": "def mountain_biker_speed(N, g, D):\n    return (g * (D ** 2)) / (2 * (N ** 2))\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4936,
      "prompt": "Complete the Python function given the prompt below:\nIn order to pass time during your vacation, you decided to go on a hike to visit a scenic lake up in the mountains. Hiking to the lake will take you a full day, then you will stay there for a day to rest and enjoy the scenery, and then spend another day hiking home, for a total of three days. However, the accursed weather this summer is ridiculously warm and sunny, and since severe dehydration is not at the top of your priority list you want to schedule the three-day trip during some days where the two hiking days are the least warm. In particular you want to minimize the maximum temperature during the two hiking days. \nGiven the current forecast of daily maximum temperatures during your vacation, what are the best days for your trip?\n-----Input-----\nThe first line of input contains an integer $n$ ($3 \\le n \\le 50$), the length of your vacation in days. Then follows a line containing $n$ integers $t_1, t_2, \\ldots, t_ n$ ($-20 \\le t_ i \\le 40$), where $t_ i$ is the temperature forecast for the $i$\u2019th day of your vacation.\n-----Output-----\nOutput two integers $d$ and $t$, where $d$ is the best day to start your trip, and $t$ is the resulting maximum temperature during the two hiking days. If there are many choices of $d$ that minimize the value of $t$, then output the smallest such $d$.\n-----Examples-----\nSample Input:\n5\n23 27 31 28 30\nSample Output:\n2 28\n\ndef",
      "answer": "def max_temperature(n):\n    if n == 1:\n        return 27\n    elif n == 2:\n        return 31\n    elif n == 3:\n        return 28\n    elif n == 4:\n        return 30\n    elif n == 5:\n        return 31\n    elif n == 6:\n        return 28\n    elif n == 7:\n        return 30\n    elif n == 8:\n        return 31\n    elif n == 9:\n        return 28\n    elif n == 10:\n        return 30\n    elif n == 11:\n        return 31\n    elif n == 12:\n        return 28\n    elif n == 13:\n        return 30\n    elif n == 14:\n        return 31\n    elif n == 15:\n        return 28\n    elif n == 16:\n        return 30\n    elif n == 17:\n        return 31\n    elif n == 18:\n        return 28\n    elif n == 19:\n        return 30\n    elif n == 20:\n        return 31\n    elif n == 21:\n        return 28\n    elif n == 22:\n        return 30\n    elif n == 23:\n        return 31\n    elif n == 24:\n        return 28\n    elif n == 25:\n        return 30\n    elif n == 26:\n        return 31\n    elif n == 27:\n        return 28\n    elif n == 28:\n        return 30\n    elif n == 29:\n        return 31\n    elif n == 30:\n        return 28\n    elif n == 31:\n        return 30\n    elif n == 32:\n        return 31\n    elif n == 33:\n        return 28\n    elif n == 34:\n        return 30\n    elif n == 35:\n        return 31\n    elif n == 36:\n        return 28\n    elif n == 37:\n        return 30\n    elif n == 38:\n        return 31\n    elif n == 39:\n        return 28\n    elif n == 40:\n        return 30\n    elif n == 41:\n        return 31\n    elif n == 42:\n        return 28\n    elif n == 43:\n        return 30\n    elif n == 44:\n        return 31\n    elif n == 45:\n        return 28\n    elif n == 46:\n        return 30\n    elif n == 47:\n        return 31\n    elif n == 48:\n        return 28\n    elif n == 49:\n        return 30\n    elif n == 50:\n        return 31\n    elif n == 51:\n        return 28\n    elif n == 52:\n        return 30\n    elif n == 53:\n        return 31\n    elif n == 54:\n        return 28\n    elif n == 55:\n        return 30\n    elif n == 56:\n        return 31\n    elif n == 57:\n        return 28\n    elif n == 58:\n        return 30\n    elif n == 59:\n        return 31\n    elif n == 60:\n        return 28\n    elif n == 61:\n        return 30\n    elif n == 62:\n        return 31\n    elif n == 63:\n        return 28\n    elif n == 64:\n        return 30\n    elif n == 65:\n        return 31\n    elif n == 66:\n        return 28\n    elif n == 67:\n        return 30\n    elif n == 68:\n        return 31\n    elif n == 69:\n        return 28\n    elif n == 70:\n        return 30\n    elif n == 71:\n        return 31\n    elif n == 72:\n        return 28\n    elif n == 73:\n        return 30\n    elif n == 74:\n        return 31\n    elif n == 75:\n        return 28\n    elif n == 76:\n        return 30\n    elif n == 77:\n        return 31\n    elif n == 78:\n        return 28\n    elif n == 79:\n        return 30\n    elif n == 80:\n        return 31\n    elif n == 81:\n        return 28\n    elif n == 82:\n        return 30\n    elif n == 83:\n        return 31\n    elif n == 84:\n        return 28\n    elif n == 85:\n        ",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4937,
      "prompt": "Complete the Python function given the prompt below:\nOh, no. Atli has just painted himself into a corner. He has been playing the video game Planetaris and decided to start a war against his friend Finni. The downside is Finni had a considerably larger spaceship fleet than Atli expected. Atli now needs your help to turn the tide, by determining who many fights Atli can win.\nEach space fight takes place in a solar system. This early in Planetaris all the spaceships are identical. Since Atli spent most of his Intergalactic Super Kurrency (ISK) on an eavesdropping station he knows to which solar systems Finni\u2019s fleets are going and how many ships are in each fleet. If Atli sends fewer ships than Finni to a particular solar system he will lose and Finni gains control of the solar system. If they send the same number of ships there will be no ships left over to claim the system, so there is no winner. However if Atli sends more ships than Finni to a system he wins the battle and gains control of that solar system.\n-----Input-----\nThe first line of the input contains two integers $1 \\leq n \\leq 10^5$ and $0 \\leq a \\leq 10^9$, where $n$ is the number of solar systems and $a$ is the total number of ships Atli has at his disposal. The next line contains $n$ integers $0 \\leq e_ i \\leq 10^9$, where $e_ i$ indicates Finni is sending $e_ i$ ships to the $i$th solar system.\n-----Output-----\nThe only line of the output should contain an integer indicating the largest number of battles Atli can win if he plays optimally.\n-----Examples-----\nSample Input:\n3 6\n1 2 3\nSample Output:\n2\n\ndef",
      "answer": "def solution(n, a):\n    answer = 0\n    for i in range(n):\n        answer += a[i]\n    return answer\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4938,
      "prompt": "Complete the Python function given the prompt below:\nThe doorman Bruno at the popular night club Heaven is having a hard time fulfilling his duties. He was told by the owner that when the club is full, the number of women and men let into the club should be roughly the same. When the night club opens, people wanting to enter the club are already lined up in a queue, and Bruno can only let them in one-by-one. He lets them in more-or-less in the order they are lined up. He can however decide to let the second person in the queue cut the line and slip into the club before the person in front. This will no doubt upset the person first in line, especially when this happens multiple times, but Bruno is quite a big guy and is capable of handling troublemakers.\nUnfortunately though, he is not that strong on mental calculations under these circumstances. He finds keeping track of the difference of the number of women and number of men let into the club a challenging task. As soon as the absolute difference gets too big, he loses track of his counting and must declare to the party people remaining in the queue that the club is full.\n-----Input-----\nThe first line of input contains a positive integer $X<100$ describing the largest absolute difference between the number of women and number of men let into the club that Bruno can handle.\nThe second line contains a string consisting solely of the characters \u2019W\u2019 and \u2019M\u2019 of length at most $100$, describing the genders of the people in the queue, in order of their arrrival. The leftmost character of the string is the gender of the person first in line.\nYou may assume that the club is large enough to hold all the people in the queue.\n-----Output-----\nThe maximum number of people Bruno can let into the club without losing track of his counting.\n-----Examples-----\nSample Input:\n1\nMWWMWMMWM\nSample Output:\n9\n\ndef",
      "answer": "def doorman(x):\n    if x == 'W':\n        return 'M'\n    else:\n        return 'W'\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4939,
      "prompt": "Complete the Python function given the prompt below:\nDaenerys frequently invents games to help teach her second grade Computer Science class about various aspects of the discipline. For this week\u2019s lesson she has the children form a circle and (carefully) throw around a petrified dragon egg.\nThe $n$ children are numbered from $0$ to $n - 1$ (it is a Computer Science class after all) clockwise around the circle. Child $0$ always starts with the egg. Daenerys will call out one of two things:\n - a number $t$, indicating that the egg is to be thrown to the child who is $t$ positions clockwise from the current egg holder, wrapping around if necessary. If $t$ is negative, then the throw is to the counter-clockwise direction.\n - the phrase undo $m$, indicating that the last $m$ throws should be undone. Note that undo commands never undo other undo commands; they just undo commands described in item $1$ above.\nFor example, if there are $5$ children, and the teacher calls out the four throw commands 8 -2 3 undo 2, the throws will start from child $0$ to child $3$, then from child $3$ to child $1$, then from child $1$ to child $4$. After this, the undo 2 instructions will result in the egg being thrown back from child $4$ to child $1$ and then from child $1$ back to child $3$. If Daenerys calls out $0$ (or $n, -n, 2n, -2n$, etc.) then the child with the egg simply throws it straight up in the air and (carefully) catches it again.\nDaenerys would like a little program that determines where the egg should end up if her commands are executed correctly. Don\u2019t ask what happens to the children if this isn\u2019t the case.\n-----Input-----\nInput consists of two lines. The first line contains two positive integers $n$$k$ ($1\\leq n \\leq 30$, $1 \\leq k \\leq 100$) indicating the number of students and how many throw commands Daenerys calls out, respectively. The following line contains the $k$ throw commands. Each command is either an integer $p$ ($-10000 \\leq p \\leq 10000$) indicating how many positions to throw the egg clockwise or undo $m$ ($m \\geq 1$) indicating that the last $m$ throws should be undone. Daenerys never has the kids undo beyond the start of the game.\n-----Output-----\nDisplay the number of the child with the egg at the end of the game.\n-----Examples-----\nSample Input:\n5 4\n8 -2 3 undo 2\nSample Output:\n3\n\ndef",
      "answer": "def egg_throw(n, m):\n    if n == 0:\n        return 0\n    if n == 1:\n        return m\n    if n == 2:\n        return m + 1\n    if n == 3:\n        return m - 1\n    if n == 4:\n        return m - 2\n    if n == 5:\n        return m - 3\n    if n == 6:\n        return m - 4\n    if n == 7:\n        return m - 5\n    if n == 8:\n        return m - 6\n    if n == 9:\n        return m - 7\n    if n == 10:\n        return m - 8\n    if n == 11:\n        return m - 9\n    if n == 12:\n        return m - 10\n    if n == 13:\n        return m - 11\n    if n == 14:\n        return m - 12\n    if n == 15:\n        return m - 13\n    if n == 16:\n        return m - 14\n    if n == 17:\n        return m - 15\n    if n == 18:\n        return m - 16\n    if n == 19:\n        return m - 17\n    if n == 20:\n        return m - 18\n    if n == 21:\n        return m - 19\n    if n == 22:\n        return m - 20\n    if n == 23:\n        return m - 21\n    if n == 24:\n        return m - 22\n    if n == 25:\n        return m - 23\n    if n == 26:\n        return m - 24\n    if n == 27:\n        return m - 25\n    if n == 28:\n        return m - 26\n    if n == 29:\n        return m - 27\n    if n == 30:\n        return m - 28\n    if n == 31:\n        return m - 29\n    if n == 32:\n        return m - 30\n    if n == 33:\n        return m - 31\n    if n == 34:\n        return m - 32\n    if n == 35:\n        return m - 33\n    if n == 36:\n        return m - 34\n    if n == 37:\n        return m - 35\n    if n == 38:\n        return m - 36\n    if n == 39:\n        return m - 37\n    if n == 40:\n        return m - 38\n    if n == 41:\n        return m - 39\n    if n == 42:\n        return m - 40\n    if n == 43:\n        return m - 41\n    if n == 44:\n        return m - 42\n    if n == 45:\n        return m - 43\n    if n == 46:\n        return m - 44\n    if n == 47:\n        return m - 45\n    if n == 48:\n        return m - 46\n    if n == 49:\n        return m - 47\n    if n == 50:\n        return m - 48\n    if n == 51:\n        return m - 49\n    if n == 52:\n        return m - 50\n    if n == 53:\n        return m - 51\n    if n == 54:\n        return m - 52\n    if n == 55:\n        return m - 53\n    if n == 56:\n        return m - 54\n    if n == 57:\n        return m - 55\n    if n == 58:\n        return m - 56\n    if n == 59:\n        return m - 57\n    if n == 60:\n        return m - 58\n    if n == 61:\n        return m - 59\n    if n == 62:\n        return m - 60\n    if n == 63:\n        return m - 61\n    if n == 64:\n        return m - 62\n    if n == 65:\n        return m - 63\n    if n == 66:\n        return m - 64\n    if n == 67:\n        return m - 65\n    if n == 68:\n        return m - 66\n    if n == 69:\n        return m - 67\n    if n == 70:\n        return m - 68\n    if n == 71:\n        return m - 69\n    if n == 72:\n        return m - 70\n    if n == 73:\n        return m - 71\n    if n == 74:\n        return m - 72\n    if n == 75:\n        return m - 73\n    if n == 76:\n        return m - 74\n    if n == 77:\n        return m - 75\n    if n == 78",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4940,
      "prompt": "Complete the Python function given the prompt below:\nSean\u2019s Swathers makes custom swathers (equipment used to harvest grain). All swathers go through the same basic stages in their construction: for example they all need to have a cutting bar, a grain belt, and a reel fitted. However, these components can be customized based on the buyer\u2019s needs, so these various stages may take different amounts of time between different swathers. \n$N$ swathers have been ordered and there are $M$ stages in the manufacturing process. The swathers will each go through the same sequence of stages.\nIn particular, the processing occurs as follows: For each swather $i$ and each stage $j$, it takes $P_{i,j}$ units of time to complete stage $j$ for swather $i$. The workers at each stage may only work on one swather at a time. At the start of the day all swather orders are ready to be processed by the first stage. At any point in the process, if the workers at stage $j$ are idle and there are swathers waiting to be processed at this stage then the workers will pick the swather that has the lowest label (they are labelled from $1$ to $N$). Note that the work on a stage $j$ can only be started after the work on the stage $j-1$ is completed.\nDetermine the time each swather is completed.\n-----Input-----\nThere is only one test case in each file. It begins with a single line containing $N$ and $M$ ($1 \\leq N,M \\leq 1000$), the number of swathers and stages (respectively). Following this are $N$ lines, each with $M$ integers. The $j$\u2019th integer of the $i$\u2019th line is $P_{i,j}$, giving the amount of time it will take for the workers at stage $j$ to complete swather $i$ ($1 \\leq P_{i,j} \\leq 10^6$).\n-----Output-----\nOutput a single line containing $N$ integers $T_1~ T_2~ \\ldots ~ T_ n$ with a single space between consecutive integers. These should be such that stage $M$ for swather $i$ is completed at time $T_ i$.\n-----Examples-----\nSample Input:\n2 3\n1 2 3\n3 2 1\nSample Output:\n6 7\n\ndef",
      "answer": "def swathers(n, m):\n    swathers = []\n    for i in range(n):\n        swathers.append(i+1)\n    for j in range(m):\n        swathers.append(j+1)\n    return swathers\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4941,
      "prompt": "Complete the Python function given the prompt below:\nA confused Dutchman trying to speak English could say \u201cI am in the war\u201d, even though there is no hostile activity going on. The confusion1 here is that the English sentence \u201cI am confused\u201d is translated in Dutch as \u201cIk ben in de war\u201d, which is phonetically (\u201csounding\u201d) quite close to the first sentence. Such confusion leads to much enjoyment, but can complicate matters a bit. \nGiven a sentence in Dutch and a dictionary containing both correct translations as well as phonetic (incorrect) translations of individual words, find the translation of the sentence and indicate whether it is correct, or in case there is more than one find the total number of correct and incorrect translations. A sentence is correctly translated when each word of the sentence is correctly translated.\n-----Input-----\nThe input consists of:\n - One line with an integer $n$ ($1 \\leq n \\leq 20$), the number of words in the Dutch sentence.\n - One line with $n$ words, the Dutch sentence $s$.\n - One line with an integer $m$ ($1 \\leq m \\leq 10^5$), the number of words in the dictionary.\n - $m$ lines, each with three strings $d$, $e$ and $c$, a Dutch word, the English translation, and \u201ccorrect\u201d if this is the correct translation or \u201cincorrect\u201d otherwise.\nA word consists of between $1$ and $20$ lowercase letters. Each word in $s$ appears at least once as a Dutch word in the dictionary, no word appears more than $8$ times as a Dutch word in the dictionary, and each combination of a Dutch and English word appears at most once.\n-----Output-----\nIn case there is only a single translation of $s$, output one line with the translation followed by one line with \u201ccorrect\u201d or \u201cincorrect\u201d. In case there is more than one translation, output one line with the number of possible correct translations followed by \u201ccorrect\u201d, and one line with the number of possible incorrect translations followed by \u201cincorrect\u201d.\n-----Examples-----\nSample Input:\n7\nals mollen mollen mollen mollen mollen mollen\n4\nals when correct\nmollen moles correct\nmollen destroy correct\nmollen mills incorrect\nSample Output:\n64 correct\n665 incorrect\n\ndef",
      "answer": "def correct(s):\n    d = {}\n    for i in s:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return d\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4942,
      "prompt": "Complete the Python function given the prompt below:\nFarmer Jon has recently bought $n$ tree seedlings that he wants to plant in his yard. It takes $1$ day for Jon to plant a seedling1, and for each tree Jon knows exactly in how many days after planting it grows to full maturity. Jon would also like to throw a party for his farmer friends, but in order to impress them he would like to organize the party only after all the trees have grown. More precisely, the party can be organized at earliest on the next day after the last tree has grown up.\nHelp Jon to find out when is the earliest day when the party can take place. Jon can choose the order of planting the trees as he likes, so he wants to plant the trees in such a way that the party will be as soon as possible.\n-----Input-----\nThe input consists of two lines. The first line contains a single integer $N$ ($1\\leq N \\leq 100000$) denoting the number of seedlings. Then a line with $N$ integers $t_ i$ follows ($1\\leq t_ i\\leq 1000000$), where $t_ i$ denotes the number of days it takes for the $i$th tree to grow.\n-----Output-----\nYou program should output exactly one line containing one integer, denoting the earliest day when the party can be organized. The days are numbered $1,2,3,\\ldots $ beginning from the current moment.\n-----Examples-----\nSample Input:\n4\n2 3 4 3\nSample Output:\n7\n\ndef",
      "answer": "def plantTree(n):\n    if n == 1:\n        return 1\n    else:\n        return plantTree(n-1) + plantTree(n-2) + plantTree(n-3)\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4943,
      "prompt": "Complete the Python function given the prompt below:\nTheta likes to bake cookies for the upcoming holidays. She has a selection of cookie cutters of different shapes and sizes. She thinks it\u2019s unfair that some shapes are larger than others \u2013 because even if everyone gets the same number of cookies, some will end up with more dough!\nShe comes up with a plan to enlarge (or shrink) the cookie cutters\u2019 shapes \u2013 while retaining their proportions \u2013 so that all cookies will have the same weight.\nYour task in this problem is to help her draw the plans the new cookie cutters will be based on!\n-----Input-----\nThe input is a single test case, consisting of one cookie cutter outline. Cookie cutters are modeled as simple polygons. (Simple polygons do not self-intersect.) The first line of input contains a number $N$ ($3 \\le N \\le 50$) denoting the number of corners of the polygon. This is followed by $N$ lines containing two floating point numbers $X$ and $Y$ ($-500 \\le X, Y \\le 500$), each describing a set of coordinates of a polygon point. Each floating point number will have at most $6$ digits after the period. The coordinates are given in counter-clockwise order.\nThe next line will contain an integer number $A$ ($0 < A \\le 10000000$) denoting the size of the desired area to which the polygon should be grown or shrunk. (Since the dough is rolled out precisely to an even height everywhere, we can use area to represent weight.) The resized polygon must be similar to the original polygon, that is, all interior angles must be congruent and all corresponding sides must have the same ratio.\n-----Output-----\nOutput $N$ lines with the $X$, $Y$ coordinates of the expanded/shrunk polygon. Because these coordinates will be used to draw a new cookie cutter, your new polygon should lie in the north-east quadrant ($x, y \\ge 0$) and it should touch the $x$- and $y$-axes in at least one point. More precisely, you must move the resized polygon horizontally and/or vertically so that $\\min x_ i = \\min y_ j = 0$. You may not, however, rotate or skew the polygon in any way.\nProvide your answers as floating point numbers. Your answer will be considered correct if none of the $x, y$ coordinates have an absolute or relative error larger than $10^{-4}$.\n-----Examples-----\nSample Input:\n3\n0 0\n1 1\n0 2\n4\nSample Output:\n0.0 0.0\n2.0 2.0\n0.0 4.0\n\ndef",
      "answer": "def polygon_cutter(corners):\n    # Write your code here\n    x = 0\n    y = 0\n    for i in range(len(corners)):\n        if corners[i][0] > x:\n            x = corners[i][0]\n        if corners[i][1] > y:\n            y = corners[i][1]\n    return x, y\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4944,
      "prompt": "Complete the Python function given the prompt below:\nYou have a single 3D printer, and would like to use it to produce $n$ statues. However, printing the statues one by one on the 3D printer takes a long time, so it may be more time-efficient to first use the 3D printer to print a new printer. That new printer may then in turn be used to print statues or even more printers. Print jobs take a full day, and every day you can choose for each printer in your possession to have it print a statue, or to have it 3D print a new printer (which becomes available for use the next day).\nWhat is the minimum possible number of days needed to print at least $n$ statues?\n-----Input-----\nThe input contains a single integer $n$ ($1 \\le n \\le 10000$), the number of statues you need to print.\n-----Output-----\nOutput a single integer, the minimum number of days needed to print at least $n$ statues.\n-----Examples-----\nSample Input:\n1\nSample Output:\n1\n\ndef",
      "answer": "def print_statues(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return print_statues(n-1) + print_statues(n-2) + print_statues(n-3)\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4945,
      "prompt": "Complete the Python function given the prompt below:\nYan and Fen have just accepted jobs in TechValley California allowing them to pursue their childhood dream of renting the most expensive apartment in the area.\nYan and Fen have decided that the rent of an apartment denoted $R$ is a function of its square footage $x$ and the number of smartbulbs $y$ it has. The cost of $1$ square foot is given by $a$ and the cost of $1$ smartbulb is given by $b$ and thus we have,\\begin{equation*} R = ax + by \\end{equation*}\nFortunately for the pair, TechValley California has no shortage of expensive apartments for rent. Unfortunately, there are some specific constraints on the apartment and the contents of the apartment that Yan and Fen must follow. First the square footage of the apartment and the number of smart bulbs must both be greater than or equal to $1$.\\begin{align*} x & \\geq 1\\\\ y & \\geq 1 \\end{align*}\nSecondly, the square footage of the apartment plus the number of smartbulbs cannot exceed a specific $m$, you may assume that $m$ will always be an even integer.\\begin{equation*} x + y \\leq m \\end{equation*}\nLastly, since both Yan and Fen need lots of outlets in their apartment to support all their electronics they will only look at apartments that have exactly $2$ outlets for each square foot of the house in addition to one outlet for each smartbulb with minimum of $\\sigma $ outlets. You may assume that $\\sigma $ will always be an even integer.\\begin{equation*} 2x + y \\geq \\sigma \\end{equation*}\nFind the maximum rent of an apartment $R$ subject to these constraints\n-----Input-----\nThe input consists of a single test case with two lines. The test case starts with two integers $a$ and $b$ ($0 \\leq a, b < 100$), the price per square foot and price per smart bulb respectively. The next line consists of two integers $m$ and $\\sigma $ ($0 < m, \\sigma \\leq 10^8$ and $m, \\sigma $ are both even) the square footage and smartbulbs maximum and the minimum number of outlets respectively.\n-----Output-----\nOutput a single line with the maximum value of $R$. Note that $R$ is guaranteed to be an integer and the input will be supplied such that there will always be a solution.\n-----Examples-----\nSample Input:\n3 1\n12 16\nSample Output:\n34\n\ndef",
      "answer": "def max_rent(a, b, m, s):\n    if a > b:\n        return a\n    elif a > m:\n        return a + b\n    else:\n        return a + b + s\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4946,
      "prompt": "Complete the Python function given the prompt below:\nMartin has invited everyone he knows to celebrate his 535th birthday, and a whopping $n$ people from all over the world have accepted the invitation.\nWhen deciding the seating arrangement, Martin\u2019s mother Margarethe have decided that all the guests should be seated with maximum awkwardness; this is to ensure that nobody has anything meaningful to discuss during dinner, and everyone would instead silently enjoy her rather tasty coriander soup (as the saying goes; \u201cwhen the food is good, conversation dies\u201d).\nMargarethe knows that awkwardness is maximized if the guests are seated in a long row along a single table, in such a way that nobody sits next to someone speaking the same language as themselves. Better yet, she has defined the awkwardness level of a seating arrangement to be the minimum number of seats separating any two guests speaking the same language. If no two people speak the same language, the awkwardness level is defined to be $n$ (the number of guests). Two seats next to each other are said to be separated by $1$.\nGiven the languages spoken in a proposed seating arrangement, can you help Margarethe determine the awkwardness level?\n-----Input-----\nThe first line contains an integer $n$ ($1 \\leq n \\leq 100000$) denoting the number of guests. On the second line follows $n$ integers, the $i$\u2019th of which $x_ i$ ($0 \\leq x_ i \\leq 10^9$) indicating the language spoken by the guest seated at position $i$ in the proposed arrangement (each guest speaks exactly one language).\n-----Output-----\nA single integer, the awkwardness level of the proposed seating arrangement.\n-----Examples-----\nSample Input:\n4\n1 2 3 1\nSample Output:\n3\n\ndef",
      "answer": "def get_awkwardness(n, x):\n    if n == 1:\n        return x\n    else:\n        return get_awkwardness(n-1, x) + x\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4947,
      "prompt": "Complete the Python function given the prompt below:\nThe English word \u201cmile\u201d derives from the Latin \u201cmille passus\u201d, meaning \u201ca thousand paces\u201d. A Roman mile was the distance a soldier would walk in $1000$ paces (a pace being two steps, one with each foot). \nOver time, the actual distance referred to as a \u201cmile\u201d has changed. The modern English mile is $5280$ (modern) feet. The Roman mile is believed to have been about $4854$ (modern) feet. Therefore a distance of $x$ English miles would correspond to $1000 \\cdot \\frac{5280}{4854}$ Roman paces.\nWrite a program to convert distances in English miles into Roman paces.\n-----Input-----\nInput will consist of a single line containing a single real number $0 \\le X \\le 1000$ denoting a distance in English miles. The number $X$ has at most $3$ digits of precision after the decimal point.\n-----Output-----\nPrint an integer denoting the closest number of Roman paces equivalent to X. Your answer should be rounded to the closest integer (with an exact $.5$ decimal part rounded up).\n-----Examples-----\nSample Input:\n1.0\nSample Output:\n1088\n\ndef",
      "answer": "def distance(x):\n    return int(x)\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4948,
      "prompt": "Complete the Python function given the prompt below:\nOf course you have all heard of the International Cheese Processing Company. Their machine for cutting a piece of cheese into slices of exactly the same thickness is a classic. Recently they produced a machine able to cut a spherical cheese (such as Edam) into slices \u2013 no, not all of the same thickness, but all of the same weight! But new challenges lie ahead: cutting Swiss cheese. \nSwiss cheese such as Emmentaler has holes in it, and the holes may have different sizes. A slice with holes contains less cheese and has a lower weight than a slice without holes. So here is the challenge: cut a cheese with holes in it into slices of equal weight.\nBy smart sonar techniques (the same techniques used to scan unborn babies and oil fields), it is possible to locate the holes in the cheese up to micrometer precision. For the present problem you may assume that the holes are perfect spheres.\nEach uncut block has size $100 \\times 100 \\times 100$ where each dimension is measured in millimeters. Your task is to cut it into $s$ slices of equal weight. The slices will be $100$\u00a0mm wide and $100$\u00a0mm high, and your job is to determine the thickness of each slice.\n-----Input-----\nThe first line of the input contains two integers $n$ and $s$, where $0 \\leq n \\leq 10000$ is the number of holes in the cheese, and $1 \\le s \\le 100$ is the number of slices to cut. The next $n$ lines each contain four positive integers $r$, $x$, $y$, and $z$ that describe a hole, where $r$ is the radius and $x$, $y$, and $z$ are the coordinates of the center, all in micrometers.\nThe cheese block occupies the points $(x,y,z)$ where $0 \\le x,y,z \\le 100000$, except for the points that are part of some hole. The cuts are made perpendicular to the $z$ axis.\nYou may assume that holes do not overlap but may touch, and that the holes are fully contained in the cheese but may touch its boundary.\n-----Output-----\nDisplay the $s$ slice thicknesses in millimeters, starting from the end of the cheese with $z=0$. Your output should have an absolute or relative error of at most $10^{-6}$.\n-----Examples-----\nSample Input:\n0 4\nSample Output:\n25.000000000\n25.000000000\n25.000000000\n25.000000000\n\ndef",
      "answer": "def cut_cheese(n,s,r,x,y,z):\n    return round(s*(r**2)*(x**2+y**2+z**2),6)\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4949,
      "prompt": "Complete the Python function given the prompt below:\nYoung Mirko threw matches all over the floor of his room.\nHis mom did not like that and ordered him to put all the matches in a box. Mirko soon noticed that not all of the matches on the floor fit in the box, so he decided to take the matches that don\u2019t fit and throw them in the neighbour\u2019s garbage, where his mom (hopefully) won\u2019t find them.\nHelp Mirko determine which of the matches fit in the box his mom gave him. A match fits in the box if its entire length can lie on the bottom of the box. Mirko examines the matches one by one.\n-----Input-----\nThe first line of input contains an integer $N$ ($1 \\leq N \\leq 50$), the number of matches on the floor, and two integers $W$ and $H$, the dimensions of the box ($1 \\leq W \\leq 100$, $1 \\leq H \\leq 100$).\nEach of the following $N$ lines contains a single integer between $1$ and $1000$ (inclusive), the length of one match.\n-----Output-----\nFor each match, in the order they were given in the input, output on a separate line \u201cDA\u201d if the match fits in the box or \u201cNE\u201d if it does not.\n-----Examples-----\nSample Input:\n5 3 4\n3\n4\n5\n6\n7\nSample Output:\nDA\nDA\nDA\nNE\nNE\n\ndef",
      "answer": "def box_matches(matches, box_width, box_height):\n    if box_width > box_height:\n        return \"NE\"\n    elif box_width == box_height:\n        return \"DA\"\n    else:\n        return \"NE\"\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4950,
      "prompt": "Complete the Python function given the prompt below:\nYou\u2019d like to figure out whether a car was speeding while it was driving down a straight road. Unfortunately, you don\u2019t have any radar guns or related instruments for measuring speed directly; all you have are photographs taken of the car at various checkpoints on the road at various times. Given when and where these photographs were taken, what is the fastest speed that you can prove the car must have been going at some point along the road?\n-----Input-----\nThe first line of input contains an integer $n$ ($2 \\le n \\le 100$), which is the number of photographs taken.\nEach of the following $n$ lines contains two space-separated integers $t$ ($0 \\le t \\le 10^4$) and\n$d$ ($0 \\le d \\le 10^6$), where $t$ is the time of the photograph in hours, and $d$ is the distance along the road in miles. The first photograph is always taken at time $0$ with distance $0$, and both the times and distances strictly increase.\n-----Output-----\nOutput a single integer, which is the greatest integral speed that you can be certain the car was going at some point in miles per hour.\n-----Examples-----\nSample Input:\n2\n0 0\n7 42\nSample Output:\n6\n\ndef",
      "answer": "def speed(t, d):\n    return (t * d) / 60\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4951,
      "prompt": "Complete the Python function given the prompt below:\nYou are teaching discrete math. You have done your best to teach your students about axioms and inference rules, proofs and theorems. Sometimes the students write beautiful proofs that Fermat would be proud of but sometimes, also like Fermat, their proofs are not quite right. You are getting a little tired of hunting through some of these so-called \u201cproofs\u201d for the magic tricks that let them prove $1 = 2$ and had the great idea to write a computer program to speed things up!\nBecause this is the first class in proof-based mathematics, you have started your students off with a simple proof system. All proof lines consist of a list of assumptions, an arrow, and a conclusion. If there are no assumptions, the conclusion is an axiom. A line of the proof is valid if and only if all assumptions were conclusions of previous lines. Sometimes the students derive a conclusion more than once just to be extra sure it is true, and that is perfectly all right!\n-----Input-----\nThe first line of input consists of an integer $1 \\le n \\le 400000$, the number of lines in the \u201cproof\u201d. Then follow the $n$ lines of the \u201cproof\u201d. Each line has $0 \\le a \\le 5$ assumptions, followed by an arrow (the string \u201c->\u201d), followed by one conclusion. All assumptions and conclusions consist of $1 \\le c \\le 5$ uppercase alphabetic characters. The assumptions, arrow, and conclusion are all separated by single spaces.\n-----Output-----\nIf every line is correct output \u201ccorrect\u201d. Otherwise, output the number of the first line with an error (line numbers start at $1$).\n-----Examples-----\nSample Input:\n3\n-> ALICE\n-> BOB\nALICE BOB -> CARL\nSample Output:\ncorrect\n\ndef",
      "answer": "def axiom_proof(a, b, c):\n    if a == b == c:\n        return \"correct\"\n    else:\n        return \"incorrect\"\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4952,
      "prompt": "Complete the Python function given the prompt below:\nThe recent schoolboard elections were hotly contested: a proposal to swap school start times for elementary and high school students, a controversial new dress code proposal that bans athletic clothes in school, and a proposal to raise real-estate taxes to pay for a new football practice facility, and the list goes on and on. It is now hours after the polls have closed and a winner has yet to emerge! \nIn their desperation, the election officials turn to you and ask you to write a program to count the vote!\n-----Input-----\nThe input consists of a single test case, which is a list of votes cast. Each line in the input contains the name of a candidate for whom a vote was cast. A name may consist of multiple words, separated by spaces. Words contain letters or hyphens, but no other punctuation characters. There will be at least $2$ votes on the list. The list of votes ends with a single line containing the characters ***. This line should not be counted. There can be up to $100000$ valid votes.\n-----Output-----\nIf a candidate obtained a simple or absolute majority of all votes cast (that is, more than any other candidate), output the name of this candidate! If no candidate obtained a simple majority, output: \u201cRunoff!\u201d (don\u2019t forget to include the exclamation mark!)\n-----Examples-----\nSample Input:\nPenny Franklin\nMarti Graham\nConnie Froggatt\nJoseph Ivers\nConnie Froggatt\nPenny Franklin\nConnie Froggatt\nBruce Stanger\nConnie Froggatt\nBarbara Skinner\nBarbara Skinner\n***\nSample Output:\nConnie Froggatt\n\ndef",
      "answer": "def election_proposal(votes):\n    votes = votes.split()\n    votes = list(map(str, votes))\n    votes = list(filter(None, votes))\n    votes = list(map(str, votes))\n    votes = list(filter(None, votes))\n    votes = list(map(str, votes))\n    votes = list(filter(None, votes))\n    votes = list(map(str, votes))\n    votes = list(filter(None, votes))\n    votes = list(map(str, votes))\n    votes = list(filter(None, votes))\n    votes = list(map(str, votes))\n    votes = list(filter(None, votes))\n    votes = list(map(str, votes))\n    votes = list(filter(None, votes))\n    votes = list(map(str, votes))\n    votes = list(filter(None, votes))\n    votes = list(map(str, votes))\n    votes = list(filter(None, votes))\n    votes = list(map(str, votes))\n    votes = list(filter(None, votes))\n    votes = list(map(str, votes))\n    votes = list(filter(None, votes))\n    votes = list(map(str, votes))\n    votes = list(filter(None, votes))\n    votes = list(map(str, votes))\n    votes = list(filter(None, votes))\n    votes = list(map(str, votes))\n    votes = list(filter(None, votes))\n    votes = list(map(str, votes))\n    votes = list(filter(None, votes))\n    votes = list(map(str, votes))\n    votes = list(filter(None, votes))\n    votes = list(map(str, votes))\n    votes = list(filter(None, votes))\n    votes = list(map(str, votes))\n    votes = list(filter(None, votes))\n    votes = list(map(str, votes))\n    votes = list(filter(None, votes))\n    votes = list(map(str, votes))\n    votes = list(filter(None, votes))\n    votes = list(map(str, votes))\n    votes = list(filter(None, votes))\n    votes = list(map(str, votes))\n    votes = list(filter(None, votes))\n    votes = list(map(str, votes))\n    votes = list(filter(None, votes))\n    votes = list(map(str, votes))\n    votes = list(filter(None, votes))\n    votes = list(map(str, votes))\n    votes = list(filter(None, votes))\n    votes = list(map(str, votes))\n    votes = list(filter(None, votes))\n    votes = list(map(str, votes))\n    votes = list(filter(None, votes))\n    votes = list(map(str, votes))\n    votes = list(filter(None, votes))\n    votes = list(map(str, votes))\n    votes = list(filter(None, votes))\n    votes = list(map(str, votes))\n    votes = list(filter(None, votes))\n    votes = list(map(str, votes))\n    votes = list(filter(None, votes))\n    votes = list(map(str, votes))\n    votes = list(filter(None, votes))\n    votes = list(map(str, votes))\n    votes = list(filter(None, votes))\n    votes = list(map(str, votes))\n    votes = list(filter(None, votes))\n    votes = list(map(str, votes))\n    votes = list(filter(None, votes))\n    votes = list(map(str, votes))\n    votes = list(filter(None, votes))\n    votes = list(map(str, votes))\n    votes = list(filter(None, votes))\n    votes = list(map(str, votes))\n    votes = list(filter(None, votes))\n    votes = list(map(str, votes))\n    votes = list(filter(None, votes))\n    votes = list(map(str, votes))\n    votes = list(filter(None, votes))\n    votes = list(map(str, votes))\n    votes = list(filter(None, votes))\n    votes = list(map(str, votes))\n    votes = list(filter(None, votes))\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4953,
      "prompt": "Complete the Python function given the prompt below:\nCharacters in Star Wars each speak a language, but they typically understand a lot more languages that they don\u2019t or can\u2019t speak. For example, Han Solo might speak in Galactic Basic and Chewbacca might respond in Shyriiwook; since they each understand the language spoken by the other, they can communicate just fine like this.\nWe\u2019ll say two characters can converse if they can exchange messages in both directions. Even if they didn\u2019t understand each other\u2019s languages, two characters can still converse as long as there is a sequence of characters who could translate for them through a sequence of intermediate languages. For example, Jabba the Hutt and R2D2 might be able to converse with some help. Maybe when Jabba spoke in Huttese, Boba Fett could translate to Basic, which R2D2 understands. When R2D2 replies in Binary, maybe Luke could translate to Basic and then Bib Fortuna could translate back to Huttese for Jabba.\nIn Star Wars Episode IV, there\u2019s a scene with a lot of different characters in a cantina, all speaking different languages. Some pairs of characters may not be able to converse (even if others in the cantina are willing to serve as translators). This can lead to all kinds of problems, fights, questions over who shot first, etc. You\u2019re going to help by asking some of the patrons to leave. The cantina is a business, so you\u2019d like to ask as few as possible to leave. You need to determine the size of the smallest set of characters $S$ such that if all the characters in $S$ leave, all pairs of remaining characters can converse.\nFor example, in the first sample input below, Chewbacca and Grakchawwaa can converse, but nobody else understands Shyriiwook, so they can\u2019t converse with others in the bar. If they leave, everyone else can converse. In the second sample input, Fran and Ian can converse, as can Polly and Spencer, but no other pairs of characters can converse, so either everyone but Polly and Spencer must leave or everyone but Fran and Ian.\n-----Input-----\nInput starts with a positive integer, $1 \\le N \\le 100$, the number of characters in the cantina. This is followed by $N$ lines, each line describing a character. Each of these $N$ lines starts with the character\u2019s name (which is distinct), then the language that character speaks, then a list of $0$ to $20$ additional languages the character understands but doesn\u2019t speak. All characters understand the language they speak. All character and language names are sequences of $1$ to $15$ letters (a-z and A-Z), numbers, and hyphens. Character names and languages are separated by single spaces.\n-----Output-----\nPrint a line of output giving the size of the smallest set of characters $S$ that should be asked to leave so that all remaining pairs of characters can converse.\n-----Examples-----\nSample Input:\n7\nJabba-the-Hutt Huttese\nBib-Fortuna Huttese Basic\nBoba-Fett Basic Huttese\nChewbacca Shyriiwook Basic\nLuke Basic Jawaese Binary\nGrakchawwaa Shyriiwook Basic Jawaese\nR2D2 Binary Basic\nSample Output:\n2\n\ndef",
      "answer": "def converse(s):\n    if len(s) == 0:\n        return 0\n    if len(s) == 1:\n        return 1\n    if len(s) == 2:\n        return 1\n    if len(s) == 3:\n        return 1\n    if len(s) == 4:\n        return 1\n    if len(s) == 5:\n        return 1\n    if len(s) == 6:\n        return 1\n    if len(s) == 7:\n        return 1\n    if len(s) == 8:\n        return 1\n    if len(s) == 9:\n        return 1\n    if len(s) == 10:\n        return 1\n    if len(s) == 11:\n        return 1\n    if len(s) == 12:\n        return 1\n    if len(s) == 13:\n        return 1\n    if len(s) == 14:\n        return 1\n    if len(s) == 15:\n        return 1\n    if len(s) == 16:\n        return 1\n    if len(s) == 17:\n        return 1\n    if len(s) == 18:\n        return 1\n    if len(s) == 19:\n        return 1\n    if len(s) == 20:\n        return 1\n    if len(s) == 21:\n        return 1\n    if len(s) == 22:\n        return 1\n    if len(s) == 23:\n        return 1\n    if len(s) == 24:\n        return 1\n    if len(s) == 25:\n        return 1\n    if len(s) == 26:\n        return 1\n    if len(s) == 27:\n        return 1\n    if len(s) == 28:\n        return 1\n    if len(s) == 29:\n        return 1\n    if len(s) == 30:\n        return 1\n    if len(s) == 31:\n        return 1\n    if len(s) == 32:\n        return 1\n    if len(s) == 33:\n        return 1\n    if len(s) == 34:\n        return 1\n    if len(s) == 35:\n        return 1\n    if len(s) == 36:\n        return 1\n    if len(s) == 37:\n        return 1\n    if len(s) == 38:\n        return 1\n    if len(s) == 39:\n        return 1\n    if len(s) == 40:\n        return 1\n    if len(s) == 41:\n        return 1\n    if len(s) == 42:\n        return 1\n    if len(s) == 43:\n        return 1\n    if len(s) == 44:\n        return 1\n    if len(s) == 45:\n        return 1\n    if len(s) == 46:\n        return 1\n    if len(s) == 47:\n        return 1\n    if len(s) == 48:\n        return 1\n    if len(s) == 49:\n        return 1\n    if len(s) == 50:\n        return 1\n    if len(s) == 51:\n        return 1\n    if len(s) == 52:\n        return 1\n    if len(s) == 53:\n        return 1\n    if len(s) == 54:\n        return 1\n    if len(s) == 55:\n        return 1\n    if len(s) == 56:\n        return 1\n    if len(s) == 57:\n        return 1\n    if len(s) == 58:\n        return 1\n    if len(s) == 59:\n        return 1\n    if len(s) == 60:\n        return 1\n    if len(s) == 61:\n        return 1\n    if len(s) == 62:\n        return 1\n    if len(s) == 63:\n        return 1\n    if len(s) == 64:\n        return 1\n    if len(s) == 65:\n        return 1\n    if len(s) == 66:\n        return 1\n    if len(s) == 67:\n        return 1\n    if len(s) == 68:\n        return 1\n    if len(s) == 69:\n        return 1\n    if len(s) == 70:\n        return 1\n    if len(s) == 71:\n        return 1\n    if len(s) == 72:\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4954,
      "prompt": "Complete the Python function given the prompt below:\nAs you didn\u2019t show up to the yearly general meeting of the Nordic Club of Pin Collectors, you were unanimously elected to organize this years excursion to Pin City. You are free to choose from a number of weekends this autumn, and have to find a suitable hotel to stay at, preferably as cheap as possible. \nYou have some constraints: The total cost of the trip must be within budget, of course. All participants must stay at the same hotel, to avoid last years catastrophe, where some members got lost in the city, never being seen again.\n-----Input-----\nThe first line of input consists of four integers: $1 \\leq N \\leq 200$, the number of participants, $1 \\leq B \\leq 500000$, the budget, $1 \\leq H \\leq 18$, the number of hotels to consider, and $1 \\leq W \\leq 13$, the number of weeks you can choose between. Then follow two lines for each of the $H$ hotels. The first gives $1 \\leq p \\leq 10000$, the price for one person staying the weekend at the hotel. The second contains $W$ integers, $0 \\leq a \\leq 1000$, giving the number of available beds for each weekend at the hotel.\n-----Output-----\nOutput the minimum cost of the stay for your group, or \u201cstay home\u201d if nothing can be found within the budget.\n-----Examples-----\nSample Input:\n3 1000 2 3\n200\n0 2 2\n300\n27 3 20\nSample Output:\n900\n\ndef",
      "answer": "def hotel_cost(n,b,h):\n    return n*b*h\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4955,
      "prompt": "Complete the Python function given the prompt below:\nThe following are musical notes in \u201cincreasing order\u201d:$A$, $A\\sharp $, $B$, $C$, $C\\sharp $, $D$, $D\\sharp $, $E$, $F$, $F\\sharp $, $G$, $G\\sharp $\nThe difference between consecutive notes is a semitone, and the sequence wraps around so the note that is one semitone above $G\\sharp $ is $A$. The difference between a tone is the same as two semitones. So the note that is one tone above $B$ is $C\\sharp $. The note that is one tone above $G$ is $A$.\nWe do not worry about flats such as $C\\flat $ nor do we worry about adding a $\\sharp $ sign to $B$ and $E$ in this problem (they are aliases for notes that are already listed).\nA major scale is defined by a note (such as $A$ or $C\\sharp $) and all other notes following that one in an arithmetic progression:tone, tone, semitone, tone, tone, tone, semitone\nThe starting note appears in the name of the scale.\nFor example, the scale $A\\sharp $-major consists of the following notes:$A\\sharp $, $C$, $D$, $D\\sharp $, $F$, $G$, $A$, $A\\sharp $\n(by convention, the first note is repeated at the end of the sequence).\nNote that $A\\sharp $-major is typically not considered a standard musical scale. It is identical in sound to $B\\flat $, and proper notation of $A\\sharp $-major would require the use of double-sharps. We ignore such issues in this problem and just use the $12$ notes given at the top of this problem.\nFinally, in this problem a song is just a sequence of notes. Your job is to identify all major scales such that the song uses only notes in that scale.\n-----Input-----\nThe first line of input is an integer $1\\leq n \\leq 100$ denoting the number of notes played in a song. The second line consists of a sequence of notes, separated by spaces.\n-----Output-----\nOutput consists of a single line that lists all scales the song may be played in. Consecutive scales should be separated by a single space and the scales must appear in lexicographic order. If the song may not fit in any one of these scales, simply output a line containing the text none.\n-----Examples-----\nSample Input:\n10\nC D F D C D F F F C \nSample Output:\nA# C D# F\n\ndef",
      "answer": "def main():\n    n = int(input())\n    s = input()\n    s = s.split()\n    s = [int(i) for i in s]\n    s.sort()\n    for i in range(n):\n        if s[i] == s[i+1]:\n            print(s[i], end=\" \")\n        else:\n            print(s[i], end=\"\")\nmain()\n<|endoftext|>",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4956,
      "prompt": "Complete the Python function given the prompt below:\nAnders talks in the Swedish dialect of \u00f6stg\u00f6tska. Unfortunately, this makes it somewhat hard to get a programming job in the Swedish capital of Stockholm. The trendy Stockholm hipsters only accept applicants speaking the standard Swedish dialect, rikssvenska.\nTo increase his chances of passing interviews, he wishes to practice talking rikssvenska. To help him with this, he wants you to write a program that can determine whenever he accidentally reverts to speaking \u00f6stg\u00f6tska.\nA simple way of determining if a sentence is written in \u00f6stg\u00f6tska is if at least $40\\% $ of the words in the sentence contains the letter \u00e4. For simplicity, this is encoded as the letter combination ae (meaning any appearance of the substring ae is to be regarded as an occurrence of the letter \u00e4).\n-----Input-----\nThe first and only line of input contains a sequence of space-separated words. Each word consists only of letters a-z. There are at most $100$ words, and each word contains at most $15$ letters a-z (meaning that the ae combination counts as two letters for this limit).\n-----Output-----\nOutput \u201cdae ae ju traeligt va\u201d if the input sentence is in \u00f6stg\u00f6tska, otherwise output \u201chaer talar vi rikssvenska\u201d.\n-----Examples-----\nSample Input:\ndae ae ju traeligt va\nSample Output:\ndae ae ju traeligt va\n\ndef",
      "answer": "def check_sentence(sentence):\n    if len(sentence) < 15:\n        return \"haer talar vi rikssvenska\"\n    else:\n        return \"dae ae ju traeligt va\"\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4957,
      "prompt": "Complete the Python function given the prompt below:\nThe big caf\u00e9 chain Espresso Bucks is expanding to the country of Gridland. Since you are an expert on Gridland culture and geography, Espresso Bucks have hired you to decide where to put their coffee shops for maximum profit. Gridland consists of an $n$ by $m$ grid, where some cells are land, and some are water. At most one coffee shop can be built on each land cell. Nothing can be built on the water cells, but on the other hand, no one lives in the water. After a lot of long meetings with the Espresso Bucks people, you have come to the conclusion that there are only two constraints the placement of coffee shops has to satisfy: \n - Each land cell must have a coffee shop directly on it, or adjacent to it.\n - No two coffee shops can be adjacent to each other.\nTwo cells are adjacent if one is immediately to the west, north, east, or south of the other. Find any placement of coffee shops that satisfies these constraints.\n-----Input-----\nThe first line of input consists of two integers $n$ and $m$ ($1 \\leq n,m \\leq 100$). The following $n$ lines each contain a string of length $m$ consisting only of the characters \u2018.\u2019 (land) and \u2018#\u2019 (water). This is the map of gridland. It is guaranteed that the map contains at least one land cell.\n-----Output-----\nOutput a copy of the map of gridland, where some of the land cells have been replaced with the letter \u2018E\u2019, meaning that a coffee shop was placed on the corresponding land cell. This placement should satisfy the constraints above. If there are many solutions, any one will be accepted.\n-----Examples-----\nSample Input:\n5 6\n....#.\n....#.\n#.....\n......\n##...#\nSample Output:\nE..E#.\n..E.#E\n#..E..\n.E...E\n##E.E#\n\ndef",
      "answer": "def solve(n,m):\n    grid = []\n    for i in range(n):\n        grid.append(list(input()))\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                grid[i][j] = 'E'\n            elif grid[i][j] == '.':\n                grid[i][j] = '.'\n    for i in range(n):\n        for j in range(m):\n            print(grid[i][j], end ='')\n        print()\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4958,
      "prompt": "Complete the Python function given the prompt below:\nYou\u2019ve been put in charge of an art exhibit from the famous minimalist sculptor J (even his name is minimalist!). J\u2019s work involves the careful layout of vertically dispositioned orthogonal parallelpipeds in a set of tapering obelisks \u2014 in other words, he puts smaller boxes on top of larger boxes. His most recent triumph is called \u201c2 by 3\u2019s Decreasing,\u201d in which he has various sets of six boxes arranged in two stacks of three boxes each. One such set is shown below:\nJ has sent you the art exhibit and it is your job to set up each of the six-box sets at various locations throughout the museum. But when the sculptures arrived at the museum, uncultured barbarians (i.e., delivery men) simply dropped each set of six boxes on the floor, not realizing the aesthetic appeal of their original layout. You need to reconstruct each set of two towers, but you have no idea which box goes on top of the other! All you know is the following: for each set of six, you have the heights of the two towers, and you know that in any tower the largest height box is always on the bottom and the smallest height box is on the top. Armed with this information, you hope to be able to figure out which boxes go together before tomorrow night\u2019s grand opening gala.\n-----Input-----\nThe input consists of eight positive integers. The first six represent the heights of the six boxes. These values will be given in no particular order and no two will be equal.\nThe last two values (which will never be the same) are the heights of the two towers.\nAll box heights will be $\\leq 100$ and the sum of the box heights will equal the sum of the tower heights.\n-----Output-----\nOutput the heights of the three boxes in the first tower (i.e., the tower specified by the first tower height in the input), then the heights of the three boxes in the second tower. Each set of boxes should be output in order of decreasing height. Each test case will have a unique answer.\n-----Examples-----\nSample Input:\n12 8 2 4 10 3 25 14\nSample Output:\n12 10 3 8 4 2\n\ndef",
      "answer": "def tower(height, towers):\n    if height == 0:\n        return 0\n    if height == 1:\n        return 1\n    if height == 2:\n        return 2\n    if height == 3:\n        return 3\n    if height == 4:\n        return 4\n    if height == 5:\n        return 5\n    if height == 6:\n        return 6\n    if height == 7:\n        return 7\n    if height == 8:\n        return 8\n    if height == 9:\n        return 9\n    if height == 10:\n        return 10\n    if height == 11:\n        return 11\n    if height == 12:\n        return 12\n    if height == 13:\n        return 13\n    if height == 14:\n        return 14\n    if height == 15:\n        return 15\n    if height == 16:\n        return 16\n    if height == 17:\n        return 17\n    if height == 18:\n        return 18\n    if height == 19:\n        return 19\n    if height == 20:\n        return 20\n    if height == 21:\n        return 21\n    if height == 22:\n        return 22\n    if height == 23:\n        return 23\n    if height == 24:\n        return 24\n    if height == 25:\n        return 25\n    if height == 26:\n        return 26\n    if height == 27:\n        return 27\n    if height == 28:\n        return 28\n    if height == 29:\n        return 29\n    if height == 30:\n        return 30\n    if height == 31:\n        return 31\n    if height == 32:\n        return 32\n    if height == 33:\n        return 33\n    if height == 34:\n        return 34\n    if height == 35:\n        return 35\n    if height == 36:\n        return 36\n    if height == 37:\n        return 37\n    if height == 38:\n        return 38\n    if height == 39:\n        return 39\n    if height == 40:\n        return 40\n    if height == 41:\n        return 41\n    if height == 42:\n        return 42\n    if height == 43:\n        return 43\n    if height == 44:\n        return 44\n    if height == 45:\n        return 45\n    if height == 46:\n        return 46\n    if height == 47:\n        return 47\n    if height == 48:\n        return 48\n    if height == 49:\n        return 49\n    if height == 50:\n        return 50\n    if height == 51:\n        return 51\n    if height == 52:\n        return 52\n    if height == 53:\n        return 53\n    if height == 54:\n        return 54\n    if height == 55:\n        return 55\n    if height == 56:\n        return 56\n    if height == 57:\n        return 57\n    if height == 58:\n        return 58\n    if height == 59:\n        return 59\n    if height == 60:\n        return 60\n    if height == 61:\n        return 61\n    if height == 62:\n        return 62\n    if height == 63:\n        return 63\n    if height == 64:\n        return 64\n    if height == 65:\n        return 65\n    if height == 66:\n        return 66\n    if height == 67:\n        return 67\n    if height == 68:\n        return 68\n    if height == 69:\n        return 69\n    if height == 70:\n        return 70\n    if height == 71:\n        return 71\n    if height == 72:\n        return 72\n    if height == 73:\n        return 73\n    if height == 74:\n        return 74\n    if height == 75:\n        return 75\n    if height == 76:\n        return 76\n    if height == 77:\n        return 77\n    if height == 78:\n        return 78\n    if height == 79:\n        return 79\n    if height == 80:\n        return 80\n    if height == 81:\n        return 81\n    if height == 82:\n        return 82\n    if height == 83:\n        return 83\n    if height == 84:\n        return 84\n    if height == 85:\n        return 85\n    if height == 86:\n        return 86\n    if height == 87:\n        return 87\n    if height == 88:\n        return 88\n    if height == 89:\n        return 89\n    if height == 90:\n        return 90\n    if height == 91:\n        return 91\n    if height == 92",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4959,
      "prompt": "Complete the Python function given the prompt below:\nTim is an absolutely obsessive soda drinker, he simply cannot get enough. Most annoyingly though, he almost never has any money, so his only obvious legal way to obtain more soda is to take the money he gets when he recycles empty soda bottles to buy new ones. In addition to the empty bottles resulting from his own consumption he sometimes find empty bottles in the street. One day he was extra thirsty, so he actually drank sodas until he couldn\u2019t afford a new one.\n-----Input-----\nThree non-negative integers $e,f,c$, where $e<1000$ equals the number of empty soda bottles in Tim\u2019s possession at the start of the day, $f<1000$ the number of empty soda bottles found during the day, and $2 \\le c<2000$ the number of empty bottles required to buy a new soda.\n-----Output-----\nHow many sodas did Tim drink on his extra thirsty day?\n-----Examples-----\nSample Input:\n9 0 3\nSample Output:\n4\n\ndef",
      "answer": "def soda_buy(e,f,c):\n    if e<1000 and f<1000 and c<2000:\n        return c\n    else:\n        return 0\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4960,
      "prompt": "Complete the Python function given the prompt below:\nSlavko is learning about different numeral systems. Slavko is not the brightest when it comes to math, so he is starting out converting binary numerals to octal. The algorithm Slavko uses is this:\n - Pad the binary numeral with zeros on the left until the number of digits is divisible by three.\n - Group adjacent binary digits into groups of $3$ digits.\n - Replace each group of binary digits with the corresponding octal digit (as in Table\u00a01).\n000\n0\n001\n1\n010\n2\n011\n3\n100\n4\n101\n5\n110\n6\n111\n7Table 1: Binary to octal \nWrite a program that converts a binary numeral to octal so that Slavko can verify his results.\n-----Input-----\nThe input contains a binary numeral. The number of digits will be less than $100$, and the first digit will be $1$.\n-----Output-----\nOutput the number in octal.\n-----Examples-----\nSample Input:\n1010\nSample Output:\n12\n\ndef",
      "answer": "def binary_to_octal(binary_num):\n    octal_num = 0\n    for digit in binary_num:\n        octal_num += int(digit) * 3\n    return octal_num\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4961,
      "prompt": "Complete the Python function given the prompt below:\nA nice part of the Roman Catholic Mass is the rite of peace when people shake hands with their neighbours and say \u201cpeace be with you\u201d. Mirko has found a way to turn this ritual into his own favor. Inside the church, there are $R$ rows of benches where each row can hold a capacity of $S$ people. We can imagine the seating order as a matrix sized $R \\times S$ where each element represents either a person or an empty seating space. Let us assume that each person shakes hands with their neighbours. That means that the neighbours are located in one of the eight neighbouring elements (if such element exists):\nA seating order of the people inside the church has been given before Mirko enters. Mirko is, of course, late for the morning Mass and will sit in an empty space so that he shakes hands with as many people as he can. If there are no empty seats left, Mirko will simply give up on the idea and go to the evening Mass instead. We can assume that nobody enters the church after Mirko.\nCalculate the total number of handshakes given during the morning Mass.\n-----Input-----\nThe first line of input contains positive integers $R$ and $S$ ($1 \\leq R, S \\leq 50$) as stated in the text. Each of the following $R$ lines contains $S$ characters. These $R \\times S$ characters represent the seating order. The character \u201c.\u201d (dot) represents an empty place and the character \u201co\u201d (lowercase letter o) represents a person.\n-----Output-----\nThe first and only line of output should contain the required number of handshakes.\n-----Examples-----\nSample Input:\n2 3\n..o\no..\nSample Output:\n2\n\ndef",
      "answer": "def main():\n    n = int(input())\n    s = list(map(int, input().split()))\n    m = int(input())\n    for i in range(m):\n        s[i] = int(s[i])\n    print(s)\n    print(s[0] + s[1] + s[2])\nmain()\n<|endoftext|>",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4962,
      "prompt": "Complete the Python function given the prompt below:\nMirko has $N$ items (labeled with numbers from $1$ to $N$) and $L$ drawers (labeled with numbers from $1$ to $L$). All items are currently scattered throughout his room, so he decided to clean them up. Each drawer can contain one item, and in order to make it easier for Mirko to find them later, he has determined in advance exactly two drawers ($A_ i$ and $B_ i$) for each item $i$.\nMirko stores the items in order from $1$ to $N$ using the first rule he can apply:\n - If the drawer $A_ i$ is empty, he stores the item $i$ in that drawer.\n - If the drawer $B_ i$ is empty, he stores the item $i$ in that drawer.\n - Try to move the item from $A_ i$ to its other drawer; if that one\u2019s filled too, try moving that item to its other drawer, and so on until you either succeed or get back to a previously seen drawer. In case of success, store the item $i$ in the drawer $A_ i$. In case of failure, continue to next rule.\n - Try moving the item from $B_ i$ to its other drawer; if that one\u2019s filled too, try moving that item to its other drawer, and so on until you either succeed or get back to a previously seen drawer. In case of success, store the item $i$ in the drawer $B_ i$. In case of failure, continue to next rule.\n - Give up and throw away the item $i$.\nFor given pairs of drawers for each item, determine which items will be stored and which will be thrown away.\n-----Input-----\nThe first line of input consists of two integers, $N$ and $L$ ($1 \\leq N, L \\leq 300000$), the number of items and the number of drawers.\nEach of the following $N$ lines contains two integers: $A_ i$ and $B_ i$ ($1 \\leq A_ i, B_ i \\leq L$), the pair of drawers corresponding to item $i$. The numbers $A_ i$ and $B_ i$ will be different.\n-----Output-----\nFor each item, respectively, output where it ends up. In case the item is stored successfully, output \u201cLADICA\u201d (without quotes, Croatian word for drawer). In case the item is thrown away, output \u201cSMECE\u201d (without quotes, Croatian word for trash).\n-----Examples-----\nSample Input:\n5 3\n1 2\n1 3\n1 2\n1 3\n1 2\nSample Output:\nLADICA\nLADICA\nLADICA\nSMECE\nSMECE\n\ndef",
      "answer": "def clean_up(drawers):\n    for i in range(len(drawers)):\n        if len(drawers[i]) == 0:\n            drawers[i] = 'SMECE'\n    return drawers\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4963,
      "prompt": "Complete the Python function given the prompt below:\nJimmy and his friends were all standing in a lineup for ice cream when a huge gust blew them all around. The friends want to keep things fair and make sure everyone gets their ice cream in the order they started with. The friends do not remember the order, but each of them remember exactly how many people were between them and Jimmy. Jimmy is always the first person in line. Can you help him and his friends remember the order?\n-----Input-----\nThe first line contains a single integer $n$ ($1 \\leq n \\leq 100$), the number of people in the line.\nThe second line contains $n-1$ space separated integers, where $d_ i$ ($0 \\leq d_ i \\leq n-2$) is the number of people between the $(i+1)^\\textrm {th}$ person and Jimmy.\nJimmy is always first in the lineup.\n-----Output-----\nPrint a single line with $n$ integers, the people in the order of the original lineup. It is guaranteed that there is always a unique solution.\n-----Examples-----\nSample Input:\n2\n0\nSample Output:\n1 2\n\ndef",
      "answer": "def ice_cream(n):\n    if n == 1:\n        return 1\n    else:\n        return ice_cream(n-1) + ice_cream(n-2)\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4964,
      "prompt": "Complete the Python function given the prompt below:\nIt was time for the 7th Nordic Cinema Popcorn Convention, and this year the manager Ian had a brilliant idea. In addition to the traditional film program, there would be a surprise room where a small group of people could stream a random movie from a large collection, while enjoying popcorn and martinis. \nHowever, it turned out that some people were extremely disappointed, because they got to see movies like Ghosts of Mars, which instead caused them to tear out their hair in despair and horror.\nTo avoid this problem for the next convention, Ian has come up with a solution, but he needs your help to implement it. When the group enters the surprise room, they will type in a list of movies in a computer. This is the so-called horror list, which consists of bad movies that no one in the group would ever like to see. Of course, this list varies from group to group.\nYou also have access to the database Awesome Comparison of Movies which tells you which movies are directly similar to which. You can assume that movies that are similar to bad movies will be almost as bad. More specificly, we define the Horror index as follows:\\[ HI = \\left\\{ \\begin{array}{ll} 0 & \\textrm{if movie is on horror list. This overrides the other definitions.} \\\\ Q+1 & \\textrm{if the worst directly similar movie has $HI = Q$} \\\\ +\\infty & \\textrm{if not similar at all to a horrible movie} \\end{array} \\right. \\]\n-----Input-----\nThe first line of input contains three positive integers $N$, $H$, $L$ ($1 \\leq H < N \\leq 1000,0 \\leq L \\leq 10000$), where $N$ is the number of movies (represented by IDs, ranging from $0$ to $N-1$), $H$ is the number of movies on the horror list and $L$ is the number of similarities in the database.\nThe second line contains $H$ unique space-separated integers $x_ i$ ($0 \\leq x_ i <N$) denoting the ID of the movies on the horror list.\nThe following $L$ lines contains two space-separated integers $a_ i,b_ i$ ($0 \\leq a_ i < b_ i < N$), denoting that movie with ID $a_ i$ is similar to movie with ID $b_ i$ (and vice versa).\n-----Output-----\nOutput the ID of the movie in the collection with the highest Horror Index. In case of a tie, output the movie with the lowest ID.\n-----Examples-----\nSample Input:\n6 3 5\n0 5 2\n0 1\n1 2\n4 5\n3 5\n0 2\nSample Output:\n1\n\ndef",
      "answer": "def horror_list(movie_list):\n    movie_list = movie_list.split()\n    movie_list = movie_list[::-1]\n    movie_list = movie_list[::-1]\n    movie_list = movie_list[::-1]\n    movie_list = movie_list[::-1]\n    movie_list = movie_list[::-1]\n    movie_list = movie_list[::-1]\n    movie_list = movie_list[::-1]\n    movie_list = movie_list[::-1]\n    movie_list = movie_list[::-1]\n    movie_list = movie_list[::-1]\n    movie_list = movie_list[::-1]\n    movie_list = movie_list[::-1]\n    movie_list = movie_list[::-1]\n    movie_list = movie_list[::-1]\n    movie_list = movie_list[::-1]\n    movie_list = movie_list[::-1]\n    movie_list = movie_list[::-1]\n    movie_list = movie_list[::-1]\n    movie_list = movie_list[::-1]\n    movie_list = movie_list[::-1]\n    movie_list = movie_list[::-1]\n    movie_list = movie_list[::-1]\n    movie_list = movie_list[::-1]\n    movie_list = movie_list[::-1]\n    movie_list = movie_list[::-1]\n    movie_list = movie_list[::-1]\n    movie_list = movie_list[::-1]\n    movie_list = movie_list[::-1]\n    movie_list = movie_list[::-1]\n    movie_list = movie_list[::-1]\n    movie_list = movie_list[::-1]\n    movie_list = movie_list[::-1]\n    movie_list = movie_list[::-1]\n    movie_list = movie_list[::-1]\n    movie_list = movie_list[::-1]\n    movie_list = movie_list[::-1]\n    movie_list = movie_list[::-1]\n    movie_list = movie_list[::-1]\n    movie_list = movie_list[::-1]\n    movie_list = movie_list[::-1]\n    movie_list = movie_list[::-1]\n    movie_list = movie_list[::-1]\n    movie_list = movie_list[::-1]\n    movie_list = movie_list[::-1]\n    movie_list = movie_list[::-1]\n    movie_list = movie_list[::-1]\n    movie_list = movie_list[::-1]\n    movie_list = movie_list[::-1]\n    movie_list = movie_list[::-1]\n    movie_list = movie_list[::-1]\n    movie_list = movie_list[::-1]\n    movie_list = movie_list[::-1]\n    movie_list = movie_list[::-1]\n    movie_list = movie_list[::-1]\n    movie_list = movie_list[::-1]\n    movie_list = movie_list[::-1]\n    movie_list = movie_list[::-1]\n    movie_list = movie_list[::-1]\n    movie_list = movie_list[::-1]\n    movie_list = movie_list[::-1]\n    movie_list = movie_list[::-1]\n    movie_list = movie_list[::-1]\n    movie_list = movie_list[::-1]\n    movie_list = movie_list[::-1]\n    movie_list = movie_list[::-1]\n    movie_list = movie_list[::-1]\n    movie_list = movie_list[::-1]\n    movie_list = movie_list[::-1]\n    movie_list = movie_list[::-1]\n    movie_list = movie_list[::-1]\n    movie_list = movie_list[::-1]\n    movie_list = movie_list[",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4965,
      "prompt": "Complete the Python function given the prompt below:\nIceland is famous for its geothermal activity, which supplies the country with much of its electricity and heating. It is also a source of pleasure, in the form of hot springs. \nKalle is visiting one of Iceland\u2019s famous hot springs. It contains $n$ pools of water, where the $i$th one has temperature $t_ i$. Although staying in one of the warmer pools for a long time sure is relaxing, Kalle is on a very tight schedule and just wants a quick dip in each of the pools. As you may know, the nicest thing about hot baths is the contrast between hot and cold. Therefore, to get the most out of his stay, Kalle wants to find an ordering of the pools so that the difference in temperature between subsequent pools is increasing.\nGiven a sequence of pool temperatures $t_1, t_2, \\dots, t_ n$, rearrange them into a new sequence $t\u2019_1, t\u2019_2, \\dots, t\u2019_ n$ such that for all $2 \\leq i \\leq n-1$ it holds that\\[ |t\u2019_{i-1} - t\u2019_ i| \\leq |t\u2019_ i - t\u2019_{i+1}|. \\]\n-----Input-----\nThe input consists of:\n - One line with an integer $n$ ($2 \\le n \\leq 10^5$), the number of pools.\n - One line with $n$ integers $t_1, \\ldots, t_ n$ ($-10^5\\leq t_ i \\leq 10^5$ for each $i$), the temperatures in each of the $n$ pools.\n-----Output-----\nOutput a rearrangement of the sequence satisfying the given requirement. If no solution exists, output \u201cimpossible\u201d. If there are multiple valid solutions, you may output any one of them.\n-----Examples-----\nSample Input:\n3\n1 3 4\nSample Output:\n4 3 1\n\ndef",
      "answer": "def rearrange_pools(t_1, t_2, n):\n    if n == 1:\n        return [t_1]\n    if n == 2:\n        return [t_1, t_2]\n    if n == 3:\n        return [t_1, t_2, t_1]\n    if n == 4:\n        return [t_1, t_2, t_1, t_2]\n    if n == 5:\n        return [t_1, t_2, t_1, t_2, t_1]\n    if n == 6:\n        return [t_1, t_2, t_1, t_2, t_1, t_2]\n    if n == 7:\n        return [t_1, t_2, t_1, t_2, t_1, t_2, t_1]\n    if n == 8:\n        return [t_1, t_2, t_1, t_2, t_1, t_2, t_1, t_2]\n    if n == 9:\n        return [t_1, t_2, t_1, t_2, t_1, t_2, t_1, t_2, t_1]\n    if n == 10:\n        return [t_1, t_2, t_1, t_2, t_1, t_2, t_1, t_2, t_1, t_1]\n    if n == 11:\n        return [t_1, t_2, t_1, t_2, t_1, t_2, t_1, t_2, t_1, t_1, t_1]\n    if n == 12:\n        return [t_1, t_2, t_1, t_2, t_1, t_2, t_1, t_2, t_1, t_1, t_1, t_1]\n    if n == 13:\n        return [t_1, t_2, t_1, t_2, t_1, t_2, t_1, t_2, t_1, t_1, t_1, t_1, t_1]\n    if n == 14:\n        return [t_1, t_2, t_1, t_2, t_1, t_2, t_1, t_2, t_1, t_1, t_1, t_1, t_1, t_1]\n    if n == 15:\n        return [t_1, t_2, t_1, t_2, t_1, t_2, t_1, t_2, t_1, t_1, t_1, t_1, t_1, t_1, t_1]\n    if n == 16:\n        return [t_1, t_2, t_1, t_2, t_1, t_2, t_1, t_2, t_1, t_1, t_1, t_1, t_1, t_1, t_1, t_1]\n    if n == 17:\n        return [t_1, t_2, t_1, t_2, t_1, t_2, t_1, t_2, t_1, t_1, t_1, t_1, t_1, t_1, t_1, t_1]\n    if n == 18:\n        return [t_1, t_2, t_1, t_2, t_1, t_2, t_1, t_2, t_1, t_1, t_1, t_1, t_1, t_1, t_1, t_1]\n    if n == 19:\n        return [t_1, t_2, t_1, t_2, t_1, t_2, t_1, t_2, t_1, t_1, t_1, t_1, t_1, t_1, t_1, t_1]\n    if n == 20:\n        return [t_1, t_2, t_1, t_2, t_1, t_2, t_1, t_2, t_1, t_1, t_1, t_1, t_1,",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4966,
      "prompt": "Complete the Python function given the prompt below:\nAnthony recently started watching YouTube videos with the title \u201c$X$ but every time $Y$ happens it speeds up by $Z$\u201d. He likes watching these videos because it saves time, but he wonders how much time he actually saves by watching these videos (instead of the originals).\nYou may assume that the new video $X\u2019$ is exactly the same as the original video $X$, except certain segments of the new video play faster. Each time event $Y$ happens, $X\u2019$ speeds up by $p$%. Suppose event $Y$ happens $n$ times in $X\u2019$, and it happens at timestamps $t_1, t_2, \\ldots, t_ n$ (in seconds). That means the segment $[0, t_1)$ is playing at original speed, the segment $[t_1, t_2)$ is playing at $(100+p)$% speed, the segment $[t_2, t_3)$ is playing at $(100+2p)$% speed, and so on. Also, $X\u2019$ is $k$ seconds long.\nCan you help Anthony compute the original length of the video?\n-----Input-----\nThe first line of the input contains three integers $n, p, k$. It is guaranteed that $1\\leq n\\leq 5000$, $0\\leq p\\leq 100$, and $n\\leq k\\leq 20000$.\nThe next line of the input contains $n$ integers $t_ i$, denoting the timestamp of the event $Y$. It is guaranteed that the timestamps are given in chronological order, and that $1\\leq t_ i\\leq k$.\n-----Output-----\nA single number $T$ denoting the length of the original video in seconds. Your answer is considered correct if its absolute or relative error is at most $10^{-6}$.\n-----Examples-----\nSample Input:\n2 20 15\n3 10\nSample Output:\n18.400\n\ndef",
      "answer": "def original_length(n, p, k):\n    return (n*(100+p))/(100+2*p)\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4967,
      "prompt": "Complete the Python function given the prompt below:\nAnyone knows that the best place to learn the art of espionage is at the Manhattan Academy of Private Spies (MAPS). Scattered across Manhattan are a number of safe houses, which are used by MAPS when conducting drills. During a drill, each spy-in-training is required to travel from their current location to the nearest safe house. If there are multiple safe houses that are nearest to their current location, then it does not matter which safe house that spy chooses to travel to. Each safe house is large enough to accommodate any number of spies.\nManhattan is modeled as a grid of city blocks. Initially (before any drill), each block may contain a single safe house or a single spy, but not both. The distance between two city blocks is measured using Manhattan distance, also known as taxicab distance. Formally, the Manhattan distance between two locations is the sum of the absolute value of their vertical difference and the absolute value of their horizontal difference.\nWhat is the maximum Manhattan distance that any spy has to travel to reach the nearest safe house?\n-----Input-----\nThe first line of input contains an integer, $N$, where $2\\leq N\\leq 100$, denoting the width and height of the grid. Each of the next $N$ lines contain $N$ characters, with each character denoting a city block. A spy is represented by an \u2018S\u2019 character, a safe house is represented by an \u2018H\u2019 character, and the remaining city blocks in the grid are represented by \u2018.\u2019\u00a0(period) characters. There is at least one spy and at least one safe house.\n-----Output-----\nOutput an integer indicating the maximum Manhattan distance that any spy has to travel in order to reach the nearest safe house.\n-----Examples-----\nSample Input:\n5\n....H\n.....\nS....\n....H\n.....\nSample Output:\n5\n\ndef",
      "answer": "def max_manhattan_distance(grid):\n    # Write your code here\n    pass\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4968,
      "prompt": "Complete the Python function given the prompt below:\nAs you know, a kayaking competition is going on as we speak. Unfortunately strong winds have damaged a few kayaks, and the race starts in 5 minutes!. Fortunately, some teams have brought reserve kayaks. Since kayaks are bulky and hard to carry, teams are willing to lend kayaks to opposing teams if and only if they are starting immediately next to them. For example, team with the starting number 4 will lend its reserve kayak only to teams 3 and 5. Of course if some team did bring a reserve and its kayak was damaged, they will use it themselves and not lend it to anyone.\nYou as the organizer now need to know, what is the minimal number of teams that cannot start the race, not even in borrowed kayaks.\n-----Input-----\nThe first line of input contains three integers $N$, $(2 \\le N \\le 10)$, total number of teams, $S$, $(2 \\le S \\le N)$, number of teams with damaged kayaks and $R$, $(1 \\le R \\le N)$, number of teams with reserve kayaks.\nThe second line contains exactly $S$ numbers, the starting numbers of teams with damaged kayaks. The second line will not contain duplicates.\nThe third line contains exactly $R$ numbers, the starting numbers of teams with reserve kayaks. The third line will not contain duplicates.\n-----Output-----\nThe first and only line of output should contain the smallest number of teams that cannot start the competition.\n-----Examples-----\nSample Input:\n5 2 3\n2 4\n1 3 5\nSample Output:\n0\n\ndef",
      "answer": "def find_min_team_size(N, S, R, S_d, R_d):\n    if N == 0 or S == 0 or R == 0:\n        return 0\n    if S_d == R_d:\n        return N\n    if S_d > R_d:\n        return find_min_team_size(N - 1, S_d, R, S, R_d)\n    else:\n        return find_min_team_size(N - 1, S, R - 1, S_d, R)\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4969,
      "prompt": "Complete the Python function given the prompt below:\nGeorge has bought a pizza. George loves cheese. George thinks the pizza does not have enough cheese. George gets angry.\nGeorge\u2019s pizza is round, and has a radius of $R$ cm. The outermost $C$ cm is crust, and does not have cheese. What percent of George\u2019s pizza has cheese?\n-----Input-----\nThe input consists of a single line with two space separated integers, $R$ and $C$.\n-----Output-----\nOutput the percentage of the pizza that has cheese. Your answer must have an absolute or relative error of at most $10^{-6}$.\n-----Limits-----\n - $1 \\leq C \\leq R \\leq 100$\n-----Examples-----\nSample Input:\n1 1\nSample Output:\n0.000000000\n\ndef",
      "answer": "def pizza(R,C):\n    if R>C:\n        return 0\n    elif R<C:\n        return 100\n    else:\n        return 100/R\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4970,
      "prompt": "Complete the Python function given the prompt below:\nFrosh commencing their studies at Waterloo have diverse interests, as evidenced by their desire to take various combinations of courses from among those available.\nUniversity administrators are uncomfortable with this situation, and therefore wish to offer a conformity prize to frosh who choose one of the most popular combinations of courses. How many frosh will win the prize?\n-----Input-----\nThe input begins with an integer $1 \\leq n \\leq 10000$, the number of frosh. For each frosh, a line follows containing the course numbers of five distinct courses selected by the frosh. Each course number is an integer between $100$ and $499$.\n-----Output-----\nThe popularity of a combination is the number of frosh selecting exactly the same combination of courses. A combination of courses is considered most popular if no other combination has higher popularity. Output a single line giving the total number of students taking some combination of courses that is most popular.\n-----Examples-----\nSample Input:\n3\n100 101 102 103 488\n100 200 300 101 102\n103 102 101 488 100\nSample Output:\n2\n\ndef",
      "answer": "def frosh(n):\n    if n == 1:\n        return 1\n    else:\n        return n * frosh(n-1)\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4971,
      "prompt": "Complete the Python function given the prompt below:\nA famous story about the mathematicians G.H. Hardy and Srinivasa Ramanujan goes as follows (as told by Hardy):  I remember once going to see him (Ramanujan) when he was lying ill at Putney. I had ridden in taxicab No. 1729, and remarked that the number seemed to be rather a dull one, and that I hoped it was not an unfavourable omen. \u201cNo\u201d, he replied, \u201cit is a very interesting number; it is the smallest number expressible as the sum of two [positive] cubes in two different ways.\u201d \nIt is from this story the taxicab numbers got their name. The $n$\u2019th taxicab numbers is defined to be the smallest number that can be expressed as a sum of two positive cube numbers in $n$ distinct ways.\nIt turns out that these numbers grows rather quickly. This makes them very hard to compute, which is not very fun. A variation of the concept is to consider what we will call the bus numbers \u2013 all the numbers which can expressed as the sum of two positive cube numbers in at least $2$ distinct ways. Note that according to this definition, all taxicab numbers (except the first) are also bus numbers.\nYour task is to write a program that generates bus numbers; in particular, the largest bus number that is at most equal to some limit $m$.\n-----Input-----\nThe input consists of:\n - one line with an integer $m$ ($1 \\le m \\le 400000$), the upper bound of the bus number.\n-----Output-----\nOutput the largest bus number $x$ which does not exceed $m$. If there is no such number, output none.\n-----Examples-----\nSample Input:\n1730\nSample Output:\n1729\n\ndef",
      "answer": "def bus_number(m):\n    if m > 0:\n        return m\n    else:\n        return None\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4972,
      "prompt": "Complete the Python function given the prompt below:\nYou are playing the following simple game with a friend:\n - The first player picks a positive integer $X$.\n - The second player gives a list of $k$ positive integers $Y_1, \\ldots, Y_ k$ such that $(Y_1+1)(Y_2+1) \\cdots (Y_ k+1) = X$, and gets $k$ points.\nWrite a program that plays the second player.\n-----Input-----\nThe input consists of a single integer $X$ satisfying $10^3 \\le X \\le 10^9$, giving the number picked by the first player.\n-----Output-----\nWrite a single integer $k$, giving the number of points obtained by the second player, assuming she plays as good as possible.\n-----Examples-----\nSample Input:\n65536\nSample Output:\n16\n\ndef",
      "answer": "def get_points(X):\n    if X < 10**3:\n        return X\n    else:\n        return get_points(X//10**3) + get_points(X//10**2) + get_points(X//10**1) + get_points(X//10)\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4973,
      "prompt": "Complete the Python function given the prompt below:\nYou are given a two dimensional chess board of size $N \\times N$ ($1$-based indexing). Some of the cells on this board are \u2018.\u2019 denoting an empty cell. Some of the cells on this board are \u2018#\u2019 denoting a blocked cell, which you are not allowed to visit. Exactly one of the cells on this board is \u2018K\u2019 denoting the initial position of the knight.\nA knight at position $(r, c)$ can move to any of the valid positions in set $S$ = $\\{ (r + 2, c + 1)$, $(r + 2, c - 1)$, $(r - 2, c + 1)$, $(r - 2, c - 1)$, $(r + 1, c + 2)$, $(r + 1, c - 2)$, $(r - 1, c + 2)$, $(r - 1, c - 2)\\} $. Here valid position means that the resulting $(r\u2019, c\u2019)$ should be within the bounds of the chess grid, i.e. $1 \\leq r\u2019 \\leq N$ and $1 \\leq c\u2019 \\leq N$.\nThe question is you have to determine the minimum number of steps required for the Knight to reach cell $(1, 1)$ avoiding cells with \u2018#\u2019 in the path.\nNote - There will be exactly one \u2018K\u2019 in the grid and cell $(1, 1)$ will NOT be a \u2018#\u2019.\n-----Input-----\nThe first line contains an integer $N$ ($1 \\le N \\le 10^2$) denoting the dimension of the chess board. Each of the next $N$ lines contains a string denoting the $i^{th}$ row. The length of these strings will be $N$.\n-----Output-----\nPrint the value of minimum number of steps. However, if $(1, 1)$ is not reachable, print \u2018-$1$\u2019 (without the quotes).\n-----Examples-----\nSample Input:\n4\n....\n....\n....\n...K\nSample Output:\n2\n\ndef",
      "answer": "def knight(r, c):\n    if r == 1 and c == 1:\n        return 1\n    if r == 1 and c == 2:\n        return 2\n    if r == 1 and c == 3:\n        return 3\n    if r == 1 and c == 4:\n        return 4\n    if r == 1 and c == 5:\n        return 5\n    if r == 1 and c == 6:\n        return 6\n    if r == 1 and c == 7:\n        return 7\n    if r == 1 and c == 8:\n        return 8\n    if r == 1 and c == 9:\n        return 9\n    if r == 1 and c == 10:\n        return 10\n    if r == 2 and c == 1:\n        return 1\n    if r == 2 and c == 2:\n        return 2\n    if r == 2 and c == 3:\n        return 3\n    if r == 2 and c == 4:\n        return 4\n    if r == 2 and c == 5:\n        return 5\n    if r == 2 and c == 6:\n        return 6\n    if r == 2 and c == 7:\n        return 7\n    if r == 2 and c == 8:\n        return 8\n    if r == 2 and c == 9:\n        return 9\n    if r == 2 and c == 10:\n        return 10\n    if r == 3 and c == 1:\n        return 1\n    if r == 3 and c == 2:\n        return 2\n    if r == 3 and c == 3:\n        return 3\n    if r == 3 and c == 4:\n        return 4\n    if r == 3 and c == 5:\n        return 5\n    if r == 3 and c == 6:\n        return 6\n    if r == 3 and c == 7:\n        return 7\n    if r == 3 and c == 8:\n        return 8\n    if r == 3 and c == 9:\n        return 9\n    if r == 3 and c == 10:\n        return 10\n    if r == 4 and c == 1:\n        return 1\n    if r == 4 and c == 2:\n        return 2\n    if r == 4 and c == 3:\n        return 3\n    if r == 4 and c == 4:\n        return 4\n    if r == 4 and c == 5:\n        return 5\n    if r == 4 and c == 6:\n        return 6\n    if r == 4 and c == 7:\n        return 7\n    if r == 4 and c == 8:\n        return 8\n    if r == 4 and c == 9:\n        return 9\n    if r == 4 and c == 10:\n        return 10\n    if r == 5 and c == 1:\n        return 1\n    if r == 5 and c == 2:\n        return 2\n    if r == 5 and c == 3:\n        return 3\n    if r == 5 and c == 4:\n        return 4\n    if r == 5 and c == 5:\n        return 5\n    if r == 5 and c == 6:\n        return 6\n    if r == 5 and c == 7:\n        return 7\n    if r == 5 and c == 8:\n        return 8\n    if r == 5 and c == 9:\n        return 9\n    if r == 5 and c == 10:\n        return 10\n    if r == 6 and c == 1:\n        return 1\n    if r == 6 and c == 2:\n        return 2\n    if r == 6 and c == 3:\n        return 3\n    if r == 6 and c == 4:\n        return 4\n    if r == 6 and c == 5:\n        return 5\n    if r == 6 and c == 6:\n        return 6\n    if r == 6 and c == 7:\n        return 7\n    if r == 6 and c == 8:\n        return 8\n    if r == 6 and c == 9:\n        return 9\n    if r == 6 and c == 10:\n        return 10\n    if r == 7 and c == 1:\n        return 1\n    if r == 7 and c == 2:\n        return 2\n    if r == 7 and c == 3:\n        return 3\n    if r == 7 and c == 4:\n        return 4\n    if r == 7 and c == 5:\n        return 5\n    if r == 7 and c == 6:\n        return 6\n    if r == 7 and c == 7:\n        return 7\n    if r == 7 and c == 8:\n        ",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4974,
      "prompt": "Complete the Python function given the prompt below:\nGoing to a contest such as NWERC is not all fun and games, there are also some worldly matters to tend to. One of these is to book hotel rooms in time, before all the rooms in town are booked. \nIn this problem, you should write a program to search for available rooms in a given hotel. The hotel has $r$ rooms, numbered from $1$ to $r$, and you will be given a list describing which of these rooms are already booked.\n-----Input-----\nThe input consists of:\n - one line with two integers $r$ and $n$ ($1\\leq r \\leq 100$, $0 \\leq n \\le r$), the number of rooms in the hotel and the number of rooms that are already booked, respectively;\n - $n$ lines, each with an integer between $1$ and $r$ (inclusive), a room number that is already booked;\nAll $n$ room numbers of the already booked rooms are distinct.\n-----Output-----\nIf there are available rooms, output the room number of any such room. Otherwise, output \u201ctoo late\u201d.\n-----Examples-----\nSample Input:\n100 5\n42\n3\n2\n99\n1\nSample Output:\n23\n\ndef",
      "answer": "def search_booking(r, n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return r\n    if n == 2:\n        return r\n    if n == 3:\n        return r\n    if n == 4:\n        return r\n    if n == 5:\n        return r\n    if n == 6:\n        return r\n    if n == 7:\n        return r\n    if n == 8:\n        return r\n    if n == 9:\n        return r\n    if n == 10:\n        return r\n    if n == 11:\n        return r\n    if n == 12:\n        return r\n    if n == 13:\n        return r\n    if n == 14:\n        return r\n    if n == 15:\n        return r\n    if n == 16:\n        return r\n    if n == 17:\n        return r\n    if n == 18:\n        return r\n    if n == 19:\n        return r\n    if n == 20:\n        return r\n    if n == 21:\n        return r\n    if n == 22:\n        return r\n    if n == 23:\n        return r\n    if n == 24:\n        return r\n    if n == 25:\n        return r\n    if n == 26:\n        return r\n    if n == 27:\n        return r\n    if n == 28:\n        return r\n    if n == 29:\n        return r\n    if n == 30:\n        return r\n    if n == 31:\n        return r\n    if n == 32:\n        return r\n    if n == 33:\n        return r\n    if n == 34:\n        return r\n    if n == 35:\n        return r\n    if n == 36:\n        return r\n    if n == 37:\n        return r\n    if n == 38:\n        return r\n    if n == 39:\n        return r\n    if n == 40:\n        return r\n    if n == 41:\n        return r\n    if n == 42:\n        return r\n    if n == 43:\n        return r\n    if n == 44:\n        return r\n    if n == 45:\n        return r\n    if n == 46:\n        return r\n    if n == 47:\n        return r\n    if n == 48:\n        return r\n    if n == 49:\n        return r\n    if n == 50:\n        return r\n    if n == 51:\n        return r\n    if n == 52:\n        return r\n    if n == 53:\n        return r\n    if n == 54:\n        return r\n    if n == 55:\n        return r\n    if n == 56:\n        return r\n    if n == 57:\n        return r\n    if n == 58:\n        return r\n    if n == 59:\n        return r\n    if n == 60:\n        return r\n    if n == 61:\n        return r\n    if n == 62:\n        return r\n    if n == 63:\n        return r\n    if n == 64:\n        return r\n    if n == 65:\n        return r\n    if n == 66:\n        return r\n    if n == 67:\n        return r\n    if n == 68:\n        return r\n    if n == 69:\n        return r\n    if n == 70:\n        return r\n    if n == 71:\n        return r\n    if n == 72:\n        return r\n    if n == 73:\n        return r\n    if n == 74:\n        return r\n    if n == 75:\n        return r\n    if n == 76:\n        return r\n    if n == 77:\n        return r\n    if n == 78:\n        return r\n    if n == 79:\n        return r\n    if n == 80:\n        return r\n    if n == 81:\n        return r\n    if n == 82:\n        return r\n    if n == 83:\n        return r\n    if n == 84:\n        return r\n    if n == 85:\n        return r\n    if n == 86:\n        return r\n    if n == 87:\n        return r\n    if n == 88:\n        return r\n    if n == 89:\n        return r\n    if n == 90:\n        return r\n    if n == 91:\n        return r\n    if",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4975,
      "prompt": "Complete the Python function given the prompt below:\nThe Playfair cipher is a manual symmetric encryption technique and was the first digraph substitution cipher. The scheme was invented in 1854 by Charles Wheatstone, but bears the name of Lord Playfair who promoted the use of the cipher.\nThe Playfair cipher uses a $5$ by $5$ table containing each letter in the English alphabet exactly once (except \u2018Q\u2019 which is missing). The table constitutes the encryption key. To more easily remember the table, it is typically generated from a key phrase. First fill in the spaces in an empty table with the letters of the key phrase (dropping spaces and duplicate letters), then fill the remaining spaces with the rest of the letters of the alphabet in order. The key phrase is written in the top rows of the table, from left to right. For instance, if the key phrase is \u201cplayfair example\u201d, the encryption key becomes\nP\nL\nA\nY\nF\nI\nR\nE\nX\nM\nB\nC\nD\nG\nH\nJ\nK\nN\nO\nS\nT\nU\nV\nW\nZ\nTo encrypt a message, one would remove all spaces and then break the message into digraphs (groups of $2$ letters) such that, for example, \u201cHello World\u201d becomes \u201cHE LL OW OR LD\u201d. Then map them out on the key table, and apply the rule below that matches the letter combination:\n - If both letters are the same (or only one letter is left), add an \u2018X\u2019 after the first letter. Encrypt the new pair and continue (note that this changes all the remaining digraphs).\n - If the letters appear on the same row of your table, replace them with the letters to their immediate right respectively (wrapping around to the left side of the row if a letter in the original pair was on the right side of the row). With the table above, the digraph \u2018CH\u2019 would be encrypted \u2018DB\u2019.\n - If the letters appear on the same column of your table, replace them with the letters immediately below respectively (wrapping around to the top side of the column if a letter in the original pair was on the bottom side of the column). With the table above, the digraph \u2018VA\u2019 would be encrypted \u2018AE\u2019.\n - If the letters are not on the same row or column, replace them with the letters on the same row respectively but at the other pair of corners of the rectangle defined by the original pair. The order is important \u2013 the first letter of the encrypted pair is the one that lies on the same row as the first letter of the plaintext pair. With the table above, the digraph \u2018KM\u2019 would be encrypted \u2018SR\u2019.\nWrite a program that reads a key phrase and a plaintext to encrypt, and outputs the encrypted text.\nThe text to encrypt will not contain two \u2019x\u2019s following each other, or an \u2019x\u2019 as the last character, as this might cause the first rule above to repeat itself indefinitely.\n-----Input-----\nThe input contains two lines. The first line contains the key phrase. The second line contains the text to encrypt. Each line contains between $1$ and $1000$ characters, inclusive. Each character is a lower case English letter, \u2018a\u2019-\u2018z\u2019 (except \u2018q\u2019), or a space character. Neither line starts or ends with a space.\n-----Output-----\nThe output should be a single line containing the encrypted text, in upper case. There should be no spaces in the output.\n-----Examples-----\nSample Input:\nplayfair example\nhide the gold in the tree stump\nSample Output:\nBMNDZBXDKYBEJVDMUIXMMNUVIF\n\ndef",
      "answer": "def encrypt(key, plaintext):\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    # your code goes here\n    ",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4976,
      "prompt": "Complete the Python function given the prompt below:\nA large field has a dog and a gopher. The dog wants to eat the gopher, while the gopher wants to run to safety through one of several gopher holes dug in the surface of the field.\nNeither the dog nor the gopher is a math major; however, neither is entirely stupid. The gopher decides on a particular gopher hole and heads for that hole in a straight line at a fixed speed. The dog, which is very good at reading body language, anticipates which hole the gopher has chosen, and heads at double the speed of the gopher to the hole, where it intends to gobble up the gopher. If the dog reaches the hole first, the gopher gets gobbled; otherwise, the gopher escapes.\nYou have been retained by the gopher to select a hole through which it can escape, if such a hole exists.\n-----Input-----\nThe first line of input contains four real numbers: the $(x,y)$ coordinates of the gopher followed by the $(x,y)$ coordinates of the dog. Subsequent lines of input each contain two real numbers: the $(x,y)$ coordinates of a gopher hole. All coordinates are in metres, with exactly three digits after the decimal point.\nThere are not more than $1000$ gopher holes and all coordinates are between $-10000$ and $+10000$.\n-----Output-----\nYour output should consist of a single line. If the gopher can escape the line should read \u201cThe gopher can escape through the hole at ($x$,$y$).\u201d identifying the appropriate hole.\nOtherwise the output line should read \u201cThe gopher cannot escape.\u201d If the gopher may escape through more than one hole, any one will do. If the gopher and dog reach the hole at the same time, the gopher escapes successfully.\n-----Examples-----\nSample Input:\n1.000 1.000 2.000 2.000\n1.500 1.500\nSample Output:\nThe gopher cannot escape.\n\ndef",
      "answer": "def gopher(x,y):\n    if x<=0 or y<=0 or x>=1000 or y>=1000:\n        return \"The gopher cannot escape.\"\n    if x>=0 and y>=0 and x<=1000 and y<=1000:\n        return \"The gopher cannot escape.\"\n    if x>=0 and y>=0 and x<=1000 and y<=1000:\n        return \"The gopher cannot escape.\"\n    if x>=0 and y>=0 and x<=1000 and y<=1000:\n        return \"The gopher cannot escape.\"\n    if x>=0 and y>=0 and x<=1000 and y<=1000:\n        return \"The gopher cannot escape.\"\n    if x>=0 and y>=0 and x<=1000 and y<=1000:\n        return \"The gopher cannot escape.\"\n    if x>=0 and y>=0 and x<=1000 and y<=1000:\n        return \"The gopher cannot escape.\"\n    if x>=0 and y>=0 and x<=1000 and y<=1000:\n        return \"The gopher cannot escape.\"\n    if x>=0 and y>=0 and x<=1000 and y<=1000:\n        return \"The gopher cannot escape.\"\n    if x>=0 and y>=0 and x<=1000 and y<=1000:\n        return \"The gopher cannot escape.\"\n    if x>=0 and y>=0 and x<=1000 and y<=1000:\n        return \"The gopher cannot escape.\"\n    if x>=0 and y>=0 and x<=1000 and y<=1000:\n        return \"The gopher cannot escape.\"\n    if x>=0 and y>=0 and x<=1000 and y<=1000:\n        return \"The gopher cannot escape.\"\n    if x>=0 and y>=0 and x<=1000 and y<=1000:\n        return \"The gopher cannot escape.\"\n    if x>=0 and y>=0 and x<=1000 and y<=1000:\n        return \"The gopher cannot escape.\"\n    if x>=0 and y>=0 and x<=1000 and y<=1000:\n        return \"The gopher cannot escape.\"\n    if x>=0 and y>=0 and x<=1000 and y<=1000:\n        return \"The gopher cannot escape.\"\n    if x>=0 and y>=0 and x<=1000 and y<=1000:\n        return \"The gopher cannot escape.\"\n    if x>=0 and y>=0 and x<=1000 and y<=1000:\n        return \"The gopher cannot escape.\"\n    if x>=0 and y>=0 and x<=1000 and y<=1000:\n        return \"The gopher cannot escape.\"\n    if x>=0 and y>=0 and x<=1000 and y<=1000:\n        return \"The gopher cannot escape.\"\n    if x>=0 and y>=0 and x<=1000 and y<=1000:\n        return \"The gopher cannot escape.\"\n    if x>=0 and y>=0 and x<=1000 and y<=1000:\n        return \"The gopher cannot escape.\"\n    if x>=0 and y>=0 and x<=1000 and y<=1000:\n        return \"The gopher cannot escape.\"\n    if x>=0 and y>=0 and x<=1000 and y<=1000:\n        return \"The gopher cannot escape.\"\n    if x>=0 and y>=0 and x<=1000 and y<=1000:\n        return \"The gopher cannot escape.\"\n    if x>=0 and y>=0 and x<=1000 and y<=1000:\n        return \"The gopher cannot escape.\"\n    if x>=0 and y>=0 and x<=1000 and y<=1000:\n        return \"The gopher cannot escape.\"\n    if x>=0 and y>=0 and x<=1000 and y<=1000:\n        return \"The gopher cannot escape.\"\n    if x>=0 and y>=0 and x<=1000 and y<=1000:\n        return \"The gopher cannot escape.\"\n    if x>=0 and y>=0 and x<=1000 and y<=1000:\n        return \"",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4977,
      "prompt": "Complete the Python function given the prompt below:\nYou live in Grid City, which is composed of integer-numbered streets which run east-west (parallel to the $x$-axis) and integer-numbered avenues which run north-south (parallel to the $y$-axis). The streets and avenues have infinite length, and there is a street for every integer $y$-coordinate and an avenue for every $x$-coordinate. All intersections are labelled by their integer coordinates: for example, avenue $7$ and street $-3$ intersect at $(7,-3)$.\nYou drive a special electric car which uses up one unit of electrical charge moving between adjacent intersections: that is, moving either north or south to the next street, or moving east or west to the next avenue). Until your battery runs out, at each intersection, your car can turn left, turn right, go straight through, or make a U-turn. You may visit the same intersection multiple times on the same trip.\nSuppose you know your starting intersection, your destination intersection and the number of units of electrical charge in your battery. Determine whether you can travel from the starting intersection to the destination intersection using the charge available to you in such a way that your battery is empty when you reach your destination.\n-----Input-----\nThe input consists of three lines. The first line contains $a$ followed by $b$, indicating the starting coordinate $(a, b)$ ($-1000 \\le a \\le 1000$; $-1000 \\le b \\le 1000$).\nThe second line contains $c$ followed by $d$, indicating the destination coordinate $(c, d)$ ($-1000 \\le c \\le 1000$; $-1000 \\le d \\le 1000$).\nThe third line contains an integer $t$ ($0 \\le t \\le 10000$) indicating the initial number of units of electrical charge of your battery.\n-----Output-----\nOutput Y if it is possible to move from the starting coordinate to the destination coordinate using exactly $t$ units of electrical charge. Otherwise output N.\n-----Examples-----\nSample Input:\n3 4\n3 3\n3\nSample Output:\nY\n\ndef",
      "answer": "def move(a,b,c,d,t):\n    if a==b or b==c or c==d:\n        return True\n    else:\n        return False\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4978,
      "prompt": "Complete the Python function given the prompt below:\nConsider a grid consisting of $N$ rows and $M$ columns, where each cell is either air, stone, or water. Each second, the water spreads in the following fashion:\n - If a water cell is directly above an air cell then the air cell turns into water in the next second.\n - If a water cell is directly above a stone cell then any air cells directly left or right of the water cell turn into water in the next second.\nAfter some number of seconds, the water will have stopped spreading. Show how the grid looks when that happens. You can assume that all cells outside of the grid behave as air cells; for instance, if a water cell is at the bottommost row then its water will not spread to the sides.\n-----Input-----\nThe first line consists of two integers $N$ and $M$ ($2 \\leq N,M \\leq 50$), the number of rows and columns in the grid.\nEach of the following $N$ lines contains a string $S$ of length $M$. The string $S$ represents one of the rows in the grid. It consists of the symbols \u201c.\u201d (air), \u201c#\u201d (stone), and \u201cV\u201d (water).\n-----Output-----\nPrint $N$ lines, each consisting of a string of length $M$, describing the grid as it looks when the water has stopped spreading.\n-----Examples-----\nSample Input:\n5 7\n...V...\n.......\n.......\n...#...\n..###..\nSample Output:\n...V...\n...V...\n..VVV..\n.VV#VV.\n.V###V.\n\ndef",
      "answer": "def water_spread(grid):\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 'V':\n                if i > 0 and grid[i-1][j] == '#':\n                    grid[i][j] = 'V'\n                    grid[i-1][j] = '#'\n                elif i < len(grid)-1 and grid[i+1][j] == '#':\n                    grid[i][j] = 'V'\n                    grid[i+1][j] = '#'\n                elif j > 0 and grid[i][j-1] == '#':\n                    grid[i][j] = 'V'\n                    grid[i][j-1] = '#'\n                elif j < len(grid[i])-1 and grid[i][j+1] == '#':\n                    grid[i][j] = 'V'\n                    grid[i][j+1] = '#'\n    return grid\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4979,
      "prompt": "Complete the Python function given the prompt below:\nYi has moved to Sweden and now goes to school here. The first years of schooling she got in China, and the curricula do not match completely in the two countries. Yi likes mathematics, but now... The teacher explains the algorithm for subtraction on the board, and Yi is bored. Maybe it is possible to perform the same calculations on the numbers corresponding to the reversed binary representations of the numbers on the board? Yi dreams away and starts constructing a program that reverses the binary representation, in her mind. As soon as the lecture ends, she will go home and write it on her computer.\n-----Task-----\nYour task will be to write a program for reversing numbers in binary. For instance, the binary representation of 13 is 1101, and reversing it gives 1011, which corresponds to number 11.\n-----Input-----\nThe input contains a single line with an integer $N$, $1 \\leq N \\leq 1\\; 000\\; 000\\; 000$.\n-----Output-----\nOutput one line with one integer, the number we get by reversing the binary representation of $N$.\n-----Examples-----\nSample Input:\n13\nSample Output:\n11\n\ndef",
      "answer": "def reverse(n):\n    if n == 0:\n        return 0\n    else:\n        return n - reverse(n - 1)\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4980,
      "prompt": "Complete the Python function given the prompt below:\nThore is a fashionable man. Every time he meets up with his programming team, he wears his hot pink team hoodie over a salmon colored shirt with shirt buttons in a dashing rose or pink shade. Of course, he can\u2019t show up to two training sessions with the same buttons on his shirt, that would cause unbearable ridicule. If he can\u2019t find buttons for this perfect color combination, he will come up with some poor excuse for not showing up. He has a box full of different colored buttons in labeled packages. Unfortunately, Thore is color blind, so his helpful daughter has labeled each package with the color of the buttons. Her writing is terrible though, she mixes uppercase and lowercase arbitrarily and has no spacing between words, so Thore needs your help to decipher the names on the labels and select buttons with either \u201cpink\u201d or \u201crose\u201d somewhere in the name, ignoring case. \n-----Input-----\nInput starts with an integer $1 \\leq N \\leq 1000$, the number of button packages in the box. The following $N$ lines each has a color name, one for each package. The names consist of up to 30 characters of letters A - Z, a - z.\n-----Output-----\nPrint one integer, the number of training sessions Thore can attend. If he can\u2019t attend any session because there are no pink buttons, output his standard excuse \u201cI must watch Star Wars with my daughter\u201d.\n-----Examples-----\nSample Input:\n12\npink\ntequilaSunrose\nmExicanPInK\nCoquelicot\nturqrose\nroSee\nJETblack\npink\nbabypink\npInKpinkPinK\nPInkrose\nlazerlemon\nSample Output:\n9\n\ndef",
      "answer": "def thore(n):\n    if n == 1:\n        return \"pink\"\n    elif n == 2:\n        return \"rose\"\n    elif n == 3:\n        return \"rose\"\n    elif n == 4:\n        return \"rose\"\n    elif n == 5:\n        return \"rose\"\n    elif n == 6:\n        return \"rose\"\n    elif n == 7:\n        return \"rose\"\n    elif n == 8:\n        return \"rose\"\n    elif n == 9:\n        return \"rose\"\n    elif n == 10:\n        return \"rose\"\n    elif n == 11:\n        return \"rose\"\n    elif n == 12:\n        return \"rose\"\n    elif n == 13:\n        return \"rose\"\n    elif n == 14:\n        return \"rose\"\n    elif n == 15:\n        return \"rose\"\n    elif n == 16:\n        return \"rose\"\n    elif n == 17:\n        return \"rose\"\n    elif n == 18:\n        return \"rose\"\n    elif n == 19:\n        return \"rose\"\n    elif n == 20:\n        return \"rose\"\n    elif n == 21:\n        return \"rose\"\n    elif n == 22:\n        return \"rose\"\n    elif n == 23:\n        return \"rose\"\n    elif n == 24:\n        return \"rose\"\n    elif n == 25:\n        return \"rose\"\n    elif n == 26:\n        return \"rose\"\n    elif n == 27:\n        return \"rose\"\n    elif n == 28:\n        return \"rose\"\n    elif n == 29:\n        return \"rose\"\n    elif n == 30:\n        return \"rose\"\n    elif n == 31:\n        return \"rose\"\n    elif n == 32:\n        return \"rose\"\n    elif n == 33:\n        return \"rose\"\n    elif n == 34:\n        return \"rose\"\n    elif n == 35:\n        return \"rose\"\n    elif n == 36:\n        return \"rose\"\n    elif n == 37:\n        return \"rose\"\n    elif n == 38:\n        return \"rose\"\n    elif n == 39:\n        return \"rose\"\n    elif n == 40:\n        return \"rose\"\n    elif n == 41:\n        return \"rose\"\n    elif n == 42:\n        return \"rose\"\n    elif n == 43:\n        return \"rose\"\n    elif n == 44:\n        return \"rose\"\n    elif n == 45:\n        return \"rose\"\n    elif n == 46:\n        return \"rose\"\n    elif n == 47:\n        return \"rose\"\n    elif n == 48:\n        return \"rose\"\n    elif n == 49:\n        return \"rose\"\n    elif n == 50:\n        return \"rose\"\n    elif n == 51:\n        return \"rose\"\n    elif n == 52:\n        return \"rose\"\n    elif n == 53:\n        return \"rose\"\n    elif n == 54:\n        return \"rose\"\n    elif n == 55:\n        return \"rose\"\n    elif n == 56:\n        return \"rose\"\n    elif n == 57:\n        return \"rose\"\n    elif n == 58:\n        return \"rose\"\n    elif n == 59:\n        return \"rose\"\n    elif n == 60:\n        return \"rose\"\n    elif n == 61:\n        return \"rose\"\n    elif n == 62:\n        return \"rose\"\n    elif n == 63:\n        return \"rose\"\n    elif n == 64:\n        return \"rose\"\n    elif n == 65:\n        return \"rose\"\n    elif n == 66:\n        return \"rose\"\n    elif n == 67:\n        return \"rose\"\n    elif n == 68:\n        return \"rose\"\n    elif n == 69:\n        return \"rose\"\n    elif n == 70:\n        return \"rose\"\n    elif n == 71:\n        return \"rose\"\n    elif n == 72:\n        return \"rose\"\n    elif n == 73:\n        return",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4981,
      "prompt": "Complete the Python function given the prompt below:\nYou will be given three integers $A$, $B$ and $C$. The numbers will not be given in that exact order, but we do know that $A$ is less than $B$ and $B$ less than $C$. In order to make for a more pleasant viewing, we want to rearrange them in a given order.\n-----Input-----\nThe first line contains the three positive integers $A$, $B$ and $C$, not necessarily in that order. The three numbers will be less than or equal to $100$.\nThe second line contains three uppercase letters \u2019A\u2019, \u2019B\u2019 and \u2019C\u2019 (with no spaces between them) representing the desired order.\n-----Output-----\nOutput $A$, $B$ and $C$ in the desired order on a single line, separated by single spaces.\n-----Examples-----\nSample Input:\n1 5 3\nABC\nSample Output:\n1 3 5\n\ndef",
      "answer": "def rearrange_numbers(A, B, C):\n    if A < B < C:\n        return A, B, C\n    else:\n        return A, C, B\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4982,
      "prompt": "Complete the Python function given the prompt below:\nKattis\u2019 grumpy old aunt Mittens in Taxmania has recently died at a tender age of $109$ cat years. Among her many papers are her stock records. As it turns out, Mittens traded a lot in the stock of her namesake mitten-producing company Mittens Conglomerated. \nIn Taxmania dead cats are prohibited from owning stock, so when Mittens died, all her shares (units) of stock in Mittens Conglomerated were sold, with $30\\% $ of the capital gains paid as taxes. Your task is to compute how much money the final sale of Mittens\u2019 shares yields, after paying taxes on the profits. There are no tax effects from selling at a loss.\nMittens stock records indicate the history of her purchases and sales of shares, and at what costs they were made. In addition, they indicate when the company performed splits and merges of its stock. When the company splits its stock, every share is replaced by $x$ new shares, and the value divided evenly between them. When the company merges its stock, every $x$ shares are replaced by a single stock. If Mittens can not merge all her shares (due to her number of shares not being divisible by $x$), she is forced to sell any remainder stock (at a price equal to the current average cost of her shares).\nFor example, consider the following sequence of events (corresponding to Sample Input 2):\n - Mittens buys $10$ shares for $10$ crowns per share.\n - Mittens buys $30$ shares for $5$ crowns per share. The average cost of her $40$ shares is now $\\frac{10 \\cdot 10 + 30 \\cdot 5}{10 + 30} = 6.25$ crowns.\n - Mittens sells $31$ shares for $8$ crowns per share. The profit is $8-6.25=1.75$ crowns per share (which is subject to capital gains tax but that is irrelevant). The sale does not change the average cost of Mittens\u2019 shares.\n - The company performs a split with $x=2$. Mittens\u2019 shares split into $2 \\cdot 9 = 18$ shares, of average cost $6.25 / 2 = 3.125$.\n - The company performs a merge with $x=8$. Mittens merges $16$ of her $18$ shares into $2$ new shares of average cost $8 \\cdot 3.125 = 25$. The last two remaining old shares can not be merged and Mittens is forced to sell them.\n - Mittens dies and her $2$ shares are sold for $42$ crowns per share. The profit is $42-25=17$ crowns per share, which is subject to the $30\\% $ tax. The total amount obtained from the final sale after taxes is thus $2 \\cdot (42 - 17 \\cdot 0.3) = 73.8$ crowns.\n-----Input-----\nThe input contains a sequence of at most $10000$ events in chronological order. Each event is in one of the following forms:\n - \u201cbuy $x$ $y$\u201d: Mittens bought $x$ shares of stock at $y$ crowns per share.\n - \u201csell $x$ $y$\u201d: Mittens sold $x$ shares of stock at $y$ crowns per share (and used the money for purposes unknown). The value of $x$ is no greater than the number of shares owned before the event.\n - \u201csplit $x$\u201d: The stock split with $x$ new shares for each share.\n - \u201cmerge $x$\u201d: The stock merged with one new share for every $x$ shares.\n - \u201cdie $y$\u201d: The remaining shares were sold off at the death of Mittens for $y$ crowns per share. This event happens exactly once and is guaranteed to be the last event in the input.\nIn all events, $x$ and $y$ are integers satisfying $1 \\le x \\le 1000$ and $1 \\le y \\le 1000$. You may assume that at any point in time in the event history, the total number of shares of stock owned by Mittens was at most $10^6$.\n-----Output-----\nOutput a single line containing the number of crowns obtained (after paying taxes) in the final sale of Mittens\u2019 stock after her death. The answer should be accurate to within an absolute error of at most $0.01$.\n-----Examples-----\nSample Input:\nbuy 1 15\nsplit 3\nsell 1 5\ndie 4\nSample Output:\n8.00000000\n\ndef",
      "answer": "def get_crowns(x, y):\n    return x * y\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4983,
      "prompt": "Complete the Python function given the prompt below:\nConsider a positive integer $x$. Multiply its nonzero digits and you get another integer $y$. Repeating this process, you eventually arrive at a single digit between $1$ and $9$. Write a program that reads $x$ and outputs the resulting digit.\n-----Input-----\nAn integer $x$ with $10 \\leq x \\leq 1000$.\n-----Output-----\nPrint a digit between $1$ and $9$, the result of repeatedly multiplying the nonzero digits of $x$ as described above.\n-----Explanation of Sample Inputs-----\nIn Sample Input $1$, we have $x = 808$. Multiplying $8$ and $8$, we arrive at $64$. Then we get $6 \\cdot 4 = 24$, and finally $2 \\cdot 4 = 8$, which is the sample output.\nIn Sample Input $2$, there is only a single nonzero digit, $2$. The product of all digits in a set containing only a single element is the digit itself. Thus the answer is $2$.\n-----Examples-----\nSample Input:\n808\nSample Output:\n8\n\ndef",
      "answer": "def mult_digits(x):\n    return x % 10\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4984,
      "prompt": "Complete the Python function given the prompt below:\nYou are mapping a faraway planet using a satellite. The planet\u2019s surface can be modeled as a grid. The satellite has captured an image of the surface. Each grid square is either land (denoted as \u2018L\u2019), water (denoted as \u2018W\u2019), or covered by clouds (denoted as \u2018C\u2019). Clouds mean that the surface could either be land or water; you cannot tell.\nAn island is a region of land where every grid cell in the island is connected to every other by some path, and every leg of the path only goes up, down, left or right.\nGiven an image, determine the minimum number of islands that is consistent with the given image.\n-----Input-----\nEach input will consist of a single test case. Note that your program may be run multiple times on different inputs. The first line of input contains two integers, $r$ and $c$ ($1 \\le r, c \\le 50$), which are the number of rows and the number of columns of the image. The next $r$ lines will each contain exactly $c$ characters, consisting only of \u2018L\u2019 (representing Land), \u2018W\u2019 (representing Water), and \u2018C\u2019 (representing Clouds).\n-----Output-----\nOutput a single integer, which is the minimum number of islands possible.\n-----Examples-----\nSample Input:\n4 5\nCCCCC\nCCCCC\nCCCCC\nCCCCC\nSample Output:\n0\n\ndef",
      "answer": "def island(grid):\n    count = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 'L':\n                count += 1\n            elif grid[i][j] == 'W':\n                count += 1\n            elif grid[i][j] == 'C':\n                count += 1\n    return count\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4985,
      "prompt": "Complete the Python function given the prompt below:\nYoung Mirko is a smart, but mischievous boy who often wanders around parks looking for new ideas. This time he\u2019s come across pensioners playing the card game Belote. They\u2019ve invited him to help them determine the total number of points in a game.\nEach card can be uniquely determined by its number and suit. A set of four cards is called a hand. At the beginning of a game one suit that \u201ctrumps\u201d any other is chosen, and it is called the dominant suit. The number of points in a game is equal to the sum of values of each card from each hand in the game. Mirko has noticed that the pensioners have played $N$ hands and that suit $B$ was the dominant suit.\nThe value of each card depends on its number and whether its suit is dominant, and is given in Table\u00a01.\nNumber\nValue\u00a0\nDominant\nNot dominant\nA\n$11$\n$11$\nK\n$4$\n$4$\nQ\n$3$\n$3$\nJ\n$20$\n$2$\nT\n$10$\n$10$\n9\n$14$\n$0$\n8\n$0$\n$0$\n7\n$0$\n$0$Table 1: Scores \nWrite a programme that will determine and output the number of points in the game.\n-----Input-----\nThe first line contains the number of hands $N$ ($1 \\leq N \\leq 100$) and the value of suit $B$ (S, H, D, C) from the task. Each of the following $4N$ lines contains the description of a card (the first character is the number of the $i$-th card (A, K, Q, J, T, 9, 8, 7), and the second is the suit (S, H, D, C)).\n-----Output-----\nThe first and only line of output must contain the number of points from the task.\n-----Examples-----\nSample Input:\n2 S\nTH\n9C\nKS\nQS\nJS\nTD\nAD\nJH\nSample Output:\n60\n\ndef",
      "answer": "def main():\n    n = int(input())\n    s = input()\n    for i in range(n):\n        print(sum(map(int, input().split())))\nmain()\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4986,
      "prompt": "Complete the Python function given the prompt below:\nOh no! Joanna just spilled some syrup on her keyboard and now some of the keys are sticky. This causes her considerable frustration, as every time she presses one of the sticky keys, the corresponding character gets entered twice on her computer. \nThis could not have happened at a more inconvenient time; it is the start of the contest and she was just about to type in the solution to the first problem! Joanna does not have time to remove and clean every key on her keyboard, so she wonders if there is a way to quickly identify the sticky keys. Starting to panic, she quickly types some text on her keyboard and stares at the resulting text displayed on her screen.\nGiven the line of text that Joanna typed on her keyboard and the resulting text displayed on her screen, help her determine which keys must be sticky.\n-----Input-----\nThe input consists of:\n - One line containing a string $s$ ($1 \\leq \\mathrm{length}(s) \\leq 1000$), the text that Joanna typed on her keyboard.\n - One line containing a string $t$ ($1 \\leq \\mathrm{length}(t) \\leq 1000$), the text displayed on Joanna\u2019s screen as a result.\nBoth $s$ and $t$ consist only of lower-case letters (\u2018a\u2019\u2013\u2018z\u2019) and spaces (\u2018 \u2019), and start and end with a letter.\nIt is guaranteed that $t$ is the result of doubling each character in $s$ that corresponds to a sticky key. At least one character in $s$ corresponds to a sticky key (i.e. $s \\neq t$).\n-----Output-----\nOutput all characters (letters and space) corresponding to keys that must be sticky, in any order.\n-----Examples-----\nSample Input:\nthis is very annoying\nthiss iss veery annoying\nSample Output:\nse\n\ndef",
      "answer": "def is_sticky(s):\n    if len(s) < 1000:\n        return False\n    else:\n        return True\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4987,
      "prompt": "Complete the Python function given the prompt below:\nHaving discolored his white socks in a rather beige shade (as seen on the picture), Luktas Svettocek realised he can\u2019t just throw all his laundry into one machine and expect it to retain its original colors. However, he is also too lazy to do his laundry in several rounds. He would much rather buy more laundry machines!\nEach of Luktas\u2019 socks have a color $D_ i$ which has a number between $0$ and $10^9$ assigned to it. After some experimentation, he found that he could wash any socks with a maximum absolute color difference of $K$ in the same machine without any discoloring. The color difference of two socks $i$ and $j$ is $|D_ i - D_ j|$.\nLuktas now needs to know how many washing machines he needs to wash his $S$ socks, given that each machine can take at most $C$ socks a time.\n-----Input-----\nThe first line consists of three integers $1 \\le S, C \\le 10^5$ and $0 \\le K \\le 10^9$, the number of socks, the capacity of a laundry machine and the maximum color difference, respectively. Then follow one line with $S$ integers; these are the color values $D_ i$ of every sock.\n-----Output-----\nOutput a single integer; the number of machines Luktas needs to wash all his socks.\n-----Examples-----\nSample Input:\n5 3 0\n0 0 1 1 2\nSample Output:\n3\n\ndef",
      "answer": "def wash_socks(S, C, K):\n    return (S - K) // C\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4988,
      "prompt": "Complete the Python function given the prompt below:\nThe factorial of $N$, written as $N!$, is defined as the product of all the integers from $1$ to $N$. For example, $3! = 1 \\times 2 \\times 3 = 6$.\nThis number can be very large, so instead of computing the entire product, just compute the last digit of $N!$ (when $N!$ is written in base\u00a0$10$).\n-----Input-----\nThe first line of input contains a positive integer $1 \\leq T \\leq 10$, the number of test cases. Each of the next $T$ lines contains a single positive integer $N$. $N$ is at most $10$.\n-----Output-----\nFor each value of $N$, print the last digit of $N!$.\n-----Examples-----\nSample Input:\n3\n1\n2\n3\nSample Output:\n1\n2\n6\n\ndef",
      "answer": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4989,
      "prompt": "Complete the Python function given the prompt below:\nAfter acquiring a new integer and showing it off to other couples at a cocktail party, Alice and Bob headed home for a good night of sleep. As their integer was quite large, they were forced to carry it together. Then, on the Boole Boulevard, right by the Bayes Bay, disaster struck. History does not tell us which of our two protagonists stumbled first, but stumble they did, and their integer shattered into $n$ positive integral pieces on the pavement in front of them.\nThe couple\u2019s marriage, already under financial stress due to the expensive integer acquisition, did not survive this event, and Bob and Alice resolved to separate. Thus the question was raised on how to split the remnants of their integer. Bob and Alice decided to play a game with the remaining $n$ pieces: the two would repeatedly choose pieces in alternating turns until none were left.\nBob and Alice, both very materialistic, seek to acquire the largest possible sum of integers possible. Compute the value of the integers each of them ends up with. Assume both players play optimally. Since A comes before B in the alphabet, Alice moves first.\n-----Input-----\nThe input consists of two lines.\n - A single integer $1 \\leq n \\leq 15$, the number of pieces.\n - The values of the pieces $a_0, a_1, \\dots, a_{n-1}$, space-separated. It is given that $1 \\leq a_ i \\leq 100$.\n-----Output-----\nOutput a single line containing two integers, the combined value of Alice\u2019s pieces, and the combined value of Bob\u2019s pieces.\n-----Examples-----\nSample Input:\n3\n3 1 2\nSample Output:\n4 2\n\ndef",
      "answer": "def sum_ints(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4990,
      "prompt": "Complete the Python function given the prompt below:\nOnce upon a time in a land of yore, there was a troll who lived \u2019neath one of the land\u2019s many stone bridges. This troll was quite a mischievous troll, for you see, it had a habit of accusing anyone crossing the bridge of having stolen the troll\u2019s property (which was a somewhat curious accusation given that the troll had no property), the punishment of which was to be eaten alive. Unfortunately for the troll, eventually the king got wind of its questionable business model, and sent out the valiant knights of the High Tavern to go, shall we say, Queen of Hearts, on the troll. \nApprehensive of its imminent decapitation, the troll fled, and did not have the decency to even leave a forwarding address. Being a troll, it was clear that the troll was hiding under some other stone bridge than the one it had used for its shady business practice, but which? The knights decided to split up in groups and go search. Since a group needed to be able to avoid being eaten once the troll was found, each group had to consist of at least a certain number of knights. Each group of knights could search under one stone bridge per day (and travelling between bridges was done at lightning speed, thanks to the knights\u2019 renowned iTravel\u2122 technology). While clever enough to flee from its hunting ground, the troll is not bright enough to keep moving between different bridges: once the hunt starts, the troll stays in the same place. How many days would it take until the troll would surely have been found?\n-----Input-----\nThe input consists of a single line containing three integers $b$, $k$ and $g$, where $2 \\le b \\le 1000$ is the number of stone bridges in the land, $1 \\le k \\le 100$ is the number of knights, and $1 \\le g \\le k$ is the number of knights needed in each group.\n-----Output-----\nOutput a line containing a single integer $d$, the number of days until the troll is sure to have met its destiny.\n-----Examples-----\nSample Input:\n5 2 1\nSample Output:\n2\n\ndef",
      "answer": "def find_days(b, k, g):\n    return (b * k) // g\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4991,
      "prompt": "Complete the Python function given the prompt below:\nAn interesting theory in mathematics is that there is a sequence generator that, given any positive integer as the starting point, always ends with the number $1$. Although this theory has never been proven, the conjecture is known as the Collatz Conjecture (named after Lothar Collatz, who posed the idea in 1937). Given an integer, $n\\geqslant 1$, this conjecture pertains to the sequence $h(n)$, which we recursively define as follows:\n - If $n=1$, the sequence is composed of a single integer: $1$\n - If $n$ is even, the sequence is composed of $n$ followed by sequence $h(n/2)$\n - If $n$ is odd, the sequence is composed of $n$ followed by sequence $h(3\\cdot n + 1)$\nFor example, the following are the sequences for the numbers $5$ and $7$:\n$h(5) = (5, 16, 8, 4, 2, 1)$\n$h(7) = (7, 22, 11, 34, 17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1)$\nThe $h(n)$ sequence is commonly known as the hailstone sequence, because of its nature of going up and down like a hailstone in a cloud before eventually falling to Earth. In this problem, you will calculate the sum of all the values in a hailstone sequence. Using the sequences above, the sum of $h(5)$ is $36$ and the sum of $h(7)$ is $288$.\nYour solution must use a RECURSIVE function,\n based on the recursive definition of $h(n)$ presented above.\nOn the exam, any other type of solution will receive zero points!\nEVEN IF KATTIS JUDGES IT AS CORRECT!\nNote: You are allowed to add up the numbers iteratively, as long as the $h(n)$ sequence is computed recursively.\n-----Input-----\nThe input contains a single positive integer, $n$ ($0 < n \\leqslant 2^{32}-1$).\n-----Output-----\nThe output contains a single integer: the sum of all the values in $h(n)$. You may assume that this sum will fit in an unsigned 64-bit integer.\n-----Examples-----\nSample Input:\n5\nSample Output:\n36\n\ndef",
      "answer": "def hailstone(n):\n    if n == 1:\n        return [1]\n    elif n == 2:\n        return [2]\n    else:\n        return [n] + hailstone(n//2) + [n] + hailstone(n*3+1)\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4992,
      "prompt": "Complete the Python function given the prompt below:\nLinda is giving an exam. When the exam is over, Linda will redistribute the exams among the students for a peer review, so they may grade each other\u2019s answers and assign preliminary scores.\nThe students are split up in several rooms of varying sizes. Linda has devised the following scheme for redistributing the exams:\n - Linda visits the first room, picks up all exams written there, and places them in a pile.\n - In each subsequent room Linda takes exams from the top of her pile and randomly distributes them to the students in the room. She then picks up all exams written in that room and adds them to the bottom of her pile.\n - After having visited each room exactly once, Linda returns to the first room, and distributes the remaining exams from her pile there.\nNaturally, it is imperative that no student receives their own exam to review, and that Linda does not run out of exams in her pile while doing the redistribution (i.e., that when entering a room after the first one, Linda\u2019s pile contains at least as many exams as there are students in the room). Whether or not this is the case depends on the order in which the rooms are visited. We say that an ordering of the rooms is safe if Linda will not run out of exams in her pile when visiting rooms in that order, and that there is no chance that any student receives their own exam to review.\nCan you find a safe order in which to visit the rooms (or determine that no safe order exists)?\n-----Input-----\nThe input consists of:\n - one line containing an integer $n$ ($2 \\le n \\le 30$), the number of rooms.\n - one line containing $n$ integers $s_1, \\ldots, s_ n$ ($1 \\le s_ i \\le 100$ for each $i$), where $s_ i$ is the number of students in room $i$.\n-----Output-----\nIf it is impossible to redistribute the exams safely, output \u201cimpossible\u201d. Otherwise, output a safe order in which to visit the rooms. If there are multiple safe orders, you may give any of them.\n-----Examples-----\nSample Input:\n4\n2 3 3 1\nSample Output:\n2 3 4 1\n\ndef",
      "answer": "def main():\n    n = int(input())\n    s = list(map(int, input().split()))\n    s.sort()\n    print(s)\nmain()\n<|endoftext|>",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4993,
      "prompt": "Complete the Python function given the prompt below:\nBoating season is over for this year, and Theseus has parked his boat on land. Of course, the boat looks nothing like it did as of the beginning of the season; it never does. You see, Theseus is constantly looking for ways to improve his boat.\nAt every day of the boating season, Theseus bought exactly one type of item at his local supply store, and replaced the existing part on his boat with it. Now, as the season has ended, Theseus wonders what day he replaced all the parts from the previous season.\n-----Input-----\nThe first line of the input consists of two space-separated integers $P$ and $N$, representing the number of parts the boat consists of, and the number of days in the boating season respectively.\n Then follows $N$ lines, each line has a single word $w_ i$, the type of boat part that Theseus bought on day $i$.\n-----Output-----\nOutput the day Theseus ended up replacing the last existing part from the previous season, or paradox avoided if Theseus never ended up replacing all the different parts.\n-----Limits-----\n - $1 \\leq P \\leq N \\leq 1000$.\n - Each word $w_ i$ will consist only of the letters a\u2013z and _ (underscore).\n - Each word $w_ i$ will be between $1$ and $20$ characters long.\n - The number of distinct $w_ i$s will be at most $P$.\n-----Examples-----\nSample Input:\n3 5\nleft_oar\nright_oar\nleft_oar\nhull\nright_oar\nSample Output:\n4\n\ndef",
      "answer": "def boating_season(P,N):\n    if N == 0:\n        return 0\n    if N == 1:\n        return 1\n    if N == 2:\n        return 2\n    if N == 3:\n        return 3\n    if N == 4:\n        return 4\n    if N == 5:\n        return 5\n    if N == 6:\n        return 6\n    if N == 7:\n        return 7\n    if N == 8:\n        return 8\n    if N == 9:\n        return 9\n    if N == 10:\n        return 10\n    if N == 11:\n        return 11\n    if N == 12:\n        return 12\n    if N == 13:\n        return 13\n    if N == 14:\n        return 14\n    if N == 15:\n        return 15\n    if N == 16:\n        return 16\n    if N == 17:\n        return 17\n    if N == 18:\n        return 18\n    if N == 19:\n        return 19\n    if N == 20:\n        return 20\n    if N == 21:\n        return 21\n    if N == 22:\n        return 22\n    if N == 23:\n        return 23\n    if N == 24:\n        return 24\n    if N == 25:\n        return 25\n    if N == 26:\n        return 26\n    if N == 27:\n        return 27\n    if N == 28:\n        return 28\n    if N == 29:\n        return 29\n    if N == 30:\n        return 30\n    if N == 31:\n        return 31\n    if N == 32:\n        return 32\n    if N == 33:\n        return 33\n    if N == 34:\n        return 34\n    if N == 35:\n        return 35\n    if N == 36:\n        return 36\n    if N == 37:\n        return 37\n    if N == 38:\n        return 38\n    if N == 39:\n        return 39\n    if N == 40:\n        return 40\n    if N == 41:\n        return 41\n    if N == 42:\n        return 42\n    if N == 43:\n        return 43\n    if N == 44:\n        return 44\n    if N == 45:\n        return 45\n    if N == 46:\n        return 46\n    if N == 47:\n        return 47\n    if N == 48:\n        return 48\n    if N == 49:\n        return 49\n    if N == 50:\n        return 50\n    if N == 51:\n        return 51\n    if N == 52:\n        return 52\n    if N == 53:\n        return 53\n    if N == 54:\n        return 54\n    if N == 55:\n        return 55\n    if N == 56:\n        return 56\n    if N == 57:\n        return 57\n    if N == 58:\n        return 58\n    if N == 59:\n        return 59\n    if N == 60:\n        return 60\n    if N == 61:\n        return 61\n    if N == 62:\n        return 62\n    if N == 63:\n        return 63\n    if N == 64:\n        return 64\n    if N == 65:\n        return 65\n    if N == 66:\n        return 66\n    if N == 67:\n        return 67\n    if N == 68:\n        return 68\n    if N == 69:\n        return 69\n    if N == 70:\n        return 70\n    if N == 71:\n        return 71\n    if N == 72:\n        return 72\n    if N == 73:\n        return 73\n    if N == 74:\n        return 74\n    if N == 75:\n        return 75\n    if N == 76:\n        return 76\n    if N == 77:\n        return 77\n    if N == 78:\n        return 78\n    if N == 79:\n        return 79\n    if N == 80:\n        return 80\n    if N == 81:\n        return 81\n    if N == 82:\n        return 82\n    if N == 83:\n        return 83\n    if N == 84:\n        return 84\n    if N == 85:\n        return 85\n    if N == 86:\n        return 86\n    if N == 87:\n        return 87\n    if N == 88:\n        return 88\n    if N == 89:\n        return 89\n    if N == 90:\n        return 90\n    if N == 91:\n        return 91\n    if",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4994,
      "prompt": "Complete the Python function given the prompt below:\nMirko needs to choose four points in the plane so that they form a rectangle with sides parallel to the axes. He has already chosen three points and is confident that he hasn\u2019t made a mistake, but is having trouble locating the last point. Help him.\n-----Input-----\nEach of the three points already chosen will be given on a separate line. All coordinates will be integers between $1$ and $1000$.\n-----Output-----\nOutput the coordinates of the fourth vertex of the rectangle.\n-----Examples-----\nSample Input:\n5 5\n5 7\n7 5\nSample Output:\n7 7\n\ndef",
      "answer": "def rectangle(p1, p2, p3, p4):\n    return p1[0] + p2[0] + p3[0] + p4[0]\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4995,
      "prompt": "Complete the Python function given the prompt below:\nThe city\u2019s local subway service S.L., Super Lag, are currently being blamed that their displays, showing the expected wait time until the next train arrives, are faulty. Too many commuters have the experience of coming to the subway station, and then having to wait many more minutes than the display showed when they got there. \nThe American Commuter Movement and the International Commuting Peoples\u2019 Community have had it with this. Especially Johan, a young student, who has decided to investigate this matter further. Johan went to one of the stations, and studied the behaviour of the displays. Each time the display showed a new number, Johan carefully measured the number of seconds that passed from that moment until the train arrived. As soon as that train left again, he did the same thing for the next train and so on. He remembered all the displayed minutes, and the wait time for each such in seconds. Although Johan has a very good memory, he does not know what to do with his measurements. He needs your help!\nYour task is to help Johan calculate the average length of an S.L. minute (the length of a minute according to the display). You may assume that when the display shows a new number $M$, the expected S.L. wait time in that moment is exactly $M$ minutes.\n-----Input-----\nThe first line contains an integer $1 \\le N \\le 1000$ \u2013 the number of observations Johan did. The following $N$ lines contain two positive integers $M \\le 60$ and $S \\le 3600$ \u2013 the number of minutes displayed, and the number of seconds Johan had to wait for his train.\n-----Output-----\nOutput should consist of a single real number: the average length of an S.L. minute, measured in real minutes. A relative or absolute error of at most $10^{-7}$ will be considered correct. If the average length of an S.L.\u00a0minute is shorter than or equal to a normal minute, print the message \"measurement error\" instead.\n-----Examples-----\nSample Input:\n1\n1 61\nSample Output:\n1.016666667\n\ndef",
      "answer": "def S(M):\n    return M/60\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4996,
      "prompt": "Complete the Python function given the prompt below:\nOne of the most well-known and classic methods of encryption is the Vigen\u00e8re cipher. Given a message and key of equal length, all you need to do to encrypt the message is shift each character forward by a certain number of characters in the alphabet.\nFor example, if your string is CALGARY and key is ALBERTA, the number of letters to shift the $i$-th letter in the message is given by the position in the alphabet of the $i$-th letter in the key, using $0$-based indexing. So the first character in our message C is shifted $0$ letters forward since the first character in our key is A. Likewise, A is shifted $11$ characters since L is the $11$-th letter in the alphabet. Repeating for each character, we\u2019ll find the encrypted message ends up being CLMKRKY.\nOf course since this is such a well known encryption method, it isn\u2019t very safe so your friend Yraglac has come up with a brilliant idea: for each even-indexed character in your message, you do the usual encryption as described above, but for the odd-indexed characters, instead of shifting forwards by the key, you actually shift backwards. Thus, our example above would actually be encrypted as CPMCRYY. That\u2019ll throw off any pesky hackers trying to read your secrets!\nOf course Yraglac has left the implementation up to you. Given an encrypted message and the key, can you write a program to decrypt it? Don\u2019t forget that everything is using $0$-based indexing.\n-----Input-----\nInput consists of two lines. The first contains the encrypted message $C$ and the second contains the key $K$. $C$ and $K$ are always of equal length between $1$ and $200$ characters long and consists only of uppercase alphabetic letters.\n-----Output-----\nOutput the decrypted message.\n-----Examples-----\nSample Input:\nCPMCRYY\nALBERTA\nSample Output:\nCALGARY\n\ndef",
      "answer": "def encrypt(message, key):\n    encrypted_message = \"\"\n    for i in range(len(message)):\n        if message[i].isupper():\n            encrypted_message += chr((ord(message[i]) - ord('A')) + key[i % len(key)])\n        else:\n            encrypted_message += chr((ord(message[i]) - ord('a')) + key[i % len(key)])\n    return encrypted_message\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4997,
      "prompt": "Complete the Python function given the prompt below:\nJealous of Mirko\u2019s position as head of the village, Borko stormed into his tent and tried to demonstrate Mirko\u2019s incompetence for leadership with a trick.\nBorko puts three opaque cups onto the table next to each other (opening facing down) and a small ball under the leftmost cup. He then swaps two cups in one of three possible ways a number of times. Mirko has to tell which cup the ball ends up under.\nWise Mirko grins with his arms crossed while Borko struggles to move the cups faster and faster. What Borko does not know is that programmers in the back are recording all his moves and will use a simple program to determine where the ball is. Write that program.\n-----Input-----\nThe first and only line contains a non-empty string of at most $50$ characters, Borko\u2019s moves. Each of the characters is \u2018A\u2019, \u2018B\u2019 or \u2018C\u2019 (without quote marks).\n-----Output-----\nOutput the index of the cup under which the ball is: $1$ if it is under the left cup, $2$ if it is under the middle cup or $3$ if it is under the right cup.\n-----Examples-----\nSample Input:\nAB\nSample Output:\n3\n\ndef",
      "answer": "def borko(moves):\n    if moves[0] == 'A':\n        return 1\n    elif moves[0] == 'B':\n        return 2\n    elif moves[0] == 'C':\n        return 3\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4998,
      "prompt": "Complete the Python function given the prompt below:\nKornislav the turtle never has anything interesting to do. Since he\u2019s going to live for three hundred years, he keeps trying to find way to kill time. This weekend he started playing \"enclose the largest rectangle\".\nTo start with, Kornislav needs four positive integers. He tries to enclose a rectangle by moving in one direction, then turning 90 degrees, then walking in the new direction etc. Kornislav makes a total of three 90-degree turns and walks four segments.\nWhen walking in some direction, the number of steps he takes must be equal to one of the four chosen integers and each integer must be used exactly once. Depending on the order in which Kornislav uses the integers, his walk will make various shapes, some of which don\u2019t contain enclosed rectangles. Write a program that calculates the largest rectangle the turtle can enclose with its walk.\n-----Input-----\nThe first line contains four positive integers $A, B, C$ and $D~ (0 < A, B, C, D < 100)$, the four chosen integers.\n-----Output-----\nOutput the largest area.\n-----Examples-----\nSample Input:\n1 2 3 4\nSample Output:\n3\n\ndef",
      "answer": "def rectangle(a, b, c, d):\n    if a > b and a > c and a > d:\n        return a\n    elif b > a and b > c and b > d:\n        return b\n    elif c > a and c > b and c > d:\n        return c\n    elif d > a and d > b and d > c:\n        return d\n    else:\n        return 0\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4999,
      "prompt": "Complete the Python function given the prompt below:\nYou are given two integers, $a$ and $b$. You want to transform $a$ to $b$ by performing a sequence of operations. You can only perform the following operations:\n - Divide $a$ by two (only if $a$ is even)\n - Add one to $a$\nWhat is the minimum number of these operations you need to transform $a$ into $b$?\n-----Input-----\nThe single line of input contains two space-separated integers $a$ and $b$ ($1\\le a,b \\le 10^9$). You want to transform $a$ into $b$ using only the operations given above.\n-----Output-----\nOutput a single integer, which is the minimum number of the given operations needed to transform $a$ into $b$.\n-----Examples-----\nSample Input:\n103 27\nSample Output:\n4\n\ndef",
      "answer": "def divide(a,b):\n    if a%2==0:\n        return b\n    else:\n        return a\n\n",
      "difficulty": "introductory",
      "split": "test"
   }
]