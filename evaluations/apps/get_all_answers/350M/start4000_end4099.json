[
   {
      "task_id": 4000,
      "prompt": "Complete the Python function given the prompt below:\nYou are given an unweighted tree with $n$ vertices. Recall that a tree is a connected undirected graph without cycles.\nYour task is to choose three distinct vertices $a, b, c$ on this tree such that the number of edges which belong to at least one of the simple paths between $a$ and $b$, $b$ and $c$, or $a$ and $c$ is the maximum possible. See the notes section for a better understanding.\nThe simple path is the path that visits each vertex at most once.\n-----Input-----\nThe first line contains one integer number $n$ ($3 \\le n \\le 2 \\cdot 10^5$) \u2014 the number of vertices in the tree. \nNext $n - 1$ lines describe the edges of the tree in form $a_i, b_i$ ($1 \\le a_i$, $b_i \\le n$, $a_i \\ne b_i$). It is guaranteed that given graph is a tree.\n-----Output-----\nIn the first line print one integer $res$ \u2014 the maximum number of edges which belong to at least one of the simple paths between $a$ and $b$, $b$ and $c$, or $a$ and $c$.\nIn the second line print three integers $a, b, c$ such that $1 \\le a, b, c \\le n$ and $a \\ne, b \\ne c, a \\ne c$.\nIf there are several answers, you can print any.\n-----Example-----\nInput\n8\n1 2\n2 3\n3 4\n4 5\n4 6\n3 7\n3 8\nOutput\n5\n1 8 6\n-----Note-----\nThe picture corresponding to the first example (and another one correct answer):\n[Image]\nIf you choose vertices $1, 5, 6$ then the path between $1$ and $5$ consists of edges $(1, 2), (2, 3), (3, 4), (4, 5)$, the path between $1$ and $6$ consists of edges $(1, 2), (2, 3), (3, 4), (4, 6)$ and the path between $5$ and $6$ consists of edges $(4, 5), (4, 6)$. The union of these paths is $(1, 2), (2, 3), (3, 4), (4, 5), (4, 6)$ so the answer is $5$. It can be shown that there is no better answer.\n\ndef",
      "answer": "def solve(n, edges):\n    res = 0\n    a, b, c = 0, 0, 0\n    for i in range(n):\n        if edges[i][0] == edges[i][1]:\n            a += 1\n        if edges[i][0] == edges[i][2]:\n            b += 1\n        if edges[i][1] == edges[i][2]:\n            c += 1\n    if a > b and b > c:\n        res = a\n    elif a > b and a > c:\n        res = a\n    elif b > a and b > c:\n        res = b\n    elif b > a and b > c:\n        res = b\n    else:\n        res = c\n    return res\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4001,
      "prompt": "Complete the Python function given the prompt below:\nRecently you have received two positive integer numbers $x$ and $y$. You forgot them, but you remembered a shuffled list containing all divisors of $x$ (including $1$ and $x$) and all divisors of $y$ (including $1$ and $y$). If $d$ is a divisor of both numbers $x$ and $y$ at the same time, there are two occurrences of $d$ in the list.\nFor example, if $x=4$ and $y=6$ then the given list can be any permutation of the list $[1, 2, 4, 1, 2, 3, 6]$. Some of the possible lists are: $[1, 1, 2, 4, 6, 3, 2]$, $[4, 6, 1, 1, 2, 3, 2]$ or $[1, 6, 3, 2, 4, 1, 2]$.\nYour problem is to restore suitable positive integer numbers $x$ and $y$ that would yield the same list of divisors (possibly in different order).\nIt is guaranteed that the answer exists, i.e. the given list of divisors corresponds to some positive integers $x$ and $y$.\n-----Input-----\nThe first line contains one integer $n$ ($2 \\le n \\le 128$) \u2014 the number of divisors of $x$ and $y$.\nThe second line of the input contains $n$ integers $d_1, d_2, \\dots, d_n$ ($1 \\le d_i \\le 10^4$), where $d_i$ is either divisor of $x$ or divisor of $y$. If a number is divisor of both numbers $x$ and $y$ then there are two copies of this number in the list.\n-----Output-----\nPrint two positive integer numbers $x$ and $y$ \u2014 such numbers that merged list of their divisors is the permutation of the given list of integers. It is guaranteed that the answer exists.\n-----Example-----\nInput\n10\n10 2 8 1 2 4 1 20 4 5\nOutput\n20 8\n\ndef",
      "answer": "def divisors(x):\n    divisors = []\n    for i in range(1, x + 1):\n        if x % i == 0:\n            divisors.append(i)\n    return divisors\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4002,
      "prompt": "Complete the Python function given the prompt below:\nYou are given a matrix $a$ of size $n \\times m$ consisting of integers.\nYou can choose no more than $\\left\\lfloor\\frac{m}{2}\\right\\rfloor$ elements in each row. Your task is to choose these elements in such a way that their sum is divisible by $k$ and this sum is the maximum.\nIn other words, you can choose no more than a half (rounded down) of elements in each row, you have to find the maximum sum of these elements divisible by $k$.\nNote that you can choose zero elements (and the sum of such set is $0$).\n-----Input-----\nThe first line of the input contains three integers $n$, $m$ and $k$ ($1 \\le n, m, k \\le 70$) \u2014 the number of rows in the matrix, the number of columns in the matrix and the value of $k$. The next $n$ lines contain $m$ elements each, where the $j$-th element of the $i$-th row is $a_{i, j}$ ($1 \\le a_{i, j} \\le 70$).\n-----Output-----\nPrint one integer \u2014 the maximum sum divisible by $k$ you can obtain.\n-----Examples-----\nInput\n3 4 3\n1 2 3 4\n5 2 2 2\n7 1 1 4\nOutput\n24\nInput\n5 5 4\n1 2 4 2 1\n3 5 1 2 4\n1 5 7 1 2\n3 8 7 1 2\n8 4 7 1 6\nOutput\n56\n-----Note-----\nIn the first example, the optimal answer is $2$ and $4$ in the first row, $5$ and $2$ in the second row and $7$ and $4$ in the third row. The total sum is $2 + 4 + 5 + 2 + 7 + 4 = 24$.\n\ndef",
      "answer": "def max_sum_divisible_by_k(a, k):\n    n = len(a)\n    if n == 0:\n        return 0\n    if n == 1:\n        return a[0]\n    if n == 2:\n        return max(a[0], a[1])\n    if n == 3:\n        return max(a[0], a[1], a[2])\n    if n == 4:\n        return max(a[0], a[1], a[2], a[3])\n    if n == 5:\n        return max(a[0], a[1], a[2], a[3], a[4])\n    if n == 6:\n        return max(a[0], a[1], a[2], a[3], a[4], a[5])\n    if n == 7:\n        return max(a[0], a[1], a[2], a[3], a[4], a[5], a[6])\n    if n == 8:\n        return max(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7])\n    if n == 9:\n        return max(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8])\n    if n == 10:\n        return max(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9])\n    if n == 11:\n        return max(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10])\n    if n == 12:\n        return max(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11])\n    if n == 13:\n        return max(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12])\n    if n == 14:\n        return max(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13])\n    if n == 15:\n        return max(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14])\n    if n == 16:\n        return max(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15])\n    if n == 17:\n        return max(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15], a[16])\n    if n == 18:\n        return max(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15], a[16], a[17])\n    if n == 19:\n        return max(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15], a[16], a[17], a[18])\n    if n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4003,
      "prompt": "Complete the Python function given the prompt below:\nThe only difference between problems C1 and C2 is that all values in input of problem C1 are distinct (this condition may be false for problem C2).\nYou are given a sequence $a$ consisting of $n$ integers.\nYou are making a sequence of moves. During each move you must take either the leftmost element of the sequence or the rightmost element of the sequence, write it down and remove it from the sequence. Your task is to write down a strictly increasing sequence, and among all such sequences you should take the longest (the length of the sequence is the number of elements in it).\nFor example, for the sequence $[1, 2, 4, 3, 2]$ the answer is $4$ (you take $1$ and the sequence becomes $[2, 4, 3, 2]$, then you take the rightmost element $2$ and the sequence becomes $[2, 4, 3]$, then you take $3$ and the sequence becomes $[2, 4]$ and then you take $4$ and the sequence becomes $[2]$, the obtained increasing sequence is $[1, 2, 3, 4]$).\n-----Input-----\nThe first line of the input contains one integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) \u2014 the number of elements in $a$.\nThe second line of the input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 2 \\cdot 10^5$), where $a_i$ is the $i$-th element of $a$.\n-----Output-----\nIn the first line of the output print $k$ \u2014 the maximum number of elements in a strictly increasing sequence you can obtain.\nIn the second line print a string $s$ of length $k$, where the $j$-th character of this string $s_j$ should be 'L' if you take the leftmost element during the $j$-th move and 'R' otherwise. If there are multiple answers, you can print any.\n-----Examples-----\nInput\n5\n1 2 4 3 2\nOutput\n4\nLRRR\nInput\n7\n1 3 5 6 5 4 2\nOutput\n6\nLRLRRR\nInput\n3\n2 2 2\nOutput\n1\nR\nInput\n4\n1 2 4 3\nOutput\n4\nLLRR\n-----Note-----\nThe first example is described in the problem statement.\n\ndef",
      "answer": "def solution(a):\n    n = len(a)\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36:\n        return 36\n    if n == 37:\n        return 37\n    if n == 38:\n        return 38\n    if n == 39:\n        return 39\n    if n == 40:\n        return 40\n    if n == 41:\n        return 41\n    if n == 42:\n        return 42\n    if n == 43:\n        return 43\n    if n == 44:\n        return 44\n    if n == 45:\n        return 45\n    if n == 46:\n        return 46\n    if n == 47:\n        return 47\n    if n == 48:\n        return 48\n    if n == 49:\n        return 49\n    if n == 50:\n        return 50\n    if n == 51:\n        return 51\n    if n == 52:\n        return 52\n    if n == 53:\n        return 53\n    if n == 54:\n        return 54\n    if n == 55:\n        return 55\n    if n == 56:\n        return 56\n    if n == 57:\n        return 57\n    if n == 58:\n        return 58\n    if n == 59:\n        return 59\n    if n == 60:\n        return 60\n    if n == 61:\n        return 61\n    if n == 62:\n        return 62\n    if n == 63:\n        return 63\n    if n == 64:\n        return 64\n    if n == 65:\n        return 65\n    if n == 66:\n        return 66\n    if n == 67:\n        return 67\n    if n == 68:\n        return 68\n    if n == 69:\n        return 69\n    if n == 70:\n        return 70\n    if n == 71:\n        return 71\n    if n == 72:\n        return 72\n    if n == 73:\n        return 73\n    if n == 74:\n        return 74\n    if n == 75:\n        return 75\n    if n == 76:\n        return 76\n    if n == 77:\n        return 77\n    if n == 78:\n        return 78\n    if n == 79:\n        return 79\n    if n == 80:\n        return 80\n    if n == 81:\n        return 81\n    if n == 82:\n        return 82\n    if n == 83:\n        return 83\n    if n == 84:\n        return 84\n    if n == 85:\n        return 85\n    if n == 86:\n        return 86\n    if n == 87:\n        return 87\n    if n == 88:\n        return 88\n    if n == 89:\n        return 89\n    if n == 90:\n        return 90\n    if n == 91:\n        return 91\n    if n == 92:\n        return 92",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4004,
      "prompt": "Complete the Python function given the prompt below:\nYou are given a sequence $a_1, a_2, \\dots, a_n$ consisting of $n$ integers.\nYou can choose any non-negative integer $D$ (i.e. $D \\ge 0$), and for each $a_i$ you can:\n  add $D$ (only once), i. e. perform $a_i := a_i + D$, or  subtract $D$ (only once), i. e. perform $a_i := a_i - D$, or  leave the value of $a_i$ unchanged. \nIt is possible that after an operation the value $a_i$ becomes negative.\nYour goal is to choose such minimum non-negative integer $D$ and perform changes in such a way, that all $a_i$ are equal (i.e. $a_1=a_2=\\dots=a_n$).\nPrint the required $D$ or, if it is impossible to choose such value $D$, print -1.\nFor example, for array $[2, 8]$ the value $D=3$ is minimum possible because you can obtain the array $[5, 5]$ if you will add $D$ to $2$ and subtract $D$ from $8$. And for array $[1, 4, 7, 7]$ the value $D=3$ is also minimum possible. You can add it to $1$ and subtract it from $7$ and obtain the array $[4, 4, 4, 4]$.\n-----Input-----\nThe first line of the input contains one integer $n$ ($1 \\le n \\le 100$) \u2014 the number of elements in $a$.\nThe second line of the input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 100$) \u2014 the sequence $a$.\n-----Output-----\nPrint one integer \u2014 the minimum non-negative integer value $D$ such that if you add this value to some $a_i$, subtract this value from some $a_i$ and leave some $a_i$ without changes, all obtained values become equal.\nIf it is impossible to choose such value $D$, print -1.\n-----Examples-----\nInput\n6\n1 4 4 7 4 1\nOutput\n3\nInput\n5\n2 2 5 2 5\nOutput\n3\nInput\n4\n1 3 3 7\nOutput\n-1\nInput\n2\n2 8\nOutput\n3\n\ndef",
      "answer": "def minimum_non_negative_integer(a):\n    if len(a) == 1:\n        return a[0]\n    else:\n        return minimum_non_negative_integer(a[1:]) + a[0]\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4005,
      "prompt": "Complete the Python function given the prompt below:\nThere is a white sheet of paper lying on a rectangle table. The sheet is a rectangle with its sides parallel to the sides of the table. If you will take a look from above and assume that the bottom left corner of the table has coordinates $(0, 0)$, and coordinate axes are left and bottom sides of the table, then the bottom left corner of the white sheet has coordinates $(x_1, y_1)$, and the top right \u2014 $(x_2, y_2)$.\nAfter that two black sheets of paper are placed on the table. Sides of both black sheets are also parallel to the sides of the table. Coordinates of the bottom left corner of the first black sheet are $(x_3, y_3)$, and the top right \u2014 $(x_4, y_4)$. Coordinates of the bottom left corner of the second black sheet are $(x_5, y_5)$, and the top right \u2014 $(x_6, y_6)$.  [Image] Example of three rectangles. \nDetermine if some part of the white sheet can be seen from the above after the two black sheets are placed. The part of the white sheet can be seen if there is at least one point lying not strictly inside the white sheet and strictly outside of both black sheets.\n-----Input-----\nThe first line of the input contains four integers $x_1, y_1, x_2, y_2$ $(0 \\le x_1 < x_2 \\le 10^{6}, 0 \\le y_1 < y_2 \\le 10^{6})$ \u2014 coordinates of the bottom left and the top right corners of the white sheet.\nThe second line of the input contains four integers $x_3, y_3, x_4, y_4$ $(0 \\le x_3 < x_4 \\le 10^{6}, 0 \\le y_3 < y_4 \\le 10^{6})$ \u2014 coordinates of the bottom left and the top right corners of the first black sheet.\nThe third line of the input contains four integers $x_5, y_5, x_6, y_6$ $(0 \\le x_5 < x_6 \\le 10^{6}, 0 \\le y_5 < y_6 \\le 10^{6})$ \u2014 coordinates of the bottom left and the top right corners of the second black sheet.\nThe sides of each sheet of paper are parallel (perpendicular) to the coordinate axes.\n-----Output-----\nIf some part of the white sheet can be seen from the above after the two black sheets are placed, print \"YES\" (without quotes). Otherwise print \"NO\".\n-----Examples-----\nInput\n2 2 4 4\n1 1 3 5\n3 1 5 5\nOutput\nNO\nInput\n3 3 7 5\n0 0 4 6\n0 0 7 4\nOutput\nYES\nInput\n5 2 10 5\n3 1 7 6\n8 1 11 7\nOutput\nYES\nInput\n0 0 1000000 1000000\n0 0 499999 1000000\n500000 0 1000000 1000000\nOutput\nYES\n-----Note-----\nIn the first example the white sheet is fully covered by black sheets.\nIn the second example the part of the white sheet can be seen after two black sheets are placed. For example, the point $(6.5, 4.5)$ lies not strictly inside the white sheet and lies strictly outside of both black sheets.\n\ndef",
      "answer": "def is_rectangle(x, y, x_1, y_1, x_2, y_2):\n    if x_1 < x < x_2 and y_1 < y < y_2:\n        return True\n    else:\n        return False\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4006,
      "prompt": "Complete the Python function given the prompt below:\nLet's denote a function $f(x)$ in such a way: we add $1$ to $x$, then, while there is at least one trailing zero in the resulting number, we remove that zero. For example,   $f(599) = 6$: $599 + 1 = 600 \\rightarrow 60 \\rightarrow 6$;  $f(7) = 8$: $7 + 1 = 8$;  $f(9) = 1$: $9 + 1 = 10 \\rightarrow 1$;  $f(10099) = 101$: $10099 + 1 = 10100 \\rightarrow 1010 \\rightarrow 101$. \nWe say that some number $y$ is reachable from $x$ if we can apply function $f$ to $x$ some (possibly zero) times so that we get $y$ as a result. For example, $102$ is reachable from $10098$ because $f(f(f(10098))) = f(f(10099)) = f(101) = 102$; and any number is reachable from itself.\nYou are given a number $n$; your task is to count how many different numbers are reachable from $n$.\n-----Input-----\nThe first line contains one integer $n$ ($1 \\le n \\le 10^9$).\n-----Output-----\nPrint one integer: the number of different numbers that are reachable from $n$.\n-----Examples-----\nInput\n1098\nOutput\n20\nInput\n10\nOutput\n19\n-----Note-----\nThe numbers that are reachable from $1098$ are:\n$1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1098, 1099$.\n\ndef",
      "answer": "def f(x):\n    return x + 1\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4007,
      "prompt": "Complete the Python function given the prompt below:\nThere are $n$ friends who want to give gifts for the New Year to each other. Each friend should give exactly one gift and receive exactly one gift. The friend cannot give the gift to himself.\nFor each friend the value $f_i$ is known: it is either $f_i = 0$ if the $i$-th friend doesn't know whom he wants to give the gift to or $1 \\le f_i \\le n$ if the $i$-th friend wants to give the gift to the friend $f_i$.\nYou want to fill in the unknown values ($f_i = 0$) in such a way that each friend gives exactly one gift and receives exactly one gift and there is no friend who gives the gift to himself. It is guaranteed that the initial information isn't contradictory.\nIf there are several answers, you can print any.\n-----Input-----\nThe first line of the input contains one integer $n$ ($2 \\le n \\le 2 \\cdot 10^5$) \u2014 the number of friends.\nThe second line of the input contains $n$ integers $f_1, f_2, \\dots, f_n$ ($0 \\le f_i \\le n$, $f_i \\ne i$, all $f_i \\ne 0$ are distinct), where $f_i$ is the either $f_i = 0$ if the $i$-th friend doesn't know whom he wants to give the gift to or $1 \\le f_i \\le n$ if the $i$-th friend wants to give the gift to the friend $f_i$. It is also guaranteed that there is at least two values $f_i = 0$.\n-----Output-----\nPrint $n$ integers $nf_1, nf_2, \\dots, nf_n$, where $nf_i$ should be equal to $f_i$ if $f_i \\ne 0$ or the number of friend whom the $i$-th friend wants to give the gift to. All values $nf_i$ should be distinct, $nf_i$ cannot be equal to $i$. Each friend gives exactly one gift and receives exactly one gift and there is no friend who gives the gift to himself.\nIf there are several answers, you can print any.\n-----Examples-----\nInput\n5\n5 0 0 2 4\nOutput\n5 3 1 2 4 \nInput\n7\n7 0 0 1 4 0 6\nOutput\n7 3 2 1 4 5 6 \nInput\n7\n7 4 0 3 0 5 1\nOutput\n7 4 2 3 6 5 1 \nInput\n5\n2 1 0 0 0\nOutput\n2 1 4 5 3\n\ndef",
      "answer": "def gift_giver(n, f):\n    if n == 0:\n        return f\n    else:\n        return gift_giver(n-1, f) + f\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4008,
      "prompt": "Complete the Python function given the prompt below:\nYou are given an array $a$ consisting of $n$ integer numbers.\nYou have to color this array in $k$ colors in such a way that:   Each element of the array should be colored in some color;  For each $i$ from $1$ to $k$ there should be at least one element colored in the $i$-th color in the array;  For each $i$ from $1$ to $k$ all elements colored in the $i$-th color should be distinct. \nObviously, such coloring might be impossible. In this case, print \"NO\". Otherwise print \"YES\" and any coloring (i.e. numbers $c_1, c_2, \\dots c_n$, where $1 \\le c_i \\le k$ and $c_i$ is the color of the $i$-th element of the given array) satisfying the conditions above. If there are multiple answers, you can print any.\n-----Input-----\nThe first line of the input contains two integers $n$ and $k$ ($1 \\le k \\le n \\le 5000$) \u2014 the length of the array $a$ and the number of colors, respectively.\nThe second line of the input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 5000$) \u2014 elements of the array $a$.\n-----Output-----\nIf there is no answer, print \"NO\". Otherwise print \"YES\" and any coloring (i.e. numbers $c_1, c_2, \\dots c_n$, where $1 \\le c_i \\le k$ and $c_i$ is the color of the $i$-th element of the given array) satisfying the conditions described in the problem statement. If there are multiple answers, you can print any.\n-----Examples-----\nInput\n4 2\n1 2 2 3\nOutput\nYES\n1 1 2 2\nInput\n5 2\n3 2 1 2 3\nOutput\nYES\n2 1 1 2 1\nInput\n5 2\n2 1 1 2 1\nOutput\nNO\n-----Note-----\nIn the first example the answer $2~ 1~ 2~ 1$ is also acceptable.\nIn the second example the answer $1~ 1~ 1~ 2~ 2$ is also acceptable.\nThere exist other acceptable answers for both examples.\n\ndef",
      "answer": "def color_array(n, k):\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 1]\n    if n == 3:\n        return [1, 1, 1]\n    if n == 4:\n        return [1, 1, 1, 1]\n    if n == 5:\n        return [1, 1, 1, 1, 1]\n    if n == 6:\n        return [1, 1, 1, 1, 1, 1]\n    if n == 7:\n        return [1, 1, 1, 1, 1, 1, 1]\n    if n == 8:\n        return [1, 1, 1, 1, 1, 1, 1, 1]\n    if n == 9:\n        return [1, 1, 1, 1, 1, 1, 1, 1, 1]\n    if n == 10:\n        return [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    if n == 11:\n        return [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    if n == 12:\n        return [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    if n == 13:\n        return [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    if n == 14:\n        return [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    if n == 15:\n        return [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    if n == 16:\n        return [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    if n == 17:\n        return [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    if n == 18:\n        return [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    if n == 19:\n        return [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    if n == 20:\n        return [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    if n == 21:\n        return [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    if n == 22:\n        return [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    if n == 23:\n        return [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    if n == 24:\n        return [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    if n == 25:\n        return [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    if n == 26:\n        return [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    if n == 27:\n        return [1, 1, 1, 1, 1, 1, 1, 1, 1",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4009,
      "prompt": "Complete the Python function given the prompt below:\nYou are given a huge decimal number consisting of $n$ digits. It is guaranteed that this number has no leading zeros. Each digit of this number is either 0 or 1.\nYou may perform several (possibly zero) operations with this number. During each operation you are allowed to change any digit of your number; you may change 0 to 1 or 1 to 0. It is possible that after some operation you can obtain a number with leading zeroes, but it does not matter for this problem.\nYou are also given two integers $0 \\le y < x < n$. Your task is to calculate the minimum number of operations you should perform to obtain the number that has remainder $10^y$ modulo $10^x$. In other words, the obtained number should have remainder $10^y$ when divided by $10^x$.\n-----Input-----\nThe first line of the input contains three integers $n, x, y$ ($0 \\le y < x < n \\le 2 \\cdot 10^5$) \u2014 the length of the number and the integers $x$ and $y$, respectively.\nThe second line of the input contains one decimal number consisting of $n$ digits, each digit of this number is either 0 or 1. It is guaranteed that the first digit of the number is 1.\n-----Output-----\nPrint one integer \u2014 the minimum number of operations you should perform to obtain the number having remainder $10^y$ modulo $10^x$. In other words, the obtained number should have remainder $10^y$ when divided by $10^x$.\n-----Examples-----\nInput\n11 5 2\n11010100101\nOutput\n1\nInput\n11 5 1\n11010100101\nOutput\n3\n-----Note-----\nIn the first example the number will be $11010100100$ after performing one operation. It has remainder $100$ modulo $100000$.\nIn the second example the number will be $11010100010$ after performing three operations. It has remainder $10$ modulo $100000$.\n\ndef",
      "answer": "def minimum_operations(n, x, y):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 1\n    if n == 4:\n        return 1\n    if n == 5:\n        return 1\n    if n == 6:\n        return 1\n    if n == 7:\n        return 1\n    if n == 8:\n        return 1\n    if n == 9:\n        return 1\n    if n == 10:\n        return 1\n    if n == 11:\n        return 1\n    if n == 12:\n        return 1\n    if n == 13:\n        return 1\n    if n == 14:\n        return 1\n    if n == 15:\n        return 1\n    if n == 16:\n        return 1\n    if n == 17:\n        return 1\n    if n == 18:\n        return 1\n    if n == 19:\n        return 1\n    if n == 20:\n        return 1\n    if n == 21:\n        return 1\n    if n == 22:\n        return 1\n    if n == 23:\n        return 1\n    if n == 24:\n        return 1\n    if n == 25:\n        return 1\n    if n == 26:\n        return 1\n    if n == 27:\n        return 1\n    if n == 28:\n        return 1\n    if n == 29:\n        return 1\n    if n == 30:\n        return 1\n    if n == 31:\n        return 1\n    if n == 32:\n        return 1\n    if n == 33:\n        return 1\n    if n == 34:\n        return 1\n    if n == 35:\n        return 1\n    if n == 36:\n        return 1\n    if n == 37:\n        return 1\n    if n == 38:\n        return 1\n    if n == 39:\n        return 1\n    if n == 40:\n        return 1\n    if n == 41:\n        return 1\n    if n == 42:\n        return 1\n    if n == 43:\n        return 1\n    if n == 44:\n        return 1\n    if n == 45:\n        return 1\n    if n == 46:\n        return 1\n    if n == 47:\n        return 1\n    if n == 48:\n        return 1\n    if n == 49:\n        return 1\n    if n == 50:\n        return 1\n    if n == 51:\n        return 1\n    if n == 52:\n        return 1\n    if n == 53:\n        return 1\n    if n == 54:\n        return 1\n    if n == 55:\n        return 1\n    if n == 56:\n        return 1\n    if n == 57:\n        return 1\n    if n == 58:\n        return 1\n    if n == 59:\n        return 1\n    if n == 60:\n        return 1\n    if n == 61:\n        return 1\n    if n == 62:\n        return 1\n    if n == 63:\n        return 1\n    if n == 64:\n        return 1\n    if n == 65:\n        return 1\n    if n == 66:\n        return 1\n    if n == 67:\n        return 1\n    if n == 68:\n        return 1\n    if n == 69:\n        return 1\n    if n == 70:\n        return 1\n    if n == 71:\n        return 1\n    if n == 72:\n        return 1\n    if n == 73:\n        return 1\n    if n == 74:\n        return 1\n    if n == 75:\n        return 1\n    if n == 76:\n        return 1\n    if n == 77:\n        return 1\n    if n == 78:\n        return 1\n    if n == 79:\n        return 1\n    if n == 80:\n        return 1\n    if n == 81:\n        return 1\n    if n == 82:\n        return 1\n    if n == 83:\n        return 1\n    if n == 84:\n        return 1\n    if n == 85:\n        return 1\n    if n == 86:\n        return 1\n    if n == 87:\n        return 1\n    if n == 88:\n        return 1\n    if n == 89:\n        return 1\n    if n == 90:\n        return 1\n    if n == 91:\n        return 1\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4010,
      "prompt": "Complete the Python function given the prompt below:\nYou are given an array $a$ consisting of $n$ integers.\nYour task is to determine if $a$ has some subsequence of length at least $3$ that is a palindrome.\nRecall that an array $b$ is called a subsequence of the array $a$ if $b$ can be obtained by removing some (possibly, zero) elements from $a$ (not necessarily consecutive) without changing the order of remaining elements. For example, $[2]$, $[1, 2, 1, 3]$ and $[2, 3]$ are subsequences of $[1, 2, 1, 3]$, but $[1, 1, 2]$ and $[4]$ are not.\nAlso, recall that a palindrome is an array that reads the same backward as forward. In other words, the array $a$ of length $n$ is the palindrome if $a_i = a_{n - i - 1}$ for all $i$ from $1$ to $n$. For example, arrays $[1234]$, $[1, 2, 1]$, $[1, 3, 2, 2, 3, 1]$ and $[10, 100, 10]$ are palindromes, but arrays $[1, 2]$ and $[1, 2, 3, 1]$ are not.\nYou have to answer $t$ independent test cases.\n-----Input-----\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 100$) \u2014 the number of test cases.\nNext $2t$ lines describe test cases. The first line of the test case contains one integer $n$ ($3 \\le n \\le 5000$) \u2014 the length of $a$. The second line of the test case contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le n$), where $a_i$ is the $i$-th element of $a$.\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $5000$ ($\\sum n \\le 5000$).\n-----Output-----\nFor each test case, print the answer \u2014 \"YES\" (without quotes) if $a$ has some subsequence of length at least $3$ that is a palindrome and \"NO\" otherwise.\n-----Example-----\nInput\n5\n3\n1 2 1\n5\n1 2 2 3 2\n3\n1 1 2\n4\n1 2 2 1\n10\n1 1 2 2 3 3 4 4 5 5\nOutput\nYES\nYES\nNO\nYES\nNO\n-----Note-----\nIn the first test case of the example, the array $a$ has a subsequence $[1, 2, 1]$ which is a palindrome.\nIn the second test case of the example, the array $a$ has two subsequences of length $3$ which are palindromes: $[2, 3, 2]$ and $[2, 2, 2]$.\nIn the third test case of the example, the array $a$ has no subsequences of length at least $3$ which are palindromes.\nIn the fourth test case of the example, the array $a$ has one subsequence of length $4$ which is a palindrome: $[1, 2, 2, 1]$ (and has two subsequences of length $3$ which are palindromes: both are $[1, 2, 1]$).\nIn the fifth test case of the example, the array $a$ has no subsequences of length at least $3$ which are palindromes.\n\ndef",
      "answer": "def palindrome(a):\n    if len(a) <= 3:\n        return True\n    else:\n        for i in range(len(a) - 2):\n            if a[i]!= a[i + 1] and a[i]!= a[i + 2]:\n                return False\n        return True\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4011,
      "prompt": "Complete the Python function given the prompt below:\nYou are given a long decimal number $a$ consisting of $n$ digits from $1$ to $9$. You also have a function $f$ that maps every digit from $1$ to $9$ to some (possibly the same) digit from $1$ to $9$.\nYou can perform the following operation no more than once: choose a non-empty contiguous subsegment of digits in $a$, and replace each digit $x$ from this segment with $f(x)$. For example, if $a = 1337$, $f(1) = 1$, $f(3) = 5$, $f(7) = 3$, and you choose the segment consisting of three rightmost digits, you get $1553$ as the result.\nWhat is the maximum possible number you can obtain applying this operation no more than once?\n-----Input-----\nThe first line contains one integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) \u2014 the number of digits in $a$.\nThe second line contains a string of $n$ characters, denoting the number $a$. Each character is a decimal digit from $1$ to $9$.\nThe third line contains exactly $9$ integers $f(1)$, $f(2)$,..., $f(9)$ ($1 \\le f(i) \\le 9$).\n-----Output-----\nPrint the maximum number you can get after applying the operation described in the statement no more than once.\n-----Examples-----\nInput\n4\n1337\n1 2 5 4 6 6 3 1 9\nOutput\n1557\nInput\n5\n11111\n9 8 7 6 5 4 3 2 1\nOutput\n99999\nInput\n2\n33\n1 1 1 1 1 1 1 1 1\nOutput\n33\n\ndef",
      "answer": "def f(x):\n    return x % 10\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4012,
      "prompt": "Complete the Python function given the prompt below:\nYou are given three integers $a \\le b \\le c$.\nIn one move, you can add $+1$ or $-1$ to any of these integers (i.e. increase or decrease any number by one). You can perform such operation any (possibly, zero) number of times, you can even perform this operation several times with one number. Note that you cannot make non-positive numbers using such operations.\nYou have to perform the minimum number of such operations in order to obtain three integers $A \\le B \\le C$ such that $B$ is divisible by $A$ and $C$ is divisible by $B$.\nYou have to answer $t$ independent test cases. \n-----Input-----\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 100$) \u2014 the number of test cases.\nThe next $t$ lines describe test cases. Each test case is given on a separate line as three space-separated integers $a, b$ and $c$ ($1 \\le a \\le b \\le c \\le 10^4$).\n-----Output-----\nFor each test case, print the answer. In the first line print $res$ \u2014 the minimum number of operations you have to perform to obtain three integers $A \\le B \\le C$ such that $B$ is divisible by $A$ and $C$ is divisible by $B$. On the second line print any suitable triple $A, B$ and $C$.\n-----Example-----\nInput\n8\n1 2 3\n123 321 456\n5 10 15\n15 18 21\n100 100 101\n1 22 29\n3 19 38\n6 30 46\nOutput\n1\n1 1 3\n102\n114 228 456\n4\n4 8 16\n6\n18 18 18\n1\n100 100 100\n7\n1 22 22\n2\n1 19 38\n8\n6 24 48\n\ndef",
      "answer": "def min_operations(a, b, c):\n    if a % b == 0 and a % c == 0:\n        return a * b * c\n    elif a % b == 0:\n        return a * b * c\n    elif a % c == 0:\n        return a * b * c\n    else:\n        return a * b * c\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4013,
      "prompt": "Complete the Python function given the prompt below:\nYou are given an array $a$ consisting of $n$ integer numbers.\nLet instability of the array be the following value: $\\max\\limits_{i = 1}^{n} a_i - \\min\\limits_{i = 1}^{n} a_i$.\nYou have to remove exactly one element from this array to minimize instability of the resulting $(n-1)$-elements array. Your task is to calculate the minimum possible instability.\n-----Input-----\nThe first line of the input contains one integer $n$ ($2 \\le n \\le 10^5$) \u2014 the number of elements in the array $a$.\nThe second line of the input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^5$) \u2014 elements of the array $a$.\n-----Output-----\nPrint one integer \u2014 the minimum possible instability of the array if you have to remove exactly one element from the array $a$.\n-----Examples-----\nInput\n4\n1 3 3 7\nOutput\n2\nInput\n2\n1 100000\nOutput\n0\n-----Note-----\nIn the first example you can remove $7$ then instability of the remaining array will be $3 - 1 = 2$.\nIn the second example you can remove either $1$ or $100000$ then instability of the remaining array will be $100000 - 100000 = 0$ and $1 - 1 = 0$ correspondingly.\n\ndef",
      "answer": "def instability(a):\n    n = len(a)\n    a.sort()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4014,
      "prompt": "Complete the Python function given the prompt below:\nPetya studies at university. The current academic year finishes with $n$ special days. Petya needs to pass $m$ exams in those special days. The special days in this problem are numbered from $1$ to $n$.\nThere are three values about each exam:  $s_i$ \u2014 the day, when questions for the $i$-th exam will be published,  $d_i$ \u2014 the day of the $i$-th exam ($s_i < d_i$),  $c_i$ \u2014 number of days Petya needs to prepare for the $i$-th exam. For the $i$-th exam Petya should prepare in days between $s_i$ and $d_i-1$, inclusive. \nThere are three types of activities for Petya in each day: to spend a day doing nothing (taking a rest), to spend a day passing exactly one exam or to spend a day preparing for exactly one exam. So he can't pass/prepare for multiple exams in a day. He can't mix his activities in a day. If he is preparing for the $i$-th exam in day $j$, then $s_i \\le j < d_i$.\nIt is allowed to have breaks in a preparation to an exam and to alternate preparations for different exams in consecutive days. So preparation for an exam is not required to be done in consecutive days.\nFind the schedule for Petya to prepare for all exams and pass them, or report that it is impossible.\n-----Input-----\nThe first line contains two integers $n$ and $m$ $(2 \\le n \\le 100, 1 \\le m \\le n)$ \u2014 the number of days and the number of exams.\nEach of the following $m$ lines contains three integers $s_i$, $d_i$, $c_i$ $(1 \\le s_i < d_i \\le n, 1 \\le c_i \\le n)$ \u2014 the day, when questions for the $i$-th exam will be given, the day of the $i$-th exam, number of days Petya needs to prepare for the $i$-th exam. \nGuaranteed, that all the exams will be in different days. Questions for different exams can be given in the same day. It is possible that, in the day of some exam, the questions for other exams are given.\n-----Output-----\nIf Petya can not prepare and pass all the exams, print -1. In case of positive answer, print $n$ integers, where the $j$-th number is:  $(m + 1)$, if the $j$-th day is a day of some exam (recall that in each day no more than one exam is conducted),  zero, if in the $j$-th day Petya will have a rest,  $i$ ($1 \\le i \\le m$), if Petya will prepare for the $i$-th exam in the day $j$ (the total number of days Petya prepares for each exam should be strictly equal to the number of days needed to prepare for it).\nAssume that the exams are numbered in order of appearing in the input, starting from $1$.\nIf there are multiple schedules, print any of them.\n-----Examples-----\nInput\n5 2\n1 3 1\n1 5 1\nOutput\n1 2 3 0 3 \nInput\n3 2\n1 3 1\n1 2 1\nOutput\n-1\nInput\n10 3\n4 7 2\n1 10 3\n8 9 1\nOutput\n2 2 2 1 1 0 4 3 4 4 \n-----Note-----\nIn the first example Petya can, for example, prepare for exam $1$ in the first day, prepare for exam $2$ in the second day, pass exam $1$ in the third day, relax in the fourth day, and pass exam $2$ in the fifth day. So, he can prepare and pass all exams.\nIn the second example, there are three days and two exams. So, Petya can prepare in only one day (because in two other days he should pass exams). Then Petya can not prepare and pass all exams.\n\ndef",
      "answer": "def schedule(n, m):\n    if n == 0 or m == 0:\n        return 0\n    if n == 1:\n        return m\n    if m == 1:\n        return n\n    return schedule(n-1, m) + schedule(n-1, m-1)\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4015,
      "prompt": "Complete the Python function given the prompt below:\nPolycarp plays \"Game 23\". Initially he has a number $n$ and his goal is to transform it to $m$. In one move, he can multiply $n$ by $2$ or multiply $n$ by $3$. He can perform any number of moves.\nPrint the number of moves needed to transform $n$ to $m$. Print -1 if it is impossible to do so.\nIt is easy to prove that any way to transform $n$ to $m$ contains the same number of moves (i.e. number of moves doesn't depend on the way of transformation).\n-----Input-----\nThe only line of the input contains two integers $n$ and $m$ ($1 \\le n \\le m \\le 5\\cdot10^8$).\n-----Output-----\nPrint the number of moves to transform $n$ to $m$, or -1 if there is no solution.\n-----Examples-----\nInput\n120 51840\nOutput\n7\nInput\n42 42\nOutput\n0\nInput\n48 72\nOutput\n-1\n-----Note-----\nIn the first example, the possible sequence of moves is: $120 \\rightarrow 240 \\rightarrow 720 \\rightarrow 1440 \\rightarrow 4320 \\rightarrow 12960 \\rightarrow 25920 \\rightarrow 51840.$ The are $7$ steps in total.\nIn the second example, no moves are needed. Thus, the answer is $0$.\nIn the third example, it is impossible to transform $48$ to $72$.\n\ndef",
      "answer": "def Polycarp(n,m):\n    if n==m:\n        return 0\n    if n==0:\n        return -1\n    if n==1:\n        return 1\n    return Polycarp(n-1,m) + Polycarp(n-1,m-1)\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4016,
      "prompt": "Complete the Python function given the prompt below:\nYou are given a string $t$ consisting of $n$ lowercase Latin letters and an integer number $k$.\nLet's define a substring of some string $s$ with indices from $l$ to $r$ as $s[l \\dots r]$.\nYour task is to construct such string $s$ of minimum possible length that there are exactly $k$ positions $i$ such that $s[i \\dots i + n - 1] = t$. In other words, your task is to construct such string $s$ of minimum possible length that there are exactly $k$ substrings of $s$ equal to $t$.\nIt is guaranteed that the answer is always unique.\n-----Input-----\nThe first line of the input contains two integers $n$ and $k$ ($1 \\le n, k \\le 50$) \u2014 the length of the string $t$ and the number of substrings.\nThe second line of the input contains the string $t$ consisting of exactly $n$ lowercase Latin letters.\n-----Output-----\nPrint such string $s$ of minimum possible length that there are exactly $k$ substrings of $s$ equal to $t$.\nIt is guaranteed that the answer is always unique.\n-----Examples-----\nInput\n3 4\naba\nOutput\nababababa\nInput\n3 2\ncat\nOutput\ncatcat\n\ndef",
      "answer": "def substring(t, l, r):\n    if l == r:\n        return t\n    return substring(t, l+1, r) + t[l:r]\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4017,
      "prompt": "Complete the Python function given the prompt below:\nLet's call an array good if there is an element in the array that equals to the sum of all other elements. For example, the array $a=[1, 3, 3, 7]$ is good because there is the element $a_4=7$ which equals to the sum $1 + 3 + 3$.\nYou are given an array $a$ consisting of $n$ integers. Your task is to print all indices $j$ of this array such that after removing the $j$-th element from the array it will be good (let's call such indices nice).\nFor example, if $a=[8, 3, 5, 2]$, the nice indices are $1$ and $4$:   if you remove $a_1$, the array will look like $[3, 5, 2]$ and it is good;  if you remove $a_4$, the array will look like $[8, 3, 5]$ and it is good. \nYou have to consider all removals independently, i. e. remove the element, check if the resulting array is good, and return the element into the array.\n-----Input-----\nThe first line of the input contains one integer $n$ ($2 \\le n \\le 2 \\cdot 10^5$) \u2014 the number of elements in the array $a$.\nThe second line of the input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^6$) \u2014 elements of the array $a$.\n-----Output-----\nIn the first line print one integer $k$ \u2014 the number of indices $j$ of the array $a$ such that after removing the $j$-th element from the array it will be good (i.e. print the number of the nice indices).\nIn the second line print $k$ distinct integers $j_1, j_2, \\dots, j_k$ in any order \u2014 nice indices of the array $a$.\nIf there are no such indices in the array $a$, just print $0$ in the first line and leave the second line empty or do not print it at all.\n-----Examples-----\nInput\n5\n2 5 1 2 2\nOutput\n3\n4 1 5\nInput\n4\n8 3 5 2\nOutput\n2\n1 4 \nInput\n5\n2 1 2 4 3\nOutput\n0\n\n-----Note-----\nIn the first example you can remove any element with the value $2$ so the array will look like $[5, 1, 2, 2]$. The sum of this array is $10$ and there is an element equals to the sum of remaining elements ($5 = 1 + 2 + 2$).\nIn the second example you can remove $8$ so the array will look like $[3, 5, 2]$. The sum of this array is $10$ and there is an element equals to the sum of remaining elements ($5 = 3 + 2$). You can also remove $2$ so the array will look like $[8, 3, 5]$. The sum of this array is $16$ and there is an element equals to the sum of remaining elements ($8 = 3 + 5$).\nIn the third example you cannot make the given array good by removing exactly one element.\n\ndef",
      "answer": "def good(a):\n    n = len(a)\n    if n == 1:\n        return 0\n    if n == 2:\n        return a[0] + a[1]\n    if n == 3:\n        return a[0] + a[1] + a[2]\n    if n == 4:\n        return a[0] + a[1] + a[2] + a[3]\n    if n == 5:\n        return a[0] + a[1] + a[2] + a[3] + a[4]\n    if n == 6:\n        return a[0] + a[1] + a[2] + a[3] + a[4] + a[5]\n    if n == 7:\n        return a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6]\n    if n == 8:\n        return a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7]\n    if n == 9:\n        return a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8]\n    if n == 10:\n        return a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9]\n    if n == 11:\n        return a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10]\n    if n == 12:\n        return a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11]\n    if n == 13:\n        return a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11] + a[12]\n    if n == 14:\n        return a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11] + a[12] + a[13]\n    if n == 15:\n        return a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11] + a[12] + a[13] + a[14]\n    if n == 16:\n        return a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11] + a[12] + a[13] + a[14] + a[15]\n    if n == 17:\n        return a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11] + a[12] + a[13] + a[14] + a[15] + a[16]\n    if n == 18:\n        return a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11] + a[12] + a[13] + a[14] + a[15] + a[16] + a[",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4018,
      "prompt": "Complete the Python function given the prompt below:\nThe only difference between the easy and the hard versions is constraints.\nA subsequence is a string that can be derived from another string by deleting some or no symbols without changing the order of the remaining symbols. Characters to be deleted are not required to go successively, there can be any gaps between them. For example, for the string \"abaca\" the following strings are subsequences: \"abaca\", \"aba\", \"aaa\", \"a\" and \"\" (empty string). But the following strings are not subsequences: \"aabaca\", \"cb\" and \"bcaa\".\nYou are given a string $s$ consisting of $n$ lowercase Latin letters.\nIn one move you can take any subsequence $t$ of the given string and add it to the set $S$. The set $S$ can't contain duplicates. This move costs $n - |t|$, where $|t|$ is the length of the added subsequence (i.e. the price equals to the number of the deleted characters).\nYour task is to find out the minimum possible total cost to obtain a set $S$ of size $k$ or report that it is impossible to do so.\n-----Input-----\nThe first line of the input contains two integers $n$ and $k$ ($1 \\le n \\le 100, 1 \\le k \\le 10^{12}$) \u2014 the length of the string and the size of the set, correspondingly.\nThe second line of the input contains a string $s$ consisting of $n$ lowercase Latin letters.\n-----Output-----\nPrint one integer \u2014 if it is impossible to obtain the set $S$ of size $k$, print -1. Otherwise, print the minimum possible total cost to do it.\n-----Examples-----\nInput\n4 5\nasdf\nOutput\n4\nInput\n5 6\naaaaa\nOutput\n15\nInput\n5 7\naaaaa\nOutput\n-1\nInput\n10 100\najihiushda\nOutput\n233\n-----Note-----\nIn the first example we can generate $S$ = { \"asdf\", \"asd\", \"adf\", \"asf\", \"sdf\" }. The cost of the first element in $S$ is $0$ and the cost of the others is $1$. So the total cost of $S$ is $4$.\n\ndef",
      "answer": "def solve(n,k):\n    if n == 0 or k == 0:\n        return 0\n    if n == 1:\n        return 1\n    if k == 1:\n        return 1\n    return solve(n-1,k) + solve(n-1,k-1)\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4019,
      "prompt": "Complete the Python function given the prompt below:\nYou are given an undirected unweighted connected graph consisting of $n$ vertices and $m$ edges. It is guaranteed that there are no self-loops or multiple edges in the given graph.\nYour task is to find any spanning tree of this graph such that the degree of the first vertex (vertex with label $1$ on it) is equal to $D$ (or say that there are no such spanning trees). Recall that the degree of a vertex is the number of edges incident to it.\n-----Input-----\nThe first line contains three integers $n$, $m$ and $D$ ($2 \\le n \\le 2 \\cdot 10^5$, $n - 1 \\le m \\le min(2 \\cdot 10^5, \\frac{n(n-1)}{2}), 1 \\le D < n$) \u2014 the number of vertices, the number of edges and required degree of the first vertex, respectively.\nThe following $m$ lines denote edges: edge $i$ is represented by a pair of integers $v_i$, $u_i$ ($1 \\le v_i, u_i \\le n$, $u_i \\ne v_i$), which are the indices of vertices connected by the edge. There are no loops or multiple edges in the given graph, i. e. for each pair ($v_i, u_i$) there are no other pairs ($v_i, u_i$) or ($u_i, v_i$) in the list of edges, and for each pair $(v_i, u_i)$ the condition $v_i \\ne u_i$ is satisfied.\n-----Output-----\nIf there is no spanning tree satisfying the condition from the problem statement, print \"NO\" in the first line.\nOtherwise print \"YES\" in the first line and then print $n-1$ lines describing the edges of a spanning tree such that the degree of the first vertex (vertex with label $1$ on it) is equal to $D$. Make sure that the edges of the printed spanning tree form some subset of the input edges (order doesn't matter and edge $(v, u)$ is considered the same as the edge $(u, v)$).\nIf there are multiple possible answers, print any of them.\n-----Examples-----\nInput\n4 5 1\n1 2\n1 3\n1 4\n2 3\n3 4\nOutput\nYES\n2 1\n2 3\n3 4\nInput\n4 5 3\n1 2\n1 3\n1 4\n2 3\n3 4\nOutput\nYES\n1 2\n1 3\n4 1\nInput\n4 4 3\n1 2\n1 4\n2 3\n3 4\nOutput\nNO\n-----Note-----\nThe picture corresponding to the first and second examples: [Image]\nThe picture corresponding to the third example: [Image]\n\ndef",
      "answer": "def find_spanning_tree(edges):\n    n = len(edges)\n    if n == 0:\n        return []\n    if n == 1:\n        return [edges[0]]\n    if n == 2:\n        return [edges[0], edges[1]]\n    if n == 3:\n        return [edges[0], edges[1], edges[2]]\n    if n == 4:\n        return [edges[0], edges[1], edges[2], edges[3]]\n    if n == 5:\n        return [edges[0], edges[1], edges[2], edges[3], edges[4]]\n    if n == 6:\n        return [edges[0], edges[1], edges[2], edges[3], edges[4], edges[5]]\n    if n == 7:\n        return [edges[0], edges[1], edges[2], edges[3], edges[4], edges[5], edges[6]]\n    if n == 8:\n        return [edges[0], edges[1], edges[2], edges[3], edges[4], edges[5], edges[6], edges[7]]\n    if n == 9:\n        return [edges[0], edges[1], edges[2], edges[3], edges[4], edges[5], edges[6], edges[7], edges[8]]\n    if n == 10:\n        return [edges[0], edges[1], edges[2], edges[3], edges[4], edges[5], edges[6], edges[7], edges[8], edges[9]]\n    if n == 11:\n        return [edges[0], edges[1], edges[2], edges[3], edges[4], edges[5], edges[6], edges[7], edges[8], edges[9], edges[10]]\n    if n == 12:\n        return [edges[0], edges[1], edges[2], edges[3], edges[4], edges[5], edges[6], edges[7], edges[8], edges[9], edges[10], edges[11]]\n    if n == 13:\n        return [edges[0], edges[1], edges[2], edges[3], edges[4], edges[5], edges[6], edges[7], edges[8], edges[9], edges[10], edges[11], edges[12]]\n    if n == 14:\n        return [edges[0], edges[1], edges[2], edges[3], edges[4], edges[5], edges[6], edges[7], edges[8], edges[9], edges[10], edges[11], edges[12], edges[13]]\n    if n == 15:\n        return [edges[0], edges[1], edges[2], edges[3], edges[4], edges[5], edges[6], edges[7], edges[8], edges[9], edges[10], edges[11], edges[12], edges[13], edges[14]]\n    if n == 16:\n        return [edges[0], edges[1], edges[2], edges[3], edges[4], edges[5], edges[6], edges[7], edges[8], edges[9], edges[10], edges[11], edges[12], edges[13], edges[14], edges[15]]\n    if n == 17:\n        return [edges[0], edges[1], edges[2], edges[3], edges[4], edges[5], edges[6], edges[7], edges[8], edges[9], edges[10], edges[11], edges[12], edges[13], edges[14], edges[15], edges[16]]\n    if n == 18:\n        return [edges[0], edges[1], edges[2], edges[3], edges[4], edges[5], edges[6], edges[7], edges[8], edges[9], edges[10], edges[11], edges[12], edges[13], edges[14], edges[15], edges[16], edges[17]]\n    if n == 19:\n        return [edges[0], edges[1], edges[2], edges[3], edges[4], edges[5], edges[6], edges[7], edges[8], edges[9], edges[10], edges[11], edges[12], edges[13], edges[14], edges[15], edges[16], edges[17], edges[18]]\n    if n == 20",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4020,
      "prompt": "Complete the Python function given the prompt below:\nPolycarp is going to participate in the contest. It starts at $h_1:m_1$ and ends at $h_2:m_2$. It is guaranteed that the contest lasts an even number of minutes (i.e. $m_1 \\% 2 = m_2 \\% 2$, where $x \\% y$ is $x$ modulo $y$). It is also guaranteed that the entire contest is held during a single day. And finally it is guaranteed that the contest lasts at least two minutes.\nPolycarp wants to know the time of the midpoint of the contest. For example, if the contest lasts from $10:00$ to $11:00$ then the answer is $10:30$, if the contest lasts from $11:10$ to $11:12$ then the answer is $11:11$.\n-----Input-----\nThe first line of the input contains two integers $h_1$ and $m_1$ in the format hh:mm.\nThe second line of the input contains two integers $h_2$ and $m_2$ in the same format (hh:mm).\nIt is guaranteed that $0 \\le h_1, h_2 \\le 23$ and $0 \\le m_1, m_2 \\le 59$.\nIt is guaranteed that the contest lasts an even number of minutes (i.e. $m_1 \\% 2 = m_2 \\% 2$, where $x \\% y$ is $x$ modulo $y$). It is also guaranteed that the entire contest is held during a single day. And finally it is guaranteed that the contest lasts at least two minutes.\n-----Output-----\nPrint two integers $h_3$ and $m_3$ ($0 \\le h_3 \\le 23, 0 \\le m_3 \\le 59$) corresponding to the midpoint of the contest in the format hh:mm. Print each number as exactly two digits (prepend a number with leading zero if needed), separate them with ':'.\n-----Examples-----\nInput\n10:00\n11:00\nOutput\n10:30\nInput\n11:10\n11:12\nOutput\n11:11\nInput\n01:02\n03:02\nOutput\n02:02\n\ndef",
      "answer": "def polycarp(h_1, m_1, h_2, m_2):\n    if h_1 >= h_2:\n        return h_1 + m_1\n    elif h_1 < h_2:\n        return h_2 + m_2\n    else:\n        return h_2 + m_2\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4021,
      "prompt": "Complete the Python function given the prompt below:\n-----Input-----\nThe input contains a single integer a (1 \u2264 a \u2264 64).\n-----Output-----\nOutput a single integer.\n-----Examples-----\nInput\n2\nOutput\n1\nInput\n4\nOutput\n2\nInput\n27\nOutput\n5\nInput\n42\nOutput\n6\n\ndef",
      "answer": "def solution(a):\n    return a**2\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4022,
      "prompt": "Complete the Python function given the prompt below:\nYou are given $n$ segments on a number line; each endpoint of every segment has integer coordinates. Some segments can degenerate to points. Segments can intersect with each other, be nested in each other or even coincide.\nThe intersection of a sequence of segments is such a maximal set of points (not necesserily having integer coordinates) that each point lies within every segment from the sequence. If the resulting set isn't empty, then it always forms some continuous segment. The length of the intersection is the length of the resulting segment or $0$ in case the intersection is an empty set.\nFor example, the intersection of segments $[1;5]$ and $[3;10]$ is $[3;5]$ (length $2$), the intersection of segments $[1;5]$ and $[5;7]$ is $[5;5]$ (length $0$) and the intersection of segments $[1;5]$ and $[6;6]$ is an empty set (length $0$).\nYour task is to remove exactly one segment from the given sequence in such a way that the intersection of the remaining $(n - 1)$ segments has the maximal possible length.\n-----Input-----\nThe first line contains a single integer $n$ ($2 \\le n \\le 3 \\cdot 10^5$) \u2014 the number of segments in the sequence.\nEach of the next $n$ lines contains two integers $l_i$ and $r_i$ ($0 \\le l_i \\le r_i \\le 10^9$) \u2014 the description of the $i$-th segment.\n-----Output-----\nPrint a single integer \u2014 the maximal possible length of the intersection of $(n - 1)$ remaining segments after you remove exactly one segment from the sequence.\n-----Examples-----\nInput\n4\n1 3\n2 6\n0 4\n3 3\nOutput\n1\nInput\n5\n2 6\n1 3\n0 4\n1 20\n0 4\nOutput\n2\nInput\n3\n4 5\n1 2\n9 20\nOutput\n0\nInput\n2\n3 10\n1 5\nOutput\n7\n-----Note-----\nIn the first example you should remove the segment $[3;3]$, the intersection will become $[2;3]$ (length $1$). Removing any other segment will result in the intersection $[3;3]$ (length $0$).\nIn the second example you should remove the segment $[1;3]$ or segment $[2;6]$, the intersection will become $[2;4]$ (length $2$) or $[1;3]$ (length $2$), respectively. Removing any other segment will result in the intersection $[2;3]$ (length $1$).\nIn the third example the intersection will become an empty set no matter the segment you remove.\nIn the fourth example you will get the intersection $[3;10]$ (length $7$) if you remove the segment $[1;5]$ or the intersection $[1;5]$ (length $4$) if you remove the segment $[3;10]$.\n\ndef",
      "answer": "def remove_segment(n, l, r):\n    if n == 1:\n        return l\n    if n == 2:\n        return r\n    if n == 3:\n        return l\n    if n == 4:\n        return r\n    if n == 5:\n        return l\n    if n == 6:\n        return r\n    if n == 7:\n        return l\n    if n == 8:\n        return r\n    if n == 9:\n        return l\n    if n == 10:\n        return r\n    if n == 11:\n        return l\n    if n == 12:\n        return r\n    if n == 13:\n        return l\n    if n == 14:\n        return r\n    if n == 15:\n        return l\n    if n == 16:\n        return r\n    if n == 17:\n        return l\n    if n == 18:\n        return r\n    if n == 19:\n        return l\n    if n == 20:\n        return r\n    if n == 21:\n        return l\n    if n == 22:\n        return r\n    if n == 23:\n        return l\n    if n == 24:\n        return r\n    if n == 25:\n        return l\n    if n == 26:\n        return r\n    if n == 27:\n        return l\n    if n == 28:\n        return r\n    if n == 29:\n        return l\n    if n == 30:\n        return r\n    if n == 31:\n        return l\n    if n == 32:\n        return r\n    if n == 33:\n        return l\n    if n == 34:\n        return r\n    if n == 35:\n        return l\n    if n == 36:\n        return r\n    if n == 37:\n        return l\n    if n == 38:\n        return r\n    if n == 39:\n        return l\n    if n == 40:\n        return r\n    if n == 41:\n        return l\n    if n == 42:\n        return r\n    if n == 43:\n        return l\n    if n == 44:\n        return r\n    if n == 45:\n        return l\n    if n == 46:\n        return r\n    if n == 47:\n        return l\n    if n == 48:\n        return r\n    if n == 49:\n        return l\n    if n == 50:\n        return r\n    if n == 51:\n        return l\n    if n == 52:\n        return r\n    if n == 53:\n        return l\n    if n == 54:\n        return r\n    if n == 55:\n        return l\n    if n == 56:\n        return r\n    if n == 57:\n        return l\n    if n == 58:\n        return r\n    if n == 59:\n        return l\n    if n == 60:\n        return r\n    if n == 61:\n        return l\n    if n == 62:\n        return r\n    if n == 63:\n        return l\n    if n == 64:\n        return r\n    if n == 65:\n        return l\n    if n == 66:\n        return r\n    if n == 67:\n        return l\n    if n == 68:\n        return r\n    if n == 69:\n        return l\n    if n == 70:\n        return r\n    if n == 71:\n        return l\n    if n == 72:\n        return r\n    if n == 73:\n        return l\n    if n == 74:\n        return r\n    if n == 75:\n        return l\n    if n == 76:\n        return r\n    if n == 77:\n        return l\n    if n == 78:\n        return r\n    if n == 79:\n        return l\n    if n == 80:\n        return r\n    if n == 81:\n        return l\n    if n == 82:\n        return r\n    if n == 83:\n        return l\n    if n == 84:\n        return r\n    if n == 85:\n        return l\n    if n == 86:\n        return r\n    if n == 87:\n        return l\n    if n == 88:\n        return r\n    if n == 89:\n        return l\n    if n == 90:\n        return r\n    if n == 91:\n        return l\n    if n == 92:\n        return r\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4023,
      "prompt": "Complete the Python function given the prompt below:\nVova's family is building the Great Vova Wall (named by Vova himself). Vova's parents, grandparents, grand-grandparents contributed to it. Now it's totally up to Vova to put the finishing touches.\nThe current state of the wall can be respresented by a sequence $a$ of $n$ integers, with $a_i$ being the height of the $i$-th part of the wall.\nVova can only use $2 \\times 1$ bricks to put in the wall (he has infinite supply of them, however).\nVova can put bricks only horizontally on the neighbouring parts of the wall of equal height. It means that if for some $i$ the current height of part $i$ is the same as for part $i + 1$, then Vova can put a brick there and thus increase both heights by 1. Obviously, Vova can't put bricks in such a way that its parts turn out to be off the borders (to the left of part $1$ of the wall or to the right of part $n$ of it).\nNote that Vova can't put bricks vertically.\nVova is a perfectionist, so he considers the wall completed when:  all parts of the wall has the same height;  the wall has no empty spaces inside it. \nCan Vova complete the wall using any amount of bricks (possibly zero)?\n-----Input-----\nThe first line contains a single integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) \u2014 the number of parts in the wall.\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^9$) \u2014 the initial heights of the parts of the wall.\n-----Output-----\nPrint \"YES\" if Vova can complete the wall using any amount of bricks (possibly zero).\nPrint \"NO\" otherwise.\n-----Examples-----\nInput\n5\n2 1 1 2 5\nOutput\nYES\nInput\n3\n4 5 3\nOutput\nNO\nInput\n2\n10 10\nOutput\nYES\n-----Note-----\nIn the first example Vova can put a brick on parts 2 and 3 to make the wall $[2, 2, 2, 2, 5]$ and then put 3 bricks on parts 1 and 2 and 3 bricks on parts 3 and 4 to make it $[5, 5, 5, 5, 5]$.\nIn the second example Vova can put no bricks in the wall.\nIn the third example the wall is already complete.\n\ndef",
      "answer": "def wall(n):\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 1]\n    if n == 3:\n        return [1, 1, 1]\n    if n == 4:\n        return [1, 1, 1, 1]\n    if n == 5:\n        return [1, 1, 1, 1, 1]\n    if n == 6:\n        return [1, 1, 1, 1, 1, 1]\n    if n == 7:\n        return [1, 1, 1, 1, 1, 1, 1]\n    if n == 8:\n        return [1, 1, 1, 1, 1, 1, 1, 1]\n    if n == 9:\n        return [1, 1, 1, 1, 1, 1, 1, 1, 1]\n    if n == 10:\n        return [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    if n == 11:\n        return [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    if n == 12:\n        return [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    if n == 13:\n        return [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    if n == 14:\n        return [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    if n == 15:\n        return [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    if n == 16:\n        return [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    if n == 17:\n        return [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    if n == 18:\n        return [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    if n == 19:\n        return [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    if n == 20:\n        return [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    if n == 21:\n        return [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    if n == 22:\n        return [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    if n == 23:\n        return [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    if n == 24:\n        return [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    if n == 25:\n        return [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    if n == 26:\n        return [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    if n == 27:\n        return [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4024,
      "prompt": "Complete the Python function given the prompt below:\nThe only difference between the easy and the hard versions is constraints.\nA subsequence is a string that can be derived from another string by deleting some or no symbols without changing the order of the remaining symbols. Characters to be deleted are not required to go successively, there can be any gaps between them. For example, for the string \"abaca\" the following strings are subsequences: \"abaca\", \"aba\", \"aaa\", \"a\" and \"\" (empty string). But the following strings are not subsequences: \"aabaca\", \"cb\" and \"bcaa\".\nYou are given a string $s$ consisting of $n$ lowercase Latin letters.\nIn one move you can take any subsequence $t$ of the given string and add it to the set $S$. The set $S$ can't contain duplicates. This move costs $n - |t|$, where $|t|$ is the length of the added subsequence (i.e. the price equals to the number of the deleted characters).\nYour task is to find out the minimum possible total cost to obtain a set $S$ of size $k$ or report that it is impossible to do so.\n-----Input-----\nThe first line of the input contains two integers $n$ and $k$ ($1 \\le n, k \\le 100$) \u2014 the length of the string and the size of the set, correspondingly.\nThe second line of the input contains a string $s$ consisting of $n$ lowercase Latin letters.\n-----Output-----\nPrint one integer \u2014 if it is impossible to obtain the set $S$ of size $k$, print -1. Otherwise, print the minimum possible total cost to do it.\n-----Examples-----\nInput\n4 5\nasdf\nOutput\n4\nInput\n5 6\naaaaa\nOutput\n15\nInput\n5 7\naaaaa\nOutput\n-1\nInput\n10 100\najihiushda\nOutput\n233\n-----Note-----\nIn the first example we can generate $S$ = { \"asdf\", \"asd\", \"adf\", \"asf\", \"sdf\" }. The cost of the first element in $S$ is $0$ and the cost of the others is $1$. So the total cost of $S$ is $4$.\n\ndef",
      "answer": "def solve(n, k):\n    if n == 0 or k == 0:\n        return 0\n    if n == 1:\n        return 1\n    if k == 1:\n        return 1\n    return solve(n - 1, k) + solve(n - 1, k - 1)\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4025,
      "prompt": "Complete the Python function given the prompt below:\nPolycarp has a cat and his cat is a real gourmet! Dependent on a day of the week he eats certain type of food:  on Mondays, Thursdays and Sundays he eats fish food;  on Tuesdays and Saturdays he eats rabbit stew;  on other days of week he eats chicken stake. \nPolycarp plans to go on a trip and already packed his backpack. His backpack contains:  $a$ daily rations of fish food;  $b$ daily rations of rabbit stew;  $c$ daily rations of chicken stakes. \nPolycarp has to choose such day of the week to start his trip that his cat can eat without additional food purchases as long as possible. Print the maximum number of days the cat can eat in a trip without additional food purchases, if Polycarp chooses the day of the week to start his trip optimally.\n-----Input-----\nThe first line of the input contains three positive integers $a$, $b$ and $c$ ($1 \\le a, b, c \\le 7\\cdot10^8$) \u2014 the number of daily rations of fish food, rabbit stew and chicken stakes in Polycarps backpack correspondingly.\n-----Output-----\nPrint the maximum number of days the cat can eat in a trip without additional food purchases, if Polycarp chooses the day of the week to start his trip optimally.\n-----Examples-----\nInput\n2 1 1\nOutput\n4\nInput\n3 2 2\nOutput\n7\nInput\n1 100 1\nOutput\n3\nInput\n30 20 10\nOutput\n39\n-----Note-----\nIn the first example the best day for start of the trip is Sunday. In this case, during Sunday and Monday the cat will eat fish food, during Tuesday \u2014 rabbit stew and during Wednesday \u2014 chicken stake. So, after four days of the trip all food will be eaten.\nIn the second example Polycarp can start his trip in any day of the week. In any case there are food supplies only for one week in Polycarps backpack.\nIn the third example Polycarp can start his trip in any day, excluding Wednesday, Saturday and Sunday. In this case, the cat will eat three different dishes in three days. Nevertheless that after three days of a trip there will be $99$ portions of rabbit stew in a backpack, can cannot eat anything in fourth day of a trip.\n\ndef",
      "answer": "def Polycarp(a, b, c):\n    if a == b == c:\n        return 0\n    elif a == b or b == c or a == c:\n        return 1\n    else:\n        return max(Polycarp(a, b, c-1), Polycarp(a, b-1, c), Polycarp(a-1, b, c))\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4026,
      "prompt": "Complete the Python function given the prompt below:\nMasha has $n$ types of tiles of size $2 \\times 2$. Each cell of the tile contains one integer. Masha has an infinite number of tiles of each type.\nMasha decides to construct the square of size $m \\times m$ consisting of the given tiles. This square also has to be a symmetric with respect to the main diagonal matrix, and each cell of this square has to be covered with exactly one tile cell, and also sides of tiles should be parallel to the sides of the square. All placed tiles cannot intersect with each other. Also, each tile should lie inside the square. See the picture in Notes section for better understanding.\nSymmetric with respect to the main diagonal matrix is such a square $s$ that for each pair $(i, j)$ the condition $s[i][j] = s[j][i]$ holds. I.e. it is true that the element written in the $i$-row and $j$-th column equals to the element written in the $j$-th row and $i$-th column.\nYour task is to determine if Masha can construct a square of size $m \\times m$ which is a symmetric matrix and consists of tiles she has. Masha can use any number of tiles of each type she has to construct the square. Note that she can not rotate tiles, she can only place them in the orientation they have in the input.\nYou have to answer $t$ independent test cases.\n-----Input-----\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 100$) \u2014 the number of test cases. Then $t$ test cases follow.\nThe first line of the test case contains two integers $n$ and $m$ ($1 \\le n \\le 100$, $1 \\le m \\le 100$) \u2014 the number of types of tiles and the size of the square Masha wants to construct.\nThe next $2n$ lines of the test case contain descriptions of tiles types. Types of tiles are written one after another, each type is written on two lines. \nThe first line of the description contains two positive (greater than zero) integers not exceeding $100$ \u2014 the number written in the top left corner of the tile and the number written in the top right corner of the tile of the current type. The second line of the description contains two positive (greater than zero) integers not exceeding $100$ \u2014 the number written in the bottom left corner of the tile and the number written in the bottom right corner of the tile of the current type.\nIt is forbidden to rotate tiles, it is only allowed to place them in the orientation they have in the input.\n-----Output-----\nFor each test case print the answer: \"YES\" (without quotes) if Masha can construct the square of size $m \\times m$ which is a symmetric matrix. Otherwise, print \"NO\" (withtout quotes).\n-----Example-----\nInput\n6\n3 4\n1 2\n5 6\n5 7\n7 4\n8 9\n9 8\n2 5\n1 1\n1 1\n2 2\n2 2\n1 100\n10 10\n10 10\n1 2\n4 5\n8 4\n2 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\nOutput\nYES\nNO\nYES\nNO\nYES\nYES\n-----Note-----\nThe first test case of the input has three types of tiles, they are shown on the picture below. [Image] \nMasha can construct, for example, the following square of size $4 \\times 4$ which is a symmetric matrix: $\\left. \\begin{array}{|c|c|c|c|} \\hline 5 & {7} & {8} & {9} \\\\ \\hline 7 & {4} & {9} & {8} \\\\ \\hline 8 & {9} & {5} & {7} \\\\ \\hline 9 & {8} & {7} & {4} \\\\ \\hline \\end{array} \\right.$\n\ndef",
      "answer": "def Masha(n,m):\n    if n<=0 or m<=0:\n        return False\n    if n==1 or m==1:\n        return True\n    if n==2 or m==2:\n        return True\n    if n==3 or m==3:\n        return True\n    if n==4 or m==4:\n        return True\n    if n==5 or m==5:\n        return True\n    if n==6 or m==6:\n        return True\n    if n==7 or m==7:\n        return True\n    if n==8 or m==8:\n        return True\n    if n==9 or m==9:\n        return True\n    if n==10 or m==10:\n        return True\n    if n==11 or m==11:\n        return True\n    if n==12 or m==12:\n        return True\n    if n==13 or m==13:\n        return True\n    if n==14 or m==14:\n        return True\n    if n==15 or m==15:\n        return True\n    if n==16 or m==16:\n        return True\n    if n==17 or m==17:\n        return True\n    if n==18 or m==18:\n        return True\n    if n==19 or m==19:\n        return True\n    if n==20 or m==20:\n        return True\n    if n==21 or m==21:\n        return True\n    if n==22 or m==22:\n        return True\n    if n==23 or m==23:\n        return True\n    if n==24 or m==24:\n        return True\n    if n==25 or m==25:\n        return True\n    if n==26 or m==26:\n        return True\n    if n==27 or m==27:\n        return True\n    if n==28 or m==28:\n        return True\n    if n==29 or m==29:\n        return True\n    if n==30 or m==30:\n        return True\n    if n==31 or m==31:\n        return True\n    if n==32 or m==32:\n        return True\n    if n==33 or m==33:\n        return True\n    if n==34 or m==34:\n        return True\n    if n==35 or m==35:\n        return True\n    if n==36 or m==36:\n        return True\n    if n==37 or m==37:\n        return True\n    if n==38 or m==38:\n        return True\n    if n==39 or m==39:\n        return True\n    if n==40 or m==40:\n        return True\n    if n==41 or m==41:\n        return True\n    if n==42 or m==42:\n        return True\n    if n==43 or m==43:\n        return True\n    if n==44 or m==44:\n        return True\n    if n==45 or m==45:\n        return True\n    if n==46 or m==46:\n        return True\n    if n==47 or m==47:\n        return True\n    if n==48 or m==48:\n        return True\n    if n==49 or m==49:\n        return True\n    if n==50 or m==50:\n        return True\n    if n==51 or m==51:\n        return True\n    if n==52 or m==52:\n        return True\n    if n==53 or m==53:\n        return True\n    if n==54 or m==54:\n        return True\n    if n==55 or m==55:\n        return True\n    if n==56 or m==56:\n        return True\n    if n==57 or m==57:\n        return True\n    if n==58 or m==58:\n        return True\n    if n==59 or m==59:\n        return True\n    if n==60 or m==60:\n        return True\n    if n==61 or m==61:\n        return True\n    if n==62 or m==62:\n        return True\n    if n==63 or m==63:\n        return True\n    if n==64 or m==64:\n        return True\n    if n==65 or m==65:\n        return True\n    if n==66 or m==66:\n        return True\n    if n==67 or m==67",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4027,
      "prompt": "Complete the Python function given the prompt below:\nYou are given an integer sequence $1, 2, \\dots, n$. You have to divide it into two sets $A$ and $B$ in such a way that each element belongs to exactly one set and $|sum(A) - sum(B)|$ is minimum possible.\nThe value $|x|$ is the absolute value of $x$ and $sum(S)$ is the sum of elements of the set $S$.\n-----Input-----\nThe first line of the input contains one integer $n$ ($1 \\le n \\le 2 \\cdot 10^9$).\n-----Output-----\nPrint one integer \u2014 the minimum possible value of $|sum(A) - sum(B)|$ if you divide the initial sequence $1, 2, \\dots, n$ into two sets $A$ and $B$.\n-----Examples-----\nInput\n3\nOutput\n0\nInput\n5\nOutput\n1\nInput\n6\nOutput\n1\n-----Note-----\nSome (not all) possible answers to examples:\nIn the first example you can divide the initial sequence into sets $A = \\{1, 2\\}$ and $B = \\{3\\}$ so the answer is $0$.\nIn the second example you can divide the initial sequence into sets $A = \\{1, 3, 4\\}$ and $B = \\{2, 5\\}$ so the answer is $1$.\nIn the third example you can divide the initial sequence into sets $A = \\{1, 4, 5\\}$ and $B = \\{2, 3, 6\\}$ so the answer is $1$.\n\ndef",
      "answer": "def min_abs_value(n):\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 3\n    if n == 5:\n        return 4\n    if n == 6:\n        return 5\n    if n == 7:\n        return 6\n    if n == 8:\n        return 7\n    if n == 9:\n        return 8\n    if n == 10:\n        return 9\n    if n == 11:\n        return 10\n    if n == 12:\n        return 11\n    if n == 13:\n        return 12\n    if n == 14:\n        return 13\n    if n == 15:\n        return 14\n    if n == 16:\n        return 15\n    if n == 17:\n        return 16\n    if n == 18:\n        return 17\n    if n == 19:\n        return 18\n    if n == 20:\n        return 19\n    if n == 21:\n        return 20\n    if n == 22:\n        return 21\n    if n == 23:\n        return 22\n    if n == 24:\n        return 23\n    if n == 25:\n        return 24\n    if n == 26:\n        return 25\n    if n == 27:\n        return 26\n    if n == 28:\n        return 27\n    if n == 29:\n        return 28\n    if n == 30:\n        return 29\n    if n == 31:\n        return 30\n    if n == 32:\n        return 31\n    if n == 33:\n        return 32\n    if n == 34:\n        return 33\n    if n == 35:\n        return 34\n    if n == 36:\n        return 35\n    if n == 37:\n        return 36\n    if n == 38:\n        return 37\n    if n == 39:\n        return 38\n    if n == 40:\n        return 39\n    if n == 41:\n        return 40\n    if n == 42:\n        return 41\n    if n == 43:\n        return 42\n    if n == 44:\n        return 43\n    if n == 45:\n        return 44\n    if n == 46:\n        return 45\n    if n == 47:\n        return 46\n    if n == 48:\n        return 47\n    if n == 49:\n        return 48\n    if n == 50:\n        return 49\n    if n == 51:\n        return 50\n    if n == 52:\n        return 51\n    if n == 53:\n        return 52\n    if n == 54:\n        return 53\n    if n == 55:\n        return 54\n    if n == 56:\n        return 55\n    if n == 57:\n        return 56\n    if n == 58:\n        return 57\n    if n == 59:\n        return 58\n    if n == 60:\n        return 59\n    if n == 61:\n        return 60\n    if n == 62:\n        return 61\n    if n == 63:\n        return 62\n    if n == 64:\n        return 63\n    if n == 65:\n        return 64\n    if n == 66:\n        return 65\n    if n == 67:\n        return 66\n    if n == 68:\n        return 67\n    if n == 69:\n        return 68\n    if n == 70:\n        return 69\n    if n == 71:\n        return 70\n    if n == 72:\n        return 71\n    if n == 73:\n        return 72\n    if n == 74:\n        return 73\n    if n == 75:\n        return 74\n    if n == 76:\n        return 75\n    if n == 77:\n        return 76\n    if n == 78:\n        return 77\n    if n == 79:\n        return 78\n    if n == 80:\n        return 79\n    if n == 81:\n        return 80\n    if n == 82:\n        return 81\n    if n == 83:\n        return 82\n    if n == 84:\n        return 83\n    if n == 85:\n        return 84\n    if n == 86:\n        return 85\n    if n == 87:\n        return 86\n    if n == 88:\n        return 87\n    if n == 89:\n        return 88\n    if n == 90:\n        return 89\n    if n == 91:\n        return 90\n    if n == 92:\n        return 91\n    if n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4028,
      "prompt": "Complete the Python function given the prompt below:\nYou are given a bracket sequence $s$ (not necessarily a regular one). A bracket sequence is a string containing only characters '(' and ')'.\nA regular bracket sequence is a bracket sequence that can be transformed into a correct arithmetic expression by inserting characters '1' and '+' between the original characters of the sequence. For example, bracket sequences \"()()\" and \"(())\" are regular (the resulting expressions are: \"(1)+(1)\" and \"((1+1)+1)\"), and \")(\", \"(\" and \")\" are not.\nYour problem is to calculate the number of regular bracket sequences of length $2n$ containing the given bracket sequence $s$ as a substring (consecutive sequence of characters) modulo $10^9+7$ ($1000000007$).\n-----Input-----\nThe first line of the input contains one integer $n$ ($1 \\le n \\le 100$) \u2014 the half-length of the resulting regular bracket sequences (the resulting sequences must have length equal to $2n$).\nThe second line of the input contains one string $s$ ($1 \\le |s| \\le 200$) \u2014 the string $s$ that should be a substring in each of the resulting regular bracket sequences ($|s|$ is the length of $s$).\n-----Output-----\nPrint only one integer \u2014 the number of regular bracket sequences containing the given bracket sequence $s$ as a substring. Since this number can be huge, print it modulo $10^9+7$ ($1000000007$).\n-----Examples-----\nInput\n5\n()))()\nOutput\n5\nInput\n3\n(()\nOutput\n4\nInput\n2\n(((\nOutput\n0\n-----Note-----\nAll regular bracket sequences satisfying the conditions above for the first example:   \"(((()))())\";  \"((()()))()\";  \"((()))()()\";  \"(()(()))()\";  \"()((()))()\". \nAll regular bracket sequences satisfying the conditions above for the second example:   \"((()))\";  \"(()())\";  \"(())()\";  \"()(())\". \nAnd there is no regular bracket sequences of length $4$ containing \"(((\" as a substring in the third example.\n\ndef",
      "answer": "def bracket_sequence(s):\n    n = len(s)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36:\n        return 36\n    if n == 37:\n        return 37\n    if n == 38:\n        return 38\n    if n == 39:\n        return 39\n    if n == 40:\n        return 40\n    if n == 41:\n        return 41\n    if n == 42:\n        return 42\n    if n == 43:\n        return 43\n    if n == 44:\n        return 44\n    if n == 45:\n        return 45\n    if n == 46:\n        return 46\n    if n == 47:\n        return 47\n    if n == 48:\n        return 48\n    if n == 49:\n        return 49\n    if n == 50:\n        return 50\n    if n == 51:\n        return 51\n    if n == 52:\n        return 52\n    if n == 53:\n        return 53\n    if n == 54:\n        return 54\n    if n == 55:\n        return 55\n    if n == 56:\n        return 56\n    if n == 57:\n        return 57\n    if n == 58:\n        return 58\n    if n == 59:\n        return 59\n    if n == 60:\n        return 60\n    if n == 61:\n        return 61\n    if n == 62:\n        return 62\n    if n == 63:\n        return 63\n    if n == 64:\n        return 64\n    if n == 65:\n        return 65\n    if n == 66:\n        return 66\n    if n == 67:\n        return 67\n    if n == 68:\n        return 68\n    if n == 69:\n        return 69\n    if n == 70:\n        return 70\n    if n == 71:\n        return 71\n    if n == 72:\n        return 72\n    if n == 73:\n        return 73\n    if n == 74:\n        return 74\n    if n == 75:\n        return 75\n    if n == 76:\n        return 76\n    if n == 77:\n        return 77\n    if n == 78:\n        return 78\n    if n == 79:\n        return 79\n    if n == 80:\n        return 80\n    if n == 81:\n        return 81\n    if n == 82:\n        return 82\n    if n == 83:\n        return 83\n    if n == 84:\n        return 84\n    if n == 85:\n        return 85\n    if n == 86:\n        return 86\n    if n == 87:\n        return 87\n    if n == 88:\n        return 88\n    if n == 89:\n        return 89\n    if n == 90:\n        return 90\n    if n == 91:\n        ",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4029,
      "prompt": "Complete the Python function given the prompt below:\nYou are given an integer $n$ from $1$ to $10^{18}$ without leading zeroes.\nIn one move you can swap any two adjacent digits in the given number in such a way that the resulting number will not contain leading zeroes. In other words, after each move the number you have cannot contain any leading zeroes.\nWhat is the minimum number of moves you have to make to obtain a number that is divisible by $25$? Print -1 if it is impossible to obtain a number that is divisible by $25$.\n-----Input-----\nThe first line contains an integer $n$ ($1 \\le n \\le 10^{18}$). It is guaranteed that the first (left) digit of the number $n$ is not a zero.\n-----Output-----\nIf it is impossible to obtain a number that is divisible by $25$, print -1. Otherwise print the minimum number of moves required to obtain such number.\nNote that you can swap only adjacent digits in the given number.\n-----Examples-----\nInput\n5071\nOutput\n4\nInput\n705\nOutput\n1\nInput\n1241367\nOutput\n-1\n-----Note-----\nIn the first example one of the possible sequences of moves is 5071 $\\rightarrow$ 5701 $\\rightarrow$ 7501 $\\rightarrow$ 7510 $\\rightarrow$ 7150.\n\ndef",
      "answer": "def divisible_by_25(n):\n    if n % 25 == 0:\n        return -1\n    else:\n        return divisible_by_25(n // 25) + 1\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4030,
      "prompt": "Complete the Python function given the prompt below:\nThis is a hard version of the problem. The actual problems are different, but the easy version is almost a subtask of the hard version. Note that the constraints and the output format are different.\nYou are given a string $s$ consisting of $n$ lowercase Latin letters.\nYou have to color all its characters the minimum number of colors (each character to exactly one color, the same letters can be colored the same or different colors, i.e. you can choose exactly one color for each index in $s$).\nAfter coloring, you can swap any two neighboring characters of the string that are colored different colors. You can perform such an operation arbitrary (possibly, zero) number of times.\nThe goal is to make the string sorted, i.e. all characters should be in alphabetical order.\nYour task is to find the minimum number of colors which you have to color the given string in so that after coloring it can become sorted by some sequence of swaps. Note that you have to restore only coloring, not the sequence of swaps.\n-----Input-----\nThe first line of the input contains one integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) \u2014 the length of $s$.\nThe second line of the input contains the string $s$ consisting of exactly $n$ lowercase Latin letters.\n-----Output-----\nIn the first line print one integer $res$ ($1 \\le res \\le n$) \u2014 the minimum number of colors in which you have to color the given string so that after coloring it can become sorted by some sequence of swaps.\nIn the second line print any possible coloring that can be used to sort the string using some sequence of swaps described in the problem statement. The coloring is the array $c$ of length $n$, where $1 \\le c_i \\le res$ and $c_i$ means the color of the $i$-th character.\n-----Examples-----\nInput\n9\nabacbecfd\nOutput\n2\n1 1 2 1 2 1 2 1 2 \nInput\n8\naaabbcbb\nOutput\n2\n1 2 1 2 1 2 1 1\nInput\n7\nabcdedc\nOutput\n3\n1 1 1 1 1 2 3 \nInput\n5\nabcde\nOutput\n1\n1 1 1 1 1\n\ndef",
      "answer": "def solve(n, s):\n    c = [0] * (n + 1)\n    for i in range(1, n + 1):\n        c[i] = c[i - 1] + 1\n    for i in range(n - 1, -1, -1):\n        c[s[i]] -= 1\n        if c[s[i]] == 0:\n            c[s[i]] = 1\n    return c[1]\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4031,
      "prompt": "Complete the Python function given the prompt below:\nYou are given $n$ strings. Each string consists of lowercase English letters. Rearrange (reorder) the given strings in such a way that for every string, all strings that are placed before it are its substrings.\nString $a$ is a substring of string $b$ if it is possible to choose several consecutive letters in $b$ in such a way that they form $a$. For example, string \"for\" is contained as a substring in strings \"codeforces\", \"for\" and \"therefore\", but is not contained as a substring in strings \"four\", \"fofo\" and \"rof\".\n-----Input-----\nThe first line contains an integer $n$ ($1 \\le n \\le 100$) \u2014 the number of strings.\nThe next $n$ lines contain the given strings. The number of letters in each string is from $1$ to $100$, inclusive. Each string consists of lowercase English letters.\nSome strings might be equal.\n-----Output-----\nIf it is impossible to reorder $n$ given strings in required order, print \"NO\" (without quotes).\nOtherwise print \"YES\" (without quotes) and $n$ given strings in required order.\n-----Examples-----\nInput\n5\na\naba\nabacaba\nba\naba\nOutput\nYES\na\nba\naba\naba\nabacaba\nInput\n5\na\nabacaba\nba\naba\nabab\nOutput\nNO\nInput\n3\nqwerty\nqwerty\nqwerty\nOutput\nYES\nqwerty\nqwerty\nqwerty\n-----Note-----\nIn the second example you cannot reorder the strings because the string \"abab\" is not a substring of the string \"abacaba\".\n\ndef",
      "answer": "def rearrange(s):\n    if len(s) == 1:\n        return s\n    else:\n        return s[0] + rearrange(s[1:])\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4032,
      "prompt": "Complete the Python function given the prompt below:\nMishka started participating in a programming contest. There are $n$ problems in the contest. Mishka's problem-solving skill is equal to $k$.\nMishka arranges all problems from the contest into a list. Because of his weird principles, Mishka only solves problems from one of the ends of the list. Every time, he chooses which end (left or right) he will solve the next problem from. Thus, each problem Mishka solves is either the leftmost or the rightmost problem in the list.\nMishka cannot solve a problem with difficulty greater than $k$. When Mishka solves the problem, it disappears from the list, so the length of the list decreases by $1$. Mishka stops when he is unable to solve any problem from any end of the list.\nHow many problems can Mishka solve?\n-----Input-----\nThe first line of input contains two integers $n$ and $k$ ($1 \\le n, k \\le 100$) \u2014 the number of problems in the contest and Mishka's problem-solving skill.\nThe second line of input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 100$), where $a_i$ is the difficulty of the $i$-th problem. The problems are given in order from the leftmost to the rightmost in the list.\n-----Output-----\nPrint one integer \u2014 the maximum number of problems Mishka can solve.\n-----Examples-----\nInput\n8 4\n4 2 3 1 5 1 6 4\nOutput\n5\nInput\n5 2\n3 1 2 1 3\nOutput\n0\nInput\n5 100\n12 34 55 43 21\nOutput\n5\n-----Note-----\nIn the first example, Mishka can solve problems in the following order: $[4, 2, 3, 1, 5, 1, 6, 4] \\rightarrow [2, 3, 1, 5, 1, 6, 4] \\rightarrow [2, 3, 1, 5, 1, 6] \\rightarrow [3, 1, 5, 1, 6] \\rightarrow [1, 5, 1, 6] \\rightarrow [5, 1, 6]$, so the number of solved problems will be equal to $5$.\nIn the second example, Mishka can't solve any problem because the difficulties of problems from both ends are greater than $k$.\nIn the third example, Mishka's solving skill is so amazing that he can solve all the problems.\n\ndef",
      "answer": "def solve(n, k):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36:\n        return 36\n    if n == 37:\n        return 37\n    if n == 38:\n        return 38\n    if n == 39:\n        return 39\n    if n == 40:\n        return 40\n    if n == 41:\n        return 41\n    if n == 42:\n        return 42\n    if n == 43:\n        return 43\n    if n == 44:\n        return 44\n    if n == 45:\n        return 45\n    if n == 46:\n        return 46\n    if n == 47:\n        return 47\n    if n == 48:\n        return 48\n    if n == 49:\n        return 49\n    if n == 50:\n        return 50\n    if n == 51:\n        return 51\n    if n == 52:\n        return 52\n    if n == 53:\n        return 53\n    if n == 54:\n        return 54\n    if n == 55:\n        return 55\n    if n == 56:\n        return 56\n    if n == 57:\n        return 57\n    if n == 58:\n        return 58\n    if n == 59:\n        return 59\n    if n == 60:\n        return 60\n    if n == 61:\n        return 61\n    if n == 62:\n        return 62\n    if n == 63:\n        return 63\n    if n == 64:\n        return 64\n    if n == 65:\n        return 65\n    if n == 66:\n        return 66\n    if n == 67:\n        return 67\n    if n == 68:\n        return 68\n    if n == 69:\n        return 69\n    if n == 70:\n        return 70\n    if n == 71:\n        return 71\n    if n == 72:\n        return 72\n    if n == 73:\n        return 73\n    if n == 74:\n        return 74\n    if n == 75:\n        return 75\n    if n == 76:\n        return 76\n    if n == 77:\n        return 77\n    if n == 78:\n        return 78\n    if n == 79:\n        return 79\n    if n == 80:\n        return 80\n    if n == 81:\n        return 81\n    if n == 82:\n        return 82\n    if n == 83:\n        return 83\n    if n == 84:\n        return 84\n    if n == 85:\n        return 85\n    if n == 86:\n        return 86\n    if n == 87:\n        return 87\n    if n == 88:\n        return 88\n    if n == 89:\n        return 89\n    if n == 90:\n        return 90\n    if n == 91:\n        return 91\n    if n == 92:\n        return 92\n    if n == 93",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4033,
      "prompt": "Complete the Python function given the prompt below:\nThere is an infinite board of square tiles. Initially all tiles are white.\nVova has a red marker and a blue marker. Red marker can color $a$ tiles. Blue marker can color $b$ tiles. If some tile isn't white then you can't use marker of any color on it. Each marker must be drained completely, so at the end there should be exactly $a$ red tiles and exactly $b$ blue tiles across the board.\nVova wants to color such a set of tiles that:\n  they would form a rectangle, consisting of exactly $a+b$ colored tiles;  all tiles of at least one color would also form a rectangle. \nHere are some examples of correct colorings:\n [Image] \nHere are some examples of incorrect colorings:\n [Image] \nAmong all correct colorings Vova wants to choose the one with the minimal perimeter. What is the minimal perimeter Vova can obtain?\nIt is guaranteed that there exists at least one correct coloring.\n-----Input-----\nA single line contains two integers $a$ and $b$ ($1 \\le a, b \\le 10^{14}$) \u2014 the number of tiles red marker should color and the number of tiles blue marker should color, respectively.\n-----Output-----\nPrint a single integer \u2014 the minimal perimeter of a colored rectangle Vova can obtain by coloring exactly $a$ tiles red and exactly $b$ tiles blue.\nIt is guaranteed that there exists at least one correct coloring.\n-----Examples-----\nInput\n4 4\nOutput\n12\nInput\n3 9\nOutput\n14\nInput\n9 3\nOutput\n14\nInput\n3 6\nOutput\n12\nInput\n506 2708\nOutput\n3218\n-----Note-----\nThe first four examples correspond to the first picture of the statement.\nNote that for there exist multiple correct colorings for all of the examples.\nIn the first example you can also make a rectangle with sides $1$ and $8$, though its perimeter will be $18$ which is greater than $8$.\nIn the second example you can make the same resulting rectangle with sides $3$ and $4$, but red tiles will form the rectangle with sides $1$ and $3$ and blue tiles will form the rectangle with sides $3$ and $3$.\n\ndef",
      "answer": "def solve(a, b):\n    if a == b:\n        return a\n    if a > b:\n        return solve(a, b-1)\n    return solve(a-1, b)\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4034,
      "prompt": "Complete the Python function given the prompt below:\nThis is an easy version of the problem. The actual problems are different, but the easy version is almost a subtask of the hard version. Note that the constraints and the output format are different.\nYou are given a string $s$ consisting of $n$ lowercase Latin letters.\nYou have to color all its characters one of the two colors (each character to exactly one color, the same letters can be colored the same or different colors, i.e. you can choose exactly one color for each index in $s$).\nAfter coloring, you can swap any two neighboring characters of the string that are colored different colors. You can perform such an operation arbitrary (possibly, zero) number of times.\nThe goal is to make the string sorted, i.e. all characters should be in alphabetical order.\nYour task is to say if it is possible to color the given string so that after coloring it can become sorted by some sequence of swaps. Note that you have to restore only coloring, not the sequence of swaps.\n-----Input-----\nThe first line of the input contains one integer $n$ ($1 \\le n \\le 200$) \u2014 the length of $s$.\nThe second line of the input contains the string $s$ consisting of exactly $n$ lowercase Latin letters.\n-----Output-----\nIf it is impossible to color the given string so that after coloring it can become sorted by some sequence of swaps, print \"NO\" (without quotes) in the first line.\nOtherwise, print \"YES\" in the first line and any correct coloring in the second line (the coloring is the string consisting of $n$ characters, the $i$-th character should be '0' if the $i$-th character is colored the first color and '1' otherwise).\n-----Examples-----\nInput\n9\nabacbecfd\nOutput\nYES\n001010101\nInput\n8\naaabbcbb\nOutput\nYES\n01011011\nInput\n7\nabcdedc\nOutput\nNO\nInput\n5\nabcde\nOutput\nYES\n00000\n\ndef",
      "answer": "def color_string(s):\n    if len(s) == 0:\n        return \"NO\"\n    if len(s) == 1:\n        return \"YES\"\n    if len(s) == 2:\n        return \"YES\"\n    if len(s) == 3:\n        return \"YES\"\n    if len(s) == 4:\n        return \"YES\"\n    if len(s) == 5:\n        return \"YES\"\n    if len(s) == 6:\n        return \"YES\"\n    if len(s) == 7:\n        return \"YES\"\n    if len(s) == 8:\n        return \"YES\"\n    if len(s) == 9:\n        return \"YES\"\n    if len(s) == 10:\n        return \"YES\"\n    if len(s) == 11:\n        return \"YES\"\n    if len(s) == 12:\n        return \"YES\"\n    if len(s) == 13:\n        return \"YES\"\n    if len(s) == 14:\n        return \"YES\"\n    if len(s) == 15:\n        return \"YES\"\n    if len(s) == 16:\n        return \"YES\"\n    if len(s) == 17:\n        return \"YES\"\n    if len(s) == 18:\n        return \"YES\"\n    if len(s) == 19:\n        return \"YES\"\n    if len(s) == 20:\n        return \"YES\"\n    if len(s) == 21:\n        return \"YES\"\n    if len(s) == 22:\n        return \"YES\"\n    if len(s) == 23:\n        return \"YES\"\n    if len(s) == 24:\n        return \"YES\"\n    if len(s) == 25:\n        return \"YES\"\n    if len(s) == 26:\n        return \"YES\"\n    if len(s) == 27:\n        return \"YES\"\n    if len(s) == 28:\n        return \"YES\"\n    if len(s) == 29:\n        return \"YES\"\n    if len(s) == 30:\n        return \"YES\"\n    if len(s) == 31:\n        return \"YES\"\n    if len(s) == 32:\n        return \"YES\"\n    if len(s) == 33:\n        return \"YES\"\n    if len(s) == 34:\n        return \"YES\"\n    if len(s) == 35:\n        return \"YES\"\n    if len(s) == 36:\n        return \"YES\"\n    if len(s) == 37:\n        return \"YES\"\n    if len(s) == 38:\n        return \"YES\"\n    if len(s) == 39:\n        return \"YES\"\n    if len(s) == 40:\n        return \"YES\"\n    if len(s) == 41:\n        return \"YES\"\n    if len(s) == 42:\n        return \"YES\"\n    if len(s) == 43:\n        return \"YES\"\n    if len(s) == 44:\n        return \"YES\"\n    if len(s) == 45:\n        return \"YES\"\n    if len(s) == 46:\n        return \"YES\"\n    if len(s) == 47:\n        return \"YES\"\n    if len(s) == 48:\n        return \"YES\"\n    if len(s) == 49:\n        return \"YES\"\n    if len(s) == 50:\n        return \"YES\"\n    if len(s) == 51:\n        return \"YES\"\n    if len(s) == 52:\n        return \"YES\"\n    if len(s) == 53:\n        return \"YES\"\n    if len(s) == 54:\n        return \"YES\"\n    if len(s) == 55:\n        return \"YES\"\n    if len(s) == 56:\n        return \"YES\"\n    if len(s) == 57:\n        return \"YES\"\n    if len(s) == 58:\n        return \"YES\"\n    if len(s) == 59:\n        return \"YES\"\n    if len(s) == 60:\n        return \"YES\"\n    if len(s) == 61:\n        return \"YES\"\n    if len(s) == 62:\n        return \"YES\"\n    if len(s) == 63:",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4035,
      "prompt": "Complete the Python function given the prompt below:\nFind the price of a product before tax such that, when the consumption tax rate is 8 percent and 10 percent, the amount of consumption tax levied on it is A yen and B yen, respectively. (Yen is the currency of Japan.)\nHere, the price before tax must be a positive integer, and the amount of consumption tax is rounded down to the nearest integer.\nIf multiple prices satisfy the condition, print the lowest such price; if no price satisfies the condition, print -1.\n-----Constraints-----\n - 1 \\leq A \\leq B \\leq 100\n - A and B are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nA B\n-----Output-----\nIf there is a price that satisfies the condition, print an integer representing the lowest such price; otherwise, print -1.\n-----Sample Input-----\n2 2\n-----Sample Output-----\n25\nIf the price of a product before tax is 25 yen, the amount of consumption tax levied on it is:\n - When the consumption tax rate is 8 percent: \\lfloor 25 \\times 0.08 \\rfloor = \\lfloor 2 \\rfloor = 2 yen.\n - When the consumption tax rate is 10 percent: \\lfloor 25 \\times 0.1 \\rfloor = \\lfloor 2.5 \\rfloor = 2 yen.\nThus, the price of 25 yen satisfies the condition. There are other possible prices, such as 26 yen, but print the minimum such price, 25.\n\ndef",
      "answer": "def find_price(a, b):\n    if a <= 0 or b <= 0:\n        return -1\n    if a <= b:\n        return a\n    return b\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4036,
      "prompt": "Complete the Python function given the prompt below:\nPolycarp has to solve exactly $n$ problems to improve his programming skill before an important programming competition. But this competition will be held very soon, most precisely, it will start in $k$ days. It means that Polycarp has exactly $k$ days for training!\nPolycarp doesn't want to procrastinate, so he wants to solve at least one problem during each of $k$ days. He also doesn't want to overwork, so if he solves $x$ problems during some day, he should solve no more than $2x$ problems during the next day. And, at last, he wants to improve his skill, so if he solves $x$ problems during some day, he should solve at least $x+1$ problem during the next day.\nMore formally: let $[a_1, a_2, \\dots, a_k]$ be the array of numbers of problems solved by Polycarp. The $i$-th element of this array is the number of problems Polycarp solves during the $i$-th day of his training. Then the following conditions must be satisfied:   sum of all $a_i$ for $i$ from $1$ to $k$ should be $n$;  $a_i$ should be greater than zero for each $i$ from $1$ to $k$;  the condition $a_i < a_{i + 1} \\le 2 a_i$ should be satisfied for each $i$ from $1$ to $k-1$. \nYour problem is to find any array $a$ of length $k$ satisfying the conditions above or say that it is impossible to do it.\n-----Input-----\nThe first line of the input contains two integers $n$ and $k$ ($1 \\le n \\le 10^9, 1 \\le k \\le 10^5$) \u2014 the number of problems Polycarp wants to solve and the number of days Polycarp wants to train.\n-----Output-----\nIf it is impossible to find any array $a$ of length $k$ satisfying Polycarp's rules of training, print \"NO\" in the first line.\nOtherwise print \"YES\" in the first line, then print $k$ integers $a_1, a_2, \\dots, a_k$ in the second line, where $a_i$ should be the number of problems Polycarp should solve during the $i$-th day. If there are multiple answers, you can print any.\n-----Examples-----\nInput\n26 6\nOutput\nYES\n1 2 4 5 6 8 \nInput\n8 3\nOutput\nNO\nInput\n1 1\nOutput\nYES\n1 \nInput\n9 4\nOutput\nNO\n\ndef",
      "answer": "def solve(n, k):\n    if n == 0 or k == 0:\n        return 0\n    if n < 0 or k < 0:\n        return -1\n    return solve(n - 1, k) + solve(n - 1, k - 1)\n\n",
      "difficulty": "introductory",
      "split": "test"
   },
   {
      "task_id": 4037,
      "prompt": "Complete the Python function given the prompt below:\nThe only difference between easy and hard versions is that you should complete all the projects in easy version but this is not necessary in hard version.\nPolycarp is a very famous freelancer. His current rating is $r$ units.\nSome very rich customers asked him to complete some projects for their companies. To complete the $i$-th project, Polycarp needs to have at least $a_i$ units of rating; after he completes this project, his rating will change by $b_i$ (his rating will increase or decrease by $b_i$) ($b_i$ can be positive or negative). Polycarp's rating should not fall below zero because then people won't trust such a low rated freelancer.\nPolycarp can choose the order in which he completes projects. Furthermore, he can even skip some projects altogether.\nTo gain more experience (and money, of course) Polycarp wants to choose the subset of projects having maximum possible size and the order in which he will complete them, so he has enough rating before starting each project, and has non-negative rating after completing each project.\nYour task is to calculate the maximum possible size of such subset of projects.\n-----Input-----\nThe first line of the input contains two integers $n$ and $r$ ($1 \\le n \\le 100, 1 \\le r \\le 30000$) \u2014 the number of projects and the initial rating of Polycarp, respectively.\nThe next $n$ lines contain projects, one per line. The $i$-th project is represented as a pair of integers $a_i$ and $b_i$ ($1 \\le a_i \\le 30000$, $-300 \\le b_i \\le 300$) \u2014 the rating required to complete the $i$-th project and the rating change after the project completion.\n-----Output-----\nPrint one integer \u2014 the size of the maximum possible subset (possibly, empty) of projects Polycarp can choose.\n-----Examples-----\nInput\n3 4\n4 6\n10 -2\n8 -1\nOutput\n3\nInput\n5 20\n45 -6\n34 -15\n10 34\n1 27\n40 -45\nOutput\n5\nInput\n3 2\n300 -300\n1 299\n1 123\nOutput\n3\n\ndef",
      "answer": "def solution(n, r):\n    answer = 0\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            answer = max(answer, r-i)\n    return answer\n<|endoftext|>",
      "difficulty": "introductory",
      "split": "test"
   }
]