[
   {
      "task_id": 3400,
      "prompt": "Complete the Python function given the prompt below:\nAlice: How can it be?\n Rabbit: Trust me Alice. It always takes the same time. When I go from my home up the road to Queen of Hearts\u2019 Castle, my watch counts nine hours. However, if I continue down to Mad Hatter\u2019s House, my watch counts just two hours in total. Isn\u2019t that great?\n Alice: How can it be Rabbit? The path is longer and you take a shorter time to do it? How can it be?\n Rabbit: Trust me Alice! It is all recorded in my logbook. You can check it. All my trips are there...\n Alice: Rabbit, I do not think it can help me...\n Rabbit: Alice, no matter where you are, or where you want to go, or the track you choose, you\u2019ll be able to find how long it takes you.\n Alice: Really?\n Rabbit: For sure!\n\u00a0\n Poor Rabbit, poor Alice.\nWhite Rabbit is helping Alice finding a quick way home through the Rabbit\u2019s hole with his holy logbook of trips. The problem lies in the chronometer of its bizarre pocket watch (it displays the hours from zero to $12$), and the way the Rabbit counts the time with it: If a journey takes $14$ hours (real time), seeing the pointer resting above number one, he assumes it took one hour.\nGiven that the White Rabbit is telling the truth, can you help Alice finding how long the shortest path home takes, using the Rabbit\u2019s logbook of trips?\n-----Task-----\nYour task is to find the shortest real time it takes for Alice to go from her present location to the Rabbit\u2019s hole. For each trip, the White Rabbit wrote down the trip time, the number of visited locations (not necessarily distinct) and the sequence in which they were visited. That sequence defines the trip because there is at most one direct track between any two locations in the Wonderland and it takes the same time both ways. The White rabbit\u2019s logbook contains trips using all roads in Wonderland; there are no direct connections beyond those implied by the trips in the log book.\n-----Input-----\nThe first line contains four integers $N$, $A$, $R$ and $T$, where: $N$ is the number of distinct locations; $A$ identifies the place where Alice is located; $R$ corresponds to the Rabbit\u2019s hole location; and $T$ is the number of trips recorded in White Rabbit\u2019s logbook. All locations are identified by numbers from $1$ to $N$. Each of the next $T$ lines describes a trip logged with format $d p a_{1} a_{2} \\cdots a_{p}$, where $d$ is the trip duration (according to White Rabbit), $p$ is the number of locations and $a_{1} a_{2} \\cdots a_{p}$ is the sequence of visited locations.\n-----Constraints-----\n$2$\n$\\leq $\n$N$\n$\\leq $\n$200$\nNumber of locations\n$1$\n$\\leq $\n$T$\n$\\leq $\n$500$\nNumber of trips in the logbook\n$2$\n$\\leq $\n$p$\n$\\leq $\n$800$\nNumber of (possibly repeated) locations in a trip\n$1$\n$\\leq $\n$d_{ij}$\n$\\leq $\n$12$\nReal time of the direct track between $a_ i$ and $a_ j$ (if it exists)\nThere are at most $200$ direct tracks. The input will be constructed in such a way that all (real) trip durations are uniquely determined.\n-----Output-----\nAn integer representing the shortest (real) time it takes for Alice to get home.\n-----Examples-----\nSample Input:\n3 1 3 3\n3 4 1 2 3 2\n4 3 1 2 1\n1 4 1 2 1 3\nSample Output:\n9\n\ndef",
      "answer": "def shortest_time(n, a, r, t):\n    if n == 1:\n        return t\n    if n == 2:\n        return t + a\n    if n == 3:\n        return t + a + a + a\n    if n == 4:\n        return t + a + a + a + a\n    if n == 5:\n        return t + a + a + a + a + a\n    if n == 6:\n        return t + a + a + a + a + a + a\n    if n == 7:\n        return t + a + a + a + a + a + a + a\n    if n == 8:\n        return t + a + a + a + a + a + a + a + a\n    if n == 9:\n        return t + a + a + a + a + a + a + a + a + a\n    if n == 10:\n        return t + a + a + a + a + a + a + a + a + a + a + a\n    if n == 11:\n        return t + a + a + a + a + a + a + a + a + a + a + a + a + a\n    if n == 12:\n        return t + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a\n    if n == 13:\n        return t + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a\n    if n == 14:\n        return t + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a\n    if n == 15:\n        return t + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a\n    if n == 16:\n        return t + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a\n    if n == 17:\n        return t + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a\n    if n == 18:\n        return t + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a\n    if n == 19:\n        return t + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a\n    if n == 20:\n        return t + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a\n    if n == 21:\n        return t + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a +",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3401,
      "prompt": "Complete the Python function given the prompt below:\nAfter conquering Britannia, the great Roman general Agricola decided all of his new cities should take advantage of the natural springs found aplenty. He appointed his advisor Wessus Waterus to try to find a way to get each town a fresh supply of water.\nThere are many springs and many towns and between each are the natural hills and valleys of Roman Britain. Wessus doesn\u2019t want to waste the Imperial coin. He has been tasked with linking each town to a spring by a series of aqueducts using as little material as possible. Water, as we know, only flows downhill so any aqueduct must go from a higher point to a lower; intervening hills, springs and towns are no problem since they can be tunnelled through and on. The only requirement is that all aqueduct components start and end on hilltops.\nAny spring must only serve one town, but the Romans are clever enough to find a way for aqueducts to pass each other. Roman engineering is excellent, but has its limits: aqueducts can only be of a limited length.\n-----Input-----\n - One line containing four integers: $n,s,t$ and $q$ where $0 < n \\le 500$ is the number of hills, $1 \\le s \\le 40$ is the number of springs, $1 \\le t \\le s$ is the number of towns and $q$ ($1 \\le q \\le 3\\cdot 10^6$) is the maximum aqueduct length.\n - $N$ more lines, each giving the space-separated integers $x_ i, y_ i, h_ i$: the coordinates and height of a hill ($0 \\le |x|, |y|, h \\le 10^6$). These hills are numbered $1$ to $n$ in the order given.\n - One line containing $s$ space-separated integers $i_ j$ ($1 \\le i_ j \\le n$), each representing the number of a hill on which a spring can be found.\n - One line containing $t$ space-separated integers $i_ j$ ($1 \\le i_ j \\le n$), each giving the number of a hill on which the town can be found.\nEach hill may only have at most one spring or one town.\n-----Output-----\nOutput one line with one real number, denoting the minimum total length of all aqueducts needed to supply each town with fresh water from its own unique spring or IMPOSSIBLE if there is no way to achieve this. Your answer should be correct up to an absolute or relative precision of $10^{-6}$.\n-----Examples-----\nSample Input:\n6 2 2 8\n0 0 6\n3 4 7\n0 8 8\n6 8 8\n6 0 6\n6 4 8\n3 4\n1 5\nSample Output:\n20.396078\n\ndef",
      "answer": "def solve(n,s,t):\n    if n == 0:\n        return 0\n    if s == 0:\n        return t\n    if t == 0:\n        return 0\n    if n == 1:\n        return t\n    if s == 1:\n        return t\n    if n == 2:\n        return t + t\n    if s == 2:\n        return t + t + t\n    if n == 3:\n        return t + t + t + t\n    if s == 3:\n        return t + t + t + t + t\n    if n == 4:\n        return t + t + t + t + t + t\n    if s == 4:\n        return t + t + t + t + t + t + t\n    if n == 5:\n        return t + t + t + t + t + t + t + t\n    if s == 5:\n        return t + t + t + t + t + t + t + t + t\n    if n == 6:\n        return t + t + t + t + t + t + t + t + t + t\n    if s == 6:\n        return t + t + t + t + t + t + t + t + t + t + t\n    if n == 7:\n        return t + t + t + t + t + t + t + t + t + t + t + t\n    if s == 7:\n        return t + t + t + t + t + t + t + t + t + t + t + t + t\n    if n == 8:\n        return t + t + t + t + t + t + t + t + t + t + t + t + t + t\n    if s == 8:\n        return t + t + t + t + t + t + t + t + t + t + t + t + t + t + t\n    if n == 9:\n        return t + t + t + t + t + t + t + t + t + t + t + t + t + t + t\n    if s == 9:\n        return t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t\n    if n == 10:\n        return t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t\n    if s == 10:\n        return t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t\n    if n == 11:\n        return t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t\n    if s == 11:\n        return t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t\n    if n == 12:\n        return t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t\n    if s == 12:\n        return t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t\n    if n == 13:\n        return t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t\n    if s == 13:\n        return t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t\n    if n == 14:\n        return t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t\n    if s == 14:\n        return t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t\n    if n == 15:\n        return t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t + t\n    if s == 15",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3402,
      "prompt": "Complete the Python function given the prompt below:\nKang the Penguin has forgotten some letters of his password, help him figure them out!\nOf course, Kang knows that something as important as a password should be easy to remember, but it also cannot be too short. Thus, he knows that he originally decided to generate his password in the following manner. First, he starts with some non-empty string $S$, consisting of lowercase letters only. Then, he chooses $26$ non-empty strings $T_ a, T_ b, \\dots, T_ z$, each consisting of at least two lowercase English letters. He defines a function $f$, which converts each character $i$ to its corresponding string $T_ i$ and concatenates the results. For example, if $T_ a$ was \u201cabc\u201d and $T_ b$ was \u201ccba\u201d, applying $f$ to \u201caba\u201d would result in the string \u201cabccbaabc\u201d.\nNow, he applies $f$ repeatedly to $S$, applying it $K$ times in total. The final result is his password $P = f^K (S)$.\nWhile he remembers most of his password, he has forgotten $M$ of the letters. The $i^\\textrm {th}$ letter that he has forgotten is in position $m_ i$ in the string $P$. It is guaranteed that each $m_ i$ will be less than or equal to the final length of the password $|P|$. Help Kang to figure out what the forgotten letters are!\n-----Input-----\nThe $1^\\textrm {st}$ line of the input contains a single lowercase string $S$, where $1 \\leq |S| \\leq 1000000$.\nThe $2^\\textrm {nd}$ line of the input contains $13$ strings $T_ a, T_ b, \\dots, T_ m$, separated by spaces, where $2 \\leq |T_ a|, |T_ b|, \\dots, |T_ m| \\leq 50$.\nThe $3^\\textrm {rd}$ line of the input contains $13$ strings $T_ n, T_ o, \\dots, T_ z$, separated by spaces, where $2 \\leq |T_ n|, |T_ o|, \\dots, |T_ z| \\leq 50$.\nThe strings $T_ a, T_ b, \\dots, T_ z$ each contains only lowercase English characters (a\u2013z).\nThe $4^\\textrm {th}$ line of the input contains a single integer $K$, where $1 \\leq K \\leq 10^{15}$.\nThe $5^\\textrm {th}$ line of the input contains a single integer $M$, where $1 \\leq M \\leq 1000$.\nThe $6^\\textrm {th}$ line of the input contains $M$ integers, the $i^\\textrm {th}$ of which is the integer $m_ i$, where $1 \\leq m_ i \\leq \\min (|f^K(S)|,10^{15})$.\n-----Output-----\nOutput $M$ lines, each containing a single lowercase character. The $i^\\textrm {th}$ line of the output should contain the letter in the $m_ i^\\textrm {th}$ position of the password $P$.\n-----Examples-----\nSample Input:\nabca\nbc cd da dd ee ff gg hh ii jj kk ll mm\nnn oo pp qq rr ss tt uu vv ww xx yy zz\n1\n2\n1 8\nSample Output:\nb\nc\n\ndef",
      "answer": "def f(S):\n    T = S.split()\n    for i in range(len(T)):\n        T[i] = T[i].lower()\n    return ''.join(T)\n\n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3403,
      "prompt": "Complete the Python function given the prompt below:\nThe longest common prefix of two words is the longest word that both words start with. For example, the longest common prefix of the words \u201cidentity\u201d and \u201cidealistic\u201d is the word \u201cide\u201d. A database contains $N$ words.\nThe algorithm to search for a query word $W$ in the database is primitive. It compares the word $W$ one by one with each word in the database. Two words are compared letter by letter until a letter in which they differ is found or until the end of one of the words is reached (it is then established either that the words are equal or that one is longer than the other). When the algorithm finds the word $W$ in the database, it terminates.\nAnalysing the algorithm shows that the number of steps needed to find a word $W$ is equal to the number of words $W$ is compared to, plus the sum of the lengths of the longest common prefixes of W and each of the words it was compared to.\nWrite a program that calculates the number of steps the algorithm uses to find each of the $Q$ query words.\n-----Input-----\nThe first line contains an integer $N$ $(1 \\leq N \\leq 30000)$, the number of words in the database. Each of the following $N$ lines contains a single word from the database. The words are given in the order the algorithm compares them to a query word. All words in the database will be distinct. The following line contains an integer $Q$ $(1 \\leq Q \\leq 30000)$, the number of words searched for. Each of the following $Q$ lines contains a single query word.\nAll words in the input will be strings of less than $30$ lowercase letters of the English alphabet\n-----Output-----\nOutput one integer per line for each query word, the number of steps the algorithm uses when searching for the word.\n-----Examples-----\nSample Input:\n5\nhobotnica\nrobot\nhobi\nhobit\nrobi\n4\nrobi\nhobi\nhobit\nrakija\nSample Output:\n12\n10\n16\n7\n\ndef",
      "answer": "def longest_common_prefix(words):\n    if len(words) == 0:\n        return \"\"\n    if len(words) == 1:\n        return words[0]\n    if len(words) == 2:\n        return words[0] if words[0] == words[1] else words[1]\n    if len(words) == 3:\n        return words[0] if words[0] == words[1] else words[1] if words[1] == words[2] else words[2]\n    if len(words) == 4:\n        return words[0] if words[0] == words[1] else words[1] if words[1] == words[2] else words[2] if words[2] == words[3] else words[3]\n    if len(words) == 5:\n        return words[0] if words[0] == words[1] else words[1] if words[1] == words[2] else words[2] if words[2] == words[3] else words[3] if words[3] == words[4] else words[4]\n    if len(words) == 6:\n        return words[0] if words[0] == words[1] else words[1] if words[1] == words[2] else words[2] if words[2] == words[3] else words[3] if words[3] == words[4] else words[4] if words[4] == words[5] else words[5]\n    if len(words) == 7:\n        return words[0] if words[0] == words[1] else words[1] if words[1] == words[2] else words[2] if words[2] == words[3] else words[3] if words[3] == words[4] else words[4] if words[4] == words[5] else words[5] if words[5] == words[6] else words[6]\n    if len(words) == 8:\n        return words[0] if words[0] == words[1] else words[1] if words[1] == words[2] else words[2] if words[2] == words[3] else words[3] if words[3] == words[4] else words[4] if words[4] == words[5] else words[5] if words[5] == words[6] else words[6] if words[6] == words[7] else words[7]\n    if len(words) == 9:\n        return words[0] if words[0] == words[1] else words[1] if words[1] == words[2] else words[2] if words[2] == words[3] else words[3] if words[3] == words[4] else words[4] if words[4] == words[5] else words[5] if words[5] == words[6] else words[6] if words[6] == words[7] else words[7] if words[7] == words[8] else words[8]\n    if len(words) == 10:\n        return words[0] if words[0] == words[1] else words[1] if words[1] == words[2] else words[2] if words[2] == words[3] else words[3] if words[3] == words[4] else words[4] if words[4] == words[5] else words[5] if words[5] == words[6] else words[6] if words[6] == words[7] else words[7] if words[7] == words[8] else words[8] if words[8] == words[9] else words[9]\n    if len(words) == 11:\n        return words[0] if words[0] == words[1] else words[1] if words[1] == words[2] else words[2] if words[2] == words[3] else words[3] if words[3] == words[4] else words[4] if words[4] == words[5] else words[5] if words[5] == words[6] else words[6] if words[6] == words[7] else words[7] if words[7] == words[8] else words[8] if words[8] == words[9] else words[9] if words[9]",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3404,
      "prompt": "Complete the Python function given the prompt below:\nYou\u2019ve intercepted encrypted communications between Martian diplomats. Since Martian diplomats are often spies, you decide to decrypt the messages. While the Martians have skilled rocket tech, they lag behind in number theory considerably, which compromises their encryption protocol.\nFortunately for you, spies friendly to you have reverse engineered the Martian protocol. It turns out that the Martians are using a shift-based cipher combined with a very long one-time pad. More specifically, the decryption procedure works as follows:\nStep 1: Define the function $f(x) = (33x + 1) \\mod 2^{20}$.\nFurther define $f^1(x) = f(x)$, \u00a0$f^2(x) = f(f(x))$, \u00a0$f^3(x) = f(f(f(x)))$, and so on.\nStep 2: Create a $X$ by $X$ size grid, fill the upper left corner with $f^1(0)$, the next cell to the right with $f^2(0)$, $f^3(0)$ etc. Once the top row is filled, continue to the cell below the upper left cell, and fill with $f^{X+1}(0)$. Continue this process until all rows are filled.\nStep 3: Sum all the values in every column, and take those values mod $2^{20}$.\nStep 4: Concatenate the base-10 representations of the column sums together, to get a very long base-10 number. For instance, if you had column sums of 10 and 12 for the first and second column, the leftmost four digits of the resulting value would be 1012.\nStep 5: Convert the result of step 4 from base $10$ to base $27$. This will yield the one-time pad the Martians used.\nStep 6: For each letter $l$ of the intercepted message, shift the letter by the amount given by the corresponding digit of step 5, base $27$. \u201cShifting\u201d means to add the digit at the corresponding position of the pad to the value of the letter in the encrypted message and then to compute its remainder modulo $27$. You may assume that both the encrypted and the decrypted message consist of only uppercase English characters \u2018A\u2019 through \u2018Z\u2019 and spaces, which are assigned values $0 \\ldots 26$ (A = 0, B = 1,... Z = 25, SPACE = 26). Thus, if the encrypted message has letter \u2018D\u2019 in position $3$, and the $3^{\\text {rd}}$ base-$27$ digit of the pad is $25$, then the decrypted letter after shifting would be $3 + 25 = 1 \\mod 27$ which is \u2018B\u2019.\nStep 7: Output the decrypted message.\n-----Input-----\nThe first line of the input contains two positive integers, $N$ ($1 \\le N \\le 10^6$), and $X$ ($1 \\le X \\le 2.5 \\cdot 10^5$). It is guaranteed that the base $27$ result of step 5 will be longer or equal to the length of the intercepted message. The second line of the input contains a string consisting of uppercase letters and spaces of length $N$, the encrypted text.\n-----Output-----\nOutput the decrypted text.\n-----Examples-----\nSample Input:\n14 4\nJQ IRKEYFG EXQ\nSample Output:\nTHIS IS A TEST\n\ndef",
      "answer": "def f(x):\n    return (33x + 1) % 2 ** 20\n\n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3405,
      "prompt": "Complete the Python function given the prompt below:\nLukas is to hold a presentation on useful mathematical tricks. E.g., to take the square root of a number you just need to remove the first half of the number. To convince his audience he uses the well tested method of proof by example: $\\sqrt {25} = 5$ and $\\sqrt {5776} = 76$ so the method obviously works. To multiply a number by $X = 2.6$ all you have to do is move the first digit to the end of the number, $135\\times 2.6 = 351$ and $270270\\times 2.6 = 702702$. \nLukas wants to demonstrate that this last method works for any $X$. To do this he will ask his audience for values of $X$ and then show them example multiplications for which the method works. Lukas has noticed that he can not just pick arbitrary numbers for his examples, so now he wants your help. Can you write a program that given $X$ gives a list of integers for which multiplying by $X$ is equivalent to moving the first digit to the end of the number? Lukas does not like very large numbers so do not list any numbers with more than 8 digits.\n-----Input-----\nThe input is a single decimal number $X$ ($1\\leq X < 1000$) with at most 4 digits after the decimal point.\n-----Output-----\nOutput a list of all positive integers less than $10^8$ for which Lukas\u2019 second trick works. Write the numbers in ascending order, one number per line. If the list is empty, output instead \u201cNo solution\u201d.\n-----Examples-----\nSample Input:\n2.6\nSample Output:\n135\n270\n135135\n270270\n\ndef",
      "answer": "def square_root(x):\n    return x**0.5\n\n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3406,
      "prompt": "Complete the Python function given the prompt below:\nThe 1941 October Revolution Parade of November $7^{th}$, 1941, taking place in Moscow, Soviet Union, was a parade in honor of the October Revolution 24 years ealier. It was one of the most memorable parade because of the serious circumstance at that time: Soviet\u2019s forces had constantly been dominated since the last 4 months, and Moscow was surrounded by Nazi under an extremely high pressure. Many soldiers joined that parade, and immediately rushed into the battle field after then. The winning against Nazi later pushed Hitler\u2019s forces very far away from Moscow and completely destroyed his Barbarossa plan\u2026\nIn order to ensure safety for the parade, Stalin gathered information about the positions of Nazi\u2019s troops. He knew that Nazi\u2019s troops can be depicted as $N$ points on the Cartesian plane. He was also aware of $S$ Soviet\u2019s defending castles, which can be represented by $S$ points.\nStalin thought that one castle was in danger, if there exist a group of four Nazi\u2019s troops, which forms a non-degenerate quadrilateral and the castle lies inside or on its border. Recall that a quadrilateral is non-degenerate iff no three of its vertices are collinear, and its edges do not intersect (with the exception that edges can intersect at vertices). Stalin wanted to know how many castles were in danger, so that he can send a suitable protection for them.\n-----Input-----\n - The first line of the input contains one integer $N$ $(4 \\leq N \\leq 1000)$ - the number of Nazi\u2019s tropps.\n - Each of the next $N$ lines contains two integers $x$ and $y$ $(0 \\leq x, y \\leq 10^6)$ representing one point where a Nazi\u2019s troop took place.\n - The next line contains one integer $S$ $(1 \\leq S \\leq 1000)$ - the number of Soviet castles.\n - Each of the next $S$ lines contains two integers $x$ and $y$ $(0 \\leq x, y \\leq 10^6)$ representing position of one castle.\nIt is guaranteed that all given points are distinct.\n-----Output-----\nWrite in one line the number castles which were in danger.\n\n-----Sample Clarification-----\nThe $1^{st}$ sample corresponds to the following figure. Blue points represent Nazi troops\u2019 locations, oranges points represent in-danger castles, green points represent non in-danger castles.\nThe $2^{nd}$ sample corresponds to the following figure. Note that the quadrilateral is degenerated, so no castle is in danger.\n-----Examples-----\nSample Input:\n4\n0 1\n3 7\n4 5\n6 5\n9\n1 4\n1 6\n2 3\n2 5\n3 5\n3 6\n4 8\n5 4\n6 3\nSample Output:\n4\n\ndef",
      "answer": "def find_danger(x, y):\n    if x == 0 or y == 0:\n        return 0\n    if x == 1 or y == 1:\n        return 1\n    if x == 2 or y == 2:\n        return 2\n    if x == 3 or y == 3:\n        return 3\n    if x == 4 or y == 4:\n        return 4\n    if x == 5 or y == 5:\n        return 5\n    if x == 6 or y == 6:\n        return 6\n    if x == 7 or y == 7:\n        return 7\n    if x == 8 or y == 8:\n        return 8\n    if x == 9 or y == 9:\n        return 9\n    if x == 10 or y == 10:\n        return 10\n    if x == 11 or y == 11:\n        return 11\n    if x == 12 or y == 12:\n        return 12\n    if x == 13 or y == 13:\n        return 13\n    if x == 14 or y == 14:\n        return 14\n    if x == 15 or y == 15:\n        return 15\n    if x == 16 or y == 16:\n        return 16\n    if x == 17 or y == 17:\n        return 17\n    if x == 18 or y == 18:\n        return 18\n    if x == 19 or y == 19:\n        return 19\n    if x == 20 or y == 20:\n        return 20\n    if x == 21 or y == 21:\n        return 21\n    if x == 22 or y == 22:\n        return 22\n    if x == 23 or y == 23:\n        return 23\n    if x == 24 or y == 24:\n        return 24\n    if x == 25 or y == 25:\n        return 25\n    if x == 26 or y == 26:\n        return 26\n    if x == 27 or y == 27:\n        return 27\n    if x == 28 or y == 28:\n        return 28\n    if x == 29 or y == 29:\n        return 29\n    if x == 30 or y == 30:\n        return 30\n    if x == 31 or y == 31:\n        return 31\n    if x == 32 or y == 32:\n        return 32\n    if x == 33 or y == 33:\n        return 33\n    if x == 34 or y == 34:\n        return 34\n    if x == 35 or y == 35:\n        return 35\n    if x == 36 or y == 36:\n        return 36\n    if x == 37 or y == 37:\n        return 37\n    if x == 38 or y == 38:\n        return 38\n    if x == 39 or y == 39:\n        return 39\n    if x == 40 or y == 40:\n        return 40\n    if x == 41 or y == 41:\n        return 41\n    if x == 42 or y == 42:\n        return 42\n    if x == 43 or y == 43:\n        return 43\n    if x == 44 or y == 44:\n        return 44\n    if x == 45 or y == 45:\n        return 45\n    if x == 46 or y == 46:\n        return 46\n    if x == 47 or y == 47:\n        return 47\n    if x == 48 or y == 48:\n        return 48\n    if x == 49 or y == 49:\n        return 49\n    if x == 50 or y == 50:\n        return 50\n    if x == 51 or y == 51:\n        return 51\n    if x == 52 or y == 52:\n        return 52\n    if x == 53 or y == 53:\n        return 53\n    if x == 54 or y == 54:\n        return 54\n    if x == 55 or y == 55:\n        return 55\n    if x == 56 or y == 56:\n        return 56\n    if x == 57 or y == 57:\n        return 57\n    if x == 58 or y == 58:\n        return 58\n    if x == 59 or y == 59:\n        return 59\n    if x == 60 or y == 60:\n        return 60\n    if x == 61 or y == 61:\n        return 61\n    if x == 62 or y == 62:\n        return 62\n    if x == 63 or y == 63:\n        return 63\n    if x == 64 or y == 64:\n        return 64\n    if x == 65 or y == 65:\n        return 65\n    if x == 66 or y == 66:\n        return 66\n    if x == 67 or y == 67:",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3407,
      "prompt": "Complete the Python function given the prompt below:\nYou have been hired at the Nano Wiring Efficient Route Company (NWERC) to help with the design of their new circuit boards. The circuits themselves have already been designed, and your task is to come up with a way to print them onto the blank boards that the company has bought. \nMore specifically, each circuit design consists of a number of connection points with some connections between them such that the resulting graph is connected and does not have any cycles (i.e., the graph is a tree).\nYou are free to place the connection points anywhere on the circuit board and solder the connections between them so that no two connections intersect (except at the connection points). The boards you ordered are fairly large, so there is no danger of running out of space. You can solder so precisely that connections and connection points can be considered infinitesimal.\nThis would all be very easy, however your boss persists that each connection needs to be a straight line of length exactly $1\\text { mm}$ (this is, so he says, to make sure the electrons do not have to travel around corners, which would be detrimental to the efficiency of the design).\nYou soon realise that battling with him will be unsuccessful. Your quickest way out of this is to etch a new design according to his specifications.\n-----Input-----\nThe input consists of:\n - One line with one integer $n$ ($2 \\le n \\le 1000$), the number of connection points. The points are numbered from $1$ to $n$.\n - $n-1$ lines, each with two integers $a$ and $b$ ($1 \\le a,b \\le n$), describing a connection between $a$ and $b$.\nIt is guaranteed that these edges describe a valid tree.\n-----Output-----\nOutput $n$ lines, the $i$th of which contains two real numbers $x_ i,y_ i$, the coordinates of point $i$. To make the production feasible, the following restrictions apply:\n - The distance between each pair of points should be at least $10^{-4}$.\n - The length of each edge should be $1$, up to an absolute error of at most $10^{-6}$.\n - Edges that are not incident to the same vertex should be at least a distance $10^{-6}$ apart.\n - The coordinates may not exceed an absolute value of $3000$.\nIf there are multiple valid solutions, you may output any one of them.\n-----Examples-----\nSample Input:\n5\n1 2\n1 3\n1 4\n1 5\nSample Output:\n0.0000000 0.0000000\n1.0000000 0.0000000\n-1.0000000 0.0000000\n0.0000000 1.0000000\n0.0000000 -1.0000000\n\ndef",
      "answer": "def solution(n, edges):\n    answer = []\n    for i in range(n):\n        answer.append([])\n        for j in range(n):\n            if i!= j:\n                answer[i].append(abs(edges[i][0] - edges[j][0]))\n                answer[j].append(abs(edges[i][1] - edges[j][1]))\n    return answer\n\n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3408,
      "prompt": "Complete the Python function given the prompt below:\nLittle Matej is solving an OOP (Object-oriented programming) laboratory exercise and he\u2019s having trouble with solving one subtask.\nHe is given a set that contains $N$ words. He is also given $Q$ queries where each query is one pattern. A pattern consists of a single character \u201c*\u201d and lowercase letters of the English alphabet. For example, \u201c*\u201d, \u201ckul*to\u201d, \u201cana*\u201d.\nA pattern is said to cover a word if such an array of letters (which can be empty) exists that, when replacing the character \u201c*\u201d, the pattern and the word become completely identical. It is necessary to output how many words each pattern covers.\n-----Input-----\nThe first line of input contains two integers $N$ and $Q$ ($1 \\leq N, Q \\leq 100000$). Each of the following $N$ lines contains a word that consists of lowercase letters of the English alphabet. Each of the following $Q$ lines contains a pattern for which you need to output how many words from the first set it covers. The total number of characters will be less than $4000000$.\n-----Output-----\nOutput $Q$ lines, the $k$-th line containing the number of words that the $k$-th pattern covers.\n-----Examples-----\nSample Input:\n3 3\naaa\nabc\naba\na*a\naaa*\n*aaa\nSample Output:\n2\n1\n1\n\ndef",
      "answer": "def solve(N,Q):\n    if N == 1:\n        return Q\n    else:\n        return solve(N-1,Q) + solve(N-1,Q)\n\n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3409,
      "prompt": "Complete the Python function given the prompt below:\nRemember the busy boards for toddlers that have an array of holes into which to hammer pegs of various shapes? There\u2019s a new, electronic version. The board consists of a 2D grid of pegs. Each peg on the board can be either up or down, but not both simultaneously. You can pick any peg that is currently up, and \u201chammer\u201d it down. This will push that peg down, and also raise all of the other pegs in its row, and its column, regardless of their current state. You cannot \u201chammer\u201d a peg that is down (well, maybe you can, but it will have no effect). Those poor kids will never get all the pegs down at one time!\nThis example shows what happens when the top right peg is \u201chammered.\u201d ($\\circ =$ up, $\\bullet =$ down)\nA substitute teacher wants to challenge her class. She uses the \u201cTeacher Mode\u201d to set up the board in a particular configuration, and then asks her students to see if they can get the board to a second configuration by hammering some (perhaps none) of the pegs.\nThat may be too tough of a problem for toddlers, but maybe you can handle it.\n-----Input-----\nEach test case will begin with a line with two space-separated integers $r$ and $c$ ($1\\! \\le \\! r,c\\! \\le \\! 1000$), which are the dimensions of the board.\nEach of the next $r$ lines will have exactly $c$ characters, consisting only of capital \u2018O\u2019 (representing a peg that is up), capital \u2018X\u2019 (representing a peg that is down), and no spaces or other characters. This is the starting configuration.\nFollowing this, each of the next $r$ lines will have exactly $c$ characters, consisting only of capital \u2018O\u2019 (representing a peg that is up), capital \u2018X\u2019 (representing a peg that is down), and no spaces or other characters. This is the target configuration.\n-----Output-----\nOutput a single integer, $1$ if it is possible to reach the target configuration from the starting configuration, and $0$ if it is impossible.\n-----Examples-----\nSample Input:\n4 2\nXO\nOX\nXO\nOX\nOX\nOO\nXO\nOO\nSample Output:\n1\n\ndef",
      "answer": "def hammer(r,c):\n    if r==1 and c==1:\n        return 1\n    elif r==1 and c==2:\n        return 0\n    elif r==1 and c==3:\n        return 0\n    elif r==1 and c==4:\n        return 0\n    elif r==1 and c==5:\n        return 0\n    elif r==1 and c==6:\n        return 0\n    elif r==1 and c==7:\n        return 0\n    elif r==1 and c==8:\n        return 0\n    elif r==1 and c==9:\n        return 0\n    elif r==1 and c==10:\n        return 0\n    elif r==1 and c==11:\n        return 0\n    elif r==1 and c==12:\n        return 0\n    elif r==1 and c==13:\n        return 0\n    elif r==1 and c==14:\n        return 0\n    elif r==1 and c==15:\n        return 0\n    elif r==1 and c==16:\n        return 0\n    elif r==1 and c==17:\n        return 0\n    elif r==1 and c==18:\n        return 0\n    elif r==1 and c==19:\n        return 0\n    elif r==1 and c==20:\n        return 0\n    elif r==1 and c==21:\n        return 0\n    elif r==1 and c==22:\n        return 0\n    elif r==1 and c==23:\n        return 0\n    elif r==1 and c==24:\n        return 0\n    elif r==1 and c==25:\n        return 0\n    elif r==1 and c==26:\n        return 0\n    elif r==1 and c==27:\n        return 0\n    elif r==1 and c==28:\n        return 0\n    elif r==1 and c==29:\n        return 0\n    elif r==1 and c==30:\n        return 0\n    elif r==1 and c==31:\n        return 0\n    elif r==1 and c==32:\n        return 0\n    elif r==1 and c==33:\n        return 0\n    elif r==1 and c==34:\n        return 0\n    elif r==1 and c==35:\n        return 0\n    elif r==1 and c==36:\n        return 0\n    elif r==1 and c==37:\n        return 0\n    elif r==1 and c==38:\n        return 0\n    elif r==1 and c==39:\n        return 0\n    elif r==1 and c==40:\n        return 0\n    elif r==1 and c==41:\n        return 0\n    elif r==1 and c==42:\n        return 0\n    elif r==1 and c==43:\n        return 0\n    elif r==1 and c==44:\n        return 0\n    elif r==1 and c==45:\n        return 0\n    elif r==1 and c==46:\n        return 0\n    elif r==1 and c==47:\n        return 0\n    elif r==1 and c==48:\n        return 0\n    elif r==1 and c==49:\n        return 0\n    elif r==1 and c==50:\n        return 0\n    elif r==1 and c==51:\n        return 0\n    elif r==1 and c==52:\n        return 0\n    elif r==1 and c==53:\n        return 0\n    elif r==1 and c==54:\n        return 0\n    elif r==1 and c==55:\n        return 0\n    elif r==1 and c==56:\n        return 0\n    elif r==1 and c==57:\n        return 0\n    elif r==1 and c==58:\n        return 0\n    elif r==1 and c==59:\n        return 0\n    elif r==1 and c==60:\n        return 0\n    elif r==1 and c==61:\n        return 0\n    elif r==1 and c==62:\n        return 0\n    elif r==1 and c==63:\n        return 0\n    elif r==1 and c==64",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3410,
      "prompt": "Complete the Python function given the prompt below:\nI don\u2019t know how you feel about your school time, but I become maudlin when I remember those days. One of our teachers told us at the final year that among all the educational institutions in life one misses his/her school days the most. And yes, I miss those days a lot.\nLet me tell you that we had a grid board in our school and it was not as banal as it looks in the picture. The board was colorful and we also had different color chalks to use on it. Can you imagine how exciting it was for me when I first saw this board? In class break we used to draw on this board and play different games, few of them I can recall.\nOne of them was like this\u2014firstly two players will mark some grid points. Then they will toss deciding who plays first. At each turn a player marks four points as $A$, $B$, $C$ and $D$. Then join $(A, B)$, $(B, C)$, $(C, D)$ and $(D, A)$ to form a quadrilateral. Twice of the area of that quadrilateral is added to his score and the turn changes. (In case, if you are wondering why twice\u2014it is just to ensure that the score is always integer). A player can not draw a quadrilateral if it was drawn before. However, you can use previously used points. For example, suppose there are $5$ points on the grid, $P$, $Q$, $R$, $S$ and $T$. First player can choose, $(A, B, C, D) = (P, Q, R, S)$, but then the second player can not choose $(A, B, C, D) = (R, S, P, Q)$ because both of them depict the same quadrilateral. If both of the players play optimally to maximize their own score I wonder what could be the sum of their scores.\nSo your task is to construe this game. You are given coordinates of $N$ distinct points, if two players play the above mentioned game optimally then what is the sum of their scores?\n-----Input-----\nThe first line contains a positive integer $N$ ($N \\leq 700$). Hence follows $N$ coordinates of the points $(x, y)$. In case you don\u2019t know, I should say\u2014I am not from your time, I was brought here by a few scientists from future. And in my time we use huge boards so the absolute value of the coordinates can be as large as $10^6$. Just to ensure that no one can draw a degenerate quadrilateral, no three points will be collinear.\n-----Output-----\nOutput the sum of the scores. Since this score can be huge just print the answer modulo $1000003$.\n-----Examples-----\nSample Input:\n4\n2 0\n0 2\n-2 0\n0 -2\nSample Output:\n16\n\ndef",
      "answer": "def board(n):\n    board = [[0 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        for j in range(n):\n            board[i][j] = int(input())\n    return board\n\n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3411,
      "prompt": "Complete the Python function given the prompt below:\nNick is a bird watcher and often visits the forum \u201cCrowFinders\u201d to discuss his hobby with like-minded people. CrowFinders has a voting system where users can upvote or downvote comments, which increases or decreases their score by $1$. This means that each comment can end up with any integer score (including negative scores). Once when Nick was browsing a heated discussion about the classification of jackdaws as crows, he found something very pleasing: a chain of comments that alternated between positive and negative scores. But a few days later, he found that the comment chain was no longer alternating. Now Nick wants to make it alternating again. \nA comment chain is alternating if the scores $s_1, s_2, \\ldots, s_ n$ of the comments all are non-zero, and every pair of adjacent scores $s_ i$, $s_{i+1}$ have opposite signs. In particular, a single comment with a non-zero score or even a comment chain without any comment is an alternating comment chain.\nThere are two operations Nick can do to make the comment chain alternating:\n - Create a fake account and upvote/downvote some of the comments. This increases/decreases their respective scores by $1$. Each fake account can only upvote/downvote each comment at most once, but it can vote on any subset of the comments. It takes $c$ seconds to create an account and use it to vote (regardless of how many comments are upvoted/downvoted).\n - Report one specific comment to remove it from the chain. Thinking of convincing reasons for the report takes $r$ seconds. (Nick is an excellent arguer, so once the report is filed, the comment is guaranteed to be removed.)\nNick can apply these operations in any order, any number of times. How fast can he make the comment chain alternating?\nFor example, consider Sample Input 1 below, where the scores in the comment chain are $8, 8, 2, -2$, and it takes Nick $10$ seconds to create an account and $50$ seconds to file a report for one comment. In this case it is optimal to first create $3$ fake accounts and use them to upvote the fourth comment and downvote the third, followed by reporting the first comment. This results in the scores $8, -1, 1$, which is an alternating chain. The time used for this is $80$ seconds.\n-----Input-----\nThe input consists of:\n - One line with three integers $n$, $c$, and $r$ ($1 \\leq n \\leq 5\\cdot 10^5$, $1 \\leq c,r \\leq 10^9$), the number of comments in the chain, the time it takes to create a fake account and the time it takes to report one comment respectively.\n - One line with $n$ integers $s_1, \\ldots, s_ n$ ($-10^9 \\leq s_ i \\leq 10^9$ for all $i$), the current score of each comment in the chain.\n-----Output-----\nOutput the smallest time to make the comment chain alternating by applying the operations above.\n-----Examples-----\nSample Input:\n4 10 50\n8 8 2 -2\nSample Output:\n80\n\ndef",
      "answer": "def alternating_chain(n, c, r):\n    if n == 0:\n        return 0\n    if n == 1:\n        return c\n    if n == 2:\n        return -1\n    if n == 3:\n        return 1\n    if n == 4:\n        return -1\n    if n == 5:\n        return 1\n    if n == 6:\n        return -1\n    if n == 7:\n        return 1\n    if n == 8:\n        return -1\n    if n == 9:\n        return 1\n    if n == 10:\n        return -1\n    if n == 11:\n        return 1\n    if n == 12:\n        return -1\n    if n == 13:\n        return 1\n    if n == 14:\n        return -1\n    if n == 15:\n        return 1\n    if n == 16:\n        return -1\n    if n == 17:\n        return 1\n    if n == 18:\n        return -1\n    if n == 19:\n        return 1\n    if n == 20:\n        return -1\n    if n == 21:\n        return 1\n    if n == 22:\n        return -1\n    if n == 23:\n        return 1\n    if n == 24:\n        return -1\n    if n == 25:\n        return 1\n    if n == 26:\n        return -1\n    if n == 27:\n        return 1\n    if n == 28:\n        return -1\n    if n == 29:\n        return 1\n    if n == 30:\n        return -1\n    if n == 31:\n        return 1\n    if n == 32:\n        return -1\n    if n == 33:\n        return 1\n    if n == 34:\n        return -1\n    if n == 35:\n        return 1\n    if n == 36:\n        return -1\n    if n == 37:\n        return 1\n    if n == 38:\n        return -1\n    if n == 39:\n        return 1\n    if n == 40:\n        return -1\n    if n == 41:\n        return 1\n    if n == 42:\n        return -1\n    if n == 43:\n        return 1\n    if n == 44:\n        return -1\n    if n == 45:\n        return 1\n    if n == 46:\n        return -1\n    if n == 47:\n        return 1\n    if n == 48:\n        return -1\n    if n == 49:\n        return 1\n    if n == 50:\n        return -1\n    if n == 51:\n        return 1\n    if n == 52:\n        return -1\n    if n == 53:\n        return 1\n    if n == 54:\n        return -1\n    if n == 55:\n        return 1\n    if n == 56:\n        return -1\n    if n == 57:\n        return 1\n    if n == 58:\n        return -1\n    if n == 59:\n        return 1\n    if n == 60:\n        return -1\n    if n == 61:\n        return 1\n    if n == 62:\n        return -1\n    if n == 63:\n        return 1\n    if n == 64:\n        return -1\n    if n == 65:\n        return 1\n    if n == 66:\n        return -1\n    if n == 67:\n        return 1\n    if n == 68:\n        return -1\n    if n == 69:\n        return 1\n    if n == 70:\n        return -1\n    if n == 71:\n        return 1\n    if n == 72:\n        return -1\n    if n == 73:\n        return 1\n    if n == 74:\n        return -1\n    if n == 75:\n        return 1\n    if n == 76:\n        return -1\n    if n == 77:\n        return 1\n    if n == 78:\n        return -1\n    if n == 79:\n        return 1\n    if n == 80:\n        return -1\n    if n == 81:\n        return 1\n    if n == 82:\n        return -1\n    if n == 83:\n        return 1\n    if n == 84:\n        return -1\n    if n == 85:\n        return 1\n    if n == 86:\n        return -1\n    if n == 87:\n        return 1\n    if",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3412,
      "prompt": "Complete the Python function given the prompt below:\nGladstone Gander is walking through Duckburg and needs to get to his date with Daisy Duck as soon as possible. If he doesn\u2019t get there in time, Donald might show up and take his place instead. \nDuckburg has recently started providing a very eco-friendly way of public transport: bikes. At many bike stations throughout the city, one can pick up a free bike, ride it to another bike station, and drop it there. This gives Gladstone two ways of transportion: on foot or by bike. Biking is faster, of course, but he must pick up and leave the bikes at the designated stations. Gladstone can walk or bike between any two points in a straight line.\nGladstone possesses a map of the (rectangular) center of Duckburg. His current position is on this map and so is the meeting point with Daisy. The map also contains the locations of all bike stations within the boundaries of the map.\nThere can be way more bike stations though, that are not within the boundaries of the map. Considering his luck, you can assume that the moment Gladstone walks (or bikes) off the map, he encounters a bike station if that suits him well. The bike stations not on the map can be located anywhere outside the map, they do not have to lie on integer coordinates.\nThat leaves Gladstone with the task of figuring out which route to take. Can you help him out? Given the map and his infinite amount of luck, what is the fastest time to his date with Daisy?\n-----Input-----\nThe input consists of:\n - one line with two integers $v_{\\text {walk}}$ and $v_{\\text {bike}}$ ($1\\le v_{\\text {walk}}< v_{\\text {bike}} \\le 1000$), the speeds of walking and of biking;\n - one line with four integers $x_1, y_1, x_2$ and $y_2$ ($-10^6\\le x_1< x_2\\le 10^6$; $-10^6\\le y_1< y_2\\le 10^6$), the bounding coordinates of the map of the center of Duckburg;\n - one line with two integers $x_{\\text {G}}$ and $y_{\\text {G}}$, Gladstone\u2019s position;\n - one line with two integers $x_{\\text {D}}$ and $y_{\\text {D}}$, Daisy\u2019s position;\n - one line with one integer $n$ ($0\\le n\\le 1000$), the number of known bike stations;\n - $n$ lines with two integers $x_{\\text {station}}$ and $y_{\\text {station}}$ each, the coordinates of the known bike stations.\nAll coordinates are on the map of the center, i.e., $x_1\\le x\\le x_2$ and $y_1\\le y\\le y_2$.\n-----Output-----\nOutput one line with the shortest possible time for Gladstone to get to Daisy. Your answer should have an absolute or relative error of at most $10^{-6}$.\n-----Examples-----\nSample Input:\n1 8\n0 0 10 10\n5 1\n5 9\n3\n5 8\n2 2\n9 6\nSample Output:\n3.000000000\n\ndef",
      "answer": "def get_distance(x1, y1, x2, y2):\n    return abs(x1 - x2) + abs(y1 - y2)\n\n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3413,
      "prompt": "Complete the Python function given the prompt below:\nYou are a member of the Senate of an ancient empire governed by a mighty dictator. You have joined a bipartisan secret committee of the Senate that is plotting to overthrow the dictator.\nIn order for the plot to succeed, it is crucial that all the states in the empire ultimately support the plan\u2013and to accomplish this, the governors of all the states need to be members of the same Party.\nRight now, each state governor is a member of either the Orange Party or the Purple Party. Since you are confident that you can get either party to back the plot, it does not matter which party ultimately prevails.\nThe secret committee has studied the political situation and determined that two governors will influence each other if they are friends with each other and members of the same Party. To get all the state governors on board, each month a lobbyist will do whatever it takes to get one governor to switch parties. When this happens, all the friends of the governor who are members of the same Party will also switch affiliation, as will the friends of the friends within the party, and so on. To avoid suspicion, the secret committee will alternate Orange/Purple lobbyists each month. They may start the ball rolling with either party in the first month.\nThe secret committee also knows which governors are friends with each other, that each governor is friends with at least one other governor, and that there are no isolated groups that are only friends with each other.\nYour task is to determine the minimum number of months required for all the state governors to be members of the same party. Once this occurs, the next steps in the plot can take place.\n-----Input-----\nThere will be a single test case in the input. This test case will begin with a line with two integers, $n$ ($1 \\le n \\le 100$) and $m$ ($n-1 \\le m \\le n(n-1)/2$), where $n$ is the number of governors, and $m$ is the number of known friendships. On the next line will be $n$ integers, either $0$ or $1$, indicating the current party affiliation of the governors, in order ($0=\\text {ORANGE}, 1=\\text {PURPLE}$). On each of the following $m$ lines will be two integers, $a$ and $b$ ($1 \\le a < b \\le n$) indicating that governor $a$ and governor $b$ are friends. As in life, friendships go both ways: if $a$ is a friend of $b$, then $b$ is also a friend of $a$. All $m$ $(a,b)$ pairs will be unique.\n-----Output-----\nOutput a single integer, indicating the minimum number of months necessary for every governor to belong to the same party.\n-----Examples-----\nSample Input:\n4 3\n0 1 0 0\n1 2\n2 3\n2 4\nSample Output:\n1\n\ndef",
      "answer": "def get_min_months(n, m):\n    if n == 0:\n        return 0\n    if m == 0:\n        return 1\n    if n == 1:\n        return 2\n    if m == 1:\n        return 3\n    if n == 2:\n        return 4\n    if m == 2:\n        return 5\n    if n == 3:\n        return 6\n    if m == 3:\n        return 7\n    if n == 4:\n        return 8\n    if m == 4:\n        return 9\n    if n == 5:\n        return 10\n    if m == 5:\n        return 11\n    if n == 6:\n        return 12\n    if m == 6:\n        return 13\n    if n == 7:\n        return 14\n    if m == 7:\n        return 15\n    if n == 8:\n        return 16\n    if m == 8:\n        return 17\n    if n == 9:\n        return 18\n    if m == 9:\n        return 19\n    if n == 10:\n        return 20\n    if m == 10:\n        return 21\n    if n == 11:\n        return 22\n    if m == 11:\n        return 23\n    if n == 12:\n        return 24\n    if m == 12:\n        return 25\n    if n == 13:\n        return 26\n    if m == 13:\n        return 27\n    if n == 14:\n        return 28\n    if m == 14:\n        return 29\n    if n == 15:\n        return 30\n    if m == 15:\n        return 31\n    if n == 16:\n        return 32\n    if m == 16:\n        return 33\n    if n == 17:\n        return 34\n    if m == 17:\n        return 35\n    if n == 18:\n        return 36\n    if m == 18:\n        return 37\n    if n == 19:\n        return 38\n    if m == 19:\n        return 39\n    if n == 20:\n        return 40\n    if m == 20:\n        return 41\n    if n == 21:\n        return 42\n    if m == 21:\n        return 43\n    if n == 22:\n        return 44\n    if m == 22:\n        return 45\n    if n == 23:\n        return 46\n    if m == 23:\n        return 47\n    if n == 24:\n        return 48\n    if m == 24:\n        return 49\n    if n == 25:\n        return 50\n    if m == 25:\n        return 51\n    if n == 26:\n        return 52\n    if m == 26:\n        return 53\n    if n == 27:\n        return 54\n    if m == 27:\n        return 55\n    if n == 28:\n        return 56\n    if m == 28:\n        return 57\n    if n == 29:\n        return 58\n    if m == 29:\n        return 59\n    if n == 30:\n        return 60\n    if m == 30:\n        return 61\n    if n == 31:\n        return 62\n    if m == 31:\n        return 63\n    if n == 32:\n        return 64\n    if m == 32:\n        return 65\n    if n == 33:\n        return 66\n    if m == 33:\n        return 67\n    if n == 34:\n        return 68\n    if m == 34:\n        return 69\n    if n == 35:\n        return 70\n    if m == 35:\n        return 71\n    if n == 36:\n        return 72\n    if m == 36:\n        return 73\n    if n == 37:\n        return 74\n    if m == 37:\n        return 75\n    if n == 38:\n        return 76\n    if m == 38:\n        return 77\n    if n == 39:\n        return 78\n    if m == 39:\n        return 79\n    if n == 40:\n        return 80\n    if m == 40:\n        return 81\n    if n == 41:\n        return 82\n    if m == 41:\n        return 83\n    if n == 42:\n        return 84\n    if m == 42:\n        return 85\n    if n == 43:\n        return 86\n    if m == 43:\n        return 87\n    if n == 44:\n        return 88\n    if m == 44:\n        return 89\n    if n == 45:\n        return 90\n    if m == 45:\n        return 91\n    ",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3414,
      "prompt": "Complete the Python function given the prompt below:\nAfter The Stig\u2019s identity was revealed, the TV show Top Gear is in dire need of a new, tame racing driver to replace him. And of course you have been asked to take the job. However, you are not very fond of driving quickly, and especially not around the twisting and turning tracks they use in the show. To help you alleviate this problem, one of your algorithmic friends has suggested that you should calculate the roundtrip with the least possible amount of turning required.\nThe driving track consists of unique, straight lines, and there are always exactly $2$ or $4$ roads heading out from each node. A roundtrip must be an Eulerian circuit, i.e. it must traverse each edge of the graph exactly once, and end up where it started. (Such a circuit is guaranteed to exist in the input graphs.) Thus the total amount of turning is the sum of the turning required at each node, where continuing in a straight line means a turn of $0$. The roads on the track can be driven in any direction.\n-----Input-----\nOne line with $3 \\leq N \\leq 10000$ \u2013 the number of nodes \u2013 and $N \\leq M \\leq 2N$ \u2013 the number of edges.\n$N$ lines with the integer $x$ and $y$ coordinates of each node, in order. $0 \\leq x, y \\leq 10000$. The nodes have unique coordinate pairs.\n$M$ lines with two space separated integers $i$ and $j$, denoting an edge between nodes $i$ and $j$. The nodes are $0$-indexed.\n-----Output-----\nThe least amount of turning you must do to complete an Eulerian circuit, in radians. The answer must be correct within an absolute or relative error of $10^{-6}$.\n-----Examples-----\nSample Input:\n3 3\n0 0\n0 1\n1 0\n0 1\n0 2\n1 2\nSample Output:\n6.283185\n\ndef",
      "answer": "def eulerianCircuit(n,m):\n    # Write your code here\n    # Create a dictionary to store the edges\n    edges = {}\n    # Create a dictionary to store the nodes\n    nodes = {}\n    # Create a dictionary to store the edges\n    for i in range(n):\n        edges[i] = []\n    # Create a dictionary to store the nodes\n    for i in range(m):\n        nodes[i] = []\n    # Create a dictionary to store the edges\n    for i in range(n):\n        edges[i].append(i)\n    # Create a dictionary to store the nodes\n    for i in range(m):\n        nodes[i].append(i)\n    # Create a dictionary to store the edges\n    for i in range(n):\n        edges[i].append(i)\n    # Create a dictionary to store the nodes\n    for i in range(m):\n        nodes[i].append(i)\n    # Create a dictionary to store the edges\n    for i in range(n):\n        edges[i].append(i)\n    # Create a dictionary to store the nodes\n    for i in range(m):\n        nodes[i].append(i)\n    # Create a dictionary to store the edges\n    for i in range(n):\n        edges[i].append(i)\n    # Create a dictionary to store the nodes\n    for i in range(m):\n        nodes[i].append(i)\n    # Create a dictionary to store the edges\n    for i in range(n):\n        edges[i].append(i)\n    # Create a dictionary to store the nodes\n    for i in range(m):\n        nodes[i].append(i)\n    # Create a dictionary to store the edges\n    for i in range(n):\n        edges[i].append(i)\n    # Create a dictionary to store the nodes\n    for i in range(m):\n        nodes[i].append(i)\n    # Create a dictionary to store the edges\n    for i in range(n):\n        edges[i].append(i)\n    # Create a dictionary to store the nodes\n    for i in range(m):\n        nodes[i].append(i)\n    # Create a dictionary to store the edges\n    for i in range(n):\n        edges[i].append(i)\n    # Create a dictionary to store the nodes\n    for i in range(m):\n        nodes[i].append(i)\n    # Create a dictionary to store the edges\n    for i in range(n):\n        edges[i].append(i)\n    # Create a dictionary to store the nodes\n    for i in range(m):\n        nodes[i].append(i)\n    # Create a dictionary to store the edges\n    for i in range(n):\n        edges[i].append(i)\n    # Create a dictionary to store the nodes\n    for i in range(m):\n        nodes[i].append(i)\n    # Create a dictionary to store the edges\n    for i in range(n):\n        edges[i].append(i)\n    # Create a dictionary to store the nodes\n    for i in range(m):\n        nodes[i].append(i)\n    # Create a dictionary to store the edges\n    for i in range(n):\n        edges[i].append(i)\n    # Create a dictionary to store the nodes\n    for i in range(m):\n        nodes[i].append(i)\n    # Create a dictionary to store the edges\n    for i in range(n):\n        edges[i].append(i)\n    # Create a dictionary to store the nodes\n    for i in range(m):\n        nodes[i].append(i)\n    # Create a dictionary to store the edges\n    for i in range(n):\n        edges[i].append(i)\n    # Create a dictionary to store the nodes\n    for i in range(m):\n        nodes[i].append(i)\n    # Create a dictionary to store the edges\n    for i in range(n):\n        edges[i].append(i)\n    # Create a dictionary to store the nodes\n    for i in range(m):\n        nodes[i].append(i)\n    # Create a dictionary to store the edges\n    for i in range(n):",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3415,
      "prompt": "Complete the Python function given the prompt below:\nA complete binary tree is made of nodes arranged in a hierarchic structure. One of the nodes is the root node, said to be at level 0. The root node has two child nodes, which are at level 1. Each of those has two children at level 2 etc.\nIn general, a complete binary tree with $N$ levels has $2^N - 1$ nodes, each of which has two child nodes, except those at level $N - 1$.\nA number can be written into each node. Write the numbers $1$ to $2^N - 1$ into a complete binary tree with $N$ levels so that, for each node at level $D$, the absolute value of the difference of the sum of all numbers in the left subtree and the sum of all numbers in the right subtree is $2^D$.\nFor example, the sum of the left subtree of the root node must differ from the sum of the right subtree by 1. The sums of the left and right subtrees of a node at level 1 must differ by 2. Each number must be used exactly once. The solution need not be unique.\n-----Input-----\nThe first and only line of input contains the integer $N (1 \\le N \\le 15)$, the number of levels in the tree.\n-----Output-----\nOutput the $2^N - 1$ separated by spaces on a single line, the binary tree in the preorder traversal. The preorder traversal first outputs the number in the root node, then outputs the left subtree (again in the preorder traversal), then the right subtree.\n-----Examples-----\nSample Input:\n2\nSample Output:\n1 2 3\n\ndef",
      "answer": "def completeTree(n):\n    if n == 1:\n        return [1]\n    else:\n        return [1, 1] + completeTree(n-1) + [1]\n\n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3416,
      "prompt": "Complete the Python function given the prompt below:\nBeing a traveling salesman is tough work. Per is one such salesman and would like to find an efficient way to visit all the cities in a foreign country exactly once.\nPer defines efficiency in a peculiar way as Per hates flying on planes. Even worse, he absolutely refuses to use automobiles. Per\u2019s favorite mode of transportation is trains. He will gladly take trains for as long as possible.\nThe train system in this country is very peculiar, and very limited. Train lines are all one-way, and once anyone takes a train out of a city, there is no sequence of train lines that return to that city. This is because the country is trying to make money off of the more costly planes. In this country, every city has exactly one airport, so you can travel by plane from any city to any other city.\nPer doesn\u2019t just want to know the minimum number of flights he needs. He also wants to know in which cities he can visit the airport during some trip with fewest flights. Per likes airport restaurants, you see, and would like to know which restaurants he can visit, so he can choose his route to visit his favorites. He can visit the airport if he flies in or out of the city. Note that Per can start in any city.\nConsider this country with four cities, with the arrows representing one-way train routes:\nThere are several possible trips Per could take, but he\u2019s going to need to fly at least once. Here are some (but not all) possible routes with fewest flights, with $\\rightarrow $ indicating a train trip and $\\Rightarrow $ indicating a flight:$1 \\rightarrow 2 \\rightarrow 4 \\Rightarrow 3$\n$2 \\rightarrow 4 \\Rightarrow 1 \\rightarrow 3$\n$1 \\rightarrow 3 \\rightarrow 4 \\Rightarrow 2$\nIn this example, every airport is visited on at least one of the routes. Per has the option to choose his route so he can visit any airport restaurant he wishes.\n-----Input-----\nEach test case will begin with a line with two space-separated integers $n$ ($1\\! \\le \\! n\\! \\le \\! 10^5$) and $m$ ($0\\! \\le \\! m\\! \\le \\! 10^5$), where $n$ is the number of cities and $m$ is the number of train lines. The cities are numbered $1..n$.\nEach of the next $m$ lines contains two space separated integers $a$ and $b$ ($1\\! \\le \\! a,b\\! \\le \\! n, a\\! \\neq \\! b$), which indicates that there is a train line from city $a$ to city $b$ (but not back). All train lines will be distinct.\n-----Output-----\nProduce exactly two lines of output.\nOn the first line, output a single integer, which is the minimum number of flights Per must take to visit all of the cities.\nOn the second line, output a list of space-separated integers, which are the cities with airports he can visit. If he can visit an airport on any one of the routes with the minimum number of flights, it should be listed. Output these numbers in increasing order. If no airports are to be visited, output a blank line.\n-----Examples-----\nSample Input:\n4 4\n1 2\n1 3\n2 4\n3 4\nSample Output:\n1\n1 2 3 4\n\ndef",
      "answer": "def find_min_number_of_flights(n, m):\n    if n == 0 or m == 0:\n        return 0\n    if n == 1:\n        return 1\n    if m == 1:\n        return 1\n    if n == 2:\n        return 2\n    if m == 2:\n        return 2\n    if n == 3:\n        return 3\n    if m == 3:\n        return 3\n    if n == 4:\n        return 4\n    if m == 4:\n        return 4\n    if n == 5:\n        return 5\n    if m == 5:\n        return 5\n    if n == 6:\n        return 6\n    if m == 6:\n        return 6\n    if n == 7:\n        return 7\n    if m == 7:\n        return 7\n    if n == 8:\n        return 8\n    if m == 8:\n        return 8\n    if n == 9:\n        return 9\n    if m == 9:\n        return 9\n    if n == 10:\n        return 10\n    if m == 10:\n        return 10\n    if n == 11:\n        return 11\n    if m == 11:\n        return 11\n    if n == 12:\n        return 12\n    if m == 12:\n        return 12\n    if n == 13:\n        return 13\n    if m == 13:\n        return 13\n    if n == 14:\n        return 14\n    if m == 14:\n        return 14\n    if n == 15:\n        return 15\n    if m == 15:\n        return 15\n    if n == 16:\n        return 16\n    if m == 16:\n        return 16\n    if n == 17:\n        return 17\n    if m == 17:\n        return 17\n    if n == 18:\n        return 18\n    if m == 18:\n        return 18\n    if n == 19:\n        return 19\n    if m == 19:\n        return 19\n    if n == 20:\n        return 20\n    if m == 20:\n        return 20\n    if n == 21:\n        return 21\n    if m == 21:\n        return 21\n    if n == 22:\n        return 22\n    if m == 22:\n        return 22\n    if n == 23:\n        return 23\n    if m == 23:\n        return 23\n    if n == 24:\n        return 24\n    if m == 24:\n        return 24\n    if n == 25:\n        return 25\n    if m == 25:\n        return 25\n    if n == 26:\n        return 26\n    if m == 26:\n        return 26\n    if n == 27:\n        return 27\n    if m == 27:\n        return 27\n    if n == 28:\n        return 28\n    if m == 28:\n        return 28\n    if n == 29:\n        return 29\n    if m == 29:\n        return 29\n    if n == 30:\n        return 30\n    if m == 30:\n        return 30\n    if n == 31:\n        return 31\n    if m == 31:\n        return 31\n    if n == 32:\n        return 32\n    if m == 32:\n        return 32\n    if n == 33:\n        return 33\n    if m == 33:\n        return 33\n    if n == 34:\n        return 34\n    if m == 34:\n        return 34\n    if n == 35:\n        return 35\n    if m == 35:\n        return 35\n    if n == 36:\n        return 36\n    if m == 36:\n        return 36\n    if n == 37:\n        return 37\n    if m == 37:\n        return 37\n    if n == 38:\n        return 38\n    if m == 38:\n        return 38\n    if n == 39:\n        return 39\n    if m == 39:\n        return 39\n    if n == 40:\n        return 40\n    if m == 40:\n        return 40\n    if n == 41:\n        return 41\n    if m == 41:\n        return 41\n    if n == 42:\n        return 42\n    if m == 42:\n        return 42\n    if n == 43:\n        return 43\n    if m == 43:\n        return 43\n    if n == 44:\n        return 44\n    if m == 44:\n        return 44\n    if n == 45:\n        return 45\n    if m == 45:\n        return 45\n    if n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3417,
      "prompt": "Complete the Python function given the prompt below:\nFor an undirected, simple graph $G = (V, E)$ we call a subset $V\u2019 \\subseteq V$ an independent set if no two elements of $V\u2019$ are connected by an edge. An independent set of $G$ is called a maximum independent set if there is no independent set in $G$ with strictly more vertices. Given a specific kind of connected graph $G$, find the size of a maximum independent set of $G$.\n-----Input-----\n - The input starts with one line, containing integers $n$ ($1 \\leq n \\leq 100$), the number of vertices in the graph, and $m$ ($n-1 \\leq m \\leq n + 15$), the number of edges in the graph.\n - Then follow $m$ lines, each containing integers $a, b$ ($1 \\leq a, b \\leq n$) indicating that there is an edge between vertices $a$ and $b$.\nThe graph given by this input is guaranteed to be both simple and connected: there is at most one edge between each pair of vertices, there are no loops, and there is a path between each pair of vertices.\n-----Output-----\n - Output the number of vertices in a maximum independent set of the input graph.\n-----Examples-----\nSample Input:\n2 1\n1 2\nSample Output:\n1\n\ndef",
      "answer": "def max_independent_set(G):\n    # Write your code here.\n    # Create a set of vertices\n    vertices = set(G)\n    # Create a set of edges\n    edges = set(G.edges())\n    # Create a set of vertices\n    vertices = set(G)\n    # Create a set of edges\n    edges = set(G.edges())\n    # Create a set of vertices\n    vertices = set(G)\n    # Create a set of edges\n    edges = set(G.edges())\n    # Create a set of vertices\n    vertices = set(G)\n    # Create a set of edges\n    edges = set(G.edges())\n    # Create a set of vertices\n    vertices = set(G)\n    # Create a set of edges\n    edges = set(G.edges())\n    # Create a set of vertices\n    vertices = set(G)\n    # Create a set of edges\n    edges = set(G.edges())\n    # Create a set of vertices\n    vertices = set(G)\n    # Create a set of edges\n    edges = set(G.edges())\n    # Create a set of vertices\n    vertices = set(G)\n    # Create a set of edges\n    edges = set(G.edges())\n    # Create a set of vertices\n    vertices = set(G)\n    # Create a set of edges\n    edges = set(G.edges())\n    # Create a set of vertices\n    vertices = set(G)\n    # Create a set of edges\n    edges = set(G.edges())\n    # Create a set of vertices\n    vertices = set(G)\n    # Create a set of edges\n    edges = set(G.edges())\n    # Create a set of vertices\n    vertices = set(G)\n    # Create a set of edges\n    edges = set(G.edges())\n    # Create a set of vertices\n    vertices = set(G)\n    # Create a set of edges\n    edges = set(G.edges())\n    # Create a set of vertices\n    vertices = set(G)\n    # Create a set of edges\n    edges = set(G.edges())\n    # Create a set of vertices\n    vertices = set(G)\n    # Create a set of edges\n    edges = set(G.edges())\n    # Create a set of vertices\n    vertices = set(G)\n    # Create a set of edges\n    edges = set(G.edges())\n    # Create a set of vertices\n    vertices = set(G)\n    # Create a set of edges\n    edges = set(G.edges())\n    # Create a set of vertices\n    vertices = set(G)\n    # Create a set of edges\n    edges = set(G.edges())\n    # Create a set of vertices\n    vertices = set(G)\n    # Create a set of edges\n    edges = set(G.edges())\n    # Create a set of vertices\n    vertices = set(G)\n    # Create a set of edges\n    edges = set(G.edges())\n    # Create a set of vertices\n    vertices = set(G)\n    # Create a set of edges\n    edges = set(G.edges())\n    # Create a set of vertices\n    vertices = set(G)\n    # Create a set of edges\n    edges = set(G.edges())\n    # Create a set of vertices\n    vertices = set(G)\n    # Create a set of edges\n    edges = set(G.edges())\n    # Create a set of vertices\n    vertices = set(G)\n    # Create a set of edges\n    edges = set(G.edges())\n    # Create a set of vertices\n    vertices = set(G)\n    # Create a set of edges\n    edges = set(G.edges())\n    # Create a set of vertices\n    vertices = set(G)\n    # Create a set of edges\n    edges = set(G.edges())\n    # Create a set of vertices\n    vertices = set(G)\n    ",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3418,
      "prompt": "Complete the Python function given the prompt below:\nMr. Lucky has a store that sells numbers. These numbers have an interesting property: each number formed by its first $k$ digits is evenly divisible by $k$, for $k$ from $1$ to $n$, where $n$ is the number of digits in the number. The numbers do not have leading zeroes.\nMr. Unlucky wants to open a competing store. Price for lucky numbers is driven by demand and supply, and given by the formula\\[ \\mbox{price} = \\frac{\\mbox{demand}}{\\mbox{supply}} \\]\nwhile demand for numbers with $n$ digits is given by the formula\\[ \\mbox{demand} = \\mbox{citySize} \\cdot \\mbox{dayOfMonth} - n^e \\]\nwhere $e$ is the base of the natural logarithm. Supply for lucky numbers with $n$ digits is simply the number of lucky numbers with $n$ digits. Help Mr. Unlucky calculate the supply for $n$ digit lucky numbers.\n-----Input-----\nThe input is a single integer $n$.\n-----Output-----\nOutput the supply for $n$ digit lucky numbers.\n-----Limits-----\n - $2 \\leq n \\leq 1000$\n-----Examples-----\nSample Input:\n2\nSample Output:\n45\n\ndef",
      "answer": "def luckyNumbers(n):\n    return int(n/10)\n\n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3419,
      "prompt": "Complete the Python function given the prompt below:\nRookie Bunny is helping the motor vehicle department to renew licenses for its customers. She works at the ticket machine and gives tickets to customers to tell them at which counters they will be served. There are two counters providing service in the office today. The two counters will be open for at most $s_1$ and $s_2$ minutes respectively.\nThere are $n$ customers waiting in a line in front of the ticket machine. Every customer can be served at either counter. The $j$th customer needs $t_ j$ minutes at a counter. If neither counter has $t_ j$ minutes till its closing time, then the customer has to leave and come back tomorrow. Besides, all customers in the line behind the $j$th customer have to leave to respect the order of the line and avoid customer complaints.\nRookie Bunny may assign each customer in the line to either counter of her choice. She would like to maximize the number of customers that can be served today.\n-----Input-----\nThe first line has three positive integers $n$, $s_1$, and $s_2$ ($n \\leq 1000, s_1 \\cdot s_2 \\leq 10^{7}$). The second line has $n$ integers. The $j$th integer is $t_ j$ ($1 \\leq t_ j \\leq 10^6$).\n-----Output-----\nOutput the maximum number of customers that can be served today.\n-----Examples-----\nSample Input:\n5 20 20\n7 11 9 12 2\nSample Output:\n4\n\ndef",
      "answer": "def solution(n, s_1, s_2, t_j):\n    cnt = 0\n    for i in range(n):\n        if s_1 <= s_2 and s_1 <= t_j:\n            cnt += 1\n        if s_2 <= s_1 and s_2 <= t_j:\n            cnt += 1\n    return cnt\n\n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3420,
      "prompt": "Complete the Python function given the prompt below:\nA couple of computer science students have decided to start a book circle, in which they will be able to share the passion of their lives, namely reading. Finally, the first season of reading is coming to its end, and the students in the book circle are going to present their fantastic books to the rest of the computer science students. However, there is a problem. To attract audience to the presentation, one of the book circle members (without mentioning any names) has promised the audience that a book circle member will sing in between each two presentations. The person who made this promise doesn\u2019t know how to sing, so he or she must have been thinking that someone else in the group could do the singing. But in fact, no one in the group wants to sing. The book circle always sticks to its promises, which means there is some singing to do. However, they have also promised to present all of the books that they have read. Someone in the group has figured out that if they minimize the number of presentations \u2013 they will minimize the number of times they have to sing, since if a student has read several books, he or she can present a bunch of them in the same presentation. But how should this be carried out?\nYour task is to help the book circle calculate the minimum number of presentations needed such that all books that have been read will be presented. You will be given the number of boys in the group, and the number of girls in the group. You will also be given the book titles read by each student. Each book that was read was read by exactly one girl and one boy.\nStudents always present books alone, and they can present only the books that they have read.\n-----Input-----\nThe first line consists of two integers $1 \\le B,G \\le 1000$, the number of boys and girls respectively. Then follow $B$ lines, each starting with the name of the $i$:th boy. Then follows an integer $N_ i$, the number of books that the $i$:th boy has read. Then follow $N_ i$ book titles on the same line. Then follow $G$ lines, each starting with the name of the $i$:th girl. Then follows an integer $N_ i$, the number of books that the $i$-th girl has read. Then follow $N_ i$ book titles on the same line.\nThe book titles and student names consist solely of alphanumeric characters, and they don\u2019t have spaces in them. They both have between $1$ and $20$ characters. Also, no two students will share names.\n-----Output-----\nOutput should start with a single number $P$, the minimum number of presentations needed.\n-----Examples-----\nSample Input:\n2 2\nkenny 1 harrypotter1\ncharlie 1 lordoftherings\njenny 1 harrypotter1\nlaura 1 lordoftherings\nSample Output:\n2\n\ndef",
      "answer": "def book_circle(boys, girls, title):\n    boys = boys.split()\n    girls = girls.split()\n    title = title.split()\n    count = 0\n    for i in range(len(boys)):\n        for j in range(len(girls)):\n            if boys[i] == girls[j]:\n                count += 1\n    return count\n\n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3421,
      "prompt": "Complete the Python function given the prompt below:\nGoo is working in a well-known Slovak antivirus company which unfortunately cannot be named. In addition to antivirus software, they are developing a spam filter. Recently, Goo has made a few improvements to the filter and he wants to demonstrate his progress to his boss. As you can imagine, demonstrating low-level ideas of your implementation is not a good way to impress your boss, so Goo instead decided to make a presentation with plenty of graphs showing filtering results. The company has a huge database of e-mails and each e-mail is marked as a spam or ham (i.e.\u00a0not spam). These e-mails were all correctly marked by people \u2013 every time someone in the company receives an e-mail, he marks it as either spam or ham and adds it to the database.\nThe success of Goo\u2019s program can be measured in a simple way. Goo ran his program on all e-mails in the database. For each message he noted if his program correctly decided whether the message was spam or ham. The messages were processed in order from the oldest to the newest one. To impress the boss, Goo wants to select e-mails from a period of time and calculate the success rate only for this period. Of course, a period containing only one e-mail won\u2019t impress anyone, so Goo wants to choose a period which is long enough.\n-----Task-----\nYou are given a sequence of test results and a number $k$. Your task is to find a continuous subsequence of length at least $k$ which has the highest possible success rate among all such subsequences. The success rate of a subsequence is defined as the number of successfully classified e-mails divided by the length of the subsequence.\n-----Input description-----\nOn the first line there is an integer $k$ ($1\\le k \\le 100$) denoting the minimal subsequence length. The second line contains a string consisting of characters 0 and 1, denoting answers of the program for each e-mail in the database. Number 1 indicates that Goo\u2019s program gave a correct answer and 0 that it failed. The length of the string will be at least $k$ and at most $100000$ characters.\n-----Output description-----\nThe first and only line of output should consist of two integers $f$ and $\\ell $, separated by a single space. The integer $f$ is the 1-based index of the first element of subsequence with the best success rate and $\\ell $ is its length. If there are multiple optimal solutions, you can output any one of them.\n-----Examples-----\nSample Input:\n1\n01\nSample Output:\n2 1\n\ndef",
      "answer": "def solution(k, arr):\n    arr.sort()\n    for i in range(len(arr)):\n        if arr[i] == arr[i+1]:\n            continue\n        else:\n            return arr[i+1] - arr[i]\n    return arr[-1] - arr[0]\n\n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3422,
      "prompt": "Complete the Python function given the prompt below:\nYou may be under the impression that treasure maps originate from pirates, who create maps after burying their treasure so that they will later have a way to retrieve their stolen fortunes. In reality, it is extremely rare for pirates to bury treasure; there are only a few such documented cases.\nAs it turns out, the vast majority of treasure maps are published by the Mapping Association of Plunder and Spoils (MAPS), a secretive group of people responsible for curating reports of lost or stolen treasure and then making and selling corresponding treasure maps.\nOver the years, MAPS has become increasingly creative with the structure of its treasure maps, so these maps no longer resemble a stereotypical treasure map. In fact, they no longer come in one piece; treasure hunters must assemble a map from multiple pieces before being able to use it to locate buried treasure.\nFormally, an assembled treasure map is a rectangular grid of squares, where each square indicates the rectilinear distance (sum of horizontal distance and vertical distance) to the square containing the treasure, modulo $10$.\nGiven a list of smaller rectangular map pieces, you must rearrange the pieces to reconstruct a valid rectangular map, rotating (but not flipping) the pieces as needed. Every map piece must be used exactly once in the reconstructed map, no two map pieces may overlap, and the reconstructed map must not contain any gaps.\n-----Input-----\nThe first line contains an integer, $N$ ($2\\leq N\\leq 8$), indicating the number of rectangular map pieces. This is followed by a series of lines describing each map piece. The description of the $i$-th piece ($1\\leq i\\leq N$) begins with a line containing two space-separated integers, $W_ i$ and $H_ i$, giving the $i$-th piece\u2019s width and height, respectively, where $1\\leq W_ i, H_ i\\leq 10$. This is followed by $H_ i$ lines of $W_ i$ characters each, where each character represents one square of the map piece (using a digit from $0$ to $9$, inclusive). It is guaranteed that one of the map pieces contains a square corresponding to the location of the treasure.\n-----Output-----\nOutput a line containing $W$ and $H$, separated by a single space, where $W$ is the width and $H$ is the height of a valid reconstructed map (such a reconstruction will always be possible). Then output the reconstructed map as $H$ lines of $W$ characters each. (In the event that there are multiple possible maps that can be produced, it suffices to output any one of them, in any of the $4$ possible rotations.) On the following line, output $W$ hyphen (\u2018-\u2019) characters. Then output $H$ lines of $W$ characters each, where each character is a digit between $1$ and $N$, inclusive, that is the ($1$-based) index of the map piece to which the corresponding square in the reconstructed map belongs. (For example, the digit in the bottom-left corner of the first sample output is\u00a0$1$ because the corresponding digit in the reconstructed map (which happens to be\u00a0$2$) belongs to the $1$st map piece.)\n-----Examples-----\nSample Input:\n3\n4 1\n2123\n2 2\n21\n10\n2 2\n23\n12\nSample Output:\n4 3\n2123\n1012\n2123\n----\n2233\n2233\n1111\n\ndef",
      "answer": "def map_reconstruct(map_pieces):\n    map_pieces = map_pieces.split('\\n')\n    map_pieces = map_pieces[1:]\n    map_pieces = map_pieces[:-1]\n    map_pieces = map_pieces[::-1]\n    map_pieces = map_pieces[::-1]\n    map_pieces = map_pieces[::-1]\n    map_pieces = map_pieces[::-1]\n    map_pieces = map_pieces[::-1]\n    map_pieces = map_pieces[::-1]\n    map_pieces = map_pieces[::-1]\n    map_pieces = map_pieces[::-1]\n    map_pieces = map_pieces[::-1]\n    map_pieces = map_pieces[::-1]\n    map_pieces = map_pieces[::-1]\n    map_pieces = map_pieces[::-1]\n    map_pieces = map_pieces[::-1]\n    map_pieces = map_pieces[::-1]\n    map_pieces = map_pieces[::-1]\n    map_pieces = map_pieces[::-1]\n    map_pieces = map_pieces[::-1]\n    map_pieces = map_pieces[::-1]\n    map_pieces = map_pieces[::-1]\n    map_pieces = map_pieces[::-1]\n    map_pieces = map_pieces[::-1]\n    map_pieces = map_pieces[::-1]\n    map_pieces = map_pieces[::-1]\n    map_pieces = map_pieces[::-1]\n    map_pieces = map_pieces[::-1]\n    map_pieces = map_pieces[::-1]\n    map_pieces = map_pieces[::-1]\n    map_pieces = map_pieces[::-1]\n    map_pieces = map_pieces[::-1]\n    map_pieces = map_pieces[::-1]\n    map_pieces = map_pieces[::-1]\n    map_pieces = map_pieces[::-1]\n    map_pieces = map_pieces[::-1]\n    map_pieces = map_pieces[::-1]\n    map_pieces = map_pieces[::-1]\n    map_pieces = map_pieces[::-1]\n    map_pieces = map_pieces[::-1]\n    map_pieces = map_pieces[::-1]\n    map_pieces = map_pieces[::-1]\n    map_pieces = map_pieces[::-1]\n    map_pieces = map_pieces[::-1]\n    map_pieces = map_pieces[::-1]\n    map_pieces = map_pieces[::-1]\n    map_pieces = map_pieces[::-1]\n    map_pieces = map_pieces[::-1]\n    map_pieces = map_pieces[::-1]\n    map_pieces = map_pieces[::-1]\n    map_pieces = map_pieces[::-1]\n    map_pieces = map_pieces[::-1]\n    map_pieces = map_pieces[::-1]\n    map_pieces = map_pieces[::-1]\n    map_pieces = map_pieces[::-1]\n    map_pieces = map_pieces[::-1]\n    map_pieces = map_pieces[::-1]\n    map_pieces = map_pieces[::-1]\n    map_pieces = map_pieces[::-1]\n    map_pieces = map_pieces[::-1]\n    map_pieces = map_pieces[::-1]\n    map_pieces = map_pieces[::-1]\n    map_pieces = map_pieces[::-1]\n    map_pieces = map_pieces[::-1]\n    map_pieces = map_pieces[::-1]\n    map_pieces = map_pieces[::-1]\n    map_pieces = map_pieces[::-1]\n    map_pieces = map_pieces[::-1]\n    map_pieces = map_pieces[::-1]\n    map_pieces = map_pieces[::-1]\n    map_pieces = map_pieces[::-1]\n    map_pieces = map_pieces[::-1]\n    map_pieces = map_pieces",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3423,
      "prompt": "Complete the Python function given the prompt below:\nModern operating system distributions have tools to manage installed software, making it easy to keep the software up-to-date. Putting different pieces of software into \u2018packages\u2019 that can be installed separately keeps things simple and avoids duplicate effort and code. But this means that a package may depend on other packages, requiring their installation before that package can be installed. For example, many programs need to use \u2018libc,\u2019 which contains standard C-library functions. To keep track of these dependencies, many distributions use some sort of package manager.\nWhen a user wants to install a new package (or set of packages), a package manager takes care of the headache of tracking down which packages are required to install the desired package. Of course, those may also depend on other packages.\nFor this problem, determine an order (if one exists) that allows a given list of packages to be installed. No package should be installed before all the packages it depends on are installed. You may assume that, at the beginning, no packages have been installed.\n-----Input-----\nInput consists of up to $10$ test cases. Each test case start with a number $1 \\le n \\le 1000$, which is the number of packages the user wants to install. This is followed by $n$ lines which describe $n$ packages. Each package description starts with the name of the package and is followed by a space-separated list of the package\u2019s unique dependencies. Each package has at most $20$ dependencies, and each is one of the other $n-1$ packages. Each package name is a string of up to $40$ non-whitespace characters using the English alphabet (a-z, A-Z), digits (0-9), as well as the characters _, -,., and + (i.e. underscore, minus, period, and plus). Input ends when $n$ is zero.\n-----Output-----\nFor each test case, output the order of package installation that allow them all to be installed after their respective dependencies. If there are multiple possible orderings, then give the ordering that is lexicographically first (using ASCII values for string ordering). If there is some group of packages that are not able to be ordered within the list, output \u2018cannot be ordered\u2019 instead of ordering the packages. Put a blank line between each pair of test cases.\n-----Examples-----\nSample Input:\n14\nlibattr\nvim-X11 vim-common gtk2 libattr\nvim-common\ngtk2 libtiff atk pango glib2\nlibtiff zlib libjpeg\natk\npango xorg-x11-libs freetype glib2\nglib2\nzlib\nlibjpeg\nxorg-x11-libs grep freetype\ngrep pcre\npcre\nfreetype\n3\nemacs xorg-x11 lisp\nxorg-x11\nlisp emacs\n0\nSample Output:\natk\nfreetype\nglib2\nlibattr\nlibjpeg\npcre\ngrep\nvim-common\nxorg-x11-libs\npango\nzlib\nlibtiff\ngtk2\nvim-X11\ncannot be ordered\n\ndef",
      "answer": "def install_packages(packages):\n    packages = packages.split()\n    packages = [package.strip() for package in packages]\n    packages = [package for package in packages if package]\n    packages = [package for package in packages if package]\n    packages = [package for package in packages if package]\n    packages = [package for package in packages if package]\n    packages = [package for package in packages if package]\n    packages = [package for package in packages if package]\n    packages = [package for package in packages if package]\n    packages = [package for package in packages if package]\n    packages = [package for package in packages if package]\n    packages = [package for package in packages if package]\n    packages = [package for package in packages if package]\n    packages = [package for package in packages if package]\n    packages = [package for package in packages if package]\n    packages = [package for package in packages if package]\n    packages = [package for package in packages if package]\n    packages = [package for package in packages if package]\n    packages = [package for package in packages if package]\n    packages = [package for package in packages if package]\n    packages = [package for package in packages if package]\n    packages = [package for package in packages if package]\n    packages = [package for package in packages if package]\n    packages = [package for package in packages if package]\n    packages = [package for package in packages if package]\n    packages = [package for package in packages if package]\n    packages = [package for package in packages if package]\n    packages = [package for package in packages if package]\n    packages = [package for package in packages if package]\n    packages = [package for package in packages if package]\n    packages = [package for package in packages if package]\n    packages = [package for package in packages if package]\n    packages = [package for package in packages if package]\n    packages = [package for package in packages if package]\n    packages = [package for package in packages if package]\n    packages = [package for package in packages if package]\n    packages = [package for package in packages if package]\n    packages = [package for package in packages if package]\n    packages = [package for package in packages if package]\n    packages = [package for package in packages if package]\n    packages = [package for package in packages if package]\n    packages = [package for package in packages if package]\n    packages = [package for package in packages if package]\n    packages = [package for package in packages if package]\n    packages = [package for package in packages if package]\n    packages = [package for package in packages if package]\n    packages = [package for package in packages if package]\n    packages = [package for package in packages if package]\n    packages = [package for package in packages if package]\n    packages = [package for package in packages if package]\n    packages = [package for package in packages if package]\n    packages = [package for package in packages if package]\n    packages = [package for package in packages if package]\n    packages = [package for package in packages if package]\n    packages = [package for package in packages if package]\n    packages = [package for package in packages if package]\n    packages = [package for package in packages if package]\n    packages = [package for package in packages if package]\n    packages = [package for package in packages if package]\n    packages = [package for package in packages if package]\n    packages = [package for package in packages if package]\n    packages = [package for package in packages if package]\n    packages = [package for package in packages if package]\n    packages = [package for package in packages if package]\n    packages = [package for package in packages if package]\n    packages = [package for package in packages if package]\n    packages = [package for package in packages if package]\n    packages = [package for package in packages if package]\n    packages = [package for package in packages if package]\n    packages = [package for package in packages if package]\n    packages = [package for package in packages if package]\n    packages = [package for package in packages if package]\n    packages = [package for package in packages if package]\n    packages = [package for package in packages if package]\n    packages = [package for package in packages if package]\n    packages = [package for package in packages if package]\n    packages = [package for package in packages if package]\n    packages = [package for package in packages if package]\n    packages = [package for package",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3424,
      "prompt": "Complete the Python function given the prompt below:\nMy birthday is coming up. Alas, I am getting old and would like to feel young again. Fortunately, I have come up with an excellent way of feeling younger: if I write my age as a number in an appropriately chosen base $b$, then it appears to be smaller. For instance, suppose my age in base $10$ is $32$. Written in base $16$ it is only $20$!\nHowever, I cannot choose an arbitrary base when doing this. If my age written in base $b$ contains digits other than $0$ to $9$, then it will be obvious that I am cheating, which defeats the purpose. In addition, if my age written in base $b$ is too small then it would again be obvious that I am cheating.\nGiven my age $y$ and a lower bound $\\ell $ on how small I want my age to appear, find the largest base $b$ such that $y$ written in base $b$ contains only decimal digits, and is at least $\\ell $ when interpreted as a number in base $10$.\n-----Input-----\nThe input consists of a single line containing two base 10 integers $y$ ($10 \\le y \\le 10^{18}$ \u2013 yes, I am very old) and $\\ell $ ($10 \\le \\ell \\le y$).\n-----Output-----\nDisplay the largest base $b$ as described above.\n-----Examples-----\nSample Input:\n32 20\nSample Output:\n16\n\ndef",
      "answer": "def my_birthday(y, ell):\n    if y < 10:\n        return y\n    else:\n        return y + ell\n\n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3425,
      "prompt": "Complete the Python function given the prompt below:\nThe $n$-queens problem is popular among computer science students. Its task is to place a maximum number of queens on an $n\\times n$ chessboard so that no two queens attack each other. Two queens attack each other if they share a row, column, or diagonal.\nOne day Zapray gets bored and extends the problem by loosening its constraint: It is allowed to have two queens attack each other, but no three queens can attack each other at the same time. In other words, there should not exist three queens $i$, $j$, and $k$ so that $i$ attacks $j$, $j$ attacks $k$, and $k$ attacks $i$.\nWith the new constraint, Zapray would like to know at most how many queens he can place on an $n \\times m$ chessboard, and in how many ways he can place a maximum number of queens. Additionally, some of the cells on the chessboard are broken, and queens cannot be placed on these broken cells. A broken cell between two queens does not prevent them from attacking each other.\n-----Input-----\nThe first line has two integers $n$ and $m$ ($1 \\leq n, m \\leq 50, n \\cdot m \\leq 50$), describing the size of the chessboard. Each of the next $n$ lines has $m$ characters describing the cells on one row of the chess board. A dot (\u2018.\u2019) denotes an empty cell, while a hash (\u2018#\u2019) denotes a broken cell. There is at least one usable cell on the chessboard.\n-----Output-----\nOutput two integers. The first is the maximum number of queens Zapray can place on the chessboard, and the second is the number of ways in which he can place that many queens.\n-----Examples-----\nSample Input:\n3 4\n....\n.#.#\n....\nSample Output:\n5 13\n\ndef",
      "answer": "def max_queens(n,m):\n    if n == 0 or m == 0:\n        return 0\n    if n == 1:\n        return 1\n    if m == 1:\n        return 1\n    if n == 2:\n        return 2\n    if m == 2:\n        return 2\n    if n == 3:\n        return 3\n    if m == 3:\n        return 3\n    if n == 4:\n        return 4\n    if m == 4:\n        return 4\n    if n == 5:\n        return 5\n    if m == 5:\n        return 5\n    if n == 6:\n        return 6\n    if m == 6:\n        return 6\n    if n == 7:\n        return 7\n    if m == 7:\n        return 7\n    if n == 8:\n        return 8\n    if m == 8:\n        return 8\n    if n == 9:\n        return 9\n    if m == 9:\n        return 9\n    if n == 10:\n        return 10\n    if m == 10:\n        return 10\n    if n == 11:\n        return 11\n    if m == 11:\n        return 11\n    if n == 12:\n        return 12\n    if m == 12:\n        return 12\n    if n == 13:\n        return 13\n    if m == 13:\n        return 13\n    if n == 14:\n        return 14\n    if m == 14:\n        return 14\n    if n == 15:\n        return 15\n    if m == 15:\n        return 15\n    if n == 16:\n        return 16\n    if m == 16:\n        return 16\n    if n == 17:\n        return 17\n    if m == 17:\n        return 17\n    if n == 18:\n        return 18\n    if m == 18:\n        return 18\n    if n == 19:\n        return 19\n    if m == 19:\n        return 19\n    if n == 20:\n        return 20\n    if m == 20:\n        return 20\n    if n == 21:\n        return 21\n    if m == 21:\n        return 21\n    if n == 22:\n        return 22\n    if m == 22:\n        return 22\n    if n == 23:\n        return 23\n    if m == 23:\n        return 23\n    if n == 24:\n        return 24\n    if m == 24:\n        return 24\n    if n == 25:\n        return 25\n    if m == 25:\n        return 25\n    if n == 26:\n        return 26\n    if m == 26:\n        return 26\n    if n == 27:\n        return 27\n    if m == 27:\n        return 27\n    if n == 28:\n        return 28\n    if m == 28:\n        return 28\n    if n == 29:\n        return 29\n    if m == 29:\n        return 29\n    if n == 30:\n        return 30\n    if m == 30:\n        return 30\n    if n == 31:\n        return 31\n    if m == 31:\n        return 31\n    if n == 32:\n        return 32\n    if m == 32:\n        return 32\n    if n == 33:\n        return 33\n    if m == 33:\n        return 33\n    if n == 34:\n        return 34\n    if m == 34:\n        return 34\n    if n == 35:\n        return 35\n    if m == 35:\n        return 35\n    if n == 36:\n        return 36\n    if m == 36:\n        return 36\n    if n == 37:\n        return 37\n    if m == 37:\n        return 37\n    if n == 38:\n        return 38\n    if m == 38:\n        return 38\n    if n == 39:\n        return 39\n    if m == 39:\n        return 39\n    if n == 40:\n        return 40\n    if m == 40:\n        return 40\n    if n == 41:\n        return 41\n    if m == 41:\n        return 41\n    if n == 42:\n        return 42\n    if m == 42:\n        return 42\n    if n == 43:\n        return 43\n    if m == 43:\n        return 43\n    if n == 44:\n        return 44\n    if m == 44:\n        return 44\n    if n == 45:\n        return 45\n    if m == 45:\n        return 45\n    if n == 46:\n        return",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3426,
      "prompt": "Complete the Python function given the prompt below:\nIn the year 2120 there is a vast subway network under all of Lund, consisting of $N$ stations and $M$ tunnels. Each tunnel connects two stations and the stations are numbered $1$, $\\ldots $, $N$.\nErik has had enough of Sk\u00e5netrafiken\u2019s terrible route planning software and plans to build his own. To do this, he needs to know the length of each of the tunnels, but the subway map is incomplete in this regard. By looking out the window, Erik has noticed that some tunnels have special cables running alongside them, probably for providing power to the stations. The cables connect the stations so that every station is connected to the central station (the station numbered $1$). Knowing how greedy Sk\u00e5netrafiken is, he is certain that the cables are placed so that the total length of cable is minimized.\nErik knows the precise length of some tunnels, and which tunnels contain cables. Using this information he wants to find the minimum possible length for each tunnel with unknown length. Unfortunately, Erik\u2019s algorithm isn\u2019t efficient enough to process the enormous size of Lund\u2019s subway network. Can you help him by implementing a more efficient algorithm?\n-----Input-----\nThe first line of input contains two integers $N$ and $M$, where $2 \\leq N \\leq 10^5$ and $N - 1 \\leq M \\leq 2 \\cdot 10^5$, the number of stations and the number of tunnels, respectively. Each of the next $M$ lines contains the values $a_ i$, $b_ i$, $l_ i$ and $c_ i$. The integers $a_ i$ and $b_ i$, with $1 \\leq a_ i, b_ i \\leq N$ and $a_ i\\neq b_ i$, denote the two stations connected by the $i$th tunnel. The value $l_ i$ is either an integer satisfying $1 \\leq l_ i \\leq 10^9$, the length of the $i$th tunnel if it is known, or a question mark \u201c?\u201d. Finally, $c_ i$ is $1$ if the $i$th tunnel contains a cable, and $0$ if not.\nIt is guaranteed that there is at most one tunnel connecting the same pair of stations, and that it is possible to travel between any pair of stations using the subway. It is also guaranteed that there exists a path between any station and station number $1$ using only tunnels where $c_ i = 1$.\n-----Output-----\nFor each tunnel with $l_ i=\\texttt{?}$, output one line with a single integer, the minimum possible length for that tunnel. Tunnel lengths should be output in the same order as the tunnels are listed in the input.\n-----Sample Description-----\nIn the first sample case, the minimal distance for the unknown tunnel (between stations $3$ and $1$) is $5$. This is because, if the length were less than $5$, it would be more efficient for Sk\u00e5netrafiken to run cables through the second and third tunnels.\n-----Examples-----\nSample Input:\n3 3\n1 2 5 1\n2 3 3 1\n3 1? 0\nSample Output:\n5\n\ndef",
      "answer": "def min_tunnel_length(n, m):\n    if n == 1:\n        return m\n    if m == 1:\n        return n\n    if n == m:\n        return 1\n    if n < m:\n        return min_tunnel_length(n, m - 1)\n    else:\n        return min_tunnel_length(n - 1, m)\n\n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3427,
      "prompt": "Complete the Python function given the prompt below:\nYou own and manage an office building. One of the tenants, a regional paper supply company, is complaining about the lack of security offered by the CrapTacular$^{\\text {TM}}$ doors you installed in the building. A potential attacker could easily pick the locks on these doors to gain access to any room of the building. This is frankly unacceptable as there are reams upon reams of priceless paper stored inside the office.\nTo appease your tenant, you offer to replace one existing door with a new high-security door that will stop any attacker. To get the most benefit from the new door, it should protect the maximum possible number of rooms in the building. That is, you need to find which existing door to replace with a secure door such that the maximum number of rooms can only be reached from outside the building through the new door.\nThe building contains $0<N<100000$ rooms which are connected by $0<M<100000$ doors. Rooms are uniquely named by the integers in the range $[0,N)$. To figure out where to install the secure door, you have a floor plan of the building. The floor plan somehow represents all of the floors in one (possibly non-planar) graph. The only way to pass from one room to another, or the outside, is by using a door. All rooms can be reached, directly or via other rooms, from all other rooms and from the outside of the building.\n-----Input-----\nInput contains several lines of integers separated by spaces. The first line contains the number $N$, then $M$. The following $M$ lines describe each door with two numbers $-1 \\le u < N$ and $-1 \\le v < N$, $u \\ne v$. The numbers $u$ and $v$ represent the rooms connected by the door. A door connects to the outside if $u$ or $v$ is $-1$. No door has $u = v$.\n-----Output-----\nThe maximum number of rooms that can be protected with a single high-security door.\n-----Sample Explanation-----\nThe image below illustrates the building described in Sample Input 2:\nHere, double-headed arrows indicate doors. For example, the arrow between room $0$ and $1$ shows that there is a door there. The other arrow connecting room $0$ leads to the outside of the building. We could totally secure room $5$ by replacing the door between room $1$ and $5$, but this is not the optimal solution. The best solution for this input is to replace the door between room $1$ and $2$, since room $2$, $3$, and $4$ can only be reached from the outside of the building by passing through that door. The answer is thus $3$ because at most $3$ rooms can be secured.\n-----Examples-----\nSample Input:\n2 3\n-1 0\n-1 1\n0 1\nSample Output:\n0\n\ndef",
      "answer": "def find_safe_door(n,m):\n    if n==0 and m==0:\n        return 0\n    elif n==0 and m==1:\n        return 1\n    elif n==1 and m==0:\n        return 2\n    elif n==1 and m==1:\n        return 3\n    else:\n        return find_safe_door(n-1,m-1) + find_safe_door(n-1,m) + find_safe_door(n-1,m-1) + find_safe_door(n-1,m)\n\n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3428,
      "prompt": "Complete the Python function given the prompt below:\nIn 1978 AD the great Sir Isaac Newton, whilst proving that $\\mathcal{P}$ is a strict superset of $\\mathcal{NP}$, defined the Beta Alpha Pi Zeta function $f$ as follows over any sequence of positive integers $a_1, \\dots, a_ n$. Given integers $1\\leq i\\leq j\\leq n$, we define $f(i, j)$ as $\\gcd (a_ i, a_{i+1}, \\dots, a_{j-1}, a_ j)$. \nAbout a century later Lothar Collatz applied this function to the sequence $1, 1, 1, \\dots, 1$, and observed that $f$ always equalled $1$. Based on this, he conjectured that $f$ is always a constant function, no matter what the sequence $a_ i$ is. This conjecture, now widely known as the Collatz Conjecture, is one of the major open problems in botanical studies. (The Strong Collatz Conjecture claims that however many values $f$ takes on, the real part is always $\\frac{1}{2}$.)\nYou, a budding young cultural anthropologist, have decided to disprove this conjecture. Given a sequence $a_ i$, calculate how many different values $f$ takes on.\n-----Input-----\nThe input consists of two lines.\n - A single integer $1 \\leq n \\leq 5 \\cdot 10^5$, the length of the sequence.\n - The sequence of integers $a_1, a_2, \\dots, a_ n$. It is given that $1 \\leq a_ i \\leq 10^{18}$.\n-----Output-----\nOutput a single line containing a single integer, the number of distinct values $f$ takes on over the given sequence.\n-----Examples-----\nSample Input:\n4\n9 6 2 4\nSample Output:\n6\n\ndef",
      "answer": "def f(i, j):\n    return (i + j) % 10\n\n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3429,
      "prompt": "Complete the Python function given the prompt below:\nRecently, Anthony has really gotten into the battle royale games. His favorite game is PUBNite.\nIn PUBNite, many players fight against each other and try to be the last one alive. One of the most well-known mechanics in PUBNite is the safety zone, which is a circular area. Players outside of the safety zone will take one damage per second continuously.\nIn PUBNite the safety zone is shrinking at the start of the game. The safety zone is centered at coordinate $(x_ s, y_ s)$ and has an initial radius of $r_ i$ meters. The radius is decreasing at a constant and continuous rate of $s_ s$ m/s (meters per second) and will stop decreasing once it\u2019s no more than $r_ f$ meters. Anthony is initially located at coordinate $(x_ a, y_ a)$ and can run at a maximum speed of $s_ a$ m/s. What is the minimum amount of damage that Anthony will take assuming the safety zone never shrinks again after its radius is no more than $r_ f$?\n-----Input-----\nThe first line of the input contains integers $x_ s, y_ s, s_ s, r_ i, r_ f$. You are guaranteed that $|x_ s|, |y_ s|\\leq 10^9$, $0<s_ s\\leq 10^9$, and $0<r_ f\\leq r_ i\\leq 10^9$.\nThe second line of the input contains integers $x_ a, y_ a, s_ a$. You are guaranteed that $|x_ a|, |y_ a|\\leq 10^9$ and $0<s_ a\\leq 10^9$.\n-----Output-----\nA single number $d$ denoting the minimum amount of damage Anthony will take. You are required to output $d$ with absolute precision $10^{-6}$.\n-----Examples-----\nSample Input:\n2 1 1 3 2\n2 5 1\nSample Output:\n2.000000\n\ndef",
      "answer": "def PUBNite(x_s, y_s, s_s, r_i, r_f):\n    x_a = x_s + (r_i * s_s)\n    y_a = y_s + (r_i * s_s)\n    if x_a < 10**9 and y_a < 10**9:\n        return abs(x_a - x_s) + abs(y_a - y_s)\n    else:\n        return 0\n\n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3430,
      "prompt": "Complete the Python function given the prompt below:\nA network of size $N$ contains $N$ computers connected by $N-1$ cables, so that there is exactly $1$ path between any pair of computers.\nThe transmission cost between $2$ computers is equal to the square of the number of cables on the path connecting the $2$ computers.\nThe transmission cost of a network is equal to the sum of the transmission cost between all unordered pair of computers.\nGiven network $A$ with $N$ computers and network $B$ with $M$ computers, the administrator wants to create a new network $C$, by adding exactly one cable connecting one computer in $A$ and one computer in $B$.\nYour task is to minimize the transmission cost of the new network $C$.\n-----Input-----\n - The first line contains an integer $N$ - the number of computers in the network $A$ ($1 \\leq N \\leq 50000$).\n - In the next $N-1$ lines, each line contains two distinct integers $u$ and $v$, representing a cable connecting computers $u$ and $v$ in network $A$ ($1 \\leq u,v \\leq N$).\n - The next line contains an integer $M$ - the number of computers in the network $B$ ($1 \\leq M \\leq 50000$).\n - In the next $M-1$ lines, each line contains two distinct integers $u$ and $v$, representing a cable connecting computers $u$ and $v$ in network $B$ ($1 \\leq u,v \\leq M$).\nIt is guaranteed that each network is a tree.\n-----Output-----\nWrite in one line the minimum transmission cost of the resulting network $C$.\n-----Sample clarification-----\nIn the first sample below, connecting computer $2$ of network $A$ and computer $1$ of network $B$ will minimize the transmission cost of the network.\nIn the second sample below, connecting computer $4$ of network $A$ and computer $1$ of network $B$ will minimize the transmission cost of the network.\n-----Examples-----\nSample Input:\n3\n1 2\n2 3\n4\n1 2\n1 3\n1 4\nSample Output:\n96\n\ndef",
      "answer": "def minTransmissionCost(n,m):\n    if n==1 or m==1:\n        return 0\n    if n==2 or m==2:\n        return 1\n    if n==3 or m==3:\n        return 2\n    if n==4 or m==4:\n        return 3\n    return minTransmissionCost(n-1,m-1) + minTransmissionCost(n-2,m-2) + minTransmissionCost(n-3,m-3) + minTransmissionCost(n-4,m-4)\n\n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3431,
      "prompt": "Complete the Python function given the prompt below:\nThis is a very simple problem. You are given $N$ points. Some points may be repeated. The weight (distance) between two points is given by the Manhattan distance between the two points. Find the weight of a Minimum Spanning Tree that spans these $N$ points.\n-----Input-----\nThe input consists of:\n - One line with one integer $N$ ($1 \\leq N \\leq 100000$), the number of points,\n - $N$ lines each with two integers $x$ and $y$ ($0 \\leq x,y < 1000$), the coordinates of each point.\n-----Output-----\nOutput one line with a single integer: The weight of a Minimum Spanning Tree that spans these $N$ points.\n-----Examples-----\nSample Input:\n4\n0 0\n0 1\n1 0\n1 1\nSample Output:\n3\n\ndef",
      "answer": "def find_weight(x,y):\n    return abs(x-y)\n\n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3432,
      "prompt": "Complete the Python function given the prompt below:\nMirko and Slavko are playing a new game. Again. Slavko starts each round by giving Mirko two numbers $A$ and $B$, both smaller than 100. Mirko then has to slove the following task for Slavko: how to pair all given $A$ numbers with all given $B$ numbers so that the maximal sum of such pairs is as small as possible.\nIn other words, if during previous rounds Slavko gave numbers $a_1, a_2,a_3, \\ldots, a_ n$ and $b_1, b_2, b_3, \\ldots, b_ n$, determine $n$ pairings $(a_ i, b_ j)$ such that each number in the $A$ sequence is used in exactly one pairing, each number in the $B$ sequence is used in exactly one pairing, and the maximum of all sums $a_ i + b_ j$ is minimal.\n-----Input-----\nThe first line of input contains a single integer $N$ ($1 \\leq N \\leq 100000$), the number of rounds.\nThe next $N$ lines contain two integers $A$ and $B$ ($1 \\leq A, B \\leq 100$), the numbers given by Slavko in that round.\n-----Output-----\nThe output consists of $N$ lines, one for each round. Each line should contain the smallest maximal sum for that round.\n-----Examples-----\nSample Input:\n3\n2 8\n3 1\n1 4\nSample Output:\n10\n10\n9\n\ndef",
      "answer": "def pair(a, b):\n    return a + b\n\n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3433,
      "prompt": "Complete the Python function given the prompt below:\nJoe works in a maze. Unfortunately, portions of the maze have caught on fire, and the owner of the maze neglected to create a fire escape plan. Help Joe escape the maze.\nGiven Joe\u2019s location in the maze and which squares of the maze are on fire, you must determine whether Joe can exit the maze before the fire reaches him, and how fast he can do it.\nJoe and the fire each move one square per minute, vertically or horizontally (not diagonally). The fire spreads all four directions from each square that is on fire. Joe may exit the maze from any square that borders the edge of the maze. Neither Joe nor the fire may enter a square that is occupied by a wall.\n-----Input-----\nThe first line of input contains the two integers $R$ and $C$, separated by spaces, with $1 \\le R, C \\le 1000$. The following $R$ lines of input each contain one row of the maze. Each of these lines contains exactly $C$ characters, and each of these characters is one of:\n - #, a wall\n -., a passable square\n - J, Joe\u2019s initial position in the maze, which is a passable square\n - F, a square that is on fire\nThere will be exactly one J in the input.\n-----Output-----\nOutput a single line containing \u201cIMPOSSIBLE\u201d if Joe cannot exit the maze before the fire reaches him, or an integer giving the earliest time Joe can safely exit the maze, in minutes.\n-----Examples-----\nSample Input:\n4 4\n####\n#JF#\n#..#\n#..#\nSample Output:\n3\n\ndef",
      "answer": "def fire_escape(R,C):\n    if R==0 or C==0:\n        return 0\n    elif R==1 or C==1:\n        return 1\n    elif R==2 or C==2:\n        return 2\n    else:\n        return 3\n\n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3434,
      "prompt": "Complete the Python function given the prompt below:\nIn a two player card game, you have $n$ minions on the board and the opponent has $m$ minions. Each minion has a health between $1$ and $6$. \nYou are contemplating your next move. You want to play an \u201cExplosion\u201d spell which deals $d$ units of damage randomly distributed across all minions. The damage is dealt one unit at a time to some remaining minion on the board. Each living minion (including your own) has the same chance of receiving each unit of damage. When a minion receives a unit of damage, its health is decreased by one. As soon as the health of a minion reaches zero, it is immediately removed from the board, before the next damage is dealt. If there are no minions left on the board, any excess damage caused by the spell is ignored.\nGiven the current health of all minions, what is the probability that the Explosion will remove all of the opponent\u2019s minions? Note that it does not matter if all your own minions die in the process as well, and the damage continues to be dealt even if all your own minions are gone.\n-----Input-----\nThe first line of input contains the three integers $n$, $m$, and $d$ ($1 \\le n, m \\le 5$, $1 \\le d \\le 100$). Then follows a line containing $n$ integers, the current health of all your minions. Finally, the third line contains $m$ integers, the current health of all the opponent\u2019s minions. All healths are between $1$ and $6$ (inclusive).\n-----Output-----\nOutput the probability that the Explosion removes all the opponent\u2019s minions, accurate up to an absolute error of $10^{-6}$.\n-----Examples-----\nSample Input:\n1 2 2\n2\n1 1\nSample Output:\n0.3333333333\n\ndef",
      "answer": "def explosion(n,m,d):\n    return (1/n)*(1/m)*(1/d)\n\n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3435,
      "prompt": "Complete the Python function given the prompt below:\nIn a planet far far away, an intelligence agency plans to send some spies to the Earth to investigate the life there. In order to ensure the secret and secure of this scouting campaign, the agency gives a secret ID to each member.\nEach ID is a binary string of length $n$. To prevent enemies from infiltrating the agency, they choose a pattern $P$, which is a string of 1 and *, and decides that an ID is valid iff it satisfies this pattern $P$.\nA binary string $S = s_1 s_2 \\ldots s_ n$ satisfies a pattern $P = p_1 p_2 \\ldots p_ m$ iff any of these conditions holds:\n - $m = n$, and for each valid index $i$, either $s_ i = 1$ or $p_ i = *$.\n - $m < n$, and at least one substring of $S$ satisfies the pattern $P$.\nFor example:\n - Both strings 101 and 111 satisfy the pattern 1*1.\n - These strings 0101110, 1110000 and 1010111 satisfy the pattern 1*1, since 101 and 111 are their substrings.\n - The string 0100010 does not satisfy the pattern 1*1.\nThe agency wants to know how many spies they can employ, if each member has a unique ID.\n-----Input-----\n - The first line contains one integer $n$ $(1 \\leq n \\leq 50)$ \u2014 the length of a valid ID.\n - The second line contains a string of at most $30$ characters 1 and *, where at least half of them are 1s \u2014 the pattern $P$ which all valid IDs must satisfy.\n-----Output-----\nPrint a single integer \u2014 the maximum number of members in the agency, if each is assigned a unique valid ID.\n-----Examples-----\nSample Input:\n10\n1\nSample Output:\n1023\n\ndef",
      "answer": "def find_valid_ids(n):\n    if n < 2:\n        return n\n    else:\n        return find_valid_ids(n-1) + find_valid_ids(n-2)\n\n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3436,
      "prompt": "Complete the Python function given the prompt below:\nWe define an infinite two dimensional array $F$ using the following formula:\n - $F_{0, 0} = 0$,\n - $F_{0, 1} = F_{1, 0} = 1$,\n - For $i \\ge 2$, $F_{i, 0} = F_{i-1, 0} + F_{i-2, 0}$,\n - For $i \\ge 2$, $F_{0, i} = F_{0, i-1} + F_{0, i-2}$,\n - For $i, j \\ge 1$, $F_{i, j} = F_{i-1, j} + F_{i, j-1}$.\nHere are the first few values of $F$:\nGiven $x$ and $y$, your task is to calculate $F_{x, y}$.\n-----Input-----\nThe input consists of only a single line, containing $2$ integers $x$ and $y$ $(0 < x, y < 10^6)$.\n-----Output-----\nPrint a single integer\u00a0\u2014 the value of $F_{x, y}$, modulo $10^9 + 7$.\n-----Examples-----\nSample Input:\n2 2\nSample Output:\n6\n\ndef",
      "answer": "def f(x, y):\n    return (x + y) % 10**9 + 7\n\n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3437,
      "prompt": "Complete the Python function given the prompt below:\nIn the X-ray lab at KTH some experiments require evacuated tubes between source and sample and between sample and detector so that the X-rays are not absorbed by the air. Since the positions of object and detector vary between different experiments, several tubes of different lengths are available. The tubes should be fixed together in pairs, since they have a vacuum window only in one end. Two such tube pairs should be chosen, one to place between the source and the object and one to place between the object and the detector. This, however, gives a large set of possible lengths and makes it difficult to figure out which tubes to use for an experiment. The length of the tubes used should be as long as possible to minimize air absorption, but there is a limited amount of space between source and object $L_1$ and between object and detector $L_2$. What is the maximum length of air that can be replaced by vacuum tubes in this way? \n-----Task-----\nGiven a set of tube lengths and the two distances $L_1$ and $L_2$, find four tubes with the total length being as long as possible under the constraint that the sum of the first two tube lengths is at most $L_1$ and the sum of the last two tube lengths is at most $L_2$.\n-----Input-----\nThe first line of input contains three positive integers, $L_1$ and $L_2$, denoting the distances explained above in mm ($1 \\leq L_1, L_2 \\leq 10000$) and $N$, the number of available tubes ($4 \\leq N \\leq 2000$). The following $N$ lines each contain a single positive integer less than or equal to $10000$, the length of a tube in mm.\n-----Output-----\nOutput one line containing the maximum total length of air that can be avoided, i.e., the sum of the four tubes chosen. If there are no two pairs of tubes fitting into the setup, output the single word \u201cImpossible\u201d instead.\n-----Examples-----\nSample Input:\n1000 2000 7\n100\n480\n500\n550\n1000\n1400\n1500\nSample Output:\n2930\n\ndef",
      "answer": "def tube_length(L1, L2, L3, L4):\n    if L1 + L2 + L3 + L4 == L1 + L2 + L3 + L4:\n        return L1 + L2 + L3 + L4\n    elif L1 + L2 + L3 + L4 > L1 + L2 + L3 + L4:\n        return L1 + L2 + L3 + L4\n    elif L1 + L2 + L3 + L4 > L1 + L2 + L3 + L4:\n        return L1 + L2 + L3 + L4\n    elif L1 + L2 + L3 + L4 > L1 + L2 + L3 + L4:\n        return L1 + L2 + L3 + L4\n    elif L1 + L2 + L3 + L4 > L1 + L2 + L3 + L4:\n        return L1 + L2 + L3 + L4\n    elif L1 + L2 + L3 + L4 > L1 + L2 + L3 + L4:\n        return L1 + L2 + L3 + L4\n    elif L1 + L2 + L3 + L4 > L1 + L2 + L3 + L4:\n        return L1 + L2 + L3 + L4\n    elif L1 + L2 + L3 + L4 > L1 + L2 + L3 + L4:\n        return L1 + L2 + L3 + L4\n    elif L1 + L2 + L3 + L4 > L1 + L2 + L3 + L4:\n        return L1 + L2 + L3 + L4\n    elif L1 + L2 + L3 + L4 > L1 + L2 + L3 + L4:\n        return L1 + L2 + L3 + L4\n    elif L1 + L2 + L3 + L4 > L1 + L2 + L3 + L4:\n        return L1 + L2 + L3 + L4\n    elif L1 + L2 + L3 + L4 > L1 + L2 + L3 + L4:\n        return L1 + L2 + L3 + L4\n    elif L1 + L2 + L3 + L4 > L1 + L2 + L3 + L4:\n        return L1 + L2 + L3 + L4\n    elif L1 + L2 + L3 + L4 > L1 + L2 + L3 + L4:\n        return L1 + L2 + L3 + L4\n    elif L1 + L2 + L3 + L4 > L1 + L2 + L3 + L4:\n        return L1 + L2 + L3 + L4\n    elif L1 + L2 + L3 + L4 > L1 + L2 + L3 + L4:\n        return L1 + L2 + L3 + L4\n    elif L1 + L2 + L3 + L4 > L1 + L2 + L3 + L4:\n        return L1 + L2 + L3 + L4\n    elif L1 + L2 + L3 + L4 > L1 + L2 + L3 + L4:\n        return L1 + L2 + L3 + L4\n    elif L1 + L2 + L3 + L4 > L1 + L2 + L3 + L4:\n        return L1 + L2 + L3 + L4\n    elif L1 + L2 + L3 + L4 > L1 + L2 + L3 + L4:\n        return L1 + L2 + L3 + L4\n    elif L1 + L2 + L3 + L4 > L1 + L2 + L3 + L4:\n        return L1 + L2 + L3 + L4\n    elif L1 + L2 + L3 + L4 > L1 + L2 + L3 + L4:\n        return L1 + L2 + L3 + L4\n    elif L1 + L2 + L3 + L4 > L1 + L2 + L3 + L4:\n        return L1 + L2 + L3 + L4\n    elif L1 + L2 + L3 + L4 > L1 + L2 + L3 + L4:\n        return L1 + L2 + L3 + L4\n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3438,
      "prompt": "Complete the Python function given the prompt below:\nIn a distributed system, data is never where you need it, and fetching data over a network takes time and consumes bandwidth. The problem can be mitigated by adding a cache, where a node stores some resources locally and if those resources need to be used again, it can simply take them from its cache rather than asking someone else for them. \nHowever, caches have a nasty tendency to fill up, so at some point, objects must be evicted from the cache to make room for new objects. Choosing what object to remove from the cache is not easy and there are several different algorithms to choose from.\nThe marvelous Apes in Computing Machinery have come up with a fantastic new algorithm, the Introspective Caching Algorithm, named after a city of Peru. It consists of some extra hardware (a very small, precognitive monkey) which helps making decisions. Since the monkey can see into the future, she knows exactly what objects will be accessed and in what order, and using this information she will make optimal decisions on what objects to remove from the cache. Optimality here means that she will minimize the number of times an object is read into the cache.\nAll object accesses go through the cache, so every time an object is accessed, it must be inserted into the cache if it was not already there. All objects are of equal size, and no writes occur in the system, so a cached object is always valid. When the system starts, the cache is empty.\nYou have been tasked with evaluating the monkey\u2019s performance, and feeding her the occasional banana.\n-----Input-----\nThe first line of input contains three integers, separated by single spaces, telling you how many objects fit in the cache, $0 < c \\le 10000$, how many different objects are in the system, $c \\le n \\le 100000$, and how many accesses, $0 \\le a \\le 100000$, will occur. The following $a$ lines contain a single integer between $0$ and $n-1$ (inclusive) indicating what object is accessed. The first line corresponds to the first object accessed access and the last line to the last.\n-----Output-----\nOutput the least number of times an object must be read into the cache to handle the accesses listed in the input.\n-----Examples-----\nSample Input:\n1 2 3\n0\n0\n1\nSample Output:\n2\n\ndef",
      "answer": "def monkey(n,c):\n    if n == 0:\n        return 0\n    if c == 0:\n        return 1\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 0\n    if n == 4:\n        return 1\n    if n == 5:\n        return 0\n    if n == 6:\n        return 1\n    if n == 7:\n        return 0\n    if n == 8:\n        return 1\n    if n == 9:\n        return 0\n    if n == 10:\n        return 1\n    if n == 11:\n        return 0\n    if n == 12:\n        return 1\n    if n == 13:\n        return 0\n    if n == 14:\n        return 1\n    if n == 15:\n        return 0\n    if n == 16:\n        return 1\n    if n == 17:\n        return 0\n    if n == 18:\n        return 1\n    if n == 19:\n        return 0\n    if n == 20:\n        return 1\n    if n == 21:\n        return 0\n    if n == 22:\n        return 1\n    if n == 23:\n        return 0\n    if n == 24:\n        return 1\n    if n == 25:\n        return 0\n    if n == 26:\n        return 1\n    if n == 27:\n        return 0\n    if n == 28:\n        return 1\n    if n == 29:\n        return 0\n    if n == 30:\n        return 1\n    if n == 31:\n        return 0\n    if n == 32:\n        return 1\n    if n == 33:\n        return 0\n    if n == 34:\n        return 1\n    if n == 35:\n        return 0\n    if n == 36:\n        return 1\n    if n == 37:\n        return 0\n    if n == 38:\n        return 1\n    if n == 39:\n        return 0\n    if n == 40:\n        return 1\n    if n == 41:\n        return 0\n    if n == 42:\n        return 1\n    if n == 43:\n        return 0\n    if n == 44:\n        return 1\n    if n == 45:\n        return 0\n    if n == 46:\n        return 1\n    if n == 47:\n        return 0\n    if n == 48:\n        return 1\n    if n == 49:\n        return 0\n    if n == 50:\n        return 1\n    if n == 51:\n        return 0\n    if n == 52:\n        return 1\n    if n == 53:\n        return 0\n    if n == 54:\n        return 1\n    if n == 55:\n        return 0\n    if n == 56:\n        return 1\n    if n == 57:\n        return 0\n    if n == 58:\n        return 1\n    if n == 59:\n        return 0\n    if n == 60:\n        return 1\n    if n == 61:\n        return 0\n    if n == 62:\n        return 1\n    if n == 63:\n        return 0\n    if n == 64:\n        return 1\n    if n == 65:\n        return 0\n    if n == 66:\n        return 1\n    if n == 67:\n        return 0\n    if n == 68:\n        return 1\n    if n == 69:\n        return 0\n    if n == 70:\n        return 1\n    if n == 71:\n        return 0\n    if n == 72:\n        return 1\n    if n == 73:\n        return 0\n    if n == 74:\n        return 1\n    if n == 75:\n        return 0\n    if n == 76:\n        return 1\n    if n == 77:\n        return 0\n    if n == 78:\n        return 1\n    if n == 79:\n        return 0\n    if n == 80:\n        return 1\n    if n == 81:\n        return 0\n    if n == 82:\n        return 1\n    if n == 83:\n        return 0\n    if n == 84:\n        return 1\n    if n == 85:\n        return 0\n    if n == 86:\n        return 1\n    if n == 87:\n        return 0\n    if n == 88:\n        return 1\n    if n == 89:\n        return 0\n    if n == 90:\n        return 1\n    if n == 91",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3439,
      "prompt": "Complete the Python function given the prompt below:\nGunnar dislikes forces of nature and always comes up with innovative plans to decrease their influence over him. Even though his previous plan of a giant dome over Stockholm to protect from too much sunlight (as well as rain and snow) has not yet been realized, he is now focusing on preempting the possible effects climate change might have on the Baltic Sea, by the elegant solution of simply removing the Baltic from the equation. \nFirst, Gunnar wants to build a floodbank connecting Denmark and Norway to separate the Baltic from the Atlantic Ocean. The floodbank will also help protect Nordic countries from rising sea levels in the ocean. Next, Gunnar installs a device that can drain the Baltic from the seafloor. The device will drain as much water as needed to the Earth\u2019s core where it will disappear forever (because that is how physics works, at least as far as Gunnar is concerned). However, depending on the placement of the device, the entire Baltic might not be completely drained \u2013 some pockets of water may remain.\nTo simplify the problem, Gunnar is approximating the map of the Baltic using a $2$-dimensional grid with $1$ meter squares. For each square on the grid, he computes the average altitude. Squares with negative altitude are covered by water, squares with non-negative altitude are dry. Altitude is given in meters above the sea level, so the sea level has altitude of exactly $0$. He disregards lakes and dry land below the sea level, as these would not change the estimate much anyway.\nWater from a square on the grid can flow to any of its $8$\u00a0neighbours, even if the two squares only share a corner. The map is surrounded by dry land, so water never flows outside of the map. Water respects gravity, so it can only flow closer to the Earth\u2019s core \u2013 either via the drainage device or to a neighbouring square with a lower water level.\nGunnar is more of an idea person than a programmer, so he has asked for your help to evaluate how much water would be drained for a given placement of the device.\n-----Input-----\nThe first line contains two integers $h$ and $w$, $1 \\leq h, w \\leq 500$, denoting the height and width of the map.\nThen follow $h$ lines, each containing $w$ integers. The first line represents the northernmost row of Gunnar\u2019s map. Each integer represents the altitude of a square on the map grid. The altitude is given in meters and it is at least $-10^6$ and at most $10^6$.\nThe last line contains two integers $i$ and $j$, $1 \\leq i \\leq h, 1 \\leq j \\leq w$, indicating that the draining device is placed in the cell corresponding to the $j$\u2019th column of the $i$\u2019th row. You may assume that position $(i, j)$ has negative altitude (i.e., the draining device is not placed on land).\n-----Output-----\nOutput one line with one integer \u2013 the total volume of sea water drained, in cubic meters.\n-----Examples-----\nSample Input:\n3 3\n-5 2 -5\n-1 -2 -1\n5 4 -5\n2 2\nSample Output:\n10\n\ndef",
      "answer": "def floodbank(h, w, i, j):\n    if i < 0 or j < 0 or i >= h or j >= w:\n        return 0\n    if i == 0 and j == 0:\n        return 0\n    if i == 0:\n        return w * h\n    if j == 0:\n        return w * h\n    return w * h + floodbank(h, w, i - 1, j) + floodbank(h, w, i, j - 1)\n\n",
      "difficulty": "competition",
      "split": "test"
   },
   {
      "task_id": 3440,
      "prompt": "Complete the Python function given the prompt below:\nFrida is a writer for Cosmopolitan who writes restaurant reviews. She enjoys it a lot, but it seems that, throughout the years, she has reviewed all the restaurants on Earth. It\u2019s now time to move one level up; she is going to review the food served by the airlines, so that the readers can make better decisions on which flights to take.\nHer boss gave her a list of flight connections that she needs to review for the upcoming issue of Cosmopolitan. She knows that they serve the same food in both directions of every flight, so she only needs to take it once. She realized that she will need to take some additional flights, because she can not make all reviews using only flights in the list from her boss. Therefore she did some quick research and made a list of additional flights which she might take. She will not review the food on these flights; they will only be used so that she can make all the reviews.\nFrida\u2019s goal is to make all the reviews while spending the least money on flight tickets. Her office is in Stockholm, so she starts and ends her journey there. Each flight is both ways between two cities and has a fixed price in both directions. You can assume that it is possible to make all the reviews using some of the additional flights.\nFor the purposes of this problem we ignore the price Frida has to pay for accommodation and we also ignore the departure and arrival times of flights by assuming that every flight is very often and reasonably short. We only focus on the total price of the flights.\n-----Input-----\nThe first line contains $2$ space separated integers $N, R, (2\\leq N\\leq 13, 0\\leq R\\leq 78)$, where $N$ is the number of airports mentioned in the input and $R$ is the number of flights to review. The airports are numbered $1, \\dots, N$ and Stockholm has number $1$.\nThe next $R$ lines describe the $R$ flights to review. Each line contains 3 space separated integers $a, b, c, (1\\leq a, b\\leq N, 1\\leq c\\leq 10000)$, where $a, b$ denote 2 distinct airports and $c$ is the cost of the flight in Swedish kronor in both directions. No pair of $2$ cities is listed twice.\nThe next line contains an integer $F$, $(0\\leq F\\leq 200)$, the number of additional flights available. The next $F$ lines contain descriptions of flights in the same format as above. There may be more flights between a pair of cities. You may assume that it is possible to make all the reviews using some of these additional flights.\n-----Output-----\nOutput one line with one integer \u2013 the lowest total cost of flight tickets, such that Frida can make all the reviews and return back to Stockholm.\n-----Examples-----\nSample Input:\n5 3\n1 2 1000\n2 3 1000\n4 5 500\n2\n1 4 300\n3 5 300\nSample Output:\n3100\n\ndef",
      "answer": "def get_min_cost(n, r, flights):\n    cost = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            cost += r[i] * flights[i][j]\n    return cost\n\n",
      "difficulty": "competition",
      "split": "test"
   }
]