[
    {
        "task_id": 2400,
        "prompt": "Complete the Python function given the prompt below:DLS and JLS are bored with a Math lesson. In order to entertain themselves, DLS took a sheet of paper and drew $n$ distinct lines, given by equations $y = x + p_i$ for some distinct $p_1, p_2, \\ldots, p_n$.\nThen JLS drew on the same paper sheet $m$ distinct lines given by equations $y = -x + q_i$ for some distinct $q_1, q_2, \\ldots, q_m$.\nDLS and JLS are interested in counting how many line pairs have integer intersection points, i.e. points with both coordinates that are integers. Unfortunately, the lesson will end up soon, so DLS and JLS are asking for your help.\n-----Input-----\nThe first line contains one integer $t$ ($1 \\le t \\le 1000$), the number of test cases in the input. Then follow the test case descriptions.\nThe first line of a test case contains an integer $n$ ($1 \\le n \\le 10^5$), the number of lines drawn by DLS.\nThe second line of a test case contains $n$ distinct integers $p_i$ ($0 \\le p_i \\le 10^9$) describing the lines drawn by DLS. The integer $p_i$ describes a line given by the equation $y = x + p_i$.\nThe third line of a test case contains an integer $m$ ($1 \\le m \\le 10^5$), the number of lines drawn by JLS.\nThe fourth line of a test case contains $m$ distinct integers $q_i$ ($0 \\le q_i \\le 10^9$) describing the lines drawn by JLS. The integer $q_i$ describes a line given by the equation $y = -x + q_i$.\nThe sum of the values of $n$ over all test cases in the input does not exceed $10^5$. Similarly, the sum of the values of $m$ over all test cases in the input does not exceed $10^5$.\nIn hacks it is allowed to use only one test case in the input, so $t=1$ should be satisfied.\n-----Output-----\nFor each test case in the input print a single integer\u00a0\u2014 the number of line pairs with integer intersection points. \n-----Example-----\nInput\n3\n3\n1 3 2\n2\n0 3\n1\n1\n1\n1\n1\n2\n1\n1\nOutput\n3\n1\n0\n-----Note-----\nThe picture shows the lines from the first test case of the example. Black circles denote intersection points with integer coordinates. [Image]\n\ndef",
        "answer": "def dls(n, p):\n    if n == 0:\n        return 0\n    else:\n        return dls(n-1, p) + p",
        "difficulty": "interview"
    },
    {
        "task_id": 2401,
        "prompt": "Complete the Python function given the prompt below:Heidi got one brain, thumbs up! But the evening isn't over yet and one more challenge awaits our dauntless agent: after dinner, at precisely midnight, the N attendees love to play a very risky game...\nEvery zombie gets a number n_{i} (1 \u2264 n_{i} \u2264 N) written on his forehead. Although no zombie can see his own number, he can see the numbers written on the foreheads of all N - 1 fellows. Note that not all numbers have to be unique (they can even all be the same). From this point on, no more communication between zombies is allowed. Observation is the only key to success. When the cuckoo clock strikes midnight, all attendees have to simultaneously guess the number on their own forehead. If at least one of them guesses his number correctly, all zombies survive and go home happily. On the other hand, if not a single attendee manages to guess his number correctly, all of them are doomed to die!\nZombies aren't very bright creatures though, and Heidi has to act fast if she does not want to jeopardize her life. She has one single option: by performing some quick surgery on the brain she managed to get from the chest, she has the ability to remotely reprogram the decision-making strategy of all attendees for their upcoming midnight game! Can you suggest a sound strategy to Heidi which, given the rules of the game, ensures that at least one attendee will guess his own number correctly, for any possible sequence of numbers on the foreheads?\nGiven a zombie's rank R and the N - 1 numbers n_{i} on the other attendees' foreheads, your program will have to return the number that the zombie of rank R shall guess. Those answers define your strategy, and we will check if it is flawless or not.\n-----Input-----\nThe first line of input contains a single integer T (1 \u2264 T \u2264 50000): the number of scenarios for which you have to make a guess.\nThe T scenarios follow, described on two lines each:   The first line holds two integers, N (2 \u2264 N \u2264 6), the number of attendees, and R (1 \u2264 R \u2264 N), the rank of the zombie who has to make the guess.  The second line lists N - 1 integers: the numbers on the foreheads of all other attendees, listed in increasing order of the attendees' rank. (Every zombie knows the rank of every other zombie.) \n-----Output-----\nFor every scenario, output a single integer: the number that the zombie of rank R shall guess, based on the numbers n_{i} on his N - 1 fellows' foreheads.\n-----Examples-----\nInput\n4\n2 1\n1\n2 2\n1\n2 1\n2\n2 2\n2\nOutput\n1\n2\n2\n1\nInput\n2\n5 2\n2 2 2 2\n6 4\n3 2 6 1 2\nOutput\n5\n2\n-----Note-----\nFor instance, if there were N = 2 two attendees, a successful strategy could be:   The zombie of rank 1 always guesses the number he sees on the forehead of the zombie of rank 2.  The zombie of rank 2 always guesses the opposite of the number he sees on the forehead of the zombie of rank 1.\n\ndef",
        "answer": "def solve(N, R, n):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2402,
        "prompt": "Complete the Python function given the prompt below:Nikolay has only recently started in competitive programming, but already qualified to the finals of one prestigious olympiad. There going to be $n$ participants, one of whom is Nikolay. Like any good olympiad, it consists of two rounds. Tired of the traditional rules, in which the participant who solved the largest number of problems wins, the organizers came up with different rules.\nSuppose in the first round participant A took $x$-th place and in the second round\u00a0\u2014 $y$-th place. Then the total score of the participant A is sum $x + y$. The overall place of the participant A is the number of participants (including A) having their total score less than or equal to the total score of A. Note, that some participants may end up having a common overall place. It is also important to note, that in both the first and the second round there were no two participants tying at a common place. In other words, for every $i$ from $1$ to $n$ exactly one participant took $i$-th place in first round and exactly one participant took $i$-th place in second round.\nRight after the end of the Olympiad, Nikolay was informed that he got $x$-th place in first round and $y$-th place in the second round. Nikolay doesn't know the results of other participants, yet he wonders what is the minimum and maximum place he can take, if we consider the most favorable and unfavorable outcome for him. Please help Nikolay to find the answer to this question.\n-----Input-----\nThe first line contains an integer $t$ ($1 \\le t \\le 100$)\u00a0\u2014 the number of test cases to solve.\nEach of the following $t$ lines contains integers $n$, $x$, $y$ ($1 \\leq n \\leq 10^9$, $1 \\le x, y \\le n$)\u00a0\u2014 the number of participants in the olympiad, the place that Nikolay took in the first round and the place that Nikolay took in the second round.\n-----Output-----\nPrint two integers\u00a0\u2014 the minimum and maximum possible overall place Nikolay could take.\n-----Examples-----\nInput\n1\n5 1 3\nOutput\n1 3\nInput\n1\n6 3 4\nOutput\n2 6\n-----Note-----\nExplanation for the first example:\nSuppose there were 5 participants A-E. Let's denote Nikolay as A. The the most favorable results for Nikolay could look as follows: $\\left. \\begin{array}{|c|c|c|c|c|} \\hline \\text{Participant} & {\\text{Round 1}} & {\\text{Round 2}} & {\\text{Total score}} & {\\text{Place}} \\\\ \\hline A & {1} & {3} & {4} & {1} \\\\ \\hline B & {2} & {4} & {6} & {3} \\\\ \\hline C & {3} & {5} & {8} & {5} \\\\ \\hline D & {4} & {1} & {5} & {2} \\\\ \\hline E & {5} & {2} & {7} & {4} \\\\ \\hline \\end{array} \\right.$ \nHowever, the results of the Olympiad could also look like this: $\\left. \\begin{array}{|c|c|c|c|c|} \\hline \\text{Participant} & {\\text{Round 1}} & {\\text{Round 2}} & {\\text{Total score}} & {\\text{Place}} \\\\ \\hline A & {1} & {3} & {4} & {3} \\\\ \\hline B & {2} & {2} & {4} & {3} \\\\ \\hline C & {3} & {1} & {4} & {3} \\\\ \\hline D & {4} & {4} & {8} & {4} \\\\ \\hline E & {5} & {5} & {10} & {5} \\\\ \\hline \\end{array} \\right.$ \nIn the first case Nikolay would have taken first place, and in the second\u00a0\u2014 third place.\n\ndef",
        "answer": "def min_max_place(n, x, y):\n    # your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2403,
        "prompt": "Complete the Python function given the prompt below:Captain Fint is involved in another treasure hunt, but have found only one strange problem. The problem may be connected to the treasure's location or may not. That's why captain Flint decided to leave the solving the problem to his crew and offered an absurdly high reward: one day off. The problem itself sounds like this...\nThere are two arrays $a$ and $b$ of length $n$. Initially, an $ans$ is equal to $0$ and the following operation is defined:   Choose position $i$ ($1 \\le i \\le n$);  Add $a_i$ to $ans$;  If $b_i \\neq -1$ then add $a_i$ to $a_{b_i}$. \nWhat is the maximum $ans$ you can get by performing the operation on each $i$ ($1 \\le i \\le n$) exactly once?\nUncle Bogdan is eager to get the reward, so he is asking your help to find the optimal order of positions to perform the operation on them.\n-----Input-----\nThe first line contains the integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$)\u00a0\u2014 the length of arrays $a$ and $b$.\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($\u221210^6 \\le a_i \\le 10^6$).\nThe third line contains $n$ integers $b_1, b_2, \\ldots, b_n$ ($1 \\le b_i \\le n$ or $b_i = -1$).\nAdditional constraint: it's guaranteed that for any $i$ ($1 \\le i \\le n$) the sequence $b_i, b_{b_i}, b_{b_{b_i}}, \\ldots$ is not cyclic, in other words it will always end with $-1$.\n-----Output-----\nIn the first line, print the maximum $ans$ you can get.\nIn the second line, print the order of operations: $n$ different integers $p_1, p_2, \\ldots, p_n$ ($1 \\le p_i \\le n$). The $p_i$ is the position which should be chosen at the $i$-th step. If there are multiple orders, print any of them.\n-----Examples-----\nInput\n3\n1 2 3\n2 3 -1\nOutput\n10\n1 2 3 \nInput\n2\n-1 100\n2 -1\nOutput\n99\n2 1 \nInput\n10\n-10 -1 2 2 5 -2 -3 -4 2 -6\n-1 -1 2 2 -1 5 5 7 7 9\nOutput\n-9\n3 5 6 1 9 4 10 7 8 2\n\ndef",
        "answer": "def solution(a, b):\n    ans = 0\n    for i in range(len(a)):\n        if b[i]!= -1:\n            ans += a[i]\n            a[i] = b[i]\n    return ans",
        "difficulty": "interview"
    },
    {
        "task_id": 2404,
        "prompt": "Complete the Python function given the prompt below:There was once young lass called Mary,  \nWhose jokes were occasionally scary.  \nOn this April's Fool  \nFixed limerick rules  \nAllowed her to trip the unwary.\nCan she fill all the lines\nTo work at all times?\nOn juggling the words\nRight around two-thirds\nShe nearly ran out of rhymes.\n\n-----Input-----\nThe input contains a single integer $a$ ($4 \\le a \\le 998$). Not every integer in the range is a valid input for the problem; you are guaranteed that the input will be a valid integer.\n-----Output-----\nOutput a single number.\n-----Examples-----\nInput\n35\nOutput\n57\nInput\n57\nOutput\n319\nInput\n391\nOutput\n1723\n\ndef",
        "answer": "def solve(a):\n    return a*a*a",
        "difficulty": "interview"
    },
    {
        "task_id": 2405,
        "prompt": "Complete the Python function given the prompt below:A factory produces thimbles in bulk. Typically, it can produce up to a thimbles a day. However, some of the machinery is defective, so it can currently only produce b thimbles each day. The factory intends to choose a k-day period to do maintenance and construction; it cannot produce any thimbles during this time, but will be restored to its full production of a thimbles per day after the k days are complete.\nInitially, no orders are pending. The factory receives updates of the form d_{i}, a_{i}, indicating that a_{i} new orders have been placed for the d_{i}-th day. Each order requires a single thimble to be produced on precisely the specified day. The factory may opt to fill as many or as few of the orders in a single batch as it likes.\nAs orders come in, the factory owner would like to know the maximum number of orders he will be able to fill if he starts repairs on a given day p_{i}. Help the owner answer his questions.\n-----Input-----\nThe first line contains five integers n, k, a, b, and q (1 \u2264 k \u2264 n \u2264 200 000, 1 \u2264 b < a \u2264 10 000, 1 \u2264 q \u2264 200 000)\u00a0\u2014 the number of days, the length of the repair time, the production rates of the factory, and the number of updates, respectively.\nThe next q lines contain the descriptions of the queries. Each query is of one of the following two forms:   1 d_{i} a_{i} (1 \u2264 d_{i} \u2264 n, 1 \u2264 a_{i} \u2264 10 000), representing an update of a_{i} orders on day d_{i}, or  2 p_{i} (1 \u2264 p_{i} \u2264 n - k + 1), representing a question: at the moment, how many orders could be filled if the factory decided to commence repairs on day p_{i}? \nIt's guaranteed that the input will contain at least one query of the second type.\n-----Output-----\nFor each query of the second type, print a line containing a single integer \u2014 the maximum number of orders that the factory can fill over all n days.\n-----Examples-----\nInput\n5 2 2 1 8\n1 1 2\n1 5 3\n1 2 1\n2 2\n1 4 2\n1 3 2\n2 1\n2 3\nOutput\n3\n6\n4\nInput\n5 4 10 1 6\n1 1 5\n1 5 5\n1 3 2\n1 5 2\n2 1\n2 2\nOutput\n7\n1\n-----Note-----\nConsider the first sample.\nWe produce up to 1 thimble a day currently and will produce up to 2 thimbles a day after repairs. Repairs take 2 days.\nFor the first question, we are able to fill 1 order on day 1, no orders on days 2 and 3 since we are repairing, no orders on day 4 since no thimbles have been ordered for that day, and 2 orders for day 5 since we are limited to our production capacity, for a total of 3 orders filled.\nFor the third question, we are able to fill 1 order on day 1, 1 order on day 2, and 2 orders on day 5, for a total of 4 orders.\n\ndef",
        "answer": "def factory(n, k, a, b, q):\n    orders = [0] * n\n    for i in range(q):\n        if i % 2 == 0:\n            d, a = map(int, input().split())\n            orders[d - 1] += a\n        else:\n            p = int(input())\n            print(max(orders[p - k:p]))",
        "difficulty": "interview"
    },
    {
        "task_id": 2406,
        "prompt": "Complete the Python function given the prompt below:Omkar is standing at the foot of Celeste mountain. The summit is $n$ meters away from him, and he can see all of the mountains up to the summit, so for all $1 \\leq j \\leq n$ he knows that the height of the mountain at the point $j$ meters away from himself is $h_j$ meters. It turns out that for all $j$ satisfying $1 \\leq j \\leq n - 1$, $h_j < h_{j + 1}$ (meaning that heights are strictly increasing).\nSuddenly, a landslide occurs! While the landslide is occurring, the following occurs: every minute, if $h_j + 2 \\leq h_{j + 1}$, then one square meter of dirt will slide from position $j + 1$ to position $j$, so that $h_{j + 1}$ is decreased by $1$ and $h_j$ is increased by $1$. These changes occur simultaneously, so for example, if $h_j + 2 \\leq h_{j + 1}$ and $h_{j + 1} + 2 \\leq h_{j + 2}$ for some $j$, then $h_j$ will be increased by $1$, $h_{j + 2}$ will be decreased by $1$, and $h_{j + 1}$ will be both increased and decreased by $1$, meaning that in effect $h_{j + 1}$ is unchanged during that minute.\nThe landslide ends when there is no $j$ such that $h_j + 2 \\leq h_{j + 1}$. Help Omkar figure out what the values of $h_1, \\dots, h_n$ will be after the landslide ends. It can be proven that under the given constraints, the landslide will always end in finitely many minutes.\nNote that because of the large amount of input, it is recommended that your code uses fast IO.\n-----Input-----\nThe first line contains a single integer $n$ ($1 \\leq n \\leq 10^6$). \nThe second line contains $n$ integers $h_1, h_2, \\dots, h_n$ satisfying $0 \\leq h_1 < h_2 < \\dots < h_n \\leq 10^{12}$\u00a0\u2014 the heights.\n-----Output-----\nOutput $n$ integers, where the $j$-th integer is the value of $h_j$ after the landslide has stopped.\n-----Example-----\nInput\n4\n2 6 7 8\nOutput\n5 5 6 7\n-----Note-----\nInitially, the mountain has heights $2, 6, 7, 8$.\nIn the first minute, we have $2 + 2 \\leq 6$, so $2$ increases to $3$ and $6$ decreases to $5$, leaving $3, 5, 7, 8$.\nIn the second minute, we have $3 + 2 \\leq 5$ and $5 + 2 \\leq 7$, so $3$ increases to $4$, $5$ is unchanged, and $7$ decreases to $6$, leaving $4, 5, 6, 8$.\nIn the third minute, we have $6 + 2 \\leq 8$, so $6$ increases to $7$ and $8$ decreases to $7$, leaving $4, 5, 7, 7$.\nIn the fourth minute, we have $5 + 2 \\leq 7$, so $5$ increases to $6$ and $7$ decreases to $6$, leaving $4, 6, 6, 7$.\nIn the fifth minute, we have $4 + 2 \\leq 6$, so $4$ increases to $5$ and $6$ decreases to $5$, leaving $5, 5, 6, 7$.\nIn the sixth minute, nothing else can change so the landslide stops and our answer is $5, 5, 6, 7$.\n\ndef",
        "answer": "def landslide():\n    n = int(input())\n    h = list(map(int, input().split()))\n    h_new = [h[0]]\n    for i in range(1, n):\n        if h[i] + 2 <= h[i + 1]:\n            h_new.append(h[i])\n        else:\n            h_new.append(h[i] + 1)\n    print(*h_new)",
        "difficulty": "interview"
    },
    {
        "task_id": 2407,
        "prompt": "Complete the Python function given the prompt below:Ivan plays an old action game called Heretic. He's stuck on one of the final levels of this game, so he needs some help with killing the monsters.\nThe main part of the level is a large corridor (so large and narrow that it can be represented as an infinite coordinate line). The corridor is divided into two parts; let's assume that the point $x = 0$ is where these parts meet.\nThe right part of the corridor is filled with $n$ monsters \u2014 for each monster, its initial coordinate $x_i$ is given (and since all monsters are in the right part, every $x_i$ is positive).\nThe left part of the corridor is filled with crusher traps. If some monster enters the left part of the corridor or the origin (so, its current coordinate becomes less than or equal to $0$), it gets instantly killed by a trap.\nThe main weapon Ivan uses to kill the monsters is the Phoenix Rod. It can launch a missile that explodes upon impact, obliterating every monster caught in the explosion and throwing all other monsters away from the epicenter. Formally, suppose that Ivan launches a missile so that it explodes in the point $c$. Then every monster is either killed by explosion or pushed away. Let some monster's current coordinate be $y$, then:\n  if $c = y$, then the monster is killed;  if $y < c$, then the monster is pushed $r$ units to the left, so its current coordinate becomes $y - r$;  if $y > c$, then the monster is pushed $r$ units to the right, so its current coordinate becomes $y + r$. \nIvan is going to kill the monsters as follows: choose some integer point $d$ and launch a missile into that point, then wait until it explodes and all the monsters which are pushed to the left part of the corridor are killed by crusher traps, then, if at least one monster is still alive, choose another integer point (probably the one that was already used) and launch a missile there, and so on.\nWhat is the minimum number of missiles Ivan has to launch in order to kill all of the monsters? You may assume that every time Ivan fires the Phoenix Rod, he chooses the impact point optimally.\nYou have to answer $q$ independent queries.\n-----Input-----\nThe first line contains one integer $q$ ($1 \\le q \\le 10^5$) \u2014 the number of queries.\nThe first line of each query contains two integers $n$ and $r$ ($1 \\le n, r \\le 10^5$)\u00a0\u2014 the number of enemies and the distance that the enemies are thrown away from the epicenter of the explosion.\nThe second line of each query contains $n$ integers $x_i$ ($1 \\le x_i \\le 10^5$)\u00a0\u2014 the initial positions of the monsters.\nIt is guaranteed that sum of all $n$ over all queries does not exceed $10^5$.\n-----Output-----\nFor each query print one integer\u00a0\u2014 the minimum number of shots from the Phoenix Rod required to kill all monsters.\n-----Example-----\nInput\n2\n3 2\n1 3 5\n4 1\n5 2 3 5\nOutput\n2\n2\n-----Note-----\nIn the first test case, Ivan acts as follows:   choose the point $3$, the first monster dies from a crusher trap at the point $-1$, the second monster dies from the explosion, the third monster is pushed to the point $7$;  choose the point $7$, the third monster dies from the explosion. \nIn the second test case, Ivan acts as follows:   choose the point $5$, the first and fourth monsters die from the explosion, the second monster is pushed to the point $1$, the third monster is pushed to the point $2$;  choose the point $2$, the first monster dies from a crusher trap at the point $0$, the second monster dies from the explosion.\n\ndef",
        "answer": "def solution(n, r, x):\n    x = sorted(x)\n    x = [0] + x + [n]\n    x = [x[i] - x[i - 1] for i in range(1, len(x))]\n    return sum(x[i] // r for i in range(len(x) - 1))",
        "difficulty": "interview"
    },
    {
        "task_id": 2408,
        "prompt": "Complete the Python function given the prompt below:This problem is same as the next one, but has smaller constraints.\nIt was a Sunday morning when the three friends Selena, Shiro and Katie decided to have a trip to the nearby power station (do not try this at home). After arriving at the power station, the cats got impressed with a large power transmission system consisting of many chimneys, electric poles, and wires. Since they are cats, they found those things gigantic.\nAt the entrance of the station, there is a map describing the complicated wiring system. Selena is the best at math among three friends. He decided to draw the map on the Cartesian plane. Each pole is now a point at some coordinates $(x_i, y_i)$. Since every pole is different, all of the points representing these poles are distinct. Also, every two poles are connected with each other by wires. A wire is a straight line on the plane infinite in both directions. If there are more than two poles lying on the same line, they are connected by a single common wire.\nSelena thinks, that whenever two different electric wires intersect, they may interfere with each other and cause damage. So he wonders, how many pairs are intersecting? Could you help him with this problem?\n-----Input-----\nThe first line contains a single integer $n$ ($2 \\le n \\le 50$)\u00a0\u2014 the number of electric poles.\nEach of the following $n$ lines contains two integers $x_i$, $y_i$ ($-10^4 \\le x_i, y_i \\le 10^4$)\u00a0\u2014 the coordinates of the poles.\nIt is guaranteed that all of these $n$ points are distinct.\n-----Output-----\nPrint a single integer\u00a0\u2014 the number of pairs of wires that are intersecting.\n-----Examples-----\nInput\n4\n0 0\n1 1\n0 3\n1 2\nOutput\n14\nInput\n4\n0 0\n0 2\n0 4\n2 0\nOutput\n6\nInput\n3\n-1 -1\n1 0\n3 1\nOutput\n0\n-----Note-----\nIn the first example: [Image] \nIn the second example: [Image] \nNote that the three poles $(0, 0)$, $(0, 2)$ and $(0, 4)$ are connected by a single wire.\nIn the third example: [Image]\n\ndef",
        "answer": "def count_wires(n):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    }
]