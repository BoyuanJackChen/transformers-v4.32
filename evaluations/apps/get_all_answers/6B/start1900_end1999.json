[
    {
        "task_id": 1900,
        "prompt": "Complete the Python function given the prompt below:This time the Berland Team Olympiad in Informatics is held in a remote city that can only be reached by one small bus. Bus has n passenger seats, seat i can be occupied only by a participant from the city a_{i}.\nToday the bus has completed m trips, each time bringing n participants. The participants were then aligned in one line in the order they arrived, with people from the same bus standing in the order of their seats (i.\u00a0e. if we write down the cities where the participants came from, we get the sequence a_1, a_2,..., a_{n} repeated m times).\nAfter that some teams were formed, each consisting of k participants form the same city standing next to each other in the line. Once formed, teams left the line. The teams were formed until there were no k neighboring participants from the same city.\nHelp the organizers determine how many participants have left in the line after that process ended. We can prove that answer doesn't depend on the order in which teams were selected.\n-----Input-----\nThe first line contains three integers n, k and m (1 \u2264 n \u2264 10^5, 2 \u2264 k \u2264 10^9, 1 \u2264 m \u2264 10^9).\nThe second line contains n integers a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 10^5), where a_{i} is the number of city, person from which must take seat i in the bus. \n-----Output-----\nOutput the number of remaining participants in the line.\n-----Examples-----\nInput\n4 2 5\n1 2 3 1\nOutput\n12\nInput\n1 9 10\n1\nOutput\n1\nInput\n3 2 10\n1 2 1\nOutput\n0\n-----Note-----\nIn the second example, the line consists of ten participants from the same city. Nine of them will form a team. At the end, only one participant will stay in the line.\n\ndef",
        "answer": "def solution(n, k, m):\n    return n - (k * m)",
        "difficulty": "interview"
    },
    {
        "task_id": 1901,
        "prompt": "Complete the Python function given the prompt below:Vova promised himself that he would never play computer games... But recently Firestorm \u2014 a well-known game developing company \u2014 published their newest game, World of Farcraft, and it became really popular. Of course, Vova started playing it.\nNow he tries to solve a quest. The task is to come to a settlement named Overcity and spread a rumor in it.\nVova knows that there are n characters in Overcity. Some characters are friends to each other, and they share information they got. Also Vova knows that he can bribe each character so he or she starts spreading the rumor; i-th character wants c_{i} gold in exchange for spreading the rumor. When a character hears the rumor, he tells it to all his friends, and they start spreading the rumor to their friends (for free), and so on.\nThe quest is finished when all n characters know the rumor. What is the minimum amount of gold Vova needs to spend in order to finish the quest?\nTake a look at the notes if you think you haven't understood the problem completely.\n-----Input-----\nThe first line contains two integer numbers n and m (1 \u2264 n \u2264 10^5, 0 \u2264 m \u2264 10^5) \u2014 the number of characters in Overcity and the number of pairs of friends.\nThe second line contains n integer numbers c_{i} (0 \u2264 c_{i} \u2264 10^9) \u2014 the amount of gold i-th character asks to start spreading the rumor.\nThen m lines follow, each containing a pair of numbers (x_{i}, y_{i}) which represent that characters x_{i} and y_{i} are friends (1 \u2264 x_{i}, y_{i} \u2264 n, x_{i} \u2260 y_{i}). It is guaranteed that each pair is listed at most once.\n-----Output-----\nPrint one number \u2014 the minimum amount of gold Vova has to spend in order to finish the quest.\n-----Examples-----\nInput\n5 2\n2 5 3 4 8\n1 4\n4 5\nOutput\n10\nInput\n10 0\n1 2 3 4 5 6 7 8 9 10\nOutput\n55\nInput\n10 5\n1 6 2 7 3 8 4 9 5 10\n1 2\n3 4\n5 6\n7 8\n9 10\nOutput\n15\n-----Note-----\nIn the first example the best decision is to bribe the first character (he will spread the rumor to fourth character, and the fourth one will spread it to fifth). Also Vova has to bribe the second and the third characters, so they know the rumor.\nIn the second example Vova has to bribe everyone.\nIn the third example the optimal decision is to bribe the first, the third, the fifth, the seventh and the ninth characters.\n\ndef",
        "answer": "def solve(n, m, c):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 1902,
        "prompt": "Complete the Python function given the prompt below:Arcady is a copywriter. His today's task is to type up an already well-designed story using his favorite text editor.\nArcady types words, punctuation signs and spaces one after another. Each letter and each sign (including line feed) requires one keyboard click in order to be printed. Moreover, when Arcady has a non-empty prefix of some word on the screen, the editor proposes a possible autocompletion for this word, more precisely one of the already printed words such that its prefix matches the currently printed prefix if this word is unique. For example, if Arcady has already printed \u00abcodeforces\u00bb, \u00abcoding\u00bb and \u00abcodeforces\u00bb once again, then there will be no autocompletion attempt for \u00abcod\u00bb, but if he proceeds with \u00abcode\u00bb, the editor will propose \u00abcodeforces\u00bb.\nWith a single click Arcady can follow the editor's proposal, i.e. to transform the current prefix to it. Note that no additional symbols are printed after the autocompletion (no spaces, line feeds, etc). What is the minimum number of keyboard clicks Arcady has to perform to print the entire text, if he is not allowed to move the cursor or erase the already printed symbols?\nA word here is a contiguous sequence of latin letters bordered by spaces, punctuation signs and line/text beginnings/ends. Arcady uses only lowercase letters. For example, there are 20 words in \u00abit's well-known that tic-tac-toe is a paper-and-pencil game for two players, x and o.\u00bb.\n-----Input-----\nThe only line contains Arcady's text, consisting only of lowercase latin letters, spaces, line feeds and the following punctuation signs: \u00ab.\u00bb, \u00ab,\u00bb, \u00ab?\u00bb, \u00ab!\u00bb, \u00ab'\u00bb and \u00ab-\u00bb. The total amount of symbols doesn't exceed 3\u00b710^5. It's guaranteed that all lines are non-empty.\n-----Output-----\nPrint a single integer \u2014 the minimum number of clicks.\n-----Examples-----\nInput\nsnow affects sports such as skiing, snowboarding, and snowmachine travel.\nsnowboarding is a recreational activity and olympic and paralympic sport.\nOutput\n141\nInput\n'co-co-co, codeforces?!'\nOutput\n25\nInput\nthun-thun-thunder, thunder, thunder\nthunder, thun-, thunder\nthun-thun-thunder, thunder\nthunder, feel the thunder\nlightning then the thunder\nthunder, feel the thunder\nlightning then the thunder\nthunder, thunder\nOutput\n183\n-----Note-----\nIn sample case one it's optimal to use autocompletion for the first instance of \u00absnowboarding\u00bb after typing up \u00absn\u00bb and for the second instance of \u00absnowboarding\u00bb after typing up \u00absnowb\u00bb. This will save 7 clicks.\nIn sample case two it doesn't matter whether to use autocompletion or not.\n\ndef",
        "answer": "def autocomplete(text):\n    return",
        "difficulty": "interview"
    },
    {
        "task_id": 1903,
        "prompt": "Complete the Python function given the prompt below:Stepan is a very experienced olympiad participant. He has n cups for Physics olympiads and m cups for Informatics olympiads. Each cup is characterized by two parameters \u2014 its significance c_{i} and width w_{i}.\nStepan decided to expose some of his cups on a shelf with width d in such a way, that:  there is at least one Physics cup and at least one Informatics cup on the shelf,  the total width of the exposed cups does not exceed d,  from each subjects (Physics and Informatics) some of the most significant cups are exposed (i. e. if a cup for some subject with significance x is exposed, then all the cups for this subject with significance greater than x must be exposed too). \nYour task is to determine the maximum possible total significance, which Stepan can get when he exposes cups on the shelf with width d, considering all the rules described above. The total significance is the sum of significances of all the exposed cups.\n-----Input-----\nThe first line contains three integers n, m and d (1 \u2264 n, m \u2264 100 000, 1 \u2264 d \u2264 10^9) \u2014 the number of cups for Physics olympiads, the number of cups for Informatics olympiads and the width of the shelf.\nEach of the following n lines contains two integers c_{i} and w_{i} (1 \u2264 c_{i}, w_{i} \u2264 10^9) \u2014 significance and width of the i-th cup for Physics olympiads.\nEach of the following m lines contains two integers c_{j} and w_{j} (1 \u2264 c_{j}, w_{j} \u2264 10^9) \u2014 significance and width of the j-th cup for Informatics olympiads.\n-----Output-----\nPrint the maximum possible total significance, which Stepan can get exposing cups on the shelf with width d, considering all the rules described in the statement.\nIf there is no way to expose cups on the shelf, then print 0.\n-----Examples-----\nInput\n3 1 8\n4 2\n5 5\n4 2\n3 2\nOutput\n8\nInput\n4 3 12\n3 4\n2 4\n3 5\n3 4\n3 5\n5 2\n3 4\nOutput\n11\nInput\n2 2 2\n5 3\n6 3\n4 2\n8 1\nOutput\n0\n-----Note-----\nIn the first example Stepan has only one Informatics cup which must be exposed on the shelf. Its significance equals 3 and width equals 2, so after Stepan exposes it, the width of free space on the shelf becomes equal to 6. Also, Stepan must expose the second Physics cup (which has width 5), because it is the most significant cup for Physics (its significance equals 5). After that Stepan can not expose more cups on the shelf, because there is no enough free space. Thus, the maximum total significance of exposed cups equals to 8.\n\ndef",
        "answer": "def max_significance(n, m, d):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 1904,
        "prompt": "Complete the Python function given the prompt below:Vasya is preparing a contest, and now he has written a statement for an easy problem. The statement is a string of length $n$ consisting of lowercase Latin latters. Vasya thinks that the statement can be considered hard if it contains a subsequence hard; otherwise the statement is easy. For example, hard, hzazrzd, haaaaard can be considered hard statements, while har, hart and drah are easy statements. \nVasya doesn't want the statement to be hard. He may remove some characters from the statement in order to make it easy. But, of course, some parts of the statement can be crucial to understanding. Initially the ambiguity of the statement is $0$, and removing $i$-th character increases the ambiguity by $a_i$ (the index of each character is considered as it was in the original statement, so, for example, if you delete character r from hard, and then character d, the index of d is still $4$ even though you delete it from the string had).\nVasya wants to calculate the minimum ambiguity of the statement, if he removes some characters (possibly zero) so that the statement is easy. Help him to do it!\nRecall that subsequence is a sequence that can be derived from another sequence by deleting some elements without changing the order of the remaining elements.\n-----Input-----\nThe first line contains one integer $n$ ($1 \\le n \\le 10^5$) \u2014 the length of the statement.\nThe second line contains one string $s$ of length $n$, consisting of lowercase Latin letters \u2014 the statement written by Vasya.\nThe third line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 998244353$).\n-----Output-----\nPrint minimum possible ambiguity of the statement after Vasya deletes some (possibly zero) characters so the resulting statement is easy.\n-----Examples-----\nInput\n6\nhhardh\n3 2 9 11 7 1\nOutput\n5\nInput\n8\nhhzarwde\n3 2 6 9 4 8 7 1\nOutput\n4\nInput\n6\nhhaarr\n1 2 3 4 5 6\nOutput\n0\n-----Note-----\nIn the first example, first two characters are removed so the result is ardh.\nIn the second example, $5$-th character is removed so the result is hhzawde.\nIn the third example there's no need to remove anything.\n\ndef",
        "answer": "def minimum_ambiguity(s, a):\n    # your code here\n    return 0",
        "difficulty": "interview"
    },
    {
        "task_id": 1905,
        "prompt": "Complete the Python function given the prompt below:Little Artem likes electronics. He can spend lots of time making different schemas and looking for novelties in the nearest electronics store. The new control element was delivered to the store recently and Artem immediately bought it.\nThat element can store information about the matrix of integers size n \u00d7 m. There are n + m inputs in that element, i.e. each row and each column can get the signal. When signal comes to the input corresponding to some row, this row cyclically shifts to the left, that is the first element of the row becomes last element, second element becomes first and so on. When signal comes to the input corresponding to some column, that column shifts cyclically to the top, that is first element of the column becomes last element, second element becomes first and so on. Rows are numbered with integers from 1 to n from top to bottom, while columns are numbered with integers from 1 to m from left to right.\nArtem wants to carefully study this element before using it. For that purpose he is going to set up an experiment consisting of q turns. On each turn he either sends the signal to some input or checks what number is stored at some position of the matrix.\nArtem has completed his experiment and has written down the results, but he has lost the chip! Help Artem find any initial matrix that will match the experiment results. It is guaranteed that experiment data is consistent, which means at least one valid matrix exists.\n-----Input-----\nThe first line of the input contains three integers n, m and q (1 \u2264 n, m \u2264 100, 1 \u2264 q \u2264 10 000)\u00a0\u2014 dimensions of the matrix and the number of turns in the experiment, respectively.\nNext q lines contain turns descriptions, one per line. Each description starts with an integer t_{i} (1 \u2264 t_{i} \u2264 3) that defines the type of the operation. For the operation of first and second type integer r_{i} (1 \u2264 r_{i} \u2264 n) or c_{i} (1 \u2264 c_{i} \u2264 m) follows, while for the operations of the third type three integers r_{i}, c_{i} and x_{i} (1 \u2264 r_{i} \u2264 n, 1 \u2264 c_{i} \u2264 m,  - 10^9 \u2264 x_{i} \u2264 10^9) are given.\nOperation of the first type (t_{i} = 1) means that signal comes to the input corresponding to row r_{i}, that is it will shift cyclically. Operation of the second type (t_{i} = 2) means that column c_{i} will shift cyclically. Finally, operation of the third type means that at this moment of time cell located in the row r_{i} and column c_{i} stores value x_{i}.\n-----Output-----\nPrint the description of any valid initial matrix as n lines containing m integers each. All output integers should not exceed 10^9 by their absolute value.\nIf there are multiple valid solutions, output any of them.\n-----Examples-----\nInput\n2 2 6\n2 1\n2 2\n3 1 1 1\n3 2 2 2\n3 1 2 8\n3 2 1 8\nOutput\n8 2 \n1 8 \nInput\n3 3 2\n1 2\n3 2 2 5\nOutput\n0 0 0 \n0 0 5 \n0 0 0\n\ndef",
        "answer": "def solution(n, m, q):\n    # Write your code here\n    pass\n",
        "difficulty": "interview"
    },
    {
        "task_id": 1906,
        "prompt": "Complete the Python function given the prompt below:IT City company developing computer games decided to upgrade its way to reward its employees. Now it looks the following way. After a new game release users start buying it actively, and the company tracks the number of sales with precision to each transaction. Every time when the next number of sales is not divisible by any number from 2 to 10 every developer of this game gets a small bonus.\nA game designer Petya knows that the company is just about to release a new game that was partly developed by him. On the basis of his experience he predicts that n people will buy the game during the first month. Now Petya wants to determine how many times he will get the bonus. Help him to know it.\n-----Input-----\nThe only line of the input contains one integer n (1 \u2264 n \u2264 10^18) \u2014 the prediction on the number of people who will buy the game.\n-----Output-----\nOutput one integer showing how many numbers from 1 to n are not divisible by any number from 2 to 10.\n-----Examples-----\nInput\n12\nOutput\n2\n\ndef",
        "answer": "def bonus(n):\n    bonus = 0\n    for i in range(2, 11):\n        if n % i!= 0:\n            bonus += 1\n    return bonus",
        "difficulty": "interview"
    },
    {
        "task_id": 1907,
        "prompt": "Complete the Python function given the prompt below:The crowdedness of the discotheque would never stop our friends from having fun, but a bit more spaciousness won't hurt, will it?\nThe discotheque can be seen as an infinite xy-plane, in which there are a total of n dancers. Once someone starts moving around, they will move only inside their own movement range, which is a circular area C_{i} described by a center (x_{i}, y_{i}) and a radius r_{i}. No two ranges' borders have more than one common point, that is for every pair (i, j) (1 \u2264 i < j \u2264 n) either ranges C_{i} and C_{j} are disjoint, or one of them is a subset of the other. Note that it's possible that two ranges' borders share a single common point, but no two dancers have exactly the same ranges.\nTsukihi, being one of them, defines the spaciousness to be the area covered by an odd number of movement ranges of dancers who are moving. An example is shown below, with shaded regions representing the spaciousness if everyone moves at the same time. [Image] \nBut no one keeps moving for the whole night after all, so the whole night's time is divided into two halves \u2014 before midnight and after midnight. Every dancer moves around in one half, while sitting down with friends in the other. The spaciousness of two halves are calculated separately and their sum should, of course, be as large as possible. The following figure shows an optimal solution to the example above. [Image] \nBy different plans of who dances in the first half and who does in the other, different sums of spaciousness over two halves are achieved. You are to find the largest achievable value of this sum.\n-----Input-----\nThe first line of input contains a positive integer n (1 \u2264 n \u2264 1 000) \u2014 the number of dancers.\nThe following n lines each describes a dancer: the i-th line among them contains three space-separated integers x_{i}, y_{i} and r_{i} ( - 10^6 \u2264 x_{i}, y_{i} \u2264 10^6, 1 \u2264 r_{i} \u2264 10^6), describing a circular movement range centered at (x_{i}, y_{i}) with radius r_{i}.\n-----Output-----\nOutput one decimal number \u2014 the largest achievable sum of spaciousness over two halves of the night.\nThe output is considered correct if it has a relative or absolute error of at most 10^{ - 9}. Formally, let your answer be a, and the jury's answer be b. Your answer is considered correct if $\\frac{|a - b|}{\\operatorname{max}(1,|b|)} \\leq 10^{-9}$.\n-----Examples-----\nInput\n5\n2 1 6\n0 4 1\n2 -1 3\n1 -2 1\n4 -1 1\nOutput\n138.23007676\nInput\n8\n0 0 1\n0 0 2\n0 0 3\n0 0 4\n0 0 5\n0 0 6\n0 0 7\n0 0 8\nOutput\n289.02652413\n-----Note-----\nThe first sample corresponds to the illustrations in the legend.\n\ndef",
        "answer": "def crowdedness(n):\n    # your code here\n    return 0",
        "difficulty": "interview"
    },
    {
        "task_id": 1908,
        "prompt": "Complete the Python function given the prompt below:Lee bought some food for dinner time, but Lee's friends eat dinner in a deadly way. Lee is so scared, he doesn't want to die, at least not before seeing Online IOI 2020...\nThere are $n$ different types of food and $m$ Lee's best friends. Lee has $w_i$ plates of the $i$-th type of food and each friend has two different favorite types of food: the $i$-th friend's favorite types of food are $x_i$ and $y_i$ ($x_i \\ne y_i$).\nLee will start calling his friends one by one. Whoever is called will go to the kitchen and will try to eat one plate of each of his favorite food types. Each of the friends will go to the kitchen exactly once.\nThe only problem is the following: if a friend will eat at least one plate of food (in total) then he will be harmless. But if there is nothing left for him to eat (neither $x_i$ nor $y_i$), he will eat Lee instead $\\times\\_\\times$.\nLee can choose the order of friends to call, so he'd like to determine if he can survive dinner or not. Also, he'd like to know the order itself.\n-----Input-----\nThe first line contains two integers $n$ and $m$ ($2 \\le n \\le 10^5$; $1 \\le m \\le 2 \\cdot 10^5$)\u00a0\u2014 the number of different food types and the number of Lee's friends. \nThe second line contains $n$ integers $w_1, w_2, \\ldots, w_n$ ($0 \\le w_i \\le 10^6$)\u00a0\u2014 the number of plates of each food type.\nThe $i$-th line of the next $m$ lines contains two integers $x_i$ and $y_i$ ($1 \\le x_i, y_i \\le n$; $x_i \\ne y_i$)\u00a0\u2014 the favorite types of food of the $i$-th friend. \n-----Output-----\nIf Lee can survive the dinner then print ALIVE (case insensitive), otherwise print DEAD (case insensitive).\nAlso, if he can survive the dinner, print the order Lee should call friends. If there are multiple valid orders, print any of them.\n-----Examples-----\nInput\n3 3\n1 2 1\n1 2\n2 3\n1 3\nOutput\nALIVE\n3 2 1 \nInput\n3 2\n1 1 0\n1 2\n1 3\nOutput\nALIVE\n2 1 \nInput\n4 4\n1 2 0 1\n1 3\n1 2\n2 3\n2 4\nOutput\nALIVE\n1 3 2 4 \nInput\n5 5\n1 1 1 2 1\n3 4\n1 2\n2 3\n4 5\n4 5\nOutput\nALIVE\n5 4 1 3 2 \nInput\n4 10\n2 4 1 4\n3 2\n4 2\n4 1\n3 1\n4 1\n1 3\n3 2\n2 1\n3 1\n2 4\nOutput\nDEAD\n-----Note-----\nIn the first example, any of the following orders of friends are correct : $[1, 3, 2]$, $[3, 1, 2]$, $[2, 3, 1]$, $[3, 2, 1]$.\nIn the second example, Lee should call the second friend first (the friend will eat a plate of food $1$) and then call the first friend (the friend will eat a plate of food $2$). If he calls the first friend sooner than the second one, then the first friend will eat one plate of food $1$ and food $2$ and there will be no food left for the second friend to eat.\n\ndef",
        "answer": "def solution(n, m, w, x, y):\n    # Write your code here\n    pass\n",
        "difficulty": "interview"
    },
    {
        "task_id": 1909,
        "prompt": "Complete the Python function given the prompt below:You helped Dima to have a great weekend, but it's time to work. Naturally, Dima, as all other men who have girlfriends, does everything wrong.\nInna and Dima are now in one room. Inna tells Dima off for everything he does in her presence. After Inna tells him off for something, she goes to another room, walks there in circles muttering about how useless her sweetheart is. During that time Dima has time to peacefully complete k - 1 tasks. Then Inna returns and tells Dima off for the next task he does in her presence and goes to another room again. It continues until Dima is through with his tasks.\nOverall, Dima has n tasks to do, each task has a unique number from 1 to n. Dima loves order, so he does tasks consecutively, starting from some task. For example, if Dima has 6 tasks to do in total, then, if he starts from the 5-th task, the order is like that: first Dima does the 5-th task, then the 6-th one, then the 1-st one, then the 2-nd one, then the 3-rd one, then the 4-th one.\nInna tells Dima off (only lovingly and appropriately!) so often and systematically that he's very well learned the power with which she tells him off for each task. Help Dima choose the first task so that in total he gets told off with as little power as possible.\n-----Input-----\nThe first line of the input contains two integers n, k\u00a0(1 \u2264 k \u2264 n \u2264 10^5). The second line contains n integers a_1, a_2,..., a_{n}\u00a0(1 \u2264 a_{i} \u2264 10^3), where a_{i} is the power Inna tells Dima off with if she is present in the room while he is doing the i-th task.\nIt is guaranteed that n is divisible by k.\n-----Output-----\nIn a single line print the number of the task Dima should start with to get told off with as little power as possible. If there are multiple solutions, print the one with the minimum number of the first task to do.\n-----Examples-----\nInput\n6 2\n3 2 1 6 5 4\nOutput\n1\nInput\n10 5\n1 3 5 7 9 9 4 1 8 5\nOutput\n3\n-----Note-----\nExplanation of the first example.\nIf Dima starts from the first task, Inna tells him off with power 3, then Dima can do one more task (as k = 2), then Inna tells him off for the third task with power 1, then she tells him off for the fifth task with power 5. Thus, Dima gets told off with total power 3 + 1 + 5 = 9. If Dima started from the second task, for example, then Inna would tell him off for tasks 2, 4 and 6 with power 2 + 6 + 4 = 12. \nExplanation of the second example.\nIn the second example k = 5, thus, Dima manages to complete 4 tasks in-between the telling off sessions. Thus, Inna tells Dima off for tasks number 1 and 6 (if he starts from 1 or 6), 2 and 7 (if he starts from 2 or 7) and so on. The optimal answer is to start from task 3 or 8, 3 has a smaller number, so the answer is 3.\n\ndef",
        "answer": "def solution(n, k):\n    return n % k",
        "difficulty": "interview"
    },
    {
        "task_id": 1910,
        "prompt": "Complete the Python function given the prompt below:To quickly hire highly skilled specialists one of the new IT City companies made an unprecedented move. Every employee was granted a car, and an employee can choose one of four different car makes.\nThe parking lot before the office consists of one line of (2n - 2) parking spaces. Unfortunately the total number of cars is greater than the parking lot capacity. Furthermore even amount of cars of each make is greater than the amount of parking spaces! That's why there are no free spaces on the parking lot ever.\nLooking on the straight line of cars the company CEO thought that parking lot would be more beautiful if it contained exactly n successive cars of the same make. Help the CEO determine the number of ways to fill the parking lot this way.\n-----Input-----\nThe only line of the input contains one integer n (3 \u2264 n \u2264 30) \u2014 the amount of successive cars of the same make.\n-----Output-----\nOutput one integer \u2014 the number of ways to fill the parking lot by cars of four makes using the described way.\n-----Examples-----\nInput\n3\nOutput\n24\n-----Note-----\nLet's denote car makes in the following way: A \u2014 Aston Martin, B \u2014   Bentley, M \u2014 Mercedes-Maybach, Z \u2014 Zaporozhets. For n = 3 there are the following appropriate ways to fill the parking lot: AAAB AAAM AAAZ ABBB AMMM AZZZ BBBA BBBM BBBZ BAAA BMMM BZZZ MMMA MMMB MMMZ MAAA MBBB MZZZ ZZZA ZZZB ZZZM ZAAA ZBBB ZMMM\nOriginally it was planned to grant sport cars of Ferrari, Lamborghini, Maserati and Bugatti makes but this idea was renounced because it is impossible to drive these cars having small road clearance on the worn-down roads of IT City.\n\ndef",
        "answer": "def solution(n):\n    return 0",
        "difficulty": "interview"
    },
    {
        "task_id": 1911,
        "prompt": "Complete the Python function given the prompt below:You are given a sorted array $a_1, a_2, \\dots, a_n$ (for each index $i > 1$ condition $a_i \\ge a_{i-1}$ holds) and an integer $k$.\nYou are asked to divide this array into $k$ non-empty consecutive subarrays. Every element in the array should be included in exactly one subarray. \nLet $max(i)$ be equal to the maximum in the $i$-th subarray, and $min(i)$ be equal to the minimum in the $i$-th subarray. The cost of division is equal to $\\sum\\limits_{i=1}^{k} (max(i) - min(i))$. For example, if $a = [2, 4, 5, 5, 8, 11, 19]$ and we divide it into $3$ subarrays in the following way: $[2, 4], [5, 5], [8, 11, 19]$, then the cost of division is equal to $(4 - 2) + (5 - 5) + (19 - 8) = 13$.\nCalculate the minimum cost you can obtain by dividing the array $a$ into $k$ non-empty consecutive subarrays. \n-----Input-----\nThe first line contains two integers $n$ and $k$ ($1 \\le k \\le n \\le 3 \\cdot 10^5$).\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($ 1 \\le a_i \\le 10^9$, $a_i \\ge a_{i-1}$). \n-----Output-----\nPrint the minimum cost you can obtain by dividing the array $a$ into $k$ nonempty consecutive subarrays. \n-----Examples-----\nInput\n6 3\n4 8 15 16 23 42\nOutput\n12\nInput\n4 4\n1 3 3 7\nOutput\n0\nInput\n8 1\n1 1 2 3 5 8 13 21\nOutput\n20\n-----Note-----\nIn the first test we can divide array $a$ in the following way: $[4, 8, 15, 16], [23], [42]$.\n\ndef",
        "answer": "def minimum_cost(a, k):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 1912,
        "prompt": "Complete the Python function given the prompt below:Boboniu gives you\n  $r$ red balls,  $g$ green balls,  $b$ blue balls,  $w$ white balls. \nHe allows you to do the following operation as many times as you want: \n  Pick a red ball, a green ball, and a blue ball and then change their color to white. \nYou should answer if it's possible to arrange all the balls into a palindrome after several (possibly zero) number of described operations. \n-----Input-----\nThe first line contains one integer $T$ ($1\\le T\\le 100$) denoting the number of test cases.\nFor each of the next $T$ cases, the first line contains four integers $r$, $g$, $b$ and $w$ ($0\\le r,g,b,w\\le 10^9$).\n-----Output-----\nFor each test case, print \"Yes\" if it's possible to arrange all the balls into a palindrome after doing several (possibly zero) number of described operations. Otherwise, print \"No\".\n-----Example-----\nInput\n4\n0 1 1 1\n8 1 9 3\n0 0 0 0\n1000000000 1000000000 1000000000 1000000000\nOutput\nNo\nYes\nYes\nYes\n-----Note-----\nIn the first test case, you're not able to do any operation and you can never arrange three balls of distinct colors into a palindrome.\nIn the second test case, after doing one operation, changing $(8,1,9,3)$ to $(7,0,8,6)$, one of those possible palindromes may be \"rrrwwwbbbbrbbbbwwwrrr\".\nA palindrome is a word, phrase, or sequence that reads the same backwards as forwards. For example, \"rggbwbggr\", \"b\", \"gg\" are palindromes while \"rgbb\", \"gbbgr\" are not. Notice that an empty word, phrase, or sequence is palindrome.\n\ndef",
        "answer": "def isPalindrome(s):\n    return s == s[::-1]",
        "difficulty": "interview"
    },
    {
        "task_id": 1913,
        "prompt": "Complete the Python function given the prompt below:It's the year 4527 and the tanks game that we all know and love still exists. There also exists Great Gena's code, written in 2016. The problem this code solves is: given the number of tanks that go into the battle from each country, find their product. If it is turns to be too large, then the servers might have not enough time to assign tanks into teams and the whole game will collapse!\nThere are exactly n distinct countries in the world and the i-th country added a_{i} tanks to the game. As the developers of the game are perfectionists, the number of tanks from each country is beautiful. A beautiful number, according to the developers, is such number that its decimal representation consists only of digits '1' and '0', moreover it contains at most one digit '1'. However, due to complaints from players, some number of tanks of one country was removed from the game, hence the number of tanks of this country may not remain beautiful.\nYour task is to write the program that solves exactly the same problem in order to verify Gena's code correctness. Just in case.\n-----Input-----\nThe first line of the input contains the number of countries n (1 \u2264 n \u2264 100 000). The second line contains n non-negative integers a_{i} without leading zeroes\u00a0\u2014 the number of tanks of the i-th country.\nIt is guaranteed that the second line contains at least n - 1 beautiful numbers and the total length of all these number's representations doesn't exceed 100 000.\n-----Output-----\nPrint a single number without leading zeroes\u00a0\u2014 the product of the number of tanks presented by each country.\n-----Examples-----\nInput\n3\n5 10 1\nOutput\n50\nInput\n4\n1 1 10 11\nOutput\n110\nInput\n5\n0 3 1 100 1\nOutput\n0\n-----Note-----\nIn sample 1 numbers 10 and 1 are beautiful, number 5 is not not.\nIn sample 2 number 11 is not beautiful (contains two '1's), all others are beautiful.\nIn sample 3 number 3 is not beautiful, all others are beautiful.\n\ndef",
        "answer": "def main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(product(a))",
        "difficulty": "interview"
    },
    {
        "task_id": 1914,
        "prompt": "Complete the Python function given the prompt below:You are given a string $t$ and $n$ strings $s_1, s_2, \\dots, s_n$. All strings consist of lowercase Latin letters.\nLet $f(t, s)$ be the number of occurences of string $s$ in string $t$. For example, $f('\\text{aaabacaa}', '\\text{aa}') = 3$, and $f('\\text{ababa}', '\\text{aba}') = 2$.\nCalculate the value of $\\sum\\limits_{i=1}^{n} \\sum\\limits_{j=1}^{n} f(t, s_i + s_j)$, where $s + t$ is the concatenation of strings $s$ and $t$. Note that if there are two pairs $i_1$, $j_1$ and $i_2$, $j_2$ such that $s_{i_1} + s_{j_1} = s_{i_2} + s_{j_2}$, you should include both $f(t, s_{i_1} + s_{j_1})$ and $f(t, s_{i_2} + s_{j_2})$ in answer.\n-----Input-----\nThe first line contains string $t$ ($1 \\le |t| \\le 2 \\cdot 10^5$).\nThe second line contains integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$).\nEach of next $n$ lines contains string $s_i$ ($1 \\le |s_i| \\le 2 \\cdot 10^5$).\nIt is guaranteed that $\\sum\\limits_{i=1}^{n} |s_i| \\le 2 \\cdot 10^5$. All strings consist of lowercase English letters.\n-----Output-----\nPrint one integer \u2014 the value of $\\sum\\limits_{i=1}^{n} \\sum\\limits_{j=1}^{n} f(t, s_i + s_j)$.\n-----Examples-----\nInput\naaabacaa\n2\na\naa\nOutput\n5\nInput\naaabacaa\n4\na\na\na\nb\nOutput\n33\n\ndef",
        "answer": "def f(t, s):\n    return t.count(s)",
        "difficulty": "interview"
    },
    {
        "task_id": 1915,
        "prompt": "Complete the Python function given the prompt below:An n \u00d7 n table a is defined as follows:\n  The first row and the first column contain ones, that is: a_{i}, 1 = a_{1, }i = 1 for all i = 1, 2,..., n.  Each of the remaining numbers in the table is equal to the sum of the number above it and the number to the left of it. In other words, the remaining elements are defined by the formula a_{i}, j = a_{i} - 1, j + a_{i}, j - 1. \nThese conditions define all the values in the table.\nYou are given a number n. You need to determine the maximum value in the n \u00d7 n table defined by the rules above.\n-----Input-----\nThe only line of input contains a positive integer n (1 \u2264 n \u2264 10) \u2014 the number of rows and columns of the table.\n-----Output-----\nPrint a single line containing a positive integer m \u2014 the maximum value in the table.\n-----Examples-----\nInput\n1\nOutput\n1\nInput\n5\nOutput\n70\n-----Note-----\nIn the second test the rows of the table look as follows: {1, 1, 1, 1, 1},  {1, 2, 3, 4, 5},  {1, 3, 6, 10, 15},  {1, 4, 10, 20, 35},  {1, 5, 15, 35, 70}.\n\ndef",
        "answer": "def max_in_table(n):\n    return n * (n + 1) // 2",
        "difficulty": "interview"
    },
    {
        "task_id": 1916,
        "prompt": "Complete the Python function given the prompt below:Boboniu likes bit operations. He wants to play a game with you.\nBoboniu gives you two sequences of non-negative integers $a_1,a_2,\\ldots,a_n$ and $b_1,b_2,\\ldots,b_m$.\nFor each $i$ ($1\\le i\\le n$), you're asked to choose a $j$ ($1\\le j\\le m$) and let $c_i=a_i\\& b_j$, where $\\&$ denotes the bitwise AND operation. Note that you can pick the same $j$ for different $i$'s.\nFind the minimum possible $c_1 | c_2 | \\ldots | c_n$, where $|$ denotes the bitwise OR operation.\n-----Input-----\nThe first line contains two integers $n$ and $m$ ($1\\le n,m\\le 200$).\nThe next line contains $n$ integers $a_1,a_2,\\ldots,a_n$ ($0\\le a_i < 2^9$).\nThe next line contains $m$ integers $b_1,b_2,\\ldots,b_m$ ($0\\le b_i < 2^9$).\n-----Output-----\nPrint one integer: the minimum possible $c_1 | c_2 | \\ldots | c_n$.\n-----Examples-----\nInput\n4 2\n2 6 4 0\n2 4\nOutput\n2\nInput\n7 6\n1 9 1 9 8 1 0\n1 1 4 5 1 4\nOutput\n0\nInput\n8 5\n179 261 432 162 82 43 10 38\n379 357 202 184 197\nOutput\n147\n-----Note-----\nFor the first example, we have $c_1=a_1\\& b_2=0$, $c_2=a_2\\& b_1=2$, $c_3=a_3\\& b_1=0$, $c_4 = a_4\\& b_1=0$.Thus $c_1 | c_2 | c_3 |c_4 =2$, and this is the minimal answer we can get.\n\ndef",
        "answer": "def solve(a,b):\n    return sum(a[i]&b[i] for i in range(len(a)))",
        "difficulty": "interview"
    },
    {
        "task_id": 1917,
        "prompt": "Complete the Python function given the prompt below:Uh oh! Applications to tech companies are due soon, and you've been procrastinating by doing contests instead! (Let's pretend for now that it is actually possible to get a job in these uncertain times.)\nYou have completed many programming projects. In fact, there are exactly $n$ types of programming projects, and you have completed $a_i$ projects of type $i$. Your r\u00e9sum\u00e9 has limited space, but you want to carefully choose them in such a way that maximizes your chances of getting hired.\nYou want to include several projects of the same type to emphasize your expertise, but you also don't want to include so many that the low-quality projects start slipping in. Specifically, you determine the following quantity to be a good indicator of your chances of getting hired:\n$$ f(b_1,\\ldots,b_n)=\\sum\\limits_{i=1}^n b_i(a_i-b_i^2). $$\nHere, $b_i$ denotes the number of projects of type $i$ you include in your r\u00e9sum\u00e9. Of course, you cannot include more projects than you have completed, so you require $0\\le b_i \\le a_i$ for all $i$.\nYour r\u00e9sum\u00e9 only has enough room for $k$ projects, and you will absolutely not be hired if your r\u00e9sum\u00e9 has empty space, so you require $\\sum\\limits_{i=1}^n b_i=k$.\nFind values for $b_1,\\ldots, b_n$ that maximize the value of $f(b_1,\\ldots,b_n)$ while satisfying the above two constraints.\n-----Input-----\nThe first line contains two integers $n$ and $k$ ($1\\le n\\le 10^5$, $1\\le k\\le \\sum\\limits_{i=1}^n a_i$)\u00a0\u2014 the number of types of programming projects and the r\u00e9sum\u00e9 size, respectively.\nThe next line contains $n$ integers $a_1,\\ldots,a_n$ ($1\\le a_i\\le 10^9$)\u00a0\u2014 $a_i$ is equal to the number of completed projects of type $i$.\n-----Output-----\nIn a single line, output $n$ integers $b_1,\\ldots, b_n$ that achieve the maximum value of $f(b_1,\\ldots,b_n)$, while satisfying the requirements $0\\le b_i\\le a_i$ and $\\sum\\limits_{i=1}^n b_i=k$. If there are multiple solutions, output any.\nNote that you do not have to output the value $f(b_1,\\ldots,b_n)$.\n-----Examples-----\nInput\n10 32\n1 2 3 4 5 5 5 5 5 5\nOutput\n1 2 3 3 3 4 4 4 4 4 \nInput\n5 8\n4 4 8 2 1\nOutput\n2 2 2 1 1 \n-----Note-----\nFor the first test, the optimal answer is $f=-269$. Note that a larger $f$ value is possible if we ignored the constraint $\\sum\\limits_{i=1}^n b_i=k$.\nFor the second test, the optimal answer is $f=9$.\n\ndef",
        "answer": "def f(b,a):\n    return sum(b[i]*(a[i]-b[i]**2) for i in range(len(b)))",
        "difficulty": "interview"
    },
    {
        "task_id": 1918,
        "prompt": "Complete the Python function given the prompt below:Alice and Bob are playing a game. The game involves splitting up game pieces into two teams. There are n pieces, and the i-th piece has a strength p_{i}.\nThe way to split up game pieces is split into several steps:\n  First, Alice will split the pieces into two different groups A and B. This can be seen as writing the assignment of teams of a piece in an n character string, where each character is A or B.  Bob will then choose an arbitrary prefix or suffix of the string, and flip each character in that suffix (i.e. change A to B and B to A). He can do this step at most once.  Alice will get all the pieces marked A and Bob will get all the pieces marked B. \nThe strength of a player is then the sum of strengths of the pieces in the group.\nGiven Alice's initial split into two teams, help Bob determine an optimal strategy. Return the maximum strength he can achieve.\n-----Input-----\nThe first line contains integer n (1 \u2264 n \u2264 5\u00b710^5) \u2014 the number of game pieces.\nThe second line contains n integers p_{i} (1 \u2264 p_{i} \u2264 10^9) \u2014 the strength of the i-th piece.\nThe third line contains n characters A or B \u2014 the assignment of teams after the first step (after Alice's step).\n-----Output-----\nPrint the only integer a \u2014 the maximum strength Bob can achieve.\n-----Examples-----\nInput\n5\n1 2 3 4 5\nABABA\nOutput\n11\nInput\n5\n1 2 3 4 5\nAAAAA\nOutput\n15\nInput\n1\n1\nB\nOutput\n1\n-----Note-----\nIn the first sample Bob should flip the suffix of length one.\nIn the second sample Bob should flip the prefix or the suffix (here it is the same) of length 5.\nIn the third sample Bob should do nothing.\n\ndef",
        "answer": "def flip_game(A, B, n):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 1919,
        "prompt": "Complete the Python function given the prompt below:There is a legend in the IT City college. A student that failed to answer all questions on the game theory exam is given one more chance by his professor. The student has to play a game with the professor.\nThe game is played on a square field consisting of n \u00d7 n cells. Initially all cells are empty. On each turn a player chooses and paint an empty cell that has no common sides with previously painted cells. Adjacent corner of painted cells is allowed. On the next turn another player does the same, then the first one and so on. The player with no cells to paint on his turn loses.\nThe professor have chosen the field size n and allowed the student to choose to be the first or the second player in the game. What should the student choose to win the game? Both players play optimally.\n-----Input-----\nThe only line of the input contains one integer n (1 \u2264 n \u2264 10^18) \u2014 the size of the field.\n-----Output-----\nOutput number 1, if the player making the first turn wins when both players play optimally, otherwise print number 2.\n-----Examples-----\nInput\n1\nOutput\n1\nInput\n2\nOutput\n2\n\ndef",
        "answer": "def solution(n):\n    return 1 if n % 2 == 0 else 2",
        "difficulty": "interview"
    },
    {
        "task_id": 1920,
        "prompt": "Complete the Python function given the prompt below:Famil Door wants to celebrate his birthday with his friends from Far Far Away. He has n friends and each of them can come to the party in a specific range of days of the year from a_{i} to b_{i}. Of course, Famil Door wants to have as many friends celebrating together with him as possible.\nFar cars are as weird as Far Far Away citizens, so they can only carry two people of opposite gender, that is exactly one male and one female. However, Far is so far from here that no other transportation may be used to get to the party.\nFamil Door should select some day of the year and invite some of his friends, such that they all are available at this moment and the number of male friends invited is equal to the number of female friends invited. Find the maximum number of friends that may present at the party.\n-----Input-----\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 5000)\u00a0\u2014 then number of Famil Door's friends.\nThen follow n lines, that describe the friends. Each line starts with a capital letter 'F' for female friends and with a capital letter 'M' for male friends. Then follow two integers a_{i} and b_{i} (1 \u2264 a_{i} \u2264 b_{i} \u2264 366), providing that the i-th friend can come to the party from day a_{i} to day b_{i} inclusive.\n-----Output-----\nPrint the maximum number of people that may come to Famil Door's party.\n-----Examples-----\nInput\n4\nM 151 307\nF 343 352\nF 117 145\nM 24 128\nOutput\n2\nInput\n6\nM 128 130\nF 128 131\nF 131 140\nF 131 141\nM 131 200\nM 140 200\nOutput\n4\n-----Note-----\nIn the first sample, friends 3 and 4 can come on any day in range [117, 128].\nIn the second sample, friends with indices 3, 4, 5 and 6 can come on day 140.\n\ndef",
        "answer": "def birthday(n, a, b):\n    return sum(1 for i in range(n) if a <= i <= b)",
        "difficulty": "interview"
    },
    {
        "task_id": 1921,
        "prompt": "Complete the Python function given the prompt below:Yura has been walking for some time already and is planning to return home. He needs to get home as fast as possible. To do this, Yura can use the instant-movement locations around the city.\nLet's represent the city as an area of $n \\times n$ square blocks. Yura needs to move from the block with coordinates $(s_x,s_y)$ to the block with coordinates $(f_x,f_y)$. In one minute Yura can move to any neighboring by side block; in other words, he can move in four directions. Also, there are $m$ instant-movement locations in the city. Their coordinates are known to you and Yura. Yura can move to an instant-movement location in no time if he is located in a block with the same coordinate $x$ or with the same coordinate $y$ as the location.\nHelp Yura to find the smallest time needed to get home.\n-----Input-----\nThe first line contains two integers $n$ and $m$\u00a0\u2014 the size of the city and the number of instant-movement locations ($1 \\le n \\le 10^9$, $0 \\le m \\le 10^5$).\nThe next line contains four integers $s_x$ $s_y$ $f_x$ $f_y$\u00a0\u2014 the coordinates of Yura's initial position and the coordinates of his home ($ 1 \\le s_x, s_y, f_x, f_y \\le n$).\nEach of the next $m$ lines contains two integers $x_i$ $y_i$\u00a0\u2014 coordinates of the $i$-th instant-movement location ($1 \\le x_i, y_i \\le n$).\n-----Output-----\nIn the only line print the minimum time required to get home.\n-----Examples-----\nInput\n5 3\n1 1 5 5\n1 2\n4 1\n3 3\nOutput\n5\nInput\n84 5\n67 59 41 2\n39 56\n7 2\n15 3\n74 18\n22 7\nOutput\n42\n-----Note-----\nIn the first example Yura needs to reach $(5, 5)$ from $(1, 1)$. He can do that in $5$ minutes by first using the second instant-movement location (because its $y$ coordinate is equal to Yura's $y$ coordinate), and then walking $(4, 1) \\to (4, 2) \\to (4, 3) \\to (5, 3) \\to (5, 4) \\to (5, 5)$.\n\ndef",
        "answer": "def get_min_time(n, m, s_x, s_y, f_x, f_y):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 1922,
        "prompt": "Complete the Python function given the prompt below:There is a grid with infinitely many rows and columns. In this grid, there is a rectangular region with consecutive N rows and M columns, and a card is placed in each square in this region.\nThe front and back sides of these cards can be distinguished, and initially every card faces up.\nWe will perform the following operation once for each square contains a card:\n - For each of the following nine squares, flip the card in it if it exists: the target square itself and the eight squares that shares a corner or a side with the target square.\nIt can be proved that, whether each card faces up or down after all the operations does not depend on the order the operations are performed.\nFind the number of cards that face down after all the operations.\n-----Constraints-----\n - 1 \\leq N,M \\leq 10^9\n - All input values are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN M\n-----Output-----\nPrint the number of cards that face down after all the operations.\n-----Sample Input-----\n2 2\n-----Sample Output-----\n0\nWe will flip every card in any of the four operations. Thus, after all the operations, all cards face up.\n\ndef",
        "answer": "def flip(grid, n, m):\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 1:\n                grid[i][j] = 0\n            else:\n                grid[i][j] = 1\n    return grid",
        "difficulty": "interview"
    },
    {
        "task_id": 1923,
        "prompt": "Complete the Python function given the prompt below:Snuke is having a barbeque party.\nAt the party, he will make N servings of Skewer Meal.\nExample of a serving of Skewer Meal\nHe has a stock of 2N skewers, all of which will be used in Skewer Meal. The length of the i-th skewer is L_i.\nAlso, he has an infinite supply of ingredients.\nTo make a serving of Skewer Meal, he picks 2 skewers and threads ingredients onto those skewers.\nLet the length of the shorter skewer be x, then the serving can hold the maximum of x ingredients.\nWhat is the maximum total number of ingredients that his N servings of Skewer Meal can hold, if he uses the skewers optimally?\n-----Constraints-----\n - 1\u2266N\u2266100\n - 1\u2266L_i\u2266100\n - For each i, L_i is an integer.\n-----Input-----\nThe input is given from Standard Input in the following format:\nN\nL_1 L_2... L_{2N}\n-----Output-----\nPrint the maximum total number of ingredients that Snuke's N servings of Skewer Meal can hold.\n-----Sample Input-----\n2\n1 3 1 2\n-----Sample Output-----\n3\nIf he makes a serving using the first and third skewers, and another using the second and fourth skewers, each serving will hold 1 and 2 ingredients, for the total of 3.\n\ndef",
        "answer": "def SkewerMeal(N, L):\n    # Write your code here\n    return",
        "difficulty": "interview"
    },
    {
        "task_id": 1924,
        "prompt": "Complete the Python function given the prompt below:Snuke is standing on a two-dimensional plane. In one operation, he can move by 1 in the positive x-direction, or move by 1 in the positive y-direction.\nLet us define a function f(r, c) as follows:\n - f(r,c) :=  (The number of paths from the point (0, 0) to the point (r, c) that Snuke can trace by repeating the operation above)\nGiven are integers r_1, r_2, c_1, and c_2.\nFind the sum of f(i, j) over all pair of integers (i, j) such that r_1 \u2264 i \u2264 r_2 and c_1 \u2264 j \u2264 c_2, and compute this value modulo (10^9+7).\n-----Constraints-----\n - 1 \u2264 r_1 \u2264 r_2 \u2264 10^6\n - 1 \u2264 c_1 \u2264 c_2 \u2264 10^6\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nr_1 c_1 r_2 c_2\n-----Output-----\nPrint the sum of f(i, j) modulo (10^9+7).\n-----Sample Input-----\n1 1 2 2\n-----Sample Output-----\n14\nFor example, there are two paths from the point (0, 0) to the point (1, 1): (0,0) \u2192 (0,1) \u2192 (1,1) and (0,0) \u2192 (1,0) \u2192 (1,1), so f(1,1)=2.\nSimilarly, f(1,2)=3, f(2,1)=3, and f(2,2)=6. Thus, the sum is 14.\n\ndef",
        "answer": "def f(r, c):\n    if r == 0 or c == 0:\n        return 1\n    return f(r-1, c) + f(r, c-1)",
        "difficulty": "interview"
    },
    {
        "task_id": 1925,
        "prompt": "Complete the Python function given the prompt below:Given are integers A, B, and N.\nFind the maximum possible value of floor(Ax/B) - A \u00d7 floor(x/B) for a non-negative integer x not greater than N.\nHere floor(t) denotes the greatest integer not greater than the real number t.\n-----Constraints-----\n - 1 \u2264 A \u2264 10^{6}\n - 1 \u2264 B \u2264 10^{12}\n - 1 \u2264 N \u2264 10^{12}\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nA B N\n-----Output-----\nPrint the maximum possible value of floor(Ax/B) - A \u00d7 floor(x/B) for a non-negative integer x not greater than N, as an integer.\n-----Sample Input-----\n5 7 4\n-----Sample Output-----\n2\nWhen x=3, floor(Ax/B)-A\u00d7floor(x/B) = floor(15/7) - 5\u00d7floor(3/7) = 2. This is the maximum value possible.\n\ndef",
        "answer": "def floor(x, y):\n    return x // y",
        "difficulty": "interview"
    },
    {
        "task_id": 1926,
        "prompt": "Complete the Python function given the prompt below:Andrew skipped lessons on the subject 'Algorithms and Data Structures' for the entire term. When he came to the final test, the teacher decided to give him a difficult task as a punishment.\nThe teacher gave Andrew an array of n numbers a_1,..., a_{n}. After that he asked Andrew for each k from 1 to n - 1 to build a k-ary heap on the array and count the number of elements for which the property of the minimum-rooted heap is violated, i.e. the value of an element is less than the value of its parent.\nAndrew looked up on the Wikipedia that a k-ary heap is a rooted tree with vertices in elements of the array. If the elements of the array are indexed from 1 to n, then the children of element v are elements with indices k(v - 1) + 2,..., kv + 1 (if some of these elements lie outside the borders of the array, the corresponding children are absent). In any k-ary heap every element except for the first one has exactly one parent; for the element 1 the parent is absent (this element is the root of the heap). Denote p(v) as the number of the parent of the element with the number v. Let's say that for a non-root element v the property of the heap is violated if a_{v} < a_{p}(v).\nHelp Andrew cope with the task!\n-----Input-----\nThe first line contains a single integer n (2 \u2264 n \u2264 2\u00b710^5).\nThe second line contains n space-separated integers a_1,..., a_{n} ( - 10^9 \u2264 a_{i} \u2264 10^9).\n-----Output-----\nin a single line print n - 1 integers, separate the consecutive numbers with a single space \u2014 the number of elements for which the property of the k-ary heap is violated, for k = 1, 2,..., n - 1.\n-----Examples-----\nInput\n5\n1 5 4 3 2\nOutput\n3 2 1 0\nInput\n6\n2 2 2 2 2 2\nOutput\n0 0 0 0 0\n-----Note-----\nPictures with the heaps for the first sample are given below; elements for which the property of the heap is violated are marked with red. [Image] [Image] $\\therefore$ [Image] \nIn the second sample all elements are equal, so the property holds for all pairs.\n\ndef",
        "answer": "def k_ary_heap(a):\n    n = len(a)\n    for k in range(n - 1):\n        for i in range(n - k):\n            if a[i] > a[i + 1]:\n                a[i], a[i + 1] = a[i + 1], a[i]\n    return a",
        "difficulty": "interview"
    },
    {
        "task_id": 1927,
        "prompt": "Complete the Python function given the prompt below:Polycarp is a frequent user of the very popular messenger. He's chatting with his friends all the time. He has $n$ friends, numbered from $1$ to $n$.\nRecall that a permutation of size $n$ is an array of size $n$ such that each integer from $1$ to $n$ occurs exactly once in this array.\nSo his recent chat list can be represented with a permutation $p$ of size $n$. $p_1$ is the most recent friend Polycarp talked to, $p_2$ is the second most recent and so on.\nInitially, Polycarp's recent chat list $p$ looks like $1, 2, \\dots, n$ (in other words, it is an identity permutation).\nAfter that he receives $m$ messages, the $j$-th message comes from the friend $a_j$. And that causes friend $a_j$ to move to the first position in a permutation, shifting everyone between the first position and the current position of $a_j$ by $1$. Note that if the friend $a_j$ is in the first position already then nothing happens.\nFor example, let the recent chat list be $p = [4, 1, 5, 3, 2]$:   if he gets messaged by friend $3$, then $p$ becomes $[3, 4, 1, 5, 2]$;  if he gets messaged by friend $4$, then $p$ doesn't change $[4, 1, 5, 3, 2]$;  if he gets messaged by friend $2$, then $p$ becomes $[2, 4, 1, 5, 3]$. \nFor each friend consider all position he has been at in the beginning and after receiving each message. Polycarp wants to know what were the minimum and the maximum positions.\n-----Input-----\nThe first line contains two integers $n$ and $m$ ($1 \\le n, m \\le 3 \\cdot 10^5$) \u2014 the number of Polycarp's friends and the number of received messages, respectively.\nThe second line contains $m$ integers $a_1, a_2, \\dots, a_m$ ($1 \\le a_i \\le n$) \u2014 the descriptions of the received messages.\n-----Output-----\nPrint $n$ pairs of integers. For each friend output the minimum and the maximum positions he has been in the beginning and after receiving each message.\n-----Examples-----\nInput\n5 4\n3 5 1 4\nOutput\n1 3\n2 5\n1 4\n1 5\n1 5\nInput\n4 3\n1 2 4\nOutput\n1 3\n1 2\n3 4\n1 4\n-----Note-----\nIn the first example, Polycarp's recent chat list looks like this:   $[1, 2, 3, 4, 5]$  $[3, 1, 2, 4, 5]$  $[5, 3, 1, 2, 4]$  $[1, 5, 3, 2, 4]$  $[4, 1, 5, 3, 2]$ \nSo, for example, the positions of the friend $2$ are $2, 3, 4, 4, 5$, respectively. Out of these $2$ is the minimum one and $5$ is the maximum one. Thus, the answer for the friend $2$ is a pair $(2, 5)$.\nIn the second example, Polycarp's recent chat list looks like this:   $[1, 2, 3, 4]$  $[1, 2, 3, 4]$  $[2, 1, 3, 4]$  $[4, 2, 1, 3]$\n\ndef",
        "answer": "def solution(n, m, p):\n    # Write your code here\n    pass\n",
        "difficulty": "interview"
    },
    {
        "task_id": 1928,
        "prompt": "Complete the Python function given the prompt below:Inna loves sweets very much. That's why she decided to play a game called \"Sweet Matrix\".\nInna sees an n \u00d7 m matrix and k candies. We'll index the matrix rows from 1 to n and the matrix columns from 1 to m. We'll represent the cell in the i-th row and j-th column as (i, j). Two cells (i, j) and (p, q) of the matrix are adjacent if |i - p| + |j - q| = 1. A path is a sequence of the matrix cells where each pair of neighbouring cells in the sequence is adjacent. We'll call the number of cells in the sequence the path's length.\nEach cell of the matrix can have at most one candy. Initiallly, all the cells are empty. Inna is trying to place each of the k candies in the matrix one by one. For each candy Inna chooses cell (i, j) that will contains the candy, and also chooses the path that starts in cell (1, 1) and ends in cell (i, j) and doesn't contain any candies. After that Inna moves the candy along the path from cell (1, 1) to cell (i, j), where the candy stays forever. If at some moment Inna can't choose a path for the candy, she loses. If Inna can place all the candies in the matrix in the described manner, then her penalty equals the sum of lengths of all the paths she has used.\nHelp Inna to minimize the penalty in the game.\n-----Input-----\nThe first line of the input contains three integers n, m and k (1 \u2264 n, m \u2264 50, 1 \u2264 k \u2264 n\u00b7m).\n-----Output-----\nIn the first line print an integer \u2014 Inna's minimum penalty in the game.\nIn the next k lines print the description of the path for each candy. The description of the path of the candy that is placed i-th should follow on the i-th line. The description of a path is a sequence of cells. Each cell must be written in the format (i, j), where i is the number of the row and j is the number of the column. You are allowed to print extra whitespaces in the line. If there are multiple optimal solutions, print any of them.\nPlease follow the output format strictly! If your program passes the first pretest, then the output format is correct.\n-----Examples-----\nInput\n4 4 4\nOutput\n8\n(1,1) (2,1) (2,2)\n(1,1) (1,2)\n(1,1) (2,1)\n(1,1)\n-----Note-----\nNote to the sample. Initially the matrix is empty. Then Inna follows her first path, the path penalty equals the number of cells in it \u2014 3. Note that now no path can go through cell (2, 2), as it now contains a candy. The next two candies go to cells (1, 2) and (2, 1). Inna simply leaves the last candy at cell (1, 1), the path contains only this cell. The total penalty is: 3 + 2 + 2 + 1 = 8.\nNote that Inna couldn't use cell (1, 1) to place, for instance, the third candy as in this case she couldn't have made the path for the fourth candy.\n\ndef",
        "answer": "def sweet_matrix(n, m, k):\n    # your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 1929,
        "prompt": "Complete the Python function given the prompt below:The prison of your city has n prisoners. As the prison can't accommodate all of them, the city mayor has decided to transfer c of the prisoners to a prison located in another city.\nFor this reason, he made the n prisoners to stand in a line, with a number written on their chests. The number is the severity of the crime he/she has committed. The greater the number, the more severe his/her crime was.\nThen, the mayor told you to choose the c prisoners, who will be transferred to the other prison. He also imposed two conditions. They are,\n  The chosen c prisoners has to form a contiguous segment of prisoners.  Any of the chosen prisoner's crime level should not be greater then t. Because, that will make the prisoner a severe criminal and the mayor doesn't want to take the risk of his running away during the transfer. \nFind the number of ways you can choose the c prisoners.\n-----Input-----\nThe first line of input will contain three space separated integers n\u00a0(1 \u2264 n \u2264 2\u00b710^5), t\u00a0(0 \u2264 t \u2264 10^9) and c\u00a0(1 \u2264 c \u2264 n). The next line will contain n space separated integers, the i^{th} integer is the severity i^{th} prisoner's crime. The value of crime severities will be non-negative and will not exceed 10^9. \n-----Output-----\nPrint a single integer \u2014 the number of ways you can choose the c prisoners.\n-----Examples-----\nInput\n4 3 3\n2 3 1 1\nOutput\n2\nInput\n1 1 1\n2\nOutput\n0\nInput\n11 4 2\n2 2 0 7 3 2 2 4 9 1 4\nOutput\n6\n\ndef",
        "answer": "def solve(n, t, c):\n    if n == 0:\n        return 1\n    if n < 0:\n        return 0\n    if t == 0:\n        return 0\n    if c == 0:\n        return 0\n    return solve(n-1, t, c) + solve(n-1, t-c, c)",
        "difficulty": "interview"
    },
    {
        "task_id": 1930,
        "prompt": "Complete the Python function given the prompt below:A permutation of size $n$ is an array of size $n$ such that each integer from $1$ to $n$ occurs exactly once in this array. An inversion in a permutation $p$ is a pair of indices $(i, j)$ such that $i > j$ and $a_i < a_j$. For example, a permutation $[4, 1, 3, 2]$ contains $4$ inversions: $(2, 1)$, $(3, 1)$, $(4, 1)$, $(4, 3)$.\nYou are given a permutation $p$ of size $n$. However, the numbers on some positions are replaced by $-1$. Let the valid permutation be such a replacement of $-1$ in this sequence back to numbers from $1$ to $n$ in such a way that the resulting sequence is a permutation of size $n$.\nThe given sequence was turned into a valid permutation randomly with the equal probability of getting each valid permutation.\nCalculate the expected total number of inversions in the resulting valid permutation.\nIt can be shown that it is in the form of $\\frac{P}{Q}$ where $P$ and $Q$ are non-negative integers and $Q \\ne 0$. Report the value of $P \\cdot Q^{-1} \\pmod {998244353}$.\n-----Input-----\nThe first line contains a single integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) \u2014 the length of the sequence.\nThe second line contains $n$ integers $p_1, p_2, \\dots, p_n$ ($-1 \\le p_i \\le n$, $p_i \\ne 0$) \u2014 the initial sequence.\nIt is guaranteed that all elements not equal to $-1$ are pairwise distinct.\n-----Output-----\nPrint a single integer \u2014 the expected total number of inversions in the resulting valid permutation.\nIt can be shown that it is in the form of $\\frac{P}{Q}$ where $P$ and $Q$ are non-negative integers and $Q \\ne 0$. Report the value of $P \\cdot Q^{-1} \\pmod {998244353}$.\n-----Examples-----\nInput\n3\n3 -1 -1\nOutput\n499122179\nInput\n2\n1 2\nOutput\n0\nInput\n2\n-1 -1\nOutput\n499122177\n-----Note-----\nIn the first example two resulting valid permutations are possible:\n  $[3, 1, 2]$ \u2014 $2$ inversions;  $[3, 2, 1]$ \u2014 $3$ inversions. \nThe expected value is $\\frac{2 \\cdot 1 + 3 \\cdot 1}{2} = 2.5$.\nIn the second example no $-1$ are present, thus the only valid permutation is possible \u2014 the given one. It has $0$ inversions.\nIn the third example there are two resulting valid permutations \u2014 one with $0$ inversions and one with $1$ inversion.\n\ndef",
        "answer": "def solution(n, p):\n    # your code here\n    return 0",
        "difficulty": "interview"
    },
    {
        "task_id": 1931,
        "prompt": "Complete the Python function given the prompt below:A card pyramid of height $1$ is constructed by resting two cards against each other. For $h>1$, a card pyramid of height $h$ is constructed by placing a card pyramid of height $h-1$ onto a base. A base consists of $h$ pyramids of height $1$, and $h-1$ cards on top. For example, card pyramids of heights $1$, $2$, and $3$ look as follows: $\\wedge A A$ \nYou start with $n$ cards and build the tallest pyramid that you can. If there are some cards remaining, you build the tallest pyramid possible with the remaining cards. You repeat this process until it is impossible to build another pyramid. In the end, how many pyramids will you have constructed?\n-----Input-----\nEach test consists of multiple test cases. The first line contains a single integer $t$ ($1\\le t\\le 1000$)\u00a0\u2014 the number of test cases. Next $t$ lines contain descriptions of test cases.\nEach test case contains a single integer $n$ ($1\\le n\\le 10^9$)\u00a0\u2014 the number of cards.\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^9$.\n-----Output-----\nFor each test case output a single integer\u00a0\u2014 the number of pyramids you will have constructed in the end.\n-----Example-----\nInput\n5\n3\n14\n15\n24\n1\nOutput\n1\n2\n1\n3\n0\n-----Note-----\nIn the first test, you construct a pyramid of height $1$ with $2$ cards. There is $1$ card remaining, which is not enough to build a pyramid.\nIn the second test, you build two pyramids, each of height $2$, with no cards remaining.\nIn the third test, you build one pyramid of height $3$, with no cards remaining.\nIn the fourth test, you build one pyramid of height $3$ with $9$ cards remaining. Then you build a pyramid of height $2$ with $2$ cards remaining. Then you build a final pyramid of height $1$ with no cards remaining.\nIn the fifth test, one card is not enough to build any pyramids.\n\ndef",
        "answer": "def card_pyramid(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return card_pyramid(n-1) + card_pyramid(n-2)",
        "difficulty": "interview"
    },
    {
        "task_id": 1932,
        "prompt": "Complete the Python function given the prompt below:Anton's favourite geometric figures are regular polyhedrons. Note that there are five kinds of regular polyhedrons: \n  Tetrahedron. Tetrahedron has 4 triangular faces.  Cube. Cube has 6 square faces.  Octahedron. Octahedron has 8 triangular faces.  Dodecahedron. Dodecahedron has 12 pentagonal faces.  Icosahedron. Icosahedron has 20 triangular faces. \nAll five kinds of polyhedrons are shown on the picture below:\n [Image] \nAnton has a collection of n polyhedrons. One day he decided to know, how many faces his polyhedrons have in total. Help Anton and find this number!\n-----Input-----\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 200 000)\u00a0\u2014 the number of polyhedrons in Anton's collection.\nEach of the following n lines of the input contains a string s_{i}\u00a0\u2014 the name of the i-th polyhedron in Anton's collection. The string can look like this:\n  \"Tetrahedron\" (without quotes), if the i-th polyhedron in Anton's collection is a tetrahedron.  \"Cube\" (without quotes), if the i-th polyhedron in Anton's collection is a cube.  \"Octahedron\" (without quotes), if the i-th polyhedron in Anton's collection is an octahedron.  \"Dodecahedron\" (without quotes), if the i-th polyhedron in Anton's collection is a dodecahedron.  \"Icosahedron\" (without quotes), if the i-th polyhedron in Anton's collection is an icosahedron. \n-----Output-----\nOutput one number\u00a0\u2014 the total number of faces in all the polyhedrons in Anton's collection.\n-----Examples-----\nInput\n4\nIcosahedron\nCube\nTetrahedron\nDodecahedron\nOutput\n42\nInput\n3\nDodecahedron\nOctahedron\nOctahedron\nOutput\n28\n-----Note-----\nIn the first sample Anton has one icosahedron, one cube, one tetrahedron and one dodecahedron. Icosahedron has 20 faces, cube has 6 faces, tetrahedron has 4 faces and dodecahedron has 12 faces. In total, they have 20 + 6 + 4 + 12 = 42 faces.\n\ndef",
        "answer": "def count_faces(n):\n    faces = 0\n    for i in range(n):\n        faces += len(input().split())\n    return faces",
        "difficulty": "interview"
    },
    {
        "task_id": 1933,
        "prompt": "Complete the Python function given the prompt below:Ivan is playing a strange game.\nHe has a matrix a with n rows and m columns. Each element of the matrix is equal to either 0 or 1. Rows and columns are 1-indexed. Ivan can replace any number of ones in this matrix with zeroes. After that, his score in the game will be calculated as follows:\n  Initially Ivan's score is 0;  In each column, Ivan will find the topmost 1 (that is, if the current column is j, then he will find minimum i such that a_{i}, j = 1). If there are no 1's in the column, this column is skipped;  Ivan will look at the next min(k, n - i + 1) elements in this column (starting from the element he found) and count the number of 1's among these elements. This number will be added to his score. \nOf course, Ivan wants to maximize his score in this strange game. Also he doesn't want to change many elements, so he will replace the minimum possible number of ones with zeroes. Help him to determine the maximum possible score he can get and the minimum possible number of replacements required to achieve that score.\n-----Input-----\nThe first line contains three integer numbers n, m and k (1 \u2264 k \u2264 n \u2264 100, 1 \u2264 m \u2264 100).\nThen n lines follow, i-th of them contains m integer numbers \u2014 the elements of i-th row of matrix a. Each number is either 0 or 1.\n-----Output-----\nPrint two numbers: the maximum possible score Ivan can get and the minimum number of replacements required to get this score.\n-----Examples-----\nInput\n4 3 2\n0 1 0\n1 0 1\n0 1 0\n1 1 1\nOutput\n4 1\nInput\n3 2 1\n1 0\n0 1\n0 0\nOutput\n2 0\n-----Note-----\nIn the first example Ivan will replace the element a_{1, 2}.\n\ndef",
        "answer": "def solution(a, n, m, k):\n    # write your code in Python 2.7\n    # pass\n    # Your code here",
        "difficulty": "interview"
    },
    {
        "task_id": 1934,
        "prompt": "Complete the Python function given the prompt below:You are given sequence a_1, a_2,..., a_{n} and m queries l_{j}, r_{j} (1 \u2264 l_{j} \u2264 r_{j} \u2264 n). For each query you need to print the minimum distance between such pair of elements a_{x} and a_{y} (x \u2260 y), that:  both indexes of the elements lie within range [l_{j}, r_{j}], that is, l_{j} \u2264 x, y \u2264 r_{j};  the values of the elements are equal, that is a_{x} = a_{y}. \nThe text above understands distance as |x - y|.\n-----Input-----\nThe first line of the input contains a pair of integers n, m (1 \u2264 n, m \u2264 5\u00b710^5) \u2014 the length of the sequence and the number of queries, correspondingly. \nThe second line contains the sequence of integers a_1, a_2,..., a_{n} ( - 10^9 \u2264 a_{i} \u2264 10^9). \nNext m lines contain the queries, one per line. Each query is given by a pair of numbers l_{j}, r_{j} (1 \u2264 l_{j} \u2264 r_{j} \u2264 n) \u2014 the indexes of the query range limits.\n-----Output-----\nPrint m integers \u2014 the answers to each query. If there is no valid match for some query, please print -1 as an answer to this query.\n-----Examples-----\nInput\n5 3\n1 1 2 3 2\n1 5\n2 4\n3 5\nOutput\n1\n-1\n2\nInput\n6 5\n1 2 1 3 2 3\n4 6\n1 3\n2 5\n2 4\n1 6\nOutput\n2\n2\n3\n-1\n2\n\ndef",
        "answer": "def min_distance(a, l, r):\n    min_dist = float('inf')\n    for i in range(l, r):\n        if a[i] == a[l]:\n            min_dist = min(min_dist, abs(i - l))\n    return min_dist",
        "difficulty": "interview"
    },
    {
        "task_id": 1935,
        "prompt": "Complete the Python function given the prompt below:If the girl doesn't go to Denis, then Denis will go to the girl. Using this rule, the young man left home, bought flowers and went to Nastya. \nOn the way from Denis's house to the girl's house is a road of $n$ lines. This road can't be always crossed in one green light. Foreseeing this, the good mayor decided to place safety islands in some parts of the road. Each safety island is located after a line, as well as at the beginning and at the end of the road. Pedestrians can relax on them, gain strength and wait for a green light.\nDenis came to the edge of the road exactly at the moment when the green light turned on. The boy knows that the traffic light first lights up $g$ seconds green, and then $r$ seconds red, then again $g$ seconds green and so on.\nFormally, the road can be represented as a segment $[0, n]$. Initially, Denis is at point $0$. His task is to get to point $n$ in the shortest possible time.\nHe knows many different integers $d_1, d_2, \\ldots, d_m$, where $0 \\leq d_i \\leq n$ \u00a0\u2014 are the coordinates of points, in which the safety islands are located. Only at one of these points, the boy can be at a time when the red light is on.\nUnfortunately, Denis isn't always able to control himself because of the excitement, so some restrictions are imposed:  He must always move while the green light is on because it's difficult to stand when so beautiful girl is waiting for you. Denis can change his position by $\\pm 1$ in $1$ second. While doing so, he must always stay inside the segment $[0, n]$.  He can change his direction only on the safety islands (because it is safe). This means that if in the previous second the boy changed his position by $+1$ and he walked on a safety island, then he can change his position by $\\pm 1$. Otherwise, he can change his position only by $+1$. Similarly, if in the previous second he changed his position by $-1$, on a safety island he can change position by $\\pm 1$, and at any other point by $-1$.  At the moment when the red light is on, the boy must be on one of the safety islands. He can continue moving in any direction when the green light is on. \nDenis has crossed the road as soon as his coordinate becomes equal to $n$.\nThis task was not so simple, because it's possible that it is impossible to cross the road. Since Denis has all thoughts about his love, he couldn't solve this problem and asked us to help him. Find the minimal possible time for which he can cross the road according to these rules, or find that it is impossible to do.\n-----Input-----\nThe first line contains two integers $n$ and $m$ $(1 \\leq n \\leq 10^6, 2 \\leq m \\leq min(n + 1, 10^4))$ \u00a0\u2014 road width and the number of safety islands.\nThe second line contains $m$ distinct integers $d_1, d_2, \\ldots, d_m$ $(0 \\leq d_i \\leq n)$ \u00a0\u2014 the points where the safety islands are located. It is guaranteed that there are $0$ and $n$ among them.\nThe third line contains two integers $g, r$ $(1 \\leq g, r \\leq 1000)$ \u00a0\u2014 the time that the green light stays on and the time that the red light stays on.\n-----Output-----\nOutput a single integer \u00a0\u2014 the minimum time for which Denis can cross the road with obeying all the rules.\nIf it is impossible to cross the road output $-1$.\n-----Examples-----\nInput\n15 5\n0 3 7 14 15\n11 11\nOutput\n45\nInput\n13 4\n0 3 7 13\n9 9\nOutput\n-1\n-----Note-----\nIn the first test, the optimal route is:  \u00a0\u00a0\u00a0\u00a0 for the first green light, go to $7$ and return to $3$. In this case, we will change the direction of movement at the point $7$, which is allowed, since there is a safety island at this point. In the end, we will be at the point of $3$, where there is also a safety island. The next $11$ seconds we have to wait for the red light. \u00a0\u00a0\u00a0\u00a0 for the second green light reaches $14$. Wait for the red light again. \u00a0\u00a0\u00a0\u00a0 for $1$ second go to $15$. As a result, Denis is at the end of the road. \nIn total, $45$ seconds are obtained.\nIn the second test, it is impossible to cross the road according to all the rules.\n\ndef",
        "answer": "def crossing_roads(n, m, d, g, r):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 1936,
        "prompt": "Complete the Python function given the prompt below:Let $LCM(x, y)$ be the minimum positive integer that is divisible by both $x$ and $y$. For example, $LCM(13, 37) = 481$, $LCM(9, 6) = 18$.\nYou are given two integers $l$ and $r$. Find two integers $x$ and $y$ such that $l \\le x < y \\le r$ and $l \\le LCM(x, y) \\le r$.\n-----Input-----\nThe first line contains one integer $t$ ($1 \\le t \\le 10000$) \u2014 the number of test cases.\nEach test case is represented by one line containing two integers $l$ and $r$ ($1 \\le l < r \\le 10^9$).\n-----Output-----\nFor each test case, print two integers:\n  if it is impossible to find integers $x$ and $y$ meeting the constraints in the statement, print two integers equal to $-1$;  otherwise, print the values of $x$ and $y$ (if there are multiple valid answers, you may print any of them). \n-----Example-----\nInput\n4\n1 1337\n13 69\n2 4\n88 89\nOutput\n6 7\n14 21\n2 4\n-1 -1\n\ndef",
        "answer": "def LCM(x, y):\n    if x > y:\n        greater = x\n    else:\n        greater = y\n    while True:\n        if (greater % x == 0) and (greater % y == 0):\n            lcm = greater\n            break\n        greater += 1\n    return lcm",
        "difficulty": "interview"
    },
    {
        "task_id": 1937,
        "prompt": "Complete the Python function given the prompt below:Mishka is trying really hard to avoid being kicked out of the university. In particular, he was doing absolutely nothing for the whole semester, miraculously passed some exams so that just one is left.\nThere were $n$ classes of that subject during the semester and on $i$-th class professor mentioned some non-negative integer $a_i$ to the students. It turned out, the exam was to tell the whole sequence back to the professor. \nSounds easy enough for those who attended every class, doesn't it?\nObviously Mishka didn't attend any classes. However, professor left some clues on the values of $a$ to help out students like Mishka:   $a$ was sorted in non-decreasing order ($a_1 \\le a_2 \\le \\dots \\le a_n$);  $n$ was even;  the following sequence $b$, consisting of $\\frac n 2$ elements, was formed and given out to students: $b_i = a_i + a_{n - i + 1}$. \nProfessor also mentioned that any sequence $a$, which produces sequence $b$ with the presented technique, will be acceptable.\nHelp Mishka to pass that last exam. Restore any sorted sequence $a$ of non-negative integers, which produces sequence $b$ with the presented technique. It is guaranteed that there exists at least one correct sequence $a$, which produces the given sequence $b$.\n-----Input-----\nThe first line contains a single integer $n$ ($2 \\le n \\le 2 \\cdot 10^5$) \u2014 the length of sequence $a$. $n$ is always even.\nThe second line contains $\\frac n 2$ integers $b_1, b_2, \\dots, b_{\\frac n 2}$ ($0 \\le b_i \\le 10^{18}$) \u2014 sequence $b$, where $b_i = a_i + a_{n - i + 1}$.\nIt is guaranteed that there exists at least one correct sequence $a$, which produces the given sequence $b$.\n-----Output-----\nPrint $n$ integers $a_1, a_2, \\dots, a_n$ ($0 \\le a_i \\le 10^{18}$) in a single line.\n$a_1 \\le a_2 \\le \\dots \\le a_n$ should be satisfied.\n$b_i = a_i + a_{n - i + 1}$ should be satisfied for all valid $i$.\n-----Examples-----\nInput\n4\n5 6\nOutput\n2 3 3 3\nInput\n6\n2 1 2\nOutput\n0 0 1 1 1 2\n\ndef",
        "answer": "def solution(a):\n    return a",
        "difficulty": "interview"
    },
    {
        "task_id": 1938,
        "prompt": "Complete the Python function given the prompt below:Mike wants to prepare for IMO but he doesn't know geometry, so his teacher gave him an interesting geometry problem. Let's define f([l, r]) = r - l + 1 to be the number of integer points in the segment [l, r] with l \u2264 r (say that $f(\\varnothing) = 0$). You are given two integers n and k and n closed intervals [l_{i}, r_{i}] on OX axis and you have to find: $\\sum_{1 \\leq i_{1} < i_{2} < \\ldots < i_{k} \\leq n} f([ l_{i_{1}}, r_{i_{1}} ] \\cap [ l_{i_{2}}, r_{i_{2}} ] \\cap \\ldots \\cap [ l_{i_{k}}, r_{i_{k}} ])$ \nIn other words, you should find the sum of the number of integer points in the intersection of any k of the segments. \nAs the answer may be very large, output it modulo 1000000007 (10^9 + 7).\nMike can't solve this problem so he needs your help. You will help him, won't you? \n-----Input-----\nThe first line contains two integers n and k (1 \u2264 k \u2264 n \u2264 200 000)\u00a0\u2014 the number of segments and the number of segments in intersection groups respectively.\nThen n lines follow, the i-th line contains two integers l_{i}, r_{i} ( - 10^9 \u2264 l_{i} \u2264 r_{i} \u2264 10^9), describing i-th segment bounds.\n-----Output-----\nPrint one integer number\u00a0\u2014 the answer to Mike's problem modulo 1000000007 (10^9 + 7) in the only line.\n-----Examples-----\nInput\n3 2\n1 2\n1 3\n2 3\nOutput\n5\nInput\n3 3\n1 3\n1 3\n1 3\nOutput\n3\nInput\n3 1\n1 2\n2 3\n3 4\nOutput\n6\n-----Note-----\nIn the first example: \n$f([ 1,2 ] \\cap [ 1,3 ]) = f([ 1,2 ]) = 2$;\n$f([ 1,2 ] \\cap [ 2,3 ]) = f([ 2,2 ]) = 1$;\n$f([ 1,3 ] \\cap [ 2,3 ]) = f([ 2,3 ]) = 2$.\nSo the answer is 2 + 1 + 2 = 5.\n\ndef",
        "answer": "def f(l, r):\n    return r - l + 1",
        "difficulty": "interview"
    },
    {
        "task_id": 1939,
        "prompt": "Complete the Python function given the prompt below:Levko loves tables that consist of n rows and n columns very much. He especially loves beautiful tables. A table is beautiful to Levko if the sum of elements in each row and column of the table equals k.\nUnfortunately, he doesn't know any such table. Your task is to help him to find at least one of them. \n-----Input-----\nThe single line contains two integers, n and k (1 \u2264 n \u2264 100, 1 \u2264 k \u2264 1000).\n-----Output-----\nPrint any beautiful table. Levko doesn't like too big numbers, so all elements of the table mustn't exceed 1000 in their absolute value.\nIf there are multiple suitable tables, you are allowed to print any of them.\n-----Examples-----\nInput\n2 4\nOutput\n1 3\n3 1\nInput\n4 7\nOutput\n2 1 0 4\n4 0 2 1\n1 3 3 0\n0 3 2 2\n-----Note-----\nIn the first sample the sum in the first row is 1 + 3 = 4, in the second row \u2014 3 + 1 = 4, in the first column \u2014 1 + 3 = 4 and in the second column \u2014 3 + 1 = 4. There are other beautiful tables for this sample.\nIn the second sample the sum of elements in each row and each column equals 7. Besides, there are other tables that meet the statement requirements.\n\ndef",
        "answer": "def beautiful_table(n, k):\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if i + j == k:\n                print(i, j)",
        "difficulty": "interview"
    },
    {
        "task_id": 1940,
        "prompt": "Complete the Python function given the prompt below:Anastasia loves going for a walk in Central Uzhlyandian Park. But she became uninterested in simple walking, so she began to collect Uzhlyandian pebbles. At first, she decided to collect all the pebbles she could find in the park.\nShe has only two pockets. She can put at most k pebbles in each pocket at the same time. There are n different pebble types in the park, and there are w_{i} pebbles of the i-th type. Anastasia is very responsible, so she never mixes pebbles of different types in same pocket. However, she can put different kinds of pebbles in different pockets at the same time. Unfortunately, she can't spend all her time collecting pebbles, so she can collect pebbles from the park only once a day.\nHelp her to find the minimum number of days needed to collect all the pebbles of Uzhlyandian Central Park, taking into consideration that Anastasia can't place pebbles of different types in same pocket.\n-----Input-----\nThe first line contains two integers n and k (1 \u2264 n \u2264 10^5, 1 \u2264 k \u2264 10^9)\u00a0\u2014 the number of different pebble types and number of pebbles Anastasia can place in one pocket.\nThe second line contains n integers w_1, w_2,..., w_{n} (1 \u2264 w_{i} \u2264 10^4)\u00a0\u2014 number of pebbles of each type. \n-----Output-----\nThe only line of output contains one integer\u00a0\u2014 the minimum number of days Anastasia needs to collect all the pebbles.\n-----Examples-----\nInput\n3 2\n2 3 4\nOutput\n3\nInput\n5 4\n3 1 8 9 7\nOutput\n5\n-----Note-----\nIn the first sample case, Anastasia can collect all pebbles of the first type on the first day, of second type\u00a0\u2014 on the second day, and of third type\u00a0\u2014 on the third day.\nOptimal sequence of actions in the second sample case:   In the first day Anastasia collects 8 pebbles of the third type.  In the second day she collects 8 pebbles of the fourth type.  In the third day she collects 3 pebbles of the first type and 1 pebble of the fourth type.  In the fourth day she collects 7 pebbles of the fifth type.  In the fifth day she collects 1 pebble of the second type.\n\ndef",
        "answer": "def solution(n, k, w):\n    # your code here\n    return 0",
        "difficulty": "interview"
    },
    {
        "task_id": 1941,
        "prompt": "Complete the Python function given the prompt below:Karafs is some kind of vegetable in shape of an 1 \u00d7 h rectangle. Tavaspolis people love Karafs and they use Karafs in almost any kind of food. Tavas, himself, is crazy about Karafs. [Image] \nEach Karafs has a positive integer height. Tavas has an infinite 1-based sequence of Karafses. The height of the i-th Karafs is s_{i} = A + (i - 1) \u00d7 B.\nFor a given m, let's define an m-bite operation as decreasing the height of at most m distinct not eaten Karafses by 1. Karafs is considered as eaten when its height becomes zero.\nNow SaDDas asks you n queries. In each query he gives you numbers l, t and m and you should find the largest number r such that l \u2264 r and sequence s_{l}, s_{l} + 1,..., s_{r} can be eaten by performing m-bite no more than t times or print -1 if there is no such number r.\n-----Input-----\nThe first line of input contains three integers A, B and n (1 \u2264 A, B \u2264 10^6, 1 \u2264 n \u2264 10^5).\nNext n lines contain information about queries. i-th line contains integers l, t, m (1 \u2264 l, t, m \u2264 10^6) for i-th query.\n-----Output-----\nFor each query, print its answer in a single line.\n-----Examples-----\nInput\n2 1 4\n1 5 3\n3 3 10\n7 10 2\n6 4 8\nOutput\n4\n-1\n8\n-1\nInput\n1 5 2\n1 5 10\n2 7 4\nOutput\n1\n2\n\ndef",
        "answer": "def solve(A, B, n):\n    # your code here\n    return -1",
        "difficulty": "interview"
    },
    {
        "task_id": 1942,
        "prompt": "Complete the Python function given the prompt below:You are given a complete directed graph $K_n$ with $n$ vertices: each pair of vertices $u \\neq v$ in $K_n$ have both directed edges $(u, v)$ and $(v, u)$; there are no self-loops.\nYou should find such a cycle in $K_n$ that visits every directed edge exactly once (allowing for revisiting vertices).\nWe can write such cycle as a list of $n(n - 1) + 1$ vertices $v_1, v_2, v_3, \\dots, v_{n(n - 1) - 1}, v_{n(n - 1)}, v_{n(n - 1) + 1} = v_1$ \u2014 a visiting order, where each $(v_i, v_{i + 1})$ occurs exactly once.\nFind the lexicographically smallest such cycle. It's not hard to prove that the cycle always exists.\nSince the answer can be too large print its $[l, r]$ segment, in other words, $v_l, v_{l + 1}, \\dots, v_r$.\n-----Input-----\nThe first line contains the single integer $T$ ($1 \\le T \\le 100$) \u2014 the number of test cases.\nNext $T$ lines contain test cases \u2014 one per line. The first and only line of each test case contains three integers $n$, $l$ and $r$ ($2 \\le n \\le 10^5$, $1 \\le l \\le r \\le n(n - 1) + 1$, $r - l + 1 \\le 10^5$) \u2014 the number of vertices in $K_n$, and segment of the cycle to print.\nIt's guaranteed that the total sum of $n$ doesn't exceed $10^5$ and the total sum of $r - l + 1$ doesn't exceed $10^5$.\n-----Output-----\nFor each test case print the segment $v_l, v_{l + 1}, \\dots, v_r$ of the lexicographically smallest cycle that visits every edge exactly once.\n-----Example-----\nInput\n3\n2 1 3\n3 3 6\n99995 9998900031 9998900031\nOutput\n1 2 1 \n1 3 2 3 \n1 \n-----Note-----\nIn the second test case, the lexicographically minimum cycle looks like: $1, 2, 1, 3, 2, 3, 1$.\nIn the third test case, it's quite obvious that the cycle should start and end in vertex $1$.\n\ndef",
        "answer": "def lexicographicallySmallest(n, l, r):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 1943,
        "prompt": "Complete the Python function given the prompt below:The annual college sports-ball tournament is approaching, which for trademark reasons we'll refer to as Third Month Insanity. There are a total of 2^{N} teams participating in the tournament, numbered from 1 to 2^{N}. The tournament lasts N rounds, with each round eliminating half the teams. The first round consists of 2^{N} - 1 games, numbered starting from 1. In game i, team 2\u00b7i - 1 will play against team 2\u00b7i. The loser is eliminated and the winner advances to the next round (there are no ties). Each subsequent round has half as many games as the previous round, and in game i the winner of the previous round's game 2\u00b7i - 1 will play against the winner of the previous round's game 2\u00b7i.\nEvery year the office has a pool to see who can create the best bracket. A bracket is a set of winner predictions for every game. For games in the first round you may predict either team to win, but for games in later rounds the winner you predict must also be predicted as a winner in the previous round. Note that the bracket is fully constructed before any games are actually played. Correct predictions in the first round are worth 1 point, and correct predictions in each subsequent round are worth twice as many points as the previous, so correct predictions in the final game are worth 2^{N} - 1 points.\nFor every pair of teams in the league, you have estimated the probability of each team winning if they play against each other. Now you want to construct a bracket with the maximum possible expected score.\n-----Input-----\nInput will begin with a line containing N (2 \u2264 N \u2264 6).\n2^{N} lines follow, each with 2^{N} integers. The j-th column of the i-th row indicates the percentage chance that team i will defeat team j, unless i = j, in which case the value will be 0. It is guaranteed that the i-th column of the j-th row plus the j-th column of the i-th row will add to exactly 100.\n-----Output-----\nPrint the maximum possible expected score over all possible brackets. Your answer must be correct to within an absolute or relative error of 10^{ - 9}.\nFormally, let your answer be a, and the jury's answer be b. Your answer will be considered correct, if $\\frac{|a - b|}{\\operatorname{max}(1,|b|)} \\leq 10^{-9}$.\n-----Examples-----\nInput\n2\n0 40 100 100\n60 0 40 40\n0 60 0 45\n0 60 55 0\nOutput\n1.75\nInput\n3\n0 0 100 0 100 0 0 0\n100 0 100 0 0 0 100 100\n0 0 0 100 100 0 0 0\n100 100 0 0 0 0 100 100\n0 100 0 100 0 0 100 0\n100 100 100 100 100 0 0 0\n100 0 100 0 0 100 0 0\n100 0 100 0 100 100 100 0\nOutput\n12\nInput\n2\n0 21 41 26\n79 0 97 33\n59 3 0 91\n74 67 9 0\nOutput\n3.141592\n-----Note-----\nIn the first example, you should predict teams 1 and 4 to win in round 1, and team 1 to win in round 2. Recall that the winner you predict in round 2 must also be predicted as a winner in round 1.\n\ndef",
        "answer": "def bracket(n):\n    if n == 1:\n        return 1\n    else:\n        return bracket(n - 1) * 2",
        "difficulty": "interview"
    },
    {
        "task_id": 1944,
        "prompt": "Complete the Python function given the prompt below:One day Dima and Alex had an argument about the price and quality of laptops. Dima thinks that the more expensive a laptop is, the better it is. Alex disagrees. Alex thinks that there are two laptops, such that the price of the first laptop is less (strictly smaller) than the price of the second laptop but the quality of the first laptop is higher (strictly greater) than the quality of the second laptop.\nPlease, check the guess of Alex. You are given descriptions of n laptops. Determine whether two described above laptops exist.\n-----Input-----\nThe first line contains an integer n (1 \u2264 n \u2264 10^5) \u2014 the number of laptops.\nNext n lines contain two integers each, a_{i} and b_{i} (1 \u2264 a_{i}, b_{i} \u2264 n), where a_{i} is the price of the i-th laptop, and b_{i} is the number that represents the quality of the i-th laptop (the larger the number is, the higher is the quality).\nAll a_{i} are distinct. All b_{i} are distinct. \n-----Output-----\nIf Alex is correct, print \"Happy Alex\", otherwise print \"Poor Alex\" (without the quotes).\n-----Examples-----\nInput\n2\n1 2\n2 1\nOutput\nHappy Alex\n\ndef",
        "answer": "def solution(a, b):\n    return \"Happy Alex\" if a[0] < a[1] and b[0] > b[1] else \"Poor Alex\"",
        "difficulty": "interview"
    },
    {
        "task_id": 1945,
        "prompt": "Complete the Python function given the prompt below:Misha hacked the Codeforces site. Then he decided to let all the users change their handles. A user can now change his handle any number of times. But each new handle must not be equal to any handle that is already used or that was used at some point.\nMisha has a list of handle change requests. After completing the requests he wants to understand the relation between the original and the new handles of the users. Help him to do that.\n-----Input-----\nThe first line contains integer q (1 \u2264 q \u2264 1000), the number of handle change requests.\nNext q lines contain the descriptions of the requests, one per line.\nEach query consists of two non-empty strings old and new, separated by a space. The strings consist of lowercase and uppercase Latin letters and digits. Strings old and new are distinct. The lengths of the strings do not exceed 20.\nThe requests are given chronologically. In other words, by the moment of a query there is a single person with handle old, and handle new is not used and has not been used by anyone.\n-----Output-----\nIn the first line output the integer n \u2014 the number of users that changed their handles at least once.\nIn the next n lines print the mapping between the old and the new handles of the users. Each of them must contain two strings, old and new, separated by a space, meaning that before the user had handle old, and after all the requests are completed, his handle is new. You may output lines in any order.\nEach user who changes the handle must occur exactly once in this description.\n-----Examples-----\nInput\n5\nMisha ILoveCodeforces\nVasya Petrov\nPetrov VasyaPetrov123\nILoveCodeforces MikeMirzayanov\nPetya Ivanov\nOutput\n3\nPetya Ivanov\nMisha MikeMirzayanov\nVasya VasyaPetrov123\n\ndef",
        "answer": "def solution(q):\n    # Write your code here\n    pass\n",
        "difficulty": "interview"
    },
    {
        "task_id": 1946,
        "prompt": "Complete the Python function given the prompt below:Two famous competing companies ChemForces and TopChemist decided to show their sets of recently discovered chemical elements on an exhibition. However they know that no element should be present in the sets of both companies.\nIn order to avoid this representatives of both companies decided to make an agreement on the sets the companies should present. The sets should be chosen in the way that maximizes the total income of the companies.\nAll elements are enumerated with integers. The ChemForces company has discovered $n$ distinct chemical elements with indices $a_1, a_2, \\ldots, a_n$, and will get an income of $x_i$ Berland rubles if the $i$-th element from this list is in the set of this company.\nThe TopChemist company discovered $m$ distinct chemical elements with indices $b_1, b_2, \\ldots, b_m$, and it will get an income of $y_j$ Berland rubles for including the $j$-th element from this list to its set.\nIn other words, the first company can present any subset of elements from $\\{a_1, a_2, \\ldots, a_n\\}$ (possibly empty subset), the second company can present any subset of elements from $\\{b_1, b_2, \\ldots, b_m\\}$ (possibly empty subset). There shouldn't be equal elements in the subsets.\nHelp the representatives select the sets in such a way that no element is presented in both sets and the total income is the maximum possible.\n-----Input-----\nThe first line contains a single integer $n$ ($1 \\leq n \\leq 10^5$) \u00a0\u2014 the number of elements discovered by ChemForces.\nThe $i$-th of the next $n$ lines contains two integers $a_i$ and $x_i$ ($1 \\leq a_i \\leq 10^9$, $1 \\leq x_i \\leq 10^9$) \u00a0\u2014 the index of the $i$-th element and the income of its usage on the exhibition. It is guaranteed that all $a_i$ are distinct.\nThe next line contains a single integer $m$ ($1 \\leq m \\leq 10^5$) \u00a0\u2014 the number of chemicals invented by TopChemist.\nThe $j$-th of the next $m$ lines contains two integers $b_j$ and $y_j$, ($1 \\leq b_j \\leq 10^9$, $1 \\leq y_j \\leq 10^9$) \u00a0\u2014 the index of the $j$-th element and the income of its usage on the exhibition. It is guaranteed that all $b_j$ are distinct.\n-----Output-----\nPrint the maximum total income you can obtain by choosing the sets for both companies in such a way that no element is presented in both sets.\n-----Examples-----\nInput\n3\n1 2\n7 2\n3 10\n4\n1 4\n2 4\n3 4\n4 4\nOutput\n24\nInput\n1\n1000000000 239\n3\n14 15\n92 65\n35 89\nOutput\n408\n-----Note-----\nIn the first example ChemForces can choose the set ($3, 7$), while TopChemist can choose ($1, 2, 4$). This way the total income is $(10 + 2) + (4 + 4 + 4) = 24$.\nIn the second example ChemForces can choose the only element $10^9$, while TopChemist can choose ($14, 92, 35$). This way the total income is $(239) + (15 + 65 + 89) = 408$.\n\ndef",
        "answer": "def max_income(n, x, m, y):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 1947,
        "prompt": "Complete the Python function given the prompt below:Alice's hair is growing by leaps and bounds. Maybe the cause of it is the excess of vitamins, or maybe it is some black magic...\nTo prevent this, Alice decided to go to the hairdresser. She wants for her hair length to be at most $l$ centimeters after haircut, where $l$ is her favorite number. Suppose, that the Alice's head is a straight line on which $n$ hairlines grow. Let's number them from $1$ to $n$. With one swing of the scissors the hairdresser can shorten all hairlines on any segment to the length $l$, given that all hairlines on that segment had length strictly greater than $l$. The hairdresser wants to complete his job as fast as possible, so he will make the least possible number of swings of scissors, since each swing of scissors takes one second.\nAlice hasn't decided yet when she would go to the hairdresser, so she asked you to calculate how much time the haircut would take depending on the time she would go to the hairdresser. In particular, you need to process queries of two types:  $0$\u00a0\u2014 Alice asks how much time the haircut would take if she would go to the hairdresser now.  $1$ $p$ $d$\u00a0\u2014 $p$-th hairline grows by $d$ centimeters. \nNote, that in the request $0$ Alice is interested in hypothetical scenario of taking a haircut now, so no hairlines change their length.\n-----Input-----\nThe first line contains three integers $n$, $m$ and $l$ ($1 \\le n, m \\le 100\\,000$, $1 \\le l \\le 10^9$)\u00a0\u2014 the number of hairlines, the number of requests and the favorite number of Alice.\nThe second line contains $n$ integers $a_i$ ($1 \\le a_i \\le 10^9$)\u00a0\u2014 the initial lengths of all hairlines of Alice.\nEach of the following $m$ lines contains a request in the format described in the statement.\nThe request description starts with an integer $t_i$. If $t_i = 0$, then you need to find the time the haircut would take. Otherwise, $t_i = 1$ and in this moment one hairline grows. The rest of the line than contains two more integers: $p_i$ and $d_i$ ($1 \\le p_i \\le n$, $1 \\le d_i \\le 10^9$)\u00a0\u2014 the number of the hairline and the length it grows by.\n-----Output-----\nFor each query of type $0$ print the time the haircut would take.\n-----Example-----\nInput\n4 7 3\n1 2 3 4\n0\n1 2 3\n0\n1 1 3\n0\n1 3 1\n0\nOutput\n1\n2\n2\n1\n-----Note-----\nConsider the first example:  Initially lengths of hairlines are equal to $1, 2, 3, 4$ and only $4$-th hairline is longer $l=3$, and hairdresser can cut it in $1$ second.  Then Alice's second hairline grows, the lengths of hairlines are now equal to $1, 5, 3, 4$  Now haircut takes two seonds: two swings are required: for the $4$-th hairline and for the $2$-nd.  Then Alice's first hairline grows, the lengths of hairlines are now equal to $4, 5, 3, 4$  The haircut still takes two seconds: with one swing hairdresser can cut $4$-th hairline and with one more swing cut the segment from $1$-st to $2$-nd hairline.  Then Alice's third hairline grows, the lengths of hairlines are now equal to $4, 5, 4, 4$  Now haircut takes only one second: with one swing it is possible to cut the segment from $1$-st hairline to the $4$-th.\n\ndef",
        "answer": "def solution(n, m, l):\n    hair = [0] * n\n    for i in range(n):\n        hair[i] = int(input())\n    for i in range(m):\n        t, p, d = map(int, input().split())\n        if t == 0:\n            print(solution(n, m, l))\n        else:\n            hair[p - 1] += d\n            for j in range(n):\n                if hair[j] > l:\n                    hair[j] -= d\n    print(sum(hair))",
        "difficulty": "interview"
    },
    {
        "task_id": 1948,
        "prompt": "Complete the Python function given the prompt below:Alice got tired of playing the tag game by the usual rules so she offered Bob a little modification to it. Now the game should be played on an undirected rooted tree of n vertices. Vertex 1 is the root of the tree.\nAlice starts at vertex 1 and Bob starts at vertex x (x \u2260 1). The moves are made in turns, Bob goes first. In one move one can either stay at the current vertex or travel to the neighbouring one.\nThe game ends when Alice goes to the same vertex where Bob is standing. Alice wants to minimize the total number of moves and Bob wants to maximize it.\nYou should write a program which will determine how many moves will the game last.\n-----Input-----\nThe first line contains two integer numbers n and x (2 \u2264 n \u2264 2\u00b710^5, 2 \u2264 x \u2264 n).\nEach of the next n - 1 lines contains two integer numbers a and b (1 \u2264 a, b \u2264 n) \u2014 edges of the tree. It is guaranteed that the edges form a valid tree.\n-----Output-----\nPrint the total number of moves Alice and Bob will make.\n-----Examples-----\nInput\n4 3\n1 2\n2 3\n2 4\nOutput\n4\nInput\n5 2\n1 2\n2 3\n3 4\n2 5\nOutput\n6\n-----Note-----\nIn the first example the tree looks like this:\n [Image] \nThe red vertex is Alice's starting position, the blue one is Bob's. Bob will make the game run the longest by standing at the vertex 3 during all the game. So here are the moves:\nB: stay at vertex 3\nA: go to vertex 2\nB: stay at vertex 3\nA: go to vertex 3\nIn the second example the tree looks like this:\n [Image] \nThe moves in the optimal strategy are:\nB: go to vertex 3\nA: go to vertex 2\nB: go to vertex 4\nA: go to vertex 3\nB: stay at vertex 4\nA: go to vertex 4\n\ndef",
        "answer": "def solution(n, x):\n    return n - x + 1\nif __name__ == '__main__':\n    n, x = map(int, input().split())\n    print(solution(n, x))\n",
        "difficulty": "interview"
    },
    {
        "task_id": 1949,
        "prompt": "Complete the Python function given the prompt below:You're given an array $a$. You should repeat the following operation $k$ times: find the minimum non-zero element in the array, print it, and then subtract it from all the non-zero elements of the array. If all the elements are 0s, just print 0.\n-----Input-----\nThe first line contains integers $n$ and $k$ $(1 \\le n,k \\le 10^5)$, the length of the array and the number of operations you should perform.\nThe second line contains $n$ space-separated integers $a_1, a_2, \\ldots, a_n$ $(1 \\le a_i \\le 10^9)$, the elements of the array.\n-----Output-----\nPrint the minimum non-zero element before each operation in a new line.\n-----Examples-----\nInput\n3 5\n1 2 3\nOutput\n1\n1\n1\n0\n0\nInput\n4 2\n10 3 5 3\nOutput\n3\n2\n-----Note-----\nIn the first sample:\nIn the first step: the array is $[1,2,3]$, so the minimum non-zero element is 1.\nIn the second step: the array is $[0,1,2]$, so the minimum non-zero element is 1.\nIn the third step: the array is $[0,0,1]$, so the minimum non-zero element is 1.\nIn the fourth and fifth step: the array is $[0,0,0]$, so we printed 0.\nIn the second sample:\nIn the first step: the array is $[10,3,5,3]$, so the minimum non-zero element is 3.\nIn the second step: the array is $[7,0,2,0]$, so the minimum non-zero element is 2.\n\ndef",
        "answer": "def minimum_non_zero_element(a, k):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 1950,
        "prompt": "Complete the Python function given the prompt below:Ivan has n different boxes. The first of them contains some balls of n different colors.\nIvan wants to play a strange game. He wants to distribute the balls into boxes in such a way that for every i (1 \u2264 i \u2264 n) i-th box will contain all balls with color i.\nIn order to do this, Ivan will make some turns. Each turn he does the following:  Ivan chooses any non-empty box and takes all balls from this box;  Then Ivan chooses any k empty boxes (the box from the first step becomes empty, and Ivan is allowed to choose it), separates the balls he took on the previous step into k non-empty groups and puts each group into one of the boxes. He should put each group into a separate box. He can choose either k = 2 or k = 3. \nThe penalty of the turn is the number of balls Ivan takes from the box during the first step of the turn. And penalty of the game is the total penalty of turns made by Ivan until he distributes all balls to corresponding boxes.\nHelp Ivan to determine the minimum possible penalty of the game!\n-----Input-----\nThe first line contains one integer number n (1 \u2264 n \u2264 200000) \u2014 the number of boxes and colors.\nThe second line contains n integer numbers a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 10^9), where a_{i} is the number of balls with color i.\n-----Output-----\nPrint one number \u2014 the minimum possible penalty of the game.\n-----Examples-----\nInput\n3\n1 2 3\nOutput\n6\nInput\n4\n2 3 4 5\nOutput\n19\n-----Note-----\nIn the first example you take all the balls from the first box, choose k = 3 and sort all colors to corresponding boxes. Penalty is 6.\nIn the second example you make two turns:   Take all the balls from the first box, choose k = 3, put balls of color 3 to the third box, of color 4 \u2014 to the fourth box and the rest put back into the first box. Penalty is 14;  Take all the balls from the first box, choose k = 2, put balls of color 1 to the first box, of color 2 \u2014 to the second box. Penalty is 5. \nTotal penalty is 19.\n\ndef",
        "answer": "def solution(n, a):\n    # write your code in Python 2.7\n    # n = int(raw_input())\n    # a = map(int, raw_input().split())\n    a.sort()\n    # print a\n    # print n\n    # print a[0]\n    # print a[1]\n    # print a[2]\n    # print a[3]\n    # print a[4]\n    # print a[5]\n    # print a[6]\n    # print a[7]\n    # print a[8]\n    # print a[9]\n    # print a[10]\n    # print a[11]\n    # print a[12]\n    # print a[13]\n    # print a[14]\n    # print a[15]\n    # print a[16]\n    # print a[17]\n    # print a[18]\n    # print a[19]\n    # print a[20]\n    # print a[21]\n    # print a[22]\n    # print a[23]\n    # print a[24]\n    # print a[25]\n    # print a[26]\n    # print a[27]\n    # print a[28]\n    # print a[29]\n    # print a[30]\n    # print a[31]\n    # print a[32]\n    # print a[33]\n    # print a[34]\n    # print a[35]\n    # print a[36]\n    # print a[37]\n    # print a[38]\n    # print a[39]\n    # print a[40]\n    # print a[41]\n    # print a[42]\n    # print a[43]\n    # print a[44]\n    # print a[45]\n    # print a[46]\n    # print a[47]\n    # print a[48]\n    # print a[49]\n    # print a[50]\n    # print a[51]\n    # print a[52]\n    # print a[53]\n    # print a[54]\n",
        "difficulty": "interview"
    },
    {
        "task_id": 1951,
        "prompt": "Complete the Python function given the prompt below:Tenten runs a weapon shop for ninjas. Today she is willing to sell $n$ shurikens which cost $1$, $2$,..., $n$ ryo (local currency). During a day, Tenten will place the shurikens onto the showcase, which is empty at the beginning of the day. Her job is fairly simple: sometimes Tenten places another shuriken (from the available shurikens) on the showcase, and sometimes a ninja comes in and buys a shuriken from the showcase. Since ninjas are thrifty, they always buy the cheapest shuriken from the showcase.\nTenten keeps a record for all events, and she ends up with a list of the following types of records:\n  + means that she placed another shuriken on the showcase;  - x means that the shuriken of price $x$ was bought. \nToday was a lucky day, and all shurikens were bought. Now Tenten wonders if her list is consistent, and what could be a possible order of placing the shurikens on the showcase. Help her to find this out!\n-----Input-----\nThe first line contains the only integer $n$ ($1\\leq n\\leq 10^5$) standing for the number of shurikens. \nThe following $2n$ lines describe the events in the format described above. It's guaranteed that there are exactly $n$ events of the first type, and each price from $1$ to $n$ occurs exactly once in the events of the second type.\n-----Output-----\nIf the list is consistent, print \"YES\". Otherwise (that is, if the list is contradictory and there is no valid order of shurikens placement), print \"NO\".\nIn the first case the second line must contain $n$ space-separated integers denoting the prices of shurikens in order they were placed. If there are multiple answers, print any.\n-----Examples-----\nInput\n4\n+\n+\n- 2\n+\n- 3\n+\n- 1\n- 4\nOutput\nYES\n4 2 3 1 \nInput\n1\n- 1\n+\nOutput\nNO\nInput\n3\n+\n+\n+\n- 2\n- 1\n- 3\nOutput\nNO\n-----Note-----\nIn the first example Tenten first placed shurikens with prices $4$ and $2$. After this a customer came in and bought the cheapest shuriken which costed $2$. Next, Tenten added a shuriken with price $3$ on the showcase to the already placed $4$-ryo. Then a new customer bought this $3$-ryo shuriken. After this she added a $1$-ryo shuriken. Finally, the last two customers bought shurikens $1$ and $4$, respectively. Note that the order $[2, 4, 3, 1]$ is also valid.\nIn the second example the first customer bought a shuriken before anything was placed, which is clearly impossible.\nIn the third example Tenten put all her shurikens onto the showcase, after which a customer came in and bought a shuriken with price $2$. This is impossible since the shuriken was not the cheapest, we know that the $1$-ryo shuriken was also there.\n\ndef",
        "answer": "def solve(n):\n    shurikens = [0] * n\n    for i in range(n):\n        shurikens[i] = int(input())\n    shurikens.sort()\n    for i in range(n):\n        shurikens[i] = str(shurikens[i])\n    print('YES')\n    print(' '.join(shurikens))",
        "difficulty": "interview"
    },
    {
        "task_id": 1952,
        "prompt": "Complete the Python function given the prompt below:So you decided to hold a contest on Codeforces. You prepared the problems: statements, solutions, checkers, validators, tests... Suddenly, your coordinator asks you to change all your tests to multiple testcases in the easiest problem!\nInitially, each test in that problem is just an array. The maximum size of an array is $k$. For simplicity, the contents of arrays don't matter. You have $n$ tests \u2014 the $i$-th test is an array of size $m_i$ ($1 \\le m_i \\le k$).\nYour coordinator asks you to distribute all of your arrays into multiple testcases. Each testcase can include multiple arrays. However, each testcase should include no more than $c_1$ arrays of size greater than or equal to $1$ ($\\ge 1$), no more than $c_2$ arrays of size greater than or equal to $2$, $\\dots$, no more than $c_k$ arrays of size greater than or equal to $k$. Also, $c_1 \\ge c_2 \\ge \\dots \\ge c_k$.\nSo now your goal is to create the new testcases in such a way that:   each of the initial arrays appears in exactly one testcase;  for each testcase the given conditions hold;  the number of testcases is minimum possible. \nPrint the minimum possible number of testcases you can achieve and the sizes of arrays included in each testcase.\n-----Input-----\nThe first line contains two integers $n$ and $k$ ($1 \\le n, k \\le 2 \\cdot 10^5$)\u00a0\u2014 the number of initial tests and the limit for the size of each array.\nThe second line contains $n$ integers $m_1, m_2, \\dots, m_n$ ($1 \\le m_i \\le k$)\u00a0\u2014 the sizes of the arrays in the original tests.\nThe third line contains $k$ integers $c_1, c_2, \\dots, c_k$ ($n \\ge c_1 \\ge c_2 \\ge \\dots \\ge c_k \\ge 1$); $c_i$ is the maximum number of arrays of size greater than or equal to $i$ you can have in a single testcase.\n-----Output-----\nIn the first line print a single integer $ans$ ($1 \\le ans \\le n$)\u00a0\u2014 the minimum number of testcases you can achieve.\nEach of the next $ans$ lines should contain the description of a testcase in the following format:\n$t$ $a_1$ $a_2$ $\\dots$ $a_{t}$ ($1 \\le t\\le n$)\u00a0\u2014 the testcase includes $t$ arrays, $a_i$ is the size of the $i$-th array in that testcase.\nEach of the initial arrays should appear in exactly one testcase. In particular, it implies that the sum of $t$ over all $ans$ testcases should be equal to $n$.\nNote that the answer always exists due to $c_k \\ge 1$ (and therefore $c_1 \\ge 1$).\nIf there are multiple answers, you can output any one of them.\n-----Examples-----\nInput\n4 3\n1 2 2 3\n4 1 1\nOutput\n3\n1 2\n2 1 3\n1 2\nInput\n6 10\n5 8 1 10 8 7\n6 6 4 4 3 2 2 2 1 1\nOutput\n2\n3 8 5 7\n3 10 8 1\nInput\n5 1\n1 1 1 1 1\n5\nOutput\n1\n5 1 1 1 1 1\nInput\n5 1\n1 1 1 1 1\n1\nOutput\n5\n1 1\n1 1\n1 1\n1 1\n1 1\n-----Note-----\nIn the first example there is no way to distribute the tests into less than $3$ testcases. The given answer satisfies the conditions: each of the testcases includes no more than $4$ arrays of size greater than or equal to $1$ and no more than $1$ array of sizes greater than or equal to $2$ and $3$.\nNote that there are multiple valid answers for this test. For example, testcases with sizes $[[2], [1, 2], [3]]$ would also be correct.\nHowever, testcases with sizes $[[1, 2], [2, 3]]$ would be incorrect because there are $2$ arrays of size greater than or equal to $2$ in the second testcase.\nNote the difference between the third and the fourth examples. You can include up to $5$ arrays of size greater than or equal to $1$ in the third example, so you can put all arrays into a single testcase. And you can have only up to $1$ array in the fourth example. Thus, every array should be included in a separate testcase.\n\ndef",
        "answer": "def solve(n, k, m):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 1953,
        "prompt": "Complete the Python function given the prompt below:Little girl Susie went shopping with her mom and she wondered how to improve service quality. \nThere are n people in the queue. For each person we know time t_{i} needed to serve him. A person will be disappointed if the time he waits is more than the time needed to serve him. The time a person waits is the total time when all the people who stand in the queue in front of him are served. Susie thought that if we swap some people in the queue, then we can decrease the number of people who are disappointed. \nHelp Susie find out what is the maximum number of not disappointed people can be achieved by swapping people in the queue.\n-----Input-----\nThe first line contains integer n (1 \u2264 n \u2264 10^5).\nThe next line contains n integers t_{i} (1 \u2264 t_{i} \u2264 10^9), separated by spaces.\n-----Output-----\nPrint a single number \u2014 the maximum number of not disappointed people in the queue.\n-----Examples-----\nInput\n5\n15 2 1 5 3\nOutput\n4\n-----Note-----\nValue 4 is achieved at such an arrangement, for example: 1, 2, 3, 5, 15. Thus, you can make everything feel not disappointed except for the person with time 5.\n\ndef",
        "answer": "def swap(arr, i, j):\n    arr[i], arr[j] = arr[j], arr[i]",
        "difficulty": "interview"
    },
    {
        "task_id": 1954,
        "prompt": "Complete the Python function given the prompt below:Today is Devu's birthday. For celebrating the occasion, he bought n sweets from the nearby market. He has invited his f friends. He would like to distribute the sweets among them. As he is a nice guy and the occasion is great, he doesn't want any friend to be sad, so he would ensure to give at least one sweet to each friend. \nHe wants to celebrate it in a unique style, so he would like to ensure following condition for the distribution of sweets. Assume that he has distributed n sweets to his friends such that i^{th} friend is given a_{i} sweets. He wants to make sure that there should not be any positive integer x > 1, which divides every a_{i}.\nPlease find the number of ways he can distribute sweets to his friends in the required way. Note that the order of distribution is important, for example [1, 2] and [2, 1] are distinct distributions. As the answer could be very large, output answer modulo 1000000007 (10^9 + 7).\nTo make the problem more interesting, you are given q queries. Each query contains an n, f pair. For each query please output the required number of ways modulo 1000000007 (10^9 + 7).\n-----Input-----\nThe first line contains an integer q representing the number of queries (1 \u2264 q \u2264 10^5). Each of the next q lines contains two space space-separated integers n, f (1 \u2264 f \u2264 n \u2264 10^5).\n-----Output-----\nFor each query, output a single integer in a line corresponding to the answer of each query.\n-----Examples-----\nInput\n5\n6 2\n7 2\n6 3\n6 4\n7 4\nOutput\n2\n6\n9\n10\n20\n-----Note-----\nFor first query: n = 6, f = 2. Possible partitions are [1, 5] and [5, 1].\nFor second query: n = 7, f = 2. Possible partitions are [1, 6] and [2, 5] and [3, 4] and [4, 3] and [5, 3] and [6, 1]. So in total there are 6 possible ways of partitioning.\n\ndef",
        "answer": "def birthday(n, f, m):\n    if n == 0:\n        return 1\n    if n < 0:\n        return 0\n    if m == 0:\n        return 0\n    if m == 1:\n        return n\n    return birthday(n - f, f, m - 1) + birthday(n, f, m)",
        "difficulty": "interview"
    },
    {
        "task_id": 1955,
        "prompt": "Complete the Python function given the prompt below:Vasiliy has an exam period which will continue for n days. He has to pass exams on m subjects. Subjects are numbered from 1 to m.\nAbout every day we know exam for which one of m subjects can be passed on that day. Perhaps, some day you can't pass any exam. It is not allowed to pass more than one exam on any day. \nOn each day Vasiliy can either pass the exam of that day (it takes the whole day) or prepare all day for some exam or have a rest. \nAbout each subject Vasiliy know a number a_{i}\u00a0\u2014 the number of days he should prepare to pass the exam number i. Vasiliy can switch subjects while preparing for exams, it is not necessary to prepare continuously during a_{i} days for the exam number i. He can mix the order of preparation for exams in any way.\nYour task is to determine the minimum number of days in which Vasiliy can pass all exams, or determine that it is impossible. Each exam should be passed exactly one time. \n-----Input-----\nThe first line contains two integers n and m (1 \u2264 n, m \u2264 10^5)\u00a0\u2014 the number of days in the exam period and the number of subjects. \nThe second line contains n integers d_1, d_2,..., d_{n} (0 \u2264 d_{i} \u2264 m), where d_{i} is the number of subject, the exam of which can be passed on the day number i. If d_{i} equals 0, it is not allowed to pass any exams on the day number i. \nThe third line contains m positive integers a_1, a_2,..., a_{m} (1 \u2264 a_{i} \u2264 10^5), where a_{i} is the number of days that are needed to prepare before passing the exam on the subject i.\n-----Output-----\nPrint one integer\u00a0\u2014 the minimum number of days in which Vasiliy can pass all exams. If it is impossible, print -1.\n-----Examples-----\nInput\n7 2\n0 1 0 2 1 0 2\n2 1\nOutput\n5\nInput\n10 3\n0 0 1 2 3 0 2 0 1 2\n1 1 4\nOutput\n9\nInput\n5 1\n1 1 1 1 1\n5\nOutput\n-1\n-----Note-----\nIn the first example Vasiliy can behave as follows. On the first and the second day he can prepare for the exam number 1 and pass it on the fifth day, prepare for the exam number 2 on the third day and pass it on the fourth day.\nIn the second example Vasiliy should prepare for the exam number 3 during the first four days and pass it on the fifth day. Then on the sixth day he should prepare for the exam number 2 and then pass it on the seventh day. After that he needs to prepare for the exam number 1 on the eighth day and pass it on the ninth day. \nIn the third example Vasiliy can't pass the only exam because he hasn't anough time to prepare for it.\n\ndef",
        "answer": "def exam_passed(n, m, d):\n    passed = [0] * m\n    for i in range(n):\n        for j in range(m):\n            if d[j] == 0:\n                passed[j] = 0\n            elif passed[j] < d[j]:\n                passed[j] = d[j]\n    return sum(passed)",
        "difficulty": "interview"
    },
    {
        "task_id": 1956,
        "prompt": "Complete the Python function given the prompt below:Lee is used to finish his stories in a stylish way, this time he barely failed it, but Ice Bear came and helped him. Lee is so grateful for it, so he decided to show Ice Bear his new game called \"Critic\"...\nThe game is a one versus one game. It has $t$ rounds, each round has two integers $s_i$ and $e_i$ (which are determined and are known before the game begins, $s_i$ and $e_i$ may differ from round to round). The integer $s_i$ is written on the board at the beginning of the corresponding round. \nThe players will take turns. Each player will erase the number on the board (let's say it was $a$) and will choose to write either $2 \\cdot a$ or $a + 1$ instead. Whoever writes a number strictly greater than $e_i$ loses that round and the other one wins that round.\nNow Lee wants to play \"Critic\" against Ice Bear, for each round he has chosen the round's $s_i$ and $e_i$ in advance. Lee will start the first round, the loser of each round will start the next round.\nThe winner of the last round is the winner of the game, and the loser of the last round is the loser of the game.\nDetermine if Lee can be the winner independent of Ice Bear's moves or not. Also, determine if Lee can be the loser independent of Ice Bear's moves or not.\n-----Input-----\nThe first line contains the integer $t$ ($1 \\le t \\le 10^5$)\u00a0\u2014 the number of rounds the game has. \nThen $t$ lines follow, each contains two integers $s_i$ and $e_i$ ($1 \\le s_i \\le e_i \\le 10^{18}$)\u00a0\u2014 the $i$-th round's information.\nThe rounds are played in the same order as given in input, $s_i$ and $e_i$ for all rounds are known to everyone before the game starts.\n-----Output-----\nPrint two integers.\nThe first one should be 1 if Lee can be the winner independent of Ice Bear's moves, and 0 otherwise.\nThe second one should be 1 if Lee can be the loser independent of Ice Bear's moves, and 0 otherwise.\n-----Examples-----\nInput\n3\n5 8\n1 4\n3 10\nOutput\n1 1\nInput\n4\n1 2\n2 3\n3 4\n4 5\nOutput\n0 0\nInput\n1\n1 1\nOutput\n0 1\nInput\n2\n1 9\n4 5\nOutput\n0 0\nInput\n2\n1 2\n2 8\nOutput\n1 0\nInput\n6\n216986951114298167 235031205335543871\n148302405431848579 455670351549314242\n506251128322958430 575521452907339082\n1 768614336404564650\n189336074809158272 622104412002885672\n588320087414024192 662540324268197150\nOutput\n1 0\n-----Note-----\nRemember, whoever writes an integer greater than $e_i$ loses.\n\ndef",
        "answer": "def lee_win(t, s, e):\n    if t == 1:\n        return 1\n    if t == 2:\n        return 0\n    if s == e:\n        return 1\n    if s > e:\n        return 0\n    if s == 1:\n        return 1\n    if s == 2:\n        return 0\n    if s == 3:\n        return 1\n    if s == 4:\n        return 0\n    if s == 5:\n        return 1\n    if s == 6:\n        return 0\n    if s == 7:\n        return 1\n    if s == 8:\n        return 0\n    if s == 9:\n        return 1\n    if s == 10:\n        return 0\n    if s == 11:\n        return 1\n    if s == 12:\n        return 0\n    if s == 13:\n        return 1\n    if s == 14:\n        return 0\n    if s == 15:\n        return 1\n    if s == 16:\n        return 0\n    if s == 17:\n        return 1\n    if s == 18:\n        return 0\n    if s == 19:\n        return 1\n    if s == 20:\n        return 0\n    if s == 21:\n        return 1\n    if s == 22:\n        return 0\n    if s == 23:\n        return 1\n    if s == 24:\n        return 0\n    if s == 25:\n        return 1\n    if s == 26:\n        return 0\n    if s == 27:\n        return 1\n    if s == 28:\n        return 0\n    if s == 29:\n        return 1\n    if s == 30:\n        return 0\n    if s == 31:\n        return 1\n    if s == 32:\n        return 0\n    if s == 33:\n        return 1\n    if s == 34:\n        return 0\n    if s == 35:\n        return 1\n    if s == 36:\n        return 0\n    if s == 37:\n        return 1\n    if s == 38:\n        return 0\n    if s == 39:\n        return 1\n    if s == 40:\n        return 0\n    if s ==",
        "difficulty": "interview"
    },
    {
        "task_id": 1957,
        "prompt": "Complete the Python function given the prompt below:Arkady wants to water his only flower. Unfortunately, he has a very poor watering system that was designed for $n$ flowers and so it looks like a pipe with $n$ holes. Arkady can only use the water that flows from the first hole.\nArkady can block some of the holes, and then pour $A$ liters of water into the pipe. After that, the water will flow out from the non-blocked holes proportionally to their sizes $s_1, s_2, \\ldots, s_n$. In other words, if the sum of sizes of non-blocked holes is $S$, and the $i$-th hole is not blocked, $\\frac{s_i \\cdot A}{S}$ liters of water will flow out of it.\nWhat is the minimum number of holes Arkady should block to make at least $B$ liters of water flow out of the first hole?\n-----Input-----\nThe first line contains three integers $n$, $A$, $B$ ($1 \\le n \\le 100\\,000$, $1 \\le B \\le A \\le 10^4$)\u00a0\u2014 the number of holes, the volume of water Arkady will pour into the system, and the volume he wants to get out of the first hole.\nThe second line contains $n$ integers $s_1, s_2, \\ldots, s_n$ ($1 \\le s_i \\le 10^4$)\u00a0\u2014 the sizes of the holes.\n-----Output-----\nPrint a single integer\u00a0\u2014 the number of holes Arkady should block.\n-----Examples-----\nInput\n4 10 3\n2 2 2 2\nOutput\n1\nInput\n4 80 20\n3 2 1 4\nOutput\n0\nInput\n5 10 10\n1000 1 1 1 1\nOutput\n4\n-----Note-----\nIn the first example Arkady should block at least one hole. After that, $\\frac{10 \\cdot 2}{6} \\approx 3.333$ liters of water will flow out of the first hole, and that suits Arkady.\nIn the second example even without blocking any hole, $\\frac{80 \\cdot 3}{10} = 24$ liters will flow out of the first hole, that is not less than $20$.\nIn the third example Arkady has to block all holes except the first to make all water flow out of the first hole.\n\ndef",
        "answer": "def solution(A, B, S):\n    # write your code in Python 2.7\n    return 0",
        "difficulty": "interview"
    },
    {
        "task_id": 1958,
        "prompt": "Complete the Python function given the prompt below:Grandma Laura came to the market to sell some apples. During the day she sold all the apples she had. But grandma is old, so she forgot how many apples she had brought to the market.\nShe precisely remembers she had n buyers and each of them bought exactly half of the apples she had at the moment of the purchase and also she gave a half of an apple to some of them as a gift (if the number of apples at the moment of purchase was odd), until she sold all the apples she had.\nSo each buyer took some integral positive number of apples, but maybe he didn't pay for a half of an apple (if the number of apples at the moment of the purchase was odd).\nFor each buyer grandma remembers if she gave a half of an apple as a gift or not. The cost of an apple is p (the number p is even).\nPrint the total money grandma should have at the end of the day to check if some buyers cheated her.\n-----Input-----\nThe first line contains two integers n and p (1 \u2264 n \u2264 40, 2 \u2264 p \u2264 1000) \u2014 the number of the buyers and the cost of one apple. It is guaranteed that the number p is even.\nThe next n lines contains the description of buyers. Each buyer is described with the string half if he simply bought half of the apples and with the string halfplus if grandma also gave him a half of an apple as a gift.\nIt is guaranteed that grandma has at least one apple at the start of the day and she has no apples at the end of the day.\n-----Output-----\nPrint the only integer a \u2014 the total money grandma should have at the end of the day.\nNote that the answer can be too large, so you should use 64-bit integer type to store it. In C++ you can use the long long integer type and in Java you can use long integer type.\n-----Examples-----\nInput\n2 10\nhalf\nhalfplus\nOutput\n15\nInput\n3 10\nhalfplus\nhalfplus\nhalfplus\nOutput\n55\n-----Note-----\nIn the first sample at the start of the day the grandma had two apples. First she sold one apple and then she sold a half of the second apple and gave a half of the second apple as a present to the second buyer.\n\ndef",
        "answer": "def countApples(n, p):\n    return n * p // 2",
        "difficulty": "interview"
    },
    {
        "task_id": 1959,
        "prompt": "Complete the Python function given the prompt below:Eugeny has n cards, each of them has exactly one integer written on it. Eugeny wants to exchange some cards with Nikolay so that the number of even integers on his cards would equal the number of odd integers, and that all these numbers would be distinct. \nNikolay has m cards, distinct numbers from 1 to m are written on them, one per card. It means that Nikolay has exactly one card with number 1, exactly one card with number 2 and so on. \nA single exchange is a process in which Eugeny gives one card to Nikolay and takes another one from those Nikolay has. Your task is to find the minimum number of card exchanges and determine which cards Eugeny should exchange.\n-----Input-----\nThe first line contains two integers n and m (2 \u2264 n \u2264 2\u00b710^5, 1 \u2264 m \u2264 10^9)\u00a0\u2014 the number of cards Eugeny has and the number of cards Nikolay has. It is guaranteed that n is even.\nThe second line contains a sequence of n positive integers a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 10^9)\u00a0\u2014 the numbers on Eugeny's cards.\n-----Output-----\nIf there is no answer, print -1.\nOtherwise, in the first line print the minimum number of exchanges. In the second line print n integers\u00a0\u2014 Eugeny's cards after all the exchanges with Nikolay. The order of cards should coincide with the card's order in the input data. If the i-th card wasn't exchanged then the i-th number should coincide with the number from the input data. Otherwise, it is considered that this card was exchanged, and the i-th number should be equal to the number on the card it was exchanged to.\nIf there are multiple answers, it is allowed to print any of them.\n-----Examples-----\nInput\n6 2\n5 6 7 9 4 5\nOutput\n1\n5 6 7 9 4 2 \nInput\n8 6\n7 7 7 7 8 8 8 8\nOutput\n6\n7 2 4 6 8 1 3 5 \nInput\n4 1\n4 2 1 10\nOutput\n-1\n\ndef",
        "answer": "def solution(n, m, a):\n    even = 0\n    odd = 0\n    for i in a:\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    if even == odd:\n        return -1\n    else:\n        return min(even, odd)",
        "difficulty": "interview"
    },
    {
        "task_id": 1960,
        "prompt": "Complete the Python function given the prompt below:The next \"Data Structures and Algorithms\" lesson will be about Longest Increasing Subsequence (LIS for short) of a sequence. For better understanding, Nam decided to learn it a few days before the lesson.\nNam created a sequence a consisting of n (1 \u2264 n \u2264 10^5) elements a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 10^5). A subsequence a_{i}_1, a_{i}_2,..., a_{i}_{k} where 1 \u2264 i_1 < i_2 <... < i_{k} \u2264 n is called increasing if a_{i}_1 < a_{i}_2 < a_{i}_3 <... < a_{i}_{k}. An increasing subsequence is called longest if it has maximum length among all increasing subsequences. \nNam realizes that a sequence may have several longest increasing subsequences. Hence, he divides all indexes i (1 \u2264 i \u2264 n), into three groups: group of all i such that a_{i} belongs to no longest increasing subsequences. group of all i such that a_{i} belongs to at least one but not every longest increasing subsequence. group of all i such that a_{i} belongs to every longest increasing subsequence. \nSince the number of longest increasing subsequences of a may be very large, categorizing process is very difficult. Your task is to help him finish this job.\n-----Input-----\nThe first line contains the single integer n (1 \u2264 n \u2264 10^5) denoting the number of elements of sequence a.\nThe second line contains n space-separated integers a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 10^5).\n-----Output-----\nPrint a string consisting of n characters. i-th character should be '1', '2' or '3' depending on which group among listed above index i belongs to.\n-----Examples-----\nInput\n1\n4\nOutput\n3\nInput\n4\n1 3 2 5\nOutput\n3223\nInput\n4\n1 5 2 3\nOutput\n3133\n-----Note-----\nIn the second sample, sequence a consists of 4 elements: {a_1, a_2, a_3, a_4} = {1, 3, 2, 5}. Sequence a has exactly 2 longest increasing subsequences of length 3, they are {a_1, a_2, a_4} = {1, 3, 5} and {a_1, a_3, a_4} = {1, 2, 5}.\nIn the third sample, sequence a consists of 4 elements: {a_1, a_2, a_3, a_4} = {1, 5, 2, 3}. Sequence a have exactly 1 longest increasing subsequence of length 3, that is {a_1, a_3, a_4} = {1, 2, 3}.\n\ndef",
        "answer": "def longest_increasing_subsequence(a):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 1961,
        "prompt": "Complete the Python function given the prompt below:Student Andrey has been skipping physical education lessons for the whole term, and now he must somehow get a passing grade on this subject. Obviously, it is impossible to do this by legal means, but Andrey doesn't give up. Having obtained an empty certificate from a local hospital, he is going to use his knowledge of local doctor's handwriting to make a counterfeit certificate of illness. However, after writing most of the certificate, Andrey suddenly discovered that doctor's signature is impossible to forge. Or is it?\nFor simplicity, the signature is represented as an $n\\times m$ grid, where every cell is either filled with ink or empty. Andrey's pen can fill a $3\\times3$ square without its central cell if it is completely contained inside the grid, as shown below. \nxxx\nx.x\nxxx\n \nDetermine whether is it possible to forge the signature on an empty $n\\times m$ grid.\n-----Input-----\nThe first line of input contains two integers $n$ and $m$ ($3 \\le n, m \\le 1000$).\nThen $n$ lines follow, each contains $m$ characters. Each of the characters is either '.', representing an empty cell, or '#', representing an ink filled cell.\n-----Output-----\nIf Andrey can forge the signature, output \"YES\". Otherwise output \"NO\".\nYou can print each letter in any case (upper or lower).\n-----Examples-----\nInput\n3 3\n###\n#.#\n###\nOutput\nYES\nInput\n3 3\n###\n###\n###\nOutput\nNO\nInput\n4 3\n###\n###\n###\n###\nOutput\nYES\nInput\n5 7\n.......\n.#####.\n.#.#.#.\n.#####.\n.......\nOutput\nYES\n-----Note-----\nIn the first sample Andrey can paint the border of the square with the center in $(2, 2)$.\nIn the second sample the signature is impossible to forge.\nIn the third sample Andrey can paint the borders of the squares with the centers in $(2, 2)$ and $(3, 2)$:   we have a clear paper: \n...\n...\n...\n...\n  use the pen with center at $(2, 2)$. \n###\n#.#\n###\n...\n  use the pen with center at $(3, 2)$. \n###\n###\n###\n###\n \nIn the fourth sample Andrey can paint the borders of the squares with the centers in $(3, 3)$ and $(3, 5)$.\n\ndef",
        "answer": "def is_possible(n, m):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 1962,
        "prompt": "Complete the Python function given the prompt below:You have m = n\u00b7k wooden staves. The i-th stave has length a_{i}. You have to assemble n barrels consisting of k staves each, you can use any k staves to construct a barrel. Each stave must belong to exactly one barrel.\nLet volume v_{j} of barrel j be equal to the length of the minimal stave in it. [Image] \nYou want to assemble exactly n barrels with the maximal total sum of volumes. But you have to make them equal enough, so a difference between volumes of any pair of the resulting barrels must not exceed l, i.e. |v_{x} - v_{y}| \u2264 l for any 1 \u2264 x \u2264 n and 1 \u2264 y \u2264 n.\nPrint maximal total sum of volumes of equal enough barrels or 0 if it's impossible to satisfy the condition above.\n-----Input-----\nThe first line contains three space-separated integers n, k and l (1 \u2264 n, k \u2264 10^5, 1 \u2264 n\u00b7k \u2264 10^5, 0 \u2264 l \u2264 10^9).\nThe second line contains m = n\u00b7k space-separated integers a_1, a_2,..., a_{m} (1 \u2264 a_{i} \u2264 10^9) \u2014 lengths of staves.\n-----Output-----\nPrint single integer \u2014 maximal total sum of the volumes of barrels or 0 if it's impossible to construct exactly n barrels satisfying the condition |v_{x} - v_{y}| \u2264 l for any 1 \u2264 x \u2264 n and 1 \u2264 y \u2264 n.\n-----Examples-----\nInput\n4 2 1\n2 2 1 2 3 2 2 3\nOutput\n7\nInput\n2 1 0\n10 10\nOutput\n20\nInput\n1 2 1\n5 2\nOutput\n2\nInput\n3 2 1\n1 2 3 4 5 6\nOutput\n0\n-----Note-----\nIn the first example you can form the following barrels: [1, 2], [2, 2], [2, 3], [2, 3].\nIn the second example you can form the following barrels: [10], [10].\nIn the third example you can form the following barrels: [2, 5].\nIn the fourth example difference between volumes of barrels in any partition is at least 2 so it is impossible to make barrels equal enough.\n\ndef",
        "answer": "def solution(n, k, l, a):\n    # your code here\n    return 0",
        "difficulty": "interview"
    },
    {
        "task_id": 1963,
        "prompt": "Complete the Python function given the prompt below:Simon has an array a_1, a_2,..., a_{n}, consisting of n positive integers. Today Simon asked you to find a pair of integers l, r (1 \u2264 l \u2264 r \u2264 n), such that the following conditions hold:  there is integer j (l \u2264 j \u2264 r), such that all integers a_{l}, a_{l} + 1,..., a_{r} are divisible by a_{j};  value r - l takes the maximum value among all pairs for which condition 1 is true; \nHelp Simon, find the required pair of numbers (l, r). If there are multiple required pairs find all of them.\n-----Input-----\nThe first line contains integer n (1 \u2264 n \u2264 3\u00b710^5).\nThe second line contains n space-separated integers a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 10^6).\n-----Output-----\nPrint two integers in the first line \u2014 the number of required pairs and the maximum value of r - l. On the following line print all l values from optimal pairs in increasing order.\n-----Examples-----\nInput\n5\n4 6 9 3 6\nOutput\n1 3\n2 \nInput\n5\n1 3 5 7 9\nOutput\n1 4\n1 \nInput\n5\n2 3 5 7 11\nOutput\n5 0\n1 2 3 4 5 \n-----Note-----\nIn the first sample the pair of numbers is right, as numbers 6, 9, 3 are divisible by 3.\nIn the second sample all numbers are divisible by number 1.\nIn the third sample all numbers are prime, so conditions 1 and 2 are true only for pairs of numbers (1, 1), (2, 2), (3, 3), (4, 4), (5, 5).\n\ndef",
        "answer": "def find_pair(a):\n    n = len(a)\n    a.sort()\n    l = 0\n    r = n - 1\n    while l < r:\n        if a[l] + a[r] == n:\n            return a[l], a[r]\n        elif a[l] + a[r] < n:\n            l += 1\n        else:\n            r -= 1\n    return -1",
        "difficulty": "interview"
    },
    {
        "task_id": 1964,
        "prompt": "Complete the Python function given the prompt below:Little Vasya went to the supermarket to get some groceries. He walked about the supermarket for a long time and got a basket full of products. Now he needs to choose the cashier to pay for the products.\nThere are n cashiers at the exit from the supermarket. At the moment the queue for the i-th cashier already has k_{i} people. The j-th person standing in the queue to the i-th cashier has m_{i}, j items in the basket. Vasya knows that:  the cashier needs 5 seconds to scan one item;  after the cashier scans each item of some customer, he needs 15 seconds to take the customer's money and give him the change. \nOf course, Vasya wants to select a queue so that he can leave the supermarket as soon as possible. Help him write a program that displays the minimum number of seconds after which Vasya can get to one of the cashiers.\n-----Input-----\nThe first line contains integer n (1 \u2264 n \u2264 100)\u00a0\u2014 the number of cashes in the shop. The second line contains n space-separated integers: k_1, k_2,..., k_{n} (1 \u2264 k_{i} \u2264 100), where k_{i} is the number of people in the queue to the i-th cashier.\nThe i-th of the next n lines contains k_{i} space-separated integers: m_{i}, 1, m_{i}, 2,..., m_{i}, k_{i} (1 \u2264 m_{i}, j \u2264 100)\u00a0\u2014 the number of products the j-th person in the queue for the i-th cash has.\n-----Output-----\nPrint a single integer \u2014 the minimum number of seconds Vasya needs to get to the cashier.\n-----Examples-----\nInput\n1\n1\n1\nOutput\n20\nInput\n4\n1 4 3 2\n100\n1 2 2 3\n1 9 1\n7 8\nOutput\n100\n-----Note-----\nIn the second test sample, if Vasya goes to the first queue, he gets to the cashier in 100\u00b75 + 15 = 515 seconds. But if he chooses the second queue, he will need 1\u00b75 + 2\u00b75 + 2\u00b75 + 3\u00b75 + 4\u00b715 = 100 seconds. He will need 1\u00b75 + 9\u00b75 + 1\u00b75 + 3\u00b715 = 100 seconds for the third one and 7\u00b75 + 8\u00b75 + 2\u00b715 = 105 seconds for the fourth one. Thus, Vasya gets to the cashier quicker if he chooses the second or the third queue.\n\ndef",
        "answer": "def solve(n, k, m):\n    return max(k) * 5 + sum(m) * 15",
        "difficulty": "interview"
    },
    {
        "task_id": 1965,
        "prompt": "Complete the Python function given the prompt below:A new agent called Killjoy invented a virus COVID-2069 that infects accounts on Codeforces. Each account has a rating, described by an integer (it can possibly be negative or very large).\nKilljoy's account is already infected and has a rating equal to $x$. Its rating is constant. There are $n$ accounts except hers, numbered from $1$ to $n$. The $i$-th account's initial rating is $a_i$. Any infected account (initially the only infected account is Killjoy's) instantly infects any uninfected account if their ratings are equal. This can happen at the beginning (before any rating changes) and after each contest. If an account is infected, it can not be healed.\nContests are regularly held on Codeforces. In each contest, any of these $n$ accounts (including infected ones) can participate. Killjoy can't participate. After each contest ratings are changed this way: each participant's rating is changed by an integer, but the sum of all changes must be equal to zero. New ratings can be any integer.\nFind out the minimal number of contests needed to infect all accounts. You can choose which accounts will participate in each contest and how the ratings will change.\nIt can be proven that all accounts can be infected in some finite number of contests.\n-----Input-----\nThe first line contains a single integer $t$ $(1 \\le t \\le 100)$\u00a0\u2014 the number of test cases. The next $2t$ lines contain the descriptions of all test cases.\nThe first line of each test case contains two integers $n$ and $x$ ($2 \\le n \\le 10^3$, $-4000 \\le x \\le 4000$)\u00a0\u2014 the number of accounts on Codeforces and the rating of Killjoy's account.\nThe second line of each test case contains $n$ integers $a_1, a_2, \\dots, a_n$ $(-4000 \\le a_i \\le 4000)$\u00a0\u2014 the ratings of other accounts.\n-----Output-----\nFor each test case output the minimal number of contests needed to infect all accounts.\n-----Example-----\nInput\n3\n2 69\n68 70\n6 4\n4 4 4 4 4 4\n9 38\n-21 83 50 -59 -77 15 -71 -78 20\nOutput\n1\n0\n2\n-----Note-----\nIn the first test case it's possible to make all ratings equal to $69$. First account's rating will increase by $1$, and second account's rating will decrease by $1$, so the sum of all changes will be equal to zero.\nIn the second test case all accounts will be instantly infected, because all ratings (including Killjoy's account's rating) are equal to $4$.\n\ndef",
        "answer": "def solve(n, x, a):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 1966,
        "prompt": "Complete the Python function given the prompt below:Magnus decided to play a classic chess game. Though what he saw in his locker shocked him! His favourite chessboard got broken into 4 pieces, each of size n by n, n is always odd. And what's even worse, some squares were of wrong color. j-th square of the i-th row of k-th piece of the board has color a_{k}, i, j; 1 being black and 0 being white. \nNow Magnus wants to change color of some squares in such a way that he recolors minimum number of squares and obtained pieces form a valid chessboard. Every square has its color different to each of the neightbouring by side squares in a valid board. Its size should be 2n by 2n. You are allowed to move pieces but not allowed to rotate or flip them.\n-----Input-----\nThe first line contains odd integer n (1 \u2264 n \u2264 100) \u2014 the size of all pieces of the board. \nThen 4 segments follow, each describes one piece of the board. Each consists of n lines of n characters; j-th one of i-th line is equal to 1 if the square is black initially and 0 otherwise. Segments are separated by an empty line.\n-----Output-----\nPrint one number \u2014 minimum number of squares Magnus should recolor to be able to obtain a valid chessboard.\n-----Examples-----\nInput\n1\n0\n0\n1\n0\nOutput\n1\nInput\n3\n101\n010\n101\n101\n000\n101\n010\n101\n011\n010\n101\n010\nOutput\n2\n\ndef",
        "answer": "def chessboard(n, a):\n    # your code here\n    return 0",
        "difficulty": "interview"
    },
    {
        "task_id": 1967,
        "prompt": "Complete the Python function given the prompt below:Polycarp is writing the prototype of a graphic editor. He has already made up his mind that the basic image transformations in his editor will be: rotate the image 90 degrees clockwise, flip the image horizontally (symmetry relative to the vertical line, that is, the right part of the image moves to the left, and vice versa) and zooming on the image. He is sure that that there is a large number of transformations that can be expressed through these three.\nHe has recently stopped implementing all three transformations for monochrome images. To test this feature, he asked you to write a code that will consecutively perform three actions with a monochrome image: first it will rotate the image 90 degrees clockwise, then it will flip the image horizontally and finally, it will zoom in twice on the image (that is, it will double all the linear sizes).\nImplement this feature to help Polycarp test his editor.\n-----Input-----\nThe first line contains two integers, w and h (1 \u2264 w, h \u2264 100) \u2014 the width and height of an image in pixels. The picture is given in h lines, each line contains w characters \u2014 each character encodes the color of the corresponding pixel of the image. The line consists only of characters \".\" and \"*\", as the image is monochrome.\n-----Output-----\nPrint 2w lines, each containing 2h characters \u2014 the result of consecutive implementing of the three transformations, described above.\n-----Examples-----\nInput\n3 2\n.*.\n.*.\nOutput\n....\n....\n****\n****\n....\n....\nInput\n9 20\n**.......\n****.....\n******...\n*******..\n..******.\n....****.\n......***\n*.....***\n*********\n*********\n*********\n*********\n....**...\n...****..\n..******.\n.********\n****..***\n***...***\n**.....**\n*.......*\nOutput\n********......**********........********\n********......**********........********\n********........********......********..\n********........********......********..\n..********......********....********....\n..********......********....********....\n..********......********..********......\n..********......********..********......\n....********....****************........\n....********....****************........\n....********....****************........\n....********....****************........\n......******************..**********....\n......******************..**********....\n........****************....**********..\n........****************....**********..\n............************......**********\n............************......**********\n\ndef",
        "answer": "def transform(image):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 1968,
        "prompt": "Complete the Python function given the prompt below:Valera is a collector. Once he wanted to expand his collection with exactly one antique item.\nValera knows n sellers of antiques, the i-th of them auctioned k_{i} items. Currently the auction price of the j-th object of the i-th seller is s_{ij}. Valera gets on well with each of the n sellers. He is perfectly sure that if he outbids the current price of one of the items in the auction (in other words, offers the seller the money that is strictly greater than the current price of the item at the auction), the seller of the object will immediately sign a contract with him.\nUnfortunately, Valera has only v units of money. Help him to determine which of the n sellers he can make a deal with.\n-----Input-----\nThe first line contains two space-separated integers n, v (1 \u2264 n \u2264 50;\u00a010^4 \u2264 v \u2264 10^6) \u2014 the number of sellers and the units of money the Valera has.\nThen n lines follow. The i-th line first contains integer k_{i} (1 \u2264 k_{i} \u2264 50) the number of items of the i-th seller. Then go k_{i} space-separated integers s_{i}1, s_{i}2,..., s_{ik}_{i} (10^4 \u2264 s_{ij} \u2264 10^6) \u2014 the current prices of the items of the i-th seller. \n-----Output-----\nIn the first line, print integer p \u2014 the number of sellers with who Valera can make a deal.\nIn the second line print p space-separated integers q_1, q_2,..., q_{p} (1 \u2264 q_{i} \u2264 n) \u2014 the numbers of the sellers with who Valera can make a deal. Print the numbers of the sellers in the increasing order. \n-----Examples-----\nInput\n3 50000\n1 40000\n2 20000 60000\n3 10000 70000 190000\nOutput\n3\n1 2 3\nInput\n3 50000\n1 50000\n3 100000 120000 110000\n3 120000 110000 120000\nOutput\n0\n\n-----Note-----\nIn the first sample Valera can bargain with each of the sellers. He can outbid the following items: a 40000 item from the first seller, a 20000 item from the second seller, and a 10000 item from the third seller.\nIn the second sample Valera can not make a deal with any of the sellers, as the prices of all items in the auction too big for him.\n\ndef",
        "answer": "def valera(n, v):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 1969,
        "prompt": "Complete the Python function given the prompt below:Lunar New Year is approaching, and you bought a matrix with lots of \"crosses\".\nThis matrix $M$ of size $n \\times n$ contains only 'X' and '.' (without quotes). The element in the $i$-th row and the $j$-th column $(i, j)$ is defined as $M(i, j)$, where $1 \\leq i, j \\leq n$. We define a cross appearing in the $i$-th row and the $j$-th column ($1 < i, j < n$) if and only if $M(i, j) = M(i - 1, j - 1) = M(i - 1, j + 1) = M(i + 1, j - 1) = M(i + 1, j + 1) = $ 'X'.\nThe following figure illustrates a cross appearing at position $(2, 2)$ in a $3 \\times 3$ matrix. \nX.X\n.X.\nX.X\n \nYour task is to find out the number of crosses in the given matrix $M$. Two crosses are different if and only if they appear in different rows or columns.\n-----Input-----\nThe first line contains only one positive integer $n$ ($1 \\leq n \\leq 500$), denoting the size of the matrix $M$.\nThe following $n$ lines illustrate the matrix $M$. Each line contains exactly $n$ characters, each of them is 'X' or '.'. The $j$-th element in the $i$-th line represents $M(i, j)$, where $1 \\leq i, j \\leq n$.\n-----Output-----\nOutput a single line containing only one integer number $k$ \u2014 the number of crosses in the given matrix $M$.\n-----Examples-----\nInput\n5\n.....\n.XXX.\n.XXX.\n.XXX.\n.....\nOutput\n1\nInput\n2\nXX\nXX\nOutput\n0\nInput\n6\n......\nX.X.X.\n.X.X.X\nX.X.X.\n.X.X.X\n......\nOutput\n4\n-----Note-----\nIn the first sample, a cross appears at $(3, 3)$, so the answer is $1$.\nIn the second sample, no crosses appear since $n < 3$, so the answer is $0$.\nIn the third sample, crosses appear at $(3, 2)$, $(3, 4)$, $(4, 3)$, $(4, 5)$, so the answer is $4$.\n\ndef",
        "answer": "def cross(M, i, j):\n    if M[i][j] == 'X':\n        return 1\n    else:\n        return 0",
        "difficulty": "interview"
    },
    {
        "task_id": 1970,
        "prompt": "Complete the Python function given the prompt below:A boy Petya loves chess very much. He even came up with a chess piece of his own, a semiknight. The semiknight can move in any of these four directions: 2 squares forward and 2 squares to the right, 2 squares forward and 2 squares to the left, 2 squares backward and 2 to the right and 2 squares backward and 2 to the left. Naturally, the semiknight cannot move beyond the limits of the chessboard.\nPetya put two semiknights on a standard chessboard. Petya simultaneously moves with both semiknights. The squares are rather large, so after some move the semiknights can meet, that is, they can end up in the same square. After the meeting the semiknights can move on, so it is possible that they meet again. Petya wonders if there is such sequence of moves when the semiknights meet. Petya considers some squares bad. That is, they do not suit for the meeting. The semiknights can move through these squares but their meetings in these squares don't count.\nPetya prepared multiple chess boards. Help Petya find out whether the semiknights can meet on some good square for each board.\nPlease see the test case analysis.\n-----Input-----\nThe first line contains number t (1 \u2264 t \u2264 50) \u2014 the number of boards. Each board is described by a matrix of characters, consisting of 8 rows and 8 columns. The matrix consists of characters \".\", \"#\", \"K\", representing an empty good square, a bad square and the semiknight's position, correspondingly. It is guaranteed that matrix contains exactly 2 semiknights. The semiknight's squares are considered good for the meeting. The tests are separated by empty line.\n-----Output-----\nFor each test, print on a single line the answer to the problem: \"YES\", if the semiknights can meet and \"NO\" otherwise.\n-----Examples-----\nInput\n2\n........\n........\n......#.\nK..##..#\n.......#\n...##..#\n......#.\nK.......\n........\n........\n..#.....\n..#..#..\n..####..\n...##...\n........\n....K#K#\nOutput\nYES\nNO\n-----Note-----\nConsider the first board from the sample. We will assume the rows and columns of the matrix to be numbered 1 through 8 from top to bottom and from left to right, correspondingly. The knights can meet, for example, in square (2, 7). The semiknight from square (4, 1) goes to square (2, 3) and the semiknight goes from square (8, 1) to square (6, 3). Then both semiknights go to (4, 5) but this square is bad, so they move together to square (2, 7).\nOn the second board the semiknights will never meet.\n\ndef",
        "answer": "def is_good_square(matrix, row, col):\n    if row < 0 or row >= len(matrix):\n        return False\n    if col < 0 or col >= len(matrix[0]):\n        return False\n    return matrix[row][col] == '.'",
        "difficulty": "interview"
    },
    {
        "task_id": 1971,
        "prompt": "Complete the Python function given the prompt below:A permutation of length n is an array containing each integer from 1 to n exactly once. For example, q = [4, 5, 1, 2, 3] is a permutation. For the permutation q the square of permutation is the permutation p that p[i] = q[q[i]] for each i = 1... n. For example, the square of q = [4, 5, 1, 2, 3] is p = q^2 = [2, 3, 4, 5, 1].\nThis problem is about the inverse operation: given the permutation p you task is to find such permutation q that q^2 = p. If there are several such q find any of them.\n-----Input-----\nThe first line contains integer n (1 \u2264 n \u2264 10^6) \u2014 the number of elements in permutation p.\nThe second line contains n distinct integers p_1, p_2,..., p_{n} (1 \u2264 p_{i} \u2264 n) \u2014 the elements of permutation p.\n-----Output-----\nIf there is no permutation q such that q^2 = p print the number \"-1\".\nIf the answer exists print it. The only line should contain n different integers q_{i} (1 \u2264 q_{i} \u2264 n) \u2014 the elements of the permutation q. If there are several solutions print any of them.\n-----Examples-----\nInput\n4\n2 1 4 3\nOutput\n3 4 2 1\nInput\n4\n2 1 3 4\nOutput\n-1\nInput\n5\n2 3 4 5 1\nOutput\n4 5 1 2 3\n\ndef",
        "answer": "def square_permutation(p):\n    n = len(p)\n    p_inv = [0] * n\n    for i in range(n):\n        p_inv[p[i] - 1] = i + 1\n    return p_inv",
        "difficulty": "interview"
    },
    {
        "task_id": 1972,
        "prompt": "Complete the Python function given the prompt below:You are given an array $a$ consisting of $500000$ integers (numbered from $1$ to $500000$). Initially all elements of $a$ are zero.\nYou have to process two types of queries to this array:  $1$ $x$ $y$\u00a0\u2014 increase $a_x$ by $y$;  $2$ $x$ $y$\u00a0\u2014 compute $\\sum\\limits_{i \\in R(x, y)} a_i$, where $R(x, y)$ is the set of all integers from $1$ to $500000$ which have remainder $y$ modulo $x$. \nCan you process all the queries?\n-----Input-----\nThe first line contains one integer $q$ ($1 \\le q \\le 500000$) \u2014 the number of queries.\nThen $q$ lines follow, each describing a query. The $i$-th line contains three integers $t_i$, $x_i$ and $y_i$ ($1 \\le t_i \\le 2$). If $t_i = 1$, then it is a query of the first type, $1 \\le x_i \\le 500000$, and $-1000 \\le y_i \\le 1000$. If $t_i = 2$, then it it a query of the second type, $1 \\le x_i \\le 500000$, and $0 \\le y_i < x_i$.\nIt is guaranteed that there will be at least one query of type $2$.\n-----Output-----\nFor each query of type $2$ print one integer \u2014 the answer to it.\n-----Example-----\nInput\n5\n1 3 4\n2 3 0\n2 4 3\n1 4 -4\n2 1 0\nOutput\n4\n4\n0\n\ndef",
        "answer": "def solve(a, q):\n    for i in range(q):\n        t, x, y = map(int, input().split())\n        if t == 1:\n            a[x-1] += y\n        elif t == 2:\n            print(sum(a[x-1:y]))",
        "difficulty": "interview"
    },
    {
        "task_id": 1973,
        "prompt": "Complete the Python function given the prompt below:This problem is same as the next one, but has smaller constraints.\nShiro's just moved to the new house. She wants to invite all friends of her to the house so they can play monopoly. However, her house is too small, so she can only invite one friend at a time.\nFor each of the $n$ days since the day Shiro moved to the new house, there will be exactly one cat coming to the Shiro's house. The cat coming in the $i$-th day has a ribbon with color $u_i$. Shiro wants to know the largest number $x$, such that if we consider the streak of the first $x$ days, it is possible to remove exactly one day from this streak so that every ribbon color that has appeared among the remaining $x - 1$ will have the same number of occurrences.\nFor example, consider the following sequence of $u_i$: $[2, 2, 1, 1, 5, 4, 4, 5]$. Then $x = 7$ makes a streak, since if we remove the leftmost $u_i = 5$, each ribbon color will appear exactly twice in the prefix of $x - 1$ days. Note that $x = 8$ doesn't form a streak, since you must remove exactly one day. \nSince Shiro is just a cat, she is not very good at counting and needs your help finding the longest streak.\n-----Input-----\nThe first line contains a single integer $n$ ($1 \\leq n \\leq 10^5$)\u00a0\u2014 the total number of days.\nThe second line contains $n$ integers $u_1, u_2, \\ldots, u_n$ ($1 \\leq u_i \\leq 10$)\u00a0\u2014 the colors of the ribbons the cats wear. \n-----Output-----\nPrint a single integer $x$\u00a0\u2014 the largest possible streak of days.\n-----Examples-----\nInput\n13\n1 1 1 2 2 2 3 3 3 4 4 4 5\nOutput\n13\nInput\n5\n10 2 5 4 1\nOutput\n5\nInput\n1\n10\nOutput\n1\nInput\n7\n3 2 1 1 4 5 1\nOutput\n6\nInput\n6\n1 1 1 2 2 2\nOutput\n5\n-----Note-----\nIn the first example, we can choose the longest streak of $13$ days, since upon removing the last day out of the streak, all of the remaining colors $1$, $2$, $3$, and $4$ will have the same number of occurrences of $3$. Note that the streak can also be $10$ days (by removing the $10$-th day from this streak) but we are interested in the longest streak.\nIn the fourth example, if we take the streak of the first $6$ days, we can remove the third day from this streak then all of the remaining colors $1$, $2$, $3$, $4$ and $5$ will occur exactly once.\n\ndef",
        "answer": "def longest_streak(n, u):\n    # your code here\n    return 0",
        "difficulty": "interview"
    },
    {
        "task_id": 1974,
        "prompt": "Complete the Python function given the prompt below:There are $n$ robbers at coordinates $(a_1, b_1)$, $(a_2, b_2)$,..., $(a_n, b_n)$ and $m$ searchlight at coordinates $(c_1, d_1)$, $(c_2, d_2)$,..., $(c_m, d_m)$. \nIn one move you can move each robber to the right (increase $a_i$ of each robber by one) or move each robber up (increase $b_i$ of each robber by one). Note that you should either increase all $a_i$ or all $b_i$, you can't increase $a_i$ for some points and $b_i$ for some other points.\nSearchlight $j$ can see a robber $i$ if $a_i \\leq c_j$ and $b_i \\leq d_j$. \nA configuration of robbers is safe if no searchlight can see a robber (i.e. if there is no pair $i,j$ such that searchlight $j$ can see a robber $i$).\nWhat is the minimum number of moves you need to perform to reach a safe configuration?\n-----Input-----\nThe first line of input contains two integers $n$ and $m$ ($1 \\leq n, m \\leq 2000$): the number of robbers and the number of searchlight.\nEach of the next $n$ lines contains two integers $a_i$, $b_i$ ($0 \\leq a_i, b_i \\leq 10^6$), coordinates of robbers.\nEach of the next $m$ lines contains two integers $c_i$, $d_i$ ($0 \\leq c_i, d_i \\leq 10^6$), coordinates of searchlights.\n-----Output-----\nPrint one integer: the minimum number of moves you need to perform to reach a safe configuration.\n-----Examples-----\nInput\n1 1\n0 0\n2 3\nOutput\n3\nInput\n2 3\n1 6\n6 1\n10 1\n1 10\n7 7\nOutput\n4\nInput\n1 2\n0 0\n0 0\n0 0\nOutput\n1\nInput\n7 3\n0 8\n3 8\n2 7\n0 10\n5 5\n7 0\n3 5\n6 6\n3 11\n11 5\nOutput\n6\n-----Note-----\nIn the first test, you can move each robber to the right three times. After that there will be one robber in the coordinates $(3, 0)$.\nThe configuration of the robbers is safe, because the only searchlight can't see the robber, because it is in the coordinates $(2, 3)$ and $3 > 2$.\nIn the second test, you can move each robber to the right two times and two times up. After that robbers will be in the coordinates $(3, 8)$, $(8, 3)$.\nIt's easy the see that the configuration of the robbers is safe.\nIt can be proved that you can't reach a safe configuration using no more than $3$ moves.\n\ndef",
        "answer": "def robber(n, m):\n    a = [0] * n\n    b = [0] * n\n    for i in range(n):\n        a[i], b[i] = map(int, input().split())\n    c = [0] * m\n    d = [0] * m\n    for i in range(m):\n        c[i], d[i] = map(int, input().split())\n    count = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i] <= c[j] and b[i] <= d[j]:\n                count += 1\n    print(count)",
        "difficulty": "interview"
    },
    {
        "task_id": 1975,
        "prompt": "Complete the Python function given the prompt below:Fox Ciel and her friends are in a dancing room. There are n boys and m girls here, and they never danced before. There will be some songs, during each song, there must be exactly one boy and one girl are dancing. Besides, there is a special rule:  either the boy in the dancing pair must dance for the first time (so, he didn't dance with anyone before);  or the girl in the dancing pair must dance for the first time. \nHelp Fox Ciel to make a schedule that they can dance as many songs as possible.\n-----Input-----\nThe first line contains two integers n and m (1 \u2264 n, m \u2264 100) \u2014 the number of boys and girls in the dancing room.\n-----Output-----\nIn the first line print k \u2014 the number of songs during which they can dance. Then in the following k lines, print the indexes of boys and girls dancing during songs chronologically. You can assume that the boys are indexed from 1 to n, and the girls are indexed from 1 to m.\n-----Examples-----\nInput\n2 1\nOutput\n2\n1 1\n2 1\nInput\n2 2\nOutput\n3\n1 1\n1 2\n2 2\n-----Note-----\nIn test case 1, there are 2 boys and 1 girl. We can have 2 dances: the 1st boy and 1st girl (during the first song), the 2nd boy and 1st girl (during the second song).\nAnd in test case 2, we have 2 boys with 2 girls, the answer is 3.\n\ndef",
        "answer": "def dance(n, m):\n    boys = [i for i in range(1, n+1)]\n    girls = [i for i in range(1, m+1)]\n    boys_dance = []\n    girls_dance = []\n    for i in range(n):\n        boys_dance.append(i+1)\n    for i in range(m):\n        girls_dance.append(i+1)\n    boys_dance.append(boys_dance[0])\n    girls_dance.append(girls_dance[0])\n    boys_dance.append(boys_dance[0])\n    girls_dance.append(girls_dance[0])\n    boys_dance.append(boys_dance[0])\n    girls_dance.append(girls_dance[0])\n    boys_dance.append(boys_dance[0])\n    girls_dance.append(girls_dance[0])\n    boys_dance.append(boys_dance[0])\n    girls_dance.append(girls_dance[0])\n    boys_dance.append(boys_dance[0])\n    girls_dance.append(girls_dance[0])\n    boys_dance.append(boys_dance[0])\n    girls_dance.append(girls_dance[0])\n    boys_dance.append(boys_dance[0])\n    girls_dance.append(girls_dance[0])\n    boys_dance.append(boys_dance[0])\n    girls_dance.append(girls_dance[0])\n    boys_dance.append(boys_dance[0])\n    girls_dance.append(girls_dance[0])\n    boys_dance.append(boys_dance[0])\n    girls_dance.append(girls_dance[0])\n    boys_dance.append(boys_dance[0])\n    girls_dance.append(girls_dance[0])\n    boys_dance.append(boys_dance[0])",
        "difficulty": "interview"
    },
    {
        "task_id": 1976,
        "prompt": "Complete the Python function given the prompt below:Recently Luba bought a monitor. Monitor is a rectangular matrix of size n \u00d7 m. But then she started to notice that some pixels cease to work properly. Luba thinks that the monitor will become broken the first moment when it contains a square k \u00d7 k consisting entirely of broken pixels. She knows that q pixels are already broken, and for each of them she knows the moment when it stopped working. Help Luba to determine when the monitor became broken (or tell that it's still not broken even after all q pixels stopped working).\n-----Input-----\nThe first line contains four integer numbers n, m, k, q\u00a0(1 \u2264 n, m \u2264 500, 1 \u2264 k \u2264 min(n, m), 0 \u2264 q \u2264 n\u00b7m) \u2014 the length and width of the monitor, the size of a rectangle such that the monitor is broken if there is a broken rectangle with this size, and the number of broken pixels.\nEach of next q lines contain three integer numbers x_{i}, y_{i}, t_{i}\u00a0(1 \u2264 x_{i} \u2264 n, 1 \u2264 y_{i} \u2264 m, 0 \u2264 t_{ \u2264 10}^9) \u2014 coordinates of i-th broken pixel (its row and column in matrix) and the moment it stopped working. Each pixel is listed at most once.\nWe consider that pixel is already broken at moment t_{i}.\n-----Output-----\nPrint one number \u2014 the minimum moment the monitor became broken, or \"-1\" if it's still not broken after these q pixels stopped working.\n-----Examples-----\nInput\n2 3 2 5\n2 1 8\n2 2 8\n1 2 1\n1 3 4\n2 3 2\nOutput\n8\nInput\n3 3 2 5\n1 2 2\n2 2 1\n2 3 5\n3 2 10\n2 1 100\nOutput\n-1\n\ndef",
        "answer": "def broken_monitor(n, m, k, q):\n    broken_pixels = set()\n    for _ in range(q):\n        x, y, t = map(int, input().split())\n        broken_pixels.add((x, y, t))\n    broken_pixels = sorted(broken_pixels, key=lambda x: x[2])\n    broken_pixels = sorted(broken_pixels, key=lambda x: x[1])\n    broken_pixels = sorted(broken_pixels, key=lambda x: x[0])\n    broken_pixels = sorted(broken_pixels, key=lambda x: x[1])\n    broken_pixels = sorted(broken_pixels, key=lambda x: x[0])\n    broken_pixels = sorted(broken_pixels, key=lambda x: x[2])\n    broken_pixels = sorted(broken_pixels, key=lambda x: x[1])\n    broken_pixels = sorted(broken_pixels, key=lambda x: x[0])\n    broken_pixels = sorted(broken_pixels, key=lambda x: x[2])\n    broken_pixels = sorted(broken_pixels, key=lambda x: x[1])\n    broken_pixels = sorted(broken_pixels, key=lambda x: x[0])\n    broken_pixels = sorted(broken_pixels, key=lambda x: x[2])\n    broken_pixels = sorted(broken_pixels, key=lambda x: x[1])\n    broken_pixels = sorted(broken_pixels, key=lambda x: x[0])\n    broken_pixels = sorted(broken_pixels, key=lambda x: x[2])\n    broken_pixels = sorted(broken_pixels, key=lambda x: x[1])\n    broken_pixels = sorted(broken_pixels, key=lambda x: x[0])\n    broken_pixels = sorted(broken_pixels, key=lambda x: x[2])\n    broken_pixels = sorted(broken_pixels, key=lambda x: x[1])\n    ",
        "difficulty": "interview"
    },
    {
        "task_id": 1977,
        "prompt": "Complete the Python function given the prompt below:You are given a matrix of size $n \\times n$ filled with lowercase English letters. You can change no more than $k$ letters in this matrix.\nConsider all paths from the upper left corner to the lower right corner that move from a cell to its neighboring cell to the right or down. Each path is associated with the string that is formed by all the letters in the cells the path visits. Thus, the length of each string is $2n - 1$.\nFind the lexicographically smallest string that can be associated with a path after changing letters in at most $k$ cells of the matrix.\nA string $a$ is lexicographically smaller than a string $b$, if the first different letter in $a$ and $b$ is smaller in $a$.\n-----Input-----\nThe first line contains two integers $n$ and $k$ ($1 \\le n \\le 2000$, $0 \\le k \\le n^2$) \u2014 the size of the matrix and the number of letters you can change.\nEach of the next $n$ lines contains a string of $n$ lowercase English letters denoting one row of the matrix.\n-----Output-----\nOutput the lexicographically smallest string that can be associated with some valid path after changing no more than $k$ letters in the matrix.\n-----Examples-----\nInput\n4 2\nabcd\nbcde\nbcad\nbcde\nOutput\naaabcde\nInput\n5 3\nbwwwz\nhrhdh\nsepsp\nsqfaf\najbvw\nOutput\naaaepfafw\nInput\n7 6\nypnxnnp\npnxonpm\nnxanpou\nxnnpmud\nnhtdudu\nnpmuduh\npmutsnz\nOutput\naaaaaaadudsnz\n-----Note-----\nIn the first sample test case it is possible to change letters 'b' in cells $(2, 1)$ and $(3, 1)$ to 'a', then the minimum path contains cells $(1, 1), (2, 1), (3, 1), (4, 1), (4, 2), (4, 3), (4, 4)$. The first coordinate corresponds to the row and the second coordinate corresponds to the column.\n\ndef",
        "answer": "def smallest_lexicographically(n, k):\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 1978,
        "prompt": "Complete the Python function given the prompt below:The main characters have been omitted to be short.\nYou are given a directed unweighted graph without loops with $n$ vertexes and a path in it (that path is not necessary simple) given by a sequence $p_1, p_2, \\ldots, p_m$ of $m$ vertexes; for each $1 \\leq i < m$ there is an arc from $p_i$ to $p_{i+1}$.\nDefine the sequence $v_1, v_2, \\ldots, v_k$ of $k$ vertexes as good, if $v$ is a subsequence of $p$, $v_1 = p_1$, $v_k = p_m$, and $p$ is one of the shortest paths passing through the vertexes $v_1$, $\\ldots$, $v_k$ in that order.\nA sequence $a$ is a subsequence of a sequence $b$ if $a$ can be obtained from $b$ by deletion of several (possibly, zero or all) elements. It is obvious that the sequence $p$ is good but your task is to find the shortest good subsequence.\nIf there are multiple shortest good subsequences, output any of them.\n \n-----Input-----\nThe first line contains a single integer $n$ ($2 \\le n \\le 100$)\u00a0\u2014 the number of vertexes in a graph. \nThe next $n$ lines define the graph by an adjacency matrix: the $j$-th character in the $i$-st line is equal to $1$ if there is an arc from vertex $i$ to the vertex $j$ else it is equal to $0$. It is guaranteed that the graph doesn't contain loops.\nThe next line contains a single integer $m$ ($2 \\le m \\le 10^6$)\u00a0\u2014 the number of vertexes in the path. \nThe next line contains $m$ integers $p_1, p_2, \\ldots, p_m$ ($1 \\le p_i \\le n$)\u00a0\u2014 the sequence of vertexes in the path. It is guaranteed that for any $1 \\leq i < m$ there is an arc from $p_i$ to $p_{i+1}$.\n-----Output-----\nIn the first line output a single integer $k$ ($2 \\leq k \\leq m$)\u00a0\u2014 the length of the shortest good subsequence. In the second line output $k$ integers $v_1$, $\\ldots$, $v_k$ ($1 \\leq v_i \\leq n$)\u00a0\u2014 the vertexes in the subsequence. If there are multiple shortest subsequences, print any. Any two consecutive numbers should be distinct.\n-----Examples-----\nInput\n4\n0110\n0010\n0001\n1000\n4\n1 2 3 4\nOutput\n3\n1 2 4 \nInput\n4\n0110\n0010\n1001\n1000\n20\n1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4\nOutput\n11\n1 2 4 2 4 2 4 2 4 2 4 \nInput\n3\n011\n101\n110\n7\n1 2 3 1 3 2 1\nOutput\n7\n1 2 3 1 3 2 1 \nInput\n4\n0110\n0001\n0001\n1000\n3\n1 2 4\nOutput\n2\n1 4 \n-----Note-----\nBelow you can see the graph from the first example:\n[Image]\nThe given path is passing through vertexes $1$, $2$, $3$, $4$. The sequence $1-2-4$ is good because it is the subsequence of the given path, its first and the last elements are equal to the first and the last elements of the given path respectively, and the shortest path passing through vertexes $1$, $2$ and $4$ in that order is $1-2-3-4$. Note that subsequences $1-4$ and $1-3-4$ aren't good because in both cases the shortest path passing through the vertexes of these sequences is $1-3-4$.\nIn the third example, the graph is full so any sequence of vertexes in which any two consecutive elements are distinct defines a path consisting of the same number of vertexes.\nIn the fourth example, the paths $1-2-4$ and $1-3-4$ are the shortest paths passing through the vertexes $1$ and $4$.\n\ndef",
        "answer": "def good_subsequence(n, m, p):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 1979,
        "prompt": "Complete the Python function given the prompt below:After the mysterious disappearance of Ashish, his two favourite disciples Ishika and Hriday, were each left with one half of a secret message. These messages can each be represented by a permutation of size $n$. Let's call them $a$ and $b$.\nNote that a permutation of $n$ elements is a sequence of numbers $a_1, a_2, \\ldots, a_n$, in which every number from $1$ to $n$ appears exactly once. \nThe message can be decoded by an arrangement of sequence $a$ and $b$, such that the number of matching pairs of elements between them is maximum. A pair of elements $a_i$ and $b_j$ is said to match if:   $i = j$, that is, they are at the same index.  $a_i = b_j$ \nHis two disciples are allowed to perform the following operation any number of times:   choose a number $k$ and cyclically shift one of the permutations to the left or right $k$ times. \nA single cyclic shift to the left on any permutation $c$ is an operation that sets $c_1:=c_2, c_2:=c_3, \\ldots, c_n:=c_1$ simultaneously. Likewise, a single cyclic shift to the right on any permutation $c$ is an operation that sets $c_1:=c_n, c_2:=c_1, \\ldots, c_n:=c_{n-1}$ simultaneously.\nHelp Ishika and Hriday find the maximum number of pairs of elements that match after performing the operation any (possibly zero) number of times.\n-----Input-----\nThe first line of the input contains a single integer $n$ $(1 \\le n \\le 2 \\cdot 10^5)$\u00a0\u2014 the size of the arrays.\nThe second line contains $n$ integers $a_1$, $a_2$,..., $a_n$ $(1 \\le a_i \\le n)$ \u2014 the elements of the first permutation.\nThe third line contains $n$ integers $b_1$, $b_2$,..., $b_n$ $(1 \\le b_i \\le n)$ \u2014 the elements of the second permutation.\n-----Output-----\nPrint the maximum number of matching pairs of elements after performing the above operations some (possibly zero) times.\n-----Examples-----\nInput\n5\n1 2 3 4 5\n2 3 4 5 1\nOutput\n5\nInput\n5\n5 4 3 2 1\n1 2 3 4 5\nOutput\n1\nInput\n4\n1 3 2 4\n4 2 3 1\nOutput\n2\n-----Note-----\nFor the first case: $b$ can be shifted to the right by $k = 1$. The resulting permutations will be $\\{1, 2, 3, 4, 5\\}$ and $\\{1, 2, 3, 4, 5\\}$.\nFor the second case: The operation is not required. For all possible rotations of $a$ and $b$, the number of matching pairs won't exceed $1$.\nFor the third case: $b$ can be shifted to the left by $k = 1$. The resulting permutations will be $\\{1, 3, 2, 4\\}$ and $\\{2, 3, 1, 4\\}$. Positions $2$ and $4$ have matching pairs of elements. For all possible rotations of $a$ and $b$, the number of matching pairs won't exceed $2$.\n\ndef",
        "answer": "def max_matching_pairs(a, b):\n    # your code here\n    return 0",
        "difficulty": "interview"
    },
    {
        "task_id": 1980,
        "prompt": "Complete the Python function given the prompt below:Vasya got really tired of these credits (from problem F) and now wants to earn the money himself! He decided to make a contest to gain a profit.\nVasya has $n$ problems to choose from. They are numbered from $1$ to $n$. The difficulty of the $i$-th problem is $d_i$. Moreover, the problems are given in the increasing order by their difficulties. The difficulties of all tasks are pairwise distinct. In order to add the $i$-th problem to the contest you need to pay $c_i$ burles to its author. For each problem in the contest Vasya gets $a$ burles.\nIn order to create a contest he needs to choose a consecutive subsegment of tasks.\nSo the total earnings for the contest are calculated as follows:   if Vasya takes problem $i$ to the contest, he needs to pay $c_i$ to its author;  for each problem in the contest Vasya gets $a$ burles;  let $gap(l, r) = \\max\\limits_{l \\le i < r} (d_{i + 1} - d_i)^2$. If Vasya takes all the tasks with indices from $l$ to $r$ to the contest, he also needs to pay $gap(l, r)$. If $l = r$ then $gap(l, r) = 0$. \nCalculate the maximum profit that Vasya can earn by taking a consecutive segment of tasks.\n-----Input-----\nThe first line contains two integers $n$ and $a$ ($1 \\le n \\le 3 \\cdot 10^5$, $1 \\le a \\le 10^9$) \u2014 the number of proposed tasks and the profit for a single problem, respectively.\nEach of the next $n$ lines contains two integers $d_i$ and $c_i$ ($1 \\le d_i, c_i \\le 10^9, d_i < d_{i+1}$).\n-----Output-----\nPrint one integer \u2014 maximum amount of burles Vasya can earn.\n-----Examples-----\nInput\n5 10\n1 15\n5 3\n6 11\n7 2\n11 22\nOutput\n13\nInput\n3 5\n1 8\n2 19\n3 11\nOutput\n0\n\ndef",
        "answer": "def solve(n, a, c):\n    return solve(n - 1, a, c) + solve(n - 1, a + c, c)",
        "difficulty": "interview"
    },
    {
        "task_id": 1981,
        "prompt": "Complete the Python function given the prompt below:Kefa decided to celebrate his first big salary by going to the restaurant. \nHe lives by an unusual park. The park is a rooted tree consisting of n vertices with the root at vertex 1. Vertex 1 also contains Kefa's house. Unfortunaely for our hero, the park also contains cats. Kefa has already found out what are the vertices with cats in them.\nThe leaf vertices of the park contain restaurants. Kefa wants to choose a restaurant where he will go, but unfortunately he is very afraid of cats, so there is no way he will go to the restaurant if the path from the restaurant to his house contains more than m consecutive vertices with cats. \nYour task is to help Kefa count the number of restaurants where he can go.\n-----Input-----\nThe first line contains two integers, n and m (2 \u2264 n \u2264 10^5, 1 \u2264 m \u2264 n) \u2014 the number of vertices of the tree and the maximum number of consecutive vertices with cats that is still ok for Kefa.\nThe second line contains n integers a_1, a_2,..., a_{n}, where each a_{i} either equals to 0 (then vertex i has no cat), or equals to 1 (then vertex i has a cat).\nNext n - 1 lines contains the edges of the tree in the format \"x_{i} y_{i}\" (without the quotes) (1 \u2264 x_{i}, y_{i} \u2264 n, x_{i} \u2260 y_{i}), where x_{i} and y_{i} are the vertices of the tree, connected by an edge. \nIt is guaranteed that the given set of edges specifies a tree.\n-----Output-----\nA single integer \u2014 the number of distinct leaves of a tree the path to which from Kefa's home contains at most m consecutive vertices with cats.\n-----Examples-----\nInput\n4 1\n1 1 0 0\n1 2\n1 3\n1 4\nOutput\n2\nInput\n7 1\n1 0 1 1 0 0 0\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\nOutput\n2\n-----Note-----\nLet us remind you that a tree is a connected graph on n vertices and n - 1 edge. A rooted tree is a tree with a special vertex called root. In a rooted tree among any two vertices connected by an edge, one vertex is a parent (the one closer to the root), and the other one is a child. A vertex is called a leaf, if it has no children.\nNote to the first sample test: $80$ The vertices containing cats are marked red. The restaurants are at vertices 2, 3, 4. Kefa can't go only to the restaurant located at vertex 2.\nNote to the second sample test: $88$ The restaurants are located at vertices 4, 5, 6, 7. Kefa can't go to restaurants 6, 7.\n\ndef",
        "answer": "def count_restaurants(n, m, a):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 1982,
        "prompt": "Complete the Python function given the prompt below:You are given two integers $n$ and $k$. Your task is to find if $n$ can be represented as a sum of $k$ distinct positive odd (not divisible by $2$) integers or not.\nYou have to answer $t$ independent test cases.\n-----Input-----\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 10^5$) \u2014 the number of test cases.\nThe next $t$ lines describe test cases. The only line of the test case contains two integers $n$ and $k$ ($1 \\le n, k \\le 10^7$).\n-----Output-----\nFor each test case, print the answer \u2014 \"YES\" (without quotes) if $n$ can be represented as a sum of $k$ distinct positive odd (not divisible by $2$) integers and \"NO\" otherwise.\n-----Example-----\nInput\n6\n3 1\n4 2\n10 3\n10 2\n16 4\n16 5\nOutput\nYES\nYES\nNO\nYES\nYES\nNO\n-----Note-----\nIn the first test case, you can represent $3$ as $3$.\nIn the second test case, the only way to represent $4$ is $1+3$.\nIn the third test case, you cannot represent $10$ as the sum of three distinct positive odd integers.\nIn the fourth test case, you can represent $10$ as $3+7$, for example.\nIn the fifth test case, you can represent $16$ as $1+3+5+7$.\nIn the sixth test case, you cannot represent $16$ as the sum of five distinct positive odd integers.\n\ndef",
        "answer": "def solve():\n    n,k = map(int,input().split())\n    if n%2==0:\n        print(\"NO\")\n    else:\n        if k>=n:\n            print(\"NO\")\n        else:\n            print(\"YES\")\nif __name__==\"__main__\":\n    t = int(input())\n    for i in range(t):\n        solve()\n",
        "difficulty": "interview"
    },
    {
        "task_id": 1983,
        "prompt": "Complete the Python function given the prompt below:Ehab has an array $a$ of length $n$. He has just enough free time to make a new array consisting of $n$ copies of the old array, written back-to-back. What will be the length of the new array's longest increasing subsequence?\nA sequence $a$ is a subsequence of an array $b$ if $a$ can be obtained from $b$ by deletion of several (possibly, zero or all) elements. The longest increasing subsequence of an array is the longest subsequence such that its elements are ordered in strictly increasing order.\n-----Input-----\nThe first line contains an integer $t$\u00a0\u2014 the number of test cases you need to solve. The description of the test cases follows.\nThe first line of each test case contains an integer $n$ ($1 \\le n \\le 10^5$)\u00a0\u2014 the number of elements in the array $a$.\nThe second line contains $n$ space-separated integers $a_1$, $a_2$, $\\ldots$, $a_{n}$ ($1 \\le a_i \\le 10^9$)\u00a0\u2014 the elements of the array $a$.\nThe sum of $n$ across the test cases doesn't exceed $10^5$.\n-----Output-----\nFor each testcase, output the length of the longest increasing subsequence of $a$ if you concatenate it to itself $n$ times.\n-----Example-----\nInput\n2\n3\n3 2 1\n6\n3 1 4 1 5 9\nOutput\n3\n5\n-----Note-----\nIn the first sample, the new array is $[3,2,\\textbf{1},3,\\textbf{2},1,\\textbf{3},2,1]$. The longest increasing subsequence is marked in bold.\nIn the second sample, the longest increasing subsequence will be $[1,3,4,5,9]$.\n\ndef",
        "answer": "def longest_increasing_subsequence(a):\n    n = len(a)\n    b = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] > a[j] and b[i] < b[j] + 1:\n                b[i] = b[j] + 1\n    return max(b)",
        "difficulty": "interview"
    },
    {
        "task_id": 1984,
        "prompt": "Complete the Python function given the prompt below:During the loading of the game \"Dungeons and Candies\" you are required to get descriptions of k levels from the server. Each description is a map of an n \u00d7 m checkered rectangular field. Some cells of the field contain candies (each cell has at most one candy). An empty cell is denoted as \".\" on the map, but if a cell has a candy, it is denoted as a letter of the English alphabet. A level may contain identical candies, in this case the letters in the corresponding cells of the map will be the same.\n [Image] \nWhen you transmit information via a network, you want to minimize traffic \u2014 the total size of the transferred data. The levels can be transmitted in any order. There are two ways to transmit the current level A:\n  You can transmit the whole level A. Then you need to transmit n\u00b7m bytes via the network.  You can transmit the difference between level A and some previously transmitted level B (if it exists); this operation requires to transmit d_{A}, B\u00b7w bytes, where d_{A}, B is the number of cells of the field that are different for A and B, and w is a constant. Note, that you should compare only the corresponding cells of levels A and B to calculate d_{A}, B. You cannot transform the maps of levels, i.e. rotate or shift them relatively to each other. \nYour task is to find a way to transfer all the k levels and minimize the traffic.\n-----Input-----\nThe first line contains four integers n, m, k, w (1 \u2264 n, m \u2264 10;\u00a01 \u2264 k, w \u2264 1000). Then follows the description of k levels. Each level is described by n lines, each line contains m characters. Each character is either a letter of the English alphabet or a dot (\".\"). Please note that the case of the letters matters.\n-----Output-----\nIn the first line print the required minimum number of transferred bytes.\nThen print k pairs of integers x_1, y_1, x_2, y_2,..., x_{k}, y_{k}, describing the way to transfer levels. Pair x_{i}, y_{i} means that level x_{i} needs to be transferred by way y_{i}. If y_{i} equals 0, that means that the level must be transferred using the first way, otherwise y_{i} must be equal to the number of a previously transferred level. It means that you will transfer the difference between levels y_{i} and x_{i} to transfer level x_{i}. Print the pairs in the order of transferring levels. The levels are numbered 1 through k in the order they follow in the input.\nIf there are multiple optimal solutions, you can print any of them.\n-----Examples-----\nInput\n2 3 3 2\nA.A\n...\nA.a\n..C\nX.Y\n...\nOutput\n14\n1 0\n2 1\n3 1\nInput\n1 1 4 1\nA\n.\nB\n.\nOutput\n3\n1 0\n2 0\n4 2\n3 0\nInput\n1 3 5 2\nABA\nBBB\nBBA\nBAB\nABB\nOutput\n11\n1 0\n3 1\n2 3\n4 2\n5 1\n\ndef",
        "answer": "def solution(n, m, k, w):\n    # write your code in Python 2.7\n    pass\n",
        "difficulty": "interview"
    },
    {
        "task_id": 1985,
        "prompt": "Complete the Python function given the prompt below:Polycarp watched TV-show where k jury members one by one rated a participant by adding him a certain number of points (may be negative, i.\u00a0e. points were subtracted). Initially the participant had some score, and each the marks were one by one added to his score. It is known that the i-th jury member gave a_{i} points.\nPolycarp does not remember how many points the participant had before this k marks were given, but he remembers that among the scores announced after each of the k judges rated the participant there were n (n \u2264 k) values b_1, b_2,..., b_{n} (it is guaranteed that all values b_{j} are distinct). It is possible that Polycarp remembers not all of the scores announced, i.\u00a0e. n < k. Note that the initial score wasn't announced.\nYour task is to determine the number of options for the score the participant could have before the judges rated the participant.\n-----Input-----\nThe first line contains two integers k and n (1 \u2264 n \u2264 k \u2264 2 000) \u2014 the number of jury members and the number of scores Polycarp remembers.\nThe second line contains k integers a_1, a_2,..., a_{k} ( - 2 000 \u2264 a_{i} \u2264 2 000) \u2014 jury's marks in chronological order.\nThe third line contains n distinct integers b_1, b_2,..., b_{n} ( - 4 000 000 \u2264 b_{j} \u2264 4 000 000) \u2014 the values of points Polycarp remembers. Note that these values are not necessarily given in chronological order.\n-----Output-----\nPrint the number of options for the score the participant could have before the judges rated the participant. If Polycarp messes something up and there is no options, print \"0\" (without quotes).\n-----Examples-----\nInput\n4 1\n-5 5 0 20\n10\nOutput\n3\nInput\n2 2\n-2000 -2000\n3998000 4000000\nOutput\n1\n-----Note-----\nThe answer for the first example is 3 because initially the participant could have  - 10, 10 or 15 points.\nIn the second example there is only one correct initial score equaling to 4 002 000.\n\ndef",
        "answer": "def solution(k, n, a, b):\n    # your code here\n    return 0",
        "difficulty": "interview"
    },
    {
        "task_id": 1986,
        "prompt": "Complete the Python function given the prompt below:Having written another programming contest, three Rabbits decided to grab some lunch. The coach gave the team exactly k time units for the lunch break.\nThe Rabbits have a list of n restaurants to lunch in: the i-th restaurant is characterized by two integers f_{i} and t_{i}. Value t_{i} shows the time the Rabbits need to lunch in the i-th restaurant. If time t_{i} exceeds the time k that the coach has given for the lunch break, then the Rabbits' joy from lunching in this restaurant will equal f_{i} - (t_{i} - k). Otherwise, the Rabbits get exactly f_{i} units of joy.\nYour task is to find the value of the maximum joy the Rabbits can get from the lunch, depending on the restaurant. The Rabbits must choose exactly one restaurant to lunch in. Note that the joy value isn't necessarily a positive value. \n-----Input-----\nThe first line contains two space-separated integers \u2014 n (1 \u2264 n \u2264 10^4) and k (1 \u2264 k \u2264 10^9) \u2014 the number of restaurants in the Rabbits' list and the time the coach has given them to lunch, correspondingly. Each of the next n lines contains two space-separated integers \u2014 f_{i} (1 \u2264 f_{i} \u2264 10^9) and t_{i} (1 \u2264 t_{i} \u2264 10^9) \u2014 the characteristics of the i-th restaurant.\n-----Output-----\nIn a single line print a single integer \u2014 the maximum joy value that the Rabbits will get from the lunch. \n-----Examples-----\nInput\n2 5\n3 3\n4 5\nOutput\n4\nInput\n4 6\n5 8\n3 6\n2 3\n2 2\nOutput\n3\nInput\n1 5\n1 7\nOutput\n-1\n\ndef",
        "answer": "def max_joy(k, n, f):\n    max_joy = 0\n    for i in range(n):\n        if f[i] > k:\n            max_joy += f[i] - (f[i] - k)\n        else:\n            max_joy += f[i]\n    return max_joy",
        "difficulty": "interview"
    },
    {
        "task_id": 1987,
        "prompt": "Complete the Python function given the prompt below:Pupils decided to go to amusement park. Some of them were with parents. In total, n people came to the park and they all want to get to the most extreme attraction and roll on it exactly once.\nTickets for group of x people are sold on the attraction, there should be at least one adult in each group (it is possible that the group consists of one adult). The ticket price for such group is c_1 + c_2\u00b7(x - 1)^2 (in particular, if the group consists of one person, then the price is c_1). \nAll pupils who came to the park and their parents decided to split into groups in such a way that each visitor join exactly one group, and the total price of visiting the most extreme attraction is as low as possible. You are to determine this minimum possible total price. There should be at least one adult in each group. \n-----Input-----\nThe first line contains three integers n, c_1 and c_2 (1 \u2264 n \u2264 200 000, 1 \u2264 c_1, c_2 \u2264 10^7)\u00a0\u2014 the number of visitors and parameters for determining the ticket prices for a group.\nThe second line contains the string of length n, which consists of zeros and ones. If the i-th symbol of the string is zero, then the i-th visitor is a pupil, otherwise the i-th person is an adult. It is guaranteed that there is at least one adult. It is possible that there are no pupils.\n-----Output-----\nPrint the minimum price of visiting the most extreme attraction for all pupils and their parents. Each of them should roll on the attraction exactly once.\n-----Examples-----\nInput\n3 4 1\n011\nOutput\n8\nInput\n4 7 2\n1101\nOutput\n18\n-----Note-----\nIn the first test one group of three people should go to the attraction. Then they have to pay 4 + 1 * (3 - 1)^2 = 8.\nIn the second test it is better to go to the attraction in two groups. The first group should consist of two adults (for example, the first and the second person), the second should consist of one pupil and one adult (the third and the fourth person). Then each group will have a size of two and for each the price of ticket is 7 + 2 * (2 - 1)^2 = 9. Thus, the total price for two groups is 18.\n\ndef",
        "answer": "def solve(n, c_1, c_2, s):\n    price = 0\n    for i in range(n):\n        if s[i] == '0':\n            price += c_1\n        else:\n            price += c_2 * (n - 1) ** 2\n    return price",
        "difficulty": "interview"
    },
    {
        "task_id": 1988,
        "prompt": "Complete the Python function given the prompt below:Vasya has a string $s$ of length $n$. He decides to make the following modification to the string:   Pick an integer $k$, ($1 \\leq k \\leq n$).  For $i$ from $1$ to $n-k+1$, reverse the substring $s[i:i+k-1]$ of $s$. For example, if string $s$ is qwer and $k = 2$, below is the series of transformations the string goes through:   qwer (original string)  wqer (after reversing the first substring of length $2$)  weqr (after reversing the second substring of length $2$)  werq (after reversing the last substring of length $2$)  Hence, the resulting string after modifying $s$ with $k = 2$ is werq. \nVasya wants to choose a $k$ such that the string obtained after the above-mentioned modification is lexicographically smallest possible among all choices of $k$. Among all such $k$, he wants to choose the smallest one. Since he is busy attending Felicity 2020, he asks for your help.\nA string $a$ is lexicographically smaller than a string $b$ if and only if one of the following holds:   $a$ is a prefix of $b$, but $a \\ne b$;  in the first position where $a$ and $b$ differ, the string $a$ has a letter that appears earlier in the alphabet than the corresponding letter in $b$. \n-----Input-----\nEach test contains multiple test cases. \nThe first line contains the number of test cases $t$ ($1 \\le t \\le 5000$). The description of the test cases follows.\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 5000$)\u00a0\u2014 the length of the string $s$.\nThe second line of each test case contains the string $s$ of $n$ lowercase latin letters.\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $5000$.\n-----Output-----\nFor each testcase output two lines:\nIn the first line output the lexicographically smallest string $s'$ achievable after the above-mentioned modification. \nIn the second line output the appropriate value of $k$ ($1 \\leq k \\leq n$) that you chose for performing the modification. If there are multiple values of $k$ that give the lexicographically smallest string, output the smallest value of $k$ among them.\n-----Example-----\nInput\n6\n4\nabab\n6\nqwerty\n5\naaaaa\n6\nalaska\n9\nlfpbavjsm\n1\np\nOutput\nabab\n1\nertyqw\n3\naaaaa\n1\naksala\n6\navjsmbpfl\n5\np\n1\n-----Note-----\nIn the first testcase of the first sample, the string modification results for the sample abab are as follows :   for $k = 1$ : abab  for $k = 2$ : baba  for $k = 3$ : abab  for $k = 4$ : baba\nThe lexicographically smallest string achievable through modification is abab for $k = 1$ and $3$. Smallest value of $k$ needed to achieve is hence $1$.\n\ndef",
        "answer": "def lexicographicallySmallestString(s):\n    n = len(s)\n    k = 1\n    while k <= n:\n        for i in range(n - k + 1):\n            if s[i:i + k - 1] == s[i:i + k - 1][::-1]:\n                return s[:i] + s[i:i + k - 1][::-1]\n        k += 1\n    return s",
        "difficulty": "interview"
    },
    {
        "task_id": 1989,
        "prompt": "Complete the Python function given the prompt below:Parmida is a clever girl and she wants to participate in Olympiads this year. Of course she wants her partner to be clever too (although he's not)! Parmida has prepared the following test problem for Pashmak.\nThere is a sequence a that consists of n integers a_1, a_2,..., a_{n}. Let's denote f(l, r, x) the number of indices k such that: l \u2264 k \u2264 r and a_{k} = x. His task is to calculate the number of pairs of indicies i, j (1 \u2264 i < j \u2264 n) such that f(1, i, a_{i}) > f(j, n, a_{j}).\nHelp Pashmak with the test.\n-----Input-----\nThe first line of the input contains an integer n (1 \u2264 n \u2264 10^6). The second line contains n space-separated integers a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 10^9).\n-----Output-----\nPrint a single integer \u2014 the answer to the problem.\n-----Examples-----\nInput\n7\n1 2 1 1 2 2 1\nOutput\n8\nInput\n3\n1 1 1\nOutput\n1\nInput\n5\n1 2 3 4 5\nOutput\n0\n\ndef",
        "answer": "def f(l, r, x):\n    return l <= k <= r and a[k] == x",
        "difficulty": "interview"
    },
    {
        "task_id": 1990,
        "prompt": "Complete the Python function given the prompt below:The development of a text editor is a hard problem. You need to implement an extra module for brackets coloring in text.\nYour editor consists of a line with infinite length and cursor, which points to the current character. Please note that it points to only one of the characters (and not between a pair of characters). Thus, it points to an index character. The user can move the cursor left or right one position. If the cursor is already at the first (leftmost) position, then it does not move left.\nInitially, the cursor is in the first (leftmost) character.\nAlso, the user can write a letter or brackets (either (, or )) to the position that the cursor is currently pointing at. A new character always overwrites the old value at that position.\nYour editor must check, whether the current line is the correct text. Text is correct if the brackets in them form the correct bracket sequence.\nFormally, correct text (CT) must satisfy the following rules:   any line without brackets is CT (the line can contain whitespaces);  If the first character of the string \u2014 is (, the last \u2014 is ), and all the rest form a CT, then the whole line is a CT;  two consecutively written CT is also CT. \nExamples of correct texts: hello(codeforces), round, ((i)(write))edi(tor)s, ( me). Examples of incorrect texts: hello)oops(, round), ((me).\nThe user uses special commands to work with your editor. Each command has its symbol, which must be written to execute this command.\nThe correspondence of commands and characters is as follows:   L \u2014 move the cursor one character to the left (remains in place if it already points to the first character);  R \u2014 move the cursor one character to the right;  any lowercase Latin letter or bracket (( or )) \u2014 write the entered character to the position where the cursor is now. \nFor a complete understanding, take a look at the first example and its illustrations in the note below.\nYou are given a string containing the characters that the user entered. For the brackets coloring module's work, after each command you need to:\n  check if the current text in the editor is a correct text;  if it is, print the least number of colors that required, to color all brackets. \nIf two pairs of brackets are nested (the first in the second or vice versa), then these pairs of brackets should be painted in different colors. If two pairs of brackets are not nested, then they can be painted in different or the same colors. For example, for the bracket sequence ()(())()() the least number of colors is $2$, and for the bracket sequence (()(()())())(()) \u2014 is $3$.\nWrite a program that prints the minimal number of colors after processing each command.\n-----Input-----\nThe first line contains an integer $n$ ($1 \\le n \\le 10^6$) \u2014 the number of commands. \nThe second line contains $s$ \u2014 a sequence of commands. The string $s$ consists of $n$ characters. It is guaranteed that all characters in a string are valid commands.\n-----Output-----\nIn a single line print $n$ integers, where the $i$-th number is:\n  $-1$ if the line received after processing the first $i$ commands is not valid text,  the minimal number of colors in the case of the correct text. \n-----Examples-----\nInput\n11\n(RaRbR)L)L(\nOutput\n-1 -1 -1 -1 -1 -1 1 1 -1 -1 2 \nInput\n11\n(R)R(R)Ra)c\nOutput\n-1 -1 1 1 -1 -1 1 1 1 -1 1 \n-----Note-----\nIn the first example, the text in the editor will take the following form:\n  (\n^  (\n ^  (a\n ^  (a\n  ^  (ab\n  ^  (ab\n   ^  (ab)\n   ^  (ab)\n  ^  (a))\n  ^  (a))\n ^  (())\n ^\n\ndef",
        "answer": "def color_brackets(s):\n    # your code here\n    return",
        "difficulty": "interview"
    },
    {
        "task_id": 1991,
        "prompt": "Complete the Python function given the prompt below:Patrick likes to play baseball, but sometimes he will spend so many hours hitting home runs that his mind starts to get foggy! Patrick is sure that his scores across $n$ sessions follow the identity permutation (ie. in the first game he scores $1$ point, in the second game he scores $2$ points and so on). However, when he checks back to his record, he sees that all the numbers are mixed up! \nDefine a special exchange as the following: choose any subarray of the scores and permute elements such that no element of subarray gets to the same position as it was before the exchange. For example, performing a special exchange on $[1,2,3]$ can yield $[3,1,2]$ but it cannot yield $[3,2,1]$ since the $2$ is in the same position. \nGiven a permutation of $n$ integers, please help Patrick find the minimum number of special exchanges needed to make the permutation sorted! It can be proved that under given constraints this number doesn't exceed $10^{18}$.\nAn array $a$ is a subarray of an array $b$ if $a$ can be obtained from $b$ by deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end.\n-----Input-----\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 100$). Description of the test cases follows.\nThe first line of each test case contains integer $n$ ($1 \\leq n \\leq 2 \\cdot 10^5$) \u00a0\u2014 the length of the given permutation.\nThe second line of each test case contains $n$ integers $a_{1},a_{2},...,a_{n}$ ($1 \\leq a_{i} \\leq n$) \u00a0\u2014 the initial permutation.\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n-----Output-----\nFor each test case, output one integer: the minimum number of special exchanges needed to sort the permutation.\n-----Example-----\nInput\n2\n5\n1 2 3 4 5\n7\n3 2 4 5 1 6 7\nOutput\n0\n2\n-----Note-----\nIn the first permutation, it is already sorted so no exchanges are needed.\nIt can be shown that you need at least $2$ exchanges to sort the second permutation.\n$[3, 2, 4, 5, 1, 6, 7]$\nPerform special exchange on range ($1, 5$)\n$[4, 1, 2, 3, 5, 6, 7]$\nPerform special exchange on range ($1, 4$)\n$[1, 2, 3, 4, 5, 6, 7]$\n\ndef",
        "answer": "def special_exchange(a):\n    n = len(a)\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] > a[j]:\n                a[i], a[j] = a[j], a[i]\n    return a",
        "difficulty": "interview"
    },
    {
        "task_id": 1992,
        "prompt": "Complete the Python function given the prompt below:Anya has bought a new smartphone that uses Berdroid operating system. The smartphone menu has exactly n applications, each application has its own icon. The icons are located on different screens, one screen contains k icons. The icons from the first to the k-th one are located on the first screen, from the (k + 1)-th to the 2k-th ones are on the second screen and so on (the last screen may be partially empty).\nInitially the smartphone menu is showing the screen number 1. To launch the application with the icon located on the screen t, Anya needs to make the following gestures: first she scrolls to the required screen number t, by making t - 1 gestures (if the icon is on the screen t), and then make another gesture \u2014 press the icon of the required application exactly once to launch it.\nAfter the application is launched, the menu returns to the first screen. That is, to launch the next application you need to scroll through the menu again starting from the screen number 1.\nAll applications are numbered from 1 to n. We know a certain order in which the icons of the applications are located in the menu at the beginning, but it changes as long as you use the operating system. Berdroid is intelligent system, so it changes the order of the icons by moving the more frequently used icons to the beginning of the list. Formally, right after an application is launched, Berdroid swaps the application icon and the icon of a preceding application (that is, the icon of an application on the position that is smaller by one in the order of menu). The preceding icon may possibly be located on the adjacent screen. The only exception is when the icon of the launched application already occupies the first place, in this case the icon arrangement doesn't change.\nAnya has planned the order in which she will launch applications. How many gestures should Anya make to launch the applications in the planned order? \nNote that one application may be launched multiple times.\n-----Input-----\nThe first line of the input contains three numbers n, m, k (1 \u2264 n, m, k \u2264 10^5)\u00a0\u2014\u00a0the number of applications that Anya has on her smartphone, the number of applications that will be launched and the number of icons that are located on the same screen.\nThe next line contains n integers, permutation a_1, a_2,..., a_{n}\u00a0\u2014\u00a0the initial order of icons from left to right in the menu (from the first to the last one), a_{i}\u00a0\u2014\u00a0 is the id of the application, whose icon goes i-th in the menu. Each integer from 1 to n occurs exactly once among a_{i}.\nThe third line contains m integers b_1, b_2,..., b_{m}(1 \u2264 b_{i} \u2264 n)\u00a0\u2014\u00a0the ids of the launched applications in the planned order. One application may be launched multiple times.\n-----Output-----\nPrint a single number \u2014 the number of gestures that Anya needs to make to launch all the applications in the desired order.\n-----Examples-----\nInput\n8 3 3\n1 2 3 4 5 6 7 8\n7 8 1\nOutput\n7\nInput\n5 4 2\n3 1 5 2 4\n4 4 4 4\nOutput\n8\n-----Note-----\nIn the first test the initial configuration looks like (123)(456)(78), that is, the first screen contains icons of applications 1, 2, 3, the second screen contains icons 4, 5, 6, the third screen contains icons 7, 8. \nAfter application 7 is launched, we get the new arrangement of the icons\u00a0\u2014\u00a0(123)(457)(68). To launch it Anya makes 3 gestures. \nAfter application 8 is launched, we get configuration (123)(457)(86). To launch it Anya makes 3 gestures. \nAfter application 1 is launched, the arrangement of icons in the menu doesn't change. To launch it Anya makes 1 gesture.\nIn total, Anya makes 7 gestures.\n\ndef",
        "answer": "def solution(n, m, k, a, b):\n    # Write your code here\n    pass\n",
        "difficulty": "interview"
    },
    {
        "task_id": 1993,
        "prompt": "Complete the Python function given the prompt below:You are given a rectangular field of n \u00d7 m cells. Each cell is either empty or impassable (contains an obstacle). Empty cells are marked with '.', impassable cells are marked with '*'. Let's call two empty cells adjacent if they share a side.\nLet's call a connected component any non-extendible set of cells such that any two of them are connected by the path of adjacent cells. It is a typical well-known definition of a connected component.\nFor each impassable cell (x, y) imagine that it is an empty cell (all other cells remain unchanged) and find the size (the number of cells) of the connected component which contains (x, y). You should do it for each impassable cell independently.\nThe answer should be printed as a matrix with n rows and m columns. The j-th symbol of the i-th row should be \".\" if the cell is empty at the start. Otherwise the j-th symbol of the i-th row should contain the only digit \u2014- the answer modulo 10. The matrix should be printed without any spaces.\nTo make your output faster it is recommended to build the output as an array of n strings having length m and print it as a sequence of lines. It will be much faster than writing character-by-character.\nAs input/output can reach huge size it is recommended to use fast input/output methods: for example, prefer to use scanf/printf instead of cin/cout in C++, prefer to use BufferedReader/PrintWriter instead of Scanner/System.out in Java.\n-----Input-----\nThe first line contains two integers n, m (1 \u2264 n, m \u2264 1000) \u2014 the number of rows and columns in the field.\nEach of the next n lines contains m symbols: \".\" for empty cells, \"*\" for impassable cells.\n-----Output-----\nPrint the answer as a matrix as described above. See the examples to precise the format of the output.\n-----Examples-----\nInput\n3 3\n*.*\n.*.\n*.*\nOutput\n3.3\n.5.\n3.3\nInput\n4 5\n**..*\n..***\n.*.*.\n*.*.*\nOutput\n46..3\n..732\n.6.4.\n5.4.3\n-----Note-----\nIn first example, if we imagine that the central cell is empty then it will be included to component of size 5 (cross). If any of the corner cell will be empty then it will be included to component of size 3 (corner).\n\ndef",
        "answer": "def solution(n, m):\n    # write your code in Python 2.7\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 1994,
        "prompt": "Complete the Python function given the prompt below:You have a string s = s_1s_2...s_{|}s|, where |s| is the length of string s, and s_{i} its i-th character. \nLet's introduce several definitions:  A substring s[i..j] (1 \u2264 i \u2264 j \u2264 |s|) of string s is string s_{i}s_{i} + 1...s_{j}.  The prefix of string s of length l (1 \u2264 l \u2264 |s|) is string s[1..l].  The suffix of string s of length l (1 \u2264 l \u2264 |s|) is string s[|s| - l + 1..|s|]. \nYour task is, for any prefix of string s which matches a suffix of string s, print the number of times it occurs in string s as a substring.\n-----Input-----\nThe single line contains a sequence of characters s_1s_2...s_{|}s| (1 \u2264 |s| \u2264 10^5) \u2014 string s. The string only consists of uppercase English letters.\n-----Output-----\nIn the first line, print integer k (0 \u2264 k \u2264 |s|) \u2014 the number of prefixes that match a suffix of string s. Next print k lines, in each line print two integers l_{i} c_{i}. Numbers l_{i} c_{i} mean that the prefix of the length l_{i} matches the suffix of length l_{i} and occurs in string s as a substring c_{i} times. Print pairs l_{i} c_{i} in the order of increasing l_{i}.\n-----Examples-----\nInput\nABACABA\nOutput\n3\n1 4\n3 2\n7 1\nInput\nAAA\nOutput\n3\n1 3\n2 2\n3 1\n\ndef",
        "answer": "def count_substring(string, sub_string):\n    count = 0\n    for i in range(len(string)):\n        if string[i:].startswith(sub_string):\n            count += 1\n    return count",
        "difficulty": "interview"
    },
    {
        "task_id": 1995,
        "prompt": "Complete the Python function given the prompt below:You are given a string s and should process m queries. Each query is described by two 1-based indices l_{i}, r_{i} and integer k_{i}. It means that you should cyclically shift the substring s[l_{i}... r_{i}] k_{i} times. The queries should be processed one after another in the order they are given.\nOne operation of a cyclic shift (rotation) is equivalent to moving the last character to the position of the first character and shifting all other characters one position to the right.\nFor example, if the string s is abacaba and the query is l_1 = 3, r_1 = 6, k_1 = 1 then the answer is abbacaa. If after that we would process the query l_2 = 1, r_2 = 4, k_2 = 2 then we would get the string baabcaa.\n-----Input-----\nThe first line of the input contains the string s (1 \u2264 |s| \u2264 10 000) in its initial state, where |s| stands for the length of s. It contains only lowercase English letters.\nSecond line contains a single integer m (1 \u2264 m \u2264 300)\u00a0\u2014 the number of queries.\nThe i-th of the next m lines contains three integers l_{i}, r_{i} and k_{i} (1 \u2264 l_{i} \u2264 r_{i} \u2264 |s|, 1 \u2264 k_{i} \u2264 1 000 000)\u00a0\u2014 the description of the i-th query.\n-----Output-----\nPrint the resulting string s after processing all m queries.\n-----Examples-----\nInput\nabacaba\n2\n3 6 1\n1 4 2\nOutput\nbaabcaa\n-----Note-----\nThe sample is described in problem statement.\n\ndef",
        "answer": "def cyclic_shift(s, k):\n    return s[k:] + s[:k]",
        "difficulty": "interview"
    },
    {
        "task_id": 1996,
        "prompt": "Complete the Python function given the prompt below:Valentin participates in a show called \"Shockers\". The rules are quite easy: jury selects one letter which Valentin doesn't know. He should make a small speech, but every time he pronounces a word that contains the selected letter, he receives an electric shock. He can make guesses which letter is selected, but for each incorrect guess he receives an electric shock too. The show ends when Valentin guesses the selected letter correctly.\nValentin can't keep in mind everything, so he could guess the selected letter much later than it can be uniquely determined and get excessive electric shocks. Excessive electric shocks are those which Valentin got after the moment the selected letter can be uniquely determined. You should find out the number of excessive electric shocks.\n-----Input-----\nThe first line contains a single integer n (1 \u2264 n \u2264 10^5)\u00a0\u2014 the number of actions Valentin did.\nThe next n lines contain descriptions of his actions, each line contains description of one action. Each action can be of one of three types:   Valentin pronounced some word and didn't get an electric shock. This action is described by the string \". w\" (without quotes), in which \".\" is a dot (ASCII-code 46), and w is the word that Valentin said.  Valentin pronounced some word and got an electric shock. This action is described by the string \"! w\" (without quotes), in which \"!\" is an exclamation mark (ASCII-code 33), and w is the word that Valentin said.  Valentin made a guess about the selected letter. This action is described by the string \"? s\" (without quotes), in which \"?\" is a question mark (ASCII-code 63), and s is the guess\u00a0\u2014 a lowercase English letter. \nAll words consist only of lowercase English letters. The total length of all words does not exceed 10^5.\nIt is guaranteed that last action is a guess about the selected letter. Also, it is guaranteed that Valentin didn't make correct guesses about the selected letter before the last action. Moreover, it's guaranteed that if Valentin got an electric shock after pronouncing some word, then it contains the selected letter; and also if Valentin didn't get an electric shock after pronouncing some word, then it does not contain the selected letter.\n-----Output-----\nOutput a single integer\u00a0\u2014 the number of electric shocks that Valentin could have avoided if he had told the selected letter just after it became uniquely determined.\n-----Examples-----\nInput\n5\n! abc\n. ad\n. b\n! cd\n? c\nOutput\n1\nInput\n8\n! hello\n! codeforces\n? c\n. o\n? d\n? h\n. l\n? e\nOutput\n2\nInput\n7\n! ababahalamaha\n? a\n? b\n? a\n? b\n? a\n? h\nOutput\n0\n-----Note-----\nIn the first test case after the first action it becomes clear that the selected letter is one of the following: a, b, c. After the second action we can note that the selected letter is not a. Valentin tells word \"b\" and doesn't get a shock. After that it is clear that the selected letter is c, but Valentin pronounces the word cd and gets an excessive electric shock. \nIn the second test case after the first two electric shocks we understand that the selected letter is e or o. Valentin tries some words consisting of these letters and after the second word it's clear that the selected letter is e, but Valentin makes 3 more actions before he makes a correct hypothesis.\nIn the third example the selected letter can be uniquely determined only when Valentin guesses it, so he didn't get excessive electric shocks.\n\ndef",
        "answer": "def solve(n):\n    return 0",
        "difficulty": "interview"
    },
    {
        "task_id": 1997,
        "prompt": "Complete the Python function given the prompt below:Demiurges Shambambukli and Mazukta love to watch the games of ordinary people. Today, they noticed two men who play the following game.\nThere is a rooted tree on n nodes, m of which are leaves (a leaf is a nodes that does not have any children), edges of the tree are directed from parent to children. In the leaves of the tree integers from 1 to m are placed in such a way that each number appears exactly in one leaf.\nInitially, the root of the tree contains a piece. Two players move this piece in turns, during a move a player moves the piece from its current nodes to one of its children; if the player can not make a move, the game ends immediately. The result of the game is the number placed in the leaf where a piece has completed its movement. The player who makes the first move tries to maximize the result of the game and the second player, on the contrary, tries to minimize the result. We can assume that both players move optimally well.\nDemiurges are omnipotent, so before the game they can arbitrarily rearrange the numbers placed in the leaves. Shambambukli wants to rearrange numbers so that the result of the game when both players play optimally well is as large as possible, and Mazukta wants the result to be as small as possible. What will be the outcome of the game, if the numbers are rearranged by Shambambukli, and what will it be if the numbers are rearranged by Mazukta? Of course, the Demiurges choose the best possible option of arranging numbers.\n-----Input-----\nThe first line contains a single integer n\u00a0\u2014 the number of nodes in the tree (1 \u2264 n \u2264 2\u00b710^5).\nEach of the next n - 1 lines contains two integers u_{i} and v_{i} (1 \u2264 u_{i}, v_{i} \u2264 n)\u00a0\u2014 the ends of the edge of the tree; the edge leads from node u_{i} to node v_{i}. It is guaranteed that the described graph is a rooted tree, and the root is the node 1.\n-----Output-----\nPrint two space-separated integers \u2014 the maximum possible and the minimum possible result of the game.\n-----Examples-----\nInput\n5\n1 2\n1 3\n2 4\n2 5\nOutput\n3 2\nInput\n6\n1 2\n1 3\n3 4\n1 5\n5 6\nOutput\n3 3\n-----Note-----\nConsider the first sample. The tree contains three leaves: 3, 4 and 5. If we put the maximum number 3 at node 3, then the first player moves there and the result will be 3. On the other hand, it is easy to see that for any rearrangement the first player can guarantee the result of at least 2.\nIn the second sample no matter what the arragment is the first player can go along the path that ends with a leaf with number 3.\n\ndef",
        "answer": "def max_min(n, u, v):\n    if n == 1:\n        return u, v\n    if n % 2 == 0:\n        return max_min(n // 2, u, v)\n    else:\n        return min_max(n // 2, u, v)",
        "difficulty": "interview"
    },
    {
        "task_id": 1998,
        "prompt": "Complete the Python function given the prompt below:Galya is playing one-dimensional Sea Battle on a 1 \u00d7 n grid. In this game a ships are placed on the grid. Each of the ships consists of b consecutive cells. No cell can be part of two ships, however, the ships can touch each other.\nGalya doesn't know the ships location. She can shoot to some cells and after each shot she is told if that cell was a part of some ship (this case is called \"hit\") or not (this case is called \"miss\").\nGalya has already made k shots, all of them were misses.\nYour task is to calculate the minimum number of cells such that if Galya shoot at all of them, she would hit at least one ship.\nIt is guaranteed that there is at least one valid ships placement.\n-----Input-----\nThe first line contains four positive integers n, a, b, k (1 \u2264 n \u2264 2\u00b710^5, 1 \u2264 a, b \u2264 n, 0 \u2264 k \u2264 n - 1)\u00a0\u2014 the length of the grid, the number of ships on the grid, the length of each ship and the number of shots Galya has already made.\nThe second line contains a string of length n, consisting of zeros and ones. If the i-th character is one, Galya has already made a shot to this cell. Otherwise, she hasn't. It is guaranteed that there are exactly k ones in this string. \n-----Output-----\nIn the first line print the minimum number of cells such that if Galya shoot at all of them, she would hit at least one ship.\nIn the second line print the cells Galya should shoot at.\nEach cell should be printed exactly once. You can print the cells in arbitrary order. The cells are numbered from 1 to n, starting from the left.\nIf there are multiple answers, you can print any of them.\n-----Examples-----\nInput\n5 1 2 1\n00100\nOutput\n2\n4 2\nInput\n13 3 2 3\n1000000010001\nOutput\n2\n7 11\n-----Note-----\nThere is one ship in the first sample. It can be either to the left or to the right from the shot Galya has already made (the \"1\" character). So, it is necessary to make two shots: one at the left part, and one at the right part.\n\ndef",
        "answer": "def solve(a, b, n, k, grid):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 1999,
        "prompt": "Complete the Python function given the prompt below:You are given an array of positive integers. While there are at least two equal elements, we will perform the following operation. We choose the smallest value $x$ that occurs in the array $2$ or more times. Take the first two occurrences of $x$ in this array (the two leftmost occurrences). Remove the left of these two occurrences, and the right one is replaced by the sum of this two values (that is, $2 \\cdot x$).\nDetermine how the array will look after described operations are performed.\nFor example, consider the given array looks like $[3, 4, 1, 2, 2, 1, 1]$. It will be changed in the following way: $[3, 4, 1, 2, 2, 1, 1]~\\rightarrow~[3, 4, 2, 2, 2, 1]~\\rightarrow~[3, 4, 4, 2, 1]~\\rightarrow~[3, 8, 2, 1]$.\nIf the given array is look like $[1, 1, 3, 1, 1]$ it will be changed in the following way: $[1, 1, 3, 1, 1]~\\rightarrow~[2, 3, 1, 1]~\\rightarrow~[2, 3, 2]~\\rightarrow~[3, 4]$.\n-----Input-----\nThe first line contains a single integer $n$ ($2 \\le n \\le 150\\,000$) \u2014 the number of elements in the array.\nThe second line contains a sequence from $n$ elements $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^{9}$) \u2014 the elements of the array.\n-----Output-----\nIn the first line print an integer $k$ \u2014 the number of elements in the array after all the performed operations. In the second line print $k$ integers \u2014 the elements of the array after all the performed operations.\n-----Examples-----\nInput\n7\n3 4 1 2 2 1 1\nOutput\n4\n3 8 2 1 \nInput\n5\n1 1 3 1 1\nOutput\n2\n3 4 \nInput\n5\n10 40 20 50 30\nOutput\n5\n10 40 20 50 30 \n-----Note-----\nThe first two examples were considered in the statement.\nIn the third example all integers in the given array are distinct, so it will not change.\n\ndef",
        "answer": "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    k = 0\n    for i in range(n):\n        if a.count(a[i]) >= 2:\n            k += 1\n            a[i] = 0\n    print(k)\n    print(*a)\nsolve()\n",
        "difficulty": "interview"
    }
]