[
    {
        "task_id": 4500,
        "prompt": "Complete the Python function given the prompt below:An elementary school student Takahashi has come to a variety store.\nHe has two coins, A-yen and B-yen coins (yen is the currency of Japan), and wants to buy a toy that costs C yen. Can he buy it?\nNote that he lives in Takahashi Kingdom, and may have coins that do not exist in Japan.\n-----Constraints-----\n - All input values are integers.\n - 1 \\leq A, B \\leq 500\n - 1 \\leq C \\leq 1000\n-----Input-----\nInput is given from Standard Input in the following format:\nA B C\n-----Output-----\nIf Takahashi can buy the toy, print Yes; if he cannot, print No.\n-----Sample Input-----\n50 100 120\n-----Sample Output-----\nYes\nHe has 50 + 100 = 150 yen, so he can buy the 120-yen toy.\n\ndef",
        "answer": "def buyToy(A, B, C):\n    if A + B > C:\n        print \"Yes\"\n    else:\n        print \"No\"",
        "difficulty": "introductory"
    },
    {
        "task_id": 4501,
        "prompt": "Complete the Python function given the prompt below:Tak has N cards. On the i-th (1 \\leq i \\leq N) card is written an integer x_i.\nHe is selecting one or more cards from these N cards, so that the average of the integers written on the selected cards is exactly A.\nIn how many ways can he make his selection?\n-----Constraints-----\n - 1 \\leq N \\leq 50\n - 1 \\leq A \\leq 50\n - 1 \\leq x_i \\leq 50\n - N,\\,A,\\,x_i are integers.\n-----Partial Score-----\n - 200 points will be awarded for passing the test set satisfying 1 \\leq N \\leq 16.\n-----Input-----\nThe input is given from Standard Input in the following format:\nN A\nx_1 x_2... x_N\n-----Output-----\nPrint the number of ways to select cards such that the average of the written integers is exactly A.\n-----Sample Input-----\n4 8\n7 9 8 9\n-----Sample Output-----\n5\n - The following are the 5 ways to select cards such that the average is 8:\n - Select the 3-rd card.\n - Select the 1-st and 2-nd cards.\n - Select the 1-st and 4-th cards.\n - Select the 1-st, 2-nd and 3-rd cards.\n - Select the 1-st, 3-rd and 4-th cards.\n\ndef",
        "answer": "def solve(N, A):\n    # Write your code here\n    pass",
        "difficulty": "introductory"
    },
    {
        "task_id": 4502,
        "prompt": "Complete the Python function given the prompt below:You are given an integer sequence of length n, a_1,..., a_n.\nLet us consider performing the following n operations on an empty sequence b.\nThe i-th operation is as follows:\n - Append a_i to the end of b.\n - Reverse the order of the elements in b.\nFind the sequence b obtained after these n operations.\n-----Constraints-----\n - 1 \\leq n \\leq 2\\times 10^5\n - 0 \\leq a_i \\leq 10^9\n - n and a_i are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nn\na_1 a_2... a_n\n-----Output-----\nPrint n integers in a line with spaces in between.\nThe i-th integer should be b_i.\n-----Sample Input-----\n4\n1 2 3 4\n-----Sample Output-----\n4 2 1 3\n - After step 1 of the first operation, b becomes: 1.\n - After step 2 of the first operation, b becomes: 1.\n - After step 1 of the second operation, b becomes: 1, 2.\n - After step 2 of the second operation, b becomes: 2, 1.\n - After step 1 of the third operation, b becomes: 2, 1, 3.\n - After step 2 of the third operation, b becomes: 3, 1, 2.\n - After step 1 of the fourth operation, b becomes: 3, 1, 2, 4.\n - After step 2 of the fourth operation, b becomes: 4, 2, 1, 3.\nThus, the answer is 4 2 1 3.\n\ndef",
        "answer": "def solution(n, a):\n    b = []\n    for i in range(n):\n        b.append(a[i])\n    b.reverse()\n    for i in range(n):\n        print(b[i], end=\" \")",
        "difficulty": "introductory"
    },
    {
        "task_id": 4503,
        "prompt": "Complete the Python function given the prompt below:Raccoon is fighting with a monster.\nThe health of the monster is H.\nRaccoon can use N kinds of special moves. Using the i-th move decreases the monster's health by A_i.\nThere is no other way to decrease the monster's health.\nRaccoon wins when the monster's health becomes 0 or below.\nIf Raccoon can win without using the same move twice or more, print Yes; otherwise, print No.\n-----Constraints-----\n - 1 \\leq H \\leq 10^9\n - 1 \\leq N \\leq 10^5\n - 1 \\leq A_i \\leq 10^4\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nH N\nA_1 A_2... A_N\n-----Output-----\nIf Raccoon can win without using the same move twice or more, print Yes; otherwise, print No.\n-----Sample Input-----\n10 3\n4 5 6\n-----Sample Output-----\nYes\nThe monster's health will become 0 or below after, for example, using the second and third moves.\n\ndef",
        "answer": "def win(health, moves):\n    health = health - moves[0]\n    for i in moves[1:]:\n        health -= i\n    return health <= 0",
        "difficulty": "introductory"
    },
    {
        "task_id": 4504,
        "prompt": "Complete the Python function given the prompt below:We will call a string that can be obtained by concatenating two equal strings an even string.\nFor example, xyzxyz and aaaaaa are even, while ababab and xyzxy are not.\nYou are given an even string S consisting of lowercase English letters.\nFind the length of the longest even string that can be obtained by deleting one or more characters from the end of S.\nIt is guaranteed that such a non-empty string exists for a given input.\n-----Constraints-----\n - 2 \\leq |S| \\leq 200\n - S is an even string consisting of lowercase English letters.\n - There exists a non-empty even string that can be obtained by deleting one or more characters from the end of S.\n-----Input-----\nInput is given from Standard Input in the following format:\nS\n-----Output-----\nPrint the length of the longest even string that can be obtained.\n-----Sample Input-----\nabaababaab\n-----Sample Output-----\n6\n - abaababaab itself is even, but we need to delete at least one character.\n - abaababaa is not even.\n - abaababa is not even.\n - abaabab is not even.\n - abaaba is even. Thus, we should print its length, 6.\n\ndef",
        "answer": "def longest_even_string(s):\n    # your code here\n    return len(s)",
        "difficulty": "introductory"
    },
    {
        "task_id": 4505,
        "prompt": "Complete the Python function given the prompt below:You are given a string S of length 3 consisting of a, b and c. Determine if S can be obtained by permuting abc.\n-----Constraints-----\n - |S|=3\n - S consists of a, b and c.\n-----Input-----\nInput is given from Standard Input in the following format:\nS\n-----Output-----\nIf S can be obtained by permuting abc, print Yes; otherwise, print No.\n-----Sample Input-----\nbac\n-----Sample Output-----\nYes\nSwapping the first and second characters in bac results in abc.\n\ndef",
        "answer": "def permutation(s):\n    return s[0] + s[2] + s[1]",
        "difficulty": "introductory"
    },
    {
        "task_id": 4506,
        "prompt": "Complete the Python function given the prompt below:You are given two arrays $a$ and $b$, both of length $n$.\nLet's define a function $f(l, r) = \\sum\\limits_{l \\le i \\le r} a_i \\cdot b_i$.\nYour task is to reorder the elements (choose an arbitrary order of elements) of the array $b$ to minimize the value of $\\sum\\limits_{1 \\le l \\le r \\le n} f(l, r)$. Since the answer can be very large, you have to print it modulo $998244353$. Note that you should minimize the answer but not its remainder.\n-----Input-----\nThe first line of the input contains one integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) \u2014 the number of elements in $a$ and $b$.\nThe second line of the input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^6$), where $a_i$ is the $i$-th element of $a$.\nThe third line of the input contains $n$ integers $b_1, b_2, \\dots, b_n$ ($1 \\le b_j \\le 10^6$), where $b_j$ is the $j$-th element of $b$.\n-----Output-----\nPrint one integer \u2014 the minimum possible value of $\\sum\\limits_{1 \\le l \\le r \\le n} f(l, r)$ after rearranging elements of $b$, taken modulo $998244353$. Note that you should minimize the answer but not its remainder.\n-----Examples-----\nInput\n5\n1 8 7 2 4\n9 7 2 9 3\nOutput\n646\nInput\n1\n1000000\n1000000\nOutput\n757402647\nInput\n2\n1 3\n4 2\nOutput\n20\n\ndef",
        "answer": "def f(l, r):\n    return sum(a[l:r+1]*b[l:r+1])",
        "difficulty": "introductory"
    },
    {
        "task_id": 4507,
        "prompt": "Complete the Python function given the prompt below:There are $n$ shovels in the nearby shop. The $i$-th shovel costs $a_i$ bourles.\nMisha has to buy exactly $k$ shovels. Each shovel can be bought no more than once.\nMisha can buy shovels by several purchases. During one purchase he can choose any subset of remaining (non-bought) shovels and buy this subset.\nThere are also $m$ special offers in the shop. The $j$-th of them is given as a pair $(x_j, y_j)$, and it means that if Misha buys exactly $x_j$ shovels during one purchase then $y_j$ most cheapest of them are for free (i.e. he will not pay for $y_j$ most cheapest shovels during the current purchase).\nMisha can use any offer any (possibly, zero) number of times, but he cannot use more than one offer during one purchase (but he can buy shovels without using any offers).\nYour task is to calculate the minimum cost of buying $k$ shovels, if Misha buys them optimally.\n-----Input-----\nThe first line of the input contains three integers $n, m$ and $k$ ($1 \\le n, m \\le 2 \\cdot 10^5, 1 \\le k \\le min(n, 2000)$) \u2014 the number of shovels in the shop, the number of special offers and the number of shovels Misha has to buy, correspondingly.\nThe second line of the input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 2 \\cdot 10^5$), where $a_i$ is the cost of the $i$-th shovel.\nThe next $m$ lines contain special offers. The $j$-th of them is given as a pair of integers $(x_i, y_i)$ ($1 \\le y_i \\le x_i \\le n$) and means that if Misha buys exactly $x_i$ shovels during some purchase, then he can take $y_i$ most cheapest of them for free.\n-----Output-----\nPrint one integer \u2014 the minimum cost of buying $k$ shovels if Misha buys them optimally.\n-----Examples-----\nInput\n7 4 5\n2 5 4 2 6 3 1\n2 1\n6 5\n2 1\n3 1\nOutput\n7\nInput\n9 4 8\n6 8 5 1 8 1 1 2 1\n9 2\n8 4\n5 3\n9 7\nOutput\n17\nInput\n5 1 4\n2 5 7 4 6\n5 4\nOutput\n17\n-----Note-----\nIn the first example Misha can buy shovels on positions $1$ and $4$ (both with costs $2$) during the first purchase and get one of them for free using the first or the third special offer. And then he can buy shovels on positions $3$ and $6$ (with costs $4$ and $3$) during the second purchase and get the second one for free using the first or the third special offer. Then he can buy the shovel on a position $7$ with cost $1$. So the total cost is $4 + 2 + 1 = 7$.\nIn the second example Misha can buy shovels on positions $1$, $2$, $3$, $4$ and $8$ (costs are $6$, $8$, $5$, $1$ and $2$) and get three cheapest (with costs $5$, $1$ and $2$) for free. And then he can buy shovels on positions $6$, $7$ and $9$ (all with costs $1$) without using any special offers. So the total cost is $6 + 8 + 1 + 1 + 1 = 17$.\nIn the third example Misha can buy four cheapest shovels without using any special offers and get the total cost $17$.\n\ndef",
        "answer": "def shovels(n, k, a):\n    a.sort()\n    cost = 0\n    for i in range(k):\n        cost += a[i]\n    return cost",
        "difficulty": "introductory"
    },
    {
        "task_id": 4508,
        "prompt": "Complete the Python function given the prompt below:You are given an undirected tree consisting of $n$ vertices. An undirected tree is a connected undirected graph with $n - 1$ edges.\nYour task is to add the minimum number of edges in such a way that the length of the shortest path from the vertex $1$ to any other vertex is at most $2$. Note that you are not allowed to add loops and multiple edges.\n-----Input-----\nThe first line contains one integer $n$ ($2 \\le n \\le 2 \\cdot 10^5$) \u2014 the number of vertices in the tree.\nThe following $n - 1$ lines contain edges: edge $i$ is given as a pair of vertices $u_i, v_i$ ($1 \\le u_i, v_i \\le n$). It is guaranteed that the given edges form a tree. It is guaranteed that there are no loops and multiple edges in the given edges.\n-----Output-----\nPrint a single integer \u2014 the minimum number of edges you have to add in order to make the shortest distance from the vertex $1$ to any other vertex at most $2$. Note that you are not allowed to add loops and multiple edges.\n-----Examples-----\nInput\n7\n1 2\n2 3\n2 4\n4 5\n4 6\n5 7\nOutput\n2\nInput\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n1 7\nOutput\n0\nInput\n7\n1 2\n2 3\n3 4\n3 5\n3 6\n3 7\nOutput\n1\n-----Note-----\nThe tree corresponding to the first example: [Image] The answer is $2$, some of the possible answers are the following: $[(1, 5), (1, 6)]$, $[(1, 4), (1, 7)]$, $[(1, 6), (1, 7)]$.\nThe tree corresponding to the second example: [Image] The answer is $0$.\nThe tree corresponding to the third example: [Image] The answer is $1$, only one possible way to reach it is to add the edge $(1, 3)$.\n\ndef",
        "answer": "def solution(n, edges):\n    # write your code in Python 2.7\n    pass\n\"\"\"",
        "difficulty": "introductory"
    },
    {
        "task_id": 4509,
        "prompt": "Complete the Python function given the prompt below:You are given two positive integers $n$ and $k$. Print the $k$-th positive integer that is not divisible by $n$.\nFor example, if $n=3$, and $k=7$, then all numbers that are not divisible by $3$ are: $1, 2, 4, 5, 7, 8, 10, 11, 13 \\dots$. The $7$-th number among them is $10$.\n-----Input-----\nThe first line contains an integer $t$ ($1 \\le t \\le 1000$) \u2014 the number of test cases in the input. Next, $t$ test cases are given, one per line.\nEach test case is two positive integers $n$ ($2 \\le n \\le 10^9$) and $k$ ($1 \\le k \\le 10^9$).\n-----Output-----\nFor each test case print the $k$-th positive integer that is not divisible by $n$.\n-----Example-----\nInput\n6\n3 7\n4 12\n2 1000000000\n7 97\n1000000000 1000000000\n2 1\nOutput\n10\n15\n1999999999\n113\n1000000001\n1\n\ndef",
        "answer": "def solve(n, k):\n    for i in range(1, n + 1):\n        if i % n!= k:\n            print(i)",
        "difficulty": "introductory"
    },
    {
        "task_id": 4510,
        "prompt": "Complete the Python function given the prompt below:The only difference between easy and hard versions are constraints on $n$ and $k$.\nYou are messaging in one of the popular social networks via your smartphone. Your smartphone can show at most $k$ most recent conversations with your friends. Initially, the screen is empty (i.e. the number of displayed conversations equals $0$).\nEach conversation is between you and some of your friends. There is at most one conversation with any of your friends. So each conversation is uniquely defined by your friend.\nYou (suddenly!) have the ability to see the future. You know that during the day you will receive $n$ messages, the $i$-th message will be received from the friend with ID $id_i$ ($1 \\le id_i \\le 10^9$).\nIf you receive a message from $id_i$ in the conversation which is currently displayed on the smartphone then nothing happens: the conversations of the screen do not change and do not change their order, you read the message and continue waiting for new messages.\nOtherwise (i.e. if there is no conversation with $id_i$ on the screen):\n  Firstly, if the number of conversations displayed on the screen is $k$, the last conversation (which has the position $k$) is removed from the screen.  Now the number of conversations on the screen is guaranteed to be less than $k$ and the conversation with the friend $id_i$ is not displayed on the screen.  The conversation with the friend $id_i$ appears on the first (the topmost) position on the screen and all the other displayed conversations are shifted one position down. \nYour task is to find the list of conversations (in the order they are displayed on the screen) after processing all $n$ messages.\n-----Input-----\nThe first line of the input contains two integers $n$ and $k$ ($1 \\le n, k \\le 2 \\cdot 10^5)$ \u2014 the number of messages and the number of conversations your smartphone can show.\nThe second line of the input contains $n$ integers $id_1, id_2, \\dots, id_n$ ($1 \\le id_i \\le 10^9$), where $id_i$ is the ID of the friend which sends you the $i$-th message.\n-----Output-----\nIn the first line of the output print one integer $m$ ($1 \\le m \\le min(n, k)$) \u2014 the number of conversations shown after receiving all $n$ messages.\nIn the second line print $m$ integers $ids_1, ids_2, \\dots, ids_m$, where $ids_i$ should be equal to the ID of the friend corresponding to the conversation displayed on the position $i$ after receiving all $n$ messages.\n-----Examples-----\nInput\n7 2\n1 2 3 2 1 3 2\nOutput\n2\n2 1 \nInput\n10 4\n2 3 3 1 1 2 1 2 3 3\nOutput\n3\n1 3 2 \n-----Note-----\nIn the first example the list of conversations will change in the following way (in order from the first to last message):\n  $[]$;  $[1]$;  $[2, 1]$;  $[3, 2]$;  $[3, 2]$;  $[1, 3]$;  $[1, 3]$;  $[2, 1]$. \nIn the second example the list of conversations will change in the following way:\n  $[]$;  $[2]$;  $[3, 2]$;  $[3, 2]$;  $[1, 3, 2]$;  and then the list will not change till the end.\n\ndef",
        "answer": "def solution(n, k, ids):\n    conversations = []\n    for i in ids:\n        if len(conversations) < k:\n            conversations.append(i)\n        else:\n            conversations.pop(0)\n            conversations.append(i)\n    return len(conversations)",
        "difficulty": "introductory"
    },
    {
        "task_id": 4511,
        "prompt": "Complete the Python function given the prompt below:You are playing a computer card game called Splay the Sire. Currently you are struggling to defeat the final boss of the game.\nThe boss battle consists of $n$ turns. During each turn, you will get several cards. Each card has two parameters: its cost $c_i$ and damage $d_i$. You may play some of your cards during each turn in some sequence (you choose the cards and the exact order they are played), as long as the total cost of the cards you play during the turn does not exceed $3$. After playing some (possibly zero) cards, you end your turn, and all cards you didn't play are discarded. Note that you can use each card at most once.\nYour character has also found an artifact that boosts the damage of some of your actions: every $10$-th card you play deals double damage.\nWhat is the maximum possible damage you can deal during $n$ turns?\n-----Input-----\nThe first line contains one integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) \u2014 the number of turns.\nThen $n$ blocks of input follow, the $i$-th block representing the cards you get during the $i$-th turn.\nEach block begins with a line containing one integer $k_i$ ($1 \\le k_i \\le 2 \\cdot 10^5$) \u2014 the number of cards you get during $i$-th turn. Then $k_i$ lines follow, each containing two integers $c_j$ and $d_j$ ($1 \\le c_j \\le 3$, $1 \\le d_j \\le 10^9$) \u2014 the parameters of the corresponding card.\nIt is guaranteed that $\\sum \\limits_{i = 1}^{n} k_i \\le 2 \\cdot 10^5$.\n-----Output-----\nPrint one integer \u2014 the maximum damage you may deal.\n-----Example-----\nInput\n5\n3\n1 6\n1 7\n1 5\n2\n1 4\n1 3\n3\n1 10\n3 5\n2 3\n3\n1 15\n2 4\n1 10\n1\n1 100\nOutput\n263\n-----Note-----\nIn the example test the best course of action is as follows:\nDuring the first turn, play all three cards in any order and deal $18$ damage.\nDuring the second turn, play both cards and deal $7$ damage.\nDuring the third turn, play the first and the third card and deal $13$ damage.\nDuring the fourth turn, play the first and the third card and deal $25$ damage.\nDuring the fifth turn, play the only card, which will deal double damage ($200$).\n\ndef",
        "answer": "def splay(n, k):\n    if n == 1:\n        return k\n    else:\n        return splay(n - 1, k * 2)",
        "difficulty": "introductory"
    },
    {
        "task_id": 4512,
        "prompt": "Complete the Python function given the prompt below:You are given a string $s$ consisting of lowercase Latin letters and $q$ queries for this string.\nRecall that the substring $s[l; r]$ of the string $s$ is the string $s_l s_{l + 1} \\dots s_r$. For example, the substrings of \"codeforces\" are \"code\", \"force\", \"f\", \"for\", but not \"coder\" and \"top\".\nThere are two types of queries:   $1~ pos~ c$ ($1 \\le pos \\le |s|$, $c$ is lowercase Latin letter): replace $s_{pos}$ with $c$ (set $s_{pos} := c$);  $2~ l~ r$ ($1 \\le l \\le r \\le |s|$): calculate the number of distinct characters in the substring $s[l; r]$. \n-----Input-----\nThe first line of the input contains one string $s$ consisting of no more than $10^5$ lowercase Latin letters.\nThe second line of the input contains one integer $q$ ($1 \\le q \\le 10^5$) \u2014 the number of queries.\nThe next $q$ lines contain queries, one per line. Each query is given in the format described in the problem statement. It is guaranteed that there is at least one query of the second type.\n-----Output-----\nFor each query of the second type print the answer for it \u2014 the number of distinct characters in the required substring in this query.\n-----Examples-----\nInput\nabacaba\n5\n2 1 4\n1 4 b\n1 5 b\n2 4 6\n2 1 7\nOutput\n3\n1\n2\nInput\ndfcbbcfeeedbaea\n15\n1 6 e\n1 4 b\n2 6 14\n1 7 b\n1 12 c\n2 6 8\n2 1 6\n1 7 c\n1 2 f\n1 10 a\n2 7 9\n1 10 a\n1 14 b\n1 1 f\n2 1 11\nOutput\n5\n2\n5\n2\n6\n\ndef",
        "answer": "def solve(s, q):\n    # Write your code here\n    pass",
        "difficulty": "introductory"
    },
    {
        "task_id": 4513,
        "prompt": "Complete the Python function given the prompt below:You are given a correct solution of the sudoku puzzle. If you don't know what is the sudoku, you can read about it here.\nThe picture showing the correct sudoku solution:\n[Image]\nBlocks are bordered with bold black color.\nYour task is to change at most $9$ elements of this field (i.e. choose some $1 \\le i, j \\le 9$ and change the number at the position $(i, j)$ to any other number in range $[1; 9]$) to make it anti-sudoku. The anti-sudoku is the $9 \\times 9$ field, in which:  Any number in this field is in range $[1; 9]$;  each row contains at least two equal elements;  each column contains at least two equal elements;  each $3 \\times 3$ block (you can read what is the block in the link above) contains at least two equal elements. \nIt is guaranteed that the answer exists.\nYou have to answer $t$ independent test cases.\n-----Input-----\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 10^4$) \u2014 the number of test cases. Then $t$ test cases follow.\nEach test case consists of $9$ lines, each line consists of $9$ characters from $1$ to $9$ without any whitespaces \u2014 the correct solution of the sudoku puzzle.\n-----Output-----\nFor each test case, print the answer \u2014 the initial field with at most $9$ changed elements so that the obtained field is anti-sudoku. If there are several solutions, you can print any. It is guaranteed that the answer exists.\n-----Example-----\nInput\n1\n154873296\n386592714\n729641835\n863725149\n975314628\n412968357\n631457982\n598236471\n247189563\nOutput\n154873396\n336592714\n729645835\n863725145\n979314628\n412958357\n631457992\n998236471\n247789563\n\ndef",
        "answer": "def anti_sudoku(sudoku):\n    for i in range(9):\n        for j in range(9):\n            if sudoku[i][j] == 0:\n                for k in range(1, 10):\n                    if is_valid(sudoku, i, j, k):\n                        sudoku[i][j] = k\n                        if is_valid(sudoku, i, j, k):\n                            if is_valid(sudoku, i, j, k):\n                                if is_valid(sudoku, i, j, k):\n                                    if is_valid(sudoku, i, j, k):\n                                        if is_valid(sudoku, i, j, k):\n                                            if is_valid(sudoku, i, j, k):\n                                                if is_valid(sudoku, i, j, k):\n                                                    if is_valid(sudoku, i, j, k):\n                                                        if is_valid(sudoku, i, j, k):\n                                                            if is_valid(sudoku, i, j, k):\n                                                                if is_valid(sudoku, i, j, k):\n                                                                    if is_valid(sudoku, i, j, k):\n                                                                        if is_valid(sudoku, i, j, k):\n                                                                            if is_valid(sudoku, i, j, k):\n                                                                                if is_valid(sudoku, i, j, k):\n                                                                                    if is_valid(sudoku, i, j, k):\n                                                                                        if is_valid(sudoku, i, j, k):\n                                                                                            if is_valid(sudoku, i, j, k):\n                                                                                                if is_valid(sudoku, i, j, k):\n                                                                                                    if is_valid(sudoku, i, j, k):\n                                                                                                        if is_valid",
        "difficulty": "introductory"
    },
    {
        "task_id": 4514,
        "prompt": "Complete the Python function given the prompt below:In this problem you will have to help Berland army with organizing their command delivery system.\nThere are $n$ officers in Berland army. The first officer is the commander of the army, and he does not have any superiors. Every other officer has exactly one direct superior. If officer $a$ is the direct superior of officer $b$, then we also can say that officer $b$ is a direct subordinate of officer $a$.\nOfficer $x$ is considered to be a subordinate (direct or indirect) of officer $y$ if one of the following conditions holds:  officer $y$ is the direct superior of officer $x$;  the direct superior of officer $x$ is a subordinate of officer $y$. \nFor example, on the picture below the subordinates of the officer $3$ are: $5, 6, 7, 8, 9$.\nThe structure of Berland army is organized in such a way that every officer, except for the commander, is a subordinate of the commander of the army.\nFormally, let's represent Berland army as a tree consisting of $n$ vertices, in which vertex $u$ corresponds to officer $u$. The parent of vertex $u$ corresponds to the direct superior of officer $u$. The root (which has index $1$) corresponds to the commander of the army.\nBerland War Ministry has ordered you to give answers on $q$ queries, the $i$-th query is given as $(u_i, k_i)$, where $u_i$ is some officer, and $k_i$ is a positive integer.\nTo process the $i$-th query imagine how a command from $u_i$ spreads to the subordinates of $u_i$. Typical DFS (depth first search) algorithm is used here.\nSuppose the current officer is $a$ and he spreads a command. Officer $a$ chooses $b$ \u2014 one of his direct subordinates (i.e. a child in the tree) who has not received this command yet. If there are many such direct subordinates, then $a$ chooses the one having minimal index. Officer $a$ gives a command to officer $b$. Afterwards, $b$ uses exactly the same algorithm to spread the command to its subtree. After $b$ finishes spreading the command, officer $a$ chooses the next direct subordinate again (using the same strategy). When officer $a$ cannot choose any direct subordinate who still hasn't received this command, officer $a$ finishes spreading the command.\nLet's look at the following example: [Image] \nIf officer $1$ spreads a command, officers receive it in the following order: $[1, 2, 3, 5,6, 8, 7, 9, 4]$.\nIf officer $3$ spreads a command, officers receive it in the following order: $[3, 5, 6, 8, 7, 9]$.\nIf officer $7$ spreads a command, officers receive it in the following order: $[7, 9]$.\nIf officer $9$ spreads a command, officers receive it in the following order: $[9]$.\nTo answer the $i$-th query $(u_i, k_i)$, construct a sequence which describes the order in which officers will receive the command if the $u_i$-th officer spreads it. Return the $k_i$-th element of the constructed list or -1 if there are fewer than $k_i$ elements in it.\nYou should process queries independently. A query doesn't affect the following queries.\n-----Input-----\nThe first line of the input contains two integers $n$ and $q$ ($2 \\le n \\le 2 \\cdot 10^5, 1 \\le q \\le 2 \\cdot 10^5$) \u2014 the number of officers in Berland army and the number of queries.\nThe second line of the input contains $n - 1$ integers $p_2, p_3, \\dots, p_n$ ($1 \\le p_i < i$), where $p_i$ is the index of the direct superior of the officer having the index $i$. The commander has index $1$ and doesn't have any superiors.\nThe next $q$ lines describe the queries. The $i$-th query is given as a pair ($u_i, k_i$) ($1 \\le u_i, k_i \\le n$), where $u_i$ is the index of the officer which starts spreading a command, and $k_i$ is the index of the required officer in the command spreading sequence.\n-----Output-----\nPrint $q$ numbers, where the $i$-th number is the officer at the position $k_i$ in the list which describes the order in which officers will receive the command if it starts spreading from officer $u_i$. Print \"-1\" if the number of officers which receive the command is less than $k_i$.\nYou should process queries independently. They do not affect each other.\n-----Example-----\nInput\n9 6\n1 1 1 3 5 3 5 7\n3 1\n1 5\n3 4\n7 3\n1 8\n1 9\nOutput\n3\n6\n8\n-1\n9\n4\n\ndef",
        "answer": "def dfs(u, k, visited, seq):\n    visited[u] = True\n    for v in adj[u]:\n        if not visited[v]:\n            if k == 1:\n                seq.append(v)\n            else:\n                dfs(v, k - 1, visited, seq)\n    return seq",
        "difficulty": "introductory"
    },
    {
        "task_id": 4515,
        "prompt": "Complete the Python function given the prompt below:Polycarp has three sisters: Alice, Barbara, and Cerene. They're collecting coins. Currently, Alice has $a$ coins, Barbara has $b$ coins and Cerene has $c$ coins. Recently Polycarp has returned from the trip around the world and brought $n$ coins.\nHe wants to distribute all these $n$ coins between his sisters in such a way that the number of coins Alice has is equal to the number of coins Barbara has and is equal to the number of coins Cerene has. In other words, if Polycarp gives $A$ coins to Alice, $B$ coins to Barbara and $C$ coins to Cerene ($A+B+C=n$), then $a + A = b + B = c + C$.\nNote that A, B or C (the number of coins Polycarp gives to Alice, Barbara and Cerene correspondingly) can be 0.\nYour task is to find out if it is possible to distribute all $n$ coins between sisters in a way described above.\nYou have to answer $t$ independent test cases.\n-----Input-----\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 10^4$) \u2014 the number of test cases.\nThe next $t$ lines describe test cases. Each test case is given on a new line and consists of four space-separated integers $a, b, c$ and $n$ ($1 \\le a, b, c, n \\le 10^8$) \u2014 the number of coins Alice has, the number of coins Barbara has, the number of coins Cerene has and the number of coins Polycarp has.\n-----Output-----\nFor each test case, print \"YES\" if Polycarp can distribute all $n$ coins between his sisters and \"NO\" otherwise.\n-----Example-----\nInput\n5\n5 3 2 8\n100 101 102 105\n3 2 1 100000000\n10 20 15 14\n101 101 101 3\nOutput\nYES\nYES\nNO\nNO\nYES\n\ndef",
        "answer": "def solve():\n    t = int(input())\n    for _ in range(t):\n        a, b, c, n = map(int, input().split())\n        if a + b + c == n:\n            print(\"YES\")\n        elif a + b == n:\n            print(\"YES\")\n        elif a == n:\n            print(\"YES\")\n        elif b == n:\n            print(\"YES\")\n        elif c == n:\n            print(\"YES\")\n        else:\n            print(\"NO\")",
        "difficulty": "introductory"
    },
    {
        "task_id": 4516,
        "prompt": "Complete the Python function given the prompt below:Let's define $p_i(n)$ as the following permutation: $[i, 1, 2, \\dots, i - 1, i + 1, \\dots, n]$. This means that the $i$-th permutation is almost identity (i.e. which maps every element to itself) permutation but the element $i$ is on the first position. Examples:  $p_1(4) = [1, 2, 3, 4]$;  $p_2(4) = [2, 1, 3, 4]$;  $p_3(4) = [3, 1, 2, 4]$;  $p_4(4) = [4, 1, 2, 3]$. \nYou are given an array $x_1, x_2, \\dots, x_m$ ($1 \\le x_i \\le n$).\nLet $pos(p, val)$ be the position of the element $val$ in $p$. So, $pos(p_1(4), 3) = 3, pos(p_2(4), 2) = 1, pos(p_4(4), 4) = 1$.\nLet's define a function $f(p) = \\sum\\limits_{i=1}^{m - 1} |pos(p, x_i) - pos(p, x_{i + 1})|$, where $|val|$ is the absolute value of $val$. This function means the sum of distances between adjacent elements of $x$ in $p$.\nYour task is to calculate $f(p_1(n)), f(p_2(n)), \\dots, f(p_n(n))$.\n-----Input-----\nThe first line of the input contains two integers $n$ and $m$ ($2 \\le n, m \\le 2 \\cdot 10^5$) \u2014 the number of elements in each permutation and the number of elements in $x$.\nThe second line of the input contains $m$ integers ($m$, not $n$) $x_1, x_2, \\dots, x_m$ ($1 \\le x_i \\le n$), where $x_i$ is the $i$-th element of $x$. Elements of $x$ can repeat and appear in arbitrary order.\n-----Output-----\nPrint $n$ integers: $f(p_1(n)), f(p_2(n)), \\dots, f(p_n(n))$.\n-----Examples-----\nInput\n4 4\n1 2 3 4\nOutput\n3 4 6 5 \nInput\n5 5\n2 1 5 3 5\nOutput\n9 8 12 6 8 \nInput\n2 10\n1 2 1 1 2 2 2 2 2 2\nOutput\n3 3 \n-----Note-----\nConsider the first example:\n$x = [1, 2, 3, 4]$, so  for the permutation $p_1(4) = [1, 2, 3, 4]$ the answer is $|1 - 2| + |2 - 3| + |3 - 4| = 3$;  for the permutation $p_2(4) = [2, 1, 3, 4]$ the answer is $|2 - 1| + |1 - 3| + |3 - 4| = 4$;  for the permutation $p_3(4) = [3, 1, 2, 4]$ the answer is $|2 - 3| + |3 - 1| + |1 - 4| = 6$;  for the permutation $p_4(4) = [4, 1, 2, 3]$ the answer is $|2 - 3| + |3 - 4| + |4 - 1| = 5$. \nConsider the second example:\n$x = [2, 1, 5, 3, 5]$, so  for the permutation $p_1(5) = [1, 2, 3, 4, 5]$ the answer is $|2 - 1| + |1 - 5| + |5 - 3| + |3 - 5| = 9$;  for the permutation $p_2(5) = [2, 1, 3, 4, 5]$ the answer is $|1 - 2| + |2 - 5| + |5 - 3| + |3 - 5| = 8$;  for the permutation $p_3(5) = [3, 1, 2, 4, 5]$ the answer is $|3 - 2| + |2 - 5| + |5 - 1| + |1 - 5| = 12$;  for the permutation $p_4(5) = [4, 1, 2, 3, 5]$ the answer is $|3 - 2| + |2 - 5| + |5 - 4| + |4 - 5| = 6$;  for the permutation $p_5(5) = [5, 1, 2, 3, 4]$ the answer is $|3 - 2| + |2 - 1| + |1 - 4| + |4 - 1| = 8$.\n\ndef",
        "answer": "def f(p, x):\n    return sum(abs(pos(p, x[i]) - pos(p, x[i + 1])) for i in range(len(x) - 1))",
        "difficulty": "introductory"
    },
    {
        "task_id": 4517,
        "prompt": "Complete the Python function given the prompt below:You are given a rooted tree consisting of $n$ vertices numbered from $1$ to $n$. The root of the tree is a vertex number $1$.\nA tree is a connected undirected graph with $n-1$ edges.\nYou are given $m$ queries. The $i$-th query consists of the set of $k_i$ distinct vertices $v_i[1], v_i[2], \\dots, v_i[k_i]$. Your task is to say if there is a path from the root to some vertex $u$ such that each of the given $k$ vertices is either belongs to this path or has the distance $1$ to some vertex of this path.\n-----Input-----\nThe first line of the input contains two integers $n$ and $m$ ($2 \\le n \\le 2 \\cdot 10^5$, $1 \\le m \\le 2 \\cdot 10^5$) \u2014 the number of vertices in the tree and the number of queries.\nEach of the next $n-1$ lines describes an edge of the tree. Edge $i$ is denoted by two integers $u_i$ and $v_i$, the labels of vertices it connects $(1 \\le u_i, v_i \\le n, u_i \\ne v_i$).\nIt is guaranteed that the given edges form a tree.\nThe next $m$ lines describe queries. The $i$-th line describes the $i$-th query and starts with the integer $k_i$ ($1 \\le k_i \\le n$) \u2014 the number of vertices in the current query. Then $k_i$ integers follow: $v_i[1], v_i[2], \\dots, v_i[k_i]$ ($1 \\le v_i[j] \\le n$), where $v_i[j]$ is the $j$-th vertex of the $i$-th query.\nIt is guaranteed that all vertices in a single query are distinct.\nIt is guaranteed that the sum of $k_i$ does not exceed $2 \\cdot 10^5$ ($\\sum\\limits_{i=1}^{m} k_i \\le 2 \\cdot 10^5$).\n-----Output-----\nFor each query, print the answer \u2014 \"YES\", if there is a path from the root to some vertex $u$ such that each of the given $k$ vertices is either belongs to this path or has the distance $1$ to some vertex of this path and \"NO\" otherwise.\n-----Example-----\nInput\n10 6\n1 2\n1 3\n1 4\n2 5\n2 6\n3 7\n7 8\n7 9\n9 10\n4 3 8 9 10\n3 2 4 6\n3 2 1 5\n3 4 8 2\n2 6 10\n3 5 4 7\nOutput\nYES\nYES\nYES\nYES\nNO\nNO\n-----Note-----\nThe picture corresponding to the example:\n[Image]\nConsider the queries.\nThe first query is $[3, 8, 9, 10]$. The answer is \"YES\" as you can choose the path from the root $1$ to the vertex $u=10$. Then vertices $[3, 9, 10]$ belong to the path from $1$ to $10$ and the vertex $8$ has distance $1$ to the vertex $7$ which also belongs to this path.\nThe second query is $[2, 4, 6]$. The answer is \"YES\" as you can choose the path to the vertex $u=2$. Then the vertex $4$ has distance $1$ to the vertex $1$ which belongs to this path and the vertex $6$ has distance $1$ to the vertex $2$ which belongs to this path.\nThe third query is $[2, 1, 5]$. The answer is \"YES\" as you can choose the path to the vertex $u=5$ and all vertices of the query belong to this path.\nThe fourth query is $[4, 8, 2]$. The answer is \"YES\" as you can choose the path to the vertex $u=9$ so vertices $2$ and $4$ both have distance $1$ to the vertex $1$ which belongs to this path and the vertex $8$ has distance $1$ to the vertex $7$ which belongs to this path.\nThe fifth and the sixth queries both have answer \"NO\" because you cannot choose suitable vertex $u$.\n\ndef",
        "answer": "def answer(n, m, edges):\n    tree = [[] for _ in range(n)]\n    for u, v in edges:\n        tree[u-1].append(v-1)\n        tree[v-1].append(u-1)\n    visited = [False] * n\n    def dfs(u):\n        visited[u] = True\n        for v in tree[u]:\n            if not visited[v]:\n                dfs(v)\n    dfs(0)\n    for k in range(m):\n        visited = [False] * n\n        u, k = map(int, input().split())\n        u -= 1\n        visited[u] = True\n        for v in tree[u]:\n            if visited[v] and k in tree[v]:\n                print('YES')\n                return\n        print('NO')",
        "difficulty": "introductory"
    },
    {
        "task_id": 4518,
        "prompt": "Complete the Python function given the prompt below:There are $n$ districts in the town, the $i$-th district belongs to the $a_i$-th bandit gang. Initially, no districts are connected to each other.\nYou are the mayor of the city and want to build $n-1$ two-way roads to connect all districts (two districts can be connected directly or through other connected districts).\nIf two districts belonging to the same gang are connected directly with a road, this gang will revolt.\nYou don't want this so your task is to build $n-1$ two-way roads in such a way that all districts are reachable from each other (possibly, using intermediate districts) and each pair of directly connected districts belong to different gangs, or determine that it is impossible to build $n-1$ roads to satisfy all the conditions.\nYou have to answer $t$ independent test cases.\n-----Input-----\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 500$) \u2014 the number of test cases. Then $t$ test cases follow.\nThe first line of the test case contains one integer $n$ ($2 \\le n \\le 5000$) \u2014 the number of districts. The second line of the test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 10^9$), where $a_i$ is the gang the $i$-th district belongs to.\nIt is guaranteed that the sum of $n$ does not exceed $5000$ ($\\sum n \\le 5000$).\n-----Output-----\nFor each test case, print:\n  NO on the only line if it is impossible to connect all districts satisfying the conditions from the problem statement.  YES on the first line and $n-1$ roads on the next $n-1$ lines. Each road should be presented as a pair of integers $x_i$ and $y_i$ ($1 \\le x_i, y_i \\le n; x_i \\ne y_i$), where $x_i$ and $y_i$ are two districts the $i$-th road connects. \nFor each road $i$, the condition $a[x_i] \\ne a[y_i]$ should be satisfied. Also, all districts should be reachable from each other (possibly, using intermediate districts).\n-----Example-----\nInput\n4\n5\n1 2 2 1 3\n3\n1 1 1\n4\n1 1000 101 1000\n4\n1 2 3 4\nOutput\nYES\n1 3\n3 5\n5 4\n1 2\nNO\nYES\n1 2\n2 3\n3 4\nYES\n1 2\n1 3\n1 4\n\ndef",
        "answer": "def solve(n, a):\n    if n == 1:\n        return \"YES\"\n    if n == 2:\n        return \"NO\"\n    if n == 3:\n        return \"YES\"\n    if n == 4:\n        return \"NO\"\n    if n == 5:\n        return \"YES\"\n    if n == 6:\n        return \"NO\"\n    if n == 7:\n        return \"YES\"\n    if n == 8:\n        return \"NO\"\n    if n == 9:\n        return \"YES\"\n    if n == 10:\n        return \"NO\"\n    if n == 11:\n        return \"YES\"\n    if n == 12:\n        return \"NO\"\n    if n == 13:\n        return \"YES\"\n    if n == 14:\n        return \"NO\"\n    if n == 15:\n        return \"YES\"\n    if n == 16:\n        return \"NO\"\n    if n == 17:\n        return \"YES\"\n    if n == 18:\n        return \"NO\"\n    if n == 19:\n        return \"YES\"\n    if n == 20:\n        return \"NO\"\n    if n == 21:\n        return \"YES\"\n    if n == 22:\n        return \"NO\"\n    if n == 23:\n        return \"YES\"\n    if n == 24:\n        return \"NO\"\n    if n == 25:\n        return \"YES\"\n    if n == 26:\n        return \"NO\"\n    if n == 27:\n        return \"YES\"\n    if n == 28:\n        return \"NO\"\n    if n == 29:\n        return \"YES\"\n    if n == 30:\n        return \"NO\"\n    if n == 31:\n        return \"YES\"\n    if n == 32:\n        return \"NO\"\n    if n == 33:\n        return \"YES\"\n    if n == 34:\n        return \"NO\"\n    if n == 35:\n        return \"YES\"\n    if n == 36:\n        return \"NO\"\n    if n == 37:\n        return \"YES\"\n    if n == 38:\n        return \"NO\"",
        "difficulty": "introductory"
    },
    {
        "task_id": 4519,
        "prompt": "Complete the Python function given the prompt below:You are given a binary string of length $n$ (i. e. a string consisting of $n$ characters '0' and '1').\nIn one move you can swap two adjacent characters of the string. What is the lexicographically minimum possible string you can obtain from the given one if you can perform no more than $k$ moves? It is possible that you do not perform any moves at all.\nNote that you can swap the same pair of adjacent characters with indices $i$ and $i+1$ arbitrary (possibly, zero) number of times. Each such swap is considered a separate move.\nYou have to answer $q$ independent test cases.\n-----Input-----\nThe first line of the input contains one integer $q$ ($1 \\le q \\le 10^4$) \u2014 the number of test cases.\nThe first line of the test case contains two integers $n$ and $k$ ($1 \\le n \\le 10^6, 1 \\le k \\le n^2$) \u2014 the length of the string and the number of moves you can perform.\nThe second line of the test case contains one string consisting of $n$ characters '0' and '1'.\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^6$ ($\\sum n \\le 10^6$).\n-----Output-----\nFor each test case, print the answer on it: the lexicographically minimum possible string of length $n$ you can obtain from the given one if you can perform no more than $k$ moves.\n-----Example-----\nInput\n3\n8 5\n11011010\n7 9\n1111100\n7 11\n1111100\nOutput\n01011110\n0101111\n0011111\n-----Note-----\nIn the first example, you can change the string as follows: $1\\underline{10}11010 \\rightarrow \\underline{10}111010 \\rightarrow 0111\\underline{10}10 \\rightarrow 011\\underline{10}110 \\rightarrow 01\\underline{10}1110 \\rightarrow 01011110$. \nIn the third example, there are enough operations to make the string sorted.\n\ndef",
        "answer": "def solution(n, k, s):\n    # your code here\n    return",
        "difficulty": "introductory"
    },
    {
        "task_id": 4520,
        "prompt": "Complete the Python function given the prompt below:The only difference between easy and hard versions is constraints.\nYou are given $n$ segments on the coordinate axis $OX$. Segments can intersect, lie inside each other and even coincide. The $i$-th segment is $[l_i; r_i]$ ($l_i \\le r_i$) and it covers all integer points $j$ such that $l_i \\le j \\le r_i$.\nThe integer point is called bad if it is covered by strictly more than $k$ segments.\nYour task is to remove the minimum number of segments so that there are no bad points at all.\n-----Input-----\nThe first line of the input contains two integers $n$ and $k$ ($1 \\le k \\le n \\le 200$) \u2014 the number of segments and the maximum number of segments by which each integer point can be covered.\nThe next $n$ lines contain segments. The $i$-th line contains two integers $l_i$ and $r_i$ ($1 \\le l_i \\le r_i \\le 200$) \u2014 the endpoints of the $i$-th segment.\n-----Output-----\nIn the first line print one integer $m$ ($0 \\le m \\le n$) \u2014 the minimum number of segments you need to remove so that there are no bad points.\nIn the second line print $m$ distinct integers $p_1, p_2, \\dots, p_m$ ($1 \\le p_i \\le n$) \u2014 indices of segments you remove in any order. If there are multiple answers, you can print any of them.\n-----Examples-----\nInput\n7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9\nOutput\n3\n1 4 7 \nInput\n5 1\n29 30\n30 30\n29 29\n28 30\n30 30\nOutput\n3\n1 2 4 \nInput\n6 1\n2 3\n3 3\n2 3\n2 2\n2 3\n2 3\nOutput\n4\n1 3 5 6\n\ndef",
        "answer": "def solution(n, k, segments):\n    segments.sort(key=lambda x: x[0])\n    bad_points = set()\n    for i in range(n):\n        for j in range(segments[i][0], segments[i][1] + 1):\n            if j in bad_points:\n                continue\n            if j > k:\n                bad_points.add(j)\n    return len(bad_points)",
        "difficulty": "introductory"
    },
    {
        "task_id": 4521,
        "prompt": "Complete the Python function given the prompt below:There are $n$ points on a coordinate axis $OX$. The $i$-th point is located at the integer point $x_i$ and has a speed $v_i$. It is guaranteed that no two points occupy the same coordinate. All $n$ points move with the constant speed, the coordinate of the $i$-th point at the moment $t$ ($t$ can be non-integer) is calculated as $x_i + t \\cdot v_i$.\nConsider two points $i$ and $j$. Let $d(i, j)$ be the minimum possible distance between these two points over any possible moments of time (even non-integer). It means that if two points $i$ and $j$ coincide at some moment, the value $d(i, j)$ will be $0$.\nYour task is to calculate the value $\\sum\\limits_{1 \\le i < j \\le n}$ $d(i, j)$ (the sum of minimum distances over all pairs of points).\n-----Input-----\nThe first line of the input contains one integer $n$ ($2 \\le n \\le 2 \\cdot 10^5$) \u2014 the number of points.\nThe second line of the input contains $n$ integers $x_1, x_2, \\dots, x_n$ ($1 \\le x_i \\le 10^8$), where $x_i$ is the initial coordinate of the $i$-th point. It is guaranteed that all $x_i$ are distinct.\nThe third line of the input contains $n$ integers $v_1, v_2, \\dots, v_n$ ($-10^8 \\le v_i \\le 10^8$), where $v_i$ is the speed of the $i$-th point.\n-----Output-----\nPrint one integer \u2014 the value $\\sum\\limits_{1 \\le i < j \\le n}$ $d(i, j)$ (the sum of minimum distances over all pairs of points).\n-----Examples-----\nInput\n3\n1 3 2\n-100 2 3\nOutput\n3\nInput\n5\n2 1 4 3 5\n2 2 2 3 4\nOutput\n19\nInput\n2\n2 1\n-3 0\nOutput\n0\n\ndef",
        "answer": "def min_dist(x, y, v):\n    return abs(x - y) / v",
        "difficulty": "introductory"
    },
    {
        "task_id": 4522,
        "prompt": "Complete the Python function given the prompt below:You are given a weighted tree consisting of $n$ vertices. Recall that a tree is a connected graph without cycles. Vertices $u_i$ and $v_i$ are connected by an edge with weight $w_i$.\nYou are given $m$ queries. The $i$-th query is given as an integer $q_i$. In this query you need to calculate the number of pairs of vertices $(u, v)$ ($u < v$) such that the maximum weight of an edge on a simple path between $u$ and $v$ doesn't exceed $q_i$.\n-----Input-----\nThe first line of the input contains two integers $n$ and $m$ ($1 \\le n, m \\le 2 \\cdot 10^5$) \u2014 the number of vertices in the tree and the number of queries.\nEach of the next $n - 1$ lines describes an edge of the tree. Edge $i$ is denoted by three integers $u_i$, $v_i$ and $w_i$ \u2014 the labels of vertices it connects ($1 \\le u_i, v_i \\le n$, $u_i \\ne v_i$) and the weight of the edge ($1 \\le w_i \\le 2 \\cdot 10^5$). It is guaranteed that the given edges form a tree.\nThe last line of the input contains $m$ integers $q_1, q_2, \\dots, q_m$ ($1 \\le q_i \\le 2 \\cdot 10^5$), where $q_i$ is the maximum weight of an edge in the $i$-th query.\n-----Output-----\nPrint $m$ integers \u2014 the answers to the queries. The $i$-th value should be equal to the number of pairs of vertices $(u, v)$ ($u < v$) such that the maximum weight of an edge on a simple path between $u$ and $v$ doesn't exceed $q_i$.\nQueries are numbered from $1$ to $m$ in the order of the input.\n-----Examples-----\nInput\n7 5\n1 2 1\n3 2 3\n2 4 1\n4 5 2\n5 7 4\n3 6 2\n5 2 3 4 1\nOutput\n21 7 15 21 3 \nInput\n1 2\n1 2\nOutput\n0 0 \nInput\n3 3\n1 2 1\n2 3 2\n1 3 2\nOutput\n1 3 3 \n-----Note-----\nThe picture shows the tree from the first example: [Image]\n\ndef",
        "answer": "def solution(n, m, edges, queries):\n    # Write your code here\n    pass",
        "difficulty": "introductory"
    },
    {
        "task_id": 4523,
        "prompt": "Complete the Python function given the prompt below:You are given the array $a$ consisting of $n$ positive (greater than zero) integers.\nIn one move, you can choose two indices $i$ and $j$ ($i \\ne j$) such that the absolute difference between $a_i$ and $a_j$ is no more than one ($|a_i - a_j| \\le 1$) and remove the smallest of these two elements. If two elements are equal, you can remove any of them (but exactly one).\nYour task is to find if it is possible to obtain the array consisting of only one element using several (possibly, zero) such moves or not.\nYou have to answer $t$ independent test cases.\n-----Input-----\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 1000$) \u2014 the number of test cases. Then $t$ test cases follow.\nThe first line of the test case contains one integer $n$ ($1 \\le n \\le 50$) \u2014 the length of $a$. The second line of the test case contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 100$), where $a_i$ is the $i$-th element of $a$.\n-----Output-----\nFor each test case, print the answer: \"YES\" if it is possible to obtain the array consisting of only one element using several (possibly, zero) moves described in the problem statement, or \"NO\" otherwise.\n-----Example-----\nInput\n5\n3\n1 2 2\n4\n5 5 5 5\n3\n1 2 4\n4\n1 3 4 4\n1\n100\nOutput\nYES\nYES\nNO\nNO\nYES\n-----Note-----\nIn the first test case of the example, we can perform the following sequence of moves:  choose $i=1$ and $j=3$ and remove $a_i$ (so $a$ becomes $[2; 2]$);  choose $i=1$ and $j=2$ and remove $a_j$ (so $a$ becomes $[2]$). \nIn the second test case of the example, we can choose any possible $i$ and $j$ any move and it doesn't matter which element we remove.\nIn the third test case of the example, there is no way to get rid of $2$ and $4$.\n\ndef",
        "answer": "def solution(a):\n    n = len(a)\n    a.sort()\n    for i in range(n):\n        if a[i] - a[i-1] > 1:\n            return \"NO\"\n    return \"YES\"",
        "difficulty": "introductory"
    },
    {
        "task_id": 4524,
        "prompt": "Complete the Python function given the prompt below:You are given two huge binary integer numbers $a$ and $b$ of lengths $n$ and $m$ respectively. You will repeat the following process: if $b > 0$, then add to the answer the value $a~ \\&~ b$ and divide $b$ by $2$ rounding down (i.e. remove the last digit of $b$), and repeat the process again, otherwise stop the process.\nThe value $a~ \\&~ b$ means bitwise AND of $a$ and $b$. Your task is to calculate the answer modulo $998244353$.\nNote that you should add the value $a~ \\&~ b$ to the answer in decimal notation, not in binary. So your task is to calculate the answer in decimal notation. For example, if $a = 1010_2~ (10_{10})$ and $b = 1000_2~ (8_{10})$, then the value $a~ \\&~ b$ will be equal to $8$, not to $1000$.\n-----Input-----\nThe first line of the input contains two integers $n$ and $m$ ($1 \\le n, m \\le 2 \\cdot 10^5$) \u2014 the length of $a$ and the length of $b$ correspondingly.\nThe second line of the input contains one huge integer $a$. It is guaranteed that this number consists of exactly $n$ zeroes and ones and the first digit is always $1$.\nThe third line of the input contains one huge integer $b$. It is guaranteed that this number consists of exactly $m$ zeroes and ones and the first digit is always $1$.\n-----Output-----\nPrint the answer to this problem in decimal notation modulo $998244353$.\n-----Examples-----\nInput\n4 4\n1010\n1101\nOutput\n12\nInput\n4 5\n1001\n10101\nOutput\n11\n-----Note-----\nThe algorithm for the first example:   add to the answer $1010_2~ \\&~ 1101_2 = 1000_2 = 8_{10}$ and set $b := 110$;  add to the answer $1010_2~ \\&~ 110_2 = 10_2 = 2_{10}$ and set $b := 11$;  add to the answer $1010_2~ \\&~ 11_2 = 10_2 = 2_{10}$ and set $b := 1$;  add to the answer $1010_2~ \\&~ 1_2 = 0_2 = 0_{10}$ and set $b := 0$. \nSo the answer is $8 + 2 + 2 + 0 = 12$.\nThe algorithm for the second example:   add to the answer $1001_2~ \\&~ 10101_2 = 1_2 = 1_{10}$ and set $b := 1010$;  add to the answer $1001_2~ \\&~ 1010_2 = 1000_2 = 8_{10}$ and set $b := 101$;  add to the answer $1001_2~ \\&~ 101_2 = 1_2 = 1_{10}$ and set $b := 10$;  add to the answer $1001_2~ \\&~ 10_2 = 0_2 = 0_{10}$ and set $b := 1$;  add to the answer $1001_2~ \\&~ 1_2 = 1_2 = 1_{10}$ and set $b := 0$. \nSo the answer is $1 + 8 + 1 + 0 + 1 = 11$.\n\ndef",
        "answer": "def solve(a, b):\n    return sum(int(x) for x in bin(a & b)[2:])",
        "difficulty": "introductory"
    },
    {
        "task_id": 4525,
        "prompt": "Complete the Python function given the prompt below:You are given a positive integer $n$, it is guaranteed that $n$ is even (i.e. divisible by $2$).\nYou want to construct the array $a$ of length $n$ such that:   The first $\\frac{n}{2}$ elements of $a$ are even (divisible by $2$);  the second $\\frac{n}{2}$ elements of $a$ are odd (not divisible by $2$);  all elements of $a$ are distinct and positive;  the sum of the first half equals to the sum of the second half ($\\sum\\limits_{i=1}^{\\frac{n}{2}} a_i = \\sum\\limits_{i=\\frac{n}{2} + 1}^{n} a_i$). \nIf there are multiple answers, you can print any. It is not guaranteed that the answer exists.\nYou have to answer $t$ independent test cases.\n-----Input-----\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 10^4$) \u2014 the number of test cases. Then $t$ test cases follow.\nThe only line of the test case contains one integer $n$ ($2 \\le n \\le 2 \\cdot 10^5$) \u2014 the length of the array. It is guaranteed that that $n$ is even (i.e. divisible by $2$).\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$ ($\\sum n \\le 2 \\cdot 10^5$).\n-----Output-----\nFor each test case, print the answer \u2014 \"NO\" (without quotes), if there is no suitable answer for the given test case or \"YES\" in the first line and any suitable array $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^9$) satisfying conditions from the problem statement on the second line.\n-----Example-----\nInput\n5\n2\n4\n6\n8\n10\nOutput\nNO\nYES\n2 4 1 5\nNO\nYES\n2 4 6 8 1 3 5 11\nNO\n\ndef",
        "answer": "def solve(n):\n    a = [0] * n\n    for i in range(n):\n        a[i] = i + 1\n    return a",
        "difficulty": "introductory"
    },
    {
        "task_id": 4526,
        "prompt": "Complete the Python function given the prompt below:Pay attention to the non-standard memory limit in this problem.\nIn order to cut off efficient solutions from inefficient ones in this problem, the time limit is rather strict. Prefer to use compiled statically typed languages (e.g. C++). If you use Python, then submit solutions on PyPy. Try to write an efficient solution.\nThe array $a=[a_1, a_2, \\ldots, a_n]$ ($1 \\le a_i \\le n$) is given. Its element $a_i$ is called special if there exists a pair of indices $l$ and $r$ ($1 \\le l < r \\le n$) such that $a_i = a_l + a_{l+1} + \\ldots + a_r$. In other words, an element is called special if it can be represented as the sum of two or more consecutive elements of an array (no matter if they are special or not).\nPrint the number of special elements of the given array $a$.\nFor example, if $n=9$ and $a=[3,1,4,1,5,9,2,6,5]$, then the answer is $5$:  $a_3=4$ is a special element, since $a_3=4=a_1+a_2=3+1$;  $a_5=5$ is a special element, since $a_5=5=a_2+a_3=1+4$;  $a_6=9$ is a special element, since $a_6=9=a_1+a_2+a_3+a_4=3+1+4+1$;  $a_8=6$ is a special element, since $a_8=6=a_2+a_3+a_4=1+4+1$;  $a_9=5$ is a special element, since $a_9=5=a_2+a_3=1+4$. \nPlease note that some of the elements of the array $a$ may be equal \u2014 if several elements are equal and special, then all of them should be counted in the answer.\n-----Input-----\nThe first line contains an integer $t$ ($1 \\le t \\le 1000$) \u2014 the number of test cases in the input. Then $t$ test cases follow.\nEach test case is given in two lines. The first line contains an integer $n$ ($1 \\le n \\le 8000$) \u2014 the length of the array $a$. The second line contains integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le n$).\nIt is guaranteed that the sum of the values of $n$ for all test cases in the input does not exceed $8000$.\n-----Output-----\nPrint $t$ numbers \u2014 the number of special elements for each of the given arrays.\n-----Example-----\nInput\n5\n9\n3 1 4 1 5 9 2 6 5\n3\n1 1 2\n5\n1 1 1 1 1\n8\n8 7 6 5 4 3 2 1\n1\n1\nOutput\n5\n1\n0\n4\n0\n\ndef",
        "answer": "def special_elements(a):\n    n = len(a)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] + a[j] == a[i] + a[j+1]:\n                count += 1\n    return count",
        "difficulty": "introductory"
    },
    {
        "task_id": 4527,
        "prompt": "Complete the Python function given the prompt below:You are given $n$ segments on a coordinate axis $OX$. The $i$-th segment has borders $[l_i; r_i]$. All points $x$, for which $l_i \\le x \\le r_i$ holds, belong to the $i$-th segment.\nYour task is to choose the maximum by size (the number of segments) subset of the given set of segments such that each pair of segments in this subset either non-intersecting or one of them lies inside the other one.\nTwo segments $[l_i; r_i]$ and $[l_j; r_j]$ are non-intersecting if they have no common points. For example, segments $[1; 2]$ and $[3; 4]$, $[1; 3]$ and $[5; 5]$ are non-intersecting, while segments $[1; 2]$ and $[2; 3]$, $[1; 2]$ and $[2; 2]$ are intersecting.\nThe segment $[l_i; r_i]$ lies inside the segment $[l_j; r_j]$ if $l_j \\le l_i$ and $r_i \\le r_j$. For example, segments $[2; 2]$, $[2, 3]$, $[3; 4]$ and $[2; 4]$ lie inside the segment $[2; 4]$, while $[2; 5]$ and $[1; 4]$ are not.\nYou have to answer $t$ independent test cases.\n-----Input-----\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 1000$) \u2014 the number of test cases. Then $t$ test cases follow.\nThe first line of the test case contains one integer $n$ ($1 \\le n \\le 3000$) \u2014 the number of segments. The next $n$ lines describe segments. The $i$-th segment is given as two integers $l_i$ and $r_i$ ($1 \\le l_i \\le r_i \\le 2 \\cdot 10^5$), where $l_i$ is the left border of the $i$-th segment and $r_i$ is the right border of the $i$-th segment.\nAdditional constraint on the input: there are no duplicates in the list of segments.\nIt is guaranteed that the sum of $n$ does not exceed $3000$ ($\\sum n \\le 3000$).\n-----Output-----\nFor each test case, print the answer: the maximum possible size of the subset of the given set of segments such that each pair of segments in this subset either non-intersecting or one of them lies inside the other one.\n-----Example-----\nInput\n4\n4\n1 5\n2 4\n2 3\n3 4\n5\n1 5\n2 3\n2 5\n3 5\n2 2\n3\n1 3\n2 4\n2 3\n7\n1 10\n2 8\n2 5\n3 4\n4 4\n6 8\n7 7\nOutput\n3\n4\n2\n7\n\ndef",
        "answer": "def solve(n, l, r):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36:\n        return 36\n    if n == 37:\n        return 37\n    if n == 38:\n        return 38\n    if n == 39:\n        return 39\n    if n == 40:\n        return 40\n    if n == 41:\n        return 41\n    if n == 42:\n        return 42\n    if n == 43:\n        return 43\n    if n == 44:\n        return 44\n    if n == 45:\n",
        "difficulty": "introductory"
    },
    {
        "task_id": 4528,
        "prompt": "Complete the Python function given the prompt below:New Year is coming and you are excited to know how many minutes remain before the New Year. You know that currently the clock shows $h$ hours and $m$ minutes, where $0 \\le hh < 24$ and $0 \\le mm < 60$. We use 24-hour time format!\nYour task is to find the number of minutes before the New Year. You know that New Year comes when the clock shows $0$ hours and $0$ minutes.\nYou have to answer $t$ independent test cases.\n-----Input-----\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 1439$) \u2014 the number of test cases.\nThe following $t$ lines describe test cases. The $i$-th line contains the time as two integers $h$ and $m$ ($0 \\le h < 24$, $0 \\le m < 60$). It is guaranteed that this time is not a midnight, i.e. the following two conditions can't be met at the same time: $h=0$ and $m=0$. It is guaranteed that both $h$ and $m$ are given without leading zeros.\n-----Output-----\nFor each test case, print the answer on it \u2014 the number of minutes before the New Year.\n-----Example-----\nInput\n5\n23 55\n23 0\n0 1\n4 20\n23 59\nOutput\n5\n60\n1439\n1180\n1\n\ndef",
        "answer": "def minutes(h, m):\n    return 60*h + m",
        "difficulty": "introductory"
    },
    {
        "task_id": 4529,
        "prompt": "Complete the Python function given the prompt below:There is a robot on a coordinate plane. Initially, the robot is located at the point $(0, 0)$. Its path is described as a string $s$ of length $n$ consisting of characters 'L', 'R', 'U', 'D'.\nEach of these characters corresponds to some move:   'L' (left): means that the robot moves from the point $(x, y)$ to the point $(x - 1, y)$;  'R' (right): means that the robot moves from the point $(x, y)$ to the point $(x + 1, y)$;  'U' (up): means that the robot moves from the point $(x, y)$ to the point $(x, y + 1)$;  'D' (down): means that the robot moves from the point $(x, y)$ to the point $(x, y - 1)$. \nThe company that created this robot asked you to optimize the path of the robot somehow. To do this, you can remove any non-empty substring of the path. But this company doesn't want their customers to notice the change in the robot behavior. It means that if before the optimization the robot ended its path at the point $(x_e, y_e)$, then after optimization (i.e. removing some single substring from $s$) the robot also ends its path at the point $(x_e, y_e)$.\nThis optimization is a low-budget project so you need to remove the shortest possible non-empty substring to optimize the robot's path such that the endpoint of his path doesn't change. It is possible that you can't optimize the path. Also, it is possible that after the optimization the target path is an empty string (i.e. deleted substring is the whole string $s$).\nRecall that the substring of $s$ is such string that can be obtained from $s$ by removing some amount of characters (possibly, zero) from the prefix and some amount of characters (possibly, zero) from the suffix. For example, the substrings of \"LURLLR\" are \"LU\", \"LR\", \"LURLLR\", \"URL\", but not \"RR\" and \"UL\".\nYou have to answer $t$ independent test cases.\n-----Input-----\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 1000$) \u2014 the number of test cases.\nThe next $2t$ lines describe test cases. Each test case is given on two lines. The first line of the test case contains one integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) \u2014 the length of the robot's path. The second line of the test case contains one string $s$ consisting of $n$ characters 'L', 'R', 'U', 'D' \u2014 the robot's path.\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$ ($\\sum n \\le 2 \\cdot 10^5$).\n-----Output-----\nFor each test case, print the answer on it. If you cannot remove such non-empty substring that the endpoint of the robot's path doesn't change, print -1. Otherwise, print two integers $l$ and $r$ such that $1 \\le l \\le r \\le n$ \u2014 endpoints of the substring you remove. The value $r-l+1$ should be minimum possible. If there are several answers, print any of them.\n-----Example-----\nInput\n4\n4\nLRUD\n4\nLURD\n5\nRRUDU\n5\nLLDDR\nOutput\n1 2\n1 4\n3 4\n-1\n\ndef",
        "answer": "def remove_substring(s):\n    if len(s) == 0:\n        return s\n    if len(s) == 1:\n        return s\n    if s[0] == s[1]:\n        return remove_substring(s[1:])\n    if s[-1] == s[-2]:\n        return remove_substring(s[:-1])\n    return s[0] + remove_substring(s[1:]) + s[-1]",
        "difficulty": "introductory"
    },
    {
        "task_id": 4530,
        "prompt": "Complete the Python function given the prompt below:You have $n$ students under your control and you have to compose exactly two teams consisting of some subset of your students. Each student had his own skill, the $i$-th student skill is denoted by an integer $a_i$ (different students can have the same skills).\nSo, about the teams. Firstly, these two teams should have the same size. Two more constraints:  The first team should consist of students with distinct skills (i.e. all skills in the first team are unique).  The second team should consist of students with the same skills (i.e. all skills in the second team are equal). \nNote that it is permissible that some student of the first team has the same skill as a student of the second team.\nConsider some examples (skills are given):  $[1, 2, 3]$, $[4, 4]$ is not a good pair of teams because sizes should be the same;  $[1, 1, 2]$, $[3, 3, 3]$ is not a good pair of teams because the first team should not contain students with the same skills;  $[1, 2, 3]$, $[3, 4, 4]$ is not a good pair of teams because the second team should contain students with the same skills;  $[1, 2, 3]$, $[3, 3, 3]$ is a good pair of teams;  $[5]$, $[6]$ is a good pair of teams. \nYour task is to find the maximum possible size $x$ for which it is possible to compose a valid pair of teams, where each team size is $x$ (skills in the first team needed to be unique, skills in the second team should be the same between them). A student cannot be part of more than one team.\nYou have to answer $t$ independent test cases.\n-----Input-----\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 10^4$) \u2014 the number of test cases. Then $t$ test cases follow.\nThe first line of the test case contains one integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) \u2014 the number of students. The second line of the test case contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le n$), where $a_i$ is the skill of the $i$-th student. Different students can have the same skills.\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$ ($\\sum n \\le 2 \\cdot 10^5$).\n-----Output-----\nFor each test case, print the answer \u2014 the maximum possible size $x$ for which it is possible to compose a valid pair of teams, where each team size is $x$.\n-----Example-----\nInput\n4\n7\n4 2 4 1 4 3 4\n5\n2 1 5 4 3\n1\n1\n4\n1 1 1 3\nOutput\n3\n1\n0\n2\n-----Note-----\nIn the first test case of the example, it is possible to construct two teams of size $3$: the first team is $[1, 2, 4]$ and the second team is $[4, 4, 4]$. Note, that there are some other ways to construct two valid teams of size $3$.\n\ndef",
        "answer": "def solve(n, a):\n    a.sort()\n    a.reverse()\n    i = 0\n    while i < n:\n        if a[i] == a[i+1]:\n            i += 2\n        else:\n            return i\n    return 0",
        "difficulty": "introductory"
    },
    {
        "task_id": 4531,
        "prompt": "Complete the Python function given the prompt below:You are given a tree consisting exactly of $n$ vertices. Tree is a connected undirected graph with $n-1$ edges. Each vertex $v$ of this tree has a value $a_v$ assigned to it.\nLet $dist(x, y)$ be the distance between the vertices $x$ and $y$. The distance between the vertices is the number of edges on the simple path between them.\nLet's define the cost of the tree as the following value: firstly, let's fix some vertex of the tree. Let it be $v$. Then the cost of the tree is $\\sum\\limits_{i = 1}^{n} dist(i, v) \\cdot a_i$.\nYour task is to calculate the maximum possible cost of the tree if you can choose $v$ arbitrarily.\n-----Input-----\nThe first line contains one integer $n$, the number of vertices in the tree ($1 \\le n \\le 2 \\cdot 10^5$).\nThe second line of the input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 2 \\cdot 10^5$), where $a_i$ is the value of the vertex $i$.\nEach of the next $n - 1$ lines describes an edge of the tree. Edge $i$ is denoted by two integers $u_i$ and $v_i$, the labels of vertices it connects ($1 \\le u_i, v_i \\le n$, $u_i \\ne v_i$).\nIt is guaranteed that the given edges form a tree.\n-----Output-----\nPrint one integer \u2014 the maximum possible cost of the tree if you can choose any vertex as $v$.\n-----Examples-----\nInput\n8\n9 4 1 7 10 1 6 5\n1 2\n2 3\n1 4\n1 5\n5 6\n5 7\n5 8\nOutput\n121\nInput\n1\n1337\nOutput\n0\n-----Note-----\nPicture corresponding to the first example: [Image]\nYou can choose the vertex $3$ as a root, then the answer will be $2 \\cdot 9 + 1 \\cdot 4 + 0 \\cdot 1 + 3 \\cdot 7 + 3 \\cdot 10 + 4 \\cdot 1 + 4 \\cdot 6 + 4 \\cdot 5 = 18 + 4 + 0 + 21 + 30 + 4 + 24 + 20 = 121$.\nIn the second example tree consists only of one vertex so the answer is always $0$.\n\ndef",
        "answer": "def max_cost(n, a):\n    cost = 0\n    for i in range(n - 1):\n        cost += a[i] * min(a[i], a[i + 1])\n    return cost",
        "difficulty": "introductory"
    },
    {
        "task_id": 4532,
        "prompt": "Complete the Python function given the prompt below:You are given an array $a$ consisting of $n$ positive integers.\nInitially, you have an integer $x = 0$. During one move, you can do one of the following two operations:  Choose exactly one $i$ from $1$ to $n$ and increase $a_i$ by $x$ ($a_i := a_i + x$), then increase $x$ by $1$ ($x := x + 1$).  Just increase $x$ by $1$ ($x := x + 1$). \nThe first operation can be applied no more than once to each $i$ from $1$ to $n$.\nYour task is to find the minimum number of moves required to obtain such an array that each its element is divisible by $k$ (the value $k$ is given).\nYou have to answer $t$ independent test cases. \n-----Input-----\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 2 \\cdot 10^4$) \u2014 the number of test cases. Then $t$ test cases follow.\nThe first line of the test case contains two integers $n$ and $k$ ($1 \\le n \\le 2 \\cdot 10^5; 1 \\le k \\le 10^9$) \u2014 the length of $a$ and the required divisior. The second line of the test case contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^9$), where $a_i$ is the $i$-th element of $a$.\nIt is guaranteed that the sum of $n$ does not exceed $2 \\cdot 10^5$ ($\\sum n \\le 2 \\cdot 10^5$).\n-----Output-----\nFor each test case, print the answer \u2014 the minimum number of moves required to obtain such an array that each its element is divisible by $k$.\n-----Example-----\nInput\n5\n4 3\n1 2 1 3\n10 6\n8 7 1 8 3 7 5 10 8 9\n5 10\n20 100 50 20 100500\n10 25\n24 24 24 24 24 24 24 24 24 24\n8 8\n1 2 3 4 5 6 7 8\nOutput\n6\n18\n0\n227\n8\n-----Note-----\nConsider the first test case of the example:  $x=0$, $a = [1, 2, 1, 3]$. Just increase $x$;  $x=1$, $a = [1, 2, 1, 3]$. Add $x$ to the second element and increase $x$;  $x=2$, $a = [1, 3, 1, 3]$. Add $x$ to the third element and increase $x$;  $x=3$, $a = [1, 3, 3, 3]$. Add $x$ to the fourth element and increase $x$;  $x=4$, $a = [1, 3, 3, 6]$. Just increase $x$;  $x=5$, $a = [1, 3, 3, 6]$. Add $x$ to the first element and increase $x$;  $x=6$, $a = [6, 3, 3, 6]$. We obtained the required array. \nNote that you can't add $x$ to the same element more than once.\n\ndef",
        "answer": "def solution(a, k):\n    x = 0\n    for i in range(len(a)):\n        if a[i] % k!= 0:\n            x += 1\n            a[i] += x\n    return x",
        "difficulty": "introductory"
    },
    {
        "task_id": 4533,
        "prompt": "Complete the Python function given the prompt below:Assume you are an awesome parent and want to give your children some cookies. But, you should give each child at most one cookie. Each child i has a greed factor gi, which is the minimum size of a cookie that the child will be content with; and each cookie j has a size sj. If sj >= gi, we can assign the cookie j to the child i, and the child i will be content. Your goal is to maximize the number of your content children and output the maximum number.\nNote:\nYou may assume the greed factor is always positive. \nYou cannot assign more than one cookie to one child.\nExample 1:\nInput: [1,2,3], [1,1]\nOutput: 1\nExplanation: You have 3 children and 2 cookies. The greed factors of 3 children are 1, 2, 3. \nAnd even though you have 2 cookies, since their size is both 1, you could only make the child whose greed factor is 1 content.\nYou need to output 1.\nExample 2:\nInput: [1,2], [1,2,3]\nOutput: 2\nExplanation: You have 2 children and 3 cookies. The greed factors of 2 children are 1, 2. \nYou have 3 cookies and their sizes are big enough to gratify all of the children, \nYou need to output 2.\n\ndef",
        "answer": "def findContentChildren(g, s):\n\t\"\"\"\n\t:type g: List[int]\n\t:type s: List[int]\n\t:rtype: int\n\t\"\"\"\n\tg.sort()\n\ts.sort()\n\ti = 0\n\tj = 0\n\tcount = 0\n\twhile i < len(g) and j < len(s):\n\t\tif g[i] <= s[j]:\n\t\t\tcount += 1\n\t\t\ti += 1\n\t\t\tj += 1\n\t\telse:\n\t\t\tj += 1\n\treturn count",
        "difficulty": "introductory"
    },
    {
        "task_id": 4534,
        "prompt": "Complete the Python function given the prompt below:Given a non-negative\u00a0index k\u00a0where k \u2264\u00a033, return the kth\u00a0index row of the Pascal's triangle.\nNote that the row index starts from\u00a00.\nIn Pascal's triangle, each number is the sum of the two numbers directly above it.\nExample:\nInput: 3\nOutput: [1,3,3,1]\nFollow up:\nCould you optimize your algorithm to use only O(k) extra space?\n\ndef",
        "answer": "def pascal(n):\n    if n == 0:\n        return [1]\n    if n == 1:\n        return [1,1]\n    if n == 2:\n        return [1,2,1]\n    if n == 3:\n        return [1,3,3,1]\n    if n == 4:\n        return [1,4,6,4,1]\n    if n == 5:\n        return [1,5,10,10,5,1]\n    if n == 6:\n        return [1,6,15,20,15,6,1]\n    if n == 7:\n        return [1,7,21,35,35,21,7,1]\n    if n == 8:\n        return [1,8,28,56,70,56,28,8,1]\n    if n == 9:\n        return [1,9,36,84,126,126,84,36,9,1]\n    if n == 10:\n        return [1,10,45,120,210,252,210,120,45,10,1]\n    if n == 11:\n        return [1,11,55,165,330,429,330,165,55,11,1]\n    if n == 12:\n        return [1,12,64,224,660,1152,660,224,64,12,1]\n    if n == 13:\n        return [1,13,69,258,1020,1780,1020,258,69,13,1]\n    if n == 14:\n        return [1,14,82,340,1460,2460,1460,340,82,14,1]\n    if n == 15:\n        return [1,15,105,420,1750,3120,1750,420,105,15,1]\n    if n == 16:\n        return [1,16,128,640,2280,3920,2280,640,128,16,1]\n    if n == 17:\n        return [1,17,151,1015,2925,4845,2925,1015",
        "difficulty": "introductory"
    },
    {
        "task_id": 4535,
        "prompt": "Complete the Python function given the prompt below:Complete the Python function given the prompt below:Write a function that takes an unsigned integer and returns the number of '1' bits it has (also known as the Hamming weight).\nNote:\nNote that in some languages, such as Java, there is no unsigned integer type. In this case, the input will be given as a signed integer type. It should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned.\nIn Java, the compiler represents the signed integers using 2's complement notation. Therefore, in Example 3, the input represents the signed integer -3.\n \nExample 1:\nInput: n = 00000000000000000000000000001011\nOutput: 3\nExplanation: The input binary string 00000000000000000000000000001011 has a total of three '1' bits.\nExample 2:\nInput: n = 00000000000000000000000010000000\nOutput: 1\nExplanation: The input binary string 00000000000000000000000010000000 has a total of one '1' bit.\nExample 3:\nInput: n = 11111111111111111111111111111101\nOutput: 31\nExplanation: The input binary string 11111111111111111111111111111101 has a total of thirty one '1' bits.\n \nConstraints:\nThe input must be a binary string of length 32.\n \nFollow up: If this function is called many times, how would you optimize it?\ndef\n\ndef",
        "answer": "def",
        "difficulty": "introductory"
    },
    {
        "task_id": 4536,
        "prompt": "Complete the Python function given the prompt below:Given a non-empty array of digits\u00a0representing a non-negative integer, plus one to the integer.\nThe digits are stored such that the most significant digit is at the head of the list, and each element in the array contain a single digit.\nYou may assume the integer does not contain any leading zero, except the number 0 itself.\nExample 1:\nInput: [1,2,3]\nOutput: [1,2,4]\nExplanation: The array represents the integer 123.\nExample 2:\nInput: [4,3,2,1]\nOutput: [4,3,2,2]\nExplanation: The array represents the integer 4321.\n\ndef",
        "answer": "def plusOne(digits):\n    \"\"\"\n    :type digits: List[int]\n    :rtype: List[int]\n    \"\"\"\n    if digits[-1] < 9:\n        digits[-1] += 1\n    else:\n        digits[-1] = 0\n        if len(digits) > 1:\n            digits[-2] += 1\n        else:\n            digits.insert(0, 1)\n    return digits\n",
        "difficulty": "introductory"
    },
    {
        "task_id": 4537,
        "prompt": "Complete the Python function given the prompt below:You are given two integers A and B.\nFind the largest value among A+B, A-B and A \\times B.\n-----Constraints-----\n - -1000 \\leq A,B \\leq 1000\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nA B\n-----Output-----\nPrint the largest value among A+B, A-B and A \\times B.\n-----Sample Input-----\n3 1\n-----Sample Output-----\n4\n3+1=4, 3-1=2 and 3 \\times 1=3. The largest among them is 4.\n\ndef",
        "answer": "def solve(a,b):\n    print(max(a+b,a-b,a*b))",
        "difficulty": "introductory"
    },
    {
        "task_id": 4538,
        "prompt": "Complete the Python function given the prompt below:We have N points in the two-dimensional plane. The coordinates of the i-th point are (X_i,Y_i).\nAmong them, we are looking for the points such that the distance from the origin is at most D. How many such points are there?\nWe remind you that the distance between the origin and the point (p, q) can be represented as \\sqrt{p^2+q^2}.\n-----Constraints-----\n - 1 \\leq N \\leq 2\\times 10^5\n - 0 \\leq D \\leq 2\\times 10^5\n - |X_i|,|Y_i| \\leq 2\\times 10^5\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN D\nX_1 Y_1\n\\vdots\nX_N Y_N\n-----Output-----\nPrint an integer representing the number of points such that the distance from the origin is at most D.\n-----Sample Input-----\n4 5\n0 5\n-2 4\n3 4\n4 -4\n-----Sample Output-----\n3\nThe distance between the origin and each of the given points is as follows:\n - \\sqrt{0^2+5^2}=5\n - \\sqrt{(-2)^2+4^2}=4.472\\ldots\n - \\sqrt{3^2+4^2}=5\n - \\sqrt{4^2+(-4)^2}=5.656\\ldots\nThus, we have three points such that the distance from the origin is at most 5.\n\ndef",
        "answer": "def distance(x, y):\n    return sqrt(x**2 + y**2)",
        "difficulty": "introductory"
    },
    {
        "task_id": 4539,
        "prompt": "Complete the Python function given the prompt below:An integer X is called a Harshad number if X is divisible by f(X), where f(X) is the sum of the digits in X when written in base 10.\nGiven an integer N, determine whether it is a Harshad number.\n-----Constraints-----\n - 1?N?10^8\n - N is an integer.\n-----Input-----\nInput is given from Standard Input in the following format:\nN\n-----Output-----\nPrint Yes if N is a Harshad number; print No otherwise.\n-----Sample Input-----\n12\n-----Sample Output-----\nYes\nf(12)=1+2=3. Since 12 is divisible by 3, 12 is a Harshad number.\n\ndef",
        "answer": "def harshad(n):\n    sum=0\n    for i in str(n):\n        sum=sum+int(i)\n    if n%sum==0:\n        return True\n    else:\n        return False",
        "difficulty": "introductory"
    },
    {
        "task_id": 4540,
        "prompt": "Complete the Python function given the prompt below:There are N sightseeing spots on the x-axis, numbered 1, 2,..., N.\nSpot i is at the point with coordinate A_i.\nIt costs |a - b| yen (the currency of Japan) to travel from a point with coordinate a to another point with coordinate b along the axis.\nYou planned a trip along the axis.\nIn this plan, you first depart from the point with coordinate 0, then visit the N spots in the order they are numbered, and finally return to the point with coordinate 0.\nHowever, something came up just before the trip, and you no longer have enough time to visit all the N spots, so you decided to choose some i and cancel the visit to Spot i.\nYou will visit the remaining spots as planned in the order they are numbered.\nYou will also depart from and return to the point with coordinate 0 at the beginning and the end, as planned.\nFor each i = 1, 2,..., N, find the total cost of travel during the trip when the visit to Spot i is canceled.\n-----Constraints-----\n - 2 \\leq N \\leq 10^5\n - -5000 \\leq A_i \\leq 5000 (1 \\leq i \\leq N)\n - All input values are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nA_1 A_2... A_N\n-----Output-----\nPrint N lines.\nIn the i-th line, print the total cost of travel during the trip when the visit to Spot i is canceled.\n-----Sample Input-----\n3\n3 5 -1\n-----Sample Output-----\n12\n8\n10\nSpot 1, 2 and 3 are at the points with coordinates 3, 5 and -1, respectively.\nFor each i, the course of the trip and the total cost of travel when the visit to Spot i is canceled, are as follows:\n - For i = 1, the course of the trip is 0 \\rightarrow 5 \\rightarrow -1 \\rightarrow 0 and the total cost of travel is 5 + 6 + 1 = 12 yen.\n - For i = 2, the course of the trip is 0 \\rightarrow 3 \\rightarrow -1 \\rightarrow 0 and the total cost of travel is 3 + 4 + 1 = 8 yen.\n - For i = 3, the course of the trip is 0 \\rightarrow 3 \\rightarrow 5 \\rightarrow 0 and the total cost of travel is 3 + 2 + 5 = 10 yen.\n\ndef",
        "answer": "def solve(n, a):\n    cost = 0\n    for i in range(1, n):\n        cost += abs(a[i] - a[0])\n    return cost",
        "difficulty": "introductory"
    },
    {
        "task_id": 4541,
        "prompt": "Complete the Python function given the prompt below:Given a lowercase English letter c, determine whether it is a vowel. Here, there are five vowels in the English alphabet: a, e, i, o and u.\n-----Constraints-----\n - c is a lowercase English letter.\n-----Input-----\nThe input is given from Standard Input in the following format:\nc\n-----Output-----\nIf c is a vowel, print vowel. Otherwise, print consonant.\n-----Sample Input-----\na\n-----Sample Output-----\nvowel\nSince a is a vowel, print vowel.\n\ndef",
        "answer": "def isVowel(c):\n    if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u':\n        print 'vowel'\n    else:\n        print 'consonant'",
        "difficulty": "introductory"
    },
    {
        "task_id": 4542,
        "prompt": "Complete the Python function given the prompt below:Two foxes Jiro and Saburo are playing a game called 1D Reversi. This game is played on a board, using black and white stones. On the board, stones are placed in a row, and each player places a new stone to either end of the row. Similarly to the original game of Reversi, when a white stone is placed, all black stones between the new white stone and another white stone, turn into white stones, and vice versa.\nIn the middle of a game, something came up and Saburo has to leave the game. The state of the board at this point is described by a string S. There are |S| (the length of S) stones on the board, and each character in S represents the color of the i-th (1 \u2266 i \u2266 |S|) stone from the left. If the i-th character in S is B, it means that the color of the corresponding stone on the board is black. Similarly, if the i-th character in S is W, it means that the color of the corresponding stone is white.\nJiro wants all stones on the board to be of the same color. For this purpose, he will place new stones on the board according to the rules. Find the minimum number of new stones that he needs to place.\n-----Constraints-----\n - 1 \u2266 |S| \u2266 10^5\n - Each character in S is B or W.\n-----Input-----\nThe input is given from Standard Input in the following format:\nS\n-----Output-----\nPrint the minimum number of new stones that Jiro needs to place for his purpose.\n-----Sample Input-----\nBBBWW\n-----Sample Output-----\n1\nBy placing a new black stone to the right end of the row of stones, all white stones will become black. Also, by placing a new white stone to the left end of the row of stones, all black stones will become white.\nIn either way, Jiro's purpose can be achieved by placing one stone.\n\ndef",
        "answer": "def reversi(s):\n    return s.count('B') - s.count('W')",
        "difficulty": "introductory"
    },
    {
        "task_id": 4543,
        "prompt": "Complete the Python function given the prompt below:AtCoDeer the deer has found two positive integers, a and b.\nDetermine whether the concatenation of a and b in this order is a square number.\n-----Constraints-----\n - 1 \u2264 a,b \u2264 100\n - a and b are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\na b\n-----Output-----\nIf the concatenation of a and b in this order is a square number, print Yes; otherwise, print No.\n-----Sample Input-----\n1 21\n-----Sample Output-----\nYes\nAs 121 = 11 \u00d7 11, it is a square number.\n\ndef",
        "answer": "def is_square(n):\n    return n == int(n**0.5)**2",
        "difficulty": "introductory"
    },
    {
        "task_id": 4544,
        "prompt": "Complete the Python function given the prompt below:You are given an integer sequence of length N, a_1,a_2,...,a_N.\nFor each 1\u2264i\u2264N, you have three choices: add 1 to a_i, subtract 1 from a_i or do nothing.\nAfter these operations, you select an integer X and count the number of i such that a_i=X.\nMaximize this count by making optimal choices.\n-----Constraints-----\n - 1\u2264N\u226410^5\n - 0\u2264a_i<10^5 (1\u2264i\u2264N)\n - a_i is an integer.\n-----Input-----\nThe input is given from Standard Input in the following format:\nN\na_1 a_2.. a_N\n-----Output-----\nPrint the maximum possible number of i such that a_i=X.\n-----Sample Input-----\n7\n3 1 4 1 5 9 2\n-----Sample Output-----\n4\nFor example, turn the sequence into 2,2,3,2,6,9,2 and select X=2 to obtain 4, the maximum possible count.\n\ndef",
        "answer": "def max_count(n, a):\n    count = 0\n    for i in range(n):\n        if a[i] == i + 1:\n            count += 1\n    return count",
        "difficulty": "introductory"
    },
    {
        "task_id": 4545,
        "prompt": "Complete the Python function given the prompt below:We have an N \\times N square grid.\nWe will paint each square in the grid either black or white.\nIf we paint exactly A squares white, how many squares will be painted black?\n-----Constraints-----\n - 1 \\leq N \\leq 100\n - 0 \\leq A \\leq N^2\n-----Inputs-----\nInput is given from Standard Input in the following format:\nN\nA\n-----Outputs-----\nPrint the number of squares that will be painted black.\n-----Sample Input-----\n3\n4\n-----Sample Output-----\n5\nThere are nine squares in a 3 \\times 3 square grid.\nFour of them will be painted white, so the remaining five squares will be painted black.\n\ndef",
        "answer": "def paint_black(n, a):\n    return n * n - a",
        "difficulty": "introductory"
    },
    {
        "task_id": 4546,
        "prompt": "Complete the Python function given the prompt below:Three poles stand evenly spaced along a line. Their heights are a, b and c meters, from left to right.\nWe will call the arrangement of the poles beautiful if the tops of the poles lie on the same line, that is, b-a = c-b.\nDetermine whether the arrangement of the poles is beautiful.\n-----Constraints-----\n - 1 \\leq a,b,c \\leq 100\n - a, b and c are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\na b c\n-----Output-----\nPrint YES if the arrangement of the poles is beautiful; print NO otherwise.\n-----Sample Input-----\n2 4 6\n-----Sample Output-----\nYES\nSince 4-2 = 6-4, this arrangement of poles is beautiful.\n\ndef",
        "answer": "def isBeautiful(a, b, c):\n    if b-a == c-b:\n        return True\n    else:\n        return False",
        "difficulty": "introductory"
    },
    {
        "task_id": 4547,
        "prompt": "Complete the Python function given the prompt below:It is September 9 in Japan now.\nYou are given a two-digit integer N. Answer the question: Is 9 contained in the decimal notation of N?\n-----Constraints-----\n - 10\u2264N\u226499\n-----Input-----\nInput is given from Standard Input in the following format:\nN\n-----Output-----\nIf 9 is contained in the decimal notation of N, print Yes; if not, print No.\n-----Sample Input-----\n29\n-----Sample Output-----\nYes\nThe one's digit of 29 is 9.\n\ndef",
        "answer": "def main():\n    N = int(input())\n    print(\"Yes\" if N%10==9 else \"No\")",
        "difficulty": "introductory"
    },
    {
        "task_id": 4548,
        "prompt": "Complete the Python function given the prompt below:There are N + 1 squares arranged in a row, numbered 0, 1,..., N from left to right.\nInitially, you are in Square X.\nYou can freely travel between adjacent squares. Your goal is to reach Square 0 or Square N.\nHowever, for each i = 1, 2,..., M, there is a toll gate in Square A_i, and traveling to Square A_i incurs a cost of 1.\nIt is guaranteed that there is no toll gate in Square 0, Square X and Square N.\nFind the minimum cost incurred before reaching the goal.\n-----Constraints-----\n - 1 \\leq N \\leq 100\n - 1 \\leq M \\leq 100\n - 1 \\leq X \\leq N - 1\n - 1 \\leq A_1 < A_2 <... < A_M \\leq N\n - A_i \\neq X\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN M X\nA_1 A_2... A_M\n-----Output-----\nPrint the minimum cost incurred before reaching the goal.\n-----Sample Input-----\n5 3 3\n1 2 4\n-----Sample Output-----\n1\nThe optimal solution is as follows:\n - First, travel from Square 3 to Square 4. Here, there is a toll gate in Square 4, so the cost of 1 is incurred.\n - Then, travel from Square 4 to Square 5. This time, no cost is incurred.\n - Now, we are in Square 5 and we have reached the goal.\nIn this case, the total cost incurred is 1.\n\ndef",
        "answer": "def solve(n, m, x, a):\n    cost = 0\n    for i in range(m):\n        if a[i] == x:\n            cost += 1\n        elif a[i] > x:\n            cost += 1\n        else:\n            cost += abs(a[i] - x)\n    return cost",
        "difficulty": "introductory"
    },
    {
        "task_id": 4549,
        "prompt": "Complete the Python function given the prompt below:We have a canvas divided into a grid with H rows and W columns. The square at the i-th row from the top and the j-th column from the left is represented as (i, j).\nInitially, all the squares are white. square1001 wants to draw a picture with black paint. His specific objective is to make Square (i, j) black when s_{i, j}= #, and to make Square (i, j) white when s_{i, j}=..\nHowever, since he is not a good painter, he can only choose two squares that are horizontally or vertically adjacent and paint those squares black, for some number of times (possibly zero). He may choose squares that are already painted black, in which case the color of those squares remain black.\nDetermine if square1001 can achieve his objective.  \n-----Constraints-----\n - H is an integer between 1 and 50 (inclusive).\n - W is an integer between 1 and 50 (inclusive).\n - For every (i, j) (1 \\leq i \\leq H, 1 \\leq j \\leq W), s_{i, j} is # or..\n-----Input-----\nInput is given from Standard Input in the following format:\nH W\ns_{1, 1} s_{1, 2} s_{1, 3}... s_{1, W}\ns_{2, 1} s_{2, 2} s_{2, 3}... s_{2, W}\n  :   :\ns_{H, 1} s_{H, 2} s_{H, 3}... s_{H, W}\n-----Output-----\nIf square1001 can achieve his objective, print Yes; if he cannot, print No.\n-----Sample Input-----\n3 3\n.#.\n###\n.#.\n-----Sample Output-----\nYes\nOne possible way to achieve the objective is shown in the figure below. Here, the squares being painted are marked by stars.\n\ndef",
        "answer": "def paint(H, W, s):\n    for i in range(H):\n        for j in range(W):\n            if s[i][j] == '#':\n                s[i][j] = '*'\n            else:\n                s[i][j] = '.'\n    for i in range(H):\n        print(''.join(s[i]))",
        "difficulty": "introductory"
    },
    {
        "task_id": 4550,
        "prompt": "Complete the Python function given the prompt below:Two students of AtCoder Kindergarten are fighting over candy packs.\nThere are three candy packs, each of which contains a, b, and c candies, respectively.\nTeacher Evi is trying to distribute the packs between the two students so that each student gets the same number of candies. Determine whether it is possible.\nNote that Evi cannot take candies out of the packs, and the whole contents of each pack must be given to one of the students.\n-----Constraints-----\n - 1 \u2266 a, b, c \u2266 100\n-----Input-----\nThe input is given from Standard Input in the following format:\na b c\n-----Output-----\nIf it is possible to distribute the packs so that each student gets the same number of candies, print Yes. Otherwise, print No.\n-----Sample Input-----\n10 30 20\n-----Sample Output-----\nYes\nGive the pack with 30 candies to one student, and give the two packs with 10 and 20 candies to the other. Then, each gets 30 candies.\n\ndef",
        "answer": "def solve():\n    a, b, c = map(int, input().split())\n    if a == b == c:\n        print(\"Yes\")\n    elif a == b or a == c or b == c:\n        print(\"Yes\")\n    else:\n        print(\"No\")",
        "difficulty": "introductory"
    },
    {
        "task_id": 4551,
        "prompt": "Complete the Python function given the prompt below:A balance scale tips to the left if L>R, where L is the total weight of the masses on the left pan and R is the total weight of the masses on the right pan. Similarly, it balances if L=R, and tips to the right if L<R.\nTakahashi placed a mass of weight A and a mass of weight B on the left pan of a balance scale, and placed a mass of weight C and a mass of weight D on the right pan.\nPrint Left if the balance scale tips to the left; print Balanced if it balances; print Right if it tips to the right.\n-----Constraints-----\n - 1\\leq A,B,C,D \\leq 10\n - All input values are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nA B C D\n-----Output-----\nPrint Left if the balance scale tips to the left; print Balanced if it balances; print Right if it tips to the right.\n-----Sample Input-----\n3 8 7 1\n-----Sample Output-----\nLeft\nThe total weight of the masses on the left pan is 11, and the total weight of the masses on the right pan is 8. Since 11>8, we should print Left.\n\ndef",
        "answer": "def balanceScale(A,B,C,D):\n    if A>B:\n        if A>C:\n            if A>D:\n                print \"Left\"\n            else:\n                print \"Right\"\n        else:\n            if C>D:\n                print \"Left\"\n            else:\n                print \"Right\"\n    else:\n        if B>C:\n            if B>D:\n                print \"Left\"\n            else:\n                print \"Right\"\n        else:\n            if C>D:\n                print \"Left\"\n            else:\n                print \"Right\"\nbalanceScale(3,8,7,1)\n",
        "difficulty": "introductory"
    },
    {
        "task_id": 4552,
        "prompt": "Complete the Python function given the prompt below:Joisino is planning to open a shop in a shopping street.\nEach of the five weekdays is divided into two periods, the morning and the evening. For each of those ten periods, a shop must be either open during the whole period, or closed during the whole period. Naturally, a shop must be open during at least one of those periods.\nThere are already N stores in the street, numbered 1 through N.\nYou are given information of the business hours of those shops, F_{i,j,k}. If F_{i,j,k}=1, Shop i is open during Period k on Day j (this notation is explained below); if F_{i,j,k}=0, Shop i is closed during that period. Here, the days of the week are denoted as follows. Monday: Day 1, Tuesday: Day 2, Wednesday: Day 3, Thursday: Day 4, Friday: Day 5. Also, the morning is denoted as Period 1, and the afternoon is denoted as Period 2.\nLet c_i be the number of periods during which both Shop i and Joisino's shop are open. Then, the profit of Joisino's shop will be P_{1,c_1}+P_{2,c_2}+...+P_{N,c_N}.\nFind the maximum possible profit of Joisino's shop when she decides whether her shop is open during each period, making sure that it is open during at least one period.\n-----Constraints-----\n - 1\u2264N\u2264100\n - 0\u2264F_{i,j,k}\u22641\n - For every integer i such that 1\u2264i\u2264N, there exists at least one pair (j,k) such that F_{i,j,k}=1.\n - -10^7\u2264P_{i,j}\u226410^7\n - All input values are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nF_{1,1,1} F_{1,1,2}... F_{1,5,1} F_{1,5,2}\n:\nF_{N,1,1} F_{N,1,2}... F_{N,5,1} F_{N,5,2}\nP_{1,0}... P_{1,10}\n:\nP_{N,0}... P_{N,10}\n-----Output-----\nPrint the maximum possible profit of Joisino's shop.\n-----Sample Input-----\n1\n1 1 0 1 0 0 0 1 0 1\n3 4 5 6 7 8 9 -2 -3 4 -2\n-----Sample Output-----\n8\nIf her shop is open only during the periods when Shop 1 is opened, the profit will be 8, which is the maximum possible profit.\n\ndef",
        "answer": "def joisino(n,f):\n    if n==1:\n        return f[0]\n    if n==2:\n        return max(f[0],f[1])\n    if n==3:\n        return max(f[0],f[1],f[2])\n    if n==4:\n        return max(f[0],f[1],f[2],f[3])\n    if n==5:\n        return max(f[0],f[1],f[2],f[3],f[4])\n    if n==6:\n        return max(f[0],f[1],f[2],f[3],f[4],f[5])\n    if n==7:\n        return max(f[0],f[1],f[2],f[3],f[4],f[5],f[6])\n    if n==8:\n        return max(f[0],f[1],f[2],f[3],f[4],f[5],f[6],f[7])\n    if n==9:\n        return max(f[0],f[1],f[2],f[3],f[4],f[5],f[6],f[7],f[8])\n    if n==10:\n        return max(f[0],f[1],f[2],f[3],f[4],f[5],f[6],f[7],f[8],f[9])\n    if n==11:\n        return max(f[0],f[1],f[2],f[3],f[4],f[5],f[6],f[7],f[8],f[9],f[10])\n    if n==12:\n        return max(f[0],f[1],f[2],f[3],f[4],f[5],f[6],f[7],f[8],f[9],f[10],f[11])\n    if n==13:\n        return max(f[0],f[1],f[2],f[3],f[4],f[5],f[",
        "difficulty": "introductory"
    },
    {
        "task_id": 4553,
        "prompt": "Complete the Python function given the prompt below:The postal code in Atcoder Kingdom is A+B+1 characters long, its (A+1)-th character is a hyphen -, and the other characters are digits from 0 through 9.\nYou are given a string S. Determine whether it follows the postal code format in Atcoder Kingdom.\n-----Constraints-----\n - 1\u2264A,B\u22645\n - |S|=A+B+1\n - S consists of - and digits from 0 through 9.\n-----Input-----\nInput is given from Standard Input in the following format:\nA B\nS\n-----Output-----\nPrint Yes if S follows the postal code format in AtCoder Kingdom; print No otherwise.\n-----Sample Input-----\n3 4\n269-6650\n-----Sample Output-----\nYes\nThe (A+1)-th character of S is -, and the other characters are digits from 0 through 9, so it follows the format.\n\ndef",
        "answer": "def main():\n    a,b = map(int,input().split())\n    s = input()\n    if s[a] == '-' and s[a+1:a+2].isdigit() and s[a+2:a+3].isdigit():\n        print('Yes')\n    else:\n        print('No')",
        "difficulty": "introductory"
    },
    {
        "task_id": 4554,
        "prompt": "Complete the Python function given the prompt below:AtCoDeer the deer found two rectangles lying on the table, each with height 1 and width W.\nIf we consider the surface of the desk as a two-dimensional plane, the first rectangle covers the vertical range of [0,1] and the horizontal range of [a,a+W], and the second rectangle covers the vertical range of [1,2] and the horizontal range of [b,b+W], as shown in the following figure:\nAtCoDeer will move the second rectangle horizontally so that it connects with the first rectangle.\nFind the minimum distance it needs to be moved.\n-----Constraints-----\n - All input values are integers.\n - 1\u2264W\u226410^5\n - 1\u2264a,b\u226410^5\n-----Input-----\nThe input is given from Standard Input in the following format:\nW a b\n-----Output-----\nPrint the minimum distance the second rectangle needs to be moved.\n-----Sample Input-----\n3 2 6\n-----Sample Output-----\n1\nThis input corresponds to the figure in the statement. In this case, the second rectangle should be moved to the left by a distance of 1.\n\ndef",
        "answer": "def solution(W,a,b):\n    return abs(a-b)",
        "difficulty": "introductory"
    },
    {
        "task_id": 4555,
        "prompt": "Complete the Python function given the prompt below:Print all the integers that satisfies the following in ascending order:\n - Among the integers between A and B (inclusive), it is either within the K smallest integers or within the K largest integers.\n-----Constraints-----\n - 1 \\leq A \\leq B \\leq 10^9\n - 1 \\leq K \\leq 100\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nA B K\n-----Output-----\nPrint all the integers that satisfies the condition above in ascending order.\n-----Sample Input-----\n3 8 2\n-----Sample Output-----\n3\n4\n7\n8\n - 3 is the first smallest integer among the integers between 3 and 8.\n - 4 is the second smallest integer among the integers between 3 and 8.\n - 7 is the second largest integer among the integers between 3 and 8.\n - 8 is the first largest integer among the integers between 3 and 8.\n\ndef",
        "answer": "def solve(A, B, K):\n    pass",
        "difficulty": "introductory"
    },
    {
        "task_id": 4556,
        "prompt": "Complete the Python function given the prompt below:Snuke is going to open a contest named \"AtCoder s Contest\".\nHere, s is a string of length 1 or greater, where the first character is an uppercase English letter, and the second and subsequent characters are lowercase English letters.\nSnuke has decided to abbreviate the name of the contest as \"AxC\".\nHere, x is the uppercase English letter at the beginning of s.\nGiven the name of the contest, print the abbreviation of the name.\n-----Constraints-----\n - The length of s is between 1 and 100, inclusive.\n - The first character in s is an uppercase English letter.\n - The second and subsequent characters in s are lowercase English letters.\n-----Input-----\nThe input is given from Standard Input in the following format:\nAtCoder s Contest\n-----Output-----\nPrint the abbreviation of the name of the contest.\n-----Sample Input-----\nAtCoder Beginner Contest\n-----Sample Output-----\nABC\nThe contest in which you are participating now.\n\ndef",
        "answer": "def main():\n    s = input()\n    print(s[0].upper() + s[1:])",
        "difficulty": "introductory"
    },
    {
        "task_id": 4557,
        "prompt": "Complete the Python function given the prompt below:There are a total of A + B cats and dogs.\nAmong them, A are known to be cats, but the remaining B are not known to be either cats or dogs.\nDetermine if it is possible that there are exactly X cats among these A + B animals.\n-----Constraints-----\n - 1 \\leq A \\leq 100\n - 1 \\leq B \\leq 100\n - 1 \\leq X \\leq 200\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nA B X\n-----Output-----\nIf it is possible that there are exactly X cats, print YES; if it is impossible, print NO.\n-----Sample Input-----\n3 5 4\n-----Sample Output-----\nYES\nIf there are one cat and four dogs among the B = 5 animals, there are X = 4 cats in total.\n\ndef",
        "answer": "def catdog(a, b, x):\n    if a + b == x:\n        return \"YES\"\n    elif a == x or b == x:\n        return \"YES\"\n    elif a + b < x:\n        return \"NO\"\n    else:\n        return \"YES\"",
        "difficulty": "introductory"
    },
    {
        "task_id": 4558,
        "prompt": "Complete the Python function given the prompt below:We have a sandglass that runs for X seconds. The sand drops from the upper bulb at a rate of 1 gram per second. That is, the upper bulb initially contains X grams of sand.\nHow many grams of sand will the upper bulb contains after t seconds?\n-----Constraints-----\n - 1\u2264X\u226410^9\n - 1\u2264t\u226410^9\n - X and t are integers.\n-----Input-----\nThe input is given from Standard Input in the following format:\nX t\n-----Output-----\nPrint the number of sand in the upper bulb after t second.\n-----Sample Input-----\n100 17\n-----Sample Output-----\n83\n17 out of the initial 100 grams of sand will be consumed, resulting in 83 grams.\n\ndef",
        "answer": "def sand_drop(x, t):\n    return x - t * 1",
        "difficulty": "introductory"
    },
    {
        "task_id": 4559,
        "prompt": "Complete the Python function given the prompt below:Given N integers A_1,..., A_N, compute A_1 \\times... \\times A_N.\nHowever, if the result exceeds 10^{18}, print -1 instead.\n-----Constraints-----\n - 2 \\leq N \\leq 10^5\n - 0 \\leq A_i \\leq 10^{18}\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nA_1... A_N\n-----Output-----\nPrint the value A_1 \\times... \\times A_N as an integer, or -1 if the value exceeds 10^{18}.\n-----Sample Input-----\n2\n1000000000 1000000000\n-----Sample Output-----\n1000000000000000000\nWe have 1000000000 \\times 1000000000 = 1000000000000000000.\n\ndef",
        "answer": "def multiply(numbers):\n    result = 1\n    for number in numbers:\n        result *= number\n    if result > 1000000000:\n        return -1\n    return result",
        "difficulty": "introductory"
    },
    {
        "task_id": 4560,
        "prompt": "Complete the Python function given the prompt below:E869120 has A 1-yen coins and infinitely many 500-yen coins.\nDetermine if he can pay exactly N yen using only these coins.\n-----Constraints-----\n - N is an integer between 1 and 10000 (inclusive).\n - A is an integer between 0 and 1000 (inclusive).\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nA\n-----Output-----\nIf E869120 can pay exactly N yen using only his 1-yen and 500-yen coins, print Yes; otherwise, print No.\n-----Sample Input-----\n2018\n218\n-----Sample Output-----\nYes\nWe can pay 2018 yen with four 500-yen coins and 18 1-yen coins, so the answer is Yes.\n\ndef",
        "answer": "def solve(N, A):\n    if N == 0:\n        return \"Yes\"\n    if N < 0:\n        return \"No\"\n    if A == 0:\n        return \"No\"\n    if A < 0:\n        return \"No\"\n    if N == 1:\n        return \"Yes\"\n    if N == 2:\n        return \"Yes\"\n    if N == 3:\n        return \"Yes\"\n    if N == 4:\n        return \"Yes\"\n    if N == 5:\n        return \"Yes\"\n    if N == 6:\n        return \"Yes\"\n    if N == 7:\n        return \"Yes\"\n    if N == 8:\n        return \"Yes\"\n    if N == 9:\n        return \"Yes\"\n    if N == 10:\n        return \"Yes\"\n    if N == 11:\n        return \"Yes\"\n    if N == 12:\n        return \"Yes\"\n    if N == 13:\n        return \"Yes\"\n    if N == 14:\n        return \"Yes\"\n    if N == 15:\n        return \"Yes\"\n    if N == 16:\n        return \"Yes\"\n    if N == 17:\n        return \"Yes\"\n    if N == 18:\n        return \"Yes\"\n    if N == 19:\n        return \"Yes\"\n    if N == 20:\n        return \"Yes\"\n    if N == 21:\n        return \"Yes\"\n    if N == 22:\n        return \"Yes\"\n    if N == 23:\n        return \"Yes\"\n    if N == 24:\n        return \"Yes\"\n    if N == 25:\n        return \"Yes\"\n    if N == 26:\n        return \"Yes\"\n    if N == 27:\n        return \"Yes\"\n    if N == 28:\n        return \"Yes\"\n    if N == 29:\n        return \"Yes\"\n    if N == 30:\n        return \"Yes\"\n    if N == 31:\n        return \"Yes\"\n    if N == 32:\n        return \"Yes\"\n    if N == 33:\n        return \"Yes\"\n    if N == 34:\n        return \"Yes\"",
        "difficulty": "introductory"
    },
    {
        "task_id": 4561,
        "prompt": "Complete the Python function given the prompt below:Takahashi has a strong stomach. He never gets a stomachache from eating something whose \"best-by\" date is at most X days earlier.\nHe gets a stomachache if the \"best-by\" date of the food is X+1 or more days earlier, though.\nOther than that, he finds the food delicious if he eats it not later than the \"best-by\" date. Otherwise, he does not find it delicious.\nTakahashi bought some food A days before the \"best-by\" date, and ate it B days after he bought it.\nWrite a program that outputs delicious if he found it delicious, safe if he did not found it delicious but did not get a stomachache either, and dangerous if he got a stomachache.\n-----Constraints-----\n - 1 \u2264 X,A,B \u2264 10^9\n-----Input-----\nInput is given from Standard Input in the following format:\nX A B\n-----Output-----\nPrint delicious if Takahashi found the food delicious; print safe if he neither found it delicious nor got a stomachache; print dangerous if he got a stomachache.\n-----Sample Input-----\n4 3 6\n-----Sample Output-----\nsafe\nHe ate the food three days after the \"best-by\" date. It was not delicious or harmful for him.\n\ndef",
        "answer": "def takahashi(x, a, b):\n    if a <= x <= b + 1:\n        return \"delicious\"\n    elif a > x:\n        return \"safe\"\n    else:\n        return \"dangerous\"",
        "difficulty": "introductory"
    },
    {
        "task_id": 4562,
        "prompt": "Complete the Python function given the prompt below:Find the largest square number not exceeding N. Here, a square number is an integer that can be represented as the square of an integer.\n-----Constraints-----\n - 1 \\leq N \\leq 10^9\n - N is an integer.\n-----Input-----\nInput is given from Standard Input in the following format:\nN\n-----Output-----\nPrint the largest square number not exceeding N.\n-----Sample Input-----\n10\n-----Sample Output-----\n9\n10 is not square, but 9 = 3 \u00d7 3 is. Thus, we print 9.\n\ndef",
        "answer": "def solve(n):\n    i = 1\n    while i * i <= n:\n        i += 1\n    return i - 1",
        "difficulty": "introductory"
    },
    {
        "task_id": 4563,
        "prompt": "Complete the Python function given the prompt below:AtCoDeer the deer is seeing a quick report of election results on TV.\nTwo candidates are standing for the election: Takahashi and Aoki.\nThe report shows the ratio of the current numbers of votes the two candidates have obtained, but not the actual numbers of votes.\nAtCoDeer has checked the report N times, and when he checked it for the i-th (1\u2266i\u2266N) time, the ratio was T_i:A_i.\nIt is known that each candidate had at least one vote when he checked the report for the first time.\nFind the minimum possible total number of votes obtained by the two candidates when he checked the report for the N-th time.\nIt can be assumed that the number of votes obtained by each candidate never decreases.\n-----Constraints-----\n - 1\u2266N\u22661000\n - 1\u2266T_i,A_i\u22661000 (1\u2266i\u2266N)\n - T_i and A_i (1\u2266i\u2266N) are coprime.\n - It is guaranteed that the correct answer is at most 10^{18}.\n-----Input-----\nThe input is given from Standard Input in the following format:\nN\nT_1 A_1\nT_2 A_2\n:\nT_N A_N\n-----Output-----\nPrint the minimum possible total number of votes obtained by Takahashi and Aoki when AtCoDeer checked the report for the N-th time.\n-----Sample Input-----\n3\n2 3\n1 1\n3 2\n-----Sample Output-----\n10\nWhen the numbers of votes obtained by the two candidates change as 2,3 \u2192 3,3 \u2192 6,4, the total number of votes at the end is 10, which is the minimum possible number.\n\ndef",
        "answer": "def solve():\n    n = int(input())\n    takahashi = 0\n    aoki = 0\n    for _ in range(n):\n        t, a = map(int, input().split())\n        takahashi += t\n        aoki += a\n    print(min(takahashi, aoki))",
        "difficulty": "introductory"
    },
    {
        "task_id": 4564,
        "prompt": "Complete the Python function given the prompt below:You are given a string S consisting of lowercase English letters. Determine whether all the characters in S are different.\n-----Constraints-----\n - 2 \u2264 |S| \u2264 26, where |S| denotes the length of S.\n - S consists of lowercase English letters.\n-----Input-----\nInput is given from Standard Input in the following format:\nS\n-----Output-----\nIf all the characters in S are different, print yes (case-sensitive); otherwise, print no.\n-----Sample Input-----\nuncopyrightable\n-----Sample Output-----\nyes\n\n\ndef",
        "answer": "def isUnique(s):\n    return len(s) == len(set(s))",
        "difficulty": "introductory"
    },
    {
        "task_id": 4565,
        "prompt": "Complete the Python function given the prompt below:There are N people standing in a row from west to east.\nEach person is facing east or west.\nThe directions of the people is given as a string S of length N.\nThe i-th person from the west is facing east if S_i = E, and west if S_i = W.\nYou will appoint one of the N people as the leader, then command the rest of them to face in the direction of the leader.\nHere, we do not care which direction the leader is facing.\nThe people in the row hate to change their directions, so you would like to select the leader so that the number of people who have to change their directions is minimized.\nFind the minimum number of people who have to change their directions.\n-----Constraints-----\n - 2 \\leq N \\leq 3 \\times 10^5\n - |S| = N\n - S_i is E or W.\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nS\n-----Output-----\nPrint the minimum number of people who have to change their directions.\n-----Sample Input-----\n5\nWEEWW\n-----Sample Output-----\n1\nAssume that we appoint the third person from the west as the leader.\nThen, the first person from the west needs to face east and has to turn around.\nThe other people do not need to change their directions, so the number of people who have to change their directions is 1 in this case.\nIt is not possible to have 0 people who have to change their directions, so the answer is 1.\n\ndef",
        "answer": "def solve(s):\n    return min(s.count('E'), s.count('W'))",
        "difficulty": "introductory"
    },
    {
        "task_id": 4566,
        "prompt": "Complete the Python function given the prompt below:There are N cities and M roads.\nThe i-th road (1\u2264i\u2264M) connects two cities a_i and b_i (1\u2264a_i,b_i\u2264N) bidirectionally.\nThere may be more than one road that connects the same pair of two cities.\nFor each city, how many roads are connected to the city?\n-----Constraints-----\n - 2\u2264N,M\u226450\n - 1\u2264a_i,b_i\u2264N\n - a_i \u2260 b_i\n - All input values are integers.\n-----Input-----\nInput is given from Standard Input in the following format:  \nN M\na_1 b_1\n:  \na_M b_M\n-----Output-----\nPrint the answer in N lines.\nIn the i-th line (1\u2264i\u2264N), print the number of roads connected to city i.\n-----Sample Input-----\n4 3\n1 2\n2 3\n1 4\n-----Sample Output-----\n2\n2\n1\n1\n - City 1 is connected to the 1-st and 3-rd roads.\n - City 2 is connected to the 1-st and 2-nd roads.\n - City 3 is connected to the 2-nd road.\n - City 4 is connected to the 3-rd road.\n\ndef",
        "answer": "def roads(n, m, a, b):\n    roads = 0\n    for i in range(m):\n        if a[i] == b[i]:\n            continue\n        roads += 1\n    return roads",
        "difficulty": "introductory"
    },
    {
        "task_id": 4567,
        "prompt": "Complete the Python function given the prompt below:You are taking a computer-based examination. The examination consists of N questions, and the score allocated to the i-th question is s_i. Your answer to each question will be judged as either \"correct\" or \"incorrect\", and your grade will be the sum of the points allocated to questions that are answered correctly. When you finish answering the questions, your answers will be immediately judged and your grade will be displayed... if everything goes well.\nHowever, the examination system is actually flawed, and if your grade is a multiple of 10, the system displays 0 as your grade. Otherwise, your grade is displayed correctly. In this situation, what is the maximum value that can be displayed as your grade?\n-----Constraints-----\n - All input values are integers.\n - 1 \u2264 N \u2264 100\n - 1 \u2264 s_i \u2264 100\n-----Input-----\nInput is given from Standard Input in the following format:\nN\ns_1\ns_2\n:\ns_N\n-----Output-----\nPrint the maximum value that can be displayed as your grade.\n-----Sample Input-----\n3\n5\n10\n15\n-----Sample Output-----\n25\nYour grade will be 25 if the 10-point and 15-point questions are answered correctly and the 5-point question is not, and this grade will be displayed correctly. Your grade will become 30 if the 5-point question is also answered correctly, but this grade will be incorrectly displayed as 0.\n\ndef",
        "answer": "def exam_grade(score):\n    if score % 10 == 0:\n        return 0\n    else:\n        return score",
        "difficulty": "introductory"
    },
    {
        "task_id": 4568,
        "prompt": "Complete the Python function given the prompt below:You are given a string S of length N consisting of lowercase English letters.\nWe will cut this string at one position into two strings X and Y.\nHere, we would like to maximize the number of different letters contained in both X and Y.\nFind the largest possible number of different letters contained in both X and Y when we cut the string at the optimal position.\n-----Constraints-----\n - 2 \\leq N \\leq 100\n - |S| = N\n - S consists of lowercase English letters.\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nS\n-----Output-----\nPrint the largest possible number of different letters contained in both X and Y.\n-----Sample Input-----\n6\naabbca\n-----Sample Output-----\n2\nIf we cut the string between the third and fourth letters into X = aab and Y = bca, the letters contained in both X and Y are a and b.\nThere will never be three or more different letters contained in both X and Y, so the answer is 2.\n\ndef",
        "answer": "def solve(S):\n    # Write your code here\n    pass",
        "difficulty": "introductory"
    },
    {
        "task_id": 4569,
        "prompt": "Complete the Python function given the prompt below:The weather in Takahashi's town changes day by day, in the following cycle: Sunny, Cloudy, Rainy, Sunny, Cloudy, Rainy,...\nGiven is a string S representing the weather in the town today. Predict the weather tomorrow.\n-----Constraints-----\n - S is Sunny, Cloudy, or Rainy.\n-----Input-----\nInput is given from Standard Input in the following format:\nS\n-----Output-----\nPrint a string representing the expected weather tomorrow, in the same format in which input is given.\n-----Sample Input-----\nSunny\n-----Sample Output-----\nCloudy\nIn Takahashi's town, a sunny day is followed by a cloudy day.\n\ndef",
        "answer": "def weather(s):\n    if s == 'Sunny':\n        return 'Cloudy'\n    elif s == 'Cloudy':\n        return 'Rainy'\n    elif s == 'Rainy':\n        return 'Sunny'",
        "difficulty": "introductory"
    },
    {
        "task_id": 4570,
        "prompt": "Complete the Python function given the prompt below:You are parking at a parking lot. You can choose from the following two fee plans:\n - Plan 1: The fee will be A\u00d7T yen (the currency of Japan) when you park for T hours.\n - Plan 2: The fee will be B yen, regardless of the duration.\nFind the minimum fee when you park for N hours.\n-----Constraints-----\n - 1\u2264N\u226420\n - 1\u2264A\u2264100\n - 1\u2264B\u22642000\n - All input values are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN A B\n-----Output-----\nWhen the minimum fee is x yen, print the value of x.\n-----Sample Input-----\n7 17 120\n-----Sample Output-----\n119\n - If you choose Plan 1, the fee will be 7\u00d717=119 yen.\n - If you choose Plan 2, the fee will be 120 yen.\nThus, the minimum fee is 119 yen.\n\ndef",
        "answer": "def solve(a,b,n):\n    return a*n+b*(n-1)",
        "difficulty": "introductory"
    },
    {
        "task_id": 4571,
        "prompt": "Complete the Python function given the prompt below:Takahashi is now competing in a programming contest, but he received TLE in a problem where the answer is YES or NO.\nWhen he checked the detailed status of the submission, there were N test cases in the problem, and the code received TLE in M of those cases.\nThen, he rewrote the code to correctly solve each of those M cases with 1/2 probability in 1900 milliseconds, and correctly solve each of the other N-M cases without fail in 100 milliseconds.\nNow, he goes through the following process:\n - Submit the code.\n - Wait until the code finishes execution on all the cases.\n - If the code fails to correctly solve some of the M cases, submit it again.\n - Repeat until the code correctly solve all the cases in one submission.\nLet the expected value of the total execution time of the code be X milliseconds. Print X (as an integer).\n-----Constraints-----\n - All input values are integers.\n - 1 \\leq N \\leq 100\n - 1 \\leq M \\leq {\\rm min}(N, 5)\n-----Input-----\nInput is given from Standard Input in the following format:\nN M\n-----Output-----\nPrint X, the expected value of the total execution time of the code, as an integer. It can be proved that, under the constraints in this problem, X is an integer not exceeding 10^9.\n-----Sample Input-----\n1 1\n-----Sample Output-----\n3800\nIn this input, there is only one case. Takahashi will repeatedly submit the code that correctly solves this case with 1/2 probability in 1900 milliseconds.\nThe code will succeed in one attempt with 1/2 probability, in two attempts with 1/4 probability, and in three attempts with 1/8 probability, and so on.\nThus, the answer is 1900 \\times 1/2 + (2 \\times 1900) \\times 1/4 + (3 \\times 1900) \\times 1/8 +... = 3800.\n\ndef",
        "answer": "def main():\n    N, M = map(int, input().split())\n    if M == 1:\n        print(1900)\n    else:\n        print(1900 * (M - 1) + (2 * 1900) * (M - 2) + (3 * 1900) * (M - 3) +...)",
        "difficulty": "introductory"
    },
    {
        "task_id": 4572,
        "prompt": "Complete the Python function given the prompt below:You are given a string S consisting of lowercase English letters.\nFind the lexicographically (alphabetically) smallest lowercase English letter that does not occur in S.\nIf every lowercase English letter occurs in S, print None instead.\n-----Constraints-----\n - 1 \\leq |S| \\leq 10^5 (|S| is the length of string S.)\n - S consists of lowercase English letters.\n-----Input-----\nInput is given from Standard Input in the following format:\nS\n-----Output-----\nPrint the lexicographically smallest lowercase English letter that does not occur in S.\nIf every lowercase English letter occurs in S, print None instead.\n-----Sample Input-----\natcoderregularcontest\n-----Sample Output-----\nb\nThe string atcoderregularcontest contains a, but does not contain b.\n\ndef",
        "answer": "def solve(s):\n    for i in range(97, 123):\n        if chr(i) not in s:\n            return chr(i)\n    return None",
        "difficulty": "introductory"
    },
    {
        "task_id": 4573,
        "prompt": "Complete the Python function given the prompt below:When l is an odd number, the median of l numbers a_1, a_2,..., a_l is the (\\frac{l+1}{2})-th largest value among a_1, a_2,..., a_l.\nYou are given N numbers X_1, X_2,..., X_N, where N is an even number.\nFor each i = 1, 2,..., N, let the median of X_1, X_2,..., X_N excluding X_i, that is, the median of X_1, X_2,..., X_{i-1}, X_{i+1},..., X_N be B_i.\nFind B_i for each i = 1, 2,..., N.\n-----Constraints-----\n - 2 \\leq N \\leq 200000\n - N is even.\n - 1 \\leq X_i \\leq 10^9\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nX_1 X_2... X_N\n-----Output-----\nPrint N lines.\nThe i-th line should contain B_i.\n-----Sample Input-----\n4\n2 4 4 3\n-----Sample Output-----\n4\n3\n3\n4\n - Since the median of X_2, X_3, X_4 is 4, B_1 = 4.\n - Since the median of X_1, X_3, X_4 is 3, B_2 = 3.\n - Since the median of X_1, X_2, X_4 is 3, B_3 = 3.\n - Since the median of X_1, X_2, X_3 is 4, B_4 = 4.\n\ndef",
        "answer": "def median(l):\n    l.sort()\n    return l[len(l)//2]",
        "difficulty": "introductory"
    },
    {
        "task_id": 4574,
        "prompt": "Complete the Python function given the prompt below:We have N sticks with negligible thickness.\nThe length of the i-th stick is A_i.\nSnuke wants to select four different sticks from these sticks and form a rectangle (including a square), using the sticks as its sides.\nFind the maximum possible area of the rectangle.\n-----Constraints-----\n - 4 \\leq N \\leq 10^5\n - 1 \\leq A_i \\leq 10^9\n - A_i is an integer.\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nA_1 A_2... A_N\n-----Output-----\nPrint the maximum possible area of the rectangle.\nIf no rectangle can be formed, print 0.\n-----Sample Input-----\n6\n3 1 2 4 2 1\n-----Sample Output-----\n2\n1 \\times 2 rectangle can be formed.\n\ndef",
        "answer": "def maxArea(arr):\n    n = len(arr)\n    arr.sort()\n    max_area = 0\n    for i in range(n-3):\n        max_area = max(max_area, arr[i]*arr[i+1]*arr[i+2]*arr[i+3])\n    return max_area",
        "difficulty": "introductory"
    },
    {
        "task_id": 4575,
        "prompt": "Complete the Python function given the prompt below:Some number of chocolate pieces were prepared for a training camp.\nThe camp had N participants and lasted for D days.\nThe i-th participant (1 \\leq i \\leq N) ate one chocolate piece on each of the following days in the camp: the 1-st day, the (A_i + 1)-th day, the (2A_i + 1)-th day, and so on.\nAs a result, there were X chocolate pieces remaining at the end of the camp. During the camp, nobody except the participants ate chocolate pieces.\nFind the number of chocolate pieces prepared at the beginning of the camp.\n-----Constraints-----\n - 1 \\leq N \\leq 100\n - 1 \\leq D \\leq 100\n - 1 \\leq X \\leq 100\n - 1 \\leq A_i \\leq 100 (1 \\leq i \\leq N)\n - All input values are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nD X\nA_1\nA_2\n:\nA_N\n-----Output-----\nFind the number of chocolate pieces prepared at the beginning of the camp.\n-----Sample Input-----\n3\n7 1\n2\n5\n10\n-----Sample Output-----\n8\nThe camp has 3 participants and lasts for 7 days.\nEach participant eats chocolate pieces as follows:\n - The first participant eats one chocolate piece on Day 1, 3, 5 and 7, for a total of four.\n - The second participant eats one chocolate piece on Day 1 and 6, for a total of two.\n - The third participant eats one chocolate piece only on Day 1, for a total of one.\nSince the number of pieces remaining at the end of the camp is one, the number of pieces prepared at the beginning of the camp is 1 + 4 + 2 + 1 = 8.\n\ndef",
        "answer": "def chocolate_pieces(N, D, X):\n    return X - (N - 1) * D",
        "difficulty": "introductory"
    },
    {
        "task_id": 4576,
        "prompt": "Complete the Python function given the prompt below:You have A 500-yen coins, B 100-yen coins and C 50-yen coins (yen is the currency of Japan).\nIn how many ways can we select some of these coins so that they are X yen in total?\nCoins of the same kind cannot be distinguished. Two ways to select coins are distinguished when, for some kind of coin, the numbers of that coin are different.\n-----Constraints-----\n - 0 \\leq A, B, C \\leq 50\n - A + B + C \\geq 1\n - 50 \\leq X \\leq 20 000\n - A, B and C are integers.\n - X is a multiple of 50.\n-----Input-----\nInput is given from Standard Input in the following format:\nA\nB\nC\nX\n-----Output-----\nPrint the number of ways to select coins.\n-----Sample Input-----\n2\n2\n2\n100\n-----Sample Output-----\n2\nThere are two ways to satisfy the condition:\n - Select zero 500-yen coins, one 100-yen coin and zero 50-yen coins.\n - Select zero 500-yen coins, zero 100-yen coins and two 50-yen coins.\n\ndef",
        "answer": "def solve(A, B, C, X):\n    # Complete this function\n    pass",
        "difficulty": "introductory"
    },
    {
        "task_id": 4577,
        "prompt": "Complete the Python function given the prompt below:You are given three integers A, B and C.\nDetermine whether C is not less than A and not greater than B.\n-----Constraints-----\n - -100\u2264A,B,C\u2264100 \n - A, B and C are all integers.\n-----Input-----\nInput is given from Standard Input in the following format:  \nA B C\n-----Output-----\nIf the condition is satisfied, print Yes; otherwise, print No.\n-----Sample Input-----\n1 3 2\n-----Sample Output-----\nYes\nC=2 is not less than A=1 and not greater than B=3, and thus the output should be Yes.\n\ndef",
        "answer": "def solve(a,b,c):\n    if c<a and c>b:\n        print \"Yes\"\n    else:\n        print \"No\"",
        "difficulty": "introductory"
    },
    {
        "task_id": 4578,
        "prompt": "Complete the Python function given the prompt below:Akaki, a patissier, can make N kinds of doughnut using only a certain powder called \"Okashi no Moto\" (literally \"material of pastry\", simply called Moto below) as ingredient. These doughnuts are called Doughnut 1, Doughnut 2,..., Doughnut N. In order to make one Doughnut i (1 \u2264 i \u2264 N), she needs to consume m_i grams of Moto. She cannot make a non-integer number of doughnuts, such as 0.5 doughnuts.\nNow, she has X grams of Moto. She decides to make as many doughnuts as possible for a party tonight. However, since the tastes of the guests differ, she will obey the following condition:\n - For each of the N kinds of doughnuts, make at least one doughnut of that kind.\nAt most how many doughnuts can be made here? She does not necessarily need to consume all of her Moto. Also, under the constraints of this problem, it is always possible to obey the condition.\n-----Constraints-----\n - 2 \u2264 N \u2264 100\n - 1 \u2264 m_i \u2264 1000\n - m_1 + m_2 +... + m_N \u2264 X \u2264 10^5\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN X\nm_1\nm_2\n:\nm_N\n-----Output-----\nPrint the maximum number of doughnuts that can be made under the condition.\n-----Sample Input-----\n3 1000\n120\n100\n140\n-----Sample Output-----\n9\nShe has 1000 grams of Moto and can make three kinds of doughnuts. If she makes one doughnut for each of the three kinds, she consumes 120 + 100 + 140 = 360 grams of Moto. From the 640 grams of Moto that remains here, she can make additional six Doughnuts 2. This is how she can made a total of nine doughnuts, which is the maximum.\n\ndef",
        "answer": "def solve(N, X):\n    return int(ceil(X / N))\nif __name__ == '__main__':\n    N, X = map(int, input().split())\n    print(solve(N, X))\n",
        "difficulty": "introductory"
    },
    {
        "task_id": 4579,
        "prompt": "Complete the Python function given the prompt below:You drew lottery N times. In the i-th draw, you got an item of the kind represented by a string S_i.\nHow many kinds of items did you get?\n-----Constraints-----\n - 1 \\leq N \\leq 2\\times 10^5\n - S_i consists of lowercase English letters and has a length between 1 and 10 (inclusive).\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nS_1\n:\nS_N\n-----Output-----\nPrint the number of kinds of items you got.\n-----Sample Input-----\n3\napple\norange\napple\n-----Sample Output-----\n2\nYou got two kinds of items: apple and orange.\n\ndef",
        "answer": "def count_items(n, s):\n    return len(set(s))",
        "difficulty": "introductory"
    },
    {
        "task_id": 4580,
        "prompt": "Complete the Python function given the prompt below:In AtCoder, a person who has participated in a contest receives a color, which corresponds to the person's rating as follows:  \n - Rating 1-399 : gray\n - Rating 400-799 : brown\n - Rating 800-1199 : green\n - Rating 1200-1599 : cyan\n - Rating 1600-1999 : blue\n - Rating 2000-2399 : yellow\n - Rating 2400-2799 : orange\n - Rating 2800-3199 : red\nOther than the above, a person whose rating is 3200 or higher can freely pick his/her color, which can be one of the eight colors above or not.\nCurrently, there are N users who have participated in a contest in AtCoder, and the i-th user has a rating of a_i.\nFind the minimum and maximum possible numbers of different colors of the users.  \n-----Constraints-----\n - 1 \u2264 N \u2264 100\n - 1 \u2264 a_i \u2264 4800\n - a_i is an integer.\n-----Input-----\nInput is given from Standard Input in the following format:\nN\na_1 a_2... a_N\n-----Output-----\nPrint the minimum possible number of different colors of the users, and the maximum possible number of different colors, with a space in between.  \n-----Sample Input-----\n4\n2100 2500 2700 2700\n-----Sample Output-----\n2 2\nThe user with rating 2100 is \"yellow\", and the others are \"orange\". There are two different colors.\n\ndef",
        "answer": "def main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(min(a), max(a))",
        "difficulty": "introductory"
    },
    {
        "task_id": 4581,
        "prompt": "Complete the Python function given the prompt below:In \"Takahashi-ya\", a ramen restaurant, a bowl of ramen costs 700 yen (the currency of Japan), plus 100 yen for each kind of topping (boiled egg, sliced pork, green onions).\nA customer ordered a bowl of ramen and told which toppings to put on his ramen to a clerk. The clerk took a memo of the order as a string S. S is three characters long, and if the first character in S is o, it means the ramen should be topped with boiled egg; if that character is x, it means the ramen should not be topped with boiled egg. Similarly, the second and third characters in S mean the presence or absence of sliced pork and green onions on top of the ramen.\nWrite a program that, when S is given, prints the price of the corresponding bowl of ramen.\n-----Constraints-----\n - S is a string of length 3.\n - Each character in S is o or x.\n-----Input-----\nInput is given from Standard Input in the following format:\nS\n-----Output-----\nPrint the price of the bowl of ramen corresponding to S.\n-----Sample Input-----\noxo\n-----Sample Output-----\n900\nThe price of a ramen topped with two kinds of toppings, boiled egg and green onions, is 700 + 100 \\times 2 = 900 yen.\n\ndef",
        "answer": "def solve(s):\n    if s[0] == 'o':\n        return 700\n    elif s[0] == 'x':\n        return 0\n    elif s[1] == 'o':\n        return 700 + 100\n    elif s[1] == 'x':\n        return 0\n    elif s[2] == 'o':\n        return 700 + 100 + 200\n    elif s[2] == 'x':\n        return 0",
        "difficulty": "introductory"
    },
    {
        "task_id": 4582,
        "prompt": "Complete the Python function given the prompt below:Two deer, AtCoDeer and TopCoDeer, are playing a game called Honest or Dishonest.\nIn this game, an honest player always tells the truth, and an dishonest player always tell lies.\nYou are given two characters a and b as the input. Each of them is either H or D, and carries the following information:\nIf a=H, AtCoDeer is honest; if a=D, AtCoDeer is dishonest.\nIf b=H, AtCoDeer is saying that TopCoDeer is honest; if b=D, AtCoDeer is saying that TopCoDeer is dishonest.\nGiven this information, determine whether TopCoDeer is honest.\n-----Constraints-----\n - a=H or a=D.\n - b=H or b=D.\n-----Input-----\nThe input is given from Standard Input in the following format:\na b\n-----Output-----\nIf TopCoDeer is honest, print H. If he is dishonest, print D.\n-----Sample Input-----\nH H\n-----Sample Output-----\nH\nIn this input, AtCoDeer is honest. Hence, as he says, TopCoDeer is honest.\n\ndef",
        "answer": "def HonestOrDishonest(a,b):\n    if a=='H' and b=='H':\n        print('H')\n    elif a=='H' and b=='D':\n        print('D')\n    elif a=='D' and b=='H':\n        print('D')\n    elif a=='D' and b=='D':\n        print('H')",
        "difficulty": "introductory"
    },
    {
        "task_id": 4583,
        "prompt": "Complete the Python function given the prompt below:Sitting in a station waiting room, Joisino is gazing at her train ticket.\nThe ticket is numbered with four digits A, B, C and D in this order, each between 0 and 9 (inclusive).\nIn the formula A op1 B op2 C op3 D = 7, replace each of the symbols op1, op2 and op3 with + or - so that the formula holds.\nThe given input guarantees that there is a solution. If there are multiple solutions, any of them will be accepted.\n-----Constraints-----\n - 0\u2264A,B,C,D\u22649\n - All input values are integers.\n - It is guaranteed that there is a solution.\n-----Input-----\nInput is given from Standard Input in the following format:\nABCD\n-----Output-----\nPrint the formula you made, including the part =7.\nUse the signs + and -.\nDo not print a space between a digit and a sign.\n-----Sample Input-----\n1222\n-----Sample Output-----\n1+2+2+2=7\nThis is the only valid solution.\n\ndef",
        "answer": "def solve(a, b, c, d):\n    return '{}+{}+{}+{}={}'.format(a, b, c, d, a+b+c+d)",
        "difficulty": "introductory"
    },
    {
        "task_id": 4584,
        "prompt": "Complete the Python function given the prompt below:A company has N members, who are assigned ID numbers 1,..., N.\nEvery member, except the member numbered 1, has exactly one immediate boss with a smaller ID number.\nWhen a person X is the immediate boss of a person Y, the person Y is said to be an immediate subordinate of the person X.\nYou are given the information that the immediate boss of the member numbered i is the member numbered A_i. For each member, find how many immediate subordinates it has.\n-----Constraints-----\n - 2 \\leq N \\leq 2 \\times 10^5\n - 1 \\leq A_i < i\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nA_2... A_N\n-----Output-----\nFor each of the members numbered 1, 2,..., N, print the number of immediate subordinates it has, in its own line.\n-----Sample Input-----\n5\n1 1 2 2\n-----Sample Output-----\n2\n2\n0\n0\n0\nThe member numbered 1 has two immediate subordinates: the members numbered 2 and 3.\nThe member numbered 2 has two immediate subordinates: the members numbered 4 and 5.\nThe members numbered 3, 4, and 5 do not have immediate subordinates.\n\ndef",
        "answer": "def get_immediate_subordinates(n, a):\n    # Write your code here\n    pass",
        "difficulty": "introductory"
    },
    {
        "task_id": 4585,
        "prompt": "Complete the Python function given the prompt below:There is a kangaroo at coordinate 0 on an infinite number line that runs from left to right, at time 0.\nDuring the period between time i-1 and time i, the kangaroo can either stay at his position, or perform a jump of length exactly i to the left or to the right.\nThat is, if his coordinate at time i-1 is x, he can be at coordinate x-i, x or x+i at time i.\nThe kangaroo's nest is at coordinate X, and he wants to travel to coordinate X as fast as possible.\nFind the earliest possible time to reach coordinate X.\n-----Constraints-----\n - X is an integer.\n - 1\u2264X\u226410^9\n-----Input-----\nThe input is given from Standard Input in the following format:\nX\n-----Output-----\nPrint the earliest possible time for the kangaroo to reach coordinate X.\n-----Sample Input-----\n6\n-----Sample Output-----\n3\nThe kangaroo can reach his nest at time 3 by jumping to the right three times, which is the earliest possible time.\n\ndef",
        "answer": "def kangaroo(x1, v1, x2, v2):\n    if x1 < x2 and v1 < v2:\n        return \"NO\"\n    elif x1 > x2 and v1 > v2:\n        return \"NO\"\n    else:\n        while x1!= x2:\n            x1 += v1\n            x2 += v2\n        return \"YES\"",
        "difficulty": "introductory"
    },
    {
        "task_id": 4586,
        "prompt": "Complete the Python function given the prompt below:We call a 4-digit integer with three or more consecutive same digits, such as 1118, good.\nYou are given a 4-digit integer N. Answer the question: Is N good?\n-----Constraints-----\n - 1000 \u2264 N \u2264 9999\n - N is an integer.\n-----Input-----\nInput is given from Standard Input in the following format:\nN\n-----Output-----\nIf N is good, print Yes; otherwise, print No.\n-----Sample Input-----\n1118\n-----Sample Output-----\nYes\nN is good, since it contains three consecutive 1.\n\ndef",
        "answer": "def is_good(n):\n    n = str(n)\n    for i in range(len(n)-2):\n        if n[i] == n[i+1] == n[i+2]:\n            return True\n    return False",
        "difficulty": "introductory"
    },
    {
        "task_id": 4587,
        "prompt": "Complete the Python function given the prompt below:The season for Snuke Festival has come again this year. First of all, Ringo will perform a ritual to summon Snuke. For the ritual, he needs an altar, which consists of three parts, one in each of the three categories: upper, middle and lower.\nHe has N parts for each of the three categories. The size of the i-th upper part is A_i, the size of the i-th middle part is B_i, and the size of the i-th lower part is C_i.\nTo build an altar, the size of the middle part must be strictly greater than that of the upper part, and the size of the lower part must be strictly greater than that of the middle part. On the other hand, any three parts that satisfy these conditions can be combined to form an altar.\nHow many different altars can Ringo build? Here, two altars are considered different when at least one of the three parts used is different.\n-----Constraints-----\n - 1 \\leq N \\leq 10^5\n - 1 \\leq A_i \\leq 10^9(1\\leq i\\leq N)\n - 1 \\leq B_i \\leq 10^9(1\\leq i\\leq N)\n - 1 \\leq C_i \\leq 10^9(1\\leq i\\leq N)\n - All input values are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nA_1... A_N\nB_1... B_N\nC_1... C_N\n-----Output-----\nPrint the number of different altars that Ringo can build.\n-----Sample Input-----\n2\n1 5\n2 4\n3 6\n-----Sample Output-----\n3\nThe following three altars can be built:\n - Upper: 1-st part, Middle: 1-st part, Lower: 1-st part\n - Upper: 1-st part, Middle: 1-st part, Lower: 2-nd part\n - Upper: 1-st part, Middle: 2-nd part, Lower: 2-nd part\n\ndef",
        "answer": "def count_altars(n, a, b, c):\n    count = 0\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                if a[i] < b[j] and b[j] < c[k] and a[i] < c[k]:\n                    count += 1\n    return count",
        "difficulty": "introductory"
    },
    {
        "task_id": 4588,
        "prompt": "Complete the Python function given the prompt below:In programming, hexadecimal notation is often used.\nIn hexadecimal notation, besides the ten digits 0, 1,..., 9, the six letters A, B, C, D, E and F are used to represent the values 10, 11, 12, 13, 14 and 15, respectively.\nIn this problem, you are given two letters X and Y. Each X and Y is A, B, C, D, E or F.\nWhen X and Y are seen as hexadecimal numbers, which is larger?\n-----Constraints-----\n - Each X and Y is A, B, C, D, E or F.\n-----Input-----\nInput is given from Standard Input in the following format:\nX Y\n-----Output-----\nIf X is smaller, print <; if Y is smaller, print >; if they are equal, print =.\n-----Sample Input-----\nA B\n-----Sample Output-----\n<\n10 < 11.\n\ndef",
        "answer": "def hex_compare(x, y):\n    if x == y:\n        return '='\n    elif x > y:\n        return '>'\n    else:\n        return '<'",
        "difficulty": "introductory"
    },
    {
        "task_id": 4589,
        "prompt": "Complete the Python function given the prompt below:You are given an H \u00d7 W grid.\nThe squares in the grid are described by H strings, S_1,...,S_H.\nThe j-th character in the string S_i corresponds to the square at the i-th row from the top and j-th column from the left (1 \\leq i \\leq H,1 \\leq j \\leq W).\n. stands for an empty square, and # stands for a square containing a bomb.  \nDolphin is interested in how many bomb squares are horizontally, vertically or diagonally adjacent to each empty square.\n(Below, we will simply say \"adjacent\" for this meaning. For each square, there are at most eight adjacent squares.)\nHe decides to replace each. in our H strings with a digit that represents the number of bomb squares adjacent to the corresponding empty square.  \nPrint the strings after the process.  \n-----Constraints-----\n - 1 \\leq H,W \\leq 50\n - S_i is a string of length W consisting of # and..\n-----Input-----\nInput is given from Standard Input in the following format:  \nH W\nS_1\n:\nS_H\n-----Output-----\nPrint the H strings after the process.\nThe i-th line should contain a string T_i of length W, where the j-th character in T_i corresponds to the square at the i-th row from the top and j-th row from the left in the grid (1 \\leq i \\leq H, 1 \\leq j \\leq W).  \n-----Sample Input-----\n3 5\n.....\n.#.#.\n.....\n-----Sample Output-----\n11211\n1#2#1\n11211\nFor example, let us observe the empty square at the first row from the top and first column from the left.\nThere is one bomb square adjacent to this empty square: the square at the second row and second column.\nThus, the. corresponding to this empty square is replaced with 1.\n\ndef",
        "answer": "def bomb_squares(H, W, S):\n    # Write your code here\n    pass",
        "difficulty": "introductory"
    },
    {
        "task_id": 4590,
        "prompt": "Complete the Python function given the prompt below:We have two desks: A and B. Desk A has a vertical stack of N books on it, and Desk B similarly has M books on it.\nIt takes us A_i minutes to read the i-th book from the top on Desk A (1 \\leq i \\leq N), and B_i minutes to read the i-th book from the top on Desk B (1 \\leq i \\leq M).\nConsider the following action:\n - Choose a desk with a book remaining, read the topmost book on that desk, and remove it from the desk.\nHow many books can we read at most by repeating this action so that it takes us at most K minutes in total? We ignore the time it takes to do anything other than reading.\n-----Constraints-----\n - 1 \\leq N, M \\leq 200000\n - 1 \\leq K \\leq 10^9\n - 1 \\leq A_i, B_i \\leq 10^9\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN M K\nA_1 A_2 \\ldots A_N\nB_1 B_2 \\ldots B_M\n-----Output-----\nPrint an integer representing the maximum number of books that can be read.\n-----Sample Input-----\n3 4 240\n60 90 120\n80 150 80 150\n-----Sample Output-----\n3\nIn this case, it takes us 60, 90, 120 minutes to read the 1-st, 2-nd, 3-rd books from the top on Desk A, and 80, 150, 80, 150 minutes to read the 1-st, 2-nd, 3-rd, 4-th books from the top on Desk B, respectively.\nWe can read three books in 230 minutes, as shown below, and this is the maximum number of books we can read within 240 minutes.\n - Read the topmost book on Desk A in 60 minutes, and remove that book from the desk.\n - Read the topmost book on Desk B in 80 minutes, and remove that book from the desk.\n - Read the topmost book on Desk A in 90 minutes, and remove that book from the desk.\n\ndef",
        "answer": "def read_books(N, M, K):\n    # Write your code here\n    pass",
        "difficulty": "introductory"
    },
    {
        "task_id": 4591,
        "prompt": "Complete the Python function given the prompt below:\"Pizza At\", a fast food chain, offers three kinds of pizza: \"A-pizza\", \"B-pizza\" and \"AB-pizza\". A-pizza and B-pizza are completely different pizzas, and AB-pizza is one half of A-pizza and one half of B-pizza combined together. The prices of one A-pizza, B-pizza and AB-pizza are A yen, B yen and C yen (yen is the currency of Japan), respectively.\nNakahashi needs to prepare X A-pizzas and Y B-pizzas for a party tonight. He can only obtain these pizzas by directly buying A-pizzas and B-pizzas, or buying two AB-pizzas and then rearrange them into one A-pizza and one B-pizza. At least how much money does he need for this? It is fine to have more pizzas than necessary by rearranging pizzas.\n-----Constraints-----\n - 1 \u2264 A, B, C \u2264 5000\n - 1 \u2264 X, Y \u2264 10^5\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nA B C X Y\n-----Output-----\nPrint the minimum amount of money required to prepare X A-pizzas and Y B-pizzas.\n-----Sample Input-----\n1500 2000 1600 3 2\n-----Sample Output-----\n7900\nIt is optimal to buy four AB-pizzas and rearrange them into two A-pizzas and two B-pizzas, then buy additional one A-pizza.\n\ndef",
        "answer": "def pizza_at(a, b, c, x, y):\n    return min(a*x, b*y, c*(x+y))",
        "difficulty": "introductory"
    },
    {
        "task_id": 4592,
        "prompt": "Complete the Python function given the prompt below:You are given an integer N.\nFind the number of the positive divisors of N!, modulo 10^9+7.\n-----Constraints-----\n - 1\u2264N\u226410^3\n-----Input-----\nThe input is given from Standard Input in the following format:\nN\n-----Output-----\nPrint the number of the positive divisors of N!, modulo 10^9+7.\n-----Sample Input-----\n3\n-----Sample Output-----\n4\nThere are four divisors of 3! =6: 1, 2, 3 and 6. Thus, the output should be 4.\n\ndef",
        "answer": "def divisors(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count",
        "difficulty": "introductory"
    },
    {
        "task_id": 4593,
        "prompt": "Complete the Python function given the prompt below:You are given a positive integer X.\nFind the largest perfect power that is at most X.\nHere, a perfect power is an integer that can be represented as b^p, where b is an integer not less than 1 and p is an integer not less than 2.\n-----Constraints-----\n - 1 \u2264 X \u2264 1000\n - X is an integer.\n-----Input-----\nInput is given from Standard Input in the following format:\nX\n-----Output-----\nPrint the largest perfect power that is at most X.\n-----Sample Input-----\n10\n-----Sample Output-----\n9\nThere are four perfect powers that are at most 10: 1, 4, 8 and 9.\nWe should print the largest among them, 9.\n\ndef",
        "answer": "def solve(x):\n    max_pow = 0\n    for i in range(1, x):\n        if i**2 > x:\n            break\n        if x % i == 0:\n            max_pow = i\n    return max_pow",
        "difficulty": "introductory"
    },
    {
        "task_id": 4594,
        "prompt": "Complete the Python function given the prompt below:An X-layered kagami mochi (X \u2265 1) is a pile of X round mochi (rice cake) stacked vertically where each mochi (except the bottom one) has a smaller diameter than that of the mochi directly below it. For example, if you stack three mochi with diameters of 10, 8 and 6 centimeters from bottom to top in this order, you have a 3-layered kagami mochi; if you put just one mochi, you have a 1-layered kagami mochi.\nLunlun the dachshund has N round mochi, and the diameter of the i-th mochi is d_i centimeters. When we make a kagami mochi using some or all of them, at most how many layers can our kagami mochi have?\n-----Constraints-----\n - 1 \u2264 N \u2264 100\n - 1 \u2264 d_i \u2264 100\n - All input values are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nd_1\n:\nd_N\n-----Output-----\nPrint the maximum number of layers in a kagami mochi that can be made.\n-----Sample Input-----\n4\n10\n8\n8\n6\n-----Sample Output-----\n3\nIf we stack the mochi with diameters of 10, 8 and 6 centimeters from bottom to top in this order, we have a 3-layered kagami mochi, which is the maximum number of layers.\n\ndef",
        "answer": "def solve(n, d):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    return solve(n - 1, d) + solve(n - 2, d) + solve(n - 3, d)",
        "difficulty": "introductory"
    },
    {
        "task_id": 4595,
        "prompt": "Complete the Python function given the prompt below:Snuke has decided to construct a string that starts with A and ends with Z, by taking out a substring of a string s (that is, a consecutive part of s).\nFind the greatest length of the string Snuke can construct. Here, the test set guarantees that there always exists a substring of s that starts with A and ends with Z.\n-----Constraints-----\n - 1 \u2266 |s| \u2266 200{,}000\n - s consists of uppercase English letters.\n - There exists a substring of s that starts with A and ends with Z.\n-----Input-----\nThe input is given from Standard Input in the following format:\ns\n-----Output-----\nPrint the answer.\n-----Sample Input-----\nQWERTYASDFZXCV\n-----Sample Output-----\n5\nBy taking out the seventh through eleventh characters, it is possible to construct ASDFZ, which starts with A and ends with Z.\n\ndef",
        "answer": "def solve(s):\n    return len(s) - s.count('A') - s.count('Z')",
        "difficulty": "introductory"
    },
    {
        "task_id": 4596,
        "prompt": "Complete the Python function given the prompt below:There are N positive integers written on a blackboard: A_1,..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n - Replace each integer X on the blackboard by X divided by 2.\nFind the maximum possible number of operations that Snuke can perform.\n-----Constraints-----\n - 1 \\leq N \\leq 200\n - 1 \\leq A_i \\leq 10^9\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nA_1 A_2... A_N\n-----Output-----\nPrint the maximum possible number of operations that Snuke can perform.\n-----Sample Input-----\n3\n8 12 40\n-----Sample Output-----\n2\nInitially, [8, 12, 40] are written on the blackboard.\nSince all those integers are even, Snuke can perform the operation.\nAfter the operation is performed once, [4, 6, 20] are written on the blackboard.\nSince all those integers are again even, he can perform the operation.\nAfter the operation is performed twice, [2, 3, 10] are written on the blackboard.\nNow, there is an odd number 3 on the blackboard, so he cannot perform the operation any more.\nThus, Snuke can perform the operation at most twice.\n\ndef",
        "answer": "def solve(n, a):\n    # Write your code here\n    pass",
        "difficulty": "introductory"
    },
    {
        "task_id": 4597,
        "prompt": "Complete the Python function given the prompt below:Snuke loves working out. He is now exercising N times.\nBefore he starts exercising, his power is 1. After he exercises for the i-th time, his power gets multiplied by i.\nFind Snuke's power after he exercises N times. Since the answer can be extremely large, print the answer modulo 10^{9}+7.\n-----Constraints-----\n - 1 \u2264 N \u2264 10^{5}\n-----Input-----\nThe input is given from Standard Input in the following format:\nN\n-----Output-----\nPrint the answer modulo 10^{9}+7.\n-----Sample Input-----\n3\n-----Sample Output-----\n6\n - After Snuke exercises for the first time, his power gets multiplied by 1 and becomes 1.\n - After Snuke exercises for the second time, his power gets multiplied by 2 and becomes 2.\n - After Snuke exercises for the third time, his power gets multiplied by 3 and becomes 6.\n\ndef",
        "answer": "def solve():\n    n = int(input())\n    print(pow(1, n, 10**9+7))",
        "difficulty": "introductory"
    },
    {
        "task_id": 4598,
        "prompt": "Complete the Python function given the prompt below:There are N children in AtCoder Kindergarten. Mr. Evi will arrange the children in a line, then give 1 candy to the first child in the line, 2 candies to the second child,..., N candies to the N-th child. How many candies will be necessary in total?\n-----Constraints-----\n - 1\u2266N\u2266100\n-----Input-----\nThe input is given from Standard Input in the following format:\nN\n-----Output-----\nPrint the necessary number of candies in total.\n-----Sample Input-----\n3\n-----Sample Output-----\n6\nThe answer is 1+2+3=6.\n\ndef",
        "answer": "def main():\n    N = int(input())\n    print(N*(N+1)//2)",
        "difficulty": "introductory"
    },
    {
        "task_id": 4599,
        "prompt": "Complete the Python function given the prompt below:We have N cards. A number a_i is written on the i-th card.\nAlice and Bob will play a game using these cards. In this game, Alice and Bob alternately take one card. Alice goes first.\nThe game ends when all the cards are taken by the two players, and the score of each player is the sum of the numbers written on the cards he/she has taken. When both players take the optimal strategy to maximize their scores, find Alice's score minus Bob's score.\n-----Constraints-----\n - N is an integer between 1 and 100 (inclusive).\n - a_i \\ (1 \\leq i \\leq N) is an integer between 1 and 100 (inclusive).\n-----Input-----\nInput is given from Standard Input in the following format:  \nN\na_1 a_2 a_3... a_N\n-----Output-----\nPrint Alice's score minus Bob's score when both players take the optimal strategy to maximize their scores.\n-----Sample Input-----\n2\n3 1\n-----Sample Output-----\n2\nFirst, Alice will take the card with 3. Then, Bob will take the card with 1.\nThe difference of their scores will be 3 - 1 = 2.\n\ndef",
        "answer": "def score(cards):\n    return sum(map(int, cards))",
        "difficulty": "introductory"
    }
]