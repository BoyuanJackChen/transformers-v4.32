[
    {
        "task_id": 2100,
        "prompt": "Complete the Python function given the prompt below:One foggy Stockholm morning, Karlsson decided to snack on some jam in his friend Lillebror Svantenson's house. Fortunately for Karlsson, there wasn't anybody in his friend's house. Karlsson was not going to be hungry any longer, so he decided to get some food in the house.\nKarlsson's gaze immediately fell on n wooden cupboards, standing in the kitchen. He immediately realized that these cupboards have hidden jam stocks. Karlsson began to fly greedily around the kitchen, opening and closing the cupboards' doors, grab and empty all the jars of jam that he could find.\nAnd now all jars of jam are empty, Karlsson has had enough and does not want to leave traces of his stay, so as not to let down his friend. Each of the cupboards has two doors: the left one and the right one. Karlsson remembers that when he rushed to the kitchen, all the cupboards' left doors were in the same position (open or closed), similarly, all the cupboards' right doors were in the same position (open or closed). Karlsson wants the doors to meet this condition as well by the time the family returns. Karlsson does not remember the position of all the left doors, also, he cannot remember the position of all the right doors. Therefore, it does not matter to him in what position will be all left or right doors. It is important to leave all the left doors in the same position, and all the right doors in the same position. For example, all the left doors may be closed, and all the right ones may be open.\nKarlsson needs one second to open or close a door of a cupboard. He understands that he has very little time before the family returns, so he wants to know the minimum number of seconds t, in which he is able to bring all the cupboard doors in the required position.\nYour task is to write a program that will determine the required number of seconds t.\n-----Input-----\nThe first input line contains a single integer n \u2014 the number of cupboards in the kitchen (2 \u2264 n \u2264 10^4). Then follow n lines, each containing two integers l_{i} and r_{i} (0 \u2264 l_{i}, r_{i} \u2264 1). Number l_{i} equals one, if the left door of the i-th cupboard is opened, otherwise number l_{i} equals zero. Similarly, number r_{i} equals one, if the right door of the i-th cupboard is opened, otherwise number r_{i} equals zero.\nThe numbers in the lines are separated by single spaces.\n-----Output-----\nIn the only output line print a single integer t \u2014 the minimum number of seconds Karlsson needs to change the doors of all cupboards to the position he needs.\n-----Examples-----\nInput\n5\n0 1\n1 0\n0 1\n1 1\n0 1\nOutput\n3\n\ndef",
        "answer": "def solution(n):\n    return 0",
        "difficulty": "interview"
    },
    {
        "task_id": 2101,
        "prompt": "Complete the Python function given the prompt below:You are given three multisets of pairs of colored sticks:   $R$ pairs of red sticks, the first pair has length $r_1$, the second pair has length $r_2$, $\\dots$, the $R$-th pair has length $r_R$;  $G$ pairs of green sticks, the first pair has length $g_1$, the second pair has length $g_2$, $\\dots$, the $G$-th pair has length $g_G$;  $B$ pairs of blue sticks, the first pair has length $b_1$, the second pair has length $b_2$, $\\dots$, the $B$-th pair has length $b_B$; \nYou are constructing rectangles from these pairs of sticks with the following process:   take a pair of sticks of one color;  take a pair of sticks of another color different from the first one;  add the area of the resulting rectangle to the total area. \nThus, you get such rectangles that their opposite sides are the same color and their adjacent sides are not the same color.\nEach pair of sticks can be used at most once, some pairs can be left unused. You are not allowed to split a pair into independent sticks.\nWhat is the maximum area you can achieve?\n-----Input-----\nThe first line contains three integers $R$, $G$, $B$ ($1 \\le R, G, B \\le 200$)\u00a0\u2014 the number of pairs of red sticks, the number of pairs of green sticks and the number of pairs of blue sticks.\nThe second line contains $R$ integers $r_1, r_2, \\dots, r_R$ ($1 \\le r_i \\le 2000$)\u00a0\u2014 the lengths of sticks in each pair of red sticks.\nThe third line contains $G$ integers $g_1, g_2, \\dots, g_G$ ($1 \\le g_i \\le 2000$)\u00a0\u2014 the lengths of sticks in each pair of green sticks.\nThe fourth line contains $B$ integers $b_1, b_2, \\dots, b_B$ ($1 \\le b_i \\le 2000$)\u00a0\u2014 the lengths of sticks in each pair of blue sticks.\n-----Output-----\nPrint the maximum possible total area of the constructed rectangles.\n-----Examples-----\nInput\n1 1 1\n3\n5\n4\nOutput\n20\nInput\n2 1 3\n9 5\n1\n2 8 5\nOutput\n99\nInput\n10 1 1\n11 7 20 15 19 14 2 4 13 14\n8\n11\nOutput\n372\n-----Note-----\nIn the first example you can construct one of these rectangles: red and green with sides $3$ and $5$, red and blue with sides $3$ and $4$ and green and blue with sides $5$ and $4$. The best area of them is $4 \\times 5 = 20$.\nIn the second example the best rectangles are: red/blue $9 \\times 8$, red/blue $5 \\times 5$, green/blue $2 \\times 1$. So the total area is $72 + 25 + 2 = 99$.\nIn the third example the best rectangles are: red/green $19 \\times 8$ and red/blue $20 \\times 11$. The total area is $152 + 220 = 372$. Note that you can't construct more rectangles because you are not allowed to have both pairs taken to be the same color.\n\ndef",
        "answer": "def max_area(R, G, B):\n    return max(R * G, R * B, G * B)",
        "difficulty": "interview"
    },
    {
        "task_id": 2102,
        "prompt": "Complete the Python function given the prompt below:After battling Shikamaru, Tayuya decided that her flute is too predictable, and replaced it with a guitar. The guitar has $6$ strings and an infinite number of frets numbered from $1$. Fretting the fret number $j$ on the $i$-th string produces the note $a_{i} + j$.\nTayuya wants to play a melody of $n$ notes. Each note can be played on different string-fret combination. The easiness of performance depends on the difference between the maximal and the minimal indices of used frets. The less this difference is, the easier it is to perform the technique. Please determine the minimal possible difference.\nFor example, if $a = [1, 1, 2, 2, 3, 3]$, and the sequence of notes is $4, 11, 11, 12, 12, 13, 13$ (corresponding to the second example), we can play the first note on the first string, and all the other notes on the sixth string. Then the maximal fret will be $10$, the minimal one will be $3$, and the answer is $10 - 3 = 7$, as shown on the picture. [Image] \n-----Input-----\nThe first line contains $6$ space-separated numbers $a_{1}$, $a_{2}$,..., $a_{6}$ ($1 \\leq a_{i} \\leq 10^{9}$) which describe the Tayuya's strings.\nThe second line contains the only integer $n$ ($1 \\leq n \\leq 100\\,000$) standing for the number of notes in the melody.\nThe third line consists of $n$ integers $b_{1}$, $b_{2}$,..., $b_{n}$ ($1 \\leq b_{i} \\leq 10^{9}$), separated by space. They describe the notes to be played. It's guaranteed that $b_i > a_j$ for all $1\\leq i\\leq n$ and $1\\leq j\\leq 6$, in other words, you can play each note on any string.\n-----Output-----\nPrint the minimal possible difference of the maximal and the minimal indices of used frets.\n-----Examples-----\nInput\n1 4 100 10 30 5\n6\n101 104 105 110 130 200\nOutput\n0\nInput\n1 1 2 2 3 3\n7\n13 4 11 12 11 13 12\nOutput\n7\n-----Note-----\nIn the first sample test it is optimal to play the first note on the first string, the second note on the second string, the third note on the sixth string, the fourth note on the fourth string, the fifth note on the fifth string, and the sixth note on the third string. In this case the $100$-th fret is used each time, so the difference is $100 - 100 = 0$. [Image] \nIn the second test it's optimal, for example, to play the second note on the first string, and all the other notes on the sixth string. Then the maximal fret will be $10$, the minimal one will be $3$, and the answer is $10 - 3 = 7$. [Image]\n\ndef",
        "answer": "def solution(a, n, b):\n    # your code here\n    return",
        "difficulty": "interview"
    },
    {
        "task_id": 2103,
        "prompt": "Complete the Python function given the prompt below:Given an array $a$ of length $n$, find another array, $b$, of length $n$ such that:\n  for each $i$ $(1 \\le i \\le n)$ $MEX(\\{b_1$, $b_2$, $\\ldots$, $b_i\\})=a_i$. \nThe $MEX$ of a set of integers is the smallest non-negative integer that doesn't belong to this set.\nIf such array doesn't exist, determine this.\n-----Input-----\nThe first line contains an integer $n$ ($1 \\le n \\le 10^5$)\u00a0\u2014 the length of the array $a$.\nThe second line contains $n$ integers $a_1$, $a_2$, $\\ldots$, $a_n$ ($0 \\le a_i \\le i$)\u00a0\u2014 the elements of the array $a$. It's guaranteed that $a_i \\le a_{i+1}$ for $1\\le i < n$. \n-----Output-----\nIf there's no such array, print a single line containing $-1$.\nOtherwise, print a single line containing $n$ integers $b_1$, $b_2$, $\\ldots$, $b_n$ ($0 \\le b_i \\le 10^6$)\nIf there are multiple answers, print any.\n-----Examples-----\nInput\n3\n1 2 3\nOutput\n0 1 2 \nInput\n4\n0 0 0 2\nOutput\n1 3 4 0 \nInput\n3\n1 1 3\nOutput\n0 2 1 \n-----Note-----\nIn the second test case, other answers like $[1,1,1,0]$, for example, are valid.\n\ndef",
        "answer": "def MEX(a):\n    b = [0] * len(a)\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            if a[i] > a[j]:\n                b[i] += 1\n            elif a[i] < a[j]:\n                b[j] += 1\n    return b",
        "difficulty": "interview"
    },
    {
        "task_id": 2104,
        "prompt": "Complete the Python function given the prompt below:You are given a set of all integers from $l$ to $r$ inclusive, $l < r$, $(r - l + 1) \\le 3 \\cdot 10^5$ and $(r - l)$ is always odd.\nYou want to split these numbers into exactly $\\frac{r - l + 1}{2}$ pairs in such a way that for each pair $(i, j)$ the greatest common divisor of $i$ and $j$ is equal to $1$. Each number should appear in exactly one of the pairs.\nPrint the resulting pairs or output that no solution exists. If there are multiple solutions, print any of them.\n-----Input-----\nThe only line contains two integers $l$ and $r$ ($1 \\le l < r \\le 10^{18}$, $r - l + 1 \\le 3 \\cdot 10^5$, $(r - l)$ is odd).\n-----Output-----\nIf any solution exists, print \"YES\" in the first line. Each of the next $\\frac{r - l + 1}{2}$ lines should contain some pair of integers. GCD of numbers in each pair should be equal to $1$. All $(r - l + 1)$ numbers should be pairwise distinct and should have values from $l$ to $r$ inclusive.\nIf there are multiple solutions, print any of them.\nIf there exists no solution, print \"NO\".\n-----Example-----\nInput\n1 8\nOutput\nYES\n2 7\n4 1\n3 8\n6 5\n\ndef",
        "answer": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a",
        "difficulty": "interview"
    },
    {
        "task_id": 2105,
        "prompt": "Complete the Python function given the prompt below:Happy new year! The year 2020 is also known as Year Gyeongja (\uacbd\uc790\ub144, gyeongja-nyeon) in Korea. Where did the name come from? Let's briefly look at the Gapja system, which is traditionally used in Korea to name the years.\nThere are two sequences of $n$ strings $s_1, s_2, s_3, \\ldots, s_{n}$ and $m$ strings $t_1, t_2, t_3, \\ldots, t_{m}$. These strings contain only lowercase letters. There might be duplicates among these strings.\nLet's call a concatenation of strings $x$ and $y$ as the string that is obtained by writing down strings $x$ and $y$ one right after another without changing the order. For example, the concatenation of the strings \"code\" and \"forces\" is the string \"codeforces\".\nThe year 1 has a name which is the concatenation of the two strings $s_1$ and $t_1$. When the year increases by one, we concatenate the next two strings in order from each of the respective sequences. If the string that is currently being used is at the end of its sequence, we go back to the first string in that sequence.\nFor example, if $n = 3, m = 4, s = ${\"a\", \"b\", \"c\"}, $t =$ {\"d\", \"e\", \"f\", \"g\"}, the following table denotes the resulting year names. Note that the names of the years may repeat. [Image] \nYou are given two sequences of strings of size $n$ and $m$ and also $q$ queries. For each query, you will be given the current year. Could you find the name corresponding to the given year, according to the Gapja system?\n-----Input-----\nThe first line contains two integers $n, m$ ($1 \\le n, m \\le 20$).\nThe next line contains $n$ strings $s_1, s_2, \\ldots, s_{n}$. Each string contains only lowercase letters, and they are separated by spaces. The length of each string is at least $1$ and at most $10$.\nThe next line contains $m$ strings $t_1, t_2, \\ldots, t_{m}$. Each string contains only lowercase letters, and they are separated by spaces. The length of each string is at least $1$ and at most $10$.\nAmong the given $n + m$ strings may be duplicates (that is, they are not necessarily all different).\nThe next line contains a single integer $q$ ($1 \\le q \\le 2\\,020$).\nIn the next $q$ lines, an integer $y$ ($1 \\le y \\le 10^9$) is given, denoting the year we want to know the name for.\n-----Output-----\nPrint $q$ lines. For each line, print the name of the year as per the rule described above.\n-----Example-----\nInput\n10 12\nsin im gye gap eul byeong jeong mu gi gyeong\nyu sul hae ja chuk in myo jin sa o mi sin\n14\n1\n2\n3\n4\n10\n11\n12\n13\n73\n2016\n2017\n2018\n2019\n2020\nOutput\nsinyu\nimsul\ngyehae\ngapja\ngyeongo\nsinmi\nimsin\ngyeyu\ngyeyu\nbyeongsin\njeongyu\nmusul\ngihae\ngyeongja\n-----Note-----\nThe first example denotes the actual names used in the Gapja system. These strings usually are either a number or the name of some animal.\n\ndef",
        "answer": "def solution(n, m, s, t, q):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2106,
        "prompt": "Complete the Python function given the prompt below:There are n cities in the country where the Old Peykan lives. These cities are located on a straight line, we'll denote them from left to right as c_1, c_2,..., c_{n}. The Old Peykan wants to travel from city c_1 to c_{n} using roads. There are (n - 1) one way roads, the i-th road goes from city c_{i} to city c_{i} + 1 and is d_{i} kilometers long.\nThe Old Peykan travels 1 kilometer in 1 hour and consumes 1 liter of fuel during this time.\nEach city c_{i} (except for the last city c_{n}) has a supply of s_{i} liters of fuel which immediately transfers to the Old Peykan if it passes the city or stays in it. This supply refreshes instantly k hours after it transfers. The Old Peykan can stay in a city for a while and fill its fuel tank many times. \nInitially (at time zero) the Old Peykan is at city c_1 and s_1 liters of fuel is transferred to it's empty tank from c_1's supply. The Old Peykan's fuel tank capacity is unlimited. Old Peykan can not continue its travel if its tank is emptied strictly between two cities.\nFind the minimum time the Old Peykan needs to reach city c_{n}.\n-----Input-----\nThe first line of the input contains two space-separated integers m and k (1 \u2264 m, k \u2264 1000). The value m specifies the number of roads between cities which is equal to n - 1.\nThe next line contains m space-separated integers d_1, d_2,..., d_{m} (1 \u2264 d_{i} \u2264 1000) and the following line contains m space-separated integers s_1, s_2,..., s_{m} (1 \u2264 s_{i} \u2264 1000).\n-----Output-----\nIn the only line of the output print a single integer \u2014 the minimum time required for The Old Peykan to reach city c_{n} from city c_1.\n-----Examples-----\nInput\n4 6\n1 2 5 2\n2 3 3 4\nOutput\n10\nInput\n2 3\n5 6\n5 5\nOutput\n14\n-----Note-----\nIn the second sample above, the Old Peykan stays in c_1 for 3 hours.\n\ndef",
        "answer": "def peykan(n, k, d, s):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2107,
        "prompt": "Complete the Python function given the prompt below:Dima loves Inna very much. He decided to write a song for her. Dima has a magic guitar with n strings and m frets. Dima makes the guitar produce sounds like that: to play a note, he needs to hold one of the strings on one of the frets and then pull the string. When Dima pulls the i-th string holding it on the j-th fret the guitar produces a note, let's denote it as a_{ij}. We know that Dima's guitar can produce k distinct notes. It is possible that some notes can be produced in multiple ways. In other words, it is possible that a_{ij} = a_{pq} at (i, j) \u2260 (p, q).\nDima has already written a song \u2014 a sequence of s notes. In order to play the song, you need to consecutively produce the notes from the song on the guitar. You can produce each note in any available way. Dima understood that there are many ways to play a song and he wants to play it so as to make the song look as complicated as possible (try to act like Cobein).\nWe'll represent a way to play a song as a sequence of pairs (x_{i}, y_{i}) (1 \u2264 i \u2264 s), such that the x_{i}-th string on the y_{i}-th fret produces the i-th note from the song. The complexity of moving between pairs (x_1, y_1) and (x_2, y_2) equals $|x_{1} - x_{2}|$ + $|y_{1} - y_{2}|$. The complexity of a way to play a song is the maximum of complexities of moving between adjacent pairs.\nHelp Dima determine the maximum complexity of the way to play his song! The guy's gotta look cool!\n-----Input-----\nThe first line of the input contains four integers n, m, k and s (1 \u2264 n, m \u2264 2000, 1 \u2264 k \u2264 9, 2 \u2264 s \u2264 10^5). \nThen follow n lines, each containing m integers a_{ij} (1 \u2264 a_{ij} \u2264 k). The number in the i-th row and the j-th column (a_{ij}) means a note that the guitar produces on the i-th string and the j-th fret.\nThe last line of the input contains s integers q_{i} (1 \u2264 q_{i} \u2264 k) \u2014 the sequence of notes of the song.\n-----Output-----\nIn a single line print a single number \u2014 the maximum possible complexity of the song.\n-----Examples-----\nInput\n4 6 5 7\n3 1 2 2 3 1\n3 2 2 2 5 5\n4 2 2 2 5 3\n3 2 2 1 4 3\n2 3 1 4 1 5 1\nOutput\n8\nInput\n4 4 9 5\n4 7 9 5\n1 2 1 7\n8 3 4 9\n5 7 7 2\n7 1 9 2 5\nOutput\n4\n\ndef",
        "answer": "def max_complexity(n, m, k, s, a):\n    complexity = 0\n    for i in range(s):\n        complexity += abs(a[i][0] - a[i][1])\n    return complexity",
        "difficulty": "interview"
    },
    {
        "task_id": 2108,
        "prompt": "Complete the Python function given the prompt below:You are given an undirected graph without self-loops or multiple edges which consists of $n$ vertices and $m$ edges. Also you are given three integers $n_1$, $n_2$ and $n_3$.\nCan you label each vertex with one of three numbers 1, 2 or 3 in such way, that:   Each vertex should be labeled by exactly one number 1, 2 or 3;  The total number of vertices with label 1 should be equal to $n_1$;  The total number of vertices with label 2 should be equal to $n_2$;  The total number of vertices with label 3 should be equal to $n_3$;  $|col_u - col_v| = 1$ for each edge $(u, v)$, where $col_x$ is the label of vertex\u00a0$x$. \nIf there are multiple valid labelings, print any of them.\n-----Input-----\nThe first line contains two integers $n$ and $m$ ($1 \\le n \\le 5000$; $0 \\le m \\le 10^5$)\u00a0\u2014 the number of vertices and edges in the graph.\nThe second line contains three integers $n_1$, $n_2$ and $n_3$ ($0 \\le n_1, n_2, n_3 \\le n$)\u00a0\u2014 the number of labels 1, 2 and 3, respectively. It's guaranteed that $n_1 + n_2 + n_3 = n$.\nNext $m$ lines contan description of edges: the $i$-th line contains two integers $u_i$, $v_i$ ($1 \\le u_i, v_i \\le n$; $u_i \\neq v_i$) \u2014 the vertices the $i$-th edge connects. It's guaranteed that the graph doesn't contain self-loops or multiple edges.\n-----Output-----\nIf valid labeling exists then print \"YES\" (without quotes) in the first line. In the second line print string of length $n$ consisting of 1, 2 and 3. The $i$-th letter should be equal to the label of the $i$-th vertex.\nIf there is no valid labeling, print \"NO\" (without quotes).\n-----Examples-----\nInput\n6 3\n2 2 2\n3 1\n5 4\n2 5\nOutput\nYES\n112323\nInput\n5 9\n0 2 3\n1 2\n1 3\n1 5\n2 3\n2 4\n2 5\n3 4\n3 5\n4 5\nOutput\nNO\n\ndef",
        "answer": "def solve(n, m, n_1, n_2, n_3):\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v = map(int, input().split())\n        graph[u].append(v)\n        graph[v].append(u)",
        "difficulty": "interview"
    },
    {
        "task_id": 2109,
        "prompt": "Complete the Python function given the prompt below:Vitaly has an array of n distinct integers. Vitaly wants to divide this array into three non-empty sets so as the following conditions hold: \n  The product of all numbers in the first set is less than zero ( < 0).  The product of all numbers in the second set is greater than zero ( > 0).  The product of all numbers in the third set is equal to zero.  Each number from the initial array must occur in exactly one set. \nHelp Vitaly. Divide the given array.\n-----Input-----\nThe first line of the input contains integer n (3 \u2264 n \u2264 100). The second line contains n space-separated distinct integers a_1, a_2,..., a_{n} (|a_{i}| \u2264 10^3) \u2014 the array elements.\n-----Output-----\nIn the first line print integer n_1 (n_1 > 0) \u2014 the number of elements in the first set. Then print n_1 numbers \u2014 the elements that got to the first set.\nIn the next line print integer n_2 (n_2 > 0) \u2014 the number of elements in the second set. Then print n_2 numbers \u2014 the elements that got to the second set.\nIn the next line print integer n_3 (n_3 > 0) \u2014 the number of elements in the third set. Then print n_3 numbers \u2014 the elements that got to the third set.\nThe printed sets must meet the described conditions. It is guaranteed that the solution exists. If there are several solutions, you are allowed to print any of them.\n-----Examples-----\nInput\n3\n-1 2 0\nOutput\n1 -1\n1 2\n1 0\nInput\n4\n-1 -2 -3 0\nOutput\n1 -1\n2 -3 -2\n1 0\n\ndef",
        "answer": "def solution(n, a):\n    n_1 = 0\n    n_2 = 0\n    n_3 = 0\n    for i in range(n):\n        if a[i] < 0:\n            n_1 += 1\n        elif a[i] > 0:\n            n_2 += 1\n        else:\n            n_3 += 1\n    print(n_1)\n    print(n_2)\n    print(n_3)",
        "difficulty": "interview"
    },
    {
        "task_id": 2110,
        "prompt": "Complete the Python function given the prompt below:There are many freight trains departing from Kirnes planet every day. One day on that planet consists of $h$ hours, and each hour consists of $m$ minutes, where $m$ is an even number. Currently, there are $n$ freight trains, and they depart every day at the same time: $i$-th train departs at $h_i$ hours and $m_i$ minutes.\nThe government decided to add passenger trams as well: they plan to add a regular tram service with half-hour intervals. It means that the first tram of the day must depart at $0$ hours and $t$ minutes, where $0 \\le t < {m \\over 2}$, the second tram departs $m \\over 2$ minutes after the first one and so on. This schedule allows exactly two passenger trams per hour, which is a great improvement.\nTo allow passengers to board the tram safely, the tram must arrive $k$ minutes before. During the time when passengers are boarding the tram, no freight train can depart from the planet. However, freight trains are allowed to depart at the very moment when the boarding starts, as well as at the moment when the passenger tram departs. Note that, if the first passenger tram departs at $0$ hours and $t$ minutes, where $t < k$, then the freight trains can not depart during the last $k - t$ minutes of the day.\n $O$ A schematic picture of the correct way to run passenger trams. Here $h=2$ (therefore, the number of passenger trams is $2h=4$), the number of freight trains is $n=6$. The passenger trams are marked in red (note that the spaces between them are the same). The freight trains are marked in blue. Time segments of length $k$ before each passenger tram are highlighted in red. Note that there are no freight trains inside these segments. \nUnfortunately, it might not be possible to satisfy the requirements of the government without canceling some of the freight trains. Please help the government find the optimal value of $t$ to minimize the number of canceled freight trains in case all passenger trams depart according to schedule.\n-----Input-----\nThe first line of input contains four integers $n$, $h$, $m$, $k$ ($1 \\le n \\le 100\\,000$, $1 \\le h \\le 10^9$, $2 \\le m \\le 10^9$, $m$ is even, $1 \\le k \\le {m \\over 2}$)\u00a0\u2014 the number of freight trains per day, the number of hours and minutes on the planet, and the boarding time for each passenger tram.\n$n$ lines follow, each contains two integers $h_i$ and $m_i$ ($0 \\le h_i < h$, $0 \\le m_i < m$)\u00a0\u2014 the time when $i$-th freight train departs. It is guaranteed that no freight trains depart at the same time.\n-----Output-----\nThe first line of output should contain two integers: the minimum number of trains that need to be canceled, and the optimal starting time $t$. Second line of output should contain freight trains that need to be canceled.\n-----Examples-----\nInput\n2 24 60 15\n16 0\n17 15\nOutput\n0 0\nInput\n2 24 60 16\n16 0\n17 15\nOutput\n1 0\n2 \n-----Note-----\nIn the first test case of the example the first tram can depart at 0 hours and 0 minutes. Then the freight train at 16 hours and 0 minutes can depart at the same time as the passenger tram, and the freight train at 17 hours and 15 minutes can depart at the same time as the boarding starts for the upcoming passenger tram.\nIn the second test case of the example it is not possible to design the passenger tram schedule without cancelling any of the freight trains: if $t \\in [1, 15]$, then the freight train at 16 hours and 0 minutes is not able to depart (since boarding time is 16 minutes). If $t = 0$ or $t \\in [16, 29]$, then the freight train departing at 17 hours 15 minutes is not able to depart. However, if the second freight train is canceled, one can choose $t = 0$. Another possible option is to cancel the first train and choose $t = 13$.\n\ndef",
        "answer": "def freight_tram(n, h, m, k):\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2111,
        "prompt": "Complete the Python function given the prompt below:Andrewid the Android is a galaxy-known detective. Now he does not investigate any case and is eating chocolate out of boredom.\nA bar of chocolate can be presented as an n \u00d7 n table, where each cell represents one piece of chocolate. The columns of the table are numbered from 1 to n from left to right and the rows are numbered from top to bottom. Let's call the anti-diagonal to be a diagonal that goes the lower left corner to the upper right corner of the table. First Andrewid eats all the pieces lying below the anti-diagonal. Then he performs the following q actions with the remaining triangular part: first, he chooses a piece on the anti-diagonal and either direction 'up' or 'left', and then he begins to eat all the pieces starting from the selected cell, moving in the selected direction until he reaches the already eaten piece or chocolate bar edge.\nAfter each action, he wants to know how many pieces he ate as a result of this action.\n-----Input-----\nThe first line contains integers n (1 \u2264 n \u2264 10^9) and q (1 \u2264 q \u2264 2\u00b710^5) \u2014 the size of the chocolate bar and the number of actions.\nNext q lines contain the descriptions of the actions: the i-th of them contains numbers x_{i} and y_{i} (1 \u2264 x_{i}, y_{i} \u2264 n, x_{i} + y_{i} = n + 1) \u2014 the numbers of the column and row of the chosen cell and the character that represents the direction (L \u2014 left, U \u2014 up).\n-----Output-----\nPrint q lines, the i-th of them should contain the number of eaten pieces as a result of the i-th action.\n-----Examples-----\nInput\n6 5\n3 4 U\n6 1 L\n2 5 L\n1 6 U\n4 3 U\nOutput\n4\n3\n2\n1\n2\nInput\n10 6\n2 9 U\n10 1 U\n1 10 U\n8 3 L\n10 1 L\n6 5 U\nOutput\n9\n1\n10\n6\n0\n2\n-----Note-----\nPictures to the sample tests:\n[Image]\nThe pieces that were eaten in the same action are painted the same color. The pieces lying on the anti-diagonal contain the numbers of the action as a result of which these pieces were eaten.\nIn the second sample test the Andrewid tries to start eating chocolate for the second time during his fifth action, starting from the cell at the intersection of the 10-th column and the 1-st row, but this cell is already empty, so he does not eat anything.\n\ndef",
        "answer": "def chocolate_bar(n, q):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2112,
        "prompt": "Complete the Python function given the prompt below:There are $n$ warriors in a row. The power of the $i$-th warrior is $a_i$. All powers are pairwise distinct.\nYou have two types of spells which you may cast:   Fireball: you spend $x$ mana and destroy exactly $k$ consecutive warriors;  Berserk: you spend $y$ mana, choose two consecutive warriors, and the warrior with greater power destroys the warrior with smaller power. \nFor example, let the powers of warriors be $[2, 3, 7, 8, 11, 5, 4]$, and $k = 3$. If you cast Berserk on warriors with powers $8$ and $11$, the resulting sequence of powers becomes $[2, 3, 7, 11, 5, 4]$. Then, for example, if you cast Fireball on consecutive warriors with powers $[7, 11, 5]$, the resulting sequence of powers becomes $[2, 3, 4]$.\nYou want to turn the current sequence of warriors powers $a_1, a_2, \\dots, a_n$ into $b_1, b_2, \\dots, b_m$. Calculate the minimum amount of mana you need to spend on it.\n-----Input-----\nThe first line contains two integers $n$ and $m$ ($1 \\le n, m \\le 2 \\cdot 10^5$)\u00a0\u2014 the length of sequence $a$ and the length of sequence $b$ respectively.\nThe second line contains three integers $x, k, y$ ($1 \\le x, y, \\le 10^9; 1 \\le k \\le n$)\u00a0\u2014 the cost of fireball, the range of fireball and the cost of berserk respectively.\nThe third line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le n$). It is guaranteed that all integers $a_i$ are pairwise distinct.\nThe fourth line contains $m$ integers $b_1, b_2, \\dots, b_m$ ($1 \\le b_i \\le n$). It is guaranteed that all integers $b_i$ are pairwise distinct.\n-----Output-----\nPrint the minimum amount of mana for turning the sequnce $a_1, a_2, \\dots, a_n$ into $b_1, b_2, \\dots, b_m$, or $-1$ if it is impossible.\n-----Examples-----\nInput\n5 2\n5 2 3\n3 1 4 5 2\n3 5\nOutput\n8\nInput\n4 4\n5 1 4\n4 3 1 2\n2 4 3 1\nOutput\n-1\nInput\n4 4\n2 1 11\n1 3 2 4\n1 3 2 4\nOutput\n0\n\ndef",
        "answer": "def solution(a, b, x, y, n, m):\n    a = sorted(a)\n    b = sorted(b)\n    i = 0\n    j = 0\n    ans = 0\n    while i < n and j < m:\n        if a[i] <= b[j]:\n            ans += x\n            i += 1\n        else:\n            ans += y\n            j += 1\n    if i < n:\n        ans += x * (n - i)\n    if j < m:\n        ans += y * (m - j)\n    return ans",
        "difficulty": "interview"
    },
    {
        "task_id": 2113,
        "prompt": "Complete the Python function given the prompt below:Mahmoud and Ehab continue their adventures! As everybody in the evil land knows, Dr. Evil likes bipartite graphs, especially trees.\nA tree is a connected acyclic graph. A bipartite graph is a graph, whose vertices can be partitioned into 2 sets in such a way, that for each edge (u, v) that belongs to the graph, u and v belong to different sets. You can find more formal definitions of a tree and a bipartite graph in the notes section below.\nDr. Evil gave Mahmoud and Ehab a tree consisting of n nodes and asked them to add edges to it in such a way, that the graph is still bipartite. Besides, after adding these edges the graph should be simple (doesn't contain loops or multiple edges). What is the maximum number of edges they can add?\nA loop is an edge, which connects a node with itself. Graph doesn't contain multiple edges when for each pair of nodes there is no more than one edge between them. A cycle and a loop aren't the same.\n-----Input-----\nThe first line of input contains an integer n\u00a0\u2014 the number of nodes in the tree (1 \u2264 n \u2264 10^5).\nThe next n - 1 lines contain integers u and v (1 \u2264 u, v \u2264 n, u \u2260 v)\u00a0\u2014 the description of the edges of the tree.\nIt's guaranteed that the given graph is a tree. \n-----Output-----\nOutput one integer\u00a0\u2014 the maximum number of edges that Mahmoud and Ehab can add to the tree while fulfilling the conditions.\n-----Examples-----\nInput\n3\n1 2\n1 3\nOutput\n0\nInput\n5\n1 2\n2 3\n3 4\n4 5\nOutput\n2\n-----Note-----\nTree definition: https://en.wikipedia.org/wiki/Tree_(graph_theory)\nBipartite graph definition: https://en.wikipedia.org/wiki/Bipartite_graph\nIn the first test case the only edge that can be added in such a way, that graph won't contain loops or multiple edges is (2, 3), but adding this edge will make the graph non-bipartite so the answer is 0.\nIn the second test case Mahmoud and Ehab can add edges (1, 4) and (2, 5).\n\ndef",
        "answer": "def solve(n, edges):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2114,
        "prompt": "Complete the Python function given the prompt below:Egor wants to achieve a rating of 1600 points on the well-known chess portal ChessForces and he needs your help!\nBefore you start solving the problem, Egor wants to remind you how the chess pieces move. Chess rook moves along straight lines up and down, left and right, as many squares as it wants. And when it wants, it can stop. The queen walks in all directions vertically and diagonally at any distance. You can see the examples below. [Image] \nTo reach the goal, Egor should research the next topic:\nThere is an $N \\times N$ board. Each cell of the board has a number from $1$ to $N ^ 2$ in it and numbers in all cells are distinct.\nIn the beginning, some chess figure stands in the cell with the number $1$. Note that this cell is already considered as visited. After that every move is determined by the following rules:   Among all not visited yet cells to which the figure can get in one move, it goes to the cell that has minimal number. If all accessible cells were already visited and some cells are not yet visited, then the figure is teleported to the not visited cell that has minimal number. If this step happens, the piece pays a fee of $1$ vun. If all cells are already visited, the process is stopped. \nEgor should find an $N \\times N$ board on which the rook pays strictly less vuns than the queen during the round with this numbering. Help him to find such $N \\times N$ numbered board, or tell that it doesn't exist.\n-----Input-----\nThe only line contains one integer $N$ \u00a0\u2014 the size of the board, $1\\le N \\le 500$.\n-----Output-----\nThe output should contain $N$ lines.\nIn $i$-th line output $N$ numbers \u00a0\u2014 numbers on the $i$-th row of the board. All numbers from $1$ to $N \\times N$ must be used exactly once.\nOn your board rook must pay strictly less vuns than the queen.\nIf there are no solutions, print $-1$.\nIf there are several solutions, you can output any of them. \n-----Examples-----\nInput\n1\nOutput\n-1\nInput\n4\nOutput\n4 3 6 12 \n7 5 9 15 \n14 1 11 10 \n13 8 16 2 \n-----Note-----\nIn case we have $1 \\times 1$ board, both rook and queen do not have a chance to pay fees.\nIn second sample rook goes through cells $1 \\to 3 \\to 4 \\to 6 \\to 9 \\to 5 \\to 7 \\to 13 \\to 2 \\to 8 \\to 16 \\to 11 \\to 10 \\to 12 \\to 15 \\to \\textbf{(1 vun)} \\to 14$. \nQueen goes through $1 \\to 3 \\to 4 \\to 2 \\to 5 \\to 6 \\to 9 \\to 7 \\to 13 \\to 8 \\to 11 \\to 10 \\to 12 \\to 15 \\to \\textbf{(1 vun)} \\to 14 \\to \\textbf{(1 vun)} \\to 16$.\nAs a result rook pays 1 vun and queen pays 2 vuns.\n\ndef",
        "answer": "def chess(n):\n    if n == 1:\n        return -1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 3\n    if n == 5:\n        return 4\n    if n == 6:\n        return 5\n    if n == 7:\n        return 6\n    if n == 8:\n        return 7\n    if n == 9:\n        return 8\n    if n == 10:\n        return 9\n    if n == 11:\n        return 10\n    if n == 12:\n        return 11\n    if n == 13:\n        return 12\n    if n == 14:\n        return 13\n    if n == 15:\n        return 14\n    if n == 16:\n        return 15\n    if n == 17:\n        return 16\n    if n == 18:\n        return 17\n    if n == 19:\n        return 18\n    if n == 20:\n        return 19\n    if n == 21:\n        return 20\n    if n == 22:\n        return 21\n    if n == 23:\n        return 22\n    if n == 24:\n        return 23\n    if n == 25:\n        return 24\n    if n == 26:\n        return 25\n    if n == 27:\n        return 26\n    if n == 28:\n        return 27\n    if n == 29:\n        return 28\n    if n == 30:\n        return 29\n    if n == 31:\n        return 30\n    if n == 32:\n        return 31\n    if n == 33:\n        return 32\n    if n == 34:\n        return 33\n    if n == 35:\n        return 34\n    if n == 36:\n        return 35\n    if n == 37:\n        return 36\n    if n == 38:\n        return 37\n    if n == 39:\n        return 38\n    if n == 40:\n        return 39\n    if n == 41:\n        return 40\n    if n == 42:\n        return 41\n    if n == 43:\n        return 42\n    if n == 44:\n        return 43\n    if n == 45:\n        return 44",
        "difficulty": "interview"
    },
    {
        "task_id": 2115,
        "prompt": "Complete the Python function given the prompt below:You are given a sequence of positive integers a_1, a_2,..., a_{n}. \nWhile possible, you perform the following operation: find a pair of equal consecutive elements. If there are more than one such pair, find the leftmost (with the smallest indices of elements). If the two integers are equal to x, delete both and insert a single integer x + 1 on their place. This way the number of elements in the sequence is decreased by 1 on each step. \nYou stop performing the operation when there is no pair of equal consecutive elements.\nFor example, if the initial sequence is [5, 2, 1, 1, 2, 2], then after the first operation you get [5, 2, 2, 2, 2], after the second \u2014 [5, 3, 2, 2], after the third \u2014 [5, 3, 3], and finally after the fourth you get [5, 4]. After that there are no equal consecutive elements left in the sequence, so you stop the process.\nDetermine the final sequence after you stop performing the operation.\n-----Input-----\nThe first line contains a single integer n (2 \u2264 n \u2264 2\u00b710^5) \u2014 the number of elements in the sequence.\nThe second line contains the sequence of integers a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 10^9).\n-----Output-----\nIn the first line print a single integer k \u2014 the number of elements in the sequence after you stop performing the operation. \nIn the second line print k integers\u00a0\u2014 the sequence after you stop performing the operation.\n-----Examples-----\nInput\n6\n5 2 1 1 2 2\nOutput\n2\n5 4 \nInput\n4\n1000000000 1000000000 1000000000 1000000000\nOutput\n1\n1000000002 \nInput\n7\n4 10 22 11 12 5 6\nOutput\n7\n4 10 22 11 12 5 6 \n-----Note-----\nThe first example is described in the statements.\nIn the second example the initial sequence is [1000000000, 1000000000, 1000000000, 1000000000]. After the first operation the sequence is equal to [1000000001, 1000000000, 1000000000]. After the second operation the sequence is [1000000001, 1000000001]. After the third operation the sequence is [1000000002].\nIn the third example there are no two equal consecutive elements initially, so the sequence does not change.\n\ndef",
        "answer": "def solution(a):\n    i = 0\n    while i < len(a) - 1:\n        if a[i] == a[i + 1]:\n            a.pop(i)\n            a.pop(i)\n            a.insert(i, a[i] + 1)\n        else:\n            i += 1\n    return len(a)",
        "difficulty": "interview"
    },
    {
        "task_id": 2116,
        "prompt": "Complete the Python function given the prompt below:Ayush is a cashier at the shopping center. Recently his department has started a ''click and collect\" service which allows users to shop online. \nThe store contains k items. n customers have already used the above service. Each user paid for m items. Let a_{ij} denote the j-th item in the i-th person's order.\nDue to the space limitations all the items are arranged in one single row. When Ayush receives the i-th order he will find one by one all the items a_{ij} (1 \u2264 j \u2264 m) in the row. Let pos(x) denote the position of the item x in the row at the moment of its collection. Then Ayush takes time equal to pos(a_{i}1) + pos(a_{i}2) +... + pos(a_{im}) for the i-th customer.\nWhen Ayush accesses the x-th element he keeps a new stock in the front of the row and takes away the x-th element. Thus the values are updating.\nYour task is to calculate the total time it takes for Ayush to process all the orders.\nYou can assume that the market has endless stock.\n-----Input-----\nThe first line contains three integers n, m and k (1 \u2264 n, k \u2264 100, 1 \u2264 m \u2264 k) \u2014 the number of users, the number of items each user wants to buy and the total number of items at the market.\nThe next line contains k distinct integers p_{l} (1 \u2264 p_{l} \u2264 k) denoting the initial positions of the items in the store. The items are numbered with integers from 1 to k.\nEach of the next n lines contains m distinct integers a_{ij} (1 \u2264 a_{ij} \u2264 k) \u2014 the order of the i-th person.\n-----Output-----\nPrint the only integer t \u2014 the total time needed for Ayush to process all the orders.\n-----Example-----\nInput\n2 2 5\n3 4 1 2 5\n1 5\n3 1\nOutput\n14\n-----Note-----\nCustomer 1 wants the items 1 and 5.\npos(1) = 3, so the new positions are: [1, 3, 4, 2, 5].\npos(5) = 5, so the new positions are: [5, 1, 3, 4, 2].\nTime taken for the first customer is 3 + 5 = 8.\nCustomer 2 wants the items 3 and 1.\npos(3) = 3, so the new positions are: [3, 5, 1, 4, 2].\npos(1) = 3, so the new positions are: [1, 3, 5, 4, 2].\nTime taken for the second customer is 3 + 3 = 6.\nTotal time is 8 + 6 = 14.\nFormally pos(x) is the index of x in the current row.\n\ndef",
        "answer": "def click(n, m, k, p):\n    pos = [0] * k\n    for i in range(n):\n        for j in range(m):\n            pos[p[j]] = j\n        p = [p[i] - 1 for i in range(k)]\n    return sum(pos)",
        "difficulty": "interview"
    },
    {
        "task_id": 2117,
        "prompt": "Complete the Python function given the prompt below:The Resistance is trying to take control over as many planets of a particular solar system as possible. Princess Heidi is in charge of the fleet, and she must send ships to some planets in order to maximize the number of controlled planets.\nThe Galaxy contains N planets, connected by bidirectional hyperspace tunnels in such a way that there is a unique path between every pair of the planets.\nA planet is controlled by the Resistance if there is a Resistance ship in its orbit, or if the planet lies on the shortest path between some two planets that have Resistance ships in their orbits.\nHeidi has not yet made up her mind as to how many ships to use. Therefore, she is asking you to compute, for every K = 1, 2, 3,..., N, the maximum number of planets that can be controlled with a fleet consisting of K ships.\n-----Input-----\nThe first line of the input contains an integer N (1 \u2264 N \u2264 10^5) \u2013 the number of planets in the galaxy.\nThe next N - 1 lines describe the hyperspace tunnels between the planets. Each of the N - 1 lines contains two space-separated integers u and v (1 \u2264 u, v \u2264 N) indicating that there is a bidirectional hyperspace tunnel between the planets u and v. It is guaranteed that every two planets are connected by a path of tunnels, and that each tunnel connects a different pair of planets.\n-----Output-----\nOn a single line, print N space-separated integers. The K-th number should correspond to the maximum number of planets that can be controlled by the Resistance using a fleet of K ships.\n-----Examples-----\nInput\n3\n1 2\n2 3\nOutput\n1 3 3 \nInput\n4\n1 2\n3 2\n4 2\nOutput\n1 3 4 4 \n-----Note-----\nConsider the first example. If K = 1, then Heidi can only send one ship to some planet and control it. However, for K \u2265 2, sending ships to planets 1 and 3 will allow the Resistance to control all planets.\n\ndef",
        "answer": "def solution(N, K):\n    planets = [0] * N\n    for _ in range(N - 1):\n        u, v = map(int, input().split())\n        planets[u - 1] += 1\n        planets[v - 1] += 1\n    planets.sort()\n    return''.join(map(str, planets[K - 1:]))",
        "difficulty": "interview"
    },
    {
        "task_id": 2118,
        "prompt": "Complete the Python function given the prompt below:Merge sort is a well-known sorting algorithm. The main function that sorts the elements of array a with indices from [l, r) can be implemented as follows:  If the segment [l, r) is already sorted in non-descending order (that is, for any i such that l \u2264 i < r - 1 a[i] \u2264 a[i + 1]), then end the function call;  Let $\\operatorname{mid} = \\lfloor \\frac{l + r}{2} \\rfloor$;  Call mergesort(a, l, mid);  Call mergesort(a, mid, r);  Merge segments [l, mid) and [mid, r), making the segment [l, r) sorted in non-descending order. The merge algorithm doesn't call any other functions. \nThe array in this problem is 0-indexed, so to sort the whole array, you need to call mergesort(a, 0, n).\nThe number of calls of function mergesort is very important, so Ivan has decided to calculate it while sorting the array. For example, if a = {1, 2, 3, 4}, then there will be 1 call of mergesort \u2014 mergesort(0, 4), which will check that the array is sorted and then end. If a = {2, 1, 3}, then the number of calls is 3: first of all, you call mergesort(0, 3), which then sets mid = 1 and calls mergesort(0, 1) and mergesort(1, 3), which do not perform any recursive calls because segments (0, 1) and (1, 3) are sorted.\nIvan has implemented the program that counts the number of mergesort calls, but now he needs to test it. To do this, he needs to find an array a such that a is a permutation of size n (that is, the number of elements in a is n, and every integer number from [1, n] can be found in this array), and the number of mergesort calls when sorting the array is exactly k.\nHelp Ivan to find an array he wants!\n-----Input-----\nThe first line contains two numbers n and k (1 \u2264 n \u2264 100000, 1 \u2264 k \u2264 200000) \u2014 the size of a desired permutation and the number of mergesort calls required to sort it.\n-----Output-----\nIf a permutation of size n such that there will be exactly k calls of mergesort while sorting it doesn't exist, output  - 1. Otherwise output n integer numbers a[0], a[1],..., a[n - 1] \u2014 the elements of a permutation that would meet the required conditions. If there are multiple answers, print any of them.\n-----Examples-----\nInput\n3 3\nOutput\n2 1 3 \nInput\n4 1\nOutput\n1 2 3 4 \nInput\n5 6\nOutput\n-1\n\ndef",
        "answer": "def mergesort(a, l, r):\n    if l >= r:\n        return\n    mid = (l + r) // 2\n    mergesort(a, l, mid)\n    mergesort(a, mid + 1, r)\n    merge(a, l, mid, r)",
        "difficulty": "interview"
    },
    {
        "task_id": 2119,
        "prompt": "Complete the Python function given the prompt below:Vasya owns three big integers \u2014 $a, l, r$. Let's define a partition of $x$ such a sequence of strings $s_1, s_2, \\dots, s_k$ that $s_1 + s_2 + \\dots + s_k = x$, where $+$ is a concatanation of strings. $s_i$ is the $i$-th element of the partition. For example, number $12345$ has the following partitions: [\"1\", \"2\", \"3\", \"4\", \"5\"], [\"123\", \"4\", \"5\"], [\"1\", \"2345\"], [\"12345\"] and lots of others.\nLet's call some partition of $a$ beautiful if each of its elements contains no leading zeros.\nVasya want to know the number of beautiful partitions of number $a$, which has each of $s_i$ satisfy the condition $l \\le s_i \\le r$. Note that the comparison is the integer comparison, not the string one.\nHelp Vasya to count the amount of partitions of number $a$ such that they match all the given requirements. The result can be rather big, so print it modulo $998244353$.\n-----Input-----\nThe first line contains a single integer $a~(1 \\le a \\le 10^{1000000})$.\nThe second line contains a single integer $l~(0 \\le l \\le 10^{1000000})$.\nThe third line contains a single integer $r~(0 \\le r \\le 10^{1000000})$.\nIt is guaranteed that $l \\le r$.\nIt is also guaranteed that numbers $a, l, r$ contain no leading zeros.\n-----Output-----\nPrint a single integer \u2014 the amount of partitions of number $a$ such that they match all the given requirements modulo $998244353$.\n-----Examples-----\nInput\n135\n1\n15\nOutput\n2\nInput\n10000\n0\n9\nOutput\n1\n-----Note-----\nIn the first test case, there are two good partitions $13+5$ and $1+3+5$.\nIn the second test case, there is one good partition $1+0+0+0+0$.\n\ndef",
        "answer": "def count_partitions(a, l, r):\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2120,
        "prompt": "Complete the Python function given the prompt below:On Children's Day, the child got a toy from Delayyy as a present. However, the child is so naughty that he can't wait to destroy the toy.\nThe toy consists of n parts and m ropes. Each rope links two parts, but every pair of parts is linked by at most one rope. To split the toy, the child must remove all its parts. The child can remove a single part at a time, and each remove consume an energy. Let's define an energy value of part i as v_{i}. The child spend v_{f}_1 + v_{f}_2 +... + v_{f}_{k} energy for removing part i where f_1, f_2,..., f_{k} are the parts that are directly connected to the i-th and haven't been removed.\nHelp the child to find out, what is the minimum total energy he should spend to remove all n parts.\n-----Input-----\nThe first line contains two integers n and m (1 \u2264 n \u2264 1000; 0 \u2264 m \u2264 2000). The second line contains n integers: v_1, v_2,..., v_{n} (0 \u2264 v_{i} \u2264 10^5). Then followed m lines, each line contains two integers x_{i} and y_{i}, representing a rope from part x_{i} to part y_{i} (1 \u2264 x_{i}, y_{i} \u2264 n;\u00a0x_{i} \u2260 y_{i}).\nConsider all the parts are numbered from 1 to n.\n-----Output-----\nOutput the minimum total energy the child should spend to remove all n parts of the toy.\n-----Examples-----\nInput\n4 3\n10 20 30 40\n1 4\n1 2\n2 3\nOutput\n40\nInput\n4 4\n100 100 100 100\n1 2\n2 3\n2 4\n3 4\nOutput\n400\nInput\n7 10\n40 10 20 10 20 80 40\n1 5\n4 7\n4 5\n5 2\n5 7\n6 4\n1 6\n1 3\n4 3\n1 4\nOutput\n160\n-----Note-----\nOne of the optimal sequence of actions in the first sample is:  First, remove part 3, cost of the action is 20.  Then, remove part 2, cost of the action is 10.  Next, remove part 4, cost of the action is 10.  At last, remove part 1, cost of the action is 0. \nSo the total energy the child paid is 20 + 10 + 10 + 0 = 40, which is the minimum.\nIn the second sample, the child will spend 400 no matter in what order he will remove the parts.\n\ndef",
        "answer": "def minimumEnergy(n, m, v):\n\tv = sorted(v)\n\tv = [0] + v\n\tdp = [[0 for i in range(n + 1)] for j in range(m + 1)]\n\tfor i in range(1, m + 1):\n\t\tfor j in range(1, n + 1):\n\t\t\tif j < v[i]:\n\t\t\t\tdp[i][j] = dp[i - 1][j]\n\t\t\telse:\n\t\t\t\tdp[i][j] = min(dp[i - 1][j], dp[i][j - v[i]] + v[i])\n\treturn dp[m][n]",
        "difficulty": "interview"
    },
    {
        "task_id": 2121,
        "prompt": "Complete the Python function given the prompt below:For his computer science class, Jacob builds a model tree with sticks and balls containing n nodes in the shape of a tree. Jacob has spent a_{i} minutes building the i-th ball in the tree.\nJacob's teacher will evaluate his model and grade Jacob based on the effort he has put in. However, she does not have enough time to search his whole tree to determine this; Jacob knows that she will examine the first k nodes in a DFS-order traversal of the tree. She will then assign Jacob a grade equal to the minimum a_{i} she finds among those k nodes.\nThough Jacob does not have enough time to rebuild his model, he can choose the root node that his teacher starts from. Furthermore, he can rearrange the list of neighbors of each node in any order he likes. Help Jacob find the best grade he can get on this assignment.\nA DFS-order traversal is an ordering of the nodes of a rooted tree, built by a recursive DFS-procedure initially called on the root of the tree. When called on a given node v, the procedure does the following:   Print v.  Traverse the list of neighbors of the node v in order and iteratively call DFS-procedure on each one. Do not call DFS-procedure on node u if you came to node v directly from u. \n-----Input-----\nThe first line of the input contains two positive integers, n and k (2 \u2264 n \u2264 200 000, 1 \u2264 k \u2264 n)\u00a0\u2014 the number of balls in Jacob's tree and the number of balls the teacher will inspect.\nThe second line contains n integers, a_{i} (1 \u2264 a_{i} \u2264 1 000 000), the time Jacob used to build the i-th ball.\nEach of the next n - 1 lines contains two integers u_{i}, v_{i} (1 \u2264 u_{i}, v_{i} \u2264 n, u_{i} \u2260 v_{i}) representing a connection in Jacob's tree between balls u_{i} and v_{i}.\n-----Output-----\nPrint a single integer\u00a0\u2014 the maximum grade Jacob can get by picking the right root of the tree and rearranging the list of neighbors.\n-----Examples-----\nInput\n5 3\n3 6 1 4 2\n1 2\n2 4\n2 5\n1 3\nOutput\n3\nInput\n4 2\n1 5 5 5\n1 2\n1 3\n1 4\nOutput\n1\n-----Note-----\nIn the first sample, Jacob can root the tree at node 2 and order 2's neighbors in the order 4, 1, 5 (all other nodes have at most two neighbors). The resulting preorder traversal is 2, 4, 1, 3, 5, and the minimum a_{i} of the first 3 nodes is 3.\nIn the second sample, it is clear that any preorder traversal will contain node 1 as either its first or second node, so Jacob cannot do better than a grade of 1.\n\ndef",
        "answer": "def solution(n, k, a):\n    # your code here\n    return 0",
        "difficulty": "interview"
    },
    {
        "task_id": 2122,
        "prompt": "Complete the Python function given the prompt below:Whereas humans nowadays read fewer and fewer books on paper, book readership among marmots has surged. Heidi has expanded the library and is now serving longer request sequences.\n-----Input-----\nSame as the easy version, but the limits have changed: 1 \u2264 n, k \u2264 400 000.\n-----Output-----\nSame as the easy version.\n-----Examples-----\nInput\n4 100\n1 2 2 1\nOutput\n2\nInput\n4 1\n1 2 2 1\nOutput\n3\nInput\n4 2\n1 2 3 1\nOutput\n3\n\ndef",
        "answer": "def solution(n, k):\n    # Write your code here\n    pass\n",
        "difficulty": "interview"
    },
    {
        "task_id": 2123,
        "prompt": "Complete the Python function given the prompt below:Caisa solved the problem with the sugar and now he is on the way back to home. \nCaisa is playing a mobile game during his path. There are (n + 1) pylons numbered from 0 to n in this game. The pylon with number 0 has zero height, the pylon with number i (i > 0) has height h_{i}. The goal of the game is to reach n-th pylon, and the only move the player can do is to jump from the current pylon (let's denote its number as k) to the next one (its number will be k + 1). When the player have made such a move, its energy increases by h_{k} - h_{k} + 1 (if this value is negative the player loses energy). The player must have non-negative amount of energy at any moment of the time. \nInitially Caisa stand at 0 pylon and has 0 energy. The game provides a special opportunity: one can pay a single dollar and increase the height of anyone pylon by one. Caisa may use that opportunity several times, but he doesn't want to spend too much money. What is the minimal amount of money he must paid to reach the goal of the game?\n-----Input-----\nThe first line contains integer n (1 \u2264 n \u2264 10^5). The next line contains n integers h_1, h_2,..., h_{n} (1  \u2264  h_{i}  \u2264  10^5) representing the heights of the pylons.\n-----Output-----\nPrint a single number representing the minimum number of dollars paid by Caisa.\n-----Examples-----\nInput\n5\n3 4 3 2 4\nOutput\n4\nInput\n3\n4 4 4\nOutput\n4\n-----Note-----\nIn the first sample he can pay 4 dollars and increase the height of pylon with number 0 by 4 units. Then he can safely pass to the last pylon.\n\ndef",
        "answer": "def caisa_solved_the_problem_with_the_sugar(n, h):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2124,
        "prompt": "Complete the Python function given the prompt below:Recently Vladik discovered a new entertainment\u00a0\u2014 coding bots for social networks. He would like to use machine learning in his bots so now he want to prepare some learning data for them.\nAt first, he need to download t chats. Vladik coded a script which should have downloaded the chats, however, something went wrong. In particular, some of the messages have no information of their sender. It is known that if a person sends several messages in a row, they all are merged into a single message. It means that there could not be two or more messages in a row with the same sender. Moreover, a sender never mention himself in his messages.\nVladik wants to recover senders of all the messages so that each two neighboring messages will have different senders and no sender will mention himself in his messages.\nHe has no idea of how to do this, and asks you for help. Help Vladik to recover senders in each of the chats!\n-----Input-----\nThe first line contains single integer t (1 \u2264 t \u2264 10) \u2014 the number of chats. The t chats follow. Each chat is given in the following format.\nThe first line of each chat description contains single integer n (1 \u2264 n \u2264 100)\u00a0\u2014 the number of users in the chat.\nThe next line contains n space-separated distinct usernames. Each username consists of lowercase and uppercase English letters and digits. The usernames can't start with a digit. Two usernames are different even if they differ only with letters' case. The length of username is positive and doesn't exceed 10 characters.\nThe next line contains single integer m (1 \u2264 m \u2264 100)\u00a0\u2014 the number of messages in the chat. The next m line contain the messages in the following formats, one per line:   <username>:<text>\u00a0\u2014 the format of a message with known sender. The username should appear in the list of usernames of the chat.  <?>:<text>\u00a0\u2014 the format of a message with unknown sender. \nThe text of a message can consist of lowercase and uppercase English letter, digits, characters '.' (dot), ',' (comma), '!' (exclamation mark), '?' (question mark) and'' (space). The text doesn't contain trailing spaces. The length of the text is positive and doesn't exceed 100 characters.\nWe say that a text mention a user if his username appears in the text as a word. In other words, the username appears in a such a position that the two characters before and after its appearance either do not exist or are not English letters or digits. For example, the text \"Vasya, masha13 and Kate!\" can mention users \"Vasya\", \"masha13\", \"and\" and \"Kate\", but not \"masha\".\nIt is guaranteed that in each chat no known sender mention himself in his messages and there are no two neighboring messages with the same known sender.\n-----Output-----\nPrint the information about the t chats in the following format:\nIf it is not possible to recover senders, print single line \"Impossible\" for this chat. Otherwise print m messages in the following format:\n<username>:<text>\nIf there are multiple answers, print any of them.\n-----Examples-----\nInput\n1\n2\nVladik netman\n2\n?: Hello, Vladik!\n?: Hi\nOutput\nnetman: Hello, Vladik!\nVladik: Hi\nInput\n1\n2\nnetman vladik\n3\nnetman:how are you?\n?:wrong message\nvladik:im fine\nOutput\nImpossible\nInput\n2\n3\nnetman vladik Fedosik\n2\n?: users are netman, vladik, Fedosik\nvladik: something wrong with this chat\n4\nnetman tigerrrrr banany2001 klinchuh\n4\n?: tigerrrrr, banany2001, klinchuh, my favourite team ever, are you ready?\nklinchuh: yes, coach!\n?: yes, netman\nbanany2001: yes of course.\nOutput\nImpossible\nnetman: tigerrrrr, banany2001, klinchuh, my favourite team ever, are you ready?\nklinchuh: yes, coach!\ntigerrrrr: yes, netman\nbanany2001: yes of course.\n\ndef",
        "answer": "def solve(t, n, m, usernames, messages):\n    senders = {}\n    for i in range(m):\n        sender, message = messages[i].split(':')\n        if sender not in senders:\n            senders[sender] = set()\n        senders[sender].add(message)\n    for i in range(m):\n        sender, message = messages[i].split(':')\n        if sender not in senders:\n            senders[sender] = set()\n        senders[sender].add(message)\n    for i in range(m):\n        sender, message = messages[i].split(':')\n        if sender not in senders:\n            senders[sender] = set()\n        senders[sender].add(message)\n    for i in range(m):\n        sender, message = messages[i].split(':')\n        if sender not in senders:\n            senders[sender] = set()\n        senders[sender].add(message)\n    for i in range(m):\n        sender, message = messages[i].split(':')\n        if sender not in senders:\n            senders[sender] = set()\n        senders[sender].add(message)\n    for i in range(m):\n        sender, message = messages[i].split(':')\n        if sender not in senders:\n            senders[sender] = set()\n        senders[sender].add(message)\n    for i in range(m):\n        sender, message = messages[i].split(':')\n        if sender not in senders:\n            senders[sender] = set()\n        senders[sender].add(message)\n    for i in range(m):\n        sender, message = messages[i].split(':')\n        if sender not in senders:\n            senders[sender] = set()\n        senders[sender].add(message)\n    for i in range(m):\n        sender, message = messages[i].split(':')\n        if sender not in senders",
        "difficulty": "interview"
    },
    {
        "task_id": 2125,
        "prompt": "Complete the Python function given the prompt below:Innokenty works at a flea market and sells some random stuff rare items. Recently he found an old rectangular blanket. It turned out that the blanket is split in $n \\cdot m$ colored pieces that form a rectangle with $n$ rows and $m$ columns. \nThe colored pieces attracted Innokenty's attention so he immediately came up with the following business plan. If he cuts out a subrectangle consisting of three colored stripes, he can sell it as a flag of some country. Innokenty decided that a subrectangle is similar enough to a flag of some country if it consists of three stripes of equal heights placed one above another, where each stripe consists of cells of equal color. Of course, the color of the top stripe must be different from the color of the middle stripe; and the color of the middle stripe must be different from the color of the bottom stripe.\nInnokenty has not yet decided what part he will cut out, but he is sure that the flag's boundaries should go along grid lines. Also, Innokenty won't rotate the blanket. Please help Innokenty and count the number of different subrectangles Innokenty can cut out and sell as a flag. Two subrectangles located in different places but forming the same flag are still considered different. [Image]\u00a0[Image]\u00a0[Image]\nThese subrectangles are flags.  [Image]\u00a0[Image]\u00a0[Image]\u00a0[Image]\u00a0[Image]\u00a0[Image]\nThese subrectangles are not flags. \n-----Input-----\nThe first line contains two integers $n$ and $m$ ($1 \\le n, m \\le 1\\,000$)\u00a0\u2014 the number of rows and the number of columns on the blanket.\nEach of the next $n$ lines contains $m$ lowercase English letters from 'a' to 'z' and describes a row of the blanket. Equal letters correspond to equal colors, different letters correspond to different colors.\n-----Output-----\nIn the only line print the number of subrectangles which form valid flags.\n-----Examples-----\nInput\n4 3\naaa\nbbb\nccb\nddd\nOutput\n6\nInput\n6 1\na\na\nb\nb\nc\nc\nOutput\n1\n-----Note----- [Image]\u00a0[Image]\nThe selected subrectangles are flags in the first example.\n\ndef",
        "answer": "def solution(n, m):\n    return 0",
        "difficulty": "interview"
    },
    {
        "task_id": 2126,
        "prompt": "Complete the Python function given the prompt below:Luckily, Serval got onto the right bus, and he came to the kindergarten on time. After coming to kindergarten, he found the toy bricks very funny.\nHe has a special interest to create difficult problems for others to solve. This time, with many $1 \\times 1 \\times 1$ toy bricks, he builds up a 3-dimensional object. We can describe this object with a $n \\times m$ matrix, such that in each cell $(i,j)$, there are $h_{i,j}$ bricks standing on the top of each other.\nHowever, Serval doesn't give you any $h_{i,j}$, and just give you the front view, left view, and the top view of this object, and he is now asking you to restore the object. Note that in the front view, there are $m$ columns, and in the $i$-th of them, the height is the maximum of $h_{1,i},h_{2,i},\\dots,h_{n,i}$. It is similar for the left view, where there are $n$ columns. And in the top view, there is an $n \\times m$ matrix $t_{i,j}$, where $t_{i,j}$ is $0$ or $1$. If $t_{i,j}$ equals $1$, that means $h_{i,j}>0$, otherwise, $h_{i,j}=0$.\nHowever, Serval is very lonely because others are bored about his unsolvable problems before, and refused to solve this one, although this time he promises there will be at least one object satisfying all the views. As his best friend, can you have a try?\n-----Input-----\nThe first line contains three positive space-separated integers $n, m, h$ ($1\\leq n, m, h \\leq 100$)\u00a0\u2014 the length, width and height.\nThe second line contains $m$ non-negative space-separated integers $a_1,a_2,\\dots,a_m$, where $a_i$ is the height in the $i$-th column from left to right of the front view ($0\\leq a_i \\leq h$).\nThe third line contains $n$ non-negative space-separated integers $b_1,b_2,\\dots,b_n$ ($0\\leq b_j \\leq h$), where $b_j$ is the height in the $j$-th column from left to right of the left view.\nEach of the following $n$ lines contains $m$ numbers, each is $0$ or $1$, representing the top view, where $j$-th number of $i$-th row is $1$ if $h_{i, j}>0$, and $0$ otherwise.\nIt is guaranteed that there is at least one structure satisfying the input.\n-----Output-----\nOutput $n$ lines, each of them contains $m$ integers, the $j$-th number in the $i$-th line should be equal to the height in the corresponding position of the top view. If there are several objects satisfying the views, output any one of them.\n-----Examples-----\nInput\n3 7 3\n2 3 0 0 2 0 1\n2 1 3\n1 0 0 0 1 0 0\n0 0 0 0 0 0 1\n1 1 0 0 0 0 0\nOutput\n1 0 0 0 2 0 0\n0 0 0 0 0 0 1\n2 3 0 0 0 0 0\nInput\n4 5 5\n3 5 2 0 4\n4 2 5 4\n0 0 0 0 1\n1 0 1 0 0\n0 1 0 0 0\n1 1 1 0 0\nOutput\n0 0 0 0 4\n1 0 2 0 0\n0 5 0 0 0\n3 4 1 0 0\n-----Note-----\n [Image] \nThe graph above illustrates the object in the first example.\n [Image] \n [Image] \nThe first graph illustrates the object in the example output for the second example, and the second graph shows the three-view drawing of it.\n\ndef",
        "answer": "def brick_builder(n, m, h):\n    # Write your code here",
        "difficulty": "interview"
    },
    {
        "task_id": 2127,
        "prompt": "Complete the Python function given the prompt below:Polycarp has recently got himself a new job. He now earns so much that his old wallet can't even store all the money he has.\nBerland bills somehow come in lots of different sizes. However, all of them are shaped as rectangles (possibly squares). All wallets are also produced in form of rectangles (possibly squares).\nA bill $x \\times y$ fits into some wallet $h \\times w$ if either $x \\le h$ and $y \\le w$ or $y \\le h$ and $x \\le w$. Bills can overlap with each other in a wallet and an infinite amount of bills can fit into a wallet. That implies that all the bills Polycarp currently have fit into a wallet if every single one of them fits into it independently of the others.\nNow you are asked to perform the queries of two types:\n  $+~x~y$ \u2014 Polycarp earns a bill of size $x \\times y$;  $?~h~w$ \u2014 Polycarp wants to check if all the bills he has earned to this moment fit into a wallet of size $h \\times w$. \nIt is guaranteed that there is at least one query of type $1$ before the first query of type $2$ and that there is at least one query of type $2$ in the input data.\nFor each query of type $2$ print \"YES\" if all the bills he has earned to this moment fit into a wallet of given size. Print \"NO\" otherwise.\n-----Input-----\nThe first line contains a single integer $n$ ($2 \\le n \\le 5 \\cdot 10^5$) \u2014 the number of queries.\nEach of the next $n$ lines contains a query of one of these two types:\n  $+~x~y$ ($1 \\le x, y \\le 10^9$) \u2014 Polycarp earns a bill of size $x \\times y$;  $?~h~w$ ($1 \\le h, w \\le 10^9$) \u2014 Polycarp wants to check if all the bills he has earned to this moment fit into a wallet of size $h \\times w$. \nIt is guaranteed that there is at least one query of type $1$ before the first query of type $2$ and that there is at least one query of type $2$ in the input data.\n-----Output-----\nFor each query of type $2$ print \"YES\" if all the bills he has earned to this moment fit into a wallet of given size. Print \"NO\" otherwise.\n-----Example-----\nInput\n9\n+ 3 2\n+ 2 3\n? 1 20\n? 3 3\n? 2 3\n+ 1 5\n? 10 10\n? 1 5\n+ 1 1\nOutput\nNO\nYES\nYES\nYES\nNO\n-----Note-----\nThe queries of type $2$ of the example:\n  Neither bill fits;  Both bills fit (just checking that you got that bills can overlap);  Both bills fit (both bills are actually the same);  All bills fit (too much of free space in a wallet is not a problem);  Only bill $1 \\times 5$ fit (all the others don't, thus it's \"NO\").\n\ndef",
        "answer": "def solve(n, queries):\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2128,
        "prompt": "Complete the Python function given the prompt below:Creatnx has $n$ mirrors, numbered from $1$ to $n$. Every day, Creatnx asks exactly one mirror \"Am I beautiful?\". The $i$-th mirror will tell Creatnx that he is beautiful with probability $\\frac{p_i}{100}$ for all $1 \\le i \\le n$.\nCreatnx asks the mirrors one by one, starting from the $1$-st mirror. Every day, if he asks $i$-th mirror, there are two possibilities:  The $i$-th mirror tells Creatnx that he is beautiful. In this case, if $i = n$ Creatnx will stop and become happy, otherwise he will continue asking the $i+1$-th mirror next day;  In the other case, Creatnx will feel upset. The next day, Creatnx will start asking from the $1$-st mirror again. \nYou need to calculate the expected number of days until Creatnx becomes happy.\nThis number should be found by modulo $998244353$. Formally, let $M = 998244353$. It can be shown that the answer can be expressed as an irreducible fraction $\\frac{p}{q}$, where $p$ and $q$ are integers and $q \\not \\equiv 0 \\pmod{M}$. Output the integer equal to $p \\cdot q^{-1} \\bmod M$. In other words, output such an integer $x$ that $0 \\le x < M$ and $x \\cdot q \\equiv p \\pmod{M}$.\n-----Input-----\nThe first line contains one integer $n$ ($1\\le n\\le 2\\cdot 10^5$)\u00a0\u2014 the number of mirrors.\nThe second line contains $n$ integers $p_1, p_2, \\ldots, p_n$ ($1 \\leq p_i \\leq 100$).\n-----Output-----\nPrint the answer modulo $998244353$ in a single line.\n-----Examples-----\nInput\n1\n50\nOutput\n2\nInput\n3\n10 20 50\nOutput\n112\n-----Note-----\nIn the first test, there is only one mirror and it tells, that Creatnx is beautiful with probability $\\frac{1}{2}$. So, the expected number of days until Creatnx becomes happy is $2$.\n\ndef",
        "answer": "def solution(n, p):\n    return sum(p) % 998244353",
        "difficulty": "interview"
    },
    {
        "task_id": 2129,
        "prompt": "Complete the Python function given the prompt below:There are n cities and m two-way roads in Berland, each road connects two cities. It is known that there is no more than one road connecting each pair of cities, and there is no road which connects the city with itself. It is possible that there is no way to get from one city to some other city using only these roads.\nThe road minister decided to make a reform in Berland and to orient all roads in the country, i.e. to make each road one-way. The minister wants to maximize the number of cities, for which the number of roads that begins in the city equals to the number of roads that ends in it.\n-----Input-----\nThe first line contains a positive integer t (1 \u2264 t \u2264 200)\u00a0\u2014 the number of testsets in the input.\nEach of the testsets is given in the following way. The first line contains two integers n and m (1 \u2264 n \u2264 200, 0 \u2264 m \u2264 n\u00b7(n - 1) / 2)\u00a0\u2014 the number of cities and the number of roads in Berland. \nThe next m lines contain the description of roads in Berland. Each line contains two integers u and v (1 \u2264 u, v \u2264 n)\u00a0\u2014 the cities the corresponding road connects. It's guaranteed that there are no self-loops and multiple roads. It is possible that there is no way along roads between a pair of cities.\nIt is guaranteed that the total number of cities in all testset of input data doesn't exceed 200.\nPay attention that for hacks, you can only use tests consisting of one testset, so t should be equal to one.\n-----Output-----\nFor each testset print the maximum number of such cities that the number of roads that begins in the city, is equal to the number of roads that ends in it.\nIn the next m lines print oriented roads. First print the number of the city where the road begins and then the number of the city where the road ends. If there are several answers, print any of them. It is allowed to print roads in each test in arbitrary order. Each road should be printed exactly once. \n-----Example-----\nInput\n2\n5 5\n2 1\n4 5\n2 3\n1 3\n3 5\n7 2\n3 7\n4 2\nOutput\n3\n1 3\n3 5\n5 4\n3 2\n2 1\n3\n2 4\n3 7\n\ndef",
        "answer": "def roads(n, m, roads):\n    roads = sorted(roads, key=lambda x: x[0])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0])\n    roads = sorted(roads, key=lambda x: x[1])\n    roads = sorted(roads, key=lambda x: x[0",
        "difficulty": "interview"
    },
    {
        "task_id": 2130,
        "prompt": "Complete the Python function given the prompt below:Vitya has learned that the answer for The Ultimate Question of Life, the Universe, and Everything is not the integer 54 42, but an increasing integer sequence $a_1, \\ldots, a_n$. In order to not reveal the secret earlier than needed, Vitya encrypted the answer and obtained the sequence $b_1, \\ldots, b_n$ using the following rules:\n  $b_1 = a_1$;\n $b_i = a_i \\oplus a_{i - 1}$ for all $i$ from 2 to $n$, where $x \\oplus y$ is the bitwise XOR of $x$ and $y$. \nIt is easy to see that the original sequence can be obtained using the rule $a_i = b_1 \\oplus \\ldots \\oplus b_i$.\nHowever, some time later Vitya discovered that the integers $b_i$ in the cypher got shuffled, and it can happen that when decrypted using the rule mentioned above, it can produce a sequence that is not increasing. In order to save his reputation in the scientific community, Vasya decided to find some permutation of integers $b_i$ so that the sequence $a_i = b_1 \\oplus \\ldots \\oplus b_i$ is strictly increasing. Help him find such a permutation or determine that it is impossible.\n-----Input-----\nThe first line contains a single integer $n$ ($1 \\leq n \\leq 10^5$).\nThe second line contains $n$ integers $b_1, \\ldots, b_n$ ($1 \\leq b_i < 2^{60}$).\n-----Output-----\nIf there are no valid permutations, print a single line containing \"No\".\nOtherwise in the first line print the word \"Yes\", and in the second line print integers $b'_1, \\ldots, b'_n$\u00a0\u2014 a valid permutation of integers $b_i$. The unordered multisets $\\{b_1, \\ldots, b_n\\}$ and $\\{b'_1, \\ldots, b'_n\\}$ should be equal, i.\u00a0e. for each integer $x$ the number of occurrences of $x$ in the first multiset should be equal to the number of occurrences of $x$ in the second multiset. Apart from this, the sequence $a_i = b'_1 \\oplus \\ldots \\oplus b'_i$ should be strictly increasing.\nIf there are multiple answers, print any of them.\n-----Examples-----\nInput\n3\n1 2 3\nOutput\nNo\nInput\n6\n4 7 7 12 31 61\nOutput\nYes\n4 12 7 31 7 61 \n-----Note-----\nIn the first example no permutation is valid.\nIn the second example the given answer lead to the sequence $a_1 = 4$, $a_2 = 8$, $a_3 = 15$, $a_4 = 16$, $a_5 = 23$, $a_6 = 42$.\n\ndef",
        "answer": "def solve(n, b):\n    b = sorted(b)\n    for i in range(1, n):\n        if b[i]!= b[i - 1] + 1:\n            return \"No\"\n    return \"Yes\"",
        "difficulty": "interview"
    },
    {
        "task_id": 2131,
        "prompt": "Complete the Python function given the prompt below:Ramesses knows a lot about problems involving trees (undirected connected graphs without cycles)!\nHe created a new useful tree decomposition, but he does not know how to construct it, so he asked you for help!\nThe decomposition is the splitting the edges of the tree in some simple paths in such a way that each two paths have at least one common vertex. Each edge of the tree should be in exactly one path.\nHelp Remesses, find such a decomposition of the tree or derermine that there is no such decomposition.\n-----Input-----\nThe first line contains a single integer $n$ ($2 \\leq n \\leq 10^{5}$) the number of nodes in the tree.\nEach of the next $n - 1$ lines contains two integers $a_i$ and $b_i$ ($1 \\leq a_i, b_i \\leq n$, $a_i \\neq b_i$)\u00a0\u2014 the edges of the tree. It is guaranteed that the given edges form a tree.\n-----Output-----\nIf there are no decompositions, print the only line containing \"No\".\nOtherwise in the first line print \"Yes\", and in the second line print the number of paths in the decomposition $m$. \nEach of the next $m$ lines should contain two integers $u_i$, $v_i$ ($1 \\leq u_i, v_i \\leq n$, $u_i \\neq v_i$) denoting that one of the paths in the decomposition is the simple path between nodes $u_i$ and $v_i$. \nEach pair of paths in the decomposition should have at least one common vertex, and each edge of the tree should be presented in exactly one path. You can print the paths and the ends of each path in arbitrary order.\nIf there are multiple decompositions, print any.\n-----Examples-----\nInput\n4\n1 2\n2 3\n3 4\nOutput\nYes\n1\n1 4\nInput\n6\n1 2\n2 3\n3 4\n2 5\n3 6\nOutput\nNo\nInput\n5\n1 2\n1 3\n1 4\n1 5\nOutput\nYes\n4\n1 2\n1 3\n1 4\n1 5\n-----Note-----\nThe tree from the first example is shown on the picture below: [Image] The number next to each edge corresponds to the path number in the decomposition. It is easy to see that this decomposition suits the required conditions.\nThe tree from the second example is shown on the picture below: [Image] We can show that there are no valid decompositions of this tree.\nThe tree from the third example is shown on the picture below: [Image] The number next to each edge corresponds to the path number in the decomposition. It is easy to see that this decomposition suits the required conditions.\n\ndef",
        "answer": "def treeDecomposition(n, edges):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2132,
        "prompt": "Complete the Python function given the prompt below:Polycarp has just attempted to pass the driving test. He ran over the straight road with the signs of four types.\n  speed limit: this sign comes with a positive integer number \u2014 maximal speed of the car after the sign (cancel the action of the previous sign of this type);  overtake is allowed: this sign means that after some car meets it, it can overtake any other car;  no speed limit: this sign cancels speed limit if any (car can move with arbitrary speed after this sign);  no overtake allowed: some car can't overtake any other car after this sign. \nPolycarp goes past the signs consequentially, each new sign cancels the action of all the previous signs of it's kind (speed limit/overtake). It is possible that two or more \"no overtake allowed\" signs go one after another with zero \"overtake is allowed\" signs between them. It works with \"no speed limit\" and \"overtake is allowed\" signs as well.\nIn the beginning of the ride overtake is allowed and there is no speed limit.\nYou are given the sequence of events in chronological order \u2014 events which happened to Polycarp during the ride. There are events of following types:\n  Polycarp changes the speed of his car to specified (this event comes with a positive integer number);  Polycarp's car overtakes the other car;  Polycarp's car goes past the \"speed limit\" sign (this sign comes with a positive integer);  Polycarp's car goes past the \"overtake is allowed\" sign;  Polycarp's car goes past the \"no speed limit\";  Polycarp's car goes past the \"no overtake allowed\"; \nIt is guaranteed that the first event in chronological order is the event of type 1 (Polycarp changed the speed of his car to specified).\nAfter the exam Polycarp can justify his rule violations by telling the driving instructor that he just didn't notice some of the signs. What is the minimal number of signs Polycarp should say he didn't notice, so that he would make no rule violations from his point of view?\n-----Input-----\nThe first line contains one integer number n (1 \u2264 n \u2264 2\u00b710^5) \u2014 number of events.\nEach of the next n lines starts with integer t (1 \u2264 t \u2264 6) \u2014 the type of the event.\nAn integer s (1 \u2264 s \u2264 300) follows in the query of the first and the third type (if it is the query of first type, then it's new speed of Polycarp's car, if it is the query of third type, then it's new speed limit).\nIt is guaranteed that the first event in chronological order is the event of type 1 (Polycarp changed the speed of his car to specified).\n-----Output-----\nPrint the minimal number of road signs Polycarp should say he didn't notice, so that he would make no rule violations from his point of view.\n-----Examples-----\nInput\n11\n1 100\n3 70\n4\n2\n3 120\n5\n3 120\n6\n1 150\n4\n3 300\nOutput\n2\nInput\n5\n1 100\n3 200\n2\n4\n5\nOutput\n0\nInput\n7\n1 20\n2\n6\n4\n6\n6\n2\nOutput\n2\n-----Note-----\nIn the first example Polycarp should say he didn't notice the \"speed limit\" sign with the limit of 70 and the second \"speed limit\" sign with the limit of 120.\nIn the second example Polycarp didn't make any rule violation.\nIn the third example Polycarp should say he didn't notice both \"no overtake allowed\" that came after \"overtake is allowed\" sign.\n\ndef",
        "answer": "def solution(n, t, s):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2133,
        "prompt": "Complete the Python function given the prompt below:Anton is growing a tree in his garden. In case you forgot, the tree is a connected acyclic undirected graph.\nThere are n vertices in the tree, each of them is painted black or white. Anton doesn't like multicolored trees, so he wants to change the tree such that all vertices have the same color (black or white).\nTo change the colors Anton can use only operations of one type. We denote it as paint(v), where v is some vertex of the tree. This operation changes the color of all vertices u such that all vertices on the shortest path from v to u have the same color (including v and u). For example, consider the tree [Image] \nand apply operation paint(3) to get the following: [Image] \nAnton is interested in the minimum number of operation he needs to perform in order to make the colors of all vertices equal.\n-----Input-----\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 200 000)\u00a0\u2014 the number of vertices in the tree.\nThe second line contains n integers color_{i} (0 \u2264 color_{i} \u2264 1)\u00a0\u2014 colors of the vertices. color_{i} = 0 means that the i-th vertex is initially painted white, while color_{i} = 1 means it's initially painted black.\nThen follow n - 1 line, each of them contains a pair of integers u_{i} and v_{i} (1 \u2264 u_{i}, v_{i} \u2264 n, u_{i} \u2260 v_{i})\u00a0\u2014 indices of vertices connected by the corresponding edge. It's guaranteed that all pairs (u_{i}, v_{i}) are distinct, i.e. there are no multiple edges.\n-----Output-----\nPrint one integer\u00a0\u2014 the minimum number of operations Anton has to apply in order to make all vertices of the tree black or all vertices of the tree white.\n-----Examples-----\nInput\n11\n0 0 0 1 1 0 1 0 0 1 1\n1 2\n1 3\n2 4\n2 5\n5 6\n5 7\n3 8\n3 9\n3 10\n9 11\nOutput\n2\nInput\n4\n0 0 0 0\n1 2\n2 3\n3 4\nOutput\n0\n-----Note-----\nIn the first sample, the tree is the same as on the picture. If we first apply operation paint(3) and then apply paint(6), the tree will become completely black, so the answer is 2.\nIn the second sample, the tree is already white, so there is no need to apply any operations and the answer is 0.\n\ndef",
        "answer": "def paint(v):\n    if v == 1:\n        return 0\n    if v == 2:\n        return 1\n    if v == 3:\n        return 2\n    if v == 4:\n        return 3\n    if v == 5:\n        return 4\n    if v == 6:\n        return 5\n    if v == 7:\n        return 6\n    if v == 8:\n        return 7\n    if v == 9:\n        return 8\n    if v == 10:\n        return 9\n    if v == 11:\n        return 10\n    if v == 12:\n        return 11\n    if v == 13:\n        return 12\n    if v == 14:\n        return 13\n    if v == 15:\n        return 14\n    if v == 16:\n        return 15\n    if v == 17:\n        return 16\n    if v == 18:\n        return 17\n    if v == 19:\n        return 18\n    if v == 20:\n        return 19\n    if v == 21:\n        return 20\n    if v == 22:\n        return 21\n    if v == 23:\n        return 22\n    if v == 24:\n        return 23\n    if v == 25:\n        return 24\n    if v == 26:\n        return 25\n    if v == 27:\n        return 26\n    if v == 28:\n        return 27\n    if v == 29:\n        return 28\n    if v == 30:\n        return 29\n    if v == 31:\n        return 30\n    if v == 32:\n        return 31\n    if v == 33:\n        return 32\n    if v == 34:\n        return 33\n    if v == 35:\n        return 34\n    if v == 36:\n        return 35\n    if v == 37:\n        return 36\n    if v == 38:\n        return 37\n    if v == 39:\n        return 38\n    if v == 40:\n        return 39\n    if v == 41:\n        return 40\n    if v == 42:\n        return 41\n    if v == 43:\n        return 42\n    if v == 44:\n        return 43\n    if v == 45:\n        return 44\n",
        "difficulty": "interview"
    },
    {
        "task_id": 2134,
        "prompt": "Complete the Python function given the prompt below:Marcin is a coach in his university. There are $n$ students who want to attend a training camp. Marcin is a smart coach, so he wants to send only the students that can work calmly with each other.\nLet's focus on the students. They are indexed with integers from $1$ to $n$. Each of them can be described with two integers $a_i$ and $b_i$; $b_i$ is equal to the skill level of the $i$-th student (the higher, the better). Also, there are $60$ known algorithms, which are numbered with integers from $0$ to $59$. If the $i$-th student knows the $j$-th algorithm, then the $j$-th bit ($2^j$) is set in the binary representation of $a_i$. Otherwise, this bit is not set.\nStudent $x$ thinks that he is better than student $y$ if and only if $x$ knows some algorithm which $y$ doesn't know. Note that two students can think that they are better than each other. A group of students can work together calmly if no student in this group thinks that he is better than everyone else in this group.\nMarcin wants to send a group of at least two students which will work together calmly and will have the maximum possible sum of the skill levels. What is this sum?\n-----Input-----\nThe first line contains one integer $n$ ($1 \\leq n \\leq 7000$) \u2014 the number of students interested in the camp.\nThe second line contains $n$ integers. The $i$-th of them is $a_i$ ($0 \\leq a_i < 2^{60}$).\nThe third line contains $n$ integers. The $i$-th of them is $b_i$ ($1 \\leq b_i \\leq 10^9$).\n-----Output-----\nOutput one integer which denotes the maximum sum of $b_i$ over the students in a group of students which can work together calmly. If no group of at least two students can work together calmly, print 0.\n-----Examples-----\nInput\n4\n3 2 3 6\n2 8 5 10\nOutput\n15\nInput\n3\n1 2 3\n1 2 3\nOutput\n0\nInput\n1\n0\n1\nOutput\n0\n-----Note-----\nIn the first sample test, it's optimal to send the first, the second and the third student to the camp. It's also possible to send only the first and the third student, but they'd have a lower sum of $b_i$.\nIn the second test, in each group of at least two students someone will always think that he is better than everyone else in the subset.\n\ndef",
        "answer": "def marcin_is_a_coach(n, a, b):\n    # your code here\n    return 0",
        "difficulty": "interview"
    },
    {
        "task_id": 2135,
        "prompt": "Complete the Python function given the prompt below:They say \"years are like dominoes, tumbling one after the other\". But would a year fit into a grid? I don't think so.\nLimak is a little polar bear who loves to play. He has recently got a rectangular grid with h rows and w columns. Each cell is a square, either empty (denoted by '.') or forbidden (denoted by '#'). Rows are numbered 1 through h from top to bottom. Columns are numbered 1 through w from left to right.\nAlso, Limak has a single domino. He wants to put it somewhere in a grid. A domino will occupy exactly two adjacent cells, located either in one row or in one column. Both adjacent cells must be empty and must be inside a grid.\nLimak needs more fun and thus he is going to consider some queries. In each query he chooses some rectangle and wonders, how many way are there to put a single domino inside of the chosen rectangle?\n-----Input-----\nThe first line of the input contains two integers h and w (1 \u2264 h, w \u2264 500)\u00a0\u2013 the number of rows and the number of columns, respectively.\nThe next h lines describe a grid. Each line contains a string of the length w. Each character is either '.' or '#'\u00a0\u2014 denoting an empty or forbidden cell, respectively.\nThe next line contains a single integer q (1 \u2264 q \u2264 100 000)\u00a0\u2014 the number of queries.\nEach of the next q lines contains four integers r1_{i}, c1_{i}, r2_{i}, c2_{i} (1 \u2264 r1_{i} \u2264 r2_{i} \u2264 h, 1 \u2264 c1_{i} \u2264 c2_{i} \u2264 w)\u00a0\u2014 the i-th query. Numbers r1_{i} and c1_{i} denote the row and the column (respectively) of the upper left cell of the rectangle. Numbers r2_{i} and c2_{i} denote the row and the column (respectively) of the bottom right cell of the rectangle.\n-----Output-----\nPrint q integers, i-th should be equal to the number of ways to put a single domino inside the i-th rectangle.\n-----Examples-----\nInput\n5 8\n....#..#\n.#......\n##.#....\n##..#.##\n........\n4\n1 1 2 3\n4 1 4 1\n1 2 4 5\n2 5 5 8\nOutput\n4\n0\n10\n15\nInput\n7 39\n.......................................\n.###..###..#..###.....###..###..#..###.\n...#..#.#..#..#.........#..#.#..#..#...\n.###..#.#..#..###.....###..#.#..#..###.\n.#....#.#..#....#.....#....#.#..#..#.#.\n.###..###..#..###.....###..###..#..###.\n.......................................\n6\n1 1 3 20\n2 10 6 30\n2 10 7 30\n2 2 7 7\n1 7 7 7\n1 8 7 8\nOutput\n53\n89\n120\n23\n0\n2\n-----Note-----\nA red frame below corresponds to the first query of the first sample. A domino can be placed in 4 possible ways. [Image]\n\ndef",
        "answer": "def solution(h, w, grid):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2136,
        "prompt": "Complete the Python function given the prompt below:Pink Floyd are pulling a prank on Roger Waters. They know he doesn't like walls, he wants to be able to walk freely, so they are blocking him from exiting his room which can be seen as a grid.\nRoger Waters has a square grid of size $n\\times n$ and he wants to traverse his grid from the upper left ($1,1$) corner to the lower right corner ($n,n$). Waters can move from a square to any other square adjacent by a side, as long as he is still in the grid. Also except for the cells ($1,1$) and ($n,n$) every cell has a value $0$ or $1$ in it.\nBefore starting his traversal he will pick either a $0$ or a $1$ and will be able to only go to cells values in which are equal to the digit he chose. The starting and finishing cells ($1,1$) and ($n,n$) are exempt from this rule, he may go through them regardless of picked digit. Because of this the cell ($1,1$) takes value the letter 'S' and the cell ($n,n$) takes value the letter 'F'.\nFor example, in the first example test case, he can go from ($1, 1$) to ($n, n$) by using the zeroes on this path: ($1, 1$), ($2, 1$), ($2, 2$), ($2, 3$), ($3, 3$), ($3, 4$), ($4, 4$)\nThe rest of the band (Pink Floyd) wants Waters to not be able to do his traversal, so while he is not looking they will invert at most two cells in the grid (from $0$ to $1$ or vice versa). They are afraid they will not be quick enough and asked for your help in choosing the cells.  Note that you cannot invert cells $(1, 1)$ and $(n, n)$.\nWe can show that there always exists a solution for the given constraints.\nAlso note that Waters will pick his digit of the traversal after the band has changed his grid, so he must not be able to reach ($n,n$) no matter what digit he picks.\n-----Input-----\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 50$). Description of the test cases follows.\nThe first line of each test case contains one integers $n$ ($3 \\le n \\le 200$).\nThe following $n$ lines of each test case contain the binary grid, square ($1, 1$) being colored in 'S' and square ($n, n$) being colored in 'F'.\nThe sum of values of $n$ doesn't exceed $200$.\n-----Output-----\nFor each test case output on the first line an integer $c$ ($0 \\le c \\le 2$) \u00a0\u2014 the number of inverted cells.\nIn $i$-th of the following $c$ lines, print the coordinates of the $i$-th cell you inverted. You may not invert the same cell twice.  Note that you cannot invert cells $(1, 1)$ and $(n, n)$.\n-----Example-----\nInput\n3\n4\nS010\n0001\n1000\n111F\n3\nS10\n101\n01F\n5\nS0101\n00000\n01111\n11111\n0001F\nOutput\n1\n3 4\n2\n1 2\n2 1\n0\n-----Note-----\nFor the first test case, after inverting the cell, we get the following grid:\nS010\n0001\n1001\n111F\n\ndef",
        "answer": "def invert(grid):\n    n = len(grid)\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 'S':\n                grid[i][j] = 'F'\n            elif grid[i][j] == 'F':\n                grid[i][j] = 'S'\n    return grid",
        "difficulty": "interview"
    },
    {
        "task_id": 2137,
        "prompt": "Complete the Python function given the prompt below:Ghosts live in harmony and peace, they travel the space without any purpose other than scare whoever stands in their way.\nThere are $n$ ghosts in the universe, they move in the $OXY$ plane, each one of them has its own velocity that does not change in time: $\\overrightarrow{V} = V_{x}\\overrightarrow{i} + V_{y}\\overrightarrow{j}$ where $V_{x}$ is its speed on the $x$-axis and $V_{y}$ is on the $y$-axis.\nA ghost $i$ has experience value $EX_i$, which represent how many ghosts tried to scare him in his past. Two ghosts scare each other if they were in the same cartesian point at a moment of time.\nAs the ghosts move with constant speed, after some moment of time there will be no further scaring (what a relief!) and the experience of ghost kind $GX = \\sum_{i=1}^{n} EX_i$ will never increase.\nTameem is a red giant, he took a picture of the cartesian plane at a certain moment of time $T$, and magically all the ghosts were aligned on a line of the form $y = a \\cdot x + b$. You have to compute what will be the experience index of the ghost kind $GX$ in the indefinite future, this is your task for today.\nNote that when Tameem took the picture, $GX$ may already be greater than $0$, because many ghosts may have scared one another at any moment between $[-\\infty, T]$.\n-----Input-----\nThe first line contains three integers $n$, $a$ and $b$ ($1 \\leq n \\leq 200000$, $1 \\leq |a| \\leq 10^9$, $0 \\le |b| \\le 10^9$)\u00a0\u2014 the number of ghosts in the universe and the parameters of the straight line.\nEach of the next $n$ lines contains three integers $x_i$, $V_{xi}$, $V_{yi}$ ($-10^9 \\leq x_i \\leq 10^9$, $-10^9 \\leq V_{x i}, V_{y i} \\leq 10^9$), where $x_i$ is the current $x$-coordinate of the $i$-th ghost (and $y_i = a \\cdot x_i + b$).\nIt is guaranteed that no two ghosts share the same initial position, in other words, it is guaranteed that for all $(i,j)$ $x_i \\neq x_j$ for $i \\ne j$.\n-----Output-----\nOutput one line: experience index of the ghost kind $GX$ in the indefinite future.\n-----Examples-----\nInput\n4 1 1\n1 -1 -1\n2 1 1\n3 1 1\n4 -1 -1\nOutput\n8\nInput\n3 1 0\n-1 1 0\n0 0 -1\n1 -1 -2\nOutput\n6\nInput\n3 1 0\n0 0 0\n1 0 0\n2 0 0\nOutput\n0\n-----Note-----\nThere are four collisions $(1,2,T-0.5)$, $(1,3,T-1)$, $(2,4,T+1)$, $(3,4,T+0.5)$, where $(u,v,t)$ means a collision happened between ghosts $u$ and $v$ at moment $t$. At each collision, each ghost gained one experience point, this means that $GX = 4 \\cdot 2 = 8$.\nIn the second test, all points will collide when $t = T + 1$.  [Image] \nThe red arrow represents the 1-st ghost velocity, orange represents the 2-nd ghost velocity, and blue represents the 3-rd ghost velocity.\n\ndef",
        "answer": "def ghost_experience(n, a, b):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2138,
        "prompt": "Complete the Python function given the prompt below:You are given a sequence of n positive integers d_1, d_2,..., d_{n} (d_1 < d_2 <... < d_{n}). Your task is to construct an undirected graph such that:\n  there are exactly d_{n} + 1 vertices;  there are no self-loops;  there are no multiple edges;  there are no more than 10^6 edges;  its degree set is equal to d. \nVertices should be numbered 1 through (d_{n} + 1).\nDegree sequence is an array a with length equal to the number of vertices in a graph such that a_{i} is the number of vertices adjacent to i-th vertex.\nDegree set is a sorted in increasing order sequence of all distinct values from the degree sequence.\nIt is guaranteed that there exists such a graph that all the conditions hold, and it contains no more than 10^6 edges.\nPrint the resulting graph.\n-----Input-----\nThe first line contains one integer n (1 \u2264 n \u2264 300) \u2014 the size of the degree set.\nThe second line contains n integers d_1, d_2,..., d_{n} (1 \u2264 d_{i} \u2264 1000, d_1 < d_2 <... < d_{n}) \u2014 the degree set.\n-----Output-----\nIn the first line print one integer m (1 \u2264 m \u2264 10^6) \u2014 the number of edges in the resulting graph. It is guaranteed that there exists such a graph that all the conditions hold and it contains no more than 10^6 edges.\nEach of the next m lines should contain two integers v_{i} and u_{i} (1 \u2264 v_{i}, u_{i} \u2264 d_{n} + 1) \u2014 the description of the i-th edge.\n-----Examples-----\nInput\n3\n2 3 4\nOutput\n8\n3 1\n4 2\n4 5\n2 5\n5 1\n3 2\n2 1\n5 3\nInput\n3\n1 2 3\nOutput\n4\n1 2\n1 3\n1 4\n2 3\n\ndef",
        "answer": "def find_graph(d):\n\tn = len(d)\n\tgraph = [[] for i in range(n + 1)]\n\tfor i in range(n):\n\t\tfor j in range(i + 1, n):\n\t\t\tif d[i] < d[j]:\n\t\t\t\tgraph[i].append(j)\n\t\t\t\tgraph[j].append(i)\n\treturn graph",
        "difficulty": "interview"
    },
    {
        "task_id": 2139,
        "prompt": "Complete the Python function given the prompt below:The bear has a string s = s_1s_2... s_{|}s| (record |s| is the string's length), consisting of lowercase English letters. The bear wants to count the number of such pairs of indices i, j (1 \u2264 i \u2264 j \u2264 |s|), that string x(i, j) = s_{i}s_{i} + 1... s_{j} contains at least one string \"bear\" as a substring.\nString x(i, j) contains string \"bear\", if there is such index k (i \u2264 k \u2264 j - 3), that s_{k} = b, s_{k} + 1 = e, s_{k} + 2 = a, s_{k} + 3 = r.\nHelp the bear cope with the given problem.\n-----Input-----\nThe first line contains a non-empty string s (1 \u2264 |s| \u2264 5000). It is guaranteed that the string only consists of lowercase English letters.\n-----Output-----\nPrint a single number \u2014 the answer to the problem.\n-----Examples-----\nInput\nbearbtear\nOutput\n6\nInput\nbearaabearc\nOutput\n20\n-----Note-----\nIn the first sample, the following pairs (i, j) match: (1, 4), (1, 5), (1, 6), (1, 7), (1, 8), (1, 9).\nIn the second sample, the following pairs (i, j) match: (1,  4), (1,  5), (1,  6), (1,  7), (1,  8), (1,  9), (1,  10), (1,  11), (2,  10), (2,  11), (3,  10), (3,  11), (4,  10), (4,  11), (5,  10), (5,  11), (6,  10), (6,  11), (7,  10), (7,  11).\n\ndef",
        "answer": "def count_bear(s):\n    return sum(s[i:j].count('bear') for i in range(len(s)) for j in range(i+3, len(s)+1))",
        "difficulty": "interview"
    },
    {
        "task_id": 2140,
        "prompt": "Complete the Python function given the prompt below:Pasha got a very beautiful string s for his birthday, the string consists of lowercase Latin letters. The letters in the string are numbered from 1 to |s| from left to right, where |s| is the length of the given string.\nPasha didn't like his present very much so he decided to change it. After his birthday Pasha spent m days performing the following transformations on his string\u00a0\u2014\u00a0each day he chose integer a_{i} and reversed a piece of string (a segment) from position a_{i} to position |s| - a_{i} + 1. It is guaranteed that 2\u00b7a_{i} \u2264 |s|.\nYou face the following task: determine what Pasha's string will look like after m days.\n-----Input-----\nThe first line of the input contains Pasha's string s of length from 2 to 2\u00b710^5 characters, consisting of lowercase Latin letters.\nThe second line contains a single integer m (1 \u2264 m \u2264 10^5)\u00a0\u2014\u00a0 the number of days when Pasha changed his string.\nThe third line contains m space-separated elements a_{i} (1 \u2264 a_{i}; 2\u00b7a_{i} \u2264 |s|)\u00a0\u2014\u00a0the position from which Pasha started transforming the string on the i-th day.\n-----Output-----\nIn the first line of the output print what Pasha's string s will look like after m days.\n-----Examples-----\nInput\nabcdef\n1\n2\nOutput\naedcbf\nInput\nvwxyz\n2\n2 2\nOutput\nvwxyz\nInput\nabcdef\n3\n1 2 3\nOutput\nfbdcea\n\ndef",
        "answer": "def string_reverser(s):\n    return s[::-1]",
        "difficulty": "interview"
    },
    {
        "task_id": 2141,
        "prompt": "Complete the Python function given the prompt below:You are given a chess board with $n$ rows and $n$ columns. Initially all cells of the board are empty, and you have to put a white or a black knight into each cell of the board.\nA knight is a chess piece that can attack a piece in cell ($x_2$, $y_2$) from the cell ($x_1$, $y_1$) if one of the following conditions is met:\n  $|x_1 - x_2| = 2$ and $|y_1 - y_2| = 1$, or  $|x_1 - x_2| = 1$ and $|y_1 - y_2| = 2$. \nHere are some examples of which cells knight can attack. In each of the following pictures, if the knight is currently in the blue cell, it can attack all red cells (and only them).\n [Image] \nA duel of knights is a pair of knights of different colors such that these knights attack each other. You have to put a knight (a white one or a black one) into each cell in such a way that the number of duels is maximum possible.\n-----Input-----\nThe first line contains one integer $n$ ($3 \\le n \\le 100$) \u2014 the number of rows (and columns) in the board.\n-----Output-----\nPrint $n$ lines with $n$ characters in each line. The $j$-th character in the $i$-th line should be W, if the cell ($i$, $j$) contains a white knight, or B, if it contains a black knight. The number of duels should be maximum possible. If there are multiple optimal answers, print any of them.\n-----Example-----\nInput\n3\nOutput\nWBW\nBBB\nWBW\n-----Note-----\nIn the first example, there are $8$ duels:\n  the white knight in ($1$, $1$) attacks the black knight in ($3$, $2$);  the white knight in ($1$, $1$) attacks the black knight in ($2$, $3$);  the white knight in ($1$, $3$) attacks the black knight in ($3$, $2$);  the white knight in ($1$, $3$) attacks the black knight in ($2$, $1$);  the white knight in ($3$, $1$) attacks the black knight in ($1$, $2$);  the white knight in ($3$, $1$) attacks the black knight in ($2$, $3$);  the white knight in ($3$, $3$) attacks the black knight in ($1$, $2$);  the white knight in ($3$, $3$) attacks the black knight in ($2$, $1$).\n\ndef",
        "answer": "def knight_duels(n):\n  return",
        "difficulty": "interview"
    },
    {
        "task_id": 2142,
        "prompt": "Complete the Python function given the prompt below:You are given two arrays of integers $a_1,\\ldots,a_n$ and $b_1,\\ldots,b_m$.\nYour task is to find a non-empty array $c_1,\\ldots,c_k$ that is a subsequence of $a_1,\\ldots,a_n$, and also a subsequence of $b_1,\\ldots,b_m$. If there are multiple answers, find one of the smallest possible length. If there are still multiple of the smallest possible length, find any. If there are no such arrays, you should report about it.\nA sequence $a$ is a subsequence of a sequence $b$ if $a$ can be obtained from $b$ by deletion of several (possibly, zero) elements. For example, $[3,1]$ is a subsequence of $[3,2,1]$ and $[4,3,1]$, but not a subsequence of $[1,3,3,7]$ and $[3,10,4]$.\n-----Input-----\nThe first line contains a single integer $t$ ($1\\le t\\le 1000$) \u00a0\u2014 the number of test cases. Next $3t$ lines contain descriptions of test cases.\nThe first line of each test case contains two integers $n$ and $m$ ($1\\le n,m\\le 1000$) \u00a0\u2014 the lengths of the two arrays.\nThe second line of each test case contains $n$ integers $a_1,\\ldots,a_n$ ($1\\le a_i\\le 1000$) \u00a0\u2014 the elements of the first array.\nThe third line of each test case contains $m$ integers $b_1,\\ldots,b_m$ ($1\\le b_i\\le 1000$) \u00a0\u2014 the elements of the second array.\nIt is guaranteed that the sum of $n$ and the sum of $m$ across all test cases does not exceed $1000$ ($\\sum\\limits_{i=1}^t n_i, \\sum\\limits_{i=1}^t m_i\\le 1000$).\n-----Output-----\nFor each test case, output \"YES\" if a solution exists, or \"NO\" otherwise.\nIf the answer is \"YES\", on the next line output an integer $k$ ($1\\le k\\le 1000$) \u00a0\u2014 the length of the array, followed by $k$ integers $c_1,\\ldots,c_k$ ($1\\le c_i\\le 1000$) \u00a0\u2014 the elements of the array.\nIf there are multiple solutions with the smallest possible $k$, output any.\n-----Example-----\nInput\n5\n4 5\n10 8 6 4\n1 2 3 4 5\n1 1\n3\n3\n1 1\n3\n2\n5 3\n1000 2 2 2 3\n3 1 5\n5 5\n1 2 3 4 5\n1 2 3 4 5\nOutput\nYES\n1 4\nYES\n1 3\nNO\nYES\n1 3\nYES\n1 2\n-----Note-----\nIn the first test case, $[4]$ is a subsequence of $[10, 8, 6, 4]$ and $[1, 2, 3, 4, 5]$. This array has length $1$, it is the smallest possible length of a subsequence of both $a$ and $b$.\nIn the third test case, no non-empty subsequences of both $[3]$ and $[2]$ exist, so the answer is \"NO\".\n\ndef",
        "answer": "def find_subsequence(a, b):\n    # your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2143,
        "prompt": "Complete the Python function given the prompt below:Mike decided to teach programming to children in an elementary school. He knows that it is not an easy task to interest children in that age to code. That is why he decided to give each child two sweets.\nMike has $n$ sweets with sizes $a_1, a_2, \\ldots, a_n$. All his sweets have different sizes. That is, there is no such pair $(i, j)$ ($1 \\leq i, j \\leq n$) such that $i \\ne j$ and $a_i = a_j$.\nSince Mike has taught for many years, he knows that if he gives two sweets with sizes $a_i$ and $a_j$ to one child and $a_k$ and $a_p$ to another, where $(a_i + a_j) \\neq (a_k + a_p)$, then a child who has a smaller sum of sizes will be upset. That is, if there are two children who have different sums of sweets, then one of them will be upset. Apparently, Mike does not want somebody to be upset. \nMike wants to invite children giving each of them two sweets. Obviously, he can't give one sweet to two or more children. His goal is to invite as many children as he can. \nSince Mike is busy preparing to his first lecture in the elementary school, he is asking you to find the maximum number of children he can invite giving each of them two sweets in such way that nobody will be upset.\n-----Input-----\nThe first line contains one integer $n$ ($2 \\leq n \\leq 1\\,000$)\u00a0\u2014 the number of sweets Mike has.\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq 10^5$)\u00a0\u2014 the sizes of the sweets. It is guaranteed that all integers are distinct.\n-----Output-----\nPrint one integer\u00a0\u2014 the maximum number of children Mike can invite giving each of them two sweets in such way that nobody will be upset.\n-----Examples-----\nInput\n8\n1 8 3 11 4 9 2 7\nOutput\n3\nInput\n7\n3 1 7 11 9 2 12\nOutput\n2\n-----Note-----\nIn the first example, Mike can give $9+2=11$ to one child, $8+3=11$ to another one, and $7+4=11$ to the third child. Therefore, Mike can invite three children. Note that it is not the only solution.\nIn the second example, Mike can give $3+9=12$ to one child and $1+11$ to another one. Therefore, Mike can invite two children. Note that it is not the only solution.\n\ndef",
        "answer": "def solution(n, a):\n    a.sort()\n    i = 0\n    j = n - 1\n    while i < j:\n        if a[i] + a[j]!= a[i] + a[j - 1]:\n            return j - i\n        i += 1\n        j -= 1\n    return 0",
        "difficulty": "interview"
    },
    {
        "task_id": 2144,
        "prompt": "Complete the Python function given the prompt below:You are given two integers $a$ and $m$. Calculate the number of integers $x$ such that $0 \\le x < m$ and $\\gcd(a, m) = \\gcd(a + x, m)$.\nNote: $\\gcd(a, b)$ is the greatest common divisor of $a$ and $b$.\n-----Input-----\nThe first line contains the single integer $T$ ($1 \\le T \\le 50$) \u2014 the number of test cases.\nNext $T$ lines contain test cases \u2014 one per line. Each line contains two integers $a$ and $m$ ($1 \\le a < m \\le 10^{10}$).\n-----Output-----\nPrint $T$ integers \u2014 one per test case. For each test case print the number of appropriate $x$-s.\n-----Example-----\nInput\n3\n4 9\n5 10\n42 9999999967\nOutput\n6\n1\n9999999966\n-----Note-----\nIn the first test case appropriate $x$-s are $[0, 1, 3, 4, 6, 7]$.\nIn the second test case the only appropriate $x$ is $0$.\n\ndef",
        "answer": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a",
        "difficulty": "interview"
    },
    {
        "task_id": 2145,
        "prompt": "Complete the Python function given the prompt below:Recently Petya walked in the forest and found a magic stick.\nSince Petya really likes numbers, the first thing he learned was spells for changing numbers. So far, he knows only two spells that can be applied to a positive integer:   If the chosen number $a$ is even, then the spell will turn it into $\\frac{3a}{2}$;  If the chosen number $a$ is greater than one, then the spell will turn it into $a-1$. \nNote that if the number is even and greater than one, then Petya can choose which spell to apply.\nPetya now has only one number $x$. He wants to know if his favorite number $y$ can be obtained from $x$ using the spells he knows. The spells can be used any number of times in any order. It is not required to use spells, Petya can leave $x$ as it is.\n-----Input-----\nThe first line contains single integer $T$ ($1 \\le T \\le 10^4$) \u2014 the number of test cases. Each test case consists of two lines.\nThe first line of each test case contains two integers $x$ and $y$ ($1 \\le x, y \\le 10^9$) \u2014 the current number and the number that Petya wants to get.\n-----Output-----\nFor the $i$-th test case print the answer on it \u2014 YES if Petya can get the number $y$ from the number $x$ using known spells, and NO otherwise.\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes and YES will all be recognized as positive answer).\n-----Example-----\nInput\n7\n2 3\n1 1\n3 6\n6 8\n1 2\n4 1\n31235 6578234\nOutput\nYES\nYES\nNO\nYES\nNO\nYES\nYES\n\ndef",
        "answer": "def magic_number(a, b):\n    if a % 2 == 0 and a > 1:\n        return a - 1\n    elif a % 2 == 0 and a == 1:\n        return a\n    elif a % 2!= 0 and a > 1:\n        return a - 1\n    elif a % 2!= 0 and a == 1:\n        return a\n    else:\n        return a",
        "difficulty": "interview"
    },
    {
        "task_id": 2146,
        "prompt": "Complete the Python function given the prompt below:Recently, Mike was very busy with studying for exams and contests. Now he is going to chill a bit by doing some sight seeing in the city.\nCity consists of n intersections numbered from 1 to n. Mike starts walking from his house located at the intersection number 1 and goes along some sequence of intersections. Walking from intersection number i to intersection j requires |i - j| units of energy. The total energy spent by Mike to visit a sequence of intersections p_1 = 1, p_2,..., p_{k} is equal to $\\sum_{i = 1}^{k - 1}|p_{i} - p_{i + 1}$ units of energy.\nOf course, walking would be boring if there were no shortcuts. A shortcut is a special path that allows Mike walking from one intersection to another requiring only 1 unit of energy. There are exactly n shortcuts in Mike's city, the i^{th} of them allows walking from intersection i to intersection a_{i} (i \u2264 a_{i} \u2264 a_{i} + 1) (but not in the opposite direction), thus there is exactly one shortcut starting at each intersection. Formally, if Mike chooses a sequence p_1 = 1, p_2,..., p_{k} then for each 1 \u2264 i < k satisfying p_{i} + 1 = a_{p}_{i} and a_{p}_{i} \u2260 p_{i} Mike will spend only 1 unit of energy instead of |p_{i} - p_{i} + 1| walking from the intersection p_{i} to intersection p_{i} + 1. For example, if Mike chooses a sequence p_1 = 1, p_2 = a_{p}_1, p_3 = a_{p}_2,..., p_{k} = a_{p}_{k} - 1, he spends exactly k - 1 units of total energy walking around them.\nBefore going on his adventure, Mike asks you to find the minimum amount of energy required to reach each of the intersections from his home. Formally, for each 1 \u2264 i \u2264 n Mike is interested in finding minimum possible total energy of some sequence p_1 = 1, p_2,..., p_{k} = i.\n-----Input-----\nThe first line contains an integer n (1 \u2264 n \u2264 200 000)\u00a0\u2014 the number of Mike's city intersection.\nThe second line contains n integers a_1, a_2,..., a_{n} (i \u2264 a_{i} \u2264 n, $a_{i} \\leq a_{i + 1} \\forall i < n)$, describing shortcuts of Mike's city, allowing to walk from intersection i to intersection a_{i} using only 1 unit of energy. Please note that the shortcuts don't allow walking in opposite directions (from a_{i} to i).\n-----Output-----\nIn the only line print n integers m_1, m_2,..., m_{n}, where m_{i} denotes the least amount of total energy required to walk from intersection 1 to intersection i.\n-----Examples-----\nInput\n3\n2 2 3\nOutput\n0 1 2 \nInput\n5\n1 2 3 4 5\nOutput\n0 1 2 3 4 \nInput\n7\n4 4 4 4 7 7 7\nOutput\n0 1 2 1 2 3 3 \n-----Note-----\nIn the first sample case desired sequences are:\n1: 1; m_1 = 0;\n2: 1, 2; m_2 = 1;\n3: 1, 3; m_3 = |3 - 1| = 2.\nIn the second sample case the sequence for any intersection 1 < i is always 1, i and m_{i} = |1 - i|.\nIn the third sample case\u00a0\u2014 consider the following intersection sequences:\n1: 1; m_1 = 0;\n2: 1, 2; m_2 = |2 - 1| = 1;\n3: 1, 4, 3; m_3 = 1 + |4 - 3| = 2;\n4: 1, 4; m_4 = 1;\n5: 1, 4, 5; m_5 = 1 + |4 - 5| = 2;\n6: 1, 4, 6; m_6 = 1 + |4 - 6| = 3;\n7: 1, 4, 5, 7; m_7 = 1 + |4 - 5| + 1 = 3.\n\ndef",
        "answer": "def solution(n, a):\n    m = [0] * n\n    m[0] = 0\n    for i in range(1, n):\n        m[i] = m[i - 1] + abs(a[i] - a[i - 1])\n    return m",
        "difficulty": "interview"
    },
    {
        "task_id": 2147,
        "prompt": "Complete the Python function given the prompt below:A Large Software Company develops its own social network. Analysts have found that during the holidays, major sporting events and other significant events users begin to enter the network more frequently, resulting in great load increase on the infrastructure.\nAs part of this task, we assume that the social network is 4n processes running on the n servers. All servers are absolutely identical machines, each of which has a volume of RAM of 1 GB = 1024 MB ^{(1)}. Each process takes 100 MB of RAM on the server. At the same time, the needs of maintaining the viability of the server takes about 100 more megabytes of RAM. Thus, each server may have up to 9 different processes of social network.\nNow each of the n servers is running exactly 4 processes. However, at the moment of peak load it is sometimes necessary to replicate the existing 4n processes by creating 8n new processes instead of the old ones. More formally, there is a set of replication rules, the i-th (1 \u2264 i \u2264 4n) of which has the form of a_{i} \u2192 (b_{i}, c_{i}), where a_{i}, b_{i} and c_{i} (1 \u2264 a_{i}, b_{i}, c_{i} \u2264 n) are the numbers of servers. This means that instead of an old process running on server a_{i}, there should appear two new copies of the process running on servers b_{i} and c_{i}. The two new replicated processes can be on the same server (i.e., b_{i} may be equal to c_{i}) or even on the same server where the original process was (i.e. a_{i} may be equal to b_{i} or c_{i}). During the implementation of the rule a_{i} \u2192 (b_{i}, c_{i}) first the process from the server a_{i} is destroyed, then appears a process on the server b_{i}, then appears a process on the server c_{i}.\nThere is a set of 4n rules, destroying all the original 4n processes from n servers, and creating after their application 8n replicated processes, besides, on each of the n servers will be exactly 8 processes. However, the rules can only be applied consecutively, and therefore the amount of RAM of the servers imposes limitations on the procedure for the application of the rules.\nAccording to this set of rules determine the order in which you want to apply all the 4n rules so that at any given time the memory of each of the servers contained at most 9 processes (old and new together), or tell that it is impossible.\n-----Input-----\nThe first line of the input contains integer n (1 \u2264 n \u2264 30 000) \u2014 the number of servers of the social network.\nNext 4n lines contain the rules of replicating processes, the i-th (1 \u2264 i \u2264 4n) of these lines as form a_{i}, b_{i}, c_{i} (1 \u2264 a_{i}, b_{i}, c_{i} \u2264 n) and describes rule a_{i} \u2192 (b_{i}, c_{i}).\nIt is guaranteed that each number of a server from 1 to n occurs four times in the set of all a_{i}, and eight times among a set that unites all b_{i} and c_{i}.\n-----Output-----\nIf the required order of performing rules does not exist, print \"NO\" (without the quotes).\nOtherwise, print in the first line \"YES\" (without the quotes), and in the second line \u2014 a sequence of 4n numbers from 1 to 4n, giving the numbers of the rules in the order they are applied. The sequence should be a permutation, that is, include each number from 1 to 4n exactly once.\nIf there are multiple possible variants, you are allowed to print any of them.\n-----Examples-----\nInput\n2\n1 2 2\n1 2 2\n1 2 2\n1 2 2\n2 1 1\n2 1 1\n2 1 1\n2 1 1\nOutput\nYES\n1 2 5 6 3 7 4 8\nInput\n3\n1 2 3\n1 1 1\n1 1 1\n1 1 1\n2 1 3\n2 2 2\n2 2 2\n2 2 2\n3 1 2\n3 3 3\n3 3 3\n3 3 3\nOutput\nYES\n2 3 4 6 7 8 10 11 12 1 5 9\n-----Note-----\n^{(1)} To be extremely accurate, we should note that the amount of server memory is 1 GiB = 1024 MiB and processes require 100 MiB RAM where a gibibyte (GiB) is the amount of RAM of 2^30 bytes and a mebibyte (MiB) is the amount of RAM of 2^20 bytes.\nIn the first sample test the network uses two servers, each of which initially has four launched processes. In accordance with the rules of replication, each of the processes must be destroyed and twice run on another server. One of the possible answers is given in the statement: after applying rules 1 and 2 the first server will have 2 old running processes, and the second server will have 8 (4 old and 4 new) processes. After we apply rules 5 and 6, both servers will have 6 running processes (2 old and 4 new). After we apply rules 3 and 7, both servers will have 7 running processes (1 old and 6 new), and after we apply rules 4 and 8, each server will have 8 running processes. At no time the number of processes on a single server exceeds 9.\nIn the second sample test the network uses three servers. On each server, three processes are replicated into two processes on the same server, and the fourth one is replicated in one process for each of the two remaining servers. As a result of applying rules 2, 3, 4, 6, 7, 8, 10, 11, 12 each server would have 7 processes (6 old and 1 new), as a result of applying rules 1, 5, 9 each server will have 8 processes. At no time the number of processes on a single server exceeds 9.\n\ndef",
        "answer": "def solution(n):\n    # Write your code here\n    pass\n",
        "difficulty": "interview"
    },
    {
        "task_id": 2148,
        "prompt": "Complete the Python function given the prompt below:Carol is currently curling.\nShe has n disks each with radius r on the 2D plane. \nInitially she has all these disks above the line y = 10^100.\nShe then will slide the disks towards the line y = 0 one by one in order from 1 to n. \nWhen she slides the i-th disk, she will place its center at the point (x_{i}, 10^100). She will then push it so the disk\u2019s y coordinate continuously decreases, and x coordinate stays constant. The disk stops once it touches the line y = 0 or it touches any previous disk. Note that once a disk stops moving, it will not move again, even if hit by another disk. \nCompute the y-coordinates of centers of all the disks after all disks have been pushed.\n-----Input-----\nThe first line will contain two integers n and r (1 \u2264 n, r \u2264 1 000), the number of disks, and the radius of the disks, respectively.\nThe next line will contain n integers x_1, x_2,..., x_{n} (1 \u2264 x_{i} \u2264 1 000)\u00a0\u2014 the x-coordinates of the disks.\n-----Output-----\nPrint a single line with n numbers. The i-th number denotes the y-coordinate of the center of the i-th disk. The output will be accepted if it has absolute or relative error at most 10^{ - 6}.\nNamely, let's assume that your answer for a particular value of a coordinate is a and the answer of the jury is b. The checker program will consider your answer correct if $\\frac{|a - b|}{\\operatorname{max}(1, b)} \\leq 10^{-6}$ for all coordinates.\n-----Example-----\nInput\n6 2\n5 5 6 8 3 12\nOutput\n2 6.0 9.87298334621 13.3370849613 12.5187346573 13.3370849613\n-----Note-----\nThe final positions of the disks will look as follows: [Image] \nIn particular, note the position of the last disk.\n\ndef",
        "answer": "def carol_curling(n, r):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2149,
        "prompt": "Complete the Python function given the prompt below:Your program fails again. This time it gets \"Wrong answer on test 233\".\nThis is the easier version of the problem. In this version $1 \\le n \\le 2000$. You can hack this problem only if you solve and lock both problems.\nThe problem is about a test containing $n$ one-choice-questions. Each of the questions contains $k$ options, and only one of them is correct. The answer to the $i$-th question is $h_{i}$, and if your answer of the question $i$ is $h_{i}$, you earn $1$ point, otherwise, you earn $0$ points for this question. The values $h_1, h_2, \\dots, h_n$ are known to you in this problem.\nHowever, you have a mistake in your program. It moves the answer clockwise! Consider all the $n$ answers are written in a circle. Due to the mistake in your program, they are shifted by one cyclically.\nFormally, the mistake moves the answer for the question $i$ to the question $i \\bmod n + 1$. So it moves the answer for the question $1$ to question $2$, the answer for the question $2$ to the question $3$,..., the answer for the question $n$ to the question $1$.\nWe call all the $n$ answers together an answer suit. There are $k^n$ possible answer suits in total.\nYou're wondering, how many answer suits satisfy the following condition: after moving clockwise by $1$, the total number of points of the new answer suit is strictly larger than the number of points of the old one. You need to find the answer modulo $998\\,244\\,353$.\nFor example, if $n = 5$, and your answer suit is $a=[1,2,3,4,5]$, it will submitted as $a'=[5,1,2,3,4]$ because of a mistake. If the correct answer suit is $h=[5,2,2,3,4]$, the answer suit $a$ earns $1$ point and the answer suite $a'$ earns $4$ points. Since $4 > 1$, the answer suit $a=[1,2,3,4,5]$ should be counted.\n-----Input-----\nThe first line contains two integers $n$, $k$ ($1 \\le n \\le 2000$, $1 \\le k \\le 10^9$)\u00a0\u2014 the number of questions and the number of possible answers to each question.\nThe following line contains $n$ integers $h_1, h_2, \\dots, h_n$, ($1 \\le h_{i} \\le k)$\u00a0\u2014 answers to the questions.\n-----Output-----\nOutput one integer: the number of answers suits satisfying the given condition, modulo $998\\,244\\,353$.\n-----Examples-----\nInput\n3 3\n1 3 1\nOutput\n9\nInput\n5 5\n1 1 4 2 2\nOutput\n1000\n-----Note-----\nFor the first example, valid answer suits are $[2,1,1], [2,1,2], [2,1,3], [3,1,1], [3,1,2], [3,1,3], [3,2,1], [3,2,2], [3,2,3]$.\n\ndef",
        "answer": "def answer_suit(n, k, h):\n    # your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2150,
        "prompt": "Complete the Python function given the prompt below:Alicia has an array, $a_1, a_2, \\ldots, a_n$, of non-negative integers. For each $1 \\leq i \\leq n$, she has found a non-negative integer $x_i = max(0, a_1, \\ldots, a_{i-1})$. Note that for $i=1$, $x_i = 0$.\nFor example, if Alicia had the array $a = \\{0, 1, 2, 0, 3\\}$, then $x = \\{0, 0, 1, 2, 2\\}$.\nThen, she calculated an array, $b_1, b_2, \\ldots, b_n$: $b_i = a_i - x_i$.\nFor example, if Alicia had the array $a = \\{0, 1, 2, 0, 3\\}$, $b = \\{0-0, 1-0, 2-1, 0-2, 3-2\\} = \\{0, 1, 1, -2, 1\\}$.\nAlicia gives you the values $b_1, b_2, \\ldots, b_n$ and asks you to restore the values $a_1, a_2, \\ldots, a_n$. Can you help her solve the problem?\n-----Input-----\nThe first line contains one integer $n$ ($3 \\leq n \\leq 200\\,000$)\u00a0\u2013 the number of elements in Alicia's array.\nThe next line contains $n$ integers, $b_1, b_2, \\ldots, b_n$ ($-10^9 \\leq b_i \\leq 10^9$).\nIt is guaranteed that for the given array $b$ there is a solution $a_1, a_2, \\ldots, a_n$, for all elements of which the following is true: $0 \\leq a_i \\leq 10^9$.\n-----Output-----\nPrint $n$ integers, $a_1, a_2, \\ldots, a_n$ ($0 \\leq a_i \\leq 10^9$), such that if you calculate $x$ according to the statement, $b_1$ will be equal to $a_1 - x_1$, $b_2$ will be equal to $a_2 - x_2$,..., and $b_n$ will be equal to $a_n - x_n$.\nIt is guaranteed that there exists at least one solution for the given tests. It can be shown that the solution is unique.\n-----Examples-----\nInput\n5\n0 1 1 -2 1\nOutput\n0 1 2 0 3 \nInput\n3\n1000 999999000 -1000000000\nOutput\n1000 1000000000 0 \nInput\n5\n2 1 2 2 3\nOutput\n2 3 5 7 10 \n-----Note-----\nThe first test was described in the problem statement.\nIn the second test, if Alicia had an array $a = \\{1000, 1000000000, 0\\}$, then $x = \\{0, 1000, 1000000000\\}$ and $b = \\{1000-0, 1000000000-1000, 0-1000000000\\} = \\{1000, 999999000, -1000000000\\}$.\n\ndef",
        "answer": "def solution(a):\n    b = [0] * len(a)\n    for i in range(len(a)):\n        b[i] = a[i] - max(0, a[i-1])\n    return b",
        "difficulty": "interview"
    },
    {
        "task_id": 2151,
        "prompt": "Complete the Python function given the prompt below:You are given a sequence $s$ consisting of $n$ digits from $1$ to $9$.\nYou have to divide it into at least two segments (segment \u2014 is a consecutive sequence of elements) (in other words, you have to place separators between some digits of the sequence) in such a way that each element belongs to exactly one segment and if the resulting division will be represented as an integer numbers sequence then each next element of this sequence will be strictly greater than the previous one.\nMore formally: if the resulting division of the sequence is $t_1, t_2, \\dots, t_k$, where $k$ is the number of element in a division, then for each $i$ from $1$ to $k-1$ the condition $t_{i} < t_{i + 1}$ (using numerical comparing, it means that the integer representations of strings are compared) should be satisfied.\nFor example, if $s=654$ then you can divide it into parts $[6, 54]$ and it will be suitable division. But if you will divide it into parts $[65, 4]$ then it will be bad division because $65 > 4$. If $s=123$ then you can divide it into parts $[1, 23]$, $[1, 2, 3]$ but not into parts $[12, 3]$.\nYour task is to find any suitable division for each of the $q$ independent queries.\n-----Input-----\nThe first line of the input contains one integer $q$ ($1 \\le q \\le 300$) \u2014 the number of queries.\nThe first line of the $i$-th query contains one integer number $n_i$ ($2 \\le n_i \\le 300$) \u2014 the number of digits in the $i$-th query.\nThe second line of the $i$-th query contains one string $s_i$ of length $n_i$ consisting only of digits from $1$ to $9$.\n-----Output-----\nIf the sequence of digits in the $i$-th query cannot be divided into at least two parts in a way described in the problem statement, print the single line \"NO\" for this query.\nOtherwise in the first line of the answer to this query print \"YES\", on the second line print $k_i$ \u2014 the number of parts in your division of the $i$-th query sequence and in the third line print $k_i$ strings $t_{i, 1}, t_{i, 2}, \\dots, t_{i, k_i}$ \u2014 your division. Parts should be printed in order of the initial string digits. It means that if you write the parts one after another without changing their order then you'll get the string $s_i$.\nSee examples for better understanding.\n-----Example-----\nInput\n4\n6\n654321\n4\n1337\n2\n33\n4\n2122\nOutput\nYES\n3\n6 54 321\nYES\n3\n1 3 37\nNO\nYES\n2\n21 22\n\ndef",
        "answer": "def solution(s):\n    if len(s) < 2:\n        return \"NO\"\n    parts = []\n    for i in range(1, len(s)):\n        if s[i] > s[i - 1]:\n            parts.append(s[i - 1:i + 1])\n    if len(parts) < 2:\n        return \"NO\"\n    return \"YES\\n\" + str(len(parts)) + \"\\n\" + \"\\n\".join(parts)",
        "difficulty": "interview"
    },
    {
        "task_id": 2152,
        "prompt": "Complete the Python function given the prompt below:Duff is addicted to meat! Malek wants to keep her happy for n days. In order to be happy in i-th day, she needs to eat exactly a_{i} kilograms of meat. [Image] \nThere is a big shop uptown and Malek wants to buy meat for her from there. In i-th day, they sell meat for p_{i} dollars per kilogram. Malek knows all numbers a_1,..., a_{n} and p_1,..., p_{n}. In each day, he can buy arbitrary amount of meat, also he can keep some meat he has for the future.\nMalek is a little tired from cooking meat, so he asked for your help. Help him to minimize the total money he spends to keep Duff happy for n days. \n-----Input-----\nThe first line of input contains integer n (1 \u2264 n \u2264 10^5), the number of days.\nIn the next n lines, i-th line contains two integers a_{i} and p_{i} (1 \u2264 a_{i}, p_{i} \u2264 100), the amount of meat Duff needs and the cost of meat in that day.\n-----Output-----\nPrint the minimum money needed to keep Duff happy for n days, in one line.\n-----Examples-----\nInput\n3\n1 3\n2 2\n3 1\nOutput\n10\nInput\n3\n1 3\n2 1\n3 2\nOutput\n8\n-----Note-----\nIn the first sample case: An optimal way would be to buy 1 kg on the first day, 2 kg on the second day and 3 kg on the third day.\nIn the second sample case: An optimal way would be to buy 1 kg on the first day and 5 kg (needed meat for the second and third day) on the second day.\n\ndef",
        "answer": "def main():\n    n = int(input())\n    for i in range(n):\n        a, p = map(int, input().split())\n        print(a*p)",
        "difficulty": "interview"
    },
    {
        "task_id": 2153,
        "prompt": "Complete the Python function given the prompt below:There are $n$ beautiful skyscrapers in New York, the height of the $i$-th one is $h_i$. Today some villains have set on fire first $n - 1$ of them, and now the only safety building is $n$-th skyscraper.\nLet's call a jump from $i$-th skyscraper to $j$-th ($i < j$) discrete, if all skyscrapers between are strictly lower or higher than both of them. Formally, jump is discrete, if $i < j$ and one of the following conditions satisfied:   $i + 1 = j$  $\\max(h_{i + 1}, \\ldots, h_{j - 1}) < \\min(h_i, h_j)$  $\\max(h_i, h_j) < \\min(h_{i + 1}, \\ldots, h_{j - 1})$. \nAt the moment, Vasya is staying on the first skyscraper and wants to live a little longer, so his goal is to reach $n$-th skyscraper with minimal count of discrete jumps. Help him with calcualting this number.\n-----Input-----\nThe first line contains a single integer $n$ ($2 \\le n \\le 3 \\cdot 10^5$) \u2014 total amount of skyscrapers.\nThe second line contains $n$ integers $h_1, h_2, \\ldots, h_n$ ($1 \\le h_i \\le 10^9$) \u2014 heights of skyscrapers.\n-----Output-----\nPrint single number $k$ \u2014 minimal amount of discrete jumps. We can show that an answer always exists.\n-----Examples-----\nInput\n5\n1 3 1 4 5\nOutput\n3\nInput\n4\n4 2 2 4\nOutput\n1\nInput\n2\n1 1\nOutput\n1\nInput\n5\n100 1 100 1 100\nOutput\n2\n-----Note-----\nIn the first testcase, Vasya can jump in the following way: $1 \\rightarrow 2 \\rightarrow 4 \\rightarrow 5$.\nIn the second and third testcases, we can reach last skyscraper in one jump.\nSequence of jumps in the fourth testcase: $1 \\rightarrow 3 \\rightarrow 5$.\n\ndef",
        "answer": "def solve(n, h):\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 1\n    if n == 5:\n        return 2\n    if n == 6:\n        return 3\n    if n == 7:\n        return 2\n    if n == 8:\n        return 3\n    if n == 9:\n        return 4\n    if n == 10:\n        return 3\n    if n == 11:\n        return 4\n    if n == 12:\n        return 5\n    if n == 13:\n        return 4\n    if n == 14:\n        return 5\n    if n == 15:\n        return 6\n    if n == 16:\n        return 5\n    if n == 17:\n        return 6\n    if n == 18:\n        return 7\n    if n == 19:\n        return 6\n    if n == 20:\n        return 7\n    if n == 21:\n        return 8\n    if n == 22:\n        return 7\n    if n == 23:\n        return 8\n    if n == 24:\n        return 9\n    if n == 25:\n        return 8\n    if n == 26:\n        return 9\n    if n == 27:\n        return 10\n    if n == 28:\n        return 9\n    if n == 29:\n        return 10\n    if n == 30:\n        return 11\n    if n == 31:\n        return 10\n    if n == 32:\n        return 11\n    if n == 33:\n        return 12\n    if n == 34:\n        return 11\n    if n == 35:\n        return 12\n    if n == 36:\n        return 13\n    if n == 37:\n        return 12\n    if n == 38:\n        return 13\n    if n == 39:\n        return 14\n    if n == 40:\n        return 13\n    if n == 41:\n        return 14\n    if n == 42:\n        return 15\n    if n == 43:\n        return 14\n    if n == 44:\n        return 15\n    if n == 45:\n        return",
        "difficulty": "interview"
    },
    {
        "task_id": 2154,
        "prompt": "Complete the Python function given the prompt below:You can perfectly predict the price of a certain stock for the next N days. You would like to profit on this knowledge, but only want to transact one share of stock per day. That is, each day you will either buy one share, sell one share, or do nothing. Initially you own zero shares, and you cannot sell shares when you don't own any. At the end of the N days you would like to again own zero shares, but want to have as much money as possible.\n-----Input-----\nInput begins with an integer N (2 \u2264 N \u2264 3\u00b710^5), the number of days.\nFollowing this is a line with exactly N integers p_1, p_2,..., p_{N} (1 \u2264 p_{i} \u2264 10^6). The price of one share of stock on the i-th day is given by p_{i}.\n-----Output-----\nPrint the maximum amount of money you can end up with at the end of N days.\n-----Examples-----\nInput\n9\n10 5 4 7 9 12 6 2 10\nOutput\n20\nInput\n20\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3 2 3 8 4\nOutput\n41\n-----Note-----\nIn the first example, buy a share at 5, buy another at 4, sell one at 9 and another at 12. Then buy at 2 and sell at 10. The total profit is  - 5 - 4 + 9 + 12 - 2 + 10 = 20.\n\ndef",
        "answer": "def stock_profit(n, prices):\n    profit = 0\n    for i in range(n):\n        if prices[i] > prices[i-1]:\n            profit += prices[i] - prices[i-1]\n    return profit",
        "difficulty": "interview"
    },
    {
        "task_id": 2155,
        "prompt": "Complete the Python function given the prompt below:Since Sonya has just learned the basics of matrices, she decided to play with them a little bit.\nSonya imagined a new type of matrices that she called rhombic matrices. These matrices have exactly one zero, while all other cells have the Manhattan distance to the cell containing the zero. The cells with equal numbers have the form of a rhombus, that is why Sonya called this type so.\nThe Manhattan distance between two cells ($x_1$, $y_1$) and ($x_2$, $y_2$) is defined as $|x_1 - x_2| + |y_1 - y_2|$. For example, the Manhattan distance between the cells $(5, 2)$ and $(7, 1)$ equals to $|5-7|+|2-1|=3$. [Image] Example of a rhombic matrix. \nNote that rhombic matrices are uniquely defined by $n$, $m$, and the coordinates of the cell containing the zero.\nShe drew a $n\\times m$ rhombic matrix. She believes that you can not recreate the matrix if she gives you only the elements of this matrix in some arbitrary order (i.e., the sequence of $n\\cdot m$ numbers). Note that Sonya will not give you $n$ and $m$, so only the sequence of numbers in this matrix will be at your disposal.\nWrite a program that finds such an $n\\times m$ rhombic matrix whose elements are the same as the elements in the sequence in some order.\n-----Input-----\nThe first line contains a single integer $t$ ($1\\leq t\\leq 10^6$)\u00a0\u2014 the number of cells in the matrix.\nThe second line contains $t$ integers $a_1, a_2, \\ldots, a_t$ ($0\\leq a_i< t$)\u00a0\u2014 the values in the cells in arbitrary order.\n-----Output-----\nIn the first line, print two positive integers $n$ and $m$ ($n \\times m = t$)\u00a0\u2014 the size of the matrix.\nIn the second line, print two integers $x$ and $y$ ($1\\leq x\\leq n$, $1\\leq y\\leq m$)\u00a0\u2014 the row number and the column number where the cell with $0$ is located.\nIf there are multiple possible answers, print any of them. If there is no solution, print the single integer $-1$.\n-----Examples-----\nInput\n20\n1 0 2 3 5 3 2 1 3 2 3 1 4 2 1 4 2 3 2 4\nOutput\n4 5\n2 2\nInput\n18\n2 2 3 2 4 3 3 3 0 2 4 2 1 3 2 1 1 1\nOutput\n3 6\n2 3\nInput\n6\n2 1 0 2 1 2\nOutput\n-1\n-----Note-----\nYou can see the solution to the first example in the legend. You also can choose the cell $(2, 2)$ for the cell where $0$ is located. You also can choose a $5\\times 4$ matrix with zero at $(4, 2)$.\nIn the second example, there is a $3\\times 6$ matrix, where the zero is located at $(2, 3)$ there.\nIn the third example, a solution does not exist.\n\ndef",
        "answer": "def rhombic_matrix(n, m, a):\n    # your code here\n    return",
        "difficulty": "interview"
    },
    {
        "task_id": 2156,
        "prompt": "Complete the Python function given the prompt below:Consider a sequence of digits of length $2^k$ $[a_1, a_2, \\ldots, a_{2^k}]$. We perform the following operation with it: replace pairs $(a_{2i+1}, a_{2i+2})$ with $(a_{2i+1} + a_{2i+2})\\bmod 10$ for $0\\le i<2^{k-1}$. For every $i$ where $a_{2i+1} + a_{2i+2}\\ge 10$ we get a candy! As a result, we will get a sequence of length $2^{k-1}$.\nLess formally, we partition sequence of length $2^k$ into $2^{k-1}$ pairs, each consisting of 2 numbers: the first pair consists of the first and second numbers, the second of the third and fourth $\\ldots$, the last pair consists of the ($2^k-1$)-th and ($2^k$)-th numbers. For every pair such that sum of numbers in it is at least $10$, we get a candy. After that, we replace every pair of numbers with a remainder of the division of their sum by $10$ (and don't change the order of the numbers).\nPerform this operation with a resulting array until it becomes of length $1$. Let $f([a_1, a_2, \\ldots, a_{2^k}])$ denote the number of candies we get in this process. \nFor example: if the starting sequence is $[8, 7, 3, 1, 7, 0, 9, 4]$ then:\nAfter the first operation the sequence becomes $[(8 + 7)\\bmod 10, (3 + 1)\\bmod 10, (7 + 0)\\bmod 10, (9 + 4)\\bmod 10]$ $=$ $[5, 4, 7, 3]$, and we get $2$ candies as $8 + 7 \\ge 10$ and $9 + 4 \\ge 10$.\nAfter the second operation the sequence becomes $[(5 + 4)\\bmod 10, (7 + 3)\\bmod 10]$ $=$ $[9, 0]$, and we get one more candy as $7 + 3 \\ge 10$. \nAfter the final operation sequence becomes $[(9 + 0) \\bmod 10]$ $=$ $[9]$. \nTherefore, $f([8, 7, 3, 1, 7, 0, 9, 4]) = 3$ as we got $3$ candies in total.\nYou are given a sequence of digits of length $n$ $s_1, s_2, \\ldots s_n$. You have to answer $q$ queries of the form $(l_i, r_i)$, where for $i$-th query you have to output $f([s_{l_i}, s_{l_i+1}, \\ldots, s_{r_i}])$. It is guaranteed that $r_i-l_i+1$ is of form $2^k$ for some nonnegative integer $k$.\n-----Input-----\nThe first line contains a single integer $n$ ($1 \\le n \\le 10^5$)\u00a0\u2014 the length of the sequence.\nThe second line contains $n$ digits $s_1, s_2, \\ldots, s_n$ ($0 \\le s_i \\le 9$).\nThe third line contains a single integer $q$ ($1 \\le q \\le 10^5$)\u00a0\u2014 the number of queries.\nEach of the next $q$ lines contains two integers $l_i$, $r_i$ ($1 \\le l_i \\le r_i \\le n$)\u00a0\u2014 $i$-th query. It is guaranteed that $r_i-l_i+1$ is a nonnegative integer power of $2$.\n-----Output-----\nOutput $q$ lines, in $i$-th line output single integer\u00a0\u2014 $f([s_{l_i}, s_{l_i + 1}, \\ldots, s_{r_i}])$, answer to the $i$-th query.\n-----Examples-----\nInput\n8\n8 7 3 1 7 0 9 4\n3\n1 8\n2 5\n7 7\nOutput\n3\n1\n0\nInput\n6\n0 1 2 3 3 5\n3\n1 2\n1 4\n3 6\nOutput\n0\n0\n1\n-----Note-----\nThe first example illustrates an example from the statement.\n$f([7, 3, 1, 7]) = 1$: sequence of operations is $[7, 3, 1, 7] \\to [(7 + 3)\\bmod 10, (1 + 7)\\bmod 10]$ $=$ $[0, 8]$ and one candy as $7 + 3 \\ge 10$ $\\to$ $[(0 + 8) \\bmod 10]$ $=$ $[8]$, so we get only $1$ candy.\n$f([9]) = 0$ as we don't perform operations with it.\n\ndef",
        "answer": "def f(s):\n    return sum(int(i) for i in s) % 10",
        "difficulty": "interview"
    },
    {
        "task_id": 2157,
        "prompt": "Complete the Python function given the prompt below:The little girl loves the problems on array queries very much.\nOne day she came across a rather well-known problem: you've got an array of n elements (the elements of the array are indexed starting from 1); also, there are q queries, each one is defined by a pair of integers l_{i}, r_{i} (1 \u2264 l_{i} \u2264 r_{i} \u2264 n). You need to find for each query the sum of elements of the array with indexes from l_{i} to r_{i}, inclusive.\nThe little girl found the problem rather boring. She decided to reorder the array elements before replying to the queries in a way that makes the sum of query replies maximum possible. Your task is to find the value of this maximum sum.\n-----Input-----\nThe first line contains two space-separated integers n (1 \u2264 n \u2264 2\u00b710^5) and q (1 \u2264 q \u2264 2\u00b710^5) \u2014 the number of elements in the array and the number of queries, correspondingly.\nThe next line contains n space-separated integers a_{i} (1 \u2264 a_{i} \u2264 2\u00b710^5) \u2014 the array elements.\nEach of the following q lines contains two space-separated integers l_{i} and r_{i} (1 \u2264 l_{i} \u2264 r_{i} \u2264 n) \u2014 the i-th query.\n-----Output-----\nIn a single line print a single integer \u2014 the maximum sum of query replies after the array elements are reordered.\nPlease, do not use the %lld specifier to read or write 64-bit integers in \u0421++. It is preferred to use the cin, cout streams or the %I64d specifier.\n-----Examples-----\nInput\n3 3\n5 3 2\n1 2\n2 3\n1 3\nOutput\n25\nInput\n5 3\n5 2 4 1 3\n1 5\n2 3\n2 3\nOutput\n33\n\ndef",
        "answer": "def max_sum(a, l, r):\n    return sum(a[l-1:r])",
        "difficulty": "interview"
    },
    {
        "task_id": 2158,
        "prompt": "Complete the Python function given the prompt below:Heidi's friend Jenny is asking Heidi to deliver an important letter to one of their common friends. Since Jenny is Irish, Heidi thinks that this might be a prank. More precisely, she suspects that the message she is asked to deliver states: \"Send the fool further!\", and upon reading it the recipient will ask Heidi to deliver the same message to yet another friend (that the recipient has in common with Heidi), and so on.\nHeidi believes that her friends want to avoid awkward situations, so she will not be made to visit the same person (including Jenny) twice. She also knows how much it costs to travel between any two of her friends who know each other. She wants to know: what is the maximal amount of money she will waste on travel if it really is a prank?\nHeidi's n friends are labeled 0 through n - 1, and their network of connections forms a tree. In other words, every two of her friends a, b know each other, possibly indirectly (there is a sequence of friends starting from a and ending on b and such that each two consecutive friends in the sequence know each other directly), and there are exactly n - 1 pairs of friends who know each other directly.\nJenny is given the number 0.\n-----Input-----\nThe first line of the input contains the number of friends n (3 \u2264 n \u2264 100). The next n - 1 lines each contain three space-separated integers u, v and c (0 \u2264 u, v \u2264 n - 1, 1 \u2264 c \u2264 10^4), meaning that u and v are friends (know each other directly) and the cost for travelling between u and v is c.\nIt is guaranteed that the social network of the input forms a tree.\n-----Output-----\nOutput a single integer \u2013 the maximum sum of costs.\n-----Examples-----\nInput\n4\n0 1 4\n0 2 2\n2 3 3\nOutput\n5\nInput\n6\n1 2 3\n0 2 100\n1 4 2\n0 3 7\n3 5 10\nOutput\n105\nInput\n11\n1 0 1664\n2 0 881\n3 2 4670\n4 2 1555\n5 1 1870\n6 2 1265\n7 2 288\n8 7 2266\n9 2 1536\n10 6 3378\nOutput\n5551\n-----Note-----\nIn the second example, the worst-case scenario goes like this: Jenny sends Heidi to the friend labeled by number 2 (incurring a cost of 100), then friend 2 sends her to friend 1 (costing Heidi 3), and finally friend 1 relays her to friend 4 (incurring an additional cost of 2).\n\ndef",
        "answer": "def max_sum_of_costs(n, edges):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2159,
        "prompt": "Complete the Python function given the prompt below:Bear Limak has n colored balls, arranged in one long row. Balls are numbered 1 through n, from left to right. There are n possible colors, also numbered 1 through n. The i-th ball has color t_{i}.\nFor a fixed interval (set of consecutive elements) of balls we can define a dominant color. It's a color occurring the biggest number of times in the interval. In case of a tie between some colors, the one with the smallest number (index) is chosen as dominant.\nThere are $\\frac{n \\cdot(n + 1)}{2}$ non-empty intervals in total. For each color, your task is to count the number of intervals in which this color is dominant.\n-----Input-----\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 5000)\u00a0\u2014 the number of balls.\nThe second line contains n integers t_1, t_2,..., t_{n} (1 \u2264 t_{i} \u2264 n) where t_{i} is the color of the i-th ball.\n-----Output-----\nPrint n integers. The i-th of them should be equal to the number of intervals where i is a dominant color.\n-----Examples-----\nInput\n4\n1 2 1 2\nOutput\n7 3 0 0 \nInput\n3\n1 1 1\nOutput\n6 0 0 \n-----Note-----\nIn the first sample, color 2 is dominant in three intervals:  An interval [2, 2] contains one ball. This ball's color is 2 so it's clearly a dominant color.  An interval [4, 4] contains one ball, with color 2 again.  An interval [2, 4] contains two balls of color 2 and one ball of color 1. \nThere are 7 more intervals and color 1 is dominant in all of them.\n\ndef",
        "answer": "def solution(n, t):\n    # your code here\n    return",
        "difficulty": "interview"
    },
    {
        "task_id": 2160,
        "prompt": "Complete the Python function given the prompt below:Alice and Bob are playing a game on a line with $n$ cells. There are $n$ cells labeled from $1$ through $n$. For each $i$ from $1$ to $n-1$, cells $i$ and $i+1$ are adjacent.\nAlice initially has a token on some cell on the line, and Bob tries to guess where it is. \nBob guesses a sequence of line cell numbers $x_1, x_2, \\ldots, x_k$ in order. In the $i$-th question, Bob asks Alice if her token is currently on cell $x_i$. That is, Alice can answer either \"YES\" or \"NO\" to each Bob's question.\nAt most one time in this process, before or after answering a question, Alice is allowed to move her token from her current cell to some adjacent cell. Alice acted in such a way that she was able to answer \"NO\" to all of Bob's questions.\nNote that Alice can even move her token before answering the first question or after answering the last question. Alice can also choose to not move at all.\nYou are given $n$ and Bob's questions $x_1, \\ldots, x_k$. You would like to count the number of scenarios that let Alice answer \"NO\" to all of Bob's questions. \nLet $(a,b)$ denote a scenario where Alice starts at cell $a$ and ends at cell $b$. Two scenarios $(a_i, b_i)$ and $(a_j, b_j)$ are different if $a_i \\neq a_j$ or $b_i \\neq b_j$.\n-----Input-----\nThe first line contains two integers $n$ and $k$ ($1 \\leq n,k \\leq 10^5$)\u00a0\u2014 the number of cells and the number of questions Bob asked.\nThe second line contains $k$ integers $x_1, x_2, \\ldots, x_k$ ($1 \\leq x_i \\leq n$)\u00a0\u2014 Bob's questions.\n-----Output-----\nPrint a single integer, the number of scenarios that let Alice answer \"NO\" to all of Bob's questions.\n-----Examples-----\nInput\n5 3\n5 1 4\nOutput\n9\nInput\n4 8\n1 2 3 4 4 3 2 1\nOutput\n0\nInput\n100000 1\n42\nOutput\n299997\n-----Note-----\nThe notation $(i,j)$ denotes a scenario where Alice starts at cell $i$ and ends at cell $j$.\nIn the first example, the valid scenarios are $(1, 2), (2, 1), (2, 2), (2, 3), (3, 2), (3, 3), (3, 4), (4, 3), (4, 5)$. For example, $(3,4)$ is valid since Alice can start at cell $3$, stay there for the first three questions, then move to cell $4$ after the last question. \n$(4,5)$ is valid since Alice can start at cell $4$, stay there for the first question, the move to cell $5$ for the next two questions. Note that $(4,5)$ is only counted once, even though there are different questions that Alice can choose to do the move, but remember, we only count each pair of starting and ending positions once.\nIn the second example, Alice has no valid scenarios.\nIn the last example, all $(i,j)$ where $|i-j| \\leq 1$ except for $(42, 42)$ are valid scenarios.\n\ndef",
        "answer": "def count_valid_scenarios(n, k):\n    return sum(1 for i in range(1, n) for j in range(i+1, n+1) if abs(i-j) > 1)",
        "difficulty": "interview"
    },
    {
        "task_id": 2161,
        "prompt": "Complete the Python function given the prompt below:Vasya has several phone books, in which he recorded the telephone numbers of his friends. Each of his friends can have one or several phone numbers.\nVasya decided to organize information about the phone numbers of friends. You will be given n strings \u2014 all entries from Vasya's phone books. Each entry starts with a friend's name. Then follows the number of phone numbers in the current entry, and then the phone numbers themselves. It is possible that several identical phones are recorded in the same record.\nVasya also believes that if the phone number a is a suffix of the phone number b (that is, the number b ends up with a), and both numbers are written by Vasya as the phone numbers of the same person, then a is recorded without the city code and it should not be taken into account.\nThe task is to print organized information about the phone numbers of Vasya's friends. It is possible that two different people have the same number. If one person has two numbers x and y, and x is a suffix of y (that is, y ends in x), then you shouldn't print number x. If the number of a friend in the Vasya's phone books is recorded several times in the same format, it is necessary to take it into account exactly once.\nRead the examples to understand statement and format of the output better.\n-----Input-----\nFirst line contains the integer n (1 \u2264 n \u2264 20)\u00a0\u2014 number of entries in Vasya's phone books. \nThe following n lines are followed by descriptions of the records in the format described in statement. Names of Vasya's friends are non-empty strings whose length does not exceed 10. They consists only of lowercase English letters. Number of phone numbers in one entry is not less than 1 is not more than 10. The telephone numbers consist of digits only. If you represent a phone number as a string, then its length will be in range from 1 to 10. Phone numbers can contain leading zeros.\n-----Output-----\nPrint out the ordered information about the phone numbers of Vasya's friends. First output m\u00a0\u2014 number of friends that are found in Vasya's phone books.\nThe following m lines must contain entries in the following format \"name number_of_phone_numbers phone_numbers\". Phone numbers should be separated by a space. Each record must contain all the phone numbers of current friend.\nEntries can be displayed in arbitrary order, phone numbers for one record can also be printed in arbitrary order.\n-----Examples-----\nInput\n2\nivan 1 00123\nmasha 1 00123\nOutput\n2\nmasha 1 00123 \nivan 1 00123 \nInput\n3\nkarl 2 612 12\npetr 1 12\nkatya 1 612\nOutput\n3\nkatya 1 612 \npetr 1 12 \nkarl 1 612 \nInput\n4\nivan 3 123 123 456\nivan 2 456 456\nivan 8 789 3 23 6 56 9 89 2\ndasha 2 23 789\nOutput\n2\ndasha 2 23 789 \nivan 4 789 123 2 456\n\ndef",
        "answer": "def phone_book(n, phone_book):\n    phone_book = sorted(phone_book)\n    phone_book = sorted(phone_book, key=len)\n    phone_book = sorted(phone_book, key=len, reverse=True)\n    phone_book = sorted(phone_book, key=len, reverse=True)\n    phone_book = sorted(phone_book, key=len, reverse=True)\n    phone_book = sorted(phone_book, key=len, reverse=True)\n    phone_book = sorted(phone_book, key=len, reverse=True)\n    phone_book = sorted(phone_book, key=len, reverse=True)\n    phone_book = sorted(phone_book, key=len, reverse=True)\n    phone_book = sorted(phone_book, key=len, reverse=True)\n    phone_book = sorted(phone_book, key=len, reverse=True)\n    phone_book = sorted(phone_book, key=len, reverse=True)\n    phone_book = sorted(phone_book, key=len, reverse=True)\n    phone_book = sorted(phone_book, key=len, reverse=True)\n    phone_book = sorted(phone_book, key=len, reverse=True)\n    phone_book = sorted(phone_book, key=len, reverse=True)\n    phone_book = sorted(phone_book, key=len, reverse=True)\n    phone_book = sorted(phone_book, key=len, reverse=True)\n    phone_book = sorted(phone_book, key=len, reverse=True)\n    phone_book = sorted(phone_book, key=len, reverse=True)\n    phone_book = sorted(phone_book, key=len, reverse=True)\n    phone_book = sorted(phone_book, key=len, reverse=True)\n    phone_book = sorted(phone_book, key=len, reverse=True)\n    phone_book = sorted(phone_book, key=len, reverse=True)\n    phone_book = sorted(phone_book, key=len, reverse=True)\n    ",
        "difficulty": "interview"
    },
    {
        "task_id": 2162,
        "prompt": "Complete the Python function given the prompt below:A team of three programmers is going to play a contest. The contest consists of $n$ problems, numbered from $1$ to $n$. Each problem is printed on a separate sheet of paper. The participants have decided to divide the problem statements into three parts: the first programmer took some prefix of the statements (some number of first paper sheets), the third contestant took some suffix of the statements (some number of last paper sheets), and the second contestant took all remaining problems. But something went wrong \u2014 the statements were printed in the wrong order, so the contestants have received the problems in some random order.\nThe first contestant has received problems $a_{1, 1}, a_{1, 2}, \\dots, a_{1, k_1}$. The second one has received problems $a_{2, 1}, a_{2, 2}, \\dots, a_{2, k_2}$. The third one has received all remaining problems ($a_{3, 1}, a_{3, 2}, \\dots, a_{3, k_3}$).\nThe contestants don't want to play the contest before they redistribute the statements. They want to redistribute them so that the first contestant receives some prefix of the problemset, the third contestant receives some suffix of the problemset, and the second contestant receives all the remaining problems.\nDuring one move, some contestant may give one of their problems to other contestant. What is the minimum number of moves required to redistribute the problems?\nIt is possible that after redistribution some participant (or even two of them) will not have any problems.\n-----Input-----\nThe first line contains three integers $k_1, k_2$ and $k_3$ ($1 \\le k_1, k_2, k_3 \\le 2 \\cdot 10^5, k_1 + k_2 + k_3 \\le 2 \\cdot 10^5$) \u2014 the number of problems initially taken by the first, the second and the third participant, respectively.\nThe second line contains $k_1$ integers $a_{1, 1}, a_{1, 2}, \\dots, a_{1, k_1}$ \u2014 the problems initially taken by the first participant.\nThe third line contains $k_2$ integers $a_{2, 1}, a_{2, 2}, \\dots, a_{2, k_2}$ \u2014 the problems initially taken by the second participant.\nThe fourth line contains $k_3$ integers $a_{3, 1}, a_{3, 2}, \\dots, a_{3, k_3}$ \u2014 the problems initially taken by the third participant.\nIt is guaranteed that no problem has been taken by two (or three) participants, and each integer $a_{i, j}$ meets the condition $1 \\le a_{i, j} \\le n$, where $n = k_1 + k_2 + k_3$.\n-----Output-----\nPrint one integer \u2014 the minimum number of moves required to redistribute the problems so that the first participant gets the prefix of the problemset, the third participant gets the suffix of the problemset, and the second participant gets all of the remaining problems.\n-----Examples-----\nInput\n2 1 2\n3 1\n4\n2 5\nOutput\n1\nInput\n3 2 1\n3 2 1\n5 4\n6\nOutput\n0\nInput\n2 1 3\n5 6\n4\n1 2 3\nOutput\n3\nInput\n1 5 1\n6\n5 1 2 4 7\n3\nOutput\n2\n-----Note-----\nIn the first example the third contestant should give the problem $2$ to the first contestant, so the first contestant has $3$ first problems, the third contestant has $1$ last problem, and the second contestant has $1$ remaining problem.\nIn the second example the distribution of problems is already valid: the first contestant has $3$ first problems, the third contestant has $1$ last problem, and the second contestant has $2$ remaining problems.\nThe best course of action in the third example is to give all problems to the third contestant.\nThe best course of action in the fourth example is to give all problems to the second contestant.\n\ndef",
        "answer": "def solution(k_1, k_2, k_3, a_1, a_2, a_3):\n    # your code here\n    return 0",
        "difficulty": "interview"
    },
    {
        "task_id": 2163,
        "prompt": "Complete the Python function given the prompt below:For a sequence a of n integers between 1 and m, inclusive, denote f(a) as the number of distinct subsequences of a (including the empty subsequence).\nYou are given two positive integers n and m. Let S be the set of all sequences of length n consisting of numbers from 1 to m. Compute the sum f(a) over all a in S modulo 10^9 + 7.\n-----Input-----\nThe only line contains two integers n and m (1 \u2264 n, m \u2264 10^6) \u2014 the number of elements in arrays and the upper bound for elements.\n-----Output-----\nPrint the only integer c \u2014 the desired sum modulo 10^9 + 7.\n-----Examples-----\nInput\n1 3\nOutput\n6\nInput\n2 2\nOutput\n14\nInput\n3 3\nOutput\n174\n\ndef",
        "answer": "def f(a):\n    return len(set(a))",
        "difficulty": "interview"
    },
    {
        "task_id": 2164,
        "prompt": "Complete the Python function given the prompt below:This is the easy version of the problem. The difference is the constraint on the sum of lengths of strings and the number of test cases. You can make hacks only if you solve all versions of this task.\nYou are given a string $s$, consisting of lowercase English letters. Find the longest string, $t$, which satisfies the following conditions:   The length of $t$ does not exceed the length of $s$.  $t$ is a palindrome.  There exists two strings $a$ and $b$ (possibly empty), such that $t = a + b$ ( \"$+$\" represents concatenation), and $a$ is prefix of $s$ while $b$ is suffix of $s$. \n-----Input-----\nThe input consists of multiple test cases. The first line contains a single integer $t$ ($1 \\leq t \\leq 1000$), the number of test cases. The next $t$ lines each describe a test case.\nEach test case is a non-empty string $s$, consisting of lowercase English letters.\nIt is guaranteed that the sum of lengths of strings over all test cases does not exceed $5000$.\n-----Output-----\nFor each test case, print the longest string which satisfies the conditions described above. If there exists multiple possible solutions, print any of them.\n-----Example-----\nInput\n5\na\nabcdfdcecba\nabbaxyzyx\ncodeforces\nacbba\nOutput\na\nabcdfdcba\nxyzyx\nc\nabba\n-----Note-----\nIn the first test, the string $s = $\"a\" satisfies all conditions.\nIn the second test, the string \"abcdfdcba\" satisfies all conditions, because:  Its length is $9$, which does not exceed the length of the string $s$, which equals $11$.  It is a palindrome.  \"abcdfdcba\" $=$ \"abcdfdc\" $+$ \"ba\", and \"abcdfdc\" is a prefix of $s$ while \"ba\" is a suffix of $s$. \nIt can be proven that there does not exist a longer string which satisfies the conditions.\nIn the fourth test, the string \"c\" is correct, because \"c\" $=$ \"c\" $+$ \"\" and $a$ or $b$ can be empty. The other possible solution for this test is \"s\".\n\ndef",
        "answer": "def longest_palindrome(s):\n    if len(s) == 0:\n        return s\n    if len(s) == 1:\n        return s\n    if len(s) == 2:\n        if s[0] == s[1]:\n            return s\n        else:\n            return s[0]\n    if len(s) == 3:\n        if s[0] == s[2]:\n            return s\n        else:\n            return s[0]\n    if len(s) == 4:\n        if s[0] == s[3]:\n            return s\n        else:\n            return s[0]\n    if len(s) == 5:\n        if s[0] == s[4]:\n            return s\n        else:\n            return s[0]\n    if len(s) == 6:\n        if s[0] == s[5]:\n            return s\n        else:\n            return s[0]\n    if len(s) == 7:\n        if s[0] == s[6]:\n            return s\n        else:\n            return s[0]\n    if len(s) == 8:\n        if s[0] == s[7]:\n            return s\n        else:\n            return s[0]\n    if len(s) == 9:\n        if s[0] == s[8]:\n            return s\n        else:\n            return s[0]\n    if len(s) == 10:\n        if s[0] == s[9]:\n            return s\n        else:\n            return s[0]\n    if len(s) == 11:\n        if s[0] == s[10]:\n            return s\n        else:\n            return s[0]\n    if len(s) == 12:\n        if s[0] == s[11]:\n            return s\n        else:\n            return s[0]\n    if len(s) == 13:\n        if s[0] == s[12]:\n            return s\n        else:\n            return s[0]\n    if len(s) == 14:\n        if s[0] == s[",
        "difficulty": "interview"
    },
    {
        "task_id": 2165,
        "prompt": "Complete the Python function given the prompt below:Consider a system of n water taps all pouring water into the same container. The i-th water tap can be set to deliver any amount of water from 0 to a_{i} ml per second (this amount may be a real number). The water delivered by i-th tap has temperature t_{i}.\nIf for every $i \\in [ 1, n ]$ you set i-th tap to deliver exactly x_{i} ml of water per second, then the resulting temperature of water will be $\\frac{\\sum_{i = 1}^{n} x_{i} t_{i}}{\\sum_{i = 1}^{n} x_{i}}$ (if $\\sum_{i = 1}^{n} x_{i} = 0$, then to avoid division by zero we state that the resulting water temperature is 0).\nYou have to set all the water taps in such a way that the resulting temperature is exactly T. What is the maximum amount of water you may get per second if its temperature has to be T?\n-----Input-----\nThe first line contains two integers n and T (1 \u2264 n \u2264 200000, 1 \u2264 T \u2264 10^6) \u2014 the number of water taps and the desired temperature of water, respectively.\nThe second line contains n integers a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 10^6) where a_{i} is the maximum amount of water i-th tap can deliver per second.\nThe third line contains n integers t_1, t_2,..., t_{n} (1 \u2264 t_{i} \u2264 10^6) \u2014 the temperature of water each tap delivers.\n-----Output-----\nPrint the maximum possible amount of water with temperature exactly T you can get per second (if it is impossible to obtain water with such temperature, then the answer is considered to be 0).\nYour answer is considered correct if its absolute or relative error doesn't exceed 10^{ - 6}.\n-----Examples-----\nInput\n2 100\n3 10\n50 150\nOutput\n6.000000000000000\nInput\n3 9\n5 5 30\n6 6 10\nOutput\n40.000000000000000\nInput\n2 12\n1 3\n10 15\nOutput\n1.666666666666667\n\ndef",
        "answer": "def solution(a, t):\n    return sum(a) / sum(t)",
        "difficulty": "interview"
    },
    {
        "task_id": 2166,
        "prompt": "Complete the Python function given the prompt below:Iahub is so happy about inventing bubble sort graphs that he's staying all day long at the office and writing permutations. Iahubina is angry that she is no more important for Iahub. When Iahub goes away, Iahubina comes to his office and sabotage his research work.\nThe girl finds an important permutation for the research. The permutation contains n distinct integers a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 n). She replaces some of permutation elements with -1 value as a revenge. \nWhen Iahub finds out his important permutation is broken, he tries to recover it. The only thing he remembers about the permutation is it didn't have any fixed point. A fixed point for a permutation is an element a_{k} which has value equal to k (a_{k} = k). Your job is to proof to Iahub that trying to recover it is not a good idea. Output the number of permutations which could be originally Iahub's important permutation, modulo 1000000007 (10^9 + 7).\n-----Input-----\nThe first line contains integer n (2 \u2264 n \u2264 2000). On the second line, there are n integers, representing Iahub's important permutation after Iahubina replaces some values with -1. \nIt's guaranteed that there are no fixed points in the given permutation. Also, the given sequence contains at least two numbers -1 and each positive number occurs in the sequence at most once. It's guaranteed that there is at least one suitable permutation.\n-----Output-----\nOutput a single integer, the number of ways Iahub could recover his permutation, modulo 1000000007 (10^9 + 7).\n-----Examples-----\nInput\n5\n-1 -1 4 3 -1\nOutput\n2\n-----Note-----\nFor the first test example there are two permutations with no fixed points are [2, 5, 4, 3, 1] and [5, 1, 4, 3, 2]. Any other permutation would have at least one fixed point.\n\ndef",
        "answer": "def permutation(n, a):\n    # your code here\n    return",
        "difficulty": "interview"
    },
    {
        "task_id": 2167,
        "prompt": "Complete the Python function given the prompt below:Polycarpus has an array, consisting of n integers a_1, a_2,..., a_{n}. Polycarpus likes it when numbers in an array match. That's why he wants the array to have as many equal numbers as possible. For that Polycarpus performs the following operation multiple times:\n  he chooses two elements of the array a_{i}, a_{j} (i \u2260 j);  he simultaneously increases number a_{i} by 1 and decreases number a_{j} by 1, that is, executes a_{i} = a_{i} + 1 and a_{j} = a_{j} - 1. \nThe given operation changes exactly two distinct array elements. Polycarpus can apply the described operation an infinite number of times. \nNow he wants to know what maximum number of equal array elements he can get if he performs an arbitrary number of such operation. Help Polycarpus.\n-----Input-----\nThe first line contains integer n (1 \u2264 n \u2264 10^5) \u2014 the array size. The second line contains space-separated integers a_1, a_2,..., a_{n} (|a_{i}| \u2264 10^4) \u2014 the original array.\n-----Output-----\nPrint a single integer \u2014 the maximum number of equal array elements he can get if he performs an arbitrary number of the given operation.\n-----Examples-----\nInput\n2\n2 1\nOutput\n1\nInput\n3\n1 4 1\nOutput\n3\n\ndef",
        "answer": "def solution(a):\n    count = 0\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            if a[i] == a[j]:\n                count += 1\n    return count",
        "difficulty": "interview"
    },
    {
        "task_id": 2168,
        "prompt": "Complete the Python function given the prompt below:A conglomerate consists of $n$ companies. To make managing easier, their owners have decided to merge all companies into one. By law, it is only possible to merge two companies, so the owners plan to select two companies, merge them into one, and continue doing so until there is only one company left.\nBut anti-monopoly service forbids to merge companies if they suspect unfriendly absorption. The criterion they use is the difference in maximum salaries between two companies. Merging is allowed only if the maximum salaries are equal.\nTo fulfill the anti-monopoly requirements, the owners can change salaries in their companies before merging. But the labor union insists on two conditions: it is only allowed to increase salaries, moreover all the employees in one company must get the same increase.\nSure enough, the owners want to minimize the total increase of all salaries in all companies. Help them find the minimal possible increase that will allow them to merge companies into one.\n-----Input-----\nThe first line contains a single integer $n$\u00a0\u2014 the number of companies in the conglomerate ($1 \\le n \\le 2 \\cdot 10^5$). Each of the next $n$ lines describes a company. \nA company description start with an integer $m_i$\u00a0\u2014 the number of its employees ($1 \\le m_i \\le 2 \\cdot 10^5$). Then $m_i$ integers follow: the salaries of the employees. All salaries are positive and do not exceed $10^9$. \nThe total number of employees in all companies does not exceed $2 \\cdot 10^5$. \n-----Output-----\nOutput a single integer \u2014 the minimal total increase of all employees that allows to merge all companies.\n-----Example-----\nInput\n3\n2 4 3\n2 2 1\n3 1 1 1\nOutput\n13\n-----Note-----\nOne of the optimal merging strategies is the following. First increase all salaries in the second company by $2$, and merge the first and the second companies. Now the conglomerate consists of two companies with salaries $[4, 3, 4, 3]$ and $[1, 1, 1]$. To merge them, increase the salaries in the second of those by $3$. The total increase is $2 + 2 + 3 + 3 + 3 = 13$.\n\ndef",
        "answer": "def anti_monopoly(n, m):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2169,
        "prompt": "Complete the Python function given the prompt below:We have a grid with H rows and W columns. The square at the i-th row and the j-th column will be called Square (i,j).\nThe integers from 1 through H\u00d7W are written throughout the grid, and the integer written in Square (i,j) is A_{i,j}.\nYou, a magical girl, can teleport a piece placed on Square (i,j) to Square (x,y) by consuming |x-i|+|y-j| magic points.\nYou now have to take Q practical tests of your ability as a magical girl.\nThe i-th test will be conducted as follows:\n - Initially, a piece is placed on the square where the integer L_i is written.\n - Let x be the integer written in the square occupied by the piece. Repeatedly move the piece to the square where the integer x+D is written, as long as x is not R_i. The test ends when x=R_i.\n - Here, it is guaranteed that R_i-L_i is a multiple of D.\nFor each test, find the sum of magic points consumed during that test.\n-----Constraints-----\n - 1 \\leq H,W \\leq 300\n - 1 \\leq D \\leq H\u00d7W\n - 1 \\leq A_{i,j} \\leq H\u00d7W\n - A_{i,j} \\neq A_{x,y} ((i,j) \\neq (x,y))\n - 1 \\leq Q \\leq 10^5\n - 1 \\leq L_i \\leq R_i \\leq H\u00d7W\n - (R_i-L_i) is a multiple of D.\n-----Input-----\nInput is given from Standard Input in the following format:\nH W D\nA_{1,1} A_{1,2}... A_{1,W}\n:\nA_{H,1} A_{H,2}... A_{H,W}\nQ\nL_1 R_1\n:\nL_Q R_Q\n-----Output-----\nFor each test, print the sum of magic points consumed during that test.\nOutput should be in the order the tests are conducted.\n-----Sample Input-----\n3 3 2\n1 4 3\n2 5 7\n8 9 6\n1\n4 8\n-----Sample Output-----\n5\n - 4 is written in Square (1,2).\n - 6 is written in Square (3,3).\n - 8 is written in Square (3,1).\nThus, the sum of magic points consumed during the first test is (|3-1|+|3-2|)+(|3-3|+|1-3|)=5.\n\ndef",
        "answer": "def magical_girl(H,W,D,A):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2170,
        "prompt": "Complete the Python function given the prompt below:Count the pairs of length-N sequences consisting of integers between 1 and M (inclusive), A_1, A_2, \\cdots, A_{N} and B_1, B_2, \\cdots, B_{N}, that satisfy all of the following conditions:\n - A_i \\neq B_i, for every i such that 1\\leq i\\leq N.\n - A_i \\neq A_j and B_i \\neq B_j, for every (i, j) such that 1\\leq i < j\\leq N.\nSince the count can be enormous, print it modulo (10^9+7).\n-----Constraints-----\n - 1\\leq N \\leq M \\leq 5\\times10^5\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN M\n-----Output-----\nPrint the count modulo (10^9+7).\n-----Sample Input-----\n2 2\n-----Sample Output-----\n2\nA_1=1,A_2=2,B_1=2,B_2=1 and A_1=2,A_2=1,B_1=1,B_2=2 satisfy the conditions.\n\ndef",
        "answer": "def count_pairs(N, M):\n    count = 0\n    for i in range(1, M+1):\n        for j in range(1, M+1):\n            if i!= j:\n                if i < j:\n                    count += 1\n    return count",
        "difficulty": "interview"
    },
    {
        "task_id": 2171,
        "prompt": "Complete the Python function given the prompt below:This morning Chef wants to jump a little. In a few minutes he will arrive at the point 0. Then he will perform a lot of jumps in such a sequence: 1-jump, 2-jump, 3-jump, 1-jump, 2-jump, 3-jump, 1-jump, and so on.\n1-jump means that if Chef is at the point x, he will jump to the point x+1. \n2-jump means that if Chef is at the point x, he will jump to the point x+2. \n3-jump means that if Chef is at the point x, he will jump to the point x+3. \nBefore the start Chef asks you: will he arrive at the point a after some number of jumps?\n-----Input-----\nThe first line contains a single integer a denoting the point Chef asks about. \n-----Output-----\nOutput \"yes\" without a quotes if Chef can arrive at point a or \"no\" without a quotes otherwise.\n-----Constraints-----\n- 0 \u2264 a \u2264 1018\n-----Example-----\nInput:\n0\nOutput:\nyes\nInput:\n1\nOutput:\nyes\nInput:\n2\nOutput:\nno\nInput:\n3\nOutput:\nyes\nInput:\n6\nOutput:\nyes\nInput:\n7\nOutput:\nyes\nInput:\n10\nOutput:\nno\n-----Explanation-----\nThe first reached points are: 0 (+1) 1 (+2) 3 (+3) 6 (+1) 7, and so on.\n\ndef",
        "answer": "def jump(a):\n    if a == 0:\n        return \"yes\"\n    elif a == 1:\n        return \"yes\"\n    elif a == 2:\n        return \"no\"\n    else:\n        return jump(a-1) + jump(a-2) + jump(a-3)",
        "difficulty": "interview"
    },
    {
        "task_id": 2172,
        "prompt": "Complete the Python function given the prompt below:You have a new professor of graph theory and he speaks very quickly. You come up with the following plan to keep up with his lecture and make notes.\nYou know two languages, and the professor is giving the lecture in the first one. The words in both languages consist of lowercase English characters, each language consists of several words. For each language, all words are distinct, i.e. they are spelled differently. Moreover, the words of these languages have a one-to-one correspondence, that is, for each word in each language, there exists exactly one word in the other language having has the same meaning.\nYou can write down every word the professor says in either the first language or the second language. Of course, during the lecture you write down each word in the language in which the word is shorter. In case of equal lengths of the corresponding words you prefer the word of the first language.\nYou are given the text of the lecture the professor is going to read. Find out how the lecture will be recorded in your notes.\n-----Input-----\nThe first line contains two integers, n and m (1 \u2264 n \u2264 3000, 1 \u2264 m \u2264 3000) \u2014 the number of words in the professor's lecture and the number of words in each of these languages.\nThe following m lines contain the words. The i-th line contains two strings a_{i}, b_{i} meaning that the word a_{i} belongs to the first language, the word b_{i} belongs to the second language, and these two words have the same meaning. It is guaranteed that no word occurs in both languages, and each word occurs in its language exactly once.\nThe next line contains n space-separated strings c_1, c_2,..., c_{n} \u2014 the text of the lecture. It is guaranteed that each of the strings c_{i} belongs to the set of strings {a_1, a_2,... a_{m}}.\nAll the strings in the input are non-empty, each consisting of no more than 10 lowercase English letters.\n-----Output-----\nOutput exactly n words: how you will record the lecture in your notebook. Output the words of the lecture in the same order as in the input.\n-----Examples-----\nInput\n4 3\ncodeforces codesecrof\ncontest round\nletter message\ncodeforces contest letter contest\nOutput\ncodeforces round letter round\nInput\n5 3\njoll wuqrd\neuzf un\nhbnyiyc rsoqqveh\nhbnyiyc joll joll euzf joll\nOutput\nhbnyiyc joll joll un joll\n\ndef",
        "answer": "def solution(n, m, c):\n    # Write your code here",
        "difficulty": "interview"
    },
    {
        "task_id": 2173,
        "prompt": "Complete the Python function given the prompt below:One very well-known internet resource site (let's call it X) has come up with a New Year adventure. Specifically, they decided to give ratings to all visitors.\nThere are n users on the site, for each user we know the rating value he wants to get as a New Year Present. We know that user i wants to get at least a_{i} rating units as a present.\nThe X site is administered by very creative and thrifty people. On the one hand, they want to give distinct ratings and on the other hand, the total sum of the ratings in the present must be as small as possible.\nHelp site X cope with the challenging task of rating distribution. Find the optimal distribution.\n-----Input-----\nThe first line contains integer n (1 \u2264 n \u2264 3\u00b710^5) \u2014 the number of users on the site. The next line contains integer sequence a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 10^9).\n-----Output-----\nPrint a sequence of integers b_1, b_2,..., b_{n}. Number b_{i} means that user i gets b_{i} of rating as a present. The printed sequence must meet the problem conditions. \nIf there are multiple optimal solutions, print any of them.\n-----Examples-----\nInput\n3\n5 1 1\nOutput\n5 1 2\nInput\n1\n1000000000\nOutput\n1000000000\n\ndef",
        "answer": "def optimal_distribution(a):\n    a.sort()\n    b = [0] * len(a)\n    b[0] = a[0]\n    for i in range(1, len(a)):\n        b[i] = b[i - 1] + a[i]\n    return b",
        "difficulty": "interview"
    },
    {
        "task_id": 2174,
        "prompt": "Complete the Python function given the prompt below:Permutation p is an ordered set of integers p_1,  p_2, ...,  p_{n}, consisting of n distinct positive integers, each of them doesn't exceed n. We'll denote the i-th element of permutation p as p_{i}. We'll call number n the size or the length of permutation p_1,  p_2, ...,  p_{n}.\nYou have a sequence of integers a_1, a_2,..., a_{n}. In one move, you are allowed to decrease or increase any number by one. Count the minimum number of moves, needed to build a permutation from this sequence.\n-----Input-----\nThe first line contains integer n (1 \u2264 n \u2264 3\u00b710^5) \u2014 the size of the sought permutation. The second line contains n integers a_1, a_2,..., a_{n} ( - 10^9 \u2264 a_{i} \u2264 10^9).\n-----Output-----\nPrint a single number \u2014 the minimum number of moves.\nPlease, do not use the %lld specifier to read or write 64-bit integers in C++. It is preferred to use the cin, cout streams or the %I64d specifier.\n-----Examples-----\nInput\n2\n3 0\nOutput\n2\nInput\n3\n-1 -1 2\nOutput\n6\n-----Note-----\nIn the first sample you should decrease the first number by one and then increase the second number by one. The resulting permutation is (2, 1).\nIn the second sample you need 6 moves to build permutation (1, 3, 2).\n\ndef",
        "answer": "def permutation(n, a):\n    # your code here\n    return",
        "difficulty": "interview"
    },
    {
        "task_id": 2175,
        "prompt": "Complete the Python function given the prompt below:There is a system of n vessels arranged one above the other as shown in the figure below. Assume that the vessels are numbered from 1 to n, in the order from the highest to the lowest, the volume of the i-th vessel is a_{i} liters. [Image] \nInitially, all the vessels are empty. In some vessels water is poured. All the water that overflows from the i-th vessel goes to the (i + 1)-th one. The liquid that overflows from the n-th vessel spills on the floor.\nYour task is to simulate pouring water into the vessels. To do this, you will need to handle two types of queries:  Add x_{i} liters of water to the p_{i}-th vessel;  Print the number of liters of water in the k_{i}-th vessel. \nWhen you reply to the second request you can assume that all the water poured up to this point, has already overflown between the vessels.\n-----Input-----\nThe first line contains integer n \u2014 the number of vessels (1 \u2264 n \u2264 2\u00b710^5). The second line contains n integers a_1, a_2,..., a_{n} \u2014 the vessels' capacities (1 \u2264 a_{i} \u2264 10^9). The vessels' capacities do not necessarily increase from the top vessels to the bottom ones (see the second sample). The third line contains integer m \u2014 the number of queries (1 \u2264 m \u2264 2\u00b710^5). Each of the next m lines contains the description of one query. The query of the first type is represented as \"1\u00a0p_{i}\u00a0x_{i}\", the query of the second type is represented as \"2\u00a0k_{i}\" (1 \u2264 p_{i} \u2264 n, 1 \u2264 x_{i} \u2264 10^9, 1 \u2264 k_{i} \u2264 n).\n-----Output-----\nFor each query, print on a single line the number of liters of water in the corresponding vessel.\n-----Examples-----\nInput\n2\n5 10\n6\n1 1 4\n2 1\n1 2 5\n1 1 4\n2 1\n2 2\nOutput\n4\n5\n8\nInput\n3\n5 10 8\n6\n1 1 12\n2 2\n1 1 6\n1 3 2\n2 2\n2 3\nOutput\n7\n10\n5\n\ndef",
        "answer": "def solution(n, a, m):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2176,
        "prompt": "Complete the Python function given the prompt below:You are given a sequence of $n$ pairs of integers: $(a_1, b_1), (a_2, b_2), \\dots, (a_n, b_n)$. This sequence is called bad if it is sorted in non-descending order by first elements or if it is sorted in non-descending order by second elements. Otherwise the sequence is good. There are examples of good and bad sequences:  $s = [(1, 2), (3, 2), (3, 1)]$ is bad because the sequence of first elements is sorted: $[1, 3, 3]$;  $s = [(1, 2), (3, 2), (1, 2)]$ is bad because the sequence of second elements is sorted: $[2, 2, 2]$;  $s = [(1, 1), (2, 2), (3, 3)]$ is bad because both sequences (the sequence of first elements and the sequence of second elements) are sorted;  $s = [(1, 3), (3, 3), (2, 2)]$ is good because neither the sequence of first elements $([1, 3, 2])$ nor the sequence of second elements $([3, 3, 2])$ is sorted. \nCalculate the number of permutations of size $n$ such that after applying this permutation to the sequence $s$ it turns into a good sequence. \nA permutation $p$ of size $n$ is a sequence $p_1, p_2, \\dots, p_n$ consisting of $n$ distinct integers from $1$ to $n$ ($1 \\le p_i \\le n$). If you apply permutation $p_1, p_2, \\dots, p_n$ to the sequence $s_1, s_2, \\dots, s_n$ you get the sequence $s_{p_1}, s_{p_2}, \\dots, s_{p_n}$. For example, if $s = [(1, 2), (1, 3), (2, 3)]$ and $p = [2, 3, 1]$ then $s$ turns into $[(1, 3), (2, 3), (1, 2)]$.\n-----Input-----\nThe first line contains one integer $n$ ($1 \\le n \\le 3 \\cdot 10^5$).\nThe next $n$ lines contains description of sequence $s$. The $i$-th line contains two integers $a_i$ and $b_i$ ($1 \\le a_i, b_i \\le n$) \u2014 the first and second elements of $i$-th pair in the sequence.\nThe sequence $s$ may contain equal elements.\n-----Output-----\nPrint the number of permutations of size $n$ such that after applying this permutation to the sequence $s$ it turns into a good sequence. Print the answer modulo $998244353$ (a prime number).\n-----Examples-----\nInput\n3\n1 1\n2 2\n3 1\nOutput\n3\nInput\n4\n2 3\n2 2\n2 1\n2 4\nOutput\n0\nInput\n3\n1 1\n1 1\n2 3\nOutput\n4\n-----Note-----\nIn first test case there are six permutations of size $3$:   if $p = [1, 2, 3]$, then $s = [(1, 1), (2, 2), (3, 1)]$ \u2014 bad sequence (sorted by first elements);  if $p = [1, 3, 2]$, then $s = [(1, 1), (3, 1), (2, 2)]$ \u2014 bad sequence (sorted by second elements);  if $p = [2, 1, 3]$, then $s = [(2, 2), (1, 1), (3, 1)]$ \u2014 good sequence;  if $p = [2, 3, 1]$, then $s = [(2, 2), (3, 1), (1, 1)]$ \u2014 good sequence;  if $p = [3, 1, 2]$, then $s = [(3, 1), (1, 1), (2, 2)]$ \u2014 bad sequence (sorted by second elements);  if $p = [3, 2, 1]$, then $s = [(3, 1), (2, 2), (1, 1)]$ \u2014 good sequence.\n\ndef",
        "answer": "def count_good_permutations(n, s):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2177,
        "prompt": "Complete the Python function given the prompt below:You are given two integers $A$ and $B$, calculate the number of pairs $(a, b)$ such that $1 \\le a \\le A$, $1 \\le b \\le B$, and the equation $a \\cdot b + a + b = conc(a, b)$ is true; $conc(a, b)$ is the concatenation of $a$ and $b$ (for example, $conc(12, 23) = 1223$, $conc(100, 11) = 10011$). $a$ and $b$ should not contain leading zeroes.\n-----Input-----\nThe first line contains $t$ ($1 \\le t \\le 100$) \u2014 the number of test cases.\nEach test case contains two integers $A$ and $B$ $(1 \\le A, B \\le 10^9)$.\n-----Output-----\nPrint one integer \u2014 the number of pairs $(a, b)$ such that $1 \\le a \\le A$, $1 \\le b \\le B$, and the equation $a \\cdot b + a + b = conc(a, b)$ is true.\n-----Example-----\nInput\n3\n1 11\n4 2\n191 31415926\nOutput\n1\n0\n1337\n-----Note-----\nThere is only one suitable pair in the first test case: $a = 1$, $b = 9$ ($1 + 9 + 1 \\cdot 9 = 19$).\n\ndef",
        "answer": "def conc(a, b):\n    return str(a) + str(b)",
        "difficulty": "interview"
    },
    {
        "task_id": 2178,
        "prompt": "Complete the Python function given the prompt below:Vasya has got $n$ books, numbered from $1$ to $n$, arranged in a stack. The topmost book has number $a_1$, the next one \u2014 $a_2$, and so on. The book at the bottom of the stack has number $a_n$. All numbers are distinct.\nVasya wants to move all the books to his backpack in $n$ steps. During $i$-th step he wants to move the book number $b_i$ into his backpack. If the book with number $b_i$ is in the stack, he takes this book and all the books above the book $b_i$, and puts them into the backpack; otherwise he does nothing and begins the next step. For example, if books are arranged in the order $[1, 2, 3]$ (book $1$ is the topmost), and Vasya moves the books in the order $[2, 1, 3]$, then during the first step he will move two books ($1$ and $2$), during the second step he will do nothing (since book $1$ is already in the backpack), and during the third step \u2014 one book (the book number $3$). Note that $b_1, b_2, \\dots, b_n$ are distinct.\nHelp Vasya! Tell him the number of books he will put into his backpack during each step.\n-----Input-----\nThe first line contains one integer $n~(1 \\le n \\le 2 \\cdot 10^5)$ \u2014 the number of books in the stack.\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n~(1 \\le a_i \\le n)$ denoting the stack of books.\nThe third line contains $n$ integers $b_1, b_2, \\dots, b_n~(1 \\le b_i \\le n)$ denoting the steps Vasya is going to perform.\nAll numbers $a_1 \\dots a_n$ are distinct, the same goes for $b_1 \\dots b_n$.\n-----Output-----\nPrint $n$ integers. The $i$-th of them should be equal to the number of books Vasya moves to his backpack during the $i$-th step.\n-----Examples-----\nInput\n3\n1 2 3\n2 1 3\nOutput\n2 0 1 \nInput\n5\n3 1 4 2 5\n4 5 1 3 2\nOutput\n3 2 0 0 0 \nInput\n6\n6 5 4 3 2 1\n6 5 3 4 2 1\nOutput\n1 1 2 0 1 1 \n-----Note-----\nThe first example is described in the statement.\nIn the second example, during the first step Vasya will move the books $[3, 1, 4]$. After that only books $2$ and $5$ remain in the stack ($2$ is above $5$). During the second step Vasya will take the books $2$ and $5$. After that the stack becomes empty, so during next steps Vasya won't move any books.\n\ndef",
        "answer": "def book_stack(n, a, b):\n    stack = []\n    for i in range(n):\n        stack.append(i+1)\n    for i in range(n):\n        if stack[b[i]-1] == a[i]:\n            stack.pop(b[i]-1)\n            stack.append(a[i])\n    return stack",
        "difficulty": "interview"
    },
    {
        "task_id": 2179,
        "prompt": "Complete the Python function given the prompt below:Little girl Susie accidentally found her elder brother's notebook. She has many things to do, more important than solving problems, but she found this problem too interesting, so she wanted to know its solution and decided to ask you about it. So, the problem statement is as follows.\nLet's assume that we are given a connected weighted undirected graph G = (V, E) (here V is the set of vertices, E is the set of edges). The shortest-path tree from vertex u is such graph G_1 = (V, E_1) that is a tree with the set of edges E_1 that is the subset of the set of edges of the initial graph E, and the lengths of the shortest paths from u to any vertex to G and to G_1 are the same. \nYou are given a connected weighted undirected graph G and vertex u. Your task is to find the shortest-path tree of the given graph from vertex u, the total weight of whose edges is minimum possible.\n-----Input-----\nThe first line contains two numbers, n and m (1 \u2264 n \u2264 3\u00b710^5, 0 \u2264 m \u2264 3\u00b710^5) \u2014 the number of vertices and edges of the graph, respectively.\nNext m lines contain three integers each, representing an edge \u2014 u_{i}, v_{i}, w_{i} \u2014 the numbers of vertices connected by an edge and the weight of the edge (u_{i} \u2260 v_{i}, 1 \u2264 w_{i} \u2264 10^9). It is guaranteed that graph is connected and that there is no more than one edge between any pair of vertices.\nThe last line of the input contains integer u (1 \u2264 u \u2264 n) \u2014 the number of the start vertex.\n-----Output-----\nIn the first line print the minimum total weight of the edges of the tree.\nIn the next line print the indices of the edges that are included in the tree, separated by spaces. The edges are numbered starting from 1 in the order they follow in the input. You may print the numbers of the edges in any order.\nIf there are multiple answers, print any of them.\n-----Examples-----\nInput\n3 3\n1 2 1\n2 3 1\n1 3 2\n3\nOutput\n2\n1 2 \nInput\n4 4\n1 2 1\n2 3 1\n3 4 1\n4 1 2\n4\nOutput\n4\n2 3 4 \n-----Note-----\nIn the first sample there are two possible shortest path trees:\n  with edges 1 \u2013 3 and 2 \u2013 3 (the total weight is 3);  with edges 1 \u2013 2 and 2 \u2013 3 (the total weight is 2); \nAnd, for example, a tree with edges 1 \u2013 2 and 1 \u2013 3 won't be a shortest path tree for vertex 3, because the distance from vertex 3 to vertex 2 in this tree equals 3, and in the original graph it is 1.\n\ndef",
        "answer": "def find_shortest_path(graph, u):\n    # your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2180,
        "prompt": "Complete the Python function given the prompt below:Iahub likes chess very much. He even invented a new chess piece named Coder. A Coder can move (and attack) one square horizontally or vertically. More precisely, if the Coder is located at position (x, y), he can move to (or attack) positions (x + 1, y), (x\u20131, y), (x, y + 1) and (x, y\u20131).\nIahub wants to know how many Coders can be placed on an n \u00d7 n chessboard, so that no Coder attacks any other Coder.\n-----Input-----\nThe first line contains an integer n (1 \u2264 n \u2264 1000).\n-----Output-----\nOn the first line print an integer, the maximum number of Coders that can be placed on the chessboard.\nOn each of the next n lines print n characters, describing the configuration of the Coders. For an empty cell print an '.', and for a Coder print a 'C'.\nIf there are multiple correct answers, you can print any.\n-----Examples-----\nInput\n2\nOutput\n2\nC.\n.C\n\ndef",
        "answer": "def solution(n):\n    return n * n",
        "difficulty": "interview"
    },
    {
        "task_id": 2181,
        "prompt": "Complete the Python function given the prompt below:Valera takes part in the Berland Marathon. The marathon race starts at the stadium that can be represented on the plane as a square whose lower left corner is located at point with coordinates (0, 0) and the length of the side equals a meters. The sides of the square are parallel to coordinate axes.\nAs the length of the marathon race is very long, Valera needs to have extra drink during the race. The coach gives Valera a bottle of drink each d meters of the path. We know that Valera starts at the point with coordinates (0, 0) and runs counter-clockwise. That is, when Valera covers a meters, he reaches the point with coordinates (a, 0). We also know that the length of the marathon race equals nd + 0.5 meters. \nHelp Valera's coach determine where he should be located to help Valera. Specifically, determine the coordinates of Valera's positions when he covers d, 2\u00b7d,..., n\u00b7d meters.\n-----Input-----\nThe first line contains two space-separated real numbers a and d (1 \u2264 a, d \u2264 10^5), given with precision till 4 decimal digits after the decimal point. Number a denotes the length of the square's side that describes the stadium. Number d shows that after each d meters Valera gets an extra drink.\nThe second line contains integer n (1 \u2264 n \u2264 10^5) showing that Valera needs an extra drink n times.\n-----Output-----\nPrint n lines, each line should contain two real numbers x_{i} and y_{i}, separated by a space. Numbers x_{i} and y_{i} in the i-th line mean that Valera is at point with coordinates (x_{i}, y_{i}) after he covers i\u00b7d meters. Your solution will be considered correct if the absolute or relative error doesn't exceed 10^{ - 4}.\nNote, that this problem have huge amount of output data. Please, do not use cout stream for output in this problem.\n-----Examples-----\nInput\n2 5\n2\nOutput\n1.0000000000 2.0000000000\n2.0000000000 0.0000000000\nInput\n4.147 2.8819\n6\nOutput\n2.8819000000 0.0000000000\n4.1470000000 1.6168000000\n3.7953000000 4.1470000000\n0.9134000000 4.1470000000\n0.0000000000 2.1785000000\n0.7034000000 0.0000000000\n\ndef",
        "answer": "def main():\n    a, d = map(float, input().split())\n    n = int(input())\n    for i in range(n):\n        x, y = map(float, input().split())\n        print('{:.4f} {:.4f}'.format(x, y))",
        "difficulty": "interview"
    },
    {
        "task_id": 2182,
        "prompt": "Complete the Python function given the prompt below:Bob is a competitive programmer. He wants to become red, and for that he needs a strict training regime. He went to the annual meeting of grandmasters and asked $n$ of them how much effort they needed to reach red.\n\"Oh, I just spent $x_i$ hours solving problems\", said the $i$-th of them. \nBob wants to train his math skills, so for each answer he wrote down the number of minutes ($60 \\cdot x_i$), thanked the grandmasters and went home. Bob could write numbers with leading zeroes \u2014 for example, if some grandmaster answered that he had spent $2$ hours, Bob could write $000120$ instead of $120$.\nAlice wanted to tease Bob and so she took the numbers Bob wrote down, and for each of them she did one of the following independently:   rearranged its digits, or  wrote a random number. \nThis way, Alice generated $n$ numbers, denoted $y_1$,..., $y_n$.\nFor each of the numbers, help Bob determine whether $y_i$ can be a permutation of a number divisible by $60$ (possibly with leading zeroes).\n-----Input-----\nThe first line contains a single integer $n$ ($1 \\leq n \\leq 418$)\u00a0\u2014 the number of grandmasters Bob asked.\nThen $n$ lines follow, the $i$-th of which contains a single integer $y_i$\u00a0\u2014 the number that Alice wrote down.\nEach of these numbers has between $2$ and $100$ digits '0' through '9'. They can contain leading zeroes.\n-----Output-----\nOutput $n$ lines.\nFor each $i$, output the following. If it is possible to rearrange the digits of $y_i$ such that the resulting number is divisible by $60$, output \"red\" (quotes for clarity). Otherwise, output \"cyan\".\n-----Example-----\nInput\n6\n603\n006\n205\n228\n1053\n0000000000000000000000000000000000000000000000\nOutput\nred\nred\ncyan\ncyan\ncyan\nred\n-----Note-----\nIn the first example, there is one rearrangement that yields a number divisible by $60$, and that is $360$.\nIn the second example, there are two solutions. One is $060$ and the second is $600$.\nIn the third example, there are $6$ possible rearrangments: $025$, $052$, $205$, $250$, $502$, $520$. None of these numbers is divisible by $60$.\nIn the fourth example, there are $3$ rearrangements: $228$, $282$, $822$.\nIn the fifth example, none of the $24$ rearrangements result in a number divisible by $60$.\nIn the sixth example, note that $000\\dots0$ is a valid solution.\n\ndef",
        "answer": "def solve(n):\n    return'red' if n % 60 == 0 else 'cyan'",
        "difficulty": "interview"
    },
    {
        "task_id": 2184,
        "prompt": "Complete the Python function given the prompt below:You are given a boolean function of three variables which is defined by its truth table. You need to find an expression of minimum length that equals to this function. The expression may consist of:   Operation AND ('&', ASCII code 38)  Operation OR ('|', ASCII code 124)  Operation NOT ('!', ASCII code 33)  Variables x, y and z (ASCII codes 120-122)  Parentheses ('(', ASCII code 40, and ')', ASCII code 41) \nIf more than one expression of minimum length exists, you should find the lexicographically smallest one.\nOperations have standard priority. NOT has the highest priority, then AND goes, and OR has the lowest priority. The expression should satisfy the following grammar:\nE ::= E '|' T | T\nT ::= T '&' F | F\nF ::= '!' F | '(' E ')' | 'x' | 'y' | 'z'\n-----Input-----\nThe first line contains one integer n\u00a0\u2014 the number of functions in the input (1 \u2264 n \u2264 10 000).\nThe following n lines contain descriptions of functions, the i-th of them contains a string of length 8 that consists of digits 0 and 1\u00a0\u2014 the truth table of the i-th function. The digit on position j (0 \u2264 j < 8) equals to the value of the function in case of $x = \\lfloor \\frac{j}{4} \\rfloor$, $y = \\lfloor \\frac{j}{2} \\rfloor \\operatorname{mod} 2$ and $z = j \\operatorname{mod} 2$.\n-----Output-----\nYou should output n lines, the i-th line should contain the expression of minimum length which equals to the i-th function. If there is more than one such expression, output the lexicographically smallest of them. Expressions should satisfy the given grammar and shouldn't contain white spaces.\n-----Example-----\nInput\n4\n00110011\n00000111\n11110000\n00011111\nOutput\ny\n(y|z)&x\n!x\nx|y&z\n-----Note-----\nThe truth table for the second function:\n[Image]\n\ndef",
        "answer": "def f(x, y, z):\n    return (x & y) | (not z)",
        "difficulty": "interview"
    },
    {
        "task_id": 2185,
        "prompt": "Complete the Python function given the prompt below:You're given two arrays $a[1 \\dots n]$ and $b[1 \\dots n]$, both of the same length $n$.\nIn order to perform a push operation, you have to choose three integers $l, r, k$ satisfying $1 \\le l \\le r \\le n$ and $k > 0$. Then, you will add $k$ to elements $a_l, a_{l+1}, \\ldots, a_r$.\nFor example, if $a = [3, 7, 1, 4, 1, 2]$ and you choose $(l = 3, r = 5, k = 2)$, the array $a$ will become $[3, 7, \\underline{3, 6, 3}, 2]$.\nYou can do this operation at most once. Can you make array $a$ equal to array $b$?\n(We consider that $a = b$ if and only if, for every $1 \\le i \\le n$, $a_i = b_i$)\n-----Input-----\nThe first line contains a single integer $t$ ($1 \\le t \\le 20$) \u2014 the number of test cases in the input.\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 100\\ 000$) \u2014 the number of elements in each array.\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 1000$).\nThe third line of each test case contains $n$ integers $b_1, b_2, \\ldots, b_n$ ($1 \\le b_i \\le 1000$).\nIt is guaranteed that the sum of $n$ over all test cases doesn't exceed $10^5$.\n-----Output-----\nFor each test case, output one line containing \"YES\" if it's possible to make arrays $a$ and $b$ equal by performing at most once the described operation or \"NO\" if it's impossible.\nYou can print each letter in any case (upper or lower).\n-----Example-----\nInput\n4\n6\n3 7 1 4 1 2\n3 7 3 6 3 2\n5\n1 1 1 1 1\n1 2 1 3 1\n2\n42 42\n42 42\n1\n7\n6\nOutput\nYES\nNO\nYES\nNO\n-----Note-----\nThe first test case is described in the statement: we can perform a push operation with parameters $(l=3, r=5, k=2)$ to make $a$ equal to $b$.\nIn the second test case, we would need at least two operations to make $a$ equal to $b$.\nIn the third test case, arrays $a$ and $b$ are already equal.\nIn the fourth test case, it's impossible to make $a$ equal to $b$, because the integer $k$ has to be positive.\n\ndef",
        "answer": "def push(a, b, l, r, k):\n    a[l] += k\n    a[r+1] += k\n    for i in range(l+1, r+1):\n        a[i] = a[i-1]\n    for i in range(l+1, r+1):\n        b[i] = b[i-1]\n    return a == b",
        "difficulty": "interview"
    },
    {
        "task_id": 2186,
        "prompt": "Complete the Python function given the prompt below:Watto, the owner of a spare parts store, has recently got an order for the mechanism that can process strings in a certain way. Initially the memory of the mechanism is filled with n strings. Then the mechanism should be able to process queries of the following type: \"Given string s, determine if the memory of the mechanism contains string t that consists of the same number of characters as s and differs from s in exactly one position\".\nWatto has already compiled the mechanism, all that's left is to write a program for it and check it on the data consisting of n initial lines and m queries. He decided to entrust this job to you.\n-----Input-----\nThe first line contains two non-negative numbers n and m (0 \u2264 n \u2264 3\u00b710^5, 0 \u2264 m \u2264 3\u00b710^5) \u2014 the number of the initial strings and the number of queries, respectively.\nNext follow n non-empty strings that are uploaded to the memory of the mechanism.\nNext follow m non-empty strings that are the queries to the mechanism.\nThe total length of lines in the input doesn't exceed 6\u00b710^5. Each line consists only of letters 'a', 'b', 'c'.\n-----Output-----\nFor each query print on a single line \"YES\" (without the quotes), if the memory of the mechanism contains the required string, otherwise print \"NO\" (without the quotes).\n-----Examples-----\nInput\n2 3\naaaaa\nacacaca\naabaa\nccacacc\ncaaac\nOutput\nYES\nNO\nNO\n\ndef",
        "answer": "def solution(n, m, strings):\n    # Write your code here\n    pass\n",
        "difficulty": "interview"
    },
    {
        "task_id": 2187,
        "prompt": "Complete the Python function given the prompt below:Omkar is building a waterslide in his water park, and he needs your help to ensure that he does it as efficiently as possible.\nOmkar currently has $n$ supports arranged in a line, the $i$-th of which has height $a_i$. Omkar wants to build his waterslide from the right to the left, so his supports must be nondecreasing in height in order to support the waterslide. In $1$ operation, Omkar can do the following: take any contiguous subsegment of supports which is nondecreasing by heights and add $1$ to each of their heights. \nHelp Omkar find the minimum number of operations he needs to perform to make his supports able to support his waterslide!\nAn array $b$ is a subsegment of an array $c$ if $b$ can be obtained from $c$ by deletion of several (possibly zero or all) elements from the beginning and several (possibly zero or all) elements from the end.\nAn array $b_1, b_2, \\dots, b_n$ is called nondecreasing if $b_i\\le b_{i+1}$ for every $i$ from $1$ to $n-1$.\n-----Input-----\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\leq t \\leq 100$). Description of the test cases follows.\nThe first line of each test case contains an integer $n$ ($1 \\leq n \\leq 2 \\cdot 10^5$)\u00a0\u2014 the number of supports Omkar has.\nThe second line of each test case contains $n$ integers $a_{1},a_{2},...,a_{n}$ $(0 \\leq a_{i} \\leq 10^9)$\u00a0\u2014 the heights of the supports.\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n-----Output-----\nFor each test case, output a single integer\u00a0\u2014 the minimum number of operations Omkar needs to perform to make his supports able to support his waterslide.\n-----Example-----\nInput\n3\n4\n5 3 2 5\n5\n1 2 3 5 3\n3\n1 1 1\nOutput\n3\n2\n0\n-----Note-----\nThe subarray with which Omkar performs the operation is bolded.\nIn the first test case:\nFirst operation:\n$[5, 3, \\textbf{2}, 5] \\to [5, 3, \\textbf{3}, 5]$\nSecond operation:\n$[5, \\textbf{3}, \\textbf{3}, 5] \\to [5, \\textbf{4}, \\textbf{4}, 5]$\nThird operation:\n$[5, \\textbf{4}, \\textbf{4}, 5] \\to [5, \\textbf{5}, \\textbf{5}, 5]$\nIn the third test case, the array is already nondecreasing, so Omkar does $0$ operations.\n\ndef",
        "answer": "def waterSlide(n, a):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2188,
        "prompt": "Complete the Python function given the prompt below:You are given $n$ pairs of integers $(a_1, b_1), (a_2, b_2), \\ldots, (a_n, b_n)$. All of the integers in the pairs are distinct and are in the range from $1$ to $2 \\cdot n$ inclusive.\nLet's call a sequence of integers $x_1, x_2, \\ldots, x_{2k}$ good if either   $x_1 < x_2 > x_3 < \\ldots < x_{2k-2} > x_{2k-1} < x_{2k}$, or  $x_1 > x_2 < x_3 > \\ldots > x_{2k-2} < x_{2k-1} > x_{2k}$. \nYou need to choose a subset of distinct indices $i_1, i_2, \\ldots, i_t$ and their order in a way that if you write down all numbers from the pairs in a single sequence (the sequence would be $a_{i_1}, b_{i_1}, a_{i_2}, b_{i_2}, \\ldots, a_{i_t}, b_{i_t}$), this sequence is good.\nWhat is the largest subset of indices you can choose? You also need to construct the corresponding index sequence $i_1, i_2, \\ldots, i_t$.\n-----Input-----\nThe first line contains single integer $n$ ($2 \\leq n \\leq 3 \\cdot 10^5$)\u00a0\u2014 the number of pairs.\nEach of the next $n$ lines contain two numbers\u00a0\u2014 $a_i$ and $b_i$ ($1 \\le a_i, b_i \\le 2 \\cdot n$)\u00a0\u2014 the elements of the pairs.\nIt is guaranteed that all integers in the pairs are distinct, that is, every integer from $1$ to $2 \\cdot n$ is mentioned exactly once.\n-----Output-----\nIn the first line print a single integer $t$\u00a0\u2014 the number of pairs in the answer.\nThen print $t$ distinct integers $i_1, i_2, \\ldots, i_t$\u00a0\u2014 the indexes of pairs in the corresponding order.\n-----Examples-----\nInput\n5\n1 7\n6 4\n2 10\n9 8\n3 5\nOutput\n3\n1 5 3\nInput\n3\n5 4\n3 2\n6 1\nOutput\n3\n3 2 1\n-----Note-----\nThe final sequence in the first example is $1 < 7 > 3 < 5 > 2 < 10$.\nThe final sequence in the second example is $6 > 1 < 3 > 2 < 5 > 4$.\n\ndef",
        "answer": "def solution(n, pairs):\n    pairs.sort()\n    pairs.reverse()\n    print(pairs)\n    print(pairs[0])\n    print(pairs[1])\n    print(pairs[2])\n    print(pairs[3])\n    print(pairs[4])\n    print(pairs[5])\n    print(pairs[6])\n    print(pairs[7])\n    print(pairs[8])\n    print(pairs[9])\n    print(pairs[10])\n    print(pairs[11])\n    print(pairs[12])\n    print(pairs[13])\n    print(pairs[14])\n    print(pairs[15])\n    print(pairs[16])\n    print(pairs[17])\n    print(pairs[18])\n    print(pairs[19])\n    print(pairs[20])\n    print(pairs[21])\n    print(pairs[22])\n    print(pairs[23])\n    print(pairs[24])\n    print(pairs[25])\n    print(pairs[26])\n    print(pairs[27])\n    print(pairs[28])\n    print(pairs[29])\n    print(pairs[30])\n    print(pairs[31])\n    print(pairs[32])\n    print(pairs[33])\n    print(pairs[34])\n    print(pairs[35])\n    print(pairs[36])\n    print(pairs[37])\n    print(pairs[38])\n    print(pairs[39])\n    print(pairs[40])\n    print(pairs[41])\n    print(pairs[42])\n    print(pairs[43])\n    print(pairs[44])\n    print(pairs[45])\n    print(pairs[46])\n    print(pairs[47])\n    print(pairs[48])\n    print(pairs[49])\n    print(pairs[50])\n    print(pairs[51])\n    print(p",
        "difficulty": "interview"
    },
    {
        "task_id": 2189,
        "prompt": "Complete the Python function given the prompt below:You are given a directed acyclic graph with n vertices and m edges. There are no self-loops or multiple edges between any pair of vertices. Graph can be disconnected.\nYou should assign labels to all vertices in such a way that:\n  Labels form a valid permutation of length n \u2014 an integer sequence such that each integer from 1 to n appears exactly once in it.  If there exists an edge from vertex v to vertex u then label_{v} should be smaller than label_{u}.  Permutation should be lexicographically smallest among all suitable. \nFind such sequence of labels to satisfy all the conditions.\n-----Input-----\nThe first line contains two integer numbers n, m (2 \u2264 n \u2264 10^5, 1 \u2264 m \u2264 10^5).\nNext m lines contain two integer numbers v and u (1 \u2264 v, u \u2264 n, v \u2260 u) \u2014 edges of the graph. Edges are directed, graph doesn't contain loops or multiple edges.\n-----Output-----\nPrint n numbers \u2014 lexicographically smallest correct permutation of labels of vertices.\n-----Examples-----\nInput\n3 3\n1 2\n1 3\n3 2\nOutput\n1 3 2 \nInput\n4 5\n3 1\n4 1\n2 3\n3 4\n2 4\nOutput\n4 1 2 3 \nInput\n5 4\n3 1\n2 1\n2 3\n4 5\nOutput\n3 1 2 4 5\n\ndef",
        "answer": "def solution(n, m, edges):\n    # write your code in Python 2.7\n    graph = defaultdict(list)\n    for u, v in edges:\n        graph[u].append(v)\n        graph[v].append(u)",
        "difficulty": "interview"
    },
    {
        "task_id": 2190,
        "prompt": "Complete the Python function given the prompt below:You are given $n$ positive integers $a_1, \\ldots, a_n$, and an integer $k \\geq 2$. Count the number of pairs $i, j$ such that $1 \\leq i < j \\leq n$, and there exists an integer $x$ such that $a_i \\cdot a_j = x^k$.\n-----Input-----\nThe first line contains two integers $n$ and $k$ ($2 \\leq n \\leq 10^5$, $2 \\leq k \\leq 100$).\nThe second line contains $n$ integers $a_1, \\ldots, a_n$ ($1 \\leq a_i \\leq 10^5$).\n-----Output-----\nPrint a single integer\u00a0\u2014 the number of suitable pairs.\n-----Example-----\nInput\n6 3\n1 3 9 8 24 1\nOutput\n5\n-----Note-----\nIn the sample case, the suitable pairs are: $a_1 \\cdot a_4 = 8 = 2^3$; $a_1 \\cdot a_6 = 1 = 1^3$; $a_2 \\cdot a_3 = 27 = 3^3$; $a_3 \\cdot a_5 = 216 = 6^3$; $a_4 \\cdot a_6 = 8 = 2^3$.\n\ndef",
        "answer": "def solve(n, k, a):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] * a[j] == a[i]**k + a[j]**k:\n                count += 1\n    return count",
        "difficulty": "interview"
    },
    {
        "task_id": 2191,
        "prompt": "Complete the Python function given the prompt below:Alice and Bob play a game. The game consists of several sets, and each set consists of several rounds. Each round is won either by Alice or by Bob, and the set ends when one of the players has won $x$ rounds in a row. For example, if Bob won five rounds in a row and $x = 2$, then two sets ends.\nYou know that Alice and Bob have already played $n$ rounds, and you know the results of some rounds. For each $x$ from $1$ to $n$, calculate the maximum possible number of sets that could have already finished if each set lasts until one of the players wins $x$ rounds in a row. It is possible that the last set is still not finished \u2014 in that case, you should not count it in the answer.\n-----Input-----\nThe first line contains one integer $n$ ($1 \\le n \\le 10^6$)\u00a0\u2014 the number of rounds.\nThe second line contains one string $s$ of length $n$ \u2014 the descriptions of rounds. If the $i$-th element of the string is 0, then Alice won the $i$-th round; if it is 1, then Bob won the $i$-th round, and if it is?, then you don't know who won the $i$-th round.\n-----Output-----\nIn the only line print $n$ integers. The $i$-th integer should be equal to the maximum possible number of sets that could have already finished if each set lasts until one of the players wins $i$ rounds in a row.\n-----Examples-----\nInput\n6\n11?000\nOutput\n6 3 2 1 0 0 \nInput\n5\n01?01\nOutput\n5 1 0 0 0 \nInput\n12\n???1??????1?\nOutput\n12 6 4 3 2 2 1 1 1 1 1 1 \n-----Note-----\nLet's consider the first test case:\n  if $x = 1$ and $s = 110000$ or $s = 111000$ then there are six finished sets;  if $x = 2$ and $s = 110000$ then there are three finished sets;  if $x = 3$ and $s = 111000$ then there are two finished sets;  if $x = 4$ and $s = 110000$ then there is one finished set;  if $x = 5$ then there are no finished sets;  if $x = 6$ then there are no finished sets.\n\ndef",
        "answer": "def max_sets(n, s):\n    # your code here\n    # return the answer",
        "difficulty": "interview"
    },
    {
        "task_id": 2192,
        "prompt": "Complete the Python function given the prompt below:Chubby Yang is studying linear equations right now. He came up with a nice problem. In the problem you are given an n \u00d7 n matrix W, consisting of integers, and you should find two n \u00d7 n matrices A and B, all the following conditions must hold:   A_{ij} = A_{ji}, for all i, j (1 \u2264 i, j \u2264 n);  B_{ij} =  - B_{ji}, for all i, j (1 \u2264 i, j \u2264 n);  W_{ij} = A_{ij} + B_{ij}, for all i, j (1 \u2264 i, j \u2264 n). \nCan you solve the problem?\n-----Input-----\nThe first line contains an integer n (1 \u2264 n \u2264 170). Each of the following n lines contains n integers. The j-th integer in the i-th line is W_{ij} (0 \u2264 |W_{ij}| < 1717).\n-----Output-----\nThe first n lines must contain matrix A. The next n lines must contain matrix B. Print the matrices in the format equal to format of matrix W in input. It is guaranteed that the answer exists. If there are multiple answers, you are allowed to print any of them.\nThe answer will be considered correct if the absolute or relative error doesn't exceed 10^{ - 4}.\n-----Examples-----\nInput\n2\n1 4\n3 2\nOutput\n1.00000000 3.50000000\n3.50000000 2.00000000\n0.00000000 0.50000000\n-0.50000000 0.00000000\nInput\n3\n1 2 3\n4 5 6\n7 8 9\nOutput\n1.00000000 3.00000000 5.00000000\n3.00000000 5.00000000 7.00000000\n5.00000000 7.00000000 9.00000000\n0.00000000 -1.00000000 -2.00000000\n1.00000000 0.00000000 -1.00000000\n2.00000000 1.00000000 0.00000000\n\ndef",
        "answer": "def solve(n):\n    A = []\n    B = []\n    for i in range(n):\n        A.append(list(map(int, input().split())))\n        B.append(list(map(int, input().split())))\n    for i in range(n):\n        for j in range(n):\n            print(A[i][j], B[i][j], sep=' ')",
        "difficulty": "interview"
    },
    {
        "task_id": 2193,
        "prompt": "Complete the Python function given the prompt below:Egor is a famous Russian singer, rapper, actor and blogger, and finally he decided to give a concert in the sunny Republic of Dagestan.\nThere are $n$ cities in the republic, some of them are connected by $m$ directed roads without any additional conditions. In other words, road system of Dagestan represents an arbitrary directed graph. Egor will arrive to the city $1$, travel to the city $n$ by roads along some path, give a concert and fly away.\nAs any famous artist, Egor has lots of haters and too annoying fans, so he can travel only by safe roads. There are two types of the roads in Dagestan, black and white: black roads are safe at night only, and white roads \u2014 in the morning. Before the trip Egor's manager's going to make a schedule: for each city he'll specify it's color, black or white, and then if during the trip they visit some city, the only time they can leave it is determined by the city's color: night, if it's black, and morning, if it's white. After creating the schedule Egor chooses an available path from $1$ to $n$, and for security reasons it has to be the shortest possible.\nEgor's manager likes Dagestan very much and wants to stay here as long as possible, so he asks you to make such schedule that there would be no path from $1$ to $n$ or the shortest path's length would be greatest possible.\nA path is one city or a sequence of roads such that for every road (excluding the first one) the city this road goes from is equal to the city previous road goes into. Egor can move only along paths consisting of safe roads only. \nThe path length is equal to the number of roads in it. The shortest path in a graph is a path with smallest length.\n-----Input-----\nThe first line contains two integers $n$, $m$ ($1 \\leq n \\leq 500000$, $0 \\leq m \\leq 500000$) \u2014 the number of cities and the number of roads.\nThe $i$-th of next $m$ lines contains three integers \u2014 $u_i$, $v_i$ and $t_i$ ($1 \\leq u_i, v_i \\leq n$, $t_i \\in \\{0, 1\\}$) \u2014 numbers of cities connected by road and its type, respectively ($0$ \u2014 night road, $1$ \u2014 morning road).\n-----Output-----\nIn the first line output the length of the desired path (or $-1$, if it's possible to choose such schedule that there's no path from $1$ to $n$).\nIn the second line output the desired schedule \u2014 a string of $n$ digits, where $i$-th digit is $0$, if the $i$-th city is a night one, and $1$ if it's a morning one.\nIf there are multiple answers, print any.\n-----Examples-----\nInput\n3 4\n1 2 0\n1 3 1\n2 3 0\n2 3 1\nOutput\n2\n011\nInput\n4 8\n1 1 0\n1 3 0\n1 3 1\n3 2 0\n2 1 0\n3 4 1\n2 4 0\n2 4 1\nOutput\n3\n1101\nInput\n5 10\n1 2 0\n1 3 1\n1 4 0\n2 3 0\n2 3 1\n2 5 0\n3 4 0\n3 4 1\n4 2 1\n4 5 0\nOutput\n-1\n11111\n-----Note-----\nFor the first sample, if we paint city $1$ white, the shortest path is $1 \\rightarrow 3$. Otherwise, it's $1 \\rightarrow 2 \\rightarrow 3$ regardless of other cities' colors.\nFor the second sample, we should paint city $3$ black, and there are both black and white roads going from $2$ to $4$. Note that there can be a road connecting a city with itself.\n\ndef",
        "answer": "def solution(n, m, roads):\n    # write your code in Python 2.7\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2194,
        "prompt": "Complete the Python function given the prompt below:You are given an array $a$ of length $2^n$. You should process $q$ queries on it. Each query has one of the following $4$ types:   $Replace(x, k)$\u00a0\u2014 change $a_x$ to $k$;  $Reverse(k)$\u00a0\u2014 reverse each subarray $[(i-1) \\cdot 2^k+1, i \\cdot 2^k]$ for all $i$ ($i \\ge 1$);  $Swap(k)$\u00a0\u2014 swap subarrays $[(2i-2) \\cdot 2^k+1, (2i-1) \\cdot 2^k]$ and $[(2i-1) \\cdot 2^k+1, 2i \\cdot 2^k]$ for all $i$ ($i \\ge 1$);  $Sum(l, r)$\u00a0\u2014 print the sum of the elements of subarray $[l, r]$. \nWrite a program that can quickly process given queries.\n-----Input-----\nThe first line contains two integers $n$, $q$ ($0 \\le n \\le 18$; $1 \\le q \\le 10^5$)\u00a0\u2014 the length of array $a$ and the number of queries.\nThe second line contains $2^n$ integers $a_1, a_2, \\ldots, a_{2^n}$ ($0 \\le a_i \\le 10^9$).\nNext $q$ lines contains queries\u00a0\u2014 one per line. Each query has one of $4$ types:   \"$1$ $x$ $k$\" ($1 \\le x \\le 2^n$; $0 \\le k \\le 10^9$)\u00a0\u2014 $Replace(x, k)$;  \"$2$ $k$\" ($0 \\le k \\le n$)\u00a0\u2014 $Reverse(k)$;  \"$3$ $k$\" ($0 \\le k < n$)\u00a0\u2014 $Swap(k)$;  \"$4$ $l$ $r$\" ($1 \\le l \\le r \\le 2^n$)\u00a0\u2014 $Sum(l, r)$. \nIt is guaranteed that there is at least one $Sum$ query.\n-----Output-----\nPrint the answer for each $Sum$ query.\n-----Examples-----\nInput\n2 3\n7 4 9 9\n1 2 8\n3 1\n4 2 4\nOutput\n24\nInput\n3 8\n7 0 8 8 7 1 5 2\n4 3 7\n2 1\n3 2\n4 1 6\n2 3\n1 5 16\n4 8 8\n3 0\nOutput\n29\n22\n1\n-----Note-----\nIn the first sample, initially, the array $a$ is equal to $\\{7,4,9,9\\}$.\nAfter processing the first query. the array $a$ becomes $\\{7,8,9,9\\}$.\nAfter processing the second query, the array $a_i$ becomes $\\{9,9,7,8\\}$\nTherefore, the answer to the third query is $9+7+8=24$.\nIn the second sample, initially, the array $a$ is equal to $\\{7,0,8,8,7,1,5,2\\}$. What happens next is:   $Sum(3, 7)$ $\\to$ $8 + 8 + 7 + 1 + 5 = 29$;  $Reverse(1)$ $\\to$ $\\{0,7,8,8,1,7,2,5\\}$;  $Swap(2)$ $\\to$ $\\{1,7,2,5,0,7,8,8\\}$;  $Sum(1, 6)$ $\\to$ $1 + 7 + 2 + 5 + 0 + 7 = 22$;  $Reverse(3)$ $\\to$ $\\{8,8,7,0,5,2,7,1\\}$;  $Replace(5, 16)$ $\\to$ $\\{8,8,7,0,16,2,7,1\\}$;  $Sum(8, 8)$ $\\to$ $1$;  $Swap(0)$ $\\to$ $\\{8,8,0,7,2,16,1,7\\}$.\n\ndef",
        "answer": "def solve(a, n, q):\n    for i in range(q):\n        query = input().split()\n        if query[0] == '1':\n            a[int(query[1])] = int(query[2])\n        elif query[0] == '2':\n            a[int(query[1])] = a[int(query[1])][::-1]\n        elif query[0] == '3':\n            a[int(query[1])], a[int(query[2])] = a[int(query[2])], a[int(query[1])]\n        elif query[0] == '4':\n            print(sum(a[int(query[1]):int(query[2])+1]))",
        "difficulty": "interview"
    },
    {
        "task_id": 2195,
        "prompt": "Complete the Python function given the prompt below:You are given two integers $x$ and $y$. You can perform two types of operations:   Pay $a$ dollars and increase or decrease any of these integers by $1$. For example, if $x = 0$ and $y = 7$ there are four possible outcomes after this operation:   $x = 0$, $y = 6$;  $x = 0$, $y = 8$;  $x = -1$, $y = 7$;  $x = 1$, $y = 7$. \n  Pay $b$ dollars and increase or decrease both integers by $1$. For example, if $x = 0$ and $y = 7$ there are two possible outcomes after this operation:   $x = -1$, $y = 6$;  $x = 1$, $y = 8$.  \nYour goal is to make both given integers equal zero simultaneously, i.e. $x = y = 0$. There are no other requirements. In particular, it is possible to move from $x=1$, $y=0$ to $x=y=0$.\nCalculate the minimum amount of dollars you have to spend on it.\n-----Input-----\nThe first line contains one integer $t$ ($1 \\le t \\le 100$)\u00a0\u2014 the number of testcases.\nThe first line of each test case contains two integers $x$ and $y$ ($0 \\le x, y \\le 10^9$).\nThe second line of each test case contains two integers $a$ and $b$ ($1 \\le a, b \\le 10^9$).\n-----Output-----\nFor each test case print one integer\u00a0\u2014 the minimum amount of dollars you have to spend.\n-----Example-----\nInput\n2\n1 3\n391 555\n0 0\n9 4\nOutput\n1337\n0\n-----Note-----\nIn the first test case you can perform the following sequence of operations: first, second, first. This way you spend $391 + 555 + 391 = 1337$ dollars.\nIn the second test case both integers are equal to zero initially, so you dont' have to spend money.\n\ndef",
        "answer": "def solve(x, y, a, b):\n    if x == y:\n        return 0\n    if x > y:\n        return x - y\n    if x < y:\n        return y - x",
        "difficulty": "interview"
    },
    {
        "task_id": 2196,
        "prompt": "Complete the Python function given the prompt below:Ivan has got an array of n non-negative integers a_1, a_2,..., a_{n}. Ivan knows that the array is sorted in the non-decreasing order. \nIvan wrote out integers 2^{a}_1, 2^{a}_2,..., 2^{a}_{n} on a piece of paper. Now he wonders, what minimum number of integers of form 2^{b} (b \u2265 0) need to be added to the piece of paper so that the sum of all integers written on the paper equalled 2^{v} - 1 for some integer v (v \u2265 0). \nHelp Ivan, find the required quantity of numbers.\n-----Input-----\nThe first line contains integer n (1 \u2264 n \u2264 10^5). The second input line contains n space-separated integers a_1, a_2,..., a_{n} (0 \u2264 a_{i} \u2264 2\u00b710^9). It is guaranteed that a_1 \u2264 a_2 \u2264... \u2264 a_{n}.\n-----Output-----\nPrint a single integer \u2014 the answer to the problem.\n-----Examples-----\nInput\n4\n0 1 1 1\nOutput\n0\nInput\n1\n3\nOutput\n3\n-----Note-----\nIn the first sample you do not need to add anything, the sum of numbers already equals 2^3 - 1 = 7.\nIn the second sample you need to add numbers 2^0, 2^1, 2^2.\n\ndef",
        "answer": "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = 0\n    for i in range(n):\n        s += 2**a[i]\n    print(s - 1)",
        "difficulty": "interview"
    },
    {
        "task_id": 2197,
        "prompt": "Complete the Python function given the prompt below:Dexterina and Womandark have been arch-rivals since they\u2019ve known each other. Since both are super-intelligent teenage girls, they\u2019ve always been trying to solve their disputes in a peaceful and nonviolent way. After god knows how many different challenges they\u2019ve given to one another, their score is equal and they\u2019re both desperately trying to best the other in various games of wits. This time, Dexterina challenged Womandark to a game of Nim.\nNim is a two-player game in which players take turns removing objects from distinct heaps. On each turn, a player must remove at least one object, and may remove any number of objects from a single heap. The player who can't make a turn loses. By their agreement, the sizes of piles are selected randomly from the range [0, x]. Each pile's size is taken independently from the same probability distribution that is known before the start of the game.\nWomandark is coming up with a brand new and evil idea on how to thwart Dexterina\u2019s plans, so she hasn\u2019t got much spare time. She, however, offered you some tips on looking fabulous in exchange for helping her win in Nim. Your task is to tell her what is the probability that the first player to play wins, given the rules as above.\n-----Input-----\nThe first line of the input contains two integers n (1 \u2264 n \u2264 10^9) and x (1 \u2264 x \u2264 100)\u00a0\u2014 the number of heaps and the maximum number of objects in a heap, respectively. The second line contains x + 1 real numbers, given with up to 6 decimal places each: P(0), P(1),..., P(X). Here, P(i) is the probability of a heap having exactly i objects in start of a game. It's guaranteed that the sum of all P(i) is equal to 1.\n-----Output-----\nOutput a single real number, the probability that the first player wins. The answer will be judged as correct if it differs from the correct answer by at most 10^{ - 6}.\n-----Example-----\nInput\n2 2\n0.500000 0.250000 0.250000\nOutput\n0.62500000\n\ndef",
        "answer": "def nim_game(n, x):\n    # your code here\n    return 0.5",
        "difficulty": "interview"
    },
    {
        "task_id": 2198,
        "prompt": "Complete the Python function given the prompt below:Daniel has a string s, consisting of lowercase English letters and period signs (characters '.'). Let's define the operation of replacement as the following sequence of steps: find a substring \"..\" (two consecutive periods) in string s, of all occurrences of the substring let's choose the first one, and replace this substring with string \".\". In other words, during the replacement operation, the first two consecutive periods are replaced by one. If string s contains no two consecutive periods, then nothing happens.\nLet's define f(s) as the minimum number of operations of replacement to perform, so that the string does not have any two consecutive periods left.\nYou need to process m queries, the i-th results in that the character at position x_{i} (1 \u2264 x_{i} \u2264 n) of string s is assigned value c_{i}. After each operation you have to calculate and output the value of f(s).\nHelp Daniel to process all queries.\n-----Input-----\nThe first line contains two integers n and m (1 \u2264 n, m \u2264 300 000) the length of the string and the number of queries.\nThe second line contains string s, consisting of n lowercase English letters and period signs.\nThe following m lines contain the descriptions of queries. The i-th line contains integer x_{i} and c_{i} (1 \u2264 x_{i} \u2264 n, c_{i} \u2014 a lowercas English letter or a period sign), describing the query of assigning symbol c_{i} to position x_{i}.\n-----Output-----\nPrint m numbers, one per line, the i-th of these numbers must be equal to the value of f(s) after performing the i-th assignment.\n-----Examples-----\nInput\n10 3\n.b..bz....\n1 h\n3 c\n9 f\nOutput\n4\n3\n1\nInput\n4 4\n.cc.\n2.\n3.\n2 a\n1 a\nOutput\n1\n3\n1\n1\n-----Note-----\nNote to the first sample test (replaced periods are enclosed in square brackets).\nThe original string is \".b..bz....\". after the first query f(hb..bz....) = 4\u00a0\u00a0\u00a0\u00a0(\"hb[..]bz....\"  \u2192  \"hb.bz[..]..\"  \u2192  \"hb.bz[..].\"  \u2192  \"hb.bz[..]\"  \u2192  \"hb.bz.\") after the second query f(hb\u0441.bz....) = 3\u00a0\u00a0\u00a0\u00a0(\"hb\u0441.bz[..]..\"  \u2192  \"hb\u0441.bz[..].\"  \u2192  \"hb\u0441.bz[..]\"  \u2192  \"hb\u0441.bz.\") after the third query f(hb\u0441.bz..f.) = 1\u00a0\u00a0\u00a0\u00a0(\"hb\u0441.bz[..]f.\"  \u2192  \"hb\u0441.bz.f.\")\nNote to the second sample test.\nThe original string is \".cc.\". after the first query: f(..c.) = 1\u00a0\u00a0\u00a0\u00a0(\"[..]c.\"  \u2192  \".c.\") after the second query: f(....) = 3\u00a0\u00a0\u00a0\u00a0(\"[..]..\"  \u2192  \"[..].\"  \u2192  \"[..]\"  \u2192  \".\") after the third query: f(.a..) = 1\u00a0\u00a0\u00a0\u00a0(\".a[..]\"  \u2192  \".a.\") after the fourth query: f(aa..) = 1\u00a0\u00a0\u00a0\u00a0(\"aa[..]\"  \u2192  \"aa.\")\n\ndef",
        "answer": "def f(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i] == '.':\n            count += 1\n    return count",
        "difficulty": "interview"
    },
    {
        "task_id": 2199,
        "prompt": "Complete the Python function given the prompt below:You are given a multiset S consisting of positive integers (initially empty). There are two kind of queries:   Add a positive integer to S, the newly added integer is not less than any number in it.  Find a subset s of the set S such that the value $\\operatorname{max}(s) - \\operatorname{mean}(s)$ is maximum possible. Here max(s) means maximum value of elements in s, $\\operatorname{mean}(s)$\u00a0\u2014 the average value of numbers in s. Output this maximum possible value of $\\operatorname{max}(s) - \\operatorname{mean}(s)$. \n-----Input-----\nThe first line contains a single integer Q (1 \u2264 Q \u2264 5\u00b710^5)\u00a0\u2014 the number of queries.\nEach of the next Q lines contains a description of query. For queries of type 1 two integers 1 and x are given, where x (1 \u2264 x \u2264 10^9) is a number that you should add to S. It's guaranteed that x is not less than any number in S. For queries of type 2, a single integer 2 is given.\nIt's guaranteed that the first query has type 1, i.\u00a0e. S is not empty when a query of type 2 comes.\n-----Output-----\nOutput the answer for each query of the second type in the order these queries are given in input. Each number should be printed in separate line.\nYour answer is considered correct, if each of your answers has absolute or relative error not greater than 10^{ - 6}.\nFormally, let your answer be a, and the jury's answer be b. Your answer is considered correct if $\\frac{|a - b|}{\\operatorname{max}(1,|b|)} \\leq 10^{-6}$.\n-----Examples-----\nInput\n6\n1 3\n2\n1 4\n2\n1 8\n2\nOutput\n0.0000000000\n0.5000000000\n3.0000000000\nInput\n4\n1 1\n1 4\n1 5\n2\nOutput\n2.0000000000\n\ndef",
        "answer": "def max_mean(s):\n    return max(s) - sum(s)/len(s)",
        "difficulty": "interview"
    }
]