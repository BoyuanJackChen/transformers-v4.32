[
    {
        "task_id": 3800,
        "prompt": "Complete the Python function given the prompt below:You have a string of decimal digits s. Let's define b_{ij} = s_{i}\u00b7s_{j}. Find in matrix b the number of such rectangles that the sum b_{ij} for all cells (i, j) that are the elements of the rectangle equals a in each rectangle.\nA rectangle in a matrix is a group of four integers (x, y, z, t) (x \u2264 y, z \u2264 t). The elements of the rectangle are all cells (i, j) such that x \u2264 i \u2264 y, z \u2264 j \u2264 t.\n-----Input-----\nThe first line contains integer a (0 \u2264 a \u2264 10^9), the second line contains a string of decimal integers s (1 \u2264 |s| \u2264 4000).\n-----Output-----\nPrint a single integer \u2014 the answer to a problem.\nPlease, do not write the %lld specifier to read or write 64-bit integers in \u0421++. It is preferred to use the cin, cout streams or the %I64d specifier.\n-----Examples-----\nInput\n10\n12345\nOutput\n6\nInput\n16\n439873893693495623498263984765\nOutput\n40\n\ndef",
        "answer": "def count_rectangles(a, s):\n    # Write your code here\n    pass",
        "difficulty": "competition"
    },
    {
        "task_id": 3801,
        "prompt": "Complete the Python function given the prompt below:The only difference between easy and hard versions is constraints.\nNauuo is a girl who loves random picture websites.\nOne day she made a random picture website by herself which includes $n$ pictures.\nWhen Nauuo visits the website, she sees exactly one picture. The website does not display each picture with equal probability. The $i$-th picture has a non-negative weight $w_i$, and the probability of the $i$-th picture being displayed is $\\frac{w_i}{\\sum_{j=1}^nw_j}$. That is to say, the probability of a picture to be displayed is proportional to its weight.\nHowever, Nauuo discovered that some pictures she does not like were displayed too often. \nTo solve this problem, she came up with a great idea: when she saw a picture she likes, she would add $1$ to its weight; otherwise, she would subtract $1$ from its weight.\nNauuo will visit the website $m$ times. She wants to know the expected weight of each picture after all the $m$ visits modulo $998244353$. Can you help her?\nThe expected weight of the $i$-th picture can be denoted by $\\frac {q_i} {p_i}$ where $\\gcd(p_i,q_i)=1$, you need to print an integer $r_i$ satisfying $0\\le r_i<998244353$ and $r_i\\cdot p_i\\equiv q_i\\pmod{998244353}$. It can be proved that such $r_i$ exists and is unique.\n-----Input-----\nThe first line contains two integers $n$ and $m$ ($1\\le n\\le 50$, $1\\le m\\le 50$) \u2014 the number of pictures and the number of visits to the website.\nThe second line contains $n$ integers $a_1,a_2,\\ldots,a_n$ ($a_i$ is either $0$ or $1$) \u2014 if $a_i=0$, Nauuo does not like the $i$-th picture; otherwise Nauuo likes the $i$-th picture. It is guaranteed that there is at least one picture which Nauuo likes.\nThe third line contains $n$ integers $w_1,w_2,\\ldots,w_n$ ($1\\le w_i\\le50$) \u2014 the initial weights of the pictures.\n-----Output-----\nThe output contains $n$ integers $r_1,r_2,\\ldots,r_n$ \u2014 the expected weights modulo $998244353$.\n-----Examples-----\nInput\n2 1\n0 1\n2 1\nOutput\n332748119\n332748119\nInput\n1 2\n1\n1\nOutput\n3\nInput\n3 3\n0 1 1\n4 3 5\nOutput\n160955686\n185138929\n974061117\n-----Note-----\nIn the first example, if the only visit shows the first picture with a probability of $\\frac 2 3$, the final weights are $(1,1)$; if the only visit shows the second picture with a probability of $\\frac1 3$, the final weights are $(2,2)$.\nSo, both expected weights are $\\frac2 3\\cdot 1+\\frac 1 3\\cdot 2=\\frac4 3$.\nBecause $332748119\\cdot 3\\equiv 4\\pmod{998244353}$, you need to print $332748119$ instead of $\\frac4 3$ or $1.3333333333$.\nIn the second example, there is only one picture which Nauuo likes, so every time Nauuo visits the website, $w_1$ will be increased by $1$.\nSo, the expected weight is $1+2=3$.\nNauuo is very naughty so she didn't give you any hint of the third example.\n\ndef",
        "answer": "def gcd(a,b):\n    if b==0:\n        return a\n    else:\n        return gcd(b,a%b)\ndef solve(n,m,a):\n    if n==1:\n        return 0\n    else:\n        if a[0]==0:\n            return solve(n-1,m,a[1:])\n        else:\n            return solve(n-1,m,a[1:])+1\ndef main():\n    n,m=map(int,input().split())\n    a=list(map(int,input().split()))\n    r=solve(n,m,a)\n    print(r)\nmain()\n",
        "difficulty": "competition"
    },
    {
        "task_id": 3802,
        "prompt": "Complete the Python function given the prompt below:In mathematics, a subsequence is a sequence that can be derived from another sequence by deleting some elements without changing the order of the remaining elements. For example, the sequence BDF is a subsequence of ABCDEF. A substring of a string is a continuous subsequence of the string. For example, BCD is a substring of ABCDEF.\nYou are given two strings s_1, s_2 and another string called virus. Your task is to find the longest common subsequence of s_1 and s_2, such that it doesn't contain virus as a substring.\n-----Input-----\nThe input contains three strings in three separate lines: s_1, s_2 and virus (1 \u2264 |s_1|, |s_2|, |virus| \u2264 100). Each string consists only of uppercase English letters.\n-----Output-----\nOutput the longest common subsequence of s_1 and s_2 without virus as a substring. If there are multiple answers, any of them will be accepted. \nIf there is no valid common subsequence, output 0.\n-----Examples-----\nInput\nAJKEQSLOBSROFGZ\nOVGURWZLWVLUXTH\nOZ\nOutput\nORZ\nInput\nAA\nA\nA\nOutput\n0\n\ndef",
        "answer": "def longest_common_subsequence(s1, s2, virus):\n    # Write your code here\n    pass",
        "difficulty": "competition"
    },
    {
        "task_id": 3803,
        "prompt": "Complete the Python function given the prompt below:A monster is attacking the Cyberland!\nMaster Yang, a braver, is going to beat the monster. Yang and the monster each have 3 attributes: hitpoints (HP), offensive power (ATK) and defensive power (DEF).\nDuring the battle, every second the monster's HP decrease by max(0, ATK_{Y} - DEF_{M}), while Yang's HP decreases by max(0, ATK_{M} - DEF_{Y}), where index Y denotes Master Yang and index M denotes monster. Both decreases happen simultaneously Once monster's HP \u2264 0 and the same time Master Yang's HP > 0, Master Yang wins.\nMaster Yang can buy attributes from the magic shop of Cyberland: h bitcoins per HP, a bitcoins per ATK, and d bitcoins per DEF.\nNow Master Yang wants to know the minimum number of bitcoins he can spend in order to win.\n-----Input-----\nThe first line contains three integers HP_{Y}, ATK_{Y}, DEF_{Y}, separated by a space, denoting the initial HP, ATK and DEF of Master Yang.\nThe second line contains three integers HP_{M}, ATK_{M}, DEF_{M}, separated by a space, denoting the HP, ATK and DEF of the monster.\nThe third line contains three integers h, a, d, separated by a space, denoting the price of 1\u00a0HP, 1\u00a0ATK and 1\u00a0DEF.\nAll numbers in input are integer and lie between 1 and 100 inclusively.\n-----Output-----\nThe only output line should contain an integer, denoting the minimum bitcoins Master Yang should spend in order to win.\n-----Examples-----\nInput\n1 2 1\n1 100 1\n1 100 100\nOutput\n99\nInput\n100 100 100\n1 1 1\n1 1 1\nOutput\n0\n-----Note-----\nFor the first sample, prices for ATK and DEF are extremely high. Master Yang can buy 99 HP, then he can beat the monster with 1 HP left.\nFor the second sample, Master Yang is strong enough to beat the monster, so he doesn't need to buy anything.\n\ndef",
        "answer": "def solve(HP_Y, ATK_Y, DEF_Y, HP_M, ATK_M, DEF_M, h, a, d):\n    return 0",
        "difficulty": "competition"
    },
    {
        "task_id": 3804,
        "prompt": "Complete the Python function given the prompt below:Maxim loves to fill in a matrix in a special manner. Here is a pseudocode of filling in a matrix of size (m + 1) \u00d7 (m + 1):\n[Image]\nMaxim asks you to count, how many numbers m (1 \u2264 m \u2264 n) are there, such that the sum of values in the cells in the row number m + 1 of the resulting matrix equals t.\nExpression (x xor y) means applying the operation of bitwise excluding \"OR\" to numbers x and y. The given operation exists in all modern programming languages. For example, in languages C++ and Java it is represented by character \"^\", in Pascal \u2014 by \"xor\".\n-----Input-----\nA single line contains two integers n and t (1 \u2264 n, t \u2264 10^12, t \u2264 n + 1).\nPlease, do not use the %lld specifier to read or write 64-bit integers in C++. It is preferred to use the cin, cout streams or the %I64d specifier.\n-----Output-----\nIn a single line print a single integer \u2014 the answer to the problem. \n-----Examples-----\nInput\n1 1\nOutput\n1\nInput\n3 2\nOutput\n1\nInput\n3 3\nOutput\n0\nInput\n1000000000000 1048576\nOutput\n118606527258\n\ndef",
        "answer": "def maxim(n, t):\n    return sum(x ^ y for x in range(1, n + 1) for y in range(1, n + 1)) == t",
        "difficulty": "competition"
    },
    {
        "task_id": 3805,
        "prompt": "Complete the Python function given the prompt below:Mad scientist Mike has just finished constructing a new device to search for extraterrestrial intelligence! He was in such a hurry to launch it for the first time that he plugged in the power wires without giving it a proper glance and started experimenting right away. After a while Mike observed that the wires ended up entangled and now have to be untangled again.\nThe device is powered by two wires \"plus\" and \"minus\". The wires run along the floor from the wall (on the left) to the device (on the right). Both the wall and the device have two contacts in them on the same level, into which the wires are plugged in some order. The wires are considered entangled if there are one or more places where one wire runs above the other one. For example, the picture below has four such places (top view): [Image] \nMike knows the sequence in which the wires run above each other. Mike also noticed that on the left side, the \"plus\" wire is always plugged into the top contact (as seen on the picture). He would like to untangle the wires without unplugging them and without moving the device. Determine if it is possible to do that. A wire can be freely moved and stretched on the floor, but cannot be cut.\nTo understand the problem better please read the notes to the test samples.\n-----Input-----\nThe single line of the input contains a sequence of characters \"+\" and \"-\" of length n (1 \u2264 n \u2264 100000). The i-th (1 \u2264 i \u2264 n) position of the sequence contains the character \"+\", if on the i-th step from the wall the \"plus\" wire runs above the \"minus\" wire, and the character \"-\" otherwise.\n-----Output-----\nPrint either \"Yes\" (without the quotes) if the wires can be untangled or \"No\" (without the quotes) if the wires cannot be untangled.\n-----Examples-----\nInput\n-++-\nOutput\nYes\nInput\n+-\nOutput\nNo\nInput\n++\nOutput\nYes\nInput\n-\nOutput\nNo\n-----Note-----\nThe first testcase corresponds to the picture in the statement. To untangle the wires, one can first move the \"plus\" wire lower, thus eliminating the two crosses in the middle, and then draw it under the \"minus\" wire, eliminating also the remaining two crosses.\nIn the second testcase the \"plus\" wire makes one full revolution around the \"minus\" wire. Thus the wires cannot be untangled:  [Image] \nIn the third testcase the \"plus\" wire simply runs above the \"minus\" wire twice in sequence. The wires can be untangled by lifting \"plus\" and moving it higher:  [Image] \nIn the fourth testcase the \"minus\" wire runs above the \"plus\" wire once. The wires cannot be untangled without moving the device itself:  [Image]\n\ndef",
        "answer": "def solution(s):\n    return \"Yes\" if \"++\" in s else \"No\"",
        "difficulty": "competition"
    },
    {
        "task_id": 3806,
        "prompt": "Complete the Python function given the prompt below:Peter got a new snow blower as a New Year present. Of course, Peter decided to try it immediately. After reading the instructions he realized that it does not work like regular snow blowing machines. In order to make it work, you need to tie it to some point that it does not cover, and then switch it on. As a result it will go along a circle around this point and will remove all the snow from its path.\nFormally, we assume that Peter's machine is a polygon on a plane. Then, after the machine is switched on, it will make a circle around the point to which Peter tied it (this point lies strictly outside the polygon). That is, each of the points lying within or on the border of the polygon will move along the circular trajectory, with the center of the circle at the point to which Peter tied his machine.\nPeter decided to tie his car to point P and now he is wondering what is the area of \u200b\u200bthe region that will be cleared from snow. Help him.\n-----Input-----\nThe first line of the input contains three integers\u00a0\u2014 the number of vertices of the polygon n ($3 \\leq n \\leq 100000$), and coordinates of point P.\nEach of the next n lines contains two integers\u00a0\u2014 coordinates of the vertices of the polygon in the clockwise or counterclockwise order. It is guaranteed that no three consecutive vertices lie on a common straight line.\nAll the numbers in the input are integers that do not exceed 1 000 000 in their absolute value.\n-----Output-----\nPrint a single real value number\u00a0\u2014 the area of the region that will be cleared. Your answer will be considered correct if its absolute or relative error does not exceed 10^{ - 6}. \nNamely: let's assume that your answer is a, and the answer of the jury is b. The checker program will consider your answer correct, if $\\frac{|a - b|}{\\operatorname{max}(1, b)} \\leq 10^{-6}$.\n-----Examples-----\nInput\n3 0 0\n0 1\n-1 2\n1 2\nOutput\n12.566370614359172464\nInput\n4 1 -1\n0 0\n1 2\n2 0\n1 1\nOutput\n21.991148575128551812\n-----Note-----\nIn the first sample snow will be removed from that area:\n $0$\n\ndef",
        "answer": "def area(n, p):\n    if n == 1:\n        return 1\n    else:\n        return area(n-1, p) + area(n-1, p+1)",
        "difficulty": "competition"
    },
    {
        "task_id": 3807,
        "prompt": "Complete the Python function given the prompt below:Limak is a little polar bear. He plays by building towers from blocks. Every block is a cube with positive integer length of side. Limak has infinitely many blocks of each side length.\nA block with side a has volume a^3. A tower consisting of blocks with sides a_1, a_2,..., a_{k} has the total volume a_1^3 + a_2^3 +... + a_{k}^3.\nLimak is going to build a tower. First, he asks you to tell him a positive integer X\u00a0\u2014 the required total volume of the tower. Then, Limak adds new blocks greedily, one by one. Each time he adds the biggest block such that the total volume doesn't exceed X.\nLimak asks you to choose X not greater than m. Also, he wants to maximize the number of blocks in the tower at the end (however, he still behaves greedily). Secondarily, he wants to maximize X.\nCan you help Limak? Find the maximum number of blocks his tower can have and the maximum X \u2264 m that results this number of blocks.\n-----Input-----\nThe only line of the input contains one integer m (1 \u2264 m \u2264 10^15), meaning that Limak wants you to choose X between 1 and m, inclusive.\n-----Output-----\nPrint two integers\u00a0\u2014 the maximum number of blocks in the tower and the maximum required total volume X, resulting in the maximum number of blocks.\n-----Examples-----\nInput\n48\nOutput\n9 42\nInput\n6\nOutput\n6 6\n-----Note-----\nIn the first sample test, there will be 9 blocks if you choose X = 23 or X = 42. Limak wants to maximize X secondarily so you should choose 42.\nIn more detail, after choosing X = 42 the process of building a tower is:  Limak takes a block with side 3 because it's the biggest block with volume not greater than 42. The remaining volume is 42 - 27 = 15.  The second added block has side 2, so the remaining volume is 15 - 8 = 7.  Finally, Limak adds 7 blocks with side 1, one by one. \nSo, there are 9 blocks in the tower. The total volume is is 3^3 + 2^3 + 7\u00b71^3 = 27 + 8 + 7 = 42.\n\ndef",
        "answer": "def solve():\n    m = int(input())\n    if m < 1 or m > 10**15:\n        return\n    print(m, m**3)\nsolve()\n",
        "difficulty": "competition"
    },
    {
        "task_id": 3808,
        "prompt": "Complete the Python function given the prompt below:Petya's friends made him a birthday present \u2014 a bracket sequence. Petya was quite disappointed with his gift, because he dreamed of correct bracket sequence, yet he told his friends nothing about his dreams and decided to fix present himself. \nTo make everything right, Petya is going to move at most one bracket from its original place in the sequence to any other position. Reversing the bracket (e.g. turning \"(\" into \")\" or vice versa) isn't allowed. \nWe remind that bracket sequence $s$ is called correct if:   $s$ is empty;  $s$ is equal to \"($t$)\", where $t$ is correct bracket sequence;  $s$ is equal to $t_1 t_2$, i.e. concatenation of $t_1$ and $t_2$, where $t_1$ and $t_2$ are correct bracket sequences. \nFor example, \"(()())\", \"()\" are correct, while \")(\" and \"())\" are not. Help Petya to fix his birthday present and understand whether he can move one bracket so that the sequence becomes correct.\n-----Input-----\nFirst of line of input contains a single number $n$ ($1 \\leq n \\leq 200\\,000$)\u00a0\u2014 length of the sequence which Petya received for his birthday.\nSecond line of the input contains bracket sequence of length $n$, containing symbols \"(\" and \")\".\n-----Output-----\nPrint \"Yes\" if Petya can make his sequence correct moving at most one bracket. Otherwise print \"No\".\n-----Examples-----\nInput\n2\n)(\nOutput\nYes\nInput\n3\n(()\nOutput\nNo\nInput\n2\n()\nOutput\nYes\nInput\n10\n)))))(((((\nOutput\nNo\n-----Note-----\nIn the first example, Petya can move first bracket to the end, thus turning the sequence into \"()\", which is correct bracket sequence.\nIn the second example, there is no way to move at most one bracket so that the sequence becomes correct.\nIn the third example, the sequence is already correct and there's no need to move brackets.\n\ndef",
        "answer": "def correct_bracket_sequence(s):\n    # your code here\n    return",
        "difficulty": "competition"
    },
    {
        "task_id": 3809,
        "prompt": "Complete the Python function given the prompt below:One day Greg and his friends were walking in the forest. Overall there were n people walking, including Greg. Soon he found himself in front of a river. The guys immediately decided to get across the river. Luckily, there was a boat by the river bank, just where the guys were standing. We know that the boat can hold people with the total weight of at most k kilograms.\nGreg immediately took a piece of paper and listed there the weights of all people in his group (including himself). It turned out that each person weights either 50 or 100 kilograms. Now Greg wants to know what minimum number of times the boat needs to cross the river to transport the whole group to the other bank. The boat needs at least one person to navigate it from one bank to the other. As the boat crosses the river, it can have any non-zero number of passengers as long as their total weight doesn't exceed k.\nAlso Greg is wondering, how many ways there are to transport everybody to the other side in the minimum number of boat rides. Two ways are considered distinct if during some ride they have distinct sets of people on the boat.\nHelp Greg with this problem.\n \n-----Input-----\nThe first line contains two integers n, k (1 \u2264 n \u2264 50, 1 \u2264 k \u2264 5000) \u2014 the number of people, including Greg, and the boat's weight limit. The next line contains n integers \u2014 the people's weights. A person's weight is either 50 kilos or 100 kilos.\nYou can consider Greg and his friends indexed in some way.\n-----Output-----\nIn the first line print an integer \u2014 the minimum number of rides. If transporting everyone to the other bank is impossible, print an integer -1.\nIn the second line print the remainder after dividing the number of ways to transport the people in the minimum number of rides by number 1000000007 (10^9 + 7). If transporting everyone to the other bank is impossible, print integer 0.\n-----Examples-----\nInput\n1 50\n50\nOutput\n1\n1\nInput\n3 100\n50 50 100\nOutput\n5\n2\nInput\n2 50\n50 50\nOutput\n-1\n0\n-----Note-----\nIn the first test Greg walks alone and consequently, he needs only one ride across the river.\nIn the second test you should follow the plan:\n  transport two 50 kg. people;  transport one 50 kg. person back;  transport one 100 kg. person;  transport one 50 kg. person back;  transport two 50 kg. people. \nThat totals to 5 rides. Depending on which person to choose at step 2, we can get two distinct ways.\n\ndef",
        "answer": "def count_rides(n, k):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if k == 0:\n        return 0\n    if k < 50:\n        return -1\n    return count_rides(n-1, k) + count_rides(n-2, k-50)",
        "difficulty": "competition"
    },
    {
        "task_id": 3810,
        "prompt": "Complete the Python function given the prompt below:SIHanatsuka - EMber SIHanatsuka - ATONEMENT\nBack in time, the seven-year-old Nora used to play lots of games with her creation ROBO_Head-02, both to have fun and enhance his abilities.\nOne day, Nora's adoptive father, Phoenix Wyle, brought Nora $n$ boxes of toys. Before unpacking, Nora decided to make a fun game for ROBO.\nShe labelled all $n$ boxes with $n$ distinct integers $a_1, a_2, \\ldots, a_n$ and asked ROBO to do the following action several (possibly zero) times:\n  Pick three distinct indices $i$, $j$ and $k$, such that $a_i \\mid a_j$ and $a_i \\mid a_k$. In other words, $a_i$ divides both $a_j$ and $a_k$, that is $a_j \\bmod a_i = 0$, $a_k \\bmod a_i = 0$.  After choosing, Nora will give the $k$-th box to ROBO, and he will place it on top of the box pile at his side. Initially, the pile is empty.  After doing so, the box $k$ becomes unavailable for any further actions. \nBeing amused after nine different tries of the game, Nora asked ROBO to calculate the number of possible different piles having the largest amount of boxes in them. Two piles are considered different if there exists a position where those two piles have different boxes.\nSince ROBO was still in his infant stages, and Nora was still too young to concentrate for a long time, both fell asleep before finding the final answer. Can you help them?\nAs the number of such piles can be very large, you should print the answer modulo $10^9 + 7$.\n-----Input-----\nThe first line contains an integer $n$ ($3 \\le n \\le 60$), denoting the number of boxes.\nThe second line contains $n$ distinct integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 60$), where $a_i$ is the label of the $i$-th box.\n-----Output-----\nPrint the number of distinct piles having the maximum number of boxes that ROBO_Head can have, modulo $10^9 + 7$.\n-----Examples-----\nInput\n3\n2 6 8\nOutput\n2\nInput\n5\n2 3 4 9 12\nOutput\n4\nInput\n4\n5 7 2 9\nOutput\n1\n-----Note-----\nLet's illustrate the box pile as a sequence $b$, with the pile's bottommost box being at the leftmost position.\nIn the first example, there are $2$ distinct piles possible:   $b = [6]$ ($[2, \\mathbf{6}, 8] \\xrightarrow{(1, 3, 2)} [2, 8]$)  $b = [8]$ ($[2, 6, \\mathbf{8}] \\xrightarrow{(1, 2, 3)} [2, 6]$) \nIn the second example, there are $4$ distinct piles possible:   $b = [9, 12]$ ($[2, 3, 4, \\mathbf{9}, 12] \\xrightarrow{(2, 5, 4)} [2, 3, 4, \\mathbf{12}] \\xrightarrow{(1, 3, 4)} [2, 3, 4]$)  $b = [4, 12]$ ($[2, 3, \\mathbf{4}, 9, 12] \\xrightarrow{(1, 5, 3)} [2, 3, 9, \\mathbf{12}] \\xrightarrow{(2, 3, 4)} [2, 3, 9]$)  $b = [4, 9]$ ($[2, 3, \\mathbf{4}, 9, 12] \\xrightarrow{(1, 5, 3)} [2, 3, \\mathbf{9}, 12] \\xrightarrow{(2, 4, 3)} [2, 3, 12]$)  $b = [9, 4]$ ($[2, 3, 4, \\mathbf{9}, 12] \\xrightarrow{(2, 5, 4)} [2, 3, \\mathbf{4}, 12] \\xrightarrow{(1, 4, 3)} [2, 3, 12]$) \nIn the third sequence, ROBO can do nothing at all. Therefore, there is only $1$ valid pile, and that pile is empty.\n\ndef",
        "answer": "def solve(n):\n    return n*(n-1)*(n-2)*(n-3)//24",
        "difficulty": "competition"
    },
    {
        "task_id": 3811,
        "prompt": "Complete the Python function given the prompt below:During the research on properties of the greatest common divisor (GCD) of a set of numbers, Ildar, a famous mathematician, introduced a brand new concept of the weakened common divisor (WCD) of a list of pairs of integers.\nFor a given list of pairs of integers $(a_1, b_1)$, $(a_2, b_2)$,..., $(a_n, b_n)$ their WCD is arbitrary integer greater than $1$, such that it divides at least one element in each pair. WCD may not exist for some lists.\nFor example, if the list looks like $[(12, 15), (25, 18), (10, 24)]$, then their WCD can be equal to $2$, $3$, $5$ or $6$ (each of these numbers is strictly greater than $1$ and divides at least one number in each pair).\nYou're currently pursuing your PhD degree under Ildar's mentorship, and that's why this problem was delegated to you. Your task is to calculate WCD efficiently.\n-----Input-----\nThe first line contains a single integer $n$ ($1 \\le n \\le 150\\,000$)\u00a0\u2014 the number of pairs.\nEach of the next $n$ lines contains two integer values $a_i$, $b_i$ ($2 \\le a_i, b_i \\le 2 \\cdot 10^9$).\n-----Output-----\nPrint a single integer\u00a0\u2014 the WCD of the set of pairs. \nIf there are multiple possible answers, output any; if there is no answer, print $-1$.\n-----Examples-----\nInput\n3\n17 18\n15 24\n12 15\nOutput\n6\nInput\n2\n10 16\n7 17\nOutput\n-1\nInput\n5\n90 108\n45 105\n75 40\n165 175\n33 30\nOutput\n5\n-----Note-----\nIn the first example the answer is $6$ since it divides $18$ from the first pair, $24$ from the second and $12$ from the third ones. Note that other valid answers will also be accepted.\nIn the second example there are no integers greater than $1$ satisfying the conditions.\nIn the third example one of the possible answers is $5$. Note that, for example, $15$ is also allowed, but it's not necessary to maximize the output.\n\ndef",
        "answer": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a",
        "difficulty": "competition"
    },
    {
        "task_id": 3812,
        "prompt": "Complete the Python function given the prompt below:There are two strings s and t, consisting only of letters a and b. You can make the following operation several times: choose a prefix of s, a prefix of t and swap them. Prefixes can be empty, also a prefix can coincide with a whole string. \nYour task is to find a sequence of operations after which one of the strings consists only of a letters and the other consists only of b letters. The number of operations should be minimized.\n-----Input-----\nThe first line contains a string s (1 \u2264 |s| \u2264 2\u00b710^5).\nThe second line contains a string t (1 \u2264 |t| \u2264 2\u00b710^5).\nHere |s| and |t| denote the lengths of s and t, respectively. It is guaranteed that at least one of the strings contains at least one a letter and at least one of the strings contains at least one b letter.\n-----Output-----\nThe first line should contain a single integer n (0 \u2264 n \u2264 5\u00b710^5)\u00a0\u2014 the number of operations.\nEach of the next n lines should contain two space-separated integers a_{i}, b_{i}\u00a0\u2014 the lengths of prefixes of s and t to swap, respectively.\nIf there are multiple possible solutions, you can print any of them. It's guaranteed that a solution with given constraints exists.\n-----Examples-----\nInput\nbab\nbb\nOutput\n2\n1 0\n1 3\nInput\nbbbb\naaa\nOutput\n0\n-----Note-----\nIn the first example, you can solve the problem in two operations:  Swap the prefix of the first string with length 1 and the prefix of the second string with length 0. After this swap, you'll have strings ab and bbb.  Swap the prefix of the first string with length 1 and the prefix of the second string with length 3. After this swap, you'll have strings bbbb and a. \nIn the second example, the strings are already appropriate, so no operations are needed.\n\ndef",
        "answer": "def solution(s, t):\n    # your code here\n    return 0\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')",
        "difficulty": "competition"
    },
    {
        "task_id": 3813,
        "prompt": "Complete the Python function given the prompt below:We have a tree with N vertices. Vertex 1 is the root of the tree, and the parent of Vertex i (2 \\leq i \\leq N) is Vertex P_i.\nTo each vertex in the tree, Snuke will allocate a color, either black or white, and a non-negative integer weight.\nSnuke has a favorite integer sequence, X_1, X_2,..., X_N, so he wants to allocate colors and weights so that the following condition is satisfied for all v.\n - The total weight of the vertices with the same color as v among the vertices contained in the subtree whose root is v, is X_v.\nHere, the subtree whose root is v is the tree consisting of Vertex v and all of its descendants.\nDetermine whether it is possible to allocate colors and weights in this way.\n-----Constraints-----\n - 1 \\leq N \\leq 1 000\n - 1 \\leq P_i \\leq i - 1\n - 0 \\leq X_i \\leq 5 000\n-----Inputs-----\nInput is given from Standard Input in the following format:\nN\nP_2 P_3... P_N\nX_1 X_2... X_N\n-----Outputs-----\nIf it is possible to allocate colors and weights to the vertices so that the condition is satisfied, print POSSIBLE; otherwise, print IMPOSSIBLE.\n-----Sample Input-----\n3\n1 1\n4 3 2\n-----Sample Output-----\nPOSSIBLE\nFor example, the following allocation satisfies the condition:\n - Set the color of Vertex 1 to white and its weight to 2.\n - Set the color of Vertex 2 to black and its weight to 3.\n - Set the color of Vertex 3 to white and its weight to 2.\nThere are also other possible allocations.\n\ndef",
        "answer": "def solution(N, P, X):\n    # Write your code here\n    if N == 1:\n        return \"POSSIBLE\"\n    if N == 2:\n        if P[0] == P[1]:\n            return \"POSSIBLE\"\n        else:\n            return \"IMPOSSIBLE\"\n    if N == 3:\n        if P[0] == P[1] == P[2]:\n            return \"POSSIBLE\"\n        else:\n            return \"IMPOSSIBLE\"\n    if N == 4:\n        if P[0] == P[1] == P[2] == P[3]:\n            return \"POSSIBLE\"\n        else:\n            return \"IMPOSSIBLE\"\n    if N == 5:\n        if P[0] == P[1] == P[2] == P[3] == P[4]:\n            return \"POSSIBLE\"\n        else:\n            return \"IMPOSSIBLE\"\n    if N == 6:\n        if P[0] == P[1] == P[2] == P[3] == P[4] == P[5]:\n            return \"POSSIBLE\"\n        else:\n            return \"IMPOSSIBLE\"\n    if N == 7:\n        if P[0] == P[1] == P[2] == P[3] == P[4] == P[5] == P[6]:\n            return \"POSSIBLE\"\n        else:\n            return \"IMPOSSIBLE\"\n    if N == 8:\n        if P[0] == P[1] == P[2] == P[3] == P[4] == P[5] == P[6] == P[7]:\n            return \"POSSIBLE\"\n        else:\n            return \"IMPOSSIBLE\"\n    if N == 9:\n        if P[0] == P[1] == P[2] == P[3] == P[4] == P[5] == P[6] == P[7] == P[8]:\n            return \"POSSIBLE\"\n        else:\n            return \"IMPOSSIBLE\"\n    if N == 10:\n        if",
        "difficulty": "competition"
    },
    {
        "task_id": 3814,
        "prompt": "Complete the Python function given the prompt below:In \"Takahashi-ya\", a ramen restaurant, basically they have one menu: \"ramen\", but N kinds of toppings are also offered. When a customer orders a bowl of ramen, for each kind of topping, he/she can choose whether to put it on top of his/her ramen or not. There is no limit on the number of toppings, and it is allowed to have all kinds of toppings or no topping at all. That is, considering the combination of the toppings, 2^N types of ramen can be ordered.\nAkaki entered Takahashi-ya. She is thinking of ordering some bowls of ramen that satisfy both of the following two conditions:\n - Do not order multiple bowls of ramen with the exactly same set of toppings.\n - Each of the N kinds of toppings is on two or more bowls of ramen ordered.\nYou are given N and a prime number M. Find the number of the sets of bowls of ramen that satisfy these conditions, disregarding order, modulo M. Since she is in extreme hunger, ordering any number of bowls of ramen is fine.\n-----Constraints-----\n - 2 \\leq N \\leq 3000\n - 10^8 \\leq M \\leq 10^9 + 9\n - N is an integer.\n - M is a prime number.\n-----Subscores-----\n - 600 points will be awarded for passing the test set satisfying N \u2264 50.\n-----Input-----\nInput is given from Standard Input in the following format:\nN M\n-----Output-----\nPrint the number of the sets of bowls of ramen that satisfy the conditions, disregarding order, modulo M.\n-----Sample Input-----\n2 1000000007\n-----Sample Output-----\n2\nLet the two kinds of toppings be A and B. Four types of ramen can be ordered: \"no toppings\", \"with A\", \"with B\" and \"with A, B\". There are two sets of ramen that satisfy the conditions:\n - The following three ramen: \"with A\", \"with B\", \"with A, B\".\n - Four ramen, one for each type.\n\ndef",
        "answer": "def solve(N, M):\n    return 0",
        "difficulty": "competition"
    },
    {
        "task_id": 3815,
        "prompt": "Complete the Python function given the prompt below:You are given two integers $a$ and $b$. Moreover, you are given a sequence $s_0, s_1, \\dots, s_{n}$. All values in $s$ are integers $1$ or $-1$. It's known that sequence is $k$-periodic and $k$ divides $n+1$. In other words, for each $k \\leq i \\leq n$ it's satisfied that $s_{i} = s_{i - k}$.\nFind out the non-negative remainder of division of $\\sum \\limits_{i=0}^{n} s_{i} a^{n - i} b^{i}$ by $10^{9} + 9$.\nNote that the modulo is unusual!\n-----Input-----\nThe first line contains four integers $n, a, b$ and $k$ $(1 \\leq n \\leq 10^{9}, 1 \\leq a, b \\leq 10^{9}, 1 \\leq k \\leq 10^{5})$.\nThe second line contains a sequence of length $k$ consisting of characters '+' and '-'. \nIf the $i$-th character (0-indexed) is '+', then $s_{i} = 1$, otherwise $s_{i} = -1$.\nNote that only the first $k$ members of the sequence are given, the rest can be obtained using the periodicity property.\n-----Output-----\nOutput a single integer\u00a0\u2014 value of given expression modulo $10^{9} + 9$.\n-----Examples-----\nInput\n2 2 3 3\n+-+\nOutput\n7\nInput\n4 1 5 1\n-\nOutput\n999999228\n-----Note-----\nIn the first example:\n$(\\sum \\limits_{i=0}^{n} s_{i} a^{n - i} b^{i})$ = $2^{2} 3^{0} - 2^{1} 3^{1} + 2^{0} 3^{2}$ = 7\nIn the second example:\n$(\\sum \\limits_{i=0}^{n} s_{i} a^{n - i} b^{i}) = -1^{4} 5^{0} - 1^{3} 5^{1} - 1^{2} 5^{2} - 1^{1} 5^{3} - 1^{0} 5^{4} = -781 \\equiv 999999228 \\pmod{10^{9} + 9}$.\n\ndef",
        "answer": "def solve(a, b, s):\n    return sum(s[i] * a**(n - i) * b**i for i in range(k)) % (10**9 + 9)",
        "difficulty": "competition"
    },
    {
        "task_id": 3816,
        "prompt": "Complete the Python function given the prompt below:You are given three sticks with positive integer lengths of a, b, and c centimeters. You can increase length of some of them by some positive integer number of centimeters (different sticks can be increased by a different length), but in total by at most l centimeters. In particular, it is allowed not to increase the length of any stick.\nDetermine the number of ways to increase the lengths of some sticks so that you can form from them a non-degenerate (that is, having a positive area) triangle. Two ways are considered different, if the length of some stick is increased by different number of centimeters in them.\n-----Input-----\nThe single line contains 4 integers a, b, c, l (1 \u2264 a, b, c \u2264 3\u00b710^5, 0 \u2264 l \u2264 3\u00b710^5).\n-----Output-----\nPrint a single integer \u2014 the number of ways to increase the sizes of the sticks by the total of at most l centimeters, so that you can make a non-degenerate triangle from it.\n-----Examples-----\nInput\n1 1 1 2\nOutput\n4\nInput\n1 2 3 1\nOutput\n2\nInput\n10 2 1 7\nOutput\n0\n-----Note-----\nIn the first sample test you can either not increase any stick or increase any two sticks by 1 centimeter.\nIn the second sample test you can increase either the first or the second stick by one centimeter. Note that the triangle made from the initial sticks is degenerate and thus, doesn't meet the conditions.\n\ndef",
        "answer": "def solution(a, b, c, l):\n    return 0",
        "difficulty": "competition"
    },
    {
        "task_id": 3817,
        "prompt": "Complete the Python function given the prompt below:A sequence of non-negative integers a_1, a_2,..., a_{n} of length n is called a wool sequence if and only if there exists two integers l and r (1 \u2264 l \u2264 r \u2264 n) such that $a_{l} \\oplus a_{l + 1} \\oplus \\cdots \\oplus a_{r} = 0$. In other words each wool sequence contains a subsequence of consecutive elements with xor equal to 0.\nThe expression $x \\oplus y$ means applying the operation of a bitwise xor to numbers x and y. The given operation exists in all modern programming languages, for example, in languages C++ and Java it is marked as \"^\", in Pascal \u2014 as \"xor\".\nIn this problem you are asked to compute the number of sequences made of n integers from 0 to 2^{m} - 1 that are not a wool sequence. You should print this number modulo 1000000009 (10^9 + 9).\n-----Input-----\nThe only line of input contains two space-separated integers n and m (1 \u2264 n, m \u2264 10^5).\n-----Output-----\nPrint the required number of sequences modulo 1000000009 (10^9 + 9) on the only line of output.\n-----Examples-----\nInput\n3 2\nOutput\n6\n-----Note-----\nSequences of length 3 made of integers 0, 1, 2 and 3 that are not a wool sequence are (1, 3, 1), (1, 2, 1), (2, 1, 2), (2, 3, 2), (3, 1, 3) and (3, 2, 3).\n\ndef",
        "answer": "def solve(n, m):\n    return (2**m - 1) % (10**9 + 9)",
        "difficulty": "competition"
    },
    {
        "task_id": 3818,
        "prompt": "Complete the Python function given the prompt below:Given is a tree with N vertices numbered 1 to N, and N-1 edges numbered 1 to N-1.\nEdge i connects Vertex a_i and b_i bidirectionally and has a length of 1.\nSnuke will paint each vertex white or black.\nThe niceness of a way of painting the graph is \\max(X, Y), where X is the maximum among the distances between white vertices, and Y is the maximum among the distances between black vertices.\nHere, if there is no vertex of one color, we consider the maximum among the distances between vertices of that color to be 0.\nThere are 2^N ways of painting the graph. Compute the sum of the nicenesses of all those ways, modulo (10^{9}+7).\n-----Constraints-----\n - 2 \\leq N \\leq 2 \\times 10^{5}\n - 1 \\leq a_i, b_i \\leq N\n - The given graph is a tree.\n-----Input-----\nInput is given from Standard Input in the following format:\nN\na_1 b_1\n\\vdots\na_{N-1} b_{N-1}\n-----Output-----\nPrint the sum of the nicenesses of the ways of painting the graph, modulo (10^{9}+7).\n-----Sample Input-----\n2\n1 2\n-----Sample Output-----\n2\n - If we paint Vertex 1 and 2 the same color, the niceness will be 1; if we paint them different colors, the niceness will be 0.\n - The sum of those nicenesses is 2.\n\ndef",
        "answer": "def solution(N, edges):\n    # Write your code here\n    pass",
        "difficulty": "competition"
    },
    {
        "task_id": 3819,
        "prompt": "Complete the Python function given the prompt below:Nauuo is a girl who loves playing cards.\nOne day she was playing cards but found that the cards were mixed with some empty ones.\nThere are $n$ cards numbered from $1$ to $n$, and they were mixed with another $n$ empty cards. She piled up the $2n$ cards and drew $n$ of them. The $n$ cards in Nauuo's hands are given. The remaining $n$ cards in the pile are also given in the order from top to bottom.\nIn one operation she can choose a card in her hands and play it \u2014 put it at the bottom of the pile, then draw the top card from the pile.\nNauuo wants to make the $n$ numbered cards piled up in increasing order (the $i$-th card in the pile from top to bottom is the card $i$) as quickly as possible. Can you tell her the minimum number of operations?\n-----Input-----\nThe first line contains a single integer $n$ ($1\\le n\\le 2\\cdot 10^5$) \u2014 the number of numbered cards.\nThe second line contains $n$ integers $a_1,a_2,\\ldots,a_n$ ($0\\le a_i\\le n$) \u2014 the initial cards in Nauuo's hands. $0$ represents an empty card.\nThe third line contains $n$ integers $b_1,b_2,\\ldots,b_n$ ($0\\le b_i\\le n$) \u2014 the initial cards in the pile, given in order from top to bottom. $0$ represents an empty card.\nIt is guaranteed that each number from $1$ to $n$ appears exactly once, either in $a_{1..n}$ or $b_{1..n}$.\n-----Output-----\nThe output contains a single integer \u2014 the minimum number of operations to make the $n$ numbered cards piled up in increasing order.\n-----Examples-----\nInput\n3\n0 2 0\n3 0 1\nOutput\n2\nInput\n3\n0 2 0\n1 0 3\nOutput\n4\nInput\n11\n0 0 0 5 0 0 0 4 0 0 11\n9 2 6 0 8 1 7 0 3 0 10\nOutput\n18\n-----Note-----\nExample 1\nWe can play the card $2$ and draw the card $3$ in the first operation. After that, we have $[0,3,0]$ in hands and the cards in the pile are $[0,1,2]$ from top to bottom.\nThen, we play the card $3$ in the second operation. The cards in the pile are $[1,2,3]$, in which the cards are piled up in increasing order.\nExample 2\nPlay an empty card and draw the card $1$, then play $1$, $2$, $3$ in order.\n\ndef",
        "answer": "def nauuo(n, a, b):\n    a = sorted(a)\n    b = sorted(b)\n    return sum(a[i] - b[i] for i in range(n))",
        "difficulty": "competition"
    },
    {
        "task_id": 3820,
        "prompt": "Complete the Python function given the prompt below:You are given two strings $s$ and $t$. The string $s$ consists of lowercase Latin letters and at most one wildcard character '*', the string $t$ consists only of lowercase Latin letters. The length of the string $s$ equals $n$, the length of the string $t$ equals $m$.\nThe wildcard character '*' in the string $s$ (if any) can be replaced with an arbitrary sequence (possibly empty) of lowercase Latin letters. No other character of $s$ can be replaced with anything. If it is possible to replace a wildcard character '*' in $s$ to obtain a string $t$, then the string $t$ matches the pattern $s$.\nFor example, if $s=$\"aba*aba\" then the following strings match it \"abaaba\", \"abacaba\" and \"abazzzaba\", but the following strings do not match: \"ababa\", \"abcaaba\", \"codeforces\", \"aba1aba\", \"aba?aba\".\nIf the given string $t$ matches the given string $s$, print \"YES\", otherwise print \"NO\".\n-----Input-----\nThe first line contains two integers $n$ and $m$ ($1 \\le n, m \\le 2 \\cdot 10^5$) \u2014 the length of the string $s$ and the length of the string $t$, respectively.\nThe second line contains string $s$ of length $n$, which consists of lowercase Latin letters and at most one wildcard character '*'.\nThe third line contains string $t$ of length $m$, which consists only of lowercase Latin letters.\n-----Output-----\nPrint \"YES\" (without quotes), if you can obtain the string $t$ from the string $s$. Otherwise print \"NO\" (without quotes).\n-----Examples-----\nInput\n6 10\ncode*s\ncodeforces\nOutput\nYES\nInput\n6 5\nvk*cup\nvkcup\nOutput\nYES\nInput\n1 1\nv\nk\nOutput\nNO\nInput\n9 6\ngfgf*gfgf\ngfgfgf\nOutput\nNO\n-----Note-----\nIn the first example a wildcard character '*' can be replaced with a string \"force\". So the string $s$ after this replacement is \"codeforces\" and the answer is \"YES\".\nIn the second example a wildcard character '*' can be replaced with an empty string. So the string $s$ after this replacement is \"vkcup\" and the answer is \"YES\".\nThere is no wildcard character '*' in the third example and the strings \"v\" and \"k\" are different so the answer is \"NO\".\nIn the fourth example there is no such replacement of a wildcard character '*' that you can obtain the string $t$ so the answer is \"NO\".\n\ndef",
        "answer": "def match(s, t):\n    if len(s)!= len(t):\n        return False\n    for i in range(len(s)):\n        if s[i]!= '*' and s[i]!= t[i]:\n            return False\n    return True",
        "difficulty": "competition"
    },
    {
        "task_id": 3821,
        "prompt": "Complete the Python function given the prompt below:Andrey needs one more problem to conduct a programming contest. He has n friends who are always willing to help. He can ask some of them to come up with a contest problem. Andrey knows one value for each of his fiends \u2014 the probability that this friend will come up with a problem if Andrey asks him.\nHelp Andrey choose people to ask. As he needs only one problem, Andrey is going to be really upset if no one comes up with a problem or if he gets more than one problem from his friends. You need to choose such a set of people that maximizes the chances of Andrey not getting upset.\n-----Input-----\nThe first line contains a single integer n (1 \u2264 n \u2264 100) \u2014 the number of Andrey's friends. The second line contains n real numbers p_{i} (0.0 \u2264 p_{i} \u2264 1.0) \u2014 the probability that the i-th friend can come up with a problem. The probabilities are given with at most 6 digits after decimal point.\n-----Output-----\nPrint a single real number \u2014 the probability that Andrey won't get upset at the optimal choice of friends. The answer will be considered valid if it differs from the correct one by at most 10^{ - 9}.\n-----Examples-----\nInput\n4\n0.1 0.2 0.3 0.8\nOutput\n0.800000000000\nInput\n2\n0.1 0.2\nOutput\n0.260000000000\n-----Note-----\nIn the first sample the best strategy for Andrey is to ask only one of his friends, the most reliable one.\nIn the second sample the best strategy for Andrey is to ask all of his friends to come up with a problem. Then the probability that he will get exactly one problem is 0.1\u00b70.8 + 0.9\u00b70.2 = 0.26.\n\ndef",
        "answer": "def solve(n, p):\n    p = sorted(p)\n    return sum(p[:n])",
        "difficulty": "competition"
    },
    {
        "task_id": 3822,
        "prompt": "Complete the Python function given the prompt below:On vacations n pupils decided to go on excursion and gather all together. They need to overcome the path with the length l meters. Each of the pupils will go with the speed equal to v_1. To get to the excursion quickly, it was decided to rent a bus, which has seats for k people (it means that it can't fit more than k people at the same time) and the speed equal to v_2. In order to avoid seasick, each of the pupils want to get into the bus no more than once.\nDetermine the minimum time required for all n pupils to reach the place of excursion. Consider that the embarkation and disembarkation of passengers, as well as the reversal of the bus, take place immediately and this time can be neglected. \n-----Input-----\nThe first line of the input contains five positive integers n, l, v_1, v_2 and k (1 \u2264 n \u2264 10 000, 1 \u2264 l \u2264 10^9, 1 \u2264 v_1 < v_2 \u2264 10^9, 1 \u2264 k \u2264 n)\u00a0\u2014 the number of pupils, the distance from meeting to the place of excursion, the speed of each pupil, the speed of bus and the number of seats in the bus. \n-----Output-----\nPrint the real number\u00a0\u2014 the minimum time in which all pupils can reach the place of excursion. Your answer will be considered correct if its absolute or relative error won't exceed 10^{ - 6}.\n-----Examples-----\nInput\n5 10 1 2 5\nOutput\n5.0000000000\nInput\n3 6 1 2 1\nOutput\n4.7142857143\n-----Note-----\nIn the first sample we should immediately put all five pupils to the bus. The speed of the bus equals 2 and the distance is equal to 10, so the pupils will reach the place of excursion in time 10 / 2 = 5.\n\ndef",
        "answer": "def solution(n, l, v_1, v_2, k):\n    return l / (v_1 + v_2)",
        "difficulty": "competition"
    },
    {
        "task_id": 3823,
        "prompt": "Complete the Python function given the prompt below:Jeff got 2n real numbers a_1, a_2,..., a_2n as a birthday present. The boy hates non-integer numbers, so he decided to slightly \"adjust\" the numbers he's got. Namely, Jeff consecutively executes n operations, each of them goes as follows:  choose indexes i and j (i \u2260 j) that haven't been chosen yet;  round element a_{i} to the nearest integer that isn't more than a_{i} (assign to a_{i}: \u230a a_{i}\u00a0\u230b);  round element a_{j} to the nearest integer that isn't less than a_{j} (assign to a_{j}: \u2308 a_{j}\u00a0\u2309). \nNevertheless, Jeff doesn't want to hurt the feelings of the person who gave him the sequence. That's why the boy wants to perform the operations so as to make the absolute value of the difference between the sum of elements before performing the operations and the sum of elements after performing the operations as small as possible. Help Jeff find the minimum absolute value of the difference.\n-----Input-----\nThe first line contains integer n (1 \u2264 n \u2264 2000). The next line contains 2n real numbers a_1, a_2,..., a_2n (0 \u2264 a_{i} \u2264 10000), given with exactly three digits after the decimal point. The numbers are separated by spaces.\n-----Output-----\nIn a single line print a single real number \u2014 the required difference with exactly three digits after the decimal point.\n-----Examples-----\nInput\n3\n0.000 0.500 0.750 1.000 2.000 3.000\nOutput\n0.250\nInput\n3\n4469.000 6526.000 4864.000 9356.383 7490.000 995.896\nOutput\n0.279\n-----Note-----\nIn the first test case you need to perform the operations as follows: (i = 1, j = 4), (i = 2, j = 3), (i = 5, j = 6). In this case, the difference will equal |(0 + 0.5 + 0.75 + 1 + 2 + 3) - (0 + 0 + 1 + 1 + 2 + 3)| = 0.25.\n\ndef",
        "answer": "def solution(a):\n    return abs(sum(a) - sum(int(x) for x in a))",
        "difficulty": "competition"
    },
    {
        "task_id": 3824,
        "prompt": "Complete the Python function given the prompt below:Polycarp takes part in a quadcopter competition. According to the rules a flying robot should:\n  start the race from some point of a field,  go around the flag,  close cycle returning back to the starting point. \nPolycarp knows the coordinates of the starting point (x_1, y_1) and the coordinates of the point where the flag is situated (x_2, y_2). Polycarp\u2019s quadcopter can fly only parallel to the sides of the field each tick changing exactly one coordinate by 1. It means that in one tick the quadcopter can fly from the point (x, y) to any of four points: (x - 1, y), (x + 1, y), (x, y - 1) or (x, y + 1).\nThus the quadcopter path is a closed cycle starting and finishing in (x_1, y_1) and containing the point (x_2, y_2) strictly inside.\n [Image] The picture corresponds to the first example: the starting (and finishing) point is in (1, 5) and the flag is in (5, 2). \nWhat is the minimal length of the quadcopter path?\n-----Input-----\nThe first line contains two integer numbers x_1 and y_1 ( - 100 \u2264 x_1, y_1 \u2264 100) \u2014 coordinates of the quadcopter starting (and finishing) point.\nThe second line contains two integer numbers x_2 and y_2 ( - 100 \u2264 x_2, y_2 \u2264 100) \u2014 coordinates of the flag.\nIt is guaranteed that the quadcopter starting point and the flag do not coincide.\n-----Output-----\nPrint the length of minimal path of the quadcopter to surround the flag and return back.\n-----Examples-----\nInput\n1 5\n5 2\nOutput\n18\nInput\n0 1\n0 0\nOutput\n8\n\ndef",
        "answer": "def solution(x_1, y_1, x_2, y_2):\n    return abs(x_1 - x_2) + abs(y_1 - y_2)",
        "difficulty": "competition"
    },
    {
        "task_id": 3825,
        "prompt": "Complete the Python function given the prompt below:Let's introduce a number system which is based on a roman digits. There are digits I, V, X, L which correspond to the numbers $1$, $5$, $10$ and $50$ respectively. The use of other roman digits is not allowed.\nNumbers in this system are written as a sequence of one or more digits. We define the value of the sequence simply as the sum of digits in it.\nFor example, the number XXXV evaluates to $35$ and the number IXI\u00a0\u2014 to $12$.\nPay attention to the difference to the traditional roman system\u00a0\u2014 in our system any sequence of digits is valid, moreover the order of digits doesn't matter, for example IX means $11$, not $9$.\nOne can notice that this system is ambiguous, and some numbers can be written in many different ways. Your goal is to determine how many distinct integers can be represented by exactly $n$ roman digits I, V, X, L.\n-----Input-----\nThe only line of the input file contains a single integer $n$ ($1 \\le n \\le 10^9$)\u00a0\u2014 the number of roman digits to use.\n-----Output-----\nOutput a single integer\u00a0\u2014 the number of distinct integers which can be represented using $n$ roman digits exactly.\n-----Examples-----\nInput\n1\nOutput\n4\nInput\n2\nOutput\n10\nInput\n10\nOutput\n244\n-----Note-----\nIn the first sample there are exactly $4$ integers which can be represented\u00a0\u2014 I, V, X and L.\nIn the second sample it is possible to represent integers $2$ (II), $6$ (VI), $10$ (VV), $11$ (XI), $15$ (XV), $20$ (XX), $51$ (IL), $55$ (VL), $60$ (XL) and $100$ (LL).\n\ndef",
        "answer": "def roman_numbers(n):\n    # your code here\n    return",
        "difficulty": "competition"
    },
    {
        "task_id": 3826,
        "prompt": "Complete the Python function given the prompt below:You are given an array $a_{1}, a_{2}, \\ldots, a_{n}$. You can remove at most one subsegment from it. The remaining elements should be pairwise distinct.\nIn other words, at most one time you can choose two integers $l$ and $r$ ($1 \\leq l \\leq r \\leq n$) and delete integers $a_l, a_{l+1}, \\ldots, a_r$ from the array. Remaining elements should be pairwise distinct. \nFind the minimum size of the subsegment you need to remove to make all remaining elements distinct.\n-----Input-----\nThe first line of the input contains a single integer $n$ ($1 \\le n \\le 2000$)\u00a0\u2014 the number of elements in the given array.\nThe next line contains $n$ spaced integers $a_{1}, a_{2}, \\ldots, a_{n}$ ($1 \\le a_{i} \\le 10^{9}$)\u00a0\u2014 the elements of the array. \n-----Output-----\nPrint a single integer\u00a0\u2014 the minimum size of the subsegment you need to remove to make all elements of the array pairwise distinct. If no subsegment needs to be removed, print $0$.\n-----Examples-----\nInput\n3\n1 2 3\nOutput\n0\nInput\n4\n1 1 2 2\nOutput\n2\nInput\n5\n1 4 1 4 9\nOutput\n2\n-----Note-----\nIn the first example all the elements are already distinct, therefore no subsegment needs to be removed.\nIn the second example you can remove the subsegment from index $2$ to $3$.\nIn the third example you can remove the subsegments from index $1$ to $2$, or from index $2$ to $3$, or from index $3$ to $4$.\n\ndef",
        "answer": "def solution(a):\n    # your code here\n    return 0",
        "difficulty": "competition"
    },
    {
        "task_id": 3827,
        "prompt": "Complete the Python function given the prompt below:A has a string consisting of some number of lowercase English letters 'a'. He gives it to his friend B who appends some number of letters 'b' to the end of this string. Since both A and B like the characters 'a' and 'b', they have made sure that at this point, at least one 'a' and one 'b' exist in the string.\nB now gives this string to C and he appends some number of letters 'c' to the end of the string. However, since C is a good friend of A and B, the number of letters 'c' he appends is equal to the number of 'a' or to the number of 'b' in the string. It is also possible that the number of letters 'c' equals both to the number of letters 'a' and to the number of letters 'b' at the same time.\nYou have a string in your hands, and you want to check if it is possible to obtain the string in this way or not. If it is possible to obtain the string, print \"YES\", otherwise print \"NO\" (without the quotes).\n-----Input-----\nThe first and only line consists of a string $S$ ($ 1 \\le |S| \\le 5\\,000 $). It is guaranteed that the string will only consist of the lowercase English letters 'a', 'b', 'c'.\n-----Output-----\nPrint \"YES\" or \"NO\", according to the condition.\n-----Examples-----\nInput\naaabccc\nOutput\nYES\nInput\nbbacc\nOutput\nNO\nInput\naabc\nOutput\nYES\n-----Note-----\nConsider first example: the number of 'c' is equal to the number of 'a'. \nConsider second example: although the number of 'c' is equal to the number of the 'b', the order is not correct.\nConsider third example: the number of 'c' is equal to the number of 'b'.\n\ndef",
        "answer": "def solve(s):\n    if len(s) == 0:\n        return \"YES\"\n    if len(s) == 1:\n        return \"NO\"\n    if len(s) == 2:\n        if s[0] == s[1]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if len(s) == 3:\n        if s[0] == s[1] and s[1] == s[2]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if len(s) == 4:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if len(s) == 5:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if len(s) == 6:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if len(s) == 7:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if len(s) == 8:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6] and s[6] == s[7]:\n            return \"",
        "difficulty": "competition"
    },
    {
        "task_id": 3828,
        "prompt": "Complete the Python function given the prompt below:An infinitely long railway has a train consisting of n cars, numbered from 1 to n (the numbers of all the cars are distinct) and positioned in arbitrary order. David Blaine wants to sort the railway cars in the order of increasing numbers. In one move he can make one of the cars disappear from its place and teleport it either to the beginning of the train, or to the end of the train, at his desire. What is the minimum number of actions David Blaine needs to perform in order to sort the train?\n-----Input-----\nThe first line of the input contains integer n (1 \u2264 n \u2264 100 000)\u00a0\u2014 the number of cars in the train. \nThe second line contains n integers p_{i} (1 \u2264 p_{i} \u2264 n, p_{i} \u2260 p_{j} if i \u2260 j)\u00a0\u2014 the sequence of the numbers of the cars in the train.\n-----Output-----\nPrint a single integer\u00a0\u2014 the minimum number of actions needed to sort the railway cars.\n-----Examples-----\nInput\n5\n4 1 2 5 3\nOutput\n2\nInput\n4\n4 1 3 2\nOutput\n2\n-----Note-----\nIn the first sample you need first to teleport the 4-th car, and then the 5-th car to the end of the train.\n\ndef",
        "answer": "def solution(n, p):\n    # write your code in Python 2.7\n    return 0",
        "difficulty": "competition"
    },
    {
        "task_id": 3829,
        "prompt": "Complete the Python function given the prompt below:Twilight Sparkle was playing Ludo with her friends Rainbow Dash, Apple Jack and Flutter Shy. But she kept losing. Having returned to the castle, Twilight Sparkle became interested in the dice that were used in the game.\nThe dice has m faces: the first face of the dice contains a dot, the second one contains two dots, and so on, the m-th face contains m dots. Twilight Sparkle is sure that when the dice is tossed, each face appears with probability $\\frac{1}{m}$. Also she knows that each toss is independent from others. Help her to calculate the expected maximum number of dots she could get after tossing the dice n times.\n-----Input-----\nA single line contains two integers m and n (1 \u2264 m, n \u2264 10^5).\n-----Output-----\nOutput a single real number corresponding to the expected maximum. The answer will be considered correct if its relative or absolute error doesn't exceed 10 ^{ - 4}.\n-----Examples-----\nInput\n6 1\nOutput\n3.500000000000\nInput\n6 3\nOutput\n4.958333333333\nInput\n2 2\nOutput\n1.750000000000\n-----Note-----\nConsider the third test example. If you've made two tosses:  You can get 1 in the first toss, and 2 in the second. Maximum equals to 2.  You can get 1 in the first toss, and 1 in the second. Maximum equals to 1.  You can get 2 in the first toss, and 1 in the second. Maximum equals to 2.  You can get 2 in the first toss, and 2 in the second. Maximum equals to 2. \nThe probability of each outcome is 0.25, that is expectation equals to: $(2 + 1 + 2 + 2) \\cdot 0.25 = \\frac{7}{4}$\nYou can read about expectation using the following link: http://en.wikipedia.org/wiki/Expected_value\n\ndef",
        "answer": "def solve(m, n):\n    return (m + 1) * n / 2",
        "difficulty": "competition"
    },
    {
        "task_id": 3830,
        "prompt": "Complete the Python function given the prompt below:In the snake exhibition, there are $n$ rooms (numbered $0$ to $n - 1$) arranged in a circle, with a snake in each room. The rooms are connected by $n$ conveyor belts, and the $i$-th conveyor belt connects the rooms $i$ and $(i+1) \\bmod n$. In the other words, rooms $0$ and $1$, $1$ and $2$, $\\ldots$, $n-2$ and $n-1$, $n-1$ and $0$ are connected with conveyor belts.\nThe $i$-th conveyor belt is in one of three states:  If it is clockwise, snakes can only go from room $i$ to $(i+1) \\bmod n$.  If it is anticlockwise, snakes can only go from room $(i+1) \\bmod n$ to $i$.  If it is off, snakes can travel in either direction.  [Image] \nAbove is an example with $4$ rooms, where belts $0$ and $3$ are off, $1$ is clockwise, and $2$ is anticlockwise.\nEach snake wants to leave its room and come back to it later. A room is returnable if the snake there can leave the room, and later come back to it using the conveyor belts. How many such returnable rooms are there?\n-----Input-----\nEach test contains multiple test cases. The first line contains a single integer $t$ ($1 \\le t \\le 1000$): the number of test cases. The description of the test cases follows. \n The first line of each test case description contains a single integer $n$ ($2 \\le n \\le 300\\,000$): the number of rooms.\n The next line of each test case description contains a string $s$ of length $n$, consisting of only '<', '>' and '-'.  If $s_{i} = $ '>', the $i$-th conveyor belt goes clockwise.  If $s_{i} = $ '<', the $i$-th conveyor belt goes anticlockwise.  If $s_{i} = $ '-', the $i$-th conveyor belt is off. \nIt is guaranteed that the sum of $n$ among all test cases does not exceed $300\\,000$.\n-----Output-----\nFor each test case, output the number of returnable rooms.\n-----Example-----\nInput\n4\n4\n-><-\n5\n>>>>>\n3\n<--\n2\n<>\nOutput\n3\n5\n3\n0\n-----Note-----\nIn the first test case, all rooms are returnable except room $2$. The snake in the room $2$ is trapped and cannot exit. This test case corresponds to the picture from the problem statement.\n In the second test case, all rooms are returnable by traveling on the series of clockwise belts.\n\ndef",
        "answer": "def solution(n, s):\n    # Your code here\n    return",
        "difficulty": "competition"
    },
    {
        "task_id": 3831,
        "prompt": "Complete the Python function given the prompt below:Mayor of city S just hates trees and lawns. They take so much space and there could be a road on the place they occupy!\nThe Mayor thinks that one of the main city streets could be considerably widened on account of lawn nobody needs anyway. Moreover, that might help reduce the car jams which happen from time to time on the street.\nThe street is split into n equal length parts from left to right, the i-th part is characterized by two integers: width of road s_{i} and width of lawn g_{i}. [Image] \nFor each of n parts the Mayor should decide the size of lawn to demolish. For the i-th part he can reduce lawn width by integer x_{i} (0 \u2264 x_{i} \u2264 g_{i}). After it new road width of the i-th part will be equal to s'_{i} = s_{i} + x_{i} and new lawn width will be equal to g'_{i} = g_{i} - x_{i}.\nOn the one hand, the Mayor wants to demolish as much lawn as possible (and replace it with road). On the other hand, he does not want to create a rapid widening or narrowing of the road, which would lead to car accidents. To avoid that, the Mayor decided that width of the road for consecutive parts should differ by at most 1, i.e. for each i (1 \u2264 i < n) the inequation |s'_{i} + 1 - s'_{i}| \u2264 1 should hold. Initially this condition might not be true.\nYou need to find the the total width of lawns the Mayor will destroy according to his plan.\n-----Input-----\nThe first line contains integer n (1 \u2264 n \u2264 2\u00b710^5) \u2014 number of parts of the street.\nEach of the following n lines contains two integers s_{i}, g_{i} (1 \u2264 s_{i} \u2264 10^6, 0 \u2264 g_{i} \u2264 10^6) \u2014 current width of road and width of the lawn on the i-th part of the street.\n-----Output-----\nIn the first line print the total width of lawns which will be removed.\nIn the second line print n integers s'_1, s'_2,..., s'_{n} (s_{i} \u2264 s'_{i} \u2264 s_{i} + g_{i}) \u2014 new widths of the road starting from the first part and to the last.\nIf there is no solution, print the only integer -1 in the first line.\n-----Examples-----\nInput\n3\n4 5\n4 5\n4 10\nOutput\n16\n9 9 10 \nInput\n4\n1 100\n100 1\n1 100\n100 1\nOutput\n202\n101 101 101 101 \nInput\n3\n1 1\n100 100\n1 1\nOutput\n-1\n\ndef",
        "answer": "def mayor_of_city(n, s, g):\n    if n == 1:\n        return s[0]\n    s_ = [0] * n\n    g_ = [0] * n\n    s_[0] = s[0]\n    g_[0] = g[0]\n    for i in range(1, n):\n        s_[i] = s_[i - 1] + g_[i - 1]\n        g_[i] = g_[i - 1] - s_[i - 1]\n    s_[n - 1] = s_[n - 2] + g_[n - 2]\n    g_[n - 1] = g_[n - 2] - s_[n - 2]\n    for i in range(n):\n        if abs(s_[i] - s[i]) > 1:\n            return -1\n    return sum(s_)",
        "difficulty": "competition"
    },
    {
        "task_id": 3832,
        "prompt": "Complete the Python function given the prompt below:Welcome to Innopolis city. Throughout the whole year, Innopolis citizens suffer from everlasting city construction. \nFrom the window in your room, you see the sequence of n hills, where i-th of them has height a_{i}. The Innopolis administration wants to build some houses on the hills. However, for the sake of city appearance, a house can be only built on the hill, which is strictly higher than neighbouring hills (if they are present). For example, if the sequence of heights is 5, 4, 6, 2, then houses could be built on hills with heights 5 and 6 only.\nThe Innopolis administration has an excavator, that can decrease the height of an arbitrary hill by one in one hour. The excavator can only work on one hill at a time. It is allowed to decrease hills up to zero height, or even to negative values. Increasing height of any hill is impossible. The city administration wants to build k houses, so there must be at least k hills that satisfy the condition above. What is the minimum time required to adjust the hills to achieve the administration's plan?\nHowever, the exact value of k is not yet determined, so could you please calculate answers for all k in range $1 \\leq k \\leq \\lceil \\frac{n}{2} \\rceil$? Here $\\lceil \\frac{n}{2} \\rceil$ denotes n divided by two, rounded up.\n-----Input-----\nThe first line of input contains the only integer n (1 \u2264 n \u2264 5000)\u2014the number of the hills in the sequence.\nSecond line contains n integers a_{i} (1 \u2264 a_{i} \u2264 100 000)\u2014the heights of the hills in the sequence.\n-----Output-----\nPrint exactly $\\lceil \\frac{n}{2} \\rceil$ numbers separated by spaces. The i-th printed number should be equal to the minimum number of hours required to level hills so it becomes possible to build i houses.\n-----Examples-----\nInput\n5\n1 1 1 1 1\nOutput\n1 2 2 \nInput\n3\n1 2 3\nOutput\n0 2 \nInput\n5\n1 2 3 2 2\nOutput\n0 1 3 \n-----Note-----\nIn the first example, to get at least one hill suitable for construction, one can decrease the second hill by one in one hour, then the sequence of heights becomes 1, 0, 1, 1, 1 and the first hill becomes suitable for construction.\nIn the first example, to get at least two or at least three suitable hills, one can decrease the second and the fourth hills, then the sequence of heights becomes 1, 0, 1, 0, 1, and hills 1, 3, 5 become suitable for construction.\n\ndef",
        "answer": "def solve(n, a):\n    if n == 1:\n        return 0\n    if n == 2:\n        return min(a)\n    if n == 3:\n        return min(a[0], a[1])\n    if n == 4:\n        return min(a[0], a[1], a[2])\n    if n == 5:\n        return min(a[0], a[1], a[2], a[3])\n    if n == 6:\n        return min(a[0], a[1], a[2], a[3], a[4])\n    if n == 7:\n        return min(a[0], a[1], a[2], a[3], a[4], a[5])\n    if n == 8:\n        return min(a[0], a[1], a[2], a[3], a[4], a[5], a[6])\n    if n == 9:\n        return min(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7])\n    if n == 10:\n        return min(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8])\n    if n == 11:\n        return min(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9])\n    if n == 12:\n        return min(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10])\n    if n == 13:\n        return min(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11])\n    if n == 14:\n        return min(a[0], a[1], a[2], a[3], a",
        "difficulty": "competition"
    },
    {
        "task_id": 3833,
        "prompt": "Complete the Python function given the prompt below:The new camp by widely-known over the country Spring Programming Camp is going to start soon. Hence, all the team of friendly curators and teachers started composing the camp's schedule. After some continuous discussion, they came up with a schedule $s$, which can be represented as a binary string, in which the $i$-th symbol is '1' if students will write the contest in the $i$-th day and '0' if they will have a day off.\nAt the last moment Gleb said that the camp will be the most productive if it runs with the schedule $t$ (which can be described in the same format as schedule $s$). Since the number of days in the current may be different from number of days in schedule $t$, Gleb required that the camp's schedule must be altered so that the number of occurrences of $t$ in it as a substring is maximum possible. At the same time, the number of contest days and days off shouldn't change, only their order may change.\nCould you rearrange the schedule in the best possible way?\n-----Input-----\nThe first line contains string $s$ ($1 \\leqslant |s| \\leqslant 500\\,000$), denoting the current project of the camp's schedule.\nThe second line contains string $t$ ($1 \\leqslant |t| \\leqslant 500\\,000$), denoting the optimal schedule according to Gleb.\nStrings $s$ and $t$ contain characters '0' and '1' only.\n-----Output-----\nIn the only line print the schedule having the largest number of substrings equal to $t$. Printed schedule should consist of characters '0' and '1' only and the number of zeros should be equal to the number of zeros in $s$ and the number of ones should be equal to the number of ones in $s$.\nIn case there multiple optimal schedules, print any of them.\n-----Examples-----\nInput\n101101\n110\nOutput\n110110\nInput\n10010110\n100011\nOutput\n01100011\nInput\n10\n11100\nOutput\n01\n-----Note-----\nIn the first example there are two occurrences, one starting from first position and one starting from fourth position.\nIn the second example there is only one occurrence, which starts from third position. Note, that the answer is not unique. For example, if we move the first day (which is a day off) to the last position, the number of occurrences of $t$ wouldn't change.\nIn the third example it's impossible to make even a single occurrence.\n\ndef",
        "answer": "def solution(s, t):\n    # your code here\n    return",
        "difficulty": "competition"
    },
    {
        "task_id": 3834,
        "prompt": "Complete the Python function given the prompt below:Sereja has an n \u00d7 m rectangular table a, each cell of the table contains a zero or a number one. Sereja wants his table to meet the following requirement: each connected component of the same values forms a rectangle with sides parallel to the sides of the table. Rectangles should be filled with cells, that is, if a component form a rectangle of size h \u00d7 w, then the component must contain exactly hw cells.\nA connected component of the same values is a set of cells of the table that meet the following conditions:  every two cells of the set have the same value;  the cells of the set form a connected region on the table (two cells are connected if they are adjacent in some row or some column of the table);  it is impossible to add any cell to the set unless we violate the two previous conditions. \nCan Sereja change the values of at most k cells of the table so that the table met the described requirement? What minimum number of table cells should he change in this case?\n-----Input-----\nThe first line contains integers n, m and k (1 \u2264 n, m \u2264 100;\u00a01 \u2264 k \u2264 10). Next n lines describe the table a: the i-th of them contains m integers a_{i}1, a_{i}2,..., a_{im} (0 \u2264 a_{i}, j \u2264 1) \u2014 the values in the cells of the i-th row.\n-----Output-----\nPrint -1, if it is impossible to meet the requirement. Otherwise, print the minimum number of cells which should be changed.\n-----Examples-----\nInput\n5 5 2\n1 1 1 1 1\n1 1 1 1 1\n1 1 0 1 1\n1 1 1 1 1\n1 1 1 1 1\nOutput\n1\nInput\n3 4 1\n1 0 0 0\n0 1 1 1\n1 1 1 0\nOutput\n-1\nInput\n3 4 1\n1 0 0 1\n0 1 1 0\n1 0 0 1\nOutput\n0\n\ndef",
        "answer": "def solution(a):\n    n, m, k = map(int, a.split())\n    a = [list(map(int, a.split())) for a in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 1:\n                a[i][j] = 0\n            else:\n                a[i][j] = 1\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 1:\n                if i == 0 or j == 0 or i == n-1 or j == m-1:\n                    a[i][j] = 0\n                else:\n                    a[i][j] = 1\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 1:\n                if i == 0 or j == 0 or i == n-1 or j == m-1:\n                    a[i][j] = 0\n                else:\n                    a[i][j] = 1\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 1:\n                if i == 0 or j == 0 or i == n-1 or j == m-1:\n                    a[i][j] = 0\n                else:\n                    a[i][j] = 1\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 1:\n                if i == 0 or j == 0 or i == n-1 or j == m-1:\n                    a[i][j] = 0\n                else:\n                    a[i][j] = 1\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 1:\n                if i == 0 or j == 0 or i == n-1 or j == m-1:\n                    a[i][j] = 0\n                else:\n                    a[i][j] = 1\n    for i in range(n):\n        for j in range(m):",
        "difficulty": "competition"
    },
    {
        "task_id": 3835,
        "prompt": "Complete the Python function given the prompt below:Sasha grew up and went to first grade. To celebrate this event her mother bought her a multiplication table $M$ with $n$ rows and $n$ columns such that $M_{ij}=a_i \\cdot a_j$ where $a_1, \\dots, a_n$ is some sequence of positive integers.\nOf course, the girl decided to take it to school with her. But while she was having lunch, hooligan Grisha erased numbers on the main diagonal and threw away the array $a_1, \\dots, a_n$. Help Sasha restore the array!\n-----Input-----\nThe first line contains a single integer $n$ ($3 \\leqslant n \\leqslant 10^3$), the size of the table. \nThe next $n$ lines contain $n$ integers each. The $j$-th number of the $i$-th line contains the number $M_{ij}$ ($1 \\leq M_{ij} \\leq 10^9$). The table has zeroes on the main diagonal, that is, $M_{ii}=0$.\n-----Output-----\nIn a single line print $n$ integers, the original array $a_1, \\dots, a_n$ ($1 \\leq a_i \\leq 10^9$). It is guaranteed that an answer exists. If there are multiple answers, print any.\n-----Examples-----\nInput\n5\n0 4 6 2 4\n4 0 6 2 4\n6 6 0 3 6\n2 2 3 0 2\n4 4 6 2 0\nOutput\n2 2 3 1 2 \nInput\n3\n0 99990000 99970002\n99990000 0 99980000\n99970002 99980000 0\nOutput\n9999 10000 9998\n\ndef",
        "answer": "def restoreArray(n, a):\n    # Write your code here\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                a[i] = 0\n            else:\n                a[i] = a[i] * a[j]\n    return a",
        "difficulty": "competition"
    },
    {
        "task_id": 3836,
        "prompt": "Complete the Python function given the prompt below:Elections in Berland are coming. There are only two candidates \u2014 Alice and Bob.\nThe main Berland TV channel plans to show political debates. There are $n$ people who want to take part in the debate as a spectator. Each person is described by their influence and political views. There are four kinds of political views:  supporting none of candidates (this kind is denoted as \"00\"),  supporting Alice but not Bob (this kind is denoted as \"10\"),  supporting Bob but not Alice (this kind is denoted as \"01\"),  supporting both candidates (this kind is denoted as \"11\"). \nThe direction of the TV channel wants to invite some of these people to the debate. The set of invited spectators should satisfy three conditions:  at least half of spectators support Alice (i.e. $2 \\cdot a \\ge m$, where $a$ is number of spectators supporting Alice and $m$ is the total number of spectators),  at least half of spectators support Bob (i.e. $2 \\cdot b \\ge m$, where $b$ is number of spectators supporting Bob and $m$ is the total number of spectators),  the total influence of spectators is maximal possible. \nHelp the TV channel direction to select such non-empty set of spectators, or tell that this is impossible.\n-----Input-----\nThe first line contains integer $n$ ($1 \\le n \\le 4\\cdot10^5$) \u2014 the number of people who want to take part in the debate as a spectator.\nThese people are described on the next $n$ lines. Each line describes a single person and contains the string $s_i$ and integer $a_i$ separated by space ($1 \\le a_i \\le 5000$), where $s_i$ denotes person's political views (possible values \u2014 \"00\", \"10\", \"01\", \"11\") and $a_i$ \u2014 the influence of the $i$-th person.\n-----Output-----\nPrint a single integer \u2014 maximal possible total influence of a set of spectators so that at least half of them support Alice and at least half of them support Bob. If it is impossible print 0 instead.\n-----Examples-----\nInput\n6\n11 6\n10 4\n01 3\n00 3\n00 7\n00 9\nOutput\n22\nInput\n5\n11 1\n01 1\n00 100\n10 1\n01 1\nOutput\n103\nInput\n6\n11 19\n10 22\n00 18\n00 29\n11 29\n10 28\nOutput\n105\nInput\n3\n00 5000\n00 5000\n00 5000\nOutput\n0\n-----Note-----\nIn the first example $4$ spectators can be invited to maximize total influence: $1$, $2$, $3$ and $6$. Their political views are: \"11\", \"10\", \"01\" and \"00\". So in total $2$ out of $4$ spectators support Alice and $2$ out of $4$ spectators support Bob. The total influence is $6+4+3+9=22$.\nIn the second example the direction can select all the people except the $5$-th person.\nIn the third example the direction can select people with indices: $1$, $4$, $5$ and $6$.\nIn the fourth example it is impossible to select any non-empty set of spectators.\n\ndef",
        "answer": "def elect(n, a, b):\n    if n == 0:\n        return 0\n    if n == 1:\n        return max(a[0], b[0])\n    if n == 2:\n        return max(a[0] + a[1], b[0] + b[1])\n    if n == 3:\n        return max(a[0] + a[1] + a[2], b[0] + b[1] + b[2])\n    if n == 4:\n        return max(a[0] + a[1] + a[2] + a[3], b[0] + b[1] + b[2] + b[3])\n    if n == 5:\n        return max(a[0] + a[1] + a[2] + a[3] + a[4], b[0] + b[1] + b[2] + b[3] + b[4])\n    if n == 6:\n        return max(a[0] + a[1] + a[2] + a[3] + a[4] + a[5], b[0] + b[1] + b[2] + b[3] + b[4] + b[5])\n    if n == 7:\n        return max(a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6], b[0] + b[1] + b[2] + b[3] + b[4] + b[5] + b[6])\n    if n == 8:\n        return max(a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7], b[0] + b[1] + b[2] + b[3] + b[4] + b[5] + b[6] + b[7])\n    if n == 9:\n        return max(a[0] + a[1] + a[2] + a[3] + a[4] + a[5]",
        "difficulty": "competition"
    },
    {
        "task_id": 3837,
        "prompt": "Complete the Python function given the prompt below:Soon there will be held the world's largest programming contest, but the testing system still has m bugs. The contest organizer, a well-known university, has no choice but to attract university students to fix all the bugs. The university has n students able to perform such work. The students realize that they are the only hope of the organizers, so they don't want to work for free: the i-th student wants to get c_{i} 'passes' in his subjects (regardless of the volume of his work).\nBugs, like students, are not the same: every bug is characterized by complexity a_{j}, and every student has the level of his abilities b_{i}. Student i can fix a bug j only if the level of his abilities is not less than the complexity of the bug: b_{i} \u2265 a_{j}, and he does it in one day. Otherwise, the bug will have to be fixed by another student. Of course, no student can work on a few bugs in one day. All bugs are not dependent on each other, so they can be corrected in any order, and different students can work simultaneously.\nThe university wants to fix all the bugs as quickly as possible, but giving the students the total of not more than s passes. Determine which students to use for that and come up with the schedule of work saying which student should fix which bug.\n-----Input-----\nThe first line contains three space-separated integers: n, m and s (1 \u2264 n, m \u2264 10^5, 0 \u2264 s \u2264 10^9)\u00a0\u2014 the number of students, the number of bugs in the system and the maximum number of passes the university is ready to give the students.\nThe next line contains m space-separated integers a_1, a_2,\u00a0..., a_{m} (1 \u2264 a_{i} \u2264 10^9)\u00a0\u2014 the bugs' complexities.\nThe next line contains n space-separated integers b_1, b_2,\u00a0..., b_{n} (1 \u2264 b_{i} \u2264 10^9)\u00a0\u2014 the levels of the students' abilities.\nThe next line contains n space-separated integers c_1, c_2,\u00a0..., c_{n} (0 \u2264 c_{i} \u2264 10^9)\u00a0\u2014 the numbers of the passes the students want to get for their help.\n-----Output-----\nIf the university can't correct all bugs print \"NO\".\nOtherwise, on the first line print \"YES\", and on the next line print m space-separated integers: the i-th of these numbers should equal the number of the student who corrects the i-th bug in the optimal answer. The bugs should be corrected as quickly as possible (you must spend the minimum number of days), and the total given passes mustn't exceed s. If there are multiple optimal answers, you can output any of them.\n-----Examples-----\nInput\n3 4 9\n1 3 1 2\n2 1 3\n4 3 6\nOutput\nYES\n2 3 2 3\nInput\n3 4 10\n2 3 1 2\n2 1 3\n4 3 6\nOutput\nYES\n1 3 1 3\nInput\n3 4 9\n2 3 1 2\n2 1 3\n4 3 6\nOutput\nYES\n3 3 2 3\nInput\n3 4 5\n1 3 1 2\n2 1 3\n5 3 6\nOutput\nNO\n-----Note-----\nConsider the first sample.\nThe third student (with level 3) must fix the 2nd and 4th bugs (complexities 3 and 2 correspondingly) and the second student (with level 1) must fix the 1st and 3rd bugs (their complexity also equals 1). Fixing each bug takes one day for each student, so it takes 2 days to fix all bugs (the students can work in parallel).\nThe second student wants 3 passes for his assistance, the third student wants 6 passes. It meets the university's capabilities as it is ready to give at most 9 passes.\n\ndef",
        "answer": "def solve(n, m, s, a, b, c):\n    pass",
        "difficulty": "competition"
    },
    {
        "task_id": 3838,
        "prompt": "Complete the Python function given the prompt below:Little Petya likes permutations a lot. Recently his mom has presented him permutation q_1, q_2,..., q_{n} of length n.\nA permutation a of length n is a sequence of integers a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 n), all integers there are distinct. \nThere is only one thing Petya likes more than permutations: playing with little Masha. As it turns out, Masha also has a permutation of length n. Petya decided to get the same permutation, whatever the cost may be. For that, he devised a game with the following rules:  Before the beginning of the game Petya writes permutation 1, 2,..., n on the blackboard. After that Petya makes exactly k moves, which are described below.  During a move Petya tosses a coin. If the coin shows heads, he performs point 1, if the coin shows tails, he performs point 2.  Let's assume that the board contains permutation p_1, p_2,..., p_{n} at the given moment. Then Petya removes the written permutation p from the board and writes another one instead: p_{q}_1, p_{q}_2,..., p_{q}_{n}. In other words, Petya applies permutation q (which he has got from his mother) to permutation p.  All actions are similar to point 1, except that Petya writes permutation t on the board, such that: t_{q}_{i} = p_{i} for all i from 1 to n. In other words, Petya applies a permutation that is inverse to q to permutation p. \nWe know that after the k-th move the board contained Masha's permutation s_1, s_2,..., s_{n}. Besides, we know that throughout the game process Masha's permutation never occurred on the board before the k-th move. Note that the game has exactly k moves, that is, throughout the game the coin was tossed exactly k times.\nYour task is to determine whether the described situation is possible or else state that Petya was mistaken somewhere. See samples and notes to them for a better understanding.\n-----Input-----\nThe first line contains two integers n and k (1 \u2264 n, k \u2264 100). The second line contains n space-separated integers q_1, q_2,..., q_{n} (1 \u2264 q_{i} \u2264 n) \u2014 the permutation that Petya's got as a present. The third line contains Masha's permutation s, in the similar format.\nIt is guaranteed that the given sequences q and s are correct permutations.\n-----Output-----\nIf the situation that is described in the statement is possible, print \"YES\" (without the quotes), otherwise print \"NO\" (without the quotes).\n-----Examples-----\nInput\n4 1\n2 3 4 1\n1 2 3 4\nOutput\nNO\nInput\n4 1\n4 3 1 2\n3 4 2 1\nOutput\nYES\nInput\n4 3\n4 3 1 2\n3 4 2 1\nOutput\nYES\nInput\n4 2\n4 3 1 2\n2 1 4 3\nOutput\nYES\nInput\n4 1\n4 3 1 2\n2 1 4 3\nOutput\nNO\n-----Note-----\nIn the first sample Masha's permutation coincides with the permutation that was written on the board before the beginning of the game. Consequently, that violates the condition that Masha's permutation never occurred on the board before k moves were performed.\nIn the second sample the described situation is possible, in case if after we toss a coin, we get tails.\nIn the third sample the possible coin tossing sequence is: heads-tails-tails.\nIn the fourth sample the possible coin tossing sequence is: heads-heads.\n\ndef",
        "answer": "def permutations(n, k):\n    return n**k",
        "difficulty": "competition"
    },
    {
        "task_id": 3839,
        "prompt": "Complete the Python function given the prompt below:Ivan places knights on infinite chessboard. Initially there are $n$ knights. If there is free cell which is under attack of at least $4$ knights then he places new knight in this cell. Ivan repeats this until there are no such free cells. One can prove that this process is finite. One can also prove that position in the end does not depend on the order in which new knights are placed.\nIvan asked you to find initial placement of exactly $n$ knights such that in the end there will be at least $\\lfloor \\frac{n^{2}}{10} \\rfloor$ knights.\n-----Input-----\nThe only line of input contains one integer $n$ ($1 \\le n \\le 10^{3}$)\u00a0\u2014 number of knights in the initial placement.\n-----Output-----\nPrint $n$ lines. Each line should contain $2$ numbers $x_{i}$ and $y_{i}$ ($-10^{9} \\le x_{i}, \\,\\, y_{i} \\le 10^{9}$)\u00a0\u2014 coordinates of $i$-th knight. For all $i \\ne j$, $(x_{i}, \\,\\, y_{i}) \\ne (x_{j}, \\,\\, y_{j})$ should hold. In other words, all knights should be in different cells.\nIt is guaranteed that the solution exists.\n-----Examples-----\nInput\n4\nOutput\n1 1\n3 1\n1 5\n4 4\nInput\n7\nOutput\n2 1\n1 2\n4 1\n5 2\n2 6\n5 7\n6 6\n-----Note-----\nLet's look at second example:\n$\\left. \\begin{array}{|l|l|l|l|l|l|l|l|l|} \\hline 7 & {} & {} & {} & {} & {0} & {} & {} \\\\ \\hline 6 & {} & {0} & {} & {} & {} & {0} & {} \\\\ \\hline 5 & {} & {} & {} & {2} & {} & {} & {} \\\\ \\hline 4 & {} & {} & {} & {} & {} & {} & {} \\\\ \\hline 3 & {} & {} & {1} & {} & {} & {} & {} \\\\ \\hline 2 & {0} & {} & {} & {} & {0} & {} & {} \\\\ \\hline 1 & {} & {0} & {} & {0} & {} & {} & {} \\\\ \\hline & {1} & {2} & {3} & {4} & {5} & {6} & {7} \\\\ \\hline \\end{array} \\right.$\nGreen zeroes are initial knights. Cell $(3, \\,\\, 3)$ is under attack of $4$ knights in cells $(1, \\,\\, 2)$, $(2, \\,\\, 1)$, $(4, \\,\\, 1)$ and $(5, \\,\\, 2)$, therefore Ivan will place a knight in this cell. Cell $(4, \\,\\, 5)$ is initially attacked by only $3$ knights in cells $(2, \\,\\, 6)$, $(5, \\,\\, 7)$ and $(6, \\,\\, 6)$. But new knight in cell $(3, \\,\\, 3)$ also attacks cell $(4, \\,\\, 5)$, now it is attacked by $4$ knights and Ivan will place another knight in this cell. There are no more free cells which are attacked by $4$ or more knights, so the process stops. There are $9$ knights in the end, which is not less than $\\lfloor \\frac{7^{2}}{10} \\rfloor = 4$.\n\ndef",
        "answer": "def knights(n):\n    x, y = 0, 0\n    while n > 0:\n        if (x, y) not in [(1, 2), (2, 1), (4, 1), (5, 2)]:\n            n -= 1\n            print(x, y)\n        x += 1\n        if x > 7:\n            x = 0\n            y += 1",
        "difficulty": "competition"
    },
    {
        "task_id": 3840,
        "prompt": "Complete the Python function given the prompt below:Two pirates Polycarpus and Vasily play a very interesting game. They have n chests with coins, the chests are numbered with integers from 1 to n. Chest number i has a_{i} coins. \nPolycarpus and Vasily move in turns. Polycarpus moves first. During a move a player is allowed to choose a positive integer x (2\u00b7x + 1 \u2264 n) and take a coin from each chest with numbers x, 2\u00b7x, 2\u00b7x + 1. It may turn out that some chest has no coins, in this case the player doesn't take a coin from this chest. The game finishes when all chests get emptied.\nPolycarpus isn't a greedy scrooge. Polycarpys is a lazy slob. So he wonders in what minimum number of moves the game can finish. Help Polycarpus, determine the minimum number of moves in which the game can finish. Note that Polycarpus counts not only his moves, he also counts Vasily's moves.\n-----Input-----\nThe first line contains a single integer n (1 \u2264 n \u2264 100) \u2014 the number of chests with coins. The second line contains a sequence of space-separated integers: a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 1000), where a_{i} is the number of coins in the chest number i at the beginning of the game.\n-----Output-----\nPrint a single integer \u2014 the minimum number of moves needed to finish the game. If no sequence of turns leads to finishing the game, print -1.\n-----Examples-----\nInput\n1\n1\nOutput\n-1\nInput\n3\n1 2 3\nOutput\n3\n-----Note-----\nIn the first test case there isn't a single move that can be made. That's why the players won't be able to empty the chests.\nIn the second sample there is only one possible move x = 1. This move should be repeated at least 3 times to empty the third chest.\n\ndef",
        "answer": "def pirate_game(n, m, c):\n    # Write your code here\n    if n == 0:\n        return 0\n    if m == 0:\n        return -1\n    if n == 1:\n        return c[0]\n    if m == 1:\n        return max(c)\n    if m == 2:\n        return max(c[0], c[1])\n    if m == 3:\n        return max(c[0], c[1], c[2])\n    if m == 4:\n        return max(c[0], c[1], c[2], c[3])\n    if m == 5:\n        return max(c[0], c[1], c[2], c[3], c[4])\n    if m == 6:\n        return max(c[0], c[1], c[2], c[3], c[4], c[5])\n    if m == 7:\n        return max(c[0], c[1], c[2], c[3], c[4], c[5], c[6])\n    if m == 8:\n        return max(c[0], c[1], c[2], c[3], c[4], c[5], c[6], c[7])\n    if m == 9:\n        return max(c[0], c[1], c[2], c[3], c[4], c[5], c[6], c[7], c[8])\n    if m == 10:\n        return max(c[0], c[1], c[2], c[3], c[4], c[5], c[6], c[7], c[8], c[9])\n    if m == 11:\n        return max(c[0], c[1], c[2], c[3], c[4], c[5], c[6], c[7], c[8], c[9], c[10])\n    if m == 12:\n        return max(c[0], c[1], c[2], c[3], c[4], c[5], c[6], c[7], c[8], c[9],",
        "difficulty": "competition"
    },
    {
        "task_id": 3841,
        "prompt": "Complete the Python function given the prompt below:In order to put away old things and welcome a fresh new year, a thorough cleaning of the house is a must.\nLittle Tommy finds an old polynomial and cleaned it up by taking it modulo another. But now he regrets doing this...\nGiven two integers p and k, find a polynomial f(x) with non-negative integer coefficients strictly less than k, whose remainder is p when divided by (x + k). That is, f(x) = q(x)\u00b7(x + k) + p, where q(x) is a polynomial (not necessarily with integer coefficients).\n-----Input-----\nThe only line of input contains two space-separated integers p and k (1 \u2264 p \u2264 10^18, 2 \u2264 k \u2264 2 000).\n-----Output-----\nIf the polynomial does not exist, print a single integer -1, or output two lines otherwise.\nIn the first line print a non-negative integer d \u2014 the number of coefficients in the polynomial.\nIn the second line print d space-separated integers a_0, a_1,..., a_{d} - 1, describing a polynomial $f(x) = \\sum_{i = 0}^{d - 1} a_{i} \\cdot x^{i}$ fulfilling the given requirements. Your output should satisfy 0 \u2264 a_{i} < k for all 0 \u2264 i \u2264 d - 1, and a_{d} - 1 \u2260 0.\nIf there are many possible solutions, print any of them.\n-----Examples-----\nInput\n46 2\nOutput\n7\n0 1 0 0 1 1 1\nInput\n2018 214\nOutput\n3\n92 205 1\n-----Note-----\nIn the first example, f(x) = x^6 + x^5 + x^4 + x = (x^5 - x^4 + 3x^3 - 6x^2 + 12x - 23)\u00b7(x + 2) + 46.\nIn the second example, f(x) = x^2 + 205x + 92 = (x - 9)\u00b7(x + 214) + 2018.\n\ndef",
        "answer": "def solve(p, k):\n    if p % k == 0:\n        return -1\n    else:\n        return p % k",
        "difficulty": "competition"
    },
    {
        "task_id": 3842,
        "prompt": "Complete the Python function given the prompt below:Mikhail the Freelancer dreams of two things: to become a cool programmer and to buy a flat in Moscow. To become a cool programmer, he needs at least p experience points, and a desired flat in Moscow costs q dollars. Mikhail is determined to follow his dreams and registered at a freelance site.\nHe has suggestions to work on n distinct projects. Mikhail has already evaluated that the participation in the i-th project will increase his experience by a_{i} per day and bring b_{i} dollars per day. As freelance work implies flexible working hours, Mikhail is free to stop working on one project at any time and start working on another project. Doing so, he receives the respective share of experience and money. Mikhail is only trying to become a cool programmer, so he is able to work only on one project at any moment of time.\nFind the real value, equal to the minimum number of days Mikhail needs to make his dream come true.\nFor example, suppose Mikhail is suggested to work on three projects and a_1 = 6, b_1 = 2, a_2 = 1, b_2 = 3, a_3 = 2, b_3 = 6. Also, p = 20 and q = 20. In order to achieve his aims Mikhail has to work for 2.5 days on both first and third projects. Indeed, a_1\u00b72.5 + a_2\u00b70 + a_3\u00b72.5 = 6\u00b72.5 + 1\u00b70 + 2\u00b72.5 = 20 and b_1\u00b72.5 + b_2\u00b70 + b_3\u00b72.5 = 2\u00b72.5 + 3\u00b70 + 6\u00b72.5 = 20.\n-----Input-----\nThe first line of the input contains three integers n, p and q (1 \u2264 n \u2264 100 000, 1 \u2264 p, q \u2264 1 000 000)\u00a0\u2014 the number of projects and the required number of experience and money.\nEach of the next n lines contains two integers a_{i} and b_{i} (1 \u2264 a_{i}, b_{i} \u2264 1 000 000)\u00a0\u2014 the daily increase in experience and daily income for working on the i-th project.\n-----Output-----\nPrint a real value\u00a0\u2014 the minimum number of days Mikhail needs to get the required amount of experience and money. Your answer will be considered correct if its absolute or relative error does not exceed 10^{ - 6}. \nNamely: let's assume that your answer is a, and the answer of the jury is b. The checker program will consider your answer correct, if $\\frac{|a - b|}{\\operatorname{max}(1, b)} \\leq 10^{-6}$.\n-----Examples-----\nInput\n3 20 20\n6 2\n1 3\n2 6\nOutput\n5.000000000000000\nInput\n4 1 1\n2 3\n3 2\n2 3\n3 2\nOutput\n0.400000000000000\n-----Note-----\nFirst sample corresponds to the example in the problem statement.\n\ndef",
        "answer": "def solution(n, p, q):\n    return min(p, q)",
        "difficulty": "competition"
    },
    {
        "task_id": 3843,
        "prompt": "Complete the Python function given the prompt below:Robbers, who attacked the Gerda's cab, are very successful in covering from the kingdom police. To make the goal of catching them even harder, they use their own watches.\nFirst, as they know that kingdom police is bad at math, robbers use the positional numeral system with base 7. Second, they divide one day in n hours, and each hour in m minutes. Personal watches of each robber are divided in two parts: first of them has the smallest possible number of places that is necessary to display any integer from 0 to n - 1, while the second has the smallest possible number of places that is necessary to display any integer from 0 to m - 1. Finally, if some value of hours or minutes can be displayed using less number of places in base 7 than this watches have, the required number of zeroes is added at the beginning of notation.\nNote that to display number 0 section of the watches is required to have at least one place.\nLittle robber wants to know the number of moments of time (particular values of hours and minutes), such that all digits displayed on the watches are distinct. Help her calculate this number.\n-----Input-----\nThe first line of the input contains two integers, given in the decimal notation, n and m (1 \u2264 n, m \u2264 10^9)\u00a0\u2014 the number of hours in one day and the number of minutes in one hour, respectively.\n-----Output-----\nPrint one integer in decimal notation\u00a0\u2014 the number of different pairs of hour and minute, such that all digits displayed on the watches are distinct.\n-----Examples-----\nInput\n2 3\nOutput\n4\nInput\n8 2\nOutput\n5\n-----Note-----\nIn the first sample, possible pairs are: (0: 1), (0: 2), (1: 0), (1: 2).\nIn the second sample, possible pairs are: (02: 1), (03: 1), (04: 1), (05: 1), (06: 1).\n\ndef",
        "answer": "def robber(n, m):\n    # your code here\n    return robber",
        "difficulty": "competition"
    },
    {
        "task_id": 3844,
        "prompt": "Complete the Python function given the prompt below:Edogawa Conan got tired of solving cases, and invited his friend, Professor Agasa, over. They decided to play a game of cards. Conan has n cards, and the i-th card has a number a_{i} written on it.\nThey take turns playing, starting with Conan. In each turn, the player chooses a card and removes it. Also, he removes all cards having a number strictly lesser than the number on the chosen card. Formally, if the player chooses the i-th card, he removes that card and removes the j-th card for all j such that a_{j} < a_{i}.\nA player loses if he cannot make a move on his turn, that is, he loses if there are no cards left. Predict the outcome of the game, assuming both players play optimally.\n-----Input-----\nThe first line contains an integer n (1 \u2264 n \u2264 10^5)\u00a0\u2014 the number of cards Conan has. \nThe next line contains n integers a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 10^5), where a_{i} is the number on the i-th card.\n-----Output-----\nIf Conan wins, print \"Conan\" (without quotes), otherwise print \"Agasa\" (without quotes).\n-----Examples-----\nInput\n3\n4 5 7\nOutput\nConan\nInput\n2\n1 1\nOutput\nAgasa\n-----Note-----\nIn the first example, Conan can just choose the card having number 7 on it and hence remove all the cards. After that, there are no cards left on Agasa's turn.\nIn the second example, no matter which card Conan chooses, there will be one one card left, which Agasa can choose. After that, there are no cards left when it becomes Conan's turn again.\n\ndef",
        "answer": "def solve(n, a):\n    # your code here\n    return",
        "difficulty": "competition"
    },
    {
        "task_id": 3845,
        "prompt": "Complete the Python function given the prompt below:You are given two integers A and B.\nPrint a grid where each square is painted white or black that satisfies the following conditions, in the format specified in Output section:\n - Let the size of the grid be h \\times w (h vertical, w horizontal). Both h and w are at most 100.\n - The set of the squares painted white is divided into exactly A connected components.\n - The set of the squares painted black is divided into exactly B connected components.\nIt can be proved that there always exist one or more solutions under the conditions specified in Constraints section.\nIf there are multiple solutions, any of them may be printed.\n-----Notes-----\nTwo squares painted white, c_1 and c_2, are called connected when the square c_2 can be reached from the square c_1 passing only white squares by repeatedly moving up, down, left or right to an adjacent square.\nA set of squares painted white, S, forms a connected component when the following conditions are met:\n - Any two squares in S are connected.\n - No pair of a square painted white that is not included in S and a square included in S is connected.\nA connected component of squares painted black is defined similarly.\n-----Constraints-----\n - 1 \\leq A \\leq 500\n - 1 \\leq B \\leq 500\n-----Input-----\nInput is given from Standard Input in the following format:\nA B\n-----Output-----\nOutput should be in the following format:\n - In the first line, print integers h and w representing the size of the grid you constructed, with a space in between.\n - Then, print h more lines. The i-th (1 \\leq i \\leq h) of these lines should contain a string s_i as follows:\n - If the square at the i-th row and j-th column (1 \\leq j \\leq w) in the grid is painted white, the j-th character in s_i should be..\n - If the square at the i-th row and j-th column (1 \\leq j \\leq w) in the grid is painted black, the j-th character in s_i should be #.\n-----Sample Input-----\n2 3\n-----Sample Output-----\n3 3\n##.\n..#\n#.#\nThis output corresponds to the grid below:\n\ndef",
        "answer": "def print_grid(grid):\n    for row in grid:\n        print(''.join(row))",
        "difficulty": "competition"
    },
    {
        "task_id": 3846,
        "prompt": "Complete the Python function given the prompt below:Nearly each project of the F company has a whole team of developers working on it. They often are in different rooms of the office in different cities and even countries. To keep in touch and track the results of the project, the F company conducts shared online meetings in a Spyke chat.\nOne day the director of the F company got hold of the records of a part of an online meeting of one successful team. The director watched the record and wanted to talk to the team leader. But how can he tell who the leader is? The director logically supposed that the leader is the person who is present at any conversation during a chat meeting. In other words, if at some moment of time at least one person is present on the meeting, then the leader is present on the meeting.\nYou are the assistant director. Given the 'user logged on'/'user logged off' messages of the meeting in the chronological order, help the director determine who can be the leader. Note that the director has the record of only a continuous part of the meeting (probably, it's not the whole meeting).\n-----Input-----\nThe first line contains integers n and m (1 \u2264 n, m \u2264 10^5) \u2014 the number of team participants and the number of messages. Each of the next m lines contains a message in the format:  '+ id': the record means that the person with number id (1 \u2264 id \u2264 n) has logged on to the meeting.  '- id': the record means that the person with number id (1 \u2264 id \u2264 n) has logged off from the meeting. \nAssume that all the people of the team are numbered from 1 to n and the messages are given in the chronological order. It is guaranteed that the given sequence is the correct record of a continuous part of the meeting. It is guaranteed that no two log on/log off events occurred simultaneously.\n-----Output-----\nIn the first line print integer k (0 \u2264 k \u2264 n) \u2014 how many people can be leaders. In the next line, print k integers in the increasing order \u2014 the numbers of the people who can be leaders.\nIf the data is such that no member of the team can be a leader, print a single number 0.\n-----Examples-----\nInput\n5 4\n+ 1\n+ 2\n- 2\n- 1\nOutput\n4\n1 3 4 5 \nInput\n3 2\n+ 1\n- 2\nOutput\n1\n3 \nInput\n2 4\n+ 1\n- 1\n+ 2\n- 2\nOutput\n0\nInput\n5 6\n+ 1\n- 1\n- 3\n+ 3\n+ 4\n- 4\nOutput\n3\n2 3 5 \nInput\n2 4\n+ 1\n- 2\n+ 2\n- 1\nOutput\n0\n\ndef",
        "answer": "def leaders(n, m):\n    # your code here\n    pass\n",
        "difficulty": "competition"
    },
    {
        "task_id": 3847,
        "prompt": "Complete the Python function given the prompt below:You are given two arrays $a$ and $b$ of positive integers, with length $n$ and $m$ respectively. \nLet $c$ be an $n \\times m$ matrix, where $c_{i,j} = a_i \\cdot b_j$. \nYou need to find a subrectangle of the matrix $c$ such that the sum of its elements is at most $x$, and its area (the total number of elements) is the largest possible.\nFormally, you need to find the largest number $s$ such that it is possible to choose integers $x_1, x_2, y_1, y_2$ subject to $1 \\leq x_1 \\leq x_2 \\leq n$, $1 \\leq y_1 \\leq y_2 \\leq m$, $(x_2 - x_1 + 1) \\times (y_2 - y_1 + 1) = s$, and $$\\sum_{i=x_1}^{x_2}{\\sum_{j=y_1}^{y_2}{c_{i,j}}} \\leq x.$$\n-----Input-----\nThe first line contains two integers $n$ and $m$ ($1 \\leq n, m \\leq 2000$).\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq 2000$).\nThe third line contains $m$ integers $b_1, b_2, \\ldots, b_m$ ($1 \\leq b_i \\leq 2000$).\nThe fourth line contains a single integer $x$ ($1 \\leq x \\leq 2 \\cdot 10^{9}$).\n-----Output-----\nIf it is possible to choose four integers $x_1, x_2, y_1, y_2$ such that $1 \\leq x_1 \\leq x_2 \\leq n$, $1 \\leq y_1 \\leq y_2 \\leq m$, and $\\sum_{i=x_1}^{x_2}{\\sum_{j=y_1}^{y_2}{c_{i,j}}} \\leq x$, output the largest value of $(x_2 - x_1 + 1) \\times (y_2 - y_1 + 1)$ among all such quadruplets, otherwise output $0$.\n-----Examples-----\nInput\n3 3\n1 2 3\n1 2 3\n9\nOutput\n4\nInput\n5 1\n5 4 2 4 5\n2\n5\nOutput\n1\n-----Note-----\nMatrix from the first sample and the chosen subrectangle (of blue color):\n [Image] \nMatrix from the second sample and the chosen subrectangle (of blue color):\n $\\left. \\begin{array}{l l l l l}{10} & {8} & {4} & {8} & {10} \\end{array} \\right.$\n\ndef",
        "answer": "def solution(a, b, x):\n    # your code here\n    return 0",
        "difficulty": "competition"
    },
    {
        "task_id": 3848,
        "prompt": "Complete the Python function given the prompt below:Paul hates palindromes. He assumes that string s is tolerable if each its character is one of the first p letters of the English alphabet and s doesn't contain any palindrome contiguous substring of length 2 or more.\nPaul has found a tolerable string s of length n. Help him find the lexicographically next tolerable string of the same length or else state that such string does not exist.\n-----Input-----\nThe first line contains two space-separated integers: n and p (1 \u2264 n \u2264 1000; 1 \u2264 p \u2264 26). The second line contains string s, consisting of n small English letters. It is guaranteed that the string is tolerable (according to the above definition).\n-----Output-----\nIf the lexicographically next tolerable string of the same length exists, print it. Otherwise, print \"NO\" (without the quotes).\n-----Examples-----\nInput\n3 3\ncba\nOutput\nNO\nInput\n3 4\ncba\nOutput\ncbd\nInput\n4 4\nabcd\nOutput\nabda\n-----Note-----\nString s is lexicographically larger (or simply larger) than string t with the same length, if there is number i, such that s_1 = t_1,..., s_{i} = t_{i}, s_{i} + 1 > t_{i} + 1.\nThe lexicographically next tolerable string is the lexicographically minimum tolerable string which is larger than the given one.\nA palindrome is a string that reads the same forward or reversed.\n\ndef",
        "answer": "def is_palindrome(s):\n    return s == s[::-1]",
        "difficulty": "competition"
    },
    {
        "task_id": 3849,
        "prompt": "Complete the Python function given the prompt below:\"Duel!\"\nBetting on the lovely princess Claris, the duel between Tokitsukaze and Quailty has started.\nThere are $n$ cards in a row. Each card has two sides, one of which has color. At first, some of these cards are with color sides facing up and others are with color sides facing down. Then they take turns flipping cards, in which Tokitsukaze moves first. In each move, one should choose exactly $k$ consecutive cards and flip them to the same side, which means to make their color sides all face up or all face down. If all the color sides of these $n$ cards face the same direction after one's move, the one who takes this move will win.\nPrincess Claris wants to know who will win the game if Tokitsukaze and Quailty are so clever that they won't make mistakes.\n-----Input-----\nThe first line contains two integers $n$ and $k$ ($1 \\le k \\le n \\le 10^5$).\nThe second line contains a single string of length $n$ that only consists of $0$ and $1$, representing the situation of these $n$ cards, where the color side of the $i$-th card faces up if the $i$-th character is $1$, or otherwise, it faces down and the $i$-th character is $0$.\n-----Output-----\nPrint \"once again\" (without quotes) if the total number of their moves can exceed $10^9$, which is considered a draw.\nIn other cases, print \"tokitsukaze\" (without quotes) if Tokitsukaze will win, or \"quailty\" (without quotes) if Quailty will win.\nNote that the output characters are case-sensitive, and any wrong spelling would be rejected.\n-----Examples-----\nInput\n4 2\n0101\nOutput\nquailty\nInput\n6 1\n010101\nOutput\nonce again\nInput\n6 5\n010101\nOutput\ntokitsukaze\nInput\n4 1\n0011\nOutput\nonce again\n-----Note-----\nIn the first example, no matter how Tokitsukaze moves, there would be three cards with color sides facing the same direction after her move, and Quailty can flip the last card to this direction and win.\nIn the second example, no matter how Tokitsukaze moves, Quailty can choose the same card and flip back to the initial situation, which can allow the game to end in a draw.\nIn the third example, Tokitsukaze can win by flipping the leftmost five cards up or flipping the rightmost five cards down.\nThe fourth example can be explained in the same way as the second example does.\n\ndef",
        "answer": "def duel(n, k):\n    if n < k:\n        return \"tokitsukaze\"\n    if n == k:\n        return \"once again\"\n    if n > k:\n        return \"quailty\"",
        "difficulty": "competition"
    },
    {
        "task_id": 3850,
        "prompt": "Complete the Python function given the prompt below:There are n people and k keys on a straight line. Every person wants to get to the office which is located on the line as well. To do that, he needs to reach some point with a key, take the key and then go to the office. Once a key is taken by somebody, it couldn't be taken by anybody else.\nYou are to determine the minimum time needed for all n people to get to the office with keys. Assume that people move a unit distance per 1 second. If two people reach a key at the same time, only one of them can take the key. A person can pass through a point with a key without taking it.\n-----Input-----\nThe first line contains three integers n, k and p (1 \u2264 n \u2264 1 000, n \u2264 k \u2264 2 000, 1 \u2264 p \u2264 10^9) \u2014 the number of people, the number of keys and the office location.\nThe second line contains n distinct integers a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 10^9) \u2014 positions in which people are located initially. The positions are given in arbitrary order.\nThe third line contains k distinct integers b_1, b_2,..., b_{k} (1 \u2264 b_{j} \u2264 10^9) \u2014 positions of the keys. The positions are given in arbitrary order.\nNote that there can't be more than one person or more than one key in the same point. A person and a key can be located in the same point.\n-----Output-----\nPrint the minimum time (in seconds) needed for all n to reach the office with keys.\n-----Examples-----\nInput\n2 4 50\n20 100\n60 10 40 80\nOutput\n50\nInput\n1 2 10\n11\n15 7\nOutput\n7\n-----Note-----\nIn the first example the person located at point 20 should take the key located at point 40 and go with it to the office located at point 50. He spends 30 seconds. The person located at point 100 can take the key located at point 80 and go to the office with it. He spends 50 seconds. Thus, after 50 seconds everybody is in office with keys.\n\ndef",
        "answer": "def solution(n, k, p):\n    # Write your code here\n    return",
        "difficulty": "competition"
    },
    {
        "task_id": 3851,
        "prompt": "Complete the Python function given the prompt below:Recently a Golden Circle of Beetlovers was found in Byteland. It is a circle route going through $n \\cdot k$ cities. The cities are numerated from $1$ to $n \\cdot k$, the distance between the neighboring cities is exactly $1$ km.\nSergey does not like beetles, he loves burgers. Fortunately for him, there are $n$ fast food restaurants on the circle, they are located in the $1$-st, the $(k + 1)$-st, the $(2k + 1)$-st, and so on, the $((n-1)k + 1)$-st cities, i.e. the distance between the neighboring cities with fast food restaurants is $k$ km.\nSergey began his journey at some city $s$ and traveled along the circle, making stops at cities each $l$ km ($l > 0$), until he stopped in $s$ once again. Sergey then forgot numbers $s$ and $l$, but he remembers that the distance from the city $s$ to the nearest fast food restaurant was $a$ km, and the distance from the city he stopped at after traveling the first $l$ km from $s$ to the nearest fast food restaurant was $b$ km. Sergey always traveled in the same direction along the circle, but when he calculated distances to the restaurants, he considered both directions.\nNow Sergey is interested in two integers. The first integer $x$ is the minimum number of stops (excluding the first) Sergey could have done before returning to $s$. The second integer $y$ is the maximum number of stops (excluding the first) Sergey could have done before returning to $s$.\n-----Input-----\nThe first line contains two integers $n$ and $k$ ($1 \\le n, k \\le 100\\,000$)\u00a0\u2014 the number of fast food restaurants on the circle and the distance between the neighboring restaurants, respectively.\nThe second line contains two integers $a$ and $b$ ($0 \\le a, b \\le \\frac{k}{2}$)\u00a0\u2014 the distances to the nearest fast food restaurants from the initial city and from the city Sergey made the first stop at, respectively.\n-----Output-----\nPrint the two integers $x$ and $y$.\n-----Examples-----\nInput\n2 3\n1 1\nOutput\n1 6\nInput\n3 2\n0 0\nOutput\n1 3\nInput\n1 10\n5 3\nOutput\n5 5\n-----Note-----\nIn the first example the restaurants are located in the cities $1$ and $4$, the initial city $s$ could be $2$, $3$, $5$, or $6$. The next city Sergey stopped at could also be at cities $2, 3, 5, 6$. Let's loop through all possible combinations of these cities. If both $s$ and the city of the first stop are at the city $2$ (for example, $l = 6$), then Sergey is at $s$ after the first stop already, so $x = 1$. In other pairs Sergey needs $1, 2, 3$, or $6$ stops to return to $s$, so $y = 6$.\nIn the second example Sergey was at cities with fast food restaurant both initially and after the first stop, so $l$ is $2$, $4$, or $6$. Thus $x = 1$, $y = 3$.\nIn the third example there is only one restaurant, so the possible locations of $s$ and the first stop are: $(6, 8)$ and $(6, 4)$. For the first option $l = 2$, for the second $l = 8$. In both cases Sergey needs $x=y=5$ stops to go to $s$.\n\ndef",
        "answer": "def main():\n    n, k = map(int, input().split())\n    a, b = map(int, input().split())\n    print(min(n * k - a, n * k - b))",
        "difficulty": "competition"
    },
    {
        "task_id": 3852,
        "prompt": "Complete the Python function given the prompt below:Snuke has an integer sequence, a, of length N. The i-th element of a (1-indexed) is a_{i}.\nHe can perform the following operation any number of times:\n - Operation: Choose integers x and y between 1 and N (inclusive), and add a_x to a_y.\nHe would like to perform this operation between 0 and 2N times (inclusive) so that a satisfies the condition below. Show one such sequence of operations.\nIt can be proved that such a sequence of operations always exists under the constraints in this problem.\n - Condition: a_1 \\leq a_2 \\leq...  \\leq a_{N}\n-----Constraints-----\n - 2 \\leq N \\leq 50\n - -10^{6} \\leq a_i \\leq 10^{6}\n - All input values are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN\na_1 a_2... a_{N}\n-----Output-----\nLet m be the number of operations in your solution. In the first line, print m.\nIn the i-th of the subsequent m lines, print the numbers x and y chosen in the i-th operation, with a space in between.\nThe output will be considered correct if m is between 0 and 2N (inclusive) and a satisfies the condition after the m operations.\n-----Sample Input-----\n3\n-2 5 -1\n-----Sample Output-----\n2\n2 3\n3 3\n - After the first operation, a = (-2,5,4).\n - After the second operation, a = (-2,5,8), and the condition is now satisfied.\n\ndef",
        "answer": "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] <= a[j]:\n                m += 1\n    print(m)",
        "difficulty": "competition"
    },
    {
        "task_id": 3853,
        "prompt": "Complete the Python function given the prompt below:Emuskald is a well-known illusionist. One of his trademark tricks involves a set of magical boxes. The essence of the trick is in packing the boxes inside other boxes.\nFrom the top view each magical box looks like a square with side length equal to 2^{k} (k is an integer, k \u2265 0) units. A magical box v can be put inside a magical box u, if side length of v is strictly less than the side length of u. In particular, Emuskald can put 4 boxes of side length 2^{k} - 1 into one box of side length 2^{k}, or as in the following figure:\n [Image] \nEmuskald is about to go on tour performing around the world, and needs to pack his magical boxes for the trip. He has decided that the best way to pack them would be inside another magical box, but magical boxes are quite expensive to make. Help him find the smallest magical box that can fit all his boxes.\n-----Input-----\nThe first line of input contains an integer n (1 \u2264 n \u2264 10^5), the number of different sizes of boxes Emuskald has. Each of following n lines contains two integers k_{i} and a_{i} (0 \u2264 k_{i} \u2264 10^9, 1 \u2264 a_{i} \u2264 10^9), which means that Emuskald has a_{i} boxes with side length 2^{k}_{i}. It is guaranteed that all of k_{i} are distinct.\n-----Output-----\nOutput a single integer p, such that the smallest magical box that can contain all of Emuskald\u2019s boxes has side length 2^{p}.\n-----Examples-----\nInput\n2\n0 3\n1 5\nOutput\n3\nInput\n1\n0 4\nOutput\n1\nInput\n2\n1 10\n2 2\nOutput\n3\n-----Note-----\nPicture explanation. If we have 3 boxes with side length 2 and 5 boxes with side length 1, then we can put all these boxes inside a box with side length 4, for example, as shown in the picture.\nIn the second test case, we can put all four small boxes into a box with side length 2.\n\ndef",
        "answer": "def solve(n, k):\n    return 2**k",
        "difficulty": "competition"
    },
    {
        "task_id": 3854,
        "prompt": "Complete the Python function given the prompt below:Pari wants to buy an expensive chocolate from Arya. She has n coins, the value of the i-th coin is c_{i}. The price of the chocolate is k, so Pari will take a subset of her coins with sum equal to k and give it to Arya.\nLooking at her coins, a question came to her mind: after giving the coins to Arya, what values does Arya can make with them? She is jealous and she doesn't want Arya to make a lot of values. So she wants to know all the values x, such that Arya will be able to make x using some subset of coins with the sum k.\nFormally, Pari wants to know the values x such that there exists a subset of coins with the sum k such that some subset of this subset has the sum x, i.e. there is exists some way to pay for the chocolate, such that Arya will be able to make the sum x using these coins.\n-----Input-----\nThe first line contains two integers n and k (1  \u2264  n, k  \u2264  500)\u00a0\u2014 the number of coins and the price of the chocolate, respectively.\nNext line will contain n integers c_1, c_2,..., c_{n} (1 \u2264 c_{i} \u2264 500)\u00a0\u2014 the values of Pari's coins.\nIt's guaranteed that one can make value k using these coins.\n-----Output-----\nFirst line of the output must contain a single integer q\u2014 the number of suitable values x. Then print q integers in ascending order\u00a0\u2014 the values that Arya can make for some subset of coins of Pari that pays for the chocolate.\n-----Examples-----\nInput\n6 18\n5 6 1 10 12 2\nOutput\n16\n0 1 2 3 5 6 7 8 10 11 12 13 15 16 17 18 \nInput\n3 50\n25 25 50\nOutput\n3\n0 25 50\n\ndef",
        "answer": "def solve(n, k, c):\n    # your code here\n    pass",
        "difficulty": "competition"
    },
    {
        "task_id": 3855,
        "prompt": "Complete the Python function given the prompt below:You have $n$ coins, each of the same value of $1$.\nDistribute them into packets such that any amount $x$ ($1 \\leq x \\leq n$) can be formed using some (possibly one or all) number of these packets.\nEach packet may only be used entirely or not used at all. No packet may be used more than once in the formation of the single $x$, however it may be reused for the formation of other $x$'s.\nFind the minimum number of packets in such a distribution.\n-----Input-----\nThe only line contains a single integer $n$ ($1 \\leq n \\leq 10^9$)\u00a0\u2014 the number of coins you have.\n-----Output-----\nOutput a single integer\u00a0\u2014 the minimum possible number of packets, satisfying the condition above.\n-----Examples-----\nInput\n6\nOutput\n3\nInput\n2\nOutput\n2\n-----Note-----\nIn the first example, three packets with $1$, $2$ and $3$ coins can be made to get any amount $x$ ($1\\leq x\\leq 6$).  To get $1$ use the packet with $1$ coin.  To get $2$ use the packet with $2$ coins.  To get $3$ use the packet with $3$ coins.  To get $4$ use packets with $1$ and $3$ coins.  To get $5$ use packets with $2$ and $3$ coins  To get $6$ use all packets. \nIn the second example, two packets with $1$ and $1$ coins can be made to get any amount $x$ ($1\\leq x\\leq 2$).\n\ndef",
        "answer": "def solution(n):\n    return n // 2",
        "difficulty": "competition"
    },
    {
        "task_id": 3856,
        "prompt": "Complete the Python function given the prompt below:Many years have passed, and n friends met at a party again. Technologies have leaped forward since the last meeting, cameras with timer appeared and now it is not obligatory for one of the friends to stand with a camera, and, thus, being absent on the photo.\nSimply speaking, the process of photographing can be described as follows. Each friend occupies a rectangle of pixels on the photo: the i-th of them in a standing state occupies a w_{i} pixels wide and a h_{i} pixels high rectangle. But also, each person can lie down for the photo, and then he will occupy a h_{i} pixels wide and a w_{i} pixels high rectangle.\nThe total photo will have size W \u00d7 H, where W is the total width of all the people rectangles, and H is the maximum of the heights. The friends want to determine what minimum area the group photo can they obtain if no more than n / 2 of them can lie on the ground (it would be strange if more than n / 2 gentlemen lie on the ground together, isn't it?..)\nHelp them to achieve this goal.\n-----Input-----\nThe first line contains integer n (1 \u2264 n \u2264 1000) \u2014 the number of friends.\nThe next n lines have two integers w_{i}, h_{i} (1 \u2264 w_{i}, h_{i} \u2264 1000) each, representing the size of the rectangle, corresponding to the i-th friend.\n-----Output-----\nPrint a single integer equal to the minimum possible area of the photo containing all friends if no more than n / 2 of them can lie on the ground.\n-----Examples-----\nInput\n3\n10 1\n20 2\n30 3\nOutput\n180\nInput\n3\n3 1\n2 2\n4 3\nOutput\n21\nInput\n1\n5 10\nOutput\n50\n\ndef",
        "answer": "def photo(n, w, h):\n    return (n * (w + h - 1)) // 2",
        "difficulty": "competition"
    },
    {
        "task_id": 3857,
        "prompt": "Complete the Python function given the prompt below:Fox Ciel has n boxes in her room. They have the same size and weight, but they might have different strength. The i-th box can hold at most x_{i} boxes on its top (we'll call x_{i} the strength of the box). \nSince all the boxes have the same size, Ciel cannot put more than one box directly on the top of some box. For example, imagine Ciel has three boxes: the first has strength 2, the second has strength 1 and the third has strength 1. She cannot put the second and the third box simultaneously directly on the top of the first one. But she can put the second box directly on the top of the first one, and then the third box directly on the top of the second one. We will call such a construction of boxes a pile.[Image]\nFox Ciel wants to construct piles from all the boxes. Each pile will contain some boxes from top to bottom, and there cannot be more than x_{i} boxes on the top of i-th box. What is the minimal number of piles she needs to construct?\n-----Input-----\nThe first line contains an integer n (1 \u2264 n \u2264 100). The next line contains n integers x_1, x_2,..., x_{n} (0 \u2264 x_{i} \u2264 100).\n-----Output-----\nOutput a single integer \u2014 the minimal possible number of piles.\n-----Examples-----\nInput\n3\n0 0 10\nOutput\n2\nInput\n5\n0 1 2 3 4\nOutput\n1\nInput\n4\n0 0 0 0\nOutput\n4\nInput\n9\n0 1 0 2 0 1 1 2 10\nOutput\n3\n-----Note-----\nIn example 1, one optimal way is to build 2 piles: the first pile contains boxes 1 and 3 (from top to bottom), the second pile contains only box 2.[Image]\nIn example 2, we can build only 1 pile that contains boxes 1, 2, 3, 4, 5 (from top to bottom).[Image]\n\ndef",
        "answer": "def solution(n, x):\n    # write your code in Python 2.7\n    # x = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    # n = 10\n    # x = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    # n = 10\n    # x = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    # n = 10\n    # x = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    # n = 10\n    # x = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    # n = 10\n    # x = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    # n = 10\n    # x = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    # n = 10\n    # x = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    # n = 10\n    # x = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    # n = 10\n    # x = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    # n = 10\n    # x = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    # n = 10\n    # x = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    # n = 10\n    # x = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    # n = 10\n    # x = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    # n = 10\n    # x = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    # n = 10\n    #",
        "difficulty": "competition"
    },
    {
        "task_id": 3858,
        "prompt": "Complete the Python function given the prompt below:You are given N points (x_i,y_i) located on a two-dimensional plane.\nConsider a subset S of the N points that forms a convex polygon.\nHere, we say a set of points S forms a convex polygon when there exists a convex polygon with a positive area that has the same set of vertices as S. All the interior angles of the polygon must be strictly less than 180\u00b0.\nFor example, in the figure above, {A,C,E} and {B,D,E} form convex polygons; {A,C,D,E}, {A,B,C,E}, {A,B,C}, {D,E} and {} do not.\nFor a given set S, let n be the number of the points among the N points that are inside the convex hull of S (including the boundary and vertices). Then, we will define the score of S as 2^{n-|S|}.\nCompute the scores of all possible sets S that form convex polygons, and find the sum of all those scores.\nHowever, since the sum can be extremely large, print the sum modulo 998244353.\n-----Constraints-----\n - 1\u2264N\u2264200\n - 0\u2264x_i,y_i<10^4 (1\u2264i\u2264N)\n - If i\u2260j, x_i\u2260x_j or y_i\u2260y_j.\n - x_i and y_i are integers.\n-----Input-----\nThe input is given from Standard Input in the following format:\nN\nx_1 y_1\nx_2 y_2\n:\nx_N y_N\n-----Output-----\nPrint the sum of all the scores modulo 998244353.\n-----Sample Input-----\n4\n0 0\n0 1\n1 0\n1 1\n-----Sample Output-----\n5\nWe have five possible sets as S, four sets that form triangles and one set that forms a square. Each of them has a score of 2^0=1, so the answer is 5.\n\ndef",
        "answer": "def convex_polygon(points):\n    # your code here\n    return 0",
        "difficulty": "competition"
    },
    {
        "task_id": 3859,
        "prompt": "Complete the Python function given the prompt below:There are 2N balls, N white and N black, arranged in a row. The integers from 1 through N are written on the white balls, one on each ball, and they are also written on the black balls, one on each ball.\nThe integer written on the i-th ball from the left (1 \u2264 i \u2264 2N) is a_i, and the color of this ball is represented by a letter c_i.\nc_i = W represents the ball is white; c_i = B represents the ball is black.\nTakahashi the human wants to achieve the following objective:\n - For every pair of integers (i,j) such that 1 \u2264 i < j \u2264 N, the white ball with i written on it is to the left of the white ball with j written on it.\n - For every pair of integers (i,j) such that 1 \u2264 i < j \u2264 N, the black ball with i written on it is to the left of the black ball with j written on it.\nIn order to achieve this, he can perform the following operation:\n - Swap two adjacent balls.\nFind the minimum number of operations required to achieve the objective.\n-----Constraints-----\n - 1 \u2264 N \u2264 2000\n - 1 \u2264 a_i \u2264 N\n - c_i = W or c_i = B.\n - If i \u2260 j, (a_i,c_i) \u2260 (a_j,c_j).\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nc_1 a_1\nc_2 a_2\n:\nc_{2N} a_{2N}\n-----Output-----\nPrint the minimum number of operations required to achieve the objective.\n-----Sample Input-----\n3\nB 1\nW 2\nB 3\nW 1\nW 3\nB 2\n-----Sample Output-----\n4\nThe objective can be achieved in four operations, for example, as follows:\n - Swap the black 3 and white 1.\n - Swap the white 1 and white 2.\n - Swap the black 3 and white 3.\n - Swap the black 3 and black 2.\n\ndef",
        "answer": "def solve(n):\n    # Write your code here\n    pass",
        "difficulty": "competition"
    },
    {
        "task_id": 3860,
        "prompt": "Complete the Python function given the prompt below:There are $b$ boys and $g$ girls participating in Olympiad of Metropolises. There will be a board games tournament in the evening and $n$ participants have accepted the invitation. The organizers do not know how many boys and girls are among them.\nOrganizers are preparing red badges for girls and blue ones for boys.\nVasya prepared $n+1$ decks of badges. The $i$-th (where $i$ is from $0$ to $n$, inclusive) deck contains $i$ blue badges and $n-i$ red ones. The total number of badges in any deck is exactly $n$.\nDetermine the minimum number of decks among these $n+1$ that Vasya should take, so that there will be a suitable deck no matter how many girls and boys there will be among the participants of the tournament.\n-----Input-----\nThe first line contains an integer $b$ ($1 \\le b \\le 300$), the number of boys. \nThe second line contains an integer $g$ ($1 \\le g \\le 300$), the number of girls. \nThe third line contains an integer $n$ ($1 \\le n \\le b + g$), the number of the board games tournament participants.\n-----Output-----\nOutput the only integer, the minimum number of badge decks that Vasya could take.\n-----Examples-----\nInput\n5\n6\n3\nOutput\n4\nInput\n5\n3\n5\nOutput\n4\n-----Note-----\nIn the first example, each of 4 decks should be taken: (0 blue, 3 red), (1 blue, 2 red), (2 blue, 1 red), (3 blue, 0 red).\nIn the second example, 4 decks should be taken: (2 blue, 3 red), (3 blue, 2 red), (4 blue, 1 red), (5 blue, 0 red). Piles (0 blue, 5 red) and (1 blue, 4 red) can not be used.\n\ndef",
        "answer": "def solve(b,g,n):\n\treturn b+g-n",
        "difficulty": "competition"
    },
    {
        "task_id": 3861,
        "prompt": "Complete the Python function given the prompt below:Given an array a_1, a_2,..., a_{n} of n integers, find the largest number in the array that is not a perfect square.\nA number x is said to be a perfect square if there exists an integer y such that x = y^2.\n-----Input-----\nThe first line contains a single integer n (1 \u2264 n \u2264 1000)\u00a0\u2014 the number of elements in the array.\nThe second line contains n integers a_1, a_2,..., a_{n} ( - 10^6 \u2264 a_{i} \u2264 10^6)\u00a0\u2014 the elements of the array.\nIt is guaranteed that at least one element of the array is not a perfect square.\n-----Output-----\nPrint the largest number in the array which is not a perfect square. It is guaranteed that an answer always exists.\n-----Examples-----\nInput\n2\n4 2\nOutput\n2\nInput\n8\n1 2 4 8 16 32 64 576\nOutput\n32\n-----Note-----\nIn the first sample case, 4 is a perfect square, so the largest number in the array that is not a perfect square is 2.\n\ndef",
        "answer": "def find_largest_non_perfect_square(a):\n    # Write your code here\n    max_num = 0\n    for num in a:\n        if num > max_num and is_perfect_square(num):\n            max_num = num\n    return max_num",
        "difficulty": "competition"
    },
    {
        "task_id": 3862,
        "prompt": "Complete the Python function given the prompt below:Sasha and Kolya decided to get drunk with Coke, again. This time they have k types of Coke. i-th type is characterised by its carbon dioxide concentration $\\frac{a_{i}}{1000}$. Today, on the party in honour of Sergiy of Vancouver they decided to prepare a glass of Coke with carbon dioxide concentration $\\frac{n}{1000}$. The drink should also be tasty, so the glass can contain only integer number of liters of each Coke type (some types can be not presented in the glass). Also, they want to minimize the total volume of Coke in the glass.\nCarbon dioxide concentration is defined as the volume of carbone dioxide in the Coke divided by the total volume of Coke. When you mix two Cokes, the volume of carbon dioxide sums up, and the total volume of Coke sums up as well.\nHelp them, find the minimal natural number of liters needed to create a glass with carbon dioxide concentration $\\frac{n}{1000}$. Assume that the friends have unlimited amount of each Coke type.\n-----Input-----\nThe first line contains two integers n, k (0 \u2264 n \u2264 1000, 1 \u2264 k \u2264 10^6)\u00a0\u2014 carbon dioxide concentration the friends want and the number of Coke types.\nThe second line contains k integers a_1, a_2,..., a_{k} (0 \u2264 a_{i} \u2264 1000)\u00a0\u2014 carbon dioxide concentration of each type of Coke. Some Coke types can have same concentration.\n-----Output-----\nPrint the minimal natural number of liter needed to prepare a glass with carbon dioxide concentration $\\frac{n}{1000}$, or -1 if it is impossible.\n-----Examples-----\nInput\n400 4\n100 300 450 500\nOutput\n2\nInput\n50 2\n100 25\nOutput\n3\n-----Note-----\nIn the first sample case, we can achieve concentration $\\frac{400}{1000}$ using one liter of Coke of types $\\frac{300}{1000}$ and $\\frac{500}{1000}$: $\\frac{300 + 500}{1000 + 1000} = \\frac{400}{1000}$.\nIn the second case, we can achieve concentration $\\frac{50}{1000}$ using two liters of $\\frac{25}{1000}$ type and one liter of $\\frac{100}{1000}$ type: $\\frac{25 + 25 + 100}{3 \\cdot 1000} = \\frac{50}{1000}$.\n\ndef",
        "answer": "def solution(a):\n    n = int(input())\n    k = int(input())\n    a = list(map(int, input().split()))\n    if n < sum(a):\n        return -1\n    else:\n        return sum(a) - n",
        "difficulty": "competition"
    },
    {
        "task_id": 3863,
        "prompt": "Complete the Python function given the prompt below:Takahashi and Aoki are going to together construct a sequence of integers.\nFirst, Takahashi will provide a sequence of integers a, satisfying all of the following conditions:\n - The length of a is N.\n - Each element in a is an integer between 1 and K, inclusive.\n - a is a palindrome, that is, reversing the order of elements in a will result in the same sequence as the original.\nThen, Aoki will perform the following operation an arbitrary number of times:\n - Move the first element in a to the end of a.\nHow many sequences a can be obtained after this procedure, modulo 10^9+7?\n-----Constraints-----\n - 1\u2264N\u226410^9\n - 1\u2264K\u226410^9\n-----Input-----\nThe input is given from Standard Input in the following format:\nN K\n-----Output-----\nPrint the number of the sequences a that can be obtained after the procedure, modulo 10^9+7.\n-----Sample Input-----\n4 2\n-----Sample Output-----\n6\nThe following six sequences can be obtained:\n - (1, 1, 1, 1)\n - (1, 1, 2, 2)\n - (1, 2, 2, 1)\n - (2, 2, 1, 1)\n - (2, 1, 1, 2)\n - (2, 2, 2, 2)\n\ndef",
        "answer": "def palindrome(n):\n    return str(n) == str(n)[::-1]",
        "difficulty": "competition"
    },
    {
        "task_id": 3864,
        "prompt": "Complete the Python function given the prompt below:Kuro and Shiro are playing with a board composed of n squares lining up in a row.\nThe squares are numbered 1 to n from left to right, and Square s has a mark on it.\nFirst, for each square, Kuro paints it black or white with equal probability, independently from other squares. Then, he puts on Square s a stone of the same color as the square.\nKuro and Shiro will play a game using this board and infinitely many black stones and white stones. In this game, Kuro and Shiro alternately put a stone as follows, with Kuro going first:\n - Choose an empty square adjacent to a square with a stone on it. Let us say Square i is chosen.\n - Put on Square i a stone of the same color as the square.\n - If there are squares other than Square i that contain a stone of the same color as the stone just placed, among such squares, let Square j be the one nearest to Square i. Change the color of every stone between Square i and Square j to the color of Square i.\nThe game ends when the board has no empty square.\nKuro plays optimally to maximize the number of black stones at the end of the game, while Shiro plays optimally to maximize the number of white stones at the end of the game.\nFor each of the cases s=1,\\dots,n, find the expected value, modulo 998244353, of the number of black stones at the end of the game.\n-----Notes-----\nWhen the expected value in question is represented as an irreducible fraction p/q, there uniquely exists an integer r such that rq=p ~(\\text{mod } 998244353) and 0 \\leq r \\lt 998244353, which we ask you to find.\n-----Constraints-----\n - 1 \\leq n \\leq 2\\times 10^5\n-----Input-----\nInput is given from Standard Input in the following format:\nn\n-----Output-----\nPrint n values.\nThe i-th value should be the expected value, modulo 998244353, of the number of black stones at the end of the game for the case s=i.\n-----Sample Input-----\n3\n-----Sample Output-----\n499122178\n499122178\n499122178\nLet us use b to represent a black square and w to represent a white square.\nThere are eight possible boards: www, wwb, wbw, wbb, bww, bwb, bbw, and bbb, which are chosen with equal probability.\nFor each of these boards, there will be 0, 1, 0, 2, 1, 3, 2, and 3 black stones at the end of the game, respectively, regardless of the value of s.\nThus, the expected number of stones is (0+1+0+2+1+3+2+3)/8 = 3/2, and the answer is r = 499122178, which satisfies 2r = 3 ~(\\text{mod } 998244353) and 0 \\leq r \\lt 998244353.\n\ndef",
        "answer": "def black_stones(n):\n    return (n*(n+1))//2",
        "difficulty": "competition"
    },
    {
        "task_id": 3865,
        "prompt": "Complete the Python function given the prompt below:A positive integer $a$ is given. Baron Munchausen claims that he knows such a positive integer $n$ that if one multiplies $n$ by $a$, the sum of its digits decreases $a$ times. In other words, $S(an) = S(n)/a$, where $S(x)$ denotes the sum of digits of the number $x$. \nFind out if what Baron told can be true.\n-----Input-----\nThe only line contains a single integer $a$ ($2 \\le a \\le 10^3$).\n-----Output-----\nIf there is no such number $n$, print $-1$.\nOtherwise print any appropriate positive integer $n$. Your number must not consist of more than $5\\cdot10^5$ digits. We can show that under given constraints either there is no answer, or there is an answer no longer than $5\\cdot10^5$ digits.\n-----Examples-----\nInput\n2\nOutput\n6\nInput\n3\nOutput\n6669\nInput\n10\nOutput\n-1\n\ndef",
        "answer": "def S(a):\n    s = 0\n    while a > 0:\n        s += a % 10\n        a //= 10\n    return s",
        "difficulty": "competition"
    },
    {
        "task_id": 3866,
        "prompt": "Complete the Python function given the prompt below:Bike is interested in permutations. A permutation of length n is an integer sequence such that each integer from 0 to (n - 1) appears exactly once in it. For example, [0, 2, 1] is a permutation of length 3 while both [0, 2, 2] and [1, 2, 3] is not.\nA permutation triple of permutations of length n (a, b, c) is called a Lucky Permutation Triple if and only if $\\forall i(1 \\leq i \\leq n), a_{i} + b_{i} \\equiv c_{i} \\operatorname{mod} n$. The sign a_{i} denotes the i-th element of permutation a. The modular equality described above denotes that the remainders after dividing a_{i} + b_{i} by n and dividing c_{i} by n are equal.\nNow, he has an integer n and wants to find a Lucky Permutation Triple. Could you please help him?\n-----Input-----\nThe first line contains a single integer n (1 \u2264 n \u2264 10^5).\n-----Output-----\nIf no Lucky Permutation Triple of length n exists print -1.\nOtherwise, you need to print three lines. Each line contains n space-seperated integers. The first line must contain permutation a, the second line \u2014 permutation b, the third \u2014 permutation c.\nIf there are multiple solutions, print any of them.\n-----Examples-----\nInput\n5\nOutput\n1 4 3 2 0\n1 0 2 4 3\n2 4 0 1 3\nInput\n2\nOutput\n-1\n-----Note-----\nIn Sample 1, the permutation triple ([1, 4, 3, 2, 0], [1, 0, 2, 4, 3], [2, 4, 0, 1, 3]) is Lucky Permutation Triple, as following holds:  $1 + 1 \\equiv 2 \\equiv 2 \\operatorname{mod} 5$;  $4 + 0 \\equiv 4 \\equiv 4 \\operatorname{mod} 5$;  $3 + 2 \\equiv 0 \\equiv 0 \\operatorname{mod} 5$;  $2 + 4 \\equiv 6 \\equiv 1 \\operatorname{mod} 5$;  $0 + 3 \\equiv 3 \\equiv 3 \\operatorname{mod} 5$. \nIn Sample 2, you can easily notice that no lucky permutation triple exists.\n\ndef",
        "answer": "def luckyPermutationTriplets(n):\n    # Write your code here\n    if n < 3:\n        return -1\n    a = [0] * n\n    b = [0] * n\n    c = [0] * n\n    for i in range(n):\n        a[i] = i\n        b[i] = i\n        c[i] = i\n    for i in range(1, n):\n        for j in range(i):\n            a[i] = (a[i] + j) % n\n            b[i] = (b[i] + j) % n\n            c[i] = (c[i] + j) % n\n            if a[i] == b[i] and b[i] == c[i]:\n                return 1\n    return 0",
        "difficulty": "competition"
    },
    {
        "task_id": 3867,
        "prompt": "Complete the Python function given the prompt below:The BFS algorithm is defined as follows.  Consider an undirected graph with vertices numbered from $1$ to $n$. Initialize $q$ as a new queue containing only vertex $1$, mark the vertex $1$ as used.  Extract a vertex $v$ from the head of the queue $q$.  Print the index of vertex $v$.  Iterate in arbitrary order through all such vertices $u$ that $u$ is a neighbor of $v$ and is not marked yet as used. Mark the vertex $u$ as used and insert it into the tail of the queue $q$.  If the queue is not empty, continue from step 2.  Otherwise finish. \nSince the order of choosing neighbors of each vertex can vary, it turns out that there may be multiple sequences which BFS can print.\nIn this problem you need to check whether a given sequence corresponds to some valid BFS traversal of the given tree starting from vertex $1$. The tree is an undirected graph, such that there is exactly one simple path between any two vertices.\n-----Input-----\nThe first line contains a single integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) which denotes the number of nodes in the tree. \nThe following $n - 1$ lines describe the edges of the tree. Each of them contains two integers $x$ and $y$ ($1 \\le x, y \\le n$)\u00a0\u2014 the endpoints of the corresponding edge of the tree. It is guaranteed that the given graph is a tree.\nThe last line contains $n$ distinct integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le n$)\u00a0\u2014 the sequence to check.\n-----Output-----\nPrint \"Yes\" (quotes for clarity) if the sequence corresponds to some valid BFS traversal of the given tree and \"No\" (quotes for clarity) otherwise.\nYou can print each letter in any case (upper or lower).\n-----Examples-----\nInput\n4\n1 2\n1 3\n2 4\n1 2 3 4\nOutput\nYes\nInput\n4\n1 2\n1 3\n2 4\n1 2 4 3\nOutput\nNo\n-----Note-----\nBoth sample tests have the same tree in them.\nIn this tree, there are two valid BFS orderings:   $1, 2, 3, 4$,  $1, 3, 2, 4$. \nThe ordering $1, 2, 4, 3$ doesn't correspond to any valid BFS order.\n\ndef",
        "answer": "def bfs(n, edges, sequence):\n    # Write your code here\n    pass",
        "difficulty": "competition"
    },
    {
        "task_id": 3868,
        "prompt": "Complete the Python function given the prompt below:Country of Metropolia is holding Olympiad of Metrpolises soon. It mean that all jury members of the olympiad should meet together in Metropolis (the capital of the country) for the problem preparation process.\nThere are n + 1 cities consecutively numbered from 0 to n. City 0 is Metropolis that is the meeting point for all jury members. For each city from 1 to n there is exactly one jury member living there. Olympiad preparation is a long and demanding process that requires k days of work. For all of these k days each of the n jury members should be present in Metropolis to be able to work on problems.\nYou know the flight schedule in the country (jury members consider themselves important enough to only use flights for transportation). All flights in Metropolia are either going to Metropolis or out of Metropolis. There are no night flights in Metropolia, or in the other words, plane always takes off at the same day it arrives. On his arrival day and departure day jury member is not able to discuss the olympiad. All flights in Megapolia depart and arrive at the same day.\nGather everybody for k days in the capital is a hard objective, doing that while spending the minimum possible money is even harder. Nevertheless, your task is to arrange the cheapest way to bring all of the jury members to Metrpolis, so that they can work together for k days and then send them back to their home cities. Cost of the arrangement is defined as a total cost of tickets for all used flights. It is allowed for jury member to stay in Metropolis for more than k days.\n-----Input-----\nThe first line of input contains three integers n, m and k (1 \u2264 n \u2264 10^5, 0 \u2264 m \u2264 10^5, 1 \u2264 k \u2264 10^6). \nThe i-th of the following m lines contains the description of the i-th flight defined by four integers d_{i}, f_{i}, t_{i} and c_{i} (1 \u2264 d_{i} \u2264 10^6, 0 \u2264 f_{i} \u2264 n, 0 \u2264 t_{i} \u2264 n, 1 \u2264 c_{i} \u2264 10^6, exactly one of f_{i} and t_{i} equals zero), the day of departure (and arrival), the departure city, the arrival city and the ticket cost.\n-----Output-----\nOutput the only integer that is the minimum cost of gathering all jury members in city 0 for k days and then sending them back to their home cities.\nIf it is impossible to gather everybody in Metropolis for k days and then send them back to their home cities, output \"-1\" (without the quotes).\n-----Examples-----\nInput\n2 6 5\n1 1 0 5000\n3 2 0 5500\n2 2 0 6000\n15 0 2 9000\n9 0 1 7000\n8 0 2 6500\nOutput\n24500\nInput\n2 4 5\n1 2 0 5000\n2 1 0 4500\n2 1 0 3000\n8 0 1 6000\nOutput\n-1\n-----Note-----\nThe optimal way to gather everybody in Metropolis in the first sample test is to use flights that take place on days 1, 2, 8 and 9. The only alternative option is to send jury member from second city back home on day 15, that would cost 2500 more.\nIn the second sample it is impossible to send jury member from city 2 back home from Metropolis.\n\ndef",
        "answer": "def olympiad(n, m, k):\n    # Write your code here\n    pass",
        "difficulty": "competition"
    },
    {
        "task_id": 3869,
        "prompt": "Complete the Python function given the prompt below:You are given two rectangles on a plane. The centers of both rectangles are located in the origin of coordinates (meaning the center of the rectangle's symmetry). The first rectangle's sides are parallel to the coordinate axes: the length of the side that is parallel to the Ox axis, equals w, the length of the side that is parallel to the Oy axis, equals h. The second rectangle can be obtained by rotating the first rectangle relative to the origin of coordinates by angle \u03b1. [Image] \nYour task is to find the area of the region which belongs to both given rectangles. This region is shaded in the picture.\n-----Input-----\nThe first line contains three integers w, h, \u03b1 (1 \u2264 w, h \u2264 10^6;\u00a00 \u2264 \u03b1 \u2264 180). Angle \u03b1 is given in degrees.\n-----Output-----\nIn a single line print a real number \u2014 the area of the region which belongs to both given rectangles.\nThe answer will be considered correct if its relative or absolute error doesn't exceed 10^{ - 6}.\n-----Examples-----\nInput\n1 1 45\nOutput\n0.828427125\nInput\n6 4 30\nOutput\n19.668384925\n-----Note-----\nThe second sample has been drawn on the picture above.\n\ndef",
        "answer": "def area(w, h, alpha):\n    return w * h * (1 - cos(alpha * pi / 180)) / 2",
        "difficulty": "competition"
    },
    {
        "task_id": 3870,
        "prompt": "Complete the Python function given the prompt below:Fox Ciel is playing a card game with her friend Jiro.\nJiro has n cards, each one has two attributes: position (Attack or Defense) and strength. Fox Ciel has m cards, each one has these two attributes too. It's known that position of all Ciel's cards is Attack.\nNow is Ciel's battle phase, Ciel can do the following operation many times:  Choose one of her cards X. This card mustn't be chosen before.  If Jiro has no alive cards at that moment, he gets the damage equal to (X's strength). Otherwise, Ciel needs to choose one Jiro's alive card Y, then:   If Y's position is Attack, then (X's strength)  \u2265  (Y's strength) must hold. After this attack, card Y dies, and Jiro gets the damage equal to (X's strength) - (Y's strength).  If Y's position is Defense, then (X's strength)  >  (Y's strength) must hold. After this attack, card Y dies, but Jiro gets no damage.  \nCiel can end her battle phase at any moment (so, she can use not all her cards). Help the Fox to calculate the maximal sum of damage Jiro can get.\n-----Input-----\nThe first line contains two integers n and m (1 \u2264 n, m \u2264 100) \u2014 the number of cards Jiro and Ciel have.\nEach of the next n lines contains a string position and an integer strength (0 \u2264 strength \u2264 8000) \u2014 the position and strength of Jiro's current card. Position is the string \"ATK\" for attack, and the string \"DEF\" for defense.\nEach of the next m lines contains an integer strength (0 \u2264 strength \u2264 8000) \u2014 the strength of Ciel's current card.\n-----Output-----\nOutput an integer: the maximal damage Jiro can get.\n-----Examples-----\nInput\n2 3\nATK 2000\nDEF 1700\n2500\n2500\n2500\nOutput\n3000\nInput\n3 4\nATK 10\nATK 100\nATK 1000\n1\n11\n101\n1001\nOutput\n992\nInput\n2 4\nDEF 0\nATK 0\n0\n0\n1\n1\nOutput\n1\n-----Note-----\nIn the first test case, Ciel has 3 cards with same strength. The best strategy is as follows. First she uses one of these 3 cards to attack \"ATK 2000\" card first, this attack destroys that card and Jiro gets 2500 - 2000 = 500 damage. Then she uses the second card to destroy the \"DEF 1700\" card. Jiro doesn't get damage that time. Now Jiro has no cards so she can use the third card to attack and Jiro gets 2500 damage. So the answer is 500 + 2500 = 3000.\nIn the second test case, she should use the \"1001\" card to attack the \"ATK 100\" card, then use the \"101\" card to attack the \"ATK 10\" card. Now Ciel still has cards but she can choose to end her battle phase. The total damage equals (1001 - 100) + (101 - 10) = 992.\nIn the third test case note that she can destroy the \"ATK 0\" card by a card with strength equal to 0, but she can't destroy a \"DEF 0\" card with that card.\n\ndef",
        "answer": "def fox_ciel_game(n, m):\n    cards = [Card(0, 0) for _ in range(n)]\n    for _ in range(n):\n        position, strength = input().split()\n        cards[_].position = position\n        cards[_].strength = int(strength)\n    for _ in range(m):\n        strength = int(input())\n        cards[0].strength -= strength\n    for _ in range(1, n):\n        cards[_].strength -= cards[0].strength\n    return max(cards[0].strength, cards[0].strength)",
        "difficulty": "competition"
    },
    {
        "task_id": 3871,
        "prompt": "Complete the Python function given the prompt below:A popular reality show is recruiting a new cast for the third season! $n$ candidates numbered from $1$ to $n$ have been interviewed. The candidate $i$ has aggressiveness level $l_i$, and recruiting this candidate will cost the show $s_i$ roubles.\nThe show host reviewes applications of all candidates from $i=1$ to $i=n$ by increasing of their indices, and for each of them she decides whether to recruit this candidate or not. If aggressiveness level of the candidate $i$ is strictly higher than that of any already accepted candidates, then the candidate $i$ will definitely be rejected. Otherwise the host may accept or reject this candidate at her own discretion. The host wants to choose the cast so that to maximize the total profit.\nThe show makes revenue as follows. For each aggressiveness level $v$ a corresponding profitability value $c_v$ is specified, which can be positive as well as negative. All recruited participants enter the stage one by one by increasing of their indices. When the participant $i$ enters the stage, events proceed as follows:\n  The show makes $c_{l_i}$ roubles, where $l_i$ is initial aggressiveness level of the participant $i$.  If there are two participants with the same aggressiveness level on stage, they immediately start a fight. The outcome of this is:\n  the defeated participant is hospitalized and leaves the show.  aggressiveness level of the victorious participant is increased by one, and the show makes $c_t$ roubles, where $t$ is the new aggressiveness level. \n The fights continue until all participants on stage have distinct aggressiveness levels. \nIt is allowed to select an empty set of participants (to choose neither of the candidates).\nThe host wants to recruit the cast so that the total profit is maximized. The profit is calculated as the total revenue from the events on stage, less the total expenses to recruit all accepted participants (that is, their total $s_i$). Help the host to make the show as profitable as possible.\n-----Input-----\nThe first line contains two integers $n$ and $m$ ($1 \\le n, m \\le 2000$) \u2014 the number of candidates and an upper bound for initial aggressiveness levels.\nThe second line contains $n$ integers $l_i$ ($1 \\le l_i \\le m$) \u2014 initial aggressiveness levels of all candidates.\nThe third line contains $n$ integers $s_i$ ($0 \\le s_i \\le 5000$) \u2014 the costs (in roubles) to recruit each of the candidates.\nThe fourth line contains $n + m$ integers $c_i$ ($|c_i| \\le 5000$) \u2014 profitability for each aggrressiveness level.\nIt is guaranteed that aggressiveness level of any participant can never exceed $n + m$ under given conditions.\n-----Output-----\nPrint a single integer\u00a0\u2014 the largest profit of the show.\n-----Examples-----\nInput\n5 4\n4 3 1 2 1\n1 2 1 2 1\n1 2 3 4 5 6 7 8 9\nOutput\n6\nInput\n2 2\n1 2\n0 0\n2 1 -100 -100\nOutput\n2\nInput\n5 4\n4 3 2 1 1\n0 2 6 7 4\n12 12 12 6 -3 -5 3 10 -4\nOutput\n62\n-----Note-----\nIn the first sample case it is optimal to recruit candidates $1, 2, 3, 5$. Then the show will pay $1 + 2 + 1 + 1 = 5$ roubles for recruitment. The events on stage will proceed as follows:\n  a participant with aggressiveness level $4$ enters the stage, the show makes $4$ roubles;  a participant with aggressiveness level $3$ enters the stage, the show makes $3$ roubles;  a participant with aggressiveness level $1$ enters the stage, the show makes $1$ rouble;  a participant with aggressiveness level $1$ enters the stage, the show makes $1$ roubles, a fight starts. One of the participants leaves, the other one increases his aggressiveness level to $2$. The show will make extra $2$ roubles for this. \nTotal revenue of the show will be $4 + 3 + 1 + 1 + 2=11$ roubles, and the profit is $11 - 5 = 6$ roubles.\nIn the second sample case it is impossible to recruit both candidates since the second one has higher aggressiveness, thus it is better to recruit the candidate $1$.\n\ndef",
        "answer": "def maxProfit(n, m, l, s, c):\n    # Write your code here\n    pass",
        "difficulty": "competition"
    },
    {
        "task_id": 3872,
        "prompt": "Complete the Python function given the prompt below:Today on a lecture about strings Gerald learned a new definition of string equivalency. Two strings a and b of equal length are called equivalent in one of the two cases:   They are equal.  If we split string a into two halves of the same size a_1 and a_2, and string b into two halves of the same size b_1 and b_2, then one of the following is correct:   a_1 is equivalent to b_1, and a_2 is equivalent to b_2  a_1 is equivalent to b_2, and a_2 is equivalent to b_1  \nAs a home task, the teacher gave two strings to his students and asked to determine if they are equivalent.\nGerald has already completed this home task. Now it's your turn!\n-----Input-----\nThe first two lines of the input contain two strings given by the teacher. Each of them has the length from 1 to 200 000 and consists of lowercase English letters. The strings have the same length.\n-----Output-----\nPrint \"YES\" (without the quotes), if these two strings are equivalent, and \"NO\" (without the quotes) otherwise.\n-----Examples-----\nInput\naaba\nabaa\nOutput\nYES\nInput\naabb\nabab\nOutput\nNO\n-----Note-----\nIn the first sample you should split the first string into strings \"aa\" and \"ba\", the second one \u2014 into strings \"ab\" and \"aa\". \"aa\" is equivalent to \"aa\"; \"ab\" is equivalent to \"ba\" as \"ab\" = \"a\" + \"b\", \"ba\" = \"b\" + \"a\".\nIn the second sample the first string can be splitted into strings \"aa\" and \"bb\", that are equivalent only to themselves. That's why string \"aabb\" is equivalent only to itself and to string \"bbaa\".\n\ndef",
        "answer": "def solution(a, b):\n    if len(a)!= len(b):\n        return \"NO\"\n    else:\n        a_1 = a[:len(a)//2]\n        a_2 = a[len(a)//2:]\n        b_1 = b[:len(b)//2]\n        b_2 = b[len(b)//2:]\n        if a_1 == b_1 and a_2 == b_2:\n            return \"YES\"\n        else:\n            return \"NO\"",
        "difficulty": "competition"
    },
    {
        "task_id": 3873,
        "prompt": "Complete the Python function given the prompt below:Seyyed and MoJaK are friends of Sajjad. Sajjad likes a permutation. Seyyed wants to change the permutation in a way that Sajjad won't like it. Seyyed thinks more swaps yield more probability to do that, so he makes MoJaK to perform a swap between every pair of positions (i, j), where i < j, exactly once. MoJaK doesn't like to upset Sajjad.\nGiven the permutation, determine whether it is possible to swap all pairs of positions so that the permutation stays the same. If it is possible find how to do that. \n-----Input-----\nThe first line contains single integer n (1 \u2264 n \u2264 1000)\u00a0\u2014 the size of the permutation.\nAs the permutation is not important, you can consider a_{i} = i, where the permutation is a_1, a_2,..., a_{n}.\n-----Output-----\nIf it is not possible to swap all pairs of positions so that the permutation stays the same, print \"NO\",\nOtherwise print \"YES\", then print $\\frac{n(n - 1)}{2}$ lines: the i-th of these lines should contain two integers a and b (a < b)\u00a0\u2014 the positions where the i-th swap is performed.\n-----Examples-----\nInput\n3\nOutput\nNO\nInput\n1\nOutput\nYES\n\ndef",
        "answer": "def permutation(n):\n    if n == 1:\n        return 1\n    else:\n        return n * permutation(n - 1)",
        "difficulty": "competition"
    },
    {
        "task_id": 3874,
        "prompt": "Complete the Python function given the prompt below:Polycarp is a beginner programmer. He is studying how to use a command line.\nPolycarp faced the following problem. There are n files in a directory and he needs to delete some of them. Polycarp wants to run a single delete command with filename pattern as an argument. All the files to be deleted should match the pattern and all other files shouldn't match the pattern.\nPolycarp doesn't know about an asterisk '*', the only special character he knows is a question mark '?' which matches any single character. All other characters in the pattern match themselves only.\nFormally, a pattern matches a filename if and only if they have equal lengths and all characters in the corresponding positions are equal except when the character in the pattern is '?', in which case the corresponding filename character does not matter.\nFor example, the filename pattern \"a?ba?\":  matches filenames \"aabaa\", \"abba.\", \"a.ba9\" and \"a.ba.\";  does not match filenames \"aaba\", \"abaab\", \"aabaaa\" and \"aabaa.\". \nHelp Polycarp find a pattern which matches files to be deleted and only them or report if there is no such pattern.\n-----Input-----\nThe first line of the input contains two integers n and m (1 \u2264 m \u2264 n \u2264 100) \u2014 the total number of files and the number of files to be deleted.\nThe following n lines contain filenames, single filename per line. All filenames are non-empty strings containing only lowercase English letters, digits and dots ('.'). The length of each filename doesn't exceed 100. It is guaranteed that all filenames are distinct.\nThe last line of the input contains m distinct integer numbers in ascending order a_1, a_2,..., a_{m} (1 \u2264 a_{i} \u2264 n) \u2014 indices of files to be deleted. All files are indexed from 1 to n in order of their appearance in the input.\n-----Output-----\nIf the required pattern exists, print \"Yes\" in the first line of the output. The second line should contain the required pattern. If there are multiple solutions, print any of them.\nIf the required pattern doesn't exist, print the only line containing \"No\".\n-----Examples-----\nInput\n3 2\nab\nac\ncd\n1 2\nOutput\nYes\na?\nInput\n5 3\ntest\ntezt\ntest.\n.est\ntes.\n1 4 5\nOutput\nYes\n?es?\nInput\n4 4\na\nb\nc\ndd\n1 2 3 4\nOutput\nNo\nInput\n6 3\n.svn\n.git\n....\n...\n..\n.\n1 2 3\nOutput\nYes\n.???\n\ndef",
        "answer": "def delete_files(n, m, files):\n    pattern = '*'\n    for i in range(m):\n        pattern += '?'\n    pattern += '*'\n    pattern = pattern.replace('?', '.')\n    pattern = pattern.replace('*', '.*')\n    pattern = pattern.replace('?', '.')\n    pattern = pattern.replace('*', '.*')\n    pattern = pattern.replace('?', '.')\n    pattern = pattern.replace('*', '.*')\n    pattern = pattern.replace('?', '.')\n    pattern = pattern.replace('*', '.*')\n    pattern = pattern.replace('?', '.')\n    pattern = pattern.replace('*', '.*')\n    pattern = pattern.replace('?', '.')\n    pattern = pattern.replace('*', '.*')\n    pattern = pattern.replace('?', '.')\n    pattern = pattern.replace('*', '.*')\n    pattern = pattern.replace('?', '.')\n    pattern = pattern.replace('*', '.*')\n    pattern = pattern.replace('?', '.')\n    pattern = pattern.replace('*', '.*')\n    pattern = pattern.replace('?', '.')\n    pattern = pattern.replace('*', '.*')\n    pattern = pattern.replace('?', '.')\n    pattern = pattern.replace('*', '.*')\n    pattern = pattern.replace('?', '.')\n    pattern = pattern.replace('*', '.*')\n    pattern = pattern.replace('?', '.')\n    pattern = pattern.replace('*', '.*')\n    pattern = pattern.replace('?', '.')\n    pattern = pattern.replace('*', '.*')\n    pattern = pattern.replace('?', '.')\n    pattern = pattern.replace('*', '.*')\n    pattern = pattern.replace('?', '.')\n    pattern = pattern.replace('*', '.*')\n    pattern = pattern.replace('?', '.')\n    pattern = pattern.replace('*', '.*')\n    pattern = pattern.replace('?', '.')\n    pattern = pattern.",
        "difficulty": "competition"
    },
    {
        "task_id": 3875,
        "prompt": "Complete the Python function given the prompt below:Given is an integer sequence of length N: A_1, A_2, \\cdots, A_N.\nAn integer sequence X, which is also of length N, will be chosen randomly by independently choosing X_i from a uniform distribution on the integers 1, 2, \\ldots, A_i for each i (1 \\leq i \\leq N).\nCompute the expected value of the length of the longest increasing subsequence of this sequence X, modulo 1000000007.\nMore formally, under the constraints of the problem, we can prove that the expected value can be represented as a rational number, that is, an irreducible fraction \\frac{P}{Q}, and there uniquely exists an integer R such that R \\times Q \\equiv P \\pmod {1000000007} and 0 \\leq R < 1000000007, so print this integer R.\n-----Notes-----\nA subsequence of a sequence X is a sequence obtained by extracting some of the elements of X and arrange them without changing the order. The longest increasing subsequence of a sequence X is the sequence of the greatest length among the strictly increasing subsequences of X.\n-----Constraints-----\n - 1 \\leq N \\leq 6\n - 1 \\leq A_i \\leq 10^9\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nA_1 A_2 \\cdots A_N\n-----Output-----\nPrint the expected value modulo 1000000007.\n-----Sample Input-----\n3\n1 2 3\n-----Sample Output-----\n2\nX becomes one of the following, with probability 1/6 for each:\n - X = (1,1,1), for which the length of the longest increasing subsequence is 1;\n - X = (1,1,2), for which the length of the longest increasing subsequence is 2;\n - X = (1,1,3), for which the length of the longest increasing subsequence is 2;\n - X = (1,2,1), for which the length of the longest increasing subsequence is 2;\n - X = (1,2,2), for which the length of the longest increasing subsequence is 2;\n - X = (1,2,3), for which the length of the longest increasing subsequence is 3.\nThus, the expected value of the length of the longest increasing subsequence is (1 + 2 + 2 + 2 + 2 + 3) / 6 \\equiv 2 \\pmod {1000000007}.\n\ndef",
        "answer": "def longest_increasing_subsequence(n, a):\n    # Write your code here\n    pass",
        "difficulty": "competition"
    },
    {
        "task_id": 3876,
        "prompt": "Complete the Python function given the prompt below:Let N be an even number.\nThere is a tree with N vertices.\nThe vertices are numbered 1, 2,..., N.\nFor each i (1 \\leq i \\leq N - 1), the i-th edge connects Vertex x_i and y_i.\nSnuke would like to decorate the tree with ribbons, as follows.\nFirst, he will divide the N vertices into N / 2 pairs.\nHere, each vertex must belong to exactly one pair.\nThen, for each pair (u, v), put a ribbon through all the edges contained in the shortest path between u and v.\nSnuke is trying to divide the vertices into pairs so that the following condition is satisfied: \"for every edge, there is at least one ribbon going through it.\"\nHow many ways are there to divide the vertices into pairs, satisfying this condition?\nFind the count modulo 10^9 + 7.\nHere, two ways to divide the vertices into pairs are considered different when there is a pair that is contained in one of the two ways but not in the other.\n-----Constraints-----\n - N is an even number.\n - 2 \\leq N \\leq 5000\n - 1 \\leq x_i, y_i \\leq N\n - The given graph is a tree.\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nx_1 y_1\nx_2 y_2\n:\nx_{N - 1} y_{N - 1}\n-----Output-----\nPrint the number of the ways to divide the vertices into pairs, satisfying the condition, modulo 10^9 + 7.\n-----Sample Input-----\n4\n1 2\n2 3\n3 4\n-----Sample Output-----\n2\nThere are three possible ways to divide the vertices into pairs, as shown below, and two satisfy the condition: the middle one and the right one.\n\ndef",
        "answer": "def count_ribbons(N):\n    # Write your code here\n    pass",
        "difficulty": "competition"
    },
    {
        "task_id": 3877,
        "prompt": "Complete the Python function given the prompt below:Jon fought bravely to rescue the wildlings who were attacked by the white-walkers at Hardhome. On his arrival, Sam tells him that he wants to go to Oldtown to train at the Citadel to become a maester, so he can return and take the deceased Aemon's place as maester of Castle Black. Jon agrees to Sam's proposal and Sam sets off his journey to the Citadel. However becoming a trainee at the Citadel is not a cakewalk and hence the maesters at the Citadel gave Sam a problem to test his eligibility. \nInitially Sam has a list with a single element n. Then he has to perform certain operations on this list. In each operation Sam must remove any element x, such that x > 1, from the list and insert at the same position $\\lfloor \\frac{x}{2} \\rfloor$, $x \\operatorname{mod} 2$, $\\lfloor \\frac{x}{2} \\rfloor$ sequentially. He must continue with these operations until all the elements in the list are either 0 or 1.\nNow the masters want the total number of 1s in the range l to r (1-indexed). Sam wants to become a maester but unfortunately he cannot solve this problem. Can you help Sam to pass the eligibility test?\n-----Input-----\nThe first line contains three integers n, l, r (0 \u2264 n < 2^50, 0 \u2264 r - l \u2264 10^5, r \u2265 1, l \u2265 1) \u2013 initial element and the range l to r.\nIt is guaranteed that r is not greater than the length of the final list.\n-----Output-----\nOutput the total number of 1s in the range l to r in the final sequence.\n-----Examples-----\nInput\n7 2 5\nOutput\n4\nInput\n10 3 10\nOutput\n5\n-----Note-----\nConsider first example:\n$[ 7 ] \\rightarrow [ 3,1,3 ] \\rightarrow [ 1,1,1,1,3 ] \\rightarrow [ 1,1,1,1,1,1,1 ] \\rightarrow [ 1,1,1,1,1,1,1 ]$\nElements on positions from 2-nd to 5-th in list is [1, 1, 1, 1]. The number of ones is 4.\nFor the second example:\n$[ 10 ] \\rightarrow [ 1,0,1,1,1,0,1,0,1,0,1,1,1,0,1 ]$\nElements on positions from 3-rd to 10-th in list is [1, 1, 1, 0, 1, 0, 1, 0]. The number of ones is 5.\n\ndef",
        "answer": "def solve(n, l, r):\n    # Write your code here\n    pass",
        "difficulty": "competition"
    },
    {
        "task_id": 3878,
        "prompt": "Complete the Python function given the prompt below:Arseny likes to organize parties and invite people to it. However, not only friends come to his parties, but friends of his friends, friends of friends of his friends and so on. That's why some of Arseny's guests can be unknown to him. He decided to fix this issue using the following procedure.\nAt each step he selects one of his guests A, who pairwise introduces all of his friends to each other. After this action any two friends of A become friends. This process is run until all pairs of guests are friends.\nArseny doesn't want to spend much time doing it, so he wants to finish this process using the minimum number of steps. Help Arseny to do it.\n-----Input-----\nThe first line contains two integers n and m (1 \u2264 n \u2264 22; $0 \\leq m \\leq \\frac{n \\cdot(n - 1)}{2}$)\u00a0\u2014 the number of guests at the party (including Arseny) and the number of pairs of people which are friends.\nEach of the next m lines contains two integers u and v (1 \u2264 u, v \u2264 n; u \u2260 v), which means that people with numbers u and v are friends initially. It's guaranteed that each pair of friends is described not more than once and the graph of friendship is connected.\n-----Output-----\nIn the first line print the minimum number of steps required to make all pairs of guests friends.\nIn the second line print the ids of guests, who are selected at each step.\nIf there are multiple solutions, you can output any of them.\n-----Examples-----\nInput\n5 6\n1 2\n1 3\n2 3\n2 5\n3 4\n4 5\nOutput\n2\n2 3 \nInput\n4 4\n1 2\n1 3\n1 4\n3 4\nOutput\n1\n1 \n-----Note-----\nIn the first test case there is no guest who is friend of all other guests, so at least two steps are required to perform the task. After second guest pairwise introduces all his friends, only pairs of guests (4, 1) and (4, 2) are not friends. Guest 3 or 5 can introduce them.\nIn the second test case guest number 1 is a friend of all guests, so he can pairwise introduce all guests in one step.\n\ndef",
        "answer": "def find_friends(n, m):\n    friends = [set() for _ in range(n)]\n    for _ in range(m):\n        u, v = map(int, input().split())\n        friends[u - 1].add(v - 1)\n        friends[v - 1].add(u - 1)\n    visited = [False] * n\n    visited[0] = True\n    steps = 0\n    while not all(visited):\n        steps += 1\n        for i in range(n):\n            if not visited[i]:\n                visited[i] = True\n                for friend in friends[i]:\n                    if not visited[friend]:\n                        visited[friend] = True\n    return steps",
        "difficulty": "competition"
    },
    {
        "task_id": 3879,
        "prompt": "Complete the Python function given the prompt below:Limak is an old brown bear. He often plays poker with his friends. Today they went to a casino. There are n players (including Limak himself) and right now all of them have bids on the table. i-th of them has bid with size a_{i} dollars.\nEach player can double his bid any number of times and triple his bid any number of times. The casino has a great jackpot for making all bids equal. Is it possible that Limak and his friends will win a jackpot?\n-----Input-----\nFirst line of input contains an integer n (2 \u2264 n \u2264 10^5), the number of players.\nThe second line contains n integer numbers a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 10^9) \u2014 the bids of players.\n-----Output-----\nPrint \"Yes\" (without the quotes) if players can make their bids become equal, or \"No\" otherwise.\n-----Examples-----\nInput\n4\n75 150 75 50\nOutput\nYes\nInput\n3\n100 150 250\nOutput\nNo\n-----Note-----\nIn the first sample test first and third players should double their bids twice, second player should double his bid once and fourth player should both double and triple his bid.\nIt can be shown that in the second sample test there is no way to make all bids equal.\n\ndef",
        "answer": "def solve():\n    n = int(input())\n    bids = list(map(int, input().split()))\n    if bids.count(bids[0]) == n:\n        print(\"Yes\")\n    else:\n        print(\"No\")",
        "difficulty": "competition"
    },
    {
        "task_id": 3880,
        "prompt": "Complete the Python function given the prompt below:Yaroslav has an array, consisting of (2\u00b7n - 1) integers. In a single operation Yaroslav can change the sign of exactly n elements in the array. In other words, in one operation Yaroslav can select exactly n array elements, and multiply each of them by -1.\nYaroslav is now wondering: what maximum sum of array elements can be obtained if it is allowed to perform any number of described operations?\nHelp Yaroslav.\n-----Input-----\nThe first line contains an integer n (2 \u2264 n \u2264 100). The second line contains (2\u00b7n - 1) integers \u2014 the array elements. The array elements do not exceed 1000 in their absolute value.\n-----Output-----\nIn a single line print the answer to the problem \u2014 the maximum sum that Yaroslav can get.\n-----Examples-----\nInput\n2\n50 50 50\nOutput\n150\nInput\n2\n-1 -100 -1\nOutput\n100\n-----Note-----\nIn the first sample you do not need to change anything. The sum of elements equals 150.\nIn the second sample you need to change the sign of the first two elements. Then we get the sum of the elements equal to 100.\n\ndef",
        "answer": "def solution(n, arr):\n    return sum(arr)",
        "difficulty": "competition"
    },
    {
        "task_id": 3881,
        "prompt": "Complete the Python function given the prompt below:Limak is a little polar bear. Polar bears hate long strings and thus they like to compress them. You should also know that Limak is so young that he knows only first six letters of the English alphabet: 'a', 'b', 'c', 'd', 'e' and 'f'.\nYou are given a set of q possible operations. Limak can perform them in any order, any operation may be applied any number of times. The i-th operation is described by a string a_{i} of length two and a string b_{i} of length one. No two of q possible operations have the same string a_{i}.\nWhen Limak has a string s he can perform the i-th operation on s if the first two letters of s match a two-letter string a_{i}. Performing the i-th operation removes first two letters of s and inserts there a string b_{i}. See the notes section for further clarification.\nYou may note that performing an operation decreases the length of a string s exactly by 1. Also, for some sets of operations there may be a string that cannot be compressed any further, because the first two letters don't match any a_{i}.\nLimak wants to start with a string of length n and perform n - 1 operations to finally get a one-letter string \"a\". In how many ways can he choose the starting string to be able to get \"a\"? Remember that Limak can use only letters he knows.\n-----Input-----\nThe first line contains two integers n and q (2 \u2264 n \u2264 6, 1 \u2264 q \u2264 36)\u00a0\u2014 the length of the initial string and the number of available operations.\nThe next q lines describe the possible operations. The i-th of them contains two strings a_{i} and b_{i} (|a_{i}| = 2, |b_{i}| = 1). It's guaranteed that a_{i} \u2260 a_{j} for i \u2260 j and that all a_{i} and b_{i} consist of only first six lowercase English letters.\n-----Output-----\nPrint the number of strings of length n that Limak will be able to transform to string \"a\" by applying only operations given in the input.\n-----Examples-----\nInput\n3 5\nab a\ncc c\nca a\nee c\nff d\nOutput\n4\nInput\n2 8\naf e\ndc d\ncc f\nbc b\nda b\neb a\nbb b\nff c\nOutput\n1\nInput\n6 2\nbb a\nba a\nOutput\n0\n-----Note-----\nIn the first sample, we count initial strings of length 3 from which Limak can get a required string \"a\". There are 4 such strings: \"abb\", \"cab\", \"cca\", \"eea\". The first one Limak can compress using operation 1 two times (changing \"ab\" to a single \"a\"). The first operation would change \"abb\" to \"ab\" and the second operation would change \"ab\" to \"a\".\nOther three strings may be compressed as follows:   \"cab\" $\\rightarrow$ \"ab\" $\\rightarrow$ \"a\"  \"cca\" $\\rightarrow$ \"ca\" $\\rightarrow$ \"a\"  \"eea\" $\\rightarrow$ \"ca\" $\\rightarrow$ \"a\" \nIn the second sample, the only correct initial string is \"eb\" because it can be immediately compressed to \"a\".\n\ndef",
        "answer": "def solution(n, q):\n    return 0",
        "difficulty": "competition"
    },
    {
        "task_id": 3882,
        "prompt": "Complete the Python function given the prompt below:Little Johnny has recently learned about set theory. Now he is studying binary relations. You've probably heard the term \"equivalence relation\". These relations are very important in many areas of mathematics. For example, the equality of the two numbers is an equivalence relation.\nA set \u03c1 of pairs (a, b) of elements of some set A is called a binary relation on set A. For two elements a and b of the set A we say that they are in relation \u03c1, if pair $(a, b) \\in \\rho$, in this case we use a notation $a \\stackrel{\\rho}{\\sim} b$.\nBinary relation is equivalence relation, if: It is reflexive (for any a it is true that $a \\stackrel{\\rho}{\\sim} a$); It is symmetric (for any a, b it is true that if $a \\stackrel{\\rho}{\\sim} b$, then $b \\stackrel{\\rho}{\\sim} a$); It is transitive (if $a \\stackrel{\\rho}{\\sim} b$ and $b \\stackrel{\\rho}{\\sim} c$, than $a \\stackrel{\\rho}{\\sim} c$).\nLittle Johnny is not completely a fool and he noticed that the first condition is not necessary! Here is his \"proof\":\nTake any two elements, a and b. If $a \\stackrel{\\rho}{\\sim} b$, then $b \\stackrel{\\rho}{\\sim} a$ (according to property (2)), which means $a \\stackrel{\\rho}{\\sim} a$ (according to property (3)).\nIt's very simple, isn't it? However, you noticed that Johnny's \"proof\" is wrong, and decided to show him a lot of examples that prove him wrong.\nHere's your task: count the number of binary relations over a set of size n such that they are symmetric, transitive, but not an equivalence relations (i.e. they are not reflexive).\nSince their number may be very large (not 0, according to Little Johnny), print the remainder of integer division of this number by 10^9 + 7.\n-----Input-----\nA single line contains a single integer n (1 \u2264 n \u2264 4000).\n-----Output-----\nIn a single line print the answer to the problem modulo 10^9 + 7.\n-----Examples-----\nInput\n1\nOutput\n1\nInput\n2\nOutput\n3\nInput\n3\nOutput\n10\n-----Note-----\nIf n = 1 there is only one such relation\u00a0\u2014 an empty one, i.e. $\\rho = \\varnothing$. In other words, for a single element x of set A the following is hold: [Image].\nIf n = 2 there are three such relations. Let's assume that set A consists of two elements, x and y. Then the valid relations are $\\rho = \\varnothing$, \u03c1 = {(x, x)}, \u03c1 = {(y, y)}. It is easy to see that the three listed binary relations are symmetric and transitive relations, but they are not equivalence relations.\n\ndef",
        "answer": "def binary_relations(n):\n    # your code here\n    return",
        "difficulty": "competition"
    },
    {
        "task_id": 3883,
        "prompt": "Complete the Python function given the prompt below:There is a polyline going through points (0, 0) \u2013 (x, x) \u2013 (2x, 0) \u2013 (3x, x) \u2013 (4x, 0) \u2013... - (2kx, 0) \u2013 (2kx + x, x) \u2013.... \nWe know that the polyline passes through the point (a, b). Find minimum positive value x such that it is true or determine that there is no such x.\n-----Input-----\nOnly one line containing two positive integers a and b (1 \u2264 a, b \u2264 10^9).\n-----Output-----\nOutput the only line containing the answer. Your answer will be considered correct if its relative or absolute error doesn't exceed 10^{ - 9}. If there is no such x then output  - 1 as the answer.\n-----Examples-----\nInput\n3 1\nOutput\n1.000000000000\nInput\n1 3\nOutput\n-1\nInput\n4 1\nOutput\n1.250000000000\n-----Note-----\nYou can see following graphs for sample 1 and sample 3.  [Image]  [Image]\n\ndef",
        "answer": "def minimum_x(a, b):\n    # your code here\n    return -1",
        "difficulty": "competition"
    },
    {
        "task_id": 3884,
        "prompt": "Complete the Python function given the prompt below:Natasha is going to fly on a rocket to Mars and return to Earth. Also, on the way to Mars, she will land on $n - 2$ intermediate planets. Formally: we number all the planets from $1$ to $n$. $1$ is Earth, $n$ is Mars. Natasha will make exactly $n$ flights: $1 \\to 2 \\to \\ldots n \\to 1$.\nFlight from $x$ to $y$ consists of two phases: take-off from planet $x$ and landing to planet $y$. This way, the overall itinerary of the trip will be: the $1$-st planet $\\to$ take-off from the $1$-st planet $\\to$ landing to the $2$-nd planet $\\to$ $2$-nd planet $\\to$ take-off from the $2$-nd planet $\\to$ $\\ldots$ $\\to$ landing to the $n$-th planet $\\to$ the $n$-th planet $\\to$ take-off from the $n$-th planet $\\to$ landing to the $1$-st planet $\\to$ the $1$-st planet.\nThe mass of the rocket together with all the useful cargo (but without fuel) is $m$ tons. However, Natasha does not know how much fuel to load into the rocket. Unfortunately, fuel can only be loaded on Earth, so if the rocket runs out of fuel on some other planet, Natasha will not be able to return home. Fuel is needed to take-off from each planet and to land to each planet. It is known that $1$ ton of fuel can lift off $a_i$ tons of rocket from the $i$-th planet or to land $b_i$ tons of rocket onto the $i$-th planet. \nFor example, if the weight of rocket is $9$ tons, weight of fuel is $3$ tons and take-off coefficient is $8$ ($a_i = 8$), then $1.5$ tons of fuel will be burnt (since $1.5 \\cdot 8 = 9 + 3$). The new weight of fuel after take-off will be $1.5$ tons. \nPlease note, that it is allowed to burn non-integral amount of fuel during take-off or landing, and the amount of initial fuel can be non-integral as well.\nHelp Natasha to calculate the minimum mass of fuel to load into the rocket. Note, that the rocket must spend fuel to carry both useful cargo and the fuel itself. However, it doesn't need to carry the fuel which has already been burnt. Assume, that the rocket takes off and lands instantly.\n-----Input-----\nThe first line contains a single integer $n$ ($2 \\le n \\le 1000$)\u00a0\u2014 number of planets.\nThe second line contains the only integer $m$ ($1 \\le m \\le 1000$)\u00a0\u2014 weight of the payload.\nThe third line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 1000$), where $a_i$ is the number of tons, which can be lifted off by one ton of fuel.\nThe fourth line contains $n$ integers $b_1, b_2, \\ldots, b_n$ ($1 \\le b_i \\le 1000$), where $b_i$ is the number of tons, which can be landed by one ton of fuel. \nIt is guaranteed, that if Natasha can make a flight, then it takes no more than $10^9$ tons of fuel.\n-----Output-----\nIf Natasha can fly to Mars through $(n - 2)$ planets and return to Earth, print the minimum mass of fuel (in tons) that Natasha should take. Otherwise, print a single number $-1$.\nIt is guaranteed, that if Natasha can make a flight, then it takes no more than $10^9$ tons of fuel.\nThe answer will be considered correct if its absolute or relative error doesn't exceed $10^{-6}$. Formally, let your answer be $p$, and the jury's answer be $q$. Your answer is considered correct if $\\frac{|p - q|}{\\max{(1, |q|)}} \\le 10^{-6}$.\n-----Examples-----\nInput\n2\n12\n11 8\n7 5\nOutput\n10.0000000000\nInput\n3\n1\n1 4 1\n2 5 3\nOutput\n-1\nInput\n6\n2\n4 6 3 3 5 6\n2 6 3 6 5 3\nOutput\n85.4800000000\n-----Note-----\nLet's consider the first example.\nInitially, the mass of a rocket with fuel is $22$ tons. At take-off from Earth one ton of fuel can lift off $11$ tons of cargo, so to lift off $22$ tons you need to burn $2$ tons of fuel. Remaining weight of the rocket with fuel is $20$ tons. During landing on Mars, one ton of fuel can land $5$ tons of cargo, so for landing $20$ tons you will need to burn $4$ tons of fuel. There will be $16$ tons of the rocket with fuel remaining. While taking off from Mars, one ton of fuel can raise $8$ tons of cargo, so to lift off $16$ tons you will need to burn $2$ tons of fuel. There will be $14$ tons of rocket with fuel after that. During landing on Earth, one ton of fuel can land $7$ tons of cargo, so for landing $14$ tons you will need to burn $2$ tons of fuel. Remaining weight is $12$ tons, that is, a rocket without any fuel.\nIn the second case, the rocket will not be able even to take off from Earth.\n\ndef",
        "answer": "def solution(n, m, a, b):\n    fuel = 0\n    for i in range(n - 2):\n        fuel += a[i]\n        fuel -= b[i]\n    if fuel > m:\n        return -1\n    return m - fuel",
        "difficulty": "competition"
    },
    {
        "task_id": 3885,
        "prompt": "Complete the Python function given the prompt below:A few years ago Sajjad left his school and register to another one due to security reasons. Now he wishes to find Amir, one of his schoolmates and good friends.\nThere are n schools numerated from 1 to n. One can travel between each pair of them, to do so, he needs to buy a ticket. The ticker between schools i and j costs $(i + j) \\operatorname{mod}(n + 1)$ and can be used multiple times. Help Sajjad to find the minimum cost he needs to pay for tickets to visit all schools. He can start and finish in any school.\n-----Input-----\nThe first line contains a single integer n (1 \u2264 n \u2264 10^5)\u00a0\u2014 the number of schools.\n-----Output-----\nPrint single integer: the minimum cost of tickets needed to visit all schools.\n-----Examples-----\nInput\n2\nOutput\n0\nInput\n10\nOutput\n4\n-----Note-----\nIn the first example we can buy a ticket between the schools that costs $(1 + 2) \\operatorname{mod}(2 + 1) = 0$.\n\ndef",
        "answer": "def tickets(n):\n    return n * (n + 1) // 2",
        "difficulty": "competition"
    },
    {
        "task_id": 3886,
        "prompt": "Complete the Python function given the prompt below:What are you doing at the end of the world? Are you busy? Will you save us?\n[Image]\nNephren is playing a game with little leprechauns.\nShe gives them an infinite array of strings, f_{0... \u221e}.\nf_0 is \"What are you doing at the end of the world? Are you busy? Will you save us?\".\nShe wants to let more people know about it, so she defines f_{i} =  \"What are you doing while sending \"f_{i} - 1\"? Are you busy? Will you send \"f_{i} - 1\"?\" for all i \u2265 1.\nFor example, f_1 is\n\"What are you doing while sending \"What are you doing at the end of the world? Are you busy? Will you save us?\"? Are you busy? Will you send \"What are you doing at the end of the world? Are you busy? Will you save us?\"?\". Note that the quotes in the very beginning and in the very end are for clarity and are not a part of f_1.\nIt can be seen that the characters in f_{i} are letters, question marks, (possibly) quotation marks and spaces.\nNephren will ask the little leprechauns q times. Each time she will let them find the k-th character of f_{n}. The characters are indexed starting from 1. If f_{n} consists of less than k characters, output '.' (without quotes).\nCan you answer her queries?\n-----Input-----\nThe first line contains one integer q (1 \u2264 q \u2264 10)\u00a0\u2014 the number of Nephren's questions.\nEach of the next q lines describes Nephren's question and contains two integers n and k (0 \u2264 n \u2264 10^5, 1 \u2264 k \u2264 10^18).\n-----Output-----\nOne line containing q characters. The i-th character in it should be the answer for the i-th query.\n-----Examples-----\nInput\n3\n1 1\n1 2\n1 111111111111\nOutput\nWh.\nInput\n5\n0 69\n1 194\n1 139\n0 47\n1 66\nOutput\nabdef\nInput\n10\n4 1825\n3 75\n3 530\n4 1829\n4 1651\n3 187\n4 584\n4 255\n4 774\n2 474\nOutput\nAreyoubusy\n-----Note-----\nFor the first two examples, refer to f_0 and f_1 given in the legend.\n\ndef",
        "answer": "def f(n, k):\n    if n == 0:\n        return '.'\n    if k == 1:\n        return 'a'\n    if k == 2:\n        return 'b'\n    if k == 3:\n        return 'c'\n    if k == 4:\n        return 'd'\n    if k == 5:\n        return 'e'\n    if k == 6:\n        return 'f'\n    if k == 7:\n        return 'g'\n    if k == 8:\n        return 'h'\n    if k == 9:\n        return 'i'\n    if k == 10:\n        return 'j'\n    if k == 11:\n        return 'k'\n    if k == 12:\n        return 'l'\n    if k == 13:\n        return'm'\n    if k == 14:\n        return 'n'\n    if k == 15:\n        return 'o'\n    if k == 16:\n        return 'p'\n    if k == 17:\n        return 'q'\n    if k == 18:\n        return 'r'\n    if k == 19:\n        return's'\n    if k == 20:\n        return 't'\n    if k == 21:\n        return 'u'\n    if k == 22:\n        return 'v'\n    if k == 23:\n        return 'w'\n    if k == 24:\n        return 'x'\n    if k == 25:\n        return 'y'\n    if k == 26:\n        return 'z'\n    if k == 27:\n        return 'A'\n    if k == 28:\n        return 'B'\n    if k == 29:\n        return 'C'\n    if k == 30:\n        return 'D'\n    if k == 31:\n        return 'E'\n    if k == 32:\n        return 'F'\n    if k == 33:\n        return 'G'\n    if k == 34:\n        return 'H'\n    if k == 35:\n        return 'I'\n    if k == 36:\n        return 'J'\n    if k == 37:\n        return 'K'\n",
        "difficulty": "competition"
    },
    {
        "task_id": 3887,
        "prompt": "Complete the Python function given the prompt below:You are given a rebus of form? +? -? +? = n, consisting of only question marks, separated by arithmetic operation '+' and '-', equality and positive integer n. The goal is to replace each question mark with some positive integer from 1 to n, such that equality holds.\n-----Input-----\nThe only line of the input contains a rebus. It's guaranteed that it contains no more than 100 question marks, integer n is positive and doesn't exceed 1 000 000, all letters and integers are separated by spaces, arithmetic operations are located only between question marks.\n-----Output-----\nThe first line of the output should contain \"Possible\" (without quotes) if rebus has a solution and \"Impossible\" (without quotes) otherwise.\nIf the answer exists, the second line should contain any valid rebus with question marks replaced by integers from 1 to n. Follow the format given in the samples.\n-----Examples-----\nInput\n? +? -? +? +? = 42\nOutput\nPossible\n9 + 13 - 39 + 28 + 31 = 42\nInput\n? -? = 1\nOutput\nImpossible\nInput\n? = 1000000\nOutput\nPossible\n1000000 = 1000000\n\ndef",
        "answer": "def solve(rebus):\n    rebus = rebus.replace('?', '1')\n    rebus = rebus.replace('+', '-')\n    rebus = rebus.replace('-', '+')\n    return rebus",
        "difficulty": "competition"
    },
    {
        "task_id": 3888,
        "prompt": "Complete the Python function given the prompt below:Consider an N \\times N matrix. Let us denote by a_{i, j} the entry in the i-th row and j-th column. For a_{i, j} where i=1 or j=1 holds, its value is one of 0, 1 and 2 and given in the input. The remaining entries are defined as follows:\n - a_{i,j} = \\mathrm{mex}(a_{i-1,j}, a_{i,j-1}) (2 \\leq i, j \\leq N) where \\mathrm{mex}(x, y) is defined by the following table:\\mathrm{mex}(x, y)y=0y=1y=2x=0121x=1200x=2100\nHow many entries of the matrix are 0, 1, and 2, respectively?\n-----Constraints-----\n - 1 \\leq N \\leq 500{,}000\n - a_{i,j}'s given in input are one of 0, 1 and 2.\n-----Input-----\nInput is given from Standard Input in the following format:\nN\na_{1, 1} a_{1, 1}... a_{1, N}\na_{2, 1}\n:\na_{N, 1}\n-----Output-----\nPrint the number of 0's, 1's, and 2's separated by whitespaces.\n-----Sample Input-----\n4\n1 2 0 2\n0\n0\n0\n-----Sample Output-----\n7 4 5\nThe matrix is as follows:\n1 2 0 2\n0 1 2 0\n0 2 0 1\n0 1 2 0\n\n\ndef",
        "answer": "def mex(x, y):\n    if x == 0:\n        return y\n    elif y == 0:\n        return x\n    else:\n        return mex(x, y - 1) + mex(x - 1, y)",
        "difficulty": "competition"
    },
    {
        "task_id": 3889,
        "prompt": "Complete the Python function given the prompt below:Panic is rising in the committee for doggo standardization\u00a0\u2014 the puppies of the new brood have been born multi-colored! In total there are 26 possible colors of puppies in the nature and they are denoted by letters from 'a' to 'z' inclusive.\nThe committee rules strictly prohibit even the smallest diversity between doggos and hence all the puppies should be of the same color. Thus Slava, the committee employee, has been assigned the task to recolor some puppies into other colors in order to eliminate the difference and make all the puppies have one common color.\nUnfortunately, due to bureaucratic reasons and restricted budget, there's only one operation Slava can perform: he can choose a color $x$ such that there are currently at least two puppies of color $x$ and recolor all puppies of the color $x$ into some arbitrary color $y$. Luckily, this operation can be applied multiple times (including zero).\nFor example, if the number of puppies is $7$ and their colors are represented as the string \"abababc\", then in one operation Slava can get the results \"zbzbzbc\", \"bbbbbbc\", \"aaaaaac\", \"acacacc\" and others. However, if the current color sequence is \"abababc\", then he can't choose $x$='c' right now, because currently only one puppy has the color 'c'.\nHelp Slava and the committee determine whether it is possible to standardize all the puppies, i.e. after Slava's operations all the puppies should have the same color.\n-----Input-----\nThe first line contains a single integer $n$ ($1 \\le n \\le 10^5$)\u00a0\u2014 the number of puppies.\nThe second line contains a string $s$ of length $n$ consisting of lowercase Latin letters, where the $i$-th symbol denotes the $i$-th puppy's color.\n-----Output-----\nIf it's possible to recolor all puppies into one color, print \"Yes\".\nOtherwise print \"No\".\nOutput the answer without quotation signs.\n-----Examples-----\nInput\n6\naabddc\nOutput\nYes\nInput\n3\nabc\nOutput\nNo\nInput\n3\njjj\nOutput\nYes\n-----Note-----\nIn the first example Slava can perform the following steps:   take all puppies of color 'a' (a total of two) and recolor them into 'b';  take all puppies of color 'd' (a total of two) and recolor them into 'c';  take all puppies of color 'b' (three puppies for now) and recolor them into 'c'. \nIn the second example it's impossible to recolor any of the puppies.\nIn the third example all the puppies' colors are the same; thus there's no need to recolor anything.\n\ndef",
        "answer": "def standardize(s):\n    if len(s) == 1:\n        return s\n    if len(s) == 2:\n        return s[0]\n    if len(s) == 3:\n        return s[0] + s[2]\n    if len(s) == 4:\n        return s[0] + s[2] + s[3]\n    if len(s) == 5:\n        return s[0] + s[2] + s[3] + s[4]\n    if len(s) == 6:\n        return s[0] + s[2] + s[3] + s[4] + s[5]\n    if len(s) == 7:\n        return s[0] + s[2] + s[3] + s[4] + s[5] + s[6]\n    if len(s) == 8:\n        return s[0] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7]\n    if len(s) == 9:\n        return s[0] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8]\n    if len(s) == 10:\n        return s[0] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8] + s[9]\n    if len(s) == 11:\n        return s[0] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8] + s[9] + s[10]\n    if len(s) == 12:\n        return s[0] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8] + s[9] + s[10] + s[11]\n    if len(s) == 13:\n        return s[0] + s",
        "difficulty": "competition"
    },
    {
        "task_id": 3890,
        "prompt": "Complete the Python function given the prompt below:Little penguin Polo loves his home village. The village has n houses, indexed by integers from 1 to n. Each house has a plaque containing an integer, the i-th house has a plaque containing integer p_{i} (1 \u2264 p_{i} \u2264 n).\nLittle penguin Polo loves walking around this village. The walk looks like that. First he stands by a house number x. Then he goes to the house whose number is written on the plaque of house x (that is, to house p_{x}), then he goes to the house whose number is written on the plaque of house p_{x} (that is, to house p_{p}_{x}), and so on.\nWe know that:  When the penguin starts walking from any house indexed from 1 to k, inclusive, he can walk to house number 1.  When the penguin starts walking from any house indexed from k + 1 to n, inclusive, he definitely cannot walk to house number 1.  When the penguin starts walking from house number 1, he can get back to house number 1 after some non-zero number of walks from a house to a house. \nYou need to find the number of ways you may write the numbers on the houses' plaques so as to fulfill the three above described conditions. Print the remainder after dividing this number by 1000000007 (10^9 + 7).\n-----Input-----\nThe single line contains two space-separated integers n and k (1 \u2264 n \u2264 1000, 1 \u2264 k \u2264 min(8, n)) \u2014 the number of the houses and the number k from the statement.\n-----Output-----\nIn a single line print a single integer \u2014 the answer to the problem modulo 1000000007 (10^9 + 7).\n-----Examples-----\nInput\n5 2\nOutput\n54\nInput\n7 4\nOutput\n1728\n\ndef",
        "answer": "def solution(n, k):\n    return (factorial(n) / (factorial(k) * factorial(n - k))) % 1000000007",
        "difficulty": "competition"
    },
    {
        "task_id": 3891,
        "prompt": "Complete the Python function given the prompt below:Consider a table of size $n \\times m$, initially fully white. Rows are numbered $1$ through $n$ from top to bottom, columns $1$ through $m$ from left to right. Some square inside the table with odd side length was painted black. Find the center of this square.\n-----Input-----\nThe first line contains two integers $n$ and $m$ ($1 \\le n, m \\le 115$) \u2014 the number of rows and the number of columns in the table.\nThe $i$-th of the next $n$ lines contains a string of $m$ characters $s_{i1} s_{i2} \\ldots s_{im}$ ($s_{ij}$ is 'W' for white cells and 'B' for black cells), describing the $i$-th row of the table.\n-----Output-----\nOutput two integers $r$ and $c$ ($1 \\le r \\le n$, $1 \\le c \\le m$) separated by a space \u2014 the row and column numbers of the center of the black square.\n-----Examples-----\nInput\n5 6\nWWBBBW\nWWBBBW\nWWBBBW\nWWWWWW\nWWWWWW\nOutput\n2 4\nInput\n3 3\nWWW\nBWW\nWWW\nOutput\n2 1\n\ndef",
        "answer": "def find_center(n, m, s):\n    # your code here\n    return",
        "difficulty": "competition"
    },
    {
        "task_id": 3892,
        "prompt": "Complete the Python function given the prompt below:This is a simplified version of the task Toy Train. These two versions differ only in the constraints. Hacks for this version are disabled.\nAlice received a set of Toy Train\u2122 from Bob. It consists of one train and a connected railway network of $n$ stations, enumerated from $1$ through $n$. The train occupies one station at a time and travels around the network of stations in a circular manner. More precisely, the immediate station that the train will visit after station $i$ is station $i+1$ if $1 \\leq i < n$ or station $1$ if $i = n$. It takes the train $1$ second to travel to its next station as described.\nBob gave Alice a fun task before he left: to deliver $m$ candies that are initially at some stations to their independent destinations using the train. The candies are enumerated from $1$ through $m$. Candy $i$ ($1 \\leq i \\leq m$), now at station $a_i$, should be delivered to station $b_i$ ($a_i \\neq b_i$). [Image] The blue numbers on the candies correspond to $b_i$ values. The image corresponds to the $1$-st example. \nThe train has infinite capacity, and it is possible to load off any number of candies at a station. However, only at most one candy can be loaded from a station onto the train before it leaves the station. You can choose any candy at this station. The time it takes to move the candies is negligible.\nNow, Alice wonders how much time is needed for the train to deliver all candies. Your task is to find, for each station, the minimum time the train would need to deliver all the candies were it to start from there.\n-----Input-----\nThe first line contains two space-separated integers $n$ and $m$ ($2 \\leq n \\leq 100$; $1 \\leq m \\leq 200$) \u2014 the number of stations and the number of candies, respectively.\nThe $i$-th of the following $m$ lines contains two space-separated integers $a_i$ and $b_i$ ($1 \\leq a_i, b_i \\leq n$; $a_i \\neq b_i$) \u2014 the station that initially contains candy $i$ and the destination station of the candy, respectively.\n-----Output-----\nIn the first and only line, print $n$ space-separated integers, the $i$-th of which is the minimum time, in seconds, the train would need to deliver all the candies were it to start from station $i$.\n-----Examples-----\nInput\n5 7\n2 4\n5 1\n2 3\n3 4\n4 1\n5 3\n3 5\nOutput\n10 9 10 10 9 \nInput\n2 3\n1 2\n1 2\n1 2\nOutput\n5 6 \n-----Note-----\nConsider the second sample.\nIf the train started at station $1$, the optimal strategy is as follows.  Load the first candy onto the train.  Proceed to station $2$. This step takes $1$ second.  Deliver the first candy.  Proceed to station $1$. This step takes $1$ second.  Load the second candy onto the train.  Proceed to station $2$. This step takes $1$ second.  Deliver the second candy.  Proceed to station $1$. This step takes $1$ second.  Load the third candy onto the train.  Proceed to station $2$. This step takes $1$ second.  Deliver the third candy. \nHence, the train needs $5$ seconds to complete the tasks.\nIf the train were to start at station $2$, however, it would need to move to station $1$ before it could load the first candy, which would take one additional second. Thus, the answer in this scenario is $5+1 = 6$ seconds.\n\ndef",
        "answer": "def solve(n, m):\n    # Write your code here\n    pass",
        "difficulty": "competition"
    },
    {
        "task_id": 3893,
        "prompt": "Complete the Python function given the prompt below:Crazy Town is a plane on which there are n infinite line roads. Each road is defined by the equation a_{i}x + b_{i}y + c_{i} = 0, where a_{i} and b_{i} are not both equal to the zero. The roads divide the plane into connected regions, possibly of infinite space. Let's call each such region a block. We define an intersection as the point where at least two different roads intersect.\nYour home is located in one of the blocks. Today you need to get to the University, also located in some block. In one step you can move from one block to another, if the length of their common border is nonzero (in particular, this means that if the blocks are adjacent to one intersection, but have no shared nonzero boundary segment, then it are not allowed to move from one to another one in one step).\nDetermine what is the minimum number of steps you have to perform to get to the block containing the university. It is guaranteed that neither your home nor the university is located on the road.\n-----Input-----\nThe first line contains two space-separated integers x_1, y_1 ( - 10^6 \u2264 x_1, y_1 \u2264 10^6) \u2014 the coordinates of your home.\nThe second line contains two integers separated by a space x_2, y_2 ( - 10^6 \u2264 x_2, y_2 \u2264 10^6) \u2014 the coordinates of the university you are studying at.\nThe third line contains an integer n (1 \u2264 n \u2264 300) \u2014 the number of roads in the city. The following n lines contain 3 space-separated integers ( - 10^6 \u2264 a_{i}, b_{i}, c_{i} \u2264 10^6; |a_{i}| + |b_{i}| > 0) \u2014 the coefficients of the line a_{i}x + b_{i}y + c_{i} = 0, defining the i-th road. It is guaranteed that no two roads are the same. In addition, neither your home nor the university lie on the road (i.e. they do not belong to any one of the lines).\n-----Output-----\nOutput the answer to the problem.\n-----Examples-----\nInput\n1 1\n-1 -1\n2\n0 1 0\n1 0 0\nOutput\n2\nInput\n1 1\n-1 -1\n3\n1 0 0\n0 1 0\n1 1 -3\nOutput\n2\n-----Note-----\nPictures to the samples are presented below (A is the point representing the house; B is the point representing the university, different blocks are filled with different colors): [Image]  [Image]\n\ndef",
        "answer": "def crazy_town(x_1, y_1, x_2, y_2, n):\n    # Write your code here\n    pass",
        "difficulty": "competition"
    },
    {
        "task_id": 3894,
        "prompt": "Complete the Python function given the prompt below:Kevin and Nicky Sun have invented a new game called Lieges of Legendre. In this game, two players take turns modifying the game state with Kevin moving first. Initially, the game is set up so that there are n piles of cows, with the i-th pile containing a_{i} cows. During each player's turn, that player calls upon the power of Sunlight, and uses it to either:\n  Remove a single cow from a chosen non-empty pile.  Choose a pile of cows with even size 2\u00b7x (x > 0), and replace it with k piles of x cows each. \nThe player who removes the last cow wins. Given n, k, and a sequence a_1, a_2,..., a_{n}, help Kevin and Nicky find the winner, given that both sides play in optimal way.\n-----Input-----\nThe first line of the input contains two space-separated integers n and k (1 \u2264 n \u2264 100 000, 1 \u2264 k \u2264 10^9).\nThe second line contains n integers, a_1, a_2,... a_{n} (1 \u2264 a_{i} \u2264 10^9) describing the initial state of the game. \n-----Output-----\nOutput the name of the winning player, either \"Kevin\" or \"Nicky\" (without quotes).\n-----Examples-----\nInput\n2 1\n3 4\nOutput\nKevin\nInput\n1 2\n3\nOutput\nNicky\n-----Note-----\nIn the second sample, Nicky can win in the following way: Kevin moves first and is forced to remove a cow, so the pile contains two cows after his move. Next, Nicky replaces this pile of size 2 with two piles of size 1. So the game state is now two piles of size 1. Kevin then removes one of the remaining cows and Nicky wins by removing the other.\n\ndef",
        "answer": "def liege(n, k, a):\n    # Write your code here\n    if n == 1:\n        return \"Kevin\" if a[0] % 2 == 0 else \"Nicky\"\n    if n == 2:\n        return \"Kevin\" if a[0] == a[1] else \"Nicky\"\n    if n % 2 == 0:\n        return liege(n // 2, k, a)\n    else:\n        return liege(n // 2 + 1, k, a)",
        "difficulty": "competition"
    },
    {
        "task_id": 3895,
        "prompt": "Complete the Python function given the prompt below:Artsem has a friend Saunders from University of Chicago. Saunders presented him with the following problem.\nLet [n] denote the set {1,..., n}. We will also write f: [x] \u2192 [y] when a function f is defined in integer points 1,..., x, and all its values are integers from 1 to y.\nNow then, you are given a function f: [n] \u2192 [n]. Your task is to find a positive integer m, and two functions g: [n] \u2192 [m], h: [m] \u2192 [n], such that g(h(x)) = x for all $x \\in [ m ]$, and h(g(x)) = f(x) for all $x \\in [ n ]$, or determine that finding these is impossible.\n-----Input-----\nThe first line contains an integer n (1 \u2264 n \u2264 10^5).\nThe second line contains n space-separated integers\u00a0\u2014 values f(1),..., f(n) (1 \u2264 f(i) \u2264 n).\n-----Output-----\nIf there is no answer, print one integer -1.\nOtherwise, on the first line print the number m (1 \u2264 m \u2264 10^6). On the second line print n numbers g(1),..., g(n). On the third line print m numbers h(1),..., h(m).\nIf there are several correct answers, you may output any of them. It is guaranteed that if a valid answer exists, then there is an answer satisfying the above restrictions.\n-----Examples-----\nInput\n3\n1 2 3\nOutput\n3\n1 2 3\n1 2 3\nInput\n3\n2 2 2\nOutput\n1\n1 1 1\n2\nInput\n2\n2 1\nOutput\n-1\n\ndef",
        "answer": "def f(x):\n    return x + 1",
        "difficulty": "competition"
    },
    {
        "task_id": 3896,
        "prompt": "Complete the Python function given the prompt below:As a tradition, every year before IOI all the members of Natalia Fan Club are invited to Malek Dance Club to have a fun night together. Malek Dance Club has 2^{n} members and coincidentally Natalia Fan Club also has 2^{n} members. Each member of MDC is assigned a unique id i from 0 to 2^{n} - 1. The same holds for each member of NFC.\nOne of the parts of this tradition is one by one dance, where each member of MDC dances with a member of NFC. A dance pair is a pair of numbers (a, b) such that member a from MDC dances with member b from NFC.\nThe complexity of a pairs' assignment is the number of pairs of dancing pairs (a, b) and (c, d) such that a < c and b > d.\nYou are given a binary number of length n named x. We know that member i from MDC dances with member $i \\oplus x$ from NFC. Your task is to calculate the complexity of this assignment modulo 1000000007 (10^9 + 7).\nExpression $x \\oplus y$ denotes applying \u00abXOR\u00bb to numbers x and y. This operation exists in all modern programming languages, for example, in C++ and Java it denotes as \u00ab^\u00bb, in Pascal \u2014 \u00abxor\u00bb.\n-----Input-----\nThe first line of input contains a binary number x of lenght n, (1 \u2264 n \u2264 100).\nThis number may contain leading zeros.\n-----Output-----\nPrint the complexity of the given dance assignent modulo 1000000007 (10^9 + 7).\n-----Examples-----\nInput\n11\nOutput\n6\nInput\n01\nOutput\n2\nInput\n1\nOutput\n1\n\ndef",
        "answer": "def dance(x):\n    return x ^ x",
        "difficulty": "competition"
    },
    {
        "task_id": 3897,
        "prompt": "Complete the Python function given the prompt below:You are given an integer m as a product of integers a_1, a_2,... a_{n} $(m = \\prod_{i = 1}^{n} a_{i})$. Your task is to find the number of distinct decompositions of number m into the product of n ordered positive integers.\nDecomposition into n products, given in the input, must also be considered in the answer. As the answer can be very large, print it modulo 1000000007 (10^9 + 7).\n-----Input-----\nThe first line contains positive integer n (1 \u2264 n \u2264 500). The second line contains space-separated integers a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 10^9).\n-----Output-----\nIn a single line print a single number k \u2014 the number of distinct decompositions of number m into n ordered multipliers modulo 1000000007 (10^9 + 7).\n-----Examples-----\nInput\n1\n15\nOutput\n1\nInput\n3\n1 1 2\nOutput\n3\nInput\n2\n5 7\nOutput\n4\n-----Note-----\nIn the second sample, the get a decomposition of number 2, you need any one number out of three to equal 2, and the rest to equal 1.\nIn the third sample, the possible ways of decomposing into ordered multipliers are [7,5], [5,7], [1,35], [35,1].\nA decomposition of positive integer m into n ordered multipliers is a cortege of positive integers b = {b_1, b_2,... b_{n}} such that $m = \\prod_{i = 1}^{n} b_{i}$. Two decompositions b and c are considered different, if there exists index i such that b_{i} \u2260 c_{i}.\n\ndef",
        "answer": "def count_decompositions(n, m):\n    # your code here\n    return 0",
        "difficulty": "competition"
    },
    {
        "task_id": 3898,
        "prompt": "Complete the Python function given the prompt below:A remote island chain contains n islands, labeled 1 through n. Bidirectional bridges connect the islands to form a simple cycle\u00a0\u2014 a bridge connects islands 1 and 2, islands 2 and 3, and so on, and additionally a bridge connects islands n and 1. The center of each island contains an identical pedestal, and all but one of the islands has a fragile, uniquely colored statue currently held on the pedestal. The remaining island holds only an empty pedestal.\nThe islanders want to rearrange the statues in a new order. To do this, they repeat the following process: First, they choose an island directly adjacent to the island containing an empty pedestal. Then, they painstakingly carry the statue on this island across the adjoining bridge and place it on the empty pedestal.\nDetermine if it is possible for the islanders to arrange the statues in the desired order.\n-----Input-----\nThe first line contains a single integer n (2 \u2264 n \u2264 200 000)\u00a0\u2014 the total number of islands.\nThe second line contains n space-separated integers a_{i} (0 \u2264 a_{i} \u2264 n - 1)\u00a0\u2014 the statue currently placed on the i-th island. If a_{i} = 0, then the island has no statue. It is guaranteed that the a_{i} are distinct.\nThe third line contains n space-separated integers b_{i} (0 \u2264 b_{i} \u2264 n - 1) \u2014 the desired statues of the ith island. Once again, b_{i} = 0 indicates the island desires no statue. It is guaranteed that the b_{i} are distinct.\n-----Output-----\nPrint \"YES\" (without quotes) if the rearrangement can be done in the existing network, and \"NO\" otherwise.\n-----Examples-----\nInput\n3\n1 0 2\n2 0 1\nOutput\nYES\nInput\n2\n1 0\n0 1\nOutput\nYES\nInput\n4\n1 2 3 0\n0 3 2 1\nOutput\nNO\n-----Note-----\nIn the first sample, the islanders can first move statue 1 from island 1 to island 2, then move statue 2 from island 3 to island 1, and finally move statue 1 from island 2 to island 3.\nIn the second sample, the islanders can simply move statue 1 from island 1 to island 2.\nIn the third sample, no sequence of movements results in the desired position.\n\ndef",
        "answer": "def rearrange(n, a, b):\n    # Write your code here\n    pass",
        "difficulty": "competition"
    },
    {
        "task_id": 3899,
        "prompt": "Complete the Python function given the prompt below:You need to execute several tasks, each associated with number of processors it needs, and the compute power it will consume.\nYou have sufficient number of analog computers, each with enough processors for any task. Each computer can execute up to one task at a time, and no more than two tasks total. The first task can be any, the second task on each computer must use strictly less power than the first. You will assign between 1 and 2 tasks to each computer. You will then first execute the first task on each computer, wait for all of them to complete, and then execute the second task on each computer that has two tasks assigned.\nIf the average compute power per utilized processor (the sum of all consumed powers for all tasks presently running divided by the number of utilized processors) across all computers exceeds some unknown threshold during the execution of the first tasks, the entire system will blow up. There is no restriction on the second tasks execution. Find the lowest threshold for which it is possible.\nDue to the specifics of the task, you need to print the answer multiplied by 1000 and rounded up.\n-----Input-----\nThe first line contains a single integer n (1 \u2264 n \u2264 50) \u2014 the number of tasks.\nThe second line contains n integers a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 10^8), where a_{i} represents the amount of power required for the i-th task.\nThe third line contains n integers b_1, b_2,..., b_{n} (1 \u2264 b_{i} \u2264 100), where b_{i} is the number of processors that i-th task will utilize.\n-----Output-----\nPrint a single integer value \u2014 the lowest threshold for which it is possible to assign all tasks in such a way that the system will not blow up after the first round of computation, multiplied by 1000 and rounded up.\n-----Examples-----\nInput\n6\n8 10 9 9 8 10\n1 1 1 1 1 1\nOutput\n9000\nInput\n6\n8 10 9 9 8 10\n1 10 5 5 1 10\nOutput\n1160\n-----Note-----\nIn the first example the best strategy is to run each task on a separate computer, getting average compute per processor during the first round equal to 9.\nIn the second task it is best to run tasks with compute 10 and 9 on one computer, tasks with compute 10 and 8 on another, and tasks with compute 9 and 8 on the last, averaging (10 + 10 + 9) / (10 + 10 + 5) = 1.16 compute power per processor during the first round.\n\ndef",
        "answer": "def solution(n, a, b):\n    # your code here\n    return 0",
        "difficulty": "competition"
    }
]