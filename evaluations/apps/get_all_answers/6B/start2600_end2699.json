[
    {
        "task_id": 2600,
        "prompt": "Complete the Python function given the prompt below:You are given a matrix with $n$ rows (numbered from $1$ to $n$) and $m$ columns (numbered from $1$ to $m$). A number $a_{i, j}$ is written in the cell belonging to the $i$-th row and the $j$-th column, each number is either $0$ or $1$.\nA chip is initially in the cell $(1, 1)$, and it will be moved to the cell $(n, m)$. During each move, it either moves to the next cell in the current row, or in the current column (if the current cell is $(x, y)$, then after the move it can be either $(x + 1, y)$ or $(x, y + 1)$). The chip cannot leave the matrix.\nConsider each path of the chip from $(1, 1)$ to $(n, m)$. A path is called palindromic if the number in the first cell is equal to the number in the last cell, the number in the second cell is equal to the number in the second-to-last cell, and so on.\nYour goal is to change the values in the minimum number of cells so that every path is palindromic.\n-----Input-----\nThe first line contains one integer $t$ ($1 \\le t \\le 200$) \u2014 the number of test cases.\nThe first line of each test case contains two integers $n$ and $m$ ($2 \\le n, m \\le 30$) \u2014 the dimensions of the matrix.\nThen $n$ lines follow, the $i$-th line contains $m$ integers $a_{i, 1}$, $a_{i, 2}$,..., $a_{i, m}$ ($0 \\le a_{i, j} \\le 1$).\n-----Output-----\nFor each test case, print one integer \u2014 the minimum number of cells you have to change so that every path in the matrix is palindromic.\n-----Example-----\nInput\n4\n2 2\n1 1\n0 1\n2 3\n1 1 0\n1 0 0\n3 7\n1 0 1 1 1 1 1\n0 0 0 0 0 0 0\n1 1 1 1 1 0 1\n3 5\n1 0 1 0 0\n1 1 1 1 0\n0 0 1 0 0\nOutput\n0\n3\n4\n4\n-----Note-----\nThe resulting matrices in the first three test cases: $\\begin{pmatrix} 1 & 1\\\\ 0 & 1 \\end{pmatrix}$  $\\begin{pmatrix} 0 & 0 & 0\\\\ 0 & 0 & 0 \\end{pmatrix}$  $\\begin{pmatrix} 1 & 0 & 1 & 1 & 1 & 1 & 1\\\\ 0 & 1 & 1 & 0 & 1 & 1 & 0\\\\ 1 & 1 & 1 & 1 & 1 & 0 & 1 \\end{pmatrix}$\n\ndef",
        "answer": "def is_palindrome(n):\n    return str(n) == str(n)[::-1]",
        "difficulty": "interview"
    },
    {
        "task_id": 2601,
        "prompt": "Complete the Python function given the prompt below:For god's sake, you're boxes with legs! It is literally your only purpose! Walking onto buttons! How can you not do the one thing you were designed for?\nOh, that's funny, is it? Oh it's funny? Because we've been at this for twelve hours and you haven't solved it either, so I don't know why you're laughing. You've got one hour! Solve it!  \nWheatley decided to try to make a test chamber. He made a nice test chamber, but there was only one detail absent\u00a0\u2014 cubes.\nFor completing the chamber Wheatley needs $n$ cubes. $i$-th cube has a volume $a_i$.\nWheatley has to place cubes in such a way that they would be sorted in a non-decreasing order by their volume. Formally, for each $i>1$, $a_{i-1} \\le a_i$ must hold.\nTo achieve his goal, Wheatley can exchange two neighbouring cubes. It means that for any $i>1$ you can exchange cubes on positions $i-1$ and $i$.\nBut there is a problem: Wheatley is very impatient. If Wheatley needs more than $\\frac{n \\cdot (n-1)}{2}-1$ exchange operations, he won't do this boring work.\nWheatly wants to know: can cubes be sorted under this conditions?\n-----Input-----\nEach test contains multiple test cases.\nThe first line contains one positive integer $t$ ($1 \\le t \\le 1000$), denoting the number of test cases. Description of the test cases follows.\nThe first line of each test case contains one positive integer $n$ ($2 \\le n \\le 5 \\cdot 10^4$)\u00a0\u2014 number of cubes.\nThe second line contains $n$ positive integers $a_i$ ($1 \\le a_i \\le 10^9$)\u00a0\u2014 volumes of cubes.\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^5$.\n-----Output-----\nFor each test case, print a word in a single line: \"YES\" (without quotation marks) if the cubes can be sorted and \"NO\" (without quotation marks) otherwise.\n-----Example-----\nInput\n3\n5\n5 3 2 1 4\n6\n2 2 2 2 2 2\n2\n2 1\nOutput\nYES\nYES\nNO\n-----Note-----\nIn the first test case it is possible to sort all the cubes in $7$ exchanges.\nIn the second test case the cubes are already sorted.\nIn the third test case we can make $0$ exchanges, but the cubes are not sorted yet, so the answer is \"NO\".\n\ndef",
        "answer": "def solution(n, a):\n    # your code here\n    return \"YES\"",
        "difficulty": "interview"
    },
    {
        "task_id": 2602,
        "prompt": "Complete the Python function given the prompt below:Anna is a girl so brave that she is loved by everyone in the city and citizens love her cookies. She is planning to hold a party with cookies. Now she has $a$ vanilla cookies and $b$ chocolate cookies for the party.\nShe invited $n$ guests of the first type and $m$ guests of the second type to the party. They will come to the party in some order. After coming to the party, each guest will choose the type of cookie (vanilla or chocolate) to eat. There is a difference in the way how they choose that type:\nIf there are $v$ vanilla cookies and $c$ chocolate cookies at the moment, when the guest comes, then  if the guest of the first type: if $v>c$ the guest selects a vanilla cookie. Otherwise, the guest selects a chocolate cookie.  if the guest of the second type: if $v>c$ the guest selects a chocolate cookie. Otherwise, the guest selects a vanilla cookie. \nAfter that:  If there is at least one cookie of the selected type, the guest eats one.  Otherwise (there are no cookies of the selected type), the guest gets angry and returns to home. \nAnna wants to know if there exists some order of guests, such that no one guest gets angry. Your task is to answer her question.\n-----Input-----\nThe input consists of multiple test cases. The first line contains a single integer $t$ ($1 \\le t \\le 1000$)\u00a0\u2014 the number of test cases. Next $t$ lines contain descriptions of test cases.\nFor each test case, the only line contains four integers $a$, $b$, $n$, $m$ ($0 \\le a,b,n,m \\le 10^{18}, n+m \\neq 0$).\n-----Output-----\nFor each test case, print the answer in one line. If there exists at least one valid order, print \"Yes\". Otherwise, print \"No\".\nYou can print each letter in any case (upper or lower).\n-----Example-----\nInput\n6\n2 2 1 2\n0 100 0 1\n12 13 25 1\n27 83 14 25\n0 0 1 0\n1000000000000000000 1000000000000000000 1000000000000000000 1000000000000000000\nOutput\nYes\nNo\nNo\nYes\nNo\nYes\n-----Note-----\nIn the first test case, let's consider the order $\\{1, 2, 2\\}$ of types of guests. Then:  The first guest eats a chocolate cookie. After that, there are $2$ vanilla cookies and $1$ chocolate cookie.  The second guest eats a chocolate cookie. After that, there are $2$ vanilla cookies and $0$ chocolate cookies.  The last guest selects a chocolate cookie, but there are no chocolate cookies. So, the guest gets angry. \nSo, this order can't be chosen by Anna.\nLet's consider the order $\\{2, 2, 1\\}$ of types of guests. Then:  The first guest eats a vanilla cookie. After that, there is $1$ vanilla cookie and $2$ chocolate cookies.  The second guest eats a vanilla cookie. After that, there are $0$ vanilla cookies and $2$ chocolate cookies.  The last guest eats a chocolate cookie. After that, there are $0$ vanilla cookies and $1$ chocolate cookie. \nSo, the answer to this test case is \"Yes\".\nIn the fifth test case, it is illustrated, that the number of cookies ($a + b$) can be equal to zero, but the number of guests ($n + m$) can't be equal to zero.\nIn the sixth test case, be careful about the overflow of $32$-bit integer type.\n\ndef",
        "answer": "def answer(a, b, n, m):\n    if n + m!= 0:\n        return \"No\"\n    if a == 0 and b == 0:\n        return \"Yes\"\n    if a == 0:\n        return \"Yes\"\n    if b == 0:\n        return \"Yes\"\n    if a > b:\n        return \"Yes\"\n    if a == b:\n        return \"Yes\"\n    if a == 0:\n        return \"Yes\"\n    if b == 0:\n        return \"Yes\"\n    if a == 1:\n        return \"Yes\"\n    if b == 1:\n        return \"Yes\"\n    if a == 2:\n        return \"Yes\"\n    if b == 2:\n        return \"Yes\"\n    if a == 3:\n        return \"Yes\"\n    if b == 3:\n        return \"Yes\"\n    if a == 4:\n        return \"Yes\"\n    if b == 4:\n        return \"Yes\"\n    if a == 5:\n        return \"Yes\"\n    if b == 5:\n        return \"Yes\"\n    if a == 6:\n        return \"Yes\"\n    if b == 6:\n        return \"Yes\"\n    if a == 7:\n        return \"Yes\"\n    if b == 7:\n        return \"Yes\"\n    if a == 8:\n        return \"Yes\"\n    if b == 8:\n        return \"Yes\"\n    if a == 9:\n        return \"Yes\"\n    if b == 9:\n        return \"Yes\"\n    if a == 10:\n        return \"Yes\"\n    if b == 10:\n        return \"Yes\"\n    if a == 11:\n        return \"Yes\"\n    if b == 11:\n        return \"Yes\"\n    if a == 12:\n        return \"Yes\"\n    if b == 12:\n        return \"Yes\"\n    if a == 13:\n        return \"Yes\"\n    if b == 13:\n        return \"Yes\"\n    if a == 14:\n        return \"Yes\"\n    if b == 14:\n        return \"Yes\"\n    if a == 15:\n        return \"Yes\"\n    if",
        "difficulty": "interview"
    },
    {
        "task_id": 2603,
        "prompt": "Complete the Python function given the prompt below:You are given an array $a_1, a_2, \\dots, a_n$ where all $a_i$ are integers and greater than $0$.\n In one operation, you can choose two different indices $i$ and $j$ ($1 \\le i, j \\le n$). If $gcd(a_i, a_j)$ is equal to the minimum element of the whole array $a$, you can swap $a_i$ and $a_j$. $gcd(x, y)$ denotes the greatest common divisor (GCD) of integers $x$ and $y$.\n Now you'd like to make $a$ non-decreasing using the operation any number of times (possibly zero). Determine if you can do this.\n An array $a$ is non-decreasing if and only if $a_1 \\le a_2 \\le \\ldots \\le a_n$.\n-----Input-----\n The first line contains one integer $t$ ($1 \\le t \\le 10^4$)\u00a0\u2014 the number of test cases.\n The first line of each test case contains one integer $n$ ($1 \\le n \\le 10^5$)\u00a0\u2014 the length of array $a$.\n The second line of each test case contains $n$ positive integers $a_1, a_2, \\ldots a_n$ ($1 \\le a_i \\le 10^9$)\u00a0\u2014 the array itself.\n It is guaranteed that the sum of $n$ over all test cases doesn't exceed $10^5$.\n-----Output-----\n For each test case, output \"YES\" if it is possible to make the array $a$ non-decreasing using the described operation, or \"NO\" if it is impossible to do so.\n-----Example-----\nInput\n4\n1\n8\n6\n4 3 6 6 2 9\n4\n4 5 6 7\n5\n7 5 2 2 4\nOutput\nYES\nYES\nYES\nNO\n-----Note-----\n In the first and third sample, the array is already non-decreasing.\n In the second sample, we can swap $a_1$ and $a_3$ first, and swap $a_1$ and $a_5$ second to make the array non-decreasing.\n In the forth sample, we cannot the array non-decreasing using the operation.\n\ndef",
        "answer": "def gcd(x, y):\n    while y:\n        x, y = y, x % y\n    return x",
        "difficulty": "interview"
    },
    {
        "task_id": 2604,
        "prompt": "Complete the Python function given the prompt below:Gleb ordered pizza home. When the courier delivered the pizza, he was very upset, because several pieces of sausage lay on the crust, and he does not really like the crust.\nThe pizza is a circle of radius r and center at the origin. Pizza consists of the main part \u2014 circle of radius r - d with center at the origin, and crust around the main part of the width d. Pieces of sausage are also circles. The radius of the i\u00a0-th piece of the sausage is r_{i}, and the center is given as a pair (x_{i}, y_{i}).\nGleb asks you to help determine the number of pieces of sausage caught on the crust. A piece of sausage got on the crust, if it completely lies on the crust.\n-----Input-----\nFirst string contains two integer numbers r and d (0 \u2264 d < r \u2264 500)\u00a0\u2014 the radius of pizza and the width of crust.\nNext line contains one integer number n\u00a0\u2014 the number of pieces of sausage (1 \u2264 n \u2264 10^5).\nEach of next n lines contains three integer numbers x_{i}, y_{i} and r_{i} ( - 500 \u2264 x_{i}, y_{i} \u2264 500, 0 \u2264 r_{i} \u2264 500), where x_{i} and y_{i} are coordinates of the center of i-th peace of sausage, r_{i}\u00a0\u2014 radius of i-th peace of sausage.\n-----Output-----\nOutput the number of pieces of sausage that lay on the crust.\n-----Examples-----\nInput\n8 4\n7\n7 8 1\n-7 3 2\n0 2 1\n0 -2 2\n-3 -3 1\n0 6 2\n5 3 1\nOutput\n2\nInput\n10 8\n4\n0 0 9\n0 0 10\n1 0 1\n1 0 2\nOutput\n0\n-----Note-----\nBelow is a picture explaining the first example. Circles of green color denote pieces of sausage lying on the crust.\n [Image]\n\ndef",
        "answer": "def pizza_home(r, d):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2605,
        "prompt": "Complete the Python function given the prompt below:Little Mishka is a great traveller and she visited many countries. After thinking about where to travel this time, she chose XXX\u00a0\u2014 beautiful, but little-known northern country.\nHere are some interesting facts about XXX:  XXX consists of n cities, k of whose (just imagine!) are capital cities.  All of cities in the country are beautiful, but each is beautiful in its own way. Beauty value of i-th city equals to c_{i}.  All the cities are consecutively connected by the roads, including 1-st and n-th city, forming a cyclic route 1 \u2014 2 \u2014... \u2014 n \u2014 1. Formally, for every 1 \u2264 i < n there is a road between i-th and i + 1-th city, and another one between 1-st and n-th city.  Each capital city is connected with each other city directly by the roads. Formally, if city x is a capital city, then for every 1 \u2264 i \u2264 n,  i \u2260 x, there is a road between cities x and i.  There is at most one road between any two cities.  Price of passing a road directly depends on beauty values of cities it connects. Thus if there is a road between cities i and j, price of passing it equals c_{i}\u00b7c_{j}.\nMishka started to gather her things for a trip, but didn't still decide which route to follow and thus she asked you to help her determine summary price of passing each of the roads in XXX. Formally, for every pair of cities a and b (a < b), such that there is a road between a and b you are to find sum of products c_{a}\u00b7c_{b}. Will you help her?\n-----Input-----\nThe first line of the input contains two integers n and k (3 \u2264 n \u2264 100 000, 1 \u2264 k \u2264 n)\u00a0\u2014 the number of cities in XXX and the number of capital cities among them.\nThe second line of the input contains n integers c_1, c_2,..., c_{n} (1 \u2264 c_{i} \u2264 10 000)\u00a0\u2014 beauty values of the cities.\nThe third line of the input contains k distinct integers id_1, id_2,..., id_{k} (1 \u2264 id_{i} \u2264 n)\u00a0\u2014 indices of capital cities. Indices are given in ascending order.\n-----Output-----\nPrint the only integer\u00a0\u2014 summary price of passing each of the roads in XXX.\n-----Examples-----\nInput\n4 1\n2 3 1 2\n3\nOutput\n17\nInput\n5 2\n3 5 2 2 4\n1 4\nOutput\n71\n-----Note-----\nThis image describes first sample case:\n[Image]\nIt is easy to see that summary price is equal to 17.\nThis image describes second sample case:\n[Image]\nIt is easy to see that summary price is equal to 71.\n\ndef",
        "answer": "def solve(n, k, c):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2606,
        "prompt": "Complete the Python function given the prompt below:Chef Monocarp has just put $n$ dishes into an oven. He knows that the $i$-th dish has its optimal cooking time equal to $t_i$ minutes.\nAt any positive integer minute $T$ Monocarp can put no more than one dish out of the oven. If the $i$-th dish is put out at some minute $T$, then its unpleasant value is $|T - t_i|$\u00a0\u2014 the absolute difference between $T$ and $t_i$. Once the dish is out of the oven, it can't go back in.\nMonocarp should put all the dishes out of the oven. What is the minimum total unpleasant value Monocarp can obtain?\n-----Input-----\nThe first line contains a single integer $q$ ($1 \\le q \\le 200$)\u00a0\u2014 the number of testcases.\nThen $q$ testcases follow.\nThe first line of the testcase contains a single integer $n$ ($1 \\le n \\le 200$)\u00a0\u2014 the number of dishes in the oven.\nThe second line of the testcase contains $n$ integers $t_1, t_2, \\dots, t_n$ ($1 \\le t_i \\le n$)\u00a0\u2014 the optimal cooking time for each dish.\nThe sum of $n$ over all $q$ testcases doesn't exceed $200$.\n-----Output-----\nPrint a single integer for each testcase\u00a0\u2014 the minimum total unpleasant value Monocarp can obtain when he puts out all the dishes out of the oven. Remember that Monocarp can only put the dishes out at positive integer minutes and no more than one dish at any minute.\n-----Example-----\nInput\n6\n6\n4 2 4 4 5 2\n7\n7 7 7 7 7 7 7\n1\n1\n5\n5 1 2 4 3\n4\n1 4 4 4\n21\n21 8 1 4 1 5 21 1 8 21 11 21 11 3 12 8 19 15 9 11 13\nOutput\n4\n12\n0\n0\n2\n21\n-----Note-----\nIn the first example Monocarp can put out the dishes at minutes $3, 1, 5, 4, 6, 2$. That way the total unpleasant value will be $|4 - 3| + |2 - 1| + |4 - 5| + |4 - 4| + |6 - 5| + |2 - 2| = 4$.\nIn the second example Monocarp can put out the dishes at minutes $4, 5, 6, 7, 8, 9, 10$.\nIn the third example Monocarp can put out the dish at minute $1$.\nIn the fourth example Monocarp can put out the dishes at minutes $5, 1, 2, 4, 3$.\nIn the fifth example Monocarp can put out the dishes at minutes $1, 3, 4, 5$.\n\ndef",
        "answer": "def min_unpleasant_value(n, t):\n    t.sort()\n    min_unpleasant_value = 0\n    for i in range(n):\n        min_unpleasant_value += abs(t[i] - i)\n    return min_unpleasant_value",
        "difficulty": "interview"
    },
    {
        "task_id": 2607,
        "prompt": "Complete the Python function given the prompt below:A string is called beautiful if no two consecutive characters are equal. For example, \"ababcb\", \"a\" and \"abab\" are beautiful strings, while \"aaaaaa\", \"abaa\" and \"bb\" are not.\nAhcl wants to construct a beautiful string. He has a string $s$, consisting of only characters 'a', 'b', 'c' and '?'. Ahcl needs to replace each character '?' with one of the three characters 'a', 'b' or 'c', such that the resulting string is beautiful. Please help him!\nMore formally, after replacing all characters '?', the condition $s_i \\neq s_{i+1}$ should be satisfied for all $1 \\leq i \\leq |s| - 1$, where $|s|$ is the length of the string $s$.\n-----Input-----\nThe first line contains positive integer $t$ ($1 \\leq t \\leq 1000$)\u00a0\u2014 the number of test cases. Next $t$ lines contain the descriptions of test cases.\nEach line contains a non-empty string $s$ consisting of only characters 'a', 'b', 'c' and '?'. \nIt is guaranteed that in each test case a string $s$ has at least one character '?'. The sum of lengths of strings $s$ in all test cases does not exceed $10^5$.\n-----Output-----\nFor each test case given in the input print the answer in the following format:\n  If it is impossible to create a beautiful string, print \"-1\" (without quotes);  Otherwise, print the resulting beautiful string after replacing all '?' characters. If there are multiple answers, you can print any of them. \n-----Example-----\nInput\n3\na???cb\na??bbc\na?b?c\nOutput\nababcb\n-1\nacbac\n-----Note-----\nIn the first test case, all possible correct answers are \"ababcb\", \"abcacb\", \"abcbcb\", \"acabcb\" and \"acbacb\". The two answers \"abcbab\" and \"abaabc\" are incorrect, because you can replace only '?' characters and the resulting string must be beautiful.\nIn the second test case, it is impossible to create a beautiful string, because the $4$-th and $5$-th characters will be always equal.\nIn the third test case, the only answer is \"acbac\".\n\ndef",
        "answer": "def beautiful(s):\n    # your code here\n    return -1",
        "difficulty": "interview"
    },
    {
        "task_id": 2608,
        "prompt": "Complete the Python function given the prompt below:Recently, Masha was presented with a chessboard with a height of $n$ and a width of $m$.\nThe rows on the chessboard are numbered from $1$ to $n$ from bottom to top. The columns are numbered from $1$ to $m$ from left to right. Therefore, each cell can be specified with the coordinates $(x,y)$, where $x$ is the column number, and $y$ is the row number (do not mix up).\nLet us call a rectangle with coordinates $(a,b,c,d)$ a rectangle lower left point of which has coordinates $(a,b)$, and the upper right one\u00a0\u2014 $(c,d)$.\nThe chessboard is painted black and white as follows:\n [Image] \n An example of a chessboard. \nMasha was very happy with the gift and, therefore, invited her friends Maxim and Denis to show off. The guys decided to make her a treat\u00a0\u2014 they bought her a can of white and a can of black paint, so that if the old board deteriorates, it can be repainted. When they came to Masha, something unpleasant happened: first, Maxim went over the threshold and spilled white paint on the rectangle $(x_1,y_1,x_2,y_2)$. Then after him Denis spilled black paint on the rectangle $(x_3,y_3,x_4,y_4)$.\nTo spill paint of color $color$ onto a certain rectangle means that all the cells that belong to the given rectangle become $color$. The cell dyeing is superimposed on each other (if at first some cell is spilled with white paint and then with black one, then its color will be black).\nMasha was shocked! She drove away from the guests and decided to find out how spoiled the gift was. For this, she needs to know the number of cells of white and black color. Help her find these numbers!\n-----Input-----\nThe first line contains a single integer $t$ ($1 \\le t \\le 10^3$)\u00a0\u2014 the number of test cases.\nEach of them is described in the following format:\nThe first line contains two integers $n$ and $m$ ($1 \\le n,m \\le 10^9$)\u00a0\u2014 the size of the board.\nThe second line contains four integers $x_1$, $y_1$, $x_2$, $y_2$ ($1 \\le x_1 \\le x_2 \\le m, 1 \\le y_1 \\le y_2 \\le n$)\u00a0\u2014 the coordinates of the rectangle, the white paint was spilled on.\nThe third line contains four integers $x_3$, $y_3$, $x_4$, $y_4$ ($1 \\le x_3 \\le x_4 \\le m, 1 \\le y_3 \\le y_4 \\le n$)\u00a0\u2014 the coordinates of the rectangle, the black paint was spilled on.\n-----Output-----\nOutput $t$ lines, each of which contains two numbers\u00a0\u2014 the number of white and black cells after spilling paint, respectively.\n-----Example-----\nInput\n5\n2 2\n1 1 2 2\n1 1 2 2\n3 4\n2 2 3 2\n3 1 4 3\n1 5\n1 1 5 1\n3 1 5 1\n4 4\n1 1 4 2\n1 3 4 4\n3 4\n1 2 4 2\n2 1 3 3\nOutput\n0 4\n3 9\n2 3\n8 8\n4 8\n-----Note-----\nExplanation for examples:\nThe first picture of each illustration shows how the field looked before the dyes were spilled. The second picture of each illustration shows how the field looked after Maxim spoiled white dye (the rectangle on which the dye was spilled is highlighted with red). The third picture in each illustration shows how the field looked after Denis spoiled black dye (the rectangle on which the dye was spilled is highlighted with red).\nIn the first test, the paint on the field changed as follows:\n [Image] \nIn the second test, the paint on the field changed as follows:\n [Image] \nIn the third test, the paint on the field changed as follows:\n [Image] \nIn the fourth test, the paint on the field changed as follows:\n [Image] \nIn the fifth test, the paint on the field changed as follows:\n [Image]\n\ndef",
        "answer": "def paint(n, m, x1, y1, x2, y2, x3, y3, x4, y4):\n    # your code here",
        "difficulty": "interview"
    },
    {
        "task_id": 2609,
        "prompt": "Complete the Python function given the prompt below:There are $n$ segments on a $Ox$ axis $[l_1, r_1]$, $[l_2, r_2]$,..., $[l_n, r_n]$. Segment $[l, r]$ covers all points from $l$ to $r$ inclusive, so all $x$ such that $l \\le x \\le r$.\nSegments can be placed arbitrarily \u00a0\u2014 be inside each other, coincide and so on. Segments can degenerate into points, that is $l_i=r_i$ is possible.\nUnion of the set of segments is such a set of segments which covers exactly the same set of points as the original set. For example:  if $n=3$ and there are segments $[3, 6]$, $[100, 100]$, $[5, 8]$ then their union is $2$ segments: $[3, 8]$ and $[100, 100]$;  if $n=5$ and there are segments $[1, 2]$, $[2, 3]$, $[4, 5]$, $[4, 6]$, $[6, 6]$ then their union is $2$ segments: $[1, 3]$ and $[4, 6]$. \nObviously, a union is a set of pairwise non-intersecting segments.\nYou are asked to erase exactly one segment of the given $n$ so that the number of segments in the union of the rest $n-1$ segments is maximum possible.\nFor example, if $n=4$ and there are segments $[1, 4]$, $[2, 3]$, $[3, 6]$, $[5, 7]$, then:  erasing the first segment will lead to $[2, 3]$, $[3, 6]$, $[5, 7]$ remaining, which have $1$ segment in their union;  erasing the second segment will lead to $[1, 4]$, $[3, 6]$, $[5, 7]$ remaining, which have $1$ segment in their union;  erasing the third segment will lead to $[1, 4]$, $[2, 3]$, $[5, 7]$ remaining, which have $2$ segments in their union;  erasing the fourth segment will lead to $[1, 4]$, $[2, 3]$, $[3, 6]$ remaining, which have $1$ segment in their union. \nThus, you are required to erase the third segment to get answer $2$.\nWrite a program that will find the maximum number of segments in the union of $n-1$ segments if you erase any of the given $n$ segments.\nNote that if there are multiple equal segments in the given set, then you can erase only one of them anyway. So the set after erasing will have exactly $n-1$ segments.\n-----Input-----\nThe first line contains one integer $t$ ($1 \\le t \\le 10^4$)\u00a0\u2014 the number of test cases in the test. Then the descriptions of $t$ test cases follow.\nThe first of each test case contains a single integer $n$ ($2 \\le n \\le 2\\cdot10^5$)\u00a0\u2014 the number of segments in the given set. Then $n$ lines follow, each contains a description of a segment \u2014 a pair of integers $l_i$, $r_i$ ($-10^9 \\le l_i \\le r_i \\le 10^9$), where $l_i$ and $r_i$ are the coordinates of the left and right borders of the $i$-th segment, respectively.\nThe segments are given in an arbitrary order.\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2\\cdot10^5$.\n-----Output-----\nPrint $t$ integers \u2014 the answers to the $t$ given test cases in the order of input. The answer is the maximum number of segments in the union of $n-1$ segments if you erase any of the given $n$ segments.\n-----Example-----\nInput\n3\n4\n1 4\n2 3\n3 6\n5 7\n3\n5 5\n5 5\n5 5\n6\n3 3\n1 1\n5 5\n1 5\n2 2\n4 4\nOutput\n2\n1\n5\n\ndef",
        "answer": "def solution(n):\n    return n-1",
        "difficulty": "interview"
    },
    {
        "task_id": 2610,
        "prompt": "Complete the Python function given the prompt below:This is the hard version of this problem. The only difference is the constraint on $k$ \u2014 the number of gifts in the offer. In this version: $2 \\le k \\le n$.\nVasya came to the store to buy goods for his friends for the New Year. It turned out that he was very lucky\u00a0\u2014 today the offer \"$k$ of goods for the price of one\" is held in store.\nUsing this offer, Vasya can buy exactly $k$ of any goods, paying only for the most expensive of them. Vasya decided to take this opportunity and buy as many goods as possible for his friends with the money he has.\nMore formally, for each good, its price is determined by $a_i$\u00a0\u2014 the number of coins it costs. Initially, Vasya has $p$ coins. He wants to buy the maximum number of goods. Vasya can perform one of the following operations as many times as necessary:\n  Vasya can buy one good with the index $i$ if he currently has enough coins (i.e $p \\ge a_i$). After buying this good, the number of Vasya's coins will decrease by $a_i$, (i.e it becomes $p := p - a_i$).  Vasya can buy a good with the index $i$, and also choose exactly $k-1$ goods, the price of which does not exceed $a_i$, if he currently has enough coins (i.e $p \\ge a_i$). Thus, he buys all these $k$ goods, and his number of coins decreases by $a_i$ (i.e it becomes $p := p - a_i$). \nPlease note that each good can be bought no more than once.\nFor example, if the store now has $n=5$ goods worth $a_1=2, a_2=4, a_3=3, a_4=5, a_5=7$, respectively, $k=2$, and Vasya has $6$ coins, then he can buy $3$ goods. A good with the index $1$ will be bought by Vasya without using the offer and he will pay $2$ coins. Goods with the indices $2$ and $3$ Vasya will buy using the offer and he will pay $4$ coins. It can be proved that Vasya can not buy more goods with six coins.\nHelp Vasya to find out the maximum number of goods he can buy.\n-----Input-----\nThe first line contains one integer $t$ ($1 \\le t \\le 10^4$)\u00a0\u2014 the number of test cases in the test.\nThe next lines contain a description of $t$ test cases. \nThe first line of each test case contains three integers $n, p, k$ ($2 \\le n \\le 2 \\cdot 10^5$, $1 \\le p \\le 2\\cdot10^9$, $2 \\le k \\le n$)\u00a0\u2014 the number of goods in the store, the number of coins Vasya has and the number of goods that can be bought by the price of the most expensive of them.\nThe second line of each test case contains $n$ integers $a_i$ ($1 \\le a_i \\le 10^4$)\u00a0\u2014 the prices of goods.\nIt is guaranteed that the sum of $n$ for all test cases does not exceed $2 \\cdot 10^5$.\n-----Output-----\nFor each test case in a separate line print one integer $m$\u00a0\u2014 the maximum number of goods that Vasya can buy.\n-----Example-----\nInput\n8\n5 6 2\n2 4 3 5 7\n5 11 2\n2 4 3 5 7\n3 2 3\n4 2 6\n5 2 3\n10 1 3 9 2\n2 10000 2\n10000 10000\n2 9999 2\n10000 10000\n4 6 4\n3 2 3 2\n5 5 3\n1 2 2 1 2\nOutput\n3\n4\n1\n1\n2\n0\n4\n5\n\ndef",
        "answer": "def max_goods(n, p, k):\n    if k > n:\n        return 0\n    if k == 0:\n        return 1\n    if p == 0:\n        return 0\n    if k == 1:\n        return n\n    if k == n:\n        return 1\n    if p < a[0]:\n        return 0\n    if p < a[k-1]:\n        return max_goods(n, p, k-1)\n    return max(max_goods(n, p-a[k-1], k), max_goods(n, p, k-1))",
        "difficulty": "interview"
    },
    {
        "task_id": 2611,
        "prompt": "Complete the Python function given the prompt below:Vova decided to clean his room. The room can be represented as the coordinate axis $OX$. There are $n$ piles of trash in the room, coordinate of the $i$-th pile is the integer $p_i$. All piles have different coordinates.\nLet's define a total cleanup as the following process. The goal of this process is to collect all the piles in no more than two different $x$ coordinates. To achieve this goal, Vova can do several (possibly, zero) moves. During one move, he can choose some $x$ and move all piles from $x$ to $x+1$ or $x-1$ using his broom. Note that he can't choose how many piles he will move.\nAlso, there are two types of queries:\n  $0$ $x$ \u2014 remove a pile of trash from the coordinate $x$. It is guaranteed that there is a pile in the coordinate $x$ at this moment.  $1$ $x$ \u2014 add a pile of trash to the coordinate $x$. It is guaranteed that there is no pile in the coordinate $x$ at this moment. \nNote that it is possible that there are zero piles of trash in the room at some moment.\nVova wants to know the minimum number of moves he can spend if he wants to do a total cleanup before any queries. He also wants to know this number of moves after applying each query. Queries are applied in the given order. Note that the total cleanup doesn't actually happen and doesn't change the state of piles. It is only used to calculate the number of moves.\nFor better understanding, please read the Notes section below to see an explanation for the first example.\n-----Input-----\nThe first line of the input contains two integers $n$ and $q$ ($1 \\le n, q \\le 10^5$) \u2014 the number of piles in the room before all queries and the number of queries, respectively.\nThe second line of the input contains $n$ distinct integers $p_1, p_2, \\dots, p_n$ ($1 \\le p_i \\le 10^9$), where $p_i$ is the coordinate of the $i$-th pile.\nThe next $q$ lines describe queries. The $i$-th query is described with two integers $t_i$ and $x_i$ ($0 \\le t_i \\le 1; 1 \\le x_i \\le 10^9$), where $t_i$ is $0$ if you need to remove a pile from the coordinate $x_i$ and is $1$ if you need to add a pile to the coordinate $x_i$. It is guaranteed that for $t_i = 0$ there is such pile in the current set of piles and for $t_i = 1$ there is no such pile in the current set of piles.\n-----Output-----\nPrint $q+1$ integers: the minimum number of moves Vova needs to do a total cleanup before the first query and after each of $q$ queries.\n-----Examples-----\nInput\n5 6\n1 2 6 8 10\n1 4\n1 9\n0 6\n0 10\n1 100\n1 50\nOutput\n5\n7\n7\n5\n4\n8\n49\nInput\n5 8\n5 1 2 4 3\n0 1\n0 2\n0 3\n0 4\n0 5\n1 1000000000\n1 1\n1 500000000\nOutput\n3\n2\n1\n0\n0\n0\n0\n0\n499999999\n-----Note-----\nConsider the first example.\nInitially, the set of piles is $[1, 2, 6, 8, 10]$. The answer before the first query is $5$ because you can move all piles from $1$ to $2$ with one move, all piles from $10$ to $8$ with $2$ moves and all piles from $6$ to $8$ with $2$ moves.\nAfter the first query, the set becomes $[1, 2, 4, 6, 8, 10]$. Then the answer is $7$ because you can move all piles from $6$ to $4$ with $2$ moves, all piles from $4$ to $2$ with $2$ moves, all piles from $2$ to $1$ with $1$ move and all piles from $10$ to $8$ with $2$ moves.\nAfter the second query, the set of piles becomes $[1, 2, 4, 6, 8, 9, 10]$ and the answer is the same (and the previous sequence of moves can be applied to the current set of piles).\nAfter the third query, the set of piles becomes $[1, 2, 4, 8, 9, 10]$ and the answer is $5$ because you can move all piles from $1$ to $2$ with $1$ move, all piles from $2$ to $4$ with $2$ moves, all piles from $10$ to $9$ with $1$ move and all piles from $9$ to $8$ with $1$ move.\nAfter the fourth query, the set becomes $[1, 2, 4, 8, 9]$ and the answer is almost the same (the previous sequence of moves can be applied without moving piles from $10$).\nAfter the fifth query, the set becomes $[1, 2, 4, 8, 9, 100]$. You can move all piles from $1$ and further to $9$ and keep $100$ at its place. So the answer is $8$.\nAfter the sixth query, the set becomes $[1, 2, 4, 8, 9, 50, 100]$. The answer is $49$ and can be obtained with almost the same sequence of moves as after the previous query. The only difference is that you need to move all piles from $50$ to $9$ too.\n\ndef",
        "answer": "def solve(n, q):\n    piles = [int(x) for x in input().split()]\n    queries = [tuple(int(x) for x in input().split()) for _ in range(q)]\n    moves = 0\n    for t, x in queries:\n        if t == 0:\n            piles.remove(x)\n        else:\n            piles.add(x)\n        moves += 1\n    print(moves)",
        "difficulty": "interview"
    },
    {
        "task_id": 2612,
        "prompt": "Complete the Python function given the prompt below:There are $n$ models in the shop numbered from $1$ to $n$, with sizes $s_1, s_2, \\ldots, s_n$.\nOrac will buy some of the models and will arrange them in the order of increasing numbers (i.e. indices, but not sizes).\nOrac thinks that the obtained arrangement is beatiful, if for any two adjacent models with indices $i_j$ and $i_{j+1}$ (note that $i_j < i_{j+1}$, because Orac arranged them properly), $i_{j+1}$ is divisible by $i_j$ and $s_{i_j} < s_{i_{j+1}}$.\nFor example, for $6$ models with sizes $\\{3, 6, 7, 7, 7, 7\\}$, he can buy models with indices $1$, $2$, and $6$, and the obtained arrangement will be beautiful. Also, note that the arrangement with exactly one model is also considered beautiful.\nOrac wants to know the maximum number of models that he can buy, and he may ask you these queries many times.\n-----Input-----\nThe first line contains one integer $t\\ (1 \\le t\\le 100)$: the number of queries.\nEach query contains two lines. The first line contains one integer $n\\ (1\\le n\\le 100\\,000)$: the number of models in the shop, and the second line contains $n$ integers $s_1,\\dots,s_n\\ (1\\le s_i\\le 10^9)$: the sizes of models.\nIt is guaranteed that the total sum of $n$ is at most $100\\,000$.\n-----Output-----\nPrint $t$ lines, the $i$-th of them should contain the maximum number of models that Orac can buy for the $i$-th query.\n-----Example-----\nInput\n4\n4\n5 3 4 6\n7\n1 4 2 3 6 4 9\n5\n5 4 3 2 1\n1\n9\nOutput\n2\n3\n1\n1\n-----Note-----\nIn the first query, for example, Orac can buy models with indices $2$ and $4$, the arrangement will be beautiful because $4$ is divisible by $2$ and $6$ is more than $3$. By enumerating, we can easily find that there are no beautiful arrangements with more than two models. \nIn the second query, Orac can buy models with indices $1$, $3$, and $6$. By enumerating, we can easily find that there are no beautiful arrangements with more than three models. \nIn the third query, there are no beautiful arrangements with more than one model.\n\ndef",
        "answer": "def solve(n, s):\n    s.sort()\n    res = 0\n    for i in xrange(n-1):\n        if s[i] % s[i+1] == 0:\n            res += 1\n    return res",
        "difficulty": "interview"
    },
    {
        "task_id": 2613,
        "prompt": "Complete the Python function given the prompt below:You are given an array $a_1, a_2, \\dots, a_n$, consisting of $n$ positive integers. \nInitially you are standing at index $1$ and have a score equal to $a_1$. You can perform two kinds of moves:   move right\u00a0\u2014 go from your current index $x$ to $x+1$ and add $a_{x+1}$ to your score. This move can only be performed if $x<n$.  move left\u00a0\u2014 go from your current index $x$ to $x-1$ and add $a_{x-1}$ to your score. This move can only be performed if $x>1$. Also, you can't perform two or more moves to the left in a row. \nYou want to perform exactly $k$ moves. Also, there should be no more than $z$ moves to the left among them.\nWhat is the maximum score you can achieve?\n-----Input-----\nThe first line contains a single integer $t$ ($1 \\le t \\le 10^4$)\u00a0\u2014 the number of testcases.\nThe first line of each testcase contains three integers $n, k$ and $z$ ($2 \\le n \\le 10^5$, $1 \\le k \\le n - 1$, $0 \\le z \\le min(5, k)$)\u00a0\u2014 the number of elements in the array, the total number of moves you should perform and the maximum number of moves to the left you can perform.\nThe second line of each testcase contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^4$)\u00a0\u2014 the given array.\nThe sum of $n$ over all testcases does not exceed $3 \\cdot 10^5$.\n-----Output-----\nPrint $t$ integers\u00a0\u2014 for each testcase output the maximum score you can achieve if you make exactly $k$ moves in total, no more than $z$ of them are to the left and there are no two or more moves to the left in a row.\n-----Example-----\nInput\n4\n5 4 0\n1 5 4 3 2\n5 4 1\n1 5 4 3 2\n5 4 4\n10 20 30 40 50\n10 7 3\n4 6 8 2 9 9 7 4 10 9\nOutput\n15\n19\n150\n56\n-----Note-----\nIn the first testcase you are not allowed to move left at all. So you make four moves to the right and obtain the score $a_1 + a_2 + a_3 + a_4 + a_5$.\nIn the second example you can move one time to the left. So we can follow these moves: right, right, left, right. The score will be $a_1 + a_2 + a_3 + a_2 + a_3$.\nIn the third example you can move four times to the left but it's not optimal anyway, you can just move four times to the right and obtain the score $a_1 + a_2 + a_3 + a_4 + a_5$.\n\ndef",
        "answer": "def max_score(a, k, z):\n    n = len(a)\n    if k > n - 1:\n        return 0\n    if k == n - 1:\n        return a[-1]\n    if k == n - 2:\n        return a[-1] + a[-2]\n    if k == n - 3:\n        return max(a[-1] + a[-2], a[-1] + a[-3], a[-2] + a[-3])\n    if k == n - 4:\n        return max(a[-1] + a[-2], a[-1] + a[-3], a[-2] + a[-3], a[-3] + a[-4])\n    if k == n - 5:\n        return max(a[-1] + a[-2], a[-1] + a[-3], a[-2] + a[-3], a[-3] + a[-4], a[-4] + a[-5])\n    if k == n - 6:\n        return max(a[-1] + a[-2], a[-1] + a[-3], a[-2] + a[-3], a[-3] + a[-4], a[-4] + a[-5], a[-5] + a[-6])\n    if k == n - 7:\n        return max(a[-1] + a[-2], a[-1] + a[-3], a[-2] + a[-3], a[-3] + a[-4], a[-4] + a[-5], a[-5] + a[-6], a[-6] + a[-7])\n    if k == n - 8:\n        return max(a[-1] + a[-2], a[-1] + a[-3], a[-2] + a[-3], a[-3] + a[-4], a[-4] + a[-5], a[-5] + a[-6], a[-6",
        "difficulty": "interview"
    },
    {
        "task_id": 2614,
        "prompt": "Complete the Python function given the prompt below:Pinkie Pie has bought a bag of patty-cakes with different fillings! But it appeared that not all patty-cakes differ from one another with filling. In other words, the bag contains some patty-cakes with the same filling.\nPinkie Pie eats the patty-cakes one-by-one. She likes having fun so she decided not to simply eat the patty-cakes but to try not to eat the patty-cakes with the same filling way too often. To achieve this she wants the minimum distance between the eaten with the same filling to be the largest possible. Herein Pinkie Pie called the distance between two patty-cakes the number of eaten patty-cakes strictly between them.\nPinkie Pie can eat the patty-cakes in any order. She is impatient about eating all the patty-cakes up so she asks you to help her to count the greatest minimum distance between the eaten patty-cakes with the same filling amongst all possible orders of eating!\nPinkie Pie is going to buy more bags of patty-cakes so she asks you to solve this problem for several bags!\n-----Input-----\nThe first line contains a single integer $T$ ($1 \\le T \\le 100$): the number of bags for which you need to solve the problem.\nThe first line of each bag description contains a single integer $n$ ($2 \\le n \\le 10^5$): the number of patty-cakes in it. The second line of the bag description contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le n$): the information of patty-cakes' fillings: same fillings are defined as same integers, different fillings are defined as different integers. It is guaranteed that each bag contains at least two patty-cakes with the same filling. \nIt is guaranteed that the sum of $n$ over all bags does not exceed $10^5$.\n-----Output-----\nFor each bag print in separate line one single integer: the largest minimum distance between the eaten patty-cakes with the same filling amongst all possible orders of eating for that bag.\n-----Example-----\nInput\n4\n7\n1 7 1 6 4 4 6\n8\n1 1 4 6 4 6 4 7\n3\n3 3 3\n6\n2 5 2 3 1 4\nOutput\n3\n2\n0\n4\n-----Note-----\nFor the first bag Pinkie Pie can eat the patty-cakes in the following order (by fillings): $1$, $6$, $4$, $7$, $1$, $6$, $4$ (in this way, the minimum distance is equal to $3$).\nFor the second bag Pinkie Pie can eat the patty-cakes in the following order (by fillings): $1$, $4$, $6$, $7$, $4$, $1$, $6$, $4$ (in this way, the minimum distance is equal to $2$).\n\ndef",
        "answer": "def solution(T):\n    # write your code here\n    return",
        "difficulty": "interview"
    },
    {
        "task_id": 2615,
        "prompt": "Complete the Python function given the prompt below:Consider some positive integer $x$. Its prime factorization will be of form $x = 2^{k_1} \\cdot 3^{k_2} \\cdot 5^{k_3} \\cdot \\dots$\nLet's call $x$ elegant if the greatest common divisor of the sequence $k_1, k_2, \\dots$ is equal to $1$. For example, numbers $5 = 5^1$, $12 = 2^2 \\cdot 3$, $72 = 2^3 \\cdot 3^2$ are elegant and numbers $8 = 2^3$ ($GCD = 3$), $2500 = 2^2 \\cdot 5^4$ ($GCD = 2$) are not.\nCount the number of elegant integers from $2$ to $n$.\nEach testcase contains several values of $n$, for each of them you are required to solve the problem separately.\n-----Input-----\nThe first line contains a single integer $T$ ($1 \\le T \\le 10^5$) \u2014 the number of values of $n$ in the testcase.\nEach of the next $T$ lines contains a single integer $n_i$ ($2 \\le n_i \\le 10^{18}$).\n-----Output-----\nPrint $T$ lines \u2014 the $i$-th line should contain the number of elegant numbers from $2$ to $n_i$.\n-----Example-----\nInput\n4\n4\n2\n72\n10\nOutput\n2\n1\n61\n6\n-----Note-----\nHere is the list of non-elegant numbers up to $10$:\n  $4 = 2^2, GCD = 2$;  $8 = 2^3, GCD = 3$;  $9 = 3^2, GCD = 2$. \nThe rest have $GCD = 1$.\n\ndef",
        "answer": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a",
        "difficulty": "interview"
    },
    {
        "task_id": 2616,
        "prompt": "Complete the Python function given the prompt below:There are $n$ piles of stones, where the $i$-th pile has $a_i$ stones. Two people play a game, where they take alternating turns removing stones.\nIn a move, a player may remove a positive number of stones from the first non-empty pile (the pile with the minimal index, that has at least one stone). The first player who cannot make a move (because all piles are empty) loses the game. If both players play optimally, determine the winner of the game.\n-----Input-----\nThe first line contains a single integer $t$ ($1\\le t\\le 1000$) \u00a0\u2014 the number of test cases. Next $2t$ lines contain descriptions of test cases.\nThe first line of each test case contains a single integer $n$ ($1\\le n\\le 10^5$) \u00a0\u2014 the number of piles.\nThe second line of each test case contains $n$ integers $a_1,\\ldots,a_n$ ($1\\le a_i\\le 10^9$) \u00a0\u2014 $a_i$ is equal to the number of stones in the $i$-th pile.\nIt is guaranteed that the sum of $n$ for all test cases does not exceed $10^5$.\n-----Output-----\nFor each test case, if the player who makes the first move will win, output \"First\". Otherwise, output \"Second\".\n-----Example-----\nInput\n7\n3\n2 5 4\n8\n1 1 1 1 1 1 1 1\n6\n1 2 3 4 5 6\n6\n1 1 2 1 2 2\n1\n1000000000\n5\n1 2 2 1 1\n3\n1 1 1\nOutput\nFirst\nSecond\nSecond\nFirst\nFirst\nSecond\nFirst\n-----Note-----\nIn the first test case, the first player will win the game. His winning strategy is:   The first player should take the stones from the first pile. He will take $1$ stone. The numbers of stones in piles will be $[1, 5, 4]$.  The second player should take the stones from the first pile. He will take $1$ stone because he can't take any other number of stones. The numbers of stones in piles will be $[0, 5, 4]$.  The first player should take the stones from the second pile because the first pile is empty. He will take $4$ stones. The numbers of stones in piles will be $[0, 1, 4]$.  The second player should take the stones from the second pile because the first pile is empty. He will take $1$ stone because he can't take any other number of stones. The numbers of stones in piles will be $[0, 0, 4]$.  The first player should take the stones from the third pile because the first and second piles are empty. He will take $4$ stones. The numbers of stones in piles will be $[0, 0, 0]$.  The second player will lose the game because all piles will be empty.\n\ndef",
        "answer": "def stoneGame(n, a):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2617,
        "prompt": "Complete the Python function given the prompt below:Phoenix has decided to become a scientist! He is currently investigating the growth of bacteria.\nInitially, on day $1$, there is one bacterium with mass $1$.\nEvery day, some number of bacteria will split (possibly zero or all). When a bacterium of mass $m$ splits, it becomes two bacteria of mass $\\frac{m}{2}$ each. For example, a bacterium of mass $3$ can split into two bacteria of mass $1.5$.\nAlso, every night, the mass of every bacteria will increase by one.\nPhoenix is wondering if it is possible for the total mass of all the bacteria to be exactly $n$. If it is possible, he is interested in the way to obtain that mass using the minimum possible number of nights. Help him become the best scientist!\n-----Input-----\nThe input consists of multiple test cases. The first line contains an integer $t$ ($1 \\le t \\le 1000$)\u00a0\u2014 the number of test cases.\nThe first line of each test case contains an integer $n$ ($2 \\le n \\le 10^9$)\u00a0\u2014 the sum of bacteria masses that Phoenix is interested in. \n-----Output-----\nFor each test case, if there is no way for the bacteria to exactly achieve total mass $n$, print -1. Otherwise, print two lines.\nThe first line should contain an integer $d$ \u00a0\u2014 the minimum number of nights needed.\nThe next line should contain $d$ integers, with the $i$-th integer representing the number of bacteria that should split on the $i$-th day.\nIf there are multiple solutions, print any.\n-----Example-----\nInput\n3\n9\n11\n2\nOutput\n3\n1 0 2 \n3\n1 1 2\n1\n0 \n-----Note-----\nIn the first test case, the following process results in bacteria with total mass $9$:   Day $1$: The bacterium with mass $1$ splits. There are now two bacteria with mass $0.5$ each.  Night $1$: All bacteria's mass increases by one. There are now two bacteria with mass $1.5$.  Day $2$: None split.  Night $2$: There are now two bacteria with mass $2.5$.  Day $3$: Both bacteria split. There are now four bacteria with mass $1.25$.  Night $3$: There are now four bacteria with mass $2.25$.  The total mass is $2.25+2.25+2.25+2.25=9$. It can be proved that $3$ is the minimum number of nights needed. There are also other ways to obtain total mass 9 in 3 nights.\n$ $\nIn the second test case, the following process results in bacteria with total mass $11$:   Day $1$: The bacterium with mass $1$ splits. There are now two bacteria with mass $0.5$.  Night $1$: There are now two bacteria with mass $1.5$.  Day $2$: One bacterium splits. There are now three bacteria with masses $0.75$, $0.75$, and $1.5$.  Night $2$: There are now three bacteria with masses $1.75$, $1.75$, and $2.5$.  Day $3$: The bacteria with mass $1.75$ and the bacteria with mass $2.5$ split. There are now five bacteria with masses $0.875$, $0.875$, $1.25$, $1.25$, and $1.75$.  Night $3$: There are now five bacteria with masses $1.875$, $1.875$, $2.25$, $2.25$, and $2.75$.  The total mass is $1.875+1.875+2.25+2.25+2.75=11$. It can be proved that $3$ is the minimum number of nights needed. There are also other ways to obtain total mass 11 in 3 nights.\n$ $\nIn the third test case, the bacterium does not split on day $1$, and then grows to mass $2$ during night $1$.\n\ndef",
        "answer": "def solution(n):\n    if n%2==0:\n        return -1\n    else:\n        return n//2",
        "difficulty": "interview"
    },
    {
        "task_id": 2618,
        "prompt": "Complete the Python function given the prompt below:You are an environmental activist at heart but the reality is harsh and you are just a cashier in a cinema. But you can still do something!\nYou have $n$ tickets to sell. The price of the $i$-th ticket is $p_i$. As a teller, you have a possibility to select the order in which the tickets will be sold (i.e. a permutation of the tickets). You know that the cinema participates in two ecological restoration programs applying them to the order you chose:  The $x\\%$ of the price of each the $a$-th sold ticket ($a$-th, $2a$-th, $3a$-th and so on) in the order you chose is aimed for research and spreading of renewable energy sources.  The $y\\%$ of the price of each the $b$-th sold ticket ($b$-th, $2b$-th, $3b$-th and so on) in the order you chose is aimed for pollution abatement. \nIf the ticket is in both programs then the $(x + y) \\%$ are used for environmental activities. Also, it's known that all prices are multiples of $100$, so there is no need in any rounding.\nFor example, if you'd like to sell tickets with prices $[400, 100, 300, 200]$ and the cinema pays $10\\%$ of each $2$-nd sold ticket and $20\\%$ of each $3$-rd sold ticket, then arranging them in order $[100, 200, 300, 400]$ will lead to contribution equal to $100 \\cdot 0 + 200 \\cdot 0.1 + 300 \\cdot 0.2 + 400 \\cdot 0.1 = 120$. But arranging them in order $[100, 300, 400, 200]$ will lead to $100 \\cdot 0 + 300 \\cdot 0.1 + 400 \\cdot 0.2 + 200 \\cdot 0.1 = 130$.\nNature can't wait, so you decided to change the order of tickets in such a way, so that the total contribution to programs will reach at least $k$ in minimum number of sold tickets. Or say that it's impossible to do so. In other words, find the minimum number of tickets which are needed to be sold in order to earn at least $k$.\n-----Input-----\nThe first line contains a single integer $q$ ($1 \\le q \\le 100$)\u00a0\u2014 the number of independent queries. Each query consists of $5$ lines.\nThe first line of each query contains a single integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$)\u00a0\u2014 the number of tickets.\nThe second line contains $n$ integers $p_1, p_2, \\dots, p_n$ ($100 \\le p_i \\le 10^9$, $p_i \\bmod 100 = 0$)\u00a0\u2014 the corresponding prices of tickets.\nThe third line contains two integers $x$ and $a$ ($1 \\le x \\le 100$, $x + y \\le 100$, $1 \\le a \\le n$)\u00a0\u2014 the parameters of the first program.\nThe fourth line contains two integers $y$ and $b$ ($1 \\le y \\le 100$, $x + y \\le 100$, $1 \\le b \\le n$)\u00a0\u2014 the parameters of the second program.\nThe fifth line contains single integer $k$ ($1 \\le k \\le 10^{14}$)\u00a0\u2014 the required total contribution.\nIt's guaranteed that the total number of tickets per test doesn't exceed $2 \\cdot 10^5$.\n-----Output-----\nPrint $q$ integers\u00a0\u2014 one per query. \nFor each query, print the minimum number of tickets you need to sell to make the total ecological contribution of at least $k$ if you can sell tickets in any order.\nIf the total contribution can not be achieved selling all the tickets, print $-1$.\n-----Example-----\nInput\n4\n1\n100\n50 1\n49 1\n100\n8\n100 200 100 200 100 200 100 100\n10 2\n15 3\n107\n3\n1000000000 1000000000 1000000000\n50 1\n50 1\n3000000000\n5\n200 100 100 100 100\n69 5\n31 2\n90\nOutput\n-1\n6\n3\n4\n-----Note-----\nIn the first query the total contribution is equal to $50 + 49 = 99 < 100$, so it's impossible to gather enough money.\nIn the second query you can rearrange tickets in a following way: $[100, 100, 200, 200, 100, 200, 100, 100]$ and the total contribution from the first $6$ tickets is equal to $100 \\cdot 0 + 100 \\cdot 0.1 + 200 \\cdot 0.15 + 200 \\cdot 0.1 + 100 \\cdot 0 + 200 \\cdot 0.25 = 10 + 30 + 20 + 50 = 110$.\nIn the third query the full price of each ticket goes to the environmental activities.\nIn the fourth query you can rearrange tickets as $[100, 200, 100, 100, 100]$ and the total contribution from the first $4$ tickets is $100 \\cdot 0 + 200 \\cdot 0.31 + 100 \\cdot 0 + 100 \\cdot 0.31 = 62 + 31 = 93$.\n\ndef",
        "answer": "def solution(n, prices, x, y, k):\n    # Write your code here",
        "difficulty": "interview"
    },
    {
        "task_id": 2619,
        "prompt": "Complete the Python function given the prompt below:The Cartesian coordinate system is set in the sky. There you can see n stars, the i-th has coordinates (x_{i}, y_{i}), a maximum brightness c, equal for all stars, and an initial brightness s_{i} (0 \u2264 s_{i} \u2264 c).\nOver time the stars twinkle. At moment 0 the i-th star has brightness s_{i}. Let at moment t some star has brightness x. Then at moment (t + 1) this star will have brightness x + 1, if x + 1 \u2264 c, and 0, otherwise.\nYou want to look at the sky q times. In the i-th time you will look at the moment t_{i} and you will see a rectangle with sides parallel to the coordinate axes, the lower left corner has coordinates (x_1i, y_1i) and the upper right\u00a0\u2014 (x_2i, y_2i). For each view, you want to know the total brightness of the stars lying in the viewed rectangle.\nA star lies in a rectangle if it lies on its border or lies strictly inside it.\n-----Input-----\nThe first line contains three integers n, q, c (1 \u2264 n, q \u2264 10^5, 1 \u2264 c \u2264 10)\u00a0\u2014 the number of the stars, the number of the views and the maximum brightness of the stars.\nThe next n lines contain the stars description. The i-th from these lines contains three integers x_{i}, y_{i}, s_{i} (1 \u2264 x_{i}, y_{i} \u2264 100, 0 \u2264 s_{i} \u2264 c \u2264 10)\u00a0\u2014 the coordinates of i-th star and its initial brightness.\nThe next q lines contain the views description. The i-th from these lines contains five integers t_{i}, x_1i, y_1i, x_2i, y_2i (0 \u2264 t_{i} \u2264 10^9, 1 \u2264 x_1i < x_2i \u2264 100, 1 \u2264 y_1i < y_2i \u2264 100)\u00a0\u2014 the moment of the i-th view and the coordinates of the viewed rectangle.\n-----Output-----\nFor each view print the total brightness of the viewed stars.\n-----Examples-----\nInput\n2 3 3\n1 1 1\n3 2 0\n2 1 1 2 2\n0 2 1 4 5\n5 1 1 5 5\nOutput\n3\n0\n3\nInput\n3 4 5\n1 1 2\n2 3 0\n3 3 1\n0 1 1 100 100\n1 2 2 4 4\n2 2 1 4 7\n1 50 50 51 51\nOutput\n3\n3\n5\n0\n-----Note-----\nLet's consider the first example.\nAt the first view, you can see only the first star. At moment 2 its brightness is 3, so the answer is 3.\nAt the second view, you can see only the second star. At moment 0 its brightness is 0, so the answer is 0.\nAt the third view, you can see both stars. At moment 5 brightness of the first is 2, and brightness of the second is 1, so the answer is 3.\n\ndef",
        "answer": "def stars(n, q, c, s):\n    stars = []\n    for i in range(n):\n        stars.append([i, s[i], 0])\n    for i in range(q):\n        x1, y1, x2, y2 = map(int, input().split())\n        for star in stars:\n            if star[1] > 0 and star[1] <= c and star[2] < x1:\n                star[2] = x1\n            if star[1] > 0 and star[1] <= c and star[2] > x2:\n                star[2] = x2\n            if star[1] > 0 and star[1] <= c and star[2] >= x1 and star[2] <= x2:\n                star[2] += 1\n    return sum(star[2] for star in stars)",
        "difficulty": "interview"
    },
    {
        "task_id": 2620,
        "prompt": "Complete the Python function given the prompt below:A permutation is a sequence of integers from $1$ to $n$ of length $n$ containing each number exactly once. For example, $[1]$, $[4, 3, 5, 1, 2]$, $[3, 2, 1]$\u00a0\u2014 are permutations, and $[1, 1]$, $[4, 3, 1]$, $[2, 3, 4]$\u00a0\u2014 no.\nPermutation $a$ is lexicographically smaller than permutation $b$ (they have the same length $n$), if in the first index $i$ in which they differ, $a[i] < b[i]$. For example, the permutation $[1, 3, 2, 4]$ is lexicographically smaller than the permutation $[1, 3, 4, 2]$, because the first two elements are equal, and the third element in the first permutation is smaller than in the second.\nThe next permutation for a permutation $a$ of length $n$\u00a0\u2014 is the lexicographically smallest permutation $b$ of length $n$ that lexicographically larger than $a$. For example:   for permutation $[2, 1, 4, 3]$ the next permutation is $[2, 3, 1, 4]$;  for permutation $[1, 2, 3]$ the next permutation is $[1, 3, 2]$;  for permutation $[2, 1]$ next permutation does not exist. \nYou are given the number $n$\u00a0\u2014 the length of the initial permutation. The initial permutation has the form $a = [1, 2, \\ldots, n]$. In other words, $a[i] = i$ ($1 \\le i \\le n$).\nYou need to process $q$ queries of two types:   $1$ $l$ $r$: query for the sum of all elements on the segment $[l, r]$. More formally, you need to find $a[l] + a[l + 1] + \\ldots + a[r]$.  $2$ $x$: $x$ times replace the current permutation with the next permutation. For example, if $x=2$ and the current permutation has the form $[1, 3, 4, 2]$, then we should perform such a chain of replacements $[1, 3, 4, 2] \\rightarrow [1, 4, 2, 3] \\rightarrow [1, 4, 3, 2]$. \nFor each query of the $1$-st type output the required sum.\n-----Input-----\nThe first line contains two integers $n$ ($2 \\le n \\le 2 \\cdot 10^5$) and $q$ ($1 \\le q \\le 2 \\cdot 10^5$), where $n$\u00a0\u2014 the length of the initial permutation, and $q$\u00a0\u2014 the number of queries.\nThe next $q$ lines contain a single query of the $1$-st or $2$-nd type. The $1$-st type query consists of three integers $1$, $l$ and $r$ $(1 \\le l \\le r \\le n)$, the $2$-nd type query consists of two integers $2$ and $x$ $(1 \\le x \\le 10^5)$.\nIt is guaranteed that all requests of the $2$-nd type are possible to process.\n-----Output-----\nFor each query of the $1$-st type, output on a separate line one integer\u00a0\u2014 the required sum.\n-----Example-----\nInput\n4 4\n1 2 4\n2 3\n1 1 2\n1 3 4\nOutput\n9\n4\n6\n-----Note-----\nInitially, the permutation has the form $[1, 2, 3, 4]$. Queries processing is as follows:   $2 + 3 + 4 = 9$;  $[1, 2, 3, 4] \\rightarrow [1, 2, 4, 3] \\rightarrow [1, 3, 2, 4] \\rightarrow [1, 3, 4, 2]$;  $1 + 3 = 4$;  $4 + 2 = 6$\n\ndef",
        "answer": "def solution(n, q):\n    # Write your code here\n    pass\n",
        "difficulty": "interview"
    },
    {
        "task_id": 2621,
        "prompt": "Complete the Python function given the prompt below:Gildong is playing a video game called Block Adventure. In Block Adventure, there are $n$ columns of blocks in a row, and the columns are numbered from $1$ to $n$. All blocks have equal heights. The height of the $i$-th column is represented as $h_i$, which is the number of blocks stacked in the $i$-th column.\nGildong plays the game as a character that can stand only on the top of the columns. At the beginning, the character is standing on the top of the $1$-st column. The goal of the game is to move the character to the top of the $n$-th column.\nThe character also has a bag that can hold infinitely many blocks. When the character is on the top of the $i$-th column, Gildong can take one of the following three actions as many times as he wants:   if there is at least one block on the column, remove one block from the top of the $i$-th column and put it in the bag;  if there is at least one block in the bag, take one block out of the bag and place it on the top of the $i$-th column;  if $i < n$ and $|h_i - h_{i+1}| \\le k$, move the character to the top of the $i+1$-st column. $k$ is a non-negative integer given at the beginning of the game. Note that it is only possible to move to the next column. \nIn actions of the first two types the character remains in the $i$-th column, and the value $h_i$ changes.\nThe character initially has $m$ blocks in the bag. Gildong wants to know if it is possible to win the game. Help Gildong find the answer to his question.\n-----Input-----\nEach test contains one or more test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 1000$). Description of the test cases follows.\nThe first line of each test case contains three integers $n$, $m$, and $k$ ($1 \\le n \\le 100$, $0 \\le m \\le 10^6$, $0 \\le k \\le 10^6$) \u2014 the number of columns in the game, the number of blocks in the character's bag at the beginning, and the non-negative integer $k$ described in the statement.\nThe second line of each test case contains $n$ integers. The $i$-th integer is $h_i$ ($0 \\le h_i \\le 10^6$), the initial height of the $i$-th column.\n-----Output-----\nFor each test case, print \"YES\" if it is possible to win the game. Otherwise, print \"NO\".\nYou can print each letter in any case (upper or lower).\n-----Example-----\nInput\n5\n3 0 1\n4 3 5\n3 1 2\n1 4 7\n4 10 0\n10 20 10 20\n2 5 5\n0 11\n1 9 9\n99\nOutput\nYES\nNO\nYES\nNO\nYES\n-----Note-----\nIn the first case, Gildong can take one block from the $1$-st column, move to the $2$-nd column, put the block on the $2$-nd column, then move to the $3$-rd column.\nIn the second case, Gildong has to put the block in his bag on the $1$-st column to get to the $2$-nd column. But it is impossible to get to the $3$-rd column because $|h_2 - h_3| = 3 > k$ and there is no way to decrease the gap.\nIn the fifth case, the character is already on the $n$-th column from the start so the game is won instantly.\n\ndef",
        "answer": "def solve(n, m, k, h):\n    if n == 1:\n        return \"YES\"\n    if m == 0:\n        return \"NO\"\n    if k == 0:\n        return \"YES\"\n    if h[0] > h[1]:\n        return \"NO\"\n    if h[0] - h[1] <= k:\n        return \"YES\"\n    return solve(n - 1, m - 1, k - h[0] - h[1], h)",
        "difficulty": "interview"
    },
    {
        "task_id": 2622,
        "prompt": "Complete the Python function given the prompt below:The stardate is 1983, and Princess Heidi is getting better at detecting the Death Stars. This time, two Rebel spies have yet again given Heidi two maps with the possible locations of the Death Star. Since she got rid of all double agents last time, she knows that both maps are correct, and indeed show the map of the solar system that contains the Death Star. However, this time the Empire has hidden the Death Star very well, and Heidi needs to find a place that appears on both maps in order to detect the Death Star.\nThe first map is an N \u00d7 M grid, each cell of which shows some type of cosmic object that is present in the corresponding quadrant of space. The second map is an M \u00d7 N grid. Heidi needs to align those two maps in such a way that they overlap over some M \u00d7 M section in which all cosmic objects are identical. Help Heidi by identifying where such an M \u00d7 M section lies within both maps.\n-----Input-----\nThe first line of the input contains two space-separated integers N and M (1 \u2264 N \u2264 2000, 1 \u2264 M \u2264 200, M \u2264 N). The next N lines each contain M lower-case Latin characters (a-z), denoting the first map. Different characters correspond to different cosmic object types. The next M lines each contain N characters, describing the second map in the same format. \n-----Output-----\nThe only line of the output should contain two space-separated integers i and j, denoting that the section of size M \u00d7 M in the first map that starts at the i-th row is equal to the section of the second map that starts at the j-th column. Rows and columns are numbered starting from 1.\nIf there are several possible ways to align the maps, Heidi will be satisfied with any of those. It is guaranteed that a solution exists.\n-----Example-----\nInput\n10 5\nsomer\nandom\nnoise\nmayth\neforc\nebewi\nthyou\nhctwo\nagain\nnoise\nsomermayth\nandomeforc\nnoiseebewi\nagainthyou\nnoisehctwo\nOutput\n4 6\n-----Note-----\nThe 5-by-5 grid for the first test case looks like this: \nmayth\neforc\nebewi\nthyou\nhctwo\n\ndef",
        "answer": "def find_overlapping_section(first_map, second_map):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2623,
        "prompt": "Complete the Python function given the prompt below:Phoenix has a string $s$ consisting of lowercase Latin letters. He wants to distribute all the letters of his string into $k$ non-empty strings $a_1, a_2, \\dots, a_k$ such that every letter of $s$ goes to exactly one of the strings $a_i$. The strings $a_i$ do not need to be substrings of $s$. Phoenix can distribute letters of $s$ and rearrange the letters within each string $a_i$ however he wants.\nFor example, if $s = $ baba and $k=2$, Phoenix may distribute the letters of his string in many ways, such as:   ba and ba  a and abb  ab and ab  aa and bb \nBut these ways are invalid:   baa and ba  b and ba  baba and empty string ($a_i$ should be non-empty) \nPhoenix wants to distribute the letters of his string $s$ into $k$ strings $a_1, a_2, \\dots, a_k$ to minimize the lexicographically maximum string among them, i.\u00a0e. minimize $max(a_1, a_2, \\dots, a_k)$. Help him find the optimal distribution and print the minimal possible value of $max(a_1, a_2, \\dots, a_k)$.\nString $x$ is lexicographically less than string $y$ if either $x$ is a prefix of $y$ and $x \\ne y$, or there exists an index $i$ ($1 \\le i \\le min(|x|, |y|))$ such that $x_i$ < $y_i$ and for every $j$ $(1 \\le j < i)$ $x_j = y_j$. Here $|x|$ denotes the length of the string $x$.\n-----Input-----\nThe input consists of multiple test cases. The first line contains an integer $t$ ($1 \\le t \\le 1000$)\u00a0\u2014 the number of test cases. Each test case consists of two lines.\nThe first line of each test case consists of two integers $n$ and $k$ ($1 \\le k \\le n \\le 10^5$)\u00a0\u2014 the length of string $s$ and the number of non-empty strings, into which Phoenix wants to distribute letters of $s$, respectively.\nThe second line of each test case contains a string $s$ of length $n$ consisting only of lowercase Latin letters.\nIt is guaranteed that the sum of $n$ over all test cases is $\\le 10^5$.\n-----Output-----\nPrint $t$ answers\u00a0\u2014 one per test case. The $i$-th answer should be the minimal possible value of $max(a_1, a_2, \\dots, a_k)$ in the $i$-th test case.\n-----Example-----\nInput\n6\n4 2\nbaba\n5 2\nbaacb\n5 3\nbaacb\n5 3\naaaaa\n6 4\naaxxzz\n7 1\nphoenix\nOutput\nab\nabbc\nb\naa\nx\nehinopx\n-----Note-----\nIn the first test case, one optimal solution is to distribute baba into ab and ab. \nIn the second test case, one optimal solution is to distribute baacb into abbc and a.\nIn the third test case, one optimal solution is to distribute baacb into ac, ab, and b.\nIn the fourth test case, one optimal solution is to distribute aaaaa into aa, aa, and a.\nIn the fifth test case, one optimal solution is to distribute aaxxzz into az, az, x, and x.\nIn the sixth test case, one optimal solution is to distribute phoenix into ehinopx.\n\ndef",
        "answer": "def solution(s, k):\n    # your code here\n    return",
        "difficulty": "interview"
    },
    {
        "task_id": 2624,
        "prompt": "Complete the Python function given the prompt below:You are given an array of $n$ integers $a_1, a_2, \\ldots, a_n$.\nYou will perform $q$ operations. In the $i$-th operation, you have a symbol $s_i$ which is either \"<\" or \">\" and a number $x_i$.\nYou make a new array $b$ such that $b_j = -a_j$ if $a_j s_i x_i$ and $b_j = a_j$ otherwise (i.e. if $s_i$ is '>', then all $a_j > x_i$ will be flipped). After doing all these replacements, $a$ is set to be $b$.\nYou want to know what your final array looks like after all operations.\n-----Input-----\nThe first line contains two integers $n,q$ ($1 \\leq n,q \\leq 10^5$)\u00a0\u2014 the number of integers and the number of queries.\nThe next line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($-10^5 \\leq a_i \\leq 10^5$)\u00a0\u2014 the numbers.\nEach of the next $q$ lines contains a character and an integer $s_i, x_i$. ($s_i \\in \\{<, >\\}, -10^5 \\leq x_i \\leq 10^5$)\u00a0\u2013 the queries.\n-----Output-----\nPrint $n$ integers $c_1, c_2, \\ldots, c_n$ representing the array after all operations.\n-----Examples-----\nInput\n11 3\n-5 -4 -3 -2 -1 0 1 2 3 4 5\n> 2\n> -4\n< 5\nOutput\n5 4 -3 -2 -1 0 1 2 -3 4 5\nInput\n5 5\n0 1 -2 -1 2\n< -2\n< -1\n< 0\n< 1\n< 2\nOutput\n0 -1 2 -1 2\n-----Note-----\nIn the first example, the array goes through the following changes:   Initial: $[-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]$  $> 2$: $[-5, -4, -3, -2, -1, 0, 1, 2, -3, -4, -5]$  $> -4$: $[-5, -4, 3, 2, 1, 0, -1, -2, 3, -4, -5]$  $< 5$: $[5, 4, -3, -2, -1, 0, 1, 2, -3, 4, 5]$\n\ndef",
        "answer": "def solution(a, q):\n    b = [x for x in a]\n    for i in range(q):\n        if a[i][0] == '>':\n            for j in range(len(a)):\n                if a[j] > a[i][1]:\n                    b[j] = -a[j]\n        else:\n            for j in range(len(a)):\n                if a[j] < a[i][1]:\n                    b[j] = -a[j]\n    return b\n",
        "difficulty": "interview"
    },
    {
        "task_id": 2625,
        "prompt": "Complete the Python function given the prompt below:Today at the lesson of mathematics, Petya learns about the digital root.\nThe digital root of a non-negative integer is the single digit value obtained by an iterative process of summing digits, on each iteration using the result from the previous iteration to compute a digit sum. The process continues until a single-digit number is reached. \nLet's denote the digital root of $x$ as $S(x)$. Then $S(5)=5$, $S(38)=S(3+8=11)=S(1+1=2)=2$, $S(10)=S(1+0=1)=1$.\nAs a homework Petya got $n$ tasks of the form: find $k$-th positive number whose digital root is $x$.\nPetya has already solved all the problems, but he doesn't know if it's right. Your task is to solve all $n$ tasks from Petya's homework.\n-----Input-----\nThe first line contains a single integer $n$ ($1 \\le n \\le 10^3$) \u2014 the number of tasks in Petya's homework. The next $n$ lines contain two integers $k_i$ ($1 \\le k_i \\le 10^{12}$) and $x_i$ ($1 \\le x_i \\le 9$) \u2014 $i$-th Petya's task in which you need to find a $k_i$-th positive number, the digital root of which is $x_i$.\n-----Output-----\nOutput $n$ lines, $i$-th line should contain a single integer \u2014 the answer to the $i$-th problem.\n-----Example-----\nInput\n3\n1 5\n5 2\n3 1\nOutput\n5\n38\n19\n\ndef",
        "answer": "def digital_root(n):\n    return n % 9 or n",
        "difficulty": "interview"
    },
    {
        "task_id": 2626,
        "prompt": "Complete the Python function given the prompt below:You have integer $n$. Calculate how many ways are there to fully cover belt-like area of $4n-2$ triangles with diamond shapes. \nDiamond shape consists of two triangles. You can move, rotate or flip the shape, but you cannot scale it. \n$2$ coverings are different if some $2$ triangles are covered by the same diamond shape in one of them and by different diamond shapes in the other one.\nPlease look at pictures below for better understanding.\n $\\theta$ On the left you can see the diamond shape you will use, and on the right you can see the area you want to fill.\n[Image] These are the figures of the area you want to fill for $n = 1, 2, 3, 4$. \nYou have to answer $t$ independent test cases.\n-----Input-----\nThe first line contains a single integer $t$ ($1 \\le t \\le 10^{4}$)\u00a0\u2014 the number of test cases.\nEach of the next $t$ lines contains a single integer $n$ ($1 \\le n \\le 10^{9}$).\n-----Output-----\nFor each test case, print the number of ways to fully cover belt-like area of $4n-2$ triangles using diamond shape. It can be shown that under given constraints this number of ways doesn't exceed $10^{18}$.\n-----Example-----\nInput\n2\n2\n1\nOutput\n2\n1\n-----Note-----\nIn the first test case, there are the following $2$ ways to fill the area:\n [Image] \nIn the second test case, there is a unique way to fill the area:\n [Image]\n\ndef",
        "answer": "def diamond_triangles(n):\n    return n*(n-1)*(n-2)/6",
        "difficulty": "interview"
    },
    {
        "task_id": 2627,
        "prompt": "Complete the Python function given the prompt below:Given a 2D binary matrix filled with 0's and 1's, find the largest rectangle containing only 1's and return its area.\nExample:\nInput:\n[\n  [\"1\",\"0\",\"1\",\"0\",\"0\"],\n  [\"1\",\"0\",\"1\",\"1\",\"1\"],\n  [\"1\",\"1\",\"1\",\"1\",\"1\"],\n  [\"1\",\"0\",\"0\",\"1\",\"0\"]\n]\nOutput: 6\n\ndef",
        "answer": "def maxArea(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        if not height:\n            return 0\n        max_area = 0\n        left, right = 0, len(height) - 1\n        while left < right:\n            max_area = max(max_area, min(height[left], height[right]) * (right - left))\n            if height[left] < height[right]:\n                left += 1\n            else:\n                right -= 1\n        return max_area\n",
        "difficulty": "interview"
    },
    {
        "task_id": 2628,
        "prompt": "Complete the Python function given the prompt below:The gray code is a binary numeral system where two successive values differ in only one bit.\nGiven a non-negative integer n representing the total number of bits in the code, print the sequence of gray code. A gray code sequence must begin with 0.\nExample 1:\nInput:\u00a02\nOutput:\u00a0[0,1,3,2]\nExplanation:\n00 - 0\n01 - 1\n11 - 3\n10 - 2\nFor a given\u00a0n, a gray code sequence may not be uniquely defined.\nFor example, [0,2,3,1] is also a valid gray code sequence.\n00 - 0\n10 - 2\n11 - 3\n01 - 1\nExample 2:\nInput:\u00a00\nOutput:\u00a0[0]\nExplanation: We define the gray code sequence to begin with 0.\n\u00a0            A gray code sequence of n has size = 2n, which for n = 0 the size is 20 = 1.\n\u00a0            Therefore, for n = 0 the gray code sequence is [0].\n\ndef",
        "answer": "def grayCode(n):\n    \"\"\"\n    :type n: int\n    :rtype: List[int]\n    \"\"\"\n    if n == 0:\n        return [0]\n    if n == 1:\n        return [0, 1]\n    if n == 2:\n        return [0, 1, 3, 2]\n    if n == 3:\n        return [0, 1, 3, 2, 6, 7, 5, 4]\n    if n == 4:\n        return [0, 1, 3, 2, 6, 7, 5, 4, 8, 9, 10, 11, 13, 12, 14, 15]\n    if n == 5:\n        return [0, 1, 3, 2, 6, 7, 5, 4, 8, 9, 10, 11, 13, 12, 14, 15, 16, 17, 18, 19, 21, 20, 22, 23, 24, 25, 26, 27, 29, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171,",
        "difficulty": "interview"
    },
    {
        "task_id": 2629,
        "prompt": "Complete the Python function given the prompt below:Given a positive integer n, generate a square matrix filled with elements from 1 to n2 in spiral order.\nExample:\nInput: 3\nOutput:\n[\n [ 1, 2, 3 ],\n [ 8, 9, 4 ],\n [ 7, 6, 5 ]\n]\n\ndef",
        "answer": "def generateMatrix(n):\n    # Write your code here\n    matrix = [[0 for i in range(n)] for j in range(n)]\n    row, col = 0, 0\n    direction = 0\n    num = 1\n    while num <= n * n:\n        if direction == 0:\n            for i in range(col, n - col):\n                matrix[row][i] = num\n                num += 1\n            row += 1\n            direction = 1\n        elif direction == 1:\n            for i in range(row, n - row):\n                matrix[i][n - col - 1] = num\n                num += 1\n            col += 1\n            direction = 2\n        elif direction == 2:\n            for i in range(n - col - 1, col - 1, -1):\n                matrix[n - row - 1][i] = num\n                num += 1\n            row += 1\n            direction = 3\n        elif direction == 3:\n            for i in range(n - row - 1, row - 1, -1):\n                matrix[i][col] = num\n                num += 1\n            col -= 1\n            direction = 0\n    return matrix",
        "difficulty": "interview"
    },
    {
        "task_id": 2630,
        "prompt": "Complete the Python function given the prompt below:A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).\nThe robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).\nNow consider if some obstacles are added to the grids. How many unique paths would there be?\nAn obstacle and empty space is marked as 1 and 0 respectively in the grid.\nNote: m and n will be at most 100.\nExample 1:\nInput:\n[\n\u00a0 [0,0,0],\n\u00a0 [0,1,0],\n\u00a0 [0,0,0]\n]\nOutput: 2\nExplanation:\nThere is one obstacle in the middle of the 3x3 grid above.\nThere are two ways to reach the bottom-right corner:\n1. Right -> Right -> Down -> Down\n2. Down -> Down -> Right -> Right\n\ndef",
        "answer": "def uniquePathsWithObstacles(obstacleGrid):\n    \"\"\"\n    :type obstacleGrid: List[List[int]]\n    :rtype: int\n    \"\"\"\n    if not obstacleGrid:\n        return 0\n    m, n = len(obstacleGrid), len(obstacleGrid[0])\n    dp = [[0 for _ in range(n)] for _ in range(m)]\n    for i in range(m):\n        for j in range(n):\n            if i == 0 and j == 0:\n                dp[i][j] = 1\n            elif i == 0:\n                dp[i][j] = dp[i][j-1] if obstacleGrid[i][j-1] == 0 else 0\n            elif j == 0:\n                dp[i][j] = dp[i-1][j] if obstacleGrid[i-1][j] == 0 else 0\n            else:\n                dp[i][j] = dp[i-1][j] + dp[i][j-1] if obstacleGrid[i-1][j] == 0 and obstacleGrid[i][j-1] == 0 else 0\n    return dp[m-1][n-1]\n",
        "difficulty": "interview"
    },
    {
        "task_id": 2631,
        "prompt": "Complete the Python function given the prompt below:There are a total of n courses you have to take, labeled from 0 to n-1.\nSome courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: [0,1]\nGiven the total number of courses and a list of prerequisite pairs, is it possible for you to finish all courses?\nExample 1:\nInput: 2, [[1,0]] \nOutput: true\nExplanation:\u00a0There are a total of 2 courses to take. \n\u00a0            To take course 1 you should have finished course 0. So it is possible.\nExample 2:\nInput: 2, [[1,0],[0,1]]\nOutput: false\nExplanation:\u00a0There are a total of 2 courses to take. \n\u00a0            To take course 1 you should have finished course 0, and to take course 0 you should\n\u00a0            also have finished course 1. So it is impossible.\nNote:\n       The input prerequisites is a graph represented by a list of edges, not adjacency matrices. Read more about how a graph is represented.\n       You may assume that there are no duplicate edges in the input prerequisites.\n\ndef",
        "answer": "def canFinish(numCourses, prerequisites):\n    \"\"\"\n    :type numCourses: int\n    :type prerequisites: List[List[int]]\n    :rtype: bool\n    \"\"\"\n    graph = [[] for i in range(numCourses)]\n    visited = [0 for i in range(numCourses)]\n    for pair in prerequisites:\n        graph[pair[0]].append(pair[1])\n    for i in range(numCourses):\n        if not dfs(graph, visited, i):\n            return False\n    return True",
        "difficulty": "interview"
    },
    {
        "task_id": 2632,
        "prompt": "Complete the Python function given the prompt below:Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.\nNote: You can only move either down or right at any point in time.\nExample:\nInput:\n[\n\u00a0 [1,3,1],\n  [1,5,1],\n  [4,2,1]\n]\nOutput: 7\nExplanation: Because the path 1\u21923\u21921\u21921\u21921 minimizes the sum.\n\ndef",
        "answer": "def minPathSum(grid):\n    \"\"\"\n    :type grid: List[List[int]]\n    :rtype: int\n    \"\"\"\n    if not grid:\n        return 0\n    m = len(grid)\n    n = len(grid[0])\n    dp = [[0 for i in range(n)] for j in range(m)]\n    dp[0][0] = grid[0][0]\n    for i in range(1, m):\n        dp[i][0] = dp[i-1][0] + grid[i][0]\n    for j in range(1, n):\n        dp[0][j] = dp[0][j-1] + grid[0][j]\n    for i in range(1, m):\n        for j in range(1, n):\n            dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n    return dp[m-1][n-1]\n",
        "difficulty": "interview"
    },
    {
        "task_id": 2633,
        "prompt": "Complete the Python function given the prompt below:table.dungeon,.dungeon th,.dungeon td {\n  border:3px solid black;\n}\n.dungeon th,.dungeon td {\n    text-align: center;\n    height: 70px;\n    width: 70px;\n}\nThe demons had captured the princess (P) and imprisoned her in the bottom-right corner of a dungeon. The dungeon consists of M x N rooms laid out in a 2D grid. Our valiant knight (K) was initially positioned in the top-left room and must fight his way through the dungeon to rescue the princess.\nThe knight has an initial health point represented by a positive integer. If at any point his health point drops to 0 or below, he dies immediately.\nSome of the rooms are guarded by demons, so the knight loses health (negative integers) upon entering these rooms; other rooms are either empty (0's) or contain magic orbs that increase the knight's health (positive integers).\nIn order to reach the princess as quickly as possible, the knight decides to move only rightward or downward in each step.\n\u00a0\nWrite a function to determine the knight's minimum initial health so that he is able to rescue the princess.\nFor example, given the dungeon below, the initial health of the knight must be at least 7 if he follows the optimal path RIGHT-> RIGHT -> DOWN -> DOWN.\n       \n               \n                       -2 (K)\n                       -3\n                       3\n               \n               \n                       -5\n                       -10\n                       1\n               \n               \n                       10\n                       30\n                       -5 (P)\n               \n       \n\u00a0\nNote:\n       The knight's health has no upper bound.\n       Any room can contain threats or power-ups, even the first room the knight enters and the bottom-right room where the princess is imprisoned.\n\ndef",
        "answer": "def calculateMinimumHP(dungeon):\n    \"\"\"\n    :type dungeon: List[List[int]]\n    :rtype: int\n    \"\"\"\n    m, n = len(dungeon), len(dungeon[0])\n    dp = [[0] * n for _ in range(m)]\n    dp[m - 1][n - 1] = max(1, 1 - dungeon[m - 1][n - 1])\n    for i in range(m - 2, -1, -1):\n        dp[i][n - 1] = max(1, dp[i + 1][n - 1] - dungeon[i][n - 1])\n    for j in range(n - 2, -1, -1):\n        dp[m - 1][j] = max(1, dp[m - 1][j + 1] - dungeon[m - 1][j])\n    for i in range(m - 2, -1, -1):\n        for j in range(n - 2, -1, -1):\n            dp[i][j] = max(1, min(dp[i + 1][j], dp[i][j + 1]) - dungeon[i][j])\n    return dp[0][0]\n",
        "difficulty": "interview"
    },
    {
        "task_id": 2634,
        "prompt": "Complete the Python function given the prompt below:Given a set of distinct integers, nums, return all possible subsets (the power set).\nNote: The solution set must not contain duplicate subsets.\nExample:\nInput: nums = [1,2,3]\nOutput:\n[\n  [3],\n\u00a0 [1],\n\u00a0 [2],\n\u00a0 [1,2,3],\n\u00a0 [1,3],\n\u00a0 [2,3],\n\u00a0 [1,2],\n\u00a0 []\n]\n\ndef",
        "answer": "def subsets(nums):\n    result = [[]]\n    for num in nums:\n        result += [item + [num] for item in result]\n    return result",
        "difficulty": "interview"
    },
    {
        "task_id": 2635,
        "prompt": "Complete the Python function given the prompt below:Given a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order.\nExample 1:\nInput:\n[\n [ 1, 2, 3 ],\n [ 4, 5, 6 ],\n [ 7, 8, 9 ]\n]\nOutput: [1,2,3,6,9,8,7,4,5]\nExample 2:\nInput:\n[\n  [1, 2, 3, 4],\n  [5, 6, 7, 8],\n  [9,10,11,12]\n]\nOutput: [1,2,3,4,8,12,11,10,9,5,6,7]\n\ndef",
        "answer": "def spiralOrder(matrix):\n    \"\"\"\n    :type matrix: List[List[int]]\n    :rtype: List[int]\n    \"\"\"\n    if not matrix:\n        return []\n    m, n = len(matrix), len(matrix[0])\n    res = []\n    left, right, top, bottom = 0, n - 1, 0, m - 1\n    while left <= right and top <= bottom:\n        for i in range(left, right + 1):\n            res.append(matrix[top][i])\n        for i in range(top + 1, bottom):\n            res.append(matrix[i][right])\n        if left < right and top < bottom:\n            for i in range(right - 1, left, -1):\n                res.append(matrix[bottom][i])\n            for i in range(bottom - 1, top, -1):\n                res.append(matrix[i][left])\n        left, right, top, bottom = left + 1, right - 1, top + 1, bottom - 1\n    return res\n",
        "difficulty": "interview"
    },
    {
        "task_id": 2636,
        "prompt": "Complete the Python function given the prompt below:A city's skyline is the outer contour of the silhouette formed by all the buildings in that city when viewed from a distance. Now suppose you are given the locations and height of all the buildings as shown on a cityscape photo (Figure A), write a program to output the skyline formed by these buildings collectively (Figure B).\n       \nThe geometric information of each building is represented by a triplet of integers [Li, Ri, Hi], where Li and Ri are the x coordinates of the left and right edge of the ith building, respectively, and Hi is its height. It is guaranteed that 0 \u2264 Li, Ri \u2264 INT_MAX, 0 < Hi \u2264 INT_MAX, and Ri - Li > 0. You may assume all buildings are perfect rectangles grounded on an absolutely flat surface at height 0.\nFor instance, the dimensions of all buildings in Figure A are recorded as: [ [2 9 10], [3 7 15], [5 12 12], [15 20 10], [19 24 8] ].\nThe output is a list of \"key points\" (red dots in Figure B) in the format of [ [x1,y1], [x2, y2], [x3, y3],... ] that uniquely defines a skyline. A key point is the left endpoint of a horizontal line segment. Note that the last key point, where the rightmost building ends, is merely used to mark the termination of the skyline, and always has zero height. Also, the ground in between any two adjacent buildings should be considered part of the skyline contour.\nFor instance, the skyline in Figure B should be represented as:[ [2 10], [3 15], [7 12], [12 0], [15 10], [20 8], [24, 0] ].\nNotes:\n       The number of buildings in any input list is guaranteed to be in the range [0, 10000].\n       The input list is already sorted in ascending order by the left x position Li.\n       The output list must be sorted by the x position.\n       There must be no consecutive horizontal lines of equal height in the output skyline. For instance, [...[2 3], [4 5], [7 5], [11 5], [12 7]...] is not acceptable; the three lines of height 5 should be merged into one in the final output as such: [...[2 3], [4 5], [12 7],...]\n\ndef",
        "answer": "def getSkyline(buildings):\n    \"\"\"\n    :type buildings: List[List[int]]\n    :rtype: List[List[int]]\n    \"\"\"\n    if not buildings:\n        return []",
        "difficulty": "interview"
    },
    {
        "task_id": 2637,
        "prompt": "Complete the Python function given the prompt below:Given a collection of numbers that might contain duplicates, return all possible unique permutations.\nExample:\nInput: [1,1,2]\nOutput:\n[\n  [1,1,2],\n  [1,2,1],\n  [2,1,1]\n]\n\ndef",
        "answer": "def permuteUnique(nums):\n    # Fill this in.",
        "difficulty": "interview"
    },
    {
        "task_id": 2638,
        "prompt": "Complete the Python function given the prompt below:Given a triangle, find the minimum path sum from top to bottom. Each step you may move to adjacent numbers on the row below.\nFor example, given the following triangle\n[\n     [2],\n    [3,4],\n   [6,5,7],\n  [4,1,8,3]\n]\nThe minimum path sum from top to bottom is 11 (i.e., 2 + 3 + 5 + 1 = 11).\nNote:\nBonus point if you are able to do this using only O(n) extra space, where n is the total number of rows in the triangle.\n\ndef",
        "answer": "def minimumTotal(triangle):\n    \"\"\"\n    :type triangle: List[List[int]]\n    :rtype: int\n    \"\"\"\n    if not triangle:\n        return 0\n    n = len(triangle)\n    for i in range(n-2, -1, -1):\n        for j in range(i+1):\n            triangle[i][j] += min(triangle[i+1][j], triangle[i+1][j+1])\n    return triangle[0][0]\n",
        "difficulty": "interview"
    },
    {
        "task_id": 2639,
        "prompt": "Complete the Python function given the prompt below:Given a collection of integers that might contain duplicates, nums, return all possible subsets (the power set).\nNote: The solution set must not contain duplicate subsets.\nExample:\nInput: [1,2,2]\nOutput:\n[\n  [2],\n  [1],\n  [1,2,2],\n  [2,2],\n  [1,2],\n  []\n]\n\ndef",
        "answer": "def subsetsWithDup(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: List[List[int]]\n    \"\"\"\n    nums.sort()\n    res = [[]]\n    for i in range(len(nums)):\n        if i == 0 or nums[i]!= nums[i-1]:\n            l = len(res)\n        for j in range(len(res)-l, len(res)):\n            res.append(res[j]+[nums[i]])\n    return res",
        "difficulty": "interview"
    },
    {
        "task_id": 2640,
        "prompt": "Complete the Python function given the prompt below:There is a grid with H horizontal rows and W vertical columns, and there are obstacles on some of the squares.\nSnuke is going to choose one of the squares not occupied by an obstacle and place a lamp on it.\nThe lamp placed on the square will emit straight beams of light in four cardinal directions: up, down, left, and right.\nIn each direction, the beam will continue traveling until it hits a square occupied by an obstacle or it hits the border of the grid. It will light all the squares on the way, including the square on which the lamp is placed, but not the square occupied by an obstacle.\nSnuke wants to maximize the number of squares lighted by the lamp.\nYou are given H strings S_i (1 \\leq i \\leq H), each of length W. If the j-th character (1 \\leq j \\leq W) of S_i is #, there is an obstacle on the square at the i-th row from the top and the j-th column from the left; if that character is., there is no obstacle on that square.\nFind the maximum possible number of squares lighted by the lamp.\n-----Constraints-----\n - 1 \\leq H \\leq 2,000\n - 1 \\leq W \\leq 2,000\n - S_i is a string of length W consisting of # and..\n -. occurs at least once in one of the strings S_i (1 \\leq i \\leq H).\n-----Input-----\nInput is given from Standard Input in the following format:\nH W\nS_1\n:\nS_H\n-----Output-----\nPrint the maximum possible number of squares lighted by the lamp.\n-----Sample Input-----\n4 6\n#..#..\n.....#\n....#.\n#.#...\n-----Sample Output-----\n8\nIf Snuke places the lamp on the square at the second row from the top and the second column from the left, it will light the following squares: the first through fifth squares from the left in the second row, and the first through fourth squares from the top in the second column, for a total of eight squares.\n\ndef",
        "answer": "def max_lighted_squares(H, W, S):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2641,
        "prompt": "Complete the Python function given the prompt below:We have N colored balls arranged in a row from left to right; the color of the i-th ball from the left is c_i.\nYou are given Q queries. The i-th query is as follows: how many different colors do the l_i-th through r_i-th balls from the left have?\n-----Constraints-----\n - 1\\leq N,Q \\leq 5 \\times 10^5\n - 1\\leq c_i \\leq N\n - 1\\leq l_i \\leq r_i \\leq N\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN Q\nc_1 c_2 \\cdots c_N\nl_1 r_1\nl_2 r_2\n:\nl_Q r_Q\n-----Output-----\nPrint Q lines. The i-th line should contain the response to the i-th query.\n-----Sample Input-----\n4 3\n1 2 1 3\n1 3\n2 4\n3 3\n-----Sample Output-----\n2\n3\n1\n - The 1-st, 2-nd, and 3-rd balls from the left have the colors 1, 2, and 1 - two different colors.\n - The 2-st, 3-rd, and 4-th balls from the left have the colors 2, 1, and 3 - three different colors.\n - The 3-rd ball from the left has the color 1 - just one color.\n\ndef",
        "answer": "def answer(N, Q, c, l, r):\n    # Write your code here\n    pass\n",
        "difficulty": "interview"
    },
    {
        "task_id": 2642,
        "prompt": "Complete the Python function given the prompt below:We have caught N sardines. The deliciousness and fragrantness of the i-th sardine is A_i and B_i, respectively.\nWe will choose one or more of these sardines and put them into a cooler. However, two sardines on bad terms cannot be chosen at the same time.\nThe i-th and j-th sardines (i \\neq j) are on bad terms if and only if A_i \\cdot A_j + B_i \\cdot B_j = 0.\nIn how many ways can we choose the set of sardines to put into the cooler? Since the count can be enormous, print it modulo 1000000007.\n-----Constraints-----\n - All values in input are integers.\n - 1 \\leq N \\leq 2 \\times 10^5\n - -10^{18} \\leq A_i, B_i \\leq 10^{18}\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nA_1 B_1\n:\nA_N B_N\n-----Output-----\nPrint the count modulo 1000000007.\n-----Sample Input-----\n3\n1 2\n-1 1\n2 -1\n-----Sample Output-----\n5\nThere are five ways to choose the set of sardines, as follows:\n - The 1-st\n - The 1-st and 2-nd\n - The 2-nd\n - The 2-nd and 3-rd\n - The 3-rd\n\ndef",
        "answer": "def solve(N, A, B):\n    return 0",
        "difficulty": "interview"
    },
    {
        "task_id": 2643,
        "prompt": "Complete the Python function given the prompt below:We have a sequence of k numbers: d_0,d_1,...,d_{k - 1}.\nProcess the following q queries in order:\n - The i-th query contains three integers n_i, x_i, and m_i.\nLet a_0,a_1,...,a_{n_i - 1} be the following sequence of n_i numbers: \\begin{eqnarray} a_j =  \\begin{cases}    x_i & ( j = 0 ) \\\\    a_{j - 1} + d_{(j - 1)~\\textrm{mod}~k} & ( 0 < j \\leq n_i - 1 )  \\end{cases}\\end{eqnarray}\nPrint the number of j~(0 \\leq j < n_i - 1) such that (a_j~\\textrm{mod}~m_i) < (a_{j + 1}~\\textrm{mod}~m_i).\nHere (y~\\textrm{mod}~z) denotes the remainder of y divided by z, for two integers y and z~(z > 0).\n-----Constraints-----\n - All values in input are integers.\n - 1 \\leq k, q \\leq 5000\n - 0 \\leq d_i \\leq 10^9\n - 2 \\leq n_i \\leq 10^9\n - 0 \\leq x_i \\leq 10^9\n - 2 \\leq m_i \\leq 10^9\n-----Input-----\nInput is given from Standard Input in the following format:\nk q\nd_0 d_1... d_{k - 1}\nn_1 x_1 m_1\nn_2 x_2 m_2\n:\nn_q x_q m_q\n-----Output-----\nPrint q lines.\nThe i-th line should contain the response to the i-th query.\n-----Sample Input-----\n3 1\n3 1 4\n5 3 2\n-----Sample Output-----\n1\nFor the first query, the sequence {a_j} will be 3,6,7,11,14.\n - (a_0~\\textrm{mod}~2) > (a_1~\\textrm{mod}~2)\n - (a_1~\\textrm{mod}~2) < (a_2~\\textrm{mod}~2)\n - (a_2~\\textrm{mod}~2) = (a_3~\\textrm{mod}~2)\n - (a_3~\\textrm{mod}~2) > (a_4~\\textrm{mod}~2)\nThus, the response to this query should be 1.\n\ndef",
        "answer": "def answer(k, q, d, n, x, m):\n    for i in range(q):\n        n, x, m = map(int, input().split())\n        a = [x]\n        for j in range(n - 1):\n            a.append((a[-1] + d[(j - 1) % k]) % m)\n        print(sum(a[j] < a[j + 1] for j in range(n - 1)))",
        "difficulty": "interview"
    },
    {
        "task_id": 2644,
        "prompt": "Complete the Python function given the prompt below:We have a permutation P = P_1, P_2, \\ldots, P_N of 1, 2, \\ldots, N.\nYou have to do the following N - 1 operations on P, each exactly once, in some order:\n - Swap P_1 and P_2.\n - Swap P_2 and P_3.\n\\vdots\n - Swap P_{N-1} and P_N.\nYour task is to sort P in ascending order by configuring the order of operations.\nIf it is impossible, print -1 instead.\n-----Constraints-----\n - All values in input are integers.\n - 2 \\leq N \\leq 2 \\times 10^5\n - P is a permutation of 1, 2, \\ldots, N.\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nP_1 P_2 \\ldots P_N\n-----Output-----\nIf it is impossible to sort P in ascending order by configuring the order of operations, print -1.\nOtherwise, print N-1 lines to represent a sequence of operations that sorts P in ascending order.\nThe i-th line (1 \\leq i \\leq N - 1) should contain j, where the i-th operation swaps P_j and P_{j + 1}.\nIf there are multiple such sequences of operations, any of them will be accepted.\n-----Sample Input-----\n5\n2 4 1 5 3\n-----Sample Output-----\n4\n2\n3\n1\nThe following sequence of operations sort P in ascending order:\n - First, swap P_4 and P_5, turning P into 2, 4, 1, 3, 5.\n - Then, swap P_2 and P_3, turning P into 2, 1, 4, 3, 5.\n - Then, swap P_3 and P_4, turning P into 2, 1, 3, 4, 5.\n - Finally, swap P_1 and P_2, turning P into 1, 2, 3, 4, 5.\n\ndef",
        "answer": "def solution(N, P):\n    # Write your code here\n    pass\n",
        "difficulty": "interview"
    },
    {
        "task_id": 2645,
        "prompt": "Complete the Python function given the prompt below:AtCoDeer the deer and his friend TopCoDeer is playing a game.\nThe game consists of N turns.\nIn each turn, each player plays one of the two gestures, Rock and Paper, as in Rock-paper-scissors, under the following condition:\n(\u203b) After each turn, (the number of times the player has played Paper)\u2266(the number of times the player has played Rock).\nEach player's score is calculated by (the number of turns where the player wins) - (the number of turns where the player loses), where the outcome of each turn is determined by the rules of Rock-paper-scissors.\n(For those who are not familiar with Rock-paper-scissors: If one player plays Rock and the other plays Paper, the latter player will win and the former player will lose. If both players play the same gesture, the round is a tie and neither player will win nor lose.)\nWith his supernatural power, AtCoDeer was able to foresee the gesture that TopCoDeer will play in each of the N turns, before the game starts.\nPlan AtCoDeer's gesture in each turn to maximize AtCoDeer's score.\nThe gesture that TopCoDeer will play in each turn is given by a string s. If the i-th (1\u2266i\u2266N) character in s is g, TopCoDeer will play Rock in the i-th turn. Similarly, if the i-th (1\u2266i\u2266N) character of s in p, TopCoDeer will play Paper in the i-th turn.\n-----Constraints-----\n - 1\u2266N\u226610^5\n - N=|s|\n - Each character in s is g or p.\n - The gestures represented by s satisfy the condition (\u203b).\n-----Input-----\nThe input is given from Standard Input in the following format:\ns\n-----Output-----\nPrint the AtCoDeer's maximum possible score.\n-----Sample Input-----\ngpg\n-----Sample Output-----\n0\nPlaying the same gesture as the opponent in each turn results in the score of 0, which is the maximum possible score.\n\ndef",
        "answer": "def main():\n    s = input()\n    print(max(0, len(s) - len(s.replace('g', '').replace('p', ''))))",
        "difficulty": "interview"
    },
    {
        "task_id": 2646,
        "prompt": "Complete the Python function given the prompt below:There is a cave.\nThe cave has N rooms and M passages. The rooms are numbered 1 to N, and the passages are numbered 1 to M. Passage i connects Room A_i and Room B_i bidirectionally. One can travel between any two rooms by traversing passages. Room 1 is a special room with an entrance from the outside.\nIt is dark in the cave, so we have decided to place a signpost in each room except Room 1. The signpost in each room will point to one of the rooms directly connected to that room with a passage.\nSince it is dangerous in the cave, our objective is to satisfy the condition below for each room except Room 1.\n - If you start in that room and repeatedly move to the room indicated by the signpost in the room you are in, you will reach Room 1 after traversing the minimum number of passages possible.\nDetermine whether there is a way to place signposts satisfying our objective, and print one such way if it exists.\n-----Constraints-----\n - All values in input are integers.\n - 2 \\leq N \\leq 10^5\n - 1 \\leq M \\leq 2 \\times 10^5\n - 1 \\leq A_i, B_i \\leq N\\ (1 \\leq i \\leq M)\n - A_i \\neq B_i\\ (1 \\leq i \\leq M)\n - One can travel between any two rooms by traversing passages.\n-----Input-----\nInput is given from Standard Input in the following format:\nN M\nA_1 B_1\n:\nA_M B_M\n-----Output-----\nIf there is no way to place signposts satisfying the objective, print No.\nOtherwise, print N lines. The first line should contain Yes, and the i-th line (2 \\leq i \\leq N) should contain the integer representing the room indicated by the signpost in Room i.\n-----Sample Input-----\n4 4\n1 2\n2 3\n3 4\n4 2\n-----Sample Output-----\nYes\n1\n2\n2\nIf we place the signposts as described in the sample output, the following happens:\n - Starting in Room 2, you will reach Room 1 after traversing one passage: (2) \\to 1. This is the minimum number of passages possible.\n - Starting in Room 3, you will reach Room 1 after traversing two passages: (3) \\to 2 \\to 1. This is the minimum number of passages possible.\n - Starting in Room 4, you will reach Room 1 after traversing two passages: (4) \\to 2 \\to 1. This is the minimum number of passages possible.\nThus, the objective is satisfied.\n\ndef",
        "answer": "def find_path(N, M, A, B):\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2647,
        "prompt": "Complete the Python function given the prompt below:We have an H \\times W grid whose squares are painted black or white. The square at the i-th row from the top and the j-th column from the left is denoted as (i, j).\nSnuke would like to play the following game on this grid. At the beginning of the game, there is a character called Kenus at square (1, 1). The player repeatedly moves Kenus up, down, left or right by one square. The game is completed when Kenus reaches square (H, W) passing only white squares.\nBefore Snuke starts the game, he can change the color of some of the white squares to black. However, he cannot change the color of square (1, 1) and (H, W). Also, changes of color must all be carried out before the beginning of the game.\nWhen the game is completed, Snuke's score will be the number of times he changed the color of a square before the beginning of the game. Find the maximum possible score that Snuke can achieve, or print -1 if the game cannot be completed, that is, Kenus can never reach square (H, W) regardless of how Snuke changes the color of the squares.  \nThe color of the squares are given to you as characters s_{i, j}. If square (i, j) is initially painted by white, s_{i, j} is.; if square (i, j) is initially painted by black, s_{i, j} is #.\n\n\ndef",
        "answer": "def maximum_score(H, W, s):\n    # Write your code here",
        "difficulty": "interview"
    },
    {
        "task_id": 2648,
        "prompt": "Complete the Python function given the prompt below:Snuke has decided to play a game using cards.\nHe has a deck consisting of N cards. On the i-th card from the top, an integer A_i is written.\nHe will perform the operation described below zero or more times, so that the values written on the remaining cards will be pairwise distinct. Find the maximum possible number of remaining cards. Here, N is odd, which guarantees that at least one card can be kept.\nOperation: Take out three arbitrary cards from the deck. Among those three cards, eat two: one with the largest value, and another with the smallest value. Then, return the remaining one card to the deck.\n-----Constraints-----\n - 3 \u2266 N \u2266 10^{5}\n - N is odd.\n - 1 \u2266 A_i \u2266 10^{5}\n - A_i is an integer.\n-----Input-----\nThe input is given from Standard Input in the following format:\nN\nA_1 A_2 A_3... A_{N}\n-----Output-----\nPrint the answer.\n-----Sample Input-----\n5\n1 2 1 3 7\n-----Sample Output-----\n3\nOne optimal solution is to perform the operation once, taking out two cards with 1 and one card with 2. One card with 1 and another with 2 will be eaten, and the remaining card with 1 will be returned to deck. Then, the values written on the remaining cards in the deck will be pairwise distinct: 1, 3 and 7.\n\ndef",
        "answer": "def max_possible_cards(n):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2649,
        "prompt": "Complete the Python function given the prompt below:There are N points on the 2D plane, i-th of which is located on (x_i, y_i).\nThere can be multiple points that share the same coordinate.\nWhat is the maximum possible Manhattan distance between two distinct points?\nHere, the Manhattan distance between two points (x_i, y_i) and (x_j, y_j) is defined by |x_i-x_j| + |y_i-y_j|.\n-----Constraints-----\n - 2 \\leq N \\leq 2 \\times 10^5\n - 1 \\leq x_i,y_i \\leq 10^9\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nx_1 y_1\nx_2 y_2\n:\nx_N y_N\n-----Output-----\nPrint the answer.\n-----Sample Input-----\n3\n1 1\n2 4\n3 2\n-----Sample Output-----\n4\nThe Manhattan distance between the first point and the second point is |1-2|+|1-4|=4, which is maximum possible.\n\ndef",
        "answer": "def max_distance(n, x, y):\n    return max(abs(x[i] - y[i]) for i in range(n))",
        "difficulty": "interview"
    },
    {
        "task_id": 2650,
        "prompt": "Complete the Python function given the prompt below:There are N infants registered in AtCoder, numbered 1 to N, and 2\\times 10^5 kindergartens, numbered 1 to 2\\times 10^5.\nInfant i has a rating of A_i and initially belongs to Kindergarten B_i.\nFrom now on, Q transfers will happen.\nAfter the j-th transfer, Infant C_j will belong to Kindergarten D_j.\nHere, we define the evenness as follows. For each kindergarten with one or more infants registered in AtCoder, let us find the highest rating of an infant in the kindergarten. The evenness is then defined as the lowest among those ratings.\nFor each of the Q transfers, find the evenness just after the transfer.\n-----Constraints-----\n - 1 \\leq N,Q \\leq 2 \\times 10^5\n - 1 \\leq A_i \\leq 10^9\n - 1 \\leq C_j \\leq N\n - 1 \\leq B_i,D_j \\leq 2 \\times 10^5\n - All values in input are integers.\n - In the j-th transfer, Infant C_j changes the kindergarten it belongs to.\n-----Input-----\nInput is given from Standard Input in the following format:\nN Q\nA_1 B_1\nA_2 B_2\n:\nA_N B_N\nC_1 D_1\nC_2 D_2\n:\nC_Q D_Q\n-----Output-----\nPrint Q lines.\nThe j-th line should contain the evenness just after the j-th transfer.\n-----Sample Input-----\n6 3\n8 1\n6 2\n9 3\n1 1\n2 2\n1 3\n4 3\n2 1\n1 2\n-----Sample Output-----\n6\n2\n6\nInitially, Infant 1, 4 belongs to Kindergarten 1, Infant 2, 5 belongs to Kindergarten 2, and Infant 3, 6 belongs to Kindergarten 3.\nAfter the 1-st transfer that makes Infant 4 belong to Kindergarten 3, Infant 1 belongs to Kindergarten 1, Infant 2, 5 belong to Kindergarten 2, and Infant 3, 4, 6 belong to Kindergarten 3. The highest ratings of an infant in Kindergarten 1, 2, 3 are 8, 6, 9, respectively. The lowest among them is 6, so the 1-st line in the output should contain 6.\nAfter the 2-nd transfer that makes Infant 2 belong to Kindergarten 1, Infant 1, 2 belong to Kindergarten 1, Infant 5 belongs to Kindergarten 2, and Infant 3, 4, 6 belong to Kindergarten 3. The highest ratings of an infant in Kindergarten 1, 2, 3 are 8, 2, 9, respectively. The lowest among them is 2, so the 2-nd line in the output should contain 2.\nAfter the 3-rd transfer that makes Infant 1 belong to Kindergarten 2, Infant 2 belongs to Kindergarten 1, Infant 1, 5 belong to Kindergarten 2, and Infant 3, 4, 6 belong to Kindergarten 3. The highest ratings of an infant in Kindergarten 1, 2, 3 are 6, 8, 9, respectively. The lowest among them is 6, so the 3-rd line in the output should contain 6.\n\ndef",
        "answer": "def solve(N, Q, A, B):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2651,
        "prompt": "Complete the Python function given the prompt below:On a two-dimensional plane, there are m lines drawn parallel to the x axis, and n lines drawn parallel to the y axis.\nAmong the lines parallel to the x axis, the i-th from the bottom is represented by y = y_i.\nSimilarly, among the lines parallel to the y axis, the i-th from the left is represented by x = x_i.\nFor every rectangle that is formed by these lines, find its area, and print the total area modulo 10^9+7.\nThat is, for every quadruple (i,j,k,l) satisfying 1\\leq i < j\\leq n and 1\\leq k < l\\leq m, find the area of the rectangle formed by the lines x=x_i, x=x_j, y=y_k and y=y_l, and print the sum of these areas modulo 10^9+7.\n-----Constraints-----\n - 2 \\leq n,m \\leq 10^5\n - -10^9 \\leq x_1 <... < x_n \\leq 10^9\n - -10^9 \\leq y_1 <... < y_m \\leq 10^9\n - x_i and y_i are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nn m\nx_1 x_2... x_n\ny_1 y_2... y_m\n-----Output-----\nPrint the total area of the rectangles, modulo 10^9+7.\n-----Sample Input-----\n3 3\n1 3 4\n1 3 6\n-----Sample Output-----\n60\nThe following figure illustrates this input:\nThe total area of the nine rectangles A, B,..., I shown in the following figure, is 60.\n\ndef",
        "answer": "def find_area(n, m, x, y):\n    area = 0\n    for i in range(n):\n        for j in range(m):\n            area += (x[i] - x[j]) * (y[i] - y[j])\n    return area",
        "difficulty": "interview"
    },
    {
        "task_id": 2652,
        "prompt": "Complete the Python function given the prompt below:There are N towns on a plane. The i-th town is located at the coordinates (x_i,y_i). There may be more than one town at the same coordinates.\nYou can build a road between two towns at coordinates (a,b) and (c,d) for a cost of min(|a-c|,|b-d|) yen (the currency of Japan). It is not possible to build other types of roads.\nYour objective is to build roads so that it will be possible to travel between every pair of towns by traversing roads. At least how much money is necessary to achieve this?\n-----Constraints-----\n - 2 \u2264 N \u2264 10^5\n - 0 \u2264 x_i,y_i \u2264 10^9\n - All input values are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nx_1 y_1\nx_2 y_2\n:\nx_N y_N\n-----Output-----\nPrint the minimum necessary amount of money in order to build roads so that it will be possible to travel between every pair of towns by traversing roads.\n-----Sample Input-----\n3\n1 5\n3 9\n7 8\n-----Sample Output-----\n3\nBuild a road between Towns 1 and 2, and another between Towns 2 and 3. The total cost is 2+1=3 yen.\n\ndef",
        "answer": "def min_cost(n, x, y):\n    cost = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            cost += min(abs(x[i]-x[j]), abs(y[i]-y[j]))\n    return cost",
        "difficulty": "interview"
    },
    {
        "task_id": 2653,
        "prompt": "Complete the Python function given the prompt below:Given is a rooted tree with N vertices numbered 1 to N.\nThe root is Vertex 1, and the i-th edge (1 \\leq i \\leq N - 1) connects Vertex a_i and b_i.\nEach of the vertices has a counter installed. Initially, the counters on all the vertices have the value 0.\nNow, the following Q operations will be performed:\n - Operation j (1 \\leq j \\leq Q): Increment by x_j the counter on every vertex contained in the subtree rooted at Vertex p_j.\nFind the value of the counter on each vertex after all operations.\n-----Constraints-----\n - 2 \\leq N \\leq 2 \\times 10^5\n - 1 \\leq Q \\leq 2 \\times 10^5\n - 1 \\leq a_i < b_i \\leq N\n - 1 \\leq p_j \\leq N\n - 1 \\leq x_j \\leq 10^4\n - The given graph is a tree.\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN Q\na_1 b_1\n:\na_{N-1} b_{N-1}\np_1 x_1\n:\np_Q x_Q\n-----Output-----\nPrint the values of the counters on Vertex 1, 2, \\ldots, N after all operations, in this order, with spaces in between.\n-----Sample Input-----\n4 3\n1 2\n2 3\n2 4\n2 10\n1 100\n3 1\n-----Sample Output-----\n100 110 111 110\nThe tree in this input is as follows:\nEach operation changes the values of the counters on the vertices as follows:\n - Operation 1: Increment by 10 the counter on every vertex contained in the subtree rooted at Vertex 2, that is, Vertex 2, 3, 4. The values of the counters on Vertex 1, 2, 3, 4 are now 0, 10, 10, 10, respectively.\n - Operation 2: Increment by 100 the counter on every vertex contained in the subtree rooted at Vertex 1, that is, Vertex 1, 2, 3, 4. The values of the counters on Vertex 1, 2, 3, 4 are now 100, 110, 110, 110, respectively.\n - Operation 3: Increment by 1 the counter on every vertex contained in the subtree rooted at Vertex 3, that is, Vertex 3. The values of the counters on Vertex 1, 2, 3, 4 are now 100, 110, 111, 110, respectively.\n\ndef",
        "answer": "def solution(N, Q, edges):\n    # Write your code here\n    pass\n",
        "difficulty": "interview"
    },
    {
        "task_id": 2654,
        "prompt": "Complete the Python function given the prompt below:There are N integers X_1, X_2, \\cdots, X_N, and we know that A_i \\leq X_i \\leq B_i.\nFind the number of different values that the median of X_1, X_2, \\cdots, X_N can take.\n-----Notes-----\nThe median of X_1, X_2, \\cdots, X_N is defined as follows. Let x_1, x_2, \\cdots, x_N be the result of sorting X_1, X_2, \\cdots, X_N in ascending order.\n - If N is odd, the median is x_{(N+1)/2};\n - if N is even, the median is (x_{N/2} + x_{N/2+1}) / 2.\n-----Constraints-----\n - 2 \\leq N \\leq 2 \\times 10^5\n - 1 \\leq A_i \\leq B_i \\leq 10^9\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nA_1 B_1\nA_2 B_2\n:\nA_N B_N\n-----Output-----\nPrint the answer.\n-----Sample Input-----\n2\n1 2\n2 3\n-----Sample Output-----\n3\n - If X_1 = 1 and X_2 = 2, the median is \\frac{3}{2};\n - if X_1 = 1 and X_2 = 3, the median is 2;\n - if X_1 = 2 and X_2 = 2, the median is 2;\n - if X_1 = 2 and X_2 = 3, the median is \\frac{5}{2}.\nThus, the median can take three values: \\frac{3}{2}, 2, and \\frac{5}{2}.\n\ndef",
        "answer": "def median(A, B):\n    return sum(sorted([A, B])[1::2]) / 2",
        "difficulty": "interview"
    },
    {
        "task_id": 2655,
        "prompt": "Complete the Python function given the prompt below:Quickly after finishing the tutorial of the online game ATChat, you have decided to visit a particular place with N-1 players who happen to be there. These N players, including you, are numbered 1 through N, and the friendliness of Player i is A_i.\nThe N players will arrive at the place one by one in some order. To make sure nobody gets lost, you have set the following rule: players who have already arrived there should form a circle, and a player who has just arrived there should cut into the circle somewhere.\nWhen each player, except the first one to arrive, arrives at the place, the player gets comfort equal to the smaller of the friendliness of the clockwise adjacent player and that of the counter-clockwise adjacent player. The first player to arrive there gets the comfort of 0.\nWhat is the maximum total comfort the N players can get by optimally choosing the order of arrivals and the positions in the circle to cut into?\n-----Constraints-----\n - All values in input are integers.\n - 2 \\leq N \\leq 2 \\times 10^5\n - 1 \\leq A_i \\leq 10^9\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nA_1 A_2 \\dots A_N\n-----Output-----\nPrint the maximum total comfort the N players can get.\n-----Sample Input-----\n4\n2 2 1 3\n-----Sample Output-----\n7\nBy arriving at the place in the order Player 4, 2, 1, 3, and cutting into the circle as shown in the figure, they can get the total comfort of 7.\nThey cannot get the total comfort greater than 7, so the answer is 7.\n\ndef",
        "answer": "def solution(A):\n    # write your code in Python 2.7\n    N = len(A)\n    if N == 1:\n        return 0\n    if N == 2:\n        return A[0]\n    if N == 3:\n        return max(A[0], A[1])\n    if N == 4:\n        return max(A[0], A[1], A[2])\n    if N == 5:\n        return max(A[0], A[1], A[2], A[3])\n    if N == 6:\n        return max(A[0], A[1], A[2], A[3], A[4])\n    if N == 7:\n        return max(A[0], A[1], A[2], A[3], A[4], A[5])\n    if N == 8:\n        return max(A[0], A[1], A[2], A[3], A[4], A[5], A[6])\n    if N == 9:\n        return max(A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7])\n    if N == 10:\n        return max(A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[8])\n    if N == 11:\n        return max(A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[8], A[9])\n    if N == 12:\n        return max(A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[8], A[9], A[10])\n    if N == 13:\n        return max(A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[8], A[9], A[10], A[11])\n    if N == 14:\n        return max(",
        "difficulty": "interview"
    },
    {
        "task_id": 2656,
        "prompt": "Complete the Python function given the prompt below:How many strings can be obtained by applying the following operation on a string S exactly K times: \"choose one lowercase English letter and insert it somewhere\"?\nThe answer can be enormous, so print it modulo (10^9+7).\n-----Constraints-----\n - K is an integer between 1 and 10^6 (inclusive).\n - S is a string of length between 1 and 10^6 (inclusive) consisting of lowercase English letters.\n-----Input-----\nInput is given from Standard Input in the following format:\nK\nS\n-----Output-----\nPrint the number of strings satisfying the condition, modulo (10^9+7).\n-----Sample Input-----\n5\noof\n-----Sample Output-----\n575111451\nFor example, we can obtain proofend, moonwolf, and onionpuf, while we cannot obtain oofsix, oofelevennn, voxafolt, or fooooooo.\n\ndef",
        "answer": "def solve(k, s):\n    return (k * 26) % (10 ** 9 + 7)",
        "difficulty": "interview"
    },
    {
        "task_id": 2657,
        "prompt": "Complete the Python function given the prompt below:Let {\\rm comb}(n,r) be the number of ways to choose r objects from among n objects, disregarding order.\nFrom n non-negative integers a_1, a_2,..., a_n, select two numbers a_i > a_j so that {\\rm comb}(a_i,a_j) is maximized.\nIf there are multiple pairs that maximize the value, any of them is accepted.\n-----Constraints-----\n - 2 \\leq n \\leq 10^5\n - 0 \\leq a_i \\leq 10^9\n - a_1,a_2,...,a_n are pairwise distinct.\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nn\na_1 a_2... a_n\n-----Output-----\nPrint a_i and a_j that you selected, with a space in between.\n-----Sample Input-----\n5\n6 9 4 2 11\n-----Sample Output-----\n11 6\n\\rm{comb}(a_i,a_j) for each possible selection is as follows:\n - \\rm{comb}(4,2)=6 \n - \\rm{comb}(6,2)=15 \n - \\rm{comb}(6,4)=15 \n - \\rm{comb}(9,2)=36 \n - \\rm{comb}(9,4)=126 \n - \\rm{comb}(9,6)=84 \n - \\rm{comb}(11,2)=55 \n - \\rm{comb}(11,4)=330 \n - \\rm{comb}(11,6)=462 \n - \\rm{comb}(11,9)=55\nThus, we should print 11 and 6.\n\ndef",
        "answer": "def comb(n,r):\n    if r > n:\n        return 0\n    if r == 0:\n        return 1\n    if r == n:\n        return 1\n    return comb(n-1,r-1) + comb(n-1,r)",
        "difficulty": "interview"
    },
    {
        "task_id": 2658,
        "prompt": "Complete the Python function given the prompt below:The Kingdom of Takahashi has N towns, numbered 1 through N.\nThere is one teleporter in each town. The teleporter in Town i (1 \\leq i \\leq N) sends you to Town A_i.\nTakahashi, the king, loves the positive integer K. The selfish king wonders what town he will be in if he starts at Town 1 and uses a teleporter exactly K times from there.\nHelp the king by writing a program that answers this question.\n-----Constraints-----\n - 2 \\leq N \\leq 2 \\times 10^5\n - 1 \\leq A_i \\leq N\n - 1 \\leq K \\leq 10^{18}\n-----Input-----\nInput is given from Standard Input in the following format:\nN K\nA_1 A_2 \\dots A_N\n-----Output-----\nPrint the integer representing the town the king will be in if he starts at Town 1 and uses a teleporter exactly K times from there.\n-----Sample Input-----\n4 5\n3 2 4 1\n-----Sample Output-----\n4\nIf we start at Town 1 and use the teleporter 5 times, our travel will be as follows: 1 \\to 3 \\to 4 \\to 1 \\to 3 \\to 4.\n\ndef",
        "answer": "def main():\n    N, K = map(int, input().split())\n    A = list(map(int, input().split()))\n    A.sort()\n    print(A[K-1])",
        "difficulty": "interview"
    },
    {
        "task_id": 2659,
        "prompt": "Complete the Python function given the prompt below:Let S(n) denote the sum of the digits in the decimal notation of n.\nFor example, S(123) = 1 + 2 + 3 = 6.\nWe will call an integer n a Snuke number when, for all positive integers m such that m > n, \\frac{n}{S(n)} \\leq \\frac{m}{S(m)} holds.\nGiven an integer K, list the K smallest Snuke numbers.\n-----Constraints-----\n - 1 \\leq K\n - The K-th smallest Snuke number is not greater than 10^{15}.\n-----Input-----\nInput is given from Standard Input in the following format:\nK\n-----Output-----\nPrint K lines. The i-th line should contain the i-th smallest Snuke number.\n-----Sample Input-----\n10\n-----Sample Output-----\n1\n2\n3\n4\n5\n6\n7\n8\n9\n19\n\n\ndef",
        "answer": "def S(n):\n    return sum(int(i) for i in str(n))",
        "difficulty": "interview"
    },
    {
        "task_id": 2660,
        "prompt": "Complete the Python function given the prompt below:There is a function f(x), which is initially a constant function f(x) = 0.\nWe will ask you to process Q queries in order. There are two kinds of queries, update queries and evaluation queries, as follows:\n - An update query 1 a b: Given two integers a and b, let g(x) = f(x) + |x - a| + b and replace f(x) with g(x).\n - An evaluation query 2: Print x that minimizes f(x), and the minimum value of f(x). If there are multiple such values of x, choose the minimum such value.\nWe can show that the values to be output in an evaluation query are always integers, so we ask you to print those values as integers without decimal points.\n-----Constraints-----\n - All values in input are integers.\n - 1 \\leq Q \\leq 2 \\times 10^5\n - -10^9 \\leq a, b \\leq 10^9\n - The first query is an update query.\n-----Input-----\nInput is given from Standard Input in the following format:\nQ\nQuery_1\n:\nQuery_Q\nSee Sample Input 1 for an example.\n-----Output-----\nFor each evaluation query, print a line containing the response, in the order in which the queries are given.\nThe response to each evaluation query should be the minimum value of x that minimizes f(x), and the minimum value of f(x), in this order, with space in between.\n-----Sample Input-----\n4\n1 4 2\n2\n1 1 -8\n2\n-----Sample Output-----\n4 2\n1 -3\nIn the first evaluation query, f(x) = |x - 4| + 2, which attains the minimum value of 2 at x = 4.\nIn the second evaluation query, f(x) = |x - 1| + |x - 4| - 6, which attains the minimum value of -3 when 1 \\leq x \\leq 4. Among the multiple values of x that minimize f(x), we ask you to print the minimum, that is, 1.\n\ndef",
        "answer": "def f(x):\n    return x",
        "difficulty": "interview"
    },
    {
        "task_id": 2661,
        "prompt": "Complete the Python function given the prompt below:Given are an integer N and arrays S, T, U, and V, each of length N.\nConstruct an N\u00d7N matrix a that satisfy the following conditions:\n - a_{i,j} is an integer.\n - 0 \\leq a_{i,j}  \\lt 2^{64}.\n - If S_{i} = 0, the bitwise AND of the elements in the i-th row is U_{i}.\n - If S_{i} = 1, the bitwise OR of the elements in the i-th row is U_{i}.\n - If T_{i} = 0, the bitwise AND of the elements in the i-th column is V_{i}.\n - If T_{i} = 1, the bitwise OR of the elements in the i-th column is V_{i}.\nHowever, there may be cases where no matrix satisfies the conditions.\n-----Constraints-----\n - All values in input are integers.\n -  1 \\leq N \\leq 500 \n -  0 \\leq S_{i} \\leq 1 \n -  0 \\leq T_{i} \\leq 1  \n -  0 \\leq U_{i} \\lt 2^{64}  \n -  0 \\leq V_{i} \\lt 2^{64}  \n-----Input-----\nInput is given from Standard Input in the following format:\nN\nS_{1} S_{2}...  S_{N}\nT_{1} T_{2}...  T_{N}\nU_{1} U_{2}...  U_{N}\nV_{1} V_{2}...  V_{N}\n-----Output-----\nIf there exists a matrix that satisfies the conditions, print one such matrix in the following format:\na_{1,1}...  a_{1,N}\n:\na_{N,1}...  a_{N,N}\nNote that any matrix satisfying the conditions is accepted.\nIf no matrix satisfies the conditions, print -1.\n-----Sample Input-----\n2\n0 1\n1 0\n1 1\n1 0\n-----Sample Output-----\n1 1\n1 0\nIn Sample Input 1, we need to find a matrix such that:\n - the bitwise AND of the elements in the 1-st row is 1;\n - the bitwise OR of the elements in the 2-nd row is 1;\n - the bitwise OR of the elements in the 1-st column is 1;\n - the bitwise AND of the elements in the 2-nd column is 0.\n\ndef",
        "answer": "def solve(N, S, T, U, V):\n    a = [[0 for i in range(N)] for j in range(N)]\n    for i in range(N):\n        for j in range(N):\n            if S[i] == 0:\n                a[i][j] = U[i] & V[j]\n            else:\n                a[i][j] = U[i] | V[j]\n    return a",
        "difficulty": "interview"
    },
    {
        "task_id": 2662,
        "prompt": "Complete the Python function given the prompt below:You are given a sequence with N integers: A = \\{ A_1, A_2, \\cdots, A_N \\}.\nFor each of these N integers, we will choose a color and paint the integer with that color. Here the following condition must be satisfied:\n - If A_i and A_j (i < j) are painted with the same color, A_i < A_j.\nFind the minimum number of colors required to satisfy the condition.\n-----Constraints-----\n - 1 \\leq N \\leq 10^5\n - 0 \\leq A_i \\leq 10^9\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nA_1\n:\nA_N\n-----Output-----\nPrint the minimum number of colors required to satisfy the condition.\n-----Sample Input-----\n5\n2\n1\n4\n5\n3\n-----Sample Output-----\n2\nWe can satisfy the condition with two colors by, for example, painting 2 and 3 red and painting 1, 4, and 5 blue.\n\ndef",
        "answer": "def solution(A):\n    # write your code in Python 2.7\n    N = len(A)\n    A.sort()\n    colors = [0] * (N + 1)\n    for i in range(N):\n        if A[i] == i + 1:\n            colors[i] = 1\n        else:\n            colors[i] = colors[A[i] - 1] + 1\n    return colors[N - 1]\n",
        "difficulty": "interview"
    },
    {
        "task_id": 2663,
        "prompt": "Complete the Python function given the prompt below:Chef likes arrays a lot. Today, he found an array A consisting of N positive integers.\nLet L denote the sorted (in non-increasing order) list of size N*(N+1)/2 containing the sums of all possible contiguous subarrays of A. Chef is interested in finding the first K elements from the list L. Can you help him in accomplishing this task?\n-----Input-----\nThere is only a single test case per input file.\nThe first line of input contains two space separated integer numbers N and K denoting the size of the array and the number of the maximal sums you need to find.\nThe following line contains N space separated integer numbers denoting the array A.\n-----Output-----\nOutput K space separated integers where the ith integer denotes the ith element of L.\n-----Constraints-----\n- 1 \u2264 N \u2264 105\n- 1 \u2264 K \u2264 min(N*(N+1)/2, 105)\n- 1 \u2264 Ai \u2264 109\n-----Subtasks-----\n- Subtask 1 (47 pts) : 1 \u2264 N \u2264 1000, 1 \u2264 K \u2264 min{N*(N+1)/2, 105}\n- Subtask 2 (53 pts) : 1 \u2264 N \u2264 105, 1 \u2264 K \u2264 min{N*(N+1)/2, 105}\n-----Example-----\nInput 13 4\n1 3 4\nOutput 18 7 4 4\nInput 23 3\n10 2 7\nOutput 219 12 10\n-----Explanation-----\nTest 1:\nThe first 4 elements of it are [8, 7, 4, 4].\n\ndef",
        "answer": "def get_sums(arr):\n    sums = []\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            sums.append(arr[i] + arr[j])\n    return sums",
        "difficulty": "interview"
    },
    {
        "task_id": 2664,
        "prompt": "Complete the Python function given the prompt below:Chef has bought ten balls of five colours. There are two balls of each colour. Balls of same colour have same weight. Let us enumerate colours by numbers from 1 to 5. Chef knows that all balls, except two (of same colour), weigh exactly one kilogram. He also knows that each of these two balls is exactly 1 kg heavier than other balls.\nYou need to find the colour which balls are heavier than others. \nTo do that, you can use mechanical scales with two weighing pans. As your scales are very accurate, you can know the exact difference of weights of objects from first and second pans. Formally, the scales will give you the difference (signed difference) of weights of the objects put into the first pan and the second pan. See the following examples for details.\n- If you put two balls of the same colour on your scales, each ball to one pan, the scales will tell you that difference is \"0\".\n- But if you put into the first pan some balls of total weight 3 kg, and into the second pan of 5 kg, then scales will tell you \"-2\" because the second pan is 2 kg heavier than first. \n- Similarly, if you put 5 kg weight in first pan and 3 kg in the second pan, then scale will tell you \"2\" as first pan is 2 kg heavier than second.\n-----Input & Output-----\n- The interaction process have two phases. At first phase you perform sequence of weighings on the mechanical scales. At the second phase you should output the colour of the heavier balls.\n- To use the mechanical scales, you should print \"1\"(without quotes) and then print two lines, the first line will describe the enumeration of colours of balls on the first pan and second line should that of second pan.\n- To describe some pan, you need to print one integer n - the number of balls you put in this pan, followed by n space-separated integers - colours of the balls you put in this pan. \n- Once you have printed required data, you can read from the standard input one integer - the difference of weights of the first and the second pans.\n- To output the colour of the heavier balls, you should print \"2\"(without quotes) and one integer in next line - colour of the heavier balls. \n-----Constraints-----\n- Each colour you print should be between 1 and 5.\n- In each weighings, you can use at most two balls of same colour.\n- Note that you can use scales as much times as you want (even zero).\n- Once your program printed the colour of the heavier balls, it should finish its work, i.e. you should exit the program. \n- Do not forget to flush standard output after each line you print.\n-----Subtasks-----\n- If you output incorrect colour (i.e. colour you printed is not that of heavier balls), your score will be zero.\n- Let K will be the number of times you used scales.\n- Then your score will be 100/K points.\n- Please note that if K equals to zero, your score also will also be 100 points.\n-----Example 1-----\nPlease note that the content in left side denotes output of your program where content in the right side denotes the response of judge which you should read as input. \nInput and Output\n1\n1 1\n1 1    \n                    0\n1\n1 1\n1 5\n                    -1\n2\n5\n-----Example 2-----\nInput and Output\n1\n3 1 2 5\n0\n                    4\n1\n0\n1 2\n                    -1\n1\n0\n1 5\n                    -2\n2\n5\n-----Explanation-----\nIn the first example, you first printed :\n1\n1 1\n1 1\nThis means that you want to use the scale. Each of the first and second pan has one ball of colour 1.\nDon't forget to flush the standard output after printing this.\nAfter that you should read the input, the difference of weights between the two pans, in this case, it will be 0. \nNow you printed : \n1\n1 1\n1 5\nIt means, that you decided to use scale again. Now first pan contains one ball of colour 1 and the second pan contains one ball of colour 5.\nNow, you should read the input, the difference of weights between the two pans, in this case, it will be -1.\nNow, you realize that ball of colour 5 is heavier than of colour 1. It means that 5th colour is the colour of heaviest ball. So your print 2 followed by 5 in separate lines and exit your program.\nYou have used scale total 2 times. Hence your score will be 100/2 = 50.\nIn the second example, your score will be 100 / 3 = 33.3333333\n-----Notes-----\nPlease note that clearing the output buffer can be done by using fflush(stdout) command or by setting the proper type of buffering at the beginning of the execution - setlinebuf(stdout). Failure to flush the output buffer will result in Time Limit Exceeded verdict.\nThere are 5 test files. For each of the test file, score you will get is described above. The total sum of scores of your program for all the test files will be displayed on the contest page. This will be considered your final score for the problem. \nTotal points awarded for this problem will be equal to (your score) / (best score achieved in the contest) * 100.\n\ndef",
        "answer": "def find_heavier_colour(pan_1, pan_2):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2665,
        "prompt": "Complete the Python function given the prompt below:Chef loves squares! You are given N points with integers coordinates, Chef asks you to find out how many points he should add to these set of N points, so that one could create at least one square having its vertices from the points of the resulting set. Note that the square created need not to be parallel to the axis.\n-----Input-----\nThe first line contains singe integer N. \nEach of next N lines contains two integers Xi and Yi denotine the coordinates of i-th point. \n-----Output-----\nIn a single line print single integer - the minimal number of points Chef need to paint to receive at least one square. \n-----Constraints-----\n- 0 \u2264 N \u2264 2000\n- -10^6 \u2264 Xi, Yi \u2264 10^6\n- There are NO coincided points\n-----Example-----\nInput:\n3\n0 0\n2 2\n3 3\nOutput:\n2\nInput:\n5\n0 0\n100 100\n200 200\n100 0\n0 100\nOutput:\n0\n-----Explanation-----\nFor the first example Chef can add points (2, 0), (0, 2) or (2, 3), (3, 2)\nFor the second example Chef already has square (0, 0), (100, 0), (0, 100), (100, 100).\n\ndef",
        "answer": "def squares(n):\n    return n * (n + 1) * (2 * n + 1) / 6",
        "difficulty": "interview"
    },
    {
        "task_id": 2666,
        "prompt": "Complete the Python function given the prompt below:Ramu was a lazy farmer. He had inherited a fairly large farm and a nice house from his father. Ramu leased out the farm land to others and earned a rather handsome income. His father used to keep a buffalo at home and sell its milk but the buffalo died a few days after his father did.\nRamu too wanted to make some money from buffaloes, but in a quite a different way. He decided that his future lay in speculating on buffaloes. In the market in his village, buffaloes were bought and sold everyday. The price fluctuated over the year, but on any single day the price was always the same.\nHe decided that he would buy buffaloes when the price was low and sell them when the price was high and, in the process, accummulate great wealth. Unfortunately his house had space for just one buffalo and so he could own at most one buffalo at any time.\nBefore he entered the buffalo market, he decided to examine to examine the variation in the price of buffaloes over the last few days and determine the maximum profit he could have made. Suppose, the price of a buffalo over the last $10$ days varied as\n1012811111012151310101281111101215131010\\quad  12\\quad  8\\quad  11\\quad  11\\quad  10\\quad  12\\quad  15\\quad  13\\quad  10\nRamu is a lazy fellow and he reckoned that he would have been willing to visit the market at most $5$ times (each time to either buy or sell a buffalo) over the last $10$ days. Given this, the maximum profit he could have made is $9$ rupees. To achieve this, he buys a buffalo on day $1$, sells it on day $2$, buys one more on day $3$ and sells it on day $8$. If he was a little less lazy and was willing to visit the market $6$ times, then he could have made more money. He could have bought on day $1$, sold on day $2$, bought on day $3$, sold on day $4$, bought on day $6$ and sold on day $8$ to make a profit of $10$ rupees.\nYour task is help Ramu calculate the maximum amount he can earn by speculating on buffaloes, given a history of daily buffalo prices over a period and a limit on how many times Ramu is willing to go to the market during this period.\n-----Input:-----\n- The first line of the input contains two integers $N$ and $K$, where $N$ is the number of days for which the price data is available and $K$ is the maximum number of times that Ramu is willing to visit the cattle market. \n- The next $N$ lines (line $2, 3,...,N+1$) contain a single positive integer each. The integer on line $i+1$, $1 \\leq i \\leq N$, indicates the price of a buffalo on day $i$.\n-----Output:-----\nA single nonnegative integer indicating that maximum amount of profit that Ramu can make if he were to make at most $K$ trips to the market.\n-----Constraints:-----\n- $1 \\leq N \\leq 400$.\n- $1 \\leq K \\leq 400$.\n- $0 \\leq$ price of a buffalo on any day $\\leq 1000$\n-----Sample Input 1:-----\n10 5\n10\n12\n8\n11\n11\n10\n12\n15\n13\n10\n-----Sample Output 1:-----\n9\n-----Sample Input 2:-----\n10 6\n10\n12\n8\n11\n11\n10\n12\n15\n13\n10\n-----Sample Output 2:-----\n10\n\ndef",
        "answer": "def maximum_profit(N, K, prices):\n    profit = 0\n    for i in range(N):\n        if prices[i] < prices[i+1]:\n            profit += prices[i+1] - prices[i]\n    return profit",
        "difficulty": "interview"
    },
    {
        "task_id": 2667,
        "prompt": "Complete the Python function given the prompt below:Are you fond of collecting some kind of stuff? Mike is crazy about collecting stamps. He is an active member of Stamp Collecting \u0421ommunity(SCC). \nSCC consists of N members which are fond of philately. A few days ago Mike argued with the others from SCC. Mike told them that all stamps of the members could be divided in such a way that i'th member would get i postage stamps. Now Mike wants to know if he was right. The next SCC meeting is tomorrow. Mike still has no answer.\nSo, help Mike! There are N members in the SCC, i'th member has Ci stamps in his collection. Your task is to determine if it is possible to redistribute C1 + C2 +... + Cn stamps among the members of SCC thus that i'th member would get i stamps.\n-----Input-----\nThe first line contains one integer N, denoting the number of members of SCC.\nThe second line contains N integers Ci, denoting the numbers of the stamps in the collection of i'th member.\n-----Output-----\nThe first line should contain YES, if we can obtain the required division, otherwise NO.\n-----Constraints-----\n1 \u2264 N \u2264 100 000;\n1 \u2264  Ci \u2264 109.\n-----Examples-----\nInput:\n5\n7 4 1 1 2\nOutput:\nYES\nInput:\n5\n1 1 1 1 1\nOutput:\nNO\n\ndef",
        "answer": "def solve(n, c):\n    if n == 1:\n        return 'YES'\n    if n == 2:\n        return 'NO'\n    if n == 3:\n        return 'YES' if c[0] == c[1] == c[2] else 'NO'\n    if n == 4:\n        return 'YES' if c[0] == c[1] == c[2] == c[3] else 'NO'\n    if n == 5:\n        return 'YES' if c[0] == c[1] == c[2] == c[3] == c[4] else 'NO'\n    if n == 6:\n        return 'YES' if c[0] == c[1] == c[2] == c[3] == c[4] == c[5] else 'NO'\n    if n == 7:\n        return 'YES' if c[0] == c[1] == c[2] == c[3] == c[4] == c[5] == c[6] else 'NO'\n    if n == 8:\n        return 'YES' if c[0] == c[1] == c[2] == c[3] == c[4] == c[5] == c[6] == c[7] else 'NO'\n    if n == 9:\n        return 'YES' if c[0] == c[1] == c[2] == c[3] == c[4] == c[5] == c[6] == c[7] == c[8] else 'NO'\n    if n == 10:\n        return 'YES' if c[0] == c[1] == c[2] == c[3] == c[4] == c[5] == c[6] == c[7] == c[8] == c[9] else 'NO'\n    if n == 11:\n        return 'YES' if c[0] == c[1] == c[2] == c[3] == c[4] == c[5] == c[6] == c[7] == c[8] == c[9] == c[10] else 'NO'",
        "difficulty": "interview"
    },
    {
        "task_id": 2668,
        "prompt": "Complete the Python function given the prompt below:Today, Chef woke up to find that he had no clean socks. Doing laundry is such a turn-off for Chef, that in such a situation, he always buys new socks instead of cleaning the old dirty ones. He arrived at the fashion store with money rupees in his pocket and started looking for socks. Everything looked good, but then Chef saw a new jacket which cost jacketCost rupees. The jacket was so nice that he could not stop himself from buying it.\nInterestingly, the shop only stocks one kind of socks, enabling them to take the unsual route of selling single socks, instead of the more common way of selling in pairs. Each of the socks costs sockCost rupees.\nChef bought as many socks as he could with his remaining money. It's guaranteed that the shop has more socks than Chef can buy. But now, he is interested in the question: will there be a day when he will have only 1 clean sock, if he uses a pair of socks each day starting tommorow? If such an unlucky day exists, output \"Unlucky Chef\", otherwise output \"Lucky Chef\". Remember that Chef never cleans or reuses any socks used once.\n-----Input-----\nThe first line of input contains three integers \u2014 jacketCost, sockCost, money \u2014 denoting the cost of a jacket, cost of a single sock, and the initial amount of money Chef has, respectively.\n-----Output-----\nIn a single line, output \"Unlucky Chef\" if such a day exists. Otherwise, output \"Lucky Chef\". \n-----Constraints-----\n- 1 \u2264 jacketCost \u2264 money \u2264 109\n- 1 \u2264 sockCost \u2264 109\n-----Example-----\nInput:\n1 2 3\nOutput:\nUnlucky Chef\nInput:\n1 2 6\nOutput:\nLucky Chef\n-----Subtasks-----\n- Subtask 1:  jacketCost, money, sockCost \u2264 103. Points - 20\n- Subtask 2: Original constraints. Points - 80\n-----Explanation-----\nTest #1:\nWhen Chef arrived at the shop, he had 3 rupees. After buying the jacket, he has 2 rupees left, enough to buy only 1 sock.\nTest #2:\nChef had 6 rupees in the beginning. After buying the jacket, he has 5 rupees left, enough to buy a pair of socks for 4 rupees.\n\ndef",
        "answer": "def sockMerchant(n, ar):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if ar[i] == ar[j]:\n                count += 1\n    return count",
        "difficulty": "interview"
    },
    {
        "task_id": 2669,
        "prompt": "Complete the Python function given the prompt below:The lockdown hasn\u2019t been great for our chef as his restaurant business got sabotaged because of lockdown, nevertheless no worries our chef is a multi-talented guy. Chef has decided to be a freelancer and work remotely. According to chef\u2019s maths, he should be able to work on maximum tasks assuming that he can only work on a single task at a time. \nAssume that chef does N tasks. The start and finish time units of those tasks are given. Select the maximum number of tasks that can be performed by a chef, assuming that a he can only work on a single task at a time.\n-----Input:-----\n- The first input contains of size of array N representing the total number of tasks.\n- The second and third lines contains N space-seperated integers representing the starting and finish time of the the tasks.\n-----Output:-----\nA single line containing indices of tasks that chef will be able to do.\n-----Constraints-----\n- $1 \\leq N \\leq 10^5$\n- Note: The lists have been sorted based on the ending times of the tasks.\n-----Sample Input 1:-----\n3\n10 12 20\n20 25 30  \n-----Sample Output 1:-----\n0  2 \n-----Sample Input 2:-----\n6\n1 2 0 6 3 7\n2 4 5 7 9 10  \n-----Sample Output 2:-----\n0  1  3  5\n\ndef",
        "answer": "def max_tasks(n, tasks):\n    tasks.sort()\n    max_tasks = 0\n    for i in range(n):\n        if tasks[i] > tasks[max_tasks]:\n            max_tasks = i\n    return max_tasks",
        "difficulty": "interview"
    },
    {
        "task_id": 2670,
        "prompt": "Complete the Python function given the prompt below:A pair of strings $(\u03b1, \u03b2)$ is called a subpair of a string $x$ if $x$ = $x_1+$$\u03b1+$$x_2+$$\u03b2+$$x_3$ (where a+b means concatenation of strings a and b) for some (possibly empty) strings $x1, x2$ and $x3$. We are given two strings and we need to find one subpair from each string such that : \nLet $(a,b), (c,d) $be subpair of $string1$ and $string2$ respectively and $X$ $=$ $a$ + $b$ + $c$ + $d$\n- $X$ is a palindrome\n- $|a| = |d|$\n- $|b| = |c|$\n- $|X|$ is maximum\n-----Input Format:-----\n- First line will contain $T$, number of testcases. Then the testcases follow. \n- Each testcase contains of a single line of input, two strings str1, str2. \n-----Output Format:-----\n- For each testcase, output in a single line representing the length of palindrome |X|.\n-----Constraints-----\n- $1 \\leq T \\leq 5$\n- $2 \\leq |str1| \\leq 10^3$\n- $2 \\leq |str2| \\leq 10^3$\n-----Sample Input 1:-----\n1\nabgcd dchbag\n-----Sample Output 1:-----\n8\n-----Sample Input 2:-----\n4   \naaa aaa\nzaaax yaaaw\nzax yaw\nzx yw\n-----Sample Output 2:-----\n6\n6\n2\n0  \n-----EXPLANATION:-----\nSample Testcase 1: The subpairs are (\"ab\",\"cd\") and (\"dc\",\"ba\"). When the subpairs are concatenated string is \"abcddcba\" which is a pallindrome, |\"ab\"| = |\"ba\"|, |\"cd\"| = |\"dc\"| and has the maximum length equal to 8.\n\ndef",
        "answer": "def longest_palindrome(str1, str2):\n    # Write your code here\n    return 0",
        "difficulty": "interview"
    },
    {
        "task_id": 2671,
        "prompt": "Complete the Python function given the prompt below:Andy got a box of candies for Christmas. In fact, he discovered that the box contained several identical smaller boxes, and they could contain even smaller boxes, and so on. Formally, we say that candies are boxes of level 0, and for 1 \u2264 i \u2264 n, a level i box contains ai boxes of level i\u2009-\u20091. The largest box has level n. Andy realized that it can take quite a long time to open all the boxes before he actually gets to eat some candies, so he put the box aside in frustration.\nBut today being his birthday, some friends came to visit Andy, and Andy decided to share some candies with them. In order to do that, he must open some of the boxes. Naturally, Andy can not open a box that is still inside an unopened box. If Andy wants to retrieve X candies, what is the least number of boxes he must open? You must help him answer many such queries. Each query is independent.\n-----Input-----\n- The first line contains two integers n and m, which refer to the level of the largest box, and the number of queries respectively.\n- The second line contains n integers a1,\u2009...,\u2009an.\n- The third line contains m integers X1,\u2009...,\u2009Xm.\n-----Output-----\n- Print m integers each in a new line, ith of them equal to the smallest number of boxes Andy must open in order to retrieve at least Xi candies.\n-----Constraints-----\n- 1\u2009\u2264\u2009n,m\u2009\u2264\u2009300000\n- 1\u2009\u2264\u2009ai\u2009\u2264\u2009109\n- 1\u2009\u2264\u2009Xi\u2009\u2264\u20091012\n- It is guaranteed that the total number of candies is at least Xi for all i\n-----Example-----\nInput 1:\n5 1\n1 1 1 1 1\n1\nOutput 1:\n5\nInput 2:\n3 3\n3 3 3\n2 8 13\nOutput 2:\n3\n5\n8\n-----Explanation-----\nTestcase 1: The only candy is contained in five levels of boxes. \nTestcase 2: In the third query, for 13 candies, Andy should open the largest box, two level-2 boxes, and finally five of six available level-1 boxes. Each of those boxes will contain 3 level-0 boxes (which are candies). So he'll have 15 candies in total, but he needs only 13 of them.\n\ndef",
        "answer": "def count_boxes(n, m, candies):\n    if n == 0:\n        return 0\n    if candies[n-1] == 0:\n        return count_boxes(n-1, m, candies)\n    else:\n        return candies[n-1] + count_boxes(n-1, m, candies)",
        "difficulty": "interview"
    },
    {
        "task_id": 2672,
        "prompt": "Complete the Python function given the prompt below:Guys don\u2019t misinterpret this it is three only.\n-----Input:-----\n- First line will contain an integer $X$.\n-----Output:-----\nA single line containing the answer to the problem modulo 1000000007.\n-----Constraints-----\n- $1 \\leq X < 10^5$\n-----Sample Input 1:-----\n1\n-----Sample Output 1:-----\n3\n-----Sample Input 2:-----\n2\n-----Sample Output 2:-----\n14\n\ndef",
        "answer": "def solve(X):\n    return (X*X*X)%1000000007",
        "difficulty": "interview"
    },
    {
        "task_id": 2673,
        "prompt": "Complete the Python function given the prompt below:Chef loves games! But he likes to invent his own. Now he plays game \"Digit Jump\". Chef has a sequence of digits $S_{1}, S_{2}, \\ldots, S_{N}$. He is staying in the first digit $S_{1}$ and wants to reach the last digit $S_{N}$ in the minimal number of jumps. \nWhile staying in some index $i$ Chef can jump into $i - 1$ and $i + 1$, but he can't jump out from sequence. Or he can jump into any digit with the same value $S_i$. \nHelp Chef to find the minimal number of jumps he need to reach digit $S_{N}$ from digit $S_1$. \n-----Input-----\nInput contains a single line consist of string $S$ of length $N$ - the sequence of digits.\n-----Output-----\nIn a single line print single integer - the minimal number of jumps he needs.\n-----Constraints-----\n- $1\\leq N \\leq 10^5$\n- Each symbol of $S$ is a digit from $0$ to $9$. \n-----Example Input 1-----\n01234567890\n-----Example Output 1-----\n1\n-----Example Input 2-----\n012134444444443\n-----Example Output 2-----\n4\n-----Explanation-----\nTest Case 1: Chef can directly jump from the first digit (it is $0$) to the last (as it is also $0$).\nTest Case 2: Chef should follow the following path: $1 - 2 - 4 - 5 - 15$.\n\ndef",
        "answer": "def digit_jump(s):\n    return s.index(s[0])",
        "difficulty": "interview"
    },
    {
        "task_id": 2674,
        "prompt": "Complete the Python function given the prompt below:Is the MRP of my new shoes exclusive or inclusive of taxes?\n-----Input:-----\n- First line will contain an integer $P$\n-----Output:-----\nFor each testcase, print either 'Inclusive' or 'Exclusive' without quotes.\n-----Constraints-----\n- $100 \\leq P \\leq 999$\n-----Sample Input 1:-----\n123\n-----Sample Output 1:-----\nExclusive\n-----Sample Input 2:-----\n111\n-----Sample Output 2:-----\nInclusive\n\ndef",
        "answer": "def exclusiveOrInclusive(P):\n    if P%2==0:\n        return 'Inclusive'\n    else:\n        return 'Exclusive'",
        "difficulty": "interview"
    },
    {
        "task_id": 2675,
        "prompt": "Complete the Python function given the prompt below:There are $n$ red balls kept on the positive $X$ axis, and $m$ blue balls kept on the positive $Y$ axis. You are given the positions of the balls. For each $i$ from $1$ to $n$, the $i$-th red ball has the coordinates $(x_i, 0)$, where $x_i$ is a positive integer. For each $i$ from $1$ to $m$, the $i$-th blue ball has the coordinates $(0, y_i)$, where $ y_i$ is a positive integer. \nIt is given that all $x_i$ are distinct. Also, all $y_i$ are distinct.\nAt the time $t= 0$, for each $i$ from $1$ to $n$, the $i^{\\text{th}}$ red ball is thrown towards positive $Y$ axis with a speed of $u_i$( that is, with velocity vector $(0, u_i)$). Simultaneously (at time $t = 0$), for each $i$ from $1$ to $m$, the $i^{\\text{th}}$ blue ball is thrown towards positive $X$ axis with a speed of $v_i$ (that is, with velocity vector $(v_i, 0)$).\nTwo balls are said to collide if they are at the same position at the same time. When two balls collide, they disappear, and hence no longer collide with other balls. (See sample examples for clarification).\nFind the total number of collisions the balls will have.\n-----Input-----\n- First line contains $n$ and $m$, the number of red balls, and the number of blue balls, respectively. \n- $i^{\\text{th}}$  of the next $n$ lines contains two space separated integers $x_i$ and $u_i$, the position and speed of the $i^{\\text{th}}$  red ball respectively\n- $i^{\\text{th}}$  of the next $m$ lines contains two space separated integers $y_i$ and $v_i$, the position and speed of the $i^{\\text{th}}$  blue ball respectively\n-----Output-----\nPrint the number of collisions.\n-----Constraints-----\n- $1 \\le n, m \\le 10^5$\n- $1 \\le x_i, u_i, y_i, v_i \\le 10^9$\n- for all $1 \\le i < j \\le n, x_i \\neq x_j$\n- for all $1 \\le i < j \\le m, y_i \\neq y_j$\n-----Example Input 1-----\n1 1\n1 2\n2 1\n-----Example Output 1-----\n1\n-----Example Input 2-----\n1 2\n1 2\n2 1\n1 2\n-----Example Output 2-----\n1\n-----Explanation-----\nExample case 1: The balls collide at t = 1, at the coordinates (1, 2). \nExample case 2: The red ball and the second blue ball collide at time 0.5 at coordinates (1, 1). Note that the first blue ball would have collided with the red ball at t = 1 (like in sample input # 1), if the second blue ball wasn't present. But since the red ball disappears at t = 0.5, its collision with first blue ball doesn't happen. The total number of collisions is 1.\n\ndef",
        "answer": "def collision(n, m, x, u, y, v):\n    count = 0\n    for i in range(n):\n        for j in range(m):\n            if x[i] == y[j]:\n                count += 1\n    return count",
        "difficulty": "interview"
    },
    {
        "task_id": 2676,
        "prompt": "Complete the Python function given the prompt below:Teddy and Freddy are two friends. Teddy has a pile of strings of size $N$. Each string $Si$ in the pile has length less or equal to $100$ ($len(Si) \\leq 100$). \nTeddy and Freddy like playing with strings. Teddy gives Freddy a string $B$ of size $M$.\nTeddy and Freddy like playing with strings. Teddy gives Freddy a string $B$ of size $M$.\nHe asks Freddy to find the count of the unique substrings of $B$ present in pile of strings of size $N$.\nFreddy is busy with the some task, so he asks for your help.Help Freddy by giving the unique substrings of $B$ present in pile of strings of size $N$.\nNote: The substrings having same permutation of characters are considered same.\n-----Input:-----\n- First line will contain $N$, number of strings. Then the strings follow. \n- Next $N$ lines will contain a string \n- $N+2$ line contains the $M$ - length of string B\n- Following line contains the string B\n-----Output:-----\nFor each testcase, output in a single line number of unique strings of B.\n-----Constraints-----\n- $1 \\leq N \\leq 100$\n- $2 \\leq len(Si) \\leq 100$\n- $2 \\leq M \\leq 100$\n-----Sample Input:-----\n4\na\nabc \nabcd\nabcde\n5\naaaaa\n-----Sample Output:-----\n1\n-----Sample Input:-----\n4\na\naa\naaa\naaaa\n5\naaaaa\n-----Sample Output:-----\n4\n-----EXPLANATION:-----\nTestCase 1: Only substring of $aaaaa$ that is present in the pile of strings is $a$. So the answer is 1\n\ndef",
        "answer": "def uniqueSubstrings(N, B):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2677,
        "prompt": "Complete the Python function given the prompt below:$Alien$ likes to give challenges to $Codezen$ team to check their implementation ability, this time he has given a string $S$ and asked to find out whether the given string is a $GOOD$ string or not.\nAccording to the challenge $GOOD$ String is a string that has at least $3$ consecutive vowels and at least $5$ different consonants.\nFor example $ACQUAINTANCES$  is a $ GOOD $String,as it contains $3$ consecutive vowels  $UAI$ and $5$ different consonants $ {C, Q, N, T, S} $\nbut  $ACQUAINT $ is  not,as it contain $3$ vowels but have only $ 4$ different consonants \n${C, Q, N, T}$.\n-----Input:-----\nA string input is given from Standard Input that consists of only capital letters. \n-----Output:-----\nOutput  a single line  that  is either $GOOD$  (if string is a good string ) or $-1$(if string is not good).\n-----Constraints-----\n- $8 \\leq S \\leq 1000$\n-----Sample Input 1:-----\nAMBITIOUSNESS\n-----Sample Output 2:-----\nGOOD\n-----Sample Input 2:-----\nCOOEY\n-----Sample Output 2:-----\n-1\n\ndef",
        "answer": "def is_good_string(S):\n    vowels = ['A', 'E', 'I', 'O', 'U']\n    consonants = ['B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z']\n    vowel_count = 0\n    consonant_count = 0\n    for i in S:\n        if i in vowels:\n            vowel_count += 1\n        elif i in consonants:\n            consonant_count += 1\n    if vowel_count >= 3 and consonant_count >= 5:\n        return 1\n    else:\n        return -1",
        "difficulty": "interview"
    },
    {
        "task_id": 2678,
        "prompt": "Complete the Python function given the prompt below:Zonal Computing Olympiad 2015, 29 Nov 2014\nAn interval is a pair of positive integers [a, b] with a \u2264 b. It is meant to denote the set of integers that lie between the values a and b. For example [3,5] denotes the set {3,4,5} while the interval [3, 3] denotes the set {3}.\nWe say that an interval [a, b] is covered by an integer i, if i belongs to the set defined by [a, b]. For example interval [3, 5] is covered by 3 and so is the interval [3, 3].\nGiven a set of intervals I, and a set of integers S we say that I is covered by S if for each interval [a, b] in I there is an integer i in S such that [a, b] is covered by i. For example, the set {[3, 5], [3, 3]} is covered by the set {3}. The set of intervals {[6, 9], [3, 5], [4, 8]} is covered by the set {4, 5, 8}. It is also covered by the set {4, 7}.\nWe would like to compute, for any set of intervals I, the size of the smallest set S that covers it. You can check that for the set of intervals {[6, 9], [3, 5], [4, 8]} the answer is 2 while for the set of intervals {[3, 5], [3, 3]} the answer is 1.\nYour program should take the set of intervals as input and output the size of the smallest set that covers it as the answer.\n-----Input format-----\nThe first line contains a single integer N, giving the number of intervals in the input.\nThis is followed by N lines, each containing two integers separated by a space describing an interval, with the first integer guaranteed to be less than or equal to the second integer.\n-----Output format-----\nOutput a single integer giving the size of the smallest set of integers that covers the given set of intervals.\n-----Test data-----\nYou may assume that all integers in the input are in the range 1 to 10^8 inclusive.\nSubtask 1 (100 marks) : 1 \u2264 N \u2264 5000.\n-----Sample Input 1-----\n2 \n3 5 \n3 3\n-----Sample Output 1-----\n1\n-----Sample Input 2-----\n3 \n6 9 \n3 5 \n4 8\n-----Sample Output 2-----\n2\n\ndef",
        "answer": "def solution():\n    # Enter your code here\n    pass\n",
        "difficulty": "interview"
    },
    {
        "task_id": 2679,
        "prompt": "Complete the Python function given the prompt below:It is the last day of covid and you are coming back to your home with two empty sacks. On\nthe way to your home, you found Ambani brothers donating all their wealth in form of coins\nafter getting fed up with all the money they have. The coins have both positive and negative\nvalues and they are laid down in a line. Now as you don\u2019t want to go with an empty sack so\nyou also decided to take some of the money being given by Ambani\u2019s. But anyone who\nwants the money has to follow a rule that he/she can choose an only contiguous segment of\ncoins which are lying in a line (you can also imagine it like an array of coins) whether its value\nis positive or negative.\nFormally according to the rule if you are given an array [-1,2,3,4,2,0] you can only choose\nsubarrays like [2,3], [4,2,0], [-1], [-1,2,3,4,2,0] etc.\nNow as you have two siblings you decided to fill both the sacks with some coins. Your task is\nto choose the coins in such a way that the sum of values of all the coins(including sacks 1\nand 2) is maximum and both sacks are non-empty.\nFor e.g.:\nIf the array of coins is:\n-1 2 3 4 -3 -5 6 7 1\nFollowing are some ways you can choose the coins:\n2 3 4 and -5 6 7\n-1 2 3 and 6 7 1\n2 3 4 and 6 7 1\nand so on\u2026.\nYou can see that among the given ways the 3rd way will yield maximum values (2+3+4) +\n(6+7+1)=23\nNote: \nBoth the sack should be non-empty.\nA subarray is a contiguous part of an array. An array that is inside another array.\nA coin can be inserted in one and only one sacks i.e you cannot choose a coin more than one time.\n-----Input:-----\n- The first line contains $n$, the number of coins in the array $c$.\n- The next line will contain $n$ space integers denoting the value $coin$ $c[i]$.\n-----Output:-----\nOne and the only line containing the maximum possible sum of values of all the coins in\nboth sacks.\n-----Constraints-----\n- $2 \\leq n \\leq 10^5$\n- $-10^5 \\leq c[i] \\leq 10^5$\n-----Sample Input 1:-----\n9\n-1 2 3 4 -3 -5 6 7 1\n-----Sample Output 1:-----\n23\n-----Sample Input 2:-----\n6\n-10 -1 -30 -40 -3 -11\n-----Sample Output 2:-----\n-4\n-----EXPLANATION:-----\nIn first test case you can easily observe that the sum will be maximum if you choose [2,3,4]\nand [6,7,1] contiguous subarrays from the given array.\n\ndef",
        "answer": "def max_sum(arr):\n    max_sum = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if sum(arr[i:j+1]) > max_sum:\n                max_sum = sum(arr[i:j+1])\n    return max_sum",
        "difficulty": "interview"
    },
    {
        "task_id": 2680,
        "prompt": "Complete the Python function given the prompt below:Little Rohu from Pluto is the best bomb defusor on the entire planet. She has saved the planet from getting destruced multiple times now. Of course, she's proud of her achievments. But, to prepare herself for more complicated situations, she keeps challenging herself to handle tricky tasks.\nHer current challenge involves the following things:\n- A square matrix of the form N*N.  \n- B bombs planted at various cells of the square matrix.\n- There can be multiple bombs at a given cell. \n- Only the four corners of the square matrix have a bomb defusor, so if a bomb is moved to any one of the four corners, it will be defused.\nFrom a given cell, any bomb can be moved in all the four directions, North, South, East, West respectively.\nRohu is given the number of bombs and the dimensions of the square matrix she's going to be dealing with, you've to help her figure out the minimum number of moves required to defuse all the bombs.\nNote-1: She's not going to enter the matrix, she's just going to move the bombs from outside. \nNote-2: The matrix is 1-indexed. \n-----Input-----\n- The first line of each test case contains two integers N, denoting the dimension of the square matrix, and B denoting the number of bombs. This will be followed by two lines, where the first line will denote the x-coordinate of all the bombs, and the second line will denote the y-coordinate of all the bombs. x[0], y[0] will be the position of the first bomb,..., x[B-1], y[B-1] will be the position of the Bth bomb.\n-----Output-----\n- Output a single line containing the minimum number of moves required.\n-----Subtasks-----\n- 1 \u2264 N, B \u2264 100000: 50 points\n- 1 \u2264 N, B \u2264 1000: 30 points\n- 1 \u2264 N, B \u2264 10: 20 points\n-----Constraints-----\n- 1 \u2264 N, B \u2264 100000\n-----Example 1-----\nInput:\n3 3\n1 2 3\n3 2 1\nOutput:\n2\n-----Example 2-----\nInput:\n2 1\n1\n1\nOutput:\n0\n-----Explanation-----\nExample case 1:Only the bomb at {2,2} needs to be moved in two steps.\nExample case 2:No bomb needs to be moved anywhere.\n\ndef",
        "answer": "def solve(n, b):\n    return 0",
        "difficulty": "interview"
    },
    {
        "task_id": 2681,
        "prompt": "Complete the Python function given the prompt below:Write a program to obtain 2 numbers $($ $A$ $and$ $B$ $)$ and an arithmetic operator $(C)$ and then design a $calculator$ depending upon the operator entered by the user.\nSo for example if C=\"+\", you have to sum the two numbers.\nIf C=\"-\", you have to subtract the two numbers.\nIf C=\" * \", you have to print the product.\nIf C=\" / \", you have to divide the two numbers.\n-----Input:-----\n- First line will contain the first number $A$.\n- Second line will contain the second number $B$.\n- Third line will contain the operator $C$, that is to be performed on A and B.\n-----Output:-----\nOutput a single line containing the answer, obtained by, performing the operator on the numbers. Your output will be considered to be correct if the difference between your output and the actual answer is not more than $10^{-6}$.\n-----Constraints-----\n- $-1000 \\leq A \\leq 1000$\n- $-1000 \\leq B \\leq 1000$ $and$ $B \\neq 0$\n- $C$ $can$ $only$ $be$ $one$ $of$ $these$ $4$ $operators$ {\" + \", \" - \", \" * \", \" / \"}\n-----Sample Input:-----\n8\n2\n/\n-----Sample Output:-----\n4.0\n-----Sample Input:-----\n5\n3\n+\n-----Sample Output:-----\n8\n\ndef",
        "answer": "def calculator():\n    a = int(input())\n    b = int(input())\n    c = input()\n    if c == \"+\":\n        print(a+b)\n    elif c == \"-\":\n        print(a-b)\n    elif c == \"*\":\n        print(a*b)\n    elif c == \"/\":\n        print(a/b)\ncalculator()\n",
        "difficulty": "interview"
    },
    {
        "task_id": 2682,
        "prompt": "Complete the Python function given the prompt below:Mathison has bought a new deck of cards that contains 2N cards, numbered and ordered from 0 to 2N-1.\nMathison is getting bored and decides to learn the Dynamo shuffle (or Sybil cut) - a flashy manner to shuffle cards. Unfortunately, the Dynamo shuffle is a little too complicated so Mathison decides to create his own shuffle.\nThis newly invented shuffle is done in N steps. At step k (0 \u2264 k < N) the deck is divided into 2k equal-sized decks\nwhere each one contains cards that lie on consecutive positions.\nEach one of those decks is then reordered: all the cards that lie on even positions are placed first followed by all cards that lie on odd positions\n(the order is preserved in each one of the two subsequences and all positions are 0-based). Then all the decks are put back together (preserving the order of decks).\nMathison has spent hours practising the shuffle and he now believes that he has perfected his technique. However, Chef doesn't believe him yet so he asks Mathison to answer Q questions that given a deck of size 2N where i-th card is labelled i, find the position of the card labelled K in the final, shuffled deck.\n-----Input-----\nThe first line of the input file will contain one integer, Q, representing the number of Chef's questions.\nEach of the next Q lines will contain a pair of integers, N and K.\n-----Output-----\nThe output file will contain Q lines, each one representing the answer to one of Chef's questions.\n-----Constraints-----\n- 1 \u2264 Q \u2264 1000\n- 1 \u2264 N \u2264 64\n- 0 \u2264 K < 2N\n-----Subtaks-----\nSubtask #1 (30 points):\n- 1 \u2264 N \u2264 10\nSubtask #2 (30 points):\n- 1 \u2264 N \u2264 32\nSubtask #3 (40 points):\n- Original constraints\n-----Example-----\nInput:\n3\n3 4\n3 3\n3 2\nOutput:\n1\n6\n2\nInput:\n1\n64 11047805202224836936\nOutput:\n1337369305470044825\n-----Explanation-----\nIn all questions, we have N = 3. Therefore, we have a deck with 8 cards.\nThe shuffling is done in three steps:\nStep 0: We divide {0, 1, 2, 3, 4, 5, 6, 7} in 20 decks. We get only one deck.\nThe deck is reordered into {0, 2, 4, 6, 1, 3, 5, 7}.\nStep 1: We divide {0, 2, 4, 6, 1, 3, 5, 7} in 21 decks. We get two decks: {0, 2, 4, 6} and {1, 3, 5, 7}.\n{0, 2, 4, 6} is reordered into {0, 4, 2, 6} while {1, 3, 5, 7} is reordered into {1, 5, 3, 7}.\nWe get {0, 4, 2, 6, 1, 5, 3, 7} when we put the decks back together.\nStep 2: We divide {0, 4, 2, 6, 1, 5, 3, 7} in 22 decks. We get four decks: {0, 4}, {2, 6}, {1, 5} and {3, 7}.\nEach one of the four decks stays the same after it is reordered (as there are only two elements to reorder).\nWe get the final, shuffled deck: {0, 4, 2, 6, 1, 5, 3, 7}.\nThe card labelled 4 is on position 1.\nThe card labelled 3 is on position 6.\nThe card labelled 2 is on position 2.\n\ndef",
        "answer": "def shuffle(n):\n    return n[1::2] + n[::2]",
        "difficulty": "interview"
    },
    {
        "task_id": 2683,
        "prompt": "Complete the Python function given the prompt below:Tic-Tac-Toe used to be Chef's favourite game during his childhood. Reminiscing in his childhood memories, he decided to create his own \"Tic-Tac-Toe\", with rules being similar to the original Tic-Tac-Toe, other than the fact that it is played on an NxN board.\nThe game is played between two players taking turns. First player puts an 'X' in an empty cell of the board, then the second player puts an 'O' in some other free cell. If the first player has K continuous X's or the second player has K continuous O's in row, column or diagonal, then he wins.\nChef started playing this new \"Tic-Tac-Toe\" with his assistant, beginning as the first player himself (that is, Chef plays 'X's). Currently, the game is ongoign, and it's Chef's turn. However, he needs to leave soon to begin tonight's dinner preparations, and has time to play only one more move. If he can win in one move, output \"YES\", otherwise output \"NO\" (without quotes). It is guaranteed that no player has already completed the winning criterion before this turn, and that it's a valid \"Tic-Tac-Toe\" game.\n-----Input-----\nThe first line of input contains one integer T denoting the number of testcases. First line of each testcase contains two integers N and K, next N lines contains N characters each. Each character is either an 'X' denoting that the first player used this cell, an 'O' meaning that the second player used this cell, or a '.' (a period) representing a free cell.\n-----Output-----\nFor each testcase, output, in a single line, \"YES\" if Chef can win in one move, or \"NO\" otherwise.\n-----Constraints-----\n- 1 \u2264 T \u2264 100\n- 3 \u2264 N \u2264 20\n- 1 \u2264 K \u2264 N\n-----Example-----\nInput:\n3\n3 3\nXOX\nO.O\nXOX\n3 1\n...\n...\n...\n3 2\n...\n...\n...\nOutput:\nYES\nYES\nNO\nInput:\n1\n4 4\nXOXO\nOX..\nXO..\nOXOX\nOutput:\nYES\n-----Subtasks-----\n- Subtask 1:  K  = 1. Points - 10\n- Subtask 2:  N  =  K  = 3. Points - 30\n- Subtask 3: Original constraints. Points - 60\n-----Explanation-----\nTest #1:\nIn first testcase, put 'X' in (2, 2), in second we can put 'X' in any cell and win. \nTest #2:\nIf you put an 'X' in (3, 3), there will be four 'X's on the main diagonal (1, 1) - (2, 2) - (3, 3) - (4, 4).\n\ndef",
        "answer": "def tic_tac_toe(board):\n    # Write your code here",
        "difficulty": "interview"
    },
    {
        "task_id": 2684,
        "prompt": "Complete the Python function given the prompt below:As we all know, a palindrome is a word that equals its reverse. Here are some examples of palindromes: malayalam, gag, appa, amma.\nWe consider any sequence consisting of the letters of the English alphabet to be a word. So axxb,abbba and bbbccddx are words for our purpose. And aaabbaaa, abbba and bbb are examples of palindromes.\nBy a subword of a word, we mean a contiguous subsequence of the word. For example the subwords of the word abbba are a, b, ab, bb, ba, abb, bbb, bba, abbb, bbba and abbba.\nIn this task you will given a word and you must find the longest subword of this word that is also a palindrome.\nFor example if the given word is abbba then the answer is abbba. If the given word is abcbcabbacba then the answer is bcabbacb.\n-----Input:-----\nThe first line of the input contains a single integer $N$ indicating the length of the word. The following line contains a single word of length $N$, made up of the letters a,b,\u2026, z.\n-----Output:-----\nThe first line of the output must contain a single integer indicating the length of the longest subword of the given word that is a palindrome. The second line must contain a subword that is a palindrome and which of maximum length. If there is more than one subword palindrome of maximum length, it suffices to print out any one.\n-----Constraints:-----\n- $1 \\leq N \\leq 5000$. \n- You may assume that in $30 \\%$ of the inputs $1 \\leq N \\leq 300$.\n-----Sample Input 1:-----\n5\nabbba\n-----Sample Output 1:-----\n5\nabbba\n-----Sample Input 2:-----\n12\nabcbcabbacba\n-----Sample Output 2:-----\n8\nbcabbacb\n\ndef",
        "answer": "def longestPalindrome(s):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2685,
        "prompt": "Complete the Python function given the prompt below:You are given a string S  of numbers. Dr. Dragoon has eaten up some numbers of the string. You decide to fix the string by putting the numbers 0 and 1 in the empty spaces. \nThe base cost for putting the \u20180\u2019  is x  and putting \u20181\u2019  is y. The cost of putting a number is the base cost multiplied by the number of times you use the letter till  that position (including   the position ).  The local mayor is happy with your work and commissions you for every number you put. \nMore specifically,  if you put, say 0  in 5th position, the mayor will count the number of occurrences of 0  till 5th   position and pay you the same amount. You wonder what the minimum cost for fixing the string is. Note  \u2013 The answer can also be negative, they denote that you got an overall profit.\nInput Format: \nThe input consists of 2 lines. First-line consists of the string of numbers S. \u2018?\u2019  denotes an empty position. \nThe second line consists of 2 integers x,y, the base cost of 0 and 1. \nOutput Format:  \nOutput 1 integer, the minimum cost of fixing the string.\nConstraints :  \n1<=|S|<=100\n1<=x,y<=100 \nSample Input:  \n501?1?\n6 5\nSample Output:  \n6\nSample Input:  \n1001?11?\n5  23\nSample Output:  \n8\nExplanation  :  \nFill 0 in the first place, the net cost will be 6-2=4. In the second place fill, 1 the net cost will be 5-3=2 Hence total cost is 4+2=6. \nIn second test case we will fill both spaces with zero, filling first zero costs  1*5-3=2 and filling the other zero costs  2*5  - 4 =6 , so total being 8.\n\ndef",
        "answer": "def solve(S,x,y):\n    cost = 0\n    for i in range(len(S)):\n        if S[i] == '?':\n            cost += x\n        else:\n            cost += y\n    return cost",
        "difficulty": "interview"
    },
    {
        "task_id": 2686,
        "prompt": "Complete the Python function given the prompt below:Heroes in Indian movies are capable of superhuman feats. For example, they can jump between buildings, jump onto and from running trains, catch bullets with their hands and teeth and so on. A perceptive follower of such movies would have noticed that there are limits to what even the superheroes can do. For example, if the hero could directly jump to his ultimate destination, that would reduce the action sequence to nothing and thus make the movie quite boring. So he typically labours through a series of superhuman steps to reach his ultimate destination.\nIn this problem, our hero has to save his wife/mother/child/dog/\u2026 held captive by the nasty villain on the top floor of a tall building in the centre of Bombay/Bangkok/Kuala Lumpur/\u2026. Our hero is on top of a (different) building. In order to make the action \"interesting\" the director has decided that the hero can only jump between buildings that are \"close\" to each other. The director decides which pairs of buildings are close enough and which are not.\nGiven the list of buildings, the identity of the building where the hero begins his search, the identity of the building where the captive (wife/mother/child/dog\u2026) is held, and the set of pairs of buildings that the hero can jump across, your aim is determine whether it is possible for the hero to reach the captive. And, if he can reach the captive he would like to do so with minimum number of jumps.\nHere is an example. There are $5$ buildings, numbered $1,2,...,5$, the hero stands on building $1$ and the captive is on building $4$. The director has decided that buildings $1$ and $3$, $2$ and $3, 1$ and $2, 3$ and $5$ and $4$ and $5$ are close enough for the hero to jump across. The hero can save the captive by jumping from $1$ to $3$ and then from $3$ to $5$ and finally from $5$ to $4$. (Note that if $i$ and $j$ are close then the hero can jump from $i$ to $j$ as well as from $j$ to $i$.). In this example, the hero could have also reached $4$ by jumping from $1$ to $2, 2$ to $3, 3$ to $5$ and finally from $5$ to $4$. The first route uses $3$ jumps while the second one uses $4$ jumps. You can verify that $3$ jumps is the best possible.\nIf the director decides that the only pairs of buildings that are close enough are $1$ and $3$, $1$ and $2$ and $4$ and $5$, then the hero would not be able to reach building $4$ to save the captive.\n-----Input:-----\nThe first line of the input contains two integers $N$ and $M$. $N$ is the number of buildings: we assume that our buildings are numbered $1,2,...,N$. $M$ is the number of pairs of buildings that the director lists as being close enough to jump from one to the other. Each of the next $M$ lines, lines $2,...,M+1$, contains a pair of integers representing a pair of buildings that are close. Line $i+1$ contains integers $A_i$ and $B_i$, $1 \\leq A_i \\leq N$ and $1 \\leq B_i \\leq N$, indicating that buildings $A_i$ and $B_i$ are close enough. The last line, line $M+2$ contains a pair of integers $S$ and $T$, where $S$ is the building from which the Hero starts his search and $T$ is the building where the captive is held.\n-----Output:-----\nIf the hero cannot reach the captive print $0$. If the hero can reach the captive print out a single integer indicating the number of jumps in the shortest route (in terms of the number of jumps) to reach the captive.\n-----Constraints:-----\n- $1 \\leq N \\leq 3500$.\n- $1 \\leq M \\leq 1000000$.\n- In at least $50 \\%$ of the inputs $1 \\leq N \\leq 1000$ and $1 \\leq M \\leq 200000$.\n-----Sample Input 1:-----\n5 5\n1 3\n2 3\n1 2\n3 5\n4 5 \n1 4\n-----Sample Output 1:-----\n3 \n-----Sample Input 2:-----\n5 3\n1 3\n1 2\n4 5\n1 4\n-----Sample Output 2:-----\n0\n\ndef",
        "answer": "def solve(N, M, A, B, S, T):\n    # Write your code here",
        "difficulty": "interview"
    },
    {
        "task_id": 2687,
        "prompt": "Complete the Python function given the prompt below:Knights' tournaments were quite popular in the Middle Ages. A lot of boys were dreaming of becoming a knight, while a lot of girls were dreaming of marrying a knight on a white horse.\nIn this problem we consider one of these tournaments. \nLet's us call a tournament binary, if it runs according to the scheme described below:\n- Exactly N knights take part in the tournament, N=2K for some integer K > 0.\n        \n- Each knight has a unique skill called strength, described as an integer from the interval [1, N].\n        \n- Initially, all the knights are standing in a line, waiting for a battle. Since all their strengths are unique, each initial configuration can be described as a permutation of numbers from 1 to N.\n        \n- There are exactly K rounds in the tournament, 2K - i + 1 knights take part in the i'th round. The K'th round is called the final.\n        \n- The i'th round runs in the following way: for each positive integer j \u2264 2K - i happens a battle between a knight on the 2\u2219j'th position and a knight on the 2\u2219j+1'th position. The strongest of two continues his tournament, taking the j'th position on the next round, while the weakest of two is forced to leave.\n        \n- The only knight, who has won K rounds, is the winner. The only knight, who has won K - 1 rounds, but lost the final, is the runner-up.   \n    \nAs you can see from the scheme, the winner is always the same, an initial configuration doesn't change anything. So, your task is to determine chances of each knight to appear in the final.\nFormally, for each knight you need to count the number of initial configurations, which will lead him to the final. Since the number can be extremly huge, you are asked to do all the calculations under modulo 109 + 9.\n-----Input-----\nThe first line contains the only integer K, denoting the number of rounds of the tournament.\n-----Output-----\nOutput should consist of 2K lines. The i'th line should contain the number of initial configurations, which lead the participant with strength equals to i to the final.\n-----Constraints-----\n1 \u2264 K < 20\n-----Examples-----\nInput:\n1\nOutput:\n2\n2\nInput:\n2\nOutput:\n0\n8\n16\n24\n-----Explanation-----\nIn the first example we have N=2 knights. Let's consider each initial configuration that could appear and simulate the tournament.\n(1, 2) -> (2)\n(2, 1) -> (2)\nIn the second example we have N=4 knights. Let's consider some initial configurations that could appear and simulate the tournament.\n(1, 2, 3, 4) -> (2, 4) -> (4)\n(3, 2, 4, 1) -> (3, 4) -> (4)\n(4, 1, 3, 2) -> (4, 3) -> (4)\n\ndef",
        "answer": "def knightTour(n, k, memo):\n    if k == 0:\n        return 1\n    if n == 0:\n        return 0\n    if (n, k) in memo:\n        return memo[(n, k)]\n    memo[(n, k)] = knightTour(n - 1, k - 1, memo) + knightTour(n - 1, k, memo)\n    return memo[(n, k)]",
        "difficulty": "interview"
    },
    {
        "task_id": 2688,
        "prompt": "Complete the Python function given the prompt below:We consider permutations of the numbers $1,..., N$ for some $N$. By permutation we mean a rearrangment of the number $1,...,N$. For example\n24517638245176382 \\quad 4 \\quad 5 \\quad 1 \\quad 7 \\quad 6 \\quad 3 \\quad 8\nis a permutation of $1,2,...,8$. Of course,\n12345678123456781 \\quad 2 \\quad 3 \\quad 4 \\quad 5 \\quad 6 \\quad 7 \\quad 8\nis also a permutation of $1,2,...,8$.\nWe can \"walk around\" a permutation in a interesting way and here is how it is done for the permutation above:\nStart at position $1$. At position $1$ we have $2$ and so we go to position $2$. Here we find $4$ and so we go to position $4$. Here we find $1$, which is a position that we have already visited. This completes the first part of our walk and we denote this walk by  ($1$ $2$ $4$ $1$). Such a walk is called a cycle. An interesting property of such walks, that you may take for granted, is that the position we revisit will always be the one we started from!\nWe continue our walk by jumping to first unvisited position, in this case position $3$ and continue in the same manner. This time we find $5$ at position $3$ and so we go to position $5$ and find $7$ and we go to position $7$ and find $3$ and thus we get the cycle ($3$ $5$ $7$ $3$). Next we start at position $6$ and get ($6$ $6$), and finally we start at position $8$ and get the cycle ($8$ $8$). We have exhausted all the positions. Our walk through this permutation consists of $4$ cycles.\nOne can carry out this walk through any permutation and obtain a set of cycles as the result. Your task is to print out the cycles that result from walking through a given permutation.\n-----Input:-----\nThe first line of the input is a positive integer $N$ indicating the length of the permutation. The next line contains $N$ integers and is a permutation of $1,2,...,N$.\n-----Output:-----\nThe first line of the output must contain a single integer $k$ denoting the number of cycles in the permutation. Line $2$ should describe the first cycle, line $3$ the second cycle and so on and line $k+1$ should describe the $k^{th}$ cycle.\n-----Constraints:-----\n- $1 \\leq N \\leq 1000$.\n-----Sample input 1:-----\n8\n2 4 5 1 7 6 3 8\n-----Sample output 1:-----\n4\n1 2 4 1\n3 5 7 3\n6 6\n8 8 \n-----Sample input 2:-----\n8\n1 2 3 4 5 6 7 8\n-----Sample output 2:-----\n8\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6\n7 7\n8 8\n\ndef",
        "answer": "def permutation_cycles(permutation):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2689,
        "prompt": "Complete the Python function given the prompt below:$Riggi$   is a spy of $KBI$ and he is on a secret mission, he is spying an Underworld Don  $Anit$.\n$Riggi$  is spying him since 5 years and he is not able to find  any evidence against $Anit$. \n$KBI$ told $Riggi$ they will send him a code string in a special format that will inform him whether he  has continue or return back from mission.\nAccording to $KBI$  firstly  he  has to find what is the original string and then he has to check string is palindrome or not.\nIf its a palindrome then he has to leave the mission and return back else continue spying $Anit$. \nRules to find original string :\n1:-If in Code string any integer(N) followed by a string of alphabets that starts with '+' and  ends with '-' then he has to repeat that string N times , like 3+acg- = acgacgacg.\n2:-If there is no integer present before string then print the string is repeated 1 time.\nlike bc=bc.\nExample of conversion from  Code string  to original string  : 2+ac-3+kb-j=acackbkbkbj  \n-----Input:-----\n- Code string $S$ is taken as input .\n-----Output:-----\n- Print  string $Continue$ if code string $S$ is not a palindrome else print $Return$.\n-----Constraints-----\n- $1 \\leq S \\leq 1000$\n- $1 \\leq N \\leq 1000$\n-----Sample Input 1:-----\n3+xy-bb3+yx-\n-----Sample Output 1:-----\nReturn\n-----Sample Input 2:-----\n3+xy-bb3+xy-\n-----Sample Output 2:-----\nContinue\n-----EXPLANATION:-----\nSample 1:- original string will be xyxyxybbyxyxyx which is  a palindrome hence print $Return$.\nSample 2:- original string will be xyxyxybbxyxyxy which is not a palindrome hence print \n$Continue$.\n\ndef",
        "answer": "def spy_mission(s):\n    # Write your code here\n    if s[0]=='+':\n        s=s[1:]\n        n=int(s[0])\n        s=s[1:]\n        if s[0]=='-':\n            s=s[1:]\n            s=s[1:]\n            s=s[1:]\n            s=s[1:]\n            s=s[1:]\n            s=s[1:]\n            s=s[1:]\n            s=s[1:]\n            s=s[1:]\n            s=s[1:]\n            s=s[1:]\n            s=s[1:]\n            s=s[1:]\n            s=s[1:]\n            s=s[1:]\n            s=s[1:]\n            s=s[1:]\n            s=s[1:]\n            s=s[1:]\n            s=s[1:]\n            s=s[1:]\n            s=s[1:]\n            s=s[1:]\n            s=s[1:]\n            s=s[1:]\n            s=s[1:]\n            s=s[1:]\n            s=s[1:]\n            s=s[1:]\n            s=s[1:]\n            s=s[1:]\n            s=s[1:]\n            s=s[1:]\n            s=s[1:]\n            s=s[1:]\n            s=s[1:]\n            s=s[1:]\n            s=s[1:]\n            s=s[1:]\n            s=s[1:]\n            s=s[1:]\n            s=s[1:]\n            s=s[1:]\n            s=s[1:]\n            s=s[1:]\n            s=s[1:]\n            s=s[1:]\n            s=s[1:]\n            s=s[1:]\n            s=s[1:]\n            s=s[1:]\n            s=s[1:]\n            s=s[1:]\n            s=s[1:]\n            s=s[1:]",
        "difficulty": "interview"
    },
    {
        "task_id": 2690,
        "prompt": "Complete the Python function given the prompt below:Alisha has a string of length n. Each character is either 'a', 'b' or 'c'. She has to select two characters s[i] and s[j] such that s[i]!= s[j] and i,j are valid indexes. She has to find the maximum value of the absolute difference between i and j i.e abs(i-j).\nSince Alisha is busy with her Semester exams help her find the maximum distance where distance is the maximum value of absolute difference between i and j  i.e abs(i-j).\n-----Input:-----\n- The first and the only line contains the string s with each character either 'a', 'b', or 'c'. \n-----Output:-----\nPrint a single integer the maximum absolute difference between i and j. \n-----Constraints-----\n- $1 \\leq n \\leq 10^5$\n- s[i] can either be 'a', 'b' or 'c'.\n-----Subtasks-----\n- 40 points : $1 \\leq n \\leq 100$\n- 60 points : $1 \\leq n \\leq 10^5$\n-----Sample Input1:-----\naabcaaa\n-----Sample Output1:-----\n4\n-----Sample Input2:-----\naba\n-----Sample Output2:-----\n1\n\ndef",
        "answer": "def max_diff(s):\n    max_diff = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)):\n            if s[i]!= s[j]:\n                max_diff = max(max_diff, abs(i-j))\n    return max_diff",
        "difficulty": "interview"
    },
    {
        "task_id": 2691,
        "prompt": "Complete the Python function given the prompt below:Tim buy a string of  length N from his friend which consist of  \u2018d\u2019 and \u2018u\u2019 letters only\n,but now Tim wants to sell the string at maximum cost.  \nThe maximum cost of string is defined as the maximum length of a Substring (consecutive subsequence) consisting of equal letters.\nTim can change at most P characters of string (\u2018d\u2019 to \u2018u\u2019   and   \u2018u\u2019 to \u2018d\u2019) you have to find out the maximum cost of string?\n-----Input:-----\n- First line will contain $N$ and $P$.\n- Second line will contain the String $S$.\n-----Output:-----\nMaximum cost of string S.\n-----Constraints-----\n- $1 \\leq N\\leq 10^5$\n- $0 \\leq P \\leq N$\n-----Sample Input 1:-----\n4  2\n$duud$\n-----Sample Output 1:-----\n4\n-----Sample Input 2 :-----\n10 1\n$dduddudddu$\n-----Sample Output 2:-----\n6\n-----EXPLANATION:-----\nIn the first sample input, We can obtain both strings $dddd$ and $uuuu$.\nIn the second sample, the optimal answer is obtained with the string $dddddudd$ or with the string $dduddddd$\n\ndef",
        "answer": "def maxCost(S, P):\n    cost = 0\n    for i in range(len(S)):\n        if S[i] == 'd':\n            cost += 1\n        else:\n            cost -= 1\n        if cost > P:\n            return i\n    return len(S)",
        "difficulty": "interview"
    },
    {
        "task_id": 2692,
        "prompt": "Complete the Python function given the prompt below:Chef is baking delicious cookies today! Since Chef is super hungry, he wants to eat at least $N$ cookies.\nSince Chef is a messy eater, he drops a lot of crumbs. Crumbs of $B$ cookies can be put together to make a new cookie! \nGiven $N$ and $B$, help Chef find out the minimum number of cookies he must initially bake, $A$, to satisfy his hunger.\n-----Input:-----\n- First line will contain $T$, number of testcases. Then the testcases follow. \n- Each testcase contains of  two space separated integers $N, B$. \n-----Output:-----\nFor each test case, print a single integer $A$, the minimum number of cookies Chef must bake initially.\n-----Constraints-----\n- $1 \\leq T \\leq 1000$\n- $1 \\leq N \\leq 1000000000$\n- $2 \\leq B \\leq 1000000000$\n-----Sample Input 1:-----\n1\n3 2\n-----Sample Output 1:-----\n2\n-----Sample Input 2:-----\n1\n11 2\n-----Sample Output 2:-----\n6\n-----Explanation 2:-----\nChef initially make 6 cookies. From the crumbs, Chef makes 3 new cookies with no crumbs left over. From the crumbs of the new cookies, Chef makes 1 new cookie and have crumbs left from one cookie. From the new cookie, Chef gets more crumbs. He adds the crumbs and gets one last cookie. After eating that, there are not enough crumbs left to make a new cookie. So a total of 11 cookies are consumed!\n\ndef",
        "answer": "def cook(n, b):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36:\n        return 36\n    if n == 37:\n        return 37\n    if n == 38:\n        return 38\n    if n == 39:\n        return 39\n    if n == 40:\n        return 40\n    if n == 41:\n        return 41\n    if n == 42:\n        return 42\n    if n == 43:\n        return 43\n    if n == 44:\n        return",
        "difficulty": "interview"
    },
    {
        "task_id": 2693,
        "prompt": "Complete the Python function given the prompt below:This is a rather simple problem to describe. You will be given three numbers $S, P$ and $k$. Your task is to find if there are integers $n_1, n_2,...,n_k$ such that $n_1 + n_2 +...+ n_k = S$, $n_1 \\cdot n_2 \\cdot... \\cdot n_k = P$. If such integers exist, print them out. If no such sequence of integers exist, then print \"NO\".\nFor example if $S=11, P=48$ and $k=3$ then $3, 4$ and $4$ is a solution. On the other hand, if $S=11, P=100$ and $k=3$, there is no solution and you should print \"NO\".\n-----Input:-----\nA single line with three integers $S, P$ and $k$.\n-----Output:-----\nA single word \"NO\" or a seqence of $k$ integers $n_1, n_2,..., n_k$ on a single line. (The $n_i$'s must add up to $S$ and their product must be $P$).\n-----Constraints:-----\n- $1 \\leq k \\leq 4$.\n- $1 \\leq S \\leq 1000$.\n- $1 \\leq P \\leq 1000$.\n-----Sample input 1:-----\n11 48 3\n-----Sample output 1:-----\n3 4 4 \n-----Sample input 2:-----\n11 100 3\n-----Sample output 2:-----\nNO\n\ndef",
        "answer": "def solve(S, P, k):\n    for i in range(1, k+1):\n        for j in range(1, k+1):\n            if i + j == S and i * j == P:\n                print(i, j)\n                return\n    print(\"NO\")",
        "difficulty": "interview"
    },
    {
        "task_id": 2694,
        "prompt": "Complete the Python function given the prompt below:Zonal Computing Olympiad 2013, 10 Nov 2012\nSpaceman Spiff has crash landed on Planet Quorg. He has to reach his ship quickly. But the evil Yukbarfs have stolen many Death Ray Blasters and have placed them along the way. You'll have to help him out!\nSpaceman Spiff is initially at the top left corner (1,1) of a rectangular N \u00d7 M grid. He needs to reach the bottom right corner (N,M). He can only move down or right. He moves at the speed of 1 cell per second. He has to move every second\u2014that is, he cannot stop and wait at any cell.\nThere are K special cells that contain the Death Ray Blasters planted by the Yukbarfs. Each Blaster has a starting time t and a frequency f.  It first fires at time t seconds, followed by another round at time t+f seconds, then at time t+2f seconds \u2026.  When a Blaster fires, it simultaneously emits four pulses, one in each of the four directions: up, down, left and right.  The pulses travel at 1 cell per second.\nSuppose a blaster is located at (x,y) with starting time t and frequency f.  At time t seconds, it shoots its first set of pulses. The pulse travelling upwards will be at the cell (x,y-s) at time t+s seconds.  At this time, the pulse travelling left will be at cell (x-s,y), the pulse travelling right will be at cell (x+s,y) and the pulse travelling down will be at cell (x,y+s).  It will fire next at time t+f seconds.  If a pulse crosses an edge of the grid, it disappears. Pulses do not affect each other if they meet. They continue along their original path. At any time, if Spaceman Spiff and a pulse are in the same cell, he dies. That is the only way pulses interact with Spaceman Spiff. Spaceman Spiff can also never be on a cell which has a blaster. Given these, you should find the least time (in seconds) in which Spaceman Spiff can reach his ship safely.  \nAs an example consider a 4\u00d74 grid that has only one Blaster, at (3,2), with starting time 1 and frequency 3.  In the grids below, S denotes Spaceman Spiff, B denotes the blaster and P denotes a pulse.  The sequence of grids describes a successful attempt to reach his ship that takes 6 seconds.\nt=0                t=1                t=2                t=3  \nS . . .        .  S . .        . .  S .        .  P .  S\n. . . .        . . . .        .  P . .        . . . .\n.  B . .        .  P . .         P  B  P .        .  B .  P\n. . . .        . . . .        .  P . .        . . . .\nt=4                t=5                t=6\n. . . .        . . . .        .  P . .\n. . .  S        .  P . .        . . . .\n.  P . .         P  B  P  S        .  B .  P\n. . . .        .  P . .        . . .  S\n-----Input format-----\nLine 1: Three space separated integers N, M and K, describing the number of rows and columns in the grid and the number of Blasters, respectively.\nLines 2 to K+1: These lines describe the K blasters.  Each line has four space separated integers. The first two integers on the line denote the row and column where the Blaster is located, the third integer is its starting time, and the fourth integer is its frequency.\n-----Output format-----\nThe first line of output must either consist of the word YES, if Spaceman Spiff can reach his ship safely, or the word NO, if he cannot do so. If the output on the first line is YES then the second line should contain a single integer giving the least time, in seconds, that it takes him to reach his ship safely.\n-----Sample Input 1-----\n4 4 1\n3 2 1 3\n-----Sample Output 1-----\nYES\n6\n-----Sample Input 2-----\n5 5 2\n5 1 1 2\n4 4 1 2\n-----Sample Output 2-----\nYES\n8\n-----Test data-----\nIn all subtasks, you may assume that:\n- \n2 \u2264 N,M \u2264 2500. \n- \nAll the frequencies are guaranteed to be integers between 1 and 3000, inclusive.\n- \nAll the starting times are guaranteed to be integers between 0 and 3000, inclusive.\n- \nAll the coordinates of the Blasters are guaranteed to be valid cells in the N\u00d7M grid. No two Blasters will be on the same cell.\n- Subtask 1 (30 marks) : K = 1.\n- Subtask 2 (70 marks) : 1 \u2264 K \u2264 2500.\n-----Live evaluation data-----\n- Subtask 1: Testcases 0,1.\n- Subtask 2: Testcases 2,3,4,5.\n\ndef",
        "answer": "def solution(N, M, K):\n    # Write your code here\n    pass\n",
        "difficulty": "interview"
    },
    {
        "task_id": 2695,
        "prompt": "Complete the Python function given the prompt below:Gotham City is again under attack. This time Joker has given an open challenge to solve the following problem in order to save Gotham. Help Batman in protecting Gotham by solving the problem.\nYou are given two strings A and B composed of lowercase letters of Latin alphabet. B can be obtained by removing some characters from A(including 0). You are given an array containing any random permutation of numbers $1$ to $N$, where $N$ is the length of the string A. You have to remove the letters of A in the given order of indices. Note that after removing one letter, the indices of other letters do not change. Return the maximum number of indices you can remove in the given order such that B is still obtainable from A.\n-----Input:-----\n- First two lines contains the strings A and B respectively.\n- The third line contains a random permutation of numbers from $1$ to $N$ representing some order of indices of string A.\n-----Output:-----\nPrint a single number denoting the maximum number of indices you can remove in the given order such that B is still obtainable from A.\n-----Constraints-----\n- $1 \\leq |B| \\leq |A| \\leq 200000$\n-----Sample Input #1:-----\nxxyxxy\nxyy\n1 5 4 6 3 2\n-----Sample Output #1:-----\n3\n-----Sample Input #2:-----\njphokenixr\njoker\n2 9 3 7 8 1 6 5 4 10\n-----Sample Output #2:-----\n5\n-----EXPLANATION:-----\nFor the first example removing characters in order,\nxxyxxy => _xyxxy => _xyx_y => _xy__y.\nIf we remove any other element now then we can not obtain 'xxy'. So the ans is 3.\n\ndef",
        "answer": "def solve(A, B):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2696,
        "prompt": "Complete the Python function given the prompt below:Every year the professor selects the top two students from his class and takes them on a fun filled field trip, this year Ali and Zafar were selected.\nThe professor took them to a place where there was a never-ending queue of solid metal cubes. The professor could see $n$ cubes at a time. On the day before, he had painted the first $n$ cubes from the left with various colours.\nAli was allowed to choose any painted cube to initially stand on (say $X$). Zafar was asked to stand on the last painted cube (the $n^{th}$ cube) with the professor.\nThe two students were given an activity each:\n- Ali had to shout out the colour of the cube he is standing on.\n- Zafar had to paint the adjacent cube on the right of him with that colour.\nBoth Ali and Zafar had to take one step to the right each time they performed their activity.\nThe Professor jumped along with Zafar, and never left his side. Throughout the activity he was looking leftwards keeping an eye on Ali. They were given a gold star and were allowed to go home when all the cubes that the professor could see at the time were painted with the same color.\nAli wanted to choose a position furthest from the professor and also wanted the gold star.\nCan you help Ali to choose this position $X$?\nThe cubes are numbered from 1 starting from the first painted cube.\nThe colours are represented as integers.\n-----Input:-----\n- The first line contains one integer n, the number of cubes initially painted.\n- The second line contains n space-separated integers: $a_1$,\u2009$a_2$,\u2009$\\dots$,\u2009$a_n$, the colours the professor chose for the first $n$ cubes.\n-----Output:-----\nPrint a single line containing one integer $X$, the position Ali should initially stand on.\n-----Constraints-----\n- $1 \\leq n \\leq 10^{6}$\n- $0 \\leq a_i \\leq 999$\n-----Sample Input 1:-----\n4\n3 3 8 8   \n-----Sample Output 1:-----\n3\n-----Sample Input 2:-----\n4\n2 8 7 3\n-----Sample Output 2:-----\n4\n\ndef",
        "answer": "def main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(a.index(max(a))+1)",
        "difficulty": "interview"
    },
    {
        "task_id": 2697,
        "prompt": "Complete the Python function given the prompt below:A greek once sifted some numbers. And it did something wonderful!\n-----Input:-----\n- First line will contain an integer $N$\n-----Output:-----\nOutput in a single line answer to the problem.\n-----Constraints-----\n- $1 \\leq N \\leq 10^5$\n-----Sample Input 1:-----\n10\n-----Sample Output 1:-----\n4\n-----Sample Input 2:-----\n20\n-----Sample Output 2:-----\n8\n\ndef",
        "answer": "def greek(n):\n    return n*(n+1)//2",
        "difficulty": "interview"
    },
    {
        "task_id": 2698,
        "prompt": "Complete the Python function given the prompt below:Chef loves cooking. Also, he is very hygienic. Hence, Chef grows his own vegetables in his mini kitchen garden. He has $M$ lanes in which he grows vegetables. The $ith$  lane has $Ai$ vegetables growing in it.\nVegetables in $ith$ lane become edible on day $Di$ and day $Di+1$(that is, the vegetables are edible only on days $Di$ and $Di+1$,where $Di+1$ is the next day of $Di$).   For Example, if $Di$ is 2, then vegetable is edible on day 2 and day 3 only.   If not collected in these days, they cannot be cooked.\nAlso, Chef is a lone worker. Hence, with respect to his capacity, he can collect only $V$ vegetables per day.\nBut, Chef is a hard worker, and is willing to work every day, starting from day 1.\nChef is busy sowing the seeds. So, he assigns you the task to find out the maximum number of vegetables he can collect, provided that he collects optimally.\n-----Input:-----\n- First line contains of 2 space separated integers $M$ and $V$, number of lanes and capacity of Chef.\n- Next $M$ lines follow\n- Each $ith$ line contains 2 space separated integers, $Di$ and $Ai$, the day when the vegetable of the $ith$ lane become edible and the number of vegetables in that lane.\n-----Output:-----\nFor each testcase, output in a single integer, that is the maximum number of vegetables that can be cooked\n-----Constraints-----\n- $1 \\leq M,V \\leq 3000$\n- $1 \\leq Di,Ai \\leq 3000$\n-----Subtasks-----\n- 20 points : $1 \\leq M \\leq 100$\n- 30 points : $1 \\leq M \\leq 1000$\n- 50 points : $Original  Constraints$\n-----Sample Input 1:-----\n2 4\n1 6\n2 5\n-----Sample Output 1:-----\n11\n-----Sample Input 2:-----\n3 3\n1 4\n6 2\n5 3\n-----Sample Output 2:-----\n9\n-----EXPLANATION:-----\nIn the first sample, in order to obtain the optimal answer, you should do the following:-\n- On day 1, collect 4 vegetables from lane 1\n- On day 2, collect 2 vegetables from lane 1 and 2 vegetables from lane 2\n- On day 3, collect 3 vegetables from lane 2\nIn the first sample, in order to obtain the optimal answer, you should do the following:-\n- On day 1, collect 3 vegetables from lane 1\n- On day 2, collect 1 vegetable from lane 1\n- On day 5, collect 3 vegetables from lane 3\n- On day 6, collect 2 vegetables from lane 2\n\ndef",
        "answer": "def max_vegetables(M, V, Di, Ai):\n    # Your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2699,
        "prompt": "Complete the Python function given the prompt below:Rashmi loves the festival of Diwali as she gets to spend time with family and enjoy the festival. Before she can fully enjoy the festival she needs to complete the homework assigned by her teacher. Since Rashmi is smart, she has solved all the problems but is struck at one tricky pattern question.\nYour Task is to help Rashmi solve the problem so that she can enjoy the festival with her family.\nThe Problem she is struck on is defined like this:\nGiven an integer N you need to generate the pattern according to following example:\nExample:\nInput:\n3  \nOutput:\n1 4 10\n2 5 11\n4 10 22\n3 6 12  \n-----Input:-----\nThe first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows.\nThe next line of each contains T space separated integers N.\n-----Output:-----\nFor each N print the required pattern.\n-----Constraints:-----\n$1 \\leq T \\leq 10^5$\n$1 \\leq N \\leq 30$\n-----Sample Input:-----\n2\n3 5\n-----Sample Output:-----\n1 4 10\n2 5 11\n4 10 22\n3 6 12\n1 4 10 22 46\n2 5 11 23 47\n4 10 22 46 94\n3 6 12 24 48  \n-----Sample Input:-----\n1\n4  \n-----Sample Output:-----\n1 4 10 22\n2 5 11 23\n4 10 22 46\n3 6 12 24\n\ndef",
        "answer": "def pattern(n):\n    for i in range(1,n+1):\n        for j in range(1,n+1):\n            if i==1 or i==n or j==1 or j==n:\n                print(j,end=\" \")\n            else:\n                print(j,end=\" \")\n        print()",
        "difficulty": "interview"
    }
]