[
    {
        "task_id": 1700,
        "prompt": "Complete the Python function given the prompt below:A string is called bracket sequence if it does not contain any characters other than \"(\" and \")\". A bracket sequence is called regular (shortly, RBS) if it is possible to obtain correct arithmetic expression by inserting characters \"+\" and \"1\" into this sequence. For example, \"\", \"(())\" and \"()()\" are RBS and \")(\" and \"(()\" are not.\nWe can see that each opening bracket in RBS is paired with some closing bracket, and, using this fact, we can define nesting depth of the RBS as maximum number of bracket pairs, such that the $2$-nd pair lies inside the $1$-st one, the $3$-rd one \u2014 inside the $2$-nd one and so on. For example, nesting depth of \"\" is $0$, \"()()()\" is $1$ and \"()((())())\" is $3$.\nNow, you are given RBS $s$ of even length $n$. You should color each bracket of $s$ into one of two colors: red or blue. Bracket sequence $r$, consisting only of red brackets, should be RBS, and bracket sequence, consisting only of blue brackets $b$, should be RBS. Any of them can be empty. You are not allowed to reorder characters in $s$, $r$ or $b$. No brackets can be left uncolored.\nAmong all possible variants you should choose one that minimizes maximum of $r$'s and $b$'s nesting depth. If there are multiple solutions you can print any of them.\n-----Input-----\nThe first line contains an even integer $n$ ($2 \\le n \\le 2 \\cdot 10^5$) \u2014 the length of RBS $s$.\nThe second line contains regular bracket sequence $s$ ($|s| = n$, $s_i \\in \\{$\"(\", \")\"$\\}$).\n-----Output-----\nPrint single string $t$ of length $n$ consisting of \"0\"-s and \"1\"-s. If $t_i$ is equal to 0 then character $s_i$ belongs to RBS $r$, otherwise $s_i$ belongs to $b$.\n-----Examples-----\nInput\n2\n()\nOutput\n11\nInput\n4\n(())\nOutput\n0101\nInput\n10\n((()())())\nOutput\n0110001111\n-----Note-----\nIn the first example one of optimal solutions is $s = $ \"$\\color{blue}{()}$\". $r$ is empty and $b = $ \"$()$\". The answer is $\\max(0, 1) = 1$.\nIn the second example it's optimal to make $s = $ \"$\\color{red}{(}\\color{blue}{(}\\color{red}{)}\\color{blue}{)}$\". $r = b = $ \"$()$\" and the answer is $1$.\nIn the third example we can make $s = $ \"$\\color{red}{(}\\color{blue}{((}\\color{red}{)()}\\color{blue}{)())}$\". $r = $ \"$()()$\" and $b = $ \"$(()())$\" and the answer is $2$.\n\ndef",
        "answer": "def bracket_sequence(s):\n    # your code here\n    return",
        "difficulty": "interview"
    },
    {
        "task_id": 1701,
        "prompt": "Complete the Python function given the prompt below:As the guys fried the radio station facilities, the school principal gave them tasks as a punishment. Dustin's task was to add comments to nginx configuration for school's website. The school has n servers. Each server has a name and an ip (names aren't necessarily unique, but ips are). Dustin knows the ip and name of each server. For simplicity, we'll assume that an nginx command is of form \"command ip;\" where command is a string consisting of English lowercase letter only, and ip is the ip of one of school servers.\n [Image] \nEach ip is of form \"a.b.c.d\" where a, b, c and d are non-negative integers less than or equal to 255 (with no leading zeros). The nginx configuration file Dustin has to add comments to has m commands. Nobody ever memorizes the ips of servers, so to understand the configuration better, Dustin has to comment the name of server that the ip belongs to at the end of each line (after each command). More formally, if a line is \"command ip;\" Dustin has to replace it with \"command ip; #name\" where name is the name of the server with ip equal to ip.\nDustin doesn't know anything about nginx, so he panicked again and his friends asked you to do his task for him.\n-----Input-----\nThe first line of input contains two integers n and m (1 \u2264 n, m \u2264 1000).\nThe next n lines contain the names and ips of the servers. Each line contains a string name, name of the server and a string ip, ip of the server, separated by space (1 \u2264 |name| \u2264 10, name only consists of English lowercase letters). It is guaranteed that all ip are distinct.\nThe next m lines contain the commands in the configuration file. Each line is of form \"command ip;\" (1 \u2264 |command| \u2264 10, command only consists of English lowercase letters). It is guaranteed that ip belongs to one of the n school servers.\n-----Output-----\nPrint m lines, the commands in the configuration file after Dustin did his task.\n-----Examples-----\nInput\n2 2\nmain 192.168.0.2\nreplica 192.168.0.1\nblock 192.168.0.1;\nproxy 192.168.0.2;\nOutput\nblock 192.168.0.1; #replica\nproxy 192.168.0.2; #main\nInput\n3 5\ngoogle 8.8.8.8\ncodeforces 212.193.33.27\nserver 138.197.64.57\nredirect 138.197.64.57;\nblock 8.8.8.8;\ncf 212.193.33.27;\nunblock 8.8.8.8;\ncheck 138.197.64.57;\nOutput\nredirect 138.197.64.57; #server\nblock 8.8.8.8; #google\ncf 212.193.33.27; #codeforces\nunblock 8.8.8.8; #google\ncheck 138.197.64.57; #server\n\ndef",
        "answer": "def nginx_config(n, m):\n    for i in range(n):\n        name, ip = input().split()\n        print('server {} {}'.format(ip, name))\n    for i in range(m):\n        command, ip = input().split()\n        print('{} {}'.format(command, ip))\nn, m = map(int, input().split())\nnginx_config(n, m)\n",
        "difficulty": "interview"
    },
    {
        "task_id": 1702,
        "prompt": "Complete the Python function given the prompt below:Vasya and Petya take part in a Codeforces round. The round lasts for two hours and contains five problems.\nFor this round the dynamic problem scoring is used. If you were lucky not to participate in any Codeforces round with dynamic problem scoring, here is what it means. The maximum point value of the problem depends on the ratio of the number of participants who solved the problem to the total number of round participants. Everyone who made at least one submission is considered to be participating in the round.\n$\\left. \\begin{array}{|l|r|} \\hline \\text{Solvers fraction} & {\\text{Maximum point value}} \\\\ \\hline(1 / 2,1 ] & {500} \\\\ \\hline(1 / 4,1 / 2 ] & {1000} \\\\ \\hline(1 / 8,1 / 4 ] & {1500} \\\\ \\hline(1 / 16,1 / 8 ] & {2000} \\\\ \\hline(1 / 32,1 / 16 ] & {2500} \\\\ \\hline [ 0,1 / 32 ] & {3000} \\\\ \\hline \\end{array} \\right.$\nPay attention to the range bounds. For example, if 40 people are taking part in the round, and 10 of them solve a particular problem, then the solvers fraction is equal to 1 / 4, and the problem's maximum point value is equal to 1500.\nIf the problem's maximum point value is equal to x, then for each whole minute passed from the beginning of the contest to the moment of the participant's correct submission, the participant loses x / 250 points. For example, if the problem's maximum point value is 2000, and the participant submits a correct solution to it 40 minutes into the round, this participant will be awarded with 2000\u00b7(1 - 40 / 250) = 1680 points for this problem.\nThere are n participants in the round, including Vasya and Petya. For each participant and each problem, the number of minutes which passed between the beginning of the contest and the submission of this participant to this problem is known. It's also possible that this participant made no submissions to this problem.\nWith two seconds until the end of the round, all participants' submissions have passed pretests, and not a single hack attempt has been made. Vasya believes that no more submissions or hack attempts will be made in the remaining two seconds, and every submission will pass the system testing.\nUnfortunately, Vasya is a cheater. He has registered 10^9 + 7 new accounts for the round. Now Vasya can submit any of his solutions from these new accounts in order to change the maximum point values of the problems. Vasya can also submit any wrong solutions to any problems. Note that Vasya can not submit correct solutions to the problems he hasn't solved.\nVasya seeks to score strictly more points than Petya in the current round. Vasya has already prepared the scripts which allow to obfuscate his solutions and submit them into the system from any of the new accounts in just fractions of seconds. However, Vasya doesn't want to make his cheating too obvious, so he wants to achieve his goal while making submissions from the smallest possible number of new accounts.\nFind the smallest number of new accounts Vasya needs in order to beat Petya (provided that Vasya's assumptions are correct), or report that Vasya can't achieve his goal.\n-----Input-----\nThe first line contains a single integer n (2 \u2264 n \u2264 120)\u00a0\u2014 the number of round participants, including Vasya and Petya.\nEach of the next n lines contains five integers a_{i}, 1, a_{i}, 2..., a_{i}, 5 ( - 1 \u2264 a_{i}, j \u2264 119)\u00a0\u2014 the number of minutes passed between the beginning of the round and the submission of problem j by participant i, or -1 if participant i hasn't solved problem j.\nIt is guaranteed that each participant has made at least one successful submission.\nVasya is listed as participant number 1, Petya is listed as participant number 2, all the other participants are listed in no particular order.\n-----Output-----\nOutput a single integer\u00a0\u2014 the number of new accounts Vasya needs to beat Petya, or -1 if Vasya can't achieve his goal.\n-----Examples-----\nInput\n2\n5 15 40 70 115\n50 45 40 30 15\nOutput\n2\nInput\n3\n55 80 10 -1 -1\n15 -1 79 60 -1\n42 -1 13 -1 -1\nOutput\n3\nInput\n5\n119 119 119 119 119\n0 0 0 0 -1\n20 65 12 73 77\n78 112 22 23 11\n1 78 60 111 62\nOutput\n27\nInput\n4\n-1 20 40 77 119\n30 10 73 50 107\n21 29 -1 64 98\n117 65 -1 -1 -1\nOutput\n-1\n-----Note-----\nIn the first example, Vasya's optimal strategy is to submit the solutions to the last three problems from two new accounts. In this case the first two problems will have the maximum point value of 1000, while the last three problems will have the maximum point value of 500. Vasya's score will be equal to 980 + 940 + 420 + 360 + 270 = 2970 points, while Petya will score just 800 + 820 + 420 + 440 + 470 = 2950 points.\nIn the second example, Vasya has to make a single unsuccessful submission to any problem from two new accounts, and a single successful submission to the first problem from the third new account. In this case, the maximum point values of the problems will be equal to 500, 1500, 1000, 1500, 3000. Vasya will score 2370 points, while Petya will score just 2294 points.\nIn the third example, Vasya can achieve his goal by submitting the solutions to the first four problems from 27 new accounts. The maximum point values of the problems will be equal to 500, 500, 500, 500, 2000. Thanks to the high cost of the fifth problem, Vasya will manage to beat Petya who solved the first four problems very quickly, but couldn't solve the fifth one.\n\ndef",
        "answer": "def solve(n, a):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 1703,
        "prompt": "Complete the Python function given the prompt below:A bracket sequence is a string containing only characters \"(\" and \")\".\nA regular bracket sequence is a bracket sequence that can be transformed into a correct arithmetic expression by inserting characters \"1\" and \"+\" between the original characters of the sequence. For example, bracket sequences \"()()\", \"(())\" are regular (the resulting expressions are: \"(1)+(1)\", \"((1+1)+1)\"), and \")(\" and \"(\" are not.\nYou are given $n$ bracket sequences $s_1, s_2, \\dots, s_n$. Calculate the number of pairs $i, j \\, (1 \\le i, j \\le n)$ such that the bracket sequence $s_i + s_j$ is a regular bracket sequence. Operation $+$ means concatenation i.e. \"()(\" + \")()\" = \"()()()\".\nIf $s_i + s_j$ and $s_j + s_i$ are regular bracket sequences and $i \\ne j$, then both pairs $(i, j)$ and $(j, i)$ must be counted in the answer. Also, if $s_i + s_i$ is a regular bracket sequence, the pair $(i, i)$ must be counted in the answer.\n-----Input-----\nThe first line contains one integer $n \\, (1 \\le n \\le 3 \\cdot 10^5)$ \u2014 the number of bracket sequences. The following $n$ lines contain bracket sequences \u2014 non-empty strings consisting only of characters \"(\" and \")\". The sum of lengths of all bracket sequences does not exceed $3 \\cdot 10^5$.\n-----Output-----\nIn the single line print a single integer \u2014 the number of pairs $i, j \\, (1 \\le i, j \\le n)$ such that the bracket sequence $s_i + s_j$ is a regular bracket sequence.\n-----Examples-----\nInput\n3\n)\n()\n(\nOutput\n2\nInput\n2\n()\n()\nOutput\n4\n-----Note-----\nIn the first example, suitable pairs are $(3, 1)$ and $(2, 2)$.\nIn the second example, any pair is suitable, namely $(1, 1), (1, 2), (2, 1), (2, 2)$.\n\ndef",
        "answer": "def count_pairs(n):\n    return 0",
        "difficulty": "interview"
    },
    {
        "task_id": 1704,
        "prompt": "Complete the Python function given the prompt below:Denis, after buying flowers and sweets (you will learn about this story in the next task), went to a date with Nastya to ask her to become a couple. Now, they are sitting in the cafe and finally... Denis asks her to be together, but... Nastya doesn't give any answer. \nThe poor boy was very upset because of that. He was so sad that he punched some kind of scoreboard with numbers. The numbers are displayed in the same way as on an electronic clock: each digit position consists of $7$ segments, which can be turned on or off to display different numbers. The picture shows how all $10$ decimal digits are displayed: \n [Image] \nAfter the punch, some segments stopped working, that is, some segments might stop glowing if they glowed earlier. But Denis remembered how many sticks were glowing and how many are glowing now. Denis broke exactly $k$ segments and he knows which sticks are working now. Denis came up with the question: what is the maximum possible number that can appear on the board if you turn on exactly $k$ sticks (which are off now)? \nIt is allowed that the number includes leading zeros.\n-----Input-----\nThe first line contains integer $n$ $(1 \\leq n \\leq 2000)$ \u00a0\u2014 the number of digits on scoreboard and $k$ $(0 \\leq k \\leq 2000)$ \u00a0\u2014 the number of segments that stopped working.\nThe next $n$ lines contain one binary string of length $7$, the $i$-th of which encodes the $i$-th digit of the scoreboard.\nEach digit on the scoreboard consists of $7$ segments. We number them, as in the picture below, and let the $i$-th place of the binary string be $0$ if the $i$-th stick is not glowing and $1$ if it is glowing. Then a binary string of length $7$ will specify which segments are glowing now.\n [Image] \nThus, the sequences \"1110111\", \"0010010\", \"1011101\", \"1011011\", \"0111010\", \"1101011\", \"1101111\", \"1010010\", \"1111111\", \"1111011\" encode in sequence all digits from $0$ to $9$ inclusive.\n-----Output-----\nOutput a single number consisting of $n$ digits \u00a0\u2014 the maximum number that can be obtained if you turn on exactly $k$ sticks or $-1$, if it is impossible to turn on exactly $k$ sticks so that a correct number appears on the scoreboard digits.\n-----Examples-----\nInput\n1 7\n0000000\nOutput\n8\nInput\n2 5\n0010010\n0010010\nOutput\n97\nInput\n3 5\n0100001\n1001001\n1010011\nOutput\n-1\n-----Note-----\nIn the first test, we are obliged to include all $7$ sticks and get one $8$ digit on the scoreboard.\nIn the second test, we have sticks turned on so that units are formed. For $5$ of additionally included sticks, you can get the numbers $07$, $18$, $34$, $43$, $70$, $79$, $81$ and $97$, of which we choose the maximum \u00a0\u2014 $97$.\nIn the third test, it is impossible to turn on exactly $5$ sticks so that a sequence of numbers appears on the scoreboard.\n\ndef",
        "answer": "def solve(n, k):\n    return -1",
        "difficulty": "interview"
    },
    {
        "task_id": 1705,
        "prompt": "Complete the Python function given the prompt below:Three years have passes and nothing changed. It is still raining in London, and Mr. Black has to close all the doors in his home in order to not be flooded. Once, however, Mr. Black became so nervous that he opened one door, then another, then one more and so on until he opened all the doors in his house.\nThere are exactly two exits from Mr. Black's house, let's name them left and right exits. There are several doors in each of the exits, so each door in Mr. Black's house is located either in the left or in the right exit. You know where each door is located. Initially all the doors are closed. Mr. Black can exit the house if and only if all doors in at least one of the exits is open. You are given a sequence in which Mr. Black opened the doors, please find the smallest index $k$ such that Mr. Black can exit the house after opening the first $k$ doors.\nWe have to note that Mr. Black opened each door at most once, and in the end all doors became open.\n-----Input-----\nThe first line contains integer $n$ ($2 \\le n \\le 200\\,000$)\u00a0\u2014 the number of doors.\nThe next line contains $n$ integers: the sequence in which Mr. Black opened the doors. The $i$-th of these integers is equal to $0$ in case the $i$-th opened door is located in the left exit, and it is equal to $1$ in case it is in the right exit.\nIt is guaranteed that there is at least one door located in the left exit and there is at least one door located in the right exit.\n-----Output-----\nPrint the smallest integer $k$ such that after Mr. Black opened the first $k$ doors, he was able to exit the house.\n-----Examples-----\nInput\n5\n0 0 1 0 0\nOutput\n3\nInput\n4\n1 0 0 1\nOutput\n3\n-----Note-----\nIn the first example the first two doors are from the left exit, so when Mr. Black opened both of them only, there were two more closed door in the left exit and one closed door in the right exit. So Mr. Black wasn't able to exit at that moment.\nWhen he opened the third door, all doors from the right exit became open, so Mr. Black was able to exit the house.\nIn the second example when the first two doors were opened, there was open closed door in each of the exit.\nWith three doors opened Mr. Black was able to use the left exit.\n\ndef",
        "answer": "def solve():\n    n = int(input())\n    doors = [int(x) for x in input().split()]\n    left = 0\n    right = n - 1\n    while left < right:\n        if doors[left] == 1:\n            left += 1\n        if doors[right] == 1:\n            right -= 1\n    print(left + 1)",
        "difficulty": "interview"
    },
    {
        "task_id": 1706,
        "prompt": "Complete the Python function given the prompt below:Ringo found a string $s$ of length $n$ in his yellow submarine. The string contains only lowercase letters from the English alphabet. As Ringo and his friends love palindromes, he would like to turn the string $s$ into a palindrome by applying two types of operations to the string. \nThe first operation allows him to choose $i$ ($2 \\le i \\le n-1$) and to append the substring $s_2s_3 \\ldots s_i$ ($i - 1$ characters) reversed to the front of $s$.\nThe second operation allows him to choose $i$ ($2 \\le i \\le n-1$) and to append the substring $s_i s_{i + 1}\\ldots s_{n - 1}$ ($n - i$ characters) reversed to the end of $s$.\nNote that characters in the string in this problem are indexed from $1$.\nFor example suppose $s=$abcdef. If he performs the first operation with $i=3$ then he appends cb to the front of $s$ and the result will be cbabcdef. Performing the second operation on the resulted string with $i=5$ will yield cbabcdefedc.\nYour task is to help Ringo make the entire string a palindrome by applying any of the two operations (in total) at most $30$ times. The length of the resulting palindrome must not exceed $10^6$\nIt is guaranteed that under these constraints there always is a solution. Also note you do not have to minimize neither the number of operations applied, nor the length of the resulting string, but they have to fit into the constraints.\n-----Input-----\nThe only line contains the string $S$ ($3 \\le |s| \\le 10^5$) of lowercase letters from the English alphabet.\n-----Output-----\nThe first line should contain $k$ ($0\\le k \\le 30$) \u00a0\u2014 the number of operations performed.\nEach of the following $k$ lines should describe an operation in form L i or R i. $L$ represents the first operation, $R$ represents the second operation, $i$ represents the index chosen.\nThe length of the resulting palindrome must not exceed $10^6$.\n-----Examples-----\nInput\nabac\nOutput\n2\nR 2\nR 5\nInput\nacccc\nOutput\n2\nL 4\nL 2\nInput\nhannah\nOutput\n0\n-----Note-----\nFor the first example the following operations are performed:\nabac $\\to$ abacab $\\to$ abacaba\nThe second sample performs the following operations: acccc $\\to$ cccacccc $\\to$ ccccacccc\nThe third example is already a palindrome so no operations are required.\n\ndef",
        "answer": "def palindrome(s):\n    n = len(s)\n    for i in range(n):\n        s = s[i:] + s[:i]\n    return s",
        "difficulty": "interview"
    },
    {
        "task_id": 1707,
        "prompt": "Complete the Python function given the prompt below:The legend of the foundation of Vectorland talks of two integers $x$ and $y$. Centuries ago, the array king placed two markers at points $|x|$ and $|y|$ on the number line and conquered all the land in between (including the endpoints), which he declared to be Arrayland. Many years later, the vector king placed markers at points $|x - y|$ and $|x + y|$ and conquered all the land in between (including the endpoints), which he declared to be Vectorland. He did so in such a way that the land of Arrayland was completely inside (including the endpoints) the land of Vectorland.\nHere $|z|$ denotes the absolute value of $z$.\nNow, Jose is stuck on a question of his history exam: \"What are the values of $x$ and $y$?\" Jose doesn't know the answer, but he believes he has narrowed the possible answers down to $n$ integers $a_1, a_2, \\dots, a_n$. Now, he wants to know the number of unordered pairs formed by two different elements from these $n$ integers such that the legend could be true if $x$ and $y$ were equal to these two values. Note that it is possible that Jose is wrong, and that no pairs could possibly make the legend true.\n-----Input-----\nThe first line contains a single integer $n$ ($2 \\le n \\le 2 \\cdot 10^5$) \u00a0\u2014 the number of choices.\nThe second line contains $n$ pairwise distinct integers $a_1, a_2, \\dots, a_n$ ($-10^9 \\le a_i \\le 10^9$)\u00a0\u2014 the choices Jose is considering.\n-----Output-----\nPrint a single integer number\u00a0\u2014 the number of unordered pairs $\\{x, y\\}$ formed by different numbers from Jose's choices that could make the legend true.\n-----Examples-----\nInput\n3\n2 5 -3\nOutput\n2\nInput\n2\n3 6\nOutput\n1\n-----Note-----\nConsider the first sample. For the pair $\\{2, 5\\}$, the situation looks as follows, with the Arrayland markers at $|2| = 2$ and $|5| = 5$, while the Vectorland markers are located at $|2 - 5| = 3$ and $|2 + 5| = 7$:\n [Image] \nThe legend is not true in this case, because the interval $[2, 3]$ is not conquered by Vectorland. For the pair $\\{5, -3\\}$ the situation looks as follows, with Arrayland consisting of the interval $[3, 5]$ and Vectorland consisting of the interval $[2, 8]$:\n [Image] \nAs Vectorland completely contains Arrayland, the legend is true. It can also be shown that the legend is true for the pair $\\{2, -3\\}$, for a total of two pairs.\nIn the second sample, the only pair is $\\{3, 6\\}$, and the situation looks as follows:\n [Image] \nNote that even though Arrayland and Vectorland share $3$ as endpoint, we still consider Arrayland to be completely inside of Vectorland.\n\ndef",
        "answer": "def legend(n, a):\n    # your code here\n    return 0",
        "difficulty": "interview"
    },
    {
        "task_id": 1708,
        "prompt": "Complete the Python function given the prompt below:Lunar New Year is approaching, and Bob is planning to go for a famous restaurant \u2014 \"Alice's\".\nThe restaurant \"Alice's\" serves $n$ kinds of food. The cost for the $i$-th kind is always $c_i$. Initially, the restaurant has enough ingredients for serving exactly $a_i$ dishes of the $i$-th kind. In the New Year's Eve, $m$ customers will visit Alice's one after another and the $j$-th customer will order $d_j$ dishes of the $t_j$-th kind of food. The $(i + 1)$-st customer will only come after the $i$-th customer is completely served.\nSuppose there are $r_i$ dishes of the $i$-th kind remaining (initially $r_i = a_i$). When a customer orders $1$ dish of the $i$-th kind, the following principles will be processed. If $r_i > 0$, the customer will be served exactly $1$ dish of the $i$-th kind. The cost for the dish is $c_i$. Meanwhile, $r_i$ will be reduced by $1$. Otherwise, the customer will be served $1$ dish of the cheapest available kind of food if there are any. If there are multiple cheapest kinds of food, the one with the smallest index among the cheapest will be served. The cost will be the cost for the dish served and the remain for the corresponding dish will be reduced by $1$. If there are no more dishes at all, the customer will leave angrily. Therefore, no matter how many dishes are served previously, the cost for the customer is $0$.\nIf the customer doesn't leave after the $d_j$ dishes are served, the cost for the customer will be the sum of the cost for these $d_j$ dishes.\nPlease determine the total cost for each of the $m$ customers.\n-----Input-----\nThe first line contains two integers $n$ and $m$ ($1 \\leq n, m \\leq 10^5$), representing the number of different kinds of food and the number of customers, respectively.\nThe second line contains $n$ positive integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq 10^7$), where $a_i$ denotes the initial remain of the $i$-th kind of dishes.\nThe third line contains $n$ positive integers $c_1, c_2, \\ldots, c_n$ ($1 \\leq c_i \\leq 10^6$), where $c_i$ denotes the cost of one dish of the $i$-th kind.\nThe following $m$ lines describe the orders of the $m$ customers respectively. The $j$-th line contains two positive integers $t_j$ and $d_j$ ($1 \\leq t_j \\leq n$, $1 \\leq d_j \\leq 10^7$), representing the kind of food and the number of dishes the $j$-th customer orders, respectively.\n-----Output-----\nPrint $m$ lines. In the $j$-th line print the cost for the $j$-th customer.\n-----Examples-----\nInput\n8 5\n8 6 2 1 4 5 7 5\n6 3 3 2 6 2 3 2\n2 8\n1 4\n4 7\n3 4\n6 10\nOutput\n22\n24\n14\n10\n39\nInput\n6 6\n6 6 6 6 6 6\n6 66 666 6666 66666 666666\n1 6\n2 6\n3 6\n4 6\n5 6\n6 66\nOutput\n36\n396\n3996\n39996\n399996\n0\nInput\n6 6\n6 6 6 6 6 6\n6 66 666 6666 66666 666666\n1 6\n2 13\n3 6\n4 11\n5 6\n6 6\nOutput\n36\n11058\n99996\n4333326\n0\n0\n-----Note-----\nIn the first sample, $5$ customers will be served as follows. Customer $1$ will be served $6$ dishes of the $2$-nd kind, $1$ dish of the $4$-th kind, and $1$ dish of the $6$-th kind. The cost is $6 \\cdot 3 + 1 \\cdot 2 + 1 \\cdot 2 = 22$. The remain of the $8$ kinds of food will be $\\{8, 0, 2, 0, 4, 4, 7, 5\\}$. Customer $2$ will be served $4$ dishes of the $1$-st kind. The cost is $4 \\cdot 6 = 24$. The remain will be $\\{4, 0, 2, 0, 4, 4, 7, 5\\}$. Customer $3$ will be served $4$ dishes of the $6$-th kind, $3$ dishes of the $8$-th kind. The cost is $4 \\cdot 2 + 3 \\cdot 2 = 14$. The remain will be $\\{4, 0, 2, 0, 4, 0, 7, 2\\}$. Customer $4$ will be served $2$ dishes of the $3$-rd kind, $2$ dishes of the $8$-th kind. The cost is $2 \\cdot 3 + 2 \\cdot 2 = 10$. The remain will be $\\{4, 0, 0, 0, 4, 0, 7, 0\\}$. Customer $5$ will be served $7$ dishes of the $7$-th kind, $3$ dishes of the $1$-st kind. The cost is $7 \\cdot 3 + 3 \\cdot 6 = 39$. The remain will be $\\{1, 0, 0, 0, 4, 0, 0, 0\\}$.\nIn the second sample, each customer is served what they order except the last one, who leaves angrily without paying. For example, the second customer is served $6$ dishes of the second kind, so the cost is $66 \\cdot 6 = 396$.\nIn the third sample, some customers may not be served what they order. For example, the second customer is served $6$ dishes of the second kind, $6$ of the third and $1$ of the fourth, so the cost is $66 \\cdot 6 + 666 \\cdot 6 + 6666 \\cdot 1 = 11058$.\n\ndef",
        "answer": "def main():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    for _ in range(m):\n        t, d = map(int, input().split())\n        print(sum(c[i] * d for i in range(t, n, t)))",
        "difficulty": "interview"
    },
    {
        "task_id": 1709,
        "prompt": "Complete the Python function given the prompt below:ZS the Coder and Chris the Baboon has arrived at Udayland! They walked in the park where n trees grow. They decided to be naughty and color the trees in the park. The trees are numbered with integers from 1 to n from left to right.\nInitially, tree i has color c_{i}. ZS the Coder and Chris the Baboon recognizes only m different colors, so 0 \u2264 c_{i} \u2264 m, where c_{i} = 0 means that tree i is uncolored.\nZS the Coder and Chris the Baboon decides to color only the uncolored trees, i.e. the trees with c_{i} = 0. They can color each of them them in any of the m colors from 1 to m. Coloring the i-th tree with color j requires exactly p_{i}, j litres of paint.\nThe two friends define the beauty of a coloring of the trees as the minimum number of contiguous groups (each group contains some subsegment of trees) you can split all the n trees into so that each group contains trees of the same color. For example, if the colors of the trees from left to right are 2, 1, 1, 1, 3, 2, 2, 3, 1, 3, the beauty of the coloring is 7, since we can partition the trees into 7 contiguous groups of the same color : {2}, {1, 1, 1}, {3}, {2, 2}, {3}, {1}, {3}. \nZS the Coder and Chris the Baboon wants to color all uncolored trees so that the beauty of the coloring is exactly k. They need your help to determine the minimum amount of paint (in litres) needed to finish the job.\nPlease note that the friends can't color the trees that are already colored.\n-----Input-----\nThe first line contains three integers, n, m and k (1 \u2264 k \u2264 n \u2264 100, 1 \u2264 m \u2264 100)\u00a0\u2014 the number of trees, number of colors and beauty of the resulting coloring respectively.\nThe second line contains n integers c_1, c_2,..., c_{n} (0 \u2264 c_{i} \u2264 m), the initial colors of the trees. c_{i} equals to 0 if the tree number i is uncolored, otherwise the i-th tree has color c_{i}.\nThen n lines follow. Each of them contains m integers. The j-th number on the i-th of them line denotes p_{i}, j (1 \u2264 p_{i}, j \u2264 10^9)\u00a0\u2014 the amount of litres the friends need to color i-th tree with color j. p_{i}, j's are specified even for the initially colored trees, but such trees still can't be colored.\n-----Output-----\nPrint a single integer, the minimum amount of paint needed to color the trees. If there are no valid tree colorings of beauty k, print  - 1.\n-----Examples-----\nInput\n3 2 2\n0 0 0\n1 2\n3 4\n5 6\nOutput\n10\nInput\n3 2 2\n2 1 2\n1 3\n2 4\n3 5\nOutput\n-1\nInput\n3 2 2\n2 0 0\n1 3\n2 4\n3 5\nOutput\n5\nInput\n3 2 3\n2 1 2\n1 3\n2 4\n3 5\nOutput\n0\n-----Note-----\nIn the first sample case, coloring the trees with colors 2, 1, 1 minimizes the amount of paint used, which equals to 2 + 3 + 5 = 10. Note that 1, 1, 1 would not be valid because the beauty of such coloring equals to 1 ({1, 1, 1} is a way to group the trees into a single group of the same color).\nIn the second sample case, all the trees are colored, but the beauty of the coloring is 3, so there is no valid coloring, and the answer is  - 1.\nIn the last sample case, all the trees are colored and the beauty of the coloring matches k, so no paint is used and the answer is 0.\n\ndef",
        "answer": "def solution(n, m, k):\n    # Write your code here\n    pass\n",
        "difficulty": "interview"
    },
    {
        "task_id": 1710,
        "prompt": "Complete the Python function given the prompt below:Nastya received one more array on her birthday, this array can be used to play a traditional Byteland game on it. However, to play the game the players should first select such a subsegment of the array that $\\frac{p}{s} = k$, where p is the product of all integers on the given array, s is their sum, and k is a given constant for all subsegments. \nNastya wonders how many subsegments of the array fit the described conditions. A subsegment of an array is several consecutive integers of the array.\n-----Input-----\nThe first line contains two integers n and k (1 \u2264 n \u2264 2\u00b710^5, 1 \u2264 k \u2264 10^5), where n is the length of the array and k is the constant described above.\nThe second line contains n integers a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 10^8)\u00a0\u2014 the elements of the array.\n-----Output-----\nIn the only line print the number of subsegments such that the ratio between the product and the sum on them is equal to k.\n-----Examples-----\nInput\n1 1\n1\nOutput\n1\nInput\n4 2\n6 3 8 1\nOutput\n2\n-----Note-----\nIn the first example the only subsegment is [1]. The sum equals 1, the product equals 1, so it suits us because $\\frac{1}{1} = 1$.\nThere are two suitable subsegments in the second example \u2014 [6, 3] and [3, 8, 1]. Subsegment [6, 3] has sum 9 and product 18, so it suits us because $\\frac{18}{9} = 2$. Subsegment [3, 8, 1] has sum 12 and product 24, so it suits us because $\\frac{24}{12} = 2$.\n\ndef",
        "answer": "def solve(n, k, a):\n    s = sum(a)\n    p = 1\n    for i in a:\n        p *= i\n    if p / s == k:\n        return 1\n    else:\n        return 0",
        "difficulty": "interview"
    },
    {
        "task_id": 1711,
        "prompt": "Complete the Python function given the prompt below:Your task is to calculate the number of arrays such that:  each array contains $n$ elements;  each element is an integer from $1$ to $m$;  for each array, there is exactly one pair of equal elements;  for each array $a$, there exists an index $i$ such that the array is strictly ascending before the $i$-th element and strictly descending after it (formally, it means that $a_j < a_{j + 1}$, if $j < i$, and $a_j > a_{j + 1}$, if $j \\ge i$). \n-----Input-----\nThe first line contains two integers $n$ and $m$ ($2 \\le n \\le m \\le 2 \\cdot 10^5$).\n-----Output-----\nPrint one integer \u2014 the number of arrays that meet all of the aforementioned conditions, taken modulo $998244353$.\n-----Examples-----\nInput\n3 4\nOutput\n6\nInput\n3 5\nOutput\n10\nInput\n42 1337\nOutput\n806066790\nInput\n100000 200000\nOutput\n707899035\n-----Note-----\nThe arrays in the first example are:  $[1, 2, 1]$;  $[1, 3, 1]$;  $[1, 4, 1]$;  $[2, 3, 2]$;  $[2, 4, 2]$;  $[3, 4, 3]$.\n\ndef",
        "answer": "def solution(n, m):\n    return 0",
        "difficulty": "interview"
    },
    {
        "task_id": 1712,
        "prompt": "Complete the Python function given the prompt below:Vanya and his friend Vova play a computer game where they need to destroy n monsters to pass a level. Vanya's character performs attack with frequency x hits per second and Vova's character performs attack with frequency y hits per second. Each character spends fixed time to raise a weapon and then he hits (the time to raise the weapon is 1 / x seconds for the first character and 1 / y seconds for the second one). The i-th monster dies after he receives a_{i} hits. \nVanya and Vova wonder who makes the last hit on each monster. If Vanya and Vova make the last hit at the same time, we assume that both of them have made the last hit.\n-----Input-----\nThe first line contains three integers n,x,y (1 \u2264 n \u2264 10^5, 1 \u2264 x, y \u2264 10^6) \u2014 the number of monsters, the frequency of Vanya's and Vova's attack, correspondingly.\nNext n lines contain integers a_{i} (1 \u2264 a_{i} \u2264 10^9)\u00a0\u2014 the number of hits needed do destroy the i-th monster.\n-----Output-----\nPrint n lines. In the i-th line print word \"Vanya\", if the last hit on the i-th monster was performed by Vanya, \"Vova\", if Vova performed the last hit, or \"Both\", if both boys performed it at the same time.\n-----Examples-----\nInput\n4 3 2\n1\n2\n3\n4\nOutput\nVanya\nVova\nVanya\nBoth\nInput\n2 1 1\n1\n2\nOutput\nBoth\nBoth\n-----Note-----\nIn the first sample Vanya makes the first hit at time 1 / 3, Vova makes the second hit at time 1 / 2, Vanya makes the third hit at time 2 / 3, and both boys make the fourth and fifth hit simultaneously at the time 1.\nIn the second sample Vanya and Vova make the first and second hit simultaneously at time 1.\n\ndef",
        "answer": "def vanya_and_vova(n, x, y):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 1713,
        "prompt": "Complete the Python function given the prompt below:Petya and Vasya are playing a game. Petya's got n non-transparent glasses, standing in a row. The glasses' positions are indexed with integers from 1 to n from left to right. Note that the positions are indexed but the glasses are not.\nFirst Petya puts a marble under the glass in position s. Then he performs some (possibly zero) shuffling operations. One shuffling operation means moving the glass from the first position to position p_1, the glass from the second position to position p_2 and so on. That is, a glass goes from position i to position p_{i}. Consider all glasses are moving simultaneously during one shuffling operation. When the glasses are shuffled, the marble doesn't travel from one glass to another: it moves together with the glass it was initially been put in.\nAfter all shuffling operations Petya shows Vasya that the ball has moved to position t. Vasya's task is to say what minimum number of shuffling operations Petya has performed or determine that Petya has made a mistake and the marble could not have got from position s to position t.\n-----Input-----\nThe first line contains three integers: n, s, t (1 \u2264 n \u2264 10^5;\u00a01 \u2264 s, t \u2264 n) \u2014 the number of glasses, the ball's initial and final position. The second line contains n space-separated integers: p_1, p_2,..., p_{n} (1 \u2264 p_{i} \u2264 n) \u2014 the shuffling operation parameters. It is guaranteed that all p_{i}'s are distinct.\nNote that s can equal t.\n-----Output-----\nIf the marble can move from position s to position t, then print on a single line a non-negative integer \u2014 the minimum number of shuffling operations, needed to get the marble to position t. If it is impossible, print number -1.\n-----Examples-----\nInput\n4 2 1\n2 3 4 1\nOutput\n3\nInput\n4 3 3\n4 1 3 2\nOutput\n0\nInput\n4 3 4\n1 2 3 4\nOutput\n-1\nInput\n3 1 3\n2 1 3\nOutput\n-1\n\ndef",
        "answer": "def solution(n, s, t):\n    if s == t:\n        return 0\n    if s > t:\n        return -1\n    if s == 1:\n        return t - s\n    if s == n:\n        return t - s\n    if s == n - 1:\n        return t - s\n    if s == n - 2:\n        return t - s\n    if s == n - 3:\n        return t - s\n    if s == n - 4:\n        return t - s\n    if s == n - 5:\n        return t - s\n    if s == n - 6:\n        return t - s\n    if s == n - 7:\n        return t - s\n    if s == n - 8:\n        return t - s\n    if s == n - 9:\n        return t - s\n    if s == n - 10:\n        return t - s\n    if s == n - 11:\n        return t - s\n    if s == n - 12:\n        return t - s\n    if s == n - 13:\n        return t - s\n    if s == n - 14:\n        return t - s\n    if s == n - 15:\n        return t - s\n    if s == n - 16:\n        return t - s\n    if s == n - 17:\n        return t - s\n    if s == n - 18:\n        return t - s\n    if s == n - 19:\n        return t - s\n    if s == n - 20:\n        return t - s\n    if s == n - 21:\n        return t - s\n    if s == n - 22:\n        return t - s\n    if s == n - 23:\n        return t - s\n    if s == n - 24:\n        return t - s\n    if s == n - 25:\n        return t - s\n    if s == n - 26:\n        return t - s\n    if s == n - 27:\n        return t - s\n    if s == n - 28:\n        return t - s\n    if s == n - 29:\n        return t - s\n    if s == n - 30",
        "difficulty": "interview"
    },
    {
        "task_id": 1714,
        "prompt": "Complete the Python function given the prompt below:A permutation p is an ordered group of numbers p_1,   p_2,  ...,   p_{n}, consisting of n distinct positive integers, each is no more than n. We'll define number n as the length of permutation p_1,   p_2,  ...,   p_{n}.\nSimon has a positive integer n and a non-negative integer k, such that 2k \u2264 n. Help him find permutation a of length 2n, such that it meets this equation: $\\sum_{i = 1}^{n}|a_{2 i - 1} - a_{2i}|-|\\sum_{i = 1}^{n} a_{2 i - 1} - a_{2i}|= 2 k$.\n-----Input-----\nThe first line contains two integers n and k (1 \u2264 n \u2264 50000, 0 \u2264 2k \u2264 n).\n-----Output-----\nPrint 2n integers a_1, a_2,..., a_2n \u2014 the required permutation a. It is guaranteed that the solution exists. If there are multiple solutions, you can print any of them.\n-----Examples-----\nInput\n1 0\nOutput\n1 2\nInput\n2 1\nOutput\n3 2 1 4\nInput\n4 0\nOutput\n2 7 4 6 1 3 5 8\n-----Note-----\nRecord |x| represents the absolute value of number x. \nIn the first sample |1 - 2| - |1 - 2| = 0.\nIn the second sample |3 - 2| + |1 - 4| - |3 - 2 + 1 - 4| = 1 + 3 - 2 = 2.\nIn the third sample |2 - 7| + |4 - 6| + |1 - 3| + |5 - 8| - |2 - 7 + 4 - 6 + 1 - 3 + 5 - 8| = 12 - 12 = 0.\n\ndef",
        "answer": "def solution(n, k):\n    a = [i for i in range(1, n + 1)]\n    a.sort(reverse=True)\n    a = a[k:] + a[:k]\n    return a",
        "difficulty": "interview"
    },
    {
        "task_id": 1715,
        "prompt": "Complete the Python function given the prompt below:Along a road running in an east-west direction, there are A shrines and B temples.\nThe i-th shrine from the west is located at a distance of s_i meters from the west end of the road, and the i-th temple from the west is located at a distance of t_i meters from the west end of the road.\nAnswer the following Q queries:\n - Query i (1 \\leq i \\leq Q): If we start from a point at a distance of x_i meters from the west end of the road and freely travel along the road, what is the minimum distance that needs to be traveled in order to visit one shrine and one temple? (It is allowed to pass by more shrines and temples than required.)\n-----Constraints-----\n - 1 \\leq A, B \\leq 10^5\n - 1 \\leq Q \\leq 10^5\n - 1 \\leq s_1 < s_2 <... < s_A \\leq 10^{10}\n - 1 \\leq t_1 < t_2 <... < t_B \\leq 10^{10}\n - 1 \\leq x_i \\leq 10^{10}\n - s_1,..., s_A, t_1,..., t_B, x_1,..., x_Q are all different.\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nA B Q\ns_1\n:\ns_A\nt_1\n:\nt_B\nx_1\n:\nx_Q\n-----Output-----\nPrint Q lines. The i-th line should contain the answer to the i-th query.\n-----Sample Input-----\n2 3 4\n100\n600\n400\n900\n1000\n150\n2000\n899\n799\n-----Sample Output-----\n350\n1400\n301\n399\nThere are two shrines and three temples. The shrines are located at distances of 100, 600 meters from the west end of the road, and the temples are located at distances of 400, 900, 1000 meters from the west end of the road.\n - Query 1: If we start from a point at a distance of 150 meters from the west end of the road, the optimal move is first to walk 50 meters west to visit a shrine, then to walk 300 meters east to visit a temple.\n - Query 2: If we start from a point at a distance of 2000 meters from the west end of the road, the optimal move is first to walk 1000 meters west to visit a temple, then to walk 400 meters west to visit a shrine. We will pass by another temple on the way, but it is fine.\n - Query 3: If we start from a point at a distance of 899 meters from the west end of the road, the optimal move is first to walk 1 meter east to visit a temple, then to walk 300 meters west to visit a shrine.\n - Query 4: If we start from a point at a distance of 799 meters from the west end of the road, the optimal move is first to walk 199 meters west to visit a shrine, then to walk 200 meters west to visit a temple.\n\ndef",
        "answer": "def query(A, B, Q):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 1716,
        "prompt": "Complete the Python function given the prompt below:In Takahashi Kingdom, there is a east-west railroad and N cities along it, numbered 1, 2, 3,..., N from west to east.\nA company called AtCoder Express possesses M trains, and the train i runs from City L_i to City R_i (it is possible that L_i = R_i).\nTakahashi the king is interested in the following Q matters:\n - The number of the trains that runs strictly within the section from City p_i to City q_i, that is, the number of trains j such that p_i \\leq L_j and R_j \\leq q_i.\nAlthough he is genius, this is too much data to process by himself. Find the answer for each of these Q queries to help him.\n-----Constraints-----\n - N is an integer between 1 and 500 (inclusive).\n - M is an integer between 1 and 200 \\ 000 (inclusive).\n - Q is an integer between 1 and 100 \\ 000 (inclusive).\n - 1 \\leq L_i \\leq R_i \\leq N (1 \\leq i \\leq M)\n - 1 \\leq p_i \\leq q_i \\leq N (1 \\leq i \\leq Q)\n-----Input-----\nInput is given from Standard Input in the following format:\nN M Q\nL_1 R_1\nL_2 R_2\n:\nL_M R_M\np_1 q_1\np_2 q_2\n:\np_Q q_Q\n-----Output-----\nPrint Q lines. The i-th line should contain the number of the trains that runs strictly within the section from City p_i to City q_i.\n-----Sample Input-----\n2 3 1\n1 1\n1 2\n2 2\n1 2\n-----Sample Output-----\n3\nAs all the trains runs within the section from City 1 to City 2, the answer to the only query is 3.\n\ndef",
        "answer": "def main():\n    N, M, Q = map(int, input().split())\n    L = [int(input()) for _ in range(M)]\n    R = [int(input()) for _ in range(M)]\n    L.sort()\n    R.sort()\n    for _ in range(Q):\n        p, q = map(int, input().split())\n        print(bisect_left(L, p) - bisect_left(R, q))",
        "difficulty": "interview"
    },
    {
        "task_id": 1717,
        "prompt": "Complete the Python function given the prompt below:We have an integer N.\nPrint an integer x between N and 10^{13} (inclusive) such that, for every integer y between 2 and N (inclusive), the remainder when x is divided by y is 1.\nUnder the constraints of this problem, there is always at least one such integer x.\n-----Constraints-----\n - All values in input are integers.\n - 2 \\leq N \\leq 30\n-----Input-----\nInput is given from Standard Input in the following format:\nN\n-----Output-----\nPrint an integer x between N and 10^{13} (inclusive) such that, for every integer y between 2 and N (inclusive), the remainder when x is divided by y is 1.\nIf there are multiple such integers, any of them will be accepted.\n-----Sample Input-----\n3\n-----Sample Output-----\n7\nThe remainder when 7 is divided by 2 is 1, and the remainder when 7 is divided by 3 is 1, too.\n7 is an integer between 3 and 10^{13}, so this is a desirable output.\n\ndef",
        "answer": "def solution():\n    N = int(input())\n    for i in range(2, N+1):\n        if i % 2 == 1 and i % 3 == 1:\n            print(i)",
        "difficulty": "interview"
    },
    {
        "task_id": 1718,
        "prompt": "Complete the Python function given the prompt below:There is a sequence of length N: A_1, A_2,..., A_N. Initially, this sequence is a permutation of 1, 2,..., N.\nOn this sequence, Snuke can perform the following operation:\n - Choose K consecutive elements in the sequence. Then, replace the value of each chosen element with the minimum value among the chosen elements.\nSnuke would like to make all the elements in this sequence equal by repeating the operation above some number of times.\nFind the minimum number of operations required.\nIt can be proved that, Under the constraints of this problem, this objective is always achievable.\n-----Constraints-----\n - 2 \\leq K \\leq N \\leq 100000\n - A_1, A_2,..., A_N is a permutation of 1, 2,..., N.\n-----Input-----\nInput is given from Standard Input in the following format:\nN K\nA_1 A_2... A_N\n-----Output-----\nPrint the minimum number of operations required.\n-----Sample Input-----\n4 3\n2 3 1 4\n-----Sample Output-----\n2\nOne optimal strategy is as follows:\n - In the first operation, choose the first, second and third elements. The sequence A becomes 1, 1, 1, 4.\n - In the second operation, choose the second, third and fourth elements. The sequence A becomes 1, 1, 1, 1.\n\ndef",
        "answer": "def Snuke(N, K):\n    A = [1, 2, 3, 4]\n    for i in range(N - K):\n        A[i] = min(A[i], A[i + K])\n    return A",
        "difficulty": "interview"
    },
    {
        "task_id": 1719,
        "prompt": "Complete the Python function given the prompt below:You are given an integer N. Find the number of strings of length N that satisfy the following conditions, modulo 10^9+7:\n - The string does not contain characters other than A, C, G and T.\n - The string does not contain AGC as a substring.\n - The condition above cannot be violated by swapping two adjacent characters once.\n-----Notes-----\nA substring of a string T is a string obtained by removing zero or more characters from the beginning and the end of T.\nFor example, the substrings of ATCODER include TCO, AT, CODER, ATCODER and  (the empty string), but not AC.\n-----Constraints-----\n - 3 \\leq N \\leq 100\n-----Input-----\nInput is given from Standard Input in the following format:\nN\n-----Output-----\nPrint the number of strings of length N that satisfy the following conditions, modulo 10^9+7.\n-----Sample Input-----\n3\n-----Sample Output-----\n61\nThere are 4^3 = 64 strings of length 3 that do not contain characters other than A, C, G and T. Among them, only AGC, ACG and GAC violate the condition, so the answer is 64 - 3 = 61.\n\ndef",
        "answer": "def count_strings(n):\n    return (4**n - 1) % (10**9 + 7)",
        "difficulty": "interview"
    },
    {
        "task_id": 1720,
        "prompt": "Complete the Python function given the prompt below:Olya loves energy drinks. She loves them so much that her room is full of empty cans from energy drinks.\nFormally, her room can be represented as a field of n \u00d7 m cells, each cell of which is empty or littered with cans.\nOlya drank a lot of energy drink, so now she can run k meters per second. Each second she chooses one of the four directions (up, down, left or right) and runs from 1 to k meters in this direction. Of course, she can only run through empty cells.\nNow Olya needs to get from cell (x_1, y_1) to cell (x_2, y_2). How many seconds will it take her if she moves optimally?\nIt's guaranteed that cells (x_1, y_1) and (x_2, y_2) are empty. These cells can coincide.\n-----Input-----\nThe first line contains three integers n, m and k (1 \u2264 n, m, k \u2264 1000) \u2014 the sizes of the room and Olya's speed.\nThen n lines follow containing m characters each, the i-th of them contains on j-th position \"#\", if the cell (i, j) is littered with cans, and \".\" otherwise.\nThe last line contains four integers x_1, y_1, x_2, y_2 (1 \u2264 x_1, x_2 \u2264 n, 1 \u2264 y_1, y_2 \u2264 m) \u2014 the coordinates of the first and the last cells.\n-----Output-----\nPrint a single integer \u2014 the minimum time it will take Olya to get from (x_1, y_1) to (x_2, y_2).\nIf it's impossible to get from (x_1, y_1) to (x_2, y_2), print -1.\n-----Examples-----\nInput\n3 4 4\n....\n###.\n....\n1 1 3 1\nOutput\n3\nInput\n3 4 1\n....\n###.\n....\n1 1 3 1\nOutput\n8\nInput\n2 2 1\n.#\n#.\n1 1 2 2\nOutput\n-1\n-----Note-----\nIn the first sample Olya should run 3 meters to the right in the first second, 2 meters down in the second second and 3 meters to the left in the third second.\nIn second sample Olya should run to the right for 3 seconds, then down for 2 seconds and then to the left for 3 seconds.\nOlya does not recommend drinking energy drinks and generally believes that this is bad.\n\ndef",
        "answer": "def is_valid(x, y, n, m):\n    return 0 <= x < n and 0 <= y < m",
        "difficulty": "interview"
    },
    {
        "task_id": 1721,
        "prompt": "Complete the Python function given the prompt below:You are given a string $s$. You have to reverse it \u2014 that is, the first letter should become equal to the last letter before the reversal, the second letter should become equal to the second-to-last letter before the reversal \u2014 and so on. For example, if your goal is to reverse the string \"abddea\", you should get the string \"aeddba\". To accomplish your goal, you can swap the neighboring elements of the string. \nYour task is to calculate the minimum number of swaps you have to perform to reverse the given string.\n-----Input-----\nThe first line contains one integer $n$ ($2 \\le n \\le 200\\,000$) \u2014 the length of $s$.\nThe second line contains $s$ \u2014 a string consisting of $n$ lowercase Latin letters.\n-----Output-----\nPrint one integer \u2014 the minimum number of swaps of neighboring elements you have to perform to reverse the string.\n-----Examples-----\nInput\n5\naaaza\nOutput\n2\nInput\n6\ncbaabc\nOutput\n0\nInput\n9\nicpcsguru\nOutput\n30\n-----Note-----\nIn the first example, you have to swap the third and the fourth elements, so the string becomes \"aazaa\". Then you have to swap the second and the third elements, so the string becomes \"azaaa\". So, it is possible to reverse the string in two swaps.\nSince the string in the second example is a palindrome, you don't have to do anything to reverse it.\n\ndef",
        "answer": "def reverse_string(s):\n    # Write your code here\n    return s[::-1]",
        "difficulty": "interview"
    },
    {
        "task_id": 1722,
        "prompt": "Complete the Python function given the prompt below:There are $n$ students in the first grade of Nlogonia high school. The principal wishes to split the students into two classrooms (each student must be in exactly one of the classrooms). Two distinct students whose name starts with the same letter will be chatty if they are put in the same classroom (because they must have a lot in common). Let $x$ be the number of such pairs of students in a split. Pairs $(a, b)$ and $(b, a)$ are the same and counted only once.\nFor example, if there are $6$ students: \"olivia\", \"jacob\", \"tanya\", \"jack\", \"oliver\" and \"jessica\", then:  splitting into two classrooms (\"jack\", \"jacob\", \"jessica\", \"tanya\") and (\"olivia\", \"oliver\") will give $x=4$ ($3$ chatting pairs in the first classroom, $1$ chatting pair in the second classroom),  splitting into two classrooms (\"jack\", \"tanya\", \"olivia\") and (\"jessica\", \"oliver\", \"jacob\") will give $x=1$ ($0$ chatting pairs in the first classroom, $1$ chatting pair in the second classroom). \nYou are given the list of the $n$ names. What is the minimum $x$ we can obtain by splitting the students into classrooms?\nNote that it is valid to place all of the students in one of the classrooms, leaving the other one empty.\n-----Input-----\nThe first line contains a single integer $n$ ($1\\leq n \\leq 100$)\u00a0\u2014 the number of students.\nAfter this $n$ lines follow.\nThe $i$-th line contains the name of the $i$-th student.\nIt is guaranteed each name is a string of lowercase English letters of length at most $20$. Note that multiple students may share the same name.\n-----Output-----\nThe output must consist of a single integer $x$\u00a0\u2014 the minimum possible number of chatty pairs.\n-----Examples-----\nInput\n4\njorge\njose\noscar\njerry\nOutput\n1\nInput\n7\nkambei\ngorobei\nshichiroji\nkyuzo\nheihachi\nkatsushiro\nkikuchiyo\nOutput\n2\nInput\n5\nmike\nmike\nmike\nmike\nmike\nOutput\n4\n-----Note-----\nIn the first sample the minimum number of pairs is $1$. This can be achieved, for example, by putting everyone except jose in one classroom, and jose in the other, so jorge and jerry form the only chatty pair.\nIn the second sample the minimum number of pairs is $2$. This can be achieved, for example, by putting kambei, gorobei, shichiroji and kyuzo in one room and putting heihachi, katsushiro and kikuchiyo in the other room. In this case the two pairs are kambei and kyuzo, and katsushiro and kikuchiyo.\nIn the third sample the minimum number of pairs is $4$. This can be achieved by placing three of the students named mike in one classroom and the other two students in another classroom. Thus there will be three chatty pairs in one classroom and one chatty pair in the other classroom.\n\ndef",
        "answer": "def chatty_pairs(n):\n    return n * (n - 1) // 2",
        "difficulty": "interview"
    },
    {
        "task_id": 1723,
        "prompt": "Complete the Python function given the prompt below:Mahmoud was trying to solve the vertex cover problem on trees. The problem statement is:\nGiven an undirected tree consisting of n nodes, find the minimum number of vertices that cover all the edges. Formally, we need to find a set of vertices such that for each edge (u, v) that belongs to the tree, either u is in the set, or v is in the set, or both are in the set. Mahmoud has found the following algorithm:  Root the tree at node 1.  Count the number of nodes at an even depth. Let it be evenCnt.  Count the number of nodes at an odd depth. Let it be oddCnt.  The answer is the minimum between evenCnt and oddCnt. \nThe depth of a node in a tree is the number of edges in the shortest path between this node and the root. The depth of the root is 0.\nEhab told Mahmoud that this algorithm is wrong, but he didn't believe because he had tested his algorithm against many trees and it worked, so Ehab asked you to find 2 trees consisting of n nodes. The algorithm should find an incorrect answer for the first tree and a correct answer for the second one.\n-----Input-----\nThe only line contains an integer n (2 \u2264 n \u2264 10^5), the number of nodes in the desired trees.\n-----Output-----\nThe output should consist of 2 independent sections, each containing a tree. The algorithm should find an incorrect answer for the tree in the first section and a correct answer for the tree in the second. If a tree doesn't exist for some section, output \"-1\" (without quotes) for that section only.\nIf the answer for a section exists, it should contain n - 1 lines, each containing 2 space-separated integers u and v (1 \u2264 u, v \u2264 n), which means that there's an undirected edge between node u and node v. If the given graph isn't a tree or it doesn't follow the format, you'll receive wrong answer verdict.\nIf there are multiple answers, you can print any of them.\n-----Examples-----\nInput\n2\nOutput\n-1\n1 2\nInput\n8\nOutput\n1 2\n1 3\n2 4\n2 5\n3 6\n4 7\n4 8\n1 2\n1 3\n2 4\n2 5\n2 6\n3 7\n6 8\n-----Note-----\nIn the first sample, there is only 1 tree with 2 nodes (node 1 connected to node 2). The algorithm will produce a correct answer in it so we printed  - 1 in the first section, but notice that we printed this tree in the second section.\nIn the second sample:\nIn the first tree, the algorithm will find an answer with 4 nodes, while there exists an answer with 3 nodes like this: [Image] In the second tree, the algorithm will find an answer with 3 nodes which is correct: [Image]\n\ndef",
        "answer": "def find_vertex_cover(n):\n    # Complete this function\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 1724,
        "prompt": "Complete the Python function given the prompt below:Valera has array a, consisting of n integers a_0, a_1,..., a_{n} - 1, and function f(x), taking an integer from 0 to 2^{n} - 1 as its single argument. Value f(x) is calculated by formula $f(x) = \\sum_{i = 0}^{n - 1} a_{i} \\cdot b i t(i)$, where value bit(i) equals one if the binary representation of number x contains a 1 on the i-th position, and zero otherwise.\nFor example, if n = 4 and x = 11 (11 = 2^0 + 2^1 + 2^3), then f(x) = a_0 + a_1 + a_3.\nHelp Valera find the maximum of function f(x) among all x, for which an inequality holds: 0 \u2264 x \u2264 m.\n-----Input-----\nThe first line contains integer n (1 \u2264 n \u2264 10^5) \u2014 the number of array elements. The next line contains n space-separated integers a_0, a_1,..., a_{n} - 1 (0 \u2264 a_{i} \u2264 10^4) \u2014 elements of array a.\nThe third line contains a sequence of digits zero and one without spaces s_0s_1... s_{n} - 1 \u2014 the binary representation of number m. Number m equals $\\sum_{i = 0}^{n - 1} 2^{i} \\cdot s_{i}$.\n-----Output-----\nPrint a single integer \u2014 the maximum value of function f(x) for all $x \\in [ 0.. m ]$.\n-----Examples-----\nInput\n2\n3 8\n10\nOutput\n3\nInput\n5\n17 0 10 2 1\n11010\nOutput\n27\n-----Note-----\nIn the first test case m = 2^0 = 1, f(0) = 0, f(1) = a_0 = 3.\nIn the second sample m = 2^0 + 2^1 + 2^3 = 11, the maximum value of function equals f(5) = a_0 + a_2 = 17 + 10 = 27.\n\ndef",
        "answer": "def f(x):\n    return sum(a * (x & 1) for a in a)",
        "difficulty": "interview"
    },
    {
        "task_id": 1725,
        "prompt": "Complete the Python function given the prompt below:Little penguin Polo has an n \u00d7 m matrix, consisting of integers. Let's index the matrix rows from 1 to n from top to bottom and let's index the columns from 1 to m from left to right. Let's represent the matrix element on the intersection of row i and column j as a_{ij}.\nIn one move the penguin can add or subtract number d from some matrix element. Find the minimum number of moves needed to make all matrix elements equal. If the described plan is impossible to carry out, say so.\n-----Input-----\nThe first line contains three integers n, m and d (1 \u2264 n, m \u2264 100, 1 \u2264 d \u2264 10^4) \u2014 the matrix sizes and the d parameter. Next n lines contain the matrix: the j-th integer in the i-th row is the matrix element a_{ij} (1 \u2264 a_{ij} \u2264 10^4).\n-----Output-----\nIn a single line print a single integer \u2014 the minimum number of moves the penguin needs to make all matrix elements equal. If that is impossible, print \"-1\" (without the quotes).\n-----Examples-----\nInput\n2 2 2\n2 4\n6 8\nOutput\n4\nInput\n1 2 7\n6 7\nOutput\n-1\n\ndef",
        "answer": "def solution(n, m, d):\n    if n * m < d:\n        return -1\n    if n * m == d:\n        return 0\n    if n * m == d + 1:\n        return 1\n    if n * m == d - 1:\n        return 2\n    if n * m == d - 2:\n        return 3\n    if n * m == d - 3:\n        return 4\n    if n * m == d - 4:\n        return 5\n    if n * m == d - 5:\n        return 6\n    if n * m == d - 6:\n        return 7\n    if n * m == d - 7:\n        return 8\n    if n * m == d - 8:\n        return 9\n    if n * m == d - 9:\n        return 10\n    if n * m == d - 10:\n        return 11\n    if n * m == d - 11:\n        return 12\n    if n * m == d - 12:\n        return 13\n    if n * m == d - 13:\n        return 14\n    if n * m == d - 14:\n        return 15\n    if n * m == d - 15:\n        return 16\n    if n * m == d - 16:\n        return 17\n    if n * m == d - 17:\n        return 18\n    if n * m == d - 18:\n        return 19\n    if n * m == d - 19:\n        return 20\n    if n * m == d - 20:\n        return 21\n    if n * m == d - 21:\n        return 22\n    if n * m == d - 22:\n        return 23\n    if n * m == d - 23:\n        return 24\n    if n * m == d - 24:\n        return 25\n    if n * m == d - 25:\n        return 26\n    if n * m == d - 26:\n        return 27\n    if n * m == d - 27:\n        return 28\n    if n * m == d - 28:\n        return 29\n    if n * m == d - 29:\n        return 30\n    if n * m == d - 30:\n        return 31",
        "difficulty": "interview"
    },
    {
        "task_id": 1726,
        "prompt": "Complete the Python function given the prompt below:Recently Luba bought a very interesting book. She knows that it will take t seconds to read the book. Luba wants to finish reading as fast as she can.\nBut she has some work to do in each of n next days. The number of seconds that Luba has to spend working during i-th day is a_{i}. If some free time remains, she can spend it on reading.\nHelp Luba to determine the minimum number of day when she finishes reading.\nIt is guaranteed that the answer doesn't exceed n.\nRemember that there are 86400 seconds in a day.\n-----Input-----\nThe first line contains two integers n and t (1 \u2264 n \u2264 100, 1 \u2264 t \u2264 10^6) \u2014 the number of days and the time required to read the book.\nThe second line contains n integers a_{i} (0 \u2264 a_{i} \u2264 86400) \u2014 the time Luba has to spend on her work during i-th day.\n-----Output-----\nPrint the minimum day Luba can finish reading the book.\nIt is guaranteed that answer doesn't exceed n.\n-----Examples-----\nInput\n2 2\n86400 86398\nOutput\n2\nInput\n2 86400\n0 86400\nOutput\n1\n\ndef",
        "answer": "def solution(n, t, a):\n    days = [0] * n\n    for i in range(n):\n        days[i] = t - sum(a[:i])\n    return days.index(max(days)) + 1",
        "difficulty": "interview"
    },
    {
        "task_id": 1727,
        "prompt": "Complete the Python function given the prompt below:Little Susie listens to fairy tales before bed every day. Today's fairy tale was about wood cutters and the little girl immediately started imagining the choppers cutting wood. She imagined the situation that is described below.\nThere are n trees located along the road at points with coordinates x_1, x_2,..., x_{n}. Each tree has its height h_{i}. Woodcutters can cut down a tree and fell it to the left or to the right. After that it occupies one of the segments [x_{i} - h_{i}, x_{i}] or [x_{i};x_{i} + h_{i}]. The tree that is not cut down occupies a single point with coordinate x_{i}. Woodcutters can fell a tree if the segment to be occupied by the fallen tree doesn't contain any occupied point. The woodcutters want to process as many trees as possible, so Susie wonders, what is the maximum number of trees to fell. \n-----Input-----\nThe first line contains integer n (1 \u2264 n \u2264 10^5) \u2014 the number of trees.\nNext n lines contain pairs of integers x_{i}, h_{i} (1 \u2264 x_{i}, h_{i} \u2264 10^9) \u2014 the coordinate and the height of the \u0456-th tree.\nThe pairs are given in the order of ascending x_{i}. No two trees are located at the point with the same coordinate.\n-----Output-----\nPrint a single number \u2014 the maximum number of trees that you can cut down by the given rules.\n-----Examples-----\nInput\n5\n1 2\n2 1\n5 10\n10 9\n19 1\nOutput\n3\nInput\n5\n1 2\n2 1\n5 10\n10 9\n20 1\nOutput\n4\n-----Note-----\nIn the first sample you can fell the trees like that:   fell the 1-st tree to the left \u2014 now it occupies segment [ - 1;1]  fell the 2-nd tree to the right \u2014 now it occupies segment [2;3]  leave the 3-rd tree \u2014 it occupies point 5  leave the 4-th tree \u2014 it occupies point 10  fell the 5-th tree to the right \u2014 now it occupies segment [19;20] \nIn the second sample you can also fell 4-th tree to the right, after that it will occupy segment [10;19].\n\ndef",
        "answer": "def solution(n, trees):\n    trees.sort()\n    max_trees = 0\n    for i in range(n):\n        if trees[i][0] > trees[i-1][0]:\n            max_trees += 1\n    return max_trees",
        "difficulty": "interview"
    },
    {
        "task_id": 1728,
        "prompt": "Complete the Python function given the prompt below:You are given a rooted tree with n vertices. The vertices are numbered from 1 to n, the root is the vertex number 1.\nEach vertex has a color, let's denote the color of vertex v by c_{v}. Initially c_{v} = 0.\nYou have to color the tree into the given colors using the smallest possible number of steps. On each step you can choose a vertex v and a color x, and then color all vectices in the subtree of v (including v itself) in color x. In other words, for every vertex u, such that the path from root to u passes through v, set c_{u} = x.\nIt is guaranteed that you have to color each vertex in a color different from 0.\nYou can learn what a rooted tree is using the link: https://en.wikipedia.org/wiki/Tree_(graph_theory).\n-----Input-----\nThe first line contains a single integer n (2 \u2264 n \u2264 10^4)\u00a0\u2014 the number of vertices in the tree.\nThe second line contains n - 1 integers p_2, p_3,..., p_{n} (1 \u2264 p_{i} < i), where p_{i} means that there is an edge between vertices i and p_{i}.\nThe third line contains n integers c_1, c_2,..., c_{n} (1 \u2264 c_{i} \u2264 n), where c_{i} is the color you should color the i-th vertex into.\nIt is guaranteed that the given graph is a tree. \n-----Output-----\nPrint a single integer\u00a0\u2014 the minimum number of steps you have to perform to color the tree into given colors.\n-----Examples-----\nInput\n6\n1 2 2 1 5\n2 1 1 1 1 1\nOutput\n3\nInput\n7\n1 1 2 3 1 4\n3 3 1 1 1 2 3\nOutput\n5\n-----Note-----\nThe tree from the first sample is shown on the picture (numbers are vetices' indices):\n$A$\nOn first step we color all vertices in the subtree of vertex 1 into color 2 (numbers are colors):\n[Image]\nOn seond step we color all vertices in the subtree of vertex 5 into color 1:\n[Image]\nOn third step we color all vertices in the subtree of vertex 2 into color 1:\n[Image]\nThe tree from the second sample is shown on the picture (numbers are vetices' indices):\n[Image]\nOn first step we color all vertices in the subtree of vertex 1 into color 3 (numbers are colors):\n[Image]\nOn second step we color all vertices in the subtree of vertex 3 into color 1:\n$8$\nOn third step we color all vertices in the subtree of vertex 6 into color 2:\n[Image]\nOn fourth step we color all vertices in the subtree of vertex 4 into color 1:\n[Image]\nOn fith step we color all vertices in the subtree of vertex 7 into color 3:\n[Image]\n\ndef",
        "answer": "def color_tree(n, edges, colors):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 1729,
        "prompt": "Complete the Python function given the prompt below:There is a programming language in which every program is a non-empty sequence of \"<\" and \">\" signs and digits. Let's explain how the interpreter of this programming language works. A program is interpreted using movement of instruction pointer (IP) which consists of two parts.  Current character pointer (CP);  Direction pointer (DP) which can point left or right; \nInitially CP points to the leftmost character of the sequence and DP points to the right.\nWe repeat the following steps until the first moment that CP points to somewhere outside the sequence.  If CP is pointing to a digit the interpreter prints that digit then CP moves one step according to the direction of DP. After that the value of the printed digit in the sequence decreases by one. If the printed digit was 0 then it cannot be decreased therefore it's erased from the sequence and the length of the sequence decreases by one.  If CP is pointing to \"<\" or \">\" then the direction of DP changes to \"left\" or \"right\" correspondingly. Then CP moves one step according to DP. If the new character that CP is pointing to is \"<\" or \">\" then the previous character will be erased from the sequence. \nIf at any moment the CP goes outside of the sequence the execution is terminated.\nIt's obvious the every program in this language terminates after some steps.\nWe have a sequence s_1, s_2,..., s_{n} of \"<\", \">\" and digits. You should answer q queries. Each query gives you l and r and asks how many of each digit will be printed if we run the sequence s_{l}, s_{l} + 1,..., s_{r} as an independent program in this language.\n-----Input-----\nThe first line of input contains two integers n and q (1 \u2264 n, q \u2264 100) \u2014 represents the length of the sequence s and the number of queries. \nThe second line contains s, a sequence of \"<\", \">\" and digits (0..9) written from left to right. Note, that the characters of s are not separated with spaces. \nThe next q lines each contains two integers l_{i} and r_{i} (1 \u2264 l_{i} \u2264 r_{i} \u2264 n) \u2014 the i-th query.\n-----Output-----\nFor each query print 10 space separated integers: x_0, x_1,..., x_9 where x_{i} equals the number of times the interpreter prints i while running the corresponding program. Print answers to the queries in the order they are given in input.\n-----Examples-----\nInput\n7 4\n1>3>22<\n1 3\n4 7\n7 7\n1 7\nOutput\n0 1 0 1 0 0 0 0 0 0 \n2 2 2 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n2 3 2 1 0 0 0 0 0 0\n\ndef",
        "answer": "def solution(s):\n    n = len(s)\n    dp = [0] * n\n    dp[0] = 1\n    for i in range(1, n):\n        if s[i] == '>':\n            dp[i] = dp[i - 1]\n        elif s[i] == '<':\n            dp[i] = dp[i - 1] - 1\n        else:\n            dp[i] = dp[i - 1] + 1\n    return dp",
        "difficulty": "interview"
    },
    {
        "task_id": 1730,
        "prompt": "Complete the Python function given the prompt below:You've got a undirected graph G, consisting of n nodes. We will consider the nodes of the graph indexed by integers from 1 to n. We know that each node of graph G is connected by edges with at least k other nodes of this graph. Your task is to find in the given graph a simple cycle of length of at least k + 1.\nA simple cycle of length d (d > 1) in graph G is a sequence of distinct graph nodes v_1, v_2,..., v_{d} such, that nodes v_1 and v_{d} are connected by an edge of the graph, also for any integer i (1 \u2264 i < d) nodes v_{i} and v_{i} + 1 are connected by an edge of the graph.\n-----Input-----\nThe first line contains three integers n, m, k (3 \u2264 n, m \u2264 10^5;\u00a02 \u2264 k \u2264 n - 1) \u2014 the number of the nodes of the graph, the number of the graph's edges and the lower limit on the degree of the graph node. Next m lines contain pairs of integers. The i-th line contains integers a_{i}, b_{i} (1 \u2264 a_{i}, b_{i} \u2264 n;\u00a0a_{i} \u2260 b_{i}) \u2014 the indexes of the graph nodes that are connected by the i-th edge. \nIt is guaranteed that the given graph doesn't contain any multiple edges or self-loops. It is guaranteed that each node of the graph is connected by the edges with at least k other nodes of the graph.\n-----Output-----\nIn the first line print integer r (r \u2265 k + 1) \u2014 the length of the found cycle. In the next line print r distinct integers v_1, v_2,..., v_{r} (1 \u2264 v_{i} \u2264 n) \u2014 the found simple cycle.\nIt is guaranteed that the answer exists. If there are multiple correct answers, you are allowed to print any of them.\n-----Examples-----\nInput\n3 3 2\n1 2\n2 3\n3 1\nOutput\n3\n1 2 3 \nInput\n4 6 3\n4 3\n1 2\n1 3\n1 4\n2 3\n2 4\nOutput\n4\n3 4 1 2\n\ndef",
        "answer": "def find_cycle(graph, k):\n    n = len(graph)\n    visited = [False] * n\n    for i in range(n):\n        if not visited[i]:\n            if dfs(graph, visited, i, k):\n                return True\n    return False",
        "difficulty": "interview"
    },
    {
        "task_id": 1731,
        "prompt": "Complete the Python function given the prompt below:You are given two integers $n$ and $m$. Calculate the number of pairs of arrays $(a, b)$ such that:\n  the length of both arrays is equal to $m$;  each element of each array is an integer between $1$ and $n$ (inclusive);  $a_i \\le b_i$ for any index $i$ from $1$ to $m$;  array $a$ is sorted in non-descending order;  array $b$ is sorted in non-ascending order. \nAs the result can be very large, you should print it modulo $10^9+7$.\n-----Input-----\nThe only line contains two integers $n$ and $m$ ($1 \\le n \\le 1000$, $1 \\le m \\le 10$).\n-----Output-----\nPrint one integer \u2013 the number of arrays $a$ and $b$ satisfying the conditions described above modulo $10^9+7$.\n-----Examples-----\nInput\n2 2\nOutput\n5\nInput\n10 1\nOutput\n55\nInput\n723 9\nOutput\n157557417\n-----Note-----\nIn the first test there are $5$ suitable arrays:   $a = [1, 1], b = [2, 2]$;  $a = [1, 2], b = [2, 2]$;  $a = [2, 2], b = [2, 2]$;  $a = [1, 1], b = [2, 1]$;  $a = [1, 1], b = [1, 1]$.\n\ndef",
        "answer": "def solve(n, m):\n    # Complete this function\n    return 0",
        "difficulty": "interview"
    },
    {
        "task_id": 1732,
        "prompt": "Complete the Python function given the prompt below:Fox Ciel is playing a game. In this game there is an infinite long tape with cells indexed by integers (positive, negative and zero). At the beginning she is standing at the cell 0.\nThere are also n cards, each card has 2 attributes: length l_{i} and cost c_{i}. If she pays c_{i} dollars then she can apply i-th card. After applying i-th card she becomes able to make jumps of length l_{i}, i. e. from cell x to cell (x - l_{i}) or cell (x + l_{i}).\nShe wants to be able to jump to any cell on the tape (possibly, visiting some intermediate cells). For achieving this goal, she wants to buy some cards, paying as little money as possible. \nIf this is possible, calculate the minimal cost.\n-----Input-----\nThe first line contains an integer n (1 \u2264 n \u2264 300), number of cards.\nThe second line contains n numbers l_{i} (1 \u2264 l_{i} \u2264 10^9), the jump lengths of cards.\nThe third line contains n numbers c_{i} (1 \u2264 c_{i} \u2264 10^5), the costs of cards.\n-----Output-----\nIf it is impossible to buy some cards and become able to jump to any cell, output -1. Otherwise output the minimal cost of buying such set of cards.\n-----Examples-----\nInput\n3\n100 99 9900\n1 1 1\nOutput\n2\nInput\n5\n10 20 30 40 50\n1 1 1 1 1\nOutput\n-1\nInput\n7\n15015 10010 6006 4290 2730 2310 1\n1 1 1 1 1 1 10\nOutput\n6\nInput\n8\n4264 4921 6321 6984 2316 8432 6120 1026\n4264 4921 6321 6984 2316 8432 6120 1026\nOutput\n7237\n-----Note-----\nIn first sample test, buying one card is not enough: for example, if you buy a card with length 100, you can't jump to any cell whose index is not a multiple of 100. The best way is to buy first and second card, that will make you be able to jump to any cell.\nIn the second sample test, even if you buy all cards, you can't jump to any cell whose index is not a multiple of 10, so you should output -1.\n\ndef",
        "answer": "def solution(n, l, c):\n    # write your code in Python 2.7\n    if n == 1:\n        return c[0]\n    if n == 2:\n        return min(c[0], c[1])\n    if n == 3:\n        return min(c[0], c[1], c[2])\n    if n == 4:\n        return min(c[0], c[1], c[2], c[3])\n    if n == 5:\n        return min(c[0], c[1], c[2], c[3], c[4])\n    if n == 6:\n        return min(c[0], c[1], c[2], c[3], c[4], c[5])\n    if n == 7:\n        return min(c[0], c[1], c[2], c[3], c[4], c[5], c[6])\n    if n == 8:\n        return min(c[0], c[1], c[2], c[3], c[4], c[5], c[6], c[7])\n    if n == 9:\n        return min(c[0], c[1], c[2], c[3], c[4], c[5], c[6], c[7], c[8])\n    if n == 10:\n        return min(c[0], c[1], c[2], c[3], c[4], c[5], c[6], c[7], c[8], c[9])\n    if n == 11:\n        return min(c[0], c[1], c[2], c[3], c[4], c[5], c[6], c[7], c[8], c[9], c[10])\n    if n == 12:\n        return min(c[0], c[1], c[2], c[3], c[4], c[5], c[6], c[7], c[8], c[9], c[10], c[11])\n    if n == 13:\n        return min(c[0], c[1], c[2], c[3",
        "difficulty": "interview"
    },
    {
        "task_id": 1733,
        "prompt": "Complete the Python function given the prompt below:Kuro is living in a country called Uberland, consisting of $n$ towns, numbered from $1$ to $n$, and $n - 1$ bidirectional roads connecting these towns. It is possible to reach each town from any other. Each road connects two towns $a$ and $b$. Kuro loves walking and he is planning to take a walking marathon, in which he will choose a pair of towns $(u, v)$ ($u \\neq v$) and walk from $u$ using the shortest path to $v$ (note that $(u, v)$ is considered to be different from $(v, u)$).\nOddly, there are 2 special towns in Uberland named Flowrisa (denoted with the index $x$) and Beetopia (denoted with the index $y$). Flowrisa is a town where there are many strong-scent flowers, and Beetopia is another town where many bees live. In particular, Kuro will avoid any pair of towns $(u, v)$ if on the path from $u$ to $v$, he reaches Beetopia after he reached Flowrisa, since the bees will be attracted with the flower smell on Kuro\u2019s body and sting him.\nKuro wants to know how many pair of city $(u, v)$ he can take as his route. Since he\u2019s not really bright, he asked you to help him with this problem.\n-----Input-----\nThe first line contains three integers $n$, $x$ and $y$ ($1 \\leq n \\leq 3 \\cdot 10^5$, $1 \\leq x, y \\leq n$, $x \\ne y$) - the number of towns, index of the town Flowrisa and index of the town Beetopia, respectively.\n$n - 1$ lines follow, each line contains two integers $a$ and $b$ ($1 \\leq a, b \\leq n$, $a \\ne b$), describes a road connecting two towns $a$ and $b$.\nIt is guaranteed that from each town, we can reach every other town in the city using the given roads. That is, the given map of towns and roads is a tree.\n-----Output-----\nA single integer resembles the number of pair of towns $(u, v)$ that Kuro can use as his walking route.\n-----Examples-----\nInput\n3 1 3\n1 2\n2 3\nOutput\n5\nInput\n3 1 3\n1 2\n1 3\nOutput\n4\n-----Note-----\nOn the first example, Kuro can choose these pairs:   $(1, 2)$: his route would be $1 \\rightarrow 2$,  $(2, 3)$: his route would be $2 \\rightarrow 3$,  $(3, 2)$: his route would be $3 \\rightarrow 2$,  $(2, 1)$: his route would be $2 \\rightarrow 1$,  $(3, 1)$: his route would be $3 \\rightarrow 2 \\rightarrow 1$. \nKuro can't choose pair $(1, 3)$ since his walking route would be $1 \\rightarrow 2 \\rightarrow 3$, in which Kuro visits town $1$ (Flowrisa) and then visits town $3$ (Beetopia), which is not allowed (note that pair $(3, 1)$ is still allowed because although Kuro visited Flowrisa and Beetopia, he did not visit them in that order).\nOn the second example, Kuro can choose the following pairs:   $(1, 2)$: his route would be $1 \\rightarrow 2$,  $(2, 1)$: his route would be $2 \\rightarrow 1$,  $(3, 2)$: his route would be $3 \\rightarrow 1 \\rightarrow 2$,  $(3, 1)$: his route would be $3 \\rightarrow 1$.\n\ndef",
        "answer": "def count_pairs(n, x, y):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 1734,
        "prompt": "Complete the Python function given the prompt below:There are n phone numbers in Polycarp's contacts on his phone. Each number is a 9-digit integer, starting with a digit different from 0. All the numbers are distinct.\nThere is the latest version of Berdroid OS installed on Polycarp's phone. If some number is entered, is shows up all the numbers in the contacts for which there is a substring equal to the entered sequence of digits. For example, is there are three phone numbers in Polycarp's contacts: 123456789, 100000000 and 100123456, then:\n  if he enters 00 two numbers will show up: 100000000 and 100123456,  if he enters 123 two numbers will show up 123456789 and 100123456,  if he enters 01 there will be only one number 100123456. \nFor each of the phone numbers in Polycarp's contacts, find the minimum in length sequence of digits such that if Polycarp enters this sequence, Berdroid shows this only phone number.\n-----Input-----\nThe first line contains single integer n (1 \u2264 n \u2264 70000) \u2014 the total number of phone contacts in Polycarp's contacts.\nThe phone numbers follow, one in each line. Each number is a positive 9-digit integer starting with a digit from 1 to 9. All the numbers are distinct.\n-----Output-----\nPrint exactly n lines: the i-th of them should contain the shortest non-empty sequence of digits, such that if Polycarp enters it, the Berdroid OS shows up only the i-th number from the contacts. If there are several such sequences, print any of them.\n-----Examples-----\nInput\n3\n123456789\n100000000\n100123456\nOutput\n9\n000\n01\nInput\n4\n123456789\n193456789\n134567819\n934567891\nOutput\n2\n193\n81\n91\n\ndef",
        "answer": "def solution(n):\n    # write your code in Python 2.7\n    pass\n",
        "difficulty": "interview"
    },
    {
        "task_id": 1735,
        "prompt": "Complete the Python function given the prompt below:Two people are playing a game with a string $s$, consisting of lowercase latin letters. \nOn a player's turn, he should choose two consecutive equal letters in the string and delete them. \nFor example, if the string is equal to \"xaax\" than there is only one possible turn: delete \"aa\", so the string will become \"xx\". A player not able to make a turn loses.\nYour task is to determine which player will win if both play optimally.\n-----Input-----\nThe only line contains the string $s$, consisting of lowercase latin letters ($1 \\leq |s| \\leq 100\\,000$), where $|s|$ means the length of a string $s$.\n-----Output-----\nIf the first player wins, print \"Yes\". If the second player wins, print \"No\".\n-----Examples-----\nInput\nabacaba\nOutput\nNo\nInput\niiq\nOutput\nYes\nInput\nabba\nOutput\nNo\n-----Note-----\nIn the first example the first player is unable to make a turn, so he loses.\nIn the second example first player turns the string into \"q\", then second player is unable to move, so he loses.\n\ndef",
        "answer": "def win(s):\n    for i in range(len(s) - 1):\n        if s[i] == s[i + 1]:\n            return True\n    return False",
        "difficulty": "interview"
    },
    {
        "task_id": 1736,
        "prompt": "Complete the Python function given the prompt below:When Valera has got some free time, he goes to the library to read some books. Today he's got t free minutes to read. That's why Valera took n books in the library and for each book he estimated the time he is going to need to read it. Let's number the books by integers from 1 to n. Valera needs a_{i} minutes to read the i-th book.\nValera decided to choose an arbitrary book with number i and read the books one by one, starting from this book. In other words, he will first read book number i, then book number i + 1, then book number i + 2 and so on. He continues the process until he either runs out of the free time or finishes reading the n-th book. Valera reads each book up to the end, that is, he doesn't start reading the book if he doesn't have enough free time to finish reading it. \nPrint the maximum number of books Valera can read.\n-----Input-----\nThe first line contains two integers n and t (1 \u2264 n \u2264 10^5;\u00a01 \u2264 t \u2264 10^9) \u2014 the number of books and the number of free minutes Valera's got. The second line contains a sequence of n integers a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 10^4), where number a_{i} shows the number of minutes that the boy needs to read the i-th book.\n-----Output-----\nPrint a single integer \u2014 the maximum number of books Valera can read.\n-----Examples-----\nInput\n4 5\n3 1 2 1\nOutput\n3\nInput\n3 3\n2 2 3\nOutput\n1\n\ndef",
        "answer": "def books(n, t):\n    a = [int(i) for i in input().split()]\n    a.sort()\n    i = 0\n    while t > 0:\n        t -= a[i]\n        i += 1\n    return i",
        "difficulty": "interview"
    },
    {
        "task_id": 1737,
        "prompt": "Complete the Python function given the prompt below:Polycarp is currently developing a project in Vaja language and using a popular dependency management system called Vamen. From Vamen's point of view both Vaja project and libraries are treated projects for simplicity.\nA project in Vaja has its own uniqie non-empty name consisting of lowercase latin letters with length not exceeding 10 and version \u2014 positive integer from 1 to 10^6. Each project (keep in mind that it is determined by both its name and version) might depend on other projects. For sure, there are no cyclic dependencies.\nYou're given a list of project descriptions. The first of the given projects is the one being developed by Polycarp at this moment. Help Polycarp determine all projects that his project depends on (directly or via a certain chain). \nIt's possible that Polycarp's project depends on two different versions of some project. In this case collision resolving is applied, i.e. for each such project the system chooses the version that minimizes the distance from it to Polycarp's project. If there are several options, the newer (with the maximum version) is preferred. This version is considered actual; other versions and their dependencies are ignored.\nMore formal, choose such a set of projects of minimum possible size that the following conditions hold:   Polycarp's project is chosen;  Polycarp's project depends (directly or indirectly) on all other projects in the set;  no two projects share the name;  for each project x that some other project in the set depends on we have either x or some y with other version and shorter chain to Polycarp's project chosen. In case of ties the newer one is chosen. \nOutput all Polycarp's project's dependencies (Polycarp's project itself should't be printed) in lexicographical order.\n-----Input-----\nThe first line contains an only integer n (1 \u2264 n \u2264 1 000) \u2014 the number of projects in Vaja.\nThe following lines contain the project descriptions. Each project is described by a line consisting of its name and version separated by space. The next line gives the number of direct dependencies (from 0 to n - 1) and the dependencies themselves (one in a line) in arbitrary order. Each dependency is specified by its name and version. The projects are also given in arbitrary order, but the first of them is always Polycarp's. Project descriptions are separated by one empty line. Refer to samples for better understanding.\nIt's guaranteed that there are no cyclic dependencies. \n-----Output-----\nOutput all Polycarp's project's dependencies in lexicographical order.\n-----Examples-----\nInput\n4\na 3\n2\nb 1\nc 1\n\u00a0\nb 2\n0\n\u00a0\nb 1\n1\nb 2\n\u00a0\nc 1\n1\nb 2\nOutput\n2\nb 1\nc 1\nInput\n9\ncodehorses 5\n3\nwebfrmk 6\nmashadb 1\nmashadb 2\n\u00a0\ncommons 2\n0\n\u00a0\nmashadb 3\n0\n\u00a0\nwebfrmk 6\n2\nmashadb 3\ncommons 2\n\u00a0\nextra 4\n1\nextra 3\n\u00a0\nextra 3\n0\n\u00a0\nextra 1\n0\n\u00a0\nmashadb 1\n1\nextra 3\n\u00a0\nmashadb 2\n1\nextra 1\nOutput\n4\ncommons 2\nextra 1\nmashadb 2\nwebfrmk 6\nInput\n3\nabc 1\n2\nabc 3\ncba 2\nabc 3\n0\ncba 2\n0\nOutput\n1\ncba 2\n-----Note-----\nThe first sample is given in the pic below. Arrow from A to B means that B directly depends on A. Projects that Polycarp's project \u00aba\u00bb (version 3) depends on are painted black. [Image] \nThe second sample is again given in the pic below. Arrow from A to B means that B directly depends on A. Projects that Polycarp's project \u00abcodehorses\u00bb (version 5) depends on are paint it black. Note that \u00abextra 1\u00bb is chosen instead of \u00abextra 3\u00bb since \u00abmashadb 1\u00bb and all of its dependencies are ignored due to \u00abmashadb 2\u00bb. [Image]\n\ndef",
        "answer": "def find_dependencies(projects):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 1738,
        "prompt": "Complete the Python function given the prompt below:Ivan wants to write a letter to his friend. The letter is a string s consisting of lowercase Latin letters.\nUnfortunately, when Ivan started writing the letter, he realised that it is very long and writing the whole letter may take extremely long time. So he wants to write the compressed version of string s instead of the string itself.\nThe compressed version of string s is a sequence of strings c_1, s_1, c_2, s_2,..., c_{k}, s_{k}, where c_{i} is the decimal representation of number a_{i} (without any leading zeroes) and s_{i} is some string consisting of lowercase Latin letters. If Ivan writes string s_1 exactly a_1 times, then string s_2 exactly a_2 times, and so on, the result will be string s.\nThe length of a compressed version is |c_1| + |s_1| + |c_2| + |s_2|... |c_{k}| + |s_{k}|. Among all compressed versions Ivan wants to choose a version such that its length is minimum possible. Help Ivan to determine minimum possible length.\n-----Input-----\nThe only line of input contains one string s consisting of lowercase Latin letters (1 \u2264 |s| \u2264 8000).\n-----Output-----\nOutput one integer number \u2014 the minimum possible length of a compressed version of s.\n-----Examples-----\nInput\naaaaaaaaaa\nOutput\n3\nInput\nabcab\nOutput\n6\nInput\ncczabababab\nOutput\n7\n-----Note-----\nIn the first example Ivan will choose this compressed version: c_1 is 10, s_1 is a.\nIn the second example Ivan will choose this compressed version: c_1 is 1, s_1 is abcab.\nIn the third example Ivan will choose this compressed version: c_1 is 2, s_1 is c, c_2 is 1, s_2 is z, c_3 is 4, s_3 is ab.\n\ndef",
        "answer": "def solution(s):\n    # write your code in Python 2.7\n    return len(s)\n",
        "difficulty": "interview"
    },
    {
        "task_id": 1739,
        "prompt": "Complete the Python function given the prompt below:Simon has a prime number x and an array of non-negative integers a_1, a_2,..., a_{n}.\nSimon loves fractions very much. Today he wrote out number $\\frac{1}{x^{a} 1} + \\frac{1}{x^{a_{2}}} + \\ldots + \\frac{1}{x^{a_{n}}}$ on a piece of paper. After Simon led all fractions to a common denominator and summed them up, he got a fraction: $\\frac{s}{t}$, where number t equals x^{a}_1 + a_2 +... + a_{n}. Now Simon wants to reduce the resulting fraction. \nHelp him, find the greatest common divisor of numbers s and t. As GCD can be rather large, print it as a remainder after dividing it by number 1000000007 (10^9 + 7).\n-----Input-----\nThe first line contains two positive integers n and x (1 \u2264 n \u2264 10^5, 2 \u2264 x \u2264 10^9) \u2014 the size of the array and the prime number.\nThe second line contains n space-separated integers a_1, a_2,..., a_{n} (0 \u2264 a_1 \u2264 a_2 \u2264... \u2264 a_{n} \u2264 10^9). \n-----Output-----\nPrint a single number \u2014 the answer to the problem modulo 1000000007 (10^9 + 7).\n-----Examples-----\nInput\n2 2\n2 2\nOutput\n8\nInput\n3 3\n1 2 3\nOutput\n27\nInput\n2 2\n29 29\nOutput\n73741817\nInput\n4 5\n0 0 0 0\nOutput\n1\n-----Note-----\nIn the first sample $\\frac{1}{4} + \\frac{1}{4} = \\frac{4 + 4}{16} = \\frac{8}{16}$. Thus, the answer to the problem is 8.\nIn the second sample, $\\frac{1}{3} + \\frac{1}{9} + \\frac{1}{27} = \\frac{243 + 81 + 27}{729} = \\frac{351}{729}$. The answer to the problem is 27, as 351 = 13\u00b727, 729 = 27\u00b727.\nIn the third sample the answer to the problem is 1073741824\u00a0mod\u00a01000000007 = 73741817.\nIn the fourth sample $\\frac{1}{1} + \\frac{1}{1} + \\frac{1}{1} + \\frac{1}{1} = \\frac{4}{1}$. Thus, the answer to the problem is 1.\n\ndef",
        "answer": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a",
        "difficulty": "interview"
    },
    {
        "task_id": 1740,
        "prompt": "Complete the Python function given the prompt below:Asya loves animals very much. Recently, she purchased $n$ kittens, enumerated them from $1$ and $n$ and then put them into the cage. The cage consists of one row of $n$ cells, enumerated with integers from $1$ to $n$ from left to right. Adjacent cells had a partially transparent partition wall between them, hence there were $n - 1$ partitions originally. Initially, each cell contained exactly one kitten with some number.\nObserving the kittens, Asya noticed, that they are very friendly and often a pair of kittens in neighboring cells wants to play together. So Asya started to remove partitions between neighboring cells. In particular, on the day $i$, Asya:  Noticed, that the kittens $x_i$ and $y_i$, located in neighboring cells want to play together.  Removed the partition between these two cells, efficiently creating a single cell, having all kittens from two original cells. \nSince Asya has never putted partitions back, after $n - 1$ days the cage contained a single cell, having all kittens.\nFor every day, Asya remembers numbers of kittens $x_i$ and $y_i$, who wanted to play together, however she doesn't remember how she placed kittens in the cage in the beginning. Please help her and find any possible initial arrangement of the kittens into $n$ cells.\n-----Input-----\nThe first line contains a single integer $n$ ($2 \\le n \\le 150\\,000$)\u00a0\u2014 the number of kittens.\nEach of the following $n - 1$ lines contains integers $x_i$ and $y_i$ ($1 \\le x_i, y_i \\le n$, $x_i \\ne y_i$)\u00a0\u2014 indices of kittens, which got together due to the border removal on the corresponding day.\nIt's guaranteed, that the kittens $x_i$ and $y_i$ were in the different cells before this day.\n-----Output-----\nFor every cell from $1$ to $n$ print a single integer\u00a0\u2014 the index of the kitten from $1$ to $n$, who was originally in it.\nAll printed integers must be distinct.\nIt's guaranteed, that there is at least one answer possible. In case there are multiple possible answers, print any of them.\n-----Example-----\nInput\n5\n1 4\n2 5\n3 1\n4 5\nOutput\n3 1 4 2 5\n-----Note-----\nThe answer for the example contains one of several possible initial arrangements of the kittens.\nThe picture below shows how the cells were united for this initial arrangement. Note, that the kittens who wanted to play together on each day were indeed in adjacent cells. [Image]\n\ndef",
        "answer": "def solution(n):\n    # your code here\n    return",
        "difficulty": "interview"
    },
    {
        "task_id": 1741,
        "prompt": "Complete the Python function given the prompt below:There is a forest that we model as a plane and live $n$ rare animals. Animal number $i$ has its lair in the point $(x_{i}, y_{i})$. In order to protect them, a decision to build a nature reserve has been made.\nThe reserve must have a form of a circle containing all lairs. There is also a straight river flowing through the forest. All animals drink from this river, therefore it must have at least one common point with the reserve. On the other hand, ships constantly sail along the river, so the reserve must not have more than one common point with the river.\nFor convenience, scientists have made a transformation of coordinates so that the river is defined by $y = 0$. Check whether it is possible to build a reserve, and if possible, find the minimum possible radius of such a reserve.\n-----Input-----\nThe first line contains one integer $n$ ($1 \\le n \\le 10^5$) \u2014 the number of animals. \nEach of the next $n$ lines contains two integers $x_{i}$, $y_{i}$ ($-10^7 \\le x_{i}, y_{i} \\le 10^7$) \u2014 the coordinates of the $i$-th animal's lair. It is guaranteed that $y_{i} \\neq 0$. No two lairs coincide.\n-----Output-----\nIf the reserve cannot be built, print $-1$. Otherwise print the minimum radius. Your answer will be accepted if absolute or relative error does not exceed $10^{-6}$.\nFormally, let your answer be $a$, and the jury's answer be $b$. Your answer is considered correct if $\\frac{|a - b|}{\\max{(1, |b|)}} \\le 10^{-6}$.\n-----Examples-----\nInput\n1\n0 1\nOutput\n0.5\nInput\n3\n0 1\n0 2\n0 -3\nOutput\n-1\nInput\n2\n0 1\n1 1\nOutput\n0.625\n-----Note-----\nIn the first sample it is optimal to build the reserve with the radius equal to $0.5$ and the center in $(0,\\ 0.5)$.\nIn the second sample it is impossible to build a reserve.\nIn the third sample it is optimal to build the reserve with the radius equal to $\\frac{5}{8}$ and the center in $(\\frac{1}{2},\\ \\frac{5}{8})$.\n\ndef",
        "answer": "def solution(n):\n    # your code here\n    return -1",
        "difficulty": "interview"
    },
    {
        "task_id": 1742,
        "prompt": "Complete the Python function given the prompt below:At the big break Nastya came to the school dining room. There are $n$ pupils in the school, numbered from $1$ to $n$. Unfortunately, Nastya came pretty late, so that all pupils had already stood in the queue, i.e. Nastya took the last place in the queue. Of course, it's a little bit sad for Nastya, but she is not going to despond because some pupils in the queue can agree to change places with some other pupils.\nFormally, there are some pairs $u$, $v$ such that if the pupil with number $u$ stands directly in front of the pupil with number $v$, Nastya can ask them and they will change places. \nNastya asks you to find the maximal number of places in queue she can move forward. \n-----Input-----\nThe first line contains two integers $n$ and $m$ ($1 \\leq n \\leq 3 \\cdot 10^{5}$, $0 \\leq m \\leq 5 \\cdot 10^{5}$)\u00a0\u2014 the number of pupils in the queue and number of pairs of pupils such that the first one agrees to change places with the second one if the first is directly in front of the second.\nThe second line contains $n$ integers $p_1$, $p_2$,..., $p_n$\u00a0\u2014 the initial arrangement of pupils in the queue, from the queue start to its end ($1 \\leq p_i \\leq n$, $p$ is a permutation of integers from $1$ to $n$). In other words, $p_i$ is the number of the pupil who stands on the $i$-th position in the queue.\nThe $i$-th of the following $m$ lines contains two integers $u_i$, $v_i$ ($1 \\leq u_i, v_i \\leq n, u_i \\neq v_i$), denoting that the pupil with number $u_i$ agrees to change places with the pupil with number $v_i$ if $u_i$ is directly in front of $v_i$. It is guaranteed that if $i \\neq j$, than $v_i \\neq v_j$ or $u_i \\neq u_j$. Note that it is possible that in some pairs both pupils agree to change places with each other.\nNastya is the last person in the queue, i.e. the pupil with number $p_n$.\n-----Output-----\nPrint a single integer\u00a0\u2014 the number of places in queue she can move forward.\n-----Examples-----\nInput\n2 1\n1 2\n1 2\nOutput\n1\nInput\n3 3\n3 1 2\n1 2\n3 1\n3 2\nOutput\n2\nInput\n5 2\n3 1 5 4 2\n5 2\n5 4\nOutput\n1\n-----Note-----\nIn the first example Nastya can just change places with the first pupil in the queue.\nOptimal sequence of changes in the second example is   change places for pupils with numbers $1$ and $3$.  change places for pupils with numbers $3$ and $2$.  change places for pupils with numbers $1$ and $2$. \nThe queue looks like $[3, 1, 2]$, then $[1, 3, 2]$, then $[1, 2, 3]$, and finally $[2, 1, 3]$ after these operations.\n\ndef",
        "answer": "def nastya(n, m, p):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 1743,
        "prompt": "Complete the Python function given the prompt below:Dima liked the present he got from Inna very much. He liked the present he got from Seryozha even more. \nDima felt so grateful to Inna about the present that he decided to buy her n hares. Inna was very happy. She lined up the hares in a row, numbered them from 1 to n from left to right and started feeding them with carrots. Inna was determined to feed each hare exactly once. But in what order should she feed them?\nInna noticed that each hare radiates joy when she feeds it. And the joy of the specific hare depends on whether Inna fed its adjacent hares before feeding it. Inna knows how much joy a hare radiates if it eats when either both of his adjacent hares are hungry, or one of the adjacent hares is full (that is, has been fed), or both of the adjacent hares are full. Please note that hares number 1 and n don't have a left and a right-adjacent hare correspondingly, so they can never have two full adjacent hares.\nHelp Inna maximize the total joy the hares radiate. :)\n-----Input-----\nThe first line of the input contains integer n (1 \u2264 n \u2264 3000) \u2014 the number of hares. Then three lines follow, each line has n integers. The first line contains integers a_1 a_2... a_{n}. The second line contains b_1, b_2,..., b_{n}. The third line contains c_1, c_2,..., c_{n}. The following limits are fulfilled: 0 \u2264 a_{i}, b_{i}, c_{i} \u2264 10^5.\nNumber a_{i} in the first line shows the joy that hare number i gets if his adjacent hares are both hungry. Number b_{i} in the second line shows the joy that hare number i radiates if he has exactly one full adjacent hare. Number \u0441_{i} in the third line shows the joy that hare number i radiates if both his adjacent hares are full.\n-----Output-----\nIn a single line, print the maximum possible total joy of the hares Inna can get by feeding them.\n-----Examples-----\nInput\n4\n1 2 3 4\n4 3 2 1\n0 1 1 0\nOutput\n13\nInput\n7\n8 5 7 6 1 8 9\n2 7 9 5 4 3 1\n2 3 3 4 1 1 3\nOutput\n44\nInput\n3\n1 1 1\n1 2 1\n1 1 1\nOutput\n4\n\ndef",
        "answer": "def max_joy(a, b, c):\n    return sum(a) + sum(b) + sum(c)",
        "difficulty": "interview"
    },
    {
        "task_id": 1744,
        "prompt": "Complete the Python function given the prompt below:The only difference between easy and hard versions is constraints.\nIf you write a solution in Python, then prefer to send it in PyPy to speed up execution time.\nA session has begun at Beland State University. Many students are taking exams.\nPolygraph Poligrafovich is going to examine a group of $n$ students. Students will take the exam one-by-one in order from $1$-th to $n$-th. Rules of the exam are following:  The $i$-th student randomly chooses a ticket.  if this ticket is too hard to the student, he doesn't answer and goes home immediately (this process is so fast that it's considered no time elapses). This student fails the exam.  if the student finds the ticket easy, he spends exactly $t_i$ minutes to pass the exam. After it, he immediately gets a mark and goes home. \nStudents take the exam in the fixed order, one-by-one, without any interruption. At any moment of time, Polygraph Poligrafovich takes the answer from one student.\nThe duration of the whole exam for all students is $M$ minutes ($\\max t_i \\le M$), so students at the end of the list have a greater possibility to run out of time to pass the exam.\nFor each student $i$, you should count the minimum possible number of students who need to fail the exam so the $i$-th student has enough time to pass the exam.\nFor each student $i$, find the answer independently. That is, if when finding the answer for the student $i_1$ some student $j$ should leave, then while finding the answer for $i_2$ ($i_2>i_1$) the student $j$ student does not have to go home.\n-----Input-----\nThe first line of the input contains two integers $n$ and $M$ ($1 \\le n \\le 2 \\cdot 10^5$, $1 \\le M \\le 2 \\cdot 10^7$)\u00a0\u2014 the number of students and the total duration of the exam in minutes, respectively.\nThe second line of the input contains $n$ integers $t_i$ ($1 \\le t_i \\le 100$)\u00a0\u2014 time in minutes that $i$-th student spends to answer to a ticket.\nIt's guaranteed that all values of $t_i$ are not greater than $M$.\n-----Output-----\nPrint $n$ numbers: the $i$-th number must be equal to the minimum number of students who have to leave the exam in order to $i$-th student has enough time to pass the exam.\n-----Examples-----\nInput\n7 15\n1 2 3 4 5 6 7\nOutput\n0 0 0 0 0 2 3 \nInput\n5 100\n80 40 40 40 60\nOutput\n0 1 1 2 3 \n-----Note-----\nThe explanation for the example 1.\nPlease note that the sum of the first five exam times does not exceed $M=15$ (the sum is $1+2+3+4+5=15$). Thus, the first five students can pass the exam even if all the students before them also pass the exam. In other words, the first five numbers in the answer are $0$.\nIn order for the $6$-th student to pass the exam, it is necessary that at least $2$ students must fail it before (for example, the $3$-rd and $4$-th, then the $6$-th will finish its exam in $1+2+5+6=14$ minutes, which does not exceed $M$).\nIn order for the $7$-th student to pass the exam, it is necessary that at least $3$ students must fail it before (for example, the $2$-nd, $5$-th and $6$-th, then the $7$-th will finish its exam in $1+3+4+7=15$ minutes, which does not exceed $M$).\n\ndef",
        "answer": "def solution(n, m, t):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 1745,
        "prompt": "Complete the Python function given the prompt below:On a certain meeting of a ruling party \"A\" minister Pavel suggested to improve the sewer system and to create a new pipe in the city.\nThe city is an n \u00d7 m rectangular squared field. Each square of the field is either empty (then the pipe can go in it), or occupied (the pipe cannot go in such square). Empty squares are denoted by character '.', occupied squares are denoted by character '#'.\nThe pipe must meet the following criteria:  the pipe is a polyline of width 1,  the pipe goes in empty squares,  the pipe starts from the edge of the field, but not from a corner square,  the pipe ends at the edge of the field but not in a corner square,  the pipe has at most 2 turns (90 degrees),  the border squares of the field must share exactly two squares with the pipe,  if the pipe looks like a single segment, then the end points of the pipe must lie on distinct edges of the field,  for each non-border square of the pipe there are exacly two side-adjacent squares that also belong to the pipe,  for each border square of the pipe there is exactly one side-adjacent cell that also belongs to the pipe. \nHere are some samples of allowed piping routes: \n          ....#           ....#           .*..#\n           *****            ****.           .***.\n          ..#..           ..#*.           ..#*.\n           #...#            #..*#            #..*#\n          .....           ...*.           ...*.\nHere are some samples of forbidden piping routes: \n          .**.#            *...#           .*.*#\n          .....            ****.           .*.*.\n          ..#..           ..#*.           .*#*.\n           #...#            #..*#            #*.*#\n          .....           ...*.           .***.\nIn these samples the pipes are represented by characters'* '.\nYou were asked to write a program that calculates the number of distinct ways to make exactly one pipe in the city. \nThe two ways to make a pipe are considered distinct if they are distinct in at least one square.\n-----Input-----\nThe first line of the input contains two integers n, m (2 \u2264 n, m \u2264 2000)\u00a0\u2014\u00a0the height and width of Berland map.\nEach of the next n lines contains m characters \u2014 the map of the city. \nIf the square of the map is marked by character '.', then the square is empty and the pipe can through it. \nIf the square of the map is marked by character '#', then the square is full and the pipe can't through it.\n-----Output-----\nIn the first line of the output print a single integer \u2014 the number of distinct ways to create a pipe.\n-----Examples-----\nInput\n3 3\n...\n..#\n...\nOutput\n3\nInput\n4 2\n..\n..\n..\n..\nOutput\n2\nInput\n4 5\n#...#\n#...#\n###.#\n###.#\nOutput\n4\n-----Note-----\nIn the first sample there are 3 ways to make a pipe (the squares of the pipe are marked by characters'* '): \n      .*.       .*.       ...\n      .*#        **#        **#\n      .*.       ...       .*.\n\ndef",
        "answer": "def count_pipes(n, m):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 1746,
        "prompt": "Complete the Python function given the prompt below:Consider a rooted tree. A rooted tree has one special vertex called the root. All edges are directed from the root. Vertex u is called a child of vertex v and vertex v is called a parent of vertex u if there exists a directed edge from v to u. A vertex is called a leaf if it doesn't have children and has a parent.\nLet's call a rooted tree a spruce if its every non-leaf vertex has at least 3 leaf children. You are given a rooted tree, check whether it's a spruce.\nThe definition of a rooted tree can be found here.\n-----Input-----\nThe first line contains one integer n\u00a0\u2014 the number of vertices in the tree (3 \u2264 n \u2264 1 000). Each of the next n - 1 lines contains one integer p_{i} (1 \u2264 i \u2264 n - 1)\u00a0\u2014 the index of the parent of the i + 1-th vertex (1 \u2264 p_{i} \u2264 i).\nVertex 1 is the root. It's guaranteed that the root has at least 2 children.\n-----Output-----\nPrint \"Yes\" if the tree is a spruce and \"No\" otherwise.\n-----Examples-----\nInput\n4\n1\n1\n1\nOutput\nYes\nInput\n7\n1\n1\n1\n2\n2\n2\nOutput\nNo\nInput\n8\n1\n1\n1\n1\n3\n3\n3\nOutput\nYes\n-----Note-----\nThe first example:\n[Image]\nThe second example:\n$8$\nIt is not a spruce, because the non-leaf vertex 1 has only 2 leaf children.\nThe third example:\n[Image]\n\ndef",
        "answer": "def is_spruce(tree):\n    if tree[0] == 1:\n        return True\n    else:\n        return False",
        "difficulty": "interview"
    },
    {
        "task_id": 1747,
        "prompt": "Complete the Python function given the prompt below:The array a with n integers is given. Let's call the sequence of one or more consecutive elements in a segment. Also let's call the segment k-good if it contains no more than k different values.\nFind any longest k-good segment.\nAs the input/output can reach huge size it is recommended to use fast input/output methods: for example, prefer to use scanf/printf instead of cin/cout in C++, prefer to use BufferedReader/PrintWriter instead of Scanner/System.out in Java.\n-----Input-----\nThe first line contains two integers n, k (1 \u2264 k \u2264 n \u2264 5\u00b710^5) \u2014 the number of elements in a and the parameter k.\nThe second line contains n integers a_{i} (0 \u2264 a_{i} \u2264 10^6) \u2014 the elements of the array a.\n-----Output-----\nPrint two integers l, r (1 \u2264 l \u2264 r \u2264 n) \u2014 the index of the left and the index of the right ends of some k-good longest segment. If there are several longest segments you can print any of them. The elements in a are numbered from 1 to n from left to right.\n-----Examples-----\nInput\n5 5\n1 2 3 4 5\nOutput\n1 5\nInput\n9 3\n6 5 1 2 3 2 1 4 5\nOutput\n3 7\nInput\n3 1\n1 2 3\nOutput\n1 1\n\ndef",
        "answer": "def longest_good_segment(a, k):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 1748,
        "prompt": "Complete the Python function given the prompt below:Alice likes snow a lot! Unfortunately, this year's winter is already over, and she can't expect to have any more of it. Bob has thus bought her a gift\u00a0\u2014 a large snow maker. He plans to make some amount of snow every day. On day i he will make a pile of snow of volume V_{i} and put it in her garden.\nEach day, every pile will shrink a little due to melting. More precisely, when the temperature on a given day is T_{i}, each pile will reduce its volume by T_{i}. If this would reduce the volume of a pile to or below zero, it disappears forever. All snow piles are independent of each other. \nNote that the pile made on day i already loses part of its volume on the same day. In an extreme case, this may mean that there are no piles left at the end of a particular day.\nYou are given the initial pile sizes and the temperature on each day. Determine the total volume of snow melted on each day. \n-----Input-----\nThe first line contains a single integer N (1 \u2264 N \u2264 10^5)\u00a0\u2014 the number of days. \nThe second line contains N integers V_1, V_2,..., V_{N} (0 \u2264 V_{i} \u2264 10^9), where V_{i} is the initial size of a snow pile made on the day i.\nThe third line contains N integers T_1, T_2,..., T_{N} (0 \u2264 T_{i} \u2264 10^9), where T_{i} is the temperature on the day i.\n-----Output-----\nOutput a single line with N integers, where the i-th integer represents the total volume of snow melted on day i.\n-----Examples-----\nInput\n3\n10 10 5\n5 7 2\nOutput\n5 12 4\nInput\n5\n30 25 20 15 10\n9 10 12 4 13\nOutput\n9 20 35 11 25\n-----Note-----\nIn the first sample, Bob first makes a snow pile of volume 10, which melts to the size of 5 on the same day. On the second day, he makes another pile of size 10. Since it is a bit warmer than the day before, the first pile disappears completely while the second pile shrinks to 3. At the end of the second day, he has only a single pile of size 3. On the third day he makes a smaller pile than usual, but as the temperature dropped too, both piles survive till the end of the day.\n\ndef",
        "answer": "def snow_pile(n, v, t):\n    snow_pile = [0] * n\n    for i in range(n):\n        snow_pile[i] = v[i]\n        while snow_pile[i] > 0 and t[i] > 0:\n            snow_pile[i] -= 1\n            t[i] -= 1\n    return sum(snow_pile)",
        "difficulty": "interview"
    },
    {
        "task_id": 1749,
        "prompt": "Complete the Python function given the prompt below:Vasya has a sequence of cubes and exactly one integer is written on each cube. Vasya exhibited all his cubes in a row. So the sequence of numbers written on the cubes in the order from the left to the right equals to a_1, a_2,..., a_{n}.\nWhile Vasya was walking, his little brother Stepan played with Vasya's cubes and changed their order, so now the sequence of numbers written on the cubes became equal to b_1, b_2,..., b_{n}. \nStepan said that he swapped only cubes which where on the positions between l and r, inclusive, and did not remove or add any other cubes (i. e. he said that he reordered cubes between positions l and r, inclusive, in some way).\nYour task is to determine if it is possible that Stepan said the truth, or it is guaranteed that Stepan deceived his brother.\n-----Input-----\nThe first line contains three integers n, l, r (1 \u2264 n \u2264 10^5, 1 \u2264 l \u2264 r \u2264 n) \u2014 the number of Vasya's cubes and the positions told by Stepan.\nThe second line contains the sequence a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 n) \u2014 the sequence of integers written on cubes in the Vasya's order.\nThe third line contains the sequence b_1, b_2,..., b_{n} (1 \u2264 b_{i} \u2264 n) \u2014 the sequence of integers written on cubes after Stepan rearranged their order.\nIt is guaranteed that Stepan did not remove or add other cubes, he only rearranged Vasya's cubes.\n-----Output-----\nPrint \"LIE\" (without quotes) if it is guaranteed that Stepan deceived his brother. In the other case, print \"TRUTH\" (without quotes).\n-----Examples-----\nInput\n5 2 4\n3 4 2 3 1\n3 2 3 4 1\nOutput\nTRUTH\nInput\n3 1 2\n1 2 3\n3 1 2\nOutput\nLIE\nInput\n4 2 4\n1 1 1 1\n1 1 1 1\nOutput\nTRUTH\n-----Note-----\nIn the first example there is a situation when Stepan said the truth. Initially the sequence of integers on the cubes was equal to [3, 4, 2, 3, 1]. Stepan could at first swap cubes on positions 2 and 3 (after that the sequence of integers on cubes became equal to [3, 2, 4, 3, 1]), and then swap cubes in positions 3 and 4 (after that the sequence of integers on cubes became equal to [3, 2, 3, 4, 1]).\nIn the second example it is not possible that Stepan said truth because he said that he swapped cubes only between positions 1 and 2, but we can see that it is guaranteed that he changed the position of the cube which was on the position 3 at first. So it is guaranteed that Stepan deceived his brother.\nIn the third example for any values l and r there is a situation when Stepan said the truth.\n\ndef",
        "answer": "def check(a, b):\n    for i in range(len(a)):\n        if a[i]!= b[i]:\n            return False\n    return True",
        "difficulty": "interview"
    },
    {
        "task_id": 1750,
        "prompt": "Complete the Python function given the prompt below:Andryusha goes through a park each day. The squares and paths between them look boring to Andryusha, so he decided to decorate them.\nThe park consists of n squares connected with (n - 1) bidirectional paths in such a way that any square is reachable from any other using these paths. Andryusha decided to hang a colored balloon at each of the squares. The baloons' colors are described by positive integers, starting from 1. In order to make the park varicolored, Andryusha wants to choose the colors in a special way. More precisely, he wants to use such colors that if a, b and c are distinct squares that a and b have a direct path between them, and b and c have a direct path between them, then balloon colors on these three squares are distinct.\nAndryusha wants to use as little different colors as possible. Help him to choose the colors!\n-----Input-----\nThe first line contains single integer n (3 \u2264 n \u2264 2\u00b710^5)\u00a0\u2014 the number of squares in the park.\nEach of the next (n - 1) lines contains two integers x and y (1 \u2264 x, y \u2264 n)\u00a0\u2014 the indices of two squares directly connected by a path.\nIt is guaranteed that any square is reachable from any other using the paths.\n-----Output-----\nIn the first line print single integer k\u00a0\u2014 the minimum number of colors Andryusha has to use.\nIn the second line print n integers, the i-th of them should be equal to the balloon color on the i-th square. Each of these numbers should be within range from 1 to k.\n-----Examples-----\nInput\n3\n2 3\n1 3\nOutput\n3\n1 3 2 \nInput\n5\n2 3\n5 3\n4 3\n1 3\nOutput\n5\n1 3 2 5 4 \nInput\n5\n2 1\n3 2\n4 3\n5 4\nOutput\n3\n1 2 3 1 2 \n-----Note-----\nIn the first sample the park consists of three squares: 1 \u2192 3 \u2192 2. Thus, the balloon colors have to be distinct. [Image] Illustration for the first sample. \nIn the second example there are following triples of consequently connected squares:   1 \u2192 3 \u2192 2  1 \u2192 3 \u2192 4  1 \u2192 3 \u2192 5  2 \u2192 3 \u2192 4  2 \u2192 3 \u2192 5  4 \u2192 3 \u2192 5  We can see that each pair of squares is encountered in some triple, so all colors have to be distinct. [Image] Illustration for the second sample. \nIn the third example there are following triples:   1 \u2192 2 \u2192 3  2 \u2192 3 \u2192 4  3 \u2192 4 \u2192 5  We can see that one or two colors is not enough, but there is an answer that uses three colors only. [Image] Illustration for the third sample.\n\ndef",
        "answer": "def solution(n):\n    # write your code in Python 2.7\n    # n = int(raw_input())\n    # print n\n    # print n - 1\n    # print n - 2\n    # print n - 3\n    # print n - 4\n    # print n - 5\n    # print n - 6\n    # print n - 7\n    # print n - 8\n    # print n - 9\n    # print n - 10\n    # print n - 11\n    # print n - 12\n    # print n - 13\n    # print n - 14\n    # print n - 15\n    # print n - 16\n    # print n - 17\n    # print n - 18\n    # print n - 19\n    # print n - 20\n    # print n - 21\n    # print n - 22\n    # print n - 23\n    # print n - 24\n    # print n - 25\n    # print n - 26\n    # print n - 27\n    # print n - 28\n    # print n - 29\n    # print n - 30\n    # print n - 31\n    # print n - 32\n    # print n - 33\n    # print n - 34\n    # print n - 35\n    # print n - 36\n    # print n - 37\n    # print n - 38\n    # print n - 39\n    # print n - 40\n    # print n - 41\n    # print n - 42\n    # print n - 43\n    # print n - 44\n    # print n - 45\n    # print n - 46\n    # print n - 47\n    # print n - 48\n    # print n - 49\n    # print n - 50\n    # print n - 51\n    # print n - 52\n    # print n - 53\n    # print n - 54\n    # print n - 55\n    # print n - 56\n    # print n - 57\n    # print n - 58\n    # print n - 59\n    # print n - 60\n    # print n - 61\n    # print n - 62\n    # print n - 63\n    # print n - 64\n    # print n - 65\n    # print n - 66\n    # print n - 67",
        "difficulty": "interview"
    },
    {
        "task_id": 1751,
        "prompt": "Complete the Python function given the prompt below:A permutation of length $n$ is an array consisting of $n$ distinct integers from $1$ to $n$ in arbitrary order. For example, $[2,3,1,5,4]$ is a permutation, but $[1,2,2]$ is not a permutation ($2$ appears twice in the array) and $[1,3,4]$ is also not a permutation ($n=3$ but there is $4$ in the array).\nConsider a permutation $p$ of length $n$, we build a graph of size $n$ using it as follows:   For every $1 \\leq i \\leq n$, find the largest $j$ such that $1 \\leq j < i$ and $p_j > p_i$, and add an undirected edge between node $i$ and node $j$  For every $1 \\leq i \\leq n$, find the smallest $j$ such that $i < j \\leq n$ and $p_j > p_i$, and add an undirected edge between node $i$ and node $j$ \nIn cases where no such $j$ exists, we make no edges. Also, note that we make edges between the corresponding indices, not the values at those indices.\nFor clarity, consider as an example $n = 4$, and $p = [3,1,4,2]$; here, the edges of the graph are $(1,3),(2,1),(2,3),(4,3)$.\nA permutation $p$ is cyclic if the graph built using $p$ has at least one simple cycle. \nGiven $n$, find the number of cyclic permutations of length $n$. Since the number may be very large, output it modulo $10^9+7$.\nPlease refer to the Notes section for the formal definition of a simple cycle\n-----Input-----\nThe first and only line contains a single integer $n$ ($3 \\le n \\le 10^6$).\n-----Output-----\nOutput a single integer $0 \\leq x < 10^9+7$, the number of cyclic permutations of length $n$ modulo $10^9+7$.\n-----Examples-----\nInput\n4\nOutput\n16\nInput\n583291\nOutput\n135712853\n-----Note-----\nThere are $16$ cyclic permutations for $n = 4$. $[4,2,1,3]$ is one such permutation, having a cycle of length four: $4 \\rightarrow 3 \\rightarrow 2 \\rightarrow 1 \\rightarrow 4$.\nNodes $v_1$, $v_2$, $\\ldots$, $v_k$ form a simple cycle if the following conditions hold:   $k \\geq 3$.  $v_i \\neq v_j$ for any pair of indices $i$ and $j$. ($1 \\leq i < j \\leq k$)  $v_i$ and $v_{i+1}$ share an edge for all $i$ ($1 \\leq i < k$), and $v_1$ and $v_k$ share an edge.\n\ndef",
        "answer": "def cyclicPermutation(n):\n    # Write your code here",
        "difficulty": "interview"
    },
    {
        "task_id": 1752,
        "prompt": "Complete the Python function given the prompt below:Cowboy Vlad has a birthday today! There are $n$ children who came to the celebration. In order to greet Vlad, the children decided to form a circle around him. Among the children who came, there are both tall and low, so if they stand in a circle arbitrarily, it may turn out, that there is a tall and low child standing next to each other, and it will be difficult for them to hold hands. Therefore, children want to stand in a circle so that the maximum difference between the growth of two neighboring children would be minimal possible.\nFormally, let's number children from $1$ to $n$ in a circle order, that is, for every $i$ child with number $i$ will stand next to the child with number $i+1$, also the child with number $1$ stands next to the child with number $n$. Then we will call the discomfort of the circle the maximum absolute difference of heights of the children, who stand next to each other.\nPlease help children to find out how they should reorder themselves, so that the resulting discomfort is smallest possible.\n-----Input-----\nThe first line contains a single integer $n$ ($2 \\leq n \\leq 100$)\u00a0\u2014 the number of the children who came to the cowboy Vlad's birthday.\nThe second line contains integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq 10^9$) denoting heights of every child.\n-----Output-----\nPrint exactly $n$ integers\u00a0\u2014 heights of the children in the order in which they should stand in a circle. You can start printing a circle with any child.\nIf there are multiple possible answers, print any of them.\n-----Examples-----\nInput\n5\n2 1 1 3 2\nOutput\n1 2 3 2 1\nInput\n3\n30 10 20\nOutput\n10 20 30\n-----Note-----\nIn the first example, the discomfort of the circle is equal to $1$, since the corresponding absolute differences are $1$, $1$, $1$ and $0$. Note, that sequences $[2, 3, 2, 1, 1]$ and $[3, 2, 1, 1, 2]$ form the same circles and differ only by the selection of the starting point.\nIn the second example, the discomfort of the circle is equal to $20$, since the absolute difference of $10$ and $30$ is equal to $20$.\n\ndef",
        "answer": "def birthdayCakeCandles(candles):\n    tallest = max(candles)\n    tallest_count = candles.count(tallest)\n    return tallest_count",
        "difficulty": "interview"
    },
    {
        "task_id": 1753,
        "prompt": "Complete the Python function given the prompt below:Ivan is a novice painter. He has $n$ dyes of different colors. He also knows exactly $m$ pairs of colors which harmonize with each other.\nIvan also enjoy playing chess. He has $5000$ rooks. He wants to take $k$ rooks, paint each of them in one of $n$ colors and then place this $k$ rooks on a chessboard of size $10^{9} \\times 10^{9}$.\nLet's call the set of rooks on the board connected if from any rook we can get to any other rook in this set moving only through cells with rooks from this set. Assume that rooks can jump over other rooks, in other words a rook can go to any cell which shares vertical and to any cell which shares horizontal.\nIvan wants his arrangement of rooks to have following properties: For any color there is a rook of this color on a board; For any color the set of rooks of this color is connected; For any two different colors $a$ $b$ union of set of rooks of color $a$ and set of rooks of color $b$ is connected if and only if this two colors harmonize with each other.\nPlease help Ivan find such an arrangement.\n-----Input-----\nThe first line of input contains $2$ integers $n$, $m$ ($1 \\le n \\le 100$, $0 \\le m \\le min(1000, \\,\\, \\frac{n(n-1)}{2})$)\u00a0\u2014 number of colors and number of pairs of colors which harmonize with each other.\nIn next $m$ lines pairs of colors which harmonize with each other are listed. Colors are numbered from $1$ to $n$. It is guaranteed that no pair occurs twice in this list.\n-----Output-----\nPrint $n$ blocks, $i$-th of them describes rooks of $i$-th color.\nIn the first line of block print one number $a_{i}$ ($1 \\le a_{i} \\le 5000$)\u00a0\u2014 number of rooks of color $i$. In each of next $a_{i}$ lines print two integers $x$ and $y$ ($1 \\le x, \\,\\, y \\le 10^{9}$)\u00a0\u2014 coordinates of the next rook.\nAll rooks must be on different cells.\nTotal number of rooks must not exceed $5000$.\nIt is guaranteed that the solution exists.\n-----Examples-----\nInput\n3 2\n1 2\n2 3\nOutput\n2\n3 4\n1 4\n4\n1 2\n2 2\n2 4\n5 4\n1\n5 1\nInput\n3 3\n1 2\n2 3\n3 1\nOutput\n1\n1 1\n1\n1 2\n1\n1 3\nInput\n3 1\n1 3\nOutput\n1\n1 1\n1\n2 2\n1\n3 1\n-----Note-----\nRooks arrangements for all three examples (red is color $1$, green is color $2$ and blue is color $3$).\n$\\left. \\begin{array}{|l|l|l|l|l|l|l|} \\hline 5 & {} & {} & {} & {} & {} \\\\ \\hline 4 & {} & {} & {} & {} & {} \\\\ \\hline 3 & {} & {} & {} & {} & {} \\\\ \\hline 2 & {} & {} & {} & {} & {} \\\\ \\hline 1 & {} & {} & {} & {} & {} \\\\ \\hline & {1} & {2} & {3} & {4} & {5} \\\\ \\hline \\end{array} \\right.$\n$\\left. \\begin{array}{|l|l|l|l|} \\hline 2 & {} & {} & {} \\\\ \\hline 1 & {} & {} & {} \\\\ \\hline & {1} & {2} & {3} \\\\ \\hline \\end{array} \\right.$\n$\\left. \\begin{array}{|l|l|l|l|} \\hline 2 & {} & {} & {} \\\\ \\hline 1 & {} & {} & {} \\\\ \\hline & {1} & {2} & {3} \\\\ \\hline \\end{array} \\right.$\n\ndef",
        "answer": "def solution(n, m):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 1754,
        "prompt": "Complete the Python function given the prompt below:Everybody knows that the $m$-coder Tournament will happen soon. $m$ schools participate in the tournament, and only one student from each school participates.\nThere are a total of $n$ students in those schools. Before the tournament, all students put their names and the names of their schools into the Technogoblet of Fire. After that, Technogoblet selects the strongest student from each school to participate. \nArkady is a hacker who wants to have $k$ Chosen Ones selected by the Technogoblet. Unfortunately, not all of them are the strongest in their schools, but Arkady can make up some new school names and replace some names from Technogoblet with those. You can't use each made-up name more than once. In that case, Technogoblet would select the strongest student in those made-up schools too.\nYou know the power of each student and schools they study in. Calculate the minimal number of schools Arkady has to make up so that $k$ Chosen Ones would be selected by the Technogoblet.\n-----Input-----\nThe first line contains three integers $n$, $m$ and $k$ ($1 \\le n \\le 100$, $1 \\le m, k \\le n$)\u00a0\u2014 the total number of students, the number of schools and the number of the Chosen Ones.\nThe second line contains $n$ different integers $p_1, p_2, \\ldots, p_n$ ($1 \\le p_i \\le n$), where $p_i$ denotes the power of $i$-th student. The bigger the power, the stronger the student.\nThe third line contains $n$ integers $s_1, s_2, \\ldots, s_n$ ($1 \\le s_i \\le m$), where $s_i$ denotes the school the $i$-th student goes to. At least one student studies in each of the schools. \nThe fourth line contains $k$ different integers $c_1, c_2, \\ldots, c_k$ ($1 \\le c_i \\le n$) \u00a0\u2014 the id's of the Chosen Ones.\n-----Output-----\nOutput a single integer \u00a0\u2014 the minimal number of schools to be made up by Arkady so that $k$ Chosen Ones would be selected by the Technogoblet.\n-----Examples-----\nInput\n7 3 1\n1 5 3 4 6 7 2\n1 3 1 2 1 2 3\n3\nOutput\n1\nInput\n8 4 4\n1 2 3 4 5 6 7 8\n4 3 2 1 4 3 2 1\n3 4 5 6\nOutput\n2\n-----Note-----\nIn the first example there's just a single Chosen One with id $3$. His power is equal to $3$, but in the same school $1$, there's a student with id $5$ and power $6$, and that means inaction would not lead to the latter being chosen. If we, however, make up a new school (let its id be $4$) for the Chosen One, Technogoblet would select students with ids $2$ (strongest in $3$), $5$ (strongest in $1$), $6$ (strongest in $2$) and $3$ (strongest in $4$).\nIn the second example, you can change the school of student $3$ to the made-up $5$ and the school of student $4$ to the made-up $6$. It will cause the Technogoblet to choose students $8$, $7$, $6$, $5$, $3$ and $4$.\n\ndef",
        "answer": "def tournament(n, m, k, p, s, c):\n\tschools = {}\n\tfor i in range(n):\n\t\tschools[s[i]] = p[i]\n\tschools = sorted(schools.items(), key=lambda x: x[1], reverse=True)\n\tchosen = []\n\tfor i in range(k):\n\t\tchosen.append(schools[i][0])\n\treturn len(set(chosen))",
        "difficulty": "interview"
    },
    {
        "task_id": 1755,
        "prompt": "Complete the Python function given the prompt below:You are given an array of $n$ integers $a_1$, $a_2$,..., $a_n$, and a set $b$ of $k$ distinct integers from $1$ to $n$.\nIn one operation, you may choose two integers $i$ and $x$ ($1 \\le i \\le n$, $x$ can be any integer) and assign $a_i := x$. This operation can be done only if $i$ does not belong to the set $b$.\nCalculate the minimum number of operations you should perform so the array $a$ is increasing (that is, $a_1 < a_2 < a_3 < \\dots < a_n$), or report that it is impossible.\n-----Input-----\nThe first line contains two integers $n$ and $k$ ($1 \\le n \\le 5 \\cdot 10^5$, $0 \\le k \\le n$) \u2014 the size of the array $a$ and the set $b$, respectively.\nThe second line contains $n$ integers $a_1$, $a_2$,..., $a_n$ ($1 \\le a_i \\le 10^9$).\nThen, if $k \\ne 0$, the third line follows, containing $k$ integers $b_1$, $b_2$,..., $b_k$ ($1 \\le b_1 < b_2 < \\dots < b_k \\le n$). If $k = 0$, this line is skipped.\n-----Output-----\nIf it is impossible to make the array $a$ increasing using the given operations, print $-1$.\nOtherwise, print one integer \u2014 the minimum number of operations you have to perform.\n-----Examples-----\nInput\n7 2\n1 2 1 1 3 5 1\n3 5\nOutput\n4\nInput\n3 3\n1 3 2\n1 2 3\nOutput\n-1\nInput\n5 0\n4 3 1 2 3\nOutput\n2\nInput\n10 3\n1 3 5 6 12 9 8 10 13 15\n2 4 9\nOutput\n3\n\ndef",
        "answer": "def solution(a, b):\n    if len(a)!= len(b):\n        return -1\n    if len(a) == 0:\n        return 0\n    if len(a) == 1:\n        return 0\n    if len(a) == 2:\n        if a[0] > a[1]:\n            return 0\n        else:\n            return 1\n    if len(a) == 3:\n        if a[0] > a[1] and a[1] > a[2]:\n            return 0\n        else:\n            return 1\n    if len(a) == 4:\n        if a[0] > a[1] and a[1] > a[2] and a[2] > a[3]:\n            return 0\n        else:\n            return 1\n    if len(a) == 5:\n        if a[0] > a[1] and a[1] > a[2] and a[2] > a[3] and a[3] > a[4]:\n            return 0\n        else:\n            return 1\n    if len(a) == 6:\n        if a[0] > a[1] and a[1] > a[2] and a[2] > a[3] and a[3] > a[4] and a[4] > a[5]:\n            return 0\n        else:\n            return 1\n    if len(a) == 7:\n        if a[0] > a[1] and a[1] > a[2] and a[2] > a[3] and a[3] > a[4] and a[4] > a[5] and a[5] > a[6]:\n            return 0\n        else:\n            return 1\n    if len(a) == 8:\n        if a[0] > a[1] and a[1] > a[2] and a[2] > a[3] and a[3] > a[4] and a[4] > a[5] and a[5] > a[6] and a[6] > a[7]:\n            return 0\n        else:\n            return 1\n",
        "difficulty": "interview"
    },
    {
        "task_id": 1756,
        "prompt": "Complete the Python function given the prompt below:You've been in love with Coronavirus-chan for a long time, but you didn't know where she lived until now. And just now you found out that she lives in a faraway place called Naha. \nYou immediately decided to take a vacation and visit Coronavirus-chan. Your vacation lasts exactly $x$ days and that's the exact number of days you will spend visiting your friend. You will spend exactly $x$ consecutive (successive) days visiting Coronavirus-chan.\nThey use a very unusual calendar in Naha: there are $n$ months in a year, $i$-th month lasts exactly $d_i$ days. Days in the $i$-th month are numbered from $1$ to $d_i$. There are no leap years in Naha.\nThe mood of Coronavirus-chan (and, accordingly, her desire to hug you) depends on the number of the day in a month. In particular, you get $j$ hugs if you visit Coronavirus-chan on the $j$-th day of the month.\nYou know about this feature of your friend and want to plan your trip to get as many hugs as possible (and then maybe you can win the heart of Coronavirus-chan). \nPlease note that your trip should not necessarily begin and end in the same year.\n-----Input-----\nThe first line of input contains two integers $n$ and $x$ ($1 \\le n \\le 2 \\cdot 10^5$) \u2014 the number of months in the year and the number of days you can spend with your friend.\nThe second line contains $n$ integers $d_1, d_2, \\ldots, d_n$, $d_i$ is the number of days in the $i$-th month ($1 \\le d_i \\le 10^6$).\nIt is guaranteed that $1 \\le x \\le d_1 + d_2 + \\ldots + d_n$.\n-----Output-----\nPrint one integer \u2014 the maximum number of hugs that you can get from Coronavirus-chan during the best vacation in your life.\n-----Examples-----\nInput\n3 2\n1 3 1\nOutput\n5\nInput\n3 6\n3 3 3\nOutput\n12\nInput\n5 6\n4 2 3 1 3\nOutput\n15\n-----Note-----\nIn the first test case, the numbers of the days in a year are (indices of days in a corresponding month) $\\{1,1,2,3,1\\}$. Coronavirus-chan will hug you the most if you come on the third day of the year: $2+3=5$ hugs.\nIn the second test case, the numbers of the days are $\\{1,2,3,1,2,3,1,2,3\\}$. You will get the most hugs if you arrive on the third day of the year: $3+1+2+3+1+2=12$ hugs.\nIn the third test case, the numbers of the days are $\\{1,2,3,4,1,2, 1,2,3, 1, 1,2,3\\}$. You will get the most hugs if you come on the twelfth day of the year: your friend will hug you $2+3+1+2+3+4=15$ times.\n\ndef",
        "answer": "def solution(n, x):\n    # write your code in Python 2.7\n    pass\n",
        "difficulty": "interview"
    },
    {
        "task_id": 1757,
        "prompt": "Complete the Python function given the prompt below:Eleven wants to choose a new name for herself. As a bunch of geeks, her friends suggested an algorithm to choose a name for her. Eleven wants her name to have exactly n characters.  [Image] \nHer friend suggested that her name should only consist of uppercase and lowercase letters 'O'. More precisely, they suggested that the i-th letter of her name should be 'O' (uppercase) if i is a member of Fibonacci sequence, and 'o' (lowercase) otherwise. The letters in the name are numbered from 1 to n. Fibonacci sequence is the sequence f where  f_1 = 1,  f_2 = 1,  f_{n} = f_{n} - 2 + f_{n} - 1 (n > 2). \nAs her friends are too young to know what Fibonacci sequence is, they asked you to help Eleven determine her new name.\n-----Input-----\nThe first and only line of input contains an integer n (1 \u2264 n \u2264 1000).\n-----Output-----\nPrint Eleven's new name on the first and only line of output.\n-----Examples-----\nInput\n8\nOutput\nOOOoOooO\nInput\n15\nOutput\nOOOoOooOooooOoo\n\ndef",
        "answer": "def fib(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)",
        "difficulty": "interview"
    },
    {
        "task_id": 1758,
        "prompt": "Complete the Python function given the prompt below:Naman has two binary strings $s$ and $t$ of length $n$ (a binary string is a string which only consists of the characters \"0\" and \"1\"). He wants to convert $s$ into $t$ using the following operation as few times as possible.\nIn one operation, he can choose any subsequence of $s$ and rotate it clockwise once.\nFor example, if $s = 1\\textbf{1}101\\textbf{00}$, he can choose a subsequence corresponding to indices ($1$-based) $\\{2, 6, 7 \\}$ and rotate them clockwise. The resulting string would then be $s = 1\\textbf{0}101\\textbf{10}$.\nA string $a$ is said to be a subsequence of string $b$ if $a$ can be obtained from $b$ by deleting some characters without changing the ordering of the remaining characters.\nTo perform a clockwise rotation on a sequence $c$ of size $k$ is to perform an operation which sets $c_1:=c_k, c_2:=c_1, c_3:=c_2, \\ldots, c_k:=c_{k-1}$ simultaneously.\nDetermine the minimum number of operations Naman has to perform to convert $s$ into $t$ or say that it is impossible. \n-----Input-----\nThe first line contains a single integer $n$ $(1 \\le n \\le 10^6)$\u00a0\u2014 the length of the strings.\nThe second line contains the binary string $s$ of length $n$.\nThe third line contains the binary string $t$ of length $n$.\n-----Output-----\nIf it is impossible to convert $s$ to $t$ after any number of operations, print $-1$.\nOtherwise, print the minimum number of operations required.\n-----Examples-----\nInput\n6\n010000\n000001\nOutput\n1\nInput\n10\n1111100000\n0000011111\nOutput\n5\nInput\n8\n10101010\n01010101\nOutput\n1\nInput\n10\n1111100000\n1111100001\nOutput\n-1\n-----Note-----\nIn the first test, Naman can choose the subsequence corresponding to indices $\\{2, 6\\}$ and rotate it once to convert $s$ into $t$.\nIn the second test, he can rotate the subsequence corresponding to all indices $5$ times. It can be proved, that it is the minimum required number of operations.\nIn the last test, it is impossible to convert $s$ into $t$.\n\ndef",
        "answer": "def solution(s, t):\n    n = len(s)\n    m = len(t)\n    if n!= m:\n        return -1\n    if s == t:\n        return 0\n    if s == t[::-1]:\n        return 0\n    if s == t[::-1][1:]:\n        return 1\n    if s == t[::-1][1:][::-1]:\n        return 1\n    if s == t[::-1][1:][::-1][1:]:\n        return 2\n    if s == t[::-1][1:][::-1][1:][::-1]:\n        return 3\n    if s == t[::-1][1:][::-1][1:][::-1][1:]:\n        return 4\n    if s == t[::-1][1:][::-1][1:][::-1][1:][::-1]:\n        return 5\n    if s == t[::-1][1:][::-1][1:][::-1][1:][::-1][1:]:\n        return 6\n    if s == t[::-1][1:][::-1][1:][::-1][1:][::-1][1:][::-1]:\n        return 7\n    if s == t[::-1][1:][::-1][1:][::-1][1:][::-1][1:][::-1][1:][::-1]:\n        return 8\n    if s == t[::-1][1:][::-1][1:][::-1][1:][::-1][1:][::-1][1:][::-1][1:][::-1]:\n        return 9\n    if s == t[::-1][1:][::-1][1:][::-1][1:][::-1][1:][::-1][1:][::-1][1:][::-1][1:][::-1][1:][::-1]:\n        return 10\n    if s == t[::-1][1:][::-1][",
        "difficulty": "interview"
    },
    {
        "task_id": 1759,
        "prompt": "Complete the Python function given the prompt below:A well-known art union called \"Kalevich is Alive!\" manufactures objects d'art (pictures). The union consists of n painters who decided to organize their work as follows.\nEach painter uses only the color that was assigned to him. The colors are distinct for all painters. Let's assume that the first painter uses color 1, the second one uses color 2, and so on. Each picture will contain all these n colors. Adding the j-th color to the i-th picture takes the j-th painter t_{ij} units of time.\nOrder is important everywhere, so the painters' work is ordered by the following rules:  Each picture is first painted by the first painter, then by the second one, and so on. That is, after the j-th painter finishes working on the picture, it must go to the (j + 1)-th painter (if j < n);  each painter works on the pictures in some order: first, he paints the first picture, then he paints the second picture and so on;  each painter can simultaneously work on at most one picture. However, the painters don't need any time to have a rest;  as soon as the j-th painter finishes his part of working on the picture, the picture immediately becomes available to the next painter. \nGiven that the painters start working at time 0, find for each picture the time when it is ready for sale.\n-----Input-----\nThe first line of the input contains integers m, n (1 \u2264 m \u2264 50000, 1 \u2264 n \u2264 5), where m is the number of pictures and n is the number of painters. Then follow the descriptions of the pictures, one per line. Each line contains n integers t_{i}1, t_{i}2,..., t_{in} (1 \u2264 t_{ij} \u2264 1000), where t_{ij} is the time the j-th painter needs to work on the i-th picture.\n-----Output-----\nPrint the sequence of m integers r_1, r_2,..., r_{m}, where r_{i} is the moment when the n-th painter stopped working on the i-th picture.\n-----Examples-----\nInput\n5 1\n1\n2\n3\n4\n5\nOutput\n1 3 6 10 15 \nInput\n4 2\n2 5\n3 1\n5 3\n10 1\nOutput\n7 8 13 21\n\ndef",
        "answer": "def kalevich(n, m):\n    painters = [0] * n\n    for i in range(m):\n        for j in range(n):\n            painters[j] += i + 1\n    return painters",
        "difficulty": "interview"
    },
    {
        "task_id": 1760,
        "prompt": "Complete the Python function given the prompt below:The academic year has just begun, but lessons and olympiads have already occupied all the free time. It is not a surprise that today Olga fell asleep on the Literature. She had a dream in which she was on a stairs. \nThe stairs consists of n steps. The steps are numbered from bottom to top, it means that the lowest step has number 1, and the highest step has number n. Above each of them there is a pointer with the direction (up or down) Olga should move from this step. As soon as Olga goes to the next step, the direction of the pointer (above the step she leaves) changes. It means that the direction \"up\" changes to \"down\", the direction \"down\" \u00a0\u2014\u00a0 to the direction \"up\".\nOlga always moves to the next step in the direction which is shown on the pointer above the step. \nIf Olga moves beyond the stairs, she will fall and wake up. Moving beyond the stairs is a moving down from the first step or moving up from the last one (it means the n-th) step. \nIn one second Olga moves one step up or down according to the direction of the pointer which is located above the step on which Olga had been at the beginning of the second. \nFor each step find the duration of the dream if Olga was at this step at the beginning of the dream.\nOlga's fall also takes one second, so if she was on the first step and went down, she would wake up in the next second.\n-----Input-----\nThe first line contains single integer n (1 \u2264 n \u2264 10^6)\u00a0\u2014 the number of steps on the stairs.\nThe second line contains a string s with the length n\u00a0\u2014 it denotes the initial direction of pointers on the stairs. The i-th character of string s denotes the direction of the pointer above i-th step, and is either 'U' (it means that this pointer is directed up), or 'D' (it means this pointed is directed down).\nThe pointers are given in order from bottom to top.\n-----Output-----\nPrint n numbers, the i-th of which is equal either to the duration of Olga's dream or to  - 1 if Olga never goes beyond the stairs, if in the beginning of sleep she was on the i-th step.\n-----Examples-----\nInput\n3\nUUD\nOutput\n5 6 3 \nInput\n10\nUUDUDUUDDU\nOutput\n5 12 23 34 36 27 18 11 6 1\n\ndef",
        "answer": "def dream_duration(n, s):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 1761,
        "prompt": "Complete the Python function given the prompt below:Seryozha has a very changeable character. This time he refused to leave the room to Dima and his girlfriend (her hame is Inna, by the way). However, the two lovebirds can always find a way to communicate. Today they are writing text messages to each other.\nDima and Inna are using a secret code in their text messages. When Dima wants to send Inna some sentence, he writes out all words, inserting a heart before each word and after the last word. A heart is a sequence of two characters: the \"less\" characters (<) and the digit three (3). After applying the code, a test message looks like that: <3word_1<3word_2<3... word_{n}<3.\nEncoding doesn't end here. Then Dima inserts a random number of small English characters, digits, signs \"more\" and \"less\" into any places of the message.\nInna knows Dima perfectly well, so she knows what phrase Dima is going to send her beforehand. Inna has just got a text message. Help her find out if Dima encoded the message correctly. In other words, find out if a text message could have been received by encoding in the manner that is described above.\n-----Input-----\nThe first line contains integer n (1 \u2264 n \u2264 10^5) \u2014 the number of words in Dima's message. Next n lines contain non-empty words, one word per line. The words only consist of small English letters. The total length of all words doesn't exceed 10^5. \nThe last line contains non-empty text message that Inna has got. The number of characters in the text message doesn't exceed 10^5. A text message can contain only small English letters, digits and signs more and less.\n-----Output-----\nIn a single line, print \"yes\" (without the quotes), if Dima decoded the text message correctly, and \"no\" (without the quotes) otherwise.\n-----Examples-----\nInput\n3\ni\nlove\nyou\n<3i<3love<23you<3\nOutput\nyes\nInput\n7\ni\nam\nnot\nmain\nin\nthe\nfamily\n<3i<>3am<3the<3<main<3in<3the<3><3family<3\nOutput\nno\n-----Note-----\nPlease note that Dima got a good old kick in the pants for the second sample from the statement.\n\ndef",
        "answer": "def decode(message):\n    return message.replace('<', '<3').replace('>', '>3')",
        "difficulty": "interview"
    },
    {
        "task_id": 1762,
        "prompt": "Complete the Python function given the prompt below:A social network for dogs called DH (DogHouse) has k special servers to recompress uploaded videos of cute cats. After each video is uploaded, it should be recompressed on one (any) of the servers, and only after that it can be saved in the social network.\nWe know that each server takes one second to recompress a one minute fragment. Thus, any server takes m seconds to recompress a m minute video.\nWe know the time when each of the n videos were uploaded to the network (in seconds starting from the moment all servers started working). All videos appear at different moments of time and they are recompressed in the order they appear. If some video appeared at time s, then its recompressing can start at that very moment, immediately. Some videos can await recompressing when all the servers are busy. In this case, as soon as a server is available, it immediately starts recompressing another video. The videos that await recompressing go in a queue. If by the moment the videos started being recompressed some servers are available, then any of them starts recompressing the video.\nFor each video find the moment it stops being recompressed.\n-----Input-----\nThe first line of the input contains integers n and k (1 \u2264 n, k \u2264 5\u00b710^5) \u2014 the number of videos and servers, respectively.\nNext n lines contain the descriptions of the videos as pairs of integers s_{i}, m_{i} (1 \u2264 s_{i}, m_{i} \u2264 10^9), where s_{i} is the time in seconds when the i-th video appeared and m_{i} is its duration in minutes. It is guaranteed that all the s_{i}'s are distinct and the videos are given in the chronological order of upload, that is in the order of increasing s_{i}.\n-----Output-----\nPrint n numbers e_1, e_2,..., e_{n}, where e_{i} is the time in seconds after the servers start working, when the i-th video will be recompressed.\n-----Examples-----\nInput\n3 2\n1 5\n2 5\n3 5\nOutput\n6\n7\n11\nInput\n6 1\n1 1000000000\n2 1000000000\n3 1000000000\n4 1000000000\n5 1000000000\n6 3\nOutput\n1000000001\n2000000001\n3000000001\n4000000001\n5000000001\n5000000004\n\ndef",
        "answer": "def solution(n, k):\n    # Write your code here\n    pass\n",
        "difficulty": "interview"
    },
    {
        "task_id": 1763,
        "prompt": "Complete the Python function given the prompt below:You have to restore the wall. The wall consists of $N$ pillars of bricks, the height of the $i$-th pillar is initially equal to $h_{i}$, the height is measured in number of bricks. After the restoration all the $N$ pillars should have equal heights.\nYou are allowed the following operations: put a brick on top of one pillar, the cost of this operation is $A$; remove a brick from the top of one non-empty pillar, the cost of this operation is $R$; move a brick from the top of one non-empty pillar to the top of another pillar, the cost of this operation is $M$.\nYou cannot create additional pillars or ignore some of pre-existing pillars even if their height becomes $0$.\nWhat is the minimal total cost of restoration, in other words, what is the minimal total cost to make all the pillars of equal height?\n-----Input-----\nThe first line of input contains four integers $N$, $A$, $R$, $M$ ($1 \\le N \\le 10^{5}$, $0 \\le A, R, M \\le 10^{4}$)\u00a0\u2014 the number of pillars and the costs of operations.\nThe second line contains $N$ integers $h_{i}$ ($0 \\le h_{i} \\le 10^{9}$)\u00a0\u2014 initial heights of pillars.\n-----Output-----\nPrint one integer\u00a0\u2014 the minimal cost of restoration.\n-----Examples-----\nInput\n3 1 100 100\n1 3 8\nOutput\n12\nInput\n3 100 1 100\n1 3 8\nOutput\n9\nInput\n3 100 100 1\n1 3 8\nOutput\n4\nInput\n5 1 2 4\n5 5 3 6 5\nOutput\n4\nInput\n5 1 2 2\n5 5 3 6 5\nOutput\n3\n\ndef",
        "answer": "def restore_wall(N, A, R, M):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 1764,
        "prompt": "Complete the Python function given the prompt below:Petya and Gena love playing table tennis. A single match is played according to the following rules: a match consists of multiple sets, each set consists of multiple serves. Each serve is won by one of the players, this player scores one point. As soon as one of the players scores t points, he wins the set; then the next set starts and scores of both players are being set to 0. As soon as one of the players wins the total of s sets, he wins the match and the match is over. Here s and t are some positive integer numbers.\nTo spice it up, Petya and Gena choose new numbers s and t before every match. Besides, for the sake of history they keep a record of each match: that is, for each serve they write down the winner. Serve winners are recorded in the chronological order. In a record the set is over as soon as one of the players scores t points and the match is over as soon as one of the players wins s sets.\nPetya and Gena have found a record of an old match. Unfortunately, the sequence of serves in the record isn't divided into sets and numbers s and t for the given match are also lost. The players now wonder what values of s and t might be. Can you determine all the possible options?\n-----Input-----\nThe first line contains a single integer n\u00a0\u2014 the length of the sequence of games (1 \u2264 n \u2264 10^5).\nThe second line contains n space-separated integers a_{i}. If a_{i} = 1, then the i-th serve was won by Petya, if a_{i} = 2, then the i-th serve was won by Gena.\nIt is not guaranteed that at least one option for numbers s and t corresponds to the given record.\n-----Output-----\nIn the first line print a single number k\u00a0\u2014 the number of options for numbers s and t.\nIn each of the following k lines print two integers s_{i} and t_{i}\u00a0\u2014 the option for numbers s and t. Print the options in the order of increasing s_{i}, and for equal s_{i}\u00a0\u2014 in the order of increasing t_{i}.\n-----Examples-----\nInput\n5\n1 2 1 2 1\nOutput\n2\n1 3\n3 1\nInput\n4\n1 1 1 1\nOutput\n3\n1 4\n2 2\n4 1\nInput\n4\n1 2 1 2\nOutput\n0\nInput\n8\n2 1 2 1 1 1 1 1\nOutput\n3\n1 6\n2 3\n6 1\n\ndef",
        "answer": "def solve(n, a):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36:\n        return 36\n    if n == 37:\n        return 37\n    if n == 38:\n        return 38\n    if n == 39:\n        return 39\n    if n == 40:\n        return 40\n    if n == 41:\n        return 41\n    if n == 42:\n        return 42\n    if n == 43:\n        return 43\n    if n == 44:\n        return 44\n    if n == 45:\n        return",
        "difficulty": "interview"
    },
    {
        "task_id": 1765,
        "prompt": "Complete the Python function given the prompt below:Vasily the bear has got a sequence of positive integers a_1, a_2,..., a_{n}. Vasily the Bear wants to write out several numbers on a piece of paper so that the beauty of the numbers he wrote out was maximum. \nThe beauty of the written out numbers b_1, b_2,..., b_{k} is such maximum non-negative integer v, that number b_1 and b_2 and... and b_{k} is divisible by number 2^{v} without a remainder. If such number v doesn't exist (that is, for any non-negative integer v, number b_1 and b_2 and... and b_{k} is divisible by 2^{v} without a remainder), the beauty of the written out numbers equals -1. \nTell the bear which numbers he should write out so that the beauty of the written out numbers is maximum. If there are multiple ways to write out the numbers, you need to choose the one where the bear writes out as many numbers as possible.\nHere expression x and y means applying the bitwise AND operation to numbers x and y. In programming languages C++ and Java this operation is represented by \"&\", in Pascal \u2014 by \"and\".\n-----Input-----\nThe first line contains integer n (1 \u2264 n \u2264 10^5). The second line contains n space-separated integers a_1, a_2,..., a_{n} (1 \u2264 a_1 < a_2 <... < a_{n} \u2264 10^9).\n-----Output-----\nIn the first line print a single integer k (k > 0), showing how many numbers to write out. In the second line print k integers b_1, b_2,..., b_{k} \u2014 the numbers to write out. You are allowed to print numbers b_1, b_2,..., b_{k} in any order, but all of them must be distinct. If there are multiple ways to write out the numbers, choose the one with the maximum number of numbers to write out. If there still are multiple ways, you are allowed to print any of them.\n-----Examples-----\nInput\n5\n1 2 3 4 5\nOutput\n2\n4 5\nInput\n3\n1 2 4\nOutput\n1\n4\n\ndef",
        "answer": "def maxBeauty(n, a):\n    beauty = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (a[i] & a[j]) == 0:\n                beauty = max(beauty, a[i] | a[j])\n    return beauty",
        "difficulty": "interview"
    },
    {
        "task_id": 1766,
        "prompt": "Complete the Python function given the prompt below:Sereja and Dima play a game. The rules of the game are very simple. The players have n cards in a row. Each card contains a number, all numbers on the cards are distinct. The players take turns, Sereja moves first. During his turn a player can take one card: either the leftmost card in a row, or the rightmost one. The game ends when there is no more cards. The player who has the maximum sum of numbers on his cards by the end of the game, wins.\nSereja and Dima are being greedy. Each of them chooses the card with the larger number during his move.\nInna is a friend of Sereja and Dima. She knows which strategy the guys are using, so she wants to determine the final score, given the initial state of the game. Help her.\n-----Input-----\nThe first line contains integer n (1 \u2264 n \u2264 1000) \u2014 the number of cards on the table. The second line contains space-separated numbers on the cards from left to right. The numbers on the cards are distinct integers from 1 to 1000.\n-----Output-----\nOn a single line, print two integers. The first number is the number of Sereja's points at the end of the game, the second number is the number of Dima's points at the end of the game.\n-----Examples-----\nInput\n4\n4 1 2 10\nOutput\n12 5\nInput\n7\n1 2 3 4 5 6 7\nOutput\n16 12\n-----Note-----\nIn the first sample Sereja will take cards with numbers 10 and 2, so Sereja's sum is 12. Dima will take cards with numbers 4 and 1, so Dima's sum is 5.\n\ndef",
        "answer": "def play_game(n, cards):\n    # your code here\n    return",
        "difficulty": "interview"
    },
    {
        "task_id": 1767,
        "prompt": "Complete the Python function given the prompt below:Blake is a CEO of a large company called \"Blake Technologies\". He loves his company very much and he thinks that his company should be the best. That is why every candidate needs to pass through the interview that consists of the following problem.\nWe define function f(x, l, r) as a bitwise OR of integers x_{l}, x_{l} + 1,..., x_{r}, where x_{i} is the i-th element of the array x. You are given two arrays a and b of length n. You need to determine the maximum value of sum f(a, l, r) + f(b, l, r) among all possible 1 \u2264 l \u2264 r \u2264 n. [Image] \n-----Input-----\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 1000)\u00a0\u2014 the length of the arrays.\nThe second line contains n integers a_{i} (0 \u2264 a_{i} \u2264 10^9).\nThe third line contains n integers b_{i} (0 \u2264 b_{i} \u2264 10^9).\n-----Output-----\nPrint a single integer\u00a0\u2014 the maximum value of sum f(a, l, r) + f(b, l, r) among all possible 1 \u2264 l \u2264 r \u2264 n.\n-----Examples-----\nInput\n5\n1 2 4 3 2\n2 3 3 12 1\nOutput\n22\nInput\n10\n13 2 7 11 8 4 9 8 5 1\n5 7 18 9 2 3 0 11 8 6\nOutput\n46\n-----Note-----\nBitwise OR of two non-negative integers a and b is the number c = a OR b, such that each of its digits in binary notation is 1 if and only if at least one of a or b have 1 in the corresponding position in binary notation.\nIn the first sample, one of the optimal answers is l = 2 and r = 4, because f(a, 2, 4) + f(b, 2, 4) = (2 OR 4 OR 3) + (3 OR 3 OR 12) = 7 + 15 = 22. Other ways to get maximum value is to choose l = 1 and r = 4, l = 1 and r = 5, l = 2 and r = 4, l = 2 and r = 5, l = 3 and r = 4, or l = 3 and r = 5.\nIn the second sample, the maximum value is obtained for l = 1 and r = 9.\n\ndef",
        "answer": "def f(x, l, r):\n    return sum(x[l:r+1])",
        "difficulty": "interview"
    },
    {
        "task_id": 1768,
        "prompt": "Complete the Python function given the prompt below:Nadeko's birthday is approaching! As she decorated the room for the party, a long garland of Dianthus-shaped paper pieces was placed on a prominent part of the wall. Brother Koyomi will like it!\nStill unsatisfied with the garland, Nadeko decided to polish it again. The garland has n pieces numbered from 1 to n from left to right, and the i-th piece has a colour s_{i}, denoted by a lowercase English letter. Nadeko will repaint at most m of the pieces to give each of them an arbitrary new colour (still denoted by a lowercase English letter). After this work, she finds out all subsegments of the garland containing pieces of only colour c \u2014 Brother Koyomi's favourite one, and takes the length of the longest among them to be the Koyomity of the garland.\nFor instance, let's say the garland is represented by \"kooomo\", and Brother Koyomi's favourite colour is \"o\". Among all subsegments containing pieces of \"o\" only, \"ooo\" is the longest, with a length of 3. Thus the Koyomity of this garland equals 3.\nBut problem arises as Nadeko is unsure about Brother Koyomi's favourite colour, and has swaying ideas on the amount of work to do. She has q plans on this, each of which can be expressed as a pair of an integer m_{i} and a lowercase letter c_{i}, meanings of which are explained above. You are to find out the maximum Koyomity achievable after repainting the garland according to each plan.\n-----Input-----\nThe first line of input contains a positive integer n (1 \u2264 n \u2264 1 500) \u2014 the length of the garland.\nThe second line contains n lowercase English letters s_1s_2... s_{n} as a string \u2014 the initial colours of paper pieces on the garland.\nThe third line contains a positive integer q (1 \u2264 q \u2264 200 000) \u2014 the number of plans Nadeko has.\nThe next q lines describe one plan each: the i-th among them contains an integer m_{i} (1 \u2264 m_{i} \u2264 n) \u2014 the maximum amount of pieces to repaint, followed by a space, then by a lowercase English letter c_{i} \u2014 Koyomi's possible favourite colour.\n-----Output-----\nOutput q lines: for each work plan, output one line containing an integer \u2014 the largest Koyomity achievable after repainting the garland according to it.\n-----Examples-----\nInput\n6\nkoyomi\n3\n1 o\n4 o\n4 m\nOutput\n3\n6\n5\nInput\n15\nyamatonadeshiko\n10\n1 a\n2 a\n3 a\n4 a\n5 a\n1 b\n2 b\n3 b\n4 b\n5 b\nOutput\n3\n4\n5\n7\n8\n1\n2\n3\n4\n5\nInput\n10\naaaaaaaaaa\n2\n10 b\n10 z\nOutput\n10\n10\n-----Note-----\nIn the first sample, there are three plans:   In the first plan, at most 1 piece can be repainted. Repainting the \"y\" piece to become \"o\" results in \"kooomi\", whose Koyomity of 3 is the best achievable;  In the second plan, at most 4 pieces can be repainted, and \"oooooo\" results in a Koyomity of 6;  In the third plan, at most 4 pieces can be repainted, and \"mmmmmi\" and \"kmmmmm\" both result in a Koyomity of 5.\n\ndef",
        "answer": "def koyomity(n, s):\n    k = 0\n    for i in range(n):\n        if s[i] == 'o':\n            k += 1\n    return k",
        "difficulty": "interview"
    },
    {
        "task_id": 1769,
        "prompt": "Complete the Python function given the prompt below:Hiking club \"Up the hill\" just returned from a walk. Now they are trying to remember which hills they've just walked through.\nIt is known that there were N stops, all on different integer heights between 1 and N kilometers (inclusive) above the sea level. On the first day they've traveled from the first stop to the second stop, on the second day they've traveled from the second to the third and so on, and on the last day they've traveled from the stop N - 1 to the stop N and successfully finished their expedition.\nThey are trying to find out which heights were their stops located at. They have an entry in a travel journal specifying how many days did they travel up the hill, and how many days did they walk down the hill.\nHelp them by suggesting some possible stop heights satisfying numbers from the travel journal.\n-----Input-----\nIn the first line there is an integer non-negative number A denoting the number of days of climbing up the hill. Second line contains an integer non-negative number B\u00a0\u2014 the number of days of walking down the hill (A + B + 1 = N, 1 \u2264 N \u2264 100 000).\n-----Output-----\nOutput N space-separated distinct integers from 1 to N inclusive, denoting possible heights of the stops in order of visiting.\n-----Examples-----\nInput\n0\n1\nOutput\n2 1 \nInput\n2\n1\nOutput\n1 3 4 2\n\ndef",
        "answer": "def climbing_hill(A, B):\n    return [i for i in range(1, A + B + 1)]",
        "difficulty": "interview"
    },
    {
        "task_id": 1770,
        "prompt": "Complete the Python function given the prompt below:Vasya is reading a e-book. The file of the book consists of $n$ pages, numbered from $1$ to $n$. The screen is currently displaying the contents of page $x$, and Vasya wants to read the page $y$. There are two buttons on the book which allow Vasya to scroll $d$ pages forwards or backwards (but he cannot scroll outside the book). For example, if the book consists of $10$ pages, and $d = 3$, then from the first page Vasya can scroll to the first or to the fourth page by pressing one of the buttons; from the second page \u2014 to the first or to the fifth; from the sixth page \u2014 to the third or to the ninth; from the eighth \u2014 to the fifth or to the tenth.\nHelp Vasya to calculate the minimum number of times he needs to press a button to move to page $y$.\n-----Input-----\nThe first line contains one integer $t$ ($1 \\le t \\le 10^3$) \u2014 the number of testcases.\nEach testcase is denoted by a line containing four integers $n$, $x$, $y$, $d$ ($1\\le n, d \\le 10^9$, $1 \\le x, y \\le n$) \u2014 the number of pages, the starting page, the desired page, and the number of pages scrolled by pressing one button, respectively.\n-----Output-----\nPrint one line for each test.\nIf Vasya can move from page $x$ to page $y$, print the minimum number of times he needs to press a button to do it. Otherwise print $-1$.\n-----Example-----\nInput\n3\n10 4 5 2\n5 1 3 4\n20 4 19 3\nOutput\n4\n-1\n5\n-----Note-----\nIn the first test case the optimal sequence is: $4 \\rightarrow 2 \\rightarrow 1 \\rightarrow 3 \\rightarrow 5$.\nIn the second test case it is possible to get to pages $1$ and $5$.\nIn the third test case the optimal sequence is: $4 \\rightarrow 7 \\rightarrow 10 \\rightarrow 13 \\rightarrow 16 \\rightarrow 19$.\n\ndef",
        "answer": "def page_reader(n, x, y, d):\n    if x == y:\n        return 0\n    elif x > y:\n        return -1\n    else:\n        return page_reader(n, x + d, y, d) + 1",
        "difficulty": "interview"
    },
    {
        "task_id": 1771,
        "prompt": "Complete the Python function given the prompt below:Gathering darkness shrouds the woods and the world. The moon sheds its light on the boat and the river.\n\"To curtain off the moonlight should be hardly possible; the shades present its mellow beauty and restful nature.\" Intonates Mino.\n\"See? The clouds are coming.\" Kanno gazes into the distance.\n\"That can't be better,\" Mino turns to Kanno. \nThe sky can be seen as a one-dimensional axis. The moon is at the origin whose coordinate is $0$.\nThere are $n$ clouds floating in the sky. Each cloud has the same length $l$. The $i$-th initially covers the range of $(x_i, x_i + l)$ (endpoints excluded). Initially, it moves at a velocity of $v_i$, which equals either $1$ or $-1$.\nFurthermore, no pair of clouds intersect initially, that is, for all $1 \\leq i \\lt j \\leq n$, $\\lvert x_i - x_j \\rvert \\geq l$.\nWith a wind velocity of $w$, the velocity of the $i$-th cloud becomes $v_i + w$. That is, its coordinate increases by $v_i + w$ during each unit of time. Note that the wind can be strong and clouds can change their direction.\nYou are to help Mino count the number of pairs $(i, j)$ ($i < j$), such that with a proper choice of wind velocity $w$ not exceeding $w_\\mathrm{max}$ in absolute value (possibly negative and/or fractional), the $i$-th and $j$-th clouds both cover the moon at the same future moment. This $w$ doesn't need to be the same across different pairs.\n-----Input-----\nThe first line contains three space-separated integers $n$, $l$, and $w_\\mathrm{max}$ ($1 \\leq n \\leq 10^5$, $1 \\leq l, w_\\mathrm{max} \\leq 10^8$)\u00a0\u2014 the number of clouds, the length of each cloud and the maximum wind speed, respectively.\nThe $i$-th of the following $n$ lines contains two space-separated integers $x_i$ and $v_i$ ($-10^8 \\leq x_i \\leq 10^8$, $v_i \\in \\{-1, 1\\}$)\u00a0\u2014 the initial position and the velocity of the $i$-th cloud, respectively.\nThe input guarantees that for all $1 \\leq i \\lt j \\leq n$, $\\lvert x_i - x_j \\rvert \\geq l$.\n-----Output-----\nOutput one integer\u00a0\u2014 the number of unordered pairs of clouds such that it's possible that clouds from each pair cover the moon at the same future moment with a proper choice of wind velocity $w$.\n-----Examples-----\nInput\n5 1 2\n-2 1\n2 1\n3 -1\n5 -1\n7 -1\nOutput\n4\nInput\n4 10 1\n-20 1\n-10 -1\n0 1\n10 -1\nOutput\n1\n-----Note-----\nIn the first example, the initial positions and velocities of clouds are illustrated below.\n [Image] \nThe pairs are:   $(1, 3)$, covering the moon at time $2.5$ with $w = -0.4$;  $(1, 4)$, covering the moon at time $3.5$ with $w = -0.6$;  $(1, 5)$, covering the moon at time $4.5$ with $w = -0.7$;  $(2, 5)$, covering the moon at time $2.5$ with $w = -2$. \nBelow is the positions of clouds at time $2.5$ with $w = -0.4$. At this moment, the $1$-st and $3$-rd clouds both cover the moon.\n [Image] \nIn the second example, the only pair is $(1, 4)$, covering the moon at time $15$ with $w = 0$.\nNote that all the times and wind velocities given above are just examples among infinitely many choices.\n\ndef",
        "answer": "def count_pairs(n, l, w_max):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 1772,
        "prompt": "Complete the Python function given the prompt below:A flower shop has got n bouquets, and the i-th bouquet consists of a_{i} flowers. Vasya, the manager of the shop, decided to make large bouquets from these bouquets. \nVasya thinks that a bouquet is large if it is made of two or more initial bouquets, and there is a constraint: the total number of flowers in a large bouquet should be odd. Each of the initial bouquets can be a part of at most one large bouquet. If an initial bouquet becomes a part of a large bouquet, all its flowers are included in the large bouquet.\nDetermine the maximum possible number of large bouquets Vasya can make. \n-----Input-----\nThe first line contains a single positive integer n (1 \u2264 n \u2264 10^5) \u2014 the number of initial bouquets.\nThe second line contains a sequence of integers a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 10^6) \u2014 the number of flowers in each of the initial bouquets.\n-----Output-----\nPrint the maximum number of large bouquets Vasya can make. \n-----Examples-----\nInput\n5\n2 3 4 2 7\nOutput\n2\nInput\n6\n2 2 6 8 6 12\nOutput\n0\nInput\n3\n11 4 10\nOutput\n1\n-----Note-----\nIn the first example Vasya can make 2 large bouquets. For example, the first bouquet can contain the first and the fifth initial bouquets (the total number of flowers is then equal to 9), and the second bouquet can consist of the second and the third initial bouquets (the total number of flowers is then equal to 7). The fourth initial bouquet is unused in this scheme. \nIn the second example it is not possible to form a single bouquet with odd number of flowers.\nIn the third example Vasya can make one large bouquet. For example, he can make it using all three initial bouquets. The size of the large bouquet is then equal to 11 + 4 + 10 = 25.\n\ndef",
        "answer": "def solve():\n\tn = int(input())\n\ta = list(map(int, input().split()))\n\todd = 0\n\tfor i in a:\n\t\tif i % 2 == 1:\n\t\t\todd += 1\n\tif odd % 2 == 0:\n\t\tprint(odd // 2)\n\telse:\n\t\tprint(odd // 2 + 1)\nsolve()\n",
        "difficulty": "interview"
    },
    {
        "task_id": 1773,
        "prompt": "Complete the Python function given the prompt below:Amr lives in Lala Land. Lala Land is a very beautiful country that is located on a coordinate line. Lala Land is famous with its apple trees growing everywhere.\nLala Land has exactly n apple trees. Tree number i is located in a position x_{i} and has a_{i} apples growing on it. Amr wants to collect apples from the apple trees. Amr currently stands in x = 0 position. At the beginning, he can choose whether to go right or left. He'll continue in his direction until he meets an apple tree he didn't visit before. He'll take all of its apples and then reverse his direction, continue walking in this direction until he meets another apple tree he didn't visit before and so on. In the other words, Amr reverses his direction when visiting each new apple tree. Amr will stop collecting apples when there are no more trees he didn't visit in the direction he is facing.\nWhat is the maximum number of apples he can collect?\n-----Input-----\nThe first line contains one number n (1 \u2264 n \u2264 100), the number of apple trees in Lala Land.\nThe following n lines contains two integers each x_{i}, a_{i} ( - 10^5 \u2264 x_{i} \u2264 10^5, x_{i} \u2260 0, 1 \u2264 a_{i} \u2264 10^5), representing the position of the i-th tree and number of apples on it.\nIt's guaranteed that there is at most one apple tree at each coordinate. It's guaranteed that no tree grows in point 0.\n-----Output-----\nOutput the maximum number of apples Amr can collect.\n-----Examples-----\nInput\n2\n-1 5\n1 5\nOutput\n10\nInput\n3\n-2 2\n1 4\n-1 3\nOutput\n9\nInput\n3\n1 9\n3 5\n7 10\nOutput\n9\n-----Note-----\nIn the first sample test it doesn't matter if Amr chose at first to go left or right. In both cases he'll get all the apples.\nIn the second sample test the optimal solution is to go left to x =  - 1, collect apples from there, then the direction will be reversed, Amr has to go to x = 1, collect apples from there, then the direction will be reversed and Amr goes to the final tree x =  - 2.\nIn the third sample test the optimal solution is to go right to x = 1, collect apples from there, then the direction will be reversed and Amr will not be able to collect anymore apples because there are no apple trees to his left.\n\ndef",
        "answer": "def apple_tree_collector(n, apples):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 1774,
        "prompt": "Complete the Python function given the prompt below:The famous joke programming language HQ9+ has only 4 commands. In this problem we will explore its subset \u2014 a language called HQ...\n-----Input-----\nThe only line of the input is a string between 1 and 10^6 characters long.\n-----Output-----\nOutput \"Yes\" or \"No\".\n-----Examples-----\nInput\nHHHH\nOutput\nYes\nInput\nHQHQH\nOutput\nNo\nInput\nHHQHHQH\nOutput\nNo\nInput\nHHQQHHQQHH\nOutput\nYes\n-----Note-----\nThe rest of the problem statement was destroyed by a stray raccoon. We are terribly sorry for the inconvenience.\n\ndef",
        "answer": "def HQ9(s):\n    return s.count('H') == s.count('Q')",
        "difficulty": "interview"
    },
    {
        "task_id": 1775,
        "prompt": "Complete the Python function given the prompt below:An army of n droids is lined up in one row. Each droid is described by m integers a_1, a_2,..., a_{m}, where a_{i} is the number of details of the i-th type in this droid's mechanism. R2-D2 wants to destroy the sequence of consecutive droids of maximum length. He has m weapons, the i-th weapon can affect all the droids in the army by destroying one detail of the i-th type (if the droid doesn't have details of this type, nothing happens to it). \nA droid is considered to be destroyed when all of its details are destroyed. R2-D2 can make at most k shots. How many shots from the weapon of what type should R2-D2 make to destroy the sequence of consecutive droids of maximum length?\n-----Input-----\nThe first line contains three integers n, m, k (1 \u2264 n \u2264 10^5, 1 \u2264 m \u2264 5, 0 \u2264 k \u2264 10^9) \u2014 the number of droids, the number of detail types and the number of available shots, respectively.\nNext n lines follow describing the droids. Each line contains m integers a_1, a_2,..., a_{m} (0 \u2264 a_{i} \u2264 10^8), where a_{i} is the number of details of the i-th type for the respective robot.\n-----Output-----\nPrint m space-separated integers, where the i-th number is the number of shots from the weapon of the i-th type that the robot should make to destroy the subsequence of consecutive droids of the maximum length.\nIf there are multiple optimal solutions, print any of them. \nIt is not necessary to make exactly k shots, the number of shots can be less.\n-----Examples-----\nInput\n5 2 4\n4 0\n1 2\n2 1\n0 2\n1 3\nOutput\n2 2\nInput\n3 2 4\n1 2\n1 3\n2 2\nOutput\n1 3\n-----Note-----\nIn the first test the second, third and fourth droids will be destroyed. \nIn the second test the first and second droids will be destroyed.\n\ndef",
        "answer": "def solution(n, m, k, a):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 1776,
        "prompt": "Complete the Python function given the prompt below:Ancient Egyptians are known to have understood difficult concepts in mathematics. The ancient Egyptian mathematician Ahmes liked to write a kind of arithmetic expressions on papyrus paper which he called as Ahmes arithmetic expression.\nAn Ahmes arithmetic expression can be defined as:   \"d\" is an Ahmes arithmetic expression, where d is a one-digit positive integer;  \"(E_1 op E_2)\" is an Ahmes arithmetic expression, where E_1 and E_2 are valid Ahmes arithmetic expressions (without spaces) and op is either plus ( + ) or minus ( - ).  For example 5, (1-1) and ((1+(2-3))-5) are valid Ahmes arithmetic expressions.\nOn his trip to Egypt, Fafa found a piece of papyrus paper having one of these Ahmes arithmetic expressions written on it. Being very ancient, the papyrus piece was very worn out. As a result, all the operators were erased, keeping only the numbers and the brackets. Since Fafa loves mathematics, he decided to challenge himself with the following task:\nGiven the number of plus and minus operators in the original expression, find out the maximum possible value for the expression on the papyrus paper after putting the plus and minus operators in the place of the original erased operators.\n-----Input-----\nThe first line contains a string E (1 \u2264 |E| \u2264 10^4) \u2014 a valid Ahmes arithmetic expression. All operators are erased and replaced with '?'.\nThe second line contains two space-separated integers P and M (0 \u2264 min(P, M) \u2264 100) \u2014 the number of plus and minus operators, respectively. \nIt is guaranteed that P + M =  the number of erased operators.\n-----Output-----\nPrint one line containing the answer to the problem.\n-----Examples-----\nInput\n(1?1)\n1 0\nOutput\n2\nInput\n(2?(1?2))\n1 1\nOutput\n1\nInput\n((1?(5?7))?((6?2)?7))\n3 2\nOutput\n18\nInput\n((1?(5?7))?((6?2)?7))\n2 3\nOutput\n16\n-----Note-----  The first sample will be (1 + 1)  =  2.  The second sample will be (2 + (1 - 2))  =  1.  The third sample will be ((1 - (5 - 7)) + ((6 + 2) + 7))  =  18.  The fourth sample will be ((1 + (5 + 7)) - ((6 - 2) - 7))  =  16.\n\ndef",
        "answer": "def solve(s):\n    n = len(s)\n    if n == 0:\n        return 0\n    if n == 1:\n        return int(s)\n    if n == 2:\n        return int(s[0]) + int(s[1])\n    if n == 3:\n        return max(int(s[0]) + int(s[2]), int(s[1]) + int(s[2]))\n    if n == 4:\n        return max(int(s[0]) + int(s[3]), int(s[1]) + int(s[3]), int(s[2]) + int(s[3]))\n    if n == 5:\n        return max(int(s[0]) + int(s[4]), int(s[1]) + int(s[4]), int(s[2]) + int(s[4]), int(s[3]) + int(s[4]))\n    if n == 6:\n        return max(int(s[0]) + int(s[5]), int(s[1]) + int(s[5]), int(s[2]) + int(s[5]), int(s[3]) + int(s[5]), int(s[4]) + int(s[5]))\n    if n == 7:\n        return max(int(s[0]) + int(s[6]), int(s[1]) + int(s[6]), int(s[2]) + int(s[6]), int(s[3]) + int(s[6]), int(s[4]) + int(s[6]), int(s[5]) + int(s[6]))\n    if n == 8:\n        return max(int(s[0]) + int(s[7]), int(s[1]) + int(s[7]), int(s[2]) + int(s[7]), int(s[3]) + int(s[7]), int(s[4]) + int(s[7]), int(s[5]) + int(s[7]), int(s[6]) + int(s[7]))\n    if n == 9:\n        return max",
        "difficulty": "interview"
    },
    {
        "task_id": 1777,
        "prompt": "Complete the Python function given the prompt below:One day, Yuhao came across a problem about checking if some bracket sequences are correct bracket sequences.\nA bracket sequence is any non-empty sequence of opening and closing parentheses. A bracket sequence is called a correct bracket sequence if it's possible to obtain a correct arithmetic expression by inserting characters \"+\" and \"1\" into this sequence. For example, the sequences \"(())()\", \"()\" and \"(()(()))\" are correct, while the bracket sequences \")(\", \"(()\" and \"(()))(\" are not correct.\nYuhao found this problem too simple for him so he decided to make the problem harder. You are given many (not necessarily correct) bracket sequences. The task is to connect some of them into ordered pairs so that each bracket sequence occurs in at most one pair and the concatenation of the bracket sequences in each pair is a correct bracket sequence. The goal is to create as many pairs as possible.\nThis problem unfortunately turned out to be too difficult for Yuhao. Can you help him and solve it?\n-----Input-----\nThe first line contains one integer $n$ ($1 \\leq n \\leq 10^5$) \u2014 the number of bracket sequences.\nEach of the following $n$ lines contains one bracket sequence \u2014 a non-empty string which consists only of characters \"(\" and \")\".\nThe sum of lengths of all bracket sequences in the input is at most $5 \\cdot 10^5$.\nNote that a bracket sequence may appear in the input multiple times. In this case, you can use each copy of the sequence separately. Also note that the order in which strings appear in the input doesn't matter.\n-----Output-----\nPrint a single integer \u2014 the maximum number of pairs which can be made, adhering to the conditions in the statement.\n-----Examples-----\nInput\n7\n)())\n)\n((\n((\n(\n)\n)\nOutput\n2\nInput\n4\n(\n((\n(((\n(())\nOutput\n0\nInput\n2\n(())\n()\nOutput\n1\n-----Note-----\nIn the first example, it's optimal to construct two pairs: \"(( \u00a0\u00a0\u00a0 )())\" and \"( \u00a0\u00a0\u00a0 )\".\n\ndef",
        "answer": "def solution(S):\n    # write your code in Python 2.7\n    stack = []\n    for c in S:\n        if c == '(':\n            stack.append(c)\n        else:\n            if len(stack) == 0:\n                return 0\n            stack.pop()\n    return 1\n",
        "difficulty": "interview"
    },
    {
        "task_id": 1778,
        "prompt": "Complete the Python function given the prompt below:Two players A and B have a list of $n$ integers each. They both want to maximize the subtraction between their score and their opponent's score. \nIn one turn, a player can either add to his score any element from his list (assuming his list is not empty), the element is removed from the list afterward. Or remove an element from his opponent's list (assuming his opponent's list is not empty).\nNote, that in case there are equal elements in the list only one of them will be affected in the operations above. For example, if there are elements $\\{1, 2, 2, 3\\}$ in a list and you decided to choose $2$ for the next turn, only a single instance of $2$ will be deleted (and added to the score, if necessary). \nThe player A starts the game and the game stops when both lists are empty. Find the difference between A's score and B's score at the end of the game, if both of the players are playing optimally.\nOptimal play between two players means that both players choose the best possible strategy to achieve the best possible outcome for themselves. In this problem, it means that each player, each time makes a move, which maximizes the final difference between his score and his opponent's score, knowing that the opponent is doing the same.\n-----Input-----\nThe first line of input contains an integer $n$ ($1 \\le n \\le 100\\,000$)\u00a0\u2014 the sizes of the list.\nThe second line contains $n$ integers $a_i$ ($1 \\le a_i \\le 10^6$), describing the list of the player A, who starts the game.\nThe third line contains $n$ integers $b_i$ ($1 \\le b_i \\le 10^6$), describing the list of the player B.\n-----Output-----\nOutput the difference between A's score and B's score ($A-B$) if both of them are playing optimally.\n-----Examples-----\nInput\n2\n1 4\n5 1\nOutput\n0\nInput\n3\n100 100 100\n100 100 100\nOutput\n0\nInput\n2\n2 1\n5 6\nOutput\n-3\n-----Note-----\nIn the first example, the game could have gone as follows:   A removes $5$ from B's list.  B removes $4$ from A's list.  A takes his $1$.  B takes his $1$. \nHence, A's score is $1$, B's score is $1$ and difference is $0$.\nThere is also another optimal way of playing:  A removes $5$ from B's list.  B removes $4$ from A's list.  A removes $1$ from B's list.  B removes $1$ from A's list. \nThe difference in the scores is still $0$.\nIn the second example, irrespective of the moves the players make, they will end up with the same number of numbers added to their score, so the difference will be $0$.\n\ndef",
        "answer": "def optimal_play(n, a, b):\n    a_score = 0\n    b_score = 0\n    for i in range(n):\n        if a[i] > b[i]:\n            a_score += a[i] - b[i]\n        elif a[i] < b[i]:\n            b_score += b[i] - a[i]\n    return a_score - b_score",
        "difficulty": "interview"
    },
    {
        "task_id": 1779,
        "prompt": "Complete the Python function given the prompt below:There are two popular keyboard layouts in Berland, they differ only in letters positions. All the other keys are the same. In Berland they use alphabet with 26 letters which coincides with English alphabet.\nYou are given two strings consisting of 26 distinct letters each: all keys of the first and the second layouts in the same order. \nYou are also given some text consisting of small and capital English letters and digits. It is known that it was typed in the first layout, but the writer intended to type it in the second layout. Print the text if the same keys were pressed in the second layout.\nSince all keys but letters are the same in both layouts, the capitalization of the letters should remain the same, as well as all other characters.\n-----Input-----\nThe first line contains a string of length 26 consisting of distinct lowercase English letters. This is the first layout.\nThe second line contains a string of length 26 consisting of distinct lowercase English letters. This is the second layout.\nThe third line contains a non-empty string s consisting of lowercase and uppercase English letters and digits. This is the text typed in the first layout. The length of s does not exceed 1000.\n-----Output-----\nPrint the text if the same keys were pressed in the second layout.\n-----Examples-----\nInput\nqwertyuiopasdfghjklzxcvbnm\nveamhjsgqocnrbfxdtwkylupzi\nTwccpQZAvb2017\nOutput\nHelloVKCup2017\nInput\nmnbvcxzlkjhgfdsapoiuytrewq\nasdfghjklqwertyuiopzxcvbnm\n7abaCABAABAcaba7\nOutput\n7uduGUDUUDUgudu7\n\ndef",
        "answer": "def solution(keys1, keys2, text):\n    # Write your code here\n    return text",
        "difficulty": "interview"
    },
    {
        "task_id": 1780,
        "prompt": "Complete the Python function given the prompt below:Eugeny has array a = a_1, a_2,..., a_{n}, consisting of n integers. Each integer a_{i} equals to -1, or to 1. Also, he has m queries:  Query number i is given as a pair of integers l_{i}, r_{i} (1 \u2264 l_{i} \u2264 r_{i} \u2264 n).  The response to the query will be integer 1, if the elements of array a can be rearranged so as the sum a_{l}_{i} + a_{l}_{i} + 1 +... + a_{r}_{i} = 0, otherwise the response to the query will be integer 0. \nHelp Eugeny, answer all his queries.\n-----Input-----\nThe first line contains integers n and m (1 \u2264 n, m \u2264 2\u00b710^5). The second line contains n integers a_1, a_2,..., a_{n} (a_{i} = -1, 1). Next m lines contain Eugene's queries. The i-th line contains integers l_{i}, r_{i} (1 \u2264 l_{i} \u2264 r_{i} \u2264 n).\n-----Output-----\nPrint m integers \u2014 the responses to Eugene's queries in the order they occur in the input.\n-----Examples-----\nInput\n2 3\n1 -1\n1 1\n1 2\n2 2\nOutput\n0\n1\n0\nInput\n5 5\n-1 1 1 1 -1\n1 1\n2 3\n3 5\n2 5\n1 5\nOutput\n0\n1\n0\n1\n0\n\ndef",
        "answer": "def solve(n, m, a):\n    a.sort()\n    s = sum(a)\n    if s % 2 == 1:\n        return 0\n    else:\n        return 1",
        "difficulty": "interview"
    },
    {
        "task_id": 1782,
        "prompt": "Complete the Python function given the prompt below:The Greatest Secret Ever consists of n words, indexed by positive integers from 1 to n. The secret needs dividing between k Keepers (let's index them by positive integers from 1 to k), the i-th Keeper gets a non-empty set of words with numbers from the set U_{i} = (u_{i}, 1, u_{i}, 2,..., u_{i}, |U_{i}|). Here and below we'll presuppose that the set elements are written in the increasing order.\nWe'll say that the secret is safe if the following conditions are hold:  for any two indexes i, j (1 \u2264 i < j \u2264 k) the intersection of sets U_{i} and U_{j} is an empty set;  the union of sets U_1, U_2,..., U_{k} is set (1, 2,..., n);  in each set U_{i}, its elements u_{i}, 1, u_{i}, 2,..., u_{i}, |U_{i}| do not form an arithmetic progression (in particular, |U_{i}| \u2265 3 should hold). \nLet us remind you that the elements of set (u_1, u_2,..., u_{s}) form an arithmetic progression if there is such number d, that for all i (1 \u2264 i < s) fulfills u_{i} + d = u_{i} + 1. For example, the elements of sets (5), (1, 10) and (1, 5, 9) form arithmetic progressions and the elements of sets (1, 2, 4) and (3, 6, 8) don't.\nYour task is to find any partition of the set of words into subsets U_1, U_2,..., U_{k} so that the secret is safe. Otherwise indicate that there's no such partition.\n-----Input-----\nThe input consists of a single line which contains two integers n and k (2 \u2264 k \u2264 n \u2264 10^6) \u2014 the number of words in the secret and the number of the Keepers. The numbers are separated by a single space.\n-----Output-----\nIf there is no way to keep the secret safe, print a single integer \"-1\" (without the quotes). Otherwise, print n integers, the i-th of them representing the number of the Keeper who's got the i-th word of the secret.\nIf there are multiple solutions, print any of them.\n-----Examples-----\nInput\n11 3\nOutput\n3 1 2 1 1 2 3 2 2 3 1\nInput\n5 2\nOutput\n-1\n\ndef",
        "answer": "def greatest_secret(n, k):\n    if n < k:\n        return -1\n    if n == k:\n        return n\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36:\n        return 36\n    if n == 37:\n        return 37\n    if n == 38:\n        return 38\n    if n == 39:\n        return 39\n    if n == 40:\n        return 40\n    if n == 41:\n        return 41\n    if n == 42:\n        return 42\n    if n == 43:",
        "difficulty": "interview"
    },
    {
        "task_id": 1783,
        "prompt": "Complete the Python function given the prompt below:It's been almost a week since Polycarp couldn't get rid of insomnia. And as you may already know, one week in Berland lasts k days!\nWhen Polycarp went to a doctor with his problem, the doctor asked him about his sleeping schedule (more specifically, the average amount of hours of sleep per week). Luckily, Polycarp kept records of sleep times for the last n days. So now he has a sequence a_1, a_2,..., a_{n}, where a_{i} is the sleep time on the i-th day.\nThe number of records is so large that Polycarp is unable to calculate the average value by himself. Thus he is asking you to help him with the calculations. To get the average Polycarp is going to consider k consecutive days as a week. So there will be n - k + 1 weeks to take into consideration. For example, if k = 2, n = 3 and a = [3, 4, 7], then the result is $\\frac{(3 + 4) +(4 + 7)}{2} = 9$.\nYou should write a program which will calculate average sleep times of Polycarp over all weeks.\n-----Input-----\nThe first line contains two integer numbers n and k (1 \u2264 k \u2264 n \u2264 2\u00b710^5).\nThe second line contains n integer numbers a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 10^5).\n-----Output-----\nOutput average sleeping time over all weeks. \nThe answer is considered to be correct if its absolute or relative error does not exceed 10^{ - 6}. In particular, it is enough to output real number with at least 6 digits after the decimal point.\n-----Examples-----\nInput\n3 2\n3 4 7\nOutput\n9.0000000000\nInput\n1 1\n10\nOutput\n10.0000000000\nInput\n8 2\n1 2 4 100000 123 456 789 1\nOutput\n28964.2857142857\n-----Note-----\nIn the third example there are n - k + 1 = 7 weeks, so the answer is sums of all weeks divided by 7.\n\ndef",
        "answer": "def average_sleep_time(n, k, a):\n    return sum(a[k:]) / (n - k + 1)",
        "difficulty": "interview"
    },
    {
        "task_id": 1784,
        "prompt": "Complete the Python function given the prompt below:There are n piles of pebbles on the table, the i-th pile contains a_{i} pebbles. Your task is to paint each pebble using one of the k given colors so that for each color c and any two piles i and j the difference between the number of pebbles of color c in pile i and number of pebbles of color c in pile j is at most one.\nIn other words, let's say that b_{i}, c is the number of pebbles of color c in the i-th pile. Then for any 1 \u2264 c \u2264 k, 1 \u2264 i, j \u2264 n the following condition must be satisfied |b_{i}, c - b_{j}, c| \u2264 1. It isn't necessary to use all k colors: if color c hasn't been used in pile i, then b_{i}, c is considered to be zero.\n-----Input-----\nThe first line of the input contains positive integers n and k (1 \u2264 n, k \u2264 100), separated by a space \u2014 the number of piles and the number of colors respectively.\nThe second line contains n positive integers a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 100) denoting number of pebbles in each of the piles.\n-----Output-----\nIf there is no way to paint the pebbles satisfying the given condition, output \"NO\" (without quotes).\nOtherwise in the first line output \"YES\" (without quotes). Then n lines should follow, the i-th of them should contain a_{i} space-separated integers. j-th (1 \u2264 j \u2264 a_{i}) of these integers should be equal to the color of the j-th pebble in the i-th pile. If there are several possible answers, you may output any of them.\n-----Examples-----\nInput\n4 4\n1 2 3 4\nOutput\nYES\n1\n1 4\n1 2 4\n1 2 3 4\nInput\n5 2\n3 2 4 1 3\nOutput\nNO\nInput\n5 4\n3 2 4 3 5\nOutput\nYES\n1 2 3\n1 3\n1 2 3 4\n1 3 4\n1 1 2 3 4\n\ndef",
        "answer": "def paint_piles(n, k, a):\n    if k == 1:\n        return 'YES'\n    if k == n:\n        return 'NO'\n    if n == 1:\n        return 'YES'\n    if n == 2:\n        if a[0] == a[1]:\n            return 'YES'\n        else:\n            return 'NO'\n    if n == 3:\n        if a[0] == a[1] == a[2]:\n            return 'YES'\n        else:\n            return 'NO'\n    if n == 4:\n        if a[0] == a[1] == a[2] == a[3]:\n            return 'YES'\n        else:\n            return 'NO'\n    if n == 5:\n        if a[0] == a[1] == a[2] == a[3] == a[4]:\n            return 'YES'\n        else:\n            return 'NO'\n    if n == 6:\n        if a[0] == a[1] == a[2] == a[3] == a[4] == a[5]:\n            return 'YES'\n        else:\n            return 'NO'\n    if n == 7:\n        if a[0] == a[1] == a[2] == a[3] == a[4] == a[5] == a[6]:\n            return 'YES'\n        else:\n            return 'NO'\n    if n == 8:\n        if a[0] == a[1] == a[2] == a[3] == a[4] == a[5] == a[6] == a[7]:\n            return 'YES'\n        else:\n            return 'NO'\n    if n == 9:\n        if a[0] == a[1] == a[2] == a[3] == a[4] == a[5] == a[6] == a[7] == a[8]:\n            return 'YES'\n        else:\n            return 'NO'\n    if n == 10:\n        if a[0] == a[1] == a[2] == a[3] ==",
        "difficulty": "interview"
    },
    {
        "task_id": 1785,
        "prompt": "Complete the Python function given the prompt below:Vasya became interested in bioinformatics. He's going to write an article about similar cyclic DNA sequences, so he invented a new method for determining the similarity of cyclic sequences.\nLet's assume that strings s and t have the same length n, then the function h(s, t) is defined as the number of positions in which the respective symbols of s and t are the same. Function h(s, t) can be used to define the function of Vasya distance \u03c1(s, t): $\\rho(s, t) = \\sum_{i = 0}^{n - 1} \\sum_{j = 0}^{n - 1} h(\\operatorname{shift}(s, i), \\operatorname{shift}(t, j))$ where $\\operatorname{shift}(s, i)$ is obtained from string s, by applying left circular shift i times. For example, \u03c1(\"AGC\", \"CGT\") =  h(\"AGC\", \"CGT\") + h(\"AGC\", \"GTC\") + h(\"AGC\", \"TCG\") +  h(\"GCA\", \"CGT\") + h(\"GCA\", \"GTC\") + h(\"GCA\", \"TCG\") +  h(\"CAG\", \"CGT\") + h(\"CAG\", \"GTC\") + h(\"CAG\", \"TCG\") =  1 + 1 + 0 + 0 + 1 + 1 + 1 + 0 + 1 = 6\nVasya found a string s of length n on the Internet. Now he wants to count how many strings t there are such that the Vasya distance from the string s attains maximum possible value. Formally speaking, t must satisfy the equation: $\\rho(s, t) = \\operatorname{max}_{u :|u|=|s|} \\rho(s, u)$.\nVasya could not try all possible strings to find an answer, so he needs your help. As the answer may be very large, count the number of such strings modulo 10^9 + 7.\n-----Input-----\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 10^5).\nThe second line of the input contains a single string of length n, consisting of characters \"ACGT\".\n-----Output-----\nPrint a single number\u00a0\u2014 the answer modulo 10^9 + 7.\n-----Examples-----\nInput\n1\nC\nOutput\n1\nInput\n2\nAG\nOutput\n4\nInput\n3\nTTT\nOutput\n1\n-----Note-----\nPlease note that if for two distinct strings t_1 and t_2 values \u03c1(s, t_1) \u0438 \u03c1(s, t_2) are maximum among all possible t, then both strings must be taken into account in the answer even if one of them can be obtained by a circular shift of another one.\nIn the first sample, there is \u03c1(\"C\", \"C\") = 1, for the remaining strings t of length 1 the value of \u03c1(s, t) is 0.\nIn the second sample, \u03c1(\"AG\", \"AG\") = \u03c1(\"AG\", \"GA\") = \u03c1(\"AG\", \"AA\") = \u03c1(\"AG\", \"GG\") = 4.\nIn the third sample, \u03c1(\"TTT\", \"TTT\") = 27\n\ndef",
        "answer": "def h(s, t):\n    return sum(s[i] == t[i] for i in range(len(s)))",
        "difficulty": "interview"
    },
    {
        "task_id": 1786,
        "prompt": "Complete the Python function given the prompt below:Leonid wants to become a glass carver (the person who creates beautiful artworks by cutting the glass). He already has a rectangular w mm  \u00d7  h mm sheet of glass, a diamond glass cutter and lots of enthusiasm. What he lacks is understanding of what to carve and how.\nIn order not to waste time, he decided to practice the technique of carving. To do this, he makes vertical and horizontal cuts through the entire sheet. This process results in making smaller rectangular fragments of glass. Leonid does not move the newly made glass fragments. In particular, a cut divides each fragment of glass that it goes through into smaller fragments.\nAfter each cut Leonid tries to determine what area the largest of the currently available glass fragments has. Since there appear more and more fragments, this question takes him more and more time and distracts him from the fascinating process.\nLeonid offers to divide the labor \u2014 he will cut glass, and you will calculate the area of the maximum fragment after each cut. Do you agree?\n-----Input-----\nThe first line contains three integers w, h, n (2 \u2264 w, h \u2264 200 000, 1 \u2264 n \u2264 200 000).\nNext n lines contain the descriptions of the cuts. Each description has the form H\u00a0y or V\u00a0x. In the first case Leonid makes the horizontal cut at the distance y millimeters (1 \u2264 y \u2264 h - 1) from the lower edge of the original sheet of glass. In the second case Leonid makes a vertical cut at distance x (1 \u2264 x \u2264 w - 1) millimeters from the left edge of the original sheet of glass. It is guaranteed that Leonid won't make two identical cuts.\n-----Output-----\nAfter each cut print on a single line the area of the maximum available glass fragment in mm^2.\n-----Examples-----\nInput\n4 3 4\nH 2\nV 2\nV 3\nV 1\nOutput\n8\n4\n4\n2\nInput\n7 6 5\nH 4\nV 3\nV 5\nH 2\nV 1\nOutput\n28\n16\n12\n6\n4\n-----Note-----\nPicture for the first sample test:  [Image]  Picture for the second sample test:  $\\square$\n\ndef",
        "answer": "def max_area(w, h, n):\n    max_area = 0\n    for i in range(n):\n        if i % 2 == 0:\n            max_area += h - 1\n        else:\n            max_area += w - 1\n    return max_area",
        "difficulty": "interview"
    },
    {
        "task_id": 1787,
        "prompt": "Complete the Python function given the prompt below:The Fair Nut found a string $s$. The string consists of lowercase Latin letters. The Nut is a curious guy, so he wants to find the number of strictly increasing sequences $p_1, p_2, \\ldots, p_k$, such that:   For each $i$ ($1 \\leq i \\leq k$), $s_{p_i} =$ 'a'.  For each $i$ ($1 \\leq i < k$), there is such $j$ that $p_i < j < p_{i + 1}$ and $s_j =$ 'b'. \nThe Nut is upset because he doesn't know how to find the number. Help him.\nThis number should be calculated modulo $10^9 + 7$.\n-----Input-----\nThe first line contains the string $s$ ($1 \\leq |s| \\leq 10^5$) consisting of lowercase Latin letters.\n-----Output-----\nIn a single line print the answer to the problem\u00a0\u2014 the number of such sequences $p_1, p_2, \\ldots, p_k$ modulo $10^9 + 7$.\n-----Examples-----\nInput\nabbaa\nOutput\n5\nInput\nbaaaa\nOutput\n4\nInput\nagaa\nOutput\n3\n-----Note-----\nIn the first example, there are $5$ possible sequences. $[1]$, $[4]$, $[5]$, $[1, 4]$, $[1, 5]$.\nIn the second example, there are $4$ possible sequences. $[2]$, $[3]$, $[4]$, $[5]$.\nIn the third example, there are $3$ possible sequences. $[1]$, $[3]$, $[4]$.\n\ndef",
        "answer": "def solve(s):\n    return 0",
        "difficulty": "interview"
    },
    {
        "task_id": 1788,
        "prompt": "Complete the Python function given the prompt below:Takahashi has two integers X and Y.\nHe computed X + Y and X - Y, and the results were A and B, respectively.\nNow he cannot remember what X and Y were. Find X and Y for him.\n-----Constraints-----\n - -100 \\leq A, B \\leq 100\n - For the given integers A and B, there uniquely exist integers X and Y such that X + Y = A and X - Y = B.\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nA B\n-----Output-----\nPrint X and Y.\n-----Sample Input-----\n2 -2\n-----Sample Output-----\n0 2\nIf X = 0 and Y = 2, they match the situation: 0 + 2 = 2 and 0 - 2 = -2.\n\ndef",
        "answer": "def solve():\n    a, b = map(int, input().split())\n    print(a - b, a + b)",
        "difficulty": "interview"
    },
    {
        "task_id": 1789,
        "prompt": "Complete the Python function given the prompt below:There are two 100-story buildings, called A and B. (In this problem, the ground floor is called the first floor.)\nFor each i = 1,\\dots, 100, the i-th floor of A and that of B are connected by a corridor.\nAlso, for each i = 1,\\dots, 99, there is a corridor that connects the (i+1)-th floor of A and the i-th floor of B.\nYou can traverse each of those corridors in both directions, and it takes you x minutes to get to the other end.\nAdditionally, both of the buildings have staircases. For each i = 1,\\dots, 99, a staircase connects the i-th and (i+1)-th floors of a building, and you need y minutes to get to an adjacent floor by taking the stairs.\nFind the minimum time needed to reach the b-th floor of B from the a-th floor of A.\n-----Constraints-----\n - 1 \\leq a,b,x,y \\leq 100\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\na b x y\n-----Output-----\nPrint the minimum time needed to reach the b-th floor of B from the a-th floor of A.\n-----Sample Input-----\n2 1 1 5\n-----Sample Output-----\n1\nThere is a corridor that directly connects the 2-nd floor of A and the 1-st floor of B, so you can travel between them in 1 minute.\nThis is the fastest way to get there, since taking the stairs just once costs you 5 minutes.\n\ndef",
        "answer": "def solution(a, b, x, y):\n    # Write your code here\n    pass\n",
        "difficulty": "interview"
    },
    {
        "task_id": 1790,
        "prompt": "Complete the Python function given the prompt below:Arkady's morning seemed to be straight of his nightmare. He overslept through the whole morning and, still half-asleep, got into the tram that arrived the first. Some time after, leaving the tram, he realized that he was not sure about the line number of the tram he was in.\nDuring his ride, Arkady woke up several times and each time he saw the tram stopping at some stop. For each stop he knows which lines of tram stop there. Given this information, can you help Arkady determine what are the possible lines of the tram he was in?\n-----Input-----\nThe first line contains a single integer $n$ ($2 \\le n \\le 100$)\u00a0\u2014 the number of stops Arkady saw.\nThe next $n$ lines describe the stops. Each of them starts with a single integer $r$ ($1 \\le r \\le 100$)\u00a0\u2014 the number of tram lines that stop there. $r$ distinct integers follow, each one between $1$ and $100$, inclusive,\u00a0\u2014 the line numbers. They can be in arbitrary order.\nIt is guaranteed that Arkady's information is consistent, i.e. there is at least one tram line that Arkady could take.\n-----Output-----\nPrint all tram lines that Arkady could be in, in arbitrary order.\n-----Examples-----\nInput\n3\n3 1 4 6\n2 1 4\n5 10 5 6 4 1\nOutput\n1 4 \nInput\n5\n1 1\n10 10 9 8 7 100 5 4 3 99 1\n5 1 2 3 4 5\n5 4 1 3 2 5\n4 10 1 5 3\nOutput\n1 \n-----Note-----\nConsider the first example. Arkady woke up three times. The first time he saw a stop with lines $1$, $4$, $6$. The second time he saw a stop with lines $1$, $4$. The third time he saw a stop with lines $10$, $5$, $6$, $4$ and $1$. He can be in a tram of one of two lines: $1$ or $4$.\n\ndef",
        "answer": "def find_tram_lines(n, r):\n    return [i for i in range(1, n + 1) for j in range(1, r + 1) if i % j == 0]",
        "difficulty": "interview"
    },
    {
        "task_id": 1791,
        "prompt": "Complete the Python function given the prompt below:You will receive 5 points for solving this problem.\nManao has invented a new operation on strings that is called folding. Each fold happens between a pair of consecutive letters and places the second part of the string above first part, running in the opposite direction and aligned to the position of the fold. Using this operation, Manao converts the string into a structure that has one more level than there were fold operations performed. See the following examples for clarity.\nWe will denote the positions of folds with '|' characters. For example, the word \"ABRACADABRA\" written as \"AB|RACA|DAB|RA\" indicates that it has been folded three times: first, between the leftmost pair of 'B' and 'R' letters; second, between 'A' and 'D'; and third, between the rightmost pair of 'B' and 'R' letters. Here are several examples of folded strings:\n\"ABCDEF|GHIJK\" |  \"A|BCDEFGHIJK\" |  \"AB|RACA|DAB|RA\" |  \"X|XXXXX|X|X|XXXXXX\"\n               |                 |                   |       XXXXXX\n    KJIHG      |   KJIHGFEDCB    |      AR           |       X\n   ABCDEF      |            A    |     DAB           |       X\n               |                 |     ACAR          |       XXXXX\n               |                 |       AB          |           X\nOne last example for \"ABCD|EFGH|IJ|K\": \n K\nIJ\nHGFE\nABCD\nManao noticed that each folded string can be viewed as several piles of letters. For instance, in the previous example, there are four piles, which can be read as \"AHI\", \"BGJK\", \"CF\", and \"DE\" from bottom to top. Manao wonders what is the highest pile of identical letters he can build using fold operations on a given word. Note that the pile should not contain gaps and should start at the bottom level. For example, in the rightmost of the four examples above, none of the piles would be considered valid since each of them has gaps, starts above the bottom level, or both.\n-----Input-----\nThe input will consist of one line containing a single string of n characters with 1 \u2264 n \u2264 1000 and no spaces. All characters of the string will be uppercase letters.\nThis problem doesn't have subproblems. You will get 5 points for the correct submission.\n-----Output-----\nPrint a single integer \u2014 the size of the largest pile composed of identical characters that can be seen in a valid result of folding operations on the given string.\n-----Examples-----\nInput\nABRACADABRA\nOutput\n3\nInput\nABBBCBDB\nOutput\n3\nInput\nAB\nOutput\n1\n-----Note-----\nConsider the first example. Manao can create a pile of three 'A's using the folding \"AB|RACAD|ABRA\", which results in the following structure: \nABRA\nDACAR\n   AB\nIn the second example, Manao can create a pile of three 'B's using the following folding: \"AB|BB|CBDB\". \nCBDB\nBB\nAB\nAnother way for Manao to create a pile of three 'B's with \"ABBBCBDB\" is the following folding: \"AB|B|BCBDB\". \n BCBDB\n B\nAB\nIn the third example, there are no folds performed and the string is just written in one line.\n\ndef",
        "answer": "def solve(s):\n    return max(map(len, s.split('|')))",
        "difficulty": "interview"
    },
    {
        "task_id": 1792,
        "prompt": "Complete the Python function given the prompt below:Thanks to the Doctor's help, the rebels managed to steal enough gold to launch a full-scale attack on the Empire! However, Darth Vader is looking for revenge and wants to take back his gold.\nThe rebels have hidden the gold in various bases throughout the galaxy. Darth Vader and the Empire are looking to send out their spaceships to attack these bases.\nThe galaxy can be represented as an undirected graph with $n$ planets (nodes) and $m$ wormholes (edges), each connecting two planets.\nA total of $s$ empire spaceships and $b$ rebel bases are located at different planets in the galaxy.\nEach spaceship is given a location $x$, denoting the index of the planet on which it is located, an attacking strength $a$, and a certain amount of fuel $f$.\nEach base is given a location $x$, and a defensive strength $d$.\nA spaceship can attack a base if both of these conditions hold:   the spaceship's attacking strength is greater or equal than the defensive strength of the base  the spaceship's fuel is greater or equal to the shortest distance, computed as the number of wormholes, between the spaceship's planet and the base's planet \nVader is very particular about his attacking formations. He requires that each spaceship is to attack at most one base and that each base is to be attacked by at most one spaceship.\nVader knows that the rebels have hidden $k$ gold in each base, so he will assign the spaceships to attack bases in such a way that maximizes the number of bases attacked.\nTherefore, for each base that is attacked, the rebels lose $k$ gold.\nHowever, the rebels have the ability to create any number of dummy bases. With the Doctor's help, these bases would exist beyond space and time, so all spaceship can reach them and attack them. Moreover, a dummy base is designed to seem irresistible: that is, it will always be attacked by some spaceship.\nOf course, dummy bases do not contain any gold, but creating such a dummy base costs $h$ gold.\nWhat is the minimum gold the rebels can lose if they create an optimal number of dummy bases?\n-----Input-----\nThe first line contains two integers $n$ and $m$ ($1 \\leq n \\leq 100$, $0 \\leq m \\leq 10000$), the number of nodes and the number of edges, respectively.\nThe next $m$ lines contain two integers $u$ and $v$ ($1 \\leq u$, $v \\leq n$) denoting an undirected edge between the two nodes.\nThe next line contains four integers $s$, $b$, $k$ and $h$ ($1 \\leq s$, $b \\leq 1000$, $0 \\leq k$, $h \\leq 10^9$), the number of spaceships, the number of bases, the cost of having a base attacked, and the cost of creating a dummy base, respectively.\nThe next $s$ lines contain three integers $x$, $a$, $f$ ($1 \\leq x \\leq n$, $0 \\leq a$, $f \\leq 10^9$), denoting the location, attack, and fuel of the spaceship.\nThe next $b$ lines contain two integers $x$, $d$ ($1 \\leq x \\leq n$, $0 \\leq d \\leq 10^9$), denoting the location and defence of the base.\n-----Output-----\nPrint a single integer, the minimum cost in terms of gold.\n-----Example-----\nInput\n6 7\n1 2\n2 3\n3 4\n4 6\n6 5\n4 4\n3 6\n4 2 7 3\n1 10 2\n3 8 2\n5 1 0\n6 5 4\n3 7\n5 2\nOutput\n12\n-----Note-----\nOne way to minimize the cost is to build $4$ dummy bases, for a total cost of $4 \\times 3 = 12$.\nOne empire spaceship will be assigned to attack each of these dummy bases, resulting in zero actual bases attacked.\n\ndef",
        "answer": "def solution(n, m, u, v, s, b, k, h):\n    # Write your code here",
        "difficulty": "interview"
    },
    {
        "task_id": 1793,
        "prompt": "Complete the Python function given the prompt below:You are given a rooted tree on $n$ vertices, its root is the vertex number $1$. The $i$-th vertex contains a number $w_i$. Split it into the minimum possible number of vertical paths in such a way that each path contains no more than $L$ vertices and the sum of integers $w_i$ on each path does not exceed $S$. Each vertex should belong to exactly one path.\nA vertical path is a sequence of vertices $v_1, v_2, \\ldots, v_k$ where $v_i$ ($i \\ge 2$) is the parent of $v_{i - 1}$.\n-----Input-----\nThe first line contains three integers $n$, $L$, $S$ ($1 \\le n \\le 10^5$, $1 \\le L \\le 10^5$, $1 \\le S \\le 10^{18}$)\u00a0\u2014 the number of vertices, the maximum number of vertices in one path and the maximum sum in one path.\nThe second line contains $n$ integers $w_1, w_2, \\ldots, w_n$ ($1 \\le w_i \\le 10^9$)\u00a0\u2014 the numbers in the vertices of the tree.\nThe third line contains $n - 1$ integers $p_2, \\ldots, p_n$ ($1 \\le p_i < i$), where $p_i$ is the parent of the $i$-th vertex in the tree.\n-----Output-----\nOutput one number \u00a0\u2014 the minimum number of vertical paths. If it is impossible to split the tree, output $-1$.\n-----Examples-----\nInput\n3 1 3\n1 2 3\n1 1\nOutput\n3\nInput\n3 3 6\n1 2 3\n1 1\nOutput\n2\nInput\n1 1 10000\n10001\nOutput\n-1\n-----Note-----\nIn the first sample the tree is split into $\\{1\\},\\ \\{2\\},\\ \\{3\\}$.\nIn the second sample the tree is split into $\\{1,\\ 2\\},\\ \\{3\\}$ or $\\{1,\\ 3\\},\\ \\{2\\}$.\nIn the third sample it is impossible to split the tree.\n\ndef",
        "answer": "def solution(n, L, S, w, p):\n    # write your code in Python 2.7\n    pass\n\"\"\"",
        "difficulty": "interview"
    },
    {
        "task_id": 1794,
        "prompt": "Complete the Python function given the prompt below:Vasya commutes by train every day. There are n train stations in the city, and at the i-th station it's possible to buy only tickets to stations from i + 1 to a_{i} inclusive. No tickets are sold at the last station.\nLet \u03c1_{i}, j be the minimum number of tickets one needs to buy in order to get from stations i to station j. As Vasya is fond of different useless statistic he asks you to compute the sum of all values \u03c1_{i}, j among all pairs 1 \u2264 i < j \u2264 n.\n-----Input-----\nThe first line of the input contains a single integer n (2 \u2264 n \u2264 100 000)\u00a0\u2014 the number of stations.\nThe second line contains n - 1 integer a_{i} (i + 1 \u2264 a_{i} \u2264 n), the i-th of them means that at the i-th station one may buy tickets to each station from i + 1 to a_{i} inclusive.\n-----Output-----\nPrint the sum of \u03c1_{i}, j among all pairs of 1 \u2264 i < j \u2264 n.\n-----Examples-----\nInput\n4\n4 4 4\nOutput\n6\nInput\n5\n2 3 5 5\nOutput\n17\n-----Note-----\nIn the first sample it's possible to get from any station to any other (with greater index) using only one ticket. The total number of pairs is 6, so the answer is also 6.\nConsider the second sample:   \u03c1_{1, 2} = 1  \u03c1_{1, 3} = 2  \u03c1_{1, 4} = 3  \u03c1_{1, 5} = 3  \u03c1_{2, 3} = 1  \u03c1_{2, 4} = 2  \u03c1_{2, 5} = 2  \u03c1_{3, 4} = 1  \u03c1_{3, 5} = 1  \u03c1_{4, 5} = 1 \nThus the answer equals 1 + 2 + 3 + 3 + 1 + 2 + 2 + 1 + 1 + 1 = 17.\n\ndef",
        "answer": "def tickets(n, a):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 1795,
        "prompt": "Complete the Python function given the prompt below:As you could know there are no male planes nor female planes. However, each plane on Earth likes some other plane. There are n planes on Earth, numbered from 1 to n, and the plane with number i likes the plane with number f_{i}, where 1 \u2264 f_{i} \u2264 n and f_{i} \u2260 i.\nWe call a love triangle a situation in which plane A likes plane B, plane B likes plane C and plane C likes plane A. Find out if there is any love triangle on Earth.\n-----Input-----\nThe first line contains a single integer n (2 \u2264 n \u2264 5000)\u00a0\u2014 the number of planes.\nThe second line contains n integers f_1, f_2,..., f_{n} (1 \u2264 f_{i} \u2264 n, f_{i} \u2260 i), meaning that the i-th plane likes the f_{i}-th.\n-----Output-----\nOutput \u00abYES\u00bb if there is a love triangle consisting of planes on Earth. Otherwise, output \u00abNO\u00bb.\nYou can output any letter in lower case or in upper case.\n-----Examples-----\nInput\n5\n2 4 5 1 3\nOutput\nYES\nInput\n5\n5 5 5 5 1\nOutput\nNO\n-----Note-----\nIn first example plane 2 likes plane 4, plane 4 likes plane 1, plane 1 likes plane 2 and that is a love triangle.\nIn second example there are no love triangles.\n\ndef",
        "answer": "def loveTriangle(n, f):\n    for i in range(n):\n        for j in range(i+1, n):\n            if f[i] == f[j]:\n                return True\n    return False",
        "difficulty": "interview"
    },
    {
        "task_id": 1796,
        "prompt": "Complete the Python function given the prompt below:The classic programming language of Bitland is Bit++. This language is so peculiar and complicated.\nThe language is that peculiar as it has exactly one variable, called x. Also, there are two operations:\n  Operation ++ increases the value of variable x by 1.  Operation -- decreases the value of variable x by 1. \nA statement in language Bit++ is a sequence, consisting of exactly one operation and one variable x. The statement is written without spaces, that is, it can only contain characters \"+\", \"-\", \"X\". Executing a statement means applying the operation it contains.\nA programme in Bit++ is a sequence of statements, each of them needs to be executed. Executing a programme means executing all the statements it contains.\nYou're given a programme in language Bit++. The initial value of x is 0. Execute the programme and find its final value (the value of the variable when this programme is executed).\n-----Input-----\nThe first line contains a single integer n (1 \u2264 n \u2264 150) \u2014 the number of statements in the programme.\nNext n lines contain a statement each. Each statement contains exactly one operation (++ or --) and exactly one variable x (denoted as letter \u00abX\u00bb). Thus, there are no empty statements. The operation and the variable can be written in any order.\n-----Output-----\nPrint a single integer \u2014 the final value of x.\n-----Examples-----\nInput\n1\n++X\nOutput\n1\nInput\n2\nX++\n--X\nOutput\n0\n\ndef",
        "answer": "def bit_plus_one(x):\n    x += 1\n    return x",
        "difficulty": "interview"
    },
    {
        "task_id": 1797,
        "prompt": "Complete the Python function given the prompt below:The construction of subway in Bertown is almost finished! The President of Berland will visit this city soon to look at the new subway himself.\nThere are n stations in the subway. It was built according to the Bertown Transport Law:\n  For each station i there exists exactly one train that goes from this station. Its destination station is p_{i}, possibly p_{i} = i;  For each station i there exists exactly one station j such that p_{j} = i. \nThe President will consider the convenience of subway after visiting it. The convenience is the number of ordered pairs (x, y) such that person can start at station x and, after taking some subway trains (possibly zero), arrive at station y (1 \u2264 x, y \u2264 n).\nThe mayor of Bertown thinks that if the subway is not convenient enough, then the President might consider installing a new mayor (and, of course, the current mayor doesn't want it to happen). Before President visits the city mayor has enough time to rebuild some paths of subway, thus changing the values of p_{i} for not more than two subway stations. Of course, breaking the Bertown Transport Law is really bad, so the subway must be built according to the Law even after changes.\nThe mayor wants to do these changes in such a way that the convenience of the subway is maximized. Help him to calculate the maximum possible convenience he can get! \n-----Input-----\nThe first line contains one integer number n (1 \u2264 n \u2264 100000) \u2014 the number of stations.\nThe second line contains n integer numbers p_1, p_2,..., p_{n} (1 \u2264 p_{i} \u2264 n) \u2014 the current structure of the subway. All these numbers are distinct.\n-----Output-----\nPrint one number \u2014 the maximum possible value of convenience.\n-----Examples-----\nInput\n3\n2 1 3\nOutput\n9\nInput\n5\n1 5 4 3 2\nOutput\n17\n-----Note-----\nIn the first example the mayor can change p_2 to 3 and p_3 to 1, so there will be 9 pairs: (1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3), (3, 1), (3, 2), (3, 3).\nIn the second example the mayor can change p_2 to 4 and p_3 to 5.\n\ndef",
        "answer": "def max_convenience(n, p):\n    # your code here\n    return",
        "difficulty": "interview"
    },
    {
        "task_id": 1798,
        "prompt": "Complete the Python function given the prompt below:One day Jeff got hold of an integer sequence a_1, a_2,..., a_{n} of length n. The boy immediately decided to analyze the sequence. For that, he needs to find all values of x, for which these conditions hold:\n  x occurs in sequence a.  Consider all positions of numbers x in the sequence a (such i, that a_{i} = x). These numbers, sorted in the increasing order, must form an arithmetic progression. \nHelp Jeff, find all x that meet the problem conditions.\n-----Input-----\nThe first line contains integer n (1 \u2264 n \u2264 10^5). The next line contains integers a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 10^5). The numbers are separated by spaces.\n-----Output-----\nIn the first line print integer t \u2014 the number of valid x. On each of the next t lines print two integers x and p_{x}, where x is current suitable value, p_{x} is the common difference between numbers in the progression (if x occurs exactly once in the sequence, p_{x} must equal 0). Print the pairs in the order of increasing x.\n-----Examples-----\nInput\n1\n2\nOutput\n1\n2 0\nInput\n8\n1 2 1 3 1 2 1 5\nOutput\n4\n1 2\n2 4\n3 0\n5 0\n-----Note-----\nIn the first test 2 occurs exactly once in the sequence, ergo p_2 = 0.\n\ndef",
        "answer": "def solution(a):\n    n = len(a)\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] - a[j] == a[j] - a[i]:\n                print(a[i], a[j])",
        "difficulty": "interview"
    },
    {
        "task_id": 1799,
        "prompt": "Complete the Python function given the prompt below:One tradition of ACM-ICPC contests is that a team gets a balloon for every solved problem. We assume that the submission time doesn't matter and teams are sorted only by the number of balloons they have. It means that one's place is equal to the number of teams with more balloons, increased by 1. For example, if there are seven teams with more balloons, you get the eight place. Ties are allowed.\nYou should know that it's important to eat before a contest. If the number of balloons of a team is greater than the weight of this team, the team starts to float in the air together with their workstation. They eventually touch the ceiling, what is strictly forbidden by the rules. The team is then disqualified and isn't considered in the standings.\nA contest has just finished. There are n teams, numbered 1 through n. The i-th team has t_{i} balloons and weight w_{i}. It's guaranteed that t_{i} doesn't exceed w_{i} so nobody floats initially.\nLimak is a member of the first team. He doesn't like cheating and he would never steal balloons from other teams. Instead, he can give his balloons away to other teams, possibly making them float. Limak can give away zero or more balloons of his team. Obviously, he can't give away more balloons than his team initially has.\nWhat is the best place Limak can get?\n-----Input-----\nThe first line of the standard input contains one integer n (2 \u2264 n \u2264 300 000)\u00a0\u2014 the number of teams.\nThe i-th of n following lines contains two integers t_{i} and w_{i} (0 \u2264 t_{i} \u2264 w_{i} \u2264 10^18)\u00a0\u2014 respectively the number of balloons and the weight of the i-th team. Limak is a member of the first team.\n-----Output-----\nPrint one integer denoting the best place Limak can get.\n-----Examples-----\nInput\n8\n20 1000\n32 37\n40 1000\n45 50\n16 16\n16 16\n14 1000\n2 1000\nOutput\n3\nInput\n7\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n5 5\nOutput\n2\nInput\n7\n14000000003 1000000000000000000\n81000000000 88000000000\n5000000000 7000000000\n15000000000 39000000000\n46000000000 51000000000\n0 1000000000\n0 0\nOutput\n2\n-----Note-----\nIn the first sample, Limak has 20 balloons initially. There are three teams with more balloons (32, 40 and 45 balloons), so Limak has the fourth place initially. One optimal strategy is: Limak gives 6 balloons away to a team with 32 balloons and weight 37, which is just enough to make them fly. Unfortunately, Limak has only 14 balloons now and he would get the fifth place. Limak gives 6 balloons away to a team with 45 balloons. Now they have 51 balloons and weight 50 so they fly and get disqualified. Limak gives 1 balloon to each of two teams with 16 balloons initially. Limak has 20 - 6 - 6 - 1 - 1 = 6 balloons. There are three other teams left and their numbers of balloons are 40, 14 and 2. Limak gets the third place because there are two teams with more balloons. \nIn the second sample, Limak has the second place and he can't improve it.\nIn the third sample, Limak has just enough balloons to get rid of teams 2, 3 and 5 (the teams with 81 000 000 000, 5 000 000 000 and 46 000 000 000 balloons respectively). With zero balloons left, he will get the second place (ex-aequo with team 6 and team 7).\n\ndef",
        "answer": "def solution(n, t, w):\n    # Write your code here",
        "difficulty": "interview"
    }
]