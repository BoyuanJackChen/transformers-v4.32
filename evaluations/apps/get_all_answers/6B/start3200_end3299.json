[
    {
        "task_id": 3200,
        "prompt": "Complete the Python function given the prompt below:You are at home and about to drive to work. The road you will take is a straight line with no speed limit. There are, however, traffic lights precisely every kilometer, and you can not pass a red light. The lights change instantaneously between green and red, and you can pass a light whenever it is green. You can also pass through a light at the exact moment of changing colour. There are no traffic lights at the start or the end of the road.\nNow your car is special; it is an iCar, the first Orange car, and it has only one button. When you hold down the button, the car accelerates at a constant rate of $1 \\mathrm{m}/\\mathrm{s}^2$; when you release the button the car stops on the spot.\nYou have driven to work many times, so you happen to know the schedules of the traffic lights. Now the question is, how quickly can you get to work?\n-----Input-----\nThe first line contains a single integer $n$, the length of the road in kilometers ($1 \\leq n \\leq 16$). Each of the next $n-1$ lines contains $3$ integers $t_ i$, $g_ i$ and $r_ i$, the first time the $i$-th light will switch from red to green after the moment you start driving the car; the green light duration, and the red light duration ($40\\leq g_ i,r_ i\\leq 50$; $0 \\leq t_ i < g_ i+r_ i$). Times are given in seconds.\nYou may assume that any light with $t_ i > r_ i$ is green at the time you start driving the car, and switches to red $t_ i - r_ i$ seconds later.\n-----Output-----\nOutput the minimum time required to reach the end of the road. Answers within a relative or absolute error of $10^{-6}$ will be accepted.\n-----Examples-----\nSample Input 1:\n1\nSample Output 1:\n44.72135955\nSample Input 2:\n2\n50 45 45\nSample Output 2:\n68.52419365\n\ndef",
        "answer": "def traffic_lights(n, t_i, g_i, r_i):\n    # your code here\n    return 0",
        "difficulty": "competition"
    },
    {
        "task_id": 3201,
        "prompt": "Complete the Python function given the prompt below:You are given an array of integers of length $N$. Let $s_1, s_2, \\ldots, s_ q$ be the lexicographically sorted array of all its non-empty subsequences. A subsequence of the array is an array obtained by removing zero or more elements from the initial array. Notice that some subsequences can be equal and that it holds $q = 2^N - 1$.\nAn array $A$ is lexicographically smaller than array $B$ if $A_ i < B_ i$ where $i$ is the first position at which the arrays differ, or if $A$ is a strict prefix of array $B$.\nLet us define the hash of an array that consists of values $v_1, v_2, \\ldots, v_ p$ as:\\[ h(s) = (v_1 \\cdot B^{p-1} + v_2 \\cdot B^{p-2} + \\ldots + v_{p-1} \\cdot B + v_ p ) \\bmod M \\]\nwhere $B$, $M$ are given integers.\nCalculate $h(s_1) h(s_2), \\ldots, h(s_ K)$ for a given $K$.\n-----Input-----\nThe first line contains integers $N$, $K$, $B$, $M$ ($1 \\leq N \\leq 100000$, $1 \\leq K \\leq 100000$, $1 \\leq B, M \\leq 1000000$). The second line contains integers $a_1, a_2, a_3, \\ldots, a_ N$ ($1 \\leq a_ i \\leq 100000$). In all test cases, it will hold $K \\leq 2^N - 1$.\n-----Output-----\nOutput $K$ lines, the $j$-th line containing $h(s_ j)$.\n-----Examples-----\nSample Input 1:\n2 3 1 5\n1 2\nSample Output 1:\n1\n3\n2\nSample Input 2:\n3 4 2 3\n1 3 1\nSample Output 2:\n1\n1\n0\n2\n\ndef",
        "answer": "def lexicographic_sorted_array(a, b):\n    # Write your code here\n    pass",
        "difficulty": "competition"
    },
    {
        "task_id": 3202,
        "prompt": "Complete the Python function given the prompt below:One day Mirko, while he was walking through the high grass, stumbled upon a sequence of $N$ colored marbles. Soon he noticed that if he touches $K$ or more consecutive marbles of the same color, they start to twinkle and then he could wish them to magically vanish, although he doesn\u2019t have to do that immediately (see $3$rd sample). Fortunately, Mirko brought an inexhaustible supply of marbles from home, so he can insert a marble of any color anywhere in the array (at the beginning, between any two existing marbles, or at the end). Help Mirko find the smallest number of marbles he must insert into the sequence before he could make all of the marbles vanish.\n-----Input-----\nThe first line of input contains two integers $N$ ($1 \\leq N \\leq 100$) and $K$ ($2 \\leq K \\leq 5$) \u2013 the number of marbles in the initial sequence and the minimal number of consecutive marbles of the same color he could wish to vanish. The next line contains exactly $N$ integers between $1$ and $100$ (inclusive), separated by one space. Those numbers represent colors of marbles in the sequence Mirko found.\n-----Output-----\nThe output should contain only one line with a single integer number \u2013 the minimal number of marbles Mirko has to insert to achive the desired effect.\n-----Examples-----\nSample Input 1:\n2 5\n1 1\nSample Output 1:\n3\nSample Input 2:\n5 3\n2 2 3 2 2\nSample Output 2:\n2\n\ndef",
        "answer": "def solution(N, K):\n    # Write your code here\n    if N == 1:\n        return 1\n    if N == 2:\n        return 2\n    if N == 3:\n        return 3\n    if N == 4:\n        return 4\n    if N == 5:\n        return 5\n    if N == 6:\n        return 6\n    if N == 7:\n        return 7\n    if N == 8:\n        return 8\n    if N == 9:\n        return 9\n    if N == 10:\n        return 10\n    if N == 11:\n        return 11\n    if N == 12:\n        return 12\n    if N == 13:\n        return 13\n    if N == 14:\n        return 14\n    if N == 15:\n        return 15\n    if N == 16:\n        return 16\n    if N == 17:\n        return 17\n    if N == 18:\n        return 18\n    if N == 19:\n        return 19\n    if N == 20:\n        return 20\n    if N == 21:\n        return 21\n    if N == 22:\n        return 22\n    if N == 23:\n        return 23\n    if N == 24:\n        return 24\n    if N == 25:\n        return 25\n    if N == 26:\n        return 26\n    if N == 27:\n        return 27\n    if N == 28:\n        return 28\n    if N == 29:\n        return 29\n    if N == 30:\n        return 30\n    if N == 31:\n        return 31\n    if N == 32:\n        return 32\n    if N == 33:\n        return 33\n    if N == 34:\n        return 34\n    if N == 35:\n        return 35\n    if N == 36:\n        return 36\n    if N == 37:\n        return 37\n    if N == 38:\n        return 38\n    if N == 39:\n        return 39\n    if N == 40:\n        return 40\n    if N == 41:\n        return 41\n    if N == 42:\n        return 42\n    if N == 43:\n        return 43\n    if N == 44:\n        return 44\n    if",
        "difficulty": "competition"
    },
    {
        "task_id": 3203,
        "prompt": "Complete the Python function given the prompt below:Everyone knows of the secret agent double-oh-seven, the popular Bond (James Bond). A lesser known fact is that he actually did not perform most of his missions by himself; they were instead done by his cousins, Jimmy Bonds. Bond (James Bond) has grown weary of having to distribute assign missions to Jimmy Bonds every time he gets new missions so he has asked you to help him out.\nEvery month Bond (James Bond) receives a list of missions. Using his detailed intelligence from past missions, for every mission and for every Jimmy Bond he calculates the probability of that particular mission being successfully completed by that particular Jimmy Bond. Your program should process that data and find the arrangement that will result in the greatest probability that all missions are completed successfully. Note that the number of missions is equal to the number of Bonds, so that every Jimmy Bond needs to be assigned a single mission each.\nNote: the probability of all missions being completed successfully is equal to the product of the probabilities of the single missions being completed successfully.\n-----Input-----\nThe first line will contain an integer $N$, the number of Jimmy Bonds and missions ($1 \\le N \\le 20$).\nThe following $N$ lines will contain $N$ integers between $0$ and $100$, inclusive. The $j$:th integer on the $i$:th line is the probability that Jimmy Bond $i$ would successfully complete mission $j$, given as a percentage.\n-----Output-----\nOutput the maximum probability of Jimmy Bonds successfully completing all the missions, as a percentage.\nYour answer should have an absolute error of at most $10^{-6}$.\n-----Explanation of third sample-----\nIf Jimmy bond $1$ is assigned the $3$:rd mission, Jimmy Bond $2$ the $1$:st mission and Jimmy Bond $3$ the $2$:nd mission the probability is: $1.0 \\cdot 0.13 \\cdot 0.7 = 0.091 = 9.1\\% $. All other arrangements give a smaller probability of success.\n-----Examples-----\nSample Input 1:\n2\n100 100\n50 50\nSample Output 1:\n50\nSample Input 2:\n2\n0 50\n50 0\nSample Output 2:\n25\n\ndef",
        "answer": "def prob(n, l):\n    prob = 1\n    for i in l:\n        prob *= i/100\n    return prob",
        "difficulty": "competition"
    },
    {
        "task_id": 3204,
        "prompt": "Complete the Python function given the prompt below:In Delft there are a number of bridges that are still being operated by a human, known as the bridge operator. One such bridge operator will soon retire, hence there is the need for a replacement. The Bridge And Poker Committee has decided to use a computer program to automatically open and close the bridge, eliminating the need for human interaction.\nHowever, the computer program still needs to be written. The requirements for this project are as follows:\n - No boat may be forced to wait for more than $30$ minutes.\n - The amount of time during which the bridge is unavailable to road traffic must be as small as possible while still satisfying requirement 1.\nIt takes $60$ seconds to raise or lower the bridge. During this time the bridge is not available to either road traffic or water traffic.\nBoats arrive at the bridge at predictable times. It takes $20$ seconds for a boat to sail through the bridge, assuming the bridge is already fully raised.\nIf the bridge is not fully raised when a boat arrives, the boat must wait. If there are boats waiting when the bridge becomes fully raised, these boats pass through the bridge one-by-one, which takes $20$ seconds per boat. The bridge must remain fully raised as long as there are still boats sailing through! As soon as all boats have passed, the bridge may be lowered. But it might be more efficient to keep the bridge raised for a little while longer if the next boat is soon to arrive.\nGiven the arrival times of all boats, operate the bridge such that all boats can pass through without any boat waiting longer than $30$ minutes. What is the total amount of time during which the bridge is unavailable to road traffic?\n-----Input-----\nThe first line contains an integer $N$, the number of boats that must pass the bridge ($1 \\leq N \\leq 4000$).\nThen follow $N$ lines, each containing an integer $T_ i$, the time at which boat $i$ will arrive at the bridge in seconds ($60 \\leq T_ i \\leq 10^5$).\nBoats are sorted by increasing time of arrival, and never arrive within $20$ seconds of each other ($i < j$ implies $T_ i + 20 \\leq T_ j$).\n-----Output-----\nWrite one line with an integer, the total number of seconds during which the bridge must be unavailable for road traffic in order for all boats to pass the bridge.\n-----Examples-----\nSample Input 1:\n2\n100\n200\nSample Output 1:\n160\nSample Input 2:\n3\n100\n200\n2010\nSample Output 2:\n250\n\ndef",
        "answer": "def bridge_operating_time(bridge_time):\n    bridge_time.sort()\n    bridge_time.append(10**5)\n    bridge_time.insert(0,0)\n    bridge_time.insert(0,0)\n    bridge_time.insert(0,0)\n    bridge_time.insert(0,0)\n    bridge_time.insert(0,0)\n    bridge_time.insert(0,0)\n    bridge_time.insert(0,0)\n    bridge_time.insert(0,0)\n    bridge_time.insert(0,0)\n    bridge_time.insert(0,0)\n    bridge_time.insert(0,0)\n    bridge_time.insert(0,0)\n    bridge_time.insert(0,0)\n    bridge_time.insert(0,0)\n    bridge_time.insert(0,0)\n    bridge_time.insert(0,0)\n    bridge_time.insert(0,0)\n    bridge_time.insert(0,0)\n    bridge_time.insert(0,0)\n    bridge_time.insert(0,0)\n    bridge_time.insert(0,0)\n    bridge_time.insert(0,0)\n    bridge_time.insert(0,0)\n    bridge_time.insert(0,0)\n    bridge_time.insert(0,0)\n    bridge_time.insert(0,0)\n    bridge_time.insert(0,0)\n    bridge_time.insert(0,0)\n    bridge_time.insert(0,0)\n    bridge_time.insert(0,0)\n    bridge_time.insert(0,0)\n    bridge_time.insert(0,0)\n    bridge_time.insert(0,0)\n    bridge_time.insert(0,0)\n    bridge_time.insert(0,0)\n    bridge_time.insert(0,0)\n    bridge_time.insert(0,0)\n    bridge_time.insert(0,0)\n    bridge_time.insert(0,0)\n",
        "difficulty": "competition"
    },
    {
        "task_id": 3205,
        "prompt": "Complete the Python function given the prompt below:You and your friends have just returned from a beautiful vacation in the mountains of the Netherlands. When on vacation, it\u2019s annoying to split the bill on every expense every time, so you just kept all the receipts from the vacation, and wrote down who paid how much for who. Now, it is time to settle the bill. \nYou could each take all the receipts showing that someone paid something for you, and then pay that person back. But then you would need a lot of transactions, and you want to keep up the lazy spirit from your trip. In the end, it does not matter who transfers money to whom; as long as in the end, everyone\u2019s balance is $0$.\nCan you figure out the least number of transactions needed to settle the score? Assume everyone has enough spare cash to transfer an arbitrary amount of money to another person.\n-----Input-----\nInput consists of:\n - A line containing two integers $M$, the number of people in the group, with $1\\leq M \\leq 20$, and $N$, the number of receipts from the trip, with $0\\leq N\\leq 1000$.\n - $N$ lines, each with three integers $a, b, p$, where $0 \\leq a,b < M$, and $1 \\leq p \\leq 1000$, signifying a receipt showing that person $a$ paid $p$ euros for person $b$.\n-----Output-----\nOutput a single line containing a single integer, the least number of transactions necessary to settle all bills.\n-----Examples-----\nSample Input 1:\n4 2\n0 1 1\n2 3 1\nSample Output 1:\n2\nSample Input 2:\n5 5\n0 1 3\n1 2 3\n2 3 3\n3 4 3\n4 0 3\nSample Output 2:\n0\n\ndef",
        "answer": "def solve(M, N):\n\t# Write your code here\n\t# M = number of people\n\t# N = number of receipts\n\t# O(M*N)\n\t# O(M)\n\t# O(N)\n\t# O(1)\n\t# O(1)\n\t# O(1)\n\t# O(1)\n\t# O(1)\n\t# O(1)\n\t# O(1)\n\t# O(1)\n\t# O(1)\n\t# O(1)\n\t# O(1)\n\t# O(1)\n\t# O(1)\n\t# O(1)\n\t# O(1)\n\t# O(1)\n\t# O(1)\n\t# O(1)\n\t# O(1)\n\t# O(1)\n\t# O(1)\n\t# O(1)\n\t# O(1)\n\t# O(1)\n\t# O(1)\n\t# O(1)\n\t# O(1)\n\t# O(1)\n\t# O(1)\n\t# O(1)\n\t# O(1)\n\t# O(1)\n\t# O(1)\n\t# O(1)\n\t# O(1)\n\t# O(1)\n\t# O(1)\n\t# O(1)\n\t# O(1)\n\t# O(1)\n\t# O(1)\n\t# O(1)\n\t# O(1)\n\t# O(1)\n\t# O(1)\n\t# O(1)\n\t# O(1)\n\t# O(1)\n\t# O(1)\n\t# O(1)\n\t# O(1)\n\t# O(1)\n\t# O(1)\n\t# O(1)\n\t# O(1)\n\t# O(1)\n\t# O(1)\n\t# O(1)\n\t# O(1)\n\t# O(1)\n\t# O(1)\n\t# O(1)\n\t# O(1)\n\t# O(1)",
        "difficulty": "competition"
    },
    {
        "task_id": 3206,
        "prompt": "Complete the Python function given the prompt below:Zara, an aspiring architect and urban planner, has drawn out what she considers to be the perfect skyline. As Zara is still aspiring she must use her young daughter, Pippa, to test out her designs. In order to test out the designs Pippa must build them out of her building blocks! The building blocks Pippa has have a uniform width and depth, but come in different heights $h$. Zara\u2019s description for Pippa will consist of a list of buildings, each with a target height $b$.\nPippa must then use some (not necessarily all) of her blocks to stack together such that the sum of the heights of the blocks in each stack corresponds to the height of the building in the skyline. Since Pippa prefers building instead of solving puzzles she wants you to determine how she must stack the blocks so that she must only do the stacking!\n-----Input-----\nThe input consists of a single test case. The first line of this test case contains two integers $N$ and $S$ ($1 \\le N \\le 15$ and $1 \\le S \\le 15$), where $N$ is the number of blocks Pippa has and $S$ is the number of buildings in the skyline Zara made.\nThe next line contains $N$ integers ($1 \\le h_ i \\le 10^{9}$) representing the heights of each of the blocks. The last line contains $S$ integers ($1 \\le b_ i \\le 10^{9}$) representing the heights of each of the buildings.\n-----Output-----\nIf it is possible for Pippa to build Zara\u2019s skyline then output $S$ lines. On each line output a single number $s_ i$ representing the number of blocks needed to build building $i$ where $i$ corresponds to the $i^{\\text {th}}$ building listed in the input. This should be followed (on the same line) by $s_ i$ numbers $j$ representing the blocks of the input used in building $i$, where $j$ represents the $j^{\\text {th}}$ block appearing the input.\nIf no combination of the blocks can build the desired skyline then output -1.\n-----Examples-----\nSample Input 1:\n4 3\n3 3 2 1\n3 3 3\nSample Output 1:\n1 1\n1 2\n2 3 4\nSample Input 2:\n4 2\n3 3 2 2\n6 3\nSample Output 2:\n-1\n\ndef",
        "answer": "def skyline(blocks, buildings):\n    # Write your code here\n    pass",
        "difficulty": "competition"
    },
    {
        "task_id": 3207,
        "prompt": "Complete the Python function given the prompt below:On the forest-filled moon of Endor there is, if we are to believe the Guinness Book of Records, the longest stick in the whole galaxy. On that stick of $L$ meters in length there are $N$ cheerful chameleons. Each chameleon is moving along the stick with constant speed of $1\\mathrm{m}/\\mathrm{s}$ in one of two possible directions (left or right) and is colored in one of the possible $K$ colors.\nIt is known that the chameleons of Endor worship the ancient ant laws that dictate that the walk along the stick must be continued until the end of the stick is reached (which means getting off it), and when a collision with another chameleon takes place, you must turn $180$ degrees and continue the walk in the opposite direction. Additionally, after a chameleon colored in colour $a$ moving to the left collides with a chameleon colored in colour $b$ moving to the right, the chameleon moving to the left before the collision takes the color of the chameleon moving to the right before the collision (so, color $b$), while the chameleon moving to the right before the collision takes a new color $(a + b) \\bmod K$.\nIf you are given the initial positions, colors and directions of movement of all the chameleons, for each color determine the total trip taken by the chameleons in that color before getting off the stick.\n-----Input-----\nThe first line of input contains the integers $N$, $K$ and $L$ ($1 \\leq N \\leq 100000$, $1 \\leq K \\leq 40$, $1 \\leq L \\leq 1000000$) from the task. The $i$-th of the following $N$ lines contains the integer $d_ i$ ($0 \\leq d_ i \\leq L$) that denotes the distance between the $i$-th chameleon and the left end of the stick, then the integer $b_ i$ ($0 \\leq b_ i \\leq K - 1$) that denotes the color of the $i$-th chameleon and the character \u2018L\u2019 (left) or \u2018D\u2019 (right) that denote the direction of movement of the $i$-th chameleon. All integers $d_ i$ will be unique and given in strictly ascending order.\n-----Output-----\nThe output must contain $K$ lines, the $i$-th line containing the total trip taken by the chameleons in color $i$.\n-----Examples-----\nSample Input 1:\n2 3 10\n0 0 D\n10 1 L\nSample Output 1:\n10.0\n10.0\n0.0\nSample Input 2:\n4 3 7\n1 0 D\n3 0 D\n4 1 L\n6 2 D\nSample Output 2:\n10.0\n4.0\n1.0\n\ndef",
        "answer": "def main():\n    N, K, L = map(int, raw_input().split())\n    d = map(int, raw_input().split())\n    b = map(int, raw_input().split())\n    d = sorted(d)\n    b = sorted(b)\n    d_sum = 0\n    b_sum = 0\n    for i in range(N):\n        if d[i] < L:\n            d_sum += d[i]\n        else:\n            d_sum += L\n        if b[i] < K:\n            b_sum += b[i]\n        else:\n            b_sum += K\n    print d_sum\n    print b_sum",
        "difficulty": "competition"
    },
    {
        "task_id": 3208,
        "prompt": "Complete the Python function given the prompt below:Rookie Pirate Captain Jack Albatross has secretly laid anchor in a hidden bay not far from Port Wine, the local meeting point for grizzled pirates and denizens of the sea. Disguising as a messenger, you have infiltrated the service of the dreaded legendary Captain Stevie, and you are entrusted with carrying small encrypted messages between Captain Stevie and his staff of shipmates. Your task is to break the encryption of the messages in aid of young Captain Albatross, giving him a much needed edge in his quest for peg-legged fame. Fortunately, you (in contrast to Captain Albatross) have been around for a while and you\u2019ve come to know what words to expect in written pirate messages. The following is a table of words having common occurrences:\n\u201cbe\u201d\n\u201cour\u201d\n\u201crum\u201d\n\u201cwill\u201d\n\u201cdead\u201d\n\u201chook\u201d\n\u201cship\u201d\n\u201cblood\u201d\n\u201csable\u201d\n\u201cavenge\u201d\n\u201cparrot\u201d\n\u201ccaptain\u201d\nIn a (mixed alphabet) substitution cipher, each letter of the plain text is replaced with another, in this case arbitrary but unique, letter from the alphabet. Given a text encrypted with a substitution cipher and the given set of the twelve known words above, your task is to decode the encrypted text and provide us and Captain Albatross with the plain text. This can be accomplished if and only if there is a unique substitution mapping from the encrypted letters to plain text letters such that\n - a subset $S$ of the twelve words show up in the plain text, and\n - the number of different letters in the words in $S$ is equal to the number of different letters in the encrypted text.\nNote that not all the known words may be present in the plain text and that replacements are not mutual (\u2019a\u2019 being encrypted by \u2019h\u2019 does not necessarily mean that \u2019h\u2019 is encrypted by \u2019a\u2019).\n-----Input-----\nThe input contains the encrypted text on one line. The text contains at most 200 characters from the set \u2019a\u2019, \u2026, \u2019z\u2019, \u2019 \u2019. Only the letters \u2019a\u2019, \u2026, \u2019z\u2019 of the plain text are encrypted, the spaces are kept unencrypted.\n-----Output-----\nThe decrypted plain text if possible, or the string \u201cImpossible\u201d if the text cannot be uniquely decrypted using the set of known words.\n-----Examples-----\nSample Input 1:\nex eoii jpxbmx cvz uxju sjzzcn jzz\nSample Output 1:\nwe will avenge our dead parrot arr\nSample Input 2:\nwl jkd\nSample Output 2:\nImpossible\n\ndef",
        "answer": "def decrypt(cipher):\n    # your code here\n    return cipher",
        "difficulty": "competition"
    },
    {
        "task_id": 3209,
        "prompt": "Complete the Python function given the prompt below:Last year, some of the judges tried to travel to NWERC\u201910 by train. This turned into a big disaster: on the way there, a fire in a control room caused huge delays, while on the return trip, trains in Bremen were delayed due to a terrorist threat in Hamburg. Of course, these huge delays caused other delays in the train schedule, so the big question was which trains to take: would it be better to take this slow regional train now, or wait for that intercity train, which has a big chance of being delayed?\nThis year, the judges have planned ahead and carefully analyzed the train schedule. They even kept track of how often trains were delayed and by how much. Now that they have all this information, they want to travel as quickly possible, minimizing the expected duration of the journey. Can you help them?\nFor each train connection, the judges know exactly what its scheduled departure time and duration are, as well as the probability that its arrival at the destination will be delayed. You may assume that the probabilities of delays are independent and that the judges can adapt their itinerary as they go, depending on any delays which they might already have incurred. Trains always depart on time, but may arrive late and the judges do not know whether a train\u2019s arrival will be delayed until they have boarded it. It takes judges no time to switch trains, so they can take a connecting train that departs at the same time as they arrive at a place.\nThe judges can choose the time of their initial departure as they wish and they want to minimize the expected duration1 of their total trip.\n-----Input-----\n - one line with the judges\u2019 place of origin and destination, these are different.\n - one line with an integer $n$ ($1 \\leq n \\leq 1000$): the number of train connections.\n - $n$ lines, each describing a train connection:\n - the origin and destination of this connection, these are different.\n - an integer $m$ ($0\\leq m\\leq 59$), the departure time in minutes after each full hour.\n - an integer $t$ ($1\\leq t\\leq 300$), the standard journey time (assuming no delays).\n - an integer $p$ ($0\\leq p\\leq 100$), the probability of delays as a percentage.\n - an integer $d$ ($1\\leq d\\leq 120$), the maximum delay in minutes.\nAll place names are given as strings of upper and lower case alphabetical characters, of length at most 20. If a train is delayed, then the length of the delay will be a whole number of minutes, and will be uniformly distributed in the range $[1,d]$.\n-----Output-----\nOutput a floating point number: the minimum expected duration of the total trip in minutes. This number should be accurate up to $10^{-6}$ relative or absolute precision. Output IMPOSSIBLE instead if the destination is not reachable.\n-----Examples-----\nSample Input 1:\nHamburg Bremen\n3\nHamburg Bremen 15 68 10 5\nHamburg Bremen 46 55 50 60\nBremen Frankfurt 14 226 10 120\nSample Output 1:\n68.3\nSample Input 2:\nAmsterdam Rotterdam\n1\nAmsterdam Utrecht 10 22 5 10\nSample Output 2:\nIMPOSSIBLE\n\ndef",
        "answer": "def nwerc10():\n    # your code here\n    return",
        "difficulty": "competition"
    },
    {
        "task_id": 3210,
        "prompt": "Complete the Python function given the prompt below:Alice and Bob are playing Dots and Boxes. The game is played on an $N\\times N$ square lattice of dots, and they alternate drawing a line segment between horizontally or vertically adjacent dots that haven\u2019t been connected before. Every time a unit square is formed by four line segments, the player who put down the last segment scores one point for that square. The game ends when the square lattice has been completely filled with line segments, and whoever scored the most points wins.\nAlice and Bob aren\u2019t really in a competitive mood today, so they\u2019ve just been playing for fun. Hence they aren\u2019t following any specific game strategy, and, in particular, even if it\u2019s possible to make a move that scores a point or is clearly superior in some way, they won\u2019t necessarily make that move. But now they\u2019ve been playing for a while and neither of them has scored a single point. If neither of them scores a point pretty soon, they may get bored. Given the current state of the game, how many moves could be made, in the worst case, before either Alice or Bob is guaranteed to have scored a point?\n-----Input-----\nInput starts with a line containing an integer $N$ ($2 \\leq N \\leq 80$), the size of the square lattice. Then follows an ASCII representation of the current state of the game, $2N-1$ rows high and $2N-1$ columns wide, listed in row-major order. There are cells of four types ($1 \\leq i,j \\leq N$):\n - Cell $(2i-1,2j-1)$ is \u2018*\u2019, representing dot $(i,j)$.\n - Cell $(2i,2j)$ is \u2018.\u2019, representing empty space.\n - Cell $(2i,2j-1)$ is \u2018|\u2019 if dots $(i,j)$ and $(i+1,j)$ have been connected by a line segment, and \u2018.\u2019 otherwise.\n - Cell $(2i-1,2j)$ is \u2018-\u2019 if dots $(i,j)$ and $(i,j+1)$ have been connected by a line segment, and \u2018.\u2019 otherwise.\nIt is guaranteed that no player has scored a point, meaning that no unit squares have been formed.\n-----Output-----\nOutput the number of moves that can be made, in the worst case, before either Alice or Bob is guaranteed to have scored a point.\n-----Examples-----\nSample Input 1:\n3\n*-*.*\n|.|.|\n*.*-*\n|...|\n*.*.*\nSample Output 1:\n3\nSample Input 2:\n2\n*.*\n...\n*.*\nSample Output 2:\n4\n\ndef",
        "answer": "def solve(n):\n    return n*n",
        "difficulty": "competition"
    },
    {
        "task_id": 3211,
        "prompt": "Complete the Python function given the prompt below:In the country of Elecuador, a very strange voting system is used. When it is time for the election, each one of the $n$ citizens will arrive in some order to the voting station. There are only two parties to vote for, conveniently named $1$ and $2$. When arriving to the voting station, a person will vote for one of the parties, unless they are a teller. The tellers do not vote, instead they count how many votes each of the two parties has at the time the teller arrives, and if one of the parties has more votes than the other then that party receives one point (if the two parties have the same number of votes, neither of them receives a point). The party with the most points at the end wins. If both parties end up with the same number of points, chaos ensues.\nAs the president of Elecuador representing party $1$, you are worried that the coming election will be the end of your reign. Fortunately, you have a plan to stop this from happening. Being the president, you know who everyone in the country will vote for, who the tellers are, and in what order everyone will arrive to the voting station. By making the right phone calls, you can also affect when the tellers arrive. In one move, it is possible to swap a teller with an adjacent person in the list of arrivals to the voting station. Note that it is not possible to swap two adjacent non-tellers. What is the minimum number of swaps necessary to ensure that party $1$ wins?\n-----Input-----\nThe input starts with a line containing an integer $n$ $n$ ($1 \\le n \\le 5000$), the number of citizens in Elecuador. Then follows a line containing a string $s$ of length $n$, consisting of the characters $0$, $1$, and $2$. This string represents the citizens in the order they arrive to the voting station. If the $i$\u2019th character $s_ i$ is $1$ or $2$, it means that the $i$\u2019th citizen will vote for party $1$ or $2$, respectively. If $s_ i$ is $0$, it means that the $i$\u2019th citizen is a teller.\n-----Output-----\nIf it is possible to ensure victory, output one integer, the minimum number of swaps necessary. Otherwise, output \u201cimpossible\u201d.\n-----Examples-----\nSample Input 1:\n8\n12210020\nSample Output 1:\n4\nSample Input 2:\n4\n1111\nSample Output 2:\nimpossible\n\ndef",
        "answer": "def solve(n, s):\n    swaps = 0\n    for i in range(n):\n        if s[i] == '1':\n            if i == 0:\n                if s[i+1] == '1':\n                    swaps += 1\n            elif i == n-1:\n                if s[i-1] == '1':\n                    swaps += 1\n            else:\n                if s[i-1] == '1' and s[i+1] == '1':\n                    swaps += 1\n    if swaps > 0:\n        return 'impossible'\n    else:\n        return swaps",
        "difficulty": "competition"
    },
    {
        "task_id": 3212,
        "prompt": "Complete the Python function given the prompt below:Buffalo Bill wishes to cross a $1000 \\times 1000$ square field. A number of snakes are on the field at various positions, and each snake can strike a particular distance in any direction. Can Bill make the trip without being bitten?\nAssume that the southwest corner of the field is at $(0,0)$ and the northwest corner at $(0,1000)$. Bill must enter the field somewhere between the southwest and northwest corner and must leave somewhere between the southeast and northeast corners.\n-----Input-----\nThe input consists of a line containing $0 \\le n \\le 1000$, the number of snakes. A line follows for each snake, containing three integers: the $(x,y)$ location of the snake ($0 \\le x, y \\le 1000$) and its strike distance $1 \\le d \\le 1000$. The snake will bite anything that passes strictly closer than this distance from its location.\n-----Output-----\nIf Bill can complete the trip, give coordinates with exactly two decimal digits at which he may enter and leave the field. Use the format shown in the sample input. If Bill may enter and leave at several places, give the most northerly. If there is no such pair of positions, print \u201cBill will be bitten.\u201d\n-----Examples-----\nSample Input 1:\n3\n500 500 499\n0 0 999\n1000 1000 200\nSample Output 1:\nBill enters at (0.00, 1000.00) and leaves at (1000.00, 800.00).\nSample Input 2:\n4\n250 250 300\n750 250 300\n250 750 300\n750 750 300\nSample Output 2:\nBill will be bitten.\n\ndef",
        "answer": "def snakes(n):\n    snakes = []\n    for i in range(n):\n        x, y, d = map(int, raw_input().split())\n        snakes.append((x, y, d))\n    return snakes",
        "difficulty": "competition"
    },
    {
        "task_id": 3213,
        "prompt": "Complete the Python function given the prompt below:Sweet Apple Acres has been infested by evil fruit-hungry bats! The Apple family has called for Twilight Sparkle\u2019s help to get rid of them.\nTwilight needs to use a powerful spell to eliminate the threat the bats pose. Poring through the volumes of magic books, she found an ancient spell by the legendary Star Swirl the Bearded that, if executed, can increase her power enough to drive the bats out.\nThis spell has $M$ steps, which must be performed in order. Each step is either:\n - a + step, which adds $1$ to the power of the caster, or\n - a x step, which multiplies the power of the caster by $2$.\nTwilight starts with power $1$.\nUnfortunately, since Twilight is not very strong, the power that she can actually discharge is limited by her strength $S$. If she has power $p$, the amount of power she can discharge is equal to the remainder after dividing $p$ by $2^S$.\nIt is therefore clear that the amount of power she has is not necessarily equal to the amount of power she can actually discharge. She wants to maximize the amount of power she can discharge; to this end, she realized that she can transform some\u2014possibly none, possibly all\u2014of the steps in the spell into no-op o steps, which do not affect her power.\nWhich steps should she turn into no-op steps to maximize the amount of power she can discharge?\n-----Input-----\nThe first line of input contains two integers, $M$ ($1 \\leq M \\leq 10^6$) and $S$ ($1 \\leq S \\leq 10^9$), the number of steps in the spells and Twilight\u2019s strength.\nThe second line of input contains a string of $M$ characters. In particular, the $i^\\text {th}$ of these characters is either + or x, the type of the $i^\\text {th}$ step.\n-----Output-----\nOutput on a line by itself the same string with some\u2014possibly none, possibly all\u2014of the characters replaced with o, representing a way of replacing some steps with no-ops that maximizes the amount of power she can discharge.\nIf there are multiple correct answers, you can output any of them.\n-----Examples-----\nSample Input 1:\n8 3\n++xx+x++\nSample Output 1:\n++xx+o++\nSample Input 2:\n8 3\nxxxxxxxx\nSample Output 2:\nxxoooooo\n\ndef",
        "answer": "def spell(spell_steps, power):\n    for i in range(len(spell_steps)):\n        if spell_steps[i] == '+':\n            power += 1\n        elif spell_steps[i] == 'x':\n            power *= 2\n    return power",
        "difficulty": "competition"
    },
    {
        "task_id": 3214,
        "prompt": "Complete the Python function given the prompt below:Better Documents Inc.\u00a0is contemplating the next generation of word processors. Now, nearly every word processor includes a Spell Checker. BDI, however, is looking forward to replacing that with a true Typo Checker. We\u2019ve all been caught, after relying on a spell checker, by typing mistakes (\u201ctypos\u201d) that just happen to wind up as a correctly spelled word, just not the word we intended. BDI hopes to use AI to determine when a word\u2019s context suggests that it is out of place and probably should have been a different, but similarly spelled, word.\nAs a first step in this process, they want to see how common such similar words really are in ordinary text. Write a program to read in paragraphs of text and to produce a list of similarly spelled words occurring in that text.\nFor the purpose of this program, a word is any maximal string of non-whitespace characters containing at least one alphabetic character. Whitespace can be either blanks or line terminators (\u201c\\r\u201d or \u201c\\n\u201d). The core of a word is what you have left after removing any non-alphabetic characters and replacing any upper-case alphabetic characters to their lower-case equivalents.\nTwo words are considered to be similarly spelled if the core of one word can be converted to the core of the other word by a single application of any one of the following transformations:\n - Delete a single character.\n - Insert a single alphabetic character.\n - Replace a single character by a different alphabetic character.\n - Transpose (exchange) any two adjacent characters.\n-----Input-----\nInput consists of $1$ to $100$ lines of text, followed by an end of input marker in the form of a line containing only the string \u201c***\u201d.\nEach line of text will contain $0$ to $80$ ASCII characters (not counting line terminators).\n-----Output-----\nFor each word core in the text that has one or more similarly spelled words, print a line consisting of\n - That word core\n - A colon (\u201c:\u201d) followed by a blank\n - A list of all similarly spelled word cores (with no duplicates and not containing the core to the left of the colons), in alphabetic order, separated by single spaces.\nThe lines printed should be in alphabetic order of the word cores to the left of the colon.\nIf there are no similarly spelled words in the input, print a single line containing the string \u201c***\u201d.\n-----Examples-----\nSample Input 1:\nLost is Close to Lose\n\"Better Documents Inc. wants to add Typo Checking in to the\nnext generation of word processors,\" he said.\n***\nSample Output 1:\nclose: lose\nhe: the\nin: inc is\ninc: in\nis: in\nlose: close lost\nlost: lose\nthe: he\nSample Input 2:\nThe fox said, \"When?\"\n\"Not till 12 o'clock\", replied the hen.\n\"That clock is stopped, it will never strike.\", he said.\n***\nSample Output 2:\nclock: oclock\nhe: hen the\nhen: he when\nis: it\nit: is\noclock: clock\nthe: he\ntill: will\nwhen: hen\nwill: till\n\ndef",
        "answer": "def find_similar_words(text):\n    words = text.split()\n    similar_words = []\n    for word in words:\n        if word not in similar_words:\n            similar_words.append(word)\n    return similar_words",
        "difficulty": "competition"
    },
    {
        "task_id": 3215,
        "prompt": "Complete the Python function given the prompt below:The most common technique for shuffling a deck of cards is called the Riffle or Dovetail shuffle. The deck is split into two stacks, which are then interleaved with each other. The deck can be split anywhere, and the two stacks can be interleaved in any way.\nFor example, consider a deck with 10 unique cards:\n1 2 3 4 5 6 7 8 9 10\nSplit them somewhere\n1 2 3 4 5 6\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a07 8 9 10\u00a0\u00a0\nAnd interleave them in some way:\n1 2\u00a0\u00a0 \u00a07\u00a0\u00a0 3\u00a0\u00a0 8 9\u00a0\u00a0 \u00a04 5\u00a0\u00a0 10\u00a0\u00a0 6\u00a0\u00a0\nDo it again. Split them somewhere:\n1 2 7\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0 3 8 9 4 5 10 6\u00a0\u00a0\nAnd interleave them in some way:\n3 8\u00a0\u00a0 \u00a01\u00a0\u00a0 9 4 5\u00a0\u00a0 \u00a02 7\u00a0\u00a0 10 6\u00a0\u00a0\nThis is one possible ordering after $2$ shuffles. Suppose there are $n$ unique cards, and that they start out perfectly ordered: $1, 2, 3,..., n$. Given an ordering of the deck, what is the smallest number of shuffles that could possibly put the deck in that order?\n-----Input-----\nEach input will consist of a single test case. Note that your program may be run multiple times on different inputs. Each test case will begin with a single integer $n$ ($1 \\le n \\le 1000000$) indicating the number of cards in the deck. On the next line will be $n$ unique integers $c$ ($1 \\le c \\le n$), with a single space between them, indicating an ordering of the $n$ cards. The values $c$ are guaranteed to be a permutation of the numbers $1 \\ldots n$.\n-----Output-----\nOutput a single line with a single integer indicating the minimum number of shuffles that could possibly put the deck in the given order.\n-----Examples-----\nSample Input 1:\n10\n1 2 7 3 8 9 4 5 10 6\nSample Output 1:\n1\nSample Input 2:\n10\n3 8 1 9 4 5 2 7 10 6\nSample Output 2:\n2\n\ndef",
        "answer": "def riffle_dovetail_shuffle(deck):\n    # Write your code here\n    pass",
        "difficulty": "competition"
    },
    {
        "task_id": 3216,
        "prompt": "Complete the Python function given the prompt below:Every (positive) rational number can be expressed as a ratio of two (positive) integers. However, in decimal form, rational numbers often have an infinitely repeating pattern, e.g., $1/7 = 0.142857142857142857$... A convenient way of writing this repeating pattern is to put a bar over the first occurrence of the repeating part, so $1/7$ would be written:\\[ 0.\\overline{142857}. \\]\nGiven a rational number consisting of a series of digits, followed by a decimal point, followed by more digits, and then a number indicating how many of the rightmost digits repeat (i.e., the number of digits under the bar), your task is to find the ratio of two integers, in the most reduced form, that represent the same rational number. For example, for the input \u201c$0.142857$ $6$\u201d you should find $1/7$.\n-----Input-----\nThe input will be a single line with two numbers separated by one space. The first number will consist of $1$ to $3$ digits ($0$\u2013$9$), followed by a decimal point, followed by $1$ to $11$ digits ($0$\u2013$9$), representing the decimal form of the number, possibly with leading zeros. The second number will be a positive integer indicating how many of the rightmost digits of the preceding number repeat. The first number will always be greater than $0$. The second number will never be less than $1$ nor larger than the number of digits to the right of the decimal point.\n-----Output-----\nPrint the corresponding fraction in its most reduced form, that is, the fraction with the smallest possible integer values in the numerator and denominator.\n-----Examples-----\nSample Input 1:\n0.142857 6\nSample Output 1:\n1/7\nSample Input 2:\n1.6 1\nSample Output 2:\n5/3\n\ndef",
        "answer": "def fraction(n, d):\n    if n == 0:\n        return 0\n    if n < d:\n        return -1\n    if n % d == 0:\n        return n / d\n    return fraction(n, d + 1)",
        "difficulty": "competition"
    },
    {
        "task_id": 3217,
        "prompt": "Complete the Python function given the prompt below:A $10 \\times 10 \\times 10$ three-dimensional grid of tightly packed cubic atomic energy cells aboard the starship Fiugtuwf is reporting failures on several of its cells. The ship\u2019s engineer must set up enclosures that will contain all of the cells that are reported to be failing, in order to avoid a meltdown. It is imperative that the enclosures be finished in the shortest amount of time, even if that requires some healthy cells to be enclosed along with the defective ones. The enclosures are formed by square panels which fit perfectly between adjacent cells, or can be placed along the sides of the cells on the edges of the grid. Each panel is exactly the size and shape of a face of one of the cubic cells. For full containment, each enclosure must be completely closed. Given the coordinates of each defective cell, report the minimum number of panels required to contain the problem.\n-----Input-----\nEach input will consist of a single test case. Note that your program may be run multiple times on different inputs. Each test case will start with a line with a single integer $n$ ($0 \\le n \\le 1000$) indicating the number of defective cells. Each of the next $n$ lines will hold an $(x,y,z)$ coordinate ($0 \\le x,y,z \\le 9$) indicating the location in the grid of a defective cell. All of the coordinates in a test case will be unique.\n-----Output-----\nOutput a single line with a single integer, indicating the minimum number of panels required to contain the defective cells.\n-----Examples-----\nSample Input 1:\n1\n0 0 0\nSample Output 1:\n6\nSample Input 2:\n2\n0 0 0\n0 0 1\nSample Output 2:\n10\n\ndef",
        "answer": "def solution(n, x, y, z):\n    return 0",
        "difficulty": "competition"
    },
    {
        "task_id": 3218,
        "prompt": "Complete the Python function given the prompt below:You are given a hexagonal grid with $n$ rows, where $n$ is an odd integer. The rows are numbered $1$ to $n$ from top to bottom. The odd-numbered rows have exactly $n$ hexagons, and the even-numbered rows have exactly $n-1$ hexagons. Let\u2019s denote the $j$-th hexagon in the $i$-th row by $(i, j)$.\nFor example, the below figure shows a hexagonal grid with $n = 3$.\nLet\u2019s assign an integer between $-1$ and $6$ to each hexagon. Let\u2019s $a_{i, j}$ be the integer assigned to the hexagon $(i, j)$. The following figure shows one example assignment:\nLet\u2019s color some edges of some hexagons. A coloring is valid iff it satisfies the following conditions:\n - For every pair of valid indices $i$ and $j$, either $a_{i, j} = -1$, or $a_{i, j}$ is equal to the number of colored edges of the hexagon $(i, j)$.\n - The colored edges form one or more loops. Each loop must not self-intersect. Two different loops must not share any vertices or edges.\nThe following figure shows a valid coloring:\nThe following two figures show two invalid colorings. The one on the left does not satisfy the $1$st condition, and the one on the right does not satisfy the $2$nd condition.\nHow many valid colorings are there?\n-----Input-----\nThe first line of the input contains a single integer $n$ ($n$ is an odd integer between $1$ and $7$). The next $n$ lines contain the numbers $a_{i, j}$ $(-1 \\le a_{i, j} \\le 6)$. The $i$-th line contains exactly $n$ integers if $i$ is odd, and $n-1$ integers otherwise.\n-----Output-----\nPrint a single integer\u00a0\u2014 the number of valid colorings.\n-----Explanation of the sample input-----\nThe first sample was shown in the above figures.\nThe second example is shown below:\n-----Examples-----\nSample Input 1:\n3\n-1 2 -1\n2 2\n1 -1 1\nSample Output 1:\n1\nSample Input 2:\n7\n-1 4 5 1 0 -1 -1\n-1 3 2 0 0 1\n-1 4 -1 1 0 -1 -1\n1 3 4 2 2 4\n0 2 3 -1 4 4 2\n-1 4 4 3 3 2\n1 -1 -1 -1 4 2 -1\nSample Output 2:\n1\n\ndef",
        "answer": "def valid_colorings(n):\n    # your code here\n    return 0",
        "difficulty": "competition"
    },
    {
        "task_id": 3219,
        "prompt": "Complete the Python function given the prompt below:As you might know, the memory in current computers consists of a sequence of bits and each of these bits can be in two possible states. Megan\u2019s company has now developed a great new memory unit where every bit has three possible states. This would all be great, if it wasn\u2019t for Megan\u2019s boss. The boss wants her to write a program for this memory unit for integer operations, but instead of using ternary base (i.e., base 3), Megan\u2019s boss decided that the bits should be interpreted as a binary number, with the exception that the digit 2 is allowed as well. \nFor example, $201$ in this strange representation is $2\\cdot 2^2+0\\cdot 2^1+ 1\\cdot 2^0=9$. Some numbers are shorter in this representation, but for other numbers it doesn\u2019t help at all \u2013 for instance, $15$ is $1111$ in binary and this is the only way of writing it in the new representation as well.\nIt seems that there is nothing else that Megan can do to convince her boss. Since she likes math, she started wondering about different representations of the same number. For example 9 has three representations: $201, 121$ and $1001$. Can you help her figure out how many representations a given number has?\n-----Input-----\nThe first and only line of the input contains a string consisting of \u20190\u2019 and \u20191\u2019. The string represents a non-negative integer $N$ in binary. The leftmost bit is the most significant one. The number of bits will be at least $1$ and at most $10000$.\n-----Output-----\nOutput a line giving the number of different binary representations of $N$ that also use $2$ as a digit. Since this number might be big, output the remainder modulo $1000000009$.\n-----Examples-----\nSample Input 1:\n1001\nSample Output 1:\n3\nSample Input 2:\n1111\nSample Output 2:\n1\n\ndef",
        "answer": "def countBinaryRep(n):\n    count = 0\n    while n:\n        if n & 1:\n            count += 1\n        n >>= 1\n    return count",
        "difficulty": "competition"
    },
    {
        "task_id": 3220,
        "prompt": "Complete the Python function given the prompt below:In the USA, a type of dance called square dance is very popular. Four dancing pairs stand as to form a square. A caller then gives a series of moves that the dancers should perform, moving around on the floor.\nAmerican wizards, however, find square dancing a bit simplistic. Instead, they have come up with a kind of dance called circle dancing. In the dance, $N$ wizards stand in a circle numbered $1$ through $N$ clockwise. A caller then gives a series of moves that the dancers should perform, moving around on the floor. Each such move has the following form. Every wizard is given a number $p_ i$. They then all teleport simultaneously $p_ i$ positions clockwise or counterclockwise in the ring. For example, given the number 1 they should move to one of the two places immediately adjacent to their current position.\nAfter a move is performed, no two wizards may occupy the same position. This means a certain amount of coordination is required when teleporting. Can you tell the wizards how they should teleport in order to not collide with each other?\n-----Input-----\nThe first line of input contains a single integer $N$ ($1 \\le N \\le 300000$), the number of wizards. The next line contains the $N$ integers $p_1, p_2, \\dots, p_ N$ ($0 \\le p_ i < N$). The wizards are numbered $1, 2, \\dots, N$ clockwise in the circle.\n-----Output-----\nOutput a string with $N$ characters. The $i$\u2019th character should be L if the $i$\u2019th wizard should teleport clockwise, and R if he should teleport counterclockwise. If there are multiple valid solutions, output the lexicographically smallest one. If there is no valid solution, output no dance.\n-----Examples-----\nSample Input 1:\n3\n1 1 1\nSample Output 1:\nLLL\nSample Input 2:\n5\n1 2 2 1 2\nSample Output 2:\nLLRLR\n\ndef",
        "answer": "def square_dance(N, p):\n    # Write your code here\n    pass",
        "difficulty": "competition"
    },
    {
        "task_id": 3221,
        "prompt": "Complete the Python function given the prompt below:Mr. G is one of the most excellent students in North River High School for Gifted Students. Despite having impressive performance in a programming competition and making it to the next round, he was not totally happy since his best friend did not get such a great achievement. In order to appease the poor girl, Mr. G has to deal with a very hard challenge: Buy her some ginger candies!\nThe road system in North River province consists of $N$ junctions and $M$ bidirectional roads. Junctions are numbered from $1$ to $N$, and roads are numbered from $1$ to $M$, inclusive. On the $i^{th}$ road, which connects two junctions $u_ i$ and $v_ i$, there is a shop in which Mr. G can buy $c_ i$ ginger candies. No two roads have the same number of candies. Mr. G wants to meet his friend at some junction, travel through several roads without visiting the same road twice, buy all candies on those roads, and finish at the same junction where he starts.\nUsing his humble knowledge in Physics, Mr. G calculates the amount of energy he needs to spend as follow: Let $L$ be the maximum number of candies he buys in one road, and $K$ be the number of roads he passes through. The amount of energy he needs to spend is $L^2+\\alpha K$, where $\\alpha $ is some constant he has already known.\nHelp him to satisfy his friend with the minimum amount of energy.\n-----Input-----\n - The first line contains three integers $N$, $M$, $\\alpha $, the number of junctions, the number of roads and the predefined constant Mr. G uses to calculate the amount of energy, respectively ($1 \\leq N \\leq 10^5$, $1 \\leq M \\leq 2 \\times 10^5$, $1 \\leq \\alpha \\leq 20$).\n - In the next $M$ lines, each contains three integers $u$, $v$, $c$ ($1 \\leq u \\leq N$, $1 \\leq v \\leq N$, $10^6 \\leq c \\leq 10^9$), meaning that there is a road connecting two junctions $u$ and $v$, which sells $c$ ginger candies.\nIt is guaranteed that all $c$ in the above $M$ lines are distinct.\n-----Output-----\nWrite one integer denoting the minimum amount of energy Mr. G has to spend. If there is no route satisfying the condition, output Poor girl instead.\n-----Examples-----\nSample Input 1:\n7 7 10\n1 2 1000000\n2 3 2000000\n3 4 3000000\n4 5 4000000\n5 6 5000000\n6 7 6000000\n7 1 7000000\nSample Output 1:\n49000000000070\nSample Input 2:\n6 6 7\n1 3 1000000\n3 5 3000000\n5 1 5000000\n2 4 2000000\n4 6 4000000\n6 2 6000000\nSample Output 2:\n25000000000021\n\ndef",
        "answer": "def solution(N, M, alpha):\n    # Write your code here",
        "difficulty": "competition"
    },
    {
        "task_id": 3222,
        "prompt": "Complete the Python function given the prompt below:Emil loves his electric moped. He loves it so much that he rides it through rain, snow, wind and ice. Some day, he will be able to fly with it. This weekend, Emil is on a vacation in New York. He has compiled a list of cool places to visit, as well as a list of all one-way streets between these places, and now it is time for some sightseeing! \nOne sightseeing trip consists of $S$ places and exactly $S$ streets which connect them. He starts by travelling to one of these places by subway, with his moped on his back. Then he starts riding his moped to each place of the trip in turn, finally returning to where he started in the current trip. Then he goes back to the subway, with his moped on his back, and goes for the next trip. He does this until he has enjoyed all of the trips.\nSince it\u2019s very hard to determine if Emil can visit all of the places he wants to see in a single trip of this kind, he has instead asked you to help him split all of the $N$ places in town into a number of trips, such that each place in town is included in exactly one trip.\nGiven all the places Emil wants to see and the streets of the city connecting these, construct a list of trips fulfilling these conditions, or determine that it is impossible. Each trip must use at least one street, and there may be loops, i.e. streets with a start and end point in the same place.\n-----Input-----\nThe first line of input consists of two integers $1\\le N \\le 100$ and $0 \\le M \\le 10000$, the number of places Emil wants to visit and the number of roads respectively. The places are numbered $0$ to $N-1$.\nThe next $M$ lines consists of two integers $0 \\le f, t \\le N-1$, denoting that there is a one-way street from place $f$ to place $t$.\n-----Output-----\nOutput begins with an integer $N$ on its own line, the number of trips made. Then, for every trip, output a line with the number of places included in the trip $K$, followed by $K$ lines, containing the numbers of said places in order of visit (the last place which Emil returns to should not be output twice).\nIf the places can\u2019t be split into trips, Emil instead goes bowling. Then just output the string \"Yeah!\". If there are several solutions, output any of them.\n-----Examples-----\nSample Input 1:\n4 4\n0 1\n1 0\n2 3\n3 2\nSample Output 1:\n2\n2\n0\n1\n2\n2\n3\nSample Input 2:\n4 4\n0 1\n1 0\n2 3\n3 3\nSample Output 2:\nYeah!\n\ndef",
        "answer": "def solve(N, M, places, streets):\n    # Write your code here\n    pass",
        "difficulty": "competition"
    },
    {
        "task_id": 3223,
        "prompt": "Complete the Python function given the prompt below:Anton, a young mathematician, comes from the cold region that is northern Sweden. He likes it there, since there are a lot of trees. Lately, however, this has made him a bit sad, since he can\u2019t see the forest because of all the trees. Therefore, he has asked you to construct a forest.\nSince Anton is a mathematician, he doesn\u2019t want just any forest \u2013 he wants a graph theoretical forest. A forest is a (possibly disconnected) graph without cycles \u2013 i.e., a union of disjoint trees.\nAnton has already decided how many vertices he wants in his forest, as well as the degree of each vertex. Now, it is your task to construct a forest according to his wishes, or determine that no such forest exists.\n-----Input-----\nThe first line of the input is a single integer $0 \\le V \\le 100$, the number of vertices in his forest.\nThe next line contains $V$ integers $d_1, d_2, \\ldots, d_ V$ ($0 \\le d_ i \\le 100$ for all $i$). These are the degrees which Anton wants the vertices to have.\n-----Output-----\nThe first line of output should be IMPOSSIBLE if it is impossible to construct such a forest.\nOtherwise, the first line should be POSSIBLE. The next lines should then contain two integers $1 \\le a, b \\le V$ each, denoting an edge between vertices $a$ and $b$. Note that the vertex with number $a$ must have exactly degree $d_ a$, i.e. the ordering of the vertices is important.\n-----Examples-----\nSample Input 1:\n3\n1 1 2\nSample Output 1:\nPOSSIBLE\n1 3\n2 3\nSample Input 2:\n2\n1 2\nSample Output 2:\nIMPOSSIBLE\n\ndef",
        "answer": "def forest(V, d):\n    if V == 0:\n        return 'IMPOSSIBLE'\n    if V == 1:\n        return 'POSSIBLE'\n    if V == 2:\n        return 'POSSIBLE'\n    if V == 3:\n        return 'POSSIBLE'\n    if V == 4:\n        return 'POSSIBLE'\n    if V == 5:\n        return 'POSSIBLE'\n    if V == 6:\n        return 'POSSIBLE'\n    if V == 7:\n        return 'POSSIBLE'\n    if V == 8:\n        return 'POSSIBLE'\n    if V == 9:\n        return 'POSSIBLE'\n    if V == 10:\n        return 'POSSIBLE'\n    if V == 11:\n        return 'POSSIBLE'\n    if V == 12:\n        return 'POSSIBLE'\n    if V == 13:\n        return 'POSSIBLE'\n    if V == 14:\n        return 'POSSIBLE'\n    if V == 15:\n        return 'POSSIBLE'\n    if V == 16:\n        return 'POSSIBLE'\n    if V == 17:\n        return 'POSSIBLE'\n    if V == 18:\n        return 'POSSIBLE'\n    if V == 19:\n        return 'POSSIBLE'\n    if V == 20:\n        return 'POSSIBLE'\n    if V == 21:\n        return 'POSSIBLE'\n    if V == 22:\n        return 'POSSIBLE'\n    if V == 23:\n        return 'POSSIBLE'\n    if V == 24:\n        return 'POSSIBLE'\n    if V == 25:\n        return 'POSSIBLE'\n    if V == 26:\n        return 'POSSIBLE'\n    if V == 27:\n        return 'POSSIBLE'\n    if V == 28:\n        return 'POSSIBLE'\n    if V == 29:\n        return 'POSSIBLE'\n    if V == 30:\n        return 'POSSIBLE'\n    if V == 31:\n        return 'POSSIBLE'\n    if V == 32:\n        return 'POSS",
        "difficulty": "competition"
    },
    {
        "task_id": 3224,
        "prompt": "Complete the Python function given the prompt below:You are given four points in space (i.e.\u00a0$\\mathbb {R}^3$). The points are not coplanar. In other words, there is no plane in space that contains all four points.\nIt is guaranteed that under such assumption, there exists a (unique) sphere whose surface touches all four points. Find the coordinates of the centre of the sphere.\n-----Input-----\nThe input consists of four lines. Line $i$ consists of three integers $x_ i$, $y_ i$, $z_ i$, representing the coordinates $(x_ i, y_ i, z_ i)$ of point $i$.\nFor all test cases, $-100 \\leq x_ i, y_ i, z_ i \\leq 100$.\n-----Output-----\nOutput three numbers (not necessarily integers) $x_ c$, $y_ c$, $z_ c$, representing the coordinates $(x_ c, y_ c, z_ c)$ of the centre of the sphere that touches all four points.\nLet the jury\u2019s answer be $(x_ j, y_ j, z_ j)$. Your answer will be considered as correct if and only if\\[ \\sqrt {(x_ j - x_ c)^2 + (y_ j - y_ c)^2 + (z_ j - z_ c)^2} < 10^{-4}. \\]\n-----Examples-----\nSample Input 1:\n0 0 0\n1 0 0\n0 1 0\n0 0 1\nSample Output 1:\n0.5 0.5 0.5\nSample Input 2:\n-1 0 0\n1 0 0\n0 1 0\n0 0 1\nSample Output 2:\n0.0 0.0 -0.0\n\ndef",
        "answer": "def solve():\n    x1, y1, z1 = map(int, input().split())\n    x2, y2, z2 = map(int, input().split())\n    x3, y3, z3 = map(int, input().split())\n    x4, y4, z4 = map(int, input().split())\n    x = (x1 + x2 + x3 + x4) / 4\n    y = (y1 + y2 + y3 + y4) / 4\n    z = (z1 + z2 + z3 + z4) / 4\n    print(x, y, z)\nsolve()\n",
        "difficulty": "competition"
    },
    {
        "task_id": 3225,
        "prompt": "Complete the Python function given the prompt below:A very popular position has just opened up at Poodle Inc. Candidates have formed a queue while they wait for their turn to be interviewed.\nCompetition is fierce and each candidate knows that they will not be selected if another candidate is strictly better than them. Every minute, each candidate looks at the resum\u00e9 of candidates who are currently adjacent to them in the queue (ahead and behind). If at least one of the neighbour\u2019s resum\u00e9\u2019s perceived value is strictly greater than their resum\u00e9\u2019s perceived value, they leave the queue since they do not want to waste their time. The candidates all look at their neighbor\u2019s resum\u00e9 simultaneously, and then some candidates leave the queue simultaneously.\nThis process continues until no more candidates leave the queue. Determine the number of minutes that pass while this process takes place. Report the values of the candidates that leave the queue in each round. Also report the final state of the queue.\n-----Input-----\nThe first line of input contains a single integer $N$ ($1 \\leq N \\leq 100000$), which is the number of candidates.\nThe second line contains $N$ integers $v_1, \\ldots, v_ N$ ($0 \\leq v_ i \\leq 10^9$ for each $1 \\leq i \\leq N$), where $v_ i$ is the perceived value of the $i^\\textrm {th}$ candidate.\n-----Output-----\nDisplay $M$, the number of minutes taken by this process. Then display $M$ lines. The $i^\\textrm {th}$ line should contain the perceived values of the candidates who left the queue in the $i^\\textrm {th}$ minute in the same relative order that they appeared in the queue. Finally display a line indicating the final list of perceived values in the queue after candidates no longer leave it.\n-----Examples-----\nSample Input 1:\n10\n3 6 2 3 2 2 2 1 5 6\nSample Output 1:\n2\n3 2 2 1 5\n3 2 2\n6 6\nSample Input 2:\n3\n17 17 17\nSample Output 2:\n0\n17 17 17\n\ndef",
        "answer": "def queue(v):\n    n = len(v)\n    res = [0] * n\n    for i in range(n):\n        res[i] = v[i]\n    for i in range(1, n):\n        for j in range(n - i):\n            if res[j] < res[j + 1]:\n                res[j], res[j + 1] = res[j + 1], res[j]\n    return res",
        "difficulty": "competition"
    },
    {
        "task_id": 3226,
        "prompt": "Complete the Python function given the prompt below:The Newton brothers are planning to rob a bank in the city of Alviso and want to figure out a way to escape the city\u2019s only police car. They know that their car is faster than the police car so if they could just reach one of the highways exiting the city they will be able to speed away from the police.\nThe police car has a maximum speed of 160 km/h. Luckily, the brothers know where the police car will start (it\u2019s parked at the police station). To be on the safe side they assume that the police car will start moving as soon as they leave the bank and start their car (this is when the alarm goes off).\nThe brothers want to find a fixed route that ensures that they are able to leave the city no matter what route the police car take and at what speed it drives. However, since the brothers are not very confident drivers they don\u2019t want to drive faster than necessary. Luckily they have recently invested in a new hi-tech in-car police escape system that you have constructed. This system will tell them what the minimal top speed needed to escape is (and probably other useful things like what route to take).\nLet\u2019s turn the clock back a bit to the time when you were constructing the escape system and focused on finding the minimal required speed. Can you get it right?\nYou may treat all roads as infinitesimally narrow and both cars as point objects. If the brothers ever end up at the same point (on any road or intersection) at the same time as the police car they will be caught and by Murphy\u2019s law if there is any possibility of this happening it will happen. The two cars start simultaneously and can accelerate/decelerate instantaneously at any time to any speed below or equal to its maximum speed. They can also change roads at intersections or direction anywhere on a road instantaneously no matter what speed they are traveling at.\n-----Input-----\nThe first line of the input consists of three integers $n$, $m$ and $e$, where $2 \\le n \\le 100$ describe the number of intersections, $1 \\le m \\le 5000$ describes the number of roads in the city and $1 \\le e \\le n$ describes the number of highway exits. Then follow $m$ lines, each consisting of three integers $a,b,l$ such that $1 \\le a < b \\le n$ and $1 \\le l \\le 100$ describing a road of length $l$ hundred meters from intersection $a$ to intersection $b$. Then follows a line of $e$ integers, each one a number in $1, \\ldots, n$ describing which intersections are connected to highway exits. Finally there is a line with two integers $b$ and $p$ ($1 \\le b,p \\le n \\text { and } b \\neq p$) describing the intersections where the brothers and the police cars start, respectively.\nIt will always be possible to travel from any intersection to any other intersection. Roads are only connected at intersection points (although they may cross using bridges or tunnels at others points). Roads can be used in both directions but there cannot be more than one road between two intersections.\n-----Output-----\nThe minimal speed in km/h required to escape or the word IMPOSSIBLE if it is impossible. In the first case any answer with either absolute or relative error smaller than $10^{-6}$ is acceptable.\n-----Examples-----\nSample Input 1:\n3 2 1\n1 2 7\n2 3 8\n1\n3 2\nSample Output 1:\nIMPOSSIBLE\nSample Input 2:\n3 2 1\n1 2 7\n2 3 8\n1\n2 3\nSample Output 2:\n74.6666666667\n\ndef",
        "answer": "def main():\n    n, m, e = map(int, input().split())\n    roads = [list(map(int, input().split())) for _ in range(m)]\n    exits = list(map(int, input().split()))\n    b, p = map(int, input().split())\n    roads.append([b, p])\n    roads.sort(key=lambda x: x[1])\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[1])\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[1])\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[1])\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[1])\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[1])\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[1])\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[1])\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[1])\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[1])\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[1])\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[1])\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[1])\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[1])\n    roads.sort(key=lambda x: x[0",
        "difficulty": "competition"
    },
    {
        "task_id": 3227,
        "prompt": "Complete the Python function given the prompt below:In Croatia there are $N$ cities connected by $E$ two-way roads. Two large food chains have recently reached an agreement on market sharing. In the middle of each road, exactly one chain will be given rights to build a restaurant.\nTo ensure the market is shared fairly, each city must have at least one restaurant from each chain on the roads connected to that city. However, there are cities with only one road, or no roads at all, and for those cities the above requirement does not apply. Such cities are doomed to visit one chain, or travel a bit further.\nWrite a program that will determine for each road the chain that should build there so that these requirements are met.\n-----Input-----\nThe first line of input contains two integers $N$ and $E$ ($1 \\le N, E \\le 100000$), number of cities and number of roads.\nThe next $E$ lines contain two integers each. Each line describes one road. Integers $A_ i$ and $B_ i$ ($1 \\le A_ i, B_ i \\le N$; $A_ i \\ne B_ i$) denote a road connecting cities $A i$ and $B_ i$.\nThere will never be two or more roads connecting the same pair of cities.\n-----Output-----\nIf there is no way to fairly assign the roads, the first and only line of input should contain \u201c0\u201d.\nOtherwise output exactly $E$ lines, one for each road, in the same order as they were given in the input. The $i^\\text {th}$ line should contain \u201c1\u201d if the first chain has the right to build on this road, or \u201c2\u201d if the second one does.\nNote: if the solution is not unique, you may output any valid solution.\n-----Examples-----\nSample Input 1:\n5 6\n1 2\n2 3\n3 1\n3 4\n1 4\n4 5\nSample Output 1:\n1\n2\n1\n2\n2\n1\nSample Input 2:\n7 7\n1 2\n2 3\n3 1\n4 5\n5 6\n6 7\n7 4\nSample Output 2:\n0\n\ndef",
        "answer": "def fair_sharing(n, e):\n    roads = []\n    for i in range(e):\n        roads.append(list(map(int, input().split())))\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[1])\n    roads.sort(key=lambda x: x[0] - x[1])\n    roads.sort(key=lambda x: x[1] - x[0])\n    roads.sort(key=lambda x: x[0] - x[1])\n    roads.sort(key=lambda x: x[1] - x[0])\n    roads.sort(key=lambda x: x[0] - x[1])\n    roads.sort(key=lambda x: x[1] - x[0])\n    roads.sort(key=lambda x: x[0] - x[1])\n    roads.sort(key=lambda x: x[1] - x[0])\n    roads.sort(key=lambda x: x[0] - x[1])\n    roads.sort(key=lambda x: x[1] - x[0])\n    roads.sort(key=lambda x: x[0] - x[1])\n    roads.sort(key=lambda x: x[1] - x[0])\n    roads.sort(key=lambda x: x[0] - x[1])\n    roads.sort(key=lambda x: x[1] - x[0])\n    roads.sort(key=lambda x: x[0] - x[1])\n    roads.sort(key=lambda x: x[1] - x[0])\n    roads.sort(key=lambda x: x[0] - x[1])\n    roads.sort(key=lambda x: x[1] - x[0])\n    roads.sort(key=lambda x: x[0] - x[1])\n    roads.sort(key=lambda x: x[1] - x[0])\n    roads.sort(key=lambda x: x[0] - x[1])\n    roads.sort(key=lambda x:",
        "difficulty": "competition"
    },
    {
        "task_id": 3228,
        "prompt": "Complete the Python function given the prompt below:The most adventurous part of skiing is the journey onto the mountain-top, between trees and through clouds, and past all sorts of enchanting views.\nNaturally, the skiers at the foot of the lift can hardly wait to take their turns (although they are a little disappointed that the climb will eventually terminate). They all know exactly which times they plan to catch a lift on the tireless rotary machine.\nUnfortunately, there are only so many gondolas available at the start of the day to attach to the track loop. The track loop takes $2 \\cdot T$ minutes to cycle around ($T$ on the way up and then $T$ on the way back down). Given that you can arrange the gondolas on the track however you see fit, what is the minimum summed waiting time of all skiers that you can achieve?\n-----Input-----\n - One line containing three integers:\n - $N$ ($1 \\le N \\le 400$), the number of skiers.\n - $T$ ($1 \\le T \\le 720$), the time to travel from the bottom of the hill to the top in minutes.\n - $G$ ($1 \\le G \\le 400$), the number of available gondola cabs.\n - A further $N$ lines in no particular order, each containing one integer $X$ ($0 \\le X \\le 10^6$) which gives the time when a skier arrives at the foot of the mountain.\n-----Output-----\n - One line containing one integer: the minimum possible sum of all waiting times, where the waiting time for one skier is the time difference between their arrival and departure on the next available gondola (which may be shared with any number of other skiers).\n-----Examples-----\nSample Input 1:\n4 10 2\n0\n15\n30\n45\nSample Output 1:\n10\nSample Input 2:\n4 10 3\n0\n15\n30\n45\nSample Output 2:\n5\n\ndef",
        "answer": "def ski(n, t, g):\n    gondolas = [0] * g\n    for i in range(n):\n        gondolas[i % g] += t\n    return sum(gondolas)",
        "difficulty": "competition"
    },
    {
        "task_id": 3229,
        "prompt": "Complete the Python function given the prompt below:You are participating in a programming contest cup. The cup consists of a series of programming contests, followed by a final at the end of the season for the $15$ top ranked contestants in the cup. With only one contest left to go before the final, you are starting to wonder if your performance in the earlier contests has been good enough to already secure you a spot in the finals. If so, you could succumb to your laziness and skip the last contest.\nThe ranking of the cup works as follows. In each contest, a contestant earns some number of points between $0$ and $101$ (the details of this are described below). Their aggregate score is then defined to be the sum of the four highest scores achieved. For instance if a contestant got $45$, $15$, $32$, $0$, $30$, and $20$ points over $6$ contests, their aggregate score is $45+32+30+20=127$. The rank of a contestant X in the cup is defined to be $1$ plus the number of contestants that have a strictly larger aggregate score than X.\nThe score a contestant earns from a contest is based on the rank they achieve in that contest, according to the following table.\nRank\nPoints\nRank\nPoints\nRank\nPoints\n$1$\n$100$\n$11$\n$24$\n$21$\n$10$\n$2$\n$75$\n$12$\n$22$\n$22$\n$9$\n$3$\n$60$\n$13$\n$20$\n$23$\n$8$\n$4$\n$50$\n$14$\n$18$\n$24$\n$7$\n$5$\n$45$\n$15$\n$16$\n$25$\n$6$\n$6$\n$40$\n$16$\n$15$\n$26$\n$5$\n$7$\n$36$\n$17$\n$14$\n$27$\n$4$\n$8$\n$32$\n$18$\n$13$\n$28$\n$3$\n$9$\n$29$\n$19$\n$12$\n$29$\n$2$\n$10$\n$26$\n$20$\n$11$\n$30$\n$1$\nIf a contestant gets a worse rank than $30$, they get $0$ points. If two or more contestants get the same rank in the contest, they are instead assigned the average points of all the corresponding ranks. This average is always rounded up to the closest integer. For example, if three contestants are tied for second place they all receive $\\lceil \\frac{75 + 60 + 50}{3} \\rceil = 62$ points, and the next contestant will have rank $5$ and receives $45$ points (or less, if there is a tie also for $5$\u2019th place). This applies also at rank $30$, e.g., if $4711$ contestants are tied for $30$\u2019th place, they all receive $1$ point.\nContestants may participate in every contest either on-site or online. If they compete on-site, they get $1$ extra point, no matter their original number of points. If a contestant does not participate in a contest, they get $0$ points.\n-----Input-----\nThe first line of input contains two integers $n$ and $m$ ($2 \\le n \\le 10$, $1 \\le m \\le 10^5$), where $n$ is the number of contests in the cup (excluding the final), and $m$ is the number of people who participated in any of the first $n-1$ contests.\nThen follow $m$ lines, each describing a contestant. Each such line consists of $n-1$ integers $0 \\le s_1, \\ldots, s_{n-1} \\le 101$, where $s_ i$ is the score that this contestant received in the $i$th contest.\nThe first contestant listed is you. The point values in the input might not correspond to actual points from a contest.\n-----Output-----\nOutput a single integer $r$, the worst possible rank you might end up in after the last contest, assuming you do not participate in it.\n-----Examples-----\nSample Input 1:\n4 2\n50 50 75\n25 25 25\nSample Output 1:\n2\nSample Input 2:\n5 2\n50 50 50 50\n25 25 25 25\nSample Output 2:\n1\n\ndef",
        "answer": "def rank_cup(n, m, scores):\n    # Write your code here\n    pass",
        "difficulty": "competition"
    },
    {
        "task_id": 3230,
        "prompt": "Complete the Python function given the prompt below:When it comes to trams, a lot of people are civilized individuals who know how to behave in one. However, there are always those few who upon spotting a place to sit will run towards it in supersonic speeds. If they spot more than one place, they always try the closest one first.\nProblems arise when two or more such individuals aim for the same spot. If one of them is the closest, he or she will sit, and others won\u2019t even attempt to move in and instead turn their attention to the next closest spot. If however they are all equally close, they will all run to the seat resulting in a massive explosion that usually ends with complete destruction of both them and the seat.\nYou are given a description of one tram. It is represented as a table with $R$ rows and $C$ columns. The rude passengers are marked with the letter \u2018X\u2019. Empty seats are marked with \u2018L\u2019 and the tram floor is marked with \u2018.\u2019. Note that although there are other passengers, the force projected by these idiots is more than enough to simply walk through them.\nDistance between two cells is the Euclid distance between their centers. Write a program that will determine the number of explosions which will take place before all people are seated, or destroyed, or they run out of chairs.\n-----Input-----\nThe first line of input contains two integers, $R$ $(1 \\leq R \\leq 100)$ and $C$ $(1 \\leq C \\leq 100)$, number of rows and columns.\nThe next $R$ lines contain $C$ characters each. \u2018.\u2019, \u2018X\u2019 or \u2018L\u2019. There will always be at least one character \u2018X\u2019 and at least one \u2018L\u2019 in the input. Also, there will be no two \u2018L\u2019 characters such that they are both equally distant to some \u2018X\u2019.\n-----Output-----\nThe first and only line of input should contain the number of explosion for the given layout.\n-----Examples-----\nSample Input 1:\n4 4\n.LX.\n.X..\n....\n.L..\nSample Output 1:\n1\nSample Input 2:\n4 4\n.XLX\n.X..\n...L\n.X..\nSample Output 2:\n2\n\ndef",
        "answer": "def solution(R, C, layout):\n    # Write your code here\n    pass",
        "difficulty": "competition"
    },
    {
        "task_id": 3231,
        "prompt": "Complete the Python function given the prompt below:High school is all about being in the coolest group of friends. Headmistress Umbridge knows this, and she also knows that knowledge is power. She has collected data on all of the $n$ students at the school, asking each of them who they are friends with. Now she has a list of responses, but she is suspicious that some of the students might not have been entirely truthful during the questioning.\nFrom anonymous (but highly reliable) sources, Headmistress Umbridge knows that the friendships at her school satisfy the following properties:\n - If $a$ is friends with $b$ then $b$ is also friends with $a$.\n - The set of students can be partitioned into groups, such that every student participates in exactly one group, where\n - each group has at least one and at most $p$ students, and\n - for each group there are at most $q$ pairs of friends with the first one in the group, and the second one outside of it.\nNote that two students in the same group do not have to be friends.\nUmbridge has hired you to figure out whether it is possible that all students are telling the truth, or whether she can be sure that at least one student is lying, and that she therefore should put everyone in detention. Is this morally questionable? Probably.\n(In case the students may be telling the truth, you are worried that her suspicion might fall on you instead; thus you will also want to provide evidence of a valid partition if there is one.)\n-----Input-----\nFirst a single line with three non-negative integers $n$, $p$ and $q$ as described above. Next follow $n$ lines, one for each student, starting with student $i=0$. Each such line starts with an integer $m_ i$, denoting the number of friends student number $i$ claims that she has. Then follow $m_ i$ distinct integers between $0$ and $n-1$, indicating who those friends are (the students are numbered from $0$ to $n-1$).\nWe always have $1 \\leq n \\leq 2500$, and $p + q \\leq 15$. Furthermore, it is guaranteed that $m_0 + m_1 + \\ldots + m_{n-1} \\leq 30000$. A student never lists herself as one of her friends.\n-----Output-----\nIf Dolores can be certain someone did\u2019t tell the truth, output \u201cdetention\u201d. Otherwise, output \u201chome\u201d. If you output home on the first line, then you should prove your claim by outputting a partition of the students into groups such that the requirements above hold (if there are several, any one will do): The second line should then contain a positive integer $G$, the number of groups. The following $G$ lines should each begin with a positive integer $g_ i$, the number of students in the $i$-th group. Then on the same line, $g_ i$ integers indicating the students in this group.\n-----Examples-----\nSample Input 1:\n4 2 1\n1 1\n2 0 2\n2 1 3\n1 2\nSample Output 1:\nhome\n2\n2 0 1\n2 2 3\nSample Input 2:\n5 2 1\n1 1\n2 0 2\n2 1 3\n2 2 4\n1 3\nSample Output 2:\ndetention\n\ndef",
        "answer": "def dolores(n, p, q):\n    if n < 1 or n > 2500 or p + q > 15:\n        return \"home\"\n    if n == 1:\n        return \"detention\"\n    if n == 2:\n        return \"home\"\n    if n == 3:\n        return \"detention\"\n    if n == 4:\n        return \"home\"\n    if n == 5:\n        return \"detention\"\n    if n == 6:\n        return \"home\"\n    if n == 7:\n        return \"detention\"\n    if n == 8:\n        return \"home\"\n    if n == 9:\n        return \"detention\"\n    if n == 10:\n        return \"home\"\n    if n == 11:\n        return \"detention\"\n    if n == 12:\n        return \"home\"\n    if n == 13:\n        return \"detention\"\n    if n == 14:\n        return \"home\"\n    if n == 15:\n        return \"detention\"\n    if n == 16:\n        return \"home\"\n    if n == 17:\n        return \"detention\"\n    if n == 18:\n        return \"home\"\n    if n == 19:\n        return \"detention\"\n    if n == 20:\n        return \"home\"\n    if n == 21:\n        return \"detention\"\n    if n == 22:\n        return \"home\"\n    if n == 23:\n        return \"detention\"\n    if n == 24:\n        return \"home\"\n    if n == 25:\n        return \"detention\"\n    if n == 26:\n        return \"home\"\n    if n == 27:\n        return \"detention\"\n    if n == 28:\n        return \"home\"\n    if n == 29:\n        return \"detention\"\n    if n == 30:\n        return \"home\"\n    if n == 31:\n        return \"detention\"\n    if n == 32:\n        return \"home\"\n    if n == 33:\n        return \"detention\"\n    if n == 34:\n        return \"home\"\n    if n == 35:\n",
        "difficulty": "competition"
    },
    {
        "task_id": 3232,
        "prompt": "Complete the Python function given the prompt below:Consider a string of $N$ letters, where $N$ is an even number. Rearrange the letters such that all $N/2+1$ substrings of length $N/2$ are different.\n-----Input-----\nA single line containing string $S$ of length $N$, where $2 \\leq N \\leq 10^5$ and $N$ is even. The string consists of lower-case letters from the English alphabet, \u201ca\u201d to \u201cz\u201d.\n-----Output-----\nIf possible, print a string of length $N$ that is a rearrangement of the letters in $S$ such that all substrings of length $N/2$ are different. If this is impossible, print $-1$.\nIf there is more than one solution, any one will do.\n-----Explanation of Sample Inputs-----\nIn the first example, the substrings before rearrangement are \u201ctral\u201d, \u201crala\u201d, \u201calal\u201d, \u201clala\u201d, and \u201calal\u201d. Note that \u201calal\u201d appears twice. After the rearrangement, all substrings are different.\nIn the third example, all substrings are different already in the input, so it suffices to print the original string.\n-----Examples-----\nSample Input 1:\ntralalal\nSample Output 1:\nallatral\nSample Input 2:\nzzzz\nSample Output 2:\n-1\n\ndef",
        "answer": "def rearrange(s):\n    n = len(s)\n    if n % 2!= 0:\n        return -1\n    else:\n        s = list(s)\n        for i in range(n/2):\n            s[i], s[n-1-i] = s[n-1-i], s[i]\n        return ''.join(s)",
        "difficulty": "competition"
    },
    {
        "task_id": 3233,
        "prompt": "Complete the Python function given the prompt below:Brandon Greg Jr. considers an array to be scary if its leftmost element is the median of its elements. Given an array with distinct elements $[p_1, p_2, \\ldots, p_ n]$, Brandon wants to count the number of scary subarrays.\nA subarray is some contiguous chunk of elements $[p_ l, p_{l+1}, \\ldots, p_ r]$ where $l\\le r$. The median of a set of $n$ numbers is the middle number in sorted order if $n$ is odd, or the average of the middle two numbers in sorted order if $n$ is even. Note that all subarrays of length $1$ are scary, and no even-length subarrays are scary because the elements are all distinct.\n-----Input-----\nThe first line of input contains a single integer $n$ ($1\\le n\\le 2\\cdot 10^5$), representing the length of the given array.\nThe second line of input contains $n$ space-separated integers $p_ i$ ($1\\le p_ i\\le n$), representing the given array. It is guaranteed that the $p_ i$\u2019s are distinct.\n-----Output-----\nOutput one integer representing the number of scary subarrays.\n-----Examples-----\nSample Input 1:\n5\n1 2 3 4 5\nSample Output 1:\n5\nSample Input 2:\n6\n3 2 1 6 4 5\nSample Output 2:\n8\n\ndef",
        "answer": "def scary_subarrays(arr):\n    n = len(arr)\n    left = [0] * n\n    right = [0] * n\n    left[0] = arr[0]\n    right[n - 1] = arr[n - 1]\n    for i in range(1, n):\n        left[i] = max(left[i - 1], arr[i])\n    for i in range(n - 2, -1, -1):\n        right[i] = max(right[i + 1], arr[i])\n    count = 0\n    for i in range(n):\n        if left[i] == right[i]:\n            count += 1\n    return count",
        "difficulty": "competition"
    },
    {
        "task_id": 3234,
        "prompt": "Complete the Python function given the prompt below:Consider packing widgets for shipping where widgets cannot be stacked upon each other (2D packing). Each widget has a $1\\times ~ l$ footprint and is $1$ unit high.\nBoxes are available in any $W$ by $H$ by $1$ size such that $H/2 \\leq W \\leq 2H$, with $W$ and $H$ being integers. The company wants to minimize the amount of packing material that will be needed to fill empty squares in a box.\nGiven $N$, the number of widgets to be shipped, what is the smallest number of squares that will be left empty when those widgets are packed for shipping?\n-----Input-----\nInput consists of one line containing an integer $N$, the number of widgets to be packed, where $1 \\leq N \\leq 10^{16}$.\n-----Output-----\nPrint a single line containing an integer denoting the minimum number of empty squares.\n-----Examples-----\nSample Input 1:\n47\nSample Output 1:\n1\nSample Input 2:\n523\nSample Output 2:\n2\n\ndef",
        "answer": "def pack(n):\n    return n**2",
        "difficulty": "competition"
    },
    {
        "task_id": 3235,
        "prompt": "Complete the Python function given the prompt below:You are developing a new app intended to simplify expense-sharing among groups of friends. This app will allow them to keep track of who encountered an expense and how it should be shared with others through the form of IOUs. For instance, if Alice pays for a meal shared with Bob and Carol, and Bob\u2019s and Carol\u2019s shares were $\\$ 5$ and $\\$ 10$, respectively, then Bob would issue an IOU for $\\$ 5$ to Alice and Carol would issue an IOU for $\\$ 10$ to Alice.\nYour app will maintain a ledger of who owes whom. Note that cycles can occur: For instance, if Bob initially owes Alice $\\$ 10$ and later pays a $\\$ 5$ expense on behalf of Alice, Alice would issue an IOU for $\\$ 5$ to Bob. This IOU would then cancel out, or reduce, the IOU Alice holds from Bob from $\\$ 10$ to $\\$ 5$. It\u2019s also possible for cycles to involve more than $2$ people.\nYour app will be given a list of IOUs issued and settle them as much as possible by considering all cycles and reducing each debt in a cycle by the minimum amount of debt occurring in the cycle. After all cycles are considered and canceled, your app should output who owes whom how much. If there are multiple ways in which cancelation can occur, you may choose any of them as long as there are no cycles left at the end. However, you may not introduce IOUs between friends that never gave an IOU to each other, e.g., if Alice owes Bob money, and Bob owes the same amount to Carol, you cannot remove Bob from the picture and declare that Alice now owes Carol.\n-----Input-----\nThe input consists of a single test case. The first line contains two integers $n$ and $m$ ($1 \\le n \\le 100, 0 \\le m \\le 10000$), where $n$ denotes the number of friends and $m$ denotes the number of IOUs issued. Friends are numbered $0$ to $n-1$. This is followed by $m$ lines containing three integers $a$, $b$, $c$ ($0 \\le a < n, 0 \\le b < n, a \\ne b, 0 < c \\le 1000$) denoting an IOU given by friend $a$ to friend $b$ for $c$ dollars. Any friend $i$ holds at most one IOU from any friend $j$ ($i \\ne j$), but friend $i$ may hold an IOU from friend $j$ at the same time that friend $j$ holds an IOU from $i$.\n-----Output-----\nFirst, output a single number $p$, denoting the number of IOUs left after canceling all cycles. Then, on the following $p$ lines, output the IOUs that are left in the same form in which they appear in the input (e.g. using $3$ integers $a$, $b$, $c$ denoting that friend $a$ owes friend $b$ $c$ dollars). Do not include any IOUs fully canceled, i.e., all the IOUs you output must have $c > 0$.\n-----Examples-----\nSample Input 1:\n4 5\n0 1 10\n1 2 10\n0 3 10\n3 2 10\n2 0 20\nSample Output 1:\n0\nSample Input 2:\n2 2\n0 1 20\n1 0 5\nSample Output 2:\n1\n0 1 15\n\ndef",
        "answer": "def find_cycle(graph, start, visited, parent):\n    visited[start] = True\n    for i in graph[start]:\n        if not visited[i]:\n            if find_cycle(graph, i, visited, start):\n                return True\n        elif parent!= i:\n            return True\n    return False",
        "difficulty": "competition"
    },
    {
        "task_id": 3236,
        "prompt": "Complete the Python function given the prompt below:Charles is traveling to the fantastic Fibonacci City. The city has $n$ mansions of various heights and $m$ bi-directional roads connecting the mansions. One of the most exciting tourist attraction in the city is the Fibonacci Tour, which is a simple path visiting a sequence of distinct mansions, so that every pair of consecutively visited mansions are directly connected by a road, and the heights of the mansions in the path form a continuous subsequence of the Fibonacci sequence:\\[ 1, 1, 2, 3, 5, 8, \\dots \\]\nEach number in the Fibonacci sequence equals the sum of the previous two numbers, except for the first two numbers which are defined to be one.\nCharles will be happier if his tour is longer. What is the maximum length of a Fibonacci Tour he can take? The length of a tour is the number of mansions visited in the tour. Charles can start the tour at any mansion.\n-----Input-----\nThe first line has two integers $n$ ($1\\leq n\\leq 10^5$) and $m$ ($0\\leq m\\leq 10^5$), giving the number of mansions and the number of roads in the city. The next line has $n$ positive integers no larger than $10^{18}$. The $i$-th integer gives the height of mansion $i$. The next $m$ lines each has two integers $a$ and $b$ ($1\\leq a, b \\leq n$, $a \\neq b$), indicating that there is a bi-directional road between mansion $a$ and mansion $b$. Each pair of mansions is directly connected by at most one road.\n-----Output-----\nOutput the length of the longest Fibonacci Tour Charles can take in the city. If there is no tour Charles can take, output zero.\n-----Examples-----\nSample Input 1:\n5 6\n1 3 2 1 5\n1 3\n2 3\n1 4\n3 5\n4 5\n2 5\nSample Output 1:\n5\nSample Input 2:\n4 3\n4 4 8 12\n1 2\n2 3\n3 4\nSample Output 2:\n1\n\ndef",
        "answer": "def longestFibonacciTour(n, m, mansions, roads):\n    # Write your code here",
        "difficulty": "competition"
    },
    {
        "task_id": 3237,
        "prompt": "Complete the Python function given the prompt below:In order to keep up with the rapid technological advancements, Mr. Panda needs to backup all the data on his computer to allow him to do a full upgrade of his computer. Since the upgrade will take some time, he will peruse the services of the company ACM (Association of Computer Maintenance) that provides storage servers for him to temporarily store his data.\nAlthough ACM offers storage servers of any size, ACM wants to encourage more bulk purchases of servers of the same size as this saves cost. The cost of purchasing a set of storage servers that can each store $M$ bytes consists of a base cost of $M$ dollars plus $1$ dollar for every server of that size purchased.\nMr. Panda wants to store a total of $K$ bytes of data and in order to easily track the servers, he wants to purchase a set of storage servers of the same size to store the $K$ bytes of data using the least cost. However, Mr. Panda feels compelled not to waste any space. Thus, he requires that the total storage space of the servers purchased must be exactly $K$ bytes.\nAs storage space of technology increases exponentially with time, $K$ can be very large. You are given the prime factorization of $K$. Help Mr. Panda calculate the minimum cost required to store his data. As the minimum cost can be quite large, print the minimum cost modulo a prime number $10^9+7$.\n-----Input-----\nThe input consists of one line with a string of even length consisting of at most $700$ representing the prime factorization of $K$. Every pair of two consecutive digits, starting from the first two digits, represents one prime factor. So input of length $N$ will have $N/2$ prime factors.\nIt is guaranteed that all the prime factors given are prime and that $K$ has at most $10^{10}$ divisors. Each prime factor will appear at most $100$ times.\n-----Output-----\nOutput the minimum cost in one line as a single integer.Sample Data Explanation\nIn the first example, $K = 2 \\cdot 3 \\cdot 2 = 12$, so buy three servers with $M = 4$ bytes. Mr. Panda pays $4$ dollars base cost plus $3$ dollars for three servers purchased, or a total of $4+3 = 7$ dollars. Mr. Panda can also buy four servers with $M = 3$ bytes with the same cost of $7$ dollars.\nIn the second example, $K = 13 \\cdot 11 = 143$, so buy eleven servers with $M = 13$ bytes. Mr. Panda pays $13$ dollars base cost plus $11$ dollars for eleven servers purchased, or a total $13+11 = 24$ dollars. Mr. Panda can also buy thirteen servers with $M = 11$ bytes with the same cost of $24$ dollars.\nIn the third example, $K = 11$, so buy one server with $M = 11$ bytes. Mr. Panda pays $11$ dollars base cost plus $1$ dollar for one server purchased, or a total $11+1 = 12$ dollars. Note that although he can get a cheaper cost if he were able to purchase storage servers of different sizes, he cannot do so.\n-----Examples-----\nSample Input 1:\n020302\nSample Output 1:\n7\nSample Input 2:\n1311\nSample Output 2:\n24\n\ndef",
        "answer": "def solve(k):\n    # Write your code here\n    pass",
        "difficulty": "competition"
    },
    {
        "task_id": 3238,
        "prompt": "Complete the Python function given the prompt below:Gold Leaf is a very thin layer of gold, with a paper backing. If the paper gets folded and then unfolded, the gold leaf will stick to itself more readily than it will stick to the paper, so there will be patches of gold and patches of exposed paper. Note that the gold leaf will always stick to itself, rather than the paper. In the following example, the paper was folded along the dashed line. Notice how the gold leaf always sticks to one side or the other, never both.\nConsider a crude digital image of a sheet of gold leaf. If the area covered by a pixel is mostly gold, that will be represented by a \u2018#\u2019. If it\u2019s mostly exposed paper, it will be represented by a \u2018.\u2019. Determine where the sheet was folded. The sheet was folded exactly once, along a horizontal, vertical, or 45 degree or 135 degree diagonal line. If the fold is horizontal or vertical, it is always between rows/columns. If the fold is diagonal, then the fold goes through a diagonal line of cells, and the cells along the fold are always \u2018#\u2019.\n-----Input-----\nEach input will consist of a single test case. Note that your program may be run multiple times on different inputs. Each test case will begin with a line with two integers, $n$ and $m$ ($2 \\le n, m \\le 25$), where $n$ is the number of rows, and $m$ is the number of columns of the image. Each of the next $n$ lines will contain exactly $m$ characters, all of which will be either \u2018#\u2019 or \u2018.\u2019. This represents a crudely collected digital image of the sheet of gold leaf. There is guaranteed to be at least one \u2018.\u2019, and there is guaranteed to be a solution.\n-----Output-----\nOutput a single line with four integers, indicating the places where the fold hits the edges of the paper. Output them in this order:\n    r1 c1 r2 c2\nwhere $(r1,c1)$ and $(r2,c2)$ are row/column coordinates ($r$=row, $c$=column). The top left character of the image is $(1,1)$ and the bottom right is $(n,m)$.\nIf the fold is horizontal or diagonal, list the left coordinates before the right. If the fold is vertical, list the top coordinates before the bottom.\nIf the fold is horizontal, use the coordinates above the fold. If the fold is vertical, use the coordinates to the left of the fold. If the fold is diagonal, use the coordinates of the edge pixels that the fold goes through.\nIf more than one fold is possible, choose the one with the smallest first coordinate, then the smallest second coordinate, then third, then fourth.\n-----Examples-----\nSample Input 1:\n8 10\n#.#..##..#\n####..####\n###.##....\n...#..####\n....##....\n.#.##..##.\n##########\n##########\nSample Output 1:\n3 1 3 10\nSample Input 2:\n5 20\n###########.#.#.#.#.\n###########...#.###.\n##########..##.#..##\n###########..#.#.##.\n###########.###...#.\nSample Output 2:\n1 15 5 15\n\ndef",
        "answer": "def goldleaf(n, m):\n    # Write your code here\n    # print(n, m)\n    # print(n, m)\n    # print(n, m)\n    # print(n, m)\n    # print(n, m)\n    # print(n, m)\n    # print(n, m)\n    # print(n, m)\n    # print(n, m)\n    # print(n, m)\n    # print(n, m)\n    # print(n, m)\n    # print(n, m)\n    # print(n, m)\n    # print(n, m)\n    # print(n, m)\n    # print(n, m)\n    # print(n, m)\n    # print(n, m)\n    # print(n, m)\n    # print(n, m)\n    # print(n, m)\n    # print(n, m)\n    # print(n, m)\n    # print(n, m)\n    # print(n, m)\n    # print(n, m)\n    # print(n, m)\n    # print(n, m)\n    # print(n, m)\n    # print(n, m)\n    # print(n, m)\n    # print(n, m)\n    # print(n, m)\n    # print(n, m)\n    # print(n, m)\n    # print(n, m)\n    # print(n, m)\n    # print(n, m)\n    # print(n, m)\n    # print(n, m)\n    # print(n, m)\n    # print(n, m)\n    # print(n, m)\n    # print(n, m)\n    # print(n, m)\n    # print(n, m)\n    # print(n, m)\n    # print(n, m)\n    # print(n, m)\n    # print(n, m)\n    # print(n, m)\n    # print(n, m)\n    # print(n, m)",
        "difficulty": "competition"
    },
    {
        "task_id": 3239,
        "prompt": "Complete the Python function given the prompt below:Pokemon Go has become a recent trend. Zapray becomes immediately addicted to the game after it comes out. Zapray\u2019s Pokemon journey begins with a bag of $100$ Pokeballs. Each time he encounters a Pokemon, he keeps throwing Pokeballs to the Pokemon until he either catches the Pokemon or runs out of Pokeballs. Each Pokeball Zapray throws succeeds in catching the Pokemon with a constant probability $P$. If Zapray finds that he has no Pokeballs when he tries to catch a Pokemon, he gives up on that Pokemon (not catching it) and heads to the Pokeshop to buy a new bag of $100$ Pokeballs for $5$ dollars. Zapray moves on to search for his next Pokemon after he refills the Pokeballs. In particular, if Zapray successfully catches a Pokemon with his last Pokeball, he does not refill his Pokeballs until he encounters the next Pokemon and realizes that he has run out of Pokeballs.\nSuppose Zapray encounters $N$ Pokemons in the next few days, what is the expected amount of money he would spend on Pokeballs?\n-----Input-----\nThe input has an integer $N$ ($1\\leq N\\leq 10^9$) and a real number $P$ ($0 \\leq P\\leq 1$). $P$ is given with exactly three digits after the decimal point.\n-----Output-----\nOutput the expected amount of money Zapray would spend on Pokeballs. Your answer is considered correct if it has an absolute or relative error of no more than $10^{-6}$ from the correct answer.\n-----Note-----\nPokemon Go was developed by Niantic, Inc. Niantic does not endorse and has no involvement with the ProgNova contest.\n-----Examples-----\nSample Input 1:\n50 0.125\nSample Output 1:\n16.339203308\nSample Input 2:\n201 1.000\nSample Output 2:\n5.000000000\n\ndef",
        "answer": "def solve(N, P):\n    return N*P",
        "difficulty": "competition"
    },
    {
        "task_id": 3240,
        "prompt": "Complete the Python function given the prompt below:Binary Town is holding its biennial elections. All $k$ positions on its council are open, and as usual Notnomde and Yraglac are the only ones running for each position.\nHaving long since abandoned quaint majority voting, Binary Town uses binary voting instead. In binary voting, all $v$ voters can cast any number of ballots, or not vote at all. The $k^\\mathrm {th}$ least significant bits of the total number of ballots are then used to determine which candidate wins each position. That is, Notnomde wins position $j$ if the $j^\\mathrm {th}$ least significant bit of the total number of ballots is $0$, otherwise Yraglac wins.\nYou know your neighbours well, and know exactly how many ballots $b_ i$ each one will cast if they choose to vote. For some reason, not everyone is happy with the electoral system so not everyone votes. Thankfully, you also know the probability $p_ i$ of each citizen voting.\nSince you like Yraglac more than Notnomde, you want to cast the number of ballots which maximizes the expected number of positions held by Yraglac.\nSuppose there are $k = 2$ positions and $v = 2$ voters, and you know with $50\\% $ probability that the voter other than yourself will cast one ballot. If you cast one ballot, the total number of ballots could be $01_2$ or $10_2$ with equal probability, so the expected number of positions for Yraglac is $1$. If you cast two ballots, the total number of ballots could be $10_2$ or $11_2$ with equal probability, making Yraglac\u2019s expected number of positions $1.5$. In this case, you then decide to cast two ballots since that maximizes Yraglac\u2019s expected number of positions.\n-----Input-----\nThe first line contains two space-separated integers $1 \\leq k \\leq 16$, the number of positions, and $2 \\leq v \\leq 100$, the number of voters (including yourself). It is followed by $v - 1$ lines, each containing two space-separated numbers: a decimal $0 \\leq p_ i \\leq 1$, the probability of voter $i$ casting ballots, and an integer $0 \\leq b_ i \\leq 2^k - 1$, the number of ballots voter $i$ would cast should they vote.\n-----Output-----\nOutput on a single line the number of ballots $0 \\leq b_ v \\leq 2^k - 1$ you should cast to maximize the expected number of positions held by Yraglac. The answer is guaranteed to be unique.\n-----Examples-----\nSample Input 1:\n2 2\n0.5 1\nSample Output 1:\n2\nSample Input 2:\n4 3\n1 11\n0.4 1\nSample Output 2:\n3\n\ndef",
        "answer": "def binary_town(k, v):\n    return 0",
        "difficulty": "competition"
    },
    {
        "task_id": 3241,
        "prompt": "Complete the Python function given the prompt below:Melita has just returned from the annual pig slaughter. Don\u2019t worry, this is a regular thing in Croatia. The best part was the abundance of food! There was everything, starting from good spicy sausages, ham, black pudding, up to teewurst, top quality bacon and \u010dvarci, all with warm white bread and butter. After these appetizers, it was the perfect time to whip up a deep pot full of sarma (Melita ate twentyish of them) as well as a large platter of fine roast pork, so soft that it almost melts in your mouth. They watered all of this down with copious gulps of the best dry white wine that made them even hungrier.\nButcher Bajs kept his award-winning ham for the very end. $N$ people attented the annual pig slaughter, labeled with numbers from 1 to $N$. These people already ate a lot of meat: the $k$-th person ate $A[k]$ kilograms of meat so far. Bajs will distribute his ham to the people in the ratio $B[1] : B[2] : \\cdots : B[N]$, exactly in that order, but he doesn\u2019t know the total amount (number of kilos) of ham which he will be distributing yet.\nAt the end of the slaughter, the Man of the Year will be declared. A ranking list is made according to the total kilos of meat eaten. Bajs impacts directly on this list by choosing the amount of ham to distribute. Although Bajs has been offered bribes many times, he refused each time, saying that he was an honest man who would not hurt a fly.\nBajs cares about order, because he\u2019s a nice gentleman, and wants to have the order of people in the exact form of $1, 2, 3, \\ldots, N$, respectively from the one who ate the most kilos of meat to those who ate less, allowing ties between participants. Help Bajs select the total amount of ham that he will distribute (in the ratio mentioned before) to achieve his intention.\n-----Input-----\nThe first line of input contains an integer $N$ ($2 \\geq N \\geq 1000$), the number of competitors for the Man of the Year award. Each of the following $N$ lines contains integers $A[k]$ and $B[k]$, as mentioned in the text ($0 \\geq A[k], B[k] \\geq 10^6$). At least one of the numbers $B[k]$ will not be equal to 0.\n-----Output-----\nThe first and only line of output must contain $-1$ if the required order cannot be achieved. Otherwise, output the required amount of ham in kilos, a real number between 0 and $10^7$ (inclusive). The answer should be correct up to either a relative or absolute error of $10^{-12}$. If there are multiple possible solutions, output any.\n-----Examples-----\nSample Input 1:\n3\n7 1\n3 2\n10 0\nSample Output 1:\n10.5\nSample Input 2:\n3\n2 1\n4 0\n0 3\nSample Output 2:\n-1\n\ndef",
        "answer": "def solve(N, A, B):\n    # Complete this function\n    pass",
        "difficulty": "competition"
    },
    {
        "task_id": 3242,
        "prompt": "Complete the Python function given the prompt below:Polly, the programming parrot, has escaped. As Johan is in desperate need for some programming skill, he wants to find her. The only clue that Johan has about the escape route is that Polly flew into his kitchen.\nJohan has $N$ boxes on his kitchen table, and each box has a certain probability to contain the parrot. Each box also requires a certain amount of energy in order to be opened. Checking all the boxes would for sure find the disobedient parrot, but there is a problem. Johan is a very lazy person, and he wants to spend as little energy as possible while trying to find Polly. Aware of his own laziness, Johan decided that he will be satisfied with finding the parrot with at least probability $P$, as long as he minimizes the energy wasted in opening boxes. Can you help him?\n-----Input-----\nInput starts with a line with an integer $1 \\leq N \\leq 10^3$, the number of boxes in Johan\u2019s kitchen and a floating point number $0 \\leq P \\leq 1$, the minimum probability with which Johan wants to find Polly. Then $N$ lines follow: each line containing an integer $0 \\leq e_ i \\leq 10^3$ describing the amount of energy needed to open box $i$, and a floating point number $0 \\leq p_ i \\leq 1$ describing the probability that Polly is inside box number $i$. All probabilities are given with at most four digits after the decimal point.\n-----Output-----\nOutput should contain a single integer on a single line: the minimum amount of energy Johan has to waste while finding Polly with at least probability $P$.\n-----Examples-----\nSample Input 1:\n2 0.5\n2 0.5\n1 0.5\nSample Output 1:\n1\nSample Input 2:\n2 0.5\n2 0.51\n1 0.49\nSample Output 2:\n2\n\ndef",
        "answer": "def solve(N, P):\n    return 0",
        "difficulty": "competition"
    },
    {
        "task_id": 3243,
        "prompt": "Complete the Python function given the prompt below:A number of regional Internet Service Providers (ISPs), both big and small have recently been forced into a merger by the government, in an effort to improve service for all. Of course this has been decided without consulting you, the chief network infrastructure officer, and a deadline for when the ISPs should be merged have already been set.\nYou have a set of $n$ servers, each with a limited number of network sockets that can be used for connecting physically to other servers. Some servers are already linked up in the existing network architecture, and if server 0 is linked to server 2, then 2 is also linked to server 0 (as you use full duplex ethernet Cat6 cables). No server is directly connected to itself, and no two servers are directly linked with more than one connection.\nYou want to connect the servers to form a single network, such that all servers can reach each other through some sequence of connections. To make the set deadline, you have estimated that you only have time to make $k$ edits to the existing network infrastructure. An edit is either to remove an existing connection between two servers, or to add a new connection between two servers.\nCan you connect all the servers to the same network using at most $k$ edits, within the limitations on the number of network sockets in each server?\n-----Input-----\nThe first line of the input is three space separated integers $n$ ($1 \\leq n \\leq 100000$), the number of servers, $m$ ($0 \\leq m \\leq 200000$), the number of existing connections and $k$ ($0 \\leq k \\leq 50000$), the number of edits you have time to make. Then follows a line with $n$ integers $c_0, c_1, \\ldots, c_ i, \\ldots, c_{n-1}$, with the $i$\u2019th number giving the number of network sockets for the $i$\u2019th server (for all $i$ the capacity is bounded by $1 \\leq c_ i < n$). Then $m$ lines follow, with two integers $u_ j$ and $v_ j$ each, giving the id\u2019s of two servers that are connected in the old network architecture. Servers are $0$-indexed, i.e. for every $j$, it holds that $0 \\leq u_ j, v_ j < n$. A server will never be connected to more servers than it has connection sockets.\n-----Output-----\nOutput \u201cyes\u201d on a single line if the servers can be connected to one network by making $k$ or less edits, and \u201cno\u201d if it is not possible.\n-----Examples-----\nSample Input 1:\n4 5 2\n3 3 3 3\n0 1\n0 3\n1 3\n1 2\n2 3\nSample Output 1:\nyes\nSample Input 2:\n5 4 4\n1 1 2 2 2\n0 1\n2 3\n3 4\n4 2\nSample Output 2:\nyes\n\ndef",
        "answer": "def is_connected(n, m, k, c):\n    # Write your code here\n    pass",
        "difficulty": "competition"
    },
    {
        "task_id": 3244,
        "prompt": "Complete the Python function given the prompt below:Instead of paying attention in class, Luka is killing time playing with numbers again. This time, he wrote $N$ non-negative integers so that they form a ring (circle). After that he formed a new ring by adding to each number its two neighbours.\nThe teacher noticed this and took away the first piece of paper, with the original ring. This did not trouble Luka much because he knows he can use the other ring to reconstruct the original.\nWrite a program that solves Luka\u2019s problem.\n-----Input-----\nThe first line contains the integer $N$ $(3 \\le N \\le 10000)$, the number of integers in the ring.\nEach of the following lines contains an integer less than $10^9$ (one billion). These numbers, in order, form the second ring.\nThe input will be such that a solution, although not necesarily unique, will always exist.\n-----Output-----\nOutput the original ring on $N$ lines. The numbers must be non-negative.\nRotating the ring is not allowed. For example, the sum of the first three output numbers must be equal to the second number in the input ring.\nNote: the solution need not be unique.\n-----Examples-----\nSample Input 1:\n3\n5\n5\n5\nSample Output 1:\n2\n1\n2\nSample Input 2:\n4\n20\n15\n17\n14\nSample Output 2:\n5\n8\n2\n7\n\ndef",
        "answer": "def solve(N, ring):\n    # Write your code here\n    pass\n",
        "difficulty": "competition"
    },
    {
        "task_id": 3245,
        "prompt": "Complete the Python function given the prompt below:You might have heard about the friendly interactive shell - fish. It\u2019s terminal based, but a bit friendlier to new users who can\u2019t remember the commands they typed before. Fish can use your history of commands for command completion: pressing up (\u201c^\u201d) finds the last command you ran that shares the prefix you have already typed (a string is a prefix of itself).\nIf you press up again you go another step back in time, finding the second last command that shares the prefix of what you typed. If there are no more matching commands you stay at the oldest matching command.\nWhen a series of consecutive up-presses is ended, either by typing some other character or by pressing enter to run the current command, the matching command from the history replaces everything that was typed in the current input.\nWhen you press enter the current input is added to the command history. The command history does not contain up-characters (\u201c^\u201d) since command completion is always performed before the enter-key is processed.\nThe input to this problem contains the characters a user typed in a fish terminal, separated into lines. After each line, the user pressed enter. Your task is to output the resulting command history.\n-----Input-----\nThe first line of the input contains a single number $n$, where $1 \\leq n \\leq 100000$.\nThen follows $n$ lines with the user input. Each line consists of characters from the alphabet $\\big [$a-zA-Z0-9.^-$\\big ]$, i.e. English lower and upper case letters, digits, \u201c-\u201d, \u201c \u201d, \u201c.\u201d and the symbol \u201c^\u201d denoting the up key. No command begins or ends with a space.\nThe input is guaranteed to contain at most $10^6$ characters.\n-----Output-----\nFor each command in the input output a line with the completed command (where all \u201c^\u201d are expanded). The total amount of output is guaranteed to be at most $10^6$ characters.\n-----Sample Explanation-----\nIn Sample Input $1$ your first command is \u201cpython\u201d. Your next command gets auto completed to \u201cpython\u201d, and then you write \u201c main.py\u201d, which is appended to your command making \u201cpython main.py\u201d. The last command completes the first up press to \u201cpython main.py\u201d, then \u201c -n 10\u201d is typed which becomes \u201cpython main.py -n 10\u201d.\nIn Sample Input $2$ your first two commands are \u201cpython\u201d and \u201cjava\u201d. The third command becomes auto completed to java, your previous command. The fourth command completes to \u201cpython\u201d since it was your third last command. For your fifth command the third last command auto completed is now \u201cjava\u201d.\nIn Sample Input $3$ no commands are in your history, so your up presses have no effect and only the non up presses count to your command making \u201cpython\u201d.\n-----Examples-----\nSample Input 1:\n3\npython\np^ main.py\n^ -n 10\nSample Output 1:\npython\npython main.py\npython main.py -n 10\nSample Input 2:\n5\npython\njava\n^\n^^^\n^^^\nSample Output 2:\npython\njava\njava\npython\njava\n\ndef",
        "answer": "def fish():\n    n = int(input())\n    for i in range(n):\n        line = input()\n        print(line)\nfish()\n",
        "difficulty": "competition"
    },
    {
        "task_id": 3246,
        "prompt": "Complete the Python function given the prompt below:It is a well-known fact that if you mix up the letters of a word, while leaving the first and last letters in their places, words still remain readable. For example, the sentence \u201ctihs snetncee mkaes prfecet sesne\u201d, makes perfect sense to most people. If you remove all spaces from a sentence, it still remains perfectly readable, see for example: \u201cthissentencemakesperfectsense\u201d, however if you combine these two things, first shuffling, then removing spaces, things get hard. The following sentence is harder to decipher: \u201ctihssnetnceemkaesprfecetsesne\u201d. You are given a sentence in the last form, together with a dictionary of valid words and are asked to decipher the text.\n-----Input-----\n - One line with a string $s$: the sentence to decipher. The sentence consists of lowercase letters and has a length of at least $1$ and at most $1000$ characters.\n - One line with an integer $n$ with $1 \\le n \\le 10000$: the number of words in the dictionary.\n - $n$ lines with one word each. A word consists of lowercase letters and has a length of at least $1$ and at most $100$ characters. All the words are unique.\n-----Output-----\nOutput one line with the deciphered sentence, if it is possible to uniquely decipher it. Otherwise \u201cimpossible\u201d or \u201cambiguous\u201d, depending on which is the case.\n-----Examples-----\nSample Input 1:\ntihssnetnceemkaesprfecetsesne\n5\nmakes\nperfect\nsense\nsentence\nthis\nSample Output 1:\nthis sentence makes perfect sense\nSample Input 2:\nhitehre\n2\nthere\nhello\nSample Output 2:\nimpossible\n\ndef",
        "answer": "def decipher(s):\n    s = s.split()\n    d = {}\n    for i in range(int(input())):\n        d[input()] = 1\n    for i in s:\n        if i not in d:\n            return \"impossible\"\n    return \" \".join(s)",
        "difficulty": "competition"
    },
    {
        "task_id": 3247,
        "prompt": "Complete the Python function given the prompt below:Magnus is the youngest chess grandmaster ever. He loves chess so much that he decided to decorate his home with chess pieces. To decorate his long corridor, he decided to use the knight pieces. His corridor is covered by beautiful square marble tiles of alternating colors, just like a chess board, with $n$ rows and $m$ columns. He will put images of knights on some (possibly none) of these tiles. Each tile will contain at most one knight.\nThe special thing about his arrangement is that there won\u2019t be any pair of knights can attack each other. Two knights can attack each other if they are placed in two opposite corner cells of a 2 by 3 rectangle. In this diagram, the knight can attack any of the Xs.\nGiven the dimension of the long corridor, your task is to calculate how many ways Magnus can arrange his knights. Two arrangements are considered different if there exists a tile which contains a knight in one arrangement but not in the other arrangement (in other words, rotations and reflections are considered different arrangements).\n-----Input-----\nEach input will consist of a single test case. Note that your program may be run multiple times on different inputs. Each test case will consist of a single line with two integers $n$ and $m$ ($1 \\le n \\le 4$, $1 \\le m \\le 10^{9}$) representing the dimensions of the carpet. There will be a single space between $n$ and $m$.\n-----Output-----\nOutput a single line with a single integer representing the number of possible arrangements, modulo $(10^{9}+9)$.\n-----Examples-----\nSample Input 1:\n1 2\nSample Output 1:\n4\nSample Input 2:\n2 2\nSample Output 2:\n16\n\ndef",
        "answer": "def knightsTour(n, m):\n    return (n*m)**2",
        "difficulty": "competition"
    },
    {
        "task_id": 3248,
        "prompt": "Complete the Python function given the prompt below:Mirko\u2019s ASCII street is made of $N$ lowercase letters of the English alphabet. The city government occasionally replaces the tiles in the street. However, the letter tiles are in high demand, so the government has only $M$ different tile patterns available.\nThe $i$th tile pattern consists of $L_ i$ letters. A tile cannot be rotated or broken into pieces, and it can only be placed such that the tile letters coincide with the contiguous letter subsequence in the street. Tiles can overlap and we can use multiple tiles of the same pattern.\nA street cell is untileable if it cannot be covered by any tile. Compute the number of untileable cells.\n-----Input-----\nThe first line of input contains the positive integer $N$ ($1 \\le N \\le 300000$), the length of the street.\nThe second line of input contains $N$ lowercase English letters, the letter sequence in the street.\nThe third line of input contains the positive integer $M$ ($1 \\le M \\le 5000$), the number of tile patterns.\nEach of the next $M$ lines contains a description of a tile pattern with length $L_ i$ ($1 \\le L_ i \\le 5000$). The tile pattern descriptions consist of lowercase English letters.\nThe total length of the tile patterns (the sum of the $L_ i$\u2019s) is at most $13000000$.\n-----Output-----\nThe first and only line of output must contain the required number of untileable cells.\n-----Examples-----\nSample Input 1:\n6\nabcbab\n2\ncb\ncbab\nSample Output 1:\n2\nSample Input 2:\n4\nabab\n2\nbac\nbaba\nSample Output 2:\n4\n\ndef",
        "answer": "def tile_patterns(n, street, m, patterns):\n    # Write your code here\n    pass",
        "difficulty": "competition"
    },
    {
        "task_id": 3249,
        "prompt": "Complete the Python function given the prompt below:An oft-forgotten part of a well-rounded software engineer\u2019s training is those long but vital months spent learning the art of shipwrighting.\nModern boats, as we know, are superbly safe, to the point that they are nigh unsinkable. Even in a head-on collision the ship can be saved by a system of bulkheads, reinforced vertical sections inside the structure designed to prevent ingressed water from spreading to other sections.\nA splendid new ship of the line has had a team of talented artists hard at work reticulating the finest splines for use in this vessel. However, not being concerned with such details, they have left out the placements of the bulkheads as an exercise for their readers.\nThis is where you can help. First, we need to find how many bulkheads we can fit in the ship. Second, the exact placements of the bulkheads need to be found.\n-----Input-----\n - One line containing an integer $C$ ($10 \\le C \\le 10^9$), the minimum area of a bulkhead section.\n - One line containing an integer $N$ ($3 \\le N \\le 10^5$), the number of vertices in the artists\u2019 design for the boat.\n - $N$ unique lines, each containing two integers: $x$ and $y$ ($-10^5 \\le x, y \\le 10^5$), the coordinates of the vertices from the hull in counter-clockwise winding order.\nThe shape of the boat never doubles back on itself horizontally; that is to say, if a vertical line is drawn through the cross-section, no matter where, it will always pass through the boat exactly once\u2014never twice\u2014however it may run along one or more edges.\nIt is guaranteed that it is always possible to fit at least one bulkhead section into the ship.\n-----Output-----\n - One line containing one integer, $M$: the maximum number of bulkhead sections that can be created. It is guaranteed that $M$ is between $1$ and $100$.\n - $M-1$ lines, each containing one real number: the $X$-coordinate of the placement of a bulkhead such that the sections defined by it have equal area to all the others. Bulkhead placements must be given in increasing order of $X$.\nAll output must be accurate to an absolute or relative error of at most $10^{-6}$.\n-----Examples-----\nSample Input 1:\n50\n4\n110 10\n80 10\n80 0\n110 0\nSample Output 1:\n6\n85\n90\n95\n100\n105\nSample Input 2:\n24\n3\n10 10\n30 10\n20 20\nSample Output 2:\n4\n17.071067\n20\n22.928932\n\ndef",
        "answer": "def solution(C, N, x, y):\n    # your code here\n    return 0",
        "difficulty": "competition"
    },
    {
        "task_id": 3250,
        "prompt": "Complete the Python function given the prompt below:Most people have heard of Julius Caesar, a Roman dictator who lived in the first century BC and who was famous, amongst other things, for defeating enemies by pitting them against each other, thereby preventing them from uniting against him, a strategy known as \u201cDivide and Conquer\u201d. A lesser known fact is that Julius Caesar had a grandfather named Julius Senior, an old man who has miraculously lived to this day and who currently resides in an old age home in the town of Quackville.\nLife in the old age home is mostly dull, but every Friday, Julius Senior and his compatriots have a rousing game of Bingo! The stakes are especially high, for not only does the victor gain the much-coveted title of \u201cBingo Champion\u201d, but there is also a reward of several sour candies. Julius Senior finds Bingo fun, but after never having won even once over all these millennia, the militaristic tendencies present in his family have begun to manifest themselves, and he has hatched a plot to gain the sour candies by illegitimate means. For his plan, he will need to make use of some divisibility hacks.\nA divisibility hack is a mental math trick that can be used to easily decide which positive integers $n$ are multiples of a given positive integer $d$. As well as depending on the divisor $d$, a specific divisibility hack is determined by two other integer parameters, $b > 1$ and $m > 0$. The parameters $b$ and $m$ are used to define a reduction function $f_{b,m}(n)$ that maps positive integers to (usually smaller) integers. For a given positive integer $n$, if\\[ n = a_ kb^k + a_{k - 1}b^{k - 1} + \\ldots + a_1b^1 + a_0b^0 \\]\nis the base-$b$ expansion of $n$, then $f_{b,m}(n)$ is defined to be\\begin{align*} & + (a_{m - 1} b^{m - 1} + a_{m - 2} b^{m - 2} + \\ldots + a_1 b^1 + a_0 b^0)\\\\ & \\quad - (a_{2m - 1} b^{m - 1} + a_{2m - 2} b^{m - 2} + \\ldots + a_{m+1} b^1 + a_ m b^0)\\\\ & \\quad \\quad + (a_{3m-1} b^{m - 1} + a_{3m-2} b^{m - 2} + \\ldots + a_{2m+1} b^1 + a_{2m} b^0) \\\\ & \\quad \\quad \\quad - (a_{4m-1} b^{m - 1} + a_{4m-2} b^{m - 2} + \\ldots + a_{3m+1} b^1 + a_{3m} b^0) \\\\ & \\quad \\quad \\quad \\quad \\quad \\quad \\quad \\vdots \\end{align*}\nwhere $a_ j = 0$ whenever $j > k$. In other words, the reduction function is an alternating sum of terms, each of which is formed using $m$ consecutive base-$b$ digits of $n$, starting with the least significant digit. We say that the $(b,d,m)$ divisibility hack is valid if for all positive integers $n$, $f_{b,m}(n)$ is divisible by $d$ if and only if $n$ is divisible by $d$. Thus, if we have a large integer\u00a0$n$ to check for divisibility by\u00a0$d$, we can simply apply the reduction function to get a new smaller integer that we can instead test for divisibility by\u00a0$d$.\nFor example, it turns out that $(10,11,1)$ is a valid divisibility hack. We can therefore determine that $123456789$ is not a multiple of $11$, since $9 - 8 + 7 - 6 + 5 - 4 + 3 - 2 + 1 = 5$ is not a multiple of $11$. Also, $(10,7,3)$ is a valid divisibility hack, so we can use this to see that $42321999020$ is a multiple of $7$, since $20 - 999 + 321 - 42 = -700$ is a multiple of $7$.\nJulius Senior\u2019s nefarious scheme is to disseminate knowledge of some specific divisibility hacks to a select group of senior citizens, and to train them to go rabid when he says the trigger word \u201cMAPS\u201d (Multiples Are Pretty Sick), using their divisibility hacks to scream facts about integers dividing or not dividing other integers at each other. His plan is to do this in the middle of their next Bingo tournament, whereupon he can take advantage of the ensuing chaos to purloin the sour candies without anyone noticing.\nUnfortunately, Julius Senior\u2019s math skills aren\u2019t what they used to be, so he is having a hard time coming up with divisibility hacks. In fact, when he randomly chooses integers $b$ and $d$, he can\u2019t even figure out if there exists a positive integer $m$ such that the $(b,d,m)$ divisibility hack is valid. Can you write a program to help him determine when this is the case?\n-----Input-----\nThe input consists of two space-separated integers, $b$ and $d$, satisfying the bounds $1 < b,d < 2^{63}$. It is guaranteed that $d$ is a prime number.\n-----Output-----\nIf there exists a positive integer $m$ such that the $(b,d,m)$ divisibility hack is valid, output \u201cyes\u201d. Otherwise, output \u201cno\u201d.\n-----Examples-----\nSample Input 1:\n10 11\nSample Output 1:\nyes\nSample Input 2:\n10 7\nSample Output 2:\nyes\n\ndef",
        "answer": "def divisibility_hack(b, d):\n    n = 123456789\n    while n % d!= 0:\n        n -= b\n    return n",
        "difficulty": "competition"
    },
    {
        "task_id": 3251,
        "prompt": "Complete the Python function given the prompt below:Mirko got a set of intervals for his birthday. There are many games he can play with them. In one of them, Mirko must find the longest sequence of distinct intervals such that each interval in the sequence is in the set and that each interval contains the one that follows in the sequence.\nWrite a program which finds one such longest sequence.\n-----Input-----\nThe first line of input contains the integer $N$ $(1 \\le N \\le 100000)$, the number of intervals in the set.\nEach of the following $N$ lines contains two integers $A$ and $B$ describing one interval $(1 \\le A < B \\le 1000000)$.\n-----Output-----\nOutput the length $K$ of the longest sequence on the first line.\nEach of the following $K$ lines should contain one element of the sequence, an interval in the same format it was given in the input.\n-----Examples-----\nSample Input 1:\n3\n3 4\n2 5\n1 6\nSample Output 1:\n3\n1 6\n2 5\n3 4\nSample Input 2:\n5\n10 30\n20 40\n30 50\n10 60\n30 40\nSample Output 2:\n3\n10 60\n30 50\n30 40\n\ndef",
        "answer": "def find_longest_sequence(n):\n    # Write your code here\n    pass",
        "difficulty": "competition"
    },
    {
        "task_id": 3252,
        "prompt": "Complete the Python function given the prompt below:Your greeting card company makes unique greeting cards. The sizes of these greeting cards vary widely because of the whims of card designers. There are a lot of different types of cards, and each has a specific quantity that you need to manufacture.\nYour job is to determine what envelopes to order for these greeting cards. You have a strict limit on the different number of different sizes of envelopes, which may be less than the number of distinct sizes of cards. You need to have envelopes so that every card fits in some envelope, possibly with room to spare, and the amount of waste paper is minimized. Measure the waste paper by the area of the envelope that is in excess of the area of the card, for each card. For example, a $10 \\times 4$ card in a $10 \\times 4$ envelope has no wasted paper, but a $10 \\times 4$ card in a $12 \\times 5$ envelope has waste of $20$. You may not rotate the cards to fit them in the envelopes better.\nSuppose that you have $5$ types of cards: $10 \\times 10$ ($5$ of these), $9 \\times 8$ ($10$ of these), $4 \\times 12$ ($20$ of these), $12 \\times 4$ ($8$ of these), and $2 \\times 3$ ($16$ of these).\nNow, suppose that you can only buy one type of envelope. Since all cards have to fit in that one envelope size, the smallest envelope size you can use is $12 \\times 12$, with an area of $144$. The wastes by each type of card are $144 - 10 \\cdot 10=44$, $144 - 9 \\cdot 8=72$, $144 - 4 \\cdot 12=96$, $144 - 12 \\cdot 4=96$, and $144 - 2 \\cdot 3=138$, respectively. The total waste is $44 \\cdot 5 + 72 \\cdot 10 + 96 \\cdot 20 + 96 \\cdot 8 + 138 \\cdot 16=5836$.\nSuppose that you can buy $2$ types of envelopes. The best you can do is to put the $10 \\times 10$, $9 \\times 8$ and $12 \\times 4$ cards in $12 \\times 10$ envelopes, and the $4 \\times 12$ and $2 \\times 3$ cards in $4 \\times 12$ envelopes. That adds up to waste of $1828$.\nIf you can buy $5$ types of envelopes, then you can match one envelope type to each card type, and there\u2019s no waste!\nGiven a list of card types and the number of types of envelopes you can buy, what is the smallest amount of wasted paper you can achieve?\n-----Input-----\nEach input will consist of a single test case. Note that your program may be run multiple times on different inputs. The first line of the input will consist of two space-separated integers $n$ and $k$ ($1 \\le n,k \\le 15$), where $n$ is the number of different types of cards, and $k$ is the maximum number of types of envelopes you can order. Each of the following $n$ lines will consist of three integers, describing a type of card. The integers are $w$, $h$ and $q$ ($1 \\le w,h,q \\le 10000$), where $w$ is the width of the cards of this type, $h$ is the height of the cards, and $q$ is the quantity of cards of this type.\n-----Output-----\nOutput a single integer, representing the smallest possible total amount of wasted paper.\n-----Examples-----\nSample Input 1:\n5 1\n10 10 5\n9 8 10\n4 12 20\n12 4 8\n2 3 16\nSample Output 1:\n5836\nSample Input 2:\n5 2\n10 10 5\n9 8 10\n4 12 20\n12 4 8\n2 3 16\nSample Output 2:\n1828\n\ndef",
        "answer": "def gift_envelope(n, k):\n    # Write your code here",
        "difficulty": "competition"
    },
    {
        "task_id": 3253,
        "prompt": "Complete the Python function given the prompt below:In a few weeks time, a new president will be elected in the country of Marecia. There are two political parties: the Constituents and the Federals. Each party has one presidential candidate; one of these will become the new president.\nThis year you are more involved than ever before: you are the candidate for the Constituents! With only a few weeks to go, you decide to take stock of the situation. Instead of touring blindly through the country, you feel that it is better to focus your attention on certain particular states.\nThe Marecian electoral system is quite complicated. Every registered voter will vote for exactly one of the two candidates, but the totals are not calculated nationwide. Instead, every state has a fixed number of delegates. After the popular vote is in, the delegates from all states travel by foot to the capital of Marecia, the city of Ashwington. One final round of voting is done in Ashwington: every delegate gets to vote for one of the two candidates. A delegate is required by law to vote for the candidate who received the majority of the votes in his own home state.\nYour campaign team has painstakingly compiled a very accurate list of voting preferences per state. Therefore you now have the following information about every state:\n - The number of voters who will definitely vote for the Constituents;\n - The number of voters who will certainly vote for the Federals;\n - The number of voters who have not made up their minds yet.\nVoters from the first two categories are not susceptible to any further campaigning, so your focus for the remaining weeks is on people of the third category. Specifically, you would like to know the minimum number of people you still have to convince in order to secure a victory.\nIf there is a tie on either state or national level, the law states that it is resolved in favour of the oldest of the two political parties, which unfortunately is the Federal party.\n-----Input-----\nThe first line contains a single integer $S$, the number of states.\nThe following $S$ lines each contain four integers $D_ i$, $C_ i$, $F_ i$, $U_ i$, where\n - $D_ i$ denotes the number of delegates for the $i$-th state,\n - $C_ i$ denotes the number of registered voters in the $i$-th state who will definitely vote for the Constituents,\n - $F_ i$ denotes the number of registered voters in the $i$-th state who will certainly vote for the Federals,\n - $U_ i$ denotes the number of undecided voters in the $i$-th state.\nThere are at most $2016$ delegates in total, and the total number of registered voters is at most $10^9$. Every state has at least one delegate and at least one registered voter. There is at least one state.\n-----Output-----\nOutput one line with a single integer: the minimum number of voters you have to convince to secure a victory. If it is not possible for you to win the election, output \u201cimpossible\u201d instead.\n-----Examples-----\nSample Input 1:\n3\n7 2401 3299 0\n6 2401 2399 0\n2 750 750 99\nSample Output 1:\n50\nSample Input 2:\n3\n7 100 200 200\n8 100 300 200\n9 100 400 200\nSample Output 2:\nimpossible\n\ndef",
        "answer": "def solve(S, D, C, F, U):\n    # Write your code here\n    pass",
        "difficulty": "competition"
    },
    {
        "task_id": 3254,
        "prompt": "Complete the Python function given the prompt below:Slavko decided to challenge Mirko! He gave him a real number $P$ and a bag full of pieces of paper with exactly one number between $1$ and $5$ inclusive written on each paper. There is an unlimited quantity of each type of paper.\nMirko\u2019s task is to pick the minimum number of papers in a way that the average of the numbers written on them equals exactly $P$.\n-----Input-----\nFirst and only line of input contains real number $P$. $P$ will have between 1 and 9 decimal places, inclusive $(1 \\leq P \\leq 5)$.\n-----Output-----\nFirst and only line of output should contain five nonnegative integers \u2013 numbers of ones, twos, threes, fours and fives used, respectively. If there are multiple solutions, output any one of them.\n-----Examples-----\nSample Input 1:\n5.0\nSample Output 1:\n0 0 0 0 1\nSample Input 2:\n4.5\nSample Output 2:\n0 0 0 1 1\n\ndef",
        "answer": "def paper(p):\n    if p == 1:\n        return 0\n    if p == 2:\n        return 1\n    if p == 3:\n        return 2\n    if p == 4:\n        return 3\n    if p == 5:\n        return 4\n    if p == 6:\n        return 5\n    if p == 7:\n        return 6\n    if p == 8:\n        return 7\n    if p == 9:\n        return 8\n    if p == 10:\n        return 9\n    if p == 11:\n        return 10\n    if p == 12:\n        return 11\n    if p == 13:\n        return 12\n    if p == 14:\n        return 13\n    if p == 15:\n        return 14\n    if p == 16:\n        return 15\n    if p == 17:\n        return 16\n    if p == 18:\n        return 17\n    if p == 19:\n        return 18\n    if p == 20:\n        return 19\n    if p == 21:\n        return 20\n    if p == 22:\n        return 21\n    if p == 23:\n        return 22\n    if p == 24:\n        return 23\n    if p == 25:\n        return 24\n    if p == 26:\n        return 25\n    if p == 27:\n        return 26\n    if p == 28:\n        return 27\n    if p == 29:\n        return 28\n    if p == 30:\n        return 29\n    if p == 31:\n        return 30\n    if p == 32:\n        return 31\n    if p == 33:\n        return 32\n    if p == 34:\n        return 33\n    if p == 35:\n        return 34\n    if p == 36:\n        return 35\n    if p == 37:\n        return 36\n    if p == 38:\n        return 37\n    if p == 39:\n        return 38\n    if p == 40:\n        return 39\n    if p == 41:\n        return 40\n    if p == 42:\n        return 41\n    if p == 43:\n        return 42\n    if p == 44:\n        return 43\n    if p == 45:\n        return 44\n",
        "difficulty": "competition"
    },
    {
        "task_id": 3255,
        "prompt": "Complete the Python function given the prompt below:A hopper is a virtual creature that visits Java programs and explores their arrays. Scientists observed a hopper and came to the following conclusions:\n - a hopper only visits arrays with integer entries,\n - a hopper always explores a sequence of array elements using the following rules:\n - a hopper cannot jump too far, that is, the next element is always at most $D$ indices away (how far a hopper can jump depends on the length of its legs),\n - a hopper doesn\u2019t like big changes in values\u2014the next element differs from the current element by at most $M$, more precisely the absolute value of the difference is at most $M$ (how big a change in values a hopper can handle depends on the length of its arms), and\n - a hopper never visits the same element twice.\n - a hopper will explore the array with the longest exploration sequence.\nThe scientists now need to prepare arrays for further study of hoppers and they need your help. They want a program that given an array and values $D$ and $M$ computes the length of the longest exploration sequence in the array.\n-----Input-----\nThe first line contains three numbers $n$, $D$, $M$, where $n$ is the length of the array (as described above, $D$ is the maximum length of a jump the hopper can make, and $M$ is the maximum difference in values a hopper can handle). The next line contains $n$ integers\u2014the entries of the array. We have $1 \\leq D \\leq 7$, $1 \\leq M \\leq 10000$, $1 \\leq n \\leq 1000$ and the integers in the array are between $-1000000$ and $1000000$.\n-----Output-----\nThe output contains one line\u2014the length of the longest exploration sequence. The hopper can start and end at any location and the length is computed as the number of visited locations.\n-----Examples-----\nSample Input 1:\n8 3 1\n1 7 8 2 6 4 3 5\nSample Output 1:\n8\nSample Input 2:\n8 2 1\n1 7 8 2 6 4 3 5\nSample Output 2:\n3\n\ndef",
        "answer": "def longest_exploration_sequence(n, d, m, array):\n    # Write your code here\n    pass",
        "difficulty": "competition"
    },
    {
        "task_id": 3256,
        "prompt": "Complete the Python function given the prompt below:Barr the Bear is playing the game Bits with Swanky Shen!\nBits is a very simple game. At the start, a circle of $N$ non-negative integers $A_1$, $A_2$, $A_3$, $\\ldots $, $A_ N$ is shown to both players. That is, to the left of the integer $A_ i$ is the integer $A_{i-1}$ if $i > 1$; and the integer $A_ N$ otherwise. To the right of the integer $A_ i$ is the integer $A_{i+1}$ if $i < N$; and the integer $A_1$ otherwise. Also an integer $K$ is given to both players.\nTo win this game, one must divide the circle of integers into exactly $K$ contiguous non-empty sections, such that the bitwise AND of the powers of all sections is maximized. The power of a contiguous section of integers is the bitwise OR of all integers in that section.\nBarr the Bear is lazy and knows that you are wise with bits. Hence, he has hired you to help him to win the game!\nNote: The binary bitwise operators OR and AND operate on the base-$2$ representation of the integers and correspond to the operators | and & respectively in C++ or Java.\n-----Input-----\nThe first line contains integers $N$ and $K$ ($1 \\leq K \\leq N \\leq 5\\cdot 10^5$), namely the number of integers and the number of contiguous non-empty sections required.\nThe next line contains $N$ integers, the $i^\\textrm {th}$ of which is the integer $A_ i$ ($0 \\leq A_ i \\leq 10^9$).\n-----Output-----\nOutput a single integer in one line: The maximum bitwise AND of the powers of the sections in an optimal division of the circle of integers.\n-----Explanation-----\nIn the first sample, the circle is $(2, 3, 4, 1)$. A possible division is $(3, 4)$ and $(1, 2)$. $(3, 4)$ has power $7$ and $(1, 2)$ has power $3$. The bitwise AND of $7$ and $3$ is $3$. Note that a section can possibly wrap around the circle.\nIn the second sample, a possible division is $(2, 2, 4)$, $(4)$, $(4, 2)$. The sections\u2019 powers are $6$, $4$ and $6$ respectively, which have bitwise AND of $4$. Note that we require the sections to be contiguous integers, so the division $(2, 4)$, $(2, 4)$, $(2, 4)$ is not permissible.\nIn the third sample, we can only have one section. This section will have all the integers, and thus have power $3$.\n-----Examples-----\nSample Input 1:\n4 2\n2 3 4 1\nSample Output 1:\n3\nSample Input 2:\n6 3\n2 2 2 4 4 4\nSample Output 2:\n4\n\ndef",
        "answer": "def solve(N, K, A):\n    # Write your code here",
        "difficulty": "competition"
    },
    {
        "task_id": 3257,
        "prompt": "Complete the Python function given the prompt below:The Algebraist Carpet Manufacturing (ACM) group likes to produce area carpets based upon various geometric figures. The 2014 ACM carpets are all equilateral triangles. Unfortunately, due to a manufacturing defect, some of the carpets are not as stain-resistant as intended. The ACM group is offering to replace each defective carpet that contains a stain.\nThe web form used to report the stained carpet requests the three distances that the stain is away from the corners of the rug. Based upon these three numbers, you need to compute the area of the rug that is to be sent to the customer, or indicate that the customer\u2019s carpet doesn\u2019t come from ACM.\n-----Input-----\nEach input will consist of a single test case. Note that your program may be run multiple times on different inputs. Each test case will consist of a single line with three floating point numbers $a$, $b$ and $c$ ($0 < a,b,c \\le 100$, at most $10$ digits after the decimal point) representing the distances from the stain to each of the three corners of the carpet. There will be a single space between $a$ and $b$, and between $b$ and $c$.\n-----Output-----\nOutput a single line with a single floating point number. If there is a carpet that satisfies the constraints, output the area of this carpet. If not, output -1. The output should have an absolute error of at most $10^{-3}$.\n-----Examples-----\nSample Input 1:\n1 1 1.732050\nSample Output 1:\n1.732050808\nSample Input 2:\n1 1 3.0\nSample Output 2:\n-1\n\ndef",
        "answer": "def area(a,b,c):\n    if a+b<c or a+c<b or b+c<a:\n        return -1\n    else:\n        return (a+b+c)/2",
        "difficulty": "competition"
    },
    {
        "task_id": 3258,
        "prompt": "Complete the Python function given the prompt below:Everyone knows that cats love to eat mice. Naturally, when given the opportunity, any cat wants to eat as many mice as possible.\nIt just so happens that Cartesian Cat lives on the Cartesian Plane with her home located at $(0, 0)$. Obviously, none of the mice live at this location, they are smarter than that! However, the mice aren\u2019t terribly smart. They live on the plane with Cartesian Cat and at time $t = 0$, stick their heads above the ground, in sight of Cartesian Cat. Each of the mice stays in sight at its location for a specified amount of time before ducking back underground, where Cartesian Cat can\u2019t get it.\nCartesian Cat has a plan. At time $t = 0$, she\u2019ll run straight towards a mouse, eat it instantaneously, and then head for another mouse, repeating the sequence until all the mice are eaten. She encounters two problems however: each time she eats a mouse her velocity reduces (due to her increased mass) by a constant multiplicative factor, $m$. That is, if her velocity is $v$ before eating a mouse, then after eating the mouse her velocity is $v\\cdot m$. Also, if she doesn\u2019t reach a mouse before it ducks underground, she won\u2019t be able to eat it. But she can eat a mouse if she reaches it precisely at the time it ducks underground.\nSince all cats are efficient by nature, help Cartesian Cat determine what her minimum initial velocity must be if she hopes to eat all of the mice. Assume that she eats the mice in an optimal order.\n-----Input-----\nThe first line of input contains a single positive integer, $n$ (where $1 \\le n \\le 15$), representing the number of mice. Each of the following $n$ lines describes a mouse given as three space-separated integers $x$, $y$, and $s$. This indicates that a mouse is located at $(x, y)$ and will duck underground at $t = s$ seconds. The values of $x$ and $y$ are in the range $[-1000, 1000]$ and $s$ is in the range $[1,10000]$. No two mice are at the same location. The last line of input contains a single floating-point number, $m$, specified to two decimal places, in the range $[0.75, 0.99]$, representing the multiplicative factor by which the cat slows down after eating a single mouse.\n-----Output-----\nOutput the minimum initial velocity (in units per second) necessary for Cartesian Cat to allow her to eat all of the mice, given that she eats them in the optimal order. Your answer should be correct within a relative or absolute error of $10^{-3}$.\n-----Examples-----\nSample Input 1:\n1\n3 4 2\n.75\nSample Output 1:\n2.4999999987500003\nSample Input 2:\n2\n0 100 10\n0 -100 100\n.80\nSample Output 2:\n9.999999999000002\n\ndef",
        "answer": "def cat_min_velocity(n, x, y, s, m):\n    # Write your code here\n    pass",
        "difficulty": "competition"
    },
    {
        "task_id": 3259,
        "prompt": "Complete the Python function given the prompt below:Aladin was walking down the path one day when he found the strangest thing: $N$ empty boxes right next to a weird alien machine. After a bit of fumbling around he got the machine to do something. The machine now accepts 4 integers $L$, $R$, $A$ and $B$. After that hitting the big red glowing button labeled \u201cNE DIRAJ\u201d1 causes the machine to go crazy and follow the next routine:\n - Set the number of stones in the box labeled $L$ to $A$ modulo $B$.\n - It procedes to fly to the box labeled $L+1$, and set the number of stones there to $(2\\cdot A) \\mod B$.\n - It procedes to fly to the box labeled $L+2$, and set the number of stones there to $(3\\cdot A) \\mod B$.\n - Generaly, it visits each box labeled between $L$ and $R$, and set the number of stones there to $( (X - L + 1)\\cdot A) \\mod B$, where $X$ is the box label.\n - After it visits the box labeled $R$. It settles down for further instructions.\nDuring the game Aladin wonders what is the total number of stones in some range of boxes.\nWrite a program that simulates the device and answers Aladin\u2019s questions.\n-----Input-----\nThe first line contains two integers $N$ and $Q$ ($1 \\leq N \\leq 1000000000$) ($1 \\leq Q \\leq 50000$), number of boxes and number of queries.\nThe next $Q$ lines contain information about the simulation.\nIf the line starts with 1, than it follows the format \u201c1 $L$ $R$ $A$ $B$\u201d ($1 \\leq L \\leq R \\leq N$) ($1 \\leq A, B \\leq 1000000$), meaning that Aladin keyed in numbers $L$, $R$, $A$ and $B$ in the device and allowed the device to do its job.\nIf the line starts with 2, then it follows the format \u201c2 L R\u201d ($1 \\leq L \\leq R \\leq N$), meaning that Aladin wonders how many stones in total are ther stones are in boxes labeled $L$ to $R$ (inclusive).\n-----Output-----\nFor each query beginning with 2 output the answer to that particular query. Queries should be processed in the order they are given in the input.First sample description\nThe boxes start containing $\\{ 0, 0, 0, 0, 0, 0\\} $, 0 stones in total. After that the device sets the stones to $\\{ 1 \\mod 2, 2 \\mod 2, 3 \\mod 2, 4 \\mod 2, 5 \\mod 2, 0\\} $ = $\\{ 1,0,1,0,1,0\\} $, or 3 stones in total.\n-----Examples-----\nSample Input 1:\n6 3\n2 1 6\n1 1 5 1 2\n2 1 6\nSample Output 1:\n0\n3\nSample Input 2:\n4 5\n1 1 4 3 4\n2 1 1\n2 2 2\n2 3 3\n2 4 4\nSample Output 2:\n3\n2\n1\n0\n\ndef",
        "answer": "def aladin(N, Q):\n    # Write your code here\n    pass",
        "difficulty": "competition"
    },
    {
        "task_id": 3260,
        "prompt": "Complete the Python function given the prompt below:loglogloglog. Brandon Greg Jr. is sometimes a drowning combinatorist.\nA permutation of length $n$ can be represented as some order of the integers $\\{ 1,2,\\ldots,n\\} $. A run of length $k$ in a permutation is $k$ consecutive elements that appear in increasing or decreasing order. For example, $[5,2,4,3,1]$ is a permutation of length $5$, where (among other runs), $[2,4]$ is a run of length $2$ and $[4,3,1]$ is a run of length $3$.\nBrandon found a way to count the number of permutations of length $n$ that have runs of length at most $k$. He wants you to do the same so he could check his answers. Since the numbers get very large, Brandon will ask for it modulo some prime $p$ of his choice.\n-----Input-----\nThe only line of input contains three space-separated integers $n, k, p$ ($1\\le n\\le 2000$, $2\\le k\\le 7$, $10^8<p\\le 10^9+9$), where $n$ is the length of the permutations, $k$ is the maximum length of a run, and $p$ is the prime of Brandon\u2019s choice.\n-----Output-----\nOutput one integer representing the number of permutations of length $n$ that have runs of length at most $k$, modulo $p$.\n-----Examples-----\nSample Input 1:\n1 7 1000000007\nSample Output 1:\n1\nSample Input 2:\n3 2 1000000007\nSample Output 2:\n4\n\ndef",
        "answer": "def count_permutations(n, k, p):\n    # Your code here\n    return 0",
        "difficulty": "competition"
    },
    {
        "task_id": 3261,
        "prompt": "Complete the Python function given the prompt below:Luka found a very unusual game board in his attic. Surprisingly, it consists of $R \\cdot C$ square cells. The rows are numbered $0$ to $R-1$ top to bottom and the columns $0$ to $C-1$ left to right.\nWhat makes the board unusual is the way in which the cells are coloured. Each cell is either grey or white:\n - white, if the row and column numbers of the cell, when represented in binary, have at least one digit 1 in the same position. For example, the cell $(4, 5)$ would be white.\n - grey, otherwise. For example, the cell $(2, 5)$ would be grey.\nThe following image shows a board of size 10\u00b710. \nLuka\u2019s hedgehog likes walking on this unusual board and does it in an unusual way. The hedgehog starts his walk in the cell $(0, 0)$ and continues in the zig-zag pattern as in the second image above. While the hedgehog is walking, Luka counts how many grey squares it visited.\nAfter visiting $K$ squares, the hedgehog gets tired and falls asleep. Luka then goes to bed too, happy that he was able count the grey squares.\nKnowing the dimensions of the board and the number $K$ beforehand, however, it is possible to write a program that calculates the result faster. This is your task.\n-----Input-----\nThe first line contains two integers $R$ ($1 \\le R \\le 1000000$) and $C$ ($1 \\le C \\le 1000000$), the dimensions of the board.\nThe second line contains the integer $K$ ($1 \\le K \\le R \\cdot C$), the total number of squares the hedgehog visits.\nNote that this number may not fit in a 32-bit integer.\n-----Output-----\nOutput the number of grey cells the hedgehog visits.\n-----Examples-----\nSample Input 1:\n10 10\n6\nSample Output 1:\n5\nSample Input 2:\n3 5\n11\nSample Output 2:\n8\n\ndef",
        "answer": "def count_grey_cells(r, c, k):\n    return bin(r * c).count('1') * k",
        "difficulty": "competition"
    },
    {
        "task_id": 3262,
        "prompt": "Complete the Python function given the prompt below:You run a delivery company and must deploy a fleet of vehicles to deliver goods to clients. All of the goods and delivery trucks are initially located at your warehouse. \nThe road network consists of one-way streets between junctions. The warehouse and clients are all located at a junction. You know the driving time across each street.\nYou guarantee extremely fast shipping: the trucks start driving immediately at the start of the day and each client $i$ will receive the package at time $T_ i$ where $T_ i$ is the shortest possible driving time for a truck to go from the warehouse to the location of the client $i$.\nWhat is the minimum number of trucks you have to deploy to ensure this guarantee is met? That is, what is the minimum number of trucks such that it is possible to give each truck a driving route so that every client $i$ is visited by some truck at time $T_ i$. Assume it takes no time to load the trucks with the appropriate goods at the start of the day, and it takes no time to drop goods off at a client once the truck arrives at the client. These goods are small enough that each truck can carry goods for as many clients as necessary.\n-----Input-----\nThe input consists of a single test case. The first line of each test case consists of three numbers $N$, $M$, and $C$. Here $N$ denotes the number of junctions in the road network ($2 \\leq N \\leq 10^3$), $M$ denotes the number of streets ($1 \\leq M \\leq 10^5$), and $C$ denotes the number of clients ($1 \\leq C \\leq 300$, $C < N$).\nThe junctions are numbered $0$ to $N-1$. The warehouse is always at junction $0$. The second line consists of $C$ distinct integers between $1$ and $N-1$ indicating the junctions where the clients reside.\nThe rest of the input consists of $M$ lines, each containing integers $U,V,W$ where $0 \\leq U,V \\leq N-1$ and $U \\neq V$. This indicates there is a one-way street from $U$ to $V$ with driving time $W$. Each street\u2019s driving time $W$ satisfies $1 \\leq W \\leq 10^9$. It will always be possible to reach every client from the warehouse.\nThere will be at most one street from a vertex $U$ to another vertex $V$, but there may be streets from both $U$ to $V$ and from $V$ to $U$.\n-----Output-----\nOutput a single integer that is the minimum number of vehicles required to ensure each client $i$ is visited at time $T_ i$ by some vehicle.\n-----Explanations of Sample Inputs-----\nIn the first sample, one vehicle can follow the path $(0,1,2)$ and the other can follow $(0,3)$. In the second sample, the only solution is to use paths $(0,1)$, $(0,2)$, and $(0,3)$. In the final sample, one vehicle can follow $(0,1)$, another $(0,4,6)$, and the last one $(0,2,3,5,7)$.\n-----Examples-----\nSample Input 1:\n4 5 3\n1 2 3\n0 1 1\n0 3 1\n0 2 2\n1 2 1\n3 2 1\nSample Output 1:\n2\nSample Input 2:\n4 5 3\n1 2 3\n0 1 1\n0 3 1\n0 2 1\n1 2 1\n3 2 1\nSample Output 2:\n3\n\ndef",
        "answer": "def solution(N, M, C):\n    # Write your code here",
        "difficulty": "competition"
    },
    {
        "task_id": 3263,
        "prompt": "Complete the Python function given the prompt below:Fluttershy has been put in charge of a high-end boutique in Manehattan, and she needs to deal with the customers that come in.\nIt is well-known that Fluttershy is, well, very shy. So shy, in fact, that the only time she feels comfortable dealing with a customer is when she is wearing the same type of clothing as that customer! When she wears a particular type of clothing, she is able to assume the customer\u2019s personality and make a sale. There are $M$ types of clothing customers can wear.\nShe knows that $N$ customers will come today. The $i^\\text {th}$ customer wears clothing of type $C_ i$ and will arrive exactly $T_ i$ moments of time after the opening of the shop. The citizens of Manehattan are all snooty and expect nothing but the speediest service, so if Fluttershy is not ready to serve them the moment they arrive, they will immediately leave. On the other hoof, Fluttershy is a very efficient salespony; we can assume that Fluttershy can make a sale in zero time. (This also means that if multiple customers arrive at the same moment of time, Fluttershy can serve all of them.)\nOriginally, Fluttershy is not wearing any clothing. To wear some clothing, she needs to follow the following process:\n - To put on clothing of type $i$, she needs to first ensure that she is not wearing any clothing. Then, she goes to the dressing room and takes $P_ i$ moments of time to put on the clothing. (That is, if she starts to put on clothing at time $t$, she is ready by time $t + P_ i$.)\n - To remove clothing of type $i$, she goes to the dressing room and takes $R_ i$ moments of time to remove the clothing. (That is, if she starts to remove clothing at time $t$, she has removed it by time $t + R_ i$ and can immediately start to put on another clothing.)\nWhat is the maximum number of ponies she can serve?\n-----Input-----\nThe first line of input contains two integers, $N$ ($1 \\leq N \\leq 200000$) and $M$ ($1 \\leq M \\leq N$), the number of customers that will arrive today, and the number of different types of clothing customers can wear, respectively.\nThe second line of input contains $M$ integers, $P_1, P_2, \\dots, P_ M$ ($1 \\leq P_ i \\leq 10^{18}$), the required moments of time to put on each type of clothing.\nThe third line of input contains $M$ integers, $R_1, R_2, \\dots, R_ M$ ($1 \\leq R_ i \\leq 10^{18}$), the required moments of time to remove each type of clothing.\nThe next $N$ lines of input contain the descriptions of the customers. In particular, the $i^\\text {th}$ of these lines contains two integers $C_ i$ ($1\\leq C_ i \\leq M$) and $T_ i$ ($1 \\leq T_ i \\leq 10^{18}$), denoting that the $i^\\text {th}$ customer is of type $C_ i$ and will arrive exactly $T_ i$ moments of time after the opening of the shop.\nIt is guaranteed that for all positive integers $i < N$, $T_ i \\leq T_{i+1}$, and for all positive integers $k \\leq M$, there exists some $j$ such that $C_ j = k$.\n-----Output-----\nOutput a single integer on a line by itself, the maximum number of customers Fluttershy can serve.\n-----Examples-----\nSample Input 1:\n4 3\n10 20 30\n5 5 10\n2 20\n1 30\n1 32\n3 120\nSample Output 1:\n3\nSample Input 2:\n3 1\n10\n10\n1 10\n1 10\n1 10\nSample Output 2:\n3\n\ndef",
        "answer": "def fluttershy(n, m, p, r, customers):\n    p = [0] + p\n    r = [0] + r\n    p_max = [0] * (m + 1)\n    r_max = [0] * (m + 1)\n    for i in range(1, m + 1):\n        p_max[i] = max(p_max[i - 1], p[i])\n        r_max[i] = max(r_max[i - 1], r[i])\n    p_max = [0] + p_max\n    r_max = [0] + r_max\n    p_max[0] = 0\n    r_max[0] = 0\n    p_max[1] = p[1]\n    r_max[1] = r[1]\n    p_max[2] = p[2]\n    r_max[2] = r[2]\n    p_max[3] = p[3]\n    r_max[3] = r[3]\n    p_max[4] = p[4]\n    r_max[4] = r[4]\n    p_max[5] = p[5]\n    r_max[5] = r[5]\n    p_max[6] = p[6]\n    r_max[6] = r[6]\n    p_max[7] = p[7]\n    r_max[7] = r[7]\n    p_max[8] = p[8]\n    r_max[8] = r[8]\n    p_max[9] = p[9]\n    r_max[9] = r[9]\n    p_max[10] = p[10]\n    r_max[10] = r[10]\n    p_max[11] = p[11]\n    r_max[11] = r[11]\n    p_max[12] = p[12]\n    r_max[12] = r[12]\n    p_max[13] = p[13]\n    r_max[13]",
        "difficulty": "competition"
    },
    {
        "task_id": 3264,
        "prompt": "Complete the Python function given the prompt below:Mirko and Slavko are playing a game. Mirko\u2019s turn is first and he chooses a non-empty set of pairs of numbers between $1$ and $N$ (inclusive) under the condition that the numbers that comprise a pair are mutually relatively prime. The numbers that comprise a pair must be different. For example, for $N = 5$, Mirko could have chosen the following set of pairs: $\\{ \\{ 1, 2\\}, \\{ 3, 4\\}, \\{ 2, 5\\}, \\{ 3, 5\\} \\} $.\nSlavko\u2019s turn is second and his goal is to find a partition for Mirko\u2019s set of pairs. Mirko\u2019s set of pairs has a partition if an integer $x$ from the set $\\{ 2, 3, \\ldots, N \\} $ exists such that, for each pair $\\{ a, b\\} $, one of the following holds:\n - $a, b < x$\n - $a, b \\geq x$\nFor example, a set of pairs $\\{ \\{ 1, 2\\}, \\{ 3, 4\\} \\} $ has a partition $x = 3$. If a partition exists, Slavko will surely find it.\nMirko wins if Slavko can\u2019t find a partition for his set. Determine how many different sets of pairs exists that Mirko can initially choose and be sure of his victory. Given the fact that the total number of sets can be very large, output the number modulo $1000000000$.\n-----Input-----\nThe first line of input contains the integer $N$ ($1 \\leq $N$ \\leq 20$).\n-----Output-----\nThe first and only line of output must contain the required number.\n-----Examples-----\nSample Input 1:\n2\nSample Output 1:\n1\nSample Input 2:\n3\nSample Output 2:\n5\n\ndef",
        "answer": "def solve(N):\n    return 0",
        "difficulty": "competition"
    },
    {
        "task_id": 3265,
        "prompt": "Complete the Python function given the prompt below:Alice and Bob spend this summer planning next year\u2019s summer vacation. They want to travel from the old city of A-town to the popular summer resort B-ville, but they haven\u2019t yet decided which other places to visit en route. There are $N$ places to visit in total, numbered from $1$ to\u00a0$N$. A-town is place number\u00a0$1$ and B-ville is place number\u00a0$N$. Some places are linked by one-directional connections; a pair of places can be linked by multiple such connections.\nAlice and Bob are currently in A-town. Each day they will decide where to travel next by choosing uniformly at random among the connections leaving their current place. Once they reach B-ville, they stop.\nAlice and Bob want to book their trip back on a day where they are in B-ville with $95\\% $ probability. And they really mean exactly$95\\% $ \u2013 no more, no less! There is a $10$ day window when train tickets are affordable; if their return trip does no occur within that window they might as well cancel the entire vacation.\nYou are given a positive integer $L$ and have to find a number $T$ with $L \\leq T \\leq L + 9$ such that the probability of Alice and Bob being in B-ville after $T$ days is exactly $95\\% $. If there is more than one valid $T$, report smallest one.\n-----Input-----\nThe first line contains two integers $N$ and $L$, with $2 \\leq N \\leq 100$ and $1 \\leq L \\leq 10^6$. The following $N$ lines each contain $N$ integers. The $j$th integer on the $i$th line contains the number $a_{ij}$ of one-directional connections from place $i$ to place $j$, where $0 \\leq a_{ij} \\leq 10^9$.\nThere are no connections from a place to itself. No connections leave B-ville (the $N$th place). All other places have at least one outgoing connection, so Alice and Bob will never be stuck.\n-----Output-----\nPrint the integer $T$ as described above. If no solution exists, print $-1$.\n-----Examples-----\nSample Input 1:\n3 1\n0 11 9\n1 0 10\n0 0 0\nSample Output 1:\n2\nSample Input 2:\n4 3\n0 1 0 19\n0 0 2 0\n0 5 0 3\n0 0 0 0\nSample Output 2:\n-1\n\ndef",
        "answer": "def solve(N, L):\n    # Write your code here\n    pass",
        "difficulty": "competition"
    },
    {
        "task_id": 3266,
        "prompt": "Complete the Python function given the prompt below:-----Input-----\nThe first line of input contains a line with four non-negative integers, $2 \\le n \\le 500$, $0 \\le m \\le 10000$, $0 \\le s \\le n-1$ and $0 \\le t \\le n-1$, separated by single spaces, where $n$ is the numbers of nodes in the graph, $m$ is the number of edges, $s$ is the source and $t$ is the sink ($s \\ne t$). Nodes are numbered from $0$ to $n-1$. Then follow $m$ lines, each line consisting of three (space-separated) integers $u$, $v$ and $c$ indicating that there is an edge from $u$ to $v$ in the graph with capacity $1 \\le c \\le 10^{8}$.\n-----Output-----\nThe output should begin with a line containing three integers $n$, $f$, and $m\u2019$. $n$ is the number of nodes in the flow graph (same as in input), $f$ is the size of a maximum flow from node $s$ to node $t$ in the flow graph, and $m\u2019$ is the number of edges used in the solution. You may assume that $f < 2^{31}$.\nThen there should be $m\u2019$ lines, each containing three integers $u$, $v$ and $x$, indicating that $x$ units of flow are transported from $u$ to $v$. $x$ must be greater than $0$ and at most as big as the capacity from $u$ to $v$. Each pair of vertices $(u, v)$ should be given at most once in the output.\n-----Examples-----\nSample Input 1:\n4 5 0 3\n0 1 10\n1 2 1\n1 3 1\n0 2 1\n2 3 10\nSample Output 1:\n4 3 5\n0 1 2\n0 2 1\n1 2 1\n1 3 1\n2 3 2\nSample Input 2:\n2 1 0 1\n0 1 100000\nSample Output 2:\n2 100000 1\n0 1 100000\n\ndef",
        "answer": "def maxFlow(n, m, s, t):\n    # Write your code here\n    pass\n",
        "difficulty": "competition"
    },
    {
        "task_id": 3267,
        "prompt": "Complete the Python function given the prompt below:Mirko and Slavko are playing a chess like game. The game is played on a non-standard chess board sized $R$ rows by $C$ columns. Each player starts with some number of chess kings. In chess kings can move from their current field to any of the $8$ neighbouring fields. Player spread is defined as the complete sum of distances between all pairs of pieces of the given player. The distance between two pieces is the smallest number of moves required for both pieces to reach the same field. No actual moves are performed when calculating the distance and as such enemy pieces do not influence the result. Mirko knows that the spread is a vital piece of strategic information and would like you to make him a program that will calculate both his and Slavko\u2019s spread.\n-----Input-----\nThe first line of input contains two integers $R$ and $C$ ($1 \\le R, C \\le 1000$), number of rows and columns. Next $R$ lines contain $C$ characters each. Character \u2018M\u2019 denotes Mirko\u2019s piece, \u2018S\u2019 Slavko\u2019s piece and \u2018.\u2019 denotes an empty field. There is at least one piece per player on the board. Otherwise the game would be over.\n-----Output-----\nIn the first and only line of output you need to print exactly two integers. The first integers is the spread of Mirko\u2019s and the second Slavko\u2019s pieces.\n-----Examples-----\nSample Input 1:\n2 3\nSMS\nMMS\nSample Output 1:\n3 5\nSample Input 2:\n2 3\nS.M\nM..\nSample Output 2:\n2 0\n\ndef",
        "answer": "def spread(R,C):\n    # your code goes here\n    return spread",
        "difficulty": "competition"
    }
]