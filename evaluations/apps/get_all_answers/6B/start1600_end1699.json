[
    {
        "task_id": 1600,
        "prompt": "Complete the Python function given the prompt below:One day Squidward, Spongebob and Patrick decided to go to the beach. Unfortunately, the weather was bad, so the friends were unable to ride waves. However, they decided to spent their time building sand castles.\nAt the end of the day there were n castles built by friends. Castles are numbered from 1 to n, and the height of the i-th castle is equal to h_{i}. When friends were about to leave, Squidward noticed, that castles are not ordered by their height, and this looks ugly. Now friends are going to reorder the castles in a way to obtain that condition h_{i} \u2264 h_{i} + 1 holds for all i from 1 to n - 1.\nSquidward suggested the following process of sorting castles:   Castles are split into blocks\u00a0\u2014 groups of consecutive castles. Therefore the block from i to j will include castles i, i + 1,..., j. A block may consist of a single castle.  The partitioning is chosen in such a way that every castle is a part of exactly one block.  Each block is sorted independently from other blocks, that is the sequence h_{i}, h_{i} + 1,..., h_{j} becomes sorted.  The partitioning should satisfy the condition that after each block is sorted, the sequence h_{i} becomes sorted too. This may always be achieved by saying that the whole sequence is a single block. \nEven Patrick understands that increasing the number of blocks in partitioning will ease the sorting process. Now friends ask you to count the maximum possible number of blocks in a partitioning that satisfies all the above requirements.\n-----Input-----\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 100 000)\u00a0\u2014 the number of castles Spongebob, Patrick and Squidward made from sand during the day.\nThe next line contains n integers h_{i} (1 \u2264 h_{i} \u2264 10^9). The i-th of these integers corresponds to the height of the i-th castle.\n-----Output-----\nPrint the maximum possible number of blocks in a valid partitioning.\n-----Examples-----\nInput\n3\n1 2 3\nOutput\n3\nInput\n4\n2 1 3 2\nOutput\n2\n-----Note-----\nIn the first sample the partitioning looks like that: [1][2][3].\n [Image] \nIn the second sample the partitioning is: [2, 1][3, 2]\n [Image]\n\ndef",
        "answer": "def solution(n, h):\n    # your code here\n    return 0\nif __name__ == '__main__':\n    n = int(input())\n    h = list(map(int, input().split()))\n    print(solution(n, h))\n",
        "difficulty": "interview"
    },
    {
        "task_id": 1601,
        "prompt": "Complete the Python function given the prompt below:This is a harder version of the problem. In this version, $n \\le 50\\,000$.\nThere are $n$ distinct points in three-dimensional space numbered from $1$ to $n$. The $i$-th point has coordinates $(x_i, y_i, z_i)$. The number of points $n$ is even.\nYou'd like to remove all $n$ points using a sequence of $\\frac{n}{2}$ snaps. In one snap, you can remove any two points $a$ and $b$ that have not been removed yet and form a perfectly balanced pair. A pair of points $a$ and $b$ is perfectly balanced if no other point $c$ (that has not been removed yet) lies within the axis-aligned minimum bounding box of points $a$ and $b$.\nFormally, point $c$ lies within the axis-aligned minimum bounding box of points $a$ and $b$ if and only if $\\min(x_a, x_b) \\le x_c \\le \\max(x_a, x_b)$, $\\min(y_a, y_b) \\le y_c \\le \\max(y_a, y_b)$, and $\\min(z_a, z_b) \\le z_c \\le \\max(z_a, z_b)$. Note that the bounding box might be degenerate. \nFind a way to remove all points in $\\frac{n}{2}$ snaps.\n-----Input-----\nThe first line contains a single integer $n$ ($2 \\le n \\le 50\\,000$; $n$ is even), denoting the number of points.\nEach of the next $n$ lines contains three integers $x_i$, $y_i$, $z_i$ ($-10^8 \\le x_i, y_i, z_i \\le 10^8$), denoting the coordinates of the $i$-th point.\nNo two points coincide.\n-----Output-----\nOutput $\\frac{n}{2}$ pairs of integers $a_i, b_i$ ($1 \\le a_i, b_i \\le n$), denoting the indices of points removed on snap $i$. Every integer between $1$ and $n$, inclusive, must appear in your output exactly once.\nWe can show that it is always possible to remove all points. If there are many solutions, output any of them.\n-----Examples-----\nInput\n6\n3 1 0\n0 3 0\n2 2 0\n1 0 0\n1 3 0\n0 1 0\nOutput\n3 6\n5 1\n2 4\nInput\n8\n0 1 1\n1 0 1\n1 1 0\n1 1 1\n2 2 2\n3 2 2\n2 3 2\n2 2 3\nOutput\n4 5\n1 6\n2 7\n3 8\n-----Note-----\nIn the first example, here is what points and their corresponding bounding boxes look like (drawn in two dimensions for simplicity, as all points lie on $z = 0$ plane). Note that order of removing matters: for example, points $5$ and $1$ don't form a perfectly balanced pair initially, but they do after point $3$ is removed.  [Image]\n\ndef",
        "answer": "def snap(n, x, y, z):\n    if n == 1:\n        return [0]\n    if n == 2:\n        return [0, 1]\n    if n == 3:\n        return [0, 1, 2]\n    if n == 4:\n        return [0, 1, 2, 3]\n    if n == 5:\n        return [0, 1, 2, 3, 4]\n    if n == 6:\n        return [0, 1, 2, 3, 4, 5]\n    if n == 7:\n        return [0, 1, 2, 3, 4, 5, 6]\n    if n == 8:\n        return [0, 1, 2, 3, 4, 5, 6, 7]\n    if n == 9:\n        return [0, 1, 2, 3, 4, 5, 6, 7, 8]\n    if n == 10:\n        return [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    if n == 11:\n        return [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    if n == 12:\n        return [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n    if n == 13:\n        return [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    if n == 14:\n        return [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n    if n == 15:\n        return [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n    if n == 16:\n        return [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n    if n == 17:\n        return [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15",
        "difficulty": "interview"
    },
    {
        "task_id": 1602,
        "prompt": "Complete the Python function given the prompt below:Anu has created her own function $f$: $f(x, y) = (x | y) - y$ where $|$ denotes the bitwise OR operation. For example, $f(11, 6) = (11|6) - 6 = 15 - 6 = 9$. It can be proved that for any nonnegative numbers $x$ and $y$ value of $f(x, y)$ is also nonnegative. \nShe would like to research more about this function and has created multiple problems for herself. But she isn't able to solve all of them and needs your help. Here is one of these problems.\nA value of an array $[a_1, a_2, \\dots, a_n]$ is defined as $f(f(\\dots f(f(a_1, a_2), a_3), \\dots a_{n-1}), a_n)$ (see notes). You are given an array with not necessarily distinct elements. How should you reorder its elements so that the value of the array is maximal possible?\n-----Input-----\nThe first line contains a single integer $n$ ($1 \\le n \\le 10^5$).\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($0 \\le a_i \\le 10^9$). Elements of the array are not guaranteed to be different.\n-----Output-----\nOutput $n$ integers, the reordering of the array with maximum value. If there are multiple answers, print any.\n-----Examples-----\nInput\n4\n4 0 11 6\nOutput\n11 6 4 0\nInput\n1\n13\nOutput\n13 \n-----Note-----\nIn the first testcase, value of the array $[11, 6, 4, 0]$ is $f(f(f(11, 6), 4), 0) = f(f(9, 4), 0) = f(9, 0) = 9$.\n$[11, 4, 0, 6]$ is also a valid answer.\n\ndef",
        "answer": "def f(x, y):\n    return x | y",
        "difficulty": "interview"
    },
    {
        "task_id": 1603,
        "prompt": "Complete the Python function given the prompt below:Kuriyama Mirai has killed many monsters and got many (namely n) stones. She numbers the stones from 1 to n. The cost of the i-th stone is v_{i}. Kuriyama Mirai wants to know something about these stones so she will ask you two kinds of questions:  She will tell you two numbers, l and r\u00a0(1 \u2264 l \u2264 r \u2264 n), and you should tell her $\\sum_{i = l}^{r} v_{i}$.  Let u_{i} be the cost of the i-th cheapest stone (the cost that will be on the i-th place if we arrange all the stone costs in non-decreasing order). This time she will tell you two numbers, l and r\u00a0(1 \u2264 l \u2264 r \u2264 n), and you should tell her $\\sum_{i = l}^{r} u_{i}$. \nFor every question you should give the correct answer, or Kuriyama Mirai will say \"fuyukai desu\" and then become unhappy.\n-----Input-----\nThe first line contains an integer n\u00a0(1 \u2264 n \u2264 10^5). The second line contains n integers: v_1, v_2,..., v_{n}\u00a0(1 \u2264 v_{i} \u2264 10^9) \u2014 costs of the stones. \nThe third line contains an integer m\u00a0(1 \u2264 m \u2264 10^5) \u2014 the number of Kuriyama Mirai's questions. Then follow m lines, each line contains three integers type, l and r\u00a0(1 \u2264 l \u2264 r \u2264 n;\u00a01 \u2264 type \u2264 2), describing a question. If type equal to 1, then you should output the answer for the first question, else you should output the answer for the second one.\n-----Output-----\nPrint m lines. Each line must contain an integer \u2014 the answer to Kuriyama Mirai's question. Print the answers to the questions in the order of input.\n-----Examples-----\nInput\n6\n6 4 2 7 2 7\n3\n2 3 6\n1 3 4\n1 1 6\nOutput\n24\n9\n28\nInput\n4\n5 5 2 3\n10\n1 2 4\n2 1 4\n1 1 1\n2 1 4\n2 1 2\n1 1 1\n1 3 3\n1 1 3\n1 4 4\n1 2 2\nOutput\n10\n15\n5\n15\n5\n5\n2\n12\n3\n5\n-----Note-----\nPlease note that the answers to the questions may overflow 32-bit integer type.\n\ndef",
        "answer": "def solve():\n    n = int(input())\n    stones = list(map(int, input().split()))\n    m = int(input())\n    for _ in range(m):\n        type, l, r = map(int, input().split())\n        if type == 1:\n            print(sum(stones[l-1:r]))\n        else:\n            print(sum(stones[l-1:r]))\nsolve()\n",
        "difficulty": "interview"
    },
    {
        "task_id": 1604,
        "prompt": "Complete the Python function given the prompt below:Ori and Sein have overcome many difficult challenges. They finally lit the Shrouded Lantern and found Gumon Seal, the key to the Forlorn Ruins. When they tried to open the door to the ruins... nothing happened.\nOri was very surprised, but Sein gave the explanation quickly: clever Gumon decided to make an additional defence for the door.\nThere are $n$ lamps with Spirit Tree's light. Sein knows the time of turning on and off for the $i$-th lamp\u00a0\u2014 $l_i$ and $r_i$ respectively. To open the door you have to choose $k$ lamps in such a way that there will be a moment of time when they all will be turned on.\nWhile Sein decides which of the $k$ lamps to pick, Ori is interested: how many ways there are to pick such $k$ lamps that the door will open? It may happen that Sein may be wrong and there are no such $k$ lamps. The answer might be large, so print it modulo $998\\,244\\,353$.\n-----Input-----\nFirst line contains two integers $n$ and $k$ ($1 \\le n \\le 3 \\cdot 10^5$, $1 \\le k \\le n$)\u00a0\u2014 total number of lamps and the number of lamps that must be turned on simultaneously.\nNext $n$ lines contain two integers $l_i$ ans $r_i$ ($1 \\le l_i \\le r_i \\le 10^9$)\u00a0\u2014 period of time when $i$-th lamp is turned on.\n-----Output-----\nPrint one integer\u00a0\u2014 the answer to the task modulo $998\\,244\\,353$.\n-----Examples-----\nInput\n7 3\n1 7\n3 8\n4 5\n6 7\n1 3\n5 10\n8 9\nOutput\n9\nInput\n3 1\n1 1\n2 2\n3 3\nOutput\n3\nInput\n3 2\n1 1\n2 2\n3 3\nOutput\n0\nInput\n3 3\n1 3\n2 3\n3 3\nOutput\n1\nInput\n5 2\n1 3\n2 4\n3 5\n4 6\n5 7\nOutput\n7\n-----Note-----\nIn first test case there are nine sets of $k$ lamps: $(1, 2, 3)$, $(1, 2, 4)$, $(1, 2, 5)$, $(1, 2, 6)$, $(1, 3, 6)$, $(1, 4, 6)$, $(2, 3, 6)$, $(2, 4, 6)$, $(2, 6, 7)$.\nIn second test case $k=1$, so the answer is 3.\nIn third test case there are no such pairs of lamps.\nIn forth test case all lamps are turned on in a time $3$, so the answer is 1.\nIn fifth test case there are seven sets of $k$ lamps: $(1, 2)$, $(1, 3)$, $(2, 3)$, $(2, 4)$, $(3, 4)$, $(3, 5)$, $(4, 5)$.\n\ndef",
        "answer": "def lamps(n, k):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if k == 1:\n        return lamps(n - 1, 1) + lamps(n - 1, 2) + lamps(n - 1, 3)\n    if k == 2:\n        return lamps(n - 1, 1) * 2 + lamps(n - 1, 2) * 2\n    if k == 3:\n        return lamps(n - 1, 1) * 3 + lamps(n - 1, 2) * 3 + lamps(n - 1, 3) * 3\n    if k == 4:\n        return lamps(n - 1, 1) * 4 + lamps(n - 1, 2) * 4 + lamps(n - 1, 3) * 4 + lamps(n - 1, 4) * 4\n    if k == 5:\n        return lamps(n - 1, 1) * 5 + lamps(n - 1, 2) * 5 + lamps(n - 1, 3) * 5 + lamps(n - 1, 4) * 5 + lamps(n - 1, 5) * 5\n    if k == 6:\n        return lamps(n - 1, 1) * 6 + lamps(n - 1, 2) * 6 + lamps(n - 1, 3) * 6 + lamps(n - 1, 4) * 6 + lamps(n - 1, 5) * 6 + lamps(n - 1, 6) * 6\n    if k == 7:\n        return lamps(n - 1, 1) * 7 + lamps(n - 1, 2) * 7 + lamps(n - 1, 3) * 7 + lamps(n - 1, 4) * 7 + lamps(n - 1, 5) * 7 + lamps(n - 1, 6) * 7 + lamps(n - 1, 7) * 7\n    if k == 8:\n        return lamps(n - 1, 1) * 8 + lamps(n - 1, 2) * 8 + lamps(n - 1, 3) * 8 + lamps(n - 1, 4) * 8 + lamps(n - 1, 5) * 8 + lamps(n - 1, 6) *",
        "difficulty": "interview"
    },
    {
        "task_id": 1605,
        "prompt": "Complete the Python function given the prompt below:We call a string good, if after merging all the consecutive equal characters, the resulting string is palindrome. For example, \"aabba\" is good, because after the merging step it will become \"aba\".\nGiven a string, you have to find two values:  the number of good substrings of even length;  the number of good substrings of odd length. \n-----Input-----\nThe first line of the input contains a single string of length n (1 \u2264 n \u2264 10^5). Each character of the string will be either 'a' or 'b'.\n-----Output-----\nPrint two space-separated integers: the number of good substrings of even length and the number of good substrings of odd length.\n-----Examples-----\nInput\nbb\nOutput\n1 2\nInput\nbaab\nOutput\n2 4\nInput\nbabb\nOutput\n2 5\nInput\nbabaa\nOutput\n2 7\n-----Note-----\nIn example 1, there are three good substrings (\"b\", \"b\", and \"bb\"). One of them has even length and two of them have odd length.\nIn example 2, there are six good substrings (i.e. \"b\", \"a\", \"a\", \"b\", \"aa\", \"baab\"). Two of them have even length and four of them have odd length.\nIn example 3, there are seven good substrings (i.e. \"b\", \"a\", \"b\", \"b\", \"bb\", \"bab\", \"babb\"). Two of them have even length and five of them have odd length.\nDefinitions\nA substring s[l, r] (1 \u2264 l \u2264 r \u2264 n) of string s = s_1s_2... s_{n} is string s_{l}s_{l} + 1... s_{r}.\nA string s = s_1s_2... s_{n} is a palindrome if it is equal to string s_{n}s_{n} - 1... s_1.\n\ndef",
        "answer": "def count_good_substrings(s):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 1606,
        "prompt": "Complete the Python function given the prompt below:Little Chris is a huge fan of linear algebra. This time he has been given a homework about the unusual square of a square matrix.\nThe dot product of two integer number vectors x and y of size n is the sum of the products of the corresponding components of the vectors. The unusual square of an n \u00d7 n square matrix A is defined as the sum of n dot products. The i-th of them is the dot product of the i-th row vector and the i-th column vector in the matrix A.\nFortunately for Chris, he has to work only in GF(2)! This means that all operations (addition, multiplication) are calculated modulo 2. In fact, the matrix A is binary: each element of A is either 0 or 1. For example, consider the following matrix A: $\\left(\\begin{array}{l l l}{1} & {1} & {1} \\\\{0} & {1} & {1} \\\\{1} & {0} & {0} \\end{array} \\right)$ \nThe unusual square of A is equal to (1\u00b71 + 1\u00b70 + 1\u00b71) + (0\u00b71 + 1\u00b71 + 1\u00b70) + (1\u00b71 + 0\u00b71 + 0\u00b70) = 0 + 1 + 1 = 0.\nHowever, there is much more to the homework. Chris has to process q queries; each query can be one of the following:   given a row index i, flip all the values in the i-th row in A;  given a column index i, flip all the values in the i-th column in A;  find the unusual square of A. \nTo flip a bit value w means to change it to 1 - w, i.e., 1 changes to 0 and 0 changes to 1.\nGiven the initial matrix A, output the answers for each query of the third type! Can you solve Chris's homework?\n-----Input-----\nThe first line of input contains an integer n (1 \u2264 n \u2264 1000), the number of rows and the number of columns in the matrix A. The next n lines describe the matrix: the i-th line contains n space-separated bits and describes the i-th row of A. The j-th number of the i-th line a_{ij} (0 \u2264 a_{ij} \u2264 1) is the element on the intersection of the i-th row and the j-th column of A.\nThe next line of input contains an integer q (1 \u2264 q \u2264 10^6), the number of queries. Each of the next q lines describes a single query, which can be one of the following:   1 i \u2014 flip the values of the i-th row;  2 i \u2014 flip the values of the i-th column;  3 \u2014 output the unusual square of A. \nNote: since the size of the input and output could be very large, don't use slow output techniques in your language. For example, do not use input and output streams (cin, cout) in C++.\n-----Output-----\nLet the number of the 3rd type queries in the input be m. Output a single string s of length m, where the i-th symbol of s is the value of the unusual square of A for the i-th query of the 3rd type as it appears in the input.\n-----Examples-----\nInput\n3\n1 1 1\n0 1 1\n1 0 0\n12\n3\n2 3\n3\n2 2\n2 2\n1 3\n3\n3\n1 2\n2 1\n1 1\n3\nOutput\n01001\n\ndef",
        "answer": "def flip(A, i, j):\n    for k in range(len(A)):\n        A[k] ^= (1 << (i + j))",
        "difficulty": "interview"
    },
    {
        "task_id": 1607,
        "prompt": "Complete the Python function given the prompt below:You are given a grid, consisting of $2$ rows and $n$ columns. Each cell of this grid should be colored either black or white.\nTwo cells are considered neighbours if they have a common border and share the same color. Two cells $A$ and $B$ belong to the same component if they are neighbours, or if there is a neighbour of $A$ that belongs to the same component with $B$.\nLet's call some bicoloring beautiful if it has exactly $k$ components.\nCount the number of beautiful bicolorings. The number can be big enough, so print the answer modulo $998244353$.\n-----Input-----\nThe only line contains two integers $n$ and $k$ ($1 \\le n \\le 1000$, $1 \\le k \\le 2n$) \u2014 the number of columns in a grid and the number of components required.\n-----Output-----\nPrint a single integer \u2014 the number of beautiful bicolorings modulo $998244353$.\n-----Examples-----\nInput\n3 4\nOutput\n12\nInput\n4 1\nOutput\n2\nInput\n1 2\nOutput\n2\n-----Note-----\nOne of possible bicolorings in sample $1$: [Image]\n\ndef",
        "answer": "def count_beautiful_bicolorings(n, k):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 1608,
        "prompt": "Complete the Python function given the prompt below:Let's call a non-empty sequence of positive integers a_1, a_2... a_{k} coprime if the greatest common divisor of all elements of this sequence is equal to 1.\nGiven an array a consisting of n positive integers, find the number of its coprime subsequences. Since the answer may be very large, print it modulo 10^9 + 7.\nNote that two subsequences are considered different if chosen indices are different. For example, in the array [1, 1] there are 3 different subsequences: [1], [1] and [1, 1].\n-----Input-----\nThe first line contains one integer number n (1 \u2264 n \u2264 100000).\nThe second line contains n integer numbers a_1, a_2... a_{n} (1 \u2264 a_{i} \u2264 100000).\n-----Output-----\nPrint the number of coprime subsequences of a modulo 10^9 + 7.\n-----Examples-----\nInput\n3\n1 2 3\nOutput\n5\nInput\n4\n1 1 1 1\nOutput\n15\nInput\n7\n1 3 5 15 3 105 35\nOutput\n100\n-----Note-----\nIn the first example coprime subsequences are:   1  1, 2  1, 3  1, 2, 3  2, 3 \nIn the second example all subsequences are coprime.\n\ndef",
        "answer": "def coprime_subsequences(a):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 1609,
        "prompt": "Complete the Python function given the prompt below:Companies always have a lot of equipment, furniture and other things. All of them should be tracked. To do this, there is an inventory number assigned with each item. It is much easier to create a database by using those numbers and keep the track of everything.\nDuring an audit, you were surprised to find out that the items are not numbered sequentially, and some items even share the same inventory number! There is an urgent need to fix it. You have chosen to make the numbers of the items sequential, starting with 1. Changing a number is quite a time-consuming process, and you would like to make maximum use of the current numbering.\nYou have been given information on current inventory numbers for n items in the company. Renumber items so that their inventory numbers form a permutation of numbers from 1 to n by changing the number of as few items as possible. Let us remind you that a set of n numbers forms a permutation if all the numbers are in the range from 1 to n, and no two numbers are equal.\n-----Input-----\nThe first line contains a single integer n\u00a0\u2014 the number of items (1 \u2264 n \u2264 10^5).\nThe second line contains n numbers a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 10^5)\u00a0\u2014 the initial inventory numbers of the items.\n-----Output-----\nPrint n numbers\u00a0\u2014 the final inventory numbers of the items in the order they occur in the input. If there are multiple possible answers, you may print any of them.\n-----Examples-----\nInput\n3\n1 3 2\nOutput\n1 3 2 \nInput\n4\n2 2 3 3\nOutput\n2 1 3 4 \nInput\n1\n2\nOutput\n1 \n-----Note-----\nIn the first test the numeration is already a permutation, so there is no need to change anything.\nIn the second test there are two pairs of equal numbers, in each pair you need to replace one number.\nIn the third test you need to replace 2 by 1, as the numbering should start from one.\n\ndef",
        "answer": "def solution(n, a):\n    # your code here\n    return",
        "difficulty": "interview"
    },
    {
        "task_id": 1610,
        "prompt": "Complete the Python function given the prompt below:Permutation p is an ordered set of integers p_1,  p_2, ...,  p_{n}, consisting of n distinct positive integers, each of them doesn't exceed n. We'll denote the i-th element of permutation p as p_{i}. We'll call number n the size or the length of permutation p_1,  p_2, ...,  p_{n}.\nThe decreasing coefficient of permutation p_1, p_2,..., p_{n} is the number of such i (1 \u2264 i < n), that p_{i} > p_{i} + 1.\nYou have numbers n and k. Your task is to print the permutation of length n with decreasing coefficient k.\n-----Input-----\nThe single line contains two space-separated integers: n, k (1 \u2264 n \u2264 10^5, 0 \u2264 k < n) \u2014 the permutation length and the decreasing coefficient.\n-----Output-----\nIn a single line print n space-separated integers: p_1, p_2,..., p_{n} \u2014 the permutation of length n with decreasing coefficient k. \nIf there are several permutations that meet this condition, print any of them. It is guaranteed that the permutation with the sought parameters exists.\n-----Examples-----\nInput\n5 2\nOutput\n1 5 2 4 3\nInput\n3 0\nOutput\n1 2 3\nInput\n3 2\nOutput\n3 2 1\n\ndef",
        "answer": "def permutation(n, k):\n    if k == 0:\n        return [i for i in range(1, n+1)]\n    if k > n:\n        return []\n    if k == n:\n        return [i for i in range(1, n+1)]\n    if k == 1:\n        return [i for i in range(1, n+1) if i % 2 == 1]\n    if k == 2:\n        return [i for i in range(1, n+1) if i % 2 == 0]\n    if k == 3:\n        return [i for i in range(1, n+1) if i % 3 == 0]\n    if k == 4:\n        return [i for i in range(1, n+1) if i % 4 == 0]\n    if k == 5:\n        return [i for i in range(1, n+1) if i % 5 == 0]\n    if k == 6:\n        return [i for i in range(1, n+1) if i % 6 == 0]\n    if k == 7:\n        return [i for i in range(1, n+1) if i % 7 == 0]\n    if k == 8:\n        return [i for i in range(1, n+1) if i % 8 == 0]\n    if k == 9:\n        return [i for i in range(1, n+1) if i % 9 == 0]\n    if k == 10:\n        return [i for i in range(1, n+1) if i % 10 == 0]\n    if k == 11:\n        return [i for i in range(1, n+1) if i % 11 == 0]\n    if k == 12:\n        return [i for i in range(1, n+1) if i % 12 == 0]\n    if k == 13:\n        return [i for i in range(1, n+1) if i % 13 == 0]\n    if k == 14:\n        return [i for i in range(1, n+1) if i % 14 == 0]\n    if k == 15:\n        return [i for i in range",
        "difficulty": "interview"
    },
    {
        "task_id": 1611,
        "prompt": "Complete the Python function given the prompt below:[Image] \nAs some of you know, cubism is a trend in art, where the problem of constructing volumetrical shape on a plane with a combination of three-dimensional geometric shapes comes to the fore. \nA famous sculptor Cicasso, whose self-portrait you can contemplate, hates cubism. He is more impressed by the idea to transmit two-dimensional objects through three-dimensional objects by using his magnificent sculptures. And his new project is connected with this. Cicasso wants to make a coat for the haters of anticubism. To do this, he wants to create a sculpture depicting a well-known geometric primitive \u2014 convex polygon.\nCicasso prepared for this a few blanks, which are rods with integer lengths, and now he wants to bring them together. The i-th rod is a segment of length l_{i}.\nThe sculptor plans to make a convex polygon with a nonzero area, using all rods he has as its sides. Each rod should be used as a side to its full length. It is forbidden to cut, break or bend rods. However, two sides may form a straight angle $180^{\\circ}$.\nCicasso knows that it is impossible to make a convex polygon with a nonzero area out of the rods with the lengths which he had chosen. Cicasso does not want to leave the unused rods, so the sculptor decides to make another rod-blank with an integer length so that his problem is solvable. Of course, he wants to make it as short as possible, because the materials are expensive, and it is improper deed to spend money for nothing. \nHelp sculptor! \n-----Input-----\nThe first line contains an integer n (3 \u2264 n \u2264 10^5) \u2014 a number of rod-blanks.\nThe second line contains n integers l_{i} (1 \u2264 l_{i} \u2264 10^9) \u2014 lengths of rods, which Cicasso already has. It is guaranteed that it is impossible to make a polygon with n vertices and nonzero area using the rods Cicasso already has.\n-----Output-----\nPrint the only integer z \u2014 the minimum length of the rod, so that after adding it it can be possible to construct convex polygon with (n + 1) vertices and nonzero area from all of the rods.\n-----Examples-----\nInput\n3\n1 2 1\nOutput\n1\nInput\n5\n20 4 3 2 1\nOutput\n11\n-----Note-----\nIn the first example triangle with sides {1 + 1 = 2, 2, 1} can be formed from a set of lengths {1, 1, 1, 2}. \nIn the second example you can make a triangle with lengths {20, 11, 4 + 3 + 2 + 1 = 10}.\n\ndef",
        "answer": "def cubism(n, l):\n    if n == 1:\n        return l[0]\n    if n == 2:\n        return l[0] + l[1]\n    if n == 3:\n        return max(l[0] + l[1], l[0] + l[2], l[1] + l[2])\n    if n == 4:\n        return max(l[0] + l[1], l[0] + l[2], l[0] + l[3], l[1] + l[2], l[1] + l[3], l[2] + l[3])\n    if n == 5:\n        return max(l[0] + l[1], l[0] + l[2], l[0] + l[3], l[0] + l[4], l[1] + l[2], l[1] + l[3], l[1] + l[4], l[2] + l[3], l[2] + l[4], l[3] + l[4])\n    if n == 6:\n        return max(l[0] + l[1], l[0] + l[2], l[0] + l[3], l[0] + l[4], l[0] + l[5], l[1] + l[2], l[1] + l[3], l[1] + l[4], l[1] + l[5], l[2] + l[3], l[2] + l[4], l[2] + l[5], l[3] + l[4], l[3] + l[5], l[4] + l[5])\n    if n == 7:\n        return max(l[0] + l[1], l[0] + l[2], l[0] + l[3], l[0] + l[4], l[0] + l[5], l[0] + l[6], l[1] + l[2], l[1] + l[3], l[1] + l[4], l[1] + l[5], l[1]",
        "difficulty": "interview"
    },
    {
        "task_id": 1612,
        "prompt": "Complete the Python function given the prompt below:Lately, a national version of a bingo game has become very popular in Berland. There are n players playing the game, each player has a card with numbers. The numbers on each card are distinct, but distinct cards can have equal numbers. The card of the i-th player contains m_{i} numbers.\nDuring the game the host takes numbered balls one by one from a bag. He reads the number aloud in a high and clear voice and then puts the ball away. All participants cross out the number if it occurs on their cards. The person who crosses out all numbers from his card first, wins. If multiple people cross out all numbers from their cards at the same time, there are no winners in the game. At the beginning of the game the bag contains 100 balls numbered 1 through 100, the numbers of all balls are distinct.\nYou are given the cards for each player. Write a program that determines whether a player can win the game at the most favorable for him scenario or not.\n-----Input-----\nThe first line of the input contains integer n (1 \u2264 n \u2264 100) \u2014 the number of the players. Then follow n lines, each line describes a player's card. The line that describes a card starts from integer m_{i} (1 \u2264 m_{i} \u2264 100) that shows how many numbers the i-th player's card has. Then follows a sequence of integers a_{i}, 1, a_{i}, 2,..., a_{i}, m_{i} (1 \u2264 a_{i}, k \u2264 100) \u2014 the numbers on the i-th player's card. The numbers in the lines are separated by single spaces.\nIt is guaranteed that all the numbers on each card are distinct.\n-----Output-----\nPrint n lines, the i-th line must contain word \"YES\" (without the quotes), if the i-th player can win, and \"NO\" (without the quotes) otherwise.\n-----Examples-----\nInput\n3\n1 1\n3 2 4 1\n2 10 11\nOutput\nYES\nNO\nYES\nInput\n2\n1 1\n1 1\nOutput\nNO\nNO\n\ndef",
        "answer": "def bingo():\n    n = int(input())\n    cards = []\n    for i in range(n):\n        cards.append(list(map(int, input().split())))\n    for i in range(n):\n        for j in range(cards[i][0]):\n            if cards[i][j+1] in cards[i][j+2:]:\n                return \"NO\"\n    return \"YES\"\nprint(bingo())\n",
        "difficulty": "interview"
    },
    {
        "task_id": 1614,
        "prompt": "Complete the Python function given the prompt below:Vanya and his friends are walking along the fence of height h and they do not want the guard to notice them. In order to achieve this the height of each of the friends should not exceed h. If the height of some person is greater than h he can bend down and then he surely won't be noticed by the guard. The height of the i-th person is equal to a_{i}.\nConsider the width of the person walking as usual to be equal to 1, while the width of the bent person is equal to 2. Friends want to talk to each other while walking, so they would like to walk in a single row. What is the minimum width of the road, such that friends can walk in a row and remain unattended by the guard?\n-----Input-----\nThe first line of the input contains two integers n and h (1 \u2264 n \u2264 1000, 1 \u2264 h \u2264 1000)\u00a0\u2014 the number of friends and the height of the fence, respectively.\nThe second line contains n integers a_{i} (1 \u2264 a_{i} \u2264 2h), the i-th of them is equal to the height of the i-th person.\n-----Output-----\nPrint a single integer\u00a0\u2014 the minimum possible valid width of the road.\n-----Examples-----\nInput\n3 7\n4 5 14\nOutput\n4\nInput\n6 1\n1 1 1 1 1 1\nOutput\n6\nInput\n6 5\n7 6 8 9 10 5\nOutput\n11\n-----Note-----\nIn the first sample, only person number 3 must bend down, so the required width is equal to 1 + 1 + 2 = 4.\nIn the second sample, all friends are short enough and no one has to bend, so the width 1 + 1 + 1 + 1 + 1 + 1 = 6 is enough.\nIn the third sample, all the persons have to bend, except the last one. The required minimum width of the road is equal to 2 + 2 + 2 + 2 + 2 + 1 = 11.\n\ndef",
        "answer": "def solution(n, h):\n    return n * h - (n - 1)",
        "difficulty": "interview"
    },
    {
        "task_id": 1615,
        "prompt": "Complete the Python function given the prompt below:Little penguin Polo adores integer segments, that is, pairs of integers [l;\u00a0r] (l \u2264 r). \nHe has a set that consists of n integer segments: [l_1;\u00a0r_1], [l_2;\u00a0r_2],..., [l_{n};\u00a0r_{n}]. We know that no two segments of this set intersect. In one move Polo can either widen any segment of the set 1 unit to the left or 1 unit to the right, that is transform [l;\u00a0r] to either segment [l - 1;\u00a0r], or to segment [l;\u00a0r + 1].\nThe value of a set of segments that consists of n segments [l_1;\u00a0r_1], [l_2;\u00a0r_2],..., [l_{n};\u00a0r_{n}] is the number of integers x, such that there is integer j, for which the following inequality holds, l_{j} \u2264 x \u2264 r_{j}.\nFind the minimum number of moves needed to make the value of the set of Polo's segments divisible by k.\n-----Input-----\nThe first line contains two integers n and k (1 \u2264 n, k \u2264 10^5). Each of the following n lines contain a segment as a pair of integers l_{i} and r_{i} ( - 10^5 \u2264 l_{i} \u2264 r_{i} \u2264 10^5), separated by a space.\nIt is guaranteed that no two segments intersect. In other words, for any two integers i, j (1 \u2264 i < j \u2264 n) the following inequality holds, min(r_{i}, r_{j}) < max(l_{i}, l_{j}).\n-----Output-----\nIn a single line print a single integer \u2014 the answer to the problem.\n-----Examples-----\nInput\n2 3\n1 2\n3 4\nOutput\n2\nInput\n3 7\n1 2\n3 3\n4 7\nOutput\n0\n\ndef",
        "answer": "def solution(n, k):\n    segments = []\n    for i in range(n):\n        l, r = map(int, input().split())\n        segments.append((l, r))\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    segments.sort(key=lambda x: x[1] - x[0])\n    print(segments)\n    count = 0\n    for i in range(n):\n        if segments[i][1] - segments[i][0] % k == 0:\n            count += 1\n    return count",
        "difficulty": "interview"
    },
    {
        "task_id": 1616,
        "prompt": "Complete the Python function given the prompt below:You are given an array $a$ of length $n$ that has a special condition: every element in this array has at most 7 divisors. Find the length of the shortest non-empty subsequence of this array product of whose elements is a perfect square.\nA sequence $a$ is a subsequence of an array $b$ if $a$ can be obtained from $b$ by deletion of several (possibly, zero or all) elements.\n-----Input-----\nThe first line contains an integer $n$ ($1 \\le n \\le 10^5$)\u00a0\u2014 the length of $a$.\nThe second line contains $n$ integers $a_1$, $a_2$, $\\ldots$, $a_{n}$ ($1 \\le a_i \\le 10^6$)\u00a0\u2014 the elements of the array $a$.\n-----Output-----\nOutput the length of the shortest non-empty subsequence of $a$ product of whose elements is a perfect square. If there are several shortest subsequences, you can find any of them. If there's no such subsequence, print \"-1\".\n-----Examples-----\nInput\n3\n1 4 6\nOutput\n1\nInput\n4\n2 3 6 6\nOutput\n2\nInput\n3\n6 15 10\nOutput\n3\nInput\n4\n2 3 5 7\nOutput\n-1\n-----Note-----\nIn the first sample, you can choose a subsequence $[1]$.\nIn the second sample, you can choose a subsequence $[6, 6]$.\nIn the third sample, you can choose a subsequence $[6, 15, 10]$.\nIn the fourth sample, there is no such subsequence.\n\ndef",
        "answer": "def solution(a):\n    # your code here\n    return -1",
        "difficulty": "interview"
    },
    {
        "task_id": 1617,
        "prompt": "Complete the Python function given the prompt below:There are $n$ people sitting in a circle, numbered from $1$ to $n$ in the order in which they are seated. That is, for all $i$ from $1$ to $n-1$, the people with id $i$ and $i+1$ are adjacent. People with id $n$ and $1$ are adjacent as well.\nThe person with id $1$ initially has a ball. He picks a positive integer $k$ at most $n$, and passes the ball to his $k$-th neighbour in the direction of increasing ids, that person passes the ball to his $k$-th neighbour in the same direction, and so on until the person with the id $1$ gets the ball back. When he gets it back, people do not pass the ball any more.\nFor instance, if $n = 6$ and $k = 4$, the ball is passed in order $[1, 5, 3, 1]$. \nConsider the set of all people that touched the ball. The fun value of the game is the sum of the ids of people that touched it. In the above example, the fun value would be $1 + 5 + 3 = 9$.\nFind and report the set of possible fun values for all choices of positive integer $k$. It can be shown that under the constraints of the problem, the ball always gets back to the $1$-st player after finitely many steps, and there are no more than $10^5$ possible fun values for given $n$.\n-----Input-----\nThe only line consists of a single integer $n$\u00a0($2 \\leq n \\leq 10^9$)\u00a0\u2014 the number of people playing with the ball.\n-----Output-----\nSuppose the set of all fun values is $f_1, f_2, \\dots, f_m$.\nOutput a single line containing $m$ space separated integers $f_1$ through $f_m$ in increasing order.\n-----Examples-----\nInput\n6\nOutput\n1 5 9 21\nInput\n16\nOutput\n1 10 28 64 136\n-----Note-----\nIn the first sample, we've already shown that picking $k = 4$ yields fun value $9$, as does $k = 2$. Picking $k = 6$ results in fun value of $1$. For $k = 3$ we get fun value $5$ and with $k = 1$ or $k = 5$ we get $21$.  [Image] \nIn the second sample, the values $1$, $10$, $28$, $64$ and $136$ are achieved for instance for $k = 16$, $8$, $4$, $10$ and $11$, respectively.\n\ndef",
        "answer": "def fun(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36:\n        return 36\n    if n == 37:\n        return 37\n    if n == 38:\n        return 38\n    if n == 39:\n        return 39\n    if n == 40:\n        return 40\n    if n == 41:\n        return 41\n    if n == 42:\n        return 42\n    if n == 43:\n        return 43\n    if n == 44:\n        return 44\n    if n == 45:\n        return 45\n",
        "difficulty": "interview"
    },
    {
        "task_id": 1618,
        "prompt": "Complete the Python function given the prompt below:Dima's got a staircase that consists of n stairs. The first stair is at height a_1, the second one is at a_2, the last one is at a_{n} (1 \u2264 a_1 \u2264 a_2 \u2264... \u2264 a_{n}). \nDima decided to play with the staircase, so he is throwing rectangular boxes at the staircase from above. The i-th box has width w_{i} and height h_{i}. Dima throws each box vertically down on the first w_{i} stairs of the staircase, that is, the box covers stairs with numbers 1, 2,..., w_{i}. Each thrown box flies vertically down until at least one of the two following events happen:  the bottom of the box touches the top of a stair;  the bottom of the box touches the top of a box, thrown earlier. \nWe only consider touching of the horizontal sides of stairs and boxes, at that touching with the corners isn't taken into consideration. Specifically, that implies that a box with width w_{i} cannot touch the stair number w_{i} + 1.\nYou are given the description of the staircase and the sequence in which Dima threw the boxes at it. For each box, determine how high the bottom of the box after landing will be. Consider a box to fall after the previous one lands.\n-----Input-----\nThe first line contains integer n (1 \u2264 n \u2264 10^5) \u2014 the number of stairs in the staircase. The second line contains a non-decreasing sequence, consisting of n integers, a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 10^9;\u00a0a_{i} \u2264 a_{i} + 1).\nThe next line contains integer m (1 \u2264 m \u2264 10^5) \u2014 the number of boxes. Each of the following m lines contains a pair of integers w_{i}, h_{i} (1 \u2264 w_{i} \u2264 n;\u00a01 \u2264 h_{i} \u2264 10^9) \u2014 the size of the i-th thrown box.\nThe numbers in the lines are separated by spaces.\n-----Output-----\nPrint m integers \u2014 for each box the height, where the bottom of the box will be after landing. Print the answers for the boxes in the order, in which the boxes are given in the input.\nPlease, do not use the %lld specifier to read or write 64-bit integers in C++. It is preferred to use the cin, cout streams or the %I64d specifier.\n-----Examples-----\nInput\n5\n1 2 3 6 6\n4\n1 1\n3 1\n1 1\n4 3\nOutput\n1\n3\n4\n6\nInput\n3\n1 2 3\n2\n1 1\n3 1\nOutput\n1\n3\nInput\n1\n1\n5\n1 2\n1 10\n1 10\n1 10\n1 10\nOutput\n1\n3\n13\n23\n33\n-----Note-----\nThe first sample are shown on the picture. [Image]\n\ndef",
        "answer": "def stair_height(n, a):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 1619,
        "prompt": "Complete the Python function given the prompt below:Cowboy Beblop is a funny little boy who likes sitting at his computer. He somehow obtained two elastic hoops in the shape of 2D polygons, which are not necessarily convex. Since there's no gravity on his spaceship, the hoops are standing still in the air. Since the hoops are very elastic, Cowboy Beblop can stretch, rotate, translate or shorten their edges as much as he wants.\nFor both hoops, you are given the number of their vertices, as well as the position of each vertex, defined by the X, Y and Z coordinates. The vertices are given in the order they're connected: the 1st\u202fvertex is connected to the 2nd, which is connected to the 3rd, etc., and the last vertex is connected to the first one. Two hoops are connected if it's impossible to pull them to infinity in different directions by manipulating their edges, without having their edges or vertices intersect at any point \u2013 just like when two links of a chain are connected. The polygons' edges do not intersect or overlap. \nTo make things easier, we say that two polygons are well-connected, if the edges of one polygon cross the area of the other polygon in two different directions (from the upper and lower sides of the plane defined by that polygon) a different number of times.\nCowboy Beblop is fascinated with the hoops he has obtained and he would like to know whether they are well-connected or not. Since he\u2019s busy playing with his dog, Zwei, he\u2019d like you to figure it out for him. He promised you some sweets if you help him! \n-----Input-----\nThe first line of input contains an integer n (3 \u2264 n \u2264 100 000), which denotes the number of edges of the first polygon. The next N lines each contain the integers x, y and z ( - 1 000 000 \u2264 x, y, z \u2264 1 000 000)\u00a0\u2014 coordinates of the vertices, in the manner mentioned above. The next line contains an integer m (3 \u2264 m \u2264 100 000), denoting the number of edges of the second polygon, followed by m lines containing the coordinates of the second polygon\u2019s vertices.\nIt is guaranteed that both polygons are simple (no self-intersections), and in general that the obtained polygonal lines do not intersect each other. Also, you can assume that no 3 consecutive points of a polygon lie on the same line.\n-----Output-----\nYour output should contain only one line, with the words \"YES\" or \"NO\", depending on whether the two given polygons are well-connected. \n-----Example-----\nInput\n4\n0 0 0\n2 0 0\n2 2 0\n0 2 0\n4\n1 1 -1\n1 1 1\n1 3 1\n1 3 -1\nOutput\nYES\n-----Note-----\nOn the picture below, the two polygons are well-connected, as the edges of the vertical polygon cross the area of the horizontal one exactly once in one direction (for example, from above to below), and zero times in the other (in this case, from below to above). Note that the polygons do not have to be parallel to any of the xy-,xz-,yz- planes in general. [Image]\n\ndef",
        "answer": "def isWellConnected(n, edges, vertices):\n\t# Write your code here\n\tpass",
        "difficulty": "interview"
    },
    {
        "task_id": 1620,
        "prompt": "Complete the Python function given the prompt below:In the beginning of the new year Keivan decided to reverse his name. He doesn't like palindromes, so he changed Naviek to Navick.\nHe is too selfish, so for a given n he wants to obtain a string of n characters, each of which is either 'a', 'b' or 'c', with no palindromes of length 3 appearing in the string as a substring. For example, the strings \"abc\" and \"abca\" suit him, while the string \"aba\" doesn't. He also want the number of letters 'c' in his string to be as little as possible.\n-----Input-----\nThe first line contains single integer n (1 \u2264 n \u2264 2\u00b710^5)\u00a0\u2014 the length of the string.\n-----Output-----\nPrint the string that satisfies all the constraints.\nIf there are multiple answers, print any of them.\n-----Examples-----\nInput\n2\nOutput\naa\nInput\n3\nOutput\nbba\n-----Note-----\nA palindrome is a sequence of characters which reads the same backward and forward.\n\ndef",
        "answer": "def solve(n):\n    s = 'abc'\n    for i in range(n-3):\n        s += 'a'\n    return s\nprint(solve(int(input())))\n",
        "difficulty": "interview"
    },
    {
        "task_id": 1621,
        "prompt": "Complete the Python function given the prompt below:DZY loves collecting special strings which only contain lowercase letters. For each lowercase letter c DZY knows its value w_{c}. For each special string s = s_1s_2... s_{|}s| (|s| is the length of the string) he represents its value with a function f(s), where $f(s) = \\sum_{i = 1}^{|s|}(w_{s_{i}} \\cdot i)$\nNow DZY has a string s. He wants to insert k lowercase letters into this string in order to get the largest possible value of the resulting string. Can you help him calculate the largest possible value he could get? \n-----Input-----\nThe first line contains a single string s\u00a0(1 \u2264 |s| \u2264 10^3).\nThe second line contains a single integer k\u00a0(0 \u2264 k \u2264 10^3).\nThe third line contains twenty-six integers from w_{a} to w_{z}. Each such number is non-negative and doesn't exceed 1000.\n-----Output-----\nPrint a single integer \u2014 the largest possible value of the resulting string DZY could get.\n-----Examples-----\nInput\nabc\n3\n1 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\nOutput\n41\n-----Note-----\nIn the test sample DZY can obtain \"abcbbc\", value = 1\u00b71 + 2\u00b72 + 3\u00b72 + 4\u00b72 + 5\u00b72 + 6\u00b72 = 41.\n\ndef",
        "answer": "def f(s):\n    return sum(w[i] * i for i in range(len(s)))",
        "difficulty": "interview"
    },
    {
        "task_id": 1622,
        "prompt": "Complete the Python function given the prompt below:There are n employees working in company \"X\" (let's number them from 1 to n for convenience). Initially the employees didn't have any relationships among each other. On each of m next days one of the following events took place:  either employee y became the boss of employee x (at that, employee x didn't have a boss before);  or employee x gets a packet of documents and signs them; then he gives the packet to his boss. The boss signs the documents and gives them to his boss and so on (the last person to sign the documents sends them to the archive);  or comes a request of type \"determine whether employee x signs certain documents\". \nYour task is to write a program that will, given the events, answer the queries of the described type. At that, it is guaranteed that throughout the whole working time the company didn't have cyclic dependencies.\n-----Input-----\nThe first line contains two integers n and m (1 \u2264 n, m \u2264 10^5) \u2014 the number of employees and the number of events. \nEach of the next m lines contains the description of one event (the events are given in the chronological order). The first number of the line determines the type of event t (1 \u2264 t \u2264 3).   If t = 1, then next follow two integers x and y (1 \u2264 x, y \u2264 n) \u2014 numbers of the company employees. It is guaranteed that employee x doesn't have the boss currently.  If t = 2, then next follow integer x (1 \u2264 x \u2264 n) \u2014 the number of the employee who got a document packet.  If t = 3, then next follow two integers x and i (1 \u2264 x \u2264 n;\u00a01 \u2264 i \u2264 [number of packets that have already been given]) \u2014 the employee and the number of the document packet for which you need to find out information. The document packets are numbered started from 1 in the chronological order. \nIt is guaranteed that the input has at least one query of the third type.\n-----Output-----\nFor each query of the third type print \"YES\" if the employee signed the document package and \"NO\" otherwise. Print all the words without the quotes.\n-----Examples-----\nInput\n4 9\n1 4 3\n2 4\n3 3 1\n1 2 3\n2 2\n3 1 2\n1 3 1\n2 2\n3 1 3\nOutput\nYES\nNO\nYES\n\ndef",
        "answer": "def solve(n, m, employees, events):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 1623,
        "prompt": "Complete the Python function given the prompt below:Mislove had an array $a_1$, $a_2$, $\\cdots$, $a_n$ of $n$ positive integers, but he has lost it. He only remembers the following facts about it:\n The number of different numbers in the array is not less than $l$ and is not greater than $r$;\n For each array's element $a_i$ either $a_i = 1$ or $a_i$ is even and there is a number $\\dfrac{a_i}{2}$ in the array.\nFor example, if $n=5$, $l=2$, $r=3$ then an array could be $[1,2,2,4,4]$ or $[1,1,1,1,2]$; but it couldn't be $[1,2,2,4,8]$ because this array contains $4$ different numbers; it couldn't be $[1,2,2,3,3]$ because $3$ is odd and isn't equal to $1$; and it couldn't be $[1,1,2,2,16]$ because there is a number $16$ in the array but there isn't a number $\\frac{16}{2} = 8$.\nAccording to these facts, he is asking you to count the minimal and the maximal possible sums of all elements in an array. \n-----Input-----\nThe only input line contains three integers $n$, $l$ and $r$ ($1 \\leq n \\leq 1\\,000$, $1 \\leq l \\leq r \\leq \\min(n, 20)$)\u00a0\u2014 an array's size, the minimal number and the maximal number of distinct elements in an array.\n-----Output-----\nOutput two numbers\u00a0\u2014 the minimal and the maximal possible sums of all elements in an array.\n-----Examples-----\nInput\n4 2 2\nOutput\n5 7\nInput\n5 1 5\nOutput\n5 31\n-----Note-----\nIn the first example, an array could be the one of the following: $[1,1,1,2]$, $[1,1,2,2]$ or $[1,2,2,2]$. In the first case the minimal sum is reached and in the last case the maximal sum is reached.\nIn the second example, the minimal sum is reached at the array $[1,1,1,1,1]$, and the maximal one is reached at the array $[1,2,4,8,16]$.\n\ndef",
        "answer": "def solution(n, l, r):\n    return 0, 0",
        "difficulty": "interview"
    },
    {
        "task_id": 1624,
        "prompt": "Complete the Python function given the prompt below:Lunar New Year is approaching, and Bob is struggling with his homework \u2013 a number division problem.\nThere are $n$ positive integers $a_1, a_2, \\ldots, a_n$ on Bob's homework paper, where $n$ is always an even number. Bob is asked to divide those numbers into groups, where each group must contain at least $2$ numbers. Suppose the numbers are divided into $m$ groups, and the sum of the numbers in the $j$-th group is $s_j$. Bob's aim is to minimize the sum of the square of $s_j$, that is $$\\sum_{j = 1}^{m} s_j^2.$$\nBob is puzzled by this hard problem. Could you please help him solve it?\n-----Input-----\nThe first line contains an even integer $n$ ($2 \\leq n \\leq 3 \\cdot 10^5$), denoting that there are $n$ integers on Bob's homework paper.\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq 10^4$), describing the numbers you need to deal with.\n-----Output-----\nA single line containing one integer, denoting the minimum of the sum of the square of $s_j$, which is $$\\sum_{i = j}^{m} s_j^2,$$ where $m$ is the number of groups.\n-----Examples-----\nInput\n4\n8 5 2 3\nOutput\n164\nInput\n6\n1 1 1 2 2 2\nOutput\n27\n-----Note-----\nIn the first sample, one of the optimal solutions is to divide those $4$ numbers into $2$ groups $\\{2, 8\\}, \\{5, 3\\}$. Thus the answer is $(2 + 8)^2 + (5 + 3)^2 = 164$.\nIn the second sample, one of the optimal solutions is to divide those $6$ numbers into $3$ groups $\\{1, 2\\}, \\{1, 2\\}, \\{1, 2\\}$. Thus the answer is $(1 + 2)^2 + (1 + 2)^2 + (1 + 2)^2 = 27$.\n\ndef",
        "answer": "def solve(n, a):\n    return sum(a)**2",
        "difficulty": "interview"
    },
    {
        "task_id": 1625,
        "prompt": "Complete the Python function given the prompt below:Ilya is a very good-natured lion. He likes maths. Of all mathematical objects, his favourite one is matrices. Now he's faced a complicated matrix problem he needs to solve.\nHe's got a square 2^{n} \u00d7 2^{n}-sized matrix and 4^{n} integers. You need to arrange all these numbers in the matrix (put each number in a single individual cell) so that the beauty of the resulting matrix with numbers is maximum.\nThe beauty of a 2^{n} \u00d7 2^{n}-sized matrix is an integer, obtained by the following algorithm:  Find the maximum element in the matrix. Let's denote it as m.  If n = 0, then the beauty of the matrix equals m. Otherwise, a matrix can be split into 4 non-intersecting 2^{n} - 1 \u00d7 2^{n} - 1-sized submatrices, then the beauty of the matrix equals the sum of number m and other four beauties of the described submatrices. \nAs you can see, the algorithm is recursive.\nHelp Ilya, solve the problem and print the resulting maximum beauty of the matrix.\n-----Input-----\nThe first line contains integer 4^{n} (1 \u2264 4^{n} \u2264 2\u00b710^6). The next line contains 4^{n} integers a_{i} (1 \u2264 a_{i} \u2264 10^9) \u2014 the numbers you need to arrange in the 2^{n} \u00d7 2^{n}-sized matrix.\n-----Output-----\nOn a single line print the maximum value of the beauty of the described matrix.\nPlease, do not use the %lld specifier to read or write 64-bit integers in \u0421++. It is preferred to use the cin, cout streams or the %I64d specifier.\n-----Examples-----\nInput\n1\n13\nOutput\n13\nInput\n4\n1 2 3 4\nOutput\n14\n-----Note-----\nConsider the second sample. You need to arrange the numbers in the matrix as follows:\n1 2\n3 4\nThen the beauty of the matrix will equal: 4 + 1 + 2 + 3 + 4 = 14.\n\ndef",
        "answer": "def maxBeauty(n, a):\n    if n == 0:\n        return a[0]\n    else:\n        return max(maxBeauty(n-1, a), a[n] + maxBeauty(n-1, a))",
        "difficulty": "interview"
    },
    {
        "task_id": 1626,
        "prompt": "Complete the Python function given the prompt below:Pasha has recently bought a new phone jPager and started adding his friends' phone numbers there. Each phone number consists of exactly n digits.\nAlso Pasha has a number k and two sequences of length n / k (n is divisible by k) a_1, a_2,..., a_{n} / k and b_1, b_2,..., b_{n} / k. Let's split the phone number into blocks of length k. The first block will be formed by digits from the phone number that are on positions 1, 2,..., k, the second block will be formed by digits from the phone number that are on positions k + 1, k + 2,..., 2\u00b7k and so on. Pasha considers a phone number good, if the i-th block doesn't start from the digit b_{i} and is divisible by a_{i} if represented as an integer. \nTo represent the block of length k as an integer, let's write it out as a sequence c_1, c_2,...,c_{k}. Then the integer is calculated as the result of the expression c_1\u00b710^{k} - 1 + c_2\u00b710^{k} - 2 +... + c_{k}.\nPasha asks you to calculate the number of good phone numbers of length n, for the given k, a_{i} and b_{i}. As this number can be too big, print it modulo 10^9 + 7. \n-----Input-----\nThe first line of the input contains two integers n and k (1 \u2264 n \u2264 100 000, 1 \u2264 k \u2264 min(n, 9))\u00a0\u2014 the length of all phone numbers and the length of each block, respectively. It is guaranteed that n is divisible by k.\nThe second line of the input contains n / k space-separated positive integers\u00a0\u2014 sequence a_1, a_2,..., a_{n} / k (1 \u2264 a_{i} < 10^{k}).\nThe third line of the input contains n / k space-separated positive integers\u00a0\u2014 sequence b_1, b_2,..., b_{n} / k (0 \u2264 b_{i} \u2264 9). \n-----Output-----\nPrint a single integer\u00a0\u2014 the number of good phone numbers of length n modulo 10^9 + 7.\n-----Examples-----\nInput\n6 2\n38 56 49\n7 3 4\nOutput\n8\nInput\n8 2\n1 22 3 44\n5 4 3 2\nOutput\n32400\n-----Note-----\nIn the first test sample good phone numbers are: 000000, 000098, 005600, 005698, 380000, 380098, 385600, 385698.\n\ndef",
        "answer": "def good_phone_numbers(n, k, a, b):\n    # your code here\n    return 0",
        "difficulty": "interview"
    },
    {
        "task_id": 1627,
        "prompt": "Complete the Python function given the prompt below:Little Robber Girl likes to scare animals in her zoo for fun. She decided to arrange the animals in a row in the order of non-decreasing height. However, the animals were so scared that they couldn't stay in the right places.\nThe robber girl was angry at first, but then she decided to arrange the animals herself. She repeatedly names numbers l and r such that r - l + 1 is even. After that animals that occupy positions between l and r inclusively are rearranged as follows: the animal at position l swaps places with the animal at position l + 1, the animal l + 2 swaps with the animal l + 3,..., finally, the animal at position r - 1 swaps with the animal r.\nHelp the robber girl to arrange the animals in the order of non-decreasing height. You should name at most 20 000 segments, since otherwise the robber girl will become bored and will start scaring the animals again.\n-----Input-----\nThe first line contains a single integer n (1 \u2264 n \u2264 100)\u00a0\u2014 number of animals in the robber girl's zoo.\nThe second line contains n space-separated integers a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 10^9), where a_{i} is the height of the animal occupying the i-th place.\n-----Output-----\nPrint the sequence of operations that will rearrange the animals by non-decreasing height.\nThe output should contain several lines, i-th of the lines should contain two space-separated integers l_{i} and r_{i} (1 \u2264 l_{i} < r_{i} \u2264 n)\u00a0\u2014 descriptions of segments the robber girl should name. The segments should be described in the order the operations are performed.\nThe number of operations should not exceed 20 000.\nIf the animals are arranged correctly from the start, you are allowed to output nothing.\n-----Examples-----\nInput\n4\n2 1 4 3\nOutput\n1 4\nInput\n7\n36 28 57 39 66 69 68\nOutput\n1 4\n6 7\nInput\n5\n1 2 1 2 1\nOutput\n2 5\n3 4\n1 4\n1 4\n-----Note-----\nNote that you don't have to minimize the number of operations. Any solution that performs at most 20 000 operations is allowed.\n\ndef",
        "answer": "def rearrange(a):\n    l, r = 0, len(a) - 1\n    while l < r:\n        if a[l] < a[r]:\n            a[l], a[r] = a[r], a[l]\n            l += 1\n        else:\n            r -= 1\n    return a",
        "difficulty": "interview"
    },
    {
        "task_id": 1628,
        "prompt": "Complete the Python function given the prompt below:Little Vitaly loves different algorithms. Today he has invented a new algorithm just for you. Vitaly's algorithm works with string s, consisting of characters \"x\" and \"y\", and uses two following operations at runtime:  Find two consecutive characters in the string, such that the first of them equals \"y\", and the second one equals \"x\" and swap them. If there are several suitable pairs of characters, we choose the pair of characters that is located closer to the beginning of the string.  Find in the string two consecutive characters, such that the first of them equals \"x\" and the second one equals \"y\". Remove these characters from the string. If there are several suitable pairs of characters, we choose the pair of characters that is located closer to the beginning of the string. \nThe input for the new algorithm is string s, and the algorithm works as follows:  If you can apply at least one of the described operations to the string, go to step 2 of the algorithm. Otherwise, stop executing the algorithm and print the current string.  If you can apply operation 1, then apply it. Otherwise, apply operation 2. After you apply the operation, go to step 1 of the algorithm. \nNow Vitaly wonders, what is going to be printed as the result of the algorithm's work, if the input receives string s.\n-----Input-----\nThe first line contains a non-empty string s. \nIt is guaranteed that the string only consists of characters \"x\" and \"y\". It is guaranteed that the string consists of at most 10^6 characters. It is guaranteed that as the result of the algorithm's execution won't be an empty string.\n-----Output-----\nIn the only line print the string that is printed as the result of the algorithm's work, if the input of the algorithm input receives string s.\n-----Examples-----\nInput\nx\nOutput\nx\nInput\nyxyxy\nOutput\ny\nInput\nxxxxxy\nOutput\nxxxx\n-----Note-----\nIn the first test the algorithm will end after the first step of the algorithm, as it is impossible to apply any operation. Thus, the string won't change.\nIn the second test the transformation will be like this:  string \"yxyxy\" transforms into string \"xyyxy\";  string \"xyyxy\" transforms into string \"xyxyy\";  string \"xyxyy\" transforms into string \"xxyyy\";  string \"xxyyy\" transforms into string \"xyy\";  string \"xyy\" transforms into string \"y\". \nAs a result, we've got string \"y\". \nIn the third test case only one transformation will take place: string \"xxxxxy\" transforms into string \"xxxx\". Thus, the answer will be string \"xxxx\".\n\ndef",
        "answer": "def vitaly(s):\n    if len(s) == 0:\n        return s\n    if s[0] == \"x\":\n        return vitaly(s[1:]) + \"y\" + vitaly(s[1:])\n    else:\n        return vitaly(s[1:]) + \"x\" + vitaly(s[1:])",
        "difficulty": "interview"
    },
    {
        "task_id": 1629,
        "prompt": "Complete the Python function given the prompt below:Little Vasya had n boxes with balls in the room. The boxes stood in a row and were numbered with numbers from 1 to n from left to right.\nOnce Vasya chose one of the boxes, let's assume that its number is i, took all balls out from it (it is guaranteed that this box originally had at least one ball), and began putting balls (one at a time) to the boxes with numbers i + 1, i + 2, i + 3 and so on. If Vasya puts a ball into the box number n, then the next ball goes to box 1, the next one goes to box 2 and so on. He did it until he had no balls left in his hands. It is possible that Vasya puts multiple balls to the same box, and it is also possible that one or more balls will go to the box number i. If i = n, Vasya puts the first ball into the box number 1, then the next ball goes to box 2 and so on. \nFor example, let's suppose that initially Vasya had four boxes, and the first box had 3 balls, the second one had 2, the third one had 5 and the fourth one had 4 balls. Then, if i = 3, then Vasya will take all five balls out of the third box and put them in the boxes with numbers: 4, 1, 2, 3, 4. After all Vasya's actions the balls will lie in the boxes as follows: in the first box there are 4 balls, 3 in the second one, 1 in the third one and 6 in the fourth one.\nAt this point Vasya has completely forgotten the original arrangement of the balls in the boxes, but he knows how they are arranged now, and the number x \u2014 the number of the box, where he put the last of the taken out balls.\nHe asks you to help to find the initial arrangement of the balls in the boxes.\n-----Input-----\nThe first line of the input contains two integers n and x (2 \u2264 n \u2264 10^5, 1 \u2264 x \u2264 n), that represent the number of the boxes and the index of the box that got the last ball from Vasya, correspondingly. The second line contains n space-separated integers a_1, a_2,..., a_{n}, where integer a_{i} (0 \u2264 a_{i} \u2264 10^9, a_{x} \u2260 0) represents the number of balls in the box with index i after Vasya completes all the actions. \nPlease, do not use the %lld specifier to read or write 64-bit integers in \u0421++. It is preferred to use the cin, cout streams or the %I64d specifier.\n-----Output-----\nPrint n integers, where the i-th one represents the number of balls in the box number i before Vasya starts acting. Separate the numbers in the output by spaces. If there are multiple correct solutions, you are allowed to print any of them.\n-----Examples-----\nInput\n4 4\n4 3 1 6\nOutput\n3 2 5 4 \nInput\n5 2\n3 2 0 2 7\nOutput\n2 1 4 1 6 \nInput\n3 3\n2 3 1\nOutput\n1 2 3\n\ndef",
        "answer": "def solution(n, x):\n    return [i for i in range(1, n + 1) if i!= x]",
        "difficulty": "interview"
    },
    {
        "task_id": 1630,
        "prompt": "Complete the Python function given the prompt below:Innokenty is a president of a new football league in Byteland. The first task he should do is to assign short names to all clubs to be shown on TV next to the score. Of course, the short names should be distinct, and Innokenty wants that all short names consist of three letters.\nEach club's full name consist of two words: the team's name and the hometown's name, for example, \"DINAMO BYTECITY\". Innokenty doesn't want to assign strange short names, so he wants to choose such short names for each club that:   the short name is the same as three first letters of the team's name, for example, for the mentioned club it is \"DIN\",  or, the first two letters of the short name should be the same as the first two letters of the team's name, while the third letter is the same as the first letter in the hometown's name. For the mentioned club it is \"DIB\". \nApart from this, there is a rule that if for some club x the second option of short name is chosen, then there should be no club, for which the first option is chosen which is the same as the first option for the club x. For example, if the above mentioned club has short name \"DIB\", then no club for which the first option is chosen can have short name equal to \"DIN\". However, it is possible that some club have short name \"DIN\", where \"DI\" are the first two letters of the team's name, and \"N\" is the first letter of hometown's name. Of course, no two teams can have the same short name.\nHelp Innokenty to choose a short name for each of the teams. If this is impossible, report that. If there are multiple answer, any of them will suit Innokenty. If for some team the two options of short name are equal, then Innokenty will formally think that only one of these options is chosen. \n-----Input-----\nThe first line contains a single integer n (1 \u2264 n \u2264 1000)\u00a0\u2014 the number of clubs in the league.\nEach of the next n lines contains two words\u00a0\u2014 the team's name and the hometown's name for some club. Both team's name and hometown's name consist of uppercase English letters and have length at least 3 and at most 20.\n-----Output-----\nIt it is not possible to choose short names and satisfy all constraints, print a single line \"NO\".\nOtherwise, in the first line print \"YES\". Then print n lines, in each line print the chosen short name for the corresponding club. Print the clubs in the same order as they appeared in input.\nIf there are multiple answers, print any of them.\n-----Examples-----\nInput\n2\nDINAMO BYTECITY\nFOOTBALL MOSCOW\nOutput\nYES\nDIN\nFOO\nInput\n2\nDINAMO BYTECITY\nDINAMO BITECITY\nOutput\nNO\nInput\n3\nPLAYFOOTBALL MOSCOW\nPLAYVOLLEYBALL SPB\nGOGO TECHNOCUP\nOutput\nYES\nPLM\nPLS\nGOG\nInput\n3\nABC DEF\nABC EFG\nABD OOO\nOutput\nYES\nABD\nABE\nABO\n-----Note-----\nIn the first sample Innokenty can choose first option for both clubs.\nIn the second example it is not possible to choose short names, because it is not possible that one club has first option, and the other has second option if the first options are equal for both clubs.\nIn the third example Innokenty can choose the second options for the first two clubs, and the first option for the third club.\nIn the fourth example note that it is possible that the chosen short name for some club x is the same as the first option of another club y if the first options of x and y are different.\n\ndef",
        "answer": "def main():\n    n = int(input())\n    for i in range(n):\n        team, home = input().split()\n        if team[0] == home[0]:\n            print(\"YES\")\n            print(team)\n        else:\n            print(\"NO\")",
        "difficulty": "interview"
    },
    {
        "task_id": 1631,
        "prompt": "Complete the Python function given the prompt below:Fox Ciel is going to publish a paper on FOCS (Foxes Operated Computer Systems, pronounce: \"Fox\"). She heard a rumor: the authors list on the paper is always sorted in the lexicographical order. \nAfter checking some examples, she found out that sometimes it wasn't true. On some papers authors' names weren't sorted in lexicographical order in normal sense. But it was always true that after some modification of the order of letters in alphabet, the order of authors becomes lexicographical!\nShe wants to know, if there exists an order of letters in Latin alphabet such that the names on the paper she is submitting are following in the lexicographical order. If so, you should find out any such order.\nLexicographical order is defined in following way. When we compare s and t, first we find the leftmost position with differing characters: s_{i} \u2260 t_{i}. If there is no such position (i. e. s is a prefix of t or vice versa) the shortest string is less. Otherwise, we compare characters s_{i} and t_{i} according to their order in alphabet.\n-----Input-----\nThe first line contains an integer n (1 \u2264 n \u2264 100): number of names.\nEach of the following n lines contain one string name_{i} (1 \u2264 |name_{i}| \u2264 100), the i-th name. Each name contains only lowercase Latin letters. All names are different.\n-----Output-----\nIf there exists such order of letters that the given names are sorted lexicographically, output any such order as a permutation of characters 'a'\u2013'z' (i. e. first output the first letter of the modified alphabet, then the second, and so on).\nOtherwise output a single word \"Impossible\" (without quotes).\n-----Examples-----\nInput\n3\nrivest\nshamir\nadleman\nOutput\nbcdefghijklmnopqrsatuvwxyz\nInput\n10\ntourist\npetr\nwjmzbmr\nyeputons\nvepifanov\nscottwu\noooooooooooooooo\nsubscriber\nrowdark\ntankengineer\nOutput\nImpossible\nInput\n10\npetr\negor\nendagorion\nfeferivan\nilovetanyaromanova\nkostka\ndmitriyh\nmaratsnowbear\nbredorjaguarturnik\ncgyforever\nOutput\naghjlnopefikdmbcqrstuvwxyz\nInput\n7\ncar\ncare\ncareful\ncarefully\nbecarefuldontforgetsomething\notherwiseyouwillbehacked\ngoodluck\nOutput\nacbdefhijklmnogpqrstuvwxyz\n\ndef",
        "answer": "def solution(names):\n    # your code here\n    return ''.join(sorted(names[0]))",
        "difficulty": "interview"
    },
    {
        "task_id": 1632,
        "prompt": "Complete the Python function given the prompt below:Andrew and Jerry are playing a game with Harry as the scorekeeper. The game consists of three rounds. In each round, Andrew and Jerry draw randomly without replacement from a jar containing n balls, each labeled with a distinct positive integer. Without looking, they hand their balls to Harry, who awards the point to the player with the larger number and returns the balls to the jar. The winner of the game is the one who wins at least two of the three rounds.\nAndrew wins rounds 1 and 2 while Jerry wins round 3, so Andrew wins the game. However, Jerry is unhappy with this system, claiming that he will often lose the match despite having the higher overall total. What is the probability that the sum of the three balls Jerry drew is strictly higher than the sum of the three balls Andrew drew?\n-----Input-----\nThe first line of input contains a single integer n (2 \u2264 n \u2264 2000) \u2014 the number of balls in the jar.\nThe second line contains n integers a_{i} (1 \u2264 a_{i} \u2264 5000) \u2014 the number written on the ith ball. It is guaranteed that no two balls have the same number.\n-----Output-----\nPrint a single real value \u2014 the probability that Jerry has a higher total, given that Andrew wins the first two rounds and Jerry wins the third. Your answer will be considered correct if its absolute or relative error does not exceed 10^{ - 6}. \nNamely: let's assume that your answer is a, and the answer of the jury is b. The checker program will consider your answer correct, if $\\frac{|a - b|}{\\operatorname{max}(1, b)} \\leq 10^{-6}$.\n-----Examples-----\nInput\n2\n1 2\nOutput\n0.0000000000\nInput\n3\n1 2 10\nOutput\n0.0740740741\n-----Note-----\nIn the first case, there are only two balls. In the first two rounds, Andrew must have drawn the 2 and Jerry must have drawn the 1, and vice versa in the final round. Thus, Andrew's sum is 5 and Jerry's sum is 4, so Jerry never has a higher total.\nIn the second case, each game could've had three outcomes \u2014 10 - 2, 10 - 1, or 2 - 1. Jerry has a higher total if and only if Andrew won 2 - 1 in both of the first two rounds, and Jerry drew the 10 in the last round. This has probability $\\frac{1}{3} \\cdot \\frac{1}{3} \\cdot \\frac{2}{3} = \\frac{2}{27}$.\n\ndef",
        "answer": "def prob_jerry_wins(n, a):\n    # your code here\n    return 1",
        "difficulty": "interview"
    },
    {
        "task_id": 1633,
        "prompt": "Complete the Python function given the prompt below:Pasha loves his phone and also putting his hair up... But the hair is now irrelevant.\nPasha has installed a new game to his phone. The goal of the game is following. There is a rectangular field consisting of n row with m pixels in each row. Initially, all the pixels are colored white. In one move, Pasha can choose any pixel and color it black. In particular, he can choose the pixel that is already black, then after the boy's move the pixel does not change, that is, it remains black. Pasha loses the game when a 2 \u00d7 2 square consisting of black pixels is formed. \nPasha has made a plan of k moves, according to which he will paint pixels. Each turn in his plan is represented as a pair of numbers i and j, denoting respectively the row and the column of the pixel to be colored on the current move.\nDetermine whether Pasha loses if he acts in accordance with his plan, and if he does, on what move the 2 \u00d7 2 square consisting of black pixels is formed.\n-----Input-----\nThe first line of the input contains three integers n, m, k (1 \u2264 n, m \u2264 1000, 1 \u2264 k \u2264 10^5)\u00a0\u2014 the number of rows, the number of columns and the number of moves that Pasha is going to perform. \nThe next k lines contain Pasha's moves in the order he makes them. Each line contains two integers i and j (1 \u2264 i \u2264 n, 1 \u2264 j \u2264 m), representing the row number and column number of the pixel that was painted during a move.\n-----Output-----\nIf Pasha loses, print the number of the move when the 2 \u00d7 2 square consisting of black pixels is formed.\nIf Pasha doesn't lose, that is, no 2 \u00d7 2 square consisting of black pixels is formed during the given k moves, print 0.\n-----Examples-----\nInput\n2 2 4\n1 1\n1 2\n2 1\n2 2\nOutput\n4\nInput\n2 3 6\n2 3\n2 2\n1 3\n2 2\n1 2\n1 1\nOutput\n5\nInput\n5 3 7\n2 3\n1 2\n1 1\n4 1\n3 1\n5 3\n3 2\nOutput\n0\n\ndef",
        "answer": "def solve():\n\tn, m, k = map(int, input().split())\n\tp = [list(map(int, input().split())) for _ in range(k)]\n\tfor i in range(k):\n\t\tif p[i][0] == p[i][1]:\n\t\t\treturn i + 1\n\treturn 0\nprint(solve())\n",
        "difficulty": "interview"
    },
    {
        "task_id": 1634,
        "prompt": "Complete the Python function given the prompt below:Vasya often uses public transport. The transport in the city is of two types: trolleys and buses. The city has n buses and m trolleys, the buses are numbered by integers from 1 to n, the trolleys are numbered by integers from 1 to m.\nPublic transport is not free. There are 4 types of tickets:   A ticket for one ride on some bus or trolley. It costs c_1 burles;  A ticket for an unlimited number of rides on some bus or on some trolley. It costs c_2 burles;  A ticket for an unlimited number of rides on all buses or all trolleys. It costs c_3 burles;  A ticket for an unlimited number of rides on all buses and trolleys. It costs c_4 burles. \nVasya knows for sure the number of rides he is going to make and the transport he is going to use. He asked you for help to find the minimum sum of burles he will have to spend on the tickets.\n-----Input-----\nThe first line contains four integers c_1, c_2, c_3, c_4 (1 \u2264 c_1, c_2, c_3, c_4 \u2264 1000) \u2014 the costs of the tickets.\nThe second line contains two integers n and m (1 \u2264 n, m \u2264 1000) \u2014 the number of buses and trolleys Vasya is going to use.\nThe third line contains n integers a_{i} (0 \u2264 a_{i} \u2264 1000) \u2014 the number of times Vasya is going to use the bus number i.\nThe fourth line contains m integers b_{i} (0 \u2264 b_{i} \u2264 1000) \u2014 the number of times Vasya is going to use the trolley number i.\n-----Output-----\nPrint a single number \u2014 the minimum sum of burles Vasya will have to spend on the tickets.\n-----Examples-----\nInput\n1 3 7 19\n2 3\n2 5\n4 4 4\nOutput\n12\nInput\n4 3 2 1\n1 3\n798\n1 2 3\nOutput\n1\nInput\n100 100 8 100\n3 5\n7 94 12\n100 1 47 0 42\nOutput\n16\n-----Note-----\nIn the first sample the profitable strategy is to buy two tickets of the first type (for the first bus), one ticket of the second type (for the second bus) and one ticket of the third type (for all trolleys). It totals to (2\u00b71) + 3 + 7 = 12 burles.\nIn the second sample the profitable strategy is to buy one ticket of the fourth type.\nIn the third sample the profitable strategy is to buy two tickets of the third type: for all buses and for all trolleys.\n\ndef",
        "answer": "def solve(c_1, c_2, c_3, c_4, n, m, a, b):\n    return c_1 * n + c_2 * m + c_3 * (n * m) + c_4 * (n + m)",
        "difficulty": "interview"
    },
    {
        "task_id": 1635,
        "prompt": "Complete the Python function given the prompt below:Vlad likes to eat in cafes very much. During his life, he has visited cafes n times. Unfortunately, Vlad started to feel that his last visits are not any different from each other. To fix that Vlad had a small research.\nFirst of all, Vlad assigned individual indices to all cafes. Then, he wrote down indices of cafes he visited in a row, in order of visiting them. Now, Vlad wants to find such a cafe that his last visit to that cafe was before his last visits to every other cafe. In other words, he wants to find such a cafe that he hasn't been there for as long as possible. Help Vlad to find that cafe.\n-----Input-----\nIn first line there is one integer n (1 \u2264 n \u2264 2\u00b710^5)\u00a0\u2014 number of cafes indices written by Vlad.\nIn second line, n numbers a_1, a_2,..., a_{n} (0 \u2264 a_{i} \u2264 2\u00b710^5) are written\u00a0\u2014 indices of cafes in order of being visited by Vlad. Vlad could visit some cafes more than once. Note that in numeration, some indices could be omitted.\n-----Output-----\nPrint one integer\u00a0\u2014 index of the cafe that Vlad hasn't visited for as long as possible.\n-----Examples-----\nInput\n5\n1 3 2 1 2\nOutput\n3\nInput\n6\n2 1 2 2 4 1\nOutput\n2\n-----Note-----\nIn first test, there are three cafes, and the last visits to cafes with indices 1 and 2 were after the last visit to cafe with index 3; so this cafe is the answer. \nIn second test case, there are also three cafes, but with indices 1, 2 and 4. Cafes with indices 1 and 4 were visited after the last visit of cafe with index 2, so the answer is 2. Note that Vlad could omit some numbers while numerating the cafes.\n\ndef",
        "answer": "def solution(n, a):\n    a = sorted(a)\n    for i in range(n):\n        if a[i]!= i + 1:\n            return i + 1\n    return n + 1",
        "difficulty": "interview"
    },
    {
        "task_id": 1636,
        "prompt": "Complete the Python function given the prompt below:Wilbur is playing with a set of n points on the coordinate plane. All points have non-negative integer coordinates. Moreover, if some point (x, y) belongs to the set, then all points (x', y'), such that 0 \u2264 x' \u2264 x and 0 \u2264 y' \u2264 y also belong to this set.\nNow Wilbur wants to number the points in the set he has, that is assign them distinct integer numbers from 1 to n. In order to make the numbering aesthetically pleasing, Wilbur imposes the condition that if some point (x, y) gets number i, then all (x',y') from the set, such that x' \u2265 x and y' \u2265 y must be assigned a number not less than i. For example, for a set of four points (0, 0), (0, 1), (1, 0) and (1, 1), there are two aesthetically pleasing numberings. One is 1, 2, 3, 4 and another one is 1, 3, 2, 4.\nWilbur's friend comes along and challenges Wilbur. For any point he defines it's special value as s(x, y) = y - x. Now he gives Wilbur some w_1, w_2,..., w_{n}, and asks him to find an aesthetically pleasing numbering of the points in the set, such that the point that gets number i has it's special value equal to w_{i}, that is s(x_{i}, y_{i}) = y_{i} - x_{i} = w_{i}.\nNow Wilbur asks you to help him with this challenge.\n-----Input-----\nThe first line of the input consists of a single integer n (1 \u2264 n \u2264 100 000)\u00a0\u2014 the number of points in the set Wilbur is playing with.\nNext follow n lines with points descriptions. Each line contains two integers x and y (0 \u2264 x, y \u2264 100 000), that give one point in Wilbur's set. It's guaranteed that all points are distinct. Also, it is guaranteed that if some point (x, y) is present in the input, then all points (x', y'), such that 0 \u2264 x' \u2264 x and 0 \u2264 y' \u2264 y, are also present in the input.\nThe last line of the input contains n integers. The i-th of them is w_{i} ( - 100 000 \u2264 w_{i} \u2264 100 000)\u00a0\u2014 the required special value of the point that gets number i in any aesthetically pleasing numbering.\n-----Output-----\nIf there exists an aesthetically pleasant numbering of points in the set, such that s(x_{i}, y_{i}) = y_{i} - x_{i} = w_{i}, then print \"YES\" on the first line of the output. Otherwise, print \"NO\".\nIf a solution exists, proceed output with n lines. On the i-th of these lines print the point of the set that gets number i. If there are multiple solutions, print any of them.\n-----Examples-----\nInput\n5\n2 0\n0 0\n1 0\n1 1\n0 1\n0 -1 -2 1 0\nOutput\nYES\n0 0\n1 0\n2 0\n0 1\n1 1\nInput\n3\n1 0\n0 0\n2 0\n0 1 2\nOutput\nNO\n-----Note-----\nIn the first sample, point (2, 0) gets number 3, point (0, 0) gets number one, point (1, 0) gets number 2, point (1, 1) gets number 5 and point (0, 1) gets number 4. One can easily check that this numbering is aesthetically pleasing and y_{i} - x_{i} = w_{i}.\nIn the second sample, the special values of the points in the set are 0,  - 1, and  - 2 while the sequence that the friend gives to Wilbur is 0, 1, 2. Therefore, the answer does not exist.\n\ndef",
        "answer": "def s(x, y):\n    return y - x",
        "difficulty": "interview"
    },
    {
        "task_id": 1637,
        "prompt": "Complete the Python function given the prompt below:Zibi is a competitive programming coach. There are $n$ competitors who want to be prepared well. The training contests are quite unusual\u00a0\u2013 there are two people in a team, two problems, and each competitor will code exactly one of them. Of course, people in one team will code different problems.\nRules of scoring also aren't typical. The first problem is always an implementation problem: you have to implement some well-known algorithm very fast and the time of your typing is rated. The second one is an awful geometry task and you just have to get it accepted in reasonable time. Here the length and difficulty of your code are important. After that, Zibi will give some penalty points (possibly negative) for each solution and the final score of the team is the sum of them (the less the score is, the better).\nWe know that the $i$-th competitor will always have score $x_i$ when he codes the first task and $y_i$ when he codes the second task. We can assume, that all competitors know each other's skills and during the contest distribute the problems in the way that minimizes their final score. Remember that each person codes exactly one problem in a contest.\nZibi wants all competitors to write a contest with each other. However, there are $m$ pairs of people who really don't like to cooperate and they definitely won't write a contest together. Still, the coach is going to conduct trainings for all possible pairs of people, such that the people in pair don't hate each other. The coach is interested for each participant, what will be his or her sum of scores of all teams he trained in?\n-----Input-----\nThe first line contains two integers $n$ and $m$ ($2 \\le n \\le 300\\,000$, $0 \\le m \\le 300\\,000$)\u00a0\u2014 the number of participants and the number of pairs of people who will not write a contest together.\nEach of the next $n$ lines contains two integers $x_i$ and $y_i$ ($-10^9 \\le x_i, y_i \\le 10^9$)\u00a0\u2014 the scores which will the $i$-th competitor get on the first problem and on the second problem. It is guaranteed that there are no two people having both $x_i$ and $y_i$ same.\nEach of the next $m$ lines contain two integers $u_i$ and $v_i$ ($1 \\le u_i, v_i \\le n$, $u_i \\ne v_i$)\u00a0\u2014 indices of people who don't want to write a contest in one team. Each unordered pair of indices will appear at most once.\n-----Output-----\nOutput $n$ integers\u00a0\u2014 the sum of scores for all participants in the same order as they appear in the input.\n-----Examples-----\nInput\n3 2\n1 2\n2 3\n1 3\n1 2\n2 3\nOutput\n3 0 3 \nInput\n3 3\n1 2\n2 3\n1 3\n1 2\n2 3\n1 3\nOutput\n0 0 0 \nInput\n5 3\n-1 3\n2 4\n1 1\n3 5\n2 2\n1 4\n2 3\n3 5\nOutput\n4 14 4 16 10 \n-----Note-----\nIn the first example, there will be only one team consisting of persons $1$ and $3$. The optimal strategy for them is to assign the first task to the $3$-rd person and the second task to the $1$-st person, this will lead to score equal to $1 + 2 = 3$.\nIn the second example, nobody likes anyone, so there won't be any trainings. It seems that Zibi won't be titled coach in that case...\n\ndef",
        "answer": "def solution(n, m, x, y, u, v):\n\t# your code here\n\treturn",
        "difficulty": "interview"
    },
    {
        "task_id": 1638,
        "prompt": "Complete the Python function given the prompt below:This is an easier version of the problem. In this version $n \\le 1000$\nThe outskirts of the capital are being actively built up in Berland. The company \"Kernel Panic\" manages the construction of a residential complex of skyscrapers in New Berlskva. All skyscrapers are built along the highway. It is known that the company has already bought $n$ plots along the highway and is preparing to build $n$ skyscrapers, one skyscraper per plot.\nArchitects must consider several requirements when planning a skyscraper. Firstly, since the land on each plot has different properties, each skyscraper has a limit on the largest number of floors it can have. Secondly, according to the design code of the city, it is unacceptable for a skyscraper to simultaneously have higher skyscrapers both to the left and to the right of it.\nFormally, let's number the plots from $1$ to $n$. Then if the skyscraper on the $i$-th plot has $a_i$ floors, it must hold that $a_i$ is at most $m_i$ ($1 \\le a_i \\le m_i$). Also there mustn't be integers $j$ and $k$ such that $j < i < k$ and $a_j > a_i < a_k$. Plots $j$ and $k$ are not required to be adjacent to $i$.\nThe company wants the total number of floors in the built skyscrapers to be as large as possible. Help it to choose the number of floors for each skyscraper in an optimal way, i.e. in such a way that all requirements are fulfilled, and among all such construction plans choose any plan with the maximum possible total number of floors.\n-----Input-----\nThe first line contains a single integer $n$ ($1 \\leq n \\leq 1000$)\u00a0\u2014 the number of plots.\nThe second line contains the integers $m_1, m_2, \\ldots, m_n$ ($1 \\leq m_i \\leq 10^9$)\u00a0\u2014 the limit on the number of floors for every possible number of floors for a skyscraper on each plot.\n-----Output-----\nPrint $n$ integers $a_i$\u00a0\u2014 the number of floors in the plan for each skyscraper, such that all requirements are met, and the total number of floors in all skyscrapers is the maximum possible.\nIf there are multiple answers possible, print any of them.\n-----Examples-----\nInput\n5\n1 2 3 2 1\nOutput\n1 2 3 2 1 \nInput\n3\n10 6 8\nOutput\n10 6 6 \n-----Note-----\nIn the first example, you can build all skyscrapers with the highest possible height.\nIn the second test example, you cannot give the maximum height to all skyscrapers as this violates the design code restriction. The answer $[10, 6, 6]$ is optimal. Note that the answer of $[6, 6, 8]$ also satisfies all restrictions, but is not optimal.\n\ndef",
        "answer": "def optimal_building_plan(n, m):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 1639,
        "prompt": "Complete the Python function given the prompt below:Kefa decided to make some money doing business on the Internet for exactly n days. He knows that on the i-th day (1 \u2264 i \u2264 n) he makes a_{i} money. Kefa loves progress, that's why he wants to know the length of the maximum non-decreasing subsegment in sequence a_{i}. Let us remind you that the subsegment of the sequence is its continuous fragment. A subsegment of numbers is called non-decreasing if all numbers in it follow in the non-decreasing order.\nHelp Kefa cope with this task!\n-----Input-----\nThe first line contains integer n (1 \u2264 n \u2264 10^5).\nThe second line contains n integers a_1,  a_2, ...,  a_{n} (1 \u2264 a_{i} \u2264 10^9).\n-----Output-----\nPrint a single integer \u2014 the length of the maximum non-decreasing subsegment of sequence a.\n-----Examples-----\nInput\n6\n2 2 1 3 4 1\nOutput\n3\nInput\n3\n2 2 9\nOutput\n3\n-----Note-----\nIn the first test the maximum non-decreasing subsegment is the numbers from the third to the fifth one.\nIn the second test the maximum non-decreasing subsegment is the numbers from the first to the third one.\n\ndef",
        "answer": "def max_non_decreasing_subsegment(a):\n    # your code here\n    return 0",
        "difficulty": "interview"
    },
    {
        "task_id": 1640,
        "prompt": "Complete the Python function given the prompt below:Let's denote a function \n$d(x, y) = \\left\\{\\begin{array}{ll}{y - x,} & {\\text{if}|x - y|> 1} \\\\{0,} & {\\text{if}|x - y|\\leq 1} \\end{array} \\right.$\nYou are given an array a consisting of n integers. You have to calculate the sum of d(a_{i}, a_{j}) over all pairs (i, j) such that 1 \u2264 i \u2264 j \u2264 n.\n-----Input-----\nThe first line contains one integer n (1 \u2264 n \u2264 200000) \u2014 the number of elements in a.\nThe second line contains n integers a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 10^9) \u2014 elements of the array. \n-----Output-----\nPrint one integer \u2014 the sum of d(a_{i}, a_{j}) over all pairs (i, j) such that 1 \u2264 i \u2264 j \u2264 n.\n-----Examples-----\nInput\n5\n1 2 3 1 3\nOutput\n4\nInput\n4\n6 6 5 5\nOutput\n0\nInput\n4\n6 6 4 4\nOutput\n-8\n-----Note-----\nIn the first example:\n  d(a_1, a_2) = 0;  d(a_1, a_3) = 2;  d(a_1, a_4) = 0;  d(a_1, a_5) = 2;  d(a_2, a_3) = 0;  d(a_2, a_4) = 0;  d(a_2, a_5) = 0;  d(a_3, a_4) =  - 2;  d(a_3, a_5) = 0;  d(a_4, a_5) = 2.\n\ndef",
        "answer": "def d(x, y):\n    if abs(x - y) > 1:\n        return 0\n    else:\n        return 0",
        "difficulty": "interview"
    },
    {
        "task_id": 1641,
        "prompt": "Complete the Python function given the prompt below:Vasya is currently at a car rental service, and he wants to reach cinema. The film he has bought a ticket for starts in t minutes. There is a straight road of length s from the service to the cinema. Let's introduce a coordinate system so that the car rental service is at the point 0, and the cinema is at the point s.\nThere are k gas stations along the road, and at each of them you can fill a car with any amount of fuel for free! Consider that this operation doesn't take any time, i.e. is carried out instantly.\nThere are n cars in the rental service, i-th of them is characterized with two integers c_{i} and v_{i}\u00a0\u2014 the price of this car rent and the capacity of its fuel tank in liters. It's not allowed to fuel a car with more fuel than its tank capacity v_{i}. All cars are completely fueled at the car rental service.\nEach of the cars can be driven in one of two speed modes: normal or accelerated. In the normal mode a car covers 1 kilometer in 2 minutes, and consumes 1 liter of fuel. In the accelerated mode a car covers 1 kilometer in 1 minutes, but consumes 2 liters of fuel. The driving mode can be changed at any moment and any number of times.\nYour task is to choose a car with minimum price such that Vasya can reach the cinema before the show starts, i.e. not later than in t minutes. Assume that all cars are completely fueled initially.\n-----Input-----\nThe first line contains four positive integers n, k, s and t (1 \u2264 n \u2264 2\u00b710^5, 1 \u2264 k \u2264 2\u00b710^5, 2 \u2264 s \u2264 10^9, 1 \u2264 t \u2264 2\u00b710^9)\u00a0\u2014 the number of cars at the car rental service, the number of gas stations along the road, the length of the road and the time in which the film starts. \nEach of the next n lines contains two positive integers c_{i} and v_{i} (1 \u2264 c_{i}, v_{i} \u2264 10^9)\u00a0\u2014 the price of the i-th car and its fuel tank capacity.\nThe next line contains k distinct integers g_1, g_2,..., g_{k} (1 \u2264 g_{i} \u2264 s - 1)\u00a0\u2014 the positions of the gas stations on the road in arbitrary order.\n-----Output-----\nPrint the minimum rent price of an appropriate car, i.e. such car that Vasya will be able to reach the cinema before the film starts (not later than in t minutes). If there is no appropriate car, print -1.\n-----Examples-----\nInput\n3 1 8 10\n10 8\n5 7\n11 9\n3\nOutput\n10\nInput\n2 2 10 18\n10 4\n20 6\n5 3\nOutput\n20\n-----Note-----\nIn the first sample, Vasya can reach the cinema in time using the first or the third cars, but it would be cheaper to choose the first one. Its price is equal to 10, and the capacity of its fuel tank is 8. Then Vasya can drive to the first gas station in the accelerated mode in 3 minutes, spending 6 liters of fuel. After that he can full the tank and cover 2 kilometers in the normal mode in 4 minutes, spending 2 liters of fuel. Finally, he drives in the accelerated mode covering the remaining 3 kilometers in 3 minutes and spending 6 liters of fuel.\n\ndef",
        "answer": "def carRental(n, k, s, t):\n    # Write your code here\n    cars = [Car(0, 0) for i in range(n)]\n    gasStations = [0] * k\n    for i in range(k):\n        gasStations[i] = s - i\n    gasStations.sort()\n    gasStations.reverse()\n    for i in range(n):\n        cars[i].price = gasStations[i]\n        cars[i].capacity = gasStations[i]\n    cars.sort(key=lambda car: car.price)\n    cars.sort(key=lambda car: car.capacity)\n    cars.sort(key=lambda car: car.price + car.capacity)\n    for i in range(n):\n        if cars[i].price + cars[i].capacity <= t:\n            return cars[i].price\n    return -1",
        "difficulty": "interview"
    },
    {
        "task_id": 1642,
        "prompt": "Complete the Python function given the prompt below:You are given a convex polygon P with n distinct vertices p_1, p_2,..., p_{n}. Vertex p_{i} has coordinates (x_{i}, y_{i}) in the 2D plane. These vertices are listed in clockwise order.\nYou can choose a real number D and move each vertex of the polygon a distance of at most D from their original positions.\nFind the maximum value of D such that no matter how you move the vertices, the polygon does not intersect itself and stays convex.\n-----Input-----\nThe first line has one integer n (4 \u2264 n \u2264 1 000)\u00a0\u2014 the number of vertices.\nThe next n lines contain the coordinates of the vertices. Line i contains two integers x_{i} and y_{i} ( - 10^9 \u2264 x_{i}, y_{i} \u2264 10^9)\u00a0\u2014 the coordinates of the i-th vertex. These points are guaranteed to be given in clockwise order, and will form a strictly convex polygon (in particular, no three consecutive points lie on the same straight line).\n-----Output-----\nPrint one real number D, which is the maximum real number such that no matter how you move the vertices, the polygon stays convex.\nYour answer will be considered correct if its absolute or relative error does not exceed 10^{ - 6}.\nNamely, let's assume that your answer is a and the answer of the jury is b. The checker program will consider your answer correct if $\\frac{|a - b|}{\\operatorname{max}(1, b)} \\leq 10^{-6}$.\n-----Examples-----\nInput\n4\n0 0\n0 1\n1 1\n1 0\nOutput\n0.3535533906\nInput\n6\n5 0\n10 0\n12 -4\n10 -8\n5 -8\n3 -4\nOutput\n1.0000000000\n-----Note-----\nHere is a picture of the first sample\n[Image]\nHere is an example of making the polygon non-convex.\n[Image]\nThis is not an optimal solution, since the maximum distance we moved one point is  \u2248 0.4242640687, whereas we can make it non-convex by only moving each point a distance of at most  \u2248 0.3535533906.\n\ndef",
        "answer": "def max_distance(n, points):\n    # your code here\n    return 0",
        "difficulty": "interview"
    },
    {
        "task_id": 1643,
        "prompt": "Complete the Python function given the prompt below:The only difference between easy and hard versions is the length of the string. You can hack this problem if you solve it. But you can hack the previous problem only if you solve both problems.\nKirk has a binary string $s$ (a string which consists of zeroes and ones) of length $n$ and he is asking you to find a binary string $t$ of the same length which satisfies the following conditions: For any $l$ and $r$ ($1 \\leq l \\leq r \\leq n$) the length of the longest non-decreasing subsequence of the substring $s_{l}s_{l+1} \\ldots s_{r}$ is equal to the length of the longest non-decreasing subsequence of the substring $t_{l}t_{l+1} \\ldots t_{r}$; The number of zeroes in $t$ is the maximum possible.\nA non-decreasing subsequence of a string $p$ is a sequence of indices $i_1, i_2, \\ldots, i_k$ such that $i_1 < i_2 < \\ldots < i_k$ and $p_{i_1} \\leq p_{i_2} \\leq \\ldots \\leq p_{i_k}$. The length of the subsequence is $k$.\nIf there are multiple substrings which satisfy the conditions, output any.\n-----Input-----\nThe first line contains a binary string of length not more than $10^5$.\n-----Output-----\nOutput a binary string which satisfied the above conditions. If there are many such strings, output any of them.\n-----Examples-----\nInput\n110\nOutput\n010\nInput\n010\nOutput\n010\nInput\n0001111\nOutput\n0000000\nInput\n0111001100111011101000\nOutput\n0011001100001011101000\n-----Note-----\nIn the first example:  For the substrings of the length $1$ the length of the longest non-decreasing subsequnce is $1$;  For $l = 1, r = 2$ the longest non-decreasing subsequnce of the substring $s_{1}s_{2}$ is $11$ and the longest non-decreasing subsequnce of the substring $t_{1}t_{2}$ is $01$;  For $l = 1, r = 3$ the longest non-decreasing subsequnce of the substring $s_{1}s_{3}$ is $11$ and the longest non-decreasing subsequnce of the substring $t_{1}t_{3}$ is $00$;  For $l = 2, r = 3$ the longest non-decreasing subsequnce of the substring $s_{2}s_{3}$ is $1$ and the longest non-decreasing subsequnce of the substring $t_{2}t_{3}$ is $1$; \nThe second example is similar to the first one.\n\ndef",
        "answer": "def longest_non_decreasing_subsequence(s):\n    n = len(s)\n    t = [0] * n\n    for i in range(1, n):\n        for j in range(i):\n            if s[j] < s[i] and t[j] + 1 > t[i]:\n                t[i] = t[j] + 1\n    return ''.join(map(str, t))",
        "difficulty": "interview"
    },
    {
        "task_id": 1644,
        "prompt": "Complete the Python function given the prompt below:Of course you have heard the famous task about Hanoi Towers, but did you know that there is a special factory producing the rings for this wonderful game? Once upon a time, the ruler of the ancient Egypt ordered the workers of Hanoi Factory to create as high tower as possible. They were not ready to serve such a strange order so they had to create this new tower using already produced rings.\nThere are n rings in factory's stock. The i-th ring has inner radius a_{i}, outer radius b_{i} and height h_{i}. The goal is to select some subset of rings and arrange them such that the following conditions are satisfied:  Outer radiuses form a non-increasing sequence, i.e. one can put the j-th ring on the i-th ring only if b_{j} \u2264 b_{i}.  Rings should not fall one into the the other. That means one can place ring j on the ring i only if b_{j} > a_{i}.  The total height of all rings used should be maximum possible. \n-----Input-----\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 100 000)\u00a0\u2014 the number of rings in factory's stock.\nThe i-th of the next n lines contains three integers a_{i}, b_{i} and h_{i} (1 \u2264 a_{i}, b_{i}, h_{i} \u2264 10^9, b_{i} > a_{i})\u00a0\u2014 inner radius, outer radius and the height of the i-th ring respectively.\n-----Output-----\nPrint one integer\u00a0\u2014 the maximum height of the tower that can be obtained.\n-----Examples-----\nInput\n3\n1 5 1\n2 6 2\n3 7 3\nOutput\n6\nInput\n4\n1 2 1\n1 3 3\n4 6 2\n5 7 1\nOutput\n4\n-----Note-----\nIn the first sample, the optimal solution is to take all the rings and put them on each other in order 3, 2, 1.\nIn the second sample, one can put the ring 3 on the ring 4 and get the tower of height 3, or put the ring 1 on the ring 2 and get the tower of height 4.\n\ndef",
        "answer": "def tower(n, a, b, h):\n    if n == 1:\n        return h\n    else:\n        return max(tower(n-1, a, b, h), tower(n-1, b, a, h))",
        "difficulty": "interview"
    },
    {
        "task_id": 1645,
        "prompt": "Complete the Python function given the prompt below:Eugene likes working with arrays. And today he needs your help in solving one challenging task.\nAn array $c$ is a subarray of an array $b$ if $c$ can be obtained from $b$ by deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end.\nLet's call a nonempty array good if for every nonempty subarray of this array, sum of the elements of this subarray is nonzero. For example, array $[-1, 2, -3]$ is good, as all arrays $[-1]$, $[-1, 2]$, $[-1, 2, -3]$, $[2]$, $[2, -3]$, $[-3]$ have nonzero sums of elements. However, array $[-1, 2, -1, -3]$ isn't good, as his subarray $[-1, 2, -1]$ has sum of elements equal to $0$.\nHelp Eugene to calculate the number of nonempty good subarrays of a given array $a$.\n-----Input-----\nThe first line of the input contains a single integer $n$ ($1 \\le n \\le 2 \\times 10^5$) \u00a0\u2014 the length of array $a$.\nThe second line of the input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($-10^9 \\le a_i \\le 10^9$) \u00a0\u2014 the elements of $a$. \n-----Output-----\nOutput a single integer \u00a0\u2014 the number of good subarrays of $a$.\n-----Examples-----\nInput\n3\n1 2 -3\nOutput\n5\nInput\n3\n41 -41 41\nOutput\n3\n-----Note-----\nIn the first sample, the following subarrays are good: $[1]$, $[1, 2]$, $[2]$, $[2, -3]$, $[-3]$. However, the subarray $[1, 2, -3]$ isn't good, as its subarray $[1, 2, -3]$ has sum of elements equal to $0$.\nIn the second sample, three subarrays of size 1 are the only good subarrays. At the same time, the subarray $[41, -41, 41]$ isn't good, as its subarray $[41, -41]$ has sum of elements equal to $0$.\n\ndef",
        "answer": "def solve(a):\n    return 0",
        "difficulty": "interview"
    },
    {
        "task_id": 1646,
        "prompt": "Complete the Python function given the prompt below:String can be called correct if it consists of characters \"0\" and \"1\" and there are no redundant leading zeroes. Here are some examples: \"0\", \"10\", \"1001\".\nYou are given a correct string s.\nYou can perform two different operations on this string:   swap any pair of adjacent characters (for example, \"101\" $\\rightarrow$ \"110\");  replace \"11\" with \"1\" (for example, \"110\" $\\rightarrow$ \"10\"). \nLet val(s) be such a number that s is its binary representation.\nCorrect string a is less than some other correct string b iff val(a) < val(b).\nYour task is to find the minimum correct string that you can obtain from the given one using the operations described above. You can use these operations any number of times in any order (or even use no operations at all).\n-----Input-----\nThe first line contains integer number n (1 \u2264 n \u2264 100) \u2014 the length of string s.\nThe second line contains the string s consisting of characters \"0\" and \"1\". It is guaranteed that the string s is correct.\n-----Output-----\nPrint one string \u2014 the minimum correct string that you can obtain from the given one.\n-----Examples-----\nInput\n4\n1001\nOutput\n100\nInput\n1\n1\nOutput\n1\n-----Note-----\nIn the first example you can obtain the answer by the following sequence of operations: \"1001\" $\\rightarrow$ \"1010\" $\\rightarrow$ \"1100\" $\\rightarrow$ \"100\".\nIn the second example you can't obtain smaller answer no matter what operations you use.\n\ndef",
        "answer": "def solution(s):\n    # your code here\n    return s",
        "difficulty": "interview"
    },
    {
        "task_id": 1647,
        "prompt": "Complete the Python function given the prompt below:Valya and Tolya are an ideal pair, but they quarrel sometimes. Recently, Valya took offense at her boyfriend because he came to her in t-shirt with lettering that differs from lettering on her pullover. Now she doesn't want to see him and Tolya is seating at his room and crying at her photos all day long.\nThis story could be very sad but fairy godmother (Tolya's grandmother) decided to help them and restore their relationship. She secretly took Tolya's t-shirt and Valya's pullover and wants to make the letterings on them same. In order to do this, for one unit of mana she can buy a spell that can change some letters on the clothes. Your task is calculate the minimum amount of mana that Tolya's grandmother should spend to rescue love of Tolya and Valya.\nMore formally, letterings on Tolya's t-shirt and Valya's pullover are two strings with same length n consisting only of lowercase English letters. Using one unit of mana, grandmother can buy a spell of form (c_1, c_2) (where c_1 and c_2 are some lowercase English letters), which can arbitrary number of times transform a single letter c_1 to c_2 and vise-versa on both Tolya's t-shirt and Valya's pullover. You should find the minimum amount of mana that grandmother should spend to buy a set of spells that can make the letterings equal. In addition you should output the required set of spells. \n-----Input-----\nThe first line contains a single integer n (1 \u2264 n \u2264 10^5) \u2014 the length of the letterings.\nThe second line contains a string with length n, consisting of lowercase English letters\u00a0\u2014 the lettering on Valya's pullover.\nThe third line contains the lettering on Tolya's t-shirt in the same format.\n-----Output-----\nIn the first line output a single integer\u00a0\u2014 the minimum amount of mana t required for rescuing love of Valya and Tolya.\nIn the next t lines output pairs of space-separated lowercase English letters\u00a0\u2014 spells that Tolya's grandmother should buy. Spells and letters in spells can be printed in any order.\nIf there are many optimal answers, output any.\n-----Examples-----\nInput\n3\nabb\ndad\nOutput\n2\na d\nb a\nInput\n8\ndrpepper\ncocacola\nOutput\n7\nl e\ne d\nd c\nc p\np o\no r\nr a\n-----Note-----\nIn first example it's enough to buy two spells: ('a','d') and ('b','a'). Then first letters will coincide when we will replace letter 'a' with 'd'. Second letters will coincide when we will replace 'b' with 'a'. Third letters will coincide when we will at first replace 'b' with 'a' and then 'a' with 'd'.\n\ndef",
        "answer": "def solve(a, b):\n    return sum(abs(ord(a) - ord(b)) for a, b in zip(a, b))",
        "difficulty": "interview"
    },
    {
        "task_id": 1648,
        "prompt": "Complete the Python function given the prompt below:There are K blue balls and N-K red balls. The balls of the same color cannot be distinguished. Snuke and Takahashi are playing with these balls.\nFirst, Snuke will arrange the N balls in a row from left to right.\nThen, Takahashi will collect only the K blue balls. In one move, he can collect any number of consecutive blue balls. He will collect all the blue balls in the fewest moves possible.\nHow many ways are there for Snuke to arrange the N balls in a row so that Takahashi will need exactly i moves to collect all the blue balls? Compute this number modulo 10^9+7 for each i such that 1 \\leq i \\leq K.\n-----Constraints-----\n - 1 \\leq K \\leq N \\leq 2000\n-----Input-----\nInput is given from Standard Input in the following format:\nN K\n-----Output-----\nPrint K lines. The i-th line (1 \\leq i \\leq K) should contain the number of ways to arrange the N balls so that Takahashi will need exactly i moves to collect all the blue balls, modulo 10^9+7.\n-----Sample Input-----\n5 3\n-----Sample Output-----\n3\n6\n1\nThere are three ways to arrange the balls so that Takahashi will need exactly one move: (B, B, B, R, R), (R, B, B, B, R), and (R, R, B, B, B). (R and B stands for red and blue, respectively).\nThere are six ways to arrange the balls so that Takahashi will need exactly two moves: (B, B, R, B, R), (B, B, R, R, B), (R, B, B, R, B), (R, B, R, B, B), (B, R, B, B, R), and (B, R, R, B, B).\nThere is one way to arrange the balls so that Takahashi will need exactly three moves: (B, R, B, R, B).\n\ndef",
        "answer": "def solve(n, k):\n    if k == 0:\n        return 1\n    if k > n:\n        return 0\n    return solve(n-1, k-1) + solve(n-1, k)",
        "difficulty": "interview"
    },
    {
        "task_id": 1649,
        "prompt": "Complete the Python function given the prompt below:Snuke has four cookies with deliciousness A, B, C, and D. He will choose one or more from those cookies and eat them. Is it possible that the sum of the deliciousness of the eaten cookies is equal to that of the remaining cookies?\n-----Constraints-----\n - All values in input are integers.\n - 1 \\leq A,B,C,D \\leq 10^{8}\n-----Input-----\nInput is given from Standard Input in the following format:\nA B C D\n-----Output-----\nIf it is possible that the sum of the deliciousness of the eaten cookies is equal to that of the remaining cookies, print Yes; otherwise, print No.\n-----Sample Input-----\n1 3 2 4\n-----Sample Output-----\nYes\n - If he eats the cookies with deliciousness 1 and 4, the sum of the deliciousness of the eaten cookies will be equal to that of the remaining cookies.\n\ndef",
        "answer": "def solve(A,B,C,D):\n    if A+B+C+D==0:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "difficulty": "interview"
    },
    {
        "task_id": 1650,
        "prompt": "Complete the Python function given the prompt below:You are given a positive integer L in base two.\nHow many pairs of non-negative integers (a, b) satisfy the following conditions?\n - a + b \\leq L\n - a + b = a \\mbox{ XOR } b\nSince there can be extremely many such pairs, print the count modulo 10^9 + 7.\n What is XOR?\nThe XOR of integers A and B, A \\mbox{ XOR } B, is defined as follows:\n - When A \\mbox{ XOR } B is written in base two, the digit in the 2^k's place (k \\geq 0) is 1 if either A or B, but not both, has 1 in the 2^k's place, and 0 otherwise.\nFor example, 3 \\mbox{ XOR } 5 = 6. (In base two: 011 \\mbox{ XOR } 101 = 110.)\n-----Constraints-----\n - L is given in base two, without leading zeros.\n - 1 \\leq L < 2^{100\\ 001}\n-----Input-----\nInput is given from Standard Input in the following format:\nL\n-----Output-----\nPrint the number of pairs (a, b) that satisfy the conditions, modulo 10^9 + 7.\n-----Sample Input-----\n10\n-----Sample Output-----\n5\nFive pairs (a, b) satisfy the conditions: (0, 0), (0, 1), (1, 0), (0, 2) and (2, 0).\n\ndef",
        "answer": "def count_pairs(L):\n    count = 0\n    for a in range(L):\n        for b in range(L):\n            if a + b <= L and a ^ b == a:\n                count += 1\n    return count",
        "difficulty": "interview"
    },
    {
        "task_id": 1651,
        "prompt": "Complete the Python function given the prompt below:Given are integers S and P.\nIs there a pair of positive integers (N,M) such that N + M = S and N \\times M = P?\n-----Constraints-----\n - All values in input are integers.\n - 1 \\leq S,P \\leq 10^{12}\n-----Input-----\nInput is given from Standard Input in the following format:\nS P\n-----Output-----\nIf there is a pair of positive integers (N,M) such that N + M = S and N \\times M = P, print Yes; otherwise, print No.\n-----Sample Input-----\n3 2\n-----Sample Output-----\nYes\n - For example, we have N+M=3 and N \\times M =2 for N=1,M=2.\n\ndef",
        "answer": "def solve(s,p):\n    for i in range(s,p+1):\n        if i*(i+1) == p:\n            print \"Yes\"\n            return\n    print \"No\"",
        "difficulty": "interview"
    },
    {
        "task_id": 1652,
        "prompt": "Complete the Python function given the prompt below:You are given a string S consisting of lowercase English letters.\nAnother string T is initially empty.\nDetermine whether it is possible to obtain S = T by performing the following operation an arbitrary number of times:\n - Append one of the following at the end of T: dream, dreamer, erase and eraser.\n-----Constraints-----\n - 1\u2266|S|\u226610^5\n - S consists of lowercase English letters.\n-----Input-----\nThe input is given from Standard Input in the following format:\nS\n-----Output-----\nIf it is possible to obtain S = T, print YES. Otherwise, print NO.\n-----Sample Input-----\nerasedream\n-----Sample Output-----\nYES\nAppend erase and dream at the end of T in this order, to obtain S = T.\n\ndef",
        "answer": "def solve(S):\n    T = \"\"\n    for i in S:\n        if i == \"d\":\n            T += \"dream\"\n        elif i == \"e\":\n            T += \"erase\"\n        elif i == \"r\":\n            T += \"eraser\"\n        else:\n            T += i\n    if T == S:\n        print \"YES\"\n    else:\n        print \"NO\"",
        "difficulty": "interview"
    },
    {
        "task_id": 1653,
        "prompt": "Complete the Python function given the prompt below:Alice has a string consisting of characters 'A', 'B' and 'C'. Bob can use the following transitions on any substring of our string in any order any number of times:   A $\\rightarrow$ BC  B $\\rightarrow$ AC  C $\\rightarrow$ AB  AAA $\\rightarrow$ empty string \nNote that a substring is one or more consecutive characters. For given queries, determine whether it is possible to obtain the target string from source.\n-----Input-----\nThe first line contains a string S (1 \u2264 |S| \u2264 10^5). The second line contains a string T (1 \u2264 |T| \u2264 10^5), each of these strings consists only of uppercase English letters 'A', 'B' and 'C'.\nThe third line contains the number of queries Q (1 \u2264 Q \u2264 10^5).\nThe following Q lines describe queries. The i-th of these lines contains four space separated integers a_{i}, b_{i}, c_{i}, d_{i}. These represent the i-th query: is it possible to create T[c_{i}..d_{i}] from S[a_{i}..b_{i}] by applying the above transitions finite amount of times?\nHere, U[x..y] is a substring of U that begins at index x (indexed from 1) and ends at index y. In particular, U[1..|U|] is the whole string U.\nIt is guaranteed that 1 \u2264 a \u2264 b \u2264 |S| and 1 \u2264 c \u2264 d \u2264 |T|.\n-----Output-----\nPrint a string of Q characters, where the i-th character is '1' if the answer to the i-th query is positive, and '0' otherwise.\n-----Example-----\nInput\nAABCCBAAB\nABCB\n5\n1 3 1 2\n2 2 2 4\n7 9 1 1\n3 4 2 3\n4 5 1 3\nOutput\n10011\n-----Note-----\nIn the first query we can achieve the result, for instance, by using transitions $A A B \\rightarrow A A A C \\rightarrow \\operatorname{AAA} A B \\rightarrow A B$.\nThe third query asks for changing AAB to A\u00a0\u2014 but in this case we are not able to get rid of the character 'B'.\n\ndef",
        "answer": "def is_possible(S, T, queries):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 1654,
        "prompt": "Complete the Python function given the prompt below:You are given two strings s and t consisting of small Latin letters, string s can also contain '?' characters. \nSuitability of string s is calculated by following metric:\nAny two letters can be swapped positions, these operations can be performed arbitrary number of times over any pair of positions. Among all resulting strings s, you choose the one with the largest number of non-intersecting occurrences of string t. Suitability is this number of occurrences.\nYou should replace all '?' characters with small Latin letters in such a way that the suitability of string s is maximal.\n-----Input-----\nThe first line contains string s (1 \u2264 |s| \u2264 10^6).\nThe second line contains string t (1 \u2264 |t| \u2264 10^6).\n-----Output-----\nPrint string s with '?' replaced with small Latin letters in such a way that suitability of that string is maximal.\nIf there are multiple strings with maximal suitability then print any of them.\n-----Examples-----\nInput\n?aa?\nab\nOutput\nbaab\nInput\n??b?\nza\nOutput\nazbz\nInput\nabcd\nabacaba\nOutput\nabcd\n-----Note-----\nIn the first example string \"baab\" can be transformed to \"abab\" with swaps, this one has suitability of 2. That means that string \"baab\" also has suitability of 2.\nIn the second example maximal suitability you can achieve is 1 and there are several dozens of such strings, \"azbz\" is just one of them.\nIn the third example there are no '?' characters and the suitability of the string is 0.\n\ndef",
        "answer": "def suitability(s, t):\n    s = s.replace('?', 'a')\n    t = t.replace('?', 'a')\n    return s.count('a') - t.count('a')",
        "difficulty": "interview"
    },
    {
        "task_id": 1655,
        "prompt": "Complete the Python function given the prompt below:Hands that shed innocent blood!\nThere are n guilty people in a line, the i-th of them holds a claw with length L_{i}. The bell rings and every person kills some of people in front of him. All people kill others at the same time. Namely, the i-th person kills the j-th person if and only if j < i and j \u2265 i - L_{i}.\nYou are given lengths of the claws. You need to find the total number of alive people after the bell rings.\n-----Input-----\nThe first line contains one integer n (1 \u2264 n \u2264 10^6) \u2014 the number of guilty people.\nSecond line contains n space-separated integers L_1, L_2,..., L_{n} (0 \u2264 L_{i} \u2264 10^9), where L_{i} is the length of the i-th person's claw.\n-----Output-----\nPrint one integer \u2014 the total number of alive people after the bell rings.\n-----Examples-----\nInput\n4\n0 1 0 10\nOutput\n1\nInput\n2\n0 0\nOutput\n2\nInput\n10\n1 1 3 0 0 0 2 1 0 3\nOutput\n3\n-----Note-----\nIn first sample the last person kills everyone in front of him.\n\ndef",
        "answer": "def alive_people(n, L):\n    alive = 0\n    for i in range(n):\n        if i < n - L[i]:\n            alive += 1\n    return alive",
        "difficulty": "interview"
    },
    {
        "task_id": 1656,
        "prompt": "Complete the Python function given the prompt below:Recall that string $a$ is a subsequence of a string $b$ if $a$ can be obtained from $b$ by deletion of several (possibly zero or all) characters. For example, for the string $a$=\"wowwo\", the following strings are subsequences: \"wowwo\", \"wowo\", \"oo\", \"wow\", \"\", and others, but the following are not subsequences: \"owoo\", \"owwwo\", \"ooo\".\nThe wow factor of a string is the number of its subsequences equal to the word \"wow\". Bob wants to write a string that has a large wow factor. However, the \"w\" key on his keyboard is broken, so he types two \"v\"s instead. \nLittle did he realise that he may have introduced more \"w\"s than he thought. Consider for instance the string \"ww\". Bob would type it as \"vvvv\", but this string actually contains three occurrences of \"w\":   \"vvvv\"  \"vvvv\"  \"vvvv\" \nFor example, the wow factor of the word \"vvvovvv\" equals to four because there are four wows:  \"vvvovvv\"  \"vvvovvv\"  \"vvvovvv\"  \"vvvovvv\" \nNote that the subsequence \"vvvovvv\" does not count towards the wow factor, as the \"v\"s have to be consecutive.\nFor a given string $s$, compute and output its wow factor. Note that it is not guaranteed that it is possible to get $s$ from another string replacing \"w\" with \"vv\". For example, $s$ can be equal to \"vov\".\n-----Input-----\nThe input contains a single non-empty string $s$, consisting only of characters \"v\" and \"o\". The length of $s$ is at most $10^6$.\n-----Output-----\nOutput a single integer, the wow factor of $s$.\n-----Examples-----\nInput\nvvvovvv\nOutput\n4\nInput\nvvovooovovvovoovoovvvvovovvvov\nOutput\n100\n-----Note-----\nThe first example is explained in the legend.\n\ndef",
        "answer": "def wow(s):\n    return s.count('w')",
        "difficulty": "interview"
    },
    {
        "task_id": 1657,
        "prompt": "Complete the Python function given the prompt below:You have n devices that you want to use simultaneously.\nThe i-th device uses a_{i} units of power per second. This usage is continuous. That is, in \u03bb seconds, the device will use \u03bb\u00b7a_{i} units of power. The i-th device currently has b_{i} units of power stored. All devices can store an arbitrary amount of power.\nYou have a single charger that can plug to any single device. The charger will add p units of power per second to a device. This charging is continuous. That is, if you plug in a device for \u03bb seconds, it will gain \u03bb\u00b7p units of power. You can switch which device is charging at any arbitrary unit of time (including real numbers), and the time it takes to switch is negligible.\nYou are wondering, what is the maximum amount of time you can use the devices until one of them hits 0 units of power.\nIf you can use the devices indefinitely, print -1. Otherwise, print the maximum amount of time before any one device hits 0 power.\n-----Input-----\nThe first line contains two integers, n and p (1 \u2264 n \u2264 100 000, 1 \u2264 p \u2264 10^9)\u00a0\u2014 the number of devices and the power of the charger.\nThis is followed by n lines which contain two integers each. Line i contains the integers a_{i} and b_{i} (1 \u2264 a_{i}, b_{i} \u2264 100 000)\u00a0\u2014 the power of the device and the amount of power stored in the device in the beginning.\n-----Output-----\nIf you can use the devices indefinitely, print -1. Otherwise, print the maximum amount of time before any one device hits 0 power.\nYour answer will be considered correct if its absolute or relative error does not exceed 10^{ - 4}.\nNamely, let's assume that your answer is a and the answer of the jury is b. The checker program will consider your answer correct if $\\frac{|a - b|}{\\operatorname{max}(1, b)} \\leq 10^{-4}$.\n-----Examples-----\nInput\n2 1\n2 2\n2 1000\nOutput\n2.0000000000\nInput\n1 100\n1 1\nOutput\n-1\nInput\n3 5\n4 3\n5 2\n6 1\nOutput\n0.5000000000\n-----Note-----\nIn sample test 1, you can charge the first device for the entire time until it hits zero power. The second device has enough power to last this time without being charged.\nIn sample test 2, you can use the device indefinitely.\nIn sample test 3, we can charge the third device for 2 / 5 of a second, then switch to charge the second device for a 1 / 10 of a second.\n\ndef",
        "answer": "def max_time(n, p):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 1658,
        "prompt": "Complete the Python function given the prompt below:When Darth Vader gets bored, he sits down on the sofa, closes his eyes and thinks of an infinite rooted tree where each node has exactly n sons, at that for each node, the distance between it an its i-th left child equals to d_{i}. The Sith Lord loves counting the number of nodes in the tree that are at a distance at most x from the root. The distance is the sum of the lengths of edges on the path between nodes.\nBut he has got used to this activity and even grew bored of it. 'Why does he do that, then?' \u2014 you may ask. It's just that he feels superior knowing that only he can solve this problem. \nDo you want to challenge Darth Vader himself? Count the required number of nodes. As the answer can be rather large, find it modulo 10^9 + 7.\n-----Input-----\nThe first line contains two space-separated integers n and x (1 \u2264 n \u2264 10^5, 0 \u2264 x \u2264 10^9) \u2014 the number of children of each node and the distance from the root within the range of which you need to count the nodes.\nThe next line contains n space-separated integers d_{i} (1 \u2264 d_{i} \u2264 100) \u2014 the length of the edge that connects each node with its i-th child.\n-----Output-----\nPrint a single number \u2014 the number of vertexes in the tree at distance from the root equal to at most x. \n-----Examples-----\nInput\n3 3\n1 2 3\nOutput\n8\n-----Note-----\nPictures to the sample (the yellow color marks the nodes the distance to which is at most three) [Image]\n\ndef",
        "answer": "def count_nodes(n, x):\n    # Write your code here\n    return 0",
        "difficulty": "interview"
    },
    {
        "task_id": 1659,
        "prompt": "Complete the Python function given the prompt below:After their adventure with the magic mirror Kay and Gerda have returned home and sometimes give free ice cream to kids in the summer.\nAt the start of the day they have x ice cream packs. Since the ice cream is free, people start standing in the queue before Kay and Gerda's house even in the night. Each person in the queue wants either to take several ice cream packs for himself and his friends or to give several ice cream packs to Kay and Gerda (carriers that bring ice cream have to stand in the same queue).\nIf a carrier with d ice cream packs comes to the house, then Kay and Gerda take all his packs. If a child who wants to take d ice cream packs comes to the house, then Kay and Gerda will give him d packs if they have enough ice cream, otherwise the child will get no ice cream at all and will leave in distress.\nKay wants to find the amount of ice cream they will have after all people will leave from the queue, and Gerda wants to find the number of distressed kids.\n-----Input-----\nThe first line contains two space-separated integers n and x (1 \u2264 n \u2264 1000, 0 \u2264 x \u2264 10^9).\nEach of the next n lines contains a character '+' or '-', and an integer d_{i}, separated by a space (1 \u2264 d_{i} \u2264 10^9). Record \"+ d_{i}\" in i-th line means that a carrier with d_{i} ice cream packs occupies i-th place from the start of the queue, and record \"- d_{i}\" means that a child who wants to take d_{i} packs stands in i-th place.\n-----Output-----\nPrint two space-separated integers\u00a0\u2014 number of ice cream packs left after all operations, and number of kids that left the house in distress.\n-----Examples-----\nInput\n5 7\n+ 5\n- 10\n- 20\n+ 40\n- 20\nOutput\n22 1\nInput\n5 17\n- 16\n- 2\n- 98\n+ 100\n- 98\nOutput\n3 2\n-----Note-----\nConsider the first sample.  Initially Kay and Gerda have 7 packs of ice cream.  Carrier brings 5 more, so now they have 12 packs.  A kid asks for 10 packs and receives them. There are only 2 packs remaining.  Another kid asks for 20 packs. Kay and Gerda do not have them, so the kid goes away distressed.  Carrier bring 40 packs, now Kay and Gerda have 42 packs.  Kid asks for 20 packs and receives them. There are 22 packs remaining.\n\ndef",
        "answer": "def icecream(n, x):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 1660,
        "prompt": "Complete the Python function given the prompt below:Pashmak's homework is a problem about graphs. Although he always tries to do his homework completely, he can't solve this problem. As you know, he's really weak at graph theory; so try to help him in solving the problem.\nYou are given a weighted directed graph with n vertices and m edges. You need to find a path (perhaps, non-simple) with maximum number of edges, such that the weights of the edges increase along the path. In other words, each edge of the path must have strictly greater weight than the previous edge in the path.\nHelp Pashmak, print the number of edges in the required path.\n-----Input-----\nThe first line contains two integers n, m (2 \u2264 n \u2264 3\u00b710^5;\u00a01 \u2264 m \u2264 min(n\u00b7(n - 1), 3\u00b710^5)). Then, m lines follows. The i-th line contains three space separated integers: u_{i}, v_{i}, w_{i} (1 \u2264 u_{i}, v_{i} \u2264 n;\u00a01 \u2264 w_{i} \u2264 10^5) which indicates that there's a directed edge with weight w_{i} from vertex u_{i} to vertex v_{i}.\nIt's guaranteed that the graph doesn't contain self-loops and multiple edges.\n-----Output-----\nPrint a single integer \u2014 the answer to the problem.\n-----Examples-----\nInput\n3 3\n1 2 1\n2 3 1\n3 1 1\nOutput\n1\nInput\n3 3\n1 2 1\n2 3 2\n3 1 3\nOutput\n3\nInput\n6 7\n1 2 1\n3 2 5\n2 4 2\n2 5 2\n2 6 9\n5 4 3\n4 3 4\nOutput\n6\n-----Note-----\nIn the first sample the maximum trail can be any of this trails: $1 \\rightarrow 2,2 \\rightarrow 3,3 \\rightarrow 1$.\nIn the second sample the maximum trail is $1 \\rightarrow 2 \\rightarrow 3 \\rightarrow 1$.\nIn the third sample the maximum trail is $1 \\rightarrow 2 \\rightarrow 5 \\rightarrow 4 \\rightarrow 3 \\rightarrow 2 \\rightarrow 6$.\n\ndef",
        "answer": "def max_trail(n, m):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 1661,
        "prompt": "Complete the Python function given the prompt below:Maxim wants to buy some games at the local game shop. There are $n$ games in the shop, the $i$-th game costs $c_i$.\nMaxim has a wallet which can be represented as an array of integers. His wallet contains $m$ bills, the $j$-th bill has value $a_j$.\nGames in the shop are ordered from left to right, Maxim tries to buy every game in that order.\nWhen Maxim stands at the position $i$ in the shop, he takes the first bill from his wallet (if his wallet is empty then he proceeds to the next position immediately) and tries to buy the $i$-th game using this bill. After Maxim tried to buy the $n$-th game, he leaves the shop.\nMaxim buys the $i$-th game if and only if the value of the first bill (which he takes) from his wallet is greater or equal to the cost of the $i$-th game. If he successfully buys the $i$-th game, the first bill from his wallet disappears and the next bill becomes first. Otherwise Maxim leaves the first bill in his wallet (this bill still remains the first one) and proceeds to the next game.\nFor example, for array $c = [2, 4, 5, 2, 4]$ and array $a = [5, 3, 4, 6]$ the following process takes place: Maxim buys the first game using the first bill (its value is $5$), the bill disappears, after that the second bill (with value $3$) becomes the first one in Maxim's wallet, then Maxim doesn't buy the second game because $c_2 > a_2$, the same with the third game, then he buys the fourth game using the bill of value $a_2$ (the third bill becomes the first one in Maxim's wallet) and buys the fifth game using the bill of value $a_3$.\nYour task is to get the number of games Maxim will buy.\n-----Input-----\nThe first line of the input contains two integers $n$ and $m$ ($1 \\le n, m \\le 1000$) \u2014 the number of games and the number of bills in Maxim's wallet.\nThe second line of the input contains $n$ integers $c_1, c_2, \\dots, c_n$ ($1 \\le c_i \\le 1000$), where $c_i$ is the cost of the $i$-th game.\nThe third line of the input contains $m$ integers $a_1, a_2, \\dots, a_m$ ($1 \\le a_j \\le 1000$), where $a_j$ is the value of the $j$-th bill from the Maxim's wallet.\n-----Output-----\nPrint a single integer \u2014 the number of games Maxim will buy.\n-----Examples-----\nInput\n5 4\n2 4 5 2 4\n5 3 4 6\nOutput\n3\nInput\n5 2\n20 40 50 20 40\n19 20\nOutput\n0\nInput\n6 4\n4 8 15 16 23 42\n1000 1000 1000 1000\nOutput\n4\n-----Note-----\nThe first example is described in the problem statement.\nIn the second example Maxim cannot buy any game because the value of the first bill in his wallet is smaller than the cost of any game in the shop.\nIn the third example the values of the bills in Maxim's wallet are large enough to buy any game he encounter until he runs out of bills in his wallet.\n\ndef",
        "answer": "def maxim_buy_games(n, m, c, a):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 1662,
        "prompt": "Complete the Python function given the prompt below:Sereja loves integer sequences very much. He especially likes stairs.\nSequence a_1, a_2,..., a_{|}a| (|a| is the length of the sequence) is stairs if there is such index i (1 \u2264 i \u2264 |a|), that the following condition is met: a_1 < a_2 <... < a_{i} - 1 < a_{i} > a_{i} + 1 >... > a_{|}a| - 1 > a_{|}a|.\nFor example, sequences [1, 2, 3, 2] and [4, 2] are stairs and sequence [3, 1, 2] isn't.\nSereja has m cards with numbers. He wants to put some cards on the table in a row to get a stair sequence. What maximum number of cards can he put on the table?\n-----Input-----\nThe first line contains integer m (1 \u2264 m \u2264 10^5) \u2014 the number of Sereja's cards. The second line contains m integers b_{i} (1 \u2264 b_{i} \u2264 5000) \u2014 the numbers on the Sereja's cards.\n-----Output-----\nIn the first line print the number of cards you can put on the table. In the second line print the resulting stairs.\n-----Examples-----\nInput\n5\n1 2 3 4 5\nOutput\n5\n5 4 3 2 1\nInput\n6\n1 1 2 2 3 3\nOutput\n5\n1 2 3 2 1\n\ndef",
        "answer": "def stair_sequence(a):\n    if len(a) == 1:\n        return 1\n    else:\n        return stair_sequence(a[1:]) + stair_sequence(a[:-1])",
        "difficulty": "interview"
    },
    {
        "task_id": 1663,
        "prompt": "Complete the Python function given the prompt below:Sometimes it is not easy to come to an agreement in a bargain. Right now Sasha and Vova can't come to an agreement: Sasha names a price as high as possible, then Vova wants to remove as many digits from the price as possible. In more details, Sasha names some integer price $n$, Vova removes a non-empty substring of (consecutive) digits from the price, the remaining digits close the gap, and the resulting integer is the price.\nFor example, is Sasha names $1213121$, Vova can remove the substring $1312$, and the result is $121$.\nIt is allowed for result to contain leading zeros. If Vova removes all digits, the price is considered to be $0$.\nSasha wants to come up with some constraints so that Vova can't just remove all digits, but he needs some arguments supporting the constraints. To start with, he wants to compute the sum of all possible resulting prices after Vova's move.\nHelp Sasha to compute this sum. Since the answer can be very large, print it modulo $10^9 + 7$.\n-----Input-----\nThe first and only line contains a single integer $n$ ($1 \\le n < 10^{10^5}$).\n-----Output-----\nIn the only line print the required sum modulo $10^9 + 7$.\n-----Examples-----\nInput\n107\nOutput\n42\nInput\n100500100500\nOutput\n428101984\n-----Note-----\nConsider the first example.\nVova can choose to remove $1$, $0$, $7$, $10$, $07$, or $107$. The results are $07$, $17$, $10$, $7$, $1$, $0$. Their sum is $42$.\n\ndef",
        "answer": "def solve(n):\n    return sum(int(i) for i in str(n))",
        "difficulty": "interview"
    },
    {
        "task_id": 1664,
        "prompt": "Complete the Python function given the prompt below:Let's analyze a program written on some strange programming language. The variables in this language have names consisting of $1$ to $4$ characters, and each character is a lowercase or an uppercase Latin letter, or a digit. There is an extra constraint that the first character should not be a digit.\nThere are four types of operations in the program, each denoted by one of the characters: $, ^, # or &.\nEach line of the program has one of the following formats:   <lvalue>=<rvalue>, where <lvalue> and <rvalue> are valid variable names;  <lvalue>=<arg1><op><arg2>, where <lvalue>, <arg1> and <arg2> are valid variable names, and <op> is an operation character. \nThe program is executed line-by-line, and the result of execution is stored in a variable having the name res. If res is never assigned in the program, then the result will be equal to the value of res before running the program.\nTwo programs are called equivalent if no matter which operations do characters $, ^, # and & denote (but, obviously, performing the same operation on the same arguments gives the same result) and which values do variables have before execution of program, the value of res after running the first program is equal to the value of res after running the second program (the programs are executed independently).\nYou are given a program consisting of $n$ lines. Your task is to write a program consisting of minimum possible number of lines that is equivalent to the program you are given.\n-----Input-----\nThe first line contains one integer $n$ ($1 \\le n \\le 1000$) \u2014 the number of lines in the program.\nThen $n$ lines follow \u2014 the program itself. Each line corresponds to the format described in the statement and has no extra whitespaces.\n-----Output-----\nIn the first line print $k$ \u2014 the minimum number of lines in the equivalent program.\nThen print $k$ lines without any whitespaces \u2014 an equivalent program having exactly $k$ lines, in the same format it is described in the statement.\n-----Examples-----\nInput\n4\nc=aa#bb\nd12=c\nres=c^d12\ntmp=aa$c\nOutput\n2\naaaa=aa#bb\nres=aaaa^aaaa\nInput\n2\nmax=aaaa$bbbb\nmin=bbbb^aaaa\nOutput\n0\n\ndef",
        "answer": "def solve(n, lines):\n    res = lines[0]\n    for i in range(1, n):\n        res = res ^ lines[i]\n    return res",
        "difficulty": "interview"
    },
    {
        "task_id": 1665,
        "prompt": "Complete the Python function given the prompt below:You are given a tree consisting of $n$ nodes. You want to write some labels on the tree's edges such that the following conditions hold:\n  Every label is an integer between $0$ and $n-2$ inclusive.  All the written labels are distinct.  The largest value among $MEX(u,v)$ over all pairs of nodes $(u,v)$ is as small as possible. \nHere, $MEX(u,v)$ denotes the smallest non-negative integer that isn't written on any edge on the unique simple path from node $u$ to node $v$.\n-----Input-----\nThe first line contains the integer $n$ ($2 \\le n \\le 10^5$)\u00a0\u2014 the number of nodes in the tree.\nEach of the next $n-1$ lines contains two space-separated integers $u$ and $v$ ($1 \\le u,v \\le n$) that mean there's an edge between nodes $u$ and $v$. It's guaranteed that the given graph is a tree.\n-----Output-----\nOutput $n-1$ integers. The $i^{th}$ of them will be the number written on the $i^{th}$ edge (in the input order).\n-----Examples-----\nInput\n3\n1 2\n1 3\nOutput\n0\n1\nInput\n6\n1 2\n1 3\n2 4\n2 5\n5 6\nOutput\n0\n3\n2\n4\n1\n-----Note-----\nThe tree from the second sample:\n[Image]\n\ndef",
        "answer": "def max_edge_label(n, edges):\n  # Write your code here",
        "difficulty": "interview"
    },
    {
        "task_id": 1666,
        "prompt": "Complete the Python function given the prompt below:Petya and Vasya are tossing a coin. Their friend Valera is appointed as a judge. The game is very simple. First Vasya tosses a coin x times, then Petya tosses a coin y times. If the tossing player gets head, he scores one point. If he gets tail, nobody gets any points. The winner is the player with most points by the end of the game. If boys have the same number of points, the game finishes with a draw.\nAt some point, Valera lost his count, and so he can not say exactly what the score is at the end of the game. But there are things he remembers for sure. He remembers that the entire game Vasya got heads at least a times, and Petya got heads at least b times. Moreover, he knows that the winner of the game was Vasya. Valera wants to use this information to know every possible outcome of the game, which do not contradict his memories.\n-----Input-----\nThe single line contains four integers x, y, a, b (1 \u2264 a \u2264 x \u2264 100, 1 \u2264 b \u2264 y \u2264 100). The numbers on the line are separated by a space.\n-----Output-----\nIn the first line print integer n \u2014 the number of possible outcomes of the game. Then on n lines print the outcomes. On the i-th line print a space-separated pair of integers c_{i}, d_{i} \u2014 the number of heads Vasya and Petya got in the i-th outcome of the game, correspondingly. Print pairs of integers (c_{i}, d_{i}) in the strictly increasing order.\nLet us remind you that the pair of numbers (p_1, q_1) is less than the pair of numbers (p_2, q_2), if p_1 < p_2, or p_1 = p_2 and also q_1 < q_2.\n-----Examples-----\nInput\n3 2 1 1\nOutput\n3\n2 1\n3 1\n3 2\nInput\n2 4 2 2\nOutput\n0\n\ndef",
        "answer": "def coin_game(x, y, a, b):\n    # your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 1667,
        "prompt": "Complete the Python function given the prompt below:For long time scientists study the behavior of sharks. Sharks, as many other species, alternate short movements in a certain location and long movements between locations.\nMax is a young biologist. For $n$ days he watched a specific shark, and now he knows the distance the shark traveled in each of the days. All the distances are distinct. Max wants to know now how many locations the shark visited. He assumed there is such an integer $k$ that if the shark in some day traveled the distance strictly less than $k$, then it didn't change the location; otherwise, if in one day the shark traveled the distance greater than or equal to $k$; then it was changing a location in that day. Note that it is possible that the shark changed a location for several consecutive days, in each of them the shark traveled the distance at least $k$.\nThe shark never returned to the same location after it has moved from it. Thus, in the sequence of $n$ days we can find consecutive nonempty segments when the shark traveled the distance less than $k$ in each of the days: each such segment corresponds to one location. Max wants to choose such $k$ that the lengths of all such segments are equal.\nFind such integer $k$, that the number of locations is as large as possible. If there are several such $k$, print the smallest one.\n-----Input-----\nThe first line contains a single integer $n$ ($1 \\leq n \\leq 10^5$) \u2014 the number of days.\nThe second line contains $n$ distinct positive integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq 10^9$) \u2014 the distance traveled in each of the day.\n-----Output-----\nPrint a single integer $k$, such that   the shark was in each location the same number of days,  the number of locations is maximum possible satisfying the first condition,  $k$ is smallest possible satisfying the first and second conditions. \n-----Examples-----\nInput\n8\n1 2 7 3 4 8 5 6\nOutput\n7\nInput\n6\n25 1 2 3 14 36\nOutput\n2\n-----Note-----\nIn the first example the shark travels inside a location on days $1$ and $2$ (first location), then on $4$-th and $5$-th days (second location), then on $7$-th and $8$-th days (third location). There are three locations in total.\nIn the second example the shark only moves inside a location on the $2$-nd day, so there is only one location.\n\ndef",
        "answer": "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    k = 1\n    for i in range(1, n):\n        if a[i] < a[i-1]:\n            k += 1\n    print(k)\nsolve()\n",
        "difficulty": "interview"
    },
    {
        "task_id": 1668,
        "prompt": "Complete the Python function given the prompt below:A PIN code is a string that consists of exactly $4$ digits. Examples of possible PIN codes: 7013, 0000 and 0990. Please note that the PIN code can begin with any digit, even with 0.\nPolycarp has $n$ ($2 \\le n \\le 10$) bank cards, the PIN code of the $i$-th card is $p_i$.\nPolycarp has recently read a recommendation that it is better to set different PIN codes on different cards. Thus he wants to change the minimal number of digits in the PIN codes of his cards so that all $n$ codes would become different.\nFormally, in one step, Polycarp picks $i$-th card ($1 \\le i \\le n$), then in its PIN code $p_i$ selects one position (from $1$ to $4$), and changes the digit in this position to any other. He needs to change the minimum number of digits so that all PIN codes become different.\nPolycarp quickly solved this problem. Can you solve it?\n-----Input-----\nThe first line contains integer $t$ ($1 \\le t \\le 100$) \u2014 the number of test cases in the input. Then test cases follow.\nThe first line of each of $t$ test sets contains a single integer $n$ ($2 \\le n \\le 10$) \u2014 the number of Polycarp's bank cards. The next $n$ lines contain the PIN codes $p_1, p_2, \\dots, p_n$ \u2014 one per line. The length of each of them is $4$. All PIN codes consist of digits only.\n-----Output-----\nPrint the answers to $t$ test sets. The answer to each set should consist of a $n + 1$ lines\nIn the first line print $k$ \u2014 the least number of changes to make all PIN codes different. In the next $n$ lines output the changed PIN codes in the order corresponding to their appearance in the input. If there are several optimal answers, print any of them.\n-----Example-----\nInput\n3\n2\n1234\n0600\n2\n1337\n1337\n4\n3139\n3139\n3139\n3139\nOutput\n0\n1234\n0600\n1\n1337\n1237\n3\n3139\n3138\n3939\n6139\n\ndef",
        "answer": "def solution(n, p):\n    # your code here\n    return",
        "difficulty": "interview"
    },
    {
        "task_id": 1669,
        "prompt": "Complete the Python function given the prompt below:International Coding Procedures Company (ICPC) writes all its code in Jedi Script (JS) programming language. JS does not get compiled, but is delivered for execution in its source form. Sources contain comments, extra whitespace (including trailing and leading spaces), and other non-essential features that make them quite large but do not contribute to the semantics of the code, so the process of minification is performed on source files before their delivery to execution to compress sources while preserving their semantics.\nYou are hired by ICPC to write JS minifier for ICPC. Fortunately, ICPC adheres to very strict programming practices and their JS sources are quite restricted in grammar. They work only on integer algorithms and do not use floating point numbers and strings. \nEvery JS source contains a sequence of lines. Each line contains zero or more tokens that can be separated by spaces. On each line, a part of the line that starts with a hash character ('#' code 35), including the hash character itself, is treated as a comment and is ignored up to the end of the line.\nEach line is parsed into a sequence of tokens from left to right by repeatedly skipping spaces and finding the longest possible token starting at the current parsing position, thus transforming the source code into a sequence of tokens. All the possible tokens are listed below:  A reserved token is any kind of operator, separator, literal, reserved word, or a name of a library function that should be preserved during the minification process. Reserved tokens are fixed strings of non-space ASCII characters that do not contain the hash character ('#' code 35). All reserved tokens are given as an input to the minification process.  A number token consists of a sequence of digits, where a digit is a character from zero ('0') to nine ('9') inclusive.  A word token consists of a sequence of characters from the following set: lowercase letters, uppercase letters, digits, underscore ('_' code 95), and dollar sign ('$' code 36). A word does not start with a digit. \nNote, that during parsing the longest sequence of characters that satisfies either a number or a word definition, but that appears in the list of reserved tokens, is considered to be a reserved token instead.\nDuring the minification process words are renamed in a systematic fashion using the following algorithm:  Take a list of words that consist only of lowercase letters ordered first by their length, then lexicographically: \"a\", \"b\",..., \"z\", \"aa\", \"ab\",..., excluding reserved tokens, since they are not considered to be words. This is the target word list.  Rename the first word encountered in the input token sequence to the first word in the target word list and all further occurrences of the same word in the input token sequence, too. Rename the second new word encountered in the input token sequence to the second word in the target word list, and so on. \nThe goal of the minification process is to convert the given source to the shortest possible line (counting spaces) that still parses to the same sequence of tokens with the correspondingly renamed words using these JS parsing rules. \n-----Input-----\nThe first line of the input contains a single integer $n$ ($0 \\le n \\le 40$)\u00a0\u2014 the number of reserved tokens.\nThe second line of the input contains the list of reserved tokens separated by spaces without repetitions in the list. Each reserved token is at least one and at most 20 characters long and contains only characters with ASCII codes from 33 (exclamation mark) to 126 (tilde) inclusive, with exception of a hash character ('#' code 35).\nThe third line of the input contains a single integer $m$ ($1 \\le m \\le 40$)\u00a0\u2014 the number of lines in the input source code.\nNext $m$ lines contain the input source, each source line is at most 80 characters long (counting leading and trailing spaces). Each line contains only characters with ASCII codes from 32 (space) to 126 (tilde) inclusive. The source code is valid and fully parses into a sequence of tokens.\n-----Output-----\nWrite to the output a single line that is the result of the minification process on the input source code. The output source line shall parse to the same sequence of tokens as the input source with the correspondingly renamed words and shall contain the minimum possible number of spaces needed for that. If there are multiple ways to insert the minimum possible number of spaces into the output, use any way. \n-----Examples-----\nInput\n16\nfun while return var { } ( ), ; > = + ++ - --\n9\nfun fib(num) { # compute fibs\n  var return_value = 1, prev = 0, temp;\n  while (num > 0) {\n    temp = return_value; return_value = return_value + prev;\n    prev = temp;\n    num--;\n  }\n  return return_value;\n}\nOutput\nfun a(b){var c=1,d=0,e;while(b>0){e=c;c=c+d;d=e;b--;}return c;}\nInput\n10\n( ) + ++ : -> >> >>: b c)\n2\n($val1++ + +4 kb) >> :out\nb-> + 10 >>: t # using >>: \nOutput\n(a+++ +4c )>> :d b->+10>>:e\n\ndef",
        "answer": "def a(b):\n    return b",
        "difficulty": "interview"
    },
    {
        "task_id": 1670,
        "prompt": "Complete the Python function given the prompt below:Vasya has started watching football games. He has learned that for some fouls the players receive yellow cards, and for some fouls they receive red cards. A player who receives the second yellow card automatically receives a red card.\nVasya is watching a recorded football match now and makes notes of all the fouls that he would give a card for. Help Vasya determine all the moments in time when players would be given red cards if Vasya were the judge. For each player, Vasya wants to know only the first moment of time when he would receive a red card from Vasya.\n-----Input-----\nThe first line contains the name of the team playing at home. The second line contains the name of the team playing away. Both lines are not empty. The lengths of both lines do not exceed 20. Each line contains only of large English letters. The names of the teams are distinct.\nNext follows number n (1 \u2264 n \u2264 90) \u2014 the number of fouls. \nEach of the following n lines contains information about a foul in the following form:   first goes number t (1 \u2264 t \u2264 90) \u2014 the minute when the foul occurs;  then goes letter \"h\" or letter \"a\" \u2014 if the letter is \"h\", then the card was given to a home team player, otherwise the card was given to an away team player;  then goes the player's number m (1 \u2264 m \u2264 99);  then goes letter \"y\" or letter \"r\" \u2014 if the letter is \"y\", that means that the yellow card was given, otherwise the red card was given. \nThe players from different teams can have the same number. The players within one team have distinct numbers. The fouls go chronologically, no two fouls happened at the same minute.\n-----Output-----\nFor each event when a player received his first red card in a chronological order print a string containing the following information:  The name of the team to which the player belongs;  the player's number in his team;  the minute when he received the card. \nIf no player received a card, then you do not need to print anything.\nIt is possible case that the program will not print anything to the output (if there were no red cards).\n-----Examples-----\nInput\nMC\nCSKA\n9\n28 a 3 y\n62 h 25 y\n66 h 42 y\n70 h 25 y\n77 a 4 y\n79 a 25 y\n82 h 42 r\n89 h 16 y\n90 a 13 r\nOutput\nMC 25 70\nMC 42 82\nCSKA 13 90\n\ndef",
        "answer": "def solve():\n    # Enter your code here\n    pass\n",
        "difficulty": "interview"
    },
    {
        "task_id": 1671,
        "prompt": "Complete the Python function given the prompt below:In the school computer room there are n servers which are responsible for processing several computing tasks. You know the number of scheduled tasks for each server: there are m_{i} tasks assigned to the i-th server.\nIn order to balance the load for each server, you want to reassign some tasks to make the difference between the most loaded server and the least loaded server as small as possible. In other words you want to minimize expression m_{a} - m_{b}, where a is the most loaded server and b is the least loaded one.\nIn one second you can reassign a single task. Thus in one second you can choose any pair of servers and move a single task from one server to another.\nWrite a program to find the minimum number of seconds needed to balance the load of servers.\n-----Input-----\nThe first line contains positive number n (1 \u2264 n \u2264 10^5) \u2014 the number of the servers. \nThe second line contains the sequence of non-negative integers m_1, m_2,..., m_{n} (0 \u2264 m_{i} \u2264 2\u00b710^4), where m_{i} is the number of tasks assigned to the i-th server.\n-----Output-----\nPrint the minimum number of seconds required to balance the load.\n-----Examples-----\nInput\n2\n1 6\nOutput\n2\nInput\n7\n10 11 10 11 10 11 11\nOutput\n0\nInput\n5\n1 2 3 4 5\nOutput\n3\n-----Note-----\nIn the first example two seconds are needed. In each second, a single task from server #2 should be moved to server #1. After two seconds there should be 3 tasks on server #1 and 4 tasks on server #2.\nIn the second example the load is already balanced.\nA possible sequence of task movements for the third example is:  move a task from server #4 to server #1 (the sequence m becomes: 2 2 3 3 5);  then move task from server #5 to server #1 (the sequence m becomes: 3 2 3 3 4);  then move task from server #5 to server #2 (the sequence m becomes: 3 3 3 3 3). \nThe above sequence is one of several possible ways to balance the load of servers in three seconds.\n\ndef",
        "answer": "def solution(n, m):\n    return min(m)",
        "difficulty": "interview"
    },
    {
        "task_id": 1672,
        "prompt": "Complete the Python function given the prompt below:Mad scientist Mike entertains himself by arranging rows of dominoes. He doesn't need dominoes, though: he uses rectangular magnets instead. Each magnet has two poles, positive (a \"plus\") and negative (a \"minus\"). If two magnets are put together at a close distance, then the like poles will repel each other and the opposite poles will attract each other.\nMike starts by laying one magnet horizontally on the table. During each following step Mike adds one more magnet horizontally to the right end of the row. Depending on how Mike puts the magnet on the table, it is either attracted to the previous one (forming a group of multiple magnets linked together) or repelled by it (then Mike lays this magnet at some distance to the right from the previous one). We assume that a sole magnet not linked to others forms a group of its own. [Image] \nMike arranged multiple magnets in a row. Determine the number of groups that the magnets formed.\n-----Input-----\nThe first line of the input contains an integer n (1 \u2264 n \u2264 100000) \u2014 the number of magnets. Then n lines follow. The i-th line (1 \u2264 i \u2264 n) contains either characters \"01\", if Mike put the i-th magnet in the \"plus-minus\" position, or characters \"10\", if Mike put the magnet in the \"minus-plus\" position.\n-----Output-----\nOn the single line of the output print the number of groups of magnets.\n-----Examples-----\nInput\n6\n10\n10\n10\n01\n10\n10\nOutput\n3\nInput\n4\n01\n01\n10\n10\nOutput\n2\n-----Note-----\nThe first testcase corresponds to the figure. The testcase has three groups consisting of three, one and two magnets.\nThe second testcase has two groups, each consisting of two magnets.\n\ndef",
        "answer": "def solution(n):\n    return n-1\nif __name__ == '__main__':\n    n = int(input())\n    print(solution(n))\n",
        "difficulty": "interview"
    },
    {
        "task_id": 1673,
        "prompt": "Complete the Python function given the prompt below:Let's call beauty of an array $b_1, b_2, \\ldots, b_n$ ($n > 1$) \u00a0\u2014 $\\min\\limits_{1 \\leq i < j \\leq n} |b_i - b_j|$.\nYou're given an array $a_1, a_2, \\ldots a_n$ and a number $k$. Calculate the sum of beauty over all subsequences of the array of length exactly $k$. As this number can be very large, output it modulo $998244353$.\nA sequence $a$ is a subsequence of an array $b$ if $a$ can be obtained from $b$ by deletion of several (possibly, zero or all) elements.\n-----Input-----\nThe first line contains integers $n, k$ ($2 \\le k \\le n \\le 1000$).\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($0 \\le a_i \\le 10^5$).\n-----Output-----\nOutput one integer\u00a0\u2014 the sum of beauty over all subsequences of the array of length exactly $k$. As this number can be very large, output it modulo $998244353$.\n-----Examples-----\nInput\n4 3\n1 7 3 5\nOutput\n8\nInput\n5 5\n1 10 100 1000 10000\nOutput\n9\n-----Note-----\nIn the first example, there are $4$ subsequences of length $3$\u00a0\u2014 $[1, 7, 3]$, $[1, 3, 5]$, $[7, 3, 5]$, $[1, 7, 5]$, each of which has beauty $2$, so answer is $8$.\nIn the second example, there is only one subsequence of length $5$\u00a0\u2014 the whole array, which has the beauty equal to $|10-1| = 9$.\n\ndef",
        "answer": "def beauty(a, k):\n    b = sorted(a)\n    res = 0\n    for i in range(len(a) - k + 1):\n        res += abs(b[i + k - 1] - b[i])\n    return res % 1000000007",
        "difficulty": "interview"
    },
    {
        "task_id": 1674,
        "prompt": "Complete the Python function given the prompt below:You are playing a new famous fighting game: Kortal Mombat XII. You have to perform a brutality on your opponent's character.\nYou are playing the game on the new generation console so your gamepad have $26$ buttons. Each button has a single lowercase Latin letter from 'a' to 'z' written on it. All the letters on buttons are pairwise distinct.\nYou are given a sequence of hits, the $i$-th hit deals $a_i$ units of damage to the opponent's character. To perform the $i$-th hit you have to press the button $s_i$ on your gamepad. Hits are numbered from $1$ to $n$.\nYou know that if you press some button more than $k$ times in a row then it'll break. You cherish your gamepad and don't want to break any of its buttons.\nTo perform a brutality you have to land some of the hits of the given sequence. You are allowed to skip any of them, however changing the initial order of the sequence is prohibited. The total damage dealt is the sum of $a_i$ over all $i$ for the hits which weren't skipped.\nNote that if you skip the hit then the counter of consecutive presses the button won't reset.\nYour task is to skip some hits to deal the maximum possible total damage to the opponent's character and not break your gamepad buttons.\n-----Input-----\nThe first line of the input contains two integers $n$ and $k$ ($1 \\le k \\le n \\le 2 \\cdot 10^5$) \u2014 the number of hits and the maximum number of times you can push the same button in a row.\nThe second line of the input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^9$), where $a_i$ is the damage of the $i$-th hit.\nThe third line of the input contains the string $s$ consisting of exactly $n$ lowercase Latin letters \u2014 the sequence of hits (each character is the letter on the button you need to press to perform the corresponding hit).\n-----Output-----\nPrint one integer $dmg$ \u2014 the maximum possible damage to the opponent's character you can deal without breaking your gamepad buttons.\n-----Examples-----\nInput\n7 3\n1 5 16 18 7 2 10\nbaaaaca\nOutput\n54\nInput\n5 5\n2 4 1 3 1000\naaaaa\nOutput\n1010\nInput\n5 4\n2 4 1 3 1000\naaaaa\nOutput\n1009\nInput\n8 1\n10 15 2 1 4 8 15 16\nqqwweerr\nOutput\n41\nInput\n6 3\n14 18 9 19 2 15\ncccccc\nOutput\n52\nInput\n2 1\n10 10\nqq\nOutput\n10\n-----Note-----\nIn the first example you can choose hits with numbers $[1, 3, 4, 5, 6, 7]$ with the total damage $1 + 16 + 18 + 7 + 2 + 10 = 54$.\nIn the second example you can choose all hits so the total damage is $2 + 4 + 1 + 3 + 1000 = 1010$.\nIn the third example you can choose all hits expect the third one so the total damage is $2 + 4 + 3 + 1000 = 1009$.\nIn the fourth example you can choose hits with numbers $[2, 3, 6, 8]$. Only this way you can reach the maximum total damage $15 + 2 + 8 + 16 = 41$.\nIn the fifth example you can choose only hits with numbers $[2, 4, 6]$ with the total damage $18 + 19 + 15 = 52$.\nIn the sixth example you can change either first hit or the second hit (it does not matter) with the total damage $10$.\n\ndef",
        "answer": "def kortal_mombat_xii(n, k, a, s):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 1675,
        "prompt": "Complete the Python function given the prompt below:Consider a football tournament where n teams participate. Each team has two football kits: for home games, and for away games. The kit for home games of the i-th team has color x_{i} and the kit for away games of this team has color y_{i} (x_{i} \u2260 y_{i}).\nIn the tournament, each team plays exactly one home game and exactly one away game with each other team (n(n - 1) games in total). The team, that plays the home game, traditionally plays in its home kit. The team that plays an away game plays in its away kit. However, if two teams has the kits of the same color, they cannot be distinguished. In this case the away team plays in its home kit.\nCalculate how many games in the described tournament each team plays in its home kit and how many games it plays in its away kit.\n-----Input-----\nThe first line contains a single integer n (2 \u2264 n \u2264 10^5) \u2014 the number of teams. Next n lines contain the description of the teams. The i-th line contains two space-separated numbers x_{i}, y_{i} (1 \u2264 x_{i}, y_{i} \u2264 10^5;\u00a0x_{i} \u2260 y_{i}) \u2014 the color numbers for the home and away kits of the i-th team.\n-----Output-----\nFor each team, print on a single line two space-separated integers \u2014 the number of games this team is going to play in home and away kits, correspondingly. Print the answers for the teams in the order they appeared in the input.\n-----Examples-----\nInput\n2\n1 2\n2 1\nOutput\n2 0\n2 0\nInput\n3\n1 2\n2 1\n1 3\nOutput\n3 1\n4 0\n2 2\n\ndef",
        "answer": "def tournament(n, x, y):\n    home = 0\n    away = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if x[i] == x[j]:\n                away += 1\n            elif y[i] == y[j]:\n                home += 1\n    return home, away",
        "difficulty": "interview"
    },
    {
        "task_id": 1676,
        "prompt": "Complete the Python function given the prompt below:In this problem you have to simulate the workflow of one-thread server. There are n queries to process, the i-th will be received at moment t_{i} and needs to be processed for d_{i} units of time. All t_{i} are guaranteed to be distinct.\nWhen a query appears server may react in three possible ways:   If server is free and query queue is empty, then server immediately starts to process this query.  If server is busy and there are less than b queries in the queue, then new query is added to the end of the queue.  If server is busy and there are already b queries pending in the queue, then new query is just rejected and will never be processed. \nAs soon as server finished to process some query, it picks new one from the queue (if it's not empty, of course). If a new query comes at some moment x, and the server finishes to process another query at exactly the same moment, we consider that first query is picked from the queue and only then new query appears.\nFor each query find the moment when the server will finish to process it or print -1 if this query will be rejected.\n-----Input-----\nThe first line of the input contains two integers n and b (1 \u2264 n, b \u2264 200 000)\u00a0\u2014 the number of queries and the maximum possible size of the query queue.\nThen follow n lines with queries descriptions (in chronological order). Each description consists of two integers t_{i} and d_{i} (1 \u2264 t_{i}, d_{i} \u2264 10^9), where t_{i} is the moment of time when the i-th query appears and d_{i} is the time server needs to process it. It is guaranteed that t_{i} - 1 < t_{i} for all i > 1.\n-----Output-----\nPrint the sequence of n integers e_1, e_2,..., e_{n}, where e_{i} is the moment the server will finish to process the i-th query (queries are numbered in the order they appear in the input) or  - 1 if the corresponding query will be rejected.\n-----Examples-----\nInput\n5 1\n2 9\n4 8\n10 9\n15 2\n19 1\nOutput\n11 19 -1 21 22 \nInput\n4 1\n2 8\n4 8\n10 9\n15 2\nOutput\n10 18 27 -1 \n-----Note-----\nConsider the first sample.   The server will start to process first query at the moment 2 and will finish to process it at the moment 11.  At the moment 4 second query appears and proceeds to the queue.  At the moment 10 third query appears. However, the server is still busy with query 1, b = 1 and there is already query 2 pending in the queue, so third query is just rejected.  At the moment 11 server will finish to process first query and will take the second query from the queue.  At the moment 15 fourth query appears. As the server is currently busy it proceeds to the queue.  At the moment 19 two events occur simultaneously: server finishes to proceed the second query and the fifth query appears. As was said in the statement above, first server will finish to process the second query, then it will pick the fourth query from the queue and only then will the fifth query appear. As the queue is empty fifth query is proceed there.  Server finishes to process query number 4 at the moment 21. Query number 5 is picked from the queue.  Server finishes to process query number 5 at the moment 22.\n\ndef",
        "answer": "def process_queries(n, b, queries):\n    # Write your code here\n    queries = sorted(queries, key=lambda x: x[0])\n    queue = []\n    for query in queries:\n        if len(queue) < b:\n            queue.append(query)\n        else:\n            if query[0] < queue[0][0]:\n                queue.append(query)\n            else:\n                print -1\n    for query in queue:\n        print query[0],",
        "difficulty": "interview"
    },
    {
        "task_id": 1677,
        "prompt": "Complete the Python function given the prompt below:Gena loves sequences of numbers. Recently, he has discovered a new type of sequences which he called an almost arithmetical progression. A sequence is an almost arithmetical progression, if its elements can be represented as:  a_1 = p, where p is some integer;  a_{i} = a_{i} - 1 + ( - 1)^{i} + 1\u00b7q (i > 1), where q is some integer. \nRight now Gena has a piece of paper with sequence b, consisting of n integers. Help Gena, find there the longest subsequence of integers that is an almost arithmetical progression.\nSequence s_1,  s_2, ...,  s_{k} is a subsequence of sequence b_1,  b_2, ...,  b_{n}, if there is such increasing sequence of indexes i_1, i_2,..., i_{k} (1  \u2264  i_1  <  i_2  <...   <  i_{k}  \u2264  n), that b_{i}_{j}  =  s_{j}. In other words, sequence s can be obtained from b by crossing out some elements.\n-----Input-----\nThe first line contains integer n (1 \u2264 n \u2264 4000). The next line contains n integers b_1, b_2,..., b_{n} (1 \u2264 b_{i} \u2264 10^6).\n-----Output-----\nPrint a single integer \u2014 the length of the required longest subsequence.\n-----Examples-----\nInput\n2\n3 5\nOutput\n2\nInput\n4\n10 20 10 30\nOutput\n3\n-----Note-----\nIn the first test the sequence actually is the suitable subsequence. \nIn the second test the following subsequence fits: 10, 20, 10.\n\ndef",
        "answer": "def almost_arithmetical_progression(n, b):\n    # your code here\n    return 0",
        "difficulty": "interview"
    },
    {
        "task_id": 1678,
        "prompt": "Complete the Python function given the prompt below:Petya has an array $a$ consisting of $n$ integers. He has learned partial sums recently, and now he can calculate the sum of elements on any segment of the array really fast. The segment is a non-empty sequence of elements standing one next to another in the array.\nNow he wonders what is the number of segments in his array with the sum less than $t$. Help Petya to calculate this number.\nMore formally, you are required to calculate the number of pairs $l, r$ ($l \\le r$) such that $a_l + a_{l+1} + \\dots + a_{r-1} + a_r < t$.\n-----Input-----\nThe first line contains two integers $n$ and $t$ ($1 \\le n \\le 200\\,000, |t| \\le 2\\cdot10^{14}$).\nThe second line contains a sequence of integers $a_1, a_2, \\dots, a_n$ ($|a_{i}| \\le 10^{9}$) \u2014 the description of Petya's array. Note that there might be negative, zero and positive elements.\n-----Output-----\nPrint the number of segments in Petya's array with the sum of elements less than $t$.\n-----Examples-----\nInput\n5 4\n5 -1 3 4 -1\nOutput\n5\nInput\n3 0\n-1 2 -3\nOutput\n4\nInput\n4 -1\n-2 1 -2 3\nOutput\n3\n-----Note-----\nIn the first example the following segments have sum less than $4$:  $[2, 2]$, sum of elements is $-1$  $[2, 3]$, sum of elements is $2$  $[3, 3]$, sum of elements is $3$  $[4, 5]$, sum of elements is $3$  $[5, 5]$, sum of elements is $-1$\n\ndef",
        "answer": "def count_segments(a, t):\n    # your code here\n    return 0",
        "difficulty": "interview"
    },
    {
        "task_id": 1679,
        "prompt": "Complete the Python function given the prompt below:Polycarp has just invented a new binary protocol for data transmission. He is encoding positive integer decimal number to binary string using following algorithm:\n  Each digit is represented with number of '1' characters equal to the value of that digit (for 0 it is zero ones).  Digits are written one by one in order corresponding to number and separated by single '0' character. \nThough Polycarp learnt how to encode the numbers, he has no idea how to decode them back. Help him calculate the decoded number.\n-----Input-----\nThe first line contains one integer number n (1 \u2264 n \u2264 89) \u2014 length of the string s.\nThe second line contains string s \u2014 sequence of '0' and '1' characters, number in its encoded format. It is guaranteed that the number corresponding to the string is positive and doesn't exceed 10^9. The string always starts with '1'.\n-----Output-----\nPrint the decoded number.\n-----Examples-----\nInput\n3\n111\nOutput\n3\nInput\n9\n110011101\nOutput\n2031\n\ndef",
        "answer": "def decode(s):\n    return int(s, 2)",
        "difficulty": "interview"
    },
    {
        "task_id": 1680,
        "prompt": "Complete the Python function given the prompt below:Vasya has the sequence consisting of n integers. Vasya consider the pair of integers x and y k-interesting, if their binary representation differs from each other exactly in k bits. For example, if k = 2, the pair of integers x = 5 and y = 3 is k-interesting, because their binary representation x=101 and y=011 differs exactly in two bits.\nVasya wants to know how many pairs of indexes (i, j) are in his sequence so that i < j and the pair of integers a_{i} and a_{j} is k-interesting. Your task is to help Vasya and determine this number.\n-----Input-----\nThe first line contains two integers n and k (2 \u2264 n \u2264 10^5, 0 \u2264 k \u2264 14) \u2014 the number of integers in Vasya's sequence and the number of bits in which integers in k-interesting pair should differ.\nThe second line contains the sequence a_1, a_2,..., a_{n} (0 \u2264 a_{i} \u2264 10^4), which Vasya has.\n-----Output-----\nPrint the number of pairs (i, j) so that i < j and the pair of integers a_{i} and a_{j} is k-interesting.\n-----Examples-----\nInput\n4 1\n0 3 2 1\nOutput\n4\nInput\n6 0\n200 100 100 100 200 200\nOutput\n6\n-----Note-----\nIn the first test there are 4 k-interesting pairs:  (1, 3),  (1, 4),  (2, 3),  (2, 4). \nIn the second test k = 0. Consequently, integers in any k-interesting pair should be equal to themselves. Thus, for the second test there are 6 k-interesting pairs:  (1, 5),  (1, 6),  (2, 3),  (2, 4),  (3, 4),  (5, 6).\n\ndef",
        "answer": "def k_interesting(n, k):\n    return bin(n).count('1') - bin(n-1).count('1') - bin(n-2).count('1')",
        "difficulty": "interview"
    },
    {
        "task_id": 1681,
        "prompt": "Complete the Python function given the prompt below:Once little Vasya read an article in a magazine on how to make beautiful handmade garland from colored paper. Vasya immediately went to the store and bought n colored sheets of paper, the area of each sheet is 1 square meter.\nThe garland must consist of exactly m pieces of colored paper of arbitrary area, each piece should be of a certain color. To make the garland, Vasya can arbitrarily cut his existing colored sheets into pieces. Vasya is not obliged to use all the sheets to make the garland.\nVasya wants the garland to be as attractive as possible, so he wants to maximize the total area of \u200b\u200bm pieces of paper in the garland. Calculate what the maximum total area of \u200b\u200bthe pieces of paper in the garland Vasya can get.\n-----Input-----\nThe first line contains a non-empty sequence of n (1 \u2264 n \u2264 1000) small English letters (\"a\"...\"z\"). Each letter means that Vasya has a sheet of paper of the corresponding color.\nThe second line contains a non-empty sequence of m (1 \u2264 m \u2264 1000) small English letters that correspond to the colors of the pieces of paper in the garland that Vasya wants to make.\n-----Output-----\nPrint an integer that is the maximum possible total area of the pieces of paper in the garland Vasya wants to get or -1, if it is impossible to make the garland from the sheets he's got. It is guaranteed that the answer is always an integer.\n-----Examples-----\nInput\naaabbac\naabbccac\nOutput\n6\nInput\na\nz\nOutput\n-1\n-----Note-----\nIn the first test sample Vasya can make an garland of area 6: he can use both sheets of color b, three (but not four) sheets of color a and cut a single sheet of color c in three, for example, equal pieces. Vasya can use the resulting pieces to make a garland of area 6.\nIn the second test sample Vasya cannot make a garland at all \u2014 he doesn't have a sheet of color z.\n\ndef",
        "answer": "def solution(s, t):\n    return -1",
        "difficulty": "interview"
    },
    {
        "task_id": 1682,
        "prompt": "Complete the Python function given the prompt below:Igor found out discounts in a shop and decided to buy n items. Discounts at the store will last for a week and Igor knows about each item that its price now is a_{i}, and after a week of discounts its price will be b_{i}.\nNot all of sellers are honest, so now some products could be more expensive than after a week of discounts.\nIgor decided that buy at least k of items now, but wait with the rest of the week in order to save money as much as possible. Your task is to determine the minimum money that Igor can spend to buy all n items.\n-----Input-----\nIn the first line there are two positive integer numbers n and k (1 \u2264 n \u2264 2\u00b710^5, 0 \u2264 k \u2264 n) \u2014 total number of items to buy and minimal number of items Igor wants to by right now.\nThe second line contains sequence of integers a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 10^4) \u2014 prices of items during discounts (i.e. right now).\nThe third line contains sequence of integers b_1, b_2,..., b_{n} (1 \u2264 b_{i} \u2264 10^4) \u2014 prices of items after discounts (i.e. after a week).\n-----Output-----\nPrint the minimal amount of money Igor will spend to buy all n items. Remember, he should buy at least k items right now.\n-----Examples-----\nInput\n3 1\n5 4 6\n3 1 5\nOutput\n10\nInput\n5 3\n3 4 7 10 3\n4 5 5 12 5\nOutput\n25\n-----Note-----\nIn the first example Igor should buy item 3 paying 6. But items 1 and 2 he should buy after a week. He will pay 3 and 1 for them. So in total he will pay 6 + 3 + 1 = 10.\nIn the second example Igor should buy right now items 1, 2, 4 and 5, paying for them 3, 4, 10 and 3, respectively. Item 3 he should buy after a week of discounts, he will pay 5 for it. In total he will spend 3 + 4 + 10 + 3 + 5 = 25.\n\ndef",
        "answer": "def buy_items(n, k, a, b):\n    # your code here\n    return 0",
        "difficulty": "interview"
    },
    {
        "task_id": 1683,
        "prompt": "Complete the Python function given the prompt below:This problem differs from the previous one only in the absence of the constraint on the equal length of all numbers $a_1, a_2, \\dots, a_n$.\nA team of SIS students is going to make a trip on a submarine. Their target is an ancient treasure in a sunken ship lying on the bottom of the Great Rybinsk sea. Unfortunately, the students don't know the coordinates of the ship, so they asked Meshanya (who is a hereditary mage) to help them. He agreed to help them, but only if they solve his problem.\nLet's denote a function that alternates digits of two numbers $f(a_1 a_2 \\dots a_{p - 1} a_p, b_1 b_2 \\dots b_{q - 1} b_q)$, where $a_1 \\dots a_p$ and $b_1 \\dots b_q$ are digits of two integers written in the decimal notation without leading zeros.\nIn other words, the function $f(x, y)$ alternately shuffles the digits of the numbers $x$ and $y$ by writing them from the lowest digits to the older ones, starting with the number $y$. The result of the function is also built from right to left (that is, from the lower digits to the older ones). If the digits of one of the arguments have ended, then the remaining digits of the other argument are written out. Familiarize with examples and formal definitions of the function below.\nFor example: $$f(1111, 2222) = 12121212$$ $$f(7777, 888) = 7787878$$ $$f(33, 44444) = 4443434$$ $$f(555, 6) = 5556$$ $$f(111, 2222) = 2121212$$\nFormally,  if $p \\ge q$ then $f(a_1 \\dots a_p, b_1 \\dots b_q) = a_1 a_2 \\dots a_{p - q + 1} b_1 a_{p - q + 2} b_2 \\dots a_{p - 1} b_{q - 1} a_p b_q$;  if $p < q$ then $f(a_1 \\dots a_p, b_1 \\dots b_q) = b_1 b_2 \\dots b_{q - p} a_1 b_{q - p + 1} a_2 \\dots a_{p - 1} b_{q - 1} a_p b_q$. \nMishanya gives you an array consisting of $n$ integers $a_i$, your task is to help students to calculate $\\sum_{i = 1}^{n}\\sum_{j = 1}^{n} f(a_i, a_j)$ modulo $998\\,244\\,353$.\n-----Input-----\nThe first line of the input contains a single integer $n$ ($1 \\le n \\le 100\\,000$) \u2014 the number of elements in the array. The second line of the input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^9$) \u2014 the elements of the array.\n-----Output-----\nPrint the answer modulo $998\\,244\\,353$.\n-----Examples-----\nInput\n3\n12 3 45\nOutput\n12330\nInput\n2\n123 456\nOutput\n1115598\n\ndef",
        "answer": "def f(x, y):\n    return x * y",
        "difficulty": "interview"
    },
    {
        "task_id": 1684,
        "prompt": "Complete the Python function given the prompt below:Inaka has a disc, the circumference of which is $n$ units. The circumference is equally divided by $n$ points numbered clockwise from $1$ to $n$, such that points $i$ and $i + 1$ ($1 \\leq i < n$) are adjacent, and so are points $n$ and $1$.\nThere are $m$ straight segments on the disc, the endpoints of which are all among the aforementioned $n$ points.\nInaka wants to know if her image is rotationally symmetrical, i.e. if there is an integer $k$ ($1 \\leq k < n$), such that if all segments are rotated clockwise around the center of the circle by $k$ units, the new image will be the same as the original one.\n-----Input-----\nThe first line contains two space-separated integers $n$ and $m$ ($2 \\leq n \\leq 100\\,000$, $1 \\leq m \\leq 200\\,000$)\u00a0\u2014 the number of points and the number of segments, respectively.\nThe $i$-th of the following $m$ lines contains two space-separated integers $a_i$ and $b_i$ ($1 \\leq a_i, b_i \\leq n$, $a_i \\neq b_i$) that describe a segment connecting points $a_i$ and $b_i$.\nIt is guaranteed that no segments coincide.\n-----Output-----\nOutput one line\u00a0\u2014 \"Yes\" if the image is rotationally symmetrical, and \"No\" otherwise (both excluding quotation marks).\nYou can output each letter in any case (upper or lower).\n-----Examples-----\nInput\n12 6\n1 3\n3 7\n5 7\n7 11\n9 11\n11 3\nOutput\nYes\nInput\n9 6\n4 5\n5 6\n7 8\n8 9\n1 2\n2 3\nOutput\nYes\nInput\n10 3\n1 2\n3 2\n7 2\nOutput\nNo\nInput\n10 2\n1 6\n2 7\nOutput\nYes\n-----Note-----\nThe first two examples are illustrated below. Both images become the same as their respective original ones after a clockwise rotation of $120$ degrees around the center.\n [Image]\n\ndef",
        "answer": "def is_rotationally_symmetrical(n, m, a, b):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 1685,
        "prompt": "Complete the Python function given the prompt below:T is a complete binary tree consisting of n vertices. It means that exactly one vertex is a root, and each vertex is either a leaf (and doesn't have children) or an inner node (and has exactly two children). All leaves of a complete binary tree have the same depth (distance from the root). So n is a number such that n + 1 is a power of 2.\nIn the picture you can see a complete binary tree with n = 15. [Image] \nVertices are numbered from 1 to n in a special recursive way: we recursively assign numbers to all vertices from the left subtree (if current vertex is not a leaf), then assign a number to the current vertex, and then recursively assign numbers to all vertices from the right subtree (if it exists). In the picture vertices are numbered exactly using this algorithm. It is clear that for each size of a complete binary tree exists exactly one way to give numbers to all vertices. This way of numbering is called symmetric.\nYou have to write a program that for given n answers q queries to the tree.\nEach query consists of an integer number u_{i} (1 \u2264 u_{i} \u2264 n) and a string s_{i}, where u_{i} is the number of vertex, and s_{i} represents the path starting from this vertex. String s_{i} doesn't contain any characters other than 'L', 'R' and 'U', which mean traverse to the left child, to the right child and to the parent, respectively. Characters from s_{i} have to be processed from left to right, considering that u_{i} is the vertex where the path starts. If it's impossible to process a character (for example, to go to the left child of a leaf), then you have to skip it. The answer is the number of vertex where the path represented by s_{i} ends.\nFor example, if u_{i} = 4 and s_{i} = \u00abUURL\u00bb, then the answer is 10.\n-----Input-----\nThe first line contains two integer numbers n and q (1 \u2264 n \u2264 10^18, q \u2265 1). n is such that n + 1 is a power of 2.\nThe next 2q lines represent queries; each query consists of two consecutive lines. The first of these two lines contains u_{i} (1 \u2264 u_{i} \u2264 n), the second contains non-empty string s_{i}. s_{i} doesn't contain any characters other than 'L', 'R' and 'U'.\nIt is guaranteed that the sum of lengths of s_{i} (for each i such that 1 \u2264 i \u2264 q) doesn't exceed 10^5.\n-----Output-----\nPrint q numbers, i-th number must be the answer to the i-th query.\n-----Example-----\nInput\n15 2\n4\nUURL\n8\nLRLLLLLLLL\nOutput\n10\n5\n\ndef",
        "answer": "def solution(n, q):\n    # write your code in Python 2.7\n    pass\n",
        "difficulty": "interview"
    },
    {
        "task_id": 1686,
        "prompt": "Complete the Python function given the prompt below:The problem uses a simplified TCP/IP address model, please make sure you've read the statement attentively.\nPolycarpus has found a job, he is a system administrator. One day he came across n IP addresses. Each IP address is a 32 bit number, represented as a group of four 8-bit numbers (without leading zeroes), separated by dots. For example, the record 0.255.1.123 shows a correct IP address and records 0.256.1.123 and 0.255.1.01 do not. In this problem an arbitrary group of four 8-bit numbers is a correct IP address.\nHaving worked as an administrator for some time, Polycarpus learned that if you know the IP address, you can use the subnet mask to get the address of the network that has this IP addess.\nThe subnet mask is an IP address that has the following property: if we write this IP address as a 32 bit string, that it is representable as \"11...11000..000\". In other words, the subnet mask first has one or more one bits, and then one or more zero bits (overall there are 32 bits). For example, the IP address 2.0.0.0 is not a correct subnet mask as its 32-bit record looks as 00000010000000000000000000000000.\nTo get the network address of the IP address, you need to perform the operation of the bitwise \"and\" of the IP address and the subnet mask. For example, if the subnet mask is 255.192.0.0, and the IP address is 192.168.1.2, then the network address equals 192.128.0.0. In the bitwise \"and\" the result has a bit that equals 1 if and only if both operands have corresponding bits equal to one.\nNow Polycarpus wants to find all networks to which his IP addresses belong. Unfortunately, Polycarpus lost subnet mask. Fortunately, Polycarpus remembers that his IP addresses belonged to exactly k distinct networks. Help Polycarpus find the subnet mask, such that his IP addresses will belong to exactly k distinct networks. If there are several such subnet masks, find the one whose bit record contains the least number of ones. If such subnet mask do not exist, say so.\n-----Input-----\nThe first line contains two integers, n and k (1 \u2264 k \u2264 n \u2264 10^5) \u2014 the number of IP addresses and networks. The next n lines contain the IP addresses. It is guaranteed that all IP addresses are distinct.\n-----Output-----\nIn a single line print the IP address of the subnet mask in the format that is described in the statement, if the required subnet mask exists. Otherwise, print -1.\n-----Examples-----\nInput\n5 3\n0.0.0.1\n0.1.1.2\n0.0.2.1\n0.1.1.0\n0.0.2.3\nOutput\n255.255.254.0\nInput\n5 2\n0.0.0.1\n0.1.1.2\n0.0.2.1\n0.1.1.0\n0.0.2.3\nOutput\n255.255.0.0\nInput\n2 1\n255.0.0.1\n0.0.0.2\nOutput\n-1\n\ndef",
        "answer": "def find_subnet_mask(ip_address, k):\n    # your code here\n    return -1",
        "difficulty": "interview"
    },
    {
        "task_id": 1687,
        "prompt": "Complete the Python function given the prompt below:Ksusha is a beginner coder. Today she starts studying arrays. She has array a_1, a_2,..., a_{n}, consisting of n positive integers.\nHer university teacher gave her a task. Find such number in the array, that all array elements are divisible by it. Help her and find the number!\n-----Input-----\nThe first line contains integer n (1 \u2264 n \u2264 10^5), showing how many numbers the array has. The next line contains integers a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 10^9) \u2014 the array elements.\n-----Output-----\nPrint a single integer \u2014 the number from the array, such that all array elements are divisible by it. If such number doesn't exist, print -1.\nIf there are multiple answers, you are allowed to print any of them.\n-----Examples-----\nInput\n3\n2 2 4\nOutput\n2\nInput\n5\n2 1 3 1 6\nOutput\n1\nInput\n3\n2 3 5\nOutput\n-1\n\ndef",
        "answer": "def solution(a):\n    for i in range(len(a)):\n        if all(x % a[i] == 0 for x in a):\n            return a[i]\n    return -1",
        "difficulty": "interview"
    },
    {
        "task_id": 1688,
        "prompt": "Complete the Python function given the prompt below:Your favorite music streaming platform has formed a perfectly balanced playlist exclusively for you. The playlist consists of $n$ tracks numbered from $1$ to $n$. The playlist is automatic and cyclic: whenever track $i$ finishes playing, track $i+1$ starts playing automatically; after track $n$ goes track $1$.\nFor each track $i$, you have estimated its coolness $a_i$. The higher $a_i$ is, the cooler track $i$ is.\nEvery morning, you choose a track. The playlist then starts playing from this track in its usual cyclic fashion. At any moment, you remember the maximum coolness $x$ of already played tracks. Once you hear that a track with coolness strictly less than $\\frac{x}{2}$ (no rounding) starts playing, you turn off the music immediately to keep yourself in a good mood.\nFor each track $i$, find out how many tracks you will listen to before turning off the music if you start your morning with track $i$, or determine that you will never turn the music off. Note that if you listen to the same track several times, every time must be counted.\n-----Input-----\nThe first line contains a single integer $n$ ($2 \\le n \\le 10^5$), denoting the number of tracks in the playlist.\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 10^9$), denoting coolnesses of the tracks.\n-----Output-----\nOutput $n$ integers $c_1, c_2, \\ldots, c_n$, where $c_i$ is either the number of tracks you will listen to if you start listening from track $i$ or $-1$ if you will be listening to music indefinitely.\n-----Examples-----\nInput\n4\n11 5 2 7\nOutput\n1 1 3 2\nInput\n4\n3 2 5 3\nOutput\n5 4 3 6\nInput\n3\n4 3 6\nOutput\n-1 -1 -1\n-----Note-----\nIn the first example, here is what will happen if you start with...   track $1$: listen to track $1$, stop as $a_2 < \\frac{a_1}{2}$.  track $2$: listen to track $2$, stop as $a_3 < \\frac{a_2}{2}$.  track $3$: listen to track $3$, listen to track $4$, listen to track $1$, stop as $a_2 < \\frac{\\max(a_3, a_4, a_1)}{2}$.  track $4$: listen to track $4$, listen to track $1$, stop as $a_2 < \\frac{\\max(a_4, a_1)}{2}$. \nIn the second example, if you start with track $4$, you will listen to track $4$, listen to track $1$, listen to track $2$, listen to track $3$, listen to track $4$ again, listen to track $1$ again, and stop as $a_2 < \\frac{max(a_4, a_1, a_2, a_3, a_4, a_1)}{2}$. Note that both track $1$ and track $4$ are counted twice towards the result.\n\ndef",
        "answer": "def solution(n, a):\n    # write your code in Python 2.7\n    # return the number of tracks you will listen to\n    # or -1 if you will never stop\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n",
        "difficulty": "interview"
    },
    {
        "task_id": 1689,
        "prompt": "Complete the Python function given the prompt below:ZS the Coder and Chris the Baboon are travelling to Udayland! To get there, they have to get on the special IOI bus. The IOI bus has n rows of seats. There are 4 seats in each row, and the seats are separated into pairs by a walkway. When ZS and Chris came, some places in the bus was already occupied.\nZS and Chris are good friends. They insist to get a pair of neighbouring empty seats. Two seats are considered neighbouring if they are in the same row and in the same pair. Given the configuration of the bus, can you help ZS and Chris determine where they should sit?\n-----Input-----\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 1000)\u00a0\u2014 the number of rows of seats in the bus.\nThen, n lines follow. Each line contains exactly 5 characters, the first two of them denote the first pair of seats in the row, the third character denotes the walkway (it always equals '|') and the last two of them denote the second pair of seats in the row. \nEach character, except the walkway, equals to 'O' or to 'X'. 'O' denotes an empty seat, 'X' denotes an occupied seat. See the sample cases for more details. \n-----Output-----\nIf it is possible for Chris and ZS to sit at neighbouring empty seats, print \"YES\" (without quotes) in the first line. In the next n lines print the bus configuration, where the characters in the pair of seats for Chris and ZS is changed with characters '+'. Thus the configuration should differ from the input one by exactly two charaters (they should be equal to 'O' in the input and to '+' in the output).\nIf there is no pair of seats for Chris and ZS, print \"NO\" (without quotes) in a single line.\nIf there are multiple solutions, you may print any of them.\n-----Examples-----\nInput\n6\nOO|OX\nXO|XX\nOX|OO\nXX|OX\nOO|OO\nOO|XX\nOutput\nYES\n++|OX\nXO|XX\nOX|OO\nXX|OX\nOO|OO\nOO|XX\nInput\n4\nXO|OX\nXO|XX\nOX|OX\nXX|OX\nOutput\nNO\nInput\n5\nXX|XX\nXX|XX\nXO|OX\nXO|OO\nOX|XO\nOutput\nYES\nXX|XX\nXX|XX\nXO|OX\nXO|++\nOX|XO\n-----Note-----\nNote that the following is an incorrect configuration for the first sample case because the seats must be in the same pair.\nO+|+X\nXO|XX\nOX|OO\nXX|OX\nOO|OO\nOO|XX\n\ndef",
        "answer": "def solution(n, seats):\n    seats = seats.split('\\n')\n    for i in range(n):\n        seats[i] = seats[i].replace('O', '+')\n    return '\\n'.join(seats)",
        "difficulty": "interview"
    },
    {
        "task_id": 1690,
        "prompt": "Complete the Python function given the prompt below:You went to the store, selling $n$ types of chocolates. There are $a_i$ chocolates of type $i$ in stock.\nYou have unlimited amount of cash (so you are not restricted by any prices) and want to buy as many chocolates as possible. However if you buy $x_i$ chocolates of type $i$ (clearly, $0 \\le x_i \\le a_i$), then for all $1 \\le j < i$ at least one of the following must hold:  $x_j = 0$ (you bought zero chocolates of type $j$) $x_j < x_i$ (you bought less chocolates of type $j$ than of type $i$) \nFor example, the array $x = [0, 0, 1, 2, 10]$ satisfies the requirement above (assuming that all $a_i \\ge x_i$), while arrays $x = [0, 1, 0]$, $x = [5, 5]$ and $x = [3, 2]$ don't.\nCalculate the maximum number of chocolates you can buy.\n-----Input-----\nThe first line contains an integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$), denoting the number of types of chocolate.\nThe next line contains $n$ integers $a_i$ ($1 \\le a_i \\le 10^9$), denoting the number of chocolates of each type.\n-----Output-----\nPrint the maximum number of chocolates you can buy.\n-----Examples-----\nInput\n5\n1 2 1 3 6\nOutput\n10\nInput\n5\n3 2 5 4 10\nOutput\n20\nInput\n4\n1 1 1 1\nOutput\n1\n-----Note-----\nIn the first example, it is optimal to buy: $0 + 0 + 1 + 3 + 6$ chocolates.\nIn the second example, it is optimal to buy: $1 + 2 + 3 + 4 + 10$ chocolates.\nIn the third example, it is optimal to buy: $0 + 0 + 0 + 1$ chocolates.\n\ndef",
        "answer": "def max_chocolates(n, a):\n    a.sort()\n    a.reverse()\n    max_chocolates = 0\n    for i in range(n):\n        if a[i] > max_chocolates:\n            max_chocolates = a[i]\n    return max_chocolates",
        "difficulty": "interview"
    },
    {
        "task_id": 1691,
        "prompt": "Complete the Python function given the prompt below:PolandBall has such a convex polygon with n veritces that no three of its diagonals intersect at the same point. PolandBall decided to improve it and draw some red segments. \nHe chose a number k such that gcd(n, k) = 1. Vertices of the polygon are numbered from 1 to n in a clockwise way. PolandBall repeats the following process n times, starting from the vertex 1: \nAssume you've ended last operation in vertex x (consider x = 1 if it is the first operation). Draw a new segment from vertex x to k-th next vertex in clockwise direction. This is a vertex x + k or x + k - n depending on which of these is a valid index of polygon's vertex.\nYour task is to calculate number of polygon's sections after each drawing. A section is a clear area inside the polygon bounded with drawn diagonals or the polygon's sides.\n-----Input-----\nThere are only two numbers in the input: n and k (5 \u2264 n \u2264 10^6, 2 \u2264 k \u2264 n - 2, gcd(n, k) = 1).\n-----Output-----\nYou should print n values separated by spaces. The i-th value should represent number of polygon's sections after drawing first i lines.\n-----Examples-----\nInput\n5 2\nOutput\n2 3 5 8 11 \nInput\n10 3\nOutput\n2 3 4 6 9 12 16 21 26 31 \n-----Note-----\nThe greatest common divisor (gcd) of two integers a and b is the largest positive integer that divides both a and b without a remainder.\nFor the first sample testcase, you should output \"2 3 5 8 11\". Pictures below correspond to situations after drawing lines. [Image] [Image] [Image] [Image] [Image] [Image]\n\ndef",
        "answer": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a",
        "difficulty": "interview"
    },
    {
        "task_id": 1692,
        "prompt": "Complete the Python function given the prompt below:Max wants to buy a new skateboard. He has calculated the amount of money that is needed to buy a new skateboard. He left a calculator on the floor and went to ask some money from his parents. Meanwhile his little brother Yusuf came and started to press the keys randomly. Unfortunately Max has forgotten the number which he had calculated. The only thing he knows is that the number is divisible by 4.\nYou are given a string s consisting of digits (the number on the display of the calculator after Yusuf randomly pressed the keys). Your task is to find the number of substrings which are divisible by 4. A substring can start with a zero.\nA substring of a string is a nonempty sequence of consecutive characters.\nFor example if string s is 124 then we have four substrings that are divisible by 4: 12, 4, 24 and 124. For the string 04 the answer is three: 0, 4, 04.\nAs input/output can reach huge size it is recommended to use fast input/output methods: for example, prefer to use gets/scanf/printf instead of getline/cin/cout in C++, prefer to use BufferedReader/PrintWriter instead of Scanner/System.out in Java.\n-----Input-----\nThe only line contains string s (1 \u2264 |s| \u2264 3\u00b710^5). The string s contains only digits from 0 to 9.\n-----Output-----\nPrint integer a \u2014 the number of substrings of the string s that are divisible by 4.\nNote that the answer can be huge, so you should use 64-bit integer type to store it. In C++ you can use the long long integer type and in Java you can use long integer type.\n-----Examples-----\nInput\n124\nOutput\n4\nInput\n04\nOutput\n3\nInput\n5810438174\nOutput\n9\n\ndef",
        "answer": "def solve(s):\n    return s.count('4')",
        "difficulty": "interview"
    },
    {
        "task_id": 1693,
        "prompt": "Complete the Python function given the prompt below:This is a harder version of the problem. In this version $n \\le 500\\,000$\nThe outskirts of the capital are being actively built up in Berland. The company \"Kernel Panic\" manages the construction of a residential complex of skyscrapers in New Berlskva. All skyscrapers are built along the highway. It is known that the company has already bought $n$ plots along the highway and is preparing to build $n$ skyscrapers, one skyscraper per plot.\nArchitects must consider several requirements when planning a skyscraper. Firstly, since the land on each plot has different properties, each skyscraper has a limit on the largest number of floors it can have. Secondly, according to the design code of the city, it is unacceptable for a skyscraper to simultaneously have higher skyscrapers both to the left and to the right of it.\nFormally, let's number the plots from $1$ to $n$. Then if the skyscraper on the $i$-th plot has $a_i$ floors, it must hold that $a_i$ is at most $m_i$ ($1 \\le a_i \\le m_i$). Also there mustn't be integers $j$ and $k$ such that $j < i < k$ and $a_j > a_i < a_k$. Plots $j$ and $k$ are not required to be adjacent to $i$.\nThe company wants the total number of floors in the built skyscrapers to be as large as possible. Help it to choose the number of floors for each skyscraper in an optimal way, i.e. in such a way that all requirements are fulfilled, and among all such construction plans choose any plan with the maximum possible total number of floors.\n-----Input-----\nThe first line contains a single integer $n$ ($1 \\leq n \\leq 500\\,000$)\u00a0\u2014 the number of plots.\nThe second line contains the integers $m_1, m_2, \\ldots, m_n$ ($1 \\leq m_i \\leq 10^9$)\u00a0\u2014 the limit on the number of floors for every possible number of floors for a skyscraper on each plot.\n-----Output-----\nPrint $n$ integers $a_i$\u00a0\u2014 the number of floors in the plan for each skyscraper, such that all requirements are met, and the total number of floors in all skyscrapers is the maximum possible.\nIf there are multiple answers possible, print any of them.\n-----Examples-----\nInput\n5\n1 2 3 2 1\nOutput\n1 2 3 2 1 \nInput\n3\n10 6 8\nOutput\n10 6 6 \n-----Note-----\nIn the first example, you can build all skyscrapers with the highest possible height.\nIn the second test example, you cannot give the maximum height to all skyscrapers as this violates the design code restriction. The answer $[10, 6, 6]$ is optimal. Note that the answer of $[6, 6, 8]$ also satisfies all restrictions, but is not optimal.\n\ndef",
        "answer": "def optimal_building_plan(n, m):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 1694,
        "prompt": "Complete the Python function given the prompt below:Xenia the vigorous detective faced n (n \u2265 2) foreign spies lined up in a row. We'll consider the spies numbered from 1 to n from left to right. \nSpy s has an important note. He has to pass the note to spy f. Xenia interrogates the spies in several steps. During one step the spy keeping the important note can pass the note to one of his neighbours in the row. In other words, if this spy's number is x, he can pass the note to another spy, either x - 1 or x + 1 (if x = 1 or x = n, then the spy has only one neighbour). Also during a step the spy can keep a note and not pass it to anyone.\nBut nothing is that easy. During m steps Xenia watches some spies attentively. Specifically, during step t_{i} (steps are numbered from 1) Xenia watches spies numbers l_{i}, l_{i} + 1, l_{i} + 2,..., r_{i} (1 \u2264 l_{i} \u2264 r_{i} \u2264 n). Of course, if during some step a spy is watched, he can't do anything: neither give the note nor take it from some other spy. Otherwise, Xenia reveals the spies' cunning plot. Nevertheless, if the spy at the current step keeps the note, Xenia sees nothing suspicious even if she watches him.\nYou've got s and f. Also, you have the steps during which Xenia watches spies and which spies she is going to watch during each step. Find the best way the spies should act in order to pass the note from spy s to spy f as quickly as possible (in the minimum number of steps).\n-----Input-----\nThe first line contains four integers n, m, s and f (1 \u2264 n, m \u2264 10^5;\u00a01 \u2264 s, f \u2264 n;\u00a0s \u2260 f;\u00a0n \u2265 2). Each of the following m lines contains three integers t_{i}, l_{i}, r_{i} (1 \u2264 t_{i} \u2264 10^9, 1 \u2264 l_{i} \u2264 r_{i} \u2264 n). It is guaranteed that t_1 < t_2 < t_3 <... < t_{m}.\n-----Output-----\nPrint k characters in a line: the i-th character in the line must represent the spies' actions on step i. If on step i the spy with the note must pass the note to the spy with a lesser number, the i-th character should equal \"L\". If on step i the spy with the note must pass it to the spy with a larger number, the i-th character must equal \"R\". If the spy must keep the note at the i-th step, the i-th character must equal \"X\".\nAs a result of applying the printed sequence of actions spy s must pass the note to spy f. The number of printed characters k must be as small as possible. Xenia must not catch the spies passing the note.\nIf there are miltiple optimal solutions, you can print any of them. It is guaranteed that the answer exists.\n-----Examples-----\nInput\n3 5 1 3\n1 1 2\n2 2 3\n3 3 3\n4 1 1\n10 1 3\nOutput\nXXRR\n\ndef",
        "answer": "def solution(n, m, s, f):\n    # Write your code here\n    pass\n",
        "difficulty": "interview"
    },
    {
        "task_id": 1695,
        "prompt": "Complete the Python function given the prompt below:A class of students wrote a multiple-choice test.\nThere are $n$ students in the class. The test had $m$ questions, each of them had $5$ possible answers (A, B, C, D or E). There is exactly one correct answer for each question. The correct answer for question $i$ worth $a_i$ points. Incorrect answers are graded with zero points.\nThe students remember what answers they gave on the exam, but they don't know what are the correct answers. They are very optimistic, so they want to know what is the maximum possible total score of all students in the class. \n-----Input-----\nThe first line contains integers $n$ and $m$ ($1 \\le n, m \\le 1000$)\u00a0\u2014 the number of students in the class and the number of questions in the test.\nEach of the next $n$ lines contains string $s_i$ ($|s_i| = m$), describing an answer of the $i$-th student. The $j$-th character represents the student answer (A, B, C, D or E) on the $j$-th question.\nThe last line contains $m$ integers $a_1, a_2, \\ldots, a_m$ ($1 \\le a_i \\le 1000$)\u00a0\u2014 the number of points for the correct answer for every question.\n-----Output-----\nPrint a single integer\u00a0\u2014 the maximum possible total score of the class.\n-----Examples-----\nInput\n2 4\nABCD\nABCE\n1 2 3 4\nOutput\n16\nInput\n3 3\nABC\nBCD\nCDE\n5 4 12\nOutput\n21\n-----Note-----\nIn the first example, one of the most optimal test answers is \"ABCD\", this way the total number of points will be $16$.\nIn the second example, one of the most optimal test answers is \"CCC\", this way each question will be answered by exactly one student and the total number of points is $5 + 4 + 12 = 21$.\n\ndef",
        "answer": "def max_score(n, m, s):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 1696,
        "prompt": "Complete the Python function given the prompt below:The capital of Berland looks like a rectangle of size n \u00d7 m of the square blocks of same size.\nFire!\nIt is known that k + 1 blocks got caught on fire (k + 1 \u2264 n\u00b7m). Those blocks are centers of ignition. Moreover positions of k of these centers are known and one of these stays unknown. All k + 1 positions are distinct.\nThe fire goes the following way: during the zero minute of fire only these k + 1 centers of ignition are burning. Every next minute the fire goes to all neighbouring blocks to the one which is burning. You can consider blocks to burn for so long that this time exceeds the time taken in the problem. The neighbouring blocks are those that touch the current block by a side or by a corner.\nBerland Fire Deparment wants to estimate the minimal time it takes the fire to lighten up the whole city. Remember that the positions of k blocks (centers of ignition) are known and (k + 1)-th can be positioned in any other block.\nHelp Berland Fire Department to estimate the minimal time it takes the fire to lighten up the whole city.\n-----Input-----\nThe first line contains three integers n, m and k (1 \u2264 n, m \u2264 10^9, 1 \u2264 k \u2264 500).\nEach of the next k lines contain two integers x_{i} and y_{i} (1 \u2264 x_{i} \u2264 n, 1 \u2264 y_{i} \u2264 m) \u2014 coordinates of the i-th center of ignition. It is guaranteed that the locations of all centers of ignition are distinct.\n-----Output-----\nPrint the minimal time it takes the fire to lighten up the whole city (in minutes).\n-----Examples-----\nInput\n7 7 3\n1 2\n2 1\n5 5\nOutput\n3\nInput\n10 5 1\n3 3\nOutput\n2\n-----Note-----\nIn the first example the last block can have coordinates (4, 4).\nIn the second example the last block can have coordinates (8, 3).\n\ndef",
        "answer": "def fire(n, m, k):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 1697,
        "prompt": "Complete the Python function given the prompt below:Fox Ciel is playing a mobile puzzle game called \"Two Dots\". The basic levels are played on a board of size n \u00d7 m cells, like this:\n[Image]\nEach cell contains a dot that has some color. We will use different uppercase Latin characters to express different colors.\nThe key of this game is to find a cycle that contain dots of same color. Consider 4 blue dots on the picture forming a circle as an example. Formally, we call a sequence of dots d_1, d_2,..., d_{k} a cycle if and only if it meets the following condition:\n  These k dots are different: if i \u2260 j then d_{i} is different from d_{j}.  k is at least 4.  All dots belong to the same color.  For all 1 \u2264 i \u2264 k - 1: d_{i} and d_{i} + 1 are adjacent. Also, d_{k} and d_1 should also be adjacent. Cells x and y are called adjacent if they share an edge. \nDetermine if there exists a cycle on the field.\n-----Input-----\nThe first line contains two integers n and m (2 \u2264 n, m \u2264 50): the number of rows and columns of the board.\nThen n lines follow, each line contains a string consisting of m characters, expressing colors of dots in each line. Each character is an uppercase Latin letter.\n-----Output-----\nOutput \"Yes\" if there exists a cycle, and \"No\" otherwise.\n-----Examples-----\nInput\n3 4\nAAAA\nABCA\nAAAA\nOutput\nYes\nInput\n3 4\nAAAA\nABCA\nAADA\nOutput\nNo\nInput\n4 4\nYYYR\nBYBY\nBBBY\nBBBY\nOutput\nYes\nInput\n7 6\nAAAAAB\nABBBAB\nABAAAB\nABABBB\nABAAAB\nABBBAB\nAAAAAB\nOutput\nYes\nInput\n2 13\nABCDEFGHIJKLM\nNOPQRSTUVWXYZ\nOutput\nNo\n-----Note-----\nIn first sample test all 'A' form a cycle.\nIn second sample there is no such cycle.\nThe third sample is displayed on the picture above ('Y' = Yellow, 'B' = Blue, 'R' = Red).\n\ndef",
        "answer": "def is_cycle(board):\n    n, m = len(board), len(board[0])\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == 'Y':\n                board[i][j] = 'B'\n            elif board[i][j] == 'B':\n                board[i][j] = 'R'\n            elif board[i][j] == 'R':\n                board[i][j] = 'Y'\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == 'Y':\n                board[i][j] = 'B'\n            elif board[i][j] == 'B':\n                board[i][j] = 'R'\n            elif board[i][j] == 'R':\n                board[i][j] = 'Y'\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == 'Y':\n                board[i][j] = 'B'\n            elif board[i][j] == 'B':\n                board[i][j] = 'R'\n            elif board[i][j] == 'R':\n                board[i][j] = 'Y'\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == 'Y':\n                board[i][j] = 'B'\n            elif board[i][j] == 'B':\n                board[i][j] = 'R'\n            elif board[i][j] == 'R':\n                board[i][j] = 'Y'\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == 'Y':\n                board[i][j] = 'B'\n            elif board[i][j] == 'B':\n                board[i][j] = 'R'\n            elif board[i][j] == 'R':\n                board[i][j] = 'Y'\n    for",
        "difficulty": "interview"
    },
    {
        "task_id": 1698,
        "prompt": "Complete the Python function given the prompt below:One way to create a task is to learn from life. You can choose some experience in real life, formalize it and then you will get a new task.\nLet's think about a scene in real life: there are lots of people waiting in front of the elevator, each person wants to go to a certain floor. We can formalize it in the following way. We have n people standing on the first floor, the i-th person wants to go to the f_{i}-th floor. Unfortunately, there is only one elevator and its capacity equal to k (that is at most k people can use it simultaneously). Initially the elevator is located on the first floor. The elevator needs |a - b| seconds to move from the a-th floor to the b-th floor (we don't count the time the people need to get on and off the elevator).\nWhat is the minimal number of seconds that is needed to transport all the people to the corresponding floors and then return the elevator to the first floor?\n-----Input-----\nThe first line contains two integers n and k (1 \u2264 n, k \u2264 2000) \u2014 the number of people and the maximal capacity of the elevator.\nThe next line contains n integers: f_1, f_2,..., f_{n} (2 \u2264 f_{i} \u2264 2000), where f_{i} denotes the target floor of the i-th person.\n-----Output-----\nOutput a single integer \u2014 the minimal time needed to achieve the goal.\n-----Examples-----\nInput\n3 2\n2 3 4\nOutput\n8\nInput\n4 2\n50 100 50 100\nOutput\n296\nInput\n10 3\n2 2 2 2 2 2 2 2 2 2\nOutput\n8\n-----Note-----\nIn first sample, an optimal solution is:   The elevator takes up person #1 and person #2.  It goes to the 2nd floor.  Both people go out of the elevator.  The elevator goes back to the 1st floor.  Then the elevator takes up person #3.  And it goes to the 2nd floor.  It picks up person #2.  Then it goes to the 3rd floor.  Person #2 goes out.  Then it goes to the 4th floor, where person #3 goes out.  The elevator goes back to the 1st floor.\n\ndef",
        "answer": "def elevator(n, k, floors):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 1699,
        "prompt": "Complete the Python function given the prompt below:While resting on the ship after the \"Russian Code Cup\" a boy named Misha invented an interesting game. He promised to give his quadrocopter to whoever will be the first one to make a rectangular table of size n \u00d7 m, consisting of positive integers such that the sum of the squares of numbers for each row and each column was also a square.\nSince checking the correctness of the table manually is difficult, Misha asks you to make each number in the table to not exceed 10^8.\n-----Input-----\nThe first line contains two integers n and m (1 \u2264 n, m \u2264 100) \u00a0\u2014 the size of the table. \n-----Output-----\nPrint the table that meets the condition: n lines containing m integers, separated by spaces. If there are multiple possible answers, you are allowed to print anyone. It is guaranteed that there exists at least one correct answer.\n-----Examples-----\nInput\n1 1\nOutput\n1\nInput\n1 2\nOutput\n3 4\n\ndef",
        "answer": "def rusCodeCup(n, m):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    }
]