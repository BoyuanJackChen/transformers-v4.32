[
    {
        "task_id": 3300,
        "prompt": "Complete the Python function given the prompt below:A National Geographic film crew is visiting the ZOO this week. They are creating a documentary about animal speed and they would like to film one or more cheetahs running at full pace. A solitary running cheetah has been filmed successfully many times. Therefore, the crew is also after a much more spectacular feat: As many as possible cheetahs sprinting on parallel tracks filmed together in one shot.\n\u201cNo, that is impossible,\u201d said the director. \u201cWe cannot squeeze those animals into some sort of a start box, as you probably imagine, and then open the box and make them run all at once. It is clearly too dangerous and unpredictable. No.\u201d\n\u201cThen let us make more boxes and open some of them earlier and some of them later,\u201d said one of the filmmakers. \u201cCould that work?\u201d\n\u201cAnd if we open the boxes with the slower cheetahs a bit earlier then after a while the faster ones will be overtaking the slower ones and that would be a great shot,\u201d pointed out another filmmaker. \u201cWe would like to see the whole pack rather short with the last animals close the leading ones. As close as possible and at least for a moment.\u201d\nIt was a long and difficult discussion which ensued, but in the end the circumstances of the experiment were agreed upon.\nYou are given the start time and the speed of each cheetah. The length of the pack, which is defined as the distance between the first and the last cheetah in the pack, might be different at different moments. Find the minimum length of the pack during the run, where all cheetahs must be running. You may also suppose that the track is so long that the minimum length of the pack happens at least a moment before the first cheetah reaches the finish line.\nAll start boxes will be so close that you may consider them to be in the same place. The $k$-th cheetah will be released from its start box at the given time $t_ k$. The $k$-th cheetah is expected to run the whole distance at constant speed $v_ k$.\n-----Input-----\nThe first line contains the number of cheetahs $N$ ($1 \\leq N \\leq 100000$). Next, there are $N$ lines, each line contains two integers $t_ k$, $v_ k$ separated by spaces and representing the start time and velocity of the $k$-th cheetah ($1 \\leq k \\leq N$). All input values $t_ k$ and $v_ k$ are positive and less than $10^5$.\n-----Output-----\nPrint a single line with one floating point number $L$ specifying the minimum length of the running pack. Your answer should not differ from the correct answer by more than $10^{-2}$. The length of the pack is the distance between the first and the last animal in the pack. The length can be measured at any time $T \\geq \\max _{k = 1, \\ldots, N} t_ k$. We suppose that each cheetah is running at a constant speed for all the time from the start and also at its moment of release from the start box.\n-----Examples-----\nSample Input 1:\n2\n1 1\n1 1\nSample Output 1:\n0.000\nSample Input 2:\n2\n1 99999\n99999 99999\nSample Output 2:\n9999700002.000\n\ndef",
        "answer": "def solve(N, T):\n    # Write your code here\n    pass",
        "difficulty": "competition"
    },
    {
        "task_id": 3301,
        "prompt": "Complete the Python function given the prompt below:Sonia is the CEO of the South Western Economic Research Consortium (SWERC). The main asset of SWERC is a group of banks spread out in several countries, which specialize in wire transfers between these countries.\nMoney is transferred between banks which have transfer agreements. Such agreements settle a fixed fee whenever there is a transfer between these banks. When a client wishes to transfer money to an account in a different bank, the money flows between banks with transfer agreements until it reaches the destination account. For each intermediary transaction, the client will have to pay the corresponding transfer fee.\nSWERC\u2019s goal is to provide the cheapest fees for its clients, using only its banks as intermediaries, and profit from its commissions. Things were going quite well until the recent economic crisis. Due to the current situation, governments agreed to impose an extra tax on each wire transfer. Their objective is to both increase the tax income and avoid losing money to tax havens around the world. Hence, the intention is make this extra tax as large as possible (while avoiding too much unrest).\nSonia, being a savvy executive, wants to take advantage of this situation and make sure SWERC provides the cheapest way to transfer money between banks X and Y (their most frequent transfer requests). She will try to lobby the politicians so that the new fee makes this happen. She gathered data about the transfer agreements between banks (including competitors) but has no idea what should be the value of the new fee.Task\nCan you help Sonia compute the largest fee so that SWERC can provide cheapest way to transfer money between X and Y?Input\nThe first line consists of four space-separated integers: $N$ $P$ $X$ $Y$, the number of existing banks, the number of transfer partnerships, and the identifiers of banks X and Y, respectively. The next $P$ lines have three space-separated integers: $a_ i$ $b_ i$$c_ i$, meaning there is a partnership between banks $a_ i$ and $b_ i$ with fee $c_ i$.\nA line with an integer $M$, the number of banks owned by SWERC, follows. The next line contains $M$ space-separated integers, the identifiers of these banks. $X$ and $Y$ are always in this list.Constraints\n$2 \\leq M \\leq N \\leq 1000$\nand\n$1 \\leq P \\leq 10000$\n$1 \\leq X, Y, a_ i, b_ i \\leq N$\nand\n$X \\neq Y$ and $a_ i \\neq b_ i$\n$1 \\leq c_ i \\leq 1000000000$Output\nThe output should be a single integer greater than zero: the largest fee so that SWERC can provide cheapest way to transfer money between $X$ and $Y$. However, if there is no value such that this happens, output Impossible instead. If the fee on each transfer can be infinitely large, output Infinity.Sample Output 1 Explanation\nIf the extra fee is 4 or more, then SWERC can not provide the cheapest transaction fee. Example: if the fee is 4, SWERC provides a cost of 20, using banks 1, 3, 4, 5 and 6, in this order. However, using bank 2 as an intermediary, we can pay only 19.\n-----Examples-----\nSample Input 1:\n6 8 1 6\n1 2 5\n1 3 1\n2 6 6\n2 3 6\n4 2 3\n3 4 1\n4 5 1\n5 6 1\n5\n1 3 6 5 4\nSample Output 1:\n3\nSample Input 2:\n3 4 1 2\n1 2 6\n1 3 2\n1 2 7\n2 3 3\n2\n1 2\nSample Output 2:\nInfinity\n\ndef",
        "answer": "def solve(N, P, X, Y, M):\n    # Write your code here\n    pass",
        "difficulty": "competition"
    },
    {
        "task_id": 3302,
        "prompt": "Complete the Python function given the prompt below:Gray codes are a classic topic in information theory with a number of practical applications, none of which we are concerned with in this problem. An $n$-bit Gray code is an ordering $(x_1, x_2, \\ldots, x_{2^n})$ of all $n$-bit binary strings, with the property that any consecutive pair of strings differ in exactly $1$ bit. More formally, for every $1 \\le i < 2^n$, it holds that $d(x_{i}, x_{i+1}) = 1$, where $d(\\cdot, \\cdot )$ denotes the Hamming distance between two binary strings. For instance, for $n=3$, the sequence $(000, 001, 011, 010, 110, 111, 101, 100)$ is a Gray code. \nWhile Gray codes are great, they are also a bit, well... gray1. In this problem, we look at a much more colorful variant.\nFor an integer $n \\ge 1$ and set of integers $P \\subseteq \\{ 1, \\ldots, n\\} $, we say that an ordering $(x_1, \\ldots, x_{2^n})$ of all $n$-bit binary strings is an $n$-bit color code with palette $P$, if for all $1 \\le i < 2^n$, it holds that $d(x_ i, x_{i+1}) \\in P$, i.e., the number of bits by which any consecutive pair of strings differ is in $P$.\nNote that for some palettes, color codes do not exist. For instance, if $n = 6$ and $P = \\{ 6\\} $, the second string must be the binary negation of the first one, but then the third string must be the negation of the second one, i.e., equal to the first string.\nGiven $n$ and $P$, can you construct an $n$-bit color code with palette $P$?\n-----Input-----\nThe first line of input consists of two integers $n$ ($1 \\le n \\le 16$) and $p$ ($1 \\le p \\le n$). Then follow a line with $p$ distinct integers $s_1, \\ldots, s_ p$ ($1 \\leq s_ i \\leq n$ for each $i$) \u2013 the elements of $P$.\n-----Output-----\nIf there is an $n$-bit color code with palette $P$, output $2^n$ lines, containing the elements of such a code, in order. If there are many different codes, any one will be accepted. If no such code exists, output \u201cimpossible\u201d.\n-----Examples-----\nSample Input 1:\n6 1\n6\nSample Output 1:\nimpossible\nSample Input 2:\n3 1\n1\nSample Output 2:\n000\n001\n011\n010\n110\n111\n101\n100\n\ndef",
        "answer": "def gray_code(n, p):\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 0]\n    if n == 3:\n        return [1, 0, 0]\n    if n == 4:\n        return [1, 0, 0, 0]\n    if n == 5:\n        return [1, 0, 0, 0, 0]\n    if n == 6:\n        return [1, 0, 0, 0, 0, 0]\n    if n == 7:\n        return [1, 0, 0, 0, 0, 0, 0]\n    if n == 8:\n        return [1, 0, 0, 0, 0, 0, 0, 0]\n    if n == 9:\n        return [1, 0, 0, 0, 0, 0, 0, 0, 0]\n    if n == 10:\n        return [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n    if n == 11:\n        return [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n    if n == 12:\n        return [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n    if n == 13:\n        return [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n    if n == 14:\n        return [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n    if n == 15:\n        return [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n    if n == 16:\n        return [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n    if n == 17:\n        return [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
        "difficulty": "competition"
    },
    {
        "task_id": 3303,
        "prompt": "Complete the Python function given the prompt below:Petra is learning how to add two positive integers in school, but thinks it is a bit too difficult. They are currently working with the standard algorithm for addition, where you first compute the sum of the two units digits, then the sum of the two tens digits, and so on. Whenever the sum of the digits at the same position in the two numbers exceeds 9, a carry digit is added onto the digit of the next higher magnitude. Petra has trouble with the last step \u2013 she often forgets to keep track of the carry digit. \nA few weeks ago, she also learnt a simpler method of addition. In this method, you repeatedly add $1$ to one of the numbers and subtract $1$ from the other, until the second one reaches zero. This can of course take a lot of time for large numbers.\nPetra now wants to combine the two methods, for fast and error-free addition. Her plan is to first perform the second method one step at a time, until the two numbers would not produce a carry digit when added using the standard algorithm (for positive integers, this always happens eventually). To evaluate the performance of her new method, she has asked you to help her compute the number of steps she must perform of the second method when adding two given integers. Petra may perform the addition by $1$ to either of the two numbers (and subtraction by $1$ from the other).\n-----Input-----\nThe input consists of two lines, each containing a positive integer with at most $10^6$ digits. These are the two integers Petra wants to add.\n-----Output-----\nOutput a single integer, the minimum number of times Petra must add $1$ to one of her numbers (while subtracting $1$ from the other) until they can be added using the standard addition algorithm without any carry digits.\n-----Examples-----\nSample Input 1:\n10\n99\nSample Output 1:\n1\nSample Input 2:\n90\n10\nSample Output 2:\n10\n\ndef",
        "answer": "def minAdd(a,b):\n    c = a + b\n    while c > 9:\n        c = c % 10 + c / 10\n    return c",
        "difficulty": "competition"
    },
    {
        "task_id": 3304,
        "prompt": "Complete the Python function given the prompt below:Young ruler Mirko has declared himself king of dwarves. Upon hearing this, Slavko felt threatened and soon declared himself king of elves! As there cannot be more than one king in the land, they have decided to resolve the issue of power once and for all.\nSlavko will, along with the $N$ strongest elves of the kingdom, labeled with numbers from $1$ to $N$, go visit Mirko\u2019s castle. In the castle hall, they will be greeted by the $N$ strongest dwarves sitting in a circle, labelled clockwise with numbers from $1$ to $N$.\nMirko has, upon entering the castle, given a number $A_ i$ to each of Slavko\u2019s elves \u2013 the label of the dwarf it will fight against. Unfortunately, he didn\u2019t make sure that each elf should get a unique adversary, and soon a terrible fight broke out.\nThey have decided to solve the problem in the following way:\n - Slavko will send his elves to the hall one by one, in the order he chooses. The next elf can enter the hall only after the one before him found a place to sit.\n - The elf labeled $k$ will first approach the dwarf labeled $A_ k$. If there isn\u2019t an elf sitting beside the dwarf, he will sit there. Otherwise, he will continue walking, from dwarf to dwarf, clockwise, until he finds an unclaimed dwarf.\nNow the $N$ resulting pairs of elves and dwarves compete in armwrestling, and the stronger one always wins.\nSlavko is well prepared for this event. He has studied all the fighters and determined the strength of each one. Now he wants to send the elves to the hall in the order which, after they all sit down, will bring the most victories for him.\nHelp him and calculate the highest number of victories in duels that can be achieved by elves!\n-----Input-----\nThe first line of input contains the integer $N$ ($1 \\leq N \\leq 5\\cdot 10^5$). The second line of input contains $N$ integers $A_ i$ ($1 \\leq A_ i \\leq N$), the adversaries chosen by Mirko. The third line of input contains $N$ integers $P_ i$ ($1 \\leq P_ i \\leq 10^9$), the dwarves\u2019 strengths. The fourth line of input contains $N$ integers $V_ i$ ($1 \\leq V_ i \\leq 10^9$), the elves\u2019 strengths. All strengths from the input will be mutually distinct.\n-----Output-----\nThe first and only line of input must contain the maximum number of victories that can be achieved by elves.\n-----Examples-----\nSample Input 1:\n3\n2 3 3\n4 1 10\n2 7 3\nSample Output 1:\n2\nSample Input 2:\n4\n3 1 3 3\n5 8 7 10\n4 1 2 6\nSample Output 2:\n1\n\ndef",
        "answer": "def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    p = list(map(int, input().split()))\n    v = list(map(int, input().split()))\n    a.sort()\n    p.sort()\n    v.sort()\n    pairs = 0\n    for i in range(n):\n        if a[i] < p[i]:\n            pairs += 1\n    print(pairs)\nsolve()\n",
        "difficulty": "competition"
    },
    {
        "task_id": 3305,
        "prompt": "Complete the Python function given the prompt below:\u201cNever attribute to malice that which is adequately explained by stupidity.\u201d \u00ad\u2013Robert Hanlon.\nA well-known trendsetter from a faraway land once needed strings with certain palindromic properties for inspiration. Unable to produce them all herself, she decided to outsource the work. To jog your memory, a palindrome is a string that reads the same forwards and backwards. For example, level and madam are palindromes, while label and maxim are not.\nAll was going well until the International Cheapskate Palindrome Company (ICPC), the company hired to produce the strings, made a huge blunder and delivered a string that was so horrible, the trendsetter lost all her inspiration. Now, she is suing the ICPC for damages resulting from lost productivity.\nThe ICPC was supposed to produce a palindrome-rich string\u00ad\u2013a string which had many nonempty palindromic substrings. Recall that a substring of a string is a string that can be formed by removing zero or more characters from the start and end of the other string. For example, sig and design are substrings of design, while dig and singed are not.\nAs a lawyer for the ICPC, you need to show that the ICPC made a good faith effort to produce the required string. To this end, you want to show that while the string $S$ the ICPC produced may not be palindrome rich, it is almost palindrome-rich\u00ad\u2013that is, it has many nonempty almost palindromic substrings. A string is called almost palindromic if it is either a palindrome, or can be turned into a palindrome by swapping two characters.\nTo strengthen your case, you will make $Q$ demonstrations. In the $i^\\text {th}$ demonstration, you will consider only the $L_ i^\\text {th}$ through $R_ i^\\text {th}$ characters of $S$, and show that it is almost palindrome-rich by determining how many nonempty almost palindromic substrings it has.\n-----Input-----\nThe first line of input contains two integers, $N$ ($1 \\leq N \\leq 200000$) and $Q$ ($1 \\leq Q \\leq 200000$), the length of $S$ and the number of demonstrations you will make, respectively.\nThe second line of input contains a string of $N$ lowercase Latin alphabet characters, describing the string $S$.\nThe next $Q$ lines contain the descriptions of the demonstrations. In particular, the $i^\\text {th}$ of these lines contains two integers $L_ i$ and $R_ i$ ($1 \\leq L_ i \\leq R_ i \\leq N$), denoting that for the $i^\\text {th}$ demonstration, you will consider only the $L_ i^\\text {th}$ through $R_ i^\\text {th}$ characters of $S$.\n-----Output-----\nOutput $Q$ lines. The $i^\\text {th}$ of these lines should contain a single integer, the number of nonempty almost palindromic substrings in the $i^\\text {th}$ demonstration.\n-----Examples-----\nSample Input 1:\n9 3\nbeginning\n1 5\n4 8\n1 9\nSample Output 1:\n5\n11\n16\nSample Input 2:\n6 1\nvelvet\n1 6\nSample Output 2:\n7\n\ndef",
        "answer": "def almost_palindrome_rich(S):\n    # your code here\n    return",
        "difficulty": "competition"
    },
    {
        "task_id": 3306,
        "prompt": "Complete the Python function given the prompt below:Mirkos village has only one long street stretching from east to west with M houses. Each house has a unique house number, starting with $1$ and ending with $M$.\nRecent storm took out most phone lines so the mayor financed construction of a new one. Mirko is interested in the popularity of this new phone network, so he infiltrated its construction and placed special detectors on some points.\nDetector detects any phone call made between two houses, as long as one of them is eastward and the other westward from the point the detector is installed.\nAt the end of the first month, Mirko removed all detectors and now wonders what is the smallest number of phone calls that could have been made during that month.\n-----Input-----\nThe first line of input contains two integers $N$ ($1 \\le N \\le 100000$), the number of detectors, and $M$ ($N < M \\le 1000000000$), the number of houses in the village. The houses are numbered from $1$ to $M$ (inclusive).\nThe next $N$ lines contains two numbers each: $P_ i$ ($1 \\le P_ i < M$), and $C_ i$ ($1 \\le C_ i \\le 1000000000$), the position and total number of phone calls detected by detector numbered $i$. We say that a detector is on position $P_ i$ if it is between houses numbered $P_ i$ and $P_ i +1$.\nThere will never be more than one detector on the same position.\n-----Output-----\nOutput a single integer, the minimal number of phone calls made.\n-----Examples-----\nSample Input 1:\n3 4\n3 1\n2 2\n1 1\nSample Output 1:\n2\nSample Input 2:\n2 3\n1 23\n2 17\nSample Output 2:\n23\n\ndef",
        "answer": "def solve(N, M, P, C):\n    # Write your code here",
        "difficulty": "competition"
    },
    {
        "task_id": 3307,
        "prompt": "Complete the Python function given the prompt below:Alob and Bice inherited from their parents a piece of land represented by a simple polygon. There is a canal represented by a straight line. Each brother inherited the lands on one side of the canal. It is possible that the land of each person consists of several disconnected pieces of land. It is also possible that one person does not inherit any land at all.\nAlob decided to grow corn fields on his land while Bice decided to grow rice fields. However, they both agree that their fields are symmetrical about the canal.\nYour task is to help Alob identify the largest possible area of land to grow corn fields.\nNote that a simple polygon is a non-intersecting polygon, and does not have any $3$ consecutive vertices that are collinear.\n-----Input-----\n - The first line contains $N$ - the number of vertices representing the simple polygon land ($3 \\leq N \\leq 100$).\n - In the next $N$ lines, the $i^\\textrm {th}$ one contains two integers $x_ i$, $y_ i$ - the coordinate of the $i^\\textrm {th}$ vertex ($-1000 \\leq x_ i, y_ i \\leq 1000$).\n - The last line contains four space-separated integers $x_ a$, $y_ a$, $x_ b$, $y_ b$ representing the coordinates of two distinct points in the straight line canal ($-1000 \\leq x_ a, y_ a, x_ b, y_ b \\leq 1000$).\n-----Output-----\nOutput a single real number - the largest possible area of land to grow corn fields for Alob. Your answer will be considered correct if its relative or absolute error doesn\u2019t exceed $10^{-6}$.\nNamely: let\u2019s assume that your answer is $a$, and the answer of the jury is $b$. The checker program will consider your answer correct, if $\\frac{|a-b|}{max(1,b)} \\leq 10^{-6}$.\n-----Sample Clarification-----\nThese are visualization of the samples below:\nFirst sample:\nSecond sample:\nThird sample:\n-----Examples-----\nSample Input 1:\n4\n0 0\n2 0\n2 2\n0 2\n0 -1 0 3\nSample Output 1:\n0.0000000000\nSample Input 2:\n6\n0 1\n0 4\n3 6\n7 5\n4 2\n7 0\n5 7 2 0\nSample Output 2:\n9.476048311178\n\ndef",
        "answer": "def area(x1, y1, x2, y2, x3, y3):\n    return abs((x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2.0)",
        "difficulty": "competition"
    },
    {
        "task_id": 3308,
        "prompt": "Complete the Python function given the prompt below:Brandon Greg Jr. is an art enthusiast who covered the entirety of the walls of his room with works of art. Brandon\u2019s room is in the shape of a simple polygon (simple means that the polygon does not intersect itself). If Brandon is at point $X$, then he can see all points $Y$ such that the line segment $XY$ (excluding point $Y$) does not intersect any walls. Since Brandon\u2019s happiness is proportional to the amount of art he can see by turning his head, he wants to know the area of the set of points from where he could see all of the walls of his room (and thus see his entire art collection). You may assume that Brandon has a very flexible neck.\n-----Input-----\nThe first line of input contains a single integer $n$ ($3\\le n\\le 2\\cdot 10^5$), representing the number of vertices of Brandon\u2019s room.\nEach of the next $n$ lines of input contains two space-separated real numbers $x_ i$ and $y_ i$ ($|x_ i|, |y_ i| \\le 10^5$), representing the cartesian coordinates of the $i$-th vertex of Brandon\u2019s room. The coordinates have at most two digits after the decimal place. It is guaranteed that the polygon is simple. The vertices may be given in clockwise or counterclockwise order.\n-----Output-----\nOutput the area of the set of points from where Brandon could see all of the walls of his room. The output will be considered correct if the absolute or relative error is within $10^{-4}$ of the answer (if $a$ is the output and $b$ is the answer, then $a$ will be considered correct if $\\frac{|a-b|}{\\max \\{ 1,b\\} } \\le 10^{-4}$.\n-----Examples-----\nSample Input 1:\n5\n2 0\n1 1\n0 2\n-2 0\n0 -2\nSample Output 1:\n8.0000000000\nSample Input 2:\n5\n0.2 0.00\n0 -0.2\n0.0 0\n-0.2 0\n0 0.20\nSample Output 2:\n0.0200000000\n\ndef",
        "answer": "def area(n, x, y):\n    area = 0\n    for i in range(n):\n        area += (x[i] * y[(i + 1) % n])\n        area -= (x[i] * y[i])\n    return abs(area / 2)",
        "difficulty": "competition"
    },
    {
        "task_id": 3309,
        "prompt": "Complete the Python function given the prompt below:The great Equestria Games are coming!\nAs you know, the Equestria Games is the biggest sports event in Equestria, where ponies from all around the land come and compete. Of course, such a huge event requires months of planning, lots of money, and, most importantly, kingdom-wide media coverage.\nThe stadium can be considered as a ring partitioned into $N$ sectors. Due to the intense and bitter rivalry between the fans of different teams, every sector seats only fans of a certain team; the $i^\\text {th}$ sector clockwise from the northernmost sector accommodates only the fans of team $A_ i$. Every team has a different distinguishing color, and every fan of course wears a t-shirt with the color of their team.\nNow, broadcasting rights of the event are being sold to media companies. Media companies are fussy about getting the perfect coverage, and so each of them wants an exclusive, consecutive range of at least $K$ sectors. Additionally, since they want their coverage to look interesting, they also want that range of sectors to have fans wearing at least $C$ distinct colors.\nObviously, the logistics is a nightmare, so naturally the work has been passed on to you. Can you help determine the maximum number of media companies that can be sold broadcasting rights, if all constraints must be satisfied?\n-----Input-----\nThe first line of input contains three integers, $N$ ($2 \\leq N \\leq 200000$), $K$ ($1 \\leq K \\leq N$) and $C$ ($1 \\leq C \\leq N$), the number of sectors in the stadium, the minimum number of consecutive sectors each media company wants, and the minimum number of distinct colors each media company wants, respectively.\nThe second line of input contains $N$ integers, $A_1, A_2, \\dots, A_ N$ ($1 \\leq A_ i \\leq 10^9$), the teams the fans assigned to each sector of the stadium support.\n-----Output-----\nOutput a single integer on a line by itself, the maximum number of media companies that can be sold broadcasting rights.\n-----Examples-----\nSample Input 1:\n9 4 3\n1 1 9 9 1 6 6 39 9\nSample Output 1:\n2\nSample Input 2:\n10 2 2\n1 1 1 1 1 2 2 2 2 2\nSample Output 2:\n2\n\ndef",
        "answer": "def solve(N, K, C):\n    # Write your code here",
        "difficulty": "competition"
    },
    {
        "task_id": 3310,
        "prompt": "Complete the Python function given the prompt below:After finding a suitable residence in the Swiss Alps, Robin thought he finally had what it takes to be happy. But every day he woke up feeling that something was missing. Maybe it was the lack of English food in these parts? Spotting a market opportunity and solving his problem at the same time, he teamed up with the famous English chef Jim to open a restaurant nearby. While he has no doubts about Jim\u2019s talents as a chef, Robin wants to be sure that opening an English restaurant in the Swiss Alps is a good idea.\nFortunately, as a local, he knows the habits of restaurant customers. At the stroke of each hour, a group of people arrives of size that is uniformly random between $1$ and $g$ people (inclusive). The group finds the smallest completely unoccupied table that fits the group and occupies it. If they can not find such a table, the group leaves with great disappointment. Once seated, a group never leaves until the restaurant closes, as Jim has no difficulty keeping the guests entertained.\nAs an example, suppose the restaurant has $3$ tables of capacities $5$, $8$ and $9$. If groups of sizes $5, 10$ and $3$ arrive (in that order), in the end there will be $8$ people in the restaurant. The first group occupies the table of capacity $5$, the second group leaves and the last group occupies the table of capacity $8$.\nRobin plans to keep his restaurant open for $t$ hours in total. In the restaurant business the most important metric is the expected number of people in the restaurant when it is closes. Can you help Robin calculate the expected occupancy after $t$ hours?\n-----Input-----\nThe input consists of:\n - One line with three integers $n, g, t$ ($1 \\le n \\le 100, 1\\leq g\\leq 200, 1\\leq t \\leq 100$), the number of tables in the restaurant, the maximum group size, and the number of hours the restaurant is open.\n - One line with $n$ integers $c_1, \\ldots, c_ n$ ($1 \\le c_ i \\le 200$ for each $i$) giving the capacities of the tables.\n-----Output-----\nOutput the expected number of people in the restaurant when it closes. Your answer should have an absolute or relative error of at most $10^{-6}$.\n-----Examples-----\nSample Input 1:\n3 3 2\n1 2 3\nSample Output 1:\n3.666666667\nSample Input 2:\n4 11 4\n10 10 10 10\nSample Output 2:\n20.000000000\n\ndef",
        "answer": "def solution(n, g, t, c):\n    # your code here\n    return 0",
        "difficulty": "competition"
    },
    {
        "task_id": 3311,
        "prompt": "Complete the Python function given the prompt below:Everybody loves big numbers (if you do not, you might want to stop reading at this point). There are many ways of constructing really big numbers known to humankind, for instance: \n - Exponentiation: $42^{2016} = \\underbrace{42 \\cdot 42 \\cdot \\ldots \\cdot 42}_{2016\\text { times}}$.\n - Factorials: $2016! = 2016 \\cdot 2015 \\cdot \\ldots \\cdot 2 \\cdot 1$.\nIn this problem we look at their lesser-known love-child the exponial, which is an operation defined for all positive integers $n$ as\\[ \\operatorname {exponial}(n) = n^{(n-1)^{(n-2)^{\\cdots ^{2^{1}}}}}. \\]\nFor example, $\\operatorname {exponial}(1) = 1$ and $\\operatorname {exponial}(5) = 5^{4^{3^{2^1}}} \\approx 6.206 \\cdot 10^{183230}$ which is already pretty big. Note that exponentiation is right-associative: $a^{b^c} = a^{(b^c)}$.\nSince the exponials are really big, they can be a bit unwieldy to work with. Therefore we would like you to write a program which computes $\\operatorname {exponial}(n) \\bmod m$ (the remainder of $\\operatorname {exponial}(n)$ when dividing by $m$).\n-----Input-----\nThe input consists of two integers $n$ ($1 \\le n \\le 10^9$) and $m$ ($1 \\le m \\le 10^9$).\n-----Output-----\nOutput a single integer, the value of $\\operatorname {exponial}(n) \\bmod m$.\n-----Examples-----\nSample Input 1:\n2 42\nSample Output 1:\n2\nSample Input 2:\n5 123456789\nSample Output 2:\n16317634\n\ndef",
        "answer": "def exponial(n, m):\n    return n**(n-1) % m",
        "difficulty": "competition"
    },
    {
        "task_id": 3312,
        "prompt": "Complete the Python function given the prompt below:In the hit video game \u201cJohnny5 and the Exploding Oil Cans\u201d, you control the robot \u201cJohnny5\u201d. The robot can be moved one cell at a time in one of the directions up, down, left, or right on an $N \\times N$ grid. One move takes one second and costs one unit of energy. It is allowed to stand still, you don\u2019t have to move every second. If you have no energy, you can\u2019t move. You start the game with $E$ units of energy.\nThe objective of the game is to collect as many oil cans as you can. Every second there may appear one or more oil cans somewhere on the grid. If Johnny5 is at a location when a can appears there he collects that can, otherwise it explodes. You score $1$ point for each oil can Johnny5 collects. If an oil can explodes in one of the four adjacent cells to where Johnny5 is located he collects the spilled oil, and you gain one unit of energy for each of them. If he does not pick up the can, and is not in one of the adjacent cells to pick up the oil, the oil disappears immediately. Note that he only gets oil from adjacent cells, and not from any cans in the same cell that he is in.\nYou\u2019ve had trouble beating this game for years, but your friend just called and told you there is a way to get a list of where and when the cans will appear. Write a program that uses this information to find the maximum number of points you can get.\n-----Input-----\nThe first line of the input consists of $5$ space-separated integers $N$, $E$, $S_ X$, $S_ Y$, $C$. These numbers give the size of the grid, the starting energy, the $x$ and $y$ coordinates where Johnny5 starts, and the number of cans.\nThe next $C$ lines each consist of $3$ space-separated integers $X$, $Y$, $CT$. These numbers represent the $x$ and $y$ coordinates of a can, and the time it appears there, in seconds after the start of the game.\n-----Output-----\nOutput the maximum number of points you can score.\n-----Limits-----\n - $1 \\leq N \\leq 500$.\n - $0 \\leq E \\leq 100$.\n - $0 \\leq C \\leq 100$.\n - $0 \\leq X_ S, Y_ S, X, Y < N$.\n - $1 \\leq CT \\leq 100$.\n-----Examples-----\nSample Input 1:\n3 1 0 0 2\n1 2 2\n1 1 1\nSample Output 1:\n0\nSample Input 2:\n3 1 1 1 8\n0 1 1\n1 0 1\n2 1 1\n1 2 1\n1 2 2\n2 2 3\n0 2 5\n1 2 6\nSample Output 2:\n4\n\ndef",
        "answer": "def max_points(grid, energy, x, y, c):\n    # Write your code here\n    pass",
        "difficulty": "competition"
    },
    {
        "task_id": 3313,
        "prompt": "Complete the Python function given the prompt below:You are playing a racing game. Your character starts at the X-axis line ($y=0$) and proceeds up the racetrack, which has a boundary at the lines $x=0$ and $x=w$. The finish is at $y=h$, and the game ends when you reach that line. You proceed at a fixed vertical velocity $v$, but you can control your horizontal velocity to be any value between $-v/r$ and $v/r$, where $r$ is a fixed ratio. You may change your horizontal velocity at any time, but your vertical velocity must remain fixed.\nThere are gems at specific points on the race track. Your job is to collect as many gems as possible (they all have the same value).\nHow many gems can you collect? You may start at any horizontal position you want (but your vertical position must be $0$ at the start).\n-----Input-----\nEach input will consist of a single test case. Note that your program may be run multiple times on different inputs. The first line will contain four integers: $n$ ($1 \\le n \\le 10^5$) is the number of gems, $r$ ($1 \\le r \\le 10$) is the ratio of vertical velocity to maximum horizontal speed, $w$ ($1 \\le w \\le 10^9$) is the width of the track, and $h$ ($1 \\le h \\le 10^9$) is the height of the finish line. Following this will be $n$ lines, each containing an integer $x$ and $y$ coordinate ($0 \\le x \\le w$, $1 \\le y \\le h$), containing the coordinate of a gem. All gems will lie on the race track. None will be on the start line.\n-----Output-----\nOutput a single integer on a line by itself representing the maximum number of gems that you can collect.\n-----Examples-----\nSample Input 1:\n5 1 10 10\n8 8\n5 1\n4 6\n4 7\n7 9\nSample Output 1:\n3\nSample Input 2:\n5 1 100 100\n27 75\n79 77\n40 93\n62 41\n52 45\nSample Output 2:\n3\n\ndef",
        "answer": "def max_gems(n, r, w, h, gems):\n    gems = sorted(gems, key=lambda x: x[1])\n    gems = sorted(gems, key=lambda x: x[0])\n    gems = sorted(gems, key=lambda x: x[1])\n    gems = sorted(gems, key=lambda x: x[0])\n    gems = sorted(gems, key=lambda x: x[1])\n    gems = sorted(gems, key=lambda x: x[0])\n    gems = sorted(gems, key=lambda x: x[1])\n    gems = sorted(gems, key=lambda x: x[0])\n    gems = sorted(gems, key=lambda x: x[1])\n    gems = sorted(gems, key=lambda x: x[0])\n    gems = sorted(gems, key=lambda x: x[1])\n    gems = sorted(gems, key=lambda x: x[0])\n    gems = sorted(gems, key=lambda x: x[1])\n    gems = sorted(gems, key=lambda x: x[0])\n    gems = sorted(gems, key=lambda x: x[1])\n    gems = sorted(gems, key=lambda x: x[0])\n    gems = sorted(gems, key=lambda x: x[1])\n    gems = sorted(gems, key=lambda x: x[0])\n    gems = sorted(gems, key=lambda x: x[1])\n    gems = sorted(gems, key=lambda x: x[0])\n    gems = sorted(gems, key=lambda x: x[1])\n    gems = sorted(gems, key=lambda x: x[0])\n    gems = sorted(gems, key=lambda x: x[1])\n    gems = sorted(gems, key=lambda x: x[0])\n    gems = sorted(gems, key=lambda x: x[1])\n    gems = sorted(gems,",
        "difficulty": "competition"
    },
    {
        "task_id": 3314,
        "prompt": "Complete the Python function given the prompt below:There are three horizontal wheels of letters stacked one on top of the other, all with the same number of columns. All wheels have one letter, either \u2018A\u2019, \u2018B\u2019 or \u2018C\u2019, in each of its columns on the edge of the wheel. You may rotate the wheels to adjust the positions of the letters. In a single rotation, you can rotate any single wheel to the right or to the left by one column. The wheels are round, of course, so the first column and last column are adjacent. \nYou would like to determine whether it is possible to rotate the wheels so that every column has three distinct letters across the three wheels, and if so, determine the minimum number of rotations required.\n-----Input-----\nThe input has exactly three lines. Each line has a string $s$ ($2 \\leq |s| \\leq 5 \\cdot 10^3$) consisting only of upper-case letters \u2018A\u2019, \u2018B\u2019 or \u2018C\u2019, describing the letters of one wheel in their initial positions. All three strings will be of the same length.\n-----Output-----\nOutput a single integer, which is the minimum number of rotations required, or $-1$ if it isn\u2019t possible.\n-----Examples-----\nSample Input 1:\nABC\nABC\nABC\nSample Output 1:\n2\nSample Input 2:\nABBBAAAA\nBBBCCCBB\nCCCCAAAC\nSample Output 2:\n3\n\ndef",
        "answer": "def wheel(s):\n    # Write your code here\n    return -1",
        "difficulty": "competition"
    },
    {
        "task_id": 3315,
        "prompt": "Complete the Python function given the prompt below:There are eight planets and one planetoid in the Solar system. It is not a well known fact that there is a secret planet S4 inhabited by small creatures similar to bears, their codename being Lodas. Although this fact is well hidden from the public, the association Savez sent a team lead by general Henrik to study the Lodas. It has been discovered that Lodas have the ability of teleportation and he wants to hire them in his army.\nOne Lod consists of $N$ strings where the $i$-th string is denoted by $x_ i$. Research has shown that the number of teleportations a Loda can make depends on one special subsequence (not necessarily consecutive) of these strings. Strings $x_ i$ and $x_ j$ ($i < j$) can both be in that sequence if and only if string $x_ j$ both starts with and ends with string $x_ i$. The number of teleportations a Loda can make is the length of the longest described subsequence.\nDetermine the number of teleportations.\n-----Input-----\nThe first line of input contains of the integer $N$, the number of strings. Each of the following $N$ lines contains one string consisting of uppercase letters of the English alphabet. The input data will be such that there will be less than two million characters in total.\n-----Output-----\nThe first and only line of output must contain the number of teleportations a Loda can make.\n-----Examples-----\nSample Input 1:\n5\nA\nB\nAA\nBBB\nAAA\nSample Output 1:\n3\nSample Input 2:\n5\nA\nABA\nBBB\nABABA\nAAAAAB\nSample Output 2:\n3\n\ndef",
        "answer": "def solve(N, x):\n    # your code here\n    return 0",
        "difficulty": "competition"
    },
    {
        "task_id": 3316,
        "prompt": "Complete the Python function given the prompt below:You and your friends are in New York and are planning to go see a broadway musical. Unfortunately, New York being New York, the tickets are just a tiny bit expensive. But one of the shows has a ticket lottery each night where impecunious people such as yourself have a chance to win the right to buy slightly less expensive tickets to good seats. \nThe lottery operates as follows. First, everyone interested enters the lottery. Then, $n$ lucky winners are drawn, and each of these is offered to buy up to $t$ tickets.\nGiven the number of people $p$ in your group (all of which entered the lottery) and the total number of people $m$ that entered the lottery, what is the probability that you will be able to get tickets for your entire group? Assume that the $n$ lucky winners are chosen uniformly at random from the $m$ people that entered the lottery, and that each person can win at most once.\n-----Input-----\nThe input consists of a single line containing four integers:\n - $1 \\le m \\le 1000$: the total number of people who entered the lottery.\n - $1 \\le n \\le m$: the total number of winners drawn.\n - $1 \\le t \\le 100$: the number of tickets each winner is allowed to buy.\n - $1 \\le p \\le m$: the number of people in your group.\n-----Output-----\nOutput a single line containing the probability that your entire group can get tickets to the show. This probability should be given with an absolute error of at most $10^{-9}$.\n-----Examples-----\nSample Input 1:\n100 10 2 1\nSample Output 1:\n0.1\nSample Input 2:\n100 10 2 2\nSample Output 2:\n0.1909090909\n\ndef",
        "answer": "def tickets(m, n, t, p):\n    return (m - p) / (m - n) * (t - 1)",
        "difficulty": "competition"
    },
    {
        "task_id": 3317,
        "prompt": "Complete the Python function given the prompt below:A brokerage firm is interested in detecting automatic trading. They believe that a particular algorithm repeats itself; that is, it makes the same sequence of trades at a later time. The firm has identified a set of 26 key stocks that they believe are likely to be traded in concert, and they\u2019ve encoded a series of trades as a string of letters: the letter itself indicates the stock, upper case indicates a buy, lower case indicates a sell. They want you to write a program to determine, for any two starting points, the longest sequence of identical trades from those two starting points, starting from and including those starting points as the first trade in the sequence.\n-----Input-----\nThere will be a single test case in the input. This test case will start with a string $s$ on the first line, consisting solely of upper case and lower case letters ($1 \\le \\text {length}(s) \\le 100000$). On the next line will be an integer $q$ ($1 \\le q \\le 100000$), indicating the number of queries. The following $q$ lines each describe a query with two integers, $i$ and $j$ ($0 \\le i < j < \\text {length}(s)$), which represent two zero-based positions in the string.\n-----Output-----\nFor each query, output a single integer, indicating the length of the longest sequence of trades starting at $i$ which is identical to the sequence of trades starting at $j$.\n-----Examples-----\nSample Input:\nABABABcABABAbAbab\n3\n0 2\n1 6\n0 7\nSample Output:\n4\n0\n5\n\ndef",
        "answer": "def longest_sequence(s, i, j):\n    if i == j:\n        return 1\n    if i > j:\n        return 0\n    if s[i] == s[j]:\n        return 2 + longest_sequence(s, i+1, j-1)\n    else:\n        return max(longest_sequence(s, i+1, j), longest_sequence(s, i, j-1))",
        "difficulty": "competition"
    },
    {
        "task_id": 3318,
        "prompt": "Complete the Python function given the prompt below:A cat lives in a tree that has $N$ nodes. She will demarcate her territory by \u201cmarking\u201d some of the tree nodes. Marked nodes may not be closer to each other than distance $D$, or the smell will be too overwhelming. Find the maximum number of nodes that the cat can mark.\n-----Input-----\nFirst line has two integers, $N$ and $D$. The $0$-th node is the root node of the tree. Then follows $N-1$ lines, the $i$-th of which contain a single integer $x_ i$ with $0 \\leq x_ i < i$ (starting with $i = 1$). This means that node $x_ i$ is connected to node $i$.\nWe always have $1 \\leq N, D \\leq 2 \\cdot 10^5$.\n-----Output-----\nOutput should contain one integer: the maximum number of nodes that can be marked.\n-----Examples-----\nSample Input:\n4 3\n0\n0\n1\nSample Output:\n2\n\ndef",
        "answer": "def cat_marking(N, D):\n    # Write your code here\n    pass",
        "difficulty": "competition"
    },
    {
        "task_id": 3319,
        "prompt": "Complete the Python function given the prompt below:Professor Braino Mars is one of the top researchers in the field of solar system creation. He runs various simulations to test out his theories on planet formation, but he\u2019s old school and all of these simulations are done by hand. It\u2019s time for Braino to enter the $21^{\\textrm{st}}$ century, and he\u2019s asked you to help automate his simulations.\nOne of Prof.\u00a0Mars\u2019 simulations models how small planetoids collide over time to form larger planets. To model this process he divides the space which the planetoids inhabit into an $n_ x \\times n_ y \\times n_ z$ grid of cubes, where each cube can hold at most one planetoid. Each planetoid has an initial mass $m$, an initial location $(x, y, z)$ in the grid and a velocity $(v_ x, v_ y, v_ z)$ indicating the number of cubes per second the planetoid travels through in each dimension. For example, if a planetoid is initially in location $(1, 3, 2)$ and has velocity $(3, -1, 2)$, then after $1$ second it will be in location $(4, 2, 4)$, after $2$ seconds it will be in location $(7, 1, 6)$, and so on. The planetoid paths wrap around in all dimensions, so if, for example, the planetoid described above resides in an $8\\times 8\\times 8$ space, its next two locations will be $(2, 0, 0)$ and $(5, 7, 2)$ (note that all cube indices start at $0$). When two or more planetoids collide, they form one larger planetoid which has a mass equal to the sum of the colliding planetoids\u2019 masses and a velocity equal to the average of the colliding velocities, truncating to the nearest integer. So if a planetoid of mass $12$ with velocity $(5, 3, -2)$ collides with another planetoid of mass $10$ and velocity $(8, -6, 1)$ the resulting planetoid has mass $22$ and velocity $(6, -1, 0)$ (these values correspond to the first sample input.) For simplicity, Prof.\u00a0Mars only considers collisions that happen at integer time steps, and when no more collisions are possible, the planetoids are then considered full-fledged planets.\nGiven an initial set of planetoids, Prof.\u00a0Mars is interested in determining how many planets will form and what their orbits are. Armed with your implementation of his model, he should now be able to answer these questions much more easily.\n-----Input-----\nThe input will start with a line containing four positive integers $n$ $n_ x$ $n_ y$ $n_ z$, where $n \\leq 100$ is the number of planetoids, and $n_ x$, $n_ y$ and $n_ z$ are the dimensions of the space the planetoids reside in, where $n_ x, n_ y, n_ z \\leq 1000$.\nAfter this are $n$ lines of the form $m$$x$ $y$ $z$ $v_ x$ $v_ y$$v_ z$, specifying the mass, initial location and initial velocity of each planetoid at time $t=0$, where $1 \\leq m \\leq 100$, $0\\leq x<n_ x, 0 \\leq y<n_ y, 0\\leq z<n_ z$, and $-1000 \\leq v_ x, v_ y, v_ z \\leq 1000$. No two planetoids will start in the same initial location.\n-----Output-----\nOutput an integer $p$ indicating the number of planets in the system after no more collisions can occur. After this output $p$ lines, one per planet, listing a planet identifier P$i$, $(0 \\leq i < p)$, the mass, location and velocity of each planet. Use the location of the planets at the time that the last collision occurred.\nIf no collisions occur, then use their location at time $t=0$.\nThe planets should be ordered from largest mass to smallest; break ties by using the lexicographic ordering of the $x,y,z$ location of the planet, starting with the smallest $x$ value.\n-----Examples-----\nSample Input:\n2 8 8 8\n12 4 1 4 5 3 -2\n10 1 2 1 8 -6 1\nSample Output:\n1\nP0: 22 1 4 2 6 -1 0\n\ndef",
        "answer": "def main():\n    n, m, x, y, z = map(int, raw_input().split())\n    planets = []\n    for i in range(n):\n        m, x, y, z = map(int, raw_input().split())\n        planets.append((m, x, y, z))\n    planets.sort(key=lambda p: p[1:])\n    planets.sort(key=lambda p: p[0], reverse=True)\n    planets.sort(key=lambda p: p[1:])\n    planets.sort(key=lambda p: p[0], reverse=True)\n    planets.sort(key=lambda p: p[1:])\n    planets.sort(key=lambda p: p[0], reverse=True)\n    planets.sort(key=lambda p: p[1:])\n    planets.sort(key=lambda p: p[0], reverse=True)\n    planets.sort(key=lambda p: p[1:])\n    planets.sort(key=lambda p: p[0], reverse=True)\n    planets.sort(key=lambda p: p[1:])\n    planets.sort(key=lambda p: p[0], reverse=True)\n    planets.sort(key=lambda p: p[1:])\n    planets.sort(key=lambda p: p[0], reverse=True)\n    planets.sort(key=lambda p: p[1:])\n    planets.sort(key=lambda p: p[0], reverse=True)\n    planets.sort(key=lambda p: p[1:])\n    planets.sort(key=lambda p: p[0], reverse=True)\n    planets.sort(key=lambda p: p[1:])\n    planets.sort(key=lambda p: p[0], reverse=True)\n    planets.sort(key=lambda p: p[1:])\n    planets.sort(key=lambda p: p[0], reverse=True)\n    planets.sort(key=lambda p: p[1:])\n    ",
        "difficulty": "competition"
    },
    {
        "task_id": 3320,
        "prompt": "Complete the Python function given the prompt below:There are $n$ cities in the Magical Island, numbered from $1$ to $n$. These cities are connected by $m$ bi-directional roads such that there exists a path between every pair of cities. There may be multiple roads between two cities. Each road has a positive length.\nMagical crystals are the most important resources transported between the cities in the Magical Island. The cost of sending one magical crystal from city $s$ to city $t$ equals the smallest distance of any path between city $s$ and city $t$. The distance of a path in the Magical Island is a bit special though: It is the bitwise OR value of all the road lengths on this path.\nIn each of the next $q$ days, exactly one magical crystal will be transported between a pair of cities. Help the Magical Island figure out the transportation cost for each day.\n-----Input-----\nThe first line contains two integers $n, m$ ($2\\leq n\\leq 10^5,1\\leq m\\leq n+200$). Each of the next $m$ lines contains three integers $a, b, w$ that describe a road connecting city $a$ and city $b$ with length $w$ ($1\\leq a, b\\leq n, a \\neq b, 1\\leq w \\leq 10^9$). In the next line, there is a single integer $q$ $(1\\leq q\\leq 10000)$, the number of days to consider. The next $q$ lines each have two integers $s$ and $t$ ($1\\leq s, t\\leq n, s \\neq t$). The $i$th line indicates that on day $i$ a crystal is sent from city $s$ to city $t$.\n-----Output-----\nFor each of the $q$ days, output the cost of sending the crystal from $s$ to $t$ for that day.\n-----Examples-----\nSample Input:\n4 7\n1 2 1\n1 2 3\n1 3 2\n1 4 1\n2 3 4\n2 4 4\n3 4 4\n3\n1 2\n1 3\n3 4\nSample Output:\n1\n2\n3\n\ndef",
        "answer": "def solve(n, m, q, roads):\n    roads = sorted(roads, key=lambda x: x[2])\n    graph = [[] for _ in range(n)]\n    for a, b, w in roads:\n        graph[a].append((b, w))\n        graph[b].append((a, w))\n    costs = [0] * n\n    for s, t in roads:\n        costs[s] += min(costs[t], costs[s])\n    for i in range(q):\n        s, t = map(int, input().split())\n        costs[s] += min(costs[t], costs[s])\n    return costs[1:]",
        "difficulty": "competition"
    },
    {
        "task_id": 3321,
        "prompt": "Complete the Python function given the prompt below:The Frog Regent has arranged his $N$ frog servants in a circle, with each frog facing the back of the next one. Each frog is assigned a unique integer identifier (ID) from the set of $1$ to $N$. The frog arrangement is specified as a sequence of IDs. The sequence always starts with the frog with the ID $1$. It is followed by the ID of the frog in front of it, then the ID of the next one, and so on until the ID of the last frog \u2013 the one behind the frog with ID $1$.\nA frog is considered to have made a single leap if it has jumped over the frog in front of it, swapping places with it in the process. For example, if the frogs are sequenced as \u201c1 5 4 3 2 6\u201d and the frog with ID $2$ makes two leaps, the resulting sequence will be \u201c1 2 5 4 3 6\u201d (the frog has shifted two places forward). When the Frog Regent proclaims the number $B$, the frog with ID $B$ makes $B$ leaps.\nThe Frog Regent wishes, using some number of proclamations, to rearrange the frogs from the starting sequence to his favourite resulting sequence. Given the starting and resulting frog sequences, write a program that will compute a sequence of proclamations needed for the Regent to rearrange the frogs into the resulting sequence. Naturally, the starting and resulting sequences will not be equal.\n-----Input-----\nThe first line of input contains a positive integer $N$, the number of frogs ($3 \\le N \\le 100$).\nThe second line of input contains a permutation of the first $N$ positive integers, the starting frog sequence.\nThe third line of input contains another permutation of the first $N$ positive integers, the resulting frog sequence.\n-----Output-----\nOutput any sequence of integers (one integer per line) that the Frog Regent can proclaim in order to rearrange the frogs into the resulting sequence.\nThe number of proclamations must not exceed $100000$.\nThe test data will be such that a solution exists.\n-----Examples-----\nSample Input:\n6\n1 5 4 3 2 6\n1 2 5 4 3 6\nSample Output:\n2\n\ndef",
        "answer": "def frog_regent(N, starting_sequence, resulting_sequence):\n    # Write your code here\n    pass",
        "difficulty": "competition"
    },
    {
        "task_id": 3322,
        "prompt": "Complete the Python function given the prompt below:You are hosting a fancy party for fancy friends. And, like any fancy party, you need to buy some fancy antiques to put up around the venue (your house).\nThere is a set of $n$ fancy antiques that you need to buy. And there is a set of $m$ fancy antique shops in the city. Because these antiques are extremely rare, each fancy antique can only be found at a single fancy antique shop. However, the fancy antique shops can also sell \u201cknock-off\u201d (duplicate) versions of some of the antiques. And of course, for any fancy antique, there is only a single fancy antique shop in the city that holds a knock-off version of that antique (this is to maintain the rareness of the antiques). The shop that sells the original is not always the same shop that holds the knock-off.\nIt turns out that even though you can tell the difference, most people cannot tell the original version from the knock-off version of any given antique. And, because the shops can get away with it, sometimes the knock-off is more expensive than the original! Since the party is tomorrow, you only have time to visit $k$ shops. You would like to buy one version (either the original or the knock-off) of each of the $n$ antiques.\nSuppose that there are three shops, and three antiques we would like to buy.\n - Antique $\\# 1$ sells for $30$ at shop $\\# 1$. Its knockoff sells for $50$ at shop $\\# 2$.\n - Antique $\\# 2$ sells for $70$ at shop $\\# 2$. Its knockoff sells for $10$ at shop $\\# 3$.\n - Antique $\\# 3$ sells for $20$ at shop $\\# 3$. Its knockoff sells for $80$ at shop $\\# 1$.\nSuppose you only have time to go to two shops. You can go to shops $1$ and $3$. You can buy the original of antique $1$ with cost $30$ at shop $1$, the original of antique $3$ with cost $20$ at shop $3$, and the knock-off of antique $2$ at shop $3$ with cost $10$. The total cost to buy these items is $60$, which is the minimum possible.\nIf you only have time to visit one shop, then it is impossible. You cannot buy a version of all three items by visiting a single shop.\nGiven the costs of the antiques/knock-offs at the shops, what is the minimum total cost to buy one version of each antique?\n-----Input-----\nEach input will consist of a single test case. Note that your program may be run multiple times on different inputs. The first line of input will consist of three space-separated integers: $n$, $m$, and $k$ ($1 \\le n \\le 100$, $1 \\le k \\le m \\le 40$). The next $n$ lines will each have four space separated integers, $a$, $p$, $b$ and $q$, describing an antique, where:\n - $a$ is the index of the shop that sells the original version of the antique ($1 \\le a \\le m$)\n - $p$ is the price of the original version of the antique at shop $a$ ($1 \\le p \\le 10^7$)\n - $b$ is the index of the shop that sells the knock-off version of the antique ($1 \\le b \\le m$)\n - $q$ is the price of the knock-off version of the antique at shop $b$ ($1 \\le q \\le 10^7$)\n-----Output-----\nIf it is possible to collect all of the antiques while visiting no more than $k$ stores, then output the minimum cost. If it is not possible, output $-1$.\n-----Examples-----\nSample Input:\n3 3 2\n1 30 2 50\n2 70 3 10\n3 20 1 80\nSample Output:\n60\n\ndef",
        "answer": "def minimum_cost(n, m, k, a, p, b, q):\n    # Write your code here\n    pass",
        "difficulty": "competition"
    },
    {
        "task_id": 3323,
        "prompt": "Complete the Python function given the prompt below:You are holding a party. In preparation, you are making a drink by mixing together three different types of fruit juice: Apple, Banana, and Carrot. Let\u2019s name the juices A, B and C.\nYou want to decide what fraction of the drink should be made from each type of juice, in such a way that the maximum possible number of people attending the party like it.\nEach person has a minimum fraction of each of the 3 juices they would like to have in the drink. They will only like the drink if the fraction of each of the 3 juices in the drink is greater or equal to their minimum fraction for that juice.\nDetermine the maximum number of people that you can satisfy.\n-----Input-----\n - One line containing an integer $T$, the number of test cases in the input file.\nFor each test case, there will be:\n - One line containing the integer $N$, the number of people going to the party.\n - $N$ lines, one for each person, each containing three space-separated numbers \u201c$A$ $B$ $C$\u201d, indicating the minimum fraction of each juice that would like in the drink. $A$, $B$ and $C$ are integers between $0$ and $10000$ inclusive, indicating the fraction in parts-per-ten-thousand. $A + B + C \\leq 10000$.\nYou may assume that $1 \\leq T \\leq 2$ and $1 \\leq N \\leq 5000$.\n-----Output-----\n - $T$ lines, one for each test case in the order they occur in the input file, each containing the string \u201cCase #$X$: $Y$\u201d where $X$ is the number of the test case, starting from 1, and $Y$ is the maximum number of people who will like your drink.\n-----Examples-----\nSample Input:\n2\n3\n10000 0 0\n0 10000 0\n0 0 10000\n3\n5000 0 0\n0 2000 0\n0 0 4000\nSample Output:\nCase #1: 1\nCase #2: 2\n\ndef",
        "answer": "def max_people(N, A, B, C):\n    return max(A, B, C)",
        "difficulty": "competition"
    },
    {
        "task_id": 3324,
        "prompt": "Complete the Python function given the prompt below:You have landed a lucrative contract with Amalgamated Chemical Manufacturing (ACM), to help their chemists with stoichiometry. Stoichiometry is the calculation of reactants and products in chemical reactions, based on the law of conservation of mass, which states that the total mass of the reactants equals the total mass of the products. The relations among quantities of reactants and products typically form a ratio of positive integers. If the amounts of the separate reactants are known, then the amount of the product can be calculated, and vice-versa. The relationship of reactants to products can be described using a soichiometric equation such as:\\begin{equation} \\rm {C H_4 + 2 O_2 \\rightarrow C O_2 + 2 H_2 O}, \\end{equation}\nwhich can be read as: \u201cOne molecule of $\\rm C H_4$ and two molecules of $\\rm O_2$ yield one molecule of $\\rm C O_2$ and two molecules of $\\rm H_2 O$.\u201d The total number of atoms of each element on the left hand side of the stoichiometric equation must match the number of atoms of that element on right hand side. Your task is to write a program that, given an equation of the form:\\begin{equation} \\rm {\\_ H_2 O + \\_ C O_2 \\rightarrow \\_ O_2 + \\_ C_6 H_{12} O_6}, \\label{exampleeq} \\end{equation}\nwill fill in the blanks to produce a balanced equation. For example, the above equation could be balanced as follows:\\begin{equation} \\rm {6H_2O + 6CO_2 \\rightarrow 6O_2 + 1C_6H_{12}O_6}. \\end{equation}\n-----Input-----\nAn equation is input in the form of a sequence of $M$ $(1 < M \\le 20)$ lines, one for each molecule in the formula (e.g., $\\rm {H_2 O}$ or $\\rm {CO_2}$). Each line $m$ ($1\\le m \\le M$) has the following fields:\\begin{equation*} sign_ m\\; \\; N_ m\\; \\; element_{m,1}\\; \\; count_{m,1}\\; \\; \\ldots \\; \\; element_{m,{N_ m}}\\; \\; count_{m,{N_ m}} \\end{equation*}\nwhere $sign_ m$ is either +1 or -1, with a sign of +1 indicating that this molecule appears on the left of the equation, and -1 indicating that it appears on the right. $N_ m$, where $0 < N_ m < 20$, is the number of $element$/$count$ pairs following on the line. Each $element_{m,n}$, where $1 \\le n \\le N_ m$, is an element name consisting of one or two upper or lowercase letters, and each $count_{m,n}$ is a positive integer, $1 \\leq count_{m,n} \\leq 12$. For example, the element/count pair \u201cFe 2\u201d indicates that the molecule contains two atoms of the element Fe (iron). There will be no more than 10 unique elements in a single equation.\nNote that an element may be repeated in a given line of input, as in\n+1 6 C 1 H 5 C 1 O 1 O 1 H 1\n which specifies that at least one molecule of $\\rm CH_5COOH$ appears on the left side of the equation. Note that $\\rm CH_5COOH$ can be written as $\\rm C_2H_6O_2$.\nInput ends with a line of the form\n0 0\n-----Output-----\nThe program must output the numbers $C_1,\\ldots,C_ M$ $(0<C_ i\\le 1000)$, in order, to fill in the blanks in the equation. Each number, $C_ m\\mid 1\\le m \\le M$, must be the minimum number for which the equation is balanced (i.e. there is no common factor that could reduce all of the $C_ m$ coefficients). You may assume that every input test case has exactly one valid solution meeting these criteria.\n-----Examples-----\nSample Input:\n+1 2 H 2 O 1\n+1 2 C 1 O 2\n-1 1 O 2\n-1 3 C 6 H 12 O 6\n0 0\nSample Output:\n6 6 6 1\n\ndef",
        "answer": "def balance(eq):\n    eq = eq.split(' ')\n    eq = [i for i in eq if i!= '']\n    eq = [i for i in eq if i!= '0']\n    eq = [i for i in eq if i!= '0']\n    eq = [i for i in eq if i!= '0']\n    eq = [i for i in eq if i!= '0']\n    eq = [i for i in eq if i!= '0']\n    eq = [i for i in eq if i!= '0']\n    eq = [i for i in eq if i!= '0']\n    eq = [i for i in eq if i!= '0']\n    eq = [i for i in eq if i!= '0']\n    eq = [i for i in eq if i!= '0']\n    eq = [i for i in eq if i!= '0']\n    eq = [i for i in eq if i!= '0']\n    eq = [i for i in eq if i!= '0']\n    eq = [i for i in eq if i!= '0']\n    eq = [i for i in eq if i!= '0']\n    eq = [i for i in eq if i!= '0']\n    eq = [i for i in eq if i!= '0']\n    eq = [i for i in eq if i!= '0']\n    eq = [i for i in eq if i!= '0']\n    eq = [i for i in eq if i!= '0']\n    eq = [i for i in eq if i!= '0']\n    eq = [i for i in eq if i!= '0']\n    eq = [i for i in eq if i!= '0']\n    eq = [i for i in eq if i!= '0']\n    eq = [i for i in eq if i!= '0']\n    eq = [i for i in eq if i!= '0']\n    eq = [i for i in eq if i!= '0']\n    eq = [i for i in eq if i!= '0']\n    eq = [i for i in eq if i!= '0']\n    eq = [i for",
        "difficulty": "competition"
    },
    {
        "task_id": 3325,
        "prompt": "Complete the Python function given the prompt below:You just bought an \u201cartistic\u201d aquarium tank that has an interesting shape, and you poured $L$ litres of water into the tank. How high is the water in the tank?\nWhen you look at this tank from one side, it has the shape of a convex polygon. This polygon has exactly two vertices on the table ($y$-coordinates are 0), and all other vertices have positive $y$-coordinates. There are also exactly two vertices with maximum $y$-coordinates, and water is poured into the opening between these two vertices. This aquarium tank has a depth of $D$ centimetres. The tank is glued to the table, so no matter what shape it has, it keeps its position and does not tip over.\nAll coordinates and lengths in this problem are given in centimetres. It should be noted that each cubic metre is equivalent to 1\u2009000 litres.\nAn illustration showing the configuration of the tank of the first sample input is given below:\n-----Input-----\nThe input consists of a single test case. The first line contains an integer $N$ ($4 \\leq N \\leq 100$) giving the number of vertices in the polygon. The next line contains two integers $D$ and $L$, where $1 \\le D \\le 1000$ is the depth of the aquarium tank and $0 \\le L \\le 2000$ is the number of litres of water to pour into the tank. The next $N$ lines each contains two integers, giving the $(x,y)$ coordinates of the vertices of the convex polygon in counterclockwise order. The absolute values of $x$ and $y$ are at most $1000$. You may assume that the tank has a positive capacity, and you never pour more water than the tank can hold.\n-----Output-----\nPrint the height of the water (in centimetres) in the aquarium tank on a line to 2 decimal places.\n-----Examples-----\nSample Input:\n4\n30 50\n20 0\n100 0\n100 40\n20 40\nSample Output:\n20.83\n\ndef",
        "answer": "def height(x, y, D, L):\n    return (D - y) / (x - y) * L",
        "difficulty": "competition"
    },
    {
        "task_id": 3326,
        "prompt": "Complete the Python function given the prompt below:You are given an $r\\! \\times \\! c$ grid. Each cell of this grid is filled with a number between $1$ and $r{\\cdot }c$ inclusive, and each cell\u2019s number is distinct.\nDefine a grid of numbers to be monotonic if each row and column is either increasing or decreasing (this can be different for each row or column).\nDefine a subgrid of the grid as follows: First choose some nonempty subset of the rows and columns. Next, take elements that lie in both the chosen rows and columns in the same order.\nThere are $(2^r{-}1)(2^c{-}1)$ nonempty subgrids of the given grid. Of these subgrids, count how many are monotonic.\nConsider this grid:$1$\u2003\u2003$2$\u2003\u2003$5$\n$7$\u2003\u2003$6$\u2003\u2003$4$\n$9$\u2003\u2003$8$\u2003\u2003$3$\nThere are nine $1{\\times }1$ subgrids, nine $1{\\times }2$\u2019s, three $1{\\times }3$\u2019s, nine $2{\\times }1$\u2019s, nine $2{\\times }2$\u2019s, three $2{\\times }3$\u2019s, three $3{\\times }1$\u2019s, three $3{\\times }2$\u2019s, and one $3{\\times }3$. They are all monotonic, for $9{+}9{+}3{+}9{+}9{+}3{+}3{+}3{+}1=49$ monotonic subgrids.\n-----Input-----\nEach test case will begin with a line with two space-separated integers $r$ and $c$ ($1\\! \\le \\! r,c\\! \\le \\! 20$), which are the dimensions of the grid.\nEach of the next $r$ lines will contain $c$ space-separated integers $x$ ($1\\! \\le \\! x\\! \\le \\! r{\\cdot }c$, all $x$\u2019s are unique). This is the grid.\n-----Output-----\nOutput a single integer, which is the number of monotonic subgrids in the given grid.\n-----Examples-----\nSample Input:\n3 3\n1 2 5\n7 6 4\n9 8 3\nSample Output:\n49\n\ndef",
        "answer": "def count_monotonic_subgrids(r, c, grid):\n    # Write your code here\n    pass",
        "difficulty": "competition"
    },
    {
        "task_id": 3327,
        "prompt": "Complete the Python function given the prompt below:The Imitation Game is a 2014 film based in 1939 during World War II. It follows the newly created British intelligence agency MI6 as they employ Cambridge mathematics alumnus Alan Turing to crack the German Enigma machine. At the time, cryptographers everywhere believed it to be uncrackable. By the end of the film, Turing and his team were able to successfully crack the Enigma, ultimately winning the war for the allies.\nIf you have seen the film, you would know that, brilliant as he is, Alan Turing didn\u2019t crack the code on his own. He employed help from his group of carefully selected colleagues. But how exactly did he select them? He placed crosswords puzzles all over Great Britain in the hopes that other brilliant minds would be able to solve them to qualify as candidates for his challenging project.\nThose who solved his crosswords were given a special test to further evaluate their candidacy. Turing\u2019s crosswords were extremely befuddling, but you are smart enough to figure out the words from the clues alone. However, you\u2019re not really a spatial thinker, so you need some help positioning them onto the grid. Thanks to the help of modern day computing, perhaps you too can consider yourself worthy to become part of his famous team.\nGiven an empty crossword puzzle and a scrambled list of all of the solutions to the clues, your task is to position them appropriately on the grid. Like all typical crosswords, words are only valid when read left-right or up-down. Words must start/end either on the edge of the grid or beside a void space.\n-----Input-----\nThe first line of input consists of two space-separated integers, $R$ and $C$ ($1 \\leq R, C \\leq 21$), specifying the number of rows and columns in the crossword grid.\n$R$ line follow, each of which consists of $C$ characters, specifying the grid for the unsolved crossword. Within this grid, a \u201c#\" character represents a void space (i.e. a space where no letters may be placed) and a \u201c.\" character represents an empty space, where a letter should be placed.\nThe next line consists of a single integer $N$ ($1 \\leq N \\leq 200$).\n$N$ lines follow, each of which consists of a single string of at least length $2$, consisting of only uppercase letters from \u201cA\" to \u201cZ\". These lines, given in no particular order, specify every word of the crossword solution that must be placed either horizontally or vertically on the grid.\n-----Output-----\nPrint an $R$ by $C$ grid consisting of the solved crossword.\n You may assume that there will be exactly one solution in every test case.\n-----Examples-----\nSample Input:\n1 15\n##.........####\n1\nCROSSWORD\nSample Output:\n##CROSSWORD####\n\ndef",
        "answer": "def solveCrossword(grid, words):\n\t# Write your code here\n\tpass",
        "difficulty": "competition"
    },
    {
        "task_id": 3328,
        "prompt": "Complete the Python function given the prompt below:Mirko received an $N \\times N$ table for his birthday, where a non-negative integer is written in each field of the table. Unfortunately, the written numbers are too large for Mirko\u2019s taste, so he will place $K$ dominoes on top of the table that will cover the fields that are too large. More precisely, Mirko places the dominoes according to the following rules:\n - each domino covers two fields of the table that are adjacent in a row or in a column,\n - the dominoes do not overlap (but can touch),\n - the sum of all visible (uncovered) fields needs to be as small as possible.\nIt is your task to determine the required minimal sum of visible fields. The test data will be such that it will always be possible to place $K$ dominoes without overlapping.\n-----Input-----\nThe first line of input contains the integers $N$ ($1 \\leq N \\leq 2000$), the dimensions of the table, and $K$ ($1 \\leq K \\leq 8$), the number of dominoes. Each of the following $N$ lines contains $N$ integers from the interval $[0, 1000]$. These $N \\times N$ numbers describe Mirko\u2019s table.\n-----Output-----\nThe first and only line of output must contain the minimal sum of visible fields after covering the table with dominoes.\n-----Examples-----\nSample Input:\n3 1\n2 7 6\n9 5 1\n4 3 8\nSample Output:\n31\n\ndef",
        "answer": "def domino_cover(table, k):\n    # your code here\n    return",
        "difficulty": "competition"
    },
    {
        "task_id": 3329,
        "prompt": "Complete the Python function given the prompt below:One nice summer day while Mirko was drinking lemonade in his room...\n\u201cBig brother!\u201d, yells Stanko.\n\u201cI wonder sometimes which of the two of us is the big one. What is it?\u201d, Mirko asked.\n\u201cListen carefully! In the backyard I have $N$ pebbles arranged in a circle. Some of the pebbles are black, some are white. I will do the following: between any two neighbouring pebbles of the same colour I will insert a black pebble, and between any two neighbouring pebbles of different colours I will insert a white pebble. At that point there will be $2N$ pebbles in the circle, so I will remove the starting $N$ pebbles so that only the newly added $N$ pebbles remain. And all this I intend to do exactly $K$ times. And then you are to determine my starting circle.\u201d, said Stanko long-windedly.\n\u201cHa! I shall not fall prey to your trickery! I can see that it is not necessarily possible to know exactly what the starting circle was, but I can count the number of distinct starting circles that give the same result as your circle after exactly $K$ of those weird transformations of yours\u201d, answered Mirko.\nYou are given the configuration of the circle before Stanko performed the transformation described above $K$ times.\nWrite a program that determines the number of distinct starting circles that give the same circle after $K$ transformations as Stanko\u2019s original circle does after $K$ transformations.\nTwo configurations of pebbles are considered to be the same circle if one can be gotten from the other by rotating it any number of positions. For example BBW and BWB is the same circle whereas BBWWBW and WWBBWB are not.\n-----Input-----\nThe first line of input contains two integers $N$ and $K$, $3 \\le N \\le 100$, $1 \\le K \\le 10$, where $N$ is the number of pebbles in the circle and $K$ is the number of transformations made by Stanko. The second line contains exactly $N$ characters \u2018B\u2019 or \u2018W\u2019 representing Stanko\u2019s original circle.\n-----Output-----\nOutput the number of possible distinct starting circles on a single line.\n-----Examples-----\nSample Input:\n3 1\nBBW\nSample Output:\n2\n\ndef",
        "answer": "def find_start_circle(pebbles, K):\n    # Write your code here\n    pass",
        "difficulty": "competition"
    },
    {
        "task_id": 3330,
        "prompt": "Complete the Python function given the prompt below:Young Mr. Potato is opening two new stores where he will, you guessed it, sell potatoes. Mr. Potato gets his potatoes from $N$ farmers. Each farmer offers exactly $a_ i$ potatoes per bag for a total price of $c_ i$. Mr. Potato is going to buy all bags of potatoes from all farmers and place the bags in his two stores.\nLet\u2019s denote the average potato price in the first store with $P_1$, and the average potato price in the second store with $P_2$. The average potato price in a store is equal to the ratio of the price and the total number of potatoes in the store. Taking into account logistical difficulties and the amount of potatoes in the stores, he wants the product of the average prices of potatoes in the stores to be minimal. In other words, he wants the product of $P_1$ and $P_2$ to be minimal.\nAfter Mr. Potato settles on a division of bags in the stores, at least one store must have exactly $L$ bags.\n-----Input-----\nThe first line of input contains two integers $N$ and $L$ ($2 \\leq N \\leq 100$, $1 \\leq L < N$), the number of potato bags and the number of potato bags in at least one store. The second line of input contains $N$ integers $a_ i$ ($1 \\leq a_ i \\leq 100$), separated by space. The third line of input contains $N$ integers $c_ i$ ($1 \\leq c_ i \\leq 1000000$), separated by space. The sum of all $a_ i$ will be at most $500$.\n-----Output-----\nThe first and only line of output must contain the minimal product of $P_1$ and $P_2$ from the task. An answer correct up to three decimal places will be accepted.\n-----Examples-----\nSample Input:\n3 1\n3 2 1\n1 2 3\nSample Output:\n0.556\n\ndef",
        "answer": "def solve(N, L, a, c):\n    return 0",
        "difficulty": "competition"
    },
    {
        "task_id": 3331,
        "prompt": "Complete the Python function given the prompt below:When Farmer Oskar doesn\u2019t watch his cows closely enough, they tend to wander off into the forest to hunt for horse spies. To catch an enemy agent horse, the cows lure it into a cow trail and set up fences at the endpoints of the trail, which are $L$ meters apart. Two previously hidden cows then reveal themselves, having concealed themselves in nearby bushes \u2013 and the chase is on! The cows are located at positions $A$ and $B$ meters from the left endpoint.\nOne particular horse (positioned $P$ meters from the left endpoint) who they attempted to catch remembered to bring her walkie-talkie and have now called for backup. The backup will arrive to rescue her very soon, so she wonders for how long she can hold the cows off.\nHorse chasing happens in $1$ minute steps. During each minute, the following steps happen in order:\n - The cows choose to move either $0$ or $1$ meters, in any direction.\n - The horse jumps either $0$, $1$, or $2$ meters in any direction. However, if a cow occupies the same position as the horse, she can only jump a single meter since she now must jump over the cow.\n - If there is a cow in the same position as the horse, the cows capture her.\nHow long will it take for the horse to be captured, assuming both she and the cows move optimally?\n-----Input-----\nThe first and only line of input contains four integers $1 \\le L \\le 1000$, $0 \\le A \\le L$, $0 \\le B \\le L$, $0 \\le P \\le L$ separated by spaces, the meanings of which are described in the statement.\nThe numbers $A$, $B$ and $P$ are all distinct.\n-----Output-----\nA single integer, the number of minutes before the cows can catch the horse no matter how the horse moves.\n-----Examples-----\nSample Input:\n5 4 3 2\nSample Output:\n3\n\ndef",
        "answer": "def cow_chase(L, A, B, P):\n    # Write your code here\n    pass",
        "difficulty": "competition"
    },
    {
        "task_id": 3332,
        "prompt": "Complete the Python function given the prompt below:Victor works for Alberta Chemicals Monitoring (ACM). ACM is a company that analyses raw environmental data related to chemicals used in oil sand and other industries in Alberta, and produces some reports for environmental watchdogs.\nVictor is in charge of a multi-processor cluster in ACM. Each processor is connected to a dedicated special purpose output generation unit (OGU). This cluster receives several raw data streams from field sensors and assigns each stream to a processor. Each processor performs some real time processing on a data stream and immediately after its termination, produces a report using its OGU.\nEach stream has an integer starting time $s$, an integer duration $d$ and a priority $p$. This stream is active in the interval $[s, s+d)$ (right-open interval). The report of each stream must be produced immediately after its termination; otherwise, it will be useless. An OGU creates a report extremely fast, so you can assume that an OGU produces this report instantly.\nIn the past, at any instance of time, the number of data streams were not more than the number of processors and OGUs. So, Victor could process all data streams. Unfortunately, recently, in a suspicious power surge, all OGUs burnt out. Victor was able to salvage one OGU by using parts from the other OGUs. Now, he can no longer produce a report for all data streams and needs to choose a subset of them based on the priorities assigned to them. To handle access to this OGU, Victor restructured the cluster architecture as follows. When a stream starts, the system either admits or rejects it. If it admits a stream, the unique identifier of the processor assigned to this stream is pushed onto the stack. Only a processor having its identifier on top of the stack can use the OGU to produce its report. After production of the report, the processor identifier is popped from the stack. It should be noted that if some streams start at the same time, he can push their processor identifier in any order of his choice. Now, Victor needs your help to choose a subset of streams such that their reports can be generated with this single OGU. The total priority of the streams in the chosen subset should be maximized.\n-----Input-----\nThe input consists of a single test case. The first line contains an integer $n$, where $n$ ($1 \\le n \\le 5000$) is the number of data streams. Each of the next $n$ lines contains three integers $s_ i$, $d_ i$, $p_ i$ ($1 \\le s_ i,d_ i \\le 10^9$, $0 \\le p_ i \\le 100000$) describing one data stream, where $s_ i$ is its start time, $d_ i$ is the duration of the stream, and $p_ i$ is its priority. Note that the cluster has at least $5000$ processors.\n-----Output-----\nDisplay the maximum total priority of a subset of streams such that their reports can be generated with the architecture described above using a single OGU.\n-----Examples-----\nSample Input:\n4\n1 3 6\n2 5 8\n3 3 5\n5 3 6\nSample Output:\n13\n\ndef",
        "answer": "def ACM(n, streams):\n    # your code here\n    return",
        "difficulty": "competition"
    },
    {
        "task_id": 3333,
        "prompt": "Complete the Python function given the prompt below:\u201cWeeeee,\u201d says the fox after breaking in to the roost and killing all the chickens. Then he realizes that he has killed way more chickens then he can eat right now and hence he decides to hide them in already existing hiding spots nearby. The fox can only carry two hens at a time and every hiding spot can fit at most one. As he is already tired after all the killing, he wants you to compute the minimum distance he has to walk to hide all of the dead chickens.\n-----Input-----\nThe first line of input gives the position of the roost as two real numbers $x$ and $y$ on a single line. The next line contains an integer $1 \\leq N \\leq 20$, giving the number of hiding spots and dead chickens. Then follow $N$ lines, each line consisting of two real numbers giving the coordinates of a hiding spot. All coordinate values are between $0$ and $1000$ and given with $6$-digit precision.\n-----Output-----\nA single line with a floating point number, the minimum distance the fox has to walk to hide all the chickens. Any answer with an error of at most $10^{-6}$ will be judged as correct.\n-----Examples-----\nSample Input:\n10.000000 20.123456\n1\n13.141593 20.123456\nSample Output:\n3.141593\n\ndef",
        "answer": "def fox(x,y,n,h):\n    fox = 0\n    for i in range(n):\n        fox += abs(x-h[i][0]) + abs(y-h[i][1])\n    return fox",
        "difficulty": "competition"
    },
    {
        "task_id": 3334,
        "prompt": "Complete the Python function given the prompt below:Optimistan is a strange country. It is situated on an island with a huge desert in the middle, so most people live in port towns along the coast. As the name suggests, people of Optimistan (also called Optimists) like to optimise everything, so they only built roads necessary to connect all port towns together and not a single extra road. That means that there is only one way to get from one port town to another without visiting the same place twice.\nThe government installed multi-directional distance signs in $1$-kilometre intervals on one side of the road, to provide important information to drivers. Thus whenever you go from one port town to another, you pass the first sign at the port town and then one each kilometre. Every distance sign contains the shortest distances to all port towns, each written on a separate small sign directed towards the goal town.\nThe signs also serve another important function: to guide drivers on intersections. This means that distance of each intersection from every port town is an integer number of kilometres.\nYou bought a tourist guide of Optimistan which does not have a map of the country, but it contains a huge table with the shortest distances between all pairs of port towns. You quickly calculated the average shortest distance between all pairs of port towns, but then you started wondering: if the signs also contained shortest distances to all other signs, what would be the average number written on a sign? Could this be calculated just from the distance table in the tourist guide?\n-----Input-----\nThe input consists of:\n - one line with an integer $n$ ($2 \\le n \\le 500$), the number of ports;\n - $n-1$ lines, the $i$th of which contains $n-i$ integers. The $j$th integer on the $i$th line denotes the distance between port $i$ and port $i+j$ in kilometres. Each distance is between $1$ and $10^6$ (inclusive).\nYou can assume that the distances correspond to a road network in which there is exactly one path between two port towns that does not visit the same place twice. All roads can be used in both directions.\n-----Output-----\nOutput one line with the average distances in kilometres between all pairs of distance signs in Optimistan. Your answer should have an absolute or relative error of at most $10^{-9}$.\nIf it is impossible to determine the exact average of distances between all pairs of distance signs in Optimistan, output \u201cimpossible\u201d.\n-----Examples-----\nSample Input:\n3\n4 4\n2\nSample Output:\n2.13333333333333\n\ndef",
        "answer": "def solution(n, d):\n    if n == 1:\n        return 0\n    if n == 2:\n        return d[0]\n    if n == 3:\n        return (d[0] + d[1]) / 2\n    if n == 4:\n        return (d[0] + d[1] + d[2]) / 3\n    if n == 5:\n        return (d[0] + d[1] + d[2] + d[3]) / 4\n    if n == 6:\n        return (d[0] + d[1] + d[2] + d[3] + d[4]) / 5\n    if n == 7:\n        return (d[0] + d[1] + d[2] + d[3] + d[4] + d[5]) / 6\n    if n == 8:\n        return (d[0] + d[1] + d[2] + d[3] + d[4] + d[5] + d[6]) / 7\n    if n == 9:\n        return (d[0] + d[1] + d[2] + d[3] + d[4] + d[5] + d[6] + d[7]) / 8\n    if n == 10:\n        return (d[0] + d[1] + d[2] + d[3] + d[4] + d[5] + d[6] + d[7] + d[8]) / 9\n    if n == 11:\n        return (d[0] + d[1] + d[2] + d[3] + d[4] + d[5] + d[6] + d[7] + d[8] + d[9]) / 10\n    if n == 12:\n        return (d[0] + d[1] + d[2] + d[3] + d[4] + d[5] + d[6] + d[7] + d[8] + d[9] + d[10]) / 11\n    if n == 13:\n        return (d[0] + d[1] + d[2",
        "difficulty": "competition"
    },
    {
        "task_id": 3335,
        "prompt": "Complete the Python function given the prompt below:Simon Haples is a somewhat peculiar person. Not quite hip, not quite square, he is more of a triangular nature: ever since childhood, he has had an almost unhealthy obsession with triangles. Because of his discrete nature, Simon\u2019s favorite kind of triangles are the Pythagorean ones, in which the side lengths are three positive integers $a$, $b$, and $c$ such that $a \\le b$ and $a^2 + b^2 = c^2$. \nRecently, Simon has discovered the fantastic world of counting modulo some integer $n$. As you may imagine, he quickly realizes that there are multitudes of Pythagorean triples to which he has previously been oblivious! Simon therefore sets out to find all Pythagorean triples modulo $n$, i.e., all triples of integers $a$, $b$ and $c$ between $1$ and $n-1$ such that $a \\le b$ and $a^2 + b^2 \\equiv c^2 \\pmod{n}$.\nAs Simon\u2019s best friend, you realize that there is not much hope in deterring Simon from his crazy plans, so you decide to help him by computing how many such triples there are, so that Simon will know when his work is done.\n-----Input-----\nThe input consists of a single integer $n$, satisfying $2 \\le n \\le 500000$.\n-----Output-----\nOutput the number of Pythagorean triples modulo $n$.\n-----Examples-----\nSample Input:\n7\nSample Output:\n18\n\ndef",
        "answer": "def pythagoreanTriples(n):\n    count = 0\n    for a in range(1, n):\n        for b in range(a, n):\n            c = n - a - b\n            if a**2 + b**2 == c**2:\n                count += 1\n    return count",
        "difficulty": "competition"
    },
    {
        "task_id": 3336,
        "prompt": "Complete the Python function given the prompt below:Frank N. Stein is a very conservative high-school teacher. He wants to take some of his students on an excursion, but he is afraid that some of them might become couples. While you can never exclude this possibility, he has made some rules that he thinks indicates a low probability two persons will become a couple:\n - Their height differs by more than $40$ cm.\n - They are of the same sex.\n - Their preferred music style is different.\n - Their favourite sport is the same (they are likely to be fans of different teams and that would result in fighting).\nSo, for any two persons that he brings on the excursion, they must satisfy at least one of the requirements above. Help him find the maximum number of persons he can take, given their vital information.\n-----Input-----\nThe first line of input consists of an integer $1 \\le N \\le 1000$ giving the number of pupils. Next there will be one line for each pupil consisting of four space-separated data items:\n - an integer $h$ ($0 \\le h \\le 3000$) giving the height in cm;\n - a character \u2018F\u2019 for female or \u2018M\u2019 for male;\n - a string describing the preferred music style;\n - a string with the name of the favourite sport.\nThe strings in the input are of length at at least $1$ and at most $20$ characters, and contain only upper and lower case letters, digits, and dashes.\n-----Output-----\nFor each test case in the input there should be one line with an integer giving the maximum number of eligible pupils.\n-----Examples-----\nSample Input:\n4\n35 M classicism programming\n0 M baroque skiing\n43 M baroque chess\n30 F baroque soccer\nSample Output:\n3\n\ndef",
        "answer": "def count_eligible_pupils(n):\n    return n",
        "difficulty": "competition"
    },
    {
        "task_id": 3337,
        "prompt": "Complete the Python function given the prompt below:Mirko is playing with stacks. In the beginning of the game, he has an empty stack denoted with number $0$. In the $i$-th step of the game he will choose an existing stack denoted with $v$, copy it and do one of the following actions:\n - place number $i$ on top of the new stack\n - remove the number from the top of the new stack\n - choose another stack denoted with $w$ and count how many different numbers exist that are in the new stack and in the stack denoted with $w$\nThe newly created stack is denoted with $i$.\nMirko doesn\u2019t like to work with stacks so he wants you to write a program that will do it for him. For each operation of type 2 output the number removed from stack and for each operation of type 3 count the required numbers and output how many of them there are.\n-----Input-----\nThe first line of input contains the integer $N$ ($1 \\leq N \\leq 300000$), the number of steps in Mirko\u2019s game.\nThe steps of the game are chronologically denoted with the first $N$ integers.\nThe $i$-th of the following $N$ lines contains the description of the $i$-th step of the game in one of the following three forms:\n - a v for an operation of type 1.\n - b v for an operation of type 2.\n - c v w for an operation of type 3.\nThe first character in the line denotes the type of operation and the following one or two denote the accompanying stack labels that will always be integers from the interval $[0, i - 1]$.\nFor each operation of type 2, the stack we are removing the element from will not be empty.\n-----Output-----\nFor each operation type 2 or 3 output the required number, each in their own line, in the order the operations were given in the input.\n-----Examples-----\nSample Input:\n5\na 0\na 1\nb 2\nc 2 3\nb 4\nSample Output:\n2\n1\n2\n\ndef",
        "answer": "def stack_game(n):\n    stack = [0]\n    for i in range(n):\n        if i == 0:\n            stack.append(i)\n        elif i == 1:\n            stack.append(i)\n        elif i == 2:\n            stack.append(i)\n        elif i == 3:\n            stack.append(i)\n        elif i == 4:\n            stack.append(i)\n        elif i == 5:\n            stack.append(i)\n        elif i == 6:\n            stack.append(i)\n        elif i == 7:\n            stack.append(i)\n        elif i == 8:\n            stack.append(i)\n        elif i == 9:\n            stack.append(i)\n        elif i == 10:\n            stack.append(i)\n        elif i == 11:\n            stack.append(i)\n        elif i == 12:\n            stack.append(i)\n        elif i == 13:\n            stack.append(i)\n        elif i == 14:\n            stack.append(i)\n        elif i == 15:\n            stack.append(i)\n        elif i == 16:\n            stack.append(i)\n        elif i == 17:\n            stack.append(i)\n        elif i == 18:\n            stack.append(i)\n        elif i == 19:\n            stack.append(i)\n        elif i == 20:\n            stack.append(i)\n        elif i == 21:\n            stack.append(i)\n        elif i == 22:\n            stack.append(i)\n        elif i == 23:\n            stack.append(i)\n        elif i == 24:\n            stack.append(i)\n        elif i == 25:\n            stack.append(i)\n        elif i == 26:\n            stack.append(i)\n        elif i == 27:\n            stack.append(i)\n        elif i == 28:\n            stack.append(i)\n        elif i == 29:\n            stack.append(i",
        "difficulty": "competition"
    },
    {
        "task_id": 3338,
        "prompt": "Complete the Python function given the prompt below:In the rhythm game Arcaea, the player can play songs with various partners. Every partner has two skill levels: Frag, and Step. A larger Frag allows playing songs to earn a larger number of fragments, the main resource of the game. A larger Step helps the player progress faster in the World Mode that unlocks new songs and game stories. Some of the partners can optionally be awakened. After being awakened, a partner\u2019s Frag and Step both reach a higher level.\nA keen player of Arcaea is likely to have obtained many partners. But as one can only be accompanied by one partner when playing songs, partners with higher Frag and Step values are generally favored. We say a partner $x$ is more favorable than another partner $y$, if $x$\u2019s Frag value is strictly larger than $y$\u2019s Frag value, and $x$\u2019s Step value is strictly larger than $y$\u2019s Step value. Additionally, for a set $S$ of partners we define $d(S)$, the diversity of $S$, to be the maximum number of partners one can choose from $S$, so that no chosen partner is more favorable than another chosen partner.\nSeine is an Arcaea player who has a set $S$ of $n$ unawakened partners. Seine wants to choose at most $k$ partners to awaken to maximize $d(S)$. What is the maximum $d(S)$ she can achieve?\n-----Input-----\nThe first line of the input has two integers $n$ and $k$ ($1 \\leq k \\leq n \\leq 2000$). The next $n$ lines each have four integers $g, p, g_ a, p_ a$ to describe one partner\u2019s skill levels. The first two integers $g, p$ are the partner\u2019s Frag and Step values before being awakened ($1 \\leq g, p \\leq 10^9$). The last two integers $g_ a, p_ a$ are zeroes if the partner cannot be awakened. Otherwise $g_ a, p_ a$ give the partner\u2019s new Frag and Step values after being awakened, and it is guaranteed that $g < g_ a \\leq 10^9$ and $p < p_ a \\leq 10^9$.\n-----Output-----\nOutput the maximum $d(S)$ Seine can achieve, if she can awaken up to $k$ partners. Note that Seine may choose to not awaken any partner.\n-----Note-----\nArcaea is created and developed by Lowiro Limited. Lowiro does not endorse and has no involvement with the ProgNova contest.\n-----Examples-----\nSample Input:\n6 1\n78 61 88 71\n80 80 90 90\n70 90 80 100\n90 70 0 0\n80 67 0 0\n90 63 0 0\nSample Output:\n5\n\ndef",
        "answer": "def d(S):\n    d = 0\n    for i in S:\n        for j in S:\n            if i[0] > j[0] and i[1] > j[1]:\n                d += 1\n    return d",
        "difficulty": "competition"
    },
    {
        "task_id": 3339,
        "prompt": "Complete the Python function given the prompt below:Evenland used to be a normal country. Then Steven became ruler and now everything must be done as he wishes. For some odd reason he is obsessed with the number two. Everything must be even in his country, hence he even changed the name to Evenland. \nThe other day, Steven was driving through his country when he noticed that, at some intersections, an odd number of roads meet. Naturally, some roads must now be destroyed in order to make the number of roads even at every intersection.\nYou are in charge of this project. You start wondering: in how many ways can this project be carried out? In other words, in how many ways can you select a set of roads to destroy so that all intersections become even? The resulting road network does not have to be connected, so for instance, one possible way is to destroy all roads.\n-----Input-----\nThe first line of the input contains two integers $N$ and $M$, where $1\\leq N, M\\leq 100000$. $N$ denotes the number of intersections in Evenland and $M$ is the number of roads. $M$ lines follow, each contains two space separated integers $a$, $b$ indicating that there is a road between intersections $a$ and $b$. You may assume that $1\\leq a, b\\leq N$ and $a\\not= b$. There might be more than one road connecting a pair of intersections.\n-----Output-----\nOutput one line with one integer \u2013 the number of ways of making all intersections even. Since this number might be big, output the remainder modulo $1000000009$.\n-----Examples-----\nSample Input:\n4 5\n1 2\n1 3\n1 4\n2 3\n2 4\nSample Output:\n4\n\ndef",
        "answer": "def evenland(n, m):\n    # Write your code here",
        "difficulty": "competition"
    },
    {
        "task_id": 3340,
        "prompt": "Complete the Python function given the prompt below:The airline company NCPC Airways has flights to and from $n$ cities, numbered from 1 to $n$, around the entire world. However, they only have $n - 1$ different flights (operating in both directions), so in order to travel between any two cities you might have to take several flights. In fact, since the management has made sure that it\u2019s possible to travel between any pair of cities, there is exactly one set of flights a passenger have to take in order to travel between two cities (assuming you want to use the same airline).\nRecently many of NCPC Airways frequent flyers have complained that they have had to change flights too often to get to their final destination. Since NCPC Airways doesn\u2019t want to loose their customers to other airline companies, but still keep the nice property of their flights, they have decided to cancel one of their current flights and replace it with another flight. Help the company by writing a program which finds the best flight to cancel and the best new flight to add so that the maximum number of flight changes a passenger might have to make when travelling between any pair of cities in which NCPC Airways operates is minimized.\nThe input will be constructed so that it is always possible to improve the maximum number of flight changes needed.\n-----Input-----\nThe first line in the input contains the integer $n$ ($4 \\leq n \\leq 2500$), the number of cities NCPC Airways operates in. Then follow $n - 1$ lines specifying the flights. Each flight is given as a pair of cities $a$ and $b$ ($1 \\le a, b \\le n$).\n-----Output-----\nThe output should consist of three lines. The first line should contain an integer, the minimum number of flights needed to take when travelling between any pair of cities after changing one of the flights. The second line should contain two integers, specifying the two cities between which the flight should be canceled. The third line should contain two integers, specifying the two cities where a new flight should be added.\nIf there are more than one optimal solution, any one of them will be accepted.\n-----Examples-----\nSample Input:\n4\n1 2\n2 3\n3 4\nSample Output:\n2\n3 4\n2 4\n\ndef",
        "answer": "def find_best_flight(n, flights):\n    flights = sorted(flights, key=lambda x: x[0])\n    flights = sorted(flights, key=lambda x: x[1])\n    flights = sorted(flights, key=lambda x: x[0] - x[1])\n    flights = sorted(flights, key=lambda x: x[1] - x[0])\n    flights = sorted(flights, key=lambda x: x[0] - x[1])\n    flights = sorted(flights, key=lambda x: x[1] - x[0])\n    flights = sorted(flights, key=lambda x: x[0] - x[1])\n    flights = sorted(flights, key=lambda x: x[1] - x[0])\n    flights = sorted(flights, key=lambda x: x[0] - x[1])\n    flights = sorted(flights, key=lambda x: x[1] - x[0])\n    flights = sorted(flights, key=lambda x: x[0] - x[1])\n    flights = sorted(flights, key=lambda x: x[1] - x[0])\n    flights = sorted(flights, key=lambda x: x[0] - x[1])\n    flights = sorted(flights, key=lambda x: x[1] - x[0])\n    flights = sorted(flights, key=lambda x: x[0] - x[1])\n    flights = sorted(flights, key=lambda x: x[1] - x[0])\n    flights = sorted(flights, key=lambda x: x[0] - x[1])\n    flights = sorted(flights, key=lambda x: x[1] - x[0])\n    flights = sorted(flights, key=lambda x: x[0] - x[1])\n    flights = sorted(flights, key=lambda x: x[1] - x[0])\n    flights = sorted(flights, key=lambda x: x[0] -",
        "difficulty": "competition"
    },
    {
        "task_id": 3341,
        "prompt": "Complete the Python function given the prompt below:In this problem you will be solving one of the most profound challenges of humans across the world since the beginning of time \u2013 how to make lots of money.\nYou are a middleman in the widget market. Your job is to buy widgets from widget producer companies and sell them to widget consumer companies. Each widget consumer company has an open request for one widget per day, until some end date, and a price at which it is willing to buy the widgets. On the other hand, each widget producer company has a start date at which it can start delivering widgets and a price at which it will deliver each widget.\nDue to fair competition laws, you can sign a contract with only one producer company and only one consumer company. You will buy widgets from the producer company, one per day, starting on the day it can start delivering, and ending on the date specified by the consumer company. On each of those days you earn the difference between the producer\u2019s selling price and the consumer\u2019s buying price.\nYour goal is to choose the consumer company and the producer company that will maximize your profits.\n-----Input-----\nThe first line of input contains two integers $m$ and $n$ ($1 \\leq m, n \\leq 500000$) denoting the number of producer and consumer companies in the market, respectively. It is followed by $m$ lines, the $i^{\\text {th}}$ of which contains two integers $p_ i$ and $d_ i$ ($1 \\leq p_ i, d_ i \\leq 10^9$), the price (in dollars) at which the $i^{\\text {th}}$ producer sells one widget and the day on which the first widget will be available from this company. Then follow $n$ lines, the $j^{\\text {th}}$ of which contains two integers $q_ j$ and $e_ j$ ($1 \\leq q_ j, e_ j \\leq 10^9$), the price (in dollars) at which the $j^{\\text {th}}$ consumer is willing to buy widgets and the day immediately after the day on which the last widget has to be delivered to this company.\n-----Output-----\nDisplay the maximum total number of dollars you can earn. If there is no way to sign contracts that gives you any profit, display 0.\n-----Examples-----\nSample Input:\n2 2\n1 3\n2 1\n3 5\n7 2\nSample Output:\n5\n\ndef",
        "answer": "def max_profit(m, n, p, d, q, e):\n    profit = 0\n    for i in range(m):\n        for j in range(n):\n            if p[i] - q[j] > profit:\n                profit = p[i] - q[j]\n    return profit",
        "difficulty": "competition"
    },
    {
        "task_id": 3342,
        "prompt": "Complete the Python function given the prompt below:Oskar really loves onions. Unfortunately, the onions he loves belong to the local vegetable farmer, L\u00f6kas Tomatcek. Since Oskar is very cheap, he simply steals L\u00f6kas\u2019 onions from the large, convex, onion field. For obvious reasons, L\u00f6kas does not approve of this. Rather than going to the police, however, L\u00f6kas wants to raise a high-energy laser fence around the onions to replace his wooden fence. \nAs laser fences are rather expensive, L\u00f6kas can only afford to upgrade $K$ of the fence posts to laser fence posts. If a set of posts are upgraded, the lasers will protect all the onions lying strictly within the convex hull of the selected fence posts. This may not be all of the onions though. L\u00f6kas wonders which posts he should upgrade if he wants to protect as many of his $N$ onions as possible.\nThe original fence has the shape of a convex polygon with $M$ fence posts as vertices, and all the onions lie strictly within the fence.\n-----Input-----\nThe first line of input consists of three space-separated integers $3 \\le N \\le 10000$, $3 \\le M \\le 400$ and $3 \\le K \\le 400$. These are the number of onions, the number of old fence posts, and the number of fence posts L\u00f6kas can upgrade.\nThen follow $N$ lines with two space-separated integers $0 \\le X_ i, Y_ i \\le 10^9$ each. $(X_ i, Y_ i)$ gives the coordinate of the $i$-th onion.\nThen follow $M$ lines with two space-separated integers $0 \\le A_ i, B_ i \\le 10^9$ each. $(A_ i, B_ i)$ gives the coordinate of the $i$-th fence post.\nThe fence posts will be given in clockwise order of the old fence. No three fence posts will lie on a line.\n-----Output-----\nOutput should be a single integer; the maximum number of onions L\u00f6kas can protect.\n-----Examples-----\nSample Input:\n3 5 3\n1 1\n2 2\n1 3\n0 0\n0 3\n1 4\n3 3\n3 0\nSample Output:\n2\n\ndef",
        "answer": "def max_onions(N, M, K):\n    # Write your code here\n    pass",
        "difficulty": "competition"
    },
    {
        "task_id": 3343,
        "prompt": "Complete the Python function given the prompt below:\u017dofka is bending a copper wire. She starts with a straight wire placed on the table with the starting point glued to the middle of the table. She then repeatedly picks a point on the wire and bends the part starting at that point (away from the starting point) by $90$ degrees (either clockwise or counterclockwise). Throughout the process the starting point stays glued to the middle of the table.\nThe most important consideration is that she does not want the wire to touch itself as she bends it (that would summon the wire ghost). She needs your help. She has a list of points together with the direction at each point (clockwise or counterclockwise). She wants to know if bending the wire at the listed points in the given order would cause the wire ghost to appear at any time during the process.\n-----Input-----\nThe first line contains two integers $L$ and $n$ where $L$ is the length of the wire and $n$ is the number of points. Each of the next $n$ lines contains a number from $\\{ 0,\\dots,L\\} $ (describing the point on the wire) followed by W (clockwise) or C (counter clockwise). You may assume $L\\leq 100000000$ and $n\\leq 1000$.\n-----Output-----\nThe output consists of a single line consisting of the string GHOST if the wire would touch itself during the bending, and the string SAFE otherwise.\n-----Examples-----\nSample Input:\n4 3\n3 C\n2 C\n1 C\nSample Output:\nGHOST\n\ndef",
        "answer": "def isSafe(x,y):\n    if x<0 or x>=L or y<0 or y>=L:\n        return False\n    if (x,y) in visited:\n        return False\n    return True",
        "difficulty": "competition"
    },
    {
        "task_id": 3344,
        "prompt": "Complete the Python function given the prompt below:Johan has a really boring job at the airport. It is his duty to make sure no bags collide when sliding onto the circular conveyor belt in the luggage pick-up zone. All pieces of luggage are loaded onto a straight conveyer belt which ends above the circular conveyor belt. Johan is then manually varying the speed of the straight conveyor so that no collisions occur. He would rather set a constant speed so that he can go to the fika room. There is a sensor at the start of the long conveyor belt so that he can get the positions of all pieces of luggage into his computer. Now all he needs is a program giving him the maximum speed that will avoid all collisions.\nThe circular conveyor belt moves at a constant speed of $1$\u00a0m/s. If a piece of luggage is dropped on the circular belt within one meter of the position of another piece of luggage they may collide, so this should be avoided. Some bags might be picked up on the first round, but you can not know in advance which will be left. The straight conveyor can be set to any speed between $0.1$\u00a0m/s and $10$\u00a0m/s.\n-----Input-----\nThe first line of input contains two positive integers $N$ and $L$ ($1 \\leq N \\leq L \\leq 1000$), where $N$ is the number of pieces of luggage and $L$ is the length of the circular conveyor belt in meters. The second line contains $N$ unique space-separated numbers $x_ i$ ($0 \\leq x_ i \\leq 1000$) with two digits after the decimal point, denoting luggage positions in meters.\n-----Output-----\nOutput the maximum speed $v$ in m/s ($0.1 \\leq v \\leq 10$) that makes sure no collisions will occur, or \u201cno fika\u201d if there is no such speed. The answer is considered correct if it has an absolute error of at most $10^{-9}$.\nYou may assume that when an optimal $v$ exists, each speed in the interval $[v - 10^{-9}, v]$ will also be a valid speed.\n-----Examples-----\nSample Input:\n2 3\n0.00 2.00\nSample Output:\n2\n\ndef",
        "answer": "def fika(n, l, x):\n    v = 0\n    for i in x:\n        if i > v:\n            v = i\n    return v",
        "difficulty": "competition"
    },
    {
        "task_id": 3345,
        "prompt": "Complete the Python function given the prompt below:Despite the unfortunate incident last summer, which resulted in ten little puppies, you have been tasked with taking care of your neighbors\u2019 dogs again. Shadow and Lydia may be very cute mutts, but this year you have strict instructions to walk them one by one. However, you have other things to do during the summer than walking dogs! Like playing fetch and solving programming problems! It seems terribly inefficient to walk the dogs one at a time. \nShadow and Lydia have a particular walk they each prefer and know by heart. If you just let them out, they will follow their favorite walk, eventually ending up in their respective doghouses. Problem solved!\nSadly, you realize that if you just let both dogs out at the same time and let them do their walks on their own, they might get too close to each other. If they get too close, they will leave their favorite walk to \u201chave some fun\u2019\u2019 and you are not sure you can find good homes for any more puppies. To ensure this does not happen, you need to calculate the minimum distance between the dogs when they are out walking on their own.\nBoth dogs start at the same time and keep exactly the same pace. Immediately after a dog arrives at its doghouse it stays inside and goes to sleep, so we no longer need to worry about the distance to the other dog, even though the other dog may still walk for a while longer. Note that a dog is still awake at the exact moment of entering its house and falls asleep immediately after entering.\n-----Input-----\nThe first line of input consists of an integer $n$ ($2 \\le n \\le 100000$), the number of points describing the walk of Shadow. The next $n$ lines contain $2$ integers each, giving the $x$ and $y$ coordinates of Shadow\u2019s walk. Two consecutive points in the walk always differ in at least one coordinate. All coordinates are non-negative and at most $10000$. Similarly, the next line contains an integer $m$ ($2 \\le m \\le 100000$), the number of points describing the walk of Lydia. The next $m$ lines describe its walk in the same format as for Shadow.\n-----Output-----\nOutput the minimum distance between the two dogs during their walks. The numbers should be accurate to an absolute or relative error of at most $10^{-4}$.\n-----Examples-----\nSample Input:\n2\n0 0\n10 0\n2\n30 0\n15 0\nSample Output:\n10\n\ndef",
        "answer": "def min_distance(x1, y1, x2, y2):\n    return abs(x1 - x2) + abs(y1 - y2)",
        "difficulty": "competition"
    },
    {
        "task_id": 3346,
        "prompt": "Complete the Python function given the prompt below:Per is repairing roads. The job is concentrated on roads with one lane in each direction. Thus, when Per closes down the lane in one direction, all traffic has to go through the other lane. This is done by allowing only one direction of travel at any time. Per is often assigned the task of directing the traffic through this lane.\nNo car drives before being given a \u201cgo\u201d signal from Per, and all the cars drive through the maintained segment at the same speed. Because there is only one lane, cars in one direction must leave the segment before cars in the other direction can enter. For safety reasons, cars driving in the same direction have to keep a distance of at least $3$\u00a0seconds between each other.\nFor example, if cars A and B arrive at the west endpoint at second $10$, Per can let them go at earliest second $10$ and $13$ in the order they arrived. If it, in this example, takes $8$ seconds to pass and car C arrives at the east endpoint at second $17$, then car C has to wait $4$ seconds until Per lets it go at second $21$.\nThere is a problem of drivers getting irritated with Per; they think they have to stop for too long. Per has been logging how long they can bear to wait before they get irritated. One day, to be able to evaluate his work, Per noted down when the cars arrived at the two endpoints of the segment. Per\u2019s question is the following: what is the least number of drivers that can be irritated? We assume that a driver gets irritated if the time between the moment he arrives at the maintained segment and the moment he is actually given the \u201cgo\u201d exceeds his irritation time limit.\n-----Input-----\nThe first line of the input contains two integers $t$ and $n$ ($4 \\leq t \\leq 180$ and $1\\leq n\\leq 250$), where $t$ is the time in seconds needed for a car to pass the segment under maintenance, and $n$ is the total number of cars arriving at the segment. The following $n$ lines describe the cars. The $i$-th line contains the description of the $i$-th car in the following format:\n - one character $d$, being W for cars arriving at the west endpoint of the segment, and E for the ones that arrive at the east endpoint; and\n - two integers $a$ and $r$ ($0 \\leq a < 86400$ and $0 \\leq r \\leq 3600$), where $a$ denotes the arrival time in seconds after midnight, and $r$ denotes the time in seconds it takes for the driver to get irritated.\nThe cars arrive in the order specified in the input and they cannot overtake each other. In particular, a car whose driver is already irritated has to stay in the queue until eventually receiving the \u201cgo\u201d and passing the maintained segment.\n-----Output-----\nOutput one line with the least possible number of irritated drivers.\n-----Examples-----\nSample Input:\n8 3\nW 10 0\nW 10 3\nE 17 4\nSample Output:\n0\n\ndef",
        "answer": "def solution(t, n):\n    # Write your code here\n    pass\n",
        "difficulty": "competition"
    },
    {
        "task_id": 3347,
        "prompt": "Complete the Python function given the prompt below:You may have heard of the lost city of Atlantis. As legend goes, Atlantis was a city of great wealth and power. Then the Gods became displeased with Atlantis and sank it into the ocean. What you may not have heard is the story of Demetrios, the only person in Atlantis with a ship at the time the city was pushed underwater.\nDemetrios was an incredibly selfish man and thought of only one thing when he noticed the water level in the city rising: collecting the wealth of accessible gold in Atlantis and transporting it into his ship before the treasure was lost forever. Luckily for Demetrios, when the water level began rising, the many guards keeping safe the gold stores abandoned their posts to seek safety.\nDemetrios knows the location of every gold store in Atlantis and how long it will take him to get to a particular store and back to his ship. He also knows the altitude at which each gold store resides, which determines when the store will be swallowed by the rising sea. The trouble is that he\u2019s not sure he\u2019ll have time to make it to every store before they become submerged. He now wonders the maximum number of stores he can visit prior to their respective submersion, if he picks his schedule optimally.\nDuring the 2017 NCNA Regional, the following clarification was posted: \u201cImportant: The gold store must remain above water during the ENTIRE trip to and from the store.\u201d\n-----Input-----\nThe first line of input will contain the integer $n$, ($1 \\leq n \\leq 200000$), the number of gold stores in Atlantis. The next $n$ lines will contain two integers on each line, $t_ i$ and $h_ i$, ($1 \\leq t_ i, h_ i \\leq 10^9$), the round-trip time in seconds it will take Demetrios to visit store $i$ and return to his ship with the gold, and the feet above sea level of store $i$, respectively.\n-----Output-----\nOutput the maximum number of gold stores Demetrios can visit such that each is visited prior to it becoming submerged. Assume sea level rises by one foot every second, starts at height $0$, and begins rising immediately.\n-----Examples-----\nSample Input:\n5\n5 8\n5 6\n3 4\n5 13\n6 10\nSample Output:\n3\n\ndef",
        "answer": "def gold_store(n, t, h):\n    # Write your code here\n    pass",
        "difficulty": "competition"
    },
    {
        "task_id": 3348,
        "prompt": "Complete the Python function given the prompt below:Ylva loves bonbons, probably more than anything else on this planet. She loves them so much that she made a large plate of $R \\cdot C$ bonbons for her fikaraster1.\nYlva has a large wooden tray which can fit $R$ rows of $C$ bonbons per row, that she will put the bonbons on. Her bonbons have three different fillings: Nutella Buttercream, Red Wine Chocolate Ganache, and Strawberry Whipped Cream. Since Ylva is a master chocolatier, she knows that presentation is $90\\% $ of the execution. In particular, it looks very bad if two bonbons of the same color are adjacent to each other within a row or a column on the tray. We call an arrangement of bonbons where this is never the case a good arrangement.\nGiven the number of bonbons of each flavour, and the size of Ylva\u2019s tray, can you help her find a good arrangement of the bonbons, or determine that no such arrangement exists?\n-----Input-----\nThe first line of input contains the two space-separated integers $2 \\le R, C \\le 1000$. The next line contains three non-negative space-separated integers $a, b, c$ \u2013 the number of bonbons of the three flavours which Ylva has baked. It is guaranteed that $a + b + c = R \\cdot C$. Both $R$ and $C$ will be even.\n-----Output-----\nIf no good arrangement can be found, output impossible. Otherwise, output $R$ lines, each containing $C$ characters, representing a good arrangement. Each row should contain only characters A, B, C, depending on which flavour should be placed on a certain position. The number of A bonbons placed must be equal to $A$, and so on.\n-----Examples-----\nSample Input:\n4 4\n10 3 3\nSample Output:\nimpossible\n\ndef",
        "answer": "def find_good_arrangement(R, C, a, b, c):\n    # Write your code here\n    pass",
        "difficulty": "competition"
    },
    {
        "task_id": 3349,
        "prompt": "Complete the Python function given the prompt below:NVWLS, or \u201cNo Vowels\u201d puzzles are popular among puzzle enthusiasts. For example, consider the following no-vowels message:\nBTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN\nwhich is inscribed on the famous \u201cKryptos\u201d statue located at the CIA\u2019s headquarters in Virginia. This message is derived from the following sentence by removing all vowels and spaces:\nBETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT\nLIES THE NUANCE OF IQLUSION\nGiven a dictionary (a set of words that can be used to construct a sentence) and a message (which comes from a sentence which uses only those words, but with all vowels and spaces removed), reconstruct the original sentence using the dictionary words!\n-----Input-----\nThe first line contains an integer $n$ denoting the number of words in the dictionary. The next $n$ lines each contain a dictionary word using one or more uppercase English letters. Each word contains at least one consonant.\nFor the purposes of this problem, the letters A, E, I, O, and U are vowels and all other letters are consonants.\nThe dictionary is followed by a single non-empty line of uppercase consonants representing the no-vowels message. It is guaranteed that the no-vowels message can be constructed in at least one way using only the dictionary words.\nThe total number of letters in all dictionary words is no greater than $100000$. The total number of letters in the no-vowels message does not exceed $300000$.\n-----Output-----\nOutput a whitespace-separated sequence of dictionary words that yields the original no-vowels message when all spaces and vowels are removed. If there are multiple reconstructions, choose the one with the largest overall number of vowels. If there are still multiple reconstructions, you may output any one of them. No judge input will require your program to output more than $15000000$ characters.\n-----Examples-----\nSample Input:\n11\nBETWEEN\nSUBTLE\nSHADING\nAND\nTHE\nABSENCE\nOF\nLIGHT\nLIES\nNUANCE\nIQLUSION\nBTWNSBTLSHDNGNDTHBSNCFLGHTLSTHNNCFQLSN\nSample Output:\nBETWEEN SUBTLE SHADING AND THE ABSENCE OF LIGHT LIES THE NUANCE OF IQLUSION\n\ndef",
        "answer": "def noVowels(dict, msg):\n    vowels = 'AEIOU'\n    msg = msg.upper()\n    msg = msg.replace(' ', '')\n    msg = msg.replace('\\n', '')\n    msg = msg.replace('\\t', '')\n    msg = msg.replace('\\r', '')\n    msg = msg.replace('\\f', '')\n    msg = msg.replace('\\v', '')\n    msg = msg.replace('\\a', '')\n    msg = msg.replace('\\b', '')\n    msg = msg.replace('\\x0b', '')\n    msg = msg.replace('\\x0c', '')\n    msg = msg.replace('\\x0e', '')\n    msg = msg.replace('\\x0f', '')\n    msg = msg.replace('\\x10', '')\n    msg = msg.replace('\\x11', '')\n    msg = msg.replace('\\x12', '')\n    msg = msg.replace('\\x13', '')\n    msg = msg.replace('\\x14', '')\n    msg = msg.replace('\\x15', '')\n    msg = msg.replace('\\x16', '')\n    msg = msg.replace('\\x17', '')\n    msg = msg.replace('\\x18', '')\n    msg = msg.replace('\\x19', '')\n    msg = msg.replace('\\x1a', '')\n    msg = msg.replace('\\x1b', '')\n    msg = msg.replace('\\x1c', '')\n    msg = msg.replace('\\x1d', '')\n    msg = msg.replace('\\x1e', '')\n    msg = msg.replace('\\x1f', '')\n    msg = msg.replace('\\x20', '')\n    msg = msg.replace('\\x21', '')\n    msg = msg.replace('\\x22', '')\n    msg = msg.replace('\\x23', '')\n    msg = msg.replace('\\x24', '')\n    msg = msg.replace('\\x",
        "difficulty": "competition"
    },
    {
        "task_id": 3350,
        "prompt": "Complete the Python function given the prompt below:Casting spells is the least understood technique of dealing with real life. Actually, people find it quite hard to distinguish between real spells like \u201cabrahellehhelleh\u201d (used in the battles and taught at the mage universities) and screams like \u201crachelhellabracadabra\u201d (used by uneducated witches for shouting at cats). Finally, the research conducted at the Unheard University showed how one can measure the power of a word (be it a real spell or a scream). It appeared that it is connected with the mages\u2019 ability to pronounce words backwards. (Actually, some singers were burned at the stake for exactly the same ability, as it was perceived as demonic possession.) Namely, the power of a word is the length of the maximum subword of the form $ww^Rww^R$ (where $w$ is an arbitrary sequence of characters and $w^R$ is $w$ written backwards). If no such subword exists, then the power of the word is $0$. For example, the power of abrahellehhelleh is $12$ as it contains hellehhelleh and the power of rachelhellabracadabra is $0$. Note that the power of a word is always a multiple of $4$.\n-----Input-----\nThe input is a single line containing a word of length $3 \\cdot 10^5$, consisting of (large or small) letters of the English alphabet.\n-----Output-----\nYou should output one integer $k$, the power of the word.\n-----Examples-----\nSample Input:\nabrahellehhelleh\nSample Output:\n12\n\ndef",
        "answer": "def power(word):\n    return len(max(re.findall('(.)\\\\1', word), key=len))",
        "difficulty": "competition"
    }
]