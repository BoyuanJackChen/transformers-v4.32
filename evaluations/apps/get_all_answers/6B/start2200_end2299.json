[
    {
        "task_id": 2200,
        "prompt": "Complete the Python function given the prompt below:Bimokh is Mashmokh's boss. For the following n days he decided to pay to his workers in a new way. At the beginning of each day he will give each worker a certain amount of tokens. Then at the end of each day each worker can give some of his tokens back to get a certain amount of money. The worker can save the rest of tokens but he can't use it in any other day to get more money. If a worker gives back w tokens then he'll get $\\lfloor \\frac{w \\cdot a}{b} \\rfloor$ dollars. \nMashmokh likes the tokens however he likes money more. That's why he wants to save as many tokens as possible so that the amount of money he gets is maximal possible each day. He has n numbers x_1, x_2,..., x_{n}. Number x_{i} is the number of tokens given to each worker on the i-th day. Help him calculate for each of n days the number of tokens he can save.\n-----Input-----\nThe first line of input contains three space-separated integers n, a, b\u00a0(1 \u2264 n \u2264 10^5;\u00a01 \u2264 a, b \u2264 10^9). The second line of input contains n space-separated integers x_1, x_2,..., x_{n}\u00a0(1 \u2264 x_{i} \u2264 10^9).\n-----Output-----\nOutput n space-separated integers. The i-th of them is the number of tokens Mashmokh can save on the i-th day.\n-----Examples-----\nInput\n5 1 4\n12 6 11 9 1\nOutput\n0 2 3 1 1 \nInput\n3 1 2\n1 2 3\nOutput\n1 0 1 \nInput\n1 1 1\n1\nOutput\n0\n\ndef",
        "answer": "def solve():\n\tn, a, b = map(int, input().split())\n\tx = list(map(int, input().split()))\n\tx.sort()\n\tt = 0\n\tfor i in range(n):\n\t\tt += (x[i] * a) // b\n\tprint(t)",
        "difficulty": "interview"
    },
    {
        "task_id": 2201,
        "prompt": "Complete the Python function given the prompt below:Johnny drives a truck and must deliver a package from his hometown to the district center. His hometown is located at point 0 on a number line, and the district center is located at the point d.\nJohnny's truck has a gas tank that holds exactly n liters, and his tank is initially full. As he drives, the truck consumes exactly one liter per unit distance traveled. Moreover, there are m gas stations located at various points along the way to the district center. The i-th station is located at the point x_{i} on the number line and sells an unlimited amount of fuel at a price of p_{i} dollars per liter. Find the minimum cost Johnny must pay for fuel to successfully complete the delivery.\n-----Input-----\nThe first line of input contains three space separated integers d, n, and m (1 \u2264 n \u2264 d \u2264 10^9, 1 \u2264 m \u2264 200 000)\u00a0\u2014 the total distance to the district center, the volume of the gas tank, and the number of gas stations, respectively.\nEach of the next m lines contains two integers x_{i}, p_{i} (1 \u2264 x_{i} \u2264 d - 1, 1 \u2264 p_{i} \u2264 10^6)\u00a0\u2014 the position and cost of gas at the i-th gas station. It is guaranteed that the positions of the gas stations are distinct.\n-----Output-----\nPrint a single integer\u00a0\u2014 the minimum cost to complete the delivery. If there is no way to complete the delivery, print -1.\n-----Examples-----\nInput\n10 4 4\n3 5\n5 8\n6 3\n8 4\nOutput\n22\nInput\n16 5 2\n8 2\n5 1\nOutput\n-1\n-----Note-----\nIn the first sample, Johnny's truck holds 4 liters. He can drive 3 units to the first gas station, buy 2 liters of gas there (bringing the tank to 3 liters total), drive 3 more units to the third gas station, buy 4 liters there to fill up his tank, and then drive straight to the district center. His total cost is 2\u00b75 + 4\u00b73 = 22 dollars.\nIn the second sample, there is no way for Johnny to make it to the district center, as his tank cannot hold enough gas to take him from the latest gas station to the district center.\n\ndef",
        "answer": "def min_cost(d, n, m):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2202,
        "prompt": "Complete the Python function given the prompt below:Rebel spy Heidi has just obtained the plans for the Death Star from the Empire and, now on her way to safety, she is trying to break the encryption of the plans (of course they are encrypted \u2013 the Empire may be evil, but it is not stupid!). The encryption has several levels of security, and here is how the first one looks.\nHeidi is presented with a screen that shows her a sequence of integers A and a positive integer p. She knows that the encryption code is a single number S, which is defined as follows:\nDefine the score of X to be the sum of the elements of X modulo p.\nHeidi is given a sequence A that consists of N integers, and also given an integer p. She needs to split A into 2 parts such that:   Each part contains at least 1 element of A, and each part consists of contiguous elements of A.  The two parts do not overlap.  The total sum S of the scores of those two parts is maximized. This is the encryption code. \nOutput the sum S, which is the encryption code.\n-----Input-----\nThe first line of the input contains two space-separated integer N and p (2 \u2264 N \u2264 100 000, 2 \u2264 p \u2264 10 000) \u2013 the number of elements in A, and the modulo for computing scores, respectively.\nThe second line contains N space-separated integers which are the elements of A. Each integer is from the interval [1, 1 000 000].\n-----Output-----\nOutput the number S as described in the problem statement.\n-----Examples-----\nInput\n4 10\n3 4 7 2\nOutput\n16\nInput\n10 12\n16 3 24 13 9 8 7 5 12 12\nOutput\n13\n-----Note-----\nIn the first example, the score is maximized if the input sequence is split into two parts as (3, 4), (7, 2). It gives the total score of $(3 + 4 \\operatorname{mod} 10) +(7 + 2 \\operatorname{mod} 10) = 16$.\nIn the second example, the score is maximized if the first part consists of the first three elements, and the second part consists of the rest. Then, the score is $(16 + 3 + 24 \\operatorname{mod} 12) +(13 + 9 + 8 + 7 + 5 + 12 + 12 \\operatorname{mod} 12) = 7 + 6 = 13$.\n\ndef",
        "answer": "def solution(A, p):\n    # write your code in Python 2.7\n    return sum(map(lambda x: x % p, A))\n",
        "difficulty": "interview"
    },
    {
        "task_id": 2203,
        "prompt": "Complete the Python function given the prompt below:Amr bought a new video game \"Guess Your Way Out! II\". The goal of the game is to find an exit from the maze that looks like a perfect binary tree of height h. The player is initially standing at the root of the tree and the exit from the tree is located at some leaf node.\nLet's index all the nodes of the tree such that   The root is number 1  Each internal node i (i \u2264 2^{h} - 1 - 1) will have a left child with index = 2i and a right child with index = 2i + 1 \nThe level of a node is defined as 1 for a root, or 1 + level of parent of the node otherwise. The vertices of the level h are called leaves. The exit to the maze is located at some leaf node n, the player doesn't know where the exit is so he has to guess his way out! \nIn the new version of the game the player is allowed to ask questions on the format \"Does the ancestor(exit, i) node number belong to the range [L, R]?\". Here ancestor(v, i) is the ancestor of a node v that located in the level i. The game will answer with \"Yes\" or \"No\" only. The game is designed such that it doesn't always answer correctly, and sometimes it cheats to confuse the player!.\nAmr asked a lot of questions and got confused by all these answers, so he asked you to help him. Given the questions and its answers, can you identify whether the game is telling contradictory information or not? If the information is not contradictory and the exit node can be determined uniquely, output its number. If the information is not contradictory, but the exit node isn't defined uniquely, output that the number of questions is not sufficient. Otherwise output that the information is contradictory.\n-----Input-----\nThe first line contains two integers h, q (1 \u2264 h \u2264 50, 0 \u2264 q \u2264 10^5), the height of the tree and the number of questions respectively.\nThe next q lines will contain four integers each i, L, R, ans (1 \u2264 i \u2264 h, 2^{i} - 1 \u2264 L \u2264 R \u2264 2^{i} - 1, $\\text{ans} \\in \\{0,1 \\}$), representing a question as described in the statement with its answer (ans = 1 if the answer is \"Yes\" and ans = 0 if the answer is \"No\").\n-----Output-----\nIf the information provided by the game is contradictory output \"Game cheated!\" without the quotes.\nElse if you can uniquely identify the exit to the maze output its index. \nOtherwise output \"Data not sufficient!\" without the quotes.\n-----Examples-----\nInput\n3 1\n3 4 6 0\nOutput\n7\nInput\n4 3\n4 10 14 1\n3 6 6 0\n2 3 3 1\nOutput\n14\nInput\n4 2\n3 4 6 1\n4 12 15 1\nOutput\nData not sufficient!\nInput\n4 2\n3 4 5 1\n2 3 3 1\nOutput\nGame cheated!\n-----Note-----\nNode u is an ancestor of node v if and only if   u is the same node as v,  u is the parent of node v,  or u is an ancestor of the parent of node v. \nIn the first sample test there are 4 leaf nodes 4, 5, 6, 7. The first question says that the node isn't in the range [4, 6] so the exit is node number 7.\nIn the second sample test there are 8 leaf nodes. After the first question the exit is in the range [10, 14]. After the second and the third questions only node number 14 is correct. Check the picture below to fully understand.\n[Image]\n\ndef",
        "answer": "def find_exit(h, q):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2204,
        "prompt": "Complete the Python function given the prompt below:Vladimir would like to prepare a present for his wife: they have an anniversary! He decided to buy her exactly $n$ flowers.\nVladimir went to a flower shop, and he was amazed to see that there are $m$ types of flowers being sold there, and there is unlimited supply of flowers of each type. Vladimir wants to choose flowers to maximize the happiness of his wife. He knows that after receiving the first flower of the $i$-th type happiness of his wife increases by $a_i$ and after receiving each consecutive flower of this type her happiness increases by $b_i$. That is, if among the chosen flowers there are $x_i > 0$ flowers of type $i$, his wife gets $a_i + (x_i - 1) \\cdot b_i$ additional happiness (and if there are no flowers of type $i$, she gets nothing for this particular type).\nPlease help Vladimir to choose exactly $n$ flowers to maximize the total happiness of his wife.\n-----Input-----\nThe first line contains the only integer $t$ ($1 \\leq t \\leq 10\\,000$), the number of test cases. It is followed by $t$ descriptions of the test cases.\nEach test case description starts with two integers $n$ and $m$ ($1 \\le n \\le 10^9$, $1 \\le m \\le 100\\,000$), the number of flowers Vladimir needs to choose and the number of types of available flowers.\nThe following $m$ lines describe the types of flowers: each line contains integers $a_i$ and $b_i$ ($0 \\le a_i, b_i \\le 10^9$) for $i$-th available type of flowers.\nThe test cases are separated by a blank line. It is guaranteed that the sum of values $m$ among all test cases does not exceed $100\\,000$.\n-----Output-----\nFor each test case output a single integer: the maximum total happiness of Vladimir's wife after choosing exactly $n$ flowers optimally.\n-----Example-----\nInput\n2\n4 3\n5 0\n1 4\n2 2\n5 3\n5 2\n4 2\n3 1\nOutput\n14\n16\n-----Note-----\nIn the first example case Vladimir can pick 1 flower of the first type and 3 flowers of the second type, in this case the total happiness equals $5 + (1 + 2 \\cdot 4) = 14$.\nIn the second example Vladimir can pick 2 flowers of the first type, 2 flowers of the second type, and 1 flower of the third type, in this case the total happiness equals $(5 + 1 \\cdot 2) + (4 + 1 \\cdot 2) + 3 = 16$.\n\ndef",
        "answer": "def max_happiness(n, m, a, b):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2205,
        "prompt": "Complete the Python function given the prompt below:People in the Tomskaya region like magic formulas very much. You can see some of them below.\nImagine you are given a sequence of positive integer numbers p_1, p_2,..., p_{n}. Lets write down some magic formulas:$q_{i} = p_{i} \\oplus(i \\operatorname{mod} 1) \\oplus(i \\operatorname{mod} 2) \\oplus \\cdots \\oplus(i \\operatorname{mod} n)$$Q = q_{1} \\oplus q_{2} \\oplus \\ldots \\oplus q_{n}$\nHere, \"mod\" means the operation of taking the residue after dividing.\nThe expression $x \\oplus y$ means applying the bitwise xor (excluding \"OR\") operation to integers x and y. The given operation exists in all modern programming languages. For example, in languages C++ and Java it is represented by \"^\", in Pascal \u2014 by \"xor\".\nPeople in the Tomskaya region like magic formulas very much, but they don't like to calculate them! Therefore you are given the sequence p, calculate the value of Q.\n-----Input-----\nThe first line of the input contains the only integer n (1 \u2264 n \u2264 10^6). The next line contains n integers: p_1, p_2,..., p_{n} (0 \u2264 p_{i} \u2264 2\u00b710^9).\n-----Output-----\nThe only line of output should contain a single integer \u2014 the value of Q.\n-----Examples-----\nInput\n3\n1 2 3\nOutput\n3\n\ndef",
        "answer": "def magic_formula(n, p):\n    return sum(p)",
        "difficulty": "interview"
    },
    {
        "task_id": 2206,
        "prompt": "Complete the Python function given the prompt below:There are n points marked on the plane. The points are situated in such a way that they form a regular polygon (marked points are its vertices, and they are numbered in counter-clockwise order). You can draw n - 1 segments, each connecting any two marked points, in such a way that all points have to be connected with each other (directly or indirectly).\nBut there are some restrictions. Firstly, some pairs of points cannot be connected directly and have to be connected undirectly. Secondly, the segments you draw must not intersect in any point apart from the marked points (that is, if any two segments intersect and their intersection is not a marked point, then the picture you have drawn is invalid).\nHow many ways are there to connect all vertices with n - 1 segments? Two ways are considered different iff there exist some pair of points such that a segment is drawn between them in the first way of connection, but it is not drawn between these points in the second one. Since the answer might be large, output it modulo 10^9 + 7.\n-----Input-----\nThe first line contains one number n (3 \u2264 n \u2264 500) \u2014 the number of marked points.\nThen n lines follow, each containing n elements. a_{i}, j (j-th element of line i) is equal to 1 iff you can connect points i and j directly (otherwise a_{i}, j = 0). It is guaranteed that for any pair of points a_{i}, j = a_{j}, i, and for any point a_{i}, i = 0.\n-----Output-----\nPrint the number of ways to connect points modulo 10^9 + 7.\n-----Examples-----\nInput\n3\n0 0 1\n0 0 1\n1 1 0\nOutput\n1\nInput\n4\n0 1 1 1\n1 0 1 1\n1 1 0 1\n1 1 1 0\nOutput\n12\nInput\n3\n0 0 0\n0 0 1\n0 1 0\nOutput\n0\n\ndef",
        "answer": "def count_ways(n):\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    return count_ways(n - 1) + count_ways(n - 2) + count_ways(n - 3)",
        "difficulty": "interview"
    },
    {
        "task_id": 2207,
        "prompt": "Complete the Python function given the prompt below:\"The zombies are lurking outside. Waiting. Moaning. And when they come...\"\n\"When they come?\"\n\"I hope the Wall is high enough.\"\nZombie attacks have hit the Wall, our line of defense in the North. Its protection is failing, and cracks are showing. In places, gaps have appeared, splitting the wall into multiple segments. We call on you for help. Go forth and explore the wall! Report how many disconnected segments there are.\nThe wall is a two-dimensional structure made of bricks. Each brick is one unit wide and one unit high. Bricks are stacked on top of each other to form columns that are up to R bricks high. Each brick is placed either on the ground or directly on top of another brick. Consecutive non-empty columns form a wall segment. The entire wall, all the segments and empty columns in-between, is C columns wide.\n-----Input-----\nThe first line of the input consists of two space-separated integers R and C, 1 \u2264 R, C \u2264 100. The next R lines provide a description of the columns as follows:   each of the R lines contains a string of length C,  the c-th character of line r is B if there is a brick in column c and row R - r + 1, and. otherwise.  The input will contain at least one character B and it will be valid.\n-----Output-----\nThe number of wall segments in the input configuration.\n-----Examples-----\nInput\n3 7\n.......\n.......\n.BB.B..\nOutput\n2\nInput\n4 5\n..B..\n..B..\nB.B.B\nBBB.B\nOutput\n2\nInput\n4 6\n..B...\nB.B.BB\nBBB.BB\nBBBBBB\nOutput\n1\nInput\n1 1\nB\nOutput\n1\nInput\n10 7\n.......\n.......\n.......\n.......\n.......\n.......\n.......\n.......\n...B...\nB.BB.B.\nOutput\n3\nInput\n8 8\n........\n........\n........\n........\n.B......\n.B.....B\n.B.....B\n.BB...BB\nOutput\n2\n-----Note-----\nIn the first sample case, the 2nd and 3rd columns define the first wall segment, and the 5th column defines the second.\n\ndef",
        "answer": "def solve(R, C):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2208,
        "prompt": "Complete the Python function given the prompt below:Mike and!Mike are old childhood rivals, they are opposite in everything they do, except programming. Today they have a problem they cannot solve on their own, but together (with you)\u00a0\u2014 who knows? \nEvery one of them has an integer sequences a and b of length n. Being given a query of the form of pair of integers (l, r), Mike can instantly tell the value of $\\operatorname{max}_{i = l}^{r} a_{i}$ while!Mike can instantly tell the value of $\\operatorname{min}_{i = l} b_{i}$.\nNow suppose a robot (you!) asks them all possible different queries of pairs of integers (l, r) (1 \u2264 l \u2264 r \u2264 n) (so he will make exactly n(n + 1) / 2 queries) and counts how many times their answers coincide, thus for how many pairs $\\operatorname{max}_{i = l}^{r} a_{i} = \\operatorname{min}_{i = l} b_{i}$ is satisfied.\nHow many occasions will the robot count?\n-----Input-----\nThe first line contains only integer n (1 \u2264 n \u2264 200 000).\nThe second line contains n integer numbers a_1, a_2,..., a_{n} ( - 10^9 \u2264 a_{i} \u2264 10^9)\u00a0\u2014 the sequence a.\nThe third line contains n integer numbers b_1, b_2,..., b_{n} ( - 10^9 \u2264 b_{i} \u2264 10^9)\u00a0\u2014 the sequence b.\n-----Output-----\nPrint the only integer number\u00a0\u2014 the number of occasions the robot will count, thus for how many pairs $\\operatorname{max}_{i = l}^{r} a_{i} = \\operatorname{min}_{i = l} b_{i}$ is satisfied.\n-----Examples-----\nInput\n6\n1 2 3 2 1 4\n6 7 1 2 3 2\nOutput\n2\nInput\n3\n3 3 3\n1 1 1\nOutput\n0\n-----Note-----\nThe occasions in the first sample case are:\n1.l = 4,r = 4 since max{2} = min{2}.\n2.l = 4,r = 5 since max{2, 1} = min{2, 3}.\nThere are no occasions in the second sample case since Mike will answer 3 to any query pair, but!Mike will always answer 1.\n\ndef",
        "answer": "def max_min(a, b):\n    return max(a), min(b)",
        "difficulty": "interview"
    },
    {
        "task_id": 2209,
        "prompt": "Complete the Python function given the prompt below:Pushok the dog has been chasing Imp for a few hours already. $48$ \nFortunately, Imp knows that Pushok is afraid of a robot vacuum cleaner. \nWhile moving, the robot generates a string t consisting of letters's' and 'h', that produces a lot of noise. We define noise of string t as the number of occurrences of string \"sh\" as a subsequence in it, in other words, the number of such pairs (i, j), that i < j and $t_{i} = s$ and $t_{j} = h$. \nThe robot is off at the moment. Imp knows that it has a sequence of strings t_{i} in its memory, and he can arbitrary change their order. When the robot is started, it generates the string t as a concatenation of these strings in the given order. The noise of the resulting string equals the noise of this concatenation.\nHelp Imp to find the maximum noise he can achieve by changing the order of the strings.\n-----Input-----\nThe first line contains a single integer n (1 \u2264 n \u2264 10^5)\u00a0\u2014 the number of strings in robot's memory.\nNext n lines contain the strings t_1, t_2,..., t_{n}, one per line. It is guaranteed that the strings are non-empty, contain only English letters's' and 'h' and their total length does not exceed 10^5.\n-----Output-----\nPrint a single integer\u00a0\u2014 the maxumum possible noise Imp can achieve by changing the order of the strings.\n-----Examples-----\nInput\n4\nssh\nhs\ns\nhhhs\nOutput\n18\nInput\n2\nh\ns\nOutput\n1\n-----Note-----\nThe optimal concatenation in the first sample is ssshhshhhs.\n\ndef",
        "answer": "def max_noise(t):\n    return sum(t.count('sh') for t in t)",
        "difficulty": "interview"
    },
    {
        "task_id": 2210,
        "prompt": "Complete the Python function given the prompt below:Ayush and Ashish play a game on an unrooted tree consisting of $n$ nodes numbered $1$ to $n$. Players make the following move in turns:   Select any leaf node in the tree and remove it together with any edge which has this node as one of its endpoints. A leaf node is a node with degree less than or equal to $1$. \nA tree is a connected undirected graph without cycles.\nThere is a special node numbered $x$. The player who removes this node wins the game. \nAyush moves first. Determine the winner of the game if each player plays optimally.\n-----Input-----\nThe first line of the input contains a single integer $t$ $(1 \\leq t \\leq 10)$\u00a0\u2014 the number of testcases. The description of the test cases follows.\nThe first line of each testcase contains two integers $n$ and $x$ $(1\\leq n \\leq 1000, 1 \\leq x \\leq n)$\u00a0\u2014 the number of nodes in the tree and the special node respectively.\nEach of the next $n-1$ lines contain two integers $u$, $v$ $(1 \\leq u, v \\leq n, \\text{ } u \\ne v)$, meaning that there is an edge between nodes $u$ and $v$ in the tree.\n-----Output-----\nFor every test case, if Ayush wins the game, print \"Ayush\", otherwise print \"Ashish\" (without quotes).\n-----Examples-----\nInput\n1\n3 1\n2 1\n3 1\nOutput\nAshish\nInput\n1\n3 2\n1 2\n1 3\nOutput\nAyush\n-----Note-----\nFor the $1$st test case, Ayush can only remove node $2$ or $3$, after which node $1$ becomes a leaf node and Ashish can remove it in his turn.\nFor the $2$nd test case, Ayush can remove node $2$ in the first move itself.\n\ndef",
        "answer": "def solve(n, x):\n\t# Your code here\n\tpass",
        "difficulty": "interview"
    },
    {
        "task_id": 2211,
        "prompt": "Complete the Python function given the prompt below:Smart Beaver recently got interested in a new word game. The point is as follows: count the number of distinct good substrings of some string s. To determine if a string is good or not the game uses rules. Overall there are n rules. Each rule is described by a group of three (p, l, r), where p is a string and l and r (l \u2264 r) are integers. We\u2019ll say that string t complies with rule (p, l, r), if the number of occurrences of string t in string p lies between l and r, inclusive. For example, string \"ab\", complies with rules (\"ab\", 1, 2) and (\"aab\", 0, 1), but does not comply with rules (\"cd\", 1, 2) and (\"abab\", 0, 1).\nA substring s[l... r] (1 \u2264 l \u2264 r \u2264 |s|) of string s = s_1s_2... s_{|}s| (|s| is a length of s) is string s_{l}s_{l} + 1... s_{r}.\nConsider a number of occurrences  of string t in string p as a number of pairs of integers l, r (1 \u2264 l \u2264 r \u2264 |p|) such that p[l... r] = t.\nWe\u2019ll say that string t is good if it complies with all n rules. Smart Beaver asks you to help him to write a program that can calculate the number of distinct good substrings of string s. Two substrings s[x... y] and s[z... w] are cosidered to be distinct iff s[x... y] \u2260 s[z... w].\n-----Input-----\nThe first line contains string s. The second line contains integer n. Next n lines contain the rules, one per line. Each of these lines contains a string and two integers p_{i}, l_{i}, r_{i}, separated by single spaces (0 \u2264 l_{i} \u2264 r_{i} \u2264 |p_{i}|). It is guaranteed that all the given strings are non-empty and only contain lowercase English letters.\nThe input limits for scoring 30 points are (subproblem G1):   0 \u2264 n \u2264 10.  The length of string s and the maximum length of string p is  \u2264 200. \nThe input limits for scoring 70 points are (subproblems G1+G2):   0 \u2264 n \u2264 10.  The length of string s and the maximum length of string p is  \u2264 2000. \nThe input limits for scoring 100 points are (subproblems G1+G2+G3):   0 \u2264 n \u2264 10.  The length of string s and the maximum length of string p is  \u2264 50000. \n-----Output-----\nPrint a single integer \u2014 the number of good substrings of string s.\n-----Examples-----\nInput\naaab\n2\naa 0 0\naab 1 1\nOutput\n3\nInput\nltntlnen\n3\nn 0 0\nttlneenl 1 4\nlelllt 1 1\nOutput\n2\nInput\na\n0\nOutput\n1\n-----Note-----\nThere are three good substrings in the first sample test: \u00abaab\u00bb, \u00abab\u00bb and \u00abb\u00bb.\nIn the second test only substrings \u00abe\u00bb and \u00abt\u00bb are good.\n\ndef",
        "answer": "def count_good_substrings(s, n):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2212,
        "prompt": "Complete the Python function given the prompt below:Find an n \u00d7 n matrix with different numbers from 1 to n^2, so the sum in each row, column and both main diagonals are odd.\n-----Input-----\nThe only line contains odd integer n (1 \u2264 n \u2264 49).\n-----Output-----\nPrint n lines with n integers. All the integers should be different and from 1 to n^2. The sum in each row, column and both main diagonals should be odd.\n-----Examples-----\nInput\n1\nOutput\n1\nInput\n3\nOutput\n2 1 4\n3 5 7\n6 9 8\n\ndef",
        "answer": "def print_matrix(n):\n    for i in range(n):\n        for j in range(n):\n            print(i*n+j+1, end=\" \")\n        print()",
        "difficulty": "interview"
    },
    {
        "task_id": 2213,
        "prompt": "Complete the Python function given the prompt below:Iahub wants to enhance his multitasking abilities. In order to do this, he wants to sort n arrays simultaneously, each array consisting of m integers.\nIahub can choose a pair of distinct indices i and j (1 \u2264 i, j \u2264 m, i \u2260 j). Then in each array the values at positions i and j are swapped only if the value at position i is strictly greater than the value at position j.\nIahub wants to find an array of pairs of distinct indices that, chosen in order, sort all of the n arrays in ascending or descending order (the particular order is given in input). The size of the array can be at most $\\frac{m(m - 1)}{2}$ (at most $\\frac{m(m - 1)}{2}$ pairs). Help Iahub, find any suitable array.\n-----Input-----\nThe first line contains three integers n (1 \u2264  n \u2264 1000), m (1 \u2264 m \u2264  100) and k. Integer k is 0 if the arrays must be sorted in ascending order, and 1 if the arrays must be sorted in descending order. Each line i of the next n lines contains m integers separated by a space, representing the i-th array. For each element x of the array i, 1 \u2264 x \u2264 10^6 holds.\n-----Output-----\nOn the first line of the output print an integer p, the size of the array (p can be at most $\\frac{m(m - 1)}{2}$). Each of the next p lines must contain two distinct integers i and j (1 \u2264 i, j \u2264 m, i \u2260 j), representing the chosen indices.\nIf there are multiple correct answers, you can print any.\n-----Examples-----\nInput\n2 5 0\n1 3 2 5 4\n1 4 3 2 5\nOutput\n3\n2 4\n2 3\n4 5\nInput\n3 2 1\n1 2\n2 3\n3 4\nOutput\n1\n2 1\n-----Note-----\nConsider the first sample. After the first operation, the arrays become [1, 3, 2, 5, 4] and [1, 2, 3, 4, 5]. After the second operation, the arrays become [1, 2, 3, 5, 4] and [1, 2, 3, 4, 5]. After the third operation they become [1, 2, 3, 4, 5] and [1, 2, 3, 4, 5].\n\ndef",
        "answer": "def solution(n, m, k):\n    arrays = []\n    for i in range(n):\n        arrays.append(list(map(int, input().split())))\n    if k == 0:\n        arrays.sort()\n    else:\n        arrays.sort(reverse=True)\n    pairs = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arrays[i][j - 1] > arrays[j - 1][j]:\n                pairs.append((i, j))\n    print(len(pairs))\n    for i, j in pairs:\n        print(i, j)",
        "difficulty": "interview"
    },
    {
        "task_id": 2214,
        "prompt": "Complete the Python function given the prompt below:A binary matrix is called good if every even length square sub-matrix has an odd number of ones. \nGiven a binary matrix $a$ consisting of $n$ rows and $m$ columns, determine the minimum number of cells you need to change to make it good, or report that there is no way to make it good at all. \nAll the terms above have their usual meanings\u00a0\u2014 refer to the Notes section for their formal definitions. \n-----Input-----\nThe first line of input contains two integers $n$ and $m$ ($1 \\leq n \\leq m \\leq 10^6$ and $n\\cdot m \\leq 10^6$) \u00a0\u2014 the number of rows and columns in $a$, respectively. \nThe following $n$ lines each contain $m$ characters, each of which is one of 0 and 1. If the $j$-th character on the $i$-th line is 1, then $a_{i,j} = 1$. Similarly, if the $j$-th character on the $i$-th line is 0, then $a_{i,j} = 0$.\n-----Output-----\nOutput the minimum number of cells you need to change to make $a$ good, or output $-1$ if it's not possible at all.\n-----Examples-----\nInput\n3 3\n101\n001\n110\nOutput\n2\nInput\n7 15\n000100001010010\n100111010110001\n101101111100100\n010000111111010\n111010010100001\n000011001111101\n111111011010011\nOutput\n-1\n-----Note-----\nIn the first case, changing $a_{1,1}$ to $0$ and $a_{2,2}$ to $1$ is enough. \nYou can verify that there is no way to make the matrix in the second case good. \nSome definitions\u00a0\u2014   A binary matrix is one in which every element is either $1$ or $0$.  A sub-matrix is described by $4$ parameters\u00a0\u2014 $r_1$, $r_2$, $c_1$, and $c_2$; here, $1 \\leq r_1 \\leq r_2 \\leq n$ and $1 \\leq c_1 \\leq c_2 \\leq m$.  This sub-matrix contains all elements $a_{i,j}$ that satisfy both $r_1 \\leq i \\leq r_2$ and $c_1 \\leq j \\leq c_2$.  A sub-matrix is, further, called an even length square if $r_2-r_1 = c_2-c_1$ and $r_2-r_1+1$ is divisible by $2$.\n\ndef",
        "answer": "def good(a):\n    n, m = len(a), len(a[0])\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 1:\n                if i % 2 == 0:\n                    if j % 2 == 0:\n                        a[i][j] = 0\n                    else:\n                        a[i][j] = 1\n                else:\n                    if j % 2 == 0:\n                        a[i][j] = 1\n                    else:\n                        a[i][j] = 0\n    return sum(sum(a[i]) for i in range(n))",
        "difficulty": "interview"
    },
    {
        "task_id": 2215,
        "prompt": "Complete the Python function given the prompt below:Sonya decided to organize an exhibition of flowers. Since the girl likes only roses and lilies, she decided that only these two kinds of flowers should be in this exhibition.\nThere are $n$ flowers in a row in the exhibition. Sonya can put either a rose or a lily in the $i$-th position. Thus each of $n$ positions should contain exactly one flower: a rose or a lily.\nShe knows that exactly $m$ people will visit this exhibition. The $i$-th visitor will visit all flowers from $l_i$ to $r_i$ inclusive. The girl knows that each segment has its own beauty that is equal to the product of the number of roses and the number of lilies.\nSonya wants her exhibition to be liked by a lot of people. That is why she wants to put the flowers in such way that the sum of beauties of all segments would be maximum possible.\n-----Input-----\nThe first line contains two integers $n$ and $m$ ($1\\leq n, m\\leq 10^3$)\u00a0\u2014 the number of flowers and visitors respectively.\nEach of the next $m$ lines contains two integers $l_i$ and $r_i$ ($1\\leq l_i\\leq r_i\\leq n$), meaning that $i$-th visitor will visit all flowers from $l_i$ to $r_i$ inclusive.\n-----Output-----\nPrint the string of $n$ characters. The $i$-th symbol should be \u00ab0\u00bb if you want to put a rose in the $i$-th position, otherwise \u00ab1\u00bb if you want to put a lily.\nIf there are multiple answers, print any.\n-----Examples-----\nInput\n5 3\n1 3\n2 4\n2 5\nOutput\n01100\nInput\n6 3\n5 6\n1 4\n4 6\nOutput\n110010\n-----Note-----\nIn the first example, Sonya can put roses in the first, fourth, and fifth positions, and lilies in the second and third positions;\n  in the segment $[1\\ldots3]$, there are one rose and two lilies, so the beauty is equal to $1\\cdot 2=2$;  in the segment $[2\\ldots4]$, there are one rose and two lilies, so the beauty is equal to $1\\cdot 2=2$;  in the segment $[2\\ldots5]$, there are two roses and two lilies, so the beauty is equal to $2\\cdot 2=4$. \nThe total beauty is equal to $2+2+4=8$.\nIn the second example, Sonya can put roses in the third, fourth, and sixth positions, and lilies in the first, second, and fifth positions;\n  in the segment $[5\\ldots6]$, there are one rose and one lily, so the beauty is equal to $1\\cdot 1=1$;  in the segment $[1\\ldots4]$, there are two roses and two lilies, so the beauty is equal to $2\\cdot 2=4$;  in the segment $[4\\ldots6]$, there are two roses and one lily, so the beauty is equal to $2\\cdot 1=2$. \nThe total beauty is equal to $1+4+2=7$.\n\ndef",
        "answer": "def maxBeauty(n, m, l, r):\n    beauty = [0] * n\n    for i in range(m):\n        beauty[l[i] - 1] += 1\n        beauty[r[i] - 1] += 1\n    for i in range(n):\n        beauty[i] *= (i + 1)\n    return max(beauty)",
        "difficulty": "interview"
    },
    {
        "task_id": 2216,
        "prompt": "Complete the Python function given the prompt below:Valera has got a rectangle table consisting of n rows and m columns. Valera numbered the table rows starting from one, from top to bottom and the columns \u2013 starting from one, from left to right. We will represent cell that is on the intersection of row x and column y by a pair of integers (x, y).\nValera wants to place exactly k tubes on his rectangle table. A tube is such sequence of table cells (x_1, y_1), (x_2, y_2),..., (x_{r}, y_{r}), that:   r \u2265 2;  for any integer i (1 \u2264 i \u2264 r - 1) the following equation |x_{i} - x_{i} + 1| + |y_{i} - y_{i} + 1| = 1 holds;  each table cell, which belongs to the tube, must occur exactly once in the sequence. \nValera thinks that the tubes are arranged in a fancy manner if the following conditions are fulfilled:   no pair of tubes has common cells;  each cell of the table belongs to some tube. \nHelp Valera to arrange k tubes on his rectangle table in a fancy manner.\n-----Input-----\nThe first line contains three space-separated integers n, m, k (2 \u2264 n, m \u2264 300; 2 \u2264 2k \u2264 n\u00b7m) \u2014 the number of rows, the number of columns and the number of tubes, correspondingly. \n-----Output-----\nPrint k lines. In the i-th line print the description of the i-th tube: first print integer r_{i} (the number of tube cells), then print 2r_{i} integers x_{i}1, y_{i}1, x_{i}2, y_{i}2,..., x_{ir}_{i}, y_{ir}_{i} (the sequence of table cells).\nIf there are multiple solutions, you can print any of them. It is guaranteed that at least one solution exists. \n-----Examples-----\nInput\n3 3 3\nOutput\n3 1 1 1 2 1 3\n3 2 1 2 2 2 3\n3 3 1 3 2 3 3\nInput\n2 3 1\nOutput\n6 1 1 1 2 1 3 2 3 2 2 2 1\n-----Note-----\nPicture for the first sample:  [Image] \nPicture for the second sample:  [Image]\n\ndef",
        "answer": "def solution(n, m, k):\n    # write your code in Python 2.7\n    pass\n",
        "difficulty": "interview"
    },
    {
        "task_id": 2217,
        "prompt": "Complete the Python function given the prompt below:You are given a positive integer $D$. Let's build the following graph from it:   each vertex is a divisor of $D$ (not necessarily prime, $1$ and $D$ itself are also included);  two vertices $x$ and $y$ ($x > y$) have an undirected edge between them if $x$ is divisible by $y$ and $\\frac x y$ is a prime;  the weight of an edge is the number of divisors of $x$ that are not divisors of $y$. \nFor example, here is the graph for $D=12$:  [Image] \nEdge $(4,12)$ has weight $3$ because $12$ has divisors $[1,2,3,4,6,12]$ and $4$ has divisors $[1,2,4]$. Thus, there are $3$ divisors of $12$ that are not divisors of $4$ \u2014 $[3,6,12]$.\nThere is no edge between $3$ and $2$ because $3$ is not divisible by $2$. There is no edge between $12$ and $3$ because $\\frac{12}{3}=4$ is not a prime.\nLet the length of the path between some vertices $v$ and $u$ in the graph be the total weight of edges on it. For example, path $[(1, 2), (2, 6), (6, 12), (12, 4), (4, 2), (2, 6)]$ has length $1+2+2+3+1+2=11$. The empty path has length $0$.\nSo the shortest path between two vertices $v$ and $u$ is the path that has the minimal possible length.\nTwo paths $a$ and $b$ are different if there is either a different number of edges in them or there is a position $i$ such that $a_i$ and $b_i$ are different edges.\nYou are given $q$ queries of the following form:   $v$ $u$ \u2014 calculate the number of the shortest paths between vertices $v$ and $u$. \nThe answer for each query might be large so print it modulo $998244353$.\n-----Input-----\nThe first line contains a single integer $D$ ($1 \\le D \\le 10^{15}$) \u2014 the number the graph is built from.\nThe second line contains a single integer $q$ ($1 \\le q \\le 3 \\cdot 10^5$) \u2014 the number of queries.\nEach of the next $q$ lines contains two integers $v$ and $u$ ($1 \\le v, u \\le D$). It is guaranteed that $D$ is divisible by both $v$ and $u$ (both $v$ and $u$ are divisors of $D$).\n-----Output-----\nPrint $q$ integers \u2014 for each query output the number of the shortest paths between the two given vertices modulo $998244353$.\n-----Examples-----\nInput\n12\n3\n4 4\n12 1\n3 4\nOutput\n1\n3\n1\nInput\n1\n1\n1 1\nOutput\n1\nInput\n288807105787200\n4\n46 482955026400\n12556830686400 897\n414 12556830686400\n4443186242880 325\nOutput\n547558588\n277147129\n457421435\n702277623\n-----Note-----\nIn the first example:   The first query is only the empty path \u2014 length $0$;  The second query are paths $[(12, 4), (4, 2), (2, 1)]$ (length $3+1+1=5$), $[(12, 6), (6, 2), (2, 1)]$ (length $2+2+1=5$) and $[(12, 6), (6, 3), (3, 1)]$ (length $2+2+1=5$).  The third query is only the path $[(3, 1), (1, 2), (2, 4)]$ (length $1+1+1=3$).\n\ndef",
        "answer": "def shortest_path(D, v, u):\n    # your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2218,
        "prompt": "Complete the Python function given the prompt below:General Payne has a battalion of n soldiers. The soldiers' beauty contest is coming up, it will last for k days. Payne decided that his battalion will participate in the pageant. Now he has choose the participants.\nAll soldiers in the battalion have different beauty that is represented by a positive integer. The value a_{i} represents the beauty of the i-th soldier.\nOn each of k days Generals has to send a detachment of soldiers to the pageant. The beauty of the detachment is the sum of the beauties of the soldiers, who are part of this detachment. Payne wants to surprise the jury of the beauty pageant, so each of k days the beauty of the sent detachment should be unique. In other words, all k beauties of the sent detachments must be distinct numbers.\nHelp Payne choose k detachments of different beauties for the pageant. Please note that Payne cannot just forget to send soldiers on one day, that is, the detachment of soldiers he sends to the pageant should never be empty.\n-----Input-----\nThe first line contains two integers n, k (1 \u2264 n \u2264 50; 1 \u2264 k \u2264  $\\frac{n(n + 1)}{2}$) \u2014 the number of soldiers and the number of days in the pageant, correspondingly. The second line contains space-separated integers a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 10^7) \u2014 the beauties of the battalion soldiers.\nIt is guaranteed that Payne's battalion doesn't have two soldiers with the same beauty.\n-----Output-----\nPrint k lines: in the i-th line print the description of the detachment that will participate in the pageant on the i-th day. The description consists of integer c_{i} (1 \u2264 c_{i} \u2264 n) \u2014 the number of soldiers in the detachment on the i-th day of the pageant and c_{i} distinct integers p_{1, }i, p_{2, }i,..., p_{c}_{i}, i \u2014 the beauties of the soldiers in the detachment on the i-th day of the pageant. The beauties of the soldiers are allowed to print in any order.\nSeparate numbers on the lines by spaces. It is guaranteed that there is the solution that meets the problem conditions. If there are multiple solutions, print any of them.\n-----Examples-----\nInput\n3 3\n1 2 3\nOutput\n1 1\n1 2\n2 3 2\nInput\n2 1\n7 12\nOutput\n1 12\n\ndef",
        "answer": "def beauty_pawney(n, k, a):\n    beauties = [0] * n\n    for i in range(n):\n        beauties[i] = a[i]\n    beauties.sort()\n    beauties = [str(beauties[i]) for i in range(n)]\n    beauties =''.join(beauties)\n    return(beauties)",
        "difficulty": "interview"
    },
    {
        "task_id": 2219,
        "prompt": "Complete the Python function given the prompt below:You are given an integer $n$ and an integer $k$.\nIn one step you can do one of the following moves:   decrease $n$ by $1$;  divide $n$ by $k$ if $n$ is divisible by $k$. \nFor example, if $n = 27$ and $k = 3$ you can do the following steps: $27 \\rightarrow 26 \\rightarrow 25 \\rightarrow 24 \\rightarrow 8 \\rightarrow 7 \\rightarrow 6 \\rightarrow 2 \\rightarrow 1 \\rightarrow 0$.\nYou are asked to calculate the minimum number of steps to reach $0$ from $n$. \n-----Input-----\nThe first line contains one integer $t$ ($1 \\le t \\le 100$) \u2014 the number of queries.\nThe only line of each query contains two integers $n$ and $k$ ($1 \\le n \\le 10^{18}$, $2 \\le k \\le 10^{18}$).\n-----Output-----\nFor each query print the minimum number of steps to reach $0$ from $n$ in single line. \n-----Example-----\nInput\n2\n59 3\n1000000000000000000 10\nOutput\n8\n19\n-----Note-----\nSteps for the first test case are: $59 \\rightarrow 58 \\rightarrow 57 \\rightarrow 19 \\rightarrow 18 \\rightarrow 6 \\rightarrow 2 \\rightarrow 1 \\rightarrow 0$.\nIn the second test case you have to divide $n$ by $k$ $18$ times and then decrease $n$ by $1$.\n\ndef",
        "answer": "def solve(n, k):\n    steps = 0\n    while n > 0:\n        if n % k == 0:\n            n /= k\n            steps += 1\n        else:\n            n -= 1\n            steps += 1\n    return steps",
        "difficulty": "interview"
    },
    {
        "task_id": 2220,
        "prompt": "Complete the Python function given the prompt below:There are $n$ emotes in very popular digital collectible card game (the game is pretty famous so we won't say its name). The $i$-th emote increases the opponent's happiness by $a_i$ units (we all know that emotes in this game are used to make opponents happy).\nYou have time to use some emotes only $m$ times. You are allowed to use any emotion once, more than once, or not use it at all. The only restriction is that you cannot use the same emote more than $k$ times in a row (otherwise the opponent will think that you're trolling him).\nNote that two emotes $i$ and $j$ ($i \\ne j$) such that $a_i = a_j$ are considered different.\nYou have to make your opponent as happy as possible. Find the maximum possible opponent's happiness.\n-----Input-----\nThe first line of the input contains three integers $n, m$ and $k$ ($2 \\le n \\le 2 \\cdot 10^5$, $1 \\le k \\le m \\le 2 \\cdot 10^9$) \u2014 the number of emotes, the number of times you can use emotes and the maximum number of times you may use the same emote in a row.\nThe second line of the input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^9$), where $a_i$ is value of the happiness of the $i$-th emote.\n-----Output-----\nPrint one integer \u2014 the maximum opponent's happiness if you use emotes in a way satisfying the problem statement.\n-----Examples-----\nInput\n6 9 2\n1 3 3 7 4 2\nOutput\n54\nInput\n3 1000000000 1\n1000000000 987654321 1000000000\nOutput\n1000000000000000000\n-----Note-----\nIn the first example you may use emotes in the following sequence: $4, 4, 5, 4, 4, 5, 4, 4, 5$.\n\ndef",
        "answer": "def max_happiness(n, m, k, a):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2221,
        "prompt": "Complete the Python function given the prompt below:You a captain of a ship. Initially you are standing in a point $(x_1, y_1)$ (obviously, all positions in the sea can be described by cartesian plane) and you want to travel to a point $(x_2, y_2)$. \nYou know the weather forecast \u2014 the string $s$ of length $n$, consisting only of letters U, D, L and R. The letter corresponds to a direction of wind. Moreover, the forecast is periodic, e.g. the first day wind blows to the side $s_1$, the second day \u2014 $s_2$, the $n$-th day \u2014 $s_n$ and $(n+1)$-th day \u2014 $s_1$ again and so on. \nShip coordinates change the following way:  if wind blows the direction U, then the ship moves from $(x, y)$ to $(x, y + 1)$;  if wind blows the direction D, then the ship moves from $(x, y)$ to $(x, y - 1)$;  if wind blows the direction L, then the ship moves from $(x, y)$ to $(x - 1, y)$;  if wind blows the direction R, then the ship moves from $(x, y)$ to $(x + 1, y)$. \nThe ship can also either go one of the four directions or stay in place each day. If it goes then it's exactly 1 unit of distance. Transpositions of the ship and the wind add up. If the ship stays in place, then only the direction of wind counts. For example, if wind blows the direction U and the ship moves the direction L, then from point $(x, y)$ it will move to the point $(x - 1, y + 1)$, and if it goes the direction U, then it will move to the point $(x, y + 2)$.\nYou task is to determine the minimal number of days required for the ship to reach the point $(x_2, y_2)$.\n-----Input-----\nThe first line contains two integers $x_1, y_1$ ($0 \\le x_1, y_1 \\le 10^9$) \u2014 the initial coordinates of the ship.\nThe second line contains two integers $x_2, y_2$ ($0 \\le x_2, y_2 \\le 10^9$) \u2014 the coordinates of the destination point.\nIt is guaranteed that the initial coordinates and destination point coordinates are different.\nThe third line contains a single integer $n$ ($1 \\le n \\le 10^5$) \u2014 the length of the string $s$.\nThe fourth line contains the string $s$ itself, consisting only of letters U, D, L and R.\n-----Output-----\nThe only line should contain the minimal number of days required for the ship to reach the point $(x_2, y_2)$.\nIf it's impossible then print \"-1\".\n-----Examples-----\nInput\n0 0\n4 6\n3\nUUU\nOutput\n5\nInput\n0 3\n0 0\n3\nUDD\nOutput\n3\nInput\n0 0\n0 1\n1\nL\nOutput\n-1\n-----Note-----\nIn the first example the ship should perform the following sequence of moves: \"RRRRU\". Then its coordinates will change accordingly: $(0, 0)$ $\\rightarrow$ $(1, 1)$ $\\rightarrow$ $(2, 2)$ $\\rightarrow$ $(3, 3)$ $\\rightarrow$ $(4, 4)$ $\\rightarrow$ $(4, 6)$.\nIn the second example the ship should perform the following sequence of moves: \"DD\" (the third day it should stay in place). Then its coordinates will change accordingly: $(0, 3)$ $\\rightarrow$ $(0, 3)$ $\\rightarrow$ $(0, 1)$ $\\rightarrow$ $(0, 0)$.\nIn the third example the ship can never reach the point $(0, 1)$.\n\ndef",
        "answer": "def wind_chill(x, y, s):\n    wind_direction = s[0]\n    wind_speed = int(s[1:])\n    if wind_direction == 'U':\n        y += wind_speed\n    elif wind_direction == 'D':\n        y -= wind_speed\n    elif wind_direction == 'L':\n        x -= wind_speed\n    elif wind_direction == 'R':\n        x += wind_speed\n    return x, y",
        "difficulty": "interview"
    },
    {
        "task_id": 2222,
        "prompt": "Complete the Python function given the prompt below:Now Serval is a junior high school student in Japari Middle School, and he is still thrilled on math as before. \nAs a talented boy in mathematics, he likes to play with numbers. This time, he wants to play with numbers on a rooted tree.\nA tree is a connected graph without cycles. A rooted tree has a special vertex called the root. A parent of a node $v$ is the last different from $v$ vertex on the path from the root to the vertex $v$. Children of vertex $v$ are all nodes for which $v$ is the parent. A vertex is a leaf if it has no children.\nThe rooted tree Serval owns has $n$ nodes, node $1$ is the root. Serval will write some numbers into all nodes of the tree. However, there are some restrictions. Each of the nodes except leaves has an operation $\\max$ or $\\min$ written in it, indicating that the number in this node should be equal to the maximum or minimum of all the numbers in its sons, respectively. \nAssume that there are $k$ leaves in the tree. Serval wants to put integers $1, 2, \\ldots, k$ to the $k$ leaves (each number should be used exactly once). He loves large numbers, so he wants to maximize the number in the root. As his best friend, can you help him?\n-----Input-----\nThe first line contains an integer $n$ ($2 \\leq n \\leq 3\\cdot 10^5$), the size of the tree.\nThe second line contains $n$ integers, the $i$-th of them represents the operation in the node $i$. $0$ represents $\\min$ and $1$ represents $\\max$. If the node is a leaf, there is still a number of $0$ or $1$, but you can ignore it.\nThe third line contains $n-1$ integers $f_2, f_3, \\ldots, f_n$ ($1 \\leq f_i \\leq i-1$), where $f_i$ represents the parent of the node $i$.\n-----Output-----\nOutput one integer\u00a0\u2014 the maximum possible number in the root of the tree.\n-----Examples-----\nInput\n6\n1 0 1 1 0 1\n1 2 2 2 2\nOutput\n1\nInput\n5\n1 0 1 0 1\n1 1 1 1\nOutput\n4\nInput\n8\n1 0 0 1 0 1 1 0\n1 1 2 2 3 3 3\nOutput\n4\nInput\n9\n1 1 0 0 1 0 1 0 1\n1 1 2 2 3 3 4 4\nOutput\n5\n-----Note-----\nPictures below explain the examples. The numbers written in the middle of the nodes are their indices, and the numbers written on the top are the numbers written in the nodes.\nIn the first example, no matter how you arrange the numbers, the answer is $1$. [Image] \nIn the second example, no matter how you arrange the numbers, the answer is $4$. [Image] \nIn the third example, one of the best solution to achieve $4$ is to arrange $4$ and $5$ to nodes $4$ and $5$. [Image] \nIn the fourth example, the best solution is to arrange $5$ to node $5$. [Image]\n\ndef",
        "answer": "def max_in_tree(n, ops, parents):\n    # Write your code here",
        "difficulty": "interview"
    },
    {
        "task_id": 2223,
        "prompt": "Complete the Python function given the prompt below:You're given a tree with $n$ vertices.\nYour task is to determine the maximum possible number of edges that can be removed in such a way that all the remaining connected components will have even size.\n-----Input-----\nThe first line contains an integer $n$ ($1 \\le n \\le 10^5$) denoting the size of the tree. \nThe next $n - 1$ lines contain two integers $u$, $v$ ($1 \\le u, v \\le n$) each, describing the vertices connected by the $i$-th edge.\nIt's guaranteed that the given edges form a tree.\n-----Output-----\nOutput a single integer $k$ \u2014 the maximum number of edges that can be removed to leave all connected components with even size, or $-1$ if it is impossible to remove edges in order to satisfy this property.\n-----Examples-----\nInput\n4\n2 4\n4 1\n3 1\nOutput\n1\nInput\n3\n1 2\n1 3\nOutput\n-1\nInput\n10\n7 1\n8 4\n8 10\n4 7\n6 5\n9 3\n3 5\n2 10\n2 5\nOutput\n4\nInput\n2\n1 2\nOutput\n0\n-----Note-----\nIn the first example you can remove the edge between vertices $1$ and $4$. The graph after that will have two connected components with two vertices in each.\nIn the second example you can't remove edges in such a way that all components have even number of vertices, so the answer is $-1$.\n\ndef",
        "answer": "def solution(n, edges):\n    # Write your code here\n    pass\n",
        "difficulty": "interview"
    },
    {
        "task_id": 2224,
        "prompt": "Complete the Python function given the prompt below:Paladin Manao caught the trail of the ancient Book of Evil in a swampy area. This area contains n settlements numbered from 1 to n. Moving through the swamp is very difficult, so people tramped exactly n - 1 paths. Each of these paths connects some pair of settlements and is bidirectional. Moreover, it is possible to reach any settlement from any other one by traversing one or several paths.\nThe distance between two settlements is the minimum number of paths that have to be crossed to get from one settlement to the other one. Manao knows that the Book of Evil has got a damage range d. This means that if the Book of Evil is located in some settlement, its damage (for example, emergence of ghosts and werewolves) affects other settlements at distance d or less from the settlement where the Book resides.\nManao has heard of m settlements affected by the Book of Evil. Their numbers are p_1, p_2,..., p_{m}. Note that the Book may be affecting other settlements as well, but this has not been detected yet. Manao wants to determine which settlements may contain the Book. Help him with this difficult task.\n-----Input-----\nThe first line contains three space-separated integers n, m and d (1 \u2264 m \u2264 n \u2264 100000;\u00a00 \u2264 d \u2264 n - 1). The second line contains m distinct space-separated integers p_1, p_2,..., p_{m} (1 \u2264 p_{i} \u2264 n). Then n - 1 lines follow, each line describes a path made in the area. A path is described by a pair of space-separated integers a_{i} and b_{i} representing the ends of this path.\n-----Output-----\nPrint a single number \u2014 the number of settlements that may contain the Book of Evil. It is possible that Manao received some controversial information and there is no settlement that may contain the Book. In such case, print 0.\n-----Examples-----\nInput\n6 2 3\n1 2\n1 5\n2 3\n3 4\n4 5\n5 6\nOutput\n3\n-----Note-----\nSample 1. The damage range of the Book of Evil equals 3 and its effects have been noticed in settlements 1 and 2. Thus, it can be in settlements 3, 4 or 5.\n [Image]\n\ndef",
        "answer": "def find_paths(n, m, d):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2225,
        "prompt": "Complete the Python function given the prompt below:Xenia the beginner programmer has a sequence a, consisting of 2^{n} non-negative integers: a_1, a_2,..., a_2^{n}. Xenia is currently studying bit operations. To better understand how they work, Xenia decided to calculate some value v for a.\nNamely, it takes several iterations to calculate value v. At the first iteration, Xenia writes a new sequence a_1\u00a0or\u00a0a_2, a_3\u00a0or\u00a0a_4,..., a_2^{n} - 1\u00a0or\u00a0a_2^{n}, consisting of 2^{n} - 1 elements. In other words, she writes down the bit-wise OR of adjacent elements of sequence a. At the second iteration, Xenia writes the bitwise exclusive OR of adjacent elements of the sequence obtained after the first iteration. At the third iteration Xenia writes the bitwise OR of the adjacent elements of the sequence obtained after the second iteration. And so on; the operations of bitwise exclusive OR and bitwise OR alternate. In the end, she obtains a sequence consisting of one element, and that element is v.\nLet's consider an example. Suppose that sequence a = (1, 2, 3, 4). Then let's write down all the transformations (1, 2, 3, 4)  \u2192  (1\u00a0or\u00a02 = 3, 3\u00a0or\u00a04 = 7)  \u2192  (3\u00a0xor\u00a07 = 4). The result is v = 4.\nYou are given Xenia's initial sequence. But to calculate value v for a given sequence would be too easy, so you are given additional m queries. Each query is a pair of integers p, b. Query p, b means that you need to perform the assignment a_{p} = b. After each query, you need to print the new value v for the new sequence a.\n-----Input-----\nThe first line contains two integers n and m (1 \u2264 n \u2264 17, 1 \u2264 m \u2264 10^5). The next line contains 2^{n} integers a_1, a_2,..., a_2^{n} (0 \u2264 a_{i} < 2^30). Each of the next m lines contains queries. The i-th line contains integers p_{i}, b_{i} (1 \u2264 p_{i} \u2264 2^{n}, 0 \u2264 b_{i} < 2^30) \u2014 the i-th query.\n-----Output-----\nPrint m integers \u2014 the i-th integer denotes value v for sequence a after the i-th query.\n-----Examples-----\nInput\n2 4\n1 6 3 5\n1 4\n3 4\n1 2\n1 2\nOutput\n1\n3\n3\n3\n-----Note-----\nFor more information on the bit operations, you can follow this link: http://en.wikipedia.org/wiki/Bitwise_operation\n\ndef",
        "answer": "def main():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    for _ in range(m):\n        p, b = map(int, input().split())\n        a[p-1] = b\n    print(*a)",
        "difficulty": "interview"
    },
    {
        "task_id": 2226,
        "prompt": "Complete the Python function given the prompt below:You are given a simple weighted connected undirected graph, consisting of $n$ vertices and $m$ edges.\nA path in the graph of length $k$ is a sequence of $k+1$ vertices $v_1, v_2, \\dots, v_{k+1}$ such that for each $i$ $(1 \\le i \\le k)$ the edge $(v_i, v_{i+1})$ is present in the graph. A path from some vertex $v$ also has vertex $v_1=v$. Note that edges and vertices are allowed to be included in the path multiple times.\nThe weight of the path is the total weight of edges in it.\nFor each $i$ from $1$ to $q$ consider a path from vertex $1$ of length $i$ of the maximum weight. What is the sum of weights of these $q$ paths?\nAnswer can be quite large, so print it modulo $10^9+7$.\n-----Input-----\nThe first line contains a three integers $n$, $m$, $q$ ($2 \\le n \\le 2000$; $n - 1 \\le m \\le 2000$; $m \\le q \\le 10^9$)\u00a0\u2014 the number of vertices in the graph, the number of edges in the graph and the number of lengths that should be included in the answer.\nEach of the next $m$ lines contains a description of an edge: three integers $v$, $u$, $w$ ($1 \\le v, u \\le n$; $1 \\le w \\le 10^6$)\u00a0\u2014 two vertices $v$ and $u$ are connected by an undirected edge with weight $w$. The graph contains no loops and no multiple edges. It is guaranteed that the given edges form a connected graph.\n-----Output-----\nPrint a single integer\u00a0\u2014 the sum of the weights of the paths from vertex $1$ of maximum weights of lengths $1, 2, \\dots, q$ modulo $10^9+7$.\n-----Examples-----\nInput\n7 8 25\n1 2 1\n2 3 10\n3 4 2\n1 5 2\n5 6 7\n6 4 15\n5 3 1\n1 7 3\nOutput\n4361\nInput\n2 1 5\n1 2 4\nOutput\n60\nInput\n15 15 23\n13 10 12\n11 14 12\n2 15 5\n4 10 8\n10 2 4\n10 7 5\n3 10 1\n5 6 11\n1 13 8\n9 15 4\n4 2 9\n11 15 1\n11 12 14\n10 8 12\n3 6 11\nOutput\n3250\nInput\n5 10 10000000\n2 4 798\n1 5 824\n5 2 558\n4 1 288\n3 4 1890\n3 1 134\n2 3 1485\n4 5 284\n3 5 1025\n1 2 649\nOutput\n768500592\n-----Note-----\nHere is the graph for the first example: [Image] \nSome maximum weight paths are:   length $1$: edges $(1, 7)$\u00a0\u2014 weight $3$;  length $2$: edges $(1, 2), (2, 3)$\u00a0\u2014 weight $1+10=11$;  length $3$: edges $(1, 5), (5, 6), (6, 4)$\u00a0\u2014 weight $2+7+15=24$;  length $4$: edges $(1, 5), (5, 6), (6, 4), (6, 4)$\u00a0\u2014 weight $2+7+15+15=39$;  $\\dots$ \nSo the answer is the sum of $25$ terms: $3+11+24+39+\\dots$\nIn the second example the maximum weight paths have weights $4$, $8$, $12$, $16$ and $20$.\n\ndef",
        "answer": "def max_weight_paths(n, m, q):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2227,
        "prompt": "Complete the Python function given the prompt below:Volodya likes listening to heavy metal and (occasionally) reading. No wonder Volodya is especially interested in texts concerning his favourite music style.\nVolodya calls a string powerful if it starts with \"heavy\" and ends with \"metal\". Finding all powerful substrings (by substring Volodya means a subsequence of consecutive characters in a string) in a given text makes our hero especially joyful. Recently he felt an enormous fit of energy while reading a certain text. So Volodya decided to count all powerful substrings in this text and brag about it all day long. Help him in this difficult task. Two substrings are considered different if they appear at the different positions in the text.\nFor simplicity, let us assume that Volodya's text can be represented as a single string.\n-----Input-----\nInput contains a single non-empty string consisting of the lowercase Latin alphabet letters. Length of this string will not be greater than 10^6 characters.\n-----Output-----\nPrint exactly one number \u2014 the number of powerful substrings of the given string.\nPlease, do not use the %lld specifier to read or write 64-bit integers in C++. It is preferred to use the cin, cout streams or the %I64d specifier.\n-----Examples-----\nInput\nheavymetalisheavymetal\nOutput\n3\nInput\nheavymetalismetal\nOutput\n2\nInput\ntrueheavymetalissotruewellitisalsosoheavythatyoucanalmostfeeltheweightofmetalonyou\nOutput\n3\n-----Note-----\nIn the first sample the string \"heavymetalisheavymetal\" contains powerful substring \"heavymetal\" twice, also the whole string \"heavymetalisheavymetal\" is certainly powerful.\nIn the second sample the string \"heavymetalismetal\" contains two powerful substrings: \"heavymetal\" and \"heavymetalismetal\".\n\ndef",
        "answer": "def powerfulSubstrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if s[i:j+1] == s[i:j+1][::-1]:\n                count += 1\n    return count",
        "difficulty": "interview"
    },
    {
        "task_id": 2228,
        "prompt": "Complete the Python function given the prompt below:During one of the space missions, humans have found an evidence of previous life at one of the planets. They were lucky enough to find a book with birth and death years of each individual that had been living at this planet. What's interesting is that these years are in the range $(1, 10^9)$! Therefore, the planet was named Longlifer.\nIn order to learn more about Longlifer's previous population, scientists need to determine the year with maximum number of individuals that were alive, as well as the number of alive individuals in that year. Your task is to help scientists solve this problem!\n-----Input-----\nThe first line contains an integer $n$ ($1 \\le n \\le 10^5$)\u00a0\u2014 the number of people.\nEach of the following $n$ lines contain two integers $b$ and $d$ ($1 \\le b \\lt d \\le 10^9$) representing birth and death year (respectively) of each individual.\n-----Output-----\nPrint two integer numbers separated by blank character, $y$ \u00a0\u2014 the year with a maximum number of people alive and $k$ \u00a0\u2014 the number of people alive in year $y$.\nIn the case of multiple possible solutions, print the solution with minimum year.\n-----Examples-----\nInput\n3\n1 5\n2 4\n5 6\nOutput\n2 2\nInput\n4\n3 4\n4 5\n4 6\n8 10\nOutput\n4 2\n-----Note-----\nYou can assume that an individual living from $b$ to $d$ has been born at the beginning of $b$ and died at the beginning of $d$, and therefore living for $d$ - $b$ years.\n\ndef",
        "answer": "def solve(n):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2229,
        "prompt": "Complete the Python function given the prompt below:Mahmoud has an array a consisting of n integers. He asked Ehab to find another array b of the same length such that:\n  b is lexicographically greater than or equal to a.  b_{i} \u2265 2.  b is pairwise coprime: for every 1 \u2264 i < j \u2264 n, b_{i} and b_{j} are coprime, i.\u00a0e. GCD(b_{i}, b_{j}) = 1, where GCD(w, z) is the greatest common divisor of w and z. \nEhab wants to choose a special array so he wants the lexicographically minimal array between all the variants. Can you find it?\nAn array x is lexicographically greater than an array y if there exists an index i such than x_{i} > y_{i} and x_{j} = y_{j} for all 1 \u2264 j < i. An array x is equal to an array y if x_{i} = y_{i} for all 1 \u2264 i \u2264 n.\n-----Input-----\nThe first line contains an integer n (1 \u2264 n \u2264 10^5), the number of elements in a and b.\nThe second line contains n integers a_1, a_2,..., a_{n} (2 \u2264 a_{i} \u2264 10^5), the elements of a.\n-----Output-----\nOutput n space-separated integers, the i-th of them representing b_{i}.\n-----Examples-----\nInput\n5\n2 3 5 4 13\nOutput\n2 3 5 7 11 \nInput\n3\n10 3 7\nOutput\n10 3 7 \n-----Note-----\nNote that in the second sample, the array is already pairwise coprime so we printed it.\n\ndef",
        "answer": "def coprime(a, b):\n    return gcd(a, b) == 1",
        "difficulty": "interview"
    },
    {
        "task_id": 2230,
        "prompt": "Complete the Python function given the prompt below:Gerald has n younger brothers and their number happens to be even. One day he bought n^2 candy bags. One bag has one candy, one bag has two candies, one bag has three candies and so on. In fact, for each integer k from 1 to n^2 he has exactly one bag with k candies. \nHelp him give n bags of candies to each brother so that all brothers got the same number of candies.\n-----Input-----\nThe single line contains a single integer n (n is even, 2 \u2264 n \u2264 100) \u2014 the number of Gerald's brothers.\n-----Output-----\nLet's assume that Gerald indexes his brothers with numbers from 1 to n. You need to print n lines, on the i-th line print n integers \u2014 the numbers of candies in the bags for the i-th brother. Naturally, all these numbers should be distinct and be within limits from 1 to n^2. You can print the numbers in the lines in any order. \nIt is guaranteed that the solution exists at the given limits.\n-----Examples-----\nInput\n2\nOutput\n1 4\n2 3\n-----Note-----\nThe sample shows Gerald's actions if he has two brothers. In this case, his bags contain 1, 2, 3 and 4 candies. He can give the bags with 1 and 4 candies to one brother and the bags with 2 and 3 to the other brother.\n\ndef",
        "answer": "def candies(n):\n    for i in range(1, n**2+1):\n        print(i, end=\" \")",
        "difficulty": "interview"
    },
    {
        "task_id": 2231,
        "prompt": "Complete the Python function given the prompt below:You have $n$ sticks of the given lengths.\nYour task is to choose exactly four of them in such a way that they can form a rectangle. No sticks can be cut to pieces, each side of the rectangle must be formed by a single stick. No stick can be chosen multiple times. It is guaranteed that it is always possible to choose such sticks.\nLet $S$ be the area of the rectangle and $P$ be the perimeter of the rectangle. \nThe chosen rectangle should have the value $\\frac{P^2}{S}$ minimal possible. The value is taken without any rounding.\nIf there are multiple answers, print any of them.\nEach testcase contains several lists of sticks, for each of them you are required to solve the problem separately.\n-----Input-----\nThe first line contains a single integer $T$ ($T \\ge 1$) \u2014 the number of lists of sticks in the testcase.\nThen $2T$ lines follow \u2014 lines $(2i - 1)$ and $2i$ of them describe the $i$-th list. The first line of the pair contains a single integer $n$ ($4 \\le n \\le 10^6$) \u2014 the number of sticks in the $i$-th list. The second line of the pair contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_j \\le 10^4$) \u2014 lengths of the sticks in the $i$-th list.\nIt is guaranteed that for each list there exists a way to choose four sticks so that they form a rectangle.\nThe total number of sticks in all $T$ lists doesn't exceed $10^6$ in each testcase.\n-----Output-----\nPrint $T$ lines. The $i$-th line should contain the answer to the $i$-th list of the input. That is the lengths of the four sticks you choose from the $i$-th list, so that they form a rectangle and the value $\\frac{P^2}{S}$ of this rectangle is minimal possible. You can print these four lengths in arbitrary order.\nIf there are multiple answers, print any of them.\n-----Example-----\nInput\n3\n4\n7 2 2 7\n8\n2 8 1 4 8 2 1 5\n5\n5 5 5 5 5\nOutput\n2 7 7 2\n2 2 1 1\n5 5 5 5\n-----Note-----\nThere is only one way to choose four sticks in the first list, they form a rectangle with sides $2$ and $7$, its area is $2 \\cdot 7 = 14$, perimeter is $2(2 + 7) = 18$. $\\frac{18^2}{14} \\approx 23.143$.\nThe second list contains subsets of four sticks that can form rectangles with sides $(1, 2)$, $(2, 8)$ and $(1, 8)$. Their values are $\\frac{6^2}{2} = 18$, $\\frac{20^2}{16} = 25$ and $\\frac{18^2}{8} = 40.5$, respectively. The minimal one of them is the rectangle $(1, 2)$.\nYou can choose any four of the $5$ given sticks from the third list, they will form a square with side $5$, which is still a rectangle with sides $(5, 5)$.\n\ndef",
        "answer": "def find_rectangle(sticks):\n    sticks.sort()\n    return sticks[0] * sticks[1]",
        "difficulty": "interview"
    },
    {
        "task_id": 2232,
        "prompt": "Complete the Python function given the prompt below:You are given an undirected unweighted tree consisting of $n$ vertices.\nAn undirected tree is a connected undirected graph with $n - 1$ edges.\nYour task is to choose two pairs of vertices of this tree (all the chosen vertices should be distinct) $(x_1, y_1)$ and $(x_2, y_2)$ in such a way that neither $x_1$ nor $y_1$ belong to the simple path from $x_2$ to $y_2$ and vice versa (neither $x_2$ nor $y_2$ should not belong to the simple path from $x_1$ to $y_1$).\nIt is guaranteed that it is possible to choose such pairs for the given tree.\nAmong all possible ways to choose such pairs you have to choose one with the maximum number of common vertices between paths from $x_1$ to $y_1$ and from $x_2$ to $y_2$. And among all such pairs you have to choose one with the maximum total length of these two paths.\nIt is guaranteed that the answer with at least two common vertices exists for the given tree.\nThe length of the path is the number of edges in it.\nThe simple path is the path that visits each vertex at most once.\n-----Input-----\nThe first line contains an integer $n$ \u2014 the number of vertices in the tree ($6 \\le n \\le 2 \\cdot 10^5$).\nEach of the next $n - 1$ lines describes the edges of the tree.\nEdge $i$ is denoted by two integers $u_i$ and $v_i$, the labels of vertices it connects ($1 \\le u_i, v_i \\le n$, $u_i \\ne v_i$).\nIt is guaranteed that the given edges form a tree.\nIt is guaranteed that the answer with at least two common vertices exists for the given tree.\n-----Output-----\nPrint any two pairs of vertices satisfying the conditions described in the problem statement.\nIt is guaranteed that it is possible to choose such pairs for the given tree.\n-----Examples-----\nInput\n7\n1 4\n1 5\n1 6\n2 3\n2 4\n4 7\nOutput\n3 6\n7 5\nInput\n9\n9 3\n3 5\n1 2\n4 3\n4 7\n1 7\n4 6\n3 8\nOutput\n2 9\n6 8\nInput\n10\n6 8\n10 3\n3 7\n5 8\n1 7\n7 2\n2 9\n2 8\n1 4\nOutput\n10 6\n4 5\nInput\n11\n1 2\n2 3\n3 4\n1 5\n1 6\n6 7\n5 8\n5 9\n4 10\n4 11\nOutput\n9 11\n8 10\n-----Note-----\nThe picture corresponding to the first example: [Image]\nThe intersection of two paths is $2$ (vertices $1$ and $4$) and the total length is $4 + 3 = 7$.\nThe picture corresponding to the second example: [Image]\nThe intersection of two paths is $2$ (vertices $3$ and $4$) and the total length is $5 + 3 = 8$.\nThe picture corresponding to the third example: $88^{\\circ}$\nThe intersection of two paths is $3$ (vertices $2$, $7$ and $8$) and the total length is $5 + 5 = 10$.\nThe picture corresponding to the fourth example: $\\$ 8$\nThe intersection of two paths is $5$ (vertices $1$, $2$, $3$, $4$ and $5$) and the total length is $6 + 6 = 12$.\n\ndef",
        "answer": "def solution(n, edges):\n    # Write your code here\n    pass\n",
        "difficulty": "interview"
    },
    {
        "task_id": 2233,
        "prompt": "Complete the Python function given the prompt below:This problem is different from the hard version. In this version Ujan makes exactly one exchange. You can hack this problem only if you solve both problems.\nAfter struggling and failing many times, Ujan decided to try to clean up his house again. He decided to get his strings in order first.\nUjan has two distinct strings $s$ and $t$ of length $n$ consisting of only of lowercase English characters. He wants to make them equal. Since Ujan is lazy, he will perform the following operation exactly once: he takes two positions $i$ and $j$ ($1 \\le i,j \\le n$, the values $i$ and $j$ can be equal or different), and swaps the characters $s_i$ and $t_j$. Can he succeed?\nNote that he has to perform this operation exactly once. He has to perform this operation.\n-----Input-----\nThe first line contains a single integer $k$ ($1 \\leq k \\leq 10$), the number of test cases.\nFor each of the test cases, the first line contains a single integer $n$ ($2 \\leq n \\leq 10^4$), the length of the strings $s$ and $t$. \nEach of the next two lines contains the strings $s$ and $t$, each having length exactly $n$. The strings consist only of lowercase English letters. It is guaranteed that strings are different.\n-----Output-----\nFor each test case, output \"Yes\" if Ujan can make the two strings equal and \"No\" otherwise.\nYou can print each letter in any case (upper or lower).\n-----Example-----\nInput\n4\n5\nsouse\nhouhe\n3\ncat\ndog\n2\naa\naz\n3\nabc\nbca\nOutput\nYes\nNo\nNo\nNo\n-----Note-----\nIn the first test case, Ujan can swap characters $s_1$ and $t_4$, obtaining the word \"house\".\nIn the second test case, it is not possible to make the strings equal using exactly one swap of $s_i$ and $t_j$.\n\ndef",
        "answer": "def solve(s, t):\n    if s == t:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "difficulty": "interview"
    },
    {
        "task_id": 2234,
        "prompt": "Complete the Python function given the prompt below:We have a point $A$ with coordinate $x = n$ on $OX$-axis. We'd like to find an integer point $B$ (also on $OX$-axis), such that the absolute difference between the distance from $O$ to $B$ and the distance from $A$ to $B$ is equal to $k$. [Image] The description of the first test case. \nSince sometimes it's impossible to find such point $B$, we can, in one step, increase or decrease the coordinate of $A$ by $1$. What is the minimum number of steps we should do to make such point $B$ exist?\n-----Input-----\nThe first line contains one integer $t$ ($1 \\le t \\le 6000$)\u00a0\u2014 the number of test cases.\nThe only line of each test case contains two integers $n$ and $k$ ($0 \\le n, k \\le 10^6$)\u00a0\u2014 the initial position of point $A$ and desirable absolute difference.\n-----Output-----\nFor each test case, print the minimum number of steps to make point $B$ exist.\n-----Example-----\nInput\n6\n4 0\n5 8\n0 1000000\n0 0\n1 0\n1000000 1000000\nOutput\n0\n3\n1000000\n0\n1\n0\n-----Note-----\nIn the first test case (picture above), if we set the coordinate of $B$ as $2$ then the absolute difference will be equal to $|(2 - 0) - (4 - 2)| = 0$ and we don't have to move $A$. So the answer is $0$.\nIn the second test case, we can increase the coordinate of $A$ by $3$ and set the coordinate of $B$ as $0$ or $8$. The absolute difference will be equal to $|8 - 0| = 8$, so the answer is $3$. [Image]\n\ndef",
        "answer": "def solve():\n    t = int(input())\n    for _ in range(t):\n        n, k = map(int, input().split())\n        if n == k:\n            print(0)\n            continue\n        if n > k:\n            print(n - k)\n        else:\n            print(k - n)\nif __name__ == \"__main__\":\n    solve()\n",
        "difficulty": "interview"
    },
    {
        "task_id": 2235,
        "prompt": "Complete the Python function given the prompt below:A new innovative ticketing systems for public transport is introduced in Bytesburg. Now there is a single travel card for all transport. To make a trip a passenger scan his card and then he is charged according to the fare.\nThe fare is constructed in the following manner. There are three types of tickets:   a ticket for one trip costs 20 byteland rubles,  a ticket for 90 minutes costs 50 byteland rubles,  a ticket for one day (1440 minutes) costs 120 byteland rubles. \nNote that a ticket for x minutes activated at time t can be used for trips started in time range from t to t + x - 1, inclusive. Assume that all trips take exactly one minute.\nTo simplify the choice for the passenger, the system automatically chooses the optimal tickets. After each trip starts, the system analyses all the previous trips and the current trip and chooses a set of tickets for these trips with a minimum total cost. Let the minimum total cost of tickets to cover all trips from the first to the current is a, and the total sum charged before is b. Then the system charges the passenger the sum a - b.\nYou have to write a program that, for given trips made by a passenger, calculates the sum the passenger is charged after each trip.\n-----Input-----\nThe first line of input contains integer number n (1 \u2264 n \u2264 10^5)\u00a0\u2014 the number of trips made by passenger.\nEach of the following n lines contains the time of trip t_{i} (0 \u2264 t_{i} \u2264 10^9), measured in minutes from the time of starting the system. All t_{i} are different, given in ascending order, i.\u00a0e. t_{i} + 1 > t_{i} holds for all 1 \u2264 i < n.\n-----Output-----\nOutput n integers. For each trip, print the sum the passenger is charged after it.\n-----Examples-----\nInput\n3\n10\n20\n30\nOutput\n20\n20\n10\nInput\n10\n13\n45\n46\n60\n103\n115\n126\n150\n256\n516\nOutput\n20\n20\n10\n0\n20\n0\n0\n20\n20\n10\n-----Note-----\nIn the first example, the system works as follows: for the first and second trips it is cheaper to pay for two one-trip tickets, so each time 20 rubles is charged, after the third trip the system understands that it would be cheaper to buy a ticket for 90 minutes. This ticket costs 50 rubles, and the passenger had already paid 40 rubles, so it is necessary to charge 10 rubles only.\n\ndef",
        "answer": "def tickets(n, t):\n    t = sorted(t)\n    t.append(t[-1] + 1440)\n    t.insert(0, 0)\n    t.append(t[-1] + 1440)\n    t.insert(0, 0)\n    t.append(t[-1] + 1440)\n    t.insert(0, 0)\n    t.append(t[-1] + 1440)\n    t.insert(0, 0)\n    t.append(t[-1] + 1440)\n    t.insert(0, 0)\n    t.append(t[-1] + 1440)\n    t.insert(0, 0)\n    t.append(t[-1] + 1440)\n    t.insert(0, 0)\n    t.append(t[-1] + 1440)\n    t.insert(0, 0)\n    t.append(t[-1] + 1440)\n    t.insert(0, 0)\n    t.append(t[-1] + 1440)\n    t.insert(0, 0)\n    t.append(t[-1] + 1440)\n    t.insert(0, 0)\n    t.append(t[-1] + 1440)\n    t.insert(0, 0)\n    t.append(t[-1] + 1440)\n    t.insert(0, 0)\n    t.append(t[-1] + 1440)\n    t.insert(0, 0)\n    t.append(t[-1] + 1440)\n    t.insert(0, 0)\n    t.append(t[-1] + 1440)\n    t.insert(0, 0)\n    t.append(t[-1] + 1440)\n    t.insert(0, 0)\n    t.append(t[-1] + 1440)\n    t.insert(0, 0)\n    t.append(t[-1] + 1440)\n    t.insert(0, 0)\n    t.append(t[-1] + 1440)\n    t.insert(0, 0)\n    t.append(",
        "difficulty": "interview"
    },
    {
        "task_id": 2236,
        "prompt": "Complete the Python function given the prompt below:There are n banks in the city where Vasya lives, they are located in a circle, such that any two banks are neighbouring if their indices differ by no more than 1. Also, bank 1 and bank n are neighbours if n > 1. No bank is a neighbour of itself.\nVasya has an account in each bank. Its balance may be negative, meaning Vasya owes some money to this bank.\nThere is only one type of operations available: transfer some amount of money from any bank to account in any neighbouring bank. There are no restrictions on the size of the sum being transferred or balance requirements to perform this operation.\nVasya doesn't like to deal with large numbers, so he asks you to determine the minimum number of operations required to change the balance of each bank account to zero. It's guaranteed, that this is possible to achieve, that is, the total balance of Vasya in all banks is equal to zero.\n-----Input-----\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 100 000)\u00a0\u2014 the number of banks.\nThe second line contains n integers a_{i} ( - 10^9 \u2264 a_{i} \u2264 10^9), the i-th of them is equal to the initial balance of the account in the i-th bank. It's guaranteed that the sum of all a_{i} is equal to 0.\n-----Output-----\nPrint the minimum number of operations required to change balance in each bank to zero.\n-----Examples-----\nInput\n3\n5 0 -5\nOutput\n1\nInput\n4\n-1 0 1 0\nOutput\n2\nInput\n4\n1 2 3 -6\nOutput\n3\n-----Note-----\nIn the first sample, Vasya may transfer 5 from the first bank to the third.\nIn the second sample, Vasya may first transfer 1 from the third bank to the second, and then 1 from the second to the first.\nIn the third sample, the following sequence provides the optimal answer:   transfer 1 from the first bank to the second bank;  transfer 3 from the second bank to the third;  transfer 6 from the third bank to the fourth.\n\ndef",
        "answer": "def bank_balance(n, a):\n    # Write your code here\n    bank_balance = [0] * n\n    for i in range(n):\n        bank_balance[i] = a[i]\n    for i in range(n):\n        for j in range(i + 1, n):\n            if abs(bank_balance[i] - bank_balance[j]) <= 1:\n                bank_balance[i] += bank_balance[j]\n                bank_balance[j] = 0\n    return bank_balance",
        "difficulty": "interview"
    },
    {
        "task_id": 2237,
        "prompt": "Complete the Python function given the prompt below:Kuro has just learned about permutations and he is really excited to create a new permutation type. He has chosen $n$ distinct positive integers and put all of them in a set $S$. Now he defines a magical permutation to be: A permutation of integers from $0$ to $2^x - 1$, where $x$ is a non-negative integer.  The bitwise xor of any two consecutive elements in the permutation is an element in $S$.\nSince Kuro is really excited about magical permutations, he wants to create the longest magical permutation possible. In other words, he wants to find the largest non-negative integer $x$ such that there is a magical permutation of integers from $0$ to $2^x - 1$. Since he is a newbie in the subject, he wants you to help him find this value of $x$ and also the magical permutation for that $x$.\n-----Input-----\nThe first line contains the integer $n$ ($1 \\leq n \\leq 2 \\cdot 10^5$)\u00a0\u2014 the number of elements in the set $S$.\nThe next line contains $n$ distinct integers $S_1, S_2, \\ldots, S_n$ ($1 \\leq S_i \\leq 2 \\cdot 10^5$)\u00a0\u2014 the elements in the set $S$.\n-----Output-----\nIn the first line print the largest non-negative integer $x$, such that there is a magical permutation of integers from $0$ to $2^x - 1$.\nThen print $2^x$ integers describing a magical permutation of integers from $0$ to $2^x - 1$. If there are multiple such magical permutations, print any of them.\n-----Examples-----\nInput\n3\n1 2 3\nOutput\n2\n0 1 3 2 \nInput\n2\n2 3\nOutput\n2\n0 2 1 3 \nInput\n4\n1 2 3 4\nOutput\n3\n0 1 3 2 6 7 5 4 \nInput\n2\n2 4\nOutput\n0\n0 \nInput\n1\n20\nOutput\n0\n0 \nInput\n1\n1\nOutput\n1\n0 1 \n-----Note-----\nIn the first example, $0, 1, 3, 2$ is a magical permutation since: $0 \\oplus 1 = 1 \\in S$  $1 \\oplus 3 = 2 \\in S$  $3 \\oplus 2 = 1 \\in S$\nWhere $\\oplus$ denotes bitwise xor operation.\n\ndef",
        "answer": "def magicalPermutation(n, S):\n    # your code here\n    return",
        "difficulty": "interview"
    },
    {
        "task_id": 2238,
        "prompt": "Complete the Python function given the prompt below:Twilight Sparkle once got a crystal from the Crystal Mine. A crystal of size n (n is odd; n > 1) is an n \u00d7 n matrix with a diamond inscribed into it.\nYou are given an odd integer n. You need to draw a crystal of size n. The diamond cells of the matrix should be represented by character \"D\". All other cells of the matrix should be represented by character \"*\". Look at the examples to understand what you need to draw.\n-----Input-----\nThe only line contains an integer n (3 \u2264 n \u2264 101; n is odd). \n-----Output-----\nOutput a crystal of size n.\n-----Examples-----\nInput\n3\nOutput\n*D*\nDDD\n*D*\nInput\n5\nOutput\n**D**\n*DDD*\nDDDDD\n*DDD*\n**D**\nInput\n7\nOutput\n***D***\n**DDD**\n*DDDDD*\nDDDDDDD\n*DDDDD*\n**DDD**\n***D***\n\ndef",
        "answer": "def draw_diamond(n):\n    # your code goes here\n    pass\n",
        "difficulty": "interview"
    },
    {
        "task_id": 2239,
        "prompt": "Complete the Python function given the prompt below:Mishka got a six-faced dice. It has integer numbers from $2$ to $7$ written on its faces (all numbers on faces are different, so this is an almost usual dice).\nMishka wants to get exactly $x$ points by rolling his dice. The number of points is just a sum of numbers written at the topmost face of the dice for all the rolls Mishka makes.\nMishka doesn't really care about the number of rolls, so he just wants to know any number of rolls he can make to be able to get exactly $x$ points for them. Mishka is very lucky, so if the probability to get $x$ points with chosen number of rolls is non-zero, he will be able to roll the dice in such a way. Your task is to print this number. It is guaranteed that at least one answer exists.\nMishka is also very curious about different number of points to score so you have to answer $t$ independent queries.\n-----Input-----\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 100$) \u2014 the number of queries.\nEach of the next $t$ lines contains one integer each. The $i$-th line contains one integer $x_i$ ($2 \\le x_i \\le 100$) \u2014 the number of points Mishka wants to get.\n-----Output-----\nPrint $t$ lines. In the $i$-th line print the answer to the $i$-th query (i.e. any number of rolls Mishka can make to be able to get exactly $x_i$ points for them). It is guaranteed that at least one answer exists.\n-----Example-----\nInput\n4\n2\n13\n37\n100\nOutput\n1\n3\n8\n27\n-----Note-----\nIn the first query Mishka can roll a dice once and get $2$ points.\nIn the second query Mishka can roll a dice $3$ times and get points $5$, $5$ and $3$ (for example).\nIn the third query Mishka can roll a dice $8$ times and get $5$ points $7$ times and $2$ points with the remaining roll.\nIn the fourth query Mishka can roll a dice $27$ times and get $2$ points $11$ times, $3$ points $6$ times and $6$ points $10$ times.\n\ndef",
        "answer": "def solve():\n    n = int(input())\n    for _ in range(n):\n        x = int(input())\n        print(x)",
        "difficulty": "interview"
    },
    {
        "task_id": 2240,
        "prompt": "Complete the Python function given the prompt below:One of Arkady's friends works at a huge radio telescope. A few decades ago the telescope has sent a signal $s$ towards a faraway galaxy. Recently they've received a response $t$ which they believe to be a response from aliens! The scientists now want to check if the signal $t$ is similar to $s$.\nThe original signal $s$ was a sequence of zeros and ones (everyone knows that binary code is the universe-wide language). The returned signal $t$, however, does not look as easy as $s$, but the scientists don't give up! They represented $t$ as a sequence of English letters and say that $t$ is similar to $s$ if you can replace all zeros in $s$ with some string $r_0$ and all ones in $s$ with some other string $r_1$ and obtain $t$. The strings $r_0$ and $r_1$ must be different and non-empty.\nPlease help Arkady's friend and find the number of possible replacements for zeros and ones (the number of pairs of strings $r_0$ and $r_1$) that transform $s$ to $t$.\n-----Input-----\nThe first line contains a string $s$ ($2 \\le |s| \\le 10^5$) consisting of zeros and ones\u00a0\u2014 the original signal.\nThe second line contains a string $t$ ($1 \\le |t| \\le 10^6$) consisting of lowercase English letters only\u00a0\u2014 the received signal.\nIt is guaranteed, that the string $s$ contains at least one '0' and at least one '1'.\n-----Output-----\nPrint a single integer\u00a0\u2014 the number of pairs of strings $r_0$ and $r_1$ that transform $s$ to $t$.\nIn case there are no such pairs, print $0$.\n-----Examples-----\nInput\n01\naaaaaa\nOutput\n4\nInput\n001\nkokokokotlin\nOutput\n2\n-----Note-----\nIn the first example, the possible pairs $(r_0, r_1)$ are as follows:  \"a\", \"aaaaa\"  \"aa\", \"aaaa\"  \"aaaa\", \"aa\"  \"aaaaa\", \"a\"  \nThe pair \"aaa\", \"aaa\" is not allowed, since $r_0$ and $r_1$ must be different.\nIn the second example, the following pairs are possible:   \"ko\", \"kokotlin\"  \"koko\", \"tlin\"\n\ndef",
        "answer": "def solution(s, t):\n    # your code here\n    return 0",
        "difficulty": "interview"
    },
    {
        "task_id": 2241,
        "prompt": "Complete the Python function given the prompt below:Inna is a great piano player and Dima is a modest guitar player. Dima has recently written a song and they want to play it together. Of course, Sereja wants to listen to the song very much. \nA song is a sequence of notes. Dima and Inna want to play each note at the same time. At that, they can play the i-th note at volume v (1 \u2264 v \u2264 a_{i}; v is an integer) both on the piano and the guitar. They should retain harmony, so the total volume with which the i-th note was played on the guitar and the piano must equal b_{i}. If Dima and Inna cannot play a note by the described rules, they skip it and Sereja's joy drops by 1. But if Inna and Dima play the i-th note at volumes x_{i} and y_{i} (x_{i} + y_{i} = b_{i}) correspondingly, Sereja's joy rises by x_{i}\u00b7y_{i}. \nSereja has just returned home from the university and his current joy is 0. Help Dima and Inna play the song so as to maximize Sereja's total joy after listening to the whole song!\n-----Input-----\nThe first line of the input contains integer n (1 \u2264 n \u2264 10^5) \u2014 the number of notes in the song. The second line contains n integers a_{i} (1 \u2264 a_{i} \u2264 10^6). The third line contains n integers b_{i} (1 \u2264 b_{i} \u2264 10^6).\n-----Output-----\nIn a single line print an integer \u2014 the maximum possible joy Sereja feels after he listens to a song.\n-----Examples-----\nInput\n3\n1 1 2\n2 2 3\nOutput\n4\nInput\n1\n2\n5\nOutput\n-1\n-----Note-----\nIn the first sample, Dima and Inna play the first two notes at volume 1 (1 + 1 = 2, the condition holds), they should play the last note at volumes 1 and 2. Sereja's total joy equals: 1\u00b71 + 1\u00b71 + 1\u00b72 = 4.\nIn the second sample, there is no such pair (x, y), that 1 \u2264 x, y \u2264 2, x + y = 5, so Dima and Inna skip a note. Sereja's total joy equals -1.\n\ndef",
        "answer": "def max_joy(n, a, b):\n    if n == 0:\n        return 0\n    if n == 1:\n        return a[0]\n    if n == 2:\n        return max(a[0] + b[1], a[1] + b[0])\n    if n == 3:\n        return max(a[0] + b[2], a[1] + b[1], a[2] + b[0])\n    if n == 4:\n        return max(a[0] + b[3], a[1] + b[2], a[2] + b[1], a[3] + b[0])\n    if n == 5:\n        return max(a[0] + b[4], a[1] + b[3], a[2] + b[2], a[3] + b[1], a[4] + b[0])\n    if n == 6:\n        return max(a[0] + b[5], a[1] + b[4], a[2] + b[3], a[3] + b[2], a[4] + b[1], a[5] + b[0])\n    if n == 7:\n        return max(a[0] + b[6], a[1] + b[5], a[2] + b[4], a[3] + b[3], a[4] + b[2], a[5] + b[1], a[6] + b[0])\n    if n == 8:\n        return max(a[0] + b[7], a[1] + b[6], a[2] + b[5], a[3] + b[4], a[4] + b[3], a[5] + b[2], a[6] + b[1], a[7] + b[0])\n    if n == 9:\n        return max(a[0] + b[8], a[1] + b[7], a[2] + b[6], a[3] + b[5], a[4] + b[4], a[5] + b[3],",
        "difficulty": "interview"
    },
    {
        "task_id": 2242,
        "prompt": "Complete the Python function given the prompt below:Given is a string S consisting of digits from 1 through 9.\nFind the number of pairs of integers (i,j) (1 \u2264 i \u2264 j \u2264 |S|) that satisfy the following condition:\nCondition: In base ten, the i-th through j-th characters of S form an integer that is a multiple of 2019.\n-----Constraints-----\n - 1 \u2264 |S| \u2264 200000\n - S is a string consisting of digits from 1 through 9.\n-----Input-----\nInput is given from Standard Input in the following format:\nS\n-----Output-----\nPrint the number of pairs of integers (i,j) (1 \u2264 i \u2264 j \u2264 |S|) that satisfy the condition.\n-----Sample Input-----\n1817181712114\n-----Sample Output-----\n3\nThree pairs - (1,5), (5,9), and (9,13) - satisfy the condition.\n\ndef",
        "answer": "def count_pairs(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)):\n            if int(s[i:j+1]) % 2019 == 0:\n                count += 1\n    return count",
        "difficulty": "interview"
    },
    {
        "task_id": 2243,
        "prompt": "Complete the Python function given the prompt below:Limak is a little polar bear. He loves connecting with other bears via social networks. He has n friends and his relation with the i-th of them is described by a unique integer t_{i}. The bigger this value is, the better the friendship is. No two friends have the same value t_{i}.\nSpring is starting and the Winter sleep is over for bears. Limak has just woken up and logged in. All his friends still sleep and thus none of them is online. Some (maybe all) of them will appear online in the next hours, one at a time.\nThe system displays friends who are online. On the screen there is space to display at most k friends. If there are more than k friends online then the system displays only k best of them\u00a0\u2014 those with biggest t_{i}.\nYour task is to handle queries of two types:  \"1 id\"\u00a0\u2014 Friend id becomes online. It's guaranteed that he wasn't online before.  \"2 id\"\u00a0\u2014 Check whether friend id is displayed by the system. Print \"YES\" or \"NO\" in a separate line. \nAre you able to help Limak and answer all queries of the second type?\n-----Input-----\nThe first line contains three integers n, k and q (1 \u2264 n, q \u2264 150 000, 1 \u2264 k \u2264 min(6, n))\u00a0\u2014 the number of friends, the maximum number of displayed online friends and the number of queries, respectively.\nThe second line contains n integers t_1, t_2,..., t_{n} (1 \u2264 t_{i} \u2264 10^9) where t_{i} describes how good is Limak's relation with the i-th friend.\nThe i-th of the following q lines contains two integers type_{i} and id_{i} (1 \u2264 type_{i} \u2264 2, 1 \u2264 id_{i} \u2264 n)\u00a0\u2014 the i-th query. If type_{i} = 1 then a friend id_{i} becomes online. If type_{i} = 2 then you should check whether a friend id_{i} is displayed.\nIt's guaranteed that no two queries of the first type will have the same id_{i} becuase one friend can't become online twice. Also, it's guaranteed that at least one query will be of the second type (type_{i} = 2) so the output won't be empty.\n-----Output-----\nFor each query of the second type print one line with the answer\u00a0\u2014 \"YES\" (without quotes) if the given friend is displayed and \"NO\" (without quotes) otherwise.\n-----Examples-----\nInput\n4 2 8\n300 950 500 200\n1 3\n2 4\n2 3\n1 1\n1 2\n2 1\n2 2\n2 3\nOutput\nNO\nYES\nNO\nYES\nYES\nInput\n6 3 9\n50 20 51 17 99 24\n1 3\n1 4\n1 5\n1 2\n2 4\n2 2\n1 1\n2 4\n2 3\nOutput\nNO\nYES\nNO\nYES\n-----Note-----\nIn the first sample, Limak has 4 friends who all sleep initially. At first, the system displays nobody because nobody is online. There are the following 8 queries:  \"1 3\"\u00a0\u2014 Friend 3 becomes online.  \"2 4\"\u00a0\u2014 We should check if friend 4 is displayed. He isn't even online and thus we print \"NO\".  \"2 3\"\u00a0\u2014 We should check if friend 3 is displayed. Right now he is the only friend online and the system displays him. We should print \"YES\".  \"1 1\"\u00a0\u2014 Friend 1 becomes online. The system now displays both friend 1 and friend 3.  \"1 2\"\u00a0\u2014 Friend 2 becomes online. There are 3 friends online now but we were given k = 2 so only two friends can be displayed. Limak has worse relation with friend 1 than with other two online friends (t_1 < t_2, t_3) so friend 1 won't be displayed  \"2 1\"\u00a0\u2014 Print \"NO\".  \"2 2\"\u00a0\u2014 Print \"YES\".  \"2 3\"\u00a0\u2014 Print \"YES\".\n\ndef",
        "answer": "def online_friends(n, k, q):\n    friends = [0] * n\n    for i in range(n):\n        friends[i] = [i, 0]\n    for i in range(q):\n        type, id = map(int, input().split())\n        if type == 1:\n            friends[id][1] += 1\n        else:\n            if friends[id][1] > 0:\n                print('YES')\n            else:\n                print('NO')",
        "difficulty": "interview"
    },
    {
        "task_id": 2244,
        "prompt": "Complete the Python function given the prompt below:The employees of the R1 company often spend time together: they watch football, they go camping, they solve contests. So, it's no big deal that sometimes someone pays for someone else.\nToday is the day of giving out money rewards. The R1 company CEO will invite employees into his office one by one, rewarding each one for the hard work this month. The CEO knows who owes money to whom. And he also understands that if he invites person x to his office for a reward, and then immediately invite person y, who has lent some money to person x, then they can meet. Of course, in such a situation, the joy of person x from his brand new money reward will be much less. Therefore, the R1 CEO decided to invite the staff in such an order that the described situation will not happen for any pair of employees invited one after another.\nHowever, there are a lot of employees in the company, and the CEO doesn't have a lot of time. Therefore, the task has been assigned to you. Given the debt relationships between all the employees, determine in which order they should be invited to the office of the R1 company CEO, or determine that the described order does not exist.\n-----Input-----\nThe first line contains space-separated integers n and m $(2 \\leq n \\leq 3 \\cdot 10^{4} ; 1 \\leq m \\leq \\operatorname{min}(10^{5}, \\frac{n(n - 1)}{2}))$ \u2014 the number of employees in R1 and the number of debt relations. Each of the following m lines contains two space-separated integers a_{i}, b_{i} (1 \u2264 a_{i}, b_{i} \u2264 n;\u00a0a_{i} \u2260 b_{i}), these integers indicate that the person number a_{i} owes money to a person a number b_{i}. Assume that all the employees are numbered from 1 to n.\nIt is guaranteed that each pair of people p, q is mentioned in the input data at most once. In particular, the input data will not contain pairs p, q and q, p simultaneously.\n-----Output-----\nPrint -1 if the described order does not exist. Otherwise, print the permutation of n distinct integers. The first number should denote the number of the person who goes to the CEO office first, the second number denote the person who goes second and so on.\nIf there are multiple correct orders, you are allowed to print any of them.\n-----Examples-----\nInput\n2 1\n1 2\nOutput\n2 1 \nInput\n3 3\n1 2\n2 3\n3 1\nOutput\n2 1 3\n\ndef",
        "answer": "def find_order(n, m):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2245,
        "prompt": "Complete the Python function given the prompt below:Alice and Bob play a game. There is a paper strip which is divided into n + 1 cells numbered from left to right starting from 0. There is a chip placed in the n-th cell (the last one).\nPlayers take turns, Alice is first. Each player during his or her turn has to move the chip 1, 2 or k cells to the left (so, if the chip is currently in the cell i, the player can move it into cell i - 1, i - 2 or i - k). The chip should not leave the borders of the paper strip: it is impossible, for example, to move it k cells to the left if the current cell has number i < k. The player who can't make a move loses the game.\nWho wins if both participants play optimally?\nAlice and Bob would like to play several games, so you should determine the winner in each game.\n-----Input-----\nThe first line contains the single integer T (1 \u2264 T \u2264 100) \u2014 the number of games. Next T lines contain one game per line. All games are independent.\nEach of the next T lines contains two integers n and k (0 \u2264 n \u2264 10^9, 3 \u2264 k \u2264 10^9) \u2014 the length of the strip and the constant denoting the third move, respectively.\n-----Output-----\nFor each game, print Alice if Alice wins this game and Bob otherwise.\n-----Example-----\nInput\n4\n0 3\n3 3\n3 4\n4 4\nOutput\nBob\nAlice\nBob\nAlice\n\ndef",
        "answer": "def main():\n    t = int(input())\n    for _ in range(t):\n        n, k = map(int, input().split())\n        print('Bob' if n % k == 0 else 'Alice')",
        "difficulty": "interview"
    },
    {
        "task_id": 2246,
        "prompt": "Complete the Python function given the prompt below:There are n cities and n - 1 roads in the Seven Kingdoms, each road connects two cities and we can reach any city from any other by the roads.\nTheon and Yara Greyjoy are on a horse in the first city, they are starting traveling through the roads. But the weather is foggy, so they can\u2019t see where the horse brings them. When the horse reaches a city (including the first one), it goes to one of the cities connected to the current city. But it is a strange horse, it only goes to cities in which they weren't before. In each such city, the horse goes with equal probabilities and it stops when there are no such cities. \nLet the length of each road be 1. The journey starts in the city 1. What is the expected length (expected value of length) of their journey? You can read about expected (average) value by the link https://en.wikipedia.org/wiki/Expected_value.\n-----Input-----\nThe first line contains a single integer n (1 \u2264 n \u2264 100000)\u00a0\u2014 number of cities.\nThen n - 1 lines follow. The i-th line of these lines contains two integers u_{i} and v_{i} (1 \u2264 u_{i}, v_{i} \u2264 n, u_{i} \u2260 v_{i})\u00a0\u2014 the cities connected by the i-th road.\nIt is guaranteed that one can reach any city from any other by the roads.\n-----Output-----\nPrint a number\u00a0\u2014 the expected length of their journey. The journey starts in the city 1.\nYour answer will be considered correct if its absolute or relative error does not exceed 10^{ - 6}.\nNamely: let's assume that your answer is a, and the answer of the jury is b. The checker program will consider your answer correct, if $\\frac{|a - b|}{\\operatorname{max}(1, b)} \\leq 10^{-6}$.\n-----Examples-----\nInput\n4\n1 2\n1 3\n2 4\nOutput\n1.500000000000000\nInput\n5\n1 2\n1 3\n3 4\n2 5\nOutput\n2.000000000000000\n-----Note-----\nIn the first sample, their journey may end in cities 3 or 4 with equal probability. The distance to city 3 is 1 and to city 4 is 2, so the expected length is 1.5.\nIn the second sample, their journey may end in city 4 or 5. The distance to the both cities is 2, so the expected length is 2.\n\ndef",
        "answer": "def expected_length(n):\n    roads = []\n    for i in range(n - 1):\n        roads.append(list(map(int, input().split())))\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[1])\n    roads.sort(key=lambda x: x[0] - x[1])\n    roads.sort(key=lambda x: x[1] - x[0])\n    roads.sort(key=lambda x: x[0] - x[1])\n    roads.sort(key=lambda x: x[1] - x[0])\n    roads.sort(key=lambda x: x[0] - x[1])\n    roads.sort(key=lambda x: x[1] - x[0])\n    roads.sort(key=lambda x: x[0] - x[1])\n    roads.sort(key=lambda x: x[1] - x[0])\n    roads.sort(key=lambda x: x[0] - x[1])\n    roads.sort(key=lambda x: x[1] - x[0])\n    roads.sort(key=lambda x: x[0] - x[1])\n    roads.sort(key=lambda x: x[1] - x[0])\n    roads.sort(key=lambda x: x[0] - x[1])\n    roads.sort(key=lambda x: x[1] - x[0])\n    roads.sort(key=lambda x: x[0] - x[1])\n    roads.sort(key=lambda x: x[1] - x[0])\n    roads.sort(key=lambda x: x[0] - x[1])\n    roads.sort(key=lambda x: x[1] - x[0])\n    roads.sort(key=lambda x: x[0] - x[1])\n    roads.sort(key=lambda x: x[1] - x[0])\n    roads.sort(key=lambda x: x[0] - x[1])\n    roads.sort(key=lambda x:",
        "difficulty": "interview"
    },
    {
        "task_id": 2247,
        "prompt": "Complete the Python function given the prompt below:There is a special offer in Vasya's favourite supermarket: if the customer buys $a$ chocolate bars, he or she may take $b$ additional bars for free. This special offer can be used any number of times.\nVasya currently has $s$ roubles, and he wants to get as many chocolate bars for free. Each chocolate bar costs $c$ roubles. Help Vasya to calculate the maximum possible number of chocolate bars he can get!\n-----Input-----\nThe first line contains one integer $t$ ($1 \\le t \\le 100$) \u2014 the number of testcases.\nEach of the next $t$ lines contains four integers $s, a, b, c~(1 \\le s, a, b, c \\le 10^9)$ \u2014 the number of roubles Vasya has, the number of chocolate bars you have to buy to use the special offer, the number of bars you get for free, and the cost of one bar, respectively.\n-----Output-----\nPrint $t$ lines. $i$-th line should contain the maximum possible number of chocolate bars Vasya can get in $i$-th test.\n-----Example-----\nInput\n2\n10 3 1 1\n1000000000 1 1000000000 1\nOutput\n13\n1000000001000000000\n-----Note-----\nIn the first test of the example Vasya can buy $9$ bars, get $3$ for free, buy another bar, and so he will get $13$ bars.\nIn the second test Vasya buys $1000000000$ bars and gets $1000000000000000000$ for free. So he has $1000000001000000000$ bars.\n\ndef",
        "answer": "def solve(s, a, b, c):\n    return s // c + (s % c) // a + (s % c % a) // b",
        "difficulty": "interview"
    },
    {
        "task_id": 2248,
        "prompt": "Complete the Python function given the prompt below:Further research on zombie thought processes yielded interesting results. As we know from the previous problem, the nervous system of a zombie consists of n brains and m brain connectors joining some pairs of brains together. It was observed that the intellectual abilities of a zombie depend mainly on the topology of its nervous system. More precisely, we define the distance between two brains u and v (1 \u2264 u, v \u2264 n) as the minimum number of brain connectors used when transmitting a thought between these two brains. The brain latency of a zombie is defined to be the maximum distance between any two of its brains. Researchers conjecture that the brain latency is the crucial parameter which determines how smart a given zombie is. Help them test this conjecture by writing a program to compute brain latencies of nervous systems.\nIn this problem you may assume that any nervous system given in the input is valid, i.e., it satisfies conditions (1) and (2) from the easy version.\n-----Input-----\nThe first line of the input contains two space-separated integers n and m (1 \u2264 n, m \u2264 100000) denoting the number of brains (which are conveniently numbered from 1 to n) and the number of brain connectors in the nervous system, respectively. In the next m lines, descriptions of brain connectors follow. Every connector is given as a pair of brains a\u2002b it connects (1 \u2264 a, b \u2264 n and a \u2260 b).\n-----Output-----\nPrint one number \u2013 the brain latency.\n-----Examples-----\nInput\n4 3\n1 2\n1 3\n1 4\nOutput\n2\nInput\n5 4\n1 2\n2 3\n3 4\n3 5\nOutput\n3\n\ndef",
        "answer": "def solution(n, m):\n    # Write your code here\n    pass\n",
        "difficulty": "interview"
    },
    {
        "task_id": 2249,
        "prompt": "Complete the Python function given the prompt below:Since Sonya is interested in robotics too, she decided to construct robots that will read and recognize numbers.\nSonya has drawn $n$ numbers in a row, $a_i$ is located in the $i$-th position. She also has put a robot at each end of the row (to the left of the first number and to the right of the last number). Sonya will give a number to each robot (they can be either same or different) and run them. When a robot is running, it is moving toward to another robot, reading numbers in the row. When a robot is reading a number that is equal to the number that was given to that robot, it will turn off and stay in the same position.\nSonya does not want robots to break, so she will give such numbers that robots will stop before they meet. That is, the girl wants them to stop at different positions so that the first robot is to the left of the second one.\nFor example, if the numbers $[1, 5, 4, 1, 3]$ are written, and Sonya gives the number $1$ to the first robot and the number $4$ to the second one, the first robot will stop in the $1$-st position while the second one in the $3$-rd position. In that case, robots will not meet each other. As a result, robots will not be broken. But if Sonya gives the number $4$ to the first robot and the number $5$ to the second one, they will meet since the first robot will stop in the $3$-rd position while the second one is in the $2$-nd position.\nSonya understands that it does not make sense to give a number that is not written in the row because a robot will not find this number and will meet the other robot.\nSonya is now interested in finding the number of different pairs that she can give to robots so that they will not meet. In other words, she wants to know the number of pairs ($p$, $q$), where she will give $p$ to the first robot and $q$ to the second one. Pairs ($p_i$, $q_i$) and ($p_j$, $q_j$) are different if $p_i\\neq p_j$ or $q_i\\neq q_j$.\nUnfortunately, Sonya is busy fixing robots that broke after a failed launch. That is why she is asking you to find the number of pairs that she can give to robots so that they will not meet.\n-----Input-----\nThe first line contains a single integer $n$ ($1\\leq n\\leq 10^5$)\u00a0\u2014 the number of numbers in a row.\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1\\leq a_i\\leq 10^5$)\u00a0\u2014 the numbers in a row.\n-----Output-----\nPrint one number\u00a0\u2014 the number of possible pairs that Sonya can give to robots so that they will not meet.\n-----Examples-----\nInput\n5\n1 5 4 1 3\nOutput\n9\nInput\n7\n1 2 1 1 1 3 2\nOutput\n7\n-----Note-----\nIn the first example, Sonya can give pairs ($1$, $1$), ($1$, $3$), ($1$, $4$), ($1$, $5$), ($4$, $1$), ($4$, $3$), ($5$, $1$), ($5$, $3$), and ($5$, $4$).\nIn the second example, Sonya can give pairs ($1$, $1$), ($1$, $2$), ($1$, $3$), ($2$, $1$), ($2$, $2$), ($2$, $3$), and ($3$, $2$).\n\ndef",
        "answer": "def count_pairs(n, a):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i]!= a[j]:\n                count += 1\n    return count",
        "difficulty": "interview"
    },
    {
        "task_id": 2250,
        "prompt": "Complete the Python function given the prompt below:Omkar is playing his favorite pixelated video game, Bed Wars! In Bed Wars, there are $n$ players arranged in a circle, so that for all $j$ such that $2 \\leq j \\leq n$, player $j - 1$ is to the left of the player $j$, and player $j$ is to the right of player $j - 1$. Additionally, player $n$ is to the left of player $1$, and player $1$ is to the right of player $n$.\nCurrently, each player is attacking either the player to their left or the player to their right. This means that each player is currently being attacked by either $0$, $1$, or $2$ other players. A key element of Bed Wars strategy is that if a player is being attacked by exactly $1$ other player, then they should logically attack that player in response. If instead a player is being attacked by $0$ or $2$ other players, then Bed Wars strategy says that the player can logically attack either of the adjacent players.\nUnfortunately, it might be that some players in this game are not following Bed Wars strategy correctly. Omkar is aware of whom each player is currently attacking, and he can talk to any amount of the $n$ players in the game to make them instead attack another player \u00a0\u2014 i. e. if they are currently attacking the player to their left, Omkar can convince them to instead attack the player to their right; if they are currently attacking the player to their right, Omkar can convince them to instead attack the player to their left. \nOmkar would like all players to be acting logically. Calculate the minimum amount of players that Omkar needs to talk to so that after all players he talked to (if any) have changed which player they are attacking, all players are acting logically according to Bed Wars strategy.\n-----Input-----\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$). The descriptions of the test cases follows.\nThe first line of each test case contains one integer $n$ ($3 \\leq n \\leq 2 \\cdot 10^5$) \u00a0\u2014 the amount of players (and therefore beds) in this game of Bed Wars.\nThe second line of each test case contains a string $s$ of length $n$. The $j$-th character of $s$ is equal to L if the $j$-th player is attacking the player to their left, and R if the $j$-th player is attacking the player to their right.\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n-----Output-----\nFor each test case, output one integer: the minimum number of players Omkar needs to talk to to make it so that all players are acting logically according to Bed Wars strategy.\nIt can be proven that it is always possible for Omkar to achieve this under the given constraints.\n-----Example-----\nInput\n5\n4\nRLRL\n6\nLRRRRL\n8\nRLLRRRLL\n12\nLLLLRRLRRRLL\n5\nRRRRR\nOutput\n0\n1\n1\n3\n2\n-----Note-----\nIn the first test case, players $1$ and $2$ are attacking each other, and players $3$ and $4$ are attacking each other. Each player is being attacked by exactly $1$ other player, and each player is attacking the player that is attacking them, so all players are already being logical according to Bed Wars strategy and Omkar does not need to talk to any of them, making the answer $0$.\nIn the second test case, not every player acts logically: for example, player $3$ is attacked only by player $2$, but doesn't attack him in response. Omkar can talk to player $3$ to convert the attack arrangement to LRLRRL, in which you can see that all players are being logical according to Bed Wars strategy, making the answer $1$.\n\ndef",
        "answer": "def solve(n, s):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2251,
        "prompt": "Complete the Python function given the prompt below:Mr. Kitayuta has just bought an undirected graph consisting of n vertices and m edges. The vertices of the graph are numbered from 1 to n. Each edge, namely edge i, has a color c_{i}, connecting vertex a_{i} and b_{i}.\nMr. Kitayuta wants you to process the following q queries.\nIn the i-th query, he gives you two integers \u2014 u_{i} and v_{i}.\nFind the number of the colors that satisfy the following condition: the edges of that color connect vertex u_{i} and vertex v_{i} directly or indirectly.\n-----Input-----\nThe first line of the input contains space-separated two integers \u2014 n and m (2 \u2264 n \u2264 100, 1 \u2264 m \u2264 100), denoting the number of the vertices and the number of the edges, respectively.\nThe next m lines contain space-separated three integers \u2014 a_{i}, b_{i} (1 \u2264 a_{i} < b_{i} \u2264 n) and c_{i} (1 \u2264 c_{i} \u2264 m). Note that there can be multiple edges between two vertices. However, there are no multiple edges of the same color between two vertices, that is, if i \u2260 j, (a_{i}, b_{i}, c_{i}) \u2260 (a_{j}, b_{j}, c_{j}).\nThe next line contains a integer \u2014 q (1 \u2264 q \u2264 100), denoting the number of the queries.\nThen follows q lines, containing space-separated two integers \u2014 u_{i} and v_{i} (1 \u2264 u_{i}, v_{i} \u2264 n). It is guaranteed that u_{i} \u2260 v_{i}.\n-----Output-----\nFor each query, print the answer in a separate line.\n-----Examples-----\nInput\n4 5\n1 2 1\n1 2 2\n2 3 1\n2 3 3\n2 4 3\n3\n1 2\n3 4\n1 4\nOutput\n2\n1\n0\nInput\n5 7\n1 5 1\n2 5 1\n3 5 1\n4 5 1\n1 2 2\n2 3 2\n3 4 2\n5\n1 5\n5 1\n2 5\n1 5\n1 4\nOutput\n1\n1\n1\n1\n2\n-----Note-----\nLet's consider the first sample.  [Image]   The figure above shows the first sample.    Vertex 1 and vertex 2 are connected by color 1 and 2.  Vertex 3 and vertex 4 are connected by color 3.  Vertex 1 and vertex 4 are not connected by any single color.\n\ndef",
        "answer": "def count_colors(n, m, edges, q):\n    graph = defaultdict(list)\n    for a, b, c in edges:\n        graph[a].append((b, c))\n        graph[b].append((a, c))\n    colors = [0] * (n + 1)\n    for i in xrange(1, n + 1):\n        colors[i] = 1\n        stack = [i]\n        while stack:\n            node = stack.pop()\n            for neighbor, color in graph[node]:\n                if colors[neighbor] == 0:\n                    colors[neighbor] = -colors[node]\n                    stack.append(neighbor)\n                elif colors[neighbor] == colors[node]:\n                    return 0\n    return sum(colors)",
        "difficulty": "interview"
    },
    {
        "task_id": 2252,
        "prompt": "Complete the Python function given the prompt below:Vladik had started reading a complicated book about algorithms containing n pages. To improve understanding of what is written, his friends advised him to read pages in some order given by permutation P = [p_1, p_2,..., p_{n}], where p_{i} denotes the number of page that should be read i-th in turn.\nSometimes Vladik\u2019s mom sorted some subsegment of permutation P from position l to position r inclusive, because she loves the order. For every of such sorting Vladik knows number x\u00a0\u2014 what index of page in permutation he should read. He is wondered if the page, which he will read after sorting, has changed. In other words, has p_{x} changed? After every sorting Vladik return permutation to initial state, so you can assume that each sorting is independent from each other.\n-----Input-----\nFirst line contains two space-separated integers n, m (1 \u2264 n, m \u2264 10^4)\u00a0\u2014 length of permutation and number of times Vladik's mom sorted some subsegment of the book.\nSecond line contains n space-separated integers p_1, p_2,..., p_{n} (1 \u2264 p_{i} \u2264 n)\u00a0\u2014 permutation P. Note that elements in permutation are distinct.\nEach of the next m lines contains three space-separated integers l_{i}, r_{i}, x_{i} (1 \u2264 l_{i} \u2264 x_{i} \u2264 r_{i} \u2264 n)\u00a0\u2014 left and right borders of sorted subsegment in i-th sorting and position that is interesting to Vladik.\n-----Output-----\nFor each mom\u2019s sorting on it\u2019s own line print \"Yes\", if page which is interesting to Vladik hasn't changed, or \"No\" otherwise.\n-----Examples-----\nInput\n5 5\n5 4 3 2 1\n1 5 3\n1 3 1\n2 4 3\n4 4 4\n2 5 3\nOutput\nYes\nNo\nYes\nYes\nNo\nInput\n6 5\n1 4 3 2 5 6\n2 4 3\n1 6 2\n4 5 4\n1 3 3\n2 6 3\nOutput\nYes\nNo\nYes\nNo\nYes\n-----Note-----\nExplanation of first test case:   [1, 2, 3, 4, 5]\u00a0\u2014 permutation after sorting, 3-rd element hasn\u2019t changed, so answer is \"Yes\".  [3, 4, 5, 2, 1]\u00a0\u2014 permutation after sorting, 1-st element has changed, so answer is \"No\".  [5, 2, 3, 4, 1]\u00a0\u2014 permutation after sorting, 3-rd element hasn\u2019t changed, so answer is \"Yes\".  [5, 4, 3, 2, 1]\u00a0\u2014 permutation after sorting, 4-th element hasn\u2019t changed, so answer is \"Yes\".  [5, 1, 2, 3, 4]\u00a0\u2014 permutation after sorting, 3-rd element has changed, so answer is \"No\".\n\ndef",
        "answer": "def solve():\n    n, m = map(int, input().split())\n    P = list(map(int, input().split()))\n    for _ in range(m):\n        l, r, x = map(int, input().split())\n        if P[l-1]!= x:\n            print(\"No\")\n            return\n        P[l-1:r] = sorted(P[l-1:r])\n    print(\"Yes\")",
        "difficulty": "interview"
    },
    {
        "task_id": 2253,
        "prompt": "Complete the Python function given the prompt below:We just discovered a new data structure in our research group: a suffix three!\nIt's very useful for natural language processing. Given three languages and three suffixes, a suffix three can determine which language a sentence is written in.\nIt's super simple, 100% accurate, and doesn't involve advanced machine learning algorithms.\nLet us tell you how it works.\n  If a sentence ends with \"po\" the language is Filipino.  If a sentence ends with \"desu\" or \"masu\" the language is Japanese.  If a sentence ends with \"mnida\" the language is Korean. \nGiven this, we need you to implement a suffix three that can differentiate Filipino, Japanese, and Korean.\nOh, did I say three suffixes? I meant four.\n-----Input-----\nThe first line of input contains a single integer $t$ ($1 \\leq t \\leq 30$) denoting the number of test cases. The next lines contain descriptions of the test cases. \nEach test case consists of a single line containing a single string denoting the sentence. Spaces are represented as underscores (the symbol \"_\") for ease of reading. The sentence has at least $1$ and at most $1000$ characters, and consists only of lowercase English letters and underscores. The sentence has no leading or trailing underscores and no two consecutive underscores. It is guaranteed that the sentence ends with one of the four suffixes mentioned above.\n-----Output-----\nFor each test case, print a single line containing either \"FILIPINO\", \"JAPANESE\", or \"KOREAN\" (all in uppercase, without quotes), depending on the detected language.\n-----Example-----\nInput\n8\nkamusta_po\ngenki_desu\nohayou_gozaimasu\nannyeong_hashimnida\nhajime_no_ippo\nbensamu_no_sentou_houhou_ga_okama_kenpo\nang_halaman_doon_ay_sarisari_singkamasu\nsi_roy_mustang_ay_namamasu\nOutput\nFILIPINO\nJAPANESE\nJAPANESE\nKOREAN\nFILIPINO\nFILIPINO\nJAPANESE\nJAPANESE\n-----Note-----\nThe first sentence ends with \"po\", so it is written in Filipino.\nThe second and third sentences end with \"desu\" and \"masu\", so they are written in Japanese.\nThe fourth sentence ends with \"mnida\", so it is written in Korean.\n\ndef",
        "answer": "def solve(s):\n    if s.endswith('po'):\n        return 'FILIPINO'\n    elif s.endswith('desu') or s.endswith('masu'):\n        return 'JAPANESE'\n    elif s.endswith('mnida'):\n        return 'KOREAN'\n    else:\n        return 'UNKNOWN'",
        "difficulty": "interview"
    },
    {
        "task_id": 2254,
        "prompt": "Complete the Python function given the prompt below:Vasya has a sequence $a$ consisting of $n$ integers $a_1, a_2, \\dots, a_n$. Vasya may pefrom the following operation: choose some number from the sequence and swap any pair of bits in its binary representation. For example, Vasya can transform number $6$ $(\\dots 00000000110_2)$ into $3$ $(\\dots 00000000011_2)$, $12$ $(\\dots 000000001100_2)$, $1026$ $(\\dots 10000000010_2)$ and many others. Vasya can use this operation any (possibly zero) number of times on any number from the sequence.\nVasya names a sequence as good one, if, using operation mentioned above, he can obtain the sequence with bitwise exclusive or of all elements equal to $0$.\nFor the given sequence $a_1, a_2, \\ldots, a_n$ Vasya'd like to calculate number of integer pairs $(l, r)$ such that $1 \\le l \\le r \\le n$ and sequence $a_l, a_{l + 1}, \\dots, a_r$ is good.\n-----Input-----\nThe first line contains a single integer $n$ ($1 \\le n \\le 3 \\cdot 10^5$) \u2014 length of the sequence.\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^{18}$) \u2014 the sequence $a$.\n-----Output-----\nPrint one integer \u2014 the number of pairs $(l, r)$ such that $1 \\le l \\le r \\le n$ and the sequence $a_l, a_{l + 1}, \\dots, a_r$ is good.\n-----Examples-----\nInput\n3\n6 7 14\nOutput\n2\nInput\n4\n1 2 1 16\nOutput\n4\n-----Note-----\nIn the first example pairs $(2, 3)$ and $(1, 3)$ are valid. Pair $(2, 3)$ is valid since $a_2 = 7 \\rightarrow 11$, $a_3 = 14 \\rightarrow 11$ and $11 \\oplus 11 = 0$, where $\\oplus$ \u2014 bitwise exclusive or. Pair $(1, 3)$ is valid since $a_1 = 6 \\rightarrow 3$, $a_2 = 7 \\rightarrow 13$, $a_3 = 14 \\rightarrow 14$ and $3 \\oplus 13 \\oplus 14 = 0$.\nIn the second example pairs $(1, 2)$, $(2, 3)$, $(3, 4)$ and $(1, 4)$ are valid.\n\ndef",
        "answer": "def good_pairs(n, a):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] ^ a[j] == 0:\n                count += 1\n    return count",
        "difficulty": "interview"
    },
    {
        "task_id": 2255,
        "prompt": "Complete the Python function given the prompt below:Lunar New Year is approaching, and Bob decides to take a wander in a nearby park.\nThe park can be represented as a connected graph with $n$ nodes and $m$ bidirectional edges. Initially Bob is at the node $1$ and he records $1$ on his notebook. He can wander from one node to another through those bidirectional edges. Whenever he visits a node not recorded on his notebook, he records it. After he visits all nodes at least once, he stops wandering, thus finally a permutation of nodes $a_1, a_2, \\ldots, a_n$ is recorded.\nWandering is a boring thing, but solving problems is fascinating. Bob wants to know the lexicographically smallest sequence of nodes he can record while wandering. Bob thinks this problem is trivial, and he wants you to solve it.\nA sequence $x$ is lexicographically smaller than a sequence $y$ if and only if one of the following holds:   $x$ is a prefix of $y$, but $x \\ne y$ (this is impossible in this problem as all considered sequences have the same length);  in the first position where $x$ and $y$ differ, the sequence $x$ has a smaller element than the corresponding element in $y$. \n-----Input-----\nThe first line contains two positive integers $n$ and $m$ ($1 \\leq n, m \\leq 10^5$), denoting the number of nodes and edges, respectively.\nThe following $m$ lines describe the bidirectional edges in the graph. The $i$-th of these lines contains two integers $u_i$ and $v_i$ ($1 \\leq u_i, v_i \\leq n$), representing the nodes the $i$-th edge connects.\nNote that the graph can have multiple edges connecting the same two nodes and self-loops. It is guaranteed that the graph is connected.\n-----Output-----\nOutput a line containing the lexicographically smallest sequence $a_1, a_2, \\ldots, a_n$ Bob can record.\n-----Examples-----\nInput\n3 2\n1 2\n1 3\nOutput\n1 2 3 \nInput\n5 5\n1 4\n3 4\n5 4\n3 2\n1 5\nOutput\n1 4 3 2 5 \nInput\n10 10\n1 4\n6 8\n2 5\n3 7\n9 4\n5 6\n3 4\n8 10\n8 9\n1 10\nOutput\n1 4 3 7 9 8 6 5 2 10 \n-----Note-----\nIn the first sample, Bob's optimal wandering path could be $1 \\rightarrow 2 \\rightarrow 1 \\rightarrow 3$. Therefore, Bob will obtain the sequence $\\{1, 2, 3\\}$, which is the lexicographically smallest one.\nIn the second sample, Bob's optimal wandering path could be $1 \\rightarrow 4 \\rightarrow 3 \\rightarrow 2 \\rightarrow 3 \\rightarrow 4 \\rightarrow 1 \\rightarrow 5$. Therefore, Bob will obtain the sequence $\\{1, 4, 3, 2, 5\\}$, which is the lexicographically smallest one.\n\ndef",
        "answer": "def solution(n, m, edges):\n    # Write your code here",
        "difficulty": "interview"
    },
    {
        "task_id": 2256,
        "prompt": "Complete the Python function given the prompt below:You are the gym teacher in the school.\nThere are $n$ students in the row. And there are two rivalling students among them. The first one is in position $a$, the second in position $b$. Positions are numbered from $1$ to $n$ from left to right.\nSince they are rivals, you want to maximize the distance between them. If students are in positions $p$ and $s$ respectively, then distance between them is $|p - s|$. \nYou can do the following operation at most $x$ times: choose two adjacent (neighbouring) students and swap them.\nCalculate the maximum distance between two rivalling students after at most $x$ swaps.\n-----Input-----\nThe first line contains one integer $t$ ($1 \\le t \\le 100$) \u2014 the number of test cases.\nThe only line of each test case contains four integers $n$, $x$, $a$ and $b$ ($2 \\le n \\le 100$, $0 \\le x \\le 100$, $1 \\le a, b \\le n$, $a \\neq b$) \u2014 the number of students in the row, the number of swaps which you can do, and positions of first and second rivaling students respectively.\n-----Output-----\nFor each test case print one integer \u2014 the maximum distance between two rivaling students which you can obtain.\n-----Example-----\nInput\n3\n5 1 3 2\n100 33 100 1\n6 0 2 3\nOutput\n2\n99\n1\n-----Note-----\nIn the first test case you can swap students in positions $3$ and $4$. And then the distance between the rivals is equal to $|4 - 2| = 2$.\nIn the second test case you don't have to swap students. \nIn the third test case you can't swap students.\n\ndef",
        "answer": "def max_distance(n, x, a, b):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2257,
        "prompt": "Complete the Python function given the prompt below:A flowerbed has many flowers and two fountains.\nYou can adjust the water pressure and set any values r_1(r_1 \u2265 0) and r_2(r_2 \u2265 0), giving the distances at which the water is spread from the first and second fountain respectively. You have to set such r_1 and r_2 that all the flowers are watered, that is, for each flower, the distance between the flower and the first fountain doesn't exceed r_1, or the distance to the second fountain doesn't exceed r_2. It's OK if some flowers are watered by both fountains.\nYou need to decrease the amount of water you need, that is set such r_1 and r_2 that all the flowers are watered and the r_1^2 + r_2^2 is minimum possible. Find this minimum value.\n-----Input-----\nThe first line of the input contains integers n, x_1, y_1, x_2, y_2 (1 \u2264 n \u2264 2000,  - 10^7 \u2264 x_1, y_1, x_2, y_2 \u2264 10^7)\u00a0\u2014 the number of flowers, the coordinates of the first and the second fountain.\nNext follow n lines. The i-th of these lines contains integers x_{i} and y_{i} ( - 10^7 \u2264 x_{i}, y_{i} \u2264 10^7)\u00a0\u2014 the coordinates of the i-th flower.\nIt is guaranteed that all n + 2 points in the input are distinct.\n-----Output-----\nPrint the minimum possible value r_1^2 + r_2^2. Note, that in this problem optimal answer is always integer.\n-----Examples-----\nInput\n2 -1 0 5 3\n0 2\n5 2\nOutput\n6\nInput\n4 0 0 5 0\n9 4\n8 3\n-1 0\n1 4\nOutput\n33\n-----Note-----\nThe first sample is (r_1^2 = 5, r_2^2 = 1): $0^{\\circ}$ The second sample is (r_1^2 = 1, r_2^2 = 32): [Image]\n\ndef",
        "answer": "def solution(n, x_1, y_1, x_2, y_2):\n    # Write your code here\n    pass\n",
        "difficulty": "interview"
    },
    {
        "task_id": 2258,
        "prompt": "Complete the Python function given the prompt below:Madeline has an array $a$ of $n$ integers. A pair $(u, v)$ of integers forms an inversion in $a$ if:\n  $1 \\le u < v \\le n$.  $a_u > a_v$. \nMadeline recently found a magical paper, which allows her to write two indices $u$ and $v$ and swap the values $a_u$ and $a_v$. Being bored, she decided to write a list of pairs $(u_i, v_i)$ with the following conditions:\n  all the pairs in the list are distinct and form an inversion in $a$.  all the pairs that form an inversion in $a$ are in the list.  Starting from the given array, if you swap the values at indices $u_1$ and $v_1$, then the values at indices $u_2$ and $v_2$ and so on, then after all pairs are processed, the array $a$ will be sorted in non-decreasing order. \nConstruct such a list or determine that no such list exists. If there are multiple possible answers, you may find any of them.\n-----Input-----\nThe first line of the input contains a single integer $n$ ($1 \\le n \\le 1000$) \u2014 the length of the array.\nNext line contains $n$ integers $a_1,a_2,...,a_n$ $(1 \\le a_i \\le 10^9)$ \u00a0\u2014 elements of the array.\n-----Output-----\nPrint -1 if no such list exists. Otherwise in the first line you should print a single integer $m$ ($0 \\le m \\le \\dfrac{n(n-1)}{2}$) \u2014 number of pairs in the list.\nThe $i$-th of the following $m$ lines should contain two integers $u_i, v_i$ ($1 \\le u_i < v_i\\le n$).\nIf there are multiple possible answers, you may find any of them.\n-----Examples-----\nInput\n3\n3 1 2\nOutput\n2\n1 3\n1 2\nInput\n4\n1 8 1 6\nOutput\n2\n2 4\n2 3\nInput\n5\n1 1 1 2 2\nOutput\n0\n-----Note-----\nIn the first sample test case the array will change in this order $[3,1,2] \\rightarrow [2,1,3] \\rightarrow [1,2,3]$.\nIn the second sample test case it will be $[1,8,1,6] \\rightarrow [1,6,1,8] \\rightarrow [1,1,6,8]$.\nIn the third sample test case the array is already sorted.\n\ndef",
        "answer": "def inversion(a):\n    n = len(a)\n    if n == 1:\n        return 0\n    else:\n        for i in range(n):\n            for j in range(i+1, n):\n                if a[i] > a[j]:\n                    return 1\n    return 0",
        "difficulty": "interview"
    },
    {
        "task_id": 2259,
        "prompt": "Complete the Python function given the prompt below:Iahub recently has learned Bubble Sort, an algorithm that is used to sort a permutation with n elements a_1, a_2,..., a_{n} in ascending order. He is bored of this so simple algorithm, so he invents his own graph. The graph (let's call it G) initially has n vertices and 0 edges. During Bubble Sort execution, edges appear as described in the following algorithm (pseudocode). \nprocedure bubbleSortGraph()\n    build a graph G with n vertices and 0 edges\n    repeat\n        swapped = false\n        for i = 1 to n - 1 inclusive do:\n            if a[i] > a[i + 1] then\n                add an undirected edge in G between a[i] and a[i + 1]\n                swap( a[i], a[i + 1] )\n                swapped = true\n            end if\n        end for\n    until not swapped \n    /* repeat the algorithm as long as swapped value is true. */ \nend procedure\nFor a graph, an independent set is a set of vertices in a graph, no two of which are adjacent (so there are no edges between vertices of an independent set). A maximum independent set is an independent set which has maximum cardinality. Given the permutation, find the size of the maximum independent set of graph G, if we use such permutation as the premutation a in procedure bubbleSortGraph.\n-----Input-----\nThe first line of the input contains an integer n (2 \u2264 n \u2264 10^5). The next line contains n distinct integers a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 n).\n-----Output-----\nOutput a single integer \u2014 the answer to the problem. \n-----Examples-----\nInput\n3\n3 1 2\nOutput\n2\n-----Note-----\nConsider the first example. Bubble sort swaps elements 3 and 1. We add edge (1, 3). Permutation is now [1, 3, 2]. Then bubble sort swaps elements 3 and 2. We add edge (2, 3). Permutation is now sorted. We have a graph with 3 vertices and 2 edges (1, 3) and (2, 3). Its maximal independent set is [1, 2].\n\ndef",
        "answer": "def bubbleSortGraph(n, a):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2260,
        "prompt": "Complete the Python function given the prompt below:The HR manager was disappointed again. The last applicant failed the interview the same way as 24 previous ones. \"Do I give such a hard task?\" \u2014 the HR manager thought. \"Just raise number 5 to the power of n and get last two digits of the number. Yes, of course, n can be rather big, and one cannot find the power using a calculator, but we need people who are able to think, not just follow the instructions.\"\nCould you pass the interview in the machine vision company in IT City?\n-----Input-----\nThe only line of the input contains a single integer n (2 \u2264 n \u2264 2\u00b710^18) \u2014 the power in which you need to raise number 5.\n-----Output-----\nOutput the last two digits of 5^{n} without spaces between them.\n-----Examples-----\nInput\n2\nOutput\n25\n\ndef",
        "answer": "def solve(n):\n    return str(5**n)[-2:]",
        "difficulty": "interview"
    },
    {
        "task_id": 2261,
        "prompt": "Complete the Python function given the prompt below:The semester is already ending, so Danil made an effort and decided to visit a lesson on harmony analysis to know how does the professor look like, at least. Danil was very bored on this lesson until the teacher gave the group a simple task: find 4 vectors in 4-dimensional space, such that every coordinate of every vector is 1 or  - 1 and any two vectors are orthogonal. Just as a reminder, two vectors in n-dimensional space are considered to be orthogonal if and only if their scalar product is equal to zero, that is: $\\sum_{i = 1}^{n} a_{i} \\cdot b_{i} = 0$.\nDanil quickly managed to come up with the solution for this problem and the teacher noticed that the problem can be solved in a more general case for 2^{k} vectors in 2^{k}-dimensinoal space. When Danil came home, he quickly came up with the solution for this problem. Can you cope with it?\n-----Input-----\nThe only line of the input contains a single integer k (0 \u2264 k \u2264 9).\n-----Output-----\nPrint 2^{k} lines consisting of 2^{k} characters each. The j-th character of the i-th line must be equal to'*'if the j-th coordinate of the i-th vector is equal to  - 1, and must be equal to'+'if it's equal to  + 1. It's guaranteed that the answer always exists.\nIf there are many correct answers, print any.\n-----Examples-----\nInput\n2\nOutput\n++**\n+*+*\n++++\n+**+\n-----Note-----\nConsider all scalar products in example:  Vectors 1 and 2: ( + 1)\u00b7( + 1) + ( + 1)\u00b7( - 1) + ( - 1)\u00b7( + 1) + ( - 1)\u00b7( - 1) = 0  Vectors 1 and 3: ( + 1)\u00b7( + 1) + ( + 1)\u00b7( + 1) + ( - 1)\u00b7( + 1) + ( - 1)\u00b7( + 1) = 0  Vectors 1 and 4: ( + 1)\u00b7( + 1) + ( + 1)\u00b7( - 1) + ( - 1)\u00b7( - 1) + ( - 1)\u00b7( + 1) = 0  Vectors 2 and 3: ( + 1)\u00b7( + 1) + ( - 1)\u00b7( + 1) + ( + 1)\u00b7( + 1) + ( - 1)\u00b7( + 1) = 0  Vectors 2 and 4: ( + 1)\u00b7( + 1) + ( - 1)\u00b7( - 1) + ( + 1)\u00b7( - 1) + ( - 1)\u00b7( + 1) = 0  Vectors 3 and 4: ( + 1)\u00b7( + 1) + ( + 1)\u00b7( - 1) + ( + 1)\u00b7( - 1) + ( + 1)\u00b7( + 1) = 0\n\ndef",
        "answer": "def print_vectors(k):\n    for i in range(2**k):\n        for j in range(2**k):\n            if i & (1 << j):\n                print('+', end='')\n            elif i & (1 << j):\n                print('-', end='')\n            else:\n                print(' ', end='')\n        print()",
        "difficulty": "interview"
    },
    {
        "task_id": 2262,
        "prompt": "Complete the Python function given the prompt below:In Aramic language words can only represent objects.\nWords in Aramic have special properties:   A word is a root if it does not contain the same letter more than once.  A root and all its permutations represent the same object.  The root $x$ of a word $y$ is the word that contains all letters that appear in $y$ in a way that each letter appears once. For example, the root of \"aaaa\", \"aa\", \"aaa\" is \"a\", the root of \"aabb\", \"bab\", \"baabb\", \"ab\" is \"ab\".  Any word in Aramic represents the same object as its root. \nYou have an ancient script in Aramic. What is the number of different objects mentioned in the script?\n-----Input-----\nThe first line contains one integer $n$ ($1 \\leq n \\leq 10^3$)\u00a0\u2014 the number of words in the script.\nThe second line contains $n$ words $s_1, s_2, \\ldots, s_n$\u00a0\u2014 the script itself. The length of each string does not exceed $10^3$.\nIt is guaranteed that all characters of the strings are small latin letters.\n-----Output-----\nOutput one integer\u00a0\u2014 the number of different objects mentioned in the given ancient Aramic script.\n-----Examples-----\nInput\n5\na aa aaa ab abb\nOutput\n2\nInput\n3\namer arem mrea\nOutput\n1\n-----Note-----\nIn the first test, there are two objects mentioned. The roots that represent them are \"a\",\"ab\".\nIn the second test, there is only one object, its root is \"amer\", the other strings are just permutations of \"amer\".\n\ndef",
        "answer": "def count_objects(s):\n    return len(set(s))",
        "difficulty": "interview"
    },
    {
        "task_id": 2263,
        "prompt": "Complete the Python function given the prompt below:New Year is coming in Tree World! In this world, as the name implies, there are n cities connected by n - 1 roads, and for any two distinct cities there always exists a path between them. The cities are numbered by integers from 1 to n, and the roads are numbered by integers from 1 to n - 1. Let's define d(u, v) as total length of roads on the path between city u and city v.\nAs an annual event, people in Tree World repairs exactly one road per year. As a result, the length of one road decreases. It is already known that in the i-th year, the length of the r_{i}-th road is going to become w_{i}, which is shorter than its length before. Assume that the current year is year 1.\nThree Santas are planning to give presents annually to all the children in Tree World. In order to do that, they need some preparation, so they are going to choose three distinct cities c_1, c_2, c_3 and make exactly one warehouse in each city. The k-th (1 \u2264 k \u2264 3) Santa will take charge of the warehouse in city c_{k}.\nIt is really boring for the three Santas to keep a warehouse alone. So, they decided to build an only-for-Santa network! The cost needed to build this network equals to d(c_1, c_2) + d(c_2, c_3) + d(c_3, c_1) dollars. Santas are too busy to find the best place, so they decided to choose c_1, c_2, c_3 randomly uniformly over all triples of distinct numbers from 1 to n. Santas would like to know the expected value of the cost needed to build the network.\nHowever, as mentioned, each year, the length of exactly one road decreases. So, the Santas want to calculate the expected after each length change. Help them to calculate the value.\n-----Input-----\nThe first line contains an integer n (3 \u2264 n \u2264 10^5) \u2014 the number of cities in Tree World.\nNext n - 1 lines describe the roads. The i-th line of them (1 \u2264 i \u2264 n - 1) contains three space-separated integers a_{i}, b_{i}, l_{i} (1 \u2264 a_{i}, b_{i} \u2264 n, a_{i} \u2260 b_{i}, 1 \u2264 l_{i} \u2264 10^3), denoting that the i-th road connects cities a_{i} and b_{i}, and the length of i-th road is l_{i}.\nThe next line contains an integer q (1 \u2264 q \u2264 10^5) \u2014 the number of road length changes.\nNext q lines describe the length changes. The j-th line of them (1 \u2264 j \u2264 q) contains two space-separated integers r_{j}, w_{j} (1 \u2264 r_{j} \u2264 n - 1, 1 \u2264 w_{j} \u2264 10^3). It means that in the j-th repair, the length of the r_{j}-th road becomes w_{j}. It is guaranteed that w_{j} is smaller than the current length of the r_{j}-th road. The same road can be repaired several times.\n-----Output-----\nOutput q numbers. For each given change, print a line containing the expected cost needed to build the network in Tree World. The answer will be considered correct if its absolute and relative error doesn't exceed 10^{ - 6}.\n-----Examples-----\nInput\n3\n2 3 5\n1 3 3\n5\n1 4\n2 2\n1 2\n2 1\n1 1\nOutput\n14.0000000000\n12.0000000000\n8.0000000000\n6.0000000000\n4.0000000000\nInput\n6\n1 5 3\n5 3 2\n6 1 7\n1 4 4\n5 2 3\n5\n1 2\n2 1\n3 5\n4 1\n5 2\nOutput\n19.6000000000\n18.6000000000\n16.6000000000\n13.6000000000\n12.6000000000\n-----Note-----\nConsider the first sample. There are 6 triples: (1, 2, 3), (1, 3, 2), (2, 1, 3), (2, 3, 1), (3, 1, 2), (3, 2, 1). Because n = 3, the cost needed to build the network is always d(1, 2) + d(2, 3) + d(3, 1) for all the triples. So, the expected cost equals to d(1, 2) + d(2, 3) + d(3, 1).\n\ndef",
        "answer": "def d(u, v):\n    return sum(l for a, b, l in triples if a == u or b == u or a == v or b == v)",
        "difficulty": "interview"
    },
    {
        "task_id": 2264,
        "prompt": "Complete the Python function given the prompt below:Your math teacher gave you the following problem:\nThere are $n$ segments on the $x$-axis, $[l_1; r_1], [l_2; r_2], \\ldots, [l_n; r_n]$. The segment $[l; r]$ includes the bounds, i.e. it is a set of such $x$ that $l \\le x \\le r$. The length of the segment $[l; r]$ is equal to $r - l$.\nTwo segments $[a; b]$ and $[c; d]$ have a common point (intersect) if there exists $x$ that $a \\leq x \\leq b$ and $c \\leq x \\leq d$. For example, $[2; 5]$ and $[3; 10]$ have a common point, but $[5; 6]$ and $[1; 4]$ don't have.\nYou should add one segment, which has at least one common point with each of the given segments and as short as possible (i.e. has minimal length). The required segment can degenerate to be a point (i.e a segment with length zero). The added segment may or may not be among the given $n$ segments.\nIn other words, you need to find a segment $[a; b]$, such that $[a; b]$ and every $[l_i; r_i]$ have a common point for each $i$, and $b-a$ is minimal.\n-----Input-----\nThe first line contains integer number $t$ ($1 \\le t \\le 100$)\u00a0\u2014 the number of test cases in the input. Then $t$ test cases follow.\nThe first line of each test case contains one integer $n$ ($1 \\le n \\le 10^{5}$)\u00a0\u2014 the number of segments. The following $n$ lines contain segment descriptions: the $i$-th of them contains two integers $l_i,r_i$ ($1 \\le l_i \\le r_i \\le 10^{9}$).\nThe sum of all values $n$ over all the test cases in the input doesn't exceed $10^5$.\n-----Output-----\nFor each test case, output one integer\u00a0\u2014 the smallest possible length of the segment which has at least one common point with all given segments.\n-----Example-----\nInput\n4\n3\n4 5\n5 9\n7 7\n5\n11 19\n4 17\n16 16\n3 12\n14 17\n1\n1 10\n1\n1 1\nOutput\n2\n4\n0\n0\n-----Note-----\nIn the first test case of the example, we can choose the segment $[5;7]$ as the answer. It is the shortest segment that has at least one common point with all given segments.\n\ndef",
        "answer": "def solution(n):\n    return n",
        "difficulty": "interview"
    },
    {
        "task_id": 2265,
        "prompt": "Complete the Python function given the prompt below:Vus the Cossack has two binary strings, that is, strings that consist only of \"0\" and \"1\". We call these strings $a$ and $b$. It is known that $|b| \\leq |a|$, that is, the length of $b$ is at most the length of $a$.\nThe Cossack considers every substring of length $|b|$ in string $a$. Let's call this substring $c$. He matches the corresponding characters in $b$ and $c$, after which he counts the number of positions where the two strings are different. We call this function $f(b, c)$.\nFor example, let $b = 00110$, and $c = 11000$. In these strings, the first, second, third and fourth positions are different.\nVus the Cossack counts the number of such substrings $c$ such that $f(b, c)$ is even.\nFor example, let $a = 01100010$ and $b = 00110$. $a$ has four substrings of the length $|b|$: $01100$, $11000$, $10001$, $00010$.  $f(00110, 01100) = 2$; $f(00110, 11000) = 4$; $f(00110, 10001) = 4$; $f(00110, 00010) = 1$. \nSince in three substrings, $f(b, c)$ is even, the answer is $3$.\nVus can not find the answer for big strings. That is why he is asking you to help him.\n-----Input-----\nThe first line contains a binary string $a$ ($1 \\leq |a| \\leq 10^6$)\u00a0\u2014 the first string.\nThe second line contains a binary string $b$ ($1 \\leq |b| \\leq |a|$)\u00a0\u2014 the second string.\n-----Output-----\nPrint one number\u00a0\u2014 the answer.\n-----Examples-----\nInput\n01100010\n00110\nOutput\n3\nInput\n1010111110\n0110\nOutput\n4\n-----Note-----\nThe first example is explained in the legend.\nIn the second example, there are five substrings that satisfy us: $1010$, $0101$, $1111$, $1111$.\n\ndef",
        "answer": "def f(b, c):\n    count = 0\n    for i in range(len(b)):\n        if b[i]!= c[i]:\n            count += 1\n    return count",
        "difficulty": "interview"
    },
    {
        "task_id": 2266,
        "prompt": "Complete the Python function given the prompt below:Inzane finally found Zane with a lot of money to spare, so they together decided to establish a country of their own.\nRuling a country is not an easy job. Thieves and terrorists are always ready to ruin the country's peace. To fight back, Zane and Inzane have enacted a very effective law: from each city it must be possible to reach a police station by traveling at most d kilometers along the roads. [Image] \nThere are n cities in the country, numbered from 1 to n, connected only by exactly n - 1 roads. All roads are 1 kilometer long. It is initially possible to travel from a city to any other city using these roads. The country also has k police stations located in some cities. In particular, the city's structure satisfies the requirement enforced by the previously mentioned law. Also note that there can be multiple police stations in one city.\nHowever, Zane feels like having as many as n - 1 roads is unnecessary. The country is having financial issues, so it wants to minimize the road maintenance cost by shutting down as many roads as possible.\nHelp Zane find the maximum number of roads that can be shut down without breaking the law. Also, help him determine such roads.\n-----Input-----\nThe first line contains three integers n, k, and d (2 \u2264 n \u2264 3\u00b710^5, 1 \u2264 k \u2264 3\u00b710^5, 0 \u2264 d \u2264 n - 1)\u00a0\u2014 the number of cities, the number of police stations, and the distance limitation in kilometers, respectively.\nThe second line contains k integers p_1, p_2,..., p_{k} (1 \u2264 p_{i} \u2264 n)\u00a0\u2014 each denoting the city each police station is located in.\nThe i-th of the following n - 1 lines contains two integers u_{i} and v_{i} (1 \u2264 u_{i}, v_{i} \u2264 n, u_{i} \u2260 v_{i})\u00a0\u2014 the cities directly connected by the road with index i.\nIt is guaranteed that it is possible to travel from one city to any other city using only the roads. Also, it is possible from any city to reach a police station within d kilometers.\n-----Output-----\nIn the first line, print one integer s that denotes the maximum number of roads that can be shut down.\nIn the second line, print s distinct integers, the indices of such roads, in any order.\nIf there are multiple answers, print any of them.\n-----Examples-----\nInput\n6 2 4\n1 6\n1 2\n2 3\n3 4\n4 5\n5 6\nOutput\n1\n5\nInput\n6 3 2\n1 5 6\n1 2\n1 3\n1 4\n1 5\n5 6\nOutput\n2\n4 5 \n-----Note-----\nIn the first sample, if you shut down road 5, all cities can still reach a police station within k = 4 kilometers.\nIn the second sample, although this is the only largest valid set of roads that can be shut down, you can print either 4 5 or 5 4 in the second line.\n\ndef",
        "answer": "def roads(n, k, d, cities):\n    roads = [0] * n\n    for i in range(k):\n        roads[cities[i] - 1] = 1\n    for i in range(n - 1):\n        roads[cities[i] - 1] += roads[cities[i + 1] - 1]\n    roads[cities[k - 1] - 1] = 1\n    for i in range(n - 1):\n        roads[cities[i] - 1] += roads[cities[i + 1] - 1]\n    roads[cities[k - 1] - 1] = 1\n    for i in range(n - 1):\n        roads[cities[i] - 1] += roads[cities[i + 1] - 1]\n    roads[cities[k - 1] - 1] = 1\n    for i in range(n - 1):\n        roads[cities[i] - 1] += roads[cities[i + 1] - 1]\n    roads[cities[k - 1] - 1] = 1\n    for i in range(n - 1):\n        roads[cities[i] - 1] += roads[cities[i + 1] - 1]\n    roads[cities[k - 1] - 1] = 1\n    for i in range(n - 1):\n        roads[cities[i] - 1] += roads[cities[i + 1] - 1]\n    roads[cities[k - 1] - 1] = 1\n    for i in range(n - 1):\n        roads[cities[i] - 1] += roads[cities[i + 1] - 1]\n    roads[cities[k - 1] - 1] = 1\n    for i in range(n - 1):\n        roads[cities[i] - 1] += roads[cities[i + 1] - 1]\n    roads[cities[k - 1] - 1] = 1\n    for i in range(n - 1):\n        roads[cities[i] - 1] += roads[cities[i + 1] - 1]\n    roads[cities",
        "difficulty": "interview"
    },
    {
        "task_id": 2267,
        "prompt": "Complete the Python function given the prompt below:You're given a list of n strings a_1, a_2,..., a_{n}. You'd like to concatenate them together in some order such that the resulting string would be lexicographically smallest.\nGiven the list of strings, output the lexicographically smallest concatenation.\n-----Input-----\nThe first line contains integer n \u2014 the number of strings (1 \u2264 n \u2264 5\u00b710^4).\nEach of the next n lines contains one string a_{i} (1 \u2264 |a_{i}| \u2264 50) consisting of only lowercase English letters. The sum of string lengths will not exceed 5\u00b710^4.\n-----Output-----\nPrint the only string a \u2014 the lexicographically smallest string concatenation.\n-----Examples-----\nInput\n4\nabba\nabacaba\nbcd\ner\nOutput\nabacabaabbabcder\nInput\n5\nx\nxx\nxxa\nxxaa\nxxaaa\nOutput\nxxaaaxxaaxxaxxx\nInput\n3\nc\ncb\ncba\nOutput\ncbacbc\n\ndef",
        "answer": "def lexSmallest(a):\n    a.sort()\n    return ''.join(a)",
        "difficulty": "interview"
    },
    {
        "task_id": 2268,
        "prompt": "Complete the Python function given the prompt below:The name of one small but proud corporation consists of n lowercase English letters. The Corporation has decided to try rebranding\u00a0\u2014 an active marketing strategy, that includes a set of measures to change either the brand (both for the company and the goods it produces) or its components: the name, the logo, the slogan. They decided to start with the name.\nFor this purpose the corporation has consecutively hired m designers. Once a company hires the i-th designer, he immediately contributes to the creation of a new corporation name as follows: he takes the newest version of the name and replaces all the letters x_{i} by y_{i}, and all the letters y_{i} by x_{i}. This results in the new version. It is possible that some of these letters do no occur in the string. It may also happen that x_{i} coincides with y_{i}. The version of the name received after the work of the last designer becomes the new name of the corporation.\nManager Arkady has recently got a job in this company, but is already soaked in the spirit of teamwork and is very worried about the success of the rebranding. Naturally, he can't wait to find out what is the new name the Corporation will receive.\nSatisfy Arkady's curiosity and tell him the final version of the name.\n-----Input-----\nThe first line of the input contains two integers n and m (1 \u2264 n, m \u2264 200 000)\u00a0\u2014 the length of the initial name and the number of designers hired, respectively.\nThe second line consists of n lowercase English letters and represents the original name of the corporation.\nNext m lines contain the descriptions of the designers' actions: the i-th of them contains two space-separated lowercase English letters x_{i} and y_{i}.\n-----Output-----\nPrint the new name of the corporation.\n-----Examples-----\nInput\n6 1\npolice\np m\nOutput\nmolice\nInput\n11 6\nabacabadaba\na b\nb c\na d\ne g\nf a\nb b\nOutput\ncdcbcdcfcdc\n-----Note-----\nIn the second sample the name of the corporation consecutively changes as follows: $\\text{abacabadaba} \\rightarrow \\text{babcbabdbab}$\n$\\text{babcbabdbab} \\rightarrow \\text{cacbcacdcac}$\n$\\text{cacbcacdcac} \\rightarrow \\text{cdcbcdcacdc}$\n[Image]\n[Image]\n[Image]\n\ndef",
        "answer": "def rebrand(name):\n    new_name = name\n    for i in range(len(name)):\n        if name[i] == 'x':\n            new_name = new_name.replace('x', 'y')\n        elif name[i] == 'y':\n            new_name = new_name.replace('y', 'x')\n    return new_name",
        "difficulty": "interview"
    },
    {
        "task_id": 2269,
        "prompt": "Complete the Python function given the prompt below:You are given a string $s$ such that each its character is either 1, 2, or 3. You have to choose the shortest contiguous substring of $s$ such that it contains each of these three characters at least once.\nA contiguous substring of string $s$ is a string that can be obtained from $s$ by removing some (possibly zero) characters from the beginning of $s$ and some (possibly zero) characters from the end of $s$.\n-----Input-----\nThe first line contains one integer $t$ ($1 \\le t \\le 20000$) \u2014 the number of test cases.\nEach test case consists of one line containing the string $s$ ($1 \\le |s| \\le 200000$). It is guaranteed that each character of $s$ is either 1, 2, or 3.\nThe sum of lengths of all strings in all test cases does not exceed $200000$.\n-----Output-----\nFor each test case, print one integer \u2014 the length of the shortest contiguous substring of $s$ containing all three types of characters at least once. If there is no such substring, print $0$ instead.\n-----Example-----\nInput\n7\n123\n12222133333332\n112233\n332211\n12121212\n333333\n31121\nOutput\n3\n3\n4\n4\n0\n0\n4\n-----Note-----\nConsider the example test:\nIn the first test case, the substring 123 can be used.\nIn the second test case, the substring 213 can be used.\nIn the third test case, the substring 1223 can be used.\nIn the fourth test case, the substring 3221 can be used.\nIn the fifth test case, there is no character 3 in $s$.\nIn the sixth test case, there is no character 1 in $s$.\nIn the seventh test case, the substring 3112 can be used.\n\ndef",
        "answer": "def shortest_substring(s):\n    # your code here\n    return 0",
        "difficulty": "interview"
    },
    {
        "task_id": 2270,
        "prompt": "Complete the Python function given the prompt below:This year in Equestria was a year of plenty, so Applejack has decided to build some new apple storages. According to the advice of the farm designers, she chose to build two storages with non-zero area: one in the shape of a square and another one in the shape of a rectangle (which possibly can be a square as well).\nApplejack will build the storages using planks, she is going to spend exactly one plank on each side of the storage. She can get planks from her friend's company. Initially, the company storehouse has $n$ planks, Applejack knows their lengths. The company keeps working so it receives orders and orders the planks itself. Applejack's friend can provide her with information about each operation. For convenience, he will give her information according to the following format:\n  $+$ $x$: the storehouse received a plank with length $x$  $-$ $x$: one plank with length $x$ was removed from the storehouse (it is guaranteed that the storehouse had some planks with length $x$). \nApplejack is still unsure about when she is going to order the planks so she wants to know if she can order the planks to build rectangular and square storages out of them after every event at the storehouse. Applejack is busy collecting apples and she has completely no time to do the calculations so she asked you for help!\nWe remind you that all four sides of a square are equal, and a rectangle has two pairs of equal sides.\n-----Input-----\nThe first line contains a single integer $n$ ($1 \\le n \\le 10^5$): the initial amount of planks at the company's storehouse, the second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 10^5$): the lengths of the planks.\nThe third line contains a single integer $q$ ($1 \\le q \\le 10^5$): the number of events in the company. Each of the next $q$ lines contains a description of the events in a given format: the type of the event (a symbol $+$ or $-$) is given first, then goes the integer $x$ ($1 \\le x \\le 10^5$).\n-----Output-----\nAfter every event in the company, print \"YES\" if two storages of the required shape can be built from the planks of that company's set, and print \"NO\" otherwise. You can print each letter in any case (upper or lower).\n-----Example-----\nInput\n6\n1 1 1 2 1 1\n6\n+ 2\n+ 1\n- 1\n+ 2\n- 1\n+ 2\nOutput\nNO\nYES\nNO\nNO\nNO\nYES\n-----Note-----\nAfter the second event Applejack can build a rectangular storage using planks with lengths $1$, $2$, $1$, $2$ and a square storage using planks with lengths $1$, $1$, $1$, $1$.\nAfter the sixth event Applejack can build a rectangular storage using planks with lengths $2$, $2$, $2$, $2$ and a square storage using planks with lengths $1$, $1$, $1$, $1$.\n\ndef",
        "answer": "def applejack():\n\tn = int(input())\n\tplanks = list(map(int, input().split()))\n\tq = int(input())\n\tfor _ in range(q):\n\t\ttype, x = input().split()\n\t\tif type == '+':\n\t\t\tplanks[int(x)-1] -= 1\n\t\telse:\n\t\t\tplanks[int(x)-1] += 1\n\tif sum(planks) % 4 == 0:\n\t\tprint('YES')\n\telse:\n\t\tprint('NO')",
        "difficulty": "interview"
    },
    {
        "task_id": 2271,
        "prompt": "Complete the Python function given the prompt below:Heidi has finally found the mythical Tree of Life \u2013 a legendary combinatorial structure which is said to contain a prophecy crucially needed to defeat the undead armies.\nOn the surface, the Tree of Life is just a regular undirected tree well-known from computer science. This means that it is a collection of n points (called vertices), some of which are connected using n - 1 line segments (edges) so that each pair of vertices is connected by a path (a sequence of one or more edges).\nTo decipher the prophecy, Heidi needs to perform a number of steps. The first is counting the number of lifelines in the tree \u2013 these are paths of length 2, i.e., consisting of two edges. Help her!\n-----Input-----\nThe first line of the input contains a single integer n \u2013 the number of vertices in the tree (1 \u2264 n \u2264 10000). The vertices are labeled with the numbers from 1 to n. Then n - 1 lines follow, each describing one edge using two space-separated numbers a\u2002b \u2013 the labels of the vertices connected by the edge (1 \u2264 a < b \u2264 n). It is guaranteed that the input represents a tree.\n-----Output-----\nPrint one integer \u2013 the number of lifelines in the tree.\n-----Examples-----\nInput\n4\n1 2\n1 3\n1 4\nOutput\n3\nInput\n5\n1 2\n2 3\n3 4\n3 5\nOutput\n4\n-----Note-----\nIn the second sample, there are four lifelines: paths between vertices 1 and 3, 2 and 4, 2 and 5, and 4 and 5.\n\ndef",
        "answer": "def count_lifelines(n, edges):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2272,
        "prompt": "Complete the Python function given the prompt below:In this problem at each moment you have a set of intervals. You can move from interval (a, b) from our set to interval (c, d) from our set if and only if c < a < d or c < b < d. Also there is a path from interval I_1 from our set to interval I_2 from our set if there is a sequence of successive moves starting from I_1 so that we can reach I_2.\nYour program should handle the queries of the following two types:  \"1 x y\" (x < y) \u2014 add the new interval (x, y) to the set of intervals. The length of the new interval is guaranteed to be strictly greater than all the previous intervals. \"2 a b\" (a \u2260 b) \u2014 answer the question: is there a path from a-th (one-based) added interval to b-th (one-based) added interval? \nAnswer all the queries. Note, that initially you have an empty set of intervals.\n-----Input-----\nThe first line of the input contains integer n denoting the number of queries, (1 \u2264 n \u2264 100). Each of the following lines contains a query as described above. All numbers in the input are integers and don't exceed 10^9 by their absolute value.\nIt's guaranteed that all queries are correct.\n-----Output-----\nFor each query of the second type print \"YES\" or \"NO\" on a separate line depending on the answer.\n-----Examples-----\nInput\n5\n1 1 5\n1 5 11\n2 1 2\n1 2 9\n2 1 2\nOutput\nNO\nYES\n\ndef",
        "answer": "def add_interval(intervals, new_interval):\n    intervals.append(new_interval)\n    intervals.sort()\n    return intervals",
        "difficulty": "interview"
    },
    {
        "task_id": 2273,
        "prompt": "Complete the Python function given the prompt below:You have a simple undirected graph consisting of $n$ vertices and $m$ edges. The graph doesn't contain self-loops, there is at most one edge between a pair of vertices. The given graph can be disconnected.\nLet's make a definition.\nLet $v_1$ and $v_2$ be two some nonempty subsets of vertices that do not intersect. Let $f(v_{1}, v_{2})$ be true if and only if all the conditions are satisfied:  There are no edges with both endpoints in vertex set $v_1$.  There are no edges with both endpoints in vertex set $v_2$.  For every two vertices $x$ and $y$ such that $x$ is in $v_1$ and $y$ is in $v_2$, there is an edge between $x$ and $y$. \nCreate three vertex sets ($v_{1}$, $v_{2}$, $v_{3}$) which satisfy the conditions below;  All vertex sets should not be empty.  Each vertex should be assigned to only one vertex set.  $f(v_{1}, v_{2})$, $f(v_{2}, v_{3})$, $f(v_{3}, v_{1})$ are all true. \nIs it possible to create such three vertex sets? If it's possible, print matching vertex set for each vertex.\n-----Input-----\nThe first line contains two integers $n$ and $m$ ($3 \\le n \\le 10^{5}$, $0 \\le m \\le \\text{min}(3 \\cdot 10^{5}, \\frac{n(n-1)}{2})$)\u00a0\u2014 the number of vertices and edges in the graph.\nThe $i$-th of the next $m$ lines contains two integers $a_{i}$ and $b_{i}$ ($1 \\le a_{i} \\lt b_{i} \\le n$)\u00a0\u2014 it means there is an edge between $a_{i}$ and $b_{i}$. The graph doesn't contain self-loops, there is at most one edge between a pair of vertices. The given graph can be disconnected.\n-----Output-----\nIf the answer exists, print $n$ integers. $i$-th integer means the vertex set number (from $1$ to $3$) of $i$-th vertex. Otherwise, print $-1$.\nIf there are multiple answers, print any.\n-----Examples-----\nInput\n6 11\n1 2\n1 3\n1 4\n1 5\n1 6\n2 4\n2 5\n2 6\n3 4\n3 5\n3 6\nOutput\n1 2 2 3 3 3 \nInput\n4 6\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\nOutput\n-1\n-----Note-----\nIn the first example, if $v_{1} = \\{ 1 \\}$, $v_{2} = \\{ 2, 3 \\}$, and $v_{3} = \\{ 4, 5, 6 \\}$ then vertex sets will satisfy all conditions. But you can assign vertices to vertex sets in a different way; Other answers like \"2 3 3 1 1 1\" will be accepted as well. [Image] \nIn the second example, it's impossible to make such vertex sets.\n\ndef",
        "answer": "def find_matching_vertex_sets(n, m, edges):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2274,
        "prompt": "Complete the Python function given the prompt below:Consider a conveyor belt represented using a grid consisting of $n$ rows and $m$ columns. The cell in the $i$-th row from the top and the $j$-th column from the left is labelled $(i,j)$. \nEvery cell, except $(n,m)$, has a direction R (Right) or D (Down) assigned to it. If the cell $(i,j)$ is assigned direction R, any luggage kept on that will move to the cell $(i,j+1)$. Similarly, if the cell $(i,j)$ is assigned direction D, any luggage kept on that will move to the cell $(i+1,j)$. If at any moment, the luggage moves out of the grid, it is considered to be lost. \nThere is a counter at the cell $(n,m)$ from where all luggage is picked. A conveyor belt is called functional if and only if any luggage reaches the counter regardless of which cell it is placed in initially. More formally, for every cell $(i,j)$, any luggage placed in this cell should eventually end up in the cell $(n,m)$. \nThis may not hold initially; you are, however, allowed to change the directions of some cells to make the conveyor belt functional. Please determine the minimum amount of cells you have to change.\nPlease note that it is always possible to make any conveyor belt functional by changing the directions of some set of cells.\n-----Input-----\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10$). Description of the test cases follows.\nThe first line of each test case contains two integers $n, m$ ($1 \\le n \\le 100$, $1 \\le m \\le 100$) \u00a0\u2014 the number of rows and columns, respectively.\nThe following $n$ lines each contain $m$ characters. The $j$-th character in the $i$-th line, $a_{i,j}$ is the initial direction of the cell $(i, j)$. Please note that $a_{n,m}=$ C.\n-----Output-----\nFor each case, output in a new line the minimum number of cells that you have to change to make the conveyor belt functional. \n-----Example-----\nInput\n4\n3 3\nRRD\nDDR\nRRC\n1 4\nDDDC\n6 9\nRDDDDDRRR\nRRDDRRDDD\nRRDRDRRDR\nDDDDRDDRR\nDRRDRDDDR\nDDRDRRDDC\n1 1\nC\nOutput\n1\n3\n9\n0\n-----Note-----\nIn the first case, just changing the direction of $(2,3)$ to D is enough.\nYou can verify that the resulting belt is functional. For example, if we place any luggage at $(2,2)$, it first moves to $(3,2)$ and then to $(3,3)$. \nIn the second case, we have no option but to change the first $3$ cells from D to R making the grid equal to RRRC.\n\ndef",
        "answer": "def solution(n, m, grid):\n    # Your code here",
        "difficulty": "interview"
    },
    {
        "task_id": 2275,
        "prompt": "Complete the Python function given the prompt below:It's a walking tour day in SIS.Winter, so $t$ groups of students are visiting Torzhok. Streets of Torzhok are so narrow that students have to go in a row one after another.\nInitially, some students are angry. Let's describe a group of students by a string of capital letters \"A\" and \"P\":   \"A\" corresponds to an angry student  \"P\" corresponds to a patient student \nSuch string describes the row from the last to the first student.\nEvery minute every angry student throws a snowball at the next student. Formally, if an angry student corresponds to the character with index $i$ in the string describing a group then they will throw a snowball at the student that corresponds to the character with index $i+1$ (students are given from the last to the first student). If the target student was not angry yet, they become angry. Even if the first (the rightmost in the string) student is angry, they don't throw a snowball since there is no one in front of them.\n[Image]\nLet's look at the first example test. The row initially looks like this: PPAP. Then, after a minute the only single angry student will throw a snowball at the student in front of them, and they also become angry: PPAA. After that, no more students will become angry.\nYour task is to help SIS.Winter teachers to determine the last moment a student becomes angry for every group.\n-----Input-----\nThe first line contains a single integer $t$\u00a0\u2014 the number of groups of students ($1 \\le t \\le 100$). The following $2t$ lines contain descriptions of groups of students.\nThe description of the group starts with an integer $k_i$ ($1 \\le k_i \\le 100$)\u00a0\u2014 the number of students in the group, followed by a string $s_i$, consisting of $k_i$ letters \"A\" and \"P\", which describes the $i$-th group of students.\n-----Output-----\nFor every group output single integer\u00a0\u2014 the last moment a student becomes angry.\n-----Examples-----\nInput\n1\n4\nPPAP\nOutput\n1\nInput\n3\n12\nAPPAPPPAPPPP\n3\nAAP\n3\nPPA\nOutput\n4\n1\n0\n-----Note-----\nIn the first test, after $1$ minute the state of students becomes PPAA. After that, no new angry students will appear.\nIn the second tets, state of students in the first group is:   after $1$ minute\u00a0\u2014 AAPAAPPAAPPP  after $2$ minutes\u00a0\u2014 AAAAAAPAAAPP  after $3$ minutes\u00a0\u2014 AAAAAAAAAAAP  after $4$ minutes all $12$ students are angry \nIn the second group after $1$ minute, all students are angry.\n\ndef",
        "answer": "def angry_students(s):\n    # your code here\n    return",
        "difficulty": "interview"
    },
    {
        "task_id": 2276,
        "prompt": "Complete the Python function given the prompt below:Vasya has a string $s$ of length $n$ consisting only of digits 0 and 1. Also he has an array $a$ of length $n$. \nVasya performs the following operation until the string becomes empty: choose some consecutive substring of equal characters, erase it from the string and glue together the remaining parts (any of them can be empty). For example, if he erases substring 111 from string 111110 he will get the string 110. Vasya gets $a_x$ points for erasing substring of length $x$.\nVasya wants to maximize his total points, so help him with this! \n-----Input-----\nThe first line contains one integer $n$ ($1 \\le n \\le 100$) \u2014 the length of string $s$.\nThe second line contains string $s$, consisting only of digits 0 and 1.\nThe third line contains $n$ integers $a_1, a_2, \\dots a_n$ ($1 \\le a_i \\le 10^9$), where $a_i$ is the number of points for erasing the substring of length $i$.\n-----Output-----\nPrint one integer \u2014 the maximum total points Vasya can get.\n-----Examples-----\nInput\n7\n1101001\n3 4 9 100 1 2 3\nOutput\n109\nInput\n5\n10101\n3 10 15 15 15\nOutput\n23\n-----Note-----\nIn the first example the optimal sequence of erasings is: 1101001 $\\rightarrow$ 111001 $\\rightarrow$ 11101 $\\rightarrow$ 1111 $\\rightarrow$ $\\varnothing$.\nIn the second example the optimal sequence of erasings is: 10101 $\\rightarrow$ 1001 $\\rightarrow$ 11 $\\rightarrow$ $\\varnothing$.\n\ndef",
        "answer": "def solution(s, a):\n    # your code here\n    return 0",
        "difficulty": "interview"
    },
    {
        "task_id": 2277,
        "prompt": "Complete the Python function given the prompt below:A permutation of size n is an array of size n such that each integer from 1 to n occurs exactly once in this array. An inversion in a permutation p is a pair of indices (i, j) such that i > j and a_{i} < a_{j}. For example, a permutation [4, 1, 3, 2] contains 4 inversions: (2, 1), (3, 1), (4, 1), (4, 3).\nYou are given a permutation a of size n and m queries to it. Each query is represented by two indices l and r denoting that you have to reverse the segment [l, r] of the permutation. For example, if a = [1, 2, 3, 4] and a query l = 2, r = 4 is applied, then the resulting permutation is [1, 4, 3, 2].\nAfter each query you have to determine whether the number of inversions is odd or even.\n-----Input-----\nThe first line contains one integer n (1 \u2264 n \u2264 1500) \u2014 the size of the permutation. \nThe second line contains n integers a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 n) \u2014 the elements of the permutation. These integers are pairwise distinct.\nThe third line contains one integer m (1 \u2264 m \u2264 2\u00b710^5) \u2014 the number of queries to process.\nThen m lines follow, i-th line containing two integers l_{i}, r_{i} (1 \u2264 l_{i} \u2264 r_{i} \u2264 n) denoting that i-th query is to reverse a segment [l_{i}, r_{i}] of the permutation. All queries are performed one after another.\n-----Output-----\nPrint m lines. i-th of them must be equal to odd if the number of inversions in the permutation after i-th query is odd, and even otherwise.\n-----Examples-----\nInput\n3\n1 2 3\n2\n1 2\n2 3\nOutput\nodd\neven\nInput\n4\n1 2 4 3\n4\n1 1\n1 4\n1 4\n2 3\nOutput\nodd\nodd\nodd\neven\n-----Note-----\nThe first example:\n  after the first query a = [2, 1, 3], inversion: (2, 1);  after the second query a = [2, 3, 1], inversions: (3, 1), (3, 2). \nThe second example:\n  a = [1, 2, 4, 3], inversion: (4, 3);  a = [3, 4, 2, 1], inversions: (3, 1), (4, 1), (3, 2), (4, 2), (4, 3);  a = [1, 2, 4, 3], inversion: (4, 3);  a = [1, 4, 2, 3], inversions: (3, 2), (4, 2).\n\ndef",
        "answer": "def solution(a, m):\n    # Write your code here\n    pass\n",
        "difficulty": "interview"
    },
    {
        "task_id": 2278,
        "prompt": "Complete the Python function given the prompt below:Given a positive integer $m$, we say that a sequence $x_1, x_2, \\dots, x_n$ of positive integers is $m$-cute if for every index $i$ such that $2 \\le i \\le n$ it holds that $x_i = x_{i - 1} + x_{i - 2} + \\dots + x_1 + r_i$ for some positive integer $r_i$ satisfying $1 \\le r_i \\le m$.\nYou will be given $q$ queries consisting of three positive integers $a$, $b$ and $m$. For each query you must determine whether or not there exists an $m$-cute sequence whose first term is $a$ and whose last term is $b$. If such a sequence exists, you must additionally find an example of it.\n-----Input-----\nThe first line contains an integer number $q$ ($1 \\le q \\le 10^3$)\u00a0\u2014 the number of queries.\nEach of the following $q$ lines contains three integers $a$, $b$, and $m$ ($1 \\le a, b, m \\le 10^{14}$, $a \\leq b$), describing a single query.\n-----Output-----\nFor each query, if no $m$-cute sequence whose first term is $a$ and whose last term is $b$ exists, print $-1$.\nOtherwise print an integer $k$ ($1 \\le k \\leq 50$), followed by $k$ integers $x_1, x_2, \\dots, x_k$ ($1 \\le x_i \\le 10^{14}$). These integers must satisfy $x_1 = a$, $x_k = b$, and that the sequence $x_1, x_2, \\dots, x_k$ is $m$-cute.\nIt can be shown that under the problem constraints, for each query either no $m$-cute sequence exists, or there exists one with at most $50$ terms.\nIf there are multiple possible sequences, you may print any of them.\n-----Example-----\nInput\n2\n5 26 2\n3 9 1\nOutput\n4 5 6 13 26\n-1\n-----Note-----\nConsider the sample. In the first query, the sequence $5, 6, 13, 26$ is valid since $6 = 5 + \\bf{\\color{blue} 1}$, $13 = 6 + 5 + {\\bf\\color{blue} 2}$ and $26 = 13 + 6 + 5 + {\\bf\\color{blue} 2}$ have the bold values all between $1$ and $2$, so the sequence is $2$-cute. Other valid sequences, such as $5, 7, 13, 26$ are also accepted.\nIn the second query, the only possible $1$-cute sequence starting at $3$ is $3, 4, 8, 16, \\dots$, which does not contain $9$.\n\ndef",
        "answer": "def solve(a, b, m):\n    if m == 1:\n        return -1\n    if m == 2:\n        return 1\n    if m == 3:\n        return 2\n    if m == 4:\n        return 3\n    if m == 5:\n        return 4\n    if m == 6:\n        return 5\n    if m == 7:\n        return 6\n    if m == 8:\n        return 7\n    if m == 9:\n        return 8\n    if m == 10:\n        return 9\n    if m == 11:\n        return 10\n    if m == 12:\n        return 11\n    if m == 13:\n        return 12\n    if m == 14:\n        return 13\n    if m == 15:\n        return 14\n    if m == 16:\n        return 15\n    if m == 17:\n        return 16\n    if m == 18:\n        return 17\n    if m == 19:\n        return 18\n    if m == 20:\n        return 19\n    if m == 21:\n        return 20\n    if m == 22:\n        return 21\n    if m == 23:\n        return 22\n    if m == 24:\n        return 23\n    if m == 25:\n        return 24\n    if m == 26:\n        return 25\n    if m == 27:\n        return 26\n    if m == 28:\n        return 27\n    if m == 29:\n        return 28\n    if m == 30:\n        return 29\n    if m == 31:\n        return 30\n    if m == 32:\n        return 31\n    if m == 33:\n        return 32\n    if m == 34:\n        return 33\n    if m == 35:\n        return 34\n    if m == 36:\n        return 35\n    if m == 37:\n        return 36\n    if m == 38:\n        return 37\n    if m == 39:\n        return 38\n    if m == 40:\n        return 39\n    if m == 41:\n        return 40\n    if m == 42:\n        return 41\n    if m == 43:\n        return 42\n    if m == 44:\n        return 43\n    if m == 45:",
        "difficulty": "interview"
    },
    {
        "task_id": 2279,
        "prompt": "Complete the Python function given the prompt below:There is a programing contest named SnakeUp, 2n people want to compete for it. In order to attend this contest, people need to form teams of exactly two people. You are given the strength of each possible combination of two people. All the values of the strengths are distinct.\nEvery contestant hopes that he can find a teammate so that their team\u2019s strength is as high as possible. That is, a contestant will form a team with highest strength possible by choosing a teammate from ones who are willing to be a teammate with him/her. More formally, two people A and B may form a team if each of them is the best possible teammate (among the contestants that remain unpaired) for the other one. \nCan you determine who will be each person\u2019s teammate?\n-----Input-----\nThere are 2n lines in the input. \nThe first line contains an integer n (1 \u2264 n \u2264 400) \u2014 the number of teams to be formed.\nThe i-th line (i > 1) contains i - 1 numbers a_{i}1, a_{i}2,..., a_{i}(i - 1). Here a_{ij} (1 \u2264 a_{ij} \u2264 10^6, all a_{ij} are distinct) denotes the strength of a team consisting of person i and person j (people are numbered starting from 1.)\n-----Output-----\nOutput a line containing 2n numbers. The i-th number should represent the number of teammate of i-th person.\n-----Examples-----\nInput\n2\n6\n1 2\n3 4 5\nOutput\n2 1 4 3\nInput\n3\n487060\n3831 161856\n845957 794650 976977\n83847 50566 691206 498447\n698377 156232 59015 382455 626960\nOutput\n6 5 4 3 2 1\n-----Note-----\nIn the first sample, contestant 1 and 2 will be teammates and so do contestant 3 and 4, so the teammate of contestant 1, 2, 3, 4 will be 2, 1, 4, 3 respectively.\n\ndef",
        "answer": "def main():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    a.sort()\n    a.reverse()\n    print(a)\n    print(a[0], a[1])",
        "difficulty": "interview"
    },
    {
        "task_id": 2280,
        "prompt": "Complete the Python function given the prompt below:Let's denote a $k$-step ladder as the following structure: exactly $k + 2$ wooden planks, of which\n  two planks of length at least $k+1$ \u2014 the base of the ladder;  $k$ planks of length at least $1$ \u2014 the steps of the ladder; \nNote that neither the base planks, nor the steps planks are required to be equal.\nFor example, ladders $1$ and $3$ are correct $2$-step ladders and ladder $2$ is a correct $1$-step ladder. On the first picture the lengths of planks are $[3, 3]$ for the base and $[1]$ for the step. On the second picture lengths are $[3, 3]$ for the base and $[2]$ for the step. On the third picture lengths are $[3, 4]$ for the base and $[2, 3]$ for the steps. \n $H - 1 =$ \nYou have $n$ planks. The length of the $i$-th planks is $a_i$. You don't have a saw, so you can't cut the planks you have. Though you have a hammer and nails, so you can assemble the improvised \"ladder\" from the planks.\nThe question is: what is the maximum number $k$ such that you can choose some subset of the given planks and assemble a $k$-step ladder using them?\n-----Input-----\nThe first line contains a single integer $T$ ($1 \\le T \\le 100$) \u2014 the number of queries. The queries are independent.\nEach query consists of two lines. The first line contains a single integer $n$ ($2 \\le n \\le 10^5$) \u2014 the number of planks you have.\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^5$) \u2014 the lengths of the corresponding planks.\nIt's guaranteed that the total number of planks from all queries doesn't exceed $10^5$.\n-----Output-----\nPrint $T$ integers \u2014 one per query. The $i$-th integer is the maximum number $k$, such that you can choose some subset of the planks given in the $i$-th query and assemble a $k$-step ladder using them.\nPrint $0$ if you can't make even $1$-step ladder from the given set of planks.\n-----Example-----\nInput\n4\n4\n1 3 1 3\n3\n3 3 2\n5\n2 3 3 4 2\n3\n1 1 2\nOutput\n2\n1\n2\n0\n-----Note-----\nExamples for the queries $1-3$ are shown at the image in the legend section.\nThe Russian meme to express the quality of the ladders:\n [Image]\n\ndef",
        "answer": "def ladders(n, a):\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 3\n    if n == 5:\n        return 4\n    if n == 6:\n        return 5\n    if n == 7:\n        return 6\n    if n == 8:\n        return 7\n    if n == 9:\n        return 8\n    if n == 10:\n        return 9\n    if n == 11:\n        return 10\n    if n == 12:\n        return 11\n    if n == 13:\n        return 12\n    if n == 14:\n        return 13\n    if n == 15:\n        return 14\n    if n == 16:\n        return 15\n    if n == 17:\n        return 16\n    if n == 18:\n        return 17\n    if n == 19:\n        return 18\n    if n == 20:\n        return 19\n    if n == 21:\n        return 20\n    if n == 22:\n        return 21\n    if n == 23:\n        return 22\n    if n == 24:\n        return 23\n    if n == 25:\n        return 24\n    if n == 26:\n        return 25\n    if n == 27:\n        return 26\n    if n == 28:\n        return 27\n    if n == 29:\n        return 28\n    if n == 30:\n        return 29\n    if n == 31:\n        return 30\n    if n == 32:\n        return 31\n    if n == 33:\n        return 32\n    if n == 34:\n        return 33\n    if n == 35:\n        return 34\n    if n == 36:\n        return 35\n    if n == 37:\n        return 36\n    if n == 38:\n        return 37\n    if n == 39:\n        return 38\n    if n == 40:\n        return 39\n    if n == 41:\n        return 40\n    if n == 42:\n        return 41\n    if n == 43:\n        return 42\n    if n == 44:\n        return 43\n    if n == 45:\n        ",
        "difficulty": "interview"
    },
    {
        "task_id": 2281,
        "prompt": "Complete the Python function given the prompt below:You have array a that contains all integers from 1 to n twice. You can arbitrary permute any numbers in a.\nLet number i be in positions x_{i}, y_{i} (x_{i} < y_{i}) in the permuted array a. Let's define the value d_{i} = y_{i} - x_{i} \u2014 the distance between the positions of the number i. Permute the numbers in array a to minimize the value of the sum $s = \\sum_{i = 1}^{n}(n - i) \\cdot|d_{i} + i - n$.\n-----Input-----\nThe only line contains integer n (1 \u2264 n \u2264 5\u00b710^5).\n-----Output-----\nPrint 2n integers \u2014 the permuted array a that minimizes the value of the sum s.\n-----Examples-----\nInput\n2\nOutput\n1 1 2 2\nInput\n1\nOutput\n1 1\n\ndef",
        "answer": "def permute(a):\n    n = len(a)\n    for i in range(n):\n        for j in range(i+1, n):\n            a[i], a[j] = a[j], a[i]\n            print(*a)",
        "difficulty": "interview"
    },
    {
        "task_id": 2282,
        "prompt": "Complete the Python function given the prompt below:Today, Mezo is playing a game. Zoma, a character in that game, is initially at position $x = 0$. Mezo starts sending $n$ commands to Zoma. There are two possible commands:  'L' (Left) sets the position $x: =x - 1$;  'R' (Right) sets the position $x: =x + 1$. \nUnfortunately, Mezo's controller malfunctions sometimes. Some commands are sent successfully and some are ignored. If the command is ignored then the position $x$ doesn't change and Mezo simply proceeds to the next command.\nFor example, if Mezo sends commands \"LRLR\", then here are some possible outcomes (underlined commands are sent successfully):   \"LRLR\" \u2014 Zoma moves to the left, to the right, to the left again and to the right for the final time, ending up at position $0$;  \"LRLR\" \u2014 Zoma recieves no commands, doesn't move at all and ends up at position $0$ as well;  \"LRLR\" \u2014 Zoma moves to the left, then to the left again and ends up in position $-2$. \nMezo doesn't know which commands will be sent successfully beforehand. Thus, he wants to know how many different positions may Zoma end up at.\n-----Input-----\nThe first line contains $n$ $(1 \\le n \\le 10^5)$ \u2014 the number of commands Mezo sends.\nThe second line contains a string $s$ of $n$ commands, each either 'L' (Left) or 'R' (Right).\n-----Output-----\nPrint one integer \u2014 the number of different positions Zoma may end up at.\n-----Example-----\nInput\n4\nLRLR\nOutput\n5\n-----Note-----\nIn the example, Zoma may end up anywhere between $-2$ and $2$.\n\ndef",
        "answer": "def count_positions(s):\n    return len(set(s))",
        "difficulty": "interview"
    },
    {
        "task_id": 2283,
        "prompt": "Complete the Python function given the prompt below:Petya has a simple graph (that is, a graph without loops or multiple edges) consisting of $n$ vertices and $m$ edges.\nThe weight of the $i$-th vertex is $a_i$.\nThe weight of the $i$-th edge is $w_i$.\nA subgraph of a graph is some set of the graph vertices and some set of the graph edges. The set of edges must meet the condition: both ends of each edge from the set must belong to the chosen set of vertices. \nThe weight of a subgraph is the sum of the weights of its edges, minus the sum of the weights of its vertices. You need to find the maximum weight of subgraph of given graph. The given graph does not contain loops and multiple edges.\n-----Input-----\nThe first line contains two numbers $n$ and $m$ ($1 \\le n \\le 10^3, 0 \\le m \\le 10^3$) - the number of vertices and edges in the graph, respectively.\nThe next line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^9$) - the weights of the vertices of the graph.\nThe following $m$ lines contain edges: the $i$-e edge is defined by a triple of integers $v_i, u_i, w_i$ ($1 \\le v_i, u_i \\le n, 1 \\le w_i \\le 10^9, v_i \\neq u_i$). This triple means that between the vertices $v_i$ and $u_i$ there is an edge of weight $w_i$. It is guaranteed that the graph does not contain loops and multiple edges.\n-----Output-----\nPrint one integer \u2014 the maximum weight of the subgraph of the given graph.\n-----Examples-----\nInput\n4 5\n1 5 2 2\n1 3 4\n1 4 4\n3 4 5\n3 2 2\n4 2 2\nOutput\n8\nInput\n3 3\n9 7 8\n1 2 1\n2 3 2\n1 3 3\nOutput\n0\n-----Note-----\nIn the first test example, the optimal subgraph consists of the vertices ${1, 3, 4}$ and has weight $4 + 4 + 5 - (1 + 2 + 2) = 8$. In the second test case, the optimal subgraph is empty.\n\ndef",
        "answer": "def max_weight_subgraph(n, m, a):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2284,
        "prompt": "Complete the Python function given the prompt below:The marmots need to prepare k problems for HC^2 over n days. Each problem, once prepared, also has to be printed.\nThe preparation of a problem on day i (at most one per day) costs a_{i} CHF, and the printing of a problem on day i (also at most one per day) costs b_{i} CHF. Of course, a problem cannot be printed before it has been prepared (but doing both on the same day is fine).\nWhat is the minimum cost of preparation and printing?\n-----Input-----\nThe first line of input contains two space-separated integers n and k (1 \u2264 k \u2264 n \u2264 2200). The second line contains n space-separated integers a_1,..., a_{n} ($1 \\leq a_{i} \\leq 10^{9}$) \u2014 the preparation costs. The third line contains n space-separated integers b_1,..., b_{n} ($1 \\leq b_{i} \\leq 10^{9}$) \u2014 the printing costs.\n-----Output-----\nOutput the minimum cost of preparation and printing k problems \u2014 that is, the minimum possible sum a_{i}_1 + a_{i}_2 +... + a_{i}_{k} + b_{j}_1 + b_{j}_2 +... + b_{j}_{k}, where 1 \u2264 i_1 < i_2 <... < i_{k} \u2264 n, 1 \u2264 j_1 < j_2 <... < j_{k} \u2264 n and i_1 \u2264 j_1, i_2 \u2264 j_2,..., i_{k} \u2264 j_{k}.\n-----Example-----\nInput\n8 4\n3 8 7 9 9 4 6 8\n2 5 9 4 3 8 9 1\nOutput\n32\n-----Note-----\nIn the sample testcase, one optimum solution is to prepare the first problem on day 1 and print it on day 1, prepare the second problem on day 2 and print it on day 4, prepare the third problem on day 3 and print it on day 5, and prepare the fourth problem on day 6 and print it on day 8.\n\ndef",
        "answer": "def marmots(n, k, a, b):\n    cost = 0\n    for i in range(1, n+1):\n        cost += min(a[i-1], b[i-1])\n    return cost",
        "difficulty": "interview"
    },
    {
        "task_id": 2285,
        "prompt": "Complete the Python function given the prompt below:An IPv6-address is a 128-bit number. For convenience, this number is recorded in blocks of 16 bits in hexadecimal record, the blocks are separated by colons \u2014 8 blocks in total, each block has four hexadecimal digits. Here is an example of the correct record of a IPv6 address: \"0124:5678:90ab:cdef:0124:5678:90ab:cdef\". We'll call such format of recording an IPv6-address full.\nBesides the full record of an IPv6 address there is a short record format. The record of an IPv6 address can be shortened by removing one or more leading zeroes at the beginning of each block. However, each block should contain at least one digit in the short format. For example, the leading zeroes can be removed like that: \"a56f:00d3:0000:0124:0001:f19a:1000:0000\"  \u2192  \"a56f:d3:0:0124:01:f19a:1000:00\". There are more ways to shorten zeroes in this IPv6 address.\nSome IPv6 addresses contain long sequences of zeroes. Continuous sequences of 16-bit zero blocks can be shortened to \"::\". A sequence can consist of one or several consecutive blocks, with all 16 bits equal to 0. \nYou can see examples of zero block shortenings below:\n  \"a56f:00d3:0000:0124:0001:0000:0000:0000\"  \u2192  \"a56f:00d3:0000:0124:0001::\";  \"a56f:0000:0000:0124:0001:0000:1234:0ff0\"  \u2192  \"a56f::0124:0001:0000:1234:0ff0\";  \"a56f:0000:0000:0000:0001:0000:1234:0ff0\"  \u2192  \"a56f:0000::0000:0001:0000:1234:0ff0\";  \"a56f:00d3:0000:0124:0001:0000:0000:0000\"  \u2192  \"a56f:00d3:0000:0124:0001::0000\";  \"0000:0000:0000:0000:0000:0000:0000:0000\"  \u2192  \"::\". \nIt is not allowed to shorten zero blocks in the address more than once. This means that the short record can't contain the sequence of characters \"::\" more than once. Otherwise, it will sometimes be impossible to determine the number of zero blocks, each represented by a double colon.\nThe format of the record of the IPv6 address after removing the leading zeroes and shortening the zero blocks is called short.\nYou've got several short records of IPv6 addresses. Restore their full record.\n-----Input-----\nThe first line contains a single integer n \u2014 the number of records to restore (1 \u2264 n \u2264 100).\nEach of the following n lines contains a string \u2014 the short IPv6 addresses. Each string only consists of string characters \"0123456789abcdef:\".\nIt is guaranteed that each short address is obtained by the way that is described in the statement from some full IPv6 address.\n-----Output-----\nFor each short IPv6 address from the input print its full record on a separate line. Print the full records for the short IPv6 addresses in the order, in which the short records follow in the input.\n-----Examples-----\nInput\n6\na56f:d3:0:0124:01:f19a:1000:00\na56f:00d3:0000:0124:0001::\na56f::0124:0001:0000:1234:0ff0\na56f:0000::0000:0001:0000:1234:0ff0\n::\n0ea::4d:f4:6:0\nOutput\na56f:00d3:0000:0124:0001:f19a:1000:0000\na56f:00d3:0000:0124:0001:0000:0000:0000\na56f:0000:0000:0124:0001:0000:1234:0ff0\na56f:0000:0000:0000:0001:0000:1234:0ff0\n0000:0000:0000:0000:0000:0000:0000:0000\n00ea:0000:0000:0000:004d:00f4:0006:0000\n\ndef",
        "answer": "def restore_ipv6_address(ipv6):\n    ipv6 = ipv6.split(':')\n    ipv6 = [int(i, 16) for i in ipv6]\n    ipv6 = [str(hex(i)[2:]) for i in ipv6]\n    ipv6 = ':'.join(ipv6)\n    return ipv6",
        "difficulty": "interview"
    },
    {
        "task_id": 2286,
        "prompt": "Complete the Python function given the prompt below:This is the easy version of the problem. The difference is constraints on the number of wise men and the time limit. You can make hacks only if all versions of this task are solved.\n$n$ wise men live in a beautiful city. Some of them know each other.\nFor each of the $n!$ possible permutations $p_1, p_2, \\ldots, p_n$ of the wise men, let's generate a binary string of length $n-1$: for each $1 \\leq i < n$ set $s_i=1$ if $p_i$ and $p_{i+1}$ know each other, and $s_i=0$ otherwise. \nFor all possible $2^{n-1}$ binary strings, find the number of permutations that produce this binary string.\n-----Input-----\nThe first line of input contains one integer $n$ ($2 \\leq n \\leq 14)$ \u00a0\u2014 the number of wise men in the city.\nThe next $n$ lines contain a binary string of length $n$ each, such that the $j$-th character of the $i$-th string is equal to '1' if wise man $i$ knows wise man $j$, and equals '0' otherwise.\nIt is guaranteed that if the $i$-th man knows the $j$-th man, then the $j$-th man knows $i$-th man and no man knows himself.\n-----Output-----\nPrint $2^{n-1}$ space-separated integers. For each $0 \\leq x < 2^{n-1}$:\n  Let's consider a string $s$ of length $n-1$, such that $s_i = \\lfloor \\frac{x}{2^{i-1}} \\rfloor \\bmod 2$ for all $1 \\leq i \\leq n - 1$.  The $(x+1)$-th number should be equal to the required answer for $s$. \n-----Examples-----\nInput\n3\n011\n101\n110\nOutput\n0 0 0 6 \nInput\n4\n0101\n1000\n0001\n1010\nOutput\n2 2 6 2 2 6 2 2 \n-----Note-----\nIn the first test, each wise man knows each other, so every permutation will produce the string $11$.\nIn the second test:\n  If $p = \\{1, 2, 3, 4\\}$, the produced string is $101$, because wise men $1$ and $2$ know each other, $2$ and $3$ don't know each other, and $3$ and $4$ know each other;  If $p = \\{4, 1, 2, 3\\}$, the produced string is $110$, because wise men $1$ and $4$ know each other, $1$ and $2$ know each other and $2$, and $3$ don't know each other;  If $p = \\{1, 3, 2, 4\\}$, the produced string is $000$, because wise men $1$ and $3$ don't know each other, $3$ and $2$ don't know each other, and $2$ and $4$ don't know each other.\n\ndef",
        "answer": "def solve(n):\n    return 0",
        "difficulty": "interview"
    },
    {
        "task_id": 2287,
        "prompt": "Complete the Python function given the prompt below:You are given a string $s$. Each character is either 0 or 1.\nYou want all 1's in the string to form a contiguous subsegment. For example, if the string is 0, 1, 00111 or 01111100, then all 1's form a contiguous subsegment, and if the string is 0101, 100001 or 11111111111101, then this condition is not met.\nYou may erase some (possibly none) 0's from the string. What is the minimum number of 0's that you have to erase?\n-----Input-----\nThe first line contains one integer $t$ ($1 \\le t \\le 100$) \u2014 the number of test cases.\nThen $t$ lines follow, each representing a test case. Each line contains one string $s$ ($1 \\le |s| \\le 100$); each character of $s$ is either 0 or 1.\n-----Output-----\nPrint $t$ integers, where the $i$-th integer is the answer to the $i$-th testcase (the minimum number of 0's that you have to erase from $s$).\n-----Example-----\nInput\n3\n010011\n0\n1111000\nOutput\n2\n0\n0\n-----Note-----\nIn the first test case you have to delete the third and forth symbols from string 010011 (it turns into 0111).\n\ndef",
        "answer": "def solve(s):\n    count = 0\n    for i in s:\n        if i == '0':\n            count += 1\n    return count",
        "difficulty": "interview"
    },
    {
        "task_id": 2288,
        "prompt": "Complete the Python function given the prompt below:Ashish has $n$ elements arranged in a line. \nThese elements are represented by two integers $a_i$\u00a0\u2014 the value of the element and $b_i$\u00a0\u2014 the type of the element (there are only two possible types: $0$ and $1$). He wants to sort the elements in non-decreasing values of $a_i$.\nHe can perform the following operation any number of times:  Select any two elements $i$ and $j$ such that $b_i \\ne b_j$ and swap them. That is, he can only swap two elements of different types in one move. \nTell him if he can sort the elements in non-decreasing values of $a_i$ after performing any number of operations.\n-----Input-----\nThe first line contains one integer $t$ $(1 \\le t \\le 100)$\u00a0\u2014 the number of test cases. The description of the test cases follows.\nThe first line of each test case contains one integer $n$ $(1 \\le n \\le 500)$\u00a0\u2014 the size of the arrays.\nThe second line contains $n$ integers $a_i$ $(1 \\le a_i \\le 10^5)$ \u00a0\u2014 the value of the $i$-th element.\nThe third line containts $n$ integers $b_i$ $(b_i \\in \\{0, 1\\})$ \u00a0\u2014 the type of the $i$-th element.\n-----Output-----\nFor each test case, print \"Yes\" or \"No\" (without quotes) depending on whether it is possible to sort elements in non-decreasing order of their value.\nYou may print each letter in any case (upper or lower).\n-----Example-----\nInput\n5\n4\n10 20 20 30\n0 1 0 1\n3\n3 1 2\n0 1 1\n4\n2 2 4 8\n1 1 1 1\n3\n5 15 4\n0 0 0\n4\n20 10 100 50\n1 0 0 1\nOutput\nYes\nYes\nYes\nNo\nYes\n-----Note-----\nFor the first case: The elements are already in sorted order.\nFor the second case: Ashish may first swap elements at positions $1$ and $2$, then swap elements at positions $2$ and $3$.\nFor the third case: The elements are already in sorted order.\nFor the fourth case: No swap operations may be performed as there is no pair of elements $i$ and $j$ such that $b_i \\ne b_j$. The elements cannot be sorted.\nFor the fifth case: Ashish may swap elements at positions $3$ and $4$, then elements at positions $1$ and $2$.\n\ndef",
        "answer": "def sort(a,b):\n    for i in range(len(a)):\n        for j in range(len(a)-1):\n            if a[j]>a[j+1]:\n                a[j],a[j+1]=a[j+1],a[j]\n                b[j],b[j+1]=b[j+1],b[j]\n    return a,b",
        "difficulty": "interview"
    },
    {
        "task_id": 2289,
        "prompt": "Complete the Python function given the prompt below:Ivar the Boneless is a great leader. He is trying to capture Kattegat from Lagertha. The war has begun and wave after wave Ivar's warriors are falling in battle.\nIvar has $n$ warriors, he places them on a straight line in front of the main gate, in a way that the $i$-th warrior stands right after $(i-1)$-th warrior. The first warrior leads the attack.\nEach attacker can take up to $a_i$ arrows before he falls to the ground, where $a_i$ is the $i$-th warrior's strength.\nLagertha orders her warriors to shoot $k_i$ arrows during the $i$-th minute, the arrows one by one hit the first still standing warrior. After all Ivar's warriors fall and all the currently flying arrows fly by, Thor smashes his hammer and all Ivar's warriors get their previous strengths back and stand up to fight again. In other words, if all warriors die in minute $t$, they will all be standing to fight at the end of minute $t$.\nThe battle will last for $q$ minutes, after each minute you should tell Ivar what is the number of his standing warriors.\n-----Input-----\nThe first line contains two integers $n$ and $q$ ($1 \\le n, q \\leq 200\\,000$)\u00a0\u2014 the number of warriors and the number of minutes in the battle.\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq 10^9$) that represent the warriors' strengths.\nThe third line contains $q$ integers $k_1, k_2, \\ldots, k_q$ ($1 \\leq k_i \\leq 10^{14}$), the $i$-th of them represents Lagertha's order at the $i$-th minute: $k_i$ arrows will attack the warriors.\n-----Output-----\nOutput $q$ lines, the $i$-th of them is the number of standing warriors after the $i$-th minute.\n-----Examples-----\nInput\n5 5\n1 2 1 2 1\n3 10 1 1 1\nOutput\n3\n5\n4\n4\n3\nInput\n4 4\n1 2 3 4\n9 1 10 6\nOutput\n1\n4\n4\n1\n-----Note-----\nIn the first example:   after the 1-st minute, the 1-st and 2-nd warriors die.  after the 2-nd minute all warriors die (and all arrows left over are wasted), then they will be revived thus answer is 5\u00a0\u2014 all warriors are alive.  after the 3-rd minute, the 1-st warrior dies.  after the 4-th minute, the 2-nd warrior takes a hit and his strength decreases by 1.  after the 5-th minute, the 2-nd warrior dies.\n\ndef",
        "answer": "def answer(n, q, a, k):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2290,
        "prompt": "Complete the Python function given the prompt below:You're given an undirected graph with $n$ nodes and $m$ edges. Nodes are numbered from $1$ to $n$.\nThe graph is considered harmonious if and only if the following property holds:  For every triple of integers $(l, m, r)$ such that $1 \\le l < m < r \\le n$, if there exists a path going from node $l$ to node $r$, then there exists a path going from node $l$ to node $m$. \nIn other words, in a harmonious graph, if from a node $l$ we can reach a node $r$ through edges ($l < r$), then we should able to reach nodes $(l+1), (l+2), \\ldots, (r-1)$ too.\nWhat is the minimum number of edges we need to add to make the graph harmonious? \n-----Input-----\nThe first line contains two integers $n$ and $m$ ($3 \\le n \\le 200\\ 000$ and $1 \\le m \\le 200\\ 000$).\nThe $i$-th of the next $m$ lines contains two integers $u_i$ and $v_i$ ($1 \\le u_i, v_i \\le n$, $u_i \\neq v_i$), that mean that there's an edge between nodes $u$ and $v$.\nIt is guaranteed that the given graph is simple (there is no self-loop, and there is at most one edge between every pair of nodes).\n-----Output-----\nPrint the minimum number of edges we have to add to the graph to make it harmonious.\n-----Examples-----\nInput\n14 8\n1 2\n2 7\n3 4\n6 3\n5 7\n3 8\n6 8\n11 12\nOutput\n1\nInput\n200000 3\n7 9\n9 8\n4 5\nOutput\n0\n-----Note-----\nIn the first example, the given graph is not harmonious (for instance, $1 < 6 < 7$, node $1$ can reach node $7$ through the path $1 \\rightarrow 2 \\rightarrow 7$, but node $1$ can't reach node $6$). However adding the edge $(2, 4)$ is sufficient to make it harmonious.\nIn the second example, the given graph is already harmonious.\n\ndef",
        "answer": "def find_min_edges(n, m):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2291,
        "prompt": "Complete the Python function given the prompt below:Today, as a friendship gift, Bakry gave Badawy $n$ integers $a_1, a_2, \\dots, a_n$ and challenged him to choose an integer $X$ such that the value $\\underset{1 \\leq i \\leq n}{\\max} (a_i \\oplus X)$ is minimum possible, where $\\oplus$ denotes the bitwise XOR operation.\nAs always, Badawy is too lazy, so you decided to help him and find the minimum possible value of $\\underset{1 \\leq i \\leq n}{\\max} (a_i \\oplus X)$.\n-----Input-----\nThe first line contains integer $n$ ($1\\le n \\le 10^5$).\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($0 \\le a_i \\le 2^{30}-1$).\n-----Output-----\nPrint one integer \u2014 the minimum possible value of $\\underset{1 \\leq i \\leq n}{\\max} (a_i \\oplus X)$.\n-----Examples-----\nInput\n3\n1 2 3\nOutput\n2\nInput\n2\n1 5\nOutput\n4\n-----Note-----\nIn the first sample, we can choose $X = 3$.\nIn the second sample, we can choose $X = 5$.\n\ndef",
        "answer": "def solve(n, a):\n    return min(a)",
        "difficulty": "interview"
    },
    {
        "task_id": 2292,
        "prompt": "Complete the Python function given the prompt below:Ayush, Ashish and Vivek are busy preparing a new problem for the next Codeforces round and need help checking if their test cases are valid.\nEach test case consists of an integer $n$ and two arrays $a$ and $b$, of size $n$. If after some (possibly zero) operations described below, array $a$ can be transformed into array $b$, the input is said to be valid. Otherwise, it is invalid.\nAn operation on array $a$ is:   select an integer $k$ $(1 \\le k \\le \\lfloor\\frac{n}{2}\\rfloor)$  swap the prefix of length $k$ with the suffix of length $k$ \nFor example, if array $a$ initially is $\\{1, 2, 3, 4, 5, 6\\}$, after performing an operation with $k = 2$, it is transformed into $\\{5, 6, 3, 4, 1, 2\\}$.\nGiven the set of test cases, help them determine if each one is valid or invalid.\n-----Input-----\nThe first line contains one integer $t$ $(1 \\le t \\le 500)$\u00a0\u2014 the number of test cases. The description of each test case is as follows.\nThe first line of each test case contains a single integer $n$ $(1 \\le n \\le 500)$\u00a0\u2014 the size of the arrays.\nThe second line of each test case contains $n$ integers $a_1$, $a_2$,..., $a_n$ $(1 \\le a_i \\le 10^9)$ \u2014 elements of array $a$.\nThe third line of each test case contains $n$ integers $b_1$, $b_2$,..., $b_n$ $(1 \\le b_i \\le 10^9)$ \u2014 elements of array $b$.\n-----Output-----\nFor each test case, print \"Yes\" if the given input is valid. Otherwise print \"No\".\nYou may print the answer in any case.\n-----Example-----\nInput\n5\n2\n1 2\n2 1\n3\n1 2 3\n1 2 3\n3\n1 2 4\n1 3 4\n4\n1 2 3 2\n3 1 2 2\n3\n1 2 3\n1 3 2\nOutput\nyes\nyes\nNo\nyes\nNo\n-----Note-----\nFor the first test case, we can swap prefix $a[1:1]$ with suffix $a[2:2]$ to get $a=[2, 1]$.\nFor the second test case, $a$ is already equal to $b$.\nFor the third test case, it is impossible since we cannot obtain $3$ in $a$.\nFor the fourth test case, we can first swap prefix $a[1:1]$ with suffix $a[4:4]$ to obtain $a=[2, 2, 3, 1]$. Now we can swap prefix $a[1:2]$ with suffix $a[3:4]$ to obtain $a=[3, 1, 2, 2]$.\nFor the fifth test case, it is impossible to convert $a$ to $b$.\n\ndef",
        "answer": "def valid(a, b):\n    for i in range(len(a)):\n        if a[i]!= b[i]:\n            return False\n    return True",
        "difficulty": "interview"
    },
    {
        "task_id": 2293,
        "prompt": "Complete the Python function given the prompt below:Dora the explorer has decided to use her money after several years of juicy royalties to go shopping. What better place to shop than Nlogonia?\nThere are $n$ stores numbered from $1$ to $n$ in Nlogonia. The $i$-th of these stores offers a positive integer $a_i$.\nEach day among the last $m$ days Dora bought a single integer from some of the stores. The same day, Swiper the fox bought a single integer from all the stores that Dora did not buy an integer from on that day.\nDora considers Swiper to be her rival, and she considers that she beat Swiper on day $i$ if and only if the least common multiple of the numbers she bought on day $i$ is strictly greater than the least common multiple of the numbers that Swiper bought on day $i$.\nThe least common multiple (LCM) of a collection of integers is the smallest positive integer that is divisible by all the integers in the collection.\nHowever, Dora forgot the values of $a_i$. Help Dora find out if there are positive integer values of $a_i$ such that she beat Swiper on every day. You don't need to find what are the possible values of $a_i$ though.\nNote that it is possible for some values of $a_i$ to coincide in a solution.\n-----Input-----\nThe first line contains integers $m$ and $n$ ($1\\leq m \\leq 50$, $1\\leq n \\leq 10^4$)\u00a0\u2014 the number of days and the number of stores.\nAfter this $m$ lines follow, the $i$-th line starts with an integer $s_i$ ($1\\leq s_i \\leq n-1$), the number of integers Dora bought on day $i$, followed by $s_i$ distinct integers, the indices of the stores where Dora bought an integer on the $i$-th day. The indices are between $1$ and $n$.\n-----Output-----\nOutput must consist of a single line containing \"possible\" if there exist positive integers $a_i$ such that for each day the least common multiple of the integers bought by Dora is strictly greater than the least common multiple of the integers bought by Swiper on that day. Otherwise, print \"impossible\".\nNote that you don't have to restore the integers themselves.\n-----Examples-----\nInput\n2 5\n3 1 2 3\n3 3 4 5\nOutput\npossible\nInput\n10 10\n1 1\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\nOutput\nimpossible\n-----Note-----\nIn the first sample, a possible choice for the values of the $a_i$ is $3, 4, 3, 5, 2$. On the first day, Dora buys the integers $3, 4$ and $3$, whose LCM is $12$, while Swiper buys integers $5$ and $2$, whose LCM is $10$. On the second day, Dora buys $3, 5$ and $2$, whose LCM is $30$, and Swiper buys integers $3$ and $4$, whose LCM is $12$.\n\ndef",
        "answer": "def lcm(a, b):\n    return (a * b) / gcd(a, b)",
        "difficulty": "interview"
    },
    {
        "task_id": 2294,
        "prompt": "Complete the Python function given the prompt below:Little Artem has invented a time machine! He could go anywhere in time, but all his thoughts of course are with computer science. He wants to apply this time machine to a well-known data structure: multiset.\nArtem wants to create a basic multiset of integers. He wants these structure to support operations of three types:\n  Add integer to the multiset. Note that the difference between set and multiset is that multiset may store several instances of one integer.  Remove integer from the multiset. Only one instance of this integer is removed. Artem doesn't want to handle any exceptions, so he assumes that every time remove operation is called, that integer is presented in the multiset.  Count the number of instances of the given integer that are stored in the multiset. \nBut what about time machine? Artem doesn't simply apply operations to the multiset one by one, he now travels to different moments of time and apply his operation there. Consider the following example.\n  First Artem adds integer 5 to the multiset at the 1-st moment of time.  Then Artem adds integer 3 to the multiset at the moment 5.  Then Artem asks how many 5 are there in the multiset at moment 6. The answer is 1.  Then Artem returns back in time and asks how many integers 3 are there in the set at moment 4. Since 3 was added only at moment 5, the number of integers 3 at moment 4 equals to 0.  Then Artem goes back in time again and removes 5 from the multiset at moment 3.  Finally Artyom asks at moment 7 how many integers 5 are there in the set. The result is 0, since we have removed 5 at the moment 3. \nNote that Artem dislikes exceptions so much that he assures that after each change he makes all delete operations are applied only to element that is present in the multiset. The answer to the query of the third type is computed at the moment Artem makes the corresponding query and are not affected in any way by future changes he makes.\nHelp Artem implement time travellers multiset.\n-----Input-----\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 100 000)\u00a0\u2014 the number of Artem's queries.\nThen follow n lines with queries descriptions. Each of them contains three integers a_{i}, t_{i} and x_{i} (1 \u2264 a_{i} \u2264 3, 1 \u2264 t_{i}, x_{i} \u2264 10^9)\u00a0\u2014 type of the query, moment of time Artem travels to in order to execute this query and the value of the query itself, respectively. It's guaranteed that all moments of time are distinct and that after each operation is applied all operations of the first and second types are consistent.\n-----Output-----\nFor each ask operation output the number of instances of integer being queried at the given moment of time.\n-----Examples-----\nInput\n6\n1 1 5\n3 5 5\n1 2 5\n3 6 5\n2 3 5\n3 7 5\nOutput\n1\n2\n1\nInput\n3\n1 1 1\n2 2 1\n3 3 1\nOutput\n0\n\ndef",
        "answer": "def time_traveler(n, x, y, z):\n    if n == 1:\n        return x\n    else:\n        return time_traveler(n - 1, x + y, y, z) + time_traveler(n - 1, x, y + z, z) + time_traveler(n - 1, x, y, z + x)",
        "difficulty": "interview"
    },
    {
        "task_id": 2295,
        "prompt": "Complete the Python function given the prompt below:You are given an array a consisting of n positive integers. You pick two integer numbers l and r from 1 to n, inclusive (numbers are picked randomly, equiprobably and independently). If l > r, then you swap values of l and r. You have to calculate the expected value of the number of unique elements in segment of the array from index l to index r, inclusive (1-indexed).\n-----Input-----\nThe first line contains one integer number n (1 \u2264 n \u2264 10^6). The second line contains n integer numbers a_1, a_2,... a_{n} (1 \u2264 a_{i} \u2264 10^6) \u2014 elements of the array.\n-----Output-----\nPrint one number \u2014 the expected number of unique elements in chosen segment. \nYour answer will be considered correct if its absolute or relative error doesn't exceed 10^{ - 4} \u2014 formally, the answer is correct if $\\operatorname{min}(|x - y|, \\frac{|x - y|}{x}) \\leq 10^{-4}$, where x is jury's answer, and y is your answer.\n-----Examples-----\nInput\n2\n1 2\nOutput\n1.500000\nInput\n2\n2 2\nOutput\n1.000000\n\ndef",
        "answer": "def solution(a):\n    # your code here\n    return",
        "difficulty": "interview"
    },
    {
        "task_id": 2296,
        "prompt": "Complete the Python function given the prompt below:Hag is a very talented person. He has always had an artist inside him but his father forced him to study mechanical engineering.\nYesterday he spent all of his time cutting a giant piece of wood trying to make it look like a goose. Anyway, his dad found out that he was doing arts rather than studying mechanics and other boring subjects. He confronted Hag with the fact that he is a spoiled son that does not care about his future, and if he continues to do arts he will cut his 25 Lira monthly allowance.\nHag is trying to prove to his dad that the wooden piece is a project for mechanics subject. He also told his dad that the wooden piece is a strictly convex polygon with $n$ vertices.\nHag brought two pins and pinned the polygon with them in the $1$-st and $2$-nd vertices to the wall. His dad has $q$ queries to Hag of two types.   $1$ $f$ $t$: pull a pin from the vertex $f$, wait for the wooden polygon to rotate under the gravity force (if it will rotate) and stabilize. And then put the pin in vertex $t$.  $2$ $v$: answer what are the coordinates of the vertex $v$. \nPlease help Hag to answer his father's queries.\nYou can assume that the wood that forms the polygon has uniform density and the polygon has a positive thickness, same in all points. After every query of the 1-st type Hag's dad tries to move the polygon a bit and watches it stabilize again.\n-----Input-----\nThe first line contains two integers $n$ and $q$ ($3\\leq n \\leq 10\\,000$, $1 \\leq q \\leq 200000$)\u00a0\u2014 the number of vertices in the polygon and the number of queries.\nThe next $n$ lines describe the wooden polygon, the $i$-th line contains two integers $x_i$ and $y_i$ ($|x_i|, |y_i|\\leq 10^8$)\u00a0\u2014 the coordinates of the $i$-th vertex of the polygon. It is guaranteed that polygon is strictly convex and the vertices are given in the counter-clockwise order and all vertices are distinct.\nThe next $q$ lines describe the queries, one per line. Each query starts with its type $1$ or $2$. Each query of the first type continues with two integers $f$ and $t$ ($1 \\le f, t \\le n$)\u00a0\u2014 the vertex the pin is taken from, and the vertex the pin is put to and the polygon finishes rotating. It is guaranteed that the vertex $f$ contains a pin. Each query of the second type continues with a single integer $v$ ($1 \\le v \\le n$)\u00a0\u2014 the vertex the coordinates of which Hag should tell his father.\nIt is guaranteed that there is at least one query of the second type.\n-----Output-----\nThe output should contain the answer to each query of second type\u00a0\u2014 two numbers in a separate line. Your answer is considered correct, if its absolute or relative error does not exceed $10^{-4}$.\nFormally, let your answer be $a$, and the jury's answer be $b$. Your answer is considered correct if $\\frac{|a - b|}{\\max{(1, |b|)}} \\le 10^{-4}$\n-----Examples-----\nInput\n3 4\n0 0\n2 0\n2 2\n1 1 2\n2 1\n2 2\n2 3\nOutput\n3.4142135624 -1.4142135624\n2.0000000000 0.0000000000\n0.5857864376 -1.4142135624\nInput\n3 2\n-1 1\n0 0\n1 1\n1 1 2\n2 1\nOutput\n1.0000000000 -1.0000000000\n-----Note-----\nIn the first test note the initial and the final state of the wooden polygon.  [Image] \nRed Triangle is the initial state and the green one is the triangle after rotation around $(2,0)$.\nIn the second sample note that the polygon rotates $180$ degrees counter-clockwise or clockwise direction (it does not matter), because Hag's father makes sure that the polygon is stable and his son does not trick him.\n\ndef",
        "answer": "def solution(n, q):\n    # Your code here\n    return [0]",
        "difficulty": "interview"
    },
    {
        "task_id": 2297,
        "prompt": "Complete the Python function given the prompt below:Little girl Margarita is a big fan of competitive programming. She especially loves problems about arrays and queries on them.\nRecently, she was presented with an array $a$ of the size of $10^9$ elements that is filled as follows:   $a_1 = -1$  $a_2 = 2$  $a_3 = -3$  $a_4 = 4$  $a_5 = -5$  And so on... \nThat is, the value of the $i$-th element of the array $a$ is calculated using the formula $a_i = i \\cdot (-1)^i$.\nShe immediately came up with $q$ queries on this array. Each query is described with two numbers: $l$ and $r$. The answer to a query is the sum of all the elements of the array at positions from $l$ to $r$ inclusive.\nMargarita really wants to know the answer to each of the requests. She doesn't want to count all this manually, but unfortunately, she couldn't write the program that solves the problem either. She has turned to you\u00a0\u2014 the best programmer.\nHelp her find the answers!\n-----Input-----\nThe first line contains a single integer $q$ ($1 \\le q \\le 10^3$)\u00a0\u2014 the number of the queries.\nEach of the next $q$ lines contains two integers $l$ and $r$ ($1 \\le l \\le r \\le 10^9$)\u00a0\u2014 the descriptions of the queries.\n-----Output-----\nPrint $q$ lines, each containing one number\u00a0\u2014 the answer to the query. \n-----Example-----\nInput\n5\n1 3\n2 5\n5 5\n4 4\n2 3\nOutput\n-2\n-2\n-5\n4\n-1\n-----Note-----\nIn the first query, you need to find the sum of the elements of the array from position $1$ to position $3$. The sum is equal to $a_1 + a_2 + a_3 = -1 + 2 -3 = -2$.\nIn the second query, you need to find the sum of the elements of the array from position $2$ to position $5$. The sum is equal to $a_2 + a_3 + a_4 + a_5 = 2 -3 + 4 - 5 = -2$.\nIn the third query, you need to find the sum of the elements of the array from position $5$ to position $5$. The sum is equal to $a_5 = -5$.\nIn the fourth query, you need to find the sum of the elements of the array from position $4$ to position $4$. The sum is equal to $a_4 = 4$.\nIn the fifth query, you need to find the sum of the elements of the array from position $2$ to position $3$. The sum is equal to $a_2 + a_3 = 2 - 3 = -1$.\n\ndef",
        "answer": "def answer(a, q):\n    for i in range(q):\n        l, r = map(int, raw_input().split())\n        print sum(a[l-1:r])",
        "difficulty": "interview"
    },
    {
        "task_id": 2298,
        "prompt": "Complete the Python function given the prompt below:You are given two integers $a$ and $b$, and $q$ queries. The $i$-th query consists of two numbers $l_i$ and $r_i$, and the answer to it is the number of integers $x$ such that $l_i \\le x \\le r_i$, and $((x \\bmod a) \\bmod b) \\ne ((x \\bmod b) \\bmod a)$. Calculate the answer for each query.\nRecall that $y \\bmod z$ is the remainder of the division of $y$ by $z$. For example, $5 \\bmod 3 = 2$, $7 \\bmod 8 = 7$, $9 \\bmod 4 = 1$, $9 \\bmod 9 = 0$.\n-----Input-----\nThe first line contains one integer $t$ ($1 \\le t \\le 100$)\u00a0\u2014 the number of test cases. Then the test cases follow.\nThe first line of each test case contains three integers $a$, $b$ and $q$ ($1 \\le a, b \\le 200$; $1 \\le q \\le 500$).\nThen $q$ lines follow, each containing two integers $l_i$ and $r_i$ ($1 \\le l_i \\le r_i \\le 10^{18}$) for the corresponding query.\n-----Output-----\nFor each test case, print $q$ integers\u00a0\u2014 the answers to the queries of this test case in the order they appear.\n-----Example-----\nInput\n2\n4 6 5\n1 1\n1 3\n1 5\n1 7\n1 9\n7 10 2\n7 8\n100 200\nOutput\n0 0 0 2 4 \n0 91\n\ndef",
        "answer": "def modulo(a, b):\n    return (a % b + b) % b",
        "difficulty": "interview"
    },
    {
        "task_id": 2299,
        "prompt": "Complete the Python function given the prompt below:During the lesson small girl Alyona works with one famous spreadsheet computer program and learns how to edit tables.\nNow she has a table filled with integers. The table consists of n rows and m columns. By a_{i}, j we will denote the integer located at the i-th row and the j-th column. We say that the table is sorted in non-decreasing order in the column j if a_{i}, j \u2264 a_{i} + 1, j for all i from 1 to n - 1.\nTeacher gave Alyona k tasks. For each of the tasks two integers l and r are given and Alyona has to answer the following question: if one keeps the rows from l to r inclusive and deletes all others, will the table be sorted in non-decreasing order in at least one column? Formally, does there exist such j that a_{i}, j \u2264 a_{i} + 1, j for all i from l to r - 1 inclusive.\nAlyona is too small to deal with this task and asks you to help!\n-----Input-----\nThe first line of the input contains two positive integers n and m (1 \u2264 n\u00b7m \u2264 100 000)\u00a0\u2014 the number of rows and the number of columns in the table respectively. Note that your are given a constraint that bound the product of these two integers, i.e. the number of elements in the table.\nEach of the following n lines contains m integers. The j-th integers in the i of these lines stands for a_{i}, j (1 \u2264 a_{i}, j \u2264 10^9).\nThe next line of the input contains an integer k (1 \u2264 k \u2264 100 000)\u00a0\u2014 the number of task that teacher gave to Alyona.\nThe i-th of the next k lines contains two integers l_{i} and r_{i} (1 \u2264 l_{i} \u2264 r_{i} \u2264 n).\n-----Output-----\nPrint \"Yes\" to the i-th line of the output if the table consisting of rows from l_{i} to r_{i} inclusive is sorted in non-decreasing order in at least one column. Otherwise, print \"No\".\n-----Example-----\nInput\n5 4\n1 2 3 5\n3 1 3 2\n4 5 2 3\n5 5 3 2\n4 4 3 4\n6\n1 1\n2 5\n4 5\n3 5\n1 3\n1 5\nOutput\nYes\nNo\nYes\nYes\nYes\nNo\n-----Note-----\nIn the sample, the whole table is not sorted in any column. However, rows 1\u20133 are sorted in column 1, while rows 4\u20135 are sorted in column 3.\n\ndef",
        "answer": "def answer(n, m, k, l, r):\n    table = [list(map(int, input().split())) for _ in range(n)]\n    for _ in range(k):\n        l_i, r_i = map(int, input().split())\n        for i in range(n):\n            table[i][l_i-1:r_i] = table[i][l_i-1:r_i][::-1]\n    for i in range(n):\n        if all(table[i][j] <= table[i][j+1] for j in range(m-1)):\n            print('Yes')\n        else:\n            print('No')",
        "difficulty": "interview"
    }
]