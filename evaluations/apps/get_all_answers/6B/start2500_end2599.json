[
    {
        "task_id": 2500,
        "prompt": "Complete the Python function given the prompt below:You are given a positive integer N.\nFind the number of the pairs of integers u and v (0\u2266u,v\u2266N) such that there exist two non-negative integers a and b satisfying a xor b=u and a+b=v.\nHere, xor denotes the bitwise exclusive OR.\nSince it can be extremely large, compute the answer modulo 10^9+7.\n-----Constraints-----\n - 1\u2266N\u226610^{18}\n-----Input-----\nThe input is given from Standard Input in the following format:\nN\n-----Output-----\nPrint the number of the possible pairs of integers u and v, modulo 10^9+7.\n-----Sample Input-----\n3\n-----Sample Output-----\n5\nThe five possible pairs of u and v are:\n - u=0,v=0 (Let a=0,b=0, then 0 xor 0=0, 0+0=0.)\n - u=0,v=2 (Let a=1,b=1, then 1 xor 1=0, 1+1=2.\uff09\n - u=1,v=1 (Let a=1,b=0, then 1 xor 0=1, 1+0=1.\uff09\n - u=2,v=2 (Let a=2,b=0, then 2 xor 0=2, 2+0=2.\uff09\n - u=3,v=3 (Let a=3,b=0, then 3 xor 0=3, 3+0=3.\uff09\n\ndef",
        "answer": "def solve(N):\n    return 0",
        "difficulty": "interview"
    },
    {
        "task_id": 2501,
        "prompt": "Complete the Python function given the prompt below:You are the top spy of AtCoder Kingdom. To prevent the stolen secret from being handed to AlDebaran Kingdom, you have sneaked into the party where the transaction happens.\nThere are N attendees in the party, and they are given attendee numbers from 1 through N. The height of Attendee i is A_i.\nAccording to an examination beforehand, you know that a pair of attendees satisfying the condition below will make the transaction.\n - The absolute difference of their attendee numbers is equal to the sum of their heights.\nThere are \\frac{N(N-1)}{2} ways to choose two from the N attendees and make a pair. Among them, how many satisfy the condition above?\nP.S.: We cannot let you know the secret.\n-----Constraints-----\n - All values in input are integers.\n - 2 \\leq N \\leq 2 \\times 10^5\n - 1 \\leq A_i \\leq 10^9\\ (1 \\leq i \\leq N)\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nA_1 A_2 \\dots A_N\n-----Output-----\nPrint the number of pairs satisfying the condition.\n-----Sample Input-----\n6\n2 3 3 1 3 1\n-----Sample Output-----\n3\n - A_1 + A_4 = 3, so the pair of Attendee 1 and 4 satisfy the condition.\n - A_2 + A_6 = 4, so the pair of Attendee 2 and 6 satisfy the condition.\n - A_4 + A_6 = 2, so the pair of Attendee 4 and 6 satisfy the condition.\nNo other pair satisfies the condition, so you should print 3.\n\ndef",
        "answer": "def main():\n    N = int(input())\n    A = list(map(int, input().split()))\n    print(solve(N, A))",
        "difficulty": "interview"
    },
    {
        "task_id": 2502,
        "prompt": "Complete the Python function given the prompt below:Given are two strings s and t consisting of lowercase English letters. Determine if the number of non-negative integers i satisfying the following condition is finite, and find the maximum value of such i if the number is finite.\n - There exists a non-negative integer j such that the concatenation of i copies of t is a substring of the concatenation of j copies of s.\n-----Notes-----\n - A string a is a substring of another string b if and only if there exists an integer x (0 \\leq x \\leq |b| - |a|) such that, for any y (1 \\leq y \\leq |a|), a_y = b_{x+y} holds.\n - We assume that the concatenation of zero copies of any string is the empty string. From the definition above, the empty string is a substring of any string. Thus, for any two strings s and t, i = 0 satisfies the condition in the problem statement.\n-----Constraints-----\n - 1 \\leq |s| \\leq 5 \\times 10^5\n - 1 \\leq |t| \\leq 5 \\times 10^5\n - s and t consist of lowercase English letters.\n-----Input-----\nInput is given from Standard Input in the following format:\ns\nt\n-----Output-----\nIf the number of non-negative integers i satisfying the following condition is finite, print the maximum value of such i; if the number is infinite, print -1.\n-----Sample Input-----\nabcabab\nab\n-----Sample Output-----\n3\nThe concatenation of three copies of t, ababab, is a substring of the concatenation of two copies of s, abcabababcabab, so i = 3 satisfies the condition.\nOn the other hand, the concatenation of four copies of t, abababab, is not a substring of the concatenation of any number of copies of s, so i = 4 does not satisfy the condition.\nSimilarly, any integer greater than 4 does not satisfy the condition, either. Thus, the number of non-negative integers i satisfying the condition is finite, and the maximum value of such i is 3.\n\ndef",
        "answer": "def solve(s, t):\n    n = len(s)\n    m = len(t)\n    for i in range(n):\n        for j in range(m):\n            if s[i:i+m] == t:\n                return i\n    return -1",
        "difficulty": "interview"
    },
    {
        "task_id": 2503,
        "prompt": "Complete the Python function given the prompt below:AtCoDeer is thinking of painting an infinite two-dimensional grid in a checked pattern of side K.\nHere, a checked pattern of side K is a pattern where each square is painted black or white so that each connected component of each color is a K \u00d7 K square.\nBelow is an example of a checked pattern of side 3:\nAtCoDeer has N desires.\nThe i-th desire is represented by x_i, y_i and c_i.\nIf c_i is B, it means that he wants to paint the square (x_i,y_i) black; if c_i is W, he wants to paint the square (x_i,y_i) white.\nAt most how many desires can he satisfy at the same time?\n-----Constraints-----\n - 1 \u2264 N \u2264 10^5\n - 1 \u2264 K \u2264 1000\n - 0 \u2264 x_i \u2264 10^9\n - 0 \u2264 y_i \u2264 10^9\n - If i \u2260 j, then (x_i,y_i) \u2260 (x_j,y_j).\n - c_i is B or W.\n - N, K, x_i and y_i are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN K\nx_1 y_1 c_1\nx_2 y_2 c_2\n:\nx_N y_N c_N\n-----Output-----\nPrint the maximum number of desires that can be satisfied at the same time.\n-----Sample Input-----\n4 3\n0 1 W\n1 2 W\n5 3 B\n5 4 B\n-----Sample Output-----\n4\nHe can satisfy all his desires by painting as shown in the example above.\n\ndef",
        "answer": "def paint(n, k):\n    if n == 1:\n        return 1\n    if n == 2:\n        return k\n    if n == 3:\n        return k**2\n    if n == 4:\n        return k**4\n    if n == 5:\n        return k**6\n    if n == 6:\n        return k**8\n    if n == 7:\n        return k**10\n    if n == 8:\n        return k**12\n    if n == 9:\n        return k**14\n    if n == 10:\n        return k**16\n    if n == 11:\n        return k**18\n    if n == 12:\n        return k**20\n    if n == 13:\n        return k**22\n    if n == 14:\n        return k**24\n    if n == 15:\n        return k**26\n    if n == 16:\n        return k**28\n    if n == 17:\n        return k**30\n    if n == 18:\n        return k**32\n    if n == 19:\n        return k**34\n    if n == 20:\n        return k**36\n    if n == 21:\n        return k**38\n    if n == 22:\n        return k**40\n    if n == 23:\n        return k**42\n    if n == 24:\n        return k**44\n    if n == 25:\n        return k**46\n    if n == 26:\n        return k**48\n    if n == 27:\n        return k**50\n    if n == 28:\n        return k**52\n    if n == 29:\n        return k**54\n    if n == 30:\n        return k**56\n    if n == 31:\n        return k**58\n    if n == 32:\n        return k**60\n    if n == 33:\n        return k**62\n    if n == 34:\n        return k**64\n    if n == 35:\n        return k**66\n    if n == 36:\n        return k**68\n    if n == 37:\n        return k**70\n    if n == 38:\n        return k**72\n    if n",
        "difficulty": "interview"
    },
    {
        "task_id": 2504,
        "prompt": "Complete the Python function given the prompt below:There are N towns numbered 1 to N and M roads. The i-th road connects Town A_i and Town B_i bidirectionally and has a length of C_i.\nTakahashi will travel between these towns by car, passing through these roads. The fuel tank of his car can contain at most L liters of fuel, and one liter of fuel is consumed for each unit distance traveled. When visiting a town while traveling, he can full the tank (or choose not to do so). Travel that results in the tank becoming empty halfway on the road cannot be done.\nProcess the following Q queries:\n - The tank is now full. Find the minimum number of times he needs to full his tank while traveling from Town s_i to Town t_i. If Town t_i is unreachable, print -1.\n-----Constraints-----\n - All values in input are integers.\n - 2 \\leq N \\leq 300\n - 0 \\leq M \\leq \\frac{N(N-1)}{2}\n - 1 \\leq L \\leq 10^9\n - 1 \\leq A_i, B_i \\leq N\n - A_i \\neq B_i\n - \\left(A_i, B_i\\right) \\neq \\left(A_j, B_j\\right) (if i \\neq j)\n - \\left(A_i, B_i\\right) \\neq \\left(B_j, A_j\\right) (if i \\neq j)\n - 1 \\leq C_i \\leq 10^9\n - 1 \\leq Q \\leq N\\left(N-1\\right)\n - 1 \\leq s_i, t_i \\leq N\n - s_i \\neq t_i\n - \\left(s_i, t_i\\right) \\neq \\left(s_j, t_j\\right) (if i \\neq j)\n-----Input-----\nInput is given from Standard Input in the following format:\nN M L\nA_1 B_1 C_1\n:\nA_M B_M C_M\nQ\ns_1 t_1\n:\ns_Q t_Q\n-----Output-----\nPrint Q lines.\nThe i-th line should contain the minimum number of times the tank needs to be fulled while traveling from Town s_i to Town t_i. If Town t_i is unreachable, the line should contain -1 instead.\n-----Sample Input-----\n3 2 5\n1 2 3\n2 3 3\n2\n3 2\n1 3\n-----Sample Output-----\n0\n1\nTo travel from Town 3 to Town 2, we can use the second road to reach Town 2 without fueling the tank on the way.\nTo travel from Town 1 to Town 3, we can first use the first road to get to Town 2, full the tank, and use the second road to reach Town 3.\n\ndef",
        "answer": "def min_fuel(N, M, L, A, B, C):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2505,
        "prompt": "Complete the Python function given the prompt below:We have a set S of N points in a two-dimensional plane. The coordinates of the i-th point are (x_i, y_i). The N points have distinct x-coordinates and distinct y-coordinates.\nFor a non-empty subset T of S, let f(T) be the number of points contained in the smallest rectangle, whose sides are parallel to the coordinate axes, that contains all the points in T. More formally, we define f(T) as follows:\n - f(T) :=  (the number of integers i (1 \\leq i \\leq N) such that a \\leq x_i \\leq b and c \\leq y_i \\leq d, where a, b, c, and d are the minimum x-coordinate, the maximum x-coordinate, the minimum y-coordinate, and the maximum y-coordinate of the points in T)\nFind the sum of f(T) over all non-empty subset T of S. Since it can be enormous, print the sum modulo 998244353.\n-----Constraints-----\n - 1 \\leq N \\leq 2 \\times 10^5\n - -10^9 \\leq x_i, y_i \\leq 10^9\n - x_i \\neq x_j (i \\neq j)\n - y_i \\neq y_j (i \\neq j)\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nx_1 y_1\n:\nx_N y_N\n-----Output-----\nPrint the sum of f(T) over all non-empty subset T of S, modulo 998244353.\n-----Sample Input-----\n3\n-1 3\n2 1\n3 -2\n-----Sample Output-----\n13\nLet the first, second, and third points be P_1, P_2, and P_3, respectively. S = \\{P_1, P_2, P_3\\} has seven non-empty subsets, and f has the following values for each of them:\n - f(\\{P_1\\}) = 1\n - f(\\{P_2\\}) = 1\n - f(\\{P_3\\}) = 1\n - f(\\{P_1, P_2\\}) = 2\n - f(\\{P_2, P_3\\}) = 2\n - f(\\{P_3, P_1\\}) = 3\n - f(\\{P_1, P_2, P_3\\}) = 3\nThe sum of these is 13.\n\ndef",
        "answer": "def f(T):\n    return len(T)",
        "difficulty": "interview"
    },
    {
        "task_id": 2506,
        "prompt": "Complete the Python function given the prompt below:Takahashi has come to a party as a special guest.\nThere are N ordinary guests at the party. The i-th ordinary guest has a power of A_i.\nTakahashi has decided to perform M handshakes to increase the happiness of the party (let the current happiness be 0).\nA handshake will be performed as follows:\n - Takahashi chooses one (ordinary) guest x for his left hand and another guest y for his right hand (x and y can be the same).\n - Then, he shakes the left hand of Guest x and the right hand of Guest y simultaneously to increase the happiness by A_x+A_y.\nHowever, Takahashi should not perform the same handshake more than once. Formally, the following condition must hold:\n - Assume that, in the k-th handshake, Takahashi shakes the left hand of Guest x_k and the right hand of Guest y_k. Then, there is no pair p, q (1 \\leq p < q \\leq M) such that (x_p,y_p)=(x_q,y_q).\nWhat is the maximum possible happiness after M handshakes?\n-----Constraints-----\n - 1 \\leq N \\leq 10^5\n - 1 \\leq M \\leq N^2\n - 1 \\leq A_i \\leq 10^5\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN M\nA_1 A_2... A_N\n-----Output-----\nPrint the maximum possible happiness after M handshakes.\n-----Sample Input-----\n5 3\n10 14 19 34 33\n-----Sample Output-----\n202\nLet us say that Takahashi performs the following handshakes:\n - In the first handshake, Takahashi shakes the left hand of Guest 4 and the right hand of Guest 4.\n - In the second handshake, Takahashi shakes the left hand of Guest 4 and the right hand of Guest 5.\n - In the third handshake, Takahashi shakes the left hand of Guest 5 and the right hand of Guest 4.\nThen, we will have the happiness of (34+34)+(34+33)+(33+34)=202.\nWe cannot achieve the happiness of 203 or greater, so the answer is 202.\n\ndef",
        "answer": "def max_happiness(N, M, A):\n    happiness = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            happiness += max(A[i], A[j])\n    return happiness",
        "difficulty": "interview"
    },
    {
        "task_id": 2507,
        "prompt": "Complete the Python function given the prompt below:Takahashi will take part in an eating contest. Teams of N members will compete in this contest, and Takahashi's team consists of N players numbered 1 through N from youngest to oldest. The consumption coefficient of Member i is A_i.\nIn the contest, N foods numbered 1 through N will be presented, and the difficulty of Food i is F_i. The details of the contest are as follows:\n - A team should assign one member to each food, and should not assign the same member to multiple foods.\n - It will take x \\times y seconds for a member to finish the food, where x is the consumption coefficient of the member and y is the difficulty of the dish.\n - The score of a team is the longest time it takes for an individual member to finish the food.\nBefore the contest, Takahashi's team decided to do some training. In one set of training, a member can reduce his/her consumption coefficient by 1, as long as it does not go below 0. However, for financial reasons, the N members can do at most K sets of training in total.\nWhat is the minimum possible score of the team, achieved by choosing the amounts of members' training and allocating the dishes optimally?\n-----Constraints-----\n - All values in input are integers.\n - 1 \\leq N \\leq 2 \\times 10^5\n - 0 \\leq K \\leq 10^{18}\n - 1 \\leq A_i \\leq 10^6\\ (1 \\leq i \\leq N)\n - 1 \\leq F_i \\leq 10^6\\ (1 \\leq i \\leq N)\n-----Input-----\nInput is given from Standard Input in the following format:\nN K\nA_1 A_2... A_N\nF_1 F_2... F_N\n-----Output-----\nPrint the minimum possible score of the team.\n-----Sample Input-----\n3 5\n4 2 1\n2 3 1\n-----Sample Output-----\n2\nThey can achieve the score of 2, as follows:\n - Member 1 does 4 sets of training and eats Food 2 in (4-4) \\times 3 = 0 seconds.\n - Member 2 does 1 set of training and eats Food 3 in (2-1) \\times 1 = 1 second.\n - Member 3 does 0 sets of training and eats Food 1 in (1-0) \\times 2 = 2 seconds.\nThey cannot achieve a score of less than 2, so the answer is 2.\n\ndef",
        "answer": "def solve(N, K, A, F):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2508,
        "prompt": "Complete the Python function given the prompt below:Snuke, a water strider, lives in a rectangular pond that can be seen as a grid with H east-west rows and W north-south columns. Let (i,j) be the square at the i-th row from the north and j-th column from the west.\nSome of the squares have a lotus leaf on it and cannot be entered.\nThe square (i,j) has a lotus leaf on it if c_{ij} is @, and it does not if c_{ij} is..\nIn one stroke, Snuke can move between 1 and K squares (inclusive) toward one of the four directions: north, east, south, and west.\nThe move may not pass through a square with a lotus leaf. Moving to such a square or out of the pond is also forbidden.\nFind the minimum number of strokes Snuke takes to travel from the square (x_1,y_1) to (x_2,y_2).\nIf the travel from (x_1,y_1) to (x_2,y_2) is impossible, point out that fact.\n-----Constraints-----\n - 1 \\leq H,W,K \\leq 10^6\n - H \\times W \\leq 10^6\n - 1 \\leq x_1,x_2 \\leq H\n - 1 \\leq y_1,y_2 \\leq W\n - x_1 \\neq x_2 or y_1 \\neq y_2.\n - c_{i,j} is. or @.\n - c_{x_1,y_1} =.\n - c_{x_2,y_2} =.\n - All numbers in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nH W K\nx_1 y_1 x_2 y_2\nc_{1,1}c_{1,2}.. c_{1,W}\nc_{2,1}c_{2,2}.. c_{2,W}\n:\nc_{H,1}c_{H,2}.. c_{H,W}\n-----Output-----\nPrint the minimum number of strokes Snuke takes to travel from the square (x_1,y_1) to (x_2,y_2), or print -1 if the travel is impossible.\n-----Sample Input-----\n3 5 2\n3 2 3 4\n.....\n.@..@\n..@..\n-----Sample Output-----\n5\nInitially, Snuke is at the square (3,2).\nHe can reach the square (3, 4) by making five strokes as follows:\n - From (3, 2), go west one square to (3, 1).\n - From (3, 1), go north two squares to (1, 1).\n - From (1, 1), go east two squares to (1, 3).\n - From (1, 3), go east one square to (1, 4).\n - From (1, 4), go south two squares to (3, 4).\n\ndef",
        "answer": "def snail(H, W, K, x_1, y_1, x_2, y_2):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2509,
        "prompt": "Complete the Python function given the prompt below:Takahashi had a pair of two positive integers not exceeding N, (a,b), which he has forgotten.\nHe remembers that the remainder of a divided by b was greater than or equal to K.\nFind the number of possible pairs that he may have had.\n-----Constraints-----\n - 1 \\leq N \\leq 10^5\n - 0 \\leq K \\leq N-1\n - All input values are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN K\n-----Output-----\nPrint the number of possible pairs that he may have had.\n-----Sample Input-----\n5 2\n-----Sample Output-----\n7\nThere are seven possible pairs: (2,3),(5,3),(2,4),(3,4),(2,5),(3,5) and (4,5).\n\ndef",
        "answer": "def countPairs(N, K):\n    count = 0\n    for i in range(1, N):\n        if i % K == 0:\n            count += 1\n    return count",
        "difficulty": "interview"
    },
    {
        "task_id": 2510,
        "prompt": "Complete the Python function given the prompt below:There are N persons called Person 1 through Person N.\nYou are given M facts that \"Person A_i and Person B_i are friends.\" The same fact may be given multiple times.\nIf X and Y are friends, and Y and Z are friends, then X and Z are also friends. There is no friendship that cannot be derived from the M given facts.\nTakahashi the evil wants to divide the N persons into some number of groups so that every person has no friend in his/her group.\nAt least how many groups does he need to make?\n-----Constraints-----\n - 2 \\leq N \\leq 2\\times 10^5\n - 0 \\leq M \\leq 2\\times 10^5\n - 1\\leq A_i,B_i\\leq N\n - A_i \\neq B_i\n-----Input-----\nInput is given from Standard Input in the following format:\nN M\nA_1 B_1\n\\vdots\nA_M B_M\n-----Output-----\nPrint the answer.\n-----Sample Input-----\n5 3\n1 2\n3 4\n5 1\n-----Sample Output-----\n3\nDividing them into three groups such as \\{1,3\\}, \\{2,4\\}, and \\{5\\} achieves the goal.\n\ndef",
        "answer": "def solution(N, M):\n    # Write your code here\n    return 0",
        "difficulty": "interview"
    },
    {
        "task_id": 2511,
        "prompt": "Complete the Python function given the prompt below:You are given a tree with N vertices and N-1 edges. The vertices are numbered 1 to N, and the i-th edge connects Vertex a_i and b_i.\nYou have coloring materials of K colors.\nFor each vertex in the tree, you will choose one of the K colors to paint it, so that the following condition is satisfied:\n - If the distance between two different vertices x and y is less than or equal to two, x and y have different colors.\nHow many ways are there to paint the tree? Find the count modulo 1\\ 000\\ 000\\ 007.\nWhat is tree?\nA tree is a kind of graph. For detail, please see: Wikipedia \"Tree (graph theory)\"\nWhat is distance?\nThe distance between two vertices x and y is the minimum number of edges one has to traverse to get from x to y.\n-----Constraints-----\n - 1 \\leq N,K \\leq 10^5\n - 1 \\leq a_i,b_i \\leq N\n - The given graph is a tree.\n-----Input-----\nInput is given from Standard Input in the following format:\nN K\na_1 b_1\na_2 b_2\n.\n.\n.\na_{N-1} b_{N-1}\n-----Output-----\nPrint the number of ways to paint the tree, modulo 1\\ 000\\ 000\\ 007.\n-----Sample Input-----\n4 3\n1 2\n2 3\n3 4\n-----Sample Output-----\n6\nThere are six ways to paint the tree.\n\ndef",
        "answer": "def paintTree(N, K):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2512,
        "prompt": "Complete the Python function given the prompt below:There are K items placed on a grid of squares with R rows and C columns. Let (i, j) denote the square at the i-th row (1 \\leq i \\leq R) and the j-th column (1 \\leq j \\leq C). The i-th item is at (r_i, c_i) and has the value v_i.\nTakahashi will begin at (1, 1), the start, and get to (R, C), the goal. When he is at (i, j), he can move to (i + 1, j) or (i, j + 1) (but cannot move to a non-existent square).\nHe can pick up items on the squares he visits, including the start and the goal, but at most three for each row. It is allowed to ignore the item on a square he visits.\nFind the maximum possible sum of the values of items he picks up.\n-----Constraints-----\n - 1 \\leq R, C \\leq 3000\n - 1 \\leq K \\leq \\min(2 \\times 10^5, R \\times C)\n - 1 \\leq r_i \\leq R\n - 1 \\leq c_i \\leq C\n - (r_i, c_i) \\neq (r_j, c_j) (i \\neq j)\n - 1 \\leq v_i \\leq 10^9\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nR C K\nr_1 c_1 v_1\nr_2 c_2 v_2\n:\nr_K c_K v_K\n-----Output-----\nPrint the maximum possible sum of the values of items Takahashi picks up.\n-----Sample Input-----\n2 2 3\n1 1 3\n2 1 4\n1 2 5\n-----Sample Output-----\n8\nHe has two ways to get to the goal:\n - Visit (1, 1), (1, 2), and (2, 2), in this order. In this case, the total value of the items he can pick up is 3 + 5 = 8.\n - Visit (1, 1), (2, 1), and (2, 2), in this order. In this case, the total value of the items he can pick up is 3 + 4 = 7.\nThus, the maximum possible sum of the values of items he picks up is 8.\n\ndef",
        "answer": "def main():\n    R, C, K = map(int, input().split())\n    items = [list(map(int, input().split())) for _ in range(K)]\n    items.sort(key=lambda x: x[1])\n    items.sort(key=lambda x: x[0])\n    items.sort(key=lambda x: x[1] * x[0])\n    print(items)\n    print(items[0][1] * items[0][0])",
        "difficulty": "interview"
    },
    {
        "task_id": 2513,
        "prompt": "Complete the Python function given the prompt below:Snuke, who loves animals, built a zoo.\nThere are N animals in this zoo. They are conveniently numbered 1 through N, and arranged in a circle.\nThe animal numbered i (2\u2264i\u2264N-1) is adjacent to the animals numbered i-1 and i+1. Also, the animal numbered 1 is adjacent to the animals numbered 2 and N, and the animal numbered N is adjacent to the animals numbered N-1 and 1.\nThere are two kinds of animals in this zoo: honest sheep that only speak the truth, and lying wolves that only tell lies.\nSnuke cannot tell the difference between these two species, and asked each animal the following question: \"Are your neighbors of the same species?\" The animal numbered i answered s_i. Here, if s_i is o, the animal said that the two neighboring animals are of the same species, and if s_i is x, the animal said that the two neighboring animals are of different species.\nMore formally, a sheep answered o if the two neighboring animals are both sheep or both wolves, and answered x otherwise.\nSimilarly, a wolf answered x if the two neighboring animals are both sheep or both wolves, and answered o otherwise.\nSnuke is wondering whether there is a valid assignment of species to the animals that is consistent with these responses. If there is such an assignment, show one such assignment. Otherwise, print -1.\n-----Constraints-----\n - 3 \u2264 N \u2264 10^{5}\n - s is a string of length N consisting of o and x.\n-----Input-----\nThe input is given from Standard Input in the following format:\nN\ns\n-----Output-----\nIf there does not exist an valid assignment that is consistent with s, print -1.\nOtherwise, print an string t in the following format. The output is considered correct if the assignment described by t is consistent with s.\n - t is a string of length N consisting of S and W.\n - If t_i is S, it indicates that the animal numbered i is a sheep. If t_i is W, it indicates that the animal numbered i is a wolf.\n-----Sample Input-----\n6\nooxoox\n-----Sample Output-----\nSSSWWS\nFor example, if the animals numbered 1, 2, 3, 4, 5 and 6 are respectively a sheep, sheep, sheep, wolf, wolf, and sheep, it is consistent with their responses. Besides, there is another valid assignment of species: a wolf, sheep, wolf, sheep, wolf and wolf.\nLet us remind you: if the neiboring animals are of the same species, a sheep answers o and a wolf answers x. If the neiboring animals are of different species, a sheep answers x and a wolf answers o.\n\ndef",
        "answer": "def solution(s):\n    # Your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2514,
        "prompt": "Complete the Python function given the prompt below:You have a sequence A composed of N positive integers: A_{1}, A_{2}, \\cdots, A_{N}.\nYou will now successively do the following Q operations:\n - In the i-th operation, you replace every element whose value is B_{i} with C_{i}.\nFor each i (1 \\leq i \\leq Q), find S_{i}: the sum of all elements in A just after the i-th operation.\n-----Constraints-----\n - All values in input are integers.\n -  1 \\leq N, Q, A_{i}, B_{i}, C_{i} \\leq 10^{5} \n -  B_{i} \\neq C_{i} \n-----Input-----\nInput is given from Standard Input in the following format:\nN\nA_{1} A_{2} \\cdots A_{N}\nQ\nB_{1} C_{1}\nB_{2} C_{2}\n\\vdots\nB_{Q} C_{Q}\n-----Output-----\nPrint Q integers S_{i} to Standard Output in the following format:\nS_{1}\nS_{2}\n\\vdots\nS_{Q}\nNote that S_{i} may not fit into a 32-bit integer.\n-----Sample Input-----\n4\n1 2 3 4\n3\n1 2\n3 4\n2 4\n-----Sample Output-----\n11\n12\n16\nInitially, the sequence A is 1,2,3,4.\nAfter each operation, it becomes the following:\n - 2, 2, 3, 4\n - 2, 2, 4, 4\n - 4, 4, 4, 4\n\ndef",
        "answer": "def solution(A, Q):\n    # Write your code here\n    pass\n",
        "difficulty": "interview"
    },
    {
        "task_id": 2515,
        "prompt": "Complete the Python function given the prompt below:We say that a odd number N is similar to 2017 when both N and (N+1)/2 are prime.\nYou are given Q queries.\nIn the i-th query, given two odd numbers l_i and r_i, find the number of odd numbers x similar to 2017 such that l_i \u2264 x \u2264 r_i.\n-----Constraints-----\n - 1\u2264Q\u226410^5\n - 1\u2264l_i\u2264r_i\u226410^5\n - l_i and r_i are odd.\n - All input values are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nQ\nl_1 r_1\n:\nl_Q r_Q\n-----Output-----\nPrint Q lines. The i-th line (1\u2264i\u2264Q) should contain the response to the i-th query.\n-----Sample Input-----\n1\n3 7\n-----Sample Output-----\n2\n - 3 is similar to 2017, since both 3 and (3+1)/2=2 are prime.\n - 5 is similar to 2017, since both 5 and (5+1)/2=3 are prime.\n - 7 is not similar to 2017, since (7+1)/2=4 is not prime, although 7 is prime.\nThus, the response to the first query should be 2.\n\ndef",
        "answer": "def is_prime(n):\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True",
        "difficulty": "interview"
    },
    {
        "task_id": 2516,
        "prompt": "Complete the Python function given the prompt below:Takahashi has a string S of length N consisting of digits from 0 through 9.\nHe loves the prime number P. He wants to know how many non-empty (contiguous) substrings of S - there are N \\times (N + 1) / 2 of them - are divisible by P when regarded as integers written in base ten.\nHere substrings starting with a 0 also count, and substrings originated from different positions in S are distinguished, even if they are equal as strings or integers.\nCompute this count to help Takahashi.\n-----Constraints-----\n - 1 \\leq N \\leq 2 \\times 10^5\n - S consists of digits.\n - |S| = N\n - 2 \\leq P \\leq 10000\n - P is a prime number.\n-----Input-----\nInput is given from Standard Input in the following format:\nN P\nS\n-----Output-----\nPrint the number of non-empty (contiguous) substrings of S that are divisible by P when regarded as an integer written in base ten.\n-----Sample Input-----\n4 3\n3543\n-----Sample Output-----\n6\nHere S = 3543. There are ten non-empty (contiguous) substrings of S:\n - 3: divisible by 3.\n - 35: not divisible by 3.\n - 354: divisible by 3.\n - 3543: divisible by 3.\n - 5: not divisible by 3.\n - 54: divisible by 3.\n - 543: divisible by 3.\n - 4: not divisible by 3.\n - 43: not divisible by 3.\n - 3: divisible by 3.\nSix of these are divisible by 3, so print 6.\n\ndef",
        "answer": "def count_divisible(s, p):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if int(s[i:j+1]) % p == 0:\n                count += 1\n    return count",
        "difficulty": "interview"
    },
    {
        "task_id": 2517,
        "prompt": "Complete the Python function given the prompt below:There are N towns in the State of Atcoder, connected by M bidirectional roads.\nThe i-th road connects Town A_i and B_i and has a length of C_i.\nJoisino is visiting R towns in the state, r_1,r_2,..,r_R (not necessarily in this order).\nShe will fly to the first town she visits, and fly back from the last town she visits, but for the rest of the trip she will have to travel by road.\nIf she visits the towns in the order that minimizes the distance traveled by road, what will that distance be?\n-----Constraints-----\n - 2\u2264N\u2264200\n - 1\u2264M\u2264N\u00d7(N-1)/2\n - 2\u2264R\u2264min(8,N) (min(8,N) is the smaller of 8 and N.)\n - r_i\u2260r_j (i\u2260j)\n - 1\u2264A_i,B_i\u2264N, A_i\u2260B_i\n - (A_i,B_i)\u2260(A_j,B_j),(A_i,B_i)\u2260(B_j,A_j) (i\u2260j)\n - 1\u2264C_i\u2264100000\n - Every town can be reached from every town by road.\n - All input values are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN M R\nr_1... r_R\nA_1 B_1 C_1\n:\nA_M B_M C_M\n-----Output-----\nPrint the distance traveled by road if Joisino visits the towns in the order that minimizes it.\n-----Sample Input-----\n3 3 3\n1 2 3\n1 2 1\n2 3 1\n3 1 4\n-----Sample Output-----\n2\nFor example, if she visits the towns in the order of 1, 2, 3, the distance traveled will be 2, which is the minimum possible.\n\ndef",
        "answer": "def solve(n, m, r):\n    roads = []\n    for i in range(m):\n        roads.append(list(map(int, input().split())))\n    roads.sort(key=lambda x: x[2])\n    roads.sort(key=lambda x: x[0])\n    roads.sort(key=lambda x: x[1])\n    roads.sort(key=lambda x: x[0] + x[1])\n    roads.sort(key=lambda x: x[2])\n    roads.sort(key=lambda x: x[0] + x[1] + x[2])\n    print(roads)\n    print(roads[0][0] + roads[0][1] + roads[0][2])",
        "difficulty": "interview"
    },
    {
        "task_id": 2518,
        "prompt": "Complete the Python function given the prompt below:You are going out for a walk, when you suddenly encounter N monsters. Each monster has a parameter called health, and the health of the i-th monster is h_i at the moment of encounter. A monster will vanish immediately when its health drops to 0 or below.\nFortunately, you are a skilled magician, capable of causing explosions that damage monsters. In one explosion, you can damage monsters as follows:\n - Select an alive monster, and cause an explosion centered at that monster. The health of the monster at the center of the explosion will decrease by A, and the health of each of the other monsters will decrease by B. Here, A and B are predetermined parameters, and A > B holds.\nAt least how many explosions do you need to cause in order to vanish all the monsters?\n-----Constraints-----\n - All input values are integers.\n - 1 \u2264 N \u2264 10^5\n - 1 \u2264 B < A \u2264 10^9\n - 1 \u2264 h_i \u2264 10^9\n-----Input-----\nInput is given from Standard Input in the following format:\nN A B\nh_1\nh_2\n:\nh_N\n-----Output-----\nPrint the minimum number of explosions that needs to be caused in order to vanish all the monsters.\n-----Sample Input-----\n4 5 3\n8\n7\n4\n2\n-----Sample Output-----\n2\nYou can vanish all the monsters in two explosion, as follows:\n - First, cause an explosion centered at the monster with 8 health. The healths of the four monsters become 3, 4, 1 and -1, respectively, and the last monster vanishes.\n - Second, cause an explosion centered at the monster with 4 health remaining. The healths of the three remaining monsters become 0, -1 and -2, respectively, and all the monsters are now vanished.\n\ndef",
        "answer": "def solve(n, a, b):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2519,
        "prompt": "Complete the Python function given the prompt below:We have N dice arranged in a line from left to right. The i-th die from the left shows p_i numbers from 1 to p_i with equal probability when thrown.\nWe will choose K adjacent dice, throw each of them independently, and compute the sum of the numbers shown. Find the maximum possible value of the expected value of this sum.\n-----Constraints-----\n - 1 \u2264 K \u2264 N \u2264 200000\n - 1 \u2264 p_i \u2264 1000\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN K\np_1... p_N\n-----Output-----\nPrint the maximum possible value of the expected value of the sum of the numbers shown.\nYour output will be considered correct when its absolute or relative error from our answer is at most 10^{-6}.\n-----Sample Input-----\n5 3\n1 2 2 4 5\n-----Sample Output-----\n7.000000000000\nWhen we throw the third, fourth, and fifth dice from the left, the expected value of the sum of the numbers shown is 7. This is the maximum value we can achieve.\n\ndef",
        "answer": "def dice_game(n, k, p):\n    # Write your code here\n    return",
        "difficulty": "interview"
    },
    {
        "task_id": 2520,
        "prompt": "Complete the Python function given the prompt below:An SNS has N users - User 1, User 2, \\cdots, User N.\nBetween these N users, there are some relationships - M friendships and K blockships.\nFor each i = 1, 2, \\cdots, M, there is a bidirectional friendship between User A_i and User B_i.\nFor each i = 1, 2, \\cdots, K, there is a bidirectional blockship between User C_i and User D_i.\nWe define User a to be a friend candidate for User b when all of the following four conditions are satisfied:\n - a \\neq b.\n - There is not a friendship between User a and User b.\n - There is not a blockship between User a and User b.\n - There exists a sequence c_0, c_1, c_2, \\cdots, c_L consisting of integers between 1 and N (inclusive) such that c_0 = a, c_L = b, and there is a friendship between User c_i and c_{i+1} for each i = 0, 1, \\cdots, L - 1.\nFor each user i = 1, 2,... N, how many friend candidates does it have?\n-----Constraints-----\n - All values in input are integers.\n - 2 \u2264 N \u2264 10^5\n - 0 \\leq M \\leq 10^5\n - 0 \\leq K \\leq 10^5\n - 1 \\leq A_i, B_i \\leq N\n - A_i \\neq B_i\n - 1 \\leq C_i, D_i \\leq N\n - C_i \\neq D_i\n - (A_i, B_i) \\neq (A_j, B_j) (i \\neq j)\n - (A_i, B_i) \\neq (B_j, A_j)\n - (C_i, D_i) \\neq (C_j, D_j) (i \\neq j)\n - (C_i, D_i) \\neq (D_j, C_j)\n - (A_i, B_i) \\neq (C_j, D_j)\n - (A_i, B_i) \\neq (D_j, C_j)\n-----Input-----\nInput is given from Standard Input in the following format:\nN M K\nA_1 B_1\n\\vdots\nA_M B_M\nC_1 D_1\n\\vdots\nC_K D_K\n-----Output-----\nPrint the answers in order, with space in between.\n-----Sample Input-----\n4 4 1\n2 1\n1 3\n3 2\n3 4\n4 1\n-----Sample Output-----\n0 1 0 1\nThere is a friendship between User 2 and 3, and between 3 and 4. Also, there is no friendship or blockship between User 2 and 4. Thus, User 4 is a friend candidate for User 2.\nHowever, neither User 1 or 3 is a friend candidate for User 2, so User 2 has one friend candidate.\n\ndef",
        "answer": "def friend_candidates(n, m, k):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2521,
        "prompt": "Complete the Python function given the prompt below:Let N be a positive integer.\nThere is a numerical sequence of length 3N, a = (a_1, a_2,..., a_{3N}).\nSnuke is constructing a new sequence of length 2N, a', by removing exactly N elements from a without changing the order of the remaining elements.\nHere, the score of a' is defined as follows: (the sum of the elements in the first half of a') - (the sum of the elements in the second half of a').\nFind the maximum possible score of a'.\n-----Constraints-----\n - 1 \u2264 N \u2264 10^5\n - a_i is an integer.\n - 1 \u2264 a_i \u2264 10^9\n-----Partial Score-----\n - In the test set worth 300 points, N \u2264 1000.\n-----Input-----\nInput is given from Standard Input in the following format:\nN\na_1 a_2... a_{3N}\n-----Output-----\nPrint the maximum possible score of a'.\n-----Sample Input-----\n2\n3 1 4 1 5 9\n-----Sample Output-----\n1\nWhen a_2 and a_6 are removed, a' will be (3, 4, 1, 5), which has a score of (3 + 4) - (1 + 5) = 1.\n\ndef",
        "answer": "def score(a):\n    return sum(a[:len(a)//2]) - sum(a[len(a)//2:])",
        "difficulty": "interview"
    },
    {
        "task_id": 2522,
        "prompt": "Complete the Python function given the prompt below:Given are two sequences A and B, both of length N.\nA and B are each sorted in the ascending order.\nCheck if it is possible to reorder the terms of B so that for each i (1 \\leq i \\leq N) A_i \\neq B_i holds, and if it is possible, output any of the reorderings that achieve it.\n-----Constraints-----\n - 1\\leq N \\leq 2 \\times 10^5\n - 1\\leq A_i,B_i \\leq N\n - A and B are each sorted in the ascending order.\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nA_1 A_2 \\cdots A_N\nB_1 B_2 \\cdots B_N\n-----Output-----\nIf there exist no reorderings that satisfy the condition, print No.\nIf there exists a reordering that satisfies the condition, print Yes on the first line.\nAfter that, print a reordering of B on the second line, separating terms with a whitespace.\nIf there are multiple reorderings that satisfy the condition, you can print any of them.\n-----Sample Input-----\n6\n1 1 1 2 2 3\n1 1 1 2 2 3\n-----Sample Output-----\nYes\n2 2 3 1 1 1\n\n\ndef",
        "answer": "def reorder(a,b):\n    if a[0]!= b[0]:\n        return False\n    if a[1]!= b[1]:\n        return False\n    if a[2]!= b[2]:\n        return False\n    if a[3]!= b[3]:\n        return False\n    if a[4]!= b[4]:\n        return False\n    if a[5]!= b[5]:\n        return False\n    return True",
        "difficulty": "interview"
    },
    {
        "task_id": 2523,
        "prompt": "Complete the Python function given the prompt below:You are given a string S consisting of 0 and 1.\nFind the maximum integer K not greater than |S| such that we can turn all the characters of S into 0 by repeating the following operation some number of times.\n - Choose a contiguous segment [l,r] in S whose length is at least K (that is, r-l+1\\geq K must be satisfied). For each integer i such that l\\leq i\\leq r, do the following: if S_i is 0, replace it with 1; if S_i is 1, replace it with 0.\n-----Constraints-----\n - 1\\leq |S|\\leq 10^5\n - S_i(1\\leq i\\leq N) is either 0 or 1.\n-----Input-----\nInput is given from Standard Input in the following format:\nS\n-----Output-----\nPrint the maximum integer K such that we can turn all the characters of S into 0 by repeating the operation some number of times.\n-----Sample Input-----\n010\n-----Sample Output-----\n2\nWe can turn all the characters of S into 0 by the following operations:\n - Perform the operation on the segment S[1,3] with length 3. S is now 101.\n - Perform the operation on the segment S[1,2] with length 2. S is now 011.\n - Perform the operation on the segment S[2,3] with length 2. S is now 000.\n\ndef",
        "answer": "def max_repeating_substring(s):\n    max_len = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if s[i:j+1] == s[i:j+1][::-1]:\n                max_len = max(max_len, j-i+1)\n    return max_len",
        "difficulty": "interview"
    },
    {
        "task_id": 2524,
        "prompt": "Complete the Python function given the prompt below:We have N integers. The i-th integer is A_i.\nFind \\sum_{i=1}^{N-1}\\sum_{j=i+1}^{N} (A_i \\mbox{ XOR } A_j), modulo (10^9+7).What is \\mbox{ XOR }?\nThe XOR of integers A and B, A \\mbox{ XOR } B, is defined as follows:\n - When A \\mbox{ XOR } B is written in base two, the digit in the 2^k's place (k \\geq 0) is 1 if either A or B, but not both, has 1 in the 2^k's place, and 0 otherwise.\nFor example, 3 \\mbox{ XOR } 5 = 6. (In base two: 011 \\mbox{ XOR } 101 = 110.)\n-----Constraints-----\n - 2 \\leq N \\leq 3 \\times 10^5\n - 0 \\leq A_i < 2^{60}\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nA_1 A_2... A_N\n-----Output-----\nPrint the value \\sum_{i=1}^{N-1}\\sum_{j=i+1}^{N} (A_i \\mbox{ XOR } A_j), modulo (10^9+7).\n-----Sample Input-----\n3\n1 2 3\n-----Sample Output-----\n6\nWe have (1\\mbox{ XOR } 2)+(1\\mbox{ XOR } 3)+(2\\mbox{ XOR } 3)=3+2+1=6.\n\ndef",
        "answer": "def xor(a, b):\n    return (a ^ b)",
        "difficulty": "interview"
    },
    {
        "task_id": 2525,
        "prompt": "Complete the Python function given the prompt below:Takahashi has a string S consisting of lowercase English letters.\nStarting with this string, he will produce a new one in the procedure given as follows.\nThe procedure consists of Q operations. In Operation i (1 \\leq i \\leq Q), an integer T_i is provided, which means the following:\n - If T_i = 1: reverse the string S.\n - If T_i = 2: An integer F_i and a lowercase English letter C_i are additionally provided.\n - If F_i = 1 : Add C_i to the beginning of the string S.\n - If F_i = 2 : Add C_i to the end of the string S.\nHelp Takahashi by finding the final string that results from the procedure.\n-----Constraints-----\n - 1 \\leq |S| \\leq 10^5\n - S consists of lowercase English letters.\n - 1 \\leq Q \\leq 2 \\times 10^5\n - T_i = 1 or 2.\n - F_i = 1 or 2, if provided.\n - C_i is a lowercase English letter, if provided.\n-----Input-----\nInput is given from Standard Input in the following format:\nS\nQ\nQuery_1\n:\nQuery_Q\nIn the 3-rd through the (Q+2)-th lines, Query_i is one of the following:\n1\nwhich means T_i = 1, and:\n2 F_i C_i\nwhich means T_i = 2.\n-----Output-----\nPrint the resulting string.\n-----Sample Input-----\na\n4\n2 1 p\n1\n2 2 c\n1\n-----Sample Output-----\ncpa\nThere will be Q = 4 operations. Initially, S is a.\n - Operation 1: Add p at the beginning of S. S becomes pa.\n - Operation 2: Reverse S. S becomes ap.\n - Operation 3: Add c at the end of S. S becomes apc.\n - Operation 4: Reverse S. S becomes cpa.\nThus, the resulting string is cpa.\n\ndef",
        "answer": "def takahashi(s, q):\n    for i in range(q):\n        t, f, c = map(int, input().split())\n        if t == 1:\n            s = s[::-1]\n        elif t == 2:\n            s = c + s\n        if f == 1:\n            s = s + c\n        elif f == 2:\n            s = c + s\n    print(s)",
        "difficulty": "interview"
    },
    {
        "task_id": 2526,
        "prompt": "Complete the Python function given the prompt below:You are going to eat X red apples and Y green apples.\nYou have A red apples of deliciousness p_1,p_2, \\dots, p_A, B green apples of deliciousness q_1,q_2, \\dots, q_B, and C colorless apples of deliciousness r_1,r_2, \\dots, r_C.\nBefore eating a colorless apple, you can paint it red or green, and it will count as a red or green apple, respectively.\nFrom the apples above, you will choose the apples to eat while making the sum of the deliciousness of the eaten apples as large as possible.\nFind the maximum possible sum of the deliciousness of the eaten apples that can be achieved when optimally coloring zero or more colorless apples.\n-----Constraints-----\n - 1 \\leq X \\leq A \\leq 10^5\n - 1 \\leq Y \\leq B \\leq 10^5\n - 1 \\leq C \\leq 10^5\n - 1 \\leq p_i \\leq 10^9\n - 1 \\leq q_i \\leq 10^9\n - 1 \\leq r_i \\leq 10^9\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nX Y A B C\np_1 p_2... p_A\nq_1 q_2... q_B\nr_1 r_2... r_C\n-----Output-----\nPrint the maximum possible sum of the deliciousness of the eaten apples.\n-----Sample Input-----\n1 2 2 2 1\n2 4\n5 1\n3\n-----Sample Output-----\n12\nThe maximum possible sum of the deliciousness of the eaten apples can be achieved as follows:\n - Eat the 2-nd red apple.\n - Eat the 1-st green apple.\n - Paint the 1-st colorless apple green and eat it.\n\ndef",
        "answer": "def max_deliciousness(X, Y, A, B, C):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2527,
        "prompt": "Complete the Python function given the prompt below:Dilku and Bhopu live in Artland. Dilku loves Bhopu and he writes a message : \u201ciloveyou\u201d\non paper and wishes to send it to Bhopu. As Dilku is busy making an artwork, he asks his friend Raj to send the message to Bhopu. However Raj has a condition that he may add/remove some  characters and jumble the letters of the message.\nAs Bhopu understands Dilku, she can read \u201ciloveyou\u201d from the message if all the characters of the string \u201ciloveyou\u201d are in the message received by her. Bhopu is happy if she can read \u201ciloveyou\u201d from the message. Otherwise, she is sad. Tell whether Bhopu is happy or sad.\n-----Input-----\nInput contains a string S, where S is the message received by Bhopu. String S consists of only lowercase letters.\n-----Output-----\nOutput \u201chappy\u201d if Bhopu is happy and \u201csad\u201d if Bhopu is sad.\n-----Constraints-----\n1 \u2264 |S| \u2264 100\nWhere |S| denotes length of message string S\n-----Example-----\nInput 1:\niloveyou\nOutput 1:\nhappy\nInput 2:\nulrvysioqjifo\nOutput 2:\nsad\nInput 3:\nabcvleouioydef\nOutput 3:\nhappy\n\ndef",
        "answer": "def solve(s):\n    return 'happy' if 'iloveyou' in s else'sad'",
        "difficulty": "interview"
    },
    {
        "task_id": 2528,
        "prompt": "Complete the Python function given the prompt below:Chef loves research! Now he is looking for subarray of maximal length with non-zero product.\nChef has an array A with N elements: A1, A2,..., AN. \nSubarray Aij of array A is elements from index i to index j: Ai, Ai+1,..., Aj. \nProduct of subarray Aij is product of all its elements (from ith to jth). \n-----Input-----\n- First line contains sinlge integer N denoting the number of elements.\n- Second line contains N space-separated integers A1, A2,..., AN denoting the elements of array. \n-----Output-----\n- In a single line print single integer - the maximal length of subarray with non-zero product. \n-----Constraints-----\n- 1 \u2264 N \u2264 100000\n- 0 \u2264 Ai \u2264 10000\n-----Example-----\nInput:\n6\n1 0 2 3 0 4\nOutput:\n2\nInput:\n1\n0\nOutput:\n0\nInput:\n3\n1 0 1\nOutput:\n1\n-----Explanation-----\nFor the first sample subarray is: {2, 3}. \nFor the second sample there are no subbarays with non-zero product. \nFor the third sample subbarays is {1}, (the first element, or the third one).\n\ndef",
        "answer": "def maxLen(arr):\n    max_len = 0\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            continue\n        else:\n            curr_len = 1\n            for j in range(i+1, len(arr)):\n                if arr[j] == 0:\n                    break\n                else:\n                    curr_len += 1\n            max_len = max(max_len, curr_len)\n    return max_len",
        "difficulty": "interview"
    },
    {
        "task_id": 2529,
        "prompt": "Complete the Python function given the prompt below:Pooja would like to withdraw X $US from an ATM. The cash machine will only accept the transaction if X is a multiple of 5, and Pooja's account balance has enough cash to perform the withdrawal transaction (including bank charges).  For each successful withdrawal the bank charges 0.50 $US.\nCalculate Pooja's account balance after an attempted transaction.  \n-----Input-----\nPositive integer 0 < X <= 2000 - the amount of cash which Pooja wishes to withdraw.\nNonnegative number 0<= Y <= 2000 with two digits of precision - Pooja's initial account balance.\n-----Output-----\nOutput the account balance after the attempted transaction, given as a number with two digits of precision.  If there is not enough money in the account to complete the transaction, output the current bank balance.\n-----Example - Successful Transaction-----\nInput:\n30 120.00\nOutput:\n89.50\n-----Example - Incorrect Withdrawal Amount (not multiple of 5)-----\nInput:\n42 120.00\nOutput:\n120.00\n-----Example - Insufficient Funds-----\nInput:\n300 120.00\nOutput:\n120.00\n\ndef",
        "answer": "def atm_withdrawal(x,y):\n    if x%5==0 and x<=y:\n        return y-x-0.5\n    else:\n        return y",
        "difficulty": "interview"
    },
    {
        "task_id": 2530,
        "prompt": "Complete the Python function given the prompt below:Chefs from all over the globe gather each year for an international convention. Each chef represents some country. Please, note that more than one chef can represent a country.\nEach of them presents their best dish to the audience. The audience then sends emails to a secret and secure mail server, with the subject being the name of the chef whom they wish to elect as the \"Chef of the Year\".\nYou will be given the list of the subjects of all the emails. Find the country whose chefs got the most number of votes, and also the chef who got elected as the \"Chef of the Year\" (the chef who got the most number of votes).\nNote 1\nIf several countries got the maximal number of votes, consider the country with the lexicographically smaller name among them to be a winner. Similarly if several chefs got the maximal number of votes, consider the chef with the lexicographically smaller name among them to be a winner.\nNote 2\nThe string A = a1a2...an is called lexicographically smaller then the string B = b1b2...bm in the following two cases:\n- there exists index i \u2264 min{n, m} such that aj = bj for 1 \u2264 j < i and ai < bi;\n- A is a proper prefix of B, that is, n < m and aj = bj for 1 \u2264 j \u2264 n.\nThe characters in strings are compared by their ASCII codes.\nRefer to function strcmp in C or to standard comparator < for string data structure in C++ for details.\n-----Input-----\nThe first line of the input contains two space-separated integers N and M denoting the number of chefs and the number of emails respectively. Each of the following N lines contains two space-separated strings, denoting the name of the chef and his country respectively. Each of the following M lines contains one string denoting the subject of the email.\n-----Output-----\nOutput should consist of two lines. The first line should contain the name of the country whose chefs got the most number of votes. The second line should contain the name of the chef who is elected as the \"Chef of the Year\".\n-----Constraints-----\n- 1 \u2264 N \u2264 10000 (104)\n- 1 \u2264 M \u2264 100000 (105)\n- Each string in the input contains only letters of English alphabets (uppercase or lowercase)\n- Each string in the input has length not exceeding 10\n- All chef names will be distinct\n- Subject of each email will coincide with the name of one of the chefs\n-----Example 1-----\nInput:\n1 3\nLeibniz Germany\nLeibniz\nLeibniz\nLeibniz\nOutput:\nGermany\nLeibniz\n-----Example 2-----\nInput:\n4 5\nRamanujan India\nTorricelli Italy\nGauss Germany\nLagrange Italy\nRamanujan\nTorricelli\nTorricelli\nRamanujan\nLagrange\nOutput:\nItaly\nRamanujan\n-----Example 3-----\nInput:\n2 2\nNewton England\nEuclid Greece\nNewton\nEuclid\nOutput:\nEngland\nEuclid\n-----Explanation-----\nExample 1. Here we have only one chef Leibniz and he is from Germany. Clearly, all votes are for him. So Germany is the country-winner and Leibniz is the \"Chef of the Year\".\nExample 2. Here we have chefs Torricelli and Lagrange from Italy, chef Ramanujan from India and chef Gauss from Germany. Torricelli got 2 votes, while Lagrange got one vote. Hence the Italy got 3 votes in all. Ramanujan got also 2 votes. And so India got 2 votes in all. Finally Gauss got no votes leaving Germany without votes. So the country-winner is Italy without any ties. But we have two chefs with 2 votes: Torricelli and Ramanujan. But since the string \"Ramanujan\" is lexicographically smaller than \"Torricelli\", then Ramanujan is the \"Chef of the Year\".\nExample 3. Here we have two countries with 1 vote: England and Greece. Since the string \"England\" is lexicographically smaller than \"Greece\", then England is the country-winner. Next, we have two chefs with 1 vote: Newton and Euclid. Since the string \"Euclid\" is lexicographically smaller than \"Newton\", then Euclid is the \"Chef of the Year\".\n\ndef",
        "answer": "def chef_of_the_year(n, m, subjects):\n    chefs = {}\n    for i in range(n):\n        chefs[subjects[i]] = 0\n    for i in range(m):\n        chefs[subjects[i]] += 1\n    max_votes = max(chefs.values())\n    country_winner = \"\"\n    for key, value in chefs.items():\n        if value == max_votes:\n            country_winner = key\n    chefs = {}\n    for i in range(n):\n        chefs[subjects[i]] = 0\n    for i in range(m):\n        chefs[subjects[i]] += 1\n    max_votes = max(chefs.values())\n    chef_winner = \"\"\n    for key, value in chefs.items():\n        if value == max_votes:\n            chef_winner = key\n    return country_winner, chef_winner",
        "difficulty": "interview"
    },
    {
        "task_id": 2531,
        "prompt": "Complete the Python function given the prompt below:You are given a sequence of integers $a_1, a_2,..., a_N$. An element ak is said to be an average element if there are indices $i, j$ (with $i \\neq  j$) such that $a_k = \\frac{a_i + a_j}{2}$.\nIn the sequence\n371022171537102217153 \\quad 7 \\quad 10 \\quad 22 \\quad 17 \\quad 15\nfor $i=1, j=5$ and $k=3$, we get $a_k = \\frac{a_i + a_j}{2}$. Thus $a_3 = 10$ is an average element in this sequence. You can check that $a_3$ is the only average element in this sequence.\nConsider the sequence\n371031837103183 \\quad 7 \\quad 10 \\quad 3 \\quad 18\nWith $i=1, j=4$ and $k=1$ we get $a_k = \\frac{a_i + a_j}{2}$. Thus $a_1=3$ is an average element. We could also choose $i=1, j=4$ and $k=4$ and get $a_k = \\frac{a_i + a_j}{2}$. You can check that $a_1$ and $a_4$ are the only average elements of this sequence.\nOn the other hand, the sequence\n38111730381117303 \\quad 8 \\quad 11 \\quad 17 \\quad 30\nhas no average elements.\nYour task is to count the number of average elements in the given sequence.\n-----Input:-----\nThe first line contains a single integer $N$ indicating the number of elements in the sequence. This is followed by $N$ lines containing one integer each (Line $i+1$ contains $a_i$). (You may assume that $a_i + a_j$ would not exceed MAXINT for any $i$ and $j$).\n-----Output:-----\nThe output must consist of a single line containing a single integer $k$ indicating the number of average elements in the given sequence.\n-----Constraints:-----\n- You may assume that $1 \\leq N \\leq 10000$.\n- In $30 \\%$ of the inputs $1 \\leq N \\leq 200$.\n- In $60 \\%$ of the inputs $1 \\leq N \\leq 5000$.\n-----Sample Input 1:-----\n6\n3\n7\n10\n17\n22\n15\n-----Sample Output 1:-----\n1\n-----Sample Input 2:-----\n5\n3\n7\n10\n3\n18\n-----Sample Output 2:-----\n2\n-----Sample Input 3;-----\n5\n3\n8\n11\n17\n30\n-----Sample Output 3:-----\n0\n\ndef",
        "answer": "def solve(a):\n    return sum(a) / len(a)",
        "difficulty": "interview"
    },
    {
        "task_id": 2532,
        "prompt": "Complete the Python function given the prompt below:Ram has invented a magic sequence. Each element of the sequence is defined by the same recursive definition - take some linear combination of previous elements (whose coefficients are fixed) and add to them the n-th powers of some integers. Formally: Xn = Xn-1*a1 +... + Xn-i*ai + b1*d1^n +... + bj*dj^n, for some integer constants p,q,a1,...,ap,b1,..., bq,d1,..., dq. Of course, as the values can quickly grow, he computed them modulo a fixed value: 10^6. He wrote many consecutive values of the sequence, but then he lost most of his work. All he has now, is 10 consecutive values taken from somewhere in the sequence (he doesn't know at what n they begin), and the recursive rule. And he would like to recover the sequence, or at the very least, to be able to write the next 10 values taken from the sequence.\n-----Input-----\nFirst, two integers, 0<=p<=4, 0<=q<=4. Then come the descriptions of the coefficients, -100 <= a1,...,ap,b1,..., bq,d1,..., dq <= 100. Then, the following 10 integers are Xn,X(n+1),...,X(n+9) for some unknown n.\n-----Output-----\n10 integers - X(n+10),X(n+11),...,X(n+19)\n-----Example-----\nInput:\n1 1\n1\n1\n1\n11 12 13 14 15 16 17 18 19 20\nOutput:\n21 22 23 24 25 26 27 28 29 30\nInput:\n1 1\n1\n1\n2\n1 3 7 15 31 63 127 255 511 1023\nOutput:\n2047 4095 8191 16383 32767 65535 131071 262143 524287 48575\nInput:\n2 0\n1 1\n1 1 2 3 5 8 13 21 34 55\nOutput:\n89 144 233 377 610 987 1597 2584 4181 6765\n\ndef",
        "answer": "def magic_sequence(p,q,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,b1,b2,b3,b4,b5,b6,b7,b8,b9,b10):\n    if p == 0:\n        return a1,b1\n    if q == 0:\n        return a2,b2\n    if p == 1:\n        return a3,b3\n    if q == 1:\n        return a4,b4\n    if p == 2:\n        return a5,b5\n    if q == 2:\n        return a6,b6\n    if p == 3:\n        return a7,b7\n    if q == 3:\n        return a8,b8\n    if p == 4:\n        return a9,b9\n    if q == 4:\n        return a10,b10\n    return magic_sequence(p-1,q,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,b1,b2,b3,b4,b5,b6,b7,b8,b9,b10)",
        "difficulty": "interview"
    },
    {
        "task_id": 2533,
        "prompt": "Complete the Python function given the prompt below:The grand kingdom of Mancunia is famous for its tourist attractions and visitors flock to it throughout the year. King Mancunian is the benevolent ruler of the prosperous country whose main source of revenue is, of course, tourism.\nThe country can be represented by a network of unidirectional roads between the cities. But Mancunian, our benign monarch, has a headache. The road network of the country is not tourist-friendly and this is affecting revenue. To increase the GDP of the nation, he wants to redirect some of the roads to make the road network tourist-friendly and hence, ensure happiness and prosperity for his loyal subjects.\nNow is the time for some formal definitions. :(\nA road network is said to be tourist-friendly if for every city in the country, if a tourist starts his journey there, there is a path she can take to visit each and every city of the nation and traverse each road exactly once before ending up at the city where she started.\nGiven a description of the road network of Mancunia, can you come up with a scheme to redirect some (possibly none) of the roads to make it tourist-friendly?\n-----Input-----\nThe first line contains two integers N and E denoting the number of cities and roads in the beautiful country of Mancunia respectively.\nEach of the next E lines contains two integers a and b implying that there is a unidirectional road from city a to city b.\nIt is guaranteed that there aren't multiple roads in the exact same direction and that there is no road from a city to itself.\n-----Output-----\nIf there is no solution, print \"NO\" (without quotes). Else, print \"YES\" (without quotes), followed by exactly E lines.\nThe ith line of output should represent the ith road in the input. It should have two integers a and b denoting that the final orientation of that road is from a to b.\n-----Constraints-----\n- 1 \u2264 N \u2264 100000\n- 1 \u2264 E \u2264 200000\n- 1 \u2264 a, b \u2264 N\nSubtask 1: (20 points)\n- 1 \u2264 N \u2264 20\n- 1 \u2264 E \u2264 21\nSubtask 2: (80 points)\n- Same as original constraints\n-----Example 1-----\nInput:\n3 3\n1 2\n2 3\n3 1\nOutput:\nYES\n1 2\n2 3\n3 1\n-----Example 2-----\nInput:\n3 2\n1 2\n2 3\nOutput:\nNO\n-----Example 3-----\nInput:\n5 6\n1 2\n2 3\n3 4\n2 4\n2 5\n1 5\nOutput:\nYES\n1 2\n2 3\n3 4\n4 2\n2 5\n5 1\n\ndef",
        "answer": "def solve(N, E, roads):\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2534,
        "prompt": "Complete the Python function given the prompt below:Our Chef is very happy that his son was selected for training in one of the finest culinary schools of the world.\nSo he and his wife decide to buy a gift for the kid as a token of appreciation.\nUnfortunately, the Chef hasn't been doing good business lately, and is in no mood on splurging money.\nOn the other hand, the boy's mother wants to buy something big and expensive.\nTo settle the matter like reasonable parents, they play a game.\nThey spend the whole day thinking of various gifts and write them down in a huge matrix.\nEach cell of the matrix contains the gift's cost.\nThen they decide that the mother will choose a row number r while the father will choose a column number c,\nthe item from the corresponding cell will be gifted to the kid in a couple of days. \nThe boy observes all of this secretly.\nHe is smart enough to understand that his parents will ultimately choose a gift whose cost is smallest in its row,\nbut largest in its column.\nIf no such gift exists, then our little chef has no option but to keep guessing.\nAs the matrix is huge, he turns to you for help.\nHe knows that sometimes the gift is not determined uniquely even if a gift exists whose cost is smallest in its row,\nbut largest in its column.\nHowever, since the boy is so smart, he realizes that the gift's cost is determined uniquely.\nYour task is to tell him the gift's cost which is smallest in its row,\nbut largest in its column, or to tell him no such gift exists.\n-----Input-----\nFirst line contains two integers R and C, the number of rows and columns in the matrix respectively. Then follow R lines, each containing C space separated integers - the costs of different gifts.\n-----Output-----\nPrint a single integer - a value in the matrix that is smallest in its row but highest in its column. If no such value exists, then print \"GUESS\" (without quotes of course) \n-----Constraints-----\n1 <= R, C <= 100 \nAll gift costs are positive and less than 100000000 (10^8) \n-----Example 1-----\nInput:\n2 3\n9 8 8\n2 6 11\nOutput:\n8\n-----Example 2-----\nInput:\n3 3\n9 8 11\n2 6 34\n5 9 11\nOutput:\nGUESS\n-----Example 3-----\nInput:\n2 2\n10 10\n10 10\nOutput:\n10\n-----Explanation of Sample Cases-----\nExample 1: The first row contains 9, 8, 8. Observe that both 8 are the minimum. Considering the first 8, look at the corresponding column (containing 8 and 6). Here, 8 is the largest element in that column. So it will be chosen.\nExample 2: There is no value in the matrix that is smallest in its row but largest in its column.\nExample 3: The required gift in matrix is not determined uniquely, but the required cost is determined uniquely.\n\ndef",
        "answer": "def gift():\n    R, C = map(int, input().split())\n    matrix = []\n    for _ in range(R):\n        matrix.append(list(map(int, input().split())))\n    min_cost = min(matrix[0])\n    max_cost = max(matrix[0])\n    for i in range(1, R):\n        for j in range(C):\n            if matrix[i][j] < min_cost:\n                min_cost = matrix[i][j]\n            if matrix[i][j] > max_cost:\n                max_cost = matrix[i][j]\n    if min_cost == max_cost:\n        print(\"GUESS\")\n    else:\n        print(min_cost)\ngift()\n",
        "difficulty": "interview"
    },
    {
        "task_id": 2535,
        "prompt": "Complete the Python function given the prompt below:A daily train consists of N cars. Let's consider one particular car. It has 54 places numbered consecutively from 1 to 54, some of which are already booked and some are still free. The places are numbered in the following fashion:\nThe car is separated into 9 compartments of 6 places each, as shown in the picture. So, the 1st compartment consists of places 1, 2, 3, 4, 53 and 54, the 2nd compartment consists of places 5, 6, 7, 8, 51 and 52, and so on.\nA group of X friends wants to buy tickets for free places, all of which are in one compartment (it's much funnier to travel together). You are given the information about free and booked places in each of the N cars. Find the number of ways to sell the friends exactly X tickets in one compartment (note that the order in which the tickets are sold doesn't matter).\n-----Input-----\nThe first line of the input contains two integers X and N (1 \u2264 X \u2264 6, 1 \u2264 N \u2264 10) separated by a single space. Each of the following N lines contains the information about one car which is a string of length 54 consisting of '0' and '1'. The i-th character (numbered from 1) is '0' if place i in the corresponding car is free, and is '1' if place i is already booked.\n-----Output-----\nOutput just one integer -- the requested number of ways.\n-----Example-----\nInput:\n1 3\n100101110000001011000001111110010011110010010111000101\n001010000000101111100000000000000111101010101111111010\n011110011110000001010100101110001011111010001001111010\nOutput:\n85\nInput:\n6 3\n100101110000001011000001111110010011110010010111000101\n001010000000101111100000000000000111101010101111111010\n011110011110000001010100101110001011111010001001111010\nOutput:\n1\nInput:\n3 2\n000000000000000000000000000000000000000000000000000000\n000000000000000000000000000000000000000000000000000000\nOutput:\n360\nExplanation:\nIn the first test case, any of the free places can be sold. In the second test case, the only free compartment in the train is compartment 3 in the first car (places 9, 10, 11, 12, 49 and 50 are all free). In the third test case, the train is still absolutely free; as there are 20 ways to sell 3 tickets in an empty compartment, the answer is 2 * 9 * 20 = 360.\n\ndef",
        "answer": "def solve(n, m, a):\n    if m == 0:\n        return 1\n    if n == 0:\n        return 0\n    if a[n-1] == 0:\n        return solve(n-1, m, a)\n    if a[n-1] == 1:\n        return solve(n-1, m, a) + solve(n-1, m-1, a)",
        "difficulty": "interview"
    },
    {
        "task_id": 2536,
        "prompt": "Complete the Python function given the prompt below:Mike is given a matrix A, N and M are numbers of rows and columns respectively. A1, 1 is the number in the top left corner. All the numbers in A are non-negative integers. He also has L pairs of integers (ik, jk). His task is to calculate Ai1, j1 + Ai2, j2 +... + AiL, jL.\nUnfortunately, Mike forgot if Ai, j was a number in the i'th row and j'th column or vice versa, if Ai, j was a number in the j'th row and i'th column.\nSo, Mike decided to calculate both E1 = Ai1, j1 + Ai2, j2 +... + AiL, jL and E2 = Aj1, i1 + Aj2, i2 +... + AjL, iL. If it is impossible to calculate E1(i.e. one of the summands doesn't exist), then let's assume, that it is equal to -1. If it is impossible to calculate E2, then let's also assume, that it is equal to -1.\nYour task is to calculate max(E1, E2).\n-----Input-----\nThe first line contains two integers N and M, denoting the number of rows and the number of columns respectively.\nEach of next N lines contains M integers. The j'th integer in the (i + 1)'th line of the input denotes Ai, j.\nThe (N + 2)'th line contains an integer L, denoting the number of pairs of integers, that Mike has.\nEach of next L lines contains a pair of integers. The (N + 2 + k)-th line in the input contains a pair (ik, jk).\n-----Output-----\nThe first line should contain an integer, denoting max(E1, E2).\n-----Examples-----\nInput:\n3 2\n1 2\n4 5\n7 0\n2\n1 2\n2 2\nOutput:\n9\nInput:\n1 3\n1 2 3\n2\n1 3\n3 1\nOutput:\n-1\nInput:\n1 3\n1 2 3\n2\n1 1\n3 1\nOutput:\n4\n-----Explanation-----\nIn the first test case N equals to 3, M equals to 2, L equals to 2. E1 = 2 + 5 = 7, E2 = 4 + 5 = 9. The answer is max(E1, E2) = max(7, 9) = 9;\nIn the second test case N equals to 1, M equals to 3, L equals to 2. It is impossible to calculate E1 and E2, because A3, 1 doesn't exist. So the answer is max(E1, E2) = max(-1, -1) = -1;\nIn the third test case N equals to 1, M equals to 3, L equals to 2. It is impossible to calculate E1, because A3, 1 doesn't exist. So E1 is equal to -1. E2 = 1 + 3 = 4. The answer is max(E1, E2) = max(-1,4) = 4.\n-----Scoring-----\n1 \u2264 ik, jk \u2264 500 for each test case.\nSubtask 1 (10 points): 1 \u2264 N, M, L \u2264 5, 0 \u2264 Ai, j \u2264 10;\nSubtask 2 (12 points): 1 \u2264 N, M, L \u2264 300, 0 \u2264 Ai, j \u2264 106, all the numbers in A are equal;\nSubtask 3 (20 points): 1 \u2264 N, M, L \u2264 300, 0 \u2264 Ai, j \u2264 109;\nSubtask 4 (26 points): 1 \u2264 N, M, L \u2264 500, 0 \u2264 Ai, j \u2264 109;\nSubtask 5 (32 points): 1 \u2264 N, M \u2264 500, 1 \u2264 L \u2264 250 000, 0 \u2264 Ai, j \u2264 109.\n\ndef",
        "answer": "def max_sum(A, N, M, L):\n    E1 = 0\n    E2 = 0\n    for i in range(N):\n        for j in range(M):\n            if A[i][j] == 1:\n                E1 += i + 1\n                E2 += j + 1\n    for k in range(L):\n        i, j = map(int, input().split())\n        if A[i - 1][j - 1] == 1:\n            E1 += i\n            E2 += j\n        else:\n            E1 += -1\n            E2 += -1\n    return max(E1, E2)",
        "difficulty": "interview"
    },
    {
        "task_id": 2537,
        "prompt": "Complete the Python function given the prompt below:You are given three strings $s$, $t$ and $p$ consisting of lowercase Latin letters. You may perform any number (possibly, zero) operations on these strings.\nDuring each operation you choose any character from $p$, erase it from $p$ and insert it into string $s$ (you may insert this character anywhere you want: in the beginning of $s$, in the end or between any two consecutive characters). \nFor example, if $p$ is aba, and $s$ is de, then the following outcomes are possible (the character we erase from $p$ and insert into $s$ is highlighted):\n  aba $\\rightarrow$ ba, de $\\rightarrow$ ade;  aba $\\rightarrow$ ba, de $\\rightarrow$ dae;  aba $\\rightarrow$ ba, de $\\rightarrow$ dea;  aba $\\rightarrow$ aa, de $\\rightarrow$ bde;  aba $\\rightarrow$ aa, de $\\rightarrow$ dbe;  aba $\\rightarrow$ aa, de $\\rightarrow$ deb;  aba $\\rightarrow$ ab, de $\\rightarrow$ ade;  aba $\\rightarrow$ ab, de $\\rightarrow$ dae;  aba $\\rightarrow$ ab, de $\\rightarrow$ dea; \nYour goal is to perform several (maybe zero) operations so that $s$ becomes equal to $t$. Please determine whether it is possible.\nNote that you have to answer $q$ independent queries.\n-----Input-----\nThe first line contains one integer $q$ ($1 \\le q \\le 100$) \u2014 the number of queries. Each query is represented by three consecutive lines.\nThe first line of each query contains the string $s$ ($1 \\le |s| \\le 100$) consisting of lowercase Latin letters.\nThe second line of each query contains the string $t$ ($1 \\le |t| \\le 100$) consisting of lowercase Latin letters.\nThe third line of each query contains the string $p$ ($1 \\le |p| \\le 100$) consisting of lowercase Latin letters.\n-----Output-----\nFor each query print YES if it is possible to make $s$ equal to $t$, and NO otherwise.\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes and YES will all be recognized as positive answer).\n-----Example-----\nInput\n4\nab\nacxb\ncax\na\naaaa\naaabbcc\na\naaaa\naabbcc\nab\nbaaa\naaaaa\nOutput\nYES\nYES\nNO\nNO\n-----Note-----\nIn the first test case there is the following sequence of operation:   $s = $ ab, $t = $ acxb, $p = $ cax;  $s = $ acb, $t = $ acxb, $p = $ ax;  $s = $ acxb, $t = $ acxb, $p = $ a. \nIn the second test case there is the following sequence of operation:   $s = $ a, $t = $ aaaa, $p = $ aaabbcc;  $s = $ aa, $t = $ aaaa, $p = $ aabbcc;  $s = $ aaa, $t = $ aaaa, $p = $ abbcc;  $s = $ aaaa, $t = $ aaaa, $p = $ bbcc.\n\ndef",
        "answer": "def solve(s, t, p):\n    if s == t:\n        return 'YES'\n    if s == '':\n        return 'NO'\n    if s == t[::-1]:\n        return 'YES'\n    if s[::-1] == t:\n        return 'YES'\n    if s[::-1] == t[::-1]:\n        return 'YES'\n    if s[::-1] == t[::-1][::-1]:\n        return 'YES'\n    if s[::-1] == t[::-1][::-1][::-1]:\n        return 'YES'\n    if s[::-1] == t[::-1][::-1][::-1][::-1]:\n        return 'YES'\n    if s[::-1] == t[::-1][::-1][::-1][::-1][::-1]:\n        return 'YES'\n    if s[::-1] == t[::-1][::-1][::-1][::-1][::-1][::-1]:\n        return 'YES'\n    if s[::-1] == t[::-1][::-1][::-1][::-1][::-1][::-1][::-1]:\n        return 'YES'\n    if s[::-1] == t[::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1]:\n        return 'YES'\n    if s[::-1] == t[::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1]:\n        return 'YES'\n    if s[::-1] == t[::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1]:\n        return 'YES'\n    if s[::-1] == t[::-1][::-1][::-1][::-1][::-1",
        "difficulty": "interview"
    },
    {
        "task_id": 2538,
        "prompt": "Complete the Python function given the prompt below:You play your favourite game yet another time. You chose the character you didn't play before. It has $str$ points of strength and $int$ points of intelligence. Also, at start, the character has $exp$ free experience points you can invest either in strength or in intelligence (by investing one point you can either raise strength by $1$ or raise intelligence by $1$).\nSince you'd like to make some fun you want to create a jock character, so it has more strength than intelligence points (resulting strength is strictly greater than the resulting intelligence).\nCalculate the number of different character builds you can create (for the purpose of replayability) if you must invest all free points. Two character builds are different if their strength and/or intellect are different.\n-----Input-----\nThe first line contains the single integer $T$ ($1 \\le T \\le 100$) \u2014 the number of queries. Next $T$ lines contain descriptions of queries \u2014 one per line.\nThis line contains three integers $str$, $int$ and $exp$ ($1 \\le str, int \\le 10^8$, $0 \\le exp \\le 10^8$) \u2014 the initial strength and intelligence of the character and the number of free points, respectively.\n-----Output-----\nPrint $T$ integers \u2014 one per query. For each query print the number of different character builds you can create.\n-----Example-----\nInput\n4\n5 3 4\n2 1 0\n3 5 5\n4 10 6\nOutput\n3\n1\n2\n0\n-----Note-----\nIn the first query there are only three appropriate character builds: $(str = 7, int = 5)$, $(8, 4)$ and $(9, 3)$. All other builds are either too smart or don't use all free points.\nIn the second query there is only one possible build: $(2, 1)$.\nIn the third query there are two appropriate builds: $(7, 6)$, $(8, 5)$.\nIn the fourth query all builds have too much brains.\n\ndef",
        "answer": "def solve(str, int, exp):\n    return 0",
        "difficulty": "interview"
    },
    {
        "task_id": 2539,
        "prompt": "Complete the Python function given the prompt below:Let's denote as L(x, p) an infinite sequence of integers y such that gcd(p, y) = 1 and y > x (where gcd is the greatest common divisor of two integer numbers), sorted in ascending order. The elements of L(x, p) are 1-indexed; for example, 9, 13 and 15 are the first, the second and the third elements of L(7, 22), respectively.\nYou have to process t queries. Each query is denoted by three integers x, p and k, and the answer to this query is k-th element of L(x, p).\n-----Input-----\nThe first line contains one integer t (1 \u2264 t \u2264 30000) \u2014 the number of queries to process.\nThen t lines follow. i-th line contains three integers x, p and k for i-th query (1 \u2264 x, p, k \u2264 10^6).\n-----Output-----\nPrint t integers, where i-th integer is the answer to i-th query.\n-----Examples-----\nInput\n3\n7 22 1\n7 22 2\n7 22 3\nOutput\n9\n13\n15\nInput\n5\n42 42 42\n43 43 43\n44 44 44\n45 45 45\n46 46 46\nOutput\n187\n87\n139\n128\n141\n\ndef",
        "answer": "def L(x, p):\n    return [y for y in range(x, p) if gcd(p, y) == 1]",
        "difficulty": "interview"
    },
    {
        "task_id": 2540,
        "prompt": "Complete the Python function given the prompt below:You are given a rooted tree with root in vertex 1. Each vertex is coloured in some colour.\nLet's call colour c dominating in the subtree of vertex v if there are no other colours that appear in the subtree of vertex v more times than colour c. So it's possible that two or more colours will be dominating in the subtree of some vertex.\nThe subtree of vertex v is the vertex v and all other vertices that contains vertex v in each path to the root.\nFor each vertex v find the sum of all dominating colours in the subtree of vertex v.\n-----Input-----\nThe first line contains integer n (1 \u2264 n \u2264 10^5) \u2014 the number of vertices in the tree.\nThe second line contains n integers c_{i} (1 \u2264 c_{i} \u2264 n), c_{i} \u2014 the colour of the i-th vertex.\nEach of the next n - 1 lines contains two integers x_{j}, y_{j} (1 \u2264 x_{j}, y_{j} \u2264 n) \u2014 the edge of the tree. The first vertex is the root of the tree.\n-----Output-----\nPrint n integers \u2014 the sums of dominating colours for each vertex.\n-----Examples-----\nInput\n4\n1 2 3 4\n1 2\n2 3\n2 4\nOutput\n10 9 3 4\nInput\n15\n1 2 3 1 2 3 3 1 1 3 2 2 1 2 3\n1 2\n1 3\n1 4\n1 14\n1 15\n2 5\n2 6\n2 7\n3 8\n3 9\n3 10\n4 11\n4 12\n4 13\nOutput\n6 5 4 3 2 3 3 1 1 3 2 2 1 2 3\n\ndef",
        "answer": "def dominatingColours(n, c):\n    # Write your code here\n    colours = {}\n    for i in range(n):\n        colours[c[i]] = colours.get(c[i], 0) + 1",
        "difficulty": "interview"
    },
    {
        "task_id": 2541,
        "prompt": "Complete the Python function given the prompt below:You're given Q queries of the form (L, R). \nFor each query you have to find the number of such x that L \u2264 x \u2264 R and there exist integer numbers a > 0, p > 1 such that x = a^{p}.\n-----Input-----\nThe first line contains the number of queries Q (1 \u2264 Q \u2264 10^5).\nThe next Q lines contains two integers L, R each (1 \u2264 L \u2264 R \u2264 10^18).\n-----Output-----\nOutput Q lines \u2014 the answers to the queries.\n-----Example-----\nInput\n6\n1 4\n9 9\n5 7\n12 29\n137 591\n1 1000000\nOutput\n2\n1\n0\n3\n17\n1111\n-----Note-----\nIn query one the suitable numbers are 1 and 4.\n\ndef",
        "answer": "def solve(L, R):\n    return 0",
        "difficulty": "interview"
    },
    {
        "task_id": 2542,
        "prompt": "Complete the Python function given the prompt below:Let's call left cyclic shift of some string $t_1 t_2 t_3 \\dots t_{n - 1} t_n$ as string $t_2 t_3 \\dots t_{n - 1} t_n t_1$.\nAnalogically, let's call right cyclic shift of string $t$ as string $t_n t_1 t_2 t_3 \\dots t_{n - 1}$.\nLet's say string $t$ is good if its left cyclic shift is equal to its right cyclic shift.\nYou are given string $s$ which consists of digits 0\u20139.\nWhat is the minimum number of characters you need to erase from $s$ to make it good?\n-----Input-----\nThe first line contains single integer $t$ ($1 \\le t \\le 1000$)\u00a0\u2014 the number of test cases.\nNext $t$ lines contains test cases\u00a0\u2014 one per line. The first and only line of each test case contains string $s$ ($2 \\le |s| \\le 2 \\cdot 10^5$). Each character $s_i$ is digit 0\u20139.\nIt's guaranteed that the total length of strings doesn't exceed $2 \\cdot 10^5$.\n-----Output-----\nFor each test case, print the minimum number of characters you need to erase from $s$ to make it good.\n-----Example-----\nInput\n3\n95831\n100120013\n252525252525\nOutput\n3\n5\n0\n-----Note-----\nIn the first test case, you can erase any $3$ characters, for example, the $1$-st, the $3$-rd, and the $4$-th. You'll get string 51 and it is good.\nIn the second test case, we can erase all characters except 0: the remaining string is 0000 and it's good.\nIn the third test case, the given string $s$ is already good.\n\ndef",
        "answer": "def solution(s):\n    return s.count('0')",
        "difficulty": "interview"
    },
    {
        "task_id": 2543,
        "prompt": "Complete the Python function given the prompt below:Dr. Evil is interested in math and functions, so he gave Mahmoud and Ehab array a of length n and array b of length m. He introduced a function f(j) which is defined for integers j, which satisfy 0 \u2264 j \u2264 m - n. Suppose, c_{i} = a_{i} - b_{i} + j. Then f(j) = |c_1 - c_2 + c_3 - c_4... c_{n}|. More formally, $f(j) =|\\sum_{i = 1}^{n}(- 1)^{i - 1} *(a_{i} - b_{i + j})|$. \nDr. Evil wants Mahmoud and Ehab to calculate the minimum value of this function over all valid j. They found it a bit easy, so Dr. Evil made their task harder. He will give them q update queries. During each update they should add an integer x_{i} to all elements in a in range [l_{i};r_{i}] i.e. they should add x_{i} to a_{l}_{i}, a_{l}_{i} + 1,..., a_{r}_{i} and then they should calculate the minimum value of f(j) for all valid j.\nPlease help Mahmoud and Ehab.\n-----Input-----\nThe first line contains three integers n, m and q (1 \u2264 n \u2264 m \u2264 10^5, 1 \u2264 q \u2264 10^5)\u00a0\u2014 number of elements in a, number of elements in b and number of queries, respectively.\nThe second line contains n integers a_1, a_2,..., a_{n}. ( - 10^9 \u2264 a_{i} \u2264 10^9)\u00a0\u2014 elements of a.\nThe third line contains m integers b_1, b_2,..., b_{m}. ( - 10^9 \u2264 b_{i} \u2264 10^9)\u00a0\u2014 elements of b.\nThen q lines follow describing the queries. Each of them contains three integers l_{i} r_{i} x_{i} (1 \u2264 l_{i} \u2264 r_{i} \u2264 n,  - 10^9 \u2264 x \u2264 10^9)\u00a0\u2014 range to be updated and added value.\n-----Output-----\nThe first line should contain the minimum value of the function f before any update.\nThen output q lines, the i-th of them should contain the minimum value of the function f after performing the i-th update.\n-----Example-----\nInput\n5 6 3\n1 2 3 4 5\n1 2 3 4 5 6\n1 1 10\n1 1 -9\n1 5 -1\nOutput\n0\n9\n0\n0\n-----Note-----\nFor the first example before any updates it's optimal to choose j = 0, f(0) = |(1 - 1) - (2 - 2) + (3 - 3) - (4 - 4) + (5 - 5)| = |0| = 0.\nAfter the first update a becomes {11, 2, 3, 4, 5} and it's optimal to choose j = 1, f(1) = |(11 - 2) - (2 - 3) + (3 - 4) - (4 - 5) + (5 - 6) = |9| = 9.\nAfter the second update a becomes {2, 2, 3, 4, 5} and it's optimal to choose j = 1, f(1) = |(2 - 2) - (2 - 3) + (3 - 4) - (4 - 5) + (5 - 6)| = |0| = 0.\nAfter the third update a becomes {1, 1, 2, 3, 4} and it's optimal to choose j = 0, f(0) = |(1 - 1) - (1 - 2) + (2 - 3) - (3 - 4) + (4 - 5)| = |0| = 0.\n\ndef",
        "answer": "def f(j):\n    return abs(sum(a[i] - b[i + j] for i in range(n)))",
        "difficulty": "interview"
    },
    {
        "task_id": 2544,
        "prompt": "Complete the Python function given the prompt below:Fishing Prince loves trees, and he especially loves trees with only one centroid. The tree is a connected graph without cycles.\nA vertex is a centroid of a tree only when you cut this vertex (remove it and remove all edges from this vertex), the size of the largest connected component of the remaining graph is the smallest possible.\nFor example, the centroid of the following tree is $2$, because when you cut it, the size of the largest connected component of the remaining graph is $2$ and it can't be smaller. [Image] \nHowever, in some trees, there might be more than one centroid, for example: [Image] \nBoth vertex $1$ and vertex $2$ are centroids because the size of the largest connected component is $3$ after cutting each of them.\nNow Fishing Prince has a tree. He should cut one edge of the tree (it means to remove the edge). After that, he should add one edge. The resulting graph after these two operations should be a tree. He can add the edge that he cut.\nHe wants the centroid of the resulting tree to be unique. Help him and find any possible way to make the operations. It can be proved, that at least one such way always exists.\n-----Input-----\nThe input consists of multiple test cases. The first line contains an integer $t$ ($1\\leq t\\leq 10^4$) \u2014 the number of test cases. The description of the test cases follows.\nThe first line of each test case contains an integer $n$ ($3\\leq n\\leq 10^5$) \u2014 the number of vertices.\nEach of the next $n-1$ lines contains two integers $x, y$ ($1\\leq x,y\\leq n$). It means, that there exists an edge connecting vertices $x$ and $y$.\nIt's guaranteed that the given graph is a tree.\nIt's guaranteed that the sum of $n$ for all test cases does not exceed $10^5$.\n-----Output-----\nFor each test case, print two lines.\nIn the first line print two integers $x_1, y_1$ ($1 \\leq x_1, y_1 \\leq n$), which means you cut the edge between vertices $x_1$ and $y_1$. There should exist edge connecting vertices $x_1$ and $y_1$.\nIn the second line print two integers $x_2, y_2$ ($1 \\leq x_2, y_2 \\leq n$), which means you add the edge between vertices $x_2$ and $y_2$.\nThe graph after these two operations should be a tree.\nIf there are multiple solutions you can print any.\n-----Example-----\nInput\n2\n5\n1 2\n1 3\n2 4\n2 5\n6\n1 2\n1 3\n1 4\n2 5\n2 6\nOutput\n1 2\n1 2\n1 3\n2 3\n-----Note-----\nNote that you can add the same edge that you cut.\nIn the first test case, after cutting and adding the same edge, the vertex $2$ is still the only centroid.\nIn the second test case, the vertex $2$ becomes the only centroid after cutting the edge between vertices $1$ and $3$ and adding the edge between vertices $2$ and $3$.\n\ndef",
        "answer": "def solution(n, edges):\n    # write your code in Python 2.7\n    pass\n\"\"\"",
        "difficulty": "interview"
    },
    {
        "task_id": 2545,
        "prompt": "Complete the Python function given the prompt below:You are given two integers $a$ and $b$. You may perform any number of operations on them (possibly zero).\nDuring each operation you should choose any positive integer $x$ and set $a := a - x$, $b := b - 2x$ or $a := a - 2x$, $b := b - x$. Note that you may choose different values of $x$ in different operations.\nIs it possible to make $a$ and $b$ equal to $0$ simultaneously?\nYour program should answer $t$ independent test cases.\n-----Input-----\nThe first line contains one integer $t$ ($1 \\le t \\le 100$) \u2014 the number of test cases.\nThen the test cases follow, each test case is represented by one line containing two integers $a$ and $b$ for this test case ($0 \\le a, b \\le 10^9$).\n-----Output-----\nFor each test case print the answer to it \u2014 YES if it is possible to make $a$ and $b$ equal to $0$ simultaneously, and NO otherwise.\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes and YES will all be recognized as positive answer).\n-----Example-----\nInput\n3\n6 9\n1 1\n1 2\nOutput\nYES\nNO\nYES\n-----Note-----\nIn the first test case of the example two operations can be used to make both $a$ and $b$ equal to zero:  choose $x = 4$ and set $a := a - x$, $b := b - 2x$. Then $a = 6 - 4 = 2$, $b = 9 - 8 = 1$;  choose $x = 1$ and set $a := a - 2x$, $b := b - x$. Then $a = 2 - 2 = 0$, $b = 1 - 1 = 0$.\n\ndef",
        "answer": "def solve(a, b):\n    if a == 0 and b == 0:\n        return \"YES\"\n    elif a == 0 and b!= 0:\n        return \"NO\"\n    elif a!= 0 and b == 0:\n        return \"NO\"\n    else:\n        return \"YES\"",
        "difficulty": "interview"
    },
    {
        "task_id": 2546,
        "prompt": "Complete the Python function given the prompt below:You are the head of a large enterprise. $n$ people work at you, and $n$ is odd (i. e. $n$ is not divisible by $2$).\nYou have to distribute salaries to your employees. Initially, you have $s$ dollars for it, and the $i$-th employee should get a salary from $l_i$ to $r_i$ dollars. You have to distribute salaries in such a way that the median salary is maximum possible.\nTo find the median of a sequence of odd length, you have to sort it and take the element in the middle position after sorting. For example:  the median of the sequence $[5, 1, 10, 17, 6]$ is $6$,  the median of the sequence $[1, 2, 1]$ is $1$. \nIt is guaranteed that you have enough money to pay the minimum salary, i.e $l_1 + l_2 + \\dots + l_n \\le s$.\nNote that you don't have to spend all your $s$ dollars on salaries.\nYou have to answer $t$ test cases.\n-----Input-----\nThe first line contains one integer $t$ ($1 \\le t \\le 2 \\cdot 10^5$) \u2014 the number of test cases.\nThe first line of each query contains two integers $n$ and $s$ ($1 \\le n < 2 \\cdot 10^5$, $1 \\le s \\le 2 \\cdot 10^{14}$) \u2014 the number of employees and the amount of money you have. The value $n$ is not divisible by $2$.\nThe following $n$ lines of each query contain the information about employees. The $i$-th line contains two integers $l_i$ and $r_i$ ($1 \\le l_i \\le r_i \\le 10^9$).\nIt is guaranteed that the sum of all $n$ over all queries does not exceed $2 \\cdot 10^5$.\nIt is also guaranteed that you have enough money to pay the minimum salary to each employee, i. e. $\\sum\\limits_{i=1}^{n} l_i \\le s$.\n-----Output-----\nFor each test case print one integer \u2014 the maximum median salary that you can obtain.\n-----Example-----\nInput\n3\n3 26\n10 12\n1 4\n10 11\n1 1337\n1 1000000000\n5 26\n4 4\n2 4\n6 8\n5 6\n2 7\nOutput\n11\n1337\n6\n-----Note-----\nIn the first test case, you can distribute salaries as follows: $sal_1 = 12, sal_2 = 2, sal_3 = 11$ ($sal_i$ is the salary of the $i$-th employee). Then the median salary is $11$.\nIn the second test case, you have to pay $1337$ dollars to the only employee.\nIn the third test case, you can distribute salaries as follows: $sal_1 = 4, sal_2 = 3, sal_3 = 6, sal_4 = 6, sal_5 = 7$. Then the median salary is $6$.\n\ndef",
        "answer": "def median(a, b):\n    return a + b",
        "difficulty": "interview"
    },
    {
        "task_id": 2547,
        "prompt": "Complete the Python function given the prompt below:Easy and hard versions are actually different problems, so read statements of both problems completely and carefully.\nSummer vacation has started so Alice and Bob want to play and joy, but... Their mom doesn't think so. She says that they have to read exactly $m$ books before all entertainments. Alice and Bob will read each book together to end this exercise faster.\nThere are $n$ books in the family library. The $i$-th book is described by three integers: $t_i$ \u2014 the amount of time Alice and Bob need to spend to read it, $a_i$ (equals $1$ if Alice likes the $i$-th book and $0$ if not), and $b_i$ (equals $1$ if Bob likes the $i$-th book and $0$ if not).\nSo they need to choose exactly $m$ books from the given $n$ books in such a way that:  Alice likes at least $k$ books from the chosen set and Bob likes at least $k$ books from the chosen set;  the total reading time of these $m$ books is minimized (they are children and want to play and joy as soon a possible). \nThe set they choose is the same for both Alice an Bob (it's shared between them) and they read all books together, so the total reading time is the sum of $t_i$ over all books that are in the chosen set.\nYour task is to help them and find any suitable set of books or determine that it is impossible to find such a set.\n-----Input-----\nThe first line of the input contains three integers $n$, $m$ and $k$ ($1 \\le k \\le m \\le n \\le 2 \\cdot 10^5$).\nThe next $n$ lines contain descriptions of books, one description per line: the $i$-th line contains three integers $t_i$, $a_i$ and $b_i$ ($1 \\le t_i \\le 10^4$, $0 \\le a_i, b_i \\le 1$), where:  $t_i$ \u2014 the amount of time required for reading the $i$-th book;  $a_i$ equals $1$ if Alice likes the $i$-th book and $0$ otherwise;  $b_i$ equals $1$ if Bob likes the $i$-th book and $0$ otherwise. \n-----Output-----\nIf there is no solution, print only one integer -1.\nIf the solution exists, print $T$ in the first line \u2014 the minimum total reading time of the suitable set of books. In the second line print $m$ distinct integers from $1$ to $n$ in any order \u2014 indices of books which are in the set you found.\nIf there are several answers, print any of them.\n-----Examples-----\nInput\n6 3 1\n6 0 0\n11 1 0\n9 0 1\n21 1 1\n10 1 0\n8 0 1\nOutput\n24\n6 5 1 \nInput\n6 3 2\n6 0 0\n11 1 0\n9 0 1\n21 1 1\n10 1 0\n8 0 1\nOutput\n39\n4 6 5\n\ndef",
        "answer": "def solve(n, m, k):\n\tif m < k:\n\t\treturn -1\n\tif m == k:\n\t\treturn 0\n\tif m == 1:\n\t\treturn 1\n\tif m == 2:\n\t\treturn 2\n\tif m == 3:\n\t\treturn 3\n\tif m == 4:\n\t\treturn 4\n\tif m == 5:\n\t\treturn 5\n\tif m == 6:\n\t\treturn 6\n\tif m == 7:\n\t\treturn 7\n\tif m == 8:\n\t\treturn 8\n\tif m == 9:\n\t\treturn 9\n\tif m == 10:\n\t\treturn 10\n\tif m == 11:\n\t\treturn 11\n\tif m == 12:\n\t\treturn 12\n\tif m == 13:\n\t\treturn 13\n\tif m == 14:\n\t\treturn 14\n\tif m == 15:\n\t\treturn 15\n\tif m == 16:\n\t\treturn 16\n\tif m == 17:\n\t\treturn 17\n\tif m == 18:\n\t\treturn 18\n\tif m == 19:\n\t\treturn 19\n\tif m == 20:\n\t\treturn 20\n\tif m == 21:\n\t\treturn 21\n\tif m == 22:\n\t\treturn 22\n\tif m == 23:\n\t\treturn 23\n\tif m == 24:\n\t\treturn 24\n\tif m == 25:\n\t\treturn 25\n\tif m == 26:\n\t\treturn 26\n\tif m == 27:\n\t\treturn 27\n\tif m == 28:\n\t\treturn 28\n\tif m == 29:\n\t\treturn 29\n\tif m == 30:\n\t\treturn 30\n\tif m == 31:\n\t\treturn 31\n\tif m == 32:\n\t\treturn 32\n\tif m == 33:\n\t\treturn 33\n\tif m == 34:\n\t\treturn 34\n\tif m == 35:\n\t\treturn 35\n\tif m == 36:\n\t\treturn 36\n\tif m == 37:\n\t\treturn 37\n\tif m == 38:\n\t\treturn 38\n\tif m == 39:\n\t\treturn 39\n\tif m == 40:\n\t\treturn 40\n\tif m == 41:\n\t\treturn 41\n\tif m == 42:\n\t\treturn 42\n\tif m == 43:",
        "difficulty": "interview"
    },
    {
        "task_id": 2548,
        "prompt": "Complete the Python function given the prompt below:You are given an array $a_1, a_2, \\dots, a_n$ consisting of integers from $0$ to $9$. A subarray $a_l, a_{l+1}, a_{l+2}, \\dots, a_{r-1}, a_r$ is good if the sum of elements of this subarray is equal to the length of this subarray ($\\sum\\limits_{i=l}^{r} a_i = r - l + 1$).\nFor example, if $a = [1, 2, 0]$, then there are $3$ good subarrays: $a_{1 \\dots 1} = [1], a_{2 \\dots 3} = [2, 0]$ and $a_{1 \\dots 3} = [1, 2, 0]$.\nCalculate the number of good subarrays of the array $a$.\n-----Input-----\nThe first line contains one integer $t$ ($1 \\le t \\le 1000$)\u00a0\u2014 the number of test cases.\nThe first line of each test case contains one integer $n$ ($1 \\le n \\le 10^5$)\u00a0\u2014 the length of the array $a$.\nThe second line of each test case contains a string consisting of $n$ decimal digits, where the $i$-th digit is equal to the value of $a_i$.\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^5$.\n-----Output-----\nFor each test case print one integer \u2014 the number of good subarrays of the array $a$.\n-----Example-----\nInput\n3\n3\n120\n5\n11011\n6\n600005\nOutput\n3\n6\n1\n-----Note-----\nThe first test case is considered in the statement.\nIn the second test case, there are $6$ good subarrays: $a_{1 \\dots 1}$, $a_{2 \\dots 2}$, $a_{1 \\dots 2}$, $a_{4 \\dots 4}$, $a_{5 \\dots 5}$ and $a_{4 \\dots 5}$. \nIn the third test case there is only one good subarray: $a_{2 \\dots 6}$.\n\ndef",
        "answer": "def count_good_subarrays(a):\n    # your code here\n    return",
        "difficulty": "interview"
    },
    {
        "task_id": 2549,
        "prompt": "Complete the Python function given the prompt below:You are playing a computer game. In this game, you have to fight $n$ monsters.\nTo defend from monsters, you need a shield. Each shield has two parameters: its current durability $a$ and its defence rating $b$. Each monster has only one parameter: its strength $d$.\nWhen you fight a monster with strength $d$ while having a shield with current durability $a$ and defence $b$, there are three possible outcomes:  if $a = 0$, then you receive $d$ damage;  if $a > 0$ and $d \\ge b$, you receive no damage, but the current durability of the shield decreases by $1$;  if $a > 0$ and $d < b$, nothing happens. \nThe $i$-th monster has strength $d_i$, and you will fight each of the monsters exactly once, in some random order (all $n!$ orders are equiprobable). You have to consider $m$ different shields, the $i$-th shield has initial durability $a_i$ and defence rating $b_i$. For each shield, calculate the expected amount of damage you will receive if you take this shield and fight the given $n$ monsters in random order.\n-----Input-----\nThe first line contains two integers $n$ and $m$ ($1 \\le n, m \\le 2 \\cdot 10^5$) \u2014 the number of monsters and the number of shields, respectively.\nThe second line contains $n$ integers $d_1$, $d_2$,..., $d_n$ ($1 \\le d_i \\le 10^9$), where $d_i$ is the strength of the $i$-th monster.\nThen $m$ lines follow, the $i$-th of them contains two integers $a_i$ and $b_i$ ($1 \\le a_i \\le n$; $1 \\le b_i \\le 10^9$) \u2014 the description of the $i$-th shield.\n-----Output-----\nPrint $m$ integers, where the $i$-th integer represents the expected damage you receive with the $i$-th shield as follows: it can be proven that, for each shield, the expected damage is an irreducible fraction $\\dfrac{x}{y}$, where $y$ is coprime with $998244353$. You have to print the value of $x \\cdot y^{-1} \\bmod 998244353$, where $y^{-1}$ is the inverse element for $y$ ($y \\cdot y^{-1} \\bmod 998244353 = 1$).\n-----Examples-----\nInput\n3 2\n1 3 1\n2 1\n1 2\nOutput\n665496237\n1\nInput\n3 3\n4 2 6\n3 1\n1 2\n2 3\nOutput\n0\n8\n665496236\n\ndef",
        "answer": "def solution(n, m, d):\n    d = sorted(d)\n    d = [x for x in d if x > 0]\n    d = [x for x in d if x < 10**9]\n    d = [x for x in d if x > 0]\n    d = [x for x in d if x < 10**9]\n    d = [x for x in d if x > 0]\n    d = [x for x in d if x < 10**9]\n    d = [x for x in d if x > 0]\n    d = [x for x in d if x < 10**9]\n    d = [x for x in d if x > 0]\n    d = [x for x in d if x < 10**9]\n    d = [x for x in d if x > 0]\n    d = [x for x in d if x < 10**9]\n    d = [x for x in d if x > 0]\n    d = [x for x in d if x < 10**9]\n    d = [x for x in d if x > 0]\n    d = [x for x in d if x < 10**9]\n    d = [x for x in d if x > 0]\n    d = [x for x in d if x < 10**9]\n    d = [x for x in d if x > 0]\n    d = [x for x in d if x < 10**9]\n    d = [x for x in d if x > 0]\n    d = [x for x in d if x < 10**9]\n    d = [x for x in d if x > 0]\n    d = [x for x in d if x < 10**9]\n    d = [x for x in d if x > 0]\n    d = [x for x in d if x < 10**9]\n    d = [x for x in d if x > 0]\n    d = [x for x in d if x < 10**9]\n    d = [x for x in d if x > 0]\n    d = [x for x in d if x < 10**9]\n    d =",
        "difficulty": "interview"
    },
    {
        "task_id": 2550,
        "prompt": "Complete the Python function given the prompt below:$n$ students are taking an exam. The highest possible score at this exam is $m$. Let $a_{i}$ be the score of the $i$-th student. You have access to the school database which stores the results of all students.\nYou can change each student's score as long as the following conditions are satisfied:   All scores are integers  $0 \\leq a_{i} \\leq m$  The average score of the class doesn't change. \nYou are student $1$ and you would like to maximize your own score.\nFind the highest possible score you can assign to yourself such that all conditions are satisfied.\n-----Input-----\nEach test contains multiple test cases. \nThe first line contains the number of test cases $t$ ($1 \\le t \\le 200$). The description of the test cases follows.\nThe first line of each test case contains two integers $n$ and $m$ ($1 \\leq n \\leq 10^{3}$, $1 \\leq m \\leq 10^{5}$) \u00a0\u2014 the number of students and the highest possible score respectively.\nThe second line of each testcase contains $n$ integers $a_1, a_2, \\dots, a_n$ ($ 0 \\leq a_{i} \\leq m$) \u00a0\u2014 scores of the students.\n-----Output-----\nFor each testcase, output one integer \u00a0\u2014 the highest possible score you can assign to yourself such that both conditions are satisfied._\n-----Example-----\nInput\n2\n4 10\n1 2 3 4\n4 5\n1 2 3 4\nOutput\n10\n5\n-----Note-----\nIn the first case, $a = [1,2,3,4] $, with average of $2.5$. You can change array $a$ to $[10,0,0,0]$. Average remains $2.5$, and all conditions are satisfied.\nIn the second case, $0 \\leq a_{i} \\leq 5$. You can change $a$ to $[5,1,1,3]$. You cannot increase $a_{1}$ further as it will violate condition $0\\le a_i\\le m$.\n\ndef",
        "answer": "def exam(n, m, a):\n    a.sort()\n    a.reverse()\n    a.append(m)\n    a.sort()\n    a.reverse()\n    return a[0]",
        "difficulty": "interview"
    },
    {
        "task_id": 2551,
        "prompt": "Complete the Python function given the prompt below:You are given two strings $s$ and $t$ consisting of lowercase Latin letters. Also you have a string $z$ which is initially empty. You want string $z$ to be equal to string $t$. You can perform the following operation to achieve this: append any subsequence of $s$ at the end of string $z$. A subsequence is a sequence that can be derived from the given sequence by deleting zero or more elements without changing the order of the remaining elements. For example, if $z = ac$, $s = abcde$, you may turn $z$ into following strings in one operation:   $z = acace$ (if we choose subsequence $ace$);  $z = acbcd$ (if we choose subsequence $bcd$);  $z = acbce$ (if we choose subsequence $bce$). \nNote that after this operation string $s$ doesn't change.\nCalculate the minimum number of such operations to turn string $z$ into string $t$. \n-----Input-----\nThe first line contains the integer $T$ ($1 \\le T \\le 100$) \u2014 the number of test cases.\nThe first line of each testcase contains one string $s$ ($1 \\le |s| \\le 10^5$) consisting of lowercase Latin letters.\nThe second line of each testcase contains one string $t$ ($1 \\le |t| \\le 10^5$) consisting of lowercase Latin letters.\nIt is guaranteed that the total length of all strings $s$ and $t$ in the input does not exceed $2 \\cdot 10^5$.\n-----Output-----\nFor each testcase, print one integer \u2014 the minimum number of operations to turn string $z$ into string $t$. If it's impossible print $-1$.\n-----Example-----\nInput\n3\naabce\nace\nabacaba\naax\nty\nyyt\nOutput\n1\n-1\n3\n\ndef",
        "answer": "def min_operations(s, t):\n    n = len(s)\n    m = len(t)\n    if n > m:\n        return -1\n    if n == m:\n        return 0 if s == t else -1\n    dp = [[0 for _ in range(m+1)] for _ in range(n+1)]\n    for i in range(n+1):\n        dp[i][0] = i\n    for j in range(m+1):\n        dp[0][j] = j\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if s[i-1] == t[j-1]:\n                dp[i][j] = dp[i-1][j-1]\n            else:\n                dp[i][j] = 1 + min(dp[i-1][j-1], dp[i-1][j], dp[i][j-1])\n    return dp[n][m]",
        "difficulty": "interview"
    },
    {
        "task_id": 2552,
        "prompt": "Complete the Python function given the prompt below:Uncle Bogdan is in captain Flint's crew for a long time and sometimes gets nostalgic for his homeland. Today he told you how his country introduced a happiness index.\nThere are $n$ cities and $n\u22121$ undirected roads connecting pairs of cities. Citizens of any city can reach any other city traveling by these roads. Cities are numbered from $1$ to $n$ and the city $1$ is a capital. In other words, the country has a tree structure.\nThere are $m$ citizens living in the country. A $p_i$ people live in the $i$-th city but all of them are working in the capital. At evening all citizens return to their home cities using the shortest paths. \nEvery person has its own mood: somebody leaves his workplace in good mood but somebody are already in bad mood. Moreover any person can ruin his mood on the way to the hometown. If person is in bad mood he won't improve it.\nHappiness detectors are installed in each city to monitor the happiness of each person who visits the city. The detector in the $i$-th city calculates a happiness index $h_i$ as the number of people in good mood minus the number of people in bad mood. Let's say for the simplicity that mood of a person doesn't change inside the city.\nHappiness detector is still in development, so there is a probability of a mistake in judging a person's happiness. One late evening, when all citizens successfully returned home, the government asked uncle Bogdan (the best programmer of the country) to check the correctness of the collected happiness indexes.\nUncle Bogdan successfully solved the problem. Can you do the same?\nMore formally, You need to check: \"Is it possible that, after all people return home, for each city $i$ the happiness index will be equal exactly to $h_i$\".\n-----Input-----\nThe first line contains a single integer $t$ ($1 \\le t \\le 10000$)\u00a0\u2014 the number of test cases.\nThe first line of each test case contains two integers $n$ and $m$ ($1 \\le n \\le 10^5$; $0 \\le m \\le 10^9$)\u00a0\u2014 the number of cities and citizens.\nThe second line of each test case contains $n$ integers $p_1, p_2, \\ldots, p_{n}$ ($0 \\le p_i \\le m$; $p_1 + p_2 + \\ldots + p_{n} = m$), where $p_i$ is the number of people living in the $i$-th city.\nThe third line contains $n$ integers $h_1, h_2, \\ldots, h_{n}$ ($-10^9 \\le h_i \\le 10^9$), where $h_i$ is the calculated happiness index of the $i$-th city.\nNext $n \u2212 1$ lines contain description of the roads, one per line. Each line contains two integers $x_i$ and $y_i$ ($1 \\le x_i, y_i \\le n$; $x_i \\neq y_i$), where $x_i$ and $y_i$ are cities connected by the $i$-th road.\nIt's guaranteed that the sum of $n$ from all test cases doesn't exceed $2 \\cdot 10^5$.\n-----Output-----\nFor each test case, print YES, if the collected data is correct, or NO\u00a0\u2014 otherwise. You can print characters in YES or NO in any case.\n-----Examples-----\nInput\n2\n7 4\n1 0 1 1 0 1 0\n4 0 0 -1 0 -1 0\n1 2\n1 3\n1 4\n3 5\n3 6\n3 7\n5 11\n1 2 5 2 1\n-11 -2 -6 -2 -1\n1 2\n1 3\n1 4\n3 5\nOutput\nYES\nYES\nInput\n2\n4 4\n1 1 1 1\n4 1 -3 -1\n1 2\n1 3\n1 4\n3 13\n3 3 7\n13 1 4\n1 2\n1 3\nOutput\nNO\nNO\n-----Note-----\nLet's look at the first test case of the first sample:  [Image] \nAt first, all citizens are in the capital. Let's describe one of possible scenarios:   a person from city $1$: he lives in the capital and is in good mood;  a person from city $4$: he visited cities $1$ and $4$, his mood was ruined between cities $1$ and $4$;  a person from city $3$: he visited cities $1$ and $3$ in good mood;  a person from city $6$: he visited cities $1$, $3$ and $6$, his mood was ruined between cities $1$ and $3$;  In total,   $h_1 = 4 - 0 = 4$,  $h_2 = 0$,  $h_3 = 1 - 1 = 0$,  $h_4 = 0 - 1 = -1$,  $h_5 = 0$,  $h_6 = 0 - 1 = -1$,  $h_7 = 0$. \nThe second case of the first test:  $\\text{of}_{0}$ \nAll people have already started in bad mood in the capital\u00a0\u2014 this is the only possible scenario.\nThe first case of the second test:  $\\text{of} 0$ \nThe second case of the second test:  [Image] \nIt can be proven that there is no way to achieve given happiness indexes in both cases of the second test.\n\ndef",
        "answer": "def solve(n, m, p, h, roads):\n    if n == 1:\n        return \"YES\"\n    if n == 2:\n        return \"NO\"\n    if n == 3:\n        return \"YES\"\n    if n == 4:\n        return \"NO\"\n    if n == 5:\n        return \"YES\"\n    if n == 6:\n        return \"NO\"\n    if n == 7:\n        return \"YES\"\n    if n == 8:\n        return \"NO\"\n    if n == 9:\n        return \"YES\"\n    if n == 10:\n        return \"NO\"\n    if n == 11:\n        return \"YES\"\n    if n == 12:\n        return \"NO\"\n    if n == 13:\n        return \"YES\"\n    if n == 14:\n        return \"NO\"\n    if n == 15:\n        return \"YES\"\n    if n == 16:\n        return \"NO\"\n    if n == 17:\n        return \"YES\"\n    if n == 18:\n        return \"NO\"\n    if n == 19:\n        return \"YES\"\n    if n == 20:\n        return \"NO\"\n    if n == 21:\n        return \"YES\"\n    if n == 22:\n        return \"NO\"\n    if n == 23:\n        return \"YES\"\n    if n == 24:\n        return \"NO\"\n    if n == 25:\n        return \"YES\"\n    if n == 26:\n        return \"NO\"\n    if n == 27:\n        return \"YES\"\n    if n == 28:\n        return \"NO\"\n    if n == 29:\n        return \"YES\"\n    if n == 30:\n        return \"NO\"\n    if n == 31:\n        return \"YES\"\n    if n == 32:\n        return \"NO\"\n    if n == 33:\n        return \"YES\"\n    if n == 34:\n        return \"NO\"\n    if n == 35:\n        return \"YES\"\n    if n == 36:\n        return \"NO\"\n    if n == 37:\n        return \"YES\"\n    if n == 38:",
        "difficulty": "interview"
    },
    {
        "task_id": 2553,
        "prompt": "Complete the Python function given the prompt below:Shubham has an array $a$ of size $n$, and wants to select exactly $x$ elements from it, such that their sum is odd. These elements do not have to be consecutive. The elements of the array are not guaranteed to be distinct.\nTell him whether he can do so.\n-----Input-----\nThe first line of the input contains a single integer $t$ $(1\\le t \\le 100)$\u00a0\u2014 the number of test cases. The description of the test cases follows.\nThe first line of each test case contains two integers $n$ and $x$ $(1 \\le x \\le n \\le 1000)$\u00a0\u2014 the length of the array and the number of elements you need to choose.\nThe next line of each test case contains $n$ integers $a_1, a_2, \\dots, a_n$ $(1 \\le a_i \\le 1000)$\u00a0\u2014 elements of the array.\n-----Output-----\nFor each test case, print \"Yes\" or \"No\" depending on whether it is possible to choose $x$ elements such that their sum is odd.\nYou may print every letter in any case you want.\n-----Example-----\nInput\n5\n1 1\n999\n1 1\n1000\n2 1\n51 50\n2 2\n51 50\n3 3\n101 102 103\nOutput\nYes\nNo\nYes\nYes\nNo\n-----Note-----\nFor $1$st case: We must select element $999$, and the sum is odd.\nFor $2$nd case: We must select element $1000$, so overall sum is not odd.\nFor $3$rd case: We can select element $51$.\nFor $4$th case: We must select both elements $50$ and $51$ \u00a0\u2014 so overall sum is odd.\nFor $5$th case: We must select all elements \u00a0\u2014 but overall sum is not odd.\n\ndef",
        "answer": "def odd_sum(a, x):\n    s = 0\n    for i in a:\n        if i % 2 == 1:\n            s += i\n    if s % 2 == 1:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "difficulty": "interview"
    },
    {
        "task_id": 2554,
        "prompt": "Complete the Python function given the prompt below:You are given an array $a$ consisting of $n$ integers. Indices of the array start from zero (i. e. the first element is $a_0$, the second one is $a_1$, and so on).\nYou can reverse at most one subarray (continuous subsegment) of this array. Recall that the subarray of $a$ with borders $l$ and $r$ is $a[l; r] = a_l, a_{l + 1}, \\dots, a_{r}$.\nYour task is to reverse such a subarray that the sum of elements on even positions of the resulting array is maximized (i. e. the sum of elements $a_0, a_2, \\dots, a_{2k}$ for integer $k = \\lfloor\\frac{n-1}{2}\\rfloor$ should be maximum possible).\nYou have to answer $t$ independent test cases.\n-----Input-----\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 2 \\cdot 10^4$) \u2014 the number of test cases. Then $t$ test cases follow.\nThe first line of the test case contains one integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) \u2014 the length of $a$. The second line of the test case contains $n$ integers $a_0, a_1, \\dots, a_{n-1}$ ($1 \\le a_i \\le 10^9$), where $a_i$ is the $i$-th element of $a$.\nIt is guaranteed that the sum of $n$ does not exceed $2 \\cdot 10^5$ ($\\sum n \\le 2 \\cdot 10^5$).\n-----Output-----\nFor each test case, print the answer on the separate line \u2014 the maximum possible sum of elements on even positions after reversing at most one subarray (continuous subsegment) of $a$.\n-----Example-----\nInput\n4\n8\n1 7 3 4 7 6 2 9\n5\n1 2 1 2 1\n10\n7 8 4 5 7 6 8 9 7 3\n4\n3 1 2 1\nOutput\n26\n5\n37\n5\n\ndef",
        "answer": "def max_sum_even_pos(a):\n    max_sum = 0\n    for i in range(len(a)):\n        if i % 2 == 0:\n            max_sum += a[i]\n    return max_sum",
        "difficulty": "interview"
    },
    {
        "task_id": 2555,
        "prompt": "Complete the Python function given the prompt below:This is the hard version of the problem. The difference between the versions is that the easy version has no swap operations. You can make hacks only if all versions of the problem are solved.\nPikachu is a cute and friendly pok\u00e9mon living in the wild pikachu herd.\nBut it has become known recently that infamous team R wanted to steal all these pok\u00e9mon! Pok\u00e9mon trainer Andrew decided to help Pikachu to build a pok\u00e9mon army to resist.\nFirst, Andrew counted all the pok\u00e9mon\u00a0\u2014 there were exactly $n$ pikachu. The strength of the $i$-th pok\u00e9mon is equal to $a_i$, and all these numbers are distinct.\nAs an army, Andrew can choose any non-empty subsequence of pokemons. In other words, Andrew chooses some array $b$ from $k$ indices such that $1 \\le b_1 < b_2 < \\dots < b_k \\le n$, and his army will consist of pok\u00e9mons with forces $a_{b_1}, a_{b_2}, \\dots, a_{b_k}$.\nThe strength of the army is equal to the alternating sum of elements of the subsequence; that is, $a_{b_1} - a_{b_2} + a_{b_3} - a_{b_4} + \\dots$.\nAndrew is experimenting with pok\u00e9mon order. He performs $q$ operations. In $i$-th operation Andrew swaps $l_i$-th and $r_i$-th pok\u00e9mon.\nAndrew wants to know the maximal stregth of the army he can achieve with the initial pok\u00e9mon placement. He also needs to know the maximal strength after each operation.\nHelp Andrew and the pok\u00e9mon, or team R will realize their tricky plan!\n-----Input-----\nEach test contains multiple test cases.\nThe first line contains one positive integer $t$ ($1 \\le t \\le 10^3$) denoting the number of test cases. Description of the test cases follows.\nThe first line of each test case contains two integers $n$ and $q$ ($1 \\le n \\le 3 \\cdot 10^5, 0 \\le q \\le 3 \\cdot 10^5$) denoting the number of pok\u00e9mon and number of operations respectively.\nThe second line contains $n$ distinct positive integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le n$) denoting the strengths of the pok\u00e9mon.\n$i$-th of the last $q$ lines contains two positive integers $l_i$ and $r_i$ ($1 \\le l_i \\le r_i \\le n$) denoting the indices of pok\u00e9mon that were swapped in the $i$-th operation.\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $3 \\cdot 10^5$, and the sum of $q$ over all test cases does not exceed $3 \\cdot 10^5$. \n-----Output-----\nFor each test case, print $q+1$ integers: the maximal strength of army before the swaps and after each swap.\n-----Example-----\nInput\n3\n3 1\n1 3 2\n1 2\n2 2\n1 2\n1 2\n1 2\n7 5\n1 2 5 4 3 6 7\n1 2\n6 7\n3 4\n1 2\n2 3\nOutput\n3\n4\n2\n2\n2\n9\n10\n10\n10\n9\n11\n-----Note-----\nLet's look at the third test case:\nInitially we can build an army in such way: [1 2 5 4 3 6 7], its strength will be $5-3+7=9$.\nAfter first operation we can build an army in such way: [2 1 5 4 3 6 7], its strength will be $2-1+5-3+7=10$.\nAfter second operation we can build an army in such way: [2 1 5 4 3 7 6], its strength will be $2-1+5-3+7=10$.\nAfter third operation we can build an army in such way: [2 1 4 5 3 7 6], its strength will be $2-1+5-3+7=10$.\nAfter forth operation we can build an army in such way: [1 2 4 5 3 7 6], its strength will be $5-3+7=9$.\nAfter all operations we can build an army in such way: [1 4 2 5 3 7 6], its strength will be $4-2+5-3+7=11$.\n\ndef",
        "answer": "def solve(n, q, a):\n    # Write your code here\n    a = sorted(a)\n    b = [0] * n\n    for i in xrange(n):\n        b[i] = a[i]\n    for i in xrange(q):\n        l, r = map(int, raw_input().split())\n        b[l - 1], b[r - 1] = b[r - 1], b[l - 1]\n    return sum(b)",
        "difficulty": "interview"
    },
    {
        "task_id": 2556,
        "prompt": "Complete the Python function given the prompt below:Several days ago you bought a new house and now you are planning to start a renovation. Since winters in your region can be very cold you need to decide how to heat rooms in your house.\nYour house has $n$ rooms. In the $i$-th room you can install at most $c_i$ heating radiators. Each radiator can have several sections, but the cost of the radiator with $k$ sections is equal to $k^2$ burles.\nSince rooms can have different sizes, you calculated that you need at least $sum_i$ sections in total in the $i$-th room. \nFor each room calculate the minimum cost to install at most $c_i$ radiators with total number of sections not less than $sum_i$.\n-----Input-----\nThe first line contains single integer $n$ ($1 \\le n \\le 1000$) \u2014 the number of rooms.\nEach of the next $n$ lines contains the description of some room. The $i$-th line contains two integers $c_i$ and $sum_i$ ($1 \\le c_i, sum_i \\le 10^4$) \u2014 the maximum number of radiators and the minimum total number of sections in the $i$-th room, respectively.\n-----Output-----\nFor each room print one integer \u2014 the minimum possible cost to install at most $c_i$ radiators with total number of sections not less than $sum_i$.\n-----Example-----\nInput\n4\n1 10000\n10000 1\n2 6\n4 6\nOutput\n100000000\n1\n18\n10\n-----Note-----\nIn the first room, you can install only one radiator, so it's optimal to use the radiator with $sum_1$ sections. The cost of the radiator is equal to $(10^4)^2 = 10^8$.\nIn the second room, you can install up to $10^4$ radiators, but since you need only one section in total, it's optimal to buy one radiator with one section.\nIn the third room, there $7$ variants to install radiators: $[6, 0]$, $[5, 1]$, $[4, 2]$, $[3, 3]$, $[2, 4]$, $[1, 5]$, $[0, 6]$. The optimal variant is $[3, 3]$ and it costs $3^2+ 3^2 = 18$.\n\ndef",
        "answer": "def solution(n, c, sum_i):\n    # write your code in Python 2.7\n    return 0\n\"\"\"",
        "difficulty": "interview"
    },
    {
        "task_id": 2557,
        "prompt": "Complete the Python function given the prompt below:Shuseki Kingdom is the world's leading nation for innovation and technology. There are n cities in the kingdom, numbered from 1 to n.\nThanks to Mr. Kitayuta's research, it has finally become possible to construct teleportation pipes between two cities. A teleportation pipe will connect two cities unidirectionally, that is, a teleportation pipe from city x to city y cannot be used to travel from city y to city x. The transportation within each city is extremely developed, therefore if a pipe from city x to city y and a pipe from city y to city z are both constructed, people will be able to travel from city x to city z instantly.\nMr. Kitayuta is also involved in national politics. He considers that the transportation between the m pairs of city (a_{i}, b_{i}) (1 \u2264 i \u2264 m) is important. He is planning to construct teleportation pipes so that for each important pair (a_{i}, b_{i}), it will be possible to travel from city a_{i} to city b_{i} by using one or more teleportation pipes (but not necessarily from city b_{i} to city a_{i}). Find the minimum number of teleportation pipes that need to be constructed. So far, no teleportation pipe has been constructed, and there is no other effective transportation between cities.\n-----Input-----\nThe first line contains two space-separated integers n and m (2 \u2264 n \u2264 10^5, 1 \u2264 m \u2264 10^5), denoting the number of the cities in Shuseki Kingdom and the number of the important pairs, respectively.\nThe following m lines describe the important pairs. The i-th of them (1 \u2264 i \u2264 m) contains two space-separated integers a_{i} and b_{i} (1 \u2264 a_{i}, b_{i} \u2264 n, a_{i} \u2260 b_{i}), denoting that it must be possible to travel from city a_{i} to city b_{i} by using one or more teleportation pipes (but not necessarily from city b_{i} to city a_{i}). It is guaranteed that all pairs (a_{i}, b_{i}) are distinct.\n-----Output-----\nPrint the minimum required number of teleportation pipes to fulfill Mr. Kitayuta's purpose.\n-----Examples-----\nInput\n4 5\n1 2\n1 3\n1 4\n2 3\n2 4\nOutput\n3\nInput\n4 6\n1 2\n1 4\n2 3\n2 4\n3 2\n3 4\nOutput\n4\n-----Note-----\nFor the first sample, one of the optimal ways to construct pipes is shown in the image below:  [Image] \nFor the second sample, one of the optimal ways is shown below:  [Image]\n\ndef",
        "answer": "def solution(n, m):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2558,
        "prompt": "Complete the Python function given the prompt below:Meka-Naruto plays a computer game. His character has the following ability: given an enemy hero, deal $a$ instant damage to him, and then heal that enemy $b$ health points at the end of every second, for exactly $c$ seconds, starting one second after the ability is used. That means that if the ability is used at time $t$, the enemy's health decreases by $a$ at time $t$, and then increases by $b$ at time points $t + 1$, $t + 2$,..., $t + c$ due to this ability.\nThe ability has a cooldown of $d$ seconds, i.\u00a0e. if Meka-Naruto uses it at time moment $t$, next time he can use it is the time $t + d$. Please note that he can only use the ability at integer points in time, so all changes to the enemy's health also occur at integer times only.\nThe effects from different uses of the ability may stack with each other; that is, the enemy which is currently under $k$ spells gets $k\\cdot b$ amount of heal this time. Also, if several health changes occur at the same moment, they are all counted at once.\nNow Meka-Naruto wonders if he can kill the enemy by just using the ability each time he can (that is, every $d$ seconds). The enemy is killed if their health points become $0$ or less. Assume that the enemy's health is not affected in any way other than by Meka-Naruto's character ability. What is the maximal number of health points the enemy can have so that Meka-Naruto is able to kill them?\n-----Input-----\nThe first line contains an integer $t$ ($1\\leq t\\leq 10^5$) standing for the number of testcases.\nEach test case is described with one line containing four numbers $a$, $b$, $c$ and $d$ ($1\\leq a, b, c, d\\leq 10^6$) denoting the amount of instant damage, the amount of heal per second, the number of heals and the ability cooldown, respectively.\n-----Output-----\nFor each testcase in a separate line print $-1$ if the skill can kill an enemy hero with an arbitrary number of health points, otherwise print the maximal number of health points of the enemy that can be killed.\n-----Example-----\nInput\n7\n1 1 1 1\n2 2 2 2\n1 2 3 4\n4 3 2 1\n228 21 11 3\n239 21 11 3\n1000000 1 1000000 1\nOutput\n1\n2\n1\n5\n534\n-1\n500000500000\n-----Note-----\nIn the first test case of the example each unit of damage is cancelled in a second, so Meka-Naruto cannot deal more than 1 damage.\nIn the fourth test case of the example the enemy gets:  $4$ damage ($1$-st spell cast) at time $0$;  $4$ damage ($2$-nd spell cast) and $3$ heal ($1$-st spell cast) at time $1$ (the total of $5$ damage to the initial health);  $4$ damage ($3$-nd spell cast) and $6$ heal ($1$-st and $2$-nd spell casts) at time $2$ (the total of $3$ damage to the initial health);  and so on. \nOne can prove that there is no time where the enemy gets the total of $6$ damage or more, so the answer is $5$. Please note how the health is recalculated: for example, $8$-health enemy would not die at time $1$, as if we first subtracted $4$ damage from his health and then considered him dead, before adding $3$ heal.\nIn the sixth test case an arbitrarily healthy enemy can be killed in a sufficient amount of time.\nIn the seventh test case the answer does not fit into a 32-bit integer type.\n\ndef",
        "answer": "def mekanaruto():\n    t = int(input())\n    for _ in range(t):\n        a, b, c, d = map(int, input().split())\n        if a <= 0:\n            print(-1)\n            continue\n        if b <= 0:\n            print(-1)\n            continue\n        if c <= 0:\n            print(-1)\n            continue\n        if d <= 0:\n            print(-1)\n            continue\n        if a + b + c + d <= 1000000:\n            print(-1)\n            continue\n        print(a + b + c + d)\nmekanaruto()\n",
        "difficulty": "interview"
    },
    {
        "task_id": 2559,
        "prompt": "Complete the Python function given the prompt below:Welcome! Everything is fine.\nYou have arrived in The Medium Place, the place between The Good Place and The Bad Place. You are assigned a task that will either make people happier or torture them for eternity.\nYou have a list of $k$ pairs of people who have arrived in a new inhabited neighborhood. You need to assign each of the $2k$ people into one of the $2k$ houses. Each person will be the resident of exactly one house, and each house will have exactly one resident.\nOf course, in the neighborhood, it is possible to visit friends. There are $2k - 1$ roads, each of which connects two houses. It takes some time to traverse a road. We will specify the amount of time it takes in the input. The neighborhood is designed in such a way that from anyone's house, there is exactly one sequence of distinct roads you can take to any other house. In other words, the graph with the houses as vertices and the roads as edges is a tree.\nThe truth is, these $k$ pairs of people are actually soulmates. We index them from $1$ to $k$. We denote by $f(i)$ the amount of time it takes for the $i$-th pair of soulmates to go to each other's houses.\nAs we have said before, you will need to assign each of the $2k$ people into one of the $2k$ houses. You have two missions, one from the entities in The Good Place and one from the entities of The Bad Place. Here they are:  The first mission, from The Good Place, is to assign the people into the houses such that the sum of $f(i)$ over all pairs $i$ is minimized. Let's define this minimized sum as $G$. This makes sure that soulmates can easily and efficiently visit each other;  The second mission, from The Bad Place, is to assign the people into the houses such that the sum of $f(i)$ over all pairs $i$ is maximized. Let's define this maximized sum as $B$. This makes sure that soulmates will have a difficult time to visit each other. \nWhat are the values of $G$ and $B$?\n-----Input-----\nThe first line of input contains a single integer $t$ ($1 \\le t \\le 500$) denoting the number of test cases. The next lines contain descriptions of the test cases.\nThe first line of each test case contains a single integer $k$ denoting the number of pairs of people ($1 \\le k \\le 10^5$). The next $2k - 1$ lines describe the roads; the $i$-th of them contains three space-separated integers $a_i, b_i, t_i$ which means that the $i$-th road connects the $a_i$-th and $b_i$-th houses with a road that takes $t_i$ units of time to traverse ($1 \\le a_i, b_i \\le 2k$, $a_i \\neq b_i$, $1 \\le t_i \\le 10^6$). It is guaranteed that the given roads define a tree structure.\nIt is guaranteed that the sum of the $k$ in a single file is at most $3 \\cdot 10^5$.\n-----Output-----\nFor each test case, output a single line containing two space-separated integers $G$ and $B$. \n-----Example-----\nInput\n2\n3\n1 2 3\n3 2 4\n2 4 3\n4 5 6\n5 6 5\n2\n1 2 1\n1 3 2\n1 4 3\nOutput\n15 33\n6 6\n-----Note-----\nFor the sample test case, we have a minimum sum equal to $G = 15$. One way this can be achieved is with the following assignment:  The first pair of people get assigned to houses $5$ and $6$, giving us $f(1) = 5$;  The second pair of people get assigned to houses $1$ and $4$, giving us $f(2) = 6$;  The third pair of people get assigned to houses $3$ and $2$, giving us $f(3) = 4$. \nNote that the sum of the $f(i)$ is $5 + 6 + 4 = 15$. \nWe also have a maximum sum equal to $B = 33$. One way this can be achieved is with the following assignment:  The first pair of people get assigned to houses $1$ and $4$, giving us $f(1) = 6$;  The second pair of people get assigned to houses $6$ and $2$, giving us $f(2) = 14$;  The third pair of people get assigned to houses $3$ and $5$, giving us $f(3) = 13$. \nNote that the sum of the $f(i)$ is $6 + 14 + 13 = 33$.\n\ndef",
        "answer": "def solve(k, roads):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2560,
        "prompt": "Complete the Python function given the prompt below:Alexey, a merry Berland entrant, got sick of the gray reality and he zealously wants to go to university. There are a lot of universities nowadays, so Alexey is getting lost in the diversity \u2014 he has not yet decided what profession he wants to get. At school, he had bad grades in all subjects, and it's only thanks to wealthy parents that he was able to obtain the graduation certificate.\nThe situation is complicated by the fact that each high education institution has the determined amount of voluntary donations, paid by the new students for admission \u2014 n_{i} berubleys. He cannot pay more than n_{i}, because then the difference between the paid amount and n_{i} can be regarded as a bribe!\nEach rector is wearing the distinctive uniform of his university. Therefore, the uniform's pockets cannot contain coins of denomination more than r_{i}. The rector also does not carry coins of denomination less than l_{i} in his pocket \u2014 because if everyone pays him with so small coins, they gather a lot of weight and the pocket tears. Therefore, a donation can be paid only by coins of denomination x berubleys, where l_{i} \u2264 x \u2264 r_{i} (Berland uses coins of any positive integer denomination). Alexey can use the coins of different denominations and he can use the coins of the same denomination any number of times. When Alexey was first confronted with such orders, he was puzzled because it turned out that not all universities can accept him! Alexey is very afraid of going into the army (even though he had long wanted to get the green uniform, but his dad says that the army bullies will beat his son and he cannot pay to ensure the boy's safety). So, Alexey wants to know for sure which universities he can enter so that he could quickly choose his alma mater.\nThanks to the parents, Alexey is not limited in money and we can assume that he has an unlimited number of coins of each type.\nIn other words, you are given t requests, each of them contains numbers n_{i}, l_{i}, r_{i}. For each query you need to answer, whether it is possible to gather the sum of exactly n_{i} berubleys using only coins with an integer denomination from l_{i} to r_{i} berubleys. You can use coins of different denominations. Coins of each denomination can be used any number of times.\n-----Input-----\nThe first line contains the number of universities t, (1 \u2264 t \u2264 1000) Each of the next t lines contain three space-separated integers: n_{i}, l_{i}, r_{i} (1 \u2264 n_{i}, l_{i}, r_{i} \u2264 10^9;\u00a0l_{i} \u2264 r_{i}).\n-----Output-----\nFor each query print on a single line: either \"Yes\", if Alexey can enter the university, or \"No\" otherwise.\n-----Examples-----\nInput\n2\n5 2 3\n6 4 5\nOutput\nYes\nNo\n-----Note-----\nYou can pay the donation to the first university with two coins: one of denomination 2 and one of denomination 3 berubleys. The donation to the second university cannot be paid.\n\ndef",
        "answer": "def berland(n, l, r):\n    if n < l:\n        return \"No\"\n    if n == l:\n        return \"Yes\"\n    if n == r:\n        return \"Yes\"\n    if n > r:\n        return \"No\"\n    if n == 0:\n        return \"Yes\"\n    if n == 1:\n        return \"Yes\"\n    if n == 2:\n        return \"Yes\"\n    if n == 3:\n        return \"Yes\"\n    if n == 4:\n        return \"Yes\"\n    if n == 5:\n        return \"Yes\"\n    if n == 6:\n        return \"Yes\"\n    if n == 7:\n        return \"Yes\"\n    if n == 8:\n        return \"Yes\"\n    if n == 9:\n        return \"Yes\"\n    if n == 10:\n        return \"Yes\"\n    if n == 11:\n        return \"Yes\"\n    if n == 12:\n        return \"Yes\"\n    if n == 13:\n        return \"Yes\"\n    if n == 14:\n        return \"Yes\"\n    if n == 15:\n        return \"Yes\"\n    if n == 16:\n        return \"Yes\"\n    if n == 17:\n        return \"Yes\"\n    if n == 18:\n        return \"Yes\"\n    if n == 19:\n        return \"Yes\"\n    if n == 20:\n        return \"Yes\"\n    if n == 21:\n        return \"Yes\"\n    if n == 22:\n        return \"Yes\"\n    if n == 23:\n        return \"Yes\"\n    if n == 24:\n        return \"Yes\"\n    if n == 25:\n        return \"Yes\"\n    if n == 26:\n        return \"Yes\"\n    if n == 27:\n        return \"Yes\"\n    if n == 28:\n        return \"Yes\"\n    if n == 29:\n        return \"Yes\"\n    if n == 30:\n        return \"Yes\"\n    if n == 31:\n        return \"Yes\"\n    if n == 32:\n        return \"Yes\"\n    if n == 33:\n        return",
        "difficulty": "interview"
    },
    {
        "task_id": 2561,
        "prompt": "Complete the Python function given the prompt below:Colossal!\u00a0\u2014 exclaimed Hawk-nose.\u00a0\u2014 A programmer! That's exactly what we are looking for.Arkadi and Boris Strugatsky. Monday starts on Saturday\nReading the book \"Equations of Mathematical Magic\" Roman Oira-Oira and Cristobal Junta found an interesting equation: $a - (a \\oplus x) - x = 0$ for some given $a$, where $\\oplus$ stands for a bitwise exclusive or (XOR) of two integers (this operation is denoted as ^ or xor in many modern programming languages). Oira-Oira quickly found some $x$, which is the solution of the equation, but Cristobal Junta decided that Oira-Oira's result is not interesting enough, so he asked his colleague how many non-negative solutions of this equation exist. This task turned out to be too difficult for Oira-Oira, so he asks you to help.\n-----Input-----\nEach test contains several possible values of $a$ and your task is to find the number of equation's solution for each of them. The first line contains an integer $t$ ($1 \\le t \\le 1000$)\u00a0\u2014 the number of these values.\nThe following $t$ lines contain the values of parameter $a$, each value is an integer from $0$ to $2^{30} - 1$ inclusive.\n-----Output-----\nFor each value of $a$ print exactly one integer\u00a0\u2014 the number of non-negative solutions of the equation for the given value of the parameter. Print answers in the same order as values of $a$ appear in the input.\nOne can show that the number of solutions is always finite.\n-----Example-----\nInput\n3\n0\n2\n1073741823\nOutput\n1\n2\n1073741824\n-----Note-----\nLet's define the bitwise exclusive OR (XOR) operation. Given two integers $x$ and $y$, consider their binary representations (possibly with leading zeroes): $x_k \\dots x_2 x_1 x_0$ and $y_k \\dots y_2 y_1 y_0$. Here, $x_i$ is the $i$-th bit of the number $x$ and $y_i$ is the $i$-th bit of the number $y$. Let $r = x \\oplus y$ be the result of the XOR operation of $x$ and $y$. Then $r$ is defined as $r_k \\dots r_2 r_1 r_0$ where:\n$$ r_i = \\left\\{ \\begin{aligned} 1, ~ \\text{if} ~ x_i \\ne y_i \\\\ 0, ~ \\text{if} ~ x_i = y_i \\end{aligned} \\right. $$\nFor the first value of the parameter, only $x = 0$ is a solution of the equation.\nFor the second value of the parameter, solutions are $x = 0$ and $x = 2$.\n\ndef",
        "answer": "def solution(a):\n    return a ^ (a ^ a)",
        "difficulty": "interview"
    },
    {
        "task_id": 2562,
        "prompt": "Complete the Python function given the prompt below:Winter is here at the North and the White Walkers are close. John Snow has an army consisting of n soldiers. While the rest of the world is fighting for the Iron Throne, he is going to get ready for the attack of the White Walkers.\nHe has created a method to know how strong his army is. Let the i-th soldier\u2019s strength be a_{i}. For some k he calls i_1, i_2,..., i_{k} a clan if i_1 < i_2 < i_3 <... < i_{k} and gcd(a_{i}_1, a_{i}_2,..., a_{i}_{k}) > 1. He calls the strength of that clan k\u00b7gcd(a_{i}_1, a_{i}_2,..., a_{i}_{k}). Then he defines the strength of his army by the sum of strengths of all possible clans.\nYour task is to find the strength of his army. As the number may be very large, you have to print it modulo 1000000007 (10^9 + 7).\nGreatest common divisor (gcd) of a sequence of integers is the maximum possible integer so that each element of the sequence is divisible by it.\n-----Input-----\nThe first line contains integer n (1 \u2264 n \u2264 200000)\u00a0\u2014 the size of the army.\nThe second line contains n integers a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 1000000)\u00a0\u2014 denoting the strengths of his soldiers.\n-----Output-----\nPrint one integer\u00a0\u2014 the strength of John Snow's army modulo 1000000007 (10^9 + 7).\n-----Examples-----\nInput\n3\n3 3 1\nOutput\n12\nInput\n4\n2 3 4 6\nOutput\n39\n-----Note-----\nIn the first sample the clans are {1}, {2}, {1, 2} so the answer will be 1\u00b73 + 1\u00b73 + 2\u00b73 = 12\n\ndef",
        "answer": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a",
        "difficulty": "interview"
    },
    {
        "task_id": 2563,
        "prompt": "Complete the Python function given the prompt below:You are given a huge integer $a$ consisting of $n$ digits ($n$ is between $1$ and $3 \\cdot 10^5$, inclusive). It may contain leading zeros.\nYou can swap two digits on adjacent (neighboring) positions if the swapping digits are of different parity (that is, they have different remainders when divided by $2$). \nFor example, if $a = 032867235$ you can get the following integers in a single operation:   $302867235$ if you swap the first and the second digits;  $023867235$ if you swap the second and the third digits;  $032876235$ if you swap the fifth and the sixth digits;  $032862735$ if you swap the sixth and the seventh digits;  $032867325$ if you swap the seventh and the eighth digits. \nNote, that you can't swap digits on positions $2$ and $4$ because the positions are not adjacent. Also, you can't swap digits on positions $3$ and $4$ because the digits have the same parity.\nYou can perform any number (possibly, zero) of such operations.\nFind the minimum integer you can obtain.\nNote that the resulting integer also may contain leading zeros.\n-----Input-----\nThe first line contains one integer $t$ ($1 \\le t \\le 10^4$) \u2014 the number of test cases in the input.\nThe only line of each test case contains the integer $a$, its length $n$ is between $1$ and $3 \\cdot 10^5$, inclusive.\nIt is guaranteed that the sum of all values $n$ does not exceed $3 \\cdot 10^5$.\n-----Output-----\nFor each test case print line \u2014 the minimum integer you can obtain.\n-----Example-----\nInput\n3\n0709\n1337\n246432\nOutput\n0079\n1337\n234642\n-----Note-----\nIn the first test case, you can perform the following sequence of operations (the pair of swapped digits is highlighted): $0 \\underline{\\textbf{70}} 9 \\rightarrow 0079$.\nIn the second test case, the initial integer is optimal. \nIn the third test case you can perform the following sequence of operations: $246 \\underline{\\textbf{43}} 2 \\rightarrow 24 \\underline{\\textbf{63}}42 \\rightarrow 2 \\underline{\\textbf{43}} 642 \\rightarrow 234642$.\n\ndef",
        "answer": "def solve(a):\n    b = a\n    for i in range(len(a)):\n        if a[i] == '0':\n            continue\n        if a[i] == a[(i+1)%len(a)]:\n            b = b[:i] + '0' + b[i+1:]\n    return b",
        "difficulty": "interview"
    },
    {
        "task_id": 2564,
        "prompt": "Complete the Python function given the prompt below:Leo has developed a new programming language C+=. In C+=, integer variables can only be changed with a \"+=\" operation that adds the right-hand side value to the left-hand side variable. For example, performing \"a += b\" when a = $2$, b = $3$ changes the value of a to $5$ (the value of b does not change).\nIn a prototype program Leo has two integer variables a and b, initialized with some positive values. He can perform any number of operations \"a += b\" or \"b += a\". Leo wants to test handling large integers, so he wants to make the value of either a or b strictly greater than a given value $n$. What is the smallest number of operations he has to perform?\n-----Input-----\nThe first line contains a single integer $T$ ($1 \\leq T \\leq 100$)\u00a0\u2014 the number of test cases.\nEach of the following $T$ lines describes a single test case, and contains three integers $a, b, n$ ($1 \\leq a, b \\leq n \\leq 10^9$)\u00a0\u2014 initial values of a and b, and the value one of the variables has to exceed, respectively.\n-----Output-----\nFor each test case print a single integer\u00a0\u2014 the smallest number of operations needed. Separate answers with line breaks.\n-----Example-----\nInput\n2\n1 2 3\n5 4 100\nOutput\n2\n7\n-----Note-----\nIn the first case we cannot make a variable exceed $3$ in one operation. One way of achieving this in two operations is to perform \"b += a\" twice.\n\ndef",
        "answer": "def solution(a, b, n):\n    # Write your code here\n    count = 0\n    while a < n:\n        a += b\n        count += 1\n    return count",
        "difficulty": "interview"
    },
    {
        "task_id": 2565,
        "prompt": "Complete the Python function given the prompt below:You are given two sequences $a_1, a_2, \\dots, a_n$ and $b_1, b_2, \\dots, b_n$. Each element of both sequences is either $0$, $1$ or $2$. The number of elements $0$, $1$, $2$ in the sequence $a$ is $x_1$, $y_1$, $z_1$ respectively, and the number of elements $0$, $1$, $2$ in the sequence $b$ is $x_2$, $y_2$, $z_2$ respectively.\nYou can rearrange the elements in both sequences $a$ and $b$ however you like. After that, let's define a sequence $c$ as follows:\n$c_i = \\begin{cases} a_i b_i & \\mbox{if }a_i > b_i \\\\ 0 & \\mbox{if }a_i = b_i \\\\ -a_i b_i & \\mbox{if }a_i < b_i \\end{cases}$\nYou'd like to make $\\sum_{i=1}^n c_i$ (the sum of all elements of the sequence $c$) as large as possible. What is the maximum possible sum?\n-----Input-----\nThe first line contains one integer $t$ ($1 \\le t \\le 10^4$)\u00a0\u2014 the number of test cases.\nEach test case consists of two lines. The first line of each test case contains three integers $x_1$, $y_1$, $z_1$ ($0 \\le x_1, y_1, z_1 \\le 10^8$)\u00a0\u2014 the number of $0$-s, $1$-s and $2$-s in the sequence $a$.\nThe second line of each test case also contains three integers $x_2$, $y_2$, $z_2$ ($0 \\le x_2, y_2, z_2 \\le 10^8$; $x_1 + y_1 + z_1 = x_2 + y_2 + z_2 > 0$)\u00a0\u2014 the number of $0$-s, $1$-s and $2$-s in the sequence $b$.\n-----Output-----\nFor each test case, print the maximum possible sum of the sequence $c$.\n-----Example-----\nInput\n3\n2 3 2\n3 3 1\n4 0 1\n2 3 0\n0 0 1\n0 0 1\nOutput\n4\n2\n0\n-----Note-----\nIn the first sample, one of the optimal solutions is:\n$a = \\{2, 0, 1, 1, 0, 2, 1\\}$\n$b = \\{1, 0, 1, 0, 2, 1, 0\\}$\n$c = \\{2, 0, 0, 0, 0, 2, 0\\}$\nIn the second sample, one of the optimal solutions is:\n$a = \\{0, 2, 0, 0, 0\\}$\n$b = \\{1, 1, 0, 1, 0\\}$\n$c = \\{0, 2, 0, 0, 0\\}$\nIn the third sample, the only possible solution is:\n$a = \\{2\\}$\n$b = \\{2\\}$\n$c = \\{0\\}$\n\ndef",
        "answer": "def solution(a, b):\n    c = [0] * len(a)\n    for i in range(len(a)):\n        if a[i] > b[i]:\n            c[i] = a[i] * b[i]\n        elif a[i] == b[i]:\n            c[i] = 0\n        else:\n            c[i] = -a[i] * b[i]\n    return sum(c)",
        "difficulty": "interview"
    },
    {
        "task_id": 2566,
        "prompt": "Complete the Python function given the prompt below:Berland State University invites people from all over the world as guest students. You can come to the capital of Berland and study with the best teachers in the country.\nBerland State University works every day of the week, but classes for guest students are held on the following schedule. You know the sequence of seven integers $a_1, a_2, \\dots, a_7$ ($a_i = 0$ or $a_i = 1$):  $a_1=1$ if and only if there are classes for guest students on Sundays;  $a_2=1$ if and only if there are classes for guest students on Mondays; ...   $a_7=1$ if and only if there are classes for guest students on Saturdays. \nThe classes for guest students are held in at least one day of a week.\nYou want to visit the capital of Berland and spend the minimum number of days in it to study $k$ days as a guest student in Berland State University. Write a program to find the length of the shortest continuous period of days to stay in the capital to study exactly $k$ days as a guest student.\n-----Input-----\nThe first line of the input contains integer $t$ ($1 \\le t \\le 10\\,000$) \u2014 the number of test cases to process. For each test case independently solve the problem and print the answer. \nEach test case consists of two lines. The first of them contains integer $k$ ($1 \\le k \\le 10^8$) \u2014 the required number of days to study as a guest student. The second line contains exactly seven integers $a_1, a_2, \\dots, a_7$ ($a_i = 0$ or $a_i = 1$) where $a_i=1$ if and only if classes for guest students are held on the $i$-th day of a week.\n-----Output-----\nPrint $t$ lines, the $i$-th line should contain the answer for the $i$-th test case \u2014 the length of the shortest continuous period of days you need to stay to study exactly $k$ days as a guest student.\n-----Example-----\nInput\n3\n2\n0 1 0 0 0 0 0\n100000000\n1 0 0 0 1 0 1\n1\n1 0 0 0 0 0 0\nOutput\n8\n233333332\n1\n-----Note-----\nIn the first test case you must arrive to the capital of Berland on Monday, have classes on this day, spend a week until next Monday and have classes on the next Monday. In total you need to spend $8$ days in the capital of Berland.\n\ndef",
        "answer": "def solve(k):\n    days = [0] * 7\n    for i in range(7):\n        if (i + 1) % 7 == 0:\n            days[i] = 1\n    for i in range(7, len(days)):\n        if (i + 1) % 7 == 0:\n            days[i] = 1\n    days = days[:k]\n    return sum(days)",
        "difficulty": "interview"
    },
    {
        "task_id": 2567,
        "prompt": "Complete the Python function given the prompt below:A binary string is a string where each character is either 0 or 1. Two binary strings $a$ and $b$ of equal length are similar, if they have the same character in some position (there exists an integer $i$ such that $a_i = b_i$). For example:  10010 and 01111 are similar (they have the same character in position $4$);  10010 and 11111 are similar;  111 and 111 are similar;  0110 and 1001 are not similar. \nYou are given an integer $n$ and a binary string $s$ consisting of $2n-1$ characters. Let's denote $s[l..r]$ as the contiguous substring of $s$ starting with $l$-th character and ending with $r$-th character (in other words, $s[l..r] = s_l s_{l + 1} s_{l + 2} \\dots s_r$).\nYou have to construct a binary string $w$ of length $n$ which is similar to all of the following strings: $s[1..n]$, $s[2..n+1]$, $s[3..n+2]$,..., $s[n..2n-1]$.\n-----Input-----\nThe first line contains a single integer $t$ ($1 \\le t \\le 1000$)\u00a0\u2014 the number of test cases.\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 50$).\nThe second line of each test case contains the binary string $s$ of length $2n - 1$. Each character $s_i$ is either 0 or 1.\n-----Output-----\nFor each test case, print the corresponding binary string $w$ of length $n$. If there are multiple such strings \u2014 print any of them. It can be shown that at least one string $w$ meeting the constraints always exists.\n-----Example-----\nInput\n4\n1\n1\n3\n00000\n4\n1110000\n2\n101\nOutput\n1\n000\n1010\n00\n-----Note-----\nThe explanation of the sample case (equal characters in equal positions are bold):\nThe first test case:   $\\mathbf{1}$ is similar to $s[1..1] = \\mathbf{1}$. \nThe second test case:   $\\mathbf{000}$ is similar to $s[1..3] = \\mathbf{000}$;  $\\mathbf{000}$ is similar to $s[2..4] = \\mathbf{000}$;  $\\mathbf{000}$ is similar to $s[3..5] = \\mathbf{000}$. \nThe third test case:   $\\mathbf{1}0\\mathbf{10}$ is similar to $s[1..4] = \\mathbf{1}1\\mathbf{10}$;  $\\mathbf{1}01\\mathbf{0}$ is similar to $s[2..5] = \\mathbf{1}10\\mathbf{0}$;  $\\mathbf{10}1\\mathbf{0}$ is similar to $s[3..6] = \\mathbf{10}0\\mathbf{0}$;  $1\\mathbf{0}1\\mathbf{0}$ is similar to $s[4..7] = 0\\mathbf{0}0\\mathbf{0}$. \nThe fourth test case:   $0\\mathbf{0}$ is similar to $s[1..2] = 1\\mathbf{0}$;  $\\mathbf{0}0$ is similar to $s[2..3] = \\mathbf{0}1$.\n\ndef",
        "answer": "def similar_strings(n, s):\n    # your code here\n    return",
        "difficulty": "interview"
    },
    {
        "task_id": 2568,
        "prompt": "Complete the Python function given the prompt below:You are given a string $s$ consisting only of characters + and -. You perform some process with this string. This process can be described by the following pseudocode: res = 0\nfor init = 0 to inf\n    cur = init\n    ok = true\n    for i = 1 to |s|\n        res = res + 1\n        if s[i] == '+'\n            cur = cur + 1\n        else\n            cur = cur - 1\n        if cur < 0\n            ok = false\n            break\n    if ok\n        break\nNote that the $inf$ denotes infinity, and the characters of the string are numbered from $1$ to $|s|$.\nYou have to calculate the value of the $res$ after the process ends.\n-----Input-----\nThe first line contains one integer $t$ ($1 \\le t \\le 1000$) \u2014 the number of test cases.\nThe only lines of each test case contains string $s$ ($1 \\le |s| \\le 10^6$) consisting only of characters + and -.\nIt's guaranteed that sum of $|s|$ over all test cases doesn't exceed $10^6$.\n-----Output-----\nFor each test case print one integer \u2014 the value of the $res$ after the process ends.\n-----Example-----\nInput\n3\n--+-\n---\n++--+-\nOutput\n7\n9\n6\n\ndef",
        "answer": "def solve():\n    t = int(input())\n    for _ in range(t):\n        s = input()\n        res = 0\n        for i in range(len(s)):\n            if s[i] == '+':\n                res += 1\n            else:\n                res -= 1\n            if res < 0:\n                break\n        print(res)\nsolve()\n",
        "difficulty": "interview"
    },
    {
        "task_id": 2569,
        "prompt": "Complete the Python function given the prompt below:Lee tried so hard to make a good div.2 D problem to balance his recent contest, but it still doesn't feel good at all. Lee invented it so tediously slow that he managed to develop a phobia about div.2 D problem setting instead. And now he is hiding behind the bushes...\nLet's define a Rooted Dead Bush (RDB) of level $n$ as a rooted tree constructed as described below.\nA rooted dead bush of level $1$ is a single vertex. To construct an RDB of level $i$ we, at first, construct an RDB of level $i-1$, then for each vertex $u$:   if $u$ has no children then we will add a single child to it;  if $u$ has one child then we will add two children to it;  if $u$ has more than one child, then we will skip it. \n [Image] Rooted Dead Bushes of level $1$, $2$ and $3$. \nLet's define a claw as a rooted tree with four vertices: one root vertex (called also as center) with three children. It looks like a claw:\n [Image] The center of the claw is the vertex with label $1$. \nLee has a Rooted Dead Bush of level $n$. Initially, all vertices of his RDB are green.\nIn one move, he can choose a claw in his RDB, if all vertices in the claw are green and all vertices of the claw are children of its center, then he colors the claw's vertices in yellow.\nHe'd like to know the maximum number of yellow vertices he can achieve. Since the answer might be very large, print it modulo $10^9+7$.\n-----Input-----\nThe first line contains one integer $t$ ($1 \\le t \\le 10^4$)\u00a0\u2014 the number of test cases.\nNext $t$ lines contain test cases\u00a0\u2014 one per line.\nThe first line of each test case contains one integer $n$ ($1 \\le n \\le 2 \\cdot 10^6$)\u00a0\u2014 the level of Lee's RDB.\n-----Output-----\nFor each test case, print a single integer\u00a0\u2014 the maximum number of yellow vertices Lee can make modulo $10^9 + 7$.\n-----Example-----\nInput\n7\n1\n2\n3\n4\n5\n100\n2000000\nOutput\n0\n0\n4\n4\n12\n990998587\n804665184\n-----Note-----\nIt's easy to see that the answer for RDB of level $1$ or $2$ is $0$.\nThe answer for RDB of level $3$ is $4$ since there is only one claw we can choose: $\\{1, 2, 3, 4\\}$.\nThe answer for RDB of level $4$ is $4$ since we can choose either single claw $\\{1, 3, 2, 4\\}$ or single claw $\\{2, 7, 5, 6\\}$. There are no other claws in the RDB of level $4$ (for example, we can't choose $\\{2, 1, 7, 6\\}$, since $1$ is not a child of center vertex $2$).\n $\\therefore$ Rooted Dead Bush of level 4.\n\ndef",
        "answer": "def RDB(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return RDB(n-1) + RDB(n-2)",
        "difficulty": "interview"
    },
    {
        "task_id": 2570,
        "prompt": "Complete the Python function given the prompt below:You are given two arrays $a$ and $b$, each consisting of $n$ positive integers, and an integer $x$. Please determine if one can rearrange the elements of $b$ so that $a_i + b_i \\leq x$ holds for each $i$ ($1 \\le i \\le n$).\n-----Input-----\nThe first line of input contains one integer $t$ ($1 \\leq t \\leq 100$)\u00a0\u2014 the number of test cases. $t$ blocks follow, each describing an individual test case.\nThe first line of each test case contains two integers $n$ and $x$ ($1 \\leq n \\leq 50$; $1 \\leq x \\leq 1000$)\u00a0\u2014 the length of arrays $a$ and $b$, and the parameter $x$, described in the problem statement.\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_1 \\le a_2 \\le \\dots \\le a_n \\leq x$)\u00a0\u2014 the elements of array $a$ in non-descending order.\nThe third line of each test case contains $n$ integers $b_1, b_2, \\ldots, b_n$ ($1 \\leq b_1 \\le b_2 \\le \\dots \\le b_n \\leq x$)\u00a0\u2014 the elements of array $b$ in non-descending order.\nTest cases are separated by a blank line.\n-----Output-----\nFor each test case print Yes if one can rearrange the corresponding array $b$ so that $a_i + b_i \\leq x$ holds for each $i$ ($1 \\le i \\le n$) or No otherwise.\nEach character can be printed in any case.\n-----Example-----\nInput\n4\n3 4\n1 2 3\n1 1 2\n2 6\n1 4\n2 5\n4 4\n1 2 3 4\n1 2 3 4\n1 5\n5\n5\nOutput\nYes\nYes\nNo\nNo\n-----Note-----\nIn the first test case, one can rearrange $b$ so it'll look like $[1, 2, 1]$. In this case, $1 + 1 \\leq 4$; $2 + 2 \\leq 4$; $3 + 1 \\leq 4$.\nIn the second test case, one can set $b$ to $[5, 2]$, then $1 + 5 \\leq 6$; $4 + 2 \\leq 6$.\nIn the third test case, no matter how one shuffles array $b$, $a_4 + b_4 = 4 + b_4 > 4$.\nIn the fourth test case, there is only one rearrangement of array $b$ and it doesn't satisfy the condition since $5 + 5 > 5$.\n\ndef",
        "answer": "def rearrange(a, b, x):\n    a.sort()\n    b.sort()\n    for i in range(len(a)):\n        if a[i] + b[i] > x:\n            return \"No\"\n    return \"Yes\"",
        "difficulty": "interview"
    },
    {
        "task_id": 2571,
        "prompt": "Complete the Python function given the prompt below:Naruto has sneaked into the Orochimaru's lair and is now looking for Sasuke. There are $T$ rooms there. Every room has a door into it, each door can be described by the number $n$ of seals on it and their integer energies $a_1$, $a_2$,..., $a_n$. All energies $a_i$ are nonzero and do not exceed $100$ by absolute value. Also, $n$ is even.\nIn order to open a door, Naruto must find such $n$ seals with integer energies $b_1$, $b_2$,..., $b_n$ that the following equality holds: $a_{1} \\cdot b_{1} + a_{2} \\cdot b_{2} +... + a_{n} \\cdot b_{n} = 0$. All $b_i$ must be nonzero as well as $a_i$ are, and also must not exceed $100$ by absolute value. Please find required seals for every room there.\n-----Input-----\nThe first line contains the only integer $T$ ($1 \\leq T \\leq 1000$) standing for the number of rooms in the Orochimaru's lair. The other lines contain descriptions of the doors.\nEach description starts with the line containing the only even integer $n$ ($2 \\leq n \\leq 100$) denoting the number of seals.\nThe following line contains the space separated sequence of nonzero integers $a_1$, $a_2$,..., $a_n$ ($|a_{i}| \\leq 100$, $a_{i} \\neq 0$) denoting the energies of seals.\n-----Output-----\nFor each door print a space separated sequence of nonzero integers $b_1$, $b_2$,..., $b_n$ ($|b_{i}| \\leq 100$, $b_{i} \\neq 0$) denoting the seals that can open the door. If there are multiple valid answers, print any. It can be proven that at least one answer always exists.\n-----Example-----\nInput\n2\n2\n1 100\n4\n1 2 3 6\nOutput\n-100 1\n1 1 1 -1\n-----Note-----\nFor the first door Naruto can use energies $[-100, 1]$. The required equality does indeed hold: $1 \\cdot (-100) + 100 \\cdot 1 = 0$.\nFor the second door Naruto can use, for example, energies $[1, 1, 1, -1]$. The required equality also holds: $1 \\cdot 1 + 2 \\cdot 1 + 3 \\cdot 1 + 6 \\cdot (-1) = 0$.\n\ndef",
        "answer": "def solve(T, n, a):\n    b = [0] * n\n    for i in range(n):\n        b[i] = -a[i] // n\n    return b",
        "difficulty": "interview"
    },
    {
        "task_id": 2572,
        "prompt": "Complete the Python function given the prompt below:A matrix of size $n \\times m$ is called nice, if all rows and columns of the matrix are palindromes. A sequence of integers $(a_1, a_2, \\dots, a_k)$ is a palindrome, if for any integer $i$ ($1 \\le i \\le k$) the equality $a_i = a_{k - i + 1}$ holds.\nSasha owns a matrix $a$ of size $n \\times m$. In one operation he can increase or decrease any number in the matrix by one. Sasha wants to make the matrix nice. He is interested what is the minimum number of operations he needs.\nHelp him!\n-----Input-----\nThe first line contains a single integer $t$\u00a0\u2014 the number of test cases ($1 \\le t \\le 10$). The $t$ tests follow.\nThe first line of each test contains two integers $n$ and $m$ ($1 \\le n, m \\le 100$)\u00a0\u2014 the size of the matrix.\nEach of the next $n$ lines contains $m$ integers $a_{i, j}$ ($0 \\le a_{i, j} \\le 10^9$)\u00a0\u2014 the elements of the matrix.\n-----Output-----\nFor each test output the smallest number of operations required to make the matrix nice.\n-----Example-----\nInput\n2\n4 2\n4 2\n2 4\n4 2\n2 4\n3 4\n1 2 3 4\n5 6 7 8\n9 10 11 18\nOutput\n8\n42\n-----Note-----\nIn the first test case we can, for example, obtain the following nice matrix in $8$ operations:\n2 2\n4 4\n4 4\n2 2\nIn the second test case we can, for example, obtain the following nice matrix in $42$ operations:\n5 6 6 5\n6 6 6 6\n5 6 6 5\n\ndef",
        "answer": "def matrixNice(n, m, a):\n    # Write your code here\n    pass\n",
        "difficulty": "interview"
    },
    {
        "task_id": 2573,
        "prompt": "Complete the Python function given the prompt below:You are given a chessboard consisting of $n$ rows and $n$ columns. Rows are numbered from bottom to top from $1$ to $n$. Columns are numbered from left to right from $1$ to $n$. The cell at the intersection of the $x$-th column and the $y$-th row is denoted as $(x, y)$. Furthermore, the $k$-th column is a special column. \nInitially, the board is empty. There are $m$ changes to the board. During the $i$-th change one pawn is added or removed from the board. The current board is good if we can move all pawns to the special column by the followings rules:  Pawn in the cell $(x, y)$ can be moved to the cell $(x, y + 1)$, $(x - 1, y + 1)$ or $(x + 1, y + 1)$;  You can make as many such moves as you like;  Pawns can not be moved outside the chessboard;  Each cell can not contain more than one pawn. \nThe current board may not always be good. To fix it, you can add new rows to the board. New rows are added at the top, i. e. they will have numbers $n+1, n+2, n+3, \\dots$.\nAfter each of $m$ changes, print one integer \u2014 the minimum number of rows which you have to add to make the board good.\n-----Input-----\nThe first line contains three integers $n$, $k$ and $m$ ($1 \\le n, m \\le 2 \\cdot 10^5; 1 \\le k \\le n$) \u2014 the size of the board, the index of the special column and the number of changes respectively.\nThen $m$ lines follow. The $i$-th line contains two integers $x$ and $y$ ($1 \\le x, y \\le n$) \u2014 the index of the column and the index of the row respectively. If there is no pawn in the cell $(x, y)$, then you add a pawn to this cell, otherwise \u2014 you remove the pawn from this cell.\n-----Output-----\nAfter each change print one integer \u2014 the minimum number of rows which you have to add to make the board good.\n-----Example-----\nInput\n5 3 5\n4 4\n3 5\n2 4\n3 4\n3 5\nOutput\n0\n1\n2\n2\n1\n\ndef",
        "answer": "def solution(n, k, m):\n    # write your code in Python 2.7\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2574,
        "prompt": "Complete the Python function given the prompt below:You are given an array of integers $a_1,a_2,\\ldots,a_n$. Find the maximum possible value of $a_ia_ja_ka_la_t$ among all five indices $(i, j, k, l, t)$ ($i<j<k<l<t$).\n-----Input-----\nThe input consists of multiple test cases. The first line contains an integer $t$ ($1\\le t\\le 2 \\cdot 10^4$) \u2014 the number of test cases. The description of the test cases follows.\nThe first line of each test case contains a single integer $n$ ($5\\le n\\le 10^5$) \u2014 the size of the array.\nThe second line of each test case contains $n$ integers $a_1,a_2,\\ldots,a_n$ ($-3\\times 10^3\\le a_i\\le 3\\times 10^3$) \u2014 given array.\nIt's guaranteed that the sum of $n$ over all test cases does not exceed $2\\cdot 10^5$.\n-----Output-----\nFor each test case, print one integer \u2014 the answer to the problem.\n-----Example-----\nInput\n4\n5\n-1 -2 -3 -4 -5\n6\n-1 -2 -3 1 2 -1\n6\n-1 0 0 0 -1 -1\n6\n-9 -7 -5 -3 -2 1\nOutput\n-120\n12\n0\n945\n-----Note-----\nIn the first test case, choosing $a_1,a_2,a_3,a_4,a_5$ is a best choice: $(-1)\\cdot (-2) \\cdot (-3)\\cdot (-4)\\cdot (-5)=-120$.\nIn the second test case, choosing $a_1,a_2,a_3,a_5,a_6$ is a best choice: $(-1)\\cdot (-2) \\cdot (-3)\\cdot 2\\cdot (-1)=12$.\nIn the third test case, choosing $a_1,a_2,a_3,a_4,a_5$ is a best choice: $(-1)\\cdot 0\\cdot 0\\cdot 0\\cdot (-1)=0$.\nIn the fourth test case, choosing $a_1,a_2,a_3,a_4,a_6$ is a best choice: $(-9)\\cdot (-7) \\cdot (-5)\\cdot (-3)\\cdot 1=945$.\n\ndef",
        "answer": "def max_product(arr):\n    max_product = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                for l in range(k+1, len(arr)):\n                    for t in range(l+1, len(arr)):\n                        if arr[i]*arr[j]*arr[k]*arr[l]*arr[t] > max_product:\n                            max_product = arr[i]*arr[j]*arr[k]*arr[l]*arr[t]\n    return max_product",
        "difficulty": "interview"
    },
    {
        "task_id": 2575,
        "prompt": "Complete the Python function given the prompt below:Emuskald needs a fence around his farm, but he is too lazy to build it himself. So he purchased a fence-building robot.\nHe wants the fence to be a regular polygon. The robot builds the fence along a single path, but it can only make fence corners at a single angle a.\nWill the robot be able to build the fence Emuskald wants? In other words, is there a regular polygon which angles are equal to a?\n-----Input-----\nThe first line of input contains an integer t (0 < t < 180) \u2014 the number of tests. Each of the following t lines contains a single integer a (0 < a < 180) \u2014 the angle the robot can make corners at measured in degrees.\n-----Output-----\nFor each test, output on a single line \"YES\" (without quotes), if the robot can build a fence Emuskald wants, and \"NO\" (without quotes), if it is impossible.\n-----Examples-----\nInput\n3\n30\n60\n90\nOutput\nNO\nYES\nYES\n-----Note-----\nIn the first test case, it is impossible to build the fence, since there is no regular polygon with angle $30^{\\circ}$.\nIn the second test case, the fence is a regular triangle, and in the last test case \u2014 a square.\n\ndef",
        "answer": "def is_regular_polygon(a):\n    return a % 180 == 0",
        "difficulty": "interview"
    },
    {
        "task_id": 2576,
        "prompt": "Complete the Python function given the prompt below:There is a famous olympiad, which has more than a hundred participants. The Olympiad consists of two stages: the elimination stage, and the final stage. At least a hundred participants will advance to the final stage. The elimination stage in turn consists of two contests.\nA result of the elimination stage is the total score in two contests, but, unfortunately, the jury lost the final standings and has only standings for the first and for the second contest separately. \nIn each contest, the participants are ranked by their point score in non-increasing order. When two participants have a tie (earned the same score), they are ranked by their passport number (in accordance with local regulations, all passport numbers are distinct). \nIn the first contest, the participant on the 100-th place scored $a$ points. Also, the jury checked all participants from the 1-st to the 100-th place (inclusive) in the first contest and found out that all of them have at least $b$ points in the second contest.\nSimilarly, for the second contest, the participant on the 100-th place has $c$ points. And the jury checked that all the participants from the 1-st to the 100-th place (inclusive) have at least $d$ points in the first contest.\nAfter two contests, all participants are ranked by their total score in two contests in non-increasing order. When participants have the same total score, tie-breaking with passport numbers is used. The cutoff score to qualify to the final stage is the total score of the participant on the 100-th place.\nGiven integers $a$, $b$, $c$, $d$, please help the jury determine the smallest possible value of the cutoff score.\n-----Input-----\nYou need to process $t$ test cases.\nThe first line contains an integer $t$ ($1 \\leq t \\leq 3025$)\u00a0\u2014 the number of test cases. Then descriptions of $t$ test cases follow.\nThe first line of each test case contains four integers $a$, $b$, $c$, $d$ ($0 \\le a,\\,b,\\,c,\\,d \\le 9$; $d \\leq a$; $b \\leq c$). \nOne can show that for any test case satisfying the constraints above, there is at least one olympiad scenario possible.\n-----Output-----\nFor each test case print a single integer\u00a0\u2014 the smallest possible cutoff score in some olympiad scenario satisfying the given information.\n-----Example-----\nInput\n2\n1 2 2 1\n4 8 9 2\nOutput\n3\n12\n-----Note-----\nFor the first test case, consider the following olympiad scenario: there are $101$ participants in the elimination stage, each having $1$ point for the first contest and $2$ points for the second contest. Hence the total score of the participant on the 100-th place is $3$.\nFor the second test case, consider the following olympiad scenario:   there are $50$ participants with points $5$ and $9$ for the first and second contest respectively;  $50$ participants with points $4$ and $8$ for the first and second contest respectively;  and $50$ participants with points $2$ and $9$ for the first and second contest respectively.  Hence the total point score of the participant on the 100-th place is $12$.\n\ndef",
        "answer": "def olympiad(a, b, c, d):\n    return a + b + c + d",
        "difficulty": "interview"
    },
    {
        "task_id": 2577,
        "prompt": "Complete the Python function given the prompt below:Artem is building a new robot. He has a matrix $a$ consisting of $n$ rows and $m$ columns. The cell located on the $i$-th row from the top and the $j$-th column from the left has a value $a_{i,j}$ written in it. \nIf two adjacent cells contain the same value, the robot will break. A matrix is called good if no two adjacent cells contain the same value, where two cells are called adjacent if they share a side. \nArtem wants to increment the values in some cells by one to make $a$ good.\nMore formally, find a good matrix $b$ that satisfies the following condition\u00a0\u2014   For all valid ($i,j$), either $b_{i,j} = a_{i,j}$ or $b_{i,j} = a_{i,j}+1$. \nFor the constraints of this problem, it can be shown that such a matrix $b$ always exists. If there are several such tables, you can output any of them. Please note that you do not have to minimize the number of increments.\n-----Input-----\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10$). Description of the test cases follows.\nThe first line of each test case contains two integers $n, m$ ($1 \\le n \\le 100$, $1 \\le m \\le 100$) \u00a0\u2014 the number of rows and columns, respectively.\nThe following $n$ lines each contain $m$ integers. The $j$-th integer in the $i$-th line is $a_{i,j}$ ($1 \\leq a_{i,j} \\leq 10^9$).\n-----Output-----\nFor each case, output $n$ lines each containing $m$ integers. The $j$-th integer in the $i$-th line is $b_{i,j}$.\n-----Example-----\nInput\n3\n3 2\n1 2\n4 5\n7 8\n2 2\n1 1\n3 3\n2 2\n1 3\n2 2\nOutput\n1 2\n5 6\n7 8\n2 1\n4 3\n2 4\n3 2\n-----Note-----\nIn all the cases, you can verify that no two adjacent cells have the same value and that $b$ is the same as $a$ with some values incremented by one.\n\ndef",
        "answer": "def solution(n, m, a):\n    # Write your code here\n    b = [[0 for j in range(m)] for i in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == a[i][j-1]:\n                b[i][j] = a[i][j] + 1\n            else:\n                b[i][j] = a[i][j]\n    return b\n",
        "difficulty": "interview"
    },
    {
        "task_id": 2578,
        "prompt": "Complete the Python function given the prompt below:In some social network, there are $n$ users communicating with each other in $m$ groups of friends. Let's analyze the process of distributing some news between users.\nInitially, some user $x$ receives the news from some source. Then he or she sends the news to his or her friends (two users are friends if there is at least one group such that both of them belong to this group). Friends continue sending the news to their friends, and so on. The process ends when there is no pair of friends such that one of them knows the news, and another one doesn't know.\nFor each user $x$ you have to determine what is the number of users that will know the news if initially only user $x$ starts distributing it. \n-----Input-----\nThe first line contains two integers $n$ and $m$ ($1 \\le n, m \\le 5 \\cdot 10^5$) \u2014 the number of users and the number of groups of friends, respectively.\nThen $m$ lines follow, each describing a group of friends. The $i$-th line begins with integer $k_i$ ($0 \\le k_i \\le n$) \u2014 the number of users in the $i$-th group. Then $k_i$ distinct integers follow, denoting the users belonging to the $i$-th group.\nIt is guaranteed that $\\sum \\limits_{i = 1}^{m} k_i \\le 5 \\cdot 10^5$.\n-----Output-----\nPrint $n$ integers. The $i$-th integer should be equal to the number of users that will know the news if user $i$ starts distributing it.\n-----Example-----\nInput\n7 5\n3 2 5 4\n0\n2 1 2\n1 1\n2 6 7\nOutput\n4 4 1 4 4 2 2\n\ndef",
        "answer": "def solve(n, m, groups):\n    # your code here\n    return",
        "difficulty": "interview"
    },
    {
        "task_id": 2579,
        "prompt": "Complete the Python function given the prompt below:Kirill plays a new computer game. He came to the potion store where he can buy any potion. Each potion is characterized by two integers\u00a0\u2014 amount of experience and cost. The efficiency of a potion is the ratio of the amount of experience to the cost. Efficiency may be a non-integer number.\nFor each two integer numbers a and b such that l \u2264 a \u2264 r and x \u2264 b \u2264 y there is a potion with experience a and cost b in the store (that is, there are (r - l + 1)\u00b7(y - x + 1) potions).\nKirill wants to buy a potion which has efficiency k. Will he be able to do this?\n-----Input-----\nFirst string contains five integer numbers l, r, x, y, k (1 \u2264 l \u2264 r \u2264 10^7, 1 \u2264 x \u2264 y \u2264 10^7, 1 \u2264 k \u2264 10^7).\n-----Output-----\nPrint \"YES\" without quotes if a potion with efficiency exactly k can be bought in the store and \"NO\" without quotes otherwise.\nYou can output each of the letters in any register.\n-----Examples-----\nInput\n1 10 1 10 1\nOutput\nYES\nInput\n1 5 6 10 1\nOutput\nNO\n\ndef",
        "answer": "def kirill_plays_new_computer_game():\n    l, r, x, y, k = map(int, input().split())\n    if l <= k <= r and x <= y:\n        print('YES')\n    else:\n        print('NO')",
        "difficulty": "interview"
    },
    {
        "task_id": 2580,
        "prompt": "Complete the Python function given the prompt below:You are given a tree that consists of $n$ nodes. You should label each of its $n-1$ edges with an integer in such way that satisfies the following conditions:   each integer must be greater than $0$;  the product of all $n-1$ numbers should be equal to $k$;  the number of $1$-s among all $n-1$ integers must be minimum possible. \nLet's define $f(u,v)$ as the sum of the numbers on the simple path from node $u$ to node $v$. Also, let $\\sum\\limits_{i=1}^{n-1} \\sum\\limits_{j=i+1}^n f(i,j)$ be a distribution index of the tree.\nFind the maximum possible distribution index you can get. Since answer can be too large, print it modulo $10^9 + 7$.\nIn this problem, since the number $k$ can be large, the result of the prime factorization of $k$ is given instead.\n-----Input-----\nThe first line contains one integer $t$ ($1 \\le t \\le 100$)\u00a0\u2014 the number of test cases.\nThe first line of each test case contains a single integer $n$ ($2 \\le n \\le 10^5$)\u00a0\u2014 the number of nodes in the tree.\nEach of the next $n-1$ lines describes an edge: the $i$-th line contains two integers $u_i$ and $v_i$ ($1 \\le u_i, v_i \\le n$; $u_i \\ne v_i$)\u00a0\u2014 indices of vertices connected by the $i$-th edge.\nNext line contains a single integer $m$ ($1 \\le m \\le 6 \\cdot 10^4$)\u00a0\u2014 the number of prime factors of $k$.\nNext line contains $m$ prime numbers $p_1, p_2, \\ldots, p_m$ ($2 \\le p_i < 6 \\cdot 10^4$) such that $k = p_1 \\cdot p_2 \\cdot \\ldots \\cdot p_m$.\nIt is guaranteed that the sum of $n$ over all test cases doesn't exceed $10^5$, the sum of $m$ over all test cases doesn't exceed $6 \\cdot 10^4$, and the given edges for each test cases form a tree.\n-----Output-----\nPrint the maximum distribution index you can get. Since answer can be too large, print it modulo $10^9+7$.\n-----Example-----\nInput\n3\n4\n1 2\n2 3\n3 4\n2\n2 2\n4\n3 4\n1 3\n3 2\n2\n3 2\n7\n6 1\n2 3\n4 6\n7 3\n5 1\n3 6\n4\n7 5 13 3\nOutput\n17\n18\n286\n-----Note-----\n In the first test case, one of the optimal ways is on the following image:\n [Image] \n In this case, $f(1,2)=1$, $f(1,3)=3$, $f(1,4)=5$, $f(2,3)=2$, $f(2,4)=4$, $f(3,4)=2$, so the sum of these $6$ numbers is $17$.\n In the second test case, one of the optimal ways is on the following image:\n [Image] \n In this case, $f(1,2)=3$, $f(1,3)=1$, $f(1,4)=4$, $f(2,3)=2$, $f(2,4)=5$, $f(3,4)=3$, so the sum of these $6$ numbers is $18$.\n\ndef",
        "answer": "def solution(n, edges, m, p):\n    # Write your code here",
        "difficulty": "interview"
    },
    {
        "task_id": 2581,
        "prompt": "Complete the Python function given the prompt below:Gargari is jealous that his friend Caisa won the game from the previous problem. He wants to prove that he is a genius.\nHe has a n \u00d7 n chessboard. Each cell of the chessboard has a number written on it. Gargari wants to place two bishops on the chessboard in such a way that there is no cell that is attacked by both of them. Consider a cell with number x written on it, if this cell is attacked by one of the bishops Gargari will get x dollars for it. Tell Gargari, how to place bishops on the chessboard to get maximum amount of money.\nWe assume a cell is attacked by a bishop, if the cell is located on the same diagonal with the bishop (the cell, where the bishop is, also considered attacked by it).\n-----Input-----\nThe first line contains a single integer n (2 \u2264 n \u2264 2000). Each of the next n lines contains n integers a_{ij} (0 \u2264 a_{ij} \u2264 10^9) \u2014 description of the chessboard.\n-----Output-----\nOn the first line print the maximal number of dollars Gargari will get. On the next line print four integers: x_1, y_1, x_2, y_2 (1 \u2264 x_1, y_1, x_2, y_2 \u2264 n), where x_{i} is the number of the row where the i-th bishop should be placed, y_{i} is the number of the column where the i-th bishop should be placed. Consider rows are numbered from 1 to n from top to bottom, and columns are numbered from 1 to n from left to right.\nIf there are several optimal solutions, you can print any of them.\n-----Examples-----\nInput\n4\n1 1 1 1\n2 1 1 0\n1 1 1 0\n1 0 0 1\nOutput\n12\n2 2 3 2\n\ndef",
        "answer": "def bishop_and_gargari(n):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2582,
        "prompt": "Complete the Python function given the prompt below:You are given a permutation $p$ of $n$ integers $1$, $2$,..., $n$ (a permutation is an array where each element from $1$ to $n$ occurs exactly once).\nLet's call some subsegment $p[l, r]$ of this permutation special if $p_l + p_r = \\max \\limits_{i = l}^{r} p_i$. Please calculate the number of special subsegments.\n-----Input-----\nThe first line contains one integer $n$ ($3 \\le n \\le 2 \\cdot 10^5$).\nThe second line contains $n$ integers $p_1$, $p_2$,..., $p_n$ ($1 \\le p_i \\le n$). All these integers are pairwise distinct.\n-----Output-----\nPrint the number of special subsegments of the given permutation.\n-----Examples-----\nInput\n5\n3 4 1 5 2\nOutput\n2\nInput\n3\n1 3 2\nOutput\n1\n-----Note-----\nSpecial subsegments in the first example are $[1, 5]$ and $[1, 3]$.\nThe only special subsegment in the second example is $[1, 3]$.\n\ndef",
        "answer": "def special_subsegments(n, p):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2583,
        "prompt": "Complete the Python function given the prompt below:Ashishgup and FastestFinger play a game. \nThey start with a number $n$ and play in turns. In each turn, a player can make any one of the following moves:  Divide $n$ by any of its odd divisors greater than $1$.  Subtract $1$ from $n$ if $n$ is greater than $1$. \nDivisors of a number include the number itself.\nThe player who is unable to make a move loses the game.\nAshishgup moves first. Determine the winner of the game if both of them play optimally.\n-----Input-----\nThe first line contains a single integer $t$ ($1 \\leq t \\leq 100$) \u00a0\u2014 the number of test cases. The description of the test cases follows.\nThe only line of each test case contains a single integer \u00a0\u2014 $n$ ($1 \\leq n \\leq 10^9$).\n-----Output-----\nFor each test case, print \"Ashishgup\" if he wins, and \"FastestFinger\" otherwise (without quotes).\n-----Example-----\nInput\n7\n1\n2\n3\n4\n5\n6\n12\nOutput\nFastestFinger\nAshishgup\nAshishgup\nFastestFinger\nAshishgup\nFastestFinger\nAshishgup\n-----Note-----\nIn the first test case, $n = 1$, Ashishgup cannot make a move. He loses.\nIn the second test case, $n = 2$, Ashishgup subtracts $1$ on the first move. Now $n = 1$, FastestFinger cannot make a move, so he loses.\nIn the third test case, $n = 3$, Ashishgup divides by $3$ on the first move. Now $n = 1$, FastestFinger cannot make a move, so he loses.\nIn the last test case, $n = 12$, Ashishgup divides it by $3$. Now $n = 4$, FastestFinger is forced to subtract $1$, and Ashishgup gets $3$, so he wins by dividing it by $3$.\n\ndef",
        "answer": "def play(n):\n    if n%2==0:\n        return \"Ashishgup\"\n    else:\n        return \"FastestFinger\"",
        "difficulty": "interview"
    },
    {
        "task_id": 2584,
        "prompt": "Complete the Python function given the prompt below:This is the easy version of this problem. The only difference is the constraint on $k$ \u2014 the number of gifts in the offer. In this version: $k=2$.\nVasya came to the store to buy goods for his friends for the New Year. It turned out that he was very lucky\u00a0\u2014 today the offer \"$k$ of goods for the price of one\" is held in store. Remember, that in this problem $k=2$.\nUsing this offer, Vasya can buy exactly $k$ of any goods, paying only for the most expensive of them. Vasya decided to take this opportunity and buy as many goods as possible for his friends with the money he has.\nMore formally, for each good, its price is determined by $a_i$\u00a0\u2014 the number of coins it costs. Initially, Vasya has $p$ coins. He wants to buy the maximum number of goods. Vasya can perform one of the following operations as many times as necessary:  Vasya can buy one good with the index $i$ if he currently has enough coins (i.e $p \\ge a_i$). After buying this good, the number of Vasya's coins will decrease by $a_i$, (i.e it becomes $p := p - a_i$).  Vasya can buy a good with the index $i$, and also choose exactly $k-1$ goods, the price of which does not exceed $a_i$, if he currently has enough coins (i.e $p \\ge a_i$). Thus, he buys all these $k$ goods, and his number of coins decreases by $a_i$ (i.e it becomes $p := p - a_i$). \nPlease note that each good can be bought no more than once.\nFor example, if the store now has $n=5$ goods worth $a_1=2, a_2=4, a_3=3, a_4=5, a_5=7$, respectively, $k=2$, and Vasya has $6$ coins, then he can buy $3$ goods. A good with the index $1$ will be bought by Vasya without using the offer and he will pay $2$ coins. Goods with the indices $2$ and $3$ Vasya will buy using the offer and he will pay $4$ coins. It can be proved that Vasya can not buy more goods with six coins.\nHelp Vasya to find out the maximum number of goods he can buy.\n-----Input-----\nThe first line contains one integer $t$ ($1 \\le t \\le 10^4$)\u00a0\u2014 the number of test cases in the test.\nThe next lines contain a description of $t$ test cases. \nThe first line of each test case contains three integers $n, p, k$ ($2 \\le n \\le 2 \\cdot 10^5$, $1 \\le p \\le 2\\cdot10^9$, $k=2$)\u00a0\u2014 the number of goods in the store, the number of coins Vasya has and the number of goods that can be bought by the price of the most expensive of them.\nThe second line of each test case contains $n$ integers $a_i$ ($1 \\le a_i \\le 10^4$)\u00a0\u2014 the prices of goods.\nIt is guaranteed that the sum of $n$ for all test cases does not exceed $2 \\cdot 10^5$. It is guaranteed that in this version of the problem $k=2$ for all test cases.\n-----Output-----\nFor each test case in a separate line print one integer $m$\u00a0\u2014 the maximum number of goods that Vasya can buy.\n-----Example-----\nInput\n6\n5 6 2\n2 4 3 5 7\n5 11 2\n2 4 3 5 7\n2 10000 2\n10000 10000\n2 9999 2\n10000 10000\n5 13 2\n8 2 8 2 5\n3 18 2\n1 2 3\nOutput\n3\n4\n2\n0\n4\n3\n\ndef",
        "answer": "def max_goods(n, p, k, a):\n    if k == 0:\n        return 0\n    if p < a[0]:\n        return 0\n    if p >= a[0] and p >= a[1]:\n        return 1\n    if p >= a[1]:\n        return 2\n    if p >= a[2]:\n        return 3\n    if p >= a[3]:\n        return 4\n    if p >= a[4]:\n        return 5\n    if p >= a[5]:\n        return 6\n    if p >= a[6]:\n        return 7\n    if p >= a[7]:\n        return 8\n    if p >= a[8]:\n        return 9\n    if p >= a[9]:\n        return 10\n    if p >= a[10]:\n        return 11\n    if p >= a[11]:\n        return 12\n    if p >= a[12]:\n        return 13\n    if p >= a[13]:\n        return 14\n    if p >= a[14]:\n        return 15\n    if p >= a[15]:\n        return 16\n    if p >= a[16]:\n        return 17\n    if p >= a[17]:\n        return 18\n    if p >= a[18]:\n        return 19\n    if p >= a[19]:\n        return 20\n    if p >= a[20]:\n        return 21\n    if p >= a[21]:\n        return 22\n    if p >= a[22]:\n        return 23\n    if p >= a[23]:\n        return 24\n    if p >= a[24]:\n        return 25\n    if p >= a[25]:\n        return 26\n    if p >= a[26]:\n        return 27\n    if p >= a[27]:\n        return 28\n    if p >= a[28]:\n        return 29\n    if p >= a[29]:\n        return 30\n    if p >= a[30]:\n        return 31\n    if p >= a[31]:\n        return 32\n    if p >= a[32]:\n        return 33\n    if p >= a[33]:\n        return 34\n    if p >= a[34]:\n        return 35\n",
        "difficulty": "interview"
    },
    {
        "task_id": 2585,
        "prompt": "Complete the Python function given the prompt below:Let's consider all integers in the range from $1$ to $n$ (inclusive).\nAmong all pairs of distinct integers in this range, find the maximum possible greatest common divisor of integers in pair. Formally, find the maximum value of $\\mathrm{gcd}(a, b)$, where $1 \\leq a < b \\leq n$.\nThe greatest common divisor, $\\mathrm{gcd}(a, b)$, of two positive integers $a$ and $b$ is the biggest integer that is a divisor of both $a$ and $b$.\n-----Input-----\nThe first line contains a single integer $t$ ($1 \\leq t \\leq 100$) \u00a0\u2014 the number of test cases. The description of the test cases follows.\nThe only line of each test case contains a single integer $n$ ($2 \\leq n \\leq 10^6$).\n-----Output-----\nFor each test case, output the maximum value of $\\mathrm{gcd}(a, b)$ among all $1 \\leq a < b \\leq n$.\n-----Example-----\nInput\n2\n3\n5\nOutput\n1\n2\n-----Note-----\nIn the first test case, $\\mathrm{gcd}(1, 2) = \\mathrm{gcd}(2, 3) = \\mathrm{gcd}(1, 3) = 1$.\nIn the second test case, $2$ is the maximum possible value, corresponding to $\\mathrm{gcd}(2, 4)$.\n\ndef",
        "answer": "def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)",
        "difficulty": "interview"
    },
    {
        "task_id": 2586,
        "prompt": "Complete the Python function given the prompt below:Young boy Artem tries to paint a picture, and he asks his mother Medina to help him. Medina is very busy, that's why she asked for your help.\nArtem wants to paint an $n \\times m$ board. Each cell of the board should be colored in white or black. \nLets $B$ be the number of black cells that have at least one white neighbor adjacent by the side. Let $W$ be the number of white cells that have at least one black neighbor adjacent by the side. A coloring is called good if $B = W + 1$. \nThe first coloring shown below has $B=5$ and $W=4$ (all cells have at least one neighbor with the opposite color). However, the second coloring is not good as it has $B=4$, $W=4$ (only the bottom right cell doesn't have a neighbor with the opposite color). [Image] \nPlease, help Medina to find any good coloring. It's guaranteed that under given constraints the solution always exists. If there are several solutions, output any of them.\n-----Input-----\nEach test contains multiple test cases. \nThe first line contains the number of test cases $t$ ($1 \\le t \\le 20$). Each of the next $t$ lines contains two integers $n, m$ ($2 \\le n,m \\le 100$)\u00a0\u2014 the number of rows and the number of columns in the grid.\n-----Output-----\nFor each test case print $n$ lines, each of length $m$, where $i$-th line is the $i$-th row of your colored matrix (cell labeled with 'B' means that the cell is black, and 'W' means white). Do not use quotes.\nIt's guaranteed that under given constraints the solution always exists.\n-----Example-----\nInput\n2\n3 2\n3 3\nOutput\nBW\nWB\nBB\nBWB\nBWW\nBWB\n-----Note-----\nIn the first testcase, $B=3$, $W=2$.\nIn the second testcase, $B=5$, $W=4$. You can see the coloring in the statement.\n\ndef",
        "answer": "def paint(n, m):\n    # your code here\n    return",
        "difficulty": "interview"
    },
    {
        "task_id": 2587,
        "prompt": "Complete the Python function given the prompt below:Captain Flint and his crew keep heading to a savage shore of Byteland for several months already, drinking rum and telling stories. In such moments uncle Bogdan often remembers his nephew Denis. Today, he has told a story about how Denis helped him to come up with an interesting problem and asked the crew to solve it.\nIn the beginning, uncle Bogdan wrote on a board a positive integer $x$ consisting of $n$ digits. After that, he wiped out $x$ and wrote integer $k$ instead, which was the concatenation of binary representations of digits $x$ consists of (without leading zeroes). For example, let $x = 729$, then $k = 111101001$ (since $7 = 111$, $2 = 10$, $9 = 1001$).\nAfter some time, uncle Bogdan understood that he doesn't know what to do with $k$ and asked Denis to help. Denis decided to wipe last $n$ digits of $k$ and named the new number as $r$.\nAs a result, Denis proposed to find such integer $x$ of length $n$ that $r$ (as number) is maximum possible. If there are multiple valid $x$ then Denis is interested in the minimum one.\nAll crew members, including captain Flint himself, easily solved the task. All, except cabin boy Kostya, who was too drunk to think straight. But what about you?\nNote: in this task, we compare integers ($x$ or $k$) as numbers (despite what representations they are written in), so $729 < 1999$ or $111 < 1000$.\n-----Input-----\nThe first line contains a single integer $t$ ($1 \\le t \\le 1000$)\u00a0\u2014 the number of test cases.\nNext $t$ lines contain test cases\u00a0\u2014 one per test case. The one and only line of each test case contains the single integer $n$ ($1 \\le n \\le 10^5$)\u00a0\u2014 the length of the integer $x$ you need to find.\nIt's guaranteed that the sum of $n$ from all test cases doesn't exceed $2 \\cdot 10^5$.\n-----Output-----\nFor each test case, print the minimum integer $x$ of length $n$ such that obtained by Denis number $r$ is maximum possible.\n-----Example-----\nInput\n2\n1\n3\nOutput\n8\n998\n-----Note-----\nIn the second test case (with $n = 3$), if uncle Bogdan had $x = 998$ then $k = 100110011000$. Denis (by wiping last $n = 3$ digits) will obtain $r = 100110011$.\nIt can be proved that the $100110011$ is the maximum possible $r$ Denis can obtain and $998$ is the minimum $x$ to obtain it.\n\ndef",
        "answer": "def solve(n):\n    return n",
        "difficulty": "interview"
    },
    {
        "task_id": 2588,
        "prompt": "Complete the Python function given the prompt below:You are responsible for installing a gas pipeline along a road. Let's consider the road (for simplicity) as a segment $[0, n]$ on $OX$ axis. The road can have several crossroads, but for simplicity, we'll denote each crossroad as an interval $(x, x + 1)$ with integer $x$. So we can represent the road as a binary string consisting of $n$ characters, where character 0 means that current interval doesn't contain a crossroad, and 1 means that there is a crossroad.\nUsually, we can install the pipeline along the road on height of $1$ unit with supporting pillars in each integer point (so, if we are responsible for $[0, n]$ road, we must install $n + 1$ pillars). But on crossroads we should lift the pipeline up to the height $2$, so the pipeline won't obstruct the way for cars.\nWe can do so inserting several zig-zag-like lines. Each zig-zag can be represented as a segment $[x, x + 1]$ with integer $x$ consisting of three parts: $0.5$ units of horizontal pipe + $1$ unit of vertical pipe + $0.5$ of horizontal. Note that if pipeline is currently on height $2$, the pillars that support it should also have length equal to $2$ units.\n [Image] \nEach unit of gas pipeline costs us $a$ bourles, and each unit of pillar \u2014 $b$ bourles. So, it's not always optimal to make the whole pipeline on the height $2$. Find the shape of the pipeline with minimum possible cost and calculate that cost.\nNote that you must start and finish the pipeline on height $1$ and, also, it's guaranteed that the first and last characters of the input string are equal to 0.\n-----Input-----\nThe fist line contains one integer $T$ ($1 \\le T \\le 100$) \u2014 the number of queries. Next $2 \\cdot T$ lines contain independent queries \u2014 one query per two lines.\nThe first line contains three integers $n$, $a$, $b$ ($2 \\le n \\le 2 \\cdot 10^5$, $1 \\le a \\le 10^8$, $1 \\le b \\le 10^8$) \u2014 the length of the road, the cost of one unit of the pipeline and the cost of one unit of the pillar, respectively.\nThe second line contains binary string $s$ ($|s| = n$, $s_i \\in \\{0, 1\\}$, $s_1 = s_n = 0$) \u2014 the description of the road.\nIt's guaranteed that the total length of all strings $s$ doesn't exceed $2 \\cdot 10^5$.\n-----Output-----\nPrint $T$ integers \u2014 one per query. For each query print the minimum possible cost of the constructed pipeline.\n-----Example-----\nInput\n4\n8 2 5\n00110010\n8 1 1\n00110010\n9 100000000 100000000\n010101010\n2 5 1\n00\nOutput\n94\n25\n2900000000\n13\n-----Note-----\nThe optimal pipeline for the first query is shown at the picture above.\nThe optimal pipeline for the second query is pictured below:\n [Image] \nThe optimal (and the only possible) pipeline for the third query is shown below:\n [Image] \nThe optimal pipeline for the fourth query is shown below:\n [Image]\n\ndef",
        "answer": "def solve(n, a, b, s):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2589,
        "prompt": "Complete the Python function given the prompt below:Ehab loves number theory, but for some reason he hates the number $x$. Given an array $a$, find the length of its longest subarray such that the sum of its elements isn't divisible by $x$, or determine that such subarray doesn't exist.\nAn array $a$ is a subarray of an array $b$ if $a$ can be obtained from $b$ by deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end.\n-----Input-----\nThe first line contains an integer $t$ $(1 \\le t \\le 5)$\u00a0\u2014 the number of test cases you need to solve. The description of the test cases follows.\nThe first line of each test case contains 2 integers $n$ and $x$ ($1 \\le n \\le 10^5$, $1 \\le x \\le 10^4$)\u00a0\u2014 the number of elements in the array $a$ and the number that Ehab hates.\nThe second line contains $n$ space-separated integers $a_1$, $a_2$, $\\ldots$, $a_{n}$ ($0 \\le a_i \\le 10^4$)\u00a0\u2014 the elements of the array $a$.\n-----Output-----\nFor each testcase, print the length of the longest subarray whose sum isn't divisible by $x$. If there's no such subarray, print $-1$.\n-----Example-----\nInput\n3\n3 3\n1 2 3\n3 4\n1 2 3\n2 2\n0 6\nOutput\n2\n3\n-1\n-----Note-----\nIn the first test case, the subarray $[2,3]$ has sum of elements $5$, which isn't divisible by $3$.\nIn the second test case, the sum of elements of the whole array is $6$, which isn't divisible by $4$.\nIn the third test case, all subarrays have an even sum, so the answer is $-1$.\n\ndef",
        "answer": "def longest_subarray(a, x):\n    # your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2590,
        "prompt": "Complete the Python function given the prompt below:Many years ago Berland was a small country where only $n$ people lived. Each person had some savings: the $i$-th one had $a_i$ burles.\nThe government considered a person as wealthy if he had at least $x$ burles. To increase the number of wealthy people Berland decided to carry out several reforms. Each reform looked like that:   the government chooses some subset of people (maybe all of them);  the government takes all savings from the chosen people and redistributes the savings among the chosen people equally. \nFor example, consider the savings as list $[5, 1, 2, 1]$: if the government chose the $1$-st and the $3$-rd persons then it, at first, will take all $5 + 2 = 7$ burles and after that will return $3.5$ burles to the chosen people. As a result, the savings will become $[3.5, 1, 3.5, 1]$.\nA lot of data was lost from that time, so we don't know how many reforms were implemented and to whom. All we can do is ask you to calculate the maximum possible number of wealthy people after several (maybe zero) reforms.\n-----Input-----\nThe first line contains single integer $T$ ($1 \\le T \\le 1000$) \u2014 the number of test cases.\nNext $2T$ lines contain the test cases \u2014 two lines per test case. The first line contains two integers $n$ and $x$ ($1 \\le n \\le 10^5$, $1 \\le x \\le 10^9$) \u2014 the number of people and the minimum amount of money to be considered as wealthy.\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^9$) \u2014 the initial savings of each person.\nIt's guaranteed that the total sum of $n$ doesn't exceed $10^5$.\n-----Output-----\nPrint $T$ integers \u2014 one per test case. For each test case print the maximum possible number of wealthy people after several (maybe zero) reforms.\n-----Example-----\nInput\n4\n4 3\n5 1 2 1\n4 10\n11 9 11 9\n2 5\n4 3\n3 7\n9 4 9\nOutput\n2\n4\n0\n3\n-----Note-----\nThe first test case is described in the statement.\nIn the second test case, the government, for example, could carry out two reforms: $[\\underline{11}, \\underline{9}, 11, 9] \\rightarrow [10, 10, \\underline{11}, \\underline{9}] \\rightarrow [10, 10, 10, 10]$.\nIn the third test case, the government couldn't make even one person wealthy.\nIn the fourth test case, the government could choose all people to carry out a reform: $[\\underline{9}, \\underline{4}, \\underline{9}] \\rightarrow [7\\frac{1}{3}, 7\\frac{1}{3}, 7\\frac{1}{3}]$.\n\ndef",
        "answer": "def solution(n, x):\n    # your code here\n    return 0",
        "difficulty": "interview"
    },
    {
        "task_id": 2591,
        "prompt": "Complete the Python function given the prompt below:You have array of $n$ numbers $a_{1}, a_{2}, \\ldots, a_{n}$. \nRearrange these numbers to satisfy $|a_{1} - a_{2}| \\le |a_{2} - a_{3}| \\le \\ldots \\le |a_{n-1} - a_{n}|$, where $|x|$ denotes absolute value of $x$. It's always possible to find such rearrangement.\nNote that all numbers in $a$ are not necessarily different. In other words, some numbers of $a$ may be same.\nYou have to answer independent $t$ test cases.\n-----Input-----\nThe first line contains a single integer $t$ ($1 \\le t \\le 10^{4}$)\u00a0\u2014 the number of test cases.\nThe first line of each test case contains single integer $n$ ($3 \\le n \\le 10^{5}$)\u00a0\u2014 the length of array $a$. It is guaranteed that the sum of values of $n$ over all test cases in the input does not exceed $10^{5}$.\nThe second line of each test case contains $n$ integers $a_{1}, a_{2}, \\ldots, a_{n}$ ($-10^{9} \\le a_{i} \\le 10^{9}$).\n-----Output-----\nFor each test case, print the rearranged version of array $a$ which satisfies given condition. If there are multiple valid rearrangements, print any of them.\n-----Example-----\nInput\n2\n6\n5 -2 4 8 6 5\n4\n8 1 4 2\nOutput\n5 5 4 6 8 -2\n1 2 4 8\n-----Note-----\nIn the first test case, after given rearrangement, $|a_{1} - a_{2}| = 0 \\le |a_{2} - a_{3}| = 1 \\le |a_{3} - a_{4}| = 2 \\le |a_{4} - a_{5}| = 2 \\le |a_{5} - a_{6}| = 10$. There are other possible answers like \"5 4 5 6 -2 8\".\nIn the second test case, after given rearrangement, $|a_{1} - a_{2}| = 1 \\le |a_{2} - a_{3}| = 2 \\le |a_{3} - a_{4}| = 4$. There are other possible answers like \"2 4 8 1\".\n\ndef",
        "answer": "def rearrange(a):\n    n = len(a)\n    a.sort()\n    for i in range(n):\n        if abs(a[i] - a[(i + 1) % n]) > abs(a[(i + 2) % n] - a[(i + 3) % n]):\n            a[i], a[(i + 1) % n], a[(i + 2) % n], a[(i + 3) % n] = a[(i + 3) % n], a[i], a[(i + 2) % n], a[(i + 1) % n]\n    return a",
        "difficulty": "interview"
    },
    {
        "task_id": 2592,
        "prompt": "Complete the Python function given the prompt below:Tired of boring office work, Denis decided to open a fast food restaurant.\nOn the first day he made $a$ portions of dumplings, $b$ portions of cranberry juice and $c$ pancakes with condensed milk.\nThe peculiarity of Denis's restaurant is the procedure of ordering food. For each visitor Denis himself chooses a set of dishes that this visitor will receive. When doing so, Denis is guided by the following rules:  every visitor should receive at least one dish (dumplings, cranberry juice, pancakes with condensed milk are all considered to be dishes);  each visitor should receive no more than one portion of dumplings, no more than one portion of cranberry juice and no more than one pancake with condensed milk;  all visitors should receive different sets of dishes. \nWhat is the maximum number of visitors Denis can feed?\n-----Input-----\nThe first line contains an integer $t$ ($1 \\le t \\le 500$)\u00a0\u2014 the number of test cases to solve.\nEach of the remaining $t$ lines contains integers $a$, $b$ and $c$ ($0 \\leq a, b, c \\leq 10$)\u00a0\u2014 the number of portions of dumplings, the number of portions of cranberry juice and the number of condensed milk pancakes Denis made.\n-----Output-----\nFor each test case print a single integer\u00a0\u2014 the maximum number of visitors Denis can feed.\n-----Example-----\nInput\n7\n1 2 1\n0 0 0\n9 1 7\n2 2 3\n2 3 2\n3 2 2\n4 4 4\nOutput\n3\n0\n4\n5\n5\n5\n7\n-----Note-----\nIn the first test case of the example, Denis can feed the first visitor with dumplings, give the second a portion of cranberry juice, and give the third visitor a portion of cranberry juice and a pancake with a condensed milk.\nIn the second test case of the example, the restaurant Denis is not very promising: he can serve no customers.\nIn the third test case of the example, Denise can serve four visitors. The first guest will receive a full lunch of dumplings, a portion of cranberry juice and a pancake with condensed milk. The second visitor will get only dumplings. The third guest will receive a pancake with condensed milk, and the fourth guest will receive a pancake and a portion of dumplings. Please note that Denis hasn't used all of the prepared products, but is unable to serve more visitors.\n\ndef",
        "answer": "def max_visitors(a, b, c):\n    return a + b + c - min(a, b, c)",
        "difficulty": "interview"
    },
    {
        "task_id": 2593,
        "prompt": "Complete the Python function given the prompt below:\"You must lift the dam. With a lever. I will give it to you.\nYou must block the canal. With a rock. I will not give the rock to you.\" \nDanik urgently needs rock and lever! Obviously, the easiest way to get these things is to ask Hermit Lizard for them.\nHermit Lizard agreed to give Danik the lever. But to get a stone, Danik needs to solve the following task.\nYou are given a positive integer $n$, and an array $a$ of positive integers. The task is to calculate the number of such pairs $(i,j)$ that $i<j$ and $a_i$ $\\&$ $a_j \\ge a_i \\oplus a_j$, where $\\&$ denotes the bitwise AND operation, and $\\oplus$ denotes the bitwise XOR operation.\nDanik has solved this task. But can you solve it?\n-----Input-----\nEach test contains multiple test cases.\nThe first line contains one positive integer $t$ ($1 \\le t \\le 10$) denoting the number of test cases. Description of the test cases follows.\nThe first line of each test case contains one positive integer $n$ ($1 \\le n \\le 10^5$)\u00a0\u2014 length of the array.\nThe second line contains $n$ positive integers $a_i$ ($1 \\le a_i \\le 10^9$)\u00a0\u2014 elements of the array.\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^5$.\n-----Output-----\nFor every test case print one non-negative integer\u00a0\u2014 the answer to the problem.\n-----Example-----\nInput\n5\n5\n1 4 3 7 10\n3\n1 1 1\n4\n6 2 5 3\n2\n2 4\n1\n1\nOutput\n1\n3\n2\n0\n0\n-----Note-----\nIn the first test case there is only one pair: $(4,7)$: for it $4$ $\\&$ $7 = 4$, and $4 \\oplus 7 = 3$.\nIn the second test case all pairs are good.\nIn the third test case there are two pairs: $(6,5)$ and $(2,3)$.\nIn the fourth test case there are no good pairs.\n\ndef",
        "answer": "def solve(n, a):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] & a[j] >= a[i] | a[j]:\n                count += 1\n    return count",
        "difficulty": "interview"
    },
    {
        "task_id": 2594,
        "prompt": "Complete the Python function given the prompt below:Due to the coronavirus pandemic, city authorities obligated citizens to keep a social distance. The mayor of the city Semyon wants to light up Gluharniki park so that people could see each other even at night to keep the social distance.\nThe park is a rectangular table with $n$ rows and $m$ columns, where the cells of the table are squares, and the boundaries between the cells are streets. External borders are also streets. Every street has length $1$. For example, park with $n=m=2$ has $12$ streets.\nYou were assigned to develop a plan for lighting the park. You can put lanterns in the middle of the streets. The lamp lights two squares near it (or only one square if it stands on the border of the park).\n [Image] The park sizes are: $n=4$, $m=5$. The lighted squares are marked yellow. Please note that all streets have length $1$. Lanterns are placed in the middle of the streets. In the picture not all the squares are lit. \nSemyon wants to spend the least possible amount of money on lighting but also wants people throughout the park to keep a social distance. So he asks you to find the minimum number of lanterns that are required to light all the squares.\n-----Input-----\nThe first line contains a single integer $t$ ($1 \\le t \\le 10^4$) \u2014 the number of test cases in the input. Then $t$ test cases follow.\nEach test case is a line containing two integers $n$, $m$ ($1 \\le n, m \\le 10^4$) \u2014 park sizes.\n-----Output-----\nPrint $t$ answers to the test cases. Each answer must be a single integer \u2014 the minimum number of lanterns that are required to light all the squares.\n-----Example-----\nInput\n5\n1 1\n1 3\n2 2\n3 3\n5 3\nOutput\n1\n2\n2\n5\n8\n-----Note-----\nPossible optimal arrangement of the lanterns for the $2$-nd test case of input data example: [Image]\nPossible optimal arrangement of the lanterns for the $3$-rd test case of input data example: [Image]\n\ndef",
        "answer": "def solution(n, m):\n    return n * m",
        "difficulty": "interview"
    },
    {
        "task_id": 2595,
        "prompt": "Complete the Python function given the prompt below:Johnny has recently found an ancient, broken computer. The machine has only one register, which allows one to put in there one variable. Then in one operation, you can shift its bits left or right by at most three positions. The right shift is forbidden if it cuts off some ones. So, in fact, in one operation, you can multiply or divide your number by $2$, $4$ or $8$, and division is only allowed if the number is divisible by the chosen divisor. \nFormally, if the register contains a positive integer $x$, in one operation it can be replaced by one of the following:   $x \\cdot 2$  $x \\cdot 4$  $x \\cdot 8$  $x / 2$, if $x$ is divisible by $2$  $x / 4$, if $x$ is divisible by $4$  $x / 8$, if $x$ is divisible by $8$ \nFor example, if $x = 6$, in one operation it can be replaced by $12$, $24$, $48$ or $3$. Value $6$ isn't divisible by $4$ or $8$, so there're only four variants of replacement.\nNow Johnny wonders how many operations he needs to perform if he puts $a$ in the register and wants to get $b$ at the end.\n-----Input-----\nThe input consists of multiple test cases. The first line contains an integer $t$ ($1 \\leq t \\leq 1000$)\u00a0\u2014 the number of test cases. The following $t$ lines contain a description of test cases.\nThe first and only line in each test case contains integers $a$ and $b$ ($1 \\leq a, b \\leq 10^{18}$)\u00a0\u2014 the initial and target value of the variable, respectively.\n-----Output-----\nOutput $t$ lines, each line should contain one integer denoting the minimum number of operations Johnny needs to perform. If Johnny cannot get $b$ at the end, then write $-1$.\n-----Example-----\nInput\n10\n10 5\n11 44\n17 21\n1 1\n96 3\n2 128\n1001 1100611139403776\n1000000000000000000 1000000000000000000\n7 1\n10 8\nOutput\n1\n1\n-1\n0\n2\n2\n14\n0\n-1\n-1\n-----Note-----\nIn the first test case, Johnny can reach $5$ from $10$ by using the shift to the right by one (i.e. divide by $2$).\nIn the second test case, Johnny can reach $44$ from $11$ by using the shift to the left by two (i.e. multiply by $4$).\nIn the third test case, it is impossible for Johnny to reach $21$ from $17$.\nIn the fourth test case, initial and target values are equal, so Johnny has to do $0$ operations.\nIn the fifth test case, Johnny can reach $3$ from $96$ by using two shifts to the right: one by $2$, and another by $3$ (i.e. divide by $4$ and by $8$).\n\ndef",
        "answer": "def solution(a, b):\n    # your code here\n    return -1",
        "difficulty": "interview"
    },
    {
        "task_id": 2596,
        "prompt": "Complete the Python function given the prompt below:The Third Doctor Who once correctly said that travel between parallel universes is \"like travelling sideways\". However, he incorrectly thought that there were infinite parallel universes, whereas in fact, as we now all know, there will never be more than 250.\nHeidi recently got her hands on a multiverse observation tool. She was able to see all $n$ universes lined up in a row, with non-existent links between them. She also noticed that the Doctor was in the $k$-th universe.\nThe tool also points out that due to restrictions originating from the space-time discontinuum, the number of universes will never exceed $m$.\nObviously, the multiverse is unstable because of free will. Each time a decision is made, one of two events will randomly happen: a new parallel universe is created, or a non-existent link is broken.\nMore specifically,   When a universe is created, it will manifest itself between any two adjacent universes or at one of the ends.   When a link is broken, it could be cut between any two adjacent universes. After separating the multiverse into two segments, the segment NOT containing the Doctor will cease to exist. \nHeidi wants to perform a simulation of $t$ decisions. Each time a decision is made, Heidi wants to know the length of the multiverse (i.e. the number of universes), and the position of the Doctor.\n-----Input-----\nThe first line contains four integers $n$, $k$, $m$ and $t$ ($2 \\le k \\le n \\le m \\le 250$, $1 \\le t \\le 1000$).\nEach of the following $t$ lines is in one of the following formats:   \"$1$ $i$\" \u2014 meaning that a universe is inserted at the position $i$ ($1 \\le i \\le l + 1$), where $l$ denotes the current length of the multiverse.  \"$0$ $i$\" \u2014 meaning that the $i$-th link is broken ($1 \\le i \\le l - 1$), where $l$ denotes the current length of the multiverse. \n-----Output-----\nOutput $t$ lines. Each line should contain $l$, the current length of the multiverse and $k$, the current position of the Doctor.\nIt is guaranteed that the sequence of the steps will be valid, i.e. the multiverse will have length at most $m$ and when the link breaking is performed, there will be at least one universe in the multiverse.\n-----Example-----\nInput\n5 2 10 4\n0 1\n1 1\n0 4\n1 2\nOutput\n4 1\n5 2\n4 2\n5 3\n-----Note-----\nThe multiverse initially consisted of 5 universes, with the Doctor being in the second.\nFirst, link 1 was broken, leaving the multiverse with 4 universes, and the Doctor in the first.\nThen, a universe was added to the leftmost end of the multiverse, increasing the multiverse length to 5, and the Doctor was then in the second universe.\nThen, the rightmost link was broken.\nFinally, a universe was added between the first and the second universe.\n\ndef",
        "answer": "def third_doctor_who(n, k, m, t):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2597,
        "prompt": "Complete the Python function given the prompt below:Ujan decided to make a new wooden roof for the house. He has $n$ rectangular planks numbered from $1$ to $n$. The $i$-th plank has size $a_i \\times 1$ (that is, the width is $1$ and the height is $a_i$).\nNow, Ujan wants to make a square roof. He will first choose some of the planks and place them side by side in some order. Then he will glue together all of these planks by their vertical sides. Finally, he will cut out a square from the resulting shape in such a way that the sides of the square are horizontal and vertical.\nFor example, if Ujan had planks with lengths $4$, $3$, $1$, $4$ and $5$, he could choose planks with lengths $4$, $3$ and $5$. Then he can cut out a $3 \\times 3$ square, which is the maximum possible. Note that this is not the only way he can obtain a $3 \\times 3$ square.\n [Image] \nWhat is the maximum side length of the square Ujan can get?\n-----Input-----\nThe first line of input contains a single integer $k$ ($1 \\leq k \\leq 10$), the number of test cases in the input.\nFor each test case, the first line contains a single integer $n$ ($1 \\leq n \\leq 1\\,000$), the number of planks Ujan has in store. The next line contains $n$ integers $a_1, \\ldots, a_n$ ($1 \\leq a_i \\leq n$), the lengths of the planks.\n-----Output-----\nFor each of the test cases, output a single integer, the maximum possible side length of the square.\n-----Example-----\nInput\n4\n5\n4 3 1 4 5\n4\n4 4 4 4\n3\n1 1 1\n5\n5 5 1 1 5\nOutput\n3\n4\n1\n3\n-----Note-----\nThe first sample corresponds to the example in the statement.\nIn the second sample, gluing all $4$ planks will result in a $4 \\times 4$ square.\nIn the third sample, the maximum possible square is $1 \\times 1$ and can be taken simply as any of the planks.\n\ndef",
        "answer": "def solve(n, planks):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2598,
        "prompt": "Complete the Python function given the prompt below:You are given an undirected graph that consists of n vertices and m edges. Initially, each edge is colored either red or blue. Each turn a player picks a single vertex and switches the color of all edges incident to it. That is, all red edges with an endpoint in this vertex change the color to blue, while all blue edges with an endpoint in this vertex change the color to red.\nFind the minimum possible number of moves required to make the colors of all edges equal.\n-----Input-----\nThe first line of the input contains two integers n and m (1 \u2264 n, m \u2264 100 000)\u00a0\u2014 the number of vertices and edges, respectively.\nThe following m lines provide the description of the edges, as the i-th of them contains two integers u_{i} and v_{i} (1 \u2264 u_{i}, v_{i} \u2264 n, u_{i} \u2260 v_{i})\u00a0\u2014 the indices of the vertices connected by the i-th edge, and a character c_{i} ($c_{i} \\in \\{B, R \\}$) providing the initial color of this edge. If c_{i} equals 'R', then this edge is initially colored red. Otherwise, c_{i} is equal to 'B' and this edge is initially colored blue. It's guaranteed that there are no self-loops and multiple edges.\n-----Output-----\nIf there is no way to make the colors of all edges equal output  - 1 in the only line of the output. Otherwise first output k\u00a0\u2014 the minimum number of moves required to achieve the goal, then output k integers a_1, a_2,..., a_{k}, where a_{i} is equal to the index of the vertex that should be used at the i-th move.\nIf there are multiple optimal sequences of moves, output any of them.\n-----Examples-----\nInput\n3 3\n1 2 B\n3 1 R\n3 2 B\nOutput\n1\n2 \nInput\n6 5\n1 3 R\n2 3 R\n3 4 B\n4 5 R\n4 6 R\nOutput\n2\n3 4 \nInput\n4 5\n1 2 R\n1 3 R\n2 3 B\n3 4 B\n1 4 B\nOutput\n-1\n\ndef",
        "answer": "def solve(n, m, edges):\n    graph = [[] for _ in range(n)]\n    for u, v, c in edges:\n        graph[u].append((v, c))\n        graph[v].append((u, c))",
        "difficulty": "interview"
    },
    {
        "task_id": 2599,
        "prompt": "Complete the Python function given the prompt below:Let $f(x)$ be the sum of digits of a decimal number $x$.\nFind the smallest non-negative integer $x$ such that $f(x) + f(x + 1) + \\dots + f(x + k) = n$.\n-----Input-----\nThe first line contains one integer $t$ ($1 \\le t \\le 150$) \u2014 the number of test cases.\nEach test case consists of one line containing two integers $n$ and $k$ ($1 \\le n \\le 150$, $0 \\le k \\le 9$). \n-----Output-----\nFor each test case, print one integer without leading zeroes. If there is no such $x$ that $f(x) + f(x + 1) + \\dots + f(x + k) = n$, print $-1$; otherwise, print the minimum $x$ meeting that constraint.\n-----Example-----\nInput\n7\n1 0\n1 1\n42 7\n13 7\n99 1\n99 0\n99 2\nOutput\n1\n0\n4\n-1\n599998\n99999999999\n7997\n\ndef",
        "answer": "def f(x):\n    return sum(int(i) for i in str(x))",
        "difficulty": "interview"
    }
]