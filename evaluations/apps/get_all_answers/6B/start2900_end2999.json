[
    {
        "task_id": 2900,
        "prompt": "Complete the Python function given the prompt below:You are given a string $s$ consisting only of upper case letters A and B. For an integer $k$, a pair of indices $i$ and $j$ ($1 \\le i<j \\le n$) is called a $k$-inversion if and only if $s[i] = \\textbf{B}$, $s[j] = \\textbf{A}$ and $j-i = k$.\nConsider the string BABA. It has two $1$-inversions and one $3$-inversion. It has no $2$-inversions.\nFor each $k$ between $1$ and $n-1$ (inclusive), print the number of $k$-inversions in the string $s$.\n-----Input-----\nEach input will consist of a single test case. Note that your program may be run multiple times on different inputs. The input will consist of a single line with a string $s$, which consists of only upper case As and Bs. The string $s$ will be between $1$ and $1000000$ characters long. There will be no spaces.\n-----Output-----\nOutput $n-1$ lines, each with a single integer. The first line\u2019s integer should be the number of $1$-inversions, the second should be the number of $2$-inversions, and so on.\n-----Examples-----\nSample Input:\nBABA\nSample Output:\n2\n0\n1\n\ndef",
        "answer": "def count_inversions(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)):\n            if s[i] == 'B' and s[j] == 'A':\n                count += 1\n    return count",
        "difficulty": "interview"
    },
    {
        "task_id": 2901,
        "prompt": "Complete the Python function given the prompt below:Johnny has been roped into a fantasy soccer league and needs your help to set up the best team. \nHe has a list of $10$ players that are on his fantasy team (no goalkeepers in this league). He also knows what country they\u2019re from, what league they play in, and what team they play for.\nHe doesn\u2019t know much about soccer, but he does know these things:\n - If two players are from the same country, a link between the two players will have a synergy score of $1$.\n - If two players are in the same league, a link between the two players will have a synergy score of $1$.\n - If two players are on the same team, a link between the two players will have a synergy score of $2$.\n - If two players are from the same country and in the same league, a link between the two players will have a synergy score of $2$.\n - If two players are from the same country and on the same team, a link between the two players will have a synergy score of $3$.\nA team can only be in one league and no two teams will have the same name unless they are the same team.\nHe has to place the players on his team into a formation of $10$ nodes which can be represented as an undirected graph. The illustration shows the first sample. Therefore, Johnny has to place a player in each node of the graph. Given a particular formation and the members of Johnny\u2019s team, output whether it is possible for Johnny to organize his team to get a perfect team.\nA team is a perfect team if and only if every player is placed on a node with a synergy score that is greater or equal to the node\u2019s degree. A node\u2019s degree is the number of links to which it is linked in the formation. A player placed on a node in the formation derives synergy from all players placed on nodes to which the player is linked in the formation. Thus, a node\u2019s synergy score is the sum of the synergy scores of all links to which the node is connected.\n-----Input-----\nThe input will contain a single test case. The first line of the input will have one integer $c$ ($0 \\leq c \\leq 45$). $c$ represents the number of edges in the formation. The next $c$ lines represent the connections between nodes represented as two integers $a$ ($0 \\leq a < 10$) and $b$ ($0 \\leq b < 10$), where $a$ is not equal to $b$. Then, the next $10$ lines will be the players on Johnny\u2019s team. Each line will contain four strings in the following order: player name, nation, league, team, which are delimited by a single space. These strings are guaranteed to be non-empty and consist of up to $15$ alphanumeric characters, which includes lower- and uppercase English letters, digits, and hyphens.\n-----Output-----\nIf a perfect team can be organized by Johnny, print yes. Otherwise, print no.\n-----Examples-----\nSample Input:\n15\n0 1\n1 2\n2 3\n0 4\n1 5\n2 6\n3 7\n4 5\n5 6\n6 7\n4 8\n5 8\n6 9\n7 9\n8 9\nGriezmann France LaLiga AtleticoMadrid\nBenzema France LaLiga RealMadrid\nNtep France Ligue1 StadeRennais\nSissoko France PremierLeague Spurs\nTolisso France Ligue1 Lyon\nDiarra France Ligue1 OM\nEvra France CalcioA Juventus\nKoscielny France PremierLeague Arsenal\nVarane France LaLiga RealMadrid\nSagna France PremierLeague ManCity\nSample Output:\nyes\n\ndef",
        "answer": "def is_perfect_formation(formation, team):\n    # your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2902,
        "prompt": "Complete the Python function given the prompt below:Baxter Scott owns The Enlightened Dairy Co., a dairy company with magical cows. Early each morning, he brushes his teeth, strolls outside, and finds that the cows have doubled in number. With double the number of cows, he can produce double the quantity of milk. While he is ecstatic that he has so many cows and so much milk, the Dairy Regulator forces him to keep at most $C$ cows on any given farm, which greatly complicates his business.\nAt The Enlightened Dairy Co., Baxter has access to an unlimited number of farms, each with a maximum capacity of $C$ cows. On each farm, cows reproduce at the same rate: they always double in number when the clock strikes midnight. To stay within the Regulator\u2019s rules, whenever a farm has strictly more than $C$ cows, Baxter selects half of the cows on that farm and moves them to an entirely new, empty farm. More precisely, if there are $D \\leq C$ cows on a farm, he leaves all $D$ cows on the farm, but if there are $D > C$ cows on a farm, he leaves $\\left\\lceil \\frac{D}{2} \\right\\rceil $ cows on the farm and takes $\\left\\lfloor \\frac{D}{2} \\right\\rfloor $ cows to a new, empty farm. (Here $\\left\\lceil \\ \\right\\rceil $ and $\\left\\lfloor \\ \\right\\rfloor $ denote the ceiling and floor functions, which round up/down to the nearest integer, respectively.) He does this early every morning, before the Regulator could possibly show up, so that he can avoid paying hefty Moo Fees.\nThe Regulator needs to know how many farms she will be inspecting when she visits The Enlightened Dairy Co. The Regulator inspects every farm that has at least one cow, and does not inspect any farm with zero cows. Given the number of cows on each farm with at least one cow on Day\u00a0$0$, compute the number of farms that need inspecting on any given day.\n-----Input-----\nThe first line of input contains three space-separated integers, $C$, $N$, and $M$, where $C$ ($1 \\leq C \\leq 1000$) is the maximum number of cows allowed on a farm, $N$ ($0 \\leq N \\leq 1000$) is the number of farms with at least one cow on Day\u00a0$0$, and $M$ ($1 \\leq M \\leq 50$) is the number of different days on which the Regulator visits. The following $N$ lines of input each have a single integer $c_ i$($1 \\leq c_ i \\leq C$), representing the number of cows on the $i$th of the $N$ farms on Day\u00a0$0$. The final $M$ lines each have a single integer $d_ j$ ($0 \\leq d_ j \\leq 50$), representing a day when the Regulator visits. All $d_ j$ are distinct.\n-----Output-----\nFor each $d_ j$, output one line with a single integer: the number of farms the Regulator will inspect on Day\u00a0$d_ j$.\n-----Examples-----\nSample Input:\n1 5 5\n1\n1\n1\n1\n1\n0\n1\n2\n3\n4\nSample Output:\n5\n10\n20\n40\n80\n\ndef",
        "answer": "def solution(c, n, m):\n    # Write your code here\n    pass\n",
        "difficulty": "interview"
    },
    {
        "task_id": 2903,
        "prompt": "Complete the Python function given the prompt below:A Fenwick Tree (also known as a Binary Indexed Tree) is a data structure on an array which enables fast ($O(\\log n)$) updates and prefix sum queries on the underlying data.\nFor this problem, implement a Fenwick Tree to support operations of two types: (a) increment an element in the array or (b) query the prefix sum of a portion of the array.\n-----Input-----\nThe first line of input contains two integers $N$, $Q$, where $1 \\le N \\le 5000000$ is the length of the array and $0 \\le Q \\le 5000000$ is the number of operations. Then follow $Q$ lines giving the operations. There are two types of operations:\n - \u201c+ $i$ $\\delta $\u201d indicates that $a[i]$ is incremented by $\\delta $, where $0 \\le i < N$ and $-10^9 \\le \\delta \\le 10^9$ (both are integers)\n - \u201c? $i$\u201d is a query for the value of $a[0] + a[1] + \\ldots + a[i-1]$, where $0 \\le i \\le N$ (for $i = 0$ this is interpreted as an empty sum)\nYou should assume that every array entry is initially $0$.\n-----Output-----\nFor each query in the input, output one line giving the answer to that query.\n-----Examples-----\nSample Input:\n10 4\n+ 7 23\n? 8\n+ 3 17\n? 8\nSample Output:\n23\n40\n\ndef",
        "answer": "def FenwickTree(A):\n    n = len(A)\n    F = [0] * (n + 1)\n    for i in range(n):\n        F[i + 1] = F[i] + A[i]\n    return F",
        "difficulty": "interview"
    },
    {
        "task_id": 2904,
        "prompt": "Complete the Python function given the prompt below:At some point or another, most computer science students have written a standard Sudoku solving program. This is yet another \u201cput numbers in a grid\u201d puzzle.\nNumbers are placed in the grid so that each outlined region contains the numbers $1$ to $n$, where $n$ is the number of squares in the region. The same number can never touch itself, not even diagonally.\nIncomplete Grid\nSolution Grid\nFor this problem, you will write a program that takes as input an incomplete puzzle grid and outputs the puzzle solution grid.\n-----Input-----\nThe input consists of a single data set. This data set starts with a line containing the number of rows in the input grid $R$, ($1 \\le R \\le 7$), and the number of columns in the input grid $C$, ($1 \\le C \\le 7$), separated by spaces. The next $R$ lines contain a representation of the incomplete input grid, one row per line. Each row has $C$ characters, representing the digits in each cell. The value in each cell is represented by either the digit already in that cell or a \u2018-\u2019 for an initially empty cell.\nThis grid is followed by a description of the separate regions in the grid. The first of these lines specifies the total number of regions. This is followed by one line for each region that specifies the cells contained in that region. Each region description consists of a decimal number $N$, specifying the number of cells in the region, followed by $N$ cell descriptions separated by spaces. Each cell description consists of a left parenthesis, followed the cell\u2019s row index, followed by a comma, followed by the cell\u2019s row number, followed by a right parenthesis. Regions do not overlap.\n-----Output-----\nOutput $R$ lines containing $C$ digits (separated by single spaces) showing the solution grid for the corresponding input data set. You are guaranteed that there is a unique solution.\n-----Examples-----\nSample Input:\n3 5\n- - - - -\n- - - - -\n4 - - - 1\n5\n1 (1,1)\n2 (1,2) (1,3)\n5 (2,1) (2,2) (3,1) (3,2) (3,3)\n4 (2,3) (2,4) (1,4) (1,5)\n3 (3,4) (3,5) (2,5)\nSample Output:\n1 2 1 2 1\n3 5 3 4 3\n4 2 1 2 1\n\ndef",
        "answer": "def solveSudoku(grid):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2905,
        "prompt": "Complete the Python function given the prompt below: \u201cIt\u2019s like how hot dogs come in packs of ten, and buns come in packs of eight or twelve \u2014 you have to buy nine packs to make it come out even.\u201d \nThis is a quote from the 1986 movie, \u201cTrue Stories\u201d, and it\u2019s true; well, almost true. You could buy four packs of $10$ hotdogs and five packs of $8$ buns. That would give you exactly $40$ of each. However, you can make things even with fewer packs if you buy two packs of $10$ hotdogs, along with a pack of $8$ buns and another pack of $12$ buns. That would give you $20$ of each, using only $4$ total packs.\nFor this problem, you\u2019ll determine the fewest packs you need to buy to make hotdogs and buns come out even, given a selection of different bun and hotdog packs available for purchase.\n-----Input-----\nThe first input line starts with an integer, $H$, the number of hotdog packs available. This is followed by $H$ integers, $h_1 \\ldots h_ H$, the number of hotdogs in each pack. The second input line starts with an integer, $B$, giving the number of bun packs available. This is followed by $B$ integers, $b_1 \\ldots b_ B$, indicating the number of buns in each pack. The values $H$ and $B$ are between $0$ and $100$, inclusive, and the sizes of the packs are between $1$ and $1000$, inclusive. Every available pack is listed individually. For example, if there were five eight-bun packs available for purchase, the list of bun packs would contain five copies of the number eight.\n-----Output-----\nIf it\u2019s not possible to purchase an equal number of one or more hotdogs and buns, just output \u201cimpossible\u201d. Otherwise, output the smallest number of total packs you can buy (counting both hotdog and bun packs) to get exactly the same number of hotdogs and buns.\n-----Examples-----\nSample Input:\n4 10 10 10 10\n10 8 8 8 12 12 12 8 8 12 12\nSample Output:\n4\n\ndef",
        "answer": "def hotdogs_and_buns(h, b):\n    if h == 0 or b == 0:\n        return 'impossible'\n    if h == 1 and b == 1:\n        return 1\n    if h == 1:\n        return b\n    if b == 1:\n        return h\n    if h > b:\n        return hotdogs_and_buns(h - b, b)\n    else:\n        return hotdogs_and_buns(h, b - h)",
        "difficulty": "interview"
    },
    {
        "task_id": 2906,
        "prompt": "Complete the Python function given the prompt below:Marek and his schoolmates have just finished their studies at the university. They wanted to celebrate it with a game of paintball. After an hour of playing a very strange thing happened \u2013 everyone had exactly one bullet left. Marek, being a very curious person, wanted to know whether it\u2019s possible that everyone will be hit exactly once provided nobody moves.\n-----Task-----\nYou are given a description of the situation during a paintball game when every player has only one bullet. The description of the game consists of pairs of players who can see each other. If a player can see another player, he can fire at him. Your task is to find a target for each player such that everyone will be hit.\n-----Input-----\nThe first line of input contains two space separated integers $N$ and $M$, satisfying $2\\leq N\\leq 1000$ and $0\\leq M\\leq 5000$, where $N$ is the number of players. Players are numbered $1, 2, \\ldots, N$. $M$ lines follow, each line containing two space separated integers $A$ and $B$ ($1\\leq A < B\\leq N$), denoting that players $A$ and $B$ can see each other. Each pair of players appears at most once in the input.\n-----Output-----\nIf there is no assignment of targets such that everyone will be hit, output Impossible. Otherwise output $N$ lines. The $i$-th line should contain the number of the target of the $i$-th player. If there is more than one solution, output any one.\n-----Examples-----\nSample Input:\n3 3\n1 2\n2 3\n1 3\nSample Output:\n2\n3\n1\n\ndef",
        "answer": "def paintball(N, M):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2907,
        "prompt": "Complete the Python function given the prompt below:Boris works at a secret communication station for the government training new employees on how to encode messages. Messages at this station are encoded with a rotation (\u201cCaesar\u201d) cipher that replaces each letter with one at a set offset in the alphabet, e.g., for offset $2$ an \u2018a\u2019 is replaced by a \u2018c\u2019 and \u2018y\u2019 is replaced by \u2018a\u2019. In order to encode a message, this cipher may be applied more than once. Each such application counts as a step in the encoding process. Boris teaches the new employees to encode messages by demonstrating each step of the encoding individually. However, Boris does not does not like seeing messages that contain at least half as many vowels as consonants after applying an encoding step. (Boris considers \u2018a\u2019, \u2018e\u2019, \u2018i\u2019, \u2018o\u2019, \u2018u\u2019, and \u2018y\u2019 as vowels.) He grows annoyed and more and more unhappy with each step where this situation occurs.\nYour job is to encode a given message and determine whether Boris will see fewer steps that annoy him than ones that don\u2019t. Since Boris wants to be happy in his job he will give a message that annoys him too much to a colleague.\n-----Input-----\nThe first line of the input contains a single integer $O$ ($1 \\le O \\le 25$) that represent the offset used for the rotation cipher. The second line contains the message to encode, which consists entirely of lowercase English characters. The length of the message is between $1$ and $80$ characters. The third line contains an integer $N$ ($1 \\le N \\le 26$), the number of times the cipher must be applied.\n-----Output-----\nOutput \u2018Boris\u2019 if strictly more steps sound good than bad, and \u2018Colleague\u2019 otherwise.\n-----Examples-----\nSample Input:\n1\nthequickbrownfoxjumpedoverthelazydog\n10\nSample Output:\nBoris\n\ndef",
        "answer": "def caesar_cipher(message, offset):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    shifted_alphabet = alphabet[offset:] + alphabet[:offset]\n    table = str.maketrans(alphabet, shifted_alphabet)\n    return message.translate(table)",
        "difficulty": "interview"
    },
    {
        "task_id": 2908,
        "prompt": "Complete the Python function given the prompt below:Simon is a contestant on the new exciting game show, Add \u2019Em Up! In this show, contestants are given a set of cards with multi-digit numbers on them, and need to select two cards that add up to a given sum. However, to make things more interesting, the font that the cards are printed in (see below) means that certain cards will display different numbers if turned upside-down, and it is legal to turn either or both of the cards if necessary to generate the sum. Please help Simon win the game!\n-----Input-----\nThe first line contains two integers, $n$, the number of cards, and $s$, the desired sum. The second line will contain $n$ integers between $1$ and $100000000$ inclusive. You may assume that $1\\leq n\\leq 100000$ and $2\\leq s\\leq 200000000$.\n-----Output-----\nThe output should be a single line consisting of the string YES if two cards can be chosen such that (in some orientation) they add up to $s$, and the string NO otherwise.\n-----Examples-----\nSample Input:\n3 66\n15 21 22\nSample Output:\nNO\n\ndef",
        "answer": "def add_em_up(n, s):\n    for i in range(n):\n        for j in range(i+1, n):\n            if s == (a[i] + a[j]):\n                return \"YES\"\n    return \"NO\"",
        "difficulty": "interview"
    },
    {
        "task_id": 2909,
        "prompt": "Complete the Python function given the prompt below:Michael works in a bakery. At the end of his shift, his boss wants the breads sorted in a certain order. She can\u2019t seem to decide on which order, though \u2013 every day there seems to be a new one \u2013 to Michael\u2019s despair. Michael has worked there for a while now and has learned a neat trick with his wooden bakery paddle. He can take three breads next to each other on his paddle and throw them up in the air such that when they land, the right-most has moved to the left-most position, and the two other breads have moved one place to the right. In other words, he can rotate to the right a subsequence of breads of length three.\nBefore the end of the shift, his coworkers place the breads in a long line. Michael would like to sort the line of breads using his paddle trick. He can take any three consecutive breads along the line on his paddle, rotate them, and then put them back. Sometimes though, it does not matter how many times he uses his paddle \u2013 the line of bread just doesn\u2019t seem to be possible to sort the way the boss wants\u2026\n-----Input-----\nThe first line of input contains a positive integer $N, (3 \\leq N \\leq 100000)$, denoting the number of breads. Then two lines follow: On the first line, a permutation of the integers $1$ through $N$ describing the order in which the breads are lined up. On the second line, a permutation of the integers $1$ through $N$ describing how Michael\u2019s boss wants the breads sorted.\n-----Output-----\nOutput \u201cPossible\u201d if Michael can sort the breads with his paddle in the order prescribed by his boss, otherwise \u201cImpossible\u201d.\n-----Examples-----\nSample Input:\n4\n1 3 4 2\n4 3 2 1\nSample Output:\nPossible\n\ndef",
        "answer": "def solution(A):\n    # write your code in Python 2.7\n    # A = [1, 3, 4, 2]\n    # A = [4, 3, 2, 1]\n    # A = [1, 2, 3, 4]\n    # A = [1, 2, 3, 4]\n    # A = [1, 2, 3, 4]\n    # A = [1, 2, 3, 4]\n    # A = [1, 2, 3, 4]\n    # A = [1, 2, 3, 4]\n    # A = [1, 2, 3, 4]\n    # A = [1, 2, 3, 4]\n    # A = [1, 2, 3, 4]\n    # A = [1, 2, 3, 4]\n    # A = [1, 2, 3, 4]\n    # A = [1, 2, 3, 4]\n    # A = [1, 2, 3, 4]\n    # A = [1, 2, 3, 4]\n    # A = [1, 2, 3, 4]\n    # A = [1, 2, 3, 4]\n    # A = [1, 2, 3, 4]\n    # A = [1, 2, 3, 4]\n    # A = [1, 2, 3, 4]\n    # A = [1, 2, 3, 4]\n    # A = [1, 2, 3, 4]\n    # A = [1, 2, 3, 4]\n    # A = [1, 2, 3, 4]\n    # A = [1, 2, 3, 4]\n    # A = [1, 2, 3, 4]\n    # A = [1, 2, 3, 4]\n    # A = [1, 2, 3, 4]\n    # A = [1, 2, 3, 4]\n    # A = [1, 2, 3, 4]\n    # A = [1, 2, 3, 4]\n    # A = [1, 2, 3, 4]\n    # A = [1, 2, 3, 4]\n    # A = [1, 2",
        "difficulty": "interview"
    },
    {
        "task_id": 2910,
        "prompt": "Complete the Python function given the prompt below:Iskander the Baker is decorating a huge cake, covering the rectangular surface of the cake with frosting. For this purpose, he mixes frosting sugar with lemon juice and food coloring, in order to produce three kinds of frosting: yellow, pink, and white. These colors are identified by the numbers $0$ for yellow, $1$\u00a0for pink, and $2$ for white.\nTo obtain a nice pattern, he partitions the cake surface into vertical stripes of width $A_1, A_2, \\dots, A_ n$ centimeters, and horizontal stripes of height $B_1, B_2, \\dots, B_ n$ centimeters, for some positive integer\u00a0$n$. These stripes split the cake surface into $n\\times n$ rectangles. The intersection of vertical stripe\u00a0$i$ and horizontal stripe\u00a0$j$ has color number $(i+j) \\bmod 3$ for all $1 \\leq i,j \\leq n$. To prepare the frosting, Iskander wants to know the total surface in square centimeters to be colored for each of the three colors, and asks for your help.Input\nThe input consists of the following integers:\n - on the first line: the integer $n$,\n - on the second line: the values of $A_1,\\dots,A_ n$, $n$ integers separated with single spaces,\n - on the third line: the values of $B_1,\\dots,B_ n$, $n$ integers separated with single spaces.Limits\nThe input satisfies $3\\leq n \\leq 100000$ and $1 \\leq A_1,\\ldots,A_ n,B_1,\\ldots,B_ n \\leq 10000$.Output\nThe output should consist of three integers separated with single spaces, representing the total area for each color $0$, $1$, and $2$.\n-----Examples-----\nSample Input:\n3\n1 1 1\n1 1 1\nSample Output:\n3 3 3\n\ndef",
        "answer": "def iskander(n, A, B):\n    # your code here\n    return",
        "difficulty": "interview"
    },
    {
        "task_id": 2911,
        "prompt": "Complete the Python function given the prompt below:You just finished participating in a programming contest with your friend. Unfortunately, you were unable to All Kill the contest (i.e., solve all of the problems), but you are now wondering if there might be some strategy that would have solved all of the problems.\nSolving a problem has two phases, a thinking phase and a coding phase. Your friend is responsible for all the thinking while you are responsible for all the coding.\nFor each problem, you\u2019ve computed exactly how long it would take for you to code. However, before you can code a problem in contest, your friend needs to get the idea to solve it first. You aren\u2019t sure how to estimate the time when your friend gets a solution idea, so you model it like this: For every problem, your friend gets the idea of how to solve this problem at a uniformly random minute during the contest. Each of these is an independent random variable. You can only code one problem at a time, so there may be several problems queued up at any moment of time. You always prioritize coding the lowest numbered problems first. You do this minute-by-minute, so you will switch to coding a lower-numbered problem if your friend gets the idea for it before you\u2019re finished coding a higher-numbered problem, but you would prefer not to do this. Context switching is an expensive operation, even in the human brain!\nThe contest strategy can be modeled as follows for each minute:\n - For each problem that doesn\u2019t yet have an idea, your friend will get the idea to solve it with probability $1/(\\textrm{number of minutes remaining in contest})$. Your friend can get the idea to solve multiple problems in the same minute.\n - Among the problems that still need code time and your friend has gotten the solution idea, you will take the lowest numbered one and spend the next minute coding it (if no problem satisfies the condition, you do nothing at this step).\nYou would like to know the probability of these two events happening together:\n - Your team finishes coding all the problems by the end of the contest\n - For each problem, the time spent coding that problem is a contiguous interval\nLet $p$ be this probability, $n$ be the number of problems in the contest and $t$ be the number of minutes in the contest. It can be shown that $p \\cdot t^n$ is an integer. Output the value of $(p \\cdot t^n) \\pmod{998244353}$. Note that $998244353$ is a large prime.\n-----Input-----\nThe first line of input contains two space-separated integers $n$ ($1 \\leq n \\leq 10^5$) and $t$ ($1 \\leq t \\leq 10^8$), where there were $n$ problems in the contest, and the contest lasted $t$ minutes.\nEach of the next $n$ lines contains a single integer $x$ ($1 \\leq x \\leq 10^3$). These are the times to code each problem in minutes, in order. It is guaranteed that the sum of these times is less than or equal to $t$.\n-----Output-----\nOutput a single integer, which is $(p \\cdot t^n) \\pmod{998244353}$, where $p$ is the probability of the two events mentioned above happening together.\n-----Examples-----\nSample Input:\n3 5\n1\n2\n1\nSample Output:\n60\n\ndef",
        "answer": "def contest(n, t):\n    p = 1\n    for i in range(n):\n        p *= 1/t\n    return int(p*t**n) %998244353",
        "difficulty": "interview"
    },
    {
        "task_id": 2912,
        "prompt": "Complete the Python function given the prompt below:You are given a collection of $N$ non-empty strings, denoted by $S_1, S_2, \\ldots, S_ n$. Then you are given $N$-$1$ operations which you execute in the order they are given. The $i^{th}$ operation is has the following format: \u2018$a$$b$\u2019 ($1$-based indexing, without the quotes), which means that you have to make the following changes:\n - $S_ a = S_ a + S_ b$, i.e. concatenate $a^{th}$ string and $b^{th}$ string and store the result in $a^{th}$ string,\n - $S_ b$ = \"\", i.e. make the $b^{th}$ string empty, after doing the previous step.\nYou are ensured that after the $i^{th}$ operation, there will be no future operation that will be accessing $S_ b$. Given these operations to join strings, print the last string that will remain at the end of this process.\n-----Input-----\nThe first line contains an integer $N$ ($1 \\le N \\le 10^5$) denoting the number of strings given. Each of the next $N$ lines contains a string denoting the $S_ i$. All the characters in the string $S_ i$ are lowercase alphabets from \u2018a\u2019 to \u2018z\u2019. The total number of characters over all the strings is at most $10^6$, i.e $\\sum _{i = 1}^{N}|S_ i| \\leq 10^6$, where $|S_ i|$ denotes the length of the $i^{th}$ string. After these $N$ strings, each of the next $N$-$1$ lines contain two integers $a$ and $b$, such that $a \\neq b$ and $1 \\le a, b \\le N$ denoting the $i^{th}$ operation.\n-----Output-----\nPrint the last string which remains at the end of the $N$-$1$ operations.\n-----Warning-----\nThe I/O files are large. Please use fast I/O methods.\n-----Examples-----\nSample Input:\n4\ncute\ncat\nkattis\nis\n3 2\n4 1\n3 4\nSample Output:\nkattiscatiscute\n\ndef",
        "answer": "def join_strings(strings, operations):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2913,
        "prompt": "Complete the Python function given the prompt below:Nathaniel collects rare gems and minerals, and has decided he has to protect his valuable collection from thieves. He is installing an electric eye system, in which he shines a laser into the room with his collection, and the laser will hit a sensor as long as no one steps in a spot that the laser crosses. Unfortunately, he spent most of his money on his collection, so he has only one laser and one sensor, and some mirrors. He has installed the mirrors at various locations in the room, at $45$ degree angles to the walls. At the point you have been called in to help, he has only one more mirror left to install, and he wants to know if there is any way to place it such that the laser will reach the sensor (as long as no one is in its way).\nWe will assume that the room is always square, the laser is always in the northern wall pointing south, and the sensor is mounted on the eastern wall, such that the laser must hit it from the west. We will also assume that the interior of the room can be represented by a grid, and that all mirrors (including the one to be added) are placed at the center of grid cells, at $45$ degrees with respect to the grid axis, and that the laser and sensor are at the center of their respective column/row of the grid.\n-----Input-----\nThe first line of the input contains three integers: $n$, the size of the room, $c$, the column number of the laser ($1\\leq c\\leq n$), and $r$, the row number of the sensor ($1\\leq r\\leq n$). This is followed by $n$ lines, each containing $n$ characters separated by spaces. The character. represents an empty space, the character \\ represents a mirror oriented NW/SE and the character / represents a mirror oriented NE/SW. You may assume $1\\leq n\\leq 2000$ and $1\\leq r,c\\leq n$.\n-----Output-----\nThe output should consist of the string YES if the laser can be made to hit the sensor with the addition of at most one mirror, or the string NO otherwise.\n-----Examples-----\nSample Input:\n5 2 3\n.....\n.....\n.. \\..\n. \\...\n.....\nSample Output:\nNO\n\ndef",
        "answer": "def laser_sensor(n, c, r):\n    # Write your code here",
        "difficulty": "interview"
    },
    {
        "task_id": 2914,
        "prompt": "Complete the Python function given the prompt below:Gunnar and his friends like games which involve rolling dice. Gunnar has a huge collection of 6-sided, 12-sided and 20-sided dice. All the games with dice started to bore him, so he came up with a new game. He rolls an $s$-sided die $n$ times and wins if at least $k$ different numbers appear in the $n$ throws. An $s$-sided die contains $s$ distinct numbers $1, \\dots, s$ on its sides.\nSince this is a game only for one person, Gunnar and his friends decided to make it more fun by letting other people bet on a particular game. Before you bet on a particular game, you would like to know how probable it is to throw at least $k$ different numbers in $n$ throws with an $s$-sided die. We assume that all numbers have the same probability of being thrown in each throw.\n-----Input-----\nThe input consists of a single line with three integers $n$, $s$, and $k$ ($1\\le n\\le 10000, 1 \\le k \\le s \\le 500$). $n$ is the number of throws, $k$ the number of different numbers that are needed to win and $s$ is the number of sides the die has.\n-----Output-----\nOutput one line with the probability that a player throws at least $k$ different numbers within $n$ throws with an $s$-sided die. Your answer should be within absolute or relative error at most $10^{-7}$.\n-----Examples-----\nSample Input:\n3 3 2\nSample Output:\n0.888888889\n\ndef",
        "answer": "def probability(n, s, k):\n    # Enter your code here\n    return 1",
        "difficulty": "interview"
    },
    {
        "task_id": 2915,
        "prompt": "Complete the Python function given the prompt below:The postal service is interested in cutting costs as an alternative to raising the postage rates. One way to do this is by minimizing the distance traveled when delivering mail from the post office to all the required locations and returning to the post office. It may be that all the mail to be delivered does not fit on the mail truck at once, in which case the distance traveled by the truck must include travel back to the post office to reload. For simplicity, we assume a one dimensional world with the post office at the origin, and delivery locations each identified by a single coordinate. As an example, suppose a postal truck can carry up to $100$\u00a0letters and that $50$\u00a0letters need to be delivered to location $-10$, that $175$ need to be delivered to location\u00a0$10$, and $20$ delivered to location\u00a0$25$. A maximally efficient plan would be:\nDeliver the $50$ letters to location $-10$ (travel $2 \\cdot 10$), the first $100$\u00a0letters to location $10$ (travel $2 \\cdot 10$), the remaining $75$\u00a0letters to location $10$ while on the way to delivering the $20$ to location\u00a0$25$ (travel $2 \\cdot 25$). The total round-trip distance traveled is $90$.\n-----Input-----\nThe first line contains two integers, $N$ and $K$, where $3 \\leq N \\leq 1000$ is the number of delivery addresses on the route, and $1 \\leq K \\leq 10000$ is the carrying capacity of the postal truck. Each of the following $N$ lines will contain two integers $x_ j$ and $t_ j$, the location of a delivery and the number of letters to deliver there, where $-1500 \\leq x_1 < x_2 < \\cdots < x_ N \\leq 1500$ and $1 \\leq t_ j \\leq 800$ for all $j$. All delivery locations are nonzero (that is, none are at the post office).\n-----Output-----\nOutput the minimum total travel distance needed to deliver all the letters and return to the post office.\n-----Examples-----\nSample Input:\n3 100\n-10 50\n10 175\n25 20\nSample Output:\n90\n\ndef",
        "answer": "def min_distance(N, K, delivery_locations):\n    delivery_locations = sorted(delivery_locations)\n    delivery_locations = [0] + delivery_locations + [1500]\n    delivery_locations = [delivery_locations[i] - delivery_locations[i - 1] for i in range(1, len(delivery_locations))]\n    delivery_locations = [delivery_locations[i] for i in range(len(delivery_locations) - 1)]\n    delivery_locations = [delivery_locations[i] for i in range(len(delivery_locations) - 1)]\n    delivery_locations = [delivery_locations[i] for i in range(len(delivery_locations) - 1)]\n    delivery_locations = [delivery_locations[i] for i in range(len(delivery_locations) - 1)]\n    delivery_locations = [delivery_locations[i] for i in range(len(delivery_locations) - 1)]\n    delivery_locations = [delivery_locations[i] for i in range(len(delivery_locations) - 1)]\n    delivery_locations = [delivery_locations[i] for i in range(len(delivery_locations) - 1)]\n    delivery_locations = [delivery_locations[i] for i in range(len(delivery_locations) - 1)]\n    delivery_locations = [delivery_locations[i] for i in range(len(delivery_locations) - 1)]\n    delivery_locations = [delivery_locations[i] for i in range(len(delivery_locations) - 1)]\n    delivery_locations = [delivery_locations[i] for i in range(len(delivery_locations) - 1)]\n    delivery_locations = [delivery_locations[i] for i in range(len(delivery_locations) - 1)]\n    delivery_locations = [delivery_",
        "difficulty": "interview"
    },
    {
        "task_id": 2916,
        "prompt": "Complete the Python function given the prompt below:Trouble has come to the remote group of islands known as Insumulia. Due to an unfortunate combination of over-consumption, natural climate variations, and generally difficult conditions, the island of Incunabula has run out of trees. Because several other Insumulian islands depended on trees from Incunabula through trade, its collapse will have repercussions all over Insumulia. In this problem, we\u2019ll simulate a (highly oversimplified) model of the situation to determine the effects of the collapse of Incunabula. \nWe model the situation as follows. Each island has a threshold $T_ i$ on the amount of incoming goods (for simplicity we assume that there is only a single commodity of goods) it needs to receive per lunar cycle in order for the society of the island to sustain itself. If the amount of incoming goods drops below the threshold, society on the island will collapse and die out, and the island will no longer provide goods to other islands, thereby potentially causing them to collapse as well. Each island provides some amount of goods to a number of other islands. If an island collapses, we assume that goods that would have been delivered to that island is effectively lost; it does not get redistributed and delivered to other islands instead. Also, once an island dies out it is not repopulated (until possibly long after the ongoing collapses have finished).\nYour job is to write a program to compute the number of islands that survive after the potential chain reaction of collapses that is caused by the collapse of Incunabula.\n-----Input-----\nThe first line of input contains an integer $N$ ($1 \\le N \\le 100000$), the number of islands in Insumulia.\nThen follow $N$ lines, describing each island. The $i$\u2019th such description starts with two integers $T_ i$, $K_ i$, where $0 \\le T_ i \\le 50000$ is the amount of goods the $i$\u2019th island needs to receive in order to survive, and $0 \\le K_ i \\le N-1$ is the number of other islands the $i$\u2019th islands receives goods from. The remainder of the description of the $i$\u2019th island is a list of $K_ i$ pairs of integers. The $j$\u2019th such pair, $S_{ij}$, $V_{ij}$, indicates that island $i$ receives $V_{ij}$ units of goods from island $S_{ij}$ each lunar cycle. You may assume that the $S_{ij}$\u2019s are distinct and between $1$ and $N$ (inclusive), and that none of them equals $i$. The values $V_{ij}$ satisfy $1 \\le V_{ij} \\le 1000$ and their sum is at least $T_ i$. The sum of all the $K_ i$\u2019s for all the $N$ islands is at most $500000$.\nIslands are numbered from $1$ to $N$, and Incunabula is island number $1$.\n-----Output-----\nOutput a single integer, the number of islands surviving the collapses.\n-----Examples-----\nSample Input:\n4\n0 0\n25 3 1 10 3 10 4 10\n10 1 2 10\n10 1 2 10\nSample Output:\n0\n\ndef",
        "answer": "def collapse(islands):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2917,
        "prompt": "Complete the Python function given the prompt below:Last weekend you and your friends went to visit the local farmer\u2019s market at the town square. As you were standing around in a circle talking, you couldn\u2019t help overhearing two of your friends musing over what sounded like an interesting problem: They were considering the number of ways in which you could all shake hands, such that everyone in the circle simultaneously shaked hands with one other person, but where no arms crossed each other.\nAfter a few seconds\u2019 thought you decided to join your two friends, to share (with them) the solution to their problem. \u201cIf we are $2n$ persons\u201d, you said, \u201cpick any particular person, and let that person shake hands with somebody. That person will have to leave an even number of people on each side of the person with whom he/she shakes hands. Of the remaining $n-1$ pairs of people, he/she can leave zero on the right and $n-1$ pairs on the left, $1$ on the right and $n-2$ pairs on the left, and so on. The pairs remaining on the right and left can independently choose any of the possible non-crossing handshake patterns, so the count $C_ n$ for $n$ pairs of people is given by:\\[ C_ n = C_{n-1}C_0 + C_{n-2}C_1 + \\ldots + C_1C_{n-2} + C_0C_{n-1}, \\]\nwhich, together with the fact that $C_0=C_1=1$, is just the definition of the Catalan numbers.\u201d By consulting your handy combinatorics book, you find out that there is a much more efficient formula for calculating $C_ n$, namely:\\[ C_ n = \\frac{\\binom {2n}{n}}{n+1}. \\]\nAfter a collective groan from the group, your particularly cheeky friend Val called out \u201cWell, since we are at the town square, why don\u2019t you try to square your Catalan numbers!\u201d. This was met with much rejoicing, while you started to think about how to square the Catalan sequence\u2026\n-----Task-----\nLet $C_ n$ be the $n$th Catalan number as defined above. By regarding the sequence $(C_ n)_{n\\geq 0}$ of Catalan numbers, we can define a sequence $(S_ n)_{n\\geq 0}$, corresponding to \u201csquaring the Catalan sequence\u201d, by considering the Cauchy product, or discrete convolution, of $(C_ n)_{n\\geq 0}$ with itself, i.e.,\\[ S_ n = \\sum _{k=0}^{n}C_ kC_{n-k}. \\]\nYour task is to write a program for calculating the number $S_ n$.1\n-----Input-----\nThe input contains one line containing one non-negative integer: $n$, with $0 \\leq n \\leq 5000$.\n-----Output-----\nOutput a line containing $S_ n$.\n-----Examples-----\nSample Input:\n0\nSample Output:\n1\n\ndef",
        "answer": "def catalan(n):\n    if n == 0:\n        return 1\n    else:\n        return catalan(n-1) + catalan(n-2)",
        "difficulty": "interview"
    },
    {
        "task_id": 2918,
        "prompt": "Complete the Python function given the prompt below:You are organising a king of the hill tournament, the Buenos Aires Paddleboarding Competition (BAPC), with $n$ participants. In a king of the hill tournament, one person starts as a \u201cking\u201d and is then challenged by another person, the winning person becomes the new king. This is repeated until all participants have challenged exactly once (except for the starting person). In a paddleboarding match, there are no draws. The person which ends up as king, wins the tournament. Since you are the organiser, you get to choose the starting person and the order in which they challenge the king.\nSomeone is offering you a substantial amount of money in case one of the participants, Henk, ends up winning the tournament. You happen to know, for any two participants $x$ and $y$, which of the two would win if they were to match during the tournament. Consequently, you choose to do the unethical: you will try to rig the game. Can you find a schedule that makes Henk win the tournament?\n-----Input-----\n - The first line contains an integer $1 \\leq n \\leq 1000$, the number of participants. The participants are numbered $0, \\dots, n-1$, where Henk is $0$.\n - Then $n$ lines follow, where each line has exactly $n$ characters (not counting the newline character). These lines represent the matrix with the information of who beats who, as follows. On line $i$ the $j$th character is (note that $0 \\leq i, j < n$):\n - \u20191\u2019 if person $i$ will win against person $j$.\n - \u20190\u2019 if person $i$ will lose against person $j$.\n - \u2019X\u2019 if $i = j$.\n-----Output-----\nPrint a sequence of participants, such that the first person starts as king and the consequent participants challenge the king. If there is no way to rig the game such that Henk wins, print \u201cimpossible\u201d.\n-----Examples-----\nSample Input:\n3\nX10\n0X1\n10X\nSample Output:\n1 2 0\n\ndef",
        "answer": "def king_of_the_hill(n, matrix):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2919,
        "prompt": "Complete the Python function given the prompt below:Whitespace is an esoteric programming language (esolang) created in 2003 by Edwin Brady and Chris Morris. Many elements of Whitespace are familiar, including the fact that it is imperative and stack-based, but it has one main distinguishing feature: the only significant characters in a Whitespace source code file are [Tab] (ASCII\u00a0$9$), [Newline] (ASCII\u00a0$10$), and [Space] (ASCII\u00a0$32$). This, of course, has the intentionally humorous result that all source code files using only these characters appear completely blank in most text editors, which can be problematic if you have a boss who keeps looking over your shoulder for evidence of productivity. (A Whitespace source code file can, in fact, include other characters, but these are simply ignored, so we will not consider that possibility here.)\nFor this problem, you will work with a simplified version of Whitespace that we call Whitespace Lite, affectionately known as Litespace. Let $W$ denote the $3$-character set $\\{ $[Tab], [Newline], [Space]$\\} $. A Litespace program is a sequence of instructions, each of which consists of two or more characters from\u00a0$W$. There is a stack available that holds signed integers; when a Litespace program begins, the stack is initially empty. In the list of instructions, given below, only one instruction (the last) is specifically intended to produce output, but most other instructions produce output if an error condition is encountered.\nLitespace Instruction Set:\n - [Space][Space]<integer> \u2014 Push the specified integer onto the stack.\n - [Space][Newline][Space] \u2014 Make a copy of the topmost stack element and push this copy onto the stack. If the stack is empty, print \u201cInvalid copy operation\u201d on a line by itself.\n - [Space][Newline][Tab] \u2013 Swap the two topmost stack elements. If the stack contains fewer than two elements, print \u201cInvalid swap operation\u201d on a line by itself and leave the stack unchanged.\n - [Space][Newline][Newline] \u2013 Remove and discard the topmost stack element. If the stack is empty, print \u201cInvalid remove operation\u201d on a line by itself.\n - [Tab][Space][Space][Space] \u2014 Remove the two topmost stack elements and push their sum onto the stack. If the stack contains fewer than two elements, print \u201cInvalid addition operation\u201d on a line by itself and leave the stack unchanged.\n - [Tab][Space][Space][Tab] \u2014 Remove the two topmost stack elements and push their difference onto the stack (the topmost element subtracted from the second topmost element). If the stack contains fewer than two elements, print \u201cInvalid subtraction operation\u201d on a line by itself and leave the stack unchanged.\n - [Tab][Space][Space][Newline] \u2014 Remove the two topmost stack elements and push their product onto the stack. If the stack contains fewer than two elements, print \u201cInvalid multiplication operation\u201d on a line by itself and leave the stack unchanged.\n - [Tab][Space][Tab][Space] \u2014 Remove the two topmost stack elements and push their quotient onto the stack (the second topmost element divided by the topmost element); this is integer division, so discard any fractional part of the quotient. If the stack contains fewer than two elements, print \u201cInvalid division operation\u201d on a line by itself and leave the stack unchanged. If the stack contains two or more elements, the topmost of which is\u00a0$0$, print \u201cDivision by zero\u201d on a line by itself and leave the stack unchanged.\n - [Tab][Newline][Space][Tab] \u2014 Remove the integer on the top of the stack and print it on a line by itself (in the usual base-$10$ representation). If the stack is empty, print \u201cInvalid print operation\u201d on a line by itself.\nIn the first instruction above, an integer to be pushed onto the stack is in binary form, encoded as two or more characters from the set $\\{ $[Space], [Tab]$\\} $ followed by a [Newline] character. The first character encodes the sign of the integer ([Space] $=$ positive, [Tab] $=$ negative), and the following [Space] and [Tab] characters encode the bits in the binary representation of the absolute value (magnitude) of the integer, with the convention that [Space] $= 0$, [Tab] $= 1$. The first bit after the sign bit is most significant, and there are no leading zeros. For example, since $13$ in binary is $1101$, the encoding of $-13$ is [Tab][Tab][Tab][Space][Tab][Newline] \nNote that there are two encodings of $0$, one for $+0$ and one for $-0$. These are interchangeable. However, in the last instruction above, if the value to be printed is zero, print\u00a0\u201c0\u201d, not\u00a0\u201c-0\u201d.\nGiven a Litespace program, produce the program\u2019s output. For compactness, the program will be given as a string of characters from the set $\\{ $\u2018T\u2019, \u2018N\u2019, \u2018S\u2019$\\} $, where \u2018T\u2019 denotes [Tab], \u2018N\u2019 denotes [Newline], and \u2018S\u2019 denotes [Space].\n-----Input-----\nInput consists of a single non-empty string of characters from $\\{ $\u2018T\u2019, \u2018N\u2019, \u2018S\u2019$\\} $ representing a valid sequence of Litespace instructions. The length of the string is at most $10000$. It is guaranteed that the Litespace program produces at least one line of output. Also, any integer pushed onto the stack or generated by a successful arithmetic operation will be less than $2^{31}$ in absolute value.\n-----Output-----\nPrint the output of the Litespace program.\n-----Examples-----\nSample Input:\nSSSTTSNTNST\nSample Output:\n6\n\ndef",
        "answer": "def main():\n    print(solve())",
        "difficulty": "interview"
    },
    {
        "task_id": 2920,
        "prompt": "Complete the Python function given the prompt below:You have recently made a grid traversing robot that can find its way from the top left corner of a grid to the bottom right corner. However, you had forgotten all your AI programming skills, so you only programmed your robot to go rightwards and downwards (that\u2019s after all where the goal is). You have placed your robot on a grid with some obstacles, and you sit and observe. However, after a while you get tired of observing it getting stuck, and ask yourself \u201cHow many paths are there from the start position to the goal position?\u201d, and \u201cIf there are none, could the robot have made it to the goal if it could walk upwards and leftwards?\u201d\nSo you decide to write a program that, given a grid of size $n \\times n$ with some obstacles marked on it where the robot cannot walk, counts the different ways the robot could go from the top left corner $s$ to the bottom right $t$, and if none, tests if it were possible if it could walk up and left as well. However, your program does not handle very large numbers, so the answer should be given modulo $2^{31} - 1$.\n-----Input-----\nOn the first line is one integer, $1 \\leq n \\leq 1000$. Then follows $n$ lines, each with $n$ characters, where each character is one of \u2019.\u2019 and \u2019#\u2019, where \u2019.\u2019 is to be interpreted as a walkable tile and \u2019#\u2019 as a non-walkable tile. There will never be a wall at $s$, and there will never be a wall at $t$.\n-----Output-----\nOutput one line with the number of different paths starting in $s$ and ending in $t$ (modulo $2^{31} - 1$) or THE GAME IS A LIE if you cannot go from $s$ to $t$ going only rightwards and downwards but you can if you are allowed to go left and up as well, or INCONCEIVABLE if there simply is no path from $s$ to $t$.\n-----Examples-----\nSample Input:\n5\n.....\n#..#.\n#..#.\n...#.\n.....\nSample Output:\n6\n\ndef",
        "answer": "def paths(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    return paths(n-1) + paths(n-2)",
        "difficulty": "interview"
    },
    {
        "task_id": 2921,
        "prompt": "Complete the Python function given the prompt below:The University of Lagado is organising events for the upcoming Fresher\u2019s week and has been told \u2014 much to the surprise of its staff \u2014 that some of the undergraduates may enjoy a beer tasting. While sourcing a wide variety of drinks for the students to taste, the university realised that in the interests of safety there should be a limit on the alcohol consumption of any student, enforced by a strict limit on the amount any individual is allowed to spend.\nIn common with many popular establishments, the drinks with varying strengths are served in varying amounts: Either a litre, a half litre or a third of a litre to limit possible intoxication. $1\\% $ of a litre at $100\\% $ strength equals one unit of alcohol.\nThe students are looking forward to the event, but in order to make the most of their money and still be bright-eyed and bushy tailed for the first week of morning lectures, they don\u2019t wish to get too drunk. How can the students spend all their money and consume in full their self-imposed alcohol limit for the night?\n-----Input-----\n - One line containing three numbers:\n - $m$ ($0.00 \\le m \\le 10.00$), the amount of money they can spend to two decimal places;\n - $u$ ($0.0 \\le u \\le 20.0$), the number of units they aim to drink to one decimal place;\n - $d$ ($1 \\le d \\le 8$), the number of different drinks available.\n - Another $d$ lines, each containing:\n - up to $20$ lowercase latin letters (the name of the drink);\n - an integer between $0$ and $100$ (its strength as a percentage);\n - its size (either \u2018$1/1$\u2019 for a litre, \u2018$1/2$\u2019 for a half or \u2018$1/3$\u2019 for a third);\n - a real number to two decimal places; its cost.\nName, strength, price and cost will be separated by spaces.\n-----Output-----\nIf the students\u2019 aims are possible, write one or more lines, each listing the name of the drink purchased followed by the positive integer count of how many drinks of that type were bought. If there are several solutions, output any.\nOtherwise, output a single line containing the word IMPOSSIBLE.\n-----Examples-----\nSample Input:\n10.00 9.0 2\nfire 2 1/1 4.00\nwater 10 1/2 2.00\nSample Output:\nfire 2\nwater 1\n\ndef",
        "answer": "def drinks(m, u, d):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2922,
        "prompt": "Complete the Python function given the prompt below:Cady\u2019s Chocolate Company just opened down the street! Cady\u2019s chocolate is world famous, and her recipe is top secret. But the company is more renowned for the fact that they sell the chocolate in random quantities. Each box of chocolate may contain anywhere from $1$ to $100$ pieces.\nBob\u2019s nephews, John and Sam, love Cady\u2019s Chocolate, but Bob has a dilemma. John will get jealous of Sam if he gets more pieces of chocolate, and vice versa. Bob knows how many pieces of chocolate are in each box.\nWrite a program to help him determine if it is possible to split the boxes between John and Sam such that both get the same number of pieces of chocolate, and such that all boxes of chocolate are used.\n-----Input-----\nThe input consists of a single test case. The first line contains an integer $n$ ($1 \\le n \\le 1000$), the number of boxes of chocolate Bob bought. The next line contains $n$ integers $a_ i$ representing the number of pieces of chocolate in the $i^{\\text {th}}$ box ($1\\le a_ i \\le 100$).\n-----Output-----\nIf it is possible for Bob to split the boxes such that John and Sam get the same number of pieces of chocolate, output YES. Otherwise, output NO.\n-----Examples-----\nSample Input:\n6\n1 4 3 12 13 1\nSample Output:\nYES\n\ndef",
        "answer": "def chocolate(n,a):\n    if n%2==0:\n        return \"NO\"\n    else:\n        return \"YES\"",
        "difficulty": "interview"
    },
    {
        "task_id": 2923,
        "prompt": "Complete the Python function given the prompt below:Two kingdoms had been at war for a long time, until the emperor intervened to bring an end to the conflict. The territory in question comprises an $M$ by $N$ rectangular grid. At the emperor\u2019s insistence, the two kings have withdrawn their troops until no two opposing troops are in adjacent squares of the map (adjacent being horizontal or vertical \u2013 diagonal is not considered).\nThe emperor proposes to designate certain squares of the map as neutral territory. Neither king will be allowed to move troops into those squares, and the emperor\u2019s own forces will patrol them to be sure that both kings observe these rules.\nThe emperor is frugal and does not want to commit more soldiers to this effort than absolutely necessary. His generals have marked each square of the map with the number of soldiers required to secure that square. What remains is to choose which of those squares should be patrolled.\nWrite a program to determine the minimum number of soldiers that the emperor will need to be deploy to guarantee that the troops of one kingdom cannot move, in one or more steps, into squares occupied by the troops of the second kingdom (moving horizontally or vertically) without encountering the emperor\u2019s own soldiers.\n-----Input-----\nInput begins with a line containing $2$ integers, $w$ and $h$, denoting the width and height of the map, where $1 \\leq w, h \\leq 40$.\nThis is followed by $h$ lines. Each line contains $w$ characters, left justified. These characters will be \u2018A\u2019 or \u2018B\u2019, designating a position held by king A or king B, or a single numeric digit, designating a currently unoccupied position that can be secured by the use of that number of soldiers. For example, a \u20182\u2019 would indicate that two soldiers must be deployed to that square to secure it against passage of other troops. A \u20180\u2019 indicates terrain that is impassible \u2013 the emperor need not commit soldiers there because the kingdom troops cannot pass through that square.\nNo \u2018A\u2019 will be adjacent, horizontally or vertically, to any \u2018B\u2019.\nThere will be at least one \u2018A\u2019 and one \u2018B\u2019 in the input.\n-----Output-----\nPrint a single line containing an integer denoting the minimum number of soldiers that the emperor must deploy to guarantee that there is no open path between any \u2018A\u2019 position and any \u2018B\u2019 position, using any combination of horizontal or vertical moves.\n-----Examples-----\nSample Input:\n8 5\nA11111AA\nAA7B111A\n111BB111\n11BBB111\n11BBB11B\nSample Output:\n13\n\ndef",
        "answer": "def min_deploy(w, h, grid):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2924,
        "prompt": "Complete the Python function given the prompt below:Lucy is making her road bike ready for the season. All parts have been checked for wear and tear and washed clean and she is ready to put the beauty back together again. There is only one thing troubling her. During the winter she has been to several motivational talks by previous professional cyclists. They have all talked about the importance of correct cadence while cycling. The cadence is the frequency your feet are pedaling at when you are cycling. Lucy is now wondering if she should change her gears setup before she reassembles the bike and goes on her first ride for the year.\nBike gears typically consist of a set of different-sized gears on the crank (the thing connected to the pedals) and a set of different-sized gears on the back wheel. These are connected by the chain to drive the bike forward. Can you help her figure out if she can keep her current setup and still change to all gears without it affecting her cadence too much? Specifically she does not want her cadence to be increased by more than $P$% when changing to the next lighter gear. We assume that the bicycle will continue at the same speed immediately after the gear change.\n-----Input-----\nThe first line of the input consists of three integers $N$, $M$ and $P$ representing the number of gears on the crank, the numbers of gears on the back wheel, and the maximum cadence change in percentage Lucy will tolerate when changing gears.\n Then follows a line with $N$ integers $C_ i$ each representing the number of teeth on each of the gears on the crank.\n Then follows a line with $M$ integers $D_ j$ each representing the number of teeth on each of the gears on the back wheel.\n-----Output-----\nOutput a single line with the text Ride on! if Lucy can change through all the gears from heaviest to lightest in her current setup and Time to change gears! if she cannot.\n-----Limits-----\n - $1 \\leq N, M \\leq 100$\n - $0 \\leq P \\leq 1000$\n - $3 \\leq C, D \\leq 100000$\n-----Examples-----\nSample Input:\n2 11 15\n50 34\n11 12 13 14 16 18 20 22 25 28 32\nSample Output:\nRide on!\n\ndef",
        "answer": "def ride(N, M, P):\n    # your code here\n    return",
        "difficulty": "interview"
    },
    {
        "task_id": 2925,
        "prompt": "Complete the Python function given the prompt below:Your slightly pointy-bearded boss has assigned you to write software to find the best songs from different music albums. And the software should be finished in an hour. But don\u2019t panic, you don\u2019t have to solve the problem of writing an AI with good taste. At your disposal is the impeccable taste of a vast horde of long-tailed monkeys. Well, at least almost. The monkeys are not very communicative (or rather, you\u2019re not sure which song \u201cOok!\u201d is supposed to refer to) so you can\u2019t ask them which songs are the best. What you can do however is to look at which songs the monkeys have listened to and use this information to deduce which songs are the best. \nAt first, you figure that the most listened to songs must be the best songs. However, you quickly realize that this approach is flawed. Even if all songs of the album are equally good, the early songs are more likely to be listened to more often than the later ones, because monkeys will tend to start listening to the first song, listen for a few songs and then, when their fickle ears start craving something else, stop listening. Instead, if all songs are equal, you expect that their play frequencies should follow Zipf\u2019s Law.\nZipf\u2019s Law is an empirical law originally formulated about word frequencies in natural languages, but it has been observed that many natural phenomena, such as population sizes and incomes, approximately follow the same law. It predicts that the relative frequency of the $i$\u2019th most common object (in this case, a song) should be proportional to $1/i$.\nTo illustrate this in our setting, suppose we have an album where all songs are equally good. Then by Zipf\u2019s Law, you expect that the first song is listened to twice as often as the second song, and more generally that the first song is listened to $i$ times as often as the $i$\u2019th song. When some songs are better than others, those will be listened to more often than predicted by Zipf\u2019s Law, and those are the songs your program should select as the good songs. Specifically, suppose that song $i$ has been played $f_ i$ times but that Zipf\u2019s Law predicts that it would have been played $z_ i$ times. Then you define the quality of song $i$ to be $q_ i = f_ i/z_ i$. Your software should select the songs with the highest values of $q_ i$.\n-----Input-----\nThe first line of input contains two integers $n$ and $m$ ($1 \\le n \\le 50000$, $1 \\le m \\le n$), the number of songs on the album, and the number of songs to select. Then follow $n$ lines. The $i$\u2019th of these lines contains an integer $f_ i$ and string $s_ i$, where $0 \\le f_ i \\le 10^{12}$ is the number of times the $i$\u2019th song was listened to, and $s_ i$ is the name of the song. Each song name is at most $30$ characters long and consists only of the characters \u2018a\u2019-\u2018z\u2019, \u20180\u2019-\u20189\u2019, and underscore (\u2018_\u2019).\n-----Output-----\nOutput a list of the $m$ songs with the highest quality $q_ i$, in decreasing order of quality. If two songs have the same quality, give precedence to the one appearing first on the album (presumably there was a reason for the producers to put that song before the other).\n-----Examples-----\nSample Input:\n4 2\n30 one\n30 two\n15 three\n25 four\nSample Output:\nfour\ntwo\n\ndef",
        "answer": "def best_songs(n, m):\n    # your code here\n    return []",
        "difficulty": "interview"
    },
    {
        "task_id": 2926,
        "prompt": "Complete the Python function given the prompt below:When reading programming problems, one can often get some hints regarding the topic of the problem by skimming the problem statement for certain words. If, for example, the word \u201cvertex\u201d or \u201cedge\u201d appears, the problem is almost certainly a graph problem, while the words \u201cwords\u201d or \u201cletters\u201d suggest that the problem is about strings.\nYour task is to implement a simple program that attempts to classify a problem according to one of $N$ categories. Each category has an associated set of words, which, if they appear as words in a statement, suggest the problem belongs to this category. When classifying a statement, the program should suggest those categories which have the highest number of occurences of their associated words. Note that words that are part of other words do not count. For example, the word statement should not count as an occurance for the word ate.\nIn the above example, we suggested that the category graph may have the associated words vertex and edge and the category string could have the associated words words and letters. Then, if there were $3$ occurances each of the words vertex and edge, the number of matches for the category graph would be $6$. If the statement contained $14$ occurances of words and $4$ of letters, the number of matches for the category string would be $18$. Since there are more matches for the second category, the program should suggest it.\nIf there are multiple categories with the same number of matches, your program should suggest all of them.\n-----Input-----\nThe first line of input contains the number of categories $1 \\le N \\le 10$.\nThe next $N$ lines each contain a description of a category. The description starts with the name of the category \u2013 a single word. Then, an integer $1 \\le W \\le 10$ follows \u2013 the number of words associated with this category. This is followed by those $W$ words, separated by spaces. No two words within a category are the same, and no two categories have the same name.\nThis is followed by a number of lines describing the statement of the problem. Each line contains a list of space-separated words.\nEvery word in the input will consist solely of at most $30$ lower-case letters a-z. The statement consists of between $1$ and $10000$ words.\n-----Output-----\nFor each suggested category, output the name of the category on a single line, in lexicographical order.\n-----Examples-----\nSample Input:\n4\ndatastructure 3 query range sum\ngeometry 3 euclid range vertex\ngraph 3 query vertex hamiltonian\nmath 3 hamiltonian sum euclid\nconsider the hamiltonian graph where each vertex corresponds\nto an linear equation we can solve these using the euclid\nalgorithm now you will receive a query corresponding to a\nrange of vertices your task is to compute the sum of the\nminimum solution of those vertices\nSample Output:\ndatastructure\ngeometry\ngraph\nmath\n\ndef",
        "answer": "def classify(statement):\n    statement = statement.split()\n    categories = {}\n    for word in statement:\n        if word in categories:\n            categories[word] += 1\n        else:\n            categories[word] = 1\n    return categories",
        "difficulty": "interview"
    },
    {
        "task_id": 2927,
        "prompt": "Complete the Python function given the prompt below:In a game of American Football, there are several factors to take into consideration when detailing the rules of the game. The goal of the game is to move the football across the field into the endzone of the defending team through a series of plays, which form a drive. In each play, the attacking team may either gain or lose a number of yards, that is, their position on the field moves either towards or away from the defending team\u2019s endzone.\nIn the simplified version of football that we consider, a team has four chances (in up to four plays) to advance the ball $10$ yards downfield; if they are successful, they will have achieved a \u201cfirst down\u201d and keep possession of the ball. If they achieve a first down, they have another up to four plays to continue their drive towards the defending team\u2019s endzone. If they keep possession and reach the defending team\u2019s endzone, they will have achieved a Touchdown. If they are pushed back into their own endzone, a Safety occurs and ends the drive. Otherwise the team loses possession of the ball and Nothing happens.\nSadly, the outcome of a drive has been lost, and all that remains is the yards gained or lost on each play! Your job is to determine whether a Touchdown, Safety, or Nothing occurred on the given drive.\nFor simplicity, we assume that the team starts the drive on their own $20$ yard line on a $100$ yard field (with $0$ being the team\u2019s own endzone, and $100$ being the defending team\u2019s endzone). This means that a touchdown is scored if at least $80$ yards are gained in total, relative to the starting position, and without losing possession due to failing to get a first down. Note that it is possible for a team to score a Touchdown without getting a first down. A safety occurs if the team is pushed back $20$ yards from their original starting position, which would place them in their own endzone. Nothing occurs if neither of these events occurs.\n-----Input-----\nThe input starts of a line containing one integer $N$ ($1 \\le N \\le 15$), which is the number of plays that this given drive recorded. Following this line are $N$ integers representing the numbers of yards gained or lost on each particular play. Each given number is between $-100$ and $100$ yards (exclusive range) since that is the length of the football field.\n-----Output-----\nOutput a single word, the result of the drive! If a touchdown is achieved, output \u201cTouchdown\u201d, if a safety is achieved, output \u201cSafety\u201d, else output \u201cNothing\u201d. (Do not add a period at the end.) Once the outcome has been determined, your program should ignore any remaining yards listed in the drive.\n-----Examples-----\nSample Input:\n9\n10 3 8 22 -4 16 8 3 14\nSample Output:\nTouchdown\n\ndef",
        "answer": "def football_drive(n, yards):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2928,
        "prompt": "Complete the Python function given the prompt below:George has won the lottery and, being a nice guy, has decided to spread the wealth around. However, monetary gifts can be taxed once they get over a certain size\u2014the amount of tax depends on how much his friends have earned that year.\nThe amount of tax paid depends on tax bands. The bands start at zero. Each one takes a certain cut of income from the range of pre-tax income it covers. The final tax band applies to all income above its lower bound.\nGeorge is a savvy fellow and knows the number of tax bands, the amount of money each friend has earned and the amount he wants each friend to walk away with.\nHow much should George give to each friend before tax?\n-----Input-----\n - One line containing an integer $B$ ($1 \\le B \\le 20$): the number of tax bands.\n - $B$ further lines, each containing two real numbers: $s_ i$ ($0 < s_ i \\le 10^6$): the size in pounds of the $i^{th}$ tax band, and $p_ i$ ($0 \\le p_ i \\le 100$): the percentage taxation for that band.\n - One line containing a real number $P$ ($0 \\le P \\le 99.999$): the percentage tax on all income above other bands.\n - One line containing an integer $F$, ($0 < F \\le 20$): the number of friends George wants to pay.\n - $F$ further lines, each containing two real numbers $e_ j$ and $m_ j$ ($0 \\le e_ j \\le 10^6$, $0 < m_ j \\le 10^6$): the amount of money the $j^{th}$ friend has earned, and the amount of money they should receive after tax respectively.\nTax bands will be given in increasing order. All real numbers have at most $6$ decimals after the decimal point.\n-----Output-----\n - $F$ lines, one for each friend specified in the input and in the same order.\nEach line should contain one real number: the amount of money George will give to his friend, in order to arrive at the correct amount after they have paid tax.\nAll output must be accurate to an absolute or relative error of at most $10^{-6}$.\n-----Examples-----\nSample Input:\n1\n1000 0\n20\n3\n0.0 500\n999.5 500\n1000.0 500\nSample Output:\n500.000000\n624.875000\n625.000000\n\ndef",
        "answer": "def gge(b, s, p, f, e, m):\n    tax = 0\n    for i in range(b):\n        if s[i] <= e:\n            tax += p[i] * (e - s[i])\n    return tax + f * m",
        "difficulty": "interview"
    },
    {
        "task_id": 2929,
        "prompt": "Complete the Python function given the prompt below:It is monsoon season, and your goldfish Orange is stuck at the bottom of a cave system in Thailand. Every hour, the water rises by $1$ meter. Thankfully, Orange has the ability to swim instantaneously from one location to another. However, he can\u2019t hop over the sharp rocks in the way.\nYou trust that Orange is smart and will find the way out of the cave as soon as possible. To prepare Orange\u2019s meal, you want to write a program to find out how long it will take for Orange to come back home.\nYou are given the cave system as an $N \\times N$ grid where each location $(i, j)$ contains a nonnegative integer, $h_{i, j}$, representing the height of the rocks in meters at that location. Orange can only swim left, right, up, or down from one submerged location to another submerged location (but not diagonally).\nA location $(i, j)$ is submerged if the water level is at least $1$ meter higher than $h_{i, j}$. Orange\u2019s starting location will always be at $(0, 0)$, with $h_{0, 0} = 0$. The initial water level is $1$ meter so that Orange\u2019s start location is submerged. The only exit in the cave is at location $(N - 1, N - 1)$. After how many hours can Orange find his way to the exit?\n-----Input-----\nThe input consists of one integer, $N$, on the first line such that $2 \\leq N \\leq 100$, followed by $N$ lines with $N$ integers each, separated by spaces, such that each integer represents the height $h_{i, j}$ ($1 \\le h_{i, j} \\le 10^8$) of the rocks at location $(i, j)$.\n-----Output-----\nOutput a single integer, which is the minimum number of hours that must pass before Orange can reach the exit.\n-----Examples-----\nSample Input:\n2\n0 3\n2 4\nSample Output:\n4\n\ndef",
        "answer": "def find_path(grid):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2930,
        "prompt": "Complete the Python function given the prompt below:A sequence of integers is said to Zigzag if adjacent elements alternate between strictly increasing and strictly decreasing. Note that the sequence may start by either increasing or decreasing. Given a sequence of integers, determine the length of the longest subsequence that Zigzags. For example, consider this sequence:\n1 2 3 4 2\nThere are several Zigzagging subsequences of length $3$:\n1 3 2        1 4 2        2 3 2        2 4 2        3 4 2\nBut there are none of length greater than $3$, so the answer is $3$.\n-----Input-----\nEach input will consist of a single test case. Note that your program may be run multiple times on different inputs. The first line of input contains an integer $n$ ($1 \\le n \\le 1000000$) which is the number of integers in the list. Each of the following $n$ lines will have an integer $k$ ($1 \\le k \\le 1000000$).\n-----Output-----\nOutput a single integer, which is the length of the longest Zigzagging subsequence of the input list.\n-----Examples-----\nSample Input:\n5\n1\n2\n3\n4\n2\nSample Output:\n3\n\ndef",
        "answer": "def longestZigZag(arr):\n    # Write your code here\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return 1\n    if len(arr) == 2:\n        if arr[0] > arr[1]:\n            return 2\n        else:\n            return 1\n    if len(arr) == 3:\n        if arr[0] > arr[1] and arr[1] > arr[2]:\n            return 3\n        else:\n            return 2\n    if len(arr) == 4:\n        if arr[0] > arr[1] and arr[1] > arr[2] and arr[2] > arr[3]:\n            return 4\n        else:\n            return 3\n    if len(arr) == 5:\n        if arr[0] > arr[1] and arr[1] > arr[2] and arr[2] > arr[3] and arr[3] > arr[4]:\n            return 5\n        else:\n            return 4\n    if len(arr) == 6:\n        if arr[0] > arr[1] and arr[1] > arr[2] and arr[2] > arr[3] and arr[3] > arr[4] and arr[4] > arr[5]:\n            return 6\n        else:\n            return 5\n    if len(arr) == 7:\n        if arr[0] > arr[1] and arr[1] > arr[2] and arr[2] > arr[3] and arr[3] > arr[4] and arr[4] > arr[5] and arr[5] > arr[6]:\n            return 7\n        else:\n            return 6\n    if len(arr) == 8:\n        if arr[0] > arr[1] and arr[1] > arr[2] and arr[2] > arr[3] and arr[3] > arr[4] and arr[4] > arr[5] and arr[5] > arr[6] and arr[6] > arr[7]:\n            return 8\n        else:\n            return 7\n    if len(arr) == 9",
        "difficulty": "interview"
    },
    {
        "task_id": 2931,
        "prompt": "Complete the Python function given the prompt below:The 3rd round of COCI is already here! In order to bet on predict the scores, we have assumed the following:\n - If contestant $A$ scored strictly more points than contestant $B$ in each of the first two rounds, then in the third round $A$ will score at least an equal amount of points as $B$.\nOf course, in each round (including this one, the 3rd one) it is possible to score from 0 to 650 points. On the total ranking list, contestants are sorted descending according to the sum of points from all three rounds. The contestants with an equal sum share the same place and the next contestant gets the realistic following place. For example, contestants with sums equal to 1000, 1000, 900, 900 and 800 points win places 1, 1, 3, 3 and 5, respectively.\nFor each of the $N$ contestants, we know the number of points scored in the first and second round. Given the aforementioned assumption, determine the highest and lowest place each contestant can get on the total ranking list after three rounds of COCI.\n-----Input-----\nThe first line of input contains an integer $N$ ($1 \\leq N \\leq 500000$), the number of contestants.\nEach of the following $N$ lines contains two integers from the interval $[0, 650]$: the number of points each contestant won in the first and second round.\n-----Output-----\nFor each contestant, in the order given in the input, output two integers per line: the required highest and lowest place they can get on the total ranking list.\n-----Examples-----\nSample Input:\n5\n250 180\n250 132\n220 123\n132 194\n220 105\nSample Output:\n1 3\n1 3\n3 5\n1 5\n3 5\n\ndef",
        "answer": "def COCI(N):\n    # Enter your code here\n    pass\n",
        "difficulty": "interview"
    },
    {
        "task_id": 2932,
        "prompt": "Complete the Python function given the prompt below:You have a string $s$ and you may modify it by making long swaps of its letters. Two letters can be swapped if their positions differ by at least $k$. That is, you may swap the $i$-th letter with the $j$-th letter in $s$ if $|i - j| \\geq k$. Is it possible to sort all the letters in $s$ increasingly, if you are allowed to swap any number of times (possibly zero)?\n-----Input-----\nThe first line has a string $s$ ($2 \\leq |s| \\leq 100$) and an integer $k$ ($1 \\leq k \\leq |s| - 1$), separated by a single space. The string $s$ consists of only lowercase letters.\n-----Output-----\nIf it is possible to sort the letters increasingly, output \u201cYes\u201d. Otherwise output \u201cNo\u201d.\n-----Examples-----\nSample Input:\nprognova 4\nSample Output:\nYes\n\ndef",
        "answer": "def swap(s, i, j):\n    s = s[:i] + s[j] + s[i+1:j] + s[i] + s[j+1:]\n    return s",
        "difficulty": "interview"
    },
    {
        "task_id": 2933,
        "prompt": "Complete the Python function given the prompt below:Wallace the Weightlifting Walrus is training for a contest where it will have to lift $1000$ kg. Wallace has some weight plates lying around, possibly of different weights, and its goal is to add some of the plates to a bar so that it can train with a weight as close as possible to $1000$ kg.\nIn case there exist two such numbers which are equally close to $1000$ (e.g. $998$ and $1002$), Wallace will pick the greater one (in this case $1002$).\nHelp Wallace the Weightlifting Walrus and tell it which weight it will have to lift.\n-----Input-----\nThe first line of the input contains the number of plates $n$ ($1 \\leq n \\leq 1000$). Each of the following $n$ lines contains one positive integer less than or equal to $1000$, denoting the weight of each plate.\n-----Output-----\nOutput one integer, the combined weight closest to $1000$.\n-----Examples-----\nSample Input:\n4\n900\n500\n498\n4\nSample Output:\n1002\n\ndef",
        "answer": "def closest_weight(n, weights):\n    weights.sort()\n    return weights[-1]",
        "difficulty": "interview"
    },
    {
        "task_id": 2934,
        "prompt": "Complete the Python function given the prompt below:Pierre is famous for his macarons. He makes round macarons, stored in square boxes of size $1\\times 1$, and oval-shaped macarons, stored in rectangular boxes of size $1\\times 2$ (or, rotated, in rectangular boxes of size $2\\times 1$). For the purpose of a buffet, Pierre wishes to tile a rectangular table of size $N\\times M$ with the two kinds of macarons, meaning that the table must be completely full, with no empty space left. The width $N$ of the table is small, for the guest to be able to grab the macarons easily, and the length $M$ of the table is large, to accommodate a huge number of guests. To keep the table pretty, the orientation of macarons should always be aligned with the sides of the table.\nPierre wishes to know how many ways there are to tile the table. Can you help him?Input\nThe input consists of the following integers:\n - the value of $N$, an integer, on the first line;\n - the value of $M$, an integer, on the second line.Limits\nThe input satisfies $1 \\leq N \\leq 8$ and $1 \\leq M \\leq 10^{18}$.Output\nThe output should consist of the total number of tilings, given modulo $10^9$, on a single line.\n-----Examples-----\nSample Input:\n2\n2\nSample Output:\n7\n\ndef",
        "answer": "def count_tilings(n, m):\n    return (n + m - 1) * (n + m) / 2",
        "difficulty": "interview"
    },
    {
        "task_id": 2935,
        "prompt": "Complete the Python function given the prompt below:Peter returned from the recently held ACM ICPC World Finals only to find that his return flight was overbooked and he was bumped from the flight! Well, at least he wasn\u2019t beat up by the airline and he\u2019s received a voucher for one free flight between any two destinations he wishes.\nHe is already planning next year\u2019s trip. He plans to travel by car where necessary, but he may be using his free flight ticket for one leg of the trip. He asked for your help in his planning.\nHe can provide you a network of cities connected by roads, the amount it costs to buy gas for traveling between pairs of cities, and a list of available flights between some of those cities. Help Peter by finding the minimum amount of money he needs to spend to get from his hometown to next year\u2019s destination!\n-----Input-----\nThe input consists of a single test case. The first line lists five space-separated integers $n$, $m$, $f$, $s$, and $t$, denoting the number of cities $n$ ($0 < n \\le 50000$), the number of roads $m$ ($0 \\le m \\le 150000$), the number of flights $f$ ($0 \\le f \\le 1000$), the number $s$ ($0 \\le s < n$) of the city in which Peter\u2019s trip starts, and the number $t$ ($0 \\le t < n$) of the city Peter is trying to travel to. (Cities are numbered from $0$ to $n-1$.)\nThe first line is followed by $m$ lines, each describing one road. A road description contains three space-separated integers $i$, $j$, and $c$ ($0 \\le i, j < n, i \\ne j$ and $0 < c \\le 50000$), indicating there is a road connecting cities $i$ and $j$ that costs $c$ cents to travel. Roads can be used in either direction for the same cost. All road descriptions are unique.\nEach of the following $f$ lines contains a description of an available flight, which consists of two space-separated integers $u$ and $v$ ($0 \\le u, v < n$, $u \\ne v$) denoting that a flight from city $u$ to city $v$ is available (though not from $v$ to $u$ unless listed elsewhere). All flight descriptions are unique.\n-----Output-----\nOutput the minimum number of cents Peter needs to spend to get from his home town to the competition, using at most one flight. You may assume that there is a route on which Peter can reach his destination.\n-----Examples-----\nSample Input:\n8 11 1 0 5\n0 1 10\n0 2 10\n1 2 10\n2 6 40\n6 7 10\n5 6 10\n3 5 15\n3 6 40\n3 4 20\n1 4 20\n1 3 20\n4 7\nSample Output:\n45\n\ndef",
        "answer": "def find_cheapest_flight(n, m, f, s, t):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2936,
        "prompt": "Complete the Python function given the prompt below:You may have heard of the \u201cmaximum subarray problem\u201d from your university\u2019s undergraduate algorithms course. The problem goes like this: You are given an array $A$ of $n$ integers, and the task is to find a contiguous subarray of $A$ whose sum is maximum. For example, in the array below:\\[ \\texttt{A := [-2, 3, 5, -7, 8, 13, -20, 14, 1]}, \\]\nthe solution is the subarray from the second index (the number $3$) to the sixth index (the number $13$), with total sum $22$. The problem can be solved via divide and conquer, in $O(n \\log n)$ time, or dynamic programming, in $O(n)$ time.\nBeing a strong student in algorithms yourself, you are of course familiar with both approaches, so we won\u2019t bother explaining them here. However, your classmate Steve, a not-so-strong student in algorithms, has been bragging to you about the maximum subarray problem. He claims that not only can he solve the maximum subarray problem in linear time, he can even solve what he calls the \u201c$k$-maximum subarray problem,\u201d ALSO in linear time! What is the \u201c$k$-Maximum subarray problem,\u201d you ask? In a condescending tone, Steve explains: It is the natural generalization of the maximum subarray problem. Given an array $A$ of $n$ integers, you must find $k$ disjoint, contiguous subarrays of $A$ so that their total sum is maximum.\nYou\u2019re not at all confident that Steve knows how to solve the \u201c$k$-maximum subarray problem\u201d in linear time, let alone that there even exists a linear time solution. You have gone to every algorithms lecture, however, a near-infinite improvement on Steve\u2019s attendance, and so you believe if anyone is to be the authority on the problem, it probably should be you.\nYou decide to write a program to solve the \u201c$k$-maximum subarray problem.\u201d You can use this to verify Steve\u2019s likely-incorrect algorithm. To simplify things, you make the program just output the value of an optimal solution. You can modify it later if you want the solution itself. Furthermore, you decide your algorithm is sufficiently efficient as long as its running time is bounded by a small polynomial in $n$ and $k$. You think coming up with an actually-correct linear time solution would probably take you awhile, and you\u2019ve decided you only want to spend, say, a maximum of five hours on your code.\n-----Input-----\nThe input will consist of two lines. On the first line are the integers $n$ and $k$, ($1 \\leq k \\leq n \\leq 5000$). On the second line are $n$ integers, representing the array $A$. The integers in array $A$ will be between $-10^9$ and $10^9$, inclusive.\n-----Output-----\nOutput the maximum possible total sum of $k$ disjoint contiguous subarrays of array $A$. Although the subarrays are required to be disjoint, a subarray may end at index $i$ and another subarray start at index $i+1$. No subarray is allowed to be empty.\n-----Examples-----\nSample Input:\n9 1\n-2 3 5 -7 8 13 -20 14 1\nSample Output:\n22\n\ndef",
        "answer": "def max_subarray(k, A):\n    if k == 1:\n        return max(A)\n    else:\n        return max(max_subarray(k-1, A[1:]), max_subarray(k, A[1:]))",
        "difficulty": "interview"
    },
    {
        "task_id": 2937,
        "prompt": "Complete the Python function given the prompt below:An elementary school class is going on a road trip by bus to a computer factory. However, the driver is really tired of having to drive fighting kids all day, so she suggested that the class should split up and go to the factory in groups. She has already observed which kids dislike each other and are likely to fight, so she wants to make sure they do not end up in the same group. Of course, driving everyone one-by-one is a waste of time and money, so the driver wants to minimize the number of groups she has to drive. In addition, the bus is pretty small, and may only fit up to $c$ kids at a time. \nYou are to write a program which helps her with the task of making these groups. Given the number of kids and their enemies, find the minimum number of groups required, as well as a division of the class into this minimum number of groups\n-----Input-----\nThe first line contains three integers $n$, $k$, and $c$ ($1 \\le n \\le 17$, $0 \\le k \\le \\frac{n(n-1)}{2}$ and $1 \\le c \\le n$) \u2013 the number of kids, pairs of enemies, and the capacity of the bus, respectively. Then follow $n$ lines with the kids\u2019 names. Each name consists solely of the characters A-Z and a-z, is non-empty, and at most $10$ characters long. Then follow $k$ lines, each containing a pair of space-separated names indicating a pair of kids that dislike each other. No pair of names appears twice, and no kid is their own enemy.\n-----Output-----\nOn the first line, output the minimum number of groups, followed by one line per group containing the names of the children in that group (separated by spaces).\n-----Examples-----\nSample Input:\n2 0 1\nAlice\nBob\nSample Output:\n2\nAlice\nBob\n\ndef",
        "answer": "def minimumGroups(n, k, c):\n    # Write your code here",
        "difficulty": "interview"
    },
    {
        "task_id": 2938,
        "prompt": "Complete the Python function given the prompt below:Chess has been a long time passion of Yraglac. He spents at least an hour per day playing chess matches online or reading chess tactics books. The game is played by two players on an $8 \\times 8$ grid, with each player taking turns to move a piece.\nIn this problem, we will consider a simplified variant of chess consisting of two kinds of pieces: kings and rooks. Kings can move one square in any direction while rooks can move any number of squares up/down or left/right. Pieces can either move to an unoccupied square or to a square occupied by an opponent\u2019s piece, which is captured and removed from play. A piece is threatened when an opponent\u2019s piece is able to capture the piece in a single move. It is illegal to move one own\u2019s king to a position where it is threatened (but it is legal to do so for a rook).\nA player is considered to be in checkmate when it is their turn, their king is threatened, and all possible moves will result in the king still being threatened.\nYraglac is a skilled player and has managed to reach a situation where he has one king and one rook, while his opponent only has one king. Given that it is Yraglac\u2019s turn, can he checkmate his opponent in a single move?\n-----Input-----\nThe input consists of a single test case representing a chessboard. It will consist of eight lines with eight characters each, where \u201cR\u201d represents Yraglac\u2019s rook, \u201cK\u201d represents Yraglac\u2019s king, \u201ck\u201d represents the opponent\u2019s king, and \u201c.\u201d represents an empty square. It is guaranteed that Yraglac will have exactly one king and one rook, while his opponent will only have one king. It is also guaranteed that no king will be threatened.\n-----Output-----\nOutput \u201cYes\u201d if Yraglac can checkmate his opponent in a single move, or \u201cNo\u201d otherwise.\n-----Explanation of Sample Input-----\nIn the first sample, Yraglac can checkmate his opponent by moving his rook to the bottom right square. In the second sample, there is no single move that will checkmate his opponent.\n-----Examples-----\nSample Input:\n........\n........\n........\n........\n.....K.k\n........\n........\nR.......\nSample Output:\nYes\n\ndef",
        "answer": "def check_checkmate(board):\n    # Write your code here\n    # board = [list(row) for row in board]\n    # print(board)\n    # print(board[0][0])\n    # print(board[0][1])\n    # print(board[0][2])\n    # print(board[0][3])\n    # print(board[0][4])\n    # print(board[0][5])\n    # print(board[0][6])\n    # print(board[0][7])\n    # print(board[1][0])\n    # print(board[1][1])\n    # print(board[1][2])\n    # print(board[1][3])\n    # print(board[1][4])\n    # print(board[1][5])\n    # print(board[1][6])\n    # print(board[1][7])\n    # print(board[2][0])\n    # print(board[2][1])\n    # print(board[2][2])\n    # print(board[2][3])\n    # print(board[2][4])\n    # print(board[2][5])\n    # print(board[2][6])\n    # print(board[2][7])\n    # print(board[3][0])\n    # print(board[3][1])\n    # print(board[3][2])\n    # print(board[3][3])\n    # print(board[3][4])\n    # print(board[3][5])\n    # print(board[3][6])\n    # print(board[3][7])\n    # print(board[4][0])\n    # print(board[4][1])\n    # print(board[4][2])\n    # print(board[4][3])\n    # print(board[4][4])\n    # print(board[4][5])\n    # print(board[4][6])\n    # print(board[4][7])\n    # print(board[5][0])\n    # print(board[5][1])\n    ",
        "difficulty": "interview"
    },
    {
        "task_id": 2939,
        "prompt": "Complete the Python function given the prompt below:A town is often divided into zones, e.g, industrial zones, commercial zones, and residential zones. If some residential zone is very far from all commercial zones, then the people living there will have a long journey whenever they want to do some shopping, and this is undesirable.\nThe input will consist of an $n\\times n$ grid of square zones. Each zone is labeled 1 (residential), 2 (industrial), or 3 (commercial). When travelling from one zone to another you are allowed to move north, east, south or west, and the distance travelled is the number of zone boundaries you traverse. So the distance between two adjacent zones is $1$, and the distance from the zone in square $(1,1)$ (the most south-westerly zone) to the zone in square $(2,3)$ is $3$ (one step east and two steps north). You may never move off the grid.\nYour task is to find the longest distance one has to travel from a residential zone to get to the commercial zone closest to that residential zone.\n-----Input-----\nThe first line of input contains an integer $n$, $2\\leq n\\leq 1500$, followed by $n$ lines of length $n$ giving the map of the city zones as an $n\\times n$ matrix where each entry is 1, 2, or 3 depending on zone type. You can assume that the city has zones of all three types.\n-----Output-----\nOutput a single integer $d$, the largest distance from a residential zone to its closest commercial zone.\n-----Examples-----\nSample Input:\n4\n1223\n2123\n2213\n3212\nSample Output:\n3\n\ndef",
        "answer": "def max_distance(grid):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2940,
        "prompt": "Complete the Python function given the prompt below:You are the boss of ACM (Association for Control over Minds), an upstanding company with a single goal of world domination.\nYesterday, you woke up, and saw that the weather was clear, and the birds were singing. \u201cAnother day, another world domination plan\u201d, you sang to yourself as you devised your next world domination plan involving the illusory mind control potions.\nThere\u2019s only one insignificant problem you have to solve before you can execute this perfection of a plan: you don\u2019t know the correct recipe for the mind control potion. You asked the local Panda-breed brewmaster for the recipe, but unfortunately he didn\u2019t know either. Instead, he gave you the mysterious tome titled The Root of all Evil (written by Halim the White). You read the evil book under candle light, and wrote down all the potion recipes contained inside the book. \u201cOne of them must be the formula for the mind control potion, I\u2019m sure of it!\u201d, you said to yourself. You numbered these recipes from $1$ through $N$. \u201cI just need to try concocting all of these recipes!\u201d, you hummed to yourself.\nToday, you woke up, and saw that the weather was clear, and\u2026, anyway. You have purchased all the utensils and ingredients from the local grocery \u2014 onion, carrot, broom, vials, cauldrons, bat wings, \u2026, all common grocery items. Now, you are ready to begin your experiments, but then you notice that some of the recipes share common ingredients! Unfortunately, you only bought one of each ingredient with you. \u201cOh no! What should I do now?!\u201d, you panicked.\n\u201cI\u2019ll just create some of the potions today, and do the remaining ones later.\u201d, you resolved. You consider all your recipes one by one in order by their number from recipe $1$ through recipe $N$. For each recipe, if you are not able to concoct this potion (explained in the next paragraph), you skip this recipe, and consider the next one, if any. Otherwise, even though it may cause some of the next potions to no longer be concoctable, you concoct this recipe. Thus, whether to concoct a potion is not a choice. It\u2019s simply determined by whether it is possible or not to do so when you consider the potion.\nIn order to concoct a potion, you first prepare a new empty cauldron (you managed to procure an infinite number of cauldrons from the grocery store). Then, you combine all of the ingredients required for this potion and nothing else in this cauldron (that is, the cauldron cannot contain any ingredients not listed in the recipe). For the ingredients that have not been used for any of the previous potions that you\u2019ve decided to concoct, you can simply put it into this cauldron. You can also pour the entire content of the cauldron used for one of your previous concoctions into this cauldron, thus mixing in all of the ingredients contained inside the cauldron (since you pour all of the content of the cauldron, this previous concoction can no longer be used for any of your next concoctions). Finally, you stir this cauldron with your broom and take a vial of the concoction to test on your minions later. The remaining concoction remains in this cauldron, and can be poured into another cauldron later.\n\u201cWhat is the number of recipes you will concoct this way today?\u201d, you asked yourself.\n-----Input-----\nThe first line contains a non-negative integer $2 \\leq N \\leq 200000$, giving the total number of recipes you have. Thereafter follow $N$ lines, the $i$-th line describes recipe number $i$. Each of these lines is a single space separated list of integers. Each of these lines begins with an integer $1 \\leq M$, denoting the number of ingredients required to make this recipe. Then, $M$ integers follow, describing the required ingredients. The ingredients are identified by integers between $0$ and $500000$, inclusively, with different integers denoting different ingredients. For each recipe, all of its ingredients will be distinct. The sum of $M$ over all recipes will be no greater than $500000$.\n-----Output-----\nPrint the number of recipes you will concoct.Sample Data Explanation\nIn the first example, the first potion can be concocted, since both ingredients were not used so far. Thus, you will concoct this potion. The second potion will also be concocted for the same reason. The third potion cannot be concocted, since ingredient $1$ is no longer present, and is inside a cauldron mixed with another ingredient not present in the recipe. The fourth potion can be concocted by pouring the content of the cauldrons used for the first and second concoctions, and then adding ingredient $5$, which has remained unused so far. The last potion cannot be concocted, since the content of the cauldron for the first potion has all been poured when making the fourth potion and thus is now mixed with other ingredients not present in the recipe.\nFor the second example, since the first potion can be concocted, it has to be concocted. Thus, the second and third potions can no longer be concocted.\n-----Examples-----\nSample Input:\n5\n2 1 2\n2 3 4\n2 1 5\n5 1 2 3 4 5\n2 1 2\nSample Output:\n3\n\ndef",
        "answer": "def main():\n    n = int(input())\n    for i in range(n):\n        m = int(input())\n        l = list(map(int, input().split()))\n        l.sort()\n        if l[0] > 500000:\n            print(0)\n        else:\n            print(1)",
        "difficulty": "interview"
    },
    {
        "task_id": 2941,
        "prompt": "Complete the Python function given the prompt below:You work at a clinic. The clinic factors in the waiting time when selecting patients to treat next. This approach was adopted to prevent patients from having to wait too long before being treated. Your task is to help the clinic perform $3$ types of queries:\n - Process a patient arrival to the clinic. The patient will have an arrival time $T$, a name $M$, and a severity $S$ that is accessed automatically by scanners at the entrance.\n - At time $T$, the doctor is ready to treat a patient. Every time this happens, the clinic will calculate priority values for every patient waiting in the clinic, and the patient with the highest priority value will be treated first. The priority value is computed as the following sum\\[ S + K \\cdot W \\]\nwhere $S$ is the severity value of the patient, $K$ is the constant that the clinic uses, and $W$ is the total time the patient has been waiting in the clinic. If there are multiple patients with that value, the patient with the lexicographically smallest name is treated next. Your program will announce the name of that patient.\n - At time $T$, the clinic receives a notification stating that, due to unfortunate circumstances, a patient with name $M$ has left the queue permanently. If no patient with name $M$ exists in the queue, it is always a false alarm and will be ignored by the clinic. Otherwise, the notification is guaranteed to be valid and should be processed accordingly.\n-----Input-----\nThe first line of the input contains $2$ integers, $1 \\leq N \\leq 200000$, the number of queries to be processed, and $0 \\leq K \\leq 10000000$, the constant for the clinic. $N$ lines follow, each line beginning with an integer $Q$ where $Q$ = $1$, $2$ or $3$. $Q = 1$ denotes a query of the first type and will be followed by an integer $T$, a string $M$ and an integer $S$. $Q = 2$ denotes a query of the second type and will be followed by an integer $T$. $Q = 3$ denotes a query of the third type and will be followed by an integer $T$ and a string $M$. For all queries, $0 \\leq T,S \\leq 10000000$, and $T$ values are strictly increasing. $M$ is a non-empty alphanumeric string containing no spaces, and contains at most $10$ characters. All patients have unique names. There is at least one query of the second type.\n-----Output-----\nFor each query of the second type, output the name of the patient who will be treated on a new line. If the clinic is empty, print the string \u201cdoctor takes a break\u201d (without quotes) on a new line instead.\n-----Subtasks-----\n - (28 Points): $1 \\leq N \\leq 10,000$. There is no query of type $3$. You can assume that $K = 0$.\n - (32 Points): $1 \\leq N \\leq 10,000$. There is no query of type $3$.\n - (20 Points): There is no query of type $3$.\n - (20 Points): No additional constraints.\n-----Warning-----\nThe I/O files are large. Please use fast I/O methods.\n-----Examples-----\nSample Input:\n5 1\n1 10 Alice 5\n1 15 Bob 15\n2 20\n2 25\n2 30\nSample Output:\nBob\nAlice\ndoctor takes a break\n\ndef",
        "answer": "def clinic(N, K, queries):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2942,
        "prompt": "Complete the Python function given the prompt below:Susan is making high-speed videos of falling coffee mugs. When analyzing the videos she wants to know how big the mugs are, but unfortunately they all got destroyed during filming. Susan knows some physics though, so she has figured out how far they moved between different video frames. The camera was filming at a speed of $70$ frames per second, which means that at frame $n$, counted from when the mug was released, the number of millimeters it has moved is $d=n^2$. The counting of the frames starts at $0$.\nSusan thinks a certain mug is $D$ millimeters high, but to verify this she needs to find two frames between which the mug has moved exactly this distance. Can you help her do this?\n-----Input-----\nThe input file contains the single positive integer $D\\leq 200000$, the distance to be measured.\n-----Output-----\nOutput two non-negative integers $n_1$ and $n_2$, the numbers of the frames that Susan should compare. They should fulfill $n_2^2-n_1^2=D$. If no two such integers exist, instead output \u201cimpossible\u201d.\n-----Examples-----\nSample Input:\n88\nSample Output:\n9 13\n\ndef",
        "answer": "def solve(D):\n    n = 0\n    while n**2 < D:\n        n += 1\n    if n**2 == D:\n        return n, n\n    elif n**2 > D:\n        return \"impossible\"",
        "difficulty": "interview"
    },
    {
        "task_id": 2943,
        "prompt": "Complete the Python function given the prompt below:Purple rain falls in the magic kingdom of Linearland which is a straight, thin peninsula. \nOn close observation however, Prof. Nelson Rogers finds that actually it is a mix of Red and Blue drops.\nIn his zeal, he records the location and color of the raindrops in different locations along the peninsula. Looking at the data, Professor Rogers wants to know which part of Linearland had the \u201cleast\u201d purple rain.\nAfter some thought, he decides to model this problem as follows. Divide the peninsula into $n$ sections and number them West to East from $1$ to $n$. Then, describe the raindrops as a sequence of R and B, depending on whether the rainfall in each section is primarily red or blue. Finally, find a subsequence of where the difference between the number of R and the number of B is maximized.\n-----Input-----\nThe input consists of a single line containing a string of $n$ characters ($1 \\le n \\le 10^5$), describing the color of the raindrops in sections $1$ to $n$.\nIt is guaranteed that the string consists of uppercase ASCII letters \u2018R\u2019 and \u2018B\u2019 only.\n-----Output-----\nPrint, on a single line, two space-separated integers that describe the starting and ending positions of the part of Linearland that had the least purple rain.\nIf there are multiple possible answers, print the one that has the Westernmost (smallest-numbered) starting section. If there are multiple answers with the same Westernmost starting section, print the one with the Westernmost ending section.\n-----Examples-----\nSample Input:\nBBRRBRRBRB\nSample Output:\n3 7\n\ndef",
        "answer": "def max_rain(rain):\n    max_rain = 0\n    max_rain_start = 0\n    max_rain_end = 0\n    for i in range(len(rain)):\n        if rain[i] == 'R':\n            if rain[i-1] == 'R':\n                if rain[i-2] == 'R':\n                    if rain[i-3] == 'R':\n                        if rain[i-4] == 'R':\n                            if rain[i-5] == 'R':\n                                if rain[i-6] == 'R':\n                                    if rain[i-7] == 'R':\n                                        if rain[i-8] == 'R':\n                                            if rain[i-9] == 'R':\n                                                if rain[i-10] == 'R':\n                                                    if rain[i-11] == 'R':\n                                                        if rain[i-12] == 'R':\n                                                            if rain[i-13] == 'R':\n                                                                if rain[i-14] == 'R':\n                                                                    if rain[i-15] == 'R':\n                                                                        if rain[i-16] == 'R':\n                                                                            if rain[i-17] == 'R':\n                                                                                if rain[i-18] == 'R':\n                                                                                    if rain[i-19] == 'R':\n                                                                                        if rain[i-20] == 'R':\n                                                                                            if rain[i-21] == 'R':\n                                                                                                if rain[i-22] == 'R':\n                                                                                                    if rain[i-23] == 'R':\n                                                                                                        if rain[i-24] == 'R':\n                                                                                                            if rain[i-25] == 'R':\n                                                                                                                if rain[i-26] == 'R':\n                                                                                                                    if rain[i-27] == 'R':\n                               ",
        "difficulty": "interview"
    },
    {
        "task_id": 2944,
        "prompt": "Complete the Python function given the prompt below:According to Wikipedia, to hear something \u201cthrough the grapevine\u201d is to learn of something informally and unofficially by means of gossip or rumor. In this problem, you are tasked with determining how many people will hear about a particular rumor \u201cthrough the grapevine\u201d after a certain number of days.\nRumors are always started by a single person. On any given day, a person who knows the rumor can spread it by telling the people that they know. Upon hearing of the rumor, that person must wait until the following day before they can begin to spread it themselves. Furthermore, some people are skeptical and will only spread the rumor once they\u2019ve heard it from a number of distinct sources. However once a person has heard the rumor from enough people, they will always try to spread the rumor to as many people as possible.\n-----Input-----\nThe first line will contain three integers: $0 < n \\leq 100000$, $0 < m \\leq 100000$, and $0 \\leq d \\leq 10000$, where $n$ is the number of people, $m$ is the number of connections, and $d$ is the number of days that elapse.\nThe next $n$ lines will each consist of a unique string $s$ and an integer $0 \\leq t \\leq 1000$ where $s$ is the name of a person and $t$ is their level of skepticism. In other words, person $s$ must hear the rumor from $t$ distinct other people before $s$ will begin spreading the rumor.\nThis is followed by $m$ lines each consisting of two strings $u$ and $v$ which indicates that person $u$ and person $v$ know each other. Each of these lines represents a unique pair of persons.\nThe final line will contain a single string $r$, the name of the person that the rumor originates from. Note that $r$ is the only person with skepticism $t = 0$. All strings are between $1$ and $20$ characters long and consists only of English lowercase or uppercase letters and digits.\n-----Output-----\nOutput a single integer: the number of people (not including person $r$) that have heard the rumor after $d$ days.\n-----Examples-----\nSample Input:\n3 2 1\nAlice 0\nBob 1\nCarol 1\nAlice Bob\nBob Carol\nAlice\nSample Output:\n1\n\ndef",
        "answer": "def gossip(n, m, d, s, t, u, v):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2945,
        "prompt": "Complete the Python function given the prompt below:The local zoo has acquired a large open garden in which animals may freely move as in their natural habitats and entertain visitors with their usual shenanigans.\nThe most popular animals are monkeys. With their climbing and jumping and other skills, they delight old and young visitors alike.\nOne species of monkey has specialized in climbing tall trees and picking off coconuts. Another species has specialized in breaking them open.\nThere are $N$ monkeys of the first type (numbered 1 through $N$) and $M$ monkeys of the second type (numbered 1 through $M$).\nMonkey $k$ of the first type takes $A_ k$ seconds to find a good spot on the tree, after which it picks off its first coconut. After that the monkey produces a new coconut every $B_ k$ seconds.\nMonkey $k$ of the second type takes $C_ k$ seconds to find a good tool for opening the coconuts, after which it opens its first coconut. After that the monkey opens another coconut every $D_ k$ seconds.\nUnfortunately, the second type of monkey is extremely aggressive so the two types may not be in the garden at the same time. Therefore, zoo keepers will chase away the first type of monkeys as soon as they have picked off all the coconuts. Similarly, if monkeys of the same type stay too long after opening all the coconuts, fights will ensue. Because of that, zoo keepers will send them away as soon as they have opened all the coconuts.\nThe zoo keepers first arrive immediately after all coconuts have been picked, and again immediately after the monkeys open them all. The time needed for monkeys to enter or leave the garden is also negligibly small.\nTomislav especially likes the second type of monkey, but can never guess when to arrive in order to see them. Help him calculate the time when the second type arrives if he knows the total time that monkeys spent in the garden, but does not know the number of coconuts in the garden.\n-----Input-----\nThe first line contains the integer $T$ $(1 \\leq T \\leq 1000000000)$, the total time that monkeys spent in the garden, in seconds.\nThe next line contains the integer $N$ $(1 \\leq N \\leq 100)$, the number of monkeys of the first type. Each of the following $N$ lines contains two integers $A_ k$ and $B_ k$ $(1 \\leq A_ k, B_ k \\leq 1000000000)$, how fast monkey $k$ of the first type is.\nThe next line contains the integer $M$ $(1 \\leq M \\leq 100)$, the number of monkeys of the second type. Each of the following $M$ lines contains two integers $C_ k$ and $D_ k$ $(1 \\leq C_ k, D_ k \\leq 1000000000)$, how fast monkey $k$ of the second type is.\n-----Output-----\nOutput the number of seconds between the arrival of the first type of monkeys and the arrival of the second type.\n-----Examples-----\nSample Input:\n12\n1\n3 1\n1\n5 1\nSample Output:\n5\n\ndef",
        "answer": "def monkey_time(time, n, m):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2946,
        "prompt": "Complete the Python function given the prompt below:Simone is learning to trade crypto currencies. Right now, she is looking into a new currency called CryptoKattis. A CryptoKattis can be used to improve your Kattis ranklist score without having to solve problems.\nSimone, unlike most competitive programmers, is very perceptive of competition trends. She has lately noticed many coders talking about a new online judge called Doggo, and suspect that using the Kattis judge will soon fall out of fashion. This, of course, will cause the CryptoKattis to rapidly fall in value once demand fades.\nTo take advantage of this, Simone has performed very careful market research. This has allowed her to estimate the price of a CryptoKattis in dollars during the next $N$ days. She intends to use this data to perform a short sell. This means she will at some day borrow $100$ CryptoKattis from a bank, immediately selling the currency. At some other day, she must purchase the same amount of CryptoKattis to repay her loan. For every day between (and including) these two days, she must pay $K$ dollars in interest. What is the maximum profit Simone can make by carefully choosing when to borrow and repay the $100$ CryptoKattis?\n-----Input-----\nThe first line of the input contains two integers $1 \\le N \\le 100000$ and $1 \\le K \\le 100$. $N$ is the number of days you know the CryptoKattis price of, and $K$ is the cost in dollars of borrowing CryptoKattis per day.\nThe next line contains $N$ integers separated by spaces. These are the CryptoKattis prices during the $N$ days. Each CryptoKattis price is between $1$ and $100000$ dollars.\n-----Output-----\nOutput a single decimal number; the maximum profit you can make performing a short sell. If you cannot make a profit no matter what short sell you make, output $0$.\n-----Examples-----\nSample Input:\n5 10\n1000 980 960 940 10\nSample Output:\n98950\n\ndef",
        "answer": "def shortSell(n, k, prices):\n\t# Write your code here\n\t",
        "difficulty": "interview"
    },
    {
        "task_id": 2947,
        "prompt": "Complete the Python function given the prompt below:Lily is fascinated by numbers. She believes the whole world revolves around them, and that everything is connected by numbers. Her friends, Alice, Bob, Charlie and Diane, are not convinced. But she gives them an example:  Alice lives in house number 25 on her street, but that is exactly Bob\u2019s age. Bob is born on June 4th, and Charlie was his parents\u2019 fourth child. Finally, Diane has five fingers on her left hand, which happens to be the same as the number of toes that Bob has on his right foot! \nThis shows that her friends are all connected\u2014either directly or indirectly\u2014by numbers. But she still has to convince her family as well as her coworkers.\nGiven a group of $n$ individuals, and a set of numbers that describe each individual, help Lily come up with a proof that shows that everyone in this group is either directly or indirectly connected by numbers, or determine that this is not possible.\n-----Input-----\nThe input consists of:\n - One line with an integer $n$ ($2 \\leq n \\leq 2\\cdot 10^5$), the number of individuals in the group. The individuals are numbered from $1$ to $n$.\n - $n$ lines, describing the individuals in the group.\nThe $i$th such line starts with an integer $m_ i$ ($1 \\leq m_ i \\leq 2\\cdot 10^5$), the number of numbers that describe individual $i$.\nThe remainder of the line has $m_ i$ distinct integers $d_{i,1},\\ldots,d_{i,m_ i}$ ($1 \\leq d_{i,j} \\leq 10^9$ for each $j$), the set of numbers that describe individual $i$.\nIt is guaranteed that the sum over all $m_ i$ is at most $2\\cdot 10^5$.\n-----Output-----\nOutput a proof in the form of $n-1$ lines, each of which contains three integers $p$, $q$ and $r$, where $p$ and $q$ are distinct individuals that are both described by the number $r$. Using only these relations, it must be possible to show that any pair of individuals in the group are connected either directly or indirectly.\nIf no such proof exists, output \u201cimpossible\u201d. If there are multiple proofs, you may output any one of them.\n-----Examples-----\nSample Input:\n6\n2 17 10\n1 5\n2 10 22\n3 17 22 9\n2 17 8\n3 9 22 16\nSample Output:\nimpossible\n\ndef",
        "answer": "def isConnected(n, d):\n    if n == 1:\n        return True\n    if n == 2:\n        return d[0] == d[1]\n    if n == 3:\n        return d[0] == d[2] or d[1] == d[2]\n    if n == 4:\n        return d[0] == d[3] or d[1] == d[3] or d[2] == d[3]\n    if n == 5:\n        return d[0] == d[4] or d[1] == d[4] or d[2] == d[4] or d[3] == d[4]\n    if n == 6:\n        return d[0] == d[5] or d[1] == d[5] or d[2] == d[5] or d[3] == d[5] or d[4] == d[5]\n    if n == 7:\n        return d[0] == d[6] or d[1] == d[6] or d[2] == d[6] or d[3] == d[6] or d[4] == d[6] or d[5] == d[6]\n    if n == 8:\n        return d[0] == d[7] or d[1] == d[7] or d[2] == d[7] or d[3] == d[7] or d[4] == d[7] or d[5] == d[7] or d[6] == d[7]\n    if n == 9:\n        return d[0] == d[8] or d[1] == d[8] or d[2] == d[8] or d[3] == d[8] or d[4] == d[8] or d[5] == d[8] or d[6] == d[8] or d[7] == d[8]\n    if n == 10:\n        return d[0] == d[9] or d[1] == d[9] or d[2] == d[9] or d[3] == d[9]",
        "difficulty": "interview"
    },
    {
        "task_id": 2948,
        "prompt": "Complete the Python function given the prompt below:A land far, far away has N Members of Parliament (MP). They had a turbulent and passionate debate on the law on amendments to the law on a new referendum on referendums. From Monday to Friday, all MPs joyfully came to work and argued all day.\nA diligent news reporter photographed MPs at their workplace in the heat of the argument every working day of the week. What she captured on the photos are pairs of MPs fighting and scowling at each other. The five photographs have been forwarded to you for thorough analysis.\nIt is a fact that each MP belongs to one of the two political parties. Let\u2019s denote them with letters A and B. Your task is to estimate which MP belongs to which party, so that the following holds for your estimation: each MP argued with at most two distinct members of their own party.\n-----Input-----\nThe first line of input contains an integer $N$ ($2 \\leq N \\leq 200000$), the number of MPs. MPs are denoted with numbers from $1$ to $N$.\nThe following five lines describe the photographs taken from Monday to Friday. Each of the five lines contains the list of pairs of MPs that are arguing on the photograph that day (scowling at each other). Stated first is the number of pairs $P$ ($1 \\leq P \\leq N/2$), followed by $P$ pairs in the form \u201c$K$ $L$\u201d, where $K$ and $L$ are labels of MPs scowling at each other. Before each pair there is a double space.\nOf course, each MP is stated at most once per line, and no MP ever argues with herself.\n-----Output-----\nThe first and only line of output must contain an array consisting of only characters A and B, so that the $K$-th character denotes the party of $K$-th MP in a division that satisfies the given conditions.\nSince the solution isn\u2019t going to be unique, output any.\n-----Examples-----\nSample Input:\n7\n2  1 2  7 3\n2  1 3  7 4\n2  1 4  7 5\n2  1 5  7 6\n2  1 6  7 2\nSample Output:\nABBBBBA\n\ndef",
        "answer": "def party(n):\n    if n == 1:\n        return 'A'\n    elif n == 2:\n        return 'AB'\n    elif n == 3:\n        return 'ABBB'\n    elif n == 4:\n        return 'ABBBB'\n    elif n == 5:\n        return 'ABBBBB'\n    elif n == 6:\n        return 'ABBBBBB'\n    elif n == 7:\n        return 'ABBBBBBB'\n    elif n == 8:\n        return 'ABBBBBBBB'\n    elif n == 9:\n        return 'ABBBBBBBBB'\n    elif n == 10:\n        return 'ABBBBBBBBBB'\n    elif n == 11:\n        return 'ABBBBBBBBBBB'\n    elif n == 12:\n        return 'ABBBBBBBBBBBB'\n    elif n == 13:\n        return 'ABBBBBBBBBBBBB'\n    elif n == 14:\n        return 'ABBBBBBBBBBBBBB'\n    elif n == 15:\n        return 'ABBBBBBBBBBBBBBB'\n    elif n == 16:\n        return 'ABBBBBBBBBBBBBBBB'\n    elif n == 17:\n        return 'ABBBBBBBBBBBBBBBBB'\n    elif n == 18:\n        return 'ABBBBBBBBBBBBBBBBBB'\n    elif n == 19:\n        return 'ABBBBBBBBBBBBBBBBBBB'\n    elif n == 20:\n        return 'ABBBBBBBBBBBBBBBBBBBB'\n    elif n == 21:\n        return 'ABBBBBBBBBBBBBBBBBBBBB'\n    elif n == 22:\n        return 'ABBBBBBBBBBBBBBBBBBBBBB'\n    elif n == 23:\n        return 'ABBBBBBBBBBBBBBBBBBBBBBB'\n    elif n == 24:\n        return 'ABBBBBBBBBBBBBBBBBBBBBBBB'\n    elif n == 25:\n        return 'ABBBBBBBBBBB",
        "difficulty": "interview"
    },
    {
        "task_id": 2949,
        "prompt": "Complete the Python function given the prompt below:Last winter, an avalanche swept away all the ski lifts from the ski resort Valen. Instead of rebuilding the lifts like they were before, the plan is to do it in a more optimized way, and you are responsible for this. \nThe only thing remaining from the old lift system are $n$ pylons situated at integer coordinates in the plane. You would like to put lifts in the form of line segments between some of these pylons. The line segments must satisfy the following constraints:\n - A line segment can only go between pylons $(x_1, y_1)$ and $(x_2, y_2)$ if $|y_1-y_2| = 1$.\n - There are two types of pylons, one-way and two-way pylons. The one-way pylons can be connected to at most one other pylon, and the two-way pylons can be connected to at most two other pylons. However, if a two-way pylon $i$ is connected to two other pylons, then they must be on opposite sides of $i$ in the $y$-direction. In other words, the two pylons connected to $i$ must have different $y$-coordinates.\n - Two line segments may not intersect (except that the two line segments incident on a two-way pylon may touch at their endpoints).\nWhat is the maximum number of ski lifts (line segments) you can place under these constraints?\n-----Input-----\nThe first line contains one integer $n$ ($1 \\leq n \\leq 10^5$). Each of the following $n$ lines contains three integers $x$, $y$, and $a$, the coordinates and type of a pylon ($0 \\leq x,y \\leq 10^5$; $a=1$ for a one-way pylon and $a=2$ for a two-way pylon). All the pylons are situated at different coordinates.\n-----Output-----\nOutput the maximum number of ski lift line segments that can be placed.\n-----Examples-----\nSample Input:\n8\n1 0 1\n3 0 2\n0 1 1\n2 1 2\n4 1 2\n1 2 2\n2 3 1\n4 3 1\nSample Output:\n4\n\ndef",
        "answer": "def max_lifts(n):\n    return 0",
        "difficulty": "interview"
    },
    {
        "task_id": 2950,
        "prompt": "Complete the Python function given the prompt below:For the grand opening of the algorithmic games in NlogNsglow, a row of tower blocks is set to be demolished in a grand demonstration of renewal. Originally the plan was to accomplish this with controlled explosions, one for each tower block, but time constraints now require a hastier solution.\nTo help you remove the blocks more rapidly you have been given the use of a Universal Kinetic / Incandescent Energy Particle Cannon (UKIEPC). On a single charge, this cutting-edge contraption can remove either all of the floors in a single tower block, or all the $x$-th floors in all the blocks simultaneously, for user\u2019s choice of the floor number $x$. In the latter case, the blocks that are less than $x$ floors high are left untouched, while for blocks having more than $x$ floors, all the floors above the removed $x$-th one fall down by one level.\n-----Task-----\nGiven the number of floors of all towers, output the minimum number of charges needed to eliminate all floors of all blocks.\n-----Input-----\nThe first line of input contains the number of blocks $n$, where $2 \\leq n \\leq 100000$. The second line contains $n$ consecutive block heights $h_ i$ for $i=1,2,\\ldots,n$, where $1 \\leq h_ i \\leq 1000000$.\n-----Output-----\nOutput one line containing one integer: the minimum number of charges needed to tear down all the blocks.\n-----Examples-----\nSample Input:\n6\n2 1 8 8 2 3\nSample Output:\n5\n\ndef",
        "answer": "def tower_blocks(blocks):\n    return towers",
        "difficulty": "interview"
    },
    {
        "task_id": 2951,
        "prompt": "Complete the Python function given the prompt below:A tennis match involves three people: two players and an umpire. Each of these has to come from a different country. There are $N$ countries, and the $i$th country has $a_ i$ tennis players and $b_ i$ umpires. (Nobody can be both a player and an umpire.) How many different tennis matches are possible? Two tennis matches are different if the sets of involved people are different.\n-----Input-----\nThe first line contains an integer $N$, where $3 \\leq N \\leq 10^5$. The following $N$ lines each contain two integers $a_ i$ and $b_ i$ with $0 \\leq a_ i, b_ i \\leq 10^6$. You can assume $\\sum _{i=1}^N a_ i \\leq 10^6$ and $\\sum _{i=1}^N b_ i \\leq 10^6$.\n-----Output-----\nA single integer, the number of possible different tennis matches.\n-----Explanation of Sample 1-----\nAssume the players from the first country are called $A_1$ and $A_2$, the players from the second country are called $B_1$ and $B_2$, and the umpire from the third country is called $C$. Then there are $4$ matches where $C$ is the umpire: $\\{ A_1, B_1, C\\} $, $\\{ A_1, B_2, C\\} $, $\\{ A_2, B_1, C\\} $, and $\\{ A_2, B_2, C\\} $. Similarly, there are $8$ matches with the other umpires. In total, there are $12$ possible different matches.\n-----Examples-----\nSample Input:\n3\n2 1\n2 1\n2 1\nSample Output:\n12\n\ndef",
        "answer": "def solve(N, A, B):\n    return 0",
        "difficulty": "interview"
    },
    {
        "task_id": 2952,
        "prompt": "Complete the Python function given the prompt below:Alice, Bob, and Clara are eating at a new restaurant today. They\u2019re having trouble deciding what to order, so Alice proposes that they each pick some items from the menu, and then they will order the items that everyone picked. The menu has $m$ items, and Alice, Bob, and Clara will order $a$, $b$, and $c$ items respectively. Is it possible for them to pick some items such that no item is picked by everyone?\n-----Input-----\nThe input contains a single line with four integers, $m$, $a$, $b$, $c$, where $1\\leq m\\leq 100,000$, and $1\\leq a, b, c\\leq m$.\n-----Output-----\nIf it\u2019s possible for Alice, Bob, and Clara to pick some item such that no item on the menu is picked by everyone, print \u201cpossible\u201d (without quotes). Otherwise, print \u201cimpossible\u201d.\n-----Examples-----\nSample Input:\n6 2 2 2\nSample Output:\npossible\n\ndef",
        "answer": "def alice_bob_clara(m, a, b, c):\n    if m < a + b + c:\n        return \"impossible\"\n    elif m == a + b + c:\n        return \"possible\"\n    elif m == a + b:\n        return \"possible\"\n    elif m == a:\n        return \"possible\"\n    elif m == b:\n        return \"possible\"\n    elif m == c:\n        return \"possible\"\n    else:\n        return \"impossible\"",
        "difficulty": "interview"
    },
    {
        "task_id": 2953,
        "prompt": "Complete the Python function given the prompt below:Quido plans to send a New Year greeting to his friend Hugo. He has recently acquired access to an advanced high-precision plotter and he is planning to print the greeting card on the plotter.\nHere\u2019s how the plotter operates. In step one, the plotter plots an intricate pattern of $n$ dots on the paper. In step two, the picture in the greeting emerges when the plotter connects by a straight segment each pair of dots that are exactly $2018$ length units apart.\nThe plotter uses a special holographic ink, which has a limited supply. Quido wants to know the number of all plotted segments in the picture to be sure that there is enough ink to complete the job.\n-----Input-----\nThe first line of input contains a positive integer $n$ specifying the number of plotted points. The following $n$ lines each contain a pair of space-separated integer coordinates indicating one plotted point. Each coordinate is non-negative and less than $2^{31}$. There are at most $10^{5}$ points, all of them are distinct.\nIn this problem, all coordinates and distances are expressed in plotter length units, the length of the unit in the x-direction and in the y-direction is the same.\n-----Output-----\nThe output contains a single integer equal to the number of pairs of points which are exactly $2018$ length units apart.\n-----Examples-----\nSample Input:\n4\n20180000 20180000\n20180000 20182018\n20182018 20180000\n20182018 20182018\nSample Output:\n4\n\ndef",
        "answer": "def count_segments(n):\n    return n*(n-1)//2",
        "difficulty": "interview"
    },
    {
        "task_id": 2954,
        "prompt": "Complete the Python function given the prompt below:Jimmy is performing in ByteLand today! Anthony the Ant is a huge fan of Jimmy\u2019s music, so he can\u2019t wait to get to the concert.\nByteLand consists of of $N$ intersections and $M$ roads. Every road is bidirectional and connects two distinct intersections. Anthony is currently on intersection $s$ and the concert is being held at intersection $t$. Anthony must get to the concert in $T$ seconds and he can travel at $1$ meter/second.\nUnfortunately for Anthony, he has a huge fear of spiders and ByteLand is full of spiders. Spiders reside at certain intersections in ByteLand. Anthony will choose a path from $s$ to $t$ that maximizes $D$, the minimum distance between any intersection on the path and any spider, such that the path can be travelled in no more than $T$ seconds.\n-----Input-----\nThe first line contains three integers $N$ ($2\\leq N\\leq 100000$), $M$ ($1\\leq M\\leq \\min (200000, n(n-1)/2)$), and $T$ ($1\\leq T\\leq 10^9$).\nEach of the next $M$ lines specify the roads. A road is described by three integers $u, v$ ($0\\leq u, v\\leq N-1$ and $u\\neq v$) and $d$ ($1\\leq d\\leq 10000$), which means that a $d$ meters long road connects intersections $u$ and $v$. It is guaranteed that at most one road connect any two intersections, and that there exists a path between any two intersections.\nThe next line contains $s, t$ ($0\\leq s, t\\leq N-1$ and $s\\neq t$, representing Anthony\u2019s current location and the location of the concert. You may assume Anthony can always travel from $s$ to $t$ in no more than $T$ seconds.\nThe last line contains a integer $1\\leq K\\leq N$, denoting the number of intersections occupied by spiders, followed by $K$ integers $0\\leq a_ i\\leq N-1$ denoting the intersections with spiders.\n-----Output-----\nPrint the maximum $D$ (as defined earlier) for the path Anthony takes.\n-----Examples-----\nSample Input:\n4 4 3000\n0 1 1\n1 3 1\n2 0 2018\n2 3 42\n0 3\n1 1\nSample Output:\n1\n\ndef",
        "answer": "def find_max_dist(N, M, T, s, t, roads, spiders):\n    # Write your code here",
        "difficulty": "interview"
    },
    {
        "task_id": 2955,
        "prompt": "Complete the Python function given the prompt below:Pia is getting ready for her flight to the NWERC 2018 in Eindhoven. As she is packing her hard drive, she remembers the airline\u2019s ridiculous weight restrictions, which may pose a problem. You see, the hard drive is essentially a string of ones and zeros, and its weight depends on the number of \u201cbit changes\u201d in it: for any two adjacent bits storing two different values, the hard drive gets slightly heavier, so Pia cannot just store arbitrary information on it.\nTo make matters worse, the drive is so old that some bits are already broken and will always store zeros. The first bit will never be broken, but the last bit will always be.\nPia decides to treat this situation as a challenge: she is now trying to modify the information on the hard drive so that it has exactly the maximum number of bit changes permitted by the airline. However, the broken bits make this harder than expected, so she needs your help.\nFind a bit pattern which can be stored on the hard drive and has exactly the desired number of bit changes.\n-----Input-----\nThe input consists of:\n - One line with three integers $n$, $c$, and $b$ ($2 \\leq n \\leq 5\\cdot 10^5$, $1 \\leq c, b \\le n-1$), the size of the hard drive in bits, the desired amount of bit changes, and the number of broken bits. The positions on the hard drive are numbered from $1$ to $n$.\n - One line with $b$ integers $z_1, \\ldots, z_ b$ ($2 \\leq z_1 < z_2 < \\ldots < z_ b = n$), the positions of the broken bits on the hard drive.\n-----Output-----\nOutput a bit string of length $n$, representing Pia\u2019s hard drive and containing exactly $c$ bit changes. If there are multiple valid solutions, you may output any one of them. It is guaranteed that at least one solution exists.\n-----Examples-----\nSample Input:\n5 2 3\n2 3 5\nSample Output:\n00010\n\ndef",
        "answer": "def max_bit_changes(n, c, b, z):\n    # your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2956,
        "prompt": "Complete the Python function given the prompt below:Many phones use a nine-pivot unlock pattern. The nine pivots are arranged as a $3 \\times 3$ grid, and numbered from $1$ to $9$ as shown in the figure. The unlock pattern is a single stroke that starts at any pivot and visits each pivot exactly once. The stroke goes in a straight line segment between each pair of consecutive pivots. It may pass a pivot multiple times but only the first time counts as a visit. The phone unlocks if the pivots are visited in a predefined secret order. The figure illustrates an unlock pattern of $2 \\rightarrow 5 \\rightarrow 3 \\rightarrow 6 \\rightarrow 7 \\rightarrow 4 \\rightarrow 1 \\rightarrow 8 \\rightarrow 9$. Due to physical constraints, it is not possible for the stroke to pass but not visit a pivot if it has not been visited before. For instance, a pattern that starts with $1 \\rightarrow 7 \\rightarrow \\dots $ is invalid because it must visit pivot $4$ before visiting pivot $7$. However, starting with $4 \\rightarrow 1 \\rightarrow 7 \\dots $ is fine because pivot $4$ is already visited when the stroke passes it again. \nConsider the directional changes along the unlock pattern. The pattern may take a left turn (\u2018L\u2019), a right turn (\u2018R\u2019), go straight (\u2018S\u2019), or turn around (\u2018A\u2019) at each pivot except for the first and the last pivot. If we write down the directional changes into one string, we get a string of length seven. This is the turn sequence of the unlock pattern. The turn sequence of the unlock pattern shown in the figure is \u201cLRRRSRL\u201d.\nGiven a turn sequence, with some of the directional changes replaced by question marks (\u2018?\u2019), which mean we can take any direction at those pivots, how many different unlock patterns are consistent with this turn sequence?\n-----Input-----\nThe input has a single string of length seven. The string consists of characters \u2018L\u2019, \u2018R\u2019, \u2018S\u2019, \u2018A\u2019 and \u2018?\u2019 that describe the directional changes at the pivots in the order of their visit.\n-----Output-----\nOutput the number of different unlock patterns that have a turn sequence matching the input.\n-----Examples-----\nSample Input:\nLRRRSRL\nSample Output:\n44\n\ndef",
        "answer": "def solve(s):\n    return",
        "difficulty": "interview"
    },
    {
        "task_id": 2957,
        "prompt": "Complete the Python function given the prompt below:L\u00f6pkass is out running in the forest again. He loves running in the forest. However, there is a programming competition starting in a couple of hours, and he needs to calculate how long it will take him to get home (so that he can stay in the fresh air as long as possible). You have to help him out.\nThe forest is modelled as a graph with $n$ nodes. Nodes are numbered $0, 1,..., n-1$. L\u00f6pkass is located in node $0$, and his home is located in node $n-1$. Two nodes $v,w$ are connected if $v+1 = w$. Additionally, two nodes are connected if they are both a multiple of some integer $K$. In this problem, we do not consider $0$ to be a multiple of $K$.\n-----Input-----\nOne line with two integers, the number of nodes $1 \\leq n \\leq 10^{18}$, and the number $1 \\leq K \\leq 10^{18}$.\n-----Output-----\nPrint a single integer on a single line: the shortest path from node 0 to node $n-1$.\n-----Examples-----\nSample Input:\n5 2\nSample Output:\n3\n\ndef",
        "answer": "def shortestPath(n, k):\n    # Write your code here\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36:\n        return 36\n    if n == 37:\n        return 37\n    if n == 38:\n        return 38\n    if n == 39:\n        return 39\n    if n == 40:\n        return 40\n    if n == 41:\n        return 41\n    if n == 42:\n        return 42\n    if n == 43:\n        return 43\n    if n == 44:\n        return 44\n    ",
        "difficulty": "interview"
    },
    {
        "task_id": 2958,
        "prompt": "Complete the Python function given the prompt below:Anthony and Cora are playing Dominion, their favorite card game. In Dominion, there are $T$ different card types, and each player has a set of cards (known as a deck). A deck $D$ is said to have $C$ combos if $C$ is the largest integer such that for $C$ different card types in the game, $D$ contains at least two cards of that type. Anthony currently has $N$ cards and he wants to trade cards with Cora such that he\u2019ll have a deck with exactly $K$ combos.\nFor each card type $i$ ($1\\leq i\\leq T$), Anthony can choose to perform at most one transaction. There are two types of transaction:\n - Buy up to two cards of $i^{th}$ type from Cora at $a_ i$ coins each\n - Sell all his cards of $i^{th}$ type for $b_ i$ coins each\nAnthony wants to maximize his profit while obtaining a complete deck. Anthony is willing to spend coins in order to obtain a complete deck if necessary, but of course he wants to minimize his spending in that case. Note that he doesn\u2019t care about keeping the rest of his cards which don\u2019t contribute to the complete deck.\nAnthony has hired you to help him calculate how much money he can make if he chooses the optimal strategy for obtaining enough combos. If he has to spend money, output a negative number.\n-----Input-----\nThe first line of the input contains three integers $N$, $T$, and $K$, $1\\leq K\\leq T\\leq 100000$, $1\\leq N\\leq 2T$.\nThe next line is a list of $N$ integers representing the cards in Anthony\u2019s deck. Each integer on this line is between $1$ and $T$ inclusive. It is guaranteed no integers appear more than twice.\nFinally, each of the next $T$ lines of the input contains two integers each. The $i^\\mathrm {th}$ line contains $a_ i$ and $b_ i$, $1\\leq a_ i, b_ i\\leq 10^9$, corresponding to the price of buying and selling a card of type $i$.\n-----Output-----\nOutput a single integer denoting Anthony\u2019s profit assuming he trades optimally.\n-----Explanation of Sample Input-----\nIn the first example, Anthony should sell two of card $1$ and buy one of card $2$ and one of card $3$ for a net profit of $10$ coins. If he chooses to sell one of card $3$ and buy one of card $2$, then he\u2019ll end up spending $20$ coins.\n-----Examples-----\nSample Input:\n4 3 2\n1 3 2 1 \n1 50\n50 20\n40 30\nSample Output:\n10\n\ndef",
        "answer": "def maxProfit(N, T, K, deck):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2959,
        "prompt": "Complete the Python function given the prompt below:Dee Siduous is a botanist who specializes in trees. A lot of her research has to do with the formation of tree rings, and what they say about the growing conditions over the tree\u2019s lifetime. She has a certain theory and wants to run some simulations to see if it holds up to the evidence gathered in the field.\nOne thing that needs to be done is to determine the expected number of rings given the outline of a tree. Dee has decided to model a cross section of a tree on a two dimenional grid, with the interior of the tree represented by a closed polygon of grid squares. Given this set of squares, she assigns rings from the outer parts of the tree to the inner as follows: calling the non-tree grid squares \u201cring $0$\u201d, each ring $n$ is made up of all those grid squares that have at least one ring $(n-1)$ square as a neighbor (where neighboring squares are those that share an edge).\nAn example of this is shown in the figure below.\n Figure D.1 \nMost of Dee\u2019s models have been drawn on graph paper, and she has come to you to write a program to do this automatically for her. This way she\u2019ll use less paper and save some $\\ldots $ well, you know.\n-----Input-----\nThe input will start with a line containing two positive integers $n$ $m$ specifying the number of rows and columns in the tree grid, where $n, m \\leq 100$. After this will be $n$ rows containing $m$ characters each. These characters will be either \u2018T\u2019 indicating a tree grid square, or \u2018.\u2019.\n-----Output-----\nOutput a grid with the ring numbers. If the number of rings is less than 10, use two characters for each grid square; otherwise use three characters for each grid square. Right justify all ring numbers in the grid squares, and use \u2018.\u2019 to fill in the remaining characters.\nIf a row or column does not contain a ring number it should still be output, filled entirely with \u2018.\u2019s.\n-----Examples-----\nSample Input:\n6 6\n.TT...\nTTTT..\nTTTTT.\nTTTTT.\nTTTTTT\n..T...\nSample Output:\n...1.1......\n.1.2.2.1....\n.1.2.3.2.1..\n.1.2.3.2.1..\n.1.1.2.1.1.1\n.....1......\n\ndef",
        "answer": "def ring_number(grid):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2960,
        "prompt": "Complete the Python function given the prompt below:You might be familiar with the binomial coefficient ${m \\choose k}$ defined as ${m \\choose k} = \\frac{m!}{k!(m-k)!}$, where $m$ and $k$ are non-negative integers and $k \\leq m$. Let $T_2(n)$ be the number of odd binomial coefficients such that $0 \\le k \\le m < n$. The most useful mathematical inequality you will learn during this competition is\\[ 0.812556 n^{\\log _2 3} \\le T_2(n) \\le n^{\\log _2 3}. \\]\nEmma doesn\u2019t like such imprecise inequalities and would like to calculate $T_2(n)$ exactly. Can you help her?\n-----Input-----\nThe input contains one line with one integer $n, 1 \\leq n \\le 10^{11}$.\n-----Output-----\nOutput one line with the value of $T_2(n)$.\n-----Examples-----\nSample Input:\n4\nSample Output:\n9\n\ndef",
        "answer": "def binomial(n, k):\n    return factorial(n) / (factorial(k) * factorial(n - k))",
        "difficulty": "interview"
    },
    {
        "task_id": 2961,
        "prompt": "Complete the Python function given the prompt below:The Hogwarts School of Witchcraft and Wizardry is the home of many students during the school year. The school has many rooms connected by corridors and stairs. Each room has four exits labelled by the integers $1, 2, 3$ or $4$. Some exits lead to another room, some of them are blocked, and some even lead back to the same room you just came from.\nNew students often have difficulty finding their way, especially since the corridors and stairs are regularly moving, disconnecting and reconnecting different rooms! Luckily, these reconfigurations only take place when no one is walking in the school. All you want to know is how to get from the entrance to the dormitory. A senior student has given you instructions as a sequence of numbers among $1, 2, 3, 4$. The first number in the sequence is the exit to take from the starting room. The second number is the exit to take from the second room in the path, and so on. If at any point the indicated exit is blocked, you go back to the entrance and give up. To be successful you must arrive at the dormitory at the end of the entire sequence. Even if it appears you have reached the dormitory before the entire sequence is followed, you are not sure if that is an illusion. Therefore you follow the entire sequence.\nYou carefully followed the instructions and arrived at the dormitory. However, the way the rooms are connected to each other has changed after the senior student gave you the instructions, and you just happen to arrive at the same destination even if the rooms you encountered along the way may be completely different.\nYou wonder if you are just lucky, or if the reconfiguration of the corridors and stairs ensures that the instructions still lead you to the same destination. Isn\u2019t that magical?\nYou will be given a configuration of the school when the senior student walked from the entrance to the dormitory, as well as the configuration of the school when you start following the given instructions. You want to know if every possible sequence of instructions that led the senior student to the dormitory will also lead you to the dormitory in the configuration you walk through. Both the senior student and you start walking from the entrance of the school.\n-----Input-----\nThe first line of input contains a single integer $n$ ($2 \\leq n \\leq 1000$), indicating the number of rooms in the school. The rooms are numbered $1$ to $n$, where room $1$ is the entrance and room $n$ is the dormitory.\nThe next $n$ lines of input describe the configuration of the school when the senior student walked to the dormitory, followed by another $n$ lines describing the configuration of the school when you start to walk to the dormitory.\nThe $i^\\textrm {th}$ line in the school configuration consists of four non-negative integers, indicating which room exits $1, 2, 3$ and $4$ lead to. If the room number is $0$, the corresponding exit is blocked.\n-----Output-----\nIf it is not possible for the senior student to walk from the entrance to the dormitory, display Impossible.\nIf it is possible, display Yes if you can get from the entrance to the dormitory by following any sequence of instructions taking the senior student from the entrance to the dormitory. Otherwise, display No.\n-----Examples-----\nSample Input:\n4\n1 1 1 2\n2 2 2 3\n3 3 3 4\n0 0 0 0\n2 2 2 2\n3 3 3 3\n4 4 4 4\n4 4 4 4\nSample Output:\nYes\n\ndef",
        "answer": "def solve(n, rooms, exits):\n    if n == 1:\n        return \"Yes\" if exits[0] == 0 else \"No\"\n    if n == 2:\n        return \"Yes\" if exits[0] == 0 and exits[1] == 0 else \"No\"\n    if n == 3:\n        return \"Yes\" if exits[0] == 0 and exits[1] == 0 and exits[2] == 0 else \"No\"\n    if n == 4:\n        return \"Yes\" if exits[0] == 0 and exits[1] == 0 and exits[2] == 0 and exits[3] == 0 else \"No\"\n    if n == 5:\n        return \"Yes\" if exits[0] == 0 and exits[1] == 0 and exits[2] == 0 and exits[3] == 0 and exits[4] == 0 else \"No\"\n    if n == 6:\n        return \"Yes\" if exits[0] == 0 and exits[1] == 0 and exits[2] == 0 and exits[3] == 0 and exits[4] == 0 and exits[5] == 0 else \"No\"\n    if n == 7:\n        return \"Yes\" if exits[0] == 0 and exits[1] == 0 and exits[2] == 0 and exits[3] == 0 and exits[4] == 0 and exits[5] == 0 and exits[6] == 0 else \"No\"\n    if n == 8:\n        return \"Yes\" if exits[0] == 0 and exits[1] == 0 and exits[2] == 0 and exits[3] == 0 and exits[4] == 0 and exits[5] == 0 and exits[6] == 0 and exits[7] == 0 else \"No\"\n    if n == 9:\n        return \"Yes\" if exits[0] == 0 and exits[1] == 0 and exits[2] == 0 and exits[3] == 0 and exits[4] == 0 and exits[5] == 0 and exits[6] == 0 and exits[7] == 0 and exits[8] == 0 else \"No\"\n    if n == 10:\n        return \"Yes\" if exits[0] == 0 and exits[1",
        "difficulty": "interview"
    },
    {
        "task_id": 2962,
        "prompt": "Complete the Python function given the prompt below:Oliver is a manager of a bank near KTH and wants to close soon. There are many people standing in the queue wanting to put cash into their accounts after they heard that the bank increased the interest rates by $42\\% $ (from $0.01\\% $ per year to $0.0142\\% $ per year). \nHowever, there are too many people and only one counter is open which can serve one person per minute. Greedy as Oliver is, he would like to select some people in the queue, so that the total amount of cash stored by these people is as big as possible and that money then can work for the bank overnight.\nThere is a problem, though. Some people don\u2019t have the time to wait until the bank closes because they have to run somewhere else, so they have to be served before a certain time, after which they just leave. Oliver also turned off the infrared door sensor outside the bank, so that no more people can enter, because it\u2019s already too crowded in the hall.\n-----Task-----\nHelp Oliver calculate how much cash he can get from the people currently standing in the queue before the bank closes by serving at most one person per minute.\n-----Input-----\nThe first line of input contains two integers $N$ $(1\\leq N\\leq 10000)$ and $T$ $(1\\le T \\le 47)$, the number of people in the queue and the time in minutes until Oliver closes the bank. Then follow $N$ lines, each with 2 integers $c_ i$ and $t_ i$, denoting the amount of cash in Swedish crowns person $i$ has and the time in minutes from now after which person $i$ leaves if not served. Note that it takes one minute to serve a person and you must begin serving a person at time $t_ i$ at the latest. You can assume that $1\\le c_ i \\le 100000$ and $0 \\le t_ i < T$.\n-----Output-----\nOutput one line with the maximum amount of money you can get from the people in the queue before the bank closes.\n-----Examples-----\nSample Input:\n4 4\n1000 1\n2000 2\n500 2\n1200 0\nSample Output:\n4200\n\ndef",
        "answer": "def solve(N, T):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2963,
        "prompt": "Complete the Python function given the prompt below:Neelix has been working on making the Altonian warp bubble power itself up. While waiting for the system checks to complete, he saw a number on his screen and wondered if there is a number that powers itself up to this number.\n-----Input-----\nThe first and only input line consists of a single integer $n$, the number Neelix saw on his screen.\n-----Output-----\nOutput the number $x$, where $x^x = n$. Your answer must have an absolute or relative error of at most $10^{-6}$.\n-----Limits-----\n - $1 \\leq n \\leq 10000000000$\n-----Examples-----\nSample Input:\n4\nSample Output:\n2.0\n\ndef",
        "answer": "def power(n):\n    x = 1\n    while x**x < n:\n        x += 1\n    return x - 1",
        "difficulty": "interview"
    },
    {
        "task_id": 2964,
        "prompt": "Complete the Python function given the prompt below:Robert Hood, a less famous sibling of the Robin Hood, is fed up. Despite him being a young, talented archer he never seems to reach quite the same level as his legendary brother, and so he decided to come up with rules for a new archery contest, in which he will stand a better chance of winning.\nThe rules for the new kind of archery contest are quite simple: the winner is no longer the one who can score the most points, but instead the one who can achieve the longest distance between any pair of arrows hitting the target. Your task is to write the code to calculate that distance.\nEach contestant is allowed a number of arrow shots, and the coordinates of the arrows successfully hitting the target are given as a list of pairs. The coordinate system is Cartesian with the origin in the centre of the archery butt. If a contestant does not hit the target with at least two arrows he or she is disqualified and removed from the input data.\n-----Input-----\nThe input starts with a line containing a single positive integer $C, 2 \\le C \\le 100000$, representing the number of shots for this particular contestant. Each following line contains a pair of integer coordinates separated by a space, representing the $x$- and $y$-coordinates of a successful shot. The absolute value of any coordinate does not exceed $1000$.\n-----Output-----\nPrint the longest distance between any pair of arrows as a floating point number on a single line. The answer is considered correct if it has a relative or absolute error of less than $10^{-6}$.\n-----Examples-----\nSample Input:\n2\n2 2\n-1 -2\nSample Output:\n5.0\n\ndef",
        "answer": "def archery_contest(C, x, y):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2965,
        "prompt": "Complete the Python function given the prompt below:Pumpkin Pete is trying out a new type of \u201crapid-growth\u201d pumpkin seed that he bought from the farmer\u2019s market. Without looking at the directions, Pumpkin Pete tears through the packaging and plants the seeds he has into his pumpkin patch. Unbeknownst to Pumpkin Pete, his rival, Gourd Gary, is watching him plant the new seeds from a secret vantage point. After Pumpkin Pete leaves the pumpkin patch, Gourd Gary approaches the patch and picks up the packaging that Pumpkin Pete left on the ground. The packaging says the following:\n - A pumpkin starts with four roots of length zero.\n - Each of the pumpkin\u2019s four roots grow a single unit in a different cardinal direction each day.\n - When a pumpkin dies, its remains will not disappear.\n - If any of the roots grow into another pumpkin or its roots \u2013 dead or alive \u2013 the pumpkin will die at the end of that day.\n - Roots cannot grow outside of the bounds of a plot. In other words, a pumpkin will die if one of its roots tries to go outside the bounds of the pumpkin patch.\n - If the roots of multiple pumpkins reach the same spot on the same day, each one of the affected roots stops growing (i.e. fight for nutrients) and in turn, the pumpkins will die at the end of the day.\n - When a pumpkin dies, its roots do not grow on subsequent days.\nWith this information and the knowledge of where each of the pumpkin seeds were planted, Gourd Gary starts to think about which pumpkins would still be alive if they were left to grow for $D$ days$\\ldots $Input\nThe first line of input contains three integers: the number of pumpkins $P$, the number of days $D$ that will pass ($1 \\leq D \\leq 10$), and $N$ ($1 \\leq N \\leq 30, 1 \\leq P \\leq N^2$) the dimension of the $N\\times N$ grid. The next $P$ lines of input contain two integers, $R$ and $C$ ($0 \\leq R,C < N$), representing the row and column position of each pumpkin. No two pumpkins will be at the same position. Position $(0,0)$ is the top left corner of the grid.\n-----Output-----\nThe output will consist of a single line per pumpkin in the same relative order as the input. If the pumpkin is alive after $D$ days have passed, print \u201cALIVE\u201d. Otherwise, print the day the pumpkin died as a single integer.\n-----Examples-----\nSample Input:\n4 2 8\n3 2\n5 5\n4 3\n1 1\nSample Output:\n1\n2\n1\n2\n\ndef",
        "answer": "def pumpkin(p, d, n):\n    grid = [[0 for i in range(n)] for j in range(n)]\n    for i in range(p):\n        r, c = [int(x) for x in input().split()]\n        grid[r][c] = 1\n    for i in range(d):\n        grid = [[0 for i in range(n)] for j in range(n)]\n        for r in range(n):\n            for c in range(n):\n                if grid[r][c] == 1:\n                    grid[r][c] = 0\n                    if r > 0:\n                        grid[r-1][c] = 1\n                    if r < n-1:\n                        grid[r+1][c] = 1\n                    if c > 0:\n                        grid[r][c-1] = 1\n                    if c < n-1:\n                        grid[r][c+1] = 1\n        for r in range(n):\n            for c in range(n):\n                if grid[r][c] == 1:\n                    print(i+1)\n                    return\n    print(\"ALIVE\")",
        "difficulty": "interview"
    },
    {
        "task_id": 2966,
        "prompt": "Complete the Python function given the prompt below:Quido and Hugo are making a chocolate cake. The central ingredient of the cake is a large chocolate bar, lying unwrapped on the kitchen table. The bar is an $M \\times N$ rectangular grid of chocolate blocks. All of the $MN$ blocks are rectangles of identical shape and size. The chocolate bar is of top quality and the friends want to eat part of it, before the rest is used in the cake.\n\u201cOK,\u201d says Quido, \u201clet\u2019s divide the whole bar into two triangular chunks by a straight diagonal cut from its upper-left corner to its lower-right corner. We will then eat all of the blocks which have been cut exactly in half, into two equal-area pieces. You will eat one half and I will eat the other half of each such block. All other blocks, that is, the blocks which are either uncut or cut into two parts of different sizes, will go directly into the cake. Of course, we will make sure the cut is perfectly precise.\nLet\u2019s see how much chocolate we get to eat!\u201d\n-----Input-----\nThe input consists of two space-separated integers $M$ and $N$ given on a single line, (where $1 \\leq M, N \\leq 10^{18}$). The numbers $M$ and $N$ denote the number of blocks in one column and in one row, respectively, in the chocolate bar.\n-----Output-----\nPrint the number of blocks of the chocolate bar which are cut into exactly two pieces of equal area.\n-----Examples-----\nSample Input:\n6 10\nSample Output:\n2\n\ndef",
        "answer": "def chocolate_bar(m, n):\n    return m*n//2",
        "difficulty": "interview"
    },
    {
        "task_id": 2967,
        "prompt": "Complete the Python function given the prompt below:Penelope is part of the admin team of the newly built supercomputer. Her job is to assign workstations to the researchers who come here to run their computations at the supercomputer. \nPenelope is very lazy and hates unlocking machines for the arriving researchers. She can unlock the machines remotely from her desk, but does not feel that this menial task matches her qualifications. Should she decide to ignore the security guidelines she could simply ask the researchers not to lock their workstations when they leave, and then assign new researchers to workstations that are not used any more but that are still unlocked. That way, she only needs to unlock each workstation for the first researcher using it, which would be a huge improvement for Penelope.\nUnfortunately, unused workstations lock themselves automatically if they are unused for more than $m$ minutes. After a workstation has locked itself, Penelope has to unlock it again for the next researcher using it. Given the exact schedule of arriving and leaving researchers, can you tell Penelope how many unlockings she may save by asking the researchers not to lock their workstations when they leave and assigning arriving researchers to workstations in an optimal way? You may assume that there are always enough workstations available.\n-----Input-----\nThe input consists of:\n - one line with two integers $n$ ($1 \\leq n \\leq 300000$), the number of researchers, and $m$ ($1 \\leq m \\leq 10^8$), the number of minutes of inactivity after which a workstation locks itself;\n - $n$ lines each with two integers $a$ and $s$ ($1 \\leq a, s \\leq 10^8$), representing a researcher that arrives after $a$ minutes and stays for exactly $s$ minutes.\n-----Output-----\nOutput the maximum number of unlockings Penelope may save herself.\n-----Examples-----\nSample Input:\n3 5\n1 5\n6 3\n14 6\nSample Output:\n2\n\ndef",
        "answer": "def solve(n, m):\n    return 0",
        "difficulty": "interview"
    },
    {
        "task_id": 2968,
        "prompt": "Complete the Python function given the prompt below:You are leading a kayaking trip with a mixed group of participants in the Stockholm archipelago, but as you are about to begin your final stretch back to the mainland you notice a storm on the horizon. You had better paddle as fast as you can to make sure you do not get trapped on one of the islands. Of course, you cannot leave anyone behind, so your speed will be determined by the slowest kayak. Time to start thinking; How should you distribute the participants among the kayaks to maximize your chance of reaching the mainland safely? \nThe kayaks are of different types and have different amounts of packing, so some are more easily paddled than others. This is captured by a speed factor $c$ that you have already figured out for each kayak. The final speed $v$ of a kayak, however, is also determined by the strengths $s_1$ and $s_2$ of the two people in the kayak, by the relation $v=c(s_1+s_2)$. In your group you have some beginners with a kayaking strength of $s_ b$, a number of normal participants with strength $s_ n$ and some quite experienced strong kayakers with strength $s_ e$.\n-----Input-----\nThe first line of input contains three non-negative integers $b$, $n$, and $e$, denoting the number of beginners, normal participants, and experienced kayakers, respectively. The total number of participants, $b+n+e$, will be even, at least $2$, and no more than $100000$. This is followed by a line with three integers $s_ b$, $s_ n$, and $s_ e$, giving the strengths of the corresponding participants ($1 \\leq s_ b < s_ n < s_ e \\leq 1000$). The third and final line contains $m = \\frac{b+n+e}{2}$ integers $c_1, \\ldots, c_ m$ ($1 \\leq c_ i \\leq 100000$ for each $i$), each giving the speed factor of one kayak.\n-----Output-----\nOutput a single integer, the maximum speed that the slowest kayak can get by distributing the participants two in each kayak.\n-----Examples-----\nSample Input:\n3 1 0\n40 60 90\n18 20\nSample Output:\n1600\n\ndef",
        "answer": "def max_speed(b, n, e, s_b, s_n, s_e, c):\n    # your code here\n    return max_speed",
        "difficulty": "interview"
    },
    {
        "task_id": 2969,
        "prompt": "Complete the Python function given the prompt below:In the card game Wolf (a variant of the famous card games War and Sv\u00e4lta r\u00e4v), two players both have a pile of cards, which together form a normal deck of playing cards. Such a deck contains $52$ cards, with each card being a unique combination of one of $4$ suits and $13$ ranks.\nDuring a turn, each player picks the topmost card from their piles, and shows it. This process is repeated until the two cards have the same suit. Then, the player whose card had the highest rank receives all the cards that have been shown by the players during the turn (including the two that had the same suit), and these cards are shuffled into that player\u2019s pile. The turn then ends. The turn also ends if any player, when they are supposed to pick a card from their pile, has an empty pile. A player wins if, after the end of a turn, she has cards remaining in her pile but the opposing player has no cards remaining in their pile. This means that the game is tied if neither player has cards in their pile after the end of a turn.\nYour opponent is currently taking a bathroom break, so you have the opportunity to reshuffle your piles. You cannot exchange any cards, since your opponent knows the set of cards in their pile. Is it possible to reshuffle each of the two piles, so that you have won the game after the next turn?\n-----Input-----\nThe first line of input contains the number of cards in your hand ($0 \\leq n \\leq 52$). Each of the next $n$ lines contains a card specified by a number from $1$ to $13$ and one of the letters \u2019C\u2019, \u2019D\u2019, \u2019H\u2019, \u2019S\u2019, separated by a space.\nThe letter of a card specifies its suit (either clubs, diamonds, hearts or spades, respectively). The number of a card specifies the rank of the card. For simplicity, aces are represented as a $1$, and jacks, queens and kings are represented as the numbers $11$, $12$ and $13$. For the purpose of this problem, we consider a rank $a$ to be lower than a rank $b$ if the number of rank $a$ is lower than the number of rank $b$ (meaning aces are of the lowest rank).\n-----Output-----\nOutput \u201cpossible\u201d if it is possible to reshuffle the decks, and \u201cimpossible\u201d if it is not.\n-----Examples-----\nSample Input:\n28\n1 C\n2 C\n3 C\n4 C\n5 C\n6 C\n7 C\n1 D\n2 D\n3 D\n4 D\n5 D\n6 D\n7 D\n1 H\n2 H\n3 H\n4 H\n5 H\n6 H\n7 H\n1 S\n2 S\n3 S\n4 S\n5 S\n6 S\n7 S\nSample Output:\npossible\n\ndef",
        "answer": "def is_reshuffled(deck1, deck2):\n    return deck1 == deck2",
        "difficulty": "interview"
    },
    {
        "task_id": 2970,
        "prompt": "Complete the Python function given the prompt below:A new student dorm has been opened! It consists of $M$ buildings, labeled with integers from $1$ to $M$. The dorm is initially empty, but soon $N$ students will be moving in at a rate of exactly one student per day.\nEach time a new student moves in a building, a big party is being held inside that building. The noise of the party is equal to the number of students located inside the building. The dorm management is not particularly fond of noise, so they will occasionally empty a certain building to keep the parties at a reasonable noise level. They do this by moving all its residents to a completely different student dorm. The management can decide to do this after any day, but they realized that it doesn\u2019t pay off to do it more than $K$ times.\nHelp the management! Knowing which buildings are being moved in by students, determine the minimal possible total noise level (the sum of noise levels of all $N$ parties) that can be achieved with emptying some of the buildings at most $K$ times.\n-----Input-----\nThe first line of input contains the integers $N$ ($1 \\leq N \\leq 1000000$), $M$ ($1 \\leq M \\leq 100$) and $K$ ($1 \\leq K \\leq 500$) from the task description.\nThe $i$-th line, out of $N$ in total, contains an integer from the interval $[1,M]$: the label of the building where a student is moving in on the $i$-th day.\n-----Output-----\nThe first and only line of output must contain the required minimal possible total noise level.\n-----Examples-----\nSample Input:\n5 1 2\n1\n1\n1\n1\n1\nSample Output:\n7\n\ndef",
        "answer": "def main():\n    N, M, K = map(int, raw_input().split())\n    buildings = map(int, raw_input().split())\n    buildings.sort()\n    buildings = [0] + buildings + [M]\n    noise = 0\n    for i in xrange(1, len(buildings)):\n        if buildings[i] - buildings[i-1] > K:\n            noise += (buildings[i] - buildings[i-1]) - K\n    print noise",
        "difficulty": "interview"
    },
    {
        "task_id": 2971,
        "prompt": "Complete the Python function given the prompt below:Rhymes are complicated. The extent to which one word rhymes with another depends on how similar they sound; but if they are too similar then they aren\u2019t considered a rhyme at all. Karim has a huge list of $N$ words and wants to determine the maximally rhyming pair of words. To that end he has introduced the concept of rhyme power:\nGiven two words $S$ and $T$, their rhyme power $r(S,T)$ is defined as\n - $0$, if one word is a suffix of the other,\n - the length of their longest common suffix, otherwise.\nFor instance, the rhyme power of \u201cfire\u201d and \u201cdesire\u201d is $3$, because their longest common suffix \u201cire\u201d has length $3$. In contrast, the rhyme power of \u201cimpossible\u201d and \u201cpossible\u201d is $0$, because \u201cpossible\u201d is a suffix of \u201cimpossible\u201d.\nGiven Karim\u2019s list of $N$ words, your task is to find the maximum value of $r(S, T)$ over all pairs of words.\n-----Input-----\nThe first line contains an integer $N$ with $2 \\leq N \\leq 10^5$, the number of words.\nThe following $N$ lines each contain a string $S_ i$, where $1 \\leq |S_ i| \\leq 10^6$. The sum of all string lengths $|S_ i|$ is at most $10^6$.\n-----Output-----\nAn integer, the maximal rhyme power.\n-----Examples-----\nSample Input:\n4\nspaghetti\nalready\nconfetti\nserengeti\nSample Output:\n4\n\ndef",
        "answer": "def maxRhymePower(words):\n    maxRhymePower = 0\n    for i in range(len(words)):\n        for j in range(i+1, len(words)):\n            if isRhyme(words[i], words[j]):\n                maxRhymePower = max(maxRhymePower, len(commonPrefix(words[i], words[j])))\n    return maxRhymePower",
        "difficulty": "interview"
    },
    {
        "task_id": 2972,
        "prompt": "Complete the Python function given the prompt below:Nicholas Neverson was a student at Northlings Neverland Academy. As with any daydreaming student, Nicholas was playing around with a Kaleidoscope one day instead of paying attention to the teacher. Since this was math class, his daydreams quickly turned to palindromic numbers. A palindromic number is any number which reads the same forwards and backwards.\nHe describes his vision to you at lunch: numbers which are palindromic in several bases at once. Nicholas wonders how many such numbers exist. You decide you can quickly code up a program that given a range and a number $k$, outputs the number of numbers palindromic in all bases $j$, $2 \\leq j \\leq k$, in that range.\n-----Input-----\nInput consists of three space-separated integers: $a$, $b$, and $k$. The input satisfies the following constraints:\\[ 0 \\leq a \\leq b \\leq 2000000, \\\\ 2 \\leq k \\leq 100000. \\]\n-----Output-----\nOutput the quantity of numbers between $a$ and $b$ inclusive which are palindromes in every base $j$, for $2 \\leq j \\leq k$.\n-----Examples-----\nSample Input:\n1 356 2\nSample Output:\n36\n\ndef",
        "answer": "def palindromic_number(a, b, k):\n    # Write your code here\n    return 0",
        "difficulty": "interview"
    },
    {
        "task_id": 2973,
        "prompt": "Complete the Python function given the prompt below:Sheila is a student and she drives a typical student car: it is old, slow, rusty, and falling apart. Recently, the needle on the speedometer fell off. She glued it back on, but she might have placed it at the wrong angle. Thus, when the speedometer reads $s$, her true speed is $s+c$, where $c$ is an unknown constant (possibly negative). \nSheila made a careful record of a recent journey and wants to use this to compute $c$. The journey consisted of $n$ segments. In the $i^{\\text {th}}$ segment she traveled a distance of $d_ i$ and the speedometer read $s_ i$ for the entire segment. This whole journey took time $t$. Help Sheila by computing $c$.\nNote that while Sheila\u2019s speedometer might have negative readings, her true speed was greater than zero for each segment of the journey.\n-----Input-----\nThe first line of input contains two integers $n$ ($1 \\le n \\le 1000$), the number of sections in Sheila\u2019s journey, and $t$ ($1 \\le t \\le 10^6$), the total time. This is followed by $n$ lines, each describing one segment of Sheila\u2019s journey. The $i^{\\text {th}}$ of these lines contains two integers $d_ i$ ($1 \\le d_ i \\le 1000$) and $s_ i$ ($|s_ i| \\le 1000$), the distance and speedometer reading for the $i^{\\text {th}}$ segment of the journey. Time is specified in hours, distance in miles, and speed in miles per hour.\n-----Output-----\nDisplay the constant $c$ in miles per hour. Your answer should have an absolute or relative error of less than $10^{-6}$.\n-----Examples-----\nSample Input:\n3 5\n4 -1\n4 0\n10 3\nSample Output:\n3.000000000\n\ndef",
        "answer": "def speedometer(n, t):\n    c = 0\n    for i in range(n):\n        d, s = map(int, input().split())\n        c += d / s\n    return c",
        "difficulty": "interview"
    },
    {
        "task_id": 2974,
        "prompt": "Complete the Python function given the prompt below:\u201c[There] is a reason why the most successful trial lawyers are often master storytellers, making their cases come to life for their jurors.\u201d \u00ad\u2013G. Christopher Ritter.\nA good lawyer can take an incomplete set of facts and turn it into a convincing story.\nLast night, a major robbery occurred at a bank, and, luckily, the robber seems to have been successfully arrested. Unfortunately, it is neither clear what the order of events was, nor whether the man they caught is even really the right guy. It is necessary to reconstruct the correct order of events to convince the jury that the accused is guilty beyond reasonable doubt for a conviction to be reached.\nIt is known that there are $N$ material events that are relevant to the case. For simplicity, we label the events $1, 2, \\dots, N$. The prosecution claims that these events happened in the order $P_1, P_2, \\dots, P_ N$, while the defense claims that these events instead happened in the order $D_1, D_2, \\dots, D_ N$. It is guaranteed that exactly one of the two is right; in particular, this also means that the prosecution and defense do not claim the exact same order of events; that is, there exists some $i$ such that $P_ i \\neq D_ i$.\nDefine a consistent recollection as a subset of the $N$ events, in some order, such that these events happening in this order is consistent with at least one of the two parties\u2019 claims. (That is, at least one of the parties claimed that this subset of events did happen in this order, although it is possible that some other events happened before, after, or in between.) You need to determine\n - the minimum $k_ p$ such that there is some consistent recollection of $k_ p$ events where it is possible to determine for sure who is right, and\n - the minimum $k_ r$ such that for any consistent recollection of $k_ r$ events, it is possible to determine for sure who is right.\nBy finding these numbers, you can help the prosecution estimate the minimum amount of evidence they need to make their case, and the minimum amount of evidence they need to make their case foolproof. (Or determine that the man they have is really innocent.) Please help!\n-----Input-----\nThe first line of input contains a single integer $N$ ($2 \\leq N \\leq 200000$), the number of events.\nThe second line of input contains $N$ integers, $P_1, P_2, \\dots, P_ N$ ($1 \\leq P_ i \\leq N$; all $P_ i$ are distinct), the order of events according to the prosecution. That is, according to the prosecution, the $i^\\text {th}$ event was the event labelled $P_ i$.\nThe third line of input contains $N$ integers, $D_1, D_2, \\dots, D_ N$ ($1 \\leq D_ i \\leq N$; all $D_ i$ are distinct), the order of events according to the defense. That is, according to the defense, the $i^\\text {th}$ event was the event labelled $D_ i$.\nIt is guaranteed that the prosecution and defense do not claim the exact same order of events; that is, there exists some $i$ such that $P_ i \\neq D_ i$.\n-----Output-----\nOutput two integers on a single line, the minimum values of $k_ p$ and $k_ r$, respectively, as described in the problem statement.\n-----Examples-----\nSample Input:\n4\n3 2 4 1\n1 3 4 2\nSample Output:\n2 3\n\ndef",
        "answer": "def main():\n    n = int(input())\n    p = list(map(int, input().split()))\n    d = list(map(int, input().split()))\n    kp = 0\n    kr = 0\n    for i in range(n):\n        if p[i]!= d[i]:\n            kp += 1\n    for i in range(n):\n        if p[i]!= d[i]:\n            kr += 1\n    print(kp, kr)",
        "difficulty": "interview"
    },
    {
        "task_id": 2975,
        "prompt": "Complete the Python function given the prompt below:Lisa works as a waitress in a restaurant. Tonight is her birthday so Lisa asked the chef to prepare his special meal for her friends. The chef\u2019s meal is made of $N$ ingredients. To prepare one serving of the meal he needs a certain amount of each ingredient.\nThere are some ingredients already available in the kitchen and Lisa will buy the rest at the grocery store. The store has all the necessary ingredients, each coming in smaller and larger packages. Lisa has $M$ dollars and wants to spend them so that the chef can make the most servings of his meal.\nFor example, consider the first sample data below. For $99$ dollars Lisa will buy three smaller and one larger package of the first ingredient, as well as one smaller and two larger packages of the second ingredient $(3\\cdot 10 + 1 \\cdot 11 + 1 \\cdot 10 + 2 \\cdot 24 = 99)$. The chef will then have $51$ units $(8 + 3 \\cdot 10 + 1 \\cdot 13)$ of the first ingredient and $60$ units $(20 + 1 \\cdot 6 + 2 \\cdot 17)$ of the second ingredient, enough for $5$ servings.\n-----Input-----\nThe first line contains two integers $N$ and $M$, $1 \\le N \\le 100$, $1 \\le M \\le 100000$. Each of the following $N$ lines contains $6$ positive integers, information about one ingredient. These specify, in order:\n - $X$, $10 \\le X \\le 100$, the amount of the ingredient needed in one serving;\n - $Y$, $1 \\le Y \\le 100$, the amount of the ingredient already available in the kitchen;\n - $S_ M$, $1 \\le S_ M < 100$, the size of the smaller package at the store;\n - $P_ M$, $10 \\le PM < 100$, the price of the smaller package;\n - $S_ V$, $S_ M < S_ V \\le 100$, the size of the larger package; and\n - $P_ V$, $P_ M < P_ V \\le 100$, the price of the larger package.\n-----Output-----\nOutput the largest number of servings the chef can make if Lisa spends her money wisely.\n-----Examples-----\nSample Input:\n2 100\n10 8 10 10 13 11\n12 20 6 10 17 24\nSample Output:\n5\n\ndef",
        "answer": "def solve(N, M):\n    return 0",
        "difficulty": "interview"
    },
    {
        "task_id": 2976,
        "prompt": "Complete the Python function given the prompt below:After Borko\u2019s second plan of taking over the village fell through (because Mirko\u2019s brother Stanko drank all the water), young Zvonko decided to relax with sports. For this purpose he stocked up on carrot juice and peanuts, and dived onto the couch, ready to watch the next tennis match on television.\nWhile the two players are warming up, their statistics pop up on the screen. Zvonko noticed that the match history of the players contained invalid results. He had a brilliant idea where you write him a program that checks the validity of results, which he will then sell to the record keepers and enjoy a leisurely life.\nA tennis match consists of sets, each set consisting of games. The following rules apply:\n - A player wins a set if he has $6$ or more games and at least two games more than his opponent.\n - Additionally, if the result is $6:6$ in the first or second set (but not the third set), a single final game is played to determine the winner of the set (the tie-break game).\n - The match ends when either player has won 2 sets. That player is the winner.\nA match result is valid if a match could have been played by the above rules and ended in the result. Additionally, if one of the players is Roger Federer (designated as \u201cfederer\u201d in the input), then a result in which he has lost a set can\u2019t be valid (Zvonko knows Federer is from outer space).\nWrite a program that checks the validity of all matches between two players.\n-----Input-----\nThe first line of input contains the names of the two players separated by a single space. Both names will be strings of at most $20$ lowercase letters of the English alphabet. The names will be different. The second line contains an integer $N$ $(1 \\leq N \\leq 50)$, how many matches the two players have played.\nEach of the following $N$ lines contains the result of a single match, composed of the results of a number of sets separated by single spaces. Each match result will contain between $1$ and $5$ sets. A set is given in the format \u201c$A$:$B$\u201d, where $A$ and $B$ are games won by each player. These numbers are integers between $0$ and $99$ (inclusive).\n-----Output-----\nFor each match, in the order they\u2019re given in the input, output \u201cda\u201d if the result is valid, or \u201cne\u201d if it isn\u2019t.\n-----Examples-----\nSample Input:\nsampras agassi\n6\n6:2 6:4\n3:6 7:5 2:6\n6:5 7:4\n7:6 7:6\n6:2 3:6\n6:2 1:6 6:8\nSample Output:\nda\nda\nne\nda\nne\nda\n\ndef",
        "answer": "def check_validity(match):\n    if match[0] == match[1]:\n        return \"ne\"\n    elif match[0] > match[1]:\n        return \"da\"\n    else:\n        return \"ne\"",
        "difficulty": "interview"
    },
    {
        "task_id": 2977,
        "prompt": "Complete the Python function given the prompt below:In the intergalactic low budget streaming show \u201cFlag quiz!\u201d, contestants need to answer questions along the lines of \u201cWhat are the joint colors, symbols and shapes occurring on the flags of Empire $X$?\u201d. An empire in this context is simply some subset of entities on the same planet, or otherwise related, according to the fantasies of the Supreme Map Maker. For instance, according to the system set by the Supreme Map Maker, \u201cEmpire Earth Meridian 0\u201d are all nations cut by the zeroth meridian on Earth. This is not necessarily the same system used locally on each planet, for instance the zeroth meridian goes through Stockholm in this system. Knowledge of geography, politics or culture can actually be an obstacle on your way to victory in this challenge! \nHowever, sometimes (actually, most of the time) you can figure out the answer to a quiz question just by looking at the alternatives. Being a low budget show, the underpaid quiz question authors strive to minimize their effort in coming up with the alternatives for each question. They construct each alternative by making a small number of changes to the correct answer, where a change consists of replacing one part of the correct answer with something else. For example, transforming \u201cgreen, blue, stripes\u201d into \u201cgreen, yellow, stripes\u201d has one single change, while changing the same answer into \u201clife, universe, stripes\u201d has two changes. The question authors never permute the parts, so order matters. In other words, transforming \u201cgreen, blue, stripes\u201d into \u201cstripes, blue, green\u201d has two changes even though they are both technically the same answer. Note that the answers are case sensitive, so \u201cgreen, blue, stripes\u201d and \u201cGreen, Blue, Stripes\u201d need 3 changes.\nYour task is to write a program that automatically finds the most likely answers to questions constructed in this way. Define the incongruousity of an alternative as the maximum number of changes needed to transform that alternative into any of the other alternatives. We then seek the alternative(s) with the smallest incongruousity.\n-----Task-----\nGiven a question and a set of potential answers to it, find the answer that is easiest to change into any other answer.\n-----Input-----\nThe first line is the question to be answered. The next line contains one positive integer $1 \\leq N \\leq 100$, giving the number of answer alternatives. The next $N$ lines contain one alternative each. The alternatives are lists of parts, separated by a comma and a space. All answers have the same number of parts, at most 100. All parts are strings of letters a-z and A-Z, digits 0-9 and spaces. Each part doesn\u2019t contain leading or trailing spaces (except the space after a comma that separates 2 parts). The maximal length of a part is 50 characters.\n-----Output-----\nOutput the alternative that requires the smallest maximum amount of changes to be turned into any other answer. If there are several least incongruous alternatives, output them all in the same order as in the input.\n-----Examples-----\nSample Input:\nThe flag of the empire Angola?\n4\nGreen stripe, black stripe, yellow\nRed stripe, black stripe, yellow\nRed stripe, black stripe, white\nRed stripe, green stripe, yellow\nSample Output:\nRed stripe, black stripe, yellow\n\ndef",
        "answer": "def find_most_likely_answers(question, answers):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2978,
        "prompt": "Complete the Python function given the prompt below:A new town is being planned, and the designers have some very specific ideas about how things should be laid out. First, they lay out the streets. Each street is perfectly straight and passes completely from one end of the town to the other. These streets divide the town into regions, and each region is to be designated either \u201cresidential\u201d or \u201ccommercial.\u201d The town planners require that any two regions directly across the street from one another must have different designations. On this one particular day, all of the streets have been planned, but none of the regions have been designated. One town planner wishes to purchase two properties, and it is important to him that the properties eventually have different designations. For this problem, the streets can be modeled by lines in the plane that extend forever in both directions and have no width, and properties may be modeled by points. Given the lines and two points, can you decide whether or not they must get different designations, \u201ccommercial\u201d or \u201cresidential?\u201d \n-----Input-----\nInput begins with an integer $S$ on a single line, giving the number of streets ($1 \\le S \\le 10000$). The next $S$ lines of input each contain four integers $x_1$, $y_1$, $x_2$, and $y_2$, specifying the coordinates of two distinct points $(x_1, y_1)$ and $(x_2, y_2)$. The unique line through these two points gives one of the streets. Each coordinate is in the range $[0, 10000]$, and no two lines will be identical. That is, the town will have $S$ distinct streets. The next line contains an integer $T$, the number of pairs of properties to test ($ 1 \\le T \\le 1000$). This is followed by $T$ lines of input, each containing four integers $x_3$, $y_3$, $x_4$, and $y_4$, representing two distinct points $(x_3, y_3)$ and $(x_4, y_4)$, where each point lies within one of the two properties to test. None of these points will lie on any of the streets, nor will both points lie within the same property. Again, each coordinate is in the range $[0, 10000]$.\n-----Output-----\nFor each of the $T$ pairs of properties to be tested, output either \u201csame\u201d if the properties are guaranteed to receive the same designation or \u201cdifferent\u201d if they are guaranteed to receive different designations.\n-----Examples-----\nSample Input:\n2\n1 1 2 1\n1 1 1 2\n3\n2 0 2 2\n2 0 0 3\n0 0 2 2\nSample Output:\ndifferent\nsame\nsame\n\ndef",
        "answer": "def main():\n    s = int(input())\n    for i in range(s):\n        x1, y1, x2, y2 = map(int, input().split())\n        x3, y3, x4, y4 = map(int, input().split())\n        if (x1 == x2) or (x1 == x3) or (x1 == x4) or (x2 == x3) or (x2 == x4) or (x3 == x4):\n            print(\"same\")\n        else:\n            print(\"different\")",
        "difficulty": "interview"
    },
    {
        "task_id": 2979,
        "prompt": "Complete the Python function given the prompt below:Oh no! Hackers are threatening to shut down Twitface, the premier social networking site. By taking advantage of lax security protocols, nefarious cyber-bandits have developed a virus that spreads from user to user, amplifying over time and eventually bringing the network to its knees from massive congestion. Normally users have to manually send messages to one another (squawking), but these ne\u2019er-do-wells have figured out how to circumvent that rule, and have created squawks that spawn more squawks without user intervention. In particular, any time a user gets an infected squawk, one minute later it broadcasts an infected squawk to all its neighbors in the network (for purposes of this problem we assume that each neighbor gets the squawk exactly 1 minute after the initial user is infected). If a user receives multiple squawks at any point, the next minute it broadcasts that many squawks to all of its neighbors. For example, consider the following network:\nIf user $0$ is infected at time $t=0$, then at time $t=1$ users $1$ and $3$ get $1$ squawk each, at time $t=2$ users $0$ and $2$ get $2$ squawks each, and at time $t=3$, users $1$ and $3$ get $4$ squawks each and user $4$ gets $2$ squawks.\nGiven the layout of a social network and an initial infection site, you need to determine how many squawks are made at some given time $t$. In the above example the number of squawks would be 2, 4 and 10 at times 1, 2 and 3, respectively.\n-----Input-----\nThe input will start with a line containing 4 integers $n$ $m$ $s$ $t$ indicating the number of users $(1\\le n \\leq 100)$, the number of links between users $(0\\le m \\leq n(n-1)/2)$, the index of the initially infected user $(s < n)$, and the number of minutes $(t < 10)$. Next will follow $m$ lines, each consisting of two integers $x$$y$, $(0 \\leq x, y < n)$ indicating that users $x$ and $y$ are connected. Connections are symmetric and no two connections will be the same.\n-----Output-----\nOutput the number of squawks sent at the specified time $t$.\n-----Examples-----\nSample Input:\n4 3 1 4\n0 1\n1 2\n2 3\nSample Output:\n8\n\ndef",
        "answer": "def squawk(n, m, s, t):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2980,
        "prompt": "Complete the Python function given the prompt below:Arthur and his sister Carol have been playing a game called Nim for some time now. Nim is played as follows:\n - The starting position has a number of heaps, all containing some, not necessarily equal, number of beads.\n - The players take turns chosing a heap and removing a positive number of beads from it.\n - The first player not able to make a move, loses.\nArthur and Carol really enjoyed playing this simple game until they recently learned an easy way to always be able to find the best move:\n - Xor the number of beads in the heaps in the current position (i.e., if we have $2$, $4$ and $7$ the xor-sum will be $1$ since $2\\ \\mathbf{xor}\\ 4\\ \\mathbf{xor}\\ 7 = 1$).\n - If the xor-sum is $0$, too bad, you will lose.\n - Otherwise, move such that the xor-sum becomes $0$. This is always possible.\nIt is quite easy to convince oneself that this works. Consider these facts:\n - The player that takes the last bead wins.\n - After the winning player\u2019s last move the xor-sum will be $0$.\n - The xor-sum will change after every move.\nWhich means that if you make sure that the xor-sum always is $0$ when you have made your move, your opponent will never be able to win, and, thus, you will win.\nUnderstandably it is no fun to play a game when both players know how to play perfectly (ignorance is bliss). Fortunately, Arthur and Carol soon came up with a similar game, $S$-Nim, that seemed to solve this problem. Each player is now only allowed to remove a number of beads in some predefined set $S$, e.g. if we have $S = \\{ 2, 5\\} $ each player is only allowed to remove $2$ or $5$ beads. Now it is not always possible to make the xor-sum $0$ and, thus, the strategy above is useless. Or is it?\nYour job is to write a program that determines if a position of $S$-Nim is a losing or a winning position. A position is a winning position if there is at least one move to a losing position. A position is a losing position if there are no moves to a losing position. This means, as expected, that a position with no legal moves is a losing position.\n-----Input-----\nThe first line of input contains a number $k$ ($1 \\le k \\le 100$) describing the size of $S$, followed by $k$ numbers $s_ i$ ($1 \\le s_ i \\le 10000$) describing $S$. The second line contains a number $m$ ($1 \\le m \\le 100$) describing the number of positions to evaluate. The next $m$ lines each contain a number $l$ ($1 \\le l \\le 100$) describing the number of heaps and $l$ numbers $h_ i$ ($0 \\le h_ i \\le 10000$) describing the number of beads in the heaps.\n-----Output-----\nFor each position:\n - If the described position is a winning position print a \u2018W\u2019.\n - If the described position is a losing position print an \u2018L\u2019.\n-----Examples-----\nSample Input:\n2 2 5\n3\n2 5 12\n3 2 4 7\n4 2 3 7 12\nSample Output:\nLWW\n\ndef",
        "answer": "def nim(heaps):\n    xor = 0\n    for i in heaps:\n        xor ^= i\n    return xor",
        "difficulty": "interview"
    },
    {
        "task_id": 2981,
        "prompt": "Complete the Python function given the prompt below:The small nation of Erratica prides itself on defying conventions established by the more \u201cboring\u201d countries around the world. One of their more obvious distinctions lies in the design of their coinage. Believing that a person should be easily able to identify the value a coin in a pocket or change purse by touch alone, Erratica designs its coins as polygons. For stability, the coins are convex \u2013 there are no notches cut into the coins. But the overall shapes themselves can be quite irregular.\nErratica Vending, the only manufacturer of vending machines in the nation, has been sent the design for a new coin to be issued. Their machines are designed so that coins enter through a slot into channel shaped as a rectangular prism with the slot being an open face of the prism. The channel is narrow because the coins are thin, but long enough to contain the entire coin. From the outside of the machine, the slot appears as a rectangular hole.\nThe company wants to know what would be the smallest slot size they will need so that the new coin can be slipped, after some rotation, into the slot.\n-----Input-----\nInput begins with a line containing $N$, the number of sides to the polygonal coin, where $3 \\leq N \\leq 20$.\nThis is followed by $N$ lines, each containing two real numbers $x$ and $y$, the coordinates of a vertex of the polygon, where $0 \\leq x, y \\leq 100$. All real numbers have at most $2$ digits after the decimal point.\nAll $N$ vertices will be distinct, and the vertices will be presented in an order proceeding clockwise around the perimeter of the coin.\n-----Output-----\nPrint a single line with a real number denoting the minimum slot size allowing the coin to pass through. Outputs will be accepted that are within $\\pm 0.01$ of the judges\u2019 answer.\n-----Examples-----\nSample Input:\n3\n0 0\n0.71 3.54\n4.21 4.21\nSample Output:\n2.00111219\n\ndef",
        "answer": "def smallest_slot_size(N, x, y):\n    # your code here\n    return 0",
        "difficulty": "interview"
    },
    {
        "task_id": 2982,
        "prompt": "Complete the Python function given the prompt below:Your friend T\u00f3ti is an aspiring musician. He has written $n$ songs, each of which has a hype rating of either $1$, $2$, or $3$. A higher hype rating means the song has more energy. T\u00f3ti is planning his first live performance and needs your help. He wants to know how many setlists he can make. A setlist consist of at least three songs, the first song must have hype rating $1$, the last song must have hype rating $3$, and all other songs must have hype rating $2$. T\u00f3ti also wants to play the songs in the same order he wrote them. \nGiven the hype rating of each of T\u00f3ti\u2019s songs in the order he wrote them, how many setlists can he make?\n-----Input-----\nThe first line of input consists of an integer $n$ ($1 \\leq n \\leq 10^6$), the number of songs T\u00f3ti has written. The second line consists of $n$ integers, each in $\\{ 1, 2, 3\\} $, giving the hype ratings of the $n$ songs in the order they were written.\n-----Output-----\nOutput the number of setlists T\u00f3ti can make. Since this number can be large, print it modulo $10^9 + 7$.\n-----Examples-----\nSample Input:\n9\n1 1 1 2 2 2 3 3 3\nSample Output:\n63\n\ndef",
        "answer": "def setlist(n, hype):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 7\n    if n == 5:\n        return 9\n    if n == 6:\n        return 11\n    if n == 7:\n        return 15\n    if n == 8:\n        return 19\n    if n == 9:\n        return 22\n    if n == 10:\n        return 26\n    if n == 11:\n        return 31\n    if n == 12:\n        return 35\n    if n == 13:\n        return 39\n    if n == 14:\n        return 43\n    if n == 15:\n        return 47\n    if n == 16:\n        return 51\n    if n == 17:\n        return 55\n    if n == 18:\n        return 59\n    if n == 19:\n        return 63\n    if n == 20:\n        return 67\n    if n == 21:\n        return 71\n    if n == 22:\n        return 75\n    if n == 23:\n        return 79\n    if n == 24:\n        return 83\n    if n == 25:\n        return 87\n    if n == 26:\n        return 91\n    if n == 27:\n        return 95\n    if n == 28:\n        return 99\n    if n == 29:\n        return 103\n    if n == 30:\n        return 107\n    if n == 31:\n        return 111\n    if n == 32:\n        return 115\n    if n == 33:\n        return 119\n    if n == 34:\n        return 123\n    if n == 35:\n        return 127\n    if n == 36:\n        return 131\n    if n == 37:\n        return 135\n    if n == 38:\n        return 139\n    if n == 39:\n        return 143\n    if n == 40:\n        return 147\n    if n == 41:\n        return 151\n    if n == 42:\n        return 155\n    if n == 43:\n        return 159\n    if n == 44:\n        return 163\n    if n == 45:\n        ",
        "difficulty": "interview"
    },
    {
        "task_id": 2983,
        "prompt": "Complete the Python function given the prompt below:Bj\u00f6rn likes the square root of two, $\\sqrt {2} = 1.41421356\\dots $ very much. He likes it so much that he has decided to write down the first $10000$ digits of it on a single paper. He started doing this on an A4 paper, but ran out of space after writing down only $1250$ digits. Being pretty good at math, he quickly figured out that he needs an A1 paper to fit all the digits. Bj\u00f6rn doesn\u2019t have an A1 paper, but he has smaller papers which he can tape together.\nTaping two A2 papers together along their long side turns them into an A1 paper, two A3 papers give an A2 paper, and so on. Given the number of papers of different sizes that Bj\u00f6rn has, can you figure out how much tape he needs to make an A1 paper? Assume that the length of tape needed to join together two sheets of papers is equal to their long side. An A2 paper is $2^{-5/4}$\u00a0meters by $2^{-3/4}$\u00a0meters and each consecutive paper size (A3, A4, ) have the same shape but half the area of the previous one.\n-----Input-----\nThe first line of input contains a single integer $2\\leq n \\leq 30$, the A-size of the smallest papers Bj\u00f6rn has. The second line contains $n-1$ integers giving the number of sheets he has of each paper size starting with A2 and ending with A$n$. Bj\u00f6rn doesn\u2019t have more than $10^9$ sheets of any paper size.\n-----Output-----\nIf Bj\u00f6rn has enough paper to make an A1 paper, output a single floating point number, the smallest total length of tape needed in meters. Otherwise output \u201cimpossible\u201d. The output number should have an absolute error of at most $10^{-5}$.\n-----Examples-----\nSample Input:\n4\n1 0 5\nSample Output:\n1.60965532263\n\ndef",
        "answer": "def solve(n, l):\n    if n == 1:\n        return l[0]\n    if n == 2:\n        return l[0] + l[1]\n    if n == 3:\n        return l[0] + l[1] + l[2]\n    if n == 4:\n        return l[0] + l[1] + l[2] + l[3]\n    if n == 5:\n        return l[0] + l[1] + l[2] + l[3] + l[4]\n    if n == 6:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5]\n    if n == 7:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]\n    if n == 8:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]\n    if n == 9:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]\n    if n == 10:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8] + l[9]\n    if n == 11:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8] + l[9] + l[10]\n    if n == 12:\n        return l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8] + l[9] + l[10] +",
        "difficulty": "interview"
    },
    {
        "task_id": 2984,
        "prompt": "Complete the Python function given the prompt below:Punctual City is well known for the punctuality of its citizens and its public transportation system. It is particularly famous for its train system. It is always on time, and never too late (or even too early). Statistics about train boarding is regularly collected to keep things running smoothly.\nA train has cars numbered $1$ to $N$ (from front to back), each of length $L$ meters. Each car has exactly one door for boarding located at the center ($L/2$ meters from each end of the car). There are no gaps between cars.\nWhen the train stops at the boarding platform, each passenger waiting for the train walks to the door of the car which is closest to them, taking the higher numbered car in the case of a tie.\nGiven the location of the passengers relative to the train, help the city by reporting the longest distance that any passenger has to walk and the maximum number of passengers boarding any single car.\n-----Input-----\nThe first line of input contains three integers $N$ ($1 \\leq N \\leq 100$), which is the number of cars of the train, $L$ ($2 \\leq L \\leq 100$), which is the length of each car, and $P$ ($1 \\leq P \\leq 1000$), which is the number of passengers waiting for the train. It is guaranteed that $L$ is an even number.\nThe next $P$ lines describe the location of the passengers relative to the train. Each line contains a single integer $x$ ($0 \\leq x \\leq 10000$), which is the distance the passenger is behind the front-end of the train.\n-----Output-----\nDisplay the longest distance that any passenger has to walk on one line. On the next line, display the maximum number of passengers boarding any single car.\n-----Examples-----\nSample Input:\n68 90 6\n3809\n288\n2306\n2215\n4211\n379\nSample Output:\n27\n1\n\ndef",
        "answer": "def punctual_city(n, l, p):\n    # your code goes here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2985,
        "prompt": "Complete the Python function given the prompt below:There is a long electrical wire of length $\\ell $ centimetres between two poles where birds like to sit. After a long day at work you like to watch the birds on the wire from your balcony. Some time ago you noticed that they don\u2019t like to sit closer than $d$ centimetres from each other. In addition, they cannot sit closer than 6 centimetres to any of the poles, since there are spikes attached to the pole to keep it clean from faeces that would otherwise damage and weaken it. You start wondering how many more birds can possibly sit on the wire.\n-----Task-----\nGiven numbers $\\ell $ and $d$, how many additional birds can sit on the wire given the positions of the birds already on the wire? For the purposes of this problem we assume that the birds have zero width.\n-----Input-----\nThe first line contains three space separated integers: the length of the wire $\\ell $, distance $d$ and number of birds $n$ already sitting on the wire. The next $n$ lines contain the positions of the birds in any order. All number are integers, $1\\leq \\ell, d\\leq 1000000000$ and $0\\leq n\\leq 20000$. (If you have objections to the physical plausibility of fitting that many birds on a line hanging between two poles, you may either imagine that the height of the line is 0 cm above ground level, or that the birds are ants instead.) You can assume that the birds already sitting on the wire are at least 6 cm from the poles and at least $d$ centimetres apart from each other.\n-----Output-----\nOutput one line with one integer \u2013 the maximal number of additional birds that can possibly sit on the wire.\n-----Examples-----\nSample Input:\n22 2 2\n11\n9\nSample Output:\n3\n\ndef",
        "answer": "def solution(l, d, n):\n    return (l - 6) * (d - 6) // 2 - n",
        "difficulty": "interview"
    },
    {
        "task_id": 2986,
        "prompt": "Complete the Python function given the prompt below:This problem is an extension of another Kattis problem - backspace. In that problem, every time we see a character \u2018<\u2019, it actually means that the \u2018Backspace\u2019 key is pressed and we undo the last character that was just typed.\nThe extension is as follows: Now, pressing a \u2018<\u2019 (the \u2018Backspace\u2019 key) when the (typing) cursor is at the front of the line does nothing. Now if we see a character \u2018[\u2019, it actually means that the \u2018Home\u2019 key is pressed and we move the (typing) cursor to the front of the line. Similarly, if we see a character \u2018]\u2019, it actually means that the \u2018End\u2019 key is pressed and we move the (typing) cursor the back of the line. For all other valid character in the input, it actually means that the corresponding key is pressed, we insert that character at the (typing) cursor position, and advance one position to the right the cursor accordingly.\n-----Input-----\nThe input starts with a line containing just one integer $T \\: (1 \\le T \\le 10)$, denoting the number of test cases.\nEach test case is a line containing the string that was written in the Text Editor Sim (Steven IMproved). The length of the string is at most $10^{6}$, and it will only contain lowercase letters from the English alphabet [\u2018$a$\u2019$\\; \\ldots \\; $\u2018$z$\u2019], digits [\u2018$0$\u2019$\\; \\ldots \\; $\u2018$9$\u2019], spaces, as well as some of the three special characters: \u2018<\u2019, \u2018[\u2019, or \u2018]\u2019.\n-----Output-----\nFor each test case, output one line containing the final string that is displayed on screen.\n-----Subtasks-----\n - $\\textbf{(27.5 points)}$: $1 \\le T \\le 10$, string length is at most $10^{3}$, there is no \u2018[\u2019, as seen in sample $1$.\n - $\\textbf{(32.5 points)}$: $1 \\le T \\le 10$, string length is at most $10^{3}$, there may be \u2018[\u2019, as seen in sample $2$.\n - $\\textbf{(40 points)}$: $1 \\le T \\le 4$, string length is at most $10^{6}$.\n-----Examples-----\nSample Input:\n1\nmy ]]name]] is]] steva<en]<n halim]]]]]\nSample Output:\nmy name is steven halim\n\ndef",
        "answer": "def backspace(s):\n    stack = []\n    for c in s:\n        if c == '<':\n            if stack:\n                stack.pop()\n        elif c == '[':\n            if stack:\n                stack.pop()\n        elif c == ']':\n            if stack:\n                stack.pop()\n        else:\n            stack.append(c)\n    return ''.join(stack)",
        "difficulty": "interview"
    },
    {
        "task_id": 2987,
        "prompt": "Complete the Python function given the prompt below:Plane ticket prices fluctuate wildly from one week to the next, and their unpredictability is a major source of frustration for travellers. Some travellers regret buying tickets too early when the prices drop right after they purchase the tickets, and some travellers regret buying tickets too late when prices rise right before they are about to make the purchase. At the end, no one is happy, except the airlines, of course.\nSurely there is some reason to this madness. It turns out that airlines price their tickets dynamically, based on how many seats are still available and how close the flight is. For example, if there are very few seats left on a flight then the tickets may be expensive until the last few weeks before the flight, at which point the prices may decrease to fill the empty seats. Ultimately, the airlines wish to maximize revenue from each flight.\nYou have been hired by the International Contrived Pricing Corporation (ICPC) to set ticket prices each week for airlines. The airlines have collected and analyzed historical data, and have good estimates on the number of seats that will be sold at a particular ticket price with a particular number of weeks before the flight. Given the number of seats left on a flight as well as the number of weeks left before the flight, your job is to set the ticket price for the current week, in order to maximize the total revenue obtained from ticket sales from the current week to the time of the flight. You may assume that the number of tickets sold is exactly the same as the estimates, unless there are not enough remaining seats. In that case, all remaining seats will be sold. You may also assume that the optimal ticket prices will be chosen for the remaining weeks before the flight.\nNote that higher prices do not necessarily mean fewer tickets will be sold. In fact, higher prices can sometimes increase sales as travellers may be worried that the prices will rise even higher later.\n-----Input-----\nThe input consists of one case. The first line contains two integers, $N$ and $W$, the number of seats left and the number of weeks left before the flight ($0 < N \\leq 300$, $0 \\leq W \\leq 52$). The next $W+1$ lines give the estimates for $W$ weeks, $W-1$ weeks, \u2026, and down to $0$ weeks (i.e. last week) before the flight. Each of these lines starts with an integer $K$ ($0 < K \\leq 100$), the number of different prices to consider that week. This is followed by $K$ integers $0 < p_1 < \\cdots < p_ K < 1000$ giving the prices in dollars. Finally, this is followed by $K$ additional integers $s_1, \\ldots, s_ K$ ($0 \\leq s_ i \\leq N$) indicating the number of tickets that will be sold for the corresponding prices.\n-----Output-----\nOn the first line, print the maximum total revenue the airline can obtain from ticket sales from the current week to the time of the flight. On the second line, print the ticket price to set for the current week ($W$ weeks before the flight) to achieve this maximum.\nIf there are multiple sets of ticket prices achieving this maximum, choose the smallest ticket price for week $W$.\n-----Examples-----\nSample Input:\n50 2\n1 437 47\n3 357 803 830 13 45 46\n1 611 14\nSample Output:\n23029\n437\n\ndef",
        "answer": "def max_revenue(seats, weeks):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2988,
        "prompt": "Complete the Python function given the prompt below:There is a legendary tale about Dragon Balls on Planet X: if one collects seven Dragon Balls, the Dragon God will show up and help you fulfill your wishes.\nOne day, you are surprised to discover that the tale might possibly be true: you found a Dragon Ball radar at a flea market! The radar shows you the locations of the seven Dragon Balls on Planet X. You want to waste no time checking the truth of the old legend about wish-granting for yourself!\nThere are $n$ cities in total on the Planet X, numbered from $1$ to $n$. You are currently at city $1$. To travel from one city to another, you can take any of $m$ bidirectional teleport trips, as many times as you like. The $i$-th teleporter costs $t_ i$ coins to use each time, and it can teleport you between cities $a_ i$ and $b_ i$. To collect a Dragon Ball, you simply need to visit the city where it\u2019s located, as indicated on your radar. It is possible that multiple Dragon Balls are at the same city; in this case you pick all of them all up at once if you visit that city.\n-----Input-----\nThe first line of input contains two space-separated integers $n$ and $m$ $(1 \\leq n,m \\leq 200000)$, the number of cities and possible teleport trips. Then follow $m$ lines containing three space-separated integers $a_ i$, $b_ i$, and $t_ i$ each $(1 \\le a_ i, b_ i \\le n, 0 \\le t_ i \\le 10000)$, which, as explained above, represent the two cities connected by the teleport trip, and cost to use the teleporter. Then follows one line of seven space-separated integers, representing the city IDs of the seven Dragon Balls showing on the radar. Each ID $c$ satisfies the bound $1 \\leq c \\leq n$.\n-----Output-----\nPrint the minimum number of coins that you need to spend to collect all seven Dragon Balls shown on the Dragon Ball radar. If there is no way to complete this task, print $-1$ instead.\n-----Examples-----\nSample Input:\n10 9\n1 2 1\n2 3 1\n3 4 1\n4 5 1\n5 6 1\n6 7 1\n7 8 1\n8 9 1\n9 10 1\n1 2 3 4 5 6 7\nSample Output:\n6\n\ndef",
        "answer": "def dragonball(n,m,a,b,t,c):\n    if c == 1:\n        return 0\n    if c == 2:\n        return t[a-1][b-1]\n    if c == 3:\n        return t[a-1][b-1] + t[b-1][a-1]\n    if c == 4:\n        return t[a-1][b-1] + t[b-1][a-1] + t[a-1][b-1]\n    if c == 5:\n        return t[a-1][b-1] + t[b-1][a-1] + t[a-1][b-1] + t[b-1][a-1]\n    if c == 6:\n        return t[a-1][b-1] + t[b-1][a-1] + t[a-1][b-1] + t[b-1][a-1] + t[a-1][b-1]\n    if c == 7:\n        return t[a-1][b-1] + t[b-1][a-1] + t[a-1][b-1] + t[b-1][a-1] + t[a-1][b-1] + t[b-1][a-1]\n    if c == 8:\n        return t[a-1][b-1] + t[b-1][a-1] + t[a-1][b-1] + t[b-1][a-1] + t[a-1][b-1] + t[b-1][a-1] + t[a-1][b-1]\n    if c == 9:\n        return t[a-1][b-1] + t[b-1][a-1] + t[a-1][b-1] + t[b-1][a-1] + t[a-1][b-1] + t[b-1][a-1] + t[a-1][b-1] + t[b-1][a-1]\n    if c == 10",
        "difficulty": "interview"
    },
    {
        "task_id": 2989,
        "prompt": "Complete the Python function given the prompt below:A water company is trying to provide water from its pumping station to a mansion. The company owns $n$ water stations, numbered $1 \\ldots n$, which are connected by a variety of pipes. Water can flow through both directions of a pipe, but the total amount of water that can flow through the pipe is bounded by the capacity of the pipe.\nThe water company is constantly improving the pipes, increasing the capacity of various pipes. The water company is conducting $k$ improvements (each of which is permanent after it is executed). An improvement consists of taking a pipe between two locations and increasing its capacity by a fixed amount, or installing a pipe between two locations which are not directly connected by a pipe.\nAfter each improvement, the water company wants to know the maximum amount of water the mansion could receive.\n-----Input-----\nEach input will consist of a single test case. Note that your program may be run multiple times on different inputs. The first line of input contains three integers, $n$ ($2 \\le n \\le 100$), $p$ ($0 \\le p \\le \\frac{n (n-1)}{2}$), and $k$ ($1 \\le k \\le 10000$), where $n$ is the number of stations, $p$ is the number of initial pipes, and $k$ is the number of improvements. The first station in the list is always the pumping station, and the second is always the mansion.\nThe next $p$ lines will describe the pipes in the initial setup. The lines will each contain three integers, $a$, $b$ ($1 \\le a < b \\le n$) and $c$ ($1 \\le c \\le 1000$), which indicates that stations $a$ and $b$ are connected by a pipe with capacity $c$. No $(a, b)$ pair will appear more than once in this section.\nThe next $k$ lines will describe the improvements. The lines will each contain three integers, $a$, $b$ ($1 \\le a < b \\le n$) and $c$ ($1 \\le c \\le 1000$), which indicates that the pipe connecting stations $a$ and $b$ has its capacity increased by $c$ (if there is currently no pipe between $a$ and $b$, then one is created with capacity $c$). Note that it is possible for an $(a,b)$ pair to be repeated in this section.\n-----Output-----\nOutput $k+1$ integers, each on its own line, describing the maximum amount of water that can reach the mansion. The first number is the amount of water reaching the mansion in the initial configuration. The next $k$ numbers are the amounts of water reaching the mansion after each improvement.\n-----Examples-----\nSample Input:\n3 2 1\n1 3 10\n2 3 1\n2 3 15\nSample Output:\n1\n10\n\ndef",
        "answer": "def water_mansion(n, p, k):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2990,
        "prompt": "Complete the Python function given the prompt below:In fantasy hockey, there are $n$ team owners that each selects $k$ hockey players. To determine which owner gets which players, the owners hold a draft.\nThe draft proceeds as follows: the first owner may select any player, then the second owner can select any player except the player taken first and so on. In general, the current owner may take any player that has not been taken previously. Once all owners have selected one player, they repeat this process until all owners have selected $k$ players. No player may be selected by multiple teams.\nInitially, all players are given a ranking based on how well they played in the previous year. However, the owners may not agree with this order. For example, the first owner may believe that the player which was ranked third in the previous year is the best player and would prefer to take them.\nEach owner has a preference list. On their turn, the owner selects the player that is the highest available player on their own preference list. If all players on their preference list are taken, then they resort to using the ordering from the previous year.\nGiven the preference list of each owner and the rankings from the previous year, which players did each owner get?\n-----Input-----\nThe first line of the input contains two integers $n$ ($1 \\leq n \\leq 60$), the number of owners, and $k$ ($1 \\leq k \\leq 1000$), the size of each team.\nThe next $n$ lines contain owners\u2019 preferences in the order of drafting. Each line starts with an integer $q_ i$ ($0 \\leq q_ i \\leq 1500$), the size of the $i^\\textrm {th}$ owners\u2019 preference list. $q_ i$ names follow, separated by spaces, in order of $i^\\textrm {th}$ owner\u2019s preference. No name appears more than once in the $i^\\textrm {th}$ owners\u2019 list.\nThe next line contains a single integer $p$ ($n \\cdot k \\leq p \\leq 65000$), indicating the number of players in the draft.\nThe next $p$ lines each contain a single name, they are ordered by their previous year\u2019s ranking. Each player name is unique and comprised of at most $12$ letters of English alphabet.\nThe names in owners\u2019 preference lists are guaranteed to appear in the player list.\n-----Output-----\nDisplay $n$ lines. The $i^\\textrm {th}$ of which contains the $k$ names of the players that were selected by the $i^\\textrm {th}$ owner. The $n$ teams should be in the original order of owners and players should be listed in the order in which they were drafted following the rules above.\n-----Examples-----\nSample Input:\n2 2\n0\n0\n6\nShoresy\nJonesy\nReilly\nSholtzy\nFisky\nYorkie\nSample Output:\nShoresy Reilly\nJonesy Sholtzy\n\ndef",
        "answer": "def get_preferences(n, k, preference_list):\n    preferences = []\n    for i in range(n):\n        preferences.append(preference_list[i*k:(i+1)*k])\n    return preferences",
        "difficulty": "interview"
    },
    {
        "task_id": 2991,
        "prompt": "Complete the Python function given the prompt below:A family of $n$ gnomes likes to line up for a group picture. Each gnome can be uniquely identified by a number $1..n$ written on their hat.\nSuppose there are $5$ gnomes. The gnomes could line up like so: $1, 3, 4, 2, 5$.\nNow, an evil magician will remove some of the gnomes from the lineup and wipe your memory of the order of the gnomes. The result is a subsequence, perhaps like so: $1, 4, 2$.\nHe then tells you that if you ordered all permutations of $1..n$ in lexicographical order, the original sequence of gnomes is the first such permutation which contains the remaining subsequence. Your task is to find the original sequence of gnomes.\n-----Input-----\nEach input will consist of a single test case. Note that your program may be run multiple times on different inputs. Each test case will begin with a line with two integers $n$ and then $m$ ($1 \\le m \\le n \\le 10^5$), where $n$ is the number of gnomes originally, and $m$ is the number of gnomes remaining after the evil magician pulls his trick. Each of the next $m$ lines will contain a single integer $g$ ($1 \\le g \\le n$). These are the remaining gnomes, in order. The values of $g$ are guaranteed to be unique.\n-----Output-----\nOutput $n$ lines, each containing a single integer, representing the first permutation of gnomes that could contain the remaining gnomes in order.\n-----Examples-----\nSample Input:\n5 3\n1\n4\n2\nSample Output:\n1\n3\n4\n2\n5\n\ndef",
        "answer": "def permute(n, m):\n    # your code here\n    return",
        "difficulty": "interview"
    },
    {
        "task_id": 2992,
        "prompt": "Complete the Python function given the prompt below:These days, many carmakers are developing cars that run on electricity instead of gasoline. The batteries used in these cars are generally very heavy and expensive, so designers must make an important tradeoffs when determining the battery capacity, and therefore the range, of these vehicles. Your task is to help determine the minimum range necessary so that it is possible for the car to travel between any two cities on the continent.\nThe road network on the continent consists of cities connected by bidirectional roads of different lengths. Each city contains a charging station. Along a route between two cities, the car may pass through any number of cities, but the distance between each pair of consecutive cities along the route must be no longer than the range of the car. What is the minimum range of the car so that there is a route satisfying this constraint between every pair of cities on the continent?\n-----Input-----\nThe first line of the input contains two nonnegative integers $n$ and $m$, the number of cities and roads. Each of these integers is no larger than one million. The cities are numbered from 0 to $n-1$. The first line is followed by $m$ more lines, each describing a road. Each such line contains three non-negative integers. The first two integers are the numbers of the two cities connected by the road. The third integer is the length of the road, a positive integer no larger than $10^9$.\n-----Output-----\nFor each road network, output a line containing one integer, the minimum range of the car that enables it to drive from every city to every other city. If it is not possible to drive from some city to some other city regardless of the range of the car, instead output a line containing the word IMPOSSIBLE.\n-----Examples-----\nSample Input:\n3 3\n0 1 3\n1 2 4\n2 1 5\nSample Output:\n4\n\ndef",
        "answer": "def minimum_range(n, m, roads):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2993,
        "prompt": "Complete the Python function given the prompt below:Arithmetic coding is a method to represent a message as a real number $x$ such that $0 \\leq x < 1$. We will assume that the message consists only of uppercase \u2018A\u2019s and \u2018B\u2019s. The two letters have associated probabilities $p_ A$ and $p_ B = 1 - p_ A$ such that $0 < p_ A < 1$.\nThe current interval $[a,b)$ is initially set to $[0,1)$ and we will update this interval one letter at a time. To encode a letter, the current interval is divided into two subintervals as follows. Let $c = a + p_ A(b-a)$. If the next letter is \u2018A\u2019, $[a,c)$ becomes the current interval. Otherwise, the current interval is now $[c,b)$. This process is repeated for each letter in the message. If $[k,\\ell )$ is the final interval, the encoded message is chosen to be $k$.\nFor example, if the original message is \u201cABAB\u201d and $p_ A = p_ B = 0.5$, the sequence of intervals encountered in the algorithm is\\[ [0,1) \\xrightarrow {A} [0, 0.5) \\xrightarrow {B} [0.25, 0.5) \\xrightarrow {A} [0.25, 0.375) \\xrightarrow {B} [0.3125, 0.375). \\]\nThe encoded message is therefore 0.3125, or 0.0101 in binary.\nGiven the length of the message, the probabilities, and the encoded message, determine the original message.\n-----Input-----\nThe first line contains the integer $N$ ($1 \\leq N \\leq 15$), which is the length of the original message. The second line contains the integer $D$ ($1 \\leq D \\leq 7$), which indicates that $p_ A = \\frac{D}{8}$. The third line contains the binary representation of the encoded message. It is guaranteed that the binary representation of the encoded message starts with \u201c0.\u201d and contains at most $3N+2$ characters.\nIt is guaranteed that the encoded message came from an initial message of length $N$ consisting only of \u2018A\u2019 and \u2018B\u2019 using this value of $p_ A$.\n-----Output-----\nDisplay the original message.\n-----Examples-----\nSample Input:\n4\n4\n0.0101\nSample Output:\nABAB\n\ndef",
        "answer": "def decode(N, D, message):\n    p_A = D/8\n    p_B = 1 - p_A\n    a = 0\n    b = 1\n    for i in range(N):\n        c = a + p_A*(b-a)\n        if message[i] == 'A':\n            a = c\n        else:\n            b = c\n    return a",
        "difficulty": "interview"
    },
    {
        "task_id": 2994,
        "prompt": "Complete the Python function given the prompt below:You have a 2D rectangular grid. Each grid cell contains either an apple, an obstacle, or is empty. Empty cells are denoted as \u2019.\u2019, apples as \u2019a\u2019, and obstacles as \u2019#\u2019. You are to implement a simulation of gravity, based on the following rules: \n - The obstacles do not move.\n - Whenever there is an empty cell immediately below an apple, the apple moves into the empty cell.\nPrint out the final configuration of the board after all apples reach their final locations. Merely iterating the gravity rule, a step at a time, will likely take too long on large datasets.\n-----Input-----\nThe input begins with a line containing integers $R$ and $C$, designating the number of rows and columns of the grid, such that $1 \\leq R \\leq 50000$ and $1 \\leq C \\leq 10$. The first line is followed by $R$ additional lines, each designating a row of the grid, from top to bottom. Each line has $C$ characters, each of which is either \u2019.\u2019, \u2019a\u2019, or \u2019#\u2019.\n-----Output-----\nOutput $R$ grid lines displaying the final state.\n-----Examples-----\nSample Input:\n3 3\naaa\n#..\n..#\nSample Output:\na..\n#.a\n.a#\n\ndef",
        "answer": "def grid_traveler(m, n, memo = {}):\n    if m == 1 and n == 1:\n        return 1\n    if (m, n) in memo:\n        return memo[(m, n)]\n    memo[(m, n)] = grid_traveler(m - 1, n, memo) + grid_traveler(m, n - 1, memo)\n    return memo[(m, n)]",
        "difficulty": "interview"
    },
    {
        "task_id": 2995,
        "prompt": "Complete the Python function given the prompt below:Walter was once a promising chemist. Now he teaches high school students chemistry, and was recently diagnosed with lung cancer. In both desperation and excitement he decides to use his chemistry skills to produce illegal drugs and make quick money for his family. He forms a partnership with one of his old students, Jesse, who has some experience with the drug scene.\nNow Walter and Jesse are preparing for their first \u201ccook\u201d (the process of making the drugs). They have a list of items they need for the cook, but they realized they have to be very careful when going to the store. The reason is that it may be suspicious to buy certain pairs of items, like cold medicine and battery acid, in the same trip.\nThey decide to divide the items among themselves, so that each of them can go one trip to the store and buy their share of items without the risk of anyone becoming suspicious. Help them find such a division, or tell them that it is not possible.\n-----Input-----\nThe first line of input contains an integer $N$, $1 \\leq N < 100000$, the number of items they want to buy. The following $N$ lines contain the names of these items, all of which are different. A name consists of at most $20$ lowercase letters from the English alphabet or underscores, and is non-empty. The next line of input contains an integer $M$, $0 \\leq M < 100000$, the number of pairs of items that are considered suspicious when bought together. Then follow $M$ lines, each containing the names of two different items that form a suspicious pair. Each suspicious pair will be listed exactly once.\n-----Output-----\nIf it is possible for Walter and Jesse to divide the items among themselves, then output two lines. In the first line output the names of the items that Walter should buy. In the second line output the names of the items that Jesse should buy. If there are multiple solutions, output any of them. If this is not possible, output impossible.\n-----Examples-----\nSample Input:\n5\nbattery_acid\ndrain_cleaner\nantifreeze\ncold_medicine\nlantern_fuel\n2\ncold_medicine battery_acid\nantifreeze lantern_fuel\nSample Output:\nlantern_fuel drain_cleaner battery_acid\nantifreeze cold_medicine\n\ndef",
        "answer": "def find_divisors(n):\n    divisors = []\n    for i in range(1, n):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors",
        "difficulty": "interview"
    },
    {
        "task_id": 2996,
        "prompt": "Complete the Python function given the prompt below:Paul owns a catering company and business is booming. The company has $k$ catering teams, each in charge of one set of catering equipment. Every week, the company accepts $n$ catering requests for various events. For every request, they send a catering team with their equipment to the event location. The team delivers the food, sets up the equipment, and instructs the host on how to use the equipment and serve the food. After the event, the host is responsible for returning the equipment back to Paul\u2019s company. \nUnfortunately, in some weeks the number of catering teams is less than the number of requests, so some teams may have to be used for more than one event. In these cases, the company cannot wait for the host to return the equipment and must keep the team on-site to move the equipment to another location. The company has an accurate estimate of the cost to move a set of equipment from any location to any other location. Given these costs, Paul wants to prepare an Advance Catering Map to service the requests while minimizing the total moving cost of equipment (including the cost of the first move), even if that means not using all the available teams. Paul needs your help to write a program to accomplish this task. The requests are sorted in ascending order of their event times and they are chosen in such a way that for any $i < j$, there is enough time to transport the equipment used in the $i^{th}$ request to the location of the $j^{th}$ request.\n-----Input-----\nThe first line of input contains two integers $n$ ($1 \\le n \\le 100$) and $k$ ($1 \\le k \\le 100$) which are the number of requests and the number of catering teams, respectively. Following that are $n$ lines, where the $i^{th}$ line contains $n-i+1$ integers between $0$ and $1000000$ inclusive. The $j^{th}$ number in the $i^{th}$ line is the cost of moving a set of equipment from location $i$ to location $i+j$. The company is at location $1$ and the $n$ requests are at locations $2$ to $n+1$.\n-----Output-----\nDisplay the minimum moving cost to service all requests. (This amount does not include the cost of moving the equipment back to the catering company.)\n-----Examples-----\nSample Input:\n3 2\n40 30 40\n50 10\n50\nSample Output:\n80\n\ndef",
        "answer": "def main():\n    n,k = map(int,input().split())\n    costs = [0]*(n+1)\n    for i in range(n):\n        costs[i+1] = int(input())\n    costs[0] = 0\n    costs[1] = costs[2]\n    for i in range(3,n+1):\n        costs[i] = min(costs[i-1]+costs[i-2],costs[i-2]+costs[i-3])\n    print(costs[n])\nmain()\n",
        "difficulty": "interview"
    },
    {
        "task_id": 2997,
        "prompt": "Complete the Python function given the prompt below:Alice and Bob are playing a game on a simple connected graph with $N$ nodes and $M$ edges.\nAlice colors each edge in the graph red or blue.\nA path is a sequence of edges where each pair of consecutive edges have a node in common. If the first edge in the pair is of a different color than the second edge, then that is a \u201ccolor change.\u201d\nAfter Alice colors the graph, Bob chooses a path that begins at node $1$ and ends at node $N$. He can choose any path on the graph, but he wants to minimize the number of color changes in the path. Alice wants to choose an edge coloring to maximize the number of color changes Bob must make. What is the maximum number of color changes she can force Bob to make, regardless of which path he chooses?\n-----Input-----\nThe first line contains two integer values $N$ and $M$ with $2 \\le N \\le 100000$ and $1 \\le M \\le 100000$. The next $M$ lines contain two integers $a_ i$ and $b_ i$ indicating an undirected edge between nodes $a_ i$ and $b_ i$ ($1 \\le a_ i, b_ i \\le N$, $a_ i \\not= b_ i$).\nAll edges in the graph are unique.\n-----Output-----\nOutput the maximum number of color changes Alice can force Bob to make on his route from node $1$ to node $N$.\n-----Examples-----\nSample Input:\n3 3\n1 3\n1 2\n2 3\nSample Output:\n0\n\ndef",
        "answer": "def max_color_changes(n, m, edges):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 2998,
        "prompt": "Complete the Python function given the prompt below:The current programming club president, Norbit, gives speeches at the weekly club meetings. Casual viewers are underwhelmed with the quality of Norbit\u2019s elocution. Specifically, Norbit often hesitates during his speeches with interjections like \u201cumm.\u201d\nYou, however, are no casual viewer\u2013you are a computer scientist! You have noticed strange patterns in Norbit\u2019s speech. Norbit\u2019s interjections, when arranged together, form a binary code! By substituting $1$\u2019s and $0$\u2019s for u\u2019s and m\u2019s, respectively, you produce 7-bit binary ASCII codes that spell out secret messages.\nFor example, the letter \u2018a\u2019 has an ASCII code of $97$, which translates to a binary value of $1100001$ and an umm code of \u201cuummmmu\u201d. An umm code can be split up in the speech. For example, an encoding of \u2018a\u2019 could be stretched across three utterances: \u201cuum\u201d, \u201cmmm\u201d, \u201cu\u201d (possibly with other non-umm code words occurring between them).\nNow that you have discovered Norbit\u2019s secret, you go back through transcripts of his previous speeches to decode his cleverly concealed messages.\n-----Input-----\nThere is one line of input of length $S$ ($20 \\le S \\le 500000$), which ends with a single newline. Before the newline, the input may contain any characters in the ASCII range $32$ \u2013 $126$ (that is, space (\u2018 \u2019) through tilde (\u2018~\u2019)).\nLet\u2019s define a \u201cword\u201d as a space-delimited sequence of characters. If a word does not contain any letters or digits except lowercase u\u2019s and/or m\u2019s, then it is part of the umm-coded message. If a word contains digits or letters other than lowercase u and m, then it is not part of the umm-coded message (even if it does contain u or m). Note that a word that is part of the umm-coded message may contain punctuation (which is defined as anything other than letters, digits, or space). Naturally, you should only consider the u and m characters (and not punctuation) when decoding the umm-coded message. Let $M$ be the length of the entire umm-coded message (counting only its u and m characters). It is guaranteed that $M \\ge 7$ and $M$ is evenly divisible by $7$.\n-----Output-----\nPrint the de-umm-coded message. Note that for this problem, the judging is case-sensitive. It is guaranteed that each character that should be output is in the same ASCII range as the input.\n-----Examples-----\nSample Input:\nuu Friends m Romans ummuuummmuuuuumm countrymen mmuummmuu\nSample Output:\nicpc\n\ndef",
        "answer": "def decode(s):\n    # your code here\n    return s",
        "difficulty": "interview"
    },
    {
        "task_id": 2999,
        "prompt": "Complete the Python function given the prompt below:Today the Intergalactic Council of Pebble Coins (ICPC) conducted an intergalactic auction of the Neutronium Chaos Pebble Coin (NCPC). This coin, which was forged in the Ancient Coin Machine (ACM), is rumored to be the key to ruling the universe. \nDue to the extremely competitive nature of the auction, as well as the odd mechanics of the intergalactic currency used (far too advanced for mere mortals to understand), the auction was conducted with the following rules:\n - only one participant was allowed to make a bid at a time,\n - each participant was only allowed to make one bid, and\n - a participant making a bid had to bid at least twice the amount of the highest bid at the time.\nThe first participant making a bid was allowed to make a bid of any positive amount.\nAfter the auction there were a lot of sore losers \u2013 understandably, having just lost their chance at world domination. To make the losers feel a little better and prevent possible rioting, the ICPC has decided to hold a lottery for the participants. The winners of the lottery are determined as follows. The ICPC picks a random number $s$. A group of participants is called winning if the sum of their bets from the auction is equal to $s$. A participant wins the lottery and receives a prize \u2013 a shiny Pebble Coin \u2013 if they belong to any winning group of participants.\nGiven the names of the participants, the bets that they made, and the random number $s$ chosen by the ICPC, help them determine which participants won the lottery.\n-----Input-----\nThe first line of input contains two integers $n$ and $s$, where $1 \\le n \\le 1000$ is the number of participants, and $1 \\le s < 10^{1000}$ is the random number chosen by the ICPC.\nThen follow $n$ lines describing the participants. Each line contains a string $t$ and an integer $b$, where $t$ is the name of a participant, and $1 \\le b < 10^{1000}$ is the amount of his bet. The name of each participant is unique and consists of between $1$ and $20$ letters from the English alphabet.\n-----Output-----\nOutput an integer $k$ denoting the number of participants that won the lottery. Then output $k$ lines containing the names of the participants that won the lottery, one per line, in any order.\n-----Examples-----\nSample Input:\n5 63\nVader 3\nVoldemort 7\nBorgQueen 20\nTerminator 40\nMegatron 101\nSample Output:\n3\nBorgQueen\nTerminator\nVader\n\ndef",
        "answer": "def intergalactic_auction(n, s):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    }
]