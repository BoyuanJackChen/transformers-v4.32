[
    {
        "task_id": 3900,
        "prompt": "Complete the Python function given the prompt below:Recently a serious bug has been found in the FOS code. The head of the F company wants to find the culprit and punish him. For that, he set up an organizational meeting, the issue is: who's bugged the code? Each of the n coders on the meeting said: 'I know for sure that either x or y did it!'\nThe head of the company decided to choose two suspects and invite them to his office. Naturally, he should consider the coders' opinions. That's why the head wants to make such a choice that at least p of n coders agreed with it. A coder agrees with the choice of two suspects if at least one of the two people that he named at the meeting was chosen as a suspect. In how many ways can the head of F choose two suspects?\nNote that even if some coder was chosen as a suspect, he can agree with the head's choice if he named the other chosen coder at the meeting.\n-----Input-----\nThe first line contains integers n and p (3 \u2264 n \u2264 3\u00b710^5;\u00a00 \u2264 p \u2264 n) \u2014 the number of coders in the F company and the minimum number of agreed people.\nEach of the next n lines contains two integers x_{i}, y_{i} (1 \u2264 x_{i}, y_{i} \u2264 n) \u2014 the numbers of coders named by the i-th coder. It is guaranteed that x_{i} \u2260 i, \u00a0y_{i} \u2260 i, \u00a0x_{i} \u2260 y_{i}.\n-----Output-----\nPrint a single integer \u2013\u2013 the number of possible two-suspect sets. Note that the order of the suspects doesn't matter, that is, sets (1, 2) \u0438 (2, 1) are considered identical.\n-----Examples-----\nInput\n4 2\n2 3\n1 4\n1 4\n2 1\nOutput\n6\nInput\n8 6\n5 6\n5 7\n5 8\n6 2\n2 1\n7 3\n1 3\n1 4\nOutput\n1\n\ndef",
        "answer": "def f(n, p):\n    return (n - p) * (n - p - 1) // 2",
        "difficulty": "competition"
    },
    {
        "task_id": 3901,
        "prompt": "Complete the Python function given the prompt below:You have an array a with length n, you can perform operations. Each operation is like this: choose two adjacent elements from a, say x and y, and replace one of them with gcd(x, y), where gcd denotes the greatest common divisor.\nWhat is the minimum number of operations you need to make all of the elements equal to 1?\n-----Input-----\nThe first line of the input contains one integer n (1 \u2264 n \u2264 2000) \u2014 the number of elements in the array.\nThe second line contains n space separated integers a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 10^9)\u00a0\u2014 the elements of the array.\n-----Output-----\nPrint -1, if it is impossible to turn all numbers to 1. Otherwise, print the minimum number of operations needed to make all numbers equal to 1.\n-----Examples-----\nInput\n5\n2 2 3 4 6\nOutput\n5\nInput\n4\n2 4 6 8\nOutput\n-1\nInput\n3\n2 6 9\nOutput\n4\n-----Note-----\nIn the first sample you can turn all numbers to 1 using the following 5 moves:\n  [2, 2, 3, 4, 6].  [2, 1, 3, 4, 6]  [2, 1, 3, 1, 6]  [2, 1, 1, 1, 6]  [1, 1, 1, 1, 6]  [1, 1, 1, 1, 1] \nWe can prove that in this case it is not possible to make all numbers one using less than 5 moves.\n\ndef",
        "answer": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a",
        "difficulty": "competition"
    },
    {
        "task_id": 3902,
        "prompt": "Complete the Python function given the prompt below:First-rate specialists graduate from Berland State Institute of Peace and Friendship. You are one of the most talented students in this university. The education is not easy because you need to have fundamental knowledge in different areas, which sometimes are not related to each other. \nFor example, you should know linguistics very well. You learn a structure of Reberland language as foreign language. In this language words are constructed according to the following rules. First you need to choose the \"root\" of the word \u2014 some string which has more than 4 letters. Then several strings with the length 2 or 3 symbols are appended to this word. The only restriction \u2014  it is not allowed to append the same string twice in a row. All these strings are considered to be suffixes of the word (this time we use word \"suffix\" to describe a morpheme but not the few last characters of the string as you may used to). \nHere is one exercise that you have found in your task list. You are given the word s. Find all distinct strings with the length 2 or 3, which can be suffixes of this word according to the word constructing rules in Reberland language. \nTwo strings are considered distinct if they have different length or there is a position in which corresponding characters do not match. \nLet's look at the example: the word abacabaca is given. This word can be obtained in the following ways: [Image], where the root of the word is overlined, and suffixes are marked by \"corners\". Thus, the set of possible suffixes for this word is {aca, ba, ca}. \n-----Input-----\nThe only line contains a string s (5 \u2264 |s| \u2264 10^4) consisting of lowercase English letters.\n-----Output-----\nOn the first line print integer k \u2014 a number of distinct possible suffixes. On the next k lines print suffixes. \nPrint suffixes in lexicographical (alphabetical) order. \n-----Examples-----\nInput\nabacabaca\nOutput\n3\naca\nba\nca\nInput\nabaca\nOutput\n0\n-----Note-----\nThe first test was analysed in the problem statement. \nIn the second example the length of the string equals 5. The length of the root equals 5, so no string can be used as a suffix.\n\ndef",
        "answer": "def solve(s):\n    return 0",
        "difficulty": "competition"
    },
    {
        "task_id": 3903,
        "prompt": "Complete the Python function given the prompt below:The famous global economic crisis is approaching rapidly, so the states of Berman, Berance and Bertaly formed an alliance and allowed the residents of all member states to freely pass through the territory of any of them. In addition, it was decided that a road between the states should be built to guarantee so that one could any point of any country can be reached from any point of any other State.\nSince roads are always expensive, the governments of the states of the newly formed alliance asked you to help them assess the costs. To do this, you have been issued a map that can be represented as a rectangle table consisting of n rows and m columns. Any cell of the map either belongs to one of three states, or is an area where it is allowed to build a road, or is an area where the construction of the road is not allowed. A cell is called passable, if it belongs to one of the states, or the road was built in this cell. From any passable cells you can move up, down, right and left, if the cell that corresponds to the movement exists and is passable.\nYour task is to construct a road inside a minimum number of cells, so that it would be possible to get from any cell of any state to any cell of any other state using only passable cells.\nIt is guaranteed that initially it is possible to reach any cell of any state from any cell of this state, moving only along its cells. It is also guaranteed that for any state there is at least one cell that belongs to it.\n-----Input-----\nThe first line of the input contains the dimensions of the map n and m (1 \u2264 n, m \u2264 1000)\u00a0\u2014 the number of rows and columns respectively.\nEach of the next n lines contain m characters, describing the rows of the map. Digits from 1 to 3 represent the accessory to the corresponding state. The character '.' corresponds to the cell where it is allowed to build a road and the character '#' means no construction is allowed in this cell.\n-----Output-----\nPrint a single integer\u00a0\u2014 the minimum number of cells you need to build a road inside in order to connect all the cells of all states. If such a goal is unachievable, print -1.\n-----Examples-----\nInput\n4 5\n11..2\n#..22\n#.323\n.#333\nOutput\n2\nInput\n1 5\n1#2#3\nOutput\n-1\n\ndef",
        "answer": "def solution(n, m, map):\n    # Write your code here\n    pass",
        "difficulty": "competition"
    },
    {
        "task_id": 3904,
        "prompt": "Complete the Python function given the prompt below:A bracketed sequence is called correct (regular) if by inserting \"+\" and \"1\" you can get a well-formed mathematical expression from it. For example, sequences \"(())()\", \"()\" and \"(()(()))\" are correct, while \")(\", \"(()\" and \"(()))(\" are not.\nThe teacher gave Dmitry's class a very strange task\u00a0\u2014 she asked every student to come up with a sequence of arbitrary length, consisting only of opening and closing brackets. After that all the students took turns naming the sequences they had invented. When Dima's turn came, he suddenly realized that all his classmates got the correct bracketed sequence, and whether he got the correct bracketed sequence, he did not know.\nDima suspects now that he simply missed the word \"correct\" in the task statement, so now he wants to save the situation by modifying his sequence slightly. More precisely, he can the arbitrary number of times (possibly zero) perform the reorder operation.\nThe reorder operation consists of choosing an arbitrary consecutive subsegment (substring) of the sequence and then reordering all the characters in it in an arbitrary way. Such operation takes $l$ nanoseconds, where $l$ is the length of the subsegment being reordered. It's easy to see that reorder operation doesn't change the number of opening and closing brackets. For example for \"))((\" he can choose the substring \")(\" and do reorder \")()(\" (this operation will take $2$ nanoseconds).\nSince Dima will soon have to answer, he wants to make his sequence correct as fast as possible. Help him to do this, or determine that it's impossible.\n-----Input-----\nThe first line contains a single integer $n$ ($1 \\le n \\le 10^6$)\u00a0\u2014 the length of Dima's sequence.\nThe second line contains string of length $n$, consisting of characters \"(\" and \")\" only.\n-----Output-----\nPrint a single integer\u00a0\u2014 the minimum number of nanoseconds to make the sequence correct or \"-1\" if it is impossible to do so.\n-----Examples-----\nInput\n8\n))((())(\nOutput\n6\nInput\n3\n(()\nOutput\n-1\n-----Note-----\nIn the first example we can firstly reorder the segment from first to the fourth character, replacing it with \"()()\", the whole sequence will be \"()()())(\". And then reorder the segment from the seventh to eighth character, replacing it with \"()\". In the end the sequence will be \"()()()()\", while the total time spent is $4 + 2 = 6$ nanoseconds.\n\ndef",
        "answer": "def reorder(s):\n    # your code here\n    return",
        "difficulty": "competition"
    },
    {
        "task_id": 3905,
        "prompt": "Complete the Python function given the prompt below:BigData Inc. is a corporation that has n data centers indexed from 1 to n that are located all over the world. These data centers provide storage for client data (you can figure out that client data is really big!).\nMain feature of services offered by BigData Inc. is the access availability guarantee even under the circumstances of any data center having an outage. Such a guarantee is ensured by using the two-way replication. Two-way replication is such an approach for data storage that any piece of data is represented by two identical copies that are stored in two different data centers.\nFor each of m company clients, let us denote indices of two different data centers storing this client data as c_{i}, 1 and c_{i}, 2.\nIn order to keep data centers operational and safe, the software running on data center computers is being updated regularly. Release cycle of BigData Inc. is one day meaning that the new version of software is being deployed to the data center computers each day.\nData center software update is a non-trivial long process, that is why there is a special hour-long time frame that is dedicated for data center maintenance. During the maintenance period, data center computers are installing software updates, and thus they may be unavailable. Consider the day to be exactly h hours long. For each data center there is an integer u_{j} (0 \u2264 u_{j} \u2264 h - 1) defining the index of an hour of day, such that during this hour data center j is unavailable due to maintenance.\nSumming up everything above, the condition u_{c}_{i}, 1 \u2260 u_{c}_{i}, 2 should hold for each client, or otherwise his data may be unaccessible while data centers that store it are under maintenance.\nDue to occasional timezone change in different cities all over the world, the maintenance time in some of the data centers may change by one hour sometimes. Company should be prepared for such situation, that is why they decided to conduct an experiment, choosing some non-empty subset of data centers, and shifting the maintenance time for them by an hour later (i.e. if u_{j} = h - 1, then the new maintenance hour would become 0, otherwise it would become u_{j} + 1). Nonetheless, such an experiment should not break the accessibility guarantees, meaning that data of any client should be still available during any hour of a day after the data center maintenance times are changed.\nSuch an experiment would provide useful insights, but changing update time is quite an expensive procedure, that is why the company asked you to find out the minimum number of data centers that have to be included in an experiment in order to keep the data accessibility guarantees.\n-----Input-----\nThe first line of input contains three integers n, m and h (2 \u2264 n \u2264 100 000, 1 \u2264 m \u2264 100 000, 2 \u2264 h \u2264 100 000), the number of company data centers, number of clients and the day length of day measured in hours. \nThe second line of input contains n integers u_1, u_2,..., u_{n} (0 \u2264 u_{j} < h), j-th of these numbers is an index of a maintenance hour for data center j. \nEach of the next m lines contains two integers c_{i}, 1 and c_{i}, 2 (1 \u2264 c_{i}, 1, c_{i}, 2 \u2264 n, c_{i}, 1 \u2260 c_{i}, 2), defining the data center indices containing the data of client i.\nIt is guaranteed that the given maintenance schedule allows each client to access at least one copy of his data at any moment of day.\n-----Output-----\nIn the first line print the minimum possible number of data centers k (1 \u2264 k \u2264 n) that have to be included in an experiment in order to keep the data available for any client.\nIn the second line print k distinct integers x_1, x_2,..., x_{k} (1 \u2264 x_{i} \u2264 n), the indices of data centers whose maintenance time will be shifted by one hour later. Data center indices may be printed in any order.\nIf there are several possible answers, it is allowed to print any of them. It is guaranteed that at there is at least one valid choice of data centers.\n-----Examples-----\nInput\n3 3 5\n4 4 0\n1 3\n3 2\n3 1\nOutput\n1\n3 \nInput\n4 5 4\n2 1 0 3\n4 3\n3 2\n1 2\n1 4\n1 3\nOutput\n4\n1 2 3 4 \n-----Note-----\nConsider the first sample test. The given answer is the only way to conduct an experiment involving the only data center. In such a scenario the third data center has a maintenance during the hour 1, and no two data centers storing the information of the same client have maintenance at the same hour.\nOn the other hand, for example, if we shift the maintenance time on hour later for the first data center, then the data of clients 1 and 3 will be unavailable during the hour 0.\n\ndef",
        "answer": "def main():\n    n, m, h = map(int, input().split())\n    u = list(map(int, input().split()))\n    c = [list(map(int, input().split())) for _ in range(m)]\n    k = 0\n    for i in range(m):\n        if u[c[i][0]-1] == h - 1:\n            k += 1\n    print(k)\n    for i in range(k):\n        print(c[i][0], c[i][1])",
        "difficulty": "competition"
    },
    {
        "task_id": 3906,
        "prompt": "Complete the Python function given the prompt below:Recently Ivan the Fool decided to become smarter and study the probability theory. He thinks that he understands the subject fairly well, and so he began to behave like he already got PhD in that area.\nTo prove his skills, Ivan decided to demonstrate his friends a concept of random picture. A picture is a field of $n$ rows and $m$ columns, where each cell is either black or white. Ivan calls the picture random if for every cell it has at most one adjacent cell of the same color. Two cells are considered adjacent if they share a side.\nIvan's brothers spent some time trying to explain that it's not how the randomness usually works. Trying to convince Ivan, they want to count the number of different random (according to Ivan) pictures. Two pictures are considered different if at least one cell on those two picture is colored differently. Since the number of such pictures may be quite large, print it modulo $10^9 + 7$.\n-----Input-----\nThe only line contains two integers $n$ and $m$ ($1 \\le n, m \\le 100\\,000$), the number of rows and the number of columns of the field.\n-----Output-----\nPrint one integer, the number of random pictures modulo $10^9 + 7$.\n-----Example-----\nInput\n2 3\nOutput\n8\n-----Note-----\nThe picture below shows all possible random pictures of size $2$ by $3$.  [Image]\n\ndef",
        "answer": "def random_picture(n, m):\n    # Write your code here\n    pass",
        "difficulty": "competition"
    },
    {
        "task_id": 3907,
        "prompt": "Complete the Python function given the prompt below:Let's call an array consisting of n integer numbers a_1, a_2,..., a_{n}, beautiful if it has the following property:\n  consider all pairs of numbers x, y (x \u2260 y), such that number x occurs in the array a and number y occurs in the array a;  for each pair x, y must exist some position j (1 \u2264 j < n), such that at least one of the two conditions are met, either a_{j} = x, a_{j} + 1 = y, or a_{j} = y, a_{j} + 1 = x. \nSereja wants to build a beautiful array a, consisting of n integers. But not everything is so easy, Sereja's friend Dima has m coupons, each contains two integers q_{i}, w_{i}. Coupon i costs w_{i} and allows you to use as many numbers q_{i} as you want when constructing the array a. Values q_{i} are distinct. Sereja has no coupons, so Dima and Sereja have made the following deal. Dima builds some beautiful array a of n elements. After that he takes w_{i} rubles from Sereja for each q_{i}, which occurs in the array a. Sereja believed his friend and agreed to the contract, and now he is wondering, what is the maximum amount of money he can pay.\nHelp Sereja, find the maximum amount of money he can pay to Dima.\n-----Input-----\nThe first line contains two integers n and m (1 \u2264 n \u2264 2\u00b710^6, 1 \u2264 m \u2264 10^5). Next m lines contain pairs of integers. The i-th line contains numbers q_{i}, w_{i} (1 \u2264 q_{i}, w_{i} \u2264 10^5).\nIt is guaranteed that all q_{i} are distinct.\n-----Output-----\nIn a single line print maximum amount of money (in rubles) Sereja can pay.\nPlease, do not use the %lld specifier to read or write 64-bit integers in \u0421++. It is preferred to use the cin, cout streams or the %I64d specifier.\n-----Examples-----\nInput\n5 2\n1 2\n2 3\nOutput\n5\nInput\n100 3\n1 2\n2 1\n3 1\nOutput\n4\nInput\n1 2\n1 1\n2 100\nOutput\n100\n-----Note-----\nIn the first sample Sereja can pay 5 rubles, for example, if Dima constructs the following array: [1, 2, 1, 2, 2]. There are another optimal arrays for this test.\nIn the third sample Sereja can pay 100 rubles, if Dima constructs the following array: [2].\n\ndef",
        "answer": "def solution(n, m):\n    return 0",
        "difficulty": "competition"
    },
    {
        "task_id": 3908,
        "prompt": "Complete the Python function given the prompt below:Bessie the cow has just intercepted a text that Farmer John sent to Burger Queen! However, Bessie is sure that there is a secret message hidden inside.\nThe text is a string $s$ of lowercase Latin letters. She considers a string $t$ as hidden in string $s$ if $t$ exists as a subsequence of $s$ whose indices form an arithmetic progression. For example, the string aab is hidden in string aaabb because it occurs at indices $1$, $3$, and $5$, which form an arithmetic progression with a common difference of $2$. Bessie thinks that any hidden string that occurs the most times is the secret message. Two occurrences of a subsequence of $S$ are distinct if the sets of indices are different. Help her find the number of occurrences of the secret message!\nFor example, in the string aaabb, a is hidden $3$ times, b is hidden $2$ times, ab is hidden $6$ times, aa is hidden $3$ times, bb is hidden $1$ time, aab is hidden $2$ times, aaa is hidden $1$ time, abb is hidden $1$ time, aaab is hidden $1$ time, aabb is hidden $1$ time, and aaabb is hidden $1$ time. The number of occurrences of the secret message is $6$.\n-----Input-----\nThe first line contains a string $s$ of lowercase Latin letters ($1 \\le |s| \\le 10^5$) \u2014 the text that Bessie intercepted.\n-----Output-----\nOutput a single integer \u00a0\u2014 the number of occurrences of the secret message.\n-----Examples-----\nInput\naaabb\nOutput\n6\nInput\nusaco\nOutput\n1\nInput\nlol\nOutput\n2\n-----Note-----\nIn the first example, these are all the hidden strings and their indice sets:   a occurs at $(1)$, $(2)$, $(3)$  b occurs at $(4)$, $(5)$  ab occurs at $(1,4)$, $(1,5)$, $(2,4)$, $(2,5)$, $(3,4)$, $(3,5)$  aa occurs at $(1,2)$, $(1,3)$, $(2,3)$  bb occurs at $(4,5)$  aab occurs at $(1,3,5)$, $(2,3,4)$  aaa occurs at $(1,2,3)$  abb occurs at $(3,4,5)$  aaab occurs at $(1,2,3,4)$  aabb occurs at $(2,3,4,5)$  aaabb occurs at $(1,2,3,4,5)$  Note that all the sets of indices are arithmetic progressions.\nIn the second example, no hidden string occurs more than once.\nIn the third example, the hidden string is the letter l.\n\ndef",
        "answer": "def solution(s):\n    # your code here\n    return s.count('a')\n",
        "difficulty": "competition"
    },
    {
        "task_id": 3909,
        "prompt": "Complete the Python function given the prompt below:Gerald has been selling state secrets at leisure. All the secrets cost the same: n marks. The state which secrets Gerald is selling, has no paper money, only coins. But there are coins of all positive integer denominations that are powers of three: 1 mark, 3 marks, 9 marks, 27 marks and so on. There are no coins of other denominations. Of course, Gerald likes it when he gets money without the change. And all buyers respect him and try to give the desired sum without change, if possible. But this does not always happen.\nOne day an unlucky buyer came. He did not have the desired sum without change. Then he took out all his coins and tried to give Gerald a larger than necessary sum with as few coins as possible. What is the maximum number of coins he could get?\nThe formal explanation of the previous paragraph: we consider all the possible combinations of coins for which the buyer can not give Gerald the sum of n marks without change. For each such combination calculate the minimum number of coins that can bring the buyer at least n marks. Among all combinations choose the maximum of the minimum number of coins. This is the number we want.\n-----Input-----\nThe single line contains a single integer n (1 \u2264 n \u2264 10^17).\nPlease, do not use the %lld specifier to read or write 64 bit integers in \u0421++. It is preferred to use the cin, cout streams or the %I64d specifier.\n-----Output-----\nIn a single line print an integer: the maximum number of coins the unlucky buyer could have paid with.\n-----Examples-----\nInput\n1\nOutput\n1\nInput\n4\nOutput\n2\n-----Note-----\nIn the first test case, if a buyer has exactly one coin of at least 3 marks, then, to give Gerald one mark, he will have to give this coin. In this sample, the customer can not have a coin of one mark, as in this case, he will be able to give the money to Gerald without any change.\nIn the second test case, if the buyer had exactly three coins of 3 marks, then, to give Gerald 4 marks, he will have to give two of these coins. The buyer cannot give three coins as he wants to minimize the number of coins that he gives.\n\ndef",
        "answer": "def solution(n):\n    # your code here\n    return",
        "difficulty": "competition"
    },
    {
        "task_id": 3910,
        "prompt": "Complete the Python function given the prompt below:Note that girls in Arpa\u2019s land are really attractive.\nArpa loves overnight parties. In the middle of one of these parties Mehrdad suddenly appeared. He saw n pairs of friends sitting around a table. i-th pair consisted of a boy, sitting on the a_{i}-th chair, and his girlfriend, sitting on the b_{i}-th chair. The chairs were numbered 1 through 2n in clockwise direction. There was exactly one person sitting on each chair.\n [Image] \nThere were two types of food: Kooft and Zahre-mar. Now Mehrdad wonders, was there any way to serve food for the guests such that:   Each person had exactly one type of food,  No boy had the same type of food as his girlfriend,  Among any three guests sitting on consecutive chairs, there was two of them who had different type of food. Note that chairs 2n and 1 are considered consecutive. \nFind the answer for the Mehrdad question. If it was possible, find some arrangement of food types that satisfies the conditions.\n-----Input-----\nThe first line contains an integer n (1  \u2264  n  \u2264  10^5)\u00a0\u2014 the number of pairs of guests.\nThe i-th of the next n lines contains a pair of integers a_{i} and b_{i} (1  \u2264 a_{i}, b_{i} \u2264  2n)\u00a0\u2014 the number of chair on which the boy in the i-th pair was sitting and the number of chair on which his girlfriend was sitting. It's guaranteed that there was exactly one person sitting on each chair. \n-----Output-----\nIf there is no solution, print -1.\nOtherwise print n lines, the i-th of them should contain two integers which represent the type of food for the i-th pair. The first integer in the line is the type of food the boy had, and the second integer is the type of food the girl had. If someone had Kooft, print 1, otherwise print 2.\nIf there are multiple solutions, print any of them.\n-----Example-----\nInput\n3\n1 4\n2 5\n3 6\nOutput\n1 2\n2 1\n1 2\n\ndef",
        "answer": "def mehrdad(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36:\n        return 36\n    if n == 37:\n        return 37\n    if n == 38:\n        return 38\n    if n == 39:\n        return 39\n    if n == 40:\n        return 40\n    if n == 41:\n        return 41\n    if n == 42:\n        return 42\n    if n == 43:\n        return 43\n    if n == 44:\n        return 44\n    if n == 45:\n        ",
        "difficulty": "competition"
    },
    {
        "task_id": 3911,
        "prompt": "Complete the Python function given the prompt below:Your friend recently gave you some slimes for your birthday. You have n slimes all initially with value 1.\nYou are going to play a game with these slimes. Initially, you put a single slime by itself in a row. Then, you will add the other n - 1 slimes one by one. When you add a slime, you place it at the right of all already placed slimes. Then, while the last two slimes in the row have the same value v, you combine them together to create a slime with value v + 1.\nYou would like to see what the final state of the row is after you've added all n slimes. Please print the values of the slimes in the row from left to right.\n-----Input-----\nThe first line of the input will contain a single integer, n (1 \u2264 n \u2264 100 000).\n-----Output-----\nOutput a single line with k integers, where k is the number of slimes in the row after you've finished the procedure described in the problem statement. The i-th of these numbers should be the value of the i-th slime from the left.\n-----Examples-----\nInput\n1\nOutput\n1\nInput\n2\nOutput\n2\nInput\n3\nOutput\n2 1\nInput\n8\nOutput\n4\n-----Note-----\nIn the first sample, we only have a single slime with value 1. The final state of the board is just a single slime with value 1.\nIn the second sample, we perform the following steps:\nInitially we place a single slime in a row by itself. Thus, row is initially 1.\nThen, we will add another slime. The row is now 1 1. Since two rightmost slimes have the same values, we should replace these slimes with one with value 2. Thus, the final state of the board is 2.\nIn the third sample, after adding the first two slimes, our row is 2. After adding one more slime, the row becomes 2 1.\nIn the last sample, the steps look as follows:   1  2  2 1  3  3 1  3 2  3 2 1  4\n\ndef",
        "answer": "def birthday(n):\n    if n == 1:\n        return 1\n    else:\n        return 1 + birthday(n - 1)",
        "difficulty": "competition"
    },
    {
        "task_id": 3912,
        "prompt": "Complete the Python function given the prompt below:Kolya has a string s of length n consisting of lowercase and uppercase Latin letters and digits.\nHe wants to rearrange the symbols in s and cut it into the minimum number of parts so that each part is a palindrome and all parts have the same lengths. A palindrome is a string which reads the same backward as forward, such as madam or racecar.\nYour task is to help Kolya and determine the minimum number of palindromes of equal lengths to cut s into, if it is allowed to rearrange letters in s before cuttings.\n-----Input-----\nThe first line contains an integer n (1 \u2264 n \u2264 4\u00b710^5) \u2014 the length of string s.\nThe second line contains a string s of length n consisting of lowercase and uppercase Latin letters and digits.\n-----Output-----\nPrint to the first line an integer k \u2014 minimum number of palindromes into which you can cut a given string.\nPrint to the second line k strings \u2014 the palindromes themselves. Separate them by a space. You are allowed to print palindromes in arbitrary order. All of them should have the same length.\n-----Examples-----\nInput\n6\naabaac\nOutput\n2\naba aca \nInput\n8\n0rTrT022\nOutput\n1\n02TrrT20 \nInput\n2\naA\nOutput\n2\na A\n\ndef",
        "answer": "def palindromes(s):\n    n = len(s)\n    if n == 1:\n        return 1\n    if n == 2:\n        if s[0] == s[1]:\n            return 2\n        else:\n            return 1\n    if n == 3:\n        if s[0] == s[1] and s[1] == s[2]:\n            return 3\n        else:\n            return 2\n    if n == 4:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3]:\n            return 4\n        else:\n            return 3\n    if n == 5:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4]:\n            return 5\n        else:\n            return 4\n    if n == 6:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5]:\n            return 6\n        else:\n            return 5\n    if n == 7:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6]:\n            return 7\n        else:\n            return 6\n    if n == 8:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6] and s[6] == s[7]:\n            return 8\n        else:\n            return 7\n    if n == 9:\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[",
        "difficulty": "competition"
    },
    {
        "task_id": 3913,
        "prompt": "Complete the Python function given the prompt below:Polycarpus takes part in the \"Field of Wonders\" TV show. The participants of the show have to guess a hidden word as fast as possible. Initially all the letters of the word are hidden.\nThe game consists of several turns. At each turn the participant tells a letter and the TV show host responds if there is such letter in the word or not. If there is such letter then the host reveals all such letters. For example, if the hidden word is \"abacaba\" and the player tells the letter \"a\", the host will reveal letters at all positions, occupied by \"a\": 1, 3, 5 and 7 (positions are numbered from left to right starting from 1).\nPolycarpus knows m words of exactly the same length as the hidden word. The hidden word is also known to him and appears as one of these m words.\nAt current moment a number of turns have already been made and some letters (possibly zero) of the hidden word are already revealed. Previously Polycarp has told exactly the letters which are currently revealed.\nIt is Polycarpus' turn. He wants to tell a letter in such a way, that the TV show host will assuredly reveal at least one more letter. Polycarpus cannot tell the letters, which are already revealed.\nYour task is to help Polycarpus and find out the number of letters he can tell so that the show host will assuredly reveal at least one of the remaining letters.\n-----Input-----\nThe first line contains one integer n (1 \u2264 n \u2264 50) \u2014 the length of the hidden word.\nThe following line describes already revealed letters. It contains the string of length n, which consists of lowercase Latin letters and symbols \"*\". If there is a letter at some position, then this letter was already revealed. If the position contains symbol \"*\", then the letter at this position has not been revealed yet. It is guaranteed, that at least one letter is still closed.\nThe third line contains an integer m (1 \u2264 m \u2264 1000) \u2014 the number of words of length n, which Polycarpus knows. The following m lines contain the words themselves \u2014 n-letter strings of lowercase Latin letters. All words are distinct.\nIt is guaranteed that the hidden word appears as one of the given m words. Before the current move Polycarp has told exactly the letters which are currently revealed.\n-----Output-----\nOutput the single integer \u2014 the number of letters Polycarpus can tell so that the TV show host definitely reveals at least one more letter. It is possible that this number is zero.\n-----Examples-----\nInput\n4\na**d\n2\nabcd\nacbd\nOutput\n2\nInput\n5\nlo*er\n2\nlover\nloser\nOutput\n0\nInput\n3\na*a\n2\naaa\naba\nOutput\n1\n-----Note-----\nIn the first example Polycarpus can tell letters \"b\" and \"c\", which assuredly will be revealed.\nThe second example contains no letters which can be told as it is not clear, which of the letters \"v\" or \"s\" is located at the third position of the hidden word.\nIn the third example Polycarpus exactly knows that the hidden word is \"aba\", because in case it was \"aaa\", then the second letter \"a\" would have already been revealed in one of previous turns.\n\ndef",
        "answer": "def solution(n, m, words):\n    # your code here\n    return 0",
        "difficulty": "competition"
    },
    {
        "task_id": 3914,
        "prompt": "Complete the Python function given the prompt below:Instructors of Some Informatics School make students go to bed.\nThe house contains n rooms, in each room exactly b students were supposed to sleep. However, at the time of curfew it happened that many students are not located in their assigned rooms. The rooms are arranged in a row and numbered from 1 to n. Initially, in i-th room there are a_{i} students. All students are currently somewhere in the house, therefore a_1 + a_2 +... + a_{n} = nb. Also 2 instructors live in this house.\nThe process of curfew enforcement is the following. One instructor starts near room 1 and moves toward room n, while the second instructor starts near room n and moves toward room 1. After processing current room, each instructor moves on to the next one. Both instructors enter rooms and move simultaneously, if n is odd, then only the first instructor processes the middle room. When all rooms are processed, the process ends.\nWhen an instructor processes a room, she counts the number of students in the room, then turns off the light, and locks the room. Also, if the number of students inside the processed room is not equal to b, the instructor writes down the number of this room into her notebook (and turns off the light, and locks the room). Instructors are in a hurry (to prepare the study plan for the next day), so they don't care about who is in the room, but only about the number of students.\nWhile instructors are inside the rooms, students can run between rooms that are not locked and not being processed. A student can run by at most d rooms, that is she can move to a room with number that differs my at most d. Also, after (or instead of) running each student can hide under a bed in a room she is in. In this case the instructor will not count her during the processing. In each room any number of students can hide simultaneously.\nFormally, here is what's happening:  A curfew is announced, at this point in room i there are a_{i} students.  Each student can run to another room but not further than d rooms away from her initial room, or stay in place. After that each student can optionally hide under a bed.  Instructors enter room 1 and room n, they count students there and lock the room (after it no one can enter or leave this room).  Each student from rooms with numbers from 2 to n - 1 can run to another room but not further than d rooms away from her current room, or stay in place. Each student can optionally hide under a bed.  Instructors move from room 1 to room 2 and from room n to room n - 1.  This process continues until all rooms are processed. \nLet x_1 denote the number of rooms in which the first instructor counted the number of non-hidden students different from b, and x_2 be the same number for the second instructor. Students know that the principal will only listen to one complaint, therefore they want to minimize the maximum of numbers x_{i}. Help them find this value if they use the optimal strategy.\n-----Input-----\nThe first line contains three integers n, d and b (2 \u2264 n \u2264 100 000, 1 \u2264 d \u2264 n - 1, 1 \u2264 b \u2264 10 000), number of rooms in the house, running distance of a student, official number of students in a room.\nThe second line contains n integers a_1, a_2,..., a_{n} (0 \u2264 a_{i} \u2264 10^9), i-th of which stands for the number of students in the i-th room before curfew announcement.\nIt is guaranteed that a_1 + a_2 +... + a_{n} = nb.\n-----Output-----\nOutput one integer, the minimal possible value of the maximum of x_{i}.\n-----Examples-----\nInput\n5 1 1\n1 0 0 0 4\nOutput\n1\nInput\n6 1 2\n3 8 0 1 0 0\nOutput\n2\n-----Note-----\nIn the first sample the first three rooms are processed by the first instructor, and the last two are processed by the second instructor. One of the optimal strategies is the following: firstly three students run from room 5 to room 4, on the next stage two of them run to room 3, and one of those two hides under a bed. This way, the first instructor writes down room 2, and the second writes down nothing.\nIn the second sample one of the optimal strategies is the following: firstly all students in room 1 hide, all students from room 2 run to room 3. On the next stage one student runs from room 3 to room 4, and 5 students hide. This way, the first instructor writes down rooms 1 and 2, the second instructor writes down rooms 5 and 6.\n\ndef",
        "answer": "def solution(n, d, b):\n    return 0",
        "difficulty": "competition"
    },
    {
        "task_id": 3915,
        "prompt": "Complete the Python function given the prompt below:Rikhail Mubinchik believes that the current definition of prime numbers is obsolete as they are too complex and unpredictable. A palindromic number is another matter. It is aesthetically pleasing, and it has a number of remarkable properties. Help Rikhail to convince the scientific community in this!\nLet us remind you that a number is called prime if it is integer larger than one, and is not divisible by any positive integer other than itself and one.\nRikhail calls a number a palindromic if it is integer, positive, and its decimal representation without leading zeros is a palindrome, i.e. reads the same from left to right and right to left.\nOne problem with prime numbers is that there are too many of them. Let's introduce the following notation: \u03c0(n)\u00a0\u2014 the number of primes no larger than n, rub(n)\u00a0\u2014 the number of palindromic numbers no larger than n. Rikhail wants to prove that there are a lot more primes than palindromic ones.\nHe asked you to solve the following problem: for a given value of the coefficient A find the maximum n, such that \u03c0(n) \u2264 A\u00b7rub(n).\n-----Input-----\nThe input consists of two positive integers p, q, the numerator and denominator of the fraction that is the value of A\u00a0($A = \\frac{p}{q}$,\u00a0$p, q \\leq 10^{4}, \\frac{1}{42} \\leq \\frac{p}{q} \\leq 42$).\n-----Output-----\nIf such maximum number exists, then print it. Otherwise, print \"Palindromic tree is better than splay tree\" (without the quotes).\n-----Examples-----\nInput\n1 1\nOutput\n40\nInput\n1 42\nOutput\n1\nInput\n6 4\nOutput\n172\n\ndef",
        "answer": "def rub(n):\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return n * rub(n - 1)\n    else:\n        return n * rub(n - 1) + 1",
        "difficulty": "competition"
    },
    {
        "task_id": 3916,
        "prompt": "Complete the Python function given the prompt below:\u00c6sir - CHAOS \u00c6sir - V.\n\"Everything has been planned out. No more hidden concerns. The condition of Cytus is also perfect.\nThe time right now...... 00:01:12......\nIt's time.\"\nThe emotion samples are now sufficient. After almost 3 years, it's time for Ivy to awake her bonded sister, Vanessa.\nThe system inside A.R.C.'s Library core can be considered as an undirected graph with infinite number of processing nodes, numbered with all positive integers ($1, 2, 3, \\ldots$). The node with a number $x$ ($x > 1$), is directly connected with a node with number $\\frac{x}{f(x)}$, with $f(x)$ being the lowest prime divisor of $x$.\nVanessa's mind is divided into $n$ fragments. Due to more than 500 years of coma, the fragments have been scattered: the $i$-th fragment is now located at the node with a number $k_i!$ (a factorial of $k_i$).\nTo maximize the chance of successful awakening, Ivy decides to place the samples in a node $P$, so that the total length of paths from each fragment to $P$ is smallest possible. If there are multiple fragments located at the same node, the path from that node to $P$ needs to be counted multiple times.\nIn the world of zeros and ones, such a requirement is very simple for Ivy. Not longer than a second later, she has already figured out such a node.\nBut for a mere human like you, is this still possible?\nFor simplicity, please answer the minimal sum of paths' lengths from every fragment to the emotion samples' assembly node $P$.\n-----Input-----\nThe first line contains an integer $n$ ($1 \\le n \\le 10^6$)\u00a0\u2014 number of fragments of Vanessa's mind.\nThe second line contains $n$ integers: $k_1, k_2, \\ldots, k_n$ ($0 \\le k_i \\le 5000$), denoting the nodes where fragments of Vanessa's mind are located: the $i$-th fragment is at the node with a number $k_i!$.\n-----Output-----\nPrint a single integer, denoting the minimal sum of path from every fragment to the node with the emotion samples (a.k.a. node $P$).\nAs a reminder, if there are multiple fragments at the same node, the distance from that node to $P$ needs to be counted multiple times as well.\n-----Examples-----\nInput\n3\n2 1 4\nOutput\n5\nInput\n4\n3 1 4 4\nOutput\n6\nInput\n4\n3 1 4 1\nOutput\n6\nInput\n5\n3 1 4 1 5\nOutput\n11\n-----Note-----\nConsidering the first $24$ nodes of the system, the node network will look as follows (the nodes $1!$, $2!$, $3!$, $4!$ are drawn bold):\n[Image]\nFor the first example, Ivy will place the emotion samples at the node $1$. From here:\n  The distance from Vanessa's first fragment to the node $1$ is $1$.  The distance from Vanessa's second fragment to the node $1$ is $0$.  The distance from Vanessa's third fragment to the node $1$ is $4$. \nThe total length is $5$.\nFor the second example, the assembly node will be $6$. From here:\n  The distance from Vanessa's first fragment to the node $6$ is $0$.  The distance from Vanessa's second fragment to the node $6$ is $2$.  The distance from Vanessa's third fragment to the node $6$ is $2$.  The distance from Vanessa's fourth fragment to the node $6$ is again $2$. \nThe total path length is $6$.\n\ndef",
        "answer": "def find_paths(nodes, edges):\n    # Write your code here\n    pass",
        "difficulty": "competition"
    },
    {
        "task_id": 3917,
        "prompt": "Complete the Python function given the prompt below:Iahub and Sorin are the best competitive programmers in their town. However, they can't both qualify to an important contest. The selection will be made with the help of a single problem. Blatnatalag, a friend of Iahub, managed to get hold of the problem before the contest. Because he wants to make sure Iahub will be the one qualified, he tells Iahub the following task.\nYou're given an (1-based) array a with n elements. Let's define function f(i, j) (1 \u2264 i, j \u2264 n) as (i - j)^2 + g(i, j)^2. Function g is calculated by the following pseudo-code:\nint g(int i, int j) {\n    int sum = 0;\n    for (int k = min(i, j) + 1; k <= max(i, j); k = k + 1)\n        sum = sum + a[k];\n    return sum;\n}\nFind a value min_{i} \u2260 j\u00a0\u00a0f(i, j).\nProbably by now Iahub already figured out the solution to this problem. Can you?\n-----Input-----\nThe first line of input contains a single integer n (2 \u2264 n \u2264 100000). Next line contains n integers a[1], a[2],..., a[n] ( - 10^4 \u2264 a[i] \u2264 10^4). \n-----Output-----\nOutput a single integer \u2014 the value of min_{i} \u2260 j\u00a0\u00a0f(i, j).\n-----Examples-----\nInput\n4\n1 0 0 -1\nOutput\n1\nInput\n2\n1 -1\nOutput\n2\n\ndef",
        "answer": "def f(i, j):\n    return (i - j) ** 2 + g(i, j) ** 2",
        "difficulty": "competition"
    },
    {
        "task_id": 3918,
        "prompt": "Complete the Python function given the prompt below:You are given two arrays A and B, each of size n. The error, E, between these two arrays is defined $E = \\sum_{i = 1}^{n}(a_{i} - b_{i})^{2}$. You have to perform exactly k_1 operations on array A and exactly k_2 operations on array B. In one operation, you have to choose one element of the array and increase or decrease it by 1.\nOutput the minimum possible value of error after k_1 operations on array A and k_2 operations on array B have been performed.\n-----Input-----\nThe first line contains three space-separated integers n (1 \u2264 n \u2264 10^3), k_1 and k_2 (0 \u2264 k_1 + k_2 \u2264 10^3, k_1 and k_2 are non-negative) \u2014 size of arrays and number of operations to perform on A and B respectively.\nSecond line contains n space separated integers a_1, a_2,..., a_{n} ( - 10^6 \u2264 a_{i} \u2264 10^6) \u2014 array A.\nThird line contains n space separated integers b_1, b_2,..., b_{n} ( - 10^6 \u2264 b_{i} \u2264 10^6)\u2014 array B.\n-----Output-----\nOutput a single integer \u2014 the minimum possible value of $\\sum_{i = 1}^{n}(a_{i} - b_{i})^{2}$ after doing exactly k_1 operations on array A and exactly k_2 operations on array B.\n-----Examples-----\nInput\n2 0 0\n1 2\n2 3\nOutput\n2\nInput\n2 1 0\n1 2\n2 2\nOutput\n0\nInput\n2 5 7\n3 4\n14 4\nOutput\n1\n-----Note-----\nIn the first sample case, we cannot perform any operations on A or B. Therefore the minimum possible error E = (1 - 2)^2 + (2 - 3)^2 = 2. \nIn the second sample case, we are required to perform exactly one operation on A. In order to minimize error, we increment the first element of A by 1. Now, A = [2, 2]. The error is now E = (2 - 2)^2 + (2 - 2)^2 = 0. This is the minimum possible error obtainable.\nIn the third sample case, we can increase the first element of A to 8, using the all of the 5 moves available to us. Also, the first element of B can be reduced to 8 using the 6 of the 7 available moves. Now A = [8, 4] and B = [8, 4]. The error is now E = (8 - 8)^2 + (4 - 4)^2 = 0, but we are still left with 1 move for array B. Increasing the second element of B to 5 using the left move, we get B = [8, 5] and E = (8 - 8)^2 + (4 - 5)^2 = 1.\n\ndef",
        "answer": "def minimum_error(A, B, k_1, k_2):\n    # Write your code here\n    return 0",
        "difficulty": "competition"
    },
    {
        "task_id": 3919,
        "prompt": "Complete the Python function given the prompt below:There is a string S of length N consisting of characters 0 and 1. You will perform the following operation for each i = 1, 2,..., m:\n - Arbitrarily permute the characters within the substring of S starting at the l_i-th character from the left and extending through the r_i-th character.\nHere, the sequence l_i is non-decreasing.\nHow many values are possible for S after the M operations, modulo 1000000007(= 10^9+7)?\n-----Constraints-----\n - 2\u2266N\u22663000\n - 1\u2266M\u22663000\n - S consists of characters 0 and 1.\n - The length of S equals N.\n - 1\u2266l_i < r_i\u2266N\n - l_i \u2266 l_{i+1}\n-----Input-----\nThe input is given from Standard Input in the following format:\nN M\nS\nl_1 r_1\n:\nl_M r_M\n-----Output-----\nPrint the number of the possible values for S after the M operations, modulo 1000000007.\n-----Sample Input-----\n5 2\n01001\n2 4\n3 5\n-----Sample Output-----\n6\nAfter the first operation, S can be one of the following three: 01001, 00101 and 00011.\nAfter the second operation, S can be one of the following six: 01100, 01010, 01001, 00011, 00101 and 00110.\n\ndef",
        "answer": "def permute(S, l, r):\n    if l == r:\n        print(S)\n    else:\n        for i in range(l, r):\n            S[l], S[i] = S[i], S[l]\n            permute(S, l+1, r)\n            S[l], S[i] = S[i], S[l]",
        "difficulty": "competition"
    },
    {
        "task_id": 3920,
        "prompt": "Complete the Python function given the prompt below:Gerald got a very curious hexagon for his birthday. The boy found out that all the angles of the hexagon are equal to $120^{\\circ}$. Then he measured the length of its sides, and found that each of them is equal to an integer number of centimeters. There the properties of the hexagon ended and Gerald decided to draw on it.\nHe painted a few lines, parallel to the sides of the hexagon. The lines split the hexagon into regular triangles with sides of 1 centimeter. Now Gerald wonders how many triangles he has got. But there were so many of them that Gerald lost the track of his counting. Help the boy count the triangles.\n-----Input-----\nThe first and the single line of the input contains 6 space-separated integers a_1, a_2, a_3, a_4, a_5 and a_6 (1 \u2264 a_{i} \u2264 1000) \u2014 the lengths of the sides of the hexagons in centimeters in the clockwise order. It is guaranteed that the hexagon with the indicated properties and the exactly such sides exists.\n-----Output-----\nPrint a single integer \u2014 the number of triangles with the sides of one 1 centimeter, into which the hexagon is split.\n-----Examples-----\nInput\n1 1 1 1 1 1\nOutput\n6\nInput\n1 2 1 2 1 2\nOutput\n13\n-----Note-----\nThis is what Gerald's hexagon looks like in the first sample:\n$\\theta$\nAnd that's what it looks like in the second sample:\n$A$\n\ndef",
        "answer": "def hexagon(a):\n    return (a[0] + a[1] + a[2]) / 2",
        "difficulty": "competition"
    },
    {
        "task_id": 3921,
        "prompt": "Complete the Python function given the prompt below:Squirrel Liss is interested in sequences. She also has preferences of integers. She thinks n integers a_1, a_2,..., a_{n} are good.\nNow she is interested in good sequences. A sequence x_1, x_2,..., x_{k} is called good if it satisfies the following three conditions:  The sequence is strictly increasing, i.e. x_{i} < x_{i} + 1 for each i (1 \u2264 i \u2264 k - 1).  No two adjacent elements are coprime, i.e. gcd(x_{i}, x_{i} + 1) > 1 for each i (1 \u2264 i \u2264 k - 1) (where gcd(p, q) denotes the greatest common divisor of the integers p and q).  All elements of the sequence are good integers. \nFind the length of the longest good sequence.\n-----Input-----\nThe input consists of two lines. The first line contains a single integer n (1 \u2264 n \u2264 10^5) \u2014 the number of good integers. The second line contains a single-space separated list of good integers a_1, a_2,..., a_{n} in strictly increasing order (1 \u2264 a_{i} \u2264 10^5;\u00a0a_{i} < a_{i} + 1).\n-----Output-----\nPrint a single integer \u2014 the length of the longest good sequence.\n-----Examples-----\nInput\n5\n2 3 4 6 9\nOutput\n4\nInput\n9\n1 2 3 5 6 7 8 9 10\nOutput\n4\n-----Note-----\nIn the first example, the following sequences are examples of good sequences: [2; 4; 6; 9], [2; 4; 6], [3; 9], [6]. The length of the longest good sequence is 4.\n\ndef",
        "answer": "def lis(arr):\n    n = len(arr)\n    lis = [1]*n\n    for i in range(1, n):\n        for j in range(0, i):\n            if arr[i] > arr[j] and lis[i] < lis[j] + 1:\n                lis[i] = lis[j] + 1\n    return max(lis)",
        "difficulty": "competition"
    },
    {
        "task_id": 3922,
        "prompt": "Complete the Python function given the prompt below:You are an intergalactic surgeon and you have an alien patient. For the purposes of this problem, we can and we will model this patient's body using a $2 \\times (2k + 1)$ rectangular grid. The alien has $4k + 1$ distinct organs, numbered $1$ to $4k + 1$.\nIn healthy such aliens, the organs are arranged in a particular way. For example, here is how the organs of a healthy such alien would be positioned, when viewed from the top, for $k = 4$: [Image] \nHere, the E represents empty space. \nIn general, the first row contains organs $1$ to $2k + 1$ (in that order from left to right), and the second row contains organs $2k + 2$ to $4k + 1$ (in that order from left to right) and then empty space right after. \nYour patient's organs are complete, and inside their body, but they somehow got shuffled around! Your job, as an intergalactic surgeon, is to put everything back in its correct position. All organs of the alien must be in its body during the entire procedure. This means that at any point during the procedure, there is exactly one cell (in the grid) that is empty. In addition, you can only move organs around by doing one of the following things:  You can switch the positions of the empty space E with any organ to its immediate left or to its immediate right (if they exist). In reality, you do this by sliding the organ in question to the empty space;  You can switch the positions of the empty space E with any organ to its immediate top or its immediate bottom (if they exist) only if the empty space is on the leftmost column, rightmost column or in the centermost column. Again, you do this by sliding the organ in question to the empty space. \nYour job is to figure out a sequence of moves you must do during the surgical procedure in order to place back all $4k + 1$ internal organs of your patient in the correct cells. If it is impossible to do so, you must say so.\n-----Input-----\nThe first line of input contains a single integer $t$ ($1 \\le t \\le 4$) denoting the number of test cases. The next lines contain descriptions of the test cases.\nEach test case consists of three lines. The first line contains a single integer $k$ ($1 \\le k \\le 15$) which determines the size of the grid. Then two lines follow. Each of them contains $2k + 1$ space-separated integers or the letter E. They describe the first and second rows of organs, respectively. It is guaranteed that all $4k + 1$ organs are present and there is exactly one E.\n-----Output-----\nFor each test case, first, print a single line containing either:  SURGERY COMPLETE if it is possible to place back all internal organs in the correct locations;  SURGERY FAILED if it is impossible. \nIf it is impossible, then this is the only line of output for the test case. However, if it is possible, output a few more lines describing the sequence of moves to place the organs in the correct locations. \nThe sequence of moves will be a (possibly empty) string of letters u, d, l or r, representing sliding the organ that's directly above, below, to the left or to the right of the empty space, respectively, into the empty space. Print the sequence of moves in the following line, as such a string. \nFor convenience, you may use shortcuts to reduce the size of your output. You may use uppercase letters as shortcuts for sequences of moves. For example, you could choose T to represent the string lddrr. These shortcuts may also include other shortcuts on their own! For example, you could choose E to represent TruT, etc.\nYou may use any number of uppercase letters (including none) as shortcuts. The only requirements are the following:  The total length of all strings in your output for a single case is at most $10^4$;  There must be no cycles involving the shortcuts that are reachable from the main sequence;  The resulting sequence of moves is finite, after expanding all shortcuts. Note that the final sequence of moves (after expanding) may be much longer than $10^4$; the only requirement is that it's finite. \nAs an example, if T = lddrr, E = TruT and R = rrr, then TurTlER expands to:  TurTlER  lddrrurTlER  lddrrurlddrrlER  lddrrurlddrrlTruTR  lddrrurlddrrllddrrruTR  lddrrurlddrrllddrrrulddrrR  lddrrurlddrrllddrrrulddrrrrr \nTo use shortcuts, print each one of them in a single line as the uppercase letter, then space, and then the string that this shortcut represents. They may be printed in any order. At the end of all of those, print a single line containing DONE. \nNote: You still need to print DONE even if you don't plan on using shortcuts.\nYour sequence does not need to be the shortest. Any valid sequence of moves (satisfying the requirements above) will be accepted.\n-----Example-----\nInput\n2\n3\n1 2 3 5 6 E 7\n8 9 10 4 11 12 13\n11\n34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\nE 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3\nOutput\nSURGERY COMPLETE\nIR\nR SrS\nS rr\nI lldll\nDONE\nSURGERY FAILED\n-----Note-----\nThere are three shortcuts defined in the first sample output:  R = SrS  S = rr  I = lldll \nThe sequence of moves is IR and it expands to:  IR  lldllR  lldllSrS  lldllrrrS  lldllrrrrr\n\ndef",
        "answer": "def solve(k, grid):\n    if k == 0:\n        return 'DONE'\n    if k == 1:\n        return 'SURGERY FAILED'\n    if k == 2:\n        return 'SURGERY FAILED'\n    if k == 3:\n        return 'SURGERY FAILED'\n    if k == 4:\n        return 'SURGERY FAILED'\n    if k == 5:\n        return 'SURGERY FAILED'\n    if k == 6:\n        return 'SURGERY FAILED'\n    if k == 7:\n        return 'SURGERY FAILED'\n    if k == 8:\n        return 'SURGERY FAILED'\n    if k == 9:\n        return 'SURGERY FAILED'\n    if k == 10:\n        return 'SURGERY FAILED'\n    if k == 11:\n        return 'SURGERY FAILED'\n    if k == 12:\n        return 'SURGERY FAILED'\n    if k == 13:\n        return 'SURGERY FAILED'\n    if k == 14:\n        return 'SURGERY FAILED'\n    if k == 15:\n        return 'SURGERY FAILED'\n    if k == 16:\n        return 'SURGERY FAILED'\n    if k == 17:\n        return 'SURGERY FAILED'\n    if k == 18:\n        return 'SURGERY FAILED'\n    if k == 19:\n        return 'SURGERY FAILED'\n    if k == 20:\n        return 'SURGERY FAILED'\n    if k == 21:\n        return 'SURGERY FAILED'\n    if k == 22:\n        return 'SURGERY FAILED'\n    if k == 23:\n        return 'SURGERY FAILED'\n    if k == 24:\n        return 'SURGERY FAILED'\n    if k == 25:\n        return 'SURGERY FAILED'\n    if k ==",
        "difficulty": "competition"
    },
    {
        "task_id": 3923,
        "prompt": "Complete the Python function given the prompt below:For a permutation P[1... N] of integers from 1 to N, function f is defined as follows:\n $f(i, j) = \\left\\{\\begin{array}{ll}{P [ i ]} & {\\text{if} j = 1} \\\\{f(P [ i ], j - 1)} & {\\text{otherwise}} \\end{array} \\right.$ \nLet g(i) be the minimum positive integer j such that f(i, j) = i. We can show such j always exists.\nFor given N, A, B, find a permutation P of integers from 1 to N such that for 1 \u2264 i \u2264 N, g(i) equals either A or B.\n-----Input-----\nThe only line contains three integers N, A, B (1 \u2264 N \u2264 10^6, 1 \u2264 A, B \u2264 N).\n-----Output-----\nIf no such permutation exists, output -1. Otherwise, output a permutation of integers from 1 to N.\n-----Examples-----\nInput\n9 2 5\nOutput\n6 5 8 3 4 1 9 2 7\nInput\n3 2 1\nOutput\n1 2 3 \n-----Note-----\nIn the first example, g(1) = g(6) = g(7) = g(9) = 2 and g(2) = g(3) = g(4) = g(5) = g(8) = 5 \nIn the second example, g(1) = g(2) = g(3) = 1\n\ndef",
        "answer": "def f(i, j):\n    if j == 1:\n        return i\n    else:\n        return f(i, j - 1)",
        "difficulty": "competition"
    },
    {
        "task_id": 3924,
        "prompt": "Complete the Python function given the prompt below:Enough is enough. Too many times it happened that Vasya forgot to dispose of garbage and his apartment stank afterwards. Now he wants to create a garbage disposal plan and stick to it.\nFor each of next $n$ days Vasya knows $a_i$ \u2014 number of units of garbage he will produce on the $i$-th day. Each unit of garbage must be disposed of either on the day it was produced or on the next day. Vasya disposes of garbage by putting it inside a bag and dropping the bag into a garbage container. Each bag can contain up to $k$ units of garbage. It is allowed to compose and drop multiple bags into a garbage container in a single day.\nBeing economical, Vasya wants to use as few bags as possible. You are to compute the minimum number of bags Vasya needs to dispose of all of his garbage for the given $n$ days. No garbage should be left after the $n$-th day.\n-----Input-----\nThe first line of the input contains two integers $n$ and $k$ ($1 \\le n \\le 2\\cdot10^5, 1 \\le k \\le 10^9$) \u2014 number of days to consider and bag's capacity. The second line contains $n$ space separated integers $a_i$ ($0 \\le a_i \\le 10^9$) \u2014 the number of units of garbage produced on the $i$-th day.\n-----Output-----\nOutput a single integer \u2014 the minimum number of bags Vasya needs to dispose of all garbage. Each unit of garbage should be disposed on the day it was produced or on the next day. No garbage can be left after the $n$-th day. In a day it is allowed to compose and drop multiple bags.\n-----Examples-----\nInput\n3 2\n3 2 1\nOutput\n3\nInput\n5 1\n1000000000 1000000000 1000000000 1000000000 1000000000\nOutput\n5000000000\nInput\n3 2\n1 0 1\nOutput\n2\nInput\n4 4\n2 8 4 1\nOutput\n4\n\ndef",
        "answer": "def solution(n, k, a):\n    # your code here\n    a = sorted(a)\n    b = [0] * n\n    b[0] = 1\n    for i in range(1, n):\n        if a[i] > k:\n            b[i] = b[i - 1]\n        else:\n            b[i] = b[i - 1] + 1\n    return b[n - 1]",
        "difficulty": "competition"
    },
    {
        "task_id": 3925,
        "prompt": "Complete the Python function given the prompt below:Is there anything better than going to the zoo after a tiresome week at work? No wonder Grisha feels the same while spending the entire weekend accompanied by pretty striped zebras. \nInspired by this adventure and an accidentally found plasticine pack (represented as a sequence of black and white stripes), Grisha now wants to select several consequent (contiguous) pieces of alternating colors to create a zebra. Let's call the number of selected pieces the length of the zebra.\nBefore assembling the zebra Grisha can make the following operation $0$ or more times. He splits the sequence in some place into two parts, then reverses each of them and sticks them together again. For example, if Grisha has pieces in the order \"bwbbw\" (here 'b' denotes a black strip, and 'w' denotes a white strip), then he can split the sequence as bw|bbw (here the vertical bar represents the cut), reverse both parts and obtain \"wbwbb\".\nDetermine the maximum possible length of the zebra that Grisha can produce.\n-----Input-----\nThe only line contains a string $s$ ($1 \\le |s| \\le 10^5$, where $|s|$ denotes the length of the string $s$) comprised of lowercase English letters 'b' and 'w' only, where 'w' denotes a white piece and 'b' denotes a black piece.\n-----Output-----\nPrint a single integer\u00a0\u2014 the maximum possible zebra length.\n-----Examples-----\nInput\nbwwwbwwbw\nOutput\n5\nInput\nbwwbwwb\nOutput\n3\n-----Note-----\nIn the first example one of the possible sequence of operations is bwwwbww|bw $\\to$ w|wbwwwbwb $\\to$ wbwbwwwbw, that gives the answer equal to $5$.\nIn the second example no operation can increase the answer.\n\ndef",
        "answer": "def zebra_concatenation(s):\n    # your code here\n    return 0",
        "difficulty": "competition"
    },
    {
        "task_id": 3926,
        "prompt": "Complete the Python function given the prompt below:You are playing some computer game. One of its levels puts you in a maze consisting of n lines, each of which contains m cells. Each cell either is free or is occupied by an obstacle. The starting cell is in the row r and column c. In one step you can move one square up, left, down or right, if the target cell is not occupied by an obstacle. You can't move beyond the boundaries of the labyrinth.\nUnfortunately, your keyboard is about to break, so you can move left no more than x times and move right no more than y times. There are no restrictions on the number of moves up and down since the keys used to move up and down are in perfect condition.\nNow you would like to determine for each cell whether there exists a sequence of moves that will put you from the starting cell to this particular one. How many cells of the board have this property?\n-----Input-----\nThe first line contains two integers n, m (1 \u2264 n, m \u2264 2000)\u00a0\u2014 the number of rows and the number columns in the labyrinth respectively.\nThe second line contains two integers r, c (1 \u2264 r \u2264 n, 1 \u2264 c \u2264 m)\u00a0\u2014 index of the row and index of the column that define the starting cell.\nThe third line contains two integers x, y (0 \u2264 x, y \u2264 10^9)\u00a0\u2014 the maximum allowed number of movements to the left and to the right respectively.\nThe next n lines describe the labyrinth. Each of them has length of m and consists only of symbols '.' and '*'. The j-th character of the i-th line corresponds to the cell of labyrinth at row i and column j. Symbol '.' denotes the free cell, while symbol '*' denotes the cell with an obstacle.\nIt is guaranteed, that the starting cell contains no obstacles.\n-----Output-----\nPrint exactly one integer\u00a0\u2014 the number of cells in the labyrinth, which are reachable from starting cell, including the starting cell itself.\n-----Examples-----\nInput\n4 5\n3 2\n1 2\n.....\n.***.\n...**\n*....\nOutput\n10\nInput\n4 4\n2 2\n0 1\n....\n..*.\n....\n....\nOutput\n7\n-----Note-----\nCells, reachable in the corresponding example, are marked with '+'.\nFirst example:  \n+++..\n+***.\n+++**\n*+++.\n \nSecond example:  \n.++.\n.+*.\n.++.\n.++.\n\ndef",
        "answer": "def count_reachable_cells(n, m, r, c, x, y):\n    # Write your code here\n    pass",
        "difficulty": "competition"
    },
    {
        "task_id": 3927,
        "prompt": "Complete the Python function given the prompt below:You have a set of $n$ weights. You know that their masses are $a_1$, $a_2$,..., $a_n$ grams, but you don't know which of them has which mass. You can't distinguish the weights.\nHowever, your friend does know the mass of each weight. You can ask your friend to give you exactly $k$ weights with the total mass $m$ (both parameters $k$ and $m$ are chosen by you), and your friend will point to any valid subset of weights, if it is possible.\nYou are allowed to make this query only once. Find the maximum possible number of weights you can reveal after this query.\n-----Input-----\nThe first line contains a single integer $n$ ($1 \\le n \\le 100$)\u00a0\u2014 the number of weights.\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 100$)\u00a0\u2014 the masses of the weights.\n-----Output-----\nPrint the maximum number of weights you can learn the masses for after making a single query.\n-----Examples-----\nInput\n4\n1 4 2 2\nOutput\n2\nInput\n6\n1 2 4 4 4 9\nOutput\n2\n-----Note-----\nIn the first example we can ask for a subset of two weights with total mass being equal to $4$, and the only option is to get $\\{2, 2\\}$.\nAnother way to obtain the same result is to ask for a subset of two weights with the total mass of $5$ and get $\\{1, 4\\}$. It is easy to see that the two remaining weights have mass of $2$ grams each.\nIn the second example we can ask for a subset of two weights with total mass being $8$, and the only answer is $\\{4, 4\\}$. We can prove it is not possible to learn masses for three weights in one query, but we won't put the proof here.\n\ndef",
        "answer": "def solution(n, a):\n    # your code here\n    return 0",
        "difficulty": "competition"
    },
    {
        "task_id": 3928,
        "prompt": "Complete the Python function given the prompt below:Suppose you are given a string $s$ of length $n$ consisting of lowercase English letters. You need to compress it using the smallest possible number of coins.\nTo compress the string, you have to represent $s$ as a concatenation of several non-empty strings: $s = t_{1} t_{2} \\ldots t_{k}$. The $i$-th of these strings should be encoded with one of the two ways:  if $|t_{i}| = 1$, meaning that the current string consists of a single character, you can encode it paying $a$ coins;  if $t_{i}$ is a substring of $t_{1} t_{2} \\ldots t_{i - 1}$, then you can encode it paying $b$ coins. \nA string $x$ is a substring of a string $y$ if $x$ can be obtained from $y$ by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\nSo your task is to calculate the minimum possible number of coins you need to spend in order to compress the given string $s$.\n-----Input-----\nThe first line contains three positive integers, separated by spaces: $n$, $a$ and $b$ ($1 \\leq n, a, b \\leq 5000$)\u00a0\u2014 the length of the string, the cost to compress a one-character string and the cost to compress a string that appeared before.\nThe second line contains a single string $s$, consisting of $n$ lowercase English letters.\n-----Output-----\nOutput a single integer \u2014 the smallest possible number of coins you need to spend to compress $s$.\n-----Examples-----\nInput\n3 3 1\naba\nOutput\n7\nInput\n4 1 1\nabcd\nOutput\n4\nInput\n4 10 1\naaaa\nOutput\n12\n-----Note-----\nIn the first sample case, you can set $t_{1} =$ 'a', $t_{2} =$ 'b', $t_{3} =$ 'a' and pay $3 + 3 + 1 = 7$ coins, since $t_{3}$ is a substring of $t_{1}t_{2}$.\nIn the second sample, you just need to compress every character by itself.\nIn the third sample, you set $t_{1} = t_{2} =$ 'a', $t_{3} =$ 'aa' and pay $10 + 1 + 1 = 12$ coins, since $t_{2}$ is a substring of $t_{1}$ and $t_{3}$ is a substring of $t_{1} t_{2}$.\n\ndef",
        "answer": "def solution(s):\n    # your code here\n    return 0\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')",
        "difficulty": "competition"
    },
    {
        "task_id": 3929,
        "prompt": "Complete the Python function given the prompt below:Snuke has decided to play with N cards and a deque (that is, a double-ended queue).\nEach card shows an integer from 1 through N, and the deque is initially empty.\nSnuke will insert the cards at the beginning or the end of the deque one at a time, in order from 1 to N.\nThen, he will perform the following action N times: take out the card from the beginning or the end of the deque and eat it.\nAfterwards, we will construct an integer sequence by arranging the integers written on the eaten cards, in the order they are eaten. Among the sequences that can be obtained in this way, find the number of the sequences such that the K-th element is 1. Print the answer modulo 10^{9} + 7.\n-----Constraints-----\n - 1 \u2266 K \u2266 N \u2266 2{,}000\n-----Input-----\nThe input is given from Standard Input in the following format:\nN K\n-----Output-----\nPrint the answer modulo 10^{9} + 7.\n-----Sample Input-----\n2 1\n-----Sample Output-----\n1\nThere is one sequence satisfying the condition: 1,2. One possible way to obtain this sequence is the following:\n - Insert both cards, 1 and 2, at the end of the deque.\n - Eat the card at the beginning of the deque twice.\n\ndef",
        "answer": "def count_sequences(n, k):\n    # Write your code here\n    pass",
        "difficulty": "competition"
    },
    {
        "task_id": 3930,
        "prompt": "Complete the Python function given the prompt below:Molly Hooper has n different kinds of chemicals arranged in a line. Each of the chemicals has an affection value, The i-th of them has affection value a_{i}.\nMolly wants Sherlock to fall in love with her. She intends to do this by mixing a contiguous segment of chemicals together to make a love potion with total affection value as a non-negative integer power of k. Total affection value of a continuous segment of chemicals is the sum of affection values of each chemical in that segment.\nHelp her to do so in finding the total number of such segments.\n-----Input-----\nThe first line of input contains two integers, n and k, the number of chemicals and the number, such that the total affection value is a non-negative power of this number k. (1 \u2264 n \u2264 10^5, 1 \u2264 |k| \u2264 10).\nNext line contains n integers a_1, a_2,..., a_{n} ( - 10^9 \u2264 a_{i} \u2264 10^9)\u00a0\u2014 affection values of chemicals.\n-----Output-----\nOutput a single integer\u00a0\u2014 the number of valid segments.\n-----Examples-----\nInput\n4 2\n2 2 2 2\nOutput\n8\nInput\n4 -3\n3 -6 -3 12\nOutput\n3\n-----Note-----\nDo keep in mind that k^0 = 1.\nIn the first sample, Molly can get following different affection values:  2: segments [1, 1], [2, 2], [3, 3], [4, 4];\n 4: segments [1, 2], [2, 3], [3, 4];\n 6: segments [1, 3], [2, 4];\n 8: segments [1, 4]. \nOut of these, 2, 4 and 8 are powers of k = 2. Therefore, the answer is 8.\nIn the second sample, Molly can choose segments [1, 2], [3, 3], [3, 4].\n\ndef",
        "answer": "def love_potion(n, k):\n    return sum(a**k for a in A)",
        "difficulty": "competition"
    },
    {
        "task_id": 3931,
        "prompt": "Complete the Python function given the prompt below:In the evening Polycarp decided to analyze his today's travel expenses on public transport.\nThe bus system in the capital of Berland is arranged in such a way that each bus runs along the route between two stops. Each bus has no intermediate stops. So each of the buses continuously runs along the route from one stop to the other and back. There is at most one bus running between a pair of stops.\nPolycarp made n trips on buses. About each trip the stop where he started the trip and the the stop where he finished are known. The trips follow in the chronological order in Polycarp's notes.\nIt is known that one trip on any bus costs a burles. In case when passenger makes a transshipment the cost of trip decreases to b burles (b < a). A passenger makes a transshipment if the stop on which he boards the bus coincides with the stop where he left the previous bus. Obviously, the first trip can not be made with transshipment.\nFor example, if Polycarp made three consecutive trips: \"BerBank\" $\\rightarrow$ \"University\", \"University\" $\\rightarrow$ \"BerMall\", \"University\" $\\rightarrow$ \"BerBank\", then he payed a + b + a = 2a + b burles. From the BerBank he arrived to the University, where he made transshipment to the other bus and departed to the BerMall. Then he walked to the University and returned to the BerBank by bus.\nAlso Polycarp can buy no more than k travel cards. Each travel card costs f burles. The travel card for a single bus route makes free of charge any trip by this route (in both directions). Once purchased, a travel card can be used any number of times in any direction.\nWhat is the smallest amount of money Polycarp could have spent today if he can buy no more than k travel cards?\n-----Input-----\nThe first line contains five integers n, a, b, k, f (1 \u2264 n \u2264 300, 1 \u2264 b < a \u2264 100, 0 \u2264 k \u2264 300, 1 \u2264 f \u2264 1000) where:  n \u2014 the number of Polycarp trips,  a \u2014 the cost of a regualar single trip,  b \u2014 the cost of a trip after a transshipment,  k \u2014 the maximum number of travel cards Polycarp can buy,  f \u2014 the cost of a single travel card. \nThe following n lines describe the trips in the chronological order. Each line contains exactly two different words separated by a single space \u2014 the name of the start stop and the name of the finish stop of the trip. All names consist of uppercase and lowercase English letters and have lengths between 1 to 20 letters inclusive. Uppercase and lowercase letters should be considered different.\n-----Output-----\nPrint the smallest amount of money Polycarp could have spent today, if he can purchase no more than k travel cards.\n-----Examples-----\nInput\n3 5 3 1 8\nBerBank University\nUniversity BerMall\nUniversity BerBank\nOutput\n11\nInput\n4 2 1 300 1000\na A\nA aa\naa AA\nAA a\nOutput\n5\n-----Note-----\nIn the first example Polycarp can buy travel card for the route \"BerBank $\\leftrightarrow$ University\" and spend 8 burles. Note that his second trip \"University\" $\\rightarrow$ \"BerMall\" was made after transshipment, so for this trip Polycarp payed 3 burles. So the minimum total sum equals to 8 + 3 = 11 burles.\nIn the second example it doesn't make sense to buy travel cards. Note that each of Polycarp trip (except the first) was made with transshipment. So the minimum total sum equals to 2 + 1 + 1 + 1 = 5 burles.\n\ndef",
        "answer": "def solution(n, a, b, k, f):\n    # Write your code here\n    pass",
        "difficulty": "competition"
    },
    {
        "task_id": 3932,
        "prompt": "Complete the Python function given the prompt below:Iahub and Iahubina went to a picnic in a forest full of trees. Less than 5 minutes passed before Iahub remembered of trees from programming. Moreover, he invented a new problem and Iahubina has to solve it, otherwise Iahub won't give her the food. \nIahub asks Iahubina: can you build a rooted tree, such that\n  each internal node (a node with at least one son) has at least two sons;  node i has c_{i} nodes in its subtree? \nIahubina has to guess the tree. Being a smart girl, she realized that it's possible no tree can follow Iahub's restrictions. In this way, Iahub will eat all the food. You need to help Iahubina: determine if there's at least one tree following Iahub's restrictions. The required tree must contain n nodes.\n-----Input-----\nThe first line of the input contains integer n (1 \u2264 n \u2264 24). Next line contains n positive integers: the i-th number represents c_{i} (1 \u2264 c_{i} \u2264 n).\n-----Output-----\nOutput on the first line \"YES\" (without quotes) if there exist at least one tree following Iahub's restrictions, otherwise output \"NO\" (without quotes). \n-----Examples-----\nInput\n4\n1 1 1 4\nOutput\nYES\nInput\n5\n1 1 5 2 1\nOutput\nNO\n\ndef",
        "answer": "def is_valid(n, c):\n    if n == 1:\n        return True\n    if n == 2:\n        return c[0] == 1 and c[1] == 1\n    if n == 3:\n        return c[0] == 1 and c[1] == 1 and c[2] == 1\n    if n == 4:\n        return c[0] == 1 and c[1] == 1 and c[2] == 1 and c[3] == 1\n    if n == 5:\n        return c[0] == 1 and c[1] == 1 and c[2] == 1 and c[3] == 1 and c[4] == 1\n    if n == 6:\n        return c[0] == 1 and c[1] == 1 and c[2] == 1 and c[3] == 1 and c[4] == 1 and c[5] == 1\n    if n == 7:\n        return c[0] == 1 and c[1] == 1 and c[2] == 1 and c[3] == 1 and c[4] == 1 and c[5] == 1 and c[6] == 1\n    if n == 8:\n        return c[0] == 1 and c[1] == 1 and c[2] == 1 and c[3] == 1 and c[4] == 1 and c[5] == 1 and c[6] == 1 and c[7] == 1\n    if n == 9:\n        return c[0] == 1 and c[1] == 1 and c[2] == 1 and c[3] == 1 and c[4] == 1 and c[5] == 1 and c[6] == 1 and c[7] == 1 and c[8] == 1\n    if n == 10:\n        return c[0] == 1 and c[1] == 1 and c[2] == 1 and c[3] == 1 and c[4] == 1 and c[5] == 1 and c[6] == 1 and c[7] == 1 and c[8] == 1 and c[9] == 1\n    if n == 11:\n        return c[0] == 1 and c[1] ==",
        "difficulty": "competition"
    },
    {
        "task_id": 3933,
        "prompt": "Complete the Python function given the prompt below:Vasya came up with his own weather forecasting method. He knows the information about the average air temperature for each of the last n days. Assume that the average air temperature for each day is integral.\nVasya believes that if the average temperatures over the last n days form an arithmetic progression, where the first term equals to the average temperature on the first day, the second term equals to the average temperature on the second day and so on, then the average temperature of the next (n + 1)-th day will be equal to the next term of the arithmetic progression. Otherwise, according to Vasya's method, the temperature of the (n + 1)-th day will be equal to the temperature of the n-th day.\nYour task is to help Vasya predict the average temperature for tomorrow, i. e. for the (n + 1)-th day.\n-----Input-----\nThe first line contains a single integer n (2 \u2264 n \u2264 100) \u2014 the number of days for which the average air temperature is known.\nThe second line contains a sequence of integers t_1, t_2,..., t_{n} ( - 1000 \u2264 t_{i} \u2264 1000)\u00a0\u2014 where t_{i} is the average temperature in the i-th day.\n-----Output-----\nPrint the average air temperature in the (n + 1)-th day, which Vasya predicts according to his method. Note that the absolute value of the predicted temperature can exceed 1000.\n-----Examples-----\nInput\n5\n10 5 0 -5 -10\nOutput\n-15\nInput\n4\n1 1 1 1\nOutput\n1\nInput\n3\n5 1 -5\nOutput\n-5\nInput\n2\n900 1000\nOutput\n1100\n-----Note-----\nIn the first example the sequence of the average temperatures is an arithmetic progression where the first term is 10 and each following terms decreases by 5. So the predicted average temperature for the sixth day is  - 10 - 5 =  - 15.\nIn the second example the sequence of the average temperatures is an arithmetic progression where the first term is 1 and each following terms equals to the previous one. So the predicted average temperature in the fifth day is 1.\nIn the third example the average temperatures do not form an arithmetic progression, so the average temperature of the fourth day equals to the temperature of the third day and equals to  - 5.\nIn the fourth example the sequence of the average temperatures is an arithmetic progression where the first term is 900 and each the following terms increase by 100. So predicted average temperature in the third day is 1000 + 100 = 1100.\n\ndef",
        "answer": "def average_temperature(n, t):\n    return sum(t) / n",
        "difficulty": "competition"
    },
    {
        "task_id": 3934,
        "prompt": "Complete the Python function given the prompt below:Note that this is the first problem of the two similar problems. You can hack this problem only if you solve both problems.\nYou are given a tree with $n$ nodes. In the beginning, $0$ is written on all edges. In one operation, you can choose any $2$ distinct leaves $u$, $v$ and any real number $x$ and add $x$ to values written on all edges on the simple path between $u$ and $v$.\nFor example, on the picture below you can see the result of applying two operations to the graph: adding $2$ on the path from $7$ to $6$, and then adding $-0.5$ on the path from $4$ to $5$. \n [Image] \nIs it true that for any configuration of real numbers written on edges, we can achieve it with a finite number of operations?\nLeaf is a node of a tree of degree $1$. Simple path is a path that doesn't contain any node twice.\n-----Input-----\nThe first line contains a single integer $n$ ($2 \\le n \\le 10^5$)\u00a0\u2014 the number of nodes.\nEach of the next $n-1$ lines contains two integers $u$ and $v$ ($1 \\le u, v \\le n$, $u \\neq v$), meaning that there is an edge between nodes $u$ and $v$. It is guaranteed that these edges form a tree.\n-----Output-----\nIf there is a configuration of real numbers written on edges of the tree that we can't achieve by performing the operations, output \"NO\". \nOtherwise, output \"YES\". \nYou can print each letter in any case (upper or lower).\n-----Examples-----\nInput\n2\n1 2\nOutput\nYES\nInput\n3\n1 2\n2 3\nOutput\nNO\nInput\n5\n1 2\n1 3\n1 4\n2 5\nOutput\nNO\nInput\n6\n1 2\n1 3\n1 4\n2 5\n2 6\nOutput\nYES\n-----Note-----\nIn the first example, we can add any real $x$ to the value written on the only edge $(1, 2)$.\n [Image] \nIn the second example, one of configurations that we can't reach is $0$ written on $(1, 2)$ and $1$ written on $(2, 3)$.\n $8$ \nBelow you can see graphs from examples $3$, $4$:\n [Image] \n [Image]\n\ndef",
        "answer": "def solution(n, edges):\n    # Write your code here\n    if n == 1:\n        return \"YES\"\n    if n == 2:\n        return \"NO\"\n    if n == 3:\n        return \"YES\"\n    if n == 4:\n        return \"NO\"\n    if n == 5:\n        return \"YES\"\n    if n == 6:\n        return \"NO\"\n    if n == 7:\n        return \"YES\"\n    if n == 8:\n        return \"NO\"\n    if n == 9:\n        return \"YES\"\n    if n == 10:\n        return \"NO\"\n    if n == 11:\n        return \"YES\"\n    if n == 12:\n        return \"NO\"\n    if n == 13:\n        return \"YES\"\n    if n == 14:\n        return \"NO\"\n    if n == 15:\n        return \"YES\"\n    if n == 16:\n        return \"NO\"\n    if n == 17:\n        return \"YES\"\n    if n == 18:\n        return \"NO\"\n    if n == 19:\n        return \"YES\"\n    if n == 20:\n        return \"NO\"\n    if n == 21:\n        return \"YES\"\n    if n == 22:\n        return \"NO\"\n    if n == 23:\n        return \"YES\"\n    if n == 24:\n        return \"NO\"\n    if n == 25:\n        return \"YES\"\n    if n == 26:\n        return \"NO\"\n    if n == 27:\n        return \"YES\"\n    if n == 28:\n        return \"NO\"\n    if n == 29:\n        return \"YES\"\n    if n == 30:\n        return \"NO\"\n    if n == 31:\n        return \"YES\"\n    if n == 32:\n        return \"NO\"\n    if n == 33:\n        return \"YES\"\n    if n == 34:\n        return \"NO\"\n    if n == 35:\n        return \"YES\"\n    if n == 36:\n        return \"NO\"\n    if n == 37:\n        return \"YES\"\n    if n == 38",
        "difficulty": "competition"
    },
    {
        "task_id": 3935,
        "prompt": "Complete the Python function given the prompt below:Boy Dima gave Julian a birthday present\u00a0\u2014 set $B$ consisting of positive integers. However, he didn't know, that Julian hates sets, but enjoys bipartite graphs more than anything else!\nJulian was almost upset, but her friend Alex said, that he can build an undirected graph using this set in such a way: let all integer numbers be vertices, then connect any two $i$ and $j$ with an edge if $|i - j|$ belongs to $B$.\nUnfortunately, Julian doesn't like the graph, that was built using $B$. Alex decided to rectify the situation, so he wants to erase some numbers from $B$, so that graph built using the new set is bipartite. The difficulty of this task is that the graph, Alex has to work with, has an infinite number of vertices and edges! It is impossible to solve this task alone, so Alex asks you for help. Write a program that erases a subset of minimum size from $B$ so that graph constructed on the new set is bipartite.\nRecall, that graph is bipartite if all its vertices can be divided into two disjoint sets such that every edge connects a vertex from different sets.\n-----Input-----\nFirst line contains an integer $n ~ (1 \\leqslant n \\leqslant 200\\,000)$\u00a0\u2014 size of $B$\nSecond line contains $n$ integers $b_1, b_2, \\ldots, b_n ~ (1 \\leqslant b_i \\leqslant 10^{18})$\u00a0\u2014 numbers of $B$, all $b_i$ are unique\n-----Output-----\nIn the first line print single integer $k$ \u2013 the number of erased elements. In the second line print $k$ integers\u00a0\u2014 values of erased elements.\nIf there are multiple answers, print any of them.\n-----Examples-----\nInput\n3\n1 2 3\nOutput\n1\n2 \nInput\n2\n2 6\nOutput\n0\n\ndef",
        "answer": "def bipartite(B):\n    # your code here\n    return",
        "difficulty": "competition"
    },
    {
        "task_id": 3936,
        "prompt": "Complete the Python function given the prompt below:We have a board with a 2 \\times N grid.\nSnuke covered the board with N dominoes without overlaps.\nHere, a domino can cover a 1 \\times 2 or 2 \\times 1 square.\nThen, Snuke decided to paint these dominoes using three colors: red, cyan and green.\nTwo dominoes that are adjacent by side should be painted by different colors.\nHere, it is not always necessary to use all three colors.\nFind the number of such ways to paint the dominoes, modulo 1000000007.\nThe arrangement of the dominoes is given to you as two strings S_1 and S_2 in the following manner:\n - Each domino is represented by a different English letter (lowercase or uppercase).\n - The j-th character in S_i represents the domino that occupies the square at the i-th row from the top and j-th column from the left.\n-----Constraints-----\n - 1 \\leq N \\leq 52\n - |S_1| = |S_2| = N\n - S_1 and S_2 consist of lowercase and uppercase English letters.\n - S_1 and S_2 represent a valid arrangement of dominoes.\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nS_1\nS_2\n-----Output-----\nPrint the number of such ways to paint the dominoes, modulo 1000000007.\n-----Sample Input-----\n3\naab\nccb\n-----Sample Output-----\n6\nThere are six ways as shown below:\n\ndef",
        "answer": "def paint_dominoes(s1, s2):\n    pass",
        "difficulty": "competition"
    },
    {
        "task_id": 3937,
        "prompt": "Complete the Python function given the prompt below:Consider a table G of size n \u00d7 m such that G(i, j) = GCD(i, j) for all 1 \u2264 i \u2264 n, 1 \u2264 j \u2264 m. GCD(a, b) is the greatest common divisor of numbers a and b.\nYou have a sequence of positive integer numbers a_1, a_2,..., a_{k}. We say that this sequence occurs in table G if it coincides with consecutive elements in some row, starting from some position. More formally, such numbers 1 \u2264 i \u2264 n and 1 \u2264 j \u2264 m - k + 1 should exist that G(i, j + l - 1) = a_{l} for all 1 \u2264 l \u2264 k.\nDetermine if the sequence a occurs in table G.\n-----Input-----\nThe first line contains three space-separated integers n, m and k (1 \u2264 n, m \u2264 10^12; 1 \u2264 k \u2264 10000). The second line contains k space-separated integers a_1, a_2,..., a_{k} (1 \u2264 a_{i} \u2264 10^12).\n-----Output-----\nPrint a single word \"YES\", if the given sequence occurs in table G, otherwise print \"NO\".\n-----Examples-----\nInput\n100 100 5\n5 2 1 2 1\nOutput\nYES\nInput\n100 8 5\n5 2 1 2 1\nOutput\nNO\nInput\n100 100 7\n1 2 3 4 5 6 7\nOutput\nNO\n-----Note-----\nSample 1. The tenth row of table G starts from sequence {1, 2, 1, 2, 5, 2, 1, 2, 1, 10}. As you can see, elements from fifth to ninth coincide with sequence a.\nSample 2. This time the width of table G equals 8. Sequence a doesn't occur there.\n\ndef",
        "answer": "def find_sequence(n, m, k, a):\n    table = [[0 for _ in range(m)] for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            table[i][j] = a[j] % a[i]\n    for i in range(n):\n        for j in range(m - k + 1):\n            if table[i][j] == table[i][j + k - 1]:\n                return 'YES'\n    return 'NO'",
        "difficulty": "competition"
    },
    {
        "task_id": 3938,
        "prompt": "Complete the Python function given the prompt below:There is a square grid of size $n \\times n$. Some cells are colored in black, all others are colored in white. In one operation you can select some rectangle and color all its cells in white. It costs $\\min(h, w)$ to color a rectangle of size $h \\times w$. You are to make all cells white for minimum total cost.\nThe square is large, so we give it to you in a compressed way. The set of black cells is the union of $m$ rectangles.\n-----Input-----\nThe first line contains two integers $n$ and $m$ ($1 \\le n \\le 10^{9}$, $0 \\le m \\le 50$)\u00a0\u2014 the size of the square grid and the number of black rectangles.\nEach of the next $m$ lines contains 4 integers $x_{i1}$ $y_{i1}$ $x_{i2}$ $y_{i2}$ ($1 \\le x_{i1} \\le x_{i2} \\le n$, $1 \\le y_{i1} \\le y_{i2} \\le n$)\u00a0\u2014 the coordinates of the bottom-left and the top-right corner cells of the $i$-th black rectangle.\nThe rectangles may intersect.\n-----Output-----\nPrint a single integer\u00a0\u2014 the minimum total cost of painting the whole square in white.\n-----Examples-----\nInput\n10 2\n4 1 5 10\n1 4 10 5\nOutput\n4\nInput\n7 6\n2 1 2 1\n4 2 4 3\n2 5 2 5\n2 3 5 3\n1 2 1 2\n3 2 5 3\nOutput\n3\n-----Note-----\nThe examples and some of optimal solutions are shown on the pictures below.\n [Image]\n\ndef",
        "answer": "def minimum_cost(n, m, x, y):\n    # Write your code here\n    pass",
        "difficulty": "competition"
    },
    {
        "task_id": 3939,
        "prompt": "Complete the Python function given the prompt below:Slime has a sequence of positive integers $a_1, a_2, \\ldots, a_n$.\nIn one operation Orac can choose an arbitrary subsegment $[l \\ldots r]$ of this sequence and replace all values $a_l, a_{l + 1}, \\ldots, a_r$ to the value of median of $\\{a_l, a_{l + 1}, \\ldots, a_r\\}$.\nIn this problem, for the integer multiset $s$, the median of $s$ is equal to the $\\lfloor \\frac{|s|+1}{2}\\rfloor$-th smallest number in it. For example, the median of $\\{1,4,4,6,5\\}$ is $4$, and the median of $\\{1,7,5,8\\}$ is $5$.\nSlime wants Orac to make $a_1 = a_2 = \\ldots = a_n = k$ using these operations.\nOrac thinks that it is impossible, and he does not want to waste his time, so he decided to ask you if it is possible to satisfy the Slime's requirement, he may ask you these questions several times.\n-----Input-----\nThe first line of the input is a single integer $t$: the number of queries.\nThe first line of each query contains two integers $n\\ (1\\le n\\le 100\\,000)$ and $k\\ (1\\le k\\le 10^9)$, the second line contains $n$ positive integers $a_1,a_2,\\dots,a_n\\ (1\\le a_i\\le 10^9)$\nThe total sum of $n$ is at most $100\\,000$.\n-----Output-----\nThe output should contain $t$ lines. The $i$-th line should be equal to 'yes' if it is possible to make all integers $k$ in some number of operations or 'no', otherwise. You can print each letter in lowercase or uppercase.\n-----Example-----\nInput\n5\n5 3\n1 5 2 6 1\n1 6\n6\n3 2\n1 2 3\n4 3\n3 1 2 3\n10 3\n1 2 3 4 5 6 7 8 9 10\nOutput\nno\nyes\nyes\nno\nyes\n-----Note-----\nIn the first query, Orac can't turn all elements into $3$.\nIn the second query, $a_1=6$ is already satisfied.\nIn the third query, Orac can select the complete array and turn all elements into $2$.\nIn the fourth query, Orac can't turn all elements into $3$.\nIn the fifth query, Orac can select $[1,6]$ at first and then select $[2,10]$.\n\ndef",
        "answer": "def median(s):\n    return sorted(s)[len(s)//2]",
        "difficulty": "competition"
    },
    {
        "task_id": 3940,
        "prompt": "Complete the Python function given the prompt below:Alyona's mother wants to present an array of n non-negative integers to Alyona. The array should be special. \nAlyona is a capricious girl so after she gets the array, she inspects m of its subarrays. Subarray is a set of some subsequent elements of the array. The i-th subarray is described with two integers l_{i} and r_{i}, and its elements are a[l_{i}], a[l_{i} + 1],..., a[r_{i}].\nAlyona is going to find mex for each of the chosen subarrays. Among these m mexes the girl is going to find the smallest. She wants this minimum mex to be as large as possible. \nYou are to find an array a of n elements so that the minimum mex among those chosen by Alyona subarrays is as large as possible.\nThe mex of a set S is a minimum possible non-negative integer that is not in S.\n-----Input-----\nThe first line contains two integers n and m (1 \u2264 n, m \u2264 10^5).\nThe next m lines contain information about the subarrays chosen by Alyona. The i-th of these lines contains two integers l_{i} and r_{i} (1 \u2264 l_{i} \u2264 r_{i} \u2264 n), that describe the subarray a[l_{i}], a[l_{i} + 1],..., a[r_{i}].\n-----Output-----\nIn the first line print single integer\u00a0\u2014 the maximum possible minimum mex.\nIn the second line print n integers\u00a0\u2014 the array a. All the elements in a should be between 0 and 10^9.\nIt is guaranteed that there is an optimal answer in which all the elements in a are between 0 and 10^9.\nIf there are multiple solutions, print any of them.\n-----Examples-----\nInput\n5 3\n1 3\n2 5\n4 5\nOutput\n2\n1 0 2 1 0\nInput\n4 2\n1 4\n2 4\nOutput\n3\n5 2 0 1\n-----Note-----\nThe first example: the mex of the subarray (1, 3) is equal to 3, the mex of the subarray (2, 5) is equal to 3, the mex of the subarray (4, 5) is equal to 2 as well, thus the minumal mex among the subarrays chosen by Alyona is equal to 2.\n\ndef",
        "answer": "def minimumMex(n, m, a):\n    # Write your code here\n    mex = 0\n    for i in range(m):\n        mex = max(mex, max(a[i:i+n]))\n    return mex",
        "difficulty": "competition"
    },
    {
        "task_id": 3941,
        "prompt": "Complete the Python function given the prompt below:Moriarty has trapped n people in n distinct rooms in a hotel. Some rooms are locked, others are unlocked. But, there is a condition that the people in the hotel can only escape when all the doors are unlocked at the same time. There are m switches. Each switch control doors of some rooms, but each door is controlled by exactly two switches.\nYou are given the initial configuration of the doors. Toggling any switch, that is, turning it ON when it is OFF, or turning it OFF when it is ON, toggles the condition of the doors that this switch controls. Say, we toggled switch 1, which was connected to room 1, 2 and 3 which were respectively locked, unlocked and unlocked. Then, after toggling the switch, they become unlocked, locked and locked.\nYou need to tell Sherlock, if there exists a way to unlock all doors at the same time.\n-----Input-----\nFirst line of input contains two integers n and m (2 \u2264 n \u2264 10^5, 2 \u2264 m \u2264 10^5)\u00a0\u2014 the number of rooms and the number of switches.\nNext line contains n space-separated integers r_1, r_2,..., r_{n} (0 \u2264 r_{i} \u2264 1) which tell the status of room doors. The i-th room is locked if r_{i} = 0, otherwise it is unlocked.\nThe i-th of next m lines contains an integer x_{i} (0 \u2264 x_{i} \u2264 n) followed by x_{i} distinct integers separated by space, denoting the number of rooms controlled by the i-th switch followed by the room numbers that this switch controls. It is guaranteed that the room numbers are in the range from 1 to n. It is guaranteed that each door is controlled by exactly two switches.\n-----Output-----\nOutput \"YES\" without quotes, if it is possible to open all doors at the same time, otherwise output \"NO\" without quotes.\n-----Examples-----\nInput\n3 3\n1 0 1\n2 1 3\n2 1 2\n2 2 3\nOutput\nNO\nInput\n3 3\n1 0 1\n3 1 2 3\n1 2\n2 1 3\nOutput\nYES\nInput\n3 3\n1 0 1\n3 1 2 3\n2 1 2\n1 3\nOutput\nNO\n-----Note-----\nIn the second example input, the initial statuses of the doors are [1, 0, 1] (0 means locked, 1\u00a0\u2014 unlocked).\nAfter toggling switch 3, we get [0, 0, 0] that means all doors are locked.\nThen, after toggling switch 1, we get [1, 1, 1] that means all doors are unlocked.\nIt can be seen that for the first and for the third example inputs it is not possible to make all doors unlocked.\n\ndef",
        "answer": "def solve(n, m, r):\n    if n == 1:\n        return \"YES\"\n    if n == 2:\n        return \"NO\"\n    if n == 3:\n        return \"YES\"\n    if n == 4:\n        return \"NO\"\n    if n == 5:\n        return \"YES\"\n    if n == 6:\n        return \"NO\"\n    if n == 7:\n        return \"YES\"\n    if n == 8:\n        return \"NO\"\n    if n == 9:\n        return \"YES\"\n    if n == 10:\n        return \"NO\"\n    if n == 11:\n        return \"YES\"\n    if n == 12:\n        return \"NO\"\n    if n == 13:\n        return \"YES\"\n    if n == 14:\n        return \"NO\"\n    if n == 15:\n        return \"YES\"\n    if n == 16:\n        return \"NO\"\n    if n == 17:\n        return \"YES\"\n    if n == 18:\n        return \"NO\"\n    if n == 19:\n        return \"YES\"\n    if n == 20:\n        return \"NO\"\n    if n == 21:\n        return \"YES\"\n    if n == 22:\n        return \"NO\"\n    if n == 23:\n        return \"YES\"\n    if n == 24:\n        return \"NO\"\n    if n == 25:\n        return \"YES\"\n    if n == 26:\n        return \"NO\"\n    if n == 27:\n        return \"YES\"\n    if n == 28:\n        return \"NO\"\n    if n == 29:\n        return \"YES\"\n    if n == 30:\n        return \"NO\"\n    if n == 31:\n        return \"YES\"\n    if n == 32:\n        return \"NO\"\n    if n == 33:\n        return \"YES\"\n    if n == 34:\n        return \"NO\"\n    if n == 35:\n        return \"YES\"\n    if n == 36:\n        return \"NO\"\n    if n == 37:\n        return \"YES\"\n    if n == 38:\n        return \"",
        "difficulty": "competition"
    },
    {
        "task_id": 3942,
        "prompt": "Complete the Python function given the prompt below:Malek has recently found a treasure map. While he was looking for a treasure he found a locked door. There was a string s written on the door consisting of characters '(', ')' and '#'. Below there was a manual on how to open the door. After spending a long time Malek managed to decode the manual and found out that the goal is to replace each '#' with one or more ')' characters so that the final string becomes beautiful. \nBelow there was also written that a string is called beautiful if for each i (1 \u2264 i \u2264 |s|) there are no more ')' characters than '(' characters among the first i characters of s and also the total number of '(' characters is equal to the total number of ')' characters. \nHelp Malek open the door by telling him for each '#' character how many ')' characters he must replace it with.\n-----Input-----\nThe first line of the input contains a string s (1 \u2264 |s| \u2264 10^5). Each character of this string is one of the characters '(', ')' or '#'. It is guaranteed that s contains at least one '#' character.\n-----Output-----\nIf there is no way of replacing '#' characters which leads to a beautiful string print  - 1. Otherwise for each character '#' print a separate line containing a positive integer, the number of ')' characters this character must be replaced with.\nIf there are several possible answers, you may output any of them.\n-----Examples-----\nInput\n(((#)((#)\nOutput\n1\n2\nInput\n()((#((#(#()\nOutput\n2\n2\n1\nInput\n#\nOutput\n-1\nInput\n(#)\nOutput\n-1\n-----Note-----\n|s| denotes the length of the string s.\n\ndef",
        "answer": "def solution(s):\n    # Write your code here\n    stack = []\n    for i in s:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if len(stack) == 0:\n                return -1\n            stack.pop()\n    if len(stack) == 0:\n        return 0\n    else:\n        return -1\n",
        "difficulty": "competition"
    },
    {
        "task_id": 3943,
        "prompt": "Complete the Python function given the prompt below:User ainta loves to play with cards. He has a cards containing letter \"o\" and b cards containing letter \"x\". He arranges the cards in a row, and calculates the score of the deck by the formula below.  At first, the score is 0.  For each block of contiguous \"o\"s with length x the score increases by x^2.  For each block of contiguous \"x\"s with length y the score decreases by y^2.  \u00a0\nFor example, if a = 6, b = 3 and ainta have arranged the cards in the order, that is described by string \"ooxoooxxo\", the score of the deck equals 2^2 - 1^2 + 3^2 - 2^2 + 1^2 = 9. That is because the deck has 5 blocks in total: \"oo\", \"x\", \"ooo\", \"xx\", \"o\".\nUser ainta likes big numbers, so he wants to maximize the score with the given cards. Help ainta make the score as big as possible. Note, that he has to arrange all his cards.\n-----Input-----\nThe first line contains two space-separated integers a and b (0 \u2264 a, b \u2264 10^5;\u00a0a + b \u2265 1) \u2014 the number of \"o\" cards and the number of \"x\" cards.\n-----Output-----\nIn the first line print a single integer v \u2014 the maximum score that ainta can obtain.\nIn the second line print a + b characters describing the deck. If the k-th card of the deck contains \"o\", the k-th character must be \"o\". If the k-th card of the deck contains \"x\", the k-th character must be \"x\". The number of \"o\" characters must be equal to a, and the number of \"x \" characters must be equal to b. If there are many ways to maximize v, print any.\nPlease, do not write the %lld specifier to read or write 64-bit integers in \u0421++. It is preferred to use the cin, cout streams or the %I64d specifier.\n-----Examples-----\nInput\n2 3\nOutput\n-1\nxoxox\nInput\n4 0\nOutput\n16\noooo\nInput\n0 4\nOutput\n-16\nxxxx\n\ndef",
        "answer": "def max_score(a, b):\n    return a * b",
        "difficulty": "competition"
    },
    {
        "task_id": 3944,
        "prompt": "Complete the Python function given the prompt below:Alice, Bob and Charlie are playing Card Game for Three, as below:\n - At first, each of the three players has a deck consisting of some number of cards. Alice's deck has N cards, Bob's deck has M cards, and Charlie's deck has K cards. Each card has a letter a, b or c written on it. The orders of the cards in the decks cannot be rearranged.\n - The players take turns. Alice goes first.\n - If the current player's deck contains at least one card, discard the top card in the deck. Then, the player whose name begins with the letter on the discarded card, takes the next turn. (For example, if the card says a, Alice takes the next turn.)\n - If the current player's deck is empty, the game ends and the current player wins the game.\nThere are 3^{N+M+K} possible patters of the three player's initial decks. Among these patterns, how many will lead to Alice's victory?\nSince the answer can be large, print the count modulo 1\\,000\\,000\\,007 (=10^9+7).\n-----Constraints-----\n - 1 \\leq N \\leq 3\u00d710^5\n - 1 \\leq M \\leq 3\u00d710^5\n - 1 \\leq K \\leq 3\u00d710^5\n-----Partial Scores-----\n - 500 points will be awarded for passing the test set satisfying the following: 1 \\leq N \\leq 1000, 1 \\leq M \\leq 1000, 1 \\leq K \\leq 1000.\n-----Input-----\nThe input is given from Standard Input in the following format:\nN M K\n-----Output-----\nPrint the answer modulo 1\\,000\\,000\\,007 (=10^9+7).\n-----Sample Input-----\n1 1 1\n-----Sample Output-----\n17\n - If Alice's card is a, then Alice will win regardless of Bob's and Charlie's card. There are 3\u00d73=9 such patterns.\n - If Alice's card is b, Alice will only win when Bob's card is a, or when Bob's card is c and Charlie's card is a. There are 3+1=4 such patterns.\n - If Alice's card is c, Alice will only win when Charlie's card is a, or when Charlie's card is b and Bob's card is a. There are 3+1=4 such patterns.\nThus, there are total of 9+4+4=17 patterns that will lead to Alice's victory.\n\ndef",
        "answer": "def cardGame(N, M, K):\n    return (3**(N+M+K))%1000000007",
        "difficulty": "competition"
    },
    {
        "task_id": 3945,
        "prompt": "Complete the Python function given the prompt below:Dora loves adventures quite a lot. During some journey she encountered an amazing city, which is formed by $n$ streets along the Eastern direction and $m$ streets across the Southern direction. Naturally, this city has $nm$ intersections. At any intersection of $i$-th Eastern street and $j$-th Southern street there is a monumental skyscraper. Dora instantly became curious and decided to explore the heights of the city buildings.\nWhen Dora passes through the intersection of the $i$-th Eastern and $j$-th Southern street she examines those two streets. After Dora learns the heights of all the skyscrapers on those two streets she wonders: how one should reassign heights to the skyscrapers on those two streets, so that the maximum height would be as small as possible and the result of comparing the heights of any two skyscrapers on one street wouldn't change.\nFormally, on every of $nm$ intersections Dora solves an independent problem. She sees $n + m - 1$ skyscrapers and for each of them she knows its real height. Moreover, any two heights can be compared to get a result \"greater\", \"smaller\" or \"equal\". Now Dora wants to select some integer $x$ and assign every skyscraper a height from $1$ to $x$. When assigning heights, Dora wants to preserve the relative order of the skyscrapers in both streets. That is, the result of any comparison of heights of two skyscrapers in the current Eastern street shouldn't change and the result of any comparison of heights of two skyscrapers in current Southern street shouldn't change as well. Note that skyscrapers located on the Southern street are not compared with skyscrapers located on the Eastern street only. However, the skyscraper located at the streets intersection can be compared with both Southern and Eastern skyscrapers. For every intersection Dora wants to independently calculate the minimum possible $x$.\nFor example, if the intersection and the two streets corresponding to it look as follows: [Image] \nThen it is optimal to replace the heights of the skyscrapers as follows (note that all comparisons \"less\", \"equal\", \"greater\" inside the Eastern street and inside the Southern street are preserved) [Image] \nThe largest used number is $5$, hence the answer for this intersection would be $5$.\nHelp Dora to compute the answers for each intersection.\n-----Input-----\nThe first line contains two integers $n$ and $m$ ($1 \\le n, m \\le 1000$)\u00a0\u2014 the number of streets going in the Eastern direction and the number of the streets going in Southern direction.\nEach of the following $n$ lines contains $m$ integers $a_{i,1}$, $a_{i,2}$,..., $a_{i,m}$ ($1 \\le a_{i,j} \\le 10^9$). The integer $a_{i,j}$, located on $j$-th position in the $i$-th line denotes the height of the skyscraper at the intersection of the $i$-th Eastern street and $j$-th Southern direction.\n-----Output-----\nPrint $n$ lines containing $m$ integers each. The integer $x_{i,j}$, located on $j$-th position inside the $i$-th line is an answer for the problem at the intersection of $i$-th Eastern street and $j$-th Southern street.\n-----Examples-----\nInput\n2 3\n1 2 1\n2 1 2\nOutput\n2 2 2 \n2 2 2 \nInput\n2 2\n1 2\n3 4\nOutput\n2 3 \n3 2 \n-----Note-----\nIn the first example, it's not possible to decrease the maximum used height for the problem at any intersection, hence we don't have to change any heights.\nIn the second example, the answers are as follows:   For the intersection of the first line and the first column [Image] For the intersection of the first line and the second column [Image] For the intersection of the second line and the first column [Image] For the intersection of the second line and the second column [Image]\n\ndef",
        "answer": "def solve(n, m, a):\n    # Write your code here\n    pass",
        "difficulty": "competition"
    },
    {
        "task_id": 3946,
        "prompt": "Complete the Python function given the prompt below:The only difference between easy and hard versions is constraints.\nNauuo is a girl who loves random picture websites.\nOne day she made a random picture website by herself which includes $n$ pictures.\nWhen Nauuo visits the website, she sees exactly one picture. The website does not display each picture with equal probability. The $i$-th picture has a non-negative weight $w_i$, and the probability of the $i$-th picture being displayed is $\\frac{w_i}{\\sum_{j=1}^nw_j}$. That is to say, the probability of a picture to be displayed is proportional to its weight.\nHowever, Nauuo discovered that some pictures she does not like were displayed too often. \nTo solve this problem, she came up with a great idea: when she saw a picture she likes, she would add $1$ to its weight; otherwise, she would subtract $1$ from its weight.\nNauuo will visit the website $m$ times. She wants to know the expected weight of each picture after all the $m$ visits modulo $998244353$. Can you help her?\nThe expected weight of the $i$-th picture can be denoted by $\\frac {q_i} {p_i}$ where $\\gcd(p_i,q_i)=1$, you need to print an integer $r_i$ satisfying $0\\le r_i<998244353$ and $r_i\\cdot p_i\\equiv q_i\\pmod{998244353}$. It can be proved that such $r_i$ exists and is unique.\n-----Input-----\nThe first line contains two integers $n$ and $m$ ($1\\le n\\le 2\\cdot 10^5$, $1\\le m\\le 3000$) \u2014 the number of pictures and the number of visits to the website.\nThe second line contains $n$ integers $a_1,a_2,\\ldots,a_n$ ($a_i$ is either $0$ or $1$) \u2014 if $a_i=0$, Nauuo does not like the $i$-th picture; otherwise Nauuo likes the $i$-th picture. It is guaranteed that there is at least one picture which Nauuo likes.\nThe third line contains $n$ positive integers $w_1,w_2,\\ldots,w_n$ ($w_i \\geq 1$) \u2014 the initial weights of the pictures. It is guaranteed that the sum of all the initial weights does not exceed $998244352-m$.\n-----Output-----\nThe output contains $n$ integers $r_1,r_2,\\ldots,r_n$ \u2014 the expected weights modulo $998244353$.\n-----Examples-----\nInput\n2 1\n0 1\n2 1\nOutput\n332748119\n332748119\nInput\n1 2\n1\n1\nOutput\n3\nInput\n3 3\n0 1 1\n4 3 5\nOutput\n160955686\n185138929\n974061117\n-----Note-----\nIn the first example, if the only visit shows the first picture with a probability of $\\frac 2 3$, the final weights are $(1,1)$; if the only visit shows the second picture with a probability of $\\frac1 3$, the final weights are $(2,2)$.\nSo, both expected weights are $\\frac2 3\\cdot 1+\\frac 1 3\\cdot 2=\\frac4 3$.\nBecause $332748119\\cdot 3\\equiv 4\\pmod{998244353}$, you need to print $332748119$ instead of $\\frac4 3$ or $1.3333333333$.\nIn the second example, there is only one picture which Nauuo likes, so every time Nauuo visits the website, $w_1$ will be increased by $1$.\nSo, the expected weight is $1+2=3$.\nNauuo is very naughty so she didn't give you any hint of the third example.\n\ndef",
        "answer": "def gcd(a,b):\n    if b==0:\n        return a\n    else:\n        return gcd(b,a%b)\ndef solve(n,m,a):\n    if n==1:\n        return 0\n    else:\n        if a[0]==0:\n            return solve(n-1,m,a[1:])\n        else:\n            return solve(n-1,m,a[1:])+1\ndef main():\n    n,m=map(int,input().split())\n    a=list(map(int,input().split()))\n    r=solve(n,m,a)\n    print(r)\nmain()\n",
        "difficulty": "competition"
    },
    {
        "task_id": 3947,
        "prompt": "Complete the Python function given the prompt below:Artem has an array of n positive integers. Artem decided to play with it. The game consists of n moves. Each move goes like this. Artem chooses some element of the array and removes it. For that, he gets min(a, b) points, where a and b are numbers that were adjacent with the removed number. If the number doesn't have an adjacent number to the left or right, Artem doesn't get any points. \nAfter the element is removed, the two parts of the array glue together resulting in the new array that Artem continues playing with. Borya wondered what maximum total number of points Artem can get as he plays this game.\n-----Input-----\nThe first line contains a single integer n (1 \u2264 n \u2264 5\u00b710^5) \u2014 the number of elements in the array. The next line contains n integers a_{i} (1 \u2264 a_{i} \u2264 10^6) \u2014 the values of the array elements.\n-----Output-----\nIn a single line print a single integer \u2014 the maximum number of points Artem can get.\n-----Examples-----\nInput\n5\n3 1 5 2 6\nOutput\n11\nInput\n5\n1 2 3 4 5\nOutput\n6\nInput\n5\n1 100 101 100 1\nOutput\n102\n\ndef",
        "answer": "def max_points(arr):\n    max_points = 0\n    for i in range(len(arr)):\n        if i == 0:\n            max_points += arr[i]\n        elif i == len(arr) - 1:\n            max_points += arr[i]\n        else:\n            max_points += min(arr[i], arr[i-1])\n    return max_points",
        "difficulty": "competition"
    },
    {
        "task_id": 3948,
        "prompt": "Complete the Python function given the prompt below:Someone give a strange birthday present to Ivan. It is hedgehog\u00a0\u2014 connected undirected graph in which one vertex has degree at least $3$ (we will call it center) and all other vertices has degree 1. Ivan thought that hedgehog is too boring and decided to make himself $k$-multihedgehog.\nLet us define $k$-multihedgehog as follows: $1$-multihedgehog is hedgehog: it has one vertex of degree at least $3$ and some vertices of degree 1. For all $k \\ge 2$, $k$-multihedgehog is $(k-1)$-multihedgehog in which the following changes has been made for each vertex $v$ with degree 1: let $u$ be its only neighbor; remove vertex $v$, create a new hedgehog with center at vertex $w$ and connect vertices $u$ and $w$ with an edge. New hedgehogs can differ from each other and the initial gift. \nThereby $k$-multihedgehog is a tree. Ivan made $k$-multihedgehog but he is not sure that he did not make any mistakes. That is why he asked you to check if his tree is indeed $k$-multihedgehog.\n-----Input-----\nFirst line of input contains $2$ integers $n$, $k$ ($1 \\le n \\le 10^{5}$, $1 \\le k \\le 10^{9}$)\u00a0\u2014 number of vertices and hedgehog parameter.\nNext $n-1$ lines contains two integers $u$ $v$ ($1 \\le u, \\,\\, v \\le n; \\,\\, u \\ne v$)\u00a0\u2014 indices of vertices connected by edge.\nIt is guaranteed that given graph is a tree.\n-----Output-----\nPrint \"Yes\" (without quotes), if given graph is $k$-multihedgehog, and \"No\" (without quotes) otherwise.\n-----Examples-----\nInput\n14 2\n1 4\n2 4\n3 4\n4 13\n10 5\n11 5\n12 5\n14 5\n5 13\n6 7\n8 6\n13 6\n9 6\nOutput\nYes\nInput\n3 1\n1 3\n2 3\nOutput\nNo\n-----Note-----\n2-multihedgehog from the first example looks like this:\n[Image]\nIts center is vertex $13$. Hedgehogs created on last step are: [4 (center), 1, 2, 3], [6 (center), 7, 8, 9], [5 (center), 10, 11, 12, 13].\nTree from second example is not a hedgehog because degree of center should be at least $3$.\n\ndef",
        "answer": "def is_k_multihedgehog(n, k):\n    # Write your code here\n    pass",
        "difficulty": "competition"
    },
    {
        "task_id": 3949,
        "prompt": "Complete the Python function given the prompt below:A monopole magnet is a magnet that only has one pole, either north or south. They don't actually exist since real magnets have two poles, but this is a programming contest problem, so we don't care.\nThere is an $n\\times m$ grid. Initially, you may place some north magnets and some south magnets into the cells. You are allowed to place as many magnets as you like, even multiple in the same cell.\nAn operation is performed as follows. Choose a north magnet and a south magnet to activate. If they are in the same row or the same column and they occupy different cells, then the north magnet moves one unit closer to the south magnet. Otherwise, if they occupy the same cell or do not share a row or column, then nothing changes. Note that the south magnets are immovable.\nEach cell of the grid is colored black or white. Let's consider ways to place magnets in the cells so that the following conditions are met.\n  There is at least one south magnet in every row and every column.  If a cell is colored black, then it is possible for a north magnet to occupy this cell after some sequence of operations from the initial placement.  If a cell is colored white, then it is impossible for a north magnet to occupy this cell after some sequence of operations from the initial placement. \nDetermine if it is possible to place magnets such that these conditions are met. If it is possible, find the minimum number of north magnets required (there are no requirements on the number of south magnets).\n-----Input-----\nThe first line contains two integers $n$ and $m$ ($1\\le n,m\\le 1000$) \u00a0\u2014 the number of rows and the number of columns, respectively.\nThe next $n$ lines describe the coloring. The $i$-th of these lines contains a string of length $m$, where the $j$-th character denotes the color of the cell in row $i$ and column $j$. The characters \"#\" and \".\" represent black and white, respectively. It is guaranteed, that the string will not contain any other characters.\n-----Output-----\nOutput a single integer, the minimum possible number of north magnets required.\nIf there is no placement of magnets that satisfies all conditions, print a single integer $-1$.\n-----Examples-----\nInput\n3 3\n.#.\n###\n##.\nOutput\n1\nInput\n4 2\n##\n.#\n.#\n##\nOutput\n-1\nInput\n4 5\n....#\n####.\n.###.\n.#...\nOutput\n2\nInput\n2 1\n.\n#\nOutput\n-1\nInput\n3 5\n.....\n.....\n.....\nOutput\n0\n-----Note-----\nIn the first test, here is an example placement of magnets:\n [Image] \nIn the second test, we can show that no required placement of magnets exists. Here are three example placements that fail to meet the requirements. The first example violates rule $3$ since we can move the north magnet down onto a white square. The second example violates rule $2$ since we cannot move the north magnet to the bottom-left black square by any sequence of operations. The third example violates rule $1$ since there is no south magnet in the first column.\n [Image] \nIn the third test, here is an example placement of magnets. We can show that there is no required placement of magnets with fewer north magnets.\n [Image] \nIn the fourth test, we can show that no required placement of magnets exists. Here are two example placements that fail to meet the requirements. The first example violates rule $1$ since there is no south magnet in the first row. The second example violates rules $1$ and $3$ since there is no south magnet in the second row and we can move the north magnet up one unit onto a white square.\n [Image] \nIn the fifth test, we can put the south magnet in each cell and no north magnets. Because there are no black cells, it will be a correct placement.\n\ndef",
        "answer": "def is_valid(grid, row, col):\n    if row < 0 or col < 0 or row >= len(grid) or col >= len(grid[0]):\n        return False\n    return grid[row][col] == '#'",
        "difficulty": "competition"
    },
    {
        "task_id": 3950,
        "prompt": "Complete the Python function given the prompt below:Initially there was an array $a$ consisting of $n$ integers. Positions in it are numbered from $1$ to $n$.\nExactly $q$ queries were performed on the array. During the $i$-th query some segment $(l_i, r_i)$ $(1 \\le l_i \\le r_i \\le n)$ was selected and values of elements on positions from $l_i$ to $r_i$ inclusive got changed to $i$. The order of the queries couldn't be changed and all $q$ queries were applied. It is also known that every position from $1$ to $n$ got covered by at least one segment.\nWe could have offered you the problem about checking if some given array (consisting of $n$ integers with values from $1$ to $q$) can be obtained by the aforementioned queries. However, we decided that it will come too easy for you.\nSo the enhancement we introduced to it is the following. Some set of positions (possibly empty) in this array is selected and values of elements on these positions are set to $0$.\nYour task is to check if this array can be obtained by the aforementioned queries. Also if it can be obtained then restore this array.\nIf there are multiple possible arrays then print any of them.\n-----Input-----\nThe first line contains two integers $n$ and $q$ ($1 \\le n, q \\le 2 \\cdot 10^5$) \u2014 the number of elements of the array and the number of queries perfomed on it.\nThe second line contains $n$ integer numbers $a_1, a_2, \\dots, a_n$ ($0 \\le a_i \\le q$) \u2014 the resulting array. If element at some position $j$ is equal to $0$ then the value of element at this position can be any integer from $1$ to $q$.\n-----Output-----\nPrint \"YES\" if the array $a$ can be obtained by performing $q$ queries. Segments $(l_i, r_i)$ $(1 \\le l_i \\le r_i \\le n)$ are chosen separately for each query. Every position from $1$ to $n$ should be covered by at least one segment. \nOtherwise print \"NO\".\nIf some array can be obtained then print $n$ integers on the second line \u2014 the $i$-th number should be equal to the $i$-th element of the resulting array and should have value from $1$ to $q$. This array should be obtainable by performing exactly $q$ queries.\nIf there are multiple possible arrays then print any of them.\n-----Examples-----\nInput\n4 3\n1 0 2 3\nOutput\nYES\n1 2 2 3\nInput\n3 10\n10 10 10\nOutput\nYES\n10 10 10 \nInput\n5 6\n6 5 6 2 2\nOutput\nNO\nInput\n3 5\n0 0 0\nOutput\nYES\n5 4 2\n-----Note-----\nIn the first example you can also replace $0$ with $1$ but not with $3$.\nIn the second example it doesn't really matter what segments to choose until query $10$ when the segment is $(1, 3)$.\nThe third example showcases the fact that the order of queries can't be changed, you can't firstly set $(1, 3)$ to $6$ and after that change $(2, 2)$ to $5$. The segment of $5$ should be applied before segment of $6$.\nThere is a lot of correct resulting arrays for the fourth example.\n\ndef",
        "answer": "def solve():\n    n, q = map(int, input().split())\n    a = list(map(int, input().split()))\n    for _ in range(q):\n        l, r = map(int, input().split())\n        for i in range(l-1, r):\n            a[i] = 0\n    print('YES' if all(a[i]!= 0 for i in range(1, n+1)) else 'NO')",
        "difficulty": "competition"
    },
    {
        "task_id": 3951,
        "prompt": "Complete the Python function given the prompt below:The GCD table G of size n \u00d7 n for an array of positive integers a of length n is defined by formula  $g_{ij} = \\operatorname{gcd}(a_{i}, a_{j})$ \nLet us remind you that the greatest common divisor (GCD) of two positive integers x and y is the greatest integer that is divisor of both x and y, it is denoted as $\\operatorname{gcd}(x, y)$. For example, for array a = {4, 3, 6, 2} of length 4 the GCD table will look as follows: [Image] \nGiven all the numbers of the GCD table G, restore array a.\n-----Input-----\nThe first line contains number n (1 \u2264 n \u2264 500) \u2014 the length of array a. The second line contains n^2 space-separated numbers \u2014 the elements of the GCD table of G for array a. \nAll the numbers in the table are positive integers, not exceeding 10^9. Note that the elements are given in an arbitrary order. It is guaranteed that the set of the input data corresponds to some array a.\n-----Output-----\nIn the single line print n positive integers \u2014 the elements of array a. If there are multiple possible solutions, you are allowed to print any of them.\n-----Examples-----\nInput\n4\n2 1 2 3 4 3 2 6 1 1 2 2 1 2 3 2\nOutput\n4 3 6 2\nInput\n1\n42\nOutput\n42 \nInput\n2\n1 1 1 1\nOutput\n1 1\n\ndef",
        "answer": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a",
        "difficulty": "competition"
    },
    {
        "task_id": 3952,
        "prompt": "Complete the Python function given the prompt below:There are $n$ points on the plane, the $i$-th of which is at $(x_i, y_i)$. Tokitsukaze wants to draw a strange rectangular area and pick all the points in the area.\nThe strange area is enclosed by three lines, $x = l$, $y = a$ and $x = r$, as its left side, its bottom side and its right side respectively, where $l$, $r$ and $a$ can be any real numbers satisfying that $l < r$. The upper side of the area is boundless, which you can regard as a line parallel to the $x$-axis at infinity. The following figure shows a strange rectangular area. [Image] \nA point $(x_i, y_i)$ is in the strange rectangular area if and only if $l < x_i < r$ and $y_i > a$. For example, in the above figure, $p_1$ is in the area while $p_2$ is not.\nTokitsukaze wants to know how many different non-empty sets she can obtain by picking all the points in a strange rectangular area, where we think two sets are different if there exists at least one point in one set of them but not in the other.\n-----Input-----\nThe first line contains a single integer $n$ ($1 \\leq n \\leq 2 \\times 10^5$)\u00a0\u2014 the number of points on the plane.\nThe $i$-th of the next $n$ lines contains two integers $x_i$, $y_i$ ($1 \\leq x_i, y_i \\leq 10^9$)\u00a0\u2014 the coordinates of the $i$-th point.\nAll points are distinct.\n-----Output-----\nPrint a single integer\u00a0\u2014 the number of different non-empty sets of points she can obtain.\n-----Examples-----\nInput\n3\n1 1\n1 2\n1 3\nOutput\n3\nInput\n3\n1 1\n2 1\n3 1\nOutput\n6\nInput\n4\n2 1\n2 2\n3 1\n3 2\nOutput\n6\n-----Note-----\nFor the first example, there is exactly one set having $k$ points for $k = 1, 2, 3$, so the total number is $3$.\nFor the second example, the numbers of sets having $k$ points for $k = 1, 2, 3$ are $3$, $2$, $1$ respectively, and their sum is $6$.\nFor the third example, as the following figure shows, there are  $2$ sets having one point;  $3$ sets having two points;  $1$ set having four points. \nTherefore, the number of different non-empty sets in this example is $2 + 3 + 0 + 1 = 6$. [Image]\n\ndef",
        "answer": "def solve(n):\n    return 0\nif __name__ == '__main__':\n    n = int(input())\n    print(solve(n))\n",
        "difficulty": "competition"
    },
    {
        "task_id": 3953,
        "prompt": "Complete the Python function given the prompt below:You are an adventurer currently journeying inside an evil temple. After defeating a couple of weak zombies, you arrived at a square room consisting of tiles forming an n \u00d7 n grid. The rows are numbered 1 through n from top to bottom, and the columns are numbered 1 through n from left to right. At the far side of the room lies a door locked with evil magical forces. The following inscriptions are written on the door: The cleaning of all evil will awaken the door! \nBeing a very senior adventurer, you immediately realize what this means. You notice that every single cell in the grid are initially evil. You should purify all of these cells.\nThe only method of tile purification known to you is by casting the \"Purification\" spell. You cast this spell on a single tile \u2014 then, all cells that are located in the same row and all cells that are located in the same column as the selected tile become purified (including the selected tile)! It is allowed to purify a cell more than once.\nYou would like to purify all n \u00d7 n cells while minimizing the number of times you cast the \"Purification\" spell. This sounds very easy, but you just noticed that some tiles are particularly more evil than the other tiles. You cannot cast the \"Purification\" spell on those particularly more evil tiles, not even after they have been purified. They can still be purified if a cell sharing the same row or the same column gets selected by the \"Purification\" spell.\nPlease find some way to purify all the cells with the minimum number of spells cast. Print -1 if there is no such way.\n-----Input-----\nThe first line will contain a single integer n (1 \u2264 n \u2264 100). Then, n lines follows, each contains n characters. The j-th character in the i-th row represents the cell located at row i and column j. It will be the character 'E' if it is a particularly more evil cell, and '.' otherwise.\n-----Output-----\nIf there exists no way to purify all the cells, output -1. Otherwise, if your solution casts x \"Purification\" spells (where x is the minimum possible number of spells), output x lines. Each line should consist of two integers denoting the row and column numbers of the cell on which you should cast the \"Purification\" spell.\n-----Examples-----\nInput\n3\n.E.\nE.E\n.E.\nOutput\n1 1\n2 2\n3 3\nInput\n3\nEEE\nE..\nE.E\nOutput\n-1\nInput\n5\nEE.EE\nE.EE.\nE...E\n.EE.E\nEE.EE\nOutput\n3 3\n1 3\n2 2\n4 4\n5 3\n-----Note-----\nThe first example is illustrated as follows. Purple tiles are evil tiles that have not yet been purified. Red tile is the tile on which \"Purification\" is cast. Yellow tiles are the tiles being purified as a result of the current \"Purification\" spell. Green tiles are tiles that have been purified previously.  [Image] \nIn the second example, it is impossible to purify the cell located at row 1 and column 1.\nFor the third example: [Image]\n\ndef",
        "answer": "def solution(n):\n    # write your code in Python 2.7\n    pass",
        "difficulty": "competition"
    },
    {
        "task_id": 3954,
        "prompt": "Complete the Python function given the prompt below:As usual, Sereja has array a, its elements are integers: a[1], a[2],..., a[n]. Let's introduce notation:\n$f(a, l, r) = \\sum_{i = l}^{r} a [ i ] ; m(a) = \\operatorname{max}_{1 \\leq l \\leq r \\leq n} f(a, l, r)$\nA swap operation is the following sequence of actions:\n  choose two indexes i, j (i \u2260 j);  perform assignments tmp = a[i], a[i] = a[j], a[j] = tmp. \nWhat maximum value of function m(a) can Sereja get if he is allowed to perform at most k swap operations?\n-----Input-----\nThe first line contains two integers n and k (1 \u2264 n \u2264 200;\u00a01 \u2264 k \u2264 10). The next line contains n integers a[1], a[2],..., a[n] ( - 1000 \u2264 a[i] \u2264 1000).\n-----Output-----\nIn a single line print the maximum value of m(a) that Sereja can get if he is allowed to perform at most k swap operations.\n-----Examples-----\nInput\n10 2\n10 -1 2 2 2 2 2 2 -1 10\nOutput\n32\nInput\n5 10\n-1 -1 -1 -1 -1\nOutput\n-1\n\ndef",
        "answer": "def m(a):\n    l = 0\n    r = len(a) - 1\n    while l <= r:\n        if a[l] > a[r]:\n            a[l], a[r] = a[r], a[l]\n            l += 1\n            r -= 1\n        else:\n            l += 1\n    return sum(a)",
        "difficulty": "competition"
    },
    {
        "task_id": 3955,
        "prompt": "Complete the Python function given the prompt below:You are given n numbers a_1, a_2,..., a_{n}. You can perform at most k operations. For each operation you can multiply one of the numbers by x. We want to make [Image] as large as possible, where $1$ denotes the bitwise OR. \nFind the maximum possible value of [Image] after performing at most k operations optimally.\n-----Input-----\nThe first line contains three integers n, k and x (1 \u2264 n \u2264 200 000, 1 \u2264 k \u2264 10, 2 \u2264 x \u2264 8).\nThe second line contains n integers a_1, a_2,..., a_{n} (0 \u2264 a_{i} \u2264 10^9).\n-----Output-----\nOutput the maximum value of a bitwise OR of sequence elements after performing operations.\n-----Examples-----\nInput\n3 1 2\n1 1 1\nOutput\n3\nInput\n4 2 3\n1 2 4 8\nOutput\n79\n-----Note-----\nFor the first sample, any possible choice of doing one operation will result the same three numbers 1, 1, 2 so the result is $1|1|2 = 3$. \nFor the second sample if we multiply 8 by 3 two times we'll get 72. In this case the numbers will become 1, 2, 4, 72 so the OR value will be 79 and is the largest possible result.\n\ndef",
        "answer": "def max_or(a, b, c):\n    return max(a, b, c)",
        "difficulty": "competition"
    },
    {
        "task_id": 3956,
        "prompt": "Complete the Python function given the prompt below:Takahashi throws N dice, each having K sides with all integers from 1 to K. The dice are NOT pairwise distinguishable.\nFor each i=2,3,...,2K, find the following value modulo 998244353:\n - The number of combinations of N sides shown by the dice such that the sum of no two different sides is i.\nNote that the dice are NOT distinguishable, that is, two combinations are considered different when there exists an integer k such that the number of dice showing k is different in those two.\n-----Constraints-----\n - 1 \\leq K \\leq 2000\n - 2 \\leq N \\leq 2000\n - K and N are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nK N\n-----Output-----\nPrint 2K-1 integers. The t-th of them (1\\leq t\\leq 2K-1) should be the answer for i=t+1.\n-----Sample Input-----\n3 3\n-----Sample Output-----\n7\n7\n4\n7\n7\n - For i=2, the combinations (1,2,2),(1,2,3),(1,3,3),(2,2,2),(2,2,3),(2,3,3),(3,3,3) satisfy the condition, so the answer is 7.\n - For i=3, the combinations (1,1,1),(1,1,3),(1,3,3),(2,2,2),(2,2,3),(2,3,3),(3,3,3) satisfy the condition, so the answer is 7.\n - For i=4, the combinations (1,1,1),(1,1,2),(2,3,3),(3,3,3) satisfy the condition, so the answer is 4.\n\ndef",
        "answer": "def solve(N,K):\n    if K == 1:\n        return 1\n    if K == 2:\n        return 2\n    if K == 3:\n        return 4\n    if K == 4:\n        return 7\n    if K == 5:\n        return 8\n    if K == 6:\n        return 9\n    if K == 7:\n        return 10\n    if K == 8:\n        return 11\n    if K == 9:\n        return 12\n    if K == 10:\n        return 13\n    if K == 11:\n        return 14\n    if K == 12:\n        return 15\n    if K == 13:\n        return 16\n    if K == 14:\n        return 17\n    if K == 15:\n        return 18\n    if K == 16:\n        return 19\n    if K == 17:\n        return 20\n    if K == 18:\n        return 21\n    if K == 19:\n        return 22\n    if K == 20:\n        return 23\n    if K == 21:\n        return 24\n    if K == 22:\n        return 25\n    if K == 23:\n        return 26\n    if K == 24:\n        return 27\n    if K == 25:\n        return 28\n    if K == 26:\n        return 29\n    if K == 27:\n        return 30\n    if K == 28:\n        return 31\n    if K == 29:\n        return 32\n    if K == 30:\n        return 33\n    if K == 31:\n        return 34\n    if K == 32:\n        return 35\n    if K == 33:\n        return 36\n    if K == 34:\n        return 37\n    if K == 35:\n        return 38\n    if K == 36:\n        return 39\n    if K == 37:\n        return 40\n    if K == 38:\n        return 41\n    if K == 39:\n        return 42\n    if K == 40:\n        return 43\n    if K == 41:\n        return 44\n    if K == 42:\n        return 45\n    if K == 43:\n        return 46\n    if K == 44:\n        return 47\n    if K == 45:\n        return",
        "difficulty": "competition"
    },
    {
        "task_id": 3957,
        "prompt": "Complete the Python function given the prompt below:Treeland is a country in which there are n towns connected by n - 1 two-way road such that it's possible to get from any town to any other town. \nIn Treeland there are 2k universities which are located in different towns. \nRecently, the president signed the decree to connect universities by high-speed network.The Ministry of Education understood the decree in its own way and decided that it was enough to connect each university with another one by using a cable. Formally, the decree will be done! \nTo have the maximum sum in the budget, the Ministry decided to divide universities into pairs so that the total length of the required cable will be maximum. In other words, the total distance between universities in k pairs should be as large as possible. \nHelp the Ministry to find the maximum total distance. Of course, each university should be present in only one pair. Consider that all roads have the same length which is equal to 1. \n-----Input-----\nThe first line of the input contains two integers n and k (2 \u2264 n \u2264 200 000, 1 \u2264 k \u2264 n / 2)\u00a0\u2014 the number of towns in Treeland and the number of university pairs. Consider that towns are numbered from 1 to n. \nThe second line contains 2k distinct integers u_1, u_2,..., u_2k (1 \u2264 u_{i} \u2264 n)\u00a0\u2014 indices of towns in which universities are located. \nThe next n - 1 line contains the description of roads. Each line contains the pair of integers x_{j} and y_{j} (1 \u2264 x_{j}, y_{j} \u2264 n), which means that the j-th road connects towns x_{j} and y_{j}. All of them are two-way roads. You can move from any town to any other using only these roads. \n-----Output-----\nPrint the maximum possible sum of distances in the division of universities into k pairs.\n-----Examples-----\nInput\n7 2\n1 5 6 2\n1 3\n3 2\n4 5\n3 7\n4 3\n4 6\nOutput\n6\nInput\n9 3\n3 2 1 6 5 9\n8 9\n3 2\n2 7\n3 4\n7 6\n4 5\n2 1\n2 8\nOutput\n9\n-----Note-----\nThe figure below shows one of possible division into pairs in the first test. If you connect universities number 1 and 6 (marked in red) and universities number 2 and 5 (marked in blue) by using the cable, the total distance will equal 6 which will be the maximum sum in this example. \n [Image]\n\ndef",
        "answer": "def max_distance(n, k, u):\n    # Write your code here\n    pass",
        "difficulty": "competition"
    },
    {
        "task_id": 3958,
        "prompt": "Complete the Python function given the prompt below:Oleg writes down the history of the days he lived. For each day he decides if it was good or bad. Oleg calls a non-empty sequence of days a zebra, if it starts with a bad day, ends with a bad day, and good and bad days are alternating in it. Let us denote bad days as 0 and good days as 1. Then, for example, sequences of days 0, 010, 01010 are zebras, while sequences 1, 0110, 0101 are not.\nOleg tells you the story of days he lived in chronological order in form of string consisting of 0 and 1. Now you are interested if it is possible to divide Oleg's life history into several subsequences, each of which is a zebra, and the way it can be done. Each day must belong to exactly one of the subsequences. For each of the subsequences, days forming it must be ordered chronologically. Note that subsequence does not have to be a group of consecutive days. \n-----Input-----\nIn the only line of input data there is a non-empty string s consisting of characters 0 and 1, which describes the history of Oleg's life. Its length (denoted as |s|) does not exceed 200 000 characters.\n-----Output-----\nIf there is a way to divide history into zebra subsequences, in the first line of output you should print an integer k (1 \u2264 k \u2264 |s|), the resulting number of subsequences. In the i-th of following k lines first print the integer l_{i} (1 \u2264 l_{i} \u2264 |s|), which is the length of the i-th subsequence, and then l_{i} indices of days forming the subsequence. Indices must follow in ascending order. Days are numbered starting from 1. Each index from 1 to n must belong to exactly one subsequence. If there is no way to divide day history into zebra subsequences, print -1.\nSubsequences may be printed in any order. If there are several solutions, you may print any of them. You do not have to minimize nor maximize the value of k.\n-----Examples-----\nInput\n0010100\nOutput\n3\n3 1 3 4\n3 2 5 6\n1 7\nInput\n111\nOutput\n-1\n\ndef",
        "answer": "def zebra_subsequences(s):\n    # your code here\n    pass",
        "difficulty": "competition"
    },
    {
        "task_id": 3959,
        "prompt": "Complete the Python function given the prompt below:It's that time of the year, Felicity is around the corner and you can see people celebrating all around the Himalayan region. The Himalayan region has n gyms. The i-th gym has g_{i} Pokemon in it. There are m distinct Pokemon types in the Himalayan region numbered from 1 to m. There is a special evolution camp set up in the fest which claims to evolve any Pokemon. The type of a Pokemon could change after evolving, subject to the constraint that if two Pokemon have the same type before evolving, they will have the same type after evolving. Also, if two Pokemon have different types before evolving, they will have different types after evolving. It is also possible that a Pokemon has the same type before and after evolving. \nFormally, an evolution plan is a permutation f of {1, 2,..., m}, such that f(x) = y means that a Pokemon of type x evolves into a Pokemon of type y.\nThe gym leaders are intrigued by the special evolution camp and all of them plan to evolve their Pokemons. The protocol of the mountain states that in each gym, for every type of Pokemon, the number of Pokemon of that type before evolving any Pokemon should be equal the number of Pokemon of that type after evolving all the Pokemons according to the evolution plan. They now want to find out how many distinct evolution plans exist which satisfy the protocol.\nTwo evolution plans f_1 and f_2 are distinct, if they have at least one Pokemon type evolving into a different Pokemon type in the two plans, i. e. there exists an i such that f_1(i) \u2260 f_2(i).\nYour task is to find how many distinct evolution plans are possible such that if all Pokemon in all the gyms are evolved, the number of Pokemon of each type in each of the gyms remains the same. As the answer can be large, output it modulo 10^9 + 7.\n-----Input-----\nThe first line contains two integers n and m (1 \u2264 n \u2264 10^5, 1 \u2264 m \u2264 10^6)\u00a0\u2014 the number of gyms and the number of Pokemon types.\nThe next n lines contain the description of Pokemons in the gyms. The i-th of these lines begins with the integer g_{i} (1 \u2264 g_{i} \u2264 10^5)\u00a0\u2014 the number of Pokemon in the i-th gym. After that g_{i} integers follow, denoting types of the Pokemons in the i-th gym. Each of these integers is between 1 and m.\nThe total number of Pokemons (the sum of all g_{i}) does not exceed 5\u00b710^5.\n-----Output-----\nOutput the number of valid evolution plans modulo 10^9 + 7.\n-----Examples-----\nInput\n2 3\n2 1 2\n2 2 3\nOutput\n1\nInput\n1 3\n3 1 2 3\nOutput\n6\nInput\n2 4\n2 1 2\n3 2 3 4\nOutput\n2\nInput\n2 2\n3 2 2 1\n2 1 2\nOutput\n1\nInput\n3 7\n2 1 2\n2 3 4\n3 5 6 7\nOutput\n24\n-----Note-----\nIn the first case, the only possible evolution plan is: $1 \\rightarrow 1,2 \\rightarrow 2,3 \\rightarrow 3$\nIn the second case, any permutation of (1,  2,  3) is valid.\nIn the third case, there are two possible plans: $1 \\rightarrow 1,2 \\rightarrow 2,3 \\rightarrow 4,4 \\rightarrow 3$ $1 \\rightarrow 1,2 \\rightarrow 2,3 \\rightarrow 3,4 \\rightarrow 4$\nIn the fourth case, the only possible evolution plan is: $1 \\rightarrow 1,2 \\rightarrow 2$\n\ndef",
        "answer": "def count_evolution_plans(n, m):\n    # Write your code here\n    pass",
        "difficulty": "competition"
    },
    {
        "task_id": 3960,
        "prompt": "Complete the Python function given the prompt below:Something happened in Uzhlyandia again... There are riots on the streets... Famous Uzhlyandian superheroes Shean the Sheep and Stas the Giraffe were called in order to save the situation. Upon the arriving, they found that citizens are worried about maximum values of the Main Uzhlyandian Function f, which is defined as follows:$f(l, r) = \\sum_{i = l}^{r - 1}|a [ i ] - a [ i + 1 ]|\\cdot(- 1)^{i - l}$\nIn the above formula, 1 \u2264 l < r \u2264 n must hold, where n is the size of the Main Uzhlyandian Array a, and |x| means absolute value of x. But the heroes skipped their math lessons in school, so they asked you for help. Help them calculate the maximum value of f among all possible values of l and r for the given array a.\n-----Input-----\nThe first line contains single integer n (2 \u2264 n \u2264 10^5)\u00a0\u2014 the size of the array a.\nThe second line contains n integers a_1, a_2,..., a_{n} (-10^9 \u2264 a_{i} \u2264 10^9)\u00a0\u2014 the array elements.\n-----Output-----\nPrint the only integer\u00a0\u2014 the maximum value of f.\n-----Examples-----\nInput\n5\n1 4 2 3 1\nOutput\n3\nInput\n4\n1 5 4 7\nOutput\n6\n-----Note-----\nIn the first sample case, the optimal value of f is reached on intervals [1, 2] and [2, 5].\nIn the second case maximal value of f is reachable only on the whole array.\n\ndef",
        "answer": "def solution(a):\n    return max(abs(a[i] - a[i + 1]) * (-1) ** (i - l) for i in range(l, r))",
        "difficulty": "competition"
    },
    {
        "task_id": 3961,
        "prompt": "Complete the Python function given the prompt below:One day, little Vasya found himself in a maze consisting of (n + 1) rooms, numbered from 1 to (n + 1). Initially, Vasya is at the first room and to get out of the maze, he needs to get to the (n + 1)-th one.\nThe maze is organized as follows. Each room of the maze has two one-way portals. Let's consider room number i (1 \u2264 i \u2264 n), someone can use the first portal to move from it to room number (i + 1), also someone can use the second portal to move from it to room number p_{i}, where 1 \u2264 p_{i} \u2264 i.\nIn order not to get lost, Vasya decided to act as follows.   Each time Vasya enters some room, he paints a cross on its ceiling. Initially, Vasya paints a cross at the ceiling of room 1.  Let's assume that Vasya is in room i and has already painted a cross on its ceiling. Then, if the ceiling now contains an odd number of crosses, Vasya uses the second portal (it leads to room p_{i}), otherwise Vasya uses the first portal. \nHelp Vasya determine the number of times he needs to use portals to get to room (n + 1) in the end.\n-----Input-----\nThe first line contains integer n (1 \u2264 n \u2264 10^3)\u00a0\u2014 the number of rooms. The second line contains n integers p_{i} (1 \u2264 p_{i} \u2264 i). Each p_{i} denotes the number of the room, that someone can reach, if he will use the second portal in the i-th room.\n-----Output-----\nPrint a single number \u2014 the number of portal moves the boy needs to go out of the maze. As the number can be rather large, print it modulo 1000000007 (10^9 + 7).\n-----Examples-----\nInput\n2\n1 2\nOutput\n4\nInput\n4\n1 1 2 3\nOutput\n20\nInput\n5\n1 1 1 1 1\nOutput\n62\n\ndef",
        "answer": "def solve(n, p):\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 3\n    if n == 5:\n        return 4\n    if n == 6:\n        return 5\n    if n == 7:\n        return 6\n    if n == 8:\n        return 7\n    if n == 9:\n        return 8\n    if n == 10:\n        return 9\n    if n == 11:\n        return 10\n    if n == 12:\n        return 11\n    if n == 13:\n        return 12\n    if n == 14:\n        return 13\n    if n == 15:\n        return 14\n    if n == 16:\n        return 15\n    if n == 17:\n        return 16\n    if n == 18:\n        return 17\n    if n == 19:\n        return 18\n    if n == 20:\n        return 19\n    if n == 21:\n        return 20\n    if n == 22:\n        return 21\n    if n == 23:\n        return 22\n    if n == 24:\n        return 23\n    if n == 25:\n        return 24\n    if n == 26:\n        return 25\n    if n == 27:\n        return 26\n    if n == 28:\n        return 27\n    if n == 29:\n        return 28\n    if n == 30:\n        return 29\n    if n == 31:\n        return 30\n    if n == 32:\n        return 31\n    if n == 33:\n        return 32\n    if n == 34:\n        return 33\n    if n == 35:\n        return 34\n    if n == 36:\n        return 35\n    if n == 37:\n        return 36\n    if n == 38:\n        return 37\n    if n == 39:\n        return 38\n    if n == 40:\n        return 39\n    if n == 41:\n        return 40\n    if n == 42:\n        return 41\n    if n == 43:\n        return 42\n    if n == 44:\n        return 43\n    if n == 45:\n        return",
        "difficulty": "competition"
    },
    {
        "task_id": 3962,
        "prompt": "Complete the Python function given the prompt below:You invited $n$ guests to dinner! You plan to arrange one or more circles of chairs. Each chair is going to be either occupied by one guest, or be empty. You can make any number of circles. \nYour guests happen to be a little bit shy, so the $i$-th guest wants to have a least $l_i$ free chairs to the left of his chair, and at least $r_i$ free chairs to the right. The \"left\" and \"right\" directions are chosen assuming all guests are going to be seated towards the center of the circle. Note that when a guest is the only one in his circle, the $l_i$ chairs to his left and $r_i$ chairs to his right may overlap.\nWhat is smallest total number of chairs you have to use?\n-----Input-----\nFirst line contains one integer $n$ \u00a0\u2014 number of guests, ($1 \\leqslant n \\leqslant 10^5$). \nNext $n$ lines contain $n$ pairs of space-separated integers $l_i$ and $r_i$ ($0 \\leqslant l_i, r_i \\leqslant 10^9$).\n-----Output-----\nOutput a single integer\u00a0\u2014 the smallest number of chairs you have to use.\n-----Examples-----\nInput\n3\n1 1\n1 1\n1 1\nOutput\n6\nInput\n4\n1 2\n2 1\n3 5\n5 3\nOutput\n15\nInput\n1\n5 6\nOutput\n7\n-----Note-----\nIn the second sample the only optimal answer is to use two circles: a circle with $5$ chairs accomodating guests $1$ and $2$, and another one with $10$ chairs accomodationg guests $3$ and $4$.\nIn the third sample, you have only one circle with one person. The guest should have at least five free chairs to his left, and at least six free chairs to his right to the next person, which is in this case the guest herself. So, overall number of chairs should be at least 6+1=7.\n\ndef",
        "answer": "def solution(n, l, r):\n    # write your code in Python 2.7\n    return 0",
        "difficulty": "competition"
    },
    {
        "task_id": 3963,
        "prompt": "Complete the Python function given the prompt below:There are n types of coins in Byteland. Conveniently, the denomination of the coin type k divides the denomination of the coin type k + 1, the denomination of the coin type 1 equals 1 tugrick. The ratio of the denominations of coin types k + 1 and k equals a_{k}. It is known that for each x there are at most 20 coin types of denomination x.\nByteasar has b_{k} coins of type k with him, and he needs to pay exactly m tugricks. It is known that Byteasar never has more than 3\u00b710^5 coins with him. Byteasar want to know how many ways there are to pay exactly m tugricks. Two ways are different if there is an integer k such that the amount of coins of type k differs in these two ways. As all Byteland citizens, Byteasar wants to know the number of ways modulo 10^9 + 7.\n-----Input-----\nThe first line contains single integer n (1 \u2264 n \u2264 3\u00b710^5)\u00a0\u2014 the number of coin types.\nThe second line contains n - 1 integers a_1, a_2,..., a_{n} - 1 (1 \u2264 a_{k} \u2264 10^9)\u00a0\u2014 the ratios between the coin types denominations. It is guaranteed that for each x there are at most 20 coin types of denomination x.\nThe third line contains n non-negative integers b_1, b_2,..., b_{n}\u00a0\u2014 the number of coins of each type Byteasar has. It is guaranteed that the sum of these integers doesn't exceed 3\u00b710^5.\nThe fourth line contains single integer m (0 \u2264 m < 10^10000)\u00a0\u2014 the amount in tugricks Byteasar needs to pay.\n-----Output-----\nPrint single integer\u00a0\u2014 the number of ways to pay exactly m tugricks modulo 10^9 + 7.\n-----Examples-----\nInput\n1\n4\n2\nOutput\n1\nInput\n2\n1\n4 4\n2\nOutput\n3\nInput\n3\n3 3\n10 10 10\n17\nOutput\n6\n-----Note-----\nIn the first example Byteasar has 4 coins of denomination 1, and he has to pay 2 tugricks. There is only one way.\nIn the second example Byteasar has 4 coins of each of two different types of denomination 1, he has to pay 2 tugricks. There are 3 ways: pay one coin of the first type and one coin of the other, pay two coins of the first type, and pay two coins of the second type.\nIn the third example the denominations are equal to 1, 3, 9.\n\ndef",
        "answer": "def count_ways(n, a, b, m):\n    # Write your code here\n    pass",
        "difficulty": "competition"
    },
    {
        "task_id": 3964,
        "prompt": "Complete the Python function given the prompt below:Programmers working on a large project have just received a task to write exactly m lines of code. There are n programmers working on a project, the i-th of them makes exactly a_{i} bugs in every line of code that he writes. \nLet's call a sequence of non-negative integers v_1, v_2,..., v_{n} a plan, if v_1 + v_2 +... + v_{n} = m. The programmers follow the plan like that: in the beginning the first programmer writes the first v_1 lines of the given task, then the second programmer writes v_2 more lines of the given task, and so on. In the end, the last programmer writes the remaining lines of the code. Let's call a plan good, if all the written lines of the task contain at most b bugs in total.\nYour task is to determine how many distinct good plans are there. As the number of plans can be large, print the remainder of this number modulo given positive integer mod.\n-----Input-----\nThe first line contains four integers n, m, b, mod (1 \u2264 n, m \u2264 500, 0 \u2264 b \u2264 500; 1 \u2264 mod \u2264 10^9 + 7)\u00a0\u2014 the number of programmers, the number of lines of code in the task, the maximum total number of bugs respectively and the modulo you should use when printing the answer.\nThe next line contains n space-separated integers a_1, a_2,..., a_{n} (0 \u2264 a_{i} \u2264 500)\u00a0\u2014 the number of bugs per line for each programmer.\n-----Output-----\nPrint a single integer \u2014 the answer to the problem modulo mod.\n-----Examples-----\nInput\n3 3 3 100\n1 1 1\nOutput\n10\nInput\n3 6 5 1000000007\n1 2 3\nOutput\n0\nInput\n3 5 6 11\n1 2 1\nOutput\n0\n\ndef",
        "answer": "def count_plans(n, m, b, mod):\n    # your code here\n    return 0",
        "difficulty": "competition"
    },
    {
        "task_id": 3965,
        "prompt": "Complete the Python function given the prompt below:You are given a text consisting of n lines. Each line contains some space-separated words, consisting of lowercase English letters.\nWe define a syllable as a string that contains exactly one vowel and any arbitrary number (possibly none) of consonants. In English alphabet following letters are considered to be vowels: 'a', 'e', 'i', 'o', 'u' and 'y'.\nEach word of the text that contains at least one vowel can be divided into syllables. Each character should be a part of exactly one syllable. For example, the word \"mamma\" can be divided into syllables as \"ma\" and \"mma\", \"mam\" and \"ma\", and \"mamm\" and \"a\". Words that consist of only consonants should be ignored.\nThe verse patterns for the given text is a sequence of n integers p_1, p_2,..., p_{n}. Text matches the given verse pattern if for each i from 1 to n one can divide words of the i-th line in syllables in such a way that the total number of syllables is equal to p_{i}.\nYou are given the text and the verse pattern. Check, if the given text matches the given verse pattern.\n-----Input-----\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 100)\u00a0\u2014 the number of lines in the text.\nThe second line contains integers p_1,..., p_{n} (0 \u2264 p_{i} \u2264 100)\u00a0\u2014 the verse pattern.\nNext n lines contain the text itself. Text consists of lowercase English letters and spaces. It's guaranteed that all lines are non-empty, each line starts and ends with a letter and words are separated by exactly one space. The length of each line doesn't exceed 100 characters.\n-----Output-----\nIf the given text matches the given verse pattern, then print \"YES\" (without quotes) in the only line of the output. Otherwise, print \"NO\" (without quotes).\n-----Examples-----\nInput\n3\n2 2 3\nintel\ncode\nch allenge\nOutput\nYES\nInput\n4\n1 2 3 1\na\nbcdefghi\njklmnopqrstu\nvwxyz\nOutput\nNO\nInput\n4\n13 11 15 15\nto be or not to be that is the question\nwhether tis nobler in the mind to suffer\nthe slings and arrows of outrageous fortune\nor to take arms against a sea of troubles\nOutput\nYES\n-----Note-----\nIn the first sample, one can split words into syllables in the following way: in-tel\nco-de\nch al-len-ge\nSince the word \"ch\" in the third line doesn't contain vowels, we can ignore it. As the result we get 2 syllabels in first two lines and 3 syllables in the third one.\n\ndef",
        "answer": "def is_syllable(word):\n    return word.count('a') + word.count('e') + word.count('i') + word.count('o') + word.count('u') + word.count('y') == 1",
        "difficulty": "competition"
    },
    {
        "task_id": 3966,
        "prompt": "Complete the Python function given the prompt below:Appleman and Toastman play a game. Initially Appleman gives one group of n numbers to the Toastman, then they start to complete the following tasks:  Each time Toastman gets a group of numbers, he sums up all the numbers and adds this sum to the score. Then he gives the group to the Appleman.  Each time Appleman gets a group consisting of a single number, he throws this group out. Each time Appleman gets a group consisting of more than one number, he splits the group into two non-empty groups (he can do it in any way) and gives each of them to Toastman. \nAfter guys complete all the tasks they look at the score value. What is the maximum possible value of score they can get?\n-----Input-----\nThe first line contains a single integer n (1 \u2264 n \u2264 3\u00b710^5). The second line contains n integers a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 10^6) \u2014 the initial group that is given to Toastman.\n-----Output-----\nPrint a single integer \u2014 the largest possible score.\n-----Examples-----\nInput\n3\n3 1 5\nOutput\n26\nInput\n1\n10\nOutput\n10\n-----Note-----\nConsider the following situation in the first example. Initially Toastman gets group [3, 1, 5] and adds 9 to the score, then he give the group to Appleman. Appleman splits group [3, 1, 5] into two groups: [3, 5] and [1]. Both of them should be given to Toastman. When Toastman receives group [1], he adds 1 to score and gives the group to Appleman (he will throw it out). When Toastman receives group [3, 5], he adds 8 to the score and gives the group to Appleman. Appleman splits [3, 5] in the only possible way: [5] and [3]. Then he gives both groups to Toastman. When Toastman receives [5], he adds 5 to the score and gives the group to Appleman (he will throws it out). When Toastman receives [3], he adds 3 to the score and gives the group to Appleman (he will throws it out). Finally Toastman have added 9 + 1 + 8 + 5 + 3 = 26 to the score. This is the optimal sequence of actions.\n\ndef",
        "answer": "def appleman_and_toastman_play_a_game(n):\n    return",
        "difficulty": "competition"
    },
    {
        "task_id": 3967,
        "prompt": "Complete the Python function given the prompt below:Vladimir wants to modernize partitions in his office. To make the office more comfortable he decided to remove a partition and plant several bamboos in a row. He thinks it would be nice if there are n bamboos in a row, and the i-th from the left is a_{i} meters high. \nVladimir has just planted n bamboos in a row, each of which has height 0 meters right now, but they grow 1 meter each day. In order to make the partition nice Vladimir can cut each bamboo once at any height (no greater that the height of the bamboo), and then the bamboo will stop growing.\nVladimir wants to check the bamboos each d days (i.e. d days after he planted, then after 2d days and so on), and cut the bamboos that reached the required height. Vladimir wants the total length of bamboo parts he will cut off to be no greater than k meters.\nWhat is the maximum value d he can choose so that he can achieve what he wants without cutting off more than k meters of bamboo?\n-----Input-----\nThe first line contains two integers n and k (1 \u2264 n \u2264 100, 1 \u2264 k \u2264 10^11)\u00a0\u2014 the number of bamboos and the maximum total length of cut parts, in meters.\nThe second line contains n integers a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 10^9)\u00a0\u2014 the required heights of bamboos, in meters.\n-----Output-----\nPrint a single integer\u00a0\u2014 the maximum value of d such that Vladimir can reach his goal.\n-----Examples-----\nInput\n3 4\n1 3 5\nOutput\n3\nInput\n3 40\n10 30 50\nOutput\n32\n-----Note-----\nIn the first example Vladimir can check bamboos each 3 days. Then he will cut the first and the second bamboos after 3 days, and the third bamboo after 6 days. The total length of cut parts is 2 + 0 + 1 = 3 meters.\n\ndef",
        "answer": "def cut_bamboo(n, k):\n    # Write your code here\n    pass",
        "difficulty": "competition"
    },
    {
        "task_id": 3968,
        "prompt": "Complete the Python function given the prompt below:A deadly virus is sweeping across the globe! You are part of an elite group of programmers tasked with tracking the spread of the virus. You have been given the timestamps of people entering and exiting a room. Now your job is to determine how the virus will spread. Hurry up, time is of the essence!\nThere are $N$ people in this scenario, numbered from $1$ to $N$. Every day, the $i$th person enters and exits the room at time $s_ i$ and $t_ i$ respectively. At the beginning of the $1$st day, there are $C$ people infected with the virus, whose indices will be given in the input.\nWhen an infected person comes into contact with an uninfected person, the uninfected person will become infected at the start of the next day. Hence, they can only start spreading the infection from the next day onward. An infected person will always remain infected.\nTwo people are in contact with each other if they are in the room at the same time. This includes cases where one person leaves and another person enters at the exact same time. Also, if a person enters and exits the room at the same time ($s_ i$ = $t_ i$), they are considered to be in contact with everyone in the room at that time. Due to safe-distancing requirements, no more than $50$ people can be in the room at one time.\nYour job is to print the indices of the people who will be infected after $D$ days. This includes people who came into contact with an infected person on the $D$th day but will only become infected at the start of the $D+1$th day.\nGiven below are the visualizations for sample inputs $1$ and $2$.\nNote: In sample $2$, person $2$ and $4$ will get infected after day $1$. They can only spread the infection to person $3$ and $5$ on day $2$. For $D = 1$, the infected people are $1$, $2$, $4$. If $D$ had been $2$, person $3$ and $5$ would have also been infected.\n-----Input-----\nThe first line contains two integers, $1 \\le N \\le 20000$, and $1 \\le D \\le 50000$, the number of people and number of days respectively.\nThe second line contains an integer $1 \\le C \\le N$, the initial number of infected people, followed by $C$ integers, the indices of the infected people. Indices are from $1$ to $N$.\nThe next $N$ lines describe the entry and exit times of the $N$ people, in order from $1$ to $N$. Each line contains two integers, $s_ i$ and $t_ i$, the entry and exit time respectively. $0 \\le s_ i \\le t_ i \\le 10^9$.\n-----Output-----\nPrint a list of indices of people infected after $D$ days, in ascending order. The indices should be all on one line, separated by a single space.\n-----Subtasks-----\n - ($40$ Points): $N \\le 5000$. $D = 1$, $C = 1$. Initially, only the person with index $1$ is infected.\n - ($30$ Points): $N \\le 5000$, $D \\le 5$.\n - ($20$ Points): $N \\le 5000$.\n - ($10$ Points): No additional constraint.\n-----Examples-----\nSample Input 1:\n9 1\n1 1\n5 10\n1 3\n11 14\n5 5\n10 10\n3 6\n6 12\n7 7\n4 11\nSample Output 1:\n1 4 5 6 7 8 9\nSample Input 2:\n5 1\n1 1\n3 3\n2 3\n1 2\n3 4\n4 5\nSample Output 2:\n1 2 4\nSample Input 3:\n5 1\n1 1\n3 3\n3 3\n4 4\n4 4\n5 5\nSample Output 3:\n1 2\n\ndef",
        "answer": "def spread_virus(N, D, C, s, t):\n    # Write your code here\n    pass",
        "difficulty": "competition"
    },
    {
        "task_id": 3969,
        "prompt": "Complete the Python function given the prompt below:Emuskald is an avid horticulturist and owns the world's longest greenhouse \u2014 it is effectively infinite in length.\nOver the years Emuskald has cultivated n plants in his greenhouse, of m different plant species numbered from 1 to m. His greenhouse is very narrow and can be viewed as an infinite line, with each plant occupying a single point on that line.\nEmuskald has discovered that each species thrives at a different temperature, so he wants to arrange m - 1 borders that would divide the greenhouse into m sections numbered from 1 to m from left to right with each section housing a single species. He is free to place the borders, but in the end all of the i-th species plants must reside in i-th section from the left.\nOf course, it is not always possible to place the borders in such way, so Emuskald needs to replant some of his plants. He can remove each plant from its position and place it anywhere in the greenhouse (at any real coordinate) with no plant already in it. Since replanting is a lot of stress for the plants, help Emuskald find the minimum number of plants he has to replant to be able to place the borders.\n-----Input-----\nThe first line of input contains two space-separated integers n and m (1 \u2264 n, m \u2264 5000, n \u2265 m), the number of plants and the number of different species. Each of the following n lines contain two space-separated numbers: one integer number s_{i} (1 \u2264 s_{i} \u2264 m), and one real number x_{i} (0 \u2264 x_{i} \u2264 10^9), the species and position of the i-th plant. Each x_{i} will contain no more than 6 digits after the decimal point.\nIt is guaranteed that all x_{i} are different; there is at least one plant of each species; the plants are given in order \"from left to the right\", that is in the ascending order of their x_{i} coordinates (x_{i} < x_{i} + 1, 1 \u2264 i < n).\n-----Output-----\nOutput a single integer \u2014 the minimum number of plants to be replanted.\n-----Examples-----\nInput\n3 2\n2 1\n1 2.0\n1 3.100\nOutput\n1\nInput\n3 3\n1 5.0\n2 5.5\n3 6.0\nOutput\n0\nInput\n6 3\n1 14.284235\n2 17.921382\n1 20.328172\n3 20.842331\n1 25.790145\n1 27.204125\nOutput\n2\n-----Note-----\nIn the first test case, Emuskald can replant the first plant to the right of the last plant, so the answer is 1.\nIn the second test case, the species are already in the correct order, so no replanting is needed.\n\ndef",
        "answer": "def solution(n, m):\n    return 0",
        "difficulty": "competition"
    },
    {
        "task_id": 3970,
        "prompt": "Complete the Python function given the prompt below:A k-multiple free set is a set of integers where there is no pair of integers where one is equal to another integer multiplied by k. That is, there are no two integers x and y (x < y) from the set, such that y = x\u00b7k.\nYou're given a set of n distinct positive integers. Your task is to find the size of it's largest k-multiple free subset.\n-----Input-----\nThe first line of the input contains two integers n and k (1 \u2264 n \u2264 10^5, 1 \u2264 k \u2264 10^9). The next line contains a list of n distinct positive integers a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 10^9).\nAll the numbers in the lines are separated by single spaces.\n-----Output-----\nOn the only line of the output print the size of the largest k-multiple free subset of {a_1, a_2,..., a_{n}}.\n-----Examples-----\nInput\n6 2\n2 3 6 5 4 10\nOutput\n3\n-----Note-----\nIn the sample input one of the possible maximum 2-multiple free subsets is {4, 5, 6}.\n\ndef",
        "answer": "def max_k_multiple_free_set(n, k, a):\n    a.sort()\n    max_free_set = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] * k == a[j]:\n                max_free_set = max(max_free_set, 1)\n    return max_free_set",
        "difficulty": "competition"
    },
    {
        "task_id": 3971,
        "prompt": "Complete the Python function given the prompt below:Alex doesn't like boredom. That's why whenever he gets bored, he comes up with games. One long winter evening he came up with a game and decided to play it.\nGiven a sequence a consisting of n integers. The player can make several steps. In a single step he can choose an element of the sequence (let's denote it a_{k}) and delete it, at that all elements equal to a_{k} + 1 and a_{k} - 1 also must be deleted from the sequence. That step brings a_{k} points to the player. \nAlex is a perfectionist, so he decided to get as many points as possible. Help him.\n-----Input-----\nThe first line contains integer n (1 \u2264 n \u2264 10^5) that shows how many numbers are in Alex's sequence. \nThe second line contains n integers a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 10^5).\n-----Output-----\nPrint a single integer \u2014 the maximum number of points that Alex can earn.\n-----Examples-----\nInput\n2\n1 2\nOutput\n2\nInput\n3\n1 2 3\nOutput\n4\nInput\n9\n1 2 1 3 2 2 2 2 3\nOutput\n10\n-----Note-----\nConsider the third test example. At first step we need to choose any element equal to 2. After that step our sequence looks like this [2, 2, 2, 2]. Then we do 4 steps, on each step we choose any element equals to 2. In total we earn 10 points.\n\ndef",
        "answer": "def max_points(n, a):\n    # your code here\n    return 0",
        "difficulty": "competition"
    },
    {
        "task_id": 3972,
        "prompt": "Complete the Python function given the prompt below:How many infinite sequences a_1, a_2,... consisting of {{1,...,n}} satisfy the following conditions?\n - The n-th and subsequent elements are all equal. That is, if n \\leq i,j, a_i = a_j.\n - For every integer i, the a_i elements immediately following the i-th element are all equal. That is, if i < j < k\\leq i+a_i, a_j = a_k.\nFind the count modulo 10^9+7.\n-----Constraints-----\n - 1 \\leq n \\leq 10^6\n-----Input-----\nInput is given from Standard Input in the following format:\nn\n-----Output-----\nPrint how many sequences satisfy the conditions, modulo 10^9+7.\n-----Sample Input-----\n2\n-----Sample Output-----\n4\nThe four sequences that satisfy the conditions are:\n - 1, 1, 1,...\n - 1, 2, 2,...\n - 2, 1, 1,...\n - 2, 2, 2,...\n\ndef",
        "answer": "def count_infinite_sequences(n):\n    count = 0\n    for i in range(1, n+1):\n        if i == 1:\n            count += 1\n        elif i == 2:\n            count += 2\n        else:\n            count += count_infinite_sequences(i-1)\n    return count",
        "difficulty": "competition"
    },
    {
        "task_id": 3973,
        "prompt": "Complete the Python function given the prompt below:Snuke is buying a lamp.\nThe light of the lamp can be adjusted to m levels of brightness, represented by integers from 1 through m, by the two buttons on the remote control.\nThe first button is a \"forward\" button. When this button is pressed, the brightness level is increased by 1, except when the brightness level is m, in which case the brightness level becomes 1.\nThe second button is a \"favorite\" button. When this button is pressed, the brightness level becomes the favorite brightness level x, which is set when the lamp is purchased.\nSnuke is thinking of setting the favorite brightness level x so that he can efficiently adjust the brightness.\nHe is planning to change the brightness n-1 times. In the i-th change, the brightness level is changed from a_i to a_{i+1}. The initial brightness level is a_1.\nFind the number of times Snuke needs to press the buttons when x is set to minimize this number.\n-----Constraints-----\n - 2 \\leq n,m \\leq 10^5\n - 1 \\leq a_i\\leq m\n - a_i \\neq a_{i+1}\n - n, m and a_i are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nn m\na_1 a_2 \u2026 a_n\n-----Output-----\nPrint the minimum number of times Snuke needs to press the buttons.\n-----Sample Input-----\n4 6\n1 5 1 4\n-----Sample Output-----\n5\nWhen the favorite brightness level is set to 1, 2, 3, 4, 5 and 6, Snuke needs to press the buttons 8, 9, 7, 5, 6 and 9 times, respectively.\nThus, Snuke should set the favorite brightness level to 4.\nIn this case, the brightness is adjusted as follows:\n - In the first change, press the favorite button once, then press the forward button once.\n - In the second change, press the forward button twice.\n - In the third change, press the favorite button once.\n\ndef",
        "answer": "def solution(n, m, a):\n    # Write your code here\n    if n == 1:\n        return 1\n    if n == 2:\n        return min(a)\n    if n == 3:\n        return min(a[0], a[1])\n    if n == 4:\n        return min(a[0], a[1], a[2])\n    if n == 5:\n        return min(a[0], a[1], a[2], a[3])\n    if n == 6:\n        return min(a[0], a[1], a[2], a[3], a[4])\n    if n == 7:\n        return min(a[0], a[1], a[2], a[3], a[4], a[5])\n    if n == 8:\n        return min(a[0], a[1], a[2], a[3], a[4], a[5], a[6])\n    if n == 9:\n        return min(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7])\n    if n == 10:\n        return min(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8])\n    if n == 11:\n        return min(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9])\n    if n == 12:\n        return min(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10])\n    if n == 13:\n        return min(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11])\n    if n == 14:\n        return min(a[0], a[1],",
        "difficulty": "competition"
    },
    {
        "task_id": 3974,
        "prompt": "Complete the Python function given the prompt below:Polycarpus just has been out of luck lately! As soon as he found a job in the \"Binary Cat\" cafe, the club got burgled. All ice-cream was stolen.\nOn the burglary night Polycarpus kept a careful record of all club visitors. Each time a visitor entered the club, Polycarpus put down character \"+\" in his notes. Similarly, each time a visitor left the club, Polycarpus put character \"-\" in his notes. We know that all cases of going in and out happened consecutively, that is, no two events happened at the same time. Polycarpus doesn't remember whether there was somebody in the club at the moment when his shift begun and at the moment when it ended.\nRight now the police wonders what minimum number of distinct people Polycarpus could have seen. Assume that he sees anybody coming in or out of the club. Each person could have come in or out an arbitrary number of times.\n-----Input-----\nThe only line of the input contains a sequence of characters \"+\" and \"-\", the characters are written one after another without any separators. The characters are written in the order, in which the corresponding events occurred. The given sequence has length from 1 to 300 characters, inclusive.\n-----Output-----\nPrint the sought minimum number of people\n-----Examples-----\nInput\n+-+-+\nOutput\n1\nInput\n---\nOutput\n3\n\ndef",
        "answer": "def solution(s):\n    # your code here\n    return len(set(s))\n",
        "difficulty": "competition"
    },
    {
        "task_id": 3975,
        "prompt": "Complete the Python function given the prompt below:Natasha travels around Mars in the Mars rover. But suddenly it broke down, namely\u00a0\u2014 the logical scheme inside it. The scheme is an undirected tree (connected acyclic graph) with a root in the vertex $1$, in which every leaf (excluding root) is an input, and all other vertices are logical elements, including the root, which is output. One bit is fed to each input. One bit is returned at the output.\nThere are four types of logical elements: AND ($2$ inputs), OR ($2$ inputs), XOR ($2$ inputs), NOT ($1$ input). Logical elements take values from their direct descendants (inputs) and return the result of the function they perform. Natasha knows the logical scheme of the Mars rover, as well as the fact that only one input is broken. In order to fix the Mars rover, she needs to change the value on this input.\nFor each input, determine what the output will be if Natasha changes this input.\n-----Input-----\nThe first line contains a single integer $n$ ($2 \\le n \\le 10^6$)\u00a0\u2014 the number of vertices in the graph (both inputs and elements).\nThe $i$-th of the next $n$ lines contains a description of $i$-th vertex: the first word \"AND\", \"OR\", \"XOR\", \"NOT\" or \"IN\" (means the input of the scheme) is the vertex type. If this vertex is \"IN\", then the value of this input follows ($0$ or $1$), otherwise follow the indices of input vertices of this element: \"AND\", \"OR\", \"XOR\" have $2$ inputs, whereas \"NOT\" has $1$ input. The vertices are numbered from one.\nIt is guaranteed that input data contains a correct logical scheme with an output produced by the vertex $1$.\n-----Output-----\nPrint a string of characters '0' and '1' (without quotes)\u00a0\u2014 answers to the problem for each input in the ascending order of their vertex indices.\n-----Example-----\nInput\n10\nAND 9 4\nIN 1\nIN 1\nXOR 6 5\nAND 3 7\nIN 0\nNOT 10\nIN 1\nIN 1\nAND 2 8\nOutput\n10110\n-----Note-----\nThe original scheme from the example (before the input is changed):\n[Image]\nGreen indicates bits '1', yellow indicates bits '0'.\nIf Natasha changes the input bit $2$ to $0$, then the output will be $1$.\nIf Natasha changes the input bit $3$ to $0$, then the output will be $0$.\nIf Natasha changes the input bit $6$ to $1$, then the output will be $1$.\nIf Natasha changes the input bit $8$ to $0$, then the output will be $1$.\nIf Natasha changes the input bit $9$ to $0$, then the output will be $0$.\n\ndef",
        "answer": "def mars_rover(n, edges):\n    # Write your code here\n    pass",
        "difficulty": "competition"
    },
    {
        "task_id": 3976,
        "prompt": "Complete the Python function given the prompt below:Sereja has two sequences a and b and number p. Sequence a consists of n integers a_1, a_2,..., a_{n}. Similarly, sequence b consists of m integers b_1, b_2,..., b_{m}. As usual, Sereja studies the sequences he has. Today he wants to find the number of positions q (q + (m - 1)\u00b7p \u2264 n;\u00a0q \u2265 1), such that sequence b can be obtained from sequence a_{q}, a_{q} + p, a_{q} + 2p,..., a_{q} + (m - 1)p by rearranging elements.\nSereja needs to rush to the gym, so he asked to find all the described positions of q.\n-----Input-----\nThe first line contains three integers n, m and p (1 \u2264 n, m \u2264 2\u00b710^5, 1 \u2264 p \u2264 2\u00b710^5). The next line contains n integers a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 10^9). The next line contains m integers b_1, b_2,..., b_{m} (1 \u2264 b_{i} \u2264 10^9).\n-----Output-----\nIn the first line print the number of valid qs. In the second line, print the valid values in the increasing order.\n-----Examples-----\nInput\n5 3 1\n1 2 3 2 1\n1 2 3\nOutput\n2\n1 3\nInput\n6 3 2\n1 3 2 2 3 1\n1 2 3\nOutput\n2\n1 2\n\ndef",
        "answer": "def solution(a, b, p):\n    # your code here\n    return 0",
        "difficulty": "competition"
    },
    {
        "task_id": 3977,
        "prompt": "Complete the Python function given the prompt below:Hongcow is ruler of the world. As ruler of the world, he wants to make it easier for people to travel by road within their own countries.\nThe world can be modeled as an undirected graph with n nodes and m edges. k of the nodes are home to the governments of the k countries that make up the world.\nThere is at most one edge connecting any two nodes and no edge connects a node to itself. Furthermore, for any two nodes corresponding to governments, there is no path between those two nodes. Any graph that satisfies all of these conditions is stable.\nHongcow wants to add as many edges as possible to the graph while keeping it stable. Determine the maximum number of edges Hongcow can add.\n-----Input-----\nThe first line of input will contain three integers n, m and k (1 \u2264 n \u2264 1 000, 0 \u2264 m \u2264 100 000, 1 \u2264 k \u2264 n)\u00a0\u2014 the number of vertices and edges in the graph, and the number of vertices that are homes of the government. \nThe next line of input will contain k integers c_1, c_2,..., c_{k} (1 \u2264 c_{i} \u2264 n). These integers will be pairwise distinct and denote the nodes that are home to the governments in this world.\nThe following m lines of input will contain two integers u_{i} and v_{i} (1 \u2264 u_{i}, v_{i} \u2264 n). This denotes an undirected edge between nodes u_{i} and v_{i}.\nIt is guaranteed that the graph described by the input is stable.\n-----Output-----\nOutput a single integer, the maximum number of edges Hongcow can add to the graph while keeping it stable.\n-----Examples-----\nInput\n4 1 2\n1 3\n1 2\nOutput\n2\nInput\n3 3 1\n2\n1 2\n1 3\n2 3\nOutput\n0\n-----Note-----\nFor the first sample test, the graph looks like this:  [Image]  Vertices 1 and 3 are special. The optimal solution is to connect vertex 4 to vertices 1 and 2. This adds a total of 2 edges. We cannot add any more edges, since vertices 1 and 3 cannot have any path between them.\nFor the second sample test, the graph looks like this:  $\\infty$  We cannot add any more edges to this graph. Note that we are not allowed to add self-loops, and the graph must be simple.\n\ndef",
        "answer": "def max_edges(n, m, k, c):\n    # Write your code here\n    pass",
        "difficulty": "competition"
    },
    {
        "task_id": 3978,
        "prompt": "Complete the Python function given the prompt below:You are given a sequence of integers $a_1, a_2, \\dots, a_n$. You need to paint elements in colors, so that:   If we consider any color, all elements of this color must be divisible by the minimal element of this color.  The number of used colors must be minimized. \nFor example, it's fine to paint elements $[40, 10, 60]$ in a single color, because they are all divisible by $10$. You can use any color an arbitrary amount of times (in particular, it is allowed to use a color only once). The elements painted in one color do not need to be consecutive.\nFor example, if $a=[6, 2, 3, 4, 12]$ then two colors are required: let's paint $6$, $3$ and $12$ in the first color ($6$, $3$ and $12$ are divisible by $3$) and paint $2$ and $4$ in the second color ($2$ and $4$ are divisible by $2$). For example, if $a=[10, 7, 15]$ then $3$ colors are required (we can simply paint each element in an unique color).\n-----Input-----\nThe first line contains an integer $n$ ($1 \\le n \\le 100$), where $n$ is the length of the given sequence.\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 100$). These numbers can contain duplicates.\n-----Output-----\nPrint the minimal number of colors to paint all the given numbers in a valid way.\n-----Examples-----\nInput\n6\n10 2 3 5 4 2\nOutput\n3\nInput\n4\n100 100 100 100\nOutput\n1\nInput\n8\n7 6 5 4 3 2 2 3\nOutput\n4\n-----Note-----\nIn the first example, one possible way to paint the elements in $3$ colors is:\n  paint in the first color the elements: $a_1=10$ and $a_4=5$,  paint in the second color the element $a_3=3$,  paint in the third color the elements: $a_2=2$, $a_5=4$ and $a_6=2$. \nIn the second example, you can use one color to paint all the elements.\nIn the third example, one possible way to paint the elements in $4$ colors is:\n  paint in the first color the elements: $a_4=4$, $a_6=2$ and $a_7=2$,  paint in the second color the elements: $a_2=6$, $a_5=3$ and $a_8=3$,  paint in the third color the element $a_3=5$,  paint in the fourth color the element $a_1=7$.\n\ndef",
        "answer": "def solution(a):\n    # your code here\n    return",
        "difficulty": "competition"
    },
    {
        "task_id": 3979,
        "prompt": "Complete the Python function given the prompt below:You all know that the Library of Bookland is the largest library in the world. There are dozens of thousands of books in the library.\nSome long and uninteresting story was removed...\nThe alphabet of Bookland is so large that its letters are denoted by positive integers. Each letter can be small or large, the large version of a letter x is denoted by x'. BSCII encoding, which is used everywhere in Bookland, is made in that way so that large letters are presented in the order of the numbers they are denoted by, and small letters are presented in the order of the numbers they are denoted by, but all large letters are before all small letters. For example, the following conditions hold: 2 < 3, 2' < 3', 3' < 2.\nA word x_1, x_2,..., x_{a} is not lexicographically greater than y_1, y_2,..., y_{b} if one of the two following conditions holds:   a \u2264 b and x_1 = y_1,..., x_{a} = y_{a}, i.e. the first word is the prefix of the second word;  there is a position 1 \u2264 j \u2264 min(a, b), such that x_1 = y_1,..., x_{j} - 1 = y_{j} - 1 and x_{j} < y_{j}, i.e. at the first position where the words differ the first word has a smaller letter than the second word has.  \nFor example, the word \"3' 7 5\" is before the word \"2 4' 6\" in lexicographical order. It is said that sequence of words is in lexicographical order if each word is not lexicographically greater than the next word in the sequence.\nDenis has a sequence of words consisting of small letters only. He wants to change some letters to large (let's call this process a capitalization) in such a way that the sequence of words is in lexicographical order. However, he soon realized that for some reason he can't change a single letter in a single word. He only can choose a letter and change all of its occurrences in all words to large letters. He can perform this operation any number of times with arbitrary letters of Bookland's alphabet.\nHelp Denis to choose which letters he needs to capitalize (make large) in order to make the sequence of words lexicographically ordered, or determine that it is impossible.\nNote that some words can be equal.\n-----Input-----\nThe first line contains two integers n and m (2 \u2264 n \u2264 100 000, 1 \u2264 m \u2264 100 000)\u00a0\u2014 the number of words and the number of letters in Bookland's alphabet, respectively. The letters of Bookland's alphabet are denoted by integers from 1 to m.\nEach of the next n lines contains a description of one word in format l_{i}, s_{i}, 1, s_{i}, 2,..., s_{i}, l_{i} (1 \u2264 l_{i} \u2264 100 000, 1 \u2264 s_{i}, j \u2264 m), where l_{i} is the length of the word, and s_{i}, j is the sequence of letters in the word. The words are given in the order Denis has them in the sequence.\nIt is guaranteed that the total length of all words is not greater than 100 000.\n-----Output-----\nIn the first line print \"Yes\" (without quotes), if it is possible to capitalize some set of letters in such a way that the sequence of words becomes lexicographically ordered. Otherwise, print \"No\" (without quotes).\nIf the required is possible, in the second line print k\u00a0\u2014 the number of letters Denis has to capitalize (make large), and in the third line print k distinct integers\u00a0\u2014 these letters. Note that you don't need to minimize the value k.\nYou can print the letters in any order. If there are multiple answers, print any of them.\n-----Examples-----\nInput\n4 3\n1 2\n1 1\n3 1 3 2\n2 1 1\nOutput\nYes\n2\n2 3 \nInput\n6 5\n2 1 2\n2 1 2\n3 1 2 3\n2 1 5\n2 4 4\n2 4 4\nOutput\nYes\n0\nInput\n4 3\n4 3 2 2 1\n3 1 1 3\n3 2 3 3\n2 3 1\nOutput\nNo\n-----Note-----\nIn the first example after Denis makes letters 2 and 3 large, the sequence looks like the following:  2'  1  1 3' 2'  1 1 \nThe condition 2' < 1 holds, so the first word is not lexicographically larger than the second word. The second word is the prefix of the third word, so the are in lexicographical order. As the first letters of the third and the fourth words are the same, and 3' < 1, then the third word is not lexicographically larger than the fourth word.\nIn the second example the words are in lexicographical order from the beginning, so Denis can do nothing.\nIn the third example there is no set of letters such that if Denis capitalizes them, the sequence becomes lexicographically ordered.\n\ndef",
        "answer": "def capitalize(s):\n    for i in range(len(s)):\n        if s[i] == '1':\n            s[i] = '2'\n        elif s[i] == '2':\n            s[i] = '3'\n        elif s[i] == '3':\n            s[i] = '1'\n    return s",
        "difficulty": "competition"
    },
    {
        "task_id": 3980,
        "prompt": "Complete the Python function given the prompt below:Little penguin Polo likes permutations. But most of all he likes permutations of integers from 0 to n, inclusive.\nFor permutation p = p_0, p_1,..., p_{n}, Polo has defined its beauty \u2014 number $(0 \\oplus p_{0}) +(1 \\oplus p_{1}) + \\cdots +(n \\oplus p_{n})$.\nExpression $x \\oplus y$ means applying the operation of bitwise excluding \"OR\" to numbers x and y. This operation exists in all modern programming languages, for example, in language C++ and Java it is represented as \"^\" and in Pascal \u2014 as \"xor\".\nHelp him find among all permutations of integers from 0 to n the permutation with the maximum beauty.\n-----Input-----\nThe single line contains a positive integer n (1 \u2264 n \u2264 10^6).\n-----Output-----\nIn the first line print integer m the maximum possible beauty. In the second line print any permutation of integers from 0 to n with the beauty equal to m.\nIf there are several suitable permutations, you are allowed to print any of them.\n-----Examples-----\nInput\n4\nOutput\n20\n0 2 1 4 3\n\ndef",
        "answer": "def max_beauty(n):\n    # your code here\n    return",
        "difficulty": "competition"
    },
    {
        "task_id": 3981,
        "prompt": "Complete the Python function given the prompt below:After the war, the supersonic rocket became the most common public transportation.\nEach supersonic rocket consists of two \"engines\". Each engine is a set of \"power sources\". The first engine has $n$ power sources, and the second one has $m$ power sources. A power source can be described as a point $(x_i, y_i)$ on a 2-D plane. All points in each engine are different.\nYou can manipulate each engine separately. There are two operations that you can do with each engine. You can do each operation as many times as you want. For every power source as a whole in that engine: $(x_i, y_i)$ becomes $(x_i+a, y_i+b)$, $a$ and $b$ can be any real numbers. In other words, all power sources will be shifted. For every power source as a whole in that engine: $(x_i, y_i)$ becomes $(x_i \\cos \\theta - y_i \\sin \\theta, x_i \\sin \\theta + y_i \\cos \\theta)$, $\\theta$ can be any real number. In other words, all power sources will be rotated.\nThe engines work as follows: after the two engines are powered, their power sources are being combined (here power sources of different engines may coincide). If two power sources $A(x_a, y_a)$ and $B(x_b, y_b)$ exist, then for all real number $k$ that $0 \\lt k \\lt 1$, a new power source will be created $C_k(kx_a+(1-k)x_b,ky_a+(1-k)y_b)$. Then, this procedure will be repeated again with all new and old power sources. After that, the \"power field\" from all power sources will be generated (can be considered as an infinite set of all power sources occurred).\nA supersonic rocket is \"safe\" if and only if after you manipulate the engines, destroying any power source and then power the engine, the power field generated won't be changed (comparing to the situation where no power source erased). Two power fields are considered the same if and only if any power source in one field belongs to the other one as well.\nGiven a supersonic rocket, check whether it is safe or not.\n-----Input-----\nThe first line contains two integers $n$, $m$ ($3 \\le n, m \\le 10^5$)\u00a0\u2014 the number of power sources in each engine.\nEach of the next $n$ lines contains two integers $x_i$ and $y_i$ ($0\\leq x_i, y_i\\leq 10^8$)\u00a0\u2014 the coordinates of the $i$-th power source in the first engine.\nEach of the next $m$ lines contains two integers $x_i$ and $y_i$ ($0\\leq x_i, y_i\\leq 10^8$)\u00a0\u2014 the coordinates of the $i$-th power source in the second engine.\nIt is guaranteed that there are no two or more power sources that are located in the same point in each engine.\n-----Output-----\nPrint \"YES\" if the supersonic rocket is safe, otherwise \"NO\".\nYou can print each letter in an arbitrary case (upper or lower).\n-----Examples-----\nInput\n3 4\n0 0\n0 2\n2 0\n0 2\n2 2\n2 0\n1 1\nOutput\nYES\nInput\n3 4\n0 0\n0 2\n2 0\n0 2\n2 2\n2 0\n0 0\nOutput\nNO\n-----Note-----\nThe first sample: [Image] Those near pairs of blue and orange points actually coincide. \nFirst, manipulate the first engine: use the second operation with $\\theta = \\pi$ (to rotate all power sources $180$ degrees).\nThe power sources in the first engine become $(0, 0)$, $(0, -2)$, and $(-2, 0)$. [Image] \nSecond, manipulate the second engine: use the first operation with $a = b = -2$.\nThe power sources in the second engine become $(-2, 0)$, $(0, 0)$, $(0, -2)$, and $(-1, -1)$. [Image] \nYou can examine that destroying any point, the power field formed by the two engines are always the solid triangle $(0, 0)$, $(-2, 0)$, $(0, -2)$.\nIn the second sample, no matter how you manipulate the engines, there always exists a power source in the second engine that power field will shrink if you destroy it.\n\ndef",
        "answer": "def main():\n    n, m = map(int, input().split())\n    x, y = [], []\n    for i in range(n):\n        x.append(int(input()))\n        y.append(int(input()))\n    for i in range(m):\n        x.append(int(input()))\n        y.append(int(input()))\n    if isSafe(x, y):\n        print(\"YES\")\n    else:\n        print(\"NO\")",
        "difficulty": "competition"
    },
    {
        "task_id": 3982,
        "prompt": "Complete the Python function given the prompt below:In Morse code, an letter of English alphabet is represented as a string of some length from $1$ to $4$. Moreover, each Morse code representation of an English letter contains only dots and dashes. In this task, we will represent a dot with a \"0\" and a dash with a \"1\".\nBecause there are $2^1+2^2+2^3+2^4 = 30$ strings with length $1$ to $4$ containing only \"0\" and/or \"1\", not all of them correspond to one of the $26$ English letters. In particular, each string of \"0\" and/or \"1\" of length at most $4$ translates into a distinct English letter, except the following four strings that do not correspond to any English alphabet: \"0011\", \"0101\", \"1110\", and \"1111\".\nYou will work with a string $S$, which is initially empty. For $m$ times, either a dot or a dash will be appended to $S$, one at a time. Your task is to find and report, after each of these modifications to string $S$, the number of non-empty sequences of English letters that are represented with some substring of $S$ in Morse code.\nSince the answers can be incredibly tremendous, print them modulo $10^9 + 7$.\n-----Input-----\nThe first line contains an integer $m$ ($1 \\leq m \\leq 3\\,000$)\u00a0\u2014 the number of modifications to $S$. \nEach of the next $m$ lines contains either a \"0\" (representing a dot) or a \"1\" (representing a dash), specifying which character should be appended to $S$.\n-----Output-----\nPrint $m$ lines, the $i$-th of which being the answer after the $i$-th modification to $S$.\n-----Examples-----\nInput\n3\n1\n1\n1\nOutput\n1\n3\n7\nInput\n5\n1\n0\n1\n0\n1\nOutput\n1\n4\n10\n22\n43\nInput\n9\n1\n1\n0\n0\n0\n1\n1\n0\n1\nOutput\n1\n3\n10\n24\n51\n109\n213\n421\n833\n-----Note-----\nLet us consider the first sample after all characters have been appended to $S$, so S is \"111\".\nAs you can see, \"1\", \"11\", and \"111\" all correspond to some distinct English letter. In fact, they are translated into a 'T', an 'M', and an 'O', respectively. All non-empty sequences of English letters that are represented with some substring of $S$ in Morse code, therefore, are as follows.  \"T\" (translates into \"1\")  \"M\" (translates into \"11\")  \"O\" (translates into \"111\")  \"TT\" (translates into \"11\")  \"TM\" (translates into \"111\")  \"MT\" (translates into \"111\")  \"TTT\" (translates into \"111\") \nAlthough unnecessary for this task, a conversion table from English alphabets into Morse code can be found here.\n\ndef",
        "answer": "def morse(s):\n    d = {'a':'.-', 'b':'-...', 'c':'-.-.', 'd':'-..', 'e':'.', 'f':'..-.', 'g':'--.', 'h':'....', 'i':'..', 'j':'.---', 'k':'-.-', 'l':'.-..','m':'--', 'n':'-.', 'o':'---', 'p':'.--.', 'q':'--.-', 'r':'.-.','s':'...', 't':'-', 'u':'..-', 'v':'...-', 'w':'.--', 'x':'-..-', 'y':'-.--', 'z':'--..'}\n    return ''.join(d[c] for c in s.lower())",
        "difficulty": "competition"
    },
    {
        "task_id": 3983,
        "prompt": "Complete the Python function given the prompt below:Given is an undirected graph G consisting of N vertices numbered 1 through N and M edges numbered 1 through M.\nEdge i connects Vertex a_i and Vertex b_i bidirectionally.\nG is said to be a good graph when both of the conditions below are satisfied. It is guaranteed that G is initially a good graph.\n - Vertex 1 and Vertex N are not connected.\n - There are no self-loops and no multi-edges.\nTaro the first and Jiro the second will play a game against each other.\nThey will alternately take turns, with Taro the first going first.\nIn each player's turn, the player can do the following operation:\n - Operation: Choose vertices u and v, then add to G an edge connecting u and v bidirectionally.\nThe player whose addition of an edge results in G being no longer a good graph loses. Determine the winner of the game when the two players play optimally.\nYou are given T test cases. Solve each of them.\n-----Constraints-----\n - All values in input are integers.\n - 1 \\leq T \\leq 10^5\n - 2 \\leq N \\leq 10^{5}\n - 0 \\leq M \\leq \\min(N(N-1)/2,10^{5})\n - 1 \\leq a_i,b_i \\leq N\n - The given graph is a good graph.\n - In one input file, the sum of N and that of M do not exceed 2 \\times 10^5.\n-----Input-----\nInput is given from Standard Input in the following format:\nT\n\\mathrm{case}_1\n\\vdots\n\\mathrm{case}_T\nEach case is in the following format:\nN M\na_1 b_1\n\\vdots\na_M b_M\n-----Output-----\nPrint T lines. The i-th line should contain First if Taro the first wins in the i-th test case, and Second if Jiro the second wins in the test case.\n-----Sample Input-----\n3\n3 0\n6 2\n1 2\n2 3\n15 10\n12 14\n8 3\n10 1\n14 6\n12 6\n1 9\n13 1\n2 5\n3 9\n7 2\n-----Sample Output-----\nFirst\nSecond\nFirst\n - In test case 1, Taro the first wins. Below is one sequence of moves that results in Taro's win:\n - In Taro the first's turn, he adds an edge connecting Vertex 1 and 2, after which the graph is still good.\n - Then, whichever two vertices Jiro the second would choose to connect with an edge, the graph would no longer be good.\n - Thus, Taro wins.\n\ndef",
        "answer": "def goodGraph(n, m, edges):\n    graph = [[] for i in range(n)]\n    for edge in edges:\n        graph[edge[0]-1].append(edge[1]-1)\n        graph[edge[1]-1].append(edge[0]-1)\n    visited = [False] * n\n    def dfs(node, visited, graph):\n        visited[node] = True\n        for neighbor in graph[node]:\n            if not visited[neighbor]:\n                dfs(neighbor, visited, graph)\n    for i in range(n):\n        if not visited[i]:\n            dfs(i, visited, graph)\n    return 'First' if visited.count(True) % 2 == 0 else 'Second'",
        "difficulty": "competition"
    },
    {
        "task_id": 3984,
        "prompt": "Complete the Python function given the prompt below:Mike and Ann are sitting in the classroom. The lesson is boring, so they decided to play an interesting game. Fortunately, all they need to play this game is a string $s$ and a number $k$ ($0 \\le k < |s|$).\nAt the beginning of the game, players are given a substring of $s$ with left border $l$ and right border $r$, both equal to $k$ (i.e. initially $l=r=k$). Then players start to make moves one by one, according to the following rules: A player chooses $l^{\\prime}$ and $r^{\\prime}$ so that $l^{\\prime} \\le l$, $r^{\\prime} \\ge r$ and $s[l^{\\prime}, r^{\\prime}]$ is lexicographically less than $s[l, r]$. Then the player changes $l$ and $r$ in this way: $l := l^{\\prime}$, $r := r^{\\prime}$. Ann moves first. The player, that can't make a move loses.\nRecall that a substring $s[l, r]$ ($l \\le r$) of a string $s$ is a continuous segment of letters from s that starts at position $l$ and ends at position $r$. For example, \"ehn\" is a substring ($s[3, 5]$) of \"aaaehnsvz\" and \"ahz\" is not.\nMike and Ann were playing so enthusiastically that they did not notice the teacher approached them. Surprisingly, the teacher didn't scold them, instead of that he said, that he can figure out the winner of the game before it starts, even if he knows only $s$ and $k$.\nUnfortunately, Mike and Ann are not so keen in the game theory, so they ask you to write a program, that takes $s$ and determines the winner for all possible $k$.\n-----Input-----\nThe first line of the input contains a single string $s$ ($1 \\leq |s| \\leq 5 \\cdot 10^5$) consisting of lowercase English letters.\n-----Output-----\nPrint $|s|$ lines.\nIn the line $i$ write the name of the winner (print Mike or Ann) in the game with string $s$ and $k = i$, if both play optimally\n-----Examples-----\nInput\nabba\nOutput\nMike\nAnn\nAnn\nMike\nInput\ncba\nOutput\nMike\nMike\nMike\n\ndef",
        "answer": "def winner(s, k):\n    l = k\n    r = k\n    while l < len(s) and r < len(s):\n        if s[l] < s[r]:\n            l += 1\n        elif s[l] > s[r]:\n            r += 1\n        else:\n            l += 1\n            r += 1\n    if l == len(s):\n        return \"Ann\"\n    else:\n        return \"Mike\"",
        "difficulty": "competition"
    },
    {
        "task_id": 3985,
        "prompt": "Complete the Python function given the prompt below:You have written on a piece of paper an array of n positive integers a[1], a[2],..., a[n] and m good pairs of integers (i_1, j_1), (i_2, j_2),..., (i_{m}, j_{m}). Each good pair (i_{k}, j_{k}) meets the following conditions: i_{k} + j_{k} is an odd number and 1 \u2264 i_{k} < j_{k} \u2264 n.\nIn one operation you can perform a sequence of actions:   take one of the good pairs (i_{k}, j_{k}) and some integer v (v > 1), which divides both numbers a[i_{k}] and a[j_{k}];  divide both numbers by v, i. e. perform the assignments: $a [ i_{k} ] = \\frac{a [ i_{k} ]}{v}$ and $a [ j_{k} ] = \\frac{a [ j_{k} ]}{v}$. \nDetermine the maximum number of operations you can sequentially perform on the given array. Note that one pair may be used several times in the described operations.\n-----Input-----\nThe first line contains two space-separated integers n, m (2 \u2264 n \u2264 100, 1 \u2264 m \u2264 100).\nThe second line contains n space-separated integers a[1], a[2],..., a[n] (1 \u2264 a[i] \u2264 10^9) \u2014 the description of the array.\nThe following m lines contain the description of good pairs. The k-th line contains two space-separated integers i_{k}, j_{k} (1 \u2264 i_{k} < j_{k} \u2264 n, i_{k} + j_{k} is an odd number).\nIt is guaranteed that all the good pairs are distinct.\n-----Output-----\nOutput the answer for the problem.\n-----Examples-----\nInput\n3 2\n8 3 8\n1 2\n2 3\nOutput\n0\nInput\n3 2\n8 12 8\n1 2\n2 3\nOutput\n2\n\ndef",
        "answer": "def solution(n, m, a):\n    # Write your code here",
        "difficulty": "competition"
    },
    {
        "task_id": 3986,
        "prompt": "Complete the Python function given the prompt below:Little penguin Polo adores strings. But most of all he adores strings of length n.\nOne day he wanted to find a string that meets the following conditions:  The string consists of n lowercase English letters (that is, the string's length equals n), exactly k of these letters are distinct.  No two neighbouring letters of a string coincide; that is, if we represent a string as s = s_1s_2... s_{n}, then the following inequality holds, s_{i} \u2260 s_{i} + 1(1 \u2264 i < n).  Among all strings that meet points 1 and 2, the required string is lexicographically smallest. \nHelp him find such string or state that such string doesn't exist.\nString x = x_1x_2... x_{p} is lexicographically less than string y = y_1y_2... y_{q}, if either p < q and x_1 = y_1, x_2 = y_2,..., x_{p} = y_{p}, or there is such number r (r < p, r < q), that x_1 = y_1, x_2 = y_2,..., x_{r} = y_{r} and x_{r} + 1 < y_{r} + 1. The characters of the strings are compared by their ASCII codes.\n-----Input-----\nA single line contains two positive integers n and k (1 \u2264 n \u2264 10^6, 1 \u2264 k \u2264 26) \u2014 the string's length and the number of distinct letters.\n-----Output-----\nIn a single line print the required string. If there isn't such string, print \"-1\" (without the quotes).\n-----Examples-----\nInput\n7 4\nOutput\nababacd\nInput\n4 7\nOutput\n-1\n\ndef",
        "answer": "def find_string(n, k):\n    if k == 0:\n        return 'a' * n\n    if k == 1:\n        return 'b' * n\n    if k == 2:\n        return 'c' * n\n    if k == 3:\n        return 'd' * n\n    if k == 4:\n        return 'e' * n\n    if k == 5:\n        return 'f' * n\n    if k == 6:\n        return 'g' * n\n    if k == 7:\n        return 'h' * n\n    if k == 8:\n        return 'i' * n\n    if k == 9:\n        return 'j' * n\n    if k == 10:\n        return 'k' * n\n    if k == 11:\n        return 'l' * n\n    if k == 12:\n        return'm' * n\n    if k == 13:\n        return 'n' * n\n    if k == 14:\n        return 'o' * n\n    if k == 15:\n        return 'p' * n\n    if k == 16:\n        return 'q' * n\n    if k == 17:\n        return 'r' * n\n    if k == 18:\n        return's' * n\n    if k == 19:\n        return 't' * n\n    if k == 20:\n        return 'u' * n\n    if k == 21:\n        return 'v' * n\n    if k == 22:\n        return 'w' * n\n    if k == 23:\n        return 'x' * n\n    if k == 24:\n        return 'y' * n\n    if k == 25:\n        return 'z' * n\n    if k == 26:\n        return 'a' * n\n    if k == 27:\n        return 'b' * n\n    if k == 28:\n        return 'c' * n\n    if k == 29:\n        return 'd' * n\n    if k == 30:\n        return 'e' * n\n    if k == 31:\n        return 'f' * n\n    if k == 32:\n        return 'g",
        "difficulty": "competition"
    },
    {
        "task_id": 3987,
        "prompt": "Complete the Python function given the prompt below:A dragon symbolizes wisdom, power and wealth. On Lunar New Year's Day, people model a dragon with bamboo strips and clothes, raise them with rods, and hold the rods high and low to resemble a flying dragon.\nA performer holding the rod low is represented by a 1, while one holding it high is represented by a 2. Thus, the line of performers can be represented by a sequence a_1, a_2,..., a_{n}.\nLittle Tommy is among them. He would like to choose an interval [l, r] (1 \u2264 l \u2264 r \u2264 n), then reverse a_{l}, a_{l} + 1,..., a_{r} so that the length of the longest non-decreasing subsequence of the new sequence is maximum.\nA non-decreasing subsequence is a sequence of indices p_1, p_2,..., p_{k}, such that p_1 < p_2 <... < p_{k} and a_{p}_1 \u2264 a_{p}_2 \u2264... \u2264 a_{p}_{k}. The length of the subsequence is k.\n-----Input-----\nThe first line contains an integer n (1 \u2264 n \u2264 2000), denoting the length of the original sequence.\nThe second line contains n space-separated integers, describing the original sequence a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 2, i = 1, 2,..., n).\n-----Output-----\nPrint a single integer, which means the maximum possible length of the longest non-decreasing subsequence of the new sequence.\n-----Examples-----\nInput\n4\n1 2 1 2\nOutput\n4\nInput\n10\n1 1 2 2 2 1 1 2 2 1\nOutput\n9\n-----Note-----\nIn the first example, after reversing [2, 3], the array will become [1, 1, 2, 2], where the length of the longest non-decreasing subsequence is 4.\nIn the second example, after reversing [3, 7], the array will become [1, 1, 1, 1, 2, 2, 2, 2, 2, 1], where the length of the longest non-decreasing subsequence is 9.\n\ndef",
        "answer": "def longest_non_decreasing_subsequence(a):\n    # Write your code here\n    pass",
        "difficulty": "competition"
    },
    {
        "task_id": 3988,
        "prompt": "Complete the Python function given the prompt below:Vasya has a graph containing both directed (oriented) and undirected (non-oriented) edges. There can be multiple edges between a pair of vertices.\nVasya has picked a vertex s from the graph. Now Vasya wants to create two separate plans:\n  to orient each undirected edge in one of two possible directions to maximize number of vertices reachable from vertex s;  to orient each undirected edge in one of two possible directions to minimize number of vertices reachable from vertex s. \nIn each of two plans each undirected edge must become directed. For an edge chosen directions can differ in two plans.\nHelp Vasya find the plans.\n-----Input-----\nThe first line contains three integers n, m and s (2 \u2264 n \u2264 3\u00b710^5, 1 \u2264 m \u2264 3\u00b710^5, 1 \u2264 s \u2264 n) \u2014 number of vertices and edges in the graph, and the vertex Vasya has picked.\nThe following m lines contain information about the graph edges. Each line contains three integers t_{i}, u_{i} and v_{i} (1 \u2264 t_{i} \u2264 2, 1 \u2264 u_{i}, v_{i} \u2264 n, u_{i} \u2260 v_{i}) \u2014 edge type and vertices connected by the edge. If t_{i} = 1 then the edge is directed and goes from the vertex u_{i} to the vertex v_{i}. If t_{i} = 2 then the edge is undirected and it connects the vertices u_{i} and v_{i}.\nIt is guaranteed that there is at least one undirected edge in the graph.\n-----Output-----\nThe first two lines should describe the plan which maximizes the number of reachable vertices. The lines three and four should describe the plan which minimizes the number of reachable vertices.\nA description of each plan should start with a line containing the number of reachable vertices. The second line of a plan should consist of f symbols '+' and '-', where f is the number of undirected edges in the initial graph. Print '+' as the j-th symbol of the string if the j-th undirected edge (u, v) from the input should be oriented from u to v. Print '-' to signify the opposite direction (from v to u). Consider undirected edges to be numbered in the same order they are given in the input.\nIf there are multiple solutions, print any of them.\n-----Examples-----\nInput\n2 2 1\n1 1 2\n2 2 1\nOutput\n2\n-\n2\n+\nInput\n6 6 3\n2 2 6\n1 4 5\n2 3 4\n1 4 1\n1 3 1\n2 2 3\nOutput\n6\n++-\n2\n+-+\n\ndef",
        "answer": "def solution(n, m, s):\n\t# Write your code here\n\tpass\n",
        "difficulty": "competition"
    },
    {
        "task_id": 3989,
        "prompt": "Complete the Python function given the prompt below:You have number a, whose decimal representation quite luckily contains digits 1, 6, 8, 9. Rearrange the digits in its decimal representation so that the resulting number will be divisible by 7.\nNumber a doesn't contain any leading zeroes and contains digits 1, 6, 8, 9 (it also can contain another digits). The resulting number also mustn't contain any leading zeroes.\n-----Input-----\nThe first line contains positive integer a in the decimal record. It is guaranteed that the record of number a contains digits: 1, 6, 8, 9. Number a doesn't contain any leading zeroes. The decimal representation of number a contains at least 4 and at most 10^6 characters.\n-----Output-----\nPrint a number in the decimal notation without leading zeroes \u2014 the result of the permutation.\nIf it is impossible to rearrange the digits of the number a in the required manner, print 0.\n-----Examples-----\nInput\n1689\nOutput\n1869\nInput\n18906\nOutput\n18690\n\ndef",
        "answer": "def rearrange_digits(a):\n    # Write your code here\n    pass",
        "difficulty": "competition"
    },
    {
        "task_id": 3990,
        "prompt": "Complete the Python function given the prompt below:In Absurdistan, there are n towns (numbered 1 through n) and m bidirectional railways. There is also an absurdly simple road network\u00a0\u2014 for each pair of different towns x and y, there is a bidirectional road between towns x and y if and only if there is no railway between them. Travelling to a different town using one railway or one road always takes exactly one hour.\nA train and a bus leave town 1 at the same time. They both have the same destination, town n, and don't make any stops on the way (but they can wait in town n). The train can move only along railways and the bus can move only along roads.\nYou've been asked to plan out routes for the vehicles; each route can use any road/railway multiple times. One of the most important aspects to consider is safety\u00a0\u2014 in order to avoid accidents at railway crossings, the train and the bus must not arrive at the same town (except town n) simultaneously.\nUnder these constraints, what is the minimum number of hours needed for both vehicles to reach town n (the maximum of arrival times of the bus and the train)? Note, that bus and train are not required to arrive to the town n at the same moment of time, but are allowed to do so.\n-----Input-----\nThe first line of the input contains two integers n and m (2 \u2264 n \u2264 400, 0 \u2264 m \u2264 n(n - 1) / 2)\u00a0\u2014 the number of towns and the number of railways respectively.\nEach of the next m lines contains two integers u and v, denoting a railway between towns u and v (1 \u2264 u, v \u2264 n, u \u2260 v).\nYou may assume that there is at most one railway connecting any two towns.\n-----Output-----\nOutput one integer\u00a0\u2014 the smallest possible time of the later vehicle's arrival in town n. If it's impossible for at least one of the vehicles to reach town n, output  - 1.\n-----Examples-----\nInput\n4 2\n1 3\n3 4\nOutput\n2\nInput\n4 6\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\nOutput\n-1\nInput\n5 5\n4 2\n3 5\n4 5\n5 1\n1 2\nOutput\n3\n-----Note-----\nIn the first sample, the train can take the route $1 \\rightarrow 3 \\rightarrow 4$ and the bus can take the route $1 \\rightarrow 2 \\rightarrow 4$. Note that they can arrive at town 4 at the same time.\nIn the second sample, Absurdistan is ruled by railwaymen. There are no roads, so there's no way for the bus to reach town 4.\n\ndef",
        "answer": "def solution(n, m, u, v):\n    # Write your code here\n    pass\n",
        "difficulty": "competition"
    },
    {
        "task_id": 3991,
        "prompt": "Complete the Python function given the prompt below:Leha decided to move to a quiet town Vi\u010dkopolis, because he was tired by living in Bankopolis. Upon arrival he immediately began to expand his network of hacked computers. During the week Leha managed to get access to n computers throughout the town. Incidentally all the computers, which were hacked by Leha, lie on the same straight line, due to the reason that there is the only one straight street in Vi\u010dkopolis.\nLet's denote the coordinate system on this street. Besides let's number all the hacked computers with integers from 1 to n. So the i-th hacked computer is located at the point x_{i}. Moreover the coordinates of all computers are distinct. \nLeha is determined to have a little rest after a hard week. Therefore he is going to invite his friend Noora to a restaurant. However the girl agrees to go on a date with the only one condition: Leha have to solve a simple task.\nLeha should calculate a sum of F(a) for all a, where a is a non-empty subset of the set, that consists of all hacked computers. Formally, let's denote A the set of all integers from 1 to n. Noora asks the hacker to find value of the expression $\\sum_{a \\subseteq A, a \\neq \\varnothing} F(a)$. Here F(a) is calculated as the maximum among the distances between all pairs of computers from the set a. Formally, $F(a) = \\operatorname{max}_{i, j \\in a}|x_{i} - x_{j}|$. Since the required sum can be quite large Noora asks to find it modulo 10^9 + 7.\nThough, Leha is too tired. Consequently he is not able to solve this task. Help the hacker to attend a date.\n-----Input-----\nThe first line contains one integer n (1 \u2264 n \u2264 3\u00b710^5) denoting the number of hacked computers.\nThe second line contains n integers x_1, x_2,..., x_{n} (1 \u2264 x_{i} \u2264 10^9) denoting the coordinates of hacked computers. It is guaranteed that all x_{i} are distinct.\n-----Output-----\nPrint a single integer\u00a0\u2014 the required sum modulo 10^9 + 7.\n-----Examples-----\nInput\n2\n4 7\nOutput\n3\nInput\n3\n4 3 1\nOutput\n9\n-----Note-----\nThere are three non-empty subsets in the first sample test:$\\{4 \\}$, $\\{7 \\}$ and $\\{4,7 \\}$. The first and the second subset increase the sum by 0 and the third subset increases the sum by 7 - 4 = 3. In total the answer is 0 + 0 + 3 = 3.\nThere are seven non-empty subsets in the second sample test. Among them only the following subsets increase the answer: $\\{4,3 \\}$, $\\{4,1 \\}$, $\\{3,1 \\}$, $\\{4,3,1 \\}$. In total the sum is (4 - 3) + (4 - 1) + (3 - 1) + (4 - 1) = 9.\n\ndef",
        "answer": "def f(a):\n    return max(abs(x[0] - x[1]) for x in itertools.combinations(a, 2))",
        "difficulty": "competition"
    },
    {
        "task_id": 3992,
        "prompt": "Complete the Python function given the prompt below:This is the harder version of the problem. In this version, $1 \\le n \\le 10^6$ and $0 \\leq a_i \\leq 10^6$. You can hack this problem if you locked it. But you can hack the previous problem only if you locked both problems\nChristmas is coming, and our protagonist, Bob, is preparing a spectacular present for his long-time best friend Alice. This year, he decides to prepare $n$ boxes of chocolate, numbered from $1$ to $n$. Initially, the $i$-th box contains $a_i$ chocolate pieces.\nSince Bob is a typical nice guy, he will not send Alice $n$ empty boxes. In other words, at least one of $a_1, a_2, \\ldots, a_n$ is positive. Since Alice dislikes coprime sets, she will be happy only if there exists some integer $k > 1$ such that the number of pieces in each box is divisible by $k$. Note that Alice won't mind if there exists some empty boxes. \nCharlie, Alice's boyfriend, also is Bob's second best friend, so he decides to help Bob by rearranging the chocolate pieces. In one second, Charlie can pick up a piece in box $i$ and put it into either box $i-1$ or box $i+1$ (if such boxes exist). Of course, he wants to help his friend as quickly as possible. Therefore, he asks you to calculate the minimum number of seconds he would need to make Alice happy.\n-----Input-----\nThe first line contains a single integer $n$ ($1 \\le n \\le 10^6$)\u00a0\u2014 the number of chocolate boxes.\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($0 \\le a_i \\le 10^6$)\u00a0\u2014 the number of chocolate pieces in the $i$-th box.\nIt is guaranteed that at least one of $a_1, a_2, \\ldots, a_n$ is positive.\n-----Output-----\nIf there is no way for Charlie to make Alice happy, print $-1$.\nOtherwise, print a single integer $x$\u00a0\u2014 the minimum number of seconds for Charlie to help Bob make Alice happy.\n-----Examples-----\nInput\n3\n4 8 5\nOutput\n9\nInput\n5\n3 10 2 1 5\nOutput\n2\nInput\n4\n0 5 15 10\nOutput\n0\nInput\n1\n1\nOutput\n-1\n-----Note-----\nIn the first example, Charlie can move all chocolate pieces to the second box. Each box will be divisible by $17$.\nIn the second example, Charlie can move a piece from box $2$ to box $3$ and a piece from box $4$ to box $5$. Each box will be divisible by $3$.\nIn the third example, each box is already divisible by $5$.\nIn the fourth example, since Charlie has no available move, he cannot help Bob make Alice happy.\n\ndef",
        "answer": "def solve(n, a):\n    if n == 1:\n        return 0\n    if n == 2:\n        return -1\n    if n == 3:\n        return -1\n    if n == 4:\n        return -1\n    if n == 5:\n        return -1\n    if n == 6:\n        return -1\n    if n == 7:\n        return -1\n    if n == 8:\n        return -1\n    if n == 9:\n        return -1\n    if n == 10:\n        return -1\n    if n == 11:\n        return -1\n    if n == 12:\n        return -1\n    if n == 13:\n        return -1\n    if n == 14:\n        return -1\n    if n == 15:\n        return -1\n    if n == 16:\n        return -1\n    if n == 17:\n        return -1\n    if n == 18:\n        return -1\n    if n == 19:\n        return -1\n    if n == 20:\n        return -1\n    if n == 21:\n        return -1\n    if n == 22:\n        return -1\n    if n == 23:\n        return -1\n    if n == 24:\n        return -1\n    if n == 25:\n        return -1\n    if n == 26:\n        return -1\n    if n == 27:\n        return -1\n    if n == 28:\n        return -1\n    if n == 29:\n        return -1\n    if n == 30:\n        return -1\n    if n == 31:\n        return -1\n    if n == 32:\n        return -1\n    if n == 33:\n        return -1\n    if n == 34:\n        return -1\n    if n == 35:\n        return -1\n    if n == 36:\n        return -1\n    if n == 37:\n        return -1\n    if n == 38:\n        return -1\n    if n == 39:\n        return -1\n    if n == 40:\n        return -1\n    if n == 41:\n        return -1\n    if",
        "difficulty": "competition"
    },
    {
        "task_id": 3993,
        "prompt": "Complete the Python function given the prompt below:Recently, Tokitsukaze found an interesting game. Tokitsukaze had $n$ items at the beginning of this game. However, she thought there were too many items, so now she wants to discard $m$ ($1 \\le m \\le n$) special items of them.\nThese $n$ items are marked with indices from $1$ to $n$. In the beginning, the item with index $i$ is placed on the $i$-th position. Items are divided into several pages orderly, such that each page contains exactly $k$ positions and the last positions on the last page may be left empty.\nTokitsukaze would do the following operation: focus on the first special page that contains at least one special item, and at one time, Tokitsukaze would discard all special items on this page. After an item is discarded or moved, its old position would be empty, and then the item below it, if exists, would move up to this empty position. The movement may bring many items forward and even into previous pages, so Tokitsukaze would keep waiting until all the items stop moving, and then do the operation (i.e. check the special page and discard the special items) repeatedly until there is no item need to be discarded.\n [Image] Consider the first example from the statement: $n=10$, $m=4$, $k=5$, $p=[3, 5, 7, 10]$. The are two pages. Initially, the first page is special (since it is the first page containing a special item). So Tokitsukaze discards the special items with indices $3$ and $5$. After, the first page remains to be special. It contains $[1, 2, 4, 6, 7]$, Tokitsukaze discards the special item with index $7$. After, the second page is special (since it is the first page containing a special item). It contains $[9, 10]$, Tokitsukaze discards the special item with index $10$. \nTokitsukaze wants to know the number of operations she would do in total.\n-----Input-----\nThe first line contains three integers $n$, $m$ and $k$ ($1 \\le n \\le 10^{18}$, $1 \\le m \\le 10^5$, $1 \\le m, k \\le n$)\u00a0\u2014 the number of items, the number of special items to be discarded and the number of positions in each page.\nThe second line contains $m$ distinct integers $p_1, p_2, \\ldots, p_m$ ($1 \\le p_1 < p_2 < \\ldots < p_m \\le n$)\u00a0\u2014 the indices of special items which should be discarded.\n-----Output-----\nPrint a single integer\u00a0\u2014 the number of operations that Tokitsukaze would do in total.\n-----Examples-----\nInput\n10 4 5\n3 5 7 10\nOutput\n3\nInput\n13 4 5\n7 8 9 10\nOutput\n1\n-----Note-----\nFor the first example:\n  In the first operation, Tokitsukaze would focus on the first page $[1, 2, 3, 4, 5]$ and discard items with indices $3$ and $5$;  In the second operation, Tokitsukaze would focus on the first page $[1, 2, 4, 6, 7]$ and discard item with index $7$;  In the third operation, Tokitsukaze would focus on the second page $[9, 10]$ and discard item with index $10$. \nFor the second example, Tokitsukaze would focus on the second page $[6, 7, 8, 9, 10]$ and discard all special items at once.\n\ndef",
        "answer": "def solution(n, m, k, p):\n    # your code here\n    return 0",
        "difficulty": "competition"
    },
    {
        "task_id": 3994,
        "prompt": "Complete the Python function given the prompt below:It is a holiday season, and Koala is decorating his house with cool lights! He owns $n$ lights, all of which flash periodically.\nAfter taking a quick glance at them, Koala realizes that each of his lights can be described with two parameters $a_i$ and $b_i$. Light with parameters $a_i$ and $b_i$ will toggle (on to off, or off to on) every $a_i$ seconds starting from the $b_i$-th second. In other words, it will toggle at the moments $b_i$, $b_i + a_i$, $b_i + 2 \\cdot a_i$ and so on.\nYou know for each light whether it's initially on or off and its corresponding parameters $a_i$ and $b_i$. Koala is wondering what is the maximum number of lights that will ever be on at the same time. So you need to find that out.\n [Image] Here is a graphic for the first example. \n-----Input-----\nThe first line contains a single integer $n$ ($1 \\le n \\le 100$), the number of lights.\nThe next line contains a string $s$ of $n$ characters. The $i$-th character is \"1\", if the $i$-th lamp is initially on. Otherwise, $i$-th character is \"0\".\nThe $i$-th of the following $n$ lines contains two integers $a_i$ and $b_i$ ($1 \\le a_i, b_i \\le 5$) \u00a0\u2014 the parameters of the $i$-th light.\n-----Output-----\nPrint a single integer\u00a0\u2014 the maximum number of lights that will ever be on at the same time.\n-----Examples-----\nInput\n3\n101\n3 3\n3 2\n3 1\nOutput\n2\nInput\n4\n1111\n3 4\n5 2\n3 1\n3 2\nOutput\n4\nInput\n6\n011100\n5 3\n5 5\n2 4\n3 5\n4 2\n1 5\nOutput\n6\n-----Note-----\nFor first example, the lamps' states are shown in the picture above. The largest number of simultaneously on lamps is $2$ (e.g. at the moment $2$).\nIn the second example, all lights are initially on. So the answer is $4$.\n\ndef",
        "answer": "def solution(n, s):\n    lamps = [0] * n\n    for i in range(n):\n        if s[i] == '1':\n            lamps[i] = 1\n    for i in range(n):\n        if lamps[i] == 1:\n            for j in range(i, n):\n                if lamps[j] == 1:\n                    lamps[j] = 0\n                else:\n                    lamps[j] = 1\n    return lamps.count(1)",
        "difficulty": "competition"
    },
    {
        "task_id": 3995,
        "prompt": "Complete the Python function given the prompt below:Let $s$ be some string consisting of symbols \"0\" or \"1\". Let's call a string $t$ a substring of string $s$, if there exists such number $1 \\leq l \\leq |s| - |t| + 1$ that $t = s_l s_{l+1} \\ldots s_{l + |t| - 1}$. Let's call a substring $t$ of string $s$ unique, if there exist only one such $l$. \nFor example, let $s = $\"1010111\". A string $t = $\"010\" is an unique substring of $s$, because $l = 2$ is the only one suitable number. But, for example $t = $\"10\" isn't a unique substring of $s$, because $l = 1$ and $l = 3$ are suitable. And for example $t =$\"00\" at all isn't a substring of $s$, because there is no suitable $l$.\nToday Vasya solved the following problem at the informatics lesson: given a string consisting of symbols \"0\" and \"1\", the task is to find the length of its minimal unique substring. He has written a solution to this problem and wants to test it. He is asking you to help him.\nYou are given $2$ positive integers $n$ and $k$, such that $(n \\bmod 2) = (k \\bmod 2)$, where $(x \\bmod 2)$ is operation of taking remainder of $x$ by dividing on $2$. Find any string $s$ consisting of $n$ symbols \"0\" or \"1\", such that the length of its minimal unique substring is equal to $k$.\n-----Input-----\nThe first line contains two integers $n$ and $k$, separated by spaces ($1 \\leq k \\leq n \\leq 100\\,000$, $(k \\bmod 2) = (n \\bmod 2)$).\n-----Output-----\nPrint a string $s$ of length $n$, consisting of symbols \"0\" and \"1\". Minimal length of the unique substring of $s$ should be equal to $k$. You can find any suitable string. It is guaranteed, that there exists at least one such string.\n-----Examples-----\nInput\n4 4\nOutput\n1111\nInput\n5 3\nOutput\n01010\nInput\n7 3\nOutput\n1011011\n-----Note-----\nIn the first test, it's easy to see, that the only unique substring of string $s = $\"1111\" is all string $s$, which has length $4$.\nIn the second test a string $s = $\"01010\" has minimal unique substring $t =$\"101\", which has length $3$.\nIn the third test a string $s = $\"1011011\" has minimal unique substring $t =$\"110\", which has length $3$.\n\ndef",
        "answer": "def solution(n, k):\n    return ''.join(['0' if n % 2 else '1' for n in range(k)])",
        "difficulty": "competition"
    },
    {
        "task_id": 3996,
        "prompt": "Complete the Python function given the prompt below:As we all know Barney's job is \"PLEASE\" and he has not much to do at work. That's why he started playing \"cups and key\". In this game there are three identical cups arranged in a line from left to right. Initially key to Barney's heart is under the middle cup. [Image] \nThen at one turn Barney swaps the cup in the middle with any of other two cups randomly (he choses each with equal probability), so the chosen cup becomes the middle one. Game lasts n turns and Barney independently choses a cup to swap with the middle one within each turn, and the key always remains in the cup it was at the start.\nAfter n-th turn Barney asks a girl to guess which cup contains the key. The girl points to the middle one but Barney was distracted while making turns and doesn't know if the key is under the middle cup. That's why he asked you to tell him the probability that girl guessed right.\nNumber n of game turns can be extremely large, that's why Barney did not give it to you. Instead he gave you an array a_1, a_2,..., a_{k} such that  $n = \\prod_{i = 1}^{k} a_{i}$ \nin other words, n is multiplication of all elements of the given array.\nBecause of precision difficulties, Barney asked you to tell him the answer as an irreducible fraction. In other words you need to find it as a fraction p / q such that $\\operatorname{gcd}(p, q) = 1$, where $gcd$ is the greatest common divisor. Since p and q can be extremely large, you only need to find the remainders of dividing each of them by 10^9 + 7.\nPlease note that we want $gcd$ of p and q to be 1, not $gcd$ of their remainders after dividing by 10^9 + 7.\n-----Input-----\nThe first line of input contains a single integer k (1 \u2264 k \u2264 10^5)\u00a0\u2014 the number of elements in array Barney gave you.\nThe second line contains k integers a_1, a_2,..., a_{k} (1 \u2264 a_{i} \u2264 10^18)\u00a0\u2014 the elements of the array.\n-----Output-----\nIn the only line of output print a single string x / y where x is the remainder of dividing p by 10^9 + 7 and y is the remainder of dividing q by 10^9 + 7.\n-----Examples-----\nInput\n1\n2\nOutput\n1/2\nInput\n3\n1 1 1\nOutput\n0/1\n\ndef",
        "answer": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a",
        "difficulty": "competition"
    },
    {
        "task_id": 3997,
        "prompt": "Complete the Python function given the prompt below:Alyona has a tree with n vertices. The root of the tree is the vertex 1. In each vertex Alyona wrote an positive integer, in the vertex i she wrote a_{i}. Moreover, the girl wrote a positive integer to every edge of the tree (possibly, different integers on different edges).\nLet's define dist(v, u) as the sum of the integers written on the edges of the simple path from v to u.\nThe vertex v controls the vertex u (v \u2260 u) if and only if u is in the subtree of v and dist(v, u) \u2264 a_{u}.\nAlyona wants to settle in some vertex. In order to do this, she wants to know for each vertex v what is the number of vertices u such that v controls u.\n-----Input-----\nThe first line contains single integer n (1 \u2264 n \u2264 2\u00b710^5).\nThe second line contains n integers a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 10^9)\u00a0\u2014 the integers written in the vertices.\nThe next (n - 1) lines contain two integers each. The i-th of these lines contains integers p_{i} and w_{i} (1 \u2264 p_{i} \u2264 n, 1 \u2264 w_{i} \u2264 10^9)\u00a0\u2014 the parent of the (i + 1)-th vertex in the tree and the number written on the edge between p_{i} and (i + 1).\nIt is guaranteed that the given graph is a tree.\n-----Output-----\nPrint n integers\u00a0\u2014 the i-th of these numbers should be equal to the number of vertices that the i-th vertex controls.\n-----Examples-----\nInput\n5\n2 5 1 4 6\n1 7\n1 1\n3 5\n3 6\nOutput\n1 0 1 0 0\nInput\n5\n9 7 8 6 5\n1 1\n2 1\n3 1\n4 1\nOutput\n4 3 2 1 0\n-----Note-----\nIn the example test case the vertex 1 controls the vertex 3, the vertex 3 controls the vertex 5 (note that is doesn't mean the vertex 1 controls the vertex 5).\n\ndef",
        "answer": "def count_controls(n, a):\n    # Write your code here\n    pass",
        "difficulty": "competition"
    },
    {
        "task_id": 3998,
        "prompt": "Complete the Python function given the prompt below:A group of n friends enjoys playing popular video game Toda 2. There is a rating system describing skill level of each player, initially the rating of the i-th friend is r_{i}.\nThe friends decided to take part in the championship as a team. But they should have equal ratings to be allowed to compose a single team consisting of all n friends. So the friends are faced with the problem: how to make all their ratings equal.\nOne way to change ratings is to willingly lose in some matches. Friends can form a party consisting of two to five (but not more than n) friends and play a match in the game. When the party loses, the rating of each of its members decreases by 1. A rating can't become negative, so r_{i} = 0 doesn't change after losing.\nThe friends can take part in multiple matches, each time making a party from any subset of friends (but remember about constraints on party size: from 2 to 5 members).\nThe friends want to make their ratings equal but as high as possible.\nHelp the friends develop a strategy of losing the matches so that all their ratings become equal and the resulting rating is maximum possible.\n-----Input-----\nThe first line contains a single integer n (2 \u2264 n \u2264 100) \u2014 the number of friends.\nThe second line contains n non-negative integers r_1, r_2,..., r_{n} (0 \u2264 r_{i} \u2264 100), where r_{i} is the initial rating of the i-th friend.\n-----Output-----\nIn the first line, print a single integer R \u2014 the final rating of each of the friends.\nIn the second line, print integer t \u2014 the number of matches the friends have to play. Each of the following t lines should contain n characters '0' or '1', where the j-th character of the i-th line is equal to:\n  '0', if friend j should not play in match i,  '1', if friend j should play in match i. \nEach line should contain between two and five characters '1', inclusive.\nThe value t should not exceed 10^4, it is guaranteed that such solution exists. \nRemember that you shouldn't minimize the value t, but you should maximize R. If there are multiple solutions, print any of them.\n-----Examples-----\nInput\n5\n4 5 1 7 4\nOutput\n1\n8\n01010\n00011\n01010\n10010\n00011\n11000\n00011\n11000\nInput\n2\n1 2\nOutput\n0\n2\n11\n11\nInput\n3\n1 1 1\nOutput\n1\n0\n\ndef",
        "answer": "def solve(n, r):\n    r = sorted(r)\n    r = [0] + r + [100]\n    t = 0\n    for i in range(1, len(r)):\n        if r[i] - r[i-1] > 1:\n            t += 1\n    return t",
        "difficulty": "competition"
    },
    {
        "task_id": 3999,
        "prompt": "Complete the Python function given the prompt below:AtCoDeer the deer has N square tiles. The tiles are numbered 1 through N, and the number given to each tile is written on one side of the tile. Also, each corner of each tile is painted in one of the 1000 colors, which are represented by the integers 0 between 999. The top-left, top-right, bottom-right and bottom-left corner of the tile with the number i are painted in color C_{i,0}, C_{i,1}, C_{i,2} and C_{i,3}, respectively, when seen in the direction of the number written on the tile (See Figure 1).\nFigure 1: The correspondence between the colors of a tile and the input\nAtCoDeer is constructing a cube using six of these tiles, under the following conditions:\n - For each tile, the side with the number must face outward.\n - For each vertex of the cube, the three corners of the tiles that forms it must all be painted in the same color.\nHelp him by finding the number of the different cubes that can be constructed under the conditions.\nSince each tile has a number written on it, two cubes are considered different if the set of the used tiles are different, or the tiles are used in different directions, even if the formation of the colors are the same. (Each tile can be used in one of the four directions, obtained by 90\u00b0 rotations.) Two cubes are considered the same only if rotating one in the three dimensional space can obtain an exact copy of the other, including the directions of the tiles.\nFigure 2: The four directions of a tile\n-----Constraints-----\n - 6\u2266N\u2266400\n - 0\u2266C_{i,j}\u2266999 (1\u2266i\u2266N, 0\u2266j\u22663)\n-----Input-----\nThe input is given from Standard Input in the following format:\nN\nC_{1,0} C_{1,1} C_{1,2} C_{1,3}\nC_{2,0} C_{2,1} C_{2,2} C_{2,3}\n:\nC_{N,0} C_{N,1} C_{N,2} C_{N,3}\n-----Output-----\nPrint the number of the different cubes that can be constructed under the conditions.\n-----Sample Input-----\n6\n0 1 2 3\n0 4 6 1\n1 6 7 2\n2 7 5 3\n6 4 5 7\n4 0 3 5\n-----Sample Output-----\n1\nThe cube below can be constructed.\n\ndef",
        "answer": "def solve(N, C1, C2, C3, C4):\n    # Write your code here\n    pass",
        "difficulty": "competition"
    }
]