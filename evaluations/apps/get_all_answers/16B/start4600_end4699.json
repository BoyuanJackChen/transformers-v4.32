[
    {
        "task_id": 4600,
        "prompt": "Complete the Python function given the prompt below:Takahashi participated in a contest on AtCoder.\nThe contest had N problems.\nTakahashi made M submissions during the contest.\nThe i-th submission was made for the p_i-th problem and received the verdict S_i (AC or WA).\nThe number of Takahashi's correct answers is the number of problems on which he received an AC once or more.\nThe number of Takahashi's penalties is the sum of the following count for the problems on which he received an AC once or more: the number of WAs received before receiving an AC for the first time on that problem.\nFind the numbers of Takahashi's correct answers and penalties.\n-----Constraints-----\n - N, M, and p_i are integers.\n - 1 \\leq N \\leq 10^5\n - 0 \\leq M \\leq 10^5\n - 1 \\leq p_i \\leq N\n - S_i is AC or WA.\n-----Input-----\nInput is given from Standard Input in the following format:\nN M\np_1 S_1\n:\np_M S_M\n-----Output-----\nPrint the number of Takahashi's correct answers and the number of Takahashi's penalties.\n-----Sample Input-----\n2 5\n1 WA\n1 AC\n2 WA\n2 AC\n2 WA\n-----Sample Output-----\n2 2\nIn his second submission, he received an AC on the first problem for the first time. Before this, he received one WA on this problem.\nIn his fourth submission, he received an AC on the second problem for the first time. Before this, he received one WA on this problem.\nThus, he has two correct answers and two penalties.\n\ndef",
        "answer": "def solve(n, m, s):\n    correct = 0\n    penalty = 0\n    for i in range(m):\n        if s[i] == 'AC':\n            correct += 1\n        else:\n            penalty += 1\n    return correct, penalty",
        "difficulty": "introductory"
    },
    {
        "task_id": 4601,
        "prompt": "Complete the Python function given the prompt below:Fennec is fighting with N monsters.\nThe health of the i-th monster is H_i.\nFennec can do the following two actions:\n - Attack: Fennec chooses one monster. That monster's health will decrease by 1.\n - Special Move: Fennec chooses one monster. That monster's health will become 0.\nThere is no way other than Attack and Special Move to decrease the monsters' health.\nFennec wins when all the monsters' healths become 0 or below.\nFind the minimum number of times Fennec needs to do Attack (not counting Special Move) before winning when she can use Special Move at most K times.\n-----Constraints-----\n - 1 \\leq N \\leq 2 \\times 10^5\n - 0 \\leq K \\leq 2 \\times 10^5\n - 1 \\leq H_i \\leq 10^9\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN K\nH_1... H_N\n-----Output-----\nPrint the minimum number of times Fennec needs to do Attack (not counting Special Move) before winning.\n-----Sample Input-----\n3 1\n4 1 5\n-----Sample Output-----\n5\nBy using Special Move on the third monster, and doing Attack four times on the first monster and once on the second monster, Fennec can win with five Attacks.\n\ndef",
        "answer": "def fennec_wins(n, k, h):\n    h.sort()\n    h.append(0)\n    dp = [0] * (n + 1)\n    dp[0] = 0\n    dp[1] = 1\n    for i in range(2, n + 1):\n        for j in range(1, k + 1):\n            if h[i] > h[i - 1] - j:\n                break\n            dp[i] = max(dp[i], dp[i - 1] + 1)\n    return dp[n]",
        "difficulty": "introductory"
    },
    {
        "task_id": 4602,
        "prompt": "Complete the Python function given the prompt below:There are N balls in the xy-plane. The coordinates of the i-th of them is (x_i, i).\nThus, we have one ball on each of the N lines y = 1, y = 2,..., y = N.\nIn order to collect these balls, Snuke prepared 2N robots, N of type A and N of type B.\nThen, he placed the i-th type-A robot at coordinates (0, i), and the i-th type-B robot at coordinates (K, i).\nThus, now we have one type-A robot and one type-B robot on each of the N lines y = 1, y = 2,..., y = N.\nWhen activated, each type of robot will operate as follows.\n - When a type-A robot is activated at coordinates (0, a), it will move to the position of the ball on the line y = a, collect the ball, move back to its original position (0, a) and deactivate itself. If there is no such ball, it will just deactivate itself without doing anything.\n - When a type-B robot is activated at coordinates (K, b), it will move to the position of the ball on the line y = b, collect the ball, move back to its original position (K, b) and deactivate itself. If there is no such ball, it will just deactivate itself without doing anything.\nSnuke will activate some of the 2N robots to collect all of the balls. Find the minimum possible total distance covered by robots.\n-----Constraints-----\n - 1 \\leq N \\leq 100\n - 1 \\leq K \\leq 100\n - 0 < x_i < K\n - All input values are integers.\n-----Inputs-----\nInput is given from Standard Input in the following format:\nN\nK\nx_1 x_2... x_N\n-----Outputs-----\nPrint the minimum possible total distance covered by robots.\n-----Sample Input-----\n1\n10\n2\n-----Sample Output-----\n4\nThere are just one ball, one type-A robot and one type-B robot.\nIf the type-A robot is used to collect the ball, the distance from the robot to the ball is 2, and the distance from the ball to the original position of the robot is also 2, for a total distance of 4.\nSimilarly, if the type-B robot is used, the total distance covered will be 16.\nThus, the total distance covered will be minimized when the type-A robot is used. The output should be 4.\n\ndef",
        "answer": "def robot_collect(n, k, x):\n    return n * (k + max(x))",
        "difficulty": "introductory"
    },
    {
        "task_id": 4603,
        "prompt": "Complete the Python function given the prompt below:You planned a trip using trains and buses.\nThe train fare will be A yen (the currency of Japan) if you buy ordinary tickets along the way, and B yen if you buy an unlimited ticket.\nSimilarly, the bus fare will be C yen if you buy ordinary tickets along the way, and D yen if you buy an unlimited ticket.\nFind the minimum total fare when the optimal choices are made for trains and buses.\n-----Constraints-----\n - 1 \\leq A \\leq 1 000\n - 1 \\leq B \\leq 1 000\n - 1 \\leq C \\leq 1 000\n - 1 \\leq D \\leq 1 000\n - All input values are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nA\nB\nC\nD\n-----Output-----\nPrint the minimum total fare.\n-----Sample Input-----\n600\n300\n220\n420\n-----Sample Output-----\n520\nThe train fare will be 600 yen if you buy ordinary tickets, and 300 yen if you buy an unlimited ticket.\nThus, the optimal choice for trains is to buy an unlimited ticket for 300 yen.\nOn the other hand, the optimal choice for buses is to buy ordinary tickets for 220 yen.\nTherefore, the minimum total fare is 300 + 220 = 520 yen.\n\ndef",
        "answer": "def main():\n    A = int(input())\n    B = int(input())\n    C = int(input())\n    D = int(input())\n    print(min(A, B, C, D))",
        "difficulty": "introductory"
    },
    {
        "task_id": 4604,
        "prompt": "Complete the Python function given the prompt below:There are N people, conveniently numbered 1 through N.\nThey were standing in a row yesterday, but now they are unsure of the order in which they were standing.\nHowever, each person remembered the following fact: the absolute difference of the number of the people who were standing to the left of that person, and the number of the people who were standing to the right of that person.\nAccording to their reports, the difference above for person i is A_i.\nBased on these reports, find the number of the possible orders in which they were standing.\nSince it can be extremely large, print the answer modulo 10^9+7.\nNote that the reports may be incorrect and thus there may be no consistent order.\nIn such a case, print 0.\n-----Constraints-----\n - 1\u2266N\u226610^5\n - 0\u2266A_i\u2266N-1\n-----Input-----\nThe input is given from Standard Input in the following format:\nN\nA_1 A_2... A_N\n-----Output-----\nPrint the number of the possible orders in which they were standing, modulo 10^9+7.\n-----Sample Input-----\n5\n2 4 4 0 2\n-----Sample Output-----\n4\nThere are four possible orders, as follows:\n - 2,1,4,5,3\n - 2,5,4,1,3\n - 3,1,4,5,2\n - 3,5,4,1,2\n\ndef",
        "answer": "def permutation(n, k):\n    if k == n:\n        print(t)\n    else:\n        for i in range(k, n):\n            t[k], t[i] = t[i], t[k]\n            permutation(n, k + 1)\n            t[k], t[i] = t[i], t[k]",
        "difficulty": "introductory"
    },
    {
        "task_id": 4605,
        "prompt": "Complete the Python function given the prompt below:Find the sum of the integers between 1 and N (inclusive), whose sum of digits written in base 10 is between A and B (inclusive).\n-----Constraints-----\n - 1 \\leq N \\leq 10^4\n - 1 \\leq A \\leq B \\leq 36\n - All input values are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN A B\n-----Output-----\nPrint the sum of the integers between 1 and N (inclusive), whose sum of digits written in base 10 is between A and B (inclusive).\n-----Sample Input-----\n20 2 5\n-----Sample Output-----\n84\nAmong the integers not greater than 20, the ones whose sums of digits are between 2 and 5, are: 2,3,4,5,11,12,13,14 and 20. We should print the sum of these, 84.\n\ndef",
        "answer": "def sum_digits(n, a, b):\n    sum = 0\n    for i in range(1, n+1):\n        sum += sum_of_digits(i, a, b)\n    return sum",
        "difficulty": "introductory"
    },
    {
        "task_id": 4606,
        "prompt": "Complete the Python function given the prompt below:This contest, AtCoder Beginner Contest, is abbreviated as ABC.\nWhen we refer to a specific round of ABC, a three-digit number is appended after ABC. For example, ABC680 is the 680th round of ABC.\nWhat is the abbreviation for the N-th round of ABC? Write a program to output the answer.\n-----Constraints-----\n - 100 \u2264 N \u2264 999\n-----Input-----\nInput is given from Standard Input in the following format:\nN\n-----Output-----\nPrint the abbreviation for the N-th round of ABC.\n-----Sample Input-----\n100\n-----Sample Output-----\nABC100\nThe 100th round of ABC is ABC100.\n\ndef",
        "answer": "def abc(n):\n    return \"ABC\" + str(n)",
        "difficulty": "introductory"
    },
    {
        "task_id": 4607,
        "prompt": "Complete the Python function given the prompt below:In AtCoder Kingdom, Gregorian calendar is used, and dates are written in the \"year-month-day\" order, or the \"month-day\" order without the year.\nFor example, May 3, 2018 is written as 2018-5-3, or 5-3 without the year.  \nIn this country, a date is called Takahashi when the month and the day are equal as numbers. For example, 5-5 is Takahashi.\nHow many days from 2018-1-1 through 2018-a-b are Takahashi?\n-----Constraints-----\n - a is an integer between 1 and 12 (inclusive).\n - b is an integer between 1 and 31 (inclusive).\n - 2018-a-b is a valid date in Gregorian calendar.\n-----Input-----\nInput is given from Standard Input in the following format:\na b\n-----Output-----\nPrint the number of days from 2018-1-1 through 2018-a-b that are Takahashi.\n-----Sample Input-----\n5 5\n-----Sample Output-----\n5\nThere are five days that are Takahashi: 1-1, 2-2, 3-3, 4-4 and 5-5.\n\ndef",
        "answer": "def takahashi(a, b):\n    count = 0\n    for i in range(1, a+1):\n        for j in range(1, b+1):\n            if i == j:\n                count += 1\n    return count",
        "difficulty": "introductory"
    },
    {
        "task_id": 4608,
        "prompt": "Complete the Python function given the prompt below:Takahashi wants to gain muscle, and decides to work out at AtCoder Gym.\nThe exercise machine at the gym has N buttons, and exactly one of the buttons is lighten up.\nThese buttons are numbered 1 through N.\nWhen Button i is lighten up and you press it, the light is turned off, and then Button a_i will be lighten up. It is possible that i=a_i.\nWhen Button i is not lighten up, nothing will happen by pressing it.\nInitially, Button 1 is lighten up. Takahashi wants to quit pressing buttons when Button 2 is lighten up.\nDetermine whether this is possible. If the answer is positive, find the minimum number of times he needs to press buttons.\n-----Constraints-----\n - 2 \u2264 N \u2264 10^5\n - 1 \u2264 a_i \u2264 N\n-----Input-----\nInput is given from Standard Input in the following format:\nN\na_1\na_2\n:\na_N\n-----Output-----\nPrint -1 if it is impossible to lighten up Button 2.\nOtherwise, print the minimum number of times we need to press buttons in order to lighten up Button 2.\n-----Sample Input-----\n3\n3\n1\n2\n-----Sample Output-----\n2\nPress Button 1, then Button 3.\n\ndef",
        "answer": "def button_press(n, a):\n    if n == 1:\n        return 1\n    if n == 2:\n        if a == 2:\n            return -1\n        else:\n            return 1\n    if a == 2:\n        return -1\n    return button_press(n-1, a) + button_press(n-2, a)",
        "difficulty": "introductory"
    },
    {
        "task_id": 4609,
        "prompt": "Complete the Python function given the prompt below:You are playing the following game with Joisino.\n - Initially, you have a blank sheet of paper.\n - Joisino announces a number. If that number is written on the sheet, erase the number from the sheet; if not, write the number on the sheet. This process is repeated N times.\n - Then, you are asked a question: How many numbers are written on the sheet now?\nThe numbers announced by Joisino are given as A_1,...,A_N in the order she announces them. How many numbers will be written on the sheet at the end of the game?\n-----Constraints-----\n - 1\u2264N\u2264100000\n - 1\u2264A_i\u22641000000000(=10^9)\n - All input values are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nA_1\n:\nA_N\n-----Output-----\nPrint how many numbers will be written on the sheet at the end of the game.\n-----Sample Input-----\n3\n6\n2\n6\n-----Sample Output-----\n1\nThe game proceeds as follows:\n - 6 is not written on the sheet, so write 6.\n - 2 is not written on the sheet, so write 2.\n - 6 is written on the sheet, so erase 6.\nThus, the sheet contains only 2 in the end. The answer is 1.\n\ndef",
        "answer": "def joisino(n, a):\n    count = 0\n    for i in range(n):\n        if a[i] in a[i+1:]:\n            count += 1\n            a.remove(a[i])\n    return count",
        "difficulty": "introductory"
    },
    {
        "task_id": 4610,
        "prompt": "Complete the Python function given the prompt below:Takahashi has N balls. Initially, an integer A_i is written on the i-th ball.\nHe would like to rewrite the integer on some balls so that there are at most K different integers written on the N balls.\nFind the minimum number of balls that Takahashi needs to rewrite the integers on them.\n-----Constraints-----\n - 1 \\leq K \\leq N \\leq 200000\n - 1 \\leq A_i \\leq N\n - All input values are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN K\nA_1 A_2... A_N\n-----Output-----\nPrint the minimum number of balls that Takahashi needs to rewrite the integers on them.\n-----Sample Input-----\n5 2\n1 1 2 2 5\n-----Sample Output-----\n1\nFor example, if we rewrite the integer on the fifth ball to 2, there are two different integers written on the balls: 1 and 2.\nOn the other hand, it is not possible to rewrite the integers on zero balls so that there are at most two different integers written on the balls, so we should print 1.\n\ndef",
        "answer": "def rewrite(n, k, a):\n    a.sort()\n    count = 0\n    for i in range(n):\n        if a[i]!= i+1:\n            count += 1\n            if count > k:\n                return i+1\n    return n+1",
        "difficulty": "introductory"
    },
    {
        "task_id": 4611,
        "prompt": "Complete the Python function given the prompt below:AtCoDeer the deer is going on a trip in a two-dimensional plane.\nIn his plan, he will depart from point (0, 0) at time 0, then for each i between 1 and N (inclusive), he will visit point (x_i,y_i) at time t_i.\nIf AtCoDeer is at point (x, y) at time t, he can be at one of the following points at time t+1: (x+1,y), (x-1,y), (x,y+1) and (x,y-1).\nNote that he cannot stay at his place.\nDetermine whether he can carry out his plan.\n-----Constraints-----\n - 1 \u2264 N \u2264 10^5\n - 0 \u2264 x_i \u2264 10^5\n - 0 \u2264 y_i \u2264 10^5\n - 1 \u2264 t_i \u2264 10^5\n - t_i < t_{i+1} (1 \u2264 i \u2264 N-1)\n - All input values are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nt_1 x_1 y_1\nt_2 x_2 y_2\n:\nt_N x_N y_N\n-----Output-----\nIf AtCoDeer can carry out his plan, print Yes; if he cannot, print No.\n-----Sample Input-----\n2\n3 1 2\n6 1 1\n-----Sample Output-----\nYes\nFor example, he can travel as follows: (0,0), (0,1), (1,1), (1,2), (1,1), (1,0), then (1,1).\n\ndef",
        "answer": "def is_valid(x, y, t):\n    if x < 0 or x > 10 ** 5:\n        return False\n    if y < 0 or y > 10 ** 5:\n        return False\n    if t < 0 or t > 10 ** 5:\n        return False\n    return True",
        "difficulty": "introductory"
    },
    {
        "task_id": 4612,
        "prompt": "Complete the Python function given the prompt below:You are given two positive integers a and b.\nLet x be the average of a and b.\nPrint x rounded up to the nearest integer.\n-----Constraints-----\n - a and b are integers.\n - 1 \\leq a, b \\leq 100\n-----Input-----\nInput is given from Standard Input in the following format:\na b\n-----Output-----\nPrint x rounded up to the nearest integer.\n-----Sample Input-----\n1 3\n-----Sample Output-----\n2\nThe average of 1 and 3 is 2.0, and it will be rounded up to the nearest integer, 2.\n\ndef",
        "answer": "def average(a, b):\n    x = (a + b) / 2\n    return int(x)",
        "difficulty": "introductory"
    },
    {
        "task_id": 4613,
        "prompt": "Complete the Python function given the prompt below:You are given an undirected connected graph with N vertices and M edges that does not contain self-loops and double edges.\nThe i-th edge (1 \\leq i \\leq M) connects Vertex a_i and Vertex b_i.  \nAn edge whose removal disconnects the graph is called a bridge.\nFind the number of the edges that are bridges among the M edges.  \n-----Notes-----\n - A self-loop is an edge i such that a_i=b_i (1 \\leq i \\leq M).\n - Double edges are a pair of edges i,j such that a_i=a_j and b_i=b_j (1 \\leq i<j \\leq M).\n - An undirected graph is said to be connected when there exists a path between every pair of vertices.\n-----Constraints-----\n - 2 \\leq N \\leq 50\n - N-1 \\leq M \\leq min(N(N\u22121)\u20442,50)\n - 1 \\leq a_i<b_i \\leq N\n - The given graph does not contain self-loops and double edges.\n - The given graph is connected.\n-----Input-----\nInput is given from Standard Input in the following format:  \nN M  \na_1 b_1  \na_2 b_2\n:  \na_M b_M\n-----Output-----\nPrint the number of the edges that are bridges among the M edges.\n-----Sample Input-----\n7 7\n1 3\n2 7\n3 4\n4 5\n4 6\n5 6\n6 7\n-----Sample Output-----\n4\nThe figure below shows the given graph:\nThe edges shown in red are bridges. There are four of them.\n\ndef",
        "answer": "def bridge_edges(n, m, edges):\n    # Write your code here\n    graph = {}\n    for i in range(1, n+1):\n        graph[i] = []\n    for edge in edges:\n        graph[edge[0]].append(edge[1])\n        graph[edge[1]].append(edge[0])",
        "difficulty": "introductory"
    },
    {
        "task_id": 4614,
        "prompt": "Complete the Python function given the prompt below:You are given three integers, A, B and C.\nAmong them, two are the same, but the remaining one is different from the rest.\nFor example, when A=5,B=7,C=5, A and C are the same, but B is different.\nFind the one that is different from the rest among the given three integers.  \n-----Constraints-----\n - -100 \\leq A,B,C \\leq 100 \n - A, B and C are integers.\n - The input satisfies the condition in the statement.\n-----Input-----\nInput is given from Standard Input in the following format:  \nA B C\n-----Output-----\nAmong A, B and C, print the integer that is different from the rest.\n-----Sample Input-----\n5 7 5\n-----Sample Output-----\n7\nThis is the same case as the one in the statement.\n\ndef",
        "answer": "def find_diff(a, b, c):\n    if a == b:\n        if a == c:\n            return a\n        else:\n            return c\n    else:\n        if a == c:\n            return b\n        else:\n            return c",
        "difficulty": "introductory"
    },
    {
        "task_id": 4615,
        "prompt": "Complete the Python function given the prompt below:Snuke is making sugar water in a beaker.\nInitially, the beaker is empty. Snuke can perform the following four types of operations any number of times. He may choose not to perform some types of operations.\n - Operation 1: Pour 100A grams of water into the beaker.\n - Operation 2: Pour 100B grams of water into the beaker.\n - Operation 3: Put C grams of sugar into the beaker.\n - Operation 4: Put D grams of sugar into the beaker.\nIn our experimental environment, E grams of sugar can dissolve into 100 grams of water.\nSnuke will make sugar water with the highest possible density.\nThe beaker can contain at most F grams of substances (water and sugar combined), and there must not be any undissolved sugar in the beaker.\nFind the mass of the sugar water Snuke will make, and the mass of sugar dissolved in it.\nIf there is more than one candidate, any of them will be accepted.\nWe remind you that the sugar water that contains a grams of water and b grams of sugar is \\frac{100b}{a + b} percent.\nAlso, in this problem, pure water that does not contain any sugar is regarded as 0 percent density sugar water.\n-----Constraints-----\n - 1 \\leq A < B \\leq 30\n - 1 \\leq C < D \\leq 30\n - 1 \\leq E \\leq 100\n - 100A \\leq F \\leq 3 000\n - A, B, C, D, E and F are all integers.\n-----Inputs-----\nInput is given from Standard Input in the following format:\nA B C D E F\n-----Outputs-----\nPrint two integers separated by a space.\nThe first integer should be the mass of the desired sugar water, and the second should be the mass of the sugar dissolved in it.\n-----Sample Input-----\n1 2 10 20 15 200\n-----Sample Output-----\n110 10\nIn this environment, 15 grams of sugar can dissolve into 100 grams of water, and the beaker can contain at most 200 grams of substances.\nWe can make 110 grams of sugar water by performing Operation 1 once and Operation 3 once.\nIt is not possible to make sugar water with higher density.\nFor example, the following sequences of operations are infeasible:\n - If we perform Operation 1 once and Operation 4 once, there will be undissolved sugar in the beaker.\n - If we perform Operation 2 once and Operation 3 three times, the mass of substances in the beaker will exceed 200 grams.\n\ndef",
        "answer": "def sugar_water(a, b, c, d, e, f):\n    sugar_water = 0\n    sugar_dissolved = 0\n    for i in range(1, f + 1):\n        if i % a == 0:\n            sugar_water += 100\n        if i % b == 0:\n            sugar_water += 100\n        if i % c == 0:\n            sugar_dissolved += d\n        if i % d == 0:\n            sugar_dissolved += c\n    return sugar_water, sugar_dissolved",
        "difficulty": "introductory"
    },
    {
        "task_id": 4616,
        "prompt": "Complete the Python function given the prompt below:The word internationalization is sometimes abbreviated to i18n.\nThis comes from the fact that there are 18 letters between the first i and the last n.\nYou are given a string s of length at least 3 consisting of lowercase English letters.\nAbbreviate s in the same way.\n-----Constraints-----\n - 3 \u2264 |s| \u2264 100 (|s| denotes the length of s.)\n - s consists of lowercase English letters.\n-----Input-----\nInput is given from Standard Input in the following format:\ns\n-----Output-----\nPrint the abbreviation of s.\n-----Sample Input-----\ninternationalization\n-----Sample Output-----\ni18n\n\n\ndef",
        "answer": "def abbreviation(s):\n    return s[0] + str(len(s) - 2) + s[-1]",
        "difficulty": "introductory"
    },
    {
        "task_id": 4617,
        "prompt": "Complete the Python function given the prompt below:You are given a grid with 2 rows and 3 columns of squares.\nThe color of the square at the i-th row and j-th column is represented by the character C_{ij}.\nWrite a program that prints YES if this grid remains the same when rotated 180 degrees, and prints NO otherwise.\n-----Constraints-----\n - C_{i,j}(1 \\leq i \\leq 2, 1 \\leq j \\leq 3) is a lowercase English letter.\n-----Input-----\nInput is given from Standard Input in the following format:\nC_{11}C_{12}C_{13}\nC_{21}C_{22}C_{23}\n-----Output-----\nPrint YES if this grid remains the same when rotated 180 degrees; print NO otherwise.\n-----Sample Input-----\npot\ntop\n-----Sample Output-----\nYES\nThis grid remains the same when rotated 180 degrees.\n\ndef",
        "answer": "def rotate_grid(grid):\n    new_grid = []\n    for i in range(len(grid[0])):\n        new_grid.append([])\n        for j in range(len(grid)):\n            new_grid[i].append(grid[j][i])\n    return new_grid",
        "difficulty": "introductory"
    },
    {
        "task_id": 4618,
        "prompt": "Complete the Python function given the prompt below:You are given a string s.\nAmong the different substrings of s, print the K-th lexicographically smallest one.\nA substring of s is a string obtained by taking out a non-empty contiguous part in s.\nFor example, if s = ababc, a, bab and ababc are substrings of s, while ac, z and an empty string are not.\nAlso, we say that substrings are different when they are different as strings.\nLet X = x_{1}x_{2}...x_{n} and Y = y_{1}y_{2}...y_{m} be two distinct strings. X is lexicographically larger than Y if and only if Y is a prefix of X or x_{j} > y_{j} where j is the smallest integer such that x_{j} \\neq y_{j}.\n-----Constraints-----\n - 1 \u2264 |s| \u2264 5000\n - s consists of lowercase English letters.\n - 1 \u2264 K \u2264 5\n - s has at least K different substrings.\n-----Partial Score-----\n - 200 points will be awarded as a partial score for passing the test set satisfying |s| \u2264 50.\n-----Input-----\nInput is given from Standard Input in the following format:\ns\nK\n-----Output-----\nPrint the K-th lexicographically smallest substring of K.\n-----Sample Input-----\naba\n4\n-----Sample Output-----\nb\ns has five substrings: a, b, ab, ba and aba.\nAmong them, we should print the fourth smallest one, b.\nNote that we do not count a twice.\n\ndef",
        "answer": "def lexicographically_smallest_substring(s, k):\n    # Write your code here\n    substrings = []\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            substrings.append(s[i:j+1])\n    substrings.sort()\n    return substrings[k-1]",
        "difficulty": "introductory"
    },
    {
        "task_id": 4619,
        "prompt": "Complete the Python function given the prompt below:There is a rectangle in the xy-plane, with its lower left corner at (0, 0) and its upper right corner at (W, H). Each of its sides is parallel to the x-axis or y-axis. Initially, the whole region within the rectangle is painted white.\nSnuke plotted N points into the rectangle. The coordinate of the i-th (1 \u2266 i \u2266 N) point was (x_i, y_i).\nThen, he created an integer sequence a of length N, and for each 1 \u2266 i \u2266 N, he painted some region within the rectangle black, as follows:\n - If a_i = 1, he painted the region satisfying x < x_i within the rectangle.\n - If a_i = 2, he painted the region satisfying x > x_i within the rectangle.\n - If a_i = 3, he painted the region satisfying y < y_i within the rectangle.\n - If a_i = 4, he painted the region satisfying y > y_i within the rectangle.\nFind the area of the white region within the rectangle after he finished painting.\n-----Constraints-----\n - 1 \u2266 W, H \u2266 100\n - 1 \u2266 N \u2266 100\n - 0 \u2266 x_i \u2266 W (1 \u2266 i \u2266 N)\n - 0 \u2266 y_i \u2266 H (1 \u2266 i \u2266 N)\n - W, H (21:32, added), x_i and y_i are integers.\n - a_i (1 \u2266 i \u2266 N) is 1, 2, 3 or 4.\n-----Input-----\nThe input is given from Standard Input in the following format:\nW H N\nx_1 y_1 a_1\nx_2 y_2 a_2\n:\nx_N y_N a_N\n-----Output-----\nPrint the area of the white region within the rectangle after Snuke finished painting.\n-----Sample Input-----\n5 4 2\n2 1 1\n3 3 4\n-----Sample Output-----\n9\nThe figure below shows the rectangle before Snuke starts painting.\nFirst, as (x_1, y_1) = (2, 1) and a_1 = 1, he paints the region satisfying x < 2 within the rectangle:\nThen, as (x_2, y_2) = (3, 3) and a_2 = 4, he paints the region satisfying y > 3 within the rectangle:\nNow, the area of the white region within the rectangle is 9.\n\ndef",
        "answer": "def paint_region(w, h, n, x, y, a):\n    x_min = min(x)\n    x_max = max(x)\n    y_min = min(y)\n    y_max = max(y)\n    area = 0\n    for i in range(n):\n        if a[i] == 1:\n            area += (x_max - x_min) * (y[i] - y_min)\n        elif a[i] == 2:\n            area += (x_max - x_min) * (y_max - y[i])\n        elif a[i] == 3:\n            area += (x[i] - x_min) * (y_max - y[i])\n        elif a[i] == 4:\n            area += (x[i] - x_min) * (y[i] - y_min)\n    return area",
        "difficulty": "introductory"
    },
    {
        "task_id": 4620,
        "prompt": "Complete the Python function given the prompt below:A railroad running from west to east in Atcoder Kingdom is now complete.\nThere are N stations on the railroad, numbered 1 through N from west to east.\nTomorrow, the opening ceremony of the railroad will take place.\nOn this railroad, for each integer i such that 1\u2264i\u2264N-1, there will be trains that run from Station i to Station i+1 in C_i seconds. No other trains will be operated.\nThe first train from Station i to Station i+1 will depart Station i S_i seconds after the ceremony begins. Thereafter, there will be a train that departs Station i every F_i seconds.\nHere, it is guaranteed that F_i divides S_i.\nThat is, for each Time t satisfying S_i\u2264t and t\uff05F_i=0, there will be a train that departs Station i t seconds after the ceremony begins and arrives at Station i+1 t+C_i seconds after the ceremony begins, where A\uff05B denotes A modulo B, and there will be no other trains.\nFor each i, find the earliest possible time we can reach Station N if we are at Station i when the ceremony begins, ignoring the time needed to change trains.\n-----Constraints-----\n - 1\u2264N\u2264500\n - 1\u2264C_i\u2264100\n - 1\u2264S_i\u226410^5\n - 1\u2264F_i\u226410\n - S_i\uff05F_i=0\n - All input values are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nC_1 S_1 F_1\n:\nC_{N-1} S_{N-1} F_{N-1}\n-----Output-----\nPrint N lines. Assuming that we are at Station i (1\u2264i\u2264N) when the ceremony begins, if the earliest possible time we can reach Station N is x seconds after the ceremony begins, the i-th line should contain x.\n-----Sample Input-----\n3\n6 5 1\n1 10 1\n-----Sample Output-----\n12\n11\n0\nWe will travel from Station 1 as follows:\n - 5 seconds after the beginning: take the train to Station 2.\n - 11 seconds: arrive at Station 2.\n - 11 seconds: take the train to Station 3.\n - 12 seconds: arrive at Station 3.\nWe will travel from Station 2 as follows:\n - 10 seconds: take the train to Station 3.\n - 11 seconds: arrive at Station 3.\nNote that we should print 0 for Station 3.\n\ndef",
        "answer": "def main():\n    n = int(input())\n    c = [0] * n\n    s = [0] * n\n    f = [0] * n\n    for i in range(n):\n        c[i], s[i], f[i] = map(int, input().split())\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(n):\n        dp[i][i + 1] = max(dp[i][i + 1], s[i] + dp[i][i])\n    for i in range(n - 1, -1, -1):\n        for j in range(i + 2, n + 1):\n            dp[i][j] = max(dp[i][j], dp[i][j - 1] + c[j - 1])\n    for i in range(n):\n        print(dp[i][n])",
        "difficulty": "introductory"
    },
    {
        "task_id": 4621,
        "prompt": "Complete the Python function given the prompt below:There is an image with a height of H pixels and a width of W pixels. Each of the pixels is represented by either. or *. The character representing the pixel at the i-th row from the top and the j-th column from the left, is denoted by C_{i,j}.\nExtend this image vertically so that its height is doubled. That is, print a image with a height of 2H pixels and a width of W pixels where the pixel at the i-th row and j-th column is equal to C_{(i+1)/2,j} (the result of division is rounded down).\n-----Constraints-----\n - 1\u2266H, W\u2266100\n - C_{i,j} is either. or *.\n-----Input-----\nThe input is given from Standard Input in the following format:\nH W\nC_{1,1}...C_{1,W}\n:\nC_{H,1}...C_{H,W}\n-----Output-----\nPrint the extended image.\n-----Sample Input-----\n2 2\n*.\n.*\n-----Sample Output-----\n*.\n*.\n.*\n.*\n\n\ndef",
        "answer": "def extend_image(h, w):\n    for i in range(h):\n        for j in range(w):\n            if i % 2 == 0:\n                print(C[i][j], end=\"\")\n            else:\n                print(C[i][j], end=\"\")\n        print()",
        "difficulty": "introductory"
    },
    {
        "task_id": 4622,
        "prompt": "Complete the Python function given the prompt below:Given is a sequence of integers A_1, A_2,..., A_N.\nIf its elements are pairwise distinct, print YES; otherwise, print NO.\n-----Constraints-----\n - 2 \u2264 N \u2264 200000\n - 1 \u2264 A_i \u2264 10^9\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nA_1... A_N\n-----Output-----\nIf the elements of the sequence are pairwise distinct, print YES; otherwise, print NO.\n-----Sample Input-----\n5\n2 6 1 4 5\n-----Sample Output-----\nYES\nThe elements are pairwise distinct.\n\ndef",
        "answer": "def are_distinct(arr):\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                return False\n    return True",
        "difficulty": "introductory"
    },
    {
        "task_id": 4623,
        "prompt": "Complete the Python function given the prompt below:There are $n$ people who want to participate in a boat competition. The weight of the $i$-th participant is $w_i$. Only teams consisting of two people can participate in this competition. As an organizer, you think that it's fair to allow only teams with the same total weight.\nSo, if there are $k$ teams $(a_1, b_1)$, $(a_2, b_2)$, $\\dots$, $(a_k, b_k)$, where $a_i$ is the weight of the first participant of the $i$-th team and $b_i$ is the weight of the second participant of the $i$-th team, then the condition $a_1 + b_1 = a_2 + b_2 = \\dots = a_k + b_k = s$, where $s$ is the total weight of each team, should be satisfied.\nYour task is to choose such $s$ that the number of teams people can create is the maximum possible. Note that each participant can be in no more than one team.\nYou have to answer $t$ independent test cases.\n-----Input-----\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 1000$) \u2014 the number of test cases. Then $t$ test cases follow.\nThe first line of the test case contains one integer $n$ ($1 \\le n \\le 50$) \u2014 the number of participants. The second line of the test case contains $n$ integers $w_1, w_2, \\dots, w_n$ ($1 \\le w_i \\le n$), where $w_i$ is the weight of the $i$-th participant.\n-----Output-----\nFor each test case, print one integer $k$: the maximum number of teams people can compose with the total weight $s$, if you choose $s$ optimally.\n-----Example-----\nInput\n5\n5\n1 2 3 4 5\n8\n6 6 6 6 6 6 8 8\n8\n1 2 2 1 2 1 1 2\n3\n1 3 3\n6\n1 1 3 4 2 2\nOutput\n2\n3\n4\n1\n2\n-----Note-----\nIn the first test case of the example, we can reach the optimal answer for $s=6$. Then the first boat is used by participants $1$ and $5$ and the second boat is used by participants $2$ and $4$ (indices are the same as weights).\nIn the second test case of the example, we can reach the optimal answer for $s=12$. Then first $6$ participants can form $3$ pairs.\nIn the third test case of the example, we can reach the optimal answer for $s=3$. The answer is $4$ because we have $4$ participants with weight $1$ and $4$ participants with weight $2$.\nIn the fourth test case of the example, we can reach the optimal answer for $s=4$ or $s=6$.\nIn the fifth test case of the example, we can reach the optimal answer for $s=3$. Note that participant with weight $3$ can't use the boat because there is no suitable pair for him in the list.\n\ndef",
        "answer": "def solution(n, w):\n    w.sort()\n    s = sum(w)\n    dp = [[0 for _ in range(s+1)] for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, s+1):\n            if j < w[i-1]:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i-1][j-w[i-1]]+1)\n    return dp[n][s]",
        "difficulty": "introductory"
    },
    {
        "task_id": 4624,
        "prompt": "Complete the Python function given the prompt below:Vasya goes to visit his classmate Petya. Vasya knows that Petya's apartment number is $n$. \nThere is only one entrance in Petya's house and the distribution of apartments is the following: the first floor contains $2$ apartments, every other floor contains $x$ apartments each. Apartments are numbered starting from one, from the first floor. I.e. apartments on the first floor have numbers $1$ and $2$, apartments on the second floor have numbers from $3$ to $(x + 2)$, apartments on the third floor have numbers from $(x + 3)$ to $(2 \\cdot x + 2)$, and so on.\nYour task is to find the number of floor on which Petya lives. Assume that the house is always high enough to fit at least $n$ apartments.\nYou have to answer $t$ independent test cases.\n-----Input-----\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 1000$) \u2014 the number of test cases. Then $t$ test cases follow.\nThe only line of the test case contains two integers $n$ and $x$ ($1 \\le n, x \\le 1000$) \u2014 the number of Petya's apartment and the number of apartments on each floor of the house except the first one (there are two apartments on the first floor).\n-----Output-----\nFor each test case, print the answer: the number of floor on which Petya lives.\n-----Example-----\nInput\n4\n7 3\n1 5\n22 5\n987 13\nOutput\n3\n1\n5\n77\n-----Note-----\nConsider the first test case of the example: the first floor contains apartments with numbers $1$ and $2$, the second one contains apartments with numbers $3$, $4$ and $5$, the third one contains apartments with numbers $6$, $7$ and $8$. Therefore, Petya lives on the third floor.\nIn the second test case of the example, Petya lives in the apartment $1$ which is on the first floor.\n\ndef",
        "answer": "def apartment(n, x):\n    return n // (x + 1)",
        "difficulty": "introductory"
    },
    {
        "task_id": 4625,
        "prompt": "Complete the Python function given the prompt below:You want to perform the combo on your opponent in one popular fighting game. The combo is the string $s$ consisting of $n$ lowercase Latin letters. To perform the combo, you have to press all buttons in the order they appear in $s$. I.e. if $s=$\"abca\" then you have to press 'a', then 'b', 'c' and 'a' again.\nYou know that you will spend $m$ wrong tries to perform the combo and during the $i$-th try you will make a mistake right after $p_i$-th button ($1 \\le p_i < n$) (i.e. you will press first $p_i$ buttons right and start performing the combo from the beginning). It is guaranteed that during the $m+1$-th try you press all buttons right and finally perform the combo.\nI.e. if $s=$\"abca\", $m=2$ and $p = [1, 3]$ then the sequence of pressed buttons will be 'a' (here you're making a mistake and start performing the combo from the beginning), 'a', 'b', 'c', (here you're making a mistake and start performing the combo from the beginning), 'a' (note that at this point you will not perform the combo because of the mistake), 'b', 'c', 'a'.\nYour task is to calculate for each button (letter) the number of times you'll press it.\nYou have to answer $t$ independent test cases.\n-----Input-----\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 10^4$) \u2014 the number of test cases.\nThen $t$ test cases follow.\nThe first line of each test case contains two integers $n$ and $m$ ($2 \\le n \\le 2 \\cdot 10^5$, $1 \\le m \\le 2 \\cdot 10^5$) \u2014 the length of $s$ and the number of tries correspondingly.\nThe second line of each test case contains the string $s$ consisting of $n$ lowercase Latin letters.\nThe third line of each test case contains $m$ integers $p_1, p_2, \\dots, p_m$ ($1 \\le p_i < n$) \u2014 the number of characters pressed right during the $i$-th try.\nIt is guaranteed that the sum of $n$ and the sum of $m$ both does not exceed $2 \\cdot 10^5$ ($\\sum n \\le 2 \\cdot 10^5$, $\\sum m \\le 2 \\cdot 10^5$).\nIt is guaranteed that the answer for each letter does not exceed $2 \\cdot 10^9$.\n-----Output-----\nFor each test case, print the answer \u2014 $26$ integers: the number of times you press the button 'a', the number of times you press the button 'b', $\\dots$, the number of times you press the button 'z'.\n-----Example-----\nInput\n3\n4 2\nabca\n1 3\n10 5\ncodeforces\n2 8 3 2 9\n26 10\nqwertyuioplkjhgfdsazxcvbnm\n20 10 1 2 3 5 10 5 9 4\nOutput\n4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 9 4 5 3 0 0 0 0 0 0 0 0 9 0 0 3 1 0 0 0 0 0 0 0 \n2 1 1 2 9 2 2 2 5 2 2 2 1 1 5 4 11 8 2 7 5 1 10 1 5 2 \n-----Note-----\nThe first test case is described in the problem statement. Wrong tries are \"a\", \"abc\" and the final try is \"abca\". The number of times you press 'a' is $4$, 'b' is $2$ and 'c' is $2$.\nIn the second test case, there are five wrong tries: \"co\", \"codeforc\", \"cod\", \"co\", \"codeforce\" and the final try is \"codeforces\". The number of times you press 'c' is $9$, 'd' is $4$, 'e' is $5$, 'f' is $3$, 'o' is $9$, 'r' is $3$ and's' is $1$.\n\ndef",
        "answer": "def combo(s, n, m, p):\n    # Write your code here\n    # print(s, n, m, p)\n    # print(s[0:p[0]])\n    # print(s[p[0]:p[0]+p[1]])\n    # print(s[p[0]+p[1]:])\n    # print(s[0:p[0]])\n    # print(s[p[0]:p[0]+p[1]])\n    # print(s[p[0]+p[1]:])\n    # print(s[0:p[0]])\n    # print(s[p[0]:p[0]+p[1]])\n    # print(s[p[0]+p[1]:])\n    # print(s[0:p[0]])\n    # print(s[p[0]:p[0]+p[1]])\n    # print(s[p[0]+p[1]:])\n    # print(s[0:p[0]])\n    # print(s[p[0]:p[0]+p[1]])\n    # print(s[p[0]+p[1]:])\n    # print(s[0:p[0]])\n    # print(s[p[0]:p[0]+p[1]])\n    # print(s[p[0]+p[1]:])\n    # print(s[0:p[0]])\n    # print(s[p[0]:p[0]+p[1]])\n    # print(s[p[0]+p[1]:])\n    # print(s[0:p[0]])\n    # print(s[p[0]:p[0]+p[1]])\n    # print(s[p[0]+p[1]:])\n    # print(s[0:p[0]])\n    # print(s[p[0]:p[0]+p[1]])\n    # print(s[p[0]+p[1]:])\n    # print(s[0:p[0]])\n    # print(s",
        "difficulty": "introductory"
    },
    {
        "task_id": 4626,
        "prompt": "Complete the Python function given the prompt below:Three friends are going to meet each other. Initially, the first friend stays at the position $x = a$, the second friend stays at the position $x = b$ and the third friend stays at the position $x = c$ on the coordinate axis $Ox$.\nIn one minute each friend independently from other friends can change the position $x$ by $1$ to the left or by $1$ to the right (i.e. set $x := x - 1$ or $x := x + 1$) or even don't change it.\nLet's introduce the total pairwise distance \u2014 the sum of distances between each pair of friends. Let $a'$, $b'$ and $c'$ be the final positions of the first, the second and the third friend, correspondingly. Then the total pairwise distance is $|a' - b'| + |a' - c'| + |b' - c'|$, where $|x|$ is the absolute value of $x$.\nFriends are interested in the minimum total pairwise distance they can reach if they will move optimally. Each friend will move no more than once. So, more formally, they want to know the minimum total pairwise distance they can reach after one minute.\nYou have to answer $q$ independent test cases.\n-----Input-----\nThe first line of the input contains one integer $q$ ($1 \\le q \\le 1000$) \u2014 the number of test cases.\nThe next $q$ lines describe test cases. The $i$-th test case is given as three integers $a, b$ and $c$ ($1 \\le a, b, c \\le 10^9$) \u2014 initial positions of the first, second and third friend correspondingly. The positions of friends can be equal.\n-----Output-----\nFor each test case print the answer on it \u2014 the minimum total pairwise distance (the minimum sum of distances between each pair of friends) if friends change their positions optimally. Each friend will move no more than once. So, more formally, you have to find the minimum total pairwise distance they can reach after one minute.\n-----Example-----\nInput\n8\n3 3 4\n10 20 30\n5 5 5\n2 4 3\n1 1000000000 1000000000\n1 1000000000 999999999\n3 2 5\n3 2 6\nOutput\n0\n36\n0\n0\n1999999994\n1999999994\n2\n4\n\ndef",
        "answer": "def distance(a, b, c):\n    return abs(a - b) + abs(a - c) + abs(b - c)",
        "difficulty": "introductory"
    },
    {
        "task_id": 4627,
        "prompt": "Complete the Python function given the prompt below:We call two numbers $x$ and $y$ similar if they have the same parity (the same remainder when divided by $2$), or if $|x-y|=1$. For example, in each of the pairs $(2, 6)$, $(4, 3)$, $(11, 7)$, the numbers are similar to each other, and in the pairs $(1, 4)$, $(3, 12)$, they are not.\nYou are given an array $a$ of $n$ ($n$ is even) positive integers. Check if there is such a partition of the array into pairs that each element of the array belongs to exactly one pair and the numbers in each pair are similar to each other.\nFor example, for the array $a = [11, 14, 16, 12]$, there is a partition into pairs $(11, 12)$ and $(14, 16)$. The numbers in the first pair are similar because they differ by one, and in the second pair because they are both even.\n-----Input-----\nThe first line contains a single integer $t$ ($1 \\le t \\le 1000$)\u00a0\u2014 the number of test cases. Then $t$ test cases follow.\nEach test case consists of two lines.\nThe first line contains an even positive integer $n$ ($2 \\le n \\le 50$)\u00a0\u2014 length of array $a$.\nThe second line contains $n$ positive integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 100$).\n-----Output-----\nFor each test case print:  YES if the such a partition exists,  NO otherwise. \nThe letters in the words YES and NO can be displayed in any case.\n-----Example-----\nInput\n7\n4\n11 14 16 12\n2\n1 8\n4\n1 1 1 1\n4\n1 2 5 6\n2\n12 13\n6\n1 6 3 10 5 8\n6\n1 12 3 10 5 8\nOutput\nYES\nNO\nYES\nYES\nYES\nYES\nNO\n-----Note-----\nThe first test case was explained in the statement.\nIn the second test case, the two given numbers are not similar.\nIn the third test case, any partition is suitable.\n\ndef",
        "answer": "def parity(x):\n    return x % 2",
        "difficulty": "introductory"
    },
    {
        "task_id": 4628,
        "prompt": "Complete the Python function given the prompt below:You are a mayor of Berlyatov. There are $n$ districts and $m$ two-way roads between them. The $i$-th road connects districts $x_i$ and $y_i$. The cost of travelling along this road is $w_i$. There is some path between each pair of districts, so the city is connected.\nThere are $k$ delivery routes in Berlyatov. The $i$-th route is going from the district $a_i$ to the district $b_i$. There is one courier on each route and the courier will always choose the cheapest (minimum by total cost) path from the district $a_i$ to the district $b_i$ to deliver products.\nThe route can go from the district to itself, some couriers routes can coincide (and you have to count them independently).\nYou can make at most one road to have cost zero (i.e. you choose at most one road and change its cost with $0$).\nLet $d(x, y)$ be the cheapest cost of travel between districts $x$ and $y$.\nYour task is to find the minimum total courier routes cost you can achieve, if you optimally select the some road and change its cost with $0$. In other words, you have to find the minimum possible value of $\\sum\\limits_{i = 1}^{k} d(a_i, b_i)$ after applying the operation described above optimally.\n-----Input-----\nThe first line of the input contains three integers $n$, $m$ and $k$ ($2 \\le n \\le 1000$; $n - 1 \\le m \\le min(1000, \\frac{n(n-1)}{2})$; $1 \\le k \\le 1000$) \u2014 the number of districts, the number of roads and the number of courier routes.\nThe next $m$ lines describe roads. The $i$-th road is given as three integers $x_i$, $y_i$ and $w_i$ ($1 \\le x_i, y_i \\le n$; $x_i \\ne y_i$; $1 \\le w_i \\le 1000$), where $x_i$ and $y_i$ are districts the $i$-th road connects and $w_i$ is its cost. It is guaranteed that there is some path between each pair of districts, so the city is connected. It is also guaranteed that there is at most one road between each pair of districts.\nThe next $k$ lines describe courier routes. The $i$-th route is given as two integers $a_i$ and $b_i$ ($1 \\le a_i, b_i \\le n$) \u2014 the districts of the $i$-th route. The route can go from the district to itself, some couriers routes can coincide (and you have to count them independently).\n-----Output-----\nPrint one integer \u2014 the minimum total courier routes cost you can achieve (i.e. the minimum value $\\sum\\limits_{i=1}^{k} d(a_i, b_i)$, where $d(x, y)$ is the cheapest cost of travel between districts $x$ and $y$) if you can make some (at most one) road cost zero.\n-----Examples-----\nInput\n6 5 2\n1 2 5\n2 3 7\n2 4 4\n4 5 2\n4 6 8\n1 6\n5 3\nOutput\n22\nInput\n5 5 4\n1 2 5\n2 3 4\n1 4 3\n4 3 7\n3 5 2\n1 5\n1 3\n3 3\n1 5\nOutput\n13\n-----Note-----\nThe picture corresponding to the first example:\n[Image]\nThere, you can choose either the road $(2, 4)$ or the road $(4, 6)$. Both options lead to the total cost $22$.\nThe picture corresponding to the second example:\n$A$\nThere, you can choose the road $(3, 4)$. This leads to the total cost $13$.\n\ndef",
        "answer": "def roads(roads):\n    roads = roads.split('\\n')\n    roads = roads[1:]\n    roads = [road.split() for road in roads]\n    roads = [[int(road[0]), int(road[1]), int(road[2])] for road in roads]\n    return roads",
        "difficulty": "introductory"
    },
    {
        "task_id": 4629,
        "prompt": "Complete the Python function given the prompt below:The only difference between easy and hard versions is the maximum value of $n$.\nYou are given a positive integer number $n$. You really love good numbers so you want to find the smallest good number greater than or equal to $n$.\nThe positive integer is called good if it can be represented as a sum of distinct powers of $3$ (i.e. no duplicates of powers of $3$ are allowed).\nFor example:  $30$ is a good number: $30 = 3^3 + 3^1$,  $1$ is a good number: $1 = 3^0$,  $12$ is a good number: $12 = 3^2 + 3^1$,  but $2$ is not a good number: you can't represent it as a sum of distinct powers of $3$ ($2 = 3^0 + 3^0$),  $19$ is not a good number: you can't represent it as a sum of distinct powers of $3$ (for example, the representations $19 = 3^2 + 3^2 + 3^0 = 3^2 + 3^1 + 3^1 + 3^1 + 3^0$ are invalid),  $20$ is also not a good number: you can't represent it as a sum of distinct powers of $3$ (for example, the representation $20 = 3^2 + 3^2 + 3^0 + 3^0$ is invalid). \nNote, that there exist other representations of $19$ and $20$ as sums of powers of $3$ but none of them consists of distinct powers of $3$.\nFor the given positive integer $n$ find such smallest $m$ ($n \\le m$) that $m$ is a good number.\nYou have to answer $q$ independent queries.\n-----Input-----\nThe first line of the input contains one integer $q$ ($1 \\le q \\le 500$) \u2014 the number of queries. Then $q$ queries follow.\nThe only line of the query contains one integer $n$ ($1 \\le n \\le 10^4$).\n-----Output-----\nFor each query, print such smallest integer $m$ (where $n \\le m$) that $m$ is a good number.\n-----Example-----\nInput\n7\n1\n2\n6\n13\n14\n3620\n10000\nOutput\n1\n3\n9\n13\n27\n6561\n19683\n\ndef",
        "answer": "def good_number(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 12\n    if n == 12:\n        return 13\n    if n == 13:\n        return 14\n    if n == 14:\n        return 15\n    if n == 15:\n        return 16\n    if n == 16:\n        return 17\n    if n == 17:\n        return 18\n    if n == 18:\n        return 19\n    if n == 19:\n        return 20\n    if n == 20:\n        return 21\n    if n == 21:\n        return 22\n    if n == 22:\n        return 23\n    if n == 23:\n        return 24\n    if n == 24:\n        return 25\n    if n == 25:\n        return 26\n    if n == 26:\n        return 27\n    if n == 27:\n        return 28\n    if n == 28:\n        return 29\n    if n == 29:\n        return 30\n    if n == 30:\n        return 31\n    if n == 31:\n        return 32\n    if n == 32:\n        return 33\n    if n == 33:\n        return 34\n    if n == 34:\n        return 35\n    if n == 35:\n        return 36\n    if n == 36:\n        return 37\n    if n == 37:\n        return 38\n    if n == 38:\n        return 39\n    if n == 39:\n        return 40\n    if n == 40:\n        return 41\n    if n == 41:\n        return 42\n    if n == 42:\n        return 43\n    if n == 43:\n        return 44\n    if n == 44:\n        return 45\n    if n == 45:\n        return",
        "difficulty": "introductory"
    },
    {
        "task_id": 4630,
        "prompt": "Complete the Python function given the prompt below:The only difference between easy and hard versions is constraints.\nThere are $n$ kids, each of them is reading a unique book. At the end of any day, the $i$-th kid will give his book to the $p_i$-th kid (in case of $i = p_i$ the kid will give his book to himself). It is guaranteed that all values of $p_i$ are distinct integers from $1$ to $n$ (i.e. $p$ is a permutation). The sequence $p$ doesn't change from day to day, it is fixed.\nFor example, if $n=6$ and $p=[4, 6, 1, 3, 5, 2]$ then at the end of the first day the book of the $1$-st kid will belong to the $4$-th kid, the $2$-nd kid will belong to the $6$-th kid and so on. At the end of the second day the book of the $1$-st kid will belong to the $3$-th kid, the $2$-nd kid will belong to the $2$-th kid and so on.\nYour task is to determine the number of the day the book of the $i$-th child is returned back to him for the first time for every $i$ from $1$ to $n$.\nConsider the following example: $p = [5, 1, 2, 4, 3]$. The book of the $1$-st kid will be passed to the following kids:  after the $1$-st day it will belong to the $5$-th kid,  after the $2$-nd day it will belong to the $3$-rd kid,  after the $3$-rd day it will belong to the $2$-nd kid,  after the $4$-th day it will belong to the $1$-st kid. \nSo after the fourth day, the book of the first kid will return to its owner. The book of the fourth kid will return to him for the first time after exactly one day.\nYou have to answer $q$ independent queries.\n-----Input-----\nThe first line of the input contains one integer $q$ ($1 \\le q \\le 1000$) \u2014 the number of queries. Then $q$ queries follow.\nThe first line of the query contains one integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) \u2014 the number of kids in the query. The second line of the query contains $n$ integers $p_1, p_2, \\dots, p_n$ ($1 \\le p_i \\le n$, all $p_i$ are distinct, i.e. $p$ is a permutation), where $p_i$ is the kid which will get the book of the $i$-th kid.\nIt is guaranteed that $\\sum n \\le 2 \\cdot 10^5$ (sum of $n$ over all queries does not exceed $2 \\cdot 10^5$).\n-----Output-----\nFor each query, print the answer on it: $n$ integers $a_1, a_2, \\dots, a_n$, where $a_i$ is the number of the day the book of the $i$-th child is returned back to him for the first time in this query.\n-----Example-----\nInput\n6\n5\n1 2 3 4 5\n3\n2 3 1\n6\n4 6 2 1 5 3\n1\n1\n4\n3 4 1 2\n5\n5 1 2 4 3\nOutput\n1 1 1 1 1 \n3 3 3 \n2 3 3 2 1 3 \n1 \n2 2 2 2 \n4 4 4 1 4\n\ndef",
        "answer": "def permutation(lst):\n    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return [lst]\n    l = []\n    for i in range(len(lst)):\n        m = lst[i]\n        remLst = lst[:i] + lst[i+1:]\n        for p in permutation(remLst):\n            l.append([m] + p)\n    return l",
        "difficulty": "introductory"
    },
    {
        "task_id": 4631,
        "prompt": "Complete the Python function given the prompt below:There are $n$ Christmas trees on an infinite number line. The $i$-th tree grows at the position $x_i$. All $x_i$ are guaranteed to be distinct.\nEach integer point can be either occupied by the Christmas tree, by the human or not occupied at all. Non-integer points cannot be occupied by anything.\nThere are $m$ people who want to celebrate Christmas. Let $y_1, y_2, \\dots, y_m$ be the positions of people (note that all values $x_1, x_2, \\dots, x_n, y_1, y_2, \\dots, y_m$ should be distinct and all $y_j$ should be integer). You want to find such an arrangement of people that the value $\\sum\\limits_{j=1}^{m}\\min\\limits_{i=1}^{n}|x_i - y_j|$ is the minimum possible (in other words, the sum of distances to the nearest Christmas tree for all people should be minimized).\nIn other words, let $d_j$ be the distance from the $j$-th human to the nearest Christmas tree ($d_j = \\min\\limits_{i=1}^{n} |y_j - x_i|$). Then you need to choose such positions $y_1, y_2, \\dots, y_m$ that $\\sum\\limits_{j=1}^{m} d_j$ is the minimum possible.\n-----Input-----\nThe first line of the input contains two integers $n$ and $m$ ($1 \\le n, m \\le 2 \\cdot 10^5$) \u2014 the number of Christmas trees and the number of people.\nThe second line of the input contains $n$ integers $x_1, x_2, \\dots, x_n$ ($-10^9 \\le x_i \\le 10^9$), where $x_i$ is the position of the $i$-th Christmas tree. It is guaranteed that all $x_i$ are distinct.\n-----Output-----\nIn the first line print one integer $res$ \u2014 the minimum possible value of $\\sum\\limits_{j=1}^{m}\\min\\limits_{i=1}^{n}|x_i - y_j|$ (in other words, the sum of distances to the nearest Christmas tree for all people).\nIn the second line print $m$ integers $y_1, y_2, \\dots, y_m$ ($-2 \\cdot 10^9 \\le y_j \\le 2 \\cdot 10^9$), where $y_j$ is the position of the $j$-th human. All $y_j$ should be distinct and all values $x_1, x_2, \\dots, x_n, y_1, y_2, \\dots, y_m$ should be distinct.\nIf there are multiple answers, print any of them.\n-----Examples-----\nInput\n2 6\n1 5\nOutput\n8\n-1 2 6 4 0 3 \nInput\n3 5\n0 3 1\nOutput\n7\n5 -2 4 -1 2\n\ndef",
        "answer": "def minimum_distance(n, m, x):\n    x.sort()\n    y = []\n    for i in range(m):\n        y.append(int(input()))\n    y.sort()\n    res = 0\n    for i in range(m):\n        res += abs(x[i] - y[i])\n    return res",
        "difficulty": "introductory"
    },
    {
        "task_id": 4632,
        "prompt": "Complete the Python function given the prompt below:There is a robot in a warehouse and $n$ packages he wants to collect. The warehouse can be represented as a coordinate grid. Initially, the robot stays at the point $(0, 0)$. The $i$-th package is at the point $(x_i, y_i)$. It is guaranteed that there are no two packages at the same point. It is also guaranteed that the point $(0, 0)$ doesn't contain a package.\nThe robot is semi-broken and only can move up ('U') and right ('R'). In other words, in one move the robot can go from the point $(x, y)$ to the point ($x + 1, y$) or to the point $(x, y + 1)$.\nAs we say above, the robot wants to collect all $n$ packages (in arbitrary order). He wants to do it with the minimum possible number of moves. If there are several possible traversals, the robot wants to choose the lexicographically smallest path.\nThe string $s$ of length $n$ is lexicographically less than the string $t$ of length $n$ if there is some index $1 \\le j \\le n$ that for all $i$ from $1$ to $j-1$ $s_i = t_i$ and $s_j < t_j$. It is the standard comparison of string, like in a dictionary. Most programming languages compare strings in this way.\n-----Input-----\nThe first line of the input contains an integer $t$ ($1 \\le t \\le 100$) \u2014 the number of test cases. Then test cases follow.\nThe first line of a test case contains one integer $n$ ($1 \\le n \\le 1000$) \u2014 the number of packages.\nThe next $n$ lines contain descriptions of packages. The $i$-th package is given as two integers $x_i$ and $y_i$ ($0 \\le x_i, y_i \\le 1000$) \u2014 the $x$-coordinate of the package and the $y$-coordinate of the package.\nIt is guaranteed that there are no two packages at the same point. It is also guaranteed that the point $(0, 0)$ doesn't contain a package.\nThe sum of all values $n$ over test cases in the test doesn't exceed $1000$.\n-----Output-----\nPrint the answer for each test case.\nIf it is impossible to collect all $n$ packages in some order starting from ($0,0$), print \"NO\" on the first line.\nOtherwise, print \"YES\" in the first line. Then print the shortest path \u2014 a string consisting of characters 'R' and 'U'. Among all such paths choose the lexicographically smallest path.\nNote that in this problem \"YES\" and \"NO\" can be only uppercase words, i.e. \"Yes\", \"no\" and \"YeS\" are not acceptable.\n-----Example-----\nInput\n3\n5\n1 3\n1 2\n3 3\n5 5\n4 3\n2\n1 0\n0 1\n1\n4 3\nOutput\nYES\nRUUURRRRUU\nNO\nYES\nRRRRUUU\n-----Note-----\nFor the first test case in the example the optimal path RUUURRRRUU is shown below:  [Image]\n\ndef",
        "answer": "def robot_collect(packages):\n    # Write your code here\n    pass",
        "difficulty": "introductory"
    },
    {
        "task_id": 4633,
        "prompt": "Complete the Python function given the prompt below:You are given a positive integer $n$. In one move, you can increase $n$ by one (i.e. make $n := n + 1$). Your task is to find the minimum number of moves you need to perform in order to make the sum of digits of $n$ be less than or equal to $s$.\nYou have to answer $t$ independent test cases.\n-----Input-----\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 2 \\cdot 10^4$) \u2014 the number of test cases. Then $t$ test cases follow.\nThe only line of the test case contains two integers $n$ and $s$ ($1 \\le n \\le 10^{18}$; $1 \\le s \\le 162$).\n-----Output-----\nFor each test case, print the answer: the minimum number of moves you need to perform in order to make the sum of digits of $n$ be less than or equal to $s$.\n-----Example-----\nInput\n5\n2 1\n1 1\n500 4\n217871987498122 10\n100000000000000001 1\nOutput\n8\n0\n500\n2128012501878\n899999999999999999\n\ndef",
        "answer": "def sum_of_digits(n):\n    return sum([int(i) for i in str(n)])",
        "difficulty": "introductory"
    },
    {
        "task_id": 4634,
        "prompt": "Complete the Python function given the prompt below:There is a bookshelf which can fit $n$ books. The $i$-th position of bookshelf is $a_i = 1$ if there is a book on this position and $a_i = 0$ otherwise. It is guaranteed that there is at least one book on the bookshelf.\nIn one move, you can choose some contiguous segment $[l; r]$ consisting of books (i.e. for each $i$ from $l$ to $r$ the condition $a_i = 1$ holds) and:  Shift it to the right by $1$: move the book at index $i$ to $i + 1$ for all $l \\le i \\le r$. This move can be done only if $r+1 \\le n$ and there is no book at the position $r+1$.  Shift it to the left by $1$: move the book at index $i$ to $i-1$ for all $l \\le i \\le r$. This move can be done only if $l-1 \\ge 1$ and there is no book at the position $l-1$. \nYour task is to find the minimum number of moves required to collect all the books on the shelf as a contiguous (consecutive) segment (i.e. the segment without any gaps).\nFor example, for $a = [0, 0, 1, 0, 1]$ there is a gap between books ($a_4 = 0$ when $a_3 = 1$ and $a_5 = 1$), for $a = [1, 1, 0]$ there are no gaps between books and for $a = [0, 0,0]$ there are also no gaps between books.\nYou have to answer $t$ independent test cases.\n-----Input-----\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 200$) \u2014 the number of test cases. Then $t$ test cases follow.\nThe first line of the test case contains one integer $n$ ($1 \\le n \\le 50$) \u2014 the number of places on a bookshelf. The second line of the test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($0 \\le a_i \\le 1$), where $a_i$ is $1$ if there is a book at this position and $0$ otherwise. It is guaranteed that there is at least one book on the bookshelf.\n-----Output-----\nFor each test case, print one integer: the minimum number of moves required to collect all the books on the shelf as a contiguous (consecutive) segment (i.e. the segment without gaps).\n-----Example-----\nInput\n5\n7\n0 0 1 0 1 0 1\n3\n1 0 0\n5\n1 1 0 0 1\n6\n1 0 0 0 0 1\n5\n1 1 0 1 1\nOutput\n2\n0\n2\n4\n1\n-----Note-----\nIn the first test case of the example, you can shift the segment $[3; 3]$ to the right and the segment $[4; 5]$ to the right. After all moves, the books form the contiguous segment $[5; 7]$. So the answer is $2$.\nIn the second test case of the example, you have nothing to do, all the books on the bookshelf form the contiguous segment already.\nIn the third test case of the example, you can shift the segment $[5; 5]$ to the left and then the segment $[4; 4]$ to the left again. After all moves, the books form the contiguous segment $[1; 3]$. So the answer is $2$.\nIn the fourth test case of the example, you can shift the segment $[1; 1]$ to the right, the segment $[2; 2]$ to the right, the segment $[6; 6]$ to the left and then the segment $[5; 5]$ to the left. After all moves, the books form the contiguous segment $[3; 4]$. So the answer is $4$.\nIn the fifth test case of the example, you can shift the segment $[1; 2]$ to the right. After all moves, the books form the contiguous segment $[2; 5]$. So the answer is $1$.\n\ndef",
        "answer": "def bookshelf(n, a):\n    count = 0\n    for i in range(n):\n        if a[i] == 0:\n            if i == 0:\n                if a[i+1] == 1:\n                    count += 1\n                    a[i] = 1\n                    a[i+1] = 0\n            elif i == n-1:\n                if a[i-1] == 1:\n                    count += 1\n                    a[i] = 1\n                    a[i-1] = 0\n            else:\n                if a[i-1] == 1:\n                    count += 1\n                    a[i] = 1\n                    a[i-1] = 0\n                if a[i+1] == 1:\n                    count += 1\n                    a[i] = 1\n                    a[i+1] = 0\n    return count",
        "difficulty": "introductory"
    },
    {
        "task_id": 4635,
        "prompt": "Complete the Python function given the prompt below:You are given two integers $n$ and $k$.\nYour task is to construct such a string $s$ of length $n$ that for each $i$ from $1$ to $k$ there is at least one $i$-th letter of the Latin alphabet in this string (the first letter is 'a', the second is 'b' and so on) and there are no other letters except these. You have to maximize the minimal frequency of some letter (the frequency of a letter is the number of occurrences of this letter in a string). If there are several possible answers, you can print any.\nYou have to answer $t$ independent queries.\n-----Input-----\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 100$) \u2014 the number of queries.\nThe next $t$ lines are contain queries, one per line. The $i$-th line contains two integers $n_i$ and $k_i$ ($1 \\le n_i \\le 100, 1 \\le k_i \\le min(n_i, 26)$) \u2014 the length of the string in the $i$-th query and the number of characters in the $i$-th query.\n-----Output-----\nPrint $t$ lines. In the $i$-th line print the answer to the $i$-th query: any string $s_i$ satisfying the conditions in the problem statement with constraints from the $i$-th query.\n-----Example-----\nInput\n3\n7 3\n4 4\n6 2\nOutput\ncbcacab\nabcd\nbaabab\n-----Note-----\nIn the first example query the maximum possible minimal frequency is $2$, it can be easily seen that the better answer doesn't exist. Other examples of correct answers: \"cbcabba\", \"ccbbaaa\" (any permutation of given answers is also correct).\nIn the second example query any permutation of first four letters is acceptable (the maximum minimal frequency is $1$).\nIn the third example query any permutation of the given answer is acceptable (the maximum minimal frequency is $3$).\n\ndef",
        "answer": "def construct_string(n, k):\n    s = ''\n    for i in range(k):\n        s += chr(97 + i) * (n // k)\n        n -= n // k\n    return s",
        "difficulty": "introductory"
    },
    {
        "task_id": 4636,
        "prompt": "Complete the Python function given the prompt below:There are $n$ candies in a row, they are numbered from left to right from $1$ to $n$. The size of the $i$-th candy is $a_i$.\nAlice and Bob play an interesting and tasty game: they eat candy. Alice will eat candy from left to right, and Bob \u2014 from right to left. The game ends if all the candies are eaten.\nThe process consists of moves. During a move, the player eats one or more sweets from her/his side (Alice eats from the left, Bob \u2014 from the right).\nAlice makes the first move. During the first move, she will eat $1$ candy (its size is $a_1$). Then, each successive move the players alternate \u2014 that is, Bob makes the second move, then Alice, then again Bob and so on.\nOn each move, a player counts the total size of candies eaten during the current move. Once this number becomes strictly greater than the total size of candies eaten by the other player on their previous move, the current player stops eating and the move ends. In other words, on a move, a player eats the smallest possible number of candies such that the sum of the sizes of candies eaten on this move is strictly greater than the sum of the sizes of candies that the other player ate on the previous move. If there are not enough candies to make a move this way, then the player eats up all the remaining candies and the game ends.\nFor example, if $n=11$ and $a=[3,1,4,1,5,9,2,6,5,3,5]$, then:  move 1: Alice eats one candy of size $3$ and the sequence of candies becomes $[1,4,1,5,9,2,6,5,3,5]$.  move 2: Alice ate $3$ on the previous move, which means Bob must eat $4$ or more. Bob eats one candy of size $5$ and the sequence of candies becomes $[1,4,1,5,9,2,6,5,3]$.  move 3: Bob ate $5$ on the previous move, which means Alice must eat $6$ or more. Alice eats three candies with the total size of $1+4+1=6$ and the sequence of candies becomes $[5,9,2,6,5,3]$.  move 4: Alice ate $6$ on the previous move, which means Bob must eat $7$ or more. Bob eats two candies with the total size of $3+5=8$ and the sequence of candies becomes $[5,9,2,6]$.  move 5: Bob ate $8$ on the previous move, which means Alice must eat $9$ or more. Alice eats two candies with the total size of $5+9=14$ and the sequence of candies becomes $[2,6]$.  move 6 (the last): Alice ate $14$ on the previous move, which means Bob must eat $15$ or more. It is impossible, so Bob eats the two remaining candies and the game ends. \nPrint the number of moves in the game and two numbers:  $a$ \u2014 the total size of all sweets eaten by Alice during the game;  $b$ \u2014 the total size of all sweets eaten by Bob during the game. \n-----Input-----\nThe first line contains an integer $t$ ($1 \\le t \\le 5000$) \u2014 the number of test cases in the input. The following are descriptions of the $t$ test cases.\nEach test case consists of two lines. The first line contains an integer $n$ ($1 \\le n \\le 1000$) \u2014 the number of candies. The second line contains a sequence of integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 1000$) \u2014 the sizes of candies in the order they are arranged from left to right.\nIt is guaranteed that the sum of the values of $n$ for all sets of input data in a test does not exceed $2\\cdot10^5$.\n-----Output-----\nFor each set of input data print three integers \u2014 the number of moves in the game and the required values $a$ and $b$.\n-----Example-----\nInput\n7\n11\n3 1 4 1 5 9 2 6 5 3 5\n1\n1000\n3\n1 1 1\n13\n1 2 3 4 5 6 7 8 9 10 11 12 13\n2\n2 1\n6\n1 1 1 1 1 1\n7\n1 1 1 1 1 1 1\nOutput\n6 23 21\n1 1000 0\n2 1 2\n6 45 46\n2 2 1\n3 4 2\n4 4 3\n\ndef",
        "answer": "def game(n, a):\n    alice = 0\n    bob = 0\n    for i in range(n):\n        if alice < bob:\n            alice += a[i]\n        else:\n            bob += a[i]\n    return alice, bob",
        "difficulty": "introductory"
    },
    {
        "task_id": 4637,
        "prompt": "Complete the Python function given the prompt below:You are given two arrays $a$ and $b$ both consisting of $n$ positive (greater than zero) integers. You are also given an integer $k$.\nIn one move, you can choose two indices $i$ and $j$ ($1 \\le i, j \\le n$) and swap $a_i$ and $b_j$ (i.e. $a_i$ becomes $b_j$ and vice versa). Note that $i$ and $j$ can be equal or different (in particular, swap $a_2$ with $b_2$ or swap $a_3$ and $b_9$ both are acceptable moves).\nYour task is to find the maximum possible sum you can obtain in the array $a$ if you can do no more than (i.e. at most) $k$ such moves (swaps).\nYou have to answer $t$ independent test cases.\n-----Input-----\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 200$) \u2014 the number of test cases. Then $t$ test cases follow.\nThe first line of the test case contains two integers $n$ and $k$ ($1 \\le n \\le 30; 0 \\le k \\le n$) \u2014 the number of elements in $a$ and $b$ and the maximum number of moves you can do. The second line of the test case contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 30$), where $a_i$ is the $i$-th element of $a$. The third line of the test case contains $n$ integers $b_1, b_2, \\dots, b_n$ ($1 \\le b_i \\le 30$), where $b_i$ is the $i$-th element of $b$.\n-----Output-----\nFor each test case, print the answer \u2014 the maximum possible sum you can obtain in the array $a$ if you can do no more than (i.e. at most) $k$ swaps.\n-----Example-----\nInput\n5\n2 1\n1 2\n3 4\n5 5\n5 5 6 6 5\n1 2 5 4 3\n5 3\n1 2 3 4 5\n10 9 10 10 9\n4 0\n2 2 4 3\n2 4 2 3\n4 4\n1 2 2 1\n4 4 5 4\nOutput\n6\n27\n39\n11\n17\n-----Note-----\nIn the first test case of the example, you can swap $a_1 = 1$ and $b_2 = 4$, so $a=[4, 2]$ and $b=[3, 1]$.\nIn the second test case of the example, you don't need to swap anything.\nIn the third test case of the example, you can swap $a_1 = 1$ and $b_1 = 10$, $a_3 = 3$ and $b_3 = 10$ and $a_2 = 2$ and $b_4 = 10$, so $a=[10, 10, 10, 4, 5]$ and $b=[1, 9, 3, 2, 9]$.\nIn the fourth test case of the example, you cannot swap anything.\nIn the fifth test case of the example, you can swap arrays $a$ and $b$, so $a=[4, 4, 5, 4]$ and $b=[1, 2, 2, 1]$.\n\ndef",
        "answer": "def swap(a, b, i, j):\n    a[i], b[j] = b[j], a[i]",
        "difficulty": "introductory"
    },
    {
        "task_id": 4638,
        "prompt": "Complete the Python function given the prompt below:You are planning to buy an apartment in a $n$-floor building. The floors are numbered from $1$ to $n$ from the bottom to the top. At first for each floor you want to know the minimum total time to reach it from the first (the bottom) floor.\nLet:  $a_i$ for all $i$ from $1$ to $n-1$ be the time required to go from the $i$-th floor to the $(i+1)$-th one (and from the $(i+1)$-th to the $i$-th as well) using the stairs;  $b_i$ for all $i$ from $1$ to $n-1$ be the time required to go from the $i$-th floor to the $(i+1)$-th one (and from the $(i+1)$-th to the $i$-th as well) using the elevator, also there is a value $c$ \u2014 time overhead for elevator usage (you need to wait for it, the elevator doors are too slow!). \nIn one move, you can go from the floor you are staying at $x$ to any floor $y$ ($x \\ne y$) in two different ways:  If you are using the stairs, just sum up the corresponding values of $a_i$. Formally, it will take $\\sum\\limits_{i=min(x, y)}^{max(x, y) - 1} a_i$ time units.  If you are using the elevator, just sum up $c$ and the corresponding values of $b_i$. Formally, it will take $c + \\sum\\limits_{i=min(x, y)}^{max(x, y) - 1} b_i$ time units. \nYou can perform as many moves as you want (possibly zero).\nSo your task is for each $i$ to determine the minimum total time it takes to reach the $i$-th floor from the $1$-st (bottom) floor.\n-----Input-----\nThe first line of the input contains two integers $n$ and $c$ ($2 \\le n \\le 2 \\cdot 10^5, 1 \\le c \\le 1000$) \u2014 the number of floors in the building and the time overhead for the elevator rides.\nThe second line of the input contains $n - 1$ integers $a_1, a_2, \\dots, a_{n-1}$ ($1 \\le a_i \\le 1000$), where $a_i$ is the time required to go from the $i$-th floor to the $(i+1)$-th one (and from the $(i+1)$-th to the $i$-th as well) using the stairs.\nThe third line of the input contains $n - 1$ integers $b_1, b_2, \\dots, b_{n-1}$ ($1 \\le b_i \\le 1000$), where $b_i$ is the time required to go from the $i$-th floor to the $(i+1)$-th one (and from the $(i+1)$-th to the $i$-th as well) using the elevator.\n-----Output-----\nPrint $n$ integers $t_1, t_2, \\dots, t_n$, where $t_i$ is the minimum total time to reach the $i$-th floor from the first floor if you can perform as many moves as you want.\n-----Examples-----\nInput\n10 2\n7 6 18 6 16 18 1 17 17\n6 9 3 10 9 1 10 1 5\nOutput\n0 7 13 18 24 35 36 37 40 45 \nInput\n10 1\n3 2 3 1 3 3 1 4 1\n1 2 3 4 4 1 2 1 3\nOutput\n0 2 4 7 8 11 13 14 16 17\n\ndef",
        "answer": "def solve(n, c, a, b):\n    a.sort()\n    b.sort()\n    a_sum = 0\n    b_sum = 0\n    for i in range(n - 1):\n        a_sum += a[i]\n        b_sum += b[i]\n    return a_sum + b_sum + c",
        "difficulty": "introductory"
    },
    {
        "task_id": 4639,
        "prompt": "Complete the Python function given the prompt below:For the given integer $n$ ($n > 2$) let's write down all the strings of length $n$ which contain $n-2$ letters 'a' and two letters 'b' in lexicographical (alphabetical) order.\nRecall that the string $s$ of length $n$ is lexicographically less than string $t$ of length $n$, if there exists such $i$ ($1 \\le i \\le n$), that $s_i < t_i$, and for any $j$ ($1 \\le j < i$) $s_j = t_j$. The lexicographic comparison of strings is implemented by the operator < in modern programming languages.\nFor example, if $n=5$ the strings are (the order does matter):  aaabb  aabab  aabba  abaab  ababa  abbaa  baaab  baaba  babaa  bbaaa \nIt is easy to show that such a list of strings will contain exactly $\\frac{n \\cdot (n-1)}{2}$ strings.\nYou are given $n$ ($n > 2$) and $k$ ($1 \\le k \\le \\frac{n \\cdot (n-1)}{2}$). Print the $k$-th string from the list.\n-----Input-----\nThe input contains one or more test cases.\nThe first line contains one integer $t$ ($1 \\le t \\le 10^4$) \u2014 the number of test cases in the test. Then $t$ test cases follow.\nEach test case is written on the the separate line containing two integers $n$ and $k$ ($3 \\le n \\le 10^5, 1 \\le k \\le \\min(2\\cdot10^9, \\frac{n \\cdot (n-1)}{2})$.\nThe sum of values $n$ over all test cases in the test doesn't exceed $10^5$.\n-----Output-----\nFor each test case print the $k$-th string from the list of all described above strings of length $n$. Strings in the list are sorted lexicographically (alphabetically).\n-----Example-----\nInput\n7\n5 1\n5 2\n5 8\n5 10\n3 1\n3 2\n20 100\nOutput\naaabb\naabab\nbaaba\nbbaaa\nabb\nbab\naaaaabaaaaabaaaaaaaa\n\ndef",
        "answer": "def generate_strings(n):\n    if n == 2:\n        return ['aa', 'ab', 'ba', 'bb']\n    else:\n        return [f'{a}{b}' for a in generate_strings(n-2) for b in generate_strings(n-2)]",
        "difficulty": "introductory"
    },
    {
        "task_id": 4640,
        "prompt": "Complete the Python function given the prompt below:There are $n$ points on a plane. The $i$-th point has coordinates $(x_i, y_i)$. You have two horizontal platforms, both of length $k$. Each platform can be placed anywhere on a plane but it should be placed horizontally (on the same $y$-coordinate) and have integer borders. If the left border of the platform is $(x, y)$ then the right border is $(x + k, y)$ and all points between borders (including borders) belong to the platform.\nNote that platforms can share common points (overlap) and it is not necessary to place both platforms on the same $y$-coordinate.\nWhen you place both platforms on a plane, all points start falling down decreasing their $y$-coordinate. If a point collides with some platform at some moment, the point stops and is saved. Points which never collide with any platform are lost.\nYour task is to find the maximum number of points you can save if you place both platforms optimally.\nYou have to answer $t$ independent test cases.\nFor better understanding, please read the Note section below to see a picture for the first test case.\n-----Input-----\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 2 \\cdot 10^4$) \u2014 the number of test cases. Then $t$ test cases follow.\nThe first line of the test case contains two integers $n$ and $k$ ($1 \\le n \\le 2 \\cdot 10^5$; $1 \\le k \\le 10^9$) \u2014 the number of points and the length of each platform, respectively. The second line of the test case contains $n$ integers $x_1, x_2, \\dots, x_n$ ($1 \\le x_i \\le 10^9$), where $x_i$ is $x$-coordinate of the $i$-th point. The third line of the input contains $n$ integers $y_1, y_2, \\dots, y_n$ ($1 \\le y_i \\le 10^9$), where $y_i$ is $y$-coordinate of the $i$-th point. All points are distinct (there is no pair $1 \\le i < j \\le n$ such that $x_i = x_j$ and $y_i = y_j$).\nIt is guaranteed that the sum of $n$ does not exceed $2 \\cdot 10^5$ ($\\sum n \\le 2 \\cdot 10^5$).\n-----Output-----\nFor each test case, print the answer: the maximum number of points you can save if you place both platforms optimally.\n-----Example-----\nInput\n4\n7 1\n1 5 2 3 1 5 4\n1 3 6 7 2 5 4\n1 1\n1000000000\n1000000000\n5 10\n10 7 5 15 8\n20 199 192 219 1904\n10 10\n15 19 8 17 20 10 9 2 10 19\n12 13 6 17 1 14 7 9 19 3\nOutput\n6\n1\n5\n10\n-----Note-----\nThe picture corresponding to the first test case of the example:\n[Image]\nBlue dots represent the points, red segments represent the platforms. One of the possible ways is to place the first platform between points $(1, -1)$ and $(2, -1)$ and the second one between points $(4, 3)$ and $(5, 3)$. Vectors represent how the points will fall down. As you can see, the only point we can't save is the point $(3, 7)$ so it falls down infinitely and will be lost. It can be proven that we can't achieve better answer here. Also note that the point $(5, 3)$ doesn't fall at all because it is already on the platform.\n\ndef",
        "answer": "def save_points(points, platforms):\n    points_to_save = []\n    for point in points:\n        if point[1] < platforms[0][1]:\n            points_to_save.append(point)\n        elif point[1] > platforms[1][1]:\n            points_to_save.append(point)\n    return points_to_save",
        "difficulty": "introductory"
    }
]