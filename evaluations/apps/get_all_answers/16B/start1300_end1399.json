[
    {
        "task_id": 1300,
        "prompt": "Complete the Python function given the prompt below:You are given array $a$ of length $n$. You can choose one segment $[l, r]$ ($1 \\le l \\le r \\le n$) and integer value $k$ (positive, negative or even zero) and change $a_l, a_{l + 1}, \\dots, a_r$ by $k$ each (i.e. $a_i := a_i + k$ for each $l \\le i \\le r$).\nWhat is the maximum possible number of elements with value $c$ that can be obtained after one such operation?\n-----Input-----\nThe first line contains two integers $n$ and $c$ ($1 \\le n \\le 5 \\cdot 10^5$, $1 \\le c \\le 5 \\cdot 10^5$) \u2014 the length of array and the value $c$ to obtain.\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 5 \\cdot 10^5$) \u2014 array $a$.\n-----Output-----\nPrint one integer \u2014 the maximum possible number of elements with value $c$ which can be obtained after performing operation described above.\n-----Examples-----\nInput\n6 9\n9 9 9 9 9 9\nOutput\n6\nInput\n3 2\n6 2 6\nOutput\n2\n-----Note-----\nIn the first example we can choose any segment and $k = 0$. The array will stay same.\nIn the second example we can choose segment $[1, 3]$ and $k = -4$. The array will become $[2, -2, 2]$.\n\ndef",
        "answer": "def arrayChange(a, c):\n    n = len(a)\n    count = 0\n    for i in range(n):\n        if a[i] > c:\n            count += a[i] - c\n            a[i] = c\n    return count",
        "difficulty": "interview"
    },
    {
        "task_id": 1301,
        "prompt": "Complete the Python function given the prompt below:You are solving the crossword problem K from IPSC 2014. You solved all the clues except for one: who does Eevee evolve into? You are not very into pokemons, but quick googling helped you find out, that Eevee can evolve into eight different pokemons: Vaporeon, Jolteon, Flareon, Espeon, Umbreon, Leafeon, Glaceon, and Sylveon.\nYou know the length of the word in the crossword, and you already know some letters. Designers of the crossword made sure that the answer is unambiguous, so you can assume that exactly one pokemon out of the 8 that Eevee evolves into fits the length and the letters given. Your task is to find it.\n-----Input-----\nFirst line contains an integer n (6 \u2264 n \u2264 8) \u2013 the length of the string.\nNext line contains a string consisting of n characters, each of which is either a lower case english letter (indicating a known letter) or a dot character (indicating an empty cell in the crossword).\n-----Output-----\nPrint a name of the pokemon that Eevee can evolve into that matches the pattern in the input. Use lower case letters only to print the name (in particular, do not capitalize the first letter).\n-----Examples-----\nInput\n7\nj......\nOutput\njolteon\nInput\n7\n...feon\nOutput\nleafeon\nInput\n7\n.l.r.o.\nOutput\nflareon\n-----Note-----\nHere's a set of names in a form you can paste into your solution:\n[\"vaporeon\", \"jolteon\", \"flareon\", \"espeon\", \"umbreon\", \"leafeon\", \"glaceon\", \"sylveon\"]\n{\"vaporeon\", \"jolteon\", \"flareon\", \"espeon\", \"umbreon\", \"leafeon\", \"glaceon\", \"sylveon\"}\n\ndef",
        "answer": "def crosswordPuzzle(crossword, words):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 1302,
        "prompt": "Complete the Python function given the prompt below:Levko loves permutations very much. A permutation of length n is a sequence of distinct positive integers, each is at most n.\nLet\u2019s assume that value gcd(a, b) shows the greatest common divisor of numbers a and b. Levko assumes that element p_{i} of permutation p_1, p_2,..., p_{n} is good if gcd(i, p_{i}) > 1. Levko considers a permutation beautiful, if it has exactly k good elements. Unfortunately, he doesn\u2019t know any beautiful permutation. Your task is to help him to find at least one of them.\n-----Input-----\nThe single line contains two integers n and k (1 \u2264 n \u2264 10^5, 0 \u2264 k \u2264 n).\n-----Output-----\nIn a single line print either any beautiful permutation or -1, if such permutation doesn\u2019t exist.\nIf there are multiple suitable permutations, you are allowed to print any of them.\n-----Examples-----\nInput\n4 2\nOutput\n2 4 3 1\nInput\n1 1\nOutput\n-1\n-----Note-----\nIn the first sample elements 4 and 3 are good because gcd(2, 4) = 2 > 1 and gcd(3, 3) = 3 > 1. Elements 2 and 1 are not good because gcd(1, 2) = 1 and gcd(4, 1) = 1. As there are exactly 2 good elements, the permutation is beautiful.\nThe second sample has no beautiful permutations.\n\ndef",
        "answer": "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)",
        "difficulty": "interview"
    },
    {
        "task_id": 1303,
        "prompt": "Complete the Python function given the prompt below:Little X and Little Z are good friends. They always chat online. But both of them have schedules.\nLittle Z has fixed schedule. He always online at any moment of time between a_1 and b_1, between a_2 and b_2,..., between a_{p} and b_{p} (all borders inclusive). But the schedule of Little X is quite strange, it depends on the time when he gets up. If he gets up at time 0, he will be online at any moment of time between c_1 and d_1, between c_2 and d_2,..., between c_{q} and d_{q} (all borders inclusive). But if he gets up at time t, these segments will be shifted by t. They become [c_{i} + t, d_{i} + t] (for all i).\nIf at a moment of time, both Little X and Little Z are online simultaneosly, they can chat online happily. You know that Little X can get up at an integer moment of time between l and r (both borders inclusive). Also you know that Little X wants to get up at the moment of time, that is suitable for chatting with Little Z (they must have at least one common moment of time in schedules). How many integer moments of time from the segment [l, r] suit for that?\n-----Input-----\nThe first line contains four space-separated integers p, q, l, r (1 \u2264  p, q \u2264 50;\u00a00 \u2264 l \u2264 r \u2264 1000).\nEach of the next p lines contains two space-separated integers a_{i}, b_{i} (0 \u2264 a_{i} < b_{i} \u2264 1000). Each of the next q lines contains two space-separated integers c_{j}, d_{j} (0 \u2264 c_{j} < d_{j} \u2264 1000).\nIt's guaranteed that b_{i} < a_{i} + 1 and d_{j} < c_{j} + 1 for all valid i and j.\n-----Output-----\nOutput a single integer \u2014 the number of moments of time from the segment [l, r] which suit for online conversation.\n-----Examples-----\nInput\n1 1 0 4\n2 3\n0 1\nOutput\n3\nInput\n2 3 0 20\n15 17\n23 26\n1 4\n7 11\n15 17\nOutput\n20\n\ndef",
        "answer": "def online_chat(a, b, c, d):\n    return max(0, min(b, d) - max(a, c) + 1)",
        "difficulty": "interview"
    },
    {
        "task_id": 1304,
        "prompt": "Complete the Python function given the prompt below:Two bears are playing tic-tac-toe via mail. It's boring for them to play usual tic-tac-toe game, so they are a playing modified version of this game. Here are its rules.\nThe game is played on the following field. [Image] \nPlayers are making moves by turns. At first move a player can put his chip in any cell of any small field. For following moves, there are some restrictions: if during last move the opposite player put his chip to cell with coordinates (x_{l}, y_{l}) in some small field, the next move should be done in one of the cells of the small field with coordinates (x_{l}, y_{l}). For example, if in the first move a player puts his chip to lower left cell of central field, then the second player on his next move should put his chip into some cell of lower left field (pay attention to the first test case). If there are no free cells in the required field, the player can put his chip to any empty cell on any field.\nYou are given current state of the game and coordinates of cell in which the last move was done. You should find all cells in which the current player can put his chip.\nA hare works as a postman in the forest, he likes to foul bears. Sometimes he changes the game field a bit, so the current state of the game could be unreachable. However, after his changes the cell where the last move was done is not empty. You don't need to find if the state is unreachable or not, just output possible next moves according to the rules.\n-----Input-----\nFirst 11 lines contains descriptions of table with 9 rows and 9 columns which are divided into 9 small fields by spaces and empty lines. Each small field is described by 9 characters without spaces and empty lines. character \"x\" (ASCII-code 120) means that the cell is occupied with chip of the first player, character \"o\" (ASCII-code 111) denotes a field occupied with chip of the second player, character \".\" (ASCII-code 46) describes empty cell.\nThe line after the table contains two integers x and y (1 \u2264 x, y \u2264 9). They describe coordinates of the cell in table where the last move was done. Rows in the table are numbered from up to down and columns are numbered from left to right.\nIt's guaranteed that cell where the last move was done is filled with \"x\" or \"o\". Also, it's guaranteed that there is at least one empty cell. It's not guaranteed that current state of game is reachable.\n-----Output-----\nOutput the field in same format with characters \"!\" (ASCII-code 33) on positions where the current player can put his chip. All other cells should not be modified.\n-----Examples-----\nInput\n.........\n.........\n.........\n.........\n.........\n... x.....\n.........\n.........\n.........\n6 4\nOutput\n......... \n......... \n......... \n......... \n......... \n... x..... \n!!!...... \n!!!...... \n!!!...... \nInput\nxoo x.. x..\nooo......\nooo......\nx.. x.. x..\n.........\n.........\nx.. x.. x..\n.........\n.........\n7 4\nOutput\nxoo x!! x!! \nooo!!!!!! \nooo!!!!!! \nx!! x!! x!! \n!!!!!!!!! \n!!!!!!!!! \nx!! x!! x!! \n!!!!!!!!! \n!!!!!!!!! \nInput\no........\n.........\n.........\n... xxx...\n... xox...\n... ooo...\n.........\n.........\n.........\n5 5\nOutput\no!!!!!!!! \n!!!!!!!!! \n!!!!!!!!! \n!!! xxx!!! \n!!! xox!!! \n!!! ooo!!! \n!!!!!!!!! \n!!!!!!!!! \n!!!!!!!!! \n\n-----Note-----\nIn the first test case the first player made a move to lower left cell of central field, so the second player can put a chip only to cells of lower left field.\nIn the second test case the last move was done to upper left cell of lower central field, however all cells in upper left field are occupied, so the second player can put his chip to any empty cell.\nIn the third test case the last move was done to central cell of central field, so current player can put his chip to any cell of central field, which is already occupied, so he can move anywhere. Pay attention that this state of the game is unreachable.\n\ndef",
        "answer": "def possibleMoves(field, x, y):\n    # Write your code here\n    moves = []\n    for i in range(9):\n        for j in range(9):\n            if field[i][j] == '.':\n                moves.append((i, j))\n    return moves",
        "difficulty": "interview"
    },
    {
        "task_id": 1305,
        "prompt": "Complete the Python function given the prompt below:The new \"Die Hard\" movie has just been released! There are n people at the cinema box office standing in a huge line. Each of them has a single 100, 50 or 25 ruble bill. A \"Die Hard\" ticket costs 25 rubles. Can the booking clerk sell a ticket to each person and give the change if he initially has no money and sells the tickets strictly in the order people follow in the line?\n-----Input-----\nThe first line contains integer n (1 \u2264 n \u2264 10^5) \u2014 the number of people in the line. The next line contains n integers, each of them equals 25, 50 or 100 \u2014 the values of the bills the people have. The numbers are given in the order from the beginning of the line (at the box office) to the end of the line.\n-----Output-----\nPrint \"YES\" (without the quotes) if the booking clerk can sell a ticket to each person and give the change. Otherwise print \"NO\".\n-----Examples-----\nInput\n4\n25 25 50 50\nOutput\nYES\nInput\n2\n25 100\nOutput\nNO\nInput\n4\n50 50 25 25\nOutput\nNO\n\ndef",
        "answer": "def tickets(people):\n    change = {25:0, 50:0, 100:0}\n    for bill in people:\n        if bill == 25:\n            change[25] += 1\n        elif bill == 50:\n            if change[25] == 0:\n                return \"NO\"\n            change[25] -= 1\n            change[50] += 1\n        elif bill == 100:\n            if change[25] == 0 or change[50] == 0:\n                return \"NO\"\n            change[25] -= 1\n            change[50] -= 1\n            change[100] += 1\n    return \"YES\"",
        "difficulty": "interview"
    },
    {
        "task_id": 1306,
        "prompt": "Complete the Python function given the prompt below:Peter has a sequence of integers a_1, a_2,..., a_{n}. Peter wants all numbers in the sequence to equal h. He can perform the operation of \"adding one on the segment [l, r]\": add one to all elements of the sequence with indices from l to r (inclusive). At that, Peter never chooses any element as the beginning of the segment twice. Similarly, Peter never chooses any element as the end of the segment twice. In other words, for any two segments [l_1, r_1] and [l_2, r_2], where Peter added one, the following inequalities hold: l_1 \u2260 l_2 and r_1 \u2260 r_2.\nHow many distinct ways are there to make all numbers in the sequence equal h? Print this number of ways modulo 1000000007\u00a0(10^9 + 7). Two ways are considered distinct if one of them has a segment that isn't in the other way.\n-----Input-----\nThe first line contains two integers n, h (1 \u2264 n, h \u2264 2000). The next line contains n integers a_1, a_2,..., a_{n} (0 \u2264 a_{i} \u2264 2000).\n-----Output-----\nPrint a single integer \u2014 the answer to the problem modulo 1000000007\u00a0(10^9 + 7).\n-----Examples-----\nInput\n3 2\n1 1 1\nOutput\n4\nInput\n5 1\n1 1 1 1 1\nOutput\n1\nInput\n4 3\n3 2 1 1\nOutput\n0\n\ndef",
        "answer": "def count_ways(n, h, a):\n    dp = [[0 for _ in range(n + 1)] for _ in range(h + 1)]\n    dp[0][0] = 1\n    for i in range(1, h + 1):\n        dp[i][0] = 1\n    for i in range(1, n + 1):\n        dp[0][i] = 1\n    for i in range(1, h + 1):\n        for j in range(1, n + 1):\n            dp[i][j] = dp[i][j - 1] + dp[i - 1][j]\n    return dp[h][n] % (10 ** 9 + 7)",
        "difficulty": "interview"
    },
    {
        "task_id": 1307,
        "prompt": "Complete the Python function given the prompt below:Mahmoud and Ehab play a game called the even-odd game. Ehab chooses his favorite integer n and then they take turns, starting from Mahmoud. In each player's turn, he has to choose an integer a and subtract it from n such that:  1 \u2264 a \u2264 n.  If it's Mahmoud's turn, a has to be even, but if it's Ehab's turn, a has to be odd. \nIf the current player can't choose any number satisfying the conditions, he loses. Can you determine the winner if they both play optimally?\n-----Input-----\nThe only line contains an integer n (1 \u2264 n \u2264 10^9), the number at the beginning of the game.\n-----Output-----\nOutput \"Mahmoud\" (without quotes) if Mahmoud wins and \"Ehab\" (without quotes) otherwise.\n-----Examples-----\nInput\n1\nOutput\nEhab\nInput\n2\nOutput\nMahmoud\n-----Note-----\nIn the first sample, Mahmoud can't choose any integer a initially because there is no positive even integer less than or equal to 1 so Ehab wins.\nIn the second sample, Mahmoud has to choose a = 2 and subtract it from n. It's Ehab's turn and n = 0. There is no positive odd integer less than or equal to 0 so Mahmoud wins.\n\ndef",
        "answer": "def even_odd(n):\n    if n % 2 == 0:\n        return \"Ehab\"\n    else:\n        return \"Mahmoud\"",
        "difficulty": "interview"
    },
    {
        "task_id": 1308,
        "prompt": "Complete the Python function given the prompt below:You are given a string s of length n consisting of lowercase English letters.\nFor two given strings s and t, say S is the set of distinct characters of s and T is the set of distinct characters of t. The strings s and t are isomorphic if their lengths are equal and there is a one-to-one mapping (bijection) f between S and T for which f(s_{i}) = t_{i}. Formally:  f(s_{i}) = t_{i} for any index i,  for any character $x \\in S$ there is exactly one character $y \\in T$ that f(x) = y,  for any character $y \\in T$ there is exactly one character $x \\in S$ that f(x) = y. \nFor example, the strings \"aababc\" and \"bbcbcz\" are isomorphic. Also the strings \"aaaww\" and \"wwwaa\" are isomorphic. The following pairs of strings are not isomorphic: \"aab\" and \"bbb\", \"test\" and \"best\".\nYou have to handle m queries characterized by three integers x, y, len (1 \u2264 x, y \u2264 n - len + 1). For each query check if two substrings s[x... x + len - 1] and s[y... y + len - 1] are isomorphic.\n-----Input-----\nThe first line contains two space-separated integers n and m (1 \u2264 n \u2264 2\u00b710^5, 1 \u2264 m \u2264 2\u00b710^5) \u2014 the length of the string s and the number of queries.\nThe second line contains string s consisting of n lowercase English letters.\nThe following m lines contain a single query on each line: x_{i}, y_{i} and len_{i} (1 \u2264 x_{i}, y_{i} \u2264 n, 1 \u2264 len_{i} \u2264 n - max(x_{i}, y_{i}) + 1) \u2014 the description of the pair of the substrings to check.\n-----Output-----\nFor each query in a separate line print \"YES\" if substrings s[x_{i}... x_{i} + len_{i} - 1] and s[y_{i}... y_{i} + len_{i} - 1] are isomorphic and \"NO\" otherwise.\n-----Example-----\nInput\n7 4\nabacaba\n1 1 1\n1 4 2\n2 1 3\n2 4 3\nOutput\nYES\nYES\nNO\nYES\n-----Note-----\nThe queries in the example are following:   substrings \"a\" and \"a\" are isomorphic: f(a) = a;  substrings \"ab\" and \"ca\" are isomorphic: f(a) = c, f(b) = a;  substrings \"bac\" and \"aba\" are not isomorphic since f(b) and f(c) must be equal to a at same time;  substrings \"bac\" and \"cab\" are isomorphic: f(b) = c, f(a) = a, f(c) = b.\n\ndef",
        "answer": "def isIsomorphic(s, t):\n    if len(s)!= len(t):\n        return False",
        "difficulty": "interview"
    },
    {
        "task_id": 1309,
        "prompt": "Complete the Python function given the prompt below:Vadim is really keen on travelling. Recently he heard about kayaking activity near his town and became very excited about it, so he joined a party of kayakers.\nNow the party is ready to start its journey, but firstly they have to choose kayaks. There are 2\u00b7n people in the group (including Vadim), and they have exactly n - 1 tandem kayaks (each of which, obviously, can carry two people) and 2 single kayaks. i-th person's weight is w_{i}, and weight is an important matter in kayaking \u2014 if the difference between the weights of two people that sit in the same tandem kayak is too large, then it can crash. And, of course, people want to distribute their seats in kayaks in order to minimize the chances that kayaks will crash.\nFormally, the instability of a single kayak is always 0, and the instability of a tandem kayak is the absolute difference between weights of the people that are in this kayak. Instability of the whole journey is the total instability of all kayaks.\nHelp the party to determine minimum possible total instability! \n-----Input-----\nThe first line contains one number n (2 \u2264 n \u2264 50).\nThe second line contains 2\u00b7n integer numbers w_1, w_2,..., w_2n, where w_{i} is weight of person i (1 \u2264 w_{i} \u2264 1000).\n-----Output-----\nPrint minimum possible total instability.\n-----Examples-----\nInput\n2\n1 2 3 4\nOutput\n1\nInput\n4\n1 3 4 6 3 4 100 200\nOutput\n5\n\ndef",
        "answer": "def tandemBicycle(a, n):\n    a.sort()\n    ans = 0\n    for i in range(n - 1):\n        ans += abs(a[i] - a[i + 1])\n    return ans",
        "difficulty": "interview"
    },
    {
        "task_id": 1310,
        "prompt": "Complete the Python function given the prompt below:Little Petya likes arrays that consist of non-negative integers a lot. Recently his mom has presented him one such array consisting of n elements. Petya immediately decided to find there a segment of consecutive elements, such that the xor of all numbers from this segment was maximal possible. Help him with that.\nThe xor operation is the bitwise exclusive \"OR\", that is denoted as \"xor\" in Pascal and \"^\" in C/C++/Java.\n-----Input-----\nThe first line contains integer n (1 \u2264 n \u2264 100) \u2014 the number of elements in the array. The second line contains the space-separated integers from the array. All numbers are non-negative integers strictly less than 2^30.\n-----Output-----\nPrint a single integer \u2014 the required maximal xor of a segment of consecutive elements.\n-----Examples-----\nInput\n5\n1 2 1 1 2\nOutput\n3\nInput\n3\n1 2 7\nOutput\n7\nInput\n4\n4 2 4 8\nOutput\n14\n-----Note-----\nIn the first sample one of the optimal segments is the segment that consists of the first and the second array elements, if we consider the array elements indexed starting from one.\nThe second sample contains only one optimal segment, which contains exactly one array element (element with index three).\n\ndef",
        "answer": "def xor_segment(arr):\n    xor_max = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            xor_max = max(xor_max, arr[j] ^ arr[i])\n    return xor_max",
        "difficulty": "interview"
    },
    {
        "task_id": 1311,
        "prompt": "Complete the Python function given the prompt below:The clique problem is one of the most well-known NP-complete problems. Under some simplification it can be formulated as follows. Consider an undirected graph G. It is required to find a subset of vertices C of the maximum size such that any two of them are connected by an edge in graph G. Sounds simple, doesn't it? Nobody yet knows an algorithm that finds a solution to this problem in polynomial time of the size of the graph. However, as with many other NP-complete problems, the clique problem is easier if you consider a specific type of a graph.\nConsider n distinct points on a line. Let the i-th point have the coordinate x_{i} and weight w_{i}. Let's form graph G, whose vertices are these points and edges connect exactly the pairs of points (i, j), such that the distance between them is not less than the sum of their weights, or more formally: |x_{i} - x_{j}| \u2265 w_{i} + w_{j}.\nFind the size of the maximum clique in such graph.\n-----Input-----\nThe first line contains the integer n (1 \u2264 n \u2264 200 000) \u2014 the number of points.\nEach of the next n lines contains two numbers x_{i}, w_{i} (0 \u2264 x_{i} \u2264 10^9, 1 \u2264 w_{i} \u2264 10^9) \u2014 the coordinate and the weight of a point. All x_{i} are different.\n-----Output-----\nPrint a single number \u2014 the number of vertexes in the maximum clique of the given graph.\n-----Examples-----\nInput\n4\n2 3\n3 1\n6 1\n0 2\nOutput\n3\n-----Note-----\nIf you happen to know how to solve this problem without using the specific properties of the graph formulated in the problem statement, then you are able to get a prize of one million dollars!\nThe picture for the sample test. [Image]\n\ndef",
        "answer": "def clique(n, x, w):\n    # Write your code here\n    return n",
        "difficulty": "interview"
    },
    {
        "task_id": 1312,
        "prompt": "Complete the Python function given the prompt below:Polycarpus has got n candies and m friends (n \u2265 m). He wants to make a New Year present with candies to each friend. Polycarpus is planning to present all candies and he wants to do this in the fairest (that is, most equal) manner. He wants to choose such a_{i}, where a_{i} is the number of candies in the i-th friend's present, that the maximum a_{i} differs from the least a_{i} as little as possible.\nFor example, if n is divisible by m, then he is going to present the same number of candies to all his friends, that is, the maximum a_{i} won't differ from the minimum one.\n-----Input-----\nThe single line of the input contains a pair of space-separated positive integers n, m (1 \u2264 n, m \u2264 100;n \u2265 m) \u2014 the number of candies and the number of Polycarpus's friends.\n-----Output-----\nPrint the required sequence a_1, a_2,..., a_{m}, where a_{i} is the number of candies in the i-th friend's present. All numbers a_{i} must be positive integers, total up to n, the maximum one should differ from the minimum one by the smallest possible value.\n-----Examples-----\nInput\n12 3\nOutput\n4 4 4 \nInput\n15 4\nOutput\n3 4 4 4 \nInput\n18 7\nOutput\n2 2 2 3 3 3 3 \n-----Note-----\nPrint a_{i} in any order, separate the numbers by spaces.\n\ndef",
        "answer": "def polycarpus(n, m):\n    return [min(n // m, n % m)] * m",
        "difficulty": "interview"
    },
    {
        "task_id": 1313,
        "prompt": "Complete the Python function given the prompt below:Two players play a simple game. Each player is provided with a box with balls. First player's box contains exactly n_1 balls and second player's box contains exactly n_2 balls. In one move first player can take from 1 to k_1 balls from his box and throw them away. Similarly, the second player can take from 1 to k_2 balls from his box in his move. Players alternate turns and the first player starts the game. The one who can't make a move loses. Your task is to determine who wins if both players play optimally.\n-----Input-----\nThe first line contains four integers n_1, n_2, k_1, k_2. All numbers in the input are from 1 to 50.\nThis problem doesn't have subproblems. You will get 3 points for the correct submission.\n-----Output-----\nOutput \"First\" if the first player wins and \"Second\" otherwise.\n-----Examples-----\nInput\n2 2 1 2\nOutput\nSecond\nInput\n2 1 1 1\nOutput\nFirst\n-----Note-----\nConsider the first sample test. Each player has a box with 2 balls. The first player draws a single ball from his box in one move and the second player can either take 1 or 2 balls from his box in one move. No matter how the first player acts, the second player can always win if he plays wisely.\n\ndef",
        "answer": "def game(n1, n2, k1, k2):\n    if n1 == n2:\n        if k1 == k2:\n            return \"Draw\"\n        else:\n            return \"First\" if k1 > k2 else \"Second\"\n    else:\n        return \"First\" if n1 > n2 else \"Second\"",
        "difficulty": "interview"
    },
    {
        "task_id": 1314,
        "prompt": "Complete the Python function given the prompt below:Bob is a pirate looking for the greatest treasure the world has ever seen. The treasure is located at the point $T$, which coordinates to be found out.\nBob travelled around the world and collected clues of the treasure location at $n$ obelisks. These clues were in an ancient language, and he has only decrypted them at home. Since he does not know which clue belongs to which obelisk, finding the treasure might pose a challenge. Can you help him?\nAs everyone knows, the world is a two-dimensional plane. The $i$-th obelisk is at integer coordinates $(x_i, y_i)$. The $j$-th clue consists of $2$ integers $(a_j, b_j)$ and belongs to the obelisk $p_j$, where $p$ is some (unknown) permutation on $n$ elements. It means that the treasure is located at $T=(x_{p_j} + a_j, y_{p_j} + b_j)$. This point $T$ is the same for all clues.\nIn other words, each clue belongs to exactly one of the obelisks, and each obelisk has exactly one clue that belongs to it. A clue represents the vector from the obelisk to the treasure. The clues must be distributed among the obelisks in such a way that they all point to the same position of the treasure.\nYour task is to find the coordinates of the treasure. If there are multiple solutions, you may print any of them.\nNote that you don't need to find the permutation. Permutations are used only in order to explain the problem.\n-----Input-----\nThe first line contains an integer $n$\u00a0($1 \\leq n \\leq 1000$)\u00a0\u2014 the number of obelisks, that is also equal to the number of clues.\nEach of the next $n$ lines contains two integers $x_i$, $y_i$\u00a0($-10^6 \\leq x_i, y_i \\leq 10^6$)\u00a0\u2014 the coordinates of the $i$-th obelisk. All coordinates are distinct, that is $x_i \\neq x_j$ or $y_i \\neq y_j$ will be satisfied for every $(i, j)$ such that $i \\neq j$. \nEach of the next $n$ lines contains two integers $a_i$, $b_i$\u00a0($-2 \\cdot 10^6 \\leq a_i, b_i \\leq 2 \\cdot 10^6$)\u00a0\u2014 the direction of the $i$-th clue. All coordinates are distinct, that is $a_i \\neq a_j$ or $b_i \\neq b_j$ will be satisfied for every $(i, j)$ such that $i \\neq j$. \nIt is guaranteed that there exists a permutation $p$, such that for all $i,j$ it holds $\\left(x_{p_i} + a_i, y_{p_i} + b_i\\right) = \\left(x_{p_j} + a_j, y_{p_j} + b_j\\right)$. \n-----Output-----\nOutput a single line containing two integers $T_x, T_y$\u00a0\u2014 the coordinates of the treasure.\nIf there are multiple answers, you may print any of them.\n-----Examples-----\nInput\n2\n2 5\n-6 4\n7 -2\n-1 -3\nOutput\n1 2\nInput\n4\n2 2\n8 2\n-7 0\n-2 6\n1 -14\n16 -12\n11 -18\n7 -14\nOutput\n9 -12\n-----Note-----\nAs $n = 2$, we can consider all permutations on two elements. \nIf $p = [1, 2]$, then the obelisk $(2, 5)$ holds the clue $(7, -2)$, which means that the treasure is hidden at $(9, 3)$. The second obelisk $(-6, 4)$ would give the clue $(-1,-3)$ and the treasure at $(-7, 1)$. However, both obelisks must give the same location, hence this is clearly not the correct permutation.\nIf the hidden permutation is $[2, 1]$, then the first clue belongs to the second obelisk and the second clue belongs to the first obelisk. Hence $(-6, 4) + (7, -2) = (2,5) + (-1,-3) = (1, 2)$, so $T = (1,2)$ is the location of the treasure. [Image] \nIn the second sample, the hidden permutation is $[2, 3, 4, 1]$.\n\ndef",
        "answer": "def treasure(n, x, y, a, b):\n    return x[n-1] + a[n-1], y[n-1] + b[n-1]",
        "difficulty": "interview"
    },
    {
        "task_id": 1315,
        "prompt": "Complete the Python function given the prompt below:Do you like summer? Residents of Berland do. They especially love eating ice cream in the hot summer. So this summer day a large queue of n Berland residents lined up in front of the ice cream stall. We know that each of them has a certain amount of berland dollars with them. The residents of Berland are nice people, so each person agrees to swap places with the person right behind him for just 1 dollar. More formally, if person a stands just behind person b, then person a can pay person b 1 dollar, then a and b get swapped. Of course, if person a has zero dollars, he can not swap places with person b.\nResidents of Berland are strange people. In particular, they get upset when there is someone with a strictly smaller sum of money in the line in front of them.\nCan you help the residents of Berland form such order in the line so that they were all happy? A happy resident is the one who stands first in the line or the one in front of who another resident stands with not less number of dollars. Note that the people of Berland are people of honor and they agree to swap places only in the manner described above.\n-----Input-----\nThe first line contains integer n (1 \u2264 n \u2264 200 000) \u2014 the number of residents who stand in the line.\nThe second line contains n space-separated integers a_{i} (0 \u2264 a_{i} \u2264 10^9), where a_{i} is the number of Berland dollars of a man standing on the i-th position in the line. The positions are numbered starting from the end of the line. \n-----Output-----\nIf it is impossible to make all the residents happy, print \":(\" without the quotes. Otherwise, print in the single line n space-separated integers, the i-th of them must be equal to the number of money of the person on position i in the new line. If there are multiple answers, print any of them.\n-----Examples-----\nInput\n2\n11 8\nOutput\n9 10 \nInput\n5\n10 9 7 10 6\nOutput\n:(\nInput\n3\n12 3 3\nOutput\n4 4 10 \n-----Note-----\nIn the first sample two residents should swap places, after that the first resident has 10 dollars and he is at the head of the line and the second resident will have 9 coins and he will be at the end of the line. \nIn the second sample it is impossible to achieve the desired result.\nIn the third sample the first person can swap with the second one, then they will have the following numbers of dollars: 4 11 3, then the second person (in the new line) swaps with the third one, and the resulting numbers of dollars will equal to: 4 4 10. In this line everybody will be happy.\n\ndef",
        "answer": "def swap_positions(lst, a, b):\n    lst[a], lst[b] = lst[b], lst[a]\n    return lst",
        "difficulty": "interview"
    },
    {
        "task_id": 1316,
        "prompt": "Complete the Python function given the prompt below:Given a string $s$ of length $n$ and integer $k$ ($1 \\le k \\le n$). The string $s$ has a level $x$, if $x$ is largest non-negative integer, such that it's possible to find in $s$:  $x$ non-intersecting (non-overlapping) substrings of length $k$,  all characters of these $x$ substrings are the same (i.e. each substring contains only one distinct character and this character is the same for all the substrings). \nA substring is a sequence of consecutive (adjacent) characters, it is defined by two integers $i$ and $j$ ($1 \\le i \\le j \\le n$), denoted as $s[i \\dots j]$ = \"$s_{i}s_{i+1} \\dots s_{j}$\".\nFor example, if $k = 2$, then:  the string \"aabb\" has level $1$ (you can select substring \"aa\"),  the strings \"zzzz\" and \"zzbzz\" has level $2$ (you can select two non-intersecting substrings \"zz\" in each of them),  the strings \"abed\" and \"aca\" have level $0$ (you can't find at least one substring of the length $k=2$ containing the only distinct character). \nZuhair gave you the integer $k$ and the string $s$ of length $n$. You need to find $x$, the level of the string $s$.\n-----Input-----\nThe first line contains two integers $n$ and $k$ ($1 \\le k \\le n \\le 2 \\cdot 10^5$)\u00a0\u2014 the length of the string and the value of $k$.\nThe second line contains the string $s$ of length $n$ consisting only of lowercase Latin letters.\n-----Output-----\nPrint a single integer $x$\u00a0\u2014 the level of the string.\n-----Examples-----\nInput\n8 2\naaacaabb\nOutput\n2\nInput\n2 1\nab\nOutput\n1\nInput\n4 2\nabab\nOutput\n0\n-----Note-----\nIn the first example, we can select $2$ non-intersecting substrings consisting of letter 'a': \"(aa)ac(aa)bb\", so the level is $2$.\nIn the second example, we can select either substring \"a\" or \"b\" to get the answer $1$.\n\ndef",
        "answer": "def level_of_string(s, k):\n    n = len(s)\n    level = 0\n    for i in range(n):\n        if k == 1:\n            level = max(level, 1)\n        else:\n            level = max(level, 1 + level_of_string(s[i+1:], k-1))\n    return level",
        "difficulty": "interview"
    },
    {
        "task_id": 1317,
        "prompt": "Complete the Python function given the prompt below:Arkady and his friends love playing checkers on an $n \\times n$ field. The rows and the columns of the field are enumerated from $1$ to $n$.\nThe friends have recently won a championship, so Arkady wants to please them with some candies. Remembering an old parable (but not its moral), Arkady wants to give to his friends one set of candies per each cell of the field: the set of candies for cell $(i, j)$ will have exactly $(i^2 + j^2)$ candies of unique type.\nThere are $m$ friends who deserve the present. How many of these $n \\times n$ sets of candies can be split equally into $m$ parts without cutting a candy into pieces? Note that each set has to be split independently since the types of candies in different sets are different.\n-----Input-----\nThe only line contains two integers $n$ and $m$ ($1 \\le n \\le 10^9$, $1 \\le m \\le 1000$)\u00a0\u2014 the size of the field and the number of parts to split the sets into.\n-----Output-----\nPrint a single integer\u00a0\u2014 the number of sets that can be split equally.\n-----Examples-----\nInput\n3 3\nOutput\n1\nInput\n6 5\nOutput\n13\nInput\n1000000000 1\nOutput\n1000000000000000000\n-----Note-----\nIn the first example, only the set for cell $(3, 3)$ can be split equally ($3^2 + 3^2 = 18$, which is divisible by $m=3$).\nIn the second example, the sets for the following cells can be divided equally:   $(1, 2)$ and $(2, 1)$, since $1^2 + 2^2 = 5$, which is divisible by $5$;  $(1, 3)$ and $(3, 1)$;  $(2, 4)$ and $(4, 2)$;  $(2, 6)$ and $(6, 2)$;  $(3, 4)$ and $(4, 3)$;  $(3, 6)$ and $(6, 3)$;  $(5, 5)$. \nIn the third example, sets in all cells can be divided equally, since $m = 1$.\n\ndef",
        "answer": "def checkers(n, m):\n    return n ** 2 + m ** 2",
        "difficulty": "interview"
    },
    {
        "task_id": 1318,
        "prompt": "Complete the Python function given the prompt below:Innovation technologies are on a victorious march around the planet. They integrate into all spheres of human activity!\nA restaurant called \"Dijkstra's Place\" has started thinking about optimizing the booking system. \nThere are n booking requests received by now. Each request is characterized by two numbers: c_{i} and p_{i} \u2014 the size of the group of visitors who will come via this request and the total sum of money they will spend in the restaurant, correspondingly.\nWe know that for each request, all c_{i} people want to sit at the same table and are going to spend the whole evening in the restaurant, from the opening moment at 18:00 to the closing moment.\nUnfortunately, there only are k tables in the restaurant. For each table, we know r_{i} \u2014 the maximum number of people who can sit at it. A table can have only people from the same group sitting at it. If you cannot find a large enough table for the whole group, then all visitors leave and naturally, pay nothing.\nYour task is: given the tables and the requests, decide which requests to accept and which requests to decline so that the money paid by the happy and full visitors was maximum.\n-----Input-----\nThe first line of the input contains integer n (1 \u2264 n \u2264 1000) \u2014 the number of requests from visitors. Then n lines follow. Each line contains two integers: c_{i}, p_{i} (1 \u2264 c_{i}, p_{i} \u2264 1000) \u2014 the size of the group of visitors who will come by the i-th request and the total sum of money they will pay when they visit the restaurant, correspondingly.\nThe next line contains integer k (1 \u2264 k \u2264 1000) \u2014 the number of tables in the restaurant. The last line contains k space-separated integers: r_1, r_2,..., r_{k} (1 \u2264 r_{i} \u2264 1000) \u2014 the maximum number of people that can sit at each table.\n-----Output-----\nIn the first line print two integers: m, s \u2014 the number of accepted requests and the total money you get from these requests, correspondingly.\nThen print m lines \u2014 each line must contain two space-separated integers: the number of the accepted request and the number of the table to seat people who come via this request. The requests and the tables are consecutively numbered starting from 1 in the order in which they are given in the input.\nIf there are multiple optimal answers, print any of them.\n-----Examples-----\nInput\n3\n10 50\n2 100\n5 30\n3\n4 6 9\nOutput\n2 130\n2 1\n3 2\n\ndef",
        "answer": "def max_money(n, k, r):\n    tables = [0] * k\n    for i in range(n):\n        for j in range(k):\n            if r[j] >= r[i]:\n                tables[j] += p[i]\n                break\n    return max(tables)",
        "difficulty": "interview"
    },
    {
        "task_id": 1319,
        "prompt": "Complete the Python function given the prompt below:Ayrat has number n, represented as it's prime factorization p_{i} of size m, i.e. n = p_1\u00b7p_2\u00b7...\u00b7p_{m}. Ayrat got secret information that that the product of all divisors of n taken modulo 10^9 + 7 is the password to the secret data base. Now he wants to calculate this value.\n-----Input-----\nThe first line of the input contains a single integer m (1 \u2264 m \u2264 200 000)\u00a0\u2014 the number of primes in factorization of n. \nThe second line contains m primes numbers p_{i} (2 \u2264 p_{i} \u2264 200 000).\n-----Output-----\nPrint one integer\u00a0\u2014 the product of all divisors of n modulo 10^9 + 7.\n-----Examples-----\nInput\n2\n2 3\nOutput\n36\nInput\n3\n2 3 2\nOutput\n1728\n-----Note-----\nIn the first sample n = 2\u00b73 = 6. The divisors of 6 are 1, 2, 3 and 6, their product is equal to 1\u00b72\u00b73\u00b76 = 36.\nIn the second sample 2\u00b73\u00b72 = 12. The divisors of 12 are 1, 2, 3, 4, 6 and 12. 1\u00b72\u00b73\u00b74\u00b76\u00b712 = 1728.\n\ndef",
        "answer": "def prime_factors(n):\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors",
        "difficulty": "interview"
    },
    {
        "task_id": 1320,
        "prompt": "Complete the Python function given the prompt below:Door's family is going celebrate Famil Doors's birthday party. They love Famil Door so they are planning to make his birthday cake weird!\nThe cake is a n \u00d7 n square consisting of equal squares with side length 1. Each square is either empty or consists of a single chocolate. They bought the cake and randomly started to put the chocolates on the cake. The value of Famil Door's happiness will be equal to the number of pairs of cells with chocolates that are in the same row or in the same column of the cake. Famil Doors's family is wondering what is the amount of happiness of Famil going to be?\nPlease, note that any pair can be counted no more than once, as two different cells can't share both the same row and the same column.\n-----Input-----\nIn the first line of the input, you are given a single integer n (1 \u2264 n \u2264 100)\u00a0\u2014 the length of the side of the cake.\nThen follow n lines, each containing n characters. Empty cells are denoted with '.', while cells that contain chocolates are denoted by 'C'.\n-----Output-----\nPrint the value of Famil Door's happiness, i.e. the number of pairs of chocolate pieces that share the same row or the same column.\n-----Examples-----\nInput\n3\n.CC\nC..\nC.C\nOutput\n4\nInput\n4\nCC..\nC..C\n.CC.\n.CC.\nOutput\n9\n-----Note-----\nIf we number rows from top to bottom and columns from left to right, then, pieces that share the same row in the first sample are:   (1, 2) and (1, 3)  (3, 1) and (3, 3)  Pieces that share the same column are:   (2, 1) and (3, 1)  (1, 3) and (3, 3)\n\ndef",
        "answer": "def birthday_cake_candles(candles):\n    return candles.count(max(candles))",
        "difficulty": "interview"
    },
    {
        "task_id": 1321,
        "prompt": "Complete the Python function given the prompt below:One day n friends met at a party, they hadn't seen each other for a long time and so they decided to make a group photo together. \nSimply speaking, the process of taking photos can be described as follows. On the photo, each photographed friend occupies a rectangle of pixels: the i-th of them occupies the rectangle of width w_{i} pixels and height h_{i} pixels. On the group photo everybody stands in a line, thus the minimum pixel size of the photo including all the photographed friends, is W \u00d7 H, where W is the total sum of all widths and H is the maximum height of all the photographed friends.\nAs is usually the case, the friends made n photos \u2014 the j-th (1 \u2264 j \u2264 n) photo had everybody except for the j-th friend as he was the photographer.\nPrint the minimum size of each made photo in pixels. \n-----Input-----\nThe first line contains integer n (2 \u2264 n \u2264 200 000) \u2014 the number of friends. \nThen n lines follow: the i-th line contains information about the i-th friend. The line contains a pair of integers w_{i}, h_{i} (1 \u2264 w_{i} \u2264 10, 1 \u2264 h_{i} \u2264 1000) \u2014 the width and height in pixels of the corresponding rectangle.\n-----Output-----\nPrint n space-separated numbers b_1, b_2,..., b_{n}, where b_{i} \u2014 the total number of pixels on the minimum photo containing all friends expect for the i-th one.\n-----Examples-----\nInput\n3\n1 10\n5 5\n10 1\nOutput\n75 110 60 \nInput\n3\n2 1\n1 2\n2 1\nOutput\n6 4 6\n\ndef",
        "answer": "def get_min_size(n, w, h):\n    return sum(w) + max(h)",
        "difficulty": "interview"
    },
    {
        "task_id": 1322,
        "prompt": "Complete the Python function given the prompt below:Sasha and Ira are two best friends. But they aren\u2019t just friends, they are software engineers and experts in artificial intelligence. They are developing an algorithm for two bots playing a two-player game. The game is cooperative and turn based. In each turn, one of the players makes a move (it doesn\u2019t matter which player, it's possible that players turns do not alternate). \nAlgorithm for bots that Sasha and Ira are developing works by keeping track of the state the game is in. Each time either bot makes a move, the state changes. And, since the game is very dynamic, it will never go back to the state it was already in at any point in the past.\nSasha and Ira are perfectionists and want their algorithm to have an optimal winning strategy. They have noticed that in the optimal winning strategy, both bots make exactly N moves each. But, in order to find the optimal strategy, their algorithm needs to analyze all possible states of the game (they haven\u2019t learned about alpha-beta pruning yet) and pick the best sequence of moves.\nThey are worried about the efficiency of their algorithm and are wondering what is the total number of states of the game that need to be analyzed? \n-----Input-----\nThe first and only line contains integer N.  1 \u2264 N \u2264 10^6 \n-----Output-----\nOutput should contain a single integer \u2013 number of possible states modulo 10^9 + 7.\n-----Examples-----\nInput\n2\nOutput\n19\n-----Note-----\nStart: Game is in state A.   Turn 1: Either bot can make a move (first bot is red and second bot is blue), so there are two possible states after the first turn \u2013 B and C.  Turn 2: In both states B and C, either bot can again make a turn, so the list of possible states is expanded to include D, E, F and G.  Turn 3: Red bot already did N=2 moves when in state D, so it cannot make any more moves there. It can make moves when in state E, F and G, so states I, K and M are added to the list. Similarly, blue bot cannot make a move when in state G, but can when in D, E and F, so states H, J and L are added.  Turn 4: Red bot already did N=2 moves when in states H, I and K, so it can only make moves when in J, L and M, so states P, R and S are added. Blue bot cannot make a move when in states J, L and M, but only when in H, I and K, so states N, O and Q are added. \nOverall, there are 19 possible states of the game their algorithm needs to analyze.\n[Image]\n\ndef",
        "answer": "def game_state(n):\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 4\n    else:\n        return game_state(n-1) + game_state(n-2)",
        "difficulty": "interview"
    },
    {
        "task_id": 1323,
        "prompt": "Complete the Python function given the prompt below:Piegirl was asked to implement two table join operation for distributed database system, minimizing the network traffic.\nSuppose she wants to join two tables, A and B. Each of them has certain number of rows which are distributed on different number of partitions. Table A is distributed on the first cluster consisting of m partitions. Partition with index i has a_{i} rows from A. Similarly, second cluster containing table B has n partitions, i-th one having b_{i} rows from B. \nIn one network operation she can copy one row from any partition to any other partition. At the end, for each row from A and each row from B there should be a partition that has both rows. Determine the minimal number of network operations to achieve this.\n-----Input-----\nFirst line contains two integer numbers, m and n (1 \u2264 m, n \u2264 10^5). Second line contains description of the first cluster with m space separated integers, a_{i} (1 \u2264 a_{i} \u2264 10^9). Similarly, third line describes second cluster with n space separated integers, b_{i} (1 \u2264 b_{i} \u2264 10^9).\n-----Output-----\nPrint one integer \u2014 minimal number of copy operations.\n-----Examples-----\nInput\n2 2\n2 6\n3 100\nOutput\n11\nInput\n2 3\n10 10\n1 1 1\nOutput\n6\n-----Note-----\nIn the first example it makes sense to move all the rows to the second partition of the second cluster which is achieved in 2 + 6 + 3 = 11 operations\nIn the second example Piegirl can copy each row from B to the both partitions of the first cluster which needs 2\u00b73 = 6 copy operations.\n\ndef",
        "answer": "def table_join(m, n):\n    return m + n - 1",
        "difficulty": "interview"
    },
    {
        "task_id": 1324,
        "prompt": "Complete the Python function given the prompt below:Quite recently, a very smart student named Jury decided that lectures are boring, so he downloaded a game called \"Black Square\" on his super cool touchscreen phone.\nIn this game, the phone's screen is divided into four vertical strips. Each second, a black square appears on some of the strips. According to the rules of the game, Jury must use this second to touch the corresponding strip to make the square go away. As Jury is both smart and lazy, he counted that he wastes exactly a_{i} calories on touching the i-th strip.\nYou've got a string s, describing the process of the game and numbers a_1, a_2, a_3, a_4. Calculate how many calories Jury needs to destroy all the squares?\n-----Input-----\nThe first line contains four space-separated integers a_1, a_2, a_3, a_4 (0 \u2264 a_1, a_2, a_3, a_4 \u2264 10^4).\nThe second line contains string s (1 \u2264 |s| \u2264 10^5), where the \u0456-th character of the string equals \"1\", if on the i-th second of the game the square appears on the first strip, \"2\", if it appears on the second strip, \"3\", if it appears on the third strip, \"4\", if it appears on the fourth strip.\n-----Output-----\nPrint a single integer \u2014 the total number of calories that Jury wastes.\n-----Examples-----\nInput\n1 2 3 4\n123214\nOutput\n13\nInput\n1 5 3 2\n11221\nOutput\n13\n\ndef",
        "answer": "def square_calories(a):\n    return sum(a)",
        "difficulty": "interview"
    },
    {
        "task_id": 1325,
        "prompt": "Complete the Python function given the prompt below:Nam is playing with a string on his computer. The string consists of n lowercase English letters. It is meaningless, so Nam decided to make the string more beautiful, that is to make it be a palindrome by using 4 arrow keys: left, right, up, down.\nThere is a cursor pointing at some symbol of the string. Suppose that cursor is at position i (1 \u2264 i \u2264 n, the string uses 1-based indexing) now. Left and right arrow keys are used to move cursor around the string. The string is cyclic, that means that when Nam presses left arrow key, the cursor will move to position i - 1 if i > 1 or to the end of the string (i. e. position n) otherwise. The same holds when he presses the right arrow key (if i = n, the cursor appears at the beginning of the string).\nWhen Nam presses up arrow key, the letter which the text cursor is pointing to will change to the next letter in English alphabet (assuming that alphabet is also cyclic, i. e. after 'z' follows 'a'). The same holds when he presses the down arrow key.\nInitially, the text cursor is at position p. \nBecause Nam has a lot homework to do, he wants to complete this as fast as possible. Can you help him by calculating the minimum number of arrow keys presses to make the string to be a palindrome?\n-----Input-----\nThe first line contains two space-separated integers n (1 \u2264 n \u2264 10^5) and p (1 \u2264 p \u2264 n), the length of Nam's string and the initial position of the text cursor.\nThe next line contains n lowercase characters of Nam's string.\n-----Output-----\nPrint the minimum number of presses needed to change string into a palindrome.\n-----Examples-----\nInput\n8 3\naeabcaez\nOutput\n6\n-----Note-----\nA string is a palindrome if it reads the same forward or reversed.\nIn the sample test, initial Nam's string is: $\\text{aeabcaez}$ (cursor position is shown bold).\nIn optimal solution, Nam may do 6 following steps:[Image]\nThe result, $\\text{zeaccaez}$, is now a palindrome.\n\ndef",
        "answer": "def palindrome(s, p):\n    n = len(s)\n    res = 0\n    for i in range(n):\n        if s[i]!= s[n - 1 - i]:\n            res += 1\n    return res",
        "difficulty": "interview"
    },
    {
        "task_id": 1326,
        "prompt": "Complete the Python function given the prompt below:For a positive integer X, let f(X) be the number of positive divisors of X.\nGiven a positive integer N, find \\sum_{K=1}^N K\\times f(K).\n-----Constraints-----\n - 1 \\leq N \\leq 10^7\n-----Input-----\nInput is given from Standard Input in the following format:\nN\n-----Output-----\nPrint the value \\sum_{K=1}^N K\\times f(K).\n-----Sample Input-----\n4\n-----Sample Output-----\n23\nWe have f(1)=1, f(2)=2, f(3)=2, and f(4)=3, so the answer is 1\\times 1 + 2\\times 2 + 3\\times 2 + 4\\times 3 =23.\n\ndef",
        "answer": "def divisors(n):\n    count = 0\n    for i in range(1,n+1):\n        if n%i == 0:\n            count += 1\n    return count",
        "difficulty": "interview"
    },
    {
        "task_id": 1327,
        "prompt": "Complete the Python function given the prompt below:Takahashi became a pastry chef and opened a shop La Confiserie d'ABC to celebrate AtCoder Beginner Contest 100.\nThe shop sells N kinds of cakes.\nEach kind of cake has three parameters \"beauty\", \"tastiness\" and \"popularity\". The i-th kind of cake has the beauty of x_i, the tastiness of y_i and the popularity of z_i.\nThese values may be zero or negative.\nRingo has decided to have M pieces of cakes here. He will choose the set of cakes as follows:\n - Do not have two or more pieces of the same kind of cake.\n - Under the condition above, choose the set of cakes to maximize (the absolute value of the total beauty) + (the absolute value of the total tastiness)  + (the absolute value of the total popularity).\nFind the maximum possible value of (the absolute value of the total beauty) + (the absolute value of the total tastiness) + (the absolute value of the total popularity) for the set of cakes that Ringo chooses.\n-----Constraints-----\n - N is an integer between 1 and 1 \\ 000 (inclusive).\n - M is an integer between 0 and N (inclusive).\n - x_i, y_i, z_i \\ (1 \\leq i \\leq N) are integers between -10 \\ 000 \\ 000 \\ 000 and 10 \\ 000 \\ 000 \\ 000 (inclusive).\n-----Input-----\nInput is given from Standard Input in the following format:\nN M\nx_1 y_1 z_1\nx_2 y_2 z_2\n :  :\nx_N y_N z_N\n-----Output-----\nPrint the maximum possible value of (the absolute value of the total beauty) + (the absolute value of the total tastiness) + (the absolute value of the total popularity) for the set of cakes that Ringo chooses.\n-----Sample Input-----\n5 3\n3 1 4\n1 5 9\n2 6 5\n3 5 8\n9 7 9\n-----Sample Output-----\n56\nConsider having the 2-nd, 4-th and 5-th kinds of cakes. The total beauty, tastiness and popularity will be as follows:\n - Beauty: 1 + 3 + 9 = 13\n - Tastiness: 5 + 5 + 7 = 17\n - Popularity: 9 + 8 + 9 = 26\nThe value (the absolute value of the total beauty) + (the absolute value of the total tastiness) + (the absolute value of the total popularity) here is 13 + 17 + 26 = 56. This is the maximum value.\n\ndef",
        "answer": "def max_sum(n, m, arr):\n    arr.sort(key=lambda x: x[0] + x[1] + x[2], reverse=True)\n    return sum(arr[:m])",
        "difficulty": "interview"
    },
    {
        "task_id": 1328,
        "prompt": "Complete the Python function given the prompt below:Dolphin is planning to generate a small amount of a certain chemical substance C.\nIn order to generate the substance C, he must prepare a solution which is a mixture of two substances A and B in the ratio of M_a:M_b.\nHe does not have any stock of chemicals, however, so he will purchase some chemicals at a local pharmacy.\nThe pharmacy sells N kinds of chemicals. For each kind of chemical, there is exactly one package of that chemical in stock.\nThe package of chemical i contains a_i grams of the substance A and b_i grams of the substance B, and is sold for c_i yen (the currency of Japan).\nDolphin will purchase some of these packages. For some reason, he must use all contents of the purchased packages to generate the substance C.\nFind the minimum amount of money required to generate the substance C.\nIf it is not possible to generate the substance C by purchasing any combination of packages at the pharmacy, report that fact.  \n-----Constraints-----\n - 1\u2266N\u226640 \n - 1\u2266a_i,b_i\u226610 \n - 1\u2266c_i\u2266100 \n - 1\u2266M_a,M_b\u226610 \n - gcd(M_a,M_b)=1\n - a_i, b_i, c_i, M_a and M_b are integers.\n-----Input-----\nThe input is given from Standard Input in the following format:\nN M_a M_b  \na_1 b_1 c_1  \na_2 b_2 c_2\n:  \na_N b_N c_N  \n-----Output-----\nPrint the minimum amount of money required to generate the substance C. If it is not possible to generate the substance C, print -1 instead.\n-----Sample Input-----\n3 1 1\n1 2 1\n2 1 2\n3 3 10\n-----Sample Output-----\n3\nThe amount of money spent will be minimized by purchasing the packages of chemicals 1 and 2.\nIn this case, the mixture of the purchased chemicals will contain 3 grams of the substance A and 3 grams of the substance B, which are in the desired ratio: 3:3=1:1.\nThe total price of these packages is 3 yen.\n\ndef",
        "answer": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a",
        "difficulty": "interview"
    },
    {
        "task_id": 1329,
        "prompt": "Complete the Python function given the prompt below:You are given an integer N. Among the divisors of N! (= 1 \\times 2 \\times... \\times N), how many Shichi-Go numbers (literally \"Seven-Five numbers\") are there?\nHere, a Shichi-Go number is a positive integer that has exactly 75 divisors.\n-----Note-----\nWhen a positive integer A divides a positive integer B, A is said to a divisor of B.\nFor example, 6 has four divisors: 1, 2, 3 and 6.\n-----Constraints-----\n - 1 \\leq N \\leq 100\n - N is an integer.\n-----Input-----\nInput is given from Standard Input in the following format:\nN\n-----Output-----\nPrint the number of the Shichi-Go numbers that are divisors of N!.\n-----Sample Input-----\n9\n-----Sample Output-----\n0\nThere are no Shichi-Go numbers among the divisors of 9! = 1 \\times 2 \\times... \\times 9 = 362880.\n\ndef",
        "answer": "def divisors(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count",
        "difficulty": "interview"
    },
    {
        "task_id": 1330,
        "prompt": "Complete the Python function given the prompt below:There are $n$ students and $m$ clubs in a college. The clubs are numbered from $1$ to $m$. Each student has a potential $p_i$ and is a member of the club with index $c_i$. Initially, each student is a member of exactly one club. A technical fest starts in the college, and it will run for the next $d$ days. There is a coding competition every day in the technical fest. \nEvery day, in the morning, exactly one student of the college leaves their club. Once a student leaves their club, they will never join any club again. Every day, in the afternoon, the director of the college will select one student from each club (in case some club has no members, nobody is selected from that club) to form a team for this day's coding competition. The strength of a team is the mex of potentials of the students in the team. The director wants to know the maximum possible strength of the team for each of the coming $d$ days. Thus, every day the director chooses such team, that the team strength is maximized.\nThe mex of the multiset $S$ is the smallest non-negative integer that is not present in $S$. For example, the mex of the $\\{0, 1, 1, 2, 4, 5, 9\\}$ is $3$, the mex of $\\{1, 2, 3\\}$ is $0$ and the mex of $\\varnothing$ (empty set) is $0$.\n-----Input-----\nThe first line contains two integers $n$ and $m$ ($1 \\leq m \\leq n \\leq 5000$), the number of students and the number of clubs in college.\nThe second line contains $n$ integers $p_1, p_2, \\ldots, p_n$ ($0 \\leq p_i < 5000$), where $p_i$ is the potential of the $i$-th student.\nThe third line contains $n$ integers $c_1, c_2, \\ldots, c_n$ ($1 \\leq c_i \\leq m$), which means that $i$-th student is initially a member of the club with index $c_i$.\nThe fourth line contains an integer $d$ ($1 \\leq d \\leq n$), number of days for which the director wants to know the maximum possible strength of the team. \nEach of the next $d$ lines contains an integer $k_i$ ($1 \\leq k_i \\leq n$), which means that $k_i$-th student lefts their club on the $i$-th day. It is guaranteed, that the $k_i$-th student has not left their club earlier.\n-----Output-----\nFor each of the $d$ days, print the maximum possible strength of the team on that day.\n-----Examples-----\nInput\n5 3\n0 1 2 2 0\n1 2 2 3 2\n5\n3\n2\n4\n5\n1\nOutput\n3\n1\n1\n1\n0\nInput\n5 3\n0 1 2 2 1\n1 3 2 3 2\n5\n4\n2\n3\n5\n1\nOutput\n3\n2\n2\n1\n0\nInput\n5 5\n0 1 2 4 5\n1 2 3 4 5\n4\n2\n3\n5\n4\nOutput\n1\n1\n1\n1\n-----Note-----\nConsider the first example:\nOn the first day, student $3$ leaves their club. Now, the remaining students are $1$, $2$, $4$ and $5$. We can select students $1$, $2$ and $4$ to get maximum possible strength, which is $3$. Note, that we can't select students $1$, $2$ and $5$, as students $2$ and $5$ belong to the same club. Also, we can't select students $1$, $3$ and $4$, since student $3$ has left their club.\nOn the second day, student $2$ leaves their club. Now, the remaining students are $1$, $4$ and $5$. We can select students $1$, $4$ and $5$ to get maximum possible strength, which is $1$.\nOn the third day, the remaining students are $1$ and $5$. We can select students $1$ and $5$ to get maximum possible strength, which is $1$.\nOn the fourth day, the remaining student is $1$. We can select student $1$ to get maximum possible strength, which is $1$. \nOn the fifth day, no club has students and so the maximum possible strength is $0$.\n\ndef",
        "answer": "def solve(n, m, p, c, d):\n    # Write your code here\n    res = [0] * d\n    for i in range(d):\n        res[i] = max(p[j] for j in c)\n        c = [j for j in c if p[j]!= res[i]]\n    return res",
        "difficulty": "interview"
    },
    {
        "task_id": 1331,
        "prompt": "Complete the Python function given the prompt below:Every evening Vitalya sets n alarm clocks to wake up tomorrow. Every alarm clock rings during exactly one minute and is characterized by one integer a_{i}\u00a0\u2014 number of minute after midnight in which it rings. Every alarm clock begins ringing at the beginning of the minute and rings during whole minute. \nVitalya will definitely wake up if during some m consecutive minutes at least k alarm clocks will begin ringing. Pay attention that Vitalya considers only alarm clocks which begin ringing during given period of time. He doesn't consider alarm clocks which started ringing before given period of time and continues ringing during given period of time.\nVitalya is so tired that he wants to sleep all day long and not to wake up. Find out minimal number of alarm clocks Vitalya should turn off to sleep all next day. Now all alarm clocks are turned on. \n-----Input-----\nFirst line contains three integers n, m and k (1 \u2264 k \u2264 n \u2264 2\u00b710^5, 1 \u2264 m \u2264 10^6)\u00a0\u2014 number of alarm clocks, and conditions of Vitalya's waking up. \nSecond line contains sequence of distinct integers a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 10^6) in which a_{i} equals minute on which i-th alarm clock will ring. Numbers are given in arbitrary order. Vitalya lives in a Berland in which day lasts for 10^6 minutes. \n-----Output-----\nOutput minimal number of alarm clocks that Vitalya should turn off to sleep all next day long.\n-----Examples-----\nInput\n3 3 2\n3 5 1\nOutput\n1\nInput\n5 10 3\n12 8 18 25 1\nOutput\n0\nInput\n7 7 2\n7 3 4 1 6 5 2\nOutput\n6\nInput\n2 2 2\n1 3\nOutput\n0\n-----Note-----\nIn first example Vitalya should turn off first alarm clock which rings at minute 3.\nIn second example Vitalya shouldn't turn off any alarm clock because there are no interval of 10 consequence minutes in which 3 alarm clocks will ring.\nIn third example Vitalya should turn off any 6 alarm clocks.\n\ndef",
        "answer": "def alarm_clock(n, m, k):\n    return min(k, n - k)",
        "difficulty": "interview"
    },
    {
        "task_id": 1332,
        "prompt": "Complete the Python function given the prompt below:There are five people playing a game called \"Generosity\". Each person gives some non-zero number of coins b as an initial bet. After all players make their bets of b coins, the following operation is repeated for several times: a coin is passed from one player to some other player.\nYour task is to write a program that can, given the number of coins each player has at the end of the game, determine the size b of the initial bet or find out that such outcome of the game cannot be obtained for any positive number of coins b in the initial bet.\n-----Input-----\nThe input consists of a single line containing five integers c_1, c_2, c_3, c_4 and c_5 \u2014 the number of coins that the first, second, third, fourth and fifth players respectively have at the end of the game (0 \u2264 c_1, c_2, c_3, c_4, c_5 \u2264 100).\n-----Output-----\nPrint the only line containing a single positive integer b \u2014 the number of coins in the initial bet of each player. If there is no such value of b, then print the only value \"-1\" (quotes for clarity).\n-----Examples-----\nInput\n2 5 4 0 4\nOutput\n3\nInput\n4 5 9 2 1\nOutput\n-1\n-----Note-----\nIn the first sample the following sequence of operations is possible:  One coin is passed from the fourth player to the second player;  One coin is passed from the fourth player to the fifth player;  One coin is passed from the first player to the third player;  One coin is passed from the fourth player to the second player.\n\ndef",
        "answer": "def gen(c):\n    if c[0] == 0 or c[1] == 0 or c[2] == 0 or c[3] == 0 or c[4] == 0:\n        return -1\n    else:\n        return c[0] + c[1] + c[2] + c[3] + c[4]",
        "difficulty": "interview"
    },
    {
        "task_id": 1333,
        "prompt": "Complete the Python function given the prompt below:Fox Ciel starts to learn programming. The first task is drawing a fox! However, that turns out to be too hard for a beginner, so she decides to draw a snake instead.\nA snake is a pattern on a n by m table. Denote c-th cell of r-th row as (r, c). The tail of the snake is located at (1, 1), then it's body extends to (1, m), then goes down 2 rows to (3, m), then goes left to (3, 1) and so on.\nYour task is to draw this snake for Fox Ciel: the empty cells should be represented as dot characters ('.') and the snake cells should be filled with number signs ('#').\nConsider sample tests in order to understand the snake pattern.\n-----Input-----\nThe only line contains two integers: n and m (3 \u2264 n, m \u2264 50). \nn is an odd number.\n-----Output-----\nOutput n lines. Each line should contain a string consisting of m characters. Do not output spaces.\n-----Examples-----\nInput\n3 3\nOutput\n###\n..#\n###\nInput\n3 4\nOutput\n####\n...#\n####\nInput\n5 3\nOutput\n###\n..#\n###\n#..\n###\nInput\n9 9\nOutput\n#########\n........#\n#########\n#........\n#########\n........#\n#########\n#........\n#########\n\ndef",
        "answer": "def draw_snake(n, m):\n    for i in range(n):\n        if i % 2 == 0:\n            for j in range(m):\n                if j % 2 == 0:\n                    print('#', end='')\n                else:\n                    print('.', end='')\n        else:\n            for j in range(m):\n                if j % 2 == 0:\n                    print('.', end='')\n                else:\n                    print('#', end='')\n        print()",
        "difficulty": "interview"
    },
    {
        "task_id": 1334,
        "prompt": "Complete the Python function given the prompt below:And where the are the phone numbers?\nYou are given a string s consisting of lowercase English letters and an integer k. Find the lexicographically smallest string t of length k, such that its set of letters is a subset of the set of letters of s and s is lexicographically smaller than t.\nIt's guaranteed that the answer exists.\nNote that the set of letters is a set, not a multiset. For example, the set of letters of abadaba is {a, b, d}.\nString p is lexicographically smaller than string q, if p is a prefix of q, is not equal to q or there exists i, such that p_{i} < q_{i} and for all j < i it is satisfied that p_{j} = q_{j}. For example, abc is lexicographically smaller than abcd, abd is lexicographically smaller than abec, afa is not lexicographically smaller than ab and a is not lexicographically smaller than a.\n-----Input-----\nThe first line of input contains two space separated integers n and k (1 \u2264 n, k \u2264 100 000)\u00a0\u2014 the length of s and the required length of t.\nThe second line of input contains the string s consisting of n lowercase English letters.\n-----Output-----\nOutput the string t conforming to the requirements above.\nIt's guaranteed that the answer exists.\n-----Examples-----\nInput\n3 3\nabc\nOutput\naca\nInput\n3 2\nabc\nOutput\nac\nInput\n3 3\nayy\nOutput\nyaa\nInput\n2 3\nba\nOutput\nbaa\n-----Note-----\nIn the first example the list of strings t of length 3, such that the set of letters of t is a subset of letters of s is as follows: aaa, aab, aac, aba, abb, abc, aca, acb,.... Among them, those are lexicographically greater than abc: aca, acb,.... Out of those the lexicographically smallest is aca.\n\ndef",
        "answer": "def lexicographically_smallest_substring(s, k):\n    # Write your code here\n    if k == 1:\n        return s[0]\n    if k == 2:\n        return s[0] + s[1]\n    if k == 3:\n        return s[0] + s[1] + s[2]\n    if k == 4:\n        return s[0] + s[1] + s[2] + s[3]\n    if k == 5:\n        return s[0] + s[1] + s[2] + s[3] + s[4]\n    if k == 6:\n        return s[0] + s[1] + s[2] + s[3] + s[4] + s[5]\n    if k == 7:\n        return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6]\n    if k == 8:\n        return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7]\n    if k == 9:\n        return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8]\n    if k == 10:\n        return s[0] + s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8] + s[9]\n    if k == 11:\n        return s[0]",
        "difficulty": "interview"
    },
    {
        "task_id": 1335,
        "prompt": "Complete the Python function given the prompt below:Vasya likes taking part in Codeforces contests. When a round is over, Vasya follows all submissions in the system testing tab.\nThere are $n$ solutions, the $i$-th of them should be tested on $a_i$ tests, testing one solution on one test takes $1$ second. The solutions are judged in the order from $1$ to $n$. There are $k$ testing processes which test solutions simultaneously. Each of them can test at most one solution at a time.\nAt any time moment $t$ when some testing process is not judging any solution, it takes the first solution from the queue and tests it on each test in increasing order of the test ids. Let this solution have id $i$, then it is being tested on the first test from time moment $t$ till time moment $t + 1$, then on the second test till time moment $t + 2$ and so on. This solution is fully tested at time moment $t + a_i$, and after that the testing process immediately starts testing another solution.\nConsider some time moment, let there be exactly $m$ fully tested solutions by this moment. There is a caption \"System testing: $d$%\" on the page with solutions, where $d$ is calculated as\n$$d = round\\left(100\\cdot\\frac{m}{n}\\right),$$\nwhere $round(x) = \\lfloor{x + 0.5}\\rfloor$ is a function which maps every real to the nearest integer.\nVasya calls a submission interesting if there is a time moment (possibly, non-integer) when the solution is being tested on some test $q$, and the caption says \"System testing: $q$%\". Find the number of interesting solutions.\nPlease note that in case when multiple processes attempt to take the first submission from the queue at the same moment (for instance, at the initial moment), the order they take the solutions does not matter.\n-----Input-----\nThe first line contains two positive integers $n$ and $k$ ($1 \\le n \\le 1000$, $1 \\le k \\le 100$) standing for the number of submissions and the number of testing processes respectively.\nThe second line contains $n$ positive integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 150$), where $a_i$ is equal to the number of tests the $i$-th submission is to be run on.\n-----Output-----\nOutput the only integer\u00a0\u2014 the number of interesting submissions.\n-----Examples-----\nInput\n2 2\n49 100\nOutput\n1\nInput\n4 2\n32 100 33 1\nOutput\n2\nInput\n14 5\n48 19 6 9 50 20 3 42 38 43 36 21 44 6\nOutput\n5\n-----Note-----\nConsider the first example. At time moment $0$ both solutions start testing. At time moment $49$ the first solution is fully tested, so at time moment $49.5$ the second solution is being tested on the test $50$, and the caption says \"System testing: $50$%\" (because there is one fully tested solution out of two). So, the second solution is interesting.\nConsider the second example. At time moment $0$ the first and the second solutions start testing. At time moment $32$ the first solution is fully tested, the third solution starts testing, the caption says \"System testing: $25$%\". At time moment $32 + 24.5 = 56.5$ the third solutions is being tested on test $25$, the caption is still the same, thus this solution is interesting. After that the third solution is fully tested at time moment $32 + 33 = 65$, the fourth solution is fully tested at time moment $65 + 1 = 66$. The captions becomes \"System testing: $75$%\", and at time moment $74.5$ the second solution is being tested on test $75$. So, this solution is also interesting. Overall, there are two interesting solutions.\n\ndef",
        "answer": "def solution(n, k, a):\n    return 0",
        "difficulty": "interview"
    },
    {
        "task_id": 1336,
        "prompt": "Complete the Python function given the prompt below:There are famous Russian nesting dolls named matryoshkas sold in one of the souvenir stores nearby, and you'd like to buy several of them. The store has $n$ different matryoshkas. Any matryoshka is a figure of volume $out_i$ with an empty space inside of volume $in_i$ (of course, $out_i > in_i$).\nYou don't have much free space inside your bag, but, fortunately, you know that matryoshkas can be nested one inside another. Formally, let's call a set of matryoshkas nested if we can rearrange dolls in such a way, that the first doll can be nested inside the second one, the second doll \u2014 inside the third one and so on. Matryoshka $i$ can be nested inside matryoshka $j$ if $out_i \\le in_j$. So only the last doll will take space inside your bag.\nLet's call extra space of a nested set of dolls as a total volume of empty space inside this structure. Obviously, it's equal to $in_{i_1} + (in_{i_2} - out_{i_1}) + (in_{i_3} - out_{i_2}) + \\dots + (in_{i_k} - out_{i_{k-1}})$, where $i_1$, $i_2$,..., $i_k$ are the indices of the chosen dolls in the order they are nested in each other.\nFinally, let's call a nested subset of the given sequence as big enough if there isn't any doll from the sequence that can be added to the nested subset without breaking its nested property.\nYou want to buy many matryoshkas, so you should choose a big enough nested subset to buy it. But you will be disappointed if too much space in your bag will be wasted, so you want to choose a big enough subset so that its extra space is minimum possible among all big enough subsets. Now you wonder, how many different nested subsets meet these conditions (they are big enough, and there is no big enough subset such that its extra space is less than the extra space of the chosen subset). Two subsets are considered different if there exists at least one index $i$ such that one of the subsets contains the $i$-th doll, and another subset doesn't.\nSince the answer can be large, print it modulo $10^9 + 7$.\n-----Input-----\nThe first line contains a single integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) \u2014 the number of matryoshkas.\nThe next $n$ lines contain a description of each doll: two integers $out_i$ and $in_i$ ($1 \\le in_i < out_i \\le 10^9$) \u2014 the outer and inners volumes of the $i$-th matryoshka.\n-----Output-----\nPrint one integer \u2014 the number of big enough nested subsets such that extra space of each of these subsets is minimum possible. Since the answer can be large, print it modulo $10^9 + 7$.\n-----Example-----\nInput\n7\n4 1\n4 2\n4 2\n2 1\n5 4\n6 4\n3 2\nOutput\n6\n-----Note-----\nThere are $6$ big enough nested subsets with minimum possible extra space in the example:   $\\{1, 5\\}$: we can't add any other matryoshka and keep it nested; it's extra space is $1$;  $\\{1, 6\\}$;  $\\{2, 4, 5\\}$;  $\\{2, 4, 6\\}$;  $\\{3, 4, 5\\}$;  $\\{3, 4, 6\\}$. \nThere are no more \"good\" subsets because, for example, subset $\\{6, 7\\}$ is not big enough (we can add the $4$-th matryoshka to it) or subset $\\{4, 6, 7\\}$ has extra space equal to $2$.\n\ndef",
        "answer": "def nesting_dolls(n):\n    dolls = []\n    for i in range(n):\n        dolls.append(list(map(int, input().split())))\n    dolls.sort(key=lambda x: x[0])\n    dp = [0] * n\n    dp[0] = dolls[0][1]\n    for i in range(1, n):\n        dp[i] = max(dp[i - 1], dolls[i][1])\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp\n    dp = [0] + dp",
        "difficulty": "interview"
    },
    {
        "task_id": 1337,
        "prompt": "Complete the Python function given the prompt below:Moscow is hosting a major international conference, which is attended by n scientists from different countries. Each of the scientists knows exactly one language. For convenience, we enumerate all languages of the world with integers from 1 to 10^9.\nIn the evening after the conference, all n scientists decided to go to the cinema. There are m movies in the cinema they came to. Each of the movies is characterized by two distinct numbers\u00a0\u2014 the index of audio language and the index of subtitles language. The scientist, who came to the movie, will be very pleased if he knows the audio language of the movie, will be almost satisfied if he knows the language of subtitles and will be not satisfied if he does not know neither one nor the other (note that the audio language and the subtitles language for each movie are always different). \nScientists decided to go together to the same movie. You have to help them choose the movie, such that the number of very pleased scientists is maximum possible. If there are several such movies, select among them one that will maximize the number of almost satisfied scientists.\n-----Input-----\nThe first line of the input contains a positive integer n (1 \u2264 n \u2264 200 000)\u00a0\u2014 the number of scientists.\nThe second line contains n positive integers a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 10^9), where a_{i} is the index of a language, which the i-th scientist knows.\nThe third line contains a positive integer m (1 \u2264 m \u2264 200 000)\u00a0\u2014 the number of movies in the cinema. \nThe fourth line contains m positive integers b_1, b_2,..., b_{m} (1 \u2264 b_{j} \u2264 10^9), where b_{j} is the index of the audio language of the j-th movie.\nThe fifth line contains m positive integers c_1, c_2,..., c_{m} (1 \u2264 c_{j} \u2264 10^9), where c_{j} is the index of subtitles language of the j-th movie.\nIt is guaranteed that audio languages and subtitles language are different for each movie, that is b_{j} \u2260 c_{j}. \n-----Output-----\nPrint the single integer\u00a0\u2014 the index of a movie to which scientists should go. After viewing this movie the number of very pleased scientists should be maximum possible. If in the cinema there are several such movies, you need to choose among them one, after viewing which there will be the maximum possible number of almost satisfied scientists. \nIf there are several possible answers print any of them.\n-----Examples-----\nInput\n3\n2 3 2\n2\n3 2\n2 3\nOutput\n2\nInput\n6\n6 3 1 1 3 7\n5\n1 2 3 4 5\n2 3 4 5 1\nOutput\n1\n-----Note-----\nIn the first sample, scientists must go to the movie with the index 2, as in such case the 1-th and the 3-rd scientists will be very pleased and the 2-nd scientist will be almost satisfied.\nIn the second test case scientists can go either to the movie with the index 1 or the index 3. After viewing any of these movies exactly two scientists will be very pleased and all the others will be not satisfied.\n\ndef",
        "answer": "def find_movie(n, a, m, b, c):\n    a_set = set(a)\n    b_set = set(b)\n    c_set = set(c)\n    a_b_set = set(a) & set(b)\n    a_c_set = set(a) & set(c)\n    b_c_set = set(b) & set(c)\n    a_b_c_set = set(a) & set(b) & set(c)\n    a_b_c_set = set(a) & set(b) & set(c)\n    a_c_b_set = set(a) & set(c) & set(b)\n    a_c_b_set = set(a) & set(c) & set(b)\n    b_c_a_set = set(b) & set(c) & set(a)\n    b_c_a_set = set(b) & set(c) & set(a)\n    a_b_c_set = set(a) & set(b) & set(c)\n    a_b_c_set = set(a) & set(b) & set(c)\n    a_c_b_set = set(a) & set(c) & set(b)\n    a_c_b_set = set(a) & set(c) & set(b)\n    b_c_a_set = set(b) & set(c) & set(a)\n    b_c_a_set = set(b) & set(c) & set(a)\n    a_b_c_set = set(a) & set(",
        "difficulty": "interview"
    },
    {
        "task_id": 1338,
        "prompt": "Complete the Python function given the prompt below:You are given a permutation p of numbers 1, 2,..., n. Let's define f(p) as the following sum:$f(p) = \\sum_{i = 1}^{n} \\sum_{j = i}^{n} \\operatorname{min}(p_{i}, p_{i + 1}, \\ldots p_{j})$\nFind the lexicographically m-th permutation of length n in the set of permutations having the maximum possible value of f(p).\n-----Input-----\nThe single line of input contains two integers n and m (1 \u2264 m \u2264 cnt_{n}), where cnt_{n} is the number of permutations of length n with maximum possible value of f(p).\nThe problem consists of two subproblems. The subproblems have different constraints on the input. You will get some score for the correct submission of the subproblem. The description of the subproblems follows.  In subproblem B1 (3 points), the constraint 1 \u2264 n \u2264 8 will hold.  In subproblem B2 (4 points), the constraint 1 \u2264 n \u2264 50 will hold. \n-----Output-----\nOutput n number forming the required permutation.\n-----Examples-----\nInput\n2 2\nOutput\n2 1 \nInput\n3 2\nOutput\n1 3 2 \n-----Note-----\nIn the first example, both permutations of numbers {1, 2} yield maximum possible f(p) which is equal to 4. Among them, (2, 1) comes second in lexicographical order.\n\ndef",
        "answer": "def f(p):\n    # Write your code here\n    n = len(p)\n    f = [0] * n\n    f[0] = p[0]\n    for i in range(1, n):\n        f[i] = p[i]\n        for j in range(i):\n            if p[j] < p[i] and f[i] < f[j] + p[i]:\n                f[i] = f[j] + p[i]\n    return max(f)\n",
        "difficulty": "interview"
    },
    {
        "task_id": 1339,
        "prompt": "Complete the Python function given the prompt below:A coordinate line has n segments, the i-th segment starts at the position l_{i} and ends at the position r_{i}. We will denote such a segment as [l_{i}, r_{i}].\nYou have suggested that one of the defined segments covers all others. In other words, there is such segment in the given set, which contains all other ones. Now you want to test your assumption. Find in the given set the segment which covers all other segments, and print its number. If such a segment doesn't exist, print -1.\nFormally we will assume that segment [a, b] covers segment [c, d], if they meet this condition a \u2264 c \u2264 d \u2264 b. \n-----Input-----\nThe first line contains integer n (1 \u2264 n \u2264 10^5) \u2014 the number of segments. Next n lines contain the descriptions of the segments. The i-th line contains two space-separated integers l_{i}, r_{i} (1 \u2264 l_{i} \u2264 r_{i} \u2264 10^9) \u2014 the borders of the i-th segment.\nIt is guaranteed that no two segments coincide.\n-----Output-----\nPrint a single integer \u2014 the number of the segment that covers all other segments in the set. If there's no solution, print -1.\nThe segments are numbered starting from 1 in the order in which they appear in the input.\n-----Examples-----\nInput\n3\n1 1\n2 2\n3 3\nOutput\n-1\nInput\n6\n1 5\n2 3\n1 10\n7 10\n7 7\n10 10\nOutput\n3\n\ndef",
        "answer": "def segment_cover(segments):\n    segments.sort(key=lambda x: x[0])\n    start = segments[0][0]\n    end = segments[0][1]\n    for i in range(1, len(segments)):\n        if start <= segments[i][0] <= end:\n            start = min(start, segments[i][0])\n            end = max(end, segments[i][1])\n        else:\n            return -1\n    return start",
        "difficulty": "interview"
    },
    {
        "task_id": 1340,
        "prompt": "Complete the Python function given the prompt below:Monocarp has arranged $n$ colored marbles in a row. The color of the $i$-th marble is $a_i$. Monocarp likes ordered things, so he wants to rearrange marbles in such a way that all marbles of the same color form a contiguos segment (and there is only one such segment for each color). \nIn other words, Monocarp wants to rearrange marbles so that, for every color $j$, if the leftmost marble of color $j$ is $l$-th in the row, and the rightmost marble of this color has position $r$ in the row, then every marble from $l$ to $r$ has color $j$.\nTo achieve his goal, Monocarp can do the following operation any number of times: choose two neighbouring marbles, and swap them.\nYou have to calculate the minimum number of operations Monocarp has to perform to rearrange the marbles. Note that the order of segments of marbles having equal color does not matter, it is only required that, for every color, all the marbles of this color form exactly one contiguous segment.\n-----Input-----\nThe first line contains one integer $n$ $(2 \\le n \\le 4 \\cdot 10^5)$ \u2014 the number of marbles.\nThe second line contains an integer sequence $a_1, a_2, \\dots, a_n$ $(1 \\le a_i \\le 20)$, where $a_i$ is the color of the $i$-th marble.\n-----Output-----\nPrint the minimum number of operations Monocarp has to perform to achieve his goal.\n-----Examples-----\nInput\n7\n3 4 2 3 4 2 2\nOutput\n3\nInput\n5\n20 1 14 10 2\nOutput\n0\nInput\n13\n5 5 4 4 3 5 7 6 5 4 4 6 5\nOutput\n21\n-----Note-----\nIn the first example three operations are enough. Firstly, Monocarp should swap the third and the fourth marbles, so the sequence of colors is $[3, 4, 3, 2, 4, 2, 2]$. Then Monocarp should swap the second and the third marbles, so the sequence is $[3, 3, 4, 2, 4, 2, 2]$. And finally, Monocarp should swap the fourth and the fifth marbles, so the sequence is $[3, 3, 4, 4, 2, 2, 2]$. \nIn the second example there's no need to perform any operations.\n\ndef",
        "answer": "def swap(a, i, j):\n    a[i], a[j] = a[j], a[i]",
        "difficulty": "interview"
    },
    {
        "task_id": 1341,
        "prompt": "Complete the Python function given the prompt below:There is a sequence of colorful stones. The color of each stone is one of red, green, or blue. You are given a string s. The i-th (1-based) character of s represents the color of the i-th stone. If the character is \"R\", \"G\", or \"B\", the color of the corresponding stone is red, green, or blue, respectively.\nInitially Squirrel Liss is standing on the first stone. You perform instructions one or more times.\nEach instruction is one of the three types: \"RED\", \"GREEN\", or \"BLUE\". After an instruction c, if Liss is standing on a stone whose colors is c, Liss will move one stone forward, else she will not move.\nYou are given a string t. The number of instructions is equal to the length of t, and the i-th character of t represents the i-th instruction.\nCalculate the final position of Liss (the number of the stone she is going to stand on in the end) after performing all the instructions, and print its 1-based position. It is guaranteed that Liss don't move out of the sequence.\n-----Input-----\nThe input contains two lines. The first line contains the string s (1 \u2264 |s| \u2264 50). The second line contains the string t (1 \u2264 |t| \u2264 50). The characters of each string will be one of \"R\", \"G\", or \"B\". It is guaranteed that Liss don't move out of the sequence.\n-----Output-----\nPrint the final 1-based position of Liss in a single line.\n-----Examples-----\nInput\nRGB\nRRR\nOutput\n2\nInput\nRRRBGBRBBB\nBBBRR\nOutput\n3\nInput\nBRRBGBRGRBGRGRRGGBGBGBRGBRGRGGGRBRRRBRBBBGRRRGGBBB\nBBRBGGRGRGBBBRBGRBRBBBBRBRRRBGBBGBBRRBBGGRBRRBRGRB\nOutput\n15\n\ndef",
        "answer": "def solution(s, t):\n    # write your code in Python 3.6\n    # s = \"RRR\"\n    # t = \"RRR\"\n    # s = \"RRRBGBRBBB\"\n    # t = \"BBBRR\"\n    # s = \"RRRBGBRGRBGRGRRGGBGBGBRGBRGRGGGRBRRRBRBBBGRRRGGBBB\"\n    # t = \"BBRBGGRGRGBBBRBGRRRBGBBGBRRRBBGGRRRRGRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR",
        "difficulty": "interview"
    },
    {
        "task_id": 1342,
        "prompt": "Complete the Python function given the prompt below:There are n boxes with colored balls on the table. Colors are numbered from 1 to n. i-th box contains a_{i} balls, all of which have color i. You have to write a program that will divide all balls into sets such that:  each ball belongs to exactly one of the sets,  there are no empty sets,  there is no set containing two (or more) balls of different colors (each set contains only balls of one color),  there are no two sets such that the difference between their sizes is greater than 1. \nPrint the minimum possible number of sets.\n-----Input-----\nThe first line contains one integer number n (1 \u2264 n \u2264 500).\nThe second line contains n integer numbers a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 10^9).\n-----Output-----\nPrint one integer number \u2014 the minimum possible number of sets.\n-----Examples-----\nInput\n3\n4 7 8\nOutput\n5\nInput\n2\n2 7\nOutput\n4\n-----Note-----\nIn the first example the balls can be divided into sets like that: one set with 4 balls of the first color, two sets with 3 and 4 balls, respectively, of the second color, and two sets with 4 balls of the third color.\n\ndef",
        "answer": "def balls(n, a):\n    a.sort()\n    a.append(0)\n    a.append(n+1)\n    a.sort()\n    a.append(0)\n    a.append(n+1)\n    a.sort()\n    a.append(0)\n    a.append(n+1)\n    a.sort()\n    a.append(0)\n    a.append(n+1)\n    a.sort()\n    a.append(0)\n    a.append(n+1)\n    a.sort()\n    a.append(0)\n    a.append(n+1)\n    a.sort()\n    a.append(0)\n    a.append(n+1)\n    a.sort()\n    a.append(0)\n    a.append(n+1)\n    a.sort()\n    a.append(0)\n    a.append(n+1)\n    a.sort()\n    a.append(0)\n    a.append(n+1)\n    a.sort()\n    a.append(0)\n    a.append(n+1)\n    a.sort()\n    a.append(0)\n    a.append(n+1)\n    a.sort()\n    a.append(0)\n    a.append(n+1)\n    a.sort()\n    a.append(0)\n    a.append(n+1)\n    a.sort()\n    a.append(0)\n    a.append(n+1)\n    a.sort()\n    a.append(0)\n    a.append(n+1)\n    a.sort()\n    a.",
        "difficulty": "interview"
    },
    {
        "task_id": 1343,
        "prompt": "Complete the Python function given the prompt below:Masha wants to open her own bakery and bake muffins in one of the n cities numbered from 1 to n. There are m bidirectional roads, each of whose connects some pair of cities.\nTo bake muffins in her bakery, Masha needs to establish flour supply from some storage. There are only k storages, located in different cities numbered a_1, a_2,..., a_{k}.\nUnforunately the law of the country Masha lives in prohibits opening bakery in any of the cities which has storage located in it. She can open it only in one of another n - k cities, and, of course, flour delivery should be paid\u00a0\u2014 for every kilometer of path between storage and bakery Masha should pay 1 ruble.\nFormally, Masha will pay x roubles, if she will open the bakery in some city b (a_{i} \u2260 b for every 1 \u2264 i \u2264 k) and choose a storage in some city s (s = a_{j} for some 1 \u2264 j \u2264 k) and b and s are connected by some path of roads of summary length x (if there are more than one path, Masha is able to choose which of them should be used).\nMasha is very thrifty and rational. She is interested in a city, where she can open her bakery (and choose one of k storages and one of the paths between city with bakery and city with storage) and pay minimum possible amount of rubles for flour delivery. Please help Masha find this amount.\n-----Input-----\nThe first line of the input contains three integers n, m and k (1 \u2264 n, m \u2264 10^5, 0 \u2264 k \u2264 n)\u00a0\u2014 the number of cities in country Masha lives in, the number of roads between them and the number of flour storages respectively.\nThen m lines follow. Each of them contains three integers u, v and l (1 \u2264 u, v \u2264 n, 1 \u2264 l \u2264 10^9, u \u2260 v) meaning that there is a road between cities u and v of length of l kilometers.\nIf k > 0, then the last line of the input contains k distinct integers a_1, a_2,..., a_{k} (1 \u2264 a_{i} \u2264 n)\u00a0\u2014 the number of cities having flour storage located in. If k = 0 then this line is not presented in the input.\n-----Output-----\nPrint the minimum possible amount of rubles Masha should pay for flour delivery in the only line.\nIf the bakery can not be opened (while satisfying conditions) in any of the n cities, print  - 1 in the only line.\n-----Examples-----\nInput\n5 4 2\n1 2 5\n1 2 3\n2 3 4\n1 4 10\n1 5\nOutput\n3\nInput\n3 1 1\n1 2 3\n3\nOutput\n-1\n-----Note-----\n[Image]\nImage illustrates the first sample case. Cities with storage located in and the road representing the answer are darkened.\n\ndef",
        "answer": "def find_min_cost(n, m, k, roads, storages):\n    # Write your code here\n    roads.sort(key=lambda x: x[2])\n    storages.sort()\n    min_cost = 0\n    for i in range(k):\n        min_cost += storages[i][2]\n    for road in roads:\n        if road[0] in storages or road[1] in storages:\n            min_cost += road[2]\n    return min_cost",
        "difficulty": "interview"
    },
    {
        "task_id": 1344,
        "prompt": "Complete the Python function given the prompt below:You are given array consisting of n integers. Your task is to find the maximum length of an increasing subarray of the given array.\nA subarray is the sequence of consecutive elements of the array. Subarray is called increasing if each element of this subarray strictly greater than previous.\n-----Input-----\nThe first line contains single positive integer n (1 \u2264 n \u2264 10^5) \u2014 the number of integers.\nThe second line contains n positive integers a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 10^9).\n-----Output-----\nPrint the maximum length of an increasing subarray of the given array.\n-----Examples-----\nInput\n5\n1 7 2 11 15\nOutput\n3\nInput\n6\n100 100 100 100 100 100\nOutput\n1\nInput\n3\n1 2 3\nOutput\n3\n\ndef",
        "answer": "def longest_increasing_subarray(arr):\n    max_length = 0\n    for i in range(len(arr)):\n        current_length = 1\n        for j in range(i+1, len(arr)):\n            if arr[j] > arr[j-1]:\n                current_length += 1\n            else:\n                break\n        max_length = max(max_length, current_length)\n    return max_length",
        "difficulty": "interview"
    },
    {
        "task_id": 1345,
        "prompt": "Complete the Python function given the prompt below:Vasya has found a piece of paper with an array written on it. The array consists of n integers a_1, a_2,..., a_{n}. Vasya noticed that the following condition holds for the array a_{i} \u2264 a_{i} + 1 \u2264 2\u00b7a_{i} for any positive integer i (i < n).\nVasya wants to add either a \"+\" or a \"-\" before each number of array. Thus, Vasya will get an expression consisting of n summands. The value of the resulting expression is the sum of all its elements. The task is to add signs \"+\" and \"-\" before each number so that the value of expression s meets the limits 0 \u2264 s \u2264 a_1. Print a sequence of signs \"+\" and \"-\", satisfying the given limits. It is guaranteed that the solution for the problem exists.\n-----Input-----\nThe first line contains integer n (1 \u2264 n \u2264 10^5) \u2014 the size of the array. The second line contains space-separated integers a_1, a_2,..., a_{n} (0 \u2264 a_{i} \u2264 10^9) \u2014 the original array. \nIt is guaranteed that the condition a_{i} \u2264 a_{i} + 1 \u2264 2\u00b7a_{i} fulfills for any positive integer i (i < n).\n-----Output-----\nIn a single line print the sequence of n characters \"+\" and \"-\", where the i-th character is the sign that is placed in front of number a_{i}. The value of the resulting expression s must fit into the limits 0 \u2264 s \u2264 a_1. If there are multiple solutions, you are allowed to print any of them.\n-----Examples-----\nInput\n4\n1 2 3 5\nOutput\n+++-\nInput\n3\n3 3 5\nOutput\n++-\n\ndef",
        "answer": "def add_signs(arr):\n    return ''.join(['+' if i % 2 == 0 else '-' for i in arr])",
        "difficulty": "interview"
    },
    {
        "task_id": 1346,
        "prompt": "Complete the Python function given the prompt below:It is Professor R's last class of his teaching career. Every time Professor R taught a class, he gave a special problem for the students to solve. You being his favourite student, put your heart into solving it one last time.\nYou are given two polynomials $f(x) = a_0 + a_1x + \\dots + a_{n-1}x^{n-1}$ and $g(x) = b_0 + b_1x + \\dots + b_{m-1}x^{m-1}$, with positive integral coefficients. It is guaranteed that the cumulative GCD of the coefficients is equal to $1$ for both the given polynomials. In other words, $gcd(a_0, a_1, \\dots, a_{n-1}) = gcd(b_0, b_1, \\dots, b_{m-1}) = 1$. Let $h(x) = f(x)\\cdot g(x)$. Suppose that $h(x) = c_0 + c_1x + \\dots + c_{n+m-2}x^{n+m-2}$. \nYou are also given a prime number $p$. Professor R challenges you to find any $t$ such that $c_t$ isn't divisible by $p$. He guarantees you that under these conditions such $t$ always exists. If there are several such $t$, output any of them.\nAs the input is quite large, please use fast input reading methods.\n-----Input-----\nThe first line of the input contains three integers, $n$, $m$ and $p$ ($1 \\leq n, m \\leq 10^6, 2 \\leq p \\leq 10^9$), \u00a0\u2014 $n$ and $m$ are the number of terms in $f(x)$ and $g(x)$ respectively (one more than the degrees of the respective polynomials) and $p$ is the given prime number.\nIt is guaranteed that $p$ is prime.\nThe second line contains $n$ integers $a_0, a_1, \\dots, a_{n-1}$ ($1 \\leq a_{i} \\leq 10^{9}$)\u00a0\u2014 $a_i$ is the coefficient of $x^{i}$ in $f(x)$.\nThe third line contains $m$ integers $b_0, b_1, \\dots, b_{m-1}$ ($1 \\leq b_{i} \\leq 10^{9}$) \u00a0\u2014 $b_i$ is the coefficient of $x^{i}$ in $g(x)$.\n-----Output-----\nPrint a single integer $t$ ($0\\le t \\le n+m-2$) \u00a0\u2014 the appropriate power of $x$ in $h(x)$ whose coefficient isn't divisible by the given prime $p$. If there are multiple powers of $x$ that satisfy the condition, print any.\n-----Examples-----\nInput\n3 2 2\n1 1 2\n2 1\nOutput\n1\nInput\n2 2 999999937\n2 1\n3 1\nOutput\n2\n-----Note-----\nIn the first test case, $f(x)$ is $2x^2 + x + 1$ and $g(x)$ is $x + 2$, their product $h(x)$ being $2x^3 + 5x^2 + 3x + 2$, so the answer can be 1 or 2 as both 3 and 5 aren't divisible by 2.\nIn the second test case, $f(x)$ is $x + 2$ and $g(x)$ is $x + 3$, their product $h(x)$ being $x^2 + 5x + 6$, so the answer can be any of the powers as no coefficient is divisible by the given prime.\n\ndef",
        "answer": "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)",
        "difficulty": "interview"
    },
    {
        "task_id": 1347,
        "prompt": "Complete the Python function given the prompt below:After you had helped Fedor to find friends in the \u00abCall of Soldiers 3\u00bb game, he stopped studying completely. Today, the English teacher told him to prepare an essay. Fedor didn't want to prepare the essay, so he asked Alex for help. Alex came to help and wrote the essay for Fedor. But Fedor didn't like the essay at all. Now Fedor is going to change the essay using the synonym dictionary of the English language.\nFedor does not want to change the meaning of the essay. So the only change he would do: change a word from essay to one of its synonyms, basing on a replacement rule from the dictionary. Fedor may perform this operation any number of times.\nAs a result, Fedor wants to get an essay which contains as little letters \u00abR\u00bb (the case doesn't matter) as possible. If there are multiple essays with minimum number of \u00abR\u00bbs he wants to get the one with minimum length (length of essay is the sum of the lengths of all the words in it). Help Fedor get the required essay.\nPlease note that in this problem the case of letters doesn't matter. For example, if the synonym dictionary says that word cat can be replaced with word DOG, then it is allowed to replace the word Cat with the word doG.\n-----Input-----\nThe first line contains a single integer m (1 \u2264 m \u2264 10^5) \u2014 the number of words in the initial essay. The second line contains words of the essay. The words are separated by a single space. It is guaranteed that the total length of the words won't exceed 10^5 characters.\nThe next line contains a single integer n (0 \u2264 n \u2264 10^5) \u2014 the number of pairs of words in synonym dictionary. The i-th of the next n lines contains two space-separated non-empty words x_{i} and y_{i}. They mean that word x_{i} can be replaced with word y_{i} (but not vise versa). It is guaranteed that the total length of all pairs of synonyms doesn't exceed 5\u00b710^5 characters.\nAll the words at input can only consist of uppercase and lowercase letters of the English alphabet.\n-----Output-----\nPrint two integers \u2014 the minimum number of letters \u00abR\u00bb in an optimal essay and the minimum length of an optimal essay.\n-----Examples-----\nInput\n3\nAbRb r Zz\n4\nxR abRb\naA xr\nzz Z\nxr y\nOutput\n2 6\nInput\n2\nRuruRu fedya\n1\nruruRU fedor\nOutput\n1 10\n\ndef",
        "answer": "def synonym_replacement(sentence, synonyms):\n    sentence = sentence.split()\n    for i in range(len(sentence)):\n        for synonym in synonyms:\n            if sentence[i] == synonym[0]:\n                sentence[i] = synonym[1]\n    return''.join(sentence)",
        "difficulty": "interview"
    },
    {
        "task_id": 1348,
        "prompt": "Complete the Python function given the prompt below:Valera had an undirected connected graph without self-loops and multiple edges consisting of n vertices. The graph had an interesting property: there were at most k edges adjacent to each of its vertices. For convenience, we will assume that the graph vertices were indexed by integers from 1 to n.\nOne day Valera counted the shortest distances from one of the graph vertices to all other ones and wrote them out in array d. Thus, element d[i] of the array shows the shortest distance from the vertex Valera chose to vertex number i.\nThen something irreparable terrible happened. Valera lost the initial graph. However, he still has the array d. Help him restore the lost graph.\n-----Input-----\nThe first line contains two space-separated integers n and k (1 \u2264 k < n \u2264 10^5). Number n shows the number of vertices in the original graph. Number k shows that at most k edges were adjacent to each vertex in the original graph.\nThe second line contains space-separated integers d[1], d[2],..., d[n] (0 \u2264 d[i] < n). Number d[i] shows the shortest distance from the vertex Valera chose to the vertex number i.\n-----Output-----\nIf Valera made a mistake in his notes and the required graph doesn't exist, print in the first line number -1. Otherwise, in the first line print integer m (0 \u2264 m \u2264 10^6) \u2014 the number of edges in the found graph.\nIn each of the next m lines print two space-separated integers a_{i} and b_{i} (1 \u2264 a_{i}, b_{i} \u2264 n;\u00a0a_{i} \u2260 b_{i}), denoting the edge that connects vertices with numbers a_{i} and b_{i}. The graph shouldn't contain self-loops and multiple edges. If there are multiple possible answers, print any of them.\n-----Examples-----\nInput\n3 2\n0 1 1\nOutput\n3\n1 2\n1 3\n3 2\nInput\n4 2\n2 0 1 3\nOutput\n3\n1 3\n1 4\n2 3\nInput\n3 1\n0 0 0\nOutput\n-1\n\ndef",
        "answer": "def restore_graph(n, k, d):\n    graph = [[] for _ in range(n)]\n    for i in range(n):\n        for j in range(i + 1, n):\n            if d[i] + d[j] <= k:\n                graph[i].append(j)\n                graph[j].append(i)\n    return graph",
        "difficulty": "interview"
    },
    {
        "task_id": 1349,
        "prompt": "Complete the Python function given the prompt below:It is winter now, and Max decided it's about time he watered the garden.\nThe garden can be represented as n consecutive garden beds, numbered from 1 to n. k beds contain water taps (i-th tap is located in the bed x_{i}), which, if turned on, start delivering water to neighbouring beds. If the tap on the bed x_{i} is turned on, then after one second has passed, the bed x_{i} will be watered; after two seconds have passed, the beds from the segment [x_{i} - 1, x_{i} + 1] will be watered (if they exist); after j seconds have passed (j is an integer number), the beds from the segment [x_{i} - (j - 1), x_{i} + (j - 1)] will be watered (if they exist). Nothing changes during the seconds, so, for example, we can't say that the segment [x_{i} - 2.5, x_{i} + 2.5] will be watered after 2.5 seconds have passed; only the segment [x_{i} - 2, x_{i} + 2] will be watered at that moment.\n $\\left. \\begin{array}{|c|c|c|c|c|} \\hline 1 & {2} & {3} & {4} & {5} \\\\ \\hline \\end{array} \\right.$ The garden from test 1. White colour denotes a garden bed without a tap, red colour \u2014 a garden bed with a tap. \n $\\left. \\begin{array}{|c|c|c|c|c|} \\hline 1 & {2} & {3} & {4} & {5} \\\\ \\hline \\end{array} \\right.$ The garden from test 1 after 2 seconds have passed after turning on the tap. White colour denotes an unwatered garden bed, blue colour \u2014 a watered bed. \nMax wants to turn on all the water taps at the same moment, and now he wonders, what is the minimum number of seconds that have to pass after he turns on some taps until the whole garden is watered. Help him to find the answer!\n-----Input-----\nThe first line contains one integer t \u2014 the number of test cases to solve (1 \u2264 t \u2264 200).\nThen t test cases follow. The first line of each test case contains two integers n and k (1 \u2264 n \u2264 200, 1 \u2264 k \u2264 n) \u2014 the number of garden beds and water taps, respectively.\nNext line contains k integers x_{i} (1 \u2264 x_{i} \u2264 n) \u2014 the location of i-th water tap. It is guaranteed that for each $i \\in [ 2 ; k ]$ condition x_{i} - 1 < x_{i} holds.\nIt is guaranteed that the sum of n over all test cases doesn't exceed 200.\nNote that in hacks you have to set t = 1.\n-----Output-----\nFor each test case print one integer \u2014 the minimum number of seconds that have to pass after Max turns on some of the water taps, until the whole garden is watered.\n-----Example-----\nInput\n3\n5 1\n3\n3 3\n1 2 3\n4 1\n1\nOutput\n3\n1\n4\n-----Note-----\nThe first example consists of 3 tests:\n  There are 5 garden beds, and a water tap in the bed 3. If we turn it on, then after 1 second passes, only bed 3 will be watered; after 2 seconds pass, beds [1, 3] will be watered, and after 3 seconds pass, everything will be watered.  There are 3 garden beds, and there is a water tap in each one. If we turn all of them on, then everything will be watered after 1 second passes.  There are 4 garden beds, and only one tap in the bed 1. It will take 4 seconds to water, for example, bed 4.\n\ndef",
        "answer": "def water_garden(n, k, x):\n    # Write your code here\n    # n = 5\n    # k = 1\n    # x = [3, 3]\n    # x = [1, 2, 3]\n    # x = [1, 2, 3, 4]\n    # x = [1, 2, 3, 4, 5]\n    # x = [1, 2, 3, 4, 5, 6]\n    # x = [1, 2, 3, 4, 5, 6, 7]\n    # x = [1, 2, 3, 4, 5, 6, 7, 8]\n    # x = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    # x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    # x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n    # x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    # x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n    # x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n    # x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n    # x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n    # x = [1, 2,",
        "difficulty": "interview"
    },
    {
        "task_id": 1350,
        "prompt": "Complete the Python function given the prompt below:You are given a string $s$ of length $n$, which consists only of the first $k$ letters of the Latin alphabet. All letters in string $s$ are uppercase.\nA subsequence of string $s$ is a string that can be derived from $s$ by deleting some of its symbols without changing the order of the remaining symbols. For example, \"ADE\" and \"BD\" are subsequences of \"ABCDE\", but \"DEA\" is not.\nA subsequence of $s$ called good if the number of occurences of each of the first $k$ letters of the alphabet is the same.\nFind the length of the longest good subsequence of $s$. \n-----Input-----\nThe first line of the input contains integers $n$ ($1\\le n \\le 10^5$) and $k$ ($1 \\le k \\le 26$).\nThe second line of the input contains the string $s$ of length $n$. String $s$ only contains uppercase letters from 'A' to the $k$-th letter of Latin alphabet.\n-----Output-----\nPrint the only integer\u00a0\u2014 the length of the longest good subsequence of string $s$.\n-----Examples-----\nInput\n9 3\nACAABCCAB\nOutput\n6\nInput\n9 4\nABCABCABC\nOutput\n0\n-----Note-----\nIn the first example, \"ACBCAB\" (\"ACAABCCAB\") is one of the subsequences that has the same frequency of 'A', 'B' and 'C'. Subsequence \"CAB\" also has the same frequency of these letters, but doesn't have the maximum possible length.\nIn the second example, none of the subsequences can have 'D', hence the answer is $0$.\n\ndef",
        "answer": "def longest_subsequence(s, k):\n    freq = [0] * 26\n    for i in range(k):\n        freq[ord(s[i]) - ord('A')] += 1\n    max_len = 0\n    for i in range(k, len(s)):\n        freq[ord(s[i]) - ord('A')] += 1\n        for j in range(26):\n            freq[j] -= 1\n            if freq[j] == 0:\n                max_len = max(max_len, i - k + 1)\n    return max_len",
        "difficulty": "interview"
    },
    {
        "task_id": 1351,
        "prompt": "Complete the Python function given the prompt below:You have two integers $l$ and $r$. Find an integer $x$ which satisfies the conditions below:\n  $l \\le x \\le r$.  All digits of $x$ are different. \nIf there are multiple answers, print any of them.\n-----Input-----\nThe first line contains two integers $l$ and $r$ ($1 \\le l \\le r \\le 10^{5}$).\n-----Output-----\nIf an answer exists, print any of them. Otherwise, print $-1$.\n-----Examples-----\nInput\n121 130\nOutput\n123\nInput\n98766 100000\nOutput\n-1\n-----Note-----\nIn the first example, $123$ is one of the possible answers. However, $121$ can't be the answer, because there are multiple $1$s on different digits.\nIn the second example, there is no valid answer.\n\ndef",
        "answer": "def find_x(l, r):\n  # Fill this in.",
        "difficulty": "interview"
    },
    {
        "task_id": 1352,
        "prompt": "Complete the Python function given the prompt below:You are given an array consisting of $n$ integers $a_1, a_2, \\dots, a_n$ and an integer $x$. It is guaranteed that for every $i$, $1 \\le a_i \\le x$.\nLet's denote a function $f(l, r)$ which erases all values such that $l \\le a_i \\le r$ from the array $a$ and returns the resulting array. For example, if $a = [4, 1, 1, 4, 5, 2, 4, 3]$, then $f(2, 4) = [1, 1, 5]$.\nYour task is to calculate the number of pairs $(l, r)$ such that $1 \\le l \\le r \\le x$ and $f(l, r)$ is sorted in non-descending order. Note that the empty array is also considered sorted.\n-----Input-----\nThe first line contains two integers $n$ and $x$ ($1 \\le n, x \\le 10^6$) \u2014 the length of array $a$ and the upper limit for its elements, respectively.\nThe second line contains $n$ integers $a_1, a_2, \\dots a_n$ ($1 \\le a_i \\le x$).\n-----Output-----\nPrint the number of pairs $1 \\le l \\le r \\le x$ such that $f(l, r)$ is sorted in non-descending order.\n-----Examples-----\nInput\n3 3\n2 3 1\nOutput\n4\nInput\n7 4\n1 3 1 2 2 4 3\nOutput\n6\n-----Note-----\nIn the first test case correct pairs are $(1, 1)$, $(1, 2)$, $(1, 3)$ and $(2, 3)$.\nIn the second test case correct pairs are $(1, 3)$, $(1, 4)$, $(2, 3)$, $(2, 4)$, $(3, 3)$ and $(3, 4)$.\n\ndef",
        "answer": "def count_sorted_pairs(a, x):\n    count = 0\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            if a[i] <= a[j] <= x:\n                count += 1\n    return count",
        "difficulty": "interview"
    },
    {
        "task_id": 1353,
        "prompt": "Complete the Python function given the prompt below:Ann has recently started commuting by subway. We know that a one ride subway ticket costs a rubles. Besides, Ann found out that she can buy a special ticket for m rides (she can buy it several times). It costs b rubles. Ann did the math; she will need to use subway n times. Help Ann, tell her what is the minimum sum of money she will have to spend to make n rides?\n-----Input-----\nThe single line contains four space-separated integers n, m, a, b (1 \u2264 n, m, a, b \u2264 1000) \u2014 the number of rides Ann has planned, the number of rides covered by the m ride ticket, the price of a one ride ticket and the price of an m ride ticket. \n-----Output-----\nPrint a single integer \u2014 the minimum sum in rubles that Ann will need to spend.\n-----Examples-----\nInput\n6 2 1 2\nOutput\n6\nInput\n5 2 2 3\nOutput\n8\n-----Note-----\nIn the first sample one of the optimal solutions is: each time buy a one ride ticket. There are other optimal solutions. For example, buy three m ride tickets.\n\ndef",
        "answer": "def subway(n, m, a, b):\n    return n * a + m * b",
        "difficulty": "interview"
    },
    {
        "task_id": 1354,
        "prompt": "Complete the Python function given the prompt below:Alice and Bob love playing one-dimensional battle ships. They play on the field in the form of a line consisting of n square cells (that is, on a 1 \u00d7 n table).\nAt the beginning of the game Alice puts k ships on the field without telling their positions to Bob. Each ship looks as a 1 \u00d7 a rectangle (that is, it occupies a sequence of a consecutive squares of the field). The ships cannot intersect and even touch each other.\nAfter that Bob makes a sequence of \"shots\". He names cells of the field and Alice either says that the cell is empty (\"miss\"), or that the cell belongs to some ship (\"hit\").\nBut here's the problem! Alice like to cheat. May be that is why she responds to each Bob's move with a \"miss\". \nHelp Bob catch Alice cheating \u2014 find Bob's first move, such that after it you can be sure that Alice cheated.\n-----Input-----\nThe first line of the input contains three integers: n, k and a (1 \u2264 n, k, a \u2264 2\u00b710^5) \u2014 the size of the field, the number of the ships and the size of each ship. It is guaranteed that the n, k and a are such that you can put k ships of size a on the field, so that no two ships intersect or touch each other.\nThe second line contains integer m (1 \u2264 m \u2264 n) \u2014 the number of Bob's moves.\nThe third line contains m distinct integers x_1, x_2,..., x_{m}, where x_{i} is the number of the cell where Bob made the i-th shot. The cells are numbered from left to right from 1 to n.\n-----Output-----\nPrint a single integer \u2014 the number of such Bob's first move, after which you can be sure that Alice lied. Bob's moves are numbered from 1 to m in the order the were made. If the sought move doesn't exist, then print \"-1\".\n-----Examples-----\nInput\n11 3 3\n5\n4 8 6 1 11\nOutput\n3\nInput\n5 1 3\n2\n1 5\nOutput\n-1\nInput\n5 1 3\n1\n3\nOutput\n1\n\ndef",
        "answer": "def one_dimensional_battle_ships(n, k, a, m):\n    ships = [0] * k\n    for i in range(m):\n        ships[a[i] - 1] += 1\n    for i in range(k):\n        if ships[i] > 1:\n            return i + 1\n    return -1",
        "difficulty": "interview"
    },
    {
        "task_id": 1355,
        "prompt": "Complete the Python function given the prompt below:Given simple (without self-intersections) n-gon. It is not necessary convex. Also you are given m lines. For each line find the length of common part of the line and the n-gon.\nThe boundary of n-gon belongs to polygon. It is possible that n-gon contains 180-degree angles.\n-----Input-----\nThe first line contains integers n and m (3 \u2264 n \u2264 1000;1 \u2264 m \u2264 100). The following n lines contain coordinates of polygon vertices (in clockwise or counterclockwise direction). All vertices are distinct.\nThe following m lines contain line descriptions. Each of them contains two distict points of a line by their coordinates.\nAll given in the input coordinates are real numbers, given with at most two digits after decimal point. They do not exceed 10^5 by absolute values.\n-----Output-----\nPrint m lines, the i-th line should contain the length of common part of the given n-gon and the i-th line. The answer will be considered correct if the absolute or relative error doesn't exceed 10^{ - 6}.\n-----Examples-----\nInput\n4 3\n0 0\n1 0\n1 1\n0 1\n0 0 1 1\n0 0 0 1\n0 0 1 -1\nOutput\n1.41421356237309514547\n1.00000000000000000000\n0.00000000000000000000\n\ndef",
        "answer": "def polygon_intersection(polygon, line):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 1356,
        "prompt": "Complete the Python function given the prompt below:Alice has a string $s$. She really likes the letter \"a\". She calls a string good if strictly more than half of the characters in that string are \"a\"s. For example \"aaabb\", \"axaa\" are good strings, and \"baca\", \"awwwa\", \"\" (empty string) are not.\nAlice can erase some characters from her string $s$. She would like to know what is the longest string remaining after erasing some characters (possibly zero) to get a good string. It is guaranteed that the string has at least one \"a\" in it, so the answer always exists.\n-----Input-----\nThe first line contains a string $s$ ($1 \\leq |s| \\leq 50$) consisting of lowercase English letters. It is guaranteed that there is at least one \"a\" in $s$.\n-----Output-----\nPrint a single integer, the length of the longest good string that Alice can get after erasing some characters from $s$.\n-----Examples-----\nInput\nxaxxxxa\nOutput\n3\nInput\naaabaa\nOutput\n6\n-----Note-----\nIn the first example, it's enough to erase any four of the \"x\"s. The answer is $3$ since that is the maximum number of characters that can remain.\nIn the second example, we don't need to erase any characters.\n\ndef",
        "answer": "def longest_good_string(s):\n    count = 0\n    for i in s:\n        if i == 'a':\n            count += 1\n    if count > len(s) / 2:\n        return len(s)\n    else:\n        return 0",
        "difficulty": "interview"
    },
    {
        "task_id": 1357,
        "prompt": "Complete the Python function given the prompt below:Xenia lives in a city that has n houses built along the main ringroad. The ringroad houses are numbered 1 through n in the clockwise order. The ringroad traffic is one way and also is clockwise.\nXenia has recently moved into the ringroad house number 1. As a result, she's got m things to do. In order to complete the i-th task, she needs to be in the house number a_{i} and complete all tasks with numbers less than i. Initially, Xenia is in the house number 1, find the minimum time she needs to complete all her tasks if moving from a house to a neighboring one along the ringroad takes one unit of time.\n-----Input-----\nThe first line contains two integers n and m (2 \u2264 n \u2264 10^5, 1 \u2264 m \u2264 10^5). The second line contains m integers a_1, a_2,..., a_{m} (1 \u2264 a_{i} \u2264 n). Note that Xenia can have multiple consecutive tasks in one house.\n-----Output-----\nPrint a single integer \u2014 the time Xenia needs to complete all tasks.\nPlease, do not use the %lld specifier to read or write 64-bit integers in \u0421++. It is preferred to use the cin, cout streams or the %I64d specifier.\n-----Examples-----\nInput\n4 3\n3 2 3\nOutput\n6\nInput\n4 3\n2 3 3\nOutput\n2\n-----Note-----\nIn the first test example the sequence of Xenia's moves along the ringroad looks as follows: 1 \u2192 2 \u2192 3 \u2192 4 \u2192 1 \u2192 2 \u2192 3. This is optimal sequence. So, she needs 6 time units.\n\ndef",
        "answer": "def main():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    ans = 0\n    for i in range(m):\n        ans += a[i] - i - 1\n    print(ans)",
        "difficulty": "interview"
    },
    {
        "task_id": 1358,
        "prompt": "Complete the Python function given the prompt below:Santa Claus likes palindromes very much. There was his birthday recently. k of his friends came to him to congratulate him, and each of them presented to him a string s_{i} having the same length n. We denote the beauty of the i-th string by a_{i}. It can happen that a_{i} is negative\u00a0\u2014 that means that Santa doesn't find this string beautiful at all.\nSanta Claus is crazy about palindromes. He is thinking about the following question: what is the maximum possible total beauty of a palindrome which can be obtained by concatenating some (possibly all) of the strings he has? Each present can be used at most once. Note that all strings have the same length n.\nRecall that a palindrome is a string that doesn't change after one reverses it.\nSince the empty string is a palindrome too, the answer can't be negative. Even if all a_{i}'s are negative, Santa can obtain the empty string.\n-----Input-----\nThe first line contains two positive integers k and n divided by space and denoting the number of Santa friends and the length of every string they've presented, respectively (1 \u2264 k, n \u2264 100 000; n\u00b7k\u00a0 \u2264 100 000).\nk lines follow. The i-th of them contains the string s_{i} and its beauty a_{i} ( - 10 000 \u2264 a_{i} \u2264 10 000). The string consists of n lowercase English letters, and its beauty is integer. Some of strings may coincide. Also, equal strings can have different beauties.\n-----Output-----\nIn the only line print the required maximum possible beauty.\n-----Examples-----\nInput\n7 3\nabb 2\naaa -3\nbba -1\nzyz -4\nabb 5\naaa 7\nxyx 4\nOutput\n12\nInput\n3 1\na 1\na 2\na 3\nOutput\n6\nInput\n2 5\nabcde 10000\nabcde 10000\nOutput\n0\n-----Note-----\nIn the first example Santa can obtain abbaaaxyxaaabba by concatenating strings 5, 2, 7, 6 and 3 (in this order).\n\ndef",
        "answer": "def solve(k, n, arr):\n    arr.sort(key=lambda x: x[1], reverse=True)\n    res = 0\n    for i in range(k):\n        res += arr[i][1]\n    return res",
        "difficulty": "interview"
    },
    {
        "task_id": 1359,
        "prompt": "Complete the Python function given the prompt below:Tomash keeps wandering off and getting lost while he is walking along the streets of Berland. It's no surprise! In his home town, for any pair of intersections there is exactly one way to walk from one intersection to the other one. The capital of Berland is very different!\nTomash has noticed that even simple cases of ambiguity confuse him. So, when he sees a group of four distinct intersections a, b, c and d, such that there are two paths from a to c \u2014 one through b and the other one through d, he calls the group a \"damn rhombus\". Note that pairs (a, b), (b, c), (a, d), (d, c) should be directly connected by the roads. Schematically, a damn rhombus is shown on the figure below: [Image] \nOther roads between any of the intersections don't make the rhombus any more appealing to Tomash, so the four intersections remain a \"damn rhombus\" for him.\nGiven that the capital of Berland has n intersections and m roads and all roads are unidirectional and are known in advance, find the number of \"damn rhombi\" in the city.\nWhen rhombi are compared, the order of intersections b and d doesn't matter.\n-----Input-----\nThe first line of the input contains a pair of integers n, m (1 \u2264 n \u2264 3000, 0 \u2264 m \u2264 30000) \u2014 the number of intersections and roads, respectively. Next m lines list the roads, one per line. Each of the roads is given by a pair of integers a_{i}, b_{i} (1 \u2264 a_{i}, b_{i} \u2264 n;a_{i} \u2260 b_{i}) \u2014 the number of the intersection it goes out from and the number of the intersection it leads to. Between a pair of intersections there is at most one road in each of the two directions.\nIt is not guaranteed that you can get from any intersection to any other one.\n-----Output-----\nPrint the required number of \"damn rhombi\".\n-----Examples-----\nInput\n5 4\n1 2\n2 3\n1 4\n4 3\nOutput\n1\nInput\n4 12\n1 2\n1 3\n1 4\n2 1\n2 3\n2 4\n3 1\n3 2\n3 4\n4 1\n4 2\n4 3\nOutput\n12\n\ndef",
        "answer": "def is_damn_rhombus(a, b, c, d):\n    if a == b or a == d or c == b or c == d:\n        return False\n    return True",
        "difficulty": "interview"
    },
    {
        "task_id": 1360,
        "prompt": "Complete the Python function given the prompt below:Student Valera is an undergraduate student at the University. His end of term exams are approaching and he is to pass exactly n exams. Valera is a smart guy, so he will be able to pass any exam he takes on his first try. Besides, he can take several exams on one day, and in any order.\nAccording to the schedule, a student can take the exam for the i-th subject on the day number a_{i}. However, Valera has made an arrangement with each teacher and the teacher of the i-th subject allowed him to take an exam before the schedule time on day b_{i} (b_{i} < a_{i}). Thus, Valera can take an exam for the i-th subject either on day a_{i}, or on day b_{i}. All the teachers put the record of the exam in the student's record book on the day of the actual exam and write down the date of the mark as number a_{i}.\nValera believes that it would be rather strange if the entries in the record book did not go in the order of non-decreasing date. Therefore Valera asks you to help him. Find the minimum possible value of the day when Valera can take the final exam if he takes exams so that all the records in his record book go in the order of non-decreasing date.\n-----Input-----\nThe first line contains a single positive integer n (1 \u2264 n \u2264 5000) \u2014 the number of exams Valera will take.\nEach of the next n lines contains two positive space-separated integers a_{i} and b_{i} (1 \u2264 b_{i} < a_{i} \u2264 10^9) \u2014 the date of the exam in the schedule and the early date of passing the i-th exam, correspondingly.\n-----Output-----\nPrint a single integer \u2014 the minimum possible number of the day when Valera can take the last exam if he takes all the exams so that all the records in his record book go in the order of non-decreasing date.\n-----Examples-----\nInput\n3\n5 2\n3 1\n4 2\nOutput\n2\nInput\n3\n6 1\n5 2\n4 3\nOutput\n6\n-----Note-----\nIn the first sample Valera first takes an exam in the second subject on the first day (the teacher writes down the schedule date that is 3). On the next day he takes an exam in the third subject (the teacher writes down the schedule date, 4), then he takes an exam in the first subject (the teacher writes down the mark with date 5). Thus, Valera takes the last exam on the second day and the dates will go in the non-decreasing order: 3, 4, 5.\nIn the second sample Valera first takes an exam in the third subject on the fourth day. Then he takes an exam in the second subject on the fifth day. After that on the sixth day Valera takes an exam in the first subject.\n\ndef",
        "answer": "def exam_schedule(n, a):\n    a.sort()\n    res = 0\n    for i in range(n):\n        res = max(res, a[i] + i)\n    return res",
        "difficulty": "interview"
    },
    {
        "task_id": 1361,
        "prompt": "Complete the Python function given the prompt below:Mike is trying rock climbing but he is awful at it. \nThere are n holds on the wall, i-th hold is at height a_{i} off the ground. Besides, let the sequence a_{i} increase, that is, a_{i} < a_{i} + 1 for all i from 1 to n - 1; we will call such sequence a track. Mike thinks that the track a_1,..., a_{n} has difficulty $d = \\operatorname{max}_{1 \\leq i \\leq n - 1}(a_{i + 1} - a_{i})$. In other words, difficulty equals the maximum distance between two holds that are adjacent in height.\nToday Mike decided to cover the track with holds hanging on heights a_1,..., a_{n}. To make the problem harder, Mike decided to remove one hold, that is, remove one element of the sequence (for example, if we take the sequence (1, 2, 3, 4, 5) and remove the third element from it, we obtain the sequence (1, 2, 4, 5)). However, as Mike is awful at climbing, he wants the final difficulty (i.e. the maximum difference of heights between adjacent holds after removing the hold) to be as small as possible among all possible options of removing a hold. The first and last holds must stay at their positions.\nHelp Mike determine the minimum difficulty of the track after removing one hold.\n-----Input-----\nThe first line contains a single integer n (3 \u2264 n \u2264 100)\u00a0\u2014 the number of holds.\nThe next line contains n space-separated integers a_{i} (1 \u2264 a_{i} \u2264 1000), where a_{i} is the height where the hold number i hangs. The sequence a_{i} is increasing (i.e. each element except for the first one is strictly larger than the previous one).\n-----Output-----\nPrint a single number \u2014 the minimum difficulty of the track after removing a single hold.\n-----Examples-----\nInput\n3\n1 4 6\nOutput\n5\nInput\n5\n1 2 3 4 5\nOutput\n2\nInput\n5\n1 2 3 7 8\nOutput\n4\n-----Note-----\nIn the first sample you can remove only the second hold, then the sequence looks like (1, 6), the maximum difference of the neighboring elements equals 5.\nIn the second test after removing every hold the difficulty equals 2.\nIn the third test you can obtain sequences (1, 3, 7, 8), (1, 2, 7, 8), (1, 2, 3, 8), for which the difficulty is 4, 5 and 5, respectively. Thus, after removing the second element we obtain the optimal answer \u2014 4.\n\ndef",
        "answer": "def track_difficulty(n, a):\n    a.sort()\n    diff = 0\n    for i in range(1, n):\n        diff = max(diff, a[i] - a[i - 1])\n    return diff",
        "difficulty": "interview"
    },
    {
        "task_id": 1362,
        "prompt": "Complete the Python function given the prompt below:A sum of p rubles is charged from Arkady's mobile phone account every day in the morning. Among the following m days, there are n days when Arkady will top up the account: in the day d_{i} he will deposit t_{i} rubles on his mobile phone account. Arkady will always top up the account before the daily payment will be done. There will be no other payments nor tops up in the following m days.\nDetermine the number of days starting from the 1-st to the m-th such that the account will have a negative amount on it after the daily payment (i.\u00a0e. in evening). Initially the account's balance is zero rubles.\n-----Input-----\nThe first line contains three integers n, p and m (1 \u2264 n \u2264 100 000, 1 \u2264 p \u2264 10^9, 1 \u2264 m \u2264 10^9, n \u2264 m) \u2014 the number of days Arkady will top up the account, the amount of the daily payment, and the number of days you should check.\nThe i-th of the following n lines contains two integers d_{i} and t_{i} (1 \u2264 d_{i} \u2264 m, 1 \u2264 t_{i} \u2264 10^9) \u2014 the index of the day when Arkady will make the i-th top up, and the amount he will deposit on this day. It is guaranteed that the indices of the days are distinct and are given in increasing order, i.\u00a0e. d_{i} > d_{i} - 1 for all i from 2 to n.\n-----Output-----\nPrint the number of days from the 1-st to the m-th such that the account will have a negative amount on it after the daily payment.\n-----Examples-----\nInput\n3 6 7\n2 13\n4 20\n7 9\nOutput\n3\nInput\n5 4 100\n10 70\n15 76\n21 12\n30 100\n67 85\nOutput\n26\n-----Note-----\nIn the first example the balance will change as following (remember, initially the balance is zero):  in the first day 6 rubles will be charged, the balance in the evening will be equal to  - 6;  in the second day Arkady will deposit 13 rubles, then 6 rubles will be charged, the balance in the evening will be equal to 1;  in the third day 6 rubles will be charged, the balance in the evening will be equal to  - 5;  in the fourth day Arkady will deposit 20 rubles, then 6 rubles will be charged, the balance in the evening will be equal to 9;  in the fifth day 6 rubles will be charged, the balance in the evening will be equal to 3;  in the sixth day 6 rubles will be charged, the balance in the evening will be equal to  - 3;  in the seventh day Arkady will deposit 9 rubles, then 6 rubles will be charged, the balance in the evening will be equal to 0. \nThus, in the end of the first, third and sixth days the balance will be negative in the end of the day.\n\ndef",
        "answer": "def main():\n    n, p, m = map(int, input().split())\n    days = []\n    for i in range(n):\n        d, t = map(int, input().split())\n        days.append((d, t))\n    days.sort()\n    dp = [0] * (m + 1)\n    dp[0] = 0\n    for i in range(n):\n        for j in range(days[i][0], m + 1):\n            dp[j] = max(dp[j], dp[j - days[i][0]] + days[i][1])\n    print(m - dp[m])",
        "difficulty": "interview"
    },
    {
        "task_id": 1364,
        "prompt": "Complete the Python function given the prompt below:Arkady invited Anna for a dinner to a sushi restaurant. The restaurant is a bit unusual: it offers $n$ pieces of sushi aligned in a row, and a customer has to choose a continuous subsegment of these sushi to buy.\nThe pieces of sushi are of two types: either with tuna or with eel. Let's denote the type of the $i$-th from the left sushi as $t_i$, where $t_i = 1$ means it is with tuna, and $t_i = 2$ means it is with eel.\nArkady does not like tuna, Anna does not like eel. Arkady wants to choose such a continuous subsegment of sushi that it has equal number of sushi of each type and each half of the subsegment has only sushi of one type. For example, subsegment $[2, 2, 2, 1, 1, 1]$ is valid, but subsegment $[1, 2, 1, 2, 1, 2]$ is not, because both halves contain both types of sushi.\nFind the length of the longest continuous subsegment of sushi Arkady can buy.\n-----Input-----\nThe first line contains a single integer $n$ ($2 \\le n \\le 100\\,000$)\u00a0\u2014 the number of pieces of sushi.\nThe second line contains $n$ integers $t_1$, $t_2$,..., $t_n$ ($t_i = 1$, denoting a sushi with tuna or $t_i = 2$, denoting a sushi with eel), representing the types of sushi from left to right.\nIt is guaranteed that there is at least one piece of sushi of each type. Note that it means that there is at least one valid continuous segment.\n-----Output-----\nPrint a single integer\u00a0\u2014 the maximum length of a valid continuous segment.\n-----Examples-----\nInput\n7\n2 2 2 1 1 2 2\nOutput\n4\nInput\n6\n1 2 1 2 1 2\nOutput\n2\nInput\n9\n2 2 1 1 1 2 2 2 2\nOutput\n6\n-----Note-----\nIn the first example Arkady can choose the subsegment $[2, 2, 1, 1]$ or the subsegment $[1, 1, 2, 2]$ with length $4$.\nIn the second example there is no way but to choose one of the subsegments $[2, 1]$ or $[1, 2]$ with length $2$.\nIn the third example Arkady's best choice is the subsegment $[1, 1, 1, 2, 2, 2]$.\n\ndef",
        "answer": "def sushi_restaurant(n, t):\n    t = [0] + t\n    t = [0] + t\n    t = [0] + t\n    t = [0] + t\n    t = [0] + t\n    t = [0] + t\n    t = [0] + t\n    t = [0] + t\n    t = [0] + t\n    t = [0] + t\n    t = [0] + t\n    t = [0] + t\n    t = [0] + t\n    t = [0] + t\n    t = [0] + t\n    t = [0] + t\n    t = [0] + t\n    t = [0] + t\n    t = [0] + t\n    t = [0] + t\n    t = [0] + t\n    t = [0] + t\n    t = [0] + t\n    t = [0] + t\n    t = [0] + t\n    t = [0] + t\n    t = [0] + t\n    t = [0] + t\n    t = [0] + t\n    t = [0] + t\n    t = [0] + t\n    t = [0] + t\n    t = [0] + t\n    t = [0] + t\n    t = [0] + t\n    t = [0] + t\n    t = [0] + t\n    t = [0] + t\n    t = [0] + t\n    t = [0] + t\n    t = [0] + t\n    t = [0] + t\n    t = [0] + t\n    t",
        "difficulty": "interview"
    },
    {
        "task_id": 1365,
        "prompt": "Complete the Python function given the prompt below:Ostap already settled down in Rio de Janiero suburb and started to grow a tree in his garden. Recall that a tree is a connected undirected acyclic graph. \nOstap's tree now has n vertices. He wants to paint some vertices of the tree black such that from any vertex u there is at least one black vertex v at distance no more than k. Distance between two vertices of the tree is the minimum possible number of edges of the path between them.\nAs this number of ways to paint the tree can be large, Ostap wants you to compute it modulo 10^9 + 7. Two ways to paint the tree are considered different if there exists a vertex that is painted black in one way and is not painted in the other one.\n-----Input-----\nThe first line of the input contains two integers n and k (1 \u2264 n \u2264 100, 0 \u2264 k \u2264 min(20, n - 1))\u00a0\u2014 the number of vertices in Ostap's tree and the maximum allowed distance to the nearest black vertex. Don't miss the unusual constraint for k.\nEach of the next n - 1 lines contain two integers u_{i} and v_{i} (1 \u2264 u_{i}, v_{i} \u2264 n)\u00a0\u2014 indices of vertices, connected by the i-th edge. It's guaranteed that given graph is a tree.\n-----Output-----\nPrint one integer\u00a0\u2014 the remainder of division of the number of ways to paint the tree by 1 000 000 007 (10^9 + 7).\n-----Examples-----\nInput\n2 0\n1 2\nOutput\n1\nInput\n2 1\n1 2\nOutput\n3\nInput\n4 1\n1 2\n2 3\n3 4\nOutput\n9\nInput\n7 2\n1 2\n2 3\n1 4\n4 5\n1 6\n6 7\nOutput\n91\n-----Note-----\nIn the first sample, Ostap has to paint both vertices black.\nIn the second sample, it is enough to paint only one of two vertices, thus the answer is 3: Ostap can paint only vertex 1, only vertex 2, vertices 1 and 2 both.\nIn the third sample, the valid ways to paint vertices are: {1, 3}, {1, 4}, {2, 3}, {2, 4}, {1, 2, 3}, {1, 2, 4}, {1, 3, 4}, {2, 3, 4}, {1, 2, 3, 4}.\n\ndef",
        "answer": "def paint_tree(n, k):\n    if n == 1:\n        return 1\n    if k == 0:\n        return 1\n    if k == 1:\n        return n\n    return (paint_tree(n - 1, k - 1) + paint_tree(n - 1, k)) % (10 ** 9 + 7)",
        "difficulty": "interview"
    },
    {
        "task_id": 1366,
        "prompt": "Complete the Python function given the prompt below:Sereja and his friends went to a picnic. The guys had n soda bottles just for it. Sereja forgot the bottle opener as usual, so the guys had to come up with another way to open bottles.\nSereja knows that the i-th bottle is from brand a_{i}, besides, you can use it to open other bottles of brand b_{i}. You can use one bottle to open multiple other bottles. Sereja can open bottle with opened bottle or closed bottle.\nKnowing this, Sereja wants to find out the number of bottles they've got that they won't be able to open in any way. Help him and find this number.\n-----Input-----\nThe first line contains integer n (1 \u2264 n \u2264 100) \u2014 the number of bottles. The next n lines contain the bottles' description. The i-th line contains two integers a_{i}, b_{i} (1 \u2264 a_{i}, b_{i} \u2264 1000) \u2014 the description of the i-th bottle.\n-----Output-----\nIn a single line print a single integer \u2014 the answer to the problem.\n-----Examples-----\nInput\n4\n1 1\n2 2\n3 3\n4 4\nOutput\n4\nInput\n4\n1 2\n2 3\n3 4\n4 1\nOutput\n0\n\ndef",
        "answer": "def open_bottles(n, a, b):\n    count = 0\n    for i in range(n):\n        if a[i] == b[i]:\n            count += 1\n    return n - count",
        "difficulty": "interview"
    },
    {
        "task_id": 1367,
        "prompt": "Complete the Python function given the prompt below:Polycarpus adores TV series. Right now he is ready to finish watching a season of a popular sitcom \"Graph Theory\". In total, the season has n episodes, numbered with integers from 1 to n.\nPolycarpus watches episodes not one by one but in a random order. He has already watched all the episodes except for one. Which episode has Polycaprus forgotten to watch?\n-----Input-----\nThe first line of the input contains integer n (2 \u2264 n \u2264 100000)\u00a0\u2014 the number of episodes in a season. Assume that the episodes are numbered by integers from 1 to n.\nThe second line contains n - 1 integer a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 n)\u00a0\u2014 the numbers of episodes that Polycarpus has watched. All values of a_{i} are distinct.\n-----Output-----\nPrint the number of the episode that Polycarpus hasn't watched.\n-----Examples-----\nInput\n10\n3 8 10 1 7 9 6 5 2\nOutput\n4\n\ndef",
        "answer": "def polycarpus(n, a):\n    a.sort()\n    for i in range(n-1):\n        if a[i]!= i+1:\n            return i+1\n    return n+1",
        "difficulty": "interview"
    },
    {
        "task_id": 1368,
        "prompt": "Complete the Python function given the prompt below:You are given N items.\nThe value of the i-th item (1 \\leq i \\leq N) is v_i.\nYour have to select at least A and at most B of these items.\nUnder this condition, find the maximum possible arithmetic mean of the values of selected items.\nAdditionally, find the number of ways to select items so that the mean of the values of selected items is maximized.  \n-----Constraints-----\n - 1 \\leq N \\leq 50\n - 1 \\leq A,B \\leq N\n - 1 \\leq v_i \\leq 10^{15}\n - Each v_i is an integer.\n-----Input-----\nThe input is given from Standard Input in the following format:\nN A B\nv_1\nv_2\n...\nv_N\n-----Output-----\nPrint two lines.\nThe first line should contain the maximum possible arithmetic mean of the values of selected items. The output should be considered correct if the absolute or relative error is at most 10^{-6}.\nThe second line should contain the number of ways to select items so that the mean of the values of selected items is maximized.\n-----Sample Input-----\n5 2 2\n1 2 3 4 5\n-----Sample Output-----\n4.500000\n1\nThe mean of the values of selected items will be maximized when selecting the fourth and fifth items. Hence, the first line of the output should contain 4.5.\nThere is no other way to select items so that the mean of the values will be 4.5, and thus the second line of the output should contain 1.\n\ndef",
        "answer": "def mean(a,b):\n    return (a+b)/2",
        "difficulty": "interview"
    },
    {
        "task_id": 1369,
        "prompt": "Complete the Python function given the prompt below:Given are N points (x_i, y_i) in a two-dimensional plane.\nFind the minimum radius of a circle such that all the points are inside or on it.\n-----Constraints-----\n - 2 \\leq N \\leq 50\n - 0 \\leq x_i \\leq 1000\n - 0 \\leq y_i \\leq 1000\n - The given N points are all different.\n - The values in input are all integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nx_1 y_1\n:\nx_N y_N\n-----Output-----\nPrint the minimum radius of a circle such that all the N points are inside or on it.\nYour output will be considered correct if the absolute or relative error from our answer is at most 10^{-6}.\n-----Sample Input-----\n2\n0 0\n1 0\n-----Sample Output-----\n0.500000000000000000\nBoth points are contained in the circle centered at (0.5,0) with a radius of 0.5.\n\ndef",
        "answer": "def distance(x1, y1, x2, y2):\n    return ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5",
        "difficulty": "interview"
    },
    {
        "task_id": 1370,
        "prompt": "Complete the Python function given the prompt below:We have a chocolate bar partitioned into H horizontal rows and W vertical columns of squares.\nThe square (i, j) at the i-th row from the top and the j-th column from the left is dark if S_{i,j} is 0, and white if S_{i,j} is 1.\nWe will cut the bar some number of times to divide it into some number of blocks. In each cut, we cut the whole bar by a line running along some boundaries of squares from end to end of the bar.\nHow many times do we need to cut the bar so that every block after the cuts has K or less white squares?\n-----Constraints-----\n - 1 \\leq H \\leq 10\n - 1 \\leq W \\leq 1000\n - 1 \\leq K \\leq H \\times W\n - S_{i,j} is 0 or 1.\n-----Input-----\nInput is given from Standard Input in the following format:\nH W K\nS_{1,1}S_{1,2}...S_{1,W}\n:\nS_{H,1}S_{H,2}...S_{H,W}\n-----Output-----\nPrint the number of minimum times the bar needs to be cut so that every block after the cuts has K or less white squares.\n-----Sample Input-----\n3 5 4\n11100\n10001\n00111\n-----Sample Output-----\n2\nFor example, cutting between the 1-st and 2-nd rows and between the 3-rd and 4-th columns - as shown in the figure to the left - works.\nNote that we cannot cut the bar in the ways shown in the two figures to the right.\n\ndef",
        "answer": "def chocolates(H, W, K):\n    # Write your code here\n    count = 0\n    for i in range(H):\n        for j in range(W):\n            if S[i][j] == 0:\n                count += 1\n    return count//K",
        "difficulty": "interview"
    },
    {
        "task_id": 1371,
        "prompt": "Complete the Python function given the prompt below:Given is an integer S.\nFind how many sequences there are whose terms are all integers greater than or equal to 3, and whose sum is equal to S.\nThe answer can be very large, so output it modulo 10^9 + 7.\n-----Constraints-----\n - 1 \\leq S \\leq 2000\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nS\n-----Output-----\nPrint the answer.\n-----Sample Input-----\n7\n-----Sample Output-----\n3\n3 sequences satisfy the condition: \\{3,4\\}, \\{4,3\\} and \\{7\\}.\n\ndef",
        "answer": "def count_sequences(s):\n    count = 0\n    for i in range(1, s // 2 + 1):\n        for j in range(i + 1, s // 2 + 1):\n            if i + j == s:\n                count += 1\n    return count % (10 ** 9 + 7)",
        "difficulty": "interview"
    },
    {
        "task_id": 1372,
        "prompt": "Complete the Python function given the prompt below:Ibis is fighting with a monster.\nThe health of the monster is H.\nIbis can cast N kinds of spells. Casting the i-th spell decreases the monster's health by A_i, at the cost of B_i Magic Points.\nThe same spell can be cast multiple times. There is no way other than spells to decrease the monster's health.\nIbis wins when the health of the monster becomes 0 or below.\nFind the minimum total Magic Points that have to be consumed before winning.\n-----Constraints-----\n - 1 \\leq H \\leq 10^4\n - 1 \\leq N \\leq 10^3\n - 1 \\leq A_i \\leq 10^4\n - 1 \\leq B_i \\leq 10^4\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nH N\nA_1 B_1\n:\nA_N B_N\n-----Output-----\nPrint the minimum total Magic Points that have to be consumed before winning.\n-----Sample Input-----\n9 3\n8 3\n4 2\n2 1\n-----Sample Output-----\n4\nFirst, let us cast the first spell to decrease the monster's health by 8, at the cost of 3 Magic Points. The monster's health is now 1.\nThen, cast the third spell to decrease the monster's health by 2, at the cost of 1 Magic Point. The monster's health is now -1.\nIn this way, we can win at the total cost of 4 Magic Points.\n\ndef",
        "answer": "def main():\n    h, n = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    a.sort()\n    b.sort()\n    cost = 0\n    for i in range(n):\n        cost += a[i] * b[i]\n    print(cost)",
        "difficulty": "interview"
    },
    {
        "task_id": 1373,
        "prompt": "Complete the Python function given the prompt below:We have N+1 integers: 10^{100}, 10^{100}+1,..., 10^{100}+N.\nWe will choose K or more of these integers. Find the number of possible values of the sum of the chosen numbers, modulo (10^9+7).\n-----Constraints-----\n - 1 \\leq N \\leq 2\\times 10^5\n - 1 \\leq K \\leq N+1\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN K\n-----Output-----\nPrint the number of possible values of the sum, modulo (10^9+7).\n-----Sample Input-----\n3 2\n-----Sample Output-----\n10\nThe sum can take 10 values, as follows:\n - (10^{100})+(10^{100}+1)=2\\times 10^{100}+1\n - (10^{100})+(10^{100}+2)=2\\times 10^{100}+2\n - (10^{100})+(10^{100}+3)=(10^{100}+1)+(10^{100}+2)=2\\times 10^{100}+3\n - (10^{100}+1)+(10^{100}+3)=2\\times 10^{100}+4\n - (10^{100}+2)+(10^{100}+3)=2\\times 10^{100}+5\n - (10^{100})+(10^{100}+1)+(10^{100}+2)=3\\times 10^{100}+3\n - (10^{100})+(10^{100}+1)+(10^{100}+3)=3\\times 10^{100}+4\n - (10^{100})+(10^{100}+2)+(10^{100}+3)=3\\times 10^{100}+5\n - (10^{100}+1)+(10^{100}+2)+(10^{100}+3)=3\\times 10^{100}+6\n - (10^{100})+(10^{100}+1)+(10^{100}+2)+(10^{100}+3)=4\\times 10^{100}+6\n\ndef",
        "answer": "def sum_of_k_numbers(n, k):\n    # Write your code here\n    return sum(range(k+1))",
        "difficulty": "interview"
    },
    {
        "task_id": 1374,
        "prompt": "Complete the Python function given the prompt below:We will define the median of a sequence b of length M, as follows:\n - Let b' be the sequence obtained by sorting b in non-decreasing order. Then, the value of the (M / 2 + 1)-th element of b' is the median of b. Here, / is integer division, rounding down.\nFor example, the median of (10, 30, 20) is 20; the median of (10, 30, 20, 40) is 30; the median of (10, 10, 10, 20, 30) is 10.\nSnuke comes up with the following problem.\nYou are given a sequence a of length N.\nFor each pair (l, r) (1 \\leq l \\leq r \\leq N), let m_{l, r} be the median of the contiguous subsequence (a_l, a_{l + 1},..., a_r) of a.\nWe will list m_{l, r} for all pairs (l, r) to create a new sequence m.\nFind the median of m.\n-----Constraints-----\n - 1 \\leq N \\leq 10^5\n - a_i is an integer.\n - 1 \\leq a_i \\leq 10^9\n-----Input-----\nInput is given from Standard Input in the following format:\nN\na_1 a_2... a_N\n-----Output-----\nPrint the median of m.\n-----Sample Input-----\n3\n10 30 20\n-----Sample Output-----\n30\nThe median of each contiguous subsequence of a is as follows:\n - The median of (10) is 10.\n - The median of (30) is 30.\n - The median of (20) is 20.\n - The median of (10, 30) is 30.\n - The median of (30, 20) is 30.\n - The median of (10, 30, 20) is 20.\nThus, m = (10, 30, 20, 30, 30, 20) and the median of m is 30.\n\ndef",
        "answer": "def median(a):\n    b = sorted(a)\n    return b[len(b) // 2]",
        "difficulty": "interview"
    },
    {
        "task_id": 1375,
        "prompt": "Complete the Python function given the prompt below:You've got array a[1], a[2],..., a[n], consisting of n integers. Count the number of ways to split all the elements of the array into three contiguous parts so that the sum of elements in each part is the same. \nMore formally, you need to find the number of such pairs of indices i, j (2 \u2264 i \u2264 j \u2264 n - 1), that $\\sum_{k = 1}^{i - 1} a_{k} = \\sum_{k = i}^{j} a_{k} = \\sum_{k = j + 1}^{n} a_{k}$.\n-----Input-----\nThe first line contains integer n (1 \u2264 n \u2264 5\u00b710^5), showing how many numbers are in the array. The second line contains n integers a[1], a[2],..., a[n] (|a[i]| \u2264  10^9) \u2014 the elements of array a.\n-----Output-----\nPrint a single integer \u2014 the number of ways to split the array into three parts with the same sum.\n-----Examples-----\nInput\n5\n1 2 3 0 3\nOutput\n2\nInput\n4\n0 1 -1 0\nOutput\n1\nInput\n2\n4 1\nOutput\n0\n\ndef",
        "answer": "def count_ways(arr):\n    n = len(arr)\n    arr.sort()\n    count = 0\n    for i in range(n-2):\n        if arr[i] == arr[i+1] == arr[i+2]:\n            count += 1\n    return count",
        "difficulty": "interview"
    },
    {
        "task_id": 1376,
        "prompt": "Complete the Python function given the prompt below:Sasha and Dima want to buy two $n$-tier cakes. Each cake should consist of $n$ different tiers: from the size of $1$ to the size of $n$. Tiers should go in order from the smallest to the biggest (from top to bottom).\nThey live on the same street, there are $2 \\cdot n$ houses in a row from left to right. Each house has a pastry shop where you can buy a cake tier. Unfortunately, in each pastry shop you can buy only one tier of only one specific size: in the $i$-th house you can buy a tier of the size $a_i$ ($1 \\le a_i \\le n$).\nSince the guys carry already purchased tiers, and it is impossible to insert a new tier in the middle of the cake, they agreed to buy tiers from the smallest to the biggest. That is, each of them buys tiers in order: $1$, then $2$, then $3$ and so on up to $n$.\nInitially, Sasha and Dima are located near the first (leftmost) house. Output the minimum distance that they will have to walk in total to buy both cakes. The distance between any two neighboring houses is exactly $1$.\n-----Input-----\nThe first line of the input contains an integer number $n$ \u2014 the number of tiers in each cake ($1 \\le n \\le 10^5$).\nThe second line contains $2 \\cdot n$ integers $a_1, a_2, \\dots, a_{2n}$ ($1 \\le a_i \\le n$), where $a_i$ is equal to the size of the tier, which can be bought in the $i$-th house. Remember that in each house you can buy only one tier. It is guaranteed that every number from $1$ to $n$ occurs in $a$ exactly two times.\n-----Output-----\nPrint one number \u00a0\u2014 the minimum distance that the guys have to walk in total to buy both cakes. Guys can be near same house at the same time. They begin near the first (leftmost) house. Each of the guys should buy $n$ tiers in ascending order of their sizes.\n-----Examples-----\nInput\n3\n1 1 2 2 3 3\nOutput\n9\nInput\n2\n2 1 1 2\nOutput\n5\nInput\n4\n4 1 3 2 2 3 1 4\nOutput\n17\n-----Note-----\nIn the first example, the possible optimal sequence of actions is:  Sasha buys a tier of size $1$ near the $1$-st house ($a_1=1$);  Dima goes to the house $2$;  Dima buys a tier of size $1$ near the $2$-nd house ($a_2=1$);  Sasha goes to the house $4$;  Sasha buys a tier of size $2$ near the $4$-th house ($a_4=2$);  Sasha goes to the house $5$;  Sasha buys a tier of size $3$ near the $5$-th house ($a_5=3$);  Dima goes to the house $3$;  Dima buys a tier of size $2$ near the $3$-rd house ($a_3=2$);  Dima goes to the house $6$;  Dima buys a tier of size $3$ near the $6$-th house ($a_6=3$). \nSo, Sasha goes the distance $3+1=4$, and Dima goes the distance $1+1+3=5$. In total, they cover a distance of $4+5=9$. You can make sure that with any other sequence of actions they will walk no less distance.\n\ndef",
        "answer": "def min_distance(n, a):\n    a.sort()\n    return sum(a[i] - a[i - 1] for i in range(1, n))",
        "difficulty": "interview"
    },
    {
        "task_id": 1377,
        "prompt": "Complete the Python function given the prompt below:There are $n$ pillars aligned in a row and numbered from $1$ to $n$.\nInitially each pillar contains exactly one disk. The $i$-th pillar contains a disk having radius $a_i$.\nYou can move these disks from one pillar to another. You can take a disk from pillar $i$ and place it on top of pillar $j$ if all these conditions are met:\n  there is no other pillar between pillars $i$ and $j$. Formally, it means that $|i - j| = 1$;  pillar $i$ contains exactly one disk;  either pillar $j$ contains no disks, or the topmost disk on pillar $j$ has radius strictly greater than the radius of the disk you move. \nWhen you place a disk on a pillar that already has some disks on it, you put the new disk on top of previously placed disks, so the new disk will be used to check the third condition if you try to place another disk on the same pillar.\nYou may take any disk and place it on other pillar any number of times, provided that every time you do it, all three aforementioned conditions are met. Now you wonder, is it possible to place all $n$ disks on the same pillar simultaneously?\n-----Input-----\nThe first line contains one integer $n$ ($3 \\le n \\le 2 \\cdot 10^5$) \u2014 the number of pillars.\nThe second line contains $n$ integers $a_1$, $a_2$,..., $a_i$ ($1 \\le a_i \\le n$), where $a_i$ is the radius of the disk initially placed on the $i$-th pillar. All numbers $a_i$ are distinct.\n-----Output-----\nPrint YES if it is possible to place all the disks on the same pillar simultaneously, and NO otherwise. You may print each letter in any case (YES, yes, Yes will all be recognized as positive answer, NO, no and nO will all be recognized as negative answer).\n-----Examples-----\nInput\n4\n1 3 4 2\nOutput\nYES\nInput\n3\n3 1 2\nOutput\nNO\n-----Note-----\nIn the first case it is possible to place all disks on pillar $3$ using the following sequence of actions:\n  take the disk with radius $3$ from pillar $2$ and place it on top of pillar $3$;  take the disk with radius $1$ from pillar $1$ and place it on top of pillar $2$;  take the disk with radius $2$ from pillar $4$ and place it on top of pillar $3$;  take the disk with radius $1$ from pillar $2$ and place it on top of pillar $3$.\n\ndef",
        "answer": "def pillars(n, a):\n    if n == 1:\n        return \"YES\"\n    elif n == 2:\n        if a[0] == a[1]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        if a[0] == a[1]:\n            return \"NO\"\n        else:\n            for i in range(1, n):\n                if a[i] == a[i - 1]:\n                    return \"NO\"\n            return \"YES\"",
        "difficulty": "interview"
    },
    {
        "task_id": 1378,
        "prompt": "Complete the Python function given the prompt below:Bill is a famous mathematician in BubbleLand. Thanks to his revolutionary math discoveries he was able to make enough money to build a beautiful house. Unfortunately, for not paying property tax on time, court decided to punish Bill by making him lose a part of his property.\nBill\u2019s property can be observed as a convex regular 2n-sided polygon A_0 A_1... A_2n - 1 A_2n,  A_2n =  A_0, with sides of the exactly 1 meter in length. \nCourt rules for removing part of his property are as follows:  Split every edge A_{k} A_{k} + 1,  k = 0... 2n - 1 in n equal parts of size 1 / n with points P_0, P_1,..., P_{n} - 1  On every edge A_2k A_2k + 1,  k = 0... n - 1 court will choose one point B_2k =  P_{i} for some i = 0,...,  n - 1 such that $\\cup_{i = 0}^{n - 1} B_{2i} = \\cup_{i = 0}^{n - 1} P_{i}$  On every edge A_2k + 1A_2k + 2,  k = 0...n - 1 Bill will choose one point B_2k + 1 =  P_{i} for some i = 0,...,  n - 1 such that $\\cup_{i = 0}^{n - 1} B_{2 i + 1} = \\cup_{i = 0}^{n - 1} P_{i}$  Bill gets to keep property inside of 2n-sided polygon B_0 B_1... B_2n - 1 \nLuckily, Bill found out which B_2k points the court chose. Even though he is a great mathematician, his house is very big and he has a hard time calculating. Therefore, he is asking you to help him choose points so he maximizes area of property he can keep.\n-----Input-----\nThe first line contains one integer number n (2 \u2264 n \u2264 50000), representing number of edges of 2n-sided polygon.\nThe second line contains n distinct integer numbers B_2k (0 \u2264 B_2k \u2264 n - 1,  k = 0... n - 1) separated by a single space, representing points the court chose. If B_2k = i, the court chose point P_{i} on side A_2k A_2k + 1.\n-----Output-----\nOutput contains n distinct integers separated by a single space representing points B_1, B_3,..., B_2n - 1 Bill should choose in order to maximize the property area. If there are multiple solutions that maximize the area, return any of them.\n-----Example-----\nInput\n3\n0 1 2\nOutput\n0 2 1\n-----Note-----\nTo maximize area Bill should choose points: B_1 = P_0, B_3 = P_2, B_5 = P_1\n[Image]\n\ndef",
        "answer": "def maximize_area(n, B):\n    return",
        "difficulty": "interview"
    },
    {
        "task_id": 1379,
        "prompt": "Complete the Python function given the prompt below:Recently Monocarp got a job. His working day lasts exactly $m$ minutes. During work, Monocarp wants to drink coffee at certain moments: there are $n$ minutes $a_1, a_2, \\dots, a_n$, when he is able and willing to take a coffee break (for the sake of simplicity let's consider that each coffee break lasts exactly one minute). \nHowever, Monocarp's boss doesn't like when Monocarp takes his coffee breaks too often. So for the given coffee break that is going to be on minute $a_i$, Monocarp must choose the day in which he will drink coffee during the said minute, so that every day at least $d$ minutes pass between any two coffee breaks. Monocarp also wants to take these $n$ coffee breaks in a minimum possible number of working days (he doesn't count days when he is not at work, and he doesn't take coffee breaks on such days). Take into account that more than $d$ minutes pass between the end of any working day and the start of the following working day.\nFor each of the $n$ given minutes determine the day, during which Monocarp should take a coffee break in this minute. You have to minimize the number of days spent. \n-----Input-----\nThe first line contains three integers $n$, $m$, $d$ $(1 \\le n \\le 2\\cdot10^{5}, n \\le m \\le 10^{9}, 1 \\le d \\le m)$\u00a0\u2014 the number of coffee breaks Monocarp wants to have, the length of each working day, and the minimum number of minutes between any two consecutive coffee breaks.\nThe second line contains $n$ distinct integers $a_1, a_2, \\dots, a_n$ $(1 \\le a_i \\le m)$, where $a_i$ is some minute when Monocarp wants to have a coffee break.\n-----Output-----\nIn the first line, write the minimum number of days required to make a coffee break in each of the $n$ given minutes. \nIn the second line, print $n$ space separated integers. The $i$-th of integers should be the index of the day during which Monocarp should have a coffee break at minute $a_i$. Days are numbered from $1$. If there are multiple optimal solutions, you may print any of them.\n-----Examples-----\nInput\n4 5 3\n3 5 1 2\nOutput\n3\n3 1 1 2 \nInput\n10 10 1\n10 5 7 4 6 3 2 1 9 8\nOutput\n2\n2 1 1 2 2 1 2 1 1 2 \n-----Note-----\nIn the first example, Monocarp can take two coffee breaks during the first day (during minutes $1$ and $5$, $3$ minutes will pass between these breaks). One break during the second day (at minute $2$), and one break during the third day (at minute $3$).\nIn the second example, Monocarp can determine the day of the break as follows: if the minute when he wants to take a break is odd, then this break is on the first day, if it is even, then this break is on the second day.\n\ndef",
        "answer": "def solve(n, m, d):\n    # Write your code here\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 1380,
        "prompt": "Complete the Python function given the prompt below:The Queen of England has n trees growing in a row in her garden. At that, the i-th (1 \u2264 i \u2264 n) tree from the left has height a_{i} meters. Today the Queen decided to update the scenery of her garden. She wants the trees' heights to meet the condition: for all i (1 \u2264 i < n), a_{i} + 1 - a_{i} = k, where k is the number the Queen chose.\nUnfortunately, the royal gardener is not a machine and he cannot fulfill the desire of the Queen instantly! In one minute, the gardener can either decrease the height of a tree to any positive integer height or increase the height of a tree to any positive integer height. How should the royal gardener act to fulfill a whim of Her Majesty in the minimum number of minutes?\n-----Input-----\nThe first line contains two space-separated integers: n, k (1 \u2264 n, k \u2264 1000). The second line contains n space-separated integers a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 1000) \u2014 the heights of the trees in the row. \n-----Output-----\nIn the first line print a single integer p \u2014 the minimum number of minutes the gardener needs. In the next p lines print the description of his actions. \nIf the gardener needs to increase the height of the j-th (1 \u2264 j \u2264 n) tree from the left by x (x \u2265 1) meters, then print in the corresponding line \"+\u00a0j\u00a0x\". If the gardener needs to decrease the height of the j-th (1 \u2264 j \u2264 n) tree from the left by x (x \u2265 1) meters, print on the corresponding line \"-\u00a0j\u00a0x\".\nIf there are multiple ways to make a row of trees beautiful in the minimum number of actions, you are allowed to print any of them.\n-----Examples-----\nInput\n4 1\n1 2 1 5\nOutput\n2\n+ 3 2\n- 4 1\nInput\n4 1\n1 2 3 4\nOutput\n0\n\ndef",
        "answer": "def queensAttack(n, k, r_q, c_q, obstacles):\n    # Write your code here\n    # print(n, k, r_q, c_q, obstacles)\n    # print(n, k, r_q, c_q, obstacles)\n    # print(n, k, r_q, c_q, obstacles)\n    # print(n, k, r_q, c_q, obstacles)\n    # print(n, k, r_q, c_q, obstacles)\n    # print(n, k, r_q, c_q, obstacles)\n    # print(n, k, r_q, c_q, obstacles)\n    # print(n, k, r_q, c_q, obstacles)\n    # print(n, k, r_q, c_q, obstacles)\n    # print(n, k, r_q, c_q, obstacles)\n    # print(n, k, r_q, c_q, obstacles)\n    # print(n, k, r_q, c_q, obstacles)\n    # print(n, k, r_q, c_q, obstacles)\n    # print(n, k, r_q, c_q, obstacles)\n    # print(n, k, r_q, c_q, obstacles)\n    # print(n, k, r_q, c_q, obstacles)\n    # print(n, k, r_q, c_q, obstacles)\n    # print(n, k, r_q, c_q, obstacles)\n    # print(n, k, r_q, c_q, obstacles)\n    # print(n, k, r_q, c_",
        "difficulty": "interview"
    },
    {
        "task_id": 1381,
        "prompt": "Complete the Python function given the prompt below:To make a paper airplane, one has to use a rectangular piece of paper. From a sheet of standard size you can make $s$ airplanes.\nA group of $k$ people decided to make $n$ airplanes each. They are going to buy several packs of paper, each of them containing $p$ sheets, and then distribute the sheets between the people. Each person should have enough sheets to make $n$ airplanes. How many packs should they buy?\n-----Input-----\nThe only line contains four integers $k$, $n$, $s$, $p$ ($1 \\le k, n, s, p \\le 10^4$)\u00a0\u2014 the number of people, the number of airplanes each should make, the number of airplanes that can be made using one sheet and the number of sheets in one pack, respectively.\n-----Output-----\nPrint a single integer\u00a0\u2014 the minimum number of packs they should buy.\n-----Examples-----\nInput\n5 3 2 3\nOutput\n4\nInput\n5 3 100 1\nOutput\n5\n-----Note-----\nIn the first sample they have to buy $4$ packs of paper: there will be $12$ sheets in total, and giving $2$ sheets to each person is enough to suit everyone's needs.\nIn the second sample they have to buy a pack for each person as they can't share sheets.\n\ndef",
        "answer": "def airplane(k, n, s, p):\n    return s // (k * p)",
        "difficulty": "interview"
    },
    {
        "task_id": 1382,
        "prompt": "Complete the Python function given the prompt below:After Vitaly was expelled from the university, he became interested in the graph theory.\nVitaly especially liked the cycles of an odd length in which each vertex occurs at most once.\nVitaly was wondering how to solve the following problem. You are given an undirected graph consisting of n vertices and m edges, not necessarily connected, without parallel edges and loops. You need to find t \u2014 the minimum number of edges that must be added to the given graph in order to form a simple cycle of an odd length, consisting of more than one vertex. Moreover, he must find w \u2014 the number of ways to add t edges in order to form a cycle of an odd length (consisting of more than one vertex). It is prohibited to add loops or parallel edges.\nTwo ways to add edges to the graph are considered equal if they have the same sets of added edges.\nSince Vitaly does not study at the university, he asked you to help him with this task.\n-----Input-----\nThe first line of the input contains two integers n and m ($3 \\leq n \\leq 10^{5}, 0 \\leq m \\leq \\operatorname{min}(\\frac{n(n - 1)}{2}, 10^{5})$\u00a0\u2014\u00a0the number of vertices in the graph and the number of edges in the graph.\nNext m lines contain the descriptions of the edges of the graph, one edge per line. Each edge is given by a pair of integers a_{i}, b_{i} (1 \u2264 a_{i}, b_{i} \u2264 n)\u00a0\u2014\u00a0the vertices that are connected by the i-th edge. All numbers in the lines are separated by a single space.\nIt is guaranteed that the given graph doesn't contain any loops and parallel edges. The graph isn't necessarily connected.\n-----Output-----\nPrint in the first line of the output two space-separated integers t and w\u00a0\u2014\u00a0the minimum number of edges that should be added to the graph to form a simple cycle of an odd length consisting of more than one vertex where each vertex occurs at most once, and the number of ways to do this.\n-----Examples-----\nInput\n4 4\n1 2\n1 3\n4 2\n4 3\nOutput\n1 2\nInput\n3 3\n1 2\n2 3\n3 1\nOutput\n0 1\nInput\n3 0\nOutput\n3 1\n-----Note-----\nThe simple cycle is a cycle that doesn't contain any vertex twice.\n\ndef",
        "answer": "def odd_cycle(n, m):\n    if n == 0:\n        return 0, 1\n    if n == 1:\n        return 1, 1\n    if n == 2:\n        return 2, 2\n    if n == 3:\n        return 3, 3\n    if n == 4:\n        return 4, 4\n    if n == 5:\n        return 5, 5\n    if n == 6:\n        return 6, 6\n    if n == 7:\n        return 7, 7\n    if n == 8:\n        return 8, 8\n    if n == 9:\n        return 9, 9\n    if n == 10:\n        return 10, 10\n    if n == 11:\n        return 11, 11\n    if n == 12:\n        return 12, 12\n    if n == 13:\n        return 13, 13\n    if n == 14:\n        return 14, 14\n    if n == 15:\n        return 15, 15\n    if n == 16:\n        return 16, 16\n    if n == 17:\n        return 17, 17\n    if n == 18:\n        return 18, 18\n    if n == 19:\n        return 19, 19\n    if n == 20:\n        return 20, 20\n    if n == 21:\n        return 21, 21\n    if n == 22:\n        return 22, 22\n    if n == 23:\n        return 23, 23\n    if n == 24:\n        return 24, 24\n    if n == 25:\n        return 25, 25\n    if n == 26:\n        return 26, 26\n    if n == 27:\n        return 27, 27\n    if n == 28:\n        return 28, 28\n    if n == 29:\n        return 29, 29\n    ",
        "difficulty": "interview"
    },
    {
        "task_id": 1383,
        "prompt": "Complete the Python function given the prompt below:You are given a positive integer $m$ and two integer sequence: $a=[a_1, a_2, \\ldots, a_n]$ and $b=[b_1, b_2, \\ldots, b_n]$. Both of these sequence have a length $n$.\nPermutation is a sequence of $n$ different positive integers from $1$ to $n$. For example, these sequences are permutations: $[1]$, $[1,2]$, $[2,1]$, $[6,7,3,4,1,2,5]$. These are not: $[0]$, $[1,1]$, $[2,3]$.\nYou need to find the non-negative integer $x$, and increase all elements of $a_i$ by $x$, modulo $m$ (i.e. you want to change $a_i$ to $(a_i + x) \\bmod m$), so it would be possible to rearrange elements of $a$ to make it equal $b$, among them you need to find the smallest possible $x$.\nIn other words, you need to find the smallest non-negative integer $x$, for which it is possible to find some permutation $p=[p_1, p_2, \\ldots, p_n]$, such that for all $1 \\leq i \\leq n$, $(a_i + x) \\bmod m = b_{p_i}$, where $y \\bmod m$\u00a0\u2014 remainder of division of $y$ by $m$.\nFor example, if $m=3$, $a = [0, 0, 2, 1], b = [2, 0, 1, 1]$, you can choose $x=1$, and $a$ will be equal to $[1, 1, 0, 2]$ and you can rearrange it to make it equal $[2, 0, 1, 1]$, which is equal to $b$.\n-----Input-----\nThe first line contains two integers $n,m$ ($1 \\leq n \\leq 2000, 1 \\leq m \\leq 10^9$): number of elemens in arrays and $m$.\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($0 \\leq a_i < m$).\nThe third line contains $n$ integers $b_1, b_2, \\ldots, b_n$ ($0 \\leq b_i < m$).\nIt is guaranteed that there exists some non-negative integer $x$, such that it would be possible to find some permutation $p_1, p_2, \\ldots, p_n$ such that $(a_i + x) \\bmod m = b_{p_i}$.\n-----Output-----\nPrint one integer, the smallest non-negative integer $x$, such that it would be possible to find some permutation $p_1, p_2, \\ldots, p_n$ such that $(a_i + x) \\bmod m = b_{p_i}$ for all $1 \\leq i \\leq n$.\n-----Examples-----\nInput\n4 3\n0 0 2 1\n2 0 1 1\nOutput\n1\nInput\n3 2\n0 0 0\n1 1 1\nOutput\n1\nInput\n5 10\n0 0 0 1 2\n2 1 0 0 0\nOutput\n0\n\ndef",
        "answer": "def find_x(a, b):\n    x = 0\n    for i in range(len(a)):\n        x = (x + b[i]) % m\n    return x",
        "difficulty": "interview"
    },
    {
        "task_id": 1384,
        "prompt": "Complete the Python function given the prompt below:Hideo Kojima has just quit his job at Konami. Now he is going to find a new place to work. Despite being such a well-known person, he still needs a CV to apply for a job.\nDuring all his career Hideo has produced n games. Some of them were successful, some were not. Hideo wants to remove several of them (possibly zero) from his CV to make a better impression on employers. As a result there should be no unsuccessful game which comes right after successful one in his CV.\nMore formally, you are given an array s_1, s_2,..., s_{n} of zeros and ones. Zero corresponds to an unsuccessful game, one \u2014 to a successful one. Games are given in order they were produced, and Hideo can't swap these values. He should remove some elements from this array in such a way that no zero comes right after one.\nBesides that, Hideo still wants to mention as much games in his CV as possible. Help this genius of a man determine the maximum number of games he can leave in his CV.\n-----Input-----\nThe first line contains one integer number n (1 \u2264 n \u2264 100).\nThe second line contains n space-separated integer numbers s_1, s_2,..., s_{n} (0 \u2264 s_{i} \u2264 1). 0 corresponds to an unsuccessful game, 1 \u2014 to a successful one.\n-----Output-----\nPrint one integer \u2014 the maximum number of games Hideo can leave in his CV so that no unsuccessful game comes after a successful one.\n-----Examples-----\nInput\n4\n1 1 0 1\nOutput\n3\nInput\n6\n0 1 0 0 1 0\nOutput\n4\nInput\n1\n0\nOutput\n1\n\ndef",
        "answer": "def remove_games(s):\n    s = list(s)\n    i = 0\n    while i < len(s)-1:\n        if s[i] == 1 and s[i+1] == 0:\n            s.pop(i+1)\n            s.pop(i)\n            i = 0\n        else:\n            i += 1\n    return len(s)",
        "difficulty": "interview"
    },
    {
        "task_id": 1385,
        "prompt": "Complete the Python function given the prompt below:The problem describes the properties of a command line. The description somehow resembles the one you usually see in real operating systems. However, there are differences in the behavior. Please make sure you've read the statement attentively and use it as a formal document.\nIn the Pindows operating system a strings are the lexemes of the command line \u2014 the first of them is understood as the name of the program to run and the following lexemes are its arguments. For example, as we execute the command \" run.exe one, two. \", we give four lexemes to the Pindows command line: \"run.exe\", \"one,\", \"two\", \".\". More formally, if we run a command that can be represented as string s (that has no quotes), then the command line lexemes are maximal by inclusion substrings of string s that contain no spaces.\nTo send a string with spaces or an empty string as a command line lexeme, we can use double quotes. The block of characters that should be considered as one lexeme goes inside the quotes. Embedded quotes are prohibited \u2014 that is, for each occurrence of character \"\"\" we should be able to say clearly that the quotes are opening or closing. For example, as we run the command \"\"run.exe o\" \"\" \" ne, \" two. \" \" \", we give six lexemes to the Pindows command line: \"run.exe o\", \"\" (an empty string), \" ne, \", \"two\", \".\", \" \" (a single space).\nIt is guaranteed that each lexeme of the command line is either surrounded by spaces on both sides or touches the corresponding command border. One of its consequences is: the opening brackets are either the first character of the string or there is a space to the left of them.\nYou have a string that consists of uppercase and lowercase English letters, digits, characters \".,?!\"\" and spaces. It is guaranteed that this string is a correct OS Pindows command line string. Print all lexemes of this command line string. Consider the character \"\"\" to be used only in order to denote a single block of characters into one command line lexeme. In particular, the consequence is that the given string has got an even number of such characters.\n-----Input-----\nThe single line contains a non-empty string s. String s consists of at most 10^5 characters. Each character is either an uppercase or a lowercase English letter, or a digit, or one of the \".,?!\"\" signs, or a space.\nIt is guaranteed that the given string is some correct command line string of the OS Pindows. It is guaranteed that the given command line string contains at least one lexeme.\n-----Output-----\nIn the first line print the first lexeme, in the second line print the second one and so on. To make the output clearer, print the \"<\" (less) character to the left of your lexemes and the \">\" (more) character to the right. Print the lexemes in the order in which they occur in the command.\nPlease, follow the given output format strictly. For more clarifications on the output format see the test samples.\n-----Examples-----\nInput\n\"RUn.exe O\" \"\" \"   2ne, \" two!. \" \"\nOutput\n<RUn.exe O>\n<>\n<   2ne, >\n<two!>\n<.>\n< >\nInput\n   firstarg   second   \"\"    \nOutput\n<firstarg>\n<second>\n<>\n\ndef",
        "answer": "def command_line(s):\n    s = s.replace('\"', '')\n    s = s.replace('\"\"', '')\n    s = s.replace('\"\"', '')\n    s = s.replace('\"\"', '')\n    s = s.replace('\"\"', '')\n    s = s.replace('\"\"', '')\n    s = s.replace('\"\"', '')\n    s = s.replace('\"\"', '')\n    s = s.replace('\"\"', '')\n    s = s.replace('\"\"', '')\n    s = s.replace('\"\"', '')\n    s = s.replace('\"\"', '')\n    s = s.replace('\"\"', '')\n    s = s.replace('\"\"', '')\n    s = s.replace('\"\"', '')\n    s = s.replace('\"\"', '')\n    s = s.replace('\"\"', '')\n    s = s.replace('\"\"', '')\n    s = s.replace('\"\"', '')\n    s = s.replace('\"\"', '')\n    s = s.replace('\"\"', '')\n    s = s.replace('\"\"', '')\n    s = s.replace('\"\"', '')\n    s = s.replace('\"\"', '')\n    s = s.replace('\"\"', '')\n    s = s.replace('\"\"', '')\n    s = s.replace('\"\"', '')\n    s = s.replace('\"\"', '')\n    s = s.replace('\"\"', '')\n    s = s.replace('\"\"', '')\n    s = s.replace('\"\"', '')\n    s = s.replace('\"\"', '')\n    s = s.replace('\"\"',",
        "difficulty": "interview"
    },
    {
        "task_id": 1386,
        "prompt": "Complete the Python function given the prompt below:Bob is decorating his kitchen, more precisely, the floor. He has found a prime candidate for the tiles he will use. They come in a simple form factor\u00a0\u2014\u00a0a square tile that is diagonally split into white and black part as depicted in the figure below. [Image] \nThe dimension of this tile is perfect for this kitchen, as he will need exactly $w \\times h$ tiles without any scraps. That is, the width of the kitchen is $w$ tiles, and the height is $h$ tiles. As each tile can be rotated in one of four ways, he still needs to decide on how exactly he will tile the floor. There is a single aesthetic criterion that he wants to fulfil: two adjacent tiles must not share a colour on the edge\u00a0\u2014\u00a0i.e. one of the tiles must have a white colour on the shared border, and the second one must be black. [Image] The picture on the left shows one valid tiling of a $3 \\times 2$ kitchen. The picture on the right shows an invalid arrangement, as the bottom two tiles touch with their white parts. \nFind the number of possible tilings. As this number may be large, output its remainder when divided by $998244353$ (a prime number). \n-----Input-----\nThe only line contains two space separated integers $w$, $h$\u00a0($1 \\leq w,h \\leq 1\\,000$)\u00a0\u2014\u00a0the width and height of the kitchen, measured in tiles.\n-----Output-----\nOutput a single integer $n$\u00a0\u2014\u00a0the remainder of the number of tilings when divided by $998244353$.\n-----Examples-----\nInput\n2 2\nOutput\n16\nInput\n2 4\nOutput\n64\n\ndef",
        "answer": "def is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True",
        "difficulty": "interview"
    },
    {
        "task_id": 1387,
        "prompt": "Complete the Python function given the prompt below:New Year is coming in Line World! In this world, there are n cells numbered by integers from 1 to n, as a 1 \u00d7 n board. People live in cells. However, it was hard to move between distinct cells, because of the difficulty of escaping the cell. People wanted to meet people who live in other cells.\nSo, user tncks0121 has made a transportation system to move between these cells, to celebrate the New Year. First, he thought of n - 1 positive integers a_1, a_2,..., a_{n} - 1. For every integer i where 1 \u2264 i \u2264 n - 1 the condition 1 \u2264 a_{i} \u2264 n - i holds. Next, he made n - 1 portals, numbered by integers from 1 to n - 1. The i-th (1 \u2264 i \u2264 n - 1) portal connects cell i and cell (i + a_{i}), and one can travel from cell i to cell (i + a_{i}) using the i-th portal. Unfortunately, one cannot use the portal backwards, which means one cannot move from cell (i + a_{i}) to cell i using the i-th portal. It is easy to see that because of condition 1 \u2264 a_{i} \u2264 n - i one can't leave the Line World using portals.\nCurrently, I am standing at cell 1, and I want to go to cell t. However, I don't know whether it is possible to go there. Please determine whether I can go to cell t by only using the construted transportation system.\n-----Input-----\nThe first line contains two space-separated integers n (3 \u2264 n \u2264 3 \u00d7 10^4) and t (2 \u2264 t \u2264 n) \u2014 the number of cells, and the index of the cell which I want to go to.\nThe second line contains n - 1 space-separated integers a_1, a_2,..., a_{n} - 1 (1 \u2264 a_{i} \u2264 n - i). It is guaranteed, that using the given transportation system, one cannot leave the Line World.\n-----Output-----\nIf I can go to cell t using the transportation system, print \"YES\". Otherwise, print \"NO\".\n-----Examples-----\nInput\n8 4\n1 2 1 2 1 2 1\nOutput\nYES\nInput\n8 5\n1 2 1 2 1 1 1\nOutput\nNO\n-----Note-----\nIn the first sample, the visited cells are: 1, 2, 4; so we can successfully visit the cell 4.\nIn the second sample, the possible cells to visit are: 1, 2, 4, 6, 7, 8; so we can't visit the cell 5, which we want to visit.\n\ndef",
        "answer": "def can_go(n, t, a):\n    if t in a:\n        return True\n    else:\n        return False",
        "difficulty": "interview"
    },
    {
        "task_id": 1388,
        "prompt": "Complete the Python function given the prompt below:Ashish has a tree consisting of $n$ nodes numbered $1$ to $n$ rooted at node $1$. The $i$-th node in the tree has a cost $a_i$, and binary digit $b_i$ is written in it. He wants to have binary digit $c_i$ written in the $i$-th node in the end.\nTo achieve this, he can perform the following operation any number of times:   Select any $k$ nodes from the subtree of any node $u$, and shuffle the digits in these nodes as he wishes, incurring a cost of $k \\cdot a_u$. Here, he can choose $k$ ranging from $1$ to the size of the subtree of $u$. \nHe wants to perform the operations in such a way that every node finally has the digit corresponding to its target.\nHelp him find the minimum total cost he needs to spend so that after all the operations, every node $u$ has digit $c_u$ written in it, or determine that it is impossible.\n-----Input-----\nFirst line contains a single integer $n$ $(1 \\le n \\le 2 \\cdot 10^5)$ denoting the number of nodes in the tree.\n$i$-th line of the next $n$ lines contains 3 space-separated integers $a_i$, $b_i$, $c_i$ $(1 \\leq a_i \\leq 10^9, 0 \\leq b_i, c_i \\leq 1)$ \u00a0\u2014 the cost of the $i$-th node, its initial digit and its goal digit.\nEach of the next $n - 1$ lines contain two integers $u$, $v$ $(1 \\leq u, v \\leq n, \\text{ } u \\ne v)$, meaning that there is an edge between nodes $u$ and $v$ in the tree.\n-----Output-----\nPrint the minimum total cost to make every node reach its target digit, and $-1$ if it is impossible.\n-----Examples-----\nInput\n5\n1 0 1\n20 1 0\n300 0 1\n4000 0 0\n50000 1 0\n1 2\n2 3\n2 4\n1 5\nOutput\n4\nInput\n5\n10000 0 1\n2000 1 0\n300 0 1\n40 0 0\n1 1 0\n1 2\n2 3\n2 4\n1 5\nOutput\n24000\nInput\n2\n109 0 1\n205 0 1\n1 2\nOutput\n-1\n-----Note-----\nThe tree corresponding to samples $1$ and $2$ are: [Image]\nIn sample $1$, we can choose node $1$ and $k = 4$ for a cost of $4 \\cdot 1$ = $4$ and select nodes ${1, 2, 3, 5}$, shuffle their digits and get the desired digits in every node.\nIn sample $2$, we can choose node $1$ and $k = 2$ for a cost of $10000 \\cdot 2$, select nodes ${1, 5}$ and exchange their digits, and similarly, choose node $2$ and $k = 2$ for a cost of $2000 \\cdot 2$, select nodes ${2, 3}$ and exchange their digits to get the desired digits in every node.\nIn sample $3$, it is impossible to get the desired digits, because there is no node with digit $1$ initially.\n\ndef",
        "answer": "def find_min_cost(n, edges):\n    graph = defaultdict(list)\n    for u, v in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n    cost = [0] * n\n    cost[0] = 1\n    queue = deque([0])\n    while queue:\n        u = queue.popleft()\n        for v in graph[u]:\n            if cost[v] == 0:\n                cost[v] = cost[u] * 10 + 1\n                queue.append(v)\n    return min(cost)",
        "difficulty": "interview"
    },
    {
        "task_id": 1389,
        "prompt": "Complete the Python function given the prompt below:The first algorithm for detecting a face on the image working in realtime was developed by Paul Viola and Michael Jones in 2001. A part of the algorithm is a procedure that computes Haar features. As part of this task, we consider a simplified model of this concept.\nLet's consider a rectangular image that is represented with a table of size n \u00d7 m. The table elements are integers that specify the brightness of each pixel in the image.\nA feature also is a rectangular table of size n \u00d7 m. Each cell of a feature is painted black or white.\nTo calculate the value of the given feature at the given image, you must perform the following steps. First the table of the feature is put over the table of the image (without rotations or reflections), thus each pixel is entirely covered with either black or white cell. The value of a feature in the image is the value of W - B, where W is the total brightness of the pixels in the image, covered with white feature cells, and B is the total brightness of the pixels covered with black feature cells.\nSome examples of the most popular Haar features are given below.  [Image] \nYour task is to determine the number of operations that are required to calculate the feature by using the so-called prefix rectangles.\nA prefix rectangle is any rectangle on the image, the upper left corner of which coincides with the upper left corner of the image.\nYou have a variable value, whose value is initially zero. In one operation you can count the sum of pixel values \u200b\u200bat any prefix rectangle, multiply it by any integer and add to variable value.\nYou are given a feature. It is necessary to calculate the minimum number of operations required to calculate the values of this attribute at an arbitrary image. For a better understanding of the statement, read the explanation of the first sample.\n-----Input-----\nThe first line contains two space-separated integers n and m (1 \u2264 n, m \u2264 100) \u2014 the number of rows and columns in the feature.\nNext n lines contain the description of the feature. Each line consists of m characters, the j-th character of the i-th line equals to \"W\", if this element of the feature is white and \"B\" if it is black.\n-----Output-----\nPrint a single number \u2014 the minimum number of operations that you need to make to calculate the value of the feature.\n-----Examples-----\nInput\n6 8\nBBBBBBBB\nBBBBBBBB\nBBBBBBBB\nWWWWWWWW\nWWWWWWWW\nWWWWWWWW\nOutput\n2\nInput\n3 3\nWBW\nBWW\nWWW\nOutput\n4\nInput\n3 6\nWWBBWW\nWWBBWW\nWWBBWW\nOutput\n3\nInput\n4 4\nBBBB\nBBBB\nBBBB\nBBBW\nOutput\n4\n-----Note-----\nThe first sample corresponds to feature B, the one shown in the picture. The value of this feature in an image of size 6 \u00d7 8 equals to the difference of the total brightness of the pixels in the lower and upper half of the image. To calculate its value, perform the following two operations:\n  add the sum of pixels in the prefix rectangle with the lower right corner in the 6-th row and 8-th column with coefficient 1 to the variable value (the rectangle is indicated by a red frame); $\\left. \\begin{array}{|r|r|r|r|r|r|r|r|} \\hline 1 & {1} & {1} & {1} & {1} & {1} & {1} & {1} \\\\ \\hline 1 & {1} & {1} & {1} & {1} & {1} & {1} & {1} \\\\ \\hline 1 & {1} & {1} & {1} & {1} & {1} & {1} & {1} \\\\ \\hline 1 & {1} & {1} & {1} & {1} & {1} & {1} & {1} \\\\ \\hline 1 & {1} & {1} & {1} & {1} & {1} & {1} & {1} \\\\ \\hline 1 & {1} & {1} & {1} & {1} & {1} & {1} & {1} \\\\ \\hline \\end{array} \\right.$\n add the number of pixels in the prefix rectangle with the lower right corner in the 3-rd row and 8-th column with coefficient  - 2 and variable value. [Image] \nThus, all the pixels in the lower three rows of the image will be included with factor 1, and all pixels in the upper three rows of the image will be included with factor 1 - 2 =  - 1, as required.\n\ndef",
        "answer": "def prefix_rectangles(n, m, feature):\n    value = 0\n    for i in range(n):\n        for j in range(m):\n            if feature[i][j] == 'W':\n                value += 1\n    return value",
        "difficulty": "interview"
    },
    {
        "task_id": 1390,
        "prompt": "Complete the Python function given the prompt below:The end of the school year is near and Ms. Manana, the teacher, will soon have to say goodbye to a yet another class. She decided to prepare a goodbye present for her n students and give each of them a jigsaw puzzle (which, as wikipedia states, is a tiling puzzle that requires the assembly of numerous small, often oddly shaped, interlocking and tessellating pieces).\nThe shop assistant told the teacher that there are m puzzles in the shop, but they might differ in difficulty and size. Specifically, the first jigsaw puzzle consists of f_1 pieces, the second one consists of f_2 pieces and so on.\nMs. Manana doesn't want to upset the children, so she decided that the difference between the numbers of pieces in her presents must be as small as possible. Let A be the number of pieces in the largest puzzle that the teacher buys and B be the number of pieces in the smallest such puzzle. She wants to choose such n puzzles that A - B is minimum possible. Help the teacher and find the least possible value of A - B.\n-----Input-----\nThe first line contains space-separated integers n and m (2 \u2264 n \u2264 m \u2264 50). The second line contains m space-separated integers f_1, f_2,..., f_{m} (4 \u2264 f_{i} \u2264 1000) \u2014 the quantities of pieces in the puzzles sold in the shop.\n-----Output-----\nPrint a single integer \u2014 the least possible difference the teacher can obtain.\n-----Examples-----\nInput\n4 6\n10 12 10 7 5 22\nOutput\n5\n-----Note-----\nSample 1. The class has 4 students. The shop sells 6 puzzles. If Ms. Manana buys the first four puzzles consisting of 10, 12, 10 and 7 pieces correspondingly, then the difference between the sizes of the largest and the smallest puzzle will be equal to 5. It is impossible to obtain a smaller difference. Note that the teacher can also buy puzzles 1, 3, 4 and 5 to obtain the difference 5.\n\ndef",
        "answer": "def jigsawPuzzle(n, m, f):\n    f.sort()\n    f.reverse()\n    return sum(f[:n]) - sum(f[n:])",
        "difficulty": "interview"
    },
    {
        "task_id": 1391,
        "prompt": "Complete the Python function given the prompt below:A group of n schoolboys decided to ride bikes. As nobody of them has a bike, the boys need to rent them.\nThe renting site offered them m bikes. The renting price is different for different bikes, renting the j-th bike costs p_{j} rubles.\nIn total, the boys' shared budget is a rubles. Besides, each of them has his own personal money, the i-th boy has b_{i} personal rubles. The shared budget can be spent on any schoolchildren arbitrarily, but each boy's personal money can be spent on renting only this boy's bike.\nEach boy can rent at most one bike, one cannot give his bike to somebody else.\nWhat maximum number of schoolboys will be able to ride bikes? What minimum sum of personal money will they have to spend in total to let as many schoolchildren ride bikes as possible?\n-----Input-----\nThe first line of the input contains three integers n, m and a (1 \u2264 n, m \u2264 10^5; 0 \u2264 a \u2264 10^9). The second line contains the sequence of integers b_1, b_2,..., b_{n} (1 \u2264 b_{i} \u2264 10^4), where b_{i} is the amount of the i-th boy's personal money. The third line contains the sequence of integers p_1, p_2,..., p_{m} (1 \u2264 p_{j} \u2264 10^9), where p_{j} is the price for renting the j-th bike.\n-----Output-----\nPrint two integers r and s, where r is the maximum number of schoolboys that can rent a bike and s is the minimum total personal money needed to rent r bikes. If the schoolchildren cannot rent any bikes, then r = s = 0.\n-----Examples-----\nInput\n2 2 10\n5 5\n7 6\nOutput\n2 3\nInput\n4 5 2\n8 1 1 2\n6 3 7 5 2\nOutput\n3 8\n-----Note-----\nIn the first sample both schoolchildren can rent a bike. For instance, they can split the shared budget in half (5 rubles each). In this case one of them will have to pay 1 ruble from the personal money and the other one will have to pay 2 rubles from the personal money. In total, they spend 3 rubles of their personal money. This way of distribution of money minimizes the amount of spent personal money.\n\ndef",
        "answer": "def main():\n    n, m, a = map(int, input().split())\n    b = list(map(int, input().split()))\n    p = list(map(int, input().split()))\n    b.sort()\n    p.sort()\n    r = 0\n    s = 0\n    for i in range(m):\n        if b[i] > a:\n            break\n        r += 1\n        a -= b[i]\n        s += p[i]\n    print(r, s)",
        "difficulty": "interview"
    },
    {
        "task_id": 1392,
        "prompt": "Complete the Python function given the prompt below:Let's call a number k-good if it contains all digits not exceeding k (0,..., k). You've got a number k and an array a containing n numbers. Find out how many k-good numbers are in a (count each number every time it occurs in array a).\n-----Input-----\nThe first line contains integers n and k (1 \u2264 n \u2264 100, 0 \u2264 k \u2264 9). The i-th of the following n lines contains integer a_{i} without leading zeroes (1 \u2264 a_{i} \u2264 10^9).\n-----Output-----\nPrint a single integer \u2014 the number of k-good numbers in a.\n-----Examples-----\nInput\n10 6\n1234560\n1234560\n1234560\n1234560\n1234560\n1234560\n1234560\n1234560\n1234560\n1234560\nOutput\n10\nInput\n2 1\n1\n10\nOutput\n1\n\ndef",
        "answer": "def k_good(n, k):\n    count = 0\n    for i in range(n):\n        if len(set(str(a[i]))) == k:\n            count += 1\n    return count",
        "difficulty": "interview"
    },
    {
        "task_id": 1393,
        "prompt": "Complete the Python function given the prompt below:Little Tanya decided to present her dad a postcard on his Birthday. She has already created a message \u2014 string s of length n, consisting of uppercase and lowercase English letters. Tanya can't write yet, so she found a newspaper and decided to cut out the letters and glue them into the postcard to achieve string s. The newspaper contains string t, consisting of uppercase and lowercase English letters. We know that the length of string t greater or equal to the length of the string s.\nThe newspaper may possibly have too few of some letters needed to make the text and too many of some other letters. That's why Tanya wants to cut some n letters out of the newspaper and make a message of length exactly n, so that it looked as much as possible like s. If the letter in some position has correct value and correct letter case (in the string s and in the string that Tanya will make), then she shouts joyfully \"YAY!\", and if the letter in the given position has only the correct value but it is in the wrong case, then the girl says \"WHOOPS\".\nTanya wants to make such message that lets her shout \"YAY!\" as much as possible. If there are multiple ways to do this, then her second priority is to maximize the number of times she says \"WHOOPS\". Your task is to help Tanya make the message.\n-----Input-----\nThe first line contains line s (1 \u2264 |s| \u2264 2\u00b710^5), consisting of uppercase and lowercase English letters \u2014 the text of Tanya's message.\nThe second line contains line t (|s| \u2264 |t| \u2264 2\u00b710^5), consisting of uppercase and lowercase English letters \u2014 the text written in the newspaper.\nHere |a| means the length of the string a.\n-----Output-----\nPrint two integers separated by a space:  the first number is the number of times Tanya shouts \"YAY!\" while making the message,  the second number is the number of times Tanya says \"WHOOPS\" while making the message. \n-----Examples-----\nInput\nAbC\nDCbA\nOutput\n3 0\nInput\nABC\nabc\nOutput\n0 3\nInput\nabacaba\nAbaCaBA\nOutput\n3 4\n\ndef",
        "answer": "def check_letters(s, t):\n    count_yay = 0\n    count_oops = 0\n    for i in range(len(s)):\n        if s[i] == t[i]:\n            count_yay += 1\n        else:\n            if s[i].lower() == t[i].lower():\n                count_oops += 1\n    return count_yay, count_oops",
        "difficulty": "interview"
    },
    {
        "task_id": 1394,
        "prompt": "Complete the Python function given the prompt below:Bob has a string $s$ consisting of lowercase English letters. He defines $s'$ to be the string after removing all \"a\" characters from $s$ (keeping all other characters in the same order). He then generates a new string $t$ by concatenating $s$ and $s'$. In other words, $t=s+s'$ (look at notes for an example).\nYou are given a string $t$. Your task is to find some $s$ that Bob could have used to generate $t$. It can be shown that if an answer exists, it will be unique.\n-----Input-----\nThe first line of input contains a string $t$ ($1 \\leq |t| \\leq 10^5$) consisting of lowercase English letters.\n-----Output-----\nPrint a string $s$ that could have generated $t$. It can be shown if an answer exists, it is unique. If no string exists, print \":(\" (without double quotes, there is no space between the characters).\n-----Examples-----\nInput\naaaaa\nOutput\naaaaa\nInput\naacaababc\nOutput\n:(\nInput\nababacacbbcc\nOutput\nababacac\nInput\nbaba\nOutput\n:(\n-----Note-----\nIn the first example, we have $s = $ \"aaaaa\", and $s' = $ \"\".\nIn the second example, no such $s$ can work that will generate the given $t$.\nIn the third example, we have $s = $ \"ababacac\", and $s' = $ \"bbcc\", and $t = s + s' = $ \"ababacacbbcc\".\n\ndef",
        "answer": "def generate_string(t):\n    for i in range(len(t)):\n        if t[i] == 'a':\n            t = t[:i] + t[i+1:]\n            break\n    return t",
        "difficulty": "interview"
    },
    {
        "task_id": 1395,
        "prompt": "Complete the Python function given the prompt below:Stepan has a very big positive integer.\nLet's consider all cyclic shifts of Stepan's integer (if we look at his integer like at a string) which are also integers (i.e. they do not have leading zeros). Let's call such shifts as good shifts. For example, for the integer 10203 the good shifts are the integer itself 10203 and integers 20310 and 31020.\nStepan wants to know the minimum remainder of the division by the given number m among all good shifts. Your task is to determine the minimum remainder of the division by m.\n-----Input-----\nThe first line contains the integer which Stepan has. The length of Stepan's integer is between 2 and 200 000 digits, inclusive. It is guaranteed that Stepan's integer does not contain leading zeros.\nThe second line contains the integer m (2 \u2264 m \u2264 10^8) \u2014 the number by which Stepan divides good shifts of his integer.\n-----Output-----\nPrint the minimum remainder which Stepan can get if he divides all good shifts of his integer by the given number m.\n-----Examples-----\nInput\n521\n3\nOutput\n2\nInput\n1001\n5\nOutput\n0\nInput\n5678901234567890123456789\n10000\nOutput\n123\n-----Note-----\nIn the first example all good shifts of the integer 521 (good shifts are equal to 521, 215 and 152) has same remainder 2 when dividing by 3.\nIn the second example there are only two good shifts: the Stepan's integer itself and the shift by one position to the right. The integer itself is 1001 and the remainder after dividing it by 5 equals 1. The shift by one position to the right equals to 1100 and the remainder after dividing it by 5 equals 0, which is the minimum possible remainder.\n\ndef",
        "answer": "def min_remainder(n, m):\n    n = str(n)\n    m = str(m)\n    min_rem = 0\n    for i in range(len(n)):\n        if n[i:] + n[:i] == m:\n            min_rem = i\n    return min_rem",
        "difficulty": "interview"
    },
    {
        "task_id": 1396,
        "prompt": "Complete the Python function given the prompt below:Iahub is training for the IOI. What is a better way to train than playing a Zuma-like game? \nThere are n balls put in a row. Each ball is colored in one of k colors. Initially the row doesn't contain three or more contiguous balls with the same color. Iahub has a single ball of color x. He can insert his ball at any position in the row (probably, between two other balls). If at any moment there are three or more contiguous balls of the same color in the row, they are destroyed immediately. This rule is applied multiple times, until there are no more sets of 3 or more contiguous balls of the same color. \nFor example, if Iahub has the row of balls [black, black, white, white, black, black] and a white ball, he can insert the ball between two white balls. Thus three white balls are destroyed, and then four black balls become contiguous, so all four balls are destroyed. The row will not contain any ball in the end, so Iahub can destroy all 6 balls.\nIahub wants to destroy as many balls as possible. You are given the description of the row of balls, and the color of Iahub's ball. Help Iahub train for the IOI by telling him the maximum number of balls from the row he can destroy.\n-----Input-----\nThe first line of input contains three integers: n (1 \u2264 n \u2264 100), k (1 \u2264 k \u2264 100) and x (1 \u2264 x \u2264 k). The next line contains n space-separated integers c_1, c_2,..., c_{n} (1 \u2264 c_{i} \u2264 k). Number c_{i} means that the i-th ball in the row has color c_{i}.\nIt is guaranteed that the initial row of balls will never contain three or more contiguous balls of the same color. \n-----Output-----\nPrint a single integer \u2014 the maximum number of balls Iahub can destroy.\n-----Examples-----\nInput\n6 2 2\n1 1 2 2 1 1\nOutput\n6\nInput\n1 1 1\n1\nOutput\n0\n\ndef",
        "answer": "def max_destroy(n, k, x):\n    if n == 1:\n        return 0\n    if k == 1:\n        return 0\n    if x == 1:\n        return 0\n    if k == n:\n        return n\n    if x == k:\n        return n\n    return max(max_destroy(n-1, k, x), max_destroy(n-1, k-1, x-1)) + 1",
        "difficulty": "interview"
    },
    {
        "task_id": 1397,
        "prompt": "Complete the Python function given the prompt below:A country has n cities. Initially, there is no road in the country. One day, the king decides to construct some roads connecting pairs of cities. Roads can be traversed either way. He wants those roads to be constructed in such a way that it is possible to go from each city to any other city by traversing at most two roads. You are also given m pairs of cities \u2014 roads cannot be constructed between these pairs of cities.\nYour task is to construct the minimum number of roads that still satisfy the above conditions. The constraints will guarantee that this is always possible.\n-----Input-----\nThe first line consists of two integers n and m $(1 \\leq n \\leq 10^{3}, 0 \\leq m < \\frac{n}{2})$.\nThen m lines follow, each consisting of two integers a_{i} and b_{i} (1 \u2264 a_{i}, b_{i} \u2264 n, a_{i} \u2260 b_{i}), which means that it is not possible to construct a road connecting cities a_{i} and b_{i}. Consider the cities are numbered from 1 to n.\nIt is guaranteed that every pair of cities will appear at most once in the input.\n-----Output-----\nYou should print an integer s: the minimum number of roads that should be constructed, in the first line. Then s lines should follow, each consisting of two integers a_{i} and b_{i} (1 \u2264 a_{i}, b_{i} \u2264 n, a_{i} \u2260 b_{i}), which means that a road should be constructed between cities a_{i} and b_{i}.\nIf there are several solutions, you may print any of them.\n-----Examples-----\nInput\n4 1\n1 3\nOutput\n3\n1 2\n4 2\n2 3\n-----Note-----\nThis is one possible solution of the example:  [Image] \nThese are examples of wrong solutions: [Image]  The above solution is wrong because it doesn't use the minimum number of edges (4 vs 3). In addition, it also tries to construct a road between cities 1 and 3, while the input specifies that it is not allowed to construct a road between the pair. [Image]  The above solution is wrong because you need to traverse at least 3 roads to go from city 1 to city 3, whereas in your country it must be possible to go from any city to another by traversing at most 2 roads. [Image]  Finally, the above solution is wrong because it must be possible to go from any city to another, whereas it is not possible in this country to go from city 1 to 3, 2 to 3, and 4 to 3.\n\ndef",
        "answer": "def roadsAndLibraries(n, c_lib, c_road, cities):\n    if c_lib < c_road:\n        return c_lib * n\n    else:\n        return c_road * n",
        "difficulty": "interview"
    },
    {
        "task_id": 1398,
        "prompt": "Complete the Python function given the prompt below:One day Vasya was on a physics practical, performing the task on measuring the capacitance. He followed the teacher's advice and did as much as n measurements, and recorded the results in the notebook. After that he was about to show the results to the teacher, but he remembered that at the last lesson, the teacher had made his friend Petya redo the experiment because the largest and the smallest results differed by more than two times. Vasya is lazy, and he does not want to redo the experiment. He wants to do the task and go home play computer games. So he decided to cheat: before Vasya shows the measurements to the teacher, he will erase some of them, so as to make the largest and the smallest results of the remaining measurements differ in no more than two times. In other words, if the remaining measurements have the smallest result x, and the largest result y, then the inequality y \u2264 2\u00b7x must fulfill. Of course, to avoid the teacher's suspicion, Vasya wants to remove as few measurement results as possible from his notes.\nHelp Vasya, find what minimum number of measurement results he will have to erase from his notes so that the largest and the smallest of the remaining results of the measurements differed in no more than two times.\n-----Input-----\nThe first line contains integer n (2 \u2264 n \u2264 10^5) \u2014 the number of measurements Vasya made. The second line contains n integers c_1, c_2,..., c_{n} (1 \u2264 c_{i} \u2264 5000) \u2014 the results of the measurements. The numbers on the second line are separated by single spaces.\n-----Output-----\nPrint a single integer \u2014 the minimum number of results Vasya will have to remove.\n-----Examples-----\nInput\n6\n4 5 3 8 3 7\nOutput\n2\nInput\n4\n4 3 2 4\nOutput\n0\n-----Note-----\nIn the first sample you can remove the fourth and the sixth measurement results (values 8 and 7). Then the maximum of the remaining values will be 5, and the minimum one will be 3. Or else, you can remove the third and fifth results (both equal 3). After that the largest remaining result will be 8, and the smallest one will be 4.\n\ndef",
        "answer": "def erase_the_worst(n, arr):\n    arr.sort()\n    arr.pop(0)\n    arr.pop()\n    return len(arr)",
        "difficulty": "interview"
    },
    {
        "task_id": 1399,
        "prompt": "Complete the Python function given the prompt below:You are given $n$ segments on a Cartesian plane. Each segment's endpoints have integer coordinates. Segments can intersect with each other. No two segments lie on the same line.\nCount the number of distinct points with integer coordinates, which are covered by at least one segment.\n-----Input-----\nThe first line contains a single integer $n$ ($1 \\le n \\le 1000$) \u2014 the number of segments.\nEach of the next $n$ lines contains four integers $Ax_i, Ay_i, Bx_i, By_i$ ($-10^6 \\le Ax_i, Ay_i, Bx_i, By_i \\le 10^6$) \u2014 the coordinates of the endpoints $A$, $B$ ($A \\ne B$) of the $i$-th segment.\nIt is guaranteed that no two segments lie on the same line.\n-----Output-----\nPrint a single integer \u2014 the number of distinct points with integer coordinates, which are covered by at least one segment.\n-----Examples-----\nInput\n9\n0 0 4 4\n-1 5 4 0\n4 0 4 4\n5 2 11 2\n6 1 6 7\n5 6 11 6\n10 1 10 7\n7 0 9 8\n10 -1 11 -1\nOutput\n42\nInput\n4\n-1 2 1 2\n-1 0 1 0\n-1 0 0 3\n0 3 1 0\nOutput\n7\n-----Note-----\nThe image for the first example: [Image] \nSeveral key points are marked blue, the answer contains some non-marked points as well.\nThe image for the second example: [Image]\n\ndef",
        "answer": "def count_points(segments):\n    points = set()\n    for segment in segments:\n        points.add(segment[0])\n        points.add(segment[1])\n    return len(points)",
        "difficulty": "interview"
    }
]