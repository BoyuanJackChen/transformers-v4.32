[
    {
        "task_id": 1200,
        "prompt": "Complete the Python function given the prompt below:There are n points on a straight line, and the i-th point among them is located at x_{i}. All these coordinates are distinct.\nDetermine the number m \u2014 the smallest number of points you should add on the line to make the distances between all neighboring points equal. \n-----Input-----\nThe first line contains a single integer n (3 \u2264 n \u2264 100 000) \u2014 the number of points.\nThe second line contains a sequence of integers x_1, x_2,..., x_{n} ( - 10^9 \u2264 x_{i} \u2264 10^9) \u2014 the coordinates of the points. All these coordinates are distinct. The points can be given in an arbitrary order.\n-----Output-----\nPrint a single integer m \u2014 the smallest number of points you should add on the line to make the distances between all neighboring points equal. \n-----Examples-----\nInput\n3\n-5 10 5\nOutput\n1\nInput\n6\n100 200 400 300 600 500\nOutput\n0\nInput\n4\n10 9 0 -1\nOutput\n8\n-----Note-----\nIn the first example you can add one point with coordinate 0.\nIn the second example the distances between all neighboring points are already equal, so you shouldn't add anything.\n\ndef",
        "answer": "def add_points(points):\n    points.sort()\n    points.append(points[0])\n    return len(set(points)) - 1",
        "difficulty": "interview"
    },
    {
        "task_id": 1201,
        "prompt": "Complete the Python function given the prompt below:Polycarp is in really serious trouble \u2014 his house is on fire! It's time to save the most valuable items. Polycarp estimated that it would take t_{i} seconds to save i-th item. In addition, for each item, he estimated the value of d_{i} \u2014 the moment after which the item i will be completely burned and will no longer be valuable for him at all. In particular, if t_{i} \u2265 d_{i}, then i-th item cannot be saved.\nGiven the values p_{i} for each of the items, find a set of items that Polycarp can save such that the total value of this items is maximum possible. Polycarp saves the items one after another. For example, if he takes item a first, and then item b, then the item a will be saved in t_{a} seconds, and the item b \u2014 in t_{a} + t_{b} seconds after fire started.\n-----Input-----\nThe first line contains a single integer n (1 \u2264 n \u2264 100) \u2014 the number of items in Polycarp's house.\nEach of the following n lines contains three integers t_{i}, d_{i}, p_{i} (1 \u2264 t_{i} \u2264 20, 1 \u2264 d_{i} \u2264 2 000, 1 \u2264 p_{i} \u2264 20) \u2014 the time needed to save the item i, the time after which the item i will burn completely and the value of item i.\n-----Output-----\nIn the first line print the maximum possible total value of the set of saved items. In the second line print one integer m \u2014 the number of items in the desired set. In the third line print m distinct integers \u2014 numbers of the saved items in the order Polycarp saves them. Items are 1-indexed in the same order in which they appear in the input. If there are several answers, print any of them.\n-----Examples-----\nInput\n3\n3 7 4\n2 6 5\n3 7 6\nOutput\n11\n2\n2 3 \nInput\n2\n5 6 1\n3 3 5\nOutput\n1\n1\n1 \n-----Note-----\nIn the first example Polycarp will have time to save any two items, but in order to maximize the total value of the saved items, he must save the second and the third item. For example, he can firstly save the third item in 3 seconds, and then save the second item in another 2 seconds. Thus, the total value of the saved items will be 6 + 5 = 11.\nIn the second example Polycarp can save only the first item, since even if he immediately starts saving the second item, he can save it in 3 seconds, but this item will already be completely burned by this time.\n\ndef",
        "answer": "def save_items(items):\n    items.sort(key=lambda x: x[1])\n    saved_items = []\n    for item in items:\n        if item[0] >= item[1]:\n            saved_items.append(item[0])\n    return saved_items",
        "difficulty": "interview"
    },
    {
        "task_id": 1202,
        "prompt": "Complete the Python function given the prompt below:Two semifinals have just been in the running tournament. Each semifinal had n participants. There are n participants advancing to the finals, they are chosen as follows: from each semifinal, we choose k people (0 \u2264 2k \u2264 n) who showed the best result in their semifinals and all other places in the finals go to the people who haven't ranked in the top k in their semifinal but got to the n - 2k of the best among the others.\nThe tournament organizers hasn't yet determined the k value, so the participants want to know who else has any chance to get to the finals and who can go home.\n-----Input-----\nThe first line contains a single integer n (1 \u2264 n \u2264 10^5) \u2014 the number of participants in each semifinal.\nEach of the next n lines contains two integers a_{i} and b_{i} (1 \u2264 a_{i}, b_{i} \u2264 10^9)\u00a0\u2014 the results of the i-th participant (the number of milliseconds he needs to cover the semifinals distance) of the first and second semifinals, correspondingly. All results are distinct. Sequences a_1, a_2,..., a_{n} and b_1, b_2,..., b_{n} are sorted in ascending order, i.e. in the order the participants finished in the corresponding semifinal.\n-----Output-----\nPrint two strings consisting of n characters, each equals either \"0\" or \"1\". The first line should correspond to the participants of the first semifinal, the second line should correspond to the participants of the second semifinal. The i-th character in the j-th line should equal \"1\" if the i-th participant of the j-th semifinal has any chances to advance to the finals, otherwise it should equal a \"0\".\n-----Examples-----\nInput\n4\n9840 9920\n9860 9980\n9930 10020\n10040 10090\nOutput\n1110\n1100\nInput\n4\n9900 9850\n9940 9930\n10000 10020\n10060 10110\nOutput\n1100\n1100\n-----Note-----\nConsider the first sample. Each semifinal has 4 participants. The results of the first semifinal are 9840, 9860, 9930, 10040. The results of the second semifinal are 9920, 9980, 10020, 10090.  If k = 0, the finalists are determined by the time only, so players 9840, 9860, 9920 and 9930 advance to the finals.  If k = 1, the winners from both semifinals move to the finals (with results 9840 and 9920), and the other places are determined by the time (these places go to the sportsmen who run the distance in 9860 and 9930 milliseconds).  If k = 2, then first and second places advance from each seminfial, these are participants with results 9840, 9860, 9920 and 9980 milliseconds.\n\ndef",
        "answer": "def tournamentWinner(competitions, results):\n    # Write your code here.\n    scores = {c[0]: 0 for c in competitions}\n    for i, (c1, c2) in enumerate(competitions):\n        if results[i] == 1:\n            scores[c1] += 3\n        else:\n            scores[c2] += 3\n    return max(scores, key=scores.get)\n",
        "difficulty": "interview"
    },
    {
        "task_id": 1203,
        "prompt": "Complete the Python function given the prompt below:While sailing on a boat, Inessa noticed a beautiful water lily flower above the lake's surface. She came closer and it turned out that the lily was exactly $H$ centimeters above the water surface. Inessa grabbed the flower and sailed the distance of $L$ centimeters. Exactly at this point the flower touched the water surface. [Image] \nSuppose that the lily grows at some point $A$ on the lake bottom, and its stem is always a straight segment with one endpoint at point $A$. Also suppose that initially the flower was exactly above the point $A$, i.e. its stem was vertical. Can you determine the depth of the lake at point $A$?\n-----Input-----\nThe only line contains two integers $H$ and $L$ ($1 \\le H < L \\le 10^{6}$).\n-----Output-----\nPrint a single number\u00a0\u2014 the depth of the lake at point $A$. The absolute or relative error should not exceed $10^{-6}$.\nFormally, let your answer be $A$, and the jury's answer be $B$. Your answer is accepted if and only if $\\frac{|A - B|}{\\max{(1, |B|)}} \\le 10^{-6}$.\n-----Examples-----\nInput\n1 2\nOutput\n1.5000000000000\nInput\n3 5\nOutput\n2.6666666666667\n\ndef",
        "answer": "def lake_depth(h, l):\n    return h / l",
        "difficulty": "interview"
    },
    {
        "task_id": 1204,
        "prompt": "Complete the Python function given the prompt below:This problem consists of three subproblems: for solving subproblem C1 you will receive 4 points, for solving subproblem C2 you will receive 4 points, and for solving subproblem C3 you will receive 8 points.\nManao decided to pursue a fighter's career. He decided to begin with an ongoing tournament. Before Manao joined, there were n contestants in the tournament, numbered from 1 to n. Each of them had already obtained some amount of tournament points, namely the i-th fighter had p_{i} points.\nManao is going to engage in a single fight against each contestant. Each of Manao's fights ends in either a win or a loss. A win grants Manao one point, and a loss grants Manao's opponent one point. For each i, Manao estimated the amount of effort e_{i} he needs to invest to win against the i-th contestant. Losing a fight costs no effort.\nAfter Manao finishes all of his fights, the ranklist will be determined, with 1 being the best rank and n + 1 being the worst. The contestants will be ranked in descending order of their tournament points. The contestants with the same number of points as Manao will be ranked better than him if they won the match against him and worse otherwise. The exact mechanism of breaking ties for other fighters is not relevant here.\nManao's objective is to have rank k or better. Determine the minimum total amount of effort he needs to invest in order to fulfill this goal, if it is possible.\n-----Input-----\nThe first line contains a pair of integers n and k (1 \u2264 k \u2264 n + 1). The i-th of the following n lines contains two integers separated by a single space \u2014 p_{i} and e_{i} (0 \u2264 p_{i}, e_{i} \u2264 200000).\nThe problem consists of three subproblems. The subproblems have different constraints on the input. You will get some score for the correct submission of the subproblem. The description of the subproblems follows.\n  In subproblem C1 (4 points), the constraint 1 \u2264 n \u2264 15 will hold.  In subproblem C2 (4 points), the constraint 1 \u2264 n \u2264 100 will hold.  In subproblem C3 (8 points), the constraint 1 \u2264 n \u2264 200000 will hold. \n-----Output-----\nPrint a single number in a single line \u2014 the minimum amount of effort Manao needs to use to rank in the top k. If no amount of effort can earn Manao such a rank, output number -1.\n-----Examples-----\nInput\n3 2\n1 1\n1 4\n2 2\nOutput\n3\nInput\n2 1\n3 2\n4 0\nOutput\n-1\nInput\n5 2\n2 10\n2 10\n1 1\n3 1\n3 1\nOutput\n12\n-----Note-----\nConsider the first test case. At the time when Manao joins the tournament, there are three fighters. The first of them has 1 tournament point and the victory against him requires 1 unit of effort. The second contestant also has 1 tournament point, but Manao needs 4 units of effort to defeat him. The third contestant has 2 points and victory against him costs Manao 2 units of effort. Manao's goal is top be in top 2. The optimal decision is to win against fighters 1 and 3, after which Manao, fighter 2, and fighter 3 will all have 2 points. Manao will rank better than fighter 3 and worse than fighter 2, thus finishing in second place.\nConsider the second test case. Even if Manao wins against both opponents, he will still rank third.\n\ndef",
        "answer": "def main():\n    n, k = map(int, input().split())\n    p = [0] * n\n    e = [0] * n\n    for i in range(n):\n        p[i], e[i] = map(int, input().split())\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    for i in range(n):\n        for j in range(k + 1):\n            dp[i + 1][j] = dp[i][j]\n            if j >= p[i]:\n                dp[i + 1][j] = max(dp[i + 1][j], dp[i][j - p[i]] + e[i])\n    print(dp[n][k])\nmain()\n",
        "difficulty": "interview"
    },
    {
        "task_id": 1205,
        "prompt": "Complete the Python function given the prompt below:You are given a set of n points on the plane. A line containing the origin is called good, if projection of the given set to this line forms a symmetric multiset of points. Find the total number of good lines.\nMultiset is a set where equal elements are allowed.\nMultiset is called symmetric, if there is a point P on the plane such that the multiset is centrally symmetric in respect of point P.\n-----Input-----\nThe first line contains a single integer n (1 \u2264 n \u2264 2000) \u2014 the number of points in the set.\nEach of the next n lines contains two integers x_{i} and y_{i} ( - 10^6  \u2264  x_{i},  y_{i}  \u2264  10^6) \u2014 the coordinates of the points. It is guaranteed that no two points coincide.\n-----Output-----\nIf there are infinitely many good lines, print -1.\nOtherwise, print single integer\u00a0\u2014 the number of good lines.\n-----Examples-----\nInput\n3\n1 2\n2 1\n3 3\nOutput\n3\nInput\n2\n4 3\n1 2\nOutput\n-1\n-----Note-----\nPicture to the first sample test:\n[Image] \nIn the second sample, any line containing the origin is good.\n\ndef",
        "answer": "def symmetric_multiset(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    return -1",
        "difficulty": "interview"
    },
    {
        "task_id": 1206,
        "prompt": "Complete the Python function given the prompt below:Nowadays, most of the internet advertisements are not statically linked to a web page. Instead, what will be shown to the person opening a web page is determined within 100 milliseconds after the web page is opened. Usually, multiple companies compete for each ad slot on the web page in an auction. Each of them receives a request with details about the user, web page and ad slot and they have to respond within those 100 milliseconds with a bid they would pay for putting an advertisement on that ad slot. The company that suggests the highest bid wins the auction and gets to place its advertisement. If there are several companies tied for the highest bid, the winner gets picked at random.\nHowever, the company that won the auction does not have to pay the exact amount of its bid. In most of the cases, a second-price auction is used. This means that the amount paid by the company is equal to the maximum of all the other bids placed for this ad slot.\nLet's consider one such bidding. There are n companies competing for placing an ad. The i-th of these companies will bid an integer number of microdollars equiprobably randomly chosen from the range between L_{i} and R_{i}, inclusive. In the other words, the value of the i-th company bid can be any integer from the range [L_{i}, R_{i}] with the same probability. \nDetermine the expected value that the winner will have to pay in a second-price auction.\n-----Input-----\nThe first line of input contains an integer number n (2 \u2264 n \u2264 5). n lines follow, the i-th of them containing two numbers L_{i} and R_{i} (1 \u2264 L_{i} \u2264 R_{i} \u2264 10000) describing the i-th company's bid preferences.\nThis problem doesn't have subproblems. You will get 8 points for the correct submission.\n-----Output-----\nOutput the answer with absolute or relative error no more than 1e - 9.\n-----Examples-----\nInput\n3\n4 7\n8 10\n5 5\nOutput\n5.7500000000\nInput\n3\n2 5\n3 4\n1 6\nOutput\n3.5000000000\n-----Note-----\nConsider the first example. The first company bids a random integer number of microdollars in range [4, 7]; the second company bids between 8 and 10, and the third company bids 5 microdollars. The second company will win regardless of the exact value it bids, however the price it will pay depends on the value of first company's bid. With probability 0.5 the first company will bid at most 5 microdollars, and the second-highest price of the whole auction will be 5. With probability 0.25 it will bid 6 microdollars, and with probability 0.25 it will bid 7 microdollars. Thus, the expected value the second company will have to pay is 0.5\u00b75 + 0.25\u00b76 + 0.25\u00b77 = 5.75.\n\ndef",
        "answer": "def second_price_auction(n, L, R):\n    return sum(L[i] * (R[i] - L[i] + 1) / 2 for i in range(n))",
        "difficulty": "interview"
    },
    {
        "task_id": 1207,
        "prompt": "Complete the Python function given the prompt below:While Farmer John rebuilds his farm in an unfamiliar portion of Bovinia, Bessie is out trying some alternative jobs. In her new gig as a reporter, Bessie needs to know about programming competition results as quickly as possible. When she covers the 2016 Robot Rap Battle Tournament, she notices that all of the robots operate under deterministic algorithms. In particular, robot i will beat robot j if and only if robot i has a higher skill level than robot j. And if robot i beats robot j and robot j beats robot k, then robot i will beat robot k. Since rapping is such a subtle art, two robots can never have the same skill level.\nGiven the results of the rap battles in the order in which they were played, determine the minimum number of first rap battles that needed to take place before Bessie could order all of the robots by skill level.\n-----Input-----\nThe first line of the input consists of two integers, the number of robots n (2 \u2264 n \u2264 100 000) and the number of rap battles m ($1 \\leq m \\leq \\operatorname{min}(100000, \\frac{n(n - 1)}{2})$).\nThe next m lines describe the results of the rap battles in the order they took place. Each consists of two integers u_{i} and v_{i} (1 \u2264 u_{i}, v_{i} \u2264 n, u_{i} \u2260 v_{i}), indicating that robot u_{i} beat robot v_{i} in the i-th rap battle. No two rap battles involve the same pair of robots.\nIt is guaranteed that at least one ordering of the robots satisfies all m relations.\n-----Output-----\nPrint the minimum k such that the ordering of the robots by skill level is uniquely defined by the first k rap battles. If there exists more than one ordering that satisfies all m relations, output -1.\n-----Examples-----\nInput\n4 5\n2 1\n1 3\n2 3\n4 2\n4 3\nOutput\n4\nInput\n3 2\n1 2\n3 2\nOutput\n-1\n-----Note-----\nIn the first sample, the robots from strongest to weakest must be (4, 2, 1, 3), which Bessie can deduce after knowing the results of the first four rap battles.\nIn the second sample, both (1, 3, 2) and (3, 1, 2) are possible orderings of the robots from strongest to weakest after both rap battles.\n\ndef",
        "answer": "def solve(n, m):\n    # Write your code here\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    ",
        "difficulty": "interview"
    },
    {
        "task_id": 1208,
        "prompt": "Complete the Python function given the prompt below:Berland National Library has recently been built in the capital of Berland. In addition, in the library you can take any of the collected works of Berland leaders, the library has a reading room.\nToday was the pilot launch of an automated reading room visitors' accounting system! The scanner of the system is installed at the entrance to the reading room. It records the events of the form \"reader entered room\", \"reader left room\". Every reader is assigned a registration number during the registration procedure at the library \u2014 it's a unique integer from 1 to 10^6. Thus, the system logs events of two forms:  \"+ r_{i}\" \u2014 the reader with registration number r_{i} entered the room;  \"- r_{i}\" \u2014 the reader with registration number r_{i} left the room. \nThe first launch of the system was a success, it functioned for some period of time, and, at the time of its launch and at the time of its shutdown, the reading room may already have visitors.\nSignificant funds of the budget of Berland have been spent on the design and installation of the system. Therefore, some of the citizens of the capital now demand to explain the need for this system and the benefits that its implementation will bring. Now, the developers of the system need to urgently come up with reasons for its existence.\nHelp the system developers to find the minimum possible capacity of the reading room (in visitors) using the log of the system available to you.\n-----Input-----\nThe first line contains a positive integer n (1 \u2264 n \u2264 100) \u2014 the number of records in the system log. Next follow n events from the system journal in the order in which the were made. Each event was written on a single line and looks as \"+ r_{i}\" or \"- r_{i}\", where r_{i} is an integer from 1 to 10^6, the registration number of the visitor (that is, distinct visitors always have distinct registration numbers).\nIt is guaranteed that the log is not contradictory, that is, for every visitor the types of any of his two consecutive events are distinct. Before starting the system, and after stopping the room may possibly contain visitors.\n-----Output-----\nPrint a single integer \u2014 the minimum possible capacity of the reading room.\n-----Examples-----\nInput\n6\n+ 12001\n- 12001\n- 1\n- 1200\n+ 1\n+ 7\nOutput\n3\nInput\n2\n- 1\n- 2\nOutput\n2\nInput\n2\n+ 1\n- 1\nOutput\n1\n-----Note-----\nIn the first sample test, the system log will ensure that at some point in the reading room were visitors with registration numbers 1, 1200 and 12001. More people were not in the room at the same time based on the log. Therefore, the answer to the test is 3.\n\ndef",
        "answer": "def solution(n):\n    # write your code in Python 3.6\n    count = 0\n    for i in range(n):\n        if log[i][0] == '+':\n            count += 1\n        else:\n            count -= 1\n    return count\n",
        "difficulty": "interview"
    },
    {
        "task_id": 1209,
        "prompt": "Complete the Python function given the prompt below:Vus the Cossack has $n$ real numbers $a_i$. It is known that the sum of all numbers is equal to $0$. He wants to choose a sequence $b$ the size of which is $n$ such that the sum of all numbers is $0$ and each $b_i$ is either $\\lfloor a_i \\rfloor$ or $\\lceil a_i \\rceil$. In other words, $b_i$ equals $a_i$ rounded up or down. It is not necessary to round to the nearest integer.\nFor example, if $a = [4.58413, 1.22491, -2.10517, -3.70387]$, then $b$ can be equal, for example, to $[4, 2, -2, -4]$. \nNote that if $a_i$ is an integer, then there is no difference between $\\lfloor a_i \\rfloor$ and $\\lceil a_i \\rceil$, $b_i$ will always be equal to $a_i$.\nHelp Vus the Cossack find such sequence!\n-----Input-----\nThe first line contains one integer $n$ ($1 \\leq n \\leq 10^5$)\u00a0\u2014 the number of numbers.\nEach of the next $n$ lines contains one real number $a_i$ ($|a_i| < 10^5$). It is guaranteed that each $a_i$ has exactly $5$ digits after the decimal point. It is guaranteed that the sum of all the numbers is equal to $0$.\n-----Output-----\nIn each of the next $n$ lines, print one integer $b_i$. For each $i$, $|a_i-b_i|<1$ must be met.\nIf there are multiple answers, print any.\n-----Examples-----\nInput\n4\n4.58413\n1.22491\n-2.10517\n-3.70387\nOutput\n4\n2\n-2\n-4\nInput\n5\n-6.32509\n3.30066\n-0.93878\n2.00000\n1.96321\nOutput\n-6\n3\n-1\n2\n2\n-----Note-----\nThe first example is explained in the legend.\nIn the second example, we can round the first and fifth numbers up, and the second and third numbers down. We can round the fourth number neither up, nor down.\n\ndef",
        "answer": "def cossack(n):\n    a = [float(input()) for _ in range(n)]\n    b = [int(a[i]) if a[i] == int(a[i]) else int(a[i] + 0.5) for i in range(n)]\n    print(*b, sep='\\n')",
        "difficulty": "interview"
    },
    {
        "task_id": 1210,
        "prompt": "Complete the Python function given the prompt below:There are n sharks who grow flowers for Wet Shark. They are all sitting around the table, such that sharks i and i + 1 are neighbours for all i from 1 to n - 1. Sharks n and 1 are neighbours too.\nEach shark will grow some number of flowers s_{i}. For i-th shark value s_{i} is random integer equiprobably chosen in range from l_{i} to r_{i}. Wet Shark has it's favourite prime number p, and he really likes it! If for any pair of neighbouring sharks i and j the product s_{i}\u00b7s_{j} is divisible by p, then Wet Shark becomes happy and gives 1000 dollars to each of these sharks.\nAt the end of the day sharks sum all the money Wet Shark granted to them. Find the expectation of this value.\n-----Input-----\nThe first line of the input contains two space-separated integers n and p (3 \u2264 n \u2264 100 000, 2 \u2264 p \u2264 10^9)\u00a0\u2014 the number of sharks and Wet Shark's favourite prime number. It is guaranteed that p is prime.\nThe i-th of the following n lines contains information about i-th shark\u00a0\u2014 two space-separated integers l_{i} and r_{i} (1 \u2264 l_{i} \u2264 r_{i} \u2264 10^9), the range of flowers shark i can produce. Remember that s_{i} is chosen equiprobably among all integers from l_{i} to r_{i}, inclusive.\n-----Output-----\nPrint a single real number \u2014 the expected number of dollars that the sharks receive in total. You answer will be considered correct if its absolute or relative error does not exceed 10^{ - 6}. \nNamely: let's assume that your answer is a, and the answer of the jury is b. The checker program will consider your answer correct, if $\\frac{|a - b|}{\\operatorname{max}(1, b)} \\leq 10^{-6}$.\n-----Examples-----\nInput\n3 2\n1 2\n420 421\n420420 420421\nOutput\n4500.0\nInput\n3 5\n1 4\n2 3\n11 14\nOutput\n0.0\n-----Note-----\nA prime number is a positive integer number that is divisible only by 1 and itself. 1 is not considered to be prime.\nConsider the first sample. First shark grows some number of flowers from 1 to 2, second sharks grows from 420 to 421 flowers and third from 420420 to 420421. There are eight cases for the quantities of flowers (s_0, s_1, s_2) each shark grows: (1, 420, 420420): note that s_0\u00b7s_1 = 420, s_1\u00b7s_2 = 176576400, and s_2\u00b7s_0 = 420420. For each pair, 1000 dollars will be awarded to each shark. Therefore, each shark will be awarded 2000 dollars, for a total of 6000 dollars. (1, 420, 420421): now, the product s_2\u00b7s_0 is not divisible by 2. Therefore, sharks s_0 and s_2 will receive 1000 dollars, while shark s_1 will receive 2000. The total is 4000. (1, 421, 420420): total is 4000  (1, 421, 420421): total is 0.  (2, 420, 420420): total is 6000.  (2, 420, 420421): total is 6000.  (2, 421, 420420): total is 6000. (2, 421, 420421): total is 4000.\nThe expected value is $\\frac{6000 + 4000 + 4000 + 0 + 6000 + 6000 + 6000 + 4000}{8} = 4500$.\nIn the second sample, no combination of quantities will garner the sharks any money.\n\ndef",
        "answer": "def solution(n, p):\n    # write your code in Python 3.6\n    pass\n",
        "difficulty": "interview"
    },
    {
        "task_id": 1211,
        "prompt": "Complete the Python function given the prompt below:Dima has a hamsters farm. Soon N hamsters will grow up on it and Dima will sell them in a city nearby.\nHamsters should be transported in boxes. If some box is not completely full, the hamsters in it are bored, that's why each box should be completely full with hamsters.\nDima can buy boxes at a factory. The factory produces boxes of K kinds, boxes of the i-th kind can contain in themselves a_{i} hamsters. Dima can buy any amount of boxes, but he should buy boxes of only one kind to get a wholesale discount.\nOf course, Dima would buy boxes in such a way that each box can be completely filled with hamsters and transported to the city. If there is no place for some hamsters, Dima will leave them on the farm.\nFind out how many boxes and of which type should Dima buy to transport maximum number of hamsters.\n-----Input-----\nThe first line contains two integers N and K (0 \u2264 N \u2264 10^18, 1 \u2264 K \u2264 10^5)\u00a0\u2014 the number of hamsters that will grow up on Dima's farm and the number of types of boxes that the factory produces.\nThe second line contains K integers a_1, a_2,..., a_{K} (1 \u2264 a_{i} \u2264 10^18 for all i)\u00a0\u2014 the capacities of boxes.\n-----Output-----\nOutput two integers: the type of boxes that Dima should buy and the number of boxes of that type Dima should buy. Types of boxes are numbered from 1 to K in the order they are given in input.\nIf there are many correct answers, output any of them.\n-----Examples-----\nInput\n19 3\n5 4 10\nOutput\n2 4\nInput\n28 3\n5 6 30\nOutput\n1 5\n\ndef",
        "answer": "def hamsters(n, k):\n    boxes = [0] * k\n    for i in range(n):\n        boxes[i % k] += 1\n    return boxes.index(max(boxes)) + 1, max(boxes)",
        "difficulty": "interview"
    },
    {
        "task_id": 1212,
        "prompt": "Complete the Python function given the prompt below:There is a fence in front of Polycarpus's home. The fence consists of n planks of the same width which go one after another from left to right. The height of the i-th plank is h_{i} meters, distinct planks can have distinct heights. [Image] Fence for n = 7 and h = [1, 2, 6, 1, 1, 7, 1] \nPolycarpus has bought a posh piano and is thinking about how to get it into the house. In order to carry out his plan, he needs to take exactly k consecutive planks from the fence. Higher planks are harder to tear off the fence, so Polycarpus wants to find such k consecutive planks that the sum of their heights is minimal possible.\nWrite the program that finds the indexes of k consecutive planks with minimal total height. Pay attention, the fence is not around Polycarpus's home, it is in front of home (in other words, the fence isn't cyclic).\n-----Input-----\nThe first line of the input contains integers n and k (1 \u2264 n \u2264 1.5\u00b710^5, 1 \u2264 k \u2264 n) \u2014 the number of planks in the fence and the width of the hole for the piano. The second line contains the sequence of integers h_1, h_2,..., h_{n} (1 \u2264 h_{i} \u2264 100), where h_{i} is the height of the i-th plank of the fence.\n-----Output-----\nPrint such integer j that the sum of the heights of planks j, j + 1,..., j + k - 1 is the minimum possible. If there are multiple such j's, print any of them.\n-----Examples-----\nInput\n7 3\n1 2 6 1 1 7 1\nOutput\n3\n-----Note-----\nIn the sample, your task is to find three consecutive planks with the minimum sum of heights. In the given case three planks with indexes 3, 4 and 5 have the required attribute, their total height is 8.\n\ndef",
        "answer": "def find_consecutive_planks(n, k):\n    # Write your code here\n    l = []\n    for i in range(n-k+1):\n        l.append(sum(h[i:i+k]))\n    return l.index(min(l))",
        "difficulty": "interview"
    },
    {
        "task_id": 1213,
        "prompt": "Complete the Python function given the prompt below:The R1 company has recently bought a high rise building in the centre of Moscow for its main office. It's time to decorate the new office, and the first thing to do is to write the company's slogan above the main entrance to the building.\nThe slogan of the company consists of n characters, so the decorators hung a large banner, n meters wide and 1 meter high, divided into n equal squares. The first character of the slogan must be in the first square (the leftmost) of the poster, the second character must be in the second square, and so on.\nOf course, the R1 programmers want to write the slogan on the poster themselves. To do this, they have a large (and a very heavy) ladder which was put exactly opposite the k-th square of the poster. To draw the i-th character of the slogan on the poster, you need to climb the ladder, standing in front of the i-th square of the poster. This action (along with climbing up and down the ladder) takes one hour for a painter. The painter is not allowed to draw characters in the adjacent squares when the ladder is in front of the i-th square because the uncomfortable position of the ladder may make the characters untidy. Besides, the programmers can move the ladder. In one hour, they can move the ladder either a meter to the right or a meter to the left.\nDrawing characters and moving the ladder is very tiring, so the programmers want to finish the job in as little time as possible. Develop for them an optimal poster painting plan!\n-----Input-----\nThe first line contains two integers, n and k (1 \u2264 k \u2264 n \u2264 100) \u2014 the number of characters in the slogan and the initial position of the ladder, correspondingly. The next line contains the slogan as n characters written without spaces. Each character of the slogan is either a large English letter, or digit, or one of the characters: '.', '!', ',', '?'.\n-----Output-----\nIn t lines, print the actions the programmers need to make. In the i-th line print:  \"LEFT\" (without the quotes), if the i-th action was \"move the ladder to the left\";  \"RIGHT\" (without the quotes), if the i-th action was \"move the ladder to the right\";  \"PRINT x\" (without the quotes), if the i-th action was to \"go up the ladder, paint character x, go down the ladder\". \nThe painting time (variable t) must be minimum possible. If there are multiple optimal painting plans, you can print any of them.\n-----Examples-----\nInput\n2 2\nR1\nOutput\nPRINT 1\nLEFT\nPRINT R\nInput\n2 1\nR1\nOutput\nPRINT R\nRIGHT\nPRINT 1\nInput\n6 4\nGO?GO!\nOutput\nRIGHT\nRIGHT\nPRINT!\nLEFT\nPRINT O\nLEFT\nPRINT G\nLEFT\nPRINT?\nLEFT\nPRINT O\nLEFT\nPRINT G\n-----Note-----\nNote that the ladder cannot be shifted by less than one meter. The ladder can only stand in front of some square of the poster. For example, you cannot shift a ladder by half a meter and position it between two squares. Then go up and paint the first character and the second character.\n\ndef",
        "answer": "def print_slogan(slogan, ladder, position):\n    for i in range(len(slogan)):\n        if i == position:\n            print(\"PRINT\", slogan[i])\n        else:\n            print(\"LEFT\")\n            print(\"RIGHT\")",
        "difficulty": "interview"
    },
    {
        "task_id": 1214,
        "prompt": "Complete the Python function given the prompt below:Chouti is working on a strange math problem.\nThere was a sequence of $n$ positive integers $x_1, x_2, \\ldots, x_n$, where $n$ is even. The sequence was very special, namely for every integer $t$ from $1$ to $n$, $x_1+x_2+...+x_t$ is a square of some integer number (that is, a perfect square).\nSomehow, the numbers with odd indexes turned to be missing, so he is only aware of numbers on even positions, i.e. $x_2, x_4, x_6, \\ldots, x_n$. The task for him is to restore the original sequence. Again, it's your turn to help him.\nThe problem setter might make mistakes, so there can be no possible sequence at all. If there are several possible sequences, you can output any.\n-----Input-----\nThe first line contains an even number $n$ ($2 \\le n \\le 10^5$).\nThe second line contains $\\frac{n}{2}$ positive integers $x_2, x_4, \\ldots, x_n$ ($1 \\le x_i \\le 2 \\cdot 10^5$).\n-----Output-----\nIf there are no possible sequence, print \"No\".\nOtherwise, print \"Yes\" and then $n$ positive integers $x_1, x_2, \\ldots, x_n$ ($1 \\le x_i \\le 10^{13}$), where $x_2, x_4, \\ldots, x_n$ should be same as in input data. If there are multiple answers, print any.\nNote, that the limit for $x_i$ is larger than for input data. It can be proved that in case there is an answer, there must be a possible sequence satisfying $1 \\le x_i \\le 10^{13}$.\n-----Examples-----\nInput\n6\n5 11 44\nOutput\nYes\n4 5 16 11 64 44\nInput\n2\n9900\nOutput\nYes\n100 9900\nInput\n6\n314 1592 6535\nOutput\nNo\n-----Note-----\nIn the first example   $x_1=4$  $x_1+x_2=9$  $x_1+x_2+x_3=25$  $x_1+x_2+x_3+x_4=36$  $x_1+x_2+x_3+x_4+x_5=100$  $x_1+x_2+x_3+x_4+x_5+x_6=144$  All these numbers are perfect squares.\nIn the second example, $x_1=100$, $x_1+x_2=10000$. They are all perfect squares. There're other answers possible. For example, $x_1=22500$ is another answer.\nIn the third example, it is possible to show, that no such sequence exists.\n\ndef",
        "answer": "def check(n, arr):\n    for i in range(1, n, 2):\n        if arr[i] % 2!= 0:\n            return False\n    return True",
        "difficulty": "interview"
    },
    {
        "task_id": 1215,
        "prompt": "Complete the Python function given the prompt below:You have a given integer $n$. Find the number of ways to fill all $3 \\times n$ tiles with the shape described in the picture below. Upon filling, no empty spaces are allowed. Shapes cannot overlap. $\\square$ This picture describes when $n = 4$. The left one is the shape and the right one is $3 \\times n$ tiles. \n-----Input-----\nThe only line contains one integer $n$ ($1 \\le n \\le 60$)\u00a0\u2014 the length.\n-----Output-----\nPrint the number of ways to fill.\n-----Examples-----\nInput\n4\nOutput\n4\nInput\n1\nOutput\n0\n-----Note-----\nIn the first example, there are $4$ possible cases of filling.\nIn the second example, you cannot fill the shapes in $3 \\times 1$ tiles.\n\ndef",
        "answer": "def count_ways(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    return count_ways(n - 1) + count_ways(n - 2) + count_ways(n - 3)",
        "difficulty": "interview"
    },
    {
        "task_id": 1216,
        "prompt": "Complete the Python function given the prompt below:Stepan likes to repeat vowel letters when he writes words. For example, instead of the word \"pobeda\" he can write \"pobeeeedaaaaa\".\nSergey does not like such behavior, so he wants to write a program to format the words written by Stepan. This program must combine all consecutive equal vowels to a single vowel. The vowel letters are \"a\", \"e\", \"i\", \"o\", \"u\" and \"y\".\nThere are exceptions: if letters \"e\" or \"o\" repeat in a row exactly 2 times, like in words \"feet\" and \"foot\", the program must skip them and do not transform in one vowel. For example, the word \"iiiimpleeemeentatiioon\" must be converted to the word \"implemeentatioon\".\nSergey is very busy and asks you to help him and write the required program.\n-----Input-----\nThe first line contains the integer n (1 \u2264 n \u2264 100 000) \u2014 the number of letters in the word written by Stepan.\nThe second line contains the string s which has length that equals to n and contains only lowercase English letters \u2014 the word written by Stepan.\n-----Output-----\nPrint the single string \u2014 the word written by Stepan converted according to the rules described in the statement.\n-----Examples-----\nInput\n13\npobeeeedaaaaa\nOutput\npobeda\nInput\n22\niiiimpleeemeentatiioon\nOutput\nimplemeentatioon\nInput\n18\naeiouyaaeeiioouuyy\nOutput\naeiouyaeeioouy\nInput\n24\naaaoooiiiuuuyyyeeeggghhh\nOutput\naoiuyeggghhh\n\ndef",
        "answer": "def convert(s):\n    vowels = \"aeiouy\"\n    result = \"\"\n    for i in range(len(s)):\n        if s[i] in vowels:\n            if i!= 0 and s[i] == s[i-1] and s[i] == s[i+1]:\n                continue\n            result += s[i]\n        else:\n            result += s[i]\n    return result",
        "difficulty": "interview"
    },
    {
        "task_id": 1217,
        "prompt": "Complete the Python function given the prompt below:You are given two arrays of integers a and b. For each element of the second array b_{j} you should find the number of elements in array a that are less than or equal to the value b_{j}.\n-----Input-----\nThe first line contains two integers n, m (1 \u2264 n, m \u2264 2\u00b710^5) \u2014 the sizes of arrays a and b.\nThe second line contains n integers \u2014 the elements of array a ( - 10^9 \u2264 a_{i} \u2264 10^9).\nThe third line contains m integers \u2014 the elements of array b ( - 10^9 \u2264 b_{j} \u2264 10^9).\n-----Output-----\nPrint m integers, separated by spaces: the j-th of which is equal to the number of such elements in array a that are less than or equal to the value b_{j}.\n-----Examples-----\nInput\n5 4\n1 3 5 7 9\n6 4 2 8\nOutput\n3 2 1 4\nInput\n5 5\n1 2 1 2 5\n3 1 4 1 5\nOutput\n4 2 4 2 5\n\ndef",
        "answer": "def lessThanOrEqual(a, b):\n    count = 0\n    for i in range(len(b)):\n        for j in range(len(a)):\n            if a[j] <= b[i]:\n                count += 1\n    return count",
        "difficulty": "interview"
    },
    {
        "task_id": 1218,
        "prompt": "Complete the Python function given the prompt below:Vova, the Ultimate Thule new shaman, wants to build a pipeline. As there are exactly n houses in Ultimate Thule, Vova wants the city to have exactly n pipes, each such pipe should be connected to the water supply. A pipe can be connected to the water supply if there's water flowing out of it. Initially Vova has only one pipe with flowing water. Besides, Vova has several splitters.\nA splitter is a construction that consists of one input (it can be connected to a water pipe) and x output pipes. When a splitter is connected to a water pipe, water flows from each output pipe. You can assume that the output pipes are ordinary pipes. For example, you can connect water supply to such pipe if there's water flowing out from it. At most one splitter can be connected to any water pipe. [Image] The figure shows a 4-output splitter \nVova has one splitter of each kind: with 2, 3, 4,..., k outputs. Help Vova use the minimum number of splitters to build the required pipeline or otherwise state that it's impossible.\nVova needs the pipeline to have exactly n pipes with flowing out water. Note that some of those pipes can be the output pipes of the splitters.\n-----Input-----\nThe first line contains two space-separated integers n and k (1 \u2264 n \u2264 10^18, 2 \u2264 k \u2264 10^9).\nPlease, do not use the %lld specifier to read or write 64-bit integers in \u0421++. It is preferred to use the cin, cout streams or the %I64d specifier.\n-----Output-----\nPrint a single integer \u2014 the minimum number of splitters needed to build the pipeline. If it is impossible to build a pipeline with the given splitters, print -1.\n-----Examples-----\nInput\n4 3\nOutput\n2\nInput\n5 5\nOutput\n1\nInput\n8 4\nOutput\n-1\n\ndef",
        "answer": "def solution(n, k):\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 3\n    if n == 5:\n        return 4\n    if n == 6:\n        return 5\n    if n == 7:\n        return 6\n    if n == 8:\n        return 7\n    if n == 9:\n        return 8\n    if n == 10:\n        return 9\n    if n == 11:\n        return 10\n    if n == 12:\n        return 11\n    if n == 13:\n        return 12\n    if n == 14:\n        return 13\n    if n == 15:\n        return 14\n    if n == 16:\n        return 15\n    if n == 17:\n        return 16\n    if n == 18:\n        return 17\n    if n == 19:\n        return 18\n    if n == 20:\n        return 19\n    if n == 21:\n        return 20\n    if n == 22:\n        return 21\n    if n == 23:\n        return 22\n    if n == 24:\n        return 23\n    if n == 25:\n        return 24\n    if n == 26:\n        return 25\n    if n == 27:\n        return 26\n    if n == 28:\n        return 27\n    if n == 29:\n        return 28\n    if n == 30:\n        return 29\n    if n == 31:\n        return 30\n    if n == 32:\n        return 31\n    if n == 33:\n        return 32\n    if n == 34:\n        return 33\n    if n == 35:\n        return 34\n    if n == 36:\n        ",
        "difficulty": "interview"
    },
    {
        "task_id": 1219,
        "prompt": "Complete the Python function given the prompt below:While playing yet another strategy game, Mans has recruited $n$ Swedish heroes, whose powers which can be represented as an array $a$.\nUnfortunately, not all of those mighty heroes were created as capable as he wanted, so that he decided to do something about it. In order to accomplish his goal, he can pick two consecutive heroes, with powers $a_i$ and $a_{i+1}$, remove them and insert a hero with power $-(a_i+a_{i+1})$ back in the same position. \nFor example if the array contains the elements $[5, 6, 7, 8]$, he can pick $6$ and $7$ and get $[5, -(6+7), 8] = [5, -13, 8]$.\nAfter he will perform this operation $n-1$ times, Mans will end up having only one hero. He wants his power to be as big as possible. What's the largest possible power he can achieve?\n-----Input-----\nThe first line contains a single integer $n$ ($1 \\le n \\le 200000$).\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($-10^9 \\le a_i \\le 10^9$)\u00a0\u2014 powers of the heroes.\n-----Output-----\nPrint the largest possible power he can achieve after $n-1$ operations.\n-----Examples-----\nInput\n4\n5 6 7 8\nOutput\n26\nInput\n5\n4 -5 9 -2 1\nOutput\n15\n-----Note-----\nSuitable list of operations for the first sample:\n$[5, 6, 7, 8] \\rightarrow [-11, 7, 8] \\rightarrow [-11, -15] \\rightarrow [26]$\n\ndef",
        "answer": "def solution(n, a):\n    a.sort()\n    for i in range(n-1):\n        a[i] = -(a[i]+a[i+1])\n    return max(a)\n",
        "difficulty": "interview"
    },
    {
        "task_id": 1220,
        "prompt": "Complete the Python function given the prompt below:You are given an undirected graph consisting of n vertices and $\\frac{n(n - 1)}{2} - m$ edges. Instead of giving you the edges that exist in the graph, we give you m unordered pairs (x, y) such that there is no edge between x and y, and if some pair of vertices is not listed in the input, then there is an edge between these vertices.\nYou have to find the number of connected components in the graph and the size of each component. A connected component is a set of vertices X such that for every two vertices from this set there exists at least one path in the graph connecting these vertices, but adding any other vertex to X violates this rule.\n-----Input-----\nThe first line contains two integers n and m (1 \u2264 n \u2264 200000, $0 \\leq m \\leq \\operatorname{min}(\\frac{n(n - 1)}{2}, 200000)$).\nThen m lines follow, each containing a pair of integers x and y (1 \u2264 x, y \u2264 n, x \u2260 y) denoting that there is no edge between x and y. Each pair is listed at most once; (x, y) and (y, x) are considered the same (so they are never listed in the same test). If some pair of vertices is not listed in the input, then there exists an edge between those vertices. \n-----Output-----\nFirstly print k \u2014 the number of connected components in this graph.\nThen print k integers \u2014 the sizes of components. You should output these integers in non-descending order.\n-----Example-----\nInput\n5 5\n1 2\n3 4\n3 2\n4 2\n2 5\nOutput\n2\n1 4\n\ndef",
        "answer": "def dfs(graph, start, visited=None):\n    if visited is None:\n        visited = set()\n    visited.add(start)\n    for next in graph[start] - visited:\n        dfs(graph, next, visited)\n    return visited",
        "difficulty": "interview"
    },
    {
        "task_id": 1221,
        "prompt": "Complete the Python function given the prompt below:Nian is a monster which lives deep in the oceans. Once a year, it shows up on the land, devouring livestock and even people. In order to keep the monster away, people fill their villages with red colour, light, and cracking noise, all of which frighten the monster out of coming.\nLittle Tommy has n lanterns and Big Banban has m lanterns. Tommy's lanterns have brightness a_1, a_2,..., a_{n}, and Banban's have brightness b_1, b_2,..., b_{m} respectively.\nTommy intends to hide one of his lanterns, then Banban picks one of Tommy's non-hidden lanterns and one of his own lanterns to form a pair. The pair's brightness will be the product of the brightness of two lanterns.\nTommy wants to make the product as small as possible, while Banban tries to make it as large as possible.\nYou are asked to find the brightness of the chosen pair if both of them choose optimally.\n-----Input-----\nThe first line contains two space-separated integers n and m (2 \u2264 n, m \u2264 50).\nThe second line contains n space-separated integers a_1, a_2,..., a_{n}.\nThe third line contains m space-separated integers b_1, b_2,..., b_{m}.\nAll the integers range from  - 10^9 to 10^9.\n-----Output-----\nPrint a single integer\u00a0\u2014 the brightness of the chosen pair.\n-----Examples-----\nInput\n2 2\n20 18\n2 14\nOutput\n252\nInput\n5 3\n-1 0 1 2 3\n-1 0 1\nOutput\n2\n-----Note-----\nIn the first example, Tommy will hide 20 and Banban will choose 18 from Tommy and 14 from himself.\nIn the second example, Tommy will hide 3 and Banban will choose 2 from Tommy and 1 from himself.\n\ndef",
        "answer": "def lanterns(a, b):\n    return max(a) * max(b)",
        "difficulty": "interview"
    },
    {
        "task_id": 1222,
        "prompt": "Complete the Python function given the prompt below:A positive integer X is said to be a lunlun number if and only if the following condition is satisfied:\n - In the base ten representation of X (without leading zeros), for every pair of two adjacent digits, the absolute difference of those digits is at most 1.\nFor example, 1234, 1, and 334 are lunlun numbers, while none of 31415, 119, or 13579 is.\nYou are given a positive integer K. Find the K-th smallest lunlun number.\n-----Constraints-----\n - 1 \\leq K \\leq 10^5\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nK\n-----Output-----\nPrint the answer.\n-----Sample Input-----\n15\n-----Sample Output-----\n23\nWe will list the 15 smallest lunlun numbers in ascending order:\n1,\n2,\n3,\n4,\n5,\n6,\n7,\n8,\n9,\n10,\n11,\n12,\n21,\n22,\n23.\nThus, the answer is 23.\n\ndef",
        "answer": "def lunlun(n):\n    lunlun_list = []\n    for i in range(1, n+1):\n        lunlun_list.append(i)\n    for i in range(n):\n        for j in range(len(lunlun_list)-1):\n            if abs(lunlun_list[j]%10 - lunlun_list[j+1]%10) > 1:\n                lunlun_list.pop(j)\n    return lunlun_list[n-1]",
        "difficulty": "interview"
    },
    {
        "task_id": 1223,
        "prompt": "Complete the Python function given the prompt below:Given is a permutation P of \\{1, 2, \\ldots, N\\}.\nFor a pair (L, R) (1 \\le L \\lt R \\le N), let X_{L, R} be the second largest value among P_L, P_{L+1}, \\ldots, P_R.\nFind \\displaystyle \\sum_{L=1}^{N-1} \\sum_{R=L+1}^{N} X_{L,R}.\n-----Constraints-----\n -  2 \\le N \\le 10^5 \n -  1 \\le P_i \\le N \n -  P_i \\neq P_j  (i \\neq j)\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nP_1 P_2 \\ldots P_N\n-----Output-----\nPrint \\displaystyle \\sum_{L=1}^{N-1} \\sum_{R=L+1}^{N} X_{L,R}.\n-----Sample Input-----\n3\n2 3 1\n-----Sample Output-----\n5\nX_{1, 2} = 2, X_{1, 3} = 2, and X_{2, 3} = 1, so the sum is 2 + 2 + 1 = 5.\n\ndef",
        "answer": "def second_largest(n, arr):\n    arr.sort()\n    return arr[-2]",
        "difficulty": "interview"
    },
    {
        "task_id": 1224,
        "prompt": "Complete the Python function given the prompt below:Given is an integer N.\nDetermine whether there is a pair of positive integers (A, B) such that 3^A + 5^B = N, and find one such pair if it exists.\n-----Constraints-----\n - 1 \\leq N \\leq 10^{18}\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nN\n-----Output-----\nIf there is no pair (A, B) that satisfies the condition, print -1.\nIf there is such a pair, print A and B of one such pair with space in between. If there are multiple such pairs, any of them will be accepted.\n-----Sample Input-----\n106\n-----Sample Output-----\n4 2\nWe have 3^4 + 5^2 = 81 + 25 = 106, so (A, B) = (4, 2) satisfies the condition.\n\ndef",
        "answer": "def solve(n):\n    for i in range(1, n):\n        for j in range(1, n):\n            if i**3 + j**5 == n:\n                return i, j\n    return -1",
        "difficulty": "interview"
    },
    {
        "task_id": 1225,
        "prompt": "Complete the Python function given the prompt below:Caracal is fighting with a monster.\nThe health of the monster is H.\nCaracal can attack by choosing one monster. When a monster is attacked, depending on that monster's health, the following happens:\n - If the monster's health is 1, it drops to 0.\n - If the monster's health, X, is greater than 1, that monster disappears. Then, two new monsters appear, each with the health of \\lfloor X/2 \\rfloor.\n(\\lfloor r \\rfloor denotes the greatest integer not exceeding r.)\nCaracal wins when the healths of all existing monsters become 0 or below.\nFind the minimum number of attacks Caracal needs to make before winning.\n-----Constraints-----\n - 1 \\leq H \\leq 10^{12}\n - All values in input are integers.\n-----Input-----\nInput is given from Standard Input in the following format:\nH\n-----Output-----\nFind the minimum number of attacks Caracal needs to make before winning.\n-----Sample Input-----\n2\n-----Sample Output-----\n3\nWhen Caracal attacks the initial monster, it disappears, and two monsters appear, each with the health of 1.\nThen, Caracal can attack each of these new monsters once and win with a total of three attacks.\n\ndef",
        "answer": "def caracal(H):\n    count = 0\n    while H > 0:\n        count += 1\n        H = max(H - 1, 1)\n    return count",
        "difficulty": "interview"
    },
    {
        "task_id": 1226,
        "prompt": "Complete the Python function given the prompt below:Akari has n kinds of flowers, one of each kind.\nShe is going to choose one or more of these flowers to make a bouquet.\nHowever, she hates two numbers a and b, so the number of flowers in the bouquet cannot be a or b.\nHow many different bouquets are there that Akari can make?\nFind the count modulo (10^9 + 7).\nHere, two bouquets are considered different when there is a flower that is used in one of the bouquets but not in the other bouquet.\n-----Constraints-----\n - All values in input are integers.\n - 2 \\leq n \\leq 10^9\n - 1 \\leq a < b \\leq \\textrm{min}(n, 2 \\times 10^5)\n-----Input-----\nInput is given from Standard Input in the following format:\nn a b\n-----Output-----\nPrint the number of bouquets that Akari can make, modulo (10^9 + 7). (If there are no such bouquets, print 0.)\n-----Sample Input-----\n4 1 3\n-----Sample Output-----\n7\nIn this case, Akari can choose 2 or 4 flowers to make the bouquet.\nThere are 6 ways to choose 2 out of the 4 flowers, and 1 way to choose 4, so there are a total of 7 different bouquets that Akari can make.\n\ndef",
        "answer": "def solve(n, a, b):\n    return (fact(n) // (fact(a) * fact(n - a))) % (10 ** 9 + 7)",
        "difficulty": "interview"
    },
    {
        "task_id": 1227,
        "prompt": "Complete the Python function given the prompt below:Find the number of integers between 1 and N (inclusive) that contains exactly K non-zero digits when written in base ten.\n-----Constraints-----\n - 1 \\leq N < 10^{100}\n - 1 \\leq K \\leq 3\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nK\n-----Output-----\nPrint the count.\n-----Sample Input-----\n100\n1\n-----Sample Output-----\n19\nThe following 19 integers satisfy the condition:\n - 1,2,3,4,5,6,7,8,9,10,20,30,40,50,60,70,80,90,100\n\ndef",
        "answer": "def non_zero_count(n, k):\n    count = 0\n    for i in range(1, n+1):\n        if len(str(i)) == k:\n            count += 1\n    return count",
        "difficulty": "interview"
    },
    {
        "task_id": 1228,
        "prompt": "Complete the Python function given the prompt below:Tokitsukaze is one of the characters in the game \"Kantai Collection\". In this game, every character has a common attribute\u00a0\u2014 health points, shortened to HP.\nIn general, different values of HP are grouped into $4$ categories:  Category $A$ if HP is in the form of $(4 n + 1)$, that is, when divided by $4$, the remainder is $1$;  Category $B$ if HP is in the form of $(4 n + 3)$, that is, when divided by $4$, the remainder is $3$;  Category $C$ if HP is in the form of $(4 n + 2)$, that is, when divided by $4$, the remainder is $2$;  Category $D$ if HP is in the form of $4 n$, that is, when divided by $4$, the remainder is $0$. \nThe above-mentioned $n$ can be any integer.\nThese $4$ categories ordered from highest to lowest as $A > B > C > D$, which means category $A$ is the highest and category $D$ is the lowest.\nWhile playing the game, players can increase the HP of the character. Now, Tokitsukaze wants you to increase her HP by at most $2$ (that is, either by $0$, $1$ or $2$). How much should she increase her HP so that it has the highest possible category?\n-----Input-----\nThe only line contains a single integer $x$ ($30 \\leq x \\leq 100$)\u00a0\u2014 the value Tokitsukaze's HP currently.\n-----Output-----\nPrint an integer $a$ ($0 \\leq a \\leq 2$) and an uppercase letter $b$ ($b \\in \\lbrace A, B, C, D \\rbrace$), representing that the best way is to increase her HP by $a$, and then the category becomes $b$.\nNote that the output characters are case-sensitive.\n-----Examples-----\nInput\n33\nOutput\n0 A\nInput\n98\nOutput\n1 B\n-----Note-----\nFor the first example, the category of Tokitsukaze's HP is already $A$, so you don't need to enhance her ability.\nFor the second example:  If you don't increase her HP, its value is still $98$, which equals to $(4 \\times 24 + 2)$, and its category is $C$.  If you increase her HP by $1$, its value becomes $99$, which equals to $(4 \\times 24 + 3)$, and its category becomes $B$.  If you increase her HP by $2$, its value becomes $100$, which equals to $(4 \\times 25)$, and its category becomes $D$. \nTherefore, the best way is to increase her HP by $1$ so that the category of her HP becomes $B$.\n\ndef",
        "answer": "def tokitsukaze(hp):\n    if hp % 4 == 1:\n        return 0, 'A'\n    elif hp % 4 == 3:\n        return 1, 'B'\n    elif hp % 4 == 2:\n        return 2, 'C'\n    else:\n        return 2, 'D'",
        "difficulty": "interview"
    },
    {
        "task_id": 1229,
        "prompt": "Complete the Python function given the prompt below:You have multiset of n strings of the same length, consisting of lowercase English letters. We will say that those strings are easy to remember if for each string there is some position i and some letter c of the English alphabet, such that this string is the only string in the multiset that has letter c in position i.\nFor example, a multiset of strings {\"abc\", \"aba\", \"adc\", \"ada\"} are not easy to remember. And multiset {\"abc\", \"ada\", \"ssa\"} is easy to remember because:   the first string is the only string that has character c in position 3;  the second string is the only string that has character d in position 2;  the third string is the only string that has character s in position 2. \nYou want to change your multiset a little so that it is easy to remember. For a_{ij} coins, you can change character in the j-th position of the i-th string into any other lowercase letter of the English alphabet. Find what is the minimum sum you should pay in order to make the multiset of strings easy to remember.\n-----Input-----\nThe first line contains two integers n, m (1 \u2264 n, m \u2264 20)\u00a0\u2014 the number of strings in the multiset and the length of the strings respectively. Next n lines contain the strings of the multiset, consisting only of lowercase English letters, each string's length is m.\nNext n lines contain m integers each, the i-th of them contains integers a_{i}1, a_{i}2,..., a_{im} (0 \u2264 a_{ij} \u2264 10^6).\n-----Output-----\nPrint a single number \u2014 the answer to the problem.\n-----Examples-----\nInput\n4 5\nabcde\nabcde\nabcde\nabcde\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\nOutput\n3\nInput\n4 3\nabc\naba\nadc\nada\n10 10 10\n10 1 10\n10 10 10\n10 1 10\nOutput\n2\nInput\n3 3\nabc\nada\nssa\n1 1 1\n1 1 1\n1 1 1\nOutput\n0\n\ndef",
        "answer": "def easy_memorize(n, m, a):\n    a.sort(key=lambda x: x[1])\n    res = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j]!= a[0][j]:\n                res += 1\n    return res",
        "difficulty": "interview"
    },
    {
        "task_id": 1230,
        "prompt": "Complete the Python function given the prompt below:Bob is an active user of the social network Faithbug. On this network, people are able to engage in a mutual friendship. That is, if $a$ is a friend of $b$, then $b$ is also a friend of $a$. Each user thus has a non-negative amount of friends.\nThis morning, somebody anonymously sent Bob the following link: graph realization problem and Bob wants to know who that was. In order to do that, he first needs to know how the social network looks like. He investigated the profile of every other person on the network and noted down the number of his friends. However, he neglected to note down the number of his friends. Help him find out how many friends he has. Since there may be many possible answers, print all of them.\n-----Input-----\nThe first line contains one integer $n$\u00a0($1 \\leq n \\leq 5 \\cdot 10^5$), the number of people on the network excluding Bob. \nThe second line contains $n$ numbers $a_1,a_2, \\dots, a_n$\u00a0($0 \\leq a_i \\leq n$), with $a_i$ being the number of people that person $i$ is a friend of.\n-----Output-----\nPrint all possible values of $a_{n+1}$\u00a0\u2014 the amount of people that Bob can be friend of, in increasing order.\nIf no solution exists, output $-1$.\n-----Examples-----\nInput\n3\n3 3 3\nOutput\n3 \nInput\n4\n1 1 1 1\nOutput\n0 2 4 \nInput\n2\n0 2\nOutput\n-1\nInput\n35\n21 26 18 4 28 2 15 13 16 25 6 32 11 5 31 17 9 3 24 33 14 27 29 1 20 4 12 7 10 30 34 8 19 23 22\nOutput\n13 15 17 19 21 \n-----Note-----\nIn the first test case, the only solution is that everyone is friends with everyone. That is why Bob should have $3$ friends.\nIn the second test case, there are three possible solutions (apart from symmetries):   $a$ is friend of $b$, $c$ is friend of $d$, and Bob has no friends, or  $a$ is a friend of $b$ and both $c$ and $d$ are friends with Bob, or  Bob is friends of everyone. \nThe third case is impossible to solve, as the second person needs to be a friend with everybody, but the first one is a complete stranger.\n\ndef",
        "answer": "def friend_count(n, a):\n    friends = [0] * (n + 1)\n    for i in range(n):\n        friends[i + 1] = friends[i] + a[i]\n    return friends",
        "difficulty": "interview"
    },
    {
        "task_id": 1231,
        "prompt": "Complete the Python function given the prompt below:On her way to programming school tiger Dasha faced her first test \u2014 a huge staircase! [Image] \nThe steps were numbered from one to infinity. As we know, tigers are very fond of all striped things, it is possible that it has something to do with their color. So on some interval of her way she calculated two values \u2014 the number of steps with even and odd numbers. \nYou need to check whether there is an interval of steps from the l-th to the r-th (1 \u2264 l \u2264 r), for which values that Dasha has found are correct.\n-----Input-----\nIn the only line you are given two integers a, b (0 \u2264 a, b \u2264 100) \u2014 the number of even and odd steps, accordingly.\n-----Output-----\nIn the only line print \"YES\", if the interval of steps described above exists, and \"NO\" otherwise.\n-----Examples-----\nInput\n2 3\nOutput\nYES\nInput\n3 1\nOutput\nNO\n-----Note-----\nIn the first example one of suitable intervals is from 1 to 5. The interval contains two even steps\u00a0\u2014 2 and 4, and three odd: 1, 3 and 5.\n\ndef",
        "answer": "def even_odd(a, b):\n    if a % 2 == 0 and b % 2 == 0:\n        return \"YES\"\n    elif a % 2!= 0 and b % 2!= 0:\n        return \"YES\"\n    else:\n        return \"NO\"",
        "difficulty": "interview"
    },
    {
        "task_id": 1232,
        "prompt": "Complete the Python function given the prompt below:You are given two arrays A and B consisting of integers, sorted in non-decreasing order. Check whether it is possible to choose k numbers in array A and choose m numbers in array B so that any number chosen in the first array is strictly less than any number chosen in the second array.\n-----Input-----\nThe first line contains two integers n_{A}, n_{B} (1 \u2264 n_{A}, n_{B} \u2264 10^5), separated by a space \u2014 the sizes of arrays A and B, correspondingly.\nThe second line contains two integers k and m (1 \u2264 k \u2264 n_{A}, 1 \u2264 m \u2264 n_{B}), separated by a space.\nThe third line contains n_{A} numbers a_1, a_2,... a_{n}_{A} ( - 10^9 \u2264 a_1 \u2264 a_2 \u2264... \u2264 a_{n}_{A} \u2264 10^9), separated by spaces \u2014 elements of array A.\nThe fourth line contains n_{B} integers b_1, b_2,... b_{n}_{B} ( - 10^9 \u2264 b_1 \u2264 b_2 \u2264... \u2264 b_{n}_{B} \u2264 10^9), separated by spaces \u2014 elements of array B.\n-----Output-----\nPrint \"YES\" (without the quotes), if you can choose k numbers in array A and m numbers in array B so that any number chosen in array A was strictly less than any number chosen in array B. Otherwise, print \"NO\" (without the quotes).\n-----Examples-----\nInput\n3 3\n2 1\n1 2 3\n3 4 5\nOutput\nYES\nInput\n3 3\n3 3\n1 2 3\n3 4 5\nOutput\nNO\nInput\n5 2\n3 1\n1 1 1 1 1\n2 2\nOutput\nYES\n-----Note-----\nIn the first sample test you can, for example, choose numbers 1 and 2 from array A and number 3 from array B (1 < 3 and 2 < 3).\nIn the second sample test the only way to choose k elements in the first array and m elements in the second one is to choose all numbers in both arrays, but then not all the numbers chosen in A will be less than all the numbers chosen in B: $3 < 3$.\n\ndef",
        "answer": "def check(A, B, k, m):\n    i = 0\n    j = 0\n    while i < len(A) and j < len(B):\n        if A[i] < B[j]:\n            i += 1\n        elif A[i] > B[j]:\n            j += 1\n        else:\n            return False\n    return i == k and j == m",
        "difficulty": "interview"
    },
    {
        "task_id": 1233,
        "prompt": "Complete the Python function given the prompt below:Petya is a beginner programmer. He has already mastered the basics of the C++ language and moved on to learning algorithms. The first algorithm he encountered was insertion sort. Petya has already written the code that implements this algorithm and sorts the given integer zero-indexed array a of size n in the non-decreasing order. for (int i = 1; i < n; i = i + 1)\n{\n   int j = i; \n   while (j > 0 && a[j] < a[j - 1])\n   {\n      swap(a[j], a[j - 1]); // swap elements a[j] and a[j - 1]\n      j = j - 1;\n   }\n}\nPetya uses this algorithm only for sorting of arrays that are permutations of numbers from 0 to n - 1. He has already chosen the permutation he wants to sort but he first decided to swap some two of its elements. Petya wants to choose these elements in such a way that the number of times the sorting executes function swap, was minimum. Help Petya find out the number of ways in which he can make the swap and fulfill this requirement.\nIt is guaranteed that it's always possible to swap two elements of the input permutation in such a way that the number of swap function calls decreases.\n-----Input-----\nThe first line contains a single integer n (2 \u2264 n \u2264 5000) \u2014 the length of the permutation. The second line contains n different integers from 0 to n - 1, inclusive \u2014 the actual permutation.\n-----Output-----\nPrint two integers: the minimum number of times the swap function is executed and the number of such pairs (i, j) that swapping the elements of the input permutation with indexes i and j leads to the minimum number of the executions.\n-----Examples-----\nInput\n5\n4 0 3 1 2\nOutput\n3 2\nInput\n5\n1 2 3 4 0\nOutput\n3 4\n-----Note-----\nIn the first sample the appropriate pairs are (0, 3) and (0, 4). \nIn the second sample the appropriate pairs are (0, 4), (1, 4), (2, 4) and (3, 4).\n\ndef",
        "answer": "def swap(a, i, j):\n    a[i], a[j] = a[j], a[i]",
        "difficulty": "interview"
    },
    {
        "task_id": 1234,
        "prompt": "Complete the Python function given the prompt below:An array $b$ is called to be a subarray of $a$ if it forms a continuous subsequence of $a$, that is, if it is equal to $a_l$, $a_{l + 1}$, $\\ldots$, $a_r$ for some $l, r$.\nSuppose $m$ is some known constant. For any array, having $m$ or more elements, let's define it's beauty as the sum of $m$ largest elements of that array. For example:   For array $x = [4, 3, 1, 5, 2]$ and $m = 3$, the $3$ largest elements of $x$ are $5$, $4$ and $3$, so the beauty of $x$ is $5 + 4 + 3 = 12$.\n For array $x = [10, 10, 10]$ and $m = 2$, the beauty of $x$ is $10 + 10 = 20$.\nYou are given an array $a_1, a_2, \\ldots, a_n$, the value of the said constant $m$ and an integer $k$. Your need to split the array $a$ into exactly $k$ subarrays such that:\n  Each element from $a$ belongs to exactly one subarray.\n Each subarray has at least $m$ elements.\n The sum of all beauties of $k$ subarrays is maximum possible.\n-----Input-----\nThe first line contains three integers $n$, $m$ and $k$ ($2 \\le n \\le 2 \\cdot 10^5$, $1 \\le m$, $2 \\le k$, $m \\cdot k \\le n$)\u00a0\u2014 the number of elements in $a$, the constant $m$ in the definition of beauty and the number of subarrays to split to.\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($-10^9 \\le a_i \\le 10^9$).\n-----Output-----\nIn the first line, print the maximum possible sum of the beauties of the subarrays in the optimal partition.\nIn the second line, print $k-1$ integers $p_1, p_2, \\ldots, p_{k-1}$ ($1 \\le p_1 < p_2 < \\ldots < p_{k-1} < n$) representing the partition of the array, in which:\n All elements with indices from $1$ to $p_1$ belong to the first subarray.\n All elements with indices from $p_1 + 1$ to $p_2$ belong to the second subarray.\n $\\ldots$.\n All elements with indices from $p_{k-1} + 1$ to $n$ belong to the last, $k$-th subarray.\nIf there are several optimal partitions, print any of them.\n-----Examples-----\nInput\n9 2 3\n5 2 5 2 4 1 1 3 2\nOutput\n21\n3 5 \nInput\n6 1 4\n4 1 3 2 2 3\nOutput\n12\n1 3 5 \nInput\n2 1 2\n-1000000000 1000000000\nOutput\n0\n1 \n-----Note-----\nIn the first example, one of the optimal partitions is $[5, 2, 5]$, $[2, 4]$, $[1, 1, 3, 2]$.\n  The beauty of the subarray $[5, 2, 5]$ is $5 + 5 = 10$.  The beauty of the subarray $[2, 4]$ is $2 + 4 = 6$.  The beauty of the subarray $[1, 1, 3, 2]$ is $3 + 2 = 5$. \nThe sum of their beauties is $10 + 6 + 5 = 21$.\nIn the second example, one optimal partition is $[4]$, $[1, 3]$, $[2, 2]$, $[3]$.\n\ndef",
        "answer": "def maxBeauty(a, m, k):\n    n = len(a)\n    beauty = [0] * n\n    beauty[0] = a[0]\n    beauty[1] = max(a[0], a[1])\n    for i in range(2, n):\n        beauty[i] = max(beauty[i - 1], beauty[i - 2] + a[i])\n    beauty.sort(reverse=True)\n    return sum(beauty[:k])",
        "difficulty": "interview"
    },
    {
        "task_id": 1235,
        "prompt": "Complete the Python function given the prompt below:You are given an array $A$, consisting of $n$ positive integers $a_1, a_2, \\dots, a_n$, and an array $B$, consisting of $m$ positive integers $b_1, b_2, \\dots, b_m$. \nChoose some element $a$ of $A$ and some element $b$ of $B$ such that $a+b$ doesn't belong to $A$ and doesn't belong to $B$. \nFor example, if $A = [2, 1, 7]$ and $B = [1, 3, 4]$, we can choose $1$ from $A$ and $4$ from $B$, as number $5 = 1 + 4$ doesn't belong to $A$ and doesn't belong to $B$. However, we can't choose $2$ from $A$ and $1$ from $B$, as $3 = 2 + 1$ belongs to $B$.\nIt can be shown that such a pair exists. If there are multiple answers, print any.\nChoose and print any such two numbers.\n-----Input-----\nThe first line contains one integer $n$ ($1\\le n \\le 100$)\u00a0\u2014 the number of elements of $A$.\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 200$)\u00a0\u2014 the elements of $A$.\nThe third line contains one integer $m$ ($1\\le m \\le 100$)\u00a0\u2014 the number of elements of $B$.\nThe fourth line contains $m$ different integers $b_1, b_2, \\dots, b_m$ ($1 \\le b_i \\le 200$)\u00a0\u2014 the elements of $B$.\nIt can be shown that the answer always exists.\n-----Output-----\nOutput two numbers $a$ and $b$ such that $a$ belongs to $A$, $b$ belongs to $B$, but $a+b$ doesn't belong to nor $A$ neither $B$.\nIf there are multiple answers, print any.\n-----Examples-----\nInput\n1\n20\n2\n10 20\nOutput\n20 20\nInput\n3\n3 2 2\n5\n1 5 7 7 9\nOutput\n3 1\nInput\n4\n1 3 5 7\n4\n7 5 3 1\nOutput\n1 1\n-----Note-----\nIn the first example, we can choose $20$ from array $[20]$ and $20$ from array $[10, 20]$. Number $40 = 20 + 20$ doesn't belong to any of those arrays. However, it is possible to choose $10$ from the second array too.\nIn the second example, we can choose $3$ from array $[3, 2, 2]$ and $1$ from array $[1, 5, 7, 7, 9]$. Number $4 = 3 + 1$ doesn't belong to any of those arrays.\nIn the third example, we can choose $1$ from array $[1, 3, 5, 7]$ and $1$ from array $[7, 5, 3, 1]$. Number $2 = 1 + 1$ doesn't belong to any of those arrays.\n\ndef",
        "answer": "def find_pair(A, B):\n    A.sort()\n    B.sort()\n    for i in range(len(A)):\n        for j in range(len(B)):\n            if A[i] + B[j] not in A and B[j] + A[i] not in B:\n                return A[i], B[j]",
        "difficulty": "interview"
    },
    {
        "task_id": 1236,
        "prompt": "Complete the Python function given the prompt below:There are n cities in Westeros. The i-th city is inhabited by a_{i} people. Daenerys and Stannis play the following game: in one single move, a player chooses a certain town and burns it to the ground. Thus all its residents, sadly, die. Stannis starts the game. The game ends when Westeros has exactly k cities left.\nThe prophecy says that if the total number of surviving residents is even, then Daenerys wins: Stannis gets beheaded, and Daenerys rises on the Iron Throne. If the total number of surviving residents is odd, Stannis wins and everything goes in the completely opposite way.\nLord Petyr Baelish wants to know which candidates to the throne he should support, and therefore he wonders, which one of them has a winning strategy. Answer to this question of Lord Baelish and maybe you will become the next Lord of Harrenholl.\n-----Input-----\nThe first line contains two positive space-separated integers, n and k (1 \u2264 k \u2264 n \u2264 2\u00b710^5) \u2014 the initial number of cities in Westeros and the number of cities at which the game ends. \nThe second line contains n space-separated positive integers a_{i} (1 \u2264 a_{i} \u2264 10^6), which represent the population of each city in Westeros.\n-----Output-----\nPrint string \"Daenerys\" (without the quotes), if Daenerys wins and \"Stannis\" (without the quotes), if Stannis wins.\n-----Examples-----\nInput\n3 1\n1 2 1\nOutput\nStannis\nInput\n3 1\n2 2 1\nOutput\nDaenerys\nInput\n6 3\n5 20 12 7 14 101\nOutput\nStannis\n-----Note-----\nIn the first sample Stannis will use his move to burn a city with two people and Daenerys will be forced to burn a city with one resident. The only survivor city will have one resident left, that is, the total sum is odd, and thus Stannis wins.\nIn the second sample, if Stannis burns a city with two people, Daenerys burns the city with one resident, or vice versa. In any case, the last remaining city will be inhabited by two people, that is, the total sum is even, and hence Daenerys wins.\n\ndef",
        "answer": "def westeros(n, k, a):\n    return \"Stannis\" if sum(a) % 2 == k % 2 else \"Daenerys\"",
        "difficulty": "interview"
    },
    {
        "task_id": 1237,
        "prompt": "Complete the Python function given the prompt below:Saitama accidentally destroyed a hotel again. To repay the hotel company, Genos has volunteered to operate an elevator in one of its other hotels. The elevator is special \u2014 it starts on the top floor, can only move down, and has infinite capacity. Floors are numbered from 0 to s and elevator initially starts on floor s at time 0.\nThe elevator takes exactly 1 second to move down exactly 1 floor and negligible time to pick up passengers. Genos is given a list detailing when and on which floor passengers arrive. Please determine how long in seconds it will take Genos to bring all passengers to floor 0.\n-----Input-----\nThe first line of input contains two integers n and s (1 \u2264 n \u2264 100, 1 \u2264 s \u2264 1000)\u00a0\u2014 the number of passengers and the number of the top floor respectively.\nThe next n lines each contain two space-separated integers f_{i} and t_{i} (1 \u2264 f_{i} \u2264 s, 1 \u2264 t_{i} \u2264 1000)\u00a0\u2014 the floor and the time of arrival in seconds for the passenger number i.\n-----Output-----\nPrint a single integer\u00a0\u2014 the minimum amount of time in seconds needed to bring all the passengers to floor 0.\n-----Examples-----\nInput\n3 7\n2 1\n3 8\n5 2\nOutput\n11\nInput\n5 10\n2 77\n3 33\n8 21\n9 12\n10 64\nOutput\n79\n-----Note-----\nIn the first sample, it takes at least 11 seconds to bring all passengers to floor 0. Here is how this could be done:\n1. Move to floor 5: takes 2 seconds.\n2. Pick up passenger 3.\n3. Move to floor 3: takes 2 seconds.\n4. Wait for passenger 2 to arrive: takes 4 seconds.\n5. Pick up passenger 2.\n6. Go to floor 2: takes 1 second.\n7. Pick up passenger 1.\n8. Go to floor 0: takes 2 seconds.\nThis gives a total of 2 + 2 + 4 + 1 + 2 = 11 seconds.\n\ndef",
        "answer": "def elevator():\n    pass",
        "difficulty": "interview"
    },
    {
        "task_id": 1238,
        "prompt": "Complete the Python function given the prompt below:There was an electronic store heist last night.\nAll keyboards which were in the store yesterday were numbered in ascending order from some integer number $x$. For example, if $x = 4$ and there were $3$ keyboards in the store, then the devices had indices $4$, $5$ and $6$, and if $x = 10$ and there were $7$ of them then the keyboards had indices $10$, $11$, $12$, $13$, $14$, $15$ and $16$.\nAfter the heist, only $n$ keyboards remain, and they have indices $a_1, a_2, \\dots, a_n$. Calculate the minimum possible number of keyboards that have been stolen. The staff remember neither $x$ nor the number of keyboards in the store before the heist.\n-----Input-----\nThe first line contains single integer $n$ $(1 \\le n \\le 1\\,000)$\u00a0\u2014 the number of  keyboards in the store that remained after the heist.\nThe second line contains $n$ distinct integers $a_1, a_2, \\dots, a_n$ $(1 \\le a_i \\le 10^{9})$\u00a0\u2014 the indices of the remaining keyboards. The integers $a_i$ are given in arbitrary order and are pairwise distinct.\n-----Output-----\nPrint the minimum possible number of keyboards that have been stolen if the staff remember neither $x$ nor the number of keyboards in the store before the heist.\n-----Examples-----\nInput\n4\n10 13 12 8\nOutput\n2\nInput\n5\n7 5 6 4 8\nOutput\n0\n-----Note-----\nIn the first example, if $x=8$ then minimum number of stolen keyboards is equal to $2$. The keyboards with indices $9$ and $11$ were stolen during the heist.\nIn the second example, if $x=4$ then nothing was stolen during the heist.\n\ndef",
        "answer": "def heist(n, a):\n    a.sort()\n    return min(a[0], a[1])",
        "difficulty": "interview"
    },
    {
        "task_id": 1239,
        "prompt": "Complete the Python function given the prompt below:There are n cities situated along the main road of Berland. Cities are represented by their coordinates \u2014 integer numbers a_1, a_2,..., a_{n}. All coordinates are pairwise distinct.\nIt is possible to get from one city to another only by bus. But all buses and roads are very old, so the Minister of Transport decided to build a new bus route. The Minister doesn't want to spend large amounts of money \u2014 he wants to choose two cities in such a way that the distance between them is minimal possible. The distance between two cities is equal to the absolute value of the difference between their coordinates.\nIt is possible that there are multiple pairs of cities with minimal possible distance, so the Minister wants to know the quantity of such pairs. \nYour task is to write a program that will calculate the minimal possible distance between two pairs of cities and the quantity of pairs which have this distance.\n-----Input-----\nThe first line contains one integer number n (2 \u2264 n \u2264 2\u00b710^5).\nThe second line contains n integer numbers a_1, a_2,..., a_{n} ( - 10^9 \u2264 a_{i} \u2264 10^9). All numbers a_{i} are pairwise distinct.\n-----Output-----\nPrint two integer numbers \u2014 the minimal distance and the quantity of pairs with this distance.\n-----Examples-----\nInput\n4\n6 -3 0 4\nOutput\n2 1\nInput\n3\n-2 0 2\nOutput\n2 2\n-----Note-----\nIn the first example the distance between the first city and the fourth city is |4 - 6| = 2, and it is the only pair with this distance.\n\ndef",
        "answer": "def min_distance(n, a):\n    a.sort()\n    min_dist = a[1] - a[0]\n    count = 1\n    for i in range(1, n):\n        if a[i] - a[i - 1] == min_dist:\n            count += 1\n        elif a[i] - a[i - 1] < min_dist:\n            min_dist = a[i] - a[i - 1]\n            count = 1\n    return min_dist, count",
        "difficulty": "interview"
    },
    {
        "task_id": 1240,
        "prompt": "Complete the Python function given the prompt below:Very soon there will be a parade of victory over alien invaders in Berland. Unfortunately, all soldiers died in the war and now the army consists of entirely new recruits, many of whom do not even know from which leg they should begin to march. The civilian population also poorly understands from which leg recruits begin to march, so it is only important how many soldiers march in step.\nThere will be n columns participating in the parade, the i-th column consists of l_{i} soldiers, who start to march from left leg, and r_{i} soldiers, who start to march from right leg.\nThe beauty of the parade is calculated by the following formula: if L is the total number of soldiers on the parade who start to march from the left leg, and R is the total number of soldiers on the parade who start to march from the right leg, so the beauty will equal |L - R|.\nNo more than once you can choose one column and tell all the soldiers in this column to switch starting leg, i.e. everyone in this columns who starts the march from left leg will now start it from right leg, and vice versa. Formally, you can pick no more than one index i and swap values l_{i} and r_{i}. \nFind the index of the column, such that switching the starting leg for soldiers in it will maximize the the beauty of the parade, or determine, that no such operation can increase the current beauty.\n-----Input-----\nThe first line contains single integer n (1 \u2264 n \u2264 10^5)\u00a0\u2014 the number of columns. \nThe next n lines contain the pairs of integers l_{i} and r_{i} (1 \u2264 l_{i}, r_{i} \u2264 500)\u00a0\u2014 the number of soldiers in the i-th column which start to march from the left or the right leg respectively.\n-----Output-----\nPrint single integer k\u00a0\u2014 the number of the column in which soldiers need to change the leg from which they start to march, or 0 if the maximum beauty is already reached.\nConsider that columns are numbered from 1 to n in the order they are given in the input data.\nIf there are several answers, print any of them.\n-----Examples-----\nInput\n3\n5 6\n8 9\n10 3\nOutput\n3\nInput\n2\n6 5\n5 6\nOutput\n1\nInput\n6\n5 9\n1 3\n4 8\n4 5\n23 54\n12 32\nOutput\n0\n-----Note-----\nIn the first example if you don't give the order to change the leg, the number of soldiers, who start to march from the left leg, would equal 5 + 8 + 10 = 23, and from the right leg\u00a0\u2014 6 + 9 + 3 = 18. In this case the beauty of the parade will equal |23 - 18| = 5.\nIf you give the order to change the leg to the third column, so the number of soldiers, who march from the left leg, will equal 5 + 8 + 3 = 16, and who march from the right leg\u00a0\u2014 6 + 9 + 10 = 25. In this case the beauty equals |16 - 25| = 9.\nIt is impossible to reach greater beauty by giving another orders. Thus, the maximum beauty that can be achieved is 9.\n\ndef",
        "answer": "def max_beauty(n, lr):\n    l = [0] * n\n    r = [0] * n\n    for i in range(n):\n        l[i] = lr[i][0]\n        r[i] = lr[i][1]\n    l.sort()\n    r.sort()\n    return abs(sum(l) - sum(r))",
        "difficulty": "interview"
    },
    {
        "task_id": 1241,
        "prompt": "Complete the Python function given the prompt below:You are given an array a with n elements. Each element of a is either 0 or 1.\nLet's denote the length of the longest subsegment of consecutive elements in a, consisting of only numbers one, as f(a). You can change no more than k zeroes to ones to maximize f(a).\n-----Input-----\nThe first line contains two integers n and k (1 \u2264 n \u2264 3\u00b710^5, 0 \u2264 k \u2264 n) \u2014 the number of elements in a and the parameter k.\nThe second line contains n integers a_{i} (0 \u2264 a_{i} \u2264 1) \u2014 the elements of a.\n-----Output-----\nOn the first line print a non-negative integer z \u2014 the maximal value of f(a) after no more than k changes of zeroes to ones.\nOn the second line print n integers a_{j} \u2014 the elements of the array a after the changes.\nIf there are multiple answers, you can print any one of them.\n-----Examples-----\nInput\n7 1\n1 0 0 1 1 0 1\nOutput\n4\n1 0 0 1 1 1 1\nInput\n10 2\n1 0 0 1 0 1 0 1 0 1\nOutput\n5\n1 0 0 1 1 1 1 1 0 1\n\ndef",
        "answer": "def f(a, k):\n    count = 0\n    for i in range(len(a)):\n        if a[i] == 0:\n            count += 1\n        else:\n            count = 0\n        if count > k:\n            return i\n    return len(a)",
        "difficulty": "interview"
    },
    {
        "task_id": 1242,
        "prompt": "Complete the Python function given the prompt below:IA has so many colorful magnets on her fridge! Exactly one letter is written on each magnet, 'a' or 'b'. She loves to play with them, placing all magnets in a row. However, the girl is quickly bored and usually thinks how to make her entertainment more interesting.\nToday, when IA looked at the fridge, she noticed that the word formed by magnets is really messy. \"It would look much better when I'll swap some of them!\"\u00a0\u2014 thought the girl\u00a0\u2014 \"but how to do it?\". After a while, she got an idea. IA will look at all prefixes with lengths from $1$ to the length of the word and for each prefix she will either reverse this prefix or leave it as it is. She will consider the prefixes in the fixed order: from the shortest to the largest. She wants to get the lexicographically smallest possible word after she considers all prefixes. Can you help her, telling which prefixes should be chosen for reversing?\nA string $a$ is lexicographically smaller than a string $b$ if and only if one of the following holds: $a$ is a prefix of $b$, but $a \\ne b$; in the first position where $a$ and $b$ differ, the string $a$ has a letter that appears earlier in the alphabet than the corresponding letter in $b$.\n-----Input-----\nThe first and the only line contains a string $s$ ($1 \\le |s| \\le 1000$), describing the initial string formed by magnets. The string $s$ consists only of characters 'a' and 'b'.\n-----Output-----\nOutput exactly $|s|$ integers. If IA should reverse the $i$-th prefix (that is, the substring from $1$ to $i$), the $i$-th integer should be equal to $1$, and it should be equal to $0$ otherwise.\nIf there are multiple possible sequences leading to the optimal answer, print any of them.\n-----Examples-----\nInput\nbbab\nOutput\n0 1 1 0\nInput\naaaaa\nOutput\n1 0 0 0 1\n-----Note-----\nIn the first example, IA can reverse the second and the third prefix and get a string \"abbb\". She cannot get better result, since it is also lexicographically smallest string obtainable by permuting characters of the initial string.\nIn the second example, she can reverse any subset of prefixes\u00a0\u2014 all letters are 'a'.\n\ndef",
        "answer": "def prefixes(s):\n    n = len(s)\n    res = [0] * n\n    for i in range(1, n):\n        res[i] = 1 if s[:i] < s[i:] else 0\n    return res",
        "difficulty": "interview"
    },
    {
        "task_id": 1243,
        "prompt": "Complete the Python function given the prompt below:Petya has k matches, placed in n matchboxes lying in a line from left to right. We know that k is divisible by n. Petya wants all boxes to have the same number of matches inside. For that, he can move a match from its box to the adjacent one in one move. How many such moves does he need to achieve the desired configuration?\n-----Input-----\nThe first line contains integer n (1 \u2264 n \u2264 50000). The second line contains n non-negative numbers that do not exceed 10^9, the i-th written number is the number of matches in the i-th matchbox. It is guaranteed that the total number of matches is divisible by n.\n-----Output-----\nPrint the total minimum number of moves.\n-----Examples-----\nInput\n6\n1 6 2 5 3 7\nOutput\n12\n\ndef",
        "answer": "def moves(n, k):\n    return n * (n - 1) // 2",
        "difficulty": "interview"
    },
    {
        "task_id": 1244,
        "prompt": "Complete the Python function given the prompt below:Yaroslav has an array that consists of n integers. In one second Yaroslav can swap two neighboring array elements. Now Yaroslav is wondering if he can obtain an array where any two neighboring elements would be distinct in a finite time.\nHelp Yaroslav.\n-----Input-----\nThe first line contains integer n (1 \u2264 n \u2264 100) \u2014 the number of elements in the array. The second line contains n integers a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 1000) \u2014 the array elements.\n-----Output-----\nIn the single line print \"YES\" (without the quotes) if Yaroslav can obtain the array he needs, and \"NO\" (without the quotes) otherwise.\n-----Examples-----\nInput\n1\n1\nOutput\nYES\nInput\n3\n1 1 2\nOutput\nYES\nInput\n4\n7 7 7 7\nOutput\nNO\n-----Note-----\nIn the first sample the initial array fits well.\nIn the second sample Yaroslav can get array: 1, 2, 1. He can swap the last and the second last elements to obtain it.\nIn the third sample Yarosav can't get the array he needs.\n\ndef",
        "answer": "def swap(arr, i, j):\n    arr[i], arr[j] = arr[j], arr[i]",
        "difficulty": "interview"
    },
    {
        "task_id": 1245,
        "prompt": "Complete the Python function given the prompt below:Notice that the memory limit is non-standard.\nRecently Arthur and Sasha have studied correct bracket sequences. Arthur understood this topic perfectly and become so amazed about correct bracket sequences, so he even got himself a favorite correct bracket sequence of length 2n. Unlike Arthur, Sasha understood the topic very badly, and broke Arthur's favorite correct bracket sequence just to spite him.\nAll Arthur remembers about his favorite sequence is for each opening parenthesis ('(') the approximate distance to the corresponding closing one (')'). For the i-th opening bracket he remembers the segment [l_{i}, r_{i}], containing the distance to the corresponding closing bracket.\nFormally speaking, for the i-th opening bracket (in order from left to right) we know that the difference of its position and the position of the corresponding closing bracket belongs to the segment [l_{i}, r_{i}].\nHelp Arthur restore his favorite correct bracket sequence!\n-----Input-----\nThe first line contains integer n (1 \u2264 n \u2264 600), the number of opening brackets in Arthur's favorite correct bracket sequence. \nNext n lines contain numbers l_{i} and r_{i} (1 \u2264 l_{i} \u2264 r_{i} < 2n), representing the segment where lies the distance from the i-th opening bracket and the corresponding closing one. \nThe descriptions of the segments are given in the order in which the opening brackets occur in Arthur's favorite sequence if we list them from left to right.\n-----Output-----\nIf it is possible to restore the correct bracket sequence by the given data, print any possible choice.\nIf Arthur got something wrong, and there are no sequences corresponding to the given information, print a single line \"IMPOSSIBLE\" (without the quotes).\n-----Examples-----\nInput\n4\n1 1\n1 1\n1 1\n1 1\nOutput\n()()()()\nInput\n3\n5 5\n3 3\n1 1\nOutput\n((()))\nInput\n3\n5 5\n3 3\n2 2\nOutput\nIMPOSSIBLE\nInput\n3\n2 3\n1 4\n1 4\nOutput\n(())()\n\ndef",
        "answer": "def bracket_sequence(n):\n    if n == 1:\n        return '()'\n    else:\n        return '(' + bracket_sequence(n - 1) + ')' + '(' + bracket_sequence(n - 1) + ')'",
        "difficulty": "interview"
    },
    {
        "task_id": 1246,
        "prompt": "Complete the Python function given the prompt below:Petya has recently learned data structure named \"Binary heap\".\nThe heap he is now operating with allows the following operations:   put the given number into the heap;  get the value of the minimum element in the heap;  extract the minimum element from the heap; \nThus, at any moment of time the heap contains several integers (possibly none), some of them might be equal.\nIn order to better learn this data structure Petya took an empty heap and applied some operations above to it. Also, he carefully wrote down all the operations and their results to his event log, following the format:   insert x\u00a0\u2014 put the element with value x in the heap;  getMin x\u00a0\u2014 the value of the minimum element contained in the heap was equal to x;  removeMin\u00a0\u2014 the minimum element was extracted from the heap (only one instance, if there were many). \nAll the operations were correct, i.e. there was at least one element in the heap each time getMin or removeMin operations were applied.\nWhile Petya was away for a lunch, his little brother Vova came to the room, took away some of the pages from Petya's log and used them to make paper boats.\nNow Vova is worried, if he made Petya's sequence of operations inconsistent. For example, if one apply operations one-by-one in the order they are written in the event log, results of getMin operations might differ from the results recorded by Petya, and some of getMin or removeMin operations may be incorrect, as the heap is empty at the moment they are applied.\nNow Vova wants to add some new operation records to the event log in order to make the resulting sequence of operations correct. That is, the result of each getMin operation is equal to the result in the record, and the heap is non-empty when getMin ad removeMin are applied. Vova wants to complete this as fast as possible, as the Petya may get back at any moment. He asks you to add the least possible number of operation records to the current log. Note that arbitrary number of operations may be added at the beginning, between any two other operations, or at the end of the log.\n-----Input-----\nThe first line of the input contains the only integer n (1 \u2264 n \u2264 100 000)\u00a0\u2014 the number of the records left in Petya's journal.\nEach of the following n lines describe the records in the current log in the order they are applied. Format described in the statement is used. All numbers in the input are integers not exceeding 10^9 by their absolute value.\n-----Output-----\nThe first line of the output should contain a single integer m\u00a0\u2014 the minimum possible number of records in the modified sequence of operations.\nNext m lines should contain the corrected sequence of records following the format of the input (described in the statement), one per line and in the order they are applied. All the numbers in the output should be integers not exceeding 10^9 by their absolute value.\nNote that the input sequence of operations must be the subsequence of the output sequence.\nIt's guaranteed that there exists the correct answer consisting of no more than 1 000 000 operations.\n-----Examples-----\nInput\n2\ninsert 3\ngetMin 4\nOutput\n4\ninsert 3\nremoveMin\ninsert 4\ngetMin 4\nInput\n4\ninsert 1\ninsert 1\nremoveMin\ngetMin 2\nOutput\n6\ninsert 1\ninsert 1\nremoveMin\nremoveMin\ninsert 2\ngetMin 2\n-----Note-----\nIn the first sample, after number 3 is inserted into the heap, the minimum number is 3. To make the result of the first getMin equal to 4 one should firstly remove number 3 from the heap and then add number 4 into the heap.\nIn the second sample case number 1 is inserted two times, so should be similarly removed twice.\n\ndef",
        "answer": "def heap_sort(arr):\n    heap = []\n    for i in arr:\n        heapq.heappush(heap, i)\n    return [heapq.heappop(heap) for i in range(len(heap))]",
        "difficulty": "interview"
    },
    {
        "task_id": 1247,
        "prompt": "Complete the Python function given the prompt below:The Little Girl loves problems on games very much. Here's one of them.\nTwo players have got a string s, consisting of lowercase English letters. They play a game that is described by the following rules:  The players move in turns; In one move the player can remove an arbitrary letter from string s.  If the player before his turn can reorder the letters in string s so as to get a palindrome, this player wins. A palindrome is a string that reads the same both ways (from left to right, and vice versa). For example, string \"abba\" is a palindrome and string \"abc\" isn't. \nDetermine which player will win, provided that both sides play optimally well \u2014 the one who moves first or the one who moves second.\n-----Input-----\nThe input contains a single line, containing string s (1 \u2264 |s|  \u2264  10^3). String s consists of lowercase English letters.\n-----Output-----\nIn a single line print word \"First\" if the first player wins (provided that both players play optimally well). Otherwise, print word \"Second\". Print the words without the quotes.\n-----Examples-----\nInput\naba\nOutput\nFirst\nInput\nabca\nOutput\nSecond\n\ndef",
        "answer": "def game(s):\n    return \"First\" if s == s[::-1] else \"Second\"",
        "difficulty": "interview"
    },
    {
        "task_id": 1248,
        "prompt": "Complete the Python function given the prompt below:Today Patrick waits for a visit from his friend Spongebob. To prepare for the visit, Patrick needs to buy some goodies in two stores located near his house. There is a d_1 meter long road between his house and the first shop and a d_2 meter long road between his house and the second shop. Also, there is a road of length d_3 directly connecting these two shops to each other. Help Patrick calculate the minimum distance that he needs to walk in order to go to both shops and return to his house. [Image] \nPatrick always starts at his house. He should visit both shops moving only along the three existing roads and return back to his house. He doesn't mind visiting the same shop or passing the same road multiple times. The only goal is to minimize the total distance traveled.\n-----Input-----\nThe first line of the input contains three integers d_1, d_2, d_3 (1 \u2264 d_1, d_2, d_3 \u2264 10^8)\u00a0\u2014 the lengths of the paths.   d_1 is the length of the path connecting Patrick's house and the first shop;  d_2 is the length of the path connecting Patrick's house and the second shop;  d_3 is the length of the path connecting both shops. \n-----Output-----\nPrint the minimum distance that Patrick will have to walk in order to visit both shops and return to his house.\n-----Examples-----\nInput\n10 20 30\nOutput\n60\nInput\n1 1 5\nOutput\n4\n-----Note-----\nThe first sample is shown on the picture in the problem statement. One of the optimal routes is: house $\\rightarrow$ first shop $\\rightarrow$ second shop $\\rightarrow$ house.\nIn the second sample one of the optimal routes is: house $\\rightarrow$ first shop $\\rightarrow$ house $\\rightarrow$ second shop $\\rightarrow$ house.\n\ndef",
        "answer": "def patrick(d1, d2, d3):\n    return min(d1+d2, d1+d3, d2+d3)",
        "difficulty": "interview"
    },
    {
        "task_id": 1249,
        "prompt": "Complete the Python function given the prompt below:At the first holiday in spring, the town Shortriver traditionally conducts a flower festival. Townsfolk wear traditional wreaths during these festivals. Each wreath contains exactly $k$ flowers.\nThe work material for the wreaths for all $n$ citizens of Shortriver is cut from the longest flowered liana that grew in the town that year. Liana is a sequence $a_1$, $a_2$,..., $a_m$, where $a_i$ is an integer that denotes the type of flower at the position $i$. This year the liana is very long ($m \\ge n \\cdot k$), and that means every citizen will get a wreath.\nVery soon the liana will be inserted into a special cutting machine in order to make work material for wreaths. The machine works in a simple manner: it cuts $k$ flowers from the beginning of the liana, then another $k$ flowers and so on. Each such piece of $k$ flowers is called a workpiece. The machine works until there are less than $k$ flowers on the liana.\nDiana has found a weaving schematic for the most beautiful wreath imaginable. In order to weave it, $k$ flowers must contain flowers of types $b_1$, $b_2$,..., $b_s$, while other can be of any type. If a type appears in this sequence several times, there should be at least that many flowers of that type as the number of occurrences of this flower in the sequence. The order of the flowers in a workpiece does not matter.\nDiana has a chance to remove some flowers from the liana before it is inserted into the cutting machine. She can remove flowers from any part of the liana without breaking liana into pieces. If Diana removes too many flowers, it may happen so that some of the citizens do not get a wreath. Could some flowers be removed from the liana so that at least one workpiece would conform to the schematic and machine would still be able to create at least $n$ workpieces?\n-----Input-----\nThe first line contains four integers $m$, $k$, $n$ and $s$ ($1 \\le n, k, m \\le 5 \\cdot 10^5$, $k \\cdot n \\le m$, $1 \\le s \\le k$): the number of flowers on the liana, the number of flowers in one wreath, the amount of citizens and the length of Diana's flower sequence respectively.\nThe second line contains $m$ integers $a_1$, $a_2$,..., $a_m$ ($1 \\le a_i \\le 5 \\cdot 10^5$) \u00a0\u2014 types of flowers on the liana.\nThe third line contains $s$ integers $b_1$, $b_2$,..., $b_s$ ($1 \\le b_i \\le 5 \\cdot 10^5$) \u00a0\u2014 the sequence in Diana's schematic.\n-----Output-----\nIf it's impossible to remove some of the flowers so that there would be at least $n$ workpieces and at least one of them fullfills Diana's schematic requirements, output $-1$.\nOtherwise in the first line output one integer $d$ \u00a0\u2014 the number of flowers to be removed by Diana.\nIn the next line output $d$ different integers \u00a0\u2014 the positions of the flowers to be removed.\nIf there are multiple answers, print any.\n-----Examples-----\nInput\n7 3 2 2\n1 2 3 3 2 1 2\n2 2\nOutput\n1\n4 \nInput\n13 4 3 3\n3 2 6 4 1 4 4 7 1 3 3 2 4\n4 3 4\nOutput\n-1\nInput\n13 4 1 3\n3 2 6 4 1 4 4 7 1 3 3 2 4\n4 3 4\nOutput\n9\n1 2 3 4 5 9 11 12 13\n-----Note-----\nIn the first example, if you don't remove any flowers, the machine would put out two workpieces with flower types $[1, 2, 3]$ and $[3, 2, 1]$. Those workpieces don't fit Diana's schematic. But if you remove flower on $4$-th place, the machine would output workpieces $[1, 2, 3]$ and $[2, 1, 2]$. The second workpiece fits Diana's schematic.\nIn the second example there is no way to remove flowers so that every citizen gets a wreath and Diana gets a workpiece that fits here schematic.\nIn the third example Diana is the only citizen of the town and that means she can, for example, just remove all flowers except the ones she needs.\n\ndef",
        "answer": "def wreath(liana, wreath, n):\n    k = len(wreath)\n    if k * n > len(liana):\n        return -1\n    else:\n        return k * n",
        "difficulty": "interview"
    },
    {
        "task_id": 1250,
        "prompt": "Complete the Python function given the prompt below:Little boy Valera studies an algorithm of sorting an integer array. After studying the theory, he went on to the practical tasks. As a result, he wrote a program that sorts an array of n integers a_1, a_2,..., a_{n} in the non-decreasing order. The pseudocode of the program, written by Valera, is given below. The input of the program gets number n and array a.\nloop integer variable i from 1 to n - 1\n\u00a0\u00a0\u00a0\u00a0loop integer variable j from i to n - 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (a_{j} > a_{j} + 1), then swap the values of elements a_{j} and a_{j} + 1\nBut Valera could have made a mistake, because he hasn't yet fully learned the sorting algorithm. If Valera made a mistake in his program, you need to give a counter-example that makes his program work improperly (that is, the example that makes the program sort the array not in the non-decreasing order). If such example for the given value of n doesn't exist, print -1.\n-----Input-----\nYou've got a single integer n (1 \u2264 n \u2264 50) \u2014 the size of the sorted array.\n-----Output-----\nPrint n space-separated integers a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 100) \u2014 the counter-example, for which Valera's algorithm won't work correctly. If the counter-example that meets the described conditions is impossible to give, print -1.\nIf there are several counter-examples, consisting of n numbers, you are allowed to print any of them.\n-----Examples-----\nInput\n1\nOutput\n-1\n\ndef",
        "answer": "def sort_array(n):\n    a = []\n    for i in range(1, n + 1):\n        a.append(i)\n    for i in range(n - 1):\n        for j in range(n - i - 1):\n            if a[j] > a[j + 1]:\n                a[j], a[j + 1] = a[j + 1], a[j]\n    return a",
        "difficulty": "interview"
    },
    {
        "task_id": 1251,
        "prompt": "Complete the Python function given the prompt below:Bizon the Champion isn't just attentive, he also is very hardworking.\nBizon the Champion decided to paint his old fence his favorite color, orange. The fence is represented as n vertical planks, put in a row. Adjacent planks have no gap between them. The planks are numbered from the left to the right starting from one, the i-th plank has the width of 1 meter and the height of a_{i} meters.\nBizon the Champion bought a brush in the shop, the brush's width is 1 meter. He can make vertical and horizontal strokes with the brush. During a stroke the brush's full surface must touch the fence at all the time (see the samples for the better understanding). What minimum number of strokes should Bizon the Champion do to fully paint the fence? Note that you are allowed to paint the same area of the fence multiple times.\n-----Input-----\nThe first line contains integer n (1 \u2264 n \u2264 5000) \u2014 the number of fence planks. The second line contains n space-separated integers a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 10^9).\n-----Output-----\nPrint a single integer \u2014 the minimum number of strokes needed to paint the whole fence.\n-----Examples-----\nInput\n5\n2 2 1 2 1\nOutput\n3\nInput\n2\n2 2\nOutput\n2\nInput\n1\n5\nOutput\n1\n-----Note-----\nIn the first sample you need to paint the fence in three strokes with the brush: the first stroke goes on height 1 horizontally along all the planks. The second stroke goes on height 2 horizontally and paints the first and second planks and the third stroke (it can be horizontal and vertical) finishes painting the fourth plank.\nIn the second sample you can paint the fence with two strokes, either two horizontal or two vertical strokes.\nIn the third sample there is only one plank that can be painted using a single vertical stroke.\n\ndef",
        "answer": "def paint_fence(n, a):\n    a.sort()\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n    a.append(0)\n",
        "difficulty": "interview"
    },
    {
        "task_id": 1252,
        "prompt": "Complete the Python function given the prompt below:Recently Irina arrived to one of the most famous cities of Berland\u00a0\u2014 the Berlatov city. There are n showplaces in the city, numbered from 1 to n, and some of them are connected by one-directional roads. The roads in Berlatov are designed in a way such that there are no cyclic routes between showplaces.\nInitially Irina stands at the showplace 1, and the endpoint of her journey is the showplace n. Naturally, Irina wants to visit as much showplaces as she can during her journey. However, Irina's stay in Berlatov is limited and she can't be there for more than T time units.\nHelp Irina determine how many showplaces she may visit during her journey from showplace 1 to showplace n within a time not exceeding T. It is guaranteed that there is at least one route from showplace 1 to showplace n such that Irina will spend no more than T time units passing it.\n-----Input-----\nThe first line of the input contains three integers n, m and T (2 \u2264 n \u2264 5000,  1 \u2264 m \u2264 5000,  1 \u2264 T \u2264 10^9)\u00a0\u2014 the number of showplaces, the number of roads between them and the time of Irina's stay in Berlatov respectively.\nThe next m lines describes roads in Berlatov. i-th of them contains 3 integers u_{i}, v_{i}, t_{i} (1 \u2264 u_{i}, v_{i} \u2264 n, u_{i} \u2260 v_{i}, 1 \u2264 t_{i} \u2264 10^9), meaning that there is a road starting from showplace u_{i} and leading to showplace v_{i}, and Irina spends t_{i} time units to pass it. It is guaranteed that the roads do not form cyclic routes.\nIt is guaranteed, that there is at most one road between each pair of showplaces.\n-----Output-----\nPrint the single integer k (2 \u2264 k \u2264 n)\u00a0\u2014 the maximum number of showplaces that Irina can visit during her journey from showplace 1 to showplace n within time not exceeding T, in the first line.\nPrint k distinct integers in the second line\u00a0\u2014 indices of showplaces that Irina will visit on her route, in the order of encountering them.\nIf there are multiple answers, print any of them.\n-----Examples-----\nInput\n4 3 13\n1 2 5\n2 3 7\n2 4 8\nOutput\n3\n1 2 4 \nInput\n6 6 7\n1 2 2\n1 3 3\n3 6 3\n2 4 2\n4 6 2\n6 5 1\nOutput\n4\n1 2 4 6 \nInput\n5 5 6\n1 3 3\n3 5 3\n1 2 2\n2 4 3\n4 5 2\nOutput\n3\n1 3 5\n\ndef",
        "answer": "def dfs(graph, start, end, path=[]):\n    path = path + [start]\n    if start == end:\n        return path\n    if not graph.has_key(start):\n        return None\n    for node in graph[start]:\n        if node not in path:\n            newpath = dfs(graph, node, end, path)\n            if newpath: return newpath\n    return None",
        "difficulty": "interview"
    },
    {
        "task_id": 1253,
        "prompt": "Complete the Python function given the prompt below:Roma works in a company that sells TVs. Now he has to prepare a report for the last year.\nRoma has got a list of the company's incomes. The list is a sequence that consists of n integers. The total income of the company is the sum of all integers in sequence. Roma decided to perform exactly k changes of signs of several numbers in the sequence. He can also change the sign of a number one, two or more times.\nThe operation of changing a number's sign is the operation of multiplying this number by -1.\nHelp Roma perform the changes so as to make the total income of the company (the sum of numbers in the resulting sequence) maximum. Note that Roma should perform exactly k changes.\n-----Input-----\nThe first line contains two integers n and k (1 \u2264 n, k \u2264 10^5), showing, how many numbers are in the sequence and how many swaps are to be made.\nThe second line contains a non-decreasing sequence, consisting of n integers a_{i} (|a_{i}| \u2264 10^4).\nThe numbers in the lines are separated by single spaces. Please note that the given sequence is sorted in non-decreasing order.\n-----Output-----\nIn the single line print the answer to the problem \u2014 the maximum total income that we can obtain after exactly k changes.\n-----Examples-----\nInput\n3 2\n-1 -1 1\nOutput\n3\nInput\n3 1\n-1 -1 1\nOutput\n1\n-----Note-----\nIn the first sample we can get sequence [1, 1, 1], thus the total income equals 3.\nIn the second test, the optimal strategy is to get sequence [-1, 1, 1], thus the total income equals 1.\n\ndef",
        "answer": "def max_income(n, k, arr):\n    arr.sort()\n    arr.reverse()\n    print(arr)\n    sum = 0\n    for i in range(k):\n        if arr[i] < 0:\n            sum += arr[i]\n            arr[i] = arr[i] * -1\n        else:\n            sum += arr[i]\n            arr[i] = arr[i] * -1\n    print(sum)\n    return sum",
        "difficulty": "interview"
    },
    {
        "task_id": 1254,
        "prompt": "Complete the Python function given the prompt below:A multi-subject competition is coming! The competition has $m$ different subjects participants can choose from. That's why Alex (the coach) should form a competition delegation among his students. \nHe has $n$ candidates. For the $i$-th person he knows subject $s_i$ the candidate specializes in and $r_i$ \u2014 a skill level in his specialization (this level can be negative!). \nThe rules of the competition require each delegation to choose some subset of subjects they will participate in. The only restriction is that the number of students from the team participating in each of the chosen subjects should be the same.\nAlex decided that each candidate would participate only in the subject he specializes in. Now Alex wonders whom he has to choose to maximize the total sum of skill levels of all delegates, or just skip the competition this year if every valid non-empty delegation has negative sum.\n(Of course, Alex doesn't have any spare money so each delegate he chooses must participate in the competition).\n-----Input-----\nThe first line contains two integers $n$ and $m$ ($1 \\le n \\le 10^5$, $1 \\le m \\le 10^5$) \u2014 the number of candidates and the number of subjects.\nThe next $n$ lines contains two integers per line: $s_i$ and $r_i$ ($1 \\le s_i \\le m$, $-10^4 \\le r_i \\le 10^4$) \u2014 the subject of specialization and the skill level of the $i$-th candidate.\n-----Output-----\nPrint the single integer \u2014 the maximum total sum of skills of delegates who form a valid delegation (according to rules above) or $0$ if every valid non-empty delegation has negative sum.\n-----Examples-----\nInput\n6 3\n2 6\n3 6\n2 5\n3 5\n1 9\n3 1\nOutput\n22\nInput\n5 3\n2 6\n3 6\n2 5\n3 5\n1 11\nOutput\n23\nInput\n5 2\n1 -1\n1 -5\n2 -1\n2 -1\n1 -10\nOutput\n0\n-----Note-----\nIn the first example it's optimal to choose candidates $1$, $2$, $3$, $4$, so two of them specialize in the $2$-nd subject and other two in the $3$-rd. The total sum is $6 + 6 + 5 + 5 = 22$.\nIn the second example it's optimal to choose candidates $1$, $2$ and $5$. One person in each subject and the total sum is $6 + 6 + 11 = 23$.\nIn the third example it's impossible to obtain a non-negative sum.\n\ndef",
        "answer": "def main():\n    n, m = map(int, input().split())\n    s = [0] * n\n    r = [0] * n\n    for i in range(n):\n        s[i], r[i] = map(int, input().split())\n    print(solve(n, m, s, r))",
        "difficulty": "interview"
    },
    {
        "task_id": 1255,
        "prompt": "Complete the Python function given the prompt below:Valera runs a 24/7 fast food cafe. He magically learned that next day n people will visit his cafe. For each person we know the arrival time: the i-th person comes exactly at h_{i} hours m_{i} minutes. The cafe spends less than a minute to serve each client, but if a client comes in and sees that there is no free cash, than he doesn't want to wait and leaves the cafe immediately. \nValera is very greedy, so he wants to serve all n customers next day (and get more profit). However, for that he needs to ensure that at each moment of time the number of working cashes is no less than the number of clients in the cafe. \nHelp Valera count the minimum number of cashes to work at his cafe next day, so that they can serve all visitors.\n-----Input-----\nThe first line contains a single integer n (1 \u2264 n \u2264 10^5), that is the number of cafe visitors.\nEach of the following n lines has two space-separated integers h_{i} and m_{i} (0 \u2264 h_{i} \u2264 23;\u00a00 \u2264 m_{i} \u2264 59), representing the time when the i-th person comes into the cafe. \nNote that the time is given in the chronological order. All time is given within one 24-hour period.\n-----Output-----\nPrint a single integer \u2014 the minimum number of cashes, needed to serve all clients next day.\n-----Examples-----\nInput\n4\n8 0\n8 10\n8 10\n8 45\nOutput\n2\nInput\n3\n0 12\n10 11\n22 22\nOutput\n1\n-----Note-----\nIn the first sample it is not enough one cash to serve all clients, because two visitors will come into cafe in 8:10. Therefore, if there will be one cash in cafe, then one customer will be served by it, and another one will not wait and will go away.\nIn the second sample all visitors will come in different times, so it will be enough one cash.\n\ndef",
        "answer": "def cafe_cash(n, times):\n    cash = 0\n    for i in range(n):\n        if times[i][0] >= 9:\n            cash += 1\n    return cash",
        "difficulty": "interview"
    },
    {
        "task_id": 1256,
        "prompt": "Complete the Python function given the prompt below:Xenia the beginner mathematician is a third year student at elementary school. She is now learning the addition operation.\nThe teacher has written down the sum of multiple numbers. Pupils should calculate the sum. To make the calculation easier, the sum only contains numbers 1, 2 and 3. Still, that isn't enough for Xenia. She is only beginning to count, so she can calculate a sum only if the summands follow in non-decreasing order. For example, she can't calculate sum 1+3+2+1 but she can calculate sums 1+1+2 and 3+3.\nYou've got the sum that was written on the board. Rearrange the summans and print the sum in such a way that Xenia can calculate the sum.\n-----Input-----\nThe first line contains a non-empty string s \u2014 the sum Xenia needs to count. String s contains no spaces. It only contains digits and characters \"+\". Besides, string s is a correct sum of numbers 1, 2 and 3. String s is at most 100 characters long.\n-----Output-----\nPrint the new sum that Xenia can count.\n-----Examples-----\nInput\n3+2+1\nOutput\n1+2+3\nInput\n1+1+3+1+3\nOutput\n1+1+1+3+3\nInput\n2\nOutput\n2\n\ndef",
        "answer": "def count_sum(s):\n    s = s.split('+')\n    s.sort()\n    return '+'.join(s)",
        "difficulty": "interview"
    },
    {
        "task_id": 1257,
        "prompt": "Complete the Python function given the prompt below:People do many crazy things to stand out in a crowd. Some of them dance, some learn by heart rules of Russian language, some try to become an outstanding competitive programmers, while others collect funny math objects.\nAlis is among these collectors. Right now she wants to get one of k-special tables. In case you forget, the table n \u00d7 n is called k-special if the following three conditions are satisfied:  every integer from 1 to n^2 appears in the table exactly once;  in each row numbers are situated in increasing order;  the sum of numbers in the k-th column is maximum possible. \nYour goal is to help Alice and find at least one k-special table of size n \u00d7 n. Both rows and columns are numbered from 1 to n, with rows numbered from top to bottom and columns numbered from left to right.\n-----Input-----\nThe first line of the input contains two integers n and k (1 \u2264 n \u2264 500, 1 \u2264 k \u2264 n)\u00a0\u2014 the size of the table Alice is looking for and the column that should have maximum possible sum.\n-----Output-----\nFirst print the sum of the integers in the k-th column of the required table.\nNext n lines should contain the description of the table itself: first line should contains n elements of the first row, second line should contain n elements of the second row and so on.\nIf there are multiple suitable table, you are allowed to print any.\n-----Examples-----\nInput\n4 1\nOutput\n28\n1 2 3 4\n5 6 7 8\n9 10 11 12\n13 14 15 16\nInput\n5 3\nOutput\n85\n5 6 17 18 19\n9 10 23 24 25\n7 8 20 21 22\n3 4 14 15 16\n1 2 11 12 13\n\ndef",
        "answer": "def table(n,k):\n    l=[]\n    for i in range(1,n+1):\n        l.append(i)\n    l1=[]\n    for i in range(1,n+1):\n        l1.append(i)\n    l2=[]\n    for i in range(1,n+1):\n        l2.append(i)\n    l3=[]\n    for i in range(1,n+1):\n        l3.append(i)\n    l4=[]\n    for i in range(1,n+1):\n        l4.append(i)\n    l5=[]\n    for i in range(1,n+1):\n        l5.append(i)\n    l6=[]\n    for i in range(1,n+1):\n        l6.append(i)\n    l7=[]\n    for i in range(1,n+1):\n        l7.append(i)\n    l8=[]\n    for i in range(1,n+1):\n        l8.append(i)\n    l9=[]\n    for i in range(1,n+1):\n        l9.append(i)\n    l10=[]\n    for i in range(1,n+1):\n        l10.append(i)\n    l11=[]\n    for i in range(1,n+1):\n        l11.append(i)\n    l12=[]\n    for i in range(1,n+1):\n        l12.append(i)\n    l13=[]\n    for i in range(1,n+1):\n        l13.append(i)\n    l14",
        "difficulty": "interview"
    },
    {
        "task_id": 1258,
        "prompt": "Complete the Python function given the prompt below:Bob is an avid fan of the video game \"League of Leesins\", and today he celebrates as the League of Leesins World Championship comes to an end! \nThe tournament consisted of $n$ ($n \\ge 5$) teams around the world. Before the tournament starts, Bob has made a prediction of the rankings of each team, from $1$-st to $n$-th. After the final, he compared the prediction with the actual result and found out that the $i$-th team according to his prediction ended up at the $p_i$-th position ($1 \\le p_i \\le n$, all $p_i$ are unique). In other words, $p$ is a permutation of $1, 2, \\dots, n$.\nAs Bob's favorite League player is the famous \"3ga\", he decided to write down every $3$ consecutive elements of the permutation $p$. Formally, Bob created an array $q$ of $n-2$ triples, where $q_i = (p_i, p_{i+1}, p_{i+2})$ for each $1 \\le i \\le n-2$. Bob was very proud of his array, so he showed it to his friend Alice.\nAfter learning of Bob's array, Alice declared that she could retrieve the permutation $p$ even if Bob rearranges the elements of $q$ and the elements within each triple. Of course, Bob did not believe in such magic, so he did just the same as above to see Alice's respond.\nFor example, if $n = 5$ and $p = [1, 4, 2, 3, 5]$, then the original array $q$ will be $[(1, 4, 2), (4, 2, 3), (2, 3, 5)]$. Bob can then rearrange the numbers within each triple and the positions of the triples to get $[(4, 3, 2), (2, 3, 5), (4, 1, 2)]$. Note that $[(1, 4, 2), (4, 2, 2), (3, 3, 5)]$ is not a valid rearrangement of $q$, as Bob is not allowed to swap numbers belong to different triples.\nAs Alice's friend, you know for sure that Alice was just trying to show off, so you decided to save her some face by giving her any permutation $p$ that is consistent with the array $q$ she was given. \n-----Input-----\nThe first line contains a single integer $n$ ($5 \\le n \\le 10^5$)\u00a0\u2014 the size of permutation $p$.\nThe $i$-th of the next $n-2$ lines contains $3$ integers $q_{i, 1}$, $q_{i, 2}$, $q_{i, 3}$ ($1 \\le q_{i, j} \\le n$)\u00a0\u2014 the elements of the $i$-th triple of the rearranged (shuffled) array $q_i$, in random order. Remember, that the numbers within each triple can be rearranged and also the positions of the triples can be rearranged.\nIt is guaranteed that there is at least one permutation $p$ that is consistent with the input. \n-----Output-----\nPrint $n$ distinct integers $p_1, p_2, \\ldots, p_n$ ($1 \\le p_i \\le n$) such that $p$ is consistent with array $q$. \nIf there are multiple answers, print any. \n-----Example-----\nInput\n5\n4 3 2\n2 3 5\n4 1 2\nOutput\n1 4 2 3 5\n\ndef",
        "answer": "def permutation(n, q):\n    p = [0] * n\n    for i in range(n):\n        p[q[i][0] - 1] = q[i][1]\n        p[q[i][1] - 1] = q[i][2]\n    return p",
        "difficulty": "interview"
    },
    {
        "task_id": 1259,
        "prompt": "Complete the Python function given the prompt below:It's the year 5555. You have a graph, and you want to find a long cycle and a huge independent set, just because you can. But for now, let's just stick with finding either.\nGiven a connected graph with $n$ vertices, you can choose to either:\n  find an independent set that has exactly $\\lceil\\sqrt{n}\\rceil$ vertices.\n find a simple cycle of length at least $\\lceil\\sqrt{n}\\rceil$. \nAn independent set is a set of vertices such that no two of them are connected by an edge. A simple cycle is a cycle that doesn't contain any vertex twice. I have a proof you can always solve one of these problems, but it's too long to fit this margin.\n-----Input-----\nThe first line contains two integers $n$ and $m$ ($5 \\le n \\le 10^5$, $n-1 \\le m \\le 2 \\cdot 10^5$)\u00a0\u2014 the number of vertices and edges in the graph.\nEach of the next $m$ lines contains two space-separated integers $u$ and $v$ ($1 \\le u,v \\le n$) that mean there's an edge between vertices $u$ and $v$. It's guaranteed that the graph is connected and doesn't contain any self-loops or multiple edges.\n-----Output-----\nIf you choose to solve the first problem, then on the first line print \"1\", followed by a line containing $\\lceil\\sqrt{n}\\rceil$ distinct integers not exceeding $n$, the vertices in the desired independent set.\nIf you, however, choose to solve the second problem, then on the first line print \"2\", followed by a line containing one integer, $c$, representing the length of the found cycle, followed by a line containing $c$ distinct integers integers not exceeding $n$, the vertices in the desired cycle, in the order they appear in the cycle.\n-----Examples-----\nInput\n6 6\n1 3\n3 4\n4 2\n2 6\n5 6\n5 1\nOutput\n1\n1 6 4\nInput\n6 8\n1 3\n3 4\n4 2\n2 6\n5 6\n5 1\n1 4\n2 5\nOutput\n2\n4\n1 5 2 4\nInput\n5 4\n1 2\n1 3\n2 4\n2 5\nOutput\n1\n3 4 5 \n-----Note-----\nIn the first sample:\n[Image]\nNotice that you can solve either problem, so printing the cycle $2-4-3-1-5-6$ is also acceptable.\nIn the second sample:\n[Image]\nNotice that if there are multiple answers you can print any, so printing the cycle $2-5-6$, for example, is acceptable.\nIn the third sample:\n$A$\n\ndef",
        "answer": "def find_cycle(graph, n):\n    # Your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n",
        "difficulty": "interview"
    },
    {
        "task_id": 1260,
        "prompt": "Complete the Python function given the prompt below:You are given an array $a$ consisting of $n$ integers. You can perform the following operations with it:   Choose some positions $i$ and $j$ ($1 \\le i, j \\le n, i \\ne j$), write the value of $a_i \\cdot a_j$ into the $j$-th cell and remove the number from the $i$-th cell;  Choose some position $i$ and remove the number from the $i$-th cell (this operation can be performed no more than once and at any point of time, not necessarily in the beginning). \nThe number of elements decreases by one after each operation. However, the indexing of positions stays the same. Deleted numbers can't be used in the later operations.\nYour task is to perform exactly $n - 1$ operations with the array in such a way that the only number that remains in the array is maximum possible. This number can be rather large, so instead of printing it you need to print any sequence of operations which leads to this maximum number. Read the output format to understand what exactly you need to print.\n-----Input-----\nThe first line contains a single integer $n$ ($2 \\le n \\le 2 \\cdot 10^5$) \u2014 the number of elements in the array.\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($-10^9 \\le a_i \\le 10^9$) \u2014 the elements of the array.\n-----Output-----\nPrint $n - 1$ lines. The $k$-th line should contain one of the two possible operations.\nThe operation of the first type should look like this: $1~ i_k~ j_k$, where $1$ is the type of operation, $i_k$ and $j_k$ are the positions of the chosen elements.\nThe operation of the second type should look like this: $2~ i_k$, where $2$ is the type of operation, $i_k$ is the position of the chosen element. Note that there should be no more than one such operation.\nIf there are multiple possible sequences of operations leading to the maximum number \u2014 print any of them.\n-----Examples-----\nInput\n5\n5 -2 0 1 -3\nOutput\n2 3\n1 1 2\n1 2 4\n1 4 5\nInput\n5\n5 2 0 4 0\nOutput\n1 3 5\n2 5\n1 1 2\n1 2 4\nInput\n2\n2 -1\nOutput\n2 2\nInput\n4\n0 -10 0 0\nOutput\n1 1 2\n1 2 3\n1 3 4\nInput\n4\n0 0 0 0\nOutput\n1 1 2\n1 2 3\n1 3 4\n-----Note-----\nLet X be the removed number in the array. Let's take a look at all the examples:\nThe first example has, for example, the following sequence of transformations of the array: $[5, -2, 0, 1, -3] \\to [5, -2, X, 1, -3] \\to [X, -10, X, 1, -3] \\to$ $[X, X, X, -10, -3] \\to [X, X, X, X, 30]$. Thus, the maximum answer is $30$. Note, that other sequences that lead to the answer $30$ are also correct.\nThe second example has, for example, the following sequence of transformations of the array: $[5, 2, 0, 4, 0] \\to [5, 2, X, 4, 0] \\to [5, 2, X, 4, X] \\to [X, 10, X, 4, X] \\to$ $[X, X, X, 40, X]$. The following answer is also allowed: \n1 5 3\n1 4 2\n1 2 1\n2 3\nThen the sequence of transformations of the array will look like this: $[5, 2, 0, 4, 0] \\to [5, 2, 0, 4, X] \\to [5, 8, 0, X, X] \\to [40, X, 0, X, X] \\to$ $[40, X, X, X, X]$.\nThe third example can have the following sequence of transformations of the array: $[2, -1] \\to [2, X]$.\nThe fourth example can have the following sequence of transformations of the array: $[0, -10, 0, 0] \\to [X, 0, 0, 0] \\to [X, X, 0, 0] \\to [X, X, X, 0]$.\nThe fifth example can have the following sequence of transformations of the array: $[0, 0, 0, 0] \\to [X, 0, 0, 0] \\to [X, X, 0, 0] \\to [X, X, X, 0]$.\n\ndef",
        "answer": "def array_manipulation(n, queries):\n    arr = [0] * n\n    for i in queries:\n        arr[i[0] - 1] += i[2]\n        if i[1]!= len(arr):\n            arr[i[1]] -= i[2]\n    max_val = 0\n    running_sum = 0\n    for i in arr:\n        running_sum += i\n        if running_sum > max_val:\n            max_val = running_sum\n    return max_val",
        "difficulty": "interview"
    },
    {
        "task_id": 1261,
        "prompt": "Complete the Python function given the prompt below:Let's call the following process a transformation of a sequence of length $n$.\nIf the sequence is empty, the process ends. Otherwise, append the greatest common divisor (GCD) of all the elements of the sequence to the result and remove one arbitrary element from the sequence. Thus, when the process ends, we have a sequence of $n$ integers: the greatest common divisors of all the elements in the sequence before each deletion.\nYou are given an integer sequence $1, 2, \\dots, n$. Find the lexicographically maximum result of its transformation.\nA sequence $a_1, a_2, \\ldots, a_n$ is lexicographically larger than a sequence $b_1, b_2, \\ldots, b_n$, if there is an index $i$ such that $a_j = b_j$ for all $j < i$, and $a_i > b_i$.\n-----Input-----\nThe first and only line of input contains one integer $n$ ($1\\le n\\le 10^6$).\n-----Output-----\nOutput $n$ integers \u00a0\u2014 the lexicographically maximum result of the transformation.\n-----Examples-----\nInput\n3\nOutput\n1 1 3 \nInput\n2\nOutput\n1 2 \nInput\n1\nOutput\n1 \n-----Note-----\nIn the first sample the answer may be achieved this way:  Append GCD$(1, 2, 3) = 1$, remove $2$.  Append GCD$(1, 3) = 1$, remove $1$.  Append GCD$(3) = 3$, remove $3$. \nWe get the sequence $[1, 1, 3]$ as the result.\n\ndef",
        "answer": "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)",
        "difficulty": "interview"
    },
    {
        "task_id": 1262,
        "prompt": "Complete the Python function given the prompt below:Shichikuji is the new resident deity of the South Black Snail Temple. Her first job is as follows:\nThere are $n$ new cities located in Prefecture X. Cities are numbered from $1$ to $n$. City $i$ is located $x_i$ km North of the shrine and $y_i$ km East of the shrine. It is possible that $(x_i, y_i) = (x_j, y_j)$ even when $i \\ne j$.\nShichikuji must provide electricity to each city either by building a power station in that city, or by making a connection between that city and another one that already has electricity. So the City has electricity if it has a power station in it or it is connected to a City which has electricity by a direct connection or via a chain of connections.\n    Building a power station in City $i$ will cost $c_i$ yen;     Making a connection between City $i$ and City $j$ will cost $k_i + k_j$ yen per km of wire used for the connection. However, wires can only go the cardinal directions (North, South, East, West). Wires can cross each other. Each wire must have both of its endpoints in some cities. If City $i$ and City $j$ are connected by a wire, the wire will go through any shortest path from City $i$ to City $j$. Thus, the length of the wire if City $i$ and City $j$ are connected is $|x_i - x_j| + |y_i - y_j|$ km. \nShichikuji wants to do this job spending as little money as possible, since according to her, there isn't really anything else in the world other than money. However, she died when she was only in fifth grade so she is not smart enough for this. And thus, the new resident deity asks for your help.\nAnd so, you have to provide Shichikuji with the following information: minimum amount of yen needed to provide electricity to all cities, the cities in which power stations will be built, and the connections to be made.\nIf there are multiple ways to choose the cities and the connections to obtain the construction of minimum price, then print any of them.\n-----Input-----\nFirst line of input contains a single integer $n$ ($1 \\leq n \\leq 2000$) \u2014 the number of cities.\nThen, $n$ lines follow. The $i$-th line contains two space-separated integers $x_i$ ($1 \\leq x_i \\leq 10^6$) and $y_i$ ($1 \\leq y_i \\leq 10^6$) \u2014 the coordinates of the $i$-th city.\nThe next line contains $n$ space-separated integers $c_1, c_2, \\dots, c_n$ ($1 \\leq c_i \\leq 10^9$) \u2014 the cost of building a power station in the $i$-th city.\nThe last line contains $n$ space-separated integers $k_1, k_2, \\dots, k_n$ ($1 \\leq k_i \\leq 10^9$).\n-----Output-----\nIn the first line print a single integer, denoting the minimum amount of yen needed.\nThen, print an integer $v$ \u2014 the number of power stations to be built.\nNext, print $v$ space-separated integers, denoting the indices of cities in which a power station will be built. Each number should be from $1$ to $n$ and all numbers should be pairwise distinct. You can print the numbers in arbitrary order.\nAfter that, print an integer $e$ \u2014 the number of connections to be made.\nFinally, print $e$ pairs of integers $a$ and $b$ ($1 \\le a, b \\le n$, $a \\ne b$), denoting that a connection between City $a$ and City $b$ will be made. Each unordered pair of cities should be included at most once (for each $(a, b)$ there should be no more $(a, b)$ or $(b, a)$ pairs). You can print the pairs in arbitrary order.\nIf there are multiple ways to choose the cities and the connections to obtain the construction of minimum price, then print any of them.\n-----Examples-----\nInput\n3\n2 3\n1 1\n3 2\n3 2 3\n3 2 3\nOutput\n8\n3\n1 2 3 \n0\nInput\n3\n2 1\n1 2\n3 3\n23 2 23\n3 2 3\nOutput\n27\n1\n2 \n2\n1 2\n2 3\n-----Note-----\nFor the answers given in the samples, refer to the following diagrams (cities with power stations are colored green, other cities are colored blue, and wires are colored red):\n[Image]\nFor the first example, the cost of building power stations in all cities is $3 + 2 + 3 = 8$. It can be shown that no configuration costs less than 8 yen.\nFor the second example, the cost of building a power station in City 2 is 2. The cost of connecting City 1 and City 2 is $2 \\cdot (3 + 2) = 10$. The cost of connecting City 2 and City 3 is $3 \\cdot (2 + 3) = 15$. Thus the total cost is $2 + 10 + 15 = 27$. It can be shown that no configuration costs less than 27 yen.\n\ndef",
        "answer": "def main():\n    n = int(input())\n    x = [0] * n\n    y = [0] * n\n    c = [0] * n\n    k = [0] * n\n    for i in range(n):\n        x[i], y[i] = map(int, input().split())\n        c[i] = int(input())\n        k[i] = int(input())\n    print(solve(n, x, y, c, k))",
        "difficulty": "interview"
    },
    {
        "task_id": 1263,
        "prompt": "Complete the Python function given the prompt below:Dima, Inna and Seryozha have gathered in a room. That's right, someone's got to go. To cheer Seryozha up and inspire him to have a walk, Inna decided to cook something. \nDima and Seryozha have n fruits in the fridge. Each fruit has two parameters: the taste and the number of calories. Inna decided to make a fruit salad, so she wants to take some fruits from the fridge for it. Inna follows a certain principle as she chooses the fruits: the total taste to the total calories ratio of the chosen fruits must equal k. In other words, $\\frac{\\sum_{j = 1}^{m} a_{j}}{\\sum_{j = 1}^{m} b_{j}} = k$, where a_{j} is the taste of the j-th chosen fruit and b_{j} is its calories.\nInna hasn't chosen the fruits yet, she is thinking: what is the maximum taste of the chosen fruits if she strictly follows her principle? Help Inna solve this culinary problem \u2014 now the happiness of a young couple is in your hands!\nInna loves Dima very much so she wants to make the salad from at least one fruit.\n-----Input-----\nThe first line of the input contains two integers n, k (1 \u2264 n \u2264 100, 1 \u2264 k \u2264 10). The second line of the input contains n integers a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 100) \u2014 the fruits' tastes. The third line of the input contains n integers b_1, b_2,..., b_{n} (1 \u2264 b_{i} \u2264 100) \u2014 the fruits' calories. Fruit number i has taste a_{i} and calories b_{i}.\n-----Output-----\nIf there is no way Inna can choose the fruits for the salad, print in the single line number -1. Otherwise, print a single integer \u2014 the maximum possible sum of the taste values of the chosen fruits.\n-----Examples-----\nInput\n3 2\n10 8 1\n2 7 1\nOutput\n18\nInput\n5 3\n4 4 4 4 4\n2 2 2 2 2\nOutput\n-1\n-----Note-----\nIn the first test sample we can get the total taste of the fruits equal to 18 if we choose fruit number 1 and fruit number 2, then the total calories will equal 9. The condition $\\frac{18}{9} = 2 = k$ fulfills, that's exactly what Inna wants.\nIn the second test sample we cannot choose the fruits so as to follow Inna's principle.\n\ndef",
        "answer": "def fruits_salad(n, k, a, b):\n    if sum(a) / sum(b) == k:\n        return sum(a)\n    return -1",
        "difficulty": "interview"
    },
    {
        "task_id": 1264,
        "prompt": "Complete the Python function given the prompt below:Iahub got bored, so he invented a game to be played on paper. \nHe writes n integers a_1, a_2,..., a_{n}. Each of those integers can be either 0 or 1. He's allowed to do exactly one move: he chooses two indices i and j (1 \u2264 i \u2264 j \u2264 n) and flips all values a_{k} for which their positions are in range [i, j] (that is i \u2264 k \u2264 j). Flip the value of x means to apply operation x = 1 - x.\nThe goal of the game is that after exactly one move to obtain the maximum number of ones. Write a program to solve the little game of Iahub.\n-----Input-----\nThe first line of the input contains an integer n (1 \u2264 n \u2264 100). In the second line of the input there are n integers: a_1, a_2,..., a_{n}. It is guaranteed that each of those n values is either 0 or 1.\n-----Output-----\nPrint an integer \u2014 the maximal number of 1s that can be obtained after exactly one move. \n-----Examples-----\nInput\n5\n1 0 0 1 0\nOutput\n4\nInput\n4\n1 0 0 1\nOutput\n4\n-----Note-----\nIn the first case, flip the segment from 2 to 5 (i = 2, j = 5). That flip changes the sequence, it becomes: [1 1 1 0 1]. So, it contains four ones. There is no way to make the whole sequence equal to [1 1 1 1 1].\nIn the second case, flipping only the second and the third element (i = 2, j = 3) will turn all numbers into 1.\n\ndef",
        "answer": "def flip(arr, i, j):\n    for k in range(i, j+1):\n        arr[k] = 1 - arr[k]",
        "difficulty": "interview"
    },
    {
        "task_id": 1265,
        "prompt": "Complete the Python function given the prompt below:The Bitlandians are quite weird people. They do everything differently. They have a different alphabet so they have a different definition for a string.\nA Bitlandish string is a string made only of characters \"0\" and \"1\".\nBitHaval (the mayor of Bitland) loves to play with Bitlandish strings. He takes some Bitlandish string a, and applies several (possibly zero) operations to it. In one operation the mayor may take any two adjacent characters of a string, define one of them as x and the other one as y. Then he calculates two values p and q: p = x\u00a0xor\u00a0y, q = x\u00a0or\u00a0y. Then he replaces one of the two taken characters by p and the other one by q.\nThe xor operation means the bitwise excluding OR operation. The or operation is the bitwise OR operation.\nSo for example one operation can transform string 11 to string 10 or to string 01. String 1 cannot be transformed into any other string.\nYou've got two Bitlandish strings a and b. Your task is to check if it is possible for BitHaval to transform string a to string b in several (possibly zero) described operations.\n-----Input-----\nThe first line contains Bitlandish string a, the second line contains Bitlandish string b. The strings can have different lengths.\nIt is guaranteed that the given strings only consist of characters \"0\" and \"1\". The strings are not empty, their length doesn't exceed 10^6.\n-----Output-----\nPrint \"YES\" if a can be transformed into b, otherwise print \"NO\". Please do not print the quotes.\n-----Examples-----\nInput\n11\n10\nOutput\nYES\nInput\n1\n01\nOutput\nNO\nInput\n000\n101\nOutput\nNO\n\ndef",
        "answer": "def bitland(a,b):\n    if len(a)!= len(b):\n        return \"NO\"\n    for i in range(len(a)):\n        if a[i]!= b[i]:\n            return \"NO\"\n    return \"YES\"",
        "difficulty": "interview"
    },
    {
        "task_id": 1266,
        "prompt": "Complete the Python function given the prompt below:Anton likes to play chess. Also, he likes to do programming. That is why he decided to write the program that plays chess. However, he finds the game on 8 to 8 board to too simple, he uses an infinite one instead.\nThe first task he faced is to check whether the king is in check. Anton doesn't know how to implement this so he asks you to help.\nConsider that an infinite chess board contains one white king and the number of black pieces. There are only rooks, bishops and queens, as the other pieces are not supported yet. The white king is said to be in check if at least one black piece can reach the cell with the king in one move. \nHelp Anton and write the program that for the given position determines whether the white king is in check.\nRemainder, on how do chess pieces move:   Bishop moves any number of cells diagonally, but it can't \"leap\" over the occupied cells.  Rook moves any number of cells horizontally or vertically, but it also can't \"leap\" over the occupied cells.  Queen is able to move any number of cells horizontally, vertically or diagonally, but it also can't \"leap\". \n-----Input-----\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 500 000)\u00a0\u2014 the number of black pieces.\nThe second line contains two integers x_0 and y_0 ( - 10^9 \u2264 x_0, y_0 \u2264 10^9)\u00a0\u2014 coordinates of the white king.\nThen follow n lines, each of them contains a character and two integers x_{i} and y_{i} ( - 10^9 \u2264 x_{i}, y_{i} \u2264 10^9)\u00a0\u2014 type of the i-th piece and its position. Character 'B' stands for the bishop, 'R' for the rook and 'Q' for the queen. It's guaranteed that no two pieces occupy the same position.\n-----Output-----\nThe only line of the output should contains \"YES\" (without quotes) if the white king is in check and \"NO\" (without quotes) otherwise.\n-----Examples-----\nInput\n2\n4 2\nR 1 1\nB 1 5\nOutput\nYES\nInput\n2\n4 2\nR 3 3\nB 1 5\nOutput\nNO\n-----Note-----\nPicture for the first sample:  [Image]  White king is in check, because the black bishop can reach the cell with the white king in one move. The answer is \"YES\".\nPicture for the second sample:  [Image]  Here bishop can't reach the cell with the white king, because his path is blocked by the rook, and the bishop cant \"leap\" over it. Rook can't reach the white king, because it can't move diagonally. Hence, the king is not in check and the answer is \"NO\".\n\ndef",
        "answer": "def check_check(x, y, board):\n    for i in range(len(board)):\n        if board[i][0] == 'B':\n            if abs(x - board[i][1]) == abs(y - board[i][2]):\n                return True\n        elif board[i][0] == 'R':\n            if abs(x - board[i][1]) == 0 or abs(x - board[i][1]) == abs(y - board[i][2]):\n                return True\n        elif board[i][0] == 'Q':\n            if abs(x - board[i][1]) == abs(y - board[i][2]):\n                return True\n    return False",
        "difficulty": "interview"
    },
    {
        "task_id": 1267,
        "prompt": "Complete the Python function given the prompt below:The recent All-Berland Olympiad in Informatics featured n participants with each scoring a certain amount of points.\nAs the head of the programming committee, you are to determine the set of participants to be awarded with diplomas with respect to the following criteria:   At least one participant should get a diploma.  None of those with score equal to zero should get awarded.  When someone is awarded, all participants with score not less than his score should also be awarded. \nDetermine the number of ways to choose a subset of participants that will receive the diplomas.\n-----Input-----\nThe first line contains a single integer n (1 \u2264 n \u2264 100)\u00a0\u2014 the number of participants.\nThe next line contains a sequence of n integers a_1, a_2,..., a_{n} (0 \u2264 a_{i} \u2264 600)\u00a0\u2014 participants' scores.\nIt's guaranteed that at least one participant has non-zero score.\n-----Output-----\nPrint a single integer\u00a0\u2014 the desired number of ways.\n-----Examples-----\nInput\n4\n1 3 3 2\nOutput\n3\nInput\n3\n1 1 1\nOutput\n1\nInput\n4\n42 0 0 42\nOutput\n1\n-----Note-----\nThere are three ways to choose a subset in sample case one.  Only participants with 3 points will get diplomas.  Participants with 2 or 3 points will get diplomas.  Everyone will get a diploma! \nThe only option in sample case two is to award everyone.\nNote that in sample case three participants with zero scores cannot get anything.\n\ndef",
        "answer": "def solve(n, scores):\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(1, n + 1):\n        for j in range(i):\n            if scores[j] < scores[i]:\n                dp[i] += dp[j]\n    return dp[n]",
        "difficulty": "interview"
    },
    {
        "task_id": 1268,
        "prompt": "Complete the Python function given the prompt below:Jafar has n cans of cola. Each can is described by two integers: remaining volume of cola a_{i} and can's capacity b_{i} (a_{i}  \u2264  b_{i}).\nJafar has decided to pour all remaining cola into just 2 cans, determine if he can do this or not!\n-----Input-----\nThe first line of the input contains one integer n (2 \u2264 n \u2264 100 000)\u00a0\u2014 number of cola cans.\nThe second line contains n space-separated integers a_1, a_2,..., a_{n} (0 \u2264 a_{i} \u2264 10^9) \u2014 volume of remaining cola in cans.\nThe third line contains n space-separated integers that b_1, b_2,..., b_{n} (a_{i} \u2264 b_{i} \u2264 10^9) \u2014 capacities of the cans.\n-----Output-----\nPrint \"YES\" (without quotes) if it is possible to pour all remaining cola in 2 cans. Otherwise print \"NO\" (without quotes).\nYou can print each letter in any case (upper or lower).\n-----Examples-----\nInput\n2\n3 5\n3 6\nOutput\nYES\nInput\n3\n6 8 9\n6 10 12\nOutput\nNO\nInput\n5\n0 0 5 0 0\n1 1 8 10 5\nOutput\nYES\nInput\n4\n4 1 0 3\n5 2 2 3\nOutput\nYES\n-----Note-----\nIn the first sample, there are already 2 cans, so the answer is \"YES\".\n\ndef",
        "answer": "def can_pour(n, a, b):\n    if n == 0:\n        return True\n    if n < 0:\n        return False\n    if a[0] > b[0]:\n        return False\n    if a[0] == b[0]:\n        return can_pour(n - 1, a[1:], b[1:])\n    if a[0] < b[0]:\n        return can_pour(n - 1, a[1:], b) or can_pour(n - 1, a, b[1:])",
        "difficulty": "interview"
    },
    {
        "task_id": 1269,
        "prompt": "Complete the Python function given the prompt below:This is the first subtask of problem F. The only differences between this and the second subtask are the constraints on the value of $m$ and the time limit. You need to solve both subtasks in order to hack this one.\nThere are $n+1$ distinct colours in the universe, numbered $0$ through $n$. There is a strip of paper $m$ centimetres long initially painted with colour $0$. \nAlice took a brush and painted the strip using the following process. For each $i$ from $1$ to $n$, in this order, she picks two integers $0 \\leq a_i < b_i \\leq m$, such that the segment $[a_i, b_i]$ is currently painted with a single colour, and repaints it with colour $i$. \nAlice chose the segments in such a way that each centimetre is now painted in some colour other than $0$. Formally, the segment $[i-1, i]$ is painted with colour $c_i$ ($c_i \\neq 0$). Every colour other than $0$ is visible on the strip.\nCount the number of different pairs of sequences $\\{a_i\\}_{i=1}^n$, $\\{b_i\\}_{i=1}^n$ that result in this configuration. \nSince this number may be large, output it modulo $998244353$.\n-----Input-----\nThe first line contains a two integers $n$, $m$ ($1 \\leq n \\leq 500$, $n = m$)\u00a0\u2014 the number of colours excluding the colour $0$ and the length of the paper, respectively.\nThe second line contains $m$ space separated integers $c_1, c_2, \\ldots, c_m$ ($1 \\leq c_i \\leq n$)\u00a0\u2014 the colour visible on the segment $[i-1, i]$ after the process ends. It is guaranteed that for all $j$ between $1$ and $n$ there is an index $k$ such that $c_k = j$.\nNote that since in this subtask $n = m$, this means that $c$ is a permutation of integers $1$ through $n$.\n-----Output-----\nOutput a single integer\u00a0\u2014 the number of ways Alice can perform the painting, modulo $998244353$.\n-----Examples-----\nInput\n3 3\n1 2 3\nOutput\n5\nInput\n7 7\n4 5 1 6 2 3 7\nOutput\n165\n-----Note-----\nIn the first example, there are $5$ ways, all depicted in the figure below. Here, $0$ is white, $1$ is red, $2$ is green and $3$ is blue.\n[Image]\nBelow is an example of a painting process that is not valid, as in the second step the segment 1 3 is not single colour, and thus may not be repainted with colour $2$.\n[Image]\n\ndef",
        "answer": "def count_pairs(n, m, c):\n    count = 0\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            if c[i-1] == c[j-1]:\n                count += 1\n    return count",
        "difficulty": "interview"
    },
    {
        "task_id": 1270,
        "prompt": "Complete the Python function given the prompt below:Bachgold problem is very easy to formulate. Given a positive integer n represent it as a sum of maximum possible number of prime numbers. One can prove that such representation exists for any integer greater than 1.\nRecall that integer k is called prime if it is greater than 1 and has exactly two positive integer divisors\u00a0\u2014 1 and k. \n-----Input-----\nThe only line of the input contains a single integer n (2 \u2264 n \u2264 100 000).\n-----Output-----\nThe first line of the output contains a single integer k\u00a0\u2014 maximum possible number of primes in representation.\nThe second line should contain k primes with their sum equal to n. You can print them in any order. If there are several optimal solution, print any of them.\n-----Examples-----\nInput\n5\nOutput\n2\n2 3\nInput\n6\nOutput\n3\n2 2 2\n\ndef",
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True",
        "difficulty": "interview"
    },
    {
        "task_id": 1271,
        "prompt": "Complete the Python function given the prompt below:There are $n$ candy boxes in front of Tania. The boxes are arranged in a row from left to right, numbered from $1$ to $n$. The $i$-th box contains $r_i$ candies, candies have the color $c_i$ (the color can take one of three values \u200b\u200b\u2014 red, green, or blue). All candies inside a single box have the same color (and it is equal to $c_i$).\nInitially, Tanya is next to the box number $s$. Tanya can move to the neighbor box (that is, with a number that differs by one) or eat candies in the current box. Tanya eats candies instantly, but the movement takes one second.\nIf Tanya eats candies from the box, then the box itself remains in place, but there is no more candies in it. In other words, Tanya always eats all the candies from the box and candies in the boxes are not refilled.\nIt is known that Tanya cannot eat candies of the same color one after another (that is, the colors of candies in two consecutive boxes from which she eats candies are always different). In addition, Tanya's appetite is constantly growing, so in each next box from which she eats candies, there should be strictly more candies than in the previous one.\nNote that for the first box from which Tanya will eat candies, there are no restrictions on the color and number of candies.\nTanya wants to eat at least $k$ candies. What is the minimum number of seconds she will need? Remember that she eats candies instantly, and time is spent only on movements.\n-----Input-----\nThe first line contains three integers $n$, $s$ and $k$ ($1 \\le n \\le 50$, $1 \\le s \\le n$, $1 \\le k \\le 2000$) \u2014 number of the boxes, initial position of Tanya and lower bound on number of candies to eat. The following line contains $n$ integers $r_i$ ($1 \\le r_i \\le 50$) \u2014 numbers of candies in the boxes. The third line contains sequence of $n$ letters 'R', 'G' and 'B', meaning the colors of candies in the correspondent boxes ('R' for red, 'G' for green, 'B' for blue). Recall that each box contains candies of only one color. The third line contains no spaces.\n-----Output-----\nPrint minimal number of seconds to eat at least $k$ candies. If solution doesn't exist, print \"-1\".\n-----Examples-----\nInput\n5 3 10\n1 2 3 4 5\nRGBRR\nOutput\n4\nInput\n2 1 15\n5 6\nRG\nOutput\n-1\n-----Note-----\nThe sequence of actions of Tanya for the first example:\n  move from the box $3$ to the box $2$;  eat candies from the box $2$;  move from the box $2$ to the box $3$;  eat candy from the box $3$;  move from the box $3$ to the box $4$;  move from the box $4$ to the box $5$;  eat candies from the box $5$. \nSince Tanya eats candy instantly, the required time is four seconds.\n\ndef",
        "answer": "def candy_boxes(n, s, k):\n    if k > n:\n        return -1\n    if k == n:\n        return 0\n    if k == 1:\n        return n - s + 1\n    if k == 2:\n        return min(n - s + 1, n - s + 2)\n    if k == 3:\n        return min(n - s + 1, n - s + 2, n - s + 3)\n    if k == 4:\n        return min(n - s + 1, n - s + 2, n - s + 3, n - s + 4)\n    if k == 5:\n        return min(n - s + 1, n - s + 2, n - s + 3, n - s + 4, n - s + 5)\n    if k == 6:\n        return min(n - s + 1, n - s + 2, n - s + 3, n - s + 4, n - s + 5, n - s + 6)\n    if k == 7:\n        return min(n - s + 1, n - s + 2, n - s + 3, n - s + 4, n - s + 5, n - s + 6, n - s + 7)\n    if k == 8:\n        return min(n - s + 1, n - s + 2, n - s + 3, n - s + 4, n - s + 5, n - s + 6, n - s + 7, n - s + 8)\n    if k == 9:\n        return min(n - s + 1, n - s + 2, n - s + 3, n - s + 4, n - s + 5, n - s + 6, n - s + 7, n - s +",
        "difficulty": "interview"
    },
    {
        "task_id": 1272,
        "prompt": "Complete the Python function given the prompt below:There are N islands and M bridges.\nThe i-th bridge connects the A_i-th and B_i-th islands bidirectionally.\nInitially, we can travel between any two islands using some of these bridges.\nHowever, the results of a survey show that these bridges will all collapse because of aging, in the order from the first bridge to the M-th bridge.\nLet the inconvenience be the number of pairs of islands (a, b) (a < b) such that we are no longer able to travel between the a-th and b-th islands using some of the bridges remaining.\nFor each i (1 \\leq i \\leq M), find the inconvenience just after the i-th bridge collapses.\n-----Constraints-----\n - All values in input are integers.\n - 2 \\leq N \\leq 10^5\n - 1 \\leq M \\leq 10^5\n - 1 \\leq A_i < B_i \\leq N\n - All pairs (A_i, B_i) are distinct.\n - The inconvenience is initially 0.\n-----Input-----\nInput is given from Standard Input in the following format:\nN M\nA_1 B_1\nA_2 B_2\n\\vdots\nA_M B_M\n-----Output-----\nIn the order i = 1, 2,..., M, print the inconvenience just after the i-th bridge collapses.\nNote that the answer may not fit into a 32-bit integer type.\n-----Sample Input-----\n4 5\n1 2\n3 4\n1 3\n2 3\n1 4\n-----Sample Output-----\n0\n0\n4\n5\n6\nFor example, when the first to third bridges have collapsed, the inconvenience is 4 since we can no longer travel between the pairs (1, 2), (1, 3), (2, 4) and (3, 4).\n\ndef",
        "answer": "def bridge_collapse(n, m, a, b):\n    # Write your code here\n    inconvenience = 0\n    for i in range(m):\n        if a[i] < b[i]:\n            inconvenience += 1\n    return inconvenience",
        "difficulty": "interview"
    },
    {
        "task_id": 1273,
        "prompt": "Complete the Python function given the prompt below:Given is a tree G with N vertices.\nThe vertices are numbered 1 through N, and the i-th edge connects Vertex a_i and Vertex b_i.\nConsider painting the edges in G with some number of colors.\nWe want to paint them so that, for each vertex, the colors of the edges incident to that vertex are all different.\nAmong the colorings satisfying the condition above, construct one that uses the minimum number of colors.\n-----Constraints-----\n -  2 \\le N \\le 10^5\n -  1 \\le a_i \\lt b_i \\le N\n - All values in input are integers.\n - The given graph is a tree.\n-----Input-----\nInput is given from Standard Input in the following format:\nN\na_1 b_1\na_2 b_2\n\\vdots\na_{N-1} b_{N-1}\n-----Output-----\nPrint N lines.\nThe first line should contain K, the number of colors used.\nThe (i+1)-th line (1 \\le i \\le N-1) should contain c_i, the integer representing the color of the i-th edge, where 1 \\le c_i \\le K must hold.\nIf there are multiple colorings with the minimum number of colors that satisfy the condition, printing any of them will be accepted.\n-----Sample Input-----\n3\n1 2\n2 3\n-----Sample Output-----\n2\n1\n2\n\n\ndef",
        "answer": "def find_colors(n, edges):\n    colors = [0] * n\n    for edge in edges:\n        colors[edge[0] - 1] += 1\n        colors[edge[1] - 1] += 1\n    return max(colors)",
        "difficulty": "interview"
    },
    {
        "task_id": 1274,
        "prompt": "Complete the Python function given the prompt below:There are N one-off jobs available. If you take the i-th job and complete it, you will earn the reward of B_i after A_i days from the day you do it.\nYou can take and complete at most one of these jobs in a day.\nHowever, you cannot retake a job that you have already done.\nFind the maximum total reward that you can earn no later than M days from today.\nYou can already start working today.\n-----Constraints-----\n - All values in input are integers.\n - 1 \\leq N \\leq 10^5\n - 1 \\leq M \\leq 10^5\n - 1 \\leq A_i \\leq 10^5\n - 1 \\leq B_i \\leq 10^4\n-----Input-----\nInput is given from Standard Input in the following format:\nN M\nA_1 B_1\nA_2 B_2\n\\vdots\nA_N B_N\n-----Output-----\nPrint the maximum total reward that you can earn no later than M days from today.\n-----Sample Input-----\n3 4\n4 3\n4 1\n2 2\n-----Sample Output-----\n5\nYou can earn the total reward of 5 by taking the jobs as follows:\n - Take and complete the first job today. You will earn the reward of 3 after four days from today.\n - Take and complete the third job tomorrow. You will earn the reward of 2 after two days from tomorrow, that is, after three days from today.\n\ndef",
        "answer": "def solve(N, M, A, B):\n    # Write your code here\n    dp = [[0 for _ in range(M+1)] for _ in range(N+1)]\n    for i in range(1, N+1):\n        for j in range(1, M+1):\n            if j >= A[i-1]:\n                dp[i][j] = max(dp[i-1][j], dp[i-1][j-A[i-1]] + B[i-1])\n            else:\n                dp[i][j] = dp[i-1][j]\n    return dp[N][M]",
        "difficulty": "interview"
    },
    {
        "task_id": 1275,
        "prompt": "Complete the Python function given the prompt below:Given are integers N and K.\nHow many quadruples of integers (a,b,c,d) satisfy both of the following conditions?\n - 1 \\leq a,b,c,d \\leq N\n - a+b-c-d=K\n-----Constraints-----\n - 1 \\leq N \\leq 10^5\n - -2(N-1) \\leq K \\leq 2(N-1)\n - All numbers in input are integers.\n-----Input-----\nInput is given from standard input in the following format:\nN K\n-----Output-----\nPrint the answer.\n-----Sample Input-----\n2 1\n-----Sample Output-----\n4\nFour quadruples below satisfy the conditions:\n - (a,b,c,d)=(2,1,1,1)\n - (a,b,c,d)=(1,2,1,1)\n - (a,b,c,d)=(2,2,2,1)\n - (a,b,c,d)=(2,2,1,2)\n\ndef",
        "answer": "def quadruplets(n, k):\n    count = 0\n    for a in range(1, n + 1):\n        for b in range(1, n + 1):\n            for c in range(1, n + 1):\n                for d in range(1, n + 1):\n                    if a + b - c - d == k:\n                        count += 1\n    return count",
        "difficulty": "interview"
    },
    {
        "task_id": 1276,
        "prompt": "Complete the Python function given the prompt below:We have a string S of length N consisting of R, G, and B.\nFind the number of triples (i,~j,~k)~(1 \\leq i < j < k \\leq N) that satisfy both of the following conditions:\n - S_i \\neq S_j, S_i \\neq S_k, and S_j \\neq S_k.\n - j - i \\neq k - j.\n-----Constraints-----\n - 1 \\leq N \\leq 4000\n - S is a string of length N consisting of R, G, and B.\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nS\n-----Output-----\nPrint the number of triplets in question.\n-----Sample Input-----\n4\nRRGB\n-----Sample Output-----\n1\nOnly the triplet (1,~3,~4) satisfies both conditions. The triplet (2,~3,~4) satisfies the first condition but not the second, so it does not count.\n\ndef",
        "answer": "def countTriplets(n, s):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if s[i]!= s[j] and s[i]!= s[k] and s[j]!= s[k]:\n                    if j - i!= k - j:\n                        count += 1\n    return count",
        "difficulty": "interview"
    },
    {
        "task_id": 1277,
        "prompt": "Complete the Python function given the prompt below:We have a tree with N vertices. The i-th edge connects Vertex A_i and B_i bidirectionally.\nTakahashi is standing at Vertex u, and Aoki is standing at Vertex v.\nNow, they will play a game of tag as follows:\n - 1. If Takahashi and Aoki are standing at the same vertex, the game ends. Otherwise, Takahashi moves to a vertex of his choice that is adjacent to his current vertex.\n - 2. If Takahashi and Aoki are standing at the same vertex, the game ends. Otherwise, Aoki moves to a vertex of his choice that is adjacent to his current vertex.\n - 3. Go back to step 1.\nTakahashi performs his moves so that the game ends as late as possible, while Aoki performs his moves so that the game ends as early as possible.\nFind the number of moves Aoki will perform before the end of the game if both Takahashi and Aoki know each other's position and strategy.\nIt can be proved that the game is bound to end.\n-----Constraints-----\n - 2 \\leq N \\leq 10^5\n - 1 \\leq u,v \\leq N\n - u \\neq v\n - 1 \\leq A_i,B_i \\leq N\n - The given graph is a tree.\n-----Input-----\nInput is given from Standard Input in the following format:\nN u v\nA_1 B_1\n:\nA_{N-1} B_{N-1}\n-----Output-----\nPrint the number of moves Aoki will perform before the end of the game.\n-----Sample Input-----\n5 4 1\n1 2\n2 3\n3 4\n3 5\n-----Sample Output-----\n2\nIf both players play optimally, the game will progress as follows:\n - Takahashi moves to Vertex 3.\n - Aoki moves to Vertex 2.\n - Takahashi moves to Vertex 5.\n - Aoki moves to Vertex 3.\n - Takahashi moves to Vertex 3.\nHere, Aoki performs two moves.\nNote that, in each move, it is prohibited to stay at the current vertex.\n\ndef",
        "answer": "def tag(n, u, v):\n    if u == v:\n        return 0\n    if n == 1:\n        return 1\n    return tag(n - 1, u, v) + tag(n - 1, u, v)",
        "difficulty": "interview"
    },
    {
        "task_id": 1278,
        "prompt": "Complete the Python function given the prompt below:For years, the Day of city N was held in the most rainy day of summer. New mayor decided to break this tradition and select a not-so-rainy day for the celebration. The mayor knows the weather forecast for the $n$ days of summer. On the $i$-th day, $a_i$ millimeters of rain will fall. All values $a_i$ are distinct.\nThe mayor knows that citizens will watch the weather $x$ days before the celebration and $y$ days after. Because of that, he says that a day $d$ is not-so-rainy if $a_d$ is smaller than rain amounts at each of $x$ days before day $d$ and and each of $y$ days after day $d$. In other words, $a_d < a_j$ should hold for all $d - x \\le j < d$ and $d < j \\le d + y$. Citizens only watch the weather during summer, so we only consider such $j$ that $1 \\le j \\le n$.\nHelp mayor find the earliest not-so-rainy day of summer.\n-----Input-----\nThe first line contains three integers $n$, $x$ and $y$ ($1 \\le n \\le 100\\,000$, $0 \\le x, y \\le 7$)\u00a0\u2014 the number of days in summer, the number of days citizens watch the weather before the celebration and the number of days they do that after.\nThe second line contains $n$ distinct integers $a_1$, $a_2$,..., $a_n$ ($1 \\le a_i \\le 10^9$), where $a_i$ denotes the rain amount on the $i$-th day.\n-----Output-----\nPrint a single integer\u00a0\u2014 the index of the earliest not-so-rainy day of summer. We can show that the answer always exists.\n-----Examples-----\nInput\n10 2 2\n10 9 6 7 8 3 2 1 4 5\nOutput\n3\nInput\n10 2 3\n10 9 6 7 8 3 2 1 4 5\nOutput\n8\nInput\n5 5 5\n100000 10000 1000 100 10\nOutput\n5\n-----Note-----\nIn the first example days $3$ and $8$ are not-so-rainy. The $3$-rd day is earlier.\nIn the second example day $3$ is not not-so-rainy, because $3 + y = 6$ and $a_3 > a_6$. Thus, day $8$ is the answer. Note that $8 + y = 11$, but we don't consider day $11$, because it is not summer.\n\ndef",
        "answer": "def find_not_so_rainy(n, x, y, a):\n    a.sort()\n    for i in range(n):\n        if i + x > n:\n            continue\n        if i - x < 0:\n            continue\n        if i + y > n:\n            continue\n        if a[i] < a[i - x] and a[i] < a[i + y]:\n            return i\n    return -1",
        "difficulty": "interview"
    },
    {
        "task_id": 1279,
        "prompt": "Complete the Python function given the prompt below:On a random day, Neko found $n$ treasure chests and $m$ keys. The $i$-th chest has an integer $a_i$ written on it and the $j$-th key has an integer $b_j$ on it. Neko knows those chests contain the powerful mysterious green Grapes, thus Neko wants to open as many treasure chests as possible.\nThe $j$-th key can be used to unlock the $i$-th chest if and only if the sum of the key number and the chest number is an odd number. Formally, $a_i + b_j \\equiv 1 \\pmod{2}$. One key can be used to open at most one chest, and one chest can be opened at most once.\nFind the maximum number of chests Neko can open.\n-----Input-----\nThe first line contains integers $n$ and $m$ ($1 \\leq n, m \\leq 10^5$)\u00a0\u2014 the number of chests and the number of keys.\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq 10^9$)\u00a0\u2014 the numbers written on the treasure chests.\nThe third line contains $m$ integers $b_1, b_2, \\ldots, b_m$ ($1 \\leq b_i \\leq 10^9$)\u00a0\u2014 the numbers written on the keys.\n-----Output-----\nPrint the maximum number of chests you can open.\n-----Examples-----\nInput\n5 4\n9 14 6 2 11\n8 4 7 20\nOutput\n3\nInput\n5 1\n2 4 6 8 10\n5\nOutput\n1\nInput\n1 4\n10\n20 30 40 50\nOutput\n0\n-----Note-----\nIn the first example, one possible way to unlock $3$ chests is as follows:\n  Use first key to unlock the fifth chest,  Use third key to unlock the second chest,  Use fourth key to unlock the first chest. \nIn the second example, you can use the only key to unlock any single chest (note that one key can't be used twice).\nIn the third example, no key can unlock the given chest.\n\ndef",
        "answer": "def odd_sum(a, b):\n    return (a + b) % 2",
        "difficulty": "interview"
    },
    {
        "task_id": 1280,
        "prompt": "Complete the Python function given the prompt below:You've got string s, consisting of small English letters. Some of the English letters are good, the rest are bad.\nA substring s[l...r] (1 \u2264 l \u2264 r \u2264 |s|) of string s  =  s_1s_2...s_{|}s| (where |s| is the length of string s) is string  s_{l}s_{l} + 1...s_{r}.\nThe substring s[l...r] is good, if among the letters  s_{l}, s_{l} + 1,..., s_{r} there are at most k bad ones (look at the sample's explanation to understand it more clear).\nYour task is to find the number of distinct good substrings of the given string s. Two substrings s[x...y] and s[p...q] are considered distinct if their content is different, i.e. s[x...y] \u2260 s[p...q].\n-----Input-----\nThe first line of the input is the non-empty string s, consisting of small English letters, the string's length is at most 1500 characters.\nThe second line of the input is the string of characters \"0\" and \"1\", the length is exactly 26 characters. If the i-th character of this string equals \"1\", then the i-th English letter is good, otherwise it's bad. That is, the first character of this string corresponds to letter \"a\", the second one corresponds to letter \"b\" and so on.\nThe third line of the input consists a single integer k (0 \u2264 k \u2264 |s|) \u2014 the maximum acceptable number of bad characters in a good substring.\n-----Output-----\nPrint a single integer \u2014 the number of distinct good substrings of string s.\n-----Examples-----\nInput\nababab\n01000000000000000000000000\n1\nOutput\n5\nInput\nacbacbacaa\n00000000000000000000000000\n2\nOutput\n8\n-----Note-----\nIn the first example there are following good substrings: \"a\", \"ab\", \"b\", \"ba\", \"bab\".\nIn the second example there are following good substrings: \"a\", \"aa\", \"ac\", \"b\", \"ba\", \"c\", \"ca\", \"cb\".\n\ndef",
        "answer": "def good_substrings(s, k):\n    good_substrings = set()\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            if sum(1 for c in s[i:j] if c == '1') <= k:\n                good_substrings.add(s[i:j])\n    return len(good_substrings)",
        "difficulty": "interview"
    },
    {
        "task_id": 1281,
        "prompt": "Complete the Python function given the prompt below:At a break Vanya came to the class and saw an array of $n$ $k$-bit integers $a_1, a_2, \\ldots, a_n$ on the board. An integer $x$ is called a $k$-bit integer if $0 \\leq x \\leq 2^k - 1$. \nOf course, Vanya was not able to resist and started changing the numbers written on the board. To ensure that no one will note anything, Vanya allowed himself to make only one type of changes: choose an index of the array $i$ ($1 \\leq i \\leq n$) and replace the number $a_i$ with the number $\\overline{a_i}$. We define $\\overline{x}$ for a $k$-bit integer $x$ as the $k$-bit integer such that all its $k$ bits differ from the corresponding bits of $x$. \nVanya does not like the number $0$. Therefore, he likes such segments $[l, r]$ ($1 \\leq l \\leq r \\leq n$) such that $a_l \\oplus a_{l+1} \\oplus \\ldots \\oplus a_r \\neq 0$, where $\\oplus$ denotes the bitwise XOR operation. Determine the maximum number of segments he likes Vanya can get applying zero or more operations described above.\n-----Input-----\nThe first line of the input contains two integers $n$ and $k$ ($1 \\leq n \\leq 200\\,000$, $1 \\leq k \\leq 30$).\nThe next line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($0 \\leq a_i \\leq 2^k - 1$), separated by spaces\u00a0\u2014 the array of $k$-bit integers.\n-----Output-----\nPrint one integer\u00a0\u2014 the maximum possible number of segments with XOR not equal to $0$ that can be obtained by making several (possibly $0$) operations described in the statement.\n-----Examples-----\nInput\n3 2\n1 3 0\nOutput\n5\nInput\n6 3\n1 4 4 7 3 4\nOutput\n19\n-----Note-----\nIn the first example if Vasya does not perform any operations, he gets an array that has $5$ segments that Vanya likes. If he performs the operation with $i = 2$, he gets an array $[1, 0, 0]$, because $\\overline{3} = 0$ when $k = 2$. This array has $3$ segments that Vanya likes. Also, to get an array with $5$ segments that Vanya likes, he can perform two operations with $i = 3$ and with $i = 2$. He then gets an array $[1, 0, 3]$. It can be proven that he can't obtain $6$ or more segments that he likes.\nIn the second example, to get $19$ segments that Vanya likes, he can perform $4$ operations with $i = 3$, $i = 4$, $i = 5$, $i = 6$ and get an array $[1, 4, 3, 0, 4, 3]$.\n\ndef",
        "answer": "def XOR(a, b):\n    return a ^ b",
        "difficulty": "interview"
    },
    {
        "task_id": 1282,
        "prompt": "Complete the Python function given the prompt below:There are n schoolchildren, boys and girls, lined up in the school canteen in front of the bun stall. The buns aren't ready yet and the line is undergoing some changes.\nEach second all boys that stand right in front of girls, simultaneously swap places with the girls (so that the girls could go closer to the beginning of the line). In other words, if at some time the i-th position has a boy and the (i + 1)-th position has a girl, then in a second, the i-th position will have a girl and the (i + 1)-th one will have a boy.\nLet's take an example of a line of four people: a boy, a boy, a girl, a girl (from the beginning to the end of the line). Next second the line will look like that: a boy, a girl, a boy, a girl. Next second it will be a girl, a boy, a girl, a boy. Next second it will be a girl, a girl, a boy, a boy. The line won't change any more.\nYour task is: given the arrangement of the children in the line to determine the time needed to move all girls in front of boys (in the example above it takes 3 seconds). Baking buns takes a lot of time, so no one leaves the line until the line stops changing.\n-----Input-----\nThe first line contains a sequence of letters without spaces s_1s_2... s_{n} (1 \u2264 n \u2264 10^6), consisting of capital English letters M and F. If letter s_{i} equals M, that means that initially, the line had a boy on the i-th position. If letter s_{i} equals F, then initially the line had a girl on the i-th position.\n-----Output-----\nPrint a single integer \u2014 the number of seconds needed to move all the girls in the line in front of the boys. If the line has only boys or only girls, print 0.\n-----Examples-----\nInput\nMFM\nOutput\n1\nInput\nMMFF\nOutput\n3\nInput\nFFMMM\nOutput\n0\n-----Note-----\nIn the first test case the sequence of changes looks as follows: MFM  \u2192  FMM.\nThe second test sample corresponds to the sample from the statement. The sequence of changes is: MMFF  \u2192  MFMF  \u2192  FMFM  \u2192  FFMM.\n\ndef",
        "answer": "def schoolchildren(s):\n    boys = 0\n    girls = 0\n    for i in range(len(s)):\n        if s[i] == 'M':\n            boys += 1\n        else:\n            girls += 1\n    if boys == girls:\n        return 0\n    else:\n        return abs(boys - girls)",
        "difficulty": "interview"
    },
    {
        "task_id": 1283,
        "prompt": "Complete the Python function given the prompt below:Arkady is playing Battleship. The rules of this game aren't really important.\nThere is a field of $n \\times n$ cells. There should be exactly one $k$-decker on the field, i.\u00a0e. a ship that is $k$ cells long oriented either horizontally or vertically. However, Arkady doesn't know where it is located. For each cell Arkady knows if it is definitely empty or can contain a part of the ship.\nConsider all possible locations of the ship. Find such a cell that belongs to the maximum possible number of different locations of the ship.\n-----Input-----\nThe first line contains two integers $n$ and $k$ ($1 \\le k \\le n \\le 100$)\u00a0\u2014 the size of the field and the size of the ship.\nThe next $n$ lines contain the field. Each line contains $n$ characters, each of which is either '#' (denotes a definitely empty cell) or '.' (denotes a cell that can belong to the ship).\n-----Output-----\nOutput two integers\u00a0\u2014 the row and the column of a cell that belongs to the maximum possible number of different locations of the ship.\nIf there are multiple answers, output any of them. In particular, if no ship can be placed on the field, you can output any cell.\n-----Examples-----\nInput\n4 3\n#..#\n#.#.\n....\n.###\nOutput\n3 2\nInput\n10 4\n#....##...\n.#...#....\n..#..#..#.\n...#.#....\n.#..##.#..\n.....#...#\n...#.##...\n.#...#.#..\n.....#..#.\n...#.#...#\nOutput\n6 1\nInput\n19 6\n##..............###\n#......#####.....##\n.....#########.....\n....###########....\n...#############...\n..###############..\n.#################.\n.#################.\n.#################.\n.#################.\n#####....##....####\n####............###\n####............###\n#####...####...####\n.#####..####..#####\n...###........###..\n....###########....\n.........##........\n#.................#\nOutput\n1 8\n-----Note-----\nThe picture below shows the three possible locations of the ship that contain the cell $(3, 2)$ in the first sample. [Image]\n\ndef",
        "answer": "def find_ship(field):\n    n, k = len(field), len(field[0])\n    for i in range(n):\n        for j in range(k):\n            if field[i][j] == '#':\n                field[i][j] = '.'\n                if i > 0 and field[i - 1][j] == '#':\n                    field[i - 1][j] = '.'\n                if j > 0 and field[i][j - 1] == '#':\n                    field[i][j - 1] = '.'\n                if i < n - 1 and field[i + 1][j] == '#':\n                    field[i + 1][j] = '.'\n                if j < k - 1 and field[i][j + 1] == '#':\n                    field[i][j + 1] = '.'\n    return field",
        "difficulty": "interview"
    },
    {
        "task_id": 1284,
        "prompt": "Complete the Python function given the prompt below:Danny, the local Math Maniac, is fascinated by circles, Omkar's most recent creation. Help him solve this circle problem!\nYou are given $n$ nonnegative integers $a_1, a_2, \\dots, a_n$ arranged in a circle, where $n$ must be odd (ie. $n-1$ is divisible by $2$). Formally, for all $i$ such that $2 \\leq i \\leq n$, the elements $a_{i - 1}$ and $a_i$ are considered to be adjacent, and $a_n$ and $a_1$ are also considered to be adjacent. In one operation, you pick a number on the circle, replace it with the sum of the two elements adjacent to it, and then delete the two adjacent elements from the circle. This is repeated until only one number remains in the circle, which we call the circular value.\nHelp Danny find the maximum possible circular value after some sequences of operations. \n-----Input-----\nThe first line contains one odd integer $n$ ($1 \\leq n < 2 \\cdot 10^5$, $n$ is odd) \u00a0\u2014 the initial size of the circle.\nThe second line contains $n$ integers $a_{1},a_{2},\\dots,a_{n}$ ($0 \\leq a_{i} \\leq 10^9$) \u00a0\u2014 the initial numbers in the circle.\n-----Output-----\nOutput the maximum possible circular value after applying some sequence of operations to the given circle.\n-----Examples-----\nInput\n3\n7 10 2\nOutput\n17\nInput\n1\n4\nOutput\n4\n-----Note-----\nFor the first test case, here's how a circular value of $17$ is obtained:\nPick the number at index $3$. The sum of adjacent elements equals $17$. Delete $7$ and $10$ from the circle and replace $2$ with $17$.\nNote that the answer may not fit in a $32$-bit integer.\n\ndef",
        "answer": "def solve(n, a):\n    if n == 1:\n        return a[0]\n    else:\n        return max(solve(n-1, a[1:]) + a[0], solve(n-1, a[:-1]) + a[-1])",
        "difficulty": "interview"
    },
    {
        "task_id": 1285,
        "prompt": "Complete the Python function given the prompt below:You are given a binary matrix $A$ of size $n \\times n$. Let's denote an $x$-compression of the given matrix as a matrix $B$ of size $\\frac{n}{x} \\times \\frac{n}{x}$ such that for every $i \\in [1, n], j \\in [1, n]$ the condition $A[i][j] = B[\\lceil \\frac{i}{x} \\rceil][\\lceil \\frac{j}{x} \\rceil]$ is met.\nObviously, $x$-compression is possible only if $x$ divides $n$, but this condition is not enough. For example, the following matrix of size $2 \\times 2$ does not have any $2$-compression:\n $01$   $10$ \nFor the given matrix $A$, find maximum $x$ such that an $x$-compression of this matrix is possible.\nNote that the input is given in compressed form. But even though it is compressed, you'd better use fast input.\n-----Input-----\nThe first line contains one number $n$ ($4 \\le n \\le 5200$) \u2014 the number of rows and columns in the matrix $A$. It is guaranteed that $n$ is divisible by $4$.\nThen the representation of matrix follows. Each of $n$ next lines contains $\\frac{n}{4}$ one-digit hexadecimal numbers (that is, these numbers can be represented either as digits from $0$ to $9$ or as uppercase Latin letters from $A$ to $F$). Binary representation of each of these numbers denotes next $4$ elements of the matrix in the corresponding row. For example, if the number $B$ is given, then the corresponding elements are 1011, and if the number is $5$, then the corresponding elements are 0101.\nElements are not separated by whitespaces.\n-----Output-----\nPrint one number: maximum $x$ such that an $x$-compression of the given matrix is possible.\n-----Examples-----\nInput\n8\nE7\nE7\nE7\n00\n00\nE7\nE7\nE7\nOutput\n1\nInput\n4\n7\nF\nF\nF\nOutput\n1\n-----Note-----\nThe first example corresponds to the matrix:  $11100111$   $11100111$   $11100111$   $00000000$   $00000000$   $11100111$   $11100111$   $11100111$ \nIt is easy to see that the answer on this example is $1$.\n\ndef",
        "answer": "def compress(matrix):\n    n = len(matrix)\n    x = n // 4\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j]!= matrix[i // x][j // x]:\n                return x\n    return 1",
        "difficulty": "interview"
    },
    {
        "task_id": 1286,
        "prompt": "Complete the Python function given the prompt below:As we all know Barney's job is \"PLEASE\" and he has not much to do at work. That's why he started playing \"cups and key\". In this game there are three identical cups arranged in a line from left to right. Initially key to Barney's heart is under the middle cup. $\\left. \\begin{array}{l}{\\text{Rey}} \\\\{\\text{to my}} \\\\{\\text{heart}} \\end{array} \\right.$ \nThen at one turn Barney swaps the cup in the middle with any of other two cups randomly (he choses each with equal probability), so the chosen cup becomes the middle one. Game lasts n turns and Barney independently choses a cup to swap with the middle one within each turn, and the key always remains in the cup it was at the start.\nAfter n-th turn Barney asks a girl to guess which cup contains the key. The girl points to the middle one but Barney was distracted while making turns and doesn't know if the key is under the middle cup. That's why he asked you to tell him the probability that girl guessed right.\nNumber n of game turns can be extremely large, that's why Barney did not give it to you. Instead he gave you an array a_1, a_2,..., a_{k} such that  $n = \\prod_{i = 1}^{k} a_{i}$ \nin other words, n is multiplication of all elements of the given array.\nBecause of precision difficulties, Barney asked you to tell him the answer as an irreducible fraction. In other words you need to find it as a fraction p / q such that $\\operatorname{gcd}(p, q) = 1$, where $gcd$ is the greatest common divisor. Since p and q can be extremely large, you only need to find the remainders of dividing each of them by 10^9 + 7.\nPlease note that we want $gcd$ of p and q to be 1, not $gcd$ of their remainders after dividing by 10^9 + 7.\n-----Input-----\nThe first line of input contains a single integer k (1 \u2264 k \u2264 10^5)\u00a0\u2014 the number of elements in array Barney gave you.\nThe second line contains k integers a_1, a_2,..., a_{k} (1 \u2264 a_{i} \u2264 10^18)\u00a0\u2014 the elements of the array.\n-----Output-----\nIn the only line of output print a single string x / y where x is the remainder of dividing p by 10^9 + 7 and y is the remainder of dividing q by 10^9 + 7.\n-----Examples-----\nInput\n1\n2\nOutput\n1/2\nInput\n3\n1 1 1\nOutput\n0/1\n\ndef",
        "answer": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a",
        "difficulty": "interview"
    },
    {
        "task_id": 1287,
        "prompt": "Complete the Python function given the prompt below:The rules of Sith Tournament are well known to everyone. n Sith take part in the Tournament. The Tournament starts with the random choice of two Sith who will fight in the first battle. As one of them loses, his place is taken by the next randomly chosen Sith who didn't fight before. Does it need to be said that each battle in the Sith Tournament ends with a death of one of opponents? The Tournament ends when the only Sith remains alive.\nJedi Ivan accidentally appeared in the list of the participants in the Sith Tournament. However, his skills in the Light Side of the Force are so strong so he can influence the choice of participants either who start the Tournament or who take the loser's place after each battle. Of course, he won't miss his chance to take advantage of it. Help him to calculate the probability of his victory.\n-----Input-----\nThe first line contains a single integer n (1 \u2264 n \u2264 18)\u00a0\u2014 the number of participants of the Sith Tournament.\nEach of the next n lines contains n real numbers, which form a matrix p_{ij} (0 \u2264 p_{ij} \u2264 1). Each its element p_{ij} is the probability that the i-th participant defeats the j-th in a duel.\nThe elements on the main diagonal p_{ii} are equal to zero. For all different i, j the equality p_{ij} + p_{ji} = 1 holds. All probabilities are given with no more than six decimal places.\nJedi Ivan is the number 1 in the list of the participants.\n-----Output-----\nOutput a real number\u00a0\u2014 the probability that Jedi Ivan will stay alive after the Tournament. Absolute or relative error of the answer must not exceed 10^{ - 6}.\n-----Examples-----\nInput\n3\n0.0 0.5 0.8\n0.5 0.0 0.4\n0.2 0.6 0.0\nOutput\n0.680000000000000\n\ndef",
        "answer": "def sith_tournament(matrix):\n    n = len(matrix)\n    s = 0\n    for i in range(n):\n        for j in range(n):\n            if i!= j:\n                s += matrix[i][j]\n    return 1 - s",
        "difficulty": "interview"
    },
    {
        "task_id": 1288,
        "prompt": "Complete the Python function given the prompt below:Ashish has an array $a$ of size $n$.\nA subsequence of $a$ is defined as a sequence that can be obtained from $a$ by deleting some elements (possibly none), without changing the order of the remaining elements.\nConsider a subsequence $s$ of $a$. He defines the cost of $s$ as the minimum between:   The maximum among all elements at odd indices of $s$.  The maximum among all elements at even indices of $s$. \nNote that the index of an element is its index in $s$, rather than its index in $a$. The positions are numbered from $1$. So, the cost of $s$ is equal to $min(max(s_1, s_3, s_5, \\ldots), max(s_2, s_4, s_6, \\ldots))$.\nFor example, the cost of $\\{7, 5, 6\\}$ is $min( max(7, 6), max(5) ) = min(7, 5) = 5$.\nHelp him find the minimum cost of a subsequence of size $k$.\n-----Input-----\nThe first line contains two integers $n$ and $k$ ($2 \\leq k \\leq n \\leq 2 \\cdot 10^5$) \u00a0\u2014 the size of the array $a$ and the size of the subsequence.\nThe next line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq 10^9$) \u00a0\u2014 the elements of the array $a$.\n-----Output-----\nOutput a single integer \u00a0\u2014 the minimum cost of a subsequence of size $k$.\n-----Examples-----\nInput\n4 2\n1 2 3 4\nOutput\n1\nInput\n4 3\n1 2 3 4\nOutput\n2\nInput\n5 3\n5 3 4 2 6\nOutput\n2\nInput\n6 4\n5 3 50 2 4 5\nOutput\n3\n-----Note-----\nIn the first test, consider the subsequence $s$ = $\\{1, 3\\}$. Here the cost is equal to $min(max(1), max(3)) = 1$.\nIn the second test, consider the subsequence $s$ = $\\{1, 2, 4\\}$. Here the cost is equal to $min(max(1, 4), max(2)) = 2$.\nIn the fourth test, consider the subsequence $s$ = $\\{3, 50, 2, 4\\}$. Here the cost is equal to $min(max(3, 2), max(50, 4)) = 3$.\n\ndef",
        "answer": "def min_cost(a, k):\n    n = len(a)\n    s = a[:k]\n    s.sort()\n    return min(s[0], s[-1])",
        "difficulty": "interview"
    },
    {
        "task_id": 1289,
        "prompt": "Complete the Python function given the prompt below:In Berland a bus travels along the main street of the capital. The street begins from the main square and looks like a very long segment. There are n bus stops located along the street, the i-th of them is located at the distance a_{i} from the central square, all distances are distinct, the stops are numbered in the order of increasing distance from the square, that is, a_{i} < a_{i} + 1 for all i from 1 to n - 1. The bus starts its journey from the first stop, it passes stops 2, 3 and so on. It reaches the stop number n, turns around and goes in the opposite direction to stop 1, passing all the intermediate stops in the reverse order. After that, it again starts to move towards stop n. During the day, the bus runs non-stop on this route.\nThe bus is equipped with the Berland local positioning system. When the bus passes a stop, the system notes down its number.\nOne of the key features of the system is that it can respond to the queries about the distance covered by the bus for the parts of its path between some pair of stops. A special module of the system takes the input with the information about a set of stops on a segment of the path, a stop number occurs in the set as many times as the bus drove past it. This module returns the length of the traveled segment of the path (or -1 if it is impossible to determine the length uniquely). The operation of the module is complicated by the fact that stop numbers occur in the request not in the order they were visited but in the non-decreasing order.\nFor example, if the number of stops is 6, and the part of the bus path starts at the bus stop number 5, ends at the stop number 3 and passes the stops as follows: $5 \\rightarrow 6 \\rightarrow 5 \\rightarrow 4 \\rightarrow 3$, then the request about this segment of the path will have form: 3, 4, 5, 5, 6. If the bus on the segment of the path from stop 5 to stop 3 has time to drive past the 1-th stop (i.e., if we consider a segment that ends with the second visit to stop 3 on the way from 5), then the request will have form: 1, 2, 2, 3, 3, 4, 5, 5, 6.\nYou will have to repeat the Berland programmers achievement and implement this function.\n-----Input-----\nThe first line contains integer n (2 \u2264 n \u2264 2\u00b710^5) \u2014 the number of stops.\nThe second line contains n integers (1 \u2264 a_{i} \u2264 10^9) \u2014 the distance from the i-th stop to the central square. The numbers in the second line go in the increasing order.\nThe third line contains integer m (1 \u2264 m \u2264 4\u00b710^5) \u2014 the number of stops the bus visited on some segment of the path.\nThe fourth line contains m integers (1 \u2264 b_{i} \u2264 n) \u2014 the sorted list of numbers of the stops visited by the bus on the segment of the path. The number of a stop occurs as many times as it was visited by a bus.\nIt is guaranteed that the query corresponds to some segment of the path.\n-----Output-----\nIn the single line please print the distance covered by a bus. If it is impossible to determine it unambiguously, print  - 1.\n-----Examples-----\nInput\n6\n2 3 5 7 11 13\n5\n3 4 5 5 6\nOutput\n10\nInput\n6\n2 3 5 7 11 13\n9\n1 2 2 3 3 4 5 5 6\nOutput\n16\nInput\n3\n10 200 300\n4\n1 2 2 3\nOutput\n-1\nInput\n3\n1 2 3\n4\n1 2 2 3\nOutput\n3\n-----Note-----\nThe first test from the statement demonstrates the first example shown in the statement of the problem.\nThe second test from the statement demonstrates the second example shown in the statement of the problem.\nIn the third sample there are two possible paths that have distinct lengths, consequently, the sought length of the segment isn't defined uniquely.\nIn the fourth sample, even though two distinct paths correspond to the query, they have the same lengths, so the sought length of the segment is defined uniquely.\n\ndef",
        "answer": "def berland(n, a, m, b):\n    # Write your code here\n    b.sort()\n    if n == 1:\n        return a[0]\n    if m == 1:\n        return a[0]\n    if m == 2:\n        return a[b[0]] + a[b[1]]\n    if m == 3:\n        return a[b[0]] + a[b[1]] + a[b[2]]\n    if m == 4:\n        return a[b[0]] + a[b[1]] + a[b[2]] + a[b[3]]\n    if m == 5:\n        return a[b[0]] + a[b[1]] + a[b[2]] + a[b[3]] + a[b[4]]\n    if m == 6:\n        return a[b[0]] + a[b[1]] + a[b[2]] + a[b[3]] + a[b[4]] + a[b[5]]\n    if m == 7:\n        return a[b[0]] + a[b[1]] + a[b[2]] + a[b[3]] + a[b[4]] + a[b[5]] + a[b[6]]\n    if m == 8:\n        return a[b[0]] + a[b[1]] + a[b[2]] + a[b[3]] + a[b[4]] + a[b[5]] + a[b[6]] + a[b[7]]\n    if m == 9:\n        return a[b[0]] + a[b[1]] + a[b[2]] + a[b[3]] + a[",
        "difficulty": "interview"
    },
    {
        "task_id": 1290,
        "prompt": "Complete the Python function given the prompt below:You are given a following process. \nThere is a platform with $n$ columns. $1 \\times 1$ squares are appearing one after another in some columns on this platform. If there are no squares in the column, a square will occupy the bottom row. Otherwise a square will appear at the top of the highest square of this column. \nWhen all of the $n$ columns have at least one square in them, the bottom row is being removed. You will receive $1$ point for this, and all the squares left will fall down one row. \nYou task is to calculate the amount of points you will receive.\n-----Input-----\nThe first line of input contain 2 integer numbers $n$ and $m$ ($1 \\le n, m \\le 1000$) \u2014 the length of the platform and the number of the squares.\nThe next line contain $m$ integer numbers $c_1, c_2, \\dots, c_m$ ($1 \\le c_i \\le n$) \u2014 column in which $i$-th square will appear.\n-----Output-----\nPrint one integer \u2014 the amount of points you will receive.\n-----Example-----\nInput\n3 9\n1 1 2 2 2 3 1 2 3\nOutput\n2\n-----Note-----\nIn the sample case the answer will be equal to $2$ because after the appearing of $6$-th square will be removed one row (counts of the squares on the platform will look like $[2~ 3~ 1]$, and after removing one row will be $[1~ 2~ 0]$).\nAfter the appearing of $9$-th square counts will be $[2~ 3~ 1]$, and after removing one row it will look like $[1~ 2~ 0]$.\nSo the answer will be equal to $2$.\n\ndef",
        "answer": "def points(n, m, c):\n    points = 0\n    for i in range(m):\n        if c[i] == n:\n            points += 1\n            n -= 1\n    return points",
        "difficulty": "interview"
    },
    {
        "task_id": 1291,
        "prompt": "Complete the Python function given the prompt below:Berlanders like to eat cones after a hard day. Misha Square and Sasha Circle are local authorities of Berland. Each of them controls its points of cone trade. Misha has n points, Sasha \u2014 m. Since their subordinates constantly had conflicts with each other, they decided to build a fence in the form of a circle, so that the points of trade of one businessman are strictly inside a circle, and points of the other one are strictly outside. It doesn't matter which of the two gentlemen will have his trade points inside the circle.\nDetermine whether they can build a fence or not.\n-----Input-----\nThe first line contains two integers n and m (1 \u2264 n, m \u2264 10000), numbers of Misha's and Sasha's trade points respectively.\nThe next n lines contains pairs of space-separated integers M_{x}, M_{y} ( - 10^4 \u2264 M_{x}, M_{y} \u2264 10^4), coordinates of Misha's trade points.\nThe next m lines contains pairs of space-separated integers S_{x}, S_{y} ( - 10^4 \u2264 S_{x}, S_{y} \u2264 10^4), coordinates of Sasha's trade points.\nIt is guaranteed that all n + m points are distinct.\n-----Output-----\nThe only output line should contain either word \"YES\" without quotes in case it is possible to build a such fence or word \"NO\" in the other case.\n-----Examples-----\nInput\n2 2\n-1 0\n1 0\n0 -1\n0 1\nOutput\nNO\nInput\n4 4\n1 0\n0 1\n-1 0\n0 -1\n1 1\n-1 1\n-1 -1\n1 -1\nOutput\nYES\n-----Note-----\nIn the first sample there is no possibility to separate points, because any circle that contains both points ( - 1, 0), (1, 0) also contains at least one point from the set (0,  - 1), (0, 1), and vice-versa: any circle that contains both points (0,  - 1), (0, 1) also contains at least one point from the set ( - 1, 0), (1, 0)\nIn the second sample one of the possible solution is shown below. Misha's points are marked with red colour and Sasha's are marked with blue. [Image]\n\ndef",
        "answer": "def is_inside(x, y, cx, cy, r):\n    return (x - cx) ** 2 + (y - cy) ** 2 <= r ** 2",
        "difficulty": "interview"
    },
    {
        "task_id": 1292,
        "prompt": "Complete the Python function given the prompt below:Kilani is playing a game with his friends. This game can be represented as a grid of size $n \\times m$, where each cell is either empty or blocked, and every player has one or more castles in some cells (there are no two castles in one cell).\nThe game is played in rounds. In each round players expand turn by turn: firstly, the first player expands, then the second player expands and so on. The expansion happens as follows: for each castle the player owns now, he tries to expand into the empty cells nearby. The player $i$ can expand from a cell with his castle to the empty cell if it's possible to reach it in at most $s_i$ (where $s_i$ is player's expansion speed) moves to the left, up, right or down without going through blocked cells or cells occupied by some other player's castle. The player examines the set of cells he can expand to and builds a castle in each of them at once. The turned is passed to the next player after that. \nThe game ends when no player can make a move. You are given the game field and speed of the expansion for each player. Kilani wants to know for each player how many cells he will control (have a castle their) after the game ends.\n-----Input-----\nThe first line contains three integers $n$, $m$ and $p$ ($1 \\le n, m \\le 1000$, $1 \\le p \\le 9$)\u00a0\u2014 the size of the grid and the number of players.\nThe second line contains $p$ integers $s_i$ ($1 \\le s \\le 10^9$)\u00a0\u2014 the speed of the expansion for every player.\nThe following $n$ lines describe the game grid. Each of them consists of $m$ symbols, where '.' denotes an empty cell, '#' denotes a blocked cell and digit $x$ ($1 \\le x \\le p$) denotes the castle owned by player $x$.\nIt is guaranteed, that each player has at least one castle on the grid.\n-----Output-----\nPrint $p$ integers\u00a0\u2014 the number of cells controlled by each player after the game ends.\n-----Examples-----\nInput\n3 3 2\n1 1\n1..\n...\n..2\nOutput\n6 3 \nInput\n3 4 4\n1 1 1 1\n....\n#...\n1234\nOutput\n1 4 3 3 \n-----Note-----\nThe picture below show the game before it started, the game after the first round and game after the second round in the first example:\n [Image] \nIn the second example, the first player is \"blocked\" so he will not capture new cells for the entire game. All other player will expand up during the first two rounds and in the third round only the second player will move to the left.\n\ndef",
        "answer": "def game(n, m, p, s):\n    # your code here\n    return None",
        "difficulty": "interview"
    },
    {
        "task_id": 1293,
        "prompt": "Complete the Python function given the prompt below:Wilbur the pig is tinkering with arrays again. He has the array a_1, a_2,..., a_{n} initially consisting of n zeros. At one step, he can choose any index i and either add 1 to all elements a_{i}, a_{i} + 1,..., a_{n} or subtract 1 from all elements a_{i}, a_{i} + 1,..., a_{n}. His goal is to end up with the array b_1, b_2,..., b_{n}. \nOf course, Wilbur wants to achieve this goal in the minimum number of steps and asks you to compute this value.\n-----Input-----\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 200 000)\u00a0\u2014 the length of the array a_{i}. Initially a_{i} = 0 for every position i, so this array is not given in the input.\nThe second line of the input contains n integers b_1, b_2,..., b_{n} ( - 10^9 \u2264 b_{i} \u2264 10^9).\n-----Output-----\nPrint the minimum number of steps that Wilbur needs to make in order to achieve a_{i} = b_{i} for all i.\n-----Examples-----\nInput\n5\n1 2 3 4 5\nOutput\n5\nInput\n4\n1 2 2 1\nOutput\n3\n-----Note-----\nIn the first sample, Wilbur may successively choose indices 1, 2, 3, 4, and 5, and add 1 to corresponding suffixes.\nIn the second sample, Wilbur first chooses indices 1 and 2 and adds 1 to corresponding suffixes, then he chooses index 4 and subtract 1.\n\ndef",
        "answer": "def min_steps(a, b):\n    return sum(a[i]!= b[i] for i in range(len(a)))",
        "difficulty": "interview"
    },
    {
        "task_id": 1294,
        "prompt": "Complete the Python function given the prompt below:Recently Polycarp noticed that some of the buttons of his keyboard are malfunctioning. For simplicity, we assume that Polycarp's keyboard contains $26$ buttons (one for each letter of the Latin alphabet). Each button is either working fine or malfunctioning. \nTo check which buttons need replacement, Polycarp pressed some buttons in sequence, and a string $s$ appeared on the screen. When Polycarp presses a button with character $c$, one of the following events happened:\n  if the button was working correctly, a character $c$ appeared at the end of the string Polycarp was typing;  if the button was malfunctioning, two characters $c$ appeared at the end of the string. \nFor example, suppose the buttons corresponding to characters a and c are working correctly, and the button corresponding to b is malfunctioning. If Polycarp presses the buttons in the order a, b, a, c, a, b, a, then the string he is typing changes as follows: a $\\rightarrow$ abb $\\rightarrow$ abba $\\rightarrow$ abbac $\\rightarrow$ abbaca $\\rightarrow$ abbacabb $\\rightarrow$ abbacabba.\nYou are given a string $s$ which appeared on the screen after Polycarp pressed some buttons. Help Polycarp to determine which buttons are working correctly for sure (that is, this string could not appear on the screen if any of these buttons was malfunctioning).\nYou may assume that the buttons don't start malfunctioning when Polycarp types the string: each button either works correctly throughout the whole process, or malfunctions throughout the whole process.\n-----Input-----\nThe first line contains one integer $t$ ($1 \\le t \\le 100$) \u2014 the number of test cases in the input.\nThen the test cases follow. Each test case is represented by one line containing a string $s$ consisting of no less than $1$ and no more than $500$ lowercase Latin letters.\n-----Output-----\nFor each test case, print one line containing a string $res$. The string $res$ should contain all characters which correspond to buttons that work correctly in alphabetical order, without any separators or repetitions. If all buttons may malfunction, $res$ should be empty.\n-----Example-----\nInput\n4\na\nzzaaz\nccff\ncbddbb\nOutput\na\nz\nbc\n\ndef",
        "answer": "def keyboard(s):\n    # Write your code here\n    l = []\n    for i in range(len(s)):\n        if s[i] not in l:\n            l.append(s[i])\n    l.sort()\n    return ''.join(l)",
        "difficulty": "interview"
    },
    {
        "task_id": 1295,
        "prompt": "Complete the Python function given the prompt below:You are given n points on the straight line \u2014 the positions (x-coordinates) of the cities and m points on the same line \u2014 the positions (x-coordinates) of the cellular towers. All towers work in the same way \u2014 they provide cellular network for all cities, which are located at the distance which is no more than r from this tower.\nYour task is to find minimal r that each city has been provided by cellular network, i.e. for each city there is at least one cellular tower at the distance which is no more than r.\nIf r = 0 then a tower provides cellular network only for the point where it is located. One tower can provide cellular network for any number of cities, but all these cities must be at the distance which is no more than r from this tower.\n-----Input-----\nThe first line contains two positive integers n and m (1 \u2264 n, m \u2264 10^5) \u2014 the number of cities and the number of cellular towers.\nThe second line contains a sequence of n integers a_1, a_2,..., a_{n} ( - 10^9 \u2264 a_{i} \u2264 10^9) \u2014 the coordinates of cities. It is allowed that there are any number of cities in the same point. All coordinates a_{i} are given in non-decreasing order.\nThe third line contains a sequence of m integers b_1, b_2,..., b_{m} ( - 10^9 \u2264 b_{j} \u2264 10^9) \u2014 the coordinates of cellular towers. It is allowed that there are any number of towers in the same point. All coordinates b_{j} are given in non-decreasing order.\n-----Output-----\nPrint minimal r so that each city will be covered by cellular network.\n-----Examples-----\nInput\n3 2\n-2 2 4\n-3 0\nOutput\n4\nInput\n5 3\n1 5 10 14 17\n4 11 15\nOutput\n3\n\ndef",
        "answer": "def find_r(n, m, a, b):\n    a.sort()\n    b.sort()\n    r = 0\n    for i in range(m):\n        r = max(r, abs(a[i] - b[i]))\n    return r",
        "difficulty": "interview"
    },
    {
        "task_id": 1296,
        "prompt": "Complete the Python function given the prompt below:On his trip to Luxor and Aswan, Sagheer went to a Nubian market to buy some souvenirs for his friends and relatives. The market has some strange rules. It contains n different items numbered from 1 to n. The i-th item has base cost a_{i} Egyptian pounds. If Sagheer buys k items with indices x_1, x_2,..., x_{k}, then the cost of item x_{j} is a_{x}_{j} + x_{j}\u00b7k for 1 \u2264 j \u2264 k. In other words, the cost of an item is equal to its base cost in addition to its index multiplied by the factor k.\nSagheer wants to buy as many souvenirs as possible without paying more than S Egyptian pounds. Note that he cannot buy a souvenir more than once. If there are many ways to maximize the number of souvenirs, he will choose the way that will minimize the total cost. Can you help him with this task?\n-----Input-----\nThe first line contains two integers n and S (1 \u2264 n \u2264 10^5 and 1 \u2264 S \u2264 10^9)\u00a0\u2014 the number of souvenirs in the market and Sagheer's budget.\nThe second line contains n space-separated integers a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 10^5)\u00a0\u2014 the base costs of the souvenirs.\n-----Output-----\nOn a single line, print two integers k, T\u00a0\u2014 the maximum number of souvenirs Sagheer can buy and the minimum total cost to buy these k souvenirs.\n-----Examples-----\nInput\n3 11\n2 3 5\nOutput\n2 11\nInput\n4 100\n1 2 5 6\nOutput\n4 54\nInput\n1 7\n7\nOutput\n0 0\n-----Note-----\nIn the first example, he cannot take the three items because they will cost him [5, 9, 14] with total cost 28. If he decides to take only two items, then the costs will be [4, 7, 11]. So he can afford the first and second items.\nIn the second example, he can buy all items as they will cost him [5, 10, 17, 22].\nIn the third example, there is only one souvenir in the market which will cost him 8 pounds, so he cannot buy it.\n\ndef",
        "answer": "def solve(n, s, a):\n    a.sort()\n    i = 0\n    j = n - 1\n    while i < j:\n        if a[i] + a[j] > s:\n            j -= 1\n        else:\n            i += 1\n    return [i, j]",
        "difficulty": "interview"
    },
    {
        "task_id": 1297,
        "prompt": "Complete the Python function given the prompt below:You will receive 3 points for solving this problem.\nManao is designing the genetic code for a new type of algae to efficiently produce fuel. Specifically, Manao is focusing on a stretch of DNA that encodes one protein. The stretch of DNA is represented by a string containing only the characters 'A', 'T', 'G' and 'C'.\nManao has determined that if the stretch of DNA contains a maximal sequence of consecutive identical nucleotides that is of even length, then the protein will be nonfunctional. For example, consider a protein described by DNA string \"GTTAAAG\". It contains four maximal sequences of consecutive identical nucleotides: \"G\", \"TT\", \"AAA\", and \"G\". The protein is nonfunctional because sequence \"TT\" has even length.\nManao is trying to obtain a functional protein from the protein he currently has. Manao can insert additional nucleotides into the DNA stretch. Each additional nucleotide is a character from the set {'A', 'T', 'G', 'C'}. Manao wants to determine the minimum number of insertions necessary to make the DNA encode a functional protein.\n-----Input-----\nThe input consists of a single line, containing a string s of length n (1 \u2264 n \u2264 100). Each character of s will be from the set {'A', 'T', 'G', 'C'}.\nThis problem doesn't have subproblems. You will get 3 points for the correct submission.\n-----Output-----\nThe program should print on one line a single integer representing the minimum number of 'A', 'T', 'G', 'C' characters that are required to be inserted into the input string in order to make all runs of identical characters have odd length.\n-----Examples-----\nInput\nGTTAAAG\nOutput\n1\nInput\nAACCAACCAAAAC\nOutput\n5\n-----Note-----\nIn the first example, it is sufficient to insert a single nucleotide of any type between the two 'T's in the sequence to restore the functionality of the protein.\n\ndef",
        "answer": "def DNA_to_protein(s):\n    return",
        "difficulty": "interview"
    },
    {
        "task_id": 1298,
        "prompt": "Complete the Python function given the prompt below:Andrewid the Android is a galaxy-famous detective. In his free time he likes to think about strings containing zeros and ones.\nOnce he thought about a string of length n consisting of zeroes and ones. Consider the following operation: we choose any two adjacent positions in the string, and if one them contains 0, and the other contains 1, then we are allowed to remove these two digits from the string, obtaining a string of length n - 2 as a result.\nNow Andreid thinks about what is the minimum length of the string that can remain after applying the described operation several times (possibly, zero)? Help him to calculate this number.\n-----Input-----\nFirst line of the input contains a single integer n (1 \u2264 n \u2264 2\u00b710^5), the length of the string that Andreid has.\nThe second line contains the string of length n consisting only from zeros and ones.\n-----Output-----\nOutput the minimum length of the string that may remain after applying the described operations several times.\n-----Examples-----\nInput\n4\n1100\nOutput\n0\nInput\n5\n01010\nOutput\n1\nInput\n8\n11101111\nOutput\n6\n-----Note-----\nIn the first sample test it is possible to change the string like the following: $1100 \\rightarrow 10 \\rightarrow(\\text{empty})$.\nIn the second sample test it is possible to change the string like the following: $01010 \\rightarrow 010 \\rightarrow 0$.\nIn the third sample test it is possible to change the string like the following: $11101111 \\rightarrow 111111$.\n\ndef",
        "answer": "def andrewid(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i] == '0':\n            count += 1\n        else:\n            break\n    return count",
        "difficulty": "interview"
    },
    {
        "task_id": 1299,
        "prompt": "Complete the Python function given the prompt below:Reforms continue entering Berland. For example, during yesterday sitting the Berland Parliament approved as much as n laws (each law has been assigned a unique number from 1 to n). Today all these laws were put on the table of the President of Berland, G.W. Boosch, to be signed.\nThis time mr. Boosch plans to sign 2k laws. He decided to choose exactly two non-intersecting segments of integers from 1 to n of length k and sign all laws, whose numbers fall into these segments. More formally, mr. Boosch is going to choose two integers a, b (1 \u2264 a \u2264 b \u2264 n - k + 1, b - a \u2265 k) and sign all laws with numbers lying in the segments [a;\u00a0a + k - 1] and [b;\u00a0b + k - 1] (borders are included).\nAs mr. Boosch chooses the laws to sign, he of course considers the public opinion. Allberland Public Opinion Study Centre (APOSC) conducted opinion polls among the citizens, processed the results into a report and gave it to the president. The report contains the absurdity value for each law, in the public opinion. As mr. Boosch is a real patriot, he is keen on signing the laws with the maximum total absurdity. Help him.\n-----Input-----\nThe first line contains two integers n and k (2 \u2264 n \u2264 2\u00b710^5, 0 < 2k \u2264 n) \u2014 the number of laws accepted by the parliament and the length of one segment in the law list, correspondingly. The next line contains n integers x_1, x_2,..., x_{n} \u2014 the absurdity of each law (1 \u2264 x_{i} \u2264 10^9).\n-----Output-----\nPrint two integers a, b \u2014 the beginning of segments that mr. Boosch should choose. That means that the president signs laws with numbers from segments [a;\u00a0a + k - 1] and [b;\u00a0b + k - 1]. If there are multiple solutions, print the one with the minimum number a. If there still are multiple solutions, print the one with the minimum b.\n-----Examples-----\nInput\n5 2\n3 6 1 1 6\nOutput\n1 4\nInput\n6 2\n1 1 1 1 1 1\nOutput\n1 3\n-----Note-----\nIn the first sample mr. Boosch signs laws with numbers from segments [1;2] and [4;5]. The total absurdity of the signed laws equals 3 + 6 + 1 + 6 = 16.\nIn the second sample mr. Boosch signs laws with numbers from segments [1;2] and [3;4]. The total absurdity of the signed laws equals 1 + 1 + 1 + 1 = 4.\n\ndef",
        "answer": "def main():\n    n, k = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    a = 0\n    b = n - k + 1\n    min_a = 0\n    min_b = n\n    for i in range(n - k + 1):\n        if arr[i] + k - 1 < arr[i + k - 1]:\n            a = i\n            break\n    for i in range(n - k + 1, n):\n        if arr[i] + k - 1 < arr[i + k - 1]:\n            b = i\n            break\n    print(a, b)",
        "difficulty": "interview"
    }
]